TheHaskellRoad
to
Logic,MathandProgramming
KeesDoetsandJanvanEijck
March4,2004
Contents
Preface v
1Getting Started 1
1.1 Starting uptheHask ellInterpreter ................. 2
1.2 Implementing aPrime Number Test ................ 3
1.3 Hask ellTypeDeclarations ..................... 8
1.4 Identiﬁers inHask ell........................11
1.5 Playing theHask ellGame .....................12
1.6 Hask ellTypes ............................17
1.7 ThePrime Factorization Algorithm .................19
1.8 Themapandfilter Functions ...................20
1.9 Hask ellEquations andEquational Reasoning ...........24
1.10 Further Reading ...........................26
2Talking about Mathematical Objects 27
2.1 Logical Connecti vesandtheir Meanings ..............28
2.2 Logical Validity andRelated Notions ................38
2.3 Making Symbolic FormExplicit ..................50
2.4 Lambda Abstraction .........................58
2.5 Deﬁnitions andImplementations ..................60
2.6 Abstract Formulas andConcrete Structures ............61
2.7 Logical Handling oftheQuantiﬁers ................64
2.8 Quantiﬁers asProcedures ......................68
2.9 Further Reading ...........................70
3The UseofLogic: Proof 71
3.1 Proof Style .............................72
3.2 Proof Recipes ............................75
3.3 Rules fortheConnecti ves......................78
3.4 Rules fortheQuantiﬁers ......................90
i
ii CONTENTS
3.5 Summary oftheProof Recipes ...................96
3.6 Some Strate gicGuidelines .....................99
3.7 Reasoning andComputation with Primes ..............103
3.8 Further Reading ...........................111
4Sets, Types andLists 113
4.1 Let’sTalkAbout Sets ........................114
4.2 Paradox es,Types andTypeClasses .................121
4.3 Special Sets .............................125
4.4 Algebra ofSets ...........................127
4.5 PairsandProducts ..........................136
4.6 Lists andListOperations ......................139
4.7 ListComprehension andDatabase Query .............145
4.8 Using Lists toRepresent Sets ....................149
4.9 AData TypeforSets ........................153
4.10 Further Reading ...........................158
5Relations 161
5.1 TheNotion ofaRelation ......................162
5.2 Properties ofRelations .......................166
5.3 Implementing Relations asSets ofPairs ..............175
5.4 Implementing Relations asCharacteristic Functions ........182
5.5 Equi valence Relations ........................188
5.6 Equi valence Classes andPartitions .................192
5.7 IntegerPartitions ..........................202
5.8 Further Reading ...........................204
6Functions 205
6.1 Basic Notions ............................206
6.2 Surjections, Injections, Bijections .................218
6.3 Function Composition .......................222
6.4 InverseFunction ...........................226
6.5 Partial Functions ..........................229
6.6 Functions asPartitions .......................232
6.7 Products ...............................234
6.8 Congruences ............................236
6.9 Further Reading ...........................238
7Induction andRecursion 239
7.1 Mathematical Induction .......................239
7.2 Recursion overtheNatural Numbers ................246
7.3 TheNature ofRecursi veDeﬁnitions ................251
CONTENTS iii
7.4 Induction andRecursion overTrees ................255
7.5 Induction andRecursion overLists .................265
7.6 Some Variations ontheTowerofHanoi ..............273
7.7 Induction andRecursion overOther Data Structures ........281
7.8 Further Reading ...........................284
8Working with Numbers 285
8.1 AModule forNatural Numbers ...................286
8.2 GCD andtheFundamental Theorem ofArithmetic ........289
8.3 Integers ...............................293
8.4 Implementing IntegerArithmetic ..................297
8.5 Rational Numbers ..........................299
8.6 Implementing Rational Arithmetic .................305
8.7 Irrational Numbers .........................309
8.8 TheMechanic’ sRule ........................313
8.9 Reasoning about Reals .......................315
8.10 Comple xNumbers .........................319
8.11 Further Reading ...........................329
9Polynomials 331
9.1 Difference Analysis ofPolynomial Sequences ...........332
9.2 Gaussian Elimination ........................337
9.3 Polynomials andtheBinomial Theorem ..............344
9.4 Polynomials forCombinatorial Reasoning .............352
9.5 Further Reading ...........................359
10Corecursion 361
10.1 Corecursi veDeﬁnitions .......................362
10.2 Processes andLabeled Transition Systems .............365
10.3 Proof byApproximation ......................373
10.4 Proof byCoinduction ........................379
10.5 PowerSeries andGenerating Functions ..............385
10.6 Exponential Generating Functions .................396
10.7 Further Reading ...........................398
11Finite andInﬁnite Sets 399
11.1 More onMathematical Induction ..................399
11.2 Equipollence ............................406
11.3 Inﬁnite Sets .............................410
11.4 Cantor’ sWorldImplemented ....................418
11.5 Cardinal Numbers ..........................420
iv CONTENTS
The GreekAlphabet 423
Refer ences 424
Index 428
Preface
Purpose
Long ago, when Alexander theGreat askedthemathematician Menaechmus for
acrash course ingeometry ,hegotthefamous reply “There isnoroyalroad to
mathematics. ”Where there wasnoshortcut forAlexander ,there isnoshortcut
forus. Still, thefactthatwehaveaccess tocomputers andmature programming
languages means thatthere areavenues forusthatwere denied tothekings and
emperors ofyore.
Thepurpose ofthisbook istoteach logic andmathematical reasoning inpractice,
andtoconnect logical reasoning with computer programming. Theprogramming
language thatwill beourtool forthisisHask ell,amember oftheLisp family .
Hask ellemer gedinthelastdecade asastandard forlazy functional programming,
aprogramming style where arguments areevaluated only when thevalue isactu-
allyneeded. Functional programming isaform ofdescripti veprogramming, very
different from thestyle ofprogramming thatyouﬁnd inprescripti velanguages
likeCorJava.Hask ellisbased onalogical theory ofcomputable functions called
thelambda calculus.
Lambda calculus isaformal language capable ofexpressing arbitrary
computable functions. Incombination with types itforms acompact
waytodenote ontheonehand functional programs andontheother
hand mathematical proofs. [Bar84 ]
Hask ellcanbeviewed asaparticularly elegant implementation ofthelambda cal-
culus. Itisamarv elous demonstration toolforlogic andmath because itsfunc-
tional character allowsimplementations toremain veryclose totheconcepts that
getimplemented, while thelaziness permits smooth handling ofinﬁnite data struc-
tures.
v
vi
Hask ellsyntax iseasy tolearn, andHask ellprograms areconstructed andtested
inamodular fashion. This makesthelanguage well suited forfastprototyping.
Programmers ﬁnd totheir surprise thatimplementation ofawell-understood al-
gorithm inHask ellusually takesfarlesstime than implementation ofthesame
algorithm inother programming languages. Getting familiar with newalgorithms
through Hask ellisalso quite easy.Learning toprogram inHask ellislearning an
extremely useful skill.
Throughout thetext,abstract concepts arelinkedtoconcrete representations in
Hask ell.Hask ellcomes with aneasy touseinterpreter ,Hugs. Hask ellcompilers,
interpreters anddocumentation arefreely available from theInternet [HT].Every-
thing onehastoknowabout programming inHask elltounderstand theprograms
inthebook isexplained aswegoalong, butwedonotcovereveryaspect ofthe
language. Forafurther introduction toHask ellwerefer thereader to[HFP96 ].
Logic inPractice
The subject ofthisbook istheuseoflogic inpractice, more inparticular the
useoflogic inreasoning about programming tasks. Logic isnottaught here asa
mathematical discipline perse,butasanaidintheunderstanding andconstruction
ofproofs, andasatool forreasoning about formal objects likenumbers, lists,
trees, formulas, andsoon.Aswegoalong, wewill introduce theconcepts and
tools thatform theset-theoretic basis ofmathematics, anddemonstrate therole
ofthese concepts andtools inimplementations. These implementations canbe
thought ofasrepresentations ofthemathematical concepts.
Although itmay beargued thatthelogic thatisneeded foraproper understanding
ofreasoning inreasoned programming willgetacquired more orlessautomatically
intheprocess oflearning (applied) mathematics and/or programming, students
nowadays enter university without anyexperience whatsoe verwith mathematical
proof, thecentral notion ofmathematics.
Therules ofChapter 3represent adetailed account ofthestructure ofaproof. The
purpose ofthisaccount istogetthestudent acquainted with proofs byputting em-
phasis onlogical structure. Thestudent isencouraged towrite “detailed” proofs,
with everylogical movespelled outinfull. Thenextgoal istomoveontowriting
“concise” proofs, inthecustomary mathematical style, while keeping thelogical
structure inmind. Once thestudent hasarrivedatthisstage, most ofthelogic that
isexplained inChapter 3cansafely beforgotten, orbetter ,cansafely fadeintothe
subconsciousness ofthematured mathematical mind.
PREFACE vii
Pre-andPostconditions ofUse
Wedonotassume thatourreaders haveprevious experience with either program-
ming orconstruction offormal proofs. Wedoassume previous acquaintance with
mathematical notation, atthelevelofsecondary school mathematics. Where ver
necessary ,wewillrecall relevantfacts. Everything oneneeds toknowabout math-
ematical reasoning orprogramming isexplained aswegoalong. Wedoassume
thatourreaders areable toretrie vesoftw arefrom theInternet andinstall it,and
thattheyknowhowtouseaneditor forconstructing program texts.
After having workedthrough thematerial inthebook, i.e.,after having digested
thetextandhaving carried outasubstantial number oftheexercises, thereader
willbeable towrite interesting programs, reason about their correctness, anddoc-
ument them inaclear fashion. The reader will also havelearned howtosetup
mathematical proofs inastructured way,andhowtoread anddigest mathematical
proofs written byothers.
HowtoUsetheBook
Chapters 1–7ofthebook aredevoted toagradual introduction oftheconcepts,
tools andmethods ofmathematical reasoning andreasoned programming.
Chapter 8tells thestory ofhowthevarious number systems (natural numbers,
integers, rationals, reals, comple xnumbers) canbethought ofasconstructed in
stages from thenatural numbers. Everything getslinkedtotheimplementations of
thevarious Hask elltypes fornumerical computation.
Chapter 9starts with thequestion ofhowtoautomate thetask ofﬁnding closed
forms forpolynomial sequences. Itisdemonstrated howthistaskcanbeautomated
with difference analysis plus Gaussian elimination. Next,polynomials areimple-
mented aslistsoftheir coefﬁcients, with theappropriate numerical operations, and
itisshownhowthisrepresentation canbeused forsolving combinatorial problems.
Chapter 10provides theﬁrstgeneral textbook treatment (asfarasweknow)ofthe
important topic ofcorecursion. Thechapter presents theproof methods suitable for
reasoning about corecursi vedata types likestreams andprocesses, andthen goes
ontointroduce powerseries asinﬁnite listsofcoefﬁcients, andtodemonstrate the
uses ofthisrepresentation forhandling combinatorial problems. This generalizes
theuseofpolynomials forcombinatorics.
Chapter 11offersaguided tour through Cantor’ sparadise oftheinﬁnite, while
providing extrachallenges intheform ofawide range ofadditional exercises.
viii
The book canbeused asacourse textbook, butsince itcomes with solutions to
allexercises (electronically available from theauthors upon request) itisalsowell
suited forprivatestudy .Courses based onthebook could start with Chapters 1–7,
andthen makeachoice from theremaining Chapters. Here aresome examples:
Road toNumerical Computation Chapters 1–7, follo wed by8and9.
Road toStreams andCorecursion Chapters 1–7, follo wed by9and10.
Road toCantor’ sParadise Chapters 1–7, follo wed by11.
Study oftheremaining parts ofthebook canthen besetasindividual tasks for
students ready foranextrachallenge. Theguidelines forsetting upformal proofs
inChapter 3should berecalled from time totime while studying thebook, for
proper digestion.
Exer cises
Partsofthetextandexercises mark edbya*aresome what harder than therestof
thebook.
Allexercises aresolvedintheelectronically avaible solutions volume. Before
turning tothese solutions, oneshould read theImportant Advice totheReader that
thisvolume starts with.
Book Website andContact
Theprograms inthisbook haveallbeen tested with Hugs98, theversion ofHugs
thatimplements theHask ell98standard. Thefullsource code ofallprograms is
integrated inthebook; infact,each chapter canbeviewed asaliterateprogram
[Knu92 ]inHask ell.The source code ofallprograms discussed inthetextcan
befound onthewebsite devoted tothisbook, ataddresshttp://www.cwi.n l/
~jve/HR .Here youcanalsoﬁndalistoferrata, andfurther relevantmaterial.
Readers who wanttoshare their comments with theauthors areencouraged toget
intouch with usatemail addressjve@cwi.nl .
PREFACE ix
Ackno wledgments
Remarks from thepeople listed belowhavespark edoffnumerous impro vements.
Thanks toJohan vanBenthem, JanBergstra, Jacob Brunekreef, Thierry Coquand
(who found thelecture notes ontheinternet andsent ushiscomments), Timvan
Erven,WanFokkink, EvanGoris, Robbert deHaan, Sandor Heman, EvaHoog-
land, Rosalie Iemhof f,Dick deJongh, Anne Kalde waij,Breannd ´an´ONuall ´ain,
Alban Ponse, Vincent vanOostrom, Piet Rodenb urg,JanRutten, Marco Swaen,
JanTerlouw ,John Tromp, Yde Venema, Albert Visser andStephanie Wehner for
suggestions andcriticisms. Thebeautiful implementation ofthesieveofEratos-
thenes inSection 3.7wassuggested tousbyFer-Jan deVries.
The course onwhich thisbook isbased wasdeveloped atILLC (the Institute of
Logic, Language andComputation oftheUniversity ofAmsterdam) with ﬁnan-
cialsupport from theSpinoza LogicinAction initiati veofJohan vanBenthem,
which isherewith gratefully ackno wledged. Wealsowish tothank ILLC andCWI
(Centrum voorWiskunde enInformatica, orCentre forMathematics andCom-
puter Science, also inAmsterdam), thehome institute ofthesecond author ,for
providing uswith asupporti veworking environment. CWI haskindly granted
permission toreuse material from [Doe96 ].
ItwasKrzysztof Aptwho, percei ving theneed ofadeadline, spurred usontoget
intouch with apublisher andputourselv esunder contract.
x
Chapter1
GettingStarted
Preview
Ourpurpose istoteach logic andmathematical reasoning inpractice, andtocon-
nect formal reasoning tocomputer programming. Itisconvenient tochoose a
programming language forthisthatpermits implementations toremain asclose as
possible totheformal deﬁnitions. Such alanguage isthefunctional programming
language Hask ell[HT].Hask ellwasnamed after thelogician Hask ellB.Curry .
Curry ,together with Alonzo Church, laidthefoundations offunctional computa-
tionintheeraBefore theComputer ,around 1940. Asafunctional programming
language, Hask ellisamember oftheLisp family .Others family members are
Scheme, ML, Occam, Clean. Hask ell98 isintended asastandard forlazy func-
tional programming. Lazy functional programming isaprogramming style where
arguments areevaluated only when thevalue isactually needed.
WithHask ell,thestepfrom formal deﬁnition toprogram isparticularly easy.This
presupposes, ofcourse, thatyouareatease with formal deﬁnitions. Ourreason for
combining training inreasoning with anintroduction tofunctional programming is
thatyour programming needs willprovide motivation forimpro ving your reason-
ingskills. Hask ellprograms willbeused asillustrations forthetheory throughout
thebook. Wewillalwaysputcomputer programs andpseudo-code ofalgorithms
inframes (rectangular boxes).
The chapters ofthisbook arewritten inso-called ‘literate programming’ style
[Knu92 ].Literate programming isaprogramming style where theprogram andits
documentation aregenerated from thesame source. Thetextofeverychapter in
1
2 CHAPTER 1.GETTING STARTED
thisbook canbeviewed asthedocumentation oftheprogram code inthatchapter .
Literate programming makesitimpossible forprogram anddocumentation toget
outofsync. Program documentation isanintegrated partofliterate programming,
infactthebulkofaliterate program istheprogram documentation. When writ-
ingprograms inliterate style there islesstemptation towrite program code ﬁrst
while leaving thedocumentation forlater.Programming inliterate style proceeds
from theassumption thatthemain challenge when programming istomakeyour
program digestible forhumans. Foraprogram tobeuseful, itshould beeasy for
others tounderstand thecode. Itshould also beeasy foryoutounderstand your
owncode when youreread your stuffthenextdayorthenextweek orthenext
month andtrytoﬁgure outwhat youwere uptowhen youwrote your program.
Tosaveyouthetrouble ofretyping, thecode discussed inthisbook canberetrie ved
from thebook website. Theprogram code isthetextintypewriter fontthatyou
ﬁnd inrectangular boxesthroughout thechapters. Boxesmay also contain code
thatisnotincluded inthechapter modules, usually because itdeﬁnes functions that
arealready predeﬁned bytheHask ellsystem, orbecause itredeﬁnes afunction that
isalready deﬁned elsewhere inthechapter .
Typewriter font isalso used forpieces ofinteraction with theHask ellinterpreter ,
butthese illustrations ofhowtheinterpreter beha veswhen particular ﬁles are
loaded andcommands aregivenarenotboxed.
Everychapter ofthisbook isaso-called Hask ellmodule. Thefollo wing twolines
declare theHask ellmodule fortheHask ellcode ofthepresent chapter .This mod-
uleiscalledGS.
moduleGS
where
1.1 Starting uptheHask ellInter preter
Weassume thatyousucceeded inretrie ving theHask ellinterpreter hugs from the
Hask ellhomepage www.haskell.org andthatyoumanaged toinstall itonyour
computer .Youcanstart theinterpreter bytypinghugs atthesystem prompt. When
youstart hugs youshould seesomething likeFigure (1.1). ThestringPrelude>
onthelastlineistheHask ellprompt when nouser-deﬁned ﬁles areloaded.
Youcanusehugs asacalculator asfollo ws:
1.2.IMPLEMENTING APRIMENUMBER TEST 3
_______________ _______________________ __________________
||||||||||||||__ Hugs98:BasedontheHaskell 98standard
||___|| ||__||||__|| __|| Copyright (c)1994-2003
||---|| ___|| WorldWideWeb:http://haskell.org/hugs
|||| Reportbugsto:hugs-bugs@haskell.org
||||Version: November 2003_______________________ __________________
Haskell 98mode:Restart withcommand lineoption-98toenableextensions
Type:?forhelp
Prelude>
Figure 1.1:Starting uptheHask ellinterpreter .
Prelude> 2^16
65536
Prelude>
ThestringPrelude> isthesystem prompt.2^16 iswhat youtype. After youhit
thereturn key(thekeythatisoften labeled with Enter or -),thesystem answers
65536 andthepromptPrelude> reappears.
Exer cise1.1Tryoutafewcalculations using*formultiplication, +foraddition,
-forsubtraction, ^forexponentiation, /fordivision. Byplaying with thesystem,
ﬁndoutwhat theprecedence order isamong these operators.
Parentheses canbeused tooverride thebuilt-in operator precedences:
Prelude> (2+3)^4
625
ToquittheHugs interpreter ,type:quit or:qatthesystem prompt.
1.2 Implementing aPrime Number Test
Suppose wewanttoimplement adeﬁnition ofprime number inaprocedure that
recognizes prime numbers. Aprime number isanatural number greater than
1that hasnoproper divisors other than1anditself. The natural numbers are
0;1;2;3;4;:::The listofprime numbers starts with2;3;5;7;11;13;:::Except
for2,allofthese areodd, ofcourse.
4 CHAPTER 1.GETTING STARTED
Letn>1beanatural number .Then weuseLD(n)fortheleast natural number
greater than1thatdividesn.Anumberddividesnifthere isanatural number
awithad=n.Inother words,ddividesnifthere isanatural numberawith
n
d=a,i.e.,division ofnbydleavesnoremainder .Note thatLD(n)exists for
everynatural numbern>1,forthenatural numberd=nisgreater than1and
dividesn.Therefore, thesetofdivisors ofnthataregreater than1isnon-empty .
Thus, thesetwillhavealeast element.
Thefollo wing proposition givesusallweneed forimplementing ourprime number
test:
Proposition 1.2
1.Ifn>1then LD(n)isaprime number .
2.Ifn>1andnisnotaprime number ,then(LD(n))26n.
Inthecourse ofthisbook youwilllearn howtoprovepropositions likethis.
Here istheproof oftheﬁrstitem. This isaproof bycontradiction (seeChapter 3).
Suppose, foracontradiction thatc=LD(n)isnotaprime. Then there arenatural
numbersaandbwithc=ab,andalso1<aanda<c.Butthenadividesn,
andcontradiction with thefactthatcisthesmallest natural number greater than1
thatdividesn.Thus, LD(n)must beaprime number .
Foraproof ofthesecond item, suppose thatn>1,nisnotaprime andthat
p=LD(n).Then there isanatural numbera>1withn=pa.Thus,a
dividesn.Sincepisthesmallest divisor ofnwithp>1,wehavethatp6a,and
thereforep26pa=n,i.e.,(LD(n))26n.
Theoperatorinabisaso-called inﬁx operator .Theoperator iswritten between
itsarguments. Ifanoperator iswritten befor eitsarguments wecallthispreﬁx
notation. Theproduct ofaandbinpreﬁx notation would look likethis:ab.
Inwriting functional programs, thestandard ispreﬁx notation. Inanexpression
opab,opisthefunction ,andaandbarethearguments .Theconvention isthat
function application associates totheleft,sotheexpression opabisinterpreted
as(opa)b.
Using preﬁx notation, wedeﬁne theoperation divides that takestwointeger
expressions andproduces atruth value .Thetruth values trueandfalse arerendered
inHask ellasTrue andFalse ,respecti vely.
Theintegerexpressions thattheprocedure needs toworkwith arecalled theargu-
ments oftheprocedure. Thetruth value thatitproduces iscalled thevalue ofthe
procedure.
1.2.IMPLEMENTING APRIMENUMBER TEST 5
Obviously ,mdividesnifandonly iftheremainder oftheprocess ofdividingn
bymequals 0.Thedeﬁnition ofdivides cantherefore bephrased interms ofa
predeﬁned procedure remforﬁnding theremainder ofadivision process:
divides dn=remnd==0
Thedeﬁnition illustrates thatHask elluses=for‘isdeﬁned as’and==foridentity .
(The Hask ellsymbol fornon-identity is/=.)
Aline ofHask ellcode oftheformfoot=... (orfoot1t2=...,or
foot1t2t3=...,andsoon)iscalled aHask ellequation .Insuch anequa-
tion,fooiscalled thefunction ,andtitsargument .
Thus, intheHask ellequationdivides dn=remnd==0,divides isthe
function,distheﬁrstargument, andnisthesecond argument.
Exer cise1.3Putthedeﬁnition ofdivides inaﬁleprime .hs.Start theHask ellin-
terpreter hugs (Section 1.1). Nowgivethecommand :loadprime or:lprime ,
follo wed bypressing Enter .Note thatlistheletterl,notthedigit1.(Nextto:l,
averyuseful command after youhaveedited aﬁleofHask ellcode is:reload or
:r,forreloading theﬁle.)
Prelude> :lprime
Main>
ThestringMain> istheHask ellprompt indicating thatuser-deﬁned ﬁlesareloaded.
This isasign thatthedeﬁnition wasadded tothesystem. Thenewlydeﬁned oper-
ation cannowbeexecuted, asfollo ws:
Main>divides 57
False
Main>
ThestringMain> istheHask ellprompt, therestoftheﬁrstlineiswhat youtype.
When youpress Enter thesystem answers with thesecond line, follo wed bythe
Hask ellprompt. Youcanthen continue with:
Main>divides 530
True
6 CHAPTER 1.GETTING STARTED
Itisclear from theproposition abovethatallwehavetodotoimplement aprimal-
itytestistogiveanimplementation ofthefunction LD. Itisconvenient todeﬁne
LDinterms ofasecond function LDF, fortheleast divisor starting from agiven
thresholdk,withk6n.Thus, LDF(k)(n)istheleast divisor ofnthatis>k.
Clearly ,LD(n)=LDF(2)(n).Nowwecanimplement LDasfollo ws:
ldn=ldf2n
This leavestheimplementation ldfofLDF (details ofthecoding willbeexplained
below):
ldfkn|divides kn=k
|k^2>n=n
|otherwise =ldf(k+1)n
Thedeﬁnition emplo ystheHask elloperation ^forexponentiation, >for‘greater
than’, and+foraddition.
Thedeﬁnition ofldf makesuseofequation guarding.Theﬁrstlineoftheldf
deﬁnition handles thecase where theﬁrstargument divides thesecond argument.
Everynextline assumes that theprevious lines donotapply .The second line
handles thecase where theﬁrst argument does notdivide thesecond argument,
andthesquare oftheﬁrstargument isgreater than thesecond argument. Thethird
line assumes that theﬁrst andsecond cases donotapply andhandles allother
cases, i.e.,thecases wherekdoes notdividenandk2<n.
Thedeﬁnition emplo ystheHask ellcondition operator|.AHask ellequation of
theform
foot|condition =...
iscalled aguardedequation .Wemight havewritten thedeﬁnition ofldfasalist
ofguarded equations, asfollo ws:
1.2.IMPLEMENTING APRIMENUMBER TEST 7
ldfkn|divides kn=k
ldfkn|k^2>n=n
ldfkn =ldf(k+1)n
Theexpression condition ,oftypeBool (i.e., Boolean ortruth value), iscalled
theguardoftheequation.
Alistofguarded equations such as
foot|condition_1 =body_1
foot|condition_2 =body_2
foot|condition_3 =body_3
foot =body_4
canbeabbre viated as
foot|condition_1 =body_1
|condition_2 =body_2
|condition_3 =body_3
|otherwise =body_4
Such aHask elldeﬁnition isread asfollo ws:
incasecondition_1 holds,footisbydeﬁnition equal tobody_1 ,
incasecondition_1 does nothold butcondition_2 holds,footisby
deﬁnition equal tobody_2 ,
incasecondition_1 andcondition_2 donothold butcondition_3
holds,footisbydeﬁnition equal tobody_3 ,
andincase none ofcondition_1 ,condition_2 andcondition_3 hold,
footisbydeﬁnition equal tobody_4 .
When weareattheendofthelistweknowthatnone ofthecases aboveinthelist
apply .This isindicated bymeans oftheHask ellreserv edkeywordotherwise .
Note thattheprocedure ldfiscalled again from thebody ofitsowndeﬁnition. We
willencounter such recursi veprocedure deﬁnitions again andagain inthecourse
ofthisbook (seeinparticular Chapter 7).
8 CHAPTER 1.GETTING STARTED
Exer cise1.4Suppose inthedeﬁnition ofldfwereplace thecondition k^2>n
byk^2>=n,where>=expresses ‘greater than orequal’. Would thatmakeany
difference tothemeaning oftheprogram? Why (not)?
Nowweareready foradeﬁnition ofprime0 ,ourﬁrstimplementation ofthetest
forbeing aprime number .
prime0n|n<1=error"notapositive integer"
|n==1=False
|otherwise =ldn==n
Hask ellallowsacalltotheerror operation inanydeﬁnition. This isused tobreak
offoperation andissue anappropriate message when theprimality testisused for
numbers below1.Note thaterror hasaparameter oftypeString (indicated by
thedouble quotes).
Thedeﬁnition emplo ystheHask elloperation <for‘less than’.
Intuiti vely,what thedeﬁnition prime0 says isthis:
1.theprimality testshould notbeapplied tonumbers below1,
2.ifthetestisapplied tothenumber 1ityields ‘false’,
3.ifitisapplied toanintegerngreater than1itboils downtochecking that
LD(n)=n.Inviewoftheproposition weprovedabove,thisisindeed a
correct primality test.
Exer cise1.5Add these deﬁnitions totheﬁleprime .hsandtrythem out.
Remark. Theuseofvariables infunctional programming hasmuch incommon
with theuseofvariables inlogic. Thedeﬁnition divides dn=remnd==0
isequivalent todivides xy=remyx==0.This isbecause thevariables
denote arbitr aryelements ofthetype overwhich theyrange. Theybeha velike
universally quantiﬁed variables, andjustasinlogic thedeﬁnition does notdepend
onthevariable names.
1.3 Hask ellTypeDeclarations
Hask ellhasaconcise waytoindicate thatdivides consumes aninteger,then
another integer,andproduces atruth value (calledBool inHask ell). Integers and
1.3.HASKELL TYPEDECLARA TIONS 9
truth values areexamples oftypes .SeeSection 2.1formore onthetypeBool .
Section 1.6givesmore information about types ingeneral. Arbitrary precision
integers inHask ellhavetypeInteger .Thefollo wing linegivesaso-called type
declar ation forthedivides function.
divides ::Integer ->Integer ->Bool
Integer ->Integer ->Bool isshort forInteger ->(Integer ->Bool) .
Atype oftheforma->bclassiﬁes aprocedure thattakesanargument oftypea
toproduce aresult oftypeb.Thus,divides takesanargument oftypeInteger
andproduces aresult oftypeInteger ->Bool ,i.e.,aprocedure thattakesan
argument oftypeInteger ,andproduces aresult oftypeBool .
Thefullcode fordivides ,including thetype declaration, looks likethis:
divides ::Integer ->Integer ->Bool
divides dn=remnd==0
Ifdisanexpression oftypeInteger ,thendivides disanexpression oftype
Integer ->Bool .Theshorthand thatwewillusefor
disanexpression oftypeInteger
is:d::Integer .
Exer cise1.6Canyougather from thedeﬁnition ofdivides what thetype decla-
ration forremwould look like?
Exer cise1.7Thehugs system hasacommand forchecking thetypes ofexpres-
sions. Can youexplain thefollo wing (please tryitout; makesure thattheﬁle
with thedeﬁnition ofdivides isloaded, together with thetype declaration for
divides ):
Main>:tdivides 5
divides 5::Integer ->Bool
Main>:tdivides 57
divides 57::Bool
Main>
10 CHAPTER 1.GETTING STARTED
The expression divides 5::Integer ->Bool iscalled atype judgment .
Typejudgments inHask ellhavetheformexpression ::type .
InHask ellitisnotstrictly necessary togiveexplicit type declarations. Forin-
stance, thedeﬁnition ofdivides works quite well without thetype declaration,
since thesystem caninfer thetype from thedeﬁnition. However,itisgood pro-
gramming practice togiveexplicit type declarations evenwhen thisisnotstrictly
necessary .These type declarations areanaidtounderstanding, andtheygreatly
impro vethedigestibility offunctional programs forhuman readers. Afurther
advantage oftheexplicit type declarations isthattheyfacilitate detection ofpro-
gramming mistak esonthebasis oftype errors generated bytheinterpreter .You
willﬁndthatmanyprogramming errors already come tolight when your program
gets loaded. The factthatyour program iswell typed does notentail thatitis
correct, ofcourse, butmanyincorrect programs dohavetyping mistak es.
Thefullcode forld,including thetype declaration, looks likethis:
ld::Integer ->Integer
ldn=ldf2n
Thefullcode forldf,including thetype declaration, looks likethis:
ldf::Integer ->Integer ->Integer
ldfkn|divides kn=k
|k^2>n=n
|otherwise =ldf(k+1)n
Theﬁrstlineofthecode states thattheoperation ldftakestwointegers andpro-
duces aninteger.
Thefullcode forprime0 ,including thetype declaration, runs likethis:
1.4.IDENTIFIERS INHASKELL 11
prime0::Integer ->Bool
prime0n|n<1=error"notapositive integer"
|n==1=False
|otherwise =ldn==n
Theﬁrstlineofthecode declares thattheoperation prime0 takesanintegerand
produces (orreturns ,asprogrammers liketosay) aBoolean (truth value).
Inprogramming generally ,itisuseful tokeepclose track ofthenature ofthe
objects thatarebeing represented. This isbecause representations havetobestored
incomputer memory ,andonehastoknowhowmuch space toallocate forthis
storage. Still, there isnoneed toalwaysspecify thenature ofeach data-type
explicitly .Itturns outthatmuch information about thenature ofanobject canbe
inferred from howtheobject ishandled inaparticular program, orinother words,
from theoperations thatareperformed onthatobject.
Takeagain thedeﬁnition ofdivides .Itisclear from thedeﬁnition thatanoper-
ation isdeﬁned with twoarguments, both ofwhich areofatype forwhichremis
deﬁned, andwith aresult oftypeBool (forremnd==0isastatement thatcan
turnouttrueorfalse). Ifwecheck thetype ofthebuilt-in procedure remweget:
Prelude> :trem
rem::Integral a=>a->a->a
Inthisparticular case, thetype judgment givesatype scheme rather than atype. It
means: ifaisatype ofclassIntegral ,thenremisoftypea->a->a.Here
aisused asavariable ranging overtypes.
InHask ell,Integral istheclass (seeSection 4.2)consisting ofthetwotypes for
integernumbers, Int andInteger .Thedifference betweenInt andInteger
isthatobjects oftypeInt haveﬁxedprecision, objects oftypeInteger have
arbitrary precision.
Thetype ofdivides cannowbeinferred from thedeﬁnition. This iswhat weget
when weload thedeﬁnition ofdivides without thetype declaration:
Main>:tdivides
divides ::Integral a=>a->a->Bool
1.4 Identiﬁers inHask ell
InHask ell,there aretwokinds ofidentiﬁers:
12 CHAPTER 1.GETTING STARTED
Variable identiﬁers areused toname functions. Theyhavetostart with a
lower-case letter .E.g.,map,max,fct2list ,fctToList ,fct_to_list .
Constructor identiﬁers areused toname types. Theyhavetostart with an
upper -case letter .Examples areTrue ,False .
Functions areoperations ondata-structures, constructors arethebuilding blocks
ofthedata structures themselv es(trees, lists, Booleans, andsoon).
Names offunctions alwaysstart with lower-case letters, andmay contain both
upper -andlower-case letters, butalso digits, underscores andtheprime symbol
'.Thefollo wing reserved keywor dshavespecial meanings andcannot beused to
name functions.
case class data default deriving do else
if import in inﬁx inﬁxl inﬁxr instance
let module newtype of then type where
Theuseofthese keywords willbeexplained asweencounter them. atthebegin-
ning ofawordistreated asalower-case character .Theunderscore character all
byitself isareserv edwordforthewild card pattern thatmatches anything (page
141).
There isonemore reserv edkeywordthatisparticular toHugs: forall,forthedeﬁ-
nition offunctions thattakepolymorphic arguments. SeetheHugs documentation
forfurther particulars.
1.5 Playing theHask ellGame
This section consists ofanumber offurther examples andexercises togetyou
acquainted with theprogramming language ofthisbook. Tosaveyouthetrouble
ofkeying intheprograms below,youshould retrie vethemoduleGS.hs forthe
present chapter from thebook website andload itinhugs .This will giveyoua
system promptGS>,indicating thatalltheprograms from thischapter areloaded.
Inthenextexample, weuseIntforthetype ofﬁxedprecision integers, and[Int]
forlistsofﬁxedprecision integers.
Example 1.8Here isafunction thatgivestheminimum ofalistofintegers:
1.5.PLAYINGTHEHASKELL GAME 13
mnmInt::[Int]->Int
mnmInt[]=error"emptylist"
mnmInt[x]=x
mnmInt(x:xs)=minx(mnmInt xs)
This uses thepredeﬁned functionmin fortheminimum oftwointegers. Italso
uses pattern matching forlists .The listpattern[]matches only theempty list,
thelistpattern[x]matches anysingleton list,thelistpattern(x:xs) matches any
non-empty list. Afurther subtlety isthatpattern matching inHask ellissensiti ve
toorder .Ifthepattern[x] isfound before(x:xs) then(x:xs) matches any
non-empty listthatisnotaunitlist. SeeSection 4.6formore information onlist
pattern matching.
Itiscommon Hask ellpractice torefer tonon-empty lists asx:xs ,y:ys ,andso
on,asauseful reminder ofthefactsthatxisanelement ofalistofx’sandthatxs
isalist.
Here isahome-made version ofmin:
min'::Int->Int->Int
min'xy|x<=y=x
|otherwise =y
Youwillhaveguessed that<=isHask ellcode for6.
Objects oftypeIntareﬁxedprecision integers. Their range canbefound with:
Prelude> primMinInt
-2147483648
Prelude> primMaxInt
2147483647
Since2147483647 =231 1,wecanconclude thatthehugs implementation uses
four bytes (32bits) torepresent objects ofthistype.Integer isforarbitrary pre-
cision integers: thestorage space thatgetsallocated forInteger objects depends
onthesizeoftheobject.
Exer cise1.9Deﬁne afunction thatgivesthemaximum ofalistofintegers. Use
thepredeﬁned functionmax.
14 CHAPTER 1.GETTING STARTED
Conversion fromPreﬁxtoInﬁx inHask ellAfunction canbeconverted toan
inﬁx operator byputting itsname inback quotes, likethis:
Prelude> max45
5
Prelude> 4`max`5
5
Conversely ,aninﬁx operator isconverted topreﬁx byputting theoperator inround
brack ets(p.21).
Exer cise1.10 Deﬁne afunctionremoveFst thatremo vestheﬁrstoccurrence of
anintegermfrom alistofintegers. Ifmdoes notoccur inthelist,thelistremains
unchanged.
Example 1.11 Wedeﬁne afunction thatsorts alistofintegers inorder ofincreas-
ingsize, bymeans ofthefollo wing algorithm:
anempty listisalready sorted.
ifalistisnon-empty ,weputitsminimum infront oftheresult ofsorting the
listthatresults from remo ving itsminimum.
This isimplemented asfollo ws:
srtInts ::[Int]->[Int]
srtInts []=[]
srtInts xs=m:(srtInts (removeFst mxs))wherem=mnmIntxs
HereremoveFst isthefunction youdeﬁned inExercise 1.10. Note thatthesecond
clause isinvokedwhen theﬁrst onedoes notapply ,i.e.,when theargument of
srtInts isnotempty .This ensures thatmnmIntxsnevergivesrisetoanerror .
Note theuseofawhere construction forthelocal deﬁnition ofanauxiliary func-
tion.
Remark. Hask ellhastwowaystolocally deﬁne auxiliary functions, where and
let constructions. Thewhere construction isillustrated inExample 1.11. This
canalsoexpressed withlet,asfollo ws:
1.5.PLAYINGTHEHASKELL GAME 15
srtInts' ::[Int]->[Int]
srtInts' []=[]
srtInts' xs=let
m=mnmIntxs
inm:(srtInts' (removeFst mxs))
Theletconstruction uses thereserv edkeywordsletandin.
Example 1.12 Here isafunction thatcalculates theaverage ofalistofintegers.
The average ofmandnisgivenbym+n
2,theaverage ofalistofkintegers
n1;:::;nkisgivenbyn1++nk
k.Ingeneral, averages arefractions, sotheresult
type ofaverage should notbeInt buttheHask elldata-type forﬂoating point
numbers, which isFloat .There arepredeﬁned functions sumforthesum ofalist
ofintegers, andlength forthelength ofalist.TheHask elloperation fordivision
/expects arguments oftypeFloat (ormore precisely ,ofFractional type, and
Float issuch atype), soweneed aconversion function forconvertingIntsinto
Float s.This isdone byfromInt .Thefunctionaverage cannowbewritten as:
average ::[Int]->Float
average []=error"emptylist"
average xs=fromInt (sumxs)/fromInt (length xs)
Again, itisinstructi vetowrite ourownhomemade versions ofsumandlength .
Here theyare:
sum'::[Int]->Int
sum'[]=0
sum'(x:xs)=x+sum'xs
16 CHAPTER 1.GETTING STARTED
length' ::[a]->Int
length' []=0
length' (x:xs)=1+length' xs
Note thatthetype declaration forlength' contains avariablea.This variable
ranges overalltypes, so[a]isthetype ofalistofobjects ofanarbitrary typea.
Wesaythat[a]isatype scheme rather than atype. This way,wecanusethesame
functionlength' forcomputing thelength ofalistofintegers, thelength ofalist
ofcharacters, thelength ofalistofstrings (lists ofcharacters), andsoon.
Thetype[Char] isabbre viated asString .Examples ofcharacters are'a','b'
(note thesingle quotes) examples ofstrings are"Russell" and"Cantor" (note
thedouble quotes). Infact,"Russell" canbeseen asanabbre viation ofthelist
['R','u','s','s ','e','l','l'].
Exer cise1.13 Write afunctioncount forcounting thenumber ofoccurrences of
acharacter inastring. InHask ell,acharacter isanobject oftypeChar ,andastring
anobject oftypeString ,sothetype declaration should run:count::Char->
String->Int.
Exer cise1.14 Afunction fortransforming strings intostrings isoftypeString
->String .Write afunctionblowup thatconvertsastring
a1a2a3
to
a1a2a2a3a3a3:
blowup"bang!" should yield"baannngggg!!!!! ".(Hint: use++forstring
concatenation.)
Exer cise1.15 Write afunctionsrtString ::[String] ->[String] that
sorts alistofstrings inalphabetical order .
Example 1.16 Suppose wewanttocheck whether astringstr1 isapreﬁx of
astringstr2 .Then theanswer tothequestionprefixstr1str2 should be
either yes(true) orno(false), i.e.,thetype declaration forprefix should run:
prefix::String->String->Bool .
Preﬁx esofastringysaredeﬁned asfollo ws:
1.6.HASKELL TYPES 17
1.[]isapreﬁx ofys,
2.ifxsisapreﬁx ofys,thenx:xs isapreﬁx ofx:ys ,
3.nothing elseisapreﬁx ofys.
Here isthecode forprefix thatimplements thisdeﬁnition:
prefix::String->String->Bool
prefix[]ys=True
prefix(x:xs)[]=False
prefix(x:xs)(y:ys)=(x==y)&&prefixxsys
Thedeﬁnition ofprefix uses theHask elloperator&&forconjunction.
Exer cise1.17 Write afunctionsubstring ::String->String->Bool
thatchecks whetherstr1 isasubstring ofstr2 .
Thesubstrings ofanarbitrary stringysaregivenby:
1.ifxsisapreﬁx ofys,xsisasubstring ofys,
2.ifysequalsy:ys' andxsisasubstring ofys',xsisasubstring ofys,
3.nothing elseisasubstring ofys.
1.6 Hask ellTypes
Thebasic Hask elltypes are:
Int andInteger ,torepresent integers. Elements ofInteger areun-
bounded. That’ swhy weused thistype intheimplementation oftheprime
number test.
Float andDouble represent ﬂoating point numbers. Theelements ofDouble
havehigher precision.
Bool isthetype ofBooleans.
18 CHAPTER 1.GETTING STARTED
Char isthetype ofcharacters.
Note thatthename ofatype alwaysstarts with acapital letter .
Todenote arbitrary types, Hask ellallowstheuseoftype variables .Forthese,a,b,
...,areused.
Newtypes canbeformed inseveralways:
Bylist-formation: ifaisatype,[a]isthetype oflists overa.Examples:
[Int] isthetype oflistsofintegers;[Char] isthetype oflistsofcharacters,
orstrings.
Bypair-ortuple-formation: ifaandbaretypes, then(a,b) isthetype
ofpairs with anobject oftypeaastheir ﬁrstcomponent, andanobject of
typebastheir second component. Similarly ,triples, quadruples, ...,canbe
formed. Ifa,bandcaretypes, then(a,b,c) isthetype oftriples with an
object oftypeaastheir ﬁrstcomponent, anobject oftypebastheir second
component, andanobject oftypecastheir third component. And soon
(p.139).
Byfunction deﬁnition: a->bisthetype ofafunction thattakesarguments
oftypeaandreturns values oftypeb.
Bydeﬁning your owndata-type from scratch, with adata type declaration.
More about thisinduecourse.
Pairswill befurther discussed inSection 4.5,lists andlistoperations inSection
4.6.
Operations areprocedures forconstructing objects ofacertain typesbfrom ingre-
dients ofatypea.Nowsuch aprocedure canitself begivenatype: thetype of
atransformer fromatype objects tobtype objects. Thetype ofsuch aprocedure
canbedeclared inHask ellasa->b.
Ifafunction takestwostring arguments andreturns astring then thiscanbe
viewed asatwo-stage process: thefunction takesaﬁrst string and returns a
transformer from strings tostrings. Itthen follo wsthatthetype isString->
(String ->String) ,which canbewritten asString->String->String ,
because oftheHask ellconvention that->associates totheright.
Exer cise1.18 Find expressions with thefollo wing types:
1.[String]
1.7.THEPRIMEFACTORIZATIONALGORITHM 19
2.(Bool,String)
3.[(Bool,String)]
4.([Bool],String)
5.Bool->Bool
Testyour answers bymeans oftheHugs command :t.
Exer cise1.19 UsetheHugs command :ttoﬁndthetypes ofthefollo wing pre-
deﬁned functions:
1.head
2.last
3.init
4.fst
5.(++)
6.flip
7.flip(++)
Next,supply these functions with arguments oftheexpected types, andtrytoguess
what these functions do.
1.7 The Prime Factorization Algorithm
Letnbeanarbitrary natural number>1.Aprime factorization ofnisalistof
prime numbersp1;:::;pjwith theproperty thatp1pj=n.Wewillshow
thataprime factorization ofeverynatural numbern>1exists byproducing one
bymeans ofthefollo wing method ofsplitting offprime factors:
WHILEn6=1DOBEGINp:=LD(n);n:=n
pEND
Here:=denotes assignment ortheactofgiving avariable anewvalue. Aswe
haveseen, LD(n)exists foreverynwithn>1.Moreo ver,wehaveseen that
LD(n)isalwaysprime. Finally ,itisclear thattheprocedure terminates, forevery
round through theloop willdecrease thesizeofn.
20 CHAPTER 1.GETTING STARTED
Sothealgorithm consists ofsplitting offprimes until wehavewrittennasn=
p1pj,with allfactors prime. Togetsome intuition about howtheprocedure
works, letusseewhat itdoes foranexample case, sayn=84.Theoriginal as-
signment toniscalledn0;successi veassignments tonandparecalledn1;n2;:::
andp1;p2;:::.
n0=84
n06=1p1=2n1=84=2=42
n16=1p2=2n2=42=2=21
n26=1p3=3n3=21=3=7
n36=1p4=7n4=7=7=1
n4=1
This gives84=2237,which isindeed aprime factorization of84.
Thefollo wing code givesanimplementation inHask ell,collecting theprime fac-
torsthatweﬁndinalist. Thecode uses thepredeﬁned Hask ellfunctiondivfor
integerdivision.
factors ::Integer ->[Integer]
factors n|n<1=error"argument notpositive"
|n==1=[]
|otherwise =p:factors (divnp)wherep=ldn
Ifyouload thecode forthischapter ,youcantrythisoutasfollo ws:
GS>factors 84
[2,2,3,7]
GS>factors 557940830126698960967415390
[2,3,5,7,11,13,17,19,23,29,31 ,37,41,43,47,53,59,61,67,71]
1.8 Themapandfilter Functions
Hask ellallowssome convenient abbre viations forlists:[4..20] denotes thelist
ofintegers from4through 20,['a'..'z'] thelistofalllower case letters,
"abcdefghijklmno pqrstuvwxyz".Thecall[5..] generates aninﬁnite listof
integers starting from 5.And soon.
IfyouusetheHugs command :ttoﬁndthetype ofthefunctionmap,yougetthe
follo wing:
1.8.THEMAPANDFILTERFUNCTIONS 21
Prelude> :tmap
map::(a->b)->[a]->[b]
Thefunctionmaptakesafunction andalistandreturns alistcontaining theresults
ofapplying thefunction totheindividual listmembers.
Iffisafunction oftypea->bandxsisalistoftype[a],thenmapfxswill
return alistoftype[b].E.g.,map(^2)[1..9] willproduce thelistofsquares
[1,4,9,16,25,36,49,64,81]
Youshould verify thisbytrying itoutinHugs .Theuseof(^2) fortheoperation
ofsquaring demonstrates anewfeature ofHask ell,theconstruction ofsections.
Conversion fromInﬁx toPreﬁx, Construction ofSections Ifopisaninﬁx
operator ,(op) isthepreﬁx version oftheoperator .Thus,2^10 canalsobewritten
as(^)210.This isaspecial case oftheuseofsections inHask ell.
Ingeneral, ifopisaninﬁx operator ,(opx)istheoperation resulting from ap-
plyingoptoitsright hand side argument,(xop)istheoperation resulting from
applyingoptoitslefthand side argument, and(op) isthepreﬁx version ofthe
operator (this isliketheabstraction oftheoperator from both arguments).
Thus(^2) isthesquaring operation, (2^) istheoperation thatcomputes powers
of2,and(^) isexponentiation. Similarly ,(>3) denotes theproperty ofbeing
greater than3,(3>) theproperty ofbeing smaller than3,and(>) isthepreﬁx
version ofthe‘greater than’ relation.
Thecallmap(2^)[1..10] willyield
[2,4,8,16,32,64,128,256,512,1024]
Ifpisaproperty (anoperation oftypea->Bool )andxsisalistoftype[a],
thenmappxswillproduce alistoftypeBool (alistoftruth values), likethis:
Prelude> map(>3)[1..9]
[False, False,False,True,True,True,True,True,True]
Prelude>
The functionmap ispredeﬁned inHask ell,butitisinstructi vetogiveourown
version:
22 CHAPTER 1.GETTING STARTED
map::(a->b)->[a]->[b]
mapf[]=[]
mapf(x:xs)=(fx):(mapfxs)
Note thatifyoutrytoload thiscode, youwillgetanerror message:
Definition ofvariable "map"clashes withimport.
Theerror message indicates thatthefunction namemapisalready partofthename
space forfunctions, andisnotavailable anymore fornaming afunction ofyour
ownmaking.
Exer cise1.20 Usemap towrite afunctionlengths thattakesalistoflists and
returns alistofthecorresponding listlengths.
Exer cise1.21 Usemap towrite afunctionsumLengths thattakesalistoflists
andreturns thesum oftheir lengths.
Another useful function isfilter ,forﬁltering outtheelements from alistthat
satisfy agivenproperty .This ispredeﬁned, buthere isahome-made version:
filter::(a->Bool)->[a]->[a]
filterp[]=[]
filterp(x:xs)|px =x:filterpxs
|otherwise =filterpxs
Here isanexample ofitsuse:
GS>filter(>3)[1..10]
[4,5,6,7,8,9,10]
Example 1.22 Here isaprogramprimes0 thatﬁlters theprime numbers from the
inﬁnite list[2..] ofnatural numbers:
1.8.THEMAPANDFILTERFUNCTIONS 23
primes0 ::[Integer]
primes0 =filterprime0[2..]
This produces aninﬁnite listofprimes. (Why inﬁnite? SeeTheorem 3.33.) The
listcanbeinterrupted with ‘Control-C’.
Example 1.23 Giventhatwecanproduce alistofprimes, itshould bepossible
nowtoimpro veourimplementation ofthefunction LD.Thefunctionldfused in
thedeﬁnition ofldlooks foraprime divisor ofnbycheckingkjnforallkwith
26k6pn.Infact,itisenough tocheckpjnfortheprimespwith26p6pn.
Here arefunctions ldpandldpf thatperform thismore efﬁcient check:
ldp::Integer ->Integer
ldpn=ldpfprimes1 n
ldpf::[Integer] ->Integer ->Integer
ldpf(p:ps)n|remnp==0=p
|p^2>n=n
|otherwise =ldpfpsn
ldpmakesacalltoprimes1 ,thelistofprime numbers. This isaﬁrstillustration
ofa‘lazy list’. Thelistiscalled ‘lazy’ because wecompute only thepartofthe
listthatweneed forfurther processing. Todeﬁneprimes1 weneed atestfor
primality ,butthattestisitself deﬁned interms ofthefunction LD, which inturn
refers toprimes1 .Weseem toberunning around inacircle. This circle canbe
made non-vicious byavoiding theprimality testfor2.Ifitisgiventhat2isprime,
then wecanusetheprimality of2intheLDcheck that3isprime, andsoon,and
weareupandrunning.
24 CHAPTER 1.GETTING STARTED
primes1 ::[Integer]
primes1 =2:filterprime[3..]
prime::Integer ->Bool
primen|n<1=error"notapositive integer"
|n==1=False
|otherwise =ldpn==n
Replacing thedeﬁnition ofprimes1 byfilterprime[2..] creates vicious
circularity ,with stack overﬂowasaresult (tryitout). Byrunning theprogram
primes1 againstprimes0 itiseasy tocheck thatprimes1 ismuch faster.
Exer cise1.24 What happens when youmodify thedeﬁning equation ofldp as
follo ws:
ldp::Integer ->Integer
ldp=ldpfprimes1
Canyouexplain?
1.9 Hask ellEquations andEquational Reasoning
The Hask ellequations fxy=... used inthedeﬁnition ofafunctionfare
genuine mathematical equations. Theystate thatthelefthand side andtheright
hand side oftheequation havethesame value. This isvery different from theuse
of=inimperati velanguages likeCorJava.InaCorJavaprogram, thestatement
x=x*y does notmean thatxandxyhavethesame value, butrather itisa
command tothrowawaytheoldvalue ofxandputthevalue ofxyinitsplace.
Itisaso-called destructive assignment statement :theoldvalue ofavariable is
destro yedandreplaced byanewone.
Reasoning about Hask elldeﬁnitions isaloteasier than reasoning about programs
thatusedestructi veassignment. InHask ell,standard reasoning about mathemat-
icalequations applies. E.g., after theHask elldeclarations x=1andy=2,the
Hask elldeclaration x=x+ywillraise anerror"x"multiply defined .Be-
cause=inHask ellhasthemeaning “isbydeﬁnition equal to”,while redeﬁnition
1.9.HASKELL EQUATIONSANDEQUATIONALREASONING 25
isforbidden, reasoning about Hask ellfunctions isstandard equational reasoning.
Let’strythisoutonasimple example.
a=3
b=4
f::Integer ->Integer ->Integer
fxy=x^2+y^2
Toevaluatefa(fab)byequational reasoning, wecanproceed asfollo ws:
fa(fab)=fa(a2+b2)
=f3(32+42)
=f3(9+16)
=f325
=32+252
=9+625
=634
Therewriting steps usestandard mathematical lawsandtheHask elldeﬁnitions of
a,b,f.And, infact,when running theprogram wegetthesame outcome:
GS>fa(fab)
634
GS>
Remark. Wealready encountered deﬁnitions where thefunction that isbeing
deﬁned occurs ontheright hand side ofanequation inthedeﬁnition. Here is
another example:
g::Integer ->Integer
g0=0
g(x+1)=2*(gx)
Noteverything thatisallowed bytheHask ellsyntax makessemantic sense, how-
ever.The follo wing deﬁnitions, although syntactically correct, donotproperly
deﬁne functions:
26 CHAPTER 1.GETTING STARTED
h1::Integer ->Integer
h10=0
h1x=2*(h1x)
h2::Integer ->Integer
h20=0
h2x=h2(x+1)
Theproblem isthatforvalues other than0thedeﬁnitions donotgiverecipes for
computing avalue. This matter willbetakenupinChapter 7.
1.10 Further Reading
The standard Hask elloperations aredeﬁned intheﬁlePrelude .hs,which you
should beable tolocate some where onanysystem thatruns hugs .Typically ,the
ﬁleresides in/usr/lib/hugs/l ibraries/Hugs/.
Incase Exercise 1.19 hasmade youcurious, thedeﬁnitions ofthese example func-
tions canallbefound inPrelude .hs.Ifyouwanttoquickly learn alotabout howto
program inHask ell,youshould getintothehabit ofconsulting thisﬁleregularly .
Thedeﬁnitions ofallthestandard operations areopen sourcecode ,andarethere
foryoutolearn from. TheHask ellPrelude may beabitdifﬁcult toread atﬁrst,
butyouwillsoon getused tothesyntax andacquire ataste forthestyle.
Various tutorials onHask ellandHugs canbefound ontheInternet: seee.g.
[HFP96 ]and[JR+].Thedeﬁniti vereference forthelanguage is[Jon03 ].Atext-
book onHask ellfocusing onmultimedia applications is[Hud00 ].Other excellent
textbooks onfunctional programming with Hask ellare[Tho99 ]and, atamore ad-
vanced level,[Bir98 ].Abook ondiscrete mathematics thatalso uses Hask ellasa
tool, andwith anice treatment ofautomated proof checking, is[HO00 ].
Chapter2
TalkingaboutMathematical
Objects
Preview
Totalkabout mathematical objects with ease itisuseful tointroduce some sym-
bolic abbre viations. These symbolic conventions aremeant tobetter revealthe
structur eofourmathematical statements. This chapter concentrates onafew(in
fact: seven), simple words orphrases thatareessential tothemathematical vo-
cabulary: not,if,and,or,ifandonly if,forallandforsome .Wewillintroduce
symbolic shorthands forthese words, andwelook indetail athowthese building
blocks areused toconstruct thelogical patterns ofsentences. After having isolated
thelogical keyingredients ofthemathematical vernacular ,wecansystematically
relate deﬁnitions interms ofthese logical ingredients toimplementations, thus
building abridge between logic andcomputer science.
Theuseofsymbolic abbre viations inspecifying algorithms makesiteasier totake
thestep from deﬁnitions totheprocedures thatimplement those deﬁnitions. Ina
similar way,theuseofsymbolic abbre viations inmaking mathematical statements
makesiteasier toconstruct proofs ofthose statements. Chances arethatyouare
more atease with programming than with proving things. Howeverthatmay be,
inthechapters tofollo wyouwillgettheopportunity toimpro veyour skills inboth
ofthese activities andtoﬁndoutmore about thewayinwhich theyarerelated.
27
28 CHAPTER 2.TALKING ABOUTMATHEMATICALOBJECTS
moduleTAMO
where
2.1 Logical Connecti vesandtheir Meanings
Goal Tounderstand howthemeanings ofstatements using connecti vescanbe
described byexplaining howthetruth (orfalsity) ofthestatement depends on
thetruth (orfalsity) ofthesmallest parts ofthisstatement. This understanding
leads directly toanimplementation ofthelogical connecti vesastruth functional
procedures.
Inordinary life,there aremanystatements thatdonothaveadeﬁnite truth value,
forexample ‘Barnett Newman’ sWho isAfraidofRed, Yellow andBlue IIIisa
beautiful workofart,’or‘Daniel Goldre yer’srestoration ofWho isAfraidofRed,
Yellow andBlue IIImeets thehighest standards. ’
Fortunately theworld ofmathematics differsfrom theAmsterdam Stedelijk Mu-
seum ofModern Artinthefollo wing respect. Intheworldofmathematics, things
aresomuch clearer thatmanymathematicians adhere tothefollo wing slogan:
everystatement thatmakesmathematical sense iseither trueorfalse.
Theidea behind thisisthat(according totheadherents) theworldofmathematics
exists independently ofthemind ofthemathematician. Doing mathematics isthe
activityofexploring thisworld. Inproving newtheorems onedisco versnewfacts
about theworld ofmathematics, insolving exercises oneredisco versknownfacts
foroneself. (Solving problems inamathematics textbook islikevisiting famous
places with atourist guide.)
This belief inanindependent worldofmathematical factiscalled Platonism, after
theGreek philosopher Plato, who evenclaimed thatoureveryday physical world
issomeho wanimage ofthisideal mathematical world. Amathematical Platonist
holds thateverystatement thatmakesmathematical sense hasexactly oneofthe
twotruth values. Ofcourse, aPlatonist would concede thatwemay notknow
which value astatement has,formathematics hasnumerous open problems. Still,
aPlatonist would saythatthetrueanswer toanopen problem inmathematics like
‘Arethere inﬁnitely manyMersenne primes?’ (Example 3.40 from Chapter 3)is
2.1.LOGICAL CONNECTIVES ANDTHEIRMEANINGS 29
either ‘yes’ or‘no’. ThePlatonists would immediately concede thatnobody may
know thetrueanswer ,butthat, theywould say,isanaltogether different matter .
Ofcourse, matters arenotquite thisclear -cut, butthesituation iscertainly alot
better than intheAmsterdam Stedelijk Museum. Intheﬁrst place, itmay not
beimmediately obvious which statements makemathematical sense (seeExample
4.5). Inthesecond place, youdon’thavetobeaPlatonist todomathematics. Not
everyworking mathematician agrees with thestatement thattheworld ofmathe-
matics exists independently ofthemind ofthemathematical disco verer.TheDutch
mathematician Brouwer (1881–1966) andhisfollo wers haveargued instead that
themathematical reality hasnoindependent existence, butiscreated bythework-
ingmathematician. According toBrouwer thefoundation ofmathematics isinthe
intuition ofthemathematical intellect. Amathematical Intuitionist willtherefore
notaccept certain proof rules ofclassical mathematics, such asproof bycontra-
diction (seeSection 3.3), asthisrelies squarely onPlatonist assumptions.
Although wehavenowish topick aquarrel with theintuitionists, inthisbook we
willaccept proof bycontradiction, andwewillingeneral adhere tothepractice of
classical mathematics andthus tothePlatonist creed.
Connecti vesInmathematical reasoning, itisusual toemplo yshorthands forif
(or: if...then),and,or,not.These words arecalled connectives .Thewordand
isused toform conjunctions ,itsshorthand^iscalled theconjunction symbol.
Thewordorisused toform disjunctions ,itsshorthand_iscalled thedisjunction
symbol. The wordnotisused toform negations ,itsshorthand:iscalled the
negation symbol. Thecombination if...then produces implications ;itsshorthand
)istheimplication symbol. Finally ,there isaphrase lesscommon ineveryday
conversation, butcrucial ifoneistalking mathematics. The combination ...if
andonly if...produces equivalences ,itsshorthand,iscalled theequivalence
symbol. These logical connecti vesaresummed upinthefollo wing table.
symbol name
and ^ conjunction
or _ disjunction
not : negation
if—then ) implication
if,andonly if, equivalence
Remark. Donotconfuse if...then ())ononehand with thus,so,thereforeonthe
other .Thedifference isthatthephrase if...then isused toconstruct conditional
30 CHAPTER 2.TALKING ABOUTMATHEMATICALOBJECTS
statements, while thus (therefore,so)isused tocombine statements intopieces of
mathematical reasoning (or:mathematical proofs). Wewillneverwrite)when
wewanttoconclude from onemathematical statement tothenext.The rules of
inference, thenotion ofmathematical proof, andtheproper useofthewordthus
arethesubject ofChapter 3.
Iff.Inmathematical English itisusual toabbre viate if,andonly iftoiff.Wewill
also use,asasymbolic abbre viation. Sometimes thephrase justincase isused
with thesame meaning.
The follo wing describes, foreveryconnecti veseparately ,howthetruth value of
acompound using theconnecti veisdetermined bythetruth values ofitscompo-
nents. Formost connecti ves,thisisrather obvious. Thecases for)and_have
some peculiar difﬁculties.
ThelettersPandQareused forarbitrary statements. Weusetfor‘true’, andffor
‘false’. Thesetft;fgisthesetoftruth values .
Hask ellusesTrue andFalse forthetruth values. Together ,these form thetype
Bool .This type ispredeﬁned inHask ellasfollo ws:
dataBool =False|True
Negation
Anexpression oftheform:P(notP,itisnotthecase thatP,etc.) iscalled the
negation ofP.Itistrue(has truth value t)justincasePisfalse(has truth value
f).
Inanextremely simple table, thislooks asfollo ws:
P:P
t f
f t
This table iscalled thetruth table ofthenegation symbol.
Theimplementation ofthestandard Hask ellfunctionnotreﬂects thistruth table:
2.1.LOGICAL CONNECTIVES ANDTHEIRMEANINGS 31
not ::Bool->Bool
notTrue =False
notFalse =True
This deﬁnition ispartofPrelude .hs,theﬁlethatcontains thepredeﬁned Hask ell
functions.
Conjunction
TheexpressionP^Q((both)PandQ)iscalled theconjunction ofPandQ.P
andQarecalled conjuncts ofP^Q.Theconjunction P^QistrueiffPand
Qareboth true.
Truth table oftheconjunction symbol:
PQP^Q
t t t
t f f
f t f
f f f
This isreﬂected indeﬁnition oftheHask ellfunction forconjunction, &&(also from
Prelude .hs):
(&&)::Bool->Bool->Bool
False&&x=False
True&&x=x
What thissays is:iftheﬁrst argument ofaconjunction evaluates tofalse, then
theconjunction evaluates tofalse; iftheﬁrstargument evaluates totrue, then the
conjunction gets thesame value asitssecond argument. Thereason thatthetype
declaration has(&&) instead of&&isthat&&isaninﬁx operator ,and(&&) isits
preﬁxcounterpart (seepage 21).
32 CHAPTER 2.TALKING ABOUTMATHEMATICALOBJECTS
Disjunction
TheexpressionP_Q(PorQ)iscalled thedisjunction ofPandQ.PandQ
arethedisjuncts ofP_Q.
Theinterpretation ofdisjunctions isnotalwaysstraightforw ard. English hastwo
disjunctions: (i)theinclusive version, thatcounts adisjunction astruealsoincase
both disjuncts aretrue, and(ii)theexclusive version either. ..or,thatdoesn’ t.
Remember: Thesymbol_willalways beused fortheinclusi veversion ofor.
Evenwith thisproblem outoftheway,difﬁculties may arise.
Example 2.1Noonewilldoubt thetruth ofthefollo wing:
foreveryintegerx,x<1or0<x.
However,acceptance ofthisbrings along acceptance ofeveryinstance. E.g., for
x:=1:1
1<1or0<1:
Some people donotﬁndthisacceptable ortrue, orthink thistomakenosense at
allsince something better canbeasserted, viz., that0<1.Inmathematics with
theinclusi veversion of_,you’llhavetolivewith such apeculiarity .
Thetruth table ofthedisjunction symbol_nowlooks asfollo ws.
PQP_Q
t t t
t f t
f t t
f f f
Here istheHask elldeﬁnition ofthedisjunction operation. Disjunction isrendered
as||inHask ell.
(||)::Bool->Bool->Bool
False||x=x
True||x=True
1:=means:`isbyde®nition equalto'.
2.1.LOGICAL CONNECTIVES ANDTHEIRMEANINGS 33
What thismeans is:iftheﬁrstargument ofadisjunction evaluates tofalse, then
thedisjunction getsthesame value asitssecond argument. Iftheﬁrstargument of
adisjunction evaluates totrue, then thedisjunction evaluates totrue.
Exer cise2.2Makeupthetruth table fortheexclusive version ofor.
Implication
Anexpression oftheformP)Q(ifP,thenQ;QifP)iscalled theimplication
ofPandQ.Pistheantecedent oftheimplication andQtheconsequent .
Thetruth table of)isperhaps theonly surprising one. However,itcanbemoti-
vated quite simply using anexample likethefollo wing. Noonewilldisagree that
foreverynatural numbern,
5<n)3<n:
Therefore, theimplication must hold inparticular fornequal to2,4and6.But
then, animplication should betrueif
both antecedent andconsequent arefalse(n=2),
antecedent false, consequent true(n=4),
and
both antecedent andconsequent true(n=6).
And ofcourse, animplication should befalseintheonly remaining case thatthe
antecedent istrueandtheconsequent false. This accounts forthefollo wing truth
table.
PQP)Q
t t t
t f f
f t t
f f t
Ifwewanttoimplement implication inHask ell,wecandosointerms ofnotand
||.Itisconvenient tointroduce aninﬁx operator==> forthis. The number1
intheinfix declaration indicates thebinding power(binding power0islowest,
9ishighest). Adeclaration ofaninﬁx operator together with anindication ofits
binding poweriscalled aﬁxity declar ation .
34 CHAPTER 2.TALKING ABOUTMATHEMATICALOBJECTS
infix1==>
(==>)::Bool->Bool->Bool
x==>y=(notx)||y
Itisalsopossible togiveadirect deﬁnition:
(==>)::Bool->Bool->Bool
True==>x=x
False==>x=True
Trivially TrueImplications. Note thatimplications with antecedent false and
those with consequent true aretrue. Forinstance, because ofthis, thefollo wing
twosentences must becounted astrue: ifmyname isNapoleon, then thedecimal
expansion ofcontains thesequence 7777777 ,and: ifthedecimal expansion of
contains thesequence 7777777, then strawberries arered.
Implications with oneofthese twoproperties (nomatter what thevalues ofparam-
eters thatmay occur) aredubbed trivially true. Inwhat follo wsthere arequite a
number offactsthataretrivialinthissense thatmay surprise thebeginner .One is
thattheempty set;isincluded inevery set(cf.Theorem 4.9p.126).
Remark. Thewordtrivial isoften abused. Mathematicians haveahabit ofcalling
things trivialwhen theyarereluctant toprovethem. Wewilltrytoavoidthisuse
oftheword. Thejustiﬁcation forcalling astatement trivialresides inthepsycho-
logical factthataproof ofthatstatement immediately comes tomind. Whether a
proof ofsomething comes toyour mind willdepend onyour training andexperi-
ence, sowhat istrivialinthissense is(tosome extent) apersonal matter .When
wearereluctant toproveastatement, wewillsometimes askyoutoproveitasan
exercise.
Implication and Causality .The mathematical useofimplication does notal-
wayscorrespond towhat youareused to.Indaily lifeyouwillusually require a
certain causal dependence between antecedent andconsequent ofanimplication.
(This isthereason theprevious examples look funny.)Inmathematics, such a
2.1.LOGICAL CONNECTIVES ANDTHEIRMEANINGS 35
causality usually willbepresent, butthisisquite unnecessary fortheinterpreta-
tionofanimplication: thetruth table tells thecomplete story .(And inthissection
inparticular ,causality usually will beabsent.) However,inafewcases, natural
language usesurprisingly corresponds with truth table-meaning. E.g., I’llbedead
ifBillwill notshow upmust beinterpreted (ifuttered bysomeone healthy) as
strong belief thatBillwillindeed turnup.2
Converse andContraposition. TheconverseofanimplicationP)QisQ)
P;itscontr aposition is:Q):P.The converse ofatrue implication does
notneed tobetrue, butitscontraposition istrueifftheimplication is.Cf.Theo-
rem2.10, p.45.
Necessary and Sufﬁcient Conditions. The statementPiscalled asufﬁcient
condition forQandQanecessary condition forPiftheimplication P)Q
holds.
AnimplicationP)Qcanbeexpressed inamathematical textinanumber of
ways:
1.ifP,thenQ,
2.QifP,
3.Ponly ifQ,
4.Qwhene verP,
5.Pissufﬁcient forQ,
6.Qisnecessary forP.
Equi valence
TheexpressionP,Q(PiffQ)iscalled theequivalence ofPandQ.PandQ
arethemember softheequivalence. Thetruth table oftheequivalence symbol is
unproblematic once yourealize thatanequivalenceP,Qamounts tothecon-
junction oftwoimplications P)QandQ)Ptakentogether .(Itissometimes
convenient towriteQ)PasP(Q.)Theoutcome isthatanequivalence must
betrueiffitsmembers havethesame truth value.
Table:
2`IfBillwillnotshowup,thenIamaDutchman', hasthesamemeaning, whenutteredbyanative
speakerofEnglish.Whatitmeanswhenutteredbyoneoftheauthorsofthisbook,wearenotsure.
36 CHAPTER 2.TALKING ABOUTMATHEMATICALOBJECTS
PQP,Q
t t t
t f f
f t f
f f t
From thediscussion under implication itisclear thatPiscalled acondition that
isboth necessary andsufﬁcient forQifP,Qistrue.
There isnoneed toaddadeﬁnition ofafunction forequivalence toHask ell.The
typeBool isinclassEq,which means thatanequality relation ispredeﬁned onit.
Butequivalence ofpropositions isnothing other than equality oftheir truth values.
Still, itisuseful tohaveasynon ym:
infix1<=>
(<=>)::Bool->Bool->Bool
x<=>y=x==y
Example 2.3When youareaskedtoprovesomething oftheformPiffQitis
often convenient toseparate thisintoitstwopartsP)QandP(Q.The‘only
if’partoftheproof istheproof ofP)Q(forP)Qmeans thesame asPonly
ifQ),andthe‘if’partoftheproof istheproof ofP(Q(forP(Qmeans the
same asQ)P,which inturnmeans thesame asP,ifQ).
Exer cise2.4Check thatthetruth table forexclusi veorfrom Exercise 2.2isequiv-
alent tothetable for:(P,Q).Conclude thattheHask ellimplementation ofthe
function<+>forexclusi veorintheframe belowiscorrect.
infixr2<+>
(<+>)::Bool->Bool->Bool
x<+>y=x/=y
Thelogical connecti ves^and_arewritten ininﬁx notation. Their Hask ellcoun-
terparts,&&and||arealso inﬁx. Thus, ifpandqareexpressions oftypeBool ,
2.1.LOGICAL CONNECTIVES ANDTHEIRMEANINGS 37
thenp&&qisacorrect Hask ellexpression oftypeBool .Ifonewishes towrite
thisinpreﬁx notation, thisisalso possible, byputting parentheses around theop-
erator:(&&)pq.
Although youwillprobably neverﬁndmore than 3–5connecti vesoccurring inone
mathematical statement, ifyouinsist youcanuseasmanyconnecti vesasyoulike.
Ofcourse, bymeans ofparentheses youshould indicate thewayyour expression
wasformed.
Forinstance, look attheformula
:P^((P)Q),:(Q^:P)):
Using thetruth tables, you candetermine itstruth value iftruth values forthe
components PandQhavebeen given. Forinstance, ifPhasvalue tandQ
hasvalue f,then:Phasf,P)Qbecomes f,Q^:P:f;:(Q^:P):t;
(P)Q),:(Q^:P):f,andthedisplayed expression thus hasvalue f.This
calculation canbegivenimmediately under theformula, beginning with thevalues
givenforPandQ.Theﬁnal outcome islocated under theconjunction symbol^,
which isthemain connecti veoftheexpression.
:P^((P)Q),:(Q^:P))
t t f f t
f f f
f
t
f
f
Incompressed form, thislooks asfollo ws:
:P^((P)Q),:(Q^:P))
ft f t f f ft f f f t
Alternati vely,onemight useacomputer toperform thecalculation.
38 CHAPTER 2.TALKING ABOUTMATHEMATICALOBJECTS
p=True
q=False
formula1 =(notp)&&(p==>q)<=>not(q&&(notp))
After loading theﬁlewith thecode ofthischapter ,youshould beable todo:
TAMO>formula1
False
TAMO>
Note thatpandqaredeﬁned asconstants, with valuesTrue andFalse ,respec-
tively,sothattheoccurrences ofpandqintheexpression formula1 areevaluated
asthese truth values. Therestoftheevaluation isthen justamatter ofapplying
thedeﬁnitions ofnot,&&,<=>and==>.
2.2 Logical Validity andRelated Notions
Goal Tograsp theconcepts oflogical validity andlogical equivalence, tolearn
howtousetruth tables indeciding questions ofvalidity andequivalence, andinthe
handling ofnegations, andtolearn howthetruth table method fortesting validity
andequivalence canbeimplemented.
Logical Validities. There arepropositional formulas thatrecei vethevalue tno
matter what thevalues oftheoccurring letters. Such formulas arecalled (logically)
valid .
Examples oflogical validities are:P)P,P_:P,andP)(Q)P).
Truth Table ofanExpr ession. Ifanexpression containsnlettersP;Q;:::,then
there are2npossible distrib utions ofthetruth values between these letters. The
2n-rowtable thatcontains thecalculations ofthese values isthetruth table ofthe
expression.
Ifallcalculated values areequal tot,then your expression, bydeﬁnition, isa
validity .
2.2.LOGICAL VALIDITY ANDRELATEDNOTIONS 39
Example 2.5(Establishing Logical Validity byMeans ofaTruth Table)
Thefollo wing truth table showsthatP)(Q)P)isalogical validity .
P)(Q)P)
t t t t t
t t f t t
f t t f f
f t f t f
Toseehowwecanimplement thevalidity check inHask ell,look attheimple-
mentation oftheevaluationformula1 again, andaddthefollo wing deﬁnition of
formula2 :
formula2 pq=((notp)&&(p==>q)<=>not(q&&(notp)))
Toseethedifference between thetwodeﬁnitions, letuscheck their types:
TAMO>:tformula1
formula1 ::Bool
TAMO>:tformula2
formula2 ::Bool->Bool->Bool
TAMO>
Thedifference isthattheﬁrstdeﬁnition isacomplete proposition (typeBool )in
itself, while thesecond stillneeds twoarguments oftypeBool before itwillreturn
atruth value.
Inthedeﬁnition offormula1 ,theoccurrences ofpandqareinterpreted ascon-
stants ,ofwhich thevalues aregivenbyprevious deﬁnitions. Inthedeﬁnition of
formula2 .theoccurrences ofpandqareinterpreted asvariables thatrepresent
thearguments when thefunction getscalled.
Apropositional formula inwhich theproposition letters areinterpreted asvariables
caninfactbeconsidered asapropositional function orBoolean function ortruth
function .Ifjustonevariable, saypoccurs init,then itisafunction oftype
Bool->Bool (takesaBoolean, returns aBoolean). Iftwovariables occur init,
saypandq,then itisafunction oftypeBool->Bool->Bool (takesBoolean,
40 CHAPTER 2.TALKING ABOUTMATHEMATICALOBJECTS
then takesanother Boolean, andreturns aBoolean). Ifthree variables occur init,
then itisoftypeBool->Bool->Bool->Bool ,andsoon.
Inthevalidity check forapropositional formula, wetreat theproposition letters
asarguments ofapropositional function, andwecheck whether evaluation ofthe
function yields true foreverypossible combination ofthearguments (that isthe
essence ofthetruth table method forchecking validity). Here isthecase forpropo-
sitions with oneproposition letter (typeBool->Bool ).
valid1::(Bool->Bool)->Bool
valid1bf=(bfTrue)&&(bfFalse)
Thevalidity check forBoolean functions oftypeBool->Bool issuited totest
functions ofjustonevariable. Anexample istheformulaP_:Pthatexpresses
theprinciple ofexcluded middle (or,ifyouprefer aLatin name, tertium nondatur ,
for:there isnothird possibility). Here isitsimplementation inHask ell:
excluded_middle ::Bool->Bool
excluded_middle p=p||notp
Tocheck thatthisisvalidbythetruth table method, oneshould consider thetwo
casesP:=tandP:=f,andascertain that theprinciple yields tinboth of
these cases. This isprecisely what thevalidity checkvalid1 does: ityieldsTrue
precisely when applying theboolean functionbftoTrue yieldsTrue andapplying
bftoFalse yieldsTrue .And indeed, weget:
TAMO>valid1excluded_middle
True
Here isthevalidity check forpropositional functions with twoproposition let-
ters, Such propositional functions havetypeBool->Bool->Bool ),andneed
atruth table with four rowstocheck their validity ,asthere arefour cases tocheck.
2.2.LOGICAL VALIDITY ANDRELATEDNOTIONS 41
valid2::(Bool->Bool->Bool)->Bool
valid2bf=(bfTrueTrue)
&&(bfTrueFalse)
&&(bfFalseTrue)
&&(bfFalseFalse)
Again, itiseasy toseethatthisisanimplementation ofthetruth table method for
validity checking. TrythisoutonP)(Q)P)andon(P)Q))P,and
disco verthatthebrack eting matters:
form1pq=p==>(q==>p)
form2pq=(p==>q)==>p
TAMO>valid2form1
True
TAMO>valid2form2
False
Thepropositional functionformula2 thatwasdeﬁned aboveisalso oftheright
argument type forvalid2 :
TAMO>valid2formula2
False
Itshould beclear howthenotion ofvalidity istobeimplemented forpropositional
functions with more than twopropositional variables. Writing outthefulltables
becomes abitirksome, sowearefortunate thatHask elloffersanalternati ve.We
demonstrate itinvalid3 andvalid4 ,.
42 CHAPTER 2.TALKING ABOUTMATHEMATICALOBJECTS
valid3::(Bool->Bool->Bool->Bool)->Bool
valid3bf=and[bfpqr|p<-[True,False],
q<-[True,False],
r<-[True,False]]
valid4::(Bool->Bool->Bool->Bool->Bool)->Bool
valid4bf=and[bfpqrs|p<-[True,False],
q<-[True,False],
r<-[True,False],
s<-[True,False]]
Thecondition p<-[True,False] ,for“pisanelement ofthelistconsisting of
thetwotruth values”, isanexample oflistcompr ehension (page 118).
Thedeﬁnitions makeuseofHask elllistnotation, andofthepredeﬁned function
and forgeneralized conjunction. Anexample ofalistofBooleans inHask ellis
[True,True,False ].Such alistissaidtobeoftype[Bool] .Iflist isalistof
Booleans (anobject oftype[Bool] ),thenandlist givesTrue incase allmem-
bers oflist aretrue,False otherwise. Forexample,and[True,True,Fals e]
givesFalse ,butand[True,True,True] givesTrue .Further details about
working with listscanbefound inSections 4.6and7.5.
Leaving outParentheses. Weagree that^and_bind more strongly than)
and,.Thus, forinstance,P^Q)Rstands for(P^Q))R(and notfor
P^(Q)R)).
Operator Precedence inHask ell InHask ell,theconvention isnotquite the
same, for||hasoperator precedence 2,&&hasoperator precedence 3,and==has
operator precedence 4,which means that==binds more strongly than&&,which
inturn binds more strongly than||.Theoperators thatweadded,==> and<=>,
follo wthelogic convention: theybind lessstrongly than&&and||.
Logically Equi valent. Twoformulas arecalled (logically) equivalent if,nomat-
terthetruth values ofthelettersP;Q;:::occurring inthese formulas, thetruth
values obtained forthem arethesame. This canbecheck edbyconstructing atruth
table (seeExample (2.6)).
Example 2.6(The First Law ofDeMor gan)
2.2.LOGICAL VALIDITY ANDRELATEDNOTIONS 43
:(P^Q) (:P_:Q)
f t t t f t f f t
t t f f f t t t f
t f f t t f t f t
t f f f t f t t f
Theoutcome ofthecalculation showsthattheformulas areequivalent: note that
thecolumn under the:of:(P^Q)coincides with thatunder the_of:P_:Q.
Notation: 	indicates thatand	areequivalent3.Using thisnotation, we
cansaythatthetruth table ofExample (2.6) showsthat:(P^Q)(:P_:Q).
Example 2.7(DeMor ganAgain)
Thefollo wing truth table showsthat:(P^Q),(:P_:Q)isalogical validity ,
which establishes that:(P^Q)(:P_:Q).
:(P^Q),(:P_:Q)
f t t t t f t f f t
t t f f t f t t t f
t f f t t t f t f t
t f f f t t f t t f
Example 2.8Apixelonacomputer screen isadotonthescreen thatcanbeeither
on(i.e., visible) oroff(i.e., invisible). Wecanuse1foronand0foroff.Turning
pixelsinagivenarea onthescreen offoroncreates ascreen pattern forthatarea.
Thescreen pattern ofanarea isgivenbyalistofbits(0sor1s).Such alistofbits
canbeviewedasalistoftruth values (byequating 1with tand0with f),andgiven
twobitlistsofthesame length wecanperform bitwise logical operations onthem:
thebitwise exclusi veoroftwobitlistsofthesame lengthn,sayL=[P1;:::;Pn]
andK=[Q1;:::;Qn],isthelist[P1Q1;:::;PnQn],wheredenotes
exclusi veor.
Intheimplementation ofcursor movement algorithms, thecursor ismade visible
onthescreen bytaking abitwise exclusi veorbetween thescreen patternSatthe
cursor position andthecursor patternC.When thecursor moveselsewhere, the
original screen pattern isrestored bytaking abitwise exclusi veorwith thecursor
patternCagain. Exercise 2.9showsthatthisindeed restores theoriginal pattern
S.
3TheGreekalphabetisonp.423.
44 CHAPTER 2.TALKING ABOUTMATHEMATICALOBJECTS
Exer cise2.9Letstand forexclusi veor.Show,using thetruth table from Exer-
cise2.2,that(PQ)Qisequivalent toP.
InHask ell,logical equivalence canbetested asfollo ws.First wegiveaprocedure
forpropositional functions with1parameter:
logEquiv1 ::(Bool->Bool)->(Bool->Bool)->Bool
logEquiv1 bf1bf2=
(bf1True<=>bf2True)&&(bf1False<=>bf2False)
What thisdoes, forformulas ;	with asingle propositional variable, istesting
theformula ,	bythetruth table method.
Wecanextend thistopropositional functions with2,3ormore parameters, us-
inggeneralized conjunction. Here aretheimplementations oflogEquiv2 and
logEquiv3 ;itshould beobvious howtoextend thisfortruth functions with still
more arguments.
logEquiv2 ::(Bool->Bool->Bool)->
(Bool->Bool->Bool)->Bool
logEquiv2 bf1bf2=
and[(bf1pq)<=>(bf2pq)|p<-[True,False],
q<-[True,False]]
logEquiv3 ::(Bool->Bool->Bool->Bool)->
(Bool->Bool->Bool->Bool)->Bool
logEquiv3 bf1bf2=
and[(bf1pqr)<=>(bf2pqr)|p<-[True,False],
q<-[True,False],
r<-[True,False]]
Letusredo Exercise (2.9) bycomputer .
formula3 pq=p
formula4 pq=(p<+>q)<+>q
2.2.LOGICAL VALIDITY ANDRELATEDNOTIONS 45
Note thattheqinthedeﬁnition offormula3 isneeded toensure thatitisafunction
with twoarguments.
TAMO>logEquiv2 formula3 formula4
True
Wecanalso testthisbymeans ofavalidity check onP,((PQ)Q),as
follo ws:
formula5 pq=p<=>((p<+>q)<+>q)
TAMO>valid2formula5
True
Warning .Donotconfuseand,.Ifand	areformulas, then	ex-
presses thestatement thatand	areequivalent. Ontheother hand,,	is
justanother formula. The relation between thetwoisthattheformula ,	
islogically validiffitholds that	.(See Exercise 2.19.) Compare thedif-
ference, inHask ell,betweenlogEquiv2 formula3 formula4 (atruestatement
about therelation between twoformulas), andformula5 (just another formula).
Thefollo wing theorem collects anumber ofuseful equivalences. (Ofcourse,P,
QandRcanbearbitrary formulas themselv es.)
Theor em2.10 1.P::P (law ofdouble negation),
2.P^PP;P_PP (laws ofidempotence),
3.(P)Q):P_Q;
:(P)Q)P^:Q,
4.(:P):Q)(Q)P);
(P):Q)(Q):P);
(:P)Q)(:Q)P) (laws ofcontr aposition),
5.(P,Q)((P)Q)^(Q)P))
((P^Q)_(:P^:Q)),
46 CHAPTER 2.TALKING ABOUTMATHEMATICALOBJECTS
6.P^QQ^P;P_QQ_P (laws ofcommutativity),
7.:(P^Q):P_:Q;
:(P_Q):P^:Q (DeMor ganlaws).
8.P^(Q^R)(P^Q)^R;
P_(Q_R)(P_Q)_R (laws ofassociativity),
9.P^(Q_R)(P^Q)_(P^R);
P_(Q^R)(P_Q)^(P_R) (distrib ution laws),
Equi valence 8justiﬁes leaving outparentheses inconjunctions anddisjunctions of
three ormore conjuncts resp., disjuncts. Non-tri vialequivalences thatoften are
used inpractice are2,3and9.Note howyoucanusethese tore-write negations:
anegation ofanimplication canberewritten asaconjunction, anegation ofa
conjunction (disjunction) isadisjunction (conjunction).
Exer cise2.11 The First LawofDeMorganwasprovedinExample 2.6. This
method wasimplemented above.Usethemethod byhand toprovetheother parts
ofTheorem 2.10.
Wewillnowdemonstrate howonecanusetheimplementation ofthelogical equiv-
alence tests asacheck forTheorem 2.10. Here isaquestion foryoutoponder:
does checking theformulas bymeans oftheimplemented functions forlogical
equivalence count asaproofoftheprinciples involved?Whate vertheanswer to
thisonemay be,Figure 2.1deﬁnes thetests forthestatements made inTheorem
2.10, bymeans oflambda abstr action Theexpression \p->not(notp)is
theHask ellwayofreferring tothelambda termp:::p,theterm thatdenotes the
operation ofperforming adouble negation. SeeSection 2.4.
Ifyourunthese tests, yougetresultTrue forallofthem. E.g.:
TAMO>test5a
True
Thenexttheorem listssome useful principles forreasoning with>(theproposition
thatisalwaystrue; theHask ellcounterpart isTrue )and?(theproposition thatis
alwaysfalse; theHask ellcounterpart ofthisisFalse ).
Theor em2.12 1.:>?;:?>,
2.P)?:P,
2.2.LOGICAL VALIDITY ANDRELATEDNOTIONS 47
test1=logEquiv1 id(\p->not(notp))
test2a=logEquiv1 id(\p->p&&p)
test2b=logEquiv1 id(\p->p||p)
test3a=logEquiv2 (\pq->p==>q)(\pq->notp||q)
test3b=logEquiv2 (\pq->not(p==>q))(\pq->p&&notq)
test4a=logEquiv2 (\pq->notp==>notq)(\pq->q==>p)
test4b=logEquiv2 (\pq->p==>notq)(\pq->q==>notp)
test4c=logEquiv2 (\pq->notp==>q)(\pq->notq==>p)
test5a=logEquiv2 (\pq->p<=>q)
(\pq->(p==>q)&&(q==>p))
test5b=logEquiv2 (\pq->p<=>q)
(\pq->(p&&q)||(notp&&notq))
test6a=logEquiv2 (\pq->p&&q)(\pq->q&&p)
test6b=logEquiv2 (\pq->p||q)(\pq->q||p)
test7a=logEquiv2 (\pq->not(p&&q))
(\pq->notp||notq)
test7b=logEquiv2 (\pq->not(p||q))
(\pq->notp&&notq)
test8a=logEquiv3 (\pqr->p&&(q&&r))
(\pqr->(p&&q)&&r)
test8b=logEquiv3 (\pqr->p||(q||r))
(\pqr->(p||q)||r)
test9a=logEquiv3 (\pqr->p&&(q||r))
(\pqr->(p&&q)||(p&&r))
test9b=logEquiv3 (\pqr->p||(q&&r))
(\pqr->(p||q)&&(p||r))
Figure 2.1:Deﬁning theTestsforTheorem 2.10.
48 CHAPTER 2.TALKING ABOUTMATHEMATICALOBJECTS
3.P_>>;P^?? (dominance laws),
4.P_?P;P^>P (identity laws),
5.P_:P> (law ofexcluded middle),
6.P^:P? (contr adiction).
Exer cise2.13 Implement checks fortheprinciples from Theorem 2.12.
Without proof, westate thefollo wing Substitution Principle :Ifand	are
equivalent, and0and	0aretheresults ofsubstituting foreveryoccurrence of
Pinandin	,respecti vely,then0and	0areequivalent. Example 2.14 makes
clear what thismeans.
Example 2.14 From:(P)Q)P^:Qplus thesubstitution principle it
follo wsthat
:(:P)Q):P^:Q
(bysubstituting:PforP),butalsothat
:(a=2b 1)aisprime)a=2b 1^aisnotprime
(bysubstituting a=2b 1forPandaisprime forQ).
Exer cise2.15 Apropositional contradiction isaformula thatyields falseforevery
combination oftruth values foritsproposition letters. Write Hask elldeﬁnitions of
contradiction tests forpropositional functions with one, twoandthree variables.
Exer cise2.16 Produce useful denials foreverysentence ofExercise 2.31. (Ade-
nialofisanequivalent of:.)
Exer cise2.17 Produce adenial forthestatement thatx<y<z(wherex;y;z2
R).
Exer cise2.18 Show:
1.(,	)(:,:	),
2.(:,	)(,:	).
Exer cise2.19 Showthat	istrueiff,	islogically valid.
2.2.LOGICAL VALIDITY ANDRELATEDNOTIONS 49
Exer cise2.20 Determine (either using truth tables orTheorem 2.10) which ofthe
follo wing areequivalent, nextcheck your answer bycomputer:
1.:P)QandP):Q,
2.:P)QandQ):P,
3.:P)Qand:Q)P,
4.P)(Q)R)andQ)(P)R),
5.P)(Q)R)and(P)Q))R,
6.(P)Q))PandP,
7.P_Q)Rand(P)R)^(Q)R).
Exer cise2.21 Answer asmanyofthefollo wing questions asyoucan:
1.Construct aformula involving thelettersPandQthathasthefollo wing
truth table.
PQ
t t t
t f t
f t f
f f t
2.Howmanytruth tables arethere for2-letter formulas altogether?
3.Canyouﬁndformulas forallofthem?
4.Isthere ageneral method forﬁnding these formulas?
5.And what about 3-letter formulas andmore?
50 CHAPTER 2.TALKING ABOUTMATHEMATICALOBJECTS
2.3 Making Symbolic Form Explicit
Inasense, propositional reasoning isnotimmediately relevantformathematics.
Fewmathematicians will everfeeltheurgetowrite downadisjunction oftwo
statements like3<1_1<3.Incases likethisitisclearly “better” toonly write
downtheright-most disjunct.
Fortunately ,once variables enter thescene, propositional reasoning suddenly be-
comes averyuseful tool: theconnecti vesturnouttobequite useful forcombining
open formulas. Anopen formula isaformula with oneormore unbound variables
init.Variable binding will beexplained below,buthere isaﬁrst example ofa
formula with anunbound variablex.Adisjunction like3<x_x<3is(insome
cases) auseful wayofexpressing thatx6=3.
Example. Consider thefollo wing (true) sentence:
Between everytworational numbers there isathird one. (2.1)
The property expressed in(2.1) isusually referred toasdensity oftherationals.
Wewilltakeasystematic look atproving such statements inChapter 3.
Exer cise2.22 Canyouthink ofanargument showing thatstatement (2.1) istrue?
APatter n.There isalogical pattern underlying sentence (2.1). Tomakeitvisi-
ble,look atthefollo wing, more explicit, formulation. Ituses variablesx;yandz
forarbitrary rationals, andrefers totheordering<ofthesetQofrational numbers.
Forallrational numbersxandz,ifx<z,then some (2.2)
rational numberyexists such thatx<yandy<z.
Youwilloften ﬁnd‘x<yandy<z’shortened to:x<y<z.
Quantiﬁers Note thewords all(or:forall),some (or:forsome ,some. ..exists,
thereexists. ..suchthat,etc.). Theyarecalled quantiﬁer s,andweusethesymbols
8and9asshorthands forthem.
Withthese shorthands, plus theshorthands fortheconnecti vesthatwesawabove,
andtheshorthand:::2Qfortheproperty ofbeing arational, wearriveatthe
follo wing compact symbolic formulation:
8x2Q8z2Q(x<z)9y2Q(x<y^y<z)): (2.3)
2.3.MAKING SYMBOLIC FORMEXPLICIT 51
Wewilluseexample (2.3) tomakeafewpoints about theproper useofthevocab-
ulary oflogical symbols. Anexpression like(2.3) iscalled asentence oraformula.
Note thattheexample formula (2.3) iscomposite: wecanthink ofitasconstructed
outofsimpler parts. Wecanpicture itsstructure asinFigure (2.2).
8x2Q8z2Q(x<z)9y2Q(x<y^y<z))
8z2Q(x<z)9y2Q(x<y^y<z))
(x<z)9y2Q(x<y^y<z))
x<z9y2Q(x<y^y<z)
(x<y^y<z)
x<yy<z
Figure 2.2:Composition ofExample Formula from itsSub-formulas.
Astheﬁgure shows,theexample formula isformed byputting thequantiﬁer preﬁx
8x2Qinfront oftheresult ofputting quantiﬁer preﬁx8z2Qinfront ofa
simpler formula, andsoon.
Thetwoconsecuti veuniversal quantiﬁer preﬁx escanalsobecombined into8x;z2
Q.This givesthephrasing
8x;z2Q(x<z)9y2Q(x<y^y<z)):
Putting an^between thetwoquantiﬁers isincorrect, however.Inother words, the
expression8x2Q^8z2Q(x<z)9y2Q(x<y^y<z))isconsidered
ungrammatical. Thereason isthattheformula part8x2Qisitself notaformula,
butapreﬁx thatturns aformula intoamore comple xformula. Theconnecti ve^
canonly beused toconstruct anewformula outoftwosimpler formulas, so^
cannot servetoconstruct aformula from8x2Qandanother formula.
Thesymbolic version ofthedensity statement uses parentheses. Their function is
toindicate thewaytheexpression hasbeen formed andthereby toshowthescope
ofoperators. Thescope ofaquantiﬁer -expression istheformula thatitcombines
with toform amore comple xformula. Thescopes ofquantiﬁer -expressions and
connecti vesinaformula areillustrated inthestructure treeofthatformula. Figure
52 CHAPTER 2.TALKING ABOUTMATHEMATICALOBJECTS
2.2showsthatthescope ofthequantiﬁer -expression8x2Qistheformula
8z2Q(x<z)9y2Q(x<y^y<z));
thescope of8z2Qistheformula
(x<z)9y2Q(x<y^y<z));
andthescope of9y2Qistheformula (x<y^y<z).
Exer cise2.23 Givestructure trees ofthefollo wing formulas (weuseshorthand
notation, andwriteA(x)asAxforreadability).
1.8x(Ax)(Bx)Cx)).
2.9x(Ax^Bx).
3.9xAx^9xBx.
Theexpression forall(and similar ones) anditsshorthand, thesymbol8,iscalled
theuniver salquantiﬁer ;theexpression thereexists (and similar ones) anditsshort-
hand, thesymbol9,iscalled theexistential quantiﬁer .Thelettersx,yandzthat
havebeen used incombination with them arevariables .Note that‘forsome’ is
equivalent to‘foratleast one’.
Unrestricted and Restricted Quantiﬁers, Domain ofQuantiﬁcation Quanti-
ﬁers canoccur unrestricted :8x(x>0),9y8x(y>x),andrestricted :8x2
A(x>0),9y2B(y<a)(whereAandBaresets).
Intheunrestricted case, there should besome domain ofquantiﬁcation thatoften
isimplicit intheconte xt.E.g., iftheconte xtisrealanalysis,8xmay mean forall
realsx...,and8fmay mean forallreal-valued functionsf....
Example 2.24Risthesetofrealnumbers. The factthattheRhasnogreatest
element canbeexpressed with restricted quantiﬁers as:
8x2R9y2R(x<y):
Ifwespecify thatallquantiﬁers range overthereals (i.e., ifwesaythatRisthe
domain ofquantiﬁcation) then wecandrop theexplicit restrictions, andwegetby
with8x9y(x<y).
2.3.MAKING SYMBOLIC FORMEXPLICIT 53
Theuseofrestricted quantiﬁers allowsforgreater ﬂexibility ,foritpermits oneto
indicate different domains fordifferent quantiﬁers.
Example 2.25
8x2R8y2R(x<y)9z2Q(x<z<y)):
Instead of9x(Ax^:::)onecanwrite9x2A(:::).The advantage when all
quantiﬁers arethus restricted isthatitbecomes immediately clear thatthedomain
issubdi vided into different subdomains ortypes. This canmakethelogical
translation much easier tocomprehend.
Remark. Wewillusestandard names forthefollo wing domains: Nforthenatural
numbers, Zfortheintegernumbers, Qfortherational numbers, andRforthereal
numbers. More information about these domains canbefound inChapter 8.
Exer cise2.26 Write asformulas with restricted quantiﬁers:
1.9x9y(x2Q^y2Q^x<y).
2.8x(x2R)9y(y2R^x<y)).
3.8x(x2Z)9m;n(m2N^n2N^x=m n)).
Exer cise2.27 Write asformulas without restricted quantiﬁers:
1.8x2Q9m;n2Z(n6=0^x=m=n).
2.8x2F8y2D(Oxy)Bxy).
Bound Variables. Quantiﬁer expressions8x,9y,...(and their restricted com-
panions) aresaid tobind everyoccurrence ofx,y,...intheir scope. Ifavariable
occurs bound inacertain expression then themeaning ofthatexpression does not
change when allbound occurrences ofthatvariable arereplaced byanother one.
54 CHAPTER 2.TALKING ABOUTMATHEMATICALOBJECTS
Example 2.289y2Q(x<y)hasthesame meaning as9z2Q(x<z).
This indicates thatyisbound in9y2Q(x<y).But9y2Q(x<y)and
9y2Q(z<y)havedifferent meanings, fortheﬁrstasserts thatthere exists ara-
tional number greater than some givennumberx,andthesecond thatthere exists
arational number greater than some givenz.
Universal andexistential quantiﬁers arenottheonly variable binding operators
used bymathematicians. There areseveralother constructs thatyouareprobably
familiar with which canbind variables.
Example 2.29 (Summation, Integration.) TheexpressionP5
i=1iisnothing but
awaytodescribe thenumber 15(15=1+2+3+4+5),andclearly ,15does
innowaydepend oni.Useofadifferent variable does notchange themeaning:P5
k=1k=15.Here aretheHask ellversions:
Prelude> sum[i|i<-[1..5]]
15
Prelude> sum[k|k<-[1..5]]
15
Similarly ,theexpressionR1
0xdx denotes thenumber1
2anddoes notdepend onx.
Example 2.30 (Abstraction.) Another waytobind avariable occurs intheab-
straction notationfx2AjPg,cf.(4.1), p.118. TheHask ellcounterpart tothis
islistcomprehension:
[x|x<-list,property x]
Thechoice ofvariable does notmatter .Thesame listisspeciﬁed by:
[y|y<-list,property y]
Thewaysetcomprehension isused todeﬁne setsissimilar tothewaylistcompre-
hension isused todeﬁne lists, andthisissimilar again tothewaylambda abstrac-
tionisused todeﬁne functions. See2.4.
2.3.MAKING SYMBOLIC FORMEXPLICIT 55
Bad Habits. Itisnotunusual toencounter ourexample-statement (2.1) displayed
asfollo ws.
Forallrationalsxandy,ifx<y,then bothx<zandz<yhold
forsome rationalz.
Note thatthemeaning ofthisisnotcompletely clear .Withthisexpression thetrue
statement that8x;y2Q9z2Q(x<y)(x<z^z<y))could bemeant, but
what also could bemeant isthefalsestatement that9z2Q8x;y2Q(x<y)
(x<z^z<y)).
Putting quantiﬁers both atthefront andattheback ofaformula results inambigu-
ity,foritbecomes difﬁcult todetermine their scopes. Intheworstcase theresult
isanambiguity between statements thatmean entirely different things.
Itdoes notlook toowell toletaquantiﬁer bind anexpression thatisnotavariable,
such asin:
forallnumber sn2+1,...
Although thishabit does notalwayslead tounclarity ,itisbetter toavoidit,as
theresult isoften rather hard tocomprehend. Ifyouinsist onquantifying over
comple xterms, then thefollo wing phrasing issuggested: forallnumbers ofthe
formn2+1;:::
Ofcourse, intheimplementation language, terms liken+1areimportant for
pattern matc hing.
Translation Problems. Itiseasy toﬁndexamples ofEnglish sentences thatare
hard totranslate into thelogical vernacular .E.g., inbetween tworationals isa
thirdoneitisdifﬁcult todisco verauniversal quantiﬁer andanimplication.
Also, sometimes theEnglish hasanindeﬁnite article where themeaning isclearly
universal. Consider thesentence awell-behaved childisaquiet child.Theindef-
inite articles here may suggest existential quantiﬁers; however,thereading thatis
clearly meant hastheform
8x2C(Well-beha ved(x))Quiet(x)):
Afamous example from philosophy oflanguage is:ifafarmer owns adonk ey,he
beats it.Again, inspite oftheindeﬁnite articles, themeaning isuniversal:
8x8y((Farmer(x)^Donk ey(y)^Own(x;y)))Beat(x;y)):
56 CHAPTER 2.TALKING ABOUTMATHEMATICALOBJECTS
Incases likethis, translation into aformula reveals thelogical meaning thatre-
mained hidden intheoriginal phrasing.
Inmathematical textsitalsooccurs quite often thattheindeﬁnite article aisused to
makeuniversal statements. Compare Example (2.43) below,where thefollo wing
universal statement ismade: Arealfunction iscontinuous ifitsatisﬁes the"--
deﬁnition.
Exer cise2.31 Translate intoformulas, taking care toexpress theintended mean-
ing:
1.Theequationx2+1=0hasasolution.
2.Alargestnatural number does notexist.
3.Thenumber 13isprime (usedjnfor‘ddividesn’).
4.Thenumbernisprime.
5.There areinﬁnitely manyprimes.
Exer cise2.32 Translate intoformulas:
1.Everyone lovedDiana. (Use theexpressionL(x;y)for:xlovedy,andthe
namedforDiana.)
2.Diana lovedeveryone.
3.Man ismortal. (UseM(x)for‘xisaman’, andM’(x)for‘xismortal’.)
4.Some birds donotﬂy.(UseB(x)for‘xisabird’ andF(x)for‘xcanﬂy’.)
Exer cise2.33 Translate intoformulas, using appropriate expressions forthepred-
icates:
1.Dogs thatbark donotbite.
2.Allthatglitters isnotgold.
3.Friends ofDiana’ sfriends areherfriends.
4.*Thelimit of1
nasnapproaches inﬁnity iszero.
2.3.MAKING SYMBOLIC FORMEXPLICIT 57
Expr essing Uniqueness. Ifwecombine quantiﬁers with therelation =ofiden-
tity,wecanmakedeﬁnite statements like‘there isprecisely onerealnumberx
with theproperty thatforanyrealnumbery,xy=y’.Thelogical rendering is
(assuming thatthedomain ofdiscussion isR):
9x(8y(xy=y)^8z(8y(zy=y))z=x)):
The ﬁrst part ofthisformula expresses thatatleast onexsatisﬁes theproperty
8y(xy=y),andthesecond partstates thatanyzsatisfying thesame property is
identical tothatx.
The logical structure becomes more transparent ifwewritePfortheproperty .
This givesthefollo wing translation for‘precisely oneobject haspropertyP’:
9x(Px^8z(Pz)z=x)):
Exer cise2.34 Usetheidentity symbol =totranslate thefollo wing sentences:
1.Everyone lovedDiana except Charles.
2.Everyman adores atleast twowomen.
3.Noman ismarried tomore than onewoman.
Long agothephilosopher Bertrand Russell hasproposed thislogical format forthe
translation oftheEnglish deﬁnite article. According tohistheory ofdescription,
thetranslation ofTheKing israging becomes:
9x(King(x)^8y(King(y))y=x)^Raging (x)):
Exer cise2.35 UseRussell’ srecipe totranslate thefollo wing sentences:
1.TheKing isnotraging.
2.The King islovedbyallhissubjects. (useK(x)for‘xisaKing’, and
S(x;y)for‘xisasubject ofy’).
Exer cise2.36 Translate thefollo wing logical statements back intoEnglish.
1.9x2R(x2=5).
58 CHAPTER 2.TALKING ABOUTMATHEMATICALOBJECTS
2.8n2N9m2N(n<m).
3.8n2N:9d2N(1<d<(2n+1)^dj(2n+1)).
4.8n2N9m2N(n<m^8p2N(p6n_m6p)).
5.8"2R+9n2N8m2N(m>n)(ja amj6")).(R+isthesetof
positi vereals;a;a0;a1;:::refer torealnumbers .)
Remark. Note thattranslating back andforth between formulas andplain English
involvesmaking decisions about adomain ofquantiﬁcation andabout thepredi-
cates touse. This isoften amatter oftaste. Forinstance, howdoes onechoose
betweenP(n)for‘nisprime’ andthespelled out
n>1^:9d2N(1<d<n^djn);
which expands thedeﬁnition ofbeing prime? Expanding thedeﬁnitions ofmathe-
matical concepts isnotalwaysagood idea. Thepurpose ofintroducing theword
prime wasprecisely tohide thedetails ofthedeﬁnition, sothattheydonotbur-
denthemind. Theartofﬁnding theright mathematical phrasing istointroduce
precisely theamount andthekind ofcomple xitythatareneeded tohandle agiven
problem.
Before wewillstart looking atthelanguage ofmathematics anditsconventions in
amore systematic way,wewill makethelink between mathematical deﬁnitions
andimplementations ofthose deﬁnitions.
2.4 Lambda Abstraction
Thefollo wing description deﬁnes aspeciﬁc function thatdoes notdepend atallon
x:
Thefunction thatsendsxtox2.
Often used notations arex7!x2andx:x2.The expressionx:x2iscalled a
lambda term.
Iftisanexpression oftypebandxisavariable oftypeathenx:t isanexpression
oftypea!b,i.e.,x:t denotes afunction. This wayofdeﬁning functions is
called lambda abstraction.
2.4.LAMBDAABSTRA CTION 59
Note thatthefunction thatsendsytoy2(notationy7!y2,ory:y2)describes the
same function asx:x2.
InHask ell,function deﬁnition bylambda abstraction isavailable. Compare the
follo wing twodeﬁnitions:
square1 ::Integer ->Integer
square1 x=x^2
square2 ::Integer ->Integer
square2 =\x->x^2
Intheﬁrst ofthese, theparameter xisgivenasanargument. Inthesecond, the
function isdeﬁned asalambda abstract. TheHask ellwayoflambda abstraction
goes likethis. The syntax is:\v->body ,wherevisavariable oftheargu-
ment type andbody anexpression oftheresult type. Itisallowed toabbre viate
\v->\w->body to\vw->body .And soon,formore than twovari-
ables. E.g., both ofthefollo wing arecorrect:
m1::Integer ->Integer ->Integer
m1=\x->\y->x*y
m2::Integer ->Integer ->Integer
m2=\xy->x*y
And again, thechoice ofvariables does notmatter .
Also, itispossible toabstract overtuples. Compare thefollo wing deﬁnition ofa
function thatsolvesquadratic equations bymeans ofthewell-kno wn‘abc’-formula
x= bp
b2 4ac
2a:
60 CHAPTER 2.TALKING ABOUTMATHEMATICALOBJECTS
solveQdr ::(Float,Float,Float) ->(Float,Float)
solveQdr =\(a,b,c) ->ifa==0thenerror"notquadratic"
elseletd=b^2-4*a*cin
ifd<0thenerror"norealsolutions"
else
((-b+sqrtd)/2*a,
(-b-sqrtd)/2*a)
Tosolvetheequationx2 x 1=0,usesolveQdr (1,-1,-1) ,andyouwill
getthe(approximately correct) answer(1.61803,-0.61803 4).Approximately
correct, for1:61803 isanapproximation ofthegolden ratio,1+p
5
2,and 0:618034
isanapproximation of1 p
5
2.
One waytothink about quantiﬁed expressions like8xPxand9yPyisascom-
binations ofaquantiﬁer expression8or9andalambda termx:Pxory:Py.
Thelambda abstractx:Pxdenotes theproperty ofbeing aP.Thequantiﬁer8
isafunction thatmaps properties totruth values according totherecipe: ifthe
property holds ofthewhole domain then t,elsef.Thequantiﬁer9isafunction
thatmaps properties totruth values according totherecipe: iftheproperty holds
ofanything atallthen t,elsef.This perspecti veonquantiﬁcation isthebasis of
theHask ellimplementation ofquantiﬁers inSection 2.8.
2.5 Deﬁnitions andImplementations
Here isanexample ofadeﬁnition inmathematics. Anatural numbernisprime if
n>1andnonumbermwith1<m<ndividesn.
Wecancapture thisdeﬁnition ofbeing prime inaformula, usingmjnfor‘m
dividesn’,asfollo ws(weassume thenatural numbers asourdomain ofdiscourse):
n>1^:9m(1<m<n^mjn): (2.4)
Another wayofexpressing thisisthefollo wing:
n>1^8m((1<m<n)):mjn): (2.5)
Ifyou havetrouble seeing that formulas (2.4) and(2.5) mean thesame, don’t
worry.Wewill study such equivalences between formulas inthecourse ofthis
chapter .
2.6.ABSTRA CTFORMULAS ANDCONCRETE STRUCTURES 61
Ifwetakethedomain ofdiscourse tobethedomain ofthenatural numbers N=
f0;1;2;:::g,then formula (2.5) expresses thatnisaprime number .
Wecanmakethefactthattheformula ismeant asadeﬁnition explicit byintroduc-
ingapredicate namePandlinking thattotheformula:4
P(n):n>1^8m((1<m<n)):mjn): (2.6)
One waytothink about thisdeﬁnition isasaprocedur efortesting whether a
natural number isprime. Is83aprime? Yes,because none of2;3;4;:::;9divides
83.Note thatthere isnoreason tocheck 10;:::,forsince1010>83anyfactor
mof83withm>10willnotbethesmallest factor of83,andasmaller factor
should haveturned upbefore.
Theexample showsthatwecanmaketheprime procedure more efﬁcient. Weonly
havetotryandﬁndthesmallest factor ofn,andanybwithb2>ncannot bethe
smallest factor .Forsuppose thatanumberbwithb2>ndividesn.Then there is
anumberawithab=n,andthereforea26n,andadividesn.Ourdeﬁnition
cantherefore run:
P(n):n>1^8m((1<m^m26n)):mjn): (2.7)
InChapter 1wehaveseen thatthisdeﬁnition isequivalent tothefollo wing:
P(n):n>1^LD(n)=n: (2.8)
TheHask ellimplementation oftheprimality testwasgiveninChapter 1.
2.6 Abstract Formulas andConcr eteStructur es
The formulas ofSection 2.1are“handled” using truth values andtables. Quan-
tiﬁcational formulas need astructur etobecome meaningful. Logical sentences
involving variables canbeinterpreted inquite different structures. Astructure
isadomain ofquantiﬁcation, together with ameaning fortheabstract symbols
thatoccur .Ameaningful statement istheresult ofinterpreting alogical formula
inacertain structure. Itmay well occur thatinterpreting agivenformula inone
structure yields atruestatement, while interpreting thesame formula inadiffer-
entstructure yields afalsestatement. This illustrates thefactthatwecanuseone
logical formula formanydifferent purposes.
Look again attheexample-formula (2.3), nowdisplayed without reference toQ
andusing aneutral symbol R.This gives:
8x8y(xRy=)9z(xRz^zRy)): (2.9)
4:means:`isbyde®nition equivalentto'.
62 CHAPTER 2.TALKING ABOUTMATHEMATICALOBJECTS
Itisonly possible toread thisasameaningful statement if
1.itisunderstood which istheunderlying domain ofquantiﬁcation,
and
2.what thesymbol Rstands for.
Earlier ,thesetofrationals Qwasused asthedomain, andtheordering<was
emplo yedinstead ofthe—in itself meaningless— symbol R.Intheconte xtofQ
and<,thequantiﬁers8xand9zin(2.9) should beread as:forallrationalsx...,
resp., forsome rationalz...,whereas Rshould beviewed asstanding for<.In
thatparticular case, theformula expresses thetrue statement that, between every
tworationals, there isathird one.
However,onecanalso choose thesetN=f0;1;2;:::gofnatural numbers as
domain andthecorresponding ordering<asthemeaning ofR.Inthat case,
theformula expresses thefalse statement thatbetween everytwonatural numbers
there isathird one.
Aspeciﬁcation of(i)adomain ofquantiﬁcation, tomakeanunrestricted useofthe
quantiﬁers meaningful, and(ii)ameaning fortheunspeciﬁed symbols thatmay
occur (here:R),willbecalled aconte xtorastructur eforagivenformula.
Asyou haveseen here: givensuch aconte xt,theformula canbe“read” asa
meaningful assertion about thisconte xtthatcanbeeither trueorfalse.
Open Formulas, FreeVariables, andSatisfaction. Ifonedeletes theﬁrstquan-
tiﬁer expression8xfrom theexample formula (2.9), then thefollo wing remains:
8y(xRy=)9z(xRz^zRy)): (2.10)
Although thisexpression does havetheform ofastatement, itinfactisnotsuch a
thing. Reason: statements areeither trueorfalse ;and, evenifaquantiﬁer domain
andameaning forRwere speciﬁed, what results cannot besaidtobetrueorfalse,
aslong aswedonotknowwhat itisthatthevariablex(which nolonger isbound
bythequantiﬁer8x)stands for.
However,theexpression canbeturned into astatement again byreplacing the
variablexby(thename of)some object inthedomain, or—what amounts tothe
same— byagreeing thatxdenotes thisobject.
Forinstance, ifthedomain consists ofthesetN[fq2Qj0<q<1gofnatural
numbers together with allrationals between 0and1,andthemeaning ofRisthe
2.6.ABSTRA CTFORMULAS ANDCONCRETE STRUCTURES 63
usual ordering relation<forthese objects, then theexpression turns intoatruth
upon replacingxby0:5orbyassigningxthisvalue. Wesaythat0:5satisﬁes the
formula inthegivendomain.
However,(2.10) turns intoafalsity when weassign 2tox;inother words,2does
notsatisfy theformula.
Ofcourse, onecandelete anextquantiﬁer aswell, obtaining:
xRy=)9z(xRz^zRy):
Now,bothxandyhavebecome free, and, nexttoaconte xt,values havetobe
assigned toboth these variables inorder todetermine atruth value.
Anoccurrence ofavariable inanexpression thatisnot(anymore) inthescope ofa
quantiﬁer issaidtobefreeinthatexpression. Formulas thatcontain freevariables
arecalled open .
Anopen formula canbeturned intoastatement intwoways: (i)adding quantiﬁers
thatbind thefreevariables; (ii)replacing thefreevariables by(names of)objects
inthedomain (orstipulating thattheyhavesuch objects asvalues).
Exer cise2.37 Consider thefollo wing formulas.
1.8x8y(xRy),
2.8x9y(xRy).
3.9x8y(xRy).
4.9x8y(x=y_xRy).
5.8x9y(xRy^:9z(xRz^zRy)).
Arethese formulas trueorfalse inthefollo wing conte xts?:
a.Domain: N=f0;1;2;:::g;meaning ofR:<,
b.Domain: N;meaning ofR:>,
c.Domain: Q(thesetofrationals); meaning ofR:<,
d.Domain: R(thesetofreals); meaning ofxRy:y2=x,
e.Domain: setofallhuman beings; meaning ofR:father -of,
f.Domain: setofallhuman beings; meaning ofxRy:xlovesy.
64 CHAPTER 2.TALKING ABOUTMATHEMATICALOBJECTS
Exer cise2.38 InExercise 2.37, delete theﬁrst quantiﬁer onxinformulas 1–5.
Determine forwhich values ofxtheresulting open formulas aresatisﬁed ineach
ofthestructures a–f.
2.7 Logical Handling oftheQuantiﬁers
Goal Tolearn howtorecognize simple logical equivalents involving quantiﬁers,
andhowtomanipulate negations inquantiﬁed conte xts.
Validities andEqui valents. Compare thecorresponding deﬁnitions inSection 2.2.
1.Alogical formula iscalled (logically) valid ifitturns outtobetrueinevery
structure.
2.Formulas are(logically) equivalent iftheyobtain thesame truth value in
every structure (i.e., ifthere isnostructure inwhich oneofthem istrueand
theother oneisfalse).
Notation: 	expresses thatthequantiﬁcational formulas and	are
equivalent.
Exer cise2.39 (The propositional version ofthisisinExercise 2.19 p.48.) Argue
thatand	areequivalent iff,	isvalid.
Because ofthereference toevery possible structure (ofwhich there areinﬁnitely
many),these arequite complicated deﬁnitions, anditisnowhere suggested that
youwill beexpected todecide onvalidity orequivalence ineverycase thatyou
may encounter .Infact,in1936 itwasprovedrigorously ,byAlonzo Church (1903–
1995) andAlan Turing (1912–1954) thatnoonecan! This illustrates thatthe
comple xity ofquantiﬁers exceeds that ofthelogic ofconnecti ves,where truth
tables allowyoutodecide onsuch things inamechanical way,asiswitnessed
bytheHask ellfunctions thatimplement theequivalence checks forpropositional
logic.
Nevertheless: thenexttheorem already showsthatitissometimes verywell possi-
bletorecognize whether formulas arevalidorequivalent —ifonly these formulas
aresufﬁciently simple.
Only afewuseful equivalents arelisted next.Here, 	(x),(x;y)andthelike
denote logical formulas thatmay contain variablesx(orx;y)free.
2.7.LOGICAL HANDLING OFTHEQUANTIFIERS 65
Theor em2.40
1.8x8y(x;y)8y8x(x;y);
9x9y(x;y)9y9x(x;y),
2.:8x(x)9x:(x);
:9x(x)8x:(x);
:8x:(x)9x(x);
:9x:(x)8x(x),
3.8x((x)^	(x))(8x(x)^8x	(x));
9x((x)_	(x))(9x(x)_9x	(x)).
Proof.There isnoneat truth table method forquantiﬁcation, andthere isnoneat
proof here. Youjusthavetofollo wcommon sense. Forinstance (part 2,ﬁrstitem)
common sense dictates thatnoteveryxsatisﬁes if,andonly if,somexdoes not
satisfy .
Ofcourse, common sense may turn outnotagood adviser when things getless
simple. Chapter 3hopefully will(partly) resolv ethisproblem foryou.
Exer cise2.41 Foreverysentence inExercise 2.36 (p.57), consider itsnega-
tion:,andproduce amore positi veequivalent for:byworking thenegation
symbol through thequantiﬁers.
Order ofQuantiﬁers. Theorem 2.40.1 says thattheorder ofsimilar quantiﬁers
(alluniversal orallexistential) isirrele vant. Butnote thatthisisnotthecase for
quantiﬁers ofdifferent kind.
Ontheonehand, ifyouknowthat9y8x(x;y)(which states thatthere isone
ysuch thatforallx,(x;y)holds) istrue inacertain structure, then afortiori
8x9y(x;y)will betrue aswell (for eachx,takethissamey).However,if
8x9y(x;y)holds, itisfarfrom sure that9y8x(x;y)holds aswell.
Example 2.42 The statement that8x9y(x<y)istrue inN,butthestatement
9y8x(x<y)inthisstructure wrongly asserts thatthere exists agreatest natural
number .
66 CHAPTER 2.TALKING ABOUTMATHEMATICALOBJECTS
Restricted Quantiﬁcation. Youhavemettheuseofrestricted quantiﬁers, where
therestriction onthequantiﬁed variable ismembership insome domain. Butthere
arealsoother types ofrestriction.
Example 2.43 (Continuity) According tothe“"--deﬁnition” ofcontinuity ,areal
functionfiscontinuous if(domain R):
8x8">09>08y(jx yj<=)jf(x) f(y)j<"):
This formula uses therestricted quantiﬁers8">0and9>0thatenable amore
compact formulation here.
Example 2.44 Consider ourexample-statement (2.3). Here itisagain:
8y8x(x<y=)9z(x<z^z<y))
This canalsobegivenas
8y8x<y9z<y(x<z);
butthisreformulation stretches theuseofthistype ofrestricted quantiﬁcation
probably abittoomuch.
Remark. IfAisasubset ofthedomain ofquantiﬁcation, then
8x2A(x)means thesame as8x(x2A)(x)),
whereas
9x2A(x)istantamount with9x(x2A^(x)).
Warning: The restricted univer salquantiﬁer isexplained using),whereas the
existential quantiﬁer isexplained using^!
Example 2.45 ‘Some Mersenne numbers areprime’ iscorrectly translated as9x(Mx^
Px).The translation9x(Mx)Px)iswrong. Itismuch tooweak, foritex-
presses(in thedomain N)thatthere isanatural numberxwhich iseither nota
Mersenne number oritisaprime. Anyprime willdoasanexample ofthis, andso
willanynumber which isnotaMersenne number .
Inthesame way,‘allprime numbers haveirrational square roots’ istranslated as
8x2R(Px)px=2Q).Thetranslation8x2R(Px^px=2Q)iswrong. This
time weendupwith something which istoostrong, forthisexpresses thatevery
realnumber isaprime number with anirrational square root.
2.7.LOGICAL HANDLING OFTHEQUANTIFIERS 67
Restricted Quantiﬁers Explained. There isaversion ofTheorem 2.40 thatem-
ploysrestricted quantiﬁcation. This version states, forinstance, that:8x2Ais
equivalent to9x2A:,andsoon.Theequivalence follo wsimmediately from
theremark above.Wenowhave,e.g., that:8x2A(x)isequivalent to:8x(x2
A)(x)),which inturnisequivalent to(Theorem 2.40)9x:(x2A)(x)),
hence to(and heretheimplication turns intoaconjunction —cf.Theorem 2.10)
9x(x2A^:(x)),and, ﬁnally ,to9x2A:(x).
Exer cise2.46 Does ithold that:9x2A(x)isequivalent to9x62A(x)?If
your answer is‘yes’, giveaproof, if‘no’, then youshould showthisbygiving a
simple refutation (anexample offormulas andstructures where thetwoformulas
havedifferent truth values).
Exer cise2.47 Is9x62A:(x)equivalent to9x2A:(x)?Giveaproof ifyour
answer is‘yes’, andarefutation otherwise.
Exer cise2.48 Produce theversion ofTheorem 2.40 (p.65)thatemplo ysrestricted
quantiﬁcation. Arguethatyour version iscorrect.
Example 2.49 (Discontinuity Explained) Thefollo wing formula describes what
itmeans forarealfunctionftobediscontinuous inx:
:8">09>08y(jx yj<=)jf(x) f(y)j<"):
Using Theorem 2.40, thiscanbetransformed inthree steps, moving thenegation
overthequantiﬁers, into:
9">08>09y:(jx yj<=)jf(x) f(y)j<"):
According toTheorem 2.10 thisisequivalent to
9">08>09y(jx yj<^:jf(x) f(y)j<");
i.e.,to
9">08>09y(jx yj<^jf(x) f(y)j>"):
What hasemer gednowisaclearer “picture” ofwhat itmeans tobediscontinuous
inx:there must bean">0such thatforevery>0(“no matter howsmall”) ay
canbefound withjx yj<,whereasjf(x) f(y)j>";i.e.,there arenumbers
y“arbitrarily close tox”such thatthevaluesf(x)andf(y)remain atleast"apart.
68 CHAPTER 2.TALKING ABOUTMATHEMATICALOBJECTS
Differ entSorts. Severalsorts ofobjects, may occur inoneandthesame conte xt.
(Forinstance, sometimes aproblem involvesvectors aswell asreals.) Insuch a
situation, oneoften uses different variable naming conventions tokeeptrack of
thedifferences between thesorts. Infact,sorts arejustlikethebasic types ina
functional programming language.
Justasgood naming conventions canmakeaprogram easier tounderstand, nam-
ingconventions canbehelpful inmathematical writing. Forinstance: theletters
n;m;k;:::areoften used fornatural numbers,f;g;h;:::usually indicate that
functions aremeant, etc.
The interpretation ofquantiﬁers insuch acase requires thatnotone, butseveral
domains arespeciﬁed: oneforeverysortortype. Again, thisissimilar toproviding
explicit typing information inafunctional program foreasier human digestion.
Exer cise2.50 That thesequencea0;a1;a2;:::2Rconvergestoa,i.e., that
limn!1an=a,means that8>09n8m>n(ja amj<).Giveapos-
itiveequivalent forthestatement thatthesequencea0;a1;a2;:::2Rdoes not
converge.
2.8 Quantiﬁers asProcedur es
One waytolook atthemeaning oftheuniversal quantiﬁer8isasaprocedure to
testwhether asethasacertain property .Thetestyields tifthesetequals thewhole
domain ofdiscourse, andfotherwise. This means that8isaprocedure thatmaps
thedomain ofdiscourse totandallother setstof.Similarly forrestricted universal
quantiﬁcation. Arestricted universal quantiﬁer canbeviewed asaprocedure that
takesasetAandapropertyP,andyields tjustincase thesetofmembers ofA
thatsatisfyPequalsAitself.
Inthesame way,themeaning oftheunrestricted existential quantiﬁer9canbe
speciﬁed asaprocedure.9takesasetasargument, andyields tjustincase the
argument setisnon-empty .Arestricted existential quantiﬁer canbeviewed asa
procedure thattakesasetAandapropertyP,andyields tjustincase thesetof
members ofAthatsatisfyPisnon-empty .
Ifweimplement setsaslists, itisstraightforw ardtoimplement these quantiﬁer
procedures. InHask ell,theyarepredeﬁned asallandany(these deﬁnitions will
beexplained below):
2.8.QUANTIFIERS ASPROCEDURES 69
any,all ::(a->Bool)->[a]->Bool
anyp =or.mapp
allp =and.mapp
Thetyping wecanunderstand right away.Thefunctions anyandalltakeastheir
ﬁrstargument afunction with typeainputs andtypeBool outputs (i.e., atestfor
aproperty), astheir second argument alistovertypea,andreturn atruth value.
Note thatthelistrepresenting therestriction isthesecond argument.
Tounderstand theimplementations ofallandany,onehastoknowthatorand
andarethegeneralizations of(inclusi ve)disjunction andconjunction tolists. (We
havealready encountered andinSection 2.2.) Theyhavetype[Bool]->Bool .
Saying thatallelements ofalistxssatisfy apropertypboils downto:thelist
mappxscontains onlyTrue (see 1.8). Similarly ,saying thatsome element of
alistxssatisﬁes apropertypboils downto:thelistmappxscontains atleast
oneTrue .This explains theimplementation ofall:ﬁrstapplymapp,nextapply
and.Inthecase ofany:ﬁrstapplymapp,nextapplyor.
Theaction ofapplying afunctiong::b->cafter afunctionf::a->bis
performed bythefunctiong.f::a->c,thecomposition offandg.See
Section 6.3below.
Thedeﬁnitions ofallandanyareused asfollo ws:
Prelude> any(<3)[0..]
True
Prelude> all(<3)[0..]
False
Prelude>
The functions every andsome getusevencloser tostandard logical notation.
These functions arelikeallandany,buttheyﬁrsttaketherestriction argument,
nextthebody:
every,some::[a]->(a->Bool)->Bool
everyxsp=allpxs
somexsp=anypxs
70 CHAPTER 2.TALKING ABOUTMATHEMATICALOBJECTS
Now,e.g., theformula8x2f1;4;9g9y2f1;2;3gx=y2canbeimplemented
asatest, asfollo ws:
TAMO>every[1,4,9] (\x->some[1,2,3] (\y->x==y^2))
True
Butcaution: theimplementations ofthequantiﬁers areprocedures, notalgorithms.
Acalltoallorany(orevery orsome )need notterminate. Thecall
every[0..](>=0)
willrunforever.This illustrates once more thatthequantiﬁers areinessence more
comple xthan thepropositional connecti ves.Italso motivatesthedevelopment of
themethod ofproof, inthenextchapter .
Exer cise2.51 Deﬁne afunctionunique::(a->Bool)->[a]->Bool
thatgivesTrue foruniquepxsjustincase there isexactly oneobject among
xsthatsatisﬁesp.
Exer cise2.52 Deﬁne afunctionparity::[Bool]->Bool thatgivesTrue
forparityxsjustincase anevennumber ofthexssequalsTrue .
Exer cise2.53 Deﬁne afunctionevenNR::(a->Bool)->[a]->Bool
thatgivesTrue forevenNRpxsjustincase anevennumber ofthexsshave
propertyp.(Use theparity function from theprevious exercise.)
2.9 Further Reading
Excellent books about logic with applications incomputer science are[Bur98 ]
and[HR00 ].Agood introduction tomathematical logic isEbbinghaus, Flum and
Thomas [EFT94 ].
Chapter3
TheUseofLogic:Proof
Preview
This chapter describes howtowrite simple proofs. Section 3.1isabout style of
presentation, while Section 3.2givesthegeneral format oftheproof rules. Sec-
tions 3.3and3.4describe therules that governtheuseoftheconnecti vesand
thequantiﬁers intheproof process. The recipes aresummarized inSection 3.5.
Section 3.6givessome strate gichints forhandling proof problems. Section 3.7
applies theproof recipes toreasoning about prime numbers; thissection alsoillus-
trates howthecomputer canbeused (sometimes) asaninstrument forchecking
particular cases, andtherefore asatoolforrefuting general claims.
Representation andproof aretwosides ofthesame coin. Inorder tohandle the
stuffofmathematics, westart outfrom deﬁnitions andtrytoﬁndmeaningful rela-
tions. Tocheck ourintuitions andsometimes justtomakesure thatourdeﬁnitions
accomplish what wehadinmind wehavetoprovide proofs forourconjectures.
Tohandle abstract objects inanimplementation wehavetorepresent them ina
concrete way.Again, wehavetocheck thattherepresentation isfaithful tothe
original intention.
Itturns outthatproofs andimplementations havemanythings incommon. Inthe
ﬁrst place, variables areakeyingredient inboth. Variables areused todenote
members ofcertain sets. Inourexample proofs, wewill usedx;yforrational
numbers andrealnumbers, andm;nforintegers. Similarly ,thevariables used in
theimplementation ofadeﬁnition range overcertain sets, indicated bymeans of
typings forthevariables.
71
72 CHAPTER 3.THEUSEOFLOGIC:PROOF
Themain purpose ofthischapter istospur youontodevelop good habits insetting
upmathematical proofs. Once acquired, these habits willhelp youinmanyways.
Being able to‘seestructure’ inamathematical proof willenable youtoeasily read
anddigest theproofs youﬁndinpapers andtextbooks. When youhavelearned to
seethepatterns ofproof, youwilldisco verthattheyturnupagain andagain inany
kind offormal reasoning.
Because ittakestime toacquire newhabits, itisnotpossible todigest thecontents
ofthischapter inoneortworeadings. Once therecommended habits areacquired,
butonly then, thecontents ofthechapter havebeen properly digested, andthe
chapter willhaveserveditspurpose.
Themodule containing thecode ofthischapter depends onthemodule containing
thecode oftheprevious chapter .Inthemodule declaration wetakecare toimport
thatmodule. This isdone with thereserv edkeywordimport .
moduleTUOLP
where
importTAMO
3.1 ProofStyle
The objects ofmathematics arestrange creatures. Theydonotexistinphysical
space. Nooneeversawthenumber 1.Onecanconsistently arguethatmathematics
hasnosubject atall,ormaybe thatthesubject matter ofmathematics isinthe
mind. Butwhat does thatmean? Forsure, different mathematicians havethesame
objects inmind when theyinvestigate prime numbers. Buthowcanthatbe,if
mathematics hasnosubject matter?
Astothemethod ofmathematics, there isnodisagreement: theheart ofthematter
isthenotion ofproof.Aproof isanargument aimed atconvincing yourself and
others ofthetruth ofanassertion. Some proofs aresimple, butothers canbepieces
ofartwith aesthetic andintellectual qualities.
Indaily life,people arguealot,butthese efforts arenotalwayscapable ofconvinc-
ingothers. Ifyouhavearowwith your partner ,more often than notitisextremely
difﬁcult toassess who isright. (Ifthiswere aneasy matter ,why havearowin
3.1.PROOFSTYLE 73
theﬁrstplace?) Bycontrast, inmathematical matters itusually isveryclear who
isright andwho iswrong. Doing mathematics isasports where therules ofthe
game areveryclear .Indeed, mathematical proofs goundisputed most ofthetime.
This remarkable phenomenon isprobably duetotheidealized character ofmathe-
matical objects. Idealization isameans bywhich mathematics provides access to
theessence ofthings, andgrasping theessence ofsomething isahallmark ofthe
creati vemind. Itremains asource ofwonder thattheresults aresooften applicable
totherealworld.
Themathematical content ofmost oftheproofs discussed inthischapter isminute;
later onyouwill callsuch proofs “routine”. Forthetime being, theattention is
focused ontheform ofproofs. However,tobeginwith, here follo wsalistof
stylistic commandments.
Aproof ismade upofsentences. Therefore:
1Write correctEnglish, trytoexpressyourselfclearly .
Ifyouarenotanativespeak eryouareinthesame league astheauthors ofthis
book. Still, English isthelingua franca oftheexact sciences, sothere isnoway
around learning enough ofitforclear communication. Especially when nota
nativespeak er,keepyour style simple.
Write with areader inmind, anddonotleaveyour reader inthedark concerning
your proof plans.
2Makesurethereader knows exactly what youareupto.
Applying therules ofproof ofthenextsection inthecorrect waywillusually take
care ofthis. Inparticular ,when youfeeltheneed tostart writing symbols —often,
variables— inform thereader what theystand foranddonotletthem falloutof
theblue.
3Saywhat youmean when introducing avariable .
Section 3.2again showsyoutheway.
Usethesymbolic shorthands forconnecti vesandquantiﬁers sparingly .Something
likethecontinuity deﬁnition onp.66with itsimpressi vesequence offour quanti-
ﬁers isabout themaximum awell-educated mathematician candigest.
4Don’ tstart asentence with symbols; don’twrite formulas only.
74 CHAPTER 3.THEUSEOFLOGIC:PROOF
Itisbest toviewsymbolic expressions asobjects intheir ownright. E.g., write:
The formula istrue,or:Itholds that.Note that aproof that consists of
formulas only isnotasuitable waytoinform thereader about what hasbeen going
oninyour brain.
5Usewordsorphrases like‘thus’ ,‘therefore’ ,‘hence’ ,‘itfollo wsthat’,etc.
tolinkupyour formulas. Berelevant andsuccinct.
Donotusetheimplication symbol)incases thatreally require “thus” or“there-
fore”. Beginner’ sproofs canoften berecognized bytheir excessi velength. Of
course, itwillbedifﬁcult atﬁrsttokeeptotheproper middle road between com-
mandments (4)and(5).
When embarking onaproof, itisagood idea towrite downexactly (i)what can
beused intheproof (theGiven ),(ii)andwhat istobeproved.Itisveryhelpful to
useaschema forthis.
6When constructing proofs, usethefollowing schema:
Given:...
Tobeproved:...
Proof: ...
N.B.: Aproof using Mathematical Induction offerssome extrastructure; cf.Sec-
tion7.1belowandp.400.
Inthecourse ofthischapter youwill disco verthatproofs arehighly structured
pieces oftexts.Thefollo wing guideline willhelp youkeeptrack ofthatstructure.
7Uselayout (inparticular ,indentation) toidentify subpr oofsandtokeeptrack
ofthescopes ofassumptions.
Thegeneral shape ofaproof containing subproofs willbediscussed inSection 3.2.
8Look updeﬁnitions ofdeﬁned notions, andusethese deﬁnitions tore-write
both GivenandTobeproved.
Inparticular ,elimination ofdeﬁned notions from thesentence tobeprovedwill
showyouclearly what itisthatyouhavetoprove.
Donotexpect thatyouwillbeable towrite downacorrect proof attheﬁrsttry.Do
notexpect tosucceed atthesecond one. Youwillhavetoaccept thefactthat, for
3.2.PROOFRECIPES 75
thetime being, your efforts willnotresult infaultless proofs. Nevertheless: keep
trying!
9Makesureyouhave asufﬁcient supply ofscratchpaper ,makeafaircopy of
theend-pr oduct —whether youthink ittobeﬂawless ornot.
Finally: before handing inwhat youwrote, trytoletitrestforatleast onenight.
And only then,
10Askyourselftwothings: Isthiscorrect? Can other sreadit?
The honest answers usually will benegativeatﬁrst. ..Fortunately ,youdidnot
ﬁnish your supply ofscratch paper .And surely ,ifyouhaveunderstood properly ,
youmust beable togetitdowncorrectly eventually .(Apply tothisthelawof
contraposition inTheorem 2.10, p.45.)
3.2 ProofRecipes
Goal Develop theability toapply theproof rules insimple conte xts.Theproof
rules arerecipes thatwill allowyoutocook upyour ownproofs. Trytodistill
arecipe from everyrule, andandmakesure youremember howtoapply these
recipes intheappropriate situation.
Itiscompletely normal thatyougetstuck inyour ﬁrstefforts toprovethings. Of-
ten,youwillnotevenknowhowtomakeaﬁrstmove.This section then may come
toyour help. Itprovides youwith rules thatgovernthebeha viour ofthelogical
phrases inmathematical proof, andthus with recipes tousewhile constructing a
proof.
Infact,constructing proofs hasalotincommon with writing computer programs.
Instructured programming, layout canbeused torevealthebuilding blocks ofa
program more clearly .Wewillalsouselayout asatooltorevealstructure.
Themost important structure principle isthataproof cancontain subproofs, just
likeaprogram may contain procedures which havetheir ownsub-procedures, and
soon.Wewillindicate subproofs bymeans ofindentation. Thegeneral structure
ofaproof containing asubproof isasfollo ws:
76 CHAPTER 3.THEUSEOFLOGIC:PROOF
Given: A,B,...
Tobeproved:P
Proof:
...
Suppose C...
Tobeproved:Q
Proof:...
...
ThusQ
...
ThusP
Tobesure, asubproof may itself contain subproofs:
Given: A,B
Tobeproved:P
Proof:
...
Suppose C
Tobeproved:Q
Proof:
...
Suppose D
Tobeproved:R
Proof:...
...
ThusR
...
ThusQ
...
ThusP
3.2.PROOFRECIPES 77
The purpose of‘Suppose’ istoaddanewgiventothelistofassumptions that
may beused, butonly fortheduration ofthesubproof ofwhich ‘Suppose’ isthe
head. Ifthecurrent listofgivensisP1;:::;Pnthen ‘Suppose Q’extends thislistto
P1;:::;Pn;Q.Ingeneral, inside abox, youcanuseallthegivensandassumptions
ofalltheincluding boxes.Thus, intheinnermost boxoftheexample, thegivens
areA;B;C;D.This illustrates theimportance ofindentation forkeeping track of
the‘current box’.
There aresome 15rules discussed here forallsevennotions oflogic. Ataﬁrst
encounter ,thismay seem anoverwhelming number .However,only some ofthese
arereally enlightening; severalaresotrivialthatyouwon’tevennotice using them.
Anexample is:
Given:P,Q
ThusP^Q.
What isreally remarkable isthis: together these 15rules aresufﬁcient totackle
everypossible proofproblem .
Ofcourse, thisdoes notmean thattheprocess ofproving mathematical factsboils
downintheendtomastery ofafewsimple rules. Think ofitaschess: therules of
thegame areextremely simple, andthese rules canbeused toplay verycompli-
cated andbeautiful games. Tobeable toplay youmust knowtherules. Butifyour
knowledge does notextend beyond therules, youwillonly becapable ofplaying
games thatarerather dull. Learning toplay chess does notstop with learning the
rules, andwhat isbeautiful inagame ofchess cannot befound intherules. Sim-
ilarly ,therules ofproof cannot teach youmore than howtoprovethesimplest of
things. (And, inthebeginning, thatisdifﬁcult enough.) Itisideas thatmakea
proof interesting orbeautiful, buttherules keepsilent about these things.
Classiﬁcation ofRules.
Everylogical symbol hasitsownrules ofuse. There arebasically twowaysin
which youcanencounter alogical symbol: itcaneither appear inthegivenorinthe
statement thatistobeproved.Intheﬁrstcase theruletouseisanelimination rule,
inthesecond case anintroduction rule. Elimination rules enable youtoreduce a
proof problem toanew,hopefully simpler ,one. Introduction rules makeclear how
toproveagoal ofacertain givenshape. Allrules aresummarized inSection 3.5.
Safety .Aswegoalong, wewill provide arguments that trytoexplain why a
certain rule issafe.Arule issafe ifitwill neverallowyoutoprovesomething
falseonthebasis ofstatements thataretrue. Obviously ,thisisarequirement that
78 CHAPTER 3.THEUSEOFLOGIC:PROOF
proofs should fulﬁll. That therules forconnecti vesaresafe isduetotruth tables.
Safety oftwoofthequantiﬁer rules isobvious; theremaining ones aretough nuts.
Don’ tworrywhen these explanations insome cases appear mystifying. Eventually ,
you’llunderstand!
3.3 Rules fortheConnecti ves
Implication
Here come acomplicated butimportant introduction ruleandatrivialoneforelim-
ination.
Introduction Theintroduction ruleforimplication istheDeduction Rule.Iten-
ables youtoreduce theproblem ofproving animplication )	.Instead, it
prescribes toassume asanadditional newGiven ,andasks youtoderivethat	.
Given: ...
Tobeproved:)	
Proof:
Suppose 
Tobeproved:	
Proof:...
Thus)	.
Safety .Incaseisfalse, theimplication )	willbetrueanyway.Thus, the
case thatisleftforyoutoconsider iswhenistrue, meaning thatyoucanassume
itasgiven.Butthen ofcourse youshould showthat	istrueaswell (otherwise,
)	would befalse).
Example 3.1WeshowthattheimplicationP)Risprovableonthebasis ofthe
givenP)QandQ)R.Thus, emplo ying theschema inthe7thcommandment
(p.74)fortheﬁrsttime:
Given:P)Q,Q)R
Tobeproved:P)R
Proof:
Given:P)Q,Q)R(old),P(new)
Tobeproved:R
3.3.RULESFORTHECONNECTIVES 79
Proof:FromP)QandP,concludeQ.
Next,fromQ)RandQ,concludeR.
Thus, according tothededuction rule,P)R
Here isaslightly more concise version:
Given:P)Q,Q)R
Tobeproved:P)R
Proof:
SupposeP
Tobeproved:R
Proof:FromP)QandP,concludeQ.
Next,fromQ)RandQ,concludeR.
ThusP)R
Detailed vs.Concise Proofs. Theproof justgivenexplains painstakingly howthe
Deduction Rule hasbeen applied inorder togettherequired result. However,in
practice ,youshould write thisinastillmore concise way:
Given:P)Q,Q)R
Tobeproved:P)R
Proof:
SupposeP
FromP)QandP,concludeQ.
Next,fromQ)RandQ,concludeR.
Note thattheﬁnal concise version does notmention theDeduction Rule atall.
Theactual application ofthisruleshould follo wasalastline, butthatisleftfor
thereader toﬁllin.This isnotconsidered anincomplete proof: from thesituation
itisperfectly clear thatthisapplication isunderstood.
Severalother examples ofdetailed proofs andtheir concise versions aregivenin
what follo ws.Here isthekeytotheproof ofanimplication:
Ifthe`tobeproved'isanimplication )	,thenyourproofshouldstartwiththe
followingObligatory Sentence:
Supposethatholds.
80 CHAPTER 3.THEUSEOFLOGIC:PROOF
Theobligatory ﬁrstsentence accomplishes thefollo wing things (cf.the2ndcom-
mandment onp.73).
Itinforms thereader thatyouaregoing toapply theDeduction Rule inorder
toestablish that)	.
The reader also understands thatitisnow	thatyouaregoing toderive
(instead of)	).
Thus, starting with theobligatory sentence informs thereader inanefﬁcient
wayabout your plans.
Reducti veCharacter .InExample (3.1) theproblem ofshowing thatfrom the
givensP)Q;Q)RitcanbeprovedthatP)Rwasreduced ,using the
Deduction Rule, totheproblem ofshowing thatfrom thegivensP)Q;Q)
R;PitcanbeprovedthatR.This requires asubproof.
Marking Subpr oofs with Indentation. Note thatonly during thatsubpr oofyou
areallowed tousethenewgivenP.Some logic textsrecommend theuseof
mark erstoindicate beginning andendofsuch asubproof, between which the
extra givenisavailable. Inourexample proofs inthischapter ,weindicate the
beginnings andends ofsubproofs bymeans ofindentation. Inmore colloquial
versions oftheproofs, identifying thebeginning andendofasubproof isleftto
thereader .
Inthisparticular case, thereduced proof problem turned outtobeeasy:Pand
P)Qtogether produceQ;whereasQandQ)Rtogether produceR,as
desired. (Ofcourse, ingeneral, such asubproof may require newreductions.)
Thelasttwosteps inthisargument infactapply theElimination Rule ofimplica-
tion, which isalmost tooself-e vident towrite down:
Elimination. This ruleisalso called Modus Ponens .Inwords: from)	and
youcanconclude that	.
Inaschema:
Given: )	,
Thus	.
Safety .Immediate from truth tables: if)	andareboth true, then sois	.
3.3.RULESFORTHECONNECTIVES 81
Thetwoproof rules forimplication enable youtohandle implications inalltypes
ofproof problems. Youmay wanttousemore obvious properties ofimplication,
butfactisthattheyusually canbederivedfrom thetwogivenones. Example (3.1)
isacase inpoint, asisExercise 3.2.(Wewillnotbother youwith theexceptions;
oneisinExercise 3.9.)
Exer cise3.2Apply both implication rules toproveP)Rfrom thegivensP)
Q;P)(Q)R).
Conjunction
Theconjunction rules arealmost tooobvious towrite down.
Introduction. Aconjunction follo wsfrom itstwoconjuncts takentogether .
Inaschema:
Given: ;	
Thus^	.
Elimination. From aconjunction, both conjuncts canbeconcluded.
Schematically:
Given: ^	
Thus.
Given: ^	
Thus	.
Suppose wewanttocheck whether thesum ofevennatural numbers alwaysis
even.Itisnotdifﬁcult toimplement thischeck inHask ell,using thebuilt-in func-
tioneven andthelistofevennumbers.
evens=[x|x<-[0..],evenx]
Formulating thecheck iseasy,butofcourse wewon’tgetananswer ,asthecheck
takesaninﬁnite amount oftime tocompute.
82 CHAPTER 3.THEUSEOFLOGIC:PROOF
TUOLP>forall[m+n|m<-evens,n<-evens]even
Ifwewanttocheck astatement about aninﬁnite number ofcases, wecaneither
look foracountere xample, orwecanattempt togiveaproof. Inthepresent case,
thelatter iseasy.
Example 3.3Assume thatn;m2N.
Toshow:(miseven^niseven))m+niseven.
Detailed proof:
Assume that(meven^neven).
Then (^-elimination) mandnareboth even.
Forinstance,p;q2Nexistsuch thatm=2p,n=2q.
Thenm+n=2p+2q=2(p+q)iseven.
Theresult follo wsusing theDeduction Rule.
Concise proof:
Assume thatmandnareeven.
Forinstance,m=2p,n=2q,p;q2N.
Thenm+n=2p+2q=2(p+q)iseven.
Exer cise3.4Assume thatn;m2N.
Show:(misodd^nisodd))m+niseven.
Equi valence
Anequivalence canbethought ofastheconjunction oftwoimplications. Thus,
therules follo wfrom those for)and^.
Introduction. Inorder toprove,	,youhavetoaccomplish twothings (cf.
example 2.3):
())addasanewgiven,andshowthat	;
(()add	asanewgiven,andshowthat.
Ifyoucandothis,,	hasbeen proved.
3.3.RULESFORTHECONNECTIVES 83
Concise ProofSchema.
Given: ...
Tobeproved:,	
Proof:
Suppose 
Tobeproved:	
Proof:...
Suppose 	
Tobeproved:
Proof:...
Thus,	.
Instead of,youmay alsoencounter ‘iff’or‘ifandonly if’.Aproof ofastatement
oftheform ‘iff	’consists oftwosubproofs: theproof ofthe‘only if’partand
theproof ofthe‘if’part. Caution: the‘only if’partistheproof of)	,and
the‘if’partistheproof of(	.This isbecause ‘only if	’means ‘)	’,
and‘if	’means ‘(	’.Thus, weget:
Given: ...
Tobeproved:iff	
Proof:
Only if:Suppose 
Tobeproved:	
Proof:...
If: Suppose 	
Tobeproved:
Proof:...
Thusiff	.
Elimination. Schematically:
Given: ,	,,...
Thus	
Given: ,	,	,...
Thus
Exer cise3.5Show:
84 CHAPTER 3.THEUSEOFLOGIC:PROOF
1.FromP,Qitfollo wsthat(P)R),(Q)R),
2.FromP,Qitfollo wsthat(R)P),(R)Q).
Negation
General Advice. Innomatter what concrete mathematical situation, before ap-
plying anyofthenegation rules givenbelow:whether youwanttoproveoruse
anegated sentence, youshould ﬁrstattempt toconvertintosomething positive .If
thissucceeds, youcanturntotheother rules.
Theorems 2.10 (p.45)and2.40 (p.65)contain some tools fordoing this: youcan
movethenegation symbol inward,across quantiﬁers andconnecti ves.Ifthispro-
cess terminates, the“mathematics” ofthesituation often allowsyoutoeliminate
thenegation symbol altogether .E.g.,:8x(x<a_b6x)canberewritten as
9x(a6x^x<b).Foramore complicated example, cf.(2.49) onp.67.
Remark. Thegeneral advice givenabovedoes notapply totheexercises inthe
present chapter .Firstly ,manyoftheexercises belowarepurely logical: there is
nomathematical conte xtatall. Secondly ,allexercises here aredesigned tobe
solvedusing therules only; possible shortcuts viatheresults ofChapter 2will
often trivialize them.
Introduction. If:istobeproved,dothefollo wing. Assume asanewgiven,
andattempt toprovesomething (depending ontheconte xt)thatisevidently false.
This strate gyclearly belongs tothekind ofrulethatreduces theproof problem.
Schematically:
Given: ...
Tobeproved::
Proof:
Suppose 
Tobeproved:?
Proof:...
Thus:.
Evidently False. Here,?stands fortheevidently falsestatement.
3.3.RULESFORTHECONNECTIVES 85
Inamathematical conte xt,thiscanbeanything untrue, such as1=0.Foramore
complicated falsehood, cf.theproof thatlimits areunique onp.317.
Inthelogical examples below,?may consist oftheoccurrence ofastatement
together with itsnegation. Inthatcase, onestatement contr adicts theother .For
instance, youmight deriveasentence:	,thereby contradicting theoccurrence of
	among thegiven .Cf.Examples (3.8) andand(3.30).
Example 3.6Theproof oftheorem 3.33 (thenumber ofprimes isnotﬁnite) isan
example ofthemethod ofnegation introduction. Another example canbefound in
theproof oftheorem 8.14 (thesquare rootof2isnotrational).
Exer cise3.7Produce proofs for:
1.Given:P)Q.Toshow::Q):P,
2.GivenP,Q.Toshow::P,:Q.
Safety .Suppose thatfrom ;itfollo wsthat?,andthatallgiven aresatisﬁed.
Thencannot betrue. (Otherwise, your proof would showtheevidently false?
tobetrueaswell.) Thus,:must betrue.
Elimination. When youintend tousethegiven:,youcanattempt toprove,
onthebasis oftheother given,thatmust hold. Inthatcase, theelimination
ruledeclares theproof problem tobesolved,nomatter what thestatement Tobe
proved!
Schematically:
Given: ,:
Thus	.
Safety .The rule cannot help tobesafe, since youwill neverﬁnd yourself ina
situation where and:areboth true. (Remarkably ,thisnevertheless isauseful
rule! )
There isoneextra negation rule that canbeused ineverysituation: Proofby
Contr adiction ,orReductio adAbsur dum.
86 CHAPTER 3.THEUSEOFLOGIC:PROOF
ProofbyContradiction. Inorder toprove,add:asanewgiven,andattempt
todeduce anevidently falsestatement.
Inaschema:
Given: ...
Tobeproved:
Proof:
Suppose:
Tobeproved:?
Proof:...
Thus.
Safety .Theargument issimilar tothatoftheintroduction rule.
Advice. Beginners areoften lured intousing thisrule. Thegiven:thatcomes
infree looks soinviting! However,manytimes itmust beconsidered poisoned,
making foracluttered bunch ofconfused givensthatyouwillnotbeable todisen-
tangle. Itisakiller rulethatoften willturn itself against itsuser,especially when
thatisabeginner .Proof byContradiction should beconsidered your lastwayout.
Some proof problems doneed it,butifpossible youshould proceed without: you
won’tgethurtandasimpler andmore informati veproof willresult.
Comparison. Proof byContradiction looks verysimilar tothe:introduction rule
(both inform andinspirit), andthetwoareoften confused. Indeed, inordinary
mathematical conte xts,itisusually “better” tomovenegation inside instead of
applying:-introduction.
Example 3.8From:Q):Pitfollo wsthatP)Q.
Given::Q):P
Tobeproved:P)Q
Detailed proof:
SupposeP
Tobeproved:Q
Proof:
Suppose:Q
Tobeproved:?
Proof:
From:Qand:Q):Pderive:P.
FromPand:Pderive?.
3.3.RULESFORTHECONNECTIVES 87
Thus,Q,bycontradiction.
Thus,P)Q,bytheDeduction Rule.
Concise proof:
Assume thatP.
If:Q,then (by:Q):P)itfollo wsthat:P.
Contradiction.
Exer cise3.9*Showthatfrom(P)Q))Pitfollo wsthatP.
Hint. Apply Proof byContradiction. (The implication rules donotsufﬁceforthis
admittedly exotic example.)
Disjunction
Introduction. Adisjunction follo wsfrom each ofitsdisjuncts.
Schematically:
Given: 
Thus_	.
Given: 	
Thus_	.
Safety isimmediate from thetruth tables.
Elimination. Youcanuseagiven_	bygiving twoproofs: oneemplo ying
,andoneemplo ying	.
Inaproof schema:
Given: _	,...
Tobeproved:
Proof:
Suppose 
Tobeproved:
Proof:...
Suppose 	
Tobeproved:
88 CHAPTER 3.THEUSEOFLOGIC:PROOF
Proof:...
Thus.
Example 3.10 WeshowthatfromP_Q;:Pitfollo wsthatQ.
Given:P_Q;:P.
Tobeproved:Q.
Proof:
SupposeP.Then fromPand:PwegetQ.
SupposeQ.ThenQholds byassumption.
ThereforeQ.
Exer cise3.11 Assume thatA;B;CandDarestatements.
1.From thegivenA)B_CandB):A,derivethatA)C.(Hint: use
theprevious example.)
2.From thegivenA_B)C_D,C)A,andB):A,derivethat
B)D.
Example 3.12 Here isaproof ofthesecond DeMor ganlaw(Theorem 2.10):
Given::(P_Q).
Tobeproved::P^:Q.
Detailed proof:
AssumeP.By_-introduction, itfollo wsthatP_Q.
This contradicts thegiven(i.e., wehaveanevident falsity here).
By:-introduction, weget:P.
Inasimilar way,:Qcanbederived.
By^-introduction, itfollo wsthat:P^:Q.
Theconcise version (norules mentioned):
AssumeP.Then afortioriP_Qholds, contradicting thegiven.
Thus,:P.Similarly ,:Qisderivable.
Thus,:P^:Qfollo ws.
3.3.RULESFORTHECONNECTIVES 89
Example 3.13 The follo wing example from thelistofequivalences inTheorem
(2.10) issostrange thatwegiveitjusttopreventyoufrom getting entangled.
Given::(P)Q)
Tobeproved:P^:Q
Proof: By^-introduction, itsufﬁces toprovebothPand:Q.
Tobeproved:P
Proof:(bycontradiction)
Suppose that:P.
Then ifPholds,Qfollo wsby:-elimination.
Thus (Deduction Rule), wegetthatP)Q.
However,thiscontradicts thegiven.
Tobeproved::Q
Proof:(by:introduction)
Assume thatQ.
Then, byatrivialapplication oftheDeduction RuleP)Qfollo ws.
(Trivial, since wedonotneedPatalltoconcludeQ.)
Again, thiscontradicts thegiven.
Note thattheruleforimplication introduction canbeused forreasoning bycases,
asfollo ws.BecauseP_:Pisalogical truth, itcanalwaysbeadded tothelistof
givens. IfthetwosubcasesPand:Pboth yield conclusionQ,then thisproves
Q.Here istheschema:
Given: ...
Tobeproved:Q
Proof:
SupposeP.
Tobeproved:Q.
Proof:...
Suppose:P.
Tobeproved:Q.
Proof:...
ThusQ.
This pattern ofreasoning isused inthefollo wing examples.
Example 3.14
90 CHAPTER 3.THEUSEOFLOGIC:PROOF
Letn2N.Tobeproved:n2 niseven.
Proof:
Assumeneven.
Thenn=2m,son2 n=(n 1)n=(2m 1)2m,
andthereforen2 niseven.
Assumenodd.
Thenn=2m+1,son2 n=(n 1)n=2m(2m+1),
andthereforen2 niseven.
Thusn2 niseven.
Exer cise3.15 Showthatforanyn2N,division ofn2by4givesremainder 0or
1.
Example 3.16 LetRbetheuniverseofdiscourse, andletP(x)bethefollo wing
property:
x=2Q^xp
22Q:
Inother words,xhaspropertyPiffxisirrational andxp
2isrational. Wewill
showthateitherp
2orp
2p
2haspropertyP.
Supposep
2p
22Q.
Then, sincep
2=2Q(Theorem 8.14), weknowthatp
2hasP.
Thus,P(p
2)_P(p
2p
2).
Supposep
2p
2=2Q.
Then, since(p
2p
2)p
2=p
2p
2p
2=p
22=22Q,weknowthatp
2p
2hasP.
Thus,P(p
2)_P(p
2p
2).
ThereforeP(p
2)_P(p
2p
2).
Exer cise3.17 Provetheremaining items ofTheorem 2.10 (p.45). Toprove
	means (i)toderive	from thegivenand(ii)toderivefrom thegiven	.
3.4 Rules fortheQuantiﬁers
The rules forthequantiﬁers come intwotypes: fortheunrestricted, andforthe
restricted versions. Those fortherestricted quantiﬁers canbederivedfrom the
others: seeExercise 3.32 p.102.
3.4.RULESFORTHEQUANTIFIERS 91
Universal Quantiﬁer
Introduction.
Whenaskedtoprovethat8xE(x),youshouldstartaproofbywritingtheObligatory
Sentence:
Supposethatcisanarbitrary object.
And youproceed toshowthatthisobject (about which youarenotsupposed to
assume extrainformation; inparticular ,itshould notoccur earlier intheargument)
hasthepropertyEinquestion.
Schematic form:
Given: ...
Tobeproved:8xE(x)
Proof:
Supposecisanarbitrary object
Tobeproved:E(c)
Proof:...
Thus8xE(x)
HereistheModiﬁcation suitable fortherestricted univer salquantiﬁer:
If8x2AE(x)istobeproved,youshouldstartproofthistimebythe,again,obliga-
tory:
SupposethatcisanyobjectinA.
And youproceed toshowthatthisobject (about which youonly assume thatit
belongs toA)hasthepropertyEinquestion.
Schematic form:
92 CHAPTER 3.THEUSEOFLOGIC:PROOF
Given: ...
Tobeproved:8x2AE(x)
Proof:
Supposecisanyobject inA
Tobeproved:E(c)
Proof:...
Thus8x2AE(x)
Arbitrary Objects. Youmay wonder what anarbitr aryobject is.Forinstance:
what isanarbitrary natural number? Isitlarge?small? prime? etc.What exactly
isanarbitrary object inAwhen thissethappens tobeasingleton? And: arethere
objects thatarenotarbitrary?
Answer: theterm ‘arbitrary object’ isonly used here asanaidtotheimagination;
itindicates something unspeciﬁed about which nospecial assumptions aremade.
Imagine thatyouallowsomeone else topick anobject, andthatyoudon’tcare
what choice ismade. ‘SupposecisanarbitraryA’isthesame assaying tothe
reader: ‘Suppose youprovide mewith amembercfrom thesetA;thechoice is
completely uptoyou.’
Often, auniversal quantiﬁer occurs infront ofanimplication. Therefore, youmay
ﬁndthefollo wing ruleschema useful.
Given: ...
Tobeproved:8x(P(x))Q(x)
Proof:
Supposecisanyobject such thatP(c)
Tobeproved:Q(c)
Proof:...
Thus8x(P(x))Q(x))
This ruleisderivable from theintroduction rules for8and).Note thatitisvery
similar totherecipe forrestricted8-introduction. Cf.Exercise 3.18.
Elimination.
Schematic form:
Given:8xE(x)
ThusE(t).
Here,tisanyobject ofyour choice.
3.4.RULESFORTHEQUANTIFIERS 93
That thisrule issafe isobvious: ifeverything satisﬁesE,then inparticular so
mustt.
Modiﬁcation suitable fortherestricted universal quantiﬁer ,inschematic form:
Given:8x2AE(x),t2A
ThusE(t).
Exer cise3.18 Show,using8-introduction andDeduction Rule: iffrom ;P(c)it
follo wsthatQ(c)(wherecsatisﬁesP,butisotherwise “arbitrary”), then from it
follo wsthat8x(P(x))Q(x)).
Existential Quantiﬁer
Introduction. Inorder toshowthat9xE(x),itsufﬁces tospecify oneobjecttfor
whichE(t)holds.
Schematic form:
Given:E(t)
Thus,9xE(x).
Here,tcanbeanything: anyexample satisfyingEcanbeused toshowthat
9xE(x).
Modiﬁcation suitable fortherestricted existential quantiﬁer ,inschematic form:
Given:E(t);t2A
Thus,9x2AE(x).
That these rules aresafegoes without saying.
Example-objects. Anobjecttsuch thatE(t)holds isanexample-object forE.
Thus, theintroduction ruleconcludes9xE(x)from theexistence ofanexample-
object.
However,itisnotalwayspossible orfeasible toproveanexistential statement by
exhibiting aspeciﬁc example-object, andthere are(famous) proofs ofexistential
statements thatdonotusethisrule.
Example 3.19 Atranscendent realisarealwhich isnotaroot ofapolynomial
with integercoefﬁcients (apolynomialf(x)=anxn+an 1xn 1+:::+a1x+a0,
where theaiareintegers andan6=0).
Byanargument establishing thatthesetofreals must bestrictly largerthan the
setofroots ofpolynomials with integercoefﬁcients, itisrelati velyeasy toshow
94 CHAPTER 3.THEUSEOFLOGIC:PROOF
thattranscendent reals exist. (Compare thereasoning about degrees ofinﬁnity in
Appendix 11.)
Still, itisnotimmediately clear howtogetfrom thisargument atanexample-
transcendent real. Inparticular ,itishard toseethateandaretranscendent reals.
Example 3.20 There isaproof that, inchess, either white hasawinning strate gy,
orblack hasastrate gywith which hecannot lose. However,theproof neither
informs youwhich ofthetwocases you’rein,nordescribes thestrate gyinausable
way.
Example 3.21 Foralogical example, look attheproof giveninExample 3.30
(p.101). What isprovedthere is9x:(x),but(although9introduction isused
some where) noexample-xforisexhibited. And, onthebasis ofthegiven
:8x(x),itisunrealistic toexpect such anexample.
Sometimes, itisknownonly thatanexample-object must bepresent among the
members ofacertain (ﬁnite) setbutitisimpossible topinpoint theright object.
Seethefollo wing example.
Example 3.22 Given:P(a)_P(b)
Tobeproved:9xP(x).
Proof: By_-elimination, itissufﬁcient toprove9xP(x)from bothP(a)and
P(b).Butthisisimmediate, by9introduction.
Example 3.23 Tomakeexample (3.22) more concrete, consider thefollo wing
question.
Isthere anirrational numberwith theproperty thatp
2isrational?
InExample 3.16 weestablished thateitherp
2orp
2p
2hasthisproperty .Thus,
theanswer tothequestion is‘yes’. Butthereasoning does notprovide uswith an
example ofsuch anumber .
Itisageneral feature ofProofs byContradiction ofexistential statements thatno
example objects fortheexistential willturnupintheproof, andthisisonereason
tostayawayfrom thisruleaslong asyoucaninsuch cases.
Elimination. (Note thesimilarity with the_-rule.)
3.4.RULESFORTHEQUANTIFIERS 95
Whenyouwanttousethat9xE(x)inanargumenttoprove,youwritetheObligatory
Sentence:
Supposethatcisanobjectthatsatis®es E.
However,thisisallthatyouaresupposed toassume aboutc.Now,youproceed to
proveonthebasis ofthisassumption.
Schematic form:
Given:9xE(x),...
Tobeproved:
Proof:
Supposecisanobject thatsatisﬁesE
Tobeproved:
Proof:...
Thus
Modiﬁcation suitable fortherestricted existential quantiﬁer:
Whenyouwanttousethat9x2AE(x)inanargumenttoprove,youwrite
SupposethatcisanobjectinAthatsatis®es E.
Again, thisisallthat you aresupposed toassume aboutc.Subsequently ,you
proceed toproveonthebasis ofthisassumption.
Schematic form:
Given:c2A;9xE(x),...
Tobeproved:
Proof:
Supposecisanobject inAthatsatisﬁesE
Tobeproved:
Proof:...
Thus
96 CHAPTER 3.THEUSEOFLOGIC:PROOF
3.5 Summary oftheProofRecipes
Here isasummary oftherules, with introduction rules onthelefthand side, and
elimination rules ontheright hand side. Proof byContradiction hasbeen putin
theElimination-column.
TheRecipesfor)IntroductionandElimination
Given: ...
Tobeproved:P)Q
Proof:
SupposeP
Tobeproved:Q
Proof:...
ThusP)Q.Given:P,P)Q,...
ThusQ
TheRecipesfor,IntroductionandElimination
Given: ...
Tobeproved:P,Q
Proof:
SupposeP
Tobeproved:Q
Proof:...
SupposeQ
Tobeproved:P
Proof:...
ThusP,Q.Given:P,P,Q,...
ThusQ
Given:Q,P,Q,...
ThusP
3.5.SUMMAR YOFTHEPROOFRECIPES 97
TheRecipesfor:IntroductionandElimination
Given: ...
Tobeproved::P
Proof:
SupposeP
Tobeproved:?
Proof:...
Thus:P.Given: ...
Tobeproved:P
Proof:
Suppose:P
Tobeproved:?
Proof:...
ThusP.
Given:P,:P
ThusQ.
TheRecipesfor^IntroductionandElimination
Given:P,Q
ThusP^Q.Given:P^Q
ThusP.
Given:P^Q
ThusQ.
TheRecipesfor_IntroductionandElimination
Given:P
ThusP_Q.
Given:Q
ThusP_Q.Given:P_Q,...
Tobeproved:R
Proof:
SupposeP
Tobeproved:R
Proof:...
SupposeQ
Tobeproved:R
Proof:...
ThusR.
98 CHAPTER 3.THEUSEOFLOGIC:PROOF
TheRecipesfor8IntroductionandElimination
Given: ...
Tobeproved:8xE(x)
Proof:
Supposecisanarbitrary object
Tobeproved:E(c)
Proof:...
Thus8xE(x)Given:8xE(x),...
ThusE(t).
Given: ...
Tobeproved:8x2AE(x)
Proof:
Supposecisanyobject inA
Tobeproved:E(c)
Proof:...
Thus8x2AE(x)Given:8x2AE(x),t2A,...
ThusE(t).
TheRecipesfor9IntroductionandElimination
Given:E(t),...
Thus9xE(x).Given:9xE(x),...
Tobeproved:P
Proof:
Supposecisanobject thatsatisﬁesE
Tobeproved:P
Proof:...
ThusP
3.6.SOMESTRATEGICGUIDELINES 99
Given:t2A,E(t),...
Thus9x2AE(x).Given:9x2AE(x),...
Tobeproved:P
Proof:
Supposecisanobject inAthatsatisﬁesE
Tobeproved:P
Proof:...
ThusP
3.6 Some Strategic Guidelines
Here arethemost important guidelines thatenable youtosolveaproof problem.
1.Donotconcentrate onthegiven,bytrying totransform thatintowhat isto
beproved.
2.Instead ,concentrate on(theform of)what istobeproved.
3.Anumber ofrules enable youtosimplify theproof problem. Forinstance:
When askedtoproveP)Q,addPtothegivensandtrytoproveQ.
(Deduction Rule).
When askedtoprove8xE(x),proveE(c)foranarbitrarycinstead
(8-introduction).
4.Only after youhavereduced theproblem asfaraspossible youshould look
atthegivensinorder toseewhich ofthem canbeused.
When oneofthegivensisoftheformP_Q,andRistobeproved,
makeacase distinction: ﬁrst addPtothegivensandproveR,next
addQtothegivensandproveR.
When oneofthegivensisoftheform9xE(x),andPistobeproved,
givetheobject thatsatisﬁesEaname, byaddingE(c)tothegivens.
Next,proveP.
5.Itisusually agood ideatomovenegations inwardasmuch aspossible before
attempting toapply:-introduction.
6.Stay awayfrom Proof byContradiction aslong aspossible.
100 CHAPTER 3.THEUSEOFLOGIC:PROOF
Example 3.24 Toshow:from8x(P(x))Q(x));9xP(x)itfollo wsthat9xQ(x).
Concise proof: Using thesecond given,assume thatxissuch thatP(x)holds.
Applying theﬁrst giventothisx,itfollo wsthatP(x))Q(x).Thus, wehave
thatQ(x).Conclusion:9xQ(x).
Exer cise3.25 Show:
1.from8x(P(x))Q(x));8xP(x)itfollo wsthat8xQ(x),
2.from9x(P(x))Q(x));8xP(x)itfollo wsthat9xQ(x).
What about: from9x(P(x))Q(x));9xP(x)itfollo wsthat9xQ(x)?
Exer cise3.26 From thegiven
8x9y(xRy);8x8y(xRy)yRx);8x8y8z(xRy^yRz)xRz);
derivethat8x(xRx).
Exer cise3.27 Giveproofs forthefollo wing:
1.From8x8y8z(xRy^yRz)xRz);8x:xRxitfollo wsthat8x8y(xRy)
:yRx),
2.From8x8y(xRy):yRx)itfollo wsthat8x:xRx,
3.From8x8y(xRy^x6=y):yRx)itfollo wsthat8x8y(xRy^yRx)
x=y),
4.From8x:xRx;8x8y(xRy)yRx);8x8y8z(xRy^yRz)xRz)
itfollo wsthat:9x9y(xRy).
Thefollo wing exercise isanexample onhowtomoveaquantiﬁer inapreﬁx of
quantiﬁers.
Exer cise3.28 Showthatfrom8y9z8xP(x;y;z)itfollo wsthat8x8y9zP(x;y;z).
3.6.SOMESTRATEGICGUIDELINES 101
Example 3.29 That arealfunctionfiscontinuous means that(cf.p.66), inthe
domain R,
8x8">09>08y(jx yj<)jf(x) f(y)j<"):
Uniform continuity offmeans
8">09>08x8y(jx yj<=)jf(x) f(y)j<"):
Compared with theﬁrst condition, thequantiﬁer8xhasmovedtwoplaces. Ac-
cording toExercise 3.28 (whereP(x;";)is8y(jx yj<)jf(x) f(y)j<
")),continuity isimplied byuniform continuity .(But, asyoumay know,theim-
plication intheother direction does nothold: there arecontinuous functions that
arenotuniformly so.)
Example 3.30
Given::8x(x).
Tobeproved:9x:(x).
Proof:
Weapply Proof byContradiction.
Assume, foracontradiction, that:9x:(x).
Wewillshowthat8x(x).
Supposexisarbitrary .
Toshowthat(x),weapply Proof byContradiction again.
Assume:(x).
Then9x:(x),andcontradiction with:9x:(x).
Thus(x).
Therefore8x(x),andcontradiction with:8x(x).
Thus9x:(x).
The concise andmore common wayofpresenting thisargument (that leavesfor
thereader toﬁndoutwhich rules havebeen applied andwhen) looks asfollo ws.
Proof.Assume that:9x:(x)andletxbearbitrary .
If:(x)istrue, then sois9x:(x),contradicting theassumption.
Thus, (x)holds; and, sincexwasarbitrary ,weconclude that8x(x).
However,thiscontradicts theﬁrstgiven;which provesthat, infact,9x:(x)must
betrue.
Exer cise3.31 Provetheother equivalences ofTheorem 2.40 (p.65). (Toprove
	means (i)deriving	from thegivenand(ii)derivingfrom thegiven
	.)
102 CHAPTER 3.THEUSEOFLOGIC:PROOF
Exer cise3.32 Derivetherules fortherestricted quantiﬁers from theothers, using
thefacts (cf.theremark preceding Example (2.45), page 66)that8x2AE(x)
isequivalent with8x(x2A)E(x)),and9x2AE(x)isequivalent with
9x(x2A^E(x)).
Withpractice, youwillstart toseethatitisoften possible tocondense proof steps.
Here aresome examples ofcondensed proof recipes:
Given:...
Tobeproved:8x(A(x))B(x)).
Proof:
Suppose cisanarbitraryobjectsuchthatA(c).
Tobeproved:B(c).
Proof:...
Thus8x(A(x))B(x)).
Given:...
Tobeproved:8x8yA(x;y).
Proof:
Suppose canddarearbitraryobjects.
Tobeproved:A(c;d).
Proof:...
Thus8x8yA(x;y).
Given:...
Tobeproved:8x2A8y2BR(x;y).
Proof:
Suppose c,darearbitraryobjectssuchthatA(c)andB(d).
Tobeproved:R(c;d).
Proof:...
Thus8x2A8y2BR(x;y).
3.7.REASONING ANDCOMPUT ATIONWITHPRIMES 103
Given:...
Tobeproved:8x8y(R(x;y))S(x;y)).
Proof:
Suppose c,darearbitraryobjectssuchthatR(c;d).
Tobeproved:S(c;d).
Proof:...
Thus8x8y(R(x;y))S(x;y)).
3.7 Reasoning andComputation with Primes
Inthissection wewill demonstrate theuseofthecomputer forinvestigating the
theory ofprime numbers. Forthis, weneed thecode forprime thatwasgivenin
Chapter 1.Itisrepeated here:
prime::Integer ->Bool
primen|n<1=error"notapositive integer"
|n==1=False
|otherwise =ldpn==nwhere
ldp=ldpfprimes
ldpf(p:ps)m|remmp==0=p
|p^2>m=m
|otherwise =ldpfpsm
primes=2:filterprime[3..]
Euclid (fourth century B.C.) provedthefollo wing famous theorem about prime
numbers.
Theor em3.33 There areinﬁnitely manyprime numbers.
Proof.Suppose there areonly ﬁnitely manyprime numbers, andp1;:::;pnisa
listofallprimes. Consider thenumberm=(p1p2pn)+1.Note thatmis
notdivisible byp1,fordividingmbyp1givesquotientp2pnandremainder 1.
Similarly ,division byp2;p3;:::alwaysgivesaremainder 1.
Thus, wegetthefollo wing:
104 CHAPTER 3.THEUSEOFLOGIC:PROOF
LD(m)isprime,
Foralli2f1;:::ng,LD(m)6=pi.
Thus, wehavefound aprime number LD(m)different from alltheprime numbers
inourlistp1;:::;pn,contradicting theassumption thatp1;:::;pnwasthefulllist
ofprime numbers. Therefore, there must beinﬁnitely manyprime numbers.
Exer cise3.34 LetA=f4n+3jn2Ng(See Example 5.90 below).Showthat
Acontains inﬁnitely manyprime numbers. (Hint: anyprime>2isodd, hence of
theform4n+1or4n+3.Assume thatthere areonly ﬁnitely manyprimes of
theform4n+3,sayp1;:::;pm.Consider thenumberN=4p1pm 1=
4(p1pm 1)+3.ArguethatNmust contain afactor4q+3,using thefact
that(4a+1)(4b+1)isoftheform4c+1.)
Usefilterprime[4*n+3|n<-[0..]]togenerate theprimes ofthis
form.
Euclid’ sproof suggests ageneral recipe forﬁnding bigger andbigger primes.
Finding examples ofverylargeprimes isanother matter ,ofcourse, forhowdo
youknowwhether aparticular natural number isalikelycandidate foracheck?
Example 3.35 Afamous conjecture made in1640 byPierre deFermat (1601–
1665) isthatallnumbers oftheform
22n+1
areprime. This holds forn=0;1;2;3;4,forwehave:220+1=21+1=3,
221+1=22+1=5,222+1=24+1=17,223+1=28+1=257,which is
prime, and224+1=216+1=65537 ,which isprime. Apparently ,thisisasfar
asFermat got.
OurHask ellimplementation ofprime allowsustorefute theconjecture forn=5,
using thebuilt-in function^forexponentiation. Weget:
TUOLP>prime(2^2^5+1)
False
This countere xample toFermat’ sconjecture wasdisco vered bythemathematician
L´eonard Euler (1707–1783) in1732.
TheFrench priest andmathematician Marin Mersenne (1588–1647; Mersenne was
apenpalofDescartes) found some largeprime numbers byobserving thatMn=
2n 1sometimes isprime whennisprime.
3.7.REASONING ANDCOMPUT ATIONWITHPRIMES 105
Exer cise3.36 Itisnotverydifﬁcult toshowthatifniscomposite,Mn=2n 1is
composite too.Showthis. (Hint: Assume thatn=abandprovethatxy=2n 1
forthenumbersx=2b 1andy=1+2b+22b++2(a 1)b).
Butwhennisprime, there isachance that2n 1isprime too. Examples are
22 1=3,23 1=7,25 1=31.Such primes arecalled Mersenne primes.
Example 3.37 Letususethecomputer toﬁndonemore Mersenne prime. Putthe
procedure prime inaﬁleandload it.Next,weuse^forexponentiation tomakea
newMersenne guess, asfollo ws:
TUOLP>prime5
True
TUOLP>prime(2^5-1)
True
TUOLP>2^5-1
31
TUOLP>prime(2^31-1)
True
TUOLP>2^31-1
2147483647
TUOLP>
Itmay interest youtoknowthatthefactthat231 1isaprime wasdisco vered by
Euler in1750. Using acomputer ,thisfactisabiteasier tocheck.
Wehavealready seen howtogenerate prime numbers inHask ell(Examples 1.22
and1.23). Wewillnowpresent anelegant alternati ve:alazy listimplementation
oftheSieveofEratosthenes .Theidea ofthesieveisthis. Start with thelistofall
natural numbers >2:
2;3;4;5;6;7;8;9;10;11;12;13;14;15;16;17;18;19;20;
21;22;23;24;25;26;27;28;29;30;31;32;33;34;35;
36;37;38;39;40;41;42;43;44;45;46;47;48;:::
Intheﬁrstround, mark2(theﬁrstnumber inthelist)asprime, andmark allmul-
tiples of2forremo valintheremainder ofthelist(marking forremo valindicated
byover-lining):
2;3;4;5;6;7;8;9;10;11;12;13;14;15;16;17;18;19;20;
21;22;23;24;25;26;27;28;29;30;31;32;33;34;35;
36;37;38;39;40;41;42;43;44;45;46;47;48;:::
106 CHAPTER 3.THEUSEOFLOGIC:PROOF
Inthesecond round, mark3asprime, andmark allmultiples of3forremo valin
theremainder ofthelist:
2;3;4;5;6;7;8;9;10;11;12;13;14;15;16;17;18;19;20;
21;22;23;24;25;26;27;28;29;30;31;32;33;34;35;
36;37;38;39;40;41;42;43;44;45;46;47;48;::::::
Inthethird round, mark5asprime, andmark allmultiples of5forremo valinthe
remainder ofthelist:
2;3;4;5;6;7;8;9;10;11;12;13;14;15;16;17;18;19;20;
21;22;23;24;25;26;27;28;29;30;31;32;33;34;35;
36;37;38;39;40;41;42;43;44;45;46;47;48;:::
And soon. Aremarkable thing about theSieveisthat theonly calculation it
involvesiscounting. Ifthe3-folds aretobemark edinthesequence ofnatural
numbers starting from3,walkthrough thelistwhile counting 1;2;3andmark the
number 6,nextwalkonwhile counting 1;2;3andmark thenumber 9,andsoon.
Ifthe5-folds aretobemark edinthesequence thenatural numbers starting from
5,walkonthrough thesequence while counting 1;2;3;4;5andmark thenumber
10,nextwalkonwhile counting 1;2;3;4;5andmark thenumber 15,andsoon.
IntheHask ellimplementation wemark numbers inthesequence [2..] forre-
movalbyreplacing them with0.When generating thesieve,these zeros are
skipped.
sieve::[Integer] ->[Integer]
sieve(0:xs)=sievexs
sieve(n:xs)=n:sieve(markxs1n)
where
mark::[Integer] ->Integer ->Integer ->[Integer]
mark(y:ys)km|k==m=0:(markys1m)
|otherwise =y:(markys(k+1)m)
primes::[Integer]
primes=sieve[2..]
This gives:
TUOLP>primes
3.7.REASONING ANDCOMPUT ATIONWITHPRIMES 107
[2,3,5,7,11,13,17,19,23,29,31 ,37,41,43,47,53,59,61,67,71,73,79,
83,89,97,101,103,107,109,113, 127,131,137,139,149,151,157,163,
167,173,179,181,191,193,197,1 99,211,223,227,229,233,239,241,251,
257,263,269,271,277,281,283,2 93,307,311,313,317,331,337,347,349,
353,359,367,373,379,383,389,3 97,401,409,419,421,431,433,439,443,
449,457,461,463,467,479,487,4 91,499,503,509,521,523,541,547,557,
563,569,571,577,587,593,599,6 01,607,613,617,619,631,641,643,647,
653,659,661,673,677,683,691,7 01,709,719,727,733,739,743,751,757,
761,769,773,787,797,809,811,8 21,823,827,829,839,853,857,859,863,
877,881,883,887,907,911,919,9 29,937,941,947,953,967,971,977,983,
991,997,1009,1013,1019,1021,1 031,1033,1039,1049,1051,1061,1063,
{Interrupted!}
Does thisstream everdryup?Weknowforsure thatitdoesn’ t,because ofEuclid’ s
proof.
Itispossible, bytheway,totakeaﬁnite initial segment ofaninﬁnite Hask elllist.
This isdone with thebuiltinfunctiontake ,asfollo ws:
TUOLP>take100primes
[2,3,5,7,11,13,17,19,23,29,31 ,37,41,43,47,53,59,61,67,71,73,79,
83,89,97,101,103,107,109,113, 127,131,137,139,149,151,157,163,
167,173,179,181,191,193,197,1 99,211,223,227,229,233,239,241,251,
257,263,269,271,277,281,283,2 93,307,311,313,317,331,337,347,349,
353,359,367,373,379,383,389,3 97,401,409,419,421,431,433,439,443,
449,457,461,463,467,479,487,4 91,499,503,509,521,523,541]
TUOLP>
Exer cise3.38 Aslightly faster waytogenerate theprimes isbystarting outfrom
theoddnumbers. Thestepping andmarking willworkasbefore, forifyoucount
kpositions intheoddnumbers starting from anyoddnumbera=2n+1,youwill
moveontonumber (2n+1)+2k,andifaisamultiple ofk,then soisa+2k.
Implement afunctionfasterprimes ::[Integer] using thisidea. The odd
natural numbers, starting from3,canbegenerated asfollo ws:
oddsFrom3 ::[Integer]
oddsFrom3 =3:map(+2)oddsFrom3
Still faster istoclean upthelistateverystep, byremoving multiples from thelist
asyougoalong. Wewillcome back tothismatter inSection 10.1.
108 CHAPTER 3.THEUSEOFLOGIC:PROOF
Exer cise3.39 Write aHask ellprogram torefute thefollo wing statement about
prime numbers: ifp1;:::;pkarealltheprimes<n,then(p1pk)+1isa
prime.
Acomputer isauseful instrument forrefuting guesses orforchecking particular
cases. Butif,instead ofchecking aguess foraparticular case, youwanttocheck
thetruth ofinteresting generalstatements itisoflimited help. Youcanusethe
functionmersenne togenerate Mersenne primes, butthecomputer will nottell
youwhether thisstream willdryupornot...
mersenne =[(p,2^p-1)|p<-primes, prime(2^p-1)]
This iswhat acalltomersenne gives:
TUOLP>mersenne
[(2,3),(3,7),(5,31),(7,127),( 13,8191),(17,131071),(19,524287),
(31,2147483647)
Ifyouareinterested inhowthisgoes on,youshould check outGIMPS (“Great
Internet Mersenne Prime Search”) ontheInternet. Togenerate slightly more in-
formation, wecandeﬁne:
notmersenne =[(p,2^p-1)|p<-primes, not(prime(2^p-1)) ]
This gives:
TUOLP>notmersenne
[(11,2047),(23,8388607),(29,5 36870911),(37,137438953471),
(41,2199023255551),(43,879609 3022207),(47,140737488355327),
(53,9007199254740991),(59,576 460752303423487)
Theexample may servetoillustrate thelimits ofwhat youcandowith acomputer
when itcomes togenerating mathematical insight. Ifyou makeaninteresting
mathematical statement, there arethree possibilities:
3.7.REASONING ANDCOMPUT ATIONWITHPRIMES 109
Yousucceed inproving it.This establishes thestatement asatheorem.
Yousucceed indispro ving it(with orwithout thehelp ofacomputer). This
establishes thestatement asarefuted conjecture.
Neither oftheabove.This may indicate thatyouhaveencountered anopen
problem inmathematics. Itmay also indicate, ofcourse, thatyouhaven’t
been cleverenough.
Example 3.40 Here isanexample ofanopen problem inmathematics:
Arethere inﬁnitely manyMersenne primes?
Itiseasy toseethatEuclid’ sproof strate gywillnotworktotackle thisproblem.
Theassumption thatthere isaﬁnite listp1;:::;pnofMersenne primes does yield
alargerprime, butnothing guarantees thatthislargerprime number isagain ofthe
form2m 1.
Mersenne primes arerelated toso-called perfect numbers. Aperfect number isa
numbernwith thecurious property thatthesum ofallitsdivisors equals 2n,or,
inother words, thesum ofallproper divisors ofnequalsn(wecalladivisordof
nproper ifd<n).Thesmallest perfect number is6,foritsproper divisors are
1;2and3,and1+2+3=6,anditiseasy tocheck that1;2;3;4and5arenot
perfect.
Euclid provedthatif2n 1isprime, then2n 1(2n 1)isperfect. Examples of
perfect numbers found byEuclid’ srecipe are:2(22 1)=6,22(23 1)=28,
24(25 1)=496.
Exer cise3.41 Howwould yougoabout yourself toprovethefactEuclid proved?
Here isahint: if2n 1isprime, then theproper divisors of2n 1(2n 1)are
1;2;22;:::;2n 1;2n 1;2(2n 1);22(2n 1);:::;2n 2(2n 1):
Here isafunction forgenerating thelistofproper divisors ofanatural number .
This isnotanefﬁcient waytogenerate proper divisors, butnevermind.
pdivisors ::Integer ->[Integer]
pdivisors n=[d|d<-[1..(n-1)], remnd==0]
110 CHAPTER 3.THEUSEOFLOGIC:PROOF
Withthisitiseasy tocheck that8128 isindeed aperfect number:
TUOLP>pdivisors 8128
[1,2,4,8,16,32,64,127,254,508 ,1016,2032,4064]
TUOLP>sum(pdivisors 8128)
8128
Evenmore spectacularly ,wehave:
TUOLP>prime(2^13-1)
True
TUOLP>2^12*(2^13-1)
33550336
TUOLP>pdivisors 33550336
[1,2,4,8,16,32,64,128,256,512 ,1024,2048,4096,8191,16382,32764,
65528,131056,262112,524224,10 48448,2096896,4193792,8387584,
16775168]
TUOLP>sum[1,2,4,8,16,32,64,128,256,512,1 024,2048,4096,8191,16382,
32764,65528,131056,262112,524 224,1048448,2096896,4193792,8387584,
16775168]
33550336
TUOLP>
Prime pairsarepairs(p;p+2)where bothpandp+2areprime. Prime pairs can
begenerated asfollo ws:
primePairs ::[(Integer,Integer)]
primePairs =pairsprimes
where
pairs(x:y:xys) |x+2==y=(x,y):pairs(y:xys)
|otherwise =pairs(y:xys)
This gives:
TUOLP>take50primePairs
take50primePairs
[(3,5),(5,7),(11,13),(17,19), (29,31),(41,43),(59,61),(71,73),
(101,103),(107,109),(137,139) ,(149,151),(179,181),(191,193),
(197,199),(227,229),(239,241) ,(269,271),(281,283),(311,313),
(347,349),(419,421),(431,433) ,(461,463),(521,523),(569,571),
(599,601),(617,619),(641,643) ,(659,661),(809,811),(821,823),
3.8.FURTHERREADING 111
(827,829),(857,859),(881,883) ,(1019,1021),(1031,1033),
(1049,1051),(1061,1063),(1091 ,1093),(1151,1153),(1229,1231),
(1277,1279),(1289,1291),(1301 ,1303),(1319,1321),(1427,1429),
(1451,1453),(1481,1483),(1487 ,1489)]
TUOLP>
Does thisstream everdryup?Wedon’tknow,forthequestion whether there are
inﬁnitely manyprime pairs isanother open problem ofmathematics.
Exer cise3.42 Aprime triple isatriple(p;p+2;p+4)withp;p+2;p+4all
prime. Theﬁrstprime triple is(3;5;7).Arethere anymore? Note thatinstructing
thecomputer togenerate them isnohelp:
primeTriples ::[(Integer,Integer,Integer)]
primeTriples =triples primes
where
triples (x:y:z:xyzs)
|x+2==y&&y+2==z=(x,y,z) :triples (y:z:xyzs)
|otherwise =triples (y:z:xyzs)
Weget:
TUOLP>primeTriples
[(3,5,7)
Still, wecanﬁndouttheanswer ...How?
Exer cise3.43 Consider thefollo wing call:
TUOLP>filterprime[p^2+2|p<-primes]
[11
Canyouprovethat11istheonly prime oftheformp2+2,withpprime?
3.8 Further Reading
Thedistinction between ﬁnding meaningful relationships inmathematics onone
hand andproving ordispro ving mathematical statements ontheother isdrawn
112 CHAPTER 3.THEUSEOFLOGIC:PROOF
veryclearly inPolya [Pol57 ].Agood introduction tomathematical reasoning is
[Ecc97 ].More detail onthestructure ofproofs isgivenbyVelleman [Vel94].
Automated proof checking inHask ellistreated in[HO00 ].Anall-time classic in
thepresentation ofmathematical proofs is[Euc56 ].
Chapter4
Sets,TypesandLists
Preview
The chapter introduces sets, notbymeans ofadeﬁnition butbyexplaining why
‘set’ isaprimiti venotion, discusses theprocess ofsetformation, andexplains
some important operations onsets.
Talking about setscaneasily lead toparadox, butsuch paradox escanbeavoided
either byalwaysforming setsonthebasis ofapreviously givenset,orbyimposing
certain typing constraints ontheexpressions oneisallowed touse. Section 4.2
explains howthisrelates tofunctional programming.
The endoftheChapter discusses various waysofimplementing sets using list
representations. Thechapter presents ample opportunity toexercise your skills in
writing implementations forsetoperations andforproving things about sets.
moduleSTAL
where
importList
importDB
113
114 CHAPTER 4.SETS,TYPESANDLISTS
4.1 Let’sTalkAbout Sets
Remarkably ,itisnotpossible togiveasatisf actory deﬁnition ofthenotion ofa
set.There areseveralaxiomatic approaches tosettheory; thestandard one(that is
implicitly assumed throughout mathematics) isduetoZermelo andFraenk eland
dates from thebeginning ofthe20th century .
Axioms vs.Theor ems, Primiti vevs.Deﬁned Notions. Thetruth ofamathemati-
calstatement isusually demonstrated byaproof. Most proofs useresults thathave
been provedearlier .Itfollo wsthatsome truths must begivenoutright without
proof. These arecalled axioms .The choice ofaxioms often israther arbitrary .
Criteria canbesimplicity orintuiti veevidence, butwhat must beconsidered an
axiom canalso bedictated bycircumstance (forinstance, aproof cannot begiven
within thegivenconte xt,butinanother conte xtaproof would bepossible). In
thepresent conte xt,weshall accept some oftheZermelo-Fraenk elaxioms, aswell
assome fundamental properties ofthenumber systems, such astheprinciple of
mathematical induction forN(seeSections 7.1and11.1).
Statements thathavebeen provedarecalled theor emsiftheyareconsidered tobe
ofintrinsic value, andlemmas iftheyareoften used inproving theorems.
Notions aresplit upintwoanalogous categories. Their meaning may havebeen
explained bydeﬁnitions interms ofother notions. However,theprocess ofdeﬁning
notions must haveabeginning some where. Thus, theneed fornotions thatare
primitive ,i.e.,undeﬁned.
Forinstance, weshall consider asundeﬁned here thenotions ofsetandnatural
number .Giventhenotion ofaset,thatofafunction canbedeﬁned. However,ina
conte xtthatisnotset-theoretic, itcould well beanundeﬁned notion.
Geor gCantor (1845-1915), thefounding father ofsettheory ,gavethefollo wing
description.
The Compr ehension Principle. Asetisacollection intoawhole ofdeﬁnite ,dis-
tinct objects ofourintuition orofourthought. Theobjects arecalled theelements
(member s)oftheset.
Usually ,theobjects thatareused aselements ofasetarenotsetsthemselv es.To
handle setsofthiskind isunproblematic. Butitisnotexcluded atallthatmembers
aresets. Thus, inpractice, youcanencounter setsofsetsof...sets.
Notation. Iftheobjectaismember ofthesetA,thisisdenoted bya2A,or
sometimes byA3a.Ifaisnotamember ofA,weexpress thisasa=2A,or
4.1.LET'STALKABOUTSETS 115
A63a.
Example: 02N,1
262N,1
22Q.
Asetiscompletely determined byitselements: thisisthecontent ofthefollo wing
Principle ofExtensionality .Setsthathave thesame elements areequal.
Symbolically ,forallsetsAandB,itholds that:
8x(x2A,x2B)=)A=B:
Theconverseofthis(that equal setshavethesame elements) istrivial. ThePrin-
ciple ofExtensionality isoneofZermelo’ saxioms.
Figure 4.1:Asetwith aproper subset.
Subsets. ThesetAiscalled asubset ofthesetB,andBasuper setofA;notations:
AB,andBA,ifeverymember ofAisalsoamember ofB.Insymbols:
8x(x2A=)x2B):
IfABandA6=B,thenAiscalled aproper subset ofB.
Forinstance,f0;2gisaproper subset ofN,andthesetofallmultiples of4isa
proper subset ofthesetofallevenintegers.
Note thatA=BiffABandBA.ToshowthatA6=Bwetherefore either
havetoﬁndanobjectcwithc2A;c=2B(inthiscasecisawitness ofA6B),
oranobjectcwithc=2A;c2B(inthiscasecisawitness ofB6A).Aproof of
A=Bwillingeneral havethefollo wing form:
116 CHAPTER 4.SETS,TYPESANDLISTS
Given:...
Tobeproved:A=B.
Proof:
:LetxbeanarbitraryobjectinA.
Tobeproved:x2B.
Proof:
...
Thusx2B.
:LetxbeanarbitraryobjectinB.
Tobeproved:x2A.
Proof:
...
Thusx2A.
ThusA=B.
Warning .Sometimes, ABiswritten asAB.Other authors useAB
toindicate thatAisaproper subset ofB.Inthisbook wewill stick to,and
toexpress thatAisproperly included inBwewillalwaysusetheconjunction of
ABandA6=B.
2versus.Beginners often confuse2and,butthese relations arevery
different. Forinstance,ABimplies thatAandBareboth sets, whereas
a2Bonly implies thatBisaset.Assuming thatnumbers arenotsets, wehave
that12f0;1;2gand16f0;1;2g(provided thelatter makessense); whereas
f1gf0;1;2g,andf1g62f0;1;2g.
Theor em4.1ForallsetsA;B;C,wehave that:
1.AA (reﬂexivity),
2.AB^BA=)A=B (antisymmetry),
3.AB^BC=)AC (transitivity).
Proof.1.
Tobeproved:AA,i.e.,8x(x2A)x2A).
Proof:
Supposecisanyobject inA.Thenc2A.
Therefore8x(x2A)x2A),i.e.,AA.
4.1.LET'STALKABOUTSETS 117
2.This isExtensionality —beitinasome what different guise.
3.
Tobeproved:AB^BC)AC.
Proof:
SupposeABandBC.
Tobeproved:AC.
Proof:
Supposecisanyobject inA.
Then byAB.c2B,andbyBC,c2C.
Thus8x(x2A)x2C),i.e.,AC.
ThusAB^BC)AC.
Remark. Note thattheconverseofantisymmetry alsoholds for.Inother words,
ifA;Baresets, thenA=BiffABandBA.Itisbecause ofantisymmetry
oftherelation thataproof thattwosetsA;Bareequal canconsist ofthetwo
subproofs mentioned above:theproof ofABandtheproof ofBA.
Exer cise4.2Showthatthesuperset relation also hastheproperties ofTheorem
4.1,i.e.,showthatisreﬂexive,antisymmetric andtransiti ve.
Enumeration. Asetthathasonly fewelementsa1;:::;ancanbedenoted as
fa1;:::;ang:
Extensionality ensures thatthisdenotes exactly oneset,forbyextensionality the
setisuniquely determined bythefactthatithasa1;:::;anasitsmembers.
Note thatx2fa1;:::;angiffx=a1__x=an.
Example 4.3f0;2;3gisthesettheelements ofwhich are0,2and3.Weclearly
havethat32f0;2;3g,andthat462f0;2;3g.
Note thatf0;2;3g=f2;3;0g=f3;2;2;0g.Indeed, these setshavethesame
elements. Thus:
Orderandrepetition inthisnotation areirrelevant.
Exer cise4.4Show,thatff1;2g;f0g;f2;1gg=ff0g;f1;2gg.
118 CHAPTER 4.SETS,TYPESANDLISTS
Ananalogue totheenumeration notation isavailable inHask ell,where [n::m]can
beused forgenerating alistofitems fromntom.This presupposes thatnandm
areofthesame type, andthatenumeration makessense forthattype. (Technically ,
thetype hastobeoftheclassOrd;see4.2below.)
Sets thathavemanyelements, inparticular ,inﬁnite sets, cannot begiveninthis
way,unless there issome system intheenumeration oftheir elements. Forin-
stance, N=f0;1;2;:::gisthesetofnatural numbers, andf0;2;4;:::gistheset
ofevennatural numbers.
Abstraction. IfP(x)isacertain property ofobjectsx,theabstr action
fxjP(x)g (4.1)
denotes thesetofthingsxthathavepropertyP.
Thus, foreveryparticular objecta,theexpression
a2fxjP(x)g
isequivalent with
P(a):
ByExtensionality ,ourtalking about thesetofxsuch thatP(x)isjustiﬁed.
Theabstraction notation binds thevariablex:thesetfxjP(x)ginnowayde-
pends onx;fxjP(x)g=fyjP(y)g.
Usually ,thepropertyPwillapply totheelements ofapreviously givensetA.In
thatcase
fx2AjP(x)g
denotes thesetofthose elements ofAthathavepropertyP.Forinstance, theset
ofevennatural numbers canbegivenby
fn2Njniseveng:
This wayofdeﬁning aninﬁnite setcanbemimick edinfunctional programming
bymeans ofso-called listcompr ehensions ,asfollo ws:
naturals =[0..]
evens1=[n|n<-naturals ,evenn]
4.1.LET'STALKABOUTSETS 119
Note thesimilarity betweenn<-naturals andn2N,which isofcourse in-
tended bytheHask elldesign team. Theexpression evennimplements theprop-
erty‘niseven’,sowefollo wtheabstraction notation from settheory almost tothe
letter .Here istheimplementation oftheprocess thatgenerates theoddnumbers:
odds1=[n|n<-naturals ,oddn]
Back tothenotation ofsettheory .Avariation ontheabovenotation forabstraction
looks asfollo ws.Iffisanoperation, then
ff(x)jP(x)g
denotes thesetofthings oftheformf(x)where theobjectxhasthepropertyP.
Forinstance,
f2njn2Ng
isyetanother notation forthesetofevennatural numbers.
And again, wehaveacounterpart infunctional programming. Here itis:
evens2=[2*n|n<-naturals ]
Still, thesimilarity innotation between theformal deﬁnitions andtheir imple-
mentations should notblind ustosome anno ying divergences between theory and
practice. Thetwonotations
fn2jn2f0;:::;999gg
and
fn2jn2N^n<1000g
areequivalent. Theyaremerely twowaysofspecifying thesetoftheﬁrst1000
square numbers. ButtheHask ellcounterparts beha veverydifferently:
small_squares1 =[n^2|n<-[0..999] ]
120 CHAPTER 4.SETS,TYPESANDLISTS
Acalltothefunctionsmall_squares1 indeed produces alistoftheﬁrstthousand
square numbers, andthen terminates. Note theuseof[0..999] toenumerate a
ﬁnite list.Notsowith thefollo wing:
small_squares2 =[n^2|n<-naturals ,n<1000]
Thewaythisisimplemented, n<-naturals generates theinﬁnite listofnatu-
ralnumbers intheir natural order ,andn<1000 tests each number asitisgen-
erated fortheproperty ofbeing less than1000 .The numbers that satisfy the
testaresquared andputintheresult list. Unlik etheprevious implementation
small_squares1 ,thefunctionsmall_squares2 willneverterminate.
Example 4.5(*The Russell Paradox) Itisnottruethattoevery propertyEthere
corresponds asetfxjE(x)gofallobjects thathaveE.The simplest example
wasgivenbyBertrand Russell (1872–1970). Consider theproperty ofnothaving
yourself asamember .
Most setsthatyouarelikelytoconsider havethisproperty: thesetofalleven
natural numbers isitself notanevennatural number ,thesetofallintegers isitself
notaninteger,andsoon.Call such sets‘ordinary’. Thecorresponding abstraction
isR=fxjx62xg.
Itturns outthatthequestion whether thesetRitself isordinary ornotisimpossible
toanswer .ForsupposeR2R,thatis,supposeRisanordinary set. Ordinary
setsarethesetsthatdonothavethemselv esasamember ,soRdoes nothave
itself asamember ,i.e.,R=2R.Suppose, onthecontrary ,thatR=2R,thatis,R
isanextraordinary set.Extraordinary setsarethesetsthathavethemselv esasa
member ,soRhasitself asamember ,i.e.,R2R.
IfRwere alegitimate set,thiswould unavoidably lead ustotheconclusion that
R2R()R62R;
which isimpossible.
Youdonothavetobeafraid forparadox essuch astheRussell paradox ofExample
4.5. Only properties thatyouareunlik elytoconsider giverisetoproblems. In
particular ,ifyourestrict yourself toforming setsonthebasis ofapreviously given
setA,bymeans oftherecipe
fx2AjE(x)g;
4.2.PARADOXES,TYPESANDTYPECLASSES 121
noproblems willeverarise.
Example 4.6There isnosetcorresponding tothepropertyF(x):there isno
inﬁnite sequencex=x03x13x23:::.Toseethis, assume tothecontrary
thatFissuch aset.AssumeF2F.This impliesF3F3F3F:::,sobythe
deﬁning property ofF,F=2F.AssumeF=2F.Then bythedeﬁning property of
F,there isaninﬁnite sequenceF=x03x13x23:::.Nowtaketheinﬁnite
sequencex13x23:::.Bythedeﬁning property ofF,x1=2F,contradicting
F=x03x1.
Exer cise4.7*Assume thatAisasetofsets. Showthatfx2Ajx62xg62A.
Itfollo wsfrom Exercise (4.7) thateverysetAhasasubsetBAwithB=2A.
TakeB=fx2Ajx=2xg.
4.2 Paradoxes, Types andTypeClasses
Itisawell-kno wnfactfrom thetheory ofcomputation thatthere isnogeneral
testforchecking whether agivenprocedure terminates foraparticular input. The
halting problem isundecidable. Intuiti vely,thereason forthisisthattheexistence
ofanalgorithm (aprocedure which alwaysterminates) forthehalting problem
would lead toaparadox verysimilar totheRussell paradox.
Here isasimple example ofaprogram forwhich noproof oftermination exists:
run::Integer ->[Integer]
runn|n<1=error"argument notpositive"
|n==1=[1]
|evenn=n:run(divn2)
|oddn=n:run(3*n+1)
This gives,e.g.:
STAL>run5
[5,16,8,4,2,1]
STAL>run6
[6,3,10,5,16,8,4,2,1]
STAL>run7
[7,22,11,34,17,52,26,13,40,20 ,10,5,16,8,4,2,1]
122 CHAPTER 4.SETS,TYPESANDLISTS
Wesaythataprocedure diver geswhen itdoes notterminate orwhen itaborts with
anerror .Stipulating divergence inHask ellisdone bymeans ofthepredeclared
functionundefined ,which causes anerror abortion, justlikeerror .Infact,
Hask ellhasnowaytodistinguish between divergence anderror abortion.
Nowsupposehalts canbedeﬁned. Then deﬁne theprocedure funny ,interms of
halts ,asfollo ws(thepartofalineafter--isacomment; inthiscase awarning
thatfunny isnogood asHask ellcode):
funnyx|haltsxx=undefined --Caution: this
|otherwise =True --willnotwork
What about thecallfunnyfunny ?Does thisdivergeorhalt?
Supposefunnyfunny does nothalt. Then bythedeﬁnition offunny ,wearein
theﬁrstcase. This isthecase where theargument offunny ,when applied toitself,
halts. Buttheargument offunny isfunny .Therefore, funnyfunny does halt,
andcontradiction.
Supposefunnyfunny does halt. Then bythedeﬁnition offunny ,weareinthe
second case. This isthecase where theargument offunny ,when applied toitself,
does nothalt. Buttheargument offunny isfunny .Therefore, funnyfunny
does nothalt, andcontradiction.
Thus, there issomething wrong with thedeﬁnition offunny .Theonly peculiarity
ofthedeﬁnition istheuseofthehalts predicate. This showsthatsuch ahalts
predicate cannot beimplemented.
Itshould beclear thatfunny isarather close analogue totheRussell setfxj
x=2xg.Such paradoxical deﬁnitions areavoided infunctional programming by
keeping track ofthetypes ofallobjects andoperations.
Aswehaveseen, newtypes canbeconstructed from old. Derivedtypes arepairs
ofintegers, lists ofcharacters (orstrings), lists ofreals, andsoon.Howdoes this
type discipline avoidthehalting paradox? Consider thedeﬁnition offunny .It
makesacalltohalts .What isthetype ofhalts ?Theprocedure halts takes
asﬁrstargument aprocedure, sayproc ,andassecond argument anargument to
thatprocedure, sayarg.This means thatthetwoarguments ofhalts havetypes
a->banda,respecti vely.andthat(procarg) ,theresult ofapplyingproc to
arg,hastypeb.Butthismeans thattheapplication haltsxxinthedeﬁnition of
funny isill-formed, foraswehaveseen thetypes ofthetwoarguments tohalts
must bedifferent, sothearguments themselv esmust bedifferent.
4.2.PARADOXES,TYPESANDTYPECLASSES 123
Foranother example, takethebuilt-inelem operation ofHask ellwhich checks
whether anobject iselement ofalist. This operation isasclose asyoucanget
inHask elltothe‘2’relation ofsettheory .Theoperation expects thatifitsﬁrst
argument isofcertain typea,then itssecond argument isoftype ‘listovera’.
Thus, inHask ell,thequestion whetherR2Rdoes notmakesense, foranyR:wit-
ness thefollo wing interaction. Inthetranscript, Prelude> istheHask ellprompt
when nouser-deﬁned ﬁles areloaded.
Prelude> elem'R'"Russell"
True
Prelude> elem'R'"Cantor"
False
Prelude> elem"Russell" "Cantor"
ERROR:Typeerrorinapplication
***expression :"Russell" `elem`"Cantor"
***term :"Russell"
***type :String
***doesnotmatch:Char
Prelude>
Youwould expect from thisthatelem hastypea->[a]->Bool ,forittakes
anobject ofanytypeaasitsﬁrstargument, then alistovertypea,anditreturns a
verdict ‘true’ or‘false’, i.e.,anobject oftypeBool .
Almost, butnotquite. The snag isthatinorder tocheck ifsome thingxisan
element ofsome listofthingsl,onehastobeable toidentify things ofthetype of
x.Theobjects thatcanbeidentiﬁed aretheobjects ofthekinds forwhich equality
andinequality aredeﬁned. Texts,potentially inﬁnite streams ofcharacters, arenot
ofthiskind. Also, theHask elloperations themselv esarenotofthiskind, forthe
Hask elloperations denote computation procedures, andthere isnoprincipled way
tocheck whether twoprocedures perform thesame task.
Forsuppose there were atestforequality onprocedures (implemented functions).
Then thefollo wing would beatestforwhether aprocedure fhalts oninputx(here
/=denotes inequality):
haltsfx=f/=g
wheregy|y==x=undefined --Caution: this
|otherwise =fy --willnotwork
124 CHAPTER 4.SETS,TYPESANDLISTS
Thewhere construction isused todeﬁne anauxiliary functiongbystipulating
thatgdivergesoninputxandonallother inputs beha vesthesame asf.Ifgis
notequal tof,then thedifference must beinthebeha viour forx.Since wehave
stipulated thatgdivergesforthisinput, weknowthatfhalts onx.If,ontheother
hand,gandfareequal, then inparticular fandgbeha vethesame oninputx,
which means thatfdivergesonthatinput.
Thetypes ofobject forwhich thequestion ‘equal ornot’makessense aregrouped
intoacollection oftypes called aclass .This class iscalledEq.Hask elluses==
forequality and/=forinequality ofobjects oftypes intheEqclass.
Using thehugs command :ttoaskforthetype ofadeﬁned operation, wegetfor
elem :
Prelude> :telem
elem::Eqa=>a->[a]->Bool
Prelude>
Inthepresent case, thetype judgment means thefollo wing. Ifaisatype for
which equality isdeﬁned (or,ifaisintheEqclass), thena->[a]->Bool is
anappropriate type forelem .Inother words: foralltypesaintheEqclass itholds
thatelem isoftypea->[a]->Bool .
This says thatelem canbeused tocheck whether anintegerisamember ofalistof
integers, acharacter isamember ofastring ofcharacters, astring ofcharacters is
amember ofalistofstrings, andsoon.Butnotwhether anoperation isamember
ofalistofoperations, atextamember ofalistoftexts,andsoon.
Ord istheclass oftypes ofthings which notonly canbetested forequality and
inequality ,butalso fororder:inaddition to==and/=,therelations<and<=
aredeﬁned. Also, ithasfunctions minfortheminimal element andmaxforthe
maximal element. TheclassOrdisasubclass oftheclassEq.
Classes areuseful, because theyallowobjects (and operations onthose objects) to
beinstances ofseveraltypes atonce. Thenumeral ‘1’canbeused asaninteger,as
arational, asareal, andsoon.This isreﬂected inHask ellbythetyping:
Prelude> :t1
1::Numa=>a
Prelude>
Allofthetypes integer,rational number ,realnumber ,comple xnumber ,andsoon,
areinstances ofthesame class, calledNuminHask ell.TheclassNumisasubclass
oftheclassEq(because italso hasequality andinequality). Foralltypes inthe
classNumcertain basic operations, such as+and*,aredeﬁned. Aswewillseein
4.3.SPECIAL SETS 125
Chapter 8,addition hasdifferent implementations, depending onwhether weoper-
ateonN;Z;Q;:::anddepending ontherepresentations wechoose. Still, instead
ofdistinguishing betweenadd,add1 ,add2 ,andsoon,onecould usethesame
name forallthese different operations. This isstandard practice inprogramming
language design, anditiscalled operator overloading .
Exer cise4.8Explain thefollo wing error message:
Prelude> elem11
ERROR:[a]isnotaninstance ofclass"Num"
Prelude>
4.3 Special Sets
Singletons. Sets that haveexactly oneelement arecalled singletons .The set
whose only element isaisfag;thisiscalled thesingleton ofa.Note thatit
follo wsfrom thedeﬁnition thatx2fagiffx=a.
Warning .Donotconfuse asingletonfagwith itselementa.
Inmost cases youwillhavethata6=fag.Forinstance, inthecase thata=f0;1g,
wehavethatf0;1g6=ff0;1gg.For,f0;1ghastwoelements: thenumbers 0and
1.Ontheother hand,ff0;1gghasonly oneelement: thesetf0;1g.
Remark. Thequestion whether theequationa=faghassolutions (or,more
generally ,whether setsaexistsuch thata2a)isanswered differently bydifferent
axiomatizations ofsettheory .Asetsatisfying thisequation hastheshapea=
fffggg,butofcourse thisisunofﬁcial notation. Forthemathematical
content ofsettheory thisproblem islargely irrele vant.
Anexample ofacase where itwould beuseful toletsets havethemselv esas
members would beinﬁnite streams, likeaninﬁnite listof‘1’s.Such anobject is
easily programmed inHask ell:
ones=1:ones
126 CHAPTER 4.SETS,TYPESANDLISTS
Ifyouload andrunthis, andendless stream of1’swillcoverthescreen, andyou
will havetokilltheprocess from outside. Still, theprocess speciﬁed by‘ﬁrst
generate a‘1’andthen runthesame process again’ iswell-deﬁned, anditcan
plausibly besaid tohaveitself asitssecond member .Tobesure, theorder does
matter here, butanysettheory canencode ordered pairs: seeSection 4.5below.
Asetoftheformfa;bgiscalled an(unordered) pair.Ofcourse, ifa=b,then
fa;bg=fagis,infact,asingleton.
Empty Set. Finally ,there isasetwithout anyelements atall:theempty set.
This curious object canbeasource ofdistress forthebeginner ,because ofits
unexpected properties. (AﬁrstoneisTheorem 4.9.) Thenotation fortheempty
setis
;:
Note thatthere isexactly onesetthatisempty: thisisduetoExtensionality .
Theor em4.9Forevery setA,wehave that
;A:
Proof.
Supposexisanarbitrary object withx2;.
Then?(contradiction with thefactthat;hasnomembers).
Thereforex2A.
Thus8x(x2;)x2A),i.e.,;A.
Exer cise4.10 Show:
1.fag=fbgiffa=b,
2.fa1;a2g=fb1;b2giff:a1=b1^a2=b2,ora1=b2^a2=b1.
Exer cise4.11 Explain that;6=f;g.And thatf;g6=ff;gg .
4.4.ALGEBRA OFSETS 127
Remark. Abstraction andRestricted Quantiﬁcation. Note that
8x2A(x)istrueifffx2Aj(x)g=A:
Similarly ,
9x2A(x)istrueifffx2Aj(x)g6=;:
4.4 Algebra ofSets
Deﬁnition 4.12 (Intersection, Union, Differ ence.) Assume thatAandBaresets.
Then:
1.A\B=fxjx2A^x2Bgistheinter section ofAandB,
2.A[B=fxjx2A_x2Bgistheir union ,
and
3.A B=fxjx2A^x62Bgtheir difference.
Types ofSetTheor eticExpr essions Often, thesymbols\and[areconfused
with theconnecti ves^and_.From Deﬁnition 4.12, their intimate connection is
clear .However,their functioning iscompletely different:\and[produce, given
twosetsAandB,newsetsA\Bresp.A[B(thus,\and[canbewritten
between setsonly), whereas^and_combine twostatements and	intonew
statements ^	resp._	.
Intheidiom ofSection 4.2:theoperations\;[ononehand and^;_ontheother
havedifferenttypes .The typing underlying thenotation ofsettheory ismuch
simpler than thatoffunctional programming. Tostart with, wejustdistinguish
between thetypess(forset),t(foraproposition, i.e.,anexpression with atruth
value), (foranything atall),andfsg(forafamily ofsets, seebelow).
tislikeBool inHask ell,butshasnoHask ellanalogue. Insettheory ,setslike
N,Z,Q,Rareallofthesame type, namelys,whereas inHask ellmuch ﬁner
distinctions aredrawn. The simplicity ofthetyping underlying settheory isan
advantage, foritmakesthelanguage ofsettheory more ﬂexible.
Toﬁndthetypes ofthesettheoretic operations weusethesame recipe asinfunc-
tional programming. Thus,\and[both havetypes!s!s,fortheytake
twosetarguments andproduce anewset.^and_havetypet!t!t,torthey
128 CHAPTER 4.SETS,TYPESANDLISTS
Figure 4.2:Setunion, intersection, difference, andcomplement.
4.4.ALGEBRA OFSETS 129
taketwopropositions andproduce anewproposition.2hastype!s!t,
forittakesanything atallasitsﬁrstargument, asetasitssecond argument, and
produces aproposition.
Exer cise4.13 What arethetypes ofthesetdifference operator andofthein-
clusion operator?
Exer cise4.14 Givethetypes ofthefollo wing expressions:
1.x2fxjE(x)g.
2.fxjE(x)g.
3.(A\B)C.
4.(A[B)\C.
5.8x(x2A)x2B).
6.A=B.
7.a2A,a2B.
The relationships between\and^andbetween[and_become clearer ifthe
equalities from Deﬁnition 4.12 arewritten intheform ofequivalences:
1.x2A\B()x2A^x2B,
2.x2A[B()x2A_x2B,
3.x2A B()x2A^x62B.
Disjointness. SetsAandBarecalled disjoint ifA\B=;.
Example 4.15 ForA=f1;2;3gandB=f3;4g,wehave:A[B=f1;2;3;4g,
A\B=f3gandA B=f1;2g.AandBarenotdisjoint, for32A\B.
Theor em4.16 ForallsetsA,BandC,wehave thefollowing:
1.A\;=;;
A[;=A,
130 CHAPTER 4.SETS,TYPESANDLISTS
2.A\A=A;
A[A=A (idempotence),
3.A\B=B\A;
A[B=B[A (commutativity),
4.A\(B\C)=(A\B)\C;
A[(B[C)=(A[B)[C (associativity),
5.A\(B[C)=(A\B)[(A\C);
A[(B\C)=(A[B)\(A[C) (distrib utivity).
Bypart4.16.4, wecanomit parentheses inintersections andunions ofmore than
twosets.
Proof.Using thedeﬁnitions of\,[and ,these lawsallreduce toTheorem 2.10
(p.45). Still, itisinstructi vetogiveadirect proof. Here isonefortheﬁrst
distrib ution law:
:
Letxbeanyobject inA\(B[C).
Thenx2Aandeitherx2Borx2C.
Supposex2B.Thenx2A\B,sox2(A\B)[(A\C).
Supposex2C.Thenx2A\C,sox2(A\B)[(A\C).
Thus ineither casex2(A\B)[(A\C).
ThusA\(B[C)(A\B)[(A\C).
:
Letxbeanyobject in(A\B)[(A\C).
Then eitherx2A\Borx2(A\C).
Supposex2A\B,i.e.,x2Aandx2B.
Thenx2Aandeitherx2Borx2C,i.e.,x2A\(B[C).
Supposex2A\C,i.e.,x2Aandx2C.
Thenx2Aandeitherx2Borx2C,i.e.,x2A\(B[C).
Thus ineither casex2A\(B[C).
Therefore (A\B)[(A\C)A\(B[C).
ByExtensionality ,therequired equality follo ws.
Finally ,athird form ofproof: using thedeﬁnitions, thedistrib ution lawreduces,
asintheabove,totheequivalence
x2A^(x2B_x2C)()(x2A^x2B)_(x2A^x2C);
4.4.ALGEBRA OFSETS 131
which involvesthethree statementsx2A,x2Bandx2C.That thiscomes
outtruealwayscanbecheck edusing an8-line truth table intheusual way.
Exer cise4.17A,BandCaresets. Show:
1.A6B,A B6=;.
2.A\B=A (A B).
Example 4.18 WeshowthatA C(A B)[(B C).
Given:x2(A C):
Tobeproved:x2(A B)_x2(B C).
Proof:
Supposex2B.Fromx2(A C)wegetthatx=2C,sox2(B C).
Thereforex2(A B)_x2(B C).
Supposex=2B.Fromx2(A C)wegetthatx2A,sox2(A B).
Thereforex2(A B)_x2(B C).
Thusx2(A B)_x2(B C).
Exer cise4.19 Express (A[B)\(C[D)asaunion offour intersections.
Complement. FixasetX,ofwhich allsetstobeconsidered aresubsets. The
complement AcofasetAXisnowdeﬁned by
Ac:=X A:
Clearly ,wehavethatforallx2X:
x2Ac,x62A:
Theor em4.20
1.(Ac)c=A;
Xc=;;
;c=X,
132 CHAPTER 4.SETS,TYPESANDLISTS
2.A[Ac=X;
A\Ac=;,
3.AB,BcAc,
4.(A[B)c=Ac\Bc;
(A\B)c=Ac[Bc(DeMor ganlaws).
Figure 4.3:Symmetric setdifference.
Symmetric Differ ence. Thesymmetric difference oftwosetsAandB,notation
AB,isthesetgivenbyfxjx2Ax2Bg.This isthesetofallobjects that
areeither inAorinB,butnotinboth.
Exer cise4.21 ShowthatAB=(A B)[(B A)=(A[B) (A\B).
8
>><
>>:f1;2;3g
f1;2gf2;3gf1;3g
f1gf2gf3g
;9
>>=
>>;
Figure 4.4:Thepowersetoff1;2;3g.
Deﬁnition 4.22 (PowerSet) Thepower setofthesetXistheset}(X)=fAjA
Xgofallsubsets ofX.
ByTheorem 4.9and4.1.1 wehavethat;2}(X)andX2}(X).So,for
instance,}(f;;1g)=f;;f;g;f1g;f;;1gg.Note thatX2}(A),XA.
4.4.ALGEBRA OFSETS 133
Exer cise4.23 LetXbeasetwith atleast twoelements. Then byTheorem (4.1),
therelationon}(X)hastheproperties ofreﬂexivity,antisymmetry andtransi-
tivity.Therelation 6onRalsohasthese properties. Therelation 6onRhasthe
further property oflinearity :forallx;y2R,eitherx6yory6x.Showthat
on}(X)lacks thisproperty .
Figure 4.5:Generalized setunion andintersection.
Deﬁnition 4.24 (Generalized Union andIntersection) Suppose thatasetAihas
been givenforeveryelementiofasetI.
1.Theunion ofthesetsAiisthesetfxj9i2I(x2Ai)g.
Notation:S
i2IAi.
2.Theinter section ofthesetsAiisthesetfxj8i2I(x2Ai)g.
Notation:T
i2IAi
Iftheelements ofIaresetsthemselv es,andAi=i(i2I),thenS
i2Iiiscalled
theunion ofI;
Theshort notation forthissetisSI.Similarly ,T
i2Iiiswritten asTI.
Inthecase thatI=N,S
i2IAiandT
i2IAicanalso bewritten asA0[A1[
A2[,resp.,A0\A1\A2\.
Asetofsetsissometimes called afamily ofsetsoracollection ofsets.IfFisa
family ofsets,SFandTFaresets. Forexample, if
F=ff1;2;3g;f2;3;4g;f3;4;5gg;
thenSF=f1;2;3;4;5gandTF=f3g.
134 CHAPTER 4.SETS,TYPESANDLISTS
Example 4.25 Forp2N,letAp=fmpjm2N;m>1g.ThenApisthesetof
allnatural numbers thathavepasafactor .
S
i2f2;3;5;7gAiisthesetofallnatural numbers oftheformn2357,with at
least oneof;;;>0.
T
i2f2;3;5;7gAiisthesetofallnatural numbers oftheformn2357,with all
of;;;>0,which isthesetA210.
LetFandGbecollections ofsets. Tocheck thetruth ofstatements such asSFTGitisoften useful toanalyze their logical form bymeans ofatranslation in
terms ofquantiﬁers andtherelation2.Thetranslation ofSFTGbecomes:
8x(9y(y2F^x2y))8z(z2G)x2z)):
Exer cise4.26 Givealogical translation ofTFSGusing only therelation2.
Types ofGeneralized Union andIntersection Again, itisuseful toconsider the
types oftheoperations ofgeneralized union andintersection. These operations
takefamilies ofsetsandproduce sets, sotheir type isfsg!s,wherefsgisthe
type ofafamily ofsets.
Exer cise4.27 LetFbeafamily ofsets. Showthat there isasetAwith the
follo wing properties:
1.F}(A),
2.ForallsetsB:ifF}(B)thenAB.
Remark. IfI=;,thenS
i2IAi=;,andT
i2IAiisthecollection ofallsets.
This lastfactisanexample ofatrivially true implication: ifI=;,then every
statementi2Iisfalse, hence theimplication i2I)x2Aitrue, and
everything ismember of
fxj8i2I(x2Ai)g=fxj8i(i2I)x2Ai)g:
Therefore, thenotationT
i2IAiusually presupposes thatI6=;.
4.4.ALGEBRA OFSETS 135
Example 4.28 Forx2X,wehavethat:
x2(A[B)c,:(x2A[B)
,:(x2A_x2B)
,:x2A^:x2B
,x2Ac^x2Bc
,x2Ac\Bc:
Step()isjustiﬁed bypropositional reasoning. See2.10.9. Extensionality allows
ustoconclude theﬁrstDeMor ganlaw:
(A[B)c=Ac\Bc:
Exer cise4.29 ProvetherestofTheorem 4.20.
Exer cise4.30 Answer asmanyofthefollo wing questions asyoucan.
1.Determine:}(;),}(}(;))and}(}(}(;))).
2.Howmanyelements has}5(;)=}(}(}(}(}(;))))) ?
3.Howmanyelements has}(A),giventhatAhasnelements?
Exer cise4.31 Check whether thefollo wing istrue: iftwosets havethesame
subsets, then theyareequal. I.e.:if}(A)=}(B),thenA=B.Giveaproof ora
refutation bymeans ofacountere xample.
Exer cise4.32 IsittruethatforallsetsAandB:
1.}(A\B)=}(A)\}(B)?
2.}(A[B)=}(A)[}(B)?
Provide either aproof orarefutation bycounter -example.
Exer cise4.33*Show:
1.B\(S
i2IAi)=S
i2I(B\Ai),
136 CHAPTER 4.SETS,TYPESANDLISTS
2.B[(T
i2IAi)=T
i2I(B[Ai),
3.(S
i2IAi)c=T
i2IAc
i,assuming that8i2IAiX,
4.(T
i2IAi)c=S
i2IAc
i,assuming that8i2IAiX.
Exer cise4.34*Assume thatyouaregivenacertain setA0.Suppose youareas-
signed thetask ofﬁnding setsA1;A2;A3;:::such that}(A1)A0,}(A2)
A1,}(A3)A2,...Showthatnomatter howhard youtry,youwilleventually
fail,thatis:hitasetAnforwhich noAn+1exists such that}(An+1)An.(I.e.,
;62An.)
Hint. Suppose you cangoonforever.Showthiswould entail}(T
i2NAi)T
i2NAi.Apply Exercise 4.7.
Exer cise4.35*Suppose thatthecollectionKofsetssatisﬁes thefollo wing condi-
tion:
8A2K(A=;_9B2K(A=}(B))):
Showthateveryelement ofKhastheform}n(;)forsomen2N.(N.B.:}0(;)=
;.)
4.5 Order edPairsandProducts
Nexttotheunordered pairsfa;bgofSection 4.3,inwhich theorder ofaandbis
immaterial (fa;bg=fb;ag),there areorderedpairs inwhich order does count.
Theorderedpair ofobjectsaandbisdenoted by
(a;b):
Here,aistheﬁrstandbthesecond coordinate of(a;b).
Ordered pairs beha veaccording tothefollo wing rule:
(a;b)=(x;y)=)a=x^b=y: (4.2)
This means thattheordered pairofaandbﬁxestheobjects aswell astheir order .
Itsbeha viour differsfrom thatoftheunordered pair: wealwayshavethatfa;bg=
fb;ag,whereas (a;b)=(b;a)only holds —according to(4.2) —whena=b.
Warning .Ifaandbarereals, thenotation (a;b)alsomay denote theopen interv al
fx2Rja<x<bg.Theconte xtshould tellyouwhich ofthetwoismeant.
4.5.PAIRSANDPRODUCTS 137
Deﬁning Order edPairs. Deﬁning
(a;b)=ffag;fa;bgg
allowsyoutoprove(4.2). Cf.Exercise 4.41.
Deﬁnition 4.36 (Products) The(Cartesian) product ofthesetsAandBistheset
ofallpairs(a;b)wherea2Aandb2B.Insymbols:
AB=f(a;b)ja2A^b2Bg:
Instead ofAAoneusually writesA2.
Example 4.37f0;1gf1;2;3g=f(0;1);(0;2);(0;3);(1;1);(1;2);(1;3)g.
WhenAandBarerealinterv alsontheXresp., theY-axis intwo-dimensional
space,ABcanbepictured asarectangle.
Ran(R)
Dom(R)R
Theor em4.38 Forarbitrary setsA;B;C;Dthefollo wing hold:
1.(AB)\(CD)=(AD)\(CB),
2.(A[B)C=(AC)[(BC);(A\B)C=(AC)\(BC),
3.(A\B)(C\D)=(AC)\(BD),
4.(A[B)(C[D)=(AC)[(AD)[(BC)[(BD),
5.[(A C)B][[A(B D)](AB) (CD).
138 CHAPTER 4.SETS,TYPESANDLISTS
Proof.Asanexample, weprovetheﬁrstitem ofpart2.
Tobeproved:(A[B)C=(AC)[(BC):
:
Suppose thatp2(A[B)C.Thena2A[Bandc2Cexistsuch thatp=(a;c).
Thus (i)a2Aor(ii)a2B.
(i).Inthiscase,p2AC,andhencep2(AC)[(BC).
(ii).Nowp2BC,andhence againp2(AC)[(BC).
Thusp2(AC)[(BC).
Therefore, (A[B)C(AC)[(BC).
:
Conversely ,assume thatp2(AC)[(BC).
Thus (i)p2ACor(ii)p2BC.
(i).Inthiscasea2Aandc2Cexistsuch thatp=(a;c);
afortiori ,a2A[Bandhencep2(A[B)C.
(ii).Nowb2Bandc2Cexistsuch thatp=(b;c);
afortiorib2A[Bandhence, again,p2(A[B)C.
Thusp2(A[B)C.
Therefore, (AC)[(BC)(A[B)C.
Therequired result follo wsusing Extensionality .
Exer cise4.39 Provetheother items ofTheorem 4.38.
Exer cise4.40 1.Assume thatAandBarenon-empty andthatAB=
BA.ShowthatA=B.
2.Showbymeans ofanexample thatthecondition ofnon-emptiness in1is
necessary .(Did youusethisinyour proof of1?)
Exer cise4.41*Toshowthatdeﬁning (a;b)asffag;fa;bggworks, provethat
1.fa;bg=fa;cg=)b=c,
2.ffag;fa;bgg=ffxg;fx;ygg=)a=x^b=y.
4.6.LISTSANDLISTOPERATIONS 139
Ifweassume theproperty ofordered pairs(a;b)=(x;y)=)a=x^b=y,we
candeﬁne triples by(a;b;c):=(a;(b;c)).Forsuppose (a;b;c)=(x;y;z).Then
bydeﬁnition, (a;(b;c))=(a;b;c)=(x;y;z)=(x;(y;z)),andbytheproperty
ofordered pairs, wehavethata=xand(b;c)=(y;z).Again, bytheproperty
ofordered pairs,b=yandc=z.This showsthat(a;b;c)=(x;y;z))(a=
x^b=y^c=z).
Letusgoabout thismore systematically ,bydeﬁning orderedn-tuples oversome
base setA,foreveryn2N.Weproceed byrecursion.
Deﬁnition 4.42 (n-tuples overA)
1.A0:=f;g,
2.An+1:=AAn.
InHask ell,ordered pairs arewritten as(x1,x2) ,andthere arepredeﬁned func-
tionsfsttogetattheﬁrstmember andsndtogetatthesecond member .Ordered
triples arewritten as(x1,x2,x3),andsoon.Ifx1hastypeaandx2hastype
b,then(x1,x2) hastype(a,b) .Think ofthistype astheproduct ofthetypes for
x1andx2.Here isanexample:
Prelude> :t(1,'A')
(1,'A') ::Numa=>(a,Char)
Prelude>
4.6 Lists andList Operations
Assuming thelistelements arealltakenfrom asetA,thesetofalllists overA
isthesetS
n2NAn.Weabbre viate thissetasA.ForeverylistL2Athere is
somen2NwithL2An.IfL2AnwesaythatlistLhaslengthn.
Standard notation forthe(one andonly) listoflength 0is[].Alistoflengthn>0
looks like(x0;(x1;(;xn 1))).This isoften written as[x0;x1;:::;xn 1].
Aoneelement listisalistoftheform(x;[]).Inlinewith theabovesquare brack et
notation, thisiswritten as[x].
Ifoneuses lists torepresent sets, there isadifﬁculty .Thelist[a;b;b]isdifferent
from thelist[a;b],for[a;b;b]haslength 3,and[a;b]haslength 2,butthesets
fa;b;bgandfa;bgareidentical. This showsthat sets andlists havedifferent
identity conditions.
This ishowthedata type oflistsis(pre-)declared inHask ell:
140 CHAPTER 4.SETS,TYPESANDLISTS
data[a]=[]|a:[a]deriving (Eq,Ord)
Tograsp what thismeans, recall thatinfunctional programming everysethasa
type.Thedata declaration forthetype oflists overtypea,notation[a]speciﬁes
thatlistsovertypeaareeither empty ortheyconsist ofanelement oftypeaputin
front ofalistovertypea.Hask elluses:fortheoperation ofputting anelement in
front ofalist.
Theoperation :combines anobject with alistofobjects ofthesame type toform
anewlistofobjects ofthattype. This isreﬂected bythetype judgment:
Prelude> :t(:)
(:)::a->[a]->[a]
Thedata declaration forlistsalsotells us,bymeans ofderiving (Eq,Ord) ,that
ifequality isdeﬁned ontheobjects oftypea(i.e., ifthetypeabelongs totheclass
Eq)then thisrelation carries overtolists overtypea,andiftheobjects oftypea
areordered, i.e.,ifthetypeabelongs totheclassOrd(e.g., theobjects oftypeZ
areordered by<),then thisorder carries overtolistsovertypea.
Ifwehaveanequality testformembers ofthesetA,then itiseasy toseehow
equality canbedeﬁned forlists overA(infact,thisisalltakencare ofbythe
predeﬁned operations onlists). Lists areordered sets, sotwolists arethesame if
(i)theyeither areboth empty ,or(ii)theystart with thesame element (here iswhere
theequality notion forelements fromAcomes in),andtheir tails arethesame. In
Hask ell,thisisimplemented asfollo ws(this isadeﬁnition fromPrelude.hs ):
instance Eqa=>Eq[a]where
[]==[]=True
(x:xs)==(y:ys)=x==y&&xs==ys
_==_=False
This says thatifaisaninstance ofclassEq,then[a]issotoo.This speciﬁes how
theequality notion forobjects oftypeacarries overtoobjects oftype[a] (i.e.,
lists overthattype). Aswehaveseen, Hask elluses==forequality and=forthe
deﬁnition ofoperator values. Part(i)ofthedeﬁnition oflistequality istakencare
ofbythestatement that[]==[]istrue, part(ii)iscovered by:
4.6.LISTSANDLISTOPERATIONS 141
(x:xs)==(y:ys)=x==y&&xs==ys
This says: thetruth value of(x:xs)==(y:ys) (equality oftwolists thatare
both non-empty) isgivenbytheconjunction of
theﬁrstelements arethesame (x==y),and
theremainders arethesame (xs==ys).
Theﬁnal line_==_=False states thatinallother cases thelistsarenotequal.
This ﬁnal lineuses_asa‘don’ tcare pattern’ orwild card.
Exer cise4.43 Howdoes itfollo wfrom thisdeﬁnition thatlistsofdifferent length
areunequal?
Atype ofclassOrd isatype onwhich thetwo-placed operation compare isde-
ﬁned, with aresult oftypeOrdering .ThetypeOrdering isthesetfLT;EQ;GTg,
where LT;EQ;GThavetheobvious meanings. Supposeaisatype ofclassOrd,
i.e.,compare isdeﬁned onthetypea.What does areasonable ordering oflists
overtypealook like?Awell-kno wnorder onlistsisthelexicographical order: the
waywords areordered inadictionary .Inthisordering, theempty listcomes ﬁrst.
Fornon-empty listsL1;L2,wecompare their ﬁrst elements, using thefunction
compare forobjects oftypea.Ifthese arethesame, theorder isdetermined by
theremainders ofthelists. Iftheﬁrstelement ofL1comes before theﬁrstelement
ofL2thenL1comes beforeL2,otherwiseL2comes beforeL1.The follo wing
piece ofHask ellcode implements thisidea, bydeﬁning thefunctioncompare for
listsovertypea.
instance Orda=>Ord[a]where
compare [](_:_)=LT
compare [][]=EQ
compare (_:_)[]=GT
compare (x:xs)(y:ys)=primCompAux xy(compare xsys)
This speciﬁes howtheordering ontypeacarries overtoanordering oflists over
typea.The ﬁrst linesays thattheempty list[]islessthan anynon-empty list.
142 CHAPTER 4.SETS,TYPESANDLISTS
Thesecond linesays thattheempty listisequal toitself. Thethird linesays that
anynon-empty listisgreater than theempty list.This fully determines therelation
between []andanylist. Thelastlineuses anauxiliary functionprimCompAux to
coverthecase oftwonon-empty lists. This function isdeﬁned by:
primCompAux ::Orda=>a->a->Ordering ->Ordering
primCompAux xyo=
casecompare xyofEQ->o;
LT->LT;
GT->GT
The type declaration ofprimCompAux says that ifaisanordered type, then
primCompAux expects three arguments, theﬁrst oneoftypea,thesecond one
oftypeaandthethird oneanelement oftheset(ortype)Ordering ,i.e.,theset
fLT;EQ;GTg.Theresult isagain amember ofthetypeOrdering .
Thedeﬁnition oftheoperation primCompAux uses acase construction, using the
reserv edkeywordscase andof,andthearrow->topoint attheresults forthe
various cases. .Itsays thatincase theﬁrsttwoarguments areequal, thefunction
returns theelement ofOrdering which isitsthird argument, incase theﬁrstar-
gument islessthan thesecond argument, thefunction returnsLT,incase theﬁrst
argument isgreater than thesecond argument, thefunction returnsGT.
Exer cise4.44 Another ordering oflists isasfollo ws: shorter lists come before
longer ones, andforlists ofthesame length wecompare their ﬁrstelements, and
ifthese arethesame, theremainder lists. Giveaformal deﬁnition ofthisordering.
Howwould youimplement itinHask ell?
Inlistprocessing, fundamental operations arechecking whether alistisempty ,
accessing theﬁrst element ofanon-empty list,determining what remains after
remo valoftheﬁrstelement from alist(itstail ).Theoperations foraccessing the
head orthetailofalistareimplemented inHask ellasfollo ws:
head ::[a]->a
head(x:_) =x
tail ::[a]->[a]
tail(_:xs) =xs
4.6.LISTSANDLISTOPERATIONS 143
The type oftheoperation head :giveitalistovertypeaandtheoperation will
return anelement ofthesame typea.This isspeciﬁed inhead::[a]->a.
Thetype oftheoperation tail is:giveitalistovertypeaanditwillreturn alist
overthesame type. This isspeciﬁed intail::[a]->[a].
Note thatthese operations areonly deﬁned onnon-empty lists.(x:_) speciﬁes
thepattern ofanon-empty listwith ﬁrstelementx,where thenature ofthetailis
irrele vant.(_:xs) speciﬁes thepattern ofanon-empty listwith tailxs,where the
nature oftheﬁrstelement isirrele vant.
Accessing thelastelement ofanon-empty listisdone bymeans ofrecursion: the
lastelement ofaunitlist[x]isequal to[x].Thelastelement ofanon-unit listis
equal tothelastelement ofitstail.Here istheHask ellimplementation:
last ::[a]->a
last[x] =x
last(_:xs) =lastxs
Note thatbecause thelistpatterns[x]and(_:xs) aretried forinthatorder ,the
pattern(_:xs) inthisdeﬁnition matches non-empty liststhatarenotunitlists.
Exer cise4.45 Which operation onlists isspeciﬁed bytheHask elldeﬁnition in
theframe below?
init ::[a]->[a]
init[x] =[]
init(x:xs) =x:initxs
Itisoften useful tobeable totestwhether alistisempty ornot. The follo wing
operation accomplishes this:
null ::[a]->Bool
null[] =True
null(_:_) =False
144 CHAPTER 4.SETS,TYPESANDLISTS
Exer cise4.46 Write your owndeﬁnition ofaHask elloperation reverse thatre-
verses alist.
Exer cise4.47 Write afunctionsplitList thatgivesallthewaystosplit alistof
atleast twoelements intwonon-empty parts. Thetype declaration is:
splitList ::[a]->[([a],[a])]
ThecallsplitList [1..4] should give:
STAL>splitList [1..4]
[([1],[2,3,4]),([1,2],[3,4]), ([1,2,3],[4])]
STAL>
]
Anoperation onlists thatwewillneed inthenextsections istheoperation ofre-
moving duplicates. This ispredeﬁned intheHask ellmodule List.hs asnub(‘nub’
means essence), buthere isahome-made version forillustration:
nub::(Eqa)=>[a]->[a]
nub[]=[]
nub(x:xs)=x:nub(remove xxs)
where
removey[] =[]
removey(z:zs)|y==z=removeyzs
|otherwise =z:removeyzs
What thissays is,ﬁrst, thatifaisanytype forwhich arelation ofequality is
deﬁned, thennuboperates onalistovertypeaandreturns alistovertypea.
InHask ell,strings ofcharacters arerepresented aslists, andtheshorthand "abc"
isallowed for['a','b','c'] .Here isanexample ofanapplication ofnubtoa
string:
STAL>nub"Mississippy"
"Mispy"
Ofcourse, wecanalsousenubonlistsofwords:
STAL>nub["Quentin Tarantino","Harrison Ford","Quentin Tarantino"]
["Quentin Tarantino","Harrison Ford"]
4.7.LISTCOMPREHENSION ANDDATABASEQUERY 145
4.7 List Compr ehension andDatabase Query
Togetmore familiar with listcomprehensions, wewilldevotethissection tolist
comprehension fordatabase query ,using themoviedatabase module DB.hs given
inFigure 4.6. Thedatabase thatgets listed here iscalleddb,with typeDB,where
DBisasynon ymforthetype[WordList] ,whereWordlist isagain asynon ym
forthetype[String] .Thereserv edkeywordtype isused todeclare these type
synon yms. Notice thedifference between deﬁning atype synon ymwithtype and
declaring anewdata type withdata .
Thedatabase canbeused todeﬁne thefollo wing listsofdatabase objects, with list
comprehension. Heredb::DBisthedatabase list.
characters =nub[x|["play",_,_,x] <-db]
movies =[x|["release",x,_] <-db]
actors =nub[x|["play",x,_,_] <-db]
directors =nub[x|["direct",x,_] <-db]
dates =nub[x|["release",_,x] <-db]
universe =nub(characters++actors++directo rs++movies++dates)
Next,deﬁne listsoftuples, again bylistcomprehension:
direct =[(x,y) |["direct",x,y] <-db]
act =[(x,y) |["play",x,y,_] <-db]
play =[(x,y,z) |["play",x,y,z] <-db]
release =[(x,y) |["release",x,y] <-db]
Finally ,deﬁne oneplaced, twoplaced andthree placed predicates bymeans of
lambda abstraction.
146 CHAPTER 4.SETS,TYPESANDLISTS
moduleDB
where
typeWordList =[String]
typeDB =[WordList]
db::DB
db=[
["release", "BladeRunner", "1982"],
["release", "Alien", "1979"],
["release", "Titanic", "1997"],
["release", "GoodWillHunting", "1997"],
["release", "PulpFiction", "1994"],
["release", "Reservoir Dogs","1992"],
["release", "RomeoandJuliet", "1996"],
{-...-}
["direct", "BrianDePalma", "TheUntouchables"],
["direct", "JamesCameron", "Titanic"],
["direct", "JamesCameron", "Aliens"],
["direct", "Ridley Scott", "Alien"],
["direct", "Ridley Scott", "BladeRunner"],
["direct", "Ridley Scott", "Thelma andLouise"],
["direct", "GusVanSant","GoodWillHunting"],
["direct", "Quentin Tarantino", "PulpFiction"],
{-...-}
["play", "Leonardo DiCaprio", "RomeoandJuliet", "Romeo"],
["play", "Leonardo DiCaprio", "Titanic", "JackDawson"],
["play", "RobinWilliams", "GoodWillHunting", "SeanMcGuire"],
["play", "JohnTravolta", "PulpFiction", "Vincent Vega"],
["play", "Harvey Keitel", "Reservoir Dogs","MrWhite"],
["play", "Harvey Keitel", "PulpFiction", "Winston Wolf"],
["play", "UmaThurman", "PulpFiction", "Mia"],
["play", "Quentin Tarantino", "PulpFiction", "Jimmie"],
["play", "Quentin Tarantino", "Reservoir Dogs","MrBrown"],
["play", "Sigourney Weaver", "Alien", "EllenRipley"],
{-...-}
Figure 4.6:ADatabase Module.
4.7.LISTCOMPREHENSION ANDDATABASEQUERY 147
charP =\x ->elemxcharacters
actorP =\x ->elemxactors
movieP =\x ->elemxmovies
directorP =\x ->elemxdirectors
dateP =\x ->elemxdates
actP =\(x,y) ->elem(x,y)act
releaseP =\(x,y) ->elem(x,y)release
directP =\(x,y) ->elem(x,y)direct
playP =\(x,y,z) ->elem(x,y,z) play
Westart with some conjuncti vequeries. ‘Givemetheactors thatalsoaredirectors. ’
q1=[x|x<-actors, directorP x]
‘Givemeallactors thatalso aredirectors, together with theﬁlms inwhich they
were acting. ’
q2=[(x,y)|(x,y)<-act,directorP x]
’Givemealldirectors together with their ﬁlms andtheir release dates. ’Thefol-
lowing iswrong.
q3=[(x,y,z) |(x,y)<-direct, (y,z)<-release ]
The problem isthat thetwoysareunrelated. Infact,thisquery generates an
inﬁnite list.This canberemedied byusing theequality predicate asalink:
q4=[(x,y,z) |(x,y)<-direct, (u,z)<-release, y==u]
148 CHAPTER 4.SETS,TYPESANDLISTS
‘Givemealldirectors ofﬁlms released in1995, together with these ﬁlms. ’
q5=[(x,y)|(x,y)<-direct, (u,"1995") <-release, y==u]
‘Givemealldirectors ofﬁlms released after 1995, together with these ﬁlms and
their release dates. ’
q6=[(x,y,z) |(x,y)<-direct, (u,z)<-release,
y==u,z>"1995" ]
‘Givemetheﬁlms inwhich KevinSpace yacted. ’
q7=[x|("Kevin Spacey",x) <-act]
‘Givemeallﬁlms released after 1997 inwhich William Hurt didact.’
q8=[x|(x,y)<-release, y>"1997", actP("William Hurt",x) ]
Yes/no queries based onconjuncti vequerying: ‘Arethere anyﬁlms inwhich the
director wasalsoanactor?’
q9=q1/=[]
‘Does thedatabase contain ﬁlms directed byWoody Allen?’
q10=[x|("Woody Allen",x) <-direct]/=[]
4.8.USINGLISTSTOREPRESENT SETS 149
Orsimply:
q10'=directorP "WoodyAllen"
Disjuncti veandnegativequeries arealso easily expressed, since wehavepredi-
cates andBoolean operators.
Exer cise4.48 Translate thefollo wing intoaquery: ‘Givemetheﬁlms inwhich
Robert DeNiro orKevinSpace yacted. ’
Exer cise4.49 Translate thefollo wing intoaquery: ‘Givemeallﬁlms with Quentin
Tarantino asactor ordirector thatappeared in1994. ’
Exer cise4.50 Translate thefollo wing into aquery: ‘Givemeallﬁlms released
after 1997 inwhich William Hurt didnotact.’
4.8 Using Lists toRepr esent Sets
Sets areunordered, lists areordered, butwecanuselists torepresent ﬁnite (or
countably inﬁnite) setsbyrepresenting setsaslists with duplicates remo ved,and
bydisre garding theorder .Ifaﬁnite listdoes notcontain duplicates, itslength
givesthesizeoftheﬁnite setthatitrepresents.
Evenifwegloss overthepresence ofduplicates, there arelimitations totherep-
resentation ofsetsbylists. Such representation only works ifthesetstoberepre-
sented aresmall enough. InChapter 11wewillreturn tothisissue.
Toremo ving anelement from alistwithout duplicates allwehavetodoisremo ve
theﬁrstoccurrence oftheelement from thelist. This isdone bythepredeﬁned
functiondelete ,alsopartoftheHask ellmodule List.hs .Here isourhome-made
version:
delete::Eqa=>a->[a]->[a]
deletex[]=[]
deletex(y:ys)|x==y=ys
|otherwise =y:deletexys
150 CHAPTER 4.SETS,TYPESANDLISTS
Aswehaveseen, theoperation ofelem forﬁnding elements isbuiltin.Here is
ourdemo version, re-baptized elem' toavoidaclash with Prelude .hs.
elem'::Eqa=>a->[a]->Bool
elem'x[] =False
elem'x(y:ys)|x==y=True
|otherwise =elem'xys
Further operations onsetsthatweneed toimplement areunion, intersection and
difference. These areallbuiltinto theHask ellmodule List.hs .Our version of
union :
union::Eqa=>[a]->[a]->[a]
union[]ys=ys
union(x:xs)ys=x:unionxs(delete xys)
Note thatifthisfunction iscalled with arguments thatthemselv esdonotcontain
duplicates then itwillnotintroduce newduplicates.
Here isanoperation fortaking intersections:
intersect ::Eqa=>[a]->[a]->[a]
intersect []s =[]
intersect (x:xs)s|elemxs=x:intersect xss
|otherwise =intersect xss
Note thatbecause thedeﬁnitions ofunion andintersect contain calls todelete
orelem theypresuppose thatthetypeahasanequality relation deﬁned onit.This
isreﬂected inthetype declarations fortheoperations.
Exer cise4.51 The Hask elloperation forlistdifference ispredeﬁned as\\in
List.hs .Write your ownversion ofthis.
4.8.USINGLISTSTOREPRESENT SETS 151
The predeﬁned versions ofthefunctions elem andnotElem fortesting whether
anobject occurs inalistornotusethefunctions anyandall:
elem,notElem ::Eqa=>a->[a]->Bool
elem =any.(==)
notElem =all.(/=)
Becautious with this:elem0[1..] willrunforever.
Let’sturntoanoperation forthelistofallsublists ofagivenlist.Forthis, weﬁrst
need todeﬁne howoneadds anewobject toeach ofanumber oflists. This can
bedone with theHask ellfunctionmap.Adding anelementxtoalistlthatdoes
notcontainxisjustamatter ofapplying thefunction(x:) (preﬁxing theelement
x)tol.Therefore, thefollo wing simple deﬁnition givesanoperation thatadds an
elementxtoeach listinalistoflists.
addElem ::a->[[a]]->[[a]]
addElem x=map(x:)
Note thetype declaration: [[a]] denotes thetype oflists overthetype oflists
overtypea.
Theoperation addElem isused implicitly intheoperation forgenerating thesub-
listsofalist:
powerList ::[a]->[[a]]
powerList []=[[]]
powerList (x:xs)=(powerList xs)++(map(x:)(powerList xs))
Here isthefunction inaction:
STAL>powerList [1,2,3]
[[],[3],[2],[2,3],[1],[1,3],[1,2],[1,2,3]]
152 CHAPTER 4.SETS,TYPESANDLISTS
Example 4.52 Foraconnection with Exercise 4.30, letustrytofoolHask ellinto
generating thelistcounterparts of}2(;)=}(f;g),}3(;)and}4(;).Some fool-
ingisnecessary ,because Hask ellismuch lessﬂexible than settheory about types.
Insettheory ,wehave:;::s,f;g::s,ff;gg ::s,forthese areallsets. InHask ell,
thetype oftheempty listispolymorphic, i.e.,wehave[]::[a].Thus, thelist
counterpart of}2(;)=f;;f;gg ,canbeconsistently typed:
STAL>:t[[],[[]]]
[[],[[]]] ::[[[a]]]
What happens isthattheﬁrstoccurrence of[]gets type[[a]] ,andthesecond
occurrence type[a],sothat[[],[[]]] isalistcontaining twoobjects ofthe
same type[[a]] ,andisitself oftype[[[a]]] .However,Hask ellrefuses to
display alistofthegeneric type[a].Theempty listwillonly bedisplayed ina
setting where itisclear what thetype isoftheobjects thatarebeing listed:
STAL>[x|x<-[1..10], x<0]
[]
This isOK, foritisclear from theconte xtthat[]isanempty listofnumbers.
STAL>[]
ERROR:Cannotfind"show"function for:
***Expression :[]
***Oftype :[a]
STAL>[[],[[]]]
ERROR:Cannotfind"show"function for:
***Expression :[[],[[]]]
***Oftype :[[[a]]]
These arenotOK, fortheconte xtdoes notmakeclear what thetypes are.
The follo wing data type declaration introduces adata typeScontaining asin-
gleobjectVoid .Youshould think ofthisassomething very mysterious, forthe
Void istheunfathomable source ofaninﬁnite list-theoretic universe builtfrom
empty::[S].Void isused only toprovideempty with atype.
dataS=Voidderiving (Eq,Show)
empty::[S]
empty=[]
4.9.ADATATYPEFORSETS 153
Here aretheﬁrststages ofthelistuniverse:
STAL>powerList empty
[[]]
STAL>powerList (powerList empty)
[[],[[]]]
STAL>powerList (powerList (powerList empty))
[[],[[[]]],[[]],[[],[[]]]]
STAL>powerList (powerList (powerList (powerList empty)))
[[],[[[],[[]]]],[[[]]],[[[]], [[],[[]]]],[[[[]]]],[[[[]]],[[],[[]]]],
[[[[]]],[[]]],[[[[]]],[[]],[[ ],[[]]]],[[]],[[],[[],[[]]]],[[],[[]]],
[[],[[]],[[],[[]]]],[[],[[[]] ]],[[],[[[]]],[[],[[]]]],
[[],[[[]]],[[]]],[[],[[[]]],[ []],[[],[[]]]]]
STAL>
Exer cise4.53 Write functions genUnion andgenIntersect forgeneralized list
union andlistintersection. Thefunctions should beoftype[[a]]-> [a].They
takealistoflistsasinput andproduce alistasoutput. Note thatgenIntersect is
undeﬁned ontheempty listoflists (compare theremark about thepresupposition
ofgeneralized intersection onpage 134).
4.9 AData TypeforSets
The representation ofsetsaslists without duplicates hasthedrawback thattwo
ﬁnite lists containing thesame elements, butinadifferent order ,e.g.,[1,2,3]
and[3,2,1] ,areunequal aslists, butequal assets. TheHask ellequality operator
==givesthewrong results when weareinterested insetequality .Forinstance, we
get:
Prelude> [1,2,3] ==[3,2,1]
False
Prelude>
This canberemedied bydeﬁning aspecial data type forsets, with amatching
deﬁnition ofequality .Allthisisprovided inthemodule SetEq.hs thatisgivenin
Figs. 4.7and4.8. Ifaisanequality type, thenSetaisthetype ofsetsovera.
Thenewtype declaration allowsustoputSetaasaseparate type intheHask ell
type system.
Equality forSetaisdeﬁned interms ofthesubSet relation:
154 CHAPTER 4.SETS,TYPESANDLISTS
moduleSetEq(Set(..),emptySet,isEmpty,in Set,subSet,insertSet,
deleteSet,powerSet,takeSet, list2set,(!!!))
where
importList(delete)
infixl9!!!
newtype Seta=Set[a]
instance Eqa=>Eq(Seta)where
set1==set2=subSetset1set2&&subSetset2set1
instance (Showa)=>Show(Seta)where
showsPrec _(Sets)str=showSet sstr
showSet []str=showString "{}"str
showSet (x:xs)str=showChar '{'(showsx(showlxsstr))
whereshowl[]str=showChar '}'str
showl(x:xs)str=showChar ','(showsx(showlxsstr))
emptySet ::Seta
emptySet =Set[]
isEmpty ::Seta->Bool
isEmpty (Set[])=True
isEmpty _ =False
inSet::(Eqa)=>a->Seta->Bool
inSetx(Sets)=elemxs
subSet::(Eqa)=>Seta->Seta->Bool
subSet(Set[]) _=True
subSet(Set(x:xs)) set=(inSetxset)&&subSet(Setxs)set
insertSet ::(Eqa)=>a->Seta->Seta
insertSet x(Setys)|inSetx(Setys)=Setys
|otherwise =Set(x:ys)
Figure 4.7:AModule forSets asUnordered Lists Without Duplicates.
4.9.ADATATYPEFORSETS 155
deleteSet ::Eqa=>a->Seta->Seta
deleteSet x(Setxs)=Set(delete xxs)
list2set ::Eqa=>[a]->Seta
list2set []=Set[]
list2set (x:xs)=insertSet x(list2set xs)
powerSet ::Eqa=>Seta->Set(Seta)
powerSet (Setxs)=Set(map(\xs->(Setxs))(powerList xs))
powerList ::[a]->[[a]]
powerList []=[[]]
powerList (x:xs)=(powerList xs)++(map(x:)(powerList xs))
takeSet ::Eqa=>Int->Seta->Seta
takeSet n(Setxs)=Set(takenxs)
(!!!)::Eqa=>Seta->Int->a
(Setxs)!!!n=xs!!n
Figure 4.8:AModule forSets asUnordered Lists Without Duplicates (ctd).
instance Eqa=>Eq(Seta)where
set1==set2=subSetset1set2&&subSetset2set1
Theinstance declaration says thatifaisinclassEq,thenSetaisalso inthat
class, with==deﬁned asspeciﬁed, interms oftheprocedure subSet ,thatinturn
isdeﬁned recursi velyinterms ofinSet .This gives:
SetEq>Set[2,3,1] ==Set[1,2,3]
True
SetEq>Set[2,3,3,1,1,1] ==Set[1,2,3]
True
SetEq>
The module SetEq.hs givessome useful functions fortheSet type. Intheﬁrst
place, itisconvenient tobeable todisplay setsintheusual notation.
156 CHAPTER 4.SETS,TYPESANDLISTS
instance (Showa)=>Show(Seta)where
showsPrec _(Sets)=showSet s
showSet []str=showString "{}"str
showSet (x:xs)str=showChar '{'(showsx(showlxsstr))
whereshowl[]str=showChar '}'str
showl(x:xs)str=showChar ','(showsx(showlxsstr))
This gives:
SetEq>Set[1..10]
{1,2,3,4,5,6,7,8,9,10}
SetEq>powerSet (Set[1..3])
{{},{3},{2},{2,3},{1},{1,3},{ 1,2},{1,2,3}}
SetEq>
The empty setemptySet andthetestisEmpty areimplemented asyouwould
expect. Useful functions foroperating onsetsareinsertSet anddeleteSet .
ThefunctioninsertSet isused toimplement thetranslation function from lists
tosetslist2set .ThefunctionpowerSet isimplemented byliftingpowerList
tothetype ofsets.
Exer cise4.54 Giveimplementations oftheoperations
unionSet ,intersectSet anddifferenceSet ,
interms ofinSet ,insertSet anddeleteSet .
Exer cise4.55 Inanimplementation ofsetsaslistswithout duplicates, theimple-
mentation ofinsertSet hastobechanged. How?
Figure 4.9givesamodule forgenerating theﬁrst ﬁvelevelsofthesettheoretic
hierarchy:V0=;,V1=}(;),V2=}2(;),V3=}3(;),V4=}4(;),V5=
}5(;).DisplayingV5infulltakessome time, buthere aretheﬁrst fewitems.
This uses theoperator!!!,deﬁned intheSetEq module asaleft-associati veinﬁx
operator bymeans ofthereserv edkeywordinfixl (thekeywordinfixr canbe
used todeclare right associati veinﬁx operators).
Hierarchy> v5!!!0
4.9.ADATATYPEFORSETS 157
moduleHierarchy where
importSetEq
dataS=Voidderiving (Eq,Show)
empty,v0,v1,v2,v3,v4,v5 ::SetS
empty=Set[]
v0=empty
v1=powerSet v0
v2=powerSet v1
v3=powerSet v2
v4=powerSet v3
v5=powerSet v4
Figure 4.9:TheFirst FiveLevelsoftheSetTheoretic Universe.
Hierarchy> display 88(take1760(showv5))
{{},{{{},{{{}}},{{}},{{},{{}}}}},{{{},{{{}}},{{}}}},{ {{},{{{}}},{{}} },{{},{{ {}}},{{} },{{
},{{}}}}},{{{},{{{}}},{{},{{}}}}},{{{},{{{}}},{{},{{} }}},{{},{{{}}}, {{}},{{} ,{{}}}}} ,{{{
},{{{}}},{{},{{}}}},{{},{{{}}},{{}}}},{{{},{{{}}},{{} ,{{}}}},{{},{{{ }}},{{}} },{{},{{ {}}}
,{{}},{{},{{}}}}},{{{},{{{}}}}},{{{},{{{}}}},{{},{{{} }},{{}},{{},{{} }}}},{{{ },{{{}}} },{{
},{{{}}},{{}}}},{{{},{{{}}}},{{},{{{}}},{{}}},{{},{{{ }}},{{}},{{},{{ }}}}},{{ {},{{{}} }},{
{},{{{}}},{{},{{}}}}},{{{},{{{}}}},{{},{{{}}},{{},{{} }}},{{},{{{}}}, {{}},{{} ,{{}}}}} ,{{{
},{{{}}}},{{},{{{}}},{{},{{}}}},{{},{{{}}},{{}}}},{{{ },{{{}}}},{{},{ {{}}},{{ },{{}}}} ,{{}
,{{{}}},{{}}},{{},{{{}}},{{}},{{},{{}}}}},{{{},{{}},{ {},{{}}}}},{{{} ,{{}},{{ },{{}}}} ,{{}
,{{{}}},{{}},{{},{{}}}}},{{{},{{}},{{},{{}}}},{{},{{{ }}},{{}}}},{{{} ,{{}},{{ },{{}}}} ,{{}
,{{{}}},{{}}},{{},{{{}}},{{}},{{},{{}}}}},{{{},{{}},{ {},{{}}}},{{},{ {{}}},{{ },{{}}}} },{{
{},{{}},{{},{{}}}},{{},{{{}}},{{},{{}}}},{{},{{{}}},{ {}},{{},{{}}}}} ,{{{},{{ }},{{},{ {}}}
},{{},{{{}}},{{},{{}}}},{{},{{{}}},{{}}}},{{{},{{}},{ {},{{}}}},{{},{ {{}}},{{ },{{}}}} ,{{}
,{{{}}},{{}}},{{},{{{}}},{{}},{{},{{}}}}},{{{},{{}},{ {},{{}}}},{{},{ {{}}}}}, {{{},{{} },{{
},{{}}}},{{},{{{}}}},{{},{{{}}},{{}},{{},{{}}}}},{{{} ,{{}},{{},{{}}} },{{},{{ {}}}},{{ },{{
{}}},{{}}}},{{{},{{}},{{},{{}}}},{{},{{{}}}},{{},{{{} }},{{}}},{{},{{ {}}},{{} },{{},{{ }}}}
},{{{},{{}},{{},{{}}}},{{},{{{}}}},{{},{{{}}},{{},{{} }}}},{{{},{{}}, {{},{{}} }},{{},{ {{}}
}},{{},{{{}}},{{},{{}}}},{{},{{{}}},{{}},{{},{{}}}}}, {{{},{{}},{{},{ {}}}},{{ },{{{}}} },{{
},{{{}}},{{},{{}}}},{{},{{{}}},{{}}}},{{{},{{}},{{},{ {}}}},{{},{{{}} }},{{},{ {{}}},{{ },{{
}}}},{{},{{{}}},{{}}},{{},{{{}}},{{}},{{},{{}}}}},{{{ },{{}}}},{{{},{ {}}},{{} ,{{{}}}, {{}}
,{{},{{}}}}},{{{},{{}}},{{},{{{}}},{{}}}},{{{},{{}}}, {{},{{{}}},{{}} },{{},{{ {}}},{{} },{{
Figure 4.10: Aninitial segment of}5(;).
158 CHAPTER 4.SETS,TYPESANDLISTS
{}
Hierarchy> v5!!!1
{{{},{{{}}},{{}},{{},{{}}}}}
Hierarchy> v5!!!2
{{{},{{{}}},{{}}}}
Hierarchy> v5!!!3
{{{},{{{}}},{{}}},{{},{{{}}}, {{}},{{},{{}}}}}
Hierarchy>
Figure 4.10 displays abitmore oftheinitial segment of}5(;),with thehelp ofthe
follo wing function:
display ::Int->String->IO()
display nstr=putStrLn (display' n0str)
where
display' __[]=[]
display' nm(x:xs)|n==m='\n':display' n0(x:xs)
|otherwise =x:display' n(m+1)xs
Exer cise4.56 What would havetochange inthemodule SetEq.hs togetarepre-
sentation oftheempty setas0?
Exer cise4.57*
1.Howmanypairs ofcurly bracesfgoccur intheexpanded notation for}5(;),
intherepresentation where;appears asfg?
2.Howmanycopies of0occur intheexpanded notation for}5(;),inthe
representation where;appears as0(Exercise 4.56)?
3.Howmanypairs ofcurly braces occur intheexpanded notation for}5(;),
intherepresentation where;appears as0?
4.10 Further Reading
Russell’ sparadox, asstated byRussell himself, canbefound in[Rus67 ].Afurther
introduction tosetsandsettheory isDoets, VanDalen andDeSwart[DvDdS78 ].
4.10.FURTHERREADING 159
Agood introduction totype theory isgivenin[Hin97 ].There aremanybooks on
database query andatabase design; alucid introduction is[SKS01 ].SQL (Stan-
dard Query Language) isexplained inthedocumentation ofallstate oftheart
relational databases. Implementations oftherelational database model arefreely
available ontheInternet. See, e.g.,www.postgresql.o rgorwww.mysql.com .
Logical foundations ofdatabase theory aregivenin[AHV95 ].
160 CHAPTER 4.SETS,TYPESANDLISTS
Chapter5
Relations
Preview
The ﬁrst section ofthischapter explains theabstract notion ofarelation. Sec-
tion 5.2discusses various properties ofrelations. Next,inSections 5.3and5.4,
wediscuss various possible implementations ofrelations andrelation processing.
Sections 5.5and5.6focus onanoften occurring type ofrelation: theequivalence .
Thefollo wing declaration turns thecode inthischapter intoamodule thatloads
theList module (tobefound insame directory asPrelude .hs,under thename
List.hs ),andtheSetOrd module (seebelow,inFigs. 5.3and5.4).
moduleREL
where
importList
importSetOrd
161
162 CHAPTER 5.RELATIONS
5.1 The Notion ofaRelation
Although youprobably willnotbeable toexplain thegeneral notion ofarelation,
youaredeﬁnitely familiar with acouple ofinstances, such astheusual ordering
relation<between natural numbers, orthesubset relationbetween sets. Non-
mathematical examples arethedifferent family relationships thatexistbetween
humans. Forinstance, thefather -ofrelation holds between twopeople iftheﬁrst
oneisthefather ofthesecond.
Foreverytwonumbersn;m2N,thestatementn<miseither trueorfalse. E.g.,
3<5istrue, whereas 5<2isfalse. Ingeneral: toarelation youcan“input” a
pairofobjects, after which it“outputs” either trueorfalse .depending onwhether
these objects areintherelationship given.
Insettheory ,there isacleverwaytoreduce thenotion ofarelation tothatofaset.
Consider again theordering 6onN.Withit,associate thesetRofordered pairs
(n;m)ofnatural numbers forwhichn6mistrue:
R6=f(n;m)2N2jn6mg:
Note thatastatementn6mnowhasbecome tantamount with thecondition, that
(n;m)2R6.Thus, (3;5)2R6,and(5;2)62R6.
This connection canbeconverted intoadeﬁnition. That is,theordering relation 6
ofNisidentiﬁed with thesetR6.Thefollo wing deﬁnition puts itbluntly .
Deﬁnition 5.1(Relations, Domain, Range) Arelation isasetofordered pairs.
Instead of(x;y)2R—whereRisarelation —oneusually writesxRy,or
R(x;y),orRxy.
Thesetdom(R)=fxj9y(xRy)g,i.e.,thesetconsisting ofallﬁrstcoordinates
ofpairs inR,iscalled thedomain ofRandran(R)=fyj9x(xRy)g,thesetof
second coordinates ofpairs inR,itsrange.
Example 5.2IfAandBaresets, thenABisarelation. The empty set;
trivially isarelation (for,allitsmembers areordered pairs).
dom(;)=ran(;)=;,dom(AB)=A(providedBisnon-empty: A;=;,
thusdom(A;)=;),andran(AB)=B(analogously: providedAisnon-
empty).
Deﬁnition 5.3(From...to,Between, On) TherelationRisarelation fromAto
BorbetweenAandB,ifdom(R)Aandran(R)B.
Arelation fromAtoAiscalled onA.
5.1.THENOTIONOFARELATION 163
IfRisarelation onA,thenAiscalled theunderlying set(ofthestructure that
consists ofthedomainAandtherelationR).
Example 5.4R=f(1;4);(1;5);(2;5)gisarelation fromf1;2;3gtof4;5;6g,
anditalsoisarelation onf1;2;4;5;6g.Furthermore, dom(R)=f1;2g,ran(R)=
f4;5g.
Example 5.5IfAisaset,thenisarelation on}(A).
-2-1012-2-1012
-2-1012-2-1012
Figure 5.1:Therelations 6and>onR2.
Example 5.6The relations 6and>onRaresubsets oftherealplane R2,and
canbepictured asinFigure 5.1.
Deﬁnition 5.7(Identity andInverse)
1.A=f(a;b)2A2ja=bg=f(a;a)ja2Agisarelation onA,the
identity onA.
2.IfRisarelation betweenAandB,thenR 1=f(b;a)jaRbg,theinverse
ofR,isarelation betweenBandA.
Example 5.8Theinverseoftherelation ‘parent of’istherelation ‘child of’.
164 CHAPTER 5.RELATIONS
-2-1012-2-1012
-2-1012-2-1012
Figure 5.2:Therelations RandRRonR2.
Example 5.9
1.ABisthebiggest relation fromAtoB.
2.;isthesmallest relation fromAtoB.
3.Fortheusual ordering<ofR,< 1=>.
4.(R 1) 1=R; 1
A=A;; 1=;and(AB) 1=BA.
Inpractice, youdeﬁne arelation bymeans ofacondition ontheelements ofor-
dered pairs. This iscompletely analogous tothewayyoudeﬁne asetbygiving a
condition itselements should fulﬁll.
Example 5.10 IfRisthesetofpairs(n;m)(n;m2Z)such that(condition )n2
isadivisor ofm,thedeﬁnition ofRmay look asfollo ws:
Forn;m2Z:nRm:n2jm.
InHask ellthisisimplemented as:\nm->remmn^2==0.
5.1.THENOTIONOFARELATION 165
Example 5.11 Foralln2N,thesetofpairsf(a;b)ja;b2N;ab=n;a6
bgisarelation onN.This relation givesallthedivisor pairs ofn.Here isits
implementation:
divisors ::Integer ->[(Integer,Integer)]
divisors n=[(d,quotnd)|d<-[1..k], remnd==0]
wherek=floor(sqrt(fromInteger n))
Example 5.12 Wecanusetherelationdivisors oftheprevious example foryet
another implementation oftheprimality test:
prime'' ::Integer ->Bool
prime'' =\n->divisors n==[(1,n)]
Also, here arethelistofdivisors ofanatural number ,thelistofallproper divisors
ofanatural number ,andatestforbeing aperfect natural number:
divs::Integer ->[Integer]
divsn=(fstlist)++reverse (sndlist)
wherelist=unzip(divisors n)
properDivs ::Integer ->[Integer]
properDivs n=init(divsn)
perfect ::Integer ->Bool
perfect n=sum(properDivs n)==n
‘Ther eisarelation betweenaandb.’Indaily life, astatement like‘there is
arelation betweenaandb’(or: ‘aandbarehaving arelation’) may notsound
166 CHAPTER 5.RELATIONS
unusual, butinthepresent conte xtthisshould beavoided. Notbecause these are
falsestatements, butbecause theyaresooverlytrue, and, therefore, uninformati ve.
Cf.Exercise 5.13. Ofcourse, astatement like‘astands inrelationRtob’or‘the
relationRsubsists betweenaandb’canverywell beinformati ve,whenRissome
speciﬁc relation.
Exer cise5.13 Showthat8x8y9R(xRy).(“Between everytwothings there exist
some relation. ”)
Ineveryday situations, bysaying thataandbarerelated weusually mean more
than that itispossible toform theordered pair ofaandb.Weusually mean
that there issome good reason forconsidering thepair(a;b),because there is
some speciﬁc linkbetweenaandb(forinstance, youcanmakeMrs.ablush by
mentioning Mr.binconversation).
5.2 Properties ofRelations
Inthissection welistsome useful properties ofrelations onasetA.Further on,
inSections 5.3and5.4, wewill illustrate howtests forthese properties canbe
implemented.
ArelationRisreﬂexi veonAifforeveryx2A:xRx.
Example 5.14 OnanysetA,therelation Aisreﬂexive.Note thatAisthe
smallest reﬂexiverelation onA:itisasubset ofanyreﬂexiverelation onA.In
other words, arelationRisreﬂexiveonAiffAR.
Example 5.15 Therelation 6onNisreﬂexive(foreverynumber islessthan or
equal toitself).
ArelationRonAisirreﬂexi veiffornox2A:xRx.
Example 5.16 Therelation<onNisirreﬂe xive.
Exer cise5.17 ShowthatarelationRonAisirreﬂe xiveiffA\R=;.
There arerelations which areneither reﬂexivenorirreﬂe xive(thereader isurged
tothink upanexample).
ArelationRonAissymmetric ifforallx;y2A:ifxRythenyRx.
5.2.PROPERTIESOFRELATIONS 167
Example 5.18 Therelation ‘having thesame age’ between people issymmetric.
Unfortunately ,therelation ‘being inlovewith’ between people isnotsymmetric.
Exer cise5.19 Showthefollo wing:
1.ArelationRonasetAissymmetric iff8x;y2A(xRy,yRx).
2.ArelationRissymmetric iffRR 1,iffR=R 1.
ArelationRonAisasymmetric ifforallx;y2A:ifxRythen notyRx.
The relation<onNisasymmetric. Itisimmediate from thedeﬁnition that a
relationRonAisasymmetric iffR\R 1=;.Note thatthere arerelations
which areneither symmetric norasymmetric.
Exer cise5.20 Showthateveryasymmetric relation isirreﬂe xive.
ArelationRonAisantisymmetric ifforallx;y2A:ifxRyandyRxthen
x=y.
Example 5.21 Therelationmjn(misadivisor ofn)onNisantisymmetric. Ifm
isadivisor ofnandnisadivisor ofm,thenmandnareequal.
Therelation inexample 5.15 isantisymmetric.
Exer cise5.22 Showfrom thedeﬁnitions that anasymmetric relation alwaysis
antisymmetric.
The converse ofthestatement inExercise 5.22 isnottrue: therelation 6onN
provides acountere xample.
ArelationRonAistransiti veifforallx;y;z2A:ifxRyandyRzthenxRz.
Examples oftransiti verelations are<and6onN.IfFistherelation ‘friendship’
onasetofpeopleE,andeverymember ofEendorses thelaudable principle “The
friends ofmyfriends aremyfriends”, thenFistransiti ve.
Exer cise5.23 ShowthatarelationRonasetAistransiti veiff
8x;z2A(9y2A(xRy^yRz))xRz):
168 CHAPTER 5.RELATIONS
ArelationRonAisintransiti veifforallx;y;z2A:ifxRyandyRzthen not
xRz.
Example 5.24 Therelation ‘father of’onthesetofallhuman beings isintransi-
tive.
Again: there arerelations thatareneither transiti venorintransiti ve(think upan
example).
ArelationRonAisapre-order (orquasi-order )ifRistransiti veandreﬂexive.
Example 5.25 LetLbethesetofallpropositional formulas builtfrom agivenset
ofatomic propositions. Then therelationj=givenby
Pj=QiffP)Qislogically valid
isapre-order onL.Tocheck this, note thatforeverypropositional formulaP,
P)Pislogically valid, soj=isreﬂexive.Also, forallpropositional formulas
P;Q;R,ifP)QandQ)Rarelogically valid, thenP)Rislogically
valid. This canbecheck edasfollo ws,bycontraposition. SupposeP)Risnot
logically valid. Then there isavaluation fortheatomic propositions thatmakesP
trueandRfalse. Nowthere aretwopossibilities: thisvaluation makesQtrueor
itmakesQfalse. IfitmakesQtrue, then weknowthatQ)Risnotlogically
valid. IfitmakesQfalse, then weknowthatP)Qisnotlogically valid. So
eitherP)QorQ)Risnotlogically valid. This showsthatj=istransiti ve.
Example 5.26 LetLbethesetofallpropositional formulas builtfrom agivenset
ofatomic propositions. Then therelation`onLgivenbyP`Qiffthere isa
proof ofQfrom thegivenP(this relation wasdeﬁned inChapter 3)isapre-order .
Seeexample 3.1forthetransiti vity of`.Infact,therelation`coincides with
therelationj=oftheprevious example. Thesafety checks ontheproof rules for
thelogical connecti vesthatwere performed inChapter 3guarantee that`j=.
This factiscalled thesoundness oftheproof system. Theinclusion intheother
direction,j=`,iscalled thecompleteness oftheproof system. Itisoutside the
scope ofthisbook, butitisprovedin[EFT94 ].
ArelationRonAisastrict partial order ifRistransiti veandirreﬂe xive.A
relationRonAisapartial order ifRistransiti ve,reﬂexiveandantisymmetric.
Note thattherelationj=from example 5.25 isnotantisymmetric. Taketheformu-
lasP^QandQ^P.Then wehaveP^Qj=Q^PandQ^Pj=P^Q,but
P^QandQ^Paredifferent formulas. Thus,j=isnotapartial order .
5.2.PROPERTIESOFRELATIONS 169
Example 5.27 Therelation<onNisastrict partial order andtherelation 6on
Nisapartial order .Theorem 4.1states thatforanysetA,therelationon}(A)
isapartial order .
Exer cise5.28 Showthateverystrict partial order isasymmetric.
Exer cise5.29 Showthateveryrelation which istransiti veandasymmetric isa
strict partial order .
Exer cise5.30 ShowthatifRisastrict partial order onA,thenR[Aisapartial
order onA.(Soeverystrict partial order iscontained inapartial order .)
Exer cise5.31 Showthattheinverseofapartial order isagain apartial order .
ArelationRonAislinear (or:hasthecomparison property )ifforallx;y2A:
xRyoryRxorx=y.Apartial order thatisalsolinear iscalled atotal order .
AllHask elltypes inclassOrdaaretotal orders. AsetAwith atotal order onit
iscalled achain.
Exer cise5.32 LetSbeareﬂexiveandsymmetric relation onasetA.
Apath isaﬁnite sequencea1;:::;anofelements ofAsuch that foreveryi,
16i<n,wehavethataiSai+1.Such apath connectsa1withan.
Assume thatforalla;b2Athere isexactly onepath connectingawithb.
Fixr2A.Deﬁne therelation 6onAby:a6biffaisoneoftheelements inthe
path connectingrwithb.
Showthefollo wing:
1.6isreﬂexive,
2.6isantisymmetric.
3.6istransiti ve,
4.foralla2A,r6a,
5.foreverya2A,thesetXa=fx2Ajx6agisﬁnite andifb;c2Xa
thenb6corc6b.
(Astructure (A;6;r)with these ﬁveproperties iscalled atreewith rootr.The
directory-structure ofacomputer account isanexample ofatree. Another example
isthestructure treeofaformula (see Section 2.3above).These areexamples of
ﬁnite trees, butifAisinﬁnite, then thetree(A;6;r)willhaveatleast oneinﬁnite
branch.)
170 CHAPTER 5.RELATIONS
Here isalistofalltherelational properties ofbinary relations onasetAthatwe
discussed:
reﬂexi vity8xxRx.
irreﬂexi vity8x:xRx.
symmetry8xy(xRy)yRx).
asymmetry8xy(xRy):yRx).
antisymmetry8xy(xRy^yRx)x=y).
transiti vity8xyz(xRy^yRz)xRz).
intransiti vity8xyz(xRy^yRz):xRz).
linearity8xy(xRy_yRx_x=y).
Because oftheir importance, relations thataretransiti ve,reﬂexiveandsymmetric
(equi valence relations) deserv easection oftheir own(seeSection 5.5).
irre¯re¯asymm antisymm symm translinear
pre-orderp p
strictpartialorderp p p p
partialorderp p p
totalorderp p p p
equivalencep p p
Exer cise5.33 Consider thefollo wing relations onthenatural numbers. Check
their properties (some answers canbefound inthetextabove).The successor
relation istherelation givenbyf(n;m)jn+1=mg.The divisor relation
isf(n;m)jndividesmg.The coprime relationConNisgivenbynCm:
GCD(n;m)=1,i.e.,theonly factor ofnthatdividesmis1,andvice versa(see
Section 8.2).
<6 successor divisor coprime
irreﬂe xive
reﬂexive
asymmetric
antisymmetric
symmetric
transiti ve
linear
Deﬁnition 5.34 IfOisasetofproperties ofrelations onasetA,then theO-
closure ofarelationRisthesmallest relationSthatincludesRandthathasall
theproperties inO.
5.2.PROPERTIESOFRELATIONS 171
Themost important closures arethereﬂexive closur e,thesymmetric closur e,the
transitive closur eandthereﬂexivetransitive closur eofarelation.
Remark. ToshowthatRisthesmallest relationSthathasalltheproperties in
O,showthefollo wing:
1.Rhasalltheproperties inO,
2.IfShasalltheproperties inO,thenRS.
Exer cise5.35 Suppose thatRisarelation onA.
1.ShowthatR[Aisthereﬂexiveclosure ofR.
2.ShowthatR[R 1isthesymmetric closure ofR.
Exer cise5.36 LetRbeatransiti vebinary relation onA.Does itfollo wfrom
thetransiti vity ofRthatitssymmetric reﬂexiveclosureR[R 1[Aisalso
transiti ve?Giveaproof ifyour answer isyes,acountere xample otherwise.
Todeﬁne thetransiti veandreﬂexivetransiti veclosures ofarelation weneed the
concept ofrelation composition.
Composing Relations. Suppose thatRandSarerelations onA.Thecomposition
RSofRandSistherelation onAthatisdeﬁned by
x(RS)z:9y2A(xRy^ySz):
Furthermore, forn2N;n>1wedeﬁneRnbymeans ofR1:=R,Rn+1:=
RnR.
Example 5.37 Inimperati veprogramming, themeaning ofacommand canbe
viewed asarelation onasetofmachine states, where amachine state isasetof
pairs consisting ofmachine registers with their contents. Ifs=f(r1;4);(r2;6);:::g
then executingr2:=r1instatesgivesanewstates0=f(r1;4);(r2;4);:::g.
IfC1andC2arecommands, then wecanexecute them insequential order as
C1;C2orasC2;C1.Ifthemeaning ofcommandC1isRandthemeaning of
commandC2isS,then themeaning ofC1;C2isRSandthemeaning ofC2;C1
isSR.
172 CHAPTER 5.RELATIONS
Exer cise5.38 Determine thecomposition oftherelation “father of”with itself.
Determine thecomposition oftherelations “brother of”and“parent of”Givean
example showing thatRS=SRcanbefalse.
Exer cise5.39 Consider therelation
R=f(0;2);(0;3);(1;0);(1;3);(2;0);(2;3)g
onthesetA=f0;1;2;3;4g.
1.DetermineR2,R3andR4.
2.GivearelationSonAsuch thatR[(SR)=S.
Exer cise5.40 Verify:
1.ArelationRonAistransiti veiffRRR.
2.Giveanexample ofatransiti verelationRforwhichRR=Risfalse.
Exer cise5.41 Verify:
1.Q(RS)=(QR)S.(Thus, thenotationQRSisunambiguous.)
2.(RS) 1=S 1R 1.
Wewill showthatforanyrelationRonA,therelationR+=S
n>1Rnisthe
transiti veclosure ofR.
BecauseR=R1S
n>1Rn,weknowthatRR+.Westillhavetoprove
thatR+istransiti ve,andmoreo verthatitisthesmallest transiti verelation that
containsR.
ToseethatR+istransiti ve,assumexR+yandyR+z.FromxR+ywegetthat
there issomek>1withxRky.FromyR+zwegetthatthere issomem>1
withyRmz.Itfollo wsthatxRk+mz,andthereforexR+z,proving thatR+is
transiti ve.
5.2.PROPERTIESOFRELATIONS 173
Proposition 5.42R+isthesmallest transiti verelation thatcontainsR.
Proof.Theproposition canberestated asfollo ws.IfTisatransiti verelation on
Asuch thatRT,thenR+T.Weprovethisfactbyinduction (see Chapter
7).
Basis IfxRythen itfollo wsfromRTthatxTy.
Induction step Assume (induction hypothesis) thatRnT.Wehavetoshow
thatRn+1T.Consider apair(x;y)withxRn+1y.Then, bythedeﬁnition
ofRn+1,there isazsuch thatxRnzandzRy.BecauseRTwehave
zTy,andtheinduction hypothesis yieldsxTz.Bytransiti vityofTitnow
follo wsthatxTy.
Example 5.43 IfA=fa;fb;fcggg,then
a2+A;fb;fcgg2+A;b2+A;fcg2+Aandc2+A:
Example 5.44 Onthesetofhuman beings, thetransiti veclosure ofthe‘parent
of’relation isthe‘ancestor of’relation, andthetransiti veclosure ofthe‘child of’
relation isthe‘descendant of’relation.
Exer cise5.45 Showthattherelation<onNisthetransiti veclosure oftherelation
R=f(n;n+1)jn2Ng.
Exer cise5.46 LetRbearelation onA.ShowthatR+[Aisthereﬂexive
transiti veclosure ofR.
Thereﬂexivetransiti veclosure ofarelationRisoften called theancestr alofR,
notationR.Note thatRisapre-order .
Exer cise5.47 Givethereﬂexivetransiti veclosure ofthefollo wing relation:
R=f(n;n+1)jn2Ng:
Exer cise5.48*
174 CHAPTER 5.RELATIONS
1.Showthatanintersection ofarbitr arily many transiti verelations istransiti ve.
2.Suppose thatRisarelation onA.Note thatA2isoneexample ofatransiti ve
relation onAthatextendsR.Conclude thattheintersection ofalltransiti ve
relations extendingRistheleast transiti verelation extendingR.Inother
words,R+equals theintersection ofalltransiti verelations extendingR.
Exer cise5.49*
1.Showthat(R) 1=(R 1).
2.Showbymeans ofacounter -example that(R[R 1)=R[R 1may
befalse.
3.Prove:ifSRRS,then(RS)RS.
Exer cise5.50 Suppose thatRandSarereﬂexiverelations onthesetA.Then
ARandAS,soAR\S,i.e.,R\Sisreﬂexiveaswell. Wesay:
reﬂexivityispreserv edunder intersection. Similarly ,ifRandSarereﬂexive,then
AR[S,soR[Sisreﬂexive.Reﬂe xivityispreserv edunder union. IfR
isreﬂexive,thenAR 1,soR 1isreﬂexive.Reﬂe xivityispreserv edunder
inverse. IfRandSarereﬂexive,ARS,soRSisreﬂexive.Reﬂe xivityis
preserv edunder composition. Finally ,ifRonAisreﬂexive,then thecomplement
ofR,i.e.,therelationA2 R,isirreﬂe xive.Soreﬂexivityisnotpreserv edunder
complement. These closure properties ofreﬂexiverelations arelisted inthetable
below.
Wecanaskthesame questions forother relational properties. SupposeRand
Saresymmetric relations onA.Does itfollo wthatR\Sissymmetric? That
R[Sissymmetric? ThatR 1issymmetric? ThatA2 Rissymmetric? That
RSissymmetric? Similarly fortheproperty oftransiti vity.These questions are
summarized inthetable below.Complete thetable byputting ‘yes’ or‘no’ inthe
appropriate places.
property reﬂexivity symmetry transitivity
preserv edunder\? yes ? ?
preserv edunder[? yes ? ?
preserv edunder inverse? yes ? ?
preserv edunder complement? no ? ?
preserv edunder composition? yes ? ?
5.3.IMPLEMENTING RELATIONSASSETSOFPAIRS 175
5.3 Implementing Relations asSets ofPairs
Our point ofdeparture isaslight variation onthemodule SetEq.hs oftheprevi-
ousChapter .This time, werepresent setsaorderedlists without duplicates. See
Figs. 5.3and5.4foradeﬁnition ofthemodule SetOr d.hs.
Thedeﬁnition ofdeleteList inside Figure 5.3emplo ysaHask ellfeature thatwe
haven’tencountered before:ys@(y:ys') isanotation thatallowsustorefer tothe
non-empty list(y:ys') bymeans ofys.Iftheitem tobedeleted isgreater then
theﬁrst element ofthelistthen theinstruction istodonothing. Doing nothing
boils downtoreturning thewhole listys.This possibility togiveaname toa
pattern isjustused forreadability .
Nextwedeﬁne relations overatypeaassetsofpairs ofthattype, i.e.,Relais
deﬁned andimplemented asSet(a,a) .
typeRela=Set(a,a)
domR givesthedomain ofarelation.
domR::Orda=>Rela->Seta
domR(Setr)=list2set [x|(x,_)<-r]
ranR givestherange ofarelation.
ranR::Orda=>Rela->Seta
ranR(Setr)=list2set [y|(_,y)<-r]
idRcreates theidentity relation AoverasetA:
176 CHAPTER 5.RELATIONS
moduleSetOrd(Set(..),emptySet,isEmpty,i nSet,subSet,insertSet,
deleteSet,powerSet,takeSet,(!! !),list2set)
where
importList(sort)
{--Setsimplemented asordered listswithout duplicates --}
newtype Seta=Set[a]deriving (Eq,Ord)
instance (Showa)=>Show(Seta)where
showsPrec _(Sets)str=showSet sstr
showSet []str=showString "{}"str
showSet (x:xs)str=showChar '{'(showsx(showlxsstr))
whereshowl[]str=showChar '}'str
showl(x:xs)str=showChar ','(showsx(showlxsstr))
emptySet ::Seta
emptySet =Set[]
isEmpty ::Seta->Bool
isEmpty (Set[])=True
isEmpty _ =False
inSet::(Orda)=>a->Seta->Bool
inSetx(Sets)=elemx(takeWhile (<=x)s)
subSet::(Orda)=>Seta->Seta->Bool
subSet(Set[])_ =True
subSet(Set(x:xs)) set=(inSetxset)&&subSet(Setxs)set
insertSet ::(Orda)=>a->Seta->Seta
insertSet x(Sets)=Set(insertList xs)
Figure 5.3:AModule forSets asOrdered Lists Without Duplicates.
5.3.IMPLEMENTING RELATIONSASSETSOFPAIRS 177
insertList x[]=[x]
insertList xys@(y:ys') =casecompare xyof
GT->y:insertList xys'
EQ->ys
_->x:ys
deleteSet ::Orda=>a->Seta->Seta
deleteSet x(Sets)=Set(deleteList xs)
deleteList x[]=[]
deleteList xys@(y:ys') =casecompare xyof
GT->y:deleteList xys'
EQ->ys'
_->ys
list2set ::Orda=>[a]->Seta
list2set []=Set[]
list2set (x:xs)=insertSet x(list2set xs)
--list2set xs=Set(foldrinsertList []xs)
powerSet ::Orda=>Seta->Set(Seta)
powerSet (Setxs)=
Set(sort(map(\xs->(list2set xs))(powerList xs)))
powerList ::[a]->[[a]]
powerList []=[[]]
powerList (x:xs)=(powerList xs)
++(map(x:)(powerList xs))
takeSet ::Eqa=>Int->Seta->Seta
takeSet n(Setxs)=Set(takenxs)
infixl9!!!
(!!!)::Eqa=>Seta->Int->a
(Setxs)!!!n=xs!!n
Figure 5.4:AModule forSets asOrdered Lists Without Duplicates (ctd).
178 CHAPTER 5.RELATIONS
idR::Orda=>Seta->Rela
idR(Setxs)=Set[(x,x)|x<-xs]
Thetotal relation overasetisgivenby:
totalR::Seta->Rela
totalR(Setxs)=Set[(x,y)|x<-xs,y<-xs]
invR invertsarelation (i.e., thefunction mapsRtoR 1).
invR::Orda=>Rela->Rela
invR(Set[])=(Set[])
invR(Set((x,y):r)) =insertSet (y,x)(invR(Setr))
inRchecks whether apairisinarelation.
inR::Orda=>Rela->(a,a)->Bool
inRr(x,y)=inSet(x,y)r
Thecomplement ofarelationRAAistherelationAA R.Theoperation
ofrelational complementation, relati vetoasetA,canbeimplemented asfollo ws:
complR::Orda=>Seta->Rela->Rela
complR(Setxs)r=
Set[(x,y)|x<-xs,y<-xs,not(inRr(x,y))]
Acheck forreﬂexivity ofRonasetAcanbeimplemented bytesting whether
AR:
5.3.IMPLEMENTING RELATIONSASSETSOFPAIRS 179
reflR::Orda=>Seta->Rela->Bool
reflRsetr=subSet(idRset)r
Acheck forirreﬂe xivityofRonAproceeds bytesting whether A\R=;:
irreflR ::Orda=>Seta->Rela->Bool
irreflR (Setxs)r=
all(\pair->not(inRrpair))[(x,x)|x<-xs]
Acheck forsymmetry ofRproceeds bytesting foreach pair(x;y)2Rwhether
(y;x)2R:
symR::Orda=>Rela->Bool
symR(Set[])=True
symR(Set((x,y):pairs)) |x==y=symR(Setpairs)
|otherwise =
inSet(y,x)(Setpairs)
&&symR(deleteSet (y,x)(Setpairs))
Acheck fortransiti vityofRtests foreach couple ofpairs(x;y)2R;(u;v)2R
whether (x;v)2Rify=u:
transR::Orda=>Rela->Bool
transR(Set[])=True
transR(Sets)=and[transpair(Sets)|pair<-s]where
trans(x,y)(Setr)=
and[inSet(x,v)(Setr)|(u,v)<-r,u==y]
Nowwhat about relation composition? This isamore difﬁcult matter ,forhowdo
weimplement9z(Rxz^Szy)?Thekeytotheimplementation isthefollo wing
180 CHAPTER 5.RELATIONS
procedure forcomposing asingle pairofobjects (x;y)with arelationS,simply
byforming therelationf(x;z)j(z;y)2Sg.This isdone by:
composePair ::Orda=>(a,a)->Rela->Rela
composePair (x,y)(Set[])=Set[]
composePair (x,y)(Set((u,v):s))
|y==u=insertSet (x,v)(composePair (x,y)(Sets))
|otherwise =composePair (x,y)(Sets)
Forrelation composition weneed setunion (Cf. Exercise 4.54):
unionSet ::(Orda)=>Seta->Seta->Seta
unionSet (Set[]) set2=set2
unionSet (Set(x:xs)) set2=
insertSet x(unionSet (Setxs)(deleteSet xset2))
Relation composition isdeﬁned interms ofcomposePair andunionSet :
compR::Orda=>Rela->Rela->Rela
compR(Set[])_=(Set[])
compR(Set((x,y):s)) r=
unionSet (composePair (x,y)r)(compR(Sets)r)
Composition ofarelation with itself (Rn):
repeatR ::Orda=>Rela->Int->Rela
repeatR rn|n<1=error"argument <1"
|n==1=r
|otherwise =compRr(repeatR r(n-1))
5.3.IMPLEMENTING RELATIONSASSETSOFPAIRS 181
Example 5.51 Letususetheimplementation toillustrate Exercise 5.39.
r=Set[(0,2),(0,3),(1,0),(1,3),(2,0 ),(2,3)]
r2=compRrr
r3=repeatR r3
r4=repeatR r4
This gives:
REL>r
{(0,2),(0,3),(1,0),(1,3),(2,0 ),(2,3)}
REL>r2
{(0,0),(0,3),(1,2),(1,3),(2,2 ),(2,3)}
REL>r3
{(0,2),(0,3),(1,0),(1,3),(2,0 ),(2,3)}
REL>r4
{(0,0),(0,3),(1,2),(1,3),(2,2 ),(2,3)}
REL>r==r2
False
REL>r==r3
True
REL>r==r4
False
REL>r2==r4
True
Also, thefollo wing testyields ‘True’:
s=Set[(0,0),(0,2),(0,3),(1,0),(1,2 ),(1,3),(2,0),(2,2),(2,3)]
test=(unionSet r(compRsr))==s
Exer cise5.52 Extend thisimplementation with afunction
restrictR ::Orda=>Seta->Rela->Rela
182 CHAPTER 5.RELATIONS
thatgivestherestriction ofarelation toaset.Inthetype declaration, Setaisthe
restricting set.
Theunion oftworelationsRandSistherelationR[S.Since relations aresets,
forthiswecanuseunionSet .
Exer cise5.53 UseunionSet todeﬁne procedures rclosR forreﬂexiveclosure
andsclosR forsymmetric closure ofarelation. Asbackground setforthereﬂex-
iveclosure youcantaketheunion ofdomain andrange oftherelation.
Exer cise5.54 Deﬁne afunction
tclosR::Orda=>Rela->Rela
tocompute thetransiti veclosure ofarelationR,forrelations implemented as
Orda=>Rela.
Hint: compute thesmallest relationSwith theproperty that
S=R[R2[[Rk
(forsomek)istransiti ve.UsetransR forthetransiti vitytest.
5.4 Implementing Relations asCharacteristic Func-
tions
Acharacteristic function isafunction oftypeA!f0;1g,forsome setA.Char -
acteristic functions areso-called because theycharacterize subsets ofasetA.The
functionf:A!f0;1gcharacterizes thesetB=fa2Ajf(a)=1gA.
Characteristic functions implemented inHask ellhavetypea->Bool ,forsome
typea.
From thefactthatabinary relationrisasubset ofaproductAB,youwould
expect that abinary relation isimplemented inHask ellasafunction oftype
(a,b)->Bool .Givenapairofobjects(x,y) ,withxoftypeaandyoftypeb,
thefunction proclaims theverdictTrue if(x,y) intherelation,False otherwise.
Standard relations like==(foridentity ,orequality) and<=(for6)arerepresented
inHask ellinaslightly different way.Theytaketheir arguments onebyone. Let
uscheck their types:
5.4.IMPLEMENTING RELATIONSASCHARACTERISTIC FUNCTIONS 183
Prelude> :t(==)
(==)::Eqa=>a->a->Bool
Prelude> :t(<=)
(<=)::Orda=>a->a->Bool
Prelude>
What thismeans is:ifaisatype intheclassEq,then==takesaﬁrst argument
ofthattype andasecond argument ofthattype andproclaims averdictTrue or
False ,andsimilarly for<=,except thatnowthearguments havetobeofatype in
theclassOrd.
Another example ofarelation inHask ellisthefollo wing implementation divides
oftherelationxjy(‘xdividesy’)ontheintegers (xdividesyifthere aq2Zwith
y=xq).
divides ::Integer ->Integer ->Bool
divides dn|d==0=error"divides: zerodivisor"
|otherwise =(remnd)==0
Switching back andforth between typesa->a->Bool and(a,a)->Bool
(or,more generally ,between typesa->b->cand(a,b)->c),canbedone
bymeans oftheprocedures forcurrying anduncurrying afunction. The proce-
dures refer tothelogician H.B. Curry who helped laying thefoundations forfunc-
tional programming. (The initial Hstands forHask ell;theprogramming language
thatweuseinthisbook isalsonamed after him.)
Iffisoftype(a,b)->c,then curryingfmeans transforming itintoafunction
thattakesitsarguments onebyone, i.e.,afunction oftypea->b->c.The
procedure curry ispredeﬁned inHask ellasfollo ws:
curry ::((a,b)->c)->(a->b->c)
curryfxy=f(x,y)
Iffisoftypea->b->c,then uncurrying fmeans transforming itintoafunc-
tionthattakesitsarguments asapair,i.e.,afunction oftype(a,b)->c.The
procedure uncurry ispredeﬁned inHask ellasfollo ws:
184 CHAPTER 5.RELATIONS
uncurry ::(a->b->c)->((a,b)->c)
uncurry fp=f(fstp)(sndp)
Asanexample, here aresome deﬁnitions ofrelations.
eq::Eqa=>(a,a)->Bool
eq=uncurry (==)
lessEq::Orda=>(a,a)->Bool
lessEq=uncurry (<=)
Ifarelation isimplemented asaprocedure oftype(a,b)->Bool itisveryeasy
todeﬁne itsinverse:
inverse ::((a,b)->c)->((b,a)->c)
inverse f(x,y)=f(y,x)
This gives:
REL>inverse lessEq(3,4)
False
REL>inverse lessEq(4,3)
True
REL>
Canwedosomething similar forprocedures oftypea->b->c?Yes,wecan.
Here isthepredeﬁned procedure flip :
flip ::(a->b->c)->b->a->c
flipfxy=fyx
Here itisinaction:
5.4.IMPLEMENTING RELATIONSASCHARACTERISTIC FUNCTIONS 185
REL>flip(<=)34
False
REL>flip(<=)43
True
REL>
The procedure flip canbeused todeﬁne properties from relations. Takethe
property ofdividing thenumber 102.This denotes theset
fd2N+jddivides102g=f1;2;3;6;17;34;51;102g:
ItisgiveninHask ellby(`divides` 102) ,which inturnisshorthand for
flipdivides 102
Trying thisout,weget:
REL>filter(`divides` 102)[1..300]
[1,2,3,6,17,34,51,102]
Wewill nowworkouttherepresentation ofrelations ascharacteristic functions.
Tokeepthecode compatible with theimplementation givenbefore, wedeﬁne the
type asRel' ,andsimilarly fortheoperations.
typeRel'a=a->a->Bool
emptyR' ::Rel'a
emptyR' =\__->False
list2rel' ::Eqa=>[(a,a)] ->Rel'a
list2rel' xys=\xy->elem(x,y)xys
idR' creates theidentity relation overalist.
idR'::Eqa=>[a]->Rel'a
idR'xs=\xy->x==y&&elemxxs
invR' invertsarelation.
186 CHAPTER 5.RELATIONS
invR'::Rel'a->Rel'a
invR'=flip
inR' checks whether apairisinarelation.
inR'::Rel'a->(a,a)->Bool
inR'=uncurry
Checks whether arelation isreﬂexive,irreﬂe xive,symmetric ortransiti ve(ona
domain givenbyalist):
reflR'::[a]->Rel'a->Bool
reflR'xsr=and[rxx|x<-xs]
irreflR' ::[a]->Rel'a->Bool
irreflR' xsr=and[not(rxx)|x<-xs]
symR'::[a]->Rel'a->Bool
symR'xsr=and[not(rxy&&not(ryx))|x<-xs,y<-xs]
transR' ::[a]->Rel'a->Bool
transR' xsr=and
[not(rxy&&ryz&&not(rxz))
|x<-xs,y<-xs,z<-xs]
Union, intersection, reﬂexiveandsymmetric closure ofrelations:
5.4.IMPLEMENTING RELATIONSASCHARACTERISTIC FUNCTIONS 187
unionR' ::Rel'a->Rel'a->Rel'a
unionR' rsxy=rxy||sxy
intersR' ::Rel'a->Rel'a->Rel'a
intersR' rsxy=rxy&&sxy
reflClosure' ::Eqa=>Rel'a->Rel'a
reflClosure' r=unionR' r(==)
symClosure' ::Rel'a->Rel'a
symClosure' r=unionR' r(invR'r)
Relation composition:
compR'::[a]->Rel'a->Rel'a->Rel'a
compR'xsrsxy=or[rxz&&szy|z<-xs]
Composition ofarelation with itself:
repeatR' ::[a]->Rel'a->Int->Rel'a
repeatR' xsrn|n<1=error"argument <1"
|n==1=r
|otherwise =compR'xsr(repeatR' xsr(n-1))
Exer cise5.55 Usetheimplementation ofrelationsRel'aascharacteristic func-
tions overtypeatodeﬁne anexample relationrwith theproperty that
unionRr(compRrr)
isnotthetransiti veclosure ofr.
Exer cise5.56 Ifarelationr::Rel'aisrestricted toaﬁnite listxs,then we
cancalculate thetransiti veclosure ofrrestricted tothelistxs.Deﬁne afunction
188 CHAPTER 5.RELATIONS
transClosure' ::[a]->Rel'a->Rel'a
forthis.
Hint: compute thesmallest relationSwith theproperty that
S=R[R2[[Rk
(forsomek)istransiti ve.UsetransRxsforthetransiti vitytestondomainxs.
5.5 Equi valence Relations
Deﬁnition 5.57 ArelationRonAisanequivalence relation orequivalence if
Ristransiti ve,reﬂexiveonAandsymmetric.
Example 5.58 Onthesetofhuman beings therelation ofhaving thesame ageis
anequivalence relation.
Example 5.59 TherelationR=f(n;m)jn;m2Nandn+misevengisan
equivalence relation onN.
Theequivalence testcanbeimplemented forrelations oftypeOrda=>Rela
asfollo ws:
equivalenceR ::Orda=>Seta->Rela->Bool
equivalenceR setr=reflRsetr&&symRr&&transRr
Forrelations implemented astypeRel'atheimplementation goes likethis:
equivalenceR' ::[a]->Rel'a->Bool
equivalenceR' xsr=reflR'xsr&&symR'xsr&&transR' xsr
Example 5.60 The nexttable showsforanumber offamiliar relations whether
theyhavetheproperties ofreﬂexivity,symmetry andtransiti vity.Here:
5.5.EQUIVALENCE RELATIONS 189
;istheempty relation onN,
=N=f(n;n)jn2Ngistheidentity onN,
N2=NNisthebiggest relation onN,
<and6aretheusual ordering relations onN,
Sucistherelation onNdeﬁned bySuc(n;m)n+1=m,
istheinclusion relation on}(N).
property: yes: no:
reﬂexive(onNresp.}(N)) ,N2,6,;,<,Suc
symmetric ;,,N2<,6,Suc,
transiti ve ;,,N2,<,6, Suc
Thetable showsthatamong these examples onlyandN2areequivalences onN.
Example 5.61 Therelation;is(trivially) symmetric andtransiti ve.Therelation
;isreﬂexiveontheset;,butonnoother set.Thus:;isanequivalence ontheset
;,butonnoother set.
Example 5.62 LetAbeaset.Aisthesmallest equivalence onA.A2isthe
biggest equivalence onA.
Example 5.63 Therelationbetween vectors in3-dimensional space R3thatis
deﬁned by~a~b9r2R+(~a=r~b)isanequivalence.
Example 5.64 Foranyn2Z,n6=0,therelationnonZisgivenbymnk
iffmandkhavethesame remainder when divided byn.More precisely ,mnk
(or:mk(modn))iff
m=qn+r,with06r<n,
k=q0n+r0,with06r0<n,
r=r0.
Whenmnkwesaythatmisequivalent tokmodulon.Therelationnisalso
called the(modn)relation.
190 CHAPTER 5.RELATIONS
Toshowthatnfrom Example 5.64 isanequivalence, thefollo wing proposition
isuseful.
Proposition 5.65mnkiffnjm k.
Proof.):Supposemnk.Thenm=qn+randk=q0n+r0with06r<n
and06r0<nandr=r0.Thus,m k=(q q0)n,anditfollo wsthatnjm k.
(:Supposenjm k.Thennj(qn+r) (q0n+r0),sonjr r0.Since
 n<r r0<n,thisimpliesr r0=0,sor=r0.Itfollo wsthatmnk.
From thiswegetthatthefollo wing areallequivalent:
mnk.
njm k.
9a2Z:an=m k.
9a2Z:m=k+an.
9a2Z:k=m+an.
Exer cise5.66 Showthat foreveryn2Zwithn6=0itholds thatnisan
equivalence onZ.
Example 5.67 Here isaHask ellimplementation ofthemodulo relation:
modulo::Integer ->Integer ->Integer ->Bool
modulon=\xy->divides n(x-y)
Example 5.68 The relation thatapplies totwoﬁnite setsincase theyhavethe
same number ofelements isanequivalence onthecollection ofallﬁnite sets.
The corresponding equivalence onﬁnite lists isgivenbythefollo wing piece of
Hask ellcode:
5.5.EQUIVALENCE RELATIONS 191
equalSize ::[a]->[b]->Bool
equalSize list1list2=(length list1)==(length list2)
Abstract equivalences areoften denoted byor.
Exer cise5.69 Determine whether thefollo wing relations onNare(i)reﬂexiveon
N,(ii)symmetric, (iii)transiti ve:
1.f(2;3);(3;5);(5;2)g;
2.f(n;m)jjn mj>3g.
Exer cise5.70A=f1;2;3g.Canyouguess howmanyrelations there areonthis
small set? Indeed, there must besufﬁciently manytoprovide forthefollo wing
questions.
1.Giveanexample ofarelation onAthatisreﬂexive,butnotsymmetric and
nottransiti ve.
2.Giveanexample ofarelation onAthatissymmetric, butnotreﬂexiveand
nottransiti ve.
3.Giveexamples (ifany)ofrelations onAthatsatisfy each ofthesixremain-
ingpossibilities w.r.t.reﬂexivity,symmetry andtransiti vity.
Exer cise5.71 Forﬁnite setsA(0,1,2,3,4and5elements andnelements gener -
ally) thefollo wing table hasentries for:thenumber ofelements inA2,thenumber
ofelements in}(A2)(that is:thenumber ofrelations onA),thenumber ofrela-
tions onAthatare(i)reﬂexive,(ii)symmetric and(iii)transiti ve,andthenumber
ofequivalences onA.
192 CHAPTER 5.RELATIONS
AA2}(A2)reﬂexivesymmetric transiti veequivalence
0 0 1 1 1 1 1
1 1 2 1 2 2 1
2 ? ? ? ? 13 —
3 ? ? ? ? — —
4 ? ? ? ? — —
5 ? ? ? ? — —
n ? ? ? ? — —
Giveallreﬂexive,symmetric, transiti verelations andequivalences forthecases
thatA=;(0elements) andA=f0g(1element). Showthere areexactly 13
transiti verelations onf0;1g,andgivethe3thatarenottransiti ve.Putnumbers on
theplaces with question marks. (Youarenotrequested toﬁllinthe—.)
Example 5.72 Assume relationRonAistransiti veandreﬂexive,i.e,Risapre-
order .Then consider therelationonAgivenby:xy:xRy^yRx.
Therelationisanequivalence relation onA.Symmetry isimmediate from the
deﬁnition.isreﬂexivebecauseRis.istransiti ve,forassumexyand
yz.ThenxRy^yRx^yRz^zRy,andfromxRy^yRz,bytransiti vityof
R,xRz,andfromzRy^yRx,bytransiti vityofR,zRx;thusxz.
Exer cise5.73 Suppose thatRisasymmetric andtransiti verelation onthesetA
such that8x2A9y2A(xRy).ShowthatRisreﬂexiveonA.
Exer cise5.74 LetRbearelation onA.ShowthatRisanequivalence iff(i)
ARand(ii)R=RR 1.
5.6 Equi valence Classes andPartitions
Equi valence relations onasetAenable ustopartition thesetAintoequivalence
classes.
Deﬁnition 5.75 SupposeRisanequivalence relation onAandthata2A.The
setjaj=jajR=fb2AjbRagiscalled theR-equivalence class ofa,orthe
equivalence class ofamoduloR.
Elements ofanequivalence class arecalled representatives ofthatclass.
Example 5.76 (continued from example 5.62) The equivalence class ofa2A
modulo Aisfag.
Theonly equivalence class moduloA2isAitself.
5.6.EQUIVALENCE CLASSES ANDPARTITIONS 193
Example 5.77 (continued from example 5.63) Theequivalence class of(1;1;1)2
R3moduloisthesetf(r;r;r)jr>0g:halfastraight linestarting attheorigin
(notincluding theorigin). (A“direction”.)
Example 5.78 (continued from example 5.67) The equivalence class of2inZ
(mod4)istheset
f:::; 6; 2;2;6;10;14;:::g=f2+4njn2Zg.
Theimplementation yields:
REL>filter(modulo 42)[-15..15]
[-14,-10,-6,-2,2,6,10,14]
Example 5.79 (continued from example 5.68) Theequivalence class off0;1;2g
modulo theequivalence ofhaving thesame number ofelements isthecollection
ofallthree-element sets.
*(According totheFrege-Russell de®nition ofnaturalnumber,thisisthenumberthree.)
Lemma 5.80 Suppose thatRisanequivalence onA.Ifa;b2A,then:
jajR=jbjR,aRb:
Proof.):Note thata2jajR(for,Risreﬂexive).Thus, ifjajR=jbjR,then
a2jbjR,i.e.,aRb.
(:Assume thataRb.Then alsobRa(Rissymmetric.)
jajRjbjR:x2jajRsigniﬁesxRa,andhencexRbfollo ws(Rtransiti ve);
therefore,x2jbjR.
jbjRjajR:similarly .
Extensionality completes theproof.
Lemma 5.81 LetRbeanequivalence onA.
1.Every equivalence class isnon-empty ,
2.every element ofAbelongs tosome equivalence class,
3.differentequivalence classes aredisjoint.
Proof.1/2.SinceRisreﬂexiveonA,wehave,foreverya2A:a2jaj.
3.Suppose thatjajandjbjarenotdisjoint. Say,c2jaj\jbj.Then wehaveboth
cRaandcRb.SinceRissymmetric, itfollo wsthataRc.Thus,aRb(Rtransiti ve).
Therefore,jaj=jbjfollo ws,using Lemma 5.80.
194 CHAPTER 5.RELATIONS
Exer cise5.82 Usetheimplementation ofrelationsRel'aascharacteristic func-
tions overtypeatoimplement afunctionraccess thattakesarelationr,anobject
x,andalistL,andreturns thelistofallobjectsyfromLsuch thatrxyholds. The
type declaration should run:
raccess ::Rel'a->a->[a]->[a]
Theconcept ofpartitioning asetismade precise inthefollo wing deﬁnition.
Deﬁnition 5.83 AfamilyAofsubsets ofasetAiscalled apartition ofAif
;=2A,
SA=A,
forallX;Y2A:ifX6=YthenX\Y=;.
Theelements ofapartition arecalled itscomponents .
This deﬁnition says thateveryelement ofAisinsome member ofAandthatno
element ofAisinmore than onemember ofA.
Example 5.84ff1;2g;f3;4ggisapartition off1;2;3;4g.;(trivially) isaparti-
tionof;.Zcanbepartitioned intothenegativeintegers, thepositi veintegers, and
f0g.
Exer cise5.85 Showthefollo wing: iffAiji2Igisapartition ofAandfBjj
j2Jgisapartition ofB,thenfAiBjj(i;j)2IJgisapartition ofAB.
Deﬁnition 5.86 (Quotients) Assume thatRisanequivalence onthesetA.The
collection ofequivalence classes ofR,A=R =fjajja2Ag,iscalled the
quotient ofAmoduloR.
Thedeﬁnition ofpartition wasengineered inorder toensure thefollo wing:
Theor em5.87 Every quotient (ofaset,modulo anequivalence) isapartition (of
thatset).
Proof.This isnothing butareformulation ofLemma 5.81.
5.6.EQUIVALENCE CLASSES ANDPARTITIONS 195
Example 5.88 (continued from examples 5.62 and5.76)
A=A=ffagja2Ag.
A=A2=fAg.
Example 5.89 (continued from examples 5.63 and5.77)
Thepartition R3=ofR3hascomponentsf0gandallhalf-lines.
Example 5.90 (continued from examples 5.67 and5.78)
Thepartition Z=mod(4)ofZinduced bytheequivalencemod(4)hasfour com-
ponents: (i)theequivalence classf4njn2Zgof0(that also istheequivalence
class of4,8,12,..., 4...),(ii)theclassf4n+1jn2Zgof1,(iii)theclass
f4n+2jn2Zgof2,and(iv)f4n+3jn2Zg,theclass of3.Thequotient
Z=mod(n)isusually written asZn.
Example 5.91*(continued from examples 5.68 and5.79)
Thequotient ofthecollection ofﬁnite setsmodulo therelation “same number of
elements” is—according toFregeandRussell— thesetofnatural numbers.
Exer cise5.92 Givethepartition thattherelation ofexample 5.59 induces onN.
Example 5.93 (continued from Example 5.72)
LetRbeapre-order onA.Thengivenbyxy:xRy^yRxisanequiva-
lence relation. Consider therelationRonA=givenbyjxjRjyj:xRy.The
relationRisapartial order onA=called thepo-set reﬂection ofR.
Thedeﬁnition isindependent oftherepresentati ves,because assumexx0and
yy0andxRy.ThenxRx0^x0Rx,yRy0^y0Ry,andx0Ry0.Fromx0Rx,xRy
andyRy0bytransiti vityofR,x0Ry0.
Risreﬂexive,becauseRis.Risanti-symmetric, forsupposejxjRjyjand
jyjRjxj.ThenxRyandyRx,sobydeﬁnition of,jxj=jyj.FinallyRis
transiti vebecauseRis.
Thus, equivalences induce partitions. Buttheprocess canbeinverted.
Theor em5.94 Every partition (ofaset)isaquotient (ofthatset,modulo acertain
equivalence).
Speciﬁcally: Suppose thatAisapartition ofA.Then therelationRonAdeﬁned
by
xRy:9K2A(x;y2K)
196 CHAPTER 5.RELATIONS
(xandymember ofthesame component ofA)isanequivalence onA,andAis
thecollection ofequivalence classes ofR.
Proof.Exercise 5.121.
According toTheorems 5.87 and5.94, equivalences andpartitions aretwosides
ofthesame coin.
Example 5.95 Consider thefollo wing relation onf0;1;2;3;4g:
f(0;0);(0;1);(1;0);(1;1);(2;2);(2;4);(3;3);(4;2);(4;4)g:
This isanequivalence, andthecorresponding partition is
ff0;1g;f2;4g;f3gg:
Exer cise5.96 Isthefollo wing relation anequivalence onf0;1;2;3;4g?Ifso,
givethecorresponding partition.
f(0;0);(0;3);(0;4);(1;1);(1;2);
(2;1);(2;2);(3;0);(3;3);(3;4);(4;0);(4;3);(4;4)g:
Example 5.97 Theequivalence corresponding tothepartition
ff0g;f1;2;3g;f4gg
off0;1;2;3;4gis:
f(0;0);(1;1);(1;2);(1;3);(2;1);(2;2);(2;3);(3;1);(3;2);(3;3);(4;4)g:
Exer cise5.98 What aretheequivalences corresponding tothefollo wing parti-
tions?:
1.ff0;3g;f1;2;4gg,off0;1;2;3;4g,
2.ffn2Zjn<0g;f0g;fn2Zjn>0gg,ofZ,
3.ffevennumbersg;foddnumbersgg,ofN.
5.6.EQUIVALENCE CLASSES ANDPARTITIONS 197
Exer cise5.99A=f1;2;3;4;5g,
R=f(1;1);(1;2);(1;4);(2;1);(2;2);(2;4);
(3;3);(3;5);(4;1);(4;2);(4;4);(5;3);(5;5)g:
1.IsRanequivalence onA?Ifso,answer 2and3:
2.Determinej2jR.
3.DetermineA=R .
Example 5.100 Ifon}(N)isgivenby
AB:(A B)[(B A)isﬁnite;
thenisreﬂexive.IfANisarbitrary ,then(A A)[(A A)=;[;=;,
and;isﬁnite.
Exer cise5.101 *Deﬁne therelationon}(N)by:
AB:(A B)[(B A)isﬁnite.
Thus, N6;,since(N ;)[(; N)=N[;=Nisinﬁnite.
Showthatisanequivalence (reﬂe xivityisshowninexample 5.100).
Exer cise5.102 Deﬁne therelationRonallpeople by:aRb:aandbhavea
common ancestor .IsRtransiti ve?
Same question fortherelationSdeﬁned by:aSb:aandbhaveacommon
ancestor along themale line.
Example 5.103 Forcounting thepartitions ofasetAofsizen,thekeyistocount
thenumber ofwaysofpartitioning asetAofsizenintoknon-empty classes.
Letususen
k	
forthisnumber ,andseeifwecanﬁndarecurrence forit,i.e.,an
equation interms ofthefunction forsmaller arguments. Distrib utingnobjects
over1setcanbedone inonly oneway,son
1	
=1.Similarly ,distrib utingn
objects overnnon-empty setscanbedone inonly oneway,son
n	
=1.
Todistrib utenobjects overkdifferent sets, wecaneither (i)putthelastobject
into anequivalence class ofitsown,or(ii)putitinoneoftheexisting classes.
198 CHAPTER 5.RELATIONS
(i)canbedone inn 1
k 1	
ways,forthisisthenumber ofwaystodistrib uten 1
objects overk 1non-empty classes. (ii)canbedone inkn 1
k	
ways,forthere
arekclasses tochoose from, andn 1
k	
waystodistrib uten 1objects overk
classes. Thus, therecurrence weneed is:
n
k
=kn 1
k
+n 1
k 1
:
Interms ofthis, thenumber ofpartitionsb(n)isgivenby:
b(n)=nX
k=1n
k
:
Thenumbersn
k	
arecalled Stirling setnumber s.Theb(n)arecalled Bell num-
bers.
Exer cise5.104 Implement functions bell andstirling tocount thenumber of
different partitions ofasetofnelements.
Exer cise5.105 Usetheresult ofExercise 5.104 toﬁlloutthelastcolumn inthe
table ofExercise 5.71 onp.191.
Exer cise5.106 Show:conditions 2and3ofDeﬁnition 5.83 takentogether are
equivalent with: foreverya2Athere exists exactly oneK2Asuch thata2K.
Exer cise5.107 Istheinter sectionR\SoftwoequivalencesRandSonasetA
again anequivalence? And theunionR[S?Prove,orsupply asimple counter -
example. (See thetable ofExercise 5.50.)
Exer cise5.108 *Suppose thatRandSareequivalences onAsuch thatRS.
ShowthateveryS-equi valence class isaunion ofR-equi valence classes.
Exer cise5.109 Alistpartition isthelistcounterpart ofapartition: listpartitions
areoftypeEqa=>[[a]] ,andalistpartitionxssofxshasthefollo wing prop-
erties:
[]isnotanelement ofxss,
xsandconcatxsshavethesame elements,
ifysandzsaredistinct elements ofxss,thenysandzshavenoelements
incommon.
5.6.EQUIVALENCE CLASSES ANDPARTITIONS 199
Implement afunction
listPartition ::Eqa=>[a]->[[a]]->Bool
thatmaps everylistxstoacheck whether agivenobject oftype[[a]] isalist
partition ofxs.
Exer cise5.110 Implement afunction
listpart2equiv ::Orda=>[a]->[[a]]->Rela
thatgenerates anequivalence relation from alistpartition (see Exercise 5.109).
Theﬁrstargument givesthedomain, thesecond argument thelistpartition. Gen-
erate anerror ifthesecond argument isnotalistpartition onthedomain givenby
theﬁrstargument.q
Exer cise5.111R=f(0;3);(1;5);(2;0)g;A=f0;1;2;3;4;5g.
1.What isthesmallest (inthesense of:number ofelements) equivalenceS
RonA?
2.DetermineA=S .
3.Howmanyequivalences existonAthatincludeR?
4.Givethecorresponding partitions.
Exer cise5.112 Implement afunction
equiv2listpart ::Orda=>Seta->Rela->[[a]]
thatmaps anequivalence relation tothecorresponding listpartition (see Exercise
5.109). Generate anerror iftheinput relation isnotanequivalence.
Exer cise5.113 Usethefunctionequiv2listpart toimplement afunction
equiv2part ::Orda=>Seta->Rela->Set(Seta)
thatmaps anequivalence relation tothecorresponding partition.
200 CHAPTER 5.RELATIONS
Exer cise5.114 *Risarelation onA.One ofthefollo wing isthesmallest equiva-
lence onAthatincludesR.Which? Prove.
1.(A[R)+[(A[R 1)+.
2.A[R+[(R 1)+.
3.A[(R[R 1)+.
Exer cise5.115 LetRbearelation onA.ShowthatS=R\R 1isan
equivalence onA.Next,showthattherelationTonthequotientA=S givenby
jajSTjbjS:aRbisapartial order .
Note thatthereasoning ofExercise 5.115 only uses reﬂexivityandtransiti vityof
R.So,ingeneral, ifRisareﬂexivetransiti verelation onA(i.e.,Risapre-order),
thenS=R\R 1isanequivalence onA,andtherelationTonthequotientA=S
givenbyjajSTjbjS:aRbisapartial order .
Example 5.116 Consider thepre-orderj=ofExample 5.25. Note thattheequiva-
lence relationj=\j= 1isnothing other than therelationoflogical equivalence.
Remark. Inconstructions with quotients, itoften happens thatarelation onthe
quotient isdeﬁned interms ofarelation ontheunderlying set.Insuch acase one
should alwayscheck thatthedeﬁnition isproper inthesense thatitisindependent
oftherepresentati vesthatarementioned init.
Takeagain theexample ofexercise 5.115, ofasetAwith areﬂexivetransiti ve
relationRonit.IfS=R\R 1,then thedeﬁnition ofrelationTonthequotient
A=S givenbyjajSTjbjS:aRbisproper ,because itholds thataRb,a02jajS
andb02jbjStogether imply thata0Rb0.
Toseethatthisisso,assumea02jajSandaRb.Thena0Sa,soa0Ra,andby
transiti vity ofR,a0Rb.Supposeb02jbjS.Thenb0Sb,sobRb0.Together with
a0Rbthisgives,again bytransiti vityofR,thata0Rb0.
Exer cise5.117 Deﬁne therelationsandonRbypq:pq2Z,
pq:p q2Z.Arethese equivalences? Ifso,describe thecorresponding
partition(s).
Exer cise5.118 Deﬁne therelationRonRRby(x;y)R(u;v)iff3x y=
3u v.
5.6.EQUIVALENCE CLASSES ANDPARTITIONS 201
1.ShowthatRisanequivalence.
2.Describe theequivalence classes of(0;0)and(1;1).
3.Describe RR=Ringeometrical terms.
Exer cise5.119 Deﬁne anequivalence onRRthatpartitions theplane incon-
centric circles with(0;0)ascentre.
Exer cise5.120Q=f(0;0);(0;1);(0;5);(2;4);(5;0)g.ForanequivalenceR
onf0;1;2;3;4;5gitisgiven,thatQRand(0;2)=2R.
1.Showthat(1;5)2Rand(4;5)62R.
2.Givethepartition corresponding tothesmallest (inthesense ofnumber of
elements) equivalenceQ.
3.HowmanyequivalencesSarethere onf0;1;2;3;4;5gsuch thatQS
and(0;2)62S?Givethecorresponding partitions.
Exer cise5.121 ProveTheorem 5.94.
Hint. Makesure thatyouuseallproperties ofpartitions.
Exer cise5.122 *Onacertain planet there are20countries. Everytwoofthem
either areatwarwith each other orhaveapeace treaty .Everytwocountries with
acommon enemy havesuch apeace treaty .What istheleast possible number of
peace treaties onthisplanet?
Hint: Note thattherelationsPandW,forbeing atpeace andatwar,respecti vely,
exclude oneanother ,thattheyareboth irreﬂe xiveandsymmetric, andthatthey
satisfy theprinciple thatthere arenowar-triangles. Forifxisatwarwith bothy
andz,thenyandzhavexascommon enemy ,henceyandzhaveapeace treaty:
8xyz((xWy^xWz))yPz):
Find arecurrence (see page 212) forthemaximum number ofcountries atwar
among 2ncountries. Next,usethistoderivetheminimum number ofpeace treaties
among 2ncountries.
202 CHAPTER 5.RELATIONS
5.7 Integer Partitions
Integerpartitions ofn2N+arelists ofnon-zero natural numbers thataddupto
exactlyn.Forexample, thefour integerpartitions of4are
[4];[1;3];[2;2];[1;1;2];[1;1;1;1]:
Theintegerpartitions ofncorrespond tothesizes ofthesetpartitions ofasetA
withjAj=n.Here isanalgorithm forgenerating integerpartitions, inlexico-
graphically decreasing order:
Theﬁrstintegerpartition ofnis[n].
LetBbethelastintegerpartition generated. IfBconsists ofonly1’s,then
done. Otherwise, there isasmallest non-1partm.Togenerate thenext
partition, subtract 1frommandcollect alltheunits soastomatch thenew
smallest partm 1.
Examples Thepartition after[1;1;3;3]is[1;2;2;3],forafter subtracting 1from
3,weshould pack thethree units thatresult inparcels ofsize2.Thepartition after
[1;1;1;1;1;1;5]is[3;4;4],forafter subtracting 1from5,weshould pack the
sevenunits thatresult inparcels with maximum size4,which givesthree units and
oneparcel ofsize4,which inturngivesoneparcel ofsize3andoneofsize4.The
partition after[3;3;5]is[1;2;3;5].Thepartition after[1;3;3;4]is[2;2;3;4].
Implementation Anintegerpartition isrepresented asalistofintegers. For
convenience wecount thenumber of1’s,andremo vethem from thepartition.
This givesacompressed representation (2;[3;3])of[1;1;3;3].These compressed
partitions havetypeCmprPart .
typePart=[Int]
typeCmprPart =(Int,Part)
Expansion ofacompressed partition (n;p)isdone bygeneratingn1’sfollo wed
byp:
5.7.INTEGER PARTITIONS 203
expand::CmprPart ->Part
expand(0,p)=p
expand(n,p)=1:(expand ((n-1),p))
Ingenerating thenextpartition from(k,xs) wemay assume thatxsisnon-empty ,
andthatitselements arelisted inincreasing order .
The partition that follo ws(k,x:xs) isgenerated bypacking(k+x,x:xs) for
maximum sizex 1.This assumes thatxisthesmallest element inx:xs .
nextpartition ::CmprPart ->CmprPart
nextpartition (k,(x:xs)) =pack(x-1)((k+x),xs)
Topack apartition(m,xs) forsize1,there isnothing todo.Topack apartition
(m,xs) formaximum sizek>1andk>m,decrease theparcel sizetok 1.
Topack apartition(m,xs) forsizek>1andk6m,usekunits togenerate one
parcel ofsizek,andgoonwith(m-k,k:xs) ,forthesame parcel size.
pack::Int->CmprPart ->CmprPart
pack1(m,xs)=(m,xs)
packk(m,xs)=ifk>mthenpack(k-1)(m,xs)
else packk(m-k,k:xs)
Togenerate allpartitions starting from agivenpartition(n,[]) ,justlistthepar-
tition consisting ofnunits, forthisisthelastpartition. Togenerate allpartitions
starting from agivenpartition(n,x:xs) ,listthispartition, andthen generate from
thesuccessor of(n,x:xs) .
generatePs ::CmprPart ->[Part]
generatePs p@(n,[]) =[expand p]
generatePs p@(n,(x:xs)) =
(expand p:generatePs(nextpartition p))
204 CHAPTER 5.RELATIONS
Generate allpartitions starting from[n].Thecase wheren=1isspecial, forit
istheonly case where thecompressed form oftheﬁrst partition hasanon-zero
number ofunits.
part::Int->[Part]
partn|n<1=error"part:argument <=0"
|n==1=[[1]]
|otherwise =generatePs (0,[n])
Here iswhat wegetout:
REL>part5
[[5],[1,4],[2,3],[1,1,3],[1,2 ,2],[1,1,1,2],[1,1,1,1,1]]
REL>part6
[[6],[1,5],[2,4],[1,1,4],[3,3 ],[1,2,3],[1,1,1,3],[2,2,2],
[1,1,2,2],[1,1,1,1,2],[1,1,1, 1,1,1]]
REL>length(part20)
627
Exer cise5.123 Write aprogramchange::Int->[Int] thatreturns change
inEUR Ocoins foranypositi veinteger,intheleast number ofcoins. Measure the
values oftheEUR Ocoins 0.01, 0.02, 0.05, 0.10, 0.20, 0.50, 1,2inEUR Ocents,
as1,2,5,10,20,50,100, 200. Usepack forinspiration.
Exer cise5.124 Modify theintegerpartition algorithm sothatitgenerates allthe
possible waysofgiving coin change foramounts ofmone yupto10EUR O,using
allavailable EUR Ocoins (0.01, 0.02, 0.05, 0.10, 0.20, 0.50, 1,2).Measure the
values oftheEUR Ocoins inEUR Ocents, as1,2,5,10,20,50,100, 200.
Exer cise5.125 Howmanydifferent waysarethere togivechange foroneEUR O?
Usetheprogram from theprevious exercise.
5.8 Further Reading
More onrelations intheconte xtofsettheory in[DvDdS78 ].Binary relations on
ﬁnite setsarestudied ingraph theory .SeeChapters 4and5of[Bal91 ].Relations
intheconte xtofdatabase theory arethetopic of[AHV95 ].
Chapter6
Functions
Preview
Inmathematics, theconcept ofafunction isperhaps evenmore important than that
ofaset.Also, functions arecrucial incomputer programming, asthefunctional
programming paradigm demonstrates. This chapter introduces basic notions and
then movesontospecial functions, operations onfunctions, deﬁning equivalences
bymeans offunctions, andcompatibility ofequivalences with operations.
Manyconcepts from theabstract theory offunctions translate directly intocompu-
tational practice. Most oftheexample functions mentioned inthischapter canbe
implemented directly inHask ellbyjustkeying intheir deﬁnitions, with domains
andco-domains speciﬁed asHask elltypes.
Still, wehavetobear inmind that animplementation ofafunction asacom-
puter program isaconcrete incarnation ofanabstract object. The same func-
tion may becomputed byvastly different computation procedures. Ifyou key
insum[2*k|k<-[1..100]]atthehugs prompt you gettheanswer
10100 ,andifyoukeyin100*101 yougetthesame answer ,butthecompu-
tation steps thatareperformed togetattheanswers aredifferent. Wehavealready
seen thatthere isnomechanical testforchecking whether twoprocedures perform
thesame task(Section 4.2), although inparticular cases such results canbeproved
bymathematical induction (see Chapter 7).E.g., inExample 7.4inChapter 7it
isprovedbymathematical induction thatthecomputational recipesPn
k=12kand
n(n+1)specify thesame function.
205
206 CHAPTER 6.FUNCTIONS
moduleFCT
where
importList
6.1 Basic Notions
Afunction issomething thattransforms anobject giventoitintoanother one. The
objects thatcanbegiventoafunction arecalled itsarguments ,andtheresults of
thetransformation arecalled values .Thesetofarguments iscalled thedomain of
thefunction. Wesaythatafunction isdeﬁned onitsdomain.
Iffisafunction andxoneofitsarguments, then thecorresponding value is
denoted byf(x).Afunction valuey=f(x)iscalled theimageofxunderf.
Thatf(x)=ycanalso beindicated byf:x7 !y.Thedomain offisdenoted
bydom(f).Itsrangeisran(f)=ff(x)jx2dom(f)g.
Example 6.1Afunction canbegivenasaruleoraprescription howtocarry out
thetransformation.
Firstsquar e,nextaddoneisthefunction thattransforms arealx2Rinto
x2+1.
Lettingfstand forthisfunction, itiscustomary todescribe itbytheequation
f(x)=x2+1:
TheHask ellimplementation uses thesame equation:
fx=x^2+1
Thefunction described by
jxj=x ifx>0
 xifx<0
6.1.BASICNOTIONS 207
transforms arealintoitsabsolute value. TheHask ellimplementation given
inPrelude .hsfollo wsthisdeﬁnition totheletter:
absReal x|x>=0=x
|otherwise =-x
The identity function 1Adeﬁned onAdoes not“transform” atallinthe
usual sense oftheword: givenanargumentx2A,itoutputsxitself. A
polymorphic identity function ispredeﬁned inHask ellasfollo ws:
id::a->a
idx=x
Settheory hasthefollo wing simple deﬁnition oftheconcept ofafunction.
Deﬁnition 6.2Afunction isarelationfthatsatisﬁes thefollo wing condition.
(x;y)2f^(x;z)2f=)y=z:
That is:foreveryx2dom(f)there isexactly oney2ran(f)such that(x;y)2
f.
Ifx2dom(f),thenf(x)isbydeﬁnition theunique objecty2ran(f)forwhich
(x;y)2f.
Note thatweusedom here inthesense deﬁned forrelations, butthattherelation
andthefunction-sense ofthenotion coincide: thedomain dom(f)ofthefunction
fisfxj9y((x;y)2f)g;exactly asintherelation-case (cf.Deﬁnition 5.1p.162).
Similarly ,therange offcoincides with therange offasarelation.
The set-theoretic andthecomputational viewonfunctions areworlds apart, for
computationally afunction isanalgorithm forcomputing values. However,in
cases offunctions with ﬁnite domains itiseasy toswitch back andforth between
thetwoperspecti ves,asthefollo wing conversions demonstrate.
208 CHAPTER 6.FUNCTIONS
list2fct ::Eqa=>[(a,b)] ->a->b
list2fct []_=error"function nottotal"
list2fct ((u,v):uvs) x|x==u=v
|otherwise =list2fct uvsx
fct2list ::(a->b)->[a]->[(a,b)]
fct2list fxs=[(x,fx)|x<-xs]
Therange ofafunction, implemented asalistofpairs, isgivenby:
ranPairs ::Eqb=>[(a,b)] ->[b]
ranPairs f=nub[y|(_,y)<-f]
Ifafunction isdeﬁned onanenumerable domain, wecanlistits(ﬁnite orinﬁnite)
range starting from agivenelement.
listValues ::Enuma=>(a->b)->a->[b]
listValues fi=(fi):listValues f(succi)
Ifwealsoknowthatthedomain isbounded, wecangenerate thewhole range asa
ﬁnite list.
listRange ::(Bounded a,Enuma)=>(a->b)->[b]
listRange f=[fi|i<-[minBound..maxBound] ]
Example 6.3
Thefunctionx7!x2+1deﬁned onRisidentiﬁed with therelationf(x;y)j
x2R^y=x2+1g=f(x;x2+1)jx2Rg.
6.1.BASICNOTIONS 209
f=f(1;4);(2;4);(3;6)gisafunction. dom(f)=f1;2;3g,ran(f)=
f4;6g.
f(1;4);(2;4);(2;6)gisnotafunction.
X,theidentity-relation onX(Deﬁnition 5.7,p.163), also isafunction
fromXtoX.When viewed asafunction, theidentity relation onXis
usually written as1X.
Iffisafunction, weclearly havethatf=f(a;f(a))ja2dom(f)g,and
ran(f)=ff(a)ja2dom(f)g.
Therelation;isafunction. dom(;)=;=ran(;).
Asisthecase forrelations, functions aremore often giveninaconte xtoftwosets.
Compare 5.3(p.162).
Deﬁnition 6.4(From...to,On,Co-domain) Suppose thatXandYaresets. A
functionfisfromXtoY;notation:
f:X !Y;
ifdom(f)=Xandran(f)Y.(Note thedifference interminology compared
with 5.3!)
Inthissituation,Yiscalled theco-domain off.
Afunctionfissaidtobedeﬁned onXifdom(f)=X.
Note thattheset-theoretic wayofidentifying thefunctionfwith therelationR=
f(x;f(x))jx2Xghasnowayofdealing with thissituation: itisnotpossible to
recovertheintended co-domainYfrom therelationR.AsfarasRisconcerned,
theco-domain offcould beanysetthatextends ran(R).
Mor eThan One Argument. Functions asintroduced here areunary ,i.e.,they
apply toonly oneargument. Butofcourse, functions with more than oneargument
(binary ,ternary ...)doexist. E.g., addition andmultiplication onNareofthis
kind. However,such abinary (ternary. ..)function canbeviewed asaunary one
thatapplies toordered pairs (resp., triples. ..).
Aswehaveseen, Hask ellhaspredeﬁned operations curry anduncurry toswitch
back andforth between functions oftypes(a,b)->canda->b->c.We
210 CHAPTER 6.FUNCTIONS
canextend thistocases offunctions thattaketriples, quadruples, etc.asarguments.
Asanexample, here isthecase forcurrying functions thattaketriples tofunctions
thattakethree arguments, andforuncurrying functions thattakethree arguments
tofunctions thattaketriples.
curry3::((a,b,c) ->d)->a->b->c->d
curry3fxyz=f(x,y,z)
uncurry3 ::(a->b->c->d)->(a,b,c) ->d
uncurry3 f(x,y,z) =fxyz
Fact6.5(Function Equality) Iffandgarefunctions that share their domain
(dom(f)=dom(g))and, onit,carry outthesame transformation (i.e.,8x2
dom(f)(f(x)=g(x))),then —according toExtensionality 4.1,p.115—we
havethatf=g.
Toestablish thattwofunctionsf;g:X!Yaredifferent wehavetoﬁnd an
x2Xwithf(x)6=g(x).Aswehaveseen inSection 4.2,there isnogeneric
algorithm forchecking function equality .Therefore, toestablish thattwofunctions
f;g:X!Yareequal, weneed aproof. Thegeneral form, spelled outinfull, of
such aproof is:
Given: f;g:X!Y.
Tobeproved:f=g.
Proof:
LetxbeanarbitraryobjectinX.
Tobeproved:f(x)=g(x).
Proof:
...
Thusf(x)=g(x).
Thusf=g.
Example 6.6Iffandgaredeﬁned onRbyf(x)=x2+2x+1,resp.,g(x)=
(x+1)2,thenf=g.Thus, functions arenotdistinguished bythedetails ofhow
theyactually transform (inthisrespect,fandgdiffer), butonly with respect to
their output-beha viour .
6.1.BASICNOTIONS 211
Warning .Iffunctionsf:X!Yandg:X!Zaregiveninthedomain-
co-domain -conte xt,and8x2X(f(x)=g(x)),thenfandgcount asequal only
ifwealso havethatY=Z.Theco-domains aretakenasanintegralpartofthe
functions.
Function Deﬁnitions. Ift(x)isanexpression thatdescribes anelement ofY
interms ofanelementx2X,then wecandeﬁne afunctionf:X !Yby
writing:
Letthefunctionf:X!Ybedeﬁned byf(x)=t(x).
Forcompletely specifying afunctionfthree things aresufﬁcient:
Specify dom(f),
Specify theco-domain off,
Giveaninstruction forhowtoconstructf(x)fromx.
Examples ofsuch instructions arex7!x+1,x7!x2,andinfactalltheHask ell
deﬁnitions offunctions thatwehaveencountered inthisbook.
Averyconvenient notation forfunction construction isbymeans oflambda ab-
straction (page 58). Inthisnotation,x:x+1encodes thespeciﬁcation x7!x+1.
Thelambda operator isavariable binder ,sox:x+1andy:y+1denote thesame
function. Infact,everytime wespecify afunctionfooinHask ellbymeans of
fooxyz=t
wecanthink ofthisasaspeciﬁcation xyz:t.Ifthetypes ofx;y;z;tareknown,
thisalso speciﬁes adomain andaco-domain. Forifx::a,y::b,z::c,
t::d,thenxyz:thastypea->b->c->d.
Example 6.7
1.t(x)istheexpression 2x2+3:
Letthefunctiong:R !Rbedeﬁned byg(x)=2x2+3.
2.t(x)istheexpressionRx
0ysin(y)dy:
Letthefunctionh:R !Rbedeﬁned byh(x)=Rx
0ysin(y)dy.
212 CHAPTER 6.FUNCTIONS
Example 6.8The Hask ellwayofdeﬁning functions isveryclose tostandard
mathematical practice, witness thefollo wing examples (note thatallthese equa-
tions deﬁne thesame function):
f1x=x^2+2*x+1
g1x=(x+1)^2
f1'=\x->x^2+2*x+1
g1'=\x->(x+1)^2
Recurr ences versus Closed Forms. Adeﬁnition forafunctionf:N!Ain
terms ofalgebraic operations iscalled aclosed form deﬁnition. Afunction deﬁni-
tionforfinterms ofthevalues offforsmaller arguments iscalled arecurr ence
forf.Theadvantage ofaclosed form deﬁnition overarecurrence isthatitallows
formore efﬁcient computation, since (ingeneral) thecomputation time ofaclosed
form does notgrowexponentially with thesizeoftheargument.
Example 6.9Consider thefollo wing recurrence.
g0=0
gn=g(n-1)+n
Aclosed form deﬁnition ofthesame function is:
g'n=((n+1)*n)/2
Exer cise6.10 Giveaclosed form implementation ofthefollo wing function:
6.1.BASICNOTIONS 213
h0=0
hn=h(n-1)+(2*n)
Exer cise6.11 Giveaclosed form implementation ofthefollo wing function:
k0=0
kn=k(n-1)+(2*n-1)
Toshowthataparticular closed form deﬁnes thesame function asagivenrecur -
rence, weneed aproof byinduction: seeChapter 7.Itisnotalwayspossible to
ﬁnduseful deﬁnitions inclosed form, andrecurrences areingeneral much easier
toﬁndthan closed forms. E.g., aclosed form forthefactorial functionn!would
beanexpression that allowsustocomputen!with atmost aﬁxednumber of
‘standard’ operations. Thenumber ofoperations should beindependent ofn,so
n!=Qn
k=1k=1(n 1)ndoes notcount, forhides anumber of
product operations thatdoes depend onn.Noclosed form forn!isknown,and
n!=Qn
k=1kperforms essentially thesame calculation asn!=(n 1)!n.
Thus, computationally ,there isnothing tochoose between thefollo wing twoim-
plementations ofn!.
fac0=1
facn=fac(n-1)*n
fac'n=product [k|k<-[1..n]]
Note thatthere isnoneed toaddfac'0=1tothesecond deﬁnition, because of
theconvention thatproduct []givesthevalue1.
Asimple example ofdeﬁning afunction interms ofanother function isthefollo w-
ing(seeFigure 6.1).
214 CHAPTER 6.FUNCTIONS
-2-101201234
01201234
Figure 6.1:Restricting thefunctionx:x2.
Deﬁnition 6.12 (Restrictions) Suppose thatf:X !YandAX.The
restriction offtoAisthefunctionh:A!Ydeﬁned byh(a)=f(a).The
notation forthisfunction isfA.
Here istheimplementation, forfunctions implemented astypea->b:
restrict ::Eqa=>(a->b)->[a]->a->b
restrict fxsx|elemxxs=fx
|otherwise =error"argument notindomain"
And thisistheimplementation forfunctions implemented aslistsofpairs:
restrictPairs ::Eqa=>[(a,b)] ->[a]->[(a,b)]
restrictPairs xysxs=[(x,y)|(x,y)<-xys,elemxxs]
Deﬁnition 6.13 (Image, Co-image) Suppose thatf:X !Y,AXand
BY.
1.f[A]=ff(x)jx2Agiscalled theimageofAunderf;
6.1.BASICNOTIONS 215
2.f 1[B]=fx2Xjf(x)2Bgiscalled theco-ima geofBunderf.
From thisdeﬁnition weget:
1.f[X]=ran(f),
2.f 1[Y]=dom(f),
3.y2f[A],9x2A(y=f(x)),
4.x2f 1[B],f(x)2B.
From 3.itfollo wsthatx2A)f(x)2f[A].Butnote that wedonot
necessarily havethatf(x)2f[A])x2A.(Example:f=f(0;2);(1;2)g,
x=0,A=f1g.)
TwoTypes ofBrack ets. Distinguish f(a)andf[A].The notationf(a)pre-
supposes thata2dom(f).Then,f(a)isthef-value ofa.The notationf[A]
presupposes Adom(f).Thenf[A]isthesetofvaluesf(x)wherex2A.
Remark. Manytextsdonotemplo yf[]butusef()throughout. Inthatcase,
youhavetoﬁgure outfrom theconte xtwhat ismeant.
Intheexpressionf 1[B],thepartf 1hasnomeaning when takenbyitself. The
notationf 1will beused later onfortheinverse function corresponding tof.
Such aninverse only exists iffhappens tobeabijection .However,thenotation
f 1[B]isalwaysmeaningful anddoes notpresuppose bijecti vity.
Here aretheimplementations ofimageandco-ima ge:
image::Eqb=>(a->b)->[a]->[b]
imagefxs=nub[fx|x<-xs]
coImage ::Eqb=>(a->b)->[a]->[b]->[a]
coImage fxsys=[x|x<-xs,elem(fx)ys]
This gives:
FCT>image(*2)[1,2,3]
[2,4,6]
FCT>coImage (*2)[1,2,3] [2,3,4]
[1,2]
216 CHAPTER 6.FUNCTIONS
And here aretheversions forfunctions represented aslistsofpairs:
imagePairs ::(Eqa,Eqb)=>[(a,b)] ->[a]->[b]
imagePairs fxs=image(list2fct f)xs
coImagePairs ::(Eqa,Eqb)=>[(a,b)] ->[a]->[b]->[a]
coImagePairs fxsys=coImage (list2fct f)xsys
Exer cise6.14 Consider therelationR=f(0;4);(1;2);(1;3)g.
1.IsRafunction?
Ifso,determine dom(R)andran(R).
2.Remember: R 1=f(b;a)j(a;b)2Rgistheinverse oftherelationR.
(Deﬁnition 5.7,p.163).
IsR 1afunction?
Ifso,determine dom(R 1)andran(R 1).
Exer cise6.15 Suppose thatf:X !YandAX.Verify:
1.f[A]=ran(fA),
2.f[dom(f)]=ran(f),
3.f 1[B]=dom(f\(XB)),
4.f 1[ran(f)]=dom(f),
5.fA=f\(AY).
Exer cise6.16 LetX=f0;1;2;3g,Y=f2;3;4;5g,f=f(0;3);(1;2);(2;4);(3;2)g.
Determineff0;3g,f[f1;2;3g]andf 1[f2;4;5g].Next,check your answers
with theimplementation.
6.1.BASICNOTIONS 217
Exer cise6.17 Suppose thatf:A!Y,g:B!Y,andA\B=;.Showthat
f[g:A[B!Y:
What ifA\B6=;?
Exer cise6.18*LetAbeapartition ofX.ForeverycomponentA2Aafunction
fA:A!Yisgiven.Show,thatS
A2AfA:X!Y.
Example 6.19 Suppose thatf:X!YandA;BX.Weshowthatf[A 
B]f[A] f[B].
Assume thaty2f[A] f[B].Theny2f[A]andy62f[B].From theﬁrstwe
obtainx2Asuch thaty=f(x).From thesecond weseethatx62B(otherwise,
y=f(x)2f[B]).So,x2A B,andy=f(x)2f[A B].
Toseethattheinclusion cannot bereplaced byanequality ,takeX=Y=A=
f0;1g,B=f1g,andletfbegivenbyf(x)=0.Thenf[A B]=f[f0g]=f0g
andf[A] f[B]=f0g f0g=;.
Next,suppose thatf:X!YandC;DY.Weshowthatf 1[C D]=
f 1[C] f 1[D]:
x2f 1[C D]()f(x)2C D
()(f(x)2C)^(f(x)62D)
()x2f 1[C]^x62f 1[D]
()x2f 1[C] f 1[D]:
Therequired equality follo wsusing Extensionality .
Exer cise6.20 Suppose thatf:X!Y,A;BX,andC;DY.Seeexample
6.19. Show:
1.AB)f[A]f[B];
CD)f 1[C]f 1[D],
2.f[A[B]=f[A][f[B];
f[A\B]f[A]\f[B],
3.f 1[C[D]=f 1[C][f 1[D];
f 1[C\D]=f 1[C]\f 1[D],
218 CHAPTER 6.FUNCTIONS
4.f[f 1[C]]C;
f 1[f[A]]A.
Givesimple examples toshowthattheinclusions in2and4cannot bereplaced by
equalities.
6.2 Surjections, Injections, Bijections
IfXisthedomain ofafunctionf,then foreachx2Xthere isonly oney
with(x;y)2f.However,there may beother elementsz2Xwith(z;y)2f.
Functions forwhich thisdoes nothappen warrant aspecial name.
Iffisafunction fromXtoY,then there may beelements ofYthatarenotin
f[X].Again, functions forwhich thisdoes nothappen warrant aspecial name.
Deﬁnition 6.21 (Surjections, Injections, Bijections)
Afunctionf:X !Yiscalled
1.surjective ,orasurjection ,oronto Y,ifeveryelementb2Yoccurs asa
function value ofatleast onea2X,i.e.,iff[X]=Y;
2.injective ,aninjection ,orone-to-one ,ifeveryb2Yisvalue ofatmost one
a2X;
3.bijective orabijection ifitisboth injecti veandsurjecti ve.
Example 6.22 Most functions areneither surjecti ve,norinjecti ve.Forinstance,
sin:R!Risnotsurjecti ve(e.g.,22Risnotavalue) andnotinjecti ve
(sin0=sin).
Theidentity function 1X:X!Xisabijection, whate verthesetX.
LetAbeaset.According toTheorems 5.87 and5.94, thefunction thattrans-
forms anequivalenceRonAintoitsquotientA=R isabijection between
thesetofequivalences andthesetofpartitions onA.
Considerf=f(0;1);(1;0);(2;1)g.Thus, dom(f)=f0;1;2g.Thefunc-
tion
f:f0;1;2g !f0;1g
6.2.SURJECTIONS, INJECTIONS, BIJECTIONS 219
issurjecti ve,but
f:f0;1;2g !f0;1;2g
isnotsurjecti ve.The concept ofsurjecti vity presupposes that ofaco-
domain. Cf.6.5(p.210). However,whate verthisco-domain, fclearly
isnotinjecti ve,since 0and2havethesame image.
Ifthedomain ofafunction isrepresented asalist,theinjecti vitytestcanbeim-
plemented asfollo ws:
injective ::Eqb=>(a->b)->[a]->Bool
injective f[]=True
injective f(x:xs)=
notElem (fx)(imagefxs)&&injective fxs
Similarly ,ifthedomain andco-domain ofafunction arerepresented aslists, the
surjecti vitytestcanbeimplemented asfollo ws:
surjective ::Eqb=>(a->b)->[a]->[b]->Bool
surjective fxs[]=True
surjective fxs(y:ys)=
elemy(imagefxs)&&surjective fxsys
Exer cise6.23 Implement atestforbijecti vity.
Exer cise6.24 Implement tests
injectivePairs, surjectivePairs, bijectivePairs
forfunctions represented aslistsofpairs.
Proving that aFunction isInjecti ve/Surjecti ve.Thefollo wing implication isa
useful wayofexpressing thatfisinjecti ve:
f(x)=f(y)=)x=y:
Theproof schema becomes:
220 CHAPTER 6.FUNCTIONS
Tobeproved:fisinjective.
Proof:
Letx;ybearbitrary,andsuppose f(x)=f(y).
...
Thusx=y.
Thecontraposition off(x)=f(y)=)x=y,i.e.,
x6=y=)f(x)6=f(y);
ofcourse says thesame thing differently ,soanequivalent proof schema is:
Tobeproved:fisinjective.
Proof:
Letx;ybearbitrary,andsuppose x6=y.
...
Thusf(x)6=f(y).
Thatf:X!Yissurjecti veisexpressed by:
8b2Y9a2Xf(a)=b:
This givesthefollo wing pattern foraproof ofsurjecti vity:
Tobeproved:f:X!Yissurjective.
Proof:
LetbbeanarbitraryelementofY.
...
Thusthereisana2Xwithf(a)=b.
Exer cise6.25 Arethefollo wing functions injecti ve?surjecti ve?
6.2.SURJECTIONS, INJECTIONS, BIJECTIONS 221
1.sin:R+!R(N.B.: R+=fx2Rj0<xg),
2.sin:R![ 1;+1],
3.sin:[ 1;+1]![ 1;+1],
4.ex:R!R,
5.tan:R!R,
6.log:R+!R,
7.p:R+!R+.
Remark. Thefunctions ofExercise 6.25 areallpredeﬁned inHask ell:sin,exp,
tan,log,sqrt .Thebase ofthenatural logarithm, Napier’ snumbere,isgivenby
exp1.
Exer cise6.26 Giveaformula forthenumber ofinjections from ann-element set
Atoak-element setB.
Exer cise6.27 Implement afunction
injs::[Int]->[Int]->[[(Int,Int)]]
thattakesaﬁnite domain andaﬁnite codomain oftypeIntandproduces thelist
ofallinjections from domain tocodomain, givenaslistsofintegerpairs.
Exer cise6.28 Thebijections onaﬁnite setAcorrespond exactly tothepermuta-
tions ofA.Implement afunction
perms::[a]->[[a]]
thatgivesallpermutations ofaﬁnite list.Thecallperms[1,2,3] should yield:
[[1,2,3],[2,1,3],[2,3,1],[1,3 ,2],[3,1,2],[3,2,1]]
Hint: togetthepermutations of(x:xs) ,takeallthepossible waysofinsertingx
inapermutation ofxs.
222 CHAPTER 6.FUNCTIONS
6.3 Function Composition
Deﬁnition 6.29 (Composition) Suppose thatf:X !Yandg:Y !Z.
Thus, theco-domain offcoincides with thedomain ofg.Thecomposition off
andgisthefunctiongf:X !Zdeﬁned by
(gf)(x)=g(f(x)):
(“First, applyf,next,applyg”—thanks totheusual “preﬁx”-notation forfunc-
tions, thefandthegareunfortunately inthereverse order inthenotationgf.
Tokeepthisreverse order inmind itisgood practice torefer togfas“gafter
f”.)
N.B.: Thenotationgfpresupposes thattheco-domain offandthedomain of
garethesame. Furthermore, gfhasthedomain offandtheco-domain ofg.
Function composition ispredeﬁned inHask ell,asfollo ws:
(.) ::(b->c)->(a->b)->(a->c)
(f.g)x =f(gx)
Example 6.30 Hask ellhasageneral procedure negate fornegating anumber .
The effect ofﬁrst taking theabsolute value, then negating cannowbegotby
means of(negate .abs) :
Prelude> (negate .abs)5
-5
Prelude> (negate .abs)(-7)
-7
Prelude>
Example 6.31 Another example from Prelude .hsis:
evenn =n`rem`2==0
odd =not.even
6.3.FUNCTION COMPOSITION 223
Exer cise6.32 Implement anoperation comp forcomposition offunctions repre-
sented aslistsofpairs.
Example 6.33 Inanalysis, compositions abound. E.g., iff:R!R+isx7!
x2+1,andg:R+!Risx7!px,thengf:R!Risx7!p
x2+1:
(gf)(x)=g(f(x))=g(x2+1)=p
x2+1.
Theidentity function beha vesasaunitelement forcomposition (seeExample 6.1
for1X):
Fact6.34 Iff:X!Y,thenf1X=1Yf=f.
Suppose thatf:X!Y,g:Y!Zandh:Z!U.There arenowtwoways
todeﬁne afunction fromXtoU:(i)(hg)f,and(ii)=h(gf).Thenext
lemma says thatthese functions coincide. Thus, composition isassociative ;and
wecansafely writehgfifwemean either ofthese.
Lemma 6.35 Iff:X!Y,g:Y!Zandh:Z!U,then(hg)f=
h(gf).
Proof.Suppose thatx2X.Then:
((hg)f)(x)=(hg)(f(x))=h(g(f(x)))=h((gf)(x))=(h(gf))(x).
Thefunctions (hg)fandh(gf)havethesame domain (X)andco-domain
(U)and, onthisdomain, showthesame action. Thus, theyare(6.5, p.210) equal.
Lemma 6.36 Suppose thatf:X !Y,g:Y !Z.Then:
1.gfinjective =)finjective ,
2.gfsurjective =)gsurjective ,
3.fandginjective =)gfinjective ,
4.fandgsurjective =)gfsurjective .
Proof.Weprove1,2and4.
1.Given:gfinjecti ve,i.e.,(gf)(a1)=(gf)(a2))a1=a2.
Tobeproved:finjecti ve,i.e.,f(a1)=f(a2))a1=a2.
224 CHAPTER 6.FUNCTIONS
Proof: Assumef(a1)=f(a2).Then ofcourse,g(f(a1))=g(f(a2)).(Applying
gtwice tothesame argument must produce thesame value twice.) Butthen,
(gf)(a1)=g(f(a1))=g(f(a2))=(gf)(a2).Thegivennowshowsthat
a1=a2.
2.Given:gfsurjecti ve.
Tobeproved:gsurjecti ve.I.e.,8c2Z9b2Y(g(b)=c).
Proof: Assumec2Z.Wanted:b2Ysuch thatg(b)=c.Sincegfissurjecti ve,
there isa2Xsuch that(gf)(a)=c.But,g(f(a))=(gf)(a).I.e.,b=f(a)
istheelement lookedfor.
4.Given:fandgsurjecti ve.
Tobeproved:gfsurjecti ve.I.e.,everyc2Zisavalue ofgf.
Proof: Assumec2Z.Sincegissurjecti ve,b2Yexists such thatg(b)=c.
Sincefissurjecti ve,a2Xexists such thatf(a)=b.Itfollo wsthat(gf)(a)=
g(f(a))=g(b)=c.So,aistheelement lookedfor.
Note thatthere arestatements inthespirit ofLemma 6.36 thatdonothold. In
particular ,from thefactthatgfisinjecti ve,itdoes notfollo wthatgisinjecti ve.
Consider thecase wherefisthe(empty) function from;toY,andganarbitrary
non-injecti vefunction fromY!Z.Thengfisthe(empty) function from;to
Z,which issurely injecti ve.Butgbyassumption isnotinjecti ve.
Foranexample inwhichgfisbijecti ve,butgnotinjecti veandfnotsurjecti ve,
takef:N!Ngivenbyf(n)=n+1andg:N!Ngivenby
g(n)=n ifn=0
n 1ifn>1:
Clearly ,gfistheidentity onN,butfisnotasurjection, andgisnotaninjection.
Exer cise6.37 Canyouthink upanexample withgfbijecti ve,butgnotinjecti ve
andfnotsurjecti ve,with thedomain offﬁnite? Ifyes,givetheexample, ifno,
provethatthisisimpossible.
Exer cise6.38 Thefunctionf:f0;1;2;3;4g!f0;1;2;3;4gisdeﬁned bythe
follo wing table:
x 01234
f(x) 12003
(ff)(x)
(fff)(x)
(ffff)(x)
6.3.FUNCTION COMPOSITION 225
1.Determine thecompositions ff,fffandffffbycompleting
thetable.
2.Howmanyelements hasthesetff;ff;fff;:::g?(N.B.: theelements
arefunctions!)
3.Exhibit afunctiong:f0;1;2;3;4g!f0;1;2;3;4gsuch thatfg;gg;g
gg;:::ghas6elements.
Exer cise6.39*Suppose thatAisaﬁnite setandf:A!Aisabijection. Then
f1=f,f2=ff,f3=fff,...allarebijections :A!A.
1.Showthat, some where inthissequence, there occurs thebijection 1A.I.e.,
anumbernexists such thatfn=1A.
2.Suppose thatAhaskelements. Canyougiveanupper bound forn?
Exer cise6.40 Suppose thath:X!Xsatisﬁeshhh=1X.Showthathis
abijection.
Exhibit asimple example ofasetXandafunctionh:X!Xsuch thathhh=
1X,whereash6=1X.
Exer cise6.41 ProveLemma 6.36.3.
Exer cise6.42 Suppose thatf:X!Yandg:Y!Zaresuch thatgfis
bijecti ve.Showthatfissurjecti veiffgisinjecti ve.
Exer cise6.43 Suppose thatlimi!1ai=a,andthatf:N!Nisinjecti ve.
Showthatlimi!1af(i)=a.(Cf.alsoExercise 8.22, p.318.)
226 CHAPTER 6.FUNCTIONS
6.4 Inverse Function
Ifweconsiderf:X!Yasarelation, then wecanconsider itsrelational
inverse: thesetofall(y;x)with(x;y)2f.However,there isnoguarantee that
therelational inverse ofafunction isagain afunction. Incasefisinjecti ve,we
knowthattherelational inverse offisapartial function (some elements inthe
domain may nothaveanimage). Iffisalsosurjecti ve,weknowthattherelational
inverseoffisafunction. Thus, aninversefunction offhastosatisfy some special
requirements.
Figure 6.2:Inverseofthefunctionx:x2(restricted toR+).
Deﬁnition 6.44 (Inverse Function) Suppose thatf:X!Y.Afunctiong:
Y!Xisaninverseoffifboth (i)gf=1X,and(ii)fg=1Y.
Thenexttheorem says allthere istoknowabout inverses. Itsproof describes how
toﬁndaninverseifthere isone.
Note that, bytheﬁrstpartofthetheorem, wecansafely talkabout theinverseofa
function (provided there isone).
Theor em6.45
1.Afunction hasatmost oneinverse.
2.Afunction hasaninverseiffitisbijective .
Proof.(1)Suppose thatgandhareboth inverses off:X!Y.Theng=
1Xg=(hf)g=h(fg)=h1Y=h.
(2)(Only if.)Assume thatgisinverseoff.Then sincegf=1Xisinjecti ve,by
Lemma 6.36.1falsoisinjecti ve.And sincefg=1Yissurjecti ve,by6.36.2f
alsoissurjecti ve.
6.4.INVERSE FUNCTION 227
(If.) Suppose thatfisabijection. I.e.,foreveryy2Ythere isexactly onex2X
such thatf(x)=y.Thus, wecandeﬁne afunctiong:Y!Xbylettingg(y)be
theuniquexsuch thatf(x)=y.
Thengisinverse off:ﬁrstly ,ifx2X,theng(f(x))=x;secondly ,ify2Y,
thenf(g(y))=y.
Notation. Iff:X!Yisabijection, then itsunique inverseisdenoted byf 1.
Remark. Iff:X!Yisabijection, thenf 1candenote either theinverse
function :Y!X,ortheinverseoffconsidered asarelation. Butfrom theproof
ofTheorem 6.45 itisclear thatthese arethesame.
Example 6.46 The realfunctionfthatisgivenbyf(x)=9
5x+32allowsus
toconvertdegrees Celcius into degrees Fahrenheit. The inverse functionf 1is
givenbyf 1(x)=5
9(x 32);itconvertsdegrees Fahrenheit back intodegrees
Celsius. Here areintegerapproximations:
c2f,f2c::Int->Int
c2fx=div(9*x)5+32
f2cx=div(5*(x-32))9
*Left and Right-in verse. Note thatthere aretworequirements oninverse func-
tions. Iff:X!Y,g:Y!X,andwehavethatgf=1Xonly,thengis
called left-in verseoffandfright-in verseofg.
Example 6.47 Theclass Enum is(pre-)deﬁned inHask ellasfollo ws:
classEnumawhere
succ,pred ::a->a
toEnum ::Int->a
fromEnum ::a->Int
fromEnum should bealeft-in verseoftoEnum :
228 CHAPTER 6.FUNCTIONS
fromEnum (toEnum x)=x
This requirement cannot beexpressed inHask ell,soitistheresponsibility ofthe
programmer tomakesure that itissatisﬁed. Examples ofuseoftoEnum and
fromEnum from Prelude .hs:
ord ::Char->Int
ord =fromEnum
chr ::Int->Char
chr =toEnum
Exer cise6.48 Show:iff:X!Yhasleft-in versegandright-in verseh,thenf
isabijection andg=h=f 1.
Exer cise6.49 Suppose thatf:X!Yandg:Y!X.Showthatthefollo wing
areequivalent.
1.gf=1X,
2.f(f(x);x)jx2Xgg.
Exer cise6.50X=f0;1g,Y=f2;3;4;5g,f=f(0;3);(1;4)g.Wehavethat
f:X!Y.Howmanyfunctionsg:Y!Xhavetheproperty ,thatgf=1X?
Exer cise6.51 Giveanexample ofaninjectionf:X!Yforwhich there isno
g:Y!Xsuch thatgf=1X.
Exer cise6.52*Showthatiff:X!Yissurjecti ve,afunctiong:Y!Xexists
such thatfg=1Y.
6.5.PARTIALFUNCTIONS 229
Exer cise6.53 Howmanyright-in verses arethere tothefunction
f(0;5);(1;5);(2;5);(3;6);(4;6)g
(domain:f0;1;2;3;4g,co-domain:f5;6g)?
Exer cise6.54 1.Thesurjectionf:R!R+isdeﬁned byf(x)=x2.Give
three different right-in verses forf.
2.Same question forg:[0;]![0;1]deﬁned byg(x)=sinx.
Exer cise6.55 Suppose thatf:X!Yisasurjection andh:Y!X.Show
thatthefollo wing areequivalent.
1.hisright-in verseoff,
2.hf(f(x);x)jx2Xg.
Exer cise6.56*Show:
1.Everyfunction thathasasurjecti veright-in verseisabijection.
2.Everyfunction thathasaninjecti veleft-in verseisabijection.
6.5 Partial Functions
Apartial function fromXtoYisafunction with itsdomain included inXand
itsrange included inY.Iffisapartial function fromXtoYwewrite thisasf:
X,!Y.Itisimmediate from thisdeﬁnition thatf:X,!Yiffdom(f)X
andfdom(f):dom(f)!Y.
Awayofdeﬁning apartial function (using?for‘undeﬁned’):
f(x)=? if:::
t otherwise
230 CHAPTER 6.FUNCTIONS
Thecomputational importance ofpartial functions isinthesystematic perspecti ve
theyprovide onexception handling. InHask ell,thecrude waytodeal with excep-
tions isbyacalltotheerror abortion functionerror .Thecode belowimplements
partial functions succ0 andsucc1 .succ0 ispartial because thepattern(x+1)
only matches positive integers.succ1 hasanexplicit calltoerror .The disad-
vantage ofthese implementations isthattheyarecalled byanother program, the
execution ofthatother program may abort.
succ0::Integer ->Integer
succ0(x+1)=x+2
succ1::Integer ->Integer
succ1=\x->ifx<0
thenerror"argument outofrange"
elsex+1
This uses thereserv edkeywordsif,then andelse ,with theobvious meanings.
Auseful technique forimplementing partial functions istorepresent apartial func-
tionfrom typeatotypebasafunction oftypea->[b].Incase ofanexception,
theempty listisreturned. Ifaregular value iscomputed, theunit listwith the
computed value isreturned.
succ2::Integer ->[Integer]
succ2=\x->ifx<0then[]else[x+1]
Composition ofpartial functions implemented with unit lists canbedeﬁned as
follo ws:
pcomp::(b->[c])->(a->[b])->a->[c]
pcompgf=\x->concat[gy|y<-fx]
Asanalternati vetothistrick with unitlistsHask ellhasaspecial data type forim-
plementing partial functions, thedata typeMaybe ,which ispredeﬁned asfollo ws.
6.5.PARTIALFUNCTIONS 231
dataMaybea=Nothing |Justa
deriving (Eq,Ord,Read,Show)
maybe ::b->(a->b)->Maybea->b
maybenfNothing =n
maybenf(Justx)=fx
Here isathird implementation ofthepartial successor function:
succ3::Integer ->MaybeInteger
succ3=\x->ifx<0thenNothing elseJust(x+1)
Theuseofthepredeﬁned functionmaybe isdemonstrated inthedeﬁnition ofcom-
position forfunctions oftypea->Maybeb.
mcomp::(b->Maybec)->(a->Maybeb)->a->Maybec
mcompgf=(maybeNothing g).f
Ofcourse, themaybe function allowsforallkinds ofwaystodeal with excep-
tions. E.g., afunction oftypea->Maybebcanbeturned intoafunction oftype
a->bbythefollo wingpart2error conversion.
part2error ::(a->Maybeb)->a->b
part2error f=(maybe(error"valueundefined") id).f
Exer cise6.57 Deﬁne apartial function
stringCompare ::String->String->MaybeOrdering
232 CHAPTER 6.FUNCTIONS
forordering strings consisting ofalphabetic characters intheusual listorder .Ifa
non-alphabetic symbol occurs, theordering function should returnNothing .Use
isAlpha fortheproperty ofbeing analphabetic character .
6.6 Functions asPartitions
Inpractice, equivalences areoften deﬁned bywayoffunctions. Parabusdelan-
guagefunctions sometimes arecalled partitions forthatreason. Examples ofsuch
functions ontheclass ofallpeople: “the gender ofx”(partitions inmales andfe-
males), “the color ofx”(partitions inraces), “the ageofx”(some hundred equiv-
alence classes). Thenextexercise explains howthisworks andasks toshowthat
everyequivalence isobtained inthisway.
Exer cise6.58 Suppose thatf:A!Iisasurjection. Deﬁne therelationRonA
by:aRb:f(a)=f(b).Thus,R=f(a;b)2A2jf(a)=f(b)g.Show:
1.Risanequivalence onA,
2.A=R=ff 1[fig]ji2Ig,
3.foreveryequivalenceSonAthere isafunctiongonAsuch thataSb,
g(a)=g(b).
Example 6.59 Foranyn2Zwithn6=0,letthefunction RMn::Z!Z
begivenbyRMn(m):=rwhere 06r<nandthere issomea2Zwith
m=an+r.Then RMninduces theequivalencenonZ.
Here isaHask ellimplementation ofaprocedure thatmaps afunction totheequiv-
alence relation inducing thepartition thatcorresponds with thefunction:
fct2equiv ::Eqa=>(b->a)->b->b->Bool
fct2equiv fxy=(fx)==(fy)
Youcanusethistotestequality modulon,asfollo ws:
6.6.FUNCTIONS ASPARTITIONS 233
FCT>fct2equiv (`rem`3)214
True
Exer cise6.60*Suppose thatf:A!B.
1.Show:Iffisaninjection, then forallsetsCandforeveryg:A!Cthere
isafunctionh:B!Csuch thatg=hf.
2.Show:ForallsetsC,iftoeveryg:A!Cthere isafunctionh:B!C
such thatg=hf,thenfisaninjection.
Exer cise6.61*Suppose thatRisanequivalence onthesetA.Show:forevery
equivalenceSRonAthere exists afunctiong:A=R!A=S such that, for
a2A:jajS=g(jajR).
Exer cise6.62*Suppose thatisanequivalence onA,andthatf:A2!Aisa
binary function such thatforalla;b;x;y2A:
ax^by=)f(a;b)f(x;y):
Showthataunique functionf:(A=)2!Bexists such that, fora;b2A:
f(jaj;jbj)=jf(a;b)j.
Exer cise6.63*Suppose thatisanequivalence onA,andthatRA2isa
relation such thatforalla;b;x;y2A:
ax^by^aRb)xRy:
Showthataunique relationR(A=)2exists such thatforalla;b2A:
jajRjbj,aRb.
Exer cise6.64*AandBaresets, withB6=;.DeﬁneonABby:(a;b)
(x;y)a=x.
1.Showthatisanequivalence onAB.
2.Exhibit abijection :(AB)= !Afrom thequotient ofABmodulo
toA.
234 CHAPTER 6.FUNCTIONS
3.Exhibit, foreveryequivalence class, abijection between theclass andB.
Equi valence classes (restricted toalist)foranequivalence deﬁned byafunction
aregenerated bythefollo wing Hask ellfunction:
block::Eqb=>(a->b)->a->[a]->[a]
blockfxlist=[y|y<-list,fx==fy]
This gives:
FCT>block(`rem`3)2[1..20]
[2,5,8,11,14,17,20]
FCT>block(`rem`7)4[1..20]
[4,11,18]
Exer cise6.65 Functions canbeused togenerate equivalences, orequivalently ,
partitions. Inanimplementation weuselistpartitions ;seeExercise 5.109 fora
deﬁnition. Implement anoperation fct2listpart that takesafunction anda
domain andproduces thelistpartition thatthefunction generates onthedomain.
Some example uses oftheoperation are:
Main>fct2listpart even[1..20]
[[1,3,5,7,9,11,13,15,17,19],[ 2,4,6,8,10,12,14,16,18,20]]
Main>fct2listpart (\n->remn3)[1..20]
[[1,4,7,10,13,16,19],[2,5,8,1 1,14,17,20],[3,6,9,12,15,18]]
Exer cise6.66 Giveanformula forthenumber ofsurjections from ann-element
setAtoak-element setB.(Hint: each surjectionf:A!Binduces apartition.
These partitions canbecounted with thetechnique from Example 5.103.)
6.7 Products
Deﬁnition 6.67 (Product) Suppose that, foreveryelementi2Ianon-empty set
Xiisgiven.TheproductQ
i2IXiisthesetofallfunctionsfforwhich dom(f)=
Iandsuch thatforalli2I:f(i)2Xi.
6.7.PRODUCTS 235
WhenI=f0;:::;n 1g,thisproduct isalsowritten asX0Xn 1.
IfallXi(i2I)arethesame,Xi=X,theproduct iswritten asXI.Thus,XIis
thesetofallfunctionsf:I!X.
Exer cise6.68*There arenowtwowaystointerpret theexpressionX0X1:(i)
asQ
i2f0;1gXi,and(ii)asf(x;y)jx2X0^y2X1g.Can youexplain why
there isnoharm inthis?
Inourimplementation language, product types havetheform(a,b) ,(a,b,c) ,
etcetera.
Exer cise6.69*LetAbeanyset.Exhibit twodifferent bijections between}(A)
andf0;1gA.
Exer cise6.70*Suppose thatXandYaresets. OnthesetoffunctionsYX=
ffjf:X!Yg,therelationisdeﬁned by:fgthere arebijections
i:Y!Yandj:X!Xsuch thatif=gj.
1.Showthatisanequivalence.
2.Show:iff;g:X!Yareinjecti ve,thenfg.
3.Suppose thatY=f0;1;2gandX=f0;1;2;3g.
(a)Showthatf(0;0);(1;0);(2;1)gf(0;1);(1;3);(2;3)g.
(b)Howmanyequivalence classes has?Foreveryclass, produce one
representati ve.
Exer cise6.71*Suppose thatX,YandZaresetsandthath:Y!Z.Deﬁne
F:YX!ZXbyF(g):=hg.Show:
1.ifhisinjecti ve,thenFisinjecti ve,
2.ifhissurjecti ve,thenFissurjecti ve.
Exer cise6.72*Suppose thatX6=;,Y,andZaresetsandthath:X!Y.
DeﬁneF:ZY!ZXbyF(g):=gh.Show:
236 CHAPTER 6.FUNCTIONS
1.ifhisinjecti ve,thenFissurjecti ve,
2.ifhissurjecti ve,thenFisinjecti ve.
6.8 Congruences
Afunctionf:Xn!Xiscalled ann-ary operation onX.Addition andmulti-
plication arebinary operations onN(onZ,onQ,onR,onC).
Ifonewants todeﬁne newstructures from old, animportant method istaking
quotients forequivalences thatarecompatible with certain operations.
Deﬁnition 6.73 (Congruence) Iffbeann-ary operation onA,andRanequiv-
alence onA,thenRisacongruence forf(or:Riscompatible withf)iffor
all
x1;:::;xn;y1;:::;yn2A:x1Ry1;:::;xnRyn
imply that
f(x1;:::;xn)Rf(y1;:::;yn):
IfRisacongruence forf,then theoperation induced byfonA=R istheoperation
fR:(A=R)n!A=R givenby
fR(ja1jR;:::;janjR):=jf(a1;:::;an)jR:
If(A;f)isasetwith anoperationfonitandRisacongruence forf,then
(A=R;fR)isthequotient structur edeﬁned byR.
Example 6.74 Consider themodulonrelation onZ.Supposemnm0and
knk0.Then (Proposition 5.65) there area;b2Zwithm0=m+anand
k0=k+bn.Thusm0+k0=m+k+(a+b)n,i.e.,m+knm0+k0.This
showsthatnisacongruence foraddition. Similarly ,itcanbeshownthatnisa
congruence forsubtraction. Itfollo wsthatwecandeﬁne [m]n+[k]n:=[m+k]n
and[m]n [k]n:=[m k]n.
Exer cise6.75 ShowthatnonZisacongruence formultiplication, foranyn2
Zwithn6=0.
6.8.CONGRUENCES 237
Example 6.76 IsnonZ(n6=0)acongruence forexponentiation, i.e., isit
possible todeﬁne exponentiation ofclasses inZnbymeans of:
([k]n)([m]n):=[km]n;fork2Z;m2N?
No,forconsider thefollo wing example: ([2]3)([1]3)=[21]3=[2]3.Since134
wealso have:([2]3)([1]3)=([2]3)([4]3)=[24]3=[16]3=[1]36=[2]3.What
thisshowsisthat thedeﬁnition isnotindependent oftheclass representati ves.
Therefore,nisnotacongruence forexponentiation.
Example 6.77 Thedeﬁnition oftheintegers from thenatural numbers, inSection
7.2below,uses thefactthattherelationRonN2givenby
(m1;m2)R(n1;n2):m1+n2=m2+n1
isanequivalence relation, thattherelation<RonN2=Rgivenby
j(m1;m2)jR<Rj(n1;n2)jR:m1+n2<m2+n1
isproperly deﬁned, andmoreo ver,thatRisacongruence foraddition andmulti-
plication onN2.
Tocheck thatRisacongruence foraddition onN2,where addition onN2isgiven
by
(m1;m2)+(n1;n2):=(m1+n1;m2+n2);
wehavetoshowthat(m1;m2)R(p1;p2)and(n1;n2)R(q1;q2)together imply
that(m1;m2)+(n1;n2)R(p1;p2)+(q1;q2).
Assume (m1;m2)R(p1;p2)and(n1;n2)R(q1;q2).Applying thedeﬁnition ofR,
thisgives
m1+p2=p1+m2andn1+q2=q1+n2;
whence
m1+n1+p2+q2=n1+p1+m2+n2: (*)
Wenowhave:
(m1;m2)+(n1;n2)=(m1+n1;m2+n2);
(p1;p2)+(q1;q2)=(p1+q1;p2+q2);
andbythedeﬁnition ofRwegetfrom (*)that
(m1;m2)+(n1;n2)R(p1;p2)+(q1;q2):
This provesthatRisacongruence foraddition.
238 CHAPTER 6.FUNCTIONS
Exer cise6.78*ShowthattherelationRonN2from example 6.77 isacongruence
forthemultiplication operation onN2givenby:
(m1;m2)(n1;n2):=(m1n1+m2n2;m1n2+n1m2):
6.9 Further Reading
More onfunctions intheconte xtofsettheory in[DvDdS78 ].Alogical theory of
functions isdeveloped inthelambda calculus. See[Bar84 ].
Chapter7
Induction andRecursion
Preview
Averyimportant proof method thatisnotcovered bytherecipes from Chapter 3is
themethod ofproof byMathematical Induction. Roughly speaking, mathematical
induction isamethod toprovethings about objects thatcanbebuiltfrom aﬁnite
number ofingredients inaﬁnite number ofsteps. Such objects canbethought of
asconstrued bymeans ofrecursi vedeﬁnitions. Thus, aswewillseeinthischapter ,
recursi vedeﬁnitions andinducti veproofs aretwosides ofonecoin.
moduleIAR
where
importList
importSTAL(display)
7.1 Mathematical Induction
Mathematical induction isaproof method thatcanbeused toestablish thetruth of
astatement foraninﬁnite sequence ofcases0,1,2,....LetP(n)beaproperty of
239
240 CHAPTER 7.INDUCTION ANDRECURSION
natural numbers. Toproveagoal oftheform8n2N:P(n)onecanproceed as
follo ws:
1.Basis. Provethat0hasthepropertyP.
2.Induction step. Assume theinduction hypothesis thatnhaspropertyP.
Proveonthebasis ofthisthatn+1haspropertyP.
That’ sall.Thegoal8n2N:P(n)follo wsfrom thisbytheprinciple ofmathe-
matical induction.
Bytheprinciple ofmathematical induction wemean thefollo wing fact:
Fact7.1ForeverysetXN,wehavethat:
if02Xand8n2N(n2X)n+12X),thenX=N.
This factisobviously true.
Thebestwaytofurther explain mathematical induction isbywayofexamples.
Example 7.2Sum oftheAngles ofaConvexPolygon.
Suppose wewanttoprovethatthesum oftheangles ofaconvexpolygon ofn+3
sides is(n+1)radians.
@@   @
@@
@@@ 
  
Wecanshowthisbymathematical induction with respect ton,asfollo ws:
Basis Forn=0,thestatement runs: thesum oftheangles ofaconvexpolygon of
3sides, i.e.,ofatriangle, isradians. Weknowfrom elementary geometry
thatthisistrue.
Induction step Assume thatthesum oftheangles ofaconvexpolygon ofn+3
sides is(n+1)radians. Takeaconvexpolygon Pofn+4sides. Then,
sincePisconvex,wecandecomposePinto atriangleTandaconvex
polygonP0ofn+3sides (just connect edges 1and3ofP).Thesum ofthe
angles ofPequals thesum oftheangles ofT,i.e.radians, plus thesum
oftheangles ofP0,i.e.,bytheinduction hypothesis, (n+1)radians. This
showsthatthesum oftheangles ofPis(n+2)radians.
7.1.MATHEMATICALINDUCTION 241
From 1.and2.andtheprinciple ofmathematical induction thestatement follo ws.
Notation The nextexamples allinvolvesums ofthegeneral forma1+a2+
+an,written insummation notation (cf. Example 2.29 above)asn
k=1ak.
Note thatsum isthecomputational counterpart toP.Weagree thatthe“empty
sum”0
k=1akyields 0.The same convention isfollo wed incomputations with
sum,forsum[]hasvalue0.
Example 7.3TheSum oftheFirstnOdd Numbers.
Thesum oftheﬁrstnoddnumbers equalsn2.More formally:
nX
k=1(2k 1)=n2:
Proof byinduction:
Basis Forn=1,wehaveP1
k=1(2k 1)=1=12.
Induction step AssumePn
k=1(2k 1)=n2.WehavetoshowPn+1
k=1(2k 1)=
(n+1)2.Indeed,Pn+1
k=1(2k 1)=Pn
k=1(2k 1)+2(n+1) 1.Using
theinduction hypothesis, thisgives:
n+1X
k=1(2k 1)=n2+2n+1=(n+1)2:
Theclosed formula givesusanimpro vedcomputation procedure forsumming the
oddnumbers: sumOdds performs better onlargeinput thansumOdds' .
sumOdds' ::Integer ->Integer
sumOdds' n=sum[2*k-1|k<-[1..n]]
sumOdds ::Integer ->Integer
sumOdds n=n^2
Note thatthemethod ofproof bymathematical induction may obscure theprocess
ofﬁnding therelation intheﬁrst place. Toseewhy thesum oftheﬁrstnodd
numbers equalsn2,itisinstructi vetolook atthefollo wing picture ofthesum
1+3+5+7+9.
242 CHAPTER 7.INDUCTION ANDRECURSION
qqqqqqqqqqqqqqqqqqqqqqqqq
Example 7.4TheSum oftheFirstnEvenNumbers.
What about thesum oftheﬁrstnevennatural numbers? Again, apicture suggests
theanswer .Look atthefollo wing representation of2+4+6+8+10:
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
Again, apicture isnot(quite) aproof. Here isproof bymathematical induction of
thefactthatPn
k=12k=n(n+1).
Basis Puttingk=1gives2=12,which iscorrect.
Induction step AssumePn
k=12k=n(n+1).ThenPn+1
k=12k=Pn
k=12k+
2(n+1).Using theinduction hypothesis weseethatthisisequal ton(n+
1)+2(n+1)=n2+3n+2=(n+1)(n+2),andwearedone.
Notice thatwelefttheterm fork=0outofthesum. Wemight aswell have
included it,foritholds thatPn
k=02k=n(n+1).Bytheconvention about empty
sums, thetwoversions areequivalent.
From what wefound forthesum oftheﬁrstnevennatural numbers theformula
forthesum oftheﬁrstnpositi venatural numbers follo wsimmediately:
nX
k=1k=n(n+1)
2:
Again, wegetimpro vedcomputation procedures from theclosed forms thatwe
found:
7.1.MATHEMATICALINDUCTION 243
sumEvens' ::Integer ->Integer
sumEvens' n=sum[2*k|k<-[1..n]]
sumEvens ::Integer ->Integer
sumEvens n=n*(n+1)
sumInts ::Integer ->Integer
sumInts n=(n*(n+1))`div`2
Example 7.5Summing Squares.
Consider theproblem ofﬁnding aclosed formula forthesum oftheﬁrstnsquares
(aclosed formula, asopposed toarecurr encef(0)=0;f(n)=f(n 1)+n2;n>
0).Bydirect trialonemight ﬁndthefollo wing:
12+22=5=235
6:
12+22+32=5+9=14=347
6:
12+22+32+42=14+16=30=459
6:
12+22+32+42+52=30+25=55=5611
6:
This suggests ageneral rule:
12+:::+n2=n(n+1)(2n+1)
6:
Butthetrialprocedure thatweused toguess theruleisdifferent from theprocedure
thatisneeded toproveit.
Note thatthefactthatonecanusemathematical induction toprovearulegivesno
indication about howtherulewasfound intheﬁrst place. Wewillreturn tothe
issue ofguessing closed forms forpolynomial sequences inSections 9.1and9.2.
InHask ell,youcancompute sums ofsquares inanaivewayorinasophisticated
way,asfollo ws:
244 CHAPTER 7.INDUCTION ANDRECURSION
sumSquares' ::Integer ->Integer
sumSquares' n=sum[k^2|k<-[1..n]]
sumSquares ::Integer ->Integer
sumSquares n=(n*(n+1)*(2*n+1)) `div`6
Again, theinsight thatthetwocomputation procedures willalwaysgivethesame
result canbeprovedbymathematical induction:
Exer cise7.6Summing Squares. Provebymathematical induction:
nX
k=1k2=n(n+1)(2n+1)
6:
Example 7.7Summing Cubes.
Letusmoveontotheproblem ofsumming cubes. Bydirect trialoneﬁnds:
13+23=9=(1+2)2:
13+23+33=9+27=36=(1+2+3)2:
13+23+33+43=36+64=100=(1+2+3+4)2:
13+23+33+43+53=100+125=225=(1+2+3+4+5)2:
This suggests ageneral rule:
13++n3=(1++n)2:
WesawinExample 7.4that
nX
k=1k=n(n+1)
2;
sothegeneral rulereduces to:
13++n3=n(n+1)
22
:
Somuch about ﬁnding arule forthesum oftheﬁrstncubes. InSections 9.1
and9.2wewill giveanalgorithm forgenerating closed forms forpolynomial
sequences.
7.1.MATHEMATICALINDUCTION 245
What wefound isthatsumCubes deﬁnes thesame function asthenaiveprocedure
sumCubes' forsumming cubes:
sumCubes' ::Integer ->Integer
sumCubes' n=sum[k^3|k<-[1..n]]
sumCubes ::Integer ->Integer
sumCubes n=(n*(n+1) `div`2)^2
Again, therelation wefound suggests amore sophisticated computation proce-
dure, andproving thegeneral relationship between thetwoprocedures isanother
exercise inmathematical induction.
Exer cise7.8Summing Cubes.
Provebymathematical induction:
nX
k=1k3=n(n+1)
22
:
Exer cise7.9Provethatforalln2N:32n+3+2nisdivisible by7.
Remark. Ifonecompares theproof strate gyneeded toestablish aprinciple ofthe
form8n2N:P(n)with thatforanordinary universal statement8x2A:P(x),
whereAissome domain ofdiscourse, then thedifference isthatintheformer
case wecanmakeuseofwhat weknowabout thestructure ofN.Incase we
knownothing aboutA,andwehavetoprovePforanarbitrary element fromA,
wehavetotakeourcuefromP.Incase wehavetoprovesomething about an
arbitrary elementnfrom Nweknowalotmore: weknowthateithern=0or
ncanbereached from0inaﬁnite number ofsteps. Thekeyproperty ofNthat
makesmathematical induction workisthefactthattherelation<onNiswell-
founded: anysequencem0>m1>m2>terminates. This guarantees the
existence ofastarting point fortheinduction process.
ForanyAthatiswell-founded byarelationthefollo wing principle holds. Let
XA.If
8a2A(8ba(b2X))a2X);
thenX=A.InSection 11.1 wewillsaymore about theuseofwell-foundedness
asaninduction principle.
246 CHAPTER 7.INDUCTION ANDRECURSION
7.2 Recursion overtheNatural Numbers
Why does induction overthenatural numbers work? Because wecanthink ofany
natural numbernasthetheresult ofstarting from0andapplying thesuccessor op-
eration +1aﬁnite number oftimes. Letususethisfactabout thenatural numbers
togiveourownHask ellimplementation, asfollo ws:
dataNatural =Z|SNatural
deriving (Eq,Show)
HereZisourrepresentation of0,whileSnisarepresentation ofn+1.The
number 4looks inourrepresentation likeS(S(S(SZ))) .
Thesymbol|isused tospecify alternati vesforthedata construction.
Withderiving (Eq,Show) onedeclaresNatural asatype intheclassesEq
andShow .This ensures thatobjects ofthetype canbecompared forequality and
displayed onthescreen without further ado.
Wecandeﬁne theoperation ofaddition onthenatural numbers recursively interms
ofthesuccessor operation +1andaddition forsmaller numbers:
m+0:=m
m+(n+1):=(m+n)+1
This deﬁnition oftheoperation ofaddition iscalled recursivebecause theopera-
tion+thatisbeing deﬁned isused inthedeﬁning clause, butforasmaller second
argument. Recursi vedeﬁnitions alwayshaveabase case (intheexample: theﬁrst
lineofthedeﬁnition, where thesecond argument oftheaddition operation equals
0)andarecursivecase (intheexample: thesecond lineofthedeﬁnition, where
thesecond argument oftheaddition operation isgreater than0,andtheoperation
thatisbeing deﬁned appears intheright hand sideofthedeﬁnition).
Inproving things about recursi velydeﬁned objects theidea istousemathematical
induction with thebasic step justiﬁed bythebase case oftherecursi vedeﬁnition,
theinduction step justiﬁed bytherecursi vecase oftherecursi vedeﬁnition. This
wewill nowdemonstrate forproperties oftherecursi velydeﬁned operation of
addition fornatural numbers.
Here istheHask ellversion ofthedeﬁnition of+,inpreﬁx notation:
7.2.RECURSION OVERTHENATURALNUMBERS 247
plusmZ=m
plusm(Sn)=S(plusmn)
Ifyouprefer inﬁx notation, justwritem`plus`ninstead ofplusmn.The
back quotes aroundplus transform thetwoplaced preﬁx operator into aninﬁx
operator .This givesthefollo wing equivalent version ofthedeﬁnition:
m`plus`Z=m
m`plus`(Sn)=S(m`plus`n)
Now,with diligence, wecanprovethefollo wing listoffundamental lawsofaddi-
tionfrom thedeﬁnition.
m+0 =m (0isidentity element for+)
m+n =n+m (commutati vityof+)
m+(n+k)=(m+n)+k(associati vityof+)
Theﬁrstfactfollo wsimmediately from thedeﬁnition of+.
Inproving things about arecursi velydeﬁned operatoritisconvenient tobeable
torefer toclauses intherecursi vedeﬁnition, asfollo ws::1refers totheﬁrst
clause inthedeﬁnition of,:2tothesecond clause, andsoon.
Here isaproof bymathematical induction oftheassociati vityof+:
Proposition 7.108m;n;k2N:(m+n)+k=m+(n+k):
Proof.Induction onk.
Basis (m+n)+0+:1=m+n+:1=m+(n+0).
Induction step Assume (m+n)+k=m+(n+k).Weshow(m+n)+(k+1)=
m+(n+(k+1)):
(m+n)+(k+1)+:2=((m+n)+k)+1
i.h.=(m+(n+k))+1
+:2=m+((n+k)+1)
+:2=m+(n+(k+1)):
248 CHAPTER 7.INDUCTION ANDRECURSION
Theinducti veproof ofcommutati vityof+uses theassociati vityof+thatwejust
established.
Proposition 7.118m;n2N:m+n=n+m.
Proof.Induction onn.
Basis Induction onm.
Basis 0+0=0+0.
Induction Step Assumem+0=0+m.Weshow(m+1)+0 =0+(m+1):
(m+1)+0+1=m+1
+1= (m+0)+1
ih= (0+m)+1
prop7:10= 0+(m+1):
Induction step Assumem+n=n+m.Weshowm+(n+1)=(n+1)+m:
m+(n+1)+:2= (m+n)+1
ih= (n+m)+1
+:2=n+(m+1)
ih=n+(1+m)
prop7:10= (n+1)+m:
Once wehaveaddition, wecandeﬁne multiplication interms ofit,again follo wing
arecursi vedeﬁnition:
m0:=0
m(n+1):=(mn)+m
Wecallthemultiplication operator .Itiscommon tousemnasshorthand for
mn,or,inother words, oneusually does notwrite themultiplication operator .
7.2.RECURSION OVERTHENATURALNUMBERS 249
Here isaHask ellimplementation forourchosen representation (this time wegive
justtheinﬁx version):
m`mult`Z=Z
m`mult`(Sn)=(m`mult`n)`plus`m
Letustrythisout:
IAR>(S(SZ))`mult`(S(S(SZ)))
S(S(S(S(S(SZ)))))
Thefollo wing lawshold for,andfortheinteraction ofand+:
m1 =m (1isidentity element for)
m(n+k)=mn+mk(distrib ution ofover+)
m(nk)=(mn)k (associati vityof)
mn =nm (commutati vityof)
Exer cise7.12 Provethese lawsfrom therecursi vedeﬁnitions of+and,plus the
lawsthatwere established about+.
Ifwenowwish toimplement anoperation expn forexponentiation onnaturals,
theonly thing wehavetodoisﬁndarecursi vedeﬁnition ofexponentiation, and
implement that. Here isthedeﬁnition:
m0:=1
mn+1:=(mn)m
This leads immediately tothefollo wing implementation:
expnmZ=(SZ)
expnm(Sn)=(expnmn)`mult`m
This gives:
IAR>expn(S(SZ))(S(S(SZ)))
S(S(S(S(S(S(S(SZ)))))))
250 CHAPTER 7.INDUCTION ANDRECURSION
Exer cise7.13 Provebymathematical induction thatkm+n=kmkn.
Wecandeﬁne therelation 6onNasfollo ws:
m6n: there isak2N:m+k=n
Instead ofm6nwealso writen>m,with thesame meaning. Weusem<n
form6nandm6=n.Instead ofm<nwealsowriten>m.
This showsthatwecandeﬁne<or6interms ofaddition. Onfurther reﬂection,
successor (+1) isenough todeﬁne 6,witness thefollo wing recursi vedeﬁnition:
06m;
m+16n+1ifm6n:
This istranslated intoHask ellasfollo ws:
leqZ_=True
leq(S_)Z=False
leq(Sm)(Sn)=leqmn
Note theuseof_forananon ymous variable:leqZ_=True means thatleq,
applied tothezero elementZandtoanything else,givesthevalueTrue .The
expression (S_)speciﬁes apattern :itmatches anynatural thatisasuccessor
natural.
Tofully grasp theHask elldeﬁnition ofleqoneshould recall thatthethree equa-
tions that makeupthedeﬁnition areread asalistofthree mutually exclusi ve
cases. TheHask ellsystem tries theequations onebyone, from toptobottom, un-
tilitﬁnds onethatapplies. Thus,leqZ_applies toanypairofnaturals with the
ﬁrstmember equal toZ.leq(S_)Zapplies toanypairofnaturals with theﬁrst
onestarting with anS,andthesecond oneequal toZ.Thethird equation, ﬁnally ,
applies tothose pairs ofnaturals where both theﬁrst andthesecond member of
thepairstart with anS
Wecannowdeﬁnegeq,gt,lt,interms ofleqandnegation:
7.3.THENATUREOFRECURSIVE DEFINITIONS 251
geqmn=leqnm
gtmn=not(leqmn)
ltmn=gtnm
Exer cise7.14 Implement anoperation forcut-of fsubtraction subtr onnaturals:
thecallsubtr(S(S(SZ)))(S(S(S(SZ)))) should yieldZ.
Exer cise7.15 Implement operations quotient andremainder onnaturals. Di-
vidingabybyields quotientqandremainderrwith06r<b,according tothe
formulaa=qb+r.(Hint: youwillneed theprocedure subtr from Exercise
7.14.)
7.3 The Natur eofRecursi veDeﬁnitions
Notanysetofequations overnatural numbers canserveasadeﬁnition ofanoper-
ation onnatural numbers. Consider
f(0):=1
f(n+1):=f(n+2):
This does notdeﬁne unique values forf(1),f(2),f(3),...,fortheequations only
require thatallthese values should bethesame, notwhat thevalue should be.
Thefollo wing format does guarantee aproper deﬁnition:
f(0):=c
f(n+1):=h(f(n)):
Herecisadescription ofavalue (say oftypeA),andhisafunction oftype
A!A.Adeﬁnition inthisformat issaidtobeadeﬁnition bystructur alrecursion
overthenatural numbers. Thefunctionfdeﬁned bythiswillbeoftypeN!A.
This format isaparticular instance ofaslightly more general onecalled primitive
recursion overthenatural numbers. Primiti verecursion allowsctodepend ona
number ofparameters, sothefunctionfwillalsodepend onthese parameters. But
wewillleavethose parameters aside fornow.
Deﬁnition bystructural recursion offfromcandhworks likethis: takeanatural
numbern,viewitas
1++1+|{z}
ntimes0;
252 CHAPTER 7.INDUCTION ANDRECURSION
replace 0byc,replace each successor step1+byh,andevaluate theresult:
h((h|{z}
ntimes(c))):
This general procedure iseasily implemented inanoperation foldn ,deﬁned as
follo ws:
foldn::(a->a)->a->Natural ->a
foldnhcZ=c
foldnhc(Sn)=h(foldnhcn)
Here isaﬁrstexample application; please makesure youunderstand howandwhy
thisworks.
exclaim ::Natural ->String
exclaim =foldn('!':)[]
Nowafunction ‘addingm’canbedeﬁned bytakingmforc,andsuccessor forh.
Forthisweshould beable torefer tothesuccessor function asanobject initsown
right. Well,itiseasily deﬁned bylambda abstraction as(\n->Sn).This is
used inouralternati vedeﬁnition ofplus ,interms offoldn .Note thatthere isno
need tomention thetwoarguments ofplus inthedeﬁnition.
plus::Natural ->Natural ->Natural
plus=foldn(\n->Sn)
Similarly ,wecandeﬁne analternati veformult interms offoldn .Therecipe for
thedeﬁnition ofmultm(‘multiply bym’)istotakeZforcandplusmforh:
mult::Natural ->Natural ->Natural
multm=foldn(plusm)Z
7.3.THENATUREOFRECURSIVE DEFINITIONS 253
Finally ,forexponentiation expnm(‘raisemtopower...’)wetake(SZ)forc
andmultmforh:
expn::Natural ->Natural ->Natural
expnm=foldn(multm)(SZ)
Exer cise7.16 Implement theoperation ofcut-of fsubtraction (subtrmfor‘sub-
tract fromm’;Exercise (7.14)) interms offoldn andafunction forpredecessor ,
onthebasis ofthefollo wing deﬁnition:
x_ 0:=x
x_ (n+1):=p(x_ n);
wherepisthefunction forpredecessor givenbyp(0):=0;p(n+1):=n.Call
thepredecessor functionpre.
Exer cise7.17 TheFibonacci numbers aregivenbythefollo wing recursion:
F0=0;F1=1;Fn+2=Fn+1+Fnforn>0:
This gives:
0;1;1;2;3;5;8;13;21;34;55;89;144;233;377;610;987;1597;2584;4181;:::
Provewith induction thatforalln>1:
Fn+1Fn 1 F2
n=( 1)n:
Exer cise7.18 Abitlist isalistofzeros andones. Consider thefollo wing code
bittest forselecting thebitlists without consecuti vezeros.
bittest ::[Int]->Bool
bittest [] =True
bittest [0] =True
bittest (1:xs) =bittest xs
bittest (0:1:xs) =bittest xs
bittest _ =False
254 CHAPTER 7.INDUCTION ANDRECURSION
1.Howmanybitlists oflength 0satisfybittest ?Howmanybitlists oflength
1satisfybittest ?Howmanybitlists oflength 2satisfybittest ?How
manybitlists oflength 3satisfybittest ?
2.Letanbethenumber ofbitlists oflengthnwithout consecuti vezeros. Give
aninduction proof toshowthatforeveryn>0itholds thatan=Fn+2,
whereFnisthen-thFibonacci number .Takecare: youwillneed twobase
cases (n=0;n=1),andaninduction hypothesis oftheform: “assume that
theformula holds fornandforn+1.”Afurther hint: thecode forbittest
points thewaytothesolution.
Exer cise7.19*Consider thefollo wing twodeﬁnitions oftheFibonacci numbers
(Exercise 7.17):
fib0=0
fib1=1
fibn=fib(n-1)+fib(n-2)
fib'n=fib201nwhere
fib2ab0=a
fib2abn=fib2b(a+b)(n-1)
Useaninduction argument toestablish thatfibandfib' deﬁne thesame function.
Hint: establish themore general claim thatforalli,nitholds that
fib2(fibi)(fib(i+1))n=fib(i+n)
byinduction onn.
Exer cise7.20 TheCatalan numbers aregivenbythefollo wing recursion:
C0=1;Cn+1=C0Cn+C1Cn 1++Cn 1C1+CnC0:
This gives:
[1;1;2;5;14;42;132;429;1430;4862;16796;58786;208012;742900;2674440;:::
Usethisrecursion togiveaHask ellimplementation. Can youseewhy thisisnot
averyefﬁcient waytocompute theCatalan numbers?
7.4.INDUCTION ANDRECURSION OVERTREES 255
Exer cise7.21 Letx0;:::;xnbeasequence ofn+1variables. Suppose their
product istobecomputed bydoingnmultiplications. The number ofwaysto
dothemultiplications corresponds tothenumber ofbrack etings forthesequence.
Forinstance, ifn=3there arefour variablesx0;x1;x2;x3,andﬁvepossible
brack etings:
(x1x2)(x3x4);((x1x2)x3)x4;(x1(x2x3))x4;x1((x2x3)x4);x1(x2(x3x4)):
Showthatthenumber ofbrack etings forn+1variables isgivenbytheCata-
lannumberCn.(Hint: youwill need strong induction, so-called because ofits
strengthened induction hypothesis. Yourinduction hypothesis should run: “For
anyiwith06i6n,foranysequence ofi+1variablesx0xiitholds thatCi
givesthenumber ofbrack etings forthatsequence. ”
Example 7.22 Balanced sequences ofparentheses oflength 2naredeﬁned recur -
sivelyasfollo ws:theempty sequence isbalanced; ifsequencewisbalanced then
(w)isbalanced; ifsequenceswandvarebalanced thenwvisbalanced. Thus,
())(() isnotbalanced. Thebalanced sequences involving 3leftand3right paren-
theses are:
()()();(())();()(());(()());((())):
There isaone-to-one mapping between brack etings forsequences ofn+1vari-
ables andbalanced sequences ofparentheses with2nparentheses. Letabrack eting
forx0xnbegiven.This canbechanged intoabalanced sequence ofparenthe-
sesasfollo ws:Weillustrate with theexamplex0((x2x3)x4).
1.Putoneextrapairofparentheses around thebrack eting: (x0((x2x3)x4)).
2.Insert multiplication operators attheappropriate places: (x0((x2x3)x4)).
3.Erase thevariables andtheleft-brack ets:))).
4.Replace the’swith left-brack ets:(()()) .
This mapping givesaone-to-one correspondence between variable brack etings and
balanced parentheses strings, sowegetfrom theprevious exercise thatthere are
Cndifferent balanced parentheses strings oflength 2n.
7.4 Induction andRecursion overTrees
Here isarecursi vedeﬁnition ofbinary trees:
256 CHAPTER 7.INDUCTION ANDRECURSION
Asingle leafnodeisabinary tree.
Ift1andt2arebinary trees, then theresult ofjoiningt1andt2under asingle
node (called therootnode )isabinary tree. Anotation forthisis:(t1t2)
Nothing elseisabinary tree.
Thedepth ofabinary treeisgivenby:
Thedepth ofis0.
Thedepth of(t1t2)is1+themaximum ofthedepths oft1andt2.
Abinary treeisbalanced ifiteither isasingle leafnode,orithastheform
(t1t2),with botht1andt2balanced, andhaving thesame depth.
Weseethefollo wing: Abalanced binary treeofdepth0isjustasingle leafnode
,soitsnumber ofnodes is1.Abalanced binary treeofdepth 1hasoneinternal
node andtwoleaves,soithas3nodes. Abalanced binary treeofdepth 2has3
internal nodes and4leafnodes, soithas7nodes. Abinary treeofdepth 3has7
internal nodes plus8leafnodes, soithas15nodes.
Recursion andinduction overbinary trees arebased ontwocasest=andt=
(t1t2).
Example 7.23 Suppose wewanttoﬁnd aformula forthenumber ofnodes ina
balanced binary treeofdepthd.
q q q q
q q q q q q
q q q q q q q q
qqqqqqqq
Suppose wewanttoshowingeneral thatthenumber ofnodes ofabinary treeof
depthnis2n+1 1.Then aproof bymathematical induction isinorder .We
proceed asfollo ws:
Basis Ifn=0,then2n+1 1=21 1=1.This isindeed thenumber ofnodes
ofabinary treeofdepth0.
Induction step Assume thenumber ofnodes ofabinary treeofdepthnis2n+1 
1.Wehavetoshowthatthenumber ofnodes ofabinary treeofdepthn+1
equals 2n+2 1.
7.4.INDUCTION ANDRECURSION OVERTREES 257
Abinary treeofdepthn+1canbeviewed asasetofinternal nodes con-
stituting abinary treeofdepthn,plus asetofleafnodes, consisting oftwo
newleafnodes foreveryoldleafnode from thetreeofdepthn.Byinduc-
tion hypothesis, weknowthatatreeofdepthnhas2n+1 1nodes, soa
treeofdepthn+1has2n+1 1internal nodes. Itiseasy toseethatatree
ofdepthn+1has2n+1leafnodes. Thetotal number ofnodes ofatreeof
depthn+2istherefore 2n+1 1+2n+1=22n+1 1=2n+2 1,and
wehaveprovedourinduction step.
Toillustrate trees andtreehandling abitfurther ,here isaHask elldeﬁnition of
binary trees, with aprocedure formaking balanced trees ofanarbitrary depthn,
andaprocedure forcounting their nodes inanaiveway.
WeuseLforasingle leaf.Thedata declaration speciﬁes thataBinTree either
isanobjectL(asingle leaf), oranobject constructed byapplying theconstructor
NtotwoBinTree objects (the result ofconstructing anewbinary tree(t1t2)
from twobinary treest1andt2).
Theadditionderiving Show ensures thatdata ofthistype canbedisplayed on
thescreen.
dataBinTree =L|NBinTree BinTree deriving Show
makeBinTree ::Integer ->BinTree
makeBinTree 0=L
makeBinTree (n+1)=N(makeBinTree n)(makeBinTree n)
count::BinTree ->Integer
countL=1
count(Nt1t2)=1+countt1+countt2
Withthiscode youcanproduce binary trees asfollo ws:
IAR>makeBinTree 6
N(N(N(N(N(NLL)(NLL))(N(NLL)(NLL)))(N(N(NLL)(N
LL))(N(NLL)(NLL))))(N(N(N(NLL)(NLL))(N(NLL)(NL
L)))(N(N(NLL)(NLL))(N(NLL)(NLL)))))(N(N(N(N(NLL)
(NLL))(N(NLL)(NLL)))(N(N(NLL)(NLL))(N(NLL)(NL
L))))(N(N(N(NLL)(NLL))(N(NLL)(NLL)))(N(N(NLL)(N
258 CHAPTER 7.INDUCTION ANDRECURSION
LL))(N(NLL)(NLL)))))
IAR>
Ifyouwanttocheck thatthedepth ofatheresult ofmaketree 6isindeed 6,
orthatmaketree 6isindeed balanced, here aresome procedures. Note thatthe
procedures follo wthedeﬁnitions ofdepth andbalanced totheletter:
depth::BinTree ->Integer
depthL=0
depth(Nt1t2)=(max(deptht1)(deptht2))+1
balanced ::BinTree ->Bool
balanced L=True
balanced (Nt1t2)=(balanced t1)
&&(balanced t2)
&&deptht1==deptht2
Theprograms allowustocheck therelation betweencount(makeBinTree n)
and2^(n+1) -1forindividual values ofn:
IAR>count(makeBinTree 6)==2^7-1
True
What theproof bymathematical induction provides isaninsight thattherelation
holds ingeneral. Mathematical induction does notgiveasclue astohowtoﬁnda
formula forthenumber ofnodes inatree. Itonly servesasamethod ofproof once
such aformula isfound.
Sohowdoes oneﬁndaformula forthenumber ofnodes inabinary treeinthe
ﬁrstplace? Bynoticing howsuch trees grow.Abinary treeofdepth0has1node,
andthisnode isaleafnode. This leafgrowstwonewnodes, soabinary treeof
depth1has1+2=3nodes. Inthenextstepthe2leafnodes growtwonewnodes
each, soweget22=4newleafnodes, andthenumber ofnodes ofabinary tree
ofdepth2equals 1+2+4=7.Ingeneral, atreeofdepthn 1istransformed
intooneofdepthnbygrowing2nnewleaves,andthetotal number ofleavesof
thenewtreeisgivenby20+21++2n.Inother words, thenumber ofnodes
7.4.INDUCTION ANDRECURSION OVERTREES 259
ofabalanced binary treeofdepthnisgivenby:Pn
k=02k.Togetavalue forthis,
here isasimple trick:
nX
k=02k=2nX
k=02k nX
k=02k=(22n+2n+2) (2n++1)=
=22n 1=2n+1 1:
Example 7.24 Counting theNodes ofaBalanced Ternary Tree.
Nowsuppose wewanttoﬁnd aformula forthenumber ofnodes inabalanced
ternary treeofdepthn.Thenumber ofleavesofabalanced ternary treeofdepth
nis3n,sothetotal number ofnodes ofabalanced ternary treeofdepthnisgiven
byPn
k=03k.
Weprovebyinduction thatPn
k=03k=3n+1 1
2.
Basis Aternary treeofdepthn=0consists ofjustasingle node. And indeed,
0X
k=03k=1=31 1
2:
Induction step Assume thatthenumber ofnodes ofaternary treeofdepthnis
3n+1 1
2.Thenumber ofleafnodes is3n,andeach ofthese leavesgrows3
newleavestoproduce theternary treeofdepthn+1.Thus, thenumber of
leavesofthetreeofdepthn+1isgivenby
n+1X
k=03k=nX
k=03k+3n+1:
Using theinduction hypothesis, weseethatthisisequal to
3n+1 1
2+3n+1=3n+1 1
2+23n+1
2=3n+2 1
2:
ButhowdidwegetatPn
k=03k=3n+1 1
2intheﬁrstplace? Inthesame wayas
inthecase ofthebinary trees:
2nX
k=03k=3nX
k=03k nX
k=03k=(33n+3n+3) (3n++1)=
=33n 1=3n+1 1:
260 CHAPTER 7.INDUCTION ANDRECURSION
ThereforenX
k=03k=3n+1 1
2:
Exer cise7.25 Write aHask elldeﬁnition ofternary trees, plus procedures forgen-
erating balanced ternary trees andcounting their node numbers.
Example 7.26 Counting theNodes ofaBalancedm-ary Tree. The number of
nodes ofabalancedm-ary treeofdepthn(withm>1)isgivenbyPn
k=0mk=
mn+1 1
m 1.Here isaproof bymathematical induction.
Basis Anm-arytreeofdepth0consists ofjustasingle node. Infact,P0
k=0mk=
1=m 1
m 1.
Induction step Assume thatthenumber ofnodes ofanm-ary treeofdepthnis
mn+1 1
m 1.Thenumber ofleafnodes ismn,andeach ofthese leavesgrows
mnewleavestoproduce theternary treeofdepthn+1.Thus, thenumber
ofleavesofthetreeofdepthn+1isgivenby
n+1X
k=0mk=nX
k=0mk+mn+1:
Using theinduction hypothesis, weseethatthisisequal to
mn+1 1
m 1+mn+1=mn+1 1
m 1+mn+2 mn+1
m 1=mn+2 1
m 1:
Note thattheproofs bymathematical induction donottellyouhowtoﬁndthefor-
mulas forwhich theinduction proof works intheﬁrstplace. This isanillustration
ofthefactthatmathematical induction isamethod ofveriﬁcation, notamethod of
invention. Indeed, mathematical induction isnoreplacement fortheuseofcreati ve
intuition intheprocess ofﬁnding meaningful relationships inmathematics.
Exer cise7.27 Geometric Progressions.
Provebymathematical induction (assumingq6=1;q6=0):
nX
k=0qk=qn+1 1
q 1:
Note thatthisexercise isafurther generalization ofExample 7.26.
7.4.INDUCTION ANDRECURSION OVERTREES 261
Togetsome further experience with treeprocessing, consider thefollo wing deﬁ-
nition ofbinary trees with integernumbers attheinternal nodes:
dataTree=Lf|NdIntTreeTreederiving Show
Wesaythatsuch atreeisorderedifitholds foreach nodeNofthetreethatthe
integernumbers intheleftsubtree belowNareallsmaller than thenumber atnode
N,andthenumber intheright subtree belowNareallgreater than thenumber at
N.
Exer cise7.28 Write afunction thatinserts anumberninanordered treeinsuch
awaythatthetreeremains ordered.
Exer cise7.29 Write afunctionlist2tree thatconvertsalistofintegers toan
ordered tree, with theintegers atthetreenodes. The type is[Int]->Tree .
Also, write afunctiontree2list forconversion intheother direction.
Exer cise7.30 Write afunction thatchecks whether agivenintegerioccurs inan
ordered tree.
Exer cise7.31 Write afunction thatmergestwoordered trees intoanewordered
treecontaining allthenumbers oftheinput trees.
Exer cise7.32 Write afunction thatcounts thenumber ofsteps thatareneeded to
reach anumberiinanordered tree. Thefunction should give0ifiisatthetop
node, and 1ifidoes notoccur inthetreeatall.
Ageneral data type forbinary trees with information attheinternal nodes isgiven
by:
dataTra=Nil|Ta(Tra)(Tra)deriving (Eq,Show)
Exer cise7.33 Write afunctionmapT::(a->b)->Tra->Trbthatdoes
forbinary trees whatmapdoes forlists.
262 CHAPTER 7.INDUCTION ANDRECURSION
Exer cise7.34 Write afunction
foldT::(a->b->b->b)->b->(Tra)->b
thatdoes forbinary trees whatfoldn does fornaturals.
Exer cise7.35 Conversion ofatreeinto alistcanbedone invarious ways, de-
pending onwhen thenode isvisited:
Preorder traversal ofatreeistheresult ofﬁrst visiting thenode, nextvisiting
theleftsubtree, andﬁnally visiting theright subtree.
Inorder traversal ofatreeistheresult ofﬁrstvisiting theleftsubtree, nextvisit-
ingthenode, andﬁnally visiting theright subtree.
Postorder traversal ofatreeistheresult ofﬁrst visiting theleftsubtree, next
visiting theright subtree, andﬁnally visiting thenode.
Deﬁne these three conversion functions from trees tolists interms ofthefoldT
function from Exercise 7.34.
Exer cise7.36 Anordered tree isatree with information atthenodes givenin
such manner thattheitem atanode must bebigger than allitems intheleftsub-
treeandsmaller than allitems intheright subtree. Atreeisordered iffthelist
resulting from itsinorder traversal isordered andcontains noduplicates. Givean
implementation ofthischeck.
Exer cise7.37 Anordered tree (Exercise 7.36) canbeused asadictionary by
putting items ofoftype(String,String) attheinternal nodes, anddeﬁning
theordering as:(v;w)6(v0;w0)iffv6v0.Dictionaries getthefollo wing type:
typeDict=Tr(String,String)
Givecode forlooking upaworddeﬁnition inadictionary .Thetype declaration is:
lookupD ::String->Dict->[String]
7.4.INDUCTION ANDRECURSION OVERTREES 263
If(v;w)occurs inthedictionary ,thecalllookupD vdshould yield[w],other -
wise[].Usetheorder onthedictionary tree.
Exer cise7.38 Forefﬁcient search inanordered tree(Exercises 7.36 and7.37) it
iscrucial thatthetreeisbalanced: theleftandright subtree should have(nearly)
thesame depth andshould themselv esbebalanced.
The follo wing auxiliary function splits non-empty lists into parts of(roughly)
equal lengths.
split::[a]->([a],a,[a])
splitxs=(ys1,y,ys2)
where
ys1 =takenxs
(y:ys2) =dropnxs
n =lengthxs`div`2
Usethistoimplement afunctionbuildTree ::[a]->Trafortransforming
anordered listintoanordered andbalanced binary tree.
Here isadata typeLeafTree forbinary leaftrees (binary trees with information
attheleafnodes):
dataLeafTree a=Leafa
|Node(LeafTree a)(LeafTree a)deriving Show
Here isanexample leaftree:
ltree::LeafTree String
ltree=Node
(Leaf"I")
(Node
(Leaf"love")
(Leaf"you"))
264 CHAPTER 7.INDUCTION ANDRECURSION
Exer cise7.39 Repeat Exercise 7.33 forleaf trees. Call thenewmap function
mapLT .
Exer cise7.40 Givecode formirroring aleaftreeonitsvertical axis. Callthefunc-
tionreflect .Inthemirroring process, theleft- andright branches areswapped,
andthesame swaptakesplace recursi velywithin thebranches. Thereﬂection of
Node(Leaf1)(Node(Leaf2)(Leaf3))
is
Node(Node(Leaf3)(Leaf2))(Leaf1).
Exer cise7.41 Letreflect bethefunction from Exercise 7.40. Provewith in-
duction ontreestructure thatreflect (reflect t)==t.holds foreveryleaf
treet.
Adata type fortrees with arbitrary numbers ofbranches (rose trees), with infor -
mation oftypeaatthebuds, isgivenby:
dataRosea=Buda|Br[Rosea]deriving (Eq,Show)
Here isanexample rose:
rose=Br[Bud1,Br[Bud2,Bud3,Br[Bud4,Bud5,Bud6]]]
Exer cise7.42 Write afunctionmapR::(a->b)->Rosea->Rosebthat
does forrose trees whatmapdoes forlists. Fortheexamplerose ,weshould get:
IAR>rose
Br[Bud1,Br[Bud2,Bud3,Br[Bud4,Bud5,Bud6]]]
IAR>mapRsuccrose
Br[Bud2,Br[Bud3,Bud4,Br[Bud5,Bud6,Bud7]]]
7.5.INDUCTION ANDRECURSION OVERLISTS 265
7.5 Induction andRecursion overLists
Induction andrecursion overnatural numbers arebased onthetwocasesn=0
andn=k+1.Induction andrecursion overlists arebased onthetwocases
l=[]andl=x:xs,wherexisanitem andxsisthetailofthelist. Anexample
isthedeﬁnition ofafunctionlen thatgivesthelength ofalist. Infact,Hask ell
hasapredeﬁned functionlength forthispurpose; ourdeﬁnition oflenisjustfor
purposes ofillustration.
len[]=0
len(x:xs)=1+lenxs
Similarly ,Hask ellhasapredeﬁned operation ++forconcatenation oflists. For
purposes ofillustration werepeat ourversion from Section (4.8).
cat::[a]->[a]->[a]
cat[]ys=ys
cat(x:xs)ys=x:(catxsys)
Asanexample ofaninducti veproof overlists, weshowthatconcatenation oflists
isassociati ve.
Proposition 7.43 Foralllistsxs,ysandzsoverthesame typea:
cat(catxsys)zs=catxs(catyszs).
Proof.Induction onxs.
Basis
cat(cat[]ys)zscat:1=catyszs
cat:1=cat[](catyszs):
266 CHAPTER 7.INDUCTION ANDRECURSION
Induction step
catx:xs(catyszs)cat:2=x:(catxs(catyszs)
i.h.=x:(cat(catxsys)zs)
cat:2=catx:(catxsys)zs
cat:2=cat(catx:xsys)zs:
Exer cise7.44 Provebyinduction thatcatxs[]=cat[]xs.
Exer cise7.45 Provebyinduction:
len(catxsys)=(lenxs)+(lenys).
Ageneral scheme forstructural recursion overlists (without extraparameters) is
givenby:
f[]:=z
f(x:xs):=hx(fxs)
Forexample, thefunctionsthat computes thesum oftheelements inalistof
numbers isdeﬁned by:
s[]:=0
s(n:xs):=n+sxs
Here0istakenforz,and+forh.
Asinthecase fornatural numbers, itisuseful toimplement anoperation for
thisgeneral procedure. Infact,thisispredeﬁned inHask ell,asfollo ws(from
theHask ellﬁlePrelude .hs):
foldr ::(a->b->b)->b->[a]->b
foldrfz[] =z
foldrfz(x:xs) =fx(foldrfzxs)
7.5.INDUCTION ANDRECURSION OVERLISTS 267
Ingeneral,zistheidentity element oftheoperation f,i.e.,thevalue youwould
start outwith inthebase case ofarecursi vedeﬁnition oftheoperation. Theidentity
element foraddition is0,formultiplication itis1(seeSection 7.3).
Thebase clause ofthedeﬁnition offoldr says thatifyouwanttofold anempty
listforoperation f,theresult istheidentity element forf.Therecursi veclause
says thattofold anon-empty listforf,youperformftoitsﬁrstelement andto
theresult offolding theremainder ofthelistforf.
The follo wing informal version ofthedeﬁnition offoldr may further clarify its
meaning:
foldr()z[x1;x2;:::;xn]:=x1(x2((xnz))):
Thefunctionadd::[Natural] ->Natural cannowbedeﬁned as:
add=foldrplusZ
Thefunctionmlt::[Natural] ->Natural isgivenby:
mlt=foldrmult(SZ)
And here isanalternati vedeﬁnition oflistlength, with values oftypeNatural .
Note thatthefunction(\_n->Sn)ignores itsﬁrstargument (you don’thave
tolook attheitems inalistinorder tocount them) andreturns thesuccessor of
itssecond argument (forthissecond argument represents thenumber ofitems that
were counted sofar).
ln::[a]->Natural
ln=foldr(\_n->Sn)Z
Itisalso possible tousefoldr onthestandard type forintegers. Computing the
result ofadding ormultiplying allelements ofalistofintegers canbedone as
follo ws:
268 CHAPTER 7.INDUCTION ANDRECURSION
Prelude> foldr(+)0[1..10]
55
Prelude> foldr(*)1[1..10]
3628800
Exer cise7.46 Usefoldr togiveanewimplementation ofgeneralized union and
foldr1 togiveanewimplementation ofgeneralized intersection forlists. (Look
upthecode forfoldr1 intheHask ellprelude. Compare Exercise 4.53.)
Consider thefollo wing deﬁnitions ofgeneralized conjunction anddisjunction:
or::[Bool]->Bool
or[]=False
or(x:xs)=x||orxs
and::[Bool]->Bool
and[]=True
and(x:xs)=x&&andxs
Thefunctionortakesalistoftruth values andreturnsTrue ifatleast onemember
ofthelistequalsTrue ,whileand takesalistoftruth values andreturnsTrue if
allmembers ofthelistequalTrue .(Wehaveencountered andbefore, inSection
2.2.)
Infact,Hask ellhaspredeﬁned these operations, interms offoldr .Toseehow
wecanusefoldr toimplement generalized conjunction anddisjunction, weonly
need toknowwhat theappropriate identity elements oftheoperations are.Should
theconjunction ofallelements of[]count astrueorfalse? Astrue, foritisindeed
(trivially) thecase thatallelements of[]aretrue. Sotheidentity element for
conjunction isTrue .Should thedisjunction ofallelements of[]count astrueor
false? Asfalse, foritisfalsethat[]contains anelement which istrue. Therefore,
theidentity element fordisjunction isFalse .This explains thefollo wing Hask ell
deﬁnition inPrelude .hs:
and,or ::[Bool]->Bool
and =foldr(&&)True
or =foldr(||)False
7.5.INDUCTION ANDRECURSION OVERLISTS 269
Exer cise7.47 Deﬁne afunctionsrt thatsorts alistofitems inclassOrdaby
folding thelistwith afunctioninsrt .
Theoperation foldr folds ‘from theright’. Folding ‘from theleft’ canbedone
with itscousinfoldl ,predeﬁned inPrelude .hsasfollo ws:
foldl ::(a->b->a)->a->[b]->a
foldlfz[] =z
foldlfz(x:xs) =foldlf(fzx)xs
Aninformal version may further clarify this:
foldl()z[x1;x2;:::;xn]:=(((zx1)x2))xn:
This canbeused toﬂesh outthefollo wing recursion scheme:
fz[]:= z
fz(x:xs):=f(hzx)xs
This boils downtorecursion overlists with anextraparameter ,andinfactfoldl
canbeused tospeed uplistprocessing. Thecase ofreversing alistisanexample:
rzs[]:= zs
rzs(x:xs):=r(preﬁx zsx)xs;
where preﬁxisgivenbyprefixysy=y:ys .Here isadeﬁnition interms of
foldl :
rev=foldl(\xsx->x:xs)[]
Thelist[1,2,3] isreversed asfollo ws:
rev[1,2,3] =foldl(\xsx->x:xs)[][1,2,3]
=foldl(\xsx->x:xs)((\xsx->x:xs)[]1)[2,3]
=foldl(\xsx->x:xs)[1][2,3]
=foldl(\xsx->x:xs)((\xsx->x:xs)[1]2)[3]
270 CHAPTER 7.INDUCTION ANDRECURSION
=foldl(\xsx->x:xs)[2,1][3]
=foldl(\xsx->x:xs)((\xsx->x:xs)[2,1]3)[]
=foldl(\xsx->x:xs)[3,2,1] []
=[3,2,1]
Note that(\xsx->x:xs) hastype[a]->a->[a].Analternati vedeﬁ-
nition ofrev,interms offoldr ,would need aswapfunction
\xxs->xs++[x]::a->[a]->[a]
andwould bemuch lessefﬁcient:
rev'=foldr(\xxs->xs++[x])[]
Theinefﬁcienc yresides inthefactthat++itself isdeﬁned recursi vely,asfollo ws:
[]++ys=ys
(x:xs)++ys=x:(xs++ys)
Toseewhyrev' islessefﬁcient thanrev,look atthefollo wing, where wewrite
postfix for(\xxs->xs++[x]) .
rev'[1,2,3] =foldrpostfix [][1,2,3]
=postfix 1(foldrpostfix [][2,3])
=(foldrpostfix [][2,3])++[1]
=(postfix 2(foldrpostfix [][3]))++[1]
=(foldrpostfix [][3])++[2]++[1]
=(postfix 3(foldrpostfix [][]))++[2]++[1]
=(foldrpostfix [][])++[3]++[2]++[1]
=[]++[3]++[2]++[1]
=([3]++[2])++[1]
=3:([]++[2])++[1]
=[3,2]++[1]
=3:([2]++[1])
=3:2:([] ++[1])
=[3,2,1]
7.5.INDUCTION ANDRECURSION OVERLISTS 271
Ifwecompare thetwolistrecursion schemes that arecovered byfoldr and
foldl ,then weseethatthetwofolding operationshandh0areclose cousins:
f[]:=z f0[]:=z
f(x:xs):=hx(fxs) f0(x:xs):=h0(f0xs)x
Anobvious question toasknowisthefollo wing: what requirements shouldhand
h0satisfy inorder toguarantee thatfandf0deﬁne thesame function? Exercise
7.48 andExample 7.49 inviteyoutofurther investigate thisissue oftherelation
between theschemes.
Exer cise7.48 Leth::a->b->bandh'::b->a->b,andz::b.
Assume thatforallx::aitholds thathx(h'yz)=h'z(hxy).Show
thatforeveryx,y::aandeveryﬁnitexs::[a]thefollo wing holds:
hx(foldlh'yxs)=foldlh'(hxy)xs
Useinduction onxs.
Example 7.49 Leth::a->b->bandh'::b->a->b,andz::b.
Assume wehaveforallx,y::aandallxs::[a]thefollo wing:
hxz=h'zx
hx(h'yz)=h'z(hxy)
Weshowthatwehaveforallﬁnitexs::[a]that
foldrhzxs=foldlh'zxs
Weuseinduction onthestructure ofxs.
Basis Immediate from thedeﬁnitions offoldr andfoldl wehavethat:
foldrhz[]=z=foldlh'z[]
Induction step Assume theinduction hypothesis foldrhzxs=foldlh'zxs.
Wehavetoshowthatfoldrhzx:xs=foldlh'zx:xs .Here isthe
reasoning:
foldrhzx:xsfoldr=hx(foldrhzxs)
IH=hx(foldlhzxs)
7:48= foldlh0(hxz)xs
given= foldlh0(h0zx)xs
foldl= foldlh0zx:xs
272 CHAPTER 7.INDUCTION ANDRECURSION
Foranapplication ofExample (7.49), note thatthefunctionspostfix andprefix
arerelated by:
postfix x[]=[]++[x]=[x]==prefix[]x
postfix x(prefix xsy)=(prefix xsy)++[x]
=y:(xs++[x])
=y:(postfix xxs)
=prefix(postfix xxs)y
Itfollo wsfrom thisandtheresult oftheexample thatrevandrev' indeed com-
pute thesame function.
Exer cise7.50 Consider thefollo wing version ofrev.
rev1::[a]->[a]
rev1xs=rev2xs[]
where
rev2[]ys=ys
rev2(x:xs)ys=rev2xs(x:ys)
Which version ismore efﬁcient, theoriginalrev,theversionrev' ,orthisversion?
Why?
Exer cise7.51 Deﬁne analternati veversionln' oflnusingfoldl instead of
foldr .
InSection 1.8yougotacquainted with themap andfilter functions. The two
operations mapandfilter canbecombined:
Prelude> filter(>4)(map(+1)[1..10])
[5,6,7,8,9,10,11]
Prelude> map(+1)(filter (>4)[1..10])
[6,7,8,9,10,11]
These outcomes aredifferent. This isbecause thetest(>4) yields adifferent result
after allnumbers areincreased by1.When wemakesure thatthetestused inthe
ﬁlter takesthischange intoaccount, wegetthesame answers:
7.6.SOMEVARIATIONSONTHETOWEROFHANOI 273
Prelude> filter(>4)(map(+1)[1..10])
[5,6,7,8,9,10,11]
Prelude> map(+1)(filter ((>4).(+1)) [1..10])
[5,6,7,8,9,10,11]
Here(f.g)denotes theresult ofﬁrstapplyinggandnextf.Note:((>4).(+1))
deﬁnes thesame property as(>3) .Exercise 7.52 givesyouanopportunity toshow
thatthese identical answers arenoaccident.
Exer cise7.52 Letxs::[a],letf::a->b,andletp::b->Bool bea
total predicate. Showthatthefollo wing holds:
ﬁlterp(mapfxs)=mapf(ﬁlter(pf)xs):
Note: apredicatep::b->Bool istotal ifforeveryobjectx::b,theappli-
cationpxgiveseither trueorfalse. Inparticular ,fornox::bdoespxraise
anerror .
7.6 Some Variations ontheTowerofHanoi
Figure 7.1:TheTowerofHanoi.
The TowerofHanoi isatowerof8disks ofdifferent sizes, stack edinorder of
decreasing sizeonapeg.Nexttothetower,there aretwomore pegs.Thetask is
totransfer thewhole stack ofdisks tooneoftheother pegs(using thethird peg
asanauxiliary) while keeping tothefollo wing rules: (i)moveonly onedisk ata
time, (ii)neverplace alargerdisk ontopofasmaller one.
Exer cise7.53 Inthisexercise, youarerequired toinventyour ownsolution, and
nextproveitbymathematical induction. Makesure thatthereasoning also es-
tablishes thattheformula youﬁnd forthenumber ofmovesisthebest onecan
do.
274 CHAPTER 7.INDUCTION ANDRECURSION
1.Howmanymovesdoes ittaketocompletely transfer atowerconsisting ofn
disks?
2.Provebymathematical induction thatyour answer totheprevious question
iscorrect.
3.Howmanymovesdoes ittaketocompletely transfer thetowerofHanoi?
Exer cise7.54 Canyoualsoﬁndaformula forthenumber ofmovesofthedisk of
sizekduring thetransfer ofatowerwith disks ofsizes1;:::;n,and16k6n?
Again, youshould provebymathematical induction thatyour formula iscorrect.
According tolegend, there exists amuch largertowerthan thetowerofHanoi, the
towerofBrahma, with64disks. Monks areengaged intransferring thedisks of
theTowerofBrahma, from thebeginning oftheuniverse tothepresent day.As
soon astheywillhavecompleted their task thetowerwillcrumble andtheworld
willend.
Exer cise7.55 Howlong will theuniverse last, giventhatthemonks moveone
disk perday?
Foranimplementation ofthedisk transfer procedure, anobvious waytorepresent
thestarting conﬁguration ofthetowerofHanoi is([1,2,3,4,5,6,7,8 ],[],[]).
Forclarity ,wegivethethree pegsnamesA,BandC.andwedeclare atypeTower :
dataPeg=A|B|C
typeTower=([Int], [Int],[Int])
There aresixpossible single movesfrom onepegtoanother:
7.6.SOMEVARIATIONSONTHETOWEROFHANOI 275
IAR>(display 88.show.take200.hanoi)8
[([1,2,3,4,5,6,7,8],[],[]),([2,3,4,5,6,7,8],[1],[]),( [3,4,5,6,7,8],[ 1],[2]), ([3,4,5, 6,7,
8],[],[1,2]),([4,5,6,7,8],[3],[1,2]),([1,4,5,6,7,8],[ 3],[2]),([1,4,5 ,6,7,8], [2,3],[] ),([
4,5,6,7,8],[1,2,3],[]),([5,6,7,8],[1,2,3],[4]),([5,6, 7,8],[2,3],[1,4 ]),([2,5 ,6,7,8], [3],
[1,4]),([1,2,5,6,7,8],[3],[4]),([1,2,5,6,7,8],[],[3,4 ]),([2,5,6,7,8] ,[1],[3, 4]),([5, 6,7,
8],[1],[2,3,4]),([5,6,7,8],[],[1,2,3,4]),([6,7,8],[5] ,[1,2,3,4]),([1 ,6,7,8], [5],[2,3 ,4])
,([1,6,7,8],[2,5],[3,4]),([6,7,8],[1,2,5],[3,4]),([3, 6,7,8],[1,2,5], [4]),([3 ,6,7,8], [2,5
],[1,4]),([2,3,6,7,8],[5],[1,4]),([1,2,3,6,7,8],[5],[ 4]),([1,2,3,6,7 ,8],[4,5 ],[]),([ 2,3,
6,7,8],[1,4,5],[]),([3,6,7,8],[1,4,5],[2]),([3,6,7,8] ,[4,5],[1,2]),( [6,7,8], [3,4,5], [1,2
]),([1,6,7,8],[3,4,5],[2]),([1,6,7,8],[2,3,4,5],[]),( [6,7,8],[1,2,3, 4,5],[]) ,([7,8], [1,2
,3,4,5],[6]),([7,8],[2,3,4,5],[1,6]),([2,7,8],[3,4,5] ,[1,6]),([1,2,7 ,8],[3,4 ,5],[6]) ,([1
,2,7,8],[4,5],[3,6]),([2,7,8],[1,4,5],[3,6]),([7,8],[ 1,4,5],[2,3,6]) ,([7,8], [4,5],[1 ,2,3
,6]),([4,7,8],[5],[1,2,3,6]),([1,4,7,8],[5],[2,3,6]), ([1,4,7,8],[2,5 ],[3,6]) ,([4,7,8 ],[1
,2,5],[3,6]),([3,4,7,8],[1,2,5],[6]),([3,4,7,8],[2,5] ,[1,6]),([2,3,4 ,7,8],[5 ],[1,6]) ,([1
,2,3,4,7,8],[5],[6]),([1,2,3,4,7,8],[],[5,6]),([2,3,4 ,7,8],[1],[5,6] ),([3,4, 7,8],[1] ,[2,
5,6]),([3,4,7,8],[],[1,2,5,6]),([4,7,8],[3],[1,2,5,6] ),([1,4,7,8],[3 ],[2,5,6 ]),([1,4 ,7,8
],[2,3],[5,6]),([4,7,8],[1,2,3],[5,6]),([7,8],[1,2,3] ,[4,5,6]),([7,8 ],[2,3], [1,4,5,6 ]),(
[2,7,8],[3],[1,4,5,6]),([1,2,7,8],[3],[4,5,6]),([1,2, 7,8],[],[3,4,5, 6]),([2, 7,8],[1] ,[3,
4,5,6]),([7,8],[1],[2,3,4,5,6]),([7,8],[],[1,2,3,4,5, 6]),([8],[7],[1 ,2,3,4,5 ,6]),([1 ,8],
[7],[2,3,4,5,6]),([1,8],[2,7],[3,4,5,6]),([8],[1,2,7] ,[3,4,5,6]),([3 ,8],[1,2 ,7],[4,5 ,6])
,([3,8],[2,7],[1,4,5,6]),([2,3,8],[7],[1,4,5,6]),([1, 2,3,8],[7],[4,5 ,6]),([1 ,2,3,8], [4,7
],[5,6]),([2,3,8],[1,4,7],[5,6]),([3,8],[1,4,7],[2,5, 6]),([3,8],[4,7 ],[1,2,5 ,6]),([8 ],[3
,4,7],[1,2,5,6]),([1,8],[3,4,7],[2,5,6]),([1,8],[2,3, 4,7],[5,6]),([8 ],[1,2,3 ,4,7],[5 ,6])
,([5,8],[1,2,3,4,7],[6]),([5,8],[2,3,4,7],[1,6]),([2, 5,8],[3,4,7],[1 ,6]),([1 ,2,5,8], [3,4
,7],[6]),([1,2,5,8],[4,7],[3,6]),([2,5,8],[1,4,7],[3, 6]),([5,8],[1,4 ,7],[2,3 ,6]),([5 ,8],
[4,7],[1,2,3,6]),([4,5,8],[7],[1,2,3,6]),([1,4,5,8],[ 7],[2,3,6]),([1 ,4,5,8], [2,7],[3 ,6])
,([4,5,8],[1,2,7],[3,6]),([3,4,5,8],[1,2,7],[6]),([3, 4,5,8],[2,7],[1 ,6]),([2 ,3,4,5,8 ],[7
],[1,6]),([1,2,3,4,5,8],[7],[6]),([1,2,3,4,5,8],[6,7] ,[]),([2,3,4,5, 8],[1,6, 7],[]),( [3,4
,5,8],[1,6,7],[2]),([3,4,5,8],[6,7],[1,2]),([4,5,8],[ 3,6,7],[1,2]),( [1,4,5,8 ],[3,6,7 ],[2
]),([1,4,5,8],[2,3,6,7],[]),([4,5,8],[1,2,3,6,7],[]), ([5,8],[1,2,3,6 ,7],[4]) ,([5,8], [2,3
,6,7],[1,4]),([2,5,8],[3,6,7],[1,4]),([1,2,5,8],[3,6, 7],[4]),([1,2,5 ,8],[6,7 ],[3,4]) ,([2
,5,8],[1,6,7],[3,4]),([5,8],[1,6,7],[2,3,4]),([5,8],[ 6,7],[1,2,3,4]) ,([8],[5 ,6,7],[1 ,2,3
,4]),([1,8],[5,6,7],[2,3,4]),([1,8],[2,5,6,7],[3,4]), ([8],[1,2,5,6,7 ],[3,4]) ,([3,8], [1,2
,5,6,7],[4]),([3,8],[2,5,6,7],[1,4]),([2,3,8],[5,6,7] ,[1,4]),([1,2,3 ,8],[5,6 ,7],[4]) ,([1
,2,3,8],[4,5,6,7],[]),([2,3,8],[1,4,5,6,7],[]),([3,8] ,[1,4,5,6,7],[2 ]),([3,8 ],[4,5,6 ,7],
[1,2]),([8],[3,4,5,6,7],[1,2]),([1,8],[3,4,5,6,7],[2] ),([1,8],[2,3,4 ,5,6,7], []),([8] ,[1,
2,3,4,5,6,7],[]),([],[1,2,3,4,5,6,7],[8]),([],[2,3,4, 5,6,7],[1,8]),( [2],[3,4 ,5,6,7], [1,8
]),([1,2],[3,4,5,6,7],[8]),([1,2],[4,5,6,7],[3,8]),([ 2],[1,4,5,6,7], [3,8]),( [],[1,4, 5,6,
7],[2,3,8]),([],[4,5,6,7],[1,2,3,8]),([4],[5,6,7],[1, 2,3,8]),([1,4], [5,6,7], [2,3,8]) ,([1
,4],[2,5,6,7],[3,8]),([4],[1,2,5,6,7],[3,8]),([3,4],[ 1,2,5,6,7],[8]) ,([3,4], [2,5,6,7 ],[1
,8]),([2,3,4],[5,6,7],[1,8]),([1,2,3,4],[5,6,7],[8]), ([1,2,3,4],[6,7 ],[5,8]) ,([2,3,4 ],[1
,6,7],[5,8]),([3,4],[1,6,7],[2,5,8]),([3,4],[6,7],[1, 2,5,8]),([4],[3 ,6,7],[1 ,2,5,8]) ,([1
,4],[3,6,7],[2,5,8]),([1,4],[2,3,6,7],[5,8]),([4],[1, 2,3,6,7],[5,8]) ,([],[1, 2,3,6,7] ,[4,
5,8]),([],[2,3,6,7],[1,4,5,8]),([2],[3,6,7],[1,4,5,8] ),([1,2],[3,6,7 ],[4,5,8 ]),([1,2 ],[6
,7],[3,4,5,8]),([2],[1,6,7],[3,4,5,8]),([],[1,6,7],[2 ,3,4,5,8]),([], [6,7],[1 ,2,3,4,5 ,8])
,([6],[7],[1,2,3,4,5,8]),([1,6],[7],[2,3,4,5,8]),([1, 6],[2,7],[3,4,5 ,8]),([6 ],[1,2,7 ],[3
,4,5,8]),([3,6],[1,2,7],[4,5,8]),([3,6],[2,7],[1,4,5, 8]),([2,3,6],[7 ],[1,4,5 ,8]),([1 ,2,3
,6],[7],[4,5,8]),([1,2,3,6],[4,7],[5,8]),([2,3,6],[1, 4,7],[5,8]),([3 ,6],[1,4 ,7],[2,5 ,8])
,([3,6],[4,7],[1,2,5,8]),([6],[3,4,7],[1,2,5,8]),([1, 6],[3,4,7],[2,5 ,8]),([1 ,6],[2,3 ,4,7
],[5,8]),([6],[1,2,3,4,7],[5,8]),([5,6],[1,2,3,4,7],[ 8]),([5,6],[2,3 ,4,7],[1 ,8]),([2 ,5,6
],[3,4,7],[1,8]),([1,2,5,6],[3,4,7],[8]),([1,2,5,6],[ 4,7],[3,8]),([2 ,5,6],[1 ,4,7],[3 ,8])
,([5,6],[1,4,7],[2,3,8]),([5,6],[4,7],[1,2,3,8]),([4, 5,6],[7],[1,2,3 ,8]),([1 ,4,5,6], [7],
[2,3,8]),([1,4,5,6],[2,7],[3,8]),([4,5,6],[1,2,7],[3, 8]),([3,4,5,6], [1,2,7], [8]),([3 ,4,5
,6],[2,7],[1,8]),([2,3,4,5,6],[7],[1,8]),([1,2,3,4,5, 6],[7],[8]),([1 ,2,3,4,5 ,6],[],[ 7,8]
),([2,3,4,5,6],[1],[7,8]),([3,4,5,6],[1],[2,7,8]),([3 ,4,5,6],[],[1,2 ,7,8]),( [4,5,6], [3],
[1,2,7,8]),([1,4,5,6],[3],[2,7,8]),([1,4,5,6],[2,3],[ 7,8]),([4,5,6], [1,2,3], [7,8])]
Figure 7.2:TowerofHanoi (ﬁrst 200conﬁgurations)
276 CHAPTER 7.INDUCTION ANDRECURSION
move::Peg->Peg->Tower->Tower
moveAB(x:xs,ys,zs) =(xs,x:ys,zs)
moveBA(xs,y:ys,zs) =(y:xs,ys,zs)
moveAC(x:xs,ys,zs) =(xs,ys,x:zs)
moveCA(xs,ys,z:zs) =(z:xs,ys,zs)
moveBC(xs,y:ys,zs) =(xs,ys,y:zs)
moveCB(xs,ys,z:zs) =(xs,z:ys,zs)
Theprocedure transfer takesthree arguments forthepegs,anargument forthe
number ofdisks tomove,andanargument forthetowerconﬁguration tomove.
Theoutput isalistoftowerconﬁgurations. Theprocedure hanoi ,ﬁnally ,takesa
sizeargument andoutputs thelistofconﬁgurations tomoveatowerofthatsize.
transfer ::Peg->Peg->Peg->Int->Tower->[Tower]
transfer ___0tower=[tower]
transfer pqrntower=transfer prq(n-1)tower
++
transfer rqp(n-1)(movepqtower')
wheretower'=last(transfer prq(n-1)tower)
hanoi::Int->[Tower]
hanoin=transfer ACBn([1..n],[],[])
Theoutput forhanoi8isgiveninFigure 7.2.Here istheoutput forhanoi4:
IAR>hanoi4
[([1,2,3,4],[],[]),([2,3,4],[ 1],[]),([3,4],[1],[2]),([3,4],[],[1,2]),
([4],[3],[1,2]),([1,4],[3],[2 ]),([1,4],[2,3],[]),([4],[1,2,3],[]),
([],[1,2,3],[4]),([],[2,3],[1 ,4]),([2],[3],[1,4]),([1,2],[3],[4]),
([1,2],[],[3,4]),([2],[1],[3, 4]),([],[1],[2,3,4]),([],[],[1,2,3,4])]
Ifyoukeyinhanoi64andexpect youcanstart meditating until theendofthe
world, youwilldisco verthattheprogram suffersfrom what functional program-
mers callaspace leak orblackhole:astheexecution progresses, thelistoftower
conﬁgurations thatiskeptinmemory growslonger andlonger ,andexecution will
abort with an‘out ofmemory’ error .Allcomputation ceases before theworld
ends.
7.6.SOMEVARIATIONSONTHETOWEROFHANOI 277
Nowconsider thefollo wing. Ifthere isabest waytotransfer thetowerofHanoi
(orthetowerofBrahma), then inanygivenconﬁguration itshould beclear what
thenextmoveis.Iftheyonly havetolook atthepresent conﬁguration, themonks
inchargeofthetowerofBrahma cangoabout their task inafully enlightened
manner ,with complete focus onthehere andnow.
Observ ethatthere are3nwaystostackndisks ofdecreasing sizes on3pegsin
such awaythatnodisk isontopofasmaller disk. Since thenumber ofmovesto
getfrom([1..n],[],[]) to([],[],[1..n]) islessthan this, notallofthese
conﬁgurations arecorrect. Howcanweimplement acheck forcorrect conﬁgura-
tions? Here isachecking procedure, with anargument forthesizeofthelargest
disk.
check::Int->Tower->Bool
check0t=t==([],[],[])
checkn(xs,ys,zs)
|xs/=[]&&lastxs==n=check(n-1)(initxs,zs,ys)
|zs/=[]&&lastzs==n=check(n-1)(ys,xs,initzs)
|otherwise =False
Exer cise7.56 Toseethat theimplementation ofcheck iscorrect, weneed an
inducti veproof. Givethatproof.
Here isafunction forﬁnding thelargest disk inaconﬁguration, andafunction
checkT forchecking aconﬁguration ofanysize.
maxT::Tower->Int
maxT(xs,ys,zs)=foldrmax0(xs++ys++zs)
checkT::Tower->Bool
checkTt=check(maxTt)t
Thefollo wing exercise givesamore direct criterion.
Exer cise7.57 Showthatconﬁguration (xs,ys,zs) with largestdiskniscorrect
iffitholds thateverydiskmiseither ontopofadiskkwithk modd, oratthe
bottom ofthesource ordestination peg,withn meven,oratthebottom ofthe
auxiliary peg,withn kodd.
278 CHAPTER 7.INDUCTION ANDRECURSION
Theprevious exercise immediately givesaprocedure forbuilding correct conﬁg-
urations: puteach disk according totherule, starting with thelargest disk. This
willgiveexactly twopossibilities foreverydiskk:thelargestdisk caneither goat
source oratdestination; ifk+1isalready inplace,kcaneither goontopofk+1
ortotheonly other place with thesame parity ask+1.
Fortheimplementation ofaparity check, forthecase where thelargest disk has
sizen,wecantakeanyconﬁguration (xs,ys,zs) ,extend itto
(xs++[n+1],ys++[n],zs++[n+1])
andthen deﬁne theparities bymeans ofpar(x:xs)=xmod2.Here isthe
implementation:
parity::Tower->(Int,Int,Int)
parity(xs,ys,zs) =par(xs++[n+1],ys++[n],zs++[n+1])
where
n=maxT(xs,ys,zs)
par(x:xs,y:ys,z:zs) =(modx2,mody2,modz2)
Exer cise7.58 Showthatif(xs,ys,zs) isacorrect conﬁguration, then
parity(xs,ys,zs)2f(1;1;0);(1;0;1);(0;1;1)g:
Alittle reﬂection showsthatthere areonly twokinds ofmoves.
Movesoftheﬁrstkind movedisk 1(thesmallest disk).
Movesofthesecond kind moveadisk other than 1.
Movesoftheﬁrstkind arefully determined, ascanbeseen bythefactthatdisk1
should alwaysbemovedtotheplace with parity 0.
Exer cise7.59 Giveanargument forthis.
Movesofthesecond kind arealsofully determined, forifthere isoneempty peg,
then there aredisks1;kontopoftheother pegs,andwecanonly movektothe
7.6.SOMEVARIATIONSONTHETOWEROFHANOI 279
empty peg,otherwise there aredisks1<k<montopofthepegs,andwecan
only movekontopofm.
This givesanewalgorithm fortowertransfer ,without space leak. Wedetermine
thetargetofamoveofdisk1bymeans ofaparity check:
target::Tower->Peg
targett@(xs,ys,zs) |parityt==(0,1,1) =A
|parityt==(1,0,1) =B
|parityt==(1,1,0) =C
Themovesofdisk1arenowgivenby:
move1::Tower->Tower
move1t@(1:_,ys,zs) =moveA(target t)t
move1t@(xs,1:_,zs) =moveB(target t)t
move1t@(xs,ys,1:_) =moveC(target t)t
Themovesofthemiddle disk aregivenby:
move2::Tower->Tower
move2t@(1:xs,[],zs) =moveCBt
move2t@(1:xs,ys,[]) =moveBCt
move2t@(1:xs,ys,zs) =ifys<zsthenmoveBCtelsemoveCBt
move2t@([],1:ys,zs) =moveCAt
move2t@(xs,1:ys,[]) =moveACt
move2t@(xs,1:ys,zs) =ifxs<zsthenmoveACtelsemoveCAt
move2t@([],ys,1:zs) =moveBAt
move2t@(xs,[],1:zs) =moveABt
move2t@(xs,ys,1:zs) =ifxs<ysthenmoveABtelsemoveBAt
Thecheck forcompletion is:
280 CHAPTER 7.INDUCTION ANDRECURSION
done::Tower->Bool
done([],[], _)=True
done(xs,ys,zs) =False
Transfer ofatowertakesplace byalternation between thetwokinds ofmoves,
until thetoweriscompletely transferred. Since thelastmovehastobeamove1 ,
weonly havetocheck forcomplete transfer right after such moves,i.e.,inthe
functiontransfer2 :
transfer1, transfer2 ::Tower->[Tower]
transfer1 t=t:transfer2 (move1t)
transfer2 t=ifdonetthen[t]elset:transfer1 (move2t)
And here isournewHanoi procedure:
hanoi'::Int->[Tower]
hanoi'n=transfer1 ([1..n],[],[])
zazen::[Tower]
zazen=hanoi'64
Bynowweknowenough about correct towerconﬁgurations tobeable toorder
them.
Exer cise7.60 Deﬁne andimplement atotal ordering onthelistofallcorrect tower
conﬁgurations.
Exercise 7.60 makesclear thatitshould bepossible todeﬁne abijection between
thenatural numbers andthecorrect towerconﬁgurations, intheir natural order .
Forthis, weﬁrstdeﬁne afunction forﬁnding thek-thcorrect conﬁguration inthe
listoftransitions for([1..n],[],[]) .
7.7.INDUCTION ANDRECURSION OVEROTHERDATASTRUCTURES 281
hanoiCount ::Int->Integer ->Tower
hanoiCount nk|k<0 =error"argument negative"
|k>2^n-1=error"argument notinrange"
|k==0 =([1..n],[],[])
|k==2^n-1=([],[],[1..n])
|k<2^(n-1) =(xs++[n],zs,ys)
|k>=2^(n-1) =(ys',xs',zs'++[n])
where
(xs,ys,zs) =hanoiCount (n-1)k
(xs',ys',zs') =hanoiCount (n-1)(k-2^(n-1))
Interms ofthiswedeﬁne thebijection. Note that forthedeﬁnition weneed
theinverse ofthefunctionn:2n,i.e.,thefunctionn:log2n.The predeﬁned
Hask ellfunctionlogBase giveslogarithms, andlogarithms tobase2aregivenby
logBase 2.Since theresults areinclassFloating (the class ofﬂoating point
numbers), weneed conversion togetback toclassIntegral (theclass consisting
ofIntandInteger ).Forthisweusetruncate .
toTower ::Integer ->Tower
toTower n=hanoiCount km
where
n'=fromInteger (n+1)
k=truncate (logBase 2n')
m=truncate (n'-2^k)
Exer cise7.61 The functionhanoiCount givesusyetanother approach tothe
towertransfer problem. Implement thisashanoi'' ::Int->[Tower] .
Exer cise7.62 Implement thefunctionfromTower ::Tower->Integer that
istheinverseoftoTower .
7.7 Induction andRecursion overOther Data Struc-
tures
Astandard waytoproveproperties oflogical formulas isbyinduction ontheir
syntactic structure. Consider e.g.thefollo wing Hask elldata type forpropositional
282 CHAPTER 7.INDUCTION ANDRECURSION
formulas.
dataForm=PInt|ConjFormForm|DisjFormForm|NegForm
instance ShowFormwhere
show(Pi)='P':show i
show(Conjf1f2)="("++showf1++"&"++showf2++")"
show(Disjf1f2)="("++showf1++"v"++showf2++")"
show(Negf) ="~"++showf
Theinstance ShowForm ensures thatthedata type isintheclassShow ,andthe
functionshow indicates howtheformulas aredisplayed.
Itisassumed thatallproposition letters arefrom alistP0;P1;:::.Then:(P1_
:P2)isrepresented asNeg(Disj(P1)(Neg(P2))) ,andshownonthe
screen as~(P1v~P2) ,andsoon.
Wedeﬁne thelistofsubformulas ofaformula asfollo ws:
subforms ::Form->[Form]
subforms (Pn)=[(Pn)]
subforms (Conjf1f2)=(Conjf1f2):(subforms f1++subforms f2)
subforms (Disjf1f2)=(Disjf1f2):(subforms f1++subforms f2)
subforms (Negf)=(Negf):(subforms f)
This gives,e.g.:
IAR>subforms (Neg(Disj(P1)(Neg(P2))))
[~(P1v~P2),(P1 v~P2),P1,~P2,P2]
The follo wing deﬁnitions count thenumber ofconnecti vesandthenumber of
atomic formulas occurring inagivenformula:
7.7.INDUCTION ANDRECURSION OVEROTHERDATASTRUCTURES 283
ccount::Form->Int
ccount(Pn)=0
ccount(Conjf1f2)=1+(ccount f1)+(ccount f2)
ccount(Disjf1f2)=1+(ccount f1)+(ccount f2)
ccount(Negf)=1+(ccount f)
acount::Form->Int
acount(Pn)=1
acount(Conjf1f2)=(acount f1)+(acount f2)
acount(Disjf1f2)=(acount f1)+(acount f2)
acount(Negf)=acountf
Nowwecanprovethatthenumber ofsubformulas ofaformula equals thesum of
itsconnecti vesanditsatoms:
Proposition 7.63 ForeverymemberfofForm :
length(subforms f)=(ccount f)+(acount f).
Proof.
Basis Iffisanatom, thensubforms f=[f],sothislisthaslength 1.Also,
ccountf=0andacountf=1.
Induction step Iffisaconjunction oradisjunction, wehave:
length(subforms f)=1+(subforms f1)+(subforms f2),
ccountf=1+(ccount f1)+(ccount f2),
acountf=(acount f1)+(acount f2),
wheref1andf2arethetwoconjuncts ordisjuncts. Byinduction hypothe-
sis:
length(subforms f1)=(ccount f1)+(acount f1).
length(subforms f2)=(ccount f2)+(acount f2).
284 CHAPTER 7.INDUCTION ANDRECURSION
Therequired equality follo wsimmediately from this.
Iffisanegation, wehave:
length(subforms f)=1+(subforms f1),
ccountf=1+(ccount f1),
acountf=(acount f1),
andagain therequired equality follo wsimmediately from thisandthein-
duction hypothesis.
Ifoneprovesaproperty offormulas byinduction onthestructure oftheformula,
then thefactisused thateveryformula canbemapped toanatural number that
indicates itsconstructi vecomple xity:0fortheatomic formulas, themaximum of
rank()andrank(	)plus1foraconjunction ^	,andsoon.
7.8 Further Reading
Induction andrecursion areatthecore ofdiscrete mathematics. See[Bal91 ].A
splendid textbook thatteaches concrete (and veryuseful) mathematical skills in
thisarea isGraham, Knuth andPatashnik [GKP89 ].Recursion isalso crucial for
algorithm design. Ifyouarespeciﬁcally interested inthedesign andanalysis of
algorithms youshould deﬁnitely read Harel [Har87 ].Algorithm design inHask ell
isthetopic of[RL99 ].
Chapter8
WorkingwithNumbers
Preview
When reasoning about mathematical objects wemakecertain assumptions about
theexistence ofthings toreason about. Inthecourse ofthischapter wewilltake
alook atintegers, rational numbers, real numbers, andcomple xnumbers. We
willrecall what theyalllook like,andwewill demonstrate thatreasoning about
mathematical objects canbeputtothepractical testbyanimplementation ofthe
deﬁnitions thatwereason about. The implementations turn thedeﬁnitions into
procedures forhandling representations ofthemathematical objects. This chapter
willalsopresent some illuminating examples oftheartofmathematical reasoning.
moduleWWN
where
importList
importNats
285
286 CHAPTER 8.WORKING WITHNUMBERS
8.1 AModule forNatural Numbers
Thenatural numbers aretheconceptual basis ofmore involvednumber systems.
Theimplementation ofNatural from theprevious chapter hastheadvantage that
theunary representation makesthetwocases forinducti veproofs andrecursi ve
deﬁnitions, ZandSn,veryclear .Werepeat thecode ofourimplementation of
Natural ,wrapped upthistime intheform ofamodule, andintegrated intothe
Hask elltype system: seeFigure 8.1. Note thatanimplementation ofquotRem
wasadded:quotRem nmreturns apair(q,r) consisting ofaquotient anda
remainder oftheprocess ofdividingnbym,i.e.,qandrsatisfy 06r<mand
qm+r=n.
Theintegration ofNatural inthesystem ofHask elltypes isachie vedbymeans
ofinstance declarations. E.g., thedeclaration instance OrdNatural makes
thetypeNatural aninstance oftheclassOrd.From aninspection ofPrelude .hs
wegetthat(i)atype inthisclass isassumed toalso beintheclassEq,and(ii)
aminimal complete deﬁnition ofatype inthisclass assumes deﬁnitions of<=or
compare .Condition (i)isfulﬁlled forNatural bythederiving Eqstatement,
while (ii)istakencare ofbythecode forcompare inthemodule. The general
code forclassOrd provides methods fortherelations<=,<,>=,>,andforthe
comparison operators maxandmin,soputtingNatural inclassOrdprovides us
with allofthese.
Similarly ,thedeclaration instance EnumNatural ensures thatNatural isin
theclassEnum .Deﬁnitions forthefollo wing functions fortypes inthisclass are
provided inthemodule:
succ::Natural ->Natural
pred::Natural ->Natural
toEnum::Int->Natural
fromEnum ::Natural ->Int
enumFrom ::Natural ->[Natural]
Thegeneral code fortheclass provides, e.g.,enumFromTo ,soweget:
Nats>enumFromTo Z(toEnum 5)
[Z,SZ,S(SZ),S(S(SZ)),S(S(S(SZ))),S(S(S(S(SZ))))]
Next,thedeclaration instance NumNatural ensures thatNatural isinthe
classNum.This iswhere thefunctions foraddition, multiplication, sign, abso-
lutevalue belong, aswell asatype conversion functionfromInteger .Putting in
theappropriate deﬁnitions allowstheuseofthestandard names forthese opera-
tors. Interms ofthese, Prelude .hsdeﬁnes subtraction, thetype conversion function
8.1.AMODULE FORNATURALNUMBERS 287
moduleNatswhere
dataNatural =Z|SNatural deriving (Eq,Show)
instance OrdNatural where
compare ZZ=EQ
compare Z_=LT
compare _Z=GT
compare (Sm)(Sn)=compare mn
instance EnumNatural where
succ=\n->Sn
predZ=Z
pred(Sn)=n
toEnum =fromInt
fromEnum =toInt
enumFrom n=maptoEnum[(fromEnum n)..]
instance NumNatural where
(+)=foldnsucc
(*)=\m->foldn(+m)Z
(-)=foldnpred
abs=id
signumZ=Z
signumn=(SZ)
fromInteger n|n<0=error"nonegative naturals"
|n==0=Z
|otherwise =S(fromInteger (n-1))
foldn::(a->a)->a->Natural ->a
foldnhcZ=c
foldnhc(Sn)=h(foldnhcn)
instance RealNatural wheretoRational x=toInteger x%1
instance Integral Natural where
quotRem nd|d>n=(Z,n)
|otherwise =(Sq,r)
where(q,r)=quotRem (n-d)d
toInteger =foldnsucc0
Figure 8.1:AModule forNatural Numbers.
288 CHAPTER 8.WORKING WITHNUMBERS
fromInt ,andnegate .Sincenegate isdeﬁned interms ofsubtraction, andsub-
traction fornaturals iscut-of fsubtraction, weget:
Nats>negate(S(S(S(SZ))))
Z
The nextinstance declaration putsNatural intheclassReal .The only code
wehavetoprovide isthatforthetype conversion functiontoRational .Putting
Natural inthisclass isnecessary forthenextmove:theinstance declaration
thatputsNatural intheclassIntegral :types inthisclass areconstrained by
Prelude .hstobeintheclassesReal andEnum .Thebeneﬁts ofmakingNatural
anintegraltype aremany:wenowgetimplementations ofeven ,odd,quot ,rem,
div,mod,toInt andmanyother functions andoperations forfree(seethecontents
ofPrelude .hsforfulldetails).
Theimplicit type conversion alsoallowsustointroduce natural numbers inshort-
hand notation:
Nats>12::Natural
S(S(S(S(S(S(S(S(S(S(S(SZ)))))))))))
Thestandard representation fornatural numbers thatweareaccustomed to,deci-
malstring notation, isbuiltintotheHask ellsystem forthedisplay ofintegers. To
display naturals indecimal string notation, allwehavetodoisusetype conversion:
Nats>toInt(S(S(SZ)))
3
Nats>(S(SZ))^(S(S(SZ)))
S(S(S(S(S(S(S(SZ)))))))
Nats>toInt(S(SZ))^(S(S(SZ)))
8
Forother representations, i.e.,binary string representation ofanintegralnumber
n,divide by2repeatedly ,andcollect theremainders inalist.Thereversal ofthis
listgivesthebinary representation bk:::b0satisfyingn=bk2k+bk 12k 1+
+b0.The nice thing isthatwecanprovide thiscode forthewhole class of
Integral types:
8.2.GCDANDTHEFUNDAMENTALTHEOREM OFARITHMETIC 289
binary::Integral a=>a->[Int]
binaryx=reverse (bitsx)
wherebits0=[0]
bits1=[1]
bitsn=toInt(remn2):bits(quotn2)
Todisplay thisonthescreen, weneedintToDigit forconverting integers into
digital characters:
showDigits ::[Int]->String
showDigits =mapintToDigit
bin::Integral a=>a->String
bin=showDigits .binary
Exer cise8.1Giveafunctionhexfordisplaying numbers intype classIntegral
inhexadecimal form, i.e.,inbase 16representation. The extra digits a,b,c,d,
e,ffor10,11,12,13,14,15thatyouneed areprovided byintToDigit .The
callhex31should yield"1f" .(Hint: itisworthwhile toprovide amore general
functiontoBase forconverting toalistofdigits inanybase inf2;:::;16g,and
then deﬁnehexinterms ofthat.)
8.2 GCD and theFundamental Theor emofArith-
metic
Thefundamental theorem ofarithmetic, stating thateveryn2Nwithn>1has
aunique prime factorization, wasknowninAntiquity .Letusreﬂect abittosee
why itistrue. First note thattherestriction onnisnecessary ,form0=0forall
m2N,soafactorization of0canneverbeunique, andsince wehaveruled out1
asaprime, 1does nothaveaprime factorization atall.Thefundamental theorem
ofarithmetic constitutes thereason, bytheway,forruling out1asaprime number .
Wehaven=1mnforanyn;m2N,soafactorization ofnthatadmits 1masa
factor canneverbeunique.
290 CHAPTER 8.WORKING WITHNUMBERS
From theprime factorization algorithm (1.7) weknowthatprime factorizations of
everynatural number>1exist. Toshowuniqueness, westillhavetoestablish that
nonumber hasmore than oneprime factorization.
Euclid’ sGCD algorithm Thegreatest common divisor oftwonatural numbers
a;b,notation GCD(a;b),isthenatural numberdwith theproperty thatddivides
bothaandb,andforallnatural numbersd0thatdivide bothaandbitholds that
d0dividesd.Forexample, GCD(30;84)=6,for6divides30and84,andevery
other common divisor of30and84divides6(these other common divisors being
1,2and3).
Clearly ,ifsuchdexists, itisunique, forsuppose thatd0also qualiﬁes. Then
becaused0dividesaandb,itfollo wsfrom thedeﬁnition ofdthatd0dividesd.
Similarly ,becauseddividesaandb,itfollo wsfrom thedeﬁnition ofd0thatd
dividesd0.Butifddividesd0andd0dividesdthen itfollo wsthatd=d0.
Thegreatest common divisor ofaandbcanbefound from theprime factorizations
ofaandbasfollo ws.Leta=p1
1pk
kandb=p1
1pk
kbeprime factor -
izations ofaandb,withp1;:::;pkdistinct primes, and1;:::;k;1;:::;k
natural numbers. Then thegreatest common divisor ofaandbequals thenatural
numberp1
1pk
k,where eachiistheminimum ofiandi.
Forexample, thegreatest common divisor of30=21315170and84=
22315071isgivenby21315070=6.
Butthere isaneasier waytoﬁndGCD(a;b).Here isEuclid’ sfamous algorithm
(assume neither ofa;bequals 0):
WHILEa6=bDOIFa>bTHENa:=a bELSEb:=b a:
Letusrunthisfortheexample casea=30,b=84.Wegetthefollo wing
(conventions about variable names asinSection 1.7).
a0=30 b0=84
a0<b0a1=30 b1=84 30=54
a1<b1a2=30 b2=54 30=24
a2>b2a3=30 24=6b3=24
a3<b3a4=6 b4=24 6=18
a4<b4a5=6 b5=18 6=12
a5<b5a6=6 b6=12 6=6
a6=b6=6
Nowwhydoes thiswork? Thekeyobserv ation isthefollo wing.
8.2.GCDANDTHEFUNDAMENTALTHEOREM OFARITHMETIC 291
Ifddividesaandbanda>bthenddividesa b(forthen there arenatural
numbersm;nwithm>nanda=md,b=nd,andthereforea b=md nd=
d(m n)),andsimilarly ,ifddividesaandbanda<bthenddividesb a.
Conversely ,ifa>bandddividesa bandb,thenddividesa(forthen there
arenatural numbersm;nwitha b=mdandb=nd,hencea=md+nd=
d(m+n)),andsimilarly ,ifa>bandddividesb aanda,thenddividesa.
Thus, ifa>bthen thesetofcommon divisors ofaandbequals thesetofcommon
divisors ofa bandb,andifb>athen thesetofcommon divisors ofaandb
equals thesetofcommon divisors ofaandb a.
Since thesetsofallcommon divisors areequal, thegreatest common divisors must
beequal aswell. Therefore wehave:ifa>bthen GCD(a;b)=GCD(a b;b),
andifb>athen GCD(a;b)=GCD(a;b a).
Using thisweseethateveryiteration through theloop preserv esthegreatest com-
mon divisor inthefollo wing sense: GCD(ai;bi)=GCD(ai+1;bi+1).Since we
knowthatthealgorithm terminates wehave:there issomekwithak=bk.There-
foreak=GCD(ak;bk)=GCD(a;b).
Hask ellcontains astandard functiongcdforthegreatest common divisor ofapair
ofobjects oftypeIntegral :
gcd ::Integral a=>a->a->a
gcd00 =error"Prelude.gcd: gcd00isundefined"
gcdxy =gcd'(absx)(absy)
wheregcd'x0=x
gcd'xy=gcd'y(x`rem`y)
Exer cise8.2Ifyoucompare thecode forgcdtoEuclid’ salgorithm, youseethat
Euclid uses repeated subtraction where theHask ellcode usesrem.Explain as
precisely asyoucanhowtheHask ellversion oftheGCD algorithm isrelated to
Euclid’ smethod forﬁnding theGCD.
WecanusetheGCD todeﬁne aninteresting relation. Twonatural numbersnand
maresaid tobeco-prime orrelatively prime ifGCD(m;n)=1.Here isan
implementation:
292 CHAPTER 8.WORKING WITHNUMBERS
coprime ::Integer ->Integer ->Bool
coprime mn=(gcdmn)==1
Exer cise8.3Consider thefollo wing experiment:
WWN>coprime 1225
True
WWN>12+25
37
WWN>coprime 2537
True
WWN>25+37
62
WWN>coprime 3762
True
WWN>37+62
99
WWN>coprime 6299
True
WWN>62+99
161
WWN>coprime 99161
True
WWN>
This experiment suggests ageneral rule, foryoutoconsider ...
Does itfollo wfrom thefactthataandbareco-prime witha<bthatbanda+bare
co-prime? Giveaproof ifyour answer is‘yes’ andacountere xample otherwise.
Theor em8.4Forallpositi vea;b2Nthere areintegersm;nwithma+nb=
GCD(a;b).
Proof.Consider thepairs(a0;b0);(a1;b1);:::;(ak;bk)generated byEuclid’ s
algorithm. Weknowthat(a0;b0)=(a;b)andthatak=bk=GCD(a;b).
a0satisﬁesa0=ma+nbform=1;n=0,b0satisﬁesma+nb=1for
m=0;n=1.
Supposeaisatisﬁesai=m1a+n1bandbisatisﬁesbi=m2a+n2b.Ifai>bi,
thenai+1satisﬁesai+1=(m1 m2)a+(n1 n2)bandbi+1satisﬁesbi+1=
8.3.INTEGERS 293
m2a+n2b.Ifai<bi,thenai+1satisﬁesai+1=m1a+n1bandbi+1satisﬁes
bi+1=(m2 m1)a+(n2 n1)b.Thus, everyiteration through theloop ofEuclid’ s
algorithm preserv esthefactthataiandbiareintegrallinear combinations ma+nb
ofaandb.
This showsthatthere areintegersm;nwithak=ma+nb,hence thatma+nb=
GCD(a;b).
Theor em8.5Ifpisaprime number thatdividesabthenpdividesaorb.
Proof.Supposepdividesabandpdoes notdividea.Then GCD(a;p)=1.By
theprevious theorem there areintegersm;nwithma+np=1.Multiplying both
sides bybgives:
mab+nbp=b:
Bythefactthatpdividesabweknowthatpdivides bothmab andnbp.Hencep
dividesmab+nbp.Hencepdividesb.
Theorem 8.5isthetoolforproving thefundamental theorem ofarithmetic.
Theor em8.6(Fundamental Theor emofArithmetic)
Everynatural number greater than1hasaunique prime factorization.
Proof.Weestablished in1.7thateverynatural number greater than1hasatleast
oneprime factorization.
Toshowthateverynatural number hasatmost oneprime factorization, assume to
thecontrary thatthere isanatural numberN>1with atleast twodifferent prime
factorizations. Thus,
N=p1pr=q1qs;
with allofp1;:::;pr;q1;:::;qsprime. Divide outcommon factors ifnecessary .
This givesapithatisnotamong theq’s.Butthisisacontradiction with theorem
8.5,becausepidividesN=q1qsbutpidoes notdivide anyofq1,...,qs,
since these areallprime numbers different frompi.
8.3 Integers
Supposen;m;karenatural numbers. Whenn=m+kwecanviewkasthe
difference ofnandm,anditistempting towrite thisask=n mforthe
operation ofsubtraction. Addition andsubtraction arecalled inverseoperations ,
294 CHAPTER 8.WORKING WITHNUMBERS
foriftheaddition ofntomisfollo wed bythesubtraction ofn,theendresult is
theoriginal natural numberm.Inother words, wehave:
(m+n) n=m:
Butwehavetobecareful here. Theoperation ofsubtracting anatural numbern
from anatural numbermwillonly result inanatural number ifm>n.Tomake
subtraction possible between anypairofnumbers, wehavetointroduce negative
numbers. This givesthedomain ofintegers:
Z=f:::; 3; 2; 1;0;1;2;3;:::g:
Thesymbol Zderivesfrom Zahl,theGerman wordfornumber .
Infact,weneed notconsider theintegers asgivenbyGod, butwecanviewthem
asconstructed from thenatural numbers. This canbedone inseveralways. The
follo wing Hask ellcode illustrates onepossibility:
dataSgn=P|Nderiving (Eq,Show)
typeMyInt=(Sgn,Natural)
myplus::MyInt->MyInt->MyInt
myplus(s1,m)(s2,n)|s1==s2 =(s1,m+n)
|s1==P&&n<=m=(P,m-n)
|s1==P&&n>m=(N,n-m)
|otherwise =myplus(s2,n)(s1,m)
Another wayisasfollo ws.Werepresent everyintegerasa‘difference pair’ oftwo
natural numbers. Forexample, (0;3)represents 3,butthesame number 3is
alsorepresented by(1;4)or(2;5).
Ingeneral, forallm1;m22N,ifm1>m2then there isak2Nwithm2+k=
m1,and(m1;m2)representsk.If,ontheother hand,m1<m2then there isa
k2Nwithm1+k=m2,and(m1;m2)represents k.Thus, letRN2be
deﬁned asfollo ws:
(m1;m2)R(n1;n2):m1+n2=m2+n1:
Itiseasy toseethatRisanequivalence onN2.Ifm2N,then theinteger mis
represented by(0;m),butalsoby(k;k+m),foranyk2N.
Intuiti vely(m1;m2)and(n1;n2)areequivalent moduloRwhen their differences
arethesame. This isthecase precisely whenm1+n2=m2+n1.Inthiscase we
8.3.INTEGERS 295
saythat(m1;m2)and(n1;n2)represent thesame number .InSection 6.8wesaw
thattheequivalence relationRisacongruence foraddition onN2,where addition
onN2isgivenby:
(m1;m2)+(n1;n2):=(m1+n1;m2+n2);
Denoting theequivalence class of(m1;m2)as[m1 m2],weget:
[m1 m2]:=f(n1;n2)2N2jm1+n2=m2+n1g:
Weidentify theintegers with theequivalence classes [m1 m2],form1;m22
N.Note thatinthisnotation isnotanoperator .Call theequivalence classes
difference classes .
Ifanintegerm=[m1 m2],then wecanswapthesign byswapping theorder of
m1andm2,andput m=[m2 m1].Swapping theorder twice getsusback to
theoriginal equivalence class. This reﬂects thefamiliar ruleofsignm= ( m).
Wedeﬁne addition andmultiplication ondifference classes asfollo ws:
[m1 m2]+[n1 n2]:=[(m1+n1) (m2+n2)]
[m1 m2][n1 n2]:=[(m1n1+m2n2) (m1n2+n1m2)]:
Thepurpose ofthisdeﬁnition istoextend thefundamental lawsofarithmetic to
thenewdomain. Toseewhether wehavesucceeded inthiswehavetoperform a
veriﬁcation, asajustiﬁcation ofthedeﬁnition.
Intheveriﬁcation thatintegers satisfy thelawofcommutati vityforaddition, we
makeuseofthedeﬁnition ofaddition fordifference classes, andoflawsofcom-
mutati vityforaddition onN:
Proposition 8.7Forallm;n2Z:m+n=n+m.
Proof.Representing m;nasdifference classes weget:
[m1 m2]+[n1 n2]= [deﬁnition of+fordifference classes]
[(m1+n1) (m2+n2)]= [commutati vityof+forN]
[(n1+m1) (n2+m2)]= [deﬁnition of+fordifference classes]
[(n1 n2]+[m1 m2)]:
Note thattheproof uses justthedeﬁnition of+fordifference classes andthecom-
mutati vity of+onN.Note also thateveryequality statement isjustiﬁed inthe
296 CHAPTER 8.WORKING WITHNUMBERS
proof byareference toadeﬁnition ortoafundamental lawofarithmetic, where
these lawsareinturn justiﬁed byinducti veproofs based ontherecursi vedeﬁni-
tions ofthenatural number operations. Thus, thefundamental lawsofarithmetic
andthedeﬁnition ofanewkind ofobject (difference classes) interms ofafamiliar
one(natural numbers) areourstarting point fortheinvestigation ofthatnewkind
ofobject.
Exer cise8.8Show(using thedeﬁnition ofintegers asdifference classes andthe
deﬁnition ofaddition fordifference classes) thattheassociati velawforaddition
holds forthedomain ofintegers.
Inasimilar wayitcanbeshownfrom thedeﬁnition ofintegers bymeans ofdif-
ference classes andthedeﬁnition ofmultiplication fordifference classes thatthe
associati veandcommutati velawsformultiplication continue tohold forthedo-
main ofintegers.
Asafurther example ofreasoning about thisrepresentation fortheintegers, we
showthatthedistrib utivelawcontinues tohold inthedomain ofintegers (viewed
asdifference classes). Intheveriﬁcation wemakeuseofthedeﬁnition ofaddition
andmultiplication fordifference classes, andofthefundamental lawsforaddition
andmultiplication onthenatural numbers. Again, wejustify everystep bymeans
ofareference tothedeﬁnition ofanoperation ondifference classes ortooneof
thelawsofarithmetic forthenatural numbers.
Proposition 8.9Forallm;n;k2Z:m(n+k)=mn+mk:
Proof.Representing m;n;kasdifference classes weget:
[m1 m2]([n1 n2]+[k1 k2])
= [deﬁnition of+fordifference classes]
[m1 m2][(n1+k1) (n2+k2)]
= [deﬁnition offordifference classes]
[(m1(n1+k1)+m2(n2+k2)) (m1(n2+k2)+(n1+k1)m2)]
= [distrib ution ofover+forN]
[(m1n1+m1k1+m2n2+m2k2) (m1n2+m1k2+m2n1+m2k1)]
8.4.IMPLEMENTING INTEGER ARITHMETIC 297
= [commutati vityof+forN]
[(m1n1+m2n2+m1k1+m2k2) (m1n2+m2n1+m1k2+m2k1)]
= [deﬁnition of+fordifference classes]
[(m1n1+m2n2) (m1n2+m2n1)]
+[(m1k1+m2k2) (m1k2+m2k1)]
= [deﬁnition offordifference classes]
[m1 m2][n1 n2]+[m1 m2][k1 k2]:
Once theintegers andtheoperations ofaddition andmultiplication onitarede-
ﬁned, andwehavecheck edthatthedeﬁnitions arecorrect, wecanforgetofcourse
about therepresentation bymeans ofdifference classes. Itsimply takestoomuch
mental energytokeepsuch details ofrepresentation inmind. Mathematicians
makefriends with mathematical objects byforgetting about irrele vantdetails of
their deﬁnition.
Thenatural numbers haverepresentations asdifference classes too:anatural num-
bermisrepresented by[m 0].Infact,theoriginal numbers andtheir represen-
tations inthenewdomain Zbeha veexactly thesame, inaveryprecise sense: the
function thatmapsm2Nto[m 0]isone-to-one (itnevermaps different num-
bers tothesame pair) anditpreserv esthestructure ofaddition andmultiplication,
inthefollo wing sense (seealsoSection 6.8). Ifm+n=kthen
[m 0]+[n 0]=[(m+n) 0]=[k 0];
andifmn=kthen
[m 0][n 0]=[mn 0]=[k 0]:
Again weforgetabout thedifferences inrepresentation andwesay:NZ.
8.4 Implementing Integer Arithmetic
Ifwerepresent natural numbers astypeNatural ,then themoral oftheaboveis
thatintegers canberepresented aspairsofnaturals. E.g., minus ﬁveisrepresented
bythepair(SZ,S(S(S(S(S(S Z)))))) ,orbythepair(Z,S(S(S(S(S Z))))) ,
andsoon.Here isanappropriate data type declaration:
typeNatPair =(Natural,Natural)
298 CHAPTER 8.WORKING WITHNUMBERS
Thegistoftheprevious section canbenicely illustrated bymeans ofimplementa-
tions oftheintegeroperations. Forsuppose wehavethenatural number operations
plus foraddition andtimes formultiplication available forthetypeNatural ).
Then addition forintegerpairs isimplemented inHask ellas:
plus1::NatPair ->NatPair ->NatPair
plus1(m1,m2)(n1,n2)=(m1+n1, m2+n2)
Subtraction isjustaddition, butwith thesign ofthesecond operand reversed. Sign
reversal isdone byswapping theelements ofapair,aswehaveseen. Thus, the
implementation ofsubtraction canlook likethis:
subtr1::NatPair ->NatPair ->NatPair
subtr1(m1,m2)(n1,n2)=plus1(m1,m2)(n2,n1)
Here istheimplementation ofmultiplication:
mult1::NatPair ->NatPair ->NatPair
mult1(m1,m2)(n1,n2)=(m1*n1+m2*n2,m1*n2+m2*n1)
Theimplementation ofequality forpairs ofnaturals isalsostraightforw ard:
eq1::NatPair ->NatPair ->Bool
eq1(m1,m2)(n1,n2)=(m1+n2) ==(m2+n1)
Finally ,itisuseful tobeable toreduce anaturals pairtoitssimplest form (such
asimplest form isoften called acanonical representation ).Thesimplest form of
anaturals pair isapair which haseither itsﬁrst oritssecond member equal to
Z.E.g., thesimplest form ofthepair(S(SZ),S(S(S(S Z)))) is(Z,S(SZ)).
Reduction tosimplest form canagain bedone byrecursion.
8.5.RATIONALNUMBERS 299
reduce1 ::NatPair ->NatPair
reduce1 (m1,Z)=(m1,Z)
reduce1 (Z,m2)=(Z,m2)
reduce1 (Sm1,Sm2)=reduce1 (m1,m2)
Exer cise8.10 Deﬁne andimplement relationsleq1 for6andgt1for>fordif-
ference classes ofnaturals.
8.5 Rational Numbers
Afurther assumption thatwewould liketomakeisthatanyintegercanbedivided
byanynon-zero integertoform afraction, orrational number ,andthatanyrational
numberm=n canbe‘canceled down’toitslowest form bydividingmandnby
thesame number .E.g.,12=39cancels downto4=13.
Again wecanviewtherational numbers asconstructed bymeans ofpairs, inthis
case pairs(m;n)withm;n2Z,n6=0.Inthiscase thepairs are‘ratio pairs’.
One andthesame rational number canberepresented inmanydifferent ways:
(1;2),(2;4),(13;26)allrepresent therational number 1=2.Orinother words:
therational numberm=n isnothing buttheclass ofall(p;q)withp;q2Z,q6=0,
andtheproperty thatmq=np.Insuch acase wesaythatm=n andp=qrepresent
thesame number .
Asinthecase oftherepresentation ofintegers bymeans ofdifference classes
wehaveanunderlying notion ofequivalence. LetSbetheequivalence relation on
Z(Z f0g)givenby(m;n)S(p;q):mq=np.Note that(m;n)and(km;kn)
areequivalent moduloS(providedk6=0),which justiﬁes thesimpliﬁcation of
km=kntom=n bymeans ofcanceling down. ThesetQofrational numbers (or
fractional numbers) canbedeﬁned as:
Q:=(Z(Z f0g))=S:
Wewrite aclass[(m=n)]Sas[m=n].Addition, multiplication andequality ofra-
tional numbers arenowdeﬁned interms ofaddition andmultiplication ofintegers,
asfollo ws:
[m=n]+[p=q]:=[(mq+pn)=nq]
[m=n][p=q]:=[mp=nq ]
[m=n]=[p=q]:mq=np
300 CHAPTER 8.WORKING WITHNUMBERS
Again, wehavetocheck thatthese deﬁnitions makesense. Itiseasy toseethat
thesum, thedifference, andtheproduct oftworatio classes areagain ratio classes.
Forinstance, ifx2Qandy2Q,then there areintegersm;n;p;q2Zwith
n6=0,q6=0,andx=[m=n]andy=[p=q].Thenx+y=[m=n]+[p=q]=
[(mq+pn)=nq],andfrommq+pn2Z,nq2Z,andnq6=0itfollo wsthat
x+y2Q.
Proposition 8.11 Thelawofassociati vityfor+holds fortherationals.
Proof.Ifx;y;z2Qthen there arem;n;p;q;r;s2Zwithx=[m=n],y=[p=q],
z=[r=s],n6=0,q6=0ands6=0.Now:
x+(y+z)
= [deﬁnitions ofx;y;z]
[m
n]+([p
q]+[r
s])
= [deﬁnition of+forQ]
[m
n]+[ps+rq
qs]
= [deﬁnition of+forQ]
[mqs+(ps+rq)n
nqs]
= [distrib ution lawforZ]
[mqs+psn+rqn
nqs]
= [assoc offorZ,distlawforZ]
[(mq+pn)s+rqn
nqs]
=[deﬁnition of+forQ]
[mq+pn
nq]+[r
s]
=[deﬁnition of+forQ]
([m
n]+[p
q])+[r
s]
= [deﬁnitions ofx;y;z]
(x+y)+z:
Inasimilar way,itisnotdifﬁcult (butadmittedly abittedious) tocheck thatthe
lawofcommutati vityfor+holds fortherationals, thatthelawsofassociati vity
8.5.RATIONALNUMBERS 301
andcommutati vityforhold fortherationals, andthatthelawofdistrib ution holds
fortherationals.
Athing tonote about Proposition 8.11 isthatthestatement about rational num-
bers thatitmakesalso tells ussomething about ourwaysofdoing things inan
implementation. Ittells usthatanyprogram thatuses theprocedure add which
implements addition fortherationals need notdistinguish between
(add(add(m,n)(p,q))(r,s)) and(add(m,n)(add(p,q)(r,s))).
Where veroneexpression ﬁtstheother willﬁt.
Again forgetting about irrele vantdifferences inrepresentation, weseethatZQ,
foreveryintegernhasarepresentation intherationals, namelyn=1.
Ifx;y2Q,thenx+y2Q,x y2Q,xy2Q.If,inadditiony6=0,
wehavex=y2Q.Wesaythatthedomain ofrationals isclosed under addition,
subtraction, andmultiplication and‘almost closed’ under division. Ify6=0,then
1=yexists, which showsthateveryrational numberyexcept0hasaninverse:a
rational number thatyields 1when multiplied withy.
Adomain ofnumbers thatisclosed under thefour operations ofaddition, sub-
traction, multiplication anddivision (with theextracondition ondivision thatthe
divisor should be6=0)iscalled aﬁeld.Thedomain ofrational numbers isaﬁeld.
Itiseasy toseethateach rational numberm=n canbewritten indecimal form, by
performing theprocess oflong division. There aretwopossible outcomes:
1.thedivision process stops:m=n canbewritten asaﬁnite decimal expansion.
2.thedivision process repeats:m=n canbewritten asainﬁnite decimal ex-
pansion with atailpartconsisting ofadigit orgroup ofdigits which repeats
inﬁnitely often.
Examples oftheﬁrst outcome are1=4=0:25, 1=4= 0:25,22=5=4:4.
Examples ofthesecond outcome are1=3=0:3333:::,1=6=0:166666:::,
29=7=4:14285714285714 2857:::,23=14=1:642857142857 1428571:::.A
handy notation forthisis1=3=0:3,1=6=0:6,29=7=4:142857 ,23=14=
1:6428571 .Thepartunder thelineisthepartthatrepeats inﬁnitely often.
Ifthedivision process repeats form=n then ateach stage oftheprocess there must
beanon-zero remainder .This means thatateach stage, theremainder must bein
therange1;:::;n 1.Butthen after atmostnsteps, some remainderkisbound
toreoccur ,andafter thereappearance ofktheprocess runs through exactly the
same stages asafter theﬁrstappearance ofk.Thesame remainders turnup,inthe
same order .Weareinaloop.
302 CHAPTER 8.WORKING WITHNUMBERS
Conversely ,itisnotverydifﬁcult toseethateveryrepeating decimal corresponds
toarational number .First anexample. SupposeM=0:133133133:::=0:133.
Then: 1000M=133:133,and(1000M) M=133:133 0:133=133,so
M=133
999.
Nowforthegeneral case.
Theor em8.12 Everyrepeating decimal corresponds toarational number .
Proof.Arepeating decimal canalwaysbewritten inourover-line notation inthe
form
M0:a1a2amb1b2bn;
whereMisanintegerandtheaiandbjaredecimal digits. Forexample, 37=14=
 2:6428571 = 2 0:6428571 .Ifwecanprovethatthepart
p=0:a1a2amb1b2bn
isrational, then wearedone, forifpisrational andMisanintegerthen there
areintegersn;kwithp=n=k,soM+p=M+n=k=kM+n
k,i.e.,M+pis
rational, andsimilarly forM p.Setting
A=0:a1a2am;B=0:b1b2bn;C=0:b1b2bn;
weget
p=0:a1a2amb1b2bn=A+10 mC:
Ifwecanwrite thisinterms ofrational operations onAandBwearedone.
C=0:b1b2bn=0:b1b2bnb1b2bn:
Thus,
C 10 nC=0:b1b2bnb1b2bn 0:010nb1b2bn=
=0:b1b2bn=B:
Therefore,C=B
1 10 n,andweget:
p=A+10 mB
1 10 n;
sowehaveprovedthatpisrational.
8.5.RATIONALNUMBERS 303
r1r3
r
2J
J
J
J
J
J
J
JJJ
J
Jr
2
3
Figure 8.2:Constructing thefraction 2=3.
There isanice geometrical interpretation oftheprocess ofconstructing rational
numbers. Assume thatwehavebeen giventhelineofintegers:
::: 3 2 10123:::
Place these ona(horizontal) x-axis anda(vertical)y-axis:
...


x


...
y
Nowconstruct further points onthex-axis byﬁrstdrawing astraight linelthrough
apointmonthex-axis andapointnonthey-axis, andnextdrawing alinel0
parallel tolthrough thepoint(0;1).The intersection ofl0andthex-axis isthe
rational pointm=n .(Use congruence reasoning fortriangles toestablish thatthe
ratio betweenmandnequals theratio between theintersection pointm=n and1.)
Figure 8.2givestheconstruction ofthefraction 2=3onthex-axis.
Figures 8.3,8.4,8.5and8.6givethegeometrical interpretations ofaddition, nega-
tion, multiplication andreciprocal. Subtraction isaddition ofanegated number ,
division ismultiplication with areciprocal, sothese givealltherational operations.
Note thatthese constructions canallbeperformed byaprocess of(i)connecting
previously constructed points byastraight line, and(ii)drawing lines parallel to
304 CHAPTER 8.WORKING WITHNUMBERS
0 1a b a+b1a
Figure 8.3:Geometrical Interpretation ofAddition.
0 1 1 aa
 a
Figure 8.4:Geometrical Interpretation ofNegation.
0 1a b ab1
1
b
Figure 8.5:Geometrical Interpretation ofMultiplication.
8.6.IMPLEMENTING RATIONALARITHMETIC 305
1
a0 1 a1a
Figure 8.6:Geometrical Interpretation ofReciprocal.
previously constructed lines. These aretheso-called linear constructions :thecon-
structions thatcanbeperformed byusing aruler butnocompass. Inparticular ,use
ofacompass toconstruct linesegments ofequal lengths isforbidden.
8.6 Implementing Rational Arithmetic
Hask ellhasastandard implementation oftheabove,atypeRational ,predeﬁned
asfollo ws:
dataIntegral a=>Ratioa=a:%aderiving (Eq)
typeRational =RatioInteger
Toreduce afraction toitssimplest form, weﬁrstmakesure thatthedenominator
isnon-ne gative.If(x,y) represents afraction with numerator xanddenominator
y,then
(x*signumy)(absy)
isanequivalent representation with positi vedenominator .Hereabsgivestheab-
solute value, andsignum thesign (1forpositi veintegers,0for0, 1fornegative
integers). Thereduction tocanonical form isperformed by:
306 CHAPTER 8.WORKING WITHNUMBERS
(%) ::Integral a=>a->a->Ratioa
x%y =reduce(x*signumy)(absy)
reduce ::Integral a=>a->a->Ratioa
reducexy|y==0 =error"Ratio.%: zerodenominator"
|otherwise =(x`quot`d):%(y`quot`d)
whered=gcdxy
Functions forextracting thenumerator andthedenominator areprovided:
numerator, denominator ::Integral a=>Ratioa->a
numerator (x:%y) =x
denominator (x:%y) =y
Note thatthenumerator of(x%y)need notbeequal toxandthedenominator
need notbeequal toy:
Prelude> numerator (2%4)
1
Prelude> denominator (2%10)
5
Atotal order ontherationals isimplemented by:
instance Integral a=>Ord(Ratioa)where
compare (x:%y)(x':%y') =compare (x*y')(x'*y)
Thestandard numerical operations from theclassNumareimplemented by:
8.6.IMPLEMENTING RATIONALARITHMETIC 307
instance Integral a=>Num(Ratioa)where
(x:%y)+(x':%y') =reduce(x*y'+x'*y)(y*y')
(x:%y)*(x':%y') =reduce(x*x')(y*y')
negate(x:%y)=negatex:%y
abs(x:%y) =absx:%y
signum(x:%y)=signumx:%1
Therationals arealsoclosed under thedivision operationxy:x
yandthereciprocal
operationx:1
x.These areimplemented asfollo ws:
instance Integral a=>Fractional (Ratioa)where
(x:%y)/(x':%y') =(x*y')%(y*x')
recip(x:%y) =ifx<0then(-y):%(-x)elsey:%x
Ifyouwanttotryoutdecimal expansions offractions onacomputer ,here isa
Hask ellprogram thatgenerates thedecimal expansion ofafraction.
decExpand ::Rational ->[Integer]
decExpand x|x<0=error"negative argument"
|r==0=[q]
|otherwise =q:decExpand ((r*10) %d)
where
(q,r)=quotRem nd
n=numerator x
d=denominator x
Ifthedecimal expansion repeats, youwillhavetointerrupt theprocess bytyping
contr olc:
WWN>decExpand (1%7)
[0,1,4,2,8,5,7,1,4,2,8,5,7,1,4,2,8,5,7,1,4,2,8,
5,7,1,4,2,8,5,7,1,4,2,8,5,7,1,4,2,8,5,7,1,4,2,
8,5,7,1,4,2,8,5,7,1,4,2,8,5,7,1,4,2,8,5,7,1,4,
2,8,5,7,1,4,2,8,5,7,1,4,2,8,5,7,1,4,2,8,5,7,1,
4,2,8,5,{Interrupted!}
308 CHAPTER 8.WORKING WITHNUMBERS
This problem canberemedied bychecking everynewquotient remainder pair
against alistofquotient-remainder pairs, tospot arepetition. Themain function
decForm produces theintegerpart, andrelegates thetaskofcalculating thelistsof
non-repeating andrepeating decimals toanauxiliary functiondecF .
decForm ::Rational ->(Integer,[Int],[Int])
decForm x|x<0=error"negative argument"
|otherwise =(q,ys,zs)
where
(q,r) =quotRem nd
n =numerator x
d =denominator x
(ys,zs) =decF(r*10)d[]
The functiondecF hasaparameter forthelistofquotient remainder pairs that
havetobecheck edforrepetition. Thecode fordForm useselemIndex from the
moduleList.hs toﬁndtheindexoftheﬁrstrepeating digit, andsplitAt tosplit
alistatanindex.
decF::Integer ->Integer ->[(Int,Integer)] ->([Int],[Int])
decFndxs|r==0 =(reverse (q:(mapfstxs)),[])
|elem(q,r)xs=(ys,zs)
|otherwise =decF(r*10)d((q,r):xs)
where
(q',r) =quotRem nd
q =toIntq'
xs' =reverse xs
Justk=elemIndex (q,r)xs'
(ys,zs) =splitAt k(mapfstxs')
Here areafewexamples:
WWN>decForm (133%999)
(0,[],[1,3,3])
WWN>decForm (1%7)
(0,[],[1,4,2,8,5,7])
WWN>decForm (2%7)
8.7.IRRATIONALNUMBERS 309
(0,[],[2,8,5,7,1,4])
WWN>decForm (3%7)
(0,[],[4,2,8,5,7,1])
WWN>decForm (4%7)
(0,[],[5,7,1,4,2,8])
WWN>decForm (5%7)
(0,[],[7,1,4,2,8,5])
WWN>decForm (6%7)
(0,[],[8,5,7,1,4,2])
There isnoupper limit tothelength oftheperiod. Here isanexample with a
period length of99:
WWN>decForm (468%199)
(2,[],[3,5,1,7,5,8,7,9,3,9,6, 9,8,4,9,2,4,6,2,3,1,1,5,5,7,7,8,8,9,4,4,
7,2,3,6,1,8,0,9,0,4,5,2,2,6,1 ,3,0,6,5,3,2,6,6,3,3,1,6,5,8,2,9,1,4,5,
7,2,8,6,4,3,2,1,6,0,8,0,4,0,2 ,0,1,0,0,5,0,2,5,1,2,5,6,2,8,1,4,0,7,0])
Exer cise8.13 Write aHask ellprogram toﬁnd thelongest period thatoccurs in
decimal expansions offractions with numerator anddenominator takenfrom the
setf1;:::;999g.
8.7 Irrational Numbers
The Ancients disco vered totheir dismay that with justruler andcompass itis
possible toconstruct linesegments whose lengths donotform rational fractions.
Inother words, itispossible toconstruct alengthqsuch thatfornom;n2N
itholds thatq=m
n.Here isthefamous theorem from Antiquity stating this
disturbing fact,with itsproof.
1
1@
@
@
@
@
@
@
@@x
310 CHAPTER 8.WORKING WITHNUMBERS
Theor em8.14 There isnorational numberxwithx2=2.
Proof.Assume there isanumberx2Qwithx2=2.Then there arem;n2Z,
n6=0with(m=n)2=2.Wecanfurther assume thatm=n iscanceled downtoits
lowest form, i.e.,there arenok;p;q2Zwithk6=1,m=kpandn=kq.
Wehave:2=(m=n)2=m2=n2,andmultiplying both sides byn2weﬁnd
2n2=m2.Inother words,m2iseven,andsince squares ofoddnumbers are
alwaysodd,mmust beeven,i.e., there isapwithm=2p.Substitution in
2n2=m2gives2n2=(2p)2=4p2,andweﬁndthatn2=2p2,which leads to
theconclusion thatnisalso even.Butthismeans thatthere isaqwithn=2q,
andwehaveacontradiction with theassumption thatm=n wasinlowest form. It
follo wsthatthere isnonumberx2Qwithx2=2.Thesquare root of2isnot
rational.
Ofcourse, weallusep
2forthesquare root of2.Thetheorem tells usthatp
2=2
Q.The collection ofnumbers thatp
2does belong toiscalled thecollection of
realnumbers, R.Itispossible togiveaformal construction ofthereals from the
rationals, butwewill notdosohere. Instead, wejustmention thatQR,and
weinformally introduce thereals asthesetofallsigned (ﬁnite orinﬁnite) decimal
expansions. The domain ofrealnumbers isclosed under thefour operations of
addition, subtraction, multiplication anddivision, i.e.,justliketherationals, the
reals form aﬁeld.
Exer cise8.15 Usethemethod from theproof ofTheorem 8.14 toshowthatp
3
isirrational.
Exer cise8.16 Showthatifpisprime, thenppisirrational.
Exer cise8.17 Showthatifnisanatural number withpnnotanatural number ,
thenpnisirrational.
Using thefundamental theorem ofarithmetic, wecangivethefollo wing alternati ve
proof ofTheorem 8.14:
Proof.Ifp
2=(p=q),then2q2=p2.Intherepresentation ofp2asaproduct
ofprime factors, everyprime factor hasanevennumber ofoccurrences (forthe
square ofpequals theproduct ofthesquares ofp’sprime factors). Intherepresen-
tation of2q2asaproduct ofprime factors, theprime factor2hasanoddnumber
ofoccurrences. Contradiction with Theorem 8.6.
8.7.IRRATIONALNUMBERS 311
InSection 8.8wewilldiscuss analgorithm, themechanic’ srule, forapproaching
thesquare rootofanypositi vefractionpwith arbitrary precision.
The irrational numbers aredeﬁned here informally astheinﬁnite non-periodic
decimal expansions. This isnotaveryneat deﬁnition, foritsrelies ontheuseof
decimals, andthere isnothing special about using thenumber tenasabasis for
doing calculations. Other bases would servejustaswell. Inanycase, looking atQ
andRinterms ofexpansions provides aneat perspecti veontherelation between
rational andirrational numbers. What, e.g., aretheodds against constructing a
rational bymeans ofaprocess oftossing coins togetaninﬁnite binary expansion?
Exer cise8.18 Does itfollo wfrom thefactthatx+yisrational thatxisrational
oryisrational? Ifso,giveaproof, ifnot,givearefutation.
Wehaveseen thatwriting outthedecimal expansion ofarealnumber likep
2does
notgiveaﬁnite representation. Infact,since there areuncountably manyreals (see
Chapter 11),noﬁnite representation scheme forarbitrary reals ispossible.
Inimplementations itiscustomary touseﬂoating point representation (or:scien-
tiﬁcrepresentation) ofapproximations ofreals. E.g., thedecimal fraction 1424213:56
isanapproximation ofp
2106,andgetsrepresented as1:42421356E+5.The
decimal fraction 0:0000014242135 6isanapproximation ofp
2
106=p
210 6,
andgetsrepresented as1:42421356E 6.Thegeneral form isx:xxxEm,where
x:xxx isadecimal fraction called themantissa andmisanintegercalled the
exponent .Here aretheHugs versions:
Prelude> sqrt2*10^6
1.41421e+06
Prelude> sqrt2/10^6
1.41421e-06
Hask ellhasapredeﬁned typeFloat forsingle precision ﬂoating point numbers,
andatypeDouble fordouble precision ﬂoating point numbers. Together these
twotypes form theclassFloating :
Prelude> :tsqrt2
sqrt2::Floating a=>a
Floating point numbers arestored aspairs(m;n),wheremisthematrix andn
theexponent ofthebase used fortheencoding. Ifxisaﬂoating point number ,the
base ofitsrepresentation isgivenbyfloatRadix anditsmatrix andexponent, asa
valueoftype(Integer,Int) ,bydecodeFloat .Thus, iffloatRadix xequals
banddecodeFloat xequals (m;n),thenxisthenumbermbn.floatDigits
givesthenumber ofdigits ofminbasebrepresentation. Inparticular ,if(m;n)
312 CHAPTER 8.WORKING WITHNUMBERS
isthevalue ofdecodeFloat x,anddthevalue offloatDigits ,then eitherm
andnareboth zero, orbd 16m<bd.Here isanexample:
Prelude> floatRadix (sqrt2)
2
Prelude> decodeFloat (sqrt2)
(11863283,-23)
Prelude> 11863283 *2^^(-23)
1.41421
Prelude> floatDigits (sqrt2)
24
Prelude> 2^23<=11863283 &&11863283 <2^24
True
TheinversetothefunctiondecodeFloat isencodeFloat :
Prelude> sqrt2
1.41421
Prelude> encodeFloat 11863283 (-23)
1.41421
Scaling aﬂoating point number isdone by‘moving thepoint’:
Prelude> scaleFloat 4(sqrt2)
22.6274
Prelude> 2^4*sqrt2
22.6274
Aﬂoating point number canalwaysbescaled insuch awaythatitsmatrix isin
theinterv al( 1;1).The matrix inthisrepresentation isgivenbythefunction
significand ,theexponent byexponent :
Prelude> significand (sqrt2)
0.707107
Prelude> exponent (sqrt2)
1
Prelude> 0.707107 *2^1
1.41421
Prelude> scaleFloat 10.707107
1.41421
Thedeﬁnitions ofexponent ,significand andscaleFloat (from thePrelude):
8.8.THEMECHANIC'S RULE 313
exponent x=ifm==0then0elsen+floatDigits x
where(m,n)=decodeFloat x
significand x=encodeFloat m(-floatDigits x)
where(m,_)=decodeFloat x
scaleFloat kx=encodeFloat m(n+k)
where(m,n)=decodeFloat x
8.8 The Mechanic’ sRule
Sequences offractions canbeused toﬁnd approximations torealnumbers that
themselv esarenotfractions (see Section 8.7). Awell knownalgorithm forgen-
erating such sequences istheso-called mechanic’ srule (also knownasNewton’ s
method ,abitmisleadingly ,forthealgorithm wasalready inusecenturies before
Newton):
p>0;a0>0;an+1=1
2(an+p
an):
InExercise 8.19 youareaskedtoprovethatthiscanbeused toapproximate the
square root ofanypositi vefractionptoanydegree ofaccurac y.TheHask ellim-
plementation uses some fresh ingredients. Thefunctionrecip takesthereciprocal
ofafraction, theoperation iterate iterates afunction byapplying itagain tothe
result oftheprevious application, andtakeWhile takesaproperty andalistand
constructs thelargestpreﬁx ofthelistconsisting ofobjects satisfying theproperty .
Inthepresent case, theproperty is(\m->m^2<=p),having asquare 6p,
andthelististhelistofpositi venaturals. Youshould look uptheimplementations
inPrelude.hs andmakesure youunderstand.
mechanicsRule ::Rational ->Rational ->Rational
mechanicsRule px=(1%2)*(x+(p*(recipx)))
mechanics ::Rational ->Rational ->[Rational]
mechanics px=iterate (mechanicsRule p)x
314 CHAPTER 8.WORKING WITHNUMBERS
sqrtM::Rational ->[Rational]
sqrtMp|p<0=error"negative argument"
|otherwise =mechanics ps
where
s=ifxs==[]then1elselastxs
xs=takeWhile (\m->m^2<=p)[1..]
Asademonstration, here aretheﬁrstsevensteps intheapproximation top
2,the
ﬁrstsevensteps intheapproximation top
4,andtheﬁrst, second, ...,sixth stepin
theapproximation top
50,respecti vely.This already givesgreater accurac ythan
isneeded inmost applications; thealgorithm convergesveryfast.
WWN>take5(sqrtM2)
[1%1,3%2,17%12,577%408,665857 %470832]
WWN>take7(sqrtM4)
[2%1,2%1,2%1,2%1,2%1,2%1,2%1]
WWN>sqrtM50!!0
7%1
WWN>sqrtM50!!1
99%14
WWN>sqrtM50!!2
19601%2772
WWN>sqrtM50!!3
768398401 %108667944
WWN>sqrtM50!!4
1180872205318713601 %167000548819115088
Exer cise8.19 1.Provethatforeveryn,
an+1 pp
an+1+pp=(an pp)2
(an+pp)2:
2.From theﬁrstitem itfollo ws(byinduction onn)that
an+1 pp
an+1+pp=a0 pp
a0+pp2n
:
Derivefrom thisthatsqrtMpconvergestoppforanypositi verational
numberp.
8.9.REASONING ABOUTREALS 315
3.Showthattheapproximation isfrom above,i.e.,showthatn>1implies
thatan>pp.
Exer cise8.20 1.Find aruletoestimate thenumber ofcorrect decimal places
inapproximation anofpp.Use theresult ofExercise 8.19. (Hint: try
toﬁnd aninequality oftheforman pp6t,withtanexpression that
emplo ysa0anda1.)
2.Usetheprevious item togiveanestimate ofthenumber ofcorrect decimal
places inthesuccessi veapproximations top
2.
8.9 Reasoning about Reals
Suppose onewants todescribe thebeha viour ofmoving objects byplotting their
position orspeed asafunction oftime. Moving objects donotsuddenly disappear
andreappear some where else(outside theBermuda triangle, atleast), sothepath
ofamoving object does nothaveholes orgaps init.This iswhere thenotions of
continuity andlimit arise naturally .Analysis, with itsemphasis oncontinuity and
limit, isarichsource ofexamples where skill inquantiﬁer reasoning iscalled for.
Thefollo wing Lemma illustrates thatmanycommon functions arecontinuous. Its
proof isgivenasanexample: itisanice illustration oftheuseofthelogical rules.
Infact,logic isallthere istothisproof: properties ofrealnumbers arenotneeded
atall.
Lemma. Thecomposition oftwocontinuous functions iscontinuous.
I.e., iffandgarecontinuous functions from reals toreals, then thefunctionh
deﬁned byh(x)=g(f(x))(cf.Deﬁnition 6.29 p.222) iscontinuous aswell.
Proof.Given:fandgarecontinuous, i.e.,(“"--deﬁnition” p.66;forclarity we
usedifferent variables forthearguments):
8x8">09>08y(jx yj<=)jf(x) f(y)j<"); (8.1)
8a8">09>08b(ja bj<=)jg(a) g(b)j<"): (8.2)
Tobeproved:8x8">09>08y(jx yj<=)jg(f(x)) g(f(y))j<").
316 CHAPTER 8.WORKING WITHNUMBERS
Proof(detailed version): Note thatwhat isTobeprovedbegins with twouniversal
quantiﬁers8xand8">0.Therefore, theproof hastostart (recall theobligatory
opening thatgoes with8-introduction!) with choosing twoarbitrary valuesx2R
and">0.Wenowhavetoshowthat
9>08y(jx yj<=)jg(f(x)) g(f(y))j<"): (8.3)
Thenextquantiﬁer asks ustosupply some example-thatis>0.There appears
tobenoimmediate waytoreduce theproof problem further ,sowestart looking at
thegivensinorder toobtain such anexample.
Itturns outthatwehavetousethesecond given(8.2) ﬁrst.Itcanbeused (8-
elimination) ifwespecify values foraand".Later onitwillshowthata=f(x)
andtheearlier"willturnouttobeuseful.
Thus, (8.2) delivers(9-elimination) some1>0such that
8b(jf(x) bj<1=)jg(f(x)) g(b)j<"): (8.4)
Applying thegiven(8.1) toourxand"=1(8-elimination) weobtain (9-
elimination) >0such that
8y(jx yj<=)jf(x) f(y)j<1): (8.5)
And thisistheexample-wearelooking for,i.e.:
Claim:8y(jx yj<=)jg(f(x)) g(f(y))j<").
(From thisfollo wswhat wehavetoshowusing9-introduction.)
Proof: Suppose that(toprepare for8-introduction andDeduction Rule —cf.Ex-
ercise 3.18 p.93)yissuch thatjx yj<.
From (8.5) (using thisy—8-elimination andModus Ponens) youﬁnd, thatjf(x) 
f(y)j<1.
Finally ,from (8.4) (withb=f(y)—8-elimination) youﬁnd thatjg(f(x)) 
g(f(y))j<".
TheClaim follo ws.
Making upthescore: theproof applies oneruleforeach oftheﬁfteen (!)occur -
rences oflogical symbols inGivenandTobeproved.Makesure youunderstand
everydetail.
Ofcourse, theamount ofdetail isexcessi veandthere isamore common concise
version aswell. The follo wing version isthekind ofargument youwill ﬁnd in
8.9.REASONING ABOUTREALS 317
analysis textbooks. Asisusual, itleavestothereader toﬁllinwhich rules have
been applied, andwhere.
Proof.Assume thatx2Rand">0.
From (8.2), obtain1>0such that
8b(jf(x) bj<1=)jg(f(x)) g(b)j<"): (8.6)
Applying (8.1) toxand1,obtain>0such that
8y(jx yj<=)jf(x) f(y)j<1): (8.7)
Then ifjx yj<,by(8.7) wegetthatjf(x) f(y)j<1,andfrom (8.6) it
follo wsthatjg(f(x)) g(f(y))j<".
This version oftheproof willbeconsidered verycomplete byeverymathemati-
cian. Nevertheless, thecompression attained isapproximately 4:1.
Theremaining examples ofthissection areabout sequences ofreals.
Limits. Assume thata0;a1;a2;:::isasequence ofreals andthata2R.The
expression limi!1ai=a(“the sequence convergestoa”,“aislimit ofthese-
quence”) bydeﬁnition means that
8">09n8i>n(ja aij<"):
Generating concrete examples ofconverging sequences inHask elliseasy,aswe
haveseen inSection 8.8. Wehaveseen thatthesequences produced bytheme-
chanic’ sruleconverge.Wewillprovesome results about convergence.
Theor em. Every sequence ofrealshasatmost onelimit.
Proof.Thesituation should beanalyzed asfollo ws.
Given: limi!1ai=a,limi!1ai=b.
Tobeproved:a=b.
Proof: Proof byContradiction isnotabadidea here, since thenewgivenitpro-
vides, nl.,thata6=b,isequivalent with thepositi veja bj>0.Thus, assume
this. Proof byContradiction nowasks tolook forsomething false.
Inorder tousetheoldgiven,youneed tochoose (8-elimination!) values for".As
you’llseelater,itisuseful tochoose"=1
2ja bj.Note that">0.
318 CHAPTER 8.WORKING WITHNUMBERS
From thegivenlimi!1ai=aweobtain now,that9n8i>n(ja aij<").
Thus (9-elimination) somen1exists such that8i>n1(ja aij<").
From thegivenlimi!1ai=bweobtain, similarly ,somen2such that8i>
n2(jb aij<").
Deﬁnen=max(n1;n2).Sincen>n1;n2,by8-elimination wenowgetfrom
these factsthatbothja anj<"andjb anj<".
Lastly ,using thetriangle-inequality
jx+yj6jxj+jyj;
itfollo wsthatja bj=ja an+an bj6ja anj+jb anj<2"=ja bj
—andthisisthefalsity lookedfor.
Exer cise8.21 Write aconcise version oftheaboveproof.
Exer cise8.22 Assume thatlimi!1ai=a.
1.Showthatlimi!1a2i=a.
2.Assume thatf:N!Nisafunction such that8n9m8i>mf(i)>n.
Showthatlimi!1af(i)=a.
Exer cise8.23 Assume that thesequences ofrealsfang1
n=0andfbng1
n=0have
limitsaresp.b,andthata<b.Showthatanumbernexists such that8m>
n(am<bm).
Exer cise8.24 Assume thatlimi!1ai=aandthatlimi!1bi=b.
Showthatlimi!1(ai+bi)=a+b.
Exer cise8.25 Showthatafunctionf:R!Riscontinuous ifflimi!1f(ai)=
f(a)whene verlimi!1ai=a.
Cauch y.Asequence ofrealsfang1
n=0iscalled Cauc hyif
8">09n8i;j>n(jai ajj<"):
8.10.COMPLEX NUMBERS 319
Exer cise8.26 Assume thatthesequencefang1
n=0isCauchy .
1.Showthatthesequence isbounded .I.e.,thatnumbersbandcexistsuch that
8i(b<ai<c).
2.Assume thata2Rissuch that8">08n9i>n(ja aij<").(The
existence ofsuch anafollo wsfrom thesequence being bounded, butyou
arenotaskedtoprovethis.) Showthatlimi!1ai=a.
Itfollo wsimmediately from Exercise 8.19 thatthesequences ofrationals produced
bytheMechanic’ sruleareCauchy .Thanks tothatwecanimplement aprogram
forcalculating square roots asfollo ws(forstillgreater precision, change thevalue
of"inapprx ):
approximate ::Rational ->[Rational] ->Rational
approximate eps(x:y:zs)
|abs(y-x)<eps=y
|otherwise =approximate eps(y:zs)
apprx::[Rational] ->Rational
apprx=approximate (1/10^6)
mySqrt::Rational ->Rational
mySqrtp=apprx(sqrtMp)
Exer cise8.27 Justaswedeﬁned theintegers from thenaturals andtherationals
from theintegers bymeans ofquotient setsgenerated from suitable equivalence
classes, wecandosonow,bydeﬁning thesetofrealnumbers Rasthesetofall
Cauchy sequences inQmodulo anappropriate equivalence relation. Deﬁne that
equivalence relation andshowthatitisindeed anequivalence.
8.10 Complex Numbers
Inthedomain ofrational numbers wecannot solvetheequationx2 2=0,but
inthedomain ofrealnumbers wecan: itsroots arex=p
2andx= p
2.What
320 CHAPTER 8.WORKING WITHNUMBERS
about solvingx2+1=0?There arenorealnumber solutions, forthesquare root
of 1does notexistintherealm ofrealnumbers. Theﬁeld ofrealnumbers isnot
closed under theoperation oftaking square roots. Toremedy this, wefollo wthe
bynowfamiliar recipe ofextending thenumber domain, byintroducing numbers
ofanewkind. Weextend thedomain ofreals toadomain ofcomple xnumbers,
C,byintroducing anentityicalled ‘theimaginary unit’, andpostulatingi2= 1.
Wedonotwanttolose closure under addition, subtraction, multiplication and
division, soweshould beable tomakesense ofp
2+i,2i, i,andsoon.In
general, wewanttobeable tomakesense ofx+iy,wherexandyarearbitrary
realnumbers, andweneed rules foradding andmultiplying comple xnumbers, in
such awaythatthelawsofcommutati vityandassociati vity of+and,andthe
lawofdistrib ution ofover+continue tohold.xiscalled therealpartofx+iy,
iyitsimaginary part. Adding comple xnumbers boils downtoadding realand
imaginary parts separately:
(x+iy)+(u+iw)=(x+u)+i(y+w):
This alsogivesarecipe forsubtraction:
(x+iy) (u+iw)=(x+iy)+( u+ iw)=(x u)+i(y w):
Formultiplication, weusethefactthati2= 1:
(x+iy)(u+iw)=xu+iyu+ixw+i2yw=(xu yw)+i(yu+xw):
Division uses thefactthat(x+iy)(x iy)=x2+y2.Itisgivenby:
x+iy
u+iw=x+iy
u+iwu iw
u iw=xu+yw
u2+w2+iyu xw
u2+w2:
Weseethatliketherationals andthereals, thecomple xnumbers areclosed under
thefour operations addition, subtraction, multiplication anddivision, soCisa
ﬁeld. Moreo ver,anyrealnumberacanbeviewed asacomple xnumber ofthe
forma+0i,sowehavethatRC.
Solving theequationx2+1=0inthedomain Cgivestworoots, viz.,x=iand
x= i.Ingeneral, solving theequationxn+an 1xn 1+:::+a1x+a0=0,
wherea0;:::;an 1may beeither realorcomple x,givesncomple xroots, forthe
fundamental theorem ofalgebra (which wewillnotprovehere) states thatevery
polynomial ofdegreen,
f(x)=xn+an 1xn 1+:::+a1x+a0;
canbefactored intoaproduct ofexactlynfactors,
(x b1)(x b2)(x bn):
8.10.COMPLEX NUMBERS 321
Exer cise8.28 Check thatthecommutati veandassociati velawsandthedistrib u-
tivelawhold forC.
There isastandard Hask ellmodule Comple x.hs with animplementation ofcom-
plexnumbers.
infix6:+
data(RealFloat a)=>Complex a=!a:+!a
deriving (Eq,Read,Show)
Theexclamation marks inthetyping!a:+!aindicate thattherealandimagi-
nary parts oftypeRealFloat areevaluated inastrict way.
The realpart ofacomple xnumberx+iyistherealnumberx,theimaginary
part therealnumbery.Notation fortherealpart ofz:Re(z).Notation forthe
imaginary partofz:Im(z).TheHask ellimplementations are:
realPart, imagPart ::(RealFloat a)=>Complex a->a
realPart (x:+y) =x
imagPart (x:+y) =y
Thecomple xnumberz=x+iycanberepresented geometrically ineither oftwo
ways:
1.Associate withzthepoint with coordinates (x;y)intheplane R2.Inthis
way,weviewtheplane R2asthecomple xplane .
2.Associate withzthetwo-dimensional vector with components xandy.
Think ofthisvector asafreevector ,i.e.,avector thatmay bemovedaround
freely aslong asitsdirection remains unchanged.
Thetworepresentations canbecombined byattaching thevectorztotheorigin of
theplane. Wethen getthepicture ofFigure 8.7. Call thehorizontal axis through
theorigin therealaxisandthevertical axisthrough theorigin theimaginary axis.
Theconjugate ofacomple xnumberz=x+iyisthenumber z=x iy.Its
geometrical representation isthereﬂection ofzintherealaxis (see again Figure
8.7). Itsimplementation isgivenby:
322 CHAPTER 8.WORKING WITHNUMBERS

1  1z iy
x
zi
 i
Figure 8.7:Geometrical Representation ofComple xNumbers.
conjugate ::(RealFloat a)=>Complex a->Complex a
conjugate (x:+y) =x:+(-y)
Themagnitude ormodulus orabsolute value ofacomple xnumberzisthelengthr
ofthezvector .Notationjzj.Themagnitude ofz=x+iyisgivenbyp
x2+y2.
ItsHask ellimplementation:
magnitude ::(RealFloat a)=>Complex a->a
magnitude (x:+y)=
scaleFloat k(sqrt((scaleFloat mkx)^2+(scaleFloat mky)^2))
wherek=max(exponent x)(exponent y)
mk=-k
The phase orargument ofacomple xnumberzistheangleofthevectorz.
Notation: arg(z).The phaseofavector ofmagnitude 1isgivenbythevec-
torcos()+isin()(see Figure 8.8), sothephase ofz=x+iyisgivenby
arctany
xforx>0,andarctany
x+forx<0.Incasex=0,thephase is
8.10.COMPLEX NUMBERS 323

cos()isin()z iy
x
Figure 8.8:\=cos()+isin().
324 CHAPTER 8.WORKING WITHNUMBERS
0.This computation istakencare ofbytheHask ellfunctionatan2 .Here isthe
implementation:
phase ::(RealFloat a)=>Complex a->a
phase(0:+0) =0
phase(x:+y) =atan2yx
Thepolar representation ofacomple xnumberz=x+iyisr\,wherer=jzj
and=arg(z).Theadvantage ofpolar representation isthatcomple xmultiplica-
tionlooks much more natural: justmultiply themagnitudes andaddthephases.
(R\')(r\)=Rr\('+):
Thepolar representation ofacomple xnumber isgivenby:
polar ::(RealFloat a)=>Complex a->(a,a)
polarz =(magnitude z,phasez)
Note thatpolar representations arenotunique, forwehave:
:::=r\( 2)=r\=r\(+2)=r\(+4)=:::
Togetfrom representation r\totherepresentation asavector sum ofrealand
imaginary parts, user\=r(cos()+isin())(see again Figure 8.8). Imple-
mentation:
mkPolar ::(RealFloat a)=>a->a->Complex a
mkPolar rtheta =r*costheta:+r*sintheta
Converting aphasetoavector intheunitcircle isdone by:
cis ::(RealFloat a)=>a->Complex a
cistheta =costheta:+sintheta
8.10.COMPLEX NUMBERS 325
Theimplementations ofthearithmetical operations ofaddition, subtraction, mul-
tiplication, negation, absolute value andsignum aregivenby:
instance (RealFloat a)=>Num(Complex a)where
(x:+y)+(x':+y') =(x+x'):+(y+y')
(x:+y)-(x':+y') =(x-x'):+(y-y')
(x:+y)*(x':+y') =(x*x'-y*y') :+(x*y'+y*x')
negate(x:+y) =negatex:+negatey
absz =magnitude z:+0
signum0 =0
signumz@(x:+y) =x/r:+y/rwherer=magnitude z
Note thatthesignum ofacomple xnumberzisinfactthevector representation
ofarg(z).This suggests thatarg(z)isageneralization ofthe+or sign for
realnumbers. That thisisindeed thecase canbeseen when weperform comple x
multiplication onrealnumbers: positi verealnumbers, represented inthecomple x
plane, havephase 0,oringeneral, phase 2k.Negativerealnumber ,represented
inthecomple xplane, havephase,oringeneral, (2k+1).Multiplying two
negativerealnumbers means multiplying their values andadding their phases, so
wegetphase 2,which isthesame asphase 0,modulo 2k.
Comple xdivision istheinverse ofmultiplication, soitboils downtoperforming
division onthemagnitudes, andsubtraction onthephases. Theimplementation in
terms ofthevector representations looks slightly more involvedthan this, however:
instance (RealFloat a)=>Fractional (Complex a)where
(x:+y)/(x':+y') =(x*x''+y*y'') /d:+(y*x''-x*y'') /d
wherex''=scaleFloat kx'
y''=scaleFloat ky'
k=-max(exponent x')(exponent y')
d=x'*x''+y'*y''
Forthedeﬁnition offurther numerical operations oncomple xnumbers werefer to
thelibrary ﬁleComple x.hs.
Comple xnumbers lose their mystery when onegets well acquainted with their
geometrical representations. Here aresome examples, forgetting thefeelofthem.
The number 1+ihasmagnitudep
2andphase
4:seeFigure 8.9. Squaring
326 CHAPTER 8.WORKING WITHNUMBERS

4
1ip
2
Figure 8.9:Thenumber 1+i.

2i
Figure 8.10: Thenumber (1+i)2.
8.10.COMPLEX NUMBERS 327
3
42p
2
Figure 8.11: Thenumber (1+i)3.
328 CHAPTER 8.WORKING WITHNUMBERS
thisnumber involvessquaring themagnitude anddoubling thephase, so(1+i)2
hasmagnitude 2andphase
2:seeFigure 8.10. Raising 1+itothethird power
involvesmultiplying themagnitudes 2andp
2andadding thephases
4and
2.
This givesmagnitude 2p
2andphase3
4.SeeFigure 8.11 forapicture ofthe
number (1+i)3.Raising 1+itothefourth powerinvolvessquaring (1+i)2,sothe
magnitude 2issquared andthephase
2isdoubled, which givesmagnitude 4and
phase.Translating allofthisback intovector sum notation, weget(1+i)2=2i,
(1+i)3= 2+2i,and(1+i)4= 4.And sure enough, theHask elllibrary
Comple x.hsconﬁrms these ﬁndings:
Complex> (1:+1)^2
0.0:+2.0
Complex> (1:+1)^3
(-2.0):+2.0
Complex> (1:+1)^4
(-4.0):+0.0
Similarly ,weseethatmultiplying iand iinvolvesmultiplying themagnitudes
1andadding thephases
2and3
2,with result thenumber with magnitude 1and
phase 2=0,i.e.,thenumber 1.Here istheHask ellconﬁrmation:
Complex> (0:+1)*(0:+(-1))
1.0:+0.0
Exer cise8.29 Youareencouraged tofamiliarize yourself further with comple x
numbers bychecking thefollo wing bymeans ofpictures:
1.Re(z)=1
2(z+z).
2.Im(z)=1
2i(z z).
3.tan(arg(z))=Im(z)
Re(z).
4.R\'
r\=R
r\(' ).
5.arg(z1
z2)=arg(z1) arg(z2).
6.arg(1
z)= arg(z).
Exer cise8.30 1.Useinduction onntoproveDeMoivr e’sformula forn2N:
(cos(')+isin('))n=cos(n')+isin(n'):
Drawapicture toseewhat ishappening!
8.11.FURTHERREADING 329
2.ProveDeMoivr e’sformula forexponents inZbyusing theprevious item,
plus:
(cos(')+isin(')) m=1
(cos(')+isin('))m:
8.11 Further Reading
Aclassic overvie woftheideas andmethods ofmathematics, beautifully written,
andabook everyone with aninterest inmathematics should possess andread is
Courant andRobbins [CR78, CrbIS96 ].Here ispraise forthisbook byAlbert
Einstein:
Alucid representation ofthefundamental concepts andmethods of
thewhole ﬁeld ofmathematics. Itisaneasily understandable intro-
duction forthelayman andhelps togivethemathematical student a
general viewofthebasic principles andmethods.
Another beautiful book ofnumbers is[CG96 ].Fornumber theory anditshistory
see[Ore88 ].
330 CHAPTER 8.WORKING WITHNUMBERS
Chapter9
Polynomials
Preview
Polynomials orintegralrational functions arefunctions thatcanberepresented by
aﬁnite number ofadditions, subtractions, andmultiplications with oneindepen-
dent variable. The closed forms thatwefound andprovedbyinduction forthe
sums ofevens,sums ofodds, sums ofsquares, sums ofcubes, andsoon,inChap-
ter7,areallpolynomial functions. Inthischapter wewillﬁrststudy theprocess
ofautomating thesearch forpolynomial functions thatproduce givensequences
ofintegers. Next,weestablish theconnection with thebinomial theorem, weim-
plement adatatype forthepolynomials themselv es,andweusethisdatatype for
thestudy ofcombinatorial problems.
modulePOL
where
importPolynomials
331
332 CHAPTER 9.POLYNOMIALS
9.1 Differ ence Analysis ofPolynomial Sequences
Supposefangisasequence ofnatural numbers, i.e.,f=n:a nisafunction in
N!N.Thefunctionfisapolynomial function ofdegreekiffcanbepresented
intheform
cknk+ck 1nk 1++c1n+c0;
withci2Qandck6=0.
Example 9.1Thesequence
[1;4;11;22;37;56;79;106;137;172;211;254;301;352;:::]
isgivenbythepolynomial functionf=n:(2n2+n+1).This isafunction of
thesecond degree.
Here istheHask ellcheck:
Prelude> take15(map(\n->2*n^2+n+1)[0..])
[1,4,11,22,37,56,79,106,137,1 72,211,254,301,352,407]
Consider thedifference sequence givenbythefunction
d(f)=n:a n+1 an:
TheHask ellimplementation looks likethis:
difs::[Integer] ->[Integer]
difs[]=[]
difs[n]=[]
difs(n:m:ks) =m-n:difs(m:ks)
This gives:
POL>difs[1,4,11,22,37,56,79,106,137, 172,211,254,301]
[3,7,11,15,19,23,27,31,35,39, 43,47]
9.1.DIFFERENCE ANALYSISOFPOLYNOMIAL SEQUENCES 333
The difference functiond(f)ofapolynomial functionfisitself apolynomial
function. E.g., iff=n:(2n2+n+1),then:
d(f)=n:(2(n+1)2+(n+1)+1 (2n2+n+1)
=n:4n+3:
TheHask ellcheck:
POL>take15(map(\n->4*n+3)[0..])
[3,7,11,15,19,23,27,31,35,39, 43,47,51,55,59]
POL>take15(difs(map(\n->2*n^2+n+1)[0..]))
[3,7,11,15,19,23,27,31,35,39, 43,47,51,55,59]
Proposition 9.2Iffisapolynomial function ofdegreekthend(f)isapolyno-
mial function ofdegreek 1.
Proof.Supposef(n)isgivenby
cknk+ck 1nk 1++c1n+c0:
Thend(f)(n)isgivenby
ck(n+1)k+ck 1(n+1)k 1++c1(n+1)+c0
 (cknk+ck 1nk 1++c1n+c0):
Itisnothard toseethatf(n+1)hastheformcknk+g(n),withgapolynomial
ofdegreek 1.Sincef(n)alsoisoftheformcknk+h(n),withhapolynomial
ofdegreek 1,d(f)(n)hastheformg(n) h(n),sod(f)isitself apolynomial
ofdegreek 1.
Itfollo wsfrom Proposition 9.2thatiffisapolynomial function ofdegreek,then
dk(f)willbeaconstant function (apolynomial function ofdegree0).
Here isaconcrete example ofcomputing difference sequences until wehitata
constant sequence:
-12 -11 6 45 112 213 354 541
1 17 39 67 101 141 187
16 22 28 34 40 46
6 6 6 6 6
Weﬁnd thatthesequence ofthird differences isconstant, which means thatthe
form oftheoriginal sequence isapolynomial ofdegree3.Toﬁndthenextnumber
334 CHAPTER 9.POLYNOMIALS
inthesequence, justtakethesum ofthelastelements oftherows. This gives
6+46+187+541=780.
Charles Babbage (1791–1871), oneofthefounding fathers ofcomputer science,
used these observ ations inthedesign ofhisdifference engine .Wewill givea
Hask ellversion ofthemachine.
According toProposition 9.2,ifagiveninput listhasapolynomial form ofdegree
k,then afterksteps oftaking differences thelistisreduced toaconstant list:
POL>difs[-12,-11,6,45,112,213,354,54 1,780,1077]
[1,17,39,67,101,141,187,239,2 97]
POL>difs[1,17,39,67,101,141,187,239, 297]
[16,22,28,34,40,46,52,58]
POL>difs[16,22,28,34,40,46,52,58]
[6,6,6,6,6,6,6]
Thefollo wing function keeps generating difference lists until thedifferences get
constant:
difLists ::[[Integer]]->[[Integer]]
difLists []=[]
difLists lists@(xs:xss) =
ifconstant xsthenlistselsedifLists ((difsxs):lists)
where
constant (n:m:ms) =all(==n)(m:ms)
constant _ =error"lackofdataornotapolynomial fct"
This givesthelists ofallthedifference lists thatwere generated from theinitial
sequence, with theconstant listupfront.
POL>difLists [[-12,-11,6,45,112,213,354,5 41,780,1077]]
[[6,6,6,6,6,6,6],
[16,22,28,34,40,46,52,58],
[1,17,39,67,101,141,187,239, 297],
[-12,-11,6,45,112,213,354,54 1,780,1077]]
The listofdifferences canbeused togenerate thenextelement oftheoriginal
sequence: justaddthelastelements ofallthedifference liststothelastelement of
theoriginal sequence. Inourexample case, togetthenextelement ofthelist
[ 12; 11;6;45;112;213;354;541;780;1077]
9.1.DIFFERENCE ANALYSISOFPOLYNOMIAL SEQUENCES 335
addthelistoflastelements ofthedifference lists (including theoriginal list):
6+58+297+1077=1438 .Toseethatthisisindeed thenextelement, note that
thedifference of1438 and1077 is361,thedifference of361and297is64,and
thedifference of64and58is6,sothenumber 1438 ‘ﬁts’ thedifference analysis.
Thefollo wing function gets thelistoflastelements thatweneed (inourexample
case, thelist[6,58,297,1077] ):
genDifs ::[Integer] ->[Integer]
genDifs xs=maplast(difLists [xs])
Anewlistoflastelements ofdifference listsiscomputed from thecurrent oneby
keeping theconstant elementd1,andreplacing eachdi+1bydi+di+1.
nextD::[Integer] ->[Integer]
nextD[]=error"nodata"
nextD[n]=[n]
nextD(n:m:ks) =n:nextD(n+m:ks)
Thenextelement oftheoriginal sequence isgivenbythelastelement ofthenew
listoflastelements ofdifference lists:
next::[Integer] ->Integer
next=last.nextD.genDifs
Inourexample case, thisgives:
POL>next[-12,-11,6,45,112,213,354,54 1,780,1077]
1438
Allthiscannowbewrapped upinafunction thatcontinues anylistofpolynomial
form, provided thatenough initial elements aregivenasdata:
336 CHAPTER 9.POLYNOMIALS
continue ::[Integer] ->[Integer]
continue xs=maplast(iterate nextDdifferences)
where
differences =nextD(genDifs xs)
This uses thepredeﬁned Hask ellfunctioniterate ,thatisgivenby:
iterate ::(a->a)->a->[a]
iterate fx =x:iterate f(fx)
This iswhat weget:
POL>take20(continue [-12,-11,6,45,112,213,354,54 1,780,1077])
[1438,1869,2376,2965,3642,441 3,5284,6261,7350,8557,9888,11349,
12946,14685,16572,18613,20814 ,23181,25720,28437]
Ifagivenlistisgenerated byapolynomial, then thedegree ofthepolynomial can
becomputed bydifference analysis, asfollo ws:
degree::[Integer] ->Int
degreexs=length(difLists [xs])-1
The difference engine issmart enough tobeable tocontinue alistofsums of
squares, oralistofsums ofcubes:
POL>take10(continue [1,5,14,30,55])
[91,140,204,285,385,506,650,8 19,1015,1240]
POL>take10(continue [1,9,36,100,225,441])
[784,1296,2025,3025,4356,6084 ,8281,11025,14400,18496]
Exer cise9.3What continuation doyougetfor[3,7,17,39,79,14 3]?Canyou
reconstruct thepolynomial function thatwasused togenerate thesequence?
9.2.GAUSSIAN ELIMINATION 337
Difference analysis yields analgorithm forcontinuing anyﬁnite sequence with a
polynomial form. Isitalsopossible togiveanalgorithm forﬁnding theform? This
would solvetheproblem ofhowtoguess theclosed forms forthefunctions that
calculate sums ofsquares, sums ofcubes, andsoon.Theanswer is‘yes’, andthe
method isGaussian elimination.
9.2 Gaussian Elimination
Ifweknowthat asequencea0;a1;a2;a3;:::hasapolynomial form ofdegree
3,then weknowthat theform isa+bx+cx2+dx3(listing thecoefﬁcients
inincreasing order). This means thatwecanﬁndtheform ofthepolynomial by
solving thefollo wing quadruple oflinear equations ina;b;c;d:
a=a0
a+b+c+d=a1
a+2b+4c+8d=a2
a+3b+9c+27d=a3
Since thisisasetoffour linear equations infour unkno wns, where theequations
arelinearly independent (none ofthem canbewritten asamultiple ofanyofthe
others), thiscanbesolvedbyeliminating theunkno wnsonebyone.
Example 9.4Find theappropriate setofequations forthesequence
[ 7; 2;15;50;109;198;323]
andsolveit.
Difference analysis yields thatthesequence isgenerated byapolynomial ofthe
third degree, sothesequence leads tothefollo wing setofequations:
a= 7
a+b+c+d= 2
a+2b+4c+8d=15
a+3b+9c+27d=50
Eliminating aandrewriting gives:
b+c+d=5
2b+4c+8d=22
3b+9c+27d=57
338 CHAPTER 9.POLYNOMIALS
Next,eliminate thesummand with factordfrom thesecond andthird equation.
Elimination from thesecond equation isdone bysubtracting thesecond equation
from the8-fold product oftheﬁrst equation. This gives6b+4c=18,which
canbesimpliﬁed to3b+2c=9.Elimination from thethird equation isdone
bysubtracting thethird equation from the27-fold product oftheﬁrst, with result
24b+18c=78.Wegetthefollo wing pairofequations:
3b+2c=9
24b+18c=78
Elimination ofcfrom thispair isdone bysubtracting thesecond equation from
the9-fold product oftheﬁrst. This gives3b=3,whenceb=1.Together with
3b+2c=9wegetc=3.Together withb+c+d=5wegetd=1.Thus, the
polynomial wearelooking forhastheformn:(n3+3n2+n 7).
Exer cise9.5Find theappropriate setofequations forthesequence
[13;21;35;55;81;113;151]
andsolveit.
Solving sets oflinear equations canbeviewed asmanipulation ofmatrices of
coefﬁcients. E.g., thequadruple oflinear equations ina;b;c;dforapolynomial of
thethird degree givesthefollo wing matrix:
0
BB@1000a0
1111a1
1248a2
13927a31
CCA
Tosolvethis, wetransform ittoanequivalent matrix inso-called echelon form or
lefttriangular form ,i.e.,amatrix oftheform:
0
BB@a00a01a02a03b0
0a11a12a13b1
00a22a23b2
000a33b31
CCA
From thisform, compute thevalue ofvariabledfrom thelastrow,nexteliminate
thisvariable from thethird row,andﬁnd thevalue ofc.Then usethevalues of
dandctoﬁndthevalue ofbfrom thesecond row,andﬁnally ,usethevalues of
b;c;dtoﬁndthevalue ofafrom theﬁrstrow.
Tohandle matrices, thefollo wing type declarations areconvenient.
9.2.GAUSSIAN ELIMINATION 339
typeMatrix=[Row]
typeRow=[Integer]
Itisalso convenient tobeable tohavefunctions forthenumbers ofrowsand
columns ofamatrix.
rows,cols::Matrix->Int
rowsm=lengthm
colsm|m==[]=0
|otherwise =length(headm)
ThefunctiongenMatrix produces theappropriate matrix foralistgenerated bya
polynomial:
genMatrix ::[Integer] ->Matrix
genMatrix xs=zipWith (++)(genMd)[[x]|x<-xs]
where
d=degreexs
genMn=[[(toInteger x^m)|m<-[0..n]]|x<-[0..n]]
zipWith ispredeﬁned intheHask ellprelude asfollo ws:
zipWith ::(a->b->c) ->[a]->[b]->[c]
zipWith z(a:as)(b:bs) =zab:zipWith zasbs
zipWith ___ =[]
Inapicture:
[(zx0y0);(zx1y1);:::;(zxnyn);*[xn+1;xn+2;:::
[yn+1;yn+2;:::
340 CHAPTER 9.POLYNOMIALS
genMatrix gives,e.g.:
POL>genMatrix [-7,-2,15,50,109,198,323]
[[1,0,0,0,-7],[1,1,1,1,-2],[1 ,2,4,8,15],[1,3,9,27,50]]
Theprocess oftransforming thematrix toechelon form isdone byso-called for-
wardelimination :useonerowtoeliminate theﬁrstcoefﬁcient from theother rows
bymeans ofthefollo wing process ofadjustment (theﬁrstrowisused toadjust the
second one):
adjustWith ::Row->Row->Row
adjustWith (m:ms)(n:ns)=zipWith (-)(map(n*)ms)(map(m*)ns)
Totransform amatrix intoechelon form, proceed asfollo ws:
1.Ifthenumber ofrowsorthenumber ofcolumns ofthematrix is0,then the
matrix isalready inechelon form.
2.Ifeveryrowofrsbegins with a0then theechelon form ofrscanbefound
byputting 0’sinfront oftheechelon form ofmaptailrs.
3.Ifrshasrowsthatdonotstart with a0,then taketheﬁrstoneofthese,piv,
anduseittoeliminate theleading coefﬁcients from theother rows. This
givesamatrix oftheform
0
BBBBBBB@a00a01a02a03b0
0a11a12a13b1
0a21a22a23b2
0a31a32a33b3
..................
0an1an2an3bn1
CCCCCCCA
where theﬁrstrowisthepivotrow.Allthatremains tobedone inthiscase
istoputthefollo wing submatrix inechelon form:
0
BBBBB@a11a12a13b1
a21a22a23b2
a31a32a33b3
...............
an1an2an3bn1
CCCCCA
9.2.GAUSSIAN ELIMINATION 341
Thecode forthiscanbefound intheHask elldemo ﬁleMatrix.hs (part oftheHugs
system):
echelon ::Matrix->Matrix
echelon rs
|nullrs||null(headrs)=rs
|nullrs2 =map(0:)(echelon (maptailrs))
|otherwise =piv:map(0:)(echelon rs')
wherers' =map(adjustWith piv)(rs1++rs3)
(rs1,rs2) =spanleadZero rs
leadZero (n:_)=n==0
(piv:rs3) =rs2
Here isanexample:
POL>echelon [[1,0,0,0,-7],[1,1,1,1,-2],[1 ,2,4,8,15],[1,3,9,27,50]]
[[1,0,0,0,-7],[0,-1,-1,-1,-5] ,[0,0,-2,-6,-12],[0,0,0,-12,-12]]
Backw ardGaussian elimination, orcomputing thevalues ofthevariables from a
matrix inechelon form, isdone bycomputing thevalue ofthevariable inthelast
row,eliminate thatvariable from theother rowstogetasmaller matrix inechelon
form, andrepeating that process until thevalues ofallvariables arefound. If
weknowthatax=c(wemay assumea6=0),andthecoordinate ofxisthe
coordinateain=bofai1jjain 1jainjd,then wecaneliminate this
coordinate byreplacingai1jjain 1jainjdwith thefollo wing:
aai1jjaain 1jad bc:
Itdoes makesense toﬁrst reducex=c=atoitssimplest form bydividing out
common factors ofcanda.The implementation ofrational numbers does this
forusifweexpressxasanumber oftypeRational (see Section 8.6forfurther
details). Note thatanelimination steptransforms amatrix inechelon form, minus
itslastrow,intoasmaller matrix inechelon form. Here istheimplementation:
342 CHAPTER 9.POLYNOMIALS
eliminate ::Rational ->Matrix->Matrix
eliminate prs=map(simplify ca)rs
where
c=numerator p
a=denominator p
simplify carow=init(initrow')++[a*d-b*c]
where
d=lastrow
b=last(initrow)
row'=map(*a)row
Theimplementation ofbackw ardsubstitution runs likethis:
backsubst ::Matrix->[Rational]
backsubst rs=backsubst' rs[]
where
backsubst' []ps=ps
backsubst' rsps=backsubst' rs'(p:ps)
where
a=(lastrs)!!((colsrs)-2)
c=(lastrs)!!((colsrs)-1)
p=c%a
rs'=eliminate p(initrs)
Weget:
POL>backsubst [[1,0,0,0,-7],[0,-1,-1 ,-1,-5],[0,0,-2,-6,-12],[0,0,0,-12,-12]]
[-7%1,1%1,3%1,1%1]
Touseallthistoanalyze apolynomial sequence, generate theappropriate matrix
(appropriate forthedegree ofthepolynomial thatwegetfrom difference analysis
ofthesequence), putitinechelon form, andcompute thevalues oftheunkno wns
bybackw ardsubstitution.
solveSeq ::[Integer] ->[Rational]
solveSeq =backsubst .echelon .genMatrix
9.2.GAUSSIAN ELIMINATION 343
Recall thatthesequence ofsums ofsquares starts asfollo ws:0;1;5;14;30;:::.
Solving thissequence withsolveSeq gives:
POL>solveSeq [0,1,5,14,30]
[0%1,1%6,1%2,1%3]
This givestheform
1
3n3+1
2n2+1
6n=2n3+3n2+n
6=n(n+1)(2n+1)
6:
Here isaHask ellcheck (theuseofthe/operator creates alistofFractional s):
POL>map(\n->(1/3)*n^3 +(1/2)*n^2 +(1/6)*n) [0..4]
[0.0,1.0,5.0,14.0,30.0]
Similarly ,0;1;9;36;100;225isthestart ofthesequence ofsums ofcubes. Solving
thiswithsolveSeq gives:
POL>solveSeq [0,1,9,36,100,225]
[0%1,0%1,1%4,1%2,1%4]
This givestheform
1
4n4+1
2n3+1
4n2=n4+2n3+n2
4=n2(n+1)2
4=n(n+1)
22
:
Therunning example from theprevious section issolvedasfollo ws:
POL>solveSeq [-12,-11,6,45,112,213,354,54 1,780,1077]
[-12%1,-5%1,5%1,1%1]
Thus, thesequence hastheformn3+5n2 5n 12.
Before welook attheconﬁrmation, letusnote thatwearenowinfactusing rep-
resentations ofpolynomial functions aslistsoftheir coefﬁcients, starting from the
constant coefﬁcient. Itiseasy toimplement aconversion from these representa-
tions tothepolynomial functions thattheyrepresent:
p2fct::Numa=>[a]->a->a
p2fct[]x=0
p2fct(a:as)x=a+(x*p2fctasx)
Wecanusethisintheconﬁrmations, asfollo ws:
344 CHAPTER 9.POLYNOMIALS
POL>[n^3+5*n^2-5*n-12|n<-[0..9]]
[-12,-11,6,45,112,213,354,541 ,780,1077]
POL>map(p2fct[-12,-5,5,1]) [0..9]
[-12,-11,6,45,112,213,354,541 ,780,1077]
Finally ,here istheautomated solution ofExercise 9.3:
POL>solveSeq [3,7,17,39,79]
[3%1,3%1,0%1,1%1]
This represents theformn3+3n+3.
Exer cise9.6Suppose youwanttoﬁnd aclosed form forthenumber ofpieces
you cancutapieinto bymakingnstraight cuts. After some experimentation
itbecomes clear thattoobtain themaximum number ofpieces nocutshould be
parallel toaprevious cut,andnocutshould pass through anintersection point of
previous cuts. Under these conditions youﬁnd thatthen-thcutcanbemade to
intersect allthen 1previous cuts, andcanthereby made tosplitnoftheold
regions. This givestherecurrenceC0=1andCn=Cn 1+n,which yields the
sequence 1;2;4;7;11;:::Next,youusesolveSeq toobtain:
POL>solveSeq [1,2,4,7,11]
[1%1,1%2,1%2]
Youconclude thatncutscandivide apieinto1
2n2+1
2n+1=n(n+1)
2+1pieces.
Isthere stillneed foraninducti veproof toshowthatthisanswer iscorrect?
9.3 Polynomials andtheBinomial Theor em
Inthissection wewillestablish aconnection between polynomials andlists, namely
listsofcoefﬁcients ofapolynomial. Letf(x)beapolynomial ofdegreen,i.e.,let
f(x)beafunction
f(x)=anxn+an 1xn 1++a1x+a0;
withaiconstants, andan6=0.Letcbeaconstant andconsider thecasex=y+c.
Substitution ofy+cforxinf(x)givesanewpolynomial ofdegreeniny,say
f(x)=f(y+c)=bnyn+bn 1yn 1++b1y+b0:
9.3.POLYNOMIALS ANDTHEBINOMIAL THEOREM 345
a0=0;
(af(x))0=af0(x);
(xn)0=nxn 1;
(f(x)g(x))0=f0(x)g0(x);
(f(x)g(x))0=f0(x)g(x)+f(x)g0(x)b;
(f(g(x)))0=g0(x)f0(g(x)):
Figure 9.1:Differentiation Rules.
Toconsider anexample, takef(x)=3x4 x+2,andletc= 1.Substituting
y+cforxweget:
f(x)=f(y+c)=f(y 1)
=3(y 1)4 (y 1)+2
=(3y4 12y3+18y2 12y+3) (y 1)+2
=3y4 12y3+18y2 13y+6:
Wewillseeshortly thatthecoefﬁcientsbicanbecomputed inaverysimple way.
Substitution ofx cforyininf(y+c)gives
f(x)=bn(x c)n+bn 1(x c)n 1++b1(x c)+b0:
Calculation off0(x);f00(x);:::;f(n)(x)(theﬁrst, second, ...,n-thderivativeof
f),isdone with thefamiliar rules ofFigure 9.1.1Inparticular ,thisgives(b(x 
c)k)0=kb(x c)k 1,andweget:
f0(x)=b1+2b2(x c)++nbn(x c)n 1
f00(x)=2b2+32b3(x c)++n(n 1)bn(x c)n 2
...
f(n)(x)=n(n 1)(n 2)32bn:
1Iftheserulesareunfamiliartoyou,orifyouneedtobrushupyourknowledgeofanalysis, you
shouldconsultabooklike[Bry93].
346 CHAPTER 9.POLYNOMIALS
Substitution ofx=cgives:
f(c)=b0;f0(c)=b1;f00(c)=2b2;:::;f(n)(c)=n!bn:
This yields thefollo wing instruction forcalculating thebk:
b0=f(c);b1=f0(c);b2=f00(c)
2;:::;bn=f(n)(c)
n!:
Ingeneral:
bk=f(k)(c)
k!:
Applying thistotheexamplef(x)=3x4 x+2,withc= 1,weseethat
b0=f( 1)=3( 1)4+1+2=6,b1=f0( 1)=12( 1)3 1= 13,
b2=f00( 1)
2=36( 1)2
2=18,b3=f(3)( 1)
6= 72
6= 12,b4=f(4)( 1)
24=3.
Another example istheexpansion of(z+1)n.Using thecalculation method with
derivatives,weget,forc=0:
f(z)=(z+1)n=bnzn+bn 1zn 1++b1z+b0;
with thefollo wing derivatives:
f0(z)=n(z+1)n 1;f00(z)=n(n 1)(z+1)n 2;:::;f(n)(z)=n!:
Substituting z=0thisgives:
b0=1;b1=n;b2=n(n 1)
2;;bk=n(n 1)(n k+1)
k!;;bn=n!
n!=1:
Thegeneral coefﬁcientbkhastheform
bk=n(n 1)(n k+1)
k!=n(n 1)(n k+1)
k!(n k)!
(n k)!
=n!
k!(n k)!:
Deﬁne: n
k
:=n!
k!(n k)!:
Pronounce n
k
as‘nchoosek’or‘noverk’.Wehavederived:
Theor em9.7(Newton’ sbinomial theor em)
(z+1)n=nX
k=0n
k
zk:
9.3.POLYNOMIALS ANDTHEBINOMIAL THEOREM 347
IfAisasetofnobjects, then there are n
k
waystopick asubsetBfromAwith
jBj=k.Thus, n
k
isalso thenumber ofk-sized subsets ofann-sized set. To
seewhy thisisso,note thatthenumber ofk-sequences pickedfromA,without
repetitions, equals
n(n 1)(n k+1);
forthere arenwaystopick theﬁrstelement inthesequence,n 1waystopick
thesecond element inthesequence, ...,andn (k 1)waystopick thek-th
element inthesequence. Thenumbern(n 1)(n k+1)isequal to
n!
(n k)!.
Forpickingk-sized subsets fromA,order does notmatter .There arek!ways
ofarranging sequences ofsizekwithout repetition. These areallequivalent. This
givesn!
k!(n k)!forthenumber ofk-sized subsets ofasetofsizen.This connection
explains thephrasing ‘nchoosek’.
Note thefollo wing:
n
0
=1;n
1
=n;n
2
=n(n 1)
2;n
3
=n(n 1)(n 2)
6:
Here isastraightforw ardimplementation of n
k
.
choosenk=(product [(n-k+1)..n]) `div`(product [1..k])
Themore general version ofNewton’ sbinomial theorem runs:
Theor em9.8(Newton’ sbinomial theor em,general version)
(x+y)n=nX
k=0n
k
xkyn k:
Note: abinomial isthesum oftwoterms, so(x+y)isabinomial.
Proof: Togetthisfrom thespecial case(z+1)n=Pn
k=0 n
k
zkderivedabove,
setz=x
ytoget(x
y+1)n=Pn
k=0 n
kxk
yk,andmultiply byyn:
(x+y)n=x
y+1n
yn
= nX
k=0n
kxk
yk!
yn=nX
k=0n
kxkyn
yk=nX
k=0n
k
xkyn k:
348 CHAPTER 9.POLYNOMIALS
Because oftheir useinthebinomial theorem, thenumbers n
k
arecalled binomial
coefﬁcients .What thebinomial theorem givesusis:
(x+y)0=1x0y0
(x+y)1=1x1y0+1x0y1
(x+y)2=1x2y0+2x1y1+1x0y2
(x+y)3=1x3y0+3x2y1+3x1y2+1x0y3
(x+y)4=1x4y0+4x3y1+6x2y2+4x1y3+1x0y4
(x+y)5=1x5y0+5x4y1+10x3y2+10x2y3+5x1y4+1x0y5
...
Toseehowthispattern arises, look atwhat happens when weraisex+ytothe
n-thpowerbyperforming thenmultiplication steps toworkouttheproduct of
(x+y)(x+y)(x+y)|{z}
nfactors:
x+y
x+y
x2+xy+xy+y2
x+y
x3+x2y+x2y+x2y+xy2+xy2+xy2+y3
x+y
...
Everyterm inthisexpansion isitself theproduct ofx-factors andy-factors, with
atotal number offactors alwaysn,sothateach term hastheformxkyn k.Every
binomial (x+y)in(x+n)neither contrib utesanx-factor oray-factor toxkyn k.
Thenumber ofwaystogetatthetermxkyn kequals thenumber ofk-sized sub-
setsfrom asetofsizen(pick anysubset ofkbinomials from thesetofnbinomial
factors). Thus, thisterm occurs exactly n
k
times.
Wecanarrange thebinomial coefﬁcients inthewell-kno wntriangle ofPascal.
 0
0
 1
0 1
1
 2
0 2
1 2
2
 3
0 3
1 3
2 3
3
 4
0 4
1 4
2 4
3 4
4
...
9.3.POLYNOMIALS ANDTHEBINOMIAL THEOREM 349
Working thisout,weget:
1
1 1
1 2 1
1 3 3 1
1 4 6 4 1
...
Studying thepattern ofPascal’ striangle, weseethatthatitisbuiltaccording tothe
follo wing law:n
k
=n 1
k 1
+n 1
k
:
This iscalled theaddition lawforbinomial coefﬁcients. Toseethatthislawis
correct, consider asetAofsizen,andsingle outoneofitsobjects,a.Tocount
thenumber ofwaysofpicking ak-sized subsetBfromA,consider thetwocases
(i)a2Band(ii)a=2B.Thenumber ofwaysofpicking ak-sized subsetBfrom
Awitha2Bisequal tothenumber ofwaysofpicking ak 1-sized subset from
A fag,i.e., n 1
k 1
.The number ofwaysofpicking ak-sized subsetBfrom
Awitha=2Bisequal tothenumber ofwaysofpicking ak-sized subset from
A fag,i.e., n 1
k
.Thus, there are n 1
k 1
+ n 1
k
waysofpicking ak-sized
subset from ann-sized set.
Itisofcourse also possible toprovetheaddition lawdirectly from thedeﬁnition
of n
k
.Assumek>0.Then:
n 1
k 1
+n 1
k
=(n 1)!
(k 1)!(n k)!+(n 1)!
k!(n 1 k)!
=(n 1)!k
k!(n k)!+(n 1)!(n k)
k!(n k)!
=(n 1)!n
k!(n k)!=n!
k!(n k)!=n
k
:
Wecanusetheaddition lawforanimplementation of n
k
.Inaccordance with
theinterpretation of n
k
asthenumber ofk-sized subset ofann-sized set,we
willput n
0
=1(there isjustonewaytopick a0-sized subset from anyset)and n
k
=0forn<k(nowaystopick ak-sized subset from asetthathasless
thankelements). Afurther look atPascal’ striangle revealsthefollo wing lawof
symmetry:n
k
=n
n k
:
350 CHAPTER 9.POLYNOMIALS
This makessense under theinterpretation of n
k
asthenumber ofk-sized subsets
ofasetofsizen,forthenumber ofk-sized subsets equals thenumber oftheir
complements. There isjustonewaytopick ann-sized subset from ann-sized set
(pick thewhole set), so n
n
=1.This leads tothefollo wing implementation:
choose' n0=1
choose' nk|n<k=0
|n==k=1
|otherwise =
choose' (n-1)(k-1)+(choose' (n-1)(k))
Exer cise9.9Which implementation ismore efﬁcient,choose orchoose' ?Why?
Exer cise9.10 Derivethesymmetry lawforbinomial coefﬁcients directly from
thedeﬁnition.
Wewill nowgiveaninducti veproof ofNewton’ sbinomial theorem. The proof
uses theaddition lawforbinomials, intheform n
k 1
+ n
k
= n+1
k
.
Theor em9.11 (Newton’ sbinomial theor emagain)
(x+y)n=nX
k=0n
k
xkyn k:
Proof.Induction onn.
Basis:
(x+y)0=1=0
0
x0y0=0X
k=00
k
xky0 k:
Induction step: Assume
(x+y)n=nX
k=0n
k
xkyn k:
9.3.POLYNOMIALS ANDTHEBINOMIAL THEOREM 351
Then:
(x+y)n+1=(x+y)(x+y)n
ih=(x+y)nX
k=0n
k
xkyn k
=xnX
k=0n
k
xkyn k+ynX
k=0n
k
xkyn k
=nX
k=0n
k
xk+1yn k+nX
k=0n
k
xky(n+1) k
=xn+1+n 1X
k=0n
k
xk+1yn k+nX
k=1n
k
xky(n+1) k+yn+1
=xn+1+nX
k=1n
k 1
xky(n+1) k+nX
k=1n
k
xky(n+1) k+yn+1
=xn+1+nX
k=1n
k 1
xky(n+1) k+n
k
xky(n+1) k
+yn+1
add=xn+1+nX
k=1n+1
k
xky(n+1) k+yn+1
=n+1X
k=1n+1
k
xky(n+1) k+yn+1=n+1X
k=0n+1
k
xky(n+1) k:
Exer cise9.12 Showfrom thedeﬁnition thatif0<k6nthen:
n
k
=n
kn 1
k 1
:
The lawfrom exercise 9.12 istheso-called absorption lawforbinomial coefﬁ-
cients. Itallowsforanalternati veimplementation ofafunction forbinomial coef-
ﬁcients, forwehavethefollo wing recursion:
n
0
=1;n
k
=0forn<k;n
k
=n
kn 1
k 1
for0<k6n:
Thus wegetamore efﬁcient function for n
k
:
352 CHAPTER 9.POLYNOMIALS
binomn0=1
binomnk|n<k=0
|otherwise =(n*binom(n-1)(k-1))`div`k
Exer cise9.13 Use acombinatorial argument (anargument interms ofsizes the
subsets ofaset)toproveNewton’ slaw:
n
m
m
k
=n
k
n k
m k
:
Exer cise9.14 Prove:
n
n
+n+1
n
+n+2
n
++n+k
n
=n+k+1
n+1
:
9.4 Polynomials forCombinatorial Reasoning
Toimplement thepolynomial functions inavariablez,wewillrepresent apoly-
nomial
f(z)=f0+f1z+f2z2++fn 1zn 1+fnzn
asalistofitscoefﬁcients:
[f0;f1;:::;fn]:
Aswehaveseen, thefunctionp2fct maps such lists tothecorresponding func-
tions.
The constant zero polynomial hastheformf(z)=0.Ingeneral wewill avoid
trailing zeros inthecoefﬁcient list,i.e.,wewillassume thatifn>0thenfn6=0.
Theconstant functionz:cwillgetrepresented as[c],sothere isamap from in-
tegers topolynomial representations, givenbyc:[c].Wewillalsoallowrationals
ascoefﬁcients, tothere isalsoamap from rationals topolynomial representations,
givenbyr:[r].
Weneed some conventions forswitching back andforth between apolynomial and
itslistofcoefﬁcients. Iff(z)isapolynomial, then weusefforitscoefﬁcient list.
Ifthislistofcoefﬁcients isnon-empty then, asbefore, wewillindicate thetailoff
9.4.POLYNOMIALS FORCOMBIN ATORIALREASONING 353
asf.Thus, iff=[f0;f1;:::;fn],thenf=[f1;:::;fn],andwehavetheidentity
f=f0:f.Moreo ver,iff(z)=f0+f1z+f2z2++fn 1zn 1+fnzn,then
weusef(z)forf1+f2z++fn 1zn 2+fnzn 1.This convention yields the
follo wing important equality:
f(z)=f0+zf(z):
Theidentity functionz:zwillgetrepresented as[0;1],forthisfunction isofthe
formz:f0+f1z,withf0=0andf1=1.This gives:
z::Numa=>[a]
z=[0,1]
Tonegate apolynomial, simply negate each term initsterm expansion. Forif
f(z)=f0+f1z+f2z2+,then f(z)= f0 f1z f2z2 .This gives:
negate[] =[]
negate(f:fs) =(negate f):(negate fs)
Toaddtwopolynomials f(z)andg(z),justaddtheir coefﬁcients, forclearly ,if
f(z)=f0+f1z+f2z2++fkzkandg(z)=b0+b1z+g2z2+=gmzm,
then
f(z)+g(z)=(f0+g0)+(f1+g1)z+(f2+g2)z2+
This translates intoHask ellasfollo ws:
fs+[]=fs
[]+gs=gs
(f:fs)+(g:gs)=f+g:fs+gs
Note thatthisuses overloading ofthe+sign: inf+gwehaveaddition ofnumbers,
infs+gs addition ofpolynomial coefﬁcient sequences.
354 CHAPTER 9.POLYNOMIALS
Theproduct off(z)=f0+f1z+f2z2++fkzkandg(z)=g0+g1z+
g2z2++gmzmlooks likethis:
f(z)g(z)=(f0+f1z+f2z2++fkzk)(g0+g1z+g2z2++gmzm)
=f0g0+(f0g1+f1g0)z+(f0g2+f1g1+f2g0)z2+
=f0g0+z(f0g(z)+g0f(z)+zf(z)g(z))
=f0g0+z(f0g(z)+f(z)g(z))
Heref(z)=f1+f2z++fkzk 1andg(z)=g1+g2z++gmzm 1,
i.e.,f(z)andg(z)arethepolynomials thatgetrepresented as[f1;:::;fk]and
[g1;:::;gm],respecti vely.
Iff(z)andg(z)arepolynomials ofdegreek,then foralln6k,inthelistof
coefﬁcients forf(z)g(z),then-thcoefﬁcient hastheformf0gn+f1gn 1++
fn 1g1+fng0.Thelistofcoefﬁcients oftheproduct iscalled theconvolution of
thelistsofcoefﬁcientsfandg.
Multiplying apolynomial byzboils downtoshifting itssequence ofcoefﬁcients
oneplace totheright. This leads tothefollo wing Hask ellimplementation, where
(.*) isanauxiliary multiplication operator formultiplying apolynomial byanu-
merical constant. Note that(*) isoverloaded: f*g multiplies twonumbers, but
fs*(g:gs) multiplies twolistsofcoefﬁcients. Wecannot extend thisoverload-
ingtomultiplication ofnumbers with coefﬁcient sequences, since Hask ellinsists
onoperands ofthesame type for(*).Hence theuseof(.*) .
infixl7.*
(.*)::Numa=>a->[a]->[a]
c.*[]=[]
c.*(f:fs)=c*f:c.*fs
fs*[]=[]
[]*gs=[]
(f:fs)*(g:gs)=f*g:(f.*gs+fs*(g:gs))
Example 9.15 InFigure 9.2thepolynomials aredeclared asadata type inclass
Num.This entails thatallHask elloperations fortypes inthisclass areavailable.
Weget:
POL>(z+1)^0
9.4.POLYNOMIALS FORCOMBIN ATORIALREASONING 355
[1]
POL>(z+1)
[1,1]
POL>(z+1)^2
[1,2,1]
POL>(z+1)^3
[1,3,3,1]
POL>(z+1)^4
[1,4,6,4,1]
POL>(z+1)^5
[1,5,10,10,5,1]
POL>(z+1)^6
[1,6,15,20,15,6,1]
This givesyetanother waytogetatthebinomial coefﬁcients.
Nowsuppose wehaveapolynomialf(z).Weareinterested inthedifference list
ofitscoefﬁcients [f0;f1 f0;f2 f1;:::].Itiseasy toseethatthisdifference list
isthelistofcoefﬁcients ofthepolynomial (1 z)f(z):
f(z);[f0;f1;f2;f3;]
 zf(z);[0; f0; f1; f2;]
(1 z)f(z);[f0;f1 f0;f2 f1;f3 f2;]
This isimplemented bythefollo wing function:
delta::Numa=>[a]->[a]
delta=([1,-1] *)
This gives,forexample:
POL>delta[2,4,6]
[2,2,2,-6]
Note thatthecoefﬁcient ofz4in[2;4;6]is0,sothisiscorrect. Note also thatwe
arenowlooking atdifference listsofcoefﬁcients, notatdifferent listsoftheresult
ofmapping thepolynomial function to[0::],asinSection 9.1.
356 CHAPTER 9.POLYNOMIALS
modulePolynomials
where
infixl7.*
(.*)::Numa=>a->[a]->[a]
c.*[]=[]
c.*(f:fs)=c*f:c.*fs
z::Numa=>[a]
z=[0,1]
instance Numa=>Num[a]where
fromInteger c=[fromInteger c]
negate[] =[]
negate(f:fs) =(negate f):(negate fs)
fs+[]=fs
[]+gs=gs
(f:fs)+(g:gs)=f+g:fs+gs
fs*[]=[]
[]*gs=[]
(f:fs)*(g:gs)=f*g:(f.*gs+fs*(g:gs))
delta::Numa=>[a]->[a]
delta=([1,-1] *)
shift::[a]->[a]
shift=tail
p2fct::Numa=>[a]->a->a
p2fct[]x=0
p2fct(a:as)x=a+(x*p2fctasx)
comp::Numa=>[a]->[a]->[a]
comp_[] =error".."
comp[]_=[]
comp(f:fs)(0:gs)=f:gs*(compfs(0:gs))
comp(f:fs)(g:gs)=([f]+[g]*(compfs(g:gs)))
+(0:gs*(compfs(g:gs)))
deriv::Numa=>[a]->[a]
deriv[]=[]
deriv(f:fs)=deriv1fs1where
deriv1[]_=[]
deriv1(g:gs)n=n*g:deriv1gs(n+1)
Figure 9.2:AModule forPolynomials.
9.4.POLYNOMIALS FORCOMBIN ATORIALREASONING 357
Thecomposition oftwopolynomials f(z)andg(z)isagain apolynomialf(g(z)).
Itisgivenby:
f(z)=f0+f1z+f2z2+f3z3+
f(g(z))=f0+f1g(z)+f2(g(z))2+f3(g(z))3+
Weseefrom this:
f(g(z))=f0+g(z)f(g(z))
This leads immediately tothefollo wing implementation (themodule ofFigure 9.2
hasaslightly more involvedimplementation comp thatgets explained inthenext
chapter ,onpage 389):
comp1::Numa=>[a]->[a]->[a]
comp1_[]=error".."
comp1[]_=[]
comp1(f:fs)gs=[f]+(gs*comp1fsgs)
Example 9.16 Wecanusethistopick anarbitrary layer inPascal’ striangle:
POL>comp1(z^2)(z+1)
[1,2,1]
POL>comp1(z^3)(z+1)
[1,3,3,1]
POL>comp1(z^12)(z+1)
[1,12,66,220,495,792,924,792, 495,220,66,12,1]
Wecanalsouseittogenerate Pascal’ striangle uptoarbitrary depth:
POL>comp1[1,1,1,1,1,1] [[0],[1,1]]
[[1],[1,1],[1,2,1],[1,3,3,1], [1,4,6,4,1],[1,5,10,10,5,1]]
Note thatthisuses thecomposition off(z)=1+z+z2+z3+z4+z5+z6with
g(z)=(y+1)z+0.Theresult ofthisisf(g(z))=1+(y+1)z+(y+1)2z2+
+(y+1)6z6.
Iff(z)=f0+f1z+f2z2++fkzk,thederivativeoff(z)isgivenby(Figure
9.1):
f0(z)=f1+2f2z++kfkzk 1:
358 CHAPTER 9.POLYNOMIALS
This hasastraightforw ardimplementation, asfollo ws:
deriv::Numa=>[a]->[a]
deriv[]=[]
deriv(f:fs)=deriv1fs1where
deriv1[]_=[]
deriv1(g:gs)n=n*g:deriv1gs(n+1)
The close link between binomial coefﬁcients andcombinatorial notions makes
polynomial reasoning averyuseful tool forﬁnding solutions tocombinatorial
problems.
Example 9.17 Howmanywaysarethere ofselecting tenred,blue orwhite mar-
blesfrom avase,insuch awaythatthere areatleast twoofeach color andatmost
ﬁvemarbles havethesame colour? Theanswer isgivenbythecoefﬁcient ofz10
inthefollo wing polynomial:
(z2+z3+z4+z5)3:
This iseasily encoded intoaquery inourimplementation:
POL>([0,0,1,1,1,1]^3) !!10
12
Howmanywaysarethere ofselecting tenred,blue orwhite marbles from avase,
insuch manner thatthere isevennumber ofmarbles ofeach colour:
POL>([1,0,1,0,1,0,1,0,1,0,1]^3) !!10
21
Weassociate coefﬁcient listswith combinatorial problems bysaying that
[f0;f1;f2;:::;fn]
solvesacombinatorial problem iffrgivesthenumber ofsolutions forthatprob-
lem.
Example 9.18 Thepolynomial (1+z)10solvestheproblem ofpickingrelements
from asetof10.Theﬁnite list[1;10;45;120;210;252;210;120;45;10;1]solves
theproblem. Itisimplemented by:
9.5.FURTHERREADING 359
POL>(1+z)^10
[1,10,45,120,210,252,210,120, 45,10,1]
Example 9.19 The list[1;3;6;10;15;18;19;18;15;10;6;3;1]isasolution for
theproblem ofpickingrmarbles from avasecontaining red,white orblue mar-
bles, with amaximum ofﬁveofeach colour .Apolynomial forthisproblem is
(1+z+z2+z3+z4+z5)3.Intheimplementation:
POL>(1+z+z^2+z^3+z^4+z^5)^3
[1,3,6,10,15,21,25,27,27,25,2 1,15,10,6,3,1]
Exer cise9.20 Usepolynomials toﬁndouthowmanywaysthere areofselecting
tenred, blue orwhite marbles from avase, insuch manner thatthenumber of
marbles from each colour isprime.
9.5 Further Reading
Charles Babbage’ sdifference engine isdescribed in[Lar34 ](reprinted in[Bab61 ]),
andbyBabbage himself inhismemoirs [Bab94 ].Thememoirs areveryamusing:
Among thevarious questions which havebeen askedrespecting the
Difference Engine, Iwillmention afewofthemost remarkable: one
gentleman addressed methus: ‘Pray ,MrBabbage, canyouexplain
tomeintwowords what istheprinciple ofyour machine?’ Had the
querist possessed amoderate acquaintance with mathematics Imight
infour words haveconveyedtohimtherequired information byan-
swering, ‘The Method ofDifferences. ’
[...]Ontwooccasions Ihavebeen asked-‘Pray ,MrBabbage, ifyou
putintothemachine wrong ﬁgures, willtheright answers come out?’
Inonecase amember oftheUpper ,andintheother amember ofthe
Lower,House putthisquestion.
There aremanygood textbooks oncalculus, but[Bry93 ]isparticularly enlight-
ening. Anexcellent book ondiscrete mathematics andcombinatorial reasoning is
[Bal91 ].
360 CHAPTER 9.POLYNOMIALS
Chapter10
Corecursion
Preview
Inthischapter wewilllook theconstruction ofinﬁnite objects andatproof meth-
odssuited toreasoning with inﬁnite data structures. Themost important kind of
inﬁnite data structures arestreams (inﬁnite lists), sothemain topic ofthischapter
isthelogic ofstream processing. Wewillshowhownon-deterministic processes
canbeviewed asfunctions from random integerstreams tostreams. Fortheim-
plementation ofthiswewill usetwofunctions fromRandom.hs ,amodule for
random number generation andprocessing from theHask elllibrary .Attheend
ofthechapter wewill connect combinatorial reasoning with stream processing,
viathestudy ofpowerseries andgenerating functions. OurHask elltreatment of
powerseries ismodeled after thebeautiful [McI99 ,McI00 ].
moduleCOR
where
importRandom(mkStdGen,randomRs)
importPolynomials
importPowerSeries
Thedefaultforthedisplay offractional numbers inHask ellisﬂoating point nota-
361
362 CHAPTER 10.CORECURSION
tion. Aswearegoing todevelop streams ofintegers andstreams offractions in
thischapter ,itisconvenient tohavethem displayed with unlimited precision in
integerorrational notation. Thedefault command takescare ofthat.
default (Integer, Rational, Double)
10.1 Corecursi veDeﬁnitions
Aswehaveseen, itiseasy togenerate inﬁnite lists inHask ell.Inﬁnite lists are
often called streams .Here isthecode again forgenerating aninﬁnite list(ora
stream) ofones:
ones=1:ones
This looks likearecursi vedeﬁnition, butthere isnobase case. Here isadeﬁnition
ofafunction thatgenerates aninﬁnite listofallnatural numbers:
nats=0:map(+1)nats
Again, thedeﬁnition ofnats looks likearecursi vedeﬁnition, butthere isnobase
case. Deﬁnitions likethisarecalled corecursive deﬁnitions .Corecursi vedef-
initions alwaysyield inﬁnite objects. When youcome tothink ofit,thefunny
explanation oftheacron ymGNU asGNU’ sNotUnix isalsoanexample.
Aswehaveseen inSection 3.7,generating theoddnatural numbers canbedone
bycorecursion.
odds=1:map(+2)odds
10.1.CORECURSIVE DEFINITIONS 363
Exer cise10.1 Write acorecursi vedeﬁnition thatgenerates theevennatural num-
bers.
Wecanmakethecorecursi vedeﬁnitions more explicit with theuseofiterate .
Thedeﬁnition ofiterate intheHask ellprelude isitself anexample ofcorecur -
sion:
iterate ::(a->a)->a->[a]
iterate fx =x:iterate f(fx)
Here areversions oftheinﬁnite listsaboveinterms ofiterate :
theOnes =iterate id1
theNats =iterate (+1)0
theOdds =iterate (+2)1
Exer cise10.2 Useiterate todeﬁne theinﬁnite stream ofevennatural numbers.
Thelist[0..] canbedeﬁned corecursi velyfromones withzipWith .
Supposenisanatural number .Then itssuccessor canbegotbyadding 1ton.0
istheﬁrstnatural number .Thesecond natural number ,1,isgotbyadding 1to0.
Thethird natural number ,2,isgotbyadding 1tothesecond natural number ,and
soon:
theNats1 =0:zipWith (+)onestheNats1
Thetechnique thatproduced theNats1 canbeused forgenerating theFibonacci
numbers:
theFibs =0:1:zipWith (+)theFibs (tailtheFibs)
364 CHAPTER 10.CORECURSION
Theprocess onFibonacci numbers thatwasdeﬁned inExercise 7.17 canbedeﬁned
with corecursion, asfollo ws:
pr(x1:x2:x3:xs) =x1*x3-x2*x2:pr(x2:x3:xs)
AsweprovedinExercise 7.17, applying thisprocess totheFibs givesthelist
n:( 1)n+1:
COR>take20(prtheFibs)
[-1,1,-1,1,-1,1,-1,1,-1,1,-1, 1,-1,1,-1,1,-1,1,-1,1]
Thedeﬁnition ofthesieveofEratosthenes (page 106) alsouses corecursion:
sieve::[Integer] ->[Integer]
sieve(0:xs)=sievexs
sieve(n:xs)=n:sieve(markxs1n)
where
mark(y:ys)km|k==m=0:(markys1m)
|otherwise =y:(markys(k+1)m)
What these deﬁnitions haveincommon isthattheygenerate inﬁnite objects, and
thattheylook likerecursi vedeﬁnitions, except forthefactthatthere isnobase
case.
Here isafaster waytoimplement theSieveofEratosthenes. This time, weactually
removemultiples ofxfrom thelistonencountering xinthesieve.Thecounting
procedure nowhastobereplaced byacalculation, fortheremo valsaffect the
distances inthelist. The property ofnotbeing amultiple ofnisimplemented
bythefunction(\m->(remmn)/=0).Remo ving allnumbers thatdonot
havethisproperty isdone byﬁltering thelistwith theproperty .
sieve'::[Integer] ->[Integer]
sieve'(n:xs)=n:sieve'(filter (\m->(remmn)/=0)xs)
primes' ::[Integer]
primes' =sieve'[2..]
10.2.PROCESSES ANDLABELED TRANSITION SYSTEMS 365
Howdoes oneprovethings about corecursi veprograms? E.g., howdoes oneprove
thatsieve andsieve' compute thesame stream result foreverystream argu-
ment? Proof byinduction does notworkhere, forthere isnobase case.
Exer cise10.3*The Thue-Morse sequence isastream of0’sand1’sthatispro-
duced asfollo ws.First produce 0.Next,atanystage, swapeverything thatwas
produced sofar(byinterchanging 0’sand1’s)andappend that. Theﬁrstfewstages
ofproducing thissequence look likethis:
0
01
0110
01101001
01101001100101 10
Thus, ifAkdenotes theﬁrst2ksymbols ofthesequence, thenAk+1equalsAk+
+Bk,whereBkisobtained fromAkbyinterchanging 0’sand1’s.Giveacorecur -
siveprogram forproducing theThue-Morse sequence asastream.
10.2 Processes andLabeled Transition Systems
Thenotion ofanondeterministic sequential process issogeneral thatitisimpos-
sible togivearigorous deﬁnition. Informally wecansaythatprocesses areinter-
acting procedures. Typical examples are(models of)mechanical devices such as
clocks, protocols fortrafﬁccontrol, vending machines, operating systems, client-
servercomputer systems, andsoon.Aformal notion formodeling processes that
hasturned outtobeextremely fruitful isthefollo wing.
Alabeled transition system (Q;A;T)consists ofasetofstatesQ,asetof
action labelsA,andaternary relationTQAQ,thetransition relation .
If(q;a;q0)2Twewrite thisasqa !q0.
Example 10.4 Perhaps thesimplest example ofalabeled transition system isthe
system givenbythetwostatescandc0andthetwotransitionsctick !candccrack !
c0(Figure 10.1). This isamodel ofaclock thatticks until itgetsunhinged.
Note thattheprocess oftheticking clock isnondeterministic. The clock keeps
ticking, until atsome point, fornoreason, itgetsstuck.
Toimplement nondeterministic processes liketheclock process from Example
10.4, wehavetoﬁndawayofdealing with thenondeterminism. Nondeterministic
366 CHAPTER 10.CORECURSION
cracktick   
Figure 10.1: Ticking clock.
beha viour isbeha viour determined byrandom factors, soasimple wayofmodeling
nondeterminism isbymodeling aprocess asamap from arandomly generated list
ofintegers toastream ofactions. Thefollo wing function creates random streams
ofintegers, within aspeciﬁed bound [0;::;b],andstarting from aparticular seeds.
ItusesrandomRs andmkStdGen from thelibrary moduleRandom.hs .
randomInts ::Int->Int->[Int]
randomInts boundseed=
tail(randomRs (0,bound) (mkStdGen seed))
Exer cise10.5 Note thatrandomInts 1seed generates arandom stream of0’s
and1’s.Inthelong run,theproportion of0’sand1’sinsuch astream willbe1to
1.Howwould youimplement agenerator forstreams of0’sand1’swith, inthe
long run,aproportion of0’sand1’sof2to1?
Wedeﬁne aprocess asamap from streams ofintegers tostreams ofaction labels.
Tostart aprocess, create anappropriate random integerstream andfeed ittothe
process.
typeProcess =[Int]->[String]
start::Process ->Int->Int->[String]
startprocess boundseed=process (randomInts boundseed)
10.2.PROCESSES ANDLABELED TRANSITION SYSTEMS 367
Theclock process cannowbemodeled bymeans ofthefollo wing corecursion:
clock::Process
clock(0:xs)="tick" :clockxs
clock(1:xs)="crack" :[]
This gives:
COR>startclock11
["tick","crack"]
COR>startclock12
["crack"]
COR>startclock125
["tick","tick","tick","tick", "crack"]
Theparameter fortheintegerbound inthestart function (thesecond argument
ofstart function) should besetto1,toensure thatwestart outfrom alistof0’s
and1’s.
Example 10.6 Consider averysimple vending machine thatsells mineral water
andbeer.Watercosts oneeuro, beer twoeuros. Themachine hasacoin slotand
abutton. Itonly accepts 1euro coins. Ifacoin isinserted andthedispense button
ispushed, itdispenses acanofmineral water.Ifinstead ofpushing thedispense
button, another oneeuro coin isinserted andnextthedispense button ispushed,
itdispenses acanofbeer.If,instead ofpushing thebutton forbeer,athird coin
isinserted, themachine returns theinserted mone y(three 1euro coins) andgoes
back toitsinitial state. This time weneed four states, andthefollo wing transitions
(Figure 10.2):qcoin !q1,q1water !q,q1coin !q2,q2beer !q,q2coin !q3,q3moneyback !q.
Again, thisiseasily modeled. This time, therandom stream isnotneeded forthe
transitionsqcoin !q1andq3moneyback !q,forinsertion ofacoin istheonly possibility
fortheﬁrstofthese, andreturn ofalltheinserted mone yforthesecond.
368 CHAPTER 10.CORECURSION
coin coin coinwaterbeermone yback       
Figure 10.2: Asimple vending machine.
10.2.PROCESSES ANDLABELED TRANSITION SYSTEMS 369
vending, vending1, vending2, vending3 ::Process
vending (0:xs)="coin" :vending1 xs
vending (1:xs)= vending xs
vending1 (0:xs)="coin" :vending2 xs
vending1 (1:xs)="water" :vending xs
vending2 (0:xs)="coin" :vending3 xs
vending2 (1:xs)="beer" :vending xs
vending3 (0:xs)="moneyback": vending xs
vending3 (1:xs)= vending3 xs
This gives:
COR>take9(startvending 11)
["coin","water","coin","water ","coin","water","coin","coin","beer"]
COR>take8(startvending 13)
["coin","water","coin","coin" ,"coin","moneyback","coin","water"]
COR>take8(startvending 122)
["coin","water","coin","water ","coin","coin","coin","moneyback"]
Example 10.7 Aparking ticketdispenser works asfollo ws.Aslong aspieces of
1or2euro areinserted, theparking time isincremented by20minutes pereuro.
Iftheredbutton ispressed, alltheinserted mone yisreturned, andthemachine
returns toitsinitial state. Ifthegreen button ispressed, aparking ticketisprinted
indicating theamount ofparking time, andthemachine returns toitsinitial state.
There arethefollo wing transitions:q(i)return(i) !q(0),q(i)1euro !q(i+1),q(i)2euro !
q(i+2),q(0)notime !q(0),q(i)timei*20min !q(0).Note thatthenumber ofstates is
inﬁnite.
Here isanimplementation oftheparking ticketdispenser:
370 CHAPTER 10.CORECURSION
ptd::Process
ptd=ptd00
ptd0::Int->Process
ptd00(0:xs)=ptd00xs
ptd0i(0:xs)=("return "++showi++"euro"):ptd00xs
ptd0i(1:xs)="1euro":ptd0(i+1)xs
ptd0i(2:xs)="2euro":ptd0(i+2)xs
ptd00(3:xs)=ptd00xs
ptd0i(3:xs)=("ticket "++show(i*20)++"min"):ptd00xs
This yields:
COR>take6(startptd3457)
["1euro","2 euro","2 euro","ticket 100min","1 euro","ticket 20min"]
cracktick cracktick  
   
Figure 10.3: Another ticking clock.
Example 10.8 Intuiti vely,theclock process ofExample 10.4 isthesame asthe
clock process ofthefollo wing example (Figure 10.3):c1tick !c2,c1crack !c3,
c2tick !c2andc2crack !c4.Itisclear thatthisisalso aclock thatticks until itgets
stuck.
10.2.PROCESSES ANDLABELED TRANSITION SYSTEMS 371
coin
coincoin coin
waterbeermone yback        
Figure 10.4: Another simple vending machine.
372 CHAPTER 10.CORECURSION
Exer cise10.9 Consider thevending machine givenbythefollo wing transitions
(Figure 10.4):qcoin !q1,qcoin !q4,q1coin !q2,q2beer !q,q2coin !q3,q3moneyback !q,
q4water !q.Taking themachine from Example 10.6 andthismachine tobeblack
boxes,howcanauser ﬁndoutwhich ofthetwomachines sheisoperating?
Exer cise10.10 GiveaHask ellimplementation ofthevending machine from Ex-
ercise 10.9.
Thekeyquestion about processes isthequestion ofidentity: Howdoes oneprove
thattwoprocesses arethesame? Howdoes oneprovethattheyaredifferent? Proof
methods forthiswillbedeveloped inthecourse ofthischapter .
Before weendthisbrief introduction toprocesses wegiveasimple example of
process interaction.
Example 10.11 Auser who continues tobuybeer from thevending machine in
Example 10.6 canbemodeled by:ucoin !u1,u1coin !u2,u2beer !u.Itisclear how
thisshould beimplemented.
Howabout abeer drink erwho interacts with avending machine? Itturns outthat
wecanmodel thisveryelegantly asfollo ws.Welettheuser start with buying his
(her?) ﬁrst beer.Next,wefeed thestream ofactions produced bythevending
machine asinput totheuser,andthestream ofactions produced bytheuser as
input tothevending machine, andtheykeepeach other busy.This interaction can
bemodeled corecursi vely,asfollo ws:
actions =user[0,0,1] responses
responses =vending actions
useracts~(r:s:p:resps) =acts++user(proc[r,s,p]) resps
proc["coin","coin","beer"] =[0,0,1]
This gives:
COR>take8actions
[0,0,1,0,0,1,0,0]
COR>take8responses
["coin","coin","beer","coin", "coin","beer","coin","coin"]
10.3.PROOFBYAPPROXIMATION 373
The user starts byinserting twocoins andpressing thebutton, themachine re-
sponds with collecting thecoins andissuing acanofbeer,theuser responds to
thisbyinserting twomore coins andpressing thebutton once more, andsoon.
One hairy detail: thepattern~(r:s:p:resps) isaso-called lazy patter n.Lazy
patterns alwaysmatch, theyareirrefutable. This allowstheinitial request tobe
submitted ‘before’ thelist(r:s:p:resps) comes intoexistence bytheresponse
from thevending machine.
10.3 ProofbyApproximation
One oftheproof methods thatworkforcorecursi veprograms isproof byapprox-
imation. Forthis, wehavetoextend each data type toaso-called domain with a
partial orderingv(theapproximation order). Everydata type gets extended with
anelement?.This isthelowest element intheapproximation order .
Let(D;v)beasetDwith apartial ordervonit,andletAD.
Anelementx2Aisthegreatest element ofAifavxforalla2A.x2Ais
theleast element ofAifxvaforalla2A.Note thatthere areDwithAD
forwhich such least andgreatest elements donotexist.
Exer cise10.12 Giveanexample ofasetD,apartial ordervonD,andasubset
AofDsuch thatAhasnogreatest andnoleast element.
Anelementx2Disanupper bound ofAifavxforalla2A.UseAuforthe
setofallupper bounds ofA,i.e.,Au:=fx2Dj8a2Aavxg.
E.g., consider Nwith theusual order6.Takef2;4;6gN.Thenf2;4;6gu=
fn2Nj66ng.Butthesetofevennumbers hasnoupper bounds inN.
Anelementx2Disalower bound ofAifxvaforalla2A.UseAlforthe
setofallupper bounds ofA,i.e.,Al:=fx2Dj8a2Axvag.
Anelementx2Distheluborleast upper bound ofAifxistheleast element
ofAu.ThelubofAisalsocalled thesupremum ofA.NotationtA.
E.g., consider Rwith theusual order6.TakeA=fn
n+1jn2NgR.Then
A=f0;1
2;2
3;3
4;:::g,Au=fr2Rjr>1g,andtA=1.
Anelementx2Distheglborgreatest lower bound ofAifxisthegreatest
element ofAl.The glbofAisalso called theinﬁmum ofA.NotationuA.
Caution: there may beADforwhichtAanduAdonotexist.
374 CHAPTER 10.CORECURSION
Exer cise10.13 Giveanexample ofasetD,apartial ordervonD,andasubset
AofDsuch thatAhasnolubandnoglb.
AsubsetAofDiscalled achain inDiftheordering onAistotal, i.e.,ifforall
x;y2Aeitherxvyoryvx.E.g., thesetA=ffk2Njk<ngjn2Ngis
achain in}(N)under.
AsetDwith apartial orderviscalled adomain ifDhasaleast element?and
tAexists foreverychainAinD.E.g.,}(N)withisadomain: theleast element
isgivenby;,tAisgivenbySA.
Exer cise10.14 ShowthatN,with theusual ordering 6,isnotadomain. Canyou
extend Ntoadomain?
Wewillnowdeﬁne approximation orders thatmakeeach data type intoadomain.
Forbasic data typesAtheapproximation order isgivenby:
xvy:x=?_x=y:
Toseethattheresult isindeed adomain, observ ethat?istheleast element ofthe
data type, andthattheonly chains inbasic data types aref?g,fxgandf?;xg.
Obviously ,wehavetf?g =?,tfxg=x,tf?;xg=x.Thus, everychain has
alub.
ForpairdatatypesAB—represented inHask ellas(a,b) —theapproximation
order isgivenby:
?v(x;y)
(x;y)v(u;v):xvu^yvv:
Again, itisnotdifﬁcult toseethateverychain inapairdata type hasalub.
Forfunctional data typesA!Btheapproximation order isgivenby:
fvg:8x2A(fxvgx):
Here itisassumed thatAandBaredomains.
IfAisabasic data type,f;gcanbeviewed aspartial functions, withfvg
indicating thatgisdeﬁned where verfisdeﬁned, andfandgagreeing oneveryx
forwhich theyareboth deﬁned.
Exer cise10.15 Showthatfunctional data typesA!Bunder thegivenapproxi-
mation order form adomain. Assume thatAandBaredomains.
10.3.PROOFBYAPPROXIMATION 375
Forlistdata types[A]theapproximation order isgivenby:
?vxs
[]vxs:xs=[]
x:xsvy:ys:xvy^xsvys
Exer cise10.16 Showthatlistdata types[a]under thegivenapproximation order
form adomain. Assume thataisadomain.
Using?onecancreate partial lists, where apartial listisalistoftheformx0:
x1::?.TheHask ellguise of?isaprogram execution error oraprogram
thatdiverges.Thevalue?showsupintheHask ellprelude inthefollo wing weird
deﬁnition oftheundeﬁned object.
undefined ::a
undefined |False=undefined
Acalltoundefined alwaysgivesrisetoanerror duetocase exhaustion. An
example ofapartial listwould be'1':'2':undefin ed.Partial lists canbeused
toapproximate ﬁnite andinﬁnite lists. Itiseasy tocheck that
?vx0:?vx0:x1:?vvx0:x1::xn:?vx0:x1::xn:[]:
This ﬁnite setofapproximations isachain, andwehave:
G
f?;x0:?;x0:x1:?;:::;x0:x1::xn:?;x0:x1::xn:[]g
=x0:x1::xn:[]:
Also, forinﬁnite lists, wecanform inﬁnite setsofapproximations:
?vx0:?vx0:x1:?vx0:x1:x2:?v
This inﬁnite setofapproximations isachain. Wewillshow(inLemma 10.17) that
forinﬁnite listsxs=x0:x1:x2:wehave:
G
f?;x0:?;x0:x1:?;x0:x1:x2:?;:::g=xs:
Thefunctionapprox canbeused togivepartial approximations toanylist:
376 CHAPTER 10.CORECURSION
approx::Integer ->[a]->[a]
approx(n+1)[]=[]
approx(n+1)(x:xs)=x:approxnxs
Sincen+1matches only positi veintegers, thecallapproxnxs,withnless
than orequal tothelength ofthelist,willcause anerror (bycase exhaustion) after
generation ofnelements ofthelist,i.e.,itwillgeneratex0:x1::xn 1:?.
Ifnisgreater than thelength ofxs,thecallapproxnxswillgenerate thewhole
listxs.WecannowwriteG
f?;x0:?;x0:x1:?;x0:x1:x2:?;:::g
as1G
n=0approxnxs:
Lemma 10.17 (Approximation Lemma) Foranylistxs:
1G
n=0approxnxs=xs:
Proof.Wehavetoshowtwothings:
1.xs2fapproxnxsjn2Ngu.
2.xsistheleast element offapproxnxsjn2Ngu.
Toshow(1),wehavetoestablish thatforeverynandeveryxs,approxnxsvxs.
Weprovethiswith induction onn,forarbitrary lists.
Basis: approx 0xs=?vxsforanylistxs.
Induction step: Assume thatforeveryxs,approxnxsvxs.Wehavetoshow
thatforanylistxs,approx (n+1)xsvxs.
Ifxs=?orxs=[],then theresult trivially holds bythedeﬁnition ofapprox ,so
weassume xs=x:xs’ .Then:
approx (n+1)x:xs’
=fdefapproxg
x:approxnxs’
vfinduction hypothesisg
x:xs’:
10.3.PROOFBYAPPROXIMATION 377
Toshow(2),wehavetoshowthatforanylistys,ifys2fapproxnxsjn2Ngu,
then xsvys,i.e.,wehavetoshowthatxsistheleast element offapproxnxsj
n2Ngu.
Assume ys2fapproxnxsjn2Ngu.This means thatforalln2N,approxnxsv
ys.Wehavetoshowthatxsvys.
Suppose xs6vys.Then there hastobeakwith(approx (k+1)xs)!!k6vys!!k.
Butthen approx (k+1)xs6vys,andcontradiction with ys2fapproxnxsjn2
Ngu.
Theor em10.18 (Approximation Theor em)
xs=ys,8n(approxnxs=approxnys):
Proof.):Immediate from thefactthatxs!!n=ys!!n,foreveryn2N.
(:
8n(approxnxs=approxnys)
=)fproperty oflubg
1G
n=0(approxnxs)=1G
n=0(approxnys)
()fLemma 10.17g
xs=ys:
Theapproximation theorem isoneofourtools forproving properties ofstreams.
Example 10.19 Suppose wewanttoprovethefollo wing:
mapf(iteratefx)=iteratef(fx):
This equality cannot beprovedbylistinduction, asthelists onboth sides ofthe
equality sign areinﬁnite. Wecanproveanequivalent property byinduction onn,
asfollo ws.
8n(approxn(mapf(iteratefx))=approxn(iteratef(fx))):
Proof byinduction onn.
Basis. Forn=0,theproperty holds bythefactthatapprox 0xs=?foralllists
xs.
378 CHAPTER 10.CORECURSION
Induction step. Assume (forarbitraryx):
approxn(mapf(iteratefx))=approxn(iteratef(fx)):
Wehave:
approx (n+1)(mapf(iteratefx))
=fdeﬁnition ofiterateg
approx (n+1)(mapf(x:iteratef(fx)))
=fdeﬁnition ofmapg
approx (n+1)(fx:mapf(iteratef(fx)))
=fdeﬁnition ofapproxg
fx:approxn(mapf(iteratef(fx)))
=finduction hypothesisg
fx:approxn(iteratef(f(fx)))
=fdeﬁnition ofapproxg
approx (n+1)(fx:iteratef(f(fx)))
=fdeﬁnition ofiterateg
approx (n+1)(iteratef(fx)):
Exer cise10.20 InExercise 7.52 youshowed thatforeveryﬁnite listxs::[a],
everyfunctionf::a->b,everytotal predicatep::b->Bool thefollo w-
ingholds:
ﬁlterp(mapfxs)=mapf(ﬁlter(pf)xs):
Useproof byapproximation toshowthatthisalsoholds forinﬁnite lists.
Example 10.21 Toreason aboutsieve ,wewould liketoshowthatmarknk
hasthesame effectonalistofintegers asmapping with thefollo wing function:
m:ifremmn6=0thenmelse0:
This will only hold whenmarknkisapplied tosequences thatderivefrom a
sequence [q..] byreplacement ofcertain numbers byzeros. Letususe[q..]
forthegeneral form ofsuch asequence. Supposexsequals[q..]forsomeq,
i.e.,suppose thatxsistheresult ofreplacing some oftheitems intheinﬁnite list
[q;q+1;q+2;:::]byzeros. Weprovebyapproximation thatifq=an+k,with
16k6n,then:
marknkxs=map(m:ifremmn6=0thenmelse0)xs:
10.4.PROOFBYCOINDUCTION 379
Basis. Forn0=0,theproperty holds bythefactthatapprox 0xs=?foralllists
xs.
Induction step. Assume (forarbitrary xsoftheform[q..]withq=an+kand
16k6n):
approxn0(marknkxs)=approxn0(map(m:ifremmn6=0thenmelse0)xs):
Twocases: (i)k=n,and(ii)k<n.
Case (i)isthecase wherenjq,i.e.,remxn=0.Weget:
approx (n0+1)(marknkx:xs)
=fdeﬁnition ofmarkg
approx (n0+1)(0:markn1xs)
=fdeﬁnition ofapproxg
0:approxn0markn1xs
=finduction hypothesisg
0:approxn0(m:ifremmn6=0thenmelse0)xs
=fdeﬁnition ofapproxg
approx (n0+1)(0:(m:ifremmn6=0thenmelse0)xs)
=fdeﬁnition ofmap, plus thefactthatremxn=0g
approx (n0+1)map(m:ifremmn6=0thenmelse0)x:xs:
Case (ii)isthecase wheren6jq.Thereasoning forthiscase uses theother case
ofthedeﬁnition ofmark .
Aproof byapproximation ofthefactthatsieve andsieve' deﬁne thesame
function onstreams cannowusetheresult from Example 10.21 asalemma.
10.4 ProofbyCoinduction
Tocompare twostreams xsandys,intuiti velyitisenough tocompare their obser -
vational beha viour .Thekeyobserv ation onastream istoinspect itshead. Iftwo
streams havethesame head, andtheir tails havethesame observ ational beha viour ,
then theyareequal. Similarly ,tocompare twoinﬁnite binary trees itisenough
toobserv ethattheyhavethesame information attheir root nodes, thattheir left
daughters havethesame observ ational beha viour ,andthattheir right daughters
havethesame observ ational beha viour .And soon,forother inﬁnite data struc-
tures.
380 CHAPTER 10.CORECURSION
Tomakethistalkabout observ ational beha viour rigorous, itisfruitful toconsider
theinﬁnite data structures weareinterested inaslabeled transition systems. The
observ ations aretheaction labels thatmark atransition.
Abisimulation onalabeled transition system (Q;A;T)isabinary relationRon
Qwith thefollo wing properties. IfqRpanda2Athen:
1.Ifqa !q0then there isap02Qwithpa !p0andq0Rp0.
2.Ifpa !p0then there isanq02Qwithpa !p0andq0Rp0.
Example 10.22 Takedecimal representations ofrational numbers with over-line
notation toindicate repeating digits (Section 8.5). Thefollo wing representations
alldenote thesame number1
7:
0:142857;0:1428571;0:14285714;0:142857142 857142:
Why? Because ifyoucheck them against each other decimal bydecimal, you
will neverhitatadifference. The relation ‘having thesame inﬁnite expansion’
isabisimulation ondecimal representations, andtherepresentations for1
7areall
bisimilar .
Exer cise10.23 Showthattherelation ofequality onasetAisabisimulation on
A.
Example 10.24 Collect thetransition forthetwoclock processes ofExamples
10.4 and10.8 together inonetransition system. Then itiseasy tocheck thatthe
relationRgivenbycRc1;cRc2;c0Rc3;c0Rc4isabisimulation onthistransition
system (Figure 10.5). Thebisimulation connects thestatescandc1.Thetwoclock
processes areindeed indistinguishable.
Exer cise10.25 Showthatthere isnobisimulation thatconnects thestarting states
ofthetwovending machines ofExamples 10.6 and10.9.
Exer cise10.26 Showthattheunion oftwobisimulations isagain abisimulation.
Exer cise10.27 Showthatthere isalwaysagreatest bisimulation onasetAunder
theinclusion ordering. (Hint: showthattheunion ofallbisimulations onAisitself
abisimulation.)
Exer cise10.28 Thebisimulation relation giveninExample 10.24 isnotthegreat-
estbisimulation onthetransition system. Find thegreatest bisimulation.
10.4.PROOFBYCOINDUCTION 381
crackcrack
cracktickticktick      Figure 10.5: Bisimulation between ticking clocks.
382 CHAPTER 10.CORECURSION
Useforthegreatest bisimulation onagivensetA(Exercise 10.27). Call two
elements ofAbisimilar when theyarerelated byabisimulation onA.Being
bisimilar then coincides with being related bythegreatest bisimulation:
ab,9R(Risabisimulation, andaRb):
Toshowthattwoinﬁnite objectsxandyareequal, weshowthattheyexhibit
thesame beha viour ,i.e.weshowthatxy.Such aproof iscalled aproofby
coinduction .
Intheparticular case ofcomparing streams wecanmakethenotion ofabisimula-
tionmore speciﬁc. There areonly twokinds ofobserv ations onastream: observ-
ingitshead andobserving itstail.Comparison oftheheads should exhibit objects
thatarethesame. Comparison ofthetails should exhibit bisimilar streams.
When talking about streamsf=[f0;f1;f2;f3;:::]itisconvenient torefer tothe
tailofthestream asf.Thus, astreamf=[f0;f1;f2;f3;:::]alwayshastheform
f=f0:f,wheref0isthehead andfisthetail.
f0f f
   
Figure 10.6: Astream viewed asatransition system.
f
f0
f
g
g0
g
Figure 10.7: Bisimulation between streams.
Viewing astreamfasatransition system, wegettransitionsff0 !f,andso
on(Figure 10.6). Abisimulation between streamsfandgthatconnectsfand
10.4.PROOFBYCOINDUCTION 383
gisgiveninFigure 10.7. Itisimmediate from thepicture thatthenotion ofa
bisimulation between streams boils downtothefollo wing.
Astream bisimulation onasetAisarelationRon[A]with thefollo wing prop-
erty.Iff;g2[A]andfRgthen bothf0=g0andfRg.
Thegeneral pattern ofaproof bycoinduction using stream bisimulations offg,
wheref;g2[A],issimply this. Deﬁne arelationRon[A].Next,showthatRis
astream bisimulation, withfRg.
Example 10.29 Asanexample, wewillshow:
mapf(iteratefx)iteratef(fx):
LetRbethefollo wing relation on[A].
f(mapf(iteratefx);iteratef(fx))jf::a!a;x::ag:
Suppose:
(mapf(iteratefx))R(iteratef(fx)):
WeshowthatRisabisimulation. Wehave:
mapf(iteratefx)iterate= mapfx:(iteratef(fx))
map=(fx):mapf(iteratef(fx))
iteratef(fx)iterate=(fx):iteratef(f(fx)):
This shows:
mapf(iteratefx)head !(fx) (1)
mapf(iteratefx)tail !mapfx:(iteratef(fx)) (2)
iteratef(fx)head !(fx) (3)
iteratef(fx)tail !iteratef(f(fx)) (4)
Clearly ,mapf(iteratefx)anditeratef(fx)havethesame heads, andalso,
their tails areR-related. This showsthatRisabisimimulation that connects
mapf(iteratefx)anditeratef(fx).Hence
(mapf(iteratefx))(iteratef(fx)):
384 CHAPTER 10.CORECURSION
Given:Alabeledtransition system (Q;A;T)...
Tobeproved:qp
Proof:
LetRbegivenby...andsuppose qRp.
Tobeproved:Risabisimulation.
Suppose qa !q0
Tobeproved:Thereisap02Qwithpa !p0andq0Rp0.
Proof:...
Suppose pa !p0
Tobeproved:Thereisaq02Qwithqa !q0andq0Rp0.
Proof:...
ThusRisabisimulation withqRp.
Thusqp.
Given:...
Tobeproved:fg
Proof:
LetRbegivenby...andsuppose fRg.
Tobeproved:Risastreambisimulation.
Tobeproved:f0=g0.
Proof:...
Tobeproved:fRg.
Proof:...
ThusRisastreambisimulation withfRg.
Thusfg.
Figure 10.8: Proof Recipes forProofs byCoinduction.
10.5.POWERSERIESANDGENERA TINGFUNCTIONS 385
Exer cise10.30 Showbymeans ofacoinduction argument thatforeveryinﬁnite
listxs::[a],everyf::a->b,andeverytotal predicatep::b->Bool
thefollo wing holds:
ﬁlterp(mapfxs)=mapf(ﬁlter(p:f)xs):
10.5 PowerSeries andGenerating Functions
modulePowerSeries
where
importPolynomials
instance Fractional a=>Fractional [a]where
fromRational c=[fromRational c]
fs/[]=error"division by0attempted"
[]/gs=[]
(0:fs)/(0:gs)=fs/gs
(_:fs)/(0:gs)=error"division by0attempted"
(f:fs)/(g:gs)=letq=f/gin
q:(fs-q.*gs)/(g:gs)
int::Fractional a=>[a]->[a]
intfs=0:int1fs1where
int1[]_=[]
int1(g:gs)n=g/n:(int1gs(n+1))
expz=1+(intexpz)
Figure 10.9: AModule forPowerSeries.
Inchapter 9wehaveseen howpolynomials cangetrepresented asﬁnite lists of
their coefﬁcients, andhowoperations onpolynomials canbegivendirectly on
these listrepresentations. Wewill nowgeneralize thistoinﬁnite sequences. A
386 CHAPTER 10.CORECURSION
possible motivation forthis(one ofmany)isthewish todeﬁne adivision operation
onpolynomials.
Suppose wewanttodivide
f(z)=f0+f1z+f2z2++fkzk
by
g(z)=g0+g1z+g2z2++gmzm:
Theoutcomeh(z)=h0+h1z+h2z2+hastosatisfy:
f(z)=h(z)g(z):
This gives:
f0+zf(z)=(h0+zh(z))g(z)
=h0g(z)+zh(z)g(z)
=h0(g0+zg(z))+zh(z)g(z)
=h0g0+z(h0g(z)+h(z)g(z)):
Thus,f0=h0g0,henceh0=f0
g0,andf(z)=h0g(z)+h(z)g(z),sofrom this
h(z)=f(z) h0g(z)
g(z).Weseefrom thisthatcomputing fractions canbedone bya
process oflong division:
f(z)
g(z)=f0
g0+zf(z) (f0=g0)g(z)
g(z): (div)
Anexample case is1
1 z.Long division gives:
1
1 z=1 z
1 z+z1
1 z=1+z1
1 z
=1+z(1+z1
1 z)=1+z(1+z(1+z1
1 z))=
Therepresentation of1 zis[1; 1],sointerms ofcomputation onsequences we
get:
[1]
[1; 1]=1
1:[1]
[1; 1]
=1
1:1
1:[1]
[1; 1]
=1
1:1
1:1
1:[1]
[1; 1]
=1
1:1
1:1
1:1
1:[1]
[1; 1]
=:::
10.5.POWERSERIESANDGENERA TINGFUNCTIONS 387
This showsthat1
1 zdoes nothaveﬁnite degree. Itisnotapolynomial.
Togetataclass offunctions closed under division wedeﬁne power series tobe
functions oftheform
f(z)=f0+f1z+f2z2+=1X
k=0fkzk:
Apowerseries isrepresented byaninﬁnite stream [f0;f1;f2;:::].Powerseries in
avariablezcaninfactbeviewed asapproximations tocomple xnumbers (Section
8.10), butwewillnotpursue thatconnection here.
The implementation ofdivision follo wstheformula (div).Since trailing zeros
aresuppressed, wehavetotakethefactintoaccount that[]represents aninﬁnite
stream ofzeros.
fs/[]=error"division by0attempted"
[]/gs=[]
(0:fs)/(0:gs)=fs/gs
(_:fs)/(0:gs)=error"division by0attempted"
(f:fs)/(g:gs)=letq=f/ginq:(fs-q.*gs)/(g:gs)
Here aresome Hask ellcomputations involving division:
COR>take10(1/(1-z))
[1%1,1%1,1%1,1%1,1%1,1%1,1%1,1%1,1%1,1%1]
COR>take10(1/(1+z))
[1%1,-1%1,1%1,-1%1,1%1,-1%1,1%1,-1%1,1%1,-1%1]
Example 10.31 Togetafeelfor‘long division with sequences’, wecompute3
3 z,
asacalculation onsequences. Thesequence representation of3 zis[3; 1],so
weget:
[3]
[3; 1]=3
3:[1]
[3; 1]
=3
3:1
3:[1=3]
[3; 1]
=3
3:1
3:1
9:[1=9]
[3; 1]
=3
3:1
3:1
9:1
27:[1=27]
[3; 1]
=:::
388 CHAPTER 10.CORECURSION
This isindeed what Hask ellcalculates forus:
COR>take9(3/(3-z))
[1%1,1%3,1%9,1%27,1%81,1%243,1%729,1%2187,1%6561]
Integration involvesdivision, forRz
0f(t)dtisgivenby
0+f0z+1
2f1z2+1
3f2z3+
Togiveanexample, ifg(z)=1
1 z,thenRz
0g(t)dtequals:
0+z+1
2z2+1
3z3+
Integration isimplemented by:
int::Fractional a=>[a]->[a]
int[]=[]
intfs=0:int1fs1where
int1[]_=[]
int1(g:gs)n=g/n:(int1gs(n+1))
Weget:
COR>take10(int(1/(1-z)))
[0%1,1%1,1%2,1%3,1%4,1%5,1%6,1%7,1%8,1%9]
Toextend composition topowerseries, wehavetobecareful, fortheequation
f(g(z))=f0+g(z)f(g(z))hasasnag: theﬁrstcoefﬁcient depends onalloff,
which isaproblem iffisapowerseries. Here isanexample:
COR>comp1ones[0,2]whereones=1:ones
ERROR-Garbage collection failstoreclaim sufficient space
Tosolvethis, wemust develop theequation forcomposition abitfurther:
f(g(z))=f0+g(z)f(g(z))
=f0+(g0+zg(z))f(g(z))
=(f0+g0f(g(z)))+zg(z)f(g(z))
10.5.POWERSERIESANDGENERA TINGFUNCTIONS 389
Inthespecial case whereg0=0wecansimplify thisfurther:
f(zg(z))=f0+zg(z)f(zg(z)):
This leads immediately tothefollo wing implementation (part ofthemodule for
Polynomials):
comp::Numa=>[a]->[a]->[a]
comp_[] =error".."
comp[]_=[]
comp(f:fs)(0:gs)=f:gs*(compfs(0:gs))
comp(f:fs)(g:gs)=([f]+[g]*(compfs(g:gs)))
+(0:gs*(compfs(g:gs)))
This gives:
COR>take15(compones[0,2])whereones=1:ones
[1,2,4,8,16,32,64,128,256,512 ,1024,2048,4096,8192,16384]
Figure 10.9 givesamodule forpowerseries. Wewillnowshowhowthisiscan
beused asatool forcombinatorial calculations. Weareinterested inﬁnite lists
[f0;:::;fn]orinﬁnite lists[f0;f1;f2;:::]thatcanbeviewed assolutions tocom-
binatorial problems.
Weassociate sequences with combinatorial problems bysaying that[f0;f1;f2;:::]
solvesacombinatorial problem iffrgivesthenumber ofsolutions forthatprob-
lem(cf.theuseofpolynomials forsolving combinatorial problems insection 9.4,
which isnowgeneralized topowerseries).
Wecallapowerseriesf(z)agenerating function foracombinatorial problem
ifthelistofcoefﬁcients off(z)solvesthatproblem. Iff(z)haspowerseries
expansionf0+f1z+f2z2+f3z3+,thenf(z)isagenerating function for
[f0;f1;f2;f3;:::].
Example 10.32 Find agenerating function for[1;1;1;1;:::].Solution: aswesaw
above1
1 zhaspowerseries expansion 1+z+z2+z3+z4+.Thelistof
coefﬁcients is[1;1;1;1;:::].
Thegenerating function1
1 zisanimportant building block forconstructing other
generating functions, soweshould giveitaname. Infact,wealready did:ones
names thelist[1,1,1,1,..] .Aslong aswedon’tusedivision, thisisOK.
390 CHAPTER 10.CORECURSION
Example 10.33 Find agenerating function forthelistofnatural numbers. Solu-
tion: recall thecorecursi vedeﬁnition ofthenatural numbers interms ofzipWith (+).
This cannowbeexpressed succinctly interms ofaddition ofpowerseries:
COR>take20natswherenats=0:(nats+ones)
[0,1,2,3,4,5,6,7,8,9,10,11,12 ,13,14,15,16,17,18,19]
This givesthefollo wing speciﬁcation forthegenerating function:
g(z)=z(g(z)+1
1 z)
g(z) zg(z)=z
1 z
g(z)=z
(1 z)2
Here isthecheck:
COR>take20(z*ones^2)
[0,1,2,3,4,5,6,7,8,9,10,11,12 ,13,14,15,16,17,18,19]
Another wayoflooking atthis: differentiation of1+z+z2+z3+z4+gives
1+2z+3z2+4z3+.This means thatz
1
1 z0
=z
(1 z)2isagenerating
function forthenaturals.
Example 10.34 Find thegenerating function for[0;0;0;1;2;3;4;:::].Solution:
multiplication byzhastheeffectofshifting thesequence ofcoefﬁcients oneplace
totheright andinserting a0atthefront. Thus thegenerating function canbe
gotfrom thatoftheprevious example through multiplying byz2.Thegenerating
function is:z3
(1 z)2.Here isthecheck:
COR>take20(z^3*ones^2)
[0,0,0,1,2,3,4,5,6,7,8,9,10,1 1,12,13,14,15,16,17]
Example 10.35 Find thegenerating function forthesequence ofpowers oftwo
(thesequencen:2n).Solution: start outfrom acorecursi veprogram forthepow-
ersoftwo:
COR>take15powers2 wherepowers2 =1:2*powers2
[1,2,4,8,16,32,64,128,256,512 ,1024,2048,4096,8192,16384]
10.5.POWERSERIESANDGENERA TINGFUNCTIONS 391
This immediately leads tothespeciﬁcation g(z)=1+2zg(z)(thefactorzshifts
oneplace totheright, thesummand 1puts1inﬁrst position). Itfollo wsthat
g(z)=1
1 2z.Here istheconﬁrmation:
COR>take10(1/(1-2*z))
[1%1,2%1,4%1,8%1,16%1,32%1,64%1,128%1,256%1,512%1]
Example 10.36 Ifg(z)isthegenerating function forn:g n,thenn:g n+1isgen-
erated byg(z)
z,formultiplication by1
zshifts thecoefﬁcients ofthepowerseries
oneplace totheleft. Thus, thegenerating function forthesequencen:n+1is
1
(1 z)2.This sequence canalso begotbyadding thesequence ofnaturals andthe
sequence ofones, i.e.,itisalso generated byz
(1 z)2+1
1 z.This identiﬁcation
makesalgebraic sense:
z
(1 z)2+1
1 z=z
(1 z)2+1 z
(1 z)2=1
(1 z)2:
Exer cise10.37 Find thegenerating functions for
[0;0;0;1;1;1;:::];
for
[1;1;1;0;0;0;:::];
andfor
[1;1
2;1
4;1
8;:::]:
Check your answers bycomputer .
Example 10.38 Find thegenerating function for[0;1;0;1;0;1;:::].Solution: the
sequence isgenerated bythefollo wing corecursi veprogram.
COR>take20thingswherethings=0:1:things
[0,1,0,1,0,1,0,1,0,1,0,1,0,1, 0,1,0,1,0,1]
This leads tothespeciﬁcation g(z)=0+z(1+zg(z)),which reduces tog(z)=
z+z2g(z).From this,g(z)=z
1 z2.Inasimilar waywecanderivethegenerat-
ingfunction for[1;0;1;0;1;0;:::],which turns outtobeg(z)=1
1 z2.Alterna-
tively,observ ethat[1;0;1;0;1;0;:::]istheresult ofshifting [0;1;0;1;0;1;:::]
oneplace totheleft,sodivision byzdoes thetrick.
392 CHAPTER 10.CORECURSION
Theorem 10.39 summarizes anumber ofrecipes forﬁnding generating functions.
Theor em10.39 Supposef(z)isagenerating function forn:f nandg(z)isthe
generating function forn:g n.Then:
1.c
1 zisthegenerating function forn:c .
2.z
(1 z)2isthegenerating function forn:n .
3.f(z)
zisthegenerating function forn:f n+1.
4.cf(z)+dg(z)isthegenerating function forn:cf n+dgn.
5.(1 z)f(z)isthegenerating function forthedifference sequence
n:f n fn 1.
6.1 z
zf(z)isthegenerating function forthedifference sequence
n:f n+1 fn.
7.1
1 zf(z)isthegenerating function forn:f0+f1++fn.
8.f(z)g(z)isthegenerating function forn:f0gn+f1gn 1++fn 1g1+
fng0(theconvolution offandg).
9.zf0(z)isthegenerating function forn:nf n.
10.1
zRz
0f(t)dtisthegenerating function forn:fn
n+1.
Exer cise10.40 Provethestatements oftheorem 10.39 thatwere notprovedinthe
examples.
Example 10.41 Find thegenerating function forthesequencen:2n+1.Solu-
tion: theoddnatural numbers aregenerated bythefollo wing corecursi veprogram:
COR>take20(ones+2*nats)
[1,3,5,7,9,11,13,15,17,19,21, 23,25,27,29,31,33,35,37,39]
This immediately givesg(z)=1
1 z+2
(1 z)2.
Example 10.42 Find thegenerating function forthesequencen:(n+1)2.So-
lution: thegenerating function isthesum ofthegenerating functions forn:n2,
n:2nandn:1.One waytoproceed would betoﬁndthese generating functions
andtaketheir sum. Butthere isaneasier method. Recall that(n+1)2isthesum
oftheﬁrstnoddnumbers, andusetherecipe from Theorem 10.39 forforming
10.5.POWERSERIESANDGENERA TINGFUNCTIONS 393
thesequencen:a0++an,bymeans ofdividing thegenerating function from
Example 10.41 by1 z.This immediately gives1
(1 z)2+2z
(1 z)3.
Alternati vely,Theorem 10.39 tells usthatn:(n+1)2canalso bedeﬁned from
thenaturals with thehelp ofdifferentiation:
COR>take20(derivnats)
[1,4,9,16,25,36,49,64,81,100, 121,144,169,196,225,256,289,324,361,400]
Itfollo wsthatthegenerating functiong(z),forg(z)should satisfy:
g(z)=z
(1 z)20
:
Working thisoutweﬁndthatg(z)=1
(1 z)2+2z
(1 z)3.
Finally ,here iscomputational conﬁrmation:
COR>take20(ones^2 +2*z*ones^3)
[1,4,9,16,25,36,49,64,81,100, 121,144,169,196,225,256,289,324,361,400]
Example 10.43 Find thegenerating function forn:n2.Solution: shift thesolu-
tionfortheprevious example totheright bymultiplication byz.This gives:
COR>take20(z*ones^2+2*z^2*ones^3)
[0,1,4,9,16,25,36,49,64,81,10 0,121,144,169,196,225,256,289,324,361]
Sothegenerating function isg(z)=z
(1 z)2+2z2
(1 z)3.Sure enough, wecanalso
getthedesired sequence from thenaturals byshift anddifferentiation:
COR>take20(z*derivnats)
[0,1,4,9,16,25,36,49,64,81,10 0,121,144,169,196,225,256,289,324,361]
Example 10.44 Find thegenerating function forthesequence ofFibonacci num-
bers. Solution: consider again thecorecursi vedeﬁnition oftheFibonacci numbers.
Wecanexpress thissuccinctly interms ofaddition ofpowerseries, asfollo ws:
COR>take20fibswherefibs=0:1:(fibs+(tailfibs))
[0,1,1,2,3,5,8,13,21,34,55,89 ,144,233,377,610,987,1597,2584,4181]
394 CHAPTER 10.CORECURSION
This iseasily translated intoaninstruction foragenerating function:
g(z)=z2
g(z)+g(z)
z
+z:
Explanation: multiplying byz2inserts two0’sinfront oftheﬁbssequence, and
addingzchanges thesecond ofthese to1(themeaning is:thesecond coefﬁcient
isobtained byadd1totheprevious coefﬁcient).g(z)
zgivesthetailoftheﬁbs
sequence. From thisweget:
g(z) zg(z) z2g(z)=z
g(z)=z
1 z z2
And loandbehold:
COR>take10(z/(1-z-z^2))
[0%1,1%1,1%1,2%1,3%1,5%1,8%1,13%1,21%1,34%1]
Exer cise10.45 TheLucas numbers aregivenbythefollo wing recursion:
L0=2;L1=1;Ln+2=Ln+Ln+1:
This gives:
[2;1;3;4;7;11;18;29;47;76;123;199;322;521;843;1364;2207;3571;:::]
Therecipe isthatfortheFibonacci numbers, buttheinitial element ofthelistis2
instead of0.Find agenerating function fortheLucas numbers, starting outfrom
anappropriate corecursi vedeﬁnition.
Example 10.46 Recall thedeﬁnition oftheCatalan numbers from Exercise 7.20:
C0=1;Cn+1=C0Cn+C1Cn 1++Cn 1C1+CnC0:
Clearly ,Cn+1isobtained from[C0;:::;Cn]byconvolution ofthatlistwith itself.
This leads tothefollo wing corecursi vedeﬁnition oftheCatalan numbers:
COR>take15catswherecats=1:cats*cats
[1,1,2,5,14,42,132,429,1430,4 862,16796,58786,208012,742900,2674440]
10.5.POWERSERIESANDGENERA TINGFUNCTIONS 395
From this, wegetatthefollo wing speciﬁcation forthegenerating function:
g(z)=1+z(g(z))2
z(g(z))2 g(z)+1=0
Considering g(z)astheunkno wn,wecansolvethisasaquadratic equationax2+
bx+c=0,using theformulax= bp
b2 4ac
2a.Wegetthefollo wing generating
functions:
g(z)=1p1 4z
2z:
Consider thefollo wing powerseries.
g(z)=1+z+z2
2!+z3
3!+=1X
n=0zn
n!
Note thatbythedeﬁnition ofthederivativeoperation forpowerseries,g(z)0=
g(z).Thefunction with thisproperty isthefunctionez,whereeisthebase ofthe
natural logarithm, Napier’ snumbere.Thenumbereisdeﬁned bythefollo wing
inﬁnite sum:
1+1
1!+1
2!+1
3!+=1X
n=01
n!
Therefore wecallg(z)theexponential functionez.Note that bytherules for
integration forpowerseries,
Zz
0etdt=0+z+z2
2!+z3
3!+=ez 1;
andtherefore,ez=1+Rz
0etdt.This givesusameans ofdeﬁningezbycorecur -
sion, asfollo ws:
expz=1+(intexpz)
Weget:
COR>take9expz
[1%1,1%1,1%2,1%6,1%24,1%120,1%720,1%5040,1%40320]
396 CHAPTER 10.CORECURSION
Since weknow(Theorem 10.39) that1
1 zf(z)givesincremental sums ofthese-
quence generated byf(z),wenowhaveaneasy means toapproximate Napier’ s
number (thenumbere):
COR>take20(1/(1-z) *expz)
[1%1,2%1,5%2,8%3,65%24,163%60,1957 %720,685 %252,
109601%40320,98641 %36288,9864101 %3628800,13563139 %4989600,
260412269 %95800320,8463398743 %3113510400,
47395032961 %17435658240,888656868019 %326918592000,
56874039553217 %20922789888000,7437374403113 %2736057139200,
17403456103284421 %6402373705728000,82666416490601 %30411275102208]
10.6 Exponential Generating Functions
Upuntil now,thegenerating functions were used forsolving combinatorial prob-
lems inwhich order wasirrele vant. These generating functions aresometimes
called ordinary generating functions .Totackle combinatorial problems where
order ofselection plays arole, itisconvenient tousegenerating functions ina
slightly different way.Theexponential generating function forasequencen:f n
isthefunction
f(z)=f0+f1z+f2z2
2!+f3z3
3!+=1X
n=0fnzn
n!
Example 10.47 The(ordinary) generating function of[1;1;1;:::]is1
1 z,theex-
ponential generating function of[1;1;1;:::]isez.Ifezistakenasanordinary
generating function, itgenerates thesequence [1;1
1!;1
2!;1
3!;1
4!;:::].
Example 10.48 (1+z)ristheordinary generating function fortheproblem of
picking ann-sized subset from anr-sized set,anditistheexponential generating
function fortheproblem ofpicking asequence ofndistinct objects from anr-sized
set.
Weseefrom Examples 10.47 and10.48 thatthesame functiong(z)canbeused for
generating different sequences, depending onwhetherg(z)isused asanordinary
oranexponential generating function.
Itmakessense, therefore, todeﬁne anoperation thatmaps ordinarily generated
sequences toexponentially generated sequences.
10.6.EXPONENTIAL GENERA TINGFUNCTIONS 397
o2e::Numa=>[a]->[a]
o2e[]=[]
o2e(f:fs)=f:o2e(deriv(f:fs))
Withthisweget:
COR>take10(o2eexpz)
[1%1,1%1,1%1,1%1,1%1,1%1,1%1,1%1,1%1,1%1]
Afunction forconverting from exponentially generated sequences toordinarily
generated sequences istheconverseofthis, soituses integration:
e2o::Fractional a=>[a]->[a]
e2o[]=[]
e2o(f:fs)=[f]+(int(e2o(fs)))
This gives:
COR>take9(e2o(1/(1-z)))
[1%1,1%1,1%2,1%6,1%24,1%120,1%720,1%5040,1%40320]
Example 10.49 Here ishow(z+1)10isused tosolvetheproblem ofﬁnding the
number ofwaysofpicking subsets from asetof10elements:
COR>(1+z)^10
[1,10,45,120,210,252,210,120, 45,10,1]
And here ishowthesame function isused tosolvetheproblem ofﬁnding the
number ofwaystopick sequences from asetof10elements:
COR>o2e((1+z)^10)
[1,10,90,720,5040,30240,15120 0,604800,1814400,3628800,3628800]
Example 10.50 Suppose avasecontains red,white andblue marbles, atleast four
ofeach kind. Howmanywaysarethere ofarranging sequences ofmarbles from
398 CHAPTER 10.CORECURSION
thevase,with atmost four marbles ofthesame colour? Solution: theexponential
generating function is(1+z+z2
2+z3
6+z4
24)3.Theidea: ifyoupicknmarbles of
thesame colour ,thenn!ofthemarble orderings become indistinguishable. Here
istheHask ellcomputation ofthesolution.
COR>o2e([1,1,1/2,1/6,1/24]^3)
[1%1,3%1,9%1,27%1,81%1,240%1,690%1,1890%1,4830%1,
11130%1,22050 %1,34650 %1,34650 %1]
Example 10.51 Suppose avasecontains red,white andblue marbles, anunlim-
itedsupply ofeach colour .Howmanywaysarethere ofarranging sequences of
marbles from thevase,assume thatatleast twomarbles areofthesame colour?
Solution: asuitable exponential generating function is(ez z 1)3=(z2
2+z3
6+
z4
24+)3:
COR>take10(o2e((expz-z-1)^3))
[0%1,0%1,0%1,0%1,0%1,0%1,90%1,630%1,2940%1,11508 %1]
This givesthenumber ofsolutions forupto9marbles. Forupto5marbles there
arenosolutions. There are90=6!
23sequences containing twomarbles ofeach
colour .And soon.
Exer cise10.52 Suppose avasecontains red,white andblue marbles, atleast four
ofeach kind. Howmanywaysarethere ofarranging sequences ofmarbles from
thevase,with atleast twoandatmost four marbles ofthesame colour?
10.7 Further Reading
Domain theory andproof byapproximation recei vefuller treatment in[DP02 ].
Generating functions areamain focus in[GKP89 ].Theconnection between gen-
erating functions andlazy semantics isthetopic of[Kar97 ,McI99 ,McI00 ].A
coinducti vecalculus ofstreams andpowerseries ispresented in[Rut00 ].Core-
cursion isintimately connected with circularity indeﬁnitions [BM96 ]andwith the
theory ofprocesses andprocess communication [Fok00 ,Mil99 ].
Chapter11
FiniteandIn®niteSets
Preview
Some setsarebigger than others. Forinstance, ﬁnite setssuch as;andf0;1;2g,
aresmaller than inﬁnite ones such asNandR.Butthere arevarieties ofinﬁnity:
theinﬁnite setRisbigger than theinﬁnite setN,inasense tobemade precise in
thischapter .
This ﬁnal chapter starts with afurther discussion ofthePrinciple ofMathematical
Induction asthemain instrument tofathom theinﬁnite with, andexplains why
some inﬁnite setsareincomparably largerthan some others.
moduleFAIS
where
11.1 MoreonMathematical Induction
Thenatural numbers form thesetN=f0;1;2;:::g.ThePrinciple ofMathemati-
calInduction allowsyoutoproveuniver salstatements about thenatural numbers,
thatis,statements oftheform8n2NE(n).
399
400 CHAPTER 11.FINITEANDINFINITE SETS
Fact11.1 (Mathematical Induction) Forevery setXN,wehave that:
if02Xand8n2N(n2X)n+12X),thenX=N.
This looks notimpressi veatall,since itissoobviously true. For,suppose that
XNsatisﬁes both02Xand8n2N(n2X)n+12X).Then
weseethatNX(and, hence, thatX=N)asfollo ws. First, wehaveasa
ﬁrst Given,that02X.Then thesecond Given(8-elimination, n=0)yields
that02X)12X.Therefore, 12X.Applying thesecond Givenagain
(8-elimination, n=1)weobtain 12X)22X;therefore, 22X.And so
on,forallnatural numbers.
Nevertheless, despite itsbeing sooverly true, itisdifﬁcult tooverestimate the
importance ofinduction. Itisessentially theonly means bywith weacquire infor -
mation about themembers oftheinﬁnite setN.
Sets versus Properties. WitheverypropertyEofnatural numbers there corre-
sponds asetfn2NjE(n)gofnatural numbers. Thus, induction canalso be
formulated using properties instead ofsets. Itthen looks asfollo ws:
IfEisaproperty ofnatur alnumber ssuchthat
(i)E(0),
(ii)8n2N[E(n))E(n+1)],
then8n2NE(n).
Induction: Basis, Step, Hypothesis. According toInduction, inorder thatE(n)
istrueforalln2N,itsufﬁces that
(i)thisholds forn=0,i.e.,E(0)istrue, and
(ii)thisholds foranumbern+1,provided itholds forn.
Aswehaveseen, theproof of(i)iscalled basis ofaproof byinduction, theproof
of(ii)iscalled theinduction step.Bytheintroduction rules for8and),inorder
tocarry outtheinduction step, youaregranted theGivenE(n)foranarbitrary
numbern,whereas youhavetoshowthatE(n+1).Theassumption thatE(n)is
called theinduction hypothesis .Thenice thing about induction isthatthisinduc-
tionhypothesis comes entirely free.
Fact11.2 (Scheme forInductions) Viewed asarule ofproof, induction canbe
schematized asfollo ws.
11.1.MOREONMATHEMATICALINDUCTION 401
E(n)
...
E(0)E(n+1)
8nE(n)
Aproof using thePrinciple ofInduction ofastatement oftheform8nE(n)is
called aproof with induction with respect ton.Itcanbeuseful tomention the
parameternwhen other natural numbers surfaceinthepropertyE.
According totheaboveschema, theconclusion8nE(n)canbedrawnonthebasis
of(i)thepremiss thatE(0),and(ii)aproof derivingE(n+1)onthebasis ofthe
induction hypothesisE(n).
Thefollo wing strong variant ofinduction isable toperform tasks thatarebeyond
thereach oftheordinary version. This time, weformulate theprinciple interms
ofproperties.
Fact11.3 (StrongInduction) Forevery propertyEofnatur alnumber s:
if8n2N[(8m<nE(m)))E(n)],then8n2NE(n).
Using strong induction, thecondition8m<nE(m)actsastheinduction hypoth-
esisfrom which youhavetoderivethatE(n).
This is(atleast, forn>1)stronger than intheordinary form. Here, toestablish
thatE(n),youaregiventhatE(m)holds forallm<n.Inordinary induction,
youarerequired toshowthatE(n+1)onthebasis oftheGiventhatitholds for
nonly.
Note: using ordinary induction you havetoaccomplish twothings: basis, and
induction step. Using strong induction, justonething sufﬁces. Strong induction
hasnobasis.
Proof.(of11.3.) Suppose that8n2N[(8m<nE(m)))E(n)]. (1)
Deﬁne thesetXbyX=fnj8m<nE(m)g.Assumption (1)says thatevery
element ofXhaspropertyE.Therefore, itsufﬁces showing thateverynatural
number isinX.Forthis, weemplo yordinary induction.
Basis. 02X.
I.e.:8m<0E(m);written differently:8m[m<0)E(m)].This holds trivially
since there arenonatural numbers<0.The implication m<0)E(m)is
trivially satisﬁed.
Induction step.
402 CHAPTER 11.FINITEANDINFINITE SETS
Assume that(induction hypothesis )n2X.That means:8m<nE(m).As-
sumption (1)implies, thatE(n)istrue. Combined with theinduction hypothesis,
weobtain that8m<n+1E(m).This means, thatn+12X.Theinduction
stepiscompleted.
Induction nowimplies, thatX=N.According totheremark above,wehavethat
8n2NE(n).
Itisuseful tocompare theproof schemes forinduction andstrong induction. Here
theyare,sidebyside:
E(n)
...
E(0)E(n+1)
8nE(n)8m<nE(m)
...
E(n)
8nE(n)
Analternati vetostrong induction thatisoften used istheminimality principle.
Fact11.4 (Minimality Principle) Every non-empty setofnatur alnumber shasa
least element.
Proof.Assume thatAisanarbitrary setofnatural numbers. Itclearly sufﬁces to
showthat, foreachn2N,
n2A)Ahasaleast element.
For,ifalsoisgiventhatA6=;,then somen2Amust exist. Thus theimplication
applied tosuch anelement yields therequired conclusion.
Here follo wsaproof ofthestatement using strong induction w.r.t.n.Thus, assume
thatnisanarbitrary number forwhich:
Induction hypothesis: foreverym<n:m2A)Ahasaleast element.
Tobeproved:n2A)Ahasaleast element.
Proof: Assume thatn2A.There aretwocases.
(i)nis(bycoincidence) theleast element ofA.Thus,Ahasaleast element.
(ii)nisnotleast element ofA.Then somem2Aexists such thatm<n.Sowe
canapply theinduction hypothesis andagain ﬁndthatAhasaleast element.
Remark. Themore usual proof follo wsthelogic from Chapter 2.This ismuch
more complicated, buthastheadvantage ofshowing theMinimality Principle to
beequivalent with Strong Induction.
11.1.MOREONMATHEMATICALINDUCTION 403
Strong Induction isthefollo wing schema:
8n[8m<nE(m))E(n)])8nE(n):
SinceEcanbeanyproperty ,itcanalsobeanegativeone. Thus:
8n[8m<n:E(m)):E(n)])8n:E(n):
Thecontrapositi veofthisis(Theorem 2.10 p.45):
:8n:E(n)):8n[8m<n:E(m)):E(n)]:
Applying Theorem 2.40 (p.65):
9nE(n))9n:[8m<n:E(m)):E(n)]:
Again Theorem 2.10:
9nE(n))9n[8m<n:E(m)^::E(n)]:
Some ﬁnal transformations eventually yield:
9nE(n))9n[E(n)^:9m<nE(m)]
—which isMinimality formulated using properties.
Exer cise11.5 ProveInduction starting atm,thatis:foreveryXN,ifm2X
and8n>m(n2X)n+12X),then8n2N(m6n)n2X).
Hint. Apply induction tothesetY=fnjm+n2Xg.
Exer cise11.6 Suppose thatXNissuch that12Xand8n2N(n2X)
n+22X).Showthateveryoddnumber isinX.
Deﬁnition 11.7 ArelationonAiscalled well-f ounded ifnoinﬁnite sequence
a2a1a0exists inA.Formulated differently: everysequencea0
a1a2inAeventually terminates.
Example 11.8 According toExercise 4.34 (p.136), therelationonsetsdeﬁned
by:abiff}(a)=b,iswell-founded.
Aneasier example isinthenextexercise.
Exer cise11.9 Showthat<iswell-founded onN.That is:there isnoinﬁnite
sequencen0>n1>n2>.
Hint. Show,using strong induction w.r.t.n,that foralln2N,E(n);where
E(n)signiﬁes thatnoinﬁnite sequencen0=n>n1>n2>starts atn.
Alternati vely,useExercise 11.10.
404 CHAPTER 11.FINITEANDINFINITE SETS
Exer cise11.10 *Well-foundedness asaninduction principle. Letbearela-
tiononasetA.
1.Suppose thatiswell-founded. Assume thatXAsatisﬁes
8a2A(8ba(b2X))a2X):
ShowthatX=A.
Hint. Showthatanya02A Xcanbeused tostart aninﬁnite sequence
a0a1a2inA.
2.Conversely:
Suppose thateveryXAsatisfying8a2A(8ba(b2X))a2X)
coincides withA.Showthatiswell-founded.
Hint. Suppose thata0a1a2,andconsider thesetX=A 
fa0;a1;a2;:::g.
Exer cise11.11 *LetRbearelation onasetA.Recall thatRdenotes thereﬂexive
transiti veclosure ofR,cf.Exercise 5.46 p.173.
1.Assume thatforalla;b1;b22A,ifaRb1andaRb2,thenc2Aexists such
thatb1Rcandb2Rc.
ShowthatRisconﬂuent ,thatis:foralla;b1;b22A,ifaRb1andaRb2,
thenc2Aexists such thatb1Rcandb2Rc.
2.Assume thatRisweakly conﬂuent ,thatis:foralla;b1;b22A,ifaRb1and
aRb2,thenc2Aexists such thatb1Rcandb2Rc.
Acounter -example toconﬂuence iscalled bad.That is:aisbadiffthere
areb1;b22Asuch thataRb1andaRb2,andfornoc2Awehavethat
b1Rcandb2Rc.
Show:ifaisbad, then abadbexists such thataRb.
3.(Inabstract term rewriting theory ,thefollo wing result isknownasNew-
man’ sLemma .)
Assume thatRisweakly conﬂuent.
Furthermore, assume thatR 1iswell-founded.
ShowthatRisconﬂuent.
11.1.MOREONMATHEMATICALINDUCTION 405
Hint. Usepart2;alternati vely,useExercise 11.10.
Remark. ThatR 1iswell-founded isnecessary here.
Forexample,R=f(1;0);(1;2);(2;1);(2;3)gisweakly conﬂuent butnot
conﬂuent.
Exer cise11.12 Suppose that;6=XN,andthatXisbounded ,i.e.:thatm2N
exists such thatforalln2X,n6m.ShowthatXhasamaximum ,thatis:an
elementm2Xsuch thatforalln2X,n6m.
Hint. Induction w.r.t.m.Thus,E(m)is:everynon-emptyXNsuch that
8n2X(n6m),hasamaximum.
Exer cise11.13 Suppose thatf:N!Nissuch thatn<m)f(n)<f(m).
Showbymeans ofaninduction argument thatforalln2N:n6f(n).
Exer cise11.14 Suppose thata0;a1;a2;:::isaninﬁnite sequence ofnatural num-
bers. Provethati;j2Nexistsuch thatbothi<jandai6aj.
Exer cise11.15 Thefunctiong:N+N+!N+hasthefollo wing properties.
1.Ifn<m,theng(n;m)=g(n;m n).
2.g(n;m)=g(m;n).
3.g(n;n)=n.
Showthatg(n;m)isthegcd(greatest common divisor) ofnandm.
Exer cise11.16 *Youplay Smullyan’ sball game onyour own. Before youisa
boxcontaining ﬁnitely manyballs. Everyballcarries anatural number .Nexttothe
box, youhaveasupply ofasmanynumbered balls asyoupossibly need. Amove
inthegame consists inreplacing oneoftheballs intheboxbyarbitrarily (possibly
zero, butﬁnitely) manynewballs thatcarry anumber smaller than thatonthe
oneyoureplace. (Thus, 999balls numbered 7canreplace oneballnumbered 8,
butaballnumbered 0canonly betakenoutoftheboxsince there arenonatural
numbers smaller than 0.)
Repeat thismove.
Showthat, nomatter howyouplay thegame, you’llendupwith anempty box
eventually .(Thus, your lastmovesnecessarily consist inthrowing awayballs num-
bered 0.)
406 CHAPTER 11.FINITEANDINFINITE SETS
Hint. Proof byContradiction. Suppose thatyoucanplay adinﬁnitum, andthatBk
ishowtheboxlooks after yourk-thmove.Deriveacontradiction applying strong
induction w.r.t.thegreatest numbernpresent ononeoftheballs intheboxB0
youstart from. Ifmisthenumber ofballs inB0carryingn,apply asecond strong
induction, noww.r.t.m.
Exer cise11.17 Implement asimpliﬁed version ofSmullyan’ sballgame from the
previous exercise, where (i)theboxofballs isrepresented asalistofintegers, (ii)
itisalwaystheﬁrstintegern>1thatgets replaced, (iii)anintegern>1gets
replaced bytwocopies ofn 1,(iv)thegame terminates with alistconsisting of
justones. Thetype declaration should run:
ballgame ::[Integer] ->[[Integer]].
Howlong will ittakebeforeballgame [50] terminates? Minutes? Hours?
Days? Years?
Exer cise11.18 Thefollo wing theorem implies that, e.g., allinhabitants ofAms-
terdam havethesame number ofhairs.
Theor em:ineverysetofnpeople, everyone hasthesame number ofhairs.
Proof.Induction w.r.t.n.
Basis.n=0(orn=1):trivial.
Induction step. Induction hypothesis: thestatement holds forsetsofnpeople.
Nowassume thatAisan(n+1)-element setofhumans. Arbitrarily choose dif-
ferentpandqinA;weshowthatpandqhavethesame number ofhairs.A fpg
andA fqghavenelements, thus theinduction hypothesis applies tothese sets.
Chooser2A fp;qg.Thenrandqhavethesame number ofhairs (theyareboth
inthesetA fpg);andrandphavethesame number ofhairs (similar reason).
Thus,pandqhavethesame number ofhairs aswell.
Explain thisapparent contradiction with common sense observ ation.
11.2 Equipollence
Inorder tocheck whether twoﬁnite setshavethesame number ofelements, itis
notnecessary atalltocount them. For,these numbers arethesame iffthereisa
bijection between thetwosets.
Sometimes, itismuch easier toconstruct abijection than tocount elements. Imag-
inealargeroom fullofpeople andchairs, andyouwanttoknowwhether there are
asmanypeople asthere arechairs. Inorder toanswer thisquestion, itsufﬁces to
askeveryone tositdown,andhavealook attheresulting situation.
11.2.EQUIPOLLENCE 407
This observ ation motivatesthefollo wing deﬁnition.
Deﬁnition 11.19 (Equipollence) TwosetsAandBarecalled equipollent ifthere
isabijection fromAtoB.
Notation:AB.
Example 11.20 (TrivialbutImportant) ThesetNisequipollent with itsproper
subset N+=N f0g.For,thisiswitnessed bythesuccessor functionn7 !n+1.
Wecangenerate thegraph ofthisfunction inHask ellbymeans of:
succs=[(n,succn)|n<-[0..]].
Ofcourse, thatasetisequipollent with oneofitsproper subsets canonly happen
inthecase ofinﬁnite sets. Theexample showsthatthenotion ofequipollence can
havesurprising properties when applied toinﬁnite sets.
Thefollo wing theorem showsthatisanequivalence.
Theor em11.21 ForallsetsA;B;C:
1.AA (reﬂexivity),
2.AB=)BA (symmetry),
3.AB^BC=)AC (transitivity).
Proof.
1.1Aisabijection fromAtoitself.
2.Iff:A!Bisabijection, thenf 1isabijection :B!A.
3.Iff:A!Bandg:B!Carebijections, thengf:A!Cisabijection
aswell. (Cf.Lemma 6.36, p.223)
Thestandard example ofann-element setisf0;:::;n 1g.(Ofcourse,f1;:::;ng
servesaswell.) This motivatespart1ofthefollo wing deﬁnition.
Deﬁnition 11.22 (Finite, Inﬁnite)
1.Asethasnelements ifitisequipollent withf0;:::;n 1g.
2.Itisﬁnite ifn2Nexists such thatithasnelements.
408 CHAPTER 11.FINITEANDINFINITE SETS
3.Itisinﬁnite ifitisnotﬁnite.
Example 11.23
1.Theset;has0elements, hence;isﬁnite.
2.IfAhasnelements andxisarbitrarily chosen, thenA[fxghasnorn+1
elements (depending onwhetherx2A).Thus, ifAisﬁnite then soisA[fxg.
Theproof ofthefollo wing unsurprising theorem illustrates thedeﬁnitions andthe
useofinduction.
Theor em11.24 Nisinﬁnite .
Proof.Weshow,using induction w.r.t.n,thatforalln2N,
N6f0;:::;n 1g:
Theinduction stepapplies Exercise 11.25.
Basis.
Ifn=0,thenf0;:::;n 1g=;.And anon-empty setlikeNcannot be
equipollent with;.
Induction step.
Induction hypothesis: N6f0;:::;n 1g.
Tobeproved:N6f0;:::;ng.
Proof: Assume that, nevertheless, abijection from Ntof0;:::;ng
exists. According toExercise 11.25 wemay assume there isabi-
jectionf:N!f0;:::;ngsuch thatf(0)=n.Itsrestriction
f(N f0g)(Deﬁnition 6.12 p.214) then isabijection fromN f0g
tof0;:::;n 1g.WehavethatN(N f0g)(This istheTriv-
ialbutImportant Example 11.20). Conclusion (Theorem 11.21.3):
Nf0;:::;n 1g.Butthiscontradicts theinduction hypothesis.
Exer cise11.25 Suppose thatAB,a2Aandb2B.Showthatabijection
f:A!Bexists such thatf(a)=b.
Hint. ByAB,wehaveabijectiong:A!B.If,bycoincidence, g(a)=b,
weletfbeg.Thus, assumeg(a)=b06=b.Sincegissurjecti ve,a02Aexists
such thatg(a0)=b.Makeapicture ofthesituation andlook whether youcanﬁnd
fbysuitably modifyingg.
11.2.EQUIPOLLENCE 409
Exer cise11.26 *Suppose thatAB.Showthat}(A)}(B).Write outthe
bijection, usingf:}(A)!}(B),withf(X)=f[X],forfabijection that
witnessesAB.
Exer cise11.27 Showthat, foreverysetA:}(A)f0;1gA.
Hint. Associate withXAitscharacteristic function ,thatis,thefunctionX:
A!f0;1gdeﬁned by:X(a)=1iffa2X.ThefunctionX7!X(that sends
setstofunctions) isthebijection youarelooking for.
Exer cise11.28 Suppose thatAB.Show:
1.ifAhasnelements,then sohasB,
2.ifAisﬁnite, then soisB,
3.ifAisinﬁnite, then soisB.
Exer cise11.29fisafunction. Showthatfdom(f).
Exer cise11.30 *Suppose thatRisanequivalence onA.V=A=R isthecorre-
sponding quotient. Showthatthesetofallpartitions ofVisequipollent with the
setofallequivalencesQonAforwhichRQ.
Exer cise11.31 *Suppose thatn;m2Nandn<m.Showthatf0;:::;n 1g6
f0;:::;m 1g.
Hint. Use induction toshowthat8n<mf0;:::;n 1g6f0;:::;m 1g.
Emplo ythemethod ofproof ofTheorem 11.24.
Exer cise11.32 Suppose thatXNandm2Naregivesuch that8n2X(n<
m).ShowthatXisﬁnite.
Thefollo wing exercise explains howtoapply induction toﬁnite sets.
Exer cise11.33 *Provethefollo wing induction principle forﬁnite sets.
IfEisaproperty ofsetssuch that
1.E(;),
2.foreverysetAandeveryobjectx62A:ifE(A),then alsoE(A[fxg),
410 CHAPTER 11.FINITEANDINFINITE SETS
thenEholds foreveryﬁnite set.
Hint. Apply induction tothepropertyE0ofnumbers, deﬁned byE0(n)8A[A
hasnelements)E(A)].
Exer cise11.34 *Showthatasubset ofaﬁnite setisﬁnite.
Exer cise11.35 *Showthattheunion oftwoﬁnite setsisﬁnite.
Exer cise11.36 *Suppose thathisaﬁnite injection withdom(h)Aand
rng(h)B.Suppose thatAB.Showthatabijectionf:A!Bexists
such thatfh.(And what, ifhisinﬁnite?)
Hint. Induction onthenumbernofelements ofh.(The casen=1isExer-
cise11.25.)
Exer cise11.37 *Showthataproper subset ofaﬁnite setneverisequipollent with
thatset.
Exer cise11.38 Suppose thatAandBareﬁnite setsandf:A!Babijection.
Show:
1.(B A)(A B),
2.there exists abijectiong:A[B!A[Bsuch thatfg.
Exer cise11.39 *Show:asetAisﬁnite iffthefollo wing condition issatisﬁed for
everycollectionE}(A):if;2Eand8B2E8a2A(B[fag2E),then
A2E.
11.3 Inﬁnite Sets
One ofthegreat disco veries ofCantor isthatforanysetA,theset}(A)is‘larger’
(inasense tomade precise below)thanA.This showstheexistence of‘Cantor’ s
paradise’ ofanabundance ofsetswith higher andhigher grades ofinﬁnity .
11.3.INFINITE SETS 411
AtMostEquipollent To
Recall Deﬁnition 11.19: setsareequipollent means thatthere isabijection be-
tween thetwo.
Deﬁnition 11.40 (AtMost Equipollent To)ThesetAisatmost equipollent toB
ifaninjection exists fromAintoB.
Notation:AB.
Example 11.41 ZR+.
Theor em11.42 Forevery inﬁnite setA:NA.
Proof.Suppose thatAisinﬁnite. Aninjectionh:N!Aasrequired canbe
produced inthefollo wing way.
Note:A6=;(since;isﬁnite). Thus, itispossible tochoose anelementh(0)2A.
Now,A6=fh(0)g(for,fh(0)gisﬁnite). Thus, another elementh(1)2A fh(0)g
exist.
Again,A6=fh(0);h(1)g,etc.
Going on,thisargument produces different elementsh(0);h(1);h(2);:::inA;
thus, thecorresponding functionh:N!Aisaninjection.
Thus, Nisthe“simplest” inﬁnite set.
Exer cise11.43 Show:
1.AA,
2.AB=)AB,
3.AB^BC=)AC,
4.AB=)AB,
Exer cise11.44 *ShowthereverseofTheorem 11.42: ifNA,thenAisinﬁnite.
Hint. Cf.theproof ofTheorem 11.24, p.408. Aslight modiﬁcation (that uses a
modiﬁcation ofExercise 11.25) showsthatforalln,N6f0;:::;n 1g;this
implies what isrequired.
412 CHAPTER 11.FINITEANDINFINITE SETS
Exer cise11.45 Suppose thath:A!Aisaninjection thatisnotsurjecti ve.Say,
b2A rng(h).Deﬁnef:N!Aby:f(0)=b,f(n+1)=h(f(n)).E.g.,
f(3)=h(f(2))=h(h(f(1)))=h(h(h(f(0)))) =h(h(h(b))).
Showthatf(n)isdifferent fromf(0);:::;f(n 1)(n2N).(Induction w.r.t.n.)
Conclusion: fisainjection, andNA.
Exer cise11.46 Show:ifNA,then anon-surjecti veinjectionh:A!A
exists.
Exer cise11.47 Show:asetisinﬁnite iffitisequipollent with oneofitsproper
subsets.
Hint. UseTheorem 11.42 andExercises 11.44, 11.45 and11.46.
Exer cise11.48 Suppose thatAisﬁnite andthatf:A!A.Show:fissurjecti ve
ifffisinjecti ve.
Hint.(:useExercises 11.44 and11.45.
Countably In®nite
Theprototype ofacountably inﬁnite setisN.
Deﬁnition 11.49 (Countable) AsetAiscountably inﬁnite (or: denumer able)if
NA.
Exer cise11.50 *Show:asubset ofacountably inﬁnite setiscountably inﬁnite or
ﬁnite.
Exer cise11.51 Show:
1.Z(thesetofintegers) iscountably inﬁnite,
2.aunion oftwocountably inﬁnite setsiscountably inﬁnite.
Theor em11.52 N2=f(n;m)jn;m2Ngiscountably inﬁnite .
Proof.DeﬁneS(p)=f(n;m)jn+m=pg.
ThesetsS(p)arepairwise disjoint, andN2=S(0)[S(1)[S(2)[:::Moreo ver,
S(p)hasexactlyp+1elements: (0;p);(1;p 1);:::;(p;0).Verify thatthefunction
11.3.INFINITE SETS 413
j:N2!Nthatisdeﬁned byj(n;m)=1
2(n+m)(n+m+1)+nenumerates
thepairs ofthesubsequent setsS(p).
Note thatthefunctionjenumerates N2asfollo ws:
(0;0);(0;1);(1;0);(0;2);(1;1);(2;0);(0;3);(1;2);(2;1);(3;0);:::
Look atallpairs(n;m)asthecorresponding points intwo-dimensional space.
Visualizejasawalkalong these points.
Ofcourse, there aremanyother “walks” along these points thatprovethistheorem.
E.g., (visualize!)
(0;0);(1;0);(1;1);(0;1);(0;2);(1;2);(2;2);(2;1);(2;0);(3;0);(3;1);:::
Theor em11.53 Thesetofpositive rationals Q+iscountably inﬁnite .
Proof.Identify apositi verationalq2Q+with thepair(n;m)2N2forwhichq=
n
mandforwhichnandmareco-prime. UseTheorem 11.52 andExercise 11.50.
Exer cise11.54 ShowthatQiscountably inﬁnite.
Exer cise11.55 ShowthatNiscountably inﬁnite.
Exer cise11.56 Showthataunion ofcountably inﬁnitely manycountably inﬁnite
setsiscountably inﬁnite.
Uncountable
Deﬁnition 11.57 (Less PowerThan) AsetAhaspower lessthanBifbothA
BandA6B.
Notation:AB.
Thus:
AB()AB^A6B:
Example 11.58f0;:::;n 1gN(Theorem 11.24);
NR(Theorem 11.60).
Warning .ThatABimplies butisnotequivalent with:there exists anon-
surjecti veinjection fromAintoB.
414 CHAPTER 11.FINITEANDINFINITE SETS
ThatABmeans bydeﬁnition:ABandA6B.ThatABmeans thatan
injectionf:A!Bexists. If,moreo ver,A6B,then nobijection exists between
AandB;inparticular ,theinjectionfcannot besurjecti ve.
Counter -examples totheconverse: (Example 11.20) thesuccessor -functionn7 !
n+1isanon-surjecti veinjection :N!N,butofcourse itisfalsethatNN;
theidentity function 1Nisanon-surjecti veinjection fromNintoQ,butwedonot
have(Exercise 11.54), thatNQ.
Deﬁnition 11.59 (Uncountable) AsetAisuncountable incaseNA.
Thefollo wing isCantor’ sdisco very.
Theor em11.60 Risuncountable .
Proof.(i)ThatNRisclear (Exercise 11.43.3, NR).(ii)Itmust beshown,
thatnobijectionh:N!Rexists. Infact,there isnosurjection from NtoR.
That is:
Claim. Toeveryfunctionh:N!Rthere exists arealrsuch hatr62ran(h).
Proof.Suppose thath:N!R.Write downthedecimal expansion forevery
realh(n):h(n)=pn+0:rn
0rn
1rn
2,wherepn2Z,pn6h(n)<pn+1,and
decimalsrn
i2f0;1;2;:::;9g.(E.g., p
2= 2+0;15)
Foreveryn,choose adigitrn2f0;1;2;:::;9gsuch thatrn6=rn
n.The real
r=0;r0r1r2then differsfromh(n)initsn-thdecimal digit (n=0;1;2;:::).
However,evenifpn=0,thisdoes notimplyr6=h(n).For,arealcanhavetwo
decimal notations. E.g.,0:5000=0:4999.But, atailofzeros vs.atailof
nines istheonly case forwhich thishappens. So,thisproblem canbeavoided if
werequirerntobedifferent from0and9.
Recall, that}(A)=fXjXAgisthecollection ofallsubsets ofA(Deﬁni-
tion4.22, p.132). Thepowerset operation produces inadirect waysetsofgreater
power.
Inparticular ,notevery uncountable setisequipollent withR.
Theor em11.61A}(A).
Proof.(i)Theinjectiona7!fagfromAinto}(A)showsthatA}(A).
(ii)ToshowthatA6}(A),weexhibit, asintheprevious proof, foreveryfunction
h:A!}(A),anelementD2}(A) rng(h).
11.3.INFINITE SETS 415
Such anelement canbesimply described inthisconte xt:wetakeD=fa2Aj
a62h(a)g.
Ifwewould havethatD2rng(h),thenDwould bethevalue ofsomed2A.
Nowthere aretwocases: eitherd2D,ord62D.
Ifd2D,then, bydeﬁnition ofD,wewould havethatd62h(d)=D:contra-
diction. And ifd62D,then, sinceD=h(d),wewould havethatd62h(d),and
henced2D;again acontradiction.
Conclusion: D62rng(h).
Corollary 11.62 1.N}(N)}(}(N)),
2.forevery setAthereexists asetBsuchthatAB.
Exer cise11.63 Show:
1.A6A,
2.AB()AB_AB,
3.AB^BC=)AC.
4.What iswrong with thefollo wing “proof”for2)?:
GivenisthatAB.Suppose thatf:A!Bisaninjection.
(a)fis(byaccident) surjecti ve.ThenAB.
(b)fisnotsurjecti ve.ThenA6B,henceAB.
Exer cise11.64 Show:ifAisﬁnite, thenAN.
(The converseofthisistrueaswell)
Exer cise11.65 Show:therealinterv al(0;2
9]=fr2Rj0<r62
9gisuncount-
able.
Exer cise11.66Aisaset. Deﬁneh:A!}(A)byh(a)=fag.Determine
fa2Aja62h(a)g.
Exer cise11.67 ShowthatNf0;1gN.
Exer cise11.68 *ShowthatNNN.(NNisthesetofallfunctions :N!N.)
Hint. Produce, foreveryfunction':N!NN,afunctionf2NN rng(').
416 CHAPTER 11.FINITEANDINFINITE SETS
Exer cise11.69 Suppose thath:N!Qissurjecti veandthat weapply the
procedure from theproof ofTheorem 11.60 tohtoproduce arealr.Israrational
ornot?
*Cantor-BernsteinTheorem
Thefollo wing result isoffundamental importance inthetheory ofequipollence.
Theor em11.70 (Cantor -Bernstein)AB^BA=)AB.
Theproof ofthistheorem isdelegated totheexercises.
Note thatwehavetwoexamples ofuncountable sets:R(Theorem 11.60) and}(N)
(Theorem 11.61). Itturns outthatthese setsareofthesame magnitude.
Theor em11.71 R}(N).
Proof.WeshowthatR}(Q)}(N)f0;1gNR.From this, theCantor -
Bernstein Theorem produces therequired conclusion.
1.R}(Q).Thefunctionr7 !fq2Qjq<rgisaninjection fromRinto
}(Q).
2.}(Q)}(N).Choose abijectionh:Q!N(Exercise 11.54, p.413). Now
X7 !h[X]isabijection between}(Q)and}(N)(Exercise 11.26, p.409).
3.}(N)f0;1gN.Cf.Exercise 11.27.
4.f0;1gNR.Associate withh:N!f0;1gthereal(intheinterv al[0;1
9])that
hasdecimal expansion 0;h(0)h(1)h(2).
Continuum Problem andHypothesis.
Since NR,itistempting toaskwhether setsAexistsuch thatNAR.
(Ifso,such anAexists forwhichAR.)This question isCantor’ sContinuum
Problem .(The continuum isthesetR.)
Cantor’ sContinuum Hypothesis asserts thatsuch asetdoes notexist.
Theusual set-theoretic axioms cannot answer thequestion. G¨odel provedin1938
that theaxioms cannot showthat theContinuum Hypothesis isfalse. Cohen
provedin1963 thattheaxioms cannot showthattheContinuum Hypothesis is
true. Indeed, asfarastheaxioms areconcerned, thepowerofRcanbeunimag-
inably bigandthere canbearbitrarily manysetsA;B;C;:::Rsuch that
NABCR.
11.3.INFINITE SETS 417
Example 11.72 Weshowthat[0;1][0;1).Although these interv alsdifferin
only oneelement, establishing abijection between them isfarfrom trivial. (The
reader who doubts thisshould giveitatrybefore reading on.) Letf:[0;1]!
[0;1)beanarbitrary injection; say,f(x)=1
2x.Consider thefollo wing function
h:[0;1]![0;1):hsends 1tof(1)=1
2,1
2tof(1
2)=1
4,1
4tof(1
4)=1
8etc.; on
other argumentsr6=2 nin[0;1],youleth(r)=r.
Verify thathisbijecti ve.Tocheck injecti vity,letr6=s2[0;1].Ifneither ofr;s
isoftheform2 n,then bydeﬁnition ofhwehaveh(r)=r6=s=h(s).Ifboth
areoftheform2 n,sayr=2 iands=2 jwithi6=j,then, bydeﬁnition
ofh,h(r)=2 i 16=2 j 1=h(s).Ifoneofr;sisoftheform2 nandthe
other isnot,then oneofh(r);h(s)isoftheform2 nandtheother isnot,soagain
h(r)6=h(s).This showsthathisinjecti ve.Forsurjecti vity,letr2[0;1).Ifris
notoftheform2 nthenh(r)=r,sothere isans2[0;1]withh(s)=r.Ifris
oftheform2 n,sayr=2 iwithi>0,thenh(2 i+1)=2 i=r.Again, there
isans2[0;1]withh(s)=r.
Lemma 11.73 IfABA,thenAB.
Exer cise11.74 *ProvetheLemma.
Hint. Generalize thesolution forExample 11.72.
Exer cise11.75 *ProveTheorem 11.70.
Hint. Apply Lemma 11.73 tothecomposition ofthetwofunctions thataregiven.
Exer cise11.76 Showthefollo wing variations onthefactthat[0;1][0;1):
1.[0;1][0;2
3),
2.f(x;y)jx2+y261gf(x;y)jx2+y2<1g,
3.f(x;y)jx2+y261gf(x;y)jjxj;jyj<1
2g.
Exer cise11.77 *Suppose thatARisﬁnite orcountably inﬁnite. Showthat
R Aisuncountable. Canyoushowthat(R A)R?
Exer cise11.78 Showthat(R Q)R.
418 CHAPTER 11.FINITEANDINFINITE SETS
11.4 Cantor’ sWorld Implemented
Thefollo wing program illustrates thatN2isdenumerable:
natpairs =[(x,z-x) |z<-[0..],x<-[0..z]]
This gives:
FAIS>natpairs
[(0,0),(0,1),(1,0),(0,2),(1,1 ),(2,0),(0,3),(1,2),(2,1),
(3,0),(0,4),(1,3),(2,2),(3,1) ,(4,0),(0,5),(1,4),(2,3),
(3,2),(4,1),(5,0){Interrupted !}
Exer cise11.79 Implement thefunctionpair::(Int,Int) ->Intthatisthe
inverseofnatpairs .Itshould hold forallnatural numbersnthat
pair(natpairs !!n)=n.
Exer cise11.80 Implement afunctionnatstar ::[[Int]] toenumerate N
(cf.Exercise 11.55).
Thefollo wing code illustrates thatQisdenumerable:
rationals =[(n,m)|(n,m)<-natpairs, m/=0,gcdnm==1]
This gives:
FAIS>rationals
[(0,1),(1,1),(1,2),(2,1),(1, 3),(3,1),(1,4),(2,3),(3,2),(4,1),(1,5),
(5,1),(1,6),(2,5),(3,4),(4,3) ,(5,2),(6,1),(1,7),(3,5),(5,3),(7,1),
(1,8),(2,7),(4,5),(5,4),(7,2) ,(8,1),(1,9),(3,7),(7,3),(9,1),(1,10),
(2,9),(3,8),(4,7),(5,6),(6,5) ,(7,4),(8,3),(9,2),(10,1),(1,11),(5,7),
(7,5),(11,1),(1,12),(2,11),(3 ,10),(4,9),(5,8),(6,7),(7,6),(8,5),(9,4),
(10,3),(11,2),(12,1),(1,13),( 3,11),(5,9),(9,5),(11,3),(13,1),(1,14),
11.4.CANTOR'SWORLDIMPLEMENTED 419
(2,13),(4,11),(7,8),(8,7),(11 ,4),(13,2),(14,1),(1,15),(3,13),(5,11),
(7,9),(9,7),(11,5),(13,3),(15 ,1),(1,16),(2,15),(3,14),(4,13),(5,12),
(6,11),(7,10),(8,9),(9,8),(10 ,7),(11,6),(12,5),(13,4),(14,3),(15,2),
(16,1),(1,17),(5,13),(7,11),( 11,7),(13,5),(17,1),(1,18),(2,17),(3,16),
(4,15),(5,14),(6,13),(7,12),( 8,11),(9,10),(10,9),(11,8),(12,7),(13,6),
(14,5),(15,4),(16,3),(17,2),( 18,1),(1,19),(3,17),(7,13),(9,11),(11,9),
(13,7),(17,3),(19,1),(1,20),( 2,19),(4,17),(5,16),(8,13),(10,11),
(11,10),(13,8),(16,5){Interru pted!}
Thefollo wing code illustrates thatfTrue;FalsegNisnotdenumerable:
diagonal ::(Integer ->[Bool]) ->Integer ->Bool
diagonal fn=not((fn)!!(fromInteger n))
f::Integer ->[Bool]
f0=cycle[False]
f(n+1)=True:fn
Now[fn|n<-[0..]]isalistofstreams ofbooleans, alldifferent, and
diagonal fisanewstream ofbooleans, different from allmembers of
[fn|n<-[0..]].
Here isanillustration forinitial segments ofthelists:
FAIS>[take11(fn)|n<-[0..10] ]
[[False,False,False,False,Fal se,False,False,False,False,False,False],
[True,False,False,False,Fals e,False,False,False,False,False,False],
[True,True,False,False,False ,False,False,False,False,False,False],
[True,True,True,False,False, False,False,False,False,False,False],
[True,True,True,True,False,F alse,False,False,False,False,False],
[True,True,True,True,True,Fa lse,False,False,False,False,False],
[True,True,True,True,True,Tr ue,False,False,False,False,False],
[True,True,True,True,True,Tr ue,True,False,False,False,False],
[True,True,True,True,True,Tr ue,True,True,False,False,False],
[True,True,True,True,True,Tr ue,True,True,True,False,False],
[True,True,True,True,True,Tr ue,True,True,True,True,False]]
FAIS>[diagonal fn|n<-[0..10] ]
[True,True,True,True,True,Tru e,True,True,True,True,True]
420 CHAPTER 11.FINITEANDINFINITE SETS
11.5 *Cardinal Numbers
ByTheorem 11.21, equipollence isanequivalence onthecollection ofallsets.
Deﬁnition 11.81 (Cardinal Number) Acardinal number isanequivalence class
w.r.t.equipollence.
jAjdenotes thecardinal number ofthesetAmodulo.
Thefollo wing isimmediate (cf.Lemma 5.80, p.193):
Lemma 11.82jAj=jBj()AB.
Usually ,thecardinal numberjf0;:::;n 1gjofthen-element setsisidentiﬁed
with thenatural numbern.
Aleph-zer o.@0=jNj.1
Theconcept ofacardinal number canbeconsidered asageneralisation ofthatof
anatural number .
Itispossible togeneralize thedeﬁnitions ofaddition, multiplication andexponen-
tiation tocardinal numbers, andtoprovenatural lawsthatgeneralize those forthe
natural numbers.
Theoperations aredeﬁned asfollo ws.jAj+jBj=jA[Bj(provided thatA\B=
;:only ifAandBaredisjoint setsofnresp.melements does itfollo wthattheir
union hasn+melements),jAjjBj=jABjandjAjjBj=jABj.
Thus, byTheorem 11.71, wehavethatjRj=2@0.
Thecardinal@0isthestarting point ofaninﬁnite series ofcardinal numbers called
alephs :@0<@1<@2<<@!<;(@!isthesmallest cardinal bigger
than every@n).
Using cardinals sometimes makesforamazingly compact proofs. Anexample is
thefollo wing theorem.
Theor em11.83 RRR,i.e.:thereareasmany points intheplane asona
line.
1@(aleph)isthe®rstletteroftheHebrewalphabet.
11.5.CARDIN ALNUMBERS 421
Proof.
jRRj=jRjjRj
=2@02@0
=2@0+@0
=2@0
=jRj:
Thethird equality uses therulenpnq=np+q,thefourth that@0+@0=@0,cf.
Exercise 11.51, p.412.
*Further Exer cises
Exer cise11.84 Suppose thatA1A2andB1B2.Show:
1.ifA1\B1=A2\B2=;,thenA1[B1A2[B2,
2.A1B1A2B2,
3.*AB1
1AB2
2(Hint: itdoes notdotosayjA1B1j=jA1jjB1j=jA2jjB2j=
jA2B2j,forwedon’thavearuleofexponentiation forcardinal numbers as
yet.Instead, showhowtoestablish abijection betweenAB1
1andAB2
2.)
Exer cise11.85 Suppose thatA1A2andB1B2.Show:
1.ifA2\B2=;,thenA1[B1A2[B2,
2.A1B1A2B2,
3.}(A1)}(A2),
4.*ifA26=;,thenAB1
1AB2
2(Hint: Usethefactthat, sinceA26=;,you
canpicka2A2forthedeﬁnition oftheinjection thatyouneed.)
Exer cise11.86 Givecounter -examples tothefollo wing implications:
1.A1A2)A1[BA2[B(A1\B=A2\B=;),
422 CHAPTER 11.FINITEANDINFINITE SETS
2.A1A2)A1BA2B,
3.A1A2)AB
1AB
2,
4.A1A2)BA1BA2.
Exer cise11.87 Show:
1.ifB\C=;,thenAB[CABAC,
2.(AB)CACBC
3.*(AB)CABC.(Hint: usethecurrying operation.)
Exer cise11.88 Show(n>1):
1.f0;1gNf0;:::;ngNNNRNR,
2.f0;1gRf0;:::;ngRNRRR(}(R))R(RR)R.
Exer cise11.89 Show,foralln2N+:NnN(n.b.:NN6N)andRnR(n.b.:
RNR).
Exer cise11.90 Show:f(x;y)2R2jx2+y261^y>0gf(x;y)2R2j
1<y62g.
Exer cise11.91 Show:ifAisinﬁnite andBﬁnite, then(A B)[(B A)A.
TheGreekAlphabet
Mathematicians areinconstant need ofsymbols, andmost ofthem areveryfond
ofGreek letters. Since thisbook might beyour ﬁrstencounter with thisnewsetof
symbols, welisttheGreek alphabet below.
name lower case upper case
alpha 
beta 
gamma   
delta  
epsilon "
zeta 
eta 
theta  
iota 
kappa 
lambda  
mu 
nu 
xi  
pi  
rho 
sigma  
tau 
upsilon  
phi ' 
chi 
psi  	
omega! 
423
424
Bibliograph y
[AHV95] SAbiteboul, R.Hull, andV.Vianu. Foundations ofDatabases .Ad-
dison Wesley,1995.
[Bab61] C.Babbage. OnthePrinciples andDevelopment oftheCalculator .
Dover,1961. Edited andwith anintroduction byP.Morrison andE.
Morrison.
[Bab94] C.Babbage. PassagesfromtheLifeofaPhilosopher .Rutgers Uni-
versity Press andIEEE-Press, NewBrunswick, NewJerse yandPis-
cataway,NewJerse y,1994. Edited with anewintroduction byMartin
Campbell-K elly.Originally published 1864.
[Bal91] V.K.Balakrishnan. Introductory Discr eteMathematics .Dover,1991.
[Bar84] H.Barendre gt.TheLambda Calculus: ItsSyntax andSemantics (2nd
ed.).North-Holland, Amsterdam, 1984.
[Bir98] R.Bird. Introduction toFunctional Programming Using Hask ell.
Prentice Hall, 1998.
[BM96] J.Barwise andL.Moss. Vicious Circles: OntheMathematics of
Non-wellfounded Phenomena .CSLI Publications, 1996.
[Bry93] V.Bryant. Yetanother introduction toanalysis .Cambridge University
Press, 1993.
[Bur98] Stanle yN.Burris. LogicforMathematics and Computer Science .
Prentice Hall, 1998.
[CG96] J.H.Conw ayandR.K. Guy.TheBook ofNumber s.Springer ,1996.
[CR78] R.Courant andH.Robbins. What isMathematics? AnElementary
Appr oachtoIdeas andMethods .Oxford University Press, Oxford,
1978.
425
426 BIBLIOGRAPHY
[CrbIS96] R.Courant andH.Robbins (revised byI.Stewart). What isMath-
ematics? AnElementary Appr oachtoIdeas andMethods (Second
Edition) .Oxford University Press, Oxford, 1996.
[Doe96] H.C. Doets. Wijzer inWiskunde .CWI, Amsterdam, 1996. Lecture
notes inDutch.
[DP02] B.A. DaveyandH.A. Priestle y.Introduction toLattices andOrder
(Second Edition) .Cambridge University Press, Cambridge, 2002.
First edition: 1990.
[DvDdS78] K.Doets, D.vanDalen, andH.deSwart. Sets: Naive ,Axiomatic,
andApplied .Pergamon Press, Oxford, 1978.
[Ecc97] P.J.Eccles. AnIntroduction toMathematical Reasoning .Cambridge
University Press, 1997.
[EFT94] H.-D. Ebbinghaus, J.Flum, andW.Thomas. Mathematical Logic.
Springer -Verlag, Berlin, 1994. Second Edition.
[Euc56] Euclid. TheThirteen Books oftheElements, with Introduction and
Commentary bySirThomas L.Heath .Dover,1956.
[Fok00] W.Fokkink. Introduction toProcess Algebra.Springer ,2000.
[GKP89] R.L. Graham, D.E. Knuth, andO.Patashnik. Concr eteMathematics .
Addison Wesley,Reading, Mass, 1989.
[Har87] D.Harel. Algorithmics: TheSpirit ofComputing .Addison-W esley,
1987.
[HFP96] P.Hudak, J.Fasel, andJ.Peterson. Agentle introduction toHask ell.
Technical report, YaleUniversity ,1996. Available from theHask ell
homepage: http://www.haske ll.org.
[Hin97] J.Roger Hindle y.Basic Simple TypeTheory .Cambridge University
Press, 1997.
[HO00] C.Hall andJ.O’Donnell. Discr eteMathematics Using AComputer .
Springer ,2000.
[HR00] M.Huth andM.Ryan. LogicinComputer Science: Modelling and
Reasoning about Systems .Cambridge University Press, 2000.
[HT] TheHask ellTeam. TheHask ellhomepage. http://www.haskel l.
org.
BIBLIOGRAPHY 427
[Hud00] P.Hudak. TheHask ellSchool ofExpr ession: Learning Functional
Programming Through Multimedia .Cambridge University Press,
2000.
[Jon03] S.Peyton Jones, editor .Hask ell98Langua geand Libraries; The
Revised Report .Cambridge University Press, 2003.
[JR+] Mark P.Jones, Alastair Reid, etal.TheHugs98 user manual.http:
//www.haskell.or g/hugs/.
[Kar97] J.Karczmarczuk. Generating poweroflazy semantics. Theor etical
Computer Science ,187, 1997.
[Knu92] D.E. Knuth. Liter ateProgramming .CSLI Lecture Notes, no.27.
CSLI, Stanford, 1992.
[Lar34] D.Lardner .Babbage’ scalculating engine. Edinb urghReview,1834.
[McI99] M.D. McIlro y.Powerseries, powerserious. Journal ofFunctional
Programming ,9:323–335, 1999.
[McI00] M.D. McIlro y.Themusic ofstreams. ElsevierPreprints ,2000.
[Mil99] R.Milner .Communicating and Mobile Systems: theCalculus .
Cambridge University Press, 1999.
[Ore88] O.Ore. Number Theory anditsHistory .Dover,1988.
[Pol57] G.Polya. How toSolve It.ANewAspect ofMathematical Method .
Princeton University Press, Princeton, 1957.
[RL99] F.Rabhi andG.Lapalme. Algorithms: aFunctional Programming
Appr oach.Addison-W esley,1999.
[Rus67] B.Russell. Letter toFrege.InJ.vanHeijenoord, editor ,FromFrege
toG¨odel,pages 124–125. Harv ardUniversity Press, 1967.
[Rut00] J.J.M.M. Rutten. Beha vioural differential equations: acoinducti ve
calculus ofstreams, automata, andpowerseries. Report SEN-R0023,
CWI, 2000. Available atURL: www .cwi.nl. Toappear inTheoretical
Computer Science.
[SKS01] A.Silberschatz, H.F.Korth, andS.Sudarshan. Database System Con-
cepts (4thedition) .McGra w-Hill, 2001.
[Tho99] S.Thompson. Hask ell:thecraftoffunctional programming (second
edition) .Addison Wesley,1999.
428 BIBLIOGRAPHY
[Vel94] D.J. Velleman. How toProveIt.AStructur edAppr oach.Cambridge
University Press, Cambridge, 1994.
Index
(a;b),136
:=,32
:,61
A=R ,194
Ac,131
R 1,163
A,163
\,127
[,127
dom(R),162
;,126
^,29,31
_,29,32
,,29,35
:,29,30
:n,247
}(X),132
),29,33
ran(R),162
fag,125
fx2AjPg,118
fxjPg,118
jaj,192Pn
k=1ak,54,241
&&,17,31,141
||,32
(.),69
(.*) ,354
(opx),21
(xop),21
(x1,x2) ,139
+,6--,122
->,9,142
.,69,222
/,15
/=,5,124
::,9
:l,2
:r,5
:t,9
<,124
<+>,36
<=,124
<=,13
<=>,36
=,5
==,5,124
==>,33
<,8
>=,8
@,175
[a],18
[n..m] ,120
Zn,195
\\,150
\,46
_,141 n
k
,346
?,46,84
dom(f),206
n,189
x:t,58
(modn),189
429
430 INDEX
ran(f),206n
k	
,197
>,46
^,6,119
djn,56
e,221
n!,213
|,6,246
,407
‘abc’-formula, 59
absReal ,207
add,267
addElem ,151
adjustWith ,340
Alexander theGreat, v
algebra
ofsets, 127
all,68
and,42,268
antisymmetric relation, 167
any,68
approx ,375
approximate ,319
apprx ,319
Apt, K.R., ix
arbitrary object, 92
assignment statement, 24
asymmetric relation, 167
average ,15
axiomatics, 114
Babbage, C.,334
backsubst ,342
ballgame ,406
bell ,198
Bell numbers, 198
Benthem, J.van,ix
Bergstra, J.,ix
bijection, 218
bijective ,219
bijectivePairs ,219binary ,288
binding powerofoperators, 33
binomial theorem, 346, 347
BinTree ,257
bisimulation, 380
black hole, 276
Bool ,8,30
Boolean function, 39
brack ets,215
Brouwer ,L.E.J, 29
Brunekreef, J.,ix
Cantor’ scontinuum hypothesis, 416
Cantor’ stheorem, 414
Cantor ,G.,114
Cantor -Bernstein theorem, 416
cardinal number ,420
case ,142
cat,265
Catalan numbers, 254, 394
chain, 169
characteristic function, 182
chr,228
Church, A.,1,64
class, 124
class ,227
clock ,367
closed form, 212
closures ofarelation, 170
co-domain
function, 209
co-image, 214
co-prime, 291
coprime ,291
Cohen, P.J.,416
coImage ,215
coImagePairs ,216
coinduction, 382
cols ,339
comp ,223, 389
compare ,141
INDEX 431
comparison property ,169
completeness, 168
comple xnumbers, 320
complR ,178
composition
function –,69,222
conﬂuence, 404
congruence, 236
conjunction, 31
constructor ,12
constructor identiﬁer ,12
continue ,335
continuity ,66,315
continuum problem, 416
contradiction, 48
contraposition, 35
converse, 35
conversion, 15
convolution, 354
Coquand, T.,ix
corecursion, 362
corecursi vedeﬁnition, 362
countable, 412
curry ,183
Curry ,H.B., 1,183
curry3 ,210
CWI, ix
data ,139, 257
data ,30,145
database query ,145
decExpand ,307
decForm ,308
decodeFloat ,311
deduction rule, 78
default ,362
delete ,149
deleteSet ,156
delta ,355
denumerable, 412
deriv ,358deriving ,140
destructi veassignment, 24
diagonal ,419
difLists ,334
difs ,332
disjunction, 32
display ,158
div,20
divergence, 122
divides ,5,183
domain, 162
Double ,17,311
e2o,397
echelon ,341
echelon matrix form, 338
elem ,123
elem ,151
elem' ,150
elemIndex ,308
eliminate ,341
else ,230
emptySet ,156
encodeFloat ,312
Enum ,227
enum_2 ,107
EQ,141
Eq,124, 246
eq,184
eq1,298
equalSize ,190
equation guarding, 6
equational reasoning, 24
equipollent, 406
equiv2listpart ,199
equiv2part ,199
equivalence, 35
equivalence ,188
equivalence' ,188
Eratosthenes
sieveof—,105
432 INDEX
error ,8,230
Erven,T.van,ix
Euclid, 103, 290
Euclid’ sGCD algorithm, 290
Euler ,L.,104
even ,81,222
evens ,81,362
evens1 ,118
evens2 ,119
every ,69
exception handling, 230
exclaim ,252
exp,221
expn ,253
exponent ,312
fac,213
fac' ,213
False ,4,30
fasterprimes ,107
fct2equiv ,232
fct2list ,207
fct2listpart ,234
Fermat, P.de,104
fib,254
fib' ,254
Fibonacci numbers, 253, 254, 363
ﬁeld, 301
filter ,22
ﬁxity declaration, 33
flip ,184
Float ,15,311
floatDigits ,312
Floating ,311
floatRadix ,311
Fokkink, W.,ix
foldl ,269
foldn ,252
foldr ,266
foldr1 ,268
foldT ,262forall ,12
Fraenk el,A.,114
fromEnum ,227
fromInt ,15
fromTower ,281
fst,139
function, 205
domain, 206
function composition, 69,222
fundamental theorem
ofalgebra, 320
ofarithmetic, 293
G¨odel, K.,416
Gaussian elimination, 337
gcd,291
genDifs ,335
genMatrix ,339
GIMPS, 108
GNU’ sNotUnix, 362
Goldre yer,D.,28
Goris, E.,ix
greatest common divisor
deﬁnition, 290
Euclid’ salgorithm for—,290
properties, 405
GT,141
gt1,299
guard, 7
guarded equation, 6
Haan, R.de,ix
halting problem, 121
hanoi ,276
hanoi' ,280
hanoiCount ,280
Hask ell,1
head ,142
Heman, S.,ix
hex,289
Hoogland, E.,ix
INDEX 433
id,207
idR,175
Iemhof f,R.,ix
ifthenelse ,230
iff,30
ILLC, ix
image, 214
image ,215
imagePairs ,216
implication, 33
import ,72
in,15
induction, 239, 240, 400
strong, 401
inﬁnity
ofprimes, 103
inﬁx, 4
infix ,33
inﬁx notation, 21
infixl ,156
infixr ,156
init ,143
injection, 218
injective ,219
injectivePairs ,219
injs ,221
inorder treetraversal, 262
inR,178
insertSet ,156
inSet ,155
instance
ofatype class, 124
instance ,140
Int,11
int,388
Integer ,9,11
integers, 294
Integral ,11
integralrational functions, 331
intersect ,150
intransiti verelation, 168intToDigit ,288, 289
intuitionism, 29
inverse ,184
invR ,178
irrational numbers, 311
irrationality
ofp
2,309
irreﬂe xiverelation, 166
irreflR ,179
isAlpha ,232
isEmpty ,156
iterate ,313, 336, 363
Jongh, D.de,ix
Just ,231
Kalde waij,A.,ix
labeled transition system, 365
lambda abstraction, 46,58,145, 211
lambda term, 58
last ,143
law
associati vity,46,247, 249
commutati vity,46,247, 249
contraposition, 45
DeMor gan, 46,132
distrib ution, 46
distrib utivity,249
dominance, 48
double negation, 45
excluded middle, 48
idempotence, 45
identity ,48
lazy list,23,105
lazy pattern, 373
LD,4
ldp,23
ldpf ,23
leaftree, 263
LeafTree ,263
lefttriangular matrix form, 338
434 INDEX
len,265
length ,15
leq,250
leq1 ,299
lessEq ,184
let,15
lexicographical order ,141
limit, 315
linear relation, 169
list,16,139
listcomprehension, 42,54,118
list2fct ,207
list2set ,156
listpart2equiv ,199
listPartition ,199
listRange ,208
lists, 139
listValues ,208
ln,267
ln',272
load Hask ellﬁle,2
logBase ,281
LT,141
Lucas numbers, 394
Main> ,5
mantissa, 311
map,21,151, 272
mapLT ,264
mapR ,264
mapT ,261
Matrix ,338
matrix, 338
maxBound ,208
Maybe ,231
maybe ,231
mechanic’ srule, 313
mechanics ,313
mechanicsRule ,313
Menaechmus, v
Mersenne, M.,104min,13
minBound ,208
mkStdGen ,366
mlt,267
mnmInt ,13
mod, modulo, 190
module ,2
modulo ,190
Modus Ponens, 80
mult ,252
mult1 ,298
mySqrt ,319
n-tuples, 139
Napier’ snumber ,221, 395
natpairs ,418
natstar ,418
Natural ,246
natural logarithm, 221
natural number ,246
naturals ,118, 362
necessary condition, 35
negate ,222
negation, 30
Newman’ sLemma, 404
Newman, B.,28
Newton’ smethod, 313
Newton, I.,346
newtype ,153
next ,335
nextD ,335
nondeterminism, 365
not,30
notElem ,151
Nothing ,231
Nuall ´ain,B.´O,ix
nub,144
null ,143
Num,124
o2e,396
odd,222
INDEX 435
odds ,362
odds1 ,119
oddsFrom3 ,107
of,142
one-to-one, 218
ones ,125
ones ,362
onto, 218
Oostrom, V.van,ix
open problems, 109, 111
operation, 236
operator precedence, 42
or,268
Ord,124
Ord,141
ord,228
order
partial —,168
strict partial —,168
total —,169
Ordering ,141
otherwise ,7
overloading, 125
p2fct ,343
pair ,418
pairs, 136
paradox
halting —,121
Russell —,120
part2error ,231
partial functions, 229
partial order ,168
Pascal’ striangle, 348
Pascal, B.,348
pattern matching, 13,143, 250
perms ,221
Platonism, 28
plus ,247
plus ,252
plus1 ,298po-set reﬂection, 195
polynomial, 320
polynomials, 331
polynomials andcoefﬁcient lists, 344
Ponse, A.,ix
postorder treetraversal, 262
powerseries, 387
powerList ,151
powerSet ,156
pre,253
pre-order ,168
pred ,227
preﬁx, 4
prefix ,17
preﬁx notation, 21
Prelude> ,2
Prelude ,26
preorder treetraversal, 262
primCompAux ,142
prime ,23
prime factorization algorithm, 19
prime'' ,165
prime0 ,8
primes
deﬁnition, 60
Mersenne —,105
primes ,106
primes' ,364
primes0 ,22
primes1 ,23
principle
comprehension —,114
minimality —,402
Process ,366
product
ofsets, 136
product ,213
propositional function, 39
ptd,369
quasi-order ,168
436 INDEX
quotient, 194
quotient ,251
quotRem ,286
raccess ,194
random numbers, 366
random streams, 366
Random.hs ,361
randomInts ,366
randomRs ,366
ranPairs ,208
Rational ,341
rationals, 299
countability of—,413
rationals ,418
rclosR ,182
reals, 310
uncountability of—,414
recip ,313
recurrence, 212
recursion, 246
recursi vedeﬁnition, 7,246
reduce1 ,298
reflect ,264
reﬂexiveclosure, 171
reﬂexiverelation, 166
reﬂexivetransiti veclosure, 171
reflR ,178
relation
antisymmetric —,167
asymmetric —,167
between, 162
domain, 162
from—to, 162
intransiti ve—,168
irreﬂe xive—,166
linear —,169
range, 162
reﬂexive—,166
symmetric —,166
transiti ve—,167relati velyprime, 291
reload Hask ellﬁle,5
rem,5
remainder ,251
removeFst ,14
reserv edkeywords, 12
restrict ,214
restrictPairs ,214
restrictR ,182
rev,269
rev' ,270
rev1 ,272
Rodenb urg,P.,ix
rose tree, 264
rows ,339
royalroad tomathematics, v
Russell, B.,57,120
Rutten, J.,ix
sclosR ,182
sections, 21
Seta,153
Show ,246
showDigits ,289
showSet ,155
sieve ,106, 364
sieveofEratosthenes, 105
sieve' ,364
significand ,312
sin,221
singleton, 125
small_squares1 ,119
small_squares2 ,120
Smullyan’ sballgame, 405
Smullyan, R.,405
snd,139
solveQdr ,59
solveSeq ,342
solving quadratic equations, 59
some ,69
soundness, 168
INDEX 437
space leak, 276
split ,263
splitAt ,308
splitList ,144
sqrt ,59,221
sqrtM ,313
srtInts ,14
start ,366
stirling ,198
Stirling setnumbers, 198
stream, 362
stream bisimulation, 383
strict partial order ,168
String ,16
String ,16
stringCompare ,232
subdomain, 53
substitution principle, 48
subtr ,251
subtr ,253
subtr1 ,298
succ ,227
successor ,246
sufﬁcient condition, 35
sum,241
sum,15,54,241
sumCubes ,245
sumCubes' ,245
sumEvens ,242
sumEvens' ,242
sumInts ,242
sumOdds ,241
sumOdds' ,241
sumSquares ,243
sumSquares' ,243
surjection, 218
surjective ,219
surjectivePairs ,219
Swaen, M.,ix
symmetric closure, 171
symmetric difference, 132symmetric relation, 166
symR ,179
tail ,142
take ,107
takeWhile ,313
tan,221
tclosR ,182
Terlouw ,J.,ix
theFibs ,363
then ,230
theNats ,363
theNats1 ,363
theOdds ,363
theOnes ,363
toBase ,289
toEnum ,227
total order ,169
totalR ,178
toTower ,281
towerofHanoi, 273
transClosure' ,187
transition system, 365
transiti veclosure, 171
transiti verelation, 167
transR ,179
tree
leaf–,263
rose —,264
treetraversal, 262
trivially truestatements, 34
Tromp, J.,ix
True ,4,30
truncate ,281
truth function, 39
Turing, A.,64
type, 8,17,53,121, 140
type ,145
type conversion, 15
type declaration, 9
type judgment, 10
438 INDEX
type variables, 18
uncountable, 413
uncurry ,183
uncurry3 ,210
undefined ,122
undefined ,375
union ,150
VanBenthem, J.,ix
variable identiﬁer ,12
vending ,367
Venema, Y.,ix
Visser,A.,ix
Vries, F.J.de,ix
weak conﬂuence, 404
Wehner ,S.,ix
well-founded, 245, 403
where ,2,14
Who isAfraid ofRed, Yellowand
Blue, 28
wild card, 12
wildcard, 141
z,353
Zermelo, E.,114
zipWith ,339, 363
