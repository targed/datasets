TheJavaEE6Tutorial
PartNo:821–1841–16
January2013
Copyright©2013,Oracleand/oritsaffiliates.Allrightsreserved.
CopyrightandLicense:TheJavaEE6Tutorial
ThistutorialisaguidetodevelopingapplicationsfortheJavaPlatform,EnterpriseEditionandcontainsdocumentation( "Tutorial ")andsamplecode.The "sample
code "madeavailablewiththisTutorialislicensedseparatelytoyoubyOracleunderthe Berkeleylicense .Ifyoudownloadanysuchsamplecode,youagreetothe
termsoftheBerkeleylicense.
ThisTutorialisprovidedtoyoubyOracleunderthefollowinglicensetermscontainingrestrictionsonuseanddisclosureandisprotectedbyintelle ctualproperty
laws.Oraclegrantstoyoualimited,non-exclusivelicensetousethisTutorialforinformationpurposesonly,asanaidtolearningabouttheJavaEEp latform.Except
asexpresslypermittedintheselicenseterms,youmaynotuse,copy,reproduce,translate,broadcast,modify,license,transmit,distribute,exhi bit,perform,publish,
ordisplayanypart,inanyform,orbyanymeansthisTutorial.Reverseengineering,disassembly,ordecompilationofthisTutorialisprohibited.
Theinformationcontainedhereinissubjecttochangewithoutnoticeandisnotwarrantedtobeerror-free.Ifyoufindanyerrors,pleasereportthemto usinwriting.
IftheTutorialislicensedonbehalfoftheU.S.Government,thefollowingnoticeisapplicable:U.S.GOVERNMENTRIGHTSPrograms,software,databases,andrelateddocumentationandtechnicaldatadeliveredtoU.S.Governmentcustomersare
"commercialcomputersoftware "or"commercialtechnicaldata "pursuanttotheapplicableFederalAcquisitionRegulationandagency-specificsupplemental
regulations.Assuch,theuse,duplication,disclosure,modification,andadaptationshallbesubjecttotherestrictionsandlicensetermssetfort hintheapplicable
Governmentcontract,and,totheextentapplicablebythetermsoftheGovernmentcontract,theadditionalrightssetforthinFAR52.227-19,Commerc ial
ComputerSoftwareLicense(December2007).OracleUSA,Inc.,500OracleParkway,RedwoodCity,CA94065.
ThisTutorialisnotdevelopedorintendedforuseinanyinherentlydangerousapplications,includingapplicationswhichmaycreateariskofperson alinjury.Ifyou
usethisTutorialindangerousapplications,thenyoushallberesponsibletotakeallappropriatefail-safe,backup,redundancy,andothermeasure stoensurethesafe
use.
THETUTORIALISPROVIDED "ASIS "WITHOUTWARRANTYOFANYKIND.ORACLEFURTHERDISCLAIMSALLWARRANTIES,EXPRESSAND
IMPLIED,INCLUDINGWITHOUTLIMITATION,ANYIMPLIEDWARRANTIESOFMERCHANTABILITY,FITNESSFORAPARTICULARPURPOSEORNONINFRINGEMENT.
INNOEVENTSHALLORACLEBELIABLEFORANYINDIRECT,INCIDENTAL,SPECIAL,PUNITIVEORCONSEQUENTIALDAMAGES,OR
DAMAGESFORLOSSOFPROFITS,REVENUE,DATAORDATAUSE,INCURREDBYYOUORANYTHIRDPARTY,WHETHERINANACTIONINCONTRACTORTORT,EVENIFORACLEHASBEENADVISEDOFTHEPOSSIBILITYOFSUCHDAMAGES.ORACLE'SENTIRELIABILITYFORDAMAGESHEREUNDERSHALLINNOEVENTEXCEEDONETHOUSANDDOLLARS(U.S.$1,000).
NoTechnicalSupportOracle'stechnicalsupportorganizationwillnotprovidetechnicalsupport,phonesupport,orupdatestoyou.OracleandJavaareregisteredtrademarksofOracleand/oritsaffiliates.Othernamesmaybetrademarksoftheirrespectiveowners.ThesamplecodeandTutorialmayprovideaccesstoorinformationoncontent,products,andservicesfromthirdparties.OracleCorporationanditsaffi liatesare
notresponsibleforandexpresslydisclaimallwarrantiesofanykindwithrespecttothird-partycontent,products,andservices.OracleCorporati onanditsaffiliates
willnotberesponsibleforanyloss,costs,ordamagesincurredduetoyouraccesstooruseofthird-partycontent,products,orservices.
130131@25097
Contents
Preface............................................................................................................................... ....................31
PartI Introduction ............................................................................................................................... ..........35
1 Overview ............................................................................................................................... ................37
JavaEE6PlatformHighlights ...................................................................................................... ......38
JavaEEApplicationModel ......................................................................................................... ........39
DistributedMultitieredApplications ............................................................................................. ..39
Security....................................................................................................................... ...................41
JavaEEComponents ............................................................................................................... ....42
JavaEEClients.................................................................................................................. ............42
WebComponents .................................................................................................................. ......44
BusinessComponents ............................................................................................................. ....45
EnterpriseInformationSystemTier..........................................................................................46
JavaEEContainers ............................................................................................................... ...............47
ContainerServices .............................................................................................................. .........47
ContainerTypes................................................................................................................. ..........48
WebServicesSupport ............................................................................................................. ............49
XML ............................................................................................................................ ...................49
SOAPTransportProtocol .......................................................................................................... .50
WSDLStandardFormat............................................................................................................. .50
JavaEEApplicationAssemblyandDeployment .............................................................................50PackagingApplications .......................................................................................................... ............51
DevelopmentRoles ............................................................................................................... ..............52
JavaEEProductProvider .......................................................................................................... ..53
ToolProvider................................................................................................................... .............53
ApplicationComponentProvider .............................................................................................53
3
ApplicationAssembler ........................................................................................................... .....54
ApplicationDeployerandAdministrator.................................................................................54
JavaEE6APIs .................................................................................................................... ..................55
EnterpriseJavaBeansTechnology..............................................................................................58JavaServletTechnology .......................................................................................................... ....59
JavaServerFacesTechnology...................................................................................................... 59
JavaServerPagesTechnology .....................................................................................................6 0
JavaServerPagesStandardTagLibrary .....................................................................................60JavaPersistenceAPI............................................................................................................. ........61
JavaTransactionAPI ............................................................................................................. ......61
JavaAPIforRESTfulWebServices ...........................................................................................61ManagedBeans ................................................................................................................... .........61
ContextsandDependencyInjectionfortheJavaEEPlatform(JSR299) .............................62DependencyInjectionforJava(JSR330) ..................................................................................62BeanValidation................................................................................................................. ...........62
JavaMessageServiceAPI .......................................................................................................... ..63
JavaEEConnectorArchitecture ................................................................................................63JavaMailAPI .................................................................................................................... .............63
JavaAuthorizationContractforContainers ............................................................................63JavaAuthenticationServiceProviderInterfaceforContainers .............................................64
JavaEE6APIsintheJavaPlatform,StandardEdition6and7 ......................................................64
JavaDatabaseConnectivityAPI.................................................................................................64JavaNamingandDirectoryInterfaceAPI ................................................................................65JavaBeansActivationFramework ..............................................................................................65JavaAPIforXMLProcessing .....................................................................................................65JavaArchitectureforXMLBinding ...........................................................................................66SOAPwithAttachmentsAPIforJava........................................................................................66JavaAPIforXMLWebServices .................................................................................................66JavaAuthenticationandAuthorizationService .......................................................................67
GlassFishServerTools ........................................................................................................... .............67
2 UsingtheTutorialExamples ..............................................................................................................69
RequiredSoftware ............................................................................................................... ................69
JavaPlatform,StandardEdition.................................................................................................69JavaEE6SoftwareDevelopmentKit .........................................................................................70Contents
TheJavaEE6Tutorial • January2013 4
JavaEE6TutorialComponent...................................................................................................70
NetBeansIDE .................................................................................................................... ...........71
ApacheAnt ...................................................................................................................... .............72
StartingandStoppingtheGlassFishServer......................................................................................73
▼ToStarttheGlassFishServerUsingNetBeansIDE .................................................................74
StartingtheAdministrationConsole ............................................................................................... .74
▼ToStarttheAdministrationConsoleUsingNetBeansIDE ...................................................74
StartingandStoppingtheJavaDBServer.........................................................................................75
▼ToStarttheDatabaseServerUsingNetBeansIDE ..................................................................75
BuildingtheExamples ............................................................................................................ ............75
TutorialExampleDirectoryStructure .............................................................................................. 76
GettingtheLatestUpdatestotheTutorial .......................................................................................77
▼ToUpdatetheTutorialthroughtheUpdateCenter................................................................77
DebuggingJavaEEApplications .................................................................................................... ...77
UsingtheServerLog .............................................................................................................. ......77
UsingaDebugger................................................................................................................. ........78
PartII TheWebTier ............................................................................................................................... ..........79
3 GettingStartedwithWebApplications ...........................................................................................81
WebApplications ................................................................................................................ ................81
WebApplicationLifecycle ........................................................................................................ .........83
WebModules:The hello1Example.................................................................................................84
Examiningthe hello1WebModule .........................................................................................85
PackagingaWebModule............................................................................................................ 88
DeployingaWebModule ...........................................................................................................9 0
RunningaDeployedWebModule ............................................................................................90ListingDeployedWebModules .................................................................................................91UpdatingaWebModule ............................................................................................................. 91
DynamicReloading ............................................................................................................... ......91
UndeployingWebModules........................................................................................................92
ConfiguringWebApplications:The hello2Example ...................................................................93
MappingURLstoWebComponents ........................................................................................93Examiningthe hello2WebModule .........................................................................................94
Runningthe hello2Example.....................................................................................................95Contents
5
DeclaringWelcomeFiles .......................................................................................................... ..97
SettingContextParameters ....................................................................................................... .97
MappingErrorstoErrorScreens ...............................................................................................98DeclaringResourceReferences ..................................................................................................99
FurtherInformationaboutWebApplications...............................................................................101
4 JavaServerFacesTechnology ..........................................................................................................103
WhatIsaJavaServerFacesApplication?.........................................................................................104JavaServerFacesTechnologyBenefits ............................................................................................105CreatingaSimpleJavaServerFacesApplication............................................................................106
DevelopingtheManagedBean.................................................................................................106CreatingtheWebPage ............................................................................................................. .107
Mappingthe FacesServlet Instance ......................................................................................108
TheLifecycleofthe helloApplication ...................................................................................108
Runningthe helloApplication ...............................................................................................109
FurtherInformationaboutJavaServerFacesTechnology............................................................110
5 IntroductiontoFacelets ...................................................................................................................111
WhatIsFacelets?................................................................................................................ ................111
DevelopingaSimpleFaceletsApplication .....................................................................................113
CreatingaFaceletsApplication ................................................................................................113ConfiguringtheApplication.....................................................................................................11 6
Runningthe guessnumber FaceletsExample .........................................................................117
UsingFaceletsTemplates ......................................................................................................... ........119
CompositeComponents ............................................................................................................ ......121
WebResources................................................................................................................... ................123
6 ExpressionLanguage ........................................................................................................................125
OverviewoftheEL ................................................................................................................ ............125
ImmediateandDeferredEvaluationSyntax ..................................................................................126
ImmediateEvaluation ............................................................................................................ ...127
DeferredEvaluation............................................................................................................. ......127
ValueandMethodExpressions ...................................................................................................... .128
ValueExpressions ............................................................................................................... .......128Contents
TheJavaEE6Tutorial • January2013 6
MethodExpressions .............................................................................................................. ....132
DefiningaTagAttributeType ....................................................................................................... ..134
LiteralExpressions ............................................................................................................. ...............135
Operators...................................................................................................................... ......................136
ReservedWords.................................................................................................................. ...............136
ExamplesofELExpressions........................................................................................................ .....137
7 UsingJavaServerFacesTechnologyinWebPages ......................................................................139
SettingUpaPage ................................................................................................................. ..............139
AddingComponentstoaPageUsingHTMLTags .......................................................................140
CommonComponentTagAttributes .....................................................................................142AddingHTMLHeadandBodyTags .......................................................................................145AddingaFormComponent .....................................................................................................146UsingTextComponents ...........................................................................................................1 47
UsingCommandComponentTagsforPerformingActionsandNavigation ...................152AddingGraphicsandImageswiththe h:graphicImage Tag...............................................153
LayingOutComponentswiththe h:panelGrid andh:panelGroup Tags .........................154
DisplayingComponentsforSelectingOneValue .................................................................156DisplayingComponentsforSelectingMultipleValues ........................................................158Usingthe f:selectItem andf:selectItems Tags ..............................................................159
DisplayingtheResultsfromSelectionComponents .............................................................161UsingData-BoundTableComponents ..................................................................................161DisplayingErrorMessageswiththe h:message andh:messages Tags ..............................164
CreatingBookmarkableURLswiththe h:button andh:linkTags...................................165
UsingViewParameterstoConfigureBookmarkableURLs.................................................166Thebookmarks ExampleApplication......................................................................................167
ResourceRelocationUsing h:outputScript andh:outputStylesheet Tags .................169
UsingCoreTags .................................................................................................................. ..............171
8 UsingConverters,Listeners,andValidators .................................................................................175
UsingtheStandardConverters..................................................................................................... ...175
ConvertingaComponent’sValue............................................................................................176Using DateTimeConverter .......................................................................................................177
Using NumberConverter ...........................................................................................................179
RegisteringListenersonComponents............................................................................................180Contents
7
RegisteringaValue-ChangeListeneronaComponent ........................................................181
RegisteringanActionListeneronaComponent ...................................................................182
UsingtheStandardValidators..................................................................................................... ....183
ValidatingaComponent’sValue .............................................................................................185Using LongRangeValidator .....................................................................................................185
ReferencingaManagedBeanMethod ............................................................................................186
ReferencingaMethodThatPerformsNavigation .................................................................187ReferencingaMethodThatHandlesanActionEvent ..........................................................187ReferencingaMethodThatPerformsValidation ..................................................................187ReferencingaMethodThatHandlesaValue-ChangeEvent ...............................................188
9 DevelopingwithJavaServerFacesTechnology ...........................................................................189
ManagedBeansinJavaServerFacesTechnology ..........................................................................189
CreatingaManagedBean .........................................................................................................19 0
UsingtheELtoReferenceManagedBeans.............................................................................191
WritingBeanProperties .......................................................................................................... .........192
WritingPropertiesBoundtoComponentValues .................................................................193WritingPropertiesBoundtoComponentInstances.............................................................198WritingPropertiesBoundtoConverters,Listeners,orValidators .....................................199
WritingManagedBeanMethods ....................................................................................................20 0
WritingaMethodtoHandleNavigation ................................................................................201WritingaMethodtoHandleanActionEvent ........................................................................202WritingaMethodtoPerformValidation ...............................................................................202WritingaMethodtoHandleaValue-ChangeEvent.............................................................203
UsingBeanValidation ............................................................................................................ ..........204
ValidatingNullandEmptyStrings ..........................................................................................207
10 JavaServerFacesTechnology:AdvancedConcepts .....................................................................209
TheLifecycleofaJavaServerFacesApplication ............................................................................210
OverviewoftheJavaServerFacesLifecycle.............................................................................210RestoreViewPhase ............................................................................................................... .....213
ApplyRequestValuesPhase .....................................................................................................213ProcessValidationsPhase........................................................................................................ .214
UpdateModelValuesPhase .....................................................................................................214InvokeApplicationPhase ......................................................................................................... 215Contents
TheJavaEE6Tutorial • January2013 8
RenderResponsePhase ............................................................................................................ .215
PartialProcessingandPartialRendering .......................................................................................216TheLifecycleofaFaceletsApplication ...........................................................................................21 6
UserInterfaceComponentModel ..................................................................................................21 7
UserInterfaceComponentClasses..........................................................................................217ComponentRenderingModel .................................................................................................219ConversionModel ................................................................................................................ .....220
EventandListenerModel .........................................................................................................2 21
ValidationModel ................................................................................................................ .......222
NavigationModel ................................................................................................................ ......223
11 UsingAjaxwithJavaServerFacesTechnology .............................................................................227
OverviewofAjax ................................................................................................................. ..............228
UsingAjaxFunctionalitywithJavaServerFacesTechnology ......................................................228UsingAjaxwithFacelets .......................................................................................................... .........229
Usingthe f:ajaxTag ................................................................................................................229
SendinganAjaxRequest........................................................................................................... ........231
Usingthe eventAttribute .........................................................................................................231
Usingthe executeAttribute.....................................................................................................232
Usingthe immediate Attribute.................................................................................................232
Usingthe listener Attribute...................................................................................................233
MonitoringEventsontheClient .................................................................................................... .233
HandlingErrors ................................................................................................................. ................234
ReceivinganAjaxResponse ........................................................................................................ .....234
AjaxRequestLifecycle ........................................................................................................... ...........235
GroupingofComponents ........................................................................................................... .....236
LoadingJavaScriptasaResource................................................................................................... ..236
UsingJavaScriptAPIinaFaceletsApplication ......................................................................237Usingthe @ResourceDependency AnnotationinaBeanClass ............................................238
Theajaxguessnumber ExampleApplication ................................................................................238
Theajaxguessnumber SourceFiles .........................................................................................239
Runningthe ajaxguessnumber Example................................................................................240
FurtherInformationaboutAjaxinJavaServerFacesTechnology...............................................242Contents
9
12 CompositeComponents:AdvancedTopicsandExample ...........................................................243
AttributesofaCompositeComponent ..........................................................................................243InvokingaManagedBean ........................................................................................................... .....244
ValidatingCompositeComponentValues ....................................................................................245Thecompositecomponentlogin ExampleApplication................................................................245
TheCompositeComponentFile..............................................................................................245TheUsingPage ................................................................................................................... ........246
TheManagedBean ................................................................................................................. ...247
Runningthe compositecomponentlogin Example...............................................................248
13 CreatingCustomUIComponentsandOtherCustomObjects ...................................................251
DeterminingWhetherYouNeedaCustomComponentorRenderer.......................................253
WhentoUseaCustomComponent........................................................................................253WhentoUseaCustomRenderer.............................................................................................254Component,Renderer,andTagCombinations.....................................................................255
UnderstandingtheImageMapExample........................................................................................256
WhyUseJavaServerFacesTechnologytoImplementanImageMap? ...............................256UnderstandingtheRenderedHTML ......................................................................................257UnderstandingtheFaceletsPage .............................................................................................258ConfiguringModelData ...........................................................................................................2 59
SummaryoftheImageMapApplicationClasses...................................................................260
StepsforCreatingaCustomComponent.......................................................................................261CreatingCustomComponentClasses............................................................................................262
SpecifyingtheComponentFamily ..........................................................................................264PerformingEncoding ............................................................................................................. ...265
PerformingDecoding ............................................................................................................. ...267
EnablingComponentPropertiestoAcceptExpressions ......................................................268SavingandRestoringState........................................................................................................ 269
DelegatingRenderingtoaRenderer ...............................................................................................27 0
CreatingtheRendererClass .....................................................................................................27 0
IdentifyingtheRendererType .................................................................................................272
ImplementinganEventListener .................................................................................................... .273
ImplementingValue-ChangeListeners ..................................................................................273ImplementingActionListeners ...............................................................................................274
HandlingEventsforCustomComponents ....................................................................................275Contents
TheJavaEE6Tutorial • January2013 10
DefiningtheCustomComponentTaginaTagLibraryDescriptor ...........................................276
UsingaCustomComponent .......................................................................................................... .277
CreatingandUsingaCustomConverter .......................................................................................279
CreatingaCustomConverter ..................................................................................................279UsingaCustomConverter .......................................................................................................282
CreatingandUsingaCustomValidator ........................................................................................283
ImplementingtheValidatorInterface.....................................................................................284SpecifyingaCustomTag ........................................................................................................... 286
UsingaCustomValidator.........................................................................................................2 87
BindingComponentValuesandInstancestoManagedBeanProperties ..................................288
BindingaComponentValuetoaProperty.............................................................................289BindingaComponentValuetoanImplicitObject ...............................................................291BindingaComponentInstancetoaBeanProperty ..............................................................292
BindingConverters,Listeners,andValidatorstoManagedBeanProperties............................293
14 ConfiguringJavaServerFacesApplications ..................................................................................295
UsingAnnotationstoConfigureManagedBeans.........................................................................296
UsingManagedBeanScopes ....................................................................................................296
ApplicationConfigurationResourceFile .......................................................................................297
OrderingofApplicationConfigurationResourceFiles ........................................................298
ConfiguringManagedBeans ......................................................................................................... ..300
Usingthe managed-bean Element............................................................................................300
InitializingPropertiesUsingthe managed-property Element ............................................303
InitializingMapsandLists ....................................................................................................... .308
RegisteringApplicationMessages ................................................................................................. ..308
Using FacesMessage toCreateaMessage ..............................................................................310
ReferencingErrorMessages .....................................................................................................31 0
UsingDefaultValidators ......................................................................................................... .........311
RegisteringaCustomValidator.................................................................................................... ...312
RegisteringaCustomConverter .................................................................................................... .313
ConfiguringNavigationRules ...................................................................................................... ...313
▼ToConfigureaNavigationRule...............................................................................................315
ImplicitNavigationRules ........................................................................................................ .316
RegisteringaCustomRendererwithaRenderKit........................................................................317RegisteringaCustomComponent ..................................................................................................31 9Contents
11
BasicRequirementsofaJavaServerFacesApplication .................................................................320
ConfiguringanApplicationwithaWebDeploymentDescriptor .......................................321ConfiguringProjectStage ......................................................................................................... 324
IncludingtheClasses,Pages,andOtherResources ...............................................................324
15 JavaServletTechnology ...................................................................................................................327
WhatIsaServlet?................................................................................................................ ...............328
ServletLifecycle ............................................................................................................... ..................328
HandlingServletLifecycleEvents ............................................................................................328HandlingServletErrors.......................................................................................................... ...330
SharingInformation ............................................................................................................. ............330
UsingScopeObjects .............................................................................................................. ....330
ControllingConcurrentAccesstoSharedResources ...........................................................331
CreatingandInitializingaServlet ................................................................................................ ...331
WritingServiceMethods .......................................................................................................... ........332
GettingInformationfromRequests ........................................................................................332
ConstructingResponses.......................................................................................................... ..333
FilteringRequestsandResponses.................................................................................................. ..334
ProgrammingFilters............................................................................................................. .....335
ProgrammingCustomizedRequestsandResponses ............................................................336SpecifyingFilterMappings ....................................................................................................... 336
InvokingOtherWebResources...................................................................................................... .338
IncludingOtherResourcesintheResponse ...........................................................................339TransferringControltoAnotherWebComponent..............................................................339
AccessingtheWebContext......................................................................................................... .....339
MaintainingClientState......................................................................................................... ..........340
AccessingaSession .............................................................................................................. ......340
AssociatingObjectswithaSession ..........................................................................................340SessionManagement .............................................................................................................. ...341
SessionTracking ................................................................................................................ ........341
FinalizingaServlet............................................................................................................. ................342
TrackingServiceRequests ........................................................................................................ 342
NotifyingMethodstoShutDown ............................................................................................343CreatingPoliteLong-RunningMethods.................................................................................343
ThemoodExampleApplication........................................................................................................344Contents
TheJavaEE6Tutorial • January2013 12
Componentsofthe moodExampleApplication .....................................................................344
Runningthe moodExample.......................................................................................................344
FurtherInformationaboutJavaServletTechnology ....................................................................346
16 UploadingFileswithJavaServletTechnology .............................................................................347
The@MultipartConfig Annotation...............................................................................................347
ThegetParts andgetPartMethods..............................................................................................348
Thefileupload ExampleApplication ...........................................................................................349
Architectureofthe fileupload ExampleApplication..........................................................349
Runningthe fileupload Example ..........................................................................................352
17 InternationalizingandLocalizingWebApplications ..................................................................355
JavaPlatformLocalizationClasses ................................................................................................ ..355
ProvidingLocalizedMessagesandLabels ......................................................................................356
EstablishingtheLocale .......................................................................................................... ....356
SettingtheResourceBundle .....................................................................................................35 7
RetrievingLocalizedMessages .................................................................................................358
DateandNumberFormatting ........................................................................................................ .359
CharacterSetsandEncodings...................................................................................................... ....359
CharacterSets .................................................................................................................. ...........359
CharacterEncoding .............................................................................................................. .....360
PartIII WebServices ............................................................................................................................... .......361
18 IntroductiontoWebServices ..........................................................................................................363
WhatAreWebServices?............................................................................................................ .......363
TypesofWebServices............................................................................................................. ..........363
“Big”WebServices............................................................................................................... ......364
RESTfulWebServices ............................................................................................................. ..364
DecidingWhichTypeofWebServicetoUse ................................................................................366
19 BuildingWebServiceswithJAX-WS ...............................................................................................367
CreatingaSimpleWebServiceandClientswithJAX-WS ...........................................................368
RequirementsofaJAX-WSEndpoint .....................................................................................369Contents
13
CodingtheServiceEndpointImplementationClass ............................................................370
Building,Packaging,andDeployingtheService ....................................................................370TestingtheMethodsofaWebServiceEndpoint ...................................................................371ASimpleJAX-WSApplicationClient .....................................................................................372ASimpleJAX-WSWebClient .................................................................................................374
TypesSupportedbyJAX-WS ......................................................................................................... ..377
Schema-to-JavaMapping.......................................................................................................... 377
Java-to-SchemaMapping.......................................................................................................... 378
WebServicesInteroperabilityandJAX-WS ..................................................................................379FurtherInformationaboutJAX-WS ...............................................................................................379
20 BuildingRESTfulWebServiceswithJAX-RS .................................................................................381
WhatAreRESTfulWebServices? ...................................................................................................38 1
CreatingaRESTfulRootResourceClass........................................................................................382
DevelopingRESTfulWebServiceswithJAX-RS ...................................................................382OverviewofaJAX-RSApplication ..........................................................................................384The@PathAnnotationandURIPathTemplates ...................................................................385
RespondingtoHTTPMethodsandRequests ........................................................................387Using @Consumes and@Produces toCustomizeRequestsandResponses..........................390
ExtractingRequestParameters ................................................................................................392
ExampleApplicationsforJAX-RS................................................................................................... 396
ARESTfulWebService ............................................................................................................. 396
ThersvpExampleApplication ................................................................................................398
Real-WorldExamples ............................................................................................................. ..400
FurtherInformationaboutJAX-RS ................................................................................................40 1
21 JAX-RS:AdvancedTopicsandExample ..........................................................................................403
AnnotationsforFieldandBeanPropertiesofResourceClasses .................................................403
ExtractingPathParameters ......................................................................................................4 04
ExtractingQueryParameters ...................................................................................................405ExtractingFormData ............................................................................................................. ...405
ExtractingtheJavaTypeofaRequestorResponse................................................................406
SubresourcesandRuntimeResourceResolution..........................................................................407
SubresourceMethods ............................................................................................................. ...407
SubresourceLocators ............................................................................................................ ....407Contents
TheJavaEE6Tutorial • January2013 14
IntegratingJAX-RSwithEJBTechnologyandCDI ......................................................................408
ConditionalHTTPRequests........................................................................................................ ....409
RuntimeContentNegotiation ...................................................................................................... ...410
UsingJAX-RSWithJAXB ............................................................................................................ ....412
UsingJavaObjectstoModelYourData ..................................................................................414
StartingfromanExistingXMLSchemaDefinition ...............................................................415UsingJSONwithJAX-RSandJAXB........................................................................................417
Thecustomer ExampleApplication ...............................................................................................418
Overviewofthe customer ExampleApplication ...................................................................419
TheCustomer andAddressEntityClasses .............................................................................419
TheCustomerService Class.....................................................................................................422
TheCustomerClientXML andCustomerClientJSON Classes...............................................424
ModifyingtheExampletoGenerateEntityClassesfromanExistingSchema ..................426Runningthe customer Example ..............................................................................................428
PartIV EnterpriseBeans ............................................................................................................................... .433
22 EnterpriseBeans ............................................................................................................................... .435
WhatIsanEnterpriseBean? ........................................................................................................ ....435
BenefitsofEnterpriseBeans .....................................................................................................43 6
WhentoUseEnterpriseBeans .................................................................................................436TypesofEnterpriseBeans ......................................................................................................... 436
WhatIsaSessionBean? ............................................................................................................ ........437
TypesofSessionBeans ............................................................................................................ ..437
WhentoUseSessionBeans ......................................................................................................438
WhatIsaMessage-DrivenBean? ....................................................................................................4 39
WhatMakesMessage-DrivenBeansDifferentfromSessionBeans? ..................................439WhentoUseMessage-DrivenBeans.......................................................................................440
AccessingEnterpriseBeans....................................................................................................... .......441
UsingEnterpriseBeansinClients............................................................................................441DecidingonRemoteorLocalAccess.......................................................................................442LocalClients ................................................................................................................... ............443
RemoteClients .................................................................................................................. .........445
WebServiceClients .............................................................................................................. .....446
MethodParametersandAccess................................................................................................447Contents
15
TheContentsofanEnterpriseBean ...............................................................................................447
PackagingEnterpriseBeansinEJBJARModules ..................................................................447PackagingEnterpriseBeansinWARModules ......................................................................448
NamingConventionsforEnterpriseBeans ...................................................................................449TheLifecyclesofEnterpriseBeans ................................................................................................. .450
TheLifecycleofaStatefulSessionBean ..................................................................................450TheLifecycleofaStatelessSessionBean .................................................................................451TheLifecycleofaSingletonSessionBean ...............................................................................451TheLifecycleofaMessage-DrivenBean.................................................................................452
FurtherInformationaboutEnterpriseBeans ................................................................................453
23 GettingStartedwithEnterpriseBeans ..........................................................................................455
CreatingtheEnterpriseBean ...................................................................................................... .....455
CodingtheEnterpriseBeanClass............................................................................................456Creatingthe converter WebClient........................................................................................456
Runningthe converter Example ............................................................................................457
ModifyingtheJavaEEApplication .................................................................................................4 58
▼ToModifyaClassFile............................................................................................................. ...458
24 RunningtheEnterpriseBeanExamples ........................................................................................461
ThecartExample ........................................................................................................................ .....461
TheBusinessInterface........................................................................................................... ....462
SessionBeanClass ............................................................................................................... ......463
The@RemoveMethod .................................................................................................................466
HelperClasses.................................................................................................................. ...........466
Runningthe cartExample.......................................................................................................466
ASingletonSessionBeanExample: counter.................................................................................468
CreatingaSingletonSessionBean ...........................................................................................468TheArchitectureofthe counterExample..............................................................................472
Runningthe counterExample ................................................................................................475
AWebServiceExample: helloservice .........................................................................................476
TheWebServiceEndpointImplementationClass ................................................................476StatelessSessionBeanImplementationClass ........................................................................477Runningthe helloservice Example ......................................................................................477
UsingtheTimerService........................................................................................................... .........479Contents
TheJavaEE6Tutorial • January2013 16
CreatingCalendar-BasedTimerExpressions ........................................................................479
ProgrammaticTimers ............................................................................................................. ..482
AutomaticTimers ................................................................................................................ ......483
CancelingandSavingTimers ...................................................................................................484GettingTimerInformation ......................................................................................................48 5
TransactionsandTimers .......................................................................................................... 485
Thetimersession Example .....................................................................................................485
Runningthe timersession Example ......................................................................................488
HandlingExceptions............................................................................................................. ............489
25 AMessage-DrivenBeanExample ...................................................................................................491
Overviewofthe simplemessage Example .....................................................................................491
Thesimplemessage ApplicationClient .........................................................................................492
TheMessage-DrivenBeanClass ..................................................................................................... 493
TheonMessage Method.............................................................................................................494
Runningthe simplemessage Example ...........................................................................................495
AdministeredObjectsforthe simplemessage Example .......................................................495
▼ToRunthe simplemessage ApplicationUsingNetBeansIDE ............................................496
▼ToRunthe simplemessage ApplicationUsingAnt ..............................................................496
RemovingtheAdministeredObjectsforthe simplemessage Example..............................497
26 UsingtheEmbeddedEnterpriseBeanContainer ........................................................................499
OverviewoftheEmbeddedEnterpriseBeanContainer...............................................................499DevelopingEmbeddableEnterpriseBeanApplications...............................................................499
RunningEmbeddedApplications............................................................................................500CreatingtheEnterpriseBeanContainer .................................................................................500LookingUpSessionBeanReferences......................................................................................502ShuttingDowntheEnterpriseBeanContainer .....................................................................502
Thestandalone ExampleApplication ...........................................................................................502
▼ToRunthe standalone ExampleApplication .......................................................................503
27 UsingAsynchronousMethodInvocationinSessionBeans .......................................................505
AsynchronousMethodInvocation .................................................................................................50 5
CreatinganAsynchronousBusinessMethod.........................................................................506Contents
17
CallingAsynchronousMethodsfromEnterpriseBeanClients ...........................................507
TheasyncExampleApplication......................................................................................................508
Architectureofthe asyncExampleApplication ....................................................................508
Runningthe asyncExample.....................................................................................................509
PartV ContextsandDependencyInjectionfortheJavaEEPlatform ...................................................513
28 IntroductiontoContextsandDependencyInjectionfortheJavaEEPlatform .......................515
OverviewofCDI.................................................................................................................. ..............516
AboutBeans ..................................................................................................................... ..................517
AboutCDIManagedBeans........................................................................................................... ...517
BeansasInjectableObjects....................................................................................................... ........518
UsingQualifiers ................................................................................................................. ................519
InjectingBeans................................................................................................................. ..................520
UsingScopes .................................................................................................................... ..................520
OverridingtheScopeofaBeanatthePointofInjection ..............................................................522GivingBeansELNames............................................................................................................. .......522
AddingSetterandGetterMethods..................................................................................................5 23
UsingaManagedBeaninaFaceletsPage.......................................................................................524InjectingObjectsbyUsingProducerMethods ..............................................................................524ConfiguringaCDIApplication ...................................................................................................... .525
Usingthe @PostConstruct and@PreDestroy AnnotationsWithCDIManagedBean
Classes........................................................................................................................ .........................525
▼ToInitializeaManagedBeanUsingthe @PostConstruct Annotation ..............................525
▼ToPreparefortheDestructionofaManagedBeanUsingthe @PreDestroy Annotation526
FurtherInformationaboutCDI ..................................................................................................... .526
29 RunningtheBasicContextsandDependencyInjectionExamples ..........................................527
Thesimplegreeting CDIExample................................................................................................527
Thesimplegreeting SourceFiles ...........................................................................................528
TheFaceletsTemplateandPage...............................................................................................528ConfigurationFiles .............................................................................................................. ......529
Runningthe simplegreeting Example..................................................................................530
Theguessnumber CDIExample ......................................................................................................531
Theguessnumber SourceFiles .................................................................................................532Contents
TheJavaEE6Tutorial • January2013 18
TheFaceletsPage ................................................................................................................ .......536
Runningthe guessnumber Example ........................................................................................537
30 ContextsandDependencyInjectionfortheJavaEEPlatform:AdvancedTopics ...................539
UsingAlternativesinCDIApplications .........................................................................................539
UsingSpecialization ............................................................................................................ ......540
UsingProducerMethods,ProducerFields,andDisposerMethodsinCDIApplications .......541
UsingProducerMethods ..........................................................................................................5 42
UsingProducerFieldstoGenerateResources........................................................................543UsingaDisposerMethod..........................................................................................................5 43
UsingPredefinedBeansinCDIApplications ................................................................................544
UsingEventsinCDIApplications................................................................................................... 545
DefiningEvents .................................................................................................................. ........545
UsingObserverMethodstoHandleEvents............................................................................545FiringEvents ................................................................................................................... ............546
UsingInterceptorsinCDIApplications .........................................................................................547UsingDecoratorsinCDIApplications...........................................................................................549UsingStereotypesinCDIApplications ..........................................................................................550
31 RunningtheAdvancedContextsandDependencyInjectionExamples .................................553
TheencoderExample:UsingAlternatives ....................................................................................553
TheCoderInterfaceandImplementations .............................................................................554
TheencoderFaceletsPageandManagedBean......................................................................554
Runningthe encoderExample ................................................................................................556
Theproducermethods Example:UsingaProducerMethodToChooseaBean
Implementation ................................................................................................................. ................558
Componentsofthe producermethods Example....................................................................559
Runningthe producermethods Example................................................................................560
Theproducerfields Example:UsingProducerFieldstoGenerateResources........................561
TheProducerFieldforthe producerfields Example..........................................................561
Theproducerfields EntityandSessionBean ......................................................................563
Theproducerfields FaceletsPagesandManagedBean .....................................................564
Runningthe producerfields Example..................................................................................566
Thebillpayment Example:UsingEventsandInterceptors ........................................................568
ThePaymentEvent EventClass ................................................................................................568Contents
19
ThePaymentHandler EventListener .......................................................................................568
Thebillpayment FaceletsPagesandManagedBean............................................................569
TheLoggedInterceptor InterceptorClass............................................................................572
Runningthe billpayment Example ........................................................................................573
Thedecorators Example:DecoratingaBean...............................................................................574
Componentsofthe decorators Example ..............................................................................574
Runningthe decorators Example ..........................................................................................575
PartVI Persistence ............................................................................................................................... ...........577
32 IntroductiontotheJavaPersistenceAPI ......................................................................................579
Entities ....................................................................................................................... .........................579
RequirementsforEntityClasses ..............................................................................................580PersistentFieldsandPropertiesinEntityClasses ..................................................................580PrimaryKeysinEntities .......................................................................................................... ..585
MultiplicityinEntityRelationships.........................................................................................587DirectioninEntityRelationships.............................................................................................587
EmbeddableClassesinEntities ................................................................................................590
EntityInheritance.............................................................................................................. ................591
AbstractEntities ............................................................................................................... ..........591
MappedSuperclasses ............................................................................................................. ....591
Non-EntitySuperclasses ......................................................................................................... ..592
EntityInheritanceMappingStrategies....................................................................................592
ManagingEntities............................................................................................................... ...............595
TheEntityManager Interface ..................................................................................................595
PersistenceUnits ............................................................................................................... .........599
QueryingEntities............................................................................................................... ................600
FurtherInformationaboutPersistence ..........................................................................................601
33 RunningthePersistenceExamples ................................................................................................603
TheorderApplication.................................................................................................................... ..603
EntityRelationshipsinthe orderApplication .......................................................................604
PrimaryKeysinthe orderApplication ...................................................................................606
EntityMappedtoMoreThanOneDatabaseTable ...............................................................610Contents
TheJavaEE6Tutorial • January2013 20
CascadeOperationsinthe orderApplication .......................................................................610
BLOBandCLOBDatabaseTypesinthe orderApplication ................................................611
TemporalTypesinthe orderApplication ..............................................................................612
Managingthe orderApplication’sEntities.............................................................................612
Runningthe orderExample.....................................................................................................614
TherosterApplication.................................................................................................................... 615
Relationshipsinthe rosterApplication.................................................................................616
EntityInheritanceinthe rosterApplication.........................................................................617
CriteriaQueriesinthe rosterApplication ............................................................................619
AutomaticTableGenerationinthe rosterApplication ......................................................620
Runningthe rosterExample...................................................................................................621
Theaddress-book Application .......................................................................................................623
BeanValidationConstraintsin address-book ......................................................................623
SpecifyingErrorMessagesforConstraintsin address-book ..............................................624
Validating ContactInputfromaJavaServerFacesApplication ..........................................625
Runningthe address-book Example ......................................................................................625
34 TheJavaPersistenceQueryLanguage ..........................................................................................629
QueryLanguageTerminology....................................................................................................... ..630
CreatingQueriesUsingtheJavaPersistenceQueryLanguage ....................................................630
NamedParametersinQueries..................................................................................................631PositionalParametersinQueries .............................................................................................631
SimplifiedQueryLanguageSyntax .................................................................................................63 2
SelectStatements............................................................................................................... .........632
UpdateandDeleteStatements .................................................................................................632
ExampleQueries................................................................................................................. ...............633
SimpleQueries .................................................................................................................. .........633
QueriesThatNavigatetoRelatedEntities ..............................................................................634QuerieswithOtherConditionalExpressions ........................................................................635BulkUpdatesandDeletes .........................................................................................................6 37
FullQueryLanguageSyntax ........................................................................................................ ....637
BNFSymbols ..................................................................................................................... .........637
BNFGrammaroftheJavaPersistenceQueryLanguage .......................................................638FROMClause ......................................................................................................................... ........642
PathExpressions ................................................................................................................ ........646Contents
21
WHEREClause ......................................................................................................................... ......647
SELECTClause......................................................................................................................... ....657
ORDER BY Clause ......................................................................................................................... 659
GROUP BY andHAVINGClauses ..................................................................................................659
35 UsingtheCriteriaAPItoCreateQueries ........................................................................................661
OverviewoftheCriteriaandMetamodelAPIs ..............................................................................661UsingtheMetamodelAPItoModelEntityClasses.......................................................................663
UsingMetamodelClasses .........................................................................................................6 64
UsingtheCriteriaAPIandMetamodelAPItoCreateBasicTypesafeQueries.........................664
CreatingaCriteriaQuery......................................................................................................... .665
QueryRoots ..................................................................................................................... ...........665
QueryingRelationshipsUsingJoins........................................................................................666PathNavigationinCriteriaQueries ........................................................................................667RestrictingCriteriaQueryResults ...........................................................................................667ManagingCriteriaQueryResults ............................................................................................669ExecutingQueries ............................................................................................................... .......671
36 CreatingandUsingString-BasedCriteriaQueries ......................................................................673
OverviewofString-BasedCriteriaAPIQueries ............................................................................673CreatingString-BasedQueries .................................................................................................... ....674
ExecutingString-BasedQueries ................................................................................................... ...675
37 ControllingConcurrentAccesstoEntityDatawithLocking ......................................................677
OverviewofEntityLockingandConcurrency ..............................................................................677
UsingOptimisticLocking......................................................................................................... 678
LockModes ...................................................................................................................... ..................679
SettingtheLockMode ............................................................................................................. ..680
UsingPessimisticLocking ........................................................................................................ 680
38 UsingaSecond-LevelCachewithJavaPersistenceAPIApplications .......................................683
OverviewoftheSecond-LevelCache..............................................................................................683
ControllingWhetherEntitiesMayBeCached.......................................................................684
SpecifyingtheCacheModeSettingstoImprovePerformance ....................................................685Contents
TheJavaEE6Tutorial • January2013 22
SettingtheCacheRetrievalandStoreModes .........................................................................686
ControllingtheSecond-LevelCacheProgrammatically.......................................................687
PartVII Security ............................................................................................................................... ................689
39 IntroductiontoSecurityintheJavaEEPlatform .........................................................................691
OverviewofJavaEESecurity ....................................................................................................... ....692
ASimpleApplicationSecurityWalkthrough .........................................................................692FeaturesofaSecurityMechanism............................................................................................695CharacteristicsofApplicationSecurity ...................................................................................696
SecurityMechanisms ............................................................................................................. ...........697
JavaSESecurityMechanisms ...................................................................................................697JavaEESecurityMechanisms ...................................................................................................698
SecuringContainers............................................................................................................. .............700
UsingAnnotationstoSpecifySecurityInformation .............................................................700UsingDeploymentDescriptorsforDeclarativeSecurity......................................................701UsingProgrammaticSecurity ..................................................................................................701
SecuringtheGlassFishServer ..................................................................................................... .....702
WorkingwithRealms,Users,Groups,andRoles..........................................................................702
WhatAreRealms,Users,Groups,andRoles? ........................................................................703ManagingUsersandGroupsontheGlassFishServer ...........................................................706SettingUpSecurityRoles ......................................................................................................... .707
MappingRolestoUsersandGroups .......................................................................................709
EstablishingaSecureConnectionUsingSSL.................................................................................710
VerifyingandConfiguringSSLSupport .................................................................................711
FurtherInformationaboutSecurity................................................................................................ 711
40 GettingStartedSecuringWebApplications .................................................................................713
OverviewofWebApplicationSecurity ..........................................................................................713SecuringWebApplications ........................................................................................................ ......715
SpecifyingSecurityConstraints ...............................................................................................715SpecifyingAuthenticationMechanisms .................................................................................719SpecifyinganAuthenticationMechanismintheDeploymentDescriptor.........................722DeclaringSecurityRoles ......................................................................................................... ..723Contents
23
UsingProgrammaticSecuritywithWebApplications .................................................................724
AuthenticatingUsersProgrammatically.................................................................................724CheckingCallerIdentityProgrammatically ...........................................................................726ExampleCodeforProgrammaticSecurity .............................................................................727DeclaringandLinkingRoleReferences ..................................................................................728
Examples:SecuringWebApplications ...........................................................................................729
▼ToSetUpYourSystemforRunningtheSecurityExamples ................................................729
Thehello2_basicauth Example:BasicAuthenticationwithaServlet ..............................730
Thehello1_formauth Example:Form-BasedAuthenticationwithaJavaServerFaces
Application .................................................................................................................... .............734
41 GettingStartedSecuringEnterpriseApplications ......................................................................739
SecuringEnterpriseBeans........................................................................................................ ........739
SecuringanEnterpriseBeanUsingDeclarativeSecurity......................................................742SecuringanEnterpriseBeanProgrammatically ....................................................................746PropagatingaSecurityIdentity(Run-As)...............................................................................747
DeployingSecureEnterpriseBeans .........................................................................................749
Examples:SecuringEnterpriseBeans .............................................................................................74 9
Thecart-secure Example:SecuringanEnterpriseBeanwithDeclarativeSecurity .......750
Theconverter-secure Example:SecuringanEnterpriseBeanwithProgrammatic
Security....................................................................................................................... .................754
42 JavaEESecurity:AdvancedTopics ..................................................................................................759
WorkingwithDigitalCertificates .................................................................................................. .759
CreatingaServerCertificate .....................................................................................................7 60
AddingUserstotheCertificateRealm ....................................................................................762UsingaDifferentServerCertificatewiththeGlassFishServer.............................................763
AuthenticationMechanisms ....................................................................................................... .....764
ClientAuthentication ........................................................................................................... .....764
MutualAuthentication ........................................................................................................... ...764
UsingForm-BasedLogininJavaServerFacesWebApplications................................................769
Using j_security_check inJavaServerFacesForms ...........................................................769
UsingaManagedBeanforAuthenticationinJavaServerFacesApplications ....................770
UsingtheJDBCRealmforUserAuthentication ...........................................................................771
▼ToConfigureaJDBCAuthenticationRealm .........................................................................772Contents
TheJavaEE6Tutorial • January2013 24
SecuringHTTPResources.......................................................................................................... ......775
SecuringApplicationClients ..................................................................................................... ......778
UsingLoginModules .............................................................................................................. ..779
UsingProgrammaticLogin ......................................................................................................779
SecuringEnterpriseInformationSystemsApplications...............................................................780
Container-ManagedSign-On ..................................................................................................780Component-ManagedSign-On ...............................................................................................780ConfiguringResourceAdapterSecurity .................................................................................781
▼ToMapanApplicationPrincipaltoEISPrincipals ...............................................................782
ConfiguringSecurityUsingDeploymentDescriptors .................................................................783
SpecifyingSecurityforBasicAuthenticationintheDeploymentDescriptor ....................783SpecifyingNon-DefaultPrincipal-to-RoleMappingintheDeploymentDescriptor .......784
FurtherInformationaboutSecurity................................................................................................ 785
PartVIII JavaEESupportingTechnologies ...................................................................................................787
43 IntroductiontoJavaEESupportingTechnologies .......................................................................789
TransactionsinJavaEEApplications .............................................................................................78 9
ResourcesinJavaEEApplications.................................................................................................. .790
TheJavaEEConnectorArchitectureandResourceAdapters .............................................790JavaDatabaseConnectivitySoftware ......................................................................................790
JavaMessageService ............................................................................................................. ............791
44 Transactions ............................................................................................................................... .......793
WhatIsaTransaction? ............................................................................................................ .........793
Container-ManagedTransactions .................................................................................................. 794
TransactionAttributes .......................................................................................................... ....795
RollingBackaContainer-ManagedTransaction ..................................................................799SynchronizingaSessionBean’sInstanceVariables ...............................................................799MethodsNotAllowedinContainer-ManagedTransactions ...............................................799
Bean-ManagedTransactions ....................................................................................................... ....800
JTATransactions ................................................................................................................ .......800
ReturningwithoutCommitting ...............................................................................................801MethodsNotAllowedinBean-ManagedTransactions ........................................................801Contents
25
TransactionTimeouts............................................................................................................ ...........801
▼ToSetaTransactionTimeout ..................................................................................................801
UpdatingMultipleDatabases ...................................................................................................... ....802
TransactionsinWebComponents .................................................................................................803FurtherInformationaboutTransactions .......................................................................................803
45 ResourcesandResourceAdapters ..................................................................................................805
ResourcesandJNDINaming ......................................................................................................... ..805
DataSource ObjectsandConnectionPools ...................................................................................806
ResourceInjection.............................................................................................................. ...............807
Field-BasedInjection........................................................................................................... ......808
Method-BasedInjection.......................................................................................................... ..809
Class-BasedInjection ........................................................................................................... .....810
ResourceAdaptersandContracts ................................................................................................... 810
ManagementContracts............................................................................................................ .811
GenericWorkContextContract .............................................................................................813OutboundandInboundContracts ..........................................................................................813
MetadataAnnotations ............................................................................................................ ..........814
CommonClientInterface .......................................................................................................... ......815
UsingResourceAdaptersWithContextsandDependencyInjectionfortheJavaEEPlatform
(CDI) .......................................................................................................................... .........................816
FurtherInformationaboutResources ............................................................................................817
46 TheResourceAdapterExample ......................................................................................................819
TheResourceAdapter............................................................................................................. ..........819
TheMessage-DrivenBean .......................................................................................................... .....820
TheWebApplication .............................................................................................................. ..........820
Runningthe mailconnector Example ...........................................................................................820
▼BeforeYouDeploythe mailconnector Example ..................................................................820
▼ToBuild,Package,andDeploythe mailconnector ExampleUsingNetBeansIDE .........821
▼ToBuild,Package,andDeploythe mailconnector ExampleUsingAnt ...........................822
▼ToRunthe mailconnector Example ......................................................................................822
47 JavaMessageServiceConcepts ......................................................................................................825
OverviewoftheJMSAPI ............................................................................................................ ......825Contents
TheJavaEE6Tutorial • January2013 26
WhatIsMessaging? ............................................................................................................... ....825
WhatIstheJMSAPI? ............................................................................................................... .826
WhenCanYouUsetheJMSAPI? ...........................................................................................826HowDoestheJMSAPIWorkwiththeJavaEEPlatform? ...................................................827
BasicJMSAPIConcepts ............................................................................................................ .......828
JMSAPIArchitecture............................................................................................................. ...829
MessagingDomains............................................................................................................... ....829
MessageConsumption ............................................................................................................. .832
TheJMSAPIProgrammingModel .................................................................................................832
JMSAdministeredObjects .......................................................................................................83 3
JMSConnections ................................................................................................................. ......835
JMSSessions .................................................................................................................... ...........835
JMSMessageProducers ............................................................................................................ 836
JMSMessageConsumers ..........................................................................................................83 7
JMSMessages .................................................................................................................... .........839
JMSQueueBrowsers ............................................................................................................... ..841
JMSExceptionHandling........................................................................................................... 842
CreatingRobustJMSApplications.................................................................................................. 842
UsingBasicReliabilityMechanisms ........................................................................................843UsingAdvancedReliabilityMechanisms ...............................................................................847
UsingtheJMSAPIinJavaEEApplications ...................................................................................851
Using @Resource AnnotationsinEnterpriseBeanorWebComponents ..........................852
UsingSessionBeanstoProduceandtoSynchronouslyReceiveMessages ........................852UsingMessage-DrivenBeanstoReceiveMessagesAsynchronously..................................853ManagingDistributedTransactions........................................................................................856UsingtheJMSAPIwithApplicationClientsandWebComponents .................................858
FurtherInformationaboutJMS..................................................................................................... ..858
48 JavaMessageServiceExamples .....................................................................................................859
WritingSimpleJMSApplications ................................................................................................... 860
ASimpleExampleofSynchronousMessageReceives ..........................................................860ASimpleExampleofAsynchronousMessageConsumption ..............................................870ASimpleExampleofBrowsingMessagesinaQueue ...........................................................875RunningJMSClientsonMultipleSystems .............................................................................880UndeployingandCleaningtheSimpleJMSExamples..........................................................886Contents
27
WritingRobustJMSApplications ................................................................................................... 886
AMessageAcknowledgmentExample ...................................................................................887ADurableSubscriptionExample.............................................................................................889ALocalTransactionExample ..................................................................................................891
AnApplicationThatUsestheJMSAPIwithaSessionBean .......................................................897
WritingtheApplicationComponentsforthe clientsessionmdb Example .....................897
CreatingResourcesforthe clientsessionmdb Example .....................................................900
Runningthe clientsessionmdb Example .............................................................................900
AnApplicationThatUsestheJMSAPIwithanEntity.................................................................902
Overviewofthe clientmdbentity ExampleApplication ....................................................902
WritingtheApplicationComponentsforthe clientmdbentity Example .......................904
CreatingResourcesforthe clientmdbentity Example .......................................................906
Runningthe clientmdbentity Example................................................................................906
AnApplicationExampleThatConsumesMessagesfromaRemoteServer ..............................910
Overviewofthe consumeremote ExampleModules ..............................................................910
WritingtheModuleComponentsforthe consumeremote Example...................................911
CreatingResourcesforthe consumeremote Example ...........................................................911
UsingTwoApplicationServersforthe consumeremote Example .......................................912
Runningthe consumeremote Example....................................................................................912
AnApplicationExampleThatDeploysaMessage-DrivenBeanonTwoServers.....................916
Overviewofthe sendremote ExampleModules ....................................................................916
WritingtheModuleComponentsforthe sendremote Example .........................................918
CreatingResourcesforthe sendremote Example..................................................................919
▼ToEnableDeploymentontheRemoteSystem ......................................................................920
▼ToUseTwoApplicationServersforthe sendremote Example ...........................................920
Runningthe sendremote Example ..........................................................................................921
▼ToDisableDeploymentontheRemoteSystem .....................................................................926
49 BeanValidation:AdvancedTopics ..................................................................................................929
CreatingCustomConstraints ...................................................................................................... ....929
UsingtheBuilt-InConstraintstoMakeaNewConstraint...................................................929
CustomizingValidatorMessages ................................................................................................... .930
TheValidationMessages ResourceBundle ..........................................................................930
GroupingConstraints............................................................................................................ ...........931
CustomizingGroupValidationOrder ....................................................................................931Contents
TheJavaEE6Tutorial • January2013 28
50 UsingJavaEEInterceptors ...............................................................................................................933
OverviewofInterceptors ......................................................................................................... .........933
InterceptorClasses............................................................................................................. ........934
InterceptorLifecycle ........................................................................................................... .......934
InterceptorsandCDI............................................................................................................. ....935
UsingInterceptors.............................................................................................................. ...............935
InterceptingMethodInvocations ............................................................................................936InterceptingLifecycleCallbackEvents....................................................................................937InterceptingTimeoutEvents ....................................................................................................93 8
Theinterceptor ExampleApplication .........................................................................................939
Runningthe interceptor Example ........................................................................................940
PartIX CaseStudies ............................................................................................................................... ........943
51 Duke’sBookstoreCaseStudyExample ..........................................................................................945
DesignandArchitectureofDuke’sBookstore ...............................................................................945TheDuke’sBookstoreInterface.................................................................................................... ...946
TheBookJavaPersistenceAPIEntity ......................................................................................946
EnterpriseBeansUsedinDuke’sBookstore ...........................................................................947FaceletsPagesandManagedBeansUsedinDuke’sBookstore ............................................947CustomComponentsandOtherCustomObjectsUsedinDuke’sBookstore ...................949PropertiesFilesUsedinDuke’sBookstore..............................................................................949DeploymentDescriptorsUsedinDuke’sBookstore .............................................................950
RunningtheDuke’sBookstoreCaseStudyApplication...............................................................951
▼ToBuildandDeployDuke’sBookstoreUsingNetBeansIDE..............................................951
▼ToBuildandDeployDuke’sBookstoreUsingAnt................................................................951
▼ToRunDuke’sBookstore .........................................................................................................95 2
52 Duke’sTutoringCaseStudyExample .............................................................................................953
DesignandArchitectureofDuke’sTutoring .................................................................................953MainInterface.................................................................................................................. ..................955
JavaPersistenceAPIEntitiesUsedintheMainInterface .....................................................955EnterpriseBeansUsedintheMainInterface .........................................................................956FaceletsFilesUsedintheMainInterface ................................................................................956Contents
29
HelperClassesUsedintheMainInterface .............................................................................957
PropertiesFiles ................................................................................................................ ...........958
DeploymentDescriptorsUsedinDuke’sTutoring ...............................................................959
AdministrationInterface ........................................................................................................ ..........959
EnterpriseBeansUsedintheAdministrationInterface .......................................................959FaceletsFilesUsedintheAdministrationInterface ..............................................................960
RunningtheDuke’sTutoringCaseStudyApplication .................................................................960
SettingUpGlassFishServer ......................................................................................................9 60
RunningDuke’sTutoring .........................................................................................................9 61
53 Duke’sForestCaseStudyExample .................................................................................................965
DesignandArchitectureofDuke’sForest ......................................................................................966
TheeventsProject ....................................................................................................................968
Theentities Project ................................................................................................................969
Thedukes-payment Project......................................................................................................971
Thedukes-resources Project .................................................................................................972
TheDuke’sStoreProject .......................................................................................................... .972
TheDuke’sShipmentProject ...................................................................................................977
BuildingandDeployingtheDuke’sForestCaseStudyApplication............................................979
PrerequisiteTask............................................................................................................... .........979
▼ToBuildandDeploytheDuke’sForestApplicationUsingNetBeansIDE.........................980
▼ToBuildandDeploytheDuke’sForestApplicationUsingAnt ...........................................981
RunningtheDuke’sForestApplication ..........................................................................................982
▼ToRegisterasaDuke’sStoreCustomer ..................................................................................982
▼ToPurchaseProducts............................................................................................................. ...982
▼ToApproveShipmentofaProduct .........................................................................................983
▼ToCreateaNewProduct ..........................................................................................................98 3
Index............................................................................................................................... ....................985Contents
TheJavaEE6Tutorial • January2013 30
Preface
ThistutorialisaguidetodevelopingenterpriseapplicationsfortheJavaPlatform,Enterprise
Edition6(JavaEE6)usingGlassFishServerOpenSourceEdition.
OracleGlassFishServer,aJavaEEcompatibleapplicationserver,isbasedonGlassFishServer
OpenSourceEdition,theleadingopen-sourceandopen-communityplatformforbuildinganddeployingnext-generationapplicationsandservices.GlassFishServerOpenSourceEdition,developedbytheGlassFishprojectopen-sourcecommunityat
http://glassfish.java.net/ ,
isthefirstcompatibleimplementationoftheJavaEE6platformspecification.Thislightweight,flexible,andopen-sourceapplicationserverenablesorganizationsnotonlytoleveragethenewcapabilitiesintroducedwithintheJavaEE6specification,butalsotoaddtotheirexistingcapabilitiesthroughafasterandmorestreamlineddevelopmentanddeploymentcycle.OracleGlassFishServer,theproductversion,andGlassFishServerOpenSourceEdition,theopen-sourceversion,arehereafterreferredtoasGlassFishServer.
Thefollowingtopicsareaddressedhere:
■“BeforeYouReadThisBook”onpage31
■“RelatedDocumentation”onpage32
■“TypographicConventions”onpage32
■“DefaultPathsandFileNames”onpage33
■“Third-PartyWebSiteReferences”onpage34
BeforeYouReadThisBook
Beforeproceedingwiththistutorial,youshouldhaveagoodknowledgeoftheJava
programminglanguage.Agoodwaytogettothatpointistoworkthrough theJavaTutorials
(http://docs.oracle.com/javase/tutorial/index.html ).
31
RelatedDocumentation
TheGlassFishServerdocumentationsetdescribesdeploymentplanningandsystem
installation.ToobtaindocumentationforGlassFishServerOpenSourceEdition,goto
http://glassfish.java.net/docs/ .TheUniformResourceLocator(URL)fortheOracle
GlassFishServerproductdocumentationis http://docs.oracle.com/cd/E26576_01/
index.htm .
TheAPIdocumentationforpackagesthatareprovidedwithGlassFishServerisavailableas
follows.
■TheAPIspecificationforversion6ofJavaEEislocatedat http://docs.oracle.com/
javaee/6/api/ .
■TheAPIspecificationforGlassFishServer,includingJavaEE6platformpackagesandnonplatformpackagesthatarespecifictotheGlassFishServerproduct,islocatedat
http://glassfish.java.net/nonav/docs/v3/api/ .
Additionally,theJavaEESpecificationsat http://www.oracle.com/technetwork/java/
javaee/tech/index.html mightbeuseful.
ForinformationaboutcreatingenterpriseapplicationsintheNetBeansIntegrated
DevelopmentEnvironment(IDE),see http://www.netbeans.org/kb/ .
ForinformationabouttheJavaDBdatabaseforusewiththeGlassFishServer,see
http://www.oracle.com/technetwork/java/javadb/overview/index.html .
TheGlassFishSamplesprojectisacollectionofsampleapplicationsthatdemonstrateabroad
rangeofJavaEEtechnologies.TheGlassFishSamplesarebundledwiththeJavaEESoftwareDevelopmentKit(SDK)andarealsoavailablefromtheGlassFishSamplesprojectpageat
http://glassfish-samples.java.net/ .
TypographicConventions
TableP–1 describesthetypographicchangesthatareusedinthisbook.
TABLEP–1 TypographicConventions
Typeface Meaning Example
AaBbCc123 Thenamesofcommands,files,and
directories,andonscreencomputeroutputEdityour .loginfile.
Usels -atolistallfiles.
machine_name% you have mail.
AaBbCc123 Whatyoutype,contrastedwithonscreen
computeroutputmachine_name% su
Password:Preface
TheJavaEE6Tutorial • January2013 32
TABLEP–1 TypographicConventions (Continued)
Typeface Meaning Example
AaBbCc123 Aplaceholdertobereplacedwithareal
nameorvalueThecommandtoremoveafileis rmfilename.
AaBbCc123 Booktitles,newterms,andtermstobe
emphasized(notethatsomeemphasizeditemsappearboldonline)ReadChapter6inthe User’sGuide .
Acacheisacopythatisstoredlocally.
Donotsavethefile.
DefaultPathsandFileNames
TableP–2 describesthedefaultpathsandfilenamesthatareusedinthisbook.
TABLEP–2 DefaultPathsandFileNames
Placeholder Description DefaultValue
as-install Representsthebaseinstallation
directoryfortheGlassFishServerortheSDKofwhichtheGlassFishServerisapart.InstallationsontheSolarisoperatingsystem,Linux
operatingsystem,andMacoperatingsystem:
user’s-home-directory /glassfish3/glassfish
Windows,allinstallations:SystemDrive :\glassfish3\glassfish
as-install-parent Representstheparentofthebase
installationdirectoryforGlassFishServer.InstallationsontheSolarisoperatingsystem,Linux
operatingsystem,andMacoperatingsystem:
user’s-home-directory /glassfish3
Windows,allinstallations:SystemDrive :\glassfish3
tut-install Representsthebaseinstallation
directoryforthe JavaEETutorial
afteryouinstalltheGlassFishServerortheSDKandruntheUpdateTool.as-install /docs/javaee-tutorial
domain-root-dir Representsthedirectoryinwhich
adomainiscreatedbydefault.as-install /domains/
domain-dir Representsthedirectoryinwhich
adomain’sconfigurationisstored.domain-root-dir /domain-namePreface
33
Third-PartyWebSiteReferences
Third-partyURLsarereferencedinthisdocumentandprovideadditional,relatedinformation.
Note–Oracleisnotresponsiblefortheavailabilityofthird-partywebsitesmentionedinthis
document.Oracledoesnotendorseandisnotresponsibleorliableforanycontent,advertising,products,orothermaterialsthatareavailableonorthroughsuchsitesorresources.Oraclewillnotberesponsibleorliableforanyactualorallegeddamageorlosscausedorallegedtobecausedbyorinconnectionwithuseoforrelianceonanysuchcontent,goods,orservicesthatareavailableonorthroughsuchsitesorresources.Preface
TheJavaEE6Tutorial • January2013 34
Introduction
PartIintroducestheplatform,thetutorial,andtheexamples.Thispartcontainsthe
followingchapters:
■Chapter1,“Overview”
■Chapter2,“UsingtheTutorialExamples”PART I
35
36
Overview
ThischapterintroducesyoutoJavaEEenterpriseapplicationdevelopment.Hereyouwill
reviewdevelopmentbasics,learnabouttheJavaEEarchitectureandAPIs,becomeacquaintedwithimportanttermsandconcepts,andfindouthowtoapproachJavaEEapplicationprogramming,assembly,anddeployment.
Developerstodayincreasinglyrecognizetheneedfordistributed,transactional,andportable
applicationsthatleveragethespeed,security,andreliabilityofserver-sidetechnology.Enterpriseapplications providethebusinesslogicforanenterprise.Theyarecentrallymanaged
andofteninteractwithotherenterprisesoftware.Intheworldofinformationtechnology,enterpriseapplicationsmustbedesigned,built,andproducedforlessmoney,withgreaterspeed,andwithfewerresources.
WiththeJavaPlatform,EnterpriseEdition(JavaEE),developmentofJavaenterprise
applicationshasneverbeeneasierorfaster.TheaimoftheJavaEEplatformistoprovidedeveloperswithapowerfulsetofAPIswhileshorteningdevelopmenttime,reducingapplicationcomplexity,andimprovingapplicationperformance.
TheJavaEEplatformisdevelopedthroughtheJavaCommunityProcess(JCP),whichis
responsibleforallJavatechnologies.Expertgroups,composedofinterestedparties,havecreatedJavaSpecificationRequests(JSRs)todefinethevariousJavaEEtechnologies.TheworkoftheJavaCommunityundertheJCPprogramhelpstoensureJavatechnology’sstandardofstabilityandcross-platformcompatibility.
TheJavaEEplatformusesasimplifiedprogrammingmodel.XMLdeploymentdescriptorsare
optional.Instead,adevelopercansimplyentertheinformationasan annotation directlyintoa
Javasourcefile,andtheJavaEEserverwillconfigurethecomponentatdeploymentand
runtime.Theseannotationsaregenerallyusedtoembedinaprogramdatathatwouldotherwisebefurnishedinadeploymentdescriptor.Withannotations,youputthespecificationinformationinyourcodenexttotheprogramelementaffected.
IntheJavaEEplatform,dependencyinjectioncanbeappliedtoallresourcesacomponent
needs,effectivelyhidingthecreationandlookupofresourcesfromapplicationcode.1CHAPTER 1
37
DependencyinjectioncanbeusedinEJBcontainers,webcontainers,andapplicationclients.
DependencyinjectionallowstheJavaEEcontainertoautomaticallyinsertreferencestoother
requiredcomponentsorresources,usingannotations.
ThistutorialusesexamplestodescribethefeaturesavailableintheJavaEEplatformfor
developingenterpriseapplications.WhetheryouareaneworexperiencedEnterprisedeveloper,youshouldfindtheexamplesandaccompanyingtextavaluableandaccessibleknowledgebaseforcreatingyourownsolutions.
Thefollowingtopicsareaddressedhere:
■“JavaEE6PlatformHighlights”onpage38
■“JavaEEApplicationModel”onpage39
■“DistributedMultitieredApplications”onpage39
■“JavaEEContainers”onpage47
■“WebServicesSupport”onpage49
■“JavaEEApplicationAssemblyandDeployment”onpage50
■“PackagingApplications”onpage51
■“DevelopmentRoles”onpage52
■“JavaEE6APIs”onpage55
■“JavaEE6APIsintheJavaPlatform,StandardEdition6and7”onpage64
■“GlassFishServerTools”onpage67
JavaEE6PlatformHighlights
ThemostimportantgoaloftheJavaEE6platformistosimplifydevelopmentbyprovidinga
commonfoundationforthevariouskindsofcomponentsintheJavaEEplatform.DevelopersbenefitfromproductivityimprovementswithmoreannotationsandlessXMLconfiguration,morePlainOldJavaObjects(POJOs),andsimplifiedpackaging.TheJavaEE6platformincludesthefollowingnewfeatures:
■Profiles:configurationsoftheJavaEEplatformtargetedatspecificclassesofapplications.Specifically,theJavaEE6platformintroducesalightweightWebProfiletargetedatnext-generationwebapplications,aswellasaFullProfilethatcontainsallJavaEEtechnologiesandprovidesthefullpoweroftheJavaEE6platformforenterpriseapplications.
■Newtechnologies,includingthefollowing:
■JavaAPIforRESTfulWebServices(JAX-RS)
■ManagedBeans
■ContextsandDependencyInjectionfortheJavaEEPlatform(JSR299),informallyknownasCDI
■DependencyInjectionforJava(JSR330)
■BeanValidation(JSR303)JavaEE6PlatformHighlights
TheJavaEE6Tutorial • January2013 38
■JavaAuthenticationServiceProviderInterfaceforContainers(JASPIC)
■NewfeaturesforEnterpriseJavaBeans(EJB)components(see “EnterpriseJavaBeans
Technology”onpage58 fordetails)
■Newfeaturesforservlets(see “JavaServletTechnology”onpage59 fordetails)
■NewfeaturesforJavaServerFacescomponents(see “JavaServerFacesTechnology”on
page59fordetails)
JavaEEApplicationModel
TheJavaEEapplicationmodelbeginswiththeJavaprogramminglanguageandtheJavavirtualmachine.Theprovenportability,security,anddeveloperproductivitytheyprovideformsthebasisoftheapplicationmodel.JavaEEisdesignedtosupportapplicationsthatimplemententerpriseservicesforcustomers,employees,suppliers,partners,andotherswhomakedemandsonorcontributionstotheenterprise.Suchapplicationsareinherentlycomplex,potentiallyaccessingdatafromavarietyofsourcesanddistributingapplicationstoavarietyofclients.
Tobettercontrolandmanagetheseapplications,thebusinessfunctionstosupportthese
varioususersareconductedinthemiddletier.Themiddletierrepresentsanenvironmentthatiscloselycontrolledbyanenterprise’sinformationtechnologydepartment.Themiddletieristypicallyrunondedicatedserverhardwareandhasaccesstothefullservicesoftheenterprise.
TheJavaEEapplicationmodeldefinesanarchitectureforimplementingservicesasmultitier
applicationsthatdeliverthescalability,accessibility,andmanageabilityneededbyenterprise-levelapplications.Thismodelpartitionstheworkneededtoimplementamultitierserviceintothefollowingparts:
■Thebusinessandpresentationlogictobeimplementedbythedeveloper
■ThestandardsystemservicesprovidedbytheJavaEEplatform
Thedevelopercanrelyontheplatformtoprovidesolutionsforthehardsystems-levelproblems
ofdevelopingamultitierservice.
DistributedMultitieredApplications
TheJavaEEplatformusesadistributedmultitieredapplicationmodelforenterprise
applications.Applicationlogicisdividedintocomponentsaccordingtofunction,andtheapplicationcomponentsthatmakeupaJavaEEapplicationareinstalledonvariousmachines,dependingonthetierinthemultitieredJavaEEenvironmenttowhichtheapplicationcomponentbelongs.DistributedMultitieredApplications
Chapter1 • Overview 39
Figure1–1 showstwomultitieredJavaEEapplicationsdividedintothetiersdescribedinthe
followinglist.TheJavaEEapplicationpartsshownin Figure1–1 arepresentedin “JavaEE
Components”onpage42 .
■Client-tiercomponentsrunontheclientmachine.
■Web-tiercomponentsrunontheJavaEEserver.
■Business-tiercomponentsrunontheJavaEEserver.
■Enterpriseinformationsystem(EIS)-tiersoftwarerunsontheEISserver.
AlthoughaJavaEEapplicationcanconsistofalltiersshownin Figure1–1 ,JavaEEmultitiered
applicationsaregenerallyconsideredtobethree-tieredapplicationsbecausetheyaredistributedoverthreelocations:clientmachines,theJavaEEservermachine,andthedatabaseorlegacymachinesatthebackend.Three-tieredapplicationsthatruninthiswayextendthestandardtwo-tieredclient-and-servermodelbyplacingamultithreadedapplicationserverbetweentheclientapplicationandback-endstorage.DistributedMultitieredApplications
TheJavaEE6Tutorial • January2013 40
Security
Althoughotherenterpriseapplicationmodelsrequireplatform-specificsecuritymeasuresin
eachapplication,theJavaEEsecurityenvironmentenablessecurityconstraintstobedefinedatdeploymenttime.TheJavaEEplatformmakesapplicationsportabletoawidevarietyofsecurityimplementationsbyshieldingapplicationdevelopersfromthecomplexityofimplementingsecurityfeatures.
TheJavaEEplatformprovidesstandarddeclarativeaccesscontrolrulesthataredefinedbythe
developerandinterpretedwhentheapplicationisdeployedontheserver.JavaEEalsoprovidesstandardloginmechanismssoapplicationdevelopersdonothavetoimplementthesemechanismsintheirapplications.Thesameapplicationworksinavarietyofsecurityenvironmentswithoutchangingthesourcecode.FIGURE1–1 MultitieredApplications
Java EE 
Application 1
Java EE 
Application 2
Client
TierClient 
Machine
Java EE
Server
Database
Server
Web
Tier
Database
JavaServer
Faces
Pages
Business
Tier
EIS
Tier
Enterprise
Beans
Database
WebPagesApplication
Client
Enterprise
Beans
DistributedMultitieredApplications
Chapter1 • Overview 41
JavaEEComponents
JavaEEapplicationsaremadeupofcomponents.A JavaEEcomponent isaself-contained
functionalsoftwareunitthatisassembledintoaJavaEEapplicationwithitsrelatedclassesandfilesandthatcommunicateswithothercomponents.
TheJavaEEspecificationdefinesthefollowingJavaEEcomponents:
■Applicationclientsandappletsarecomponentsthatrunontheclient.
■JavaServlet,JavaServerFaces,andJavaServerPages(JSP)technologycomponentsareweb
componentsthatrunontheserver.
■EnterpriseJavaBeans(EJB)components(enterprisebeans)arebusinesscomponentsthatrunontheserver.
JavaEEcomponentsarewrittenintheJavaprogramminglanguageandarecompiledinthe
samewayasanyprograminthelanguage.ThedifferencesbetweenJavaEEcomponentsand“standard”JavaclassesarethatJavaEEcomponentsareassembledintoaJavaEEapplication,theyareverifiedtobewellformedandincompliancewiththeJavaEEspecification,andtheyaredeployedtoproduction,wheretheyarerunandmanagedbytheJavaEEserver.
JavaEEClients
AJavaEEclientisusuallyeitherawebclientoranapplicationclient.
WebClients
Awebclient consistsoftwoparts:
■Dynamicwebpagescontainingvarioustypesofmarkuplanguage(HTML,XML,andso
on),whicharegeneratedbywebcomponentsrunninginthewebtier
■Awebbrowser,whichrendersthepagesreceivedfromtheserver
Awebclientissometimescalleda thinclient .Thinclientsusuallydonotquerydatabases,
executecomplexbusinessrules,orconnecttolegacyapplications.Whenyouuseathinclient,suchheavyweightoperationsareoff-loadedtoenterprisebeansexecutingontheJavaEEserver,wheretheycanleveragethesecurity,speed,services,andreliabilityofJavaEEserver-sidetechnologies.
ApplicationClients
Anapplicationclient runsonaclientmachineandprovidesawayforuserstohandletasksthat
requirearicheruserinterfacethancanbeprovidedbyamarkuplanguage.Anapplicationclienttypicallyhasagraphicaluserinterface(GUI)createdfromtheSwingortheAbstractWindowToolkit(AWT)API,butacommand-lineinterfaceiscertainlypossible.DistributedMultitieredApplications
TheJavaEE6Tutorial • January2013 42
Applicationclientsdirectlyaccessenterprisebeansrunninginthebusinesstier.However,if
applicationrequirementswarrantit,anapplicationclientcanopenanHTTPconnectiontoestablishcommunicationwithaservletrunninginthewebtier.ApplicationclientswritteninlanguagesotherthanJavacaninteractwithJavaEEservers,enablingtheJavaEEplatformtointeroperatewithlegacysystems,clients,andnon-Javalanguages.
Applets
Awebpagereceivedfromthewebtiercanincludeanembeddedapplet.WrittenintheJavaprogramminglanguage,an appletisasmallclientapplicationthatexecutesintheJavavirtual
machineinstalledinthewebbrowser.However,clientsystemswilllikelyneedtheJavaPlug-inandpossiblyasecuritypolicyfilefortheapplettosuccessfullyexecuteinthewebbrowser.
WebcomponentsarethepreferredAPIforcreatingawebclientprogram,becausenoplug-ins
orsecuritypolicyfilesareneededontheclientsystems.Also,webcomponentsenablecleanerandmoremodularapplicationdesignbecausetheyprovideawaytoseparateapplicationsprogrammingfromwebpagedesign.PersonnelinvolvedinwebpagedesignthusdonotneedtounderstandJavaprogramminglanguagesyntaxtodotheirjobs.
TheJavaBeansComponentArchitecture
TheserverandclienttiersmightalsoincludecomponentsbasedontheJavaBeanscomponentarchitecture(JavaBeanscomponents)tomanagethedataflowbetweenthefollowing:
■AnapplicationclientorappletandcomponentsrunningontheJavaEEserver
■Servercomponentsandadatabase
JavaBeanscomponentsarenotconsideredJavaEEcomponentsbytheJavaEEspecification.JavaBeanscomponentshavepropertiesandhave getandsetmethodsforaccessingthe
properties.JavaBeanscomponentsusedinthiswayaretypicallysimpleindesignandimplementationbutshouldconformtothenaminganddesignconventionsoutlinedintheJavaBeanscomponentarchitecture.
JavaEEServerCommunications
Figure1–2 showsthevariouselementsthatcanmakeuptheclienttier.Theclient
communicateswiththebusinesstierrunningontheJavaEEservereitherdirectlyor,asinthecaseofaclientrunninginabrowser,bygoingthroughwebpagesorservletsrunninginthewebtier.DistributedMultitieredApplications
Chapter1 • Overview 43
WebComponents
JavaEEwebcomponentsareeitherservletsorwebpagescreatedusingJavaServerFaces
technologyand/orJSPtechnology(JSPpages). ServletsareJavaprogramminglanguageclasses
thatdynamicallyprocessrequestsandconstructresponses. JSPpages aretext-baseddocuments
thatexecuteasservletsbutallowamorenaturalapproachtocreatingstaticcontent. JavaServer
Facestechnology buildsonservletsandJSPtechnologyandprovidesauserinterfacecomponent
frameworkforwebapplications.
StaticHTMLpagesandappletsarebundledwithwebcomponentsduringapplicationassembly
butarenotconsideredwebcomponentsbytheJavaEEspecification.Server-sideutilityclassescanalsobebundledwithwebcomponentsand,likeHTMLpages,arenotconsideredwebcomponents.
Asshownin
Figure1–3 ,thewebtier,liketheclienttier,mightincludeaJavaBeanscomponent
tomanagetheuserinputandsendthatinputtoenterprisebeansrunninginthebusinesstierforprocessing.FIGURE1–2 ServerCommunication
Application Client and 
Optional JavaBeans 
Components
Web Browser, Web 
Pages, Applets, 
and Optional 
JavaBeans 
Components
Client
Tier
Web Tier
Java EE
Server
Business Tier
DistributedMultitieredApplications
TheJavaEE6Tutorial • January2013 44
BusinessComponents
Businesscode,whichislogicthatsolvesormeetstheneedsofaparticularbusinessdomainsuch
asbanking,retail,orfinance,ishandledbyenterprisebeansrunningineitherthebusinesstierorthewebtier.
Figure1–4 showshowanenterprisebeanreceivesdatafromclientprograms,
processesit(ifnecessary),andsendsittotheenterpriseinformationsystemtierforstorage.Anenterprisebeanalsoretrievesdatafromstorage,processesit(ifnecessary),andsendsitbacktotheclientprogram.FIGURE1–3 WebTierandJavaEEApplications
Application Client 
and Optional 
JavaBeans 
Components
JavaBeans 
Components 
(Optional)
Web Pages 
Servlets
Web Browser, Web 
Pages, Applets, 
and Optional 
JavaBeans 
Components
Client
Tier
Web
Tier
Java EE
Server
Business
Tier
DistributedMultitieredApplications
Chapter1 • Overview 45
EnterpriseInformationSystemTier
TheenterpriseinformationsystemtierhandlesEISsoftwareandincludesenterprise
infrastructuresystems,suchasenterpriseresourceplanning(ERP),mainframetransactionprocessing,databasesystems,andotherlegacyinformationsystems.Forexample,JavaEEapplicationcomponentsmightneedaccesstoenterpriseinformationsystemsfordatabaseconnectivity.FIGURE1–4 BusinessandEISTiers
Application Client and 
Optional JavaBeans 
Components
JavaBeans 
Components 
(Optional)
Web Pages 
Servlets
Web Browser, Web 
Pages, Applets, and 
Optional JavaBeans 
Components
Client
Tier
Web
Tier
EIS
TierDatabaseand LegacySystemsJava EE
Server
Java Persistence Entities 
Session Beans 
Message-Driven BeansBusiness
Tier
DistributedMultitieredApplications
TheJavaEE6Tutorial • January2013 46
JavaEEContainers
Normally,thin-clientmultitieredapplicationsarehardtowritebecausetheyinvolvemanylines
ofintricatecodetohandletransactionandstatemanagement,multithreading,resourcepooling,andothercomplexlow-leveldetails.Thecomponent-basedandplatform-independentJavaEEarchitecturemakesJavaEEapplicationseasytowritebecausebusinesslogicisorganizedintoreusablecomponents.Inaddition,theJavaEEserverprovidesunderlyingservicesintheformofacontainerforeverycomponenttype.Becauseyoudonothavetodeveloptheseservicesyourself,youarefreetoconcentrateonsolvingthebusinessproblemathand.
ContainerServices
Containers aretheinterfacebetweenacomponentandthelow-levelplatform-specific
functionalitythatsupportsthecomponent.Beforeitcanbeexecuted,aweb,enterprisebean,orapplicationclientcomponentmustbeassembledintoaJavaEEmoduleanddeployedintoitscontainer.
TheassemblyprocessinvolvesspecifyingcontainersettingsforeachcomponentintheJavaEE
applicationandfortheJavaEEapplicationitself.ContainersettingscustomizetheunderlyingsupportprovidedbytheJavaEEserver,includingsuchservicesassecurity,transactionmanagement,JavaNamingandDirectoryInterface(JNDI)APIlookups,andremoteconnectivity.Herearesomeofthehighlights.
■TheJavaEEsecuritymodelletsyouconfigureawebcomponentorenterprisebeansothatsystemresourcesareaccessedonlybyauthorizedusers.
■TheJavaEEtransactionmodelletsyouspecifyrelationshipsamongmethodsthatmakeupasingletransactionsothatallmethodsinonetransactionaretreatedasasingleunit.
■JNDIlookupservicesprovideaunifiedinterfacetomultiplenaminganddirectoryservicesintheenterprisesothatapplicationcomponentscanaccesstheseservices.
■TheJavaEEremoteconnectivitymodelmanageslow-levelcommunicationsbetweenclientsandenterprisebeans.Afteranenterprisebeaniscreated,aclientinvokesmethodsonitasifitwereinthesamevirtualmachine.
BecausetheJavaEEarchitectureprovidesconfigurableservices,applicationcomponentswithin
thesameJavaEEapplicationcanbehavedifferentlybasedonwheretheyaredeployed.Forexample,anenterprisebeancanhavesecuritysettingsthatallowitacertainlevelofaccesstodatabasedatainoneproductionenvironmentandanotherlevelofdatabaseaccessinanotherproductionenvironment.
Thecontaineralsomanagesnonconfigurableservices,suchasenterprisebeanandservlet
lifecycles,databaseconnectionresourcepooling,datapersistence,andaccesstotheJavaEEplatformAPIs(see
“JavaEE6APIs”onpage55 ).JavaEEContainers
Chapter1 • Overview 47
ContainerTypes
Thedeployment processinstallsJavaEEapplicationcomponentsintheJavaEEcontainersas
illustratedin Figure1–5 .
■JavaEEserver :TheruntimeportionofaJavaEEproduct.AJavaEEserverprovidesEJBand
webcontainers.
■EnterpriseJavaBeans(EJB)container :ManagestheexecutionofenterprisebeansforJava
EEapplications.EnterprisebeansandtheircontainerrunontheJavaEEserver.
■Webcontainer :Managestheexecutionofwebpages,servlets,andsomeEJBcomponents
forJavaEEapplications.WebcomponentsandtheircontainerrunontheJavaEEserver.FIGURE1–5 JavaEEServerandContainers
Application Client 
Container
Client Machine
Java EE
Server
Web
Container
Web Page
 Servlet
EJB
Container
Enterprise
Bean
WebBrowser Application
Client
Enterprise
Bean
DatabaseJavaEEContainers
TheJavaEE6Tutorial • January2013 48
■Applicationclientcontainer :Managestheexecutionofapplicationclientcomponents.
Applicationclientsandtheircontainerrunontheclient.
■Appletcontainer :Managestheexecutionofapplets.ConsistsofawebbrowserandJava
Plug-inrunningontheclienttogether.
WebServicesSupport
Webservicesareweb-basedenterpriseapplicationsthatuseopen,XML-basedstandardsandtransportprotocolstoexchangedatawithcallingclients.TheJavaEEplatformprovidestheXMLAPIsandtoolsyouneedtoquicklydesign,develop,test,anddeploywebservicesand
clientsthatfullyinteroperatewithotherwebservicesandclientsrunningonJava-basedornon-Java-basedplatforms.
TowritewebservicesandclientswiththeJavaEEXMLAPIs,allyoudoispassparameterdata
tothemethodcallsandprocessthedatareturned;fordocument-orientedwebservices,yousenddocumentscontainingtheservicedatabackandforth.Nolow-levelprogrammingisneeded,becausetheXMLAPIimplementationsdotheworkoftranslatingtheapplicationdatatoandfromanXML-baseddatastreamthatissentoverthestandardizedXML-basedtransportprotocols.TheseXML-basedstandardsandprotocolsareintroducedinthefollowingsections.
ThetranslationofdatatoastandardizedXML-baseddatastreamiswhatmakeswebservices
andclientswrittenwiththeJavaEEXMLAPIsfullyinteroperable.ThisdoesnotnecessarilymeanthatthedatabeingtransportedincludesXMLtags,becausethetransporteddatacanitselfbeplaintext,XMLdata,oranykindofbinarydata,suchasaudio,video,maps,programfiles,computer-aideddesign(CAD)documents,andthelike.ThenextsectionintroducesXMLandexplainshowpartiesdoingbusinesscanuseXMLtagsandschemastoexchangedatainameaningfulway.
XML
ExtensibleMarkupLanguage(XML)isacross-platform,extensible,text-basedstandardforrepresentingdata.PartiesthatexchangeXMLdatacancreatetheirowntagstodescribethedata,setupschemastospecifywhichtagscanbeusedinaparticularkindofXMLdocument,anduseXMLstylesheetstomanagethedisplayandhandlingofthedata.
Forexample,awebservicecanuseXMLandaschematoproducepricelists,andcompanies
thatreceivethepricelistsandschemacanhavetheirownstylesheetstohandlethedatainawaythatbestsuitstheirneeds.Hereareexamples.
■OnecompanymightputXMLpricinginformationthroughaprogramtotranslatetheXMLtoHTMLsothatitcanpostthepriceliststoitsintranet.
■ApartnercompanymightputtheXMLpricinginformationthroughatooltocreateamarketingpresentation.WebServicesSupport
Chapter1 • Overview 49
■AnothercompanymightreadtheXMLpricinginformationintoanapplicationfor
processing.
SOAPTransportProtocol
ClientrequestsandwebserviceresponsesaretransmittedasSimpleObjectAccessProtocol(SOAP)messagesoverHTTPtoenableacompletelyinteroperableexchangebetweenclientsandwebservices,allrunningondifferentplatformsandatvariouslocationsontheInternet.HTTPisafamiliarrequest-and-responsestandardforsendingmessagesovertheInternet,andSOAPisanXML-basedprotocolthatfollowstheHTTPrequest-and-responsemodel.
TheSOAPportionofatransportedmessagedoesthefollowing:
■DefinesanXML-basedenvelopetodescribewhatisinthemessageandexplainhowto
processthemessage
■IncludesXML-basedencodingrulestoexpressinstancesofapplication-defineddatatypeswithinthemessage
■DefinesanXML-basedconventionforrepresentingtherequesttotheremoteserviceandtheresultingresponse
WSDLStandardFormat
TheWebServicesDescriptionLanguage(WSDL)isastandardizedXMLformatfordescribingnetworkservices.Thedescriptionincludesthenameoftheservice,thelocationoftheservice,andwaystocommunicatewiththeservice.WSDLservicedescriptionscanbepublishedontheWeb.GlassFishServerprovidesatoolforgeneratingtheWSDLspecificationofawebservicethatusesremoteprocedurecallstocommunicatewithclients.
JavaEEApplicationAssemblyandDeployment
AJavaEEapplicationispackagedintooneormorestandardunitsfordeploymenttoanyJavaEEplatform-compliantsystem.Eachunitcontains
■Afunctionalcomponentorcomponents,suchasanenterprisebean,webpage,servlet,orapplet
■Anoptionaldeploymentdescriptorthatdescribesitscontent
OnceaJavaEEunithasbeenproduced,itisreadytobedeployed.Deploymenttypically
involvesusingaplatform’sdeploymenttooltospecifylocation-specificinformation,suchasalistoflocaluserswhocanaccessitandthenameofthelocaldatabase.Oncedeployedonalocalplatform,theapplicationisreadytorun.JavaEEApplicationAssemblyandDeployment
TheJavaEE6Tutorial • January2013 50
PackagingApplications
AJavaEEapplicationisdeliveredinaJavaArchive(JAR)file,aWebArchive(WAR)file,oran
EnterpriseArchive(EAR)file.AWARorEARfileisastandardJAR( .jar)filewitha .waror
.earextension.UsingJAR,WAR,andEARfilesandmodulesmakesitpossibletoassemblea
numberofdifferentJavaEEapplicationsusingsomeofthesamecomponents.Noextracodingisneeded;itisonlyamatterofassembling(orpackaging)variousJavaEEmodulesintoJavaEEJAR,WAR,orEARfiles.
AnEARfile(see
Figure1–6 )containsJavaEEmodulesand,optionally,deploymentdescriptors.
Adeploymentdescriptor ,anXMLdocumentwithan .xmlextension,describesthedeployment
settingsofanapplication,amodule,oracomponent.Becausedeploymentdescriptorinformationisdeclarative,itcanbechangedwithouttheneedtomodifythesourcecode.Atruntime,theJavaEEserverreadsthedeploymentdescriptorandactsupontheapplication,module,orcomponentaccordingly.
ThetwotypesofdeploymentdescriptorsareJavaEEandruntime.A JavaEEdeployment
descriptor isdefinedbyaJavaEEspecificationandcanbeusedtoconfiguredeploymentsettings
onanyJavaEE-compliantimplementation.A runtimedeploymentdescriptor isusedto
configureJavaEEimplementation-specificparameters.Forexample,theGlassFishServerruntimedeploymentdescriptorcontainssuchinformationasthecontextrootofawebapplication,aswellasGlassFishServerimplementation-specificparameters,suchascachingFIGURE1–6 EARFileStructure
Assembly Root
Web
Module
Application Client
ModuleResource Adapter
ModuleEJB
ModuleMETA-INF
application.xmlglassfish-application.xml (optional)PackagingApplications
Chapter1 • Overview 51
directives.TheGlassFishServerruntimedeploymentdescriptorsarenamed
glassfish- moduleType .xmlandarelocatedinthesame META-INF directoryastheJavaEE
deploymentdescriptor.
AJavaEEmodule consistsofoneormoreJavaEEcomponentsforthesamecontainertypeand,
optionally,onecomponentdeploymentdescriptorofthattype.Anenterprisebeanmoduledeploymentdescriptor,forexample,declarestransactionattributesandsecurityauthorizationsforanenterprisebean.AJavaEEmodulecanbedeployedasastand-alonemodule.
JavaEEmodulesareofthefollowingtypes:
■EJBmodules,whichcontainclassfilesforenterprisebeansand,optionally,anEJB
deploymentdescriptor.EJBmodulesarepackagedasJARfileswitha .jarextension.
■Webmodules,whichcontainservletclassfiles,webfiles,supportingclassfiles,imageand
HTMLfiles,and,optionally,awebapplicationdeploymentdescriptor.WebmodulesarepackagedasJARfileswitha .war(webarchive)extension.
■Applicationclientmodules,whichcontainclassfilesand,optionally,anapplicationclient
deploymentdescriptor.ApplicationclientmodulesarepackagedasJARfileswitha .jar
extension.
■Resourceadaptermodules,whichcontainallJavainterfaces,classes,nativelibraries,and,optionally,aresourceadapterdeploymentdescriptor.Together,theseimplementtheConnectorarchitecture(see
“JavaEEConnectorArchitecture”onpage63 )foraparticular
EIS.ResourceadaptermodulesarepackagedasJARfileswithan .rar(resourceadapter
archive)extension.
DevelopmentRoles
Reusablemodulesmakeitpossibletodividetheapplicationdevelopmentanddeploymentprocessintodistinctrolessothatdifferentpeopleorcompaniescanperformdifferentpartsoftheprocess.
Thefirsttworoles,JavaEEproductproviderandtoolprovider,involvepurchasingand
installingtheJavaEEproductandtools.Aftersoftwareispurchasedandinstalled,JavaEEcomponentscanbedevelopedbyapplicationcomponentproviders,assembledbyapplicationassemblers,anddeployedbyapplicationdeployers.Inalargeorganization,eachoftheserolesmightbeexecutedbydifferentindividualsorteams.Thisdivisionoflaborworksbecauseeachoftheearlierrolesoutputsaportablefilethatistheinputforasubsequentrole.Forexample,intheapplicationcomponentdevelopmentphase,anenterprisebeansoftwaredeveloperdeliversEJBJARfiles.Intheapplicationassemblyrole,anotherdevelopermaycombinetheseEJBJARfilesintoaJavaEEapplicationandsaveitinanEARfile.Intheapplicationdeploymentrole,asystemadministratoratthecustomersiteusestheEARfiletoinstalltheJavaEEapplicationintoaJavaEEserver.DevelopmentRoles
TheJavaEE6Tutorial • January2013 52
Thedifferentrolesarenotalwaysexecutedbydifferentpeople.Ifyouworkforasmallcompany,
forexample,orifyouareprototypingasampleapplication,youmightperformtasksineveryphase.
JavaEEProductProvider
TheJavaEEproductprovideristhecompanythatdesignsandmakesavailableforpurchasetheJavaEEplatformAPIsandotherfeaturesdefinedintheJavaEEspecification.ProductprovidersaretypicallyapplicationservervendorsthatimplementtheJavaEEplatformaccordingtotheJavaEE6Platformspecification.
ToolProvider
Thetoolprovideristhecompanyorpersonwhocreatesdevelopment,assembly,andpackagingtoolsusedbycomponentproviders,assemblers,anddeployers.
ApplicationComponentProvider
Theapplicationcomponentprovideristhecompanyorpersonwhocreateswebcomponents,enterprisebeans,applets,orapplicationclientsforuseinJavaEEapplications.
EnterpriseBeanDeveloper
AnenterprisebeandeveloperperformsthefollowingtaskstodeliveranEJBJARfilethatcontainsoneormoreenterprisebeans:
■Writesandcompilesthesourcecode
■Specifiesthedeploymentdescriptor(optional)
■Packagesthe .classfilesanddeploymentdescriptorintotheEJBJARfile
WebComponentDeveloper
AwebcomponentdeveloperperformsthefollowingtaskstodeliveraWARfilecontainingone
ormorewebcomponents:
■Writesandcompilesservletsourcecode
■WritesJavaServerFaces,JSP,andHTMLfiles
■Specifiesthedeploymentdescriptor(optional)
■Packagesthe .class,.jsp,and .htmlfilesanddeploymentdescriptorintotheWARfileDevelopmentRoles
Chapter1 • Overview 53
ApplicationClientDeveloper
AnapplicationclientdeveloperperformsthefollowingtaskstodeliveraJARfilecontainingthe
applicationclient:
■Writesandcompilesthesourcecode
■Specifiesthedeploymentdescriptorfortheclient(optional)
■Packagesthe .classfilesanddeploymentdescriptorintotheJARfile
ApplicationAssembler
Theapplicationassembleristhecompanyorpersonwhoreceivesapplicationmodulesfrom
componentprovidersandmayassemblethemintoaJavaEEapplicationEARfile.TheassemblerordeployercaneditthedeploymentdescriptordirectlyorcanusetoolsthatcorrectlyaddXMLtagsaccordingtointeractiveselections.
AsoftwaredeveloperperformsthefollowingtaskstodeliveranEARfilecontainingtheJavaEE
application:
■AssemblesEJBJARandWARfilescreatedinthepreviousphasesintoaJavaEEapplication(EAR)file
■SpecifiesthedeploymentdescriptorfortheJavaEEapplication(optional)
■VerifiesthatthecontentsoftheEARfilearewellformedandcomplywiththeJavaEEspecification
ApplicationDeployerandAdministrator
Theapplicationdeployerandadministratoristhecompanyorpersonwhoconfiguresanddeploysapplicationclients,webapplications,EnterpriseJavaBeanscomponents,andJavaEEapplications,administersthecomputingandnetworkinginfrastructurewhereJavaEEcomponentsandapplicationsrun,andoverseestheruntimeenvironment.Dutiesincludesettingtransactioncontrolsandsecurityattributesandspecifyingconnectionstodatabases.
Duringconfiguration,thedeployerfollowsinstructionssuppliedbytheapplicationcomponent
providertoresolveexternaldependencies,specifysecuritysettings,andassigntransactionattributes.Duringinstallation,thedeployermovestheapplicationcomponentstotheserverandgeneratesthecontainer-specificclassesandinterfaces.DevelopmentRoles
TheJavaEE6Tutorial • January2013 54
AdeployerorsystemadministratorperformsthefollowingtaskstoinstallandconfigureaJava
EEapplicationorcomponents:
■ConfigurestheJavaEEapplicationorcomponentsfortheoperationalenvironment
■VerifiesthatthecontentsoftheEAR,JAR,and/orWARfilesarewellformedandcomplywiththeJavaEEspecification
■Deploys(installs)theJavaEEapplicationorcomponentsintotheJavaEEserver
JavaEE6APIs
Figure1–7 showstherelationshipsamongtheJavaEEcontainers.
Figure1–8 showstheavailabilityoftheJavaEE6APIsinthewebcontainer.FIGURE1–7 JavaEEContainers
Client System
Browser
Application 
Client 
Container
Database
Application 
ClientJava EE Server
Web Container
EJB Container
EJB
 EJB
JavaServer 
Faces
Servlet JavaEE6APIs
Chapter1 • Overview 55
Figure1–9 showstheavailabilityoftheJavaEE6APIsintheEJBcontainer.FIGURE1–8 JavaEEAPIsintheWebContainer
Web
Container
JavaServer
Faces
Servlet
New in Java EE 6
JSR 330
Interceptors
Managed Beans
JSR 299
Bean Validation
EJB Lite
EL
JavaMail
JSP
Connectors
Java Persistence
JMS
Management
WS Metadata
Web Services
JACC
JASPIC
JAX-RS
JAX-WS
JAX-RPC
SAAJJava SEJavaEE6APIs
TheJavaEE6Tutorial • January2013 56
Figure1–10 showstheavailabilityoftheJavaEE6APIsintheapplicationclientcontainer.FIGURE1–9 JavaEEAPIsintheEJBContainer
EJB
Container
EJB
New in Java EE 6
JSR 330
Interceptors
Managed Beans
JSR 299
Bean Validation
JavaMail
Java Persistence
JTA
Connectors
JMS
Management
WS Management
Web Services
JACC
JASPIC
JAXR
JAX-RS
JAX-WS
JAX-RPC
SAAJ
Java SEJavaEE6APIs
Chapter1 • Overview 57
ThefollowingsectionsgiveabriefsummaryofthetechnologiesrequiredbytheJavaEE
platformandtheAPIsusedinJavaEEapplications.
EnterpriseJavaBeansTechnology
AnEnterpriseJavaBeans(EJB)component ,orenterprisebean ,isabodyofcodehavingfieldsand
methodstoimplementmodulesofbusinesslogic.YoucanthinkofanenterprisebeanasabuildingblockthatcanbeusedaloneorwithotherenterprisebeanstoexecutebusinesslogicontheJavaEEserver.
Enterprisebeansareeithersessionbeansormessage-drivenbeans.
■Asessionbean representsatransientconversationwithaclient.Whentheclientfinishes
executing,thesessionbeananditsdataaregone.
■Amessage-drivenbean combinesfeaturesofasessionbeanandamessagelistener,allowing
abusinesscomponenttoreceivemessagesasynchronously.Commonly,theseareJavaMessageService(JMS)messages.FIGURE1–10 JavaEEAPIsintheApplicationClientContainer
Application
ClientContainer
Java SE
Application 
Client
Java Persistence
Management
WS Metadata
Web Services
JSR 299
JMS
JAXR
JAX-WS
JAX-RPC
SAAJ
New in Java EE 6JavaEE6APIs
TheJavaEE6Tutorial • January2013 58
IntheJavaEE6platform,newenterprisebeanfeaturesincludethefollowing:
■TheabilitytopackagelocalenterprisebeansinaWARfile
■Singletonsessionbeans,whichprovideeasyaccesstosharedstate
■AlightweightsubsetofEnterpriseJavaBeansfunctionality(EJBLite)thatcanbeprovided
withinJavaEEProfiles,suchastheJavaEEWebProfile.
TheJavaEE6platformrequiresEnterpriseJavaBeans3.1andInterceptors1.1.TheInterceptors
specification,whichispartoftheEJB3.1specification,makesmoregenerallyavailabletheinterceptorfacilityoriginallydefinedaspartoftheEJB3.0specification.
JavaServletTechnology
JavaServlettechnologyletsyoudefineHTTP-specificservletclasses.Aservletclassextendsthe
capabilitiesofserversthathostapplicationsaccessedbywayofarequest-responseprogrammingmodel.Althoughservletscanrespondtoanytypeofrequest,theyarecommonlyusedtoextendtheapplicationshostedbywebservers.
IntheJavaEE6platform,newJavaServlettechnologyfeaturesincludethefollowing:
■Annotationsupport
■Asynchronoussupport
■Easeofconfiguration
■EnhancementstoexistingAPIs
■Pluggability
TheJavaEE6platformrequiresServlet3.0.
JavaServerFacesTechnology
JavaServerFacestechnologyisauserinterfaceframeworkforbuildingwebapplications.The
maincomponentsofJavaServerFacestechnologyareasfollows:
■AGUIcomponentframework.
■AflexiblemodelforrenderingcomponentsindifferentkindsofHTMLordifferentmarkuplanguagesandtechnologies.A Renderer objectgeneratesthemarkuptorenderthe
componentandconvertsthedatastoredinamodelobjecttotypesthatcanberepresentedinaview.
■Astandard RenderKit forgeneratingHTML/4.01markup.
ThefollowingfeaturessupporttheGUIcomponents:
■Inputvalidation
■EventhandlingJavaEE6APIs
Chapter1 • Overview 59
■Dataconversionbetweenmodelobjectsandcomponents
■Managedmodelobjectcreation
■Pagenavigationconfiguration
■ExpressionLanguage(EL)
AllthisfunctionalityisavailableusingstandardJavaAPIsandXML-basedconfigurationfiles.IntheJavaEE6platform,newfeaturesofJavaServerFacesincludethefollowing:
■Theabilitytouseannotationsinsteadofaconfigurationfiletospecifymanagedbeansand
othercomponents
■Facelets,adisplaytechnologythatreplacesJavaServerPages(JSP)technologyusingXHTMLfiles
■Ajaxsupport
■Compositecomponents
■Implicitnavigation
TheJavaEE6platformrequiresJavaServerFaces2.0andExpressionLanguage2.2.
JavaServerPagesTechnology
JavaServerPages(JSP)technologyletsyouputsnippetsofservletcodedirectlyintoatext-based
document.AJSPpageisatext-baseddocumentthatcontainstwotypesoftext:
■Staticdata,whichcanbeexpressedinanytext-basedformatsuchasHTMLorXML
■JSPelements,whichdeterminehowthepageconstructsdynamiccontent
ForinformationaboutJSPtechnology,seethe TheJavaEE5Tutorial at
http://docs.oracle.com/javaee/5/tutorial/doc/ .
TheJavaEE6platformrequiresJavaServerPages2.2forcompatibilitywithearlierreleases,but
recommendstheuseofFaceletsasthedisplaytechnologyinnewapplications.
JavaServerPagesStandardTagLibrary
TheJavaServerPagesStandardTagLibrary(JSTL)encapsulatescorefunctionalitycommontomanyJSPapplications.InsteadofmixingtagsfromnumerousvendorsinyourJSPapplications,youuseasingle,standardsetoftags.ThisstandardizationallowsyoutodeployyourapplicationsonanyJSPcontainerthatsupportsJSTLandmakesitmorelikelythattheimplementationofthetagsisoptimized.
JSTLhasiteratorandconditionaltagsforhandlingflowcontrol,tagsformanipulatingXML
documents,internationalizationtags,tagsforaccessingdatabasesusingSQL,andcommonlyusedfunctions.JavaEE6APIs
TheJavaEE6Tutorial • January2013 60
TheJavaEE6platformrequiresJSTL1.2.
JavaPersistenceAPI
TheJavaPersistenceAPI(JPA)isaJavastandards-basedsolutionforpersistence.Persistence
usesanobject/relationalmappingapproachtobridgethegapbetweenanobject-orientedmodelandarelationaldatabase.TheJavaPersistenceAPIcanalsobeusedinJavaSEapplications,outsideoftheJavaEEenvironment.JavaPersistenceconsistsofthefollowingareas:
■TheJavaPersistenceAPI
■Thequerylanguage
■Object/relationalmappingmetadata
TheJavaEE6platformrequiresJavaPersistenceAPI2.0.
JavaTransactionAPI
TheJavaTransactionAPI(JTA)providesastandardinterfacefordemarcatingtransactions.
TheJavaEEarchitectureprovidesadefaultautocommittohandletransactioncommitsandrollbacks.Anautocommitmeansthatanyotherapplicationsthatareviewingdatawillseetheupdateddataaftereachdatabasereadorwriteoperation.However,ifyourapplicationperformstwoseparatedatabaseaccessoperationsthatdependoneachother,youwillwanttousetheJTAAPItodemarcatewheretheentiretransaction,includingbothoperations,begins,rollsback,andcommits.
TheJavaEE6platformrequiresJavaTransactionAPI1.1.
JavaAPIforRESTfulWebServices
TheJavaAPIforRESTfulWebServices(JAX-RS)definesAPIsforthedevelopmentofweb
servicesbuiltaccordingtotheRepresentationalStateTransfer(REST)architecturalstyle.AJAX-RSapplicationisawebapplicationthatconsistsofclassespackagedasaservletinaWARfilealongwithrequiredlibraries.
TheJAX-RSAPIisnewtotheJavaEE6platform.TheJavaEE6platformrequiresJAX–RS1.1.
ManagedBeans
ManagedBeans ,lightweightcontainer-managedobjects(POJOs)withminimalrequirements,
supportasmallsetofbasicservices,suchasresourceinjection,lifecyclecallbacks,andJavaEE6APIs
Chapter1 • Overview 61
interceptors.ManagedBeansrepresentageneralizationofthemanagedbeansspecifiedby
JavaServerFacestechnologyandcanbeusedanywhereinaJavaEEapplication,notjustinwebmodules.
TheManagedBeansspecificationispartoftheJavaEE6platformspecification(JSR316).ManagedBeansarenewtotheJavaEE6platform.TheJavaEE6platformrequiresManaged
Beans1.0.
ContextsandDependencyInjectionfortheJavaEE
Platform(JSR299)
ContextsandDependencyInjection(CDI)fortheJavaEEplatformdefinesasetofcontextual
services,providedbyJavaEEcontainers,thatmakeiteasyfordeveloperstouseenterprisebeansalongwithJavaServerFacestechnologyinwebapplications.Designedforusewithstatefulobjects,CDIalsohasmanybroaderuses,allowingdevelopersagreatdealofflexibilitytointegratedifferentkindsofcomponentsinalooselycoupledbuttype-safeway.
CDIisnewtotheJavaEE6platform.TheJavaEE6platformrequiresCDI1.0.
DependencyInjectionforJava(JSR330)
DependencyInjectionforJavadefinesastandardsetofannotations(andoneinterface)foruse
oninjectableclasses.
IntheJavaEEplatform,CDIprovidessupportforDependencyInjection.Specifically,youcan
useDIinjectionpointsonlyinaCDI-enabledapplication.
DependencyInjectionforJavaisnewtotheJavaEE6platform.TheJavaEE6platformrequires
DependencyInjectionforJava1.0.
BeanValidation
TheBeanValidationspecificationdefinesametadatamodelandAPIforvalidatingdatainJavaBeanscomponents.Insteadofdistributingvalidationofdataoverseverallayers,suchasthebrowserandtheserverside,youcandefinethevalidationconstraintsinoneplaceandsharethemacrossthedifferentlayers.
BeanValidationisnewtotheJavaEE6platform.TheJavaEE6platformrequiresBean
Validation1.0.JavaEE6APIs
TheJavaEE6Tutorial • January2013 62
JavaMessageServiceAPI
TheJavaMessageService(JMS)APIisamessagingstandardthatallowsJavaEEapplication
componentstocreate,send,receive,andreadmessages.Itenablesdistributedcommunicationthatislooselycoupled,reliable,andasynchronous.
TheJavaEE6platformrequiresJMS1.1.
JavaEEConnectorArchitecture
TheJavaEEConnectorarchitectureisusedbytoolsvendorsandsystemintegratorstocreate
resourceadaptersthatsupportaccesstoenterpriseinformationsystemsthatcanbepluggedintoanyJavaEEproduct.A resourceadapter isasoftwarecomponentthatallowsJavaEE
applicationcomponentstoaccessandinteractwiththeunderlyingresourcemanageroftheEIS.Becausearesourceadapterisspecifictoitsresourcemanager,adifferentresourceadaptertypicallyexistsforeachtypeofdatabaseorenterpriseinformationsystem.
TheJavaEEConnectorarchitecturealsoprovidesaperformance-oriented,secure,scalable,and
message-basedtransactionalintegrationofJavaEEbasedwebserviceswithexistingEISsthatcanbeeithersynchronousorasynchronous.ExistingapplicationsandEISsintegratedthroughtheJavaEEConnectorarchitectureintotheJavaEEplatformcanbeexposedasXML-basedwebservicesbyusingJAX-WSandJavaEEcomponentmodels.ThusJAX-WSandtheJavaEEConnectorarchitecturearecomplementarytechnologiesforenterpriseapplicationintegration(EAI)andend-to-endbusinessintegration.
TheJavaEE6platformrequiresJavaEEConnectorarchitecture1.6.
JavaMailAPI
JavaEEapplicationsusetheJavaMailAPItosendemailnotifications.TheJavaMailAPIhastwo
parts:
■Anapplication-levelinterfaceusedbytheapplicationcomponentstosendmail
■Aserviceproviderinterface
TheJavaEEplatformincludestheJavaMailAPIwithaserviceproviderthatallowsapplication
componentstosendInternetmail.
TheJavaEE6platformrequiresJavaMail1.4.
JavaAuthorizationContractforContainers
TheJavaAuthorizationContractforContainers(JACC)specificationdefinesacontract
betweenaJavaEEapplicationserverandanauthorizationpolicyprovider.AllJavaEEcontainerssupportthiscontract.JavaEE6APIs
Chapter1 • Overview 63
TheJACCspecificationdefines java.security.Permission classesthatsatisfytheJavaEE
authorizationmodel.Thespecificationdefinesthebindingofcontainer-accessdecisionstooperationsoninstancesofthesepermissionclasses.ItdefinesthesemanticsofpolicyprovidersthatusethenewpermissionclassestoaddresstheauthorizationrequirementsoftheJavaEEplatform,includingthedefinitionanduseofroles.
TheJavaEE6platformrequiresJACC1.4.
JavaAuthenticationServiceProviderInterfacefor
Containers
TheJavaAuthenticationServiceProviderInterfaceforContainers(JASPIC)specification
definesaserviceproviderinterface(SPI)bywhichauthenticationprovidersthatimplementmessageauthenticationmechanismsmaybeintegratedinclientorservermessage-processingcontainersorruntimes.Authenticationprovidersintegratedthroughthisinterfaceoperateonnetworkmessagesprovidedtothembytheircallingcontainers.Theauthenticationproviderstransformoutgoingmessagessothatthesourceofeachmessagecanbeauthenticatedbythereceivingcontainer,andtherecipientofthemessagecanbeauthenticatedbythemessagesender.Authenticationprovidersauthenticateeachincomingmessageandreturntotheircallingcontainerstheidentityestablishedasaresultofthemessageauthentication.
JASPICisnewtotheJavaEE6platform.TheJavaEE6platformrequiresJASPIC1.0.
JavaEE6APIsintheJavaPlatform,StandardEdition6and7
SeveralAPIsthatarerequiredbytheJavaEE6platformareincludedintheJavaPlatform,
StandardEdition6and7(JavaSE6and7)andarethusavailabletoJavaEEapplications.
JavaDatabaseConnectivityAPI
TheJavaDatabaseConnectivity(JDBC)APIletsyouinvokeSQLcommandsfromJavaprogramminglanguagemethods.YouusetheJDBCAPIinanenterprisebeanwhenyouhaveasessionbeanaccessthedatabase.YoucanalsousetheJDBCAPIfromaservletoraJSPpagetoaccessthedatabasedirectlywithoutgoingthroughanenterprisebean.
TheJDBCAPIhastwoparts:
■Anapplication-levelinterfaceusedbytheapplicationcomponentstoaccessadatabase
■AserviceproviderinterfacetoattachaJDBCdrivertotheJavaEEplatform
TheJavaSE6platformrequiresJDBC4.0.JavaEE6APIsintheJavaPlatform,StandardEdition6and7
TheJavaEE6Tutorial • January2013 64
JavaNamingandDirectoryInterfaceAPI
TheJavaNamingandDirectoryInterface(JNDI)APIprovidesnaminganddirectory
functionality,enablingapplicationstoaccessmultiplenaminganddirectoryservicessuchasLDAP,DNS,andNIS.TheJNDIAPIprovidesapplicationswithmethodsforperformingstandarddirectoryoperations,suchasassociatingattributeswithobjectsandsearchingforobjectsusingtheirattributes.UsingJNDI,aJavaEEapplicationcanstoreandretrieveanytypeofnamedJavaobject,allowingJavaEEapplicationstocoexistwithmanylegacyapplicationsandsystems.
JavaEEnamingservicesprovideapplicationclients,enterprisebeans,andwebcomponents
withaccesstoaJNDInamingenvironment.A namingenvironment allowsacomponenttobe
customizedwithouttheneedtoaccessorchangethecomponent’ssourcecode.Acontainerimplementsthecomponent’senvironmentandprovidesittothecomponentasaJNDI naming
context.
AJavaEEcomponentcanlocateitsenvironmentnamingcontextbyusingJNDIinterfaces.A
componentcancreatea javax.naming.InitialContext objectandlookuptheenvironment
namingcontextin InitialContext underthename java:comp/env .Acomponent’snaming
environmentisstoreddirectlyintheenvironmentnamingcontextorinanyofitsdirectorindirectsubcontexts.
AJavaEEcomponentcanaccessnamedsystem-providedanduser-definedobjects.Thenames
ofsystem-providedobjects,suchasJTA UserTransaction objects,arestoredinthe
environmentnamingcontext java:comp/env .TheJavaEEplatformallowsacomponentto
nameuser-definedobjects,suchasenterprisebeans,environmententries,JDBC DataSource
objects,andmessageconnections.Anobjectshouldbenamedwithinasubcontextofthenamingenvironmentaccordingtothetypeoftheobject.Forexample,enterprisebeansarenamedwithinthesubcontext java:comp/env/ejb ,andJDBC DataSource referencesare
namedwithinthesubcontext java:comp/env/jdbc .
JavaBeansActivationFramework
TheJavaBeansActivationFramework(JAF)isusedbytheJavaMailAPI.JAFprovidesstandard
servicestodeterminethetypeofanarbitrarypieceofdata,encapsulateaccesstoit,discovertheoperationsavailableonit,andcreatetheappropriateJavaBeanscomponenttoperformthoseoperations.
JavaAPIforXMLProcessing
TheJavaAPIforXMLProcessing(JAXP),partoftheJavaSEplatform,supportstheprocessingofXMLdocumentsusingDocumentObjectModel(DOM),SimpleAPIforXML(SAX),andJavaEE6APIsintheJavaPlatform,StandardEdition6and7
Chapter1 • Overview 65
ExtensibleStylesheetLanguageTransformations(XSLT).JAXPenablesapplicationstoparse
andtransformXMLdocumentsindependentlyofaparticularXMLprocessingimplementation.
JAXPalsoprovidesnamespacesupport,whichletsyouworkwithschemasthatmightotherwise
havenamingconflicts.Designedtobeflexible,JAXPletsyouuseanyXML-compliantparserorXSLprocessorfromwithinyourapplicationandsupportstheWorldwideWebConsortium(W3C)schema.YoucanfindinformationontheW3CschemaatthisURL:
http://www.w3.org/XML/Schema .
JavaArchitectureforXMLBinding
TheJavaArchitectureforXMLBinding(JAXB)providesaconvenientwaytobindanXMLschematoarepresentationinJavalanguageprograms.JAXBcanbeusedindependentlyorincombinationwithJAX-WS,whereitprovidesastandarddatabindingforwebservicemessages.AllJavaEEapplicationclientcontainers,webcontainers,andEJBcontainerssupporttheJAXBAPI.
TheJavaEE6platformrequiresJAXB2.2.
SOAPwithAttachmentsAPIforJava
TheSOAPwithAttachmentsAPIforJava(SAAJ)isalow-levelAPIonwhichJAX-WSdepends.
SAAJenablestheproductionandconsumptionofmessagesthatconformtotheSOAP1.1and1.2specificationsandSOAPwithAttachmentsnote.MostdevelopersdonotusetheSAAJAPI,insteadusingthehigher-levelJAX-WSAPI.
JavaAPIforXMLWebServices
TheJavaAPIforXMLWebServices(JAX-WS)specificationprovidessupportforwebservices
thatusetheJAXBAPIforbindingXMLdatatoJavaobjects.TheJAX-WSspecificationdefinesclientAPIsforaccessingwebservicesaswellastechniquesforimplementingwebserviceendpoints.TheImplementingEnterpriseWebServicesspecificationdescribesthedeploymentofJAX-WS-basedservicesandclients.TheEJBandJavaServletspecificationsalsodescribeaspectsofsuchdeployment.JAX-WS-basedapplicationscanbedeployedusinganyofthesedeploymentmodels.
TheJAX-WSspecificationdescribesthesupportformessagehandlersthatcanprocessmessage
requestsandresponses.Ingeneral,thesemessagehandlersexecuteinthesamecontainerandwiththesameprivilegesandexecutioncontextastheJAX-WSclientorendpointcomponentwithwhichtheyareassociated.ThesemessagehandlershaveaccesstothesameJNDIjava:comp/env namespaceastheirassociatedcomponent.Customserializersanddeserializers,
ifsupported,aretreatedinthesamewayasmessagehandlers.JavaEE6APIsintheJavaPlatform,StandardEdition6and7
TheJavaEE6Tutorial • January2013 66
TheJavaEE6platformrequiresJAX-WS2.2.
JavaAuthenticationandAuthorizationService
TheJavaAuthenticationandAuthorizationService(JAAS)providesawayforaJavaEE
applicationtoauthenticateandauthorizeaspecificuserorgroupofuserstorunit.
JAASisaJavaprogramminglanguageversionofthestandardPluggableAuthentication
Module(PAM)framework,whichextendstheJavaPlatformsecurityarchitecturetosupportuser-basedauthorization.
GlassFishServerTools
TheGlassFishServerisacompliantimplementationoftheJavaEE6platform.InadditiontosupportingalltheAPIsdescribedintheprevioussections,theGlassFishServerincludesa
numberofJavaEEtoolsthatarenotpartoftheJavaEE6platformbutareprovidedasaconveniencetothedeveloper.
ThissectionbrieflysummarizesthetoolsthatmakeuptheGlassFishServer.Instructionsfor
startingandstoppingtheGlassFishServer,startingtheAdministrationConsole,andstartingandstoppingtheJavaDBserverarein
Chapter2,“UsingtheTutorialExamples.”
TheGlassFishServercontainsthetoolslistedin Table1–1 .Basicusageinformationformanyof
thetoolsappearsthroughoutthetutorial.Fordetailedinformation,seetheonlinehelpintheGUItools.
TABLE1–1 GlassFishServerTools
Tool Description
AdministrationConsole Aweb-basedGUIGlassFishServeradministrationutility.Usedtostopthe
GlassFishServerandtomanageusers,resources,andapplications.
asadmin Acommand-lineGlassFishServeradministrationutility.Usedtostartandstop
theGlassFishServerandtomanageusers,resources,andapplications.
appclient Acommand-linetoolthatlaunchestheapplicationclientcontainerandinvokes
theclientapplicationpackagedintheapplicationclientJARfile.
capture-schema Acommand-linetooltoextractschemainformationfromadatabase,producing
aschemafilethattheGlassFishServercanuseforcontainer-managedpersistence.
package-appclient Acommand-linetooltopackagetheapplicationclientcontainerlibrariesand
JARfiles.
JavaDBdatabase AcopyoftheJavaDBserver.GlassFishServerTools
Chapter1 • Overview 67
TABLE1–1 GlassFishServerTools (Continued)
Tool Description
xjc Acommand-linetooltotransform,orbind,asourceXMLschematoasetof
JAXBcontentclassesintheJavaprogramminglanguage.
schemagen Acommand-linetooltocreateaschemafileforeachnamespacereferencedin
yourJavaclasses.
wsimport Acommand-linetooltogenerateJAX-WSportableartifactsforagivenWSDL
file.Aftergeneration,theseartifactscanbepackagedinaWARfilewiththeWSDLandschemadocuments,alongwiththeendpointimplementation,andthendeployed.
wsgen Acommand-linetooltoreadawebserviceendpointclassandgenerateallthe
requiredJAX-WSportableartifactsforwebservicedeploymentandinvocation.GlassFishServerTools
TheJavaEE6Tutorial • January2013 68
UsingtheTutorialExamples
Thischaptertellsyoueverythingyouneedtoknowtoinstall,build,andrunthetutorial
examples.
Thefollowingtopicsareaddressedhere:
■“RequiredSoftware”onpage69
■“StartingandStoppingtheGlassFishServer”onpage73
■“StartingtheAdministrationConsole”onpage74
■“StartingandStoppingtheJavaDBServer”onpage75
■“BuildingtheExamples”onpage75
■“TutorialExampleDirectoryStructure”onpage76
■“GettingtheLatestUpdatestotheTutorial”onpage77
■“DebuggingJavaEEApplications”onpage77
RequiredSoftware
Thefollowingsoftwareisrequiredtoruntheexamples:
■“JavaPlatform,StandardEdition”onpage69
■“JavaEE6SoftwareDevelopmentKit”onpage70
■“JavaEE6TutorialComponent”onpage70
■“NetBeansIDE”onpage71
■“ApacheAnt”onpage72
JavaPlatform,StandardEdition
Tobuild,deploy,andruntheexamples,youneedacopyoftheJavaPlatform,StandardEdition
6.0DevelopmentKit(JDK6)ortheJavaPlatform,StandardEdition7.0DevelopmentKit(JDK7).YoucandownloadtheJDK6orJDK7softwarefrom
http://www.oracle.com/
technetwork/java/javase/downloads/index.html .2CHAPTER 2
69
DownloadthecurrentJDKupdatethatdoesnotincludeanyothersoftware,suchasNetBeans
IDEortheJavaEESDK.
JavaEE6SoftwareDevelopmentKit
GlassFishServerOpenSourceEdition3.1.2istargetedasthebuildandruntimeenvironmentforthetutorialexamples.Tobuild,deploy,andruntheexamples,youneedacopyoftheGlassFishServerand,optionally,NetBeansIDE.ToobtaintheGlassFishServer,youmustinstalltheJavaEE6SoftwareDevelopmentKit(SDK),whichyoucandownloadfrom
http://www.oracle.com/technetwork/java/javaee/downloads/index.html .Makesure
youdownloadtheJavaEE6SDK,nottheJavaEE6WebProfileSDK.
SDKInstallationTips
DuringtheinstallationoftheSDK,dothefollowing:
■AllowtheinstallertodownloadandconfiguretheUpdateTool.IfyouaccesstheInternetthroughafirewall,providetheproxyhostandport.
■ConfiguretheGlassFishServeradministrationusernameas admin,andspecifyno
password.Thisisthedefaultsetting.
■AcceptthedefaultportvaluesfortheAdminPort(4848)andtheHTTPPort(8080).
■Donotselectthecheckboxtocreateanoperatingsystemserviceforthedomain.
Youcanleavethecheckboxtostartthedomainaftercreationselectedifyouwish,butthisisnot
required.
Thistutorialrefersto as-install-parent ,thedirectorywhereyouinstalltheGlassFishServer.For
example,thedefaultinstallationdirectoryonMicrosoftWindowsis C:\glassfish3 ,so
as-install-parent isC:\glassfish3 .TheGlassFishServeritselfisinstalledin as-install,the
glassfish directoryunder as-install-parent .SoonMicrosoftWindows, as-install is
C:\glassfish3\glassfish .
AfteryouinstalltheGlassFishServer,addthefollowingdirectoriestoyour PATHtoavoidhaving
tospecifythefullpathwhenyouusecommands:
as-install-parent /bin
as-install /bin
JavaEE6TutorialComponent
Thetutorialexamplesourceiscontainedinthetutorialcomponent.Toobtainthetutorial
component,usetheUpdateTool.RequiredSoftware
TheJavaEE6Tutorial • January2013 70
▼ToObtaintheTutorialComponentUsingtheUpdateTool
StarttheUpdateToolbydoingoneofthefollowing:
■Fromthecommandline,typethecommand updatetool .
■OnaWindowssystem,fromtheStartmenu,selectAllPrograms,thenselectJavaEE6SDK,
thenselectStartUpdateTool.
ExpandtheJavaEE6SDKnode.SelecttheAvailableUpdatesnode.Fromthelist,selecttheJavaEE6Tutorialcheckbox.ClickInstall.Acceptthelicenseagreement.
Afterinstallation,theJavaEE6Tutorialappearsinthelistofinstalledcomponents.Thetoolis
installedinthe as-install /docs/javaee-tutorial directory.Thisdirectorycontainstwo
subdirectories: docsandexamples .The examples directorycontainssubdirectoriesforeachof
thetechnologiesdiscussedinthetutorial.
UpdatestotheJavaEE6Tutorialarepublishedperiodically.Fordetailsonobtainingthese
updates,see
“GettingtheLatestUpdatestotheTutorial”onpage77 .
NetBeansIDE
TheNetBeansintegrateddevelopmentenvironment(IDE)isafree,open-sourceIDEfordevelopingJavaapplications,includingenterpriseapplications.NetBeansIDEsupportstheJavaEEplatform.Youcanbuild,package,deploy,andrunthetutorialexamplesfromwithinNetBeansIDE.
Torunthetutorialexamples,youneedthelatestversionofNetBeansIDE.Youcandownload
NetBeansIDEfrom
http://www.netbeans.org/downloads/index.html .Makesurethatyou
downloadtheJavaEEbundle.
▼ToInstallNetBeansIDEwithoutGlassFishServer
WhenyouinstallNetBeansIDE,donotinstalltheversionofGlassFishServerthatcomeswithNetBeansIDE.ToskiptheinstallationofGlassFishServer,followthesesteps.
OnthefirstpageoftheNetBeansIDEInstallerwizard,deselectthecheckboxforGlassFish
ServerandclickOK.1
2
3456
NextSteps
1RequiredSoftware
Chapter2 • UsingtheTutorialExamples 71
AcceptboththeLicenseAgreementandtheJunitLicenseAgreement.
AfewofthetutorialexamplesusetheJunitlibrary,soyoushouldinstallit.
ContinuewiththeinstallationofNetBeansIDE.
▼ToAddGlassFishServerasaServerinNetBeansIDE
TorunthetutorialexamplesinNetBeansIDE,youmustaddyourGlassFishServerasaserver
inNetBeansIDE.FollowtheseinstructionstoaddtheGlassFishServertoNetBeansIDE.
FromtheToolsmenu,selectServers.
TheServerswizardopens.
ClickAddServer.UnderChooseServer,selectGlassFishServer3+andclickNext.UnderServerLocation,browsetothelocationoftheJavaEE6SDKandclickNext.UnderDomainLocation,selectRegisterLocalDomain.ClickFinish.
ApacheAnt
AntisaJavatechnology-basedbuildtooldevelopedbytheApacheSoftwareFoundation
(http://ant.apache.org/ )andisusedtobuild,package,anddeploythetutorialexamples.To
runthetutorialexamples,youneedAnt1.7.1orhigher.IfyoudonotalreadyhaveAnt,youcaninstallitfromtheUpdateToolthatispartoftheGlassFishServer.
▼ToObtainApacheAnt
StarttheUpdateTool.
■Fromthecommandline,typethecommand updatetool .
■OnaWindowssystem,fromtheStartmenu,selectAllPrograms,thenselectJavaEE6SDK,
thenselectStartUpdateTool.
ExpandtheJavaEE6SDKnode.SelecttheAvailableAdd-onsnode.2
3
1
2
3456
1
2
3RequiredSoftware
TheJavaEE6Tutorial • January2013 72
Fromthelist,selecttheApacheAntBuildToolcheckbox.
ClickInstall.Acceptthelicenseagreement.
Afterinstallation,ApacheAntappearsinthelistofinstalledcomponents.Thetoolisinstalled
intheas-install-parent /antdirectory.
Tousethe antcommand,add as-install-parent /ant/bin toyour PATHenvironmentvariable.
StartingandStoppingtheGlassFishServer
TostarttheGlassFishServerfromthecommandline,openaterminalwindoworcommand
promptandexecutethefollowing:
asadmin start-domain --verbose
AdomainisasetofoneormoreGlassFishServerinstancesmanagedbyoneadministration
server.Associatedwithadomainarethefollowing:
■TheGlassFishServer’sportnumber.Thedefaultis8080.
■Theadministrationserver’sportnumber.Thedefaultis4848.
■Anadministrationusernameandpassword.Thedefaultusernameis admin,andbydefault
nopasswordisrequired.
YouspecifythesevalueswhenyouinstalltheGlassFishServer.Theexamplesinthistutorial
assumethatyouchosethedefaultportsaswellasthedefaultusernameandlackofpassword.
Withnoarguments,the start-domain commandinitiatesthedefaultdomain,whichis
domain1.The --verbose flagcausesalllogginganddebuggingoutputtoappearontheterminal
windoworcommandprompt.Theoutputalsogoesintotheserverlog,whichislocatedindomain-dir /logs/server.log .
Or,onWindows,fromtheStartmenu,selectAllPrograms,thenselectJavaEE6SDK,then
selectStartApplicationServer.
TostoptheGlassFishServer,openaterminalwindoworcommandpromptandexecute:
asadmin stop-domain domain1
Or,onWindows,fromtheStartmenu,selectAllPrograms,thenselectJavaEE6SDK,then
selectStopApplicationServer.4
56
NextStepsStartingandStoppingtheGlassFishServer
Chapter2 • UsingtheTutorialExamples 73
▼ToStarttheGlassFishServerUsingNetBeansIDE
ClicktheServicestab.
ExpandtheServersnode.Right-clicktheGlassFishServerinstanceandselectStart.
TostoptheGlassFishServerusingNetBeansIDE,right-clicktheGlassFishServerinstanceand
selectStop.
StartingtheAdministrationConsole
ToadministertheGlassFishServerandmanageusers,resources,andJavaEEapplications,usetheAdministrationConsoletool.TheGlassFishServermustberunningbeforeyouinvoketheAdministrationConsole.TostarttheAdministrationConsole,openabrowserathttp://localhost:4848/ .
Or,onWindows,fromtheStartmenu,selectAllPrograms,thenselectJavaEE6SDK,then
selectAdministrationConsole.
▼ToStarttheAdministrationConsoleUsingNetBeans
IDE
ClicktheServicestab.
ExpandtheServersnode.Right-clicktheGlassFishServerinstanceandselectViewDomainAdminConsole.
Note–NetBeansIDEusesyourdefaultwebbrowsertoopentheAdministrationConsole.1
23
NextSteps
1
23StartingtheAdministrationConsole
TheJavaEE6Tutorial • January2013 74
StartingandStoppingtheJavaDBServer
TheGlassFishServerincludestheJavaDBdatabaseserver.
TostarttheJavaDBserverfromthecommandline,openaterminalwindoworcommand
promptandexecute:
asadmin start-database
TostoptheJavaDBserverfromthecommandline,openaterminalwindoworcommandpromptandexecute:
asadmin stop-database
ForinformationabouttheJavaDBincludedwiththeGlassFishServer,see
http://www.oracle.com/technetwork/java/javadb/overview/index.html .
▼ToStarttheDatabaseServerUsingNetBeansIDE
WhenyoustarttheGlassFishServerusingNetBeansIDE,thedatabaseserverstartsautomatically.Ifyoueverneedtostartthedatabaseservermanually,followthesesteps.
ClicktheServicestab.ExpandtheDatabasesnode.Right-clickJavaDBandselectStartServer.
TostopthedatabaseusingNetBeansIDE,right-clickJavaDBandselectStopServer.
BuildingtheExamples
ThetutorialexamplesaredistributedwithaconfigurationfileforeitherNetBeansIDEorAnt.
EitherNetBeansIDEorAntmaybeusedtobuild,package,deploy,andruntheexamples.Directionsforbuildingtheexamplesareprovidedineachchapter.1
23
NextStepsBuildingtheExamples
Chapter2 • UsingtheTutorialExamples 75
TutorialExampleDirectoryStructure
Tofacilitateiterativedevelopmentandkeepapplicationsourceseparatefromcompiledfiles,
thetutorialexamplesusetheJavaBluePrintsapplicationdirectorystructure.
Eachapplicationmodulehasthefollowingstructure:
■build.xml :Antbuildfile
■src/java :Javasourcefilesforthemodule
■src/conf :configurationfilesforthemodule,withtheexceptionofwebapplications
■web:webpages,stylesheets,tagfiles,andimages(webapplicationsonly)
■web/WEB-INF :configurationfilesforwebapplications(webapplicationsonly)
■nbproject :NetBeansprojectfiles
WhenanexamplehasmultipleapplicationmodulespackagedintoanEARfile,itssubmodule
directoriesusethefollowingnamingconventions:
■example-name -app-client :applicationclients
■example-name -ejb:enterprisebeanJARfiles
■example-name -war:webapplications
TheAntbuildfiles( build.xml )distributedwiththeexamplescontaintargetstocreatea build
subdirectoryandtocopyandcompilefilesintothatdirectory;a distsubdirectory,whichholds
thepackagedmodulefile;anda client-jar directory,whichholdstheretrievedapplication
clientJAR.
Thetut-install /examples/bp-project/ directorycontainsadditionalAnttargetscalledbythe
build.xml filetargets.
Forsomewebexamples,anAnttargetwillopentheexampleURLinabrowserifoneis
available.ThishappensautomaticallyonWindowssystems.IfyouarerunningonaUNIXsystem,youmaywanttomodifyalineinthetut-install /examples/bp-project/build.properties file.Removethecommentcharacter
fromthelinespecifyingthe default.browser propertyandspecifythepathtothecommand
thatinvokesabrowser.Ifyoudonotmakethechange,youcanopentheURLinthebrowseryourself.TutorialExampleDirectoryStructure
TheJavaEE6Tutorial • January2013 76
GettingtheLatestUpdatestotheTutorial
CheckforanyupdatestothetutorialbyusingtheUpdateCenterincludedwiththeJavaEE6
SDK.
▼ToUpdatetheTutorialthroughtheUpdateCenter
OpentheServicestabinNetBeansIDEandexpandServers.
Right-clicktheGlassFishServerinstanceandselectViewUpdateCentertodisplaytheUpdate
Tool.
SelectAvailableUpdatesinthetreetodisplayalistofupdatedpackages.LookforupdatestotheJavaEE6Tutorial(javaee-tutorial)package.IfthereisanupdatedversionoftheTutorial,selectJavaEE6Tutorial(javaee-tutorial)andclick
Install.
DebuggingJavaEEApplications
Thissectionexplainshowtodeterminewhatiscausinganerrorinyourapplicationdeploymentorexecution.
UsingtheServerLog
Onewaytodebugapplicationsistolookattheserverlogin domain-dir /logs/server.log .The
logcontainsoutputfromtheGlassFishServerandyourapplications.YoucanlogmessagesfromanyJavaclassinyourapplicationwith System.out.println andtheJavaLoggingAPIs
(documentedat
http://docs.oracle.com/javase/6/docs/technotes/guides/logging/
index.html )andfromwebcomponentswiththe ServletContext.log method.
IfyouuseNetBeansIDE,loggingoutputappearsintheOutputwindowaswellastheserverlog.IfyoustarttheGlassFishServerwiththe --verbose flag,alllogginganddebuggingoutputwill
appearontheterminalwindoworcommandpromptandtheserverlog.IfyoustarttheGlassFishServerinthebackground,debugginginformationisavailableonlyinthelog.YoucanviewtheserverlogwithatexteditororwiththeAdministrationConsolelogviewer.1
2
3
45DebuggingJavaEEApplications
Chapter2 • UsingtheTutorialExamples 77
▼ToUsetheAdministrationConsoleLogViewer
SelecttheGlassFishServernode.
ClicktheViewLogFilesbutton.
Thelogvieweropensanddisplaysthelast40entries.
Todisplayotherentries,followthesesteps.a. ClicktheModifySearchbutton.b. Specifyanyconstraintsontheentriesyouwanttosee.c. ClicktheSearchbuttonatthetopofthelogviewer.
UsingaDebugger
TheGlassFishServersupportstheJavaPlatformDebuggerArchitecture(JPDA).WithJPDA,
youcanconfiguretheGlassFishServertocommunicatedebugginginformationusingasocket.
▼ToDebuganApplicationUsingaDebugger
EnabledebuggingintheGlassFishServerusingtheAdministrationConsole:
a. ExpandtheConfigurationsnode,thenexpandtheserver-confignode.b. SelecttheJVMSettingsnode.Thedefaultdebugoptionsaresetto:
-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=9009
Asyoucansee,thedefaultdebuggersocketportis9009.Youcanchangeittoaportnotin
usebytheGlassFishServeroranotherservice.
c. SelecttheDebugEnabledcheckbox.d. ClicktheSavebutton.StoptheGlassFishServerandthenrestartit.1
2
3
1
2DebuggingJavaEEApplications
TheJavaEE6Tutorial • January2013 78
TheWebTier
PartIIexploresthetechnologiesinthewebtier.Thispartcontainsthefollowingchapters:
■Chapter3,“GettingStartedwithWebApplications”
■Chapter4,“JavaServerFacesTechnology”
■Chapter5,“IntroductiontoFacelets”
■Chapter6,“ExpressionLanguage”
■Chapter7,“UsingJavaServerFacesTechnologyinWebPages”
■Chapter8,“UsingConverters,Listeners,andValidators”
■Chapter9,“DevelopingwithJavaServerFacesTechnology”
■Chapter10,“JavaServerFacesTechnology:AdvancedConcepts”
■Chapter11,“UsingAjaxwithJavaServerFacesTechnology”
■Chapter12,“CompositeComponents:AdvancedTopicsandExample”
■Chapter13,“CreatingCustomUIComponentsandOtherCustomObjects”
■Chapter14,“ConfiguringJavaServerFacesApplications”
■Chapter15,“JavaServletTechnology”
■Chapter16,“UploadingFileswithJavaServletTechnology”
■Chapter17,“InternationalizingandLocalizingWebApplications”PART II
79
80
GettingStartedwithWebApplications
Awebapplication isadynamicextensionofaweborapplicationserver.Webapplicationsareof
thefollowingtypes:
■Presentation-oriented :Apresentation-orientedwebapplication generatesinteractiveweb
pagescontainingvarioustypesofmarkuplanguage(HTML,XHTML,XML,andsoon)anddynamiccontentinresponsetorequests.Developmentofpresentation-orientedwebapplicationsiscoveredin
Chapter4,“JavaServerFacesTechnology,” throughChapter9,
“DevelopingwithJavaServerFacesTechnology.”
■Service-oriented :Aservice-orientedwebapplication implementstheendpointofaweb
service.Presentation-orientedapplicationsareoftenclientsofservice-orientedwebapplications.Developmentofservice-orientedwebapplicationsiscoveredin
Chapter19,
“BuildingWebServiceswithJAX-WS,” andChapter20,“BuildingRESTfulWebServices
withJAX-RS,” inPartIII,“WebServices.”
Thefollowingtopicsareaddressedhere:
■“WebApplications”onpage81
■“WebApplicationLifecycle”onpage83
■“WebModules:The hello1Example”onpage84
■“ConfiguringWebApplications:The hello2Example”onpage93
■“FurtherInformationaboutWebApplications”onpage101
WebApplications
IntheJavaEEplatform, webcomponents providethedynamicextensioncapabilitiesforaweb
server.WebcomponentscanbeJavaservlets,webpagesimplementedwithJavaServerFaces
technology,webserviceendpoints,orJSPpages. Figure3–1 illustratestheinteractionbetweena
webclientandawebapplicationthatusesaservlet.TheclientsendsanHTTPrequesttothewebserver.AwebserverthatimplementsJavaServletandJavaServerPagestechnologyconvertstherequestintoan HTTPServletRequest object.Thisobjectisdeliveredtoaweb
component,whichcaninteractwithJavaBeanscomponentsoradatabasetogeneratedynamic3CHAPTER 3
81
content.Thewebcomponentcanthengeneratean HTTPServletResponse orcanpassthe
requesttoanotherwebcomponent.AwebcomponenteventuallygeneratesaHTTPServletResponse object.ThewebserverconvertsthisobjecttoanHTTPresponseand
returnsittotheclient.
ServletsareJavaprogramminglanguageclassesthatdynamicallyprocessrequestsand
constructresponses.Javatechnologies,suchasJavaServerFacesandFacelets,areusedforbuildinginteractivewebapplications.(Frameworkscanalsobeusedforthispurpose.)AlthoughservletsandJavaServerFacesandFaceletspagescanbeusedtoaccomplishsimilarthings,eachhasitsownstrengths.Servletsarebestsuitedforservice-orientedapplications(webserviceendpointscanbeimplementedasservlets)andthecontrolfunctionsofa
presentation-orientedapplication,suchasdispatchingrequestsandhandlingnontextualdata.JavaServerFacesandFaceletspagesaremoreappropriateforgeneratingtext-basedmarkup,suchasXHTML,andaregenerallyusedforpresentation–orientedapplications.
Webcomponentsaresupportedbytheservicesofaruntimeplatformcalleda webcontainer .A
webcontainerprovidessuchservicesasrequestdispatching,security,concurrency,andlifecyclemanagement.AwebcontaineralsogiveswebcomponentsaccesstosuchAPIsasnaming,transactions,andemail.
Certainaspectsofwebapplicationbehaviorcanbeconfiguredwhentheapplicationisinstalled,
ordeployed,tothewebcontainer.TheconfigurationinformationcanbespecifiedusingJavaEE
annotationsorcanbemaintainedinatextfileinXMLformatcalledawebapplicationdeploymentdescriptor(DD).AwebapplicationDDmustconformtotheschemadescribedintheJavaServletspecification.FIGURE3–1 JavaWebApplicationRequestHandling
HTTP
Request
HTTP
Response
DatabaseDatabaseWeb 
Client
HttpServlet
Request
HttpServlet
Response
Web 
Components
Web 
C
Web 
Components
Web 
CC
Web
Web 
Web
C
CC
C
W
C
Wb
Web 
Components
CCompoonents
o
 t
ne
WWb
WWeb 
WWeb 
C
C
 s
 CCompoonents
 CCompoonents
oo
o
ne
 CC
Web
C
Web
Web 
Web 
Web 
Web
Web
s
 Components
 p
 s
s
 CoCmponoents
 Componen ts
 o
 CC
C
Compoonents
 ompoonents
 Components
omponents
oo
oo
o
o
oo
oo
 CCo
Co
C
Wb
WWeb 
WWeb
C
C
C
Web 
Components
Web 
Components
Web 
C
Web 
Components
Web 
CC
Web
Web 
Web
C
CC
C
W
C
Wb
Web 
Components
CCompoonents
WWb
WWeb 
WWeb 
Cmp ens
 CCompoonents
 CCompoonents
Web
C
Web
Web 
Web 
Web 
Web
Web
s
 Components
 s
s
 CoCmponoents
 Componen ts
 Compoonents
 ompoonents
 Components
Components
C
Wb
WWeb 
WWeb
C
C
C
JavaBeans
Components14
4
2
5
 3
6WebApplications
TheJavaEE6Tutorial • January2013 82
Thischaptergivesabriefoverviewoftheactivitiesinvolvedindevelopingwebapplications.
First,itsummarizesthewebapplicationlifecycleandexplainshowtopackageanddeployverysimplewebapplicationsontheGlassFishServer.Thechaptermovesontoconfiguringwebapplicationsanddiscusseshowtospecifythemostcommonlyusedconfigurationparameters.
WebApplicationLifecycle
Awebapplicationconsistsofwebcomponents;staticresourcefiles,suchasimages;andhelperclassesandlibraries.Thewebcontainerprovidesmanysupportingservicesthatenhancethecapabilitiesofwebcomponentsandmakethemeasiertodevelop.However,becauseawebapplicationmusttaketheseservicesintoaccount,theprocessforcreatingandrunningawebapplicationisdifferentfromthatoftraditionalstand-aloneJavaclasses.
Theprocessforcreating,deploying,andexecutingawebapplicationcanbesummarizedas
follows:
1. Developthewebcomponentcode.
2. Developthewebapplicationdeploymentdescriptor,ifnecessary.3. Compilethewebapplicationcomponentsandhelperclassesreferencedbythecomponents.4. Optionally,packagetheapplicationintoadeployableunit.5. Deploytheapplicationintoawebcontainer.6. AccessaURLthatreferencesthewebapplication.
Developingwebcomponentcodeiscoveredinthelaterchapters.Steps2through4are
expandedoninthefollowingsectionsandillustratedwithaHello,World-stylepresentation-orientedapplication.ThisapplicationallowsausertoenteranameintoanHTMLformandthendisplaysagreetingafterthenameissubmitted.
TheHelloapplicationcontainstwowebcomponentsthatgeneratethegreetingandthe
response.Thischapterdiscussesthefollowingsimpleapplications:
■hello1,aJavaServerFacestechnology-basedapplicationthatusestwoXHTMLpagesanda
managedbean
■hello2,aservlet-basedwebapplicationinwhichthecomponentsareimplementedbytwo
servletclasses
Theapplicationsareusedtoillustratetasksinvolvedinpackaging,deploying,configuring,and
runninganapplicationthatcontainswebcomponents.Thesourcecodefortheexamplesisinthetut-install /examples/web/hello1/ andtut-install /examples/web/hello2/ directories.WebApplicationLifecycle
Chapter3 • GettingStartedwithWebApplications 83
WebModules:Thehello1Example
IntheJavaEEarchitecture,a webmodule isthesmallestdeployableandusableunitofweb
resources.Awebmodulecontainswebcomponentsandstaticwebcontentfiles,suchasimages,whicharecalled webresources .AJavaEEwebmodulecorrespondstoawebapplicationas
definedintheJavaServletspecification.
Inadditiontowebcomponentsandwebresources,awebmodulecancontainotherfiles:
■Server-sideutilityclasses,suchasshoppingcarts
■Client-sideclasses,suchasappletsandutilityclasses
Awebmodulehasaspecificstructure.Thetop-leveldirectoryofawebmoduleisthe document
rootoftheapplication.ThedocumentrootiswhereXHTMLpages,client-sideclassesand
archives,andstaticwebresources,suchasimages,arestored.
Thedocumentrootcontainsasubdirectorynamed WEB-INF,whichcancontainthefollowing
filesanddirectories:
■classes:Adirectorythatcontainsserver-sideclasses:servlets,enterprisebeanclassfiles,
utilityclasses,andJavaBeanscomponents
■lib:AdirectorythatcontainsJARfilesthatcontainenterprisebeans,andJARarchivesof
librariescalledbyserver-sideclasses
■Deploymentdescriptors,suchas web.xml(thewebapplicationdeploymentdescriptor)and
ejb-jar.xml (anEJBdeploymentdescriptor)
Awebmoduleneedsa web.xmlfileifitusesJavaServerFacestechnology,ifitmustspecify
certainkindsofsecurityinformation,orifyouwanttooverrideinformationspecifiedbywebcomponentannotations.
Youcanalsocreateapplication-specificsubdirectories(thatis,packagedirectories)ineitherthe
documentrootorthe WEB-INF/classes/ directory.
AwebmodulecanbedeployedasanunpackedfilestructureorcanbepackagedinaJARfile
knownasaWebArchive(WAR)file.BecausethecontentsanduseofWARfilesdifferfromthoseofJARfiles,WARfilenamesusea .warextension.Thewebmodulejustdescribedis
portable;youcandeployitintoanywebcontainerthatconformstotheJavaServletspecification.
TodeployaWARontheGlassFishServer,thefilemustcontainaruntimedeployment
descriptor.TheruntimeDDisanXMLfilethatcontainssuchinformationasthecontextrootofthewebapplicationandthemappingoftheportablenamesofanapplication’sresourcestotheGlassFishServer’sresources.TheGlassFishServerwebapplicationruntimeDDisnamedglassfish-web.xml andislocatedinthe WEB-INFdirectory.Thestructureofawebmodulethat
canbedeployedontheGlassFishServerisshownin
Figure3–2 .
Forexample,the glassfish-web.xml fileforthe hello1applicationspecifiesthefollowing
contextroot:WebModules:Thehello1Example
TheJavaEE6Tutorial • January2013 84
<context-root>/hello1</context-root>
Examiningthehello1WebModule
Thehello1applicationisawebmodulethatusesJavaServerFacestechnologytodisplaya
greetingandresponse.Youcanuseatexteditortoviewtheapplicationfiles,oryoucanuseNetBeansIDE.
▼ToViewthehello1WebModuleUsingNetBeansIDE
FromtheFilemenu,chooseOpenProject.
IntheOpenProjectdialog,navigateto:
tut-install /examples/web/
Selectthe hello1folder.
SelecttheOpenasMainProjectcheckbox.FIGURE3–2 WebModuleStructure
Assembly Root
WEB-INF
lib classes
web.xml
glassfish-web.xml(optional)
Library
archive filesAll server-side
.class files forthis web moduleWeb pages
1
2
3
4WebModules:Thehello1Example
Chapter3 • GettingStartedwithWebApplications 85
ExpandtheWebPagesnodeanddouble-clickthe index.xhtml filetoviewitintheright-hand
pane.
Theindex.xhtml fileisthedefaultlandingpageforaFaceletsapplication.Forthisapplication,
thepageusessimpletagmarkuptodisplayaformwithagraphicimage,aheader,atextfield,andtwocommandbuttons:
<?xml version=’1.0’ encoding=’UTF-8’ ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN "
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd ">
<html lang= "en"
xmlns= "http://www.w3.org/1999/xhtml "
xmlns:h= "http://java.sun.com/jsf/html ">
<h:head>
<title>Facelets Hello Greeting</title>
</h:head><h:body>
<h:form>
<h:graphicImage url= "duke.waving.gif "alt="Duke waving his hand "/>
<h2>Hello, my name is Duke. What’s yours?</h2><h:inputText id= "username "
title= "My name is: "
value= "#{hello.name} "
required= "true"
requiredMessage= "Error: A name is required. "
maxlength= "25"/>
<p></p><h:commandButton id= "submit "value= "Submit "action= "response ">
</h:commandButton><h:commandButton id= "reset "value= "Reset "type= "reset ">
</h:commandButton>
</h:form>...
</h:body>
</html>
Themostcomplexelementonthepageisthe inputText textfield.The maxlength attribute
specifiesthemaximumlengthofthefield.The required attributespecifiesthatthefieldmust
befilledout;the requiredMessage attributeprovidestheerrormessagetobedisplayedifthe
fieldisleftempty.The titleattributeprovidesthetexttobeusedbyscreenreadersforthe
visuallydisabled.Finally,the valueattributecontainsanexpressionthatwillbeprovidedbythe
Hellomanagedbean.
TheSubmit commandButton elementspecifiestheactionas response ,meaningthatwhenthe
buttonisclicked,the response.xhtml pageisdisplayed.
Double-clickthe response.xhtml filetoviewit.
Theresponsepageappears.Evensimplerthanthegreetingpage,theresponsepagecontainsa
graphicimage,aheaderthatdisplaystheexpressionprovidedbythemanagedbean,andasinglebuttonwhose actionelementtransfersyoubacktothe index.xhtml page:
<?xml version=’1.0’ encoding=’UTF-8’ ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN "
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd ">
<html lang= "en"5
6WebModules:Thehello1Example
TheJavaEE6Tutorial • January2013 86
xmlns= "http://www.w3.org/1999/xhtml "
xmlns:h= "http://java.sun.com/jsf/html ">
<h:head>
<title>Facelets Hello Response</title>
</h:head><h:body>
<h:form>
<h:graphicImage url= "duke.waving.gif "alt="Duke waving his hand "/>
<h2>Hello, #{hello.name}!</h2><p></p><h:commandButton id= "back"value= "Back"action= "index "/>
</h:form>
</h:body>
</html>
ExpandtheSourcePackagesnode,thenthe hello1node.
Double-clickthe Hello.java filetoviewit.
TheHelloclass,calledamanagedbeanclass,providesgetterandsettermethodsforthe name
propertyusedintheFaceletspageexpressions.Bydefault,theexpressionlanguagereferstotheclassname,withthefirstletterinlowercase( hello.name ).
package hello1;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.RequestScoped;
@ManagedBean
@RequestScopedpublic class Hello {
private String name;public Hello() {
}
public String getName() {
return name;
}
public void setName(String user_name) {
this.name = user_name;
}
}
UndertheWebPagesnode,expandthe WEB-INFnodeanddouble-clickthe web.xmlfiletoview
it.
Theweb.xmlfilecontainsseveralelementsthatarerequiredforaFaceletsapplication.Allthese
arecreatedautomaticallywhenyouuseNetBeansIDEtocreateanapplication:
■Acontextparameterspecifyingtheprojectstage:
<context-param>
<param-name>javax.faces.PROJECT_STAGE</param-name><param-value>Development</param-value>
</context-param>7
8
9WebModules:Thehello1Example
Chapter3 • GettingStartedwithWebApplications 87
Acontextparameterprovidesconfigurationinformationneededbyawebapplication.An
applicationcandefineitsowncontextparameters.Inaddition,JavaServerFacestechnology
andJavaServlettechnologydefinecontextparametersthatanapplicationcanuse.
■Aservletelementandits servlet-mapping elementspecifyingthe FacesServlet :
<servlet>
<servlet-name>Faces Servlet</servlet-name><servlet-class>javax.faces.webapp.FacesServlet</servlet-class><load-on-startup>1</load-on-startup>
</servlet><servlet-mapping>
<servlet-name>Faces Servlet</servlet-name><url-pattern>/faces/*</url-pattern>
</servlet-mapping>
■Awelcome-file-list elementspecifyingthelocationofthelandingpage;notethatthe
locationis faces/index.xhtml ,notjust index.xhtml :
<welcome-file-list>
<welcome-file>faces/index.xhtml</welcome-file>
</welcome-file-list>
IntroductiontoScopes
Inthe Hello.java class,theannotations javax.faces.bean.ManagedBean and
javax.faces.bean.RequestScoped identifytheclassasaJavaServerFacesmanagedbeanusing
requestscope.Scopedefineshowapplicationdatapersistsandisshared.
ThemostcommonlyusedscopesinJavaServerFacesapplicationsarethefollowing:
■Request( @RequestScoped ):RequestscopepersistsduringasingleHTTPrequestinaweb
application.Inanapplicationlike hello1,wheretheapplicationconsistsofasinglerequest
andresponse,thebeanusesrequestscope.
■Session( @SessionScoped ):SessionscopepersistsacrossmultipleHTTPrequestsinaweb
application.Whenanapplicationconsistsofmultiplerequestsandresponseswheredataneedstobemaintained,beansusesessionscope.
■Application( @ApplicationScoped ):Applicationscopepersistsacrossallusers’interactions
withawebapplication.
FormoreinformationonscopesinJavaServerFacestechnology,see “UsingManagedBean
Scopes”onpage296 .
PackagingaWebModule
AwebmodulemustbepackagedintoaWARincertaindeploymentscenariosandwheneveryouwanttodistributethewebmodule.YoupackageawebmoduleintoaWARbyexecutingthejarcommandinadirectorylaidoutintheformatofawebmodule,byusingtheAntutility,
orbyusingtheIDEtoolofyourchoice.ThistutorialshowsyouhowtouseNetBeansIDEorAnttobuild,package,anddeploythe hello1sampleapplication.WebModules:Thehello1Example
TheJavaEE6Tutorial • January2013 88
▼ToSettheContextRoot
Acontextroot identifiesawebapplicationinaJavaEEserver.Acontextrootmuststartwitha
forwardslash( /)andendwithastring.
InapackagedwebmodulefordeploymentontheGlassFishServer,thecontextrootisstoredin
glassfish-web.xml .
Tovieworeditthecontextroot,followthesesteps.
ExpandtheWebPagesandWEB-INFnodesofthe hello1project.
Double-click glassfish-web.xml .
IntheGeneraltab,observethattheContextRootfieldissetto /hello1.
Ifyouneededtoeditthisvalue,youcoulddosohere.Whenyoucreateanewapplication,you
typethecontextroothere.
(Optional)ClicktheXMLtab.
Observethatthecontextrootvalue /hello1isenclosedbythe context-root element.You
couldalsoeditthevaluehere.
▼ToBuildandPackagethehello1WebModuleUsingNetBeansIDE
FromtheFilemenu,chooseOpenProject.
IntheOpenProjectdialog,navigateto:
tut-install /examples/web/
Selectthe hello1folder.
SelecttheOpenasMainProjectcheckbox.ClickOpenProject.IntheProjectstab,right-clickthe hello1projectandselectBuild.
▼ToBuildandPackagethehello1WebModuleUsingAnt
Inaterminalwindow,goto:
tut-install /examples/web/hello1/
Typethefollowingcommand:
ant1
23
4
1
2
3
456
1
2WebModules:Thehello1Example
Chapter3 • GettingStartedwithWebApplications 89
Thiscommandspawnsanynecessarycompilations,copiesfilestothedirectory
tut-install /examples/web/hello1/build/ ,createstheWARfile,andcopiesittothedirectory
tut-install /examples/web/hello1/dist/ .
DeployingaWebModule
YoucandeployaWARfiletotheGlassFishServerby
■UsingNetBeansIDE
■UsingtheAntutility
■Usingthe asadmincommand
■UsingtheAdministrationConsole
■CopyingtheWARfileintothe domain-dir /autodeploy/ directory
Throughoutthetutorial,youwilluseNetBeansIDEorAntforpackaginganddeploying.
▼ToDeploythehello1WebModuleUsingNetBeansIDE
Right-clickthe hello1projectandselectDeploy.
▼ToDeploythehello1WebModuleUsingAnt
Inaterminalwindow,goto:
tut-install /examples/web/hello1/
Typethefollowingcommand:
ant deploy
RunningaDeployedWebModule
Nowthatthewebmoduleisdeployed,youcanviewitbyopeningtheapplicationinaweb
browser.Bydefault,theapplicationisdeployedtohost localhost onport8080.Thecontext
rootofthewebapplicationis hello1.
▼ToRunaDeployedWebModule
Openawebbrowser.
TypethefollowingURL:
http://localhost:8080/hello1/
TypeyournameandclickSubmit.
Theresponsepagedisplaysthenameyousubmitted.ClicktheBackbuttontotryagain.●
1
2
1
2
3WebModules:Thehello1Example
TheJavaEE6Tutorial • January2013 90
ListingDeployedWebModules
TheGlassFishServerprovidestwowaystoviewthedeployedwebmodules:theAdministration
Consoleandthe asadmincommand.
▼ToListDeployedWebModulesUsingtheAdministrationConsole
OpentheURL http://localhost:4848/ inabrowser.
SelecttheApplicationsnode.
ThedeployedwebmodulesappearintheDeployedApplicationstable.
▼ToListDeployedWebModulesUsingthe asadminCommand
Typethefollowingcommand:
asadmin list-applications
UpdatingaWebModule
Atypicaliterativedevelopmentcycleinvolvesdeployingawebmoduleandthenmaking
changestotheapplicationcomponents.Toupdateadeployedwebmodule,followthesesteps.
▼ToUpdateaDeployedWebModule
Recompileanymodifiedclasses.
Redeploythemodule.ReloadtheURLintheclient.
DynamicReloading
Ifdynamicreloadingisenabled,youdonothavetoredeployanapplicationormodulewhen
youchangeitscodeordeploymentdescriptors.Allyouhavetodoiscopythechangedpagesorclassfilesintothedeploymentdirectoryfortheapplicationormodule.Thedeploymentdirectoryforawebmodulenamed context-root isdomain-dir /applications/ context-root .The
serverchecksforchangesperiodicallyandredeploystheapplication,automaticallyanddynamically,withthechanges.1
2
●
1
23WebModules:Thehello1Example
Chapter3 • GettingStartedwithWebApplications 91
Thiscapabilityisusefulinadevelopmentenvironmentbecauseitallowscodechangestobe
testedquickly.Dynamicreloadingisnotrecommendedforaproductionenvironment,however,becauseitmaydegradeperformance.Inaddition,wheneverareloadisdone,thesessionsatthattimebecomeinvalid,andtheclientmustrestartthesession.
IntheGlassFishServer,dynamicreloadingisenabledbydefault.
▼ToDisableorModifyDynamicReloading
Ifforsomereasonyoudonotwantthedefaultdynamicreloadingbehavior,followthesestepsin
theAdministrationConsole.
OpentheURL http://localhost:4848/ inabrowser.
SelecttheGlassFishServernode.SelecttheAdvancedtab.Todisabledynamicreloading,deselecttheReloadEnabledcheckbox.Tochangetheintervalatwhichapplicationsandmodulesarecheckedforcodechangesand
dynamicallyreloaded,typeanumberofsecondsintheReloadPollIntervalfield.
Thedefaultvalueis2seconds.
ClicktheSavebutton.
UndeployingWebModules
Youcanundeploywebmodulesandothertypesofenterpriseapplicationsbyusingeither
NetBeansIDEortheAnttool.
▼ToUndeploythehello1WebModuleUsingNetBeansIDE
EnsurethattheGlassFishServerisrunning.
IntheServiceswindow,expandtheServersnode,GlassFishServerinstance,andthe
Applicationsnode.
Right-clickthe hello1moduleandchooseUndeploy.
Todeletetheclassfilesandotherbuildartifacts,right-clicktheprojectandchooseClean.1
2345
6
1
2
3
4WebModules:Thehello1Example
TheJavaEE6Tutorial • January2013 92
▼ToUndeploythehello1WebModuleUsingAnt
Inaterminalwindow,goto:
tut-install /examples/web/hello1/
Typethefollowingcommand:
ant undeploy
Todeletetheclassfilesandotherbuildartifacts,typethefollowingcommand:
ant clean
ConfiguringWebApplications:Thehello2Example
Webapplicationsareconfiguredbymeansofannotationsorbyelementscontainedintheweb
applicationdeploymentdescriptor.
Thefollowingsectionsgiveabriefintroductiontothewebapplicationfeaturesyouwillusually
wanttoconfigure.ExamplesdemonstrateproceduresforconfiguringtheHello,Worldapplication.
MappingURLstoWebComponents
Whenitreceivesarequest,thewebcontainermustdeterminewhichwebcomponentshouldhandletherequest.Thewebcontainerdoessobymappingthe URLpath containedinthe
requesttoawebapplicationandawebcomponent.AURLpathcontainsthecontextrootand,optionally,aURLpattern:
http://host:port/context-root [/url-pattern ]
YousettheURLpatternforaservletbyusingthe @WebServlet annotationintheservletsource
file.Forexample,the GreetingServlet.java fileinthe hello2applicationcontainsthe
followingannotation,specifyingtheURLpatternas /greeting :
@WebServlet( "/greeting ")
public class GreetingServlet extends HttpServlet {
...
ThisannotationindicatesthattheURLpattern /greeting followsthecontextroot.Therefore,
whentheservletisdeployedlocally,itisaccessedwiththefollowingURL:
http://localhost:8080/hello2/greeting
Toaccesstheservletbyusingonlythecontextroot,specify "/"astheURLpattern.1
23ConfiguringWebApplications:Thehello2Example
Chapter3 • GettingStartedwithWebApplications 93
Examiningthehello2WebModule
Thehello2applicationbehavesalmostidenticallytothe hello1application,butitis
implementedusingJavaServlettechnologyinsteadofJavaServerFacestechnology.Youcanuseatexteditortoviewtheapplicationfiles,oryoucanuseNetBeansIDE.
▼ToViewthehello2WebModuleUsingNetBeansIDE
FromtheFilemenu,chooseOpenProject.
IntheOpenProjectdialog,navigateto:
tut-install /examples/web/
Selectthe hello2folder.
SelecttheOpenasMainProjectcheckbox.ExpandtheSourcePackagesnode,thenthe servlets node.
Double-clickthe GreetingServlet.java filetoviewit.
Thisservletoverridesthe doGetmethod,implementingthe GETmethodofHTTP.Theservlet
displaysasimpleHTMLgreetingformwhoseSubmitbutton,likethatof hello1,specifiesa
responsepageforitsaction.Thefollowingexcerptbeginswiththe @WebServlet annotation
thatspecifiestheURLpattern,relativetothecontextroot:
@WebServlet( "/greeting ")
public class GreetingServlet extends HttpServlet {
@Override
public void doGet(HttpServletRequest request,
HttpServletResponse response)throws ServletException, IOException {
response.setContentType( "text/html ");
response.setBufferSize(8192);PrintWriter out = response.getWriter();
// then write the data of the response
out.println( "<html lang=\ "en\">"
+"<head><title>Servlet Hello</title></head> ");
// then write the data of the response
out.println( "<body bgcolor=\ "#ffffff\ ">"
+"<img src=\ "duke.waving.gif\ "alt=\ "Duke waving his hand\ ">"
+"<form method=\ "get\">"
+"<h2>Hello, my name is Duke. What’s yours?</h2> "
+"<input title=\ "My name is: \ "type=\ "text\ ""
+"name=\ "username\ "size=\ "25\">"
+"<p></p> "
+"<input type=\ "submit\ "value=\ "Submit\ ">"1
2
3
456ConfiguringWebApplications:Thehello2Example
TheJavaEE6Tutorial • January2013 94
+"<input type=\ "reset\ "value=\ "Reset\ ">"
+"</form> ");
String username = request.getParameter( "username ");
if (username != null && username.length() > 0) {
RequestDispatcher dispatcher =
getServletContext().getRequestDispatcher( "/response ");
if (dispatcher != null) {
dispatcher.include(request, response);
}
}out.println( "</body></html> ");
out.close();
}...
Double-clickthe ResponseServlet.java filetoviewit.
Thisservletalsooverridesthe doGetmethod,displayingonlytheresponse.Thefollowing
excerptbeginswiththe @WebServlet annotation,whichspecifiestheURLpattern,relativeto
thecontextroot:
@WebServlet( "/response ")
public class ResponseServlet extends HttpServlet {
@Override
public void doGet(HttpServletRequest request,
HttpServletResponse response)throws ServletException, IOException {
PrintWriter out = response.getWriter();
// then write the data of the response
String username = request.getParameter( "username ");
if (username != null && username.length() > 0) {
out.println( "<h2>Hello, "+ username + "!</h2> ");
}
}...
UndertheWebPagesnode,expandthe WEB-INFnodeanddouble-clickthe
glassfish-web.xml filetoviewit.
IntheGeneraltab,observethattheContextRootfieldissetto /hello2.
Forthissimpleservletapplication,a web.xmlfileisnotrequired.
Runningthehello2Example
YoucanuseeitherNetBeansIDEorAnttobuild,package,deploy,andrunthe hello2example.7
8ConfiguringWebApplications:Thehello2Example
Chapter3 • GettingStartedwithWebApplications 95
▼ToRunthehello2ExampleUsingNetBeansIDE
FromtheFilemenu,chooseOpenProject.
IntheOpenProjectdialog,navigateto:
tut-install /examples/web/
Selectthe hello2folder.
SelecttheOpenasMainProjectcheckbox.ClickOpenProject.IntheProjectstab,right-clickthe hello2projectandselectBuild.
Right-clicktheprojectandselectDeploy.Inawebbrowser,opentheURL http://localhost:8080/hello2/greeting .
TheURLspecifiesthecontextroot,followedbytheURLpattern.
Theapplicationlooksmuchlikethe hello1application.Themajordifferenceisthatafteryou
clicktheSubmitbutton,theresponseappearsbelowthegreeting,notonaseparatepage.
▼ToRunthehello2ExampleUsingAnt
Inaterminalwindow,goto:
tut-install /examples/web/hello2/
Typethefollowingcommand:
ant
ThistargetbuildstheWARfileandcopiesittothe tut-install /examples/web/hello2/dist/
directory.
Type ant deploy .
IgnoretheURLshowninthedeploytargetoutput.
Inawebbrowser,opentheURL http://localhost:8080/hello2/greeting .
TheURLspecifiesthecontextroot,followedbytheURLpattern.
Theapplicationlooksmuchlikethe hello1application.Themajordifferenceisthatafteryou
clicktheSubmitbutton,theresponseappearsbelowthegreeting,notonaseparatepage.1
2
3
45678
1
2
3
4ConfiguringWebApplications:Thehello2Example
TheJavaEE6Tutorial • January2013 96
DeclaringWelcomeFiles
Thewelcomefiles mechanismallowsyoutospecifyalistoffilesthatthewebcontainerwilluse
forappendingtoarequestforaURL(calledavalidpartialrequest)thatisnotmappedtoawebcomponent.Forexample,supposethatyoudefineawelcomefile welcome.html .Whenaclient
requestsaURLsuchas host:port/webapp /directory,wheredirectoryisnotmappedtoaservlet
orXHTMLpage,thefile host:port/webapp /directory /welcome.html isreturnedtotheclient.
Ifawebcontainerreceivesavalidpartialrequest,thewebcontainerexaminesthewelcomefile
listandappendstothepartialrequesteachwelcomefileintheorderspecifiedandcheckswhetherastaticresourceorservletintheWARismappedtothatrequestURL.ThewebcontainerthensendstherequesttothefirstresourcethatmatchesintheWAR.
Ifnowelcomefileisspecified,theGlassFishServerwilluseafilenamed index.html asthe
defaultwelcomefile.Ifthereisnowelcomefileandnofilenamed index.html ,theGlassFish
Serverreturnsadirectorylisting.
Byconvention,youspecifythewelcomefileforaJavaServerFacesapplicationas
faces/file-name .xhtml.
SettingContextParameters
Thewebcomponentsinawebmoduleshareanobjectthatrepresentstheirapplicationcontext.
Youcanpasscontextparameterstothecontext,orinitializationparameterstoaservlet.Contextparametersareavailabletotheentirewebapplication.Forinformationoninitializationparameters,see
“CreatingandInitializingaServlet”onpage331 .
▼ToAddaContextParameterUsingNetBeansIDE
Thesestepsapplygenerallytowebapplications,butdonotapplyspecificallytotheexamplesin
thischapter.
Opentheproject.Expandtheproject’snodeintheProjectspane.ExpandtheWebPagesnodeandthentheWEB-INFnode.Double-click web.xml.
Iftheprojectdoesnothavea web.xmlfile,followthestepsin
“ToCreatea web.xmlFileUsing
NetBeansIDE”onpage98 .
ClickGeneralatthetopoftheeditorpane.ExpandtheContextParametersnode.1
234
5
6ConfiguringWebApplications:Thehello2Example
Chapter3 • GettingStartedwithWebApplications 97
ClickAdd.
AnAddContextParameterdialogopens.
IntheParameterNamefield,typethenamethatspecifiesthecontextobject.IntheParameterValuefield,typetheparametertopasstothecontextobject.ClickOK.
▼ToCreatea web.xmlFileUsingNetBeansIDE
FromtheFilemenu,chooseNewFile.
IntheNewFilewizard,selecttheWebcategory,thenselectStandardDeploymentDescriptor
underFileTypes.
ClickNext.ClickFinish.
Abasic web.xmlfileappearsin web/WEB-INF/ .
MappingErrorstoErrorScreens
Whenanerroroccursduringexecutionofawebapplication,youcanhavetheapplication
displayaspecificerrorscreenaccordingtothetypeoferror.Inparticular,youcanspecifyamappingbetweenthestatuscodereturnedinanHTTPresponseoraJavaprogramminglanguageexceptionreturnedbyanywebcomponentandanytypeoferrorscreen.
Youcanhavemultiple error-page elementsinyourdeploymentdescriptor.Eachelement
identifiesadifferenterrorthatcausesanerrorpagetoopen.Thiserrorpagecanbethesameforanynumberof error-page elements.
▼ToSetUpErrorMappingUsingNetBeansIDE
Thesestepsapplygenerallytowebapplications,butdonotapplyspecificallytotheexamplesin
thischapter.
Opentheproject.Expandtheproject’snodeintheProjectspane.ExpandtheWebPagesnodeandthentheWEB-INFnode.7
8
9
10
1
2
3
4
1
23ConfiguringWebApplications:Thehello2Example
TheJavaEE6Tutorial • January2013 98
Double-click web.xml.
Iftheprojectdoesnothavea web.xmlfile,followthestepsin “ToCreatea web.xmlFileUsing
NetBeansIDE”onpage98 .
ClickPagesatthetopoftheeditorpane.ExpandtheErrorPagesnode.ClickAdd.
TheAddErrorPagedialogopens.
ClickBrowsetolocatethepagethatyouwanttoactastheerrorpage.Specifyeitheranerrorcodeoranexceptiontype:
■Tospecifyanerrorcode,intheErrorCodefield,typetheHTTPstatuscodethatwillcause
theerrorpagetobeopened,orleavethefieldblanktoincludeallerrorcodes.
■Tospecifyanexceptiontype,intheExceptionTypefield,typetheexceptionthatwillcausetheerrorpagetoload.Tospecifyallthrowableerrorsandexceptions,typejava.lang.Throwable .
ClickOK.
DeclaringResourceReferences
Ifyourwebcomponentusessuchobjectsasenterprisebeans,datasources,orwebservices,you
useJavaEEannotationstoinjecttheseresourcesintoyourapplication.AnnotationseliminatealotoftheboilerplatelookupcodeandconfigurationelementsthatpreviousversionsofJavaEErequired.
Althoughresourceinjectionusingannotationscanbemoreconvenientforthedeveloper,there
aresomerestrictionsonusingitinwebapplications.First,youcaninjectresourcesonlyintocontainer-managedobjects,sinceacontainermusthavecontroloverthecreationofacomponentsothatitcanperformtheinjectionintoacomponent.Asaresult,youcannotinjectresourcesintosuchobjectsassimpleJavaBeanscomponents.However,JavaServerFacesmanagedbeansandCDImanagedbeansaremanagedbythecontainer;therefore,theycanacceptresourceinjections.
Componentsthatcanacceptresourceinjectionsarelistedin
Table3–1 .
Thissectionexplainshowtouseacoupleoftheannotationssupportedbyawebcontainerto
injectresources. Chapter33,“RunningthePersistenceExamples,” explainshowweb
applicationsuseannotationssupportedbytheJavaPersistenceAPI. Chapter40,“Getting4
5
67
8
9
10ConfiguringWebApplications:Thehello2Example
Chapter3 • GettingStartedwithWebApplications 99
StartedSecuringWebApplications,” explainshowtouseannotationstospecifyinformation
aboutsecuringwebapplications.See Chapter45,“ResourcesandResourceAdapters,” formore
informationonresources.
TABLE3–1 WebComponentsThatAcceptResourceInjections
Component Interface/Class
Servlets javax.servlet.Servlet
Servletfilters javax.servlet.ServletFilter
Eventlisteners javax.servlet.ServletContextListener
javax.servlet.ServletContextAttributeListenerjavax.servlet.ServletRequestListenerjavax.servlet.ServletRequestAttributeListenerjavax.servlet.http.HttpSessionListenerjavax.servlet.http.HttpSessionAttributeListenerjavax.servlet.http.HttpSessionBindingListener
Managedbeans PlainOldJavaObjects
DeclaringaReferencetoaResource
The@Resource annotationisusedtodeclareareferencetoaresource,suchasadatasource,an
enterprisebean,oranenvironmententry.
The@Resource annotationisspecifiedonaclass,amethod,orafield.Thecontaineris
responsibleforinjectingreferencestoresourcesdeclaredbythe @Resource annotationand
mappingittotheproperJNDIresources.
Inthefollowingexample,the @Resource annotationisusedtoinjectadatasourceintoa
componentthatneedstomakeaconnectiontothedatasource,asisdonewhenusingJDBCtechnologytoaccessarelationaldatabase:
@Resource javax.sql.DataSource catalogDS;
public getProductsByCategory() {
// get a connection and execute the queryConnection conn = catalogDS.getConnection();...
}
Thecontainerinjectsthisdatasourcepriortothecomponent’sbeingmadeavailabletothe
application.ThedatasourceJNDImappingisinferredfromthefieldname catalogDS andthe
type, javax.sql.DataSource .
Ifyouhavemultipleresourcesthatyouneedtoinjectintoonecomponent,youneedtousethe
@Resources annotationtocontainthem,asshownbythefollowingexample:ConfiguringWebApplications:Thehello2Example
TheJavaEE6Tutorial • January2013 100
@Resources ({
@Resource (name= "myDB"type=java.sql.DataSource),
@Resource(name= "myMQ"type=javax.jms.ConnectionFactory)
})
ThewebapplicationexamplesinthistutorialusetheJavaPersistenceAPItoaccessrelational
databases.ThisAPIdoesnotrequireyoutoexplicitlycreateaconnectiontoadatasource.Therefore,theexamplesdonotusethe @Resource annotationtoinjectadatasource.However,
thisAPIsupportsthe @PersistenceUnit and@PersistenceContext annotationsforinjecting
EntityManagerFactory andEntityManager instances,respectively.
Chapter33,“Runningthe
PersistenceExamples,” describestheseannotationsandtheuseoftheJavaPersistenceAPIin
webapplications.
DeclaringaReferencetoaWebService
The@WebServiceRef annotationprovidesareferencetoawebservice.Thefollowingexample
showsusesthe @WebServiceRef annotationtodeclareareferencetoawebservice.
WebServiceRef usesthe wsdlLocation elementtospecifytheURIofthedeployedservice’s
WSDLfile:
...
import javax.xml.ws.WebServiceRef;...public class ResponseServlet extends HTTPServlet {@WebServiceRef(wsdlLocation=
"http://localhost:8080/helloservice/hello?wsdl ")
static HelloService service;
FurtherInformationaboutWebApplications
Formoreinformationonwebapplications,see
■JavaServerFaces2.0specification:
http://jcp.org/en/jsr/detail?id=314
■JavaServerFacestechnologywebsite:
http://www.oracle.com/technetwork/java/javaee/javaserverfaces-139869.html
■JavaServlet3.0specification:
http://jcp.org/en/jsr/detail?id=315
■JavaServletwebsite:
http://www.oracle.com/technetwork/java/index-jsp-135475.htmlFurtherInformationaboutWebApplications
Chapter3 • GettingStartedwithWebApplications 101
102
JavaServerFacesTechnology
JavaServerFacestechnologyisaserver-sidecomponentframeworkforbuildingJava
technology-basedwebapplications.
JavaServerFacestechnologyconsistsofthefollowing:
■AnAPIforrepresentingcomponentsandmanagingtheirstate;handlingevents,server-side
validation,anddataconversion;definingpagenavigation;supportinginternationalizationandaccessibility;andprovidingextensibilityforallthesefeatures
■Taglibrariesforaddingcomponentstowebpagesandforconnectingcomponentstoserver-sideobjects
JavaServerFacestechnologyprovidesawell-definedprogrammingmodelandvarioustag
libraries.Thetaglibrariescontaintaghandlersthatimplementthecomponenttags.Thesefeaturessignificantlyeasetheburdenofbuildingandmaintainingwebapplicationswithserver-sideuserinterfaces(UIs).Withminimaleffort,youcancompletethefollowingtasks.
■Createawebpage.
■Dropcomponentsontoawebpagebyaddingcomponenttags.
■Bindcomponentsonapagetoserver-sidedata.
■Wirecomponent-generatedeventstoserver-sideapplicationcode.
■Saveandrestoreapplicationstatebeyondthelifeofserverrequests.
■Reuseandextendcomponentsthroughcustomization.
ThischapterprovidesanoverviewofJavaServerFacestechnology.Afterexplainingwhata
JavaServerFacesapplicationisandreviewingsomeoftheprimarybenefitsofusingJavaServerFacestechnology,thischapterdescribestheprocessofcreatingasimpleJavaServerFacesapplication.ThischapteralsointroducestheJavaServerFaceslifecyclebydescribingtheexampleJavaServerFacesapplicationprogressingthroughthelifecyclestages.
Thefollowingtopicsareaddressedhere:
■“WhatIsaJavaServerFacesApplication?”onpage104
■“JavaServerFacesTechnologyBenefits”onpage1054CHAPTER 4
103
■“CreatingaSimpleJavaServerFacesApplication”onpage106
■“FurtherInformationaboutJavaServerFacesTechnology”onpage110
WhatIsaJavaServerFacesApplication?
ThefunctionalityprovidedbyaJavaServerFacesapplicationissimilartothatofanyotherJava
webapplication.AtypicalJavaServerFacesapplicationincludesthefollowingparts:
■Asetofwebpagesinwhichcomponentsarelaidout
■Asetoftagstoaddcomponentstothewebpage
■Asetofmanagedbeans ,whicharelightweightcontainer-managedobjects(POJOs)with
minimalrequirements.Theysupportasmallsetofbasicservices,suchasresourceinjection,lifecyclecallbacksandinterceptors.
■Awebdeploymentdescriptor( web.xmlfile)
■Optionally,oneormore applicationconfigurationresourcefiles ,suchasa
faces-config.xml file,whichcanbeusedtodefinepagenavigationrulesandconfigure
beansandothercustomobjects,suchascustomcomponents
■Optionally,asetofcustomobjects,whichcanincludecustomcomponents,validators,converters,orlisteners,createdbytheapplicationdeveloper
■Optionally,asetofcustomtagsforrepresentingcustomobjectsonthepage
Figure4–1 showstheinteractionbetweenclientandserverinatypicalJavaServerFaces
application.Inresponsetoaclientrequest,awebpageisrenderedbythewebcontainerthatimplementsJavaServerFacestechnology.
FIGURE4–1 RespondingtoaClientRequestforaJavaServerFacesPage
Web Container
myfacelet.xhtml  
myUIBrowser
Renders HTML 
HTTP ResponseAccess page
HTTP Request
WhatIsaJavaServerFacesApplication?
TheJavaEE6Tutorial • January2013 104
Thewebpage, myfacelet.xhtml ,isbuiltusingJavaServerFacescomponenttags.Component
tagsareusedtoaddcomponentstothe view(representedby myUIinthediagram),whichisthe
server-siderepresentationofthepage.Inadditiontocomponents,thewebpagecanalsoreferenceobjects,suchasthefollowing:
■Anyeventlisteners,validators,andconvertersthatareregisteredonthecomponents
■TheJavaBeanscomponentsthatcapturethedataandprocesstheapplication-specificfunctionalityofthecomponents
Onrequestfromtheclient,theviewisrenderedasaresponse.Renderingistheprocess
whereby,basedontheserver-sideview,thewebcontainergeneratesoutput,suchasHTMLorXHTML,thatcanbereadbytheclient,suchasabrowser.
JavaServerFacesTechnologyBenefits
OneofthegreatestadvantagesofJavaServerFacestechnologyisthatitoffersacleanseparationbetweenbehaviorandpresentationforwebapplications.AJavaServerFacesapplicationcanmapHTTPrequeststocomponent-specificeventhandlingandmanagecomponentsasstatefulobjectsontheserver.JavaServerFacestechnologyallowsyoutobuildwebapplicationsthatimplementthefiner-grainedseparationofbehaviorandpresentationthatistraditionallyofferedbyclient-sideUIarchitectures.
Theseparationoflogicfrompresentationalsoallowseachmemberofawebapplication
developmentteamtofocusonasinglepieceofthedevelopmentprocessandprovidesasimpleprogrammingmodeltolinkthepieces.Forexample,pageauthorswithnoprogrammingexpertisecanuseJavaServerFacestechnologytagsinawebpagetolinktoserver-sideobjectswithoutwritinganyscripts.
AnotherimportantgoalofJavaServerFacestechnologyistoleveragefamiliarcomponentand
web-tierconceptswithoutlimitingyoutoaparticularscriptingtechnologyormarkuplanguage.JavaServerFacestechnologyAPIsarelayereddirectlyontopoftheServletAPI,asshownin
Figure4–2 .
FIGURE4–2 JavaWebApplicationTechnologies
JavaServer Faces JavaServer Pages 
Standard Tag Library
JavaServer Pages 
Java ServletJavaServerFacesTechnologyBenefits
Chapter4 • JavaServerFacesTechnology 105
ThislayeringofAPIsenablesseveralimportantapplicationusecases,suchasusingdifferent
presentationtechnologies,creatingyourowncustomcomponentsdirectlyfromthecomponentclasses,andgeneratingoutputforvariousclientdevices.
Faceletstechnology,availableaspartofJavaServerFaces2.0,isnowthepreferredpresentation
technologyforbuildingJavaServerFacestechnology-basedwebapplications.FormoreinformationonFaceletstechnologyfeatures,see
Chapter5,“IntroductiontoFacelets.”
Faceletstechnologyoffersseveraladvantages.
■Codecanbereusedandextendedforcomponentsthroughthetemplatingandcompositecomponentfeatures.
■WhenyouusetheJavaServerFacesAnnotationsfeature,youcanautomaticallyregisterthemanagedbeanasaresourceavailableforJavaServerFacesapplications.Inaddition, implicit
navigation rulesallowdeveloperstoquicklyconfigurepagenavigation.Thesefeatures
reducethemanualconfigurationprocessforapplications.
■Mostimportant,JavaServerFacestechnologyprovidesaricharchitectureformanagingcomponentstate,processingcomponentdata,validatinguserinput,andhandlingevents.
CreatingaSimpleJavaServerFacesApplication
JavaServerFacestechnologyprovidesaneasyanduser-friendlyprocessforcreatingwebapplications.DevelopingasimpleJavaServerFacesapplicationtypicallyrequiresthefollowingtasks:
■Developingmanagedbeans
■Creatingwebpagesusingcomponenttags
■Mappingthe javax.faces.webapp.FacesServlet instance
ThissectiondescribesthosetasksthroughtheprocessofcreatingasimpleJavaServerFaces
Faceletsapplication.
TheexampleisaHelloapplicationthatincludesamanagedbeanandawebpage.When
accessedbyaclient,thewebpageprintsouta Hello World message.Theexampleapplicationis
locatedinthe tut-install /examples/web/hello/ directory.Thetasksinvolvedindeveloping
thisapplicationcanbeexaminedbylookingattheapplicationcomponentsindetail.
DevelopingtheManagedBean
Asmentionedearlierinthischapter,amanagedbeanisalightweightcontainer-managedobject.Componentsinapageareassociatedwithmanagedbeansthatprovideapplicationlogic.Theexamplemanagedbean, Hello.java ,containsthefollowingcode:CreatingaSimpleJavaServerFacesApplication
TheJavaEE6Tutorial • January2013 106
package hello;
import javax.faces.bean.ManagedBean;@ManagedBean
public class Hello {
final String world = "Hello World! ";
public String getworld() {
return world;
}
}
Theexamplemanagedbeansetsthevalueofthevariable worldwiththestring "Hello World! ".
The@ManagedBean annotationregistersthemanagedbeanasaresourcewiththeJavaServer
Facesimplementation.Formoreinformationonmanagedbeansandannotations,see
Chapter9,“DevelopingwithJavaServerFacesTechnology.”
CreatingtheWebPage
InatypicalFaceletsapplication,webpagesarecreatedinXHTML.Theexamplewebpage,beanhello.xhtml ,isasimpleXHTMLpage.Ithasthefollowingcontent:
<html lang= "en"
xmlns= "http://www.w3.org/1999/xhtml "
xmlns:h= "http://java.sun.com/jsf/html ">
<h:head>
<title>Facelets Hello World</title>
</h:head><h:body>
#{hello.world}
</h:body>
</html>
AFaceletsXHTMLwebpagecanalsocontainseveralotherelements,whicharecoveredlaterin
thistutorial.
ThewebpageconnectstothemanagedbeanthroughtheExpressionLanguage(EL)value
expression #{hello.world} ,whichretrievesthevalueofthe worldpropertyfromthemanaged
bean Hello.Notetheuseof hellotoreferencethemanagedbean Hello.Ifnonameisspecified
inthe @ManagedBean annotation,themanagedbeanisalwaysaccessedwiththefirstletterofthe
classnameinlowercase.
FormoreinformationonusingELexpressions,see Chapter6,“ExpressionLanguage.” For
moreinformationaboutFaceletstechnology,see Chapter5,“IntroductiontoFacelets.” For
moreinformationabouttheJavaServerFacesprogrammingmodelandbuildingwebpagesusingJavaServerFacestechnology,see
Chapter7,“UsingJavaServerFacesTechnologyinWeb
Pages.”CreatingaSimpleJavaServerFacesApplication
Chapter4 • JavaServerFacesTechnology 107
Mappingthe FacesServlet Instance
Thefinaltaskrequiresmappingthe FacesServlet ,whichisdonethroughthewebdeployment
descriptor( web.xml).Atypicalmappingof FacesServlet isasfollows:
<servlet>
<servlet-name>Faces Servlet</servlet-name><servlet-class>javax.faces.webapp.FacesServlet</servlet-class><load-on-startup>1</load-on-startup>
</servlet><servlet-mapping>
<servlet-name>Faces Servlet</servlet-name><url-pattern>/faces/*</url-pattern>
</servlet-mapping>
TheprecedingfilesegmentrepresentspartofatypicalJavaServerFaceswebdeployment
descriptor.ThewebdeploymentdescriptorcanalsocontainothercontentrelevanttoaJavaServerFacesapplicationconfiguration,butthatinformationisnotcoveredhere.
Mappingthe FacesServlet isautomaticallydoneforyouifyouareusinganIDEsuchas
NetBeansIDE.
TheLifecycleofthehelloApplication
Everywebapplicationhasalifecycle.Commontasks,suchashandlingincomingrequests,decodingparameters,modifyingandsavingstate,andrenderingwebpagestothebrowser,areallperformedduringawebapplicationlifecycle.Somewebapplicationframeworkshidethedetailsofthelifecyclefromyou,whereasothersrequireyoutomanagethemmanually.
Bydefault,JavaServerFacesautomaticallyhandlesmostofthelifecycleactionsforyou.
However,italsoexposesthevariousstagesoftherequestlifecycle,sothatyoucanmodifyorperformdifferentactionsifyourapplicationrequirementswarrantit.
ItisnotnecessaryforthebeginningusertounderstandthelifecycleofaJavaServerFaces
application,buttheinformationcanbeusefulforcreatingmorecomplexapplications.
ThelifecycleofaJavaServerFacesapplicationstartsandendswiththefollowingactivity:The
clientmakesarequestforthewebpage,andtheserverrespondswiththepage.Thelifecycleconsistsoftwomainphases: executeandrender.
Duringtheexecutephase,severalactionscantakeplace:
■Theapplicationviewisbuiltorrestored.
■Therequestparametervaluesareapplied.
■Conversionsandvalidationsareperformedforcomponentvalues.
■Managedbeansareupdatedwithcomponentvalues.
■Applicationlogicisinvoked.CreatingaSimpleJavaServerFacesApplication
TheJavaEE6Tutorial • January2013 108
Forafirst(initial)request,onlytheviewisbuilt.Forsubsequent(postback)requests,someorall
oftheotheractionscantakeplace.
Intherenderphase,therequestedviewisrenderedasaresponsetotheclient.Renderingis
typicallytheprocessofgeneratingoutput,suchasHTMLorXHTML,thatcanbereadbytheclient,usuallyabrowser.
ThefollowingshortdescriptionoftheexampleJavaServerFacesapplicationpassingthroughits
lifecyclesummarizestheactivitythattakesplacebehindthescenes.
Thehelloexampleapplicationgoesthroughthefollowingstageswhenitisdeployedonthe
GlassFishServer.
1. Whenthe helloapplicationisbuiltanddeployedontheGlassFishServer,theapplicationis
inanuninitiatedstate.
2. Whenaclientmakesaninitialrequestforthe beanhello.xhtml webpage,the hello
Faceletsapplicationiscompiled.
3. ThecompiledFaceletsapplicationisexecuted,andanewcomponenttreeisconstructedfor
thehelloapplicationandisplacedina javax.faces.context.FacesContext .
4. Thecomponenttreeispopulatedwiththecomponentandthemanagedbeanproperty
associatedwithit,representedbytheELexpression hello.world .
5. Anewviewisbuilt,basedonthecomponenttree.6. Theviewisrenderedtotherequestingclientasaresponse.7. Thecomponenttreeisdestroyedautomatically.8. Onsubsequent(postback)requests,thecomponenttreeisrebuilt,andthesavedstateis
applied.
FormoredetailedinformationontheJavaServerFaceslifecycle,see
Chapter10,“JavaServer
FacesTechnology:AdvancedConcepts.”
RunningthehelloApplication
YoucanuseeitherNetBeansIDEorAnttobuild,package,deploy,andrunthe helloexample.
▼ToRunthehelloApplicationinNetBeansIDE
FromtheFilemenu,chooseOpenProject.
IntheOpenProjectdialogbox,navigateto:
tut-install /examples/web
Selectthe hellofolder.1
2
3CreatingaSimpleJavaServerFacesApplication
Chapter4 • JavaServerFacesTechnology 109
SelecttheOpenasMainProjectcheckbox.
ClickOpenProject.IntheProjectstab,right-clickthe helloprojectandselectRun.
Thisstepcompiles,assembles,anddeploystheapplicationandthenbringsupawebbrowser
windowdisplayingthefollowingURL:
http://localhost:8080/hello
Theoutputlookslikethis:
Hello World!
▼ToRunthehelloExampleUsingAnt
Inaterminalwindow,goto:
tut-install /examples/web/hello/
Typethefollowingcommand:
ant
ThistargetbuildstheWARfileandcopiesittothe tut-install /examples/web/hello/dist/
directory.
Type ant deploy .
Inawebbrowser,typethefollowingURL:
http://localhost:8080/hello/
Theoutputlookslikethis:
Hello World!
FurtherInformationaboutJavaServerFacesTechnology
FormoreinformationonJavaServerFacestechnology,see
■JavaServerFaces2.0specification:
http://jcp.org/en/jsr/detail?id=314
■JavaServerFacesprojectwebsite:
http://javaserverfaces.java.net/
■Mojarra(JavaServerFaces2.0implementation)ReleaseNotes:
http://javaserverfaces.java.net/nonav/rlnotes/2.1.4/4
56
1
2
3
4FurtherInformationaboutJavaServerFacesTechnology
TheJavaEE6Tutorial • January2013 110
IntroductiontoFacelets
Theterm FaceletsreferstotheviewdeclarationlanguageforJavaServerFacestechnology.
JavaServerPages(JSP)technology,previouslyusedasthepresentationtechnologyforJavaServerFaces,doesnotsupportallthenewfeaturesavailableinJavaServerFacesintheJavaEE6platform.JSPtechnologyisconsideredtobeadeprecatedpresentationtechnologyforJavaServerFaces.FaceletsisapartoftheJavaServerFacesspecificationandalsothepreferredpresentationtechnologyforbuildingJavaServerFacestechnology-basedapplications.
Thefollowingtopicsareaddressedhere:
■“WhatIsFacelets?”onpage111
■“DevelopingaSimpleFaceletsApplication”onpage113
■“UsingFaceletsTemplates”onpage119
■“CompositeComponents”onpage121
■“WebResources”onpage123
WhatIsFacelets?
FaceletsisapowerfulbutlightweightpagedeclarationlanguagethatisusedtobuildJavaServer
FacesviewsusingHTMLstyletemplatesandtobuildcomponenttrees.Faceletsfeaturesincludethefollowing:
■UseofXHTMLforcreatingwebpages
■SupportforFaceletstaglibrariesinadditiontoJavaServerFacesandJSTLtaglibraries
■SupportfortheExpressionLanguage(EL)
■Templatingforcomponentsandpages
AdvantagesofFaceletsforlarge-scaledevelopmentprojectsincludethefollowing:
■Supportforcodereusethroughtemplatingandcompositecomponents
■Functionalextensibilityofcomponentsandotherserver-sideobjectsthroughcustomization5CHAPTER 5
111
■Fastercompilationtime
■Compile-timeELvalidation
■High-performancerendering
Inshort,theuseofFaceletsreducesthetimeandeffortthatneedstobespentondevelopment
anddeployment.
FaceletsviewsareusuallycreatedasXHTMLpages.JavaServerFacesimplementationssupport
XHTMLpagescreatedinconformancewiththeXHTMLTransitionalDocumentTypeDefinition(DTD),aslistedat
http://www.w3.org/TR/xhtml1/
#a_dtd_XHTML-1.0-Transitional .Byconvention,webpagesbuiltwithXHTMLhavean
.xhtmlextension.
JavaServerFacestechnologysupportsvarioustaglibrariestoaddcomponentstoawebpage.To
supporttheJavaServerFacestaglibrarymechanism,FaceletsusesXMLnamespacedeclarations.
Table5–1 liststhetaglibrariessupportedbyFacelets.
TABLE5–1 TagLibrariesSupportedbyFacelets
TagLibrary URI Prefix Example Contents
JavaServer
FacesFaceletsTagLibraryhttp://java.sun.com/jsf/facelets ui: ui:component
ui:insertTagsfor
templating
JavaServer
FacesHTMLTagLibraryhttp://java.sun.com/jsf/html h: h:head
h:bodyh:outputTexth:inputTextJavaServer
FacescomponenttagsforallUIComponentobjects
JavaServer
FacesCoreTagLibraryhttp://java.sun.com/jsf/core f: f:actionListener
f:attributeTagsfor
JavaServerFacescustomactionsthatareindependentofanyparticularrenderkit
JSTLCoreTag
Libraryhttp://java.sun.com/jsp/jstl/core c: c:forEach
c:catchJSTL1.2
CoreTags
JSTL
FunctionsTagLibraryhttp://java.sun.com/jsp/jstl/
functionsfn: fn:toUpperCase
fn:toLowerCaseJSTL1.2
FunctionsTagsWhatIsFacelets?
TheJavaEE6Tutorial • January2013 112
Inaddition,Faceletssupportstagsforcompositecomponents,forwhichyoucandeclare
customprefixes.Formoreinformationoncompositecomponents,see “Composite
Components”onpage121 .
BasedontheJavaServerFacessupportforExpressionLanguage(EL)syntax,FaceletsusesEL
expressionstoreferencepropertiesandmethodsofmanagedbeans.ELexpressionscanbeusedtobindcomponentobjectsorvaluestomethodsorpropertiesofmanagedbeans.FormoreinformationonusingELexpressions,see
“UsingtheELtoReferenceManagedBeans”on
page191.
DevelopingaSimpleFaceletsApplication
ThissectiondescribesthegeneralstepsinvolvedindevelopingaJavaServerFacesapplication.Thefollowingtasksareusuallyrequired:
■Developingthemanagedbeans
■Creatingthepagesusingthecomponenttags
■Definingpagenavigation
■Mappingthe javax.faces.webapp.FacesServlet instance
■Addingmanagedbeandeclarations
CreatingaFaceletsApplication
Theexampleusedinthistutorialisthe guessnumber application.Theapplicationpresentsyou
withapagethatasksyoutoguessanumberbetween0and10,validatesyourinputagainstarandomnumber,andrespondswithanotherpagethatinformsyouwhetheryouguessedthenumbercorrectlyorincorrectly.
DevelopingaManagedBean
InatypicalJavaServerFacesapplication,eachpageoftheapplicationconnectstoamanagedbean.Themanagedbeandefinesthemethodsandpropertiesthatareassociatedwiththecomponents.Inthisexample,bothpagesusethesamemanagedbean.
Thefollowingmanagedbeanclass, UserNumberBean.java ,generatesarandomnumberfrom0
to10:
package guessNumber;
import java.io.Serializable;
import java.util.Random;import javax.faces.bean.ManagedBean;import javax.faces.bean.SessionScoped;
@ManagedBeanDevelopingaSimpleFaceletsApplication
Chapter5 • IntroductiontoFacelets 113
@SessionScoped
public class UserNumberBean implements Serializable {
private static final long serialVersionUID = 5443351151396868724L;
Integer randomInt = null;Integer userNumber = null;String response = null;private long maximum=10;private long minimum=0;
public UserNumberBean() {
Random randomGR = new Random();randomInt = new Integer(randomGR.nextInt(10));System.out.println( "Duke’s number: "+ randomInt);
}
public void setUserNumber(Integer user_number) {
userNumber = user_number;
}
public Integer getUserNumber() {
return userNumber;
}
public String getResponse() {
if ((userNumber != null) && (userNumber.compareTo(randomInt) == 0)) {
return "Yay! You got it! ";
} else {
return "Sorry, "+ userNumber + "is incorrect. ";
}
}
public long getMaximum() {
return (this.maximum);
}
public void setMaximum(long maximum) {
this.maximum = maximum;
}
public long getMinimum() {
return (this.minimum);
}
public void setMinimum(long minimum) {
this.minimum = minimum;
}
}
Notetheuseofthe @ManagedBean annotation,whichregistersthemanagedbeanasaresource
withtheJavaServerFacesimplementation.The @SessionScoped annotationregistersthebean
scopeas session.
CreatingFaceletsViews
Tocreateapageorview,youaddcomponentstothepages,wirethecomponentstomanaged
beanvaluesandproperties,andregisterconverters,validators,orlistenersonthecomponents.DevelopingaSimpleFaceletsApplication
TheJavaEE6Tutorial • January2013 114
Fortheexampleapplication,XHTMLwebpagesserveasthefrontend.Thefirstpageofthe
exampleapplicationisapagecalled greeting.xhtml .Acloserlookatvarioussectionsofthis
webpageprovidesmoreinformation.
Thefirstsectionofthewebpagedeclaresthecontenttypeforthepage,whichisXHTML:
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN "
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd ">
ThenextsectionspecifiesthelanguageoftheXHTMLpage,thendeclarestheXMLnamespace
forthetaglibrariesthatareusedinthewebpage:
<html lang= "en"
xmlns= "http://www.w3.org/1999/xhtml "
xmlns:h= "http://java.sun.com/jsf/html "
xmlns:f= "http://java.sun.com/jsf/core ">
Thenextsectionusesvarioustagstoinsertcomponentsintothewebpage:
<h:head>
<h:outputStylesheet library= "css"name= "default.css "/>
<title>Guess Number Facelets Application</title>
</h:head><h:body>
<h:form>
<h:graphicImage library= "images "name= "wave.med.gif "
alt="Duke waving his hand "/>
<h2>
Hi, my name is Duke. I am thinking of a number from#{userNumberBean.minimum} to #{userNumberBean.maximum}.Can you guess it?
</h2>
<p><h:inputText
id="userNo "
title= "Type a number from 0 to 10: "
value= "#{userNumberBean.userNumber} ">
<f:validateLongRange
minimum= "#{userNumberBean.minimum} "
maximum= "#{userNumberBean.maximum} "/>
</h:inputText>
<h:commandButton id= "submit "value= "Submit "
action= "response "/>
</p><h:message showSummary= "true"showDetail= "false "
style= "color: #d20005;
font-family: ’New Century Schoolbook’, serif;font-style: oblique;text-decoration: overline "
id="errors1 "
for="userNo "/>
</h:form>
</h:body>DevelopingaSimpleFaceletsApplication
Chapter5 • IntroductiontoFacelets 115
Notetheuseofthefollowingtags:
■FaceletsHTMLtags(thosebeginningwith h:)toaddcomponents
■TheFaceletscoretag f:validateLongRange tovalidatetheuserinput
Anh:inputText tagacceptsuserinputandsetsthevalueofthemanagedbeanproperty
userNumber throughtheELexpression #{userNumberBean.userNumber} .Theinputvalueis
validatedforvaluerangebytheJavaServerFacesstandardvalidatortag f:validateLongRange .
Theimagefile, wave.med.gif ,isaddedtothepageasaresource;soisthestylesheet.Formore
detailsabouttheresourcesfacility,see “WebResources”onpage123 .
Anh:commandButton tagwiththeID submitstartsvalidationoftheinputdatawhenauser
clicksthebutton.Usingimplicitnavigation,thetagredirectstheclienttoanotherpage,response.xhtml ,whichshowstheresponsetoyourinput.Thepagespecifiesonly response ,
whichbydefaultcausestheservertolookfor response.xhtml .
Youcannowcreatethesecondpage, response.xhtml ,withthefollowingcontent:
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN "
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd ">
<html lang= "en"
xmlns= "http://www.w3.org/1999/xhtml "
xmlns:h= "http://java.sun.com/jsf/html ">
<h:head>
<h:outputStylesheet library= "css"name= "default.css "/>
<title>Guess Number Facelets Application</title>
</h:head><h:body>
<h:form>
<h:graphicImage library= "images "name= "wave.med.gif "
alt="Duke waving his hand "/>
<h2>
<h:outputText id= "result "value= "#{userNumberBean.response} "/>
</h2><h:commandButton id= "back"value= "Back"action= "greeting "/>
</h:form>
</h:body>
</html>
ConfiguringtheApplication
ConfiguringaJavaServerFacesapplicationinvolvesmappingtheFacesServletintheweb
deploymentdescriptorfile,suchasa web.xmlfile,andpossiblyaddingmanagedbean
declarations,navigationrules,andresourcebundledeclarationstotheapplicationconfigurationresourcefile, faces-config.xml .DevelopingaSimpleFaceletsApplication
TheJavaEE6Tutorial • January2013 116
IfyouareusingNetBeansIDE,awebdeploymentdescriptorfileisautomaticallycreatedfor
you.InsuchanIDE-created web.xmlfile,changethedefaultgreetingpage,whichis
index.xhtml ,togreeting.xhtml .Hereisanexample web.xmlfile,showingthischangein
bold.
<?xml version= "1.0"encoding= "UTF-8 "?>
<web-app version= "3.0"xmlns= "http://java.sun.com/xml/ns/javaee "
xmlns:xsi= "http://www.w3.org/2001/XMLSchema-instance "
xsi:schemaLocation= "http://java.sun.com/xml/ns/javaee
http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd ">
<context-param>
<param-name>javax.faces.PROJECT_STAGE</param-name><param-value>Development</param-value>
</context-param><servlet>
<servlet-name>Faces Servlet</servlet-name><servlet-class>javax.faces.webapp.FacesServlet</servlet-class><load-on-startup>1</load-on-startup>
</servlet><servlet-mapping>
<servlet-name>Faces Servlet</servlet-name><url-pattern>/faces/*</url-pattern>
</servlet-mapping><session-config>
<session-timeout>
30
</session-timeout>
</session-config><welcome-file-list>
<welcome-file>faces/greeting.xhtml</welcome-file>
</welcome-file-list>
</web-app>
Notetheuseofthecontextparameter PROJECT_STAGE .Thisparameteridentifiesthestatusofa
JavaServerFacesapplicationinthesoftwarelifecycle.
Thestageofanapplicationcanaffectthebehavioroftheapplication.Forexample,iftheproject
stageisdefinedas Development ,debugginginformationisautomaticallygeneratedfortheuser.
Ifnotdefinedbytheuser,thedefaultprojectstageis Production .
RunningtheguessnumberFaceletsExample
YoucanuseeitherNetBeansIDEorAnttobuild,package,deploy,andrunthe guessnumber
example.Thesourcecodeforthisexampleisavailableinthetut-install /examples/web/guessnumber/ directory.DevelopingaSimpleFaceletsApplication
Chapter5 • IntroductiontoFacelets 117
▼ToBuild,Package,andDeploytheguessnumberExampleUsing
NetBeansIDE
FromtheFilemenu,chooseOpenProject.
IntheOpenProjectdialog,navigateto:
tut-install /examples/web/
Selectthe guessnumber folder.
SelecttheOpenasMainProjectcheckbox.ClickOpenProject.IntheProjectstab,right-clickthe guessnumber projectandselectDeploy.
ThisoptionbuildsanddeploystheexampleapplicationtoyourGlassFishServerinstance.
▼ToBuild,Package,andDeploytheguessnumberExampleUsingAnt
Inaterminalwindow,goto:
tut-install /examples/web/guessnumber/
Typethefollowingcommand:
ant
Thiscommandcallsthe defaulttarget,whichbuildsandpackagestheapplicationintoaWAR
file,guessnumber.war ,thatislocatedinthe distdirectory.
MakesurethattheGlassFishServerisstarted.Todeploytheapplication,typethefollowingcommand:
ant deploy
▼ToRuntheguessnumberExample
Openawebbrowser.TypethefollowingURLinyourwebbrowser:
http://localhost:8080/guessnumber
Awebpageopens.1
2
3
456
1
2
3
4
1
2DevelopingaSimpleFaceletsApplication
TheJavaEE6Tutorial • January2013 118
Inthetextfield,typeanumberfrom0to10andclickSubmit.
Anotherpageappears,reportingwhetheryourguessiscorrectorincorrect.
Ifyouguessedincorrectly,clicktheBackbuttontoreturntothemainpage.
Youcancontinuetoguessuntilyougetthecorrectanswer.
UsingFaceletsTemplates
JavaServerFacestechnologyprovidesthetoolstoimplementuserinterfacesthatareeasyto
extendandreuse.TemplatingisausefulFaceletsfeaturethatallowsyoutocreateapagethatwillactasthebase,or template,fortheotherpagesinanapplication.Byusingtemplates,you
canreusecodeandavoidrecreatingsimilarlyconstructedpages.Templatingalsohelpsinmaintainingastandardlookandfeelinanapplicationwithalargenumberofpages.
Table5–2 listsFaceletstagsthatareusedfortemplatingandtheirrespectivefunctionality.
TABLE5–2 FaceletsTemplatingTags
Tag Function
ui:component Definesacomponentthatiscreatedandaddedtothecomponenttree.
ui:composition Definesapagecompositionthatoptionallyusesatemplate.Contentoutsideofthis
tagisignored.
ui:debug Definesadebugcomponentthatiscreatedandaddedtothecomponenttree.
ui:decorate Similartothecompositiontagbutdoesnotdisregardcontentoutsidethistag.
ui:define Definescontentthatisinsertedintoapagebyatemplate.
ui:fragment Similartothecomponenttagbutdoesnotdisregardcontentoutsidethistag.
ui:include Encapsulateandreusecontentformultiplepages.
ui:insert Insertscontentintoatemplate.
ui:param Usedtopassparameterstoanincludedfile.
ui:repeat Usedasanalternativeforlooptags,suchas c:forEach orh:dataTable.
ui:remove Removescontentfromapage.
FormoreinformationonFaceletstemplatingtags,seethedocumentationat
http://docs.oracle.com/javaee/6/javaserverfaces/2.1/docs/vdldocs/facelets/ .
TheFaceletstaglibraryincludesthemaintemplatingtag ui:insert .Atemplatepagethatis
createdwiththistagallowsyoutodefineadefaultstructureforapage.Atemplatepageisused
asatemplateforotherpages,usuallyreferredtoasclientpages.3
4UsingFaceletsTemplates
Chapter5 • IntroductiontoFacelets 119
Hereisanexampleofatemplatesavedas template.xhtml :
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN "
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd ">
<html xmlns= "http://www.w3.org/1999/xhtml "
xmlns:ui= "http://java.sun.com/jsf/facelets "
xmlns:h= "http://java.sun.com/jsf/html ">
<h:head>
<meta http-equiv= "Content-Type "
content= "text/html; charset=UTF-8 "/>
<h:outputStylesheet library= "css"name= "default.css "/>
<h:outputStylesheet library= "css"name= "cssLayout.css "/>
<title>Facelets Template</title>
</h:head>
<h:body>
<div id= "top"class= "top">
<ui:insert name= "top">Top Section</ui:insert>
</div><div><div id= "left">
<ui:insert name= "left">Left Section</ui:insert>
</div><div id= "content "class= "left_content ">
<ui:insert name= "content ">Main Content</ui:insert>
</div></div>
</h:body>
</html>
TheexamplepagedefinesanXHTMLpagethatisdividedintothreesections:atopsection,a
leftsection,andamainsection.Thesectionshavestylesheetsassociatedwiththem.Thesamestructurecanbereusedfortheotherpagesoftheapplication.
Theclientpageinvokesthetemplatebyusingthe ui:composition tag.Inthefollowing
example,aclientpagenamed templateclient.xhtml invokesthetemplatepagenamed
template.xhtml fromtheprecedingexample.Aclientpageallowscontenttobeinsertedwith
thehelpofthe ui:define tag.
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN "
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd ">
<html xmlns= "http://www.w3.org/1999/xhtml "
xmlns:ui= "http://java.sun.com/jsf/facelets "
xmlns:h= "http://java.sun.com/jsf/html ">
<h:body>
<ui:composition template= "./template.xhtml ">
<ui:define name= "top">
Welcome to Template Client Page
</ui:define>
<ui:define name= "left">
<h:outputLabel value= "You are in the Left Section "/>
</ui:define>UsingFaceletsTemplates
TheJavaEE6Tutorial • January2013 120
<ui:define name= "content ">
<h:graphicImage value= "#{resource[’images:wave.med.gif’]} "/>
<h:outputText value= "You are in the Main Content Section "/>
</ui:define>
</ui:composition>
</h:body>
</html>
YoucanuseNetBeansIDEtocreateFaceletstemplateandclientpages.Formoreinformation
oncreatingthesepages,see http://netbeans.org/kb/docs/web/jsf20-intro.html .
CompositeComponents
JavaServerFacestechnologyofferstheconceptofcompositecomponentswithFacelets.Acompositecomponent isaspecialtypeoftemplatethatactsasacomponent.
Anycomponentisessentiallyapieceofreusablecodethatbehavesinaparticularway.For
example,aninputcomponentacceptsuserinput.Acomponentcanalsohavevalidators,converters,andlistenersattachedtoittoperformcertaindefinedactions.
Acompositecomponentconsistsofacollectionofmarkuptagsandotherexistingcomponents.
Thisreusable,user-createdcomponenthasacustomized,definedfunctionalityandcanhavevalidators,converters,andlistenersattachedtoitlikeanyothercomponent.
WithFacelets,anyXHTMLpagethatcontainsmarkuptagsandothercomponentscanbe
convertedintoacompositecomponent.Usingtheresourcesfacility,thecompositecomponentcanbestoredinalibrarythatisavailabletotheapplicationfromthedefinedresourceslocation.
Table5–3 liststhemostcommonlyusedcompositetagsandtheirfunctions.
TABLE5–3 CompositeComponentTags
Tag Function
composite:interface Declarestheusagecontractforacompositecomponent.The
compositecomponentcanbeusedasasinglecomponentwhosefeaturesetistheunionofthefeaturesdeclaredintheusagecontract.
composite:implementation Definestheimplementationofthecompositecomponent.Ifa
composite:interface elementappears,theremustbea
corresponding composite:implementation .
composite:attribute Declaresanattributethatmaybegiventoaninstanceofthe
compositecomponentinwhichthistagisdeclared.
composite:insertChildren Anychildcomponentsortemplatetextwithinthecomposite
componenttagintheusingpagewillbereparentedintothecompositecomponentatthepointindicatedbythistag’splacementwithinthe composite:implementation section.CompositeComponents
Chapter5 • IntroductiontoFacelets 121
TABLE5–3 CompositeComponentTags (Continued)
Tag Function
composite:valueHolder Declaresthatthecompositecomponentwhosecontractisdeclared
bythe composite:interface inwhichthiselementisnestedexposes
animplementationof javax.faces.component.ValueHolder
suitableforuseasthetargetofattachedobjectsintheusingpage.
composite:editableValueHolder Declaresthatthecompositecomponentwhosecontractisdeclared
bythe composite:interface inwhichthiselementisnestedexposes
animplementationofjavax.faces.component.EditableValueHolder suitableforuseas
thetargetofattachedobjectsintheusingpage.
composite:actionSource Declaresthatthecompositecomponentwhosecontractisdeclared
bythe composite:interface inwhichthiselementisnestedexposes
animplementationof javax.faces.component.ActionSource2
suitableforuseasthetargetofattachedobjectsintheusingpage.
FormoreinformationandacompletelistofFaceletscompositetags,seethedocumentationat
http://docs.oracle.com/javaee/6/javaserverfaces/2.1/docs/vdldocs/facelets/ .
Thefollowingexampleshowsacompositecomponentthatacceptsanemailaddressasinput:
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN "
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd ">
<html xmlns= "http://www.w3.org/1999/xhtml "
xmlns:composite= "http://java.sun.com/jsf/composite "
xmlns:h= "http://java.sun.com/jsf/html ">
<h:head>
<title>This content will not be displayed</title>
</h:head><h:body>
<composite:interface>
<composite:attribute name= "value "required= "false "/>
</composite:interface>
<composite:implementation>
<h:outputLabel value= "Email id: "></h:outputLabel>
<h:inputText value= "#{cc.attrs.value} "></h:inputText>
</composite:implementation>
</h:body>
</html>
Notetheuseof cc.attrs.value whendefiningthevalueofthe inputText component.The
word ccinJavaServerFacesisareservedwordforcompositecomponents.The
#{cc.attrs. attribute-name }expressionisusedtoaccesstheattributesdefinedforthe
compositecomponent’sinterface,whichinthiscasehappenstobe value.
Theprecedingexamplecontentisstoredasafilenamed email.xhtml inafoldernamed
resources/emcomp ,undertheapplicationwebrootdirectory.ThisdirectoryisconsideredaCompositeComponents
TheJavaEE6Tutorial • January2013 122
librarybyJavaServerFaces,andacomponentcanbeaccessedfromsuchalibrary.Formore
informationonresources,see “WebResources”onpage123 .
Thewebpagethatusesthiscompositecomponentisgenerallycalleda usingpage .Theusing
pageincludesareferencetothecompositecomponent,inthe xmlnamespacedeclarations:
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN "
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd ">
<html xmlns= "http://www.w3.org/1999/xhtml "
xmlns:h= "http://java.sun.com/jsf/html "
xmlns:em= "http://java.sun.com/jsf/composite/emcomp/ ">
<h:head>
<title>Using a sample composite component</title>
</h:head>
<body>
<h:form>
<em:email value= "Enter your email id "/>
</h:form>
</body>
</html>
Thelocalcompositecomponentlibraryisdefinedinthe xmlnsnamespacewiththedeclaration
xmlns:em= "http://java.sun.com/jsf/composite/emcomp/ ".Thecomponentitselfis
accessedthroughthe em:email tag.Theprecedingexamplecontentcanbestoredasawebpage
named emuserpage.xhtml underthewebrootdirectory.Whencompiledanddeployedona
server,itcanbeaccessedwiththefollowingURL:
http://localhost:8080/ application-name /faces/emuserpage.xhtml
WebResources
Webresourcesareanysoftwareartifactsthatthewebapplicationrequiresforproperrendering,
includingimages,scriptfiles,andanyuser-createdcomponentlibraries.Resourcesmustbecollectedinastandardlocation,whichcanbeoneofthefollowing.
■Aresourcepackagedinthewebapplicationrootmustbeinasubdirectoryofa resources
directoryatthewebapplicationroot: resources/ resource-identifier .
■Aresourcepackagedinthewebapplication’sclasspathmustbeinasubdirectoryofthe
META-INF/resources directorywithinawebapplication:
META-INF/resources/ resource-identifier .Youcanusethisfilestructuretopackage
resourcesinaJARfilebundledinthewebapplication.See Chapter53,“Duke’sForestCase
StudyExample,” foranapplicationthatusesthismechanism.
TheJavaServerFacesruntimewilllookfortheresourcesintheprecedinglistedlocations,in
thatorder.
Resourceidentifiersareuniquestringsthatconformtothefollowingformat:WebResources
Chapter5 • IntroductiontoFacelets 123
[locale-prefix /][library-name /][library-version /]resource-name [/resource-version ]
Elementsoftheresourceidentifierinbrackets( [])areoptional,indicatingthatonlya
resource-name ,whichisusuallyafilename,isarequiredelement.Forexample,themost
commonwaytospecifyastylesheet,image,orscriptistousethe libraryandnameattributes,
asinthefollowingtagfromthe guessnumber example:
<h:outputStylesheet library= "css"name= "default.css "/>
Thistagspecifiesthatthe default.css stylesheetisinthedirectory web/resources/css .
Youcanalsospecifythelocationofanimageusingthefollowingsyntax,alsofromthe
guessnumber example:
<h:graphicImage value= "#{resource[’images:wave.med.gif’]} "/>
Thistagspecifiesthattheimagenamed wave.med.gif isinthedirectory
web/resources/images .
Resourcescanbeconsideredasalibrarylocation.Anyartifact,suchasacompositecomponent
oratemplatethatisstoredinthe resources directory,becomesaccessibletotheother
applicationcomponents,whichcanuseittocreatearesourceinstance.WebResources
TheJavaEE6Tutorial • January2013 124
ExpressionLanguage
Thischapterintroducesthe ExpressionLanguage (alsoreferredtoastheEL),whichprovidesan
importantmechanismforenablingthepresentationlayer(webpages)tocommunicatewiththeapplicationlogic(managedbeans).TheELisusedbybothJavaServerFacestechnologyand
JavaServerPages(JSP)technology.TheELrepresentsaunionoftheexpressionlanguagesofferedbyJavaServerFacestechnologyandJSPtechnology.
Thefollowingtopicsareaddressedhere:
■“OverviewoftheEL”onpage125
■“ImmediateandDeferredEvaluationSyntax”onpage126
■“ValueandMethodExpressions”onpage128
■“DefiningaTagAttributeType”onpage134
■“LiteralExpressions”onpage135
■“Operators”onpage136
■“ReservedWords”onpage136
■“ExamplesofELExpressions”onpage137
OverviewoftheEL
TheELallowspageauthorstousesimpleexpressionstodynamicallyaccessdatafrom
JavaBeanscomponents.Forexample,the testattributeofthefollowingconditionaltagis
suppliedwithanELexpressionthatcompares0withthenumberofitemsinthesession-scopedbeannamed cart.
<c:if test= "${sessionScope.cart.numberOfItems > 0} ">
...
</c:if>
JavaServerFacestechnologyusestheELforthefollowingfunctions:
■Deferredandimmediateevaluationofexpressions
■Theabilitytosetaswellasgetdata6CHAPTER 6
125
■Theabilitytoinvokemethods
See“UsingtheELtoReferenceManagedBeans”onpage191 formoreinformationonhowto
usetheELinJavaServerFacesapplications.
Tosummarize,theELprovidesawaytousesimpleexpressionstoperformthefollowingtasks:
■DynamicallyreadapplicationdatastoredinJavaBeanscomponents,variousdatastructures,
andimplicitobjects
■Dynamicallywritedata,suchasuserinputintoforms,toJavaBeanscomponents
■Invokearbitrarystaticandpublicmethods
■Dynamicallyperformarithmeticoperations
TheELisalsousedtospecifythefollowingkindsofexpressionsthatacustomtagattributewill
accept:
■Immediateevaluationexpressions ordeferredevaluationexpressions .Animmediate
evaluationexpressionisevaluatedatoncebytheunderlyingtechnology,suchasJavaServerFaces.AdeferredevaluationexpressioncanbeevaluatedlaterbytheunderlyingtechnologyusingtheEL.
■Valueexpression ormethodexpression .Avalueexpression referencesdata,whereasa
methodexpression invokesamethod.
■Rvalueexpression orlvalueexpression .Anrvalueexpression canonlyreadavalue,
whereasan lvalueexpression canbothreadandwritethatvaluetoanexternalobject.
Finally,theELprovidesapluggableAPIforresolvingexpressionssocustomresolversthatcan
handleexpressionsnotalreadysupportedbytheELcanbeimplemented.
ImmediateandDeferredEvaluationSyntax
TheELsupportsbothimmediateanddeferredevaluationofexpressions.Immediateevaluationmeansthattheexpressionisevaluatedandtheresultreturnedassoonasthepageisfirstrendered.Deferredevaluationmeansthatthetechnologyusingtheexpressionlanguagecanuseitsownmachinerytoevaluatetheexpressionsometimelaterduringthepage’slifecycle,wheneveritisappropriatetodoso.
Thoseexpressionsthatareevaluatedimmediatelyusethe ${}syntax.Expressionswhose
evaluationisdeferredusethe #{}syntax.
Becauseofitsmultiphaselifecycle,JavaServerFacestechnologyusesmostlydeferredevaluation
expressions.Duringthelifecycle,componenteventsarehandled,dataisvalidated,andothertasksareperformedinaparticularorder.Therefore,aJavaServerFacesimplementationmustdeferevaluationofexpressionsuntiltheappropriatepointinthelifecycle.
OthertechnologiesusingtheELmighthavedifferentreasonsforusingdeferredexpressions.ImmediateandDeferredEvaluationSyntax
TheJavaEE6Tutorial • January2013 126
ImmediateEvaluation
Allexpressionsusingthe ${}syntaxareevaluatedimmediately.Theseexpressionscanbeused
onlywithintemplatetextorasthevalueofatagattributethatcanacceptruntimeexpressions.
Thefollowingexampleshowsatagwhose valueattributereferencesanimmediateevaluation
expressionthatgetsthetotalpricefromthesession-scopedbeannamed cart:
<fmt:formatNumber value= "${sessionScope.cart.total} "/>
TheJavaServerFacesimplementationevaluatestheexpression ${sessionScope.cart.total} ,
convertsit,andpassesthereturnedvaluetothetaghandler.
Immediateevaluationexpressionsarealwaysread-onlyvalueexpressions.Thepreceding
exampleexpressioncannotsetthetotalprice,butinsteadcanonlygetthetotalpricefromthecartbean.
DeferredEvaluation
Deferredevaluationexpressionstaketheform #{expr}andcanbeevaluatedatotherphasesof
apagelifecycleasdefinedbywhatevertechnologyisusingtheexpression.InthecaseofJavaServerFacestechnology,itscontrollercanevaluatetheexpressionatdifferentphasesofthelifecycle,dependingonhowtheexpressionisbeingusedinthepage.
ThefollowingexampleshowsaJavaServerFaces h:inputText tag,whichrepresentsatextfield
componentintowhichauserentersavalue.The h:inputText tag’s valueattributereferencesa
deferredevaluationexpressionthatpointstothe namepropertyofthe customer bean:
<h:inputText id= "name"value= "#{customer.name} "/>
Foraninitialrequestofthepagecontainingthistag,theJavaServerFacesimplementation
evaluatesthe #{customer.name} expressionduringtherender-responsephaseofthelifecycle.
Duringthisphase,theexpressionmerelyaccessesthevalueof namefromthe customer bean,as
isdoneinimmediateevaluation.
Forapostbackrequest,theJavaServerFacesimplementationevaluatestheexpressionat
differentphasesofthelifecycle,duringwhichthevalueisretrievedfromtherequest,validated,andpropagatedtothe customer bean.
Asshowninthisexample,deferredevaluationexpressionscanbe
■Valueexpressionsthatcanbeusedtobothreadandwritedata
■Methodexpressions
Valueexpressions(bothimmediateanddeferred)andmethodexpressionsareexplainedinthe
nextsection.ImmediateandDeferredEvaluationSyntax
Chapter6 • ExpressionLanguage 127
ValueandMethodExpressions
TheELdefinestwokindsofexpressions:valueexpressionsandmethodexpressions.Value
expressionscaneitheryieldavalueorsetavalue.Methodexpressionsreferencemethodsthatcanbeinvokedandcanreturnavalue.
ValueExpressions
Valueexpressionscanbefurthercategorizedintorvalueandlvalueexpressions.Rvalueexpressionscanreaddatabutcannotwriteit.Lvalueexpressionscanbothreadandwritedata.
Allexpressionsthatareevaluatedimmediatelyusethe ${}delimitersandarealwaysrvalue
expressions.Expressionswhoseevaluationcanbedeferredusethe #{}delimitersandcanactas
bothrvalueandlvalueexpressions.Considerthefollowingtwovalueexpressions:
${customer.name}
#{customer.name}
Theformerusesimmediateevaluationsyntax,whereasthelatterusesdeferredevaluation
syntax.Thefirstexpressionaccessesthe nameproperty,getsitsvalue,addsthevaluetothe
response,andgetsrenderedonthepage.Thesamecanhappenwiththesecondexpression.However,thetaghandlercandefertheevaluationofthisexpressiontoalatertimeinthepagelifecycle,ifthetechnologyusingthistagallows.
InthecaseofJavaServerFacestechnology,thelattertag’sexpressionisevaluatedimmediately
duringaninitialrequestforthepage.Inthiscase,thisexpressionactsasanrvalueexpression.Duringapostbackrequest,thisexpressioncanbeusedtosetthevalueofthe namepropertywith
userinput.Inthiscase,theexpressionactsasanlvalueexpression.
ReferencingObjectsUsingValueExpressions
Bothrvalueandlvalueexpressionscanrefertothefollowingobjectsandtheirpropertiesorattributes:
■JavaBeanscomponents
■Collections
■JavaSEenumeratedtypes
■Implicitobjects
Torefertotheseobjects,youwriteanexpressionusingavariablethatisthenameoftheobject.
Thefollowingexpressionreferencesamanagedbeancalled customer :
${customer}ValueandMethodExpressions
TheJavaEE6Tutorial • January2013 128
Thewebcontainerevaluatesthevariablethatappearsinanexpressionbylookingupitsvalue
accordingtothebehaviorof PageContext.findAttribute(String) ,wherethe String
argumentisthenameofthevariable.Forexample,whenevaluatingtheexpression${customer} ,thecontainerwilllookfor customer inthepage,request,session,andapplication
scopesandwillreturnitsvalue.If customer isnotfound,anullvalueisreturned.
YoucanuseacustomELresolvertoalterthewayvariablesareresolved.Forinstance,youcan
provideanELresolverthatinterceptsobjectswiththename customer ,sothat ${customer}
returnsavalueintheELresolverinstead.
Toreferencean enumconstantwithanexpression,usea Stringliteral.Forexample,consider
thisEnumclass:
public enum Suit {hearts, spades, diamonds, clubs}
Torefertothe Suitconstant Suit.hearts withanexpression,usethe Stringliteral "hearts ".
Dependingonthecontext,the Stringliteralisconvertedtothe enumconstantautomatically.
Forexample,inthefollowingexpressioninwhich mySuitisaninstanceof Suit,"hearts "is
firstconvertedto Suit.hearts beforeitiscomparedtotheinstance:
${mySuit == "hearts "}
ReferringtoObjectPropertiesUsingValueExpressions
Torefertopropertiesofabeanoran enuminstance,itemsofacollection,orattributesofan
implicitobject,youusethe .or[]notation.
Toreferencethe namepropertyofthe customer bean,useeithertheexpression
${customer.name} ortheexpression ${customer[ "name"]}.Thepartinsidethebracketsisa
Stringliteralthatisthenameofthepropertytoreference.
Youcanusedoubleorsinglequotesforthe Stringliteral.Youcanalsocombinethe []and.
notations,asshownhere:
${customer.address[ "street "]}
Propertiesofan enumconstantcanalsobereferencedinthisway.However,aswithJavaBeans
componentproperties,thepropertiesofan EnumclassmustfollowJavaBeanscomponent
conventions.ThismeansthatapropertymustatleasthaveanaccessormethodcalledgetProperty,wherePropertyisthenameofthepropertythatcanbereferencedbyan
expression.
Forexample,consideran Enumclassthatencapsulatesthenamesoftheplanetsofourgalaxyand
includesamethodtogetthemassofaplanet.Youcanusethefollowingexpressiontoreferencethemethod getMassofthe Enumclass Planet:
${myPlanet.mass}ValueandMethodExpressions
Chapter6 • ExpressionLanguage 129
Ifyouareaccessinganiteminanarrayorlist,youmustuseeitheraliteralvaluethatcanbe
convertedto intorthe []notationwithan intandwithoutquotes.Thefollowingexamples
couldresolvetothesameiteminalistorarray,assumingthat sockscanbeconvertedto int:
■${customer.orders[1]}
■${customer.orders.socks}
Incontrast,anitemina Mapcanbeaccessedusingastringliteralkey;nocoercionisrequired:
${customer.orders[ "socks "]}
Anrvalueexpressionalsorefersdirectlytovaluesthatarenotobjects,suchastheresultof
arithmeticoperationsandliteralvalues,asshownbytheseexamples:
■${"literal "}
■${customer.age + 20}
■${true}
■${57}
TheELdefinesthefollowingliterals:
■Boolean: trueandfalse
■Integer:asinJava
■Floating-point:asinJava
■String:withsingleanddoublequotes; "isescapedas \",’isescapedas \’,and \isescapedas
\\
■Null: null
Youcanalsowriteexpressionsthatperformoperationsonan enumconstant.Forexample,
considerthefollowing Enumclass:
public enum Suit {club, diamond, heart, spade}
Afterdeclaringan enumconstantcalled mySuit,youcanwritethefollowingexpressiontotest
whether mySuitisspade:
${mySuit == "spade "}
Whenitresolvesthisexpression,theELresolvingmechanismwillinvokethe valueOfmethod
ofthe Enumclasswiththe Suitclassandthe spadetype,asshownhere:
mySuit.valueOf(Suit.class, "spade "}ValueandMethodExpressions
TheJavaEE6Tutorial • January2013 130
WhereValueExpressionsCanBeUsed
Valueexpressionsusingthe ${}delimiterscanbeusedin
■Statictext
■Anystandardorcustomtagattributethatcanacceptanexpression
Thevalueofanexpressioninstatictextiscomputedandinsertedintothecurrentoutput.Here
isanexampleofanexpressionembeddedinstatictext:
<some:tag>
some text ${expr} some text
</some:tag>
Ifthestatictextappearsinatagbody,notethatanexpression willnotbeevaluatedifthebodyis
declaredtobe tagdependent .
Lvalueexpressionscanbeusedonlyintagattributesthatcanacceptlvalueexpressions.Atagattributevalueusingeitheranrvalueorlvalueexpressioncanbesetinthefollowingways:
■Withasingleexpressionconstruct:
<some:tag value= "${expr} "/>
<another:tag value= "#{expr} "/>
Theseexpressionsareevaluated,andtheresultisconvertedtotheattribute’sexpectedtype.
■Withoneormoreexpressionsseparatedorsurroundedbytext:
<some:tag value= "some${expr}${expr}text${expr} "/>
<another:tag value= "some#{expr}#{expr}text#{expr} "/>
Thesekindsofexpression,called compositeexpressions ,areevaluatedfromlefttoright.Each
expressionembeddedinthecompositeexpressionisconvertedtoa Stringandthen
concatenatedwithanyinterveningtext.Theresulting Stringisthenconvertedtothe
attribute’sexpectedtype.
■Withtextonly:
<some:tag value= "sometext "/>
Thisexpressioniscalleda literalexpression .Inthiscase,theattribute’s Stringvalueis
convertedtotheattribute’sexpectedtype.Literalvalueexpressionshavespecialsyntaxrules.See
“LiteralExpressions”onpage135 formoreinformation.Whenatagattributehasan
enumtype,theexpressionthattheattributeusesmustbealiteralexpression.Forexample,
thetagattributecanusetheexpression "hearts "tomean Suit.hearts .Theliteralis
convertedto Suit,andtheattributegetsthevalue Suit.hearts .
Allexpressionsusedtosetattributevaluesareevaluatedinthecontextofanexpectedtype.If
theresultoftheexpressionevaluationdoesnotmatchtheexpectedtypeexactly,atypeconversionwillbeperformed.Forexample,theexpression ${1.2E4} providedasthevalueof
anattributeoftype floatwillresultinthefollowingconversion:ValueandMethodExpressions
Chapter6 • ExpressionLanguage 131
Float.valueOf( "1.2E4 ").floatValue()
SeeSection1.18oftheJavaServerPages2.2ExpressionLanguagespecification(availablefrom
http://jcp.org/aboutJava/communityprocess/final/jsr245/ )forthecompletetype
conversionrules.
MethodExpressions
AnotherfeatureoftheELisitssupportofdeferredmethodexpressions.Amethodexpressionisusedtoinvokeanarbitrarypublicmethodofabean,whichcanreturnaresult.
InJavaServerFacestechnology,acomponenttagrepresentsacomponentonapage.The
componenttagusesmethodexpressionstoinvokemethodsthatperformsomeprocessingforthecomponent.Thesemethodsarenecessaryforhandlingeventsthatthecomponentsgenerateandforvalidatingcomponentdata,asshowninthisexample:
<h:form>
<h:inputText
id="name"
value= "#{customer.name} "
validator= "#{customer.validateName} "/>
<h:commandButton
id="submit "
action= "#{customer.submit} "/>
</h:form>
Theh:inputText tagdisplaysasatextfield.The validator attributeofthis h:inputText tag
referencesamethod,called validateName ,inthebean,called customer .
Becauseamethodcanbeinvokedduringdifferentphasesofthelifecycle,methodexpressions
mustalwaysusethedeferredevaluationsyntax.
Likelvalueexpressions,methodexpressionscanusethe .andthe []operators.Forexample,
#{object.method} isequivalentto #{object[ "method "]}.Theliteralinsidethe []isconverted
toStringandisusedtofindthenameofthemethodthatmatchesit.Oncethemethodisfound,
itisinvoked,orinformationaboutthemethodisreturned.
Methodexpressionscanbeusedonlyintagattributesandonlyinthefollowingways:
■Withasingleexpressionconstruct,where beanreferstoaJavaBeanscomponentand
methodreferstoamethodoftheJavaBeanscomponent:
<some:tag value= "#{bean .method }"/>
Theexpressionisevaluatedtoamethodexpression,whichispassedtothetaghandler.The
methodrepresentedbythemethodexpressioncanthenbeinvokedlater.
■Withtextonly:
<some:tag value= "sometext "/>ValueandMethodExpressions
TheJavaEE6Tutorial • January2013 132
Methodexpressionssupportliteralsprimarilytosupport actionattributesinJavaServer
Facestechnology.Whenthemethodreferencedbythismethodexpressionisinvoked,themethodreturnsthe Stringliteral,whichisthenconvertedtotheexpectedreturntype,as
definedinthetag’staglibrarydescriptor.
ParameterizedMethodCalls
TheELofferssupportforparameterizedmethodcalls.MethodcallscanuseparameterswithouthavingtousestaticELfunctions.
Boththe .and[]operatorscanbeusedforinvokingmethodcallswithparameters,asshownin
thefollowingexpressionsyntax:
■expr-a [expr-b ](parameters )
■expr-a .identifier-b (parameters )
Inthefirstexpressionsyntax, expr-aisevaluatedtorepresentabeanobject.Theexpression
expr-bisevaluatedandcasttoastringthatrepresentsamethodinthebeanrepresentedby
expr-a.Inthesecondexpressionsyntax, expr-aisevaluatedtorepresentabeanobject,and
identifier-b isastringthatrepresentsamethodinthebeanobject.The parameters in
parenthesesaretheargumentsforthemethodinvocation.Parameterscanbezeroormorevaluesorexpressions,separatedbycommas.
Parametersaresupportedforbothvalueexpressionsandmethodexpressions.Inthefollowing
example,whichisamodifiedtagfromthe guessnumber application,arandomnumberis
providedasanargumentratherthanfromuserinputtothemethodcall:
<h:inputText value= "#{userNumberBean.userNumber(’5’)} ">
Theprecedingexampleusesavalueexpression.
ConsiderthefollowingexampleofaJavaServerFacescomponenttagthatusesamethod
expression:
<h:commandButton action= "#{trader.buy} "value= "buy"/>
TheELexpression trader.buy callsthe traderbean’s buymethod.Youcanmodifythetagto
passonaparameter.Hereistherevisedtagwhereaparameterispassed:
<h:commandButton action= "#{trader.buy(’SOMESTOCK’)} "value= "buy"/>
Intheprecedingexample,youarepassingthestring ’SOMESTOCK’ (astocksymbol)asa
parametertothe buymethod.
FormoreinformationontheupdatedEL,see http://uel.java.net/ .ValueandMethodExpressions
Chapter6 • ExpressionLanguage 133
DefiningaTagAttributeType
Asexplainedintheprevioussection,allkindsofexpressionscanbeusedintagattributes.
Whichkindofexpressionandhowitisevaluated,whetherimmediatelyordeferred,aredeterminedbythe typeattributeofthetag’sdefinitionintheViewDescriptionLanguage
(VDL)thatdefinesthetag.
Ifyouplantocreatecustomtags,foreachtagintheVDL,youneedtospecifywhatkindof
expressiontoaccept.
Table6–1 showsthekindsoftagattributesthatacceptELexpressions,
givesexamplesofexpressionstheyaccept,andprovidesthetypedefinitionsoftheattributesthatmustbeaddedtotheVDL.Youcannotuse #{}syntaxforadynamicattribute,meaningan
attributethatacceptsdynamicallycalculatedvaluesatruntime.Similarly,youalsocannotusethe${}syntaxforadeferredattribute.
TABLE6–1 DefinitionsofTagAttributesThatAcceptELExpressions
AttributeType ExampleExpression TypeAttributeDefinition
Dynamic "literal " <rtexprvalue>true</rtexprvalue>
Dynamic ${literal} <rtexprvalue>true</rtexprvalue>
Deferredvalue "literal " <deferred-value>
<type>java.lang.String</type>
</deferred-value>
Deferredvalue #{customer.age} <deferred-value>
<type>int</type>
</deferred-value>
Deferredmethod "literal " <deferred-method>
<method-signature>
java.lang.String submit()
</method-signature>
<deferred-method>
Deferredmethod #{customer.calcTotal} <deferred-method>
<method-signature>
double calcTotal(int, double)
</method-signature>
</deferred-method>
Inadditiontothetagattributetypesshownin Table6–1 ,youcandefineanattributetoaccept
bothdynamicanddeferredexpressions.Inthiscase,thetagattributedefinitioncontainsbothanrtexprvalue definitionsetto trueandeithera deferred-value ordeferred-method
definition.DefiningaTagAttributeType
TheJavaEE6Tutorial • January2013 134
LiteralExpressions
Aliteralexpressionisevaluatedtothetextoftheexpression,whichisoftype String.Aliteral
expressiondoesnotusethe ${}or#{}delimiters.
Ifyouhavealiteralexpressionthatincludesthereserved ${}or#{}syntax,youneedtoescape
thesecharactersasfollows:
■Bycreatingacompositeexpressionasshownhere:
${’${’}exprA}
#{’#{’}exprB}
Theresultingvalueswouldthenbethestrings ${exprA} and#{exprB} .
■Byusingtheescapecharacters \$and\#toescapewhatwouldotherwisebetreatedasan
eval-expression:
\${exprA}
\#{exprB}
Theresultingvalueswouldagainbethestrings ${exprA} and#{exprB} .
Whenaliteralexpressionisevaluated,itcanbeconvertedtoanothertype. Table6–2 shows
examplesofvariousliteralexpressionsandtheirexpectedtypesandresultingvalues.
TABLE6–2 LiteralExpressions
Expression ExpectedType Result
Hi String Hi
true Boolean Boolean.TRUE42 int 42
Literalexpressionscanbeevaluatedimmediatelyordeferredandcanbeeithervalueormethod
expressions.Atwhatpointaliteralexpressionisevaluateddependsonwhereitisbeingused.Ifthetagattributethatusestheliteralexpressionisdefinedtoacceptadeferredvalueexpression,whenreferencingavalue,theliteralexpressionisevaluatedatapointinthelifecyclethatisdeterminedbyotherfactors,suchaswheretheexpressionisbeingusedandtowhatitisreferring.
Inthecaseofamethodexpression,themethodthatisreferencedisinvokedandreturnsthe
specified Stringliteral.Forexample,the h:commandButton tagofthe guessnumber application
usesaliteralmethodexpressionasalogicaloutcometotelltheJavaServerFacesnavigationsystemwhichpagetodisplaynext.LiteralExpressions
Chapter6 • ExpressionLanguage 135
Operators
Inadditiontothe .and[]operatorsdiscussedin “ValueandMethodExpressions”on
page128,theELprovidesthefollowingoperators,whichcanbeusedinrvalueexpressionsonly:
■Arithmetic :+,-(binary), *,/anddiv,%andmod,-(unary)
■Logical:and,&&,or,||,not,!
■Relational :==,eq,!=,ne,<,lt,>,gt,<=,ge,>=,le.Comparisonscanbemadeagainstother
valuesoragainstBoolean,string,integer,orfloating-pointliterals.
■Empty:The emptyoperatorisaprefixoperationthatcanbeusedtodeterminewhethera
valueis nullorempty.
■Conditional :A?B:C.Evaluate BorC,dependingontheresultoftheevaluationof A.
Theprecedenceofoperatorshighesttolowest,lefttorightisasfollows:
■[] .
■()(usedtochangetheprecedenceofoperators)
■-(unary) not ! empty
■* / div % mod
■+-(binary)
■<>< => =l tg tl eg e
■== != eq ne
■&& and
■|| or
■?:
ReservedWords
ThefollowingwordsarereservedfortheELandshouldnotbeusedasidentifiers:
and or not eq
ne lt gt lege true false nullinstanceof empty div modOperators
TheJavaEE6Tutorial • January2013 136
ExamplesofELExpressions
Table6–3 containsexampleELexpressionsandtheresultofevaluatingthem.
TABLE6–3 ExampleExpressions
ELExpression Result
${1 > (4/2)} false
$ { 4 . 0> =3 } t r u e${100.0 == 100} true${(10*10) ne 100} false${’a’ < ’b’} true${’hip’ gt ’hit’} false${4 > 3} true${1.2E4 + 1.4} 12001.4${3 div 4} 0.75${10 mod 4} 2${!empty param.Add} False iftherequestparameternamed Addisnulloran
emptystring.
${pageContext.request.contextPath} Thecontextpath.
${sessionScope.cart.numberOfItems} Thevalueofthe numberOfItems propertyofthe
session-scopedattributenamed cart.
${param[’mycom.productId’]} Thevalueoftherequestparameternamed
mycom.productId .
${header[ "host"]} Thehost.
${departments[deptName]} Thevalueoftheentrynamed deptName inthe
departments map.
${requestScope[’javax.servlet.forward.
servlet_path’]}Thevalueoftherequest-scopedattributenamed
javax.servlet.forward.servlet_path .
#{customer.lName} Getsthevalueoftheproperty lNamefromthe customer
beanduringaninitialrequest.Setsthevalueof lName
duringapostback.
#{customer.calcTotal} Thereturnvalueofthemethod calcTotal ofthe
customer bean.ExamplesofELExpressions
Chapter6 • ExpressionLanguage 137
138
UsingJavaServerFacesTechnologyinWeb
Pages
Webpagesrepresentthepresentationlayerforwebapplications.Theprocessofcreatingweb
pagesforaJavaServerFacesapplicationincludesaddingcomponentstothepageandwiringthemtomanagedbeans,validators,listeners,converters,andotherserver-sideobjectsthatareassociatedwiththepage.
Thischapterexplainshowtocreatewebpagesusingvarioustypesofcomponentandcoretags.
Inthenextchapter,youwilllearnaboutaddingconverters,validators,andlistenersto
componenttagstoprovideadditionalfunctionalitytocomponents.
Manyoftheexamplesinthischapteraretakenfrom
Chapter51,“Duke’sBookstoreCaseStudy
Example.”
Thefollowingtopicsareaddressedhere:
■“SettingUpaPage”onpage139
■“AddingComponentstoaPageUsingHTMLTags”onpage140
■“UsingCoreTags”onpage171
SettingUpaPage
AtypicalJavaServerFaceswebpageincludesthefollowingelements:
■AsetofnamespacedeclarationsthatdeclaretheJavaServerFacestaglibraries
■Optionally,theHTMLhead( h:head)andbody( h:body)tags
■Aformtag( h:form)thatrepresentstheuserinputcomponents
ToaddtheJavaServerFacescomponentstoyourwebpage,youneedtoprovidethepageaccess
tothetwostandardtaglibraries:theJavaServerFacesHTMLrenderkittaglibraryandtheJavaServerFacescoretaglibrary.TheJavaServerFacesstandardHTMLtaglibrarydefinestagsthatrepresentcommonHTMLuserinterfacecomponents.ThislibraryislinkedtotheHTML7CHAPTER 7
139
renderkitat http://docs.oracle.com/javaee/6/javaserverfaces/2.1/docs/
renderkitdocs/ .TheJavaServerFacescoretaglibrarydefinestagsthatperformcoreactions
andareindependentofaparticularrenderkit.
ForacompletelistofJavaServerFacesFaceletstagsandtheirattributes,refertothe
documentationat http://docs.oracle.com/javaee/6/javaserverfaces/2.1/docs/
vdldocs/facelets/ .
TouseanyoftheJavaServerFacestags,youneedtoincludeappropriatedirectivesatthetopof
eachpagespecifyingthetaglibraries.
ForFaceletsapplications,theXMLnamespacedirectivesuniquelyidentifythetaglibraryURI
andthetagprefix.
Forexample,whenyoucreateaFaceletsXHTMLpage,includenamespacedirectivesasfollows:
<html xmlns= "http://www.w3.org/1999/xhtml "
xmlns:h= "http://java.sun.com/jsf/html "
xmlns:f= "http://java.sun.com/jsf/core ">
TheXMLnamespaceURIidentifiesthetaglibrarylocation,andtheprefixvalueisusedto
distinguishthetagsbelongingtothatspecifictaglibrary.Youcanalsouseotherprefixesinsteadofthestandard horf.However,whenincludingthetaginthepage,youmustusetheprefixthat
youhavechosenforthetaglibrary.Forexample,inthefollowingwebpage,the formtagmust
bereferencedusingthe hprefixbecausetheprecedingtaglibrarydirectiveusesthe hprefixto
distinguishthetagsdefinedinHTMLtaglibrary:
<h:form ...>
Thesections “AddingComponentstoaPageUsingHTMLTags”onpage140 and“UsingCore
Tags”onpage171 describehowtousethecomponenttagsfromtheJavaServerFacesstandard
HTMLtaglibraryandthecoretagsfromtheJavaServerFacescoretaglibrary.
AddingComponentstoaPageUsingHTMLTags
ThetagsdefinedbytheJavaServerFacesstandardHTMLtaglibraryrepresentHTMLformcomponentsandotherbasicHTMLelements.Thesecomponentsdisplaydataoracceptdatafromtheuser.Thisdataiscollectedaspartofaformandissubmittedtotheserver,usuallywhentheuserclicksabutton.Thissectionexplainshowtouseeachofthecomponenttagsshownin
Table7–1 .AddingComponentstoaPageUsingHTMLTags
TheJavaEE6Tutorial • January2013 140
TABLE7–1 TheComponentTags
Tag Functions Renderedas Appearance
h:column Representsacolumnofdata
inadatacomponentAcolumnofdatainan
HTMLtableAcolumninatable
h:commandButton Submitsaformtothe
applicationAnHTML <input
type=type>element,
wherethe typevaluecan
be"submit ","reset ",or
"image "Abutton
h:commandLink Linkstoanotherpageor
locationonapageAnHTML <a href>
elementAhyperlink
h:dataTable Representsadatawrapper AnHTML <table>
elementAtablethatcanbe
updateddynamically
h:form Representsaninputform
(innertagsoftheformreceivethedatathatwillbesubmittedwiththeform)AnHTML <form>
elementNoappearance
h:graphicImage Displaysanimage AnHTML <img>element Animage
h:inputHidden Allowsapageauthorto
includeahiddenvariableinapageAnHTML <input
type= "hidden ">elementNoappearance
h:inputSecret Allowsausertoinputastring
withouttheactualstringappearinginthefieldAnHTML <input
type= "password ">
elementAtextfield,which
displaysarowofcharactersinsteadoftheactualstringentered
h:inputText Allowsausertoinputastring AnHTML <input
type= "text">elementAtextfield
h:inputTextarea Allowsausertoentera
multilinestringAnHTML <textarea>
elementAmulti-rowtext
field
h:message Displaysalocalizedmessage AnHTML <span>
tagif
stylesareusedAtextstring
h:messages Displayslocalizedmessages AsetofHTML <span>
tagsifstylesareusedAtextstring
h:outputFormat Displaysalocalizedmessage Plaintext Plaintext
h:outputLabel Displaysanestedcomponent
asalabelforaspecifiedinputfieldAnHTML <label>
elementPlaintextAddingComponentstoaPageUsingHTMLTags
Chapter7 • UsingJavaServerFacesTechnologyinWebPages 141
TABLE7–1 TheComponentTags (Continued)
Tag Functions Renderedas Appearance
h:outputLink Linkstoanotherpageor
locationonapagewithoutgeneratinganactioneventAnHTML <a>element Ahyperlink
h:outputText Displaysalineoftext Plaintext Plaintext
h:panelGrid Displaysatable AnHTML <table>
elementwith <tr>and
<td>elementsAtable
h:panelGroup Groupsasetofcomponents
underoneparentAHTML <div>or
<span>elementArowinatable
h:selectBooleanCheckbox Allowsausertochangethe
valueofaBooleanchoiceAnHTML <input
type= "checkbox ">
element.Acheckbox
h:selectManyCheckbox Displaysasetofcheckboxes
fromwhichtheusercanselectmultiplevaluesAsetofHTML <input>
elementsoftypecheckboxAsetofcheckboxes
h:selectManyListbox Allowsausertoselect
multipleitemsfromasetofitems,alldisplayedatonceAnHTML <select>
elementAlistbox
h:selectManyMenu Allowsausertoselect
multipleitemsfromasetofitemsAnHTML <select>
elementAscrollablecombo
box
h:selectOneListbox Allowsausertoselectone
itemfromasetofitems,alldisplayedatonceAnHTML <select>
elementAlistbox
h:selectOneMenu Allowsausertoselectone
itemfromasetofitemsAnHTML <select>
elementAscrollablecombo
box
h:selectOneRadio Allowsausertoselectone
itemfromasetofitemsAnHTML <input
type= "radio ">elementAsetofradio
buttons
Thenextsectionexplainstheimportanttagattributesthatarecommontomostcomponent
tags.Foreachofthecomponentsdiscussedinthefollowingsections, “WritingBeanProperties”
onpage192 explainshowtowriteabeanpropertyboundtoaparticularcomponentoritsvalue.
CommonComponentTagAttributes
Mostofthecomponenttagssupporttheattributesshownin Table7–2 .AddingComponentstoaPageUsingHTMLTags
TheJavaEE6Tutorial • January2013 142
TABLE7–2 CommonComponentTagAttributes
Attribute Description
binding Identifiesabeanpropertyandbindsthecomponentinstancetoit.
id Uniquelyidentifiesthecomponent.
immediate Ifsetto true,indicatesthatanyevents,validation,andconversionassociatedwith
thecomponentshouldhappenwhenrequestparametervaluesareapplied,
rendered Specifiesaconditionunderwhichthecomponentshouldberendered.Ifthe
conditionisnotsatisfied,thecomponentisnotrendered.
style SpecifiesaCascadingStyleSheet(CSS)styleforthetag.
styleClass SpecifiesaCSSclassthatcontainsdefinitionsofthestyles.
value Specifiesthevalueofthecomponent,intheformofavalueexpression.
Allthetagattributes(except id)canacceptexpressions,asdefinedbytheEL,describedin
Chapter6,“ExpressionLanguage.”
TheidAttribute
Theidattributeisnotusuallyrequiredforacomponenttagbutisusedwhenanother
componentoraserver-sideclassmustrefertothecomponent.Ifyoudon’tincludean id
attribute,theJavaServerFacesimplementationautomaticallygeneratesacomponentID.UnlikemostotherJavaServerFacestagattributes,the idattributetakesexpressionsusingonlythe
evaluationsyntaxdescribedin
“ImmediateEvaluation”onpage127 ,whichusesthe ${}
delimiters.Formoreinformationonexpressionsyntax,see “ValueExpressions”onpage128 .
TheimmediateAttribute
Inputcomponentsandcommandcomponents(thosethatimplementthejavax.faces.component.ActionSource interface,suchasbuttonsandhyperlinks)cansetthe
immediate attributeto truetoforceevents,validations,andconversionstobeprocessedwhen
requestparametervaluesareapplied.
Youneedtocarefullyconsiderhowthecombinationofaninputcomponent’s immediate value
andacommandcomponent’s immediate valuedetermineswhathappenswhenthecommand
componentisactivated.
Assumethatyouhaveapagewithabuttonandafieldforenteringthequantityofabookina
shoppingcart.Ifthe immediate attributesofboththebuttonandthefieldaresetto true,the
newvalueenteredinthefieldwillbeavailableforanyprocessingassociatedwiththeeventthatisgeneratedwhenthebuttonisclicked.Theeventassociatedwiththebuttonaswellastheevents,validation,andconversionassociatedwiththefieldareallhandledwhenrequestparametervaluesareapplied.AddingComponentstoaPageUsingHTMLTags
Chapter7 • UsingJavaServerFacesTechnologyinWebPages 143
Ifthebutton’s immediate attributeissetto truebutthefield’s immediate attributeissetto
false,theeventassociatedwiththebuttonisprocessedwithoutupdatingthefield’slocalvalue
tothemodellayer.Thereasonisthatanyevents,validation,orconversionassociatedwiththefieldoccur afterrequestparametervaluesareapplied.
Thebookshowcart.xhtml pageoftheDuke’sBookstorecasestudyhasexamplesof
componentsusingthe immediate attributetocontrolwhichcomponent’sdataisupdatedwhen
certainbuttonsareclicked.The quantity fieldforeachbookdoesnotsetthe immediate
attribute,sothevalueis false(thedefault).
<h:inputText id= "quantity "
size= "4"
value= "#{item.quantity} "
title= "#{bundle.ItemQuantity} ">
<f:validateLongRange minimum= "1"/>
</h:inputText>
Theimmediate attributeoftheContinueShoppinghyperlinkissetto true,whilethe
immediate attributeoftheUpdateQuantitieshyperlinkissetto false:
<h:commandLink id= "continue "
action= "bookcatalog "
immediate= "true">
<h:outputText value= "#{bundle.ContinueShopping} "/>
</h:commandLink>...<h:commandLink id= "update "
action= "#{showcart.update} "
immediate= "false ">
<h:outputText value= "#{bundle.UpdateQuantities} "/>
</h:commandLink>
IfyouclicktheContinueShoppinghyperlink,noneofthechangesenteredintothe quantity
inputfieldswillbeprocessed.IfyouclicktheUpdateQuantitieshyperlink,thevaluesinthequantityfieldswillbeupdatedintheshoppingcart.
TherenderedAttribute
AcomponenttagusesaBooleanELexpressionalongwiththe rendered attributetodetermine
whetherthecomponentwillberendered.Forexample,the commandLink componentinthe
followingsectionofapageisnotrenderedifthecartcontainsnoitems:
<h:commandLink id= "check "
...rendered= "#{cart.numberOfItems > 0} ">
<h:outputText
value= "#{bundle.CartCheck} "/>
</h:commandLink>
UnlikenearlyeveryotherJavaServerFacestagattribute,the rendered attributeisrestrictedto
usingrvalueexpressions.Asexplainedin “ValueandMethodExpressions”onpage128 ,these
rvalueexpressionscanonlyreaddata;theycannotwritethedatabacktothedatasource.AddingComponentstoaPageUsingHTMLTags
TheJavaEE6Tutorial • January2013 144
Therefore,expressionsusedwith rendered attributescanusethearithmeticoperatorsand
literalsthatrvalueexpressionscanusebutlvalueexpressionscannotuse.Forexample,theexpressionintheprecedingexampleusesthe >operator.
Note–Inthisexampleandothers, bundlereferstoa java.util.ResourceBundle filethat
containslocale-specificstringstobedisplayed.Resourcebundlesarediscussedin Chapter17,
“InternationalizingandLocalizingWebApplications.”
ThestyleandstyleClassAttributes
ThestyleandstyleClass attributesallowyoutospecifyCSSstylesfortherenderedoutputof
yourtags. “DisplayingErrorMessageswiththe h:message andh:messages Tags”onpage164
describesanexampleofusingthe styleattributetospecifystylesdirectlyintheattribute.A
componenttagcaninsteadrefertoaCSSclass.
Thefollowingexampleshowstheuseofa dataTable tagthatreferencesthestyleclass
list-background :
<h:dataTable id= "items "
...styleClass= "list-background "
value= "#{cart.items} "
var="book">
Thestylesheetthatdefinesthisclassis stylesheet.css ,whichwillbeincludedinthe
application.Formoreinformationondefiningstyles,see CascadingStyleSheetsSpecification at
http://www.w3.org/Style/CSS/ .
ThevalueandbindingAttributes
Atagrepresentinganoutputcomponentusesthe valueandbindingattributestobindits
component’svalueorinstance,respectively,toadataobject.
AddingHTMLHeadandBodyTags
TheHTMLhead( h:head)andbody( h:body)tagsaddHTMLpagestructuretoJavaServer
Faceswebpages.
■Theh:headtagrepresentstheheadelementofanHTMLpage
■Theh:bodytagrepresentsthebodyelementofanHTMLpage
ThefollowingisanexampleofanXHTMLpageusingtheusualheadandbodymarkuptags:
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN "
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd ">
<html xmlns= "http://www.w3.org/1999/xhtml ">AddingComponentstoaPageUsingHTMLTags
Chapter7 • UsingJavaServerFacesTechnologyinWebPages 145
<head>
<title>Add a title</title>
</head><body>
Add Content
</body>
</html>
ThefollowingisanexampleofanXHTMLpageusing h:headandh:bodytags:
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN "
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd ">
<html xmlns= "http://www.w3.org/1999/xhtml "
xmlns:h= "http://java.sun.com/jsf/html ">
<h:head>
Add a title
</h:head><h:body>
Add Content
</h:body>
</html>
BothoftheprecedingexamplecodesegmentsrenderthesameHTMLelements.Theheadand
bodytagsareusefulmainlyforresourcerelocation.Formoreinformationonresourcerelocation,see
“ResourceRelocationUsing h:outputScript andh:outputStylesheet Tags”
onpage169 .
AddingaFormComponent
Anh:formtagrepresentsaninputform,whichincludeschildcomponentsthatcancontain
datathatiseitherpresentedtotheuserorsubmittedwiththeform.
Figure7–1 showsatypicalloginforminwhichauserentersausernameandpassword,then
submitstheformbyclickingtheLoginbutton.
Theh:formtagrepresentstheformonthepageandenclosesallthecomponentsthatdisplayor
collectdatafromtheuser,asshownhere:FIGURE7–1 ATypicalForm
LoginUser Name: Duke
Password:**********AddingComponentstoaPageUsingHTMLTags
TheJavaEE6Tutorial • January2013 146
<h:form>
... other JavaServer Faces tags and other content...</h:form>
Theh:formtagcanalsoincludeHTMLmarkuptolayoutthecomponentsonthepage.Note
thatthe h:formtagitselfdoesnotperformanylayout;itspurposeistocollectdataandto
declareattributesthatcanbeusedbyothercomponentsintheform.
Apagecanincludemultiple h:formtags,butonlythevaluesfromtheformsubmittedbythe
userwillbeincludedinthepostbackrequest.
UsingTextComponents
Textcomponentsallowuserstoviewandedittextinwebapplications.Thebasictypesoftextcomponentsareasfollows:
■Label,whichdisplaysread-onlytext
■Textfield,whichallowsuserstoentertext,oftentobesubmittedaspartofaform
■Textarea,whichisatypeoftextfieldthatallowsuserstoentermultiplelinesoftext
■Passwordfield,whichisatypeoftextfieldthatdisplaysasetofcharacters,suchasasterisks,insteadofthepasswordtextthattheuserenters
Figure7–2 showsexamplesofthesetextcomponents.
Textcomponentscanbecategorizedaseitherinputoroutput.AJavaServerFacesoutput
componentisrenderedasread-onlytext.Anexampleisalabel.AJavaServerFacesinput
componentisrenderedaseditabletext.Anexampleisatextfield.
Theinputandoutputcomponentscaneachberenderedinvariouswaystodisplaymore
specializedtext.
Table7–3 liststhetagsthatrepresenttheinputcomponents.FIGURE7–2 ExampleTextComponents
User Name: Label Text Field Duke
Comments: A user can enter text across
multiple lines.Password:
Text AreaPassword Field**********AddingComponentstoaPageUsingHTMLTags
Chapter7 • UsingJavaServerFacesTechnologyinWebPages 147
TABLE7–3 InputTags
Tag Function
h:inputHidden Allowsapageauthortoincludeahiddenvariableinapage
h:inputSecret Thestandardpasswordfield:acceptsonelineoftextwithnospacesanddisplaysit
asasetofasterisksasitistyped
h:inputText Thestandardtextfield:acceptsaone-linetextstring
h:inputTextarea Thestandardtextarea:acceptsmultiplelinesoftext
Theinputtagssupportthetagattributesshownin Table7–4 inadditiontothosedescribedin
“CommonComponentTagAttributes”onpage142 .Notethatthistabledoesnotincludeallthe
attributessupportedbytheinputtagsbutjustthosethatareusedmostoften.Forthecompletelistofattributes,refertothedocumentationat
http://docs.oracle.com/javaee/6/
javaserverfaces/2.1/docs/vdldocs/facelets/ .
TABLE7–4 InputTagAttributes
Attribute Description
converter Identifiesaconverterthatwillbeusedtoconvertthecomponent’slocal
data.See“UsingtheStandardConverters”onpage175 formore
informationonhowtousethisattribute.
converterMessage Specifiesanerrormessagetodisplaywhentheconverterregisteredon
thecomponentfails.
dir Specifiesthedirectionofthetextdisplayedbythiscomponent.
Acceptablevaluesare LTR,meaningleft-to-right,and RTL,meaning
right-to-left.
label Specifiesanamethatcanbeusedtoidentifythiscomponentinerror
messages.
lang Specifiesthecodeforthelanguageusedintherenderedmarkup,suchas
en_US.
required Takesa booleanvaluethatindicateswhethertheusermustenteravalue
inthiscomponent.
requiredMessage Specifiesanerrormessagetodisplaywhentheuserdoesnotentera
valueintothecomponent.
validator Identifiesamethodexpressionpointingtoamanagedbeanmethodthat
performsvalidationonthecomponent’sdata.See “Referencinga
MethodThatPerformsValidation”onpage187 foranexampleofusing
thef:validator tag.AddingComponentstoaPageUsingHTMLTags
TheJavaEE6Tutorial • January2013 148
TABLE7–4 InputTagAttributes (Continued)
Attribute Description
validatorMessage Specifiesanerrormessagetodisplaywhenthevalidatorregisteredon
thecomponentfailstovalidatethecomponent’slocalvalue.
valueChangeListener Identifiesamethodexpressionthatpointstoamanagedbeanmethod
thathandlestheeventofenteringavalueinthiscomponent.See
“ReferencingaMethodThatHandlesaValue-ChangeEvent”onpage188
foranexampleofusing valueChangeListener .
Table7–5 liststhetagsthatrepresenttheoutputcomponents.
TABLE7–5 OutputTags
Tag Function
h:outputFormat Displaysaformattedmessage
h:outputLabel Thestandardread-onlylabel:displaysacomponentasalabelforaspecifiedinput
field
h:outputLink Displaysan <a href> tagthatlinkstoanotherpagewithoutgeneratinganaction
event
h:outputText Displaysaone-linetextstring
Theoutputtagssupportthe converter tagattributeinadditiontothoselistedin “Common
ComponentTagAttributes”onpage142 .
Therestofthissectionexplainshowtousesomeofthetagslistedin Table7–3 andTable7–5 .
Theothertagsarewritteninasimilarway.
RenderingaTextFieldwiththeh:inputTextTag
Theh:inputText tagisusedtodisplayatextfield.Asimilartag,the h:outputText tag,displays
aread-only,single-linestring.Thissectionshowsyouhowtousethe h:inputText tag.The
h:outputText tagiswritteninasimilarway.
Hereisanexampleofan h:inputText tag:
<h:inputText id= "name"
label= "Customer Name "
size= "30"
value= "#{cashier.name} "
required= "true"
requiredMessage= "#{bundle.ReqCustomerName} ">
<f:valueChangeListener
type= "dukesbookstore.listeners.NameChanged "/>
</h:inputText>AddingComponentstoaPageUsingHTMLTags
Chapter7 • UsingJavaServerFacesTechnologyinWebPages 149
Thelabelattributespecifiesauser-friendlynamethatwillbeusedinthesubstitution
parametersoferrormessagesdisplayedforthiscomponent.
Thevalueattributereferstothe namepropertyofamanagedbeannamed CashierBean .This
propertyholdsthedataforthe namecomponent.Aftertheusersubmitstheform,thevalueof
thenamepropertyin CashierBean willbesettothetextenteredinthefieldcorrespondingto
thistag.
Therequired attributecausesthepagetoreload,displayingerrors,iftheuserdoesnotentera
valueinthe nametextfield.TheJavaServerFacesimplementationcheckswhetherthevalueof
thecomponentisnullorisanemptystring.
Ifyourcomponentmusthaveanon-nullvalueora Stringvalueatleastonecharacterinlength,
youshouldadda required attributetoyourtagandsetitsvalueto true.Ifyourtaghasa
required attributethatissetto trueandthevalueisnullorazero-lengthstring,noother
validatorsthatareregisteredonthetagarecalled.Ifyourtagdoesnothavea required attribute
setto true,othervalidatorsthatareregisteredonthetagarecalled,butthosevalidatorsmust
handlethepossibilityofanullorzero-lengthstring.See “ValidatingNullandEmptyStrings”
onpage207 formoreinformation.
RenderingaPasswordFieldwiththeh:inputSecretTag
Theh:inputSecret tagrendersan <input type= "password ">HTMLtag.Whentheusertypes
astringintothisfield,arowofasterisksisdisplayedinsteadofthetexttypedbytheuser.Hereisanexample:
<h:inputSecret redisplay= "false "
value= "#{LoginBean.password} "/>
Inthisexample,the redisplay attributeissetto false.Thiswillpreventthepasswordfrom
beingdisplayedinaquerystringorinthesourcefileoftheresultingHTMLpage.
RenderingaLabelwiththeh:outputLabelTag
Theh:outputLabel tagisusedtoattachalabeltoaspecifiedinputfieldforthepurposeof
makingitaccessible.Thefollowingpageusesan h:outputLabel tagtorenderthelabelofa
checkbox:
<h:selectBooleanCheckbox id= "fanClub "
binding= "#{cashier.specialOffer} "/>
<h:outputLabel for= "fanClub "
binding= "#{cashier.specialOfferText} ">
<h:outputText id= "fanClubLabel "
value= "#{bundle.DukeFanClub} "/>
</h:outputLabel>...AddingComponentstoaPageUsingHTMLTags
TheJavaEE6Tutorial • January2013 150
Theforattributeofthe h:outputLabel tagmapstothe idoftheinputfieldtowhichthelabelis
attached.The h:outputText tagnestedinsidethe h:outputLabel tagrepresentsthelabel
component.The valueattributeonthe h:outputText tagindicatesthetextthatisdisplayed
nexttotheinputfield.
Insteadofusingan h:outputText tagforthetextdisplayedasalabel,youcansimplyusethe
h:outputLabel tag’s valueattribute.Thefollowingcodesnippetshowswhatthepreviouscode
snippetwouldlooklikeifitusedthe valueattributeofthe h:outputLabel tagtospecifythetext
ofthelabel:
<h:selectBooleanCheckbox id= "fanClub "
binding= "#{cashier.specialOffer} "/>
<h:outputLabel for= "fanClub "
binding= "#{cashier.specialOfferText} "
value= "#{bundle.DukeFanClub} "/>
...
RenderingaHyperlinkwiththeh:outputLinkTag
Theh:outputLink tagisusedtorenderahyperlinkthat,whenclicked,loadsanotherpagebut
doesnotgenerateanactionevent.Youshouldusethistaginsteadofthe h:commandLink tagif
youalwayswanttheURLspecifiedbythe h:outputLink tag’s valueattributetoopenanddo
notwantanyprocessingtobeperformedwhentheuserclicksthelink.Hereisanexample:
<h:outputLink value= "javadocs ">
Documentation for this demo
</h:outputLink>
Thetextinthebodyofthe h:outputLink tagidentifiesthetextthattheuserclickstogettothe
nextpage.
DisplayingaFormattedMessagewiththeh:outputFormatTag
Theh:outputFormat tagallowsdisplayofconcatenatedmessagesasa MessageFormat pattern,
asdescribedintheAPIdocumentationfor java.text.MessageFormat .Hereisanexampleof
anh:outputFormat tag:
<h:outputFormat value= "Hello, {0}! ">
<f:param value= "#{hello.name} "/>
</h:outputFormat>
Thevalueattributespecifiesthe MessageFormat pattern.The f:paramtagspecifiesthe
substitutionparametersforthemessage.Thevalueoftheparameterreplacesthe {0}inthe
sentence.Ifthevalueof "#{hello.name} "is“Bill”,themessagedisplayedinthepageisas
follows:
Hello, Bill!AddingComponentstoaPageUsingHTMLTags
Chapter7 • UsingJavaServerFacesTechnologyinWebPages 151
Anh:outputFormat tagcanincludemorethanone f:paramtagforthosemessagesthathave
morethanoneparameterthatmustbeconcatenatedintothemessage.Ifyouhavemorethanoneparameterforonemessage,makesurethatyouputthe f:paramtagsintheproperorderso
thatthedataisinsertedinthecorrectplaceinthemessage.Hereistheprecedingexamplemodifiedwithanadditionalparameter:
<h:outputFormat value= "Hello, {0}! You are visitor number {1} to the page. ">
<f:param value= "#{hello.name} "/>
<f:param value= "#{bean.numVisitor} "/>
</h:outputFormat>
Thevalueof {1}isreplacedbythesecondparameter.TheparameterisanELexpression,
bean.numVisitor ,wheretheproperty numVisitor ofthemanagedbean beankeepstrackof
visitorstothepage.Thisisanexampleofavalue-expression-enabledtagattributeacceptingan
ELexpression.Themessagedisplayedinthepageisnowasfollows:
Hello, Bill! You are visitor number 10 to the page.
UsingCommandComponentTagsforPerforming
ActionsandNavigation
InJavaServerFacesapplications,thebuttonandhyperlinkcomponenttagsareusedtoperform
actions,suchassubmittingaform,andfornavigatingtoanotherpage.Thesetagsarecalledcommandcomponenttagsbecausetheyperformanactionwhenactivated.
Theh:commandButton tagisrenderedasabutton.The h:commandLink tagisrenderedasa
hyperlink.
Inadditiontothetagattributeslistedin
“CommonComponentTagAttributes”onpage142 ,
theh:commandButton andh:commandLink tagscanusethefollowingattributes:
■action,whichiseitheralogicaloutcome Stringoramethodexpressionpointingtoabean
methodthatreturnsalogicaloutcome String.Ineithercase,thelogicaloutcome Stringis
usedtodeterminewhatpagetoaccesswhenthecommandcomponenttagisactivated.
■actionListener ,whichisamethodexpressionpointingtoabeanmethodthatprocessesan
actioneventfiredbythecommandcomponenttag.
See“ReferencingaMethodThatPerformsNavigation”onpage187 formoreinformationon
usingthe actionattribute.See “ReferencingaMethodThatHandlesanActionEvent”on
page187fordetailsonusingthe actionListener attribute.
RenderingaButtonwiththeh:commandButtonTag
Ifyouareusingan h:commandButton componenttag,thedatafromthecurrentpageis
processedwhenauserclicksthebutton,andthenextpageisopened.Hereisanexampleoftheh:commandButton tag:AddingComponentstoaPageUsingHTMLTags
TheJavaEE6Tutorial • January2013 152
<h:commandButton value= "Submit "
action= "#{cashierBean.submit} "/>
Clickingthebuttonwillcausethe submitmethodof CashierBean tobeinvokedbecausethe
actionattributereferencesthismethod.The submitmethodperformssomeprocessingand
returnsalogicaloutcome.
Thevalueattributeoftheexample h:commandButton tagreferencesthebutton’slabel.For
informationonhowtousethe actionattribute,see “ReferencingaMethodThatPerforms
Navigation”onpage187 .
RenderingaHyperlinkwiththeh:commandLinkTag
Theh:commandLink tagrepresentsanHTMLhyperlinkandisrenderedasanHTML <a>
element.
Ah:commandLink tagmustincludeanested h:outputText tag,whichrepresentsthetextthat
theuserclickstogeneratetheevent.Hereisanexample:
<h:commandLink id= "Duke"action= "bookstore ">
<f:actionListener
type= "dukesbookstore.listeners.LinkBookChangeListener "/>
<h:outputText value= "#{bundle.Book201} "/>
/h:commandLink>
ThistagwillrenderthefollowingHTML:
<a id= "_idt16:Duke "href= "#"
onclick= "mojarra.jsfcljs(document.getElementById(’j_idt16’),
{’j_idt16:Duke’:’j_idt16:Duke’},’’);return false; ">My Early Years: Growing Up on Star7, by Duke</a>
Note–Theh:commandLink tagwillrenderJavaScriptscriptinglanguage.Ifyouusethistag,
makesurethatyourbrowserisenabledforJavaScripttechnology.
AddingGraphicsandImageswiththeh:graphicImage
Tag
InaJavaServerFacesapplication,usethe h:graphicImage tagtorenderanimageonapage:
<h:graphicImage id= "mapImage "url="/resources/images/book_all.jpg "/>
Inthisexample,the urlattributespecifiesthepathtotheimage.TheURLoftheexampletag
beginswithaslash( /),whichaddstherelativecontextpathofthewebapplicationtothe
beginningofthepathtotheimage.
Alternatively,youcanusethefacilitydescribedin “WebResources”onpage123 topointtothe
imagelocation.Herearetwoexamples:AddingComponentstoaPageUsingHTMLTags
Chapter7 • UsingJavaServerFacesTechnologyinWebPages 153
<h:graphicImage id= "mapImage "
name= "book_all.jpg "
library= "images "
alt="#{bundle.ChooseBook} "
usemap= "#bookMap "/>
<h:graphicImage value= "#{resource[’images:wave.med.gif’]} "/>
Youcanusesimilarsyntaxtorefertoanimageinastylesheet.Thefollowingsyntaxinastyle
sheetspecifiesthattheimageistobefoundat resources/img/top-background.jpg :
header {
position: relative;height: 150px;background: #fff url(#{resource[’img:top-background.jpg’]}) repeat-x;...
LayingOutComponentswiththeh:panelGridand
h:panelGroupTags
InaJavaServerFacesapplication,youuseapanelasalayoutcontainerforasetofother
components.ApanelisrenderedasanHTMLtable. Table7–6 liststhetagsusedtocreate
panels.
TABLE7–6 PanelComponentTags
Tag Attributes Function
h:panelGrid columns,columnClasses ,footerClass ,
headerClass ,panelClass ,rowClassesDisplaysatable
h:panelGroup layout Groupsasetofcomponentsunderone
parent
Theh:panelGrid tagisusedtorepresentanentiretable.The h:panelGroup tagisusedto
representrowsinatable.Othertagsareusedtorepresentindividualcellsintherows.
Thecolumnsattributedefineshowtogroupthedatainthetableandthereforeisrequiredifyou
wantyourtabletohavemorethanonecolumn.The h:panelGrid tagalsohasasetofoptional
attributesthatspecifyCSSclasses: columnClasses ,footerClass ,headerClass ,panelClass ,
androwClasses .
Ifthe headerClass attributevalueisspecified,the h:panelGrid tagmusthaveaheaderasits
firstchild.Similarly,ifa footerClass attributevalueisspecified,the h:panelGrid tagmust
haveafooterasitslastchild.
Hereisanexample:AddingComponentstoaPageUsingHTMLTags
TheJavaEE6Tutorial • January2013 154
<h:panelGrid columns= "2"
headerClass= "list-header "
styleClass= "list-background "
rowClasses= "list-row-even, list-row-odd "
summary= "#{bundle.CustomerInfo} "
title= "#{bundle.Checkout} ">
<f:facet name= "header ">
<h:outputText value= "#{bundle.Checkout} "/>
</f:facet>
<h:outputLabel for= "name"value= "#{bundle.Name} "/>
<h:inputText id= "name"
size= "30"
value= "#{cashier.name} "
required= "true"
requiredMessage= "#{bundle.ReqCustomerName} ">
<f:valueChangeListener
type= "dukesbookstore.listeners.NameChanged "/>
</h:inputText><h:message styleClass= "error-message "for="name"/>
<h:outputLabel for= "ccno"value= "#{bundle.CCNumber} "/>
<h:inputText id= "ccno"
size= "19"
value= "#{cashier.creditCardNumber}
"
required= "true"
requiredMessage= "#{bundle.ReqCreditCard} ">
<f:converter converterId= "ccno"/>
<f:validateRegex
pattern= "\d{16}|\d{4} \d{4} \d{4} \d{4}|\d{4}-\d{4}-\d{4}-\d{4} "/>
</h:inputText><h:message styleClass= "error-message "for="ccno"/>
...
</h:panelGrid>
Thepreceding h:panelGrid tagisrenderedasatablethatcontainscomponentsinwhicha
customerinputspersonalinformation.This h:panelGrid tagusesstylesheetclassestoformat
thetable.Thefollowingcodeshowsthe list-header definition:
.list-header {
background-color: #ffffff;color: #000000;text-align: center;
}
Becausethe h:panelGrid tagspecifiesa headerClass ,the h:panelGrid tagmustcontaina
header.Theexample h:panelGrid tagusesan f:facettagfortheheader.Facetscanhaveonly
onechild,soan h:panelGroup tagisneededifyouwanttogroupmorethanonecomponent
withinan f:facet.Theexample h:panelGrid taghasonlyonecellofdata,soan h:panelGroup
tagisnotneeded.(Formoreinformationaboutfacets,see “UsingData-BoundTable
Components”onpage161 .)
Theh:panelGroup taghasanattribute, layout,inadditiontothoselistedin “Common
ComponentTagAttributes”onpage142 .Ifthe layoutattributehasthevalue block,anHTML
divelementisrenderedtoenclosetherow;otherwise,anHTML spanelementisrenderedtoAddingComponentstoaPageUsingHTMLTags
Chapter7 • UsingJavaServerFacesTechnologyinWebPages 155
enclosetherow.Ifyouarespecifyingstylesforthe h:panelGroup tag,youshouldsetthe layout
attributeto blockinorderforthestylestobeappliedtothecomponentswithinthe
h:panelGroup tag.Youshoulddothisbecausestyles,suchasthosethatsetwidthandheight,
arenotappliedtoinlineelements,whichishowcontentenclosedbythe spanelementis
defined.
Anh:panelGroup tagcanalsobeusedtoencapsulateanestedtreeofcomponentssothatthe
treeofcomponentsappearsasasinglecomponenttotheparentcomponent.
Data,representedbythenestedtags,isgroupedintorowsaccordingtothevalueofthe columns
attributeofthe h:panelGrid tag.The columnsattributeintheexampleissetto 2,andtherefore
thetablewillhavetwocolumns.Thecolumninwhicheachcomponentisdisplayedisdeterminedbytheorderinwhichthecomponentislistedonthepagemodulo2.So,ifacomponentisthefifthoneinthelistofcomponents,thatcomponentwillbeinthe5modulo2column,orcolumn1.
DisplayingComponentsforSelectingOneValue
Anothercommonlyusedcomponentisonethatallowsausertoselectonevalue,whetheritistheonlyvalueavailableoroneofasetofchoices.Themostcommontagsforthiskindofcomponentareasfollows:
■Anh:selectBooleanCheckbox tag,displayedasacheckbox,whichrepresentsaBoolean
state
■Anh:selectOneRadio tag,displayedasasetofradiobuttons
■Anh:selectOneMenu tag,displayedasadrop-downmenu,withascrollablelist
■Anh:selectOneListbox tag,displayedasalistbox,withanunscrollablelist
Figure7–3 showsexamplesofthesecomponents.AddingComponentstoaPageUsingHTMLTags
TheJavaEE6Tutorial • January2013 156
DisplayingaCheckBoxUsingtheh:selectBooleanCheckboxTag
Theh:selectBooleanCheckbox tagistheonlytagthatJavaServerFacestechnologyprovides
forrepresentingaBooleanstate.
Hereisanexamplethatshowshowtousethe h:selectBooleanCheckbox tag:
<h:selectBooleanCheckbox id= "fanClub "
binding= "#{cashier.specialOffer} "/>
<h:outputLabel for= "fanClub "
binding= "#{cashier.specialOfferText} "
value= "#{bundle.DukeFanClub} "/>
Thisexampletagdisplaysacheckboxtoallowuserstoindicatewhethertheywanttojointhe
DukeFanClub.Thelabelforthecheckboxisrenderedbythe h:outputLabel tag.Thetextis
representedbythe valueattribute.
DisplayingaMenuUsingtheh:selectOneMenuTag
Acomponentthatallowstheusertoselectonevaluefromasetofvaluescanberenderedasalist
box,asetofradiobuttons,oramenu.Thissectiondescribesthe h:selectOneMenu tag.The
h:selectOneRadio andh:selectOneListbox tagsareusedinasimilarway.The
h:selectOneListbox tagissimilartothe h:selectOneMenu tagexceptthat
h:selectOneListbox definesa sizeattributethatdetermineshowmanyoftheitemsare
displayedatonce.
Theh:selectOneMenu tagrepresentsacomponentthatcontainsalistofitemsfromwhicha
usercanchooseoneitem.Thismenucomponentisalsocommonlyknownasadrop-downlist
oracombobox.Thefollowingcodesnippetshowshowthe h:selectOneMenu tagisusedto
allowtheusertoselectashippingmethod:
<h:selectOneMenu id= "shippingOption "
required= "true"
value= "#{cashier.shippingOption} ">
<f:selectItem itemValue= "2"
itemLabel= "#{bundle.QuickShip} "/>FIGURE7–3 ExampleComponentsforSelectingOneItem
Genre:
Availability:Language: Format:
Radio
ButtonsFiction
List BoxHardcover
PaperbackLarge-printCassetteDVDIllustratedChineseDutchEnglishFrenchGermanSpanishSwahili
Drop-Down Menu Check BoxNon-fiction
ReferenceBiography
In printAddingComponentstoaPageUsingHTMLTags
Chapter7 • UsingJavaServerFacesTechnologyinWebPages 157
<f:selectItem itemValue= "5"
itemLabel= "#{bundle.NormalShip} "/>
<f:selectItem itemValue= "7"
itemLabel= "#{bundle.SaverShip} "/>
</h:selectOneMenu>
Thevalueattributeofthe h:selectOneMenu tagmapstothepropertythatholdsthecurrently
selecteditem’svalue.Youarenotrequiredtoprovideavalueforthecurrentlyselecteditem.Ifyoudon’tprovideavalue,thefirstiteminthelistisselectedbydefault.
Likethe h:selectOneRadio tag,the h:selectOneMenu tagmustcontaineitheran
f:selectItems tagorasetof f:selectItem tagsforrepresentingtheitemsinthelist.
“Using
thef:selectItem andf:selectItems Tags”onpage159 describesthesetags.
DisplayingComponentsforSelectingMultipleValues
Insomecases,youneedtoallowyouruserstoselectmultiplevaluesratherthanjustonevalue
fromalistofchoices.Youcandothisusingoneofthefollowingcomponenttags:
■Anh:selectManyCheckbox tag,displayedasasetofcheckboxes
■Anh:selectManyMenu tag,displayedasadrop-downmenu
■Anh:selectManyListbox tag,displayedasalistbox
Figure7–4 showsexamplesofthesecomponents.
Thesetagsallowtheusertoselectzeroormorevaluesfromasetofvalues.Thissectionexplains
theh:selectManyCheckbox tag.The h:selectManyListbox andh:selectManyMenu tagsare
usedinasimilarway.
Unlikeamenu,alistboxdisplaysasubsetofitemsinabox;amenudisplaysonlyoneitemata
timewhentheuserisnotselectingthemenu.The sizeattributeofthe h:selectManyListbox
tagdeterminesthenumberofitemsdisplayedatonetime.Thelistboxincludesascrollbarforscrollingthroughanyremainingitemsinthelist.FIGURE7–4 ExampleComponentsforSelectingMultipleValues
Genre: Language: Format:
Check
BoxesFiction
List BoxHardcover
PaperbackLarge-printCassetteDVDIllustratedChineseDutchEnglishFrenchGermanSpanishSwahili
Drop-Down MenuNon-fiction
Reference
BiographyAddingComponentstoaPageUsingHTMLTags
TheJavaEE6Tutorial • January2013 158
Theh:selectManyCheckbox tagrendersasetofcheckboxes,witheachcheckboxrepresenting
onevaluethatcanbeselected:
<h:selectManyCheckbox id= "newslettercheckbox "
layout= "pageDirection "
value= "#{cashier.newsletters} ">
<f:selectItems value= "#{cashier.newsletterItems} "/>
</h:selectManyCheckbox>
Thevalueattributeofthe h:selectManyCheckbox tagidentifiesthe newsletters propertyof
theCashierBean managedbean.Thispropertyholdsthevaluesofthecurrentlyselecteditems
fromthesetofcheckboxes.Youarenotrequiredtoprovideavalueforthecurrentlyselecteditems.Ifyoudon’tprovideavalue,thefirstiteminthelistisselectedbydefault.IntheCashierBean managedbean,thisvalueisinstantiatedto0,sonoitemsareselectedbydefault.
Thelayoutattributeindicateshowthesetofcheckboxesisarrangedonthepage.Because
layoutissetto pageDirection ,thecheckboxesarearrangedvertically.Thedefaultis
lineDirection ,whichalignsthecheckboxeshorizontally.
Theh:selectManyCheckbox tagmustalsocontainatagorsetoftagsrepresentingthesetof
checkboxes.Torepresentasetofitems,youusethe f:selectItems tag.Torepresenteachitem
individually,youusethe f:selectItem tag.Thefollowingsectionexplainsthesetagsinmore
detail.
Usingthef:selectItemandf:selectItemsTags
Thef:selectItem andf:selectItems tagsrepresentcomponentsthatcanbenestedinsidea
componentthatallowsyoutoselectoneormultipleitems.An f:selectItem tagcontainsthe
value,label,anddescriptionofasingleitem.An f:selectItems tagcontainsthevalues,labels,
anddescriptionsoftheentirelistofitems.
Youcanuseeitherasetof f:selectItem tagsorasingle f:selectItems tagwithinyour
componenttag.
Theadvantagesofusingthe f:selectItems tagareasfollows.
■Itemscanberepresentedbyusingdifferentdatastructures,including Array,Map,and
Collection .Thevalueofthe f:selectItems tagcanrepresentevenagenericcollectionof
POJOs.
■Differentlistscanbeconcatenatedintoasinglecomponent,andthelistscanbegroupedwithinthecomponent.
■Valuescanbegenerateddynamicallyatruntime.AddingComponentstoaPageUsingHTMLTags
Chapter7 • UsingJavaServerFacesTechnologyinWebPages 159
Theadvantagesofusing f:selectItem areasfollows:
■Itemsinthelistcanbedefinedfromthepage.
■Lesscodeisneededinthebeanforthe f:selectItem properties.
Therestofthissectionshowsyouhowtousethe f:selectItems andf:selectItem tags.
Usingthef:selectItemsTag
Thefollowingexamplefrom “DisplayingComponentsforSelectingMultipleValues”on
page158showshowtousethe h:selectManyCheckbox tag:
<h:selectManyCheckbox id= "newslettercheckbox "
layout= "pageDirection "
value= "#{cashier.newsletters} ">
<f:selectItems value= "#{cashier.newsletterItems} "/>
</h:selectManyCheckbox>
Thevalueattributeofthe f:selectItems tagisboundtothemanagedbeanproperty
cashier.newsletterItems .Theindividual SelectItem objectsarecreatedprogrammatically
inthemanagedbean.
See“UISelectItems Properties”onpage198 forinformationonhowtowriteamanagedbean
propertyforoneofthesetags.
Usingthef:selectItemTag
Thef:selectItem tagrepresentsasingleiteminalistofitems.Hereistheexamplefrom
“DisplayingaMenuUsingthe h:selectOneMenu Tag”onpage157 onceagain:
<h:selectOneMenu id= "shippingOption "
required= "true"
value= "#{cashier.shippingOption} ">
<f:selectItem itemValue= "2"
itemLabel= "#{bundle.QuickShip} "/>
<f:selectItem itemValue= "5"
itemLabel= "#{bundle.NormalShip} "/>
<f:selectItem itemValue= "7"
itemLabel= "#{bundle.SaverShip} "/>
</h:selectOneMenu>
TheitemValue attributerepresentsthevalueforthe f:selectItem tag.The itemLabel
attributerepresentsthe Stringthatappearsinthedrop-downmenucomponentonthepage.
TheitemValue anditemLabel attributesarevalue-binding-enabled,meaningthattheycanuse
value-bindingexpressionstorefertovaluesinexternalobjects.Theseattributescanalsodefineliteralvalues,asshownintheexample h:selectOneMenu tag.AddingComponentstoaPageUsingHTMLTags
TheJavaEE6Tutorial • January2013 160
DisplayingtheResultsfromSelectionComponents
Ifyoudisplaycomponentsthatallowausertoselectvalues,youmayalsowanttodisplaythe
resultoftheselection.
Forexample,youmightwanttothankauserwhoselectedthecheckboxtojointheDukeFan
Club,asdescribedin “DisplayingaCheckBoxUsingthe h:selectBooleanCheckbox Tag”on
page157.Becausethecheckboxisboundtothe specialOffer propertyof CashierBean ,a
javax.faces.component.UISelectBoolean value,youcancallthe isSelected methodofthe
propertytodeterminewhethertorenderathank-youmessage:
<h:outputText value= "#{bundle.DukeFanClubThanks} "
rendered= "#{cashier.specialOffer.isSelected()} "/>
Similarly,youmightwanttoacknowledgethatausersubscribedtonewslettersusingthe
h:selectManyCheckbox tag,asdescribedin “DisplayingComponentsforSelectingMultiple
Values”onpage158 .Todoso,youcanretrievethevalueofthe newsletters property,the
Stringarraythatholdstheselecteditems:
<h:outputText value= "#{bundle.NewsletterThanks} "
rendered= "#{!empty cashier.newsletters} "/>
<ul>
<ui:repeat value= "#{cashier.newsletters} "var="nli">
<li><h:outputText value= "#{nli} "/></li>
</ui:repeat>
</ul>
Anintroductorythank-youmessageisdisplayedonlyifthe newsletters arrayisnotempty.
Thena ui:repeat tag,asimplewaytoshowvaluesinaloop,displaysthecontentsofthe
selecteditemsinanitemizedlist.(Thistagislistedin Table5–2 .)
UsingData-BoundTableComponents
Data-boundtablecomponentsdisplayrelationaldatainatabularformat.InaJavaServerFacesapplication,the h:dataTable componenttagsupportsbindingtoacollectionofdataobjects
anddisplaysthedataasanHTMLtable.The h:column tagrepresentsacolumnofdatawithin
thetable,iteratingovereachrecordinthedatasource,whichisdisplayedasarow.Hereisanexample:
<h:dataTable id= "items "
captionStyle= "font-weight:bold "
columnClasses= "list-column-center, list-column-left,
list-column-right, list-column-center "
footerClass= "list-footer "
headerClass= "list-header "
rowClasses= "list-row-even, list-row-odd "
styleClass= "list-background "
summary= "#{bundle.ShoppingCart} "AddingComponentstoaPageUsingHTMLTags
Chapter7 • UsingJavaServerFacesTechnologyinWebPages 161
value= "#{cart.items} "
border= "1"
var="item">
<h:column>
<f:facet name= "header ">
<h:outputText value= "#{bundle.ItemQuantity} "/>
</f:facet><h:inputText id= "quantity "
size= "4"
value= "#{item.quantity} "
title= "#{bundle.ItemQuantity} ">
<f:validateLongRange minimum= "1"/>
</h:inputText><h:message for= "quantity "/>
</h:column><h:column>
<f:facet name= "header ">
<h:outputText value= "#{bundle.ItemTitle} "/>
</f:facet><h:commandLink action= "#{showcart.details} ">
<h:outputText value= "#{item.item.title} "/>
</h:commandLink>
</h:column>...<f:facet name= "footer "
<h:panelGroup>
<h:outputText value= "#{bundle.Subtotal} "/>
<h:outputText value= "#{cart.total} "/>
<f:convertNumber currencySymbol= "$"type= "currency "/>
</h:outputText>
</h:panelGroup>
</f:facet><f:facet name= "
caption ">
<h:outputText value= "#{bundle.Caption} "/>
</f:facet>
</h:dataTable>
Theexample h:dataTable tagdisplaysthebooksintheshoppingcart,aswellasthequantityof
eachbookintheshoppingcart,theprices,andasetofbuttonstheusercanclicktoremovebooksfromtheshoppingcart.
Theh:column tagsrepresentcolumnsofdatainadatacomponent.Whilethedatacomponent
isiteratingovertherowsofdata,itprocessesthecolumncomponentassociatedwitheachh:column tagforeachrowinthetable.
Theh:dataTable tagshownintheprecedingcodeexampleiteratesthroughthelistofbooks
(cart.items )intheshoppingcartanddisplaystheirtitles,authors,andprices.Eachtimethe
h:dataTable tagiteratesthroughthelistofbooks,itrendersonecellineachcolumn.
Theh:dataTable andh:column tagsusefacetstorepresentpartsofthetablethatarenot
repeatedorupdated.Thesepartsincludeheaders,footers,andcaptions.
Intheprecedingexample, h:column tagsinclude f:facettagsforrepresentingcolumnheaders
orfooters.The h:column tagallowsyoutocontrolthestylesoftheseheadersandfootersbyAddingComponentstoaPageUsingHTMLTags
TheJavaEE6Tutorial • January2013 162
supportingthe headerClass andfooterClass attributes.Theseattributesaccept
space-separatedlistsofCSSclasses,whichwillbeappliedtotheheaderandfootercellsofthecorrespondingcolumnintherenderedtable.
Facetscanhaveonlyonechild,soan h:panelGroup tagisneededifyouwanttogroupmore
thanonecomponentwithinan f:facet.Becausethefacettagrepresentingthefooterincludes
morethanonetag,the h:panelGroup tagisneededtogroupthosetags.Finally,this
h:dataTable tagincludesan f:facettagwithits nameattributesetto caption,causingatable
captiontoberenderedabovethetable.
Thistableisaclassicusecaseforadatacomponentbecausethenumberofbooksmightnotbe
knowntotheapplicationdeveloperorthepageauthorwhenthatapplicationisdeveloped.Thedatacomponentcandynamicallyadjustthenumberofrowsofthetabletoaccommodatethe
underlyingdata.
Thevalueattributeofan h:dataTable tagreferencesthedatatobeincludedinthetable.This
datacantaketheformofanyofthefollowing:
■Alistofbeans
■Anarrayofbeans
■Asinglebean
■Ajavax.faces.model.DataModel object
■Ajava.sql.ResultSet object
■Ajavax.servlet.jsp.jstl.sql.Result object
■Ajavax.sql.RowSet object
Alldatasourcesfordatacomponentshavea javax.faces.model.DataModel wrapper.Unless
youexplicitlyconstructa DataModel wrapper,theJavaServerFacesimplementationwillcreate
onearounddataofanyoftheotheracceptabletypes.See “WritingBeanProperties”onpage192
formoreinformationonhowtowritepropertiesforusewithadatacomponent.
Thevarattributespecifiesanamethatisusedbythecomponentswithinthe h:dataTable tag
asanaliastothedatareferencedinthe valueattributeof h:dataTable .
Intheexample h:dataTable tag,the valueattributepointstoalistofbooks.The varattribute
pointstoasinglebookinthatlist.Asthe h:dataTable tagiteratesthroughthelist,each
referenceto itempointstothecurrentbookinthelist.
Theh:dataTable tagalsohastheabilitytodisplayonlyasubsetoftheunderlyingdata.This
featureisnotshownintheprecedingexample.Todisplayasubsetofthedata,youusetheoptional firstandrowsattributes.
Thefirstattributespecifiesthefirstrowtobedisplayed.The rowsattributespecifiesthe
numberofrows,startingwiththefirstrow,tobedisplayed.Forexample,ifyouwantedtodisplayrecords2through10oftheunderlyingdata,youwouldset firstto2and rowsto9.
Whenyoudisplayasubsetofthedatainyourpages,youmightwanttoconsiderincludingalinkorbuttonthatcausessubsequentrowstodisplaywhenclicked.Bydefault,both firstand
rowsaresettozero,andthiscausesalltherowsoftheunderlyingdatatodisplay.AddingComponentstoaPageUsingHTMLTags
Chapter7 • UsingJavaServerFacesTechnologyinWebPages 163
Table7–7 showstheoptionalattributesforthe h:dataTable tag.
TABLE7–7 OptionalAttributesfortheh:dataTableTag
Attribute DefinesStylesfor
captionClass Tablecaption
columnClasses Allthecolumns
footerClass Footer
headerClass Header
rowClasses Rows
styleClass Theentiretable
Eachoftheattributesin Table7–7 canspecifymorethanonestyle.If columnClasses or
rowClasses specifiesmorethanonestyle,thestylesareappliedtothecolumnsorrowsinthe
orderthatthestylesarelistedintheattribute.Forexample,if columnClasses specifiesstyles
list-column-center andlist-column-right andifthetablehastwocolumns,thefirst
columnwillhavestyle list-column-center ,andthesecondcolumnwillhavestyle
list-column-right .
Ifthestyleattributespecifiesmorestylesthantherearecolumnsorrows,theremainingstyles
willbeassignedtocolumnsorrowsstartingfromthefirstcolumnorrow.Similarly,ifthestyleattributespecifiesfewerstylesthantherearecolumnsorrows,theremainingcolumnsorrowswillbeassignedstylesstartingfromthefirststyle.
DisplayingErrorMessageswiththeh:messageand
h:messagesTags
Theh:message andh:messages tagsareusedtodisplayerrormessageswhenconversionor
validationfails.The h:message tagdisplayserrormessagesrelatedtoaspecificinput
component,whereasthe h:messages tagdisplaystheerrormessagesfortheentirepage.
Hereisanexample h:message tagfromthe guessnumber application:
<p>
<h:inputText id= "userNo "
title= "Type a number from 0 to 10: "
value= "#{userNumberBean.userNumber} ">
<f:validateLongRange minimum= "#{userNumberBean.minimum} "
maximum= "#{userNumberBean.maximum} "/>
</h:inputText><h:commandButton id= "submit "value= "Submit "
action= "response "/>AddingComponentstoaPageUsingHTMLTags
TheJavaEE6Tutorial • January2013 164
</p>
<h:message showSummary= "true"showDetail= "false "
style= "color: #d20005;
font-family: ’New Century Schoolbook’, serif;font-style: oblique;text-decoration: overline "
id="errors1 "
for="userNo "/>
TheforattributereferstotheIDofthecomponentthatgeneratedtheerrormessage.Theerror
messageisdisplayedatthesamelocationthatthe h:message tagappearsinthepage.Inthis
case,theerrormessagewillappearaftertheSubmitbutton.
Thestyleattributeallowsyoutospecifythestyleofthetextofthemessage.Intheexamplein
thissection,thetextwillbeashadeofred,NewCenturySchoolbook,seriffontfamily,andobliquestyle,andalinewillappearoverthetext.Themessageandmessagestagssupportmanyotherattributesfordefiningstyles.Formoreinformationontheseattributes,refertothedocumentationat
http://docs.oracle.com/javaee/6/javaserverfaces/2.1/docs/
vdldocs/facelets/ .
Anotherattributesupportedbythe h:messages tagisthe layoutattribute.Itsdefaultvalueis
list,whichindicatesthatthemessagesaredisplayedinabulletlistusingtheHTML ulandli
elements.Ifyousettheattributevalueto table,themessageswillberenderedinatableusing
theHTML tableelement.
Theprecedingexampleshowsastandardvalidatorthatisregisteredontheinputcomponent.
Themessagetagdisplaystheerrormessagethatisassociatedwiththisvalidatorwhenthevalidatorcannotvalidatetheinputcomponent’svalue.Ingeneral,whenyouregisteraconverterorvalidatoronacomponent,youarequeueingtheerrormessagesassociatedwiththeconverterorvalidatoronthecomponent.The h:message andh:messages tagsdisplaytheappropriate
errormessagesthatarequeuedonthecomponentwhenthevalidatorsorconvertersregisteredonthatcomponentfailtoconvertorvalidatethecomponent’svalue.
Standarderrormessagesareprovidedwithstandardconvertersandstandardvalidators.An
applicationarchitectcanoverridethesestandardmessagesandsupplyerrormessagesforcustomconvertersandvalidatorsbyregisteringcustomerrormessageswiththeapplication.
CreatingBookmarkableURLswiththeh:buttonand
h:linkTags
TheabilitytocreatebookmarkableURLsreferstotheabilitytogeneratehyperlinksbasedona
specifiednavigationoutcomeandoncomponentparameters.
InHTTP,mostbrowsersbydefaultsendGETrequestsforURLretrievalandPOSTrequestsfor
dataprocessing.TheGETrequestscanhavequeryparametersandcanbecached,whichisnotadvisedforPOSTrequests,whichsenddatatoserversforprocessing.TheotherJavaServerAddingComponentstoaPageUsingHTMLTags
Chapter7 • UsingJavaServerFacesTechnologyinWebPages 165
FacestagscapableofgeneratinghyperlinksuseeithersimpleGETrequests,asinthecaseof
h:outputLink ,orPOSTrequests,asinthecaseof h:commandLink orh:commandButton tags.
GETrequestswithqueryparametersprovidefinergranularitytoURLstrings.TheseURLsarecreatedwithoneormore name=value parametersappendedtothesimpleURLaftera ?
characterandseparatedbyeither &;or&amp;strings.
TocreateabookmarkableURL,usean h:linkorh:button tag.Bothofthesetagscangenerate
ahyperlinkbasedonthe outcomeattributeofthecomponent.Forexample:
<h:link outcome= "somepage "value= "Message "/>
Theh:linktagwillgenerateaURLlinkthatpointstothe somepage.xhtml fileonthesame
server.ThefollowingsampleHTMLisgeneratedfromtheprecedingtag,assumingthattheapplicationnameis simplebookmark :
<a href= "/simplebookmark/faces/somepage.xhtml ">Message</a>
ThisisasimpleGETrequestthatcannotpassanydatafrompagetopage.Tocreatemore
complexGETrequestsandutilizethecompletefunctionalityofthe h:linktag,useview
parameters.
UsingViewParameterstoConfigureBookmarkable
URLs
Topassaparameterfromonepagetoanother,usethe includeViewParams attributeinyour
h:linktagand,inaddition,usean f:paramtagtospecifythenameandvaluetobepassed.Here
theh:linktagspecifiesthe outcomepageas personal.xhtml andprovidesaparameternamed
Resultwhosevalueisamanagedbeanproperty:
<h:body>
<h:form>
<h:graphicImage url= "duke.waving.gif "alt="Duke waving his hand "/>
<h2>Hello, #{hello.name}!</h2><p>I’ve made your
<h:link outcome= "personal "value= "personal greeting page! "
includeViewParams= "true">
<f:param name= "Result "value= "#{hello.name} "/>
</h:link>
</p><h:commandButton id= "back"value= "Back"action= "index "/>
</h:form>
</h:body>
Ifthe includeViewParams attributeissetonthecomponent,theviewparametersareaddedto
thehyperlink.Therefore,theresultingURLwilllooksomethinglikethisifthevalueofhello.name isTimmy:
http://localhost:8080/bookmarks/faces/personal.xhtml?Result=TimmyAddingComponentstoaPageUsingHTMLTags
TheJavaEE6Tutorial • January2013 166
Onthe outcomepage,specifythecoretags f:metadata andf:viewparam asthesourceof
parametersforconfiguringtheURLs.Viewparametersaredeclaredaspartof f:metadata fora
page,asshowninthefollowingexample:
<f:metadata>
<f:viewParam name= "Result "value= "#{hello.name} "/>
</f:metadata>
Thisallowsyoutospecifythebeanpropertyvalueonthepage:
<h:outputText value= "Howdy, #{hello.name}! "/>
Asaviewparameter,thenamealsoappearsinthepage’sURL.IfyouedittheURL,youchange
theoutputonthepage.
BecausetheURLcanbetheresultofvariousparametervalues,theorderoftheURLcreation
hasbeenpredefined.Theorderinwhichthevariousparametervaluesarereadisasfollows:
1. Component
2. Navigation-caseparameters3. Viewparameters
ThebookmarksExampleApplication
Thebookmarks exampleapplicationmodifiesthe hello1applicationdescribedin “Web
Modules:The hello1Example”onpage84 touseabookmarkableURLthatusesview
parameters.
Like hello1,theapplicationincludesthe Hello.java managedbean,an index.xhtml page,
anda response.xhtml page.Inaddition,itincludesa personal.xhtml page,towhicha
bookmarkableURLandviewparametersarepassedfromthe response.xhtml page,as
describedin “UsingViewParameterstoConfigureBookmarkableURLs”onpage166 .
Building,Packaging,Deploying,andRunningthebookmarksExample
YoucanuseeitherNetBeansIDEorAnttobuild,package,deploy,andrunthe bookmarks
example.Thesourcecodeforthisexampleisavailableinthetut-install /examples/web/bookmarks/ directory.
▼ToBuild,Package,andDeploythebookmarksExampleUsingNetBeans
IDE
FromtheFilemenu,chooseOpenProject.
IntheOpenProjectdialog,navigateto:
tut-install /examples/web/1
2AddingComponentstoaPageUsingHTMLTags
Chapter7 • UsingJavaServerFacesTechnologyinWebPages 167
Selectthe bookmarks folder.
SelecttheOpenasMainProjectcheckbox.ClickOpenProject.IntheProjectstab,right-clickthe bookmarks projectandselectDeploy.
ThisoptionbuildsanddeploystheexampleapplicationtoyourGlassFishServerinstance.
▼ToBuild,Package,andDeploythebookmarksExampleUsingAnt
Inaterminalwindow,goto:
tut-install /examples/web/bookmarks/
Typethefollowingcommand:
ant
Thiscommandcallsthe defaulttarget,whichbuildsandpackagestheapplicationintoaWAR
file,bookmarks.war ,thatislocatedinthe distdirectory.
MakesurethattheGlassFishServerisstarted.Todeploytheapplication,typethefollowingcommand:
ant deploy
▼ToRunthebookmarksExample
Openawebbrowser.TypethefollowingURLinyourwebbrowser:
http://localhost:8080/bookmarks
Inthetextfield,typeanameandclickSubmit.Ontheresponsepage,moveyourmouseoverthe“personalgreetingpage”linktoviewtheURL
withtheviewparameter,thenclickthelink.
Thepersonal.xhtml pageopens,displayingagreetingtothenameyoutyped.
IntheURLfield,modifytheResultparametervalueandpressEnter.
Thenameinthegreetingchangestowhatyoutyped.3
456
1
2
3
4
1
2
3
4
5AddingComponentstoaPageUsingHTMLTags
TheJavaEE6Tutorial • January2013 168
ResourceRelocationUsingh:outputScriptand
h:outputStylesheetTags
ResourcerelocationreferstotheabilityofaJavaServerFacesapplicationtospecifythelocation
wherearesourcecanberendered.ResourcerelocationcanbedefinedwiththefollowingHTMLtags:
■h:outputScript
■h:outputStylesheet
Thesetagshave nameandtargetattributes,whichcanbeusedtodefinetherenderlocation.For
acompletelistofattributesforthesetags,seethedocumentationat http://docs.oracle.com/
javaee/6/javaserverfaces/2.1/docs/vdldocs/facelets/ .
Forthe h:outputScript tag,the nameandtargetattributesdefinewheretheoutputofa
resourcemayappear.Hereisanexample:
<html xmlns= "http://www.w3.org/1999/xhtml "
xmlns:h= "http://java.sun.com/jsf/html ">
<h:head id= "head">
<title>Resource Relocation</title>
</h:head><h:body id= "body">
<h:form id= "form">
<h:outputScript name= "hello.js "/>
<h:outputStylesheet name= "hello.css "/>
</h:form>
</h:body>
</html>
Sincethe targetattributeisnotdefinedinthetags,thestylesheet hello.css isrenderedinthe
headelementofthepage,andthe hello.js scriptisrenderedinthebodyofthepage.
HereistheHTMLgeneratedbytheprecedingcode:
<html xmlns= "http://www.w3.org/1999/xhtml ">
<head>
<title>Resource Relocation</title><link type= "text/css "rel="stylesheet "
href= "/context-root /faces/javax.faces.resource/hello.css "/>
</head><body>
<form id= "form"name= "form"method= "post"action= "..."enctype= "...">
<script type= "text/javascript "
src="/context-root /faces/javax.faces.resource/hello.js ">
</script>
</form>
</body>
</html>AddingComponentstoaPageUsingHTMLTags
Chapter7 • UsingJavaServerFacesTechnologyinWebPages 169
Ifyousetthe targetattributeforthe h:outputScript tag,theincomingGETrequestprovides
thelocationparameter.Hereisanexample:
<html xmlns= "http://www.w3.org/1999/xhtml "
xmlns:h= "http://java.sun.com/jsf/html ">
<h:head id= "head">
<title>Resource Relocation</title>
</h:head><h:body id= "body">
<h:form id= "form">
<h:outputScript name= "hello.js "target= "#{param.location} "/>
<h:outputStylesheet name= "hello.css "/>
</h:form>
</h:body>
</html>
Inthiscase,iftheincomingrequestdoesnotprovidealocationparameter,thedefaultlocations
willstillapply:Thestylesheetisrenderedinthehead,andthescriptisrenderedinline.However,iftheincomingrequestspecifiesthelocationparameterasthehead,boththestylesheetandthescriptwillberenderedinthe headelement.
TheHTMLgeneratedbytheprecedingcodeisasfollows:
<html xmlns= "http://www.w3.org/1999/xhtml ">
<head>
<title>Resource Relocation</title><link type= "text/css "rel="stylesheet "
href= "/context-root /faces/javax.faces.resource/hello.css "/>
<script type= "text/javascript "
src="/context-root /faces/javax.faces.resource/hello.js ">
</script>
</head><body>
<form id= "form"name= "form"method= "post"action= "..."enctype= "...">
</form>
</body>
</html>
Similarly,iftheincomingrequestprovidesthelocationparameterasthebody,thescriptwillbe
renderedinthebodyelement.
Theprecedingsectiondescribessimpleusesforresourcerelocation.Thatfeaturecanaddeven
morefunctionalityforthecomponentsandpages.Apageauthordoesnothavetoknowthelocationofaresourceoritsplacement.
Byusinga @ResourceDependency annotationforthecomponents,componentauthorscan
definetheresourcesforthecomponent,suchasastylesheetandscript.Thisallowsthepageauthorsfreedomfromdefiningresourcelocations.AddingComponentstoaPageUsingHTMLTags
TheJavaEE6Tutorial • January2013 170
UsingCoreTags
ThetagsincludedintheJavaServerFacescoretaglibraryareusedtoperformcoreactionsthat
arenotperformedbyHTMLtags.
Table7–8 liststheeventhandlingcoretags.
TABLE7–8 EventHandlingCoreTags
Tag Function
f:actionListener Addsanactionlistenertoaparentcomponent
f:phaseListener Addsa PhaseListener toapage
f:setPropertyActionListener Registersaspecialactionlistenerwhosesolepurpose
istopushavalueintoamanagedbeanwhenaformissubmitted
f:valueChangeListener Addsavalue-changelistenertoaparentcomponent
Table7–9 liststhedataconversioncoretags.
TABLE7–9 DataConversionCoreTags
Tag Function
f:converter Addsanarbitraryconvertertotheparentcomponent
f:convertDateTime Addsa DateTimeConverter instancetotheparent
component
f:convertNumber Addsa NumberConverter instancetotheparent
component
Table7–10 liststhefacetcoretags.
TABLE7–10 FacetCoreTags
Tag Function
f:facet Addsanestedcomponentthathasaspecial
relationshiptoitsenclosingtag
f:metadata Registersa facetonaparentcomponent
Table7–11 liststhecoretagsthatrepresentitemsinalist.UsingCoreTags
Chapter7 • UsingJavaServerFacesTechnologyinWebPages 171
TABLE7–11 CoreTagsthatRepresentItemsinaList
Tag Function
f:selectItem Representsoneiteminalistofitems
f:selectItems Representsasetofitems
Table7–12 liststhevalidatorcoretags.
TABLE7–12 ValidatorCoreTags
Tag Function
f:validateDoubleRange Addsa DoubleRangeValidator toacomponent
f:validateLength Addsa LengthValidator toacomponent
f:validateLongRange Addsa LongRangeValidator toacomponent
f:validator Addsacustomvalidatortoacomponent
f:validateRegEx Addsa RegExValidator toacomponent
f:validateBean Delegatesthevalidationofalocalvaluetoa
BeanValidator
f:validateRequired Enforcesthepresenceofavalueinacomponent
Table7–13 liststhecoretagsthatfallintoothercategories.
TABLE7–13 MiscellaneousCoreTags
TagCategory Tag Function
Attributeconfiguration f:attribute Addsconfigurableattributestoa
parentcomponent
Localization f:loadBundle Specifiesa ResourceBundle thatis
exposedasa Map
Parametersubstitution f:param Substitutesparametersintoa
MessageFormat instanceandadds
querystringname-valuepairstoaURL
Ajax f:ajax AssociatesanAjaxactionwitha
singlecomponentoragroupofcomponentsbasedonplacementUsingCoreTags
TheJavaEE6Tutorial • January2013 172
TABLE7–13 MiscellaneousCoreTags (Continued)
TagCategory Tag Function
Event f:event Allowsinstallinga
ComponentSystemEventListeneronacomponent
Thesetags,whichareusedinconjunctionwithcomponenttags,areexplainedinothersections
ofthistutorial. Table7–14 liststhesectionsthatexplainhowtousespecificcoretags.
TABLE7–14 WheretheCoreTagsAreExplained
Tags WhereExplained
Eventhandlingtags “RegisteringListenersonComponents”onpage180
Dataconversiontags “UsingtheStandardConverters”onpage175
f:facet “UsingData-BoundTableComponents”onpage161 and“LayingOutComponents
withthe h:panelGrid andh:panelGroup Tags”onpage154
f:loadBundle “SettingtheResourceBundle”onpage357
f:metadata “UsingViewParameterstoConfigureBookmarkableURLs”onpage166
f:param “DisplayingaFormattedMessagewiththe h:outputFormat Tag”onpage151
f:selectItem and
f:selectItems“Usingthe f:selectItem andf:selectItems Tags”onpage159
Validatortags “UsingtheStandardValidators”onpage183
f:ajax Chapter11,“UsingAjaxwithJavaServerFacesTechnology”UsingCoreTags
Chapter7 • UsingJavaServerFacesTechnologyinWebPages 173
174
UsingConverters,Listeners,andValidators
Thepreviouschapterdescribedcomponentsandexplainedhowtoaddthemtoawebpage.
Thischapterprovidesinformationonaddingmorefunctionalitytothecomponentsthroughconverters,listeners,andvalidators.
■Convertersareusedtoconvertdatathatisreceivedfromtheinputcomponents.
■Listenersareusedtolistentotheeventshappeninginthepageandperformactionsasdefined.
■Validatorsareusedtovalidatethedatathatisreceivedfromtheinputcomponents.
Thefollowingtopicsareaddressedhere:
■“UsingtheStandardConverters”onpage175
■“RegisteringListenersonComponents”onpage180
■“UsingtheStandardValidators”onpage183
■“ReferencingaManagedBeanMethod”onpage186
UsingtheStandardConverters
TheJavaServerFacesimplementationprovidesasetof Converter implementationsthatyou
canusetoconvertcomponentdata.Formoreinformationontheconceptualdetailsoftheconversionmodel,see
“ConversionModel”onpage220 .Thestandard Converter
implementations,locatedinthe javax.faces.convert package,areasfollows:
■BigDecimalConverter
■BigIntegerConverter
■BooleanConverter
■ByteConverter
■CharacterConverter
■DateTimeConverter
■DoubleConverter
■EnumConverter8CHAPTER 8
175
■FloatConverter
■IntegerConverter
■LongConverter
■NumberConverter
■ShortConverter
Astandarderrormessageisassociatedwitheachoftheseconverters.Ifyouhaveregisteredone
oftheseconvertersontoacomponentonyourpage,andtheconverterisnotabletoconvertthecomponent’svalue,theconverter’serrormessagewilldisplayonthepage.Forexample,thefollowingerrormessageappearsif BigIntegerConverter failstoconvertavalue:
{0} must be a number consisting of one or more digits
Inthiscase,the {0}substitutionparameterwillbereplacedwiththenameoftheinput
componentonwhichtheconverterisregistered.
Twoofthestandardconverters( DateTimeConverter andNumberConverter )havetheirown
tags,whichallowyoutoconfiguretheformatofthecomponentdatausingthetagattributes.Formoreinformationaboutusing DateTimeConverter ,see
“Using DateTimeConverter ”on
page177.Formoreinformationaboutusing NumberConverter ,see“Using NumberConverter ”
onpage179 .Thefollowingsectionexplainshowtoconvertacomponent’svalue,includinghow
toregisterotherstandardconverterswithacomponent.
ConvertingaComponent’sValue
Touseaparticularconvertertoconvertacomponent’svalue,youneedtoregistertheconverterontothecomponent.Youcanregisteranyofthestandardconvertersinoneofthefollowingways:
■Nestoneofthestandardconvertertagsinsidethecomponent’stag.ThesetagsareconvertDateTime andconvertNumber ,whicharedescribedin
“Using DateTimeConverter ”
onpage177 and“Using NumberConverter ”onpage179 ,respectively.
■Bindthevalueofthecomponenttoamanagedbeanpropertyofthesametypeasthe
converter.
■Refertotheconverterfromthecomponenttag’s converter attribute.
■Nesta converter taginsideofthecomponenttag,anduseeitherthe converter tag’s
converterId attributeorits bindingattributetorefertotheconverter.
Asanexampleofthesecondtechnique,ifyouwantacomponent’sdatatobeconvertedtoan
Integer,youcansimplybindthecomponent’svaluetoamanagedbeanproperty.Hereisan
example:
Integer age = 0;
public Integer getAge(){ return age;}public void setAge(Integer age) {this.age = age;}UsingtheStandardConverters
TheJavaEE6Tutorial • January2013 176
Ifthecomponentisnotboundtoabeanproperty,youcanusethethirdtechniquebyusingthe
converter attributedirectlyonthecomponenttag:
<h:inputText
converter= "javax.faces.convert.IntegerConverter "/>
Thisexampleshowsthe converter attributereferringtothefullyqualifiedclassnameofthe
converter.The converter attributecanalsotaketheIDofthecomponent.
Thedatafromthe inputText taginthethisexamplewillbeconvertedtoa java.lang.Integer
value.The Integertypeisasupportedtypeof NumberConverter .Ifyoudon’tneedtospecify
anyformattinginstructionsusingthe convertNumber tagattributes,andifoneofthestandard
converterswillsuffice,youcansimplyreferencethatconverterbyusingthecomponenttag’sconverter attribute.
Finally,youcannesta converter tagwithinthecomponenttaganduseeithertheconverter
tag’s converterId attributeorits bindingattributetoreferencetheconverter.
TheconverterId attributemustreferencetheconverter’sID.Hereisanexample:
<h:inputText value= "#{loginBean.age} "/>
<f:converter converterId= "Integer "/>
</h:inputText>
Insteadofusingthe converterId attribute,the converter tagcanusethe bindingattribute.
Thebindingattributemustresolvetoabeanpropertythatacceptsandreturnsanappropriate
Converter instance.
Using DateTimeConverter
Youcanconvertacomponent’sdatatoa java.util.Date bynestingthe convertDateTime tag
insidethecomponenttag.The convertDateTime taghasseveralattributesthatallowyouto
specifytheformatandtypeofthedata. Table8–1 liststheattributes.
Hereisasimpleexampleofa convertDateTime tag:
<h:outputText value= "#{cashier.shipDate} ">
<f:convertDateTime type= "date"dateStyle= "full"/>
</h:outputText>
Whenbindingthe DateTimeConverter toacomponent,ensurethatthemanagedbean
propertytowhichthecomponentisboundisoftype java.util.Date .Inthepreceding
example, cashier.shipDate mustbeoftype java.util.Date .
Theexampletagcandisplaythefollowingoutput:
Saturday, September 25, 2011UsingtheStandardConverters
Chapter8 • UsingConverters,Listeners,andValidators 177
Youcanalsodisplaythesamedateandtimebyusingthefollowingtagwherethedateformatis
specified:
<h:outputText value= "#{cashier.shipDate} ">
<f:convertDateTime
pattern= "EEEEEEEE, MMM dd, yyyy "/>
</h:outputText>
IfyouwanttodisplaytheexampledateinSpanish,youcanusethe localeattribute:
<h:outputText value= "#{cashier.shipDate} ">
<f:convertDateTime dateStyle= "full"
locale= "es"
timeStyle= "long"type= "both"/>
</h:outputText>
Thistagwoulddisplaythefollowingoutput:
jueves 27 de octubre de 2011 15:07:04 GMT
Refertothe“CustomizingFormats”lessonofthe JavaTutorial athttp://docs.oracle.com/
javase/tutorial/i18n/format/simpleDateFormat.html formoreinformationonhowto
formattheoutputusingthe patternattributeofthe convertDateTime tag.
TABLE8–1 AttributesfortheconvertDateTimeTag
Attribute Type Description
binding DateTimeConverter Usedtobindaconvertertoamanagedbeanproperty.
dateStyle String Definestheformat,asspecifiedby java.text.DateFormat ,ofadate
orthedatepartofa datestring.Appliedonlyif typeisdateorboth
andif patternisnotdefined.Validvalues: default,short,medium,
long,and full.Ifnovalueisspecified, defaultisused.
for String Usedwithcompositecomponents.Referstooneoftheobjectswithin
thecompositecomponentinsidewhichthistagisnested.
locale String orLocale Locale whosepredefinedstylesfordatesandtimesareusedduring
formattingorparsing.Ifnotspecified,the Localereturnedby
javax.faces.context.FacesContext.getLocale willbeused.
pattern String Customformattingpatternthatdetermineshowthedate/timestring
shouldbeformattedandparsed.Ifthisattributeisspecified,dateStyle ,timeStyle ,and typeattributesareignored.
timeStyle String Definestheformat,asspecifiedby java.text.DateFormat ,ofa time
orthetimepartofa datestring.Appliedonlyif typeistimeand
patternisnotdefined.Validvalues: default,short,medium,long,
andfull.Ifnovalueisspecified, defaultisused.UsingtheStandardConverters
TheJavaEE6Tutorial • January2013 178
TABLE8–1 AttributesfortheconvertDateTimeTag (Continued)
Attribute Type Description
timeZone String orTimeZone Timezoneinwhichtointerpretanytimeinformationinthe date
string.
type String Specifieswhetherthestringvaluewillcontainadate,atime,orboth.
Validvaluesare date,time,orboth.Ifnovalueisspecified, dateis
used.
Using NumberConverter
Youcanconvertacomponent’sdatatoa java.lang.Number bynestingthe convertNumber tag
insidethecomponenttag.The convertNumber taghasseveralattributesthatallowyouto
specifytheformatandtypeofthedata. Table8–2 liststheattributes.
Thefollowingexampleusesa convertNumber tagtodisplaythetotalpricesofthecontentsofa
shoppingcart:
<h:outputText value= "#{cart.total} ">
<f:convertNumber currencySymbol= "$"type= "currency "/>
</h:outputText>
Whenbindingthe NumberConverter toacomponent,ensurethatthemanagedbeanproperty
towhichthecomponentisboundisofaprimitivetypeorhasatypeof java.lang.Number .In
theprecedingexample, cart.total isoftype double.
Hereisanexampleofanumberthatthistagcandisplay:
$934
Thisresultcanalsobedisplayedbyusingthefollowingtag,wherethecurrencypatternis
specified:
<h:outputText id= "cartTotal "
value= "#{cart.Total} ">
<f:convertNumber pattern= "$#### "/>
</h:outputText>
Seethe“CustomizingFormats”lessonofthe JavaTutorial athttp://docs.oracle.com/
javase/tutorial/i18n/format/decimalFormat.html formoreinformationonhowto
formattheoutputbyusingthe patternattributeofthe convertNumber tag.
TABLE8–2 AttributesfortheconvertNumberTag
Attribute Type Description
binding NumberConverter Usedtobindaconvertertoamanagedbeanproperty.UsingtheStandardConverters
Chapter8 • UsingConverters,Listeners,andValidators 179
TABLE8–2 AttributesfortheconvertNumberTag (Continued)
Attribute Type Description
currencyCode String ISO4217currencycode,usedonlywhenformatting
currencies.
currencySymbol String Currencysymbol,appliedonlywhenformattingcurrencies.
for String Usedwithcompositecomponents.Referstooneofthe
objectswithinthecompositecomponentinsidewhichthistagisnested.
groupingUsed Boolean Specifieswhetherformattedoutputcontainsgrouping
separators.
integerOnly Boolean Specifieswhetheronlytheintegerpartofthevaluewillbe
parsed.
locale String orLocale Locale whosenumberstylesareusedtoformatorparsedata.
maxFractionDigits int Maximumnumberofdigitsformattedinthefractionalpart
oftheoutput.
maxIntegerDigits int Maximumnumberofdigitsformattedintheintegerpartof
theoutput.
minFractionDigits int Minimumnumberofdigitsformattedinthefractionalpart
oftheoutput.
minIntegerDigits int Minimumnumberofdigitsformattedintheintegerpartof
theoutput.
pattern String Customformattingpatternthatdetermineshowthenumber
stringisformattedandparsed.
type String Specifieswhetherthestringvalueisparsedandformattedas
anumber,currency ,orpercentage .Ifnotspecified, number
isused.
RegisteringListenersonComponents
Anapplicationdevelopercanimplementlistenersasclassesorasmanagedbeanmethods.Ifa
listenerisamanagedbeanmethod,thepageauthorreferencesthemethodfromeitherthecomponent’s valueChangeListener attributeorits actionListener attribute.Ifthelisteneris
aclass,thepageauthorcanreferencethelistenerfromeitheran f:valueChangeListener tagor
anf:actionListener tagandnestthetaginsidethecomponenttagtoregisterthelisteneron
thecomponent.RegisteringListenersonComponents
TheJavaEE6Tutorial • January2013 180
“ReferencingaMethodThatHandlesanActionEvent”onpage187 and“ReferencingaMethod
ThatHandlesaValue-ChangeEvent”onpage188 explainhowapageauthorusesthe
valueChangeListener andactionListener attributestoreferencemanagedbeanmethods
thathandleevents.
Thissectionexplainshowtoregistera NameChanged value-changelisteneranda BookChange
actionlistenerimplementationoncomponents.TheDuke’sBookstorecasestudyincludesbothoftheselisteners.
RegisteringaValue-ChangeListeneronaComponent
Apageauthorcanregistera ValueChangeListener implementationonacomponentthat
implements EditableValueHolder bynestingan f:valueChangeListener tagwithinthe
component’stagonthepage.The f:valueChangeListener tagsupportstheattributesshown
inTable8–3 ,oneofwhichmustbeused.
TABLE8–3 Attributesforthef:valueChangeListenerTag
Attribute Description
type Referencesthefullyqualifiedclassnameofa ValueChangeListener implementation.
Canacceptaliteraloravalueexpression.
binding Referencesanobjectthatimplements ValueChangeListener .Canacceptonlyavalue
expression,whichmustpointtoamanagedbeanpropertythatacceptsandreturnsaValueChangeListener implementation.
Thefollowingexampleshowsavalue-changelistenerregisteredonacomponent:
<h:inputText id= "name"
size= "30"
value= "#{cashier.name} "
required= "true"
requiredMessage= "#{bundle.ReqCustomerName} ">
<f:valueChangeListener
type= "dukesbookstore.listeners.NameChanged "/>
</h:inputText>
Intheexample,thecoretag typeattributespecifiesthecustom NameChanged listenerasthe
javax.faces.event.ValueChangeListener implementationregisteredonthe name
component.
Afterthiscomponenttagisprocessedandlocalvalueshavebeenvalidated,itscorresponding
componentinstancewillqueuethe javax.faces.event.ValueChangeEvent associatedwith
thespecified ValueChangeListener tothecomponent.RegisteringListenersonComponents
Chapter8 • UsingConverters,Listeners,andValidators 181
Thebindingattributeisusedtobinda ValueChangeListener implementationtoamanaged
beanproperty.Thisattributeworksinasimilarwaytothe bindingattributesupportedbythe
standardconvertertags.See “BindingComponentValuesandInstancestoManagedBean
Properties”onpage288 formoreinformation.
RegisteringanActionListeneronaComponent
Apageauthorcanregisteran javax.faces.event.ActionListener implementationona
commandcomponentbynestingan f:actionListener tagwithinthecomponent’stagonthe
page.Similarlytothe f:valueChangeListener tag,the f:actionListener tagsupportsboth
thetypeandbindingattributes.Oneoftheseattributesmustbeusedtoreferencetheaction
listener.
Hereisanexampleofan h:commandLink tagthatreferencesan ActionListener
implementation:
<h:commandLink id= "Duke"action= "bookstore ">
<f:actionListener
type= "dukesbookstore.listeners.LinkBookChangeListener "/>
<h:outputText value= "#{bundle.Book201} "/>
</h:commandLink>
Thetypeattributeofthe f:actionListener tagspecifiesthefullyqualifiedclassnameofthe
ActionListener implementation.Similarlytothe f:valueChangeListener tag,the
f:actionListener tagalsosupportsthe bindingattribute.See “BindingConverters,Listeners,
andValidatorstoManagedBeanProperties”onpage293 formoreinformationaboutbinding
listenerstomanagedbeanproperties.
Inadditiontothe actionListener tagthatallowsyouregisteracustomlistenerontoa
component,thecoretaglibraryincludesthe f:setPropertyActionListener tag.Youusethis
tagtoregisteraspecialactionlistenerontothe ActionSource instanceassociatedwitha
component.Whenthecomponentisactivated,thelistenerwillstoretheobjectreferencedbythetag’s valueattributeintotheobjectreferencedbythetag’s targetattribute.
Thebookcatalog.xhtml pageoftheDuke’sBookstoreapplicationuses
f:setPropertyActionListener withtwocomponents:the h:commandLink componentusedto
linktothe bookdetails.xhtml pageandthe h:commandButton componentusedtoaddabook
tothecart:
<h:dataTable id= "books "
value= "#{bookRequestBean.books} "
var="book"
headerClass= "list-header "
styleClass= "list-background "
rowClasses= "list-row-even, list-row-odd "
border= "1"
summary= "#{bundle.BookCatalog} ">RegisteringListenersonComponents
TheJavaEE6Tutorial • January2013 182
...
<h:column>
<f:facet name= "header ">
<h:outputText value= "#{bundle.ItemTitle} "/>
</f:facet><h:commandLink action= "#{catalog.details} "
value= "#{book.title} ">
<f:setPropertyActionListener target= "#{requestScope.book} "
value= "#{book} "/>
</h:commandLink>
</h:column>...<h:column>
<f:facet name= "header ">
<h:outputText value= "#{bundle.CartAdd} "/>
</f:facet><h:commandButton id= "add"
action= "#{catalog.add} "
value= "#{bundle.CartAdd} ">
<f:setPropertyActionListener target= "#{requestScope.book} "
value= "#{book} "/>
</h:commandButton>
</h:column>
Theh:commandLink andh:commandButton tagsarewithinan h:dataTable tag,whichiterates
overthelistofbooks.The varattributereferstoasinglebookinthelistofbooks.
Theobjectreferencedbythe varattributeofan h:dataTable tagisinpagescope.However,in
thiscase,youneedtoputthisobjectintorequestscopesothatwhentheuseractivatesthecommandLink componenttogoto bookdetails.xhtml oractivatesthe commandButton
componenttogoto bookcatalog.xhtml ,thebookdataisavailabletothosepages.Therefore,
thef:setPropertyActionListener tagisusedtosetthecurrentbookobjectintorequestscope
whenthe commandLink orcommandButton componentisactivated.
Intheprecedingexample,the f:setPropertyActionListener tag’s valueattributereferences
thebookobject.The f:setPropertyActionListener tag’s targetattributereferencesthevalue
expression requestScope.book ,whichiswherethe bookobjectreferencedbythe value
attributeisstoredwhenthe commandLink orthe commandButton componentisactivated.
UsingtheStandardValidators
JavaServerFacestechnologyprovidesasetofstandardclassesandassociatedtagsthatpage
authorsandapplicationdeveloperscanusetovalidateacomponent’sdata. Table8–4 listsallthe
standard javax.faces.validator classesandthetagsthatallowyoutousethevalidatorsfrom
thepage.UsingtheStandardValidators
Chapter8 • UsingConverters,Listeners,andValidators 183
TABLE8–4 TheValidatorClasses
ValidatorClass Tag Function
BeanValidator validateBean Registersabeanvalidatorforthecomponent.
DoubleRangeValidator validateDoubleRange Checkswhetherthelocalvalueofa
componentiswithinacertainrange.Thevaluemustbefloating-pointorconvertibletofloating-point.
LengthValidator validateLength Checkswhetherthelengthofacomponent’s
localvalueiswithinacertainrange.Thevaluemustbea java.lang.String .
LongRangeValidator validateLongRange Checkswhetherthelocalvalueofa
componentiswithinacertainrange.Thevaluemustbeanynumerictypeor String
thatcanbeconvertedtoa long.
RegexValidator validateRegEx Checkswhetherthelocalvalueofa
componentisamatchagainstaregularexpressionfromthe java.util.regex
package.
RequiredValidator validateRequired Ensuresthatthelocalvalueisnotemptyonan
javax.faces.component.EditableValueHoldercomponent.
Allthesevalidatorclassesimplementthe javax.faces.validator.Validator interface.
Componentwritersandapplicationdeveloperscanalsoimplementthisinterfacetodefinetheirownsetofconstraintsforacomponent’svalue.
Similartothestandardconverters,eachofthesevalidatorshasoneormorestandarderror
messagesassociatedwithit.Ifyouhaveregisteredoneofthesevalidatorsontoacomponentonyourpage,andthevalidatorisunabletovalidatethecomponent’svalue,thevalidator’serrormessagewilldisplayonthepage.Forexample,theerrormessagethatdisplayswhenthecomponent’svalueexceedsthemaximumvalueallowedby LongRangeValidator isasfollows:
{1}: Validation Error: Value is greater than allowable maximum of "{0}"
Inthiscase,the {1}substitutionparameterisreplacedbythecomponent’slabelor id,andthe
{0}substitutionparameterisreplacedwiththemaximumvalueallowedbythevalidator.
See“DisplayingErrorMessageswiththe h:message andh:messages Tags”onpage164 for
informationonhowtodisplayvalidationerrormessagesonthepagewhenvalidationfails.
Insteadofusingthestandardvalidators,youcanuseBeanValidationtovalidatedata.See
“UsingBeanValidation”onpage204 formoreinformation.UsingtheStandardValidators
TheJavaEE6Tutorial • January2013 184
ValidatingaComponent’sValue
Tovalidateacomponent’svalueusingaparticularvalidator,youneedtoregisterthatvalidator
onthecomponent.Youcandothisinoneofthefollowingways:
■Nestthevalidator’scorrespondingtag(shownin Table8–4 )insidethecomponent’stag.
“Using LongRangeValidator ”onpage185 explainshowtousethe validateLongRange tag.
Youcanusetheotherstandardtagsinthesameway.
■Refertoamethodthatperformsthevalidationfromthecomponenttag’s validator
attribute.
■Nestavalidatortaginsidethecomponenttag,anduseeitherthevalidatortag’s validatorId
attributeorits bindingattributetorefertothevalidator.
See“ReferencingaMethodThatPerformsValidation”onpage187 formoreinformationon
usingthe validator attribute.
ThevalidatorId attributeworkssimilarlytothe converterId attributeofthe converter tag,
asdescribedin “ConvertingaComponent’sValue”onpage176 .
Keepinmindthatvalidationcanbeperformedonlyoncomponentsthatimplement
EditableValueHolder ,becausethesecomponentsacceptvaluesthatcanbevalidated.
Using LongRangeValidator
Thefollowingexampleshowshowtousethe validateLongRange validatoronaninput
componentnamed quantity :
<h:inputText id= "quantity "size= "4"
value= "#{item.quantity} ">
<f:validateLongRange minimum= "1"/>
</h:inputText><h:message for= "quantity "/>
Thistagrequirestheusertoenteranumberthatisatleast1.The validateLongRange tagalso
hasa maximumattribute,whichsetsamaximumvaluefortheinput.
TheattributesofallthestandardvalidatortagsacceptELvalueexpressions.Thismeansthatthe
attributescanreferencemanagedbeanpropertiesratherthanspecifyliteralvalues.Forexample,the validateLongRange tagintheprecedingexamplecanreferencemanagedbean
propertiescalled minimumandmaximumtogettheminimumandmaximumvaluesacceptableto
thevalidatorimplementation,asshowninthissnippetfromthe guessnumber example:
<h:inputText
id="userNo "
title= "Type a number from 0 to 10: "
value= "#{userNumberBean.userNumber} ">UsingtheStandardValidators
Chapter8 • UsingConverters,Listeners,andValidators 185
<f:validateLongRange
minimum= "#{userNumberBean.minimum} "
maximum= "#{userNumberBean.maximum} "/>
</h:inputText>
ReferencingaManagedBeanMethod
Acomponenttaghasasetofattributesforreferencingmanagedbeanmethodsthatcan
performcertainfunctionsforthecomponentassociatedwiththetag.Theseattributesaresummarizedin
Table8–5 .
TABLE8–5 ComponentTagAttributesThatReferenceManagedBeanMethods
Attribute Function
action Referstoamanagedbeanmethodthatperformsnavigationprocessingforthe
componentandreturnsalogicaloutcome String
actionListener Referstoamanagedbeanmethodthathandlesactionevents
validator Referstoamanagedbeanmethodthatperformsvalidationonthecomponent’s
value
valueChangeListener Referstoamanagedbeanmethodthathandlesvalue-changeevents
Onlycomponentsthatimplement javax.faces.component.ActionSource canusethe action
andactionListener attributes.Onlycomponentsthatimplement
javax.faces.component.EditableValueHolder canusethe validator or
valueChangeListener attributes.
Thecomponenttagreferstoamanagedbeanmethodusingamethodexpressionasavalueof
oneoftheattributes.Themethodreferencedbyanattributemustfollowaparticularsignature,whichisdefinedbythetagattribute’sdefinitioninthedocumentationat
http://docs.oracle.com/javaee/6/javaserverfaces/2.1/docs/vdldocs/facelets/ .For
example,thedefinitionofthe validator attributeofthe inputText tagisthefollowing:
void validate(javax.faces.context.FacesContext,
javax.faces.component.UIComponent, java.lang.Object)
Thefollowingsectionsgiveexamplesofhowtousetheattributes.ReferencingaManagedBeanMethod
TheJavaEE6Tutorial • January2013 186
ReferencingaMethodThatPerformsNavigation
Ifyourpageincludesacomponent,suchasabuttonorahyperlink,thatcausestheapplication
tonavigatetoanotherpagewhenthecomponentisactivated,thetagcorrespondingtothiscomponentmustincludean actionattribute.Thisattributedoesoneofthefollowing:
■Specifiesalogicaloutcome Stringthattellstheapplicationwhichpagetoaccessnext
■Referencesamanagedbeanmethodthatperformssomeprocessingandreturnsalogical
outcome String
Thefollowingexampleshowshowtoreferenceanavigationmethod:
<h:commandButton
value= "#{bundle.Submit} "
action= "#{cashier.submit} "/>
See“WritingaMethodtoHandleNavigation”onpage201 forinformationonhowtowritesuch
amethod.
ReferencingaMethodThatHandlesanActionEvent
Ifacomponentonyourpagegeneratesanactionevent,andifthateventishandledbyamanagedbeanmethod,yourefertothemethodbyusingthecomponent’s actionListener
attribute.
Thefollowingexampleshowshowsuchamethodcouldbereferenced:
<h:commandLink id= "Duke"action= "bookstore "
actionListener= "#{actionBean.chooseBookFromLink} ">
TheactionListener attributeofthiscomponenttagreferencesthe chooseBookFromLink
methodusingamethodexpression.The chooseBookFromLink methodhandlestheeventwhen
theuserclicksthehyperlinkrenderedbythiscomponent.See “WritingaMethodtoHandlean
ActionEvent”onpage202 forinformationonhowtowritesuchamethod.
ReferencingaMethodThatPerformsValidation
Iftheinputofoneofthecomponentsonyourpageisvalidatedbyamanagedbeanmethod,refertothemethodfromthecomponent’stagbyusingthe validator attribute.
Thefollowingexamplefrom
“The guessnumber CDIExample”onpage531 showshowto
referenceamethodthatperformsvalidationon inputGuess ,aninputcomponent:
<h:inputText id= "inputGuess "
value= "#{userNumberBean.userNumber} "
required= "true"size= "3"ReferencingaManagedBeanMethod
Chapter8 • UsingConverters,Listeners,andValidators 187
disabled= "#{userNumberBean.number eq userNumberBean.userNumber} "
validator= "#{userNumberBean.validateNumberRange} ">
</h:inputText>
Themanagedbeanmethod validateNumberRange verifiesthattheinputvalueiswithinthe
validrange,whichchangeseachtimeanotherguessismade.See “WritingaMethodtoPerform
Validation”onpage202 forinformationonhowtowritesuchamethod.
ReferencingaMethodThatHandlesaValue-Change
Event
Ifyouwantacomponentonyourpagetogenerateavalue-changeeventandyouwantthat
eventtobehandledbyamanagedbeanmethodinsteadofajavax.faces.event.ValueChangeListener implementation,yourefertothemethodbyusing
thecomponent’s valueChangeListener attribute:
<h:inputText id= "name"
size= "30"
value= "#{cashier.name} "
required= "true"
valueChangeListener= "#{cashier.processValueChange} "/>
</h:inputText>
ThevalueChangeListener attributeofthiscomponenttagreferencesthe
processValueChange methodof CashierBean byusingamethodexpression.The
processValueChange methodhandlestheeventofauserenteringanameintheinputfield
renderedbythiscomponent.
“WritingaMethodtoHandleaValue-ChangeEvent”onpage203 describeshowtoimplementa
methodthathandlesa javax.faces.event.ValueChangeEvent .ReferencingaManagedBeanMethod
TheJavaEE6Tutorial • January2013 188
DevelopingwithJavaServerFacesTechnology
Thischapterprovidesanoverviewofmanagedbeansandexplainshowtowritemethodsand
propertiesofmanagedbeansthatareusedbyaJavaServerFacesapplication.ThischapteralsointroducestheBeanValidationfeature.
Chapter7,“UsingJavaServerFacesTechnologyinWebPages,” andChapter8,“Using
Converters,Listeners,andValidators,” showedhowtoaddcomponentstoapageandconnect
themtoserver-sideobjectsbyusingcomponenttagsandcoretags,aswellashowtoprovideadditionalfunctionalitytothecomponentsthroughconverters,listeners,andvalidators.DevelopingaJavaServerFacesapplicationalsoinvolvesthetaskofprogrammingtheserver-sideobjects:managedbeans,converters,eventhandlers,andvalidators.
Thefollowingtopicsareaddressedhere:
■“ManagedBeansinJavaServerFacesTechnology”onpage189
■“WritingBeanProperties”onpage192
■“WritingManagedBeanMethods”onpage200
■“UsingBeanValidation”onpage204
ManagedBeansinJavaServerFacesTechnology
AtypicalJavaServerFacesapplicationincludesoneormoremanagedbeans,eachofwhichcan
beassociatedwiththecomponentsusedinaparticularpage.Thissectionintroducesthebasicconceptsofcreating,configuring,andusingmanagedbeansinanapplication.9CHAPTER 9
189
CreatingaManagedBean
Amanagedbeaniscreatedwithaconstructorwithnoarguments,asetofproperties,andaset
ofmethodsthatperformfunctionsforacomponent.Eachofthemanagedbeanpropertiescanbeboundtooneofthefollowing:
■Acomponentvalue
■Acomponentinstance
■Aconverterinstance
■Alistenerinstance
■Avalidatorinstance
Themostcommonfunctionsthatmanagedbeanmethodsperformincludethefollowing:
■Validatingacomponent’sdata
■Handlinganeventfiredbyacomponent
■Performingprocessingtodeterminethenextpagetowhichtheapplicationmustnavigate
AswithallJavaBeanscomponents,apropertyconsistsofaprivatedatafieldandasetof
accessormethods,asshownbythiscode:
private Integer userNumber = null;
...public void setUserNumber(Integer user_number) {
userNumber = user_number;
}public Integer getUserNumber() {
return userNumber;
}
Whenboundtoacomponent’svalue,abeanpropertycanbeanyofthebasicprimitiveand
numerictypesoranyJavaobjecttypeforwhichtheapplicationhasaccesstoanappropriateconverter.Forexample,apropertycanbeoftype java.util.Date iftheapplicationhasaccess
toaconverterthatcanconvertthe Datetypetoa Stringandbackagain.See
“WritingBean
Properties”onpage192 forinformationonwhichtypesareacceptedbywhichcomponenttags.
Whenabeanpropertyisboundtoacomponentinstance,theproperty’stypemustbethesame
asthecomponentobject.Forexample,ifa javax.faces.component.UISelectBoolean
componentisboundtotheproperty,thepropertymustacceptandreturna UISelectBoolean
object.Likewise,ifthepropertyisboundtoaconverter,validator,orlistenerinstance,thepropertymustbeoftheappropriateconverter,validator,orlistenertype.
Formoreinformationonwritingbeansandtheirproperties,see
“WritingBeanProperties”on
page192.ManagedBeansinJavaServerFacesTechnology
TheJavaEE6Tutorial • January2013 190
UsingtheELtoReferenceManagedBeans
Tobindcomponentvaluesandobjectstomanagedbeanpropertiesortoreferencemanaged
beanmethodsfromcomponenttags,pageauthorsusetheExpressionLanguagesyntax.Asexplainedin
“OverviewoftheEL”onpage125 ,thefollowingaresomeofthefeaturesthatEL
offers:
■Deferredevaluationofexpressions
■Theabilitytouseavalueexpressiontobothreadandwritedata
■Methodexpressions
DeferredevaluationofexpressionsisimportantbecausetheJavaServerFaceslifecycleissplit
intoseveralphasesinwhichcomponenteventhandling,dataconversionandvalidation,anddatapropagationtoexternalobjectsareallperformedinanorderlyfashion.The
implementationmustbeabletodelaytheevaluationofexpressionsuntiltheproperphaseofthelifecyclehasbeenreached.Therefore,theimplementation’stagattributesalwaysusedeferred-evaluationsyntax,whichisdistinguishedbythe #{}delimiter.
Tostoredatainexternalobjects,almostallJavaServerFacestagattributesuselvalue
expressions,whichareexpressionsthatallowbothgettingandsettingdataonexternalobjects.
Finally,somecomponenttagattributesacceptmethodexpressionsthatreferencemethodsthat
handlecomponenteventsorvalidateorconvertcomponentdata.
ToillustrateaJavaServerFacestagusingtheEL,thefollowingtagreferencesamethodthat
validatesuserinput:
<h:inputText id= "inputGuess "
value= "#{userNumberBean.userNumber} "
required= "true"size= "3"
disabled= "#{userNumberBean.number eq userNumberBean.userNumber} "
validator= "#{userNumberBean.validateNumberRange} ">
</h:inputText>
Thistagbindsthe inputGuess component’svaluetothe UserNumberBean.userNumber
managedbeanpropertybyusinganlvalueexpression.Thetagusesamethodexpressiontorefertothe UserNumberBean.validateNumberRange method,whichperformsvalidationofthe
component’slocalvalue.Thelocalvalueiswhatevertheusertypesintothefieldcorrespondingtothistag.Thismethodisinvokedwhentheexpressionisevaluated.
NearlyallJavaServerFacestagattributesacceptvalueexpressions.Inadditiontoreferencing
beanproperties,valueexpressionscanreferencelists,maps,arrays,implicitobjects,andresourcebundles.
Anotheruseofvalueexpressionsistobindacomponentinstancetoamanagedbeanproperty.
Apageauthordoesthisbyreferencingthepropertyfromthe bindingattribute:
<h:outputLabel for= "fanClub "
rendered= "false "
binding= "#{cashier.specialOfferText} ">ManagedBeansinJavaServerFacesTechnology
Chapter9 • DevelopingwithJavaServerFacesTechnology 191
<h:outputText id= "fanClubLabel "
value= "#{bundle.DukeFanClub} "/>
</h:outputLabel>
Inadditiontousingexpressionswiththestandardcomponenttags,youcanconfigureyour
customcomponentpropertiestoacceptexpressionsbycreating javax.el.ValueExpression
orjavax.el.MethodExpression instancesforthem.
ForinformationontheEL,see Chapter6,“ExpressionLanguage.”
Forinformationonreferencingmanagedbeanmethodsfromcomponenttags,see “Referencing
aManagedBeanMethod”onpage186 .
WritingBeanProperties
Asexplainedin “ManagedBeansinJavaServerFacesTechnology”onpage189 ,amanagedbean
propertycanbeboundtooneofthefollowingitems:
■Acomponentvalue
■Acomponentinstance
■Aconverterimplementation
■Alistenerimplementation
■Avalidatorimplementation
ThesepropertiesfollowtheconventionsofJavaBeanscomponents(alsocalledbeans).Formore
informationonJavaBeanscomponents,seethe JavaBeansTutorial athttp://
docs.oracle.com/javase/tutorial/javabeans/index.html .
Thecomponent’stagbindsthecomponent’svaluetoamanagedbeanpropertybyusingits
valueattributeandbindsthecomponent’sinstancetoamanagedbeanpropertybyusingits
bindingattribute.Likewise,alltheconverter,listener,andvalidatortagsusetheir binding
attributestobindtheirassociatedimplementationstomanagedbeanproperties.See “Binding
ComponentValuesandInstancestoManagedBeanProperties”onpage288 and“Binding
Converters,Listeners,andValidatorstoManagedBeanProperties”onpage293 formore
information.
Tobindacomponent’svaluetoamanagedbeanproperty,thetypeofthepropertymustmatch
thetypeofthecomponent’svaluetowhichitisbound.Forexample,ifamanagedbeanpropertyisboundtoa UISelectBoolean component’svalue,thepropertyshouldacceptandreturna
booleanvalueora Booleanwrapper Objectinstance.
Tobindacomponentinstancetoamanagedbeanproperty,thepropertymustmatchthetype
ofcomponent.Forexample,ifamanagedbeanpropertyisboundtoa UISelectBoolean
instance,thepropertyshouldacceptandreturna UISelectBoolean value.
Similarly,tobindaconverter,listener,orvalidatorimplementationtoamanagedbean
property,thepropertymustacceptandreturnthesametypeofconverter,listener,orvalidatorWritingBeanProperties
TheJavaEE6Tutorial • January2013 192
object.Forexample,ifyouareusingthe convertDateTime tagtobinda
javax.faces.convert.DateTimeConverter toaproperty,thatpropertymustacceptand
returna DateTimeConverter instance.
Therestofthissectionexplainshowtowritepropertiesthatcanbeboundtocomponentvalues,
tocomponentinstancesforthecomponentobjectsdescribedin “AddingComponentstoaPage
UsingHTMLTags”onpage140 ,andtoconverter,listener,andvalidatorimplementations.
WritingPropertiesBoundtoComponentValues
Towriteamanagedbeanpropertythatisboundtoacomponent’svalue,youmustmatchthepropertytypetothecomponent’svalue.
Table9–1 liststhe javax.faces.component classesandtheacceptabletypesoftheirvalues.
TABLE9–1 AcceptableTypesofComponentValues
ComponentClass AcceptableTypesofComponentValues
UIInput,UIOutput ,
UISelectItem ,UISelectOneAnyofthebasicprimitiveandnumerictypesoranyJavaprogramming
languageobjecttypeforwhichanappropriatejavax.faces.convert.Converter implementationisavailable
UIData array ofbeans, Listofbeans,singlebean, java.sql.ResultSet ,
javax.servlet.jsp.jstl.sql.Result ,javax.sql.RowSet
UISelectBoolean boolean orBoolean
UISelectItems java.lang.String ,Collection ,Array,Map
UISelectMany array orList,thoughelementsofthe arrayorListcanbeanyofthe
standardtypes
Whentheybindcomponentstopropertiesbyusingthe valueattributesofthecomponenttags,
pageauthorsneedtoensurethatthecorrespondingpropertiesmatchthetypesofthecomponents’values.
UIInputandUIOutput Properties
TheUIInputandUIOutput componentclassesarerepresentedbythecomponenttagsthat
beginwith h:inputandh:output ,respectively(forexample, h:inputText andh:outputText ).
Inthefollowingexample,an h:inputText tagbindsthe namecomponenttothe nameproperty
ofamanagedbeancalled CashierBean .
<h:inputText id= "name"
size= "30"WritingBeanProperties
Chapter9 • DevelopingwithJavaServerFacesTechnology 193
value= "#{cashier.name} "
...>
</h:inputText>
Thefollowingcodesnippetfromthemanagedbean CashierBean showsthebeanpropertytype
boundbytheprecedingcomponenttag:
private String name = null;
public void setName(String name) {
this.name = name;
}public String getName() {
return this.name;
}
Asdescribedin “UsingtheStandardConverters”onpage175 ,toconvertthevalueofaninput
oroutputcomponent,youcaneitherapplyaconverterorcreatethebeanpropertyboundtothecomponentwiththematchingtype.Hereistheexampletag,from
“Using DateTimeConverter ”
onpage177 ,thatdisplaysthedatewhenitemswillbeshipped.
<h:outputText value= "#{cashier.shipDate} ">
<f:convertDateTime type= "date"dateStyle= "full"/>
</h:outputText>
Thebeanpropertyrepresentedbythistagmusthaveatypeof java.util.Date .Thefollowing
codesnippetshowsthe shipDate property,fromthemanagedbean CashierBean ,thatisbound
bythetag’svalueintheprecedingexample:
private Date shipDate;
public Date getShipDate() {
return this.shipDate;
}public void setShipDate(Date shipDate) {
this.shipDate = shipDate;
}
UIDataProperties
TheUIDatacomponentclassisrepresentedbythe h:dataTable componenttag.
UIDatacomponentsmustbeboundtooneofthemanagedbeanpropertytypeslistedin
Table9–1 .Datacomponentsarediscussedin “UsingData-BoundTableComponents”on
page161.Hereispartofthestarttagof dataTable fromthatsection:
<h:dataTable id= "items "
...value= "#{cart.items} "
...var="item">
Thevalueexpressionpointstothe itemspropertyofashoppingcartbeannamed cart.The
cartbeanmaintainsamapof ShoppingCartItem beans.WritingBeanProperties
TheJavaEE6Tutorial • January2013 194
ThegetItems methodfromthe cartbeanpopulatesa Listwith ShoppingCartItem instances
thataresavedinthe itemsmapwhenthecustomeraddsbookstothecart,asshowninthe
followingcodesegment:
public synchronized List<ShoppingCartItem> getItems() {
List<ShoppingCartItem> results = new ArrayList<ShoppingCartItem>();results.addAll(this.items.values());return results;
}
Allthecomponentscontainedinthe UIDatacomponentareboundtothepropertiesofthe cart
beanthatisboundtotheentire UIDatacomponent.Forexample,hereisthe h:outputText tag
thatdisplaysthebooktitleinthetable:
<h:commandLink action= "#{showcart.details} ">
<h:outputText value= "#{item.item.title} "/>
</h:commandLink>
Thetitleisactuallyahyperlinktothe bookdetails.xhtml page.The h:outputText tagusesthe
valueexpression #{item.item.title} tobindits UIOutput componenttothe titleproperty
ofthe Bookentity.Thefirstitemintheexpressionisthe ShoppingCartItem instancethatthe
h:dataTable tagisreferencingwhilerenderingthecurrentrow.Theseconditeminexpression
referstothe itempropertyof ShoppingCartItem ,whichreturnsan Object(inthiscase,a Book.
Thetitlepartoftheexpressionreferstothe titlepropertyof Book.Thevalueofthe
UIOutput componentcorrespondingtothistagisboundtothe titlepropertyofthe Book
entity:
private String title;
...public String getTitle() {
return title;
}
public void setTitle(String title) {
this.title = title;
}
UISelectBoolean Properties
TheUISelectBoolean componentclassisrepresentedbythecomponenttag
h:selectBooleanCheckbox .
Managedbeanpropertiesthatholda UISelectBoolean component’sdatamustbeof boolean
orBooleantype.Theexample selectBooleanCheckbox tagfromthesection “Displaying
ComponentsforSelectingOneValue”onpage156 bindsacomponenttoaproperty.The
followingexampleshowsatagthatbindsacomponentvaluetoa booleanproperty:
<h:selectBooleanCheckbox title= "#{bundle.receiveEmails} "
value= "#{custFormBean.receiveEmails} ">
</h:selectBooleanCheckbox><h:outputText value= "#{bundle.receiveEmails} ">WritingBeanProperties
Chapter9 • DevelopingwithJavaServerFacesTechnology 195
Hereisanexamplepropertythatcanbeboundtothecomponentrepresentedbytheexample
tag:
private boolean receiveEmails = false;
...
public void setReceiveEmails(boolean receiveEmails) {
this.receiveEmails = receiveEmails;
}public boolean getReceiveEmails() {
return receiveEmails;
}
UISelectMany Properties
TheUISelectMany componentclassisrepresentedbythecomponenttagsthatbeginwith
h:selectMany (forexample, h:selectManyRadio andh:selectManyListbox ).
Becausea UISelectMany componentallowsausertoselectoneormoreitemsfromalistof
items,thiscomponentmustmaptoabeanpropertyoftype Listorarray.Thisbeanproperty
representsthesetofcurrentlyselecteditemsfromthelistofavailableitems.
Thefollowingexampleofthe selectManyCheckbox tagcomesfrom “DisplayingComponents
forSelectingMultipleValues”onpage158 :
<h:selectManyCheckbox id= "newslettercheckbox "
layout= "pageDirection "
value= "#{cashier.newsletters} ">
<f:selectItems value= "#{cashier.newsletterItems} "/>
</h:selectManyCheckbox>
Hereisthebeanpropertythatmapstothe valueofthe selectManyCheckbox tagfromthe
precedingexample:
private String newsletters[] = new String[0];
public void setNewsletters(String newsletters[]) {
this.newsletters = newsletters;
}public String[] getNewsletters() {
return this.newsletters;
}
TheUISelectItem andUISelectItems componentsareusedtorepresentallthevaluesina
UISelectMany component.See “UISelectItem Properties”onpage197 and“UISelectItems
Properties”onpage198 forinformationonwritingthebeanpropertiesforthe UISelectItem
andUISelectItems components.
UISelectOne Properties
TheUISelectOne componentclassisrepresentedbythecomponenttagsthatbeginwith
h:selectOne (forexample, h:selectOneRadio andh:selectOneListbox ).WritingBeanProperties
TheJavaEE6Tutorial • January2013 196
UISelectOne propertiesacceptthesametypesas UIInputandUIOutput properties,becausea
UISelectOne componentrepresentsthesingleselecteditemfromasetofitems.Thisitemcan
beanyoftheprimitivetypesandanythingelseforwhichyoucanapplyaconverter.
Hereisanexampleofthe h:selectOneMenu tagfrom“DisplayingaMenuUsingthe
h:selectOneMenu Tag”onpage157 :
<h:selectOneMenu id= "shippingOption "
required= "true"
value= "#{cashier.shippingOption} ">
<f:selectItem itemValue= "2"
itemLabel= "#{bundle.QuickShip} "/>
<f:selectItem itemValue= "5"
itemLabel= "#{bundle.NormalShip} "/>
<f:selectItem itemValue= "7"
itemLabel= "#{bundle.SaverShip} "/>
</h:selectOneMenu>
Hereisthebeanpropertycorrespondingtothistag:
private String shippingOption = "2";
public void setShippingOption(String shippingOption) {
this.shippingOption = shippingOption;
}public String getShippingOption() {
return this.shippingOption;
}
Notethat shippingOption representsthecurrentlyselecteditemfromthelistofitemsinthe
UISelectOne component.
TheUISelectItem andUISelectItems componentsareusedtorepresentallthevaluesina
UISelectOne component.Thisisexplainedinthesection “DisplayingaMenuUsingthe
h:selectOneMenu Tag”onpage157 .
Forinformationonhowtowritethemanagedbeanpropertiesforthe UISelectItem and
UISelectItems components,see “UISelectItem Properties”onpage197 and“UISelectItems
Properties”onpage198 .
UISelectItem Properties
AUISelectItem componentrepresentsasinglevalueinasetofvaluesina UISelectMany ora
UISelectOne component.A UISelectItem componentmustbeboundtoamanagedbean
propertyoftype javax.faces.model.SelectItem .ASelectItem objectiscomposedofan
Objectrepresentingthevalue,alongwithtwo Stringvaluesrepresentingthelabeland
descriptionofthe UISelectItem object.
Theexample selectOneMenu tagfrom“UISelectOne Properties”onpage196 contains
selectItem tagsthatsetthevaluesofthelistofitemsinthepage.Hereisanexampleofabean
propertythatcansetthevaluesforthislistinthebean:WritingBeanProperties
Chapter9 • DevelopingwithJavaServerFacesTechnology 197
SelectItem itemOne = null;
SelectItem getItemOne(){
return itemOne;
}void setItemOne(SelectItem item) {
itemOne = item;
}
UISelectItems Properties
UISelectItems componentsarechildrenof UISelectMany andUISelectOne components.
Each UISelectItems componentiscomposedofasetofeither UISelectItem instancesorany
collectionofobjects,suchasanarray,alist,orevenPOJOs.
Thefollowingcodesnippetfrom CashierBean showshowtowritethepropertiesfor
selectItems tagscontaining SelectItem instances.
private String[] newsletters = new String[0];
...private static SelectItem[] newsletterItems = {
new SelectItem( "Duke’s Quarterly "),
new SelectItem( "Innovator’s Almanac "),
new SelectItem( "Duke’s Diet and Exercise Journal "),
new SelectItem( "Random Ramblings ")
};...public void setNewsletters(String[] newsletters) {
this.newsletters = newsletters;
}
public String[] getNewsletters() {
return this.newsletters;
}
public SelectItem[] getNewsletterItems() {
return newsletterItems;
}
Here,the newsletters propertyrepresentsthe SelectItems object,whilethe
newsletterItems propertyrepresentsastaticarrayof SelectItem objects.The SelectItem
classhasseveralconstructors;inthisexample,theargumentisan Objectthatrepresentsboth
thevalueoftheitemandthelabelthatappearsinthe UISelectMany componentonthepage.
WritingPropertiesBoundtoComponentInstances
Apropertyboundtoacomponentinstancereturnsandacceptsacomponentinstancerather
thanacomponentvalue.Thefollowingcomponentsbindacomponentinstancetoamanagedbeanproperty:
<h:selectBooleanCheckbox id= "fanClub "
rendered= "false "
binding= "#{cashier.specialOffer} "/>WritingBeanProperties
TheJavaEE6Tutorial • January2013 198
<h:outputLabel for= "fanClub "
rendered= "false "
binding= "#{cashier.specialOfferText} "
value= "#{bundle.DukeFanClub} "/>
TheselectBooleanCheckbox tagrendersacheckboxandbindsthe fanClub UISelectBoolean
componenttothe specialOffer propertyof CashierBean .The outputLabel tagbindsthe
valueofthe valueattribute,whichrepresentsthecheckbox’slabel,tothe specialOfferText
propertyof CashierBean .Iftheuserordersmorethan$100worthofbooksandclicksthe
Submitbutton,the submitmethodof CashierBean setsbothcomponents’ rendered properties
totrue,causingthecheckboxandlabeltodisplaywhenthepageisrerendered.
Becausethecomponentscorrespondingtotheexampletagsareboundtothemanagedbean
properties,thesepropertiesmustmatchthecomponents’types.ThismeansthatthespecialOfferText propertymustbeoftype UIOutput ,andthe specialOffer propertymust
beoftype UISelectBoolean :
UIOutput specialOfferText = null;
public UIOutput getSpecialOfferText() {
return this.specialOfferText;
}public void setSpecialOfferText(UIOutput specialOfferText) {
this.specialOfferText = specialOfferText;
}
UISelectBoolean specialOffer = null;public UISelectBoolean getSpecialOffer() {
return this.specialOffer;
}public void setSpecialOffer(UISelectBoolean specialOffer) {
this.specialOffer = specialOffer;
}
Formoregeneralinformationoncomponentbinding,see “ManagedBeansinJavaServerFaces
Technology”onpage189 .
Forinformationonhowtoreferenceamanagedbeanmethodthatperformsnavigationwhena
buttonisclicked,see “ReferencingaMethodThatPerformsNavigation”onpage187 .
Formoreinformationonwritingmanagedbeanmethodsthathandlenavigation,see “Writing
aMethodtoHandleNavigation”onpage201 .
WritingPropertiesBoundtoConverters,Listeners,or
Validators
Allthestandardconverter,listener,andvalidatortagsincludedwithJavaServerFaces
technologysupportbindingattributesthatallowyoutobindconverter,listener,orvalidatorimplementationstomanagedbeanproperties.WritingBeanProperties
Chapter9 • DevelopingwithJavaServerFacesTechnology 199
Thefollowingexampleshowsastandard convertDateTime tagusingavalueexpressionwithits
bindingattributetobindthe javax.faces.convert.DateTimeConverter instancetothe
convertDate propertyof LoginBean :
<h:inputText value= "#{LoginBean.birthDate} ">
<f:convertDateTime binding= "#{LoginBean.convertDate} "/>
</h:inputText>
TheconvertDate propertymustthereforeacceptandreturna DateTimeConverter object,as
shownhere:
private DateTimeConverter convertDate;
public DateTimeConverter getConvertDate() {
...
return convertDate;
}public void setConvertDate(DateTimeConverter convertDate) {
convertDate.setPattern( "EEEEEEEE, MMM dd, yyyy ");
this.convertDate = convertDate;
}
Becausetheconverterisboundtoamanagedbeanproperty,themanagedbeanpropertycan
modifytheattributesoftheconverteroraddnewfunctionalitytoit.Inthecaseoftheprecedingexample,thepropertysetsthedatepatternthattheconverterusestoparsetheuser’sinputintoaDateobject.
Themanagedbeanpropertiesthatareboundtovalidatororlistenerimplementationsare
writteninthesamewayandhavethesamegeneralpurpose.
WritingManagedBeanMethods
Methodsofamanagedbeancanperformseveralapplication-specificfunctionsforcomponentsonthepage.Thesefunctionsinclude
■Performingprocessingassociatedwithnavigation
■Handlingactionevents
■Performingvalidationonthecomponent’svalue
■Handlingvalue-changeevents
Byusingamanagedbeantoperformthesefunctions,youeliminatetheneedtoimplementthe
javax.faces.validator.Validator interfacetohandlethevalidationoroneofthelistener
interfacestohandleevents.Also,byusingamanagedbeaninsteadofa Validator
implementationtoperformvalidation,youeliminatetheneedtocreateacustomtagfortheValidator implementation.
Ingeneral,itisgoodpracticetoincludethesemethodsinthesamemanagedbeanthatdefines
thepropertiesforthecomponentsreferencingthesemethods.Thereasonfordoingsoisthatthemethodsmightneedtoaccessthecomponent’sdatatodeterminehowtohandletheeventortoperformthevalidationassociatedwiththecomponent.WritingManagedBeanMethods
TheJavaEE6Tutorial • January2013 200
Thefollowingsectionsexplainhowtowritevarioustypesofmanagedbeanmethods.
WritingaMethodtoHandleNavigation
Anactionmethod ,amanagedbeanmethodthathandlesnavigationprocessing,mustbea
publicmethodthattakesnoparametersandreturnsan Object,whichisthelogicaloutcome
thatthenavigationsystemusestodeterminethepagetodisplaynext.Thismethodisreferencedusingthecomponenttag’s actionattribute.
Thefollowingactionmethodisfromthemanagedbean CashierBean ,whichisinvokedwhena
userclickstheSubmitbuttononthepage.Iftheuserhasorderedmorethan$100worthofbooks,thismethodsetsthe rendered propertiesofthe fanClubandspecialOffer components
totrue,causingthemtobedisplayedonthepagethenexttimethatpageisrendered.
Aftersettingthecomponents’ rendered propertiesto true,thismethodreturnsthelogical
outcome null.ThiscausestheJavaServerFacesimplementationtorerenderthepagewithout
creatinganewviewofthepage,retainingthecustomer’sinput.Ifthismethodweretoreturnpurchase ,whichisthelogicaloutcometousetoadvancetoapaymentpage,thepagewould
rerenderwithoutretainingthecustomer’sinput.Inthiscase,youwanttorerenderthepagewithoutclearingthedata.
Iftheuserdoesnotpurchasemorethan$100worthofbooks,orifthe thankYou componenthas
alreadybeenrendered,themethodreturns bookreceipt .TheJavaServerFacesimplementation
loadsthe bookreceipt.xhtml pageafterthismethodreturns:
public String submit() {
...if ((cart.getTotal() > 100.00) && !specialOffer.isRendered()) {
specialOfferText.setRendered(true);specialOffer.setRendered(true);return null;
} else if (specialOffer.isRendered() && !thankYou.isRendered()) {
thankYou.setRendered(true);return null;
} else {
...cart.clear();return ( "bookreceipt ");
}
}
Typically,anactionmethodwillreturna Stringoutcome,asshowninthepreviousexample.
Alternatively,youcandefinean Enumclassthatencapsulatesallpossibleoutcomestringsand
thenmakeanactionmethodreturnan enumconstant,whichrepresentsaparticular String
outcomedefinedbythe Enumclass.
Thefollowingexampleusesan Enumclasstoencapsulatealllogicaloutcomes:WritingManagedBeanMethods
Chapter9 • DevelopingwithJavaServerFacesTechnology 201
public enum Navigation {
main, accountHist, accountList, atm, atmAck, transferFunds,
transferAck, error
}
Whenitreturnsanoutcome,anactionmethodusesthedotnotationtoreferencetheoutcome
fromthe Enumclass:
public Object submit(){
...return Navigation.accountHist;
}
Thesection “ReferencingaMethodThatPerformsNavigation”onpage187 explainshowa
componenttagreferencesthismethod.Thesection “WritingPropertiesBoundtoComponent
Instances”onpage198 explainshowtowritethebeanpropertiestowhichthecomponentsare
bound.
WritingaMethodtoHandleanActionEvent
Amanagedbeanmethodthathandlesanactioneventmustbeapublicmethodthatacceptsanactioneventandreturns void.Thismethodisreferencedusingthecomponenttag’s
actionListener attribute.Onlycomponentsthatimplement
javax.faces.component.ActionSource canrefertothismethod.
Inthefollowingexample,amethodfromamanagedbeannamed ActionBean processesthe
eventofauserclickingoneofthehyperlinksonthepage:
public void chooseBookFromLink(ActionEvent event) {
String current = event.getComponent().getId();FacesContext context = FacesContext.getCurrentInstance();String bookId = books.get(current);context.getExternalContext().getSessionMap().put( "bookId ", bookId);
}
Thismethodgetsthecomponentthatgeneratedtheeventfromtheeventobject;thenitgetsthe
component’sID,whichisacodeforthebook.Themethodmatchesthecodeagainsta HashMap
objectthatcontainsthebookcodesandcorrespondingbookIDvalues.Finally,themethodsetsthebookIDbyusingtheselectedvaluefromthe HashMapobject.
“ReferencingaMethodThatHandlesanActionEvent”onpage187 explainshowacomponent
tagreferencesthismethod.
WritingaMethodtoPerformValidation
Insteadofimplementingthe javax.faces.validator.Validator interfacetoperform
validationforacomponent,youcanincludeamethodinamanagedbeantotakecareofvalidatinginputforthecomponent.AmanagedbeanmethodthatperformsvalidationmustWritingManagedBeanMethods
TheJavaEE6Tutorial • January2013 202
accepta javax.faces.context.FacesContext ,thecomponentwhosedatamustbevalidated,
andthedatatobevalidated,justasthe validate methodofthe Validator interfacedoes.A
componentreferstothemanagedbeanmethodbyusingits validator attribute.Onlyvaluesof
UIInputcomponentsorvaluesofcomponentsthatextend UIInputcanbevalidated.
Hereisanexampleofamanagedbeanmethodthatvalidatesuserinput,from “The
guessnumber CDIExample”onpage531 :
public void validateNumberRange(FacesContext context,
UIComponent toValidate,Object value) {
if (remainingGuesses <= 0) {
FacesMessage message = new FacesMessage( "No guesses left! ");
context.addMessage(toValidate.getClientId(context), message);((UIInput) toValidate).setValid(false);return;
}int input = (Integer) value;
if (input < minimum || input > maximum) {
((UIInput) toValidate).setValid(false);
FacesMessage message = new FacesMessage( "Invalid guess ");
context.addMessage(toValidate.getClientId(context), message);
}
}
ThevalidateNumberRange methodperformstwodifferentvalidations:
1. Iftheuserhasrunoutofguesses,themethodsetsthe validpropertyofthe UIInput
componentto false.Thenitqueuesamessageontothe FacesContext instance,associating
themessagewiththecomponentID,andreturns.
2. Iftheuserhassomeremainingguesses,themethodthenretrievesthelocalvalueofthe
component.Iftheinputvalueisoutsidetheallowablerange,themethodagainsetsthevalidpropertyofthe UIInputcomponentto false,queuesadifferentmessageonthe
FacesContext instance,andreturns.
See
“ReferencingaMethodThatPerformsValidation”onpage187 forinformationonhowa
componenttagreferencesthismethod.
WritingaMethodtoHandleaValue-ChangeEvent
Amanagedbeanthathandlesavalue-changeeventmustuseapublicmethodthatacceptsavalue-changeeventandreturns void.Thismethodisreferencedusingthecomponent’s
valueChangeListener attribute.Thissectionexplainshowtowriteamanagedbeanmethodto
replacethe javax.faces.event.ValueChangeListener implementation.
Thefollowingexampletagcomesfrom
“RegisteringaValue-ChangeListenerona
Component”onpage181 ,wherethe h:inputText tagwiththe idofnamehasa
ValueChangeListener instanceregisteredonit.This ValueChangeListener instancehandlesWritingManagedBeanMethods
Chapter9 • DevelopingwithJavaServerFacesTechnology 203
theeventofenteringavalueinthefieldcorrespondingtothecomponent.Whentheuserenters
avalue,avalue-changeeventisgenerated,andthe processValueChange(ValueChangeEvent)
methodofthe ValueChangeListener classisinvoked:
<h:inputText id= "name"
size= "30"
value= "#{cashier.name} "
required= "true"
requiredMessage= "#{bundle.ReqCustomerName} ">
<f:valueChangeListener
type= "dukesbookstore.listeners.NameChanged "/>
</h:inputText>
Insteadofimplementing ValueChangeListener ,youcanwriteamanagedbeanmethodto
handlethisevent.Todothis,youmovethe processValueChange(ValueChangeEvent) method
fromthe ValueChangeListener class,called NameChanged ,toyourmanagedbean.
Hereisthemanagedbeanmethodthatprocessestheeventofenteringavalueinthe namefield
onthepage:
public void processValueChange(ValueChangeEvent event)
throws AbortProcessingException {
if (null != event.getNewValue()) {
FacesContext.getCurrentInstance().getExternalContext().
getSessionMap().put( "name", event.getNewValue());
}
}
Tomakethismethodhandlethe javax.faces.event.ValueChangeEvent generatedbyan
inputcomponent,referencethismethodfromthecomponenttag’s valueChangeListener
attribute.See “ReferencingaMethodThatHandlesaValue-ChangeEvent”onpage188 for
moreinformation.
UsingBeanValidation
Validatinginputreceivedfromtheusertomaintaindataintegrityisanimportantpartofapplicationlogic.Validationofdatacantakeplaceatdifferentlayersineventhesimplestofapplications,asshownin
“DevelopingaSimpleFaceletsApplication”onpage113 .The
guessnumber exampleapplicationvalidatestheuserinput(inthe h:inputText tag)for
numericaldataatthepresentationlayerandforavalidrangeofnumbersatthebusinesslayer.
JavaBeansValidation(BeanValidation)isanewvalidationmodelavailableaspartofJavaEE6
platform.TheBeanValidationmodelissupportedbyconstraintsintheformofannotationsplacedonafield,method,orclassofaJavaBeanscomponent,suchasamanagedbean.
Constraintscanbebuiltinoruserdefined.User-definedconstraintsarecalledcustom
constraints.Severalbuilt-inconstraintsareavailableinthe javax.validation.constraints
package.
Table9–2 listsallthebuilt-inconstraints.UsingBeanValidation
TheJavaEE6Tutorial • January2013 204
TABLE9–2 Built-InBeanValidationConstraints
Constraint Description Example
@AssertFalse Thevalueofthefieldorproperty
mustbefalse.@AssertFalse
boolean isUnsupported;
@AssertTrue Thevalueofthefieldorproperty
mustbetrue.@AssertTrue
boolean isActive;
@DecimalMax Thevalueofthefieldorproperty
mustbeadecimalvaluelowerthanorequaltothenumberinthevalueelement.@DecimalMax( "30.00 ")
BigDecimal discount;
@DecimalMin Thevalueofthefieldorproperty
mustbeadecimalvaluegreaterthanorequaltothenumberinthevalueelement.@DecimalMin( "5.00")
BigDecimal discount;
@Digits Thevalueofthefieldorproperty
mustbeanumberwithinaspecifiedrange.The integer
elementspecifiesthemaximumintegraldigitsforthenumber,andthe fraction element
specifiesthemaximumfractionaldigitsforthenumber.@Digits(integer=6, fraction=2)
BigDecimal price;
@Future Thevalueofthefieldorproperty
mustbeadateinthefuture.@Future
Date eventDate;
@Max Thevalueofthefieldorproperty
mustbeanintegervaluelowerthanorequaltothenumberinthevalueelement.@Max(10)
int quantity;
@Min Thevalueofthefieldorproperty
mustbeanintegervaluegreaterthanorequaltothenumberinthevalueelement.@Min(5)
int quantity;
@NotNull Thevalueofthefieldorproperty
mustnotbenull.@NotNull
String username;
@Null Thevalueofthefieldorproperty
mustbenull.@Null
String unusedString;
@Past Thevalueofthefieldorproperty
mustbeadateinthepast.@Past
Date birthday;UsingBeanValidation
Chapter9 • DevelopingwithJavaServerFacesTechnology 205
TABLE9–2 Built-InBeanValidationConstraints (Continued)
Constraint Description Example
@Pattern Thevalueofthefieldorproperty
mustmatchtheregularexpressiondefinedinthe regexp
element.@Pattern(regexp= "\\(\\d{3}\\)\\d{3}-\\d{4} ")
String phoneNumber;
@Size Thesizeofthefieldorpropertyis
evaluatedandmustmatchthespecifiedboundaries.Ifthefieldorpropertyisa String,thesize
ofthestringisevaluated.Ifthefieldorpropertyisa Collection ,
thesizeofthe Collection is
evaluated.IfthefieldorpropertyisaMap,thesizeofthe Mapis
evaluated.Ifthefieldorpropertyisanarray,thesizeofthearrayisevaluated.Useoneoftheoptional maxorminelementsto
specifytheboundaries.@Size(min=2, max=240)
String briefMessage;
Inthefollowingexample,aconstraintisplacedonafieldusingthebuilt-in @NotNull
constraint:
public class Name {
@NotNullprivate String firstname;
@NotNull
private String lastname;
}
YoucanalsoplacemorethanoneconstraintonasingleJavaBeanscomponentobject.For
example,youcanplaceanadditionalconstraintforsizeoffieldonthe firstname andthe
lastname fields:
public class Name {
@NotNull@Size(min=1, max=16)private String firstname;
@NotNull
@Size(min=1, max=16)private String lastname;
}
Thefollowingexampleshowsamethodwithauser-definedconstraintthatchecksfora
predefinedemailaddresspatternsuchasacorporateemailaccount:UsingBeanValidation
TheJavaEE6Tutorial • January2013 206
@ValidEmail
public String getEmailAddress() {
return emailAddress;
}
Forabuilt-inconstraint,adefaultimplementationisavailable.Auser-definedorcustom
constraintneedsavalidationimplementation.Intheaboveexample,the @ValidEmail custom
constraintneedsanimplementationclass.
Anyvalidationfailuresaregracefullyhandledandcanbedisplayedbythe h:messages tag.
AnymanagedbeanthatcontainsBeanValidationannotationsautomaticallygetsvalidation
constraintsplacedonthefieldsonaJavaServerFacesapplication’swebpages.
See“ValidatingPersistentFieldsandProperties”onpage583 formoreinformationonusing
validationconstraints.
ValidatingNullandEmptyStrings
TheJavaprogramminglanguagedistinguishesbetweennullandemptystrings.Anemptystringisastringinstanceofzerolength,whereasanullstringhasnovalueatall.
Anemptystringisrepresentedas "".Itisacharactersequenceofzerocharacters.Anullstringis
representedby null.Itcanbedescribedastheabsenceofastringinstance.
ManagedbeanelementsrepresentedasaJavaServerFacestextcomponentsuchas inputText
areinitializedwiththevalueoftheemptystringbytheJavaServerFacesimplementation.Validatingthesestringscanbeanissuewhenuserinputforsuchfieldsisnotrequired.Considerthefollowingexample,wherethestring testString isabeanvariablethatwillbesetusing
inputtypedbytheuser.Inthiscase,theuserinputforthefieldisnotrequired.
if (testString==null) {
doSomething();
} else {
doAnotherThing();
}
Bydefault,the doAnotherThing methodiscalledevenwhentheuserentersnodata,becausethe
testString elementhasbeeninitializedwiththevalueofanemptystring.
InorderfortheBeanValidationmodeltoworkasintended,youmustsetthecontextparameter
javax.faces.INTERPRET_EMPTY_STRING_SUBMITTED_VALUES_AS_NULL totrueintheweb
deploymentdescriptorfile, web.xml:
<context-param>
<param-name>
javax.faces.INTERPRET_EMPTY_STRING_SUBMITTED_VALUES_AS_NULL
</param-name><param-value>true</param-value>
</context-param>UsingBeanValidation
Chapter9 • DevelopingwithJavaServerFacesTechnology 207
ThisparameterenablestheJavaServerFacesimplementationtotreatemptystringsasnull.
Suppose,ontheotherhand,thatyouhavea @NotNull constraintonanelement,meaningthat
inputisrequired.Inthiscase,anemptystringwillpassthisvalidationconstraint.However,ifyousetthecontextparameterjavax.faces.INTERPRET_EMPTY_STRING_SUBMITTED_VALUES_AS_NULL totrue,thevalueofthe
managedbeanattributeispassedtotheBeanValidationruntimeasanullvalue,causingthe@NotNull constrainttofail.UsingBeanValidation
TheJavaEE6Tutorial • January2013 208
JavaServerFacesTechnology:Advanced
Concepts
PreviouschaptershaveintroducedJavaServerFacestechnologyandFacelets,thepreferred
presentationlayerfortheJavaEEplatform.ThischapterdescribestheJavaServerFaceslifecycleindetail.SomeofthecomplexJavaServerFacesapplicationsusethewell-definedlifecyclephasestocustomizeapplicationbehavior.
Thefollowingchaptersintroduceadditionaladvancedconceptsinthisarea:
■Chapter11,“UsingAjaxwithJavaServerFacesTechnology,” introducesAjaxconceptsand
theuseofAjaxinJavaServerFacesapplications.
■Chapter12,“CompositeComponents:AdvancedTopicsandExample,” introduces
advancedfeaturesofcompositecomponents.
■Chapter13,“CreatingCustomUIComponentsandOtherCustomObjects,” describesthe
processofcreatingnewcomponents,renderers,converters,listeners,andvalidatorsfromscratch.
■Chapter14,“ConfiguringJavaServerFacesApplications,” introducestheprocessofcreating
anddeployingJavaServerFacesapplications,theuseofvariousconfigurationfiles,andthedeploymentstructure.
Thefollowingtopicsareaddressedhere:
■“TheLifecycleofaJavaServerFacesApplication”onpage210
■“PartialProcessingandPartialRendering”onpage216
■“TheLifecycleofaFaceletsApplication”onpage216
■“UserInterfaceComponentModel”onpage21710CHAPTER 10
209
TheLifecycleofaJavaServerFacesApplication
Thelifecycleofanapplicationreferstothevariousstagesofprocessingofthatapplication,from
itsinitiationtoitsconclusion.Allapplicationshavelifecycles.Duringawebapplicationlifecycle,commontaskssuchasthefollowingareperformed:
■Handlingincomingrequests
■Decodingparameters
■Modifyingandsavingstate
■Renderingwebpagestothebrowser
TheJavaServerFaceswebapplicationframeworkmanageslifecyclephasesautomaticallyfor
simpleapplicationsorallowsyoutomanagethemmanuallyformorecomplexapplicationsasrequired.
JavaServerFacesapplicationsthatuseadvancedfeaturesmayrequireinteractionwiththe
lifecycleatcertainphases.Forexample,Ajaxapplicationsusepartialprocessingfeaturesofthelifecycle.Aclearerunderstandingofthelifecyclephasesiskeytocreatingwell-designedcomponents.
AsimplifiedviewoftheJavaServerfaceslifecycle,consistingofthetwomainphasesofa
JavaServerFaceswebapplication,isintroducedin
“TheLifecycleofthe helloApplication”on
page108.ThissectionexaminestheJavaServerFaceslifecycleinmoredetail.
OverviewoftheJavaServerFacesLifecycle
ThelifecycleofaJavaServerFacesapplicationbeginswhentheclientmakesanHTTPrequestforapageandendswhentheserverrespondswiththepage,translatedtoHTML.
Thelifecyclecanbedividedintotwomainphases, executeandrender.Theexecutephaseis
furtherdividedintosubphasestosupportthesophisticatedcomponenttree.Thisstructurerequiresthatcomponentdatabeconvertedandvalidated,componenteventsbehandled,andcomponentdatabepropagatedtobeansinanorderlyfashion.
AJavaServerFacespageisrepresentedbyatreeofcomponents,calleda view.Duringthe
lifecycle,theJavaServerFacesimplementationmustbuildtheviewwhileconsideringthestatesavedfromaprevioussubmissionofthepage.Whentheclientrequestsapage,theJavaServerFacesimplementationperformsseveraltasks,suchasvalidatingthedatainputofcomponentsintheviewandconvertinginputdatatotypesspecifiedontheserverside.
TheJavaServerFacesimplementationperformsallthesetasksasaseriesofstepsinthe
JavaServerFacesrequest-responselifecycle.
Figure10–1 illustratesthesesteps.TheLifecycleofaJavaServerFacesApplication
TheJavaEE6Tutorial • January2013 210
FIGURE10–1 JavaServerFacesStandardRequest-ResponseLifecycle
Restore 
View
Apply 
Requests
Process 
Events
Process 
Validations
Process 
EventsFaces
Request
Render 
ResponseProcess 
EventsInvoke 
ApplicationProcess 
EventsUpdate 
Model 
Values
Faces
ResponseResponse
CompleteResponse
Complete
Response
CompleteResponse
CompleteValidation/
Conversion Errors/
Render Response
Conversion Errors/
Render ResponseRender
ResponseTheLifecycleofaJavaServerFacesApplication
Chapter10 • JavaServerFacesTechnology:AdvancedConcepts 211
Therequest-responselifecyclehandlestwokindsofrequests:initialrequestsandpostbacks.An
initialrequest occurswhenausermakesarequestforapageforthefirsttime.A postback
requestoccurswhenausersubmitstheformcontainedonapagethatwaspreviouslyloaded
intothebrowserasaresultofexecutinganinitialrequest.
Whenthelifecyclehandlesaninitialrequest,itexecutesonlytheRestoreViewandRender
Responsephases,becausethereisnouserinputoractiontoprocess.Conversely,whenthelifecyclehandlesapostback,itexecutesallofthephases.
Usually,thefirstrequestforaJavaServerFacespagecomesinfromaclient,asaresultof
clickingalinkorbuttoncomponentonaJavaServerFacespage.TorenderaresponsethatisanotherJavaServerFacespage,theapplicationcreatesanewviewandstoresitinthejavax.faces.context.FacesContext instance,whichrepresentsalloftheinformation
associatedwithprocessinganincomingrequestandcreatingaresponse.Theapplicationthenacquiresobjectreferencesneededbytheviewandcallsthe FacesContext.renderResponse
method,whichforcesimmediaterenderingoftheviewbyskippingtotheRenderResponsephaseofthelifecycle,asisshownbythearrowslabelledRenderResponseinthediagram.
Sometimes,anapplicationmightneedtoredirecttoadifferentwebapplicationresource,such
asawebservice,orgeneratearesponsethatdoesnotcontainJavaServerFacescomponents.Inthesesituations,thedevelopermustskiptheRenderResponsephasebycallingtheFacesContext.responseComplete method.Thissituationisalsoshowninthediagram,with
thearrowslabelledResponseComplete.
ThemostcommonsituationisthataJavaServerFacescomponentsubmitsarequestforanother
JavaServerFacespage.Inthiscase,theJavaServerFacesimplementationhandlestherequestandautomaticallygoesthroughthephasesinthelifecycletoperformanynecessaryconversions,validations,andmodelupdates,andtogeneratetheresponse.
Thereisoneexceptiontothelifecycledescribedinthissection.Whenacomponent's
immediate attributeissetto true,thevalidation,conversion,andeventsassociatedwiththese
componentsareprocessedduringtheApplyRequestValuesphaseratherthaninalaterphase.
Thedetailsofthelifecycleexplainedinthefollowingsectionsareprimarilyintendedfor
developerswhoneedtoknowinformationsuchaswhenvalidations,conversions,andeventsareusuallyhandledandwaystochangehowandwhentheyarehandled.Formoreinformationoneachofthelifecyclephases,downloadthelatestJavaServerFacesSpecificationdocumentationfrom
http://jcp.org/en/jsr/detail?id=314 .
TheJavaServerFacesapplicationlifecycleexecutephasecontainsthefollowingsubphases:
■“RestoreViewPhase”onpage213
■“ApplyRequestValuesPhase”onpage213
■“ProcessValidationsPhase”onpage214
■“UpdateModelValuesPhase”onpage214
■“InvokeApplicationPhase”onpage215
■“RenderResponsePhase”onpage215TheLifecycleofaJavaServerFacesApplication
TheJavaEE6Tutorial • January2013 212
RestoreViewPhase
WhenarequestforaJavaServerFacespageismade,usuallybyanactionsuchaswhenalinkor
abuttoncomponentisclicked,theJavaServerFacesimplementationbeginstheRestoreViewphase.
Duringthisphase,theJavaServerFacesimplementationbuildstheviewofthepage,wiresevent
handlersandvalidatorstocomponentsintheview,andsavestheviewinthe FacesContext
instance,whichcontainsalltheinformationneededtoprocessasinglerequest.Alltheapplication’scomponents,eventhandlers,converters,andvalidatorshaveaccesstotheFacesContext instance.
Iftherequestforthepageisaninitialrequest,theJavaServerFacesimplementationcreatesan
emptyviewduringthisphaseandthelifecycleadvancestotheRenderResponsephase,duringwhichtheemptyviewispopulatedwiththecomponentsreferencedbythetagsinthepage.
Iftherequestforthepageisapostback,aviewcorrespondingtothispagealreadyexistsinthe
FacesContext instance.Duringthisphase,theJavaServerFacesimplementationrestoresthe
viewbyusingthestateinformationsavedontheclientortheserver.
ApplyRequestValuesPhase
Afterthecomponenttreeisrestoredduringapostbackrequest,eachcomponentinthetreeextractsitsnewvaluefromtherequestparametersbyusingits decode(processDecodes() )
method.Thevalueisthenstoredlocallyoneachcomponent.
Ifany decodemethodsoreventlistenershavecalledthe renderResponse methodonthe
current FacesContext instance,theJavaServerFacesimplementationskipstotheRender
Responsephase.
Ifanyeventshavebeenqueuedduringthisphase,theJavaServerFacesimplementation
broadcaststheeventstointerestedlisteners.
Ifsomecomponentsonthepagehavetheir immediate attributes(see
“The immediate
Attribute”onpage143 )setto true,thenthevalidations,conversions,andeventsassociated
withthesecomponentswillbeprocessedduringthisphase.Ifanyconversionfails,anerrormessageassociatedwiththecomponentisgeneratedandqueuedon FacesContext .This
messagewillbedisplayedduringtheRenderResponsephase,alongwithanyvalidationerrorsresultingfromtheProcessValidationsphase.
Atthispoint,iftheapplicationneedstoredirecttoadifferentwebapplicationresourceor
generatearesponsethatdoesnotcontainanyJavaServerFacescomponents,itcancalltheFacesContext.responseComplete method.
Attheendofthisphase,thecomponentsaresettotheirnewvalues,andmessagesandevents
havebeenqueued.TheLifecycleofaJavaServerFacesApplication
Chapter10 • JavaServerFacesTechnology:AdvancedConcepts 213
Ifthecurrentrequestisidentifiedasapartialrequest,thepartialcontextisretrievedfromthe
FacesContext ,andthepartialprocessingmethodisapplied.
ProcessValidationsPhase
Duringthisphase,theJavaServerFacesimplementationprocessesallvalidatorsregisteredon
thecomponentsinthetree,byusingits validate (processValidators )method.Itexamines
thecomponentattributesthatspecifytherulesforthevalidationandcomparestheserulestothelocalvaluestoredforthecomponent.TheJavaServerFacesimplementationalsocompletesconversionsforinputcomponentsthatdonothavethe immediate attributesettotrue.
Ifthelocalvalueisinvalid,orifanyconversionfails,theJavaServerFacesimplementationadds
anerrormessagetothe FacesContext instance,andthelifecycleadvancesdirectlytothe
RenderResponsephasesothatthepageisrenderedagainwiththeerrormessagesdisplayed.IftherewereconversionerrorsfromtheApplyRequestValuesphase,themessagesfortheseerrorsarealsodisplayed.
Ifany validate methodsoreventlistenershavecalledthe renderResponse methodonthe
current FacesContext ,theJavaServerFacesimplementationskipstotheRenderResponse
phase.
Atthispoint,iftheapplicationneedstoredirecttoadifferentwebapplicationresourceor
generatearesponsethatdoesnotcontainanyJavaServerFacescomponents,itcancalltheFacesContext.responseComplete method.
Ifeventshavebeenqueuedduringthisphase,theJavaServerFacesimplementationbroadcasts
themtointerestedlisteners.
Ifthecurrentrequestisidentifiedasapartialrequest,thepartialcontextisretrievedfromthe
Faces Context ,andthepartialprocessingmethodisapplied.
UpdateModelValuesPhase
AftertheJavaServerFacesimplementationdeterminesthatthedataisvalid,ittraversesthe
componenttreeandsetsthecorrespondingserver-sideobjectpropertiestothecomponents’localvalues.TheJavaServerFacesimplementationupdatesonlythebeanpropertiespointedatbyaninputcomponent’svalueattribute.Ifthelocaldatacannotbeconvertedtothetypesspecifiedbythebeanproperties,thelifecycleadvancesdirectlytotheRenderResponsephasesothatthepageisre-renderedwitherrorsdisplayed.Thisissimilartowhathappenswithvalidationerrors.
Ifany updateModels methodsoranylistenershavecalledthe renderResponse methodonthe
current FacesContext instance,theJavaServerFacesimplementationskipstotheRender
Responsephase.TheLifecycleofaJavaServerFacesApplication
TheJavaEE6Tutorial • January2013 214
Atthispoint,iftheapplicationneedstoredirecttoadifferentwebapplicationresourceor
generatearesponsethatdoesnotcontainanyJavaServerFacescomponents,itcancalltheFacesContext.responseComplete method.
Ifanyeventshavebeenqueuedduringthisphase,theJavaServerFacesimplementation
broadcaststhemtointerestedlisteners.
Ifthecurrentrequestisidentifiedasapartialrequest,thepartialcontextisretrievedfromthe
FacesContext ,andthepartialprocessingmethodisapplied.
InvokeApplicationPhase
Duringthisphase,theJavaServerFacesimplementationhandlesanyapplication-levelevents,
suchassubmittingaformorlinkingtoanotherpage.
Atthispoint,iftheapplicationneedstoredirecttoadifferentwebapplicationresourceor
generatearesponsethatdoesnotcontainanyJavaServerFacescomponents,itcancalltheFacesContext.responseComplete method.
Iftheviewbeingprocessedwasreconstructedfromstateinformationfromapreviousrequest
andifacomponenthasfiredanevent,theseeventsarebroadcasttointerestedlisteners.
Finally,theJavaServerFacesimplementationtransferscontroltotheRenderResponsephase.
RenderResponsePhase
Duringthisphase,JavaServerFacesbuildstheviewanddelegatesauthoritytotheappropriate
resourceforrenderingthepages.
Ifthisisaninitialrequest,thecomponentsthatarerepresentedonthepagewillbeaddedtothe
componenttree.Ifthisisnotaninitialrequest,thecomponentsarealreadyaddedtothetree,sotheyneednotbeaddedagain.
IftherequestisapostbackanderrorswereencounteredduringtheApplyRequestValues
phase,ProcessValidationsphase,orUpdateModelValuesphase,theoriginalpageisrenderedagainduringthisphase.Ifthepagescontain h:message orh:messages tags,anyqueuederror
messagesaredisplayedonthepage.
Afterthecontentoftheviewisrendered,thestateoftheresponseissavedsothatsubsequent
requestscanaccessit.ThesavedstateisavailabletotheRestoreViewphase.TheLifecycleofaJavaServerFacesApplication
Chapter10 • JavaServerFacesTechnology:AdvancedConcepts 215
PartialProcessingandPartialRendering
TheJavaServerFaceslifecyclespansalloftheexecuteandrenderprocessesofanapplication.It
isalsopossibletoprocessandrenderonlypartsofanapplication,suchasasinglecomponent.Forexample,theJavaServerFacesAjaxframeworkcangeneraterequestscontaininginformationonwhichparticularcomponentmaybeprocessedandwhichparticularcomponentmayberenderedbacktotheclient.
OncesuchapartialrequestenterstheJavaServerFaceslifecycle,theinformationisidentified
andprocessedbya javax.faces.context.PartialViewContext object.TheJavaServerFaces
lifecycleisstillawareofsuchAjaxrequestsandmodifiesthecomponenttreeaccordingly.
Theexecuteandrenderattributesofthe f:ajaxtagareusedtoidentifywhichcomponentsmay
beexecutedandrendered.Formoreinformationontheseattributes,see
Chapter11,“Using
AjaxwithJavaServerFacesTechnology.”
TheLifecycleofaFaceletsApplication
TheJavaServerFacesspecificationdefinesthelifecycleofaJavaServerFacesapplication.Formoreinformationonthislifecycle,see
“TheLifecycleofaJavaServerFacesApplication”on
page210.ThefollowingstepsdescribethatprocessasappliedtoaFacelets-basedapplication.
1. Whenaclient,suchasabrowser,makesanewrequesttoapagethatiscreatedusing
Facelets,anewcomponenttreeor javax.faces.component.UIViewRoot iscreatedand
placedinthe FacesContext .
2. The UIViewRoot isappliedtotheFacelets,andtheviewispopulatedwithcomponentsfor
rendering.
3. Thenewlybuiltviewisrenderedbackasaresponsetotheclient.4. Onrendering,thestateofthisviewisstoredforthenextrequest.Thestateofinput
componentsandformdataisstored.
5. Theclientmayinteractwiththeviewandrequestanothervieworchangefromthe
JavaServerFacesapplication.Atthistimethesavedviewisrestoredfromthestoredstate.
6. TherestoredviewisonceagainpassedthroughtheJavaServerFaceslifecycle,which
eventuallywilleithergenerateanewvieworre-renderthecurrentviewiftherewerenovalidationproblemsandnoactionwastriggered.
7. Ifthesameviewisrequested,thestoredviewisrenderedonceagain.8. Ifanewviewisrequested,thentheprocessdescribedinStep2iscontinued.9. Thenewviewisthenrenderedbackasaresponsetotheclient.PartialProcessingandPartialRendering
TheJavaEE6Tutorial • January2013 216
UserInterfaceComponentModel
Inadditiontothelifecycledescription,anoverviewofJavaServerFacesarchitectureprovides
betterunderstandingofthetechnology.
JavaServerFacescomponentsarethebuildingblocksofaJavaServerFacesview.Acomponent
canbeauserinterface(UI)componentoranon-UIcomponent.
JavaServerFacesUIcomponentsareconfigurable,reusableelementsthatcomposetheuser
interfacesofJavaServerFacesapplications.Acomponentcanbesimple,suchasabutton,orcanbecompound,suchasatable,composedofmultiplecomponents.
JavaServerFacestechnologyprovidesarich,flexiblecomponentarchitecturethatincludesthe
following:
■Asetof javax.faces.component.UIComponent classesforspecifyingthestateandbehavior
ofUIcomponents
■Arenderingmodelthatdefineshowtorenderthecomponentsinvariousways
■Aconversionmodelthatdefineshowtoregisterdataconvertersontoacomponent
■Aneventandlistenermodelthatdefineshowtohandlecomponentevents
■Avalidationmodelthatdefineshowtoregistervalidatorsontoacomponent
■Anavigationmodelthatdefinespagenavigationandthesequenceinwhichpagesareloaded
Thissectionbrieflydescribeseachofthesepiecesofthecomponentarchitecture.
UserInterfaceComponentClasses
JavaServerFacestechnologyprovidesasetofUIcomponentclassesandassociatedbehavioral
interfacesthatspecifyalltheUIcomponentfunctionality,suchasholdingcomponentstate,maintainingareferencetoobjects,anddrivingeventhandlingandrenderingforasetofstandardcomponents.
Thecomponentclassesarecompletelyextensible,allowingcomponentwriterstocreatetheir
owncustomcomponents.See
Chapter13,“CreatingCustomUIComponentsandOther
CustomObjects,” formoreinformation.
Theabstractbaseclassforallcomponentsis javax.faces.component.UIComponent .
JavaServerFacesUIcomponentclassesextendthe UIComponentBase class(asubclassof
UIComponent ),whichdefinesthedefaultstateandbehaviorofacomponent.Thefollowingset
ofcomponentclassesisincludedwithJavaServerFacestechnology:
■UIColumn :Representsasinglecolumnofdataina UIDatacomponent.
■UICommand :Representsacontrolthatfiresactionswhenactivated.
■UIData:Representsadatabindingtoacollectionofdatarepresentedbya
javax.faces.model.DataModel instance.UserInterfaceComponentModel
Chapter10 • JavaServerFacesTechnology:AdvancedConcepts 217
■UIForm:Representsaninputformtobepresentedtotheuser.Itschildcomponents
represent(amongotherthings)theinputfieldstobeincludedwhentheformissubmitted.Thiscomponentisanalogoustothe formtaginHTML.
■UIGraphic :Displaysanimage.
■UIInput:Takesdatainputfromauser.Thisclassisasubclassof UIOutput .
■UIMessage :Displaysalocalizederrormessage.
■UIMessages :Displaysasetoflocalizederrormessages.
■UIOutcomeTarget :Displaysahyperlinkintheformofalinkorabutton.
■UIOutput :Displaysdataoutputonapage.
■UIPanel:Managesthelayoutofitschildcomponents.
■UIParameter :Representssubstitutionparameters.
■UISelectBoolean :Allowsausertoseta booleanvalueonacontrolbyselectingor
deselectingit.Thisclassisasubclassofthe UIInputclass.
■UISelectItem :Representsasingleiteminasetofitems.
■UISelectItems :Representsanentiresetofitems.
■UISelectMany :Allowsausertoselectmultipleitemsfromagroupofitems.Thisclassisa
subclassofthe UIInputclass.
■UISelectOne :Allowsausertoselectoneitemfromagroupofitems.Thisclassisasubclass
ofthe UIInputclass.
■UIViewParameter :Representsthequeryparametersinarequest.Thisclassisasubclassof
theUIInputclass.
■UIViewRoot :Representstherootofthecomponenttree.
Inadditiontoextending UIComponentBase ,thecomponentclassesalsoimplementoneormore
behavioralinterfaces ,eachofwhichdefinescertainbehaviorforasetofcomponentswhose
classesimplementtheinterface.
Thesebehavioralinterfaces,alldefinedinthe javax.faces.component packageunless
otherwisestated,areasfollows:
■ActionSource :Indicatesthatthecomponentcanfireanactionevent.Thisinterfaceis
intendedforusewithcomponentsbasedonJavaServerFacestechnology1.1_01andearlierversions.ThisinterfaceisdeprecatedinJavaServerFaces2.
■ActionSource2 :Extends ActionSource ,andthereforeprovidesthesamefunctionality.
However,itallowscomponentstousetheExpressionLanguage(EL)whentheyarereferencingmethodsthathandleactionevents.
■EditableValueHolder :Extends ValueHolder andspecifiesadditionalfeaturesforeditable
components,suchasvalidationandemittingvalue-changeevents.
■NamingContainer :Mandatesthateachcomponentrootedatthiscomponenthaveaunique
ID.UserInterfaceComponentModel
TheJavaEE6Tutorial • January2013 218
■StateHolder :Denotesthatacomponenthasstatethatmustbesavedbetweenrequests.
■ValueHolder :Indicatesthatthecomponentmaintainsalocalvalueaswellastheoptionof
accessingdatainthemodeltier.
■javax.faces.event.SystemEventListenerHolder :Maintainsalistof
javax.faces.event.SystemEventListener instancesforeachtypeof
javax.faces.event.SystemEvent definedbythatclass.
■javax.faces.component.behavior.ClientBehaviorHolder :Addstheabilitytoattach
javax.faces.component.behavior.ClientBehavior instancessuchasareusablescript.
UICommand implements ActionSource2 andStateHolder .UIOutput andcomponentclasses
thatextend UIOutput implement StateHolder andValueHolder .UIInputandcomponent
classesthatextend UIInputimplement EditableValueHolder ,StateHolder ,and
ValueHolder .UIComponentBase implements StateHolder .
Onlycomponentwriterswillneedtousethecomponentclassesandbehavioralinterfaces
directly.Pageauthorsandapplicationdeveloperswilluseastandardcomponentbyincludingatagthatrepresentsitonapage.Mostofthecomponentscanberenderedindifferentwaysonapage.Forexample,a UICommand componentcanberenderedasabuttonorahyperlink.
Thenextsectionexplainshowtherenderingmodelworksandhowpageauthorscanchooseto
renderthecomponentsbyselectingtheappropriatetags.
ComponentRenderingModel
TheJavaServerFacescomponentarchitectureisdesignedsuchthatthefunctionalityofthecomponentsisdefinedbythecomponentclasses,whereasthecomponentrenderingcanbedefinedbyaseparaterendererclass.Thisdesignhasseveralbenefits,includingthefollowing:
■Componentwriterscandefinethebehaviorofacomponentoncebutcreatemultiplerenderers,eachofwhichdefinesadifferentwaytorenderthecomponenttothesameclientortodifferentclients.
■Pageauthorsandapplicationdeveloperscanchangetheappearanceofacomponentonthepagebyselectingthetagthatrepresentstheappropriatecombinationofcomponentandrenderer.
Arenderkit defineshowcomponentclassesmaptocomponenttagsthatareappropriatefora
particularclient.TheJavaServerFacesimplementationincludesastandardHTMLrenderkitforrenderingtoanHTMLclient.
Therenderkitdefinesasetof javax.faces.render.Renderer classesforeachcomponentthat
itsupports.Each Renderer classdefinesadifferentwaytorendertheparticularcomponentto
theoutputdefinedbytherenderkit.Forexample,a UISelectOne componenthasthree
differentrenderers.Oneofthemrendersthecomponentasasetofradiobuttons.Anotherrendersthecomponentasacombobox.Thethirdonerendersthecomponentasalistbox.UserInterfaceComponentModel
Chapter10 • JavaServerFacesTechnology:AdvancedConcepts 219
Similarly,a UICommand componentcanberenderedasabuttonorahyperlink,usingthe
h:commandButton orh:commandLink tag.The commandpartofeachtagcorrespondstothe
UICommand class,specifyingthefunctionality,whichistofireanaction.The ButtonorLinkpart
ofeachtagcorrespondstoaseparate Renderer classthatdefineshowthecomponentappears
onthepage.
EachcustomtagdefinedinthestandardHTMLrenderkitiscomposedofthecomponent
functionality(definedinthe UIComponent class)andtherenderingattributes(definedbythe
Renderer class).
Thesection “AddingComponentstoaPageUsingHTMLTags”onpage140 listsallsupported
componenttagsandillustrateshowtousethetagsinanexample.
TheJavaServerFacesimplementationprovidesacustomtaglibraryforrenderingcomponents
inHTML.
ConversionModel
AJavaServerFacesapplicationcanoptionallyassociateacomponentwithserver-sideobjectdata.ThisobjectisaJavaBeanscomponent,suchasamanagedbean.Anapplicationgetsandsetstheobjectdataforacomponentbycallingtheappropriateobjectpropertiesforthatcomponent.
Whenacomponentisboundtoanobject,theapplicationhastwoviewsofthecomponent’s
data:
■Themodelview,inwhichdataisrepresentedasdatatypes,suchas intorlong.
■Thepresentationview,inwhichdataisrepresentedinamannerthatcanbereador
modifiedbytheuser.Forexample,a java.util.Date mightberepresentedasatextstring
intheformat mm/dd/yy orasasetofthreetextstrings.
TheJavaServerFacesimplementationautomaticallyconvertscomponentdatabetweenthese
twoviewswhenthebeanpropertyassociatedwiththecomponentisofoneofthetypessupportedbythecomponent’sdata.Forexample,ifa UISelectBoolean componentis
associatedwithabeanpropertyoftype java.lang.Boolean ,theJavaServerFaces
implementationwillautomaticallyconvertthecomponent’sdatafrom StringtoBoolean.In
addition,somecomponentdatamustbeboundtopropertiesofaparticulartype.Forexample,aUISelectBoolean componentmustbeboundtoapropertyoftype booleanor
java.lang.Boolean .
Sometimesyoumightwanttoconvertacomponent’sdatatoatypeotherthanastandardtype,
oryoumightwanttoconverttheformatofthedata.Tofacilitatethis,JavaServerFacestechnologyallowsyoutoregistera javax.faces.convert.Converter implementationon
UIOutput componentsandcomponentswhoseclassessubclass UIOutput .Ifyouregisterthe
Converter implementationonacomponent,the Converter implementationconvertsthe
component’sdatabetweenthetwoviews.UserInterfaceComponentModel
TheJavaEE6Tutorial • January2013 220
YoucaneitherusethestandardconverterssuppliedwiththeJavaServerFacesimplementation
orcreateyourowncustomconverter.Customconvertercreationiscoveredin Chapter13,
“CreatingCustomUIComponentsandOtherCustomObjects.”
EventandListenerModel
TheJavaServerFaceseventandlistenermodelissimilartotheJavaBeanseventmodelinthatithasstronglytypedeventclassesandlistenerinterfacesthatanapplicationcanusetohandleeventsgeneratedbycomponents.
TheJavaServerFacesspecificationdefinesthreetypesofevents:applicationevents,system
events,anddata-modelevents.
Applicationeventsaretiedtoaparticularapplicationandaregeneratedbya UIComponent .
TheyrepresentthestandardeventsavailableinpreviousversionsofJavaServerFacestechnology.
Aneventobjectidentifiesthecomponentthatgeneratedtheeventandstoresinformationabout
theevent.Tobenotifiedofanevent,anapplicationmustprovideanimplementationofthelistenerclassandmustregisteritonthecomponentthatgeneratestheevent.Whentheuseractivatesacomponent,suchasbyclickingabutton,aneventisfired.ThiscausestheJavaServerFacesimplementationtoinvokethelistenermethodthatprocessestheevent.
JavaServerFacessupportstwokindsofapplicationevents:actioneventsandvalue-change
events.
Anactionevent (class javax.faces.event.ActionEvent )occurswhentheuseractivatesa
componentthatimplements javax.faces.component.ActionSource .Thesecomponents
includebuttonsandhyperlinks.
Avalue-changeevent (class javax.faces.event.ValueChangeEvent )occurswhentheuser
changesthevalueofacomponentrepresentedby UIInputoroneofitssubclasses.Anexample
isselectingacheckbox,anactionthatresultsinthecomponent’svaluechangingto true.The
componenttypesthatcangeneratethesetypesofeventsarethe UIInput,UISelectOne ,
UISelectMany ,and UISelectBoolean components.Value-changeeventsarefiredonlyifno
validationerrorsaredetected.
Dependingonthevalueofthe immediate property(see
“The immediate Attribute”on
page143)ofthecomponentemittingtheevent,actioneventscanbeprocessedduringthe
invokeapplicationphaseortheapplyrequestvaluesphase,andvalue-changeeventscanbeprocessedduringtheprocessvalidationsphaseortheapplyrequestvaluesphase.
Systemevents aregeneratedbyan Objectratherthana UIComponent .Theyaregenerated
duringtheexecutionofanapplicationatpredefinedtimes.Theyareapplicabletotheentireapplicationratherthantoaspecificcomponent.UserInterfaceComponentModel
Chapter10 • JavaServerFacesTechnology:AdvancedConcepts 221
Adata-modelevent occurswhenanewrowofa UIDatacomponentisselected.
Therearetwowaystocauseyourapplicationtoreacttoactioneventsorvalue-changeevents
thatareemittedbyastandardcomponent:
■Implementaneventlistenerclasstohandletheeventandregisterthelisteneronthecomponentbynestingeitheran f:valueChangeListener tagoran f:actionListener tag
insidethecomponenttag.
■Implementamethodofamanagedbeantohandletheeventandrefertothemethodwithamethodexpressionfromtheappropriateattributeofthecomponent’stag.
See
“ImplementinganEventListener”onpage273 forinformationonhowtoimplementan
eventlistener.See “RegisteringListenersonComponents”onpage180 forinformationonhow
toregisterthelisteneronacomponent.
See“WritingaMethodtoHandleanActionEvent”onpage202 and“WritingaMethodto
HandleaValue-ChangeEvent”onpage203 forinformationonhowtoimplementmanaged
beanmethodsthathandletheseevents.
See“ReferencingaManagedBeanMethod”onpage186 forinformationonhowtorefertothe
managedbeanmethodfromthecomponenttag.
Whenemittingeventsfromcustomcomponents,youmustimplementtheappropriateevent
classandmanuallyqueuetheeventonthecomponentinadditiontoimplementinganeventlistenerclassoramanagedbeanmethodthathandlestheevent.
“HandlingEventsforCustom
Components”onpage275 explainshowtodothis.
ValidationModel
JavaServerFacestechnologysupportsamechanismforvalidatingthelocaldataofeditablecomponents(suchastextfields).Thisvalidationoccursbeforethecorrespondingmodeldataisupdatedtomatchthelocalvalue.
Liketheconversionmodel,thevalidationmodeldefinesasetofstandardclassesforperforming
commondatavalidationchecks.TheJavaServerFacescoretaglibraryalsodefinesasetoftagsthatcorrespondtothestandard javax.faces.validator.Validator implementations.See
“UsingtheStandardValidators”onpage183 foralistofallthestandardvalidationclassesand
correspondingtags.
Mostofthetagshaveasetofattributesforconfiguringthevalidator’sproperties,suchasthe
minimumandmaximumallowablevaluesforthecomponent’sdata.Thepageauthorregistersthevalidatoronacomponentbynestingthevalidator’stagwithinthecomponent’stag.
Inadditiontovalidatorsthatareregisteredonthecomponent,youcandeclareadefault
validatorwhichisregisteredonall UIInputcomponentsintheapplication.Formore
informationondefaultvalidators,see
“UsingDefaultValidators”onpage311 .UserInterfaceComponentModel
TheJavaEE6Tutorial • January2013 222
Thevalidationmodelalsoallowsyoutocreateyourowncustomvalidatorandcorresponding
tagtoperformcustomvalidation.Thevalidationmodelprovidestwowaystoimplementcustomvalidation:
■Implementa Validator interfacethatperformsthevalidation.
■Implementamanagedbeanmethodthatperformsthevalidation.
Ifyouareimplementinga Validator interface,youmustalso:
■Registerthe Validator implementationwiththeapplication.
■Createacustomtagorusean f:validator tagtoregisterthevalidatoronthecomponent.
Inthepreviouslydescribedstandardvalidationmodel,thevalidatorisdefinedforeachinput
componentonapage.TheBeanValidationmodelallowsthevalidatortobeappliedtoallfieldsinapage.See
“UsingBeanValidation”onpage204 andChapter49,“BeanValidation:
AdvancedTopics,” formoreinformationonBeanValidation.
NavigationModel
TheJavaServerFacesnavigationmodelmakesiteasytodefinepagenavigationandtohandleanyadditionalprocessingthatisneededtochoosethesequenceinwhichpagesareloaded.
InJavaServerFacestechnology, navigation isasetofrulesforchoosingthenextpageorviewto
bedisplayedafteranapplicationaction,suchaswhenabuttonorhyperlinkisclicked.
Navigationcanbeimplicitoruser-defined.Implicitnavigationcomesintoplaywhen
user-definednavigationrulesarenotavailable.Formoreinformationonimplicitnavigation,see
“ImplicitNavigationRules”onpage316 .
User-definednavigationrulesaredeclaredinzeroormoreapplicationconfigurationresource
files,suchas faces-config.xml ,byusingasetofXMLelements.Thedefaultstructureofa
navigationruleisasfollows:
<navigation-rule>
<description></description<from-view-id></from-view-id><navigation-case>
<from-action></from-action><from-outcome></from-outcome><if></if><to-view-id></to-view-id>
</navigation-case>
</navigation-rule>UserInterfaceComponentModel
Chapter10 • JavaServerFacesTechnology:AdvancedConcepts 223
User-definednavigationishandledasfollows:
■Definetherulesintheapplicationconfigurationresourcefile.
■Refertoanoutcome Stringfromthebuttonorhyperlinkcomponent’s actionattribute.
Thisoutcome StringisusedbytheJavaServerFacesimplementationtoselectthe
navigationrule.
Hereisanexamplenavigationrule:
<navigation-rule>
<from-view-id>/greeting.xhtml</from-view-id><navigation-case>
<from-outcome>success</from-outcome><to-view-id>/response.xhtml</to-view-id>
</navigation-case>
</navigation-rule>
Thisrulestatesthatwhenacommandcomponent(suchasan h:commandButton oran
h:commandLink )ongreeting.xhtml isactivated,theapplicationwillnavigatefromthe
greeting.xhtml pagetothe response.xhtml pageiftheoutcomereferencedbythebutton
component’stagis success.Hereisthe h:commandButton tagfrom greeting.xhtml that
specifiesalogicaloutcomeofsuccess:
<h:commandButton id= "submit "action= "success "
value= "Submit "/>
Astheexampledemonstrates,each navigation-rule elementdefineshowtogetfromonepage
(specifiedinthe from-view-id element)totheotherpagesoftheapplication.The
navigation-rule elementscancontainanynumberof navigation-case elements,eachof
whichdefinesthepagetoopennext(definedby to-view-id )basedonalogicaloutcome
(definedby from-outcome ).
Inmorecomplicatedapplications,thelogicaloutcomecanalsocomefromthereturnvalueof
anactionmethod inamanagedbean.Thismethodperformssomeprocessingtodeterminethe
outcome.Forexample,themethodcancheckwhetherthepasswordtheuserenteredonthepagematchestheoneonfile.Ifitdoes,themethodmightreturn success;otherwise,itmight
return failure.Anoutcomeof failuremightresultinthelogonpagebeingreloaded.An
outcomeof successmightcausethepagedisplayingtheuser’screditcardactivitytoopen.If
youwanttheoutcometobereturnedbyamethodonabean,youmustrefertothemethodusingamethodexpression,withthe actionattribute,asshownbythisexample:
<h:commandButton id= "submit "
action= "#{userNumberBean.getOrderStatus} "value= "Submit "/>
Whentheuserclicksthebuttonrepresentedbythistag,thecorrespondingcomponent
generatesanactionevent.Thiseventishandledbythedefaultjavax.faces.event.ActionListener instance,whichcallstheactionmethodreferencedby
thecomponentthattriggeredtheevent.Theactionmethodreturnsalogicaloutcometotheactionlistener.UserInterfaceComponentModel
TheJavaEE6Tutorial • January2013 224
Thelistenerpassesthelogicaloutcomeandareferencetotheactionmethodthatproducedthe
outcometothedefault javax.faces.application.NavigationHandler .The
NavigationHandler selectsthepagetodisplaynextbymatchingtheoutcomeortheaction
methodreferenceagainstthenavigationrulesintheapplicationconfigurationresourcefilebythefollowingprocess:
1. The NavigationHandler selectsthenavigationrulethatmatchesthepagecurrently
displayed.
2. Itmatchestheoutcomeortheactionmethodreferencethatitreceivedfromthedefault
javax.faces.event.ActionListener withthosedefinedbythenavigationcases.
3. Ittriestomatchboththemethodreferenceandtheoutcomeagainstthesamenavigation
case.
4. Ifthepreviousstepfails,thenavigationhandlerattemptstomatchtheoutcome.5. Finally,thenavigationhandlerattemptstomatchtheactionmethodreferenceifthe
previoustwoattemptsfailed.
6. Ifnonavigationcaseismatched,itdisplaysthesameviewagain.
Whenthe NavigationHandler achievesamatch,therenderresponsephasebegins.Duringthis
phase,thepageselectedbythe NavigationHandler willberendered.
TheDuke'sTutoringcasestudyexampleapplicationusesnavigationrulesinthebusiness
methodsthathandlecreating,editing,anddeletingtheusersoftheapplication.Forexample,theformforcreatingastudenthasthefollowing h:commandButton tag:
<h:commandButton id= "submit "
action= "#{adminBean.createStudent(studentManager.newStudent)} "
value= "#{bundle[’action.submit’]} "/>
Theactioneventcallsthe dukestutoring.ejb.AdminBean.createStudent method:
public String createStudent(Student student) {
em.persist(student);return "createdStudent ";
}
Thereturnvalueof createdStudent hasacorrespondingnavigationcaseinthe
faces-config.xml configurationfile:
<navigation-rule>
<from-view-id>/admin/student/createStudent.xhtml</from-view-id><navigation-case>
<from-outcome>createdStudent</from-outcome><to-view-id>/admin/index.xhtml</to-view-id>
</navigation-case>
</navigation-rule>
Afterthestudentiscreated,theuserisreturnedtotheAdministrationindexpage.UserInterfaceComponentModel
Chapter10 • JavaServerFacesTechnology:AdvancedConcepts 225
Formoreinformationonhowtodefinenavigationrules,see “ConfiguringNavigationRules”
onpage313 .
Formoreinformationonhowtoimplementactionmethodstohandlenavigation,see “Writing
aMethodtoHandleanActionEvent”onpage202 .
Formoreinformationonhowtoreferenceoutcomesoractionmethodsfromcomponenttags,
see“ReferencingaMethodThatPerformsNavigation”onpage187 .UserInterfaceComponentModel
TheJavaEE6Tutorial • January2013 226
UsingAjaxwithJavaServerFacesTechnology
AjaxisanacronymforAsynchronousJavaScriptandXML,agroupofwebtechnologiesthat
enablecreationofdynamicandhighlyresponsivewebapplications.UsingAjax,webapplicationscanretrievecontentfromtheserverwithoutinterferingwiththedisplayontheclient.IntheJavaEE6platform,JavaServerFacesprovidesbuilt-insupportforAjax.
Earlywebapplicationswerecreatedmostlyasstaticwebpages.Whenastaticwebpageis
updatedbyaclient,theentirepagehastoreloadtoreflecttheupdate.Ineffect,everyupdateneedsapagereloadtoreflectthechange.Repetitivepagereloadscanresultinexcessivenetworkaccessandcanimpactapplicationperformance.TechnologiessuchasAjaxwerecreatedtoovercomethesedeficiencies.
ThischapterdescribesusingAjaxfunctionalityinJavaServerFaceswebapplications.Thefollowingtopicsareaddressedhere:
■“OverviewofAjax”onpage228
■“UsingAjaxFunctionalitywithJavaServerFacesTechnology”onpage228
■“UsingAjaxwithFacelets”onpage229
■“SendinganAjaxRequest”onpage231
■“MonitoringEventsontheClient”onpage233
■“HandlingErrors”onpage234
■“ReceivinganAjaxResponse”onpage234
■“AjaxRequestLifecycle”onpage235
■“GroupingofComponents”onpage236
■“LoadingJavaScriptasaResource”onpage236
■“The ajaxguessnumber ExampleApplication”onpage238
■“FurtherInformationaboutAjaxinJavaServerFacesTechnology”onpage24211CHAPTER 11
227
OverviewofAjax
AjaxreferstoJavaScriptandXML,technologiesthatarewidelyusedforcreatingdynamicand
asynchronouswebcontent.WhileAjaxisnotlimitedtoJavaScriptandXMLtechnologies,moreoftenthannottheyareusedtogetherbywebapplications.ThefocusofthistutorialisonusingJavaScriptbasedAjaxfunctionalityinJavaServerFaceswebapplications.
JavaScriptisadynamicscriptinglanguageforwebapplications.Itallowsuserstoaddenhanced
functionalitytouserinterfacesandallowswebpagestointeractwithclientsasynchronously.JavaScriptrunsmainlyontheclientside(asinabrowser)andtherebyreducesserveraccessbyclients.
WhenaJavaScriptfunctionsendsanasynchronousrequestfromtheclienttotheserver,the
serversendsbackaresponsethatisusedtoupdatethepage’sDocumentObjectModel(DOM).ThisresponseisoftenintheformatofanXMLdocument.Theterm Ajaxreferstothis
interactionbetweentheclientandserver.
TheserverresponseneednotbeinXMLonly;itcanalsobeinotherformats,suchas
JSON.
Thistutorialdoesnotfocusontheresponseformats.
Ajaxenablesasynchronousandpartialupdatingofwebapplications.Suchfunctionalityallows
forhighlyresponsivewebpagesthatarerenderedinnearrealtime.Ajax-basedwebapplicationscanaccessserverandprocessinformationandcanalsoretrievedatawithoutinterferingwiththedisplayandrenderingofthecurrentwebpageonaclient(suchasabrowser).
SomeoftheadvantagesofusingAjaxareasfollows:
■Formdatavalidationinrealtime,eliminatingtheneedtosubmittheformforverification
■Enhancedfunctionalityforwebpages,suchasusernameandpasswordprompts
■Partialupdateofthewebcontent,avoidingcompletepagereloads
UsingAjaxFunctionalitywithJavaServerFacesTechnology
AjaxfunctionalitycanbeaddedtoaJavaServerFacesapplicationinoneofthefollowingways:
■AddingtherequiredJavaScriptcodetoanapplication
■Usingthebuilt-inAjaxresourcelibrary
InearlierreleasesoftheJavaEEplatform,JavaServerFacesapplicationsprovidedAjax
functionalitybyaddingthenecessaryJavaScripttothewebpage.IntheJavaEE6platform,standardAjaxsupportisprovidedbyabuilt-inJavaScriptresourcelibrary.
WiththesupportofthisJavaScriptresourcelibrary,JavaServerFacesstandardUIcomponents,
suchasbuttons,labels,ortextfields,canbeenabledforAjaxfunctionality.YoucanalsoloadOverviewofAjax
TheJavaEE6Tutorial • January2013 228
thisresourcelibraryanduseitsmethodsdirectlyfromwithinthemanagedbeancode.Thenext
sectionsofthetutorialdescribetheuseofthebuilt-inAjaxresourcelibrary.
Inaddition,becausetheJavaServerFacestechnologycomponentmodelcanbeextended,
customcomponentscanbecreatedwithAjaxfunctionality.
AnAjaxversionofthe guessnumber application, ajaxguessnumber ,isavailableintheexample
repository.See “The ajaxguessnumber ExampleApplication”onpage238 formore
information.
TheAjaxspecific f:ajaxtaganditsattributesareexplainedinthenextsections.
UsingAjaxwithFacelets
Asmentionedintheprevioussection,JavaServerFacestechnologysupportsAjaxbyusinga
built-inJavaScriptresourcelibrarythatisprovidedaspartoftheJavaServerFacescorelibraries.Thisbuilt-inAjaxresourcecanbeusedinJavaServerFaceswebapplicationsinoneofthefollowingways:
■Byusingthe f:ajaxtagalongwithanotherstandardcomponentinaFaceletsapplication.
ThismethodaddsAjaxfunctionalitytoanyUIcomponentwithoutadditionalcodingandconfiguration.
■ByusingtheJavaScriptAPImethod jsf.ajax.request() directlywithintheFacelets
application.ThismethodprovidesdirectaccesstoAjaxmethods,andallowscustomizedcontrolofcomponentbehavior.
Usingthe f:ajaxTag
Thef:ajaxtagisaJavaServerFacescoretagthatprovidesAjaxfunctionalitytoanyregularUI
componentwhenusedinconjunctionwiththatcomponent.Inthefollowingexample,Ajaxbehaviorisaddedtoaninputcomponentbyincludingthe f:ajaxcoretag:
<h:inputText value= "#{bean.message} ">
<f:ajax />
</h:inputText>
Inthisexample,althoughAjaxisenabled,theotherattributesofthe f:ajaxtagarenotdefined.
Ifaneventisnotdefined,thedefaultactionforthecomponentisperformed.Forthe inputText
component,whenno eventattributeisspecified,thedefaulteventis valueChange .Table11–1
liststheattributesofthe f:ajaxtagandtheirdefaultactions.UsingAjaxwithFacelets
Chapter11 • UsingAjaxwithJavaServerFacesTechnology 229
TABLE11–1 Attributesofthe f:ajaxTag
Name Type Description
disabled javax.el.ValueExpression that
evaluatestoa BooleanABooleanvaluethatidentifiesthetagstatus.Avalueof
trueindicatesthattheAjaxbehaviorshouldnotbe
rendered.Avalueof falseindicatesthattheAjax
behaviorshouldberendered.Thedefaultvalueis false.
event javax.el.ValueExpression that
evaluatestoa StringAStringthatidentifiesthetypeofeventtowhichthe
Ajaxactionwillapply.Ifspecified,itmustbeoneoftheeventssupportedbythecomponent.Ifnotspecified,thedefaultevent(theeventthattriggerstheAjaxrequest)isdeterminedforthecomponent.Thedefaulteventisactionforjavax.faces.component.ActionSource
componentsand valueChange for
javax.faces.component.EditableValueHoldercomponents.
execute javax.el.ValueExpression that
evaluatestoan ObjectACollection thatidentifiesalistofcomponentstobe
executedontheserver.Ifaliteralisspecified,itmustbeaspace-delimited Stringofcomponentidentifiers
and/oroneofthekeywords.Ifa ValueExpression is
specified,itmustrefertoapropertythatreturnsaCollection ofStringobjects.Ifnotspecified,the
defaultvalueis @this.
immediate javax.el.ValueExpression that
evaluatestoa BooleanABooleanvaluethatindicateswhetherinputsaretobe
processedearlyinthelifecycle.If true,behaviorevents
generatedfromthisbehaviorarebroadcastduringtheApplyRequestValuesphase.Otherwise,theeventswillbebroadcastduringtheInvokeApplicationsphase.
listener javax.el.MethodExpression Thenameofthelistenermethodthatiscalledwhena
javax.faces.event.AjaxBehaviorEvent hasbeen
broadcastforthelistener.
onevent javax.el.ValueExpression that
evaluatestoa StringThenameoftheJavaScriptfunctionthathandlesUI
events.
onerror javax.el.ValueExpression that
evaluatestoa StringThenameoftheJavaScriptfunctionthathandleserrors.
render javax.el.ValueExpression that
evaluatestoan ObjectACollection thatidentifiesalistofcomponentstobe
renderedontheclient.Ifaliteralisspecified,itmustbeaspace-delimited Stringofcomponentidentifiers
and/oroneofthekeywords.Ifa ValueExpression is
specified,itmustrefertoapropertythatreturnsaCollection ofStringobjects.Ifnotspecified,the
defaultvalueis @none.UsingAjaxwithFacelets
TheJavaEE6Tutorial • January2013 230
Thekeywordslistedin Table11–2 canbeusedwiththe executeandrenderattributesofthe
f:ajaxtag.
TABLE11–2 ExecuteandRenderKeywords
Keyword Description
@all Allcomponentidentifiers
@form Theformthatenclosesthecomponent
@none Nocomponentidentifiers
@this Theelementthattriggeredtherequest
Notethatwhenyouusethe f:ajaxtaginaFaceletspage,theJavaScriptresourcelibraryis
loadedimplicitly.Thisresourcelibrarycanalsobeloadedexplicitlyasdescribedin “Loading
JavaScriptasaResource”onpage236 .
SendinganAjaxRequest
ToactivateAjaxfunctionality,thewebapplicationmustcreateanAjaxrequestandsendittotheserver.Theserverthenprocessestherequest.
Theapplicationusestheattributesofthe f:ajaxtaglistedin
Table11–1 tocreatetheAjax
request.ThefollowingsectionsexplaintheprocessofcreatingandsendinganAjaxrequestusingsomeoftheseattributes.
Note–Behindthescenes,the jsf.ajax.request() methodoftheJavaScriptresourcelibrary
collectsthedataprovidedbythe f:ajaxtagandpoststherequesttotheJavaServerFaces
lifecycle.
Usingthe eventAttribute
TheeventattributedefinestheeventthattriggerstheAjaxaction.Someofthepossiblevalues
forthisattributeare click,keyup,mouseover ,focus,and blur.
Ifnotspecified,adefaulteventbasedontheparentcomponentwillbeapplied.Thedefault
eventis actionforjavax.faces.component.ActionSource componentssuchasa
commandButton ,and valueChange forjavax.faces.component.EditableValueHolder
componentssuchas inputText .Inthefollowingexample,anAjaxtagisassociatedwiththe
buttoncomponent,andtheeventthattriggerstheAjaxactionisamouseclick:SendinganAjaxRequest
Chapter11 • UsingAjaxwithJavaServerFacesTechnology 231
<h:commandButton id= "submit "value= "Submit ">
<f:ajax event= "click "/>
</h:commandButton><h:outputText id= "result "value= "#{userNumberBean.response} "/>
Note–YoumayhavenoticedthatthelistedeventsareverysimilartoJavaScriptevents.Infact,
theyarebasedonJavaScriptevents,butdonothavethe onprefix.
Foracommandbutton,thedefaulteventis click,sothatyoudonotactuallyneedtospecify
event= "click "toobtainthedesiredbehavior.
Usingthe executeAttribute
Theexecuteattributedefinesthecomponentorcomponentstobeexecutedontheserver.The
componentisidentifiedbyits idattribute.Youcanspecifymorethanoneexecutable
component.Ifmorethanonecomponentistobeexecuted,specifyaspace-delimitedlistofcomponents.
Whenacomponentisexecuted,itparticipatesinallphasesoftherequestprocessinglifecycle
excepttheRenderResponsephase.
Theexecuteattributecanalsobeakeyword,suchas @all,@none,@this,or@form.Thedefault
valueis @this,whichreferstothecomponentwithinwhichthe f:ajaxtagisnested.
Thefollowingcodespecifiesthatthe h:inputText componentwiththe idvalueof userNo
shouldbeexecutedwhenthebuttonisclicked:
<h:inputText id= "userNo "
title= "Type a number from 0 to 10: "
value= "#{userNumberBean.userNumber} ">
...
</h:inputText><h:commandButton id= "submit "value= "Submit ">
<f:ajax event= "click "execute= "userNo "/>
</h:commandButton>
Usingthe immediate Attribute
Theimmediate attributeindicateswhetheruserinputsaretobeprocessedearlyinthe
applicationlifecycleorlater.Iftheattributeissetto true,eventsgeneratedfromthis
componentarebroadcastduringtheApplyRequestValuesphase.Otherwise,theeventswillbebroadcastduringtheInvokeApplicationsphase.
Ifnotdefined,thedefaultvalueofthisattributeis false.SendinganAjaxRequest
TheJavaEE6Tutorial • January2013 232
Usingthe listener Attribute
Thelistener attributereferstoamethodexpressionthatisexecutedontheserversidein
responsetoanAjaxactionontheclient.Thelistener’sjavax.faces.event.AjaxBehaviorListener.processAjaxBehavior methodiscalledonce
duringtheInvokeApplicationphaseofthelifecycle.Inthefollowingexample,a listener
attributeisdefinedbyan f:ajaxtag,whichreferstoamethodfromthebean.
<f:ajax listener= "#{mybean.someaction} "render= "somecomponent "/>
Thefollowingcoderepresentsthe someaction methodin mybean.
public void someaction(AjaxBehaviorEvent event) {
dosomething;
}
MonitoringEventsontheClient
TheongoingAjaxrequestscanbemonitoredbyusingthe oneventattributeofthe f:ajaxtag.
ThevalueofthisattributeisthenameofaJavaScriptfunction.JavaServerFacescallstheoneventfunctionateachstageoftheprocessingofanAjaxrequest:begin,complete,and
success.
WhencallingtheJavaScriptfunctionassignedtothe oneventproperty,JavaServerFacespasses
adataobjecttoit.Thedataobjectcontainsthepropertieslistedin
Table11–3 .
TABLE11–3 Propertiesofthe onEventDataObject
Property Description
responseXML TheresponsetotheAjaxcallinXMLformat
responseText TheresponsetotheAjaxcallintextformat
responseCode TheresponsetotheAjaxcallinnumericcode
source ThesourceofthecurrentAjaxevent:theDOMelement
status ThestatusofthecurrentAjaxcall: begin,complete ,orsuccess
type ThetypeoftheAjaxcall: event
Byusingthe statuspropertyofthedataobject,youcanidentifythecurrentstatusoftheAjax
requestandmonitoritsprogress.Inthefollowingexample, monitormyajaxevent isaJavaScript
functionthatmonitorstheAjaxrequestsentbytheevent:
<f:ajax event= "click "render= "errormessage "onevent= "monitormyajaxevent "/>MonitoringEventsontheClient
Chapter11 • UsingAjaxwithJavaServerFacesTechnology 233
HandlingErrors
JavaServerFaceshandlesAjaxerrorsthroughuseofthe onerrorattributeofthe f:ajaxtag.
ThevalueofthisattributeisthenameofaJavaScriptfunction.
WhenthereisanerrorinprocessingaAjaxrequest,JavaServerFacescallsthedefined onerror
JavaScriptfunctionandpassesadataobjecttoit.Thedataobjectcontainsallthepropertiesavailableforthe oneventattribute,andinaddition,thefollowingproperties:
■description
■errorName
■errorMessage
Thetypeiserror.The statuspropertyofthedataobjectcontainsoneofthevaliderrorvalues
listedinTable11–4 .
TABLE11–4 ValidErrorValuesfortheDataObject statusProperty
Values Description
emptyResponse NoAjaxresponsefromserver.
httpError OneofthevalidHTTPerrors: request.status==null or
request.status==undefined orrequest.status < 200 orrequest.status >= 300
malformedXML TheAjaxresponseisnotwellformed.
serverError TheAjaxresponsecontainsan errorelement.
Inthefollowingexample,anyerrorsthatoccurredinprocessingtheAjaxrequestarehandled
bythe handlemyajaxerror JavaScriptfunction:
<f:ajax event= "click "render= "test"onerror= "handlemyajaxerror "/>
ReceivinganAjaxResponse
AftertheapplicationsendsanAjaxrequest,itisprocessedontheserverside,andaresponseis
sentbacktotheclient.Asdescribedearlier,Ajaxallowsforpartialupdatingofwebpages.Toenablesuchpartialupdating,JavaServerFacestechnologyallowsforpartialprocessingoftheview.Thehandlingoftheresponseisdefinedbythe renderattributeofthe f:ajaxtag.
Similartothe executeattribute,the renderattributedefineswhichsectionsofthepagewillbe
updated.Thevalueofa renderattributecanbeoneormorecomponent idvalues,oneofthe
keywords @this,@all,@none,and @form,oranELexpression.Inthefollowingexample,the
renderattributesimplyidentifiesanoutputcomponenttobedisplayedwhentheAjaxaction
hassuccessfullycompleted.HandlingErrors
TheJavaEE6Tutorial • January2013 234
<h:commandButton id= "submit "value= "Submit ">
<f:ajax execute= "userNo "render= "result "/>
</h:commandButton><h:outputText id= "result "value= "#{userNumberBean.response} "/>
However,moreoftenthannot,the renderattributeislikelytobeassociatedwithan event
attribute.Inthefollowingexample,anoutputcomponentisdisplayedwhenthebuttoncomponentisclicked.
<h:commandButton id= "submit "value= "Submit ">
<f:ajax event= "click "execute= "userNo "render= "result "/>
</h:commandButton><h:outputText id= "result "value= "#{userNumberBean.response} "/>
Note–Behindthescenes,onceagainthe jsf.ajax.request() methodhandlestheresponse.It
registersaresponse-handlingcallbackwhentheoriginalrequestiscreated.Whentheresponseissentbacktotheclient,thecallbackisinvoked.Thiscallbackautomaticallyupdatestheclient-sideDOMtoreflecttherenderedresponse.
AjaxRequestLifecycle
AnAjaxrequestvariesfromothertypicalJavaServerFacesrequests,anditsprocessingisalsohandleddifferentlybytheJavaServerFaceslifecycle.
Asdescribedin
“PartialProcessingandPartialRendering”onpage216 ,whenanAjaxrequestis
received,thestateassociatedwiththatrequestiscapturedbythejavax.faces.context.PartialViewContext .Thisobjectprovidesaccesstoinformationsuch
aswhichcomponentsaretargetedforprocessing/rendering.The processPartial methodof
PartialViewContext usesthisinformationtoperformpartialcomponenttreeprocessingand
rendering.
Theexecuteattributeofthe f:ajaxtagidentifieswhichsegmentsoftheserversidecomponent
treeshouldbeprocessed.BecausecomponentscanbeuniquelyidentifiedintheJavaServerFacescomponenttree,itiseasytoidentifyandprocessasinglecomponent,afewcomponents,orawholetree.Thisismadepossiblebythe visitTree methodofthe
javax.faces.component.UIComponent class.Theidentifiedcomponentsthenrunthroughthe
JavaServerFacesrequestlifecyclephases.
Similartothe executeattribute,the renderattributeidentifieswhichsegmentsofthe
JavaServerFacescomponenttreeneedtoberenderedduringtherenderresponsephase.
Duringtherenderresponsephase,the renderattributeisexamined.Theidentified
componentsarefoundandaskedtorenderthemselvesandtheirchildren.Thecomponentsarethenpackagedupandsentbacktotheclientasaresponse.AjaxRequestLifecycle
Chapter11 • UsingAjaxwithJavaServerFacesTechnology 235
GroupingofComponents
TheprevioussectionsdescribehowtoassociateasingleUIcomponentwithAjaxfunctionality.
YoucanalsoassociateAjaxwithmorethanonecomponentatatimebygroupingthemtogetheronapage.Thefollowingexampleshowshowanumberofcomponentscanbegroupedbyusingthe f:ajaxtag.
<f:ajax>
<h:form>
<h:inputText id= "input1 "/>
<h:commandButton id= "Submit "/>
</h:form>
</f:ajax>
Intheexample,neithercomponentisassociatedwithanyAjax eventorrenderattributesyet.
Therefore,noactionwilltakeplaceincaseofuserinput.Youcanassociatetheabovecomponentswithan eventanda renderattributeasfollows:
<f:ajax event= "click "render= "@all">
<h:form>
<h:inputText id= "input1 "value= "#{user.name} "/>
<h:commandButton id= "Submit "/>
</h:form>
</f:ajax>
Intheupdatedexample,whentheuserclickseithercomponent,theupdatedresultswillbe
displayedforallcomponents.YoucanfurtherfinetunetheAjaxactionbyaddingspecificeventstoeachofthecomponents,inwhichcaseAjaxfunctionalitybecomescumulative.Considerthefollowingexample:
<f:ajax event= "click "render= "@all">
...<h:commandButton id= "Submit ">
<f:ajax event= "mouseover "/>
</h:commandButton>...
</f:ajax>
NowthebuttoncomponentwillfireanAjaxactionincaseofa mouseover eventaswellasa
mouseclickevent.
LoadingJavaScriptasaResource
TheJavaScriptresourcefilebundledwithJavaServerFacestechnologyisnamed jsf.jsandis
availableinthe javax.faces library.ThisresourcelibrarysupportsAjaxfunctionalityin
JavaServerFacesapplications.GroupingofComponents
TheJavaEE6Tutorial • January2013 236
Inordertousethisresourcedirectlywithacomponentorabeanclass,youneedtoexplicitly
loadtheresourcelibrary.Theresourcecanbeloadedinoneofthefollowingways:
■ByusingtheresourceAPIdirectlyinaFaceletspage
■Byusingthe javax.faces.application.ResourceDependency annotationandthe
resourceAPIinabeanclass
UsingJavaScriptAPIinaFaceletsApplication
TousethebundledJavaScriptresourceAPIdirectlyinawebapplication,suchasaFaceletspage,youneedtofirstidentifythedefaultJavaScriptresourceforthepagewiththehelpoftheh:outputScript tag.Forexample,considerthefollowingsectionofaFaceletspage:
<h:form>
<h:outputScript name= "jsf.js "library= "javax.faces "target= "head"/>
</h:form>
Specifyingthetargetas headcausesthescriptresourcetoberenderedwithinthe headelement
ontheHTMLpage.
Inthenextstep,identifythecomponenttowhichyouwouldliketoattachtheAjax
functionality.AddtheAjaxfunctionalitytothecomponentbyusingtheJavaScriptAPI.Forexample,considerthefollowing:
<h:form>
<h:outputScript name= "jsf.js "library= "javax.faces "target= "head">
<h:inputText id= "inputname "value= "#{userBean.name} "/>
<h:outputText id= "outputname "value= "#{userBean.name} "/>
<h:commandButton id= "submit "value= "Submit "
onclick= "jsf.ajax.request(this, event,
{execute:’inputname’,render:’outputname’});
return false; "/>
</h:form>
Thejsf.ajax.request methodtakesuptothreeparametersthatspecifysource,event,and
options.ThesourceparameteridentifiestheDOMelementthattriggeredtheAjaxrequest,typically this.TheoptionaleventparameteridentifiestheDOMeventthattriggeredthis
request.Theoptionaloptionsparametercontainsasetofname/valuepairsfrom
Table11–5 .
TABLE11–5 PossibleValuesfortheOptionsParameter
Name Value
execute Aspace-delimitedlistofclientidentifiersoroneofthekeywordslistedin Table11–2 .The
identifiersreferencethecomponentsthatwillbeprocessedduringtheexecutephaseofthelifecycle.LoadingJavaScriptasaResource
Chapter11 • UsingAjaxwithJavaServerFacesTechnology 237
TABLE11–5 PossibleValuesfortheOptionsParameter (Continued)
Name Value
render Aspace-delimitedlistofclientidentifiersoroneofthekeywordslistedin Table11–2 .The
identifiersreferencethecomponentsthatwillbeprocessedduringtherenderphaseofthelifecycle.
onevent AStringthatisthenameoftheJavaScriptfunctiontocallwhenaneventoccurs.
onerror AStringthatisthenameoftheJavaScriptfunctiontocallwhenanerroroccurs.
params Anobjectthatmayincludeadditionalparameterstoincludeintherequest.
Ifnoidentifierisspecified,thedefaultassumedkeywordforthe executeattributeis @this,and
forthe renderattributeitis @none.
YoucanalsoplacetheJavaScriptmethodinafileandincludeitasaresource.
Usingthe @ResourceDependency AnnotationinaBean
Class
Usethe javax.faces.application.ResourceDependency annotationtocausethebeanclass
toloadthedefault jsf.jslibrary.
ToloadtheAjaxresourcefromtheserverside,usethe jsf.ajax.request methodwithinthe
beanclass.Thismethodisusuallyusedwhencreatingacustomcomponentoracustomrendererforacomponent.
Thefollowingexampleshowshowtheresourceisloadedinabeanclass:
@ResourceDependency(name= "jsf.js "library= "javax.faces "target= "head")
Theajaxguessnumber ExampleApplication
TodemonstratetheadvantagesofusingAjax,revisitthe guessnumber examplefrom Chapter5,
“IntroductiontoFacelets.” IfyoumodifythisexampletouseAjax,theresponseneednotbe
displayedinthe response.xhtml page.Instead,anasynchronouscallismadetothebeanonthe
serverside,andtheresponseisdisplayedintheoriginatingpagebyexecutingjusttheinputcomponentratherthanbyformsubmission.
Thesourcecodeforthisapplicationisinthe tut-install /examples/web/ajaxguessnumber/
directory.Theajaxguessnumber ExampleApplication
TheJavaEE6Tutorial • January2013 238
Theajaxguessnumber SourceFiles
Thechangestothe guessnumber applicationoccurintwosourcefiles,aswellaswiththe
additionofaJavaScriptfile.
Theajaxgreeting.xhtml FaceletsPage
TheFaceletspagefor ajaxguessnumber ,web/ajaxgreeting.xhtml ,isalmostthesameasthe
greeting.xhtml pageforthe guessnumber application:
<h:head>
<h:outputStylesheet library= "css"name= "default.css "/>
<title>Ajax Guess Number Facelets Application</title>
</h:head><h:body>
<h:form id= "AjaxGuess ">
<h:outputScript name= "ui.js "target= "head"/>
<h:graphicImage library= "images "name= "wave.med.gif "
alt="Duke waving his hand "/>
<h2>
Hi, my name is Duke. I am thinking of a number from#{userNumberBean.minimum} to #{userNumberBean.maximum}.Can you guess it?
</h2><p>
<h:inputText
id="userNo "
title= "Type a number from 0 to 10: "
value= "#{userNumberBean.userNumber} ">
<f:validateLongRange
minimum= "#{userNumberBean.minimum} "
maximum= "#{userNumberBean.maximum} "/>
</h:inputText>
<h:commandButton id= "submit "value= "Submit ">
<!--<f:ajax execute= "userNo "render= "result errors1 "/>-->
<f:ajax execute= "userNo "render= "result errors1 "
onevent= "msg"/>
</h:commandButton>
</p><p><h:outputText id= "
result "style= "color:blue "
value= "#{userNumberBean.response} "/>
</p>
<h:message id= "errors1 "showSummary= "true"showDetail= "false "
style= "color: #d20005;
font-family: ’New Century Schoolbook’, serif;font-style: oblique;text-decoration: overline "
for="userNo "/>
</h:form>
</h:body>
Themostimportantchangeisinthe h:commandButton tag.The actionattributeisremoved
fromthetag,and f:ajaxtagisadded.Theajaxguessnumber ExampleApplication
Chapter11 • UsingAjaxwithJavaServerFacesTechnology 239
Thef:ajaxtagspecifiesthatwhenthebuttonisclicked,the h:inputText componentwiththe
idvalue userNoisexecuted.Thecomponentswiththe idvalues resultanderrors1arethen
rendered.Ifthatwasallyoudid(asinthecommented-outversionofthetag),youwouldseetheoutputfromboththe resultanderrors1components,althoughonlyoneoutputisvalid;ifa
validationerroroccurs,themanagedbeanisnotexecuted,sothe resultoutputisstale.
Tosolvethisproblem,thetagalsocallstheJavaScriptfunctionnamed msg,inthefile ui.js,as
describedinthenextsection.The h:outputScript tagatthetopoftheformcallsinthisscript.
Theui.jsJavaScriptFile
Theui.jsfilespecifiedinthe h:outputScript tagofthe ajaxgreeting.xhtml fileislocatedin
theweb/resources directoryoftheapplication.Thefilecontainsjustonefunction, msg:
var msg = function msg(data) {
var resultArea = document.getElementById( "AjaxGuess:result ");
var errorArea = document.getElementById( "AjaxGuess:errors1 ");
if (errorArea.innerHTML !== null && errorArea.innerHTML !== ""){
resultArea.innerHTML= "";
}
};
Themsgfunctionobtainsahandletoboththe resultanderrors1elements.Ifthe errors1
elementhasanycontent,thefunctionerasesthecontentofthe resultelement,sothestale
outputdoesnotappearinthepage.
TheUserNumberBean ManagedBean
Asmallchangeisalsomadeinthe UserNumberBean codesothattheoutputcomponentdoes
notdisplayanymessageforthedefault(null)valueoftheproperty response .Hereisthe
modifiedbeancode:
public String getResponse() {
if ((userNumber != null) && (userNumber.compareTo(randomInt) == 0)) {
return "Yay! You got it! ";
}if (userNumber == null) {
return null;
} else {
return "Sorry, "+ userNumber + "is incorrect. ";
}
}
Runningthe ajaxguessnumber Example
YoucanuseeitherNetBeansIDEorAnttobuild,package,deploy,andrunthe
ajaxguessnumber example.Theajaxguessnumber ExampleApplication
TheJavaEE6Tutorial • January2013 240
▼ToBuild,Package,andDeploythe ajaxguessnumber ExampleUsing
NetBeansIDE
Thisprocedurebuildstheapplicationintothe
tut-install /examples/web/ajaxguessnumber/build/web/ directory.Thecontentsofthis
directoryaredeployedtotheGlassFishServer.
FromtheFilemenu,chooseOpenProject.IntheOpenProjectdialog,navigateto:
tut-install /examples/web/
Selectthe ajaxguessnumber folder.
SelecttheOpenasMainProjectcheckbox.ClickOpenProject.IntheProjectstab,right-clickthe ajaxguessnumber projectandselectDeploy.
▼ToBuild,Package,andDeploythe ajaxguessnumber ExampleUsingAnt
Inaterminalwindow,goto:
tut-install /examples/web/ajaxguessnumber/
Typethefollowingcommand:
ant
Thiscommandcallsthe defaulttarget,whichbuildsandpackagestheapplicationintoaWAR
file,ajaxguessnumber.war ,locatedinthe distdirectory.
Typethefollowingcommand:
ant deploy
Typingthiscommanddeploys ajaxguessnumber.war totheGlassFishServer.
▼ToRunthe ajaxguessnumber Example
Inawebbrowser,typethefollowingURL:
http://localhost:8080/ajaxguessnumber
TypeavalueintheinputfieldandclickSubmit.
Ifthevalueisintherange0to10,amessagestateswhethertheguessiscorrectorincorrect.If
thevalueisoutsidethatrange,orifthevalueisnotanumber,anerrormessageappearsinred.1
2
3
456
1
2
3
1
2Theajaxguessnumber ExampleApplication
Chapter11 • UsingAjaxwithJavaServerFacesTechnology 241
ToseewhatwouldhappeniftheJavaScriptfunctionwerenotincluded,removethecomment
marksfromthefirst f:ajaxtagin ajaxgreeting.xhtml andplacethemaroundthesecondtag,
asfollows:
<f:ajax execute= "userNo "render= "result errors1 "/>
<!--<f:ajax execute= "userNo "render= "result errors1 "onevent= "msg"/>-->
Ifyouthenredeploytheapplication,youcanseethatstaleoutputfromvalidguessescontinues
toappearifyousubsequentlytypeerroneousinput.
FurtherInformationaboutAjaxinJavaServerFaces
Technology
FormoreinformationonAjaxinJavaServerFacesTechnology,see
■JavaServerFacesprojectwebsite:
http://javaserverfaces.java.net/
■JavaServerFacesJavaScriptLibraryAPIs:
http://javaserverfaces.java.net/nonav/docs/2.1/jsdocs/symbols/jsf.ajax.htmlFurtherInformationaboutAjaxinJavaServerFacesTechnology
TheJavaEE6Tutorial • January2013 242
CompositeComponents:AdvancedTopicsand
Example
ThischapterdescribestheadvancedfeaturesofcompositecomponentsinJavaServerFaces
technology.
AcompositecomponentisaspecialtypeofJavaServerFacestemplatethatactsasacomponent.
Ifyouarenewtocompositecomponents,see “CompositeComponents”onpage121 beforeyou
proceedwiththischapter.
Thefollowingtopicsareaddressedhere:
■“AttributesofaCompositeComponent”onpage243
■“InvokingaManagedBean”onpage244
■“ValidatingCompositeComponentValues”onpage245
■“The compositecomponentlogin ExampleApplication”onpage245
AttributesofaCompositeComponent
Youdefineanattributeofacompositecomponentbyusingthe composite:attribute tag.
Table12–1 liststhecommonlyusedattributesofthistag.
TABLE12–1 CommonlyUsedAttributesofthe composite:attribute Tag
Attribute Description
name Specifiesthenameofthecompositecomponentattributetobeusedintheusing
page.Alternatively,the nameattributecanspecifystandardeventhandlerssuchas
action,actionListener ,andmanagedbean.
default Specifiesthedefaultvalueofthecompositecomponentattribute.
required Specifieswhetheritismandatorytoprovideavaluefortheattribute.12CHAPTER 12
243
TABLE12–1 CommonlyUsedAttributesofthe composite:attribute Tag(Continued)
Attribute Description
method-signature Specifiesasubclassof java.lang.Object asthetypeofthecomposite
component’sattribute.The method-signature elementdeclaresthatthe
compositecomponentattributeisamethodexpression.The typeattributeand
themethod-signature attributearemutuallyexclusive.Ifyouspecifyboth,
method-signature isignored.Thedefaulttypeofanattributeis
java.lang.Object .
Note–Methodexpressionsaresimilartovalueexpressions,butratherthan
supportingthedynamicretrievalandsettingofproperties,methodexpressionssupporttheinvocationofamethodofanarbitraryobject,passingaspecifiedsetofparametersandreturningtheresultfromthecalledmethod(ifany).
type Specifiesafullyqualifiedclassnameasthetypeoftheattribute.The typeattribute
andthe method-signature attributearemutuallyexclusive.Ifyouspecifyboth,
method-signature isignored.Thedefaulttypeofanattributeis
java.lang.Object .
Thefollowingcodesnippetdefinesacompositecomponentattributeandassignsitadefault
value:
<composite:attribute name= "username "default= "admin "/>
Thefollowingcodesnippetusesthe method-signature element:
<composite:attribute name= "myaction "
method-signature= "java.lang.String action() "/>
Thefollowingcodesnippetusesthe typeelement:
<composite:attribute name= "dateofjoining "type= "java.util.Date "/>
InvokingaManagedBean
Toenableacompositecomponenttohandleserver-sidedata,youcaninvokeamanagedbean
inoneofthefollowingways:
■Passthereferenceofthemanagedbeantothecompositecomponent.
■Directlyusethepropertiesofthemanagedbean.
Theexampleapplicationdescribedin “The compositecomponentlogin ExampleApplication”
onpage245 showshowtouseamanagedbeanwithacompositecomponentbypassingthe
referenceofthemanagedbeantothecomponent.InvokingaManagedBean
TheJavaEE6Tutorial • January2013 244
ValidatingCompositeComponentValues
JavaServerFacesprovidesthefollowingtagsforvalidatingvaluesofinputcomponents.These
tagscanbeusedwiththe composite:valueHolder orthe composite:editableValueHolder
tag.
Table12–2 listscommonlyusedvalidatortags.
TABLE12–2 ValidatorTags
TagName Description
f:validateBean DelegatesthevalidationofthelocalvaluetotheBeanValidationAPI.
f:validateRegex Usesthe patternattributetovalidatethewrappingcomponent.Theentire
patternismatchedagainstthe Stringvalueofthecomponent.Ifit
matches,itisvalid.
f:validateRequired Enforcesthepresenceofavalue.Hasthesameeffectassettingthe
required elementofacompositecomponent’sattributetotrue.
Thecompositecomponentlogin ExampleApplication
Thecompositecomponentlogin applicationcreatesacompositecomponentthatacceptsauser
nameandapassword.Thecomponentinteractswithamanagedbean.Thecomponentstorestheusernameandpasswordinthemanagedbean,retrievesthevaluesfromthebean,anddisplaysthesevaluesontheLoginpage.
Thecompositecomponentlogin applicationhasacompositecomponentfile,ausingpage,and
amanagedbean.
Thesourcecodeforthisapplicationisinthe
tut-install /examples/web/compositecomponentlogin/ directory.
TheCompositeComponentFile
ThecompositecomponentfileisanXHTMLfile,
/web/resources/ezcomp/LoginPanel.xhtml .Ithasa composite:interface sectionthat
declaresthelabelsfortheusername,password,andloginbutton.Italsodeclaresamanagedbean,whichdefinespropertiesfortheusernameandpassword.
<composite:interface>
<composite:attribute name= "namePrompt "default= "User Name: "/>
<composite:attribute name= "passwordPrompt "default= "Password: "/>
<composite:attribute name= "loginButtonText "default= "Log In "/>Thecompositecomponentlogin ExampleApplication
Chapter12 • CompositeComponents:AdvancedTopicsandExample 245
<composite:attribute name= "loginAction "
method-signature= "java.lang.String action() "/>
<composite:attribute name= "myLoginBean "/>
<composite:editableValueHolder name= "vals"targets= "form:name "/>
<composite:editableValueHolder name= "passwordVal "targets= "form:password "/>
</composite:interface>
Thecompositecomponentimplementationacceptsinputvaluesfortheusernameand
passwordpropertiesofthemanagedbean.
<composite:implementation>
<h:form id= "form">
<table columns= "2"role= "presentation ">
<tr>
<td><h:outputLabel for= "name"
value= "#{cc.attrs.namePrompt} "/></td>
<td><h:inputText id= "name"
value= "#{cc.attrs.myLoginBean.name} "
required= "true"/></td>
</tr><tr>
<td><h:outputLabel for= "password "
value= "#{cc.attrs.passwordPrompt} "/></td>
<td><h:inputSecret id= "password "
value= "#{cc.attrs.myLoginBean.password} "
required= "true"/></td>
</tr>
</table><p>
<h:commandButton id= "loginButton "
value= "#{cc.attrs.loginButtonText} "
action= "#{cc.attrs.loginAction} "/>
</p>
</h:form>...
</composite:implementation>
TheUsingPage
Theusingpageinthisexampleapplication, web/index.xhtml ,isanXHTMLfilethatinvokes
thelogincompositecomponentfilealongwiththemanagedbean.Itvalidatestheuser’sinput.
<div id= "compositecomponent ">
<ez:LoginPanel myLoginBean= "#{myLoginBean} "
loginAction= "#{myLoginBean.login} ">
<f:validateLength maximum= "10"minimum= "4"for="vals"/>
<f:validateRegex pattern= "((?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{4,10}) "
for="passwordVal "/>
</ez:LoginPanel>
</div>
Thef:validateLength tagrequirestheusernametohavefrom4to10characters.
Thef:validateRegex tagrequiresthepasswordtohavefrom4to10charactersandtocontain
atleastonedigit,onelowercaseletter,andoneuppercaseletter.Thecompositecomponentlogin ExampleApplication
TheJavaEE6Tutorial • January2013 246
TheManagedBean
Themanagedbean, src/java/compositecomponentlogin/MyLoginBean.java ,definesa
methodcalled login,whichretrievesthevaluesoftheusernameandpassword.
@ManagedBean
@RequestScopedpublic class MyLoginBean {
private String name;
private String password;
public MyLoginBean() {
}
public myloginBean(String name, String password) {
this.name = name;this.password = password;
}
public String getPassword() {
return password;
}
public void setPassword(String newValue) {
password = newValue;
}
public String getName() {
return name;
}
public void setName(String newValue) {
name = newValue;
}
public String login() {
if (getName().equals( "javaee ")) {
String msg = "Success. Your user name is "+ getName()
+", and your password is "+ getPassword();
FacesMessage facesMsg = new FacesMessage(msg, msg);FacesContext.getCurrentInstance().addMessage(null, facesMsg);return "index ";
} else {
String msg = "Failure. Your user name is "+ getName()
+", and your password is "+ getPassword();
FacesMessage facesMsg =
new FacesMessage(FacesMessage.SEVERITY_ERROR, msg, msg);
FacesContext.getCurrentInstance().addMessage(null, facesMsg);return "index ";
}
}
}Thecompositecomponentlogin ExampleApplication
Chapter12 • CompositeComponents:AdvancedTopicsandExample 247
Runningthe compositecomponentlogin Example
YoucanuseeitherNetBeansIDEorAnttobuild,package,deploy,andrunthe
compositecomponentlogin example.
▼ToBuild,Package,andDeploythe compositecomponentlogin Example
UsingNetBeansIDE
FromtheFilemenu,chooseOpenProject.
IntheOpenProjectdialog,navigateto:
tut-install /examples/web/
Selectthe compositecomponentlogin folder.
SelecttheOpenasMainProjectcheckbox.ClickOpenProject.IntheProjectstab,right-click compositecomponentlogin andselectDeploy.
▼ToBuild,Package,andDeploythe compositecomponentlogin Example
UsingAnt
Inaterminalwindow,goto:
tut-install /examples/web/compositecomponentlogin/
Typethefollowingcommand:
ant
Typethefollowingcommand:
ant deploy
▼ToRunthe compositecomponentlogin Example
Inawebbrowser,typethefollowingURL:
http://localhost:8080/compositecomponentlogin/
TheLoginComponentpageopens.
TypevaluesintheUserNameandPasswordfields,thenclicktheLogInbutton.
Becauseofthewaythe loginmethodiscoded,theloginsucceedsonlyiftheusernameis
javaee.1
2
3
456
1
23
1
2Thecompositecomponentlogin ExampleApplication
TheJavaEE6Tutorial • January2013 248
Becauseofthe f:validateLength tag,iftheusernamehasfewerthan4charactersormore
than10characters,avalidationerrormessageappears.
Becauseofthe f:validateRegex tag,ifthepasswordhasfewerthan4charactersormorethan
10charactersordoesnotcontainatleastonedigit,onelowercaseletter,andoneuppercaseletter,a“RegexPatternnotmatched”errormessageappears.Thecompositecomponentlogin ExampleApplication
Chapter12 • CompositeComponents:AdvancedTopicsandExample 249
250
CreatingCustomUIComponentsandOther
CustomObjects
JavaServerFacestechnologyoffersabasicsetofstandard,reusableUIcomponentsthatenable
quickandeasyconstructionofuserinterfacesforwebapplications.Thesecomponentsmostlymapone-to-onetotheelementsinHTML4.However,anapplicationoftenrequiresacomponentthathasadditionalfunctionalityorrequiresacompletelynewcomponent.JavaServerFacestechnologyallowsextensionofstandardcomponentstoenhancetheirfunctionalityortocreatecustomcomponents.Arichecosystemofthirdpartycomponentlibrariesisbuiltonthisextensioncapability,butitisbeyondthescopeofthistutorialtoexaminethem.Awebsearchfor“JSFComponentLibraries”isagoodstartingpointtolearnmoreaboutthisimportantaspectofusingJavaServerFacestechnology.
Inadditiontoextendingthefunctionalityofstandardcomponents,acomponentwritermight
wanttogiveapageauthortheabilitytochangetheappearanceofthecomponentonthepageortoalterlistenerbehavior.Alternatively,thecomponentwritermightwanttorenderacomponenttoadifferentkindofclientdevicetype,suchasasmartphoneoratabletinsteadofadesktopcomputer.EnabledbytheflexibleJavaServerFacesarchitecture,acomponentwritercanseparatethedefinitionofthecomponentbehaviorfromitsappearancebydelegatingtherenderingofthecomponenttoaseparaterenderer.Inthisway,acomponentwritercandefinethebehaviorofacustomcomponentoncebutcreatemultiplerenderers,eachofwhichdefinesadifferentwaytorenderthecomponenttoaparticularkindofclientdevice.
Ajavax.faces.component.UIComponent isaJavaclassthatisresponsibleforrepresentinga
self-containedpieceoftheuserinterfaceduringtherequestprocessinglifecycle.Itisintendedtorepresentthemeaningofthecomponent;thevisualrepresentationofthecomponentistheresponsibilityofthe javax.faces.render.Renderer .Therecanbemultipleinstancesofthe
same UIComponent classinanygivenJavaServerFacesview,justastherecanbemultiple
instancesofanyJavaclassinanygivenJavaprogram.
JavaServerFacestechnologyprovidestheabilitytocreatecustomcomponentsbyextendingthe
UIComponent class,thebaseclassforallstandardUIcomponents.Acustomcomponentcanbe
usedanywhereanordinarycomponentcanbeused,suchaswithinacompositecomponent.AUIComponent isidentifiedbytwonames: component-family specifiesthepurposeofthe13CHAPTER 13
251
component(inputoroutput,forinstance),while component-type indicatesthespecific
purposeofacomponent,suchasatextinputfieldoracommandbutton.
ARenderer isahelpertothe UIComponent thatdealswithhowthatspecific UIComponent class
shouldappearinaspecifickindofclientdevice.Likecomponents,renderersareidentifiedbytwonames: render-kit-id andrenderer-type .Arenderkitisjustabucketintowhicha
particulargroupofrenderersisplaced,andthe render-kit-id identifiesthegroup.Most
JavaServerFacescomponentlibrariesprovidetheirownrenderkits.
Ajavax.faces.view.facelets.Tag objectisahelpertothe UIComponent andRenderer that
allowsthepageauthortoincludeaninstanceofa UIComponent inaJavaServerFacesview.Atag
representsaspecificcombinationof component-type andrenderer-type .
See
“Component,Renderer,andTagCombinations”onpage255 forinformationonhow
components,renderers,andtagsinteract.
ThischapterusestheimagemapcomponentfromtheDuke'sBookstorecasestudyexampleto
explainhowyoucancreatesimplecustomcomponents,customrenderers,andassociatedcustomtags,andtakecareofalltheotherdetailsassociatedwithusingthecomponentsandrenderersinanapplication.See
Chapter51,“Duke’sBookstoreCaseStudyExample,” formore
informationaboutthisexample.
Thechapteralsodescribeshowtocreateothercustomobjects:customconverters,custom
listeners,andcustomvalidators.Italsodescribeshowtobindcomponentvaluesandinstancestodataobjectsandhowtobindcustomobjectstomanagedbeanproperties.
Thefollowingtopicsareaddressedhere:
■“DeterminingWhetherYouNeedaCustomComponentorRenderer”onpage253
■“UnderstandingtheImageMapExample”onpage256
■“StepsforCreatingaCustomComponent”onpage261
■“CreatingCustomComponentClasses”onpage262
■“DelegatingRenderingtoaRenderer”onpage270
■“ImplementinganEventListener”onpage273
■“HandlingEventsforCustomComponents”onpage275
■“DefiningtheCustomComponentTaginaTagLibraryDescriptor”onpage276
■“UsingaCustomComponent”onpage277
■“CreatingandUsingaCustomConverter”onpage279
■“CreatingandUsingaCustomValidator”onpage283
■“BindingComponentValuesandInstancestoManagedBeanProperties”onpage288
■“BindingConverters,Listeners,andValidatorstoManagedBeanProperties”onpage293CreatingCustomUIComponentsandOtherCustomObjects
TheJavaEE6Tutorial • January2013 252
DeterminingWhetherYouNeedaCustomComponentor
Renderer
TheJavaServerFacesimplementationsupportsaverybasicsetofcomponentsandassociated
renderers.Thissectionhelpsyoutodecidewhetheryoucanusestandardcomponentsandrenderersinyourapplicationorneedacustomcomponentorcustomrenderer.
WhentoUseaCustomComponent
AcomponentclassdefinesthestateandbehaviorofaUIcomponent.Thisbehaviorincludesconvertingthevalueofacomponenttotheappropriatemarkup,queuingeventsoncomponents,performingvalidation,andanyotherbehaviorrelatedtohowthecomponentinteractswiththebrowserandtherequestprocessinglifecycle.
Youneedtocreateacustomcomponentinthefollowingsituations:
■Youneedtoaddnewbehaviortoastandardcomponent,suchasgeneratinganadditional
typeofevent(forexample,notifyinganotherpartofthepagethatsomethingchangedinthiscomponentasaresultofuserinteraction).
■Youneedtotakeadifferentactionintherequestprocessingofthevalueofacomponentfromwhatisavailableinanyoftheexistingstandardcomponents.
■YouwanttotakeadvantageofanHTMLcapabilityofferedbyyourtargetbrowser,butnoneofthestandardJavaServerFacescomponentstakeadvantageofthecapabilityinthewayyouwant,ifatall.ThecurrentreleasedoesnotcontainstandardcomponentsforcomplexHTMLcomponents,suchasframes;however,becauseoftheextensibilityofthecomponentarchitecture,youcanuseJavaServerFacestechnologytocreatecomponentslikethese.TheDuke'sBookstorecasestudycreatescustomcomponentsthatcorrespondtotheHTML map
andareatags.
■Youneedtorendertoanon-HTMLclientthatrequiresextracomponentsnotsupportedby
HTML.Eventually,thestandardHTMLrenderkitwillprovidesupportforallstandardHTMLcomponents.However,ifyouarerenderingtoadifferentclient,suchasaphone,youmightneedtocreatecustomcomponentstorepresentthecontrolsuniquelysupportedbytheclient.Forexample,somecomponentarchitecturesforwirelessclientsincludesupportfortickersandprogressbars,whicharenotavailableonanHTMLclient.Inthiscase,youmightalsoneedacustomrendereralongwiththecomponent;oryoumightneedonlyacustomrenderer.DeterminingWhetherYouNeedaCustomComponentorRenderer
Chapter13 • CreatingCustomUIComponentsandOtherCustomObjects 253
Youdonotneedtocreateacustomcomponentinthesecases:
■Youneedtoaggregatecomponentstocreateanewcomponentthathasitsownunique
behavior.Inthissituation,youcanuseacompositecomponenttocombineexistingstandardcomponents.Formoreinformationoncompositecomponents,see
“Composite
Components”onpage121 andChapter12,“CompositeComponents:AdvancedTopics
andExample.”
■Yousimplyneedtomanipulatedataonthecomponentoraddapplication-specificfunctionalitytoit.Inthissituation,youshouldcreateamanagedbeanforthispurposeand
bindittothestandardcomponentratherthancreateacustomcomponent.See
“Managed
BeansinJavaServerFacesTechnology”onpage189 formoreinformationonmanaged
beans.
■Youneedtoconvertacomponent’sdatatoatypenotsupportedbyitsrenderer.See “Using
theStandardConverters”onpage175 formoreinformationaboutconvertinga
component’sdata.
■Youneedtoperformvalidationonthecomponentdata.Standardvalidatorsandcustomvalidatorscanbeaddedtoacomponentbyusingthevalidatortagsfromthepage.See
“UsingtheStandardValidators”onpage183 and“CreatingandUsingaCustomValidator”
onpage283 formoreinformationaboutvalidatingacomponent’sdata.
■Youneedtoregistereventlistenersoncomponents.Youcaneitherregistereventlistenersoncomponentsusingthe f:valueChangeListener andf:actionListener tags,oryoucan
pointatanevent-processingmethodonamanagedbeanusingthecomponent’sactionListener orvalueChangeListener attributes.See
“ImplementinganEvent
Listener”onpage273 and“WritingManagedBeanMethods”onpage200 formore
information.
WhentoUseaCustomRenderer
Arenderer,whichgeneratesthemarkuptodisplayacomponentonawebpage,allowsyoutoseparatethesemanticsofacomponentfromitsappearance.Bykeepingthisseparation,youcansupportdifferentkindsofclientdeviceswiththesamekindofauthoringexperience.Youcanthinkofarendererasa“clientadapter.”Itproducesoutputsuitableforconsumptionanddisplaybytheclient,andacceptsinputfromtheclientwhentheuserinteractswiththatcomponent.
Ifyouarecreatingacustomcomponent,youneedtoensure,amongotherthings,thatyour
componentclassperformstheseoperationsthatarecentraltorenderingthecomponent:
■Decoding :Convertingtheincomingrequestparameterstothelocalvalueofthecomponent
■Encoding :Convertingthecurrentlocalvalueofthecomponentintothecorresponding
markupthatrepresentsitintheresponseDeterminingWhetherYouNeedaCustomComponentorRenderer
TheJavaEE6Tutorial • January2013 254
TheJavaServerFacesspecificationsupportstwoprogrammingmodelsforhandlingencoding
anddecoding:
■Directimplementation :Thecomponentclassitselfimplementsthedecodingand
encoding.
■Delegatedimplementation :Thecomponentclassdelegatestheimplementationof
encodinganddecodingtoaseparaterenderer.
Bydelegatingtheoperationstotherenderer,youhavetheoptionofassociatingyourcustom
componentwithdifferentrendererssothatyoucanrenderthecomponentondifferentclients.
Ifyoudon’tplantorenderaparticularcomponentondifferentclients,itmaybesimplertoletthecomponentclasshandletherendering.However,aseparaterendererenablesyoutopreservetheseparationofsemanticsfromappearance.TheDuke'sBookstoreapplicationseparatestherenderersfromthecomponents,althoughitrendersonlytoHTML4webbrowsers.
Ifyouaren’tsurewhetheryouwillneedtheflexibilityofferedbyseparaterenderersbutyou
wanttousethesimplerdirect-implementationapproach,youcanactuallyusebothmodels.Yourcomponentclasscanincludesomedefaultrenderingcode,butitcandelegaterenderingtoarendererifthereisone.
Component,Renderer,andTagCombinations
Whenyoucreateacustomcomponent,youcancreateacustomrenderertogowithit.Toassociatethecomponentwiththerendererandtoreferencethecomponentfromthepage,youwillalsoneedacustomtag.
Althoughyouneedtowritethecustomcomponentandrenderer,thereisnoneedtowritecode
foracustomtag(calledataghandler).Ifyouspecifythecomponentandrenderercombination,Faceletscreatesthetaghandlerautomatically.
Inraresituations,youmightuseacustomrendererwithastandardcomponentratherthana
customcomponent.Oryoumightuseacustomtagwithoutarendereroracomponent.Thissectiongivesexamplesofthesesituationsandsummarizeswhat’srequiredforacustomcomponent,renderer,andtag.
Youwoulduseacustomrendererwithoutacustomcomponentifyouwantedtoaddsome
client-sidevalidationonastandardcomponent.Youwouldimplementthevalidationcodewithaclient-sidescriptinglanguage,suchasJavaScript,andthenrendertheJavaScriptwiththecustomrenderer.Inthissituation,youneedacustomtagtogowiththerenderersothatitstaghandlercanregistertherendereronthestandardcomponent.
Customcomponentsaswellascustomrenderersneedcustomtagsassociatedwiththem.
However,youcanhaveacustomtagwithoutacustomrendererorcustomcomponent.Forexample,supposethatyouneedtocreateacustomvalidatorthatrequiresextraattributesontheDeterminingWhetherYouNeedaCustomComponentorRenderer
Chapter13 • CreatingCustomUIComponentsandOtherCustomObjects 255
validatortag.Inthiscase,thecustomtagcorrespondstoacustomvalidatorandnottoacustom
componentorcustomrenderer.Inanycase,youstillneedtoassociatethecustomtagwithaserver-sideobject.
Table13–1 summarizeswhatyoumustorcanassociatewithacustomcomponent,custom
renderer,orcustomtag.
TABLE13–1 RequirementsforCustomComponents,CustomRenderers,andCustomTags
CustomItem MustHave CanHave
Customcomponent Customtag Customrendererorstandardrenderer
Customrenderer Customtag Customcomponentorstandard
component
CustomJavaServer
FacestagSomeserver-sideobject,likeacomponent,
acustomrenderer,orcustomvalidatorCustomcomponentorstandard
componentassociatedwithacustomrenderer
UnderstandingtheImageMapExample
Duke'sBookstoreincludesacustomimagemapcomponentonthe index.xhtml page.This
imagemapdisplaysaselectionofsixbooktitles.Whentheuserclicksoneofthebooktitlesintheimagemap,theapplicationgoestoapagethatdisplaysthetitleoftheselectedbookaswellasinformationaboutafeaturedbook.Thepageallowstheusertoaddeitherbook(ornone)totheshoppingcart.
WhyUseJavaServerFacesTechnologytoImplement
anImageMap?
JavaServerFacestechnologyisanidealframeworktouseforimplementingthiskindofimage
mapbecauseitcanperformtheworkthatmustbedoneontheserverwithoutrequiringyoutocreateaserver-sideimagemap.
Ingeneral,client-sideimagemapsarepreferredoverserver-sideimagemapsforseveral
reasons.Onereasonisthattheclient-sideimagemapallowsthebrowsertoprovideimmediatefeedbackwhenauserpositionsthemouseoverahotspot.Anotherreasonisthatclient-sideimagemapsperformbetterbecausetheydon’trequireround-tripstotheserver.However,insomesituations,yourimagemapmightneedtoaccesstheservertoretrievedataortochangetheappearanceofnon-formcontrols,tasksthataclient-sideimagemapcannotdo.UnderstandingtheImageMapExample
TheJavaEE6Tutorial • January2013 256
BecausetheimagemapcustomcomponentusesJavaServerFacestechnology,ithasthebestof
bothstylesofimagemaps:Itcanhandlethepartsoftheapplicationthatneedtobeperformedontheserver,whileallowingtheotherpartsoftheapplicationtobeperformedontheclientside.
UnderstandingtheRenderedHTML
HereisanabbreviatedversionoftheformpartoftheHTMLpagethattheapplicationneedstorender:
<form id= "j_idt13 "name= "j_idt13 "method= "post"
action= "/dukesbookstore/faces/index.xhtml "... >
...<img id= "j_idt13:mapImage "
src="/dukesbookstore/faces/javax.faces.resource/book_all.jpg?ln=images "
alt="Choose a Book from our Catalog "
usemap= "#bookMap "/>
...<map name= "bookMap ">
<area alt= "Duke"
coords= "67,23,212,268 "
shape= "rect"
onmouseout=
"document.forms[0][’j_idt13:mapImage’].src= ’resources/images/book_all.jpg ’"
onmouseover=
"document.forms[0][’j_idt13:mapImage’].src=’resources/images/book_201.jpg’ "
onclick=
"document.forms[0][’bookMap_current’].value=’Duke’; document.forms[0].submit() "
/>...<input type= "hidden "name= "bookMap_current ">
</map>...
</form>
Theimgtagassociatesanimage( book_all.jpg )withtheimagemapreferencedinthe usemap
attributevalue.
Themaptagspecifiestheimagemapandcontainsasetof areatags.
Each areatagspecifiesaregionoftheimagemap.The onmouseover ,onmouseout ,and onclick
attributesdefinewhichJavaScriptcodeisexecutedwhentheseeventsoccur.Whentheusermovesthemouseoveraregion,the onmouseover functionassociatedwiththeregiondisplays
themapwiththatregionhighlighted.Whentheusermovesthemouseoutofaregion,theonmouseout functionredisplaystheoriginalimage.Iftheuserclicksonaregion,the onclick
functionsetsthevalueofthe inputtagtotheIDoftheselectedareaandsubmitsthepage.
Theinputtagrepresentsahiddencontrolthatstoresthevalueofthecurrentlyselectedarea
betweenclient-serverexchangessothattheserver-sidecomponentclassescanretrievethevalue.UnderstandingtheImageMapExample
Chapter13 • CreatingCustomUIComponentsandOtherCustomObjects 257
Theserver-sideobjectsretrievethevalueof bookMap_current andsetthelocaleinthe
javax.faces.context.FacesContext instanceaccordingtotheregionthatwasselected.
UnderstandingtheFaceletsPage
HereisanabbreviatedformoftheFaceletspagethattheimagemapcomponentusestogenerate
theHTMLpageshownintheprecedingsection.Itusescustom bookstore:map and
bookstore:area tagstorepresentthecustomcomponents:
<h:form>
...<h:graphicImage id= "mapImage "
name= "book_all.jpg "
library= "images "
alt="#{bundle.ChooseBook} "
usemap= "#bookMap "/>
<bookstore:map id= "bookMap "
current= "map1"
immediate= "true"
action= "bookstore ">
<f:actionListener
type= "dukesbookstore.listeners.MapBookChangeListener "/>
<bookstore:area id= "map1"value= "#{Book201} "
onmouseover= "resources/images/book_201.jpg "
onmouseout= "resources/images/book_all.jpg "
targetImage= "mapImage "/>
<bookstore:area id= "map2"value= "#{Book202} "
onmouseover= "resources/images/book_202.jpg "
onmouseout= "resources/images/book_all.jpg "
targetImage= "mapImage "/>
...
</bookstore:map>...
</h:form>
Thealtattributeofthe h:graphicImage tagmapstothelocalizedstring "Choose a Book from
our Catalog ".
Thef:actionListener tagwithinthe bookstore:map tagpointstoalistenerclassforanaction
event.The processAction methodofthelistenerplacesthebookIDfortheselectedmaparea
intothesessionmap.Thewaythiseventishandledisexplainedmorein “HandlingEventsfor
CustomComponents”onpage275 .
Theactionattributeofthe bookstore:map tagspecifiesalogicaloutcome String,
"bookstore ",whichbyimplicitnavigationrulessendstheapplicationtothepage
bookstore.xhtml .Formoreinformationonnavigation,seethesection “Configuring
NavigationRules”onpage313 .
Theimmediate attributeofthe bookstore:map tagissetto true,whichindicatesthatthe
default javax.faces.event.ActionListener implementationshouldexecuteduringthe
ApplyRequestValuesphaseoftherequest-processinglifecycle,insteadofwaitingfortheUnderstandingtheImageMapExample
TheJavaEE6Tutorial • January2013 258
InvokeApplicationphase.Becausetherequestresultingfromclickingthemapdoesnotrequire
anyvalidation,dataconversion,orserver-sideobjectupdates,itmakessensetoskipdirectlytotheInvokeApplicationphase.
Thecurrentattributeofthe bookstore:map tagissettothedefaultarea,whichis map1(the
bookMyEarlyYears:GrowingUponStar7 ,byDuke).
Noticethatthe bookstore:area tagsdonotcontainanyoftheJavaScript,coordinate,orshape
datathatisdisplayedontheHTMLpage.TheJavaScriptisgeneratedbythedukesbookstore.renderers.AreaRenderer class.The onmouseover andonmouseout attribute
valuesindicatetheimagetobeloadedwhentheseeventsoccur.HowtheJavaScriptisgeneratedisexplainedmorein
“PerformingEncoding”onpage265 .
Thecoordinate,shape,andalternatetextdataareobtainedthroughthe valueattribute,whose
valuereferstoanattributeinapplicationscope.Thevalueofthisattributeisabean,whichstoresthe coords,shape,and altdata.Howthesebeansarestoredintheapplicationscopeis
explainedmoreinthenextsection.
ConfiguringModelData
InaJavaServerFacesapplication,datasuchasthecoordinatesofahotspotofanimagemapisretrievedfromthe valueattributethroughabean.However,theshapeandcoordinatesofa
hotspotshouldbedefinedtogetherbecausethecoordinatesareinterpreteddifferentlydependingonwhatshapethehotspotis.Becauseacomponent’svaluecanbeboundonlytooneproperty,the valueattributecannotrefertoboththeshapeandthecoordinates.
Tosolvethisproblem,theapplicationencapsulatesallofthisinformationinasetof ImageArea
objects.Theseobjectsareinitializedintoapplicationscopebythemanagedbeancreationfacility(see
“ManagedBeansinJavaServerFacesTechnology”onpage189 ).Hereispartofthe
managedbeandeclarationforthe ImageArea beancorrespondingtotheSouthAmerica
hotspot:
<managed-bean eager= "true">
...<managed-bean-name> Book201 </managed-bean-name><managed-bean-class> dukesbookstore.model.ImageArea /managed-bean-class><managed-bean-scope> application </managed-bean-scope><managed-property>
...<property-name>shape</property-name><value>rect</value>
</managed-property><managed-property>
...<property-name>alt</property-name><value>Duke</value>
</managed-property><managed-property>UnderstandingtheImageMapExample
Chapter13 • CreatingCustomUIComponentsandOtherCustomObjects 259
...
<property-name>coords</property-name><value>67,23,212,268</value>
</managed-property>
</managed-bean>
Formoreinformationoninitializingmanagedbeanswiththemanagedbeancreationfacility,
seethesection “ApplicationConfigurationResourceFile”onpage297 .
Thevalueattributesofthe bookstore:area tagsrefertothebeansintheapplicationscope,as
showninthis bookstore:area tagfrom index.xhtml :
<bookstore:area id= "map1"value ="#{Book201} "
onmouseover= "resources/images/book_201.jpg "
onmouseout= "resources/images/book_all.jpg "
targetImage= "mapImage "/>
Toreferencethe ImageArea modelobjectbeanvaluesfromthecomponentclass,you
implementa getValue methodinthecomponentclass.Thismethodcalls super.getValue .
Thesuperclassof tut-install /examples/case-studies/dukes-bookstore/
src/java/dukesbookstore/components/AreaComponent.java ,UIOutput ,hasa getValue
methodthatdoestheworkoffindingthe ImageArea objectassociatedwith AreaComponent .
TheAreaRenderer class,whichneedstorenderthe alt,shape,and coordsvaluesfromthe
ImageArea object,callsthe getValue methodof AreaComponent toretrievethe ImageArea
object.
ImageArea iarea = (ImageArea) area.getValue();
ImageArea isasimplebean,soyoucanaccesstheshape,coordinates,andalternativetextvalues
bycallingtheappropriateaccessormethodsof ImageArea .“CreatingtheRendererClass”on
page270explainshowtodothisinthe AreaRenderer class.
SummaryoftheImageMapApplicationClasses
Table13–2 summarizesalltheclassesneededtoimplementtheimagemapcomponent.
TABLE13–2 ImageMapClasses
Class Function
AreaSelectedEvent Thejavax.faces.event.ActionEvent indicatingthatan AreaComponent from
theMapComponent hasbeenselected.
AreaComponent Theclassthatdefines AreaComponent ,whichcorrespondstothe bookstore:area
customtag.
MapComponent Theclassthatdefines MapComponent ,whichcorrespondstothe bookstore:map
customtag.UnderstandingtheImageMapExample
TheJavaEE6Tutorial • January2013 260
TABLE13–2 ImageMapClasses (Continued)
Class Function
AreaRenderer This javax.faces.render.Renderer performsthedelegatedrenderingfor
AreaComponent .
ImageArea Thebeanthatstorestheshapeandcoordinatesofthehotspots.
MapBookChangeListener Theactionlistenerforthe MapComponent .
TheDuke'sBookstoresourcedirectory,called bookstore-dir ,is
tut-install /examples/case-studies/dukes-bookstore/src/java/dukesbookstore/ .The
eventandlistenerclassesarelocatedin bookstore-dir /listeners/ .Thecomponentclassesare
locatedin bookstore-dir /components/ .Therendererclassesarelocatedin
bookstore-dir /renderers/ .ImageArea islocatedin bookstore-dir /model/.
StepsforCreatingaCustomComponent
Youcanapplythefollowingstepswhiledevelopingyourowncustomcomponent.
1. Createacustomcomponentclassthatdoesthefollowing:
a. Overridesthe getFamily methodtoreturnthecomponentfamily,whichisusedtolook
uprenderersthatcanrenderthecomponent.
b. Includestherenderingcodeordelegatesittoarenderer(explainedinstep2).c. Enablescomponentattributestoacceptexpressions.d. Queuesaneventonthecomponentifthecomponentgeneratesevents.e. Savesandrestoresthecomponentstate.
2. Delegaterenderingtoarendererifyourcomponentdoesnothandletherendering.Todo
this:
a. Createacustomrendererclassbyextending javax.faces.render.Renderer .
b. Registertherenderertoarenderkit.
3. Registerthecomponent.4. Createaneventhandlerifyourcomponentgeneratesevents.5. Createataglibrarydescriptor(TLD)thatdefinesthecustomtag.
See
“RegisteringaCustomComponent”onpage319 and“RegisteringaCustomRendererwith
aRenderKit”onpage317 forinformationonregisteringthecustomcomponentandthe
renderer.Thesection “UsingaCustomComponent”onpage277 discusseshowtousethe
customcomponentinaJavaServerFacespage.StepsforCreatingaCustomComponent
Chapter13 • CreatingCustomUIComponentsandOtherCustomObjects 261
CreatingCustomComponentClasses
Asexplainedin “WhentoUseaCustomComponent”onpage253 ,acomponentclassdefines
thestateandbehaviorofaUIcomponent.Thestateinformationincludesthecomponent’stype,identifier,andlocalvalue.Thebehaviordefinedbythecomponentclassincludesthefollowing:
■Decoding(convertingtherequestparametertothecomponent’slocalvalue)
■Encoding(convertingthelocalvalueintothecorrespondingmarkup)
■Savingthestateofthecomponent
■Updatingthebeanvaluewiththelocalvalue
■Processingvalidationonthelocalvalue
■Queueingevents
Thejavax.faces.component.UIComponentBase classdefinesthedefaultbehaviorofa
componentclass.AlltheclassesrepresentingthestandardcomponentsextendfromUIComponentBase .Theseclassesaddtheirownbehaviordefinitions,asyourcustom
componentclasswilldo.
Yourcustomcomponentclassmusteitherextend UIComponentBase directlyorextendaclass
representingoneofthestandardcomponents.Theseclassesarelocatedinthejavax.faces.component packageandtheirnamesbeginwith UI.
Ifyourcustomcomponentservesthesamepurposeasastandardcomponent,youshould
extendthatstandardcomponentratherthandirectlyextend UIComponentBase .Forexample,
supposeyouwanttocreateaneditablemenucomponent.Itmakessensetohavethiscomponentextend UISelectOne ratherthan UIComponentBase becauseyoucanreusethe
behavioralreadydefinedin UISelectOne .Theonlynewfunctionalityyouneedtodefineisto
makethemenueditable.
Whetheryoudecidetohaveyourcomponentextend UIComponentBase orastandard
component,youmightalsowantyourcomponenttoimplementoneormoreofthese
behavioralinterfacesdefinedinthe javax.faces.component package:
■ActionSource :Indicatesthatthecomponentcanfirea javax.faces.event.ActionEvent .
■ActionSource2 :Extends ActionSource andallowscomponentpropertiesreferencing
methodsthathandleactioneventstousemethodexpressionsasdefinedbytheunifiedEL.
■EditableValueHolder :Extends ValueHolder andspecifiesadditionalfeaturesforeditable
components,suchasvalidationandemittingvalue-changeevents.
■NamingContainer :Mandatesthateachcomponentrootedatthiscomponenthaveaunique
ID.
■StateHolder :Denotesthatacomponenthasstatethatmustbesavedbetweenrequests.
■ValueHolder :Indicatesthatthecomponentmaintainsalocalvalueaswellastheoptionof
accessingdatainthemodeltier.CreatingCustomComponentClasses
TheJavaEE6Tutorial • January2013 262
Ifyourcomponentextends UIComponentBase ,itautomaticallyimplementsonly StateHolder .
Becauseallcomponentsdirectlyorindirectlyextend UIComponentBase ,theyallimplement
StateHolder .Anycomponentthatimplements StateHolder alsoimplementsthe
StateHelper interface,whichextends StateHolder anddefinesa Map-likecontractthatmakes
iteasyforcomponentstosaveandrestoreapartialviewstate.
Ifyourcomponentextendsoneoftheotherstandardcomponents,itmightalsoimplement
otherbehavioralinterfacesinadditionto StateHolder .Ifyourcomponentextends UICommand ,
itautomaticallyimplements ActionSource2 .Ifyourcomponentextends UIOutput oroneof
thecomponentclassesthatextend UIOutput ,itautomaticallyimplements ValueHolder .Ifyour
componentextends UIInput,itautomaticallyimplements EditableValueHolder and
ValueHolder .SeetheJavaServerFacesAPIdocumentationtofindoutwhattheother
componentclassesimplement.
Youcanalsomakeyourcomponentexplicitlyimplementabehavioralinterfacethatitdoesn’t
alreadybyvirtueofextendingaparticularstandardcomponent.Forexample,ifyouhaveacomponentthatextends UIInputandyouwantittofireactionevents,youmustmakeit
explicitlyimplement ActionSource2 becausea UIInputcomponentdoesn’tautomatically
implementthisinterface.
TheDuke'sBookstoreimagemapexamplehastwocomponentclasses: AreaComponent and
MapComponent .The MapComponent classextends UICommand andthereforeimplements
ActionSource2 ,whichmeansitcanfireactioneventswhenauserclicksonthemap.The
AreaComponent classextendsthestandardcomponent UIOutput .The @FacesComponent
annotationregistersthecomponentswiththeJavaServerFacesimplementation:
@FacesComponent( "DemoMap ")
public class MapComponent extends UICommand {...}
@FacesComponent( "DemoArea ")
public class AreaComponent extends UIOutput {...}
TheMapComponent classrepresentsthecomponentcorrespondingtothe bookstore:map tag:
<bookstore:map id= "bookMap "
current= "map1"
immediate= "true"
action= "bookstore ">
...
</bookstore:map>CreatingCustomComponentClasses
Chapter13 • CreatingCustomUIComponentsandOtherCustomObjects 263
TheAreaComponent classrepresentsthecomponentcorrespondingtothe bookstore:area tag:
<bookstore:area id= "map1"value= "#{Book201} "
onmouseover= "resources/images/book_201.jpg "
onmouseout= "resources/images/book_all.jpg "
targetImage= "mapImage "/>
MapComponent hasoneormore AreaComponent instancesaschildren.Itsbehaviorconsistsof
thefollowingactions:
■Retrievingthevalueofthecurrentlyselectedarea
■Definingthepropertiescorrespondingtothecomponent'svalues
■Generatinganeventwhentheuserclicksontheimagemap
■Queuingtheevent
■Savingitsstate
■RenderingtheHTML maptagandtheHTML inputtag
MapComponent delegatestherenderingoftheHTML mapandinputtagstothe MapRenderer
class.
AreaComponent isboundtoabeanthatstorestheshapeandcoordinatesoftheregionofthe
imagemap.Youwillseehowallthisdataisaccessedthroughthevalueexpressionin “Creating
theRendererClass”onpage270 .Thebehaviorof AreaComponent consistsofthefollowing:
■Retrievingtheshapeandcoordinatedatafromthebean
■Settingthevalueofthehiddentagtothe idofthiscomponent
■Renderingthe areatag,includingtheJavaScriptforthe onmouseover ,onmouseout ,and
onclickfunctions
Althoughthesetasksareactuallyperformedby AreaRenderer ,AreaComponent mustdelegate
thetasksto AreaRenderer .See“DelegatingRenderingtoaRenderer”onpage270 formore
information.
Therestofthissectiondescribesthetasksthat MapComponent performsaswellastheencoding
anddecodingthatitdelegatesto MapRenderer .“HandlingEventsforCustomComponents”on
page275detailshow MapComponent handlesevents.
SpecifyingtheComponentFamily
Ifyourcustomcomponentclassdelegatesrendering,itneedstooverridethe getFamily
methodof UIComponent toreturntheidentifierofa componentfamily ,whichisusedtoreferto
acomponentorsetofcomponentsthatcanberenderedbyarendererorsetofrenderers.
Thecomponentfamilyisusedalongwiththerenderertypetolookuprenderersthatcanrender
thecomponent:CreatingCustomComponentClasses
TheJavaEE6Tutorial • January2013 264
public String getFamily() {
return ( "Map");
}
Thecomponentfamilyidentifier, Map,mustmatchthatdefinedbythe component-family
elementsincludedinthecomponentandrendererconfigurationsintheapplicationconfigurationresourcefile.
“RegisteringaCustomRendererwithaRenderKit”onpage317
explainshowtodefinethecomponentfamilyintherendererconfiguration. “Registeringa
CustomComponent”onpage319 explainshowtodefinethecomponentfamilyinthe
componentconfiguration.
PerformingEncoding
DuringtheRenderResponsephase,theJavaServerFacesimplementationprocessestheencodingmethodsofallcomponentsandtheirassociatedrenderersintheview.Theencodingmethodsconvertthecurrentlocalvalueofthecomponentintothecorrespondingmarkupthatrepresentsitintheresponse.
TheUIComponentBase classdefinesasetofmethodsforrenderingmarkup: encodeBegin ,
encodeChildren ,and encodeEnd .Ifthecomponenthaschildcomponents,youmightneedto
usemorethanoneofthesemethodstorenderthecomponent;otherwise,allrenderingshouldbedonein encodeEnd .Alternatively,youcanusethe encodeALL method,whichencompasses
allthemethods.
Because MapComponent isaparentcomponentof AreaComponent ,the areatagsmustbe
renderedafterthebeginning maptagandbeforetheending maptag.Toaccomplishthis,the
MapRenderer classrendersthebeginning maptagin encodeBegin andtherestofthe maptagin
encodeEnd .
TheJavaServerFacesimplementationautomaticallyinvokesthe encodeEnd methodof
AreaComponent 'srendererafteritinvokes MapRenderer 'sencodeBegin methodandbeforeit
invokes MapRenderer 'sencodeEnd method.Ifacomponentneedstoperformtherenderingfor
itschildren,itdoesthisinthe encodeChildren method.
Herearethe encodeBegin andencodeEnd methodsof MapRenderer :
@Override
public void encodeBegin(FacesContext context, UIComponent component)
throws IOException {
if ((context == null)|| (component == null)){
throw new NullPointerException();
}MapComponent map = (MapComponent) component;ResponseWriter writer = context.getResponseWriter();writer.startElement( "map", map);
writer.writeAttribute( "name", map.getId(), "id");
}CreatingCustomComponentClasses
Chapter13 • CreatingCustomUIComponentsandOtherCustomObjects 265
@Override
public void encodeEnd(FacesContext context, UIComponent component)
throws IOException {
if ((context == null) || (component == null)){
throw new NullPointerException();
}MapComponent map = (MapComponent) component;ResponseWriter writer = context.getResponseWriter();writer.startElement( "input ", map);
writer.writeAttribute( "type","hidden ", null);
writer.writeAttribute( "name", getName(context,map), "clientId ");(
writer.endElement( "input ");
writer.endElement( "map");
}
Noticethat encodeBegin rendersonlythebeginning maptag.The encodeEnd methodrenders
theinputtagandtheending maptag.
Theencodingmethodsaccepta UIComponent argumentanda
javax.faces.context.FacesContext argument.The FacesContext instancecontainsallthe
informationassociatedwiththecurrentrequest.The UIComponent argumentisthecomponent
thatneedstoberendered.
Therestofthemethodrendersthemarkuptothe javax.faces.context.ResponseWriter
instance,whichwritesoutthemarkuptothecurrentresponse.ThisbasicallyinvolvespassingtheHTMLtagnamesandattributenamestothe ResponseWriter instanceasstrings,retrieving
thevaluesofthecomponentattributes,andpassingthesevaluestothe ResponseWriter
instance.
ThestartElement methodtakesa String(thenameofthetag)andthecomponenttowhich
thetagcorresponds(inthiscase, map).(Passingthisinformationtothe ResponseWriter
instancehelpsdesign-timetoolsknowwhichportionsofthegeneratedmarkuparerelatedtowhichcomponents.)
Aftercalling startElement ,youcancall writeAttribute torenderthetag'sattributes.The
writeAttribute methodtakesthenameoftheattribute,itsvalue,andthenameofaproperty
orattributeofthecontainingcomponentcorrespondingtotheattribute.Thelastparametercanbenull,anditwon'tberendered.
Thenameattributevalueofthe maptagisretrievedusingthe getIdmethodof UIComponent ,
whichreturnsthecomponent'suniqueidentifier.The nameattributevalueofthe inputtagis
retrievedusingthe getName(FacesContext, UIComponent) methodof MapRenderer .CreatingCustomComponentClasses
TheJavaEE6Tutorial • January2013 266
Ifyouwantyourcomponenttoperformitsownrenderingbutdelegatetoarendererifthereis
one,includethefollowinglinesintheencodingmethodtocheckwhetherthereisarendererassociatedwiththiscomponent:
if (getRendererType() != null) {
super.encodeEnd(context);return;
}
Ifthereisarendereravailable,thismethodinvokesthesuperclass's encodeEnd method,which
doestheworkoffindingtherenderer.The MapComponent classdelegatesallrenderingto
MapRenderer ,soitdoesnotneedtocheckforavailablerenderers.
Insomecustomcomponentclassesthatextendstandardcomponents,youmightneedto
implementothermethodsinadditionto encodeEnd .Forexample,ifyouneedtoretrievethe
component’svaluefromtherequestparameters,youmustalsoimplementthe decodemethod.
PerformingDecoding
DuringtheApplyRequestValuesphase,theJavaServerFacesimplementationprocessesthe
decodemethodsofallcomponentsinthetree.The decodemethodextractsacomponent'slocal
valuefromincomingrequestparametersandusesa javax.faces.convert.Converter
implementationtoconvertthevaluetoatypethatisacceptabletothecomponentclass.
Acustomcomponentclassoritsrenderermustimplementthe decodemethodonlyifitmust
retrievethelocalvalueorifitneedstoqueueevents.ThecomponentqueuestheeventbycallingqueueEvent .
Hereisthe decodemethodof MapRenderer :
@Override
public void decode(FacesContext context, UIComponent component) {
if ((context == null) || (component == null)) {
throw new NullPointerException();
}MapComponent map = (MapComponent) component;String key = getName(context, map);String value = (String) context.getExternalContext().
getRequestParameterMap().get(key);
if (value != null)
map.setCurrent(value);
}
}
Thedecodemethodfirstgetsthenameofthehidden inputfieldbycalling
getName(FacesContext, UIComponent) .Itthenusesthatnameasthekeytotherequest
parametermaptoretrievethecurrentvalueofthe inputfield.Thisvaluerepresentsthe
currentlyselectedarea.Finally,itsetsthevalueofthe MapComponent class's currentattributeto
thevalueofthe inputfield.CreatingCustomComponentClasses
Chapter13 • CreatingCustomUIComponentsandOtherCustomObjects 267
EnablingComponentPropertiestoAccept
Expressions
NearlyalltheattributesofthestandardJavaServerFacestagscanacceptexpressions,whether
theyarevalueexpressionsormethodexpressions.ItisrecommendedthatyoualsoenableyourcomponentattributestoacceptexpressionsbecauseitgivesyoumuchmoreflexibilitywhenyouwriteFaceletspages.
Toenabletheattributestoacceptexpressions,thecomponentclassmustimplementgetterand
settermethodsforthecomponentproperties.ThesemethodscanusethefacilitiesofferedbytheStateHelper interfacetostoreandretrievenotonlythevaluesfortheseproperties,butalso
thestateofthecomponentsacrossmultiplerequests.
Because MapComponent extends UICommand ,the UICommand classalreadydoestheworkof
gettingthe ValueExpression andMethodExpression instancesassociatedwitheachofthe
attributesthatitsupports.Similarly,the UIOutput classthat AreaComponent extendsalready
obtainsthe ValueExpression instancesforitssupportedattributes.Forbothcomponents,the
simplegetterandsettermethodsstoreandretrievethekeyvaluesandstatefortheattributes,asshowninthiscodefragmentfrom AreaComponent :
enum PropertyKeys {
alt, coords, shape, targetImage;
}
public String getAlt() {
return (String) getStateHelper().eval(PropertyKeys.alt, null);
}
public void setAlt(String alt) {
getStateHelper().put(PropertyKeys.alt, alt);
}...
However,ifyouhaveacustomcomponentclassthatextends UIComponentBase ,youwillneed
toimplementthemethodsthatgetthe ValueExpression andMethodExpression instances
associatedwiththoseattributesthatareenabledtoacceptexpressions.Forexample,youcouldincludeamethodthatgetsthe ValueExpression instanceforthe immediate attribute:
public boolean isImmediate() {
if (this.immediateSet) {
return (this.immediate);
}ValueExpression ve = getValueExpression( "immediate ");
if (ve != null) {
Boolean value = (Boolean) ve.getValue(
getFacesContext().getELContext());
return (value.booleanValue());
} else {
return (this.immediate);
}
}CreatingCustomComponentClasses
TheJavaEE6Tutorial • January2013 268
Thepropertiescorrespondingtothecomponentattributesthatacceptmethodexpressions
mustacceptandreturna MethodExpression object.Forexample,if MapComponent extended
UIComponentBase insteadof UICommand ,itwouldneedtoprovidean actionpropertythat
returnsandacceptsa MethodExpression object:
public MethodExpression getAction() {
return (this.action);
}public void setAction(MethodExpression action) {
this.action = action;
}
SavingandRestoringState
Asdescribedin “EnablingComponentPropertiestoAcceptExpressions”onpage268 ,useof
theStateHelper interfacefacilitiesallowsyoutosavethecomponent'sstateatthesametime
yousetandretrievepropertyvalues.The StateHelper implementationallowspartialstate
saving:itsavesonlythechangesinthestatesincetheinitialrequest,nottheentirestate,becausethefullstatecanberestoredduringtheRestoreViewphase.
Componentclassesthatimplement StateHolder mayprefertoimplementthe
saveState(FacesContext) andrestoreState(FacesContext, Object) methodstohelpthe
JavaServerFacesimplementationsaveandrestorethefullstateofcomponentsacrossmultiplerequests.
Tosaveasetofvalues,youcanimplementthe saveState(FacesContext) method.This
methodiscalledduringtheRenderResponsephase,duringwhichthestateoftheresponseissavedforprocessingonsubsequentrequests.HereisahypotheticalmethodfromMapComponent ,whichhasonlyoneattribute, current:
@Override
public Object saveState(FacesContext context) {
Object values[] = new Object[2];values[0] = super.saveState(context);values[1] = current;return (values);
}
Thismethodinitializesanarray,whichwillholdthesavedstate.Itnextsavesallofthestate
associatedwiththecomponent.
Acomponentthatimplements StateHolder mayalsoprovideanimplementationfor
restoreState(FacesContext, Object) ,whichrestoresthestateofthecomponenttothat
savedwiththe saveState(FacesContext) method.The restoreState(FacesContext,
Object)methodiscalledduringtheRestoreViewphase,duringwhichtheJavaServerFaces
implementationcheckswhetherthereisanystatethatwassavedduringthelastRenderResponsephaseandneedstoberestoredinpreparationforthenextpostback.CreatingCustomComponentClasses
Chapter13 • CreatingCustomUIComponentsandOtherCustomObjects 269
Hereisahypothetical restoreState(FacesContext, Object) methodfrom MapComponent :
public void restoreState(FacesContext context, Object state) {
Object values[] = (Object[]) state;super.restoreState(context, values[0]);current = (String) values[1];
}
Thismethodtakesa FacesContext andan Objectinstance,representingthearraythatis
holdingthestateforthecomponent.Thismethodsetsthecomponent’spropertiestothevaluessavedinthe Objectarray.
Whetherornotyouimplementthesemethodsinacomponentclass,youcanusethe
javax.faces.STATE_SAVING_METHOD contextparametertospecifyinthedeployment
descriptorwhereyouwantthestatetobesaved:either clientorserver.Ifstateissavedonthe
client,thestateoftheentireviewisrenderedtoahiddenfieldonthepage.Bydefault,thestateissavedontheserver.
ThewebapplicationsintheDuke'sForestcasestudysavetheirviewstateontheclient.Savingstateontheclientusesmorebandwidthaswellasmoreclientresources,whilesavingit
ontheserverusesmoreserverresources.Youmayalsowanttosavestateontheclientifyouexpectyouruserstodisablecookies.
DelegatingRenderingtoaRenderer
Both MapComponent andAreaComponent delegatealloftheirrenderingtoaseparaterenderer.
Thesection “PerformingEncoding”onpage265 explainshow MapRenderer performsthe
encodingfor MapComponent .Thissectionexplainsindetailtheprocessofdelegatingrendering
toarendererusing AreaRenderer ,whichperformstherenderingfor AreaComponent .
Todelegaterendering,youperformthesetasks:
■Createthe Renderer class.
■Registertherendererwitharenderkitbyusingthe @FacesRenderer annotation(orby
usingtheapplicationconfigurationresourcefile,asexplainedin “RegisteringaCustom
RendererwithaRenderKit”onpage317 ).
■Identifytherenderertypeinthe @FacesRenderer annotation.
CreatingtheRendererClass
Whendelegatingrenderingtoarenderer,youcandelegateallencodinganddecodingtothe
renderer,oryoucanchoosetodopartofitinthecomponentclass.The AreaComponent class
delegatesencodingtothe AreaRenderer class.DelegatingRenderingtoaRenderer
TheJavaEE6Tutorial • January2013 270
Therendererclassbeginswitha @FacesRenderer annotation:
@FacesRenderer(componentFamily = "Area",
rendererType = "dukesbookstore.renderers.AreaRenderer ")
public class AreaRenderer extends Renderer {
The@FacesRenderer annotationregisterstherendererclasswiththeJavaServerFaces
implementationasarendererclass.Theannotationidentifiesthecomponentfamilyaswellastherenderertype.
Toperformtherenderingfor AreaComponent ,AreaRenderer mustimplementan encodeEnd
method.The encodeEnd methodof AreaRenderer retrievestheshape,coordinates,and
alternativetextvaluesstoredinthe ImageArea beanthatisboundto AreaComponent .Suppose
thatthe areatagcurrentlybeingrenderedhasa valueattributevalueof "book203 ".The
followinglinefrom encodeEnd getsthevalueoftheattribute "book203 "fromthe FacesContext
instance.
ImageArea ia = (ImageArea)area.getValue();
Theattributevalueisthe ImageArea beaninstance,whichcontainsthe shape,coords,and alt
valuesassociatedwiththe book203 AreaComponent instance.“ConfiguringModelData”on
page259describeshowtheapplicationstoresthesevalues.
Afterretrievingthe ImageArea object,themethodrendersthevaluesfor shape,coords,and
altbysimplycallingtheassociatedaccessormethodsandpassingthereturnedvaluestothe
javax.faces.context.ResponseWriter instance,asshownbytheselinesofcode,whichwrite
outtheshapeandcoordinates:
writer.startElement( "area", area);
writer.writeAttribute( "alt", iarea.getAlt(), "alt");
writer.writeAttribute( "coords ", iarea.getCoords(), "coords ");
writer.writeAttribute( "shape ", iarea.getShape(), "shape ");
TheencodeEnd methodalsorenderstheJavaScriptforthe onmouseout ,onmouseover ,and
onclickattributes.TheFaceletspageneedonlyprovidethepathtotheimagesthataretobe
loadedduringan onmouseover oronmouseout action:
<bookstore:area id= "map3"value= "#{Book203} "
onmouseover= "resources/images/book_203.jpg "
onmouseout= "resources/images/book_all.jpg "
targetImage= "mapImage "/>
TheAreaRenderer classtakescareofgeneratingtheJavaScriptfortheseactions,asshowninthe
followingcodefrom encodeEnd .TheJavaScriptthat AreaRenderer generatesforthe onclick
actionsetsthevalueofthehiddenfieldtothevalueofthecurrentarea'scomponentIDandsubmitsthepage.
sb = new StringBuffer( "document.forms[0][’ ").append(targetImageId).
append( "’].src=’ ");
sb.append(DelegatingRenderingtoaRenderer
Chapter13 • CreatingCustomUIComponentsandOtherCustomObjects 271
getURI(context,
(String) area.getAttributes().get( "onmouseout ")));
sb.append( "’");
writer.writeAttribute( "onmouseout ", sb.toString(), "onmouseout ");
sb = new StringBuffer( "document.forms[0][’ ").append(targetImageId).
append( "’].src=’ ");
sb.append(
getURI(context,(String) area.getAttributes().get( "onmouseover ")));
sb.append( "’");
writer.writeAttribute( "onmouseover ", sb.toString(), "onmouseover ");
sb = new StringBuffer( "document.forms[0][’ ");
sb.append(getName(context, area));sb.append( "’].value=’ ");
sb.append(iarea.getAlt());sb.append( "’; document.forms[0].submit() ");
writer.writeAttribute( "onclick ", sb.toString(), "value ");
writer.endElement( "area");
Bysubmittingthepage,thiscodecausestheJavaServerFaceslifecycletoreturnbacktothe
RestoreViewphase.Thisphasesavesanystateinformation,includingthevalueofthehiddenfield,sothatanewrequestcomponenttreeisconstructed.Thisvalueisretrievedbythe decode
methodofthe MapComponent class.ThisdecodemethodiscalledbytheJavaServerFaces
implementationduringtheApplyRequestValuesphase,whichfollowstheRestoreViewphase.
Inadditiontothe encodeEnd method, AreaRenderer containsanemptyconstructor.Thisis
usedtocreateaninstanceof AreaRenderer sothatitcanbeaddedtotherenderkit.
The@FacesRenderer annotationregisterstherendererclasswiththeJavaServerFaces
implementationasarendererclass.Theannotationidentifiesthecomponentfamilyaswellastherenderertype.
IdentifyingtheRendererType
DuringtheRenderResponsephase,theJavaServerFacesimplementationcallsthegetRendererType methodofthecomponent'staghandlertodeterminewhichrendererto
invoke,ifthereisone.
Youidentifythetypeassociatedwiththerendererinthe rendererType elementofthe
@FacesRenderer annotationfor AreaRenderer aswellasinthe renderer-type elementofthe
taglibrarydescriptorfile.DelegatingRenderingtoaRenderer
TheJavaEE6Tutorial • January2013 272
ImplementinganEventListener
TheJavaServerFacestechnologysupportsactioneventsandvalue-changeeventsfor
components.
Actioneventsoccurwhentheuseractivatesacomponentthatimplements
javax.faces.component.ActionSource .Theseeventsarerepresentedbytheclass
javax.faces.event.ActionEvent .
Value-changeeventsoccurwhentheuserchangesthevalueofacomponentthatimplements
javax.faces.component.EditableValueHolder .Theseeventsarerepresentedbytheclass
javax.faces.event.ValueChangeEvent .
Onewaytohandleeventsistoimplementtheappropriatelistenerclasses.Listenerclassesthat
handletheactioneventsinanapplicationmustimplementtheinterfacejavax.faces.event.ActionListener .Similarly,listenersthathandlethevalue-changeevents
mustimplementtheinterface javax.faces.event.ValueChangeListener .
Thissectionexplainshowtoimplementthetwolistenerclasses.Tohandleeventsgeneratedbycustomcomponents,youmustimplementaneventlistenerand
aneventhandlerandmanuallyqueuetheeventonthecomponent.See
“HandlingEventsfor
CustomComponents”onpage275 formoreinformation.
Note–Youdonotneedtocreatean ActionListener implementationtohandleaneventthat
resultssolelyinnavigatingtoapageanddoesnotperformanyotherapplication-specificprocessing.See
“WritingaMethodtoHandleNavigation”onpage201 forinformationonhow
tomanagepagenavigation.
ImplementingValue-ChangeListeners
Ajavax.faces.event.ValueChangeListener implementationmustincludea
processValueChange(ValueChangeEvent) method.Thismethodprocessesthespecified
value-changeeventandisinvokedbytheJavaServerFacesimplementationwhenthevalue-changeeventoccurs.The ValueChangeEvent instancestorestheoldandthenewvalues
ofthecomponentthatfiredtheevent.
IntheDuke'sBookstorecasestudy,the NameChanged listenerimplementationisregisteredon
thename UIInput componentonthe bookcashier.xhtml page.Thislistenerstoresintosession
scopethenametheuserenteredinthetextfieldcorrespondingtothenamecomponent.
Thebookreceipt.xhtml subsequentlyretrievesthenamefromthesessionscope:ImplementinganEventListener
Chapter13 • CreatingCustomUIComponentsandOtherCustomObjects 273
<h:outputFormat title= "thanks "
value= "#{bundle.ThankYouParam} ">
<f:param value= "#{sessionScope.name} "/>
</h:outputFormat>
Whenthe bookreceipt.xhtml pageisloaded,itdisplaysthenameinsidethemessage:
"Thank you, {0}, for purchasing your books from us. "
Hereispartofthe NameChanged listenerimplementation:
public class NameChanged extends Object implements ValueChangeListener {
@Override
public void processValueChange(ValueChangeEvent event)
throws AbortProcessingException {
if (null != event.getNewValue()) {
FacesContext.getCurrentInstance().getExternalContext().
getSessionMap().put( "name", event.getNewValue());
}
}
}
Whentheuserentersthenameinthetextfield,avalue-changeeventisgenerated,andthe
processValueChange(ValueChangeEvent) methodofthe NameChanged listener
implementationisinvoked.ThismethodfirstgetstheIDofthecomponentthatfiredtheeventfromthe ValueChangeEvent object,anditputsthevalue,alongwithanattributename,intothe
sessionmapofthe FacesContext instance.
“RegisteringaValue-ChangeListeneronaComponent”onpage181 explainshowtoregister
thislistenerontoacomponent.
ImplementingActionListeners
Ajavax.faces.event.ActionListener implementationmustincludea
processAction(ActionEvent) method.The processAction(ActionEvent) methodprocesses
thespecifiedactionevent.TheJavaServerFacesimplementationinvokestheprocessAction(ActionEvent) methodwhenthe ActionEvent occurs.
TheDuke'sBookstorecasestudyusestwo ActionListener implementations,
LinkBookChangeListener andMapBookChangeListener .See
“HandlingEventsforCustom
Components”onpage275 fordetailson MapBookChangeListener .
“RegisteringanActionListeneronaComponent”onpage182 explainshowtoregisterthis
listenerontoacomponent.ImplementinganEventListener
TheJavaEE6Tutorial • January2013 274
HandlingEventsforCustomComponents
Asexplainedin “ImplementinganEventListener”onpage273 ,eventsareautomatically
queuedonstandardcomponentsthatfireevents.Acustomcomponent,ontheotherhand,mustmanuallyqueueeventsfromits decodemethodifitfiresevents.
“PerformingDecoding”onpage267 explainshowtoqueueaneventon MapComponent usingits
decodemethod.Thissectionexplainshowtowritetheclassthatrepresentstheeventofclicking
onthemapandhowtowritethemethodthatprocessesthisevent.
Asexplainedin “UnderstandingtheFaceletsPage”onpage258 ,the actionListener attribute
ofthe bookstore:map tagpointstothe MapBookChangeListener class.Thelistenerclass's
processAction methodprocessestheeventofclickingtheimagemap.Hereisthe
processAction method:
@Override
public void processAction(ActionEvent actionEvent)
throws AbortProcessingException {
AreaSelectedEvent event = (AreaSelectedEvent) actionEvent;
String current = event.getMapComponent().getCurrent();FacesContext context = FacesContext.getCurrentInstance();String bookId = books.get(current);context.getExternalContext().getSessionMap().put( "bookId ", bookId);
}
WhentheJavaServerFacesimplementationcallsthismethod,itpassesinan ActionEvent
objectthatrepresentstheeventgeneratedbyclickingontheimagemap.Next,itcastsittoanAreaSelectedEvent object(see
tut-install /examples/case-studies/dukes-bookstore/src/java/dukesbookstore/
listeners/AreaSelectedEvent.java ).Thenthismethodgetsthe MapComponent associated
withtheevent.Itthengetsthevalueofthe MapComponent object's currentattribute,which
indicatesthecurrentlyselectedarea.Themethodthenusesthevalueofthe currentattributeto
getthebook'sIDvaluefroma HashMapobject,whichisconstructedelsewhereinthe
MapBookChangeListener class.FinallythemethodplacestheIDobtainedfromthe HashMap
objectintothesessionmapfortheapplication.
Inadditiontothemethodthatprocessestheevent,youneedtheeventclassitself.Thisclassis
verysimpletowrite:Youhaveitextend ActionEvent andprovideaconstructorthattakesthe
componentonwhichtheeventisqueuedandamethodthatreturnsthecomponent.HandlingEventsforCustomComponents
Chapter13 • CreatingCustomUIComponentsandOtherCustomObjects 275
Hereisthe AreaSelectedEvent classusedwiththeimagemap:
public class AreaSelectedEvent extends ActionEvent {
public AreaSelectedEvent(MapComponent map) {
super(map);
}public MapComponent getMapComponent() {
return ((MapComponent) getComponent());
}
}
Asexplainedinthesection “CreatingCustomComponentClasses”onpage262 ,inorderfor
MapComponent tofireeventsinthefirstplace,itmustimplement ActionSource .Because
MapComponent extends UICommand ,italsoimplements ActionSource .
DefiningtheCustomComponentTaginaTagLibrary
Descriptor
Touseacustomtag,youdeclareitinaTagLibraryDescriptor(TLD).TheTLDfiledefineshow
thecustomtagisusedinaJavaServerFacespage.ThewebcontainerusestheTLDtovalidatethetag.ThesetoftagsthatarepartoftheHTMLrenderkitaredefinedintheHTML_BASICTLD,availableat
http://docs.oracle.com/javaee/6/javaserverfaces/2.1/docs/
renderkitdocs/ .
TheTLDfilenamemustendwith taglib.xml .IntheDuke'sBookstorecasestudy,thecustom
tagsareaandmaparedefinedinthefile web/WEB-INF/bookstore.taglib.xml .
Alltagdefinitionsmustbenestedinsidethe facelet-taglib elementintheTLD.Eachtagis
definedbya tagelementthatspecifiesaparticularcombinationofacomponenttypeanda
renderertype.Herearethetagdefinitionsforthe areaandmapcomponents:
<facelet-taglib xmlns= "http://java.sun.com/xml/ns/javaee "
... >
<namespace>http://dukesbookstore</namespace><tag>
<tag-name>area</tag-name><component>
<component-type>DemoArea</component-type><renderer-type>DemoArea</renderer-type>
</component>
</tag><tag>
<tag-name>map</tag-name><component>
<component-type>DemoMap</component-type><renderer-type>DemoMap</renderer-type>
</component>
</tag>
</facelet-taglib>DefiningtheCustomComponentTaginaTagLibraryDescriptor
TheJavaEE6Tutorial • January2013 276
Thecomponent-type elementspecifiesthenamedefinedinthe @FacesComponent annotation,
whilethe renderer-type elementspecifiesthe rendererType definedinthe @FacesRenderer
annotation.
Thefacelet-taglib elementmustalsoincludea namespace element,whichdefinesthe
namespacetobespecifiedinpagesthatusethecustomcomponent.See “UsingaCustom
Component”onpage277 forinformationonspecifyingthenamespaceinpages.
TheTLDfileislocatedinthe WEB-INFdirectory.Inaddition,anentryisincludedintheweb
deploymentdescriptor( web.xml)toidentifythecustomtaglibrarydescriptorfile,asfollows:
<context-param>
<param-name>javax.faces.FACELETS_LIBRARIES</param-name><param-value>/WEB-INF/bookstore.taglib.xml</param-value>
</context-param>
UsingaCustomComponent
Touseacustomcomponentinapage,youaddthecustomtagassociatedwiththecomponent
tothepage.
Asexplainedin “DefiningtheCustomComponentTaginaTagLibraryDescriptor”on
page276,youmustensurethattheTLDthatdefinesanycustomtagsispackagedinthe
applicationifyouintendtousethetagsinyourpages.TLDfilesarestoredinthe WEB-INF/
directoryorsubdirectoryoftheWARfileorinthe META-INF/ directoryorsubdirectoryofatag
librarypackagedinaJARfile.
Youalsoneedtoincludeanamespacedeclarationinthepagesothatthepagehasaccesstothe
tags.ThecustomtagsfortheDuke'sBookstorecasestudyaredefinedinbookstore.taglib.xml .The ui:composition tagonthe index.xhtml pagedeclaresthe
namespacedefinedinthetaglibrary:
<ui:composition xmlns= "http://www.w3.org/1999/xhtml "
xmlns:ui= "http://java.sun.com/jsf/facelets "
xmlns:h= "http://java.sun.com/jsf/html "
xmlns:f= "http://java.sun.com/jsf/core "
xmlns:bookstore="http://dukesbookstore"template= "./bookstoreTemplate.xhtml ">
Finally,touseacustomcomponentinapage,youaddthecomponent'stagtothepage.UsingaCustomComponent
Chapter13 • CreatingCustomUIComponentsandOtherCustomObjects 277
TheDuke'sBookstorecasestudyincludesacustomimagemapcomponentonthe index.xhtml
page.Thiscomponentallowsyoutoselectabookbyclickingonaregionoftheimagemap:
...
<h:graphicImage id= "mapImage "
name= "book_all.jpg "
library= "images
alt="#{bundle.chooseLocale} "
usemap= "#bookMap "/>
<bookstore:map id= "bookMap "
current= "map1"
immediate= "true"
action= "bookstore ">
<f:actionListener
type= "dukesbookstore.listeners.MapBookChangeListener "/>
<bookstore:area id= "map1"value= "#{Book201} "
onmouseover= "resources/images/book_201.jpg "
onmouseout= "resources/images/book_all.jpg "
targetImage= "mapImage "/>
...<bookstore:area id= "map6"value= "#{Book207} "
onmouseover= "resources/images/book_207.jpg "
onmouseout= "resources/images//book_all.jpg "
targetImage= "mapImage "/>
</bookstore:map>
Thestandard h:graphicImage tagassociatesanimage( book_all.jpg )withanimagemapthat
isreferencedinthe usemapattributevalue.
Thecustom bookstore:map tagthatrepresentsthecustomcomponent, MapComponent ,
specifiestheimagemap,andcontainsasetof areatags.Eachcustom bookstore:area tag
representsacustom AreaComponent andspecifiesaregionoftheimagemap.
Onthepage,the onmouseover andonmouseout attributesspecifytheimagethatisdisplayed
whentheuserperformstheactionsdescribedbytheattributes.Thecustomrendereralsorendersan onclickattribute.
IntherenderedHTMLpage,the onmouseover ,onmouseout ,and onclickattributesdefine
whichJavaScriptcodeisexecutedwhentheseeventsoccur.Whentheusermovesthemouseoveraregion,the onmouseover functionassociatedwiththeregiondisplaysthemapwiththat
regionhighlighted.Whentheusermovesthemouseoutofaregion,the onmouseout function
redisplaystheoriginalimage.Whentheuserclicksaregion,the onclickfunctionsetsthevalue
ofahidden inputtagtotheIDoftheselectedareaandsubmitsthepage.
WhenthecustomrendererrenderstheseattributesinHTML,italsorenderstheJavaScript
code.Thecustomrendereralsorenderstheentire onclickattributeratherthanletthepage
authorsetit.
ThecustomrendererthatrenderstheHTML maptagalsorendersahidden inputcomponent
thatholdsthecurrentarea.Theserver-sideobjectsretrievethevalueofthehidden inputfield
andsetthelocaleinthe FacesContext instanceaccordingtowhichregionwasselected.UsingaCustomComponent
TheJavaEE6Tutorial • January2013 278
CreatingandUsingaCustomConverter
AJavaServerFacesconverterclassconvertsstringstoobjectsandobjectstostringsasrequired.
SeveralstandardconvertersareprovidedbyJavaServerFacesforthispurpose.Seeformoreinformationontheseincludedconverters.
Asexplainedin
“ConversionModel”onpage220 ,ifthestandardconvertersincludedwith
JavaServerFacescannotperformthedataconversionthatyouneed,youcancreateacustomconvertertoperformthisspecializedconversion.Thisimplementation,ataminimum,mustdefinehowtoconvertdatabothwaysbetweenthetwoviewsofthedatadescribedin
“ConversionModel”onpage220 .
Allcustomconvertersmustimplementthe javax.faces.convert.Converter interface.This
sectionexplainshowtoimplementthisinterfacetoperformacustomdataconversion.
TheDuke'sBookstorecasestudyusesacustom Converter implementation,locatedin
tut-install /examples/case-studies/dukes-bookstore/src/java/dukesbookstore/
converters/CreditCardConverter.java ,toconvertthedataenteredintheCreditCard
Numberfieldonthe bookcashier.xhtml page.Itstripsblanksandhyphensfromthetextstring
andformatsitsothatablankspaceseparateseveryfourcharacters.
Anothercommonusecaseforacustomconverterisinadrop-downmenuforanonstandard
objecttype.IntheDuke'sTutoringcasestudy,the StudentandGuardian entitiesrequirea
customconvertersotheycanbeconvertedtoandfroma UISelectItems inputcomponent.
CreatingaCustomConverter
TheCreditCardConverter customconverterclassiscreatedasfollows:
@FacesConverter( "ccno")
public class CreditCardConverter implements Converter {
...
}
The@FacesConverter annotationregistersthecustomconverterclassasaconverterwiththe
nameof ccnowiththeJavaServerFacesimplementation.Alternatively,youcanregisterthe
converterwithentriesintheapplicationconfigurationresourcefile,asshownin “Registeringa
CustomConverter”onpage313 .
Todefinehowthedataisconvertedfromthepresentationviewtothemodelview,the
Converter implementationmustimplementthe getAsObject(FacesContext, UIComponent,
String)methodfromthe Converter interface.Hereistheimplementationofthismethod
from CreditCardConverter :
@Override
public Object getAsObject(FacesContext context,
UIComponent component, String newValue)CreatingandUsingaCustomConverter
Chapter13 • CreatingCustomUIComponentsandOtherCustomObjects 279
throws ConverterException {
String convertedValue = null;
if ( newValue == null ) {
return newValue;
}// Since this is only a String to String conversion,// this conversion does not throw ConverterException.
convertedValue = newValue.trim();
if ( (convertedValue.contains( "-")) ||
(convertedValue.contains( ""))) {
char[] input = convertedValue.toCharArray();StringBuilder builder = new StringBuilder(input.length);f o r(i n ti=0 ;i< input.length; ++i ) {
if ( input[i] == ’-’|| input[i] == ’’ ){
continue;
} else {
builder.append(input[i]);
}
}convertedValue = builder.toString();
}return convertedValue;
}
DuringtheApplyRequestValuesphase,whenthecomponents’ decodemethodsareprocessed,
theJavaServerFacesimplementationlooksupthecomponent’slocalvalueintherequestandcallsthe getAsObject method.Whencallingthismethod,theJavaServerFacesimplementation
passesinthecurrent FacesContext instance,thecomponentwhosedataneedsconversion,and
thelocalvalueasa String.Themethodthenwritesthelocalvaluetoacharacterarray,trimsthe
hyphensandblanks,addstherestofthecharacterstoa String,andreturnsthe String.
Todefinehowthedataisconvertedfromthemodelviewtothepresentationview,the
Converter implementationmustimplementthe getAsString(FacesContext, UIComponent,
Object)methodfromthe Converter interface.Hereisanimplementationofthismethod:
@Override
public String getAsString(FacesContext context,
UIComponent component, Object value)throws ConverterException {
String inputVal = null;
if ( value == null ) {
return null;
}// value must be of a type that can be cast to a String.try {
inputVal = (String)value;
} catch (ClassCastException ce) {
FacesMessage errMsg = new FacesMessage(CONVERSION_ERROR_MESSAGE_ID);FacesContext.getCurrentInstance().addMessage(null, errMsg);throw new ConverterException(errMsg.getSummary());
}// insert spaces after every four characters for betterCreatingandUsingaCustomConverter
TheJavaEE6Tutorial • January2013 280
// readability if they are not already present.
char[] input = inputVal.toCharArray();StringBuilder builder = new StringBuilder(input.length + 3);f o r(i n ti=0 ;i< input.length; ++i ) {
i f(( i%4 )= =0& &i! =0 ){
if (input[i] != ’’|| input[i] != ’-’){
builder.append( "");
// if there are any "-"’s convert them to blanks.
} else if (input[i] == ’-’){
builder.append( "");
}
}builder.append(input[i]);
}String convertedValue = builder.toString();return convertedValue;
}
DuringtheRenderResponsephase,inwhichthecomponents' encodemethodsarecalled,the
JavaServerFacesimplementationcallsthe getAsString methodinordertogeneratethe
appropriateoutput.WhentheJavaServerFacesimplementationcallsthismethod,itpassesinthecurrent FacesContext ,the UIComponent whosevalueneedstobeconverted,andthebean
valuetobeconverted.Becausethisconverterdoesa String-to-Stringconversion,thismethod
cancastthebeanvaluetoa String.
Ifthevaluecannotbeconvertedtoa String,themethodthrowsanexception,passinganerror
messagefromtheresourcebundlethatisregisteredwiththeapplication.
“Registering
ApplicationMessages”onpage308 explainshowtoregistercustomerrormessageswiththe
application.
Ifthevaluecanbeconvertedtoa String,themethodreadsthe Stringtoacharacterarrayand
loopsthroughthearray,addingaspaceaftereveryfourcharacters.
Youcanalsocreateacustomconverterwitha @FacesConverter annotationthatspecifiesthe
forClass attribute,asshowninthefollowingexamplefromtheDuke'sTutoringcasestudy:
@FacesConverter(forClass=Guardian.class)
public class GuardianConverter implements Converter { ...
TheforClass attributeregisterstheconverterasthedefaultconverterforthe Guardian class.
Therefore,wheneverthatclassisspecifiedbya valueattributeofaninputcomponent,the
converterisinvokedautomatically.
AconverterclasscanbeaseparateJavaPOJOclass,asintheDuke'sBookstoreandDuke's
Tutoringcasestudies.Ifitneedstoaccessobjectsdefinedinamanagedbeanclass,however,itcanbeasubclassofaJavaServerFacesmanagedbean,asinthe address-book persistence
exampleandtheDuke'sForestcasestudy,wheretheconvertersuseanenterprisebeanthatis
injectedintothemanagedbeanclass.CreatingandUsingaCustomConverter
Chapter13 • CreatingCustomUIComponentsandOtherCustomObjects 281
UsingaCustomConverter
Toapplythedataconversionperformedbyacustomconvertertoaparticularcomponent's
value,youmustdooneofthefollowing:
■Referencetheconverterfromthecomponenttag's converter attribute.
■Nestan f:converter taginsidethecomponent’stagandreferencethecustomconverter
fromoneofthe f:converter tag’sattributes.
Ifyouareusingthecomponenttag’s converter attribute,thisattributemustreferencethe
Converter implementation’sidentifierorthefully-qualifiedclassnameoftheconverter.
“CreatingandUsingaCustomConverter”onpage279 explainshowtoimplementacustom
converter.
Theidentifierforthecreditcardconverterclassis ccno,thevaluespecifiedinthe
@FacesConverter annotation:
@FacesConverter( "ccno")
public class CreditCardConverter implements Converter {
...
Therefore,the CreditCardConverter instancecanberegisteredonthe ccnocomponentas
showninthefollowingexample:
<h:inputText id= "ccno"
size= "19"
converter= "ccno"
value= "#{cashier.creditCardNumber} "
required= "true"
requiredMessage= "#{bundle.ReqCreditCard} ">
...
</h:inputText>
Bysettingthe converter attributeofacomponent’stagtotheconverter’sidentifieroritsclass
name,youcausethatcomponent’slocalvaluetobeautomaticallyconvertedaccordingtotherulesspecifiedinthe Converter implementation.
Insteadofreferencingtheconverterfromthecomponenttag’s converter attribute,youcan
referencetheconverterfroman f:converter tagnestedinsidethecomponent’stag.To
referencethecustomconverterusingthe f:converter tag,youdooneofthefollowing:
■Setthe f:converter tag’s converterId attributetothe Converter implementation’s
identifierdefinedinthe @FacesConverter annotationorintheapplicationconfiguration
resourcefile.Thismethodisshownin bookcashier.xhtml :
<h:inputText id= "ccno"
size= "19"
value= "#{cashier.creditCardNumber} "
required= "true"
requiredMessage= "#{bundle.ReqCreditCard} ">
<f:converter converterId= "ccno"/>CreatingandUsingaCustomConverter
TheJavaEE6Tutorial • January2013 282
<f:validateRegex
pattern= "\d{16}|\d{4} \d{4} \d{4} \d{4}|\d{4}-\d{4}-\d{4}-\d{4} "/>
</h:inputText>
■Bindthe Converter implementationtoamanagedbeanpropertyusingthe f:converter
tag’s bindingattribute,asdescribedin “BindingConverters,Listeners,andValidatorsto
ManagedBeanProperties”onpage293 .
TheJavaServerFacesimplementationcallstheconverter's getAsObject methodtostripspaces
andhyphensfromtheinputvalue.The getAsString methodiscalledwhenthe
bookcashier.xhtml pageisredisplayed;thishappensiftheuserordersmorethan$100worth
ofbooks.
IntheDuke'sTutoringcasestudy,eachconverterisregisteredastheconverterforaparticular
class.Theconverterisautomaticallyinvokedwheneverthatclassisspecifiedbya value
attributeofaninputcomponent.Inthefollowingexample,the itemValue attribute
(highlightedinbold)callstheconverterforthe Guardian class:
<h:selectManyListbox id= "selectGuardiansMenu "
value= "#{guardianManager.selectedGuardians} "
size= "5">
<f:selectItems value= "#{guardianManager.allGuardians} "
var="selectedGuardian "
itemLabel= "#{selectedGuardian.name} "
itemValue="#{selectedGuardian}" />
</h:selectManyListbox>
CreatingandUsingaCustomValidator
IfthestandardvalidatorsorBeanValidationdon’tperformthevalidationcheckingyouneed,
youcancreateacustomvalidatortovalidateuserinput.Asexplainedin “ValidationModel”on
page222,therearetwowaystoimplementvalidationcode:
■Implementamanagedbeanmethodthatperformsthevalidation.
■Provideanimplementationofthe javax.faces.validator.Validator interfaceto
performthevalidation.
“WritingaMethodtoPerformValidation”onpage202 explainshowtoimplementamanaged
beanmethodtoperformvalidation.TherestofthissectionexplainshowtoimplementtheValidator interface.
Ifyouchoosetoimplementthe Validator interfaceandyouwanttoallowthepageauthorto
configurethevalidator’sattributesfromthepage,youalsomustspecifyacustomtagforregisteringthevalidatoronacomponent.
Ifyouprefertoconfiguretheattributesinthe Validator implementation,youcanforgo
specifyingacustomtagandinsteadletthepageauthorregisterthevalidatoronacomponentusingthe f:validator tag,asdescribedin
“UsingaCustomValidator”onpage287 .CreatingandUsingaCustomValidator
Chapter13 • CreatingCustomUIComponentsandOtherCustomObjects 283
Youcanalsocreateamanagedbeanpropertythatacceptsandreturnsthe Validator
implementationyoucreate,asdescribedin “WritingPropertiesBoundtoConverters,
Listeners,orValidators”onpage199 .Youcanusethe f:validator tag’sbindingattributeto
bindthe Validator implementationtothemanagedbeanproperty.
Usually,youwillwanttodisplayanerrormessagewhendatafailsvalidation.Youneedtostore
theseerrormessagesinaresourcebundle.
Aftercreatingtheresourcebundle,youhavetwowaystomakethemessagesavailabletothe
application.Youcanqueuetheerrormessagesontothe FacesContext programmatically,or
youcanregistertheerrormessagesintheapplicationconfigurationresourcefile,asexplainedin
“RegisteringApplicationMessages”onpage308 .
Forexample,ane-commerceapplicationmightuseageneral-purposecustomvalidatorcalled
FormatValidator.java tovalidateinputdataagainstaformatpatternthatisspecifiedinthe
customvalidatortag.ThisvalidatorwouldbeusedwithaCreditCardNumberfieldonaFaceletspage.Hereisthecustomvalidatortag:
<mystore:formatValidator
formatPatterns= "9999999999999999|9999 9999 9999 9999|9999-9999-9999-9999 "/>
Accordingtothisvalidator,thedataenteredinthefieldmustbeoneofthefollowing:
■A16–digitnumberwithnospaces
■A16–digitnumberwithaspacebetweeneveryfourdigits
■A16–digitnumberwithhyphensbetweeneveryfourdigits
Thef:validateRegex tagmakesacustomvalidatorunnecessaryinthissituation.However,the
restofthissectiondescribeshowthisvalidatorwouldbeimplementedandhowtospecifyacustomtagsothatthepageauthorcouldregisterthevalidatoronacomponent.
ImplementingtheValidatorInterface
AValidator implementationmustcontainaconstructor,asetofaccessormethodsforany
attributesonthetag,anda validate method,whichoverridesthe validate methodofthe
Validator interface.
Thehypothetical FormatValidator classalsodefinesaccessormethodsforsettingthe
formatPatterns attribute,whichspecifiestheacceptableformatpatternsforinputintothe
fields.Thesettermethodcallsthe parseFormatPatterns method,whichseparatesthe
componentsofthepatternstringintoastringarray, formatPatternsList .
public String getFormatPatterns() {
return (this.formatPatterns);
}public void setFormatPatterns(String formatPatterns) {
this.formatPatterns = formatPatterns;parseFormatPatterns();
}CreatingandUsingaCustomValidator
TheJavaEE6Tutorial • January2013 284
Inadditiontodefiningaccessormethodsfortheattributes,theclassoverridesthe validate
methodofthe Validator interface.Thismethodvalidatestheinputandalsoaccessesthe
customerrormessagestobedisplayedwhenthe Stringisinvalid.
Thevalidate methodperformstheactualvalidationofthedata.Ittakesthe FacesContext
instance,thecomponentwhosedataneedstobevalidated,andthevaluethatneedstobevalidated.Avalidatorcanvalidateonlydataofacomponentthatimplementsjavax.faces.component.EditableValueHolder .
Hereisanimplementationofthe validate method:
@FacesValidator
public class FormatValidator implements Validator, StateHolder {
...public void validate(FacesContext context, UIComponent component,
Object toValidate) {
boolean valid = false;
String value = null;if ((context == null) || (component == null)) {
throw new NullPointerException();
}if (!(component instanceof UIInput)) {
return;
}if ( null == formatPatternsList || null == toValidate) {
return;
}value = toValidate.toString();// validate the value against the list of valid patterns.Iterator patternIt = formatPatternsList.iterator();while (patternIt.hasNext()) {
valid = isFormatValid(
((String)patternIt.next()), value);
if (valid) {
break;
}
}if ( !valid ) {
FacesMessage errMsg =
new FacesMessage(FORMAT_INVALID_MESSAGE_ID);
FacesContext.getCurrentInstance().addMessage(null, errMsg);throw new ValidatorException(errMsg);
}
}
}
The@FacesValidator annotationregistersthe FormatValidator classasavalidatorwiththe
JavaServerFacesimplementation.The validate methodgetsthelocalvalueofthecomponent
andconvertsittoa String.Ittheniteratesoverthe formatPatternsList list,whichisthelistof
acceptablepatternsthatwasparsedfromthe formatPatterns attributeofthecustomvalidator
tag.
Whileiteratingoverthelist,thismethodchecksthepatternofthecomponent’slocalvalue
againstthepatternsinthelist.IfthepatternofthelocalvaluedoesnotmatchanypatternintheCreatingandUsingaCustomValidator
Chapter13 • CreatingCustomUIComponentsandOtherCustomObjects 285
list,thismethodgeneratesanerrormessage.Itthencreatesa
javax.faces.application.FacesMessage andqueuesitonthe FacesContext fordisplay
duringtheRenderResponsephase,usinga Stringthatrepresentsthekeyinthe Properties
file:
public static final String FORMAT_INVALID_MESSAGE_ID =
"FormatInvalid ";
}
Finally,themethodpassesthemessagetotheconstructorof
javax.faces.validator.ValidatorException .
Whentheerrormessageisdisplayed,theformatpatternwillbesubstitutedforthe {0}inthe
errormessage,which,inEnglish,isasfollows:
Input must match one of the following patterns: {0}
Youmaywishtosaveandrestorestateforyourvalidator,althoughstatesavingisnotusuallynecessary.Todoso,youwillneedtoimplementthe StateHolder interfaceinadditiontothe
Validator interface.Toimplement StateHolder ,youwouldneedtoimplementitsfour
methods: saveState(FacesContext) ,restoreState(FacesContext, Object) ,isTransient ,
andsetTransient(boolean) .See
“SavingandRestoringState”onpage269 formore
information.
SpecifyingaCustomTag
Ifyouimplementeda Validator interfaceratherthanimplementingamanagedbeanmethod
thatperformsthevalidation,youneedtodooneofthefollowing:
■Allowthepageauthortospecifythe Validator implementationtousewiththe
f:validator tag.Inthiscase,the Validator implementationmustdefineitsown
properties. “UsingaCustomValidator”onpage287 explainshowtousethe f:validator
tag.
■Specifyacustomtagthatprovidesattributesforconfiguringthepropertiesofthevalidatorfromthepage.
Tospecifyacustomtag,youneedtoaddthetagtothetaglibrarydescriptorfortheapplication,
bookstore.taglib.xml .
<tag>
<tag-name>formatValidator</tag-name><validator>
<validator-id>formatValidator</validator-id><validator-class>dukesbookstore.validators.FormatValidator</validator-class>
</validator>
</tag>CreatingandUsingaCustomValidator
TheJavaEE6Tutorial • January2013 286
Thetag-name elementdefinesthenameofthetagasitmustbeusedinaFaceletspage.The
validator-id elementidentifiesthecustomvalidator.The validator-class elementwires
thecustomtagtoitsimplementationclass.
“UsingaCustomValidator”onpage287 explainshowtousethecustomvalidatortagonthe
page.
UsingaCustomValidator
Toregisteracustomvalidatoronacomponent,youmustdooneofthefollowing:
■Nestthevalidator’scustomtaginsidethetagofthecomponentwhosevalueyouwanttobevalidated.
■Nestthestandard f:validator tagwithinthetagofthecomponentandreferencethe
custom Validator implementationfromthe f:validator tag.
Hereisahypotheticalcustom formatValidator tagfortheCreditCardNumberfield,nested
withinthe h:inputText tag:
<h:inputText id= "ccno"size= "19"
...required= "true">
<mystore:formatValidator
formatPatterns= "9999999999999999|9999 9999 9999 9999|9999-9999-9999-9999 "/>
</h:inputText><h:message styleClass= "validationMessage "for="ccno"/>
Thistagvalidatestheinputofthe ccnofieldagainstthepatternsdefinedbythepageauthorin
theformatPatterns attribute.
Youcanusethesamecustomvalidatorforanysimilarcomponentbysimplynestingthecustom
validatortagwithinthecomponenttag.
Iftheapplicationdeveloperwhocreatedthecustomvalidatorpreferstoconfiguretheattributes
inthe Validator implementationratherthanallowthepageauthortoconfiguretheattributes
fromthepage,thedeveloperwillnotcreateacustomtagforusewiththevalidator.
Inthiscase,thepageauthormustnestthe f:validator taginsidethetagofthecomponent
whosedataneedstobevalidated.Thenthepageauthorneedstodooneofthefollowing:
■Setthe f:validator tag’s validatorId attributetotheIDofthevalidatorthatisdefinedin
theapplicationconfigurationresourcefile.
■Bindthecustom Validator implementationtoamanagedbeanpropertyusingthe
f:validator tag’s bindingattribute,asdescribedin “BindingConverters,Listeners,and
ValidatorstoManagedBeanProperties”onpage293 .CreatingandUsingaCustomValidator
Chapter13 • CreatingCustomUIComponentsandOtherCustomObjects 287
Thefollowingtagregistersahypotheticalvalidatoronacomponentusinga validator tagand
referencestheIDofthevalidator:
<h:inputText id= "name"value= "#{CustomerBean.name} "
size= "10"... >
<f:validator validatorId= "customValidator "/>
...
</h:inputText>
BindingComponentValuesandInstancestoManagedBean
Properties
Acomponenttagcanwireitsdatatoamanagedbeanbyoneofthefollowingmethods:
■Bindingitscomponent’svaluetoabeanproperty
■Bindingitscomponent’sinstancetoabeanproperty
Tobindacomponent’svaluetoamanagedbeanproperty,acomponenttag’s valueattribute
usesaELvalueexpression.Tobindacomponentinstancetoabeanproperty,acomponenttag’sbindingattributeusesavalueexpression.
Whenacomponentinstanceisboundtoamanagedbeanproperty,thepropertyholdsthe
component’slocalvalue.Conversely,whenacomponent’svalueisboundtoamanagedbeanproperty,thepropertyholdsthevaluestoredinthemanagedbean.ThisvalueisupdatedwiththelocalvalueduringtheUpdateModelValuesphaseofthelifecycle.Thereareadvantagestobothofthesemethods.
Bindingacomponentinstancetoabeanpropertyhastheseadvantages:
■Themanagedbeancanprogrammaticallymodifycomponentattributes.
■Themanagedbeancaninstantiatecomponentsratherthanletthepageauthordoso.
Bindingacomponent’svaluetoabeanpropertyhastheseadvantages:
■Thepageauthorhasmorecontroloverthecomponentattributes.
■ThemanagedbeanhasnodependenciesontheJavaServerFacesAPI(suchasthe
componentclasses),allowingforgreaterseparationofthepresentationlayerfromthemodellayer.
■TheJavaServerFacesimplementationcanperformconversionsonthedatabasedonthetypeofthebeanpropertywithoutthedeveloperneedingtoapplyaconverter.
Inmostsituations,youwillbindacomponent’svalueratherthanitsinstancetoabeanproperty.
You’llneedtouseacomponentbindingonlywhenyouneedtochangeoneofthecomponent’sattributesdynamically.Forexample,ifanapplicationrendersacomponentonlyundercertainconditions,itcansetthecomponent’s rendered propertyaccordinglybyaccessingtheproperty
towhichthecomponentisbound.BindingComponentValuesandInstancestoManagedBeanProperties
TheJavaEE6Tutorial • January2013 288
Whenreferencingthepropertyusingthecomponenttag’s valueattribute,youneedtousethe
propersyntax.Forexample,supposeamanagedbeancalled MyBeanhasthis intproperty:
protected int currentOption = null;
public int getCurrentOption(){...}public void setCurrentOption(int option){...}
Thevalueattributethatreferencesthispropertymusthavethisvalue-bindingexpression:
#{myBean.currentOption}
Inadditiontobindingacomponent’svaluetoabeanproperty,the valueattributecanspecifya
literalvalueorcanmapthecomponent’sdatatoanyprimitive(suchas int),structure(suchas
anarray),orcollection(suchasalist),independentofaJavaBeanscomponent. Table13–3 lists
someexamplevalue-bindingexpressionsthatyoucanusewiththe valueattribute.
TABLE13–3 ExamplesofValue-BindingExpressions
Value Expression
ABoolean cart.numberOfItems > 0
Apropertyinitializedfromacontextinitialization
parameterinitParam.quantity
Abeanproperty cashierBean.name
Valueinanarray books[3]
Valueinacollection books[ "fiction "]
Propertyofanobjectinanarrayofobjects books[3].price
Thenexttwosectionsexplainhowtousethe valueattributetobindacomponent’svaluetoa
beanpropertyorotherdataobjects,andhowtousethe bindingattributetobindacomponent
instancetoabeanproperty.
BindingaComponentValuetoaProperty
Tobindacomponent’svaluetoamanagedbeanproperty,youspecifythenameofthebeanandthepropertyusingthe valueattribute.
ThismeansthatthefirstpartoftheELvalueexpressionmustmatchthenameofthemanaged
beanuptothefirstperiod( .)andthepartofthevalueexpressionaftertheperiodmustmatch
thepropertyofthemanagedbean.
Forexample,intheDuke'sBookstorecasestudy,the h:dataTable tagin bookcatalog.xhtml
setsthevalueofthecomponenttothevalueofthe bookspropertyofthestatelesssessionbean
BookRequestBean :BindingComponentValuesandInstancestoManagedBeanProperties
Chapter13 • CreatingCustomUIComponentsandOtherCustomObjects 289
<h:dataTable id= "books "
value= "#{bookRequestBean.books} "
var="book"
headerClass= "list-header "
styleClass= "list-background "
rowClasses= "list-row-even, list-row-odd "
border= "1"
summary= "#{bundle.BookCatalog} ">
Thevalueisobtainedbycallingthebean's getBooks method.
Ifyouusetheapplicationconfigurationresourcefiletoconfiguremanagedbeansinsteadof
definingtheminmanagedbeanclasses,thenameofthebeaninthe valueexpressionmust
matchthe managed-bean-name elementofthemanagedbeandeclarationuptothefirstperiod
(.)intheexpression.Similarly,thepartofthevalueexpressionaftertheperiodmustmatchthe
namespecifiedinthecorresponding property-name elementintheapplicationconfiguration
resourcefile.
Forexample,considerthismanagedbeanconfiguration,whichconfiguresthe ImageArea bean
correspondingtothetopleftbookintheimagemaponthe index.html pageoftheDuke's
Bookstorecasestudy:
<managed-bean eager= "true">
...<managed-bean-name> Book201 </managed-bean-name><managed-bean-class> dukesbookstore.model.ImageArea </managed-bean-class><managed-bean-scope> application </managed-bean-scope><managed-property>
...<property-name>shape</property-name><value>rect</value>
</managed-property><managed-property>
...<property-name>alt</property-name><value>Duke</value>
</managed-property>...
Thisexampleconfiguresabeancalled Book201,whichhasseveralproperties,oneofwhichis
called shape.BindingComponentValuesandInstancestoManagedBeanProperties
TheJavaEE6Tutorial • January2013 290
Althoughthe bookstore:area tagsonthe index.xhtml pagedonotbindtoan ImageArea
property(theybindtothebeanitself),youcouldrefertothepropertyusingavalueexpressionfromthe valueattributeofthecomponent'stag:
<h:outputText value= "#{Book201.shape} "/>
See“ConfiguringManagedBeans”onpage300 forinformationonhowtoconfigurebeansin
theapplicationconfigurationresourcefile.
BindingaComponentValuetoanImplicitObject
Oneexternaldatasourcethata valueattributecanrefertoisanimplicitobject.
Thebookreceipt.xhtml pageoftheDuke'sBookstorecasestudyhasareferencetoanimplicit
object:
<h:outputFormat title= "thanks "
value= "#{bundle.ThankYouParam} ">
<f:param value= "#{sessionScope.name} "/>
</h:outputFormat>
Thistaggetsthenameofthecustomerfromthesessionscopeandinsertsitintothe
parameterizedmessageatthekey ThankYouParam fromtheresourcebundle.Forexample,ifthe
nameofthecustomerisGwenCanigetit,thistagwillrender:
Thank you, Gwen Canigetit, for purchasing your books from us.
Retrievingvaluesfromotherimplicitobjectsisdoneinasimilarwaytotheexampleshowninthissection.
Table13–4 liststheimplicitobjectstowhichavalueattributecanrefer.Allofthe
implicitobjects,exceptforthescopeobjects,areread-onlyandthereforeshouldnotbeusedasavaluefora UIInputcomponent.
TABLE13–4 ImplicitObjects
ImplicitObject WhatItIs
applicationScope AMapoftheapplicationscopeattributevalues,keyedbyattributename
cookie AMapofthecookievaluesforthecurrentrequest,keyedbycookiename
facesContext TheFacesContext instanceforthecurrentrequest
header AMapofHTTPheadervaluesforthecurrentrequest,keyedbyheadername
headerValues AMapofStringarrayscontainingalltheheadervaluesforHTTPheadersinthe
currentrequest,keyedbyheadername
initParam AMapofthecontextinitializationparametersforthiswebapplication
param AMapoftherequestparametersforthisrequest,keyedbyparameternameBindingComponentValuesandInstancestoManagedBeanProperties
Chapter13 • CreatingCustomUIComponentsandOtherCustomObjects 291
TABLE13–4 ImplicitObjects (Continued)
ImplicitObject WhatItIs
paramValues AMapofStringarrayscontainingalltheparametervaluesforrequestparametersin
thecurrentrequest,keyedbyparametername
requestScope AMapoftherequestattributesforthisrequest,keyedbyattributename
sessionScope AMapofthesessionattributesforthisrequest,keyedbyattributename
view Theroot UIComponent inthecurrentcomponenttreestoredinthe FacesRequest for
thisrequest
BindingaComponentInstancetoaBeanProperty
Acomponentinstancecanbeboundtoabeanpropertyusingavalueexpressionwiththe
bindingattributeofthecomponent’stag.Youusuallybindacomponentinstanceratherthan
itsvaluetoabeanpropertyifthebeanmustdynamicallychangethecomponent’sattributes.
Herearetwotagsfromthe bookcashier.xhtml pagethatbindcomponentstobeanproperties:
<h:selectBooleanCheckbox id= "fanClub "
rendered= "false "
binding= "#{cashier.specialOffer} "/>
<h:outputLabel for= "fanClub "
rendered= "false "
binding= "#{cashier.specialOfferText} "
value= "#{bundle.DukeFanClub} "/>
Theh:selectBooleanCheckbox tagrendersacheckboxandbindsthe fanClub
UISelectBoolean componenttothe specialOffer propertyofthe cashierbean.The
h:outputLabel tagbindsthecomponentrepresentingthecheckbox’slabeltothe
specialOfferText propertyofthe cashierbean.Iftheapplication'slocaleisEnglish,the
h:outputLabel tagrenders:
I’d like to join the Duke Fan Club, free with my purchase of over $100
Therendered attributesofbothtagsaresetto false,topreventthecheckboxanditslabelfrom
beingrendered.IfthecustomermakesalargeorderandclickstheSubmitbutton,the submit
methodof CashierBean setsbothcomponents’ rendered propertiesto true,causingthecheck
boxanditslabeltoberendered.
Thesetagsusecomponentbindingsratherthanvaluebindings,becausethemanagedbean
mustdynamicallysetthevaluesofthecomponents’ rendered properties.
Ifthetagsweretousevaluebindingsinsteadofcomponentbindings,themanagedbeanwould
nothavedirectaccesstothecomponents,andwouldthereforerequireadditionalcodetoaccessthecomponentsfromthe FacesContext instancetochangethecomponents’ rendered
properties.BindingComponentValuesandInstancestoManagedBeanProperties
TheJavaEE6Tutorial • January2013 292
“WritingPropertiesBoundtoComponentInstances”onpage198 explainshowtowritethe
beanpropertiesboundtotheexamplecomponents.
BindingConverters,Listeners,andValidatorstoManaged
BeanProperties
Asdescribedin “AddingComponentstoaPageUsingHTMLTags”onpage140 ,apageauthor
canbindconverter,listener,andvalidatorimplementationstomanagedbeanpropertiesusingthebindingattributesofthetagsthatareusedtoregistertheimplementationsoncomponents.
Thistechniquehassimilaradvantagestobindingcomponentinstancestomanagedbean
properties,asdescribedin
“BindingComponentValuesandInstancestoManagedBean
Properties”onpage288 .Inparticular,bindingaconverter,listener,orvalidator
implementationtoamanagedbeanpropertyyieldsthefollowingbenefits:
■Themanagedbeancaninstantiatetheimplementationinsteadofallowingthepageauthortodoso.
■Themanagedbeancanprogrammaticallymodifytheattributesoftheimplementation.Inthecaseofacustomimplementation,theonlyotherwaytomodifytheattributesoutsideoftheimplementationclasswouldbetocreateacustomtagforitandrequirethepageauthortosettheattributevaluesfromthepage.
Whetheryouarebindingaconverter,listener,orvalidatortoamanagedbeanproperty,the
processisthesameforanyoftheimplementations:
■Nesttheconverter,listener,orvalidatortagwithinanappropriatecomponenttag.
■Makesurethatthemanagedbeanhasapropertythatacceptsandreturnstheconverter,listener,orvalidatorimplementationclassthatyouwanttobindtotheproperty.
■Referencethemanagedbeanpropertyusingavalueexpressionfromthe bindingattribute
oftheconverter,listener,orvalidatortag.
Forexample,saythatyouwanttobindthestandard DateTime convertertoamanagedbean
propertybecauseyouwanttosettheformattingpatternoftheuser’sinputinthemanagedbeanratherthanontheFaceletspage.First,thepageregisterstheconverterontothecomponentbynestingthe f:convertDateTime tagwithinthecomponenttag.BindingConverters,Listeners,andValidatorstoManagedBeanProperties
Chapter13 • CreatingCustomUIComponentsandOtherCustomObjects 293
Then,thepagereferencesthepropertywiththe bindingattributeofthe f:convertDateTime
tag:
<h:inputText value= "#{loginBean.birthDate} ">
<f:convertDateTime binding= "#{loginBean.convertDate} "/>
</h:inputText>
TheconvertDate propertywouldlooksomethinglikethis:
private DateTimeConverter convertDate;
public DateTimeConverter getConvertDate() {
...return convertDate;
}public void setConvertDate(DateTimeConverter convertDate) {
convertDate.setPattern( "EEEEEEEE, MMM dd, yyyy ");
this.convertDate = convertDate;
}
See“WritingPropertiesBoundtoConverters,Listeners,orValidators”onpage199 formore
informationonwritingmanagedbeanpropertiesforconverter,listener,andvalidatorimplementations.BindingConverters,Listeners,andValidatorstoManagedBeanProperties
TheJavaEE6Tutorial • January2013 294
ConfiguringJavaServerFacesApplications
TheprocessofbuildinganddeployingsimpleJavaServerFacesapplicationsisdescribedin
earlierchaptersofthistutorial.Whenyoucreatelargeandcomplexapplications,however,variousadditionalconfigurationtasksarerequired.Thesetasksincludethefollowing:
■Registeringmanagedbeanswiththeapplicationsothatallpartsoftheapplicationhaveaccesstothem
■Configuringmanagedbeansandmodelbeanssothattheyareinstantiatedwiththepropervalueswhenapagemakesreferencetothem
■Definingnavigationrulesforeachofthepagesintheapplicationsothattheapplicationhasasmoothpageflow,ifnon-defaultnavigationisneeded
■Packagingtheapplicationtoincludeallthepages,resources,andotherfilessothattheapplicationcanbedeployedonanycompliantcontainer
Thefollowingtopicsareaddressedhere:
■“UsingAnnotationstoConfigureManagedBeans”onpage296
■“ApplicationConfigurationResourceFile”onpage297
■“ConfiguringManagedBeans”onpage300
■“RegisteringApplicationMessages”onpage308
■“UsingDefaultValidators”onpage311
■“RegisteringaCustomValidator”onpage312
■“RegisteringaCustomConverter”onpage313
■“ConfiguringNavigationRules”onpage313
■“RegisteringaCustomRendererwithaRenderKit”onpage317
■“RegisteringaCustomComponent”onpage319
■“BasicRequirementsofaJavaServerFacesApplication”onpage32014CHAPTER 14
295
UsingAnnotationstoConfigureManagedBeans
JavaServerFacessupportforbeanannotationsisintroducedin Chapter4,“JavaServerFaces
Technology.” BeanannotationscanbeusedforconfiguringJavaServerFacesapplications.
The@ManagedBean (javax.faces.bean.ManagedBean )annotationinaclassautomatically
registersthatclassasaresourcewiththeJavaServerFacesimplementation.Sucharegisteredmanagedbeandoesnotneed managed-bean configurationentriesintheapplication
configurationresourcefile.
Anexampleofusingthe @ManagedBean annotationinaclassisasfollows:
@ManagedBean
@SessionScopedpublic class DukesBday{...}
TheabovecodesnippetshowsabeanthatismanagedbytheJavaServerFacesimplementation
andisavailableforthelengthofthesession.Youdonotneedtoconfigurethemanagedbeaninstanceinthe faces-config.xml file.Ineffect,thisisanalternativetotheapplication
configurationresourcefileapproachandreducesthetaskofconfiguringmanagedbeans.
Youcanalsodefinethescopeofthemanagedbeanwithintheclassfile,asshownintheabove
example.Youcanannotatebeanswithrequest,session,application,orviewscope.
Allclasseswillbescannedforannotationsatstartupunlessthe faces-config elementinthe
faces-config.xml filehasthe metadata-complete attributesetto true.
Annotationsarealsoavailableforotherartifacts,suchascomponents,converters,validators,
andrenderers,tobeusedinplaceofapplicationconfigurationresourcefileentries.Thesearediscussed,alongwithregistrationofcustomlisteners,customvalidators,andcustomconverters,in
Chapter13,“CreatingCustomUIComponentsandOtherCustomObjects.”
UsingManagedBeanScopes
Youcanuseannotationstodefinethescopeinwhichthebeanwillbestored.Youcanspecifyoneofthefollowingscopesforabeanclass:
■Application( @ApplicationScoped ):Applicationscopepersistsacrossallusers’interactions
withawebapplication.
■Session( @SessionScoped ):SessionscopepersistsacrossmultipleHTTPrequestsinaweb
application.
■View( @ViewScoped ):Viewscopepersistsduringauser’sinteractionwithasinglepage
(view)ofawebapplication.
■Request( @RequestScoped ):RequestscopepersistsduringasingleHTTPrequestinaweb
application.UsingAnnotationstoConfigureManagedBeans
TheJavaEE6Tutorial • January2013 296
■None( @NoneScoped ):Indicatesascopeisnotdefinedfortheapplication.
■Custom( @CustomScoped ):Auser-defined,nonstandardscope.Itsvaluemustbeconfigured
asajava.util.Map .Customscopesareusedinfrequently.
Youmaywanttouse @NoneScoped whenamanagedbeanreferencesanothermanagedbean.
Thesecondbeanshouldnotbeinascope( @NoneScoped )ifitissupposedtobecreatedonly
whenitisreferenced.Ifyoudefineabeanas @NoneScoped ,thebeanisinstantiatedaneweach
timeitisreferenced,soitdoesnotgetsavedinanyscope.
Ifyourmanagedbeanisreferencedbythe bindingattributeofacomponenttag,youshould
definethebeanwitharequestscope.Ifyouplacedthebeaninsessionorapplicationscopeinstead,thebeanwouldneedtotakeprecautionstoensurethreadsafety,becausejavax.faces.component.UIComponent instanceseachdependonrunninginsideofasingle
thread.
Ifyouareconfiguringabeanthatallowsattributestobeassociatedwiththeview,youcanuse
theviewscope.Theattributespersistuntiltheuserhasnavigatedtothenextview.
EagerApplication-ScopedBeans
Managedbeansarelazilyinstantiated.Thatis,thattheyareinstantiatedwhenarequestismadefromtheapplication.
Toforceanapplication-scopedbeantobeinstantiatedandplacedintheapplicationscopeas
soonastheapplicationisstartedandbeforeanyrequestismade,the eagerattributeofthe
managedbeanshouldbesetto trueasshowninthefollowingexample:
@ManagedBean(eager=true)
@ApplicationScoped
ApplicationConfigurationResourceFile
JavaServerFacestechnologyprovidesaportableconfigurationformat(asanXMLdocument)
forconfiguringapplicationresources.OneormoreXMLdocuments,called application
configurationresourcefiles ,mayusethisformattoregisterandconfigureobjectsandresources,
andtodefinenavigationrulesforapplications.Anapplicationconfigurationresourcefileisusuallynamed faces-config.xml .
Youneedanapplicationconfigurationresourcefileinthefollowingcases:
■Tospecifyconfigurationelementsforyourapplicationthatarenotavailablethrough
managedbeanannotations,suchaslocalizedmessagesandnavigationrules
■Tooverridemanagedbeanannotationswhentheapplicationisdeployed
TheapplicationconfigurationresourcefilemustbevalidagainsttheXMLschemalocatedat
http://java.sun.com/xml/ns/javaee/web-facesconfig_2_0.xsd .ApplicationConfigurationResourceFile
Chapter14 • ConfiguringJavaServerFacesApplications 297
Inaddition,eachfilemustincludethefollowinginformation,inthefollowingorder:
■TheXMLversionnumber,usuallywithan encoding attribute:
<?xml version= "1.0"encoding=’UTF-8’?>
■Afaces-config tagenclosingalltheotherdeclarations:
<faces-config version= "2.0"xmlns= "http://java.sun.com/xml/ns/javaee "
xmlns:xsi= "http://www.w3.org/2001/XMLSchema-instance "
xsi:schemaLocation= "http://java.sun.com/xml/ns/javaee
http://java.sun.com/xml/ns/javaee/web-facesconfig_2_0.xsd ">
...
</faces-config>
Youcanhavemorethanoneapplicationconfigurationresourcefileforanapplication.The
JavaServerFacesimplementationfindstheconfigurationfileorfilesbylookingforthefollowing:
■Aresourcenamed /META-INF/faces-config.xml inanyoftheJARfilesintheweb
application’s /WEB-INF/lib/ directoryandinparentclassloaders.Ifaresourcewiththis
nameexists,itisloadedasaconfigurationresource.Thismethodispracticalforapackagedlibrarycontainingsomecomponentsandrenderers.Inaddition,anyfilewithanamethatendsin faces-config.xml isalsoconsideredaconfigurationresourceandisloadedassuch.
■Acontextinitializationparameter, javax.faces.application.CONFIG_FILES ,inyourweb
deploymentdescriptorfilethatspecifiesoneormore(comma-delimited)pathstomultipleconfigurationfilesforyourwebapplication.Thismethodismostoftenusedforenterprise-scaleapplicationsthatdelegatetoseparategroupstheresponsibilityformaintainingthefileforeachportionofabigapplication.
■Aresourcenamed faces-config.xml inthe /WEB-INF/ directoryofyourapplication.
Simplewebapplicationsmaketheirconfigurationfilesavailableinthisway.
Toaccesstheresourcesregisteredwiththeapplication,anapplicationdevelopercanusean
instanceofthe javax.faces.application.Application class,whichisautomaticallycreated
foreachapplication.The Application instanceactsasacentralizedfactoryforresourcesthat
aredefinedintheXMLfile.
Whenanapplicationstartsup,theJavaServerFacesimplementationcreatesasingleinstanceof
theApplication classandconfiguresitwiththeinformationyouprovidedintheapplication
configurationresourcefile.
OrderingofApplicationConfigurationResourceFiles
BecauseJavaServerFacestechnologyallowstheuseofmultipleapplicationconfigurationresourcefilesstoredindifferentlocations,theorderinwhichtheyareloadedbytheimplementationbecomesimportantincertainsituations(forexample,whenusingapplication-levelobjects).Thisordercanbedefinedthroughan ordering elementandits
subelementsintheapplicationconfigurationresourcefileitself.Theorderingofapplicationconfigurationresourcefilescanbeabsoluteorrelative.ApplicationConfigurationResourceFile
TheJavaEE6Tutorial • January2013 298
Absoluteorderingisdefinedbyan absolute-ordering elementinthefile.Withabsolute
ordering,theuserspecifiestheorderinwhichapplicationconfigurationresourcefileswillbeloaded.Thefollowingexampleshowsanentryforabsoluteordering:
Filemy-faces-config.xml :
<faces-config>
<name>myJSF</name><absolute-ordering>
<name>A</name><name>B</name><name>C</name>
</absolute-ordering>
</faces-config>
Inthisexample,A,B,andCaredifferentapplicationconfigurationresourcefilesandaretobe
loadedinthelistedorder.
Ifthereisan absolute-ordering elementinthefile,onlythefileslistedbythesubelement name
areprocessed.Toprocessanyotherapplicationconfigurationresourcefiles,an others
subelementisrequired.Intheabsenceofthe otherssubelement,allotherunlistedfileswillbe
ignoredatloadtime.
Relativeorderingisdefinedbyan ordering elementanditssubelements beforeandafter.
Withrelativeordering,theorderinwhichapplicationconfigurationresourcefileswillbeloadediscalculatedbyconsideringorderingentriesfromthedifferentfiles.Thefollowingexampleshowssomeoftheseconsiderations.Inthefollowingexample, config-A ,config-B ,
andconfig-C aredifferentapplicationconfigurationresourcefiles.
Fileconfig-A containsthefollowingelements:
<faces-config>
<name>config-A</name><ordering>
<before>
<name>config-B</name>
</before>
</ordering>
</faces-config>
Fileconfig-B (notshownhere)doesnotcontainany ordering elements.
Fileconfig-C containsthefollowingelements:
<faces-config>
<name>config-C</name>
<ordering>
<after>
<name>config-B</name>
</after>
</ordering>
</faces-config>ApplicationConfigurationResourceFile
Chapter14 • ConfiguringJavaServerFacesApplications 299
Basedonthe beforesubelemententry,file config-A willbeloadedbeforethe config-B file.
Basedonthe aftersubelemententry,file config-C willbeloadedafterthe config-B file.
Inaddition,asubelement otherscanalsobenestedwithinthe beforeandaftersubelements.
Ifthe otherselementispresent,thespecifiedfilemayreceivehighestorlowestpreference
amongbothlistedandunlistedconfigurationfiles.
Ifan ordering elementisnotpresentinanapplicationconfigurationfile,thenthatfilewillbe
loadedafterallthefilesthatcontain ordering elements.
ConfiguringManagedBeans
Whenapagereferencesamanagedbeanforthefirsttime,theJavaServerFacesimplementation
initializesitbasedona @ManagedBean annotationinthebeanclass(ora @Namedannotationfor
CDImanagedbeans)oraccordingtoitsconfigurationintheapplicationconfigurationresourcefile.Forinformationonusingannotationstoinitializebeans,see
“UsingAnnotationsto
ConfigureManagedBeans”onpage296 .
Youcanuseeitherannotationsortheapplicationconfigurationresourcefiletoinstantiate
managedbeansthatareusedinaJavaServerFacesapplicationandtostoretheminscope.Themanagedbeancreationfacilityisconfiguredintheapplicationconfigurationresourcefileusingmanaged-bean XMLelementstodefineeachbean.Thisfileisprocessedatapplicationstartup
time.Forinformationonusingthisfacility,see
“Usingthe managed-bean Element”onpage300 .
Withthemanagedbeancreationfacility,youcan:
■Createbeansinonecentralizedfilethatisavailabletotheentireapplication,ratherthan
conditionallyinstantiatebeansthroughouttheapplication
■Customizeabean’spropertieswithoutanyadditionalcode
■Customizeabean’spropertyvaluesdirectlyfromwithintheconfigurationfilesothatitisinitializedwiththesevalueswhenitiscreated
■Using valueelements,setapropertyofonemanagedbeantobetheresultofevaluating
anothervalueexpression
Thissectionshowsyouhowtoinitializebeansusingthemanagedbeancreationfacility.See
“WritingBeanProperties”onpage192 and“WritingManagedBeanMethods”onpage200 for
informationonprogrammingmanagedbeans.
Usingthe managed-bean Element
Amanagedbeanisinitiatedintheapplicationconfigurationresourcefileusinga managed-bean
element,whichrepresentsaninstanceofabeanclassthatmustexistintheapplication.Atruntime,theJavaServerFacesimplementationprocessesthe managed-bean element.IfapageConfiguringManagedBeans
TheJavaEE6Tutorial • January2013 300
referencesthebean,andifnobeaninstanceexists,theJavaServerFacesimplementation
instantiatesthebeanasspecifiedbytheelementconfiguration.
HereisanexamplemanagedbeanconfigurationfromtheDuke’sBookstorecasestudy:
<managed-bean eager= "true">
<managed-bean-name> Book201 </managed-bean-name><managed-bean-class> dukesbookstore.model.ImageArea </managed-bean-class><managed-bean-scope> application </managed-bean-scope><managed-property>
<property-name>shape</property-name><value>rect</value>
</managed-property><managed-property>
<property-name>alt</property-name><value>Duke</value>
</managed-property><managed-property>
<property-name>coords</property-name><value>67,23,212,268</value>
</managed-property>
</managed-bean>
UsingNetBeansIDE,youcanaddamanagedbeandeclarationbydoingthefollowing:
1. AfteropeningyourprojectinNetBeansIDE,expandtheprojectnodeintheProjectspane.
2. ExpandtheWebPagesandWEB-INFnodesoftheprojectnode.3. Ifthereisno faces-config.xml intheproject,createoneasfollows:
a. FromtheFilemenu,chooseNewFile.b. IntheNewFilewizard,selecttheJavaServerFacescategory,thenselectJSFFaces
ConfigurationandclickNext.
c. OntheNameandLocationpage,changethenameandlocationofthefileifnecessary.
Thedefaultfilenameis faces-config.xml .
d. ClickFinish.
4. Double-click faces-config.xml ifthefileisnotalreadyopen.
5. After faces-config.xml opensintheeditorpane,selectXMLfromthesub-tabpanel
options.
6. Right-clickintheeditorpane.7. FromtheInsertmenu,chooseManagedBean.8. IntheAddManagedBeandialogbox:
a. TypethedisplaynameofthebeanintheBeanNamefield.
b. ClickBrowsetolocatethebean’sclass.
9. IntheBrowseClassdialogbox:
a. StarttypingthenameoftheclassyouarelookingforintheClassNamefield.Whileyou
aretyping,thedialogwillshowthematchingclasses.ConfiguringManagedBeans
Chapter14 • ConfiguringJavaServerFacesApplications 301
b. SelecttheclassfromtheMatchingClassesbox.
c. ClickOK.
10.IntheAddManagedBeandialogbox:
a. Selectthebean’sscopefromtheScopemenu.
b. ClickAdd.
Theprecedingstepswilladdthe managed-bean elementandthreeelementsinsideofthat
element:a managed-bean-name element,a managed-bean-class element,anda
managed-bean-scope element.YouwillneedtoedittheXMLoftheconfigurationfiledirectly
tofurtherconfigurethismanagedbean.
Themanaged-bean-name elementdefinesthekeyunderwhichthebeanwillbestoredinascope.
Foracomponent’svaluetomaptothisbean,thecomponenttag’s valueattributemustmatch
themanaged-bean-name uptothefirstperiod.
Themanaged-bean-class elementdefinesthefullyqualifiednameoftheJavaBeanscomponent
classusedtoinstantiatethebean.
Themanaged-bean elementcancontainzeroormore managed-property elements,each
correspondingtoapropertydefinedinthebeanclass.Theseelementsareusedtoinitializethevaluesofthebeanproperties.Ifyoudon’twantaparticularpropertyinitializedwithavaluewhenthebeanisinstantiated,donotincludea managed-property definitionforitinyour
applicationconfigurationresourcefile.
Ifamanaged-bean elementdoesnotcontainother managed-bean elements,itcancontainone
map-entries elementor list-entries element.The map-entries elementconfiguresasetof
beansthatareinstancesof Map.The list-entries elementconfiguresasetofbeansthatare
instancesof List.
Inthefollowingexample,the newsletters managedbean,representinga UISelectItems
component,isconfiguredasan ArrayList thatrepresentsasetof SelectItem objects.Each
SelectItem objectisinturnconfiguredasamanagedbeanwithproperties:
<managed-bean>
<managed-bean-name>newsletters</managed-bean-name><managed-bean-class>java.util.ArrayList</managed-bean-class><managed-bean-scope>application</managed-bean-scope><list-entries>
<value-class>javax.faces.model.SelectItem</value-class><value>#{newsletter0}</value><value>#{newsletter1}</value><value>#{newsletter2}</value><value>#{newsletter3}</value>
</list-entries>
</managed-bean><managed-bean>
<managed-bean-name>newsletter0</managed-bean-name><managed-bean-class>javax.faces.model.SelectItem</managed-bean-class>ConfiguringManagedBeans
TheJavaEE6Tutorial • January2013 302
<managed-bean-scope>none</managed-bean-scope>
<managed-property>
<property-name>label</property-name><value>Duke’s Quarterly</value>
</managed-property><managed-property>
<property-name>value</property-name><value>200</value>
</managed-property>
</managed-bean>...
Thisapproachmaybeusefulforquick-and-dirtycreationofselectionitemlists,beforea
developmentteamhashadtimetocreatesuchlistsfromthedatabase.Notethateachoftheindividualnewsletterbeanshasa managed-bean-scope settingof none,sothattheywillnot
themselvesbeplacedintoanyscope.
See
“InitializingArrayandListProperties”onpage306 formoreinformationonconfiguring
collectionsasbeans.
Tomaptoapropertydefinedbya managed-property element,youmustensurethatthepartof
acomponenttag’s valueexpressionaftertheperiodmatchesthe managed-property element’s
property-name element.Intheearlierexample,the maximumpropertyisinitializedwiththe
value 10.Thefollowingsection, “InitializingPropertiesUsingthe managed-property Element”
onpage303 ,explainsinmoredetailhowtousethe managed-property element.See “Initializing
ManagedBeanProperties”onpage307 foranexampleofinitializingamanagedbeanproperty.
InitializingPropertiesUsingthe managed-property
Element
Amanaged-property elementmustcontaina property-name element,whichmustmatchthe
nameofthecorrespondingpropertyinthebean.A managed-property elementmustalso
containoneofasetofelementsthatdefinesthevalueoftheproperty.Thisvaluemustbeofthesametypeasthatdefinedforthepropertyinthecorrespondingbean.Whichelementyouusetodefinethevaluedependsonthetypeofthepropertydefinedinthebean.
Table14–1 listsallthe
elementsthatareusedtoinitializeavalue.
TABLE14–1 Subelementsof managed-property ElementsThatDefinePropertyValues
Element ValueItDefines
list-entries Definesthevaluesinalist
map-entries Definesthevaluesofamap
null-value Explicitlysetsthepropertyto null
value Definesasinglevalue,suchasa String,int,orJavaServerFacesELexpressionConfiguringManagedBeans
Chapter14 • ConfiguringJavaServerFacesApplications 303
“Usingthe managed-bean Element”onpage300 includesanexampleofinitializingan int
property(aprimitivetype)usingthe valuesubelement.Youalsousethe valuesubelementto
initialize Stringandotherreferencetypes.Therestofthissectiondescribeshowtousethe
valuesubelementandothersubelementstoinitializepropertiesofJava Enumtypes, Map,array,
andCollection ,aswellasinitializationparameters.
ReferencingaJava EnumType
AmanagedbeanpropertycanalsobeaJava Enumtype(see http://docs.oracle.com/javase/
6/docs/api/java/lang/Enum.html ).Inthiscase,the valueelementofthe managed-property
elementmustbea Stringthatmatchesoneofthe Stringconstantsofthe Enum.Inotherwords,
theStringmustbeoneofthevalidvaluesthatcanbereturnedifyouweretocall
valueOf(Class, String) onenum,where Classisthe Enumclassand Stringisthecontentsof
thevaluesubelement.Forexample,supposethemanagedbeanpropertyisthefollowing:
public enum Suit { Hearts, Spades, Diamonds, Clubs}
...
public Suit getSuit() { ... return Suit.Hearts; }
Assumingyouwanttoconfigurethispropertyintheapplicationconfigurationresourcefile,the
corresponding managed-property elementlookslikethis:
<managed-property>
<property-name>Suit</property-name><value>Hearts</value>
</managed-property>
Whenthesystemencountersthisproperty,ititeratesovereachofthemembersofthe enumand
calls toString() oneachmemberuntilitfindsonethatisexactlyequaltothevaluefromthe
valueelement.
ReferencingaContextInitializationParameter
Anotherpowerfulfeatureofthemanagedbeancreationfacilityistheabilitytoreference
implicitobjectsfromamanagedbeanproperty.
Supposeyouhaveapagethatacceptsdatafromacustomer,includingthecustomer’saddress.
Supposealsothatmostofyourcustomersliveinaparticularareacode.Youcanmaketheareacodecomponentrenderthisareacodebysavingitinanimplicitobjectandreferencingitwhenthepageisrendered.
Youcansavetheareacodeasaninitialdefaultvalueinthecontext initParam implicitobjectby
addingacontextparametertoyourwebapplicationandsettingitsvalueinthedeploymentdescriptor.Forexample,tosetacontextparametercalled defaultAreaCode to650,adda
context-param elementtothedeploymentdescriptor,andgivetheparameterthename
defaultAreaCode andthevalue 650.
Next,youwritea managed-bean declarationthatconfiguresapropertythatreferencesthe
parameter:ConfiguringManagedBeans
TheJavaEE6Tutorial • January2013 304
<managed-bean>
<managed-bean-name>customer</managed-bean-name>
<managed-bean-class>CustomerBean</managed-bean-class><managed-bean-scope>request</managed-bean-scope><managed-property>
<property-name>areaCode</property-name>
<value>#{initParam.defaultAreaCode}</value>
</managed-property>...
</managed-bean>
Toaccesstheareacodeatthetimethepageisrendered,refertothepropertyfromthe area
componenttag’s valueattribute:
<h:inputText id=area value= "#{customer.areaCode} "
Valuesareretrievedfromotherimplicitobjectsinasimilarway.
InitializingMapProperties
Themap-entries elementisusedtoinitializethevaluesofabeanpropertywithatypeof
java.util.Map ifthe map-entries elementisusedwithina managed-property element.A
map-entries elementcontainsanoptional key-class element,anoptional value-class
element,andzeroormore map-entry elements.
Eachofthe map-entry elementsmustcontaina keyelementandeithera null-value orvalue
element.Hereisanexamplethatusesthe map-entries element:
<managed-bean>
...<managed-property>
<property-name>prices</property-name><map-entries>
<map-entry>
<key>My Early Years: Growing Up on *7</key><value>30.75</value>
</map-entry><map-entry>
<key>Web Servers for Fun and Profit</key><value>40.75</value>
</map-entry>
</map-entries>
</managed-property>
</managed-bean>
Themapcreatedfromthis map-entries tagcontainstwoentries.Bydefault,allthekeysand
valuesareconvertedto String.Ifyouwanttospecifyadifferenttypeforthekeysinthemap,
embedthe key-class elementjustinsidethe map-entries element:
<map-entries>
<key-class>java.math.BigDecimal</key-class>...
</map-entries>ConfiguringManagedBeans
Chapter14 • ConfiguringJavaServerFacesApplications 305
Thisdeclarationwillconvertallthekeysinto java.math.BigDecimal .Ofcourse,youmust
makesurethekeyscanbeconvertedtothetypeyouspecify.Thekeyfromtheexampleinthissectioncannotbeconvertedtoa BigDecimal ,becauseitisa String.
Ifyouwanttospecifyadifferenttypeforallthevaluesinthemap,includethe value-class
elementafterthe key-class element:
<map-entries>
<key-class>int</key-class><value-class>java.math.BigDecimal</value-class>...
</map-entries>
Notethatthistagsetsonlythetypeofallthe valuesubelements.
Each map-entry intheprecedingexampleincludesa valuesubelement.The valuesubelement
definesasinglevalue,whichwillbeconvertedtothetypespecifiedinthebean.
Insteadofusinga map-entries element,itisalsopossibletoassigntheentiremapusinga
valueelementthatspecifiesamap-typedexpression.
InitializingArrayandListProperties
Thelist-entries elementisusedtoinitializethevaluesofanarrayor Listproperty.Each
individualvalueofthearrayor Listisinitializedusinga valueornull-value element.Hereis
anexample:
<managed-bean>
...<managed-property>
<property-name>books</property-name><list-entries>
<value-class>java.lang.String</value-class><value>Web Servers for Fun and Profit</value><value>#{myBooks.bookId[3]}</value><null-value/>
</list-entries>
</managed-property>
</managed-bean>
Thisexampleinitializesanarrayora List.Thetypeofthecorrespondingpropertyinthebean
determineswhichdatastructureiscreated.The list-entries elementdefinesthelistofvalues
inthearrayor List.The valueelementspecifiesasinglevalueinthearrayor Listandcan
referenceapropertyinanotherbean.The null-value elementwillcausethe setBooks method
tobecalledwithanargumentof null.Anullpropertycannotbespecifiedforapropertywhose
datatypeisaJavaprimitive,suchas intorboolean.ConfiguringManagedBeans
TheJavaEE6Tutorial • January2013 306
InitializingManagedBeanProperties
Sometimesyoumightwanttocreateabeanthatalsoreferencesothermanagedbeanssoyou
canconstructagraphoratreeofbeans.Forexample,supposeyouwanttocreateabeanrepresentingacustomer’sinformation,includingthemailingaddressandstreetaddress,eachofwhichisalsoabean.Thefollowing managed-bean declarationscreatea CustomerBean instance
thathastwo AddressBean properties:onerepresentingthemailingaddress,andtheother
representingthestreetaddress.Thisdeclarationresultsinatreeofbeanswith CustomerBean as
itsrootandthetwo AddressBean objectsaschildren.
<managed-bean>
<managed-bean-name>customer</managed-bean-name><managed-bean-class>
com.example.mybeans.CustomerBean
</managed-bean-class><managed-bean-scope> request </managed-bean-scope><managed-property>
<property-name>mailingAddress</property-name><value>#{addressBean}</value>
</managed-property><managed-property>
<property-name>streetAddress</property-name><value>#{addressBean}</value>
</managed-property><managed-property>
<property-name>customerType</property-name><value>New</value>
</managed-property>
</managed-bean><managed-bean>
<managed-bean-name>addressBean</managed-bean-name><managed-bean-class>
com.example.mybeans.AddressBean
</managed-bean-class><managed-bean-scope> none </managed-bean-scope><managed-property>
<property-name>street</property-name><null-value/>
<managed-property>...
</managed-bean>
Thefirst CustomerBean declaration(withthe managed-bean-name ofcustomer )createsa
CustomerBean inrequestscope.Thisbeanhastwoproperties, mailingAddress and
streetAddress .Thesepropertiesusethe valueelementtoreferenceabeannamed
addressBean .
Thesecondmanagedbeandeclarationdefinesan AddressBean ,butdoesnotcreateit,because
itsmanaged-bean-scope elementdefinesascopeof none.Recallthatascopeof nonemeansthat
thebeaniscreatedonlywhensomethingelsereferencesit.Becauseboththe mailingAddress
andthe streetAddress propertiesreference addressBean usingthe valueelement,two
instancesof AddressBean arecreatedwhen CustomerBean iscreated.ConfiguringManagedBeans
Chapter14 • ConfiguringJavaServerFacesApplications 307
Whenyoucreateanobjectthatpointstootherobjects,donottrytopointtoanobjectwitha
shorterlifespan,becauseitmightbeimpossibletorecoverthatscope’sresourceswhenitgoesaway.Asession-scopedobject,forexample,cannotpointtoarequest-scopedobject.Andobjectswith nonescopehavenoeffectivelifespanmanagedbytheframework,sotheycanpoint
onlytoother none-scopedobjects.
Table14–2 outlinesalloftheallowedconnections.
TABLE14–2 AllowableConnectionsBetweenScopedObjects
AnObjectofThisScope MayPointtoanObjectofThisScope
none none
application none ,application
session none ,application ,session
request none ,application ,session,request,view
view none ,application ,session,view
Besurenottoallowcyclicalreferencesbetweenobjects.Forexample,neitherofthe
AddressBean objectsintheprecedingexampleshouldpointbacktothe CustomerBean object,
because CustomerBean alreadypointstothe AddressBean objects.
InitializingMapsandLists
Inadditiontoconfiguring MapandListproperties,youcanalsoconfigurea Mapanda List
directlysothatyoucanreferencethemfromatagratherthanreferencingapropertythatwrapsaMaporaList.
RegisteringApplicationMessages
Applicationmessagescanincludeanystringsdisplayedtotheuser,aswellascustomerror
messages(whicharedisplayedbythe messageandmessages tags)foryourcustomconverters
orvalidators.Tomakemessagesavailableatapplicationstartuptime,dooneofthefollowing:
■Queueanindividualmessageontothe javax.faces.context.FacesContext instance
programmatically,asdescribedin “Using FacesMessage toCreateaMessage”onpage310
■Registerallthemessageswithyourapplicationusingtheapplicationconfigurationresource
fileRegisteringApplicationMessages
TheJavaEE6Tutorial • January2013 308
Hereisthesectionofthe faces-config.xml filethatregistersthemessagesfortheDuke’s
Bookstorecasestudyapplication:
<application>
<resource-bundle>
<base-name>dukesbookstore.web.messages.Messages</base-name><var>bundle</var>
</resource-bundle><locale-config>
<default-locale>en</default-locale><supported-locale>es</supported-locale><supported-locale>de</supported-locale><supported-locale>fr</supported-locale>
</locale-config>
</application>
Thissetofelementscausestheapplicationtobepopulatedwiththemessagesthatarecontained
inthespecifiedresourcebundle.
Theresource-bundle elementrepresentsasetoflocalizedmessages.Itmustcontainthefully
qualifiedpathtotheresourcebundlecontainingthelocalizedmessages(inthiscase,dukestutoring.web.messages.Messages ).The varelementdefinestheELnamebywhich
pageauthorsrefertotheresourcebundle.
Thelocale-config elementliststhedefaultlocaleandtheothersupportedlocales.The
locale-config elementenablesthesystemtofindthecorrectlocalebasedonthebrowser’s
languagesettings.
Thesupported-locale anddefault-locale tagsacceptthelowercase,two-charactercodes
definedbyISO639(see
http://ftp.ics.uci.edu/pub/ietf/http/related/iso639.txt ).
Makesureyourresourcebundleactuallycontainsthemessagesforthelocalesyouspecifywiththesetags.
Toaccessthelocalizedmessage,theapplicationdevelopermerelyreferencesthekeyofthe
messagefromtheresourcebundle.
Youcanpulllocalizedtextintoan alttagforagraphicimage,asinthefollowingexample:
<h:graphicImage id= "mapImage "
name= "book_all.jpg "
library= "images "
alt="#{bundle.ChooseBook} "
usemap= "#bookMap "/>
Thealtattributecanacceptvalueexpressions.Inthiscase,the altattributereferstolocalized
textthatwillbeincludedinthealternativetextoftheimagerenderedbythistag.RegisteringApplicationMessages
Chapter14 • ConfiguringJavaServerFacesApplications 309
Using FacesMessage toCreateaMessage
Insteadofregisteringmessagesintheapplicationconfigurationresourcefile,youcanaccessthe
java.util.ResourceBundle directlyfrommanagedbeancode.Thecodesnippetbelowlocates
anemailerrormessage:
String message = "";
...message = ExampleBean.loadErrorMessage(context,
ExampleBean.EX_RESOURCE_BUNDLE_NAME,
"EMailError ");
context.addMessage(toValidate.getClientId(context),
new FacesMessage(message));
Theselinescallthebean’s loadErrorMessage methodtogetthemessagefromthe
ResourceBundle .Hereisthe loadErrorMessage method:
public static String loadErrorMessage(FacesContext context,
String basename, String key) {
if ( bundle == null ) {
try {
bundle = ResourceBundle.getBundle(basename,
context.getViewRoot().getLocale());
} catch (Exception e) {
return null;
}
}return bundle.getString(key);
}
ReferencingErrorMessages
AJavaServerFacespageusesthe messageormessages tagstoaccesserrormessages,as
explainedin “DisplayingErrorMessageswiththe h:message andh:messages Tags”on
page164.
Theerrormessagesthesetagsaccessinclude:
■Thestandarderrormessagesthataccompanythestandardconvertersandvalidatorsthat
shipwiththeAPI.SeeSection2.5.2.4oftheJavaServerFacesspecificationforacompletelistofstandarderrormessages.
■Customerrormessagescontainedinresourcebundlesregisteredwiththeapplicationbytheapplicationarchitectusingthe resource-bundle elementintheconfigurationfile.
Whenaconverterorvalidatorisregisteredonaninputcomponent,theappropriateerror
messageisautomaticallyqueuedonthecomponent.RegisteringApplicationMessages
TheJavaEE6Tutorial • January2013 310
Apageauthorcanoverridetheerrormessagesqueuedonacomponentbyusingthefollowing
attributesofthecomponent’stag:
■converterMessage :Referencestheerrormessagetodisplaywhenthedataontheenclosing
componentcannotbeconvertedbytheconverterregisteredonthiscomponent.
■requiredMessage :Referencestheerrormessagetodisplaywhennovaluehasbeenentered
intotheenclosingcomponent.
■validatorMessage :Referencestheerrormessagetodisplaywhenthedataontheenclosing
componentcannotbevalidatedbythevalidatorregisteredonthiscomponent.
Allthreeattributesareenabledtotakeliteralvaluesandvalueexpressions.Ifanattributeusesa
valueexpression,thisexpressionreferencestheerrormessageinaresourcebundle.Thisresourcebundlemustbemadeavailabletotheapplicationinoneofthefollowingways:
■Bytheapplicationarchitectusingthe resource-bundle elementintheconfigurationfile
■Bythepageauthorusingthe f:loadBundle tag
Conversely,the resource-bundle elementmustbeusedtomakeavailabletotheapplication
thoseresourcebundlescontainingcustomerrormessagesthatarequeuedonthecomponentasaresultofacustomconverterorvalidatorbeingregisteredonthecomponent.
Thefollowingtagsshowhowtospecifythe requiredMessage attributeusingavalueexpression
toreferenceanerrormessage:
<h:inputText id= "ccno"size= "19"
required= "true"
requiredMessage= "#{customMessages.ReqMessage} ">
...
</h:inputText><h:message styleClass= "error-message "for="ccno"/>
Thevalueexpressionusedby requiredMessage inthisexamplereferencestheerrormessage
withthe ReqMessage keyintheresourcebundle, customMessages .
Thismessagereplacesthecorrespondingmessagequeuedonthecomponentandwilldisplay
whereverthe messageormessages tagisplacedonthepage.
UsingDefaultValidators
Inadditiontothevalidatorsyoudeclareonthecomponents,youcanalsospecifyzeroormore
defaultvalidatorsintheapplicationconfigurationresourcefile.Thedefaultvalidatorappliesto
alljavax.faces.component.UIInput instancesinavieworcomponenttreeandisappended
afterthelocaldefinedvalidators.Hereisanexampleofadefaultvalidatorregisteredintheapplicationconfigurationresourcefile:
<faces-config>
<application>UsingDefaultValidators
Chapter14 • ConfiguringJavaServerFacesApplications 311
<default-validators>
<validator-id>javax.faces.Bean</validator-id>
</default-validators>
<application/>
</faces-config>
RegisteringaCustomValidator
Iftheapplicationdeveloperprovidesanimplementationofthe
javax.faces.validator.Validator interfacetoperformvalidation,youmustregisterthis
customvalidatoreitherbyusingthe @FacesValidator annotation,asdescribedin
“ImplementingtheValidatorInterface”onpage284 ,orbyusingthe validator XMLelement
intheapplicationconfigurationresourcefile:
<validator>
...<validator-id>FormatValidator</validator-id><validator-class>
myapplication.validators.FormatValidator
</validator-class><attribute>
...<attribute-name>formatPatterns</attribute-name><attribute-class>java.lang.String</attribute-class>
</attribute>
</validator>
Attributesspecifiedina validator tagoverrideanysettingsinthe @FacesValidator
annotation.
Thevalidator-id andvalidator-class elementsarerequiredsubelements.The
validator-id elementrepresentstheidentifierunderwhichthe Validator classshouldbe
registered.ThisIDisusedbythetagclasscorrespondingtothecustom validator tag.
Thevalidator-class elementrepresentsthefullyqualifiedclassnameofthe Validator class.
Theattribute elementidentifiesanattributeassociatedwiththe Validator implementation.
Ithasrequired attribute-name andattribute-class subelements.The attribute-name
elementreferstothenameoftheattributeasitappearsinthe validator tag.The
attribute-class elementidentifiestheJavatypeofthevalueassociatedwiththeattribute.
“CreatingandUsingaCustomValidator”onpage283 explainshowtoimplementthe
Validator interface.
“UsingaCustomValidator”onpage287 explainshowtoreferencethevalidatorfromthepage.RegisteringaCustomValidator
TheJavaEE6Tutorial • January2013 312
RegisteringaCustomConverter
Asisthecasewithacustomvalidator,iftheapplicationdevelopercreatesacustomconverter,
youmustregisteritwiththeapplicationeitherbyusingthe @FacesConverter annotation,as
describedin “CreatingaCustomConverter”onpage279 ,orbyusingthe converter XML
elementintheapplicationconfigurationresourcefile.Hereisahypothetical converter
configurationfor CreditCardConverter fromtheDuke’sBookstorecasestudy:
<converter>
<description>
Converter for credit card numbers that normalizesthe input to a standard format
</description><converter-id>CreditCardConverter</converter-id><converter-class>
dukesbookstore.converters.CreditCardConverter
</converter-class>
</converter>
Attributesspecifiedina converter tagoverrideanysettingsinthe @FacesConverter
annotation.
Theconverter elementrepresentsa javax.faces.convert.Converter implementationand
containsrequired converter-id andconverter-class elements.
Theconverter-id elementidentifiesanIDthatisusedbythe converter attributeofaUI
componenttagtoapplytheconvertertothecomponent’sdata. “UsingaCustomConverter”on
page282includesanexampleofreferencingthecustomconverterfromacomponenttag.
Theconverter-class elementidentifiesthe Converter implementation.
“CreatingandUsingaCustomConverter”onpage279 explainshowtocreateacustom
converter.
ConfiguringNavigationRules
NavigationbetweendifferentpagesofaJavaServerFacesapplication,suchaschoosingthenextpagetobedisplayedafterabuttonorhyperlinkcomponentisclicked,isdefinedbyasetofrules.Navigationrulescanbeimplicit,ortheycanbeexplicitlydefinedintheapplicationconfigurationresourcefile.Formoreinformationonimplicitnavigationrules,see
“Implicit
NavigationRules”onpage316 .
Eachnavigationrulespecifieshowtonavigatefromonepagetoanotherpageorsetofpages.
TheJavaServerFacesimplementationchoosesthepropernavigationruleaccordingtowhichpageiscurrentlydisplayed.ConfiguringNavigationRules
Chapter14 • ConfiguringJavaServerFacesApplications 313
Afterthepropernavigationruleisselected,thechoiceofwhichpagetoaccessnextfromthe
currentpagedependsontwofactors:
■Theactionmethodinvokedwhenthecomponentwasclicked
■Thelogicaloutcomereferencedbythecomponent’stagorreturnedfromtheactionmethod
Theoutcomecanbeanythingthedeveloperchooses,but Table14–3 listssomeoutcomes
commonlyusedinwebapplications.
TABLE14–3 CommonOutcomeStrings
Outcome WhatItMeans
success Everythingworked.Goontothenextpage.
failure Somethingiswrong.Goontoanerrorpage.
login Theuserneedstologinfirst.Goontotheloginpage.
no results Thesearchdidnotfindanything.Gotothesearchpageagain.
Usually,theactionmethodperformssomeprocessingontheformdataofthecurrentpage.For
example,themethodmightcheckwhethertheusernameandpasswordenteredintheformmatchtheusernameandpasswordonfile.Iftheymatch,themethodreturnstheoutcomesuccess.Otherwise,itreturnstheoutcome failure.Asthisexampledemonstrates,boththe
methodusedtoprocesstheactionandtheoutcomereturnedarenecessarytodeterminethecorrectpagetoaccess.
Hereisanavigationrulethatcouldbeusedwiththeexamplejustdescribed:
<navigation-rule>
<from-view-id>/login.xhtml</from-view-id><navigation-case>
<from-action>#{LoginForm.login}</from-action><from-outcome>success</from-outcome><to-view-id>/storefront.xhtml</to-view-id>
</navigation-case><navigation-case>
<from-action>#{LoginForm.logon}</from-action><from-outcome>failure</from-outcome><to-view-id>/logon.xhtml</to-view-id>
</navigation-case>
</navigation-rule>
Thisnavigationruledefinesthepossiblewaystonavigatefrom login.xhtml .Each
navigation-case elementdefinesonepossiblenavigationpathfrom login.xhtml .Thefirst
navigation-case saysthatif LoginForm.login returnsanoutcomeof success,then
storefront.xhtml willbeaccessed.Thesecond navigation-case saysthat login.xhtml will
bere-renderedif LoginForm.login returns failure.ConfiguringNavigationRules
TheJavaEE6Tutorial • January2013 314
Theconfigurationofanapplication’spageflowconsistsofasetofnavigationrules.Eachruleis
definedbythe navigation-rule elementinthe faces-config.xml file.
Each navigation-rule elementcorrespondstoonecomponenttreeidentifierdefinedbythe
optional from-view-id element.Thismeansthateachruledefinesallthepossiblewaysto
navigatefromoneparticularpageintheapplication.Ifthereisno from-view-id element,the
navigationrulesdefinedinthe navigation-rule elementapplytoallthepagesinthe
application.The from-view-id elementalsoallowswildcardmatchingpatterns.Forexample,
thisfrom-view-id elementsaysthatthenavigationruleappliestoallthepagesinthe books
directory:
<from-view-id>/books/*</from-view-id>
Anavigation-rule elementcancontainzeroormore navigation-case elements.The
navigation-case elementdefinesasetofmatchingcriteria.Whenthesecriteriaaresatisfied,
theapplicationwillnavigatetothepagedefinedbythe to-view-id elementcontainedinthe
same navigation-case element.
Thenavigationcriteriaaredefinedbyoptional from-outcome andfrom-action elements.The
from-outcome elementdefinesalogicaloutcome,suchas success.The from-action element
usesamethodexpressiontorefertoanactionmethodthatreturnsa String,whichisthelogical
outcome.Themethodperformssomelogictodeterminetheoutcomeandreturnstheoutcome.
Thenavigation-case elementsarecheckedagainsttheoutcomeandthemethodexpressionin
thisorder:
1. Casesspecifyingbotha from-outcome valueanda from-action value.Bothofthese
elementscanbeusediftheactionmethodreturnsdifferentoutcomesdependingontheresultoftheprocessingitperforms.
2. Casesspecifyingonlya from-outcome value.The from-outcome elementmustmatcheither
theoutcomedefinedbythe actionattributeofthe javax.faces.component.UICommand
componentortheoutcomereturnedbythemethodreferredtobythe UICommand
component.
3. Casesspecifyingonlya from-action value.Thisvaluemustmatchthe actionexpression
specifiedbythecomponenttag.
Whenanyofthesecasesismatched,thecomponenttreedefinedbythe to-view-id element
willbeselectedforrendering.
▼ToConfigureaNavigationRule
UsingNetBeansIDE,youcanconfigureanavigationrulebydoingthefollowing.
AfteropeningyourprojectinNetBeansIDE,expandtheprojectnodeintheProjectspane.ExpandtheWebPagesandWEB-INFnodesoftheprojectnode.1
2ConfiguringNavigationRules
Chapter14 • ConfiguringJavaServerFacesApplications 315
Double-click faces-config.xml .
After faces-config.xml opensintheeditorpane,right-clickintheeditorpane.
FromtheInsertmenu,chooseNavigationRule.IntheAddNavigationRuledialog:a. Enterorbrowseforthepagethatrepresentsthestartingviewforthisnavigationrule.b. ClickAdd.Right-clickagainintheeditorpane.FromtheInsertmenu,chooseNavigationCase.IntheAddNavigationCasedialogbox:a. FromtheFromViewmenu,choosethepagethatrepresentsthestartingviewforthe
navigationrule(fromStep6a).
b. (optional)IntheFromActionfield,typetheactionmethodinvokedwhenthecomponent
thattriggerednavigationisactivated.
c. (optional)IntheFromOutcomefield,enterthelogicaloutcomestringthattheactivated
componentreferencesfromits actionattribute.
d. FromtheToViewmenu,chooseorbrowseforthepagethatwillbeopenedifthisnavigation
caseisselectedbythenavigationsystem.
e. ClickAdd.
“ReferencingaMethodThatPerformsNavigation”onpage187 explainshowtousea
componenttag’s actionattributetopointtoanactionmethod. “WritingaMethodtoHandle
Navigation”onpage201 explainshowtowriteanactionmethod.
ImplicitNavigationRules
JavaServerFacestechnologysupportsimplicitnavigationrulesforFaceletsapplications.Implicitnavigationapplieswhen navigation-rules arenotconfiguredintheapplication
configurationresourcefiles.3
456
7
89
SeeAlsoConfiguringNavigationRules
TheJavaEE6Tutorial • January2013 316
Whenyouaddacomponentsuchasa commandButton inapage,andassignanotherpageasthe
valueforits actionproperty,thedefaultnavigationhandlerwilltrytomatchasuitablepage
withintheapplicationimplicitly.
<h:commandButton value= "submit "action= "response ">
Intheaboveexample,thedefaultnavigationhandlerwilltrytolocateapagenamed
response.xhtml withintheapplicationandnavigatetoit.
RegisteringaCustomRendererwithaRenderKit
Whentheapplicationdevelopercreatesacustomrenderer,asdescribedin “Delegating
RenderingtoaRenderer”onpage270 ,youmustregisteritusingtheappropriaterenderkit.
BecausetheimagemapapplicationimplementsanHTMLimagemap,the AreaRenderer and
MapRenderer classesintheDuke’sBookstorecasestudyshouldberegisteredusingtheHTML
renderkit.
Youregistertherenderereitherbyusingthe @FacesRenderer annotation,asdescribedin
“CreatingtheRendererClass”onpage270 ,orbyusingthe render-kit elementofthe
applicationconfigurationresourcefile.Hereisahypotheticalconfigurationof AreaRenderer :
<render-kit>
<renderer>
<component-family>Area</component-family><renderer-type>DemoArea</renderer-type><renderer-class>
dukesbookstore.renderers.AreaRenderer
</renderer-class><attribute>
<attribute-name>onmouseout</attribute-name><attribute-class>java.lang.String</attribute-class>
</attribute><attribute>
<attribute-name>onmouseover</attribute-name>
<attribute-class>java.lang.String</attribute-class>
</attribute><attribute>
<attribute-name>styleClass</attribute-name><attribute-class>java.lang.String</attribute-class>
</attribute>
</renderer>...
Attributesspecifiedina renderer tagoverrideanysettingsinthe @FacesRenderer annotation.
Therender-kit elementrepresentsa javax.faces.render.RenderKit implementation.Ifno
render-kit-id isspecified,thedefaultHTMLrenderkitisassumed.The renderer element
representsa javax.faces.render.Renderer implementation.Bynestingthe renderer
elementinsidethe render-kit element,youareregisteringtherendererwiththe RenderKit
implementationassociatedwiththe render-kit element.RegisteringaCustomRendererwithaRenderKit
Chapter14 • ConfiguringJavaServerFacesApplications 317
Therenderer-class isthefullyqualifiedclassnameofthe Renderer .
Thecomponent-family andrenderer-type elementsareusedbyacomponenttofind
renderersthatcanrenderit.The component-family identifiermustmatchthatreturnedbythe
componentclass’s getFamily method.Thecomponentfamilyrepresentsacomponentorsetof
componentsthataparticularrenderercanrender.The renderer-type mustmatchthat
returnedbythe getRendererType methodofthetaghandlerclass.
Byusingthecomponentfamilyandrenderertypetolookuprenderersforcomponents,the
JavaServerFacesimplementationallowsacomponenttoberenderedbymultiplerenderersandallowsarenderertorendermultiplecomponents.
Eachofthe attribute tagsspecifiesarender-dependentattributeanditstype.The attribute
elementdoesn’taffecttheruntimeexecutionofyourapplication.Rather,itprovidesinformationtotoolsabouttheattributesthe Renderer supports.
Theobjectresponsibleforrenderingacomponent(beitthecomponentitselforarendererto
whichthecomponentdelegatestherendering)canusefacetstoaidintherenderingprocess.Thesefacetsallowthecustomcomponentdevelopertocontrolsomeaspectsofrenderingthecomponent.Considerthiscustomcomponenttagexample:
<d:dataScroller>
<f:facet name= "header ">
<h:panelGroup>
<h:outputText value= "Account Id "/>
<h:outputText value= "Customer Name "/>
<h:outputText value= "Total Sales "/>
</h:panelGroup>
</f:facet><f:facet name= "next">
<h:panelGroup>
<h:outputText value= "Next"/>
<h:graphicImage url= "/images/arrow-right.gif "/>
</h:panelGroup>
</f:facet>
...
</d:dataScroller>
ThedataScroller componenttagincludesacomponentthatwillrendertheheaderanda
componentthatwillrendertheNextbutton.Iftherendererassociatedwiththiscomponentrendersthefacets,youcanincludethefollowing facetelementsinthe renderer element:
<facet>
<description>This facet renders as the header of the table. It should be
a panelGroup with the same number of columns as the data
</description><display-name>header</display-name><facet-name>header</facet-name>
</facet><facet>
<description>This facet renders as the content of the "next"button in
the scroller. It should be a panelGroup that includes an outputTextRegisteringaCustomRendererwithaRenderKit
TheJavaEE6Tutorial • January2013 318
tag that has the text "Next"and a right arrow icon.
</description>
<display-name>Next</display-name>
<facet-name>next</facet-name>
</facet>
Ifacomponentthatsupportsfacetsprovidesitsownrenderingandyouwanttoinclude facet
elementsintheapplicationconfigurationresourcefile,youneedtoputtheminthecomponent’sconfigurationratherthantherenderer’sconfiguration.
RegisteringaCustomComponent
Inadditiontoregisteringcustomrenderers(asexplainedintheprecedingsection),youalsomustregisterthecustomcomponentsthatareusuallyassociatedwiththecustomrenderers.Youuseeithera @FacesComponent annotation,asdescribedin
“CreatingCustomComponent
Classes”onpage262 ,orthe component elementoftheapplicationconfigurationresourcefile.
Hereisahypothetical component elementfromtheapplicationconfigurationresourcefilethat
registers AreaComponent :
<component>
<component-type>DemoArea</component-type><component-class>
dukesbookstore.components.AreaComponent
</component-class><property>
<property-name>alt</property-name><property-class>java.lang.String</property-class>
</property><property>
<property-name>coords</property-name><property-class>java.lang.String</property-class>
</property><property>
<property-name>shape</property-name><property-class>java.lang.String</property-class>
</property>
</component>
Attributesspecifiedina component tagoverrideanysettingsinthe @FacesComponent
annotation.
Thecomponent-type elementindicatesthenameunderwhichthecomponentshouldbe
registered.Otherobjectsreferringtothiscomponentusethisname.Forexample,thecomponent-type elementintheconfigurationfor AreaComponent definesavalueof DemoArea ,
whichmatchesthevaluereturnedbythe AreaTagclass’s getComponentType method.
Thecomponent-class elementindicatesthefullyqualifiedclassnameofthecomponent.The
property elementsspecifythecomponentpropertiesandtheirtypes.RegisteringaCustomComponent
Chapter14 • ConfiguringJavaServerFacesApplications 319
Ifthecustomcomponentcanincludefacets,youcanconfigurethefacetsinthecomponent
configurationusing facetelements,whichareallowedafterthe component-class elements.
See“RegisteringaCustomRendererwithaRenderKit”onpage317 forfurtherdetailson
configuringfacets.
BasicRequirementsofaJavaServerFacesApplication
Inadditiontoconfiguringyourapplication,youmustsatisfyotherrequirementsofJavaServerFacesapplications,includingproperlypackagingallthenecessaryfilesandprovidingadeploymentdescriptor.Thissectiondescribeshowtoperformtheseadministrativetasks.
JavaServerFacesapplicationscanbepackagedinaWARfile,whichmustconformtospecific
requirementstoexecuteacrossdifferentcontainers.Ataminimum,aWARfileforaJavaServerFacesapplicationmustcontainthefollowing:
■Awebapplicationdeploymentdescriptor,called web.xml,toconfigureresourcesrequired
byawebapplication
■AspecificsetofJARfilescontainingessentialclasses
■Asetofapplicationclasses,JavaServerFacespages,andotherrequiredresources,suchasimagefiles
AWARfilemayalsocontain:
■Anapplicationconfigurationresourcefile,whichconfiguresapplicationresources
■Asetoftaglibrarydescriptorfiles
Forexample,aJavaServerFaceswebapplicationWARfileusingFaceletstypicallyhasthe
followingdirectorystructure:
$PROJECT_DIR
[Web Pages]+- /[xhtml documents]+- /resources+- /WEB-INF
+- /classes+- /lib+- /web.xml+- /faces-config.xml (optional)+- /*.taglib.xml (optional)+- /glassfish-web.xml
Theweb.xmlfile(orwebdeploymentdescriptor),thesetofJARfiles,andthesetofapplication
filesmustbecontainedinthe WEB-INFdirectoryoftheWARfile.BasicRequirementsofaJavaServerFacesApplication
TheJavaEE6Tutorial • January2013 320
ConfiguringanApplicationwithaWebDeployment
Descriptor
Webapplicationsarecommonlyconfiguredusingelementscontainedinthewebapplication
deploymentdescriptor, web.xml.ThedeploymentdescriptorforaJavaServerFacesapplication
mustspecifycertainconfigurations,includingthefollowing:
■TheservletusedtoprocessJavaServerFacesrequests
■Theservletmappingfortheprocessingservlet
■Thepathtotheconfigurationresourcefile,ifitexistsandisnotlocatedinadefaultlocation
Thedeploymentdescriptorcanalsoincludeother,optionalconfigurations,suchas:
■Specifyingwherecomponentstateissaved
■Encryptingstatesavedontheclient
■Compressingstatesavedontheclient
■RestrictingaccesstopagescontainingJavaServerFacestags
■TurningonXMLvalidation
■SpecifyingtheProjectStage
■Verifyingcustomobjects
Thissectiongivesmoredetailsontheseconfigurations.Whereappropriate,italsodescribes
howyoucanmaketheseconfigurationsusingNetBeansIDE.
IdentifyingtheServletforLifecycleProcessing
ArequirementofaJavaServerFacesapplicationisthatallrequeststotheapplicationthatreferencepreviouslysavedJavaServerFacescomponentsmustgothroughjavax.faces.webapp.FacesServlet .AFacesServlet instancemanagestherequest
processinglifecycleforwebapplicationsandinitializestheresourcesrequiredbyJavaServerFacestechnology.
BeforeaJavaServerFacesapplicationcanlaunchitsfirstwebpage,thewebcontainermust
invokethe FacesServlet instanceinorderfortheapplicationlifecycleprocesstostart.See
“TheLifecycleofaJavaServerFacesApplication”onpage210 formoreinformation.
Thefollowingexampleshowsthedefaultconfigurationofthe FacesServlet :
<servlet>
<servlet-name>FacesServlet</servlet-name><servlet-class>javax.faces.webapp.FacesServlet</servlet-class></servlet>
Youprovideamappingconfigurationentrytomakesurethe FacesServlet instanceis
invoked.Themappingto FacesServlet canbeaprefixmapping,suchas /faces/* ,oranBasicRequirementsofaJavaServerFacesApplication
Chapter14 • ConfiguringJavaServerFacesApplications 321
extensionmapping,suchas *.xhtml.Themappingisusedtoidentifyapageashaving
JavaServerFacescontent.Becauseofthis,theURLtothefirstpageoftheapplicationmustincludetheURLpatternmapping.
Thefollowingelements,commonlyusedinthetutorialexamples,specifyaprefixmapping:
<servlet-mapping>
<servlet-name>FacesServlet</servlet-name><url-pattern>/faces/* </url-pattern>
</servlet-mapping>...<welcome-file-list>
<welcome-file>faces/greeting.xhtml</welcome-file>
</welcome-file-list>
Thefollowingelements,alsocommonlyusedinthetutorialexamples,specifyanextension
mapping:
<servlet-mapping>
<servlet-name>Faces Servlet</servlet-name><url-pattern>*.xhtml</url-pattern>
</servlet-mapping>...<welcome-file-list>
<welcome-file>index.xhtml</welcome-file>
</welcome-file-list>
Whenyouusethismechanism,usersaccesstheapplicationasshowninthefollowingexample:
http://localhost:8080/guessNumber
Inthecaseofextensionmapping,ifarequestcomestotheserverforapagewithan .xhtml
extension,thecontainerwillsendtherequesttothe FacesServlet instance,whichwillexpecta
correspondingpageofthesamenamecontainingthecontenttoexist.
IfyouareusingNetBeansIDEtocreateyourapplication,awebdeploymentdescriptoris
automaticallycreatedforyouwithdefaultconfigurations.IfyoucreatedyourapplicationwithoutanIDE,youcancreateawebdeploymentdescriptor.
▼ToSpecifyaPathtoanApplicationConfigurationResourceFile
Asexplainedin “ApplicationConfigurationResourceFile”onpage297 ,anapplicationcanhave
multipleapplicationconfigurationresourcefiles.Ifthesefilesarenotlocatedinthedirectoriesthattheimplementationsearchesbydefaultorthefilesarenotnamed faces-config.xml ,you
needtospecifypathstothesefiles.
TospecifythesepathsusingNetBeansIDE,dothefollowing.
ExpandthenodeofyourprojectintheProjectspane.ExpandtheWebPagesandWEB-INFnodesthatareundertheprojectnode.
1
2BasicRequirementsofaJavaServerFacesApplication
TheJavaEE6Tutorial • January2013 322
Double-click web.xml.
Afterthe web.xmlfileappearsintheeditorpane,clickGeneralatthetopoftheeditorpane.
ExpandtheContextParametersnode.ClickAdd.IntheAddContextParameterdialog:a. Type javax.faces.CONFIG_FILES intheParamNamefield.
b. TypethepathtoyourconfigurationfileintheParamValuefield.c. ClickOK.Repeatsteps1through7foreachconfigurationfile.
▼ToSpecifyWhereStateIsSaved
Forallthecomponentsinawebapplication,youcanspecifyinyourdeploymentdescriptor
whereyouwantthestatetobesaved,oneitherclientorserver.Youdothisbysettingacontextparameterinyourdeploymentdescriptor.Bydefault,stateissavedontheserver,soyouneedtospecifythiscontextparameteronlyifyouwanttosavestateontheclient.See
“Savingand
RestoringState”onpage269 forinformationontheadvantagesanddisadvantagesofeach
location.
TospecifywherestateissavedusingNetBeansIDE,dothefollowing.
ExpandthenodeofyourprojectintheProjectspane.ExpandtheWebPagesandWEB-INFnodesundertheprojectnode.Double-click web.xml.
Afterthe web.xmlfileappearsintheeditorpane,clickGeneralatthetopoftheeditorpane.
ExpandtheContextParametersnode.IntheAddContextParameterdialog:a. Type javax.faces.STATE_SAVING_METHOD intheParamNamefield.
b. Type clientorserverintheParamValuefield.3
4567
8
1
23456BasicRequirementsofaJavaServerFacesApplication
Chapter14 • ConfiguringJavaServerFacesApplications 323
c. ClickOK.
ImplementationofStateSaving
Ifstateissavedontheclient,thestateoftheentireviewisrenderedtoahiddenfieldonthepage.
TheJavaServerFacesimplementationsavesthestateontheserverbydefault.Duke’sForestsavesitsstateontheclient.
ConfiguringProjectStage
ProjectStageisacontextparameteridentifyingthestatusofaJavaServerFacesapplicationinthesoftwarelifecycle.Thestageofanapplicationcanaffectthebehavioroftheapplication.Forexample,errormessagescanbedisplayedduringtheDevelopmentstagebutsuppressedduringtheProductionstage.
ThepossibleProjectStagevaluesareasfollows:
■Development
■UnitTest
■SystemTest
■Production
ProjectStageisconfiguredthroughacontextparameterinthewebdeploymentdescriptorfile.
Hereisanexample:
<context-param>
<param-name>javax.faces.PROJECT_STAGE</param-name><param-value>Development</param-value>
</context-param>
IfnoProjectStageisdefined,thedefaultstageis Development .Youcanalsoaddcustomstages
accordingtoyourrequirements.
IncludingtheClasses,Pages,andOtherResources
Whenpackagingwebapplicationsusingtheincludedbuildscripts,you’llnoticethatthescriptspackageresourcesinthefollowingways:
■AllwebpagesareplacedatthetopleveloftheWARfile.
■Thefaces-config.xml fileandthe web.xmlfilearepackagedinthe WEB-INFdirectory.
■Allpackagesarestoredinthe WEB-INF/classes/ directory.
■AllapplicationJARfilesarepackagedinthe WEB-INF/lib/ directory.
■Allresourcefilesareeitherundertherootofthewebapplication /resources directory,or
inthewebapplication’sclasspath, META-INF/resources/ resourceIdentifier directory.For
moreinformationonresources,see “WebResources”onpage123 .MoreInformationBasicRequirementsofaJavaServerFacesApplication
TheJavaEE6Tutorial • January2013 324
Whenpackagingyourownapplications,youcanuseNetBeansIDEoryoucanusethebuild
scriptssuchasthosecreatedforAnt.Youcanmodifythebuildscriptstofityoursituation.However,youcancontinuetopackageyourWARfilesbyusingthedirectorystructuredescribedinthissection,becausethistechniquecomplieswiththecommonlyacceptedpracticeforpackagingwebapplications.BasicRequirementsofaJavaServerFacesApplication
Chapter14 • ConfiguringJavaServerFacesApplications 325
326
JavaServletTechnology
ShortlyaftertheWebbegantobeusedfordeliveringservices,serviceprovidersrecognizedthe
needfordynamiccontent.Applets,oneoftheearliestattemptstowardthisgoal,focusedonusingtheclientplatformtodeliverdynamicuserexperiences.Atthesametime,developersalsoinvestigatedusingtheserverplatformforthesamepurpose.Initially,CommonGatewayInterface(CGI)server-sidescriptswerethemaintechnologyusedtogeneratedynamiccontent.Althoughwidelyused,CGIscriptingtechnologyhadmanyshortcomings,includingplatformdependenceandlackofscalability.Toaddresstheselimitations,JavaServlettechnologywascreatedasaportablewaytoprovidedynamic,user-orientedcontent.
Thefollowingtopicsareaddressedhere:
■“WhatIsaServlet?”onpage328
■“ServletLifecycle”onpage328
■“SharingInformation”onpage330
■“CreatingandInitializingaServlet”onpage331
■“WritingServiceMethods”onpage332
■“FilteringRequestsandResponses”onpage334
■“InvokingOtherWebResources”onpage338
■“AccessingtheWebContext”onpage339
■“MaintainingClientState”onpage340
■“FinalizingaServlet”onpage342
■“The moodExampleApplication”onpage344
■“FurtherInformationaboutJavaServletTechnology”onpage34615CHAPTER 15
327
WhatIsaServlet?
AservletisaJavaprogramminglanguageclassusedtoextendthecapabilitiesofserversthat
hostapplicationsaccessedbymeansofarequest-responseprogrammingmodel.Althoughservletscanrespondtoanytypeofrequest,theyarecommonlyusedtoextendtheapplicationshostedbywebservers.Forsuchapplications,JavaServlettechnologydefinesHTTP-specificservletclasses.
Thejavax.servlet andjavax.servlet.http packagesprovideinterfacesandclassesfor
writingservlets.Allservletsmustimplementthe Servletinterface,whichdefineslifecycle
methods.Whenimplementingagenericservice,youcanuseorextendthe GenericServlet
classprovidedwiththeJavaServletAPI.The HttpServlet classprovidesmethods,suchas
doGetanddoPost,forhandlingHTTP-specificservices.
ServletLifecycle
Thelifecycleofaservletiscontrolledbythecontainerinwhichtheservlethasbeendeployed.
Whenarequestismappedtoaservlet,thecontainerperformsthefollowingsteps.
1. Ifaninstanceoftheservletdoesnotexist,thewebcontainer
a. Loadstheservletclass.b. Createsaninstanceoftheservletclass.c. Initializestheservletinstancebycallingthe initmethod.Initializationiscoveredin
“CreatingandInitializingaServlet”onpage331 .
2. Invokesthe servicemethod,passingrequestandresponseobjects.Servicemethodsare
discussedin “WritingServiceMethods”onpage332 .
Ifitneedstoremovetheservlet,thecontainerfinalizestheservletbycallingtheservlet’s
destroymethod.Formoreinformation,see “FinalizingaServlet”onpage342 .
HandlingServletLifecycleEvents
Youcanmonitorandreacttoeventsinaservlet’slifecyclebydefininglistenerobjectswhose
methodsgetinvokedwhenlifecycleeventsoccur.Tousetheselistenerobjects,youmustdefineandspecifythelistenerclass.
DefiningtheListenerClass
Youdefinealistenerclassasanimplementationofalistenerinterface. Table15–1 liststhe
eventsthatcanbemonitoredandthecorrespondinginterfacethatmustbeimplemented.Whenalistenermethodisinvoked,itispassedaneventthatcontainsinformationappropriatetotheevent.Forexample,themethodsinthe HttpSessionListener interfacearepassedan
HttpSessionEvent ,whichcontainsan HttpSession .WhatIsaServlet?
TheJavaEE6Tutorial • January2013 328
TABLE15–1 ServletLifecycleEvents
Object Event ListenerInterfaceandEventClass
Webcontext Initializationand
destructionjavax.servlet.ServletContextListener and
ServletContextEvent
Webcontext Attributeadded,
removed,orreplacedjavax.servlet.ServletContextAttributeListener and
ServletContextAttributeEvent
Session Creation,
invalidation,activation,passivation,andtimeoutjavax.servlet.http.HttpSessionListener ,
javax.servlet.http.HttpSessionActivationListener ,
andHttpSessionEvent
Session Attributeadded,
removed,orreplacedjavax.servlet.http.HttpSessionAttributeListener and
HttpSessionBindingEvent
Request Aservletrequesthas
startedbeingprocessedbywebcomponentsjavax.servlet.ServletRequestListener and
ServletRequestEvent
Request Attributeadded,
removed,orreplacedjavax.servlet.ServletRequestAttributeListener and
ServletRequestAttributeEvent
Usethe @WebListener annotationtodefinealistenertogeteventsforvariousoperationsonthe
particularwebapplicationcontext.Classesannotatedwith @WebListener mustimplementone
ofthefollowinginterfaces:
javax.servlet.ServletContextListener
javax.servlet.ServletContextAttributeListenerjavax.servlet.ServletRequestListenerjavax.servlet.ServletRequestAttributeListenerjavax.servlet..http.HttpSessionListenerjavax.servlet..http.HttpSessionAttributeListener
Forexample,thefollowingcodesnippetdefinesalistenerthatimplementstwoofthese
interfaces:
import javax.servlet.ServletContextAttributeListener;
import javax.servlet.ServletContextListener;import javax.servlet.annotation.WebListener;
@WebListener()
public class SimpleServletListener implements ServletContextListener,
ServletContextAttributeListener {
...ServletLifecycle
Chapter15 • JavaServletTechnology 329
HandlingServletErrors
Anynumberofexceptionscanoccurwhenaservletexecutes.Whenanexceptionoccurs,the
webcontainergeneratesadefaultpagecontainingthefollowingmessage:
A Servlet Exception Has Occurred
Butyoucanalsospecifythatthecontainershouldreturnaspecificerrorpageforagivenexception.
SharingInformation
Webcomponents,likemostobjects,usuallyworkwithotherobjectstoaccomplishtheirtasks.Webcomponentscandosoby
■Usingprivatehelperobjects(forexample,JavaBeanscomponents).
■Sharingobjectsthatareattributesofapublicscope.
■Usingadatabase.
■Invokingotherwebresources.TheJavaServlettechnologymechanismsthatallowawebcomponenttoinvokeotherwebresourcesaredescribedin
“InvokingOtherWeb
Resources”onpage338 .
UsingScopeObjects
Collaboratingwebcomponentsshareinformationbymeansofobjectsthataremaintainedasattributesoffourscopeobjects.Youaccesstheseattributesbyusingthe getAttribute and
setAttribute methodsoftheclassrepresentingthescope.
Table15–2 liststhescopeobjects.
TABLE15–2 ScopeObjects
ScopeObject Class Accessiblefrom
Webcontext javax.servlet.
ServletContextWebcomponentswithinawebcontext.See “Accessingthe
WebContext”onpage339 .
Session javax.servlet.
http.HttpSessionWebcomponentshandlingarequestthatbelongstothe
session.See “MaintainingClientState”onpage340 .
Request Subtypeof javax.servlet.
ServletRequestWebcomponentshandlingtherequest.
Page javax.servlet.
jsp.JspContextTheJSPpagethatcreatestheobject.SharingInformation
TheJavaEE6Tutorial • January2013 330
ControllingConcurrentAccesstoSharedResources
Inamultithreadedserver,sharedresourcescanbeaccessedconcurrently.Inadditiontoscope
objectattributes,sharedresourcesincludein-memorydata,suchasinstanceorclassvariables,andexternalobjects,suchasfiles,databaseconnections,andnetworkconnections.
Concurrentaccesscanariseinseveralsituations:
■Multiplewebcomponentsaccessingobjectsstoredinthewebcontext.
■Multiplewebcomponentsaccessingobjectsstoredinasession.
■Multiplethreadswithinawebcomponentaccessinginstancevariables.Awebcontainerwill
typicallycreateathreadtohandleeachrequest.Toensurethataservletinstancehandlesonlyonerequestatatime,aservletcanimplementthe SingleThreadModel interface.Ifa
servletimplementsthisinterface,notwothreadswillexecuteconcurrentlyintheservlet’sservicemethod.Awebcontainercanimplementthisguaranteebysynchronizingaccesstoasingleinstanceoftheservletorbymaintainingapoolofwebcomponentinstancesanddispatchingeachnewrequesttoafreeinstance.Thisinterfacedoesnotpreventsynchronizationproblemsthatresultfromwebcomponents’accessingsharedresources,suchasstaticclassvariablesorexternalobjects.
Whenresourcescanbeaccessedconcurrently,theycanbeusedinaninconsistentfashion.You
preventthisbycontrollingtheaccessusingthesynchronizationtechniquesdescribedintheThreadslessonat
http://docs.oracle.com/javase/tutorial/essential/concurrency/
index.html inTheJavaTutorial,FourthEdition ,bySharonZakhouretal.(Addison-Wesley,
2006).
CreatingandInitializingaServlet
Usethe @WebServlet annotationtodefineaservletcomponentinawebapplication.This
annotationisspecifiedonaclassandcontainsmetadataabouttheservletbeingdeclared.TheannotatedservletmustspecifyatleastoneURLpattern.Thisisdonebyusingthe urlPatterns
orvalueattributeontheannotation.Allotherattributesareoptional,withdefaultsettings.Use
thevalueattributewhentheonlyattributeontheannotationistheURLpattern;otherwiseuse
theurlPatterns attributewhenotherattributesarealsoused.
Classesannotatedwith @WebServlet mustextendthe javax.servlet.http.HttpServlet
class.Forexample,thefollowingcodesnippetdefinesaservletwiththeURLpattern /report:
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
@WebServlet( "/report ")
public class MoodServlet extends HttpServlet {
...CreatingandInitializingaServlet
Chapter15 • JavaServletTechnology 331
Thewebcontainerinitializesaservletafterloadingandinstantiatingtheservletclassandbefore
deliveringrequestsfromclients.Tocustomizethisprocesstoallowtheservlettoreadpersistentconfigurationdata,initializeresources,andperformanyotherone-timeactivities,youcaneitheroverridethe initmethodofthe Servletinterfaceorspecifythe initParams attributeof
the@WebServlet annotation.The initParams attributecontainsa @WebInitParam annotation.
Ifitcannotcompleteitsinitializationprocess,aservletthrowsan UnavailableException .
Useaninitializationparametertoprovidedataneededbyaparticularservlet.Bycontrast,a
contextparameterprovidesdatathatisavailabletoallcomponentsofawebapplication.
WritingServiceMethods
Theserviceprovidedbyaservletisimplementedinthe servicemethodofa GenericServlet ,
inthe doMethodmethods(where Methodcantakethevalue Get,Delete,Options,Post,Put,or
Trace)ofan HttpServlet object,orinanyotherprotocol-specificmethodsdefinedbyaclass
thatimplementsthe Servletinterface.Theterm servicemethod isusedforanymethodina
servletclassthatprovidesaservicetoaclient.
Thegeneralpatternforaservicemethodistoextractinformationfromtherequest,access
externalresources,andthenpopulatetheresponse,basedonthatinformation.ForHTTPservlets,thecorrectprocedureforpopulatingtheresponseistodothefollowing:
1. Retrieveanoutputstreamfromtheresponse.
2. Fillintheresponseheaders.3. Writeanybodycontenttotheoutputstream.
Responseheadersmustalwaysbesetbeforetheresponsehasbeencommitted.Theweb
containerwillignoreanyattempttosetoraddheadersaftertheresponsehasbeencommitted.Thenexttwosectionsdescribehowtogetinformationfromrequestsandgenerateresponses.
GettingInformationfromRequests
Arequestcontainsdatapassedbetweenaclientandtheservlet.AllrequestsimplementtheServletRequest interface.Thisinterfacedefinesmethodsforaccessingthefollowing
information:
■Parameters,whicharetypicallyusedtoconveyinformationbetweenclientsandservlets
■Object-valuedattributes,whicharetypicallyusedtopassinformationbetweenthewebcontainerandaservletorbetweencollaboratingservlets
■Informationabouttheprotocolusedtocommunicatetherequestandabouttheclientandserverinvolvedintherequest
■InformationrelevanttolocalizationWritingServiceMethods
TheJavaEE6Tutorial • January2013 332
Youcanalsoretrieveaninputstreamfromtherequestandmanuallyparsethedata.Toread
characterdata,usethe BufferedReader objectreturnedbytherequest’s getReader method.To
readbinarydata,usethe ServletInputStream returnedby getInputStream .
HTTPservletsarepassedanHTTPrequestobject, HttpServletRequest ,whichcontainsthe
requestURL,HTTPheaders,querystring,andsoon.AnHTTPrequestURLcontainsthefollowingparts:
http://[ host]:[port][request-path ]?[query-string ]
Therequestpathisfurthercomposedofthefollowingelements:
■Contextpath :Aconcatenationofaforwardslash( /)withthecontextrootoftheservlet’s
webapplication.
■Servletpath :Thepathsectionthatcorrespondstothecomponentaliasthatactivatedthis
request.Thispathstartswithaforwardslash( /).
■Pathinfo :Thepartoftherequestpaththatisnotpartofthecontextpathortheservletpath.
Youcanusethe getContextPath ,getServletPath ,and getPathInfo methodsofthe
HttpServletRequest interfacetoaccessthisinformation.ExceptforURLencodingdifferences
betweentherequestURIandthepathparts,therequestURIisalwayscomprisedofthecontextpathplustheservletpathplusthepathinfo.
Querystringsarecomposedofasetofparametersandvalues.Individualparametersare
retrievedfromarequestbyusingthe getParameter method.Therearetwowaystogenerate
querystrings.
■Aquerystringcanexplicitlyappearinawebpage.
■AquerystringisappendedtoaURLwhenaformwitha GETHTTPmethodissubmitted.
ConstructingResponses
Aresponsecontainsdatapassedbetweenaserverandtheclient.Allresponsesimplementthe
ServletResponse interface.Thisinterfacedefinesmethodsthatallowyouto
■Retrieveanoutputstreamtousetosenddatatotheclient.Tosendcharacterdata,usethe
PrintWriter returnedbytheresponse’s getWriter method.Tosendbinarydataina
MultipurposeInternetMailExtensions(MIME)bodyresponse,usetheServletOutputStream returnedby getOutputStream .Tomixbinaryandtextdata,asina
multipartresponse,usea ServletOutputStream andmanagethecharactersections
manually.
■Indicatethecontenttype(forexample, text/html )beingreturnedbytheresponsewiththe
setContentType(String) method.Thismethodmustbecalledbeforetheresponseis
committed.AregistryofcontenttypenamesiskeptbytheInternetAssignedNumbersAuthority(IANA)at
http://www.iana.org/assignments/media-types/ .WritingServiceMethods
Chapter15 • JavaServletTechnology 333
■Indicatewhethertobufferoutputwiththe setBufferSize(int) method.Bydefault,any
contentwrittentotheoutputstreamisimmediatelysenttotheclient.Bufferingallowscontenttobewrittenbeforeanythingissentbacktotheclient,thusprovidingtheservletwithmoretimetosetappropriatestatuscodesandheadersorforwardtoanotherwebresource.Themethodmustbecalledbeforeanycontentiswrittenorbeforetheresponseiscommitted.
■Setlocalizationinformation,suchaslocaleandcharacterencoding.See Chapter17,
“InternationalizingandLocalizingWebApplications,” fordetails.
HTTPresponseobjects, javax.servlet.http.HttpServletResponse ,havefieldsrepresenting
HTTPheaders,suchasthefollowing:
■Statuscodes,whichareusedtoindicatethereasonarequestisnotsatisfiedorthatarequesthasbeenredirected.
■Cookies,whichareusedtostoreapplication-specificinformationattheclient.Sometimes,cookiesareusedtomaintainanidentifierfortrackingauser’ssession(see
“Session
Tracking”onpage341 ).
FilteringRequestsandResponses
Afilterisanobjectthatcantransformtheheaderandcontent(orboth)ofarequestorresponse.
Filtersdifferfromwebcomponentsinthatfiltersusuallydonotthemselvescreatearesponse.Instead,afilterprovidesfunctionalitythatcanbe“attached”toanykindofwebresource.Consequently,afiltershouldnothaveanydependenciesonawebresourceforwhichitisactingasafilter;thisway,itcanbecomposedwithmorethanonetypeofwebresource.
Themaintasksthatafiltercanperformareasfollows:
■Querytherequestandactaccordingly.
■Blocktherequest-and-responsepairfrompassinganyfurther.
■Modifytherequestheadersanddata.Youdothisbyprovidingacustomizedversionofthe
request.
■Modifytheresponseheadersanddata.Youdothisbyprovidingacustomizedversionoftheresponse.
■Interactwithexternalresources.
Applicationsoffiltersincludeauthentication,logging,imageconversion,datacompression,
encryption,tokenizingstreams,XMLtransformations,andsoon.
Youcanconfigureawebresourcetobefilteredbyachainofzero,one,ormorefiltersina
specificorder.Thischainisspecifiedwhenthewebapplicationcontainingthecomponentisdeployedandisinstantiatedwhenawebcontainerloadsthecomponent.FilteringRequestsandResponses
TheJavaEE6Tutorial • January2013 334
ProgrammingFilters
ThefilteringAPIisdefinedbythe Filter,FilterChain ,and FilterConfig interfacesinthe
javax.servlet package.Youdefineafilterbyimplementingthe Filterinterface.
Usethe @WebFilter annotationtodefineafilterinawebapplication.Thisannotationis
specifiedonaclassandcontainsmetadataaboutthefilterbeingdeclared.TheannotatedfiltermustspecifyatleastoneURLpattern.Thisisdonebyusingthe urlPatterns orvalueattribute
ontheannotation.Allotherattributesareoptional,withdefaultsettings.Usethe value
attributewhentheonlyattributeontheannotationistheURLpattern;usethe urlPatterns
attributewhenotherattributesarealsoused.
Classesannotatedwiththe @WebFilter annotationmustimplementthe
javax.servlet.Filter interface.
Toaddconfigurationdatatothefilter,specifythe initParams attributeofthe @WebFilter
annotation.The initParams attributecontainsa @WebInitParam annotation.Thefollowing
codesnippetdefinesafilter,specifyinganinitializationparameter:
import javax.servlet.Filter;
import javax.servlet.annotation.WebFilter;import javax.servlet.annotation.WebInitParam;
@WebFilter(filterName = "TimeOfDayFilter ",
urlPatterns = { "/*"},
initParams = {
@WebInitParam(name = "mood", value = "awake ")})
public class TimeOfDayFilter implements Filter {
....
Themostimportantmethodinthe Filterinterfaceis doFilter ,whichispassedrequest,
response,andfilterchainobjects.Thismethodcanperformthefollowingactions:
■Examinetherequestheaders.
■Customizetherequestobjectifthefilterwishestomodifyrequestheadersordata.
■Customizetheresponseobjectifthefilterwishestomodifyresponseheadersordata.
■Invokethenextentityinthefilterchain.Ifthecurrentfilteristhelastfilterinthechainthatendswiththetargetwebcomponentorstaticresource,thenextentityistheresourceattheendofthechain;otherwise,itisthenextfilterthatwasconfiguredintheWAR.Thefilterinvokesthenextentitybycallingthe doFilter methodonthechainobject,passinginthe
requestandresponseitwascalledwithorthewrappedversionsitmayhavecreated.Alternatively,thefiltercanchoosetoblocktherequestbynotmakingthecalltoinvokethenextentity.Inthelattercase,thefilterisresponsibleforfillingouttheresponse.
■Examineresponseheadersafterinvokingthenextfilterinthechain.
■Throwanexceptiontoindicateanerrorinprocessing.FilteringRequestsandResponses
Chapter15 • JavaServletTechnology 335
Inadditionto doFilter ,youmustimplementthe initanddestroymethods.The init
methodiscalledbythecontainerwhenthefilterisinstantiated.Ifyouwishtopassinitializationparameterstothefilter,youretrievethemfromthe FilterConfig objectpassedto init.
ProgrammingCustomizedRequestsandResponses
Therearemanywaysforafiltertomodifyarequestoraresponse.Forexample,afiltercanadd
anattributetotherequestorcaninsertdataintheresponse.
Afilterthatmodifiesaresponsemustusuallycapturetheresponsebeforeitisreturnedtothe
client.Todothis,youpassastand-instreamtotheservletthatgeneratestheresponse.Thestand-instreampreventstheservletfromclosingtheoriginalresponsestreamwhenitcompletesandallowsthefiltertomodifytheservlet’sresponse.
Topassthisstand-instreamtotheservlet,thefiltercreatesaresponsewrapperthatoverrides
thegetWriter orgetOutputStream methodtoreturnthisstand-instream.Thewrapperis
passedtothe doFilter methodofthefilterchain.Wrappermethodsdefaulttocallingthrough
tothewrappedrequestorresponseobject.
Tooverriderequestmethods,youwraptherequestinanobjectthatextendseither
ServletRequestWrapper orHttpServletRequestWrapper .Tooverrideresponsemethods,you
wraptheresponseinanobjectthatextendseither ServletResponseWrapper or
HttpServletResponseWrapper .
SpecifyingFilterMappings
Awebcontainerusesfiltermappingstodecidehowtoapplyfilterstowebresources.Afilter
mappingmatchesafiltertoawebcomponentbynameortowebresourcesbyURLpattern.ThefiltersareinvokedintheorderinwhichfiltermappingsappearinthefiltermappinglistofaWAR.YouspecifyafiltermappinglistforaWARinitsdeploymentdescriptorbyeitherusingNetBeansIDEorcodingthelistbyhandwithXML.
Ifyouwanttologeveryrequesttoawebapplication,youmapthehitcounterfiltertotheURL
pattern /*.
Youcanmapafiltertooneormorewebresources,andyoucanmapmorethanonefiltertoa
webresource.Thisisillustratedin
Figure15–1 ,wherefilterF1ismappedtoservletsS1,S2,and
S3;filterF2ismappedtoservletS2;andfilterF3ismappedtoservletsS1andS2.FilteringRequestsandResponses
TheJavaEE6Tutorial • January2013 336
Recallthatafilterchainisoneoftheobjectspassedtothe doFilter methodofafilter.This
chainisformedindirectlybymeansoffiltermappings.Theorderofthefiltersinthechainisthe
sameastheorderinwhichfiltermappingsappearinthewebapplicationdeploymentdescriptor.
WhenafilterismappedtoservletS1,thewebcontainerinvokesthe doFilter methodofF1.
ThedoFilter methodofeachfilterinS1’sfilterchainisinvokedbytheprecedingfilterinthe
chainbymeansofthe chain.doFilter method.BecauseS1’sfilterchaincontainsfiltersF1and
F3,F1’scallto chain.doFilter invokesthe doFilter methodoffilterF3.WhenF3’s doFilter
methodcompletes,controlreturnstoF1’s doFilter method.
▼ToSpecifyFilterMappingsUsingNetBeansIDE
Expandtheapplication’sprojectnodeintheProjectpane.
ExpandtheWebPagesandWEB-INFnodesundertheprojectnode.Double-click web.xml.
ClickFiltersatthetopoftheeditorpane.ExpandtheServletFiltersnodeintheeditorpane.ClickAddFilterElementtomapthefiltertoawebresourcebynameorbyURLpattern.IntheAddServletFilterdialog,enterthenameofthefilterintheFilterNamefield.ClickBrowsetolocatetheservletclasstowhichthefilterapplies.
Youcanincludewildcardcharacterssothatyoucanapplythefiltertomorethanoneservlet.FIGURE15–1 Filter-to-ServletMapping
F1
F2F3S1
S2
S3
1
2345678FilteringRequestsandResponses
Chapter15 • JavaServletTechnology 337
ClickOK.
Toconstrainhowthefilterisappliedtorequests,followthesesteps.a. ExpandtheFilterMappingsnode.b. Selectthefilterfromthelistoffilters.c. ClickAdd.d. IntheAddFilterMappingdialog,selectoneofthefollowingdispatchertypes:
■REQUEST:Onlywhentherequestcomesdirectlyfromtheclient
■ASYNC:Onlywhentheasynchronousrequestcomesfromtheclient
■FORWARD:Onlywhentherequesthasbeenforwardedtoacomponent(see “Transferring
ControltoAnotherWebComponent”onpage339 )
■INCLUDE:Onlywhentherequestisbeingprocessedbyacomponentthathasbeen
included(see “IncludingOtherResourcesintheResponse”onpage339 )
■ERROR:Onlywhentherequestisbeingprocessedwiththeerrorpagemechanism(see
“HandlingServletErrors”onpage330 )
Youcandirectthefiltertobeappliedtoanycombinationoftheprecedingsituationsby
selectingmultipledispatchertypes.Ifnotypesarespecified,thedefaultoptionis REQUEST.
InvokingOtherWebResources
Webcomponentscaninvokeotherwebresourcesbothindirectlyanddirectly.Aweb
componentindirectlyinvokesanotherwebresourcebyembeddingaURLthatpointstoanotherwebcomponentincontentreturnedtoaclient.Whileitisexecuting,awebcomponentdirectlyinvokesanotherresourcebyeitherincludingthecontentofanotherresourceorforwardingarequesttoanotherresource.
Toinvokearesourceavailableontheserverthatisrunningawebcomponent,youmustfirst
obtaina RequestDispatcher objectbyusingthe getRequestDispatcher( "URL")method.You
cangeta RequestDispatcher objectfromeitherarequestorthewebcontext;however,thetwo
methodshaveslightlydifferentbehavior.Themethodtakesthepathtotherequestedresourceasanargument.Arequestcantakearelativepath(thatis,onethatdoesnotbeginwitha /),but
thewebcontextrequiresanabsolutepath.Iftheresourceisnotavailableoriftheserverhasnotimplementeda RequestDispatcher objectforthattypeofresource, getRequestDispatcher
willreturnnull.Yourservletshouldbepreparedtodealwiththiscondition.9
10InvokingOtherWebResources
TheJavaEE6Tutorial • January2013 338
IncludingOtherResourcesintheResponse
Itisoftenusefultoincludeanotherwebresource,suchasbannercontentorcopyright
information)intheresponsereturnedfromawebcomponent.Toincludeanotherresource,invokethe includemethodofa RequestDispatcher object:
include(request, response);
Iftheresourceisstatic,the includemethodenablesprogrammaticserver-sideincludes.Ifthe
resourceisawebcomponent,theeffectofthemethodistosendtherequesttotheincludedwebcomponent,executethewebcomponent,andthenincludetheresultoftheexecutionintheresponsefromthecontainingservlet.Anincludedwebcomponenthasaccesstotherequestobjectbutislimitedinwhatitcandowiththeresponseobject.
■Itcanwritetothebodyoftheresponseandcommitaresponse.
■Itcannotsetheadersorcallanymethod,suchas setCookie ,thataffectstheheadersofthe
response.
TransferringControltoAnotherWebComponent
Insomeapplications,youmightwanttohaveonewebcomponentdopreliminaryprocessingof
arequestandhaveanothercomponentgeneratetheresponse.Forexample,youmightwanttopartiallyprocessarequestandthentransfertoanothercomponent,dependingonthenatureoftherequest.
Totransfercontroltoanotherwebcomponent,youinvokethe forwardmethodofa
RequestDispatcher .Whenarequestisforwarded,therequestURLissettothepathofthe
forwardedpage.TheoriginalURIanditsconstituentpartsaresavedasrequestattributesjavax.servlet.forward.[ request-uri |context-path |servlet-path |path-info |query-string ].
Theforwardmethodshouldbeusedtogiveanotherresourceresponsibilityforreplyingtothe
user.Ifyouhavealreadyaccesseda ServletOutputStream orPrintWriter objectwithinthe
servlet,youcannotusethismethod;doingsothrowsan IllegalStateException .
AccessingtheWebContext
Thecontextinwhichwebcomponentsexecuteisanobjectthatimplementsthe
ServletContext interface.Youretrievethewebcontextbyusingthe getServletContext
method.Thewebcontextprovidesmethodsforaccessing
■Initializationparameters
■Resourcesassociatedwiththewebcontext
■Object-valuedattributes
■LoggingcapabilitiesAccessingtheWebContext
Chapter15 • JavaServletTechnology 339
Thecounter’saccessmethodsaresynchronizedtopreventincompatibleoperationsbyservlets
thatarerunningconcurrently.Afilterretrievesthecounterobjectbyusingthecontext’sgetAttribute method.Theincrementedvalueofthecounterisrecordedinthelog.
MaintainingClientState
Manyapplicationsrequirethataseriesofrequestsfromaclientbeassociatedwithoneanother.
Forexample,awebapplicationcansavethestateofauser’sshoppingcartacrossrequests.Web-basedapplicationsareresponsibleformaintainingsuchstate,calleda session,because
HTTPisstateless.Tosupportapplicationsthatneedtomaintainstate,JavaServlettechnologyprovidesanAPIformanagingsessionsandallowsseveralmechanismsforimplementingsessions.
AccessingaSession
Sessionsarerepresentedbyan HttpSession object.Youaccessasessionbycallingthe
getSession methodofarequestobject.Thismethodreturnsthecurrentsessionassociated
withthisrequest;or,iftherequestdoesnothaveasession,thismethodcreatesone.
AssociatingObjectswithaSession
Youcanassociateobject-valuedattributeswithasessionbyname.Suchattributesareaccessiblebyanywebcomponentthatbelongstothesamewebcontext andishandlingarequestthatis
partofthesamesession.
Recallthatyourapplicationcannotifywebcontextandsessionlistenerobjectsofservlet
lifecycleevents(
“HandlingServletLifecycleEvents”onpage328 ).Youcanalsonotifyobjectsof
certaineventsrelatedtotheirassociationwithasessionsuchasthefollowing:
■Whentheobjectisaddedtoorremovedfromasession.Toreceivethisnotification,yourobjectmustimplementthe javax.servlet.http.HttpSessionBindingListener interface.
■Whenthesessiontowhichtheobjectisattachedwillbepassivatedoractivated.Asession
willbepassivatedoractivatedwhenitismovedbetweenvirtualmachinesorsavedtoandrestoredfrompersistentstorage.Toreceivethisnotification,yourobjectmustimplementthejavax.servlet.http.HttpSessionActivationListener interface.MaintainingClientState
TheJavaEE6Tutorial • January2013 340
SessionManagement
BecauseanHTTPclienthasnowaytosignalthatitnolongerneedsasession,eachsessionhas
anassociatedtimeoutsothatitsresourcescanbereclaimed.Thetimeoutperiodcanbeaccessedbyusingasession’s getMaxInactiveInterval andsetMaxInactiveInterval methods.
■Toensurethatanactivesessionisnottimedout,youshouldperiodicallyaccessthesession
byusingservicemethodsbecausethisresetsthesession’stime-to-livecounter.
■Whenaparticularclientinteractionisfinished,youusethesession’s invalidate methodto
invalidateasessionontheserversideandremoveanysessiondata.
▼ToSettheTimeoutPeriodUsingNetBeansIDE
TosetthetimeoutperiodinthedeploymentdescriptorusingNetBeansIDE,followthesesteps.
Opentheprojectifyouhaven’talready.Expandtheproject’snodeintheProjectspane.ExpandtheWebPagesnodeandthentheWEB-INFnode.Double-click web.xml.
ClickGeneralatthetopoftheeditor.IntheSessionTimeoutfield,typeanintegervalue.
Theintegervaluerepresentsthenumberofminutesofinactivitythatmustpassbeforethe
sessiontimesout.
SessionTracking
Toassociateasessionwithauser,awebcontainercanuseseveralmethods,allofwhichinvolvepassinganidentifierbetweentheclientandtheserver.Theidentifiercanbemaintainedontheclientasacookie,orthewebcomponentcanincludetheidentifierineveryURLthatisreturned
totheclient.
Ifyourapplicationusessessionobjects,youmustensurethatsessiontrackingisenabledby
havingtheapplicationrewriteURLswhenevertheclientturnsoffcookies.Youdothisbycallingtheresponse’s encodeURL(URL) methodonallURLsreturnedbyaservlet.Thismethod
includesthesessionIDintheURLonlyifcookiesaredisabled;otherwise,themethodreturnstheURLunchanged.1
23456MaintainingClientState
Chapter15 • JavaServletTechnology 341
FinalizingaServlet
Thewebcontainermaydeterminethataservletshouldberemovedfromservice(forexample,
whenacontainerwantstoreclaimmemoryresourcesorwhenitisbeingshutdown).Insuchacase,thecontainercallsthe destroymethodofthe Servletinterface.Inthismethod,you
releaseanyresourcestheservletisusingandsaveanypersistentstate.The destroymethod
releasesthedatabaseobjectcreatedinthe initmethod.
Aservlet’sservicemethodsshouldallbecompletewhenaservletisremoved.Theservertriesto
ensurethisbycallingthe destroymethodonlyafterallservicerequestshavereturnedoraftera
server-specificgraceperiod,whichevercomesfirst.Ifyourservlethasoperationsthatmayrunlongerthantheserver’sgraceperiod,theoperationscouldstillberunningwhen destroyis
called.Youmustmakesurethatanythreadsstillhandlingclientrequestscomplete.
Theremainderofthissectionexplainshowtodothefollowing:
■Keeptrackofhowmanythreadsarecurrentlyrunningthe servicemethod.
■Provideacleanshutdownbyhavingthe destroymethodnotifylong-runningthreadsofthe
shutdownandwaitforthemtocomplete.
■Havethelong-runningmethodspollperiodicallytocheckforshutdownand,ifnecessary,
stopworking,cleanup,andreturn.
TrackingServiceRequests
Totrackservicerequests,includeinyourservletclassafieldthatcountsthenumberofservicemethodsthatarerunning.Thefieldshouldhavesynchronizedaccessmethodstoincrement,decrement,andreturnitsvalue:
public class ShutdownExample extends HttpServlet {
private int serviceCounter = 0;...// Access methods for serviceCounterprotected synchronized void enteringServiceMethod() {
serviceCounter++;
}protected synchronized void leavingServiceMethod() {
serviceCounter--;
}protected synchronized int numServices() {
return serviceCounter;
}
}
Theservicemethodshouldincrementtheservicecountereachtimethemethodisenteredand
shoulddecrementthecountereachtimethemethodreturns.Thisisoneofthefewtimesthatyour HttpServlet subclassshouldoverridethe servicemethod.Thenewmethodshouldcall
super.service topreservethefunctionalityoftheoriginal servicemethod:FinalizingaServlet
TheJavaEE6Tutorial • January2013 342
protected void service(HttpServletRequest req,
HttpServletResponse resp)throws ServletException,IOException {
enteringServiceMethod();try {
super.service(req, resp);
} finally {
leavingServiceMethod();
}
}
NotifyingMethodstoShutDown
Toensureacleanshutdown,your destroymethodshouldnotreleaseanysharedresources
untilalltheservicerequestshavecompleted.Onepartofdoingthisistochecktheservicecounter.Anotherpartistonotifythelong-runningmethodsthatitistimetoshutdown.Forthisnotification,anotherfieldisrequired.Thefieldshouldhavetheusualaccessmethods:
public class ShutdownExample extends HttpServlet {
private boolean shuttingDown;...
//Access methods for shuttingDownprotected synchronized void setShuttingDown(boolean flag) {
shuttingDown = flag;
}protected synchronized boolean isShuttingDown() {
return shuttingDown;
}
}
Hereisanexampleofthe destroymethodusingthesefieldstoprovideacleanshutdown:
public void destroy() {
/* Check to see whether there are still service methods /*/* running, and if there are, tell them to stop. */if (numServices() > 0) {
setShuttingDown(true);
}
/* Wait for the service methods to stop. */
while(numServices() > 0) {
try {
Thread.sleep(interval);
} catch (InterruptedException e) {}
}
}
CreatingPoliteLong-RunningMethods
Thefinalstepinprovidingacleanshutdownistomakeanylong-runningmethodsbehave
politely.Methodsthatmightrunforalongtimeshouldcheckthevalueofthefieldthatnotifiesthemofshutdownsandshouldinterrupttheirwork,ifnecessary:FinalizingaServlet
Chapter15 • JavaServletTechnology 343
public void doPost(...) {
...for(i = 0; ((i < lotsOfStuffToDo) &&
!isShuttingDown()); i++) {
try {
partOfLongRunningOperation(i);
} catch (InterruptedException e) {
...
}
}
}
ThemoodExampleApplication
Themoodexampleapplication,locatedinthe tut-install /examples/web/mood/ directory,isa
simpleexamplethatdisplaysDuke’smoodsatdifferenttimesduringtheday.Theexampleshowshowtodevelopasimpleapplicationbyusingthe @WebServlet ,@WebFilter ,and
@WebListener annotationstocreateaservlet,alistener,andafilter.
ComponentsofthemoodExampleApplication
Themoodexampleapplicationiscomprisedofthreecomponents: mood.web.MoodServlet ,
mood.web.TimeOfDayFilter ,and mood.web.SimpleServletListener .
MoodServlet ,thepresentationlayeroftheapplication,displaysDuke’smoodinagraphic,
basedonthetimeofday.The @WebServlet annotationspecifiestheURLpattern:
@WebServlet( "/report ")
public class MoodServlet extends HttpServlet {
...
TimeOfDayFilter setsaninitializationparameterindicatingthatDukeisawake:
@WebFilter(filterName = "TimeOfDayFilter ",
urlPatterns = { "/*"},
initParams = {
@WebInitParam(name = "mood", value = "awake ")})
public class TimeOfDayFilter implements Filter {
...
Thefiltercallsthe doFilter method,whichcontainsa switchstatementthatsetsDuke’smood
basedonthecurrenttime.
SimpleServletListener logschangesintheservlet’slifecycle.Thelogentriesappearinthe
serverlog.
RunningthemoodExample
YoucanuseeitherNetBeansIDEorAnttobuild,package,deploy,andrunthe moodexample.ThemoodExampleApplication
TheJavaEE6Tutorial • January2013 344
▼ToRunthemoodExampleUsingNetBeansIDE
FromtheFilemenu,chooseOpenProject.
IntheOpenProjectdialog,navigateto:
tut-install /examples/web/
Selectthe moodfolder.
SelecttheOpenasMainProjectcheckbox.ClickOpenProject.IntheProjectstab,right-clickthe moodprojectandselectBuild.
Right-clicktheprojectandselectDeploy.Inawebbrowser,opentheURL http://localhost:8080/mood/report .
TheURLspecifiesthecontextroot,followedbytheURLpatternspecifiedfortheservlet.
Awebpageappearswiththetitle“ServletMoodServletat/mood”atextstringdescribingDuke’s
mood,andanillustrativegraphic.
▼ToRunthemoodExampleUsingAnt
Inaterminalwindow,goto:
tut-install /examples/web/mood/
Typethefollowingcommand:
ant
ThistargetbuildstheWARfileandcopiesittothe tut-install /examples/web/mood/dist/
directory.
Type ant deploy .
IgnoretheURLshowninthedeploytargetoutput.
Inawebbrowser,opentheURL http://localhost:8080/mood/report .
TheURLspecifiesthecontextroot,followedbytheURLpattern.
Awebpageappearswiththetitle“ServletMoodServletat/mood”atextstringdescribingDuke’s
mood,andanillustrativegraphic.1
2
3
45678
1
2
3
4ThemoodExampleApplication
Chapter15 • JavaServletTechnology 345
FurtherInformationaboutJavaServletTechnology
FormoreinformationonJavaServlettechnology,see
■JavaServlet3.0specification:
http://jcp.org/en/jsr/detail?id=315
■JavaServletwebsite:
http://www.oracle.com/technetwork/java/index-jsp-135475.htmlFurtherInformationaboutJavaServletTechnology
TheJavaEE6Tutorial • January2013 346
UploadingFileswithJavaServletTechnology
Supportingfileuploadsisaverybasicandcommonrequirementformanywebapplications.
PriortoServlet3.0,implementingfileuploadrequiredtheuseofexternallibrariesorcomplexinputprocessing.Version3.0oftheJavaServletspecificationhelpstoprovideaviablesolutiontotheprobleminagenericandportableway.TheServlet3.0specificationsupportsfileuploadoutofthebox,soanywebcontainerthatimplementsthespecificationcanparsemultipartrequestsandmakemimeattachmentsavailablethroughthe HttpServletRequest object.
Anewannotation, javax.servlet.annotation.MultipartConfig ,isusedtoindicatethatthe
servletonwhichitisdeclaredexpectsrequeststomadeusingthe multipart/form-data MIME
type.Servletsthatareannotatedwith @MultipartConfig canretrievethe Partcomponentsofa
given multipart/form-data requestbycallingthe request.getPart(String name) or
request.getParts() method.
Thefollowingtopicsareaddressedhere:
■“The @MultipartConfig Annotation”onpage347
■“The getParts andgetPartMethods”onpage348
■“The fileupload ExampleApplication”onpage349
The@MultipartConfig Annotation
The@MultipartConfig annotationsupportsthefollowingoptionalattributes:
■location :Anabsolutepathtoadirectoryonthefilesystem.The location attributedoes
notsupportapathrelativetotheapplicationcontext.Thislocationisusedtostorefiles
temporarilywhilethepartsareprocessedorwhenthesizeofthefileexceedsthespecifiedfileSizeThreshold setting.Thedefaultlocationis "".
■fileSizeThreshold :Thefilesizeinbytesafterwhichthefilewillbetemporarilystoredon
disk.Thedefaultsizeis0bytes.16CHAPTER 16
347
■MaxFileSize :Themaximumsizeallowedforuploadedfiles,inbytes.Ifthesizeofany
uploadedfileisgreaterthanthissize,thewebcontainerwillthrowanexception(IllegalStateException ).Thedefaultsizeisunlimited.
■maxRequestSize :Themaximumsizeallowedfora multipart/form-data request,inbytes.
Thewebcontainerwillthrowanexceptioniftheoverallsizeofalluploadedfilesexceedsthisthreshold.Thedefaultsizeisunlimited.
For,example,the @MultipartConfig annotationcouldbeconstructedasfollows:
@MultipartConfig(location= "/tmp", fileSizeThreshold=1024*1024,
maxFileSize=1024*1024*5, maxRequestSize=1024*1024*5*5)
Insteadofusingthe @MultipartConfig annotationtohard-codetheseattributesinyourfile
uploadservlet,youcouldaddthefollowingasachildelementofthe servletconfiguration
elementinthe web.xmlfile.
<multipart-config>
<location>/tmp</location><max-file-size>20848820</max-file-size><max-request-size>418018841</max-request-size><file-size-threshold>1048576</file-size-threshold>
</multipart-config>
ThegetParts andgetPartMethods
Servlet3.0supportstwoadditional HttpServletRequest methods:
■Collection<Part> getParts()
■Part getPart(String name)
Therequest.getParts() methodreturnscollectionsofall Partobjects.Ifyouhavemorethan
oneinputoftype file,multiple Partobjectsarereturned.Since Partobjectsarenamed,the
getPart(String name) methodcanbeusedtoaccessaparticular Part.Alternatively,the
getParts() method,whichreturnsan Iterable<Part> ,canbeusedtogetan Iterator overall
thePartobjects.
Thejavax.servlet.http.Part interfaceisasimpleone,providingmethodsthatallow
introspectionofeach Part.Themethodsdothefollowing:
■Retrievethename,size,andcontent-typeofthe Part
■Querytheheaderssubmittedwitha Part
■Deletea Part
■Writea Partouttodisk
Forexample,the Partinterfaceprovidesthe write(String filename) methodtowritethefile
withthespecifiedname.Thefilecanthenbesavedinthedirectoryspecifiedwiththe location
attributeofthe @MultipartConfig annotationor,inthecaseofthe fileupload example,inthe
locationspecifiedbytheDestinationfieldintheform.ThegetParts andgetPartMethods
TheJavaEE6Tutorial • January2013 348
Thefileupload ExampleApplication
Thefileupload exampleillustrateshowtoimplementandusethefileuploadfeature.
TheDuke’sForestcasestudyprovidesamorecomplexexamplethatuploadsanimagefileand
storesitscontentinadatabase.
Architectureofthe fileupload ExampleApplication
Thefileupload exampleapplicationconsistsofasingleservletandanHTMLformthatmakes
afileuploadrequesttotheservlet.
ThisexampleincludesaverysimpleHTMLformwithtwofields,FileandDestination.The
inputtype, file,enablesausertobrowsethelocalfilesystemtoselectthefile.Whenthefileis
selected,itissenttotheserverasapartofaPOSTrequest.Duringthisprocesstwomandatoryrestrictionsareappliedtotheformwithinputtype file:
■Theenctypeattributemustbesettoavalueof multipart/form-data .
■ItsmethodmustbePOST.
Whentheformisspecifiedinthismanner,theentirerequestissenttotheserverinencoded
form.Theservletthenhandlestherequesttoprocesstheincomingfiledataandtoextractafilefromthestream.Thedestinationisthepathtothelocationwherethefilewillbesavedonyourcomputer.PressingtheUploadbuttonatthebottomoftheformpoststhedatatotheservlet,whichsavesthefileinthespecifieddestination.
TheHTMLformin tut-install /examples/web/fileupload/web/index.html isasfollows:
<!DOCTYPE html>
<html lang= "en">
<head>
<title>File Upload</title><meta http-equiv= "Content-Type "content= "text/html; charset=UTF-8 ">
</head><body>
<form method= "POST"action= "upload "enctype= "multipart/form-data ">
File:<input type= "file"name= "file"id="file"/> <br/>
Destination:<input type= "text"value= "/tmp"name= "destination "/>
</br><input type= "submit "value= "Upload "name= "upload "id="upload "/>
</form>
</body>
</html>
APOSTrequestmethodisusedwhentheclientneedstosenddatatotheserveraspartofthe
request,suchaswhenuploadingafileorsubmittingacompletedform.Incontrast,aGETrequestmethodsendsaURLandheadersonlytotheserver,whereasPOSTrequestsalsoThefileupload ExampleApplication
Chapter16 • UploadingFileswithJavaServletTechnology 349
includeamessagebody.Thisallowsarbitrary-lengthdataofanytypetobesenttotheserver.A
headerfieldinthePOSTrequestusuallyindicatesthemessagebody’sInternetmediatype.
Whensubmittingaform,thebrowserstreamsthecontentin,combiningallparts,witheach
partrepresentingafieldofaform.Partsarenamedafterthe inputelementsandareseparated
fromeachotherwithstringdelimitersnamed boundary .
Thisiswhatsubmitteddatafromthe fileupload formlookslike,afterselecting sample.txt as
thefilethatwillbeuploadedtothe tmpdirectoryonthelocalfilesystem:
POST /fileupload/upload HTTP/1.1
Host: localhost:8080Content-Type: multipart/form-data;boundary=---------------------------263081694432439Content-Length: 441-----------------------------263081694432439Content-Disposition: form-data; name= "file"; filename= "sample.txt "
Content-Type: text/plain
Data from sample file
-----------------------------263081694432439Content-Disposition: form-data; name= "destination "
/tmp
-----------------------------263081694432439Content-Disposition: form-data; name= "upload "
Upload
-----------------------------263081694432439--
Theservlet FileUploadServlet.java canbefoundinthe
tut-install /examples/web/fileupload/src/java/fileupload/ directory.Theservletbegins
asfollows:
@WebServlet(name = "FileUploadServlet ", urlPatterns = { "/upload "})
@MultipartConfigpublic class FileUploadServlet extends HttpServlet {
private final static Logger LOGGER =
Logger.getLogger(FileUploadServlet.class.getCanonicalName());
The@WebServlet annotationusesthe urlPatterns propertytodefineservletmappings.
The@MultipartConfig annotationindicatesthattheservletexpectsrequeststomadeusingthe
multipart/form-data MIMEtype.
TheprocessRequest methodretrievesthedestinationandfilepartfromtherequest,thencalls
thegetFileName methodtoretrievethefilenamefromthefilepart.Themethodthencreatesa
FileOutputStream andcopiesthefiletothespecifieddestination.Theerror-handlingsection
ofthemethodcatchesandhandlessomeofthemostcommonreasonswhyafilewouldnotbefound.The processRequest andgetFileName methodslooklikethis:Thefileupload ExampleApplication
TheJavaEE6Tutorial • January2013 350
protected void processRequest(HttpServletRequest request,
HttpServletResponse response)throws ServletException, IOException {
response.setContentType( "text/html;charset=UTF-8 ");
// Create path components to save the file
final String path = request.getParameter( "destination ");
final Part filePart = request.getPart( "file");
final String fileName = getFileName(filePart);
OutputStream out = null;
InputStream filecontent = null;final PrintWriter writer = response.getWriter();
try {
out = new FileOutputStream(new File(path + File.separator
+ fileName));
filecontent = filePart.getInputStream();
int read = 0;
final byte[] bytes = new byte[1024];
while ((read = filecontent.read(bytes)) != -1) {
out.write(bytes, 0, read);
}writer.println( "New file "+ fileName + "created at "+ path);
LOGGER.log(Level.INFO, "File{0}being uploaded to {1} ",
new Object[]{fileName, path});
} catch (FileNotFoundException fne) {
writer.println( "You either did not specify a file to upload or are "
+"trying to upload a file to a protected or nonexistent "
+"location. ");
writer.println( "<br/> ERROR: "+ fne.getMessage());
LOGGER.log(Level.SEVERE, "Problems during file upload. Error: {0} ",
new Object[]{fne.getMessage()});
} finally {
if (out != null) {
out.close();
}if (filecontent != null) {
filecontent.close();
}if (writer != null) {
writer.close();
}
}
}
private String getFileName(final Part part) {
final String partHeader = part.getHeader( "content-disposition ");
LOGGER.log(Level.INFO, "Part Header = {0} ", partHeader);
for (String content : part.getHeader( "content-disposition ").split( ";")) {
if (content.trim().startsWith( "
filename ")) {
return content.substring(
content.indexOf(’=’) + 1).trim().replace( "\"","");
}
}
return null;
}Thefileupload ExampleApplication
Chapter16 • UploadingFileswithJavaServletTechnology 351
Runningthe fileupload Example
YoucanuseeitherNetBeansIDEorAnttobuild,package,deploy,andrunthe fileupload
example.
▼ToBuild,Package,andDeploythe fileupload ExampleUsing
NetBeansIDE
FromtheFilemenu,chooseOpenProject.
IntheOpenProjectdialog,navigateto:
tut-install /examples/web/
Selectthe fileupload folder.
SelecttheOpenasMainProjectcheckbox.ClickOpenProject.IntheProjectstab,right-click fileupload andselectDeploy.
▼ToBuild,Package,andDeploythe fileupload ExampleUsingAnt
Inaterminalwindow,goto:
tut-install /examples/web/fileupload/
Typethefollowingcommand:
ant
Typethefollowingcommand:
ant deploy
▼ToRunthe fileupload Example
Inawebbrowser,typethefollowingURL:
http://localhost:8080/fileupload/
TheFileUploadpageopens.
ClickBrowsetodisplayafilebrowserwindow.1
2
3
456
1
23
1
2Thefileupload ExampleApplication
TheJavaEE6Tutorial • January2013 352
SelectafiletouploadandclickOpen.
ThenameofthefileyouselectedisdisplayedintheFilefield.Ifyoudonotselectafile,an
exceptionwillbethrown.
IntheDestinationfield,typeadirectoryname.
Thedirectorymusthavealreadybeencreatedandmustalsobewritable.Ifyoudonotentera
directoryname,orifyouenterthenameofanonexistentorprotecteddirectory,anexceptionwillbethrown.
ClickUploadtouploadthefileyouselectedtothedirectoryyouspecifiedintheDestination
field.
Amessagereportsthatthefilewascreatedinthedirectoryyouspecified.
GotothedirectoryyouspecifiedintheDestinationfieldandverifythattheuploadedfileis
present.3
4
5
6Thefileupload ExampleApplication
Chapter16 • UploadingFileswithJavaServletTechnology 353
354
InternationalizingandLocalizingWeb
Applications
Theprocessofpreparinganapplicationtosupportmorethanonelanguageanddataformatis
calledinternationalization .Localization istheprocessofadaptinganinternationalized
applicationtosupportaspecificregionorlocale.Examplesoflocale-dependentinformationincludemessagesanduserinterfacelabels,charactersetsandencoding,anddateandcurrencyformats.Althoughallclientuserinterfacesshouldbeinternationalizedandlocalized,theseprocessesareparticularlyimportantforwebapplicationsbecauseoftheglobalnatureoftheweb.
Thefollowingtopicsareaddressedhere:
■“JavaPlatformLocalizationClasses”onpage355
■“ProvidingLocalizedMessagesandLabels”onpage356
■“DateandNumberFormatting”onpage359
■“CharacterSetsandEncodings”onpage359
JavaPlatformLocalizationClasses
IntheJavaplatform, java.util.Locale (http://docs.oracle.com/javase/6/docs/api/
java/util/Locale.html )representsaspecificgeographical,political,orculturalregion.The
stringrepresentationofalocaleconsistsoftheinternationalstandardtwo-characterabbreviationforlanguageandcountryandanoptionalvariant,separatedbyunderscore( _)
characters.Examplesoflocalestringsinclude fr(French), de_CH(SwissGerman),and
en_US_POSIX (EnglishonaPOSIX-compliantplatform).
Locale-sensitivedataisstoredina java.util.ResourceBundle (
http://docs.oracle.com/
javase/6/docs/api/java/util/ResourceBundle.html ).Aresourcebundlecontains
key-valuepairs,wherethekeyuniquelyidentifiesalocale-specificobjectinthebundle.Aresourcebundlecanbebackedbyatextfile(propertiesresourcebundle)oraclass(listresourcebundle)containingthepairs.Youconstructaresourcebundleinstancebyappendingalocalestringrepresentationtoabasename.17CHAPTER 17
355
TheDuke’sTutoringapplicationcontainsresourcebundleswiththebasename
messages.properties forthelocales pt(Portuguese), de(German), es(Spanish),and zh
(Chinese).Thedefaultlocale, en(English),whichisspecifiedinthe faces-config.xml file,uses
theresourcebundlewiththebasename, messages.properties .
FormoredetailsoninternationalizationandlocalizationintheJavaplatform,see
(http://docs.oracle.com/javase/tutorial/i18n/index.html ).
ProvidingLocalizedMessagesandLabels
Messagesandlabelsshouldbetailoredaccordingtotheconventionsofauser’slanguageand
region.Therearetwoapproachestoprovidinglocalizedmessagesandlabelsinawebapplication:
■Provideaversionofthewebpageineachofthetargetlocalesandhaveacontrollerservletdispatchtherequesttotheappropriatepagedependingontherequestedlocale.Thisapproachisusefuliflargeamountsofdataonapageoranentirewebapplicationneedtobeinternationalized.
■Isolateanylocale-sensitivedataonapageintoresourcebundles,andaccessthedatasothatthecorrespondingtranslatedmessageisfetchedautomaticallyandinsertedintothepage.Thus,insteadofcreatingstringsdirectlyinyourcode,youcreatearesourcebundlethatcontainstranslationsandreadthetranslationsfromthatbundleusingthecorrespondingkey.
TheDuke’sTutoringapplicationfollowsthesecondapproach.Hereareafewlinesfromthe
defaultresourcebundle messages .properties :
nav.main=Main page
nav.status=View statusnav.current_session=View current tutoring sessionnav.park=View students at the parknav.admin=Administration
admin.nav.main=Administration main page
admin.nav.create_student=Create new studentadmin.nav.edit_student=Edit studentadmin.nav.create_guardian=Create new guardianadmin.nav.edit_guardian=Edit guardianadmin.nav.create_address=Create new addressadmin.nav.edit_address=Edit addressadmin.nav.activate_student=Activate student
EstablishingtheLocale
Togetthecorrectstringsforagivenuser,awebapplicationeitherretrievesthelocale(setbya
browserlanguagepreference)fromtherequestusingthe getLocale method,orallowstheuser
toexplicitlyselectthelocale.ProvidingLocalizedMessagesandLabels
TheJavaEE6Tutorial • January2013 356
Acomponentcanexplicitlysetthelocalebyusingthe fmt:setLocale tag.
Thelocale-config elementintheconfigurationfileregistersthedefaultlocaleandother
supportedlocales.ThiselementinDuke’sTutoringregistersEnglishasthedefaultlocaleandindicatesthatGerman,Spanish,Portuguese,andChinesearesupportedlocales.
<locale-config>
<default-locale>en</default-locale><supported-locale>de</supported-locale><supported-locale>es</supported-locale><supported-locale>pt</supported-locale><supported-locale>zh</supported-locale>
</locale-config>
TheStatusManagerintheDuke’sTutoringapplicationusesthe getLocale methodtoretrieve
thelocaleanda toString methodtoreturnalocalizedtranslationofastudent’sstatusbasedon
thelocale.
public class StatusManager {
private FacesContext ctx = FacesContext.getCurrentInstance();
private Locale locale;
/** Creates a new instance of StatusManager */
public StatusManager() {
locale = ctx.getViewRoot().getLocale();
}
public String getLocalizedStatus(StatusType status) {
return status.toString(locale);
}
}
SettingtheResourceBundle
Theresourcebundleissetwiththe resource-bundle elementintheconfigurationfile.The
settingforDuke’sTutoringlookslikethis:
<resource-bundle>
<base-name>dukestutoring.web.messages.Messages</base-name><var>bundle</var>
</resource-bundle>
Afterthelocaleisset,thecontrollerofawebapplicationcouldretrievetheresourcebundlefor
thatlocaleandsaveitasasessionattribute(see “AssociatingObjectswithaSession”on
page340)forusebyothercomponentsorsimplytoreturnatextstringappropriateforthe
selectedlocale:
public String toString(Locale locale) {
ResourceBundle res = ResourceBundle.getBundle(ProvidingLocalizedMessagesandLabels
Chapter17 • InternationalizingandLocalizingWebApplications 357
"dukestutoring.web.messages.Messages ", locale);
return res.getString(name() + ".string ");
}
Alternatively,anapplicationcouldusethe f:loadBundle tagtosettheresourcebundle.This
tagloadsthecorrectresourcebundleaccordingtothelocalestoredin FacesContext .
<f:loadBundle basename= "dukestutoring.web.messages.Messages "
var="bundle "/>
ResourcebundlescontainingmessagesthatareexplicitlyreferencedfromaJavaServerFacestag
attributeusingavalueexpressionmustberegisteredusingthe resource-bundle elementofthe
configurationfile.
Formoreinformationonusingthiselement,see “RegisteringApplicationMessages”on
page308.
RetrievingLocalizedMessages
AwebcomponentwrittenintheJavaprogramminglanguageretrievestheresourcebundlefromthesession:
ResourceBundle messages = (ResourceBundle)session.getAttribute( "messages ");
Thenitlooksupthestringassociatedwiththekey person.lastName asfollows:
messages.getString( "person.lastName ");
Youcanonlyusea messageormessages tagtodisplaymessagesthatarequeuedontoa
componentasaresultofaconverterorvalidatorbeingregisteredonthecomponent.Thefollowingexampleshowsa messagetagthatdisplaystheerrormessagequeuedonthe userNo
inputcomponentifthevalidatorregisteredonthecomponentfailstovalidatethevaluetheuserentersintothecomponent.
<h:inputText id= "userNo "value= "#{UserNumberBean.userNumber} ">
<f:validateLongRange minimum= "0"maximum= "10"/>
...
<h:message
style= "color: red;
text-decoration: overline "id="errors1 "for="userNo "/>
Formoreinformationonusingthe messageormessages tags,see“DisplayingErrorMessages
withthe h:message andh:messages Tags”onpage164 .
Messagesthatarenotqueuedonacomponentandarethereforenotloadedautomaticallyare
referencedusingavalueexpression.YoucanreferencealocalizedmessagefromalmostanyJavaServerFacestagattribute.ProvidingLocalizedMessagesandLabels
TheJavaEE6Tutorial • January2013 358
Thevalueexpressionthatreferencesamessagehasthesamenotationwhetheryouloadedthe
resourcebundlewiththe f:loadBundle tagorregistereditwiththe resource-bundle element
intheconfigurationfile.
Thevalueexpressionnotationis var.message ,inwhich varmatchesthe varattributeofthe
f:loadBundle tagorthe varelementdefinedinthe resource-bundle elementofthe
configurationfile,and messagematchesthekeyofthemessagecontainedintheresource
bundle,referredtobythe varattribute.
Hereisanexamplefrom editAddress.xhtml inDuke’sTutoring:
<h:outputLabel for= "country "value= "#{bundle[’address.country’]}: "/>
Noticethat bundlematchesthe varelementfromtheconfigurationfileandthat country
matchesthekeyintheresourcebundle.
DateandNumberFormatting
Javaprogramsusethe DateFormat.getDateInstance(int, locale) toparseandformatdates
inalocale-sensitivemanner.Javaprogramsusethe NumberFormat.get XXX Instance(locale)
method,where XXXcanbe Currency ,Number,orPercent,toparseandformatnumerical
valuesinalocale-sensitivemanner.
Anapplicationcanusedate/timeandnumberconverterstoformatdatesandnumbersina
locale-sensitivemanner.Forexample,ashippingdatecouldbeconvertedasfollows:
<h:outputText value= "#{cashier.shipDate} ">
<f:convertDateTime dateStyle= "full"/>
</h:outputText>
ForinformationonJavaServerFacesconverters,see “UsingtheStandardConverters”on
page175.
CharacterSetsandEncodings
Thefollowingsectionsdescribecharactersetsandcharacterencodings.
CharacterSets
Acharacterset isasetoftextualandgraphicsymbols,eachofwhichismappedtoasetof
nonnegativeintegers.
ThefirstcharactersetusedincomputingwasUS-ASCII.Itislimitedinthatitcanrepresent
onlyAmericanEnglish.US-ASCIIcontainsuppercaseandlowercaseLatinletters,numerals,punctuation,controlcodes,andafewmiscellaneoussymbols.CharacterSetsandEncodings
Chapter17 • InternationalizingandLocalizingWebApplications 359
Unicodedefinesastandardized,universalcharactersetthatcanbeextendedtoaccommodate
additions.WhentheJavaprogramsourcefileencodingdoesn’tsupportUnicode,youcanrepresentUnicodecharactersasescapesequencesbyusingthenotation \uXXXX,whereXXXX
isthecharacter’s16-bitrepresentationinhexadecimal.Forexample,theSpanishversionoftheDuke’sTutoringmessagefileusesUnicodefornon-ASCIIcharacters:
nav.main=P\u00e1gina Principal
nav.status=Mirar el estadonav.current_session=Ver sesi\u00f3n actual del tutorialnav.park=Ver estudiantes en el Parquenav.admin=Administraci\u00f3n
admin.nav.main=P\u00e1gina principal de administraci\u00f3n
admin.nav.create_student=Crear un nuevo estudianteadmin.nav.edit_student=Editar informaci\u00f3n del estudianteadmin.nav.create_guardian=Crear un nuevo guardiaadmin.nav.edit_guardian=Editar guardiaadmin.nav.create_address=Crear una nueva direcci\u00f3nadmin.nav.edit_address=Editar direcci\u00f3nadmin.nav.activate_student=Activar estudiante
CharacterEncoding
Acharacterencoding mapsacharactersettounitsofaspecificwidthanddefinesbyte
serializationandorderingrules.Manycharactersetshavemorethanoneencoding.Forexample,JavaprogramscanrepresentJapanesecharactersetsusingthe EUC-JPorShift-JIS
encodings,amongothers.Eachencodinghasrulesforrepresentingandserializingacharacterset.
TheISO8859seriesdefines13characterencodingsthatcanrepresenttextsindozensof
languages.EachISO8859characterencodingcanhaveupto256characters.ISO-8859-1(Latin-1)comprisestheASCIIcharacterset,characterswithdiacritics(accents,diaereses,cedillas,circumflexes,andsoon),andadditionalsymbols.
UTF-8(UnicodeTransformationFormat,8-bitform)isavariable-widthcharacterencoding
thatencodes16-bitUnicodecharactersasonetofourbytes.AbyteinUTF-8isequivalentto7-bitASCIIifitshigh-orderbitiszero;otherwise,thecharactercomprisesavariablenumberof
bytes.
UTF-8iscompatiblewiththemajorityofexistingwebcontentandprovidesaccesstothe
Unicodecharacterset.CurrentversionsofbrowsersandemailclientssupportUTF-8.Inaddition,manynewwebstandardsspecifyUTF-8astheircharacterencoding.Forexample,UTF-8isoneofthetworequiredencodingsforXMLdocuments(theotherisUTF-16).
Webcomponentsusuallyuse PrintWriter toproduceresponses; PrintWriter automatically
encodesusingISO-8859-1.Servletscanalsooutputbinarydatausing OutputStream classes,
whichperformnoencoding.Anapplicationthatusesacharactersetthatcannotusethedefaultencodingmustexplicitlysetadifferentencoding.CharacterSetsandEncodings
TheJavaEE6Tutorial • January2013 360
WebServices
PartIIIexploreswebservices.Thispartcontainsthefollowingchapters:
■Chapter18,“IntroductiontoWebServices”
■Chapter19,“BuildingWebServiceswithJAX-WS”
■Chapter20,“BuildingRESTfulWebServiceswithJAX-RS”
■Chapter21,“JAX-RS:AdvancedTopicsandExample”PART III
361
362
IntroductiontoWebServices
PartIIIofthetutorialdiscussesJavaEE6webservicestechnologies.Forthisbook,these
technologiesincludeJavaAPIforXMLWebServices(JAX-WS)andJavaAPIforRESTfulWebServices(JAX-RS).
Thefollowingtopicsareaddressedhere:
■“WhatAreWebServices?”onpage363
■“TypesofWebServices”onpage363
■“DecidingWhichTypeofWebServicetoUse”onpage366
WhatAreWebServices?
Webservices areclientandserverapplicationsthatcommunicateovertheWorldWideWeb’s
(WWW)HyperTextTransferProtocol(HTTP).AsdescribedbytheWorldWideWebConsortium(W3C),webservicesprovideastandardmeansofinteroperatingbetweensoftwareapplicationsrunningonavarietyofplatformsandframeworks.Webservicesarecharacterizedbytheirgreatinteroperabilityandextensibility,aswellastheirmachine-processabledescriptions,thankstotheuseofXML.Webservicescanbecombinedinalooselycoupledwaytoachievecomplexoperations.Programsprovidingsimpleservicescaninteractwitheachothertodeliversophisticatedadded-valueservices.
TypesofWebServices
Ontheconceptuallevel,aserviceisasoftwarecomponentprovidedthroughanetwork-accessibleendpoint.Theserviceconsumerandproviderusemessagestoexchangeinvocationrequestandresponseinformationintheformofself-containingdocumentsthatmakeveryfewassumptionsaboutthetechnologicalcapabilitiesofthereceiver.18CHAPTER 18
363
Onatechnicallevel,webservicescanbeimplementedinvariousways.Thetwotypesofweb
servicesdiscussedinthissectioncanbedistinguishedas“big”webservicesand“RESTful”webservices.
“Big”WebServices
InJavaEE6,JAX-WSprovidesthefunctionalityfor“big”webservices,whicharedescribedin
Chapter19,“BuildingWebServiceswithJAX-WS.” BigwebservicesuseXMLmessagesthat
followtheSimpleObjectAccessProtocol(SOAP)standard,anXMLlanguagedefiningamessagearchitectureandmessageformats.Suchsystemsoftencontainamachine-readabledescriptionoftheoperationsofferedbytheservice,writtenintheWebServicesDescriptionLanguage(WSDL),anXMLlanguagefordefininginterfacessyntactically.
TheSOAPmessageformatandtheWSDLinterfacedefinitionlanguagehavegained
widespreadadoption.Manydevelopmenttools,suchasNetBeansIDE,canreducethecomplexityofdevelopingwebserviceapplications.
ASOAP-baseddesignmustincludethefollowingelements.
■Aformalcontractmustbeestablishedtodescribetheinterfacethatthewebserviceoffers.
WSDLcanbeusedtodescribethedetailsofthecontract,whichmayincludemessages,operations,bindings,andthelocationofthewebservice.YoumayalsoprocessSOAPmessagesinaJAX-WSservicewithoutpublishingaWSDL.
■Thearchitecturemustaddresscomplexnonfunctionalrequirements.Manywebservicespecificationsaddresssuchrequirementsandestablishacommonvocabularyforthem.Examplesincludetransactions,security,addressing,trust,coordination,andsoon.
■Thearchitectureneedstohandleasynchronousprocessingandinvocation.Insuchcases,theinfrastructureprovidedbystandards,suchasWebServicesReliableMessaging(WSRM),andAPIs,suchasJAX-WS,withtheirclient-sideasynchronousinvocationsupport,canbeleveragedoutofthebox.
RESTfulWebServices
InJavaEE6,JAX-RSprovidesthefunctionalityforRepresentationalStateTransfer(RESTful)webservices.RESTiswellsuitedforbasic,adhocintegrationscenarios.RESTfulwebservices,oftenbetterintegratedwithHTTPthanSOAP-basedservicesare,donotrequireXMLmessagesorWSDLservice–APIdefinitions.
ProjectJerseyistheproduction-readyreferenceimplementationfortheJAX-RSspecification.
JerseyimplementssupportfortheannotationsdefinedintheJAX-RSspecification,makingiteasyfordeveloperstobuildRESTfulwebserviceswithJavaandtheJavaVirtualMachine(JVM).TypesofWebServices
TheJavaEE6Tutorial • January2013 364
BecauseRESTfulwebservicesuseexistingwell-knownW3CandInternetEngineeringTask
Force(IETF)standards(HTTP,XML,URI,MIME)andhavealightweightinfrastructurethatallowsservicestobebuiltwithminimaltooling,developingRESTfulwebservicesisinexpensiveandthushasaverylowbarrierforadoption.YoucanuseadevelopmenttoolsuchasNetBeansIDEtofurtherreducethecomplexityofdevelopingRESTfulwebservices.
ARESTfuldesignmaybeappropriatewhenthefollowingconditionsaremet.
■Thewebservicesarecompletelystateless.Agoodtestistoconsiderwhethertheinteraction
cansurvivearestartoftheserver.
■Acachinginfrastructurecanbeleveragedforperformance.Ifthedatathatthewebservicereturnsisnotdynamicallygeneratedandcanbecached,thecachinginfrastructurethatwebserversandotherintermediariesinherentlyprovidecanbeleveragedtoimproveperformance.However,thedevelopermusttakecarebecausesuchcachesarelimitedtotheHTTP GETmethodformostservers.
■Theserviceproducerandserviceconsumerhaveamutualunderstandingofthecontextand
contentbeingpassedalong.Becausethereisnoformalwaytodescribethewebservicesinterface,bothpartiesmustagreeoutofbandontheschemasthatdescribethedatabeingexchangedandonwaystoprocessitmeaningfully.Intherealworld,mostcommercialapplicationsthatexposeservicesasRESTfulimplementationsalsodistributeso-calledvalue-addedtoolkitsthatdescribetheinterfacestodevelopersinpopularprogramminglanguages.
■Bandwidthisparticularlyimportantandneedstobelimited.RESTisparticularlyusefulforlimited-profiledevices,suchasPDAsandmobilephones,forwhichtheoverheadofheadersandadditionallayersofSOAPelementsontheXMLpayloadmustberestricted.
■WebservicedeliveryoraggregationintoexistingwebsitescanbeenabledeasilywithaRESTfulstyle.DeveloperscanusesuchtechnologiesasJAX-RSandAsynchronousJavaScriptwithXML(AJAX)andsuchtoolkitsasDirectWebRemoting(DWR)toconsumetheservicesintheirwebapplications.Ratherthanstartingfromscratch,servicescanbeexposedwithXMLandconsumedbyHTMLpageswithoutsignificantlyrefactoringtheexistingwebsitearchitecture.Existingdeveloperswillbemoreproductivebecausetheyareaddingtosomethingtheyarealreadyfamiliarwithratherthanhavingtostartfromscratchwithnewtechnology.
RESTfulwebservicesarediscussedin
Chapter20,“BuildingRESTfulWebServiceswith
JAX-RS.” ThischaptercontainsinformationaboutgeneratingtheskeletonofaRESTfulweb
serviceusingbothNetBeansIDEandtheMavenprojectmanagementtool.TypesofWebServices
Chapter18 • IntroductiontoWebServices 365
DecidingWhichTypeofWebServicetoUse
Basically,youwouldwanttouseRESTfulwebservicesforintegrationoverthewebandusebig
webservicesinenterpriseapplicationintegrationscenariosthathaveadvancedqualityofservice(QoS)requirements.
■JAX-WS:addressesadvancedQoSrequirementscommonlyoccurringinenterprise
computing.WhencomparedtoJAX-RS,JAX-WSmakesiteasiertosupporttheWS-*setofprotocols,whichprovidestandardsforsecurityandreliability,amongotherthings,andinteroperatewithotherWS-*conformingclientsandservers.
■JAX-RS:makesiteasiertowritewebapplicationsthatapplysomeoralloftheconstraintsof
theRESTstyletoinducedesirablepropertiesintheapplication,suchasloosecoupling(evolvingtheserveriseasierwithoutbreakingexistingclients),scalability(startsmallandgrow),andarchitecturalsimplicity(useoff-the-shelfcomponents,suchasproxiesorHTTProuters).YouwouldchoosetouseJAX-RSforyourwebapplicationbecauseitiseasierformanytypesofclientstoconsumeRESTfulwebserviceswhileenablingtheserversidetoevolveandscale.Clientscanchoosetoconsumesomeorallaspectsoftheserviceandmashitupwithotherweb-basedservices.
Note–Foranarticlethatprovidesmorein-depthanalysisofthisissue,see“RESTfulWeb
Servicesvs.“Big”WebServices:MakingtheRightArchitecturalDecision,”byCesarePautasso,OlafZimmermann,andFrankLeymannfrom
WWW’08:Proceedingsofthe17thInternational
ConferenceontheWorldWideWeb (2008),pp.805–814( http://www2008.org/papers/pdf/
p805-pautassoA.pdf ).DecidingWhichTypeofWebServicetoUse
TheJavaEE6Tutorial • January2013 366
BuildingWebServiceswithJAX-WS
JavaAPIforXMLWebServices(JAX-WS)isatechnologyforbuildingwebservicesandclients
thatcommunicateusingXML.JAX-WSallowsdeveloperstowritemessage-orientedaswellasRemoteProcedureCall-oriented(RPC-oriented)webservices.
InJAX-WS,awebserviceoperationinvocationisrepresentedbyanXML-basedprotocol,such
asSOAP.TheSOAPspecificationdefinestheenvelopestructure,encodingrules,andconventionsforrepresentingwebserviceinvocationsandresponses.ThesecallsandresponsesaretransmittedasSOAPmessages(XMLfiles)overHTTP.
AlthoughSOAPmessagesarecomplex,theJAX-WSAPIhidesthiscomplexityfromthe
applicationdeveloper.Ontheserverside,thedeveloperspecifiesthewebserviceoperationsbydefiningmethodsinaninterfacewrittenintheJavaprogramminglanguage.Thedeveloperalsocodesoneormoreclassesthatimplementthosemethods.Clientprogramsarealsoeasytocode.Aclientcreatesaproxy(alocalobjectrepresentingtheservice)andthensimplyinvokesmethodsontheproxy.WithJAX-WS,thedeveloperdoesnotgenerateorparseSOAPmessages.ItistheJAX-WSruntimesystemthatconvertstheAPIcallsandresponsestoandfromSOAPmessages.
WithJAX-WS,clientsandwebserviceshaveabigadvantage:theplatformindependenceofthe
Javaprogramminglanguage.Inaddition,JAX-WSisnotrestrictive:AJAX-WSclientcanaccessawebservicethatisnotrunningontheJavaplatform,andviceversa.ThisflexibilityispossiblebecauseJAX-WSusestechnologiesdefinedbytheW3C:HTTP,SOAP,andWSDL.WSDLspecifiesanXMLformatfordescribingaserviceasasetofendpointsoperatingonmessages.
Note–SeveralfilesintheJAX-WSexamplesdependontheportthatyouspecifiedwhenyou
installedtheGlassFishServer.Thesetutorialexamplesassumethattheserverrunsonthedefaultport,8080.Theydonotrunwithanondefaultportsetting.19CHAPTER 19
367
Thefollowingtopicsareaddressedhere:
■“CreatingaSimpleWebServiceandClientswithJAX-WS”onpage368
■“TypesSupportedbyJAX-WS”onpage377
■“WebServicesInteroperabilityandJAX-WS”onpage379
■“FurtherInformationaboutJAX-WS”onpage379
CreatingaSimpleWebServiceandClientswithJAX-WS
Thissectionshowshowtobuildanddeployasimplewebserviceandtwoclients:anapplication
clientandawebclient.Thesourcecodefortheserviceisinthetut-install /examples/jaxws/helloservice/ directory,andtheclientsareinthe
tut-install /examples/jaxws/appclient/ andtut-install /examples/jaxws/webclient/
directories.
Figure19–1 illustrateshowJAX-WStechnologymanagescommunicationbetweenaweb
serviceandaclient.
ThestartingpointfordevelopingaJAX-WSwebserviceisaJavaclassannotatedwiththe
javax.jws.WebService annotation.The @WebService annotationdefinestheclassasaweb
serviceendpoint.
Aserviceendpointinterface orserviceendpointimplementation (SEI)isaJavainterfaceorclass,
respectively,thatdeclaresthemethodsthataclientcaninvokeontheservice.AninterfaceisnotrequiredwhenbuildingaJAX-WSendpoint.ThewebserviceimplementationclassimplicitlydefinesanSEI.
Youmayspecifyanexplicitinterfacebyaddingthe endpointInterface elementtothe
@WebService annotationintheimplementationclass.Youmustthenprovideaninterfacethat
definesthepublicmethodsmadeavailableintheendpointimplementationclass.
Thebasicstepsforcreatingawebserviceandclientareasfollows:
1. Codetheimplementationclass.
2. Compiletheimplementationclass.3. PackagethefilesintoaWARfile.FIGURE19–1 CommunicationbetweenaJAX-WSWebServiceandaClient
SOAP 
MessageClient
JAX-WS RuntimeWeb Service
JAX-WS RuntimeCreatingaSimpleWebServiceandClientswithJAX-WS
TheJavaEE6Tutorial • January2013 368
4. DeploytheWARfile.Thewebserviceartifacts,whichareusedtocommunicatewithclients,
aregeneratedbytheGlassFishServerduringdeployment.
5. Codetheclientclass.6. Usea wsimport Anttasktogenerateandcompilethewebserviceartifactsneededtoconnect
totheservice.
7. Compiletheclientclass.8. Runtheclient.
IfyouuseNetBeansIDEtocreateaserviceandclient,theIDEperformsthe wsimport taskfor
you.
Thesectionsthatfollowcoverthesestepsingreaterdetail.
RequirementsofaJAX-WSEndpoint
JAX-WSendpointsmustfollowtheserequirements.
■Theimplementingclassmustbeannotatedwitheitherthe javax.jws.WebService orthe
javax.jws.WebServiceProvider annotation.
■TheimplementingclassmayexplicitlyreferenceanSEIthroughthe endpointInterface
elementofthe @WebService annotationbutisnotrequiredtodoso.Ifno
endpointInterface isspecifiedin @WebService ,anSEIisimplicitlydefinedforthe
implementingclass.
■Thebusinessmethodsoftheimplementingclassmustbepublicandmustnotbedeclaredstaticorfinal.
■Businessmethodsthatareexposedtowebserviceclientsmustbeannotatedwith
javax.jws.WebMethod .
■BusinessmethodsthatareexposedtowebserviceclientsmusthaveJAXB-compatible
parametersandreturntypes.SeethelistofJAXBdefaultdatatypebindingsat
http://docs.oracle.com/javaee/5/tutorial/doc/bnazq.html#bnazs .
■Theimplementingclassmustnotbedeclared finalandmustnotbe abstract .
■Theimplementingclassmusthaveadefaultpublicconstructor.
■Theimplementingclassmustnotdefinethe finalize method.
■Theimplementingclassmayusethe javax.annotation.PostConstruct orthe
javax.annotation.PreDestroy annotationsonitsmethodsforlifecycleeventcallbacks.
The@PostConstruct methodiscalledbythecontainerbeforetheimplementingclass
beginsrespondingtowebserviceclients.
The@PreDestroy methodiscalledbythecontainerbeforetheendpointisremovedfrom
operation.CreatingaSimpleWebServiceandClientswithJAX-WS
Chapter19 • BuildingWebServiceswithJAX-WS 369
CodingtheServiceEndpointImplementationClass
Inthisexample,theimplementationclass, Hello,isannotatedasawebserviceendpointusing
the@WebService annotation. Hellodeclaresasinglemethodnamed sayHello ,annotatedwith
the@WebMethod annotation,whichexposestheannotatedmethodtowebserviceclients.The
sayHello methodreturnsagreetingtotheclient,usingthenamepassedtoittocomposethe
greeting.Theimplementationclassalsomustdefineadefault,public,no-argumentconstructor.
package helloservice.endpoint;
import javax.jws.WebService;
import javax.jws.WebMethod;
@WebService
public class Hello {
private String message = new String( "Hello, ");
public void Hello() {
}
@WebMethod
public String sayHello(String name) {
return message + name + ".";
}
}
Building,Packaging,andDeployingtheService
YoucanuseeitherNetBeansIDEorAnttobuild,package,anddeploythe helloservice
application.
▼ToBuild,Package,andDeploytheServiceUsingNetBeansIDE
FromtheFilemenu,chooseOpenProject.
IntheOpenProjectdialog,navigateto:
tut-install /examples/jaxws/
Selectthe helloservice folder.
SelecttheOpenasMainProjectcheckbox.ClickOpenProject.1
2
3
45CreatingaSimpleWebServiceandClientswithJAX-WS
TheJavaEE6Tutorial • January2013 370
IntheProjectstab,right-clickthe helloservice projectandselectDeploy.
Thiscommandbuildsandpackagestheapplicationinto helloservice.war ,locatedin
tut-install /examples/jaxws/helloservice/dist/ ,anddeploysthisWARfiletotheGlassFish
Server.
YoucanviewtheWSDLfileofthedeployedservicebyrequestingtheURL
http://localhost:8080/helloservice/HelloService?wsdl inawebbrowser.Nowyouare
readytocreateaclientthataccessesthisservice.
▼ToBuild,Package,andDeploytheServiceUsingAnt
Inaterminalwindow,goto:
tut-install /examples/jaxws/helloservice/
Typethefollowingcommand:
ant
Thiscommandcallsthe defaulttarget,whichbuildsandpackagestheapplicationintoaWAR
file,helloservice.war ,locatedinthe distdirectory.
MakesurethattheGlassFishServerisstarted.Typethefollowing:
ant deploy
YoucanviewtheWSDLfileofthedeployedservicebyrequestingtheURL
http://localhost:8080/helloservice/HelloService?wsdl inawebbrowser.Nowyouare
readytocreateaclientthataccessesthisservice.
TestingtheMethodsofaWebServiceEndpoint
GlassFishServerallowsyoutotestthemethodsofawebserviceendpoint.
▼ToTesttheServicewithoutaClient
Totestthe sayHello methodof HelloService ,followthesesteps.
OpenthewebservicetestinterfacebytypingthefollowingURLinawebbrowser:
http://localhost:8080/helloservice/HelloService?Tester
UnderMethods,typeanameastheparametertothe sayHello method.6
NextSteps
1
2
3
4
NextSteps
1
2CreatingaSimpleWebServiceandClientswithJAX-WS
Chapter19 • BuildingWebServiceswithJAX-WS 371
Clickthe sayHello button.
Thistakesyoutothe sayHello Methodinvocationpage.
Under Method returned ,you’llseetheresponsefromtheendpoint.
ASimpleJAX-WSApplicationClient
TheHelloAppClient classisastand-aloneapplicationclientthataccessesthe sayHello
methodof HelloService .Thiscallismadethroughaport,alocalobjectthatactsasaproxyfor
theremoteservice.Theportiscreatedatdevelopmenttimebythe wsimport task,which
generatesJAX-WSportableartifactsbasedonaWSDLfile.
CodingtheApplicationClient
Wheninvokingtheremotemethodsontheport,theclientperformsthesesteps:
1. Usesthegenerated helloservice.endpoint.HelloService class,whichrepresentsthe
serviceattheURIofthedeployedservice’sWSDLfile:
import helloservice.endpoint.HelloService;
import javax.xml.ws.WebServiceRef;
public class HelloAppClient {
@WebServiceRef(wsdlLocation =
"META-INF/wsdl/localhost_8080/helloservice/HelloService.wsdl ")
private static HelloService service;
2. Retrievesaproxytotheservice,alsoknownasaport,byinvoking getHelloPort onthe
service:
helloservice.endpoint.Hello port = service.getHelloPort();
TheportimplementstheSEIdefinedbytheservice.
3. Invokestheport’s sayHello method,passingastringtotheservice:
return port.sayHello(arg0);
Hereisthefullsourceof HelloAppClient ,whichislocatedinthefollowingdirectory:
tut-install /examples/jaxws/appclient/src/appclient/
package appclient;
import helloservice.endpoint.HelloService;
import javax.xml.ws.WebServiceRef;
public class HelloAppClient {
@WebServiceRef(wsdlLocation =
"META-INF/wsdl/localhost_8080/helloservice/HelloService.wsdl ")
private static HelloService service;3CreatingaSimpleWebServiceandClientswithJAX-WS
TheJavaEE6Tutorial • January2013 372
/**
* @param args the command line arguments*/
public static void main(String[] args) {
System.out.println(sayHello( "world "));
}
private static String sayHello(java.lang.String arg0) {
helloservice.endpoint.Hello port = service.getHelloPort();return port.sayHello(arg0);
}
}
RunningtheApplicationClient
YoucanuseeitherNetBeansIDEorAnttobuild,package,deploy,andrunthe appclient
application.Tobuildtheclient,youmustfirsthavedeployed helloservice ,asdescribedin
“Building,Packaging,andDeployingtheService”onpage370 .
▼ToRuntheApplicationClientUsingNetBeansIDE
FromtheFilemenu,chooseOpenProject.
IntheOpenProjectdialog,navigateto:
tut-install /examples/jaxws/
Selectthe appclient folder.
SelecttheOpenasMainProjectcheckbox.ClickOpenProject.IntheProjectstab,right-clickthe appclient projectandselectRun.
YouwillseetheoutputoftheapplicationclientintheOutputpane.
▼ToRuntheApplicationClientUsingAnt
Inaterminalwindow,goto:
tut-install /examples/jaxws/appclient/
Typethefollowingcommand:
ant
Thiscommandcallsthe defaulttarget,whichrunsthe wsimport taskandbuildsandpackages
theapplicationintoaJARfile, appclient.jar ,locatedinthe distdirectory.1
2
3
456
1
2CreatingaSimpleWebServiceandClientswithJAX-WS
Chapter19 • BuildingWebServiceswithJAX-WS 373
Typethefollowingcommand:
ant getclient
Thiscommanddeploysthe appclient.jar fileandretrievestheclientstubs.
Toruntheclient,typethefollowingcommand:
ant run
ASimpleJAX-WSWebClient
HelloServlet isaservletthat,liketheJavaclient,callsthe sayHello methodofthewebservice.
Liketheapplicationclient,itmakesthiscallthroughaport.
CodingtheServlet
Toinvokethemethodontheport,theclientperformsthesesteps:
1. Importsthe HelloService endpointandthe WebServiceRef annotation:
import helloservice.endpoint.HelloService;
...import javax.xml.ws.WebServiceRef;
2. DefinesareferencetothewebservicebyspecifyingtheWSDLlocation:
@WebServiceRef(wsdlLocation =
"WEB-INF/wsdl/localhost_8080/helloservice/HelloService.wsdl ")
3. Declaresthewebservice,thendefinesaprivatemethodthatcallsthe sayHello methodon
theport:
private HelloService service;
...private String sayHello(java.lang.String arg0) {
helloservice.endpoint.Hello port = service.getHelloPort();return port.sayHello(arg0);
}
4. Intheservlet,callsthisprivatemethod:
out.println( "<p>"+ sayHello( "world ")+"</p>");
Thesignificantpartsofthe HelloServlet codefollow.Thecodeislocatedinthe
tut-install /examples/jaxws/src/java/webclient/ directory.
package webclient;
import helloservice.endpoint.HelloService;
import java.io.IOException;import java.io.PrintWriter;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;3
4CreatingaSimpleWebServiceandClientswithJAX-WS
TheJavaEE6Tutorial • January2013 374
import javax.servlet.http.HttpServletResponse;
import javax.xml.ws.WebServiceRef;
@WebServlet(name= "HelloServlet ", urlPatterns={ "/HelloServlet "})
public class HelloServlet extends HttpServlet {
@WebServiceRef(wsdlLocation =
"WEB-INF/wsdl/localhost_8080/helloservice/HelloService.wsdl ")
private HelloService service;
/**
* Processes requests for both HTTP <code>GET</code>* and <code>POST</code> methods.* @param request servlet request* @param response servlet response* @throws ServletException if a servlet-specific error occurs* @throws IOException if an I/O error occurs*/
protected void processRequest(HttpServletRequest request,
HttpServletResponse response)
throws ServletException, IOException {
response.setContentType( "text/html;charset=UTF-8 ");
PrintWriter out = response.getWriter();try {
out.println( "<html lang=\ "en\">");
out.println( "<head> ");
out.println( "<title>Servlet HelloServlet</title> ");
out.println( "</head> ");
out.println( "<body> ");
out.println( "<h1>Servlet HelloServlet at "+
request.getContextPath () + "</h1> ");
out.println( "<p>"+ sayHello( "world ")+"</p>");
out.println( "</body> ");
out.println( "</html> ");
} finally {
out.close();
}
}
// doGet and doPost methods, which call processRequest, and
// getServletInfo method
private String sayHello(java.lang.String arg0) {
helloservice.endpoint.Hello port = service.getHelloPort();return port.sayHello(arg0);
}
}
RunningtheWebClient
YoucanuseeitherNetBeansIDEorAnttobuild,package,deploy,andrunthe webclient
application.Tobuildtheclient,youmustfirsthavedeployed helloservice ,asdescribedin
“Building,Packaging,andDeployingtheService”onpage370 .CreatingaSimpleWebServiceandClientswithJAX-WS
Chapter19 • BuildingWebServiceswithJAX-WS 375
▼ToRuntheWebClientUsingNetBeansIDE
FromtheFilemenu,chooseOpenProject.
IntheOpenProjectdialog,navigateto:
tut-install /examples/jaxws/
Selectthe webclient folder.
SelecttheOpenasMainProjectcheckbox.ClickOpenProject.IntheProjectstab,right-clickthe webclient projectandselectDeploy.
Thistaskrunsthe wsimport tasks,buildsandpackagestheapplicationintoaWARfile,
webclient.war ,locatedinthe distdirectory,anddeploysittotheserver.
Inawebbrowser,navigatetothefollowingURL:
http://localhost:8080/webclient/HelloServlet
Theoutputofthe sayHello methodappearsinthewindow.
▼ToRuntheWebClientUsingAnt
Inaterminalwindow,goto:
tut-install /examples/jaxws/webclient/
Typethefollowingcommand:
ant
Thiscommandcallsthe defaulttarget,whichrunsthe wsimport tasks,thenbuildsand
packagestheapplicationintoaWARfile, webclient.war ,locatedinthe distdirectory.
Typethefollowingcommand:
ant deploy
ThistaskdeploystheWARfiletotheserver.Inawebbrowser,navigatetothefollowingURL:
http://localhost:8080/webclient/HelloServlet
Theoutputofthe sayHello methodappearsinthewindow.1
2
3
456
7
1
2
3
4CreatingaSimpleWebServiceandClientswithJAX-WS
TheJavaEE6Tutorial • January2013 376
TypesSupportedbyJAX-WS
JAX-WSdelegatesthemappingofJavaprogramminglanguagetypestoandfromXML
definitionstoJAXB.Applicationdevelopersdon’tneedtoknowthedetailsofthesemappingsbutshouldbeawarethatnoteveryclassintheJavalanguagecanbeusedasamethodparameterorreturntypeinJAX-WS.
Thefollowingsectionsexplainthedefaultschema-to-JavaandJava-to-schemadatatype
bindings.
Schema-to-JavaMapping
TheJavalanguageprovidesarichersetofdatatypethanXMLschema. Table19–1 liststhe
mappingofXMLdatatypestoJavadatatypesinJAXB.
TABLE19–1 JAXBMappingofXMLSchemaBuilt-inDataTypes
XMLSchemaType JavaDataType
xsd:string java.lang.String
xsd:integer java.math.BigIntegerxsd:int intxsd.long longxsd:short shortxsd:decimal java.math.BigDecimalxsd:float floatxsd:double doublexsd:boolean booleanxsd:byte bytexsd:QName javax.xml.namespace.QNamexsd:dateTime javax.xml.datatype.XMLGregorianCalendarxsd:base64Binary byte[]xsd:hexBinary byte[]xsd:unsignedInt longxsd:unsignedShort intxsd:unsignedByte shortTypesSupportedbyJAX-WS
Chapter19 • BuildingWebServiceswithJAX-WS 377
TABLE19–1 JAXBMappingofXMLSchemaBuilt-inDataTypes (Continued)
XMLSchemaType JavaDataType
xsd:time javax.xml.datatype.XMLGregorianCalendar
xsd:date javax.xml.datatype.XMLGregorianCalendarxsd:g javax.xml.datatype.XMLGregorianCalendarxsd:anySimpleType java.lang.Objectxsd:anySimpleType java.lang.Stringxsd:duration javax.xml.datatype.Durationxsd:NOTATION javax.xml.namespace.QName
Java-to-SchemaMapping
Table19–2 showsthedefaultmappingofJavaclassestoXMLdatatypes.
TABLE19–2 JAXBMappingofXMLDataTypestoJavaClasses
JavaClass XMLDataType
java.lang.String xs:stringjava.math.BigInteger xs:integerjava.math.BigDecimal xs:decimaljava.util.Calendar xs:dateTimejava.util.Date xs:dateTimejavax.xml.namespace.QName xs:QNamejava.net.URI xs:stringjavax.xml.datatype.XMLGregorianCalendar xs:anySimpleTypejavax.xml.datatype.Duration xs:durationjava.lang.Object xs:anyTypejava.awt.Image xs:base64Binaryjavax.activation.DataHandler xs:base64Binaryjavax.xml.transform.Source xs:base64Binaryjava.util.UUID xs:stringTypesSupportedbyJAX-WS
TheJavaEE6Tutorial • January2013 378
WebServicesInteroperabilityandJAX-WS
JAX-WSsupportstheWebServicesInteroperability(WS-I)BasicProfileVersion1.1.TheWS-I
BasicProfileisadocumentthatclarifiestheSOAP1.1andWSDL1.1specificationstopromoteSOAPinteroperability.ForlinksrelatedtoWS-I,see
“FurtherInformationaboutJAX-WS”on
page379.
TosupportWS-IBasicProfileVersion1.1,theJAX-WSruntimesupportsdoc/literaland
rpc/literalencodingsforservices,staticports,dynamicproxies,andtheDynamicInvocationInterface(DII).
FurtherInformationaboutJAX-WS
FormoreinformationaboutJAX-WSandrelatedtechnologies,see
■JavaAPIforXMLWebServices2.2specification:
http://jcp.org/aboutJava/communityprocess/mrel/jsr224/index4.html
■JAX-WShome:
http://jax-ws.java.net/
■SimpleObjectAccessProtocol(SOAP)1.2W3CNote:
http://www.w3.org/TR/soap/
■WebServicesDescriptionLanguage(WSDL)1.1W3CNote:
http://www.w3.org/TR/wsdl
■WS-IBasicProfile1.1:
http://www.ws-i.orgFurtherInformationaboutJAX-WS
Chapter19 • BuildingWebServiceswithJAX-WS 379
380
BuildingRESTfulWebServiceswithJAX-RS
ThischapterdescribestheRESTarchitecture,RESTfulwebservices,andtheJavaAPIfor
RESTfulWebServices(JAX-RS,definedinJSR311).
Jersey,thereferenceimplementationofJAX-RS,implementssupportfortheannotations
definedinJSR311,makingiteasyfordeveloperstobuildRESTfulwebservicesbyusingtheJavaprogramminglanguage.
IfyouaredevelopingwithGlassFishServer,youcaninstalltheJerseysamplesand
documentationbyusingtheUpdateTool.InstructionsforusingtheUpdateToolcanbefoundin
“JavaEE6TutorialComponent”onpage70 .TheJerseysamplesanddocumentationare
providedintheAvailableAdd-onsareaoftheUpdateTool.
Thefollowingtopicsareaddressedhere:
■“WhatAreRESTfulWebServices?”onpage381
■“CreatingaRESTfulRootResourceClass”onpage382
■“ExampleApplicationsforJAX-RS”onpage396
■“FurtherInformationaboutJAX-RS”onpage401
WhatAreRESTfulWebServices?
RESTfulwebservices arebuilttoworkbestontheWeb.RepresentationalStateTransfer(REST)
isanarchitecturalstylethatspecifiesconstraints,suchastheuniforminterface,thatifappliedtoawebserviceinducedesirableproperties,suchasperformance,scalability,andmodifiability,thatenableservicestoworkbestontheWeb.IntheRESTarchitecturalstyle,dataandfunctionalityareconsideredresourcesandareaccessedusing UniformResourceIdentifiers
(URIs),typicallylinksontheWeb.Theresourcesareacteduponbyusingasetofsimple,
well-definedoperations.TheRESTarchitecturalstyleconstrainsanarchitecturetoaclient/serverarchitectureandisdesignedtouseastatelesscommunicationprotocol,typicallyHTTP.IntheRESTarchitecturestyle,clientsandserversexchangerepresentationsofresourcesbyusingastandardizedinterfaceandprotocol.20CHAPTER 20
381
ThefollowingprinciplesencourageRESTfulapplicationstobesimple,lightweight,andfast:
■ResourceidentificationthroughURI :ARESTfulwebserviceexposesasetofresources
thatidentifythetargetsoftheinteractionwithitsclients.ResourcesareidentifiedbyURIs,whichprovideaglobaladdressingspaceforresourceandservicediscovery.See
“The @Path
AnnotationandURIPathTemplates”onpage385 formoreinformation.
■Uniforminterface :Resourcesaremanipulatedusingafixedsetoffourcreate,read,update,
deleteoperations: PUT,GET,POST,and DELETE.PUTcreatesanewresource,whichcanbethen
deletedbyusing DELETE.GETretrievesthecurrentstateofaresourceinsomerepresentation.
POSTtransfersanewstateontoaresource.See “RespondingtoHTTPMethodsand
Requests”onpage387 formoreinformation.
■Self-descriptivemessages :Resourcesaredecoupledfromtheirrepresentationsothattheir
contentcanbeaccessedinavarietyofformats,suchasHTML,XML,plaintext,PDF,JPEG,JSON,andothers.Metadataabouttheresourceisavailableandused,forexample,tocontrolcaching,detecttransmissionerrors,negotiatetheappropriaterepresentationformat,andperformauthenticationoraccesscontrol.See
“RespondingtoHTTPMethodsand
Requests”onpage387 and“UsingEntityProviderstoMapHTTPResponseandRequest
EntityBodies”onpage389 formoreinformation.
■Statefulinteractionsthroughhyperlinks :Everyinteractionwitharesourceisstateless;that
is,requestmessagesareself-contained.Statefulinteractionsarebasedontheconceptofexplicitstatetransfer.Severaltechniquesexisttoexchangestate,suchasURIrewriting,cookies,andhiddenformfields.Statecanbeembeddedinresponsemessagestopointtovalidfuturestatesoftheinteraction.See
“UsingEntityProviderstoMapHTTPResponse
andRequestEntityBodies”onpage389 and“BuildingURIs”intheJAX-RSOverview
documentformoreinformation.
CreatingaRESTfulRootResourceClass
Rootresourceclasses arePOJOsthatareeitherannotatedwith @Pathorhaveatleastonemethod
annotatedwith @Pathorarequestmethoddesignator ,suchas @GET,@PUT,@POST,or@DELETE.
Resourcemethods aremethodsofaresourceclassannotatedwitharequestmethoddesignator.
ThissectionexplainshowtouseJAX-RStoannotateJavaclassestocreateRESTfulwebservices.
DevelopingRESTfulWebServiceswithJAX-RS
JAX-RSisaJavaprogramminglanguageAPIdesignedtomakeiteasytodevelopapplicationsthatusetheRESTarchitecture.
TheJAX-RSAPIusesJavaprogramminglanguageannotationstosimplifythedevelopmentof
RESTfulwebservices.DevelopersdecorateJavaprogramminglanguageclassfileswithJAX-RSannotationstodefineresourcesandtheactionsthatcanbeperformedonthoseresources.JAX-RSannotationsareruntimeannotations;therefore,runtimereflectionwillgeneratetheCreatingaRESTfulRootResourceClass
TheJavaEE6Tutorial • January2013 382
helperclassesandartifactsfortheresource.AJavaEEapplicationarchivecontainingJAX-RS
resourceclasseswillhavetheresourcesconfigured,thehelperclassesandartifactsgenerated,andtheresourceexposedtoclientsbydeployingthearchivetoaJavaEEserver.
Table20–1 listssomeoftheJavaprogrammingannotationsthataredefinedbyJAX-RS,witha
briefdescriptionofhoweachisused.FurtherinformationontheJAX-RSAPIscanbeviewedat
http://docs.oracle.com/javaee/6/api/ .
TABLE20–1 SummaryofJAX-RSAnnotations
Annotation Description
@Path The@Pathannotation’svalueisarelativeURIpathindicatingwheretheJavaclasswill
behosted:forexample, /helloworld .YoucanalsoembedvariablesintheURIsto
makeaURIpathtemplate.Forexample,youcouldaskforthenameofauserandpassittotheapplicationasavariableintheURI: /helloworld/{username} .
@GET The@GETannotationisarequestmethoddesignatorandcorrespondstothesimilarly
namedHTTPmethod.TheJavamethodannotatedwiththisrequestmethoddesignatorwillprocessHTTPGETrequests.ThebehaviorofaresourceisdeterminedbytheHTTPmethodtowhichtheresourceisresponding.
@POST The@POSTannotationisarequestmethoddesignatorandcorrespondstothesimilarly
namedHTTPmethod.TheJavamethodannotatedwiththisrequestmethoddesignatorwillprocessHTTPPOSTrequests.ThebehaviorofaresourceisdeterminedbytheHTTPmethodtowhichtheresourceisresponding.
@PUT The@PUTannotationisarequestmethoddesignatorandcorrespondstothesimilarly
namedHTTPmethod.TheJavamethodannotatedwiththisrequestmethoddesignatorwillprocessHTTPPUTrequests.ThebehaviorofaresourceisdeterminedbytheHTTPmethodtowhichtheresourceisresponding.
@DELETE The@DELETEannotationisarequestmethoddesignatorandcorrespondstothe
similarlynamedHTTPmethod.TheJavamethodannotatedwiththisrequestmethoddesignatorwillprocessHTTPDELETErequests.ThebehaviorofaresourceisdeterminedbytheHTTPmethodtowhichtheresourceisresponding.
@HEAD The@HEADannotationisarequestmethoddesignatorandcorrespondstothesimilarly
namedHTTPmethod.TheJavamethodannotatedwiththisrequestmethoddesignatorwillprocessHTTPHEADrequests.ThebehaviorofaresourceisdeterminedbytheHTTPmethodtowhichtheresourceisresponding.
@PathParam The@PathParam annotationisatypeofparameterthatyoucanextractforuseinyour
resourceclass.URIpathparametersareextractedfromtherequestURI,andtheparameternamescorrespondtotheURIpathtemplatevariablenamesspecifiedinthe@Pathclass-levelannotation.
@QueryParam The@QueryParam annotationisatypeofparameterthatyoucanextractforuseinyour
resourceclass.QueryparametersareextractedfromtherequestURIqueryparameters.CreatingaRESTfulRootResourceClass
Chapter20 • BuildingRESTfulWebServiceswithJAX-RS 383
TABLE20–1 SummaryofJAX-RSAnnotations (Continued)
Annotation Description
@Consumes The@Consumes annotationisusedtospecifytheMIMEmediatypesofrepresentations
aresourcecanconsumethatweresentbytheclient.
@Produces The@Produces annotationisusedtospecifytheMIMEmediatypesofrepresentations
aresourcecanproduceandsendbacktotheclient:forexample, "text/plain ".
@Provider The@Provider annotationisusedforanythingthatisofinteresttotheJAX-RS
runtime,suchas MessageBodyReader andMessageBodyWriter .ForHTTPrequests,
theMessageBodyReader isusedtomapanHTTPrequestentitybodytomethod
parameters.Ontheresponseside,areturnvalueismappedtoanHTTPresponseentitybodybyusinga MessageBodyWriter .Iftheapplicationneedstosupplyadditional
metadata,suchasHTTPheadersoradifferentstatuscode,amethodcanreturnaResponse thatwrapstheentityandthatcanbebuiltusing
Response.ResponseBuilder .
OverviewofaJAX-RSApplication
ThefollowingcodesampleisaverysimpleexampleofarootresourceclassthatusesJAX-RS
annotations:
package com.sun.jersey.samples.helloworld.resources;
import javax.ws.rs.GET;
import javax.ws.rs.Produces;import javax.ws.rs.Path;
// The Java class will be hosted at the URI path "/helloworld "
@Path( "/helloworld ")
public class HelloWorldResource {
// The Java method will process HTTP GET requests
@GET// The Java method will produce content identified by the MIME Media// type "text/plain "
@Produces( "text/plain ")
public String getClichedMessage() {
// Return some cliched textual contentreturn "Hello World ";
}
}CreatingaRESTfulRootResourceClass
TheJavaEE6Tutorial • January2013 384
Thefollowingsectionsdescribetheannotationsusedinthisexample.
■The@Pathannotation’svalueisarelativeURIpath.Intheprecedingexample,theJavaclass
willbehostedattheURIpath /helloworld .Thisisanextremelysimpleuseofthe @Path
annotation,withastaticURIpath.VariablescanbeembeddedintheURIs. URIpath
templates areURIswithvariablesembeddedwithintheURIsyntax.
■The@GETannotationisarequestmethoddesignator,alongwith @POST,@PUT,@DELETE,and
@HEAD,definedbyJAX-RSandcorrespondingtothesimilarlynamedHTTPmethods.Inthe
example,theannotatedJavamethodwillprocessHTTP GETrequests.Thebehaviorofa
resourceisdeterminedbytheHTTPmethodtowhichtheresourceisresponding.
■The@Produces annotationisusedtospecifytheMIMEmediatypesaresourcecanproduce
andsendbacktotheclient.Inthisexample,theJavamethodwillproducerepresentationsidentifiedbytheMIMEmediatype "text/plain ".
■The@Consumes annotationisusedtospecifytheMIMEmediatypesaresourcecanconsume
thatweresentbytheclient.TheexamplecouldbemodifiedtosetthemessagereturnedbythegetClichedMessage method,asshowninthiscodeexample:
@POST
@Consumes( "text/plain ")
public void postClichedMessage(String message) {
// Store the message
}
The@PathAnnotationandURIPathTemplates
The@PathannotationidentifiestheURIpathtemplatetowhichtheresourcerespondsandis
specifiedattheclassormethodlevelofaresource.The @Pathannotation’svalueisapartialURI
pathtemplaterelativetothebaseURIoftheserveronwhichtheresourceisdeployed,thecontextrootoftheapplication,andtheURLpatterntowhichtheJAX-RSruntimeresponds.
URIpathtemplatesareURIswithvariablesembeddedwithintheURIsyntax.Thesevariables
aresubstitutedatruntimeinorderforaresourcetorespondtoarequestbasedonthesubstitutedURI.Variablesaredenotedbybraces( {and}).Forexample,lookatthefollowing
@Pathannotation:
@Path( "/users/{username} ")
Inthiskindofexample,auserispromptedtotypehisorhername,andthenaJAX-RSweb
serviceconfiguredtorespondtorequeststothisURIpathtemplateresponds.Forexample,iftheusertypestheusername“Galileo,”thewebservicerespondstothefollowingURL:
http://example.com/users/Galileo
Toobtainthevalueoftheusername,the @PathParam annotationmaybeusedonthemethod
parameterofarequestmethod,asshowninthefollowingcodeexample:CreatingaRESTfulRootResourceClass
Chapter20 • BuildingRESTfulWebServiceswithJAX-RS 385
@Path( "/users/{username} ")
public class UserResource {
@GET
@Produces( "text/xml ")
public String getUser(@PathParam( "username ") String userName) {
...
}
}
Bydefault,theURIvariablemustmatchtheregularexpression "[^/]+? ".Thisvariablemaybe
customizedbyspecifyingadifferentregularexpressionafterthevariablename.Forexample,ifausernamemustconsistonlyoflowercaseanduppercasealphanumericcharacters,overridethedefaultregularexpressioninthevariabledefinition:
@Path( "users/{username: [a-zA-Z][a-zA-Z_0-9]*} ")
Inthisexamplethe username variablewillmatchonlyusernamesthatbeginwithone
uppercaseorlowercaseletterandzeroormorealphanumericcharactersandtheunderscorecharacter.Ifausernamedoesnotmatchthattemplate,a404(NotFound)responsewillbesenttotheclient.
A@Pathvalueisn’trequiredtohaveleadingortrailingslashes(/).TheJAX-RSruntimeparses
URIpathtemplatesthesamewhetherornottheyhaveleadingortrailingspaces.
AURIpathtemplatehasoneormorevariables,witheachvariablenamesurroundedbybraces:
{tobeginthevariablenameand }toendit.Intheprecedingexample, username isthevariable
name.Atruntime,aresourceconfiguredtorespondtotheprecedingURIpathtemplatewillattempttoprocesstheURIdatathatcorrespondstothelocationof {username} intheURIas
thevariabledatafor username .
Forexample,ifyouwanttodeployaresourcethatrespondstotheURIpathtemplate
http://example.com/myContextRoot/resources/{name1}/{name2}/ ,youmustdeploythe
applicationtoaJavaEEserverthatrespondstorequeststothehttp://example.com/myContextRoot URIandthendecorateyourresourcewiththefollowing
@Pathannotation:
@Path( "/{name1}/{name2}/ ")
public class SomeResource {
...
}
Inthisexample,theURLpatternfortheJAX-RShelperservlet,specifiedin web.xml,isthe
default:
<servlet-mapping>
<servlet-name>My JAX-RS Resource</servlet-name><url-pattern>/resources/*</url-pattern>
</servlet-mapping>
AvariablenamecanbeusedmorethanonceintheURIpathtemplate.CreatingaRESTfulRootResourceClass
TheJavaEE6Tutorial • January2013 386
IfacharacterinthevalueofavariablewouldconflictwiththereservedcharactersofaURI,the
conflictingcharactershouldbesubstitutedwithpercentencoding.Forexample,spacesinthevalueofavariableshouldbesubstitutedwith %20.
WhendefiningURIpathtemplates,becarefulthattheresultingURIaftersubstitutionisvalid.
Table20–2 listssomeexamplesofURIpathtemplatevariablesandhowtheURIsareresolved
aftersubstitution.Thefollowingvariablenamesandvaluesareusedintheexamples:
■name1:james
■name2:gatz
■name3:
■location :Main%20Street
■question :why
Note–Thevalueofthe name3variableisanemptystring.
TABLE20–2 ExamplesofURIPathTemplates
URIPathTemplate URIAfterSubstitution
http://example.com/{name1}/{name2}/ http://example.com/james/gatz/
http://example.com/{question}/
{question}/{question}/http://example.com/why/why/why/
http://example.com/maps/{location} http://example.com/maps/Main%20Street
http://example.com/{name3}/home/ http://example.com//home/
RespondingtoHTTPMethodsandRequests
ThebehaviorofaresourceisdeterminedbytheHTTPmethods(typically, GET,POST,PUT,
DELETE)towhichtheresourceisresponding.
TheRequestMethodDesignatorAnnotations
Requestmethoddesignatorannotationsareruntimeannotations,definedbyJAX-RS,that
correspondtothesimilarlynamedHTTPmethods.Withinaresourceclassfile,HTTPmethodsaremappedtoJavaprogramminglanguagemethodsbyusingtherequestmethoddesignatorannotations.ThebehaviorofaresourceisdeterminedbywhichHTTPmethodtheresourceisrespondingto.JAX-RSdefinesasetofrequestmethoddesignatorsforthecommonHTTPmethods @GET,@POST,@PUT,@DELETE,and @HEAD;youcanalsocreateyourowncustomrequest
methoddesignators.Creatingcustomrequestmethoddesignatorsisoutsidethescopeofthisdocument.CreatingaRESTfulRootResourceClass
Chapter20 • BuildingRESTfulWebServiceswithJAX-RS 387
Thefollowingexample,anextractfromthestorageservicesample,showstheuseofthe PUT
methodtocreateorupdateastoragecontainer:
@PUT
public Response putContainer() {
System.out.println( "PUT CONTAINER "+ container);
URI uri = uriInfo.getAbsolutePath();
Containe r c = new Container(container, uri.toString());
Response r;
if (!MemoryStore.MS.hasContainer(c)) {
r = Response.created(uri).build();
} else {
r = Response.noContent().build();
}
MemoryStore.MS.createContainer(c);
return r;
}
Bydefault,theJAX-RSruntimewillautomaticallysupportthemethods HEADandOPTIONSifnot
explicitlyimplemented.For HEAD,theruntimewillinvoketheimplemented GETmethod,if
present,andignoretheresponseentity,ifset.For OPTIONS,the Allowresponseheaderwillbe
settothesetofHTTPmethodssupportedbytheresource.Inaddition,theJAX-RSruntimewillreturnaWebApplicationDefinitionLanguage(WADL)documentdescribingtheresource;see
http://www.w3.org/Submission/wadl/ formoreinformation.
Methodsdecoratedwithrequestmethoddesignatorsmustreturn void,aJavaprogramming
languagetype,ora javax.ws.rs.core.Response object.Multipleparametersmaybeextracted
fromtheURIbyusingthe @PathParam or@QueryParam annotationsasdescribedin “Extracting
RequestParameters”onpage392 .ConversionbetweenJavatypesandanentitybodyisthe
responsibilityofanentityprovider,suchas MessageBodyReader orMessageBodyWriter .
MethodsthatneedtoprovideadditionalmetadatawitharesponseshouldreturnaninstanceoftheResponse class.The ResponseBuilder classprovidesaconvenientwaytocreatea Response
instanceusingabuilderpattern.TheHTTP PUTandPOSTmethodsexpectanHTTPrequest
body,soyoushouldusea MessageBodyReader formethodsthatrespondto PUTandPOST
requests.
Both @PUTand@POSTcanbeusedtocreateorupdatearesource. POSTcanmeananything,so
whenusing POST,itisuptotheapplicationtodefinethesemantics. PUThaswell-defined
semantics.Whenusing PUTforcreation,theclientdeclarestheURIforthenewlycreated
resource.
PUThasveryclearsemanticsforcreatingandupdatingaresource.Therepresentationtheclient
sendsmustbethesamerepresentationthatisreceivedusinga GET,giventhesamemediatype.
PUTdoesnotallowaresourcetobepartiallyupdated,acommonmistakewhenattemptingto
usethe PUTmethod.Acommonapplicationpatternistouse POSTtocreatearesourceand
returna 201responsewithalocationheaderwhosevalueistheURItothenewlycreated
resource.Inthispattern,thewebservicedeclarestheURIforthenewlycreatedresource.CreatingaRESTfulRootResourceClass
TheJavaEE6Tutorial • January2013 388
UsingEntityProviderstoMapHTTPResponseandRequestEntity
Bodies
Entityproviders supplymappingservicesbetweenrepresentationsandtheirassociatedJava
types.Thetwotypesofentityprovidersare MessageBodyReader andMessageBodyWriter .For
HTTPrequests,the MessageBodyReader isusedtomapanHTTPrequestentitybodyto
methodparameters.Ontheresponseside,areturnvalueismappedtoanHTTPresponseentitybodybyusinga MessageBodyWriter .Iftheapplicationneedstosupplyadditionalmetadata,
suchasHTTPheadersoradifferentstatuscode,amethodcanreturna Response thatwrapsthe
entityandthatcanbebuiltbyusing Response.ResponseBuilder .
Table20–3 showsthestandardtypesthataresupportedautomaticallyforHTTPrequestand
responseentitybodies.Youneedtowriteanentityprovideronlyifyouarenotchoosingoneof
thesestandardtypes.
TABLE20–3 TypesSupportedforHTTPRequestandResponseEntityBodies
JavaType SupportedMediaTypes
byte[] Allmediatypes( */*)
java.lang.String Alltextmediatypes( text/*)
java.io.InputStream Allmediatypes( */*)
java.io.Reader Allmediatypes( */*)
java.io.File Allmediatypes( */*)
javax.activation.DataSource Allmediatypes( */*)
javax.xml.transform.Source XMLmediatypes( text/xml ,application/xml ,and
application/*+xml )
javax.xml.bind.JAXBElement and
application-suppliedJAXBclassesXMLmediatypes( text/xml ,application/xml ,and
application/*+xml )
MultivaluedMap<String, String> Formcontent
(application/x-www-form-urlencoded )
StreamingOutput Allmediatypes( */*),MessageBodyWriter only
Thefollowingexampleshowshowtouse MessageBodyReader withthe @Consumes and
@Provider annotations:
@Consumes( "application/x-www-form-urlencoded ")
@Providerpublic class FormReader implements MessageBodyReader<NameValuePair> {
Thefollowingexampleshowshowtouse MessageBodyWriter withthe @Produces and
@Provider annotations:CreatingaRESTfulRootResourceClass
Chapter20 • BuildingRESTfulWebServiceswithJAX-RS 389
@Produces( "text/html ")
@Providerpublic class FormWriter implements
MessageBodyWriter<Hashtable<String, String>> {
Thefollowingexampleshowshowtouse ResponseBuilder :
@GET
public Response getItem() {
System.out.println( "GET ITEM "+ container + ""+ item);
Item i = MemoryStore.MS.getItem(container, item);
if (i == null)
throw new NotFoundException( "Item not found ");
Date lastModified = i.getLastModified().getTime();EntityTag et = new EntityTag(i.getDigest());ResponseBuilder rb = request.evaluatePreconditions(lastModified, et);if (rb != null)
return rb.build();
byte[ ] b = MemoryStore.MS.getItemData(container, item);
return Response.ok(b, i.getMimeType()).
lastModified(lastModified).tag(et).build();
}
Using@Consumesand@ProducestoCustomize
RequestsandResponses
TheinformationsenttoaresourceandthenpassedbacktotheclientisspecifiedasaMIME
mediatypeintheheadersofanHTTPrequestorresponse.YoucanspecifywhichMIMEmediatypesofrepresentationsaresourcecanrespondtoorproducebyusingthefollowingannotations:
■javax.ws.rs.Consumes
■javax.ws.rs.Produces
Bydefault,aresourceclasscanrespondtoandproduceallMIMEmediatypesof
representationsspecifiedintheHTTPrequestandresponseheaders.
The@Produces Annotation
The@Produces annotationisusedtospecifytheMIMEmediatypesorrepresentationsa
resourcecanproduceandsendbacktotheclient.If @Produces isappliedattheclasslevel,all
themethodsinaresourcecanproducethespecifiedMIMEtypesbydefault.Ifappliedatthemethodlevel,theannotationoverridesany @Produces annotationsappliedattheclasslevel.
IfnomethodsinaresourceareabletoproducetheMIMEtypeinaclientrequest,theJAX-RS
runtimesendsbackanHTTP“406NotAcceptable”error.
Thevalueof @Produces isanarrayof StringofMIMEtypes.Forexample:CreatingaRESTfulRootResourceClass
TheJavaEE6Tutorial • January2013 390
@Produces({ "image/jpeg,image/png "})
Thefollowingexampleshowshowtoapply @Produces atboththeclassandmethodlevels:
@Path( "/myResource ")
@Produces( "text/plain ")
public class SomeResource {
@GETpublic String doGetAsPlainText() {
...
}
@GET
@Produces( "text/html ")
public String doGetAsHtml() {
...
}
}
ThedoGetAsPlainText methoddefaultstotheMIMEmediatypeofthe @Produces annotation
attheclasslevel.The doGetAsHtml method’s @Produces annotationoverridestheclass-level
@Produces settingandspecifiesthatthemethodcanproduceHTMLratherthanplaintext.
IfaresourceclassiscapableofproducingmorethanoneMIMEmediatype,theresource
methodchosenwillcorrespondtothemostacceptablemediatypeasdeclaredbytheclient.Morespecifically,the AcceptheaderoftheHTTPrequestdeclareswhatismostacceptable.For
example,ifthe Acceptheaderis Accept: text/plain ,the doGetAsPlainText methodwillbe
invoked.Alternatively,ifthe Acceptheaderis Accept: text/plain;q=0.9, text/html ,which
declaresthattheclientcanacceptmediatypesof text/plain andtext/html butprefersthe
latter,the doGetAsHtml methodwillbeinvoked.
Morethanonemediatypemaybedeclaredinthesame @Produces declaration.Thefollowing
codeexampleshowshowthisisdone:
@Produces({ "application/xml ","application/json "})
public String doGetAsXmlOrJson() {
...
}
ThedoGetAsXmlOrJson methodwillgetinvokedifeitherofthemediatypes application/xml
andapplication/json isacceptable.Ifbothareequallyacceptable,theformerwillbechosen
becauseitoccursfirst.TheprecedingexamplesreferexplicitlytoMIMEmediatypesforclarity.Itispossibletorefertoconstantvalues,whichmayreducetypographicalerrors.Formoreinformation,seetheconstantfieldvaluesof MediaType at
http://jsr311.java.net/nonav/
releases/1.0/javax/ws/rs/core/MediaType.html .
The@Consumes Annotation
The@Consumes annotationisusedtospecifywhichMIMEmediatypesofrepresentationsa
resourcecanaccept,orconsume,fromtheclient.If @Consumes isappliedattheclasslevel,allthe
responsemethodsacceptthespecifiedMIMEtypesbydefault.Ifappliedatthemethodlevel,@Consumes overridesany @Consumes annotationsappliedattheclasslevel.CreatingaRESTfulRootResourceClass
Chapter20 • BuildingRESTfulWebServiceswithJAX-RS 391
IfaresourceisunabletoconsumetheMIMEtypeofaclientrequest,theJAX-RSruntimesends
backanHTTP415(“UnsupportedMediaType”)error.
Thevalueof @Consumes isanarrayof StringofacceptableMIMEtypes.Forexample:
@Consumes({ "text/plain,text/html "})
Thefollowingexampleshowshowtoapply @Consumes atboththeclassandmethodlevels:
@Path( "/myResource ")
@Consumes( "multipart/related ")
public class SomeResource {
@POSTpublic String doPost(MimeMultipart mimeMultipartData) {
...
}
@POST
@Consumes( "application/x-www-form-urlencoded ")
public String doPost2(FormURLEncodedProperties formData) {
...
}
}
ThedoPostmethoddefaultstotheMIMEmediatypeofthe @Consumes annotationattheclass
level.The doPost2methodoverridestheclasslevel @Consumes annotationtospecifythatitcan
acceptURL-encodedformdata.
IfnoresourcemethodscanrespondtotherequestedMIMEtype,anHTTP415(“Unsupported
MediaType”)errorisreturnedtotheclient.
TheHelloWorld examplediscussedpreviouslyinthissectioncanbemodifiedtosetthe
messagebyusing @Consumes ,asshowninthefollowingcodeexample:
@POST
@Consumes( "text/plain ")
public void postClichedMessage(String message) {
// Store the message
}
Inthisexample,theJavamethodwillconsumerepresentationsidentifiedbytheMIMEmedia
type text/plain .Notethattheresourcemethodreturns void.Thismeansthatno
representationisreturnedandthataresponsewithastatuscodeofHTTP204(“NoContent”)willbereturned.
ExtractingRequestParameters
Parametersofaresourcemethodmaybeannotatedwithparameter-basedannotationstoextractinformationfromarequest.Apreviousexamplepresentedtheuseofthe @PathParam
parametertoextractapathparameterfromthepathcomponentoftherequestURLthatmatchedthepathdeclaredin @Path.CreatingaRESTfulRootResourceClass
TheJavaEE6Tutorial • January2013 392
Youcanextractthefollowingtypesofparametersforuseinyourresourceclass:
■Query
■URIpath
■Form
■Cookie
■Header
■Matrix
Queryparameters areextractedfromtherequestURIqueryparametersandarespecifiedby
usingthe javax.ws.rs.QueryParam annotationinthemethodparameterarguments.The
followingexample,fromthe sparklines sampleapplication,demonstratesusing @QueryParam
toextractqueryparametersfromthe QuerycomponentoftherequestURL:
@Path( "smooth ")
@GETpublic Response smooth(
@DefaultValue( "2") @QueryParam( "step") int step,
@DefaultValue( "true") @QueryParam( "min-m ") boolean hasMin,
@DefaultValue( "true") @QueryParam( "max-m ") boolean hasMax,
@DefaultValue( "true") @QueryParam( "last-m ") boolean hasLast,
@DefaultValue( "blue") @QueryParam( "min-color ") ColorParam minColor,
@DefaultValue( "green ") @QueryParam( "max-color ") ColorParam maxColor,
@DefaultValue( "red") @QueryParam( "last-color ") ColorParam lastColor
) { ... }
Ifthequeryparameter stepexistsinthequerycomponentoftherequestURI,thevalueof step
willbeextractedandparsedasa32-bitsignedintegerandassignedtothe stepmethod
parameter.If stepdoesnotexist,adefaultvalueof2,asdeclaredinthe @DefaultValue
annotation,willbeassignedtothe stepmethodparameter.Ifthe stepvaluecannotbeparsed
asa32-bitsignedinteger,anHTTP400(“ClientError”)responseisreturned.
User-definedJavaprogramminglanguagetypesmaybeusedasqueryparameters.The
followingcodeexampleshowsthe ColorParam classusedintheprecedingqueryparameter
example:
public class ColorParam extends Color {
public ColorParam(String s) {
super(getRGB(s));
}
private static int getRGB(String s) {
if (s.charAt(0) == ’#’) {
try {
Colo r c = Color.decode( "0x"+ s.substring(1));
return c.getRGB();
} catch (NumberFormatException e) {
throw new WebApplicationException(400);
}
} else {
try {
Fiel d f = Color.class.getField(s);CreatingaRESTfulRootResourceClass
Chapter20 • BuildingRESTfulWebServiceswithJAX-RS 393
return ((Color)f.get(null)).getRGB();
} catch (Exception e) {
throw new WebApplicationException(400);
}
}
}
}
Theconstructorfor ColorParam takesasingle Stringparameter.
Both @QueryParam and@PathParam canbeusedonlyonthefollowingJavatypes:
■Allprimitivetypesexcept char
■Allwrapperclassesofprimitivetypesexcept Character
■Anyclasswithaconstructorthatacceptsasingle Stringargument
■Anyclasswiththestaticmethodnamed valueOf(String) thatacceptsasingle String
argument
■List<T>,Set<T>,orSortedSet<T> ,whereTmatchesthealreadylistedcriteria.Sometimes,
parametersmaycontainmorethanonevalueforthesamename.Ifthisisthecase,thesetypesmaybeusedtoobtainallvalues
If@DefaultValue isnotusedinconjunctionwith @QueryParam ,andthequeryparameterisnot
presentintherequest,thevaluewillbeanemptycollectionfor List,Set,orSortedSet ;nullfor
otherobjecttypes;andthedefaultforprimitivetypes.
URIpathparameters areextractedfromtherequestURI,andtheparameternamescorrespond
totheURIpathtemplatevariablenamesspecifiedinthe @Pathclass-levelannotation.URI
parametersarespecifiedusingthe javax.ws.rs.PathParam annotationinthemethod
parameterarguments.Thefollowingexampleshowshowtouse @Pathvariablesandthe
@PathParam annotationinamethod:
@Path( "/{username} ")
public class MyResourceBean {
...@GETpublic String printUsername(@PathParam( "username ") String userId) {
...
}
}
Intheprecedingsnippet,theURIpathtemplatevariablename username isspecifiedasa
parametertothe printUsername method.The @PathParam annotationissettothevariable
name username .Atruntime,before printUsername iscalled,thevalueof username isextracted
fromtheURIandcasttoa String.Theresulting Stringisthenavailabletothemethodasthe
userIdvariable.
IftheURIpathtemplatevariablecannotbecasttothespecifiedtype,theJAX-RSruntime
returnsanHTTP400(“BadRequest”)errortotheclient.Ifthe @PathParam annotationcannot
becasttothespecifiedtype,theJAX-RSruntimereturnsanHTTP404(“NotFound”)errortotheclient.CreatingaRESTfulRootResourceClass
TheJavaEE6Tutorial • January2013 394
The@PathParam parameterandtheotherparameter-basedannotations( @MatrixParam ,
@HeaderParam ,@CookieParam ,and @FormParam )obeythesamerulesas @QueryParam .
Cookieparameters ,indicatedbydecoratingtheparameterwith javax.ws.rs.CookieParam ,
extractinformationfromthecookiesdeclaredincookie-relatedHTTPheaders. Header
parameters ,indicatedbydecoratingtheparameterwith javax.ws.rs.HeaderParam ,extract
informationfromtheHTTPheaders. Matrixparameters ,indicatedbydecoratingtheparameter
with javax.ws.rs.MatrixParam ,extractinformationfromURLpathsegments.
Formparameters ,indicatedbydecoratingtheparameterwith javax.ws.rs.FormParam ,extract
informationfromarequestrepresentationthatisoftheMIMEmediatypeapplication/x-www-form-urlencoded andconformstotheencodingspecifiedbyHTML
forms,asdescribedin
http://www.w3.org/TR/html401/interact/
forms.html#h-17.13.4.1 .Thisparameterisveryusefulforextractinginformationsentby
POSTinHTMLforms.
Thefollowingexampleextractsthe nameformparameterfromthe POSTformdata:
@POST
@Consumes( "application/x-www-form-urlencoded ")
public void post(@FormParam( "name") String name) {
// Store the message
}
Toobtainageneralmapofparameternamesandvaluesforqueryandpathparameters,usethe
followingcode:
@GET
public String get(@Context UriInfo ui) {
MultivaluedMap<String, String> queryParams = ui.getQueryParameters();MultivaluedMap<String, String> pathParams = ui.getPathParameters();
}
Thefollowingmethodextractsheaderandcookieparameternamesandvaluesintoamap:
@GETpublic String get(@Context HttpHeaders hh) {
MultivaluedMap<String, String> headerParams = hh.getRequestHeaders();Map<String, Cookie> pathParams = hh.getCookies();
}
Ingeneral, @Context canbeusedtoobtaincontextualJavatypesrelatedtotherequestor
response.
Forformparameters,itispossibletodothefollowing:
@POST
@Consumes( "application/x-www-form-urlencoded ")
public void post(MultivaluedMap<String, String> formParams) {
// Store the message
}CreatingaRESTfulRootResourceClass
Chapter20 • BuildingRESTfulWebServiceswithJAX-RS 395
ExampleApplicationsforJAX-RS
Thissectionprovidesanintroductiontocreating,deploying,andrunningyourownJAX-RS
applications.Thissectiondemonstratesthestepsthatareneededtocreate,build,deploy,andtestaverysimplewebapplicationthatusesJAX-RSannotations.
ARESTfulWebService
ThissectionexplainshowtouseNetBeansIDEtocreateaRESTfulwebservice.NetBeansIDEgeneratesaskeletonfortheapplication,andyousimplyneedtoimplementtheappropriatemethods.IfyoudonotuseanIDE,tryusingoneoftheexampleapplicationsthatshipwithJerseyasatemplatetomodify.
Youcanfindaversionofthisapplicationat
tut-install /examples/jaxrs/HelloWorldApplication/ .
▼ToCreateaRESTfulWebServiceUsingNetBeansIDE
InNetBeansIDE,createasimplewebapplication.Thisexamplecreatesaverysimple“Hello,
World”webapplication.
a. FromtheFilemenu,chooseNewProject.b. FromCategories,selectJavaWeb.FromProjects,selectWebApplication.ClickNext.
Note–Forthisstep,youcouldalsocreateaRESTfulwebserviceinaMavenwebprojectby
selectingMavenasthecategoryandMavenWebProjectastheproject.Theremainingstepswouldbethesame.
c. Typeaprojectname, HelloWorldApplication ,andclickNext.
d. MakesurethattheServerisGlassFishServer(orsimilarwording).e. ClickFinish.
Theprojectiscreated.Thefile index.jsp appearsintheSourcepane.
Right-clicktheprojectandselectNew;thenselectRESTfulWebServicesfromPatterns.a. SelectSimpleRootResourceandclickNext.b. TypeaResourcePackagename,suchas helloWorld .1
2ExampleApplicationsforJAX-RS
TheJavaEE6Tutorial • January2013 396
c. Type helloworld inthePathfield.Type HelloWorld intheClassNamefield.ForMIMEType,
select text/html .
d. ClickFinish.
TheRESTResourcesConfigurationpageappears.
e. ClickOK.
Anewresource, HelloWorld.java ,isaddedtotheprojectandappearsintheSourcepane.
ThisfileprovidesatemplateforcreatingaRESTfulwebservice.
InHelloWorld.java ,findthe getHtml() method.Replacethe //TODOcommentandthe
exceptionwiththefollowingtext,sothatthefinishedproductresemblesthefollowingmethod.
Note–BecausetheMIMEtypeproducedisHTML,youcanuseHTMLtagsinyourreturn
statement.
/**
* Retrieves representation of an instance of helloWorld.HelloWorld* @return an instance of java.lang.String*/
@GET@Produces( "text/html ")
public String getHtml() {
return "<html lang=\ "en\"><body><h1>Hello, World!!</body></h1></html> ";
}
Testthewebservice.Todothis,right-clicktheprojectnodeandclickTestRESTfulWebServices.
Thisstepdeploystheapplicationandbringsupatestclientinthebrowser.
Whenthetestclientappears,selectthe helloworld resourceintheleftpane,andclicktheTest
buttonintherightpane.
Thewords Hello, World!! appearintheResponsewindowbelow.
SettheRunProperties:a. Right-clicktheprojectnodeandselectProperties.b. Inthedialog,selecttheRuncategory.c. SettheRelativeURLtothelocationoftheRESTfulwebservicerelativetotheContextPath,
whichforthisexampleis resources/helloworld .3
4
5
6ExampleApplicationsforJAX-RS
Chapter20 • BuildingRESTfulWebServiceswithJAX-RS 397
Tip–YoucanfindthevaluefortheRelativeURLintheTestRESTfulWebServicesbrowser
window.Inthetopoftherightpane,afterResource,istheURLfortheRESTfulwebservicebeingtested.ThepartfollowingtheContextPath( http://localhost:8080/HelloWorldApp )
istheRelativeURLthatneedstobeenteredhere.
Ifyoudon’tsetthisproperty,thefile index.jsp willappearbydefaultwhentheapplicationis
run.Asthisfilealsocontains Hello World asitsdefaultvalue,youmightnotnoticethatyour
RESTfulwebserviceisn’trunning,sojustbeawareofthisdefaultandtheneedtosetthisproperty,orupdate index.jsp toprovidealinktotheRESTfulwebservice.
Right-clicktheprojectandselectDeploy.
Right-clicktheprojectandselectRun.
Abrowserwindowopensanddisplaysthereturnvalueof Hello, World!!
ForothersampleapplicationsthatdemonstratedeployingandrunningJAX-RSapplications
usingNetBeansIDE,see “The rsvpExampleApplication”onpage398 andYourFirstCup:An
IntroductiontotheJavaEEPlatform athttp://docs.oracle.com/javaee/6/firstcup/doc/ .
YoumayalsolookatthetutorialsontheNetBeansIDEtutorialsite,suchastheonetitled“GettingStartedwithRESTfulWebServices”at
http://www.netbeans.org/kb/docs/websvc/
rest.html .ThistutorialincludesasectiononcreatingaCRUDapplicationfromadatabase.
Create,read,update,anddelete(CRUD)arethefourbasicfunctionsofpersistentstorageandrelationaldatabases.
ThersvpExampleApplication
Thersvpexampleapplication,locatedinthe tut-install /examples/jaxrs/rsvp/ directory,
allowsinviteestoaneventtoindicatewhethertheywillattend.Theevents,peopleinvitedtotheevent,andtheresponsestotheinvitearestoredinaJavaDBdatabaseusingtheJavaPersistence
API.TheJAX-RSresourcesin rsvpareexposedinastatelesssessionenterprisebean.
ComponentsofthersvpExampleApplication
Thethreeenterprisebeansinthe rsvpexampleapplicationare rsvp.ejb.ConfigBean ,
rsvp.ejb.StatusBean ,and rsvp.ejb.ResponseBean .
ConfigBean isasingletonsessionbeanthatinitializesthedatainthedatabase.
StatusBean exposesaJAX-RSresourcefordisplayingthecurrentstatusofallinviteestoan
event.TheURIpathtemplateisdeclaredasfollows:
@Path( "/status/{eventId}/ ")7
8
SeeAlsoExampleApplicationsforJAX-RS
TheJavaEE6Tutorial • January2013 398
TheURIpathvariable eventIdisa@PathParam variableinthe getResponse method,which
respondstoHTTP GETrequestsandhasbeenannotatedwith @GET.The eventIdvariableis
usedtolookupallthecurrentresponsesinthedatabaseforthatparticularevent.
ResponseBean exposesaJAX-RSresourceforsettinganinvitee’sresponsetoaparticularevent.
TheURIpathtemplatefor ResponseBean isdeclaredasfollows:
@Path( "/{eventId}/{inviteId} ")
TwoURIpathvariablesaredeclaredinthepathtemplate: eventIdandinviteId .Asin
StatusBean ,eventIdistheuniqueIDforaparticularevent.Eachinviteetothateventhasa
uniqueIDfortheinvitation,andthatisthe inviteId .Bothofthesepathvariablesareusedin
twoJAX-RSmethodsin ResponseBean :getResponse andputResponse .The getResponse
methodrespondstoHTTP GETrequestsanddisplaystheinvitee’scurrentresponseandaform
tochangetheresponse.
Aninviteewhowantstochangehisorherresponseselectsthenewresponseandsubmitsthe
formdata,whichisprocessedasanHTTP PUTrequestbythe putResponse method.Oneofthe
parameterstothe putResponse method,the userResponse string,isannotatedwith
@FormParam( "attendeeResponse ").TheHTMLformcreatedby getResponse storesthe
changedresponseintheselectlistwithanIDof attendeeResponse .Theannotation
@FormParam( "attendeeResponse ")indicatesthatthevalueoftheselectresponseisextracted
fromtheHTTP PUTrequestandstoredasthe userResponse string.The putResponse method
uses userResponse ,eventId,and inviteId toupdatetheinvitee’sresponseinthedatabase.
Theevents,people,andresponsesin rsvpareencapsulatedinJavaPersistenceAPIentities.The
rsvp.entity.Event ,rsvp.entity.Person ,and rsvp.entity.Response entitiesrespectively
representevents,invitees,andresponsestoanevent.
Thersvp.util.ResponseEnum classdeclaresanenumeratedtypethatrepresentsallthe
possibleresponsestatusesaninviteemayhave.
RunningthersvpExampleApplication
BothNetBeansIDEandAntcanbeusedtodeployandrunthe rsvpexampleapplication.
▼ToRunthersvpExampleApplicationinNetBeansIDE
FromtheFilemenu,chooseOpenProject.
IntheOpenProjectdialog,navigateto:
tut-install /examples/jaxrs/
Selectthe rsvpfolder.
SelecttheOpenasMainProjectcheckbox.1
2
3
4ExampleApplicationsforJAX-RS
Chapter20 • BuildingRESTfulWebServiceswithJAX-RS 399
ClickOpenProject.
Right-clickthe rsvpprojectintheleftpaneandselectRun.
Theprojectwillbecompiled,assembled,anddeployedtoGlassFishServer.Awebbrowser
windowwillopento http://localhost:8080/rsvp .
Inthewebbrowserwindow,clicktheEventStatuslinkfortheDuke’sBirthdayevent.
You’llseethecurrentinviteesandtheirresponses.
Clickonthenameofoneoftheinvitees,selectaresponse,andclickSubmitresponse;thenclick
Backtoeventpage.
Theinvitee’snewstatusshouldnowbedisplayedinthetableofinviteesandtheirresponse
statuses.
▼ToRunthersvpExampleApplicationUsingAnt
YoumusthavestartedtheJavaDBdatabasebeforerunning rsvp.
Inaterminalwindow,goto:
tut-install /examples/jaxrs/rsvp/
Typethefollowingcommand:
ant all
Thiscommandbuilds,assembles,anddeploys rsvptoGlassFishServer.
Openawebbrowserwindowto http://localhost:8080/rsvp .
Inthewebbrowserwindow,clicktheEventStatuslinkfortheDuke’sBirthdayevent.
You’llseethecurrentinviteesandtheirresponses.
Clickonthenameofoneoftheinvitees,selectaresponse,andclickSubmitresponse,thenclick
Backtoeventpage.
Theinvitee’snewstatusshouldnowbedisplayedinthetableofinviteesandtheirresponse
statuses.
Real-WorldExamples
MostblogsitesuseRESTfulwebservices.ThesesitesinvolvedownloadingXMLfiles,inRSSorAtomformat,thatcontainlistsoflinkstootherresources.OtherwebsitesandwebapplicationsthatuseREST-likedeveloperinterfacestodataincludeTwitterandAmazonS3(SimpleStorageService).WithAmazonS3,bucketsandobjectscanbecreated,listed,andretrievedusingeitheraREST-styleHTTPinterfaceoraSOAPinterface.TheexamplesthatshipwithJerseyincludea5
6
7
8
BeforeYouBegin
1
2
3
4
5ExampleApplicationsforJAX-RS
TheJavaEE6Tutorial • January2013 400
storageserviceexamplewithaRESTfulinterface.Thetutorialat http://netbeans.org/kb/
docs/websvc/twitter-swing.html usesNetBeansIDEtocreateasimple,graphical,
REST-basedclientthatdisplaysTwitterpublictimelinemessagesandletsyouviewandupdateyourTwitterstatus.
FurtherInformationaboutJAX-RS
FormoreinformationaboutRESTfulwebservicesandJAX-RS,see
■“RESTfulWebServicesvs.’Big’WebServices:MakingtheRightArchitecturalDecision”:
http://www2008.org/papers/pdf/p805-pautassoA.pdf
■“FieldingDissertation:Chapter5:RepresentationalStateTransfer(REST)”:
http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm
■RESTfulWebServices ,byLeonardRichardsonandSamRuby,availablefromO’ReillyMedia
athttp://oreilly.com/catalog/9780596529260/
■JSR311:JAX-RS:TheJavaAPIforRESTfulWebServices:
http://jcp.org/en/jsr/detail?id=311
■JAX-RSproject:
http://jsr311.java.net/
■Jerseyproject:
http://jersey.java.net/FurtherInformationaboutJAX-RS
Chapter20 • BuildingRESTfulWebServiceswithJAX-RS 401
402
JAX-RS:AdvancedTopicsandExample
TheJavaAPIforRESTfulWebServices(JAX-RS,definedinJSR311)isdesignedtomakeiteasy
todevelopapplicationsthatusetheRESTarchitecture.ThischapterdescribesadvancedfeaturesofJAX-RS.IfyouarenewtoJAX-RS,see
Chapter20,“BuildingRESTfulWebServices
withJAX-RS,” beforeyouproceedwiththischapter.
JAX-RSispartoftheJavaEE6fullprofile.JAX-RSisintegratedwithContextsandDependency
InjectionfortheJavaEEPlatform(CDI),EnterpriseJavaBeans(EJB)technology,andJavaServlettechnology.
Thefollowingtopicsareaddressedhere:
■“AnnotationsforFieldandBeanPropertiesofResourceClasses”onpage403
■“SubresourcesandRuntimeResourceResolution”onpage407
■“IntegratingJAX-RSwithEJBTechnologyandCDI”onpage408
■“ConditionalHTTPRequests”onpage409
■“RuntimeContentNegotiation”onpage410
■“UsingJAX-RSWithJAXB”onpage412
■“The customer ExampleApplication”onpage418
AnnotationsforFieldandBeanPropertiesofResourceClasses
JAX-RSannotationsforresourceclassesletyouextractspecificpartsorvaluesfromaUniform
ResourceIdentifier(URI)orrequestheader.
JAX-RSprovidestheannotationslistedin Table21–1 .
TABLE21–1 AdvancedJAX-RSAnnotations
Annotation Description
@Context Injectsinformationintoaclassfield,beanproperty,ormethodparameter21CHAPTER 21
403
TABLE21–1 AdvancedJAX-RSAnnotations (Continued)
Annotation Description
@CookieParam Extractsinformationfromcookiesdeclaredinthecookierequestheader
@FormParam Extractsinformationfromarequestrepresentationwhosecontenttypeis
application/x-www-form-urlencoded
@HeaderParam Extractsthevalueofaheader
@MatrixParam ExtractsthevalueofaURImatrixparameter
@PathParam ExtractsthevalueofaURItemplateparameter
@QueryParam ExtractsthevalueofaURIqueryparameter
ExtractingPathParameters
URIpathtemplatesareURIswithvariablesembeddedwithintheURIsyntax.The @PathParam
annotationletsyouusevariableURIpathfragmentswhenyoucallamethod.
Thefollowingcodesnippetshowshowtoextractthelastnameofanemployeewhenthe
employee’semailaddressisprovided:
@Path(/employees/ "{firstname}.{lastname}@{domain}.com ")
public class EmpResource {
@GET
@Produces( "text/xml ")
public String getEmployeelastname(@PathParam( "lastname ") String lastName) {
...
}
}
Inthisexample,the @PathannotationdefinestheURIvariables(orpathparameters)
{firstname} ,{lastname} ,and {domain} .The @PathParam inthemethodparameterofthe
requestmethodextractsthelastnamefromtheemailaddress.
IfyourHTTPrequestisGET /employees/john.doe@example.com ,thevalue“ doe”isinjected
into {lastname} .
YoucanspecifyseveralpathparametersinoneURI.AnnotationsforFieldandBeanPropertiesofResourceClasses
TheJavaEE6Tutorial • January2013 404
YoucandeclarearegularexpressionwithaURIvariable.Forexample,ifitisrequiredthatthe
lastnamemustconsistonlyofloweranduppercasecharacters,youcandeclarethefollowingregularexpression:
@Path(/employees/{ "firstname}.{lastname[a-zA-Z]*}@{domain}.com ")
Ifthelastnamedoesnotmatchtheregularexpression,a404responseisreturned.
ExtractingQueryParameters
Usethe @QueryParam annotationtoextractqueryparametersfromthequerycomponentofthe
requestURI.
Forinstance,toqueryallemployeeswhohavejoinedwithinaspecificrangeofyears,usea
methodsignaturelikethefollowing:
@Path(/employees/ ")
@GETpublic Response getEmployees(
@DefaultValue( "2002") @QueryParam( "minyear ") int minyear,
@DefaultValue( "2010") @QueryParam( "maxyear ") int maxyear)
{...}
Thiscodesnippetdefinestwoqueryparameters, minyearandmaxyear.ThefollowingHTTP
requestwouldqueryforallemployeeswhohavejoinedbetween1999and2009:
GET /employees?maxyear=2009&minyear=1999
The@DefaultValue annotationdefinesadefaultvalue,whichistobeusedifnovaluesare
providedforthequeryparameters.Bydefault,JAX-RSassignsanullvaluefor Objectvalues
andzeroforprimitivedatatypes.Youcanusethe @DefaultValue annotationtoeliminatenull
orzerovaluesanddefineyourowndefaultvaluesforaparameter.
ExtractingFormData
Usethe @FormParam annotationtoextractformparametersfromHTMLforms.Forexample,
thefollowingformacceptsthename,address,andmanager’snameofanemployee:
<FORM action= "http://example.com/employees/ "method= "post">
<p><fieldset>Employee name: <INPUT type= "text"name= "empname "tabindex= "1">
Employee address: <INPUT type= "text"name= "empaddress "tabindex= "2">
Manager name: <INPUT type= "text"name= "managername "tabindex= "3">
</fieldset></p></FORM>AnnotationsforFieldandBeanPropertiesofResourceClasses
Chapter21 • JAX-RS:AdvancedTopicsandExample 405
UsethefollowingcodesnippettoextractthemanagernamefromthisHTMLform:
@POST
@Consumes( "application/x-www-form-urlencoded ")
public void post(@FormParam( "managername ") String managername) {
// Store the value...
}
Toobtainamapofformparameternamestovalues,useacodesnippetlikethefollowing:
@POST@Consumes( "application/x-www-form-urlencoded ")
public void post(MultivaluedMap<String. String> formParams) {
// Store the message
}
ExtractingtheJavaTypeofaRequestorResponse
Thejavax.ws.rs.core.Context annotationretrievestheJavatypesrelatedtoarequestor
response.
Thejavax.ws.rs.core.UriInfo interfaceprovidesinformationaboutthecomponentsofa
requestURI.Thefollowingcodesnippetshowshowtoobtainamapofqueryandpathparameternamestovalues:
@GET
public String getParams(@Context UriInfo ui) {
MultivaluedMap<String, String> queryParams = ui.getQueryParameters();MultivaluedMap<String, String> pathParams = ui.getPathParameters();
}
Thejavax.ws.rs.core.HttpHeaders interfaceprovidesinformationaboutrequestheaders
andcookies.Thefollowingcodesnippetshowshowtoobtainamapofheaderandcookieparameternamestovalues:
@GET
public String getHeaders(@Context HttpHeaders hh) {
MultivaluedMap<String, String> headerParams = hh.getRequestHeaders();MultivaluedMap<String, Cookie> pathParams = hh.getCookies();
}AnnotationsforFieldandBeanPropertiesofResourceClasses
TheJavaEE6Tutorial • January2013 406
SubresourcesandRuntimeResourceResolution
YoucanusearesourceclasstoprocessonlyapartoftheURIrequest.Arootresourcecanthen
implementsubresourcesthatcanprocesstheremainderoftheURIpath.
Aresourceclassmethodthatisannotatedwith @Pathiseitherasubresourcemethodora
subresourcelocator:
■Asubresourcemethodisusedtohandlerequestsonasubresourceofthecorrespondingresource.
■Asubresourcelocatorisusedtolocatesubresourcesofthecorrespondingresource.
SubresourceMethods
Asubresourcemethod handlesanHTTPrequestdirectly.Themethodmustbeannotatedwitha
requestmethoddesignatorsuchas @GETor@POST,inadditionto @Path.Themethodisinvoked
forrequestURIsthatmatchaURItemplatecreatedbyconcatenatingtheURItemplateoftheresourceclasswiththeURItemplateofthemethod.
Thefollowingcodesnippetshowshowasubresourcemethodcanbeusedtoextractthelast
nameofanemployeewhentheemployee’semailaddressisprovided:
@Path( "/employeeinfo ")
Public class EmployeeInfo {
public employeeinfo() {}@GET
@Path( "/employees/{firstname}.{lastname}@{domain}.com ")
@Produces( "text/xml ")
public String getEmployeeLastName(@PathParam( "lastname ") String lastName) {
...
}
}
ThegetEmployeeLastName methodreturns doeforthefollowingGETrequest:
GET /employeeinfo/employees/john.doe@example.com
SubresourceLocators
Asubresourcelocator returnsanobjectthatwillhandleanHTTPrequest.Themethodmustnot
beannotatedwitharequestmethoddesignator.Youmustdeclareasubresourcelocatorwithinasubresourceclass,andonlysubresourcelocatorsareusedforruntimeresourceresolution.
Thefollowingcodesnippetshowsasubresourcelocator:SubresourcesandRuntimeResourceResolution
Chapter21 • JAX-RS:AdvancedTopicsandExample 407
// Root resource class
@Path( "/employeeinfo ")
public class EmployeeInfo {
// Subresource locator: obtains the subresource Employee
// from the path /employeeinfo/employees/{empid}@Path( "/employees/{empid} ")
public Employee getEmployee(@PathParam( "empid ") String id) {
// Find the Employee based on the id path parameterEmployee emp = ...;...return emp;
}
}
// Subresource class
public class Employee {
// Subresource method: returns the employee’s last name
@GET@Path( "/lastname ")
public String getEmployeeLastName() {
...return lastName
}
}
Inthiscodesnippet,the getEmployee methodisthesubresourcelocatorthatprovidesthe
Employee object,whichservicesrequestsfor lastname .
IfyourHTTPrequestis GET /employeeinfo/employees/as209/ ,the getEmployee method
returnsan Employee objectwhoseidis as209.Atruntime,JAX-RSsendsa GET
/employeeinfo/employees/as209/lastname requesttothe getEmployeeLastName method.
ThegetEmployeeLastName methodretrievesandreturnsthelastnameoftheemployeewhose
idisas209.
IntegratingJAX-RSwithEJBTechnologyandCDI
JAX-RSworkswithEnterpriseJavaBeanstechnology(enterprisebeans)andContextsand
DependencyInjectionfortheJavaEEPlatform(CDI).
Ingeneral,forJAX-RStoworkwithenterprisebeans,youneedtoannotatetheclassofabean
with @Pathtoconvertittoarootresourceclass.Youcanusethe @Pathannotationwithstateless
sessionbeansandsingletonPOJObeans.
Thefollowingcodesnippetshowsastatelesssessionbeanandasingletonbeanthathavebeen
convertedtoJAX-RSrootresourceclasses.
@Stateless
@Path( "stateless-bean ")
public class StatelessResource {...}IntegratingJAX-RSwithEJBTechnologyandCDI
TheJavaEE6Tutorial • January2013 408
@Singleton
@Path( "singleton-bean ")
public class SingletonResource {...}
Sessionbeanscanalsobeusedforsubresources.
JAX-RSandCDIhaveslightlydifferentcomponentmodels.Bydefault,JAX-RSrootresource
classesaremanagedintherequestscope,andnoannotationsarerequiredforspecifyingthescope.CDImanagedbeansannotatedwith @RequestScoped or@ApplicationScoped canbe
convertedtoJAX-RSresourceclasses.
ThefollowingcodesnippetshowsaJAX-RSresourceclass.
@Path( "/employee/{id} ")
public class Employee {
public Employee(@PathParam( "id") String id) {...}
}
@Path( "{lastname} ")
public final class EmpDetails {...}
ThefollowingcodesnippetshowsthisJAX-RSresourceclassconvertedtoaCDIbean.The
beansmustbeproxyable,sothe Employee classrequiresanon-privateconstructorwithno
parameters,andthe EmpDetails classmustnotbe final.
@Path( "/employee/{id} ")
@RequestScopedpublic class Employee {
public Employee() {...}
@Inject
public Employee(@PathParam( "id") String id) {...}
}
@Path( "{lastname} ")
@RequestScopedpublic class EmpDetails {...}
ConditionalHTTPRequests
JAX-RSprovidessupportforconditionalGETandPUTHTTPrequests.ConditionalGET
requestshelpsavebandwidthbyimprovingtheefficiencyofclientprocessing.
AGETrequestcanreturnaNotModified(304)responseiftherepresentationhasnotchanged
sincethepreviousrequest.Forexample,awebsitecanreturn304responsesforallitsstaticimagesthathavenotchangedsincethepreviousrequest.
APUTrequestcanreturnaPreconditionFailed(412)responseiftherepresentationhasbeen
modifiedsincethelastrequest.TheconditionalPUTcanhelpavoidthelostupdateproblem.
ConditionalHTTPrequestscanbeusedwiththe Last-Modified andETagheaders.The
Last-Modified headercanrepresentdateswithgranularityofonesecond.ConditionalHTTPRequests
Chapter21 • JAX-RS:AdvancedTopicsandExample 409
@Path( "/employee/{joiningdate} ")
public class Employee {
Date joiningdate;@GET
@Produces( "application/xml ")
public Employee(@PathParam( "joiningdate ") Date joiningdate,
@Context Request req,@Context UriInfo ui) {
this.joiningdate = joiningdate;
...this.tag = computeEntityTag(ui.getRequestUri());if (req.getMethod().equals( "GET")) {
Response.ResponseBuilder rb = req.evaluatePreconditions(tag);if (rb != null) {
throw new WebApplicationException(rb.build());
}
}
}
}
Inthiscodesnippet,theconstructorofthe Employee classcomputestheentitytagfromthe
requestURIandcallsthe request.evaluatePreconditions methodwiththattag.Ifaclient
requestreturnsan If-none-match headerwithavaluethathasthesameentitytagthatwas
computed, evaluate.Preconditions returnsapre-filled-outresponsewitha304statuscode
andanentitytagsetthatmaybebuiltandreturned.
RuntimeContentNegotiation
The@Produces and@Consumes annotationshandlestaticcontentnegotiationinJAX-RS.These
annotationsspecifythecontentpreferencesoftheserver.HTTPheaderssuchas Accept,
Content-Type ,and Accept-Language definethecontentnegotiationpreferencesoftheclient.
FormoredetailsontheHTTPheadersforcontentnegotiation,see HTTP/1.1-Content
Negotiation( http://www.w3.org/Protocols/rfc2616/rfc2616-sec12.html ).
Thefollowingcodesnippetshowstheservercontentpreferences:
@Produces( "text/plain ")
@Path( "/employee ")
public class Employee {
@GET
public String getEmployeeAddressText(String address) { ... }
@Produces( "text/xml ")
@GETpublic String getEmployeeAddressXml(Address address) { ... }
}
ThegetEmployeeAddressText methodiscalledforanHTTPrequestthatlooksasfollows:RuntimeContentNegotiation
TheJavaEE6Tutorial • January2013 410
GET /employee
Accept: text/plain
Thiswillproducethefollowingresponse:
500 Oracle Parkway, Redwood Shores, CA
ThegetEmployeeAddressXml methodiscalledforanHTTPrequestthatlooksasfollows:
GET /employee
Accept: text/xml
Thiswillproducethefollowingresponse:
<address street= "500 Oracle Parkway, Redwood Shores, CA "country= "USA"/>
Withstaticcontentnegotiation,youcanalsodefinemultiplecontentandmediatypesforthe
clientandserver.
@Produces( "text/plain ","text/xml ")
Inadditiontosupportingstaticcontentnegotiation,JAX-RSalsosupportsruntimecontent
negotiationusingthe javax.ws.rs.core.Variant classand Requestobjects.The Variant
classspecifiestheresourcerepresentationofcontentnegotiation.Eachinstanceofthe Variant
classmaycontainamediatype,alanguage,andanencoding.The Variantobjectdefinesthe
resourcerepresentationthatissupportedbytheserver.The Variant.VariantListBuilder
classisusedtobuildalistofrepresentationvariants.
Thefollowingcodesnippetshowshowtocreatealistofresourcerepresentationvariants:
List<Variant> vs =
Variant.mediatypes( "application/xml ","application/json ")
.languages( "en","fr").build();
Thiscodesnippetcallsthe buildmethodofthe VariantListBuilder class.The
VariantListBuilder classisinvokedwhenyoucallthe mediatypes ,languages ,orencodings
methods.The buildmethodbuildsaseriesofresourcerepresentations.The Variantlist
createdbythe buildmethodhasallpossiblecombinationsofitemsspecifiedinthe
mediatypes ,languages ,and encodings methods.RuntimeContentNegotiation
Chapter21 • JAX-RS:AdvancedTopicsandExample 411
Inthisexample,thesizeofthe vsobjectasdefinedinthiscodesnippetis4,andthecontentsare
asfollows:
[["application/xml ","en"], ["application/json ","en"],
["application/xml ","fr"],["application/json ","fr"]]
Thejavax.ws.rs.core.Request.selectVariant methodacceptsalistof Variantobjectsand
choosesthe VariantobjectthatmatchestheHTTPrequest.Thismethodcomparesitslistof
Variantobjectswiththe Accept,Accept-Encoding ,Accept-Language ,and Accept-Charset
headersoftheHTTPrequest.
Thefollowingcodesnippetshowshowtousethe selectVariant methodtoselectthemost
acceptable Variantfromthevaluesintheclientrequest.
@GET
public Response get(@Context Request r) {
List<Variant> vs = ...;Varian t v = r.selectVariant(vs);
if (v == null) {
return Response.notAcceptable(vs).build();
} else {
Object rep = selectRepresentation(v);return Response.ok(rep, v);
}
}
TheselectVariant methodreturnsthe Variantobjectthatmatchestherequest,ornullifno
matchesarefound.Inthiscodesnippet,ifthemethodreturnsnull,a Response objectfora
non-acceptableresponseisbuilt.Otherwise,a Response objectwithanOKstatusand
containingarepresentationintheformofan Objectentityanda Variantisreturned.
UsingJAX-RSWithJAXB
JavaArchitectureforXMLBinding(JAXB)isanXML-to-Javabindingtechnologythat
simplifiesthedevelopmentofwebservicesbyenablingtransformationsbetweenschemaandJavaobjectsandbetweenXMLinstancedocumentsandJavaobjectinstances.AnXMLschemadefinesthedataelementsandstructureofanXMLdocument.YoucanuseJAXBAPIsandtoolstoestablishmappingsbetweenJavaclassesandXMLschema.JAXBtechnologyprovidesthetoolsthatenableyoutoconvertyourXMLdocumentstoandfromJavaobjects.
ByusingJAXB,youcanmanipulatedataobjectsinthefollowingways:
■YoucanstartwithanXMLschemadefinition(XSD)anduse xjc,theJAXBschema
compilertool,tocreateasetofJAXB-annotatedJavaclassesthatmaptotheelementsandtypesdefinedintheXSDschema.
■YoucanstartwithasetofJavaclassesanduse schemagen ,theJAXBschemageneratortool,
togenerateanXMLschema.UsingJAX-RSWithJAXB
TheJavaEE6Tutorial • January2013 412
■OnceamappingbetweentheXMLschemaandtheJavaclassesexists,youcanusetheJAXB
bindingruntimetomarshalandunmarshalyourXMLdocumentstoandfromJavaobjectsandusetheresultingJavaclassestoassembleawebservicesapplication.
XMLisacommonmediaformatthatRESTfulservicesconsumeandproduce.Todeserialize
andserializeXML,youcanrepresentrequestsandresponsesbyJAXBannotatedobjects.YourJAX-RSapplicationcanusetheJAXBobjectstomanipulateXMLdata.JAXBobjectscanbeusedasrequestentityparametersandresponseentities.TheJAX-RSruntimeenvironmentincludesstandard MessageBodyReader andMessageBodyWriter providerinterfacesforreading
andwritingJAXBobjectsasentities.
WithJAX-RS,youenableaccesstoyourservicesbypublishingresources.Resourcesarejust
simpleJavaclasseswithsomeadditionalJAX-RSannotations.Theseannotationsexpressthefollowing:
■Thepathoftheresource(theURLyouusetoaccessit)
■TheHTTPmethodyouusetocallacertainmethod(forexample,theGETorPOSTmethod)
■TheMIMEtypewithwhichamethodacceptsorresponds
Asyoudefinetheresourcesforyourapplication,considerthetypeofdatayouwanttoexpose.
Youmayalreadyhavearelationaldatabasethatcontainsinformationyouwanttoexposetousers,oryoumayhavestaticcontentthatdoesnotresideinadatabasebutdoesneedtobedistributedasresources.UsingJAX-RS,youcandistributecontentfrommultiplesources.RESTfulwebservicescanusevarioustypesofinput/outputformatsforrequestandresponse.Thecustomer example,describedin
“The customer ExampleApplication”onpage418 ,uses
XML.
Resourceshaverepresentations.AresourcerepresentationisthecontentintheHTTPmessage
thatissentto,orreturnedfrom,theresourceusingtheURI.Eachrepresentationaresourcesupportshasacorrespondingmediatype.Forexample,ifaresourceisgoingtoreturncontentformattedasXML,youcanuse application/xml astheassociatedmediatypeintheHTTP
message.Dependingontherequirementsofyourapplication,resourcescanreturnrepresentationsinapreferredsingleformatorinmultipleformats.JAX-RSprovides @Consumes
and@Produces annotationstodeclarethemediatypesthatareacceptableforaresource
methodtoreadandwrite.
JAX-RSalsomapsJavatypestoandfromresourcerepresentationsusingentityproviders.A
MessageBodyReader entityproviderreadsarequestentityanddeserializestherequestentity
intoaJavatype.A MessageBodyWriter entityproviderserializesfromaJavatypeintoa
responseentity.Forexample,ifa Stringvalueisusedastherequestentityparameter,the
MessageBodyReader entityproviderdeserializestherequestbodyintoanew String.IfaJAXB
typeisusedasthereturntypeonaresourcemethod,the MessageBodyWriter serializesthe
JAXBobjectintoaresponsebody.UsingJAX-RSWithJAXB
Chapter21 • JAX-RS:AdvancedTopicsandExample 413
Bydefault,theJAX-RSruntimeenvironmentattemptstocreateanduseadefault JAXBContext
classforJAXBclasses.However,ifthedefault JAXBContext classisnotsuitable,thenyoucan
supplya JAXBContext classfortheapplicationusingaJAX-RS ContextResolver provider
interface.
ThefollowingsectionsexplainhowtouseJAXBwithJAX-RSresourcemethods.
UsingJavaObjectstoModelYourData
IfyoudonothaveanXMLschemadefinitionforthedatayouwanttoexpose,youcanmodel
yourdataasJavaclasses,addJAXBannotationstotheseclasses,anduseJAXBtogenerateanXMLschemaforyourdata.Forexample,ifthedatayouwanttoexposeisacollectionofproductsandeachproducthasanID,aname,adescription,andaprice,youcanmodelitasaJavaclassasfollows:
@XmlRootElement(name= "product ")
@XmlAccessorType(XmlAccessType.FIELD)public class Product {
@XmlElement(required=true)
protected int id;@XmlElement(required=true)protected String name;@XmlElement(required=true)protected String description;@XmlElement(required=true)protected int price;
public Product() {}// Getter and setter methods
// ...
}
RuntheJAXBschemageneratoronthecommandlinetogeneratethecorrespondingXML
schemadefinition:
schemagen Product.java
ThiscommandproducestheXMLschemaasan .xsdfile:
<?xml version= "1.0"encoding= "UTF-8 "standalone= "yes"?>
<xs:schema version= "1.0"xmlns:xs= "http://www.w3.org/2001/XMLSchema ">
<xs:element name= "product "type= "product "/>
<xs:complexType name= "product ">
<xs:sequence>
<xs:element name= "id"type= "xs:int "/>
<xs:element name= "name"type= "xs:string "/>
<xs:element name= "description "type= "xs:string "/>UsingJAX-RSWithJAXB
TheJavaEE6Tutorial • January2013 414
<xs:element name= "price "type= "xs:int "/>
</xs:sequence>
<xs:complexType>
</xs:schema>
Onceyouhavethismapping,youcancreate Productobjectsinyourapplication,returnthem,
andusethemasparametersinJAX-RSresourcemethods.TheJAX-RSruntimeusesJAXBtoconverttheXMLdatafromtherequestintoa Productobjectandtoconverta Productobject
intoXMLdatafortheresponse.Thefollowingresourceclassprovidesasimpleexample:
@Path( "/product ")
public class ProductService {
@GET@Path( "/get")
@Produces( "application/xml ")
public Product getProduct() {
Product prod = new Product();prod.setId(1);prod.setName( "Mattress ");
prod.setDescription( "Queen size mattress ");
prod.setPrice(500);return prod;
}
@POST
@Path( "/create ")
@Consumes( "application/xml ")
public Response createProduct(Product prod) {
// Process or store the product and return a response// ...
}
}
SomeIDEs,suchasNetBeansIDE,willruntheschemageneratortoolautomaticallyduringthe
buildprocessifyouaddJavaclassesthathaveJAXBannotationstoyourproject.Foradetailedexample,see
“The customer ExampleApplication”onpage418 .The customer example
containsamorecomplexrelationshipbetweentheJavaclassesthatmodelthedata,which
resultsinamorehierarchicalXMLrepresentation.
StartingfromanExistingXMLSchemaDefinition
IfyoualreadyhaveanXMLschemadefinitioninan .xsdfileforthedatayouwanttoexpose,
usetheJAXBschemacompilertool.Considerthissimpleexampleofan .xsdfile:
<?xml version= "1.0"?>
<xs:schema targetNamespace= "http://xml.product "
xmlns:xs= "http://www.w3.org/2001/XMLSchema "
elementFormDefault= "qualified "
xmlns:myco= "http://xml.product ">
<xs:element name= "product "type= "myco:Product "/>UsingJAX-RSWithJAXB
Chapter21 • JAX-RS:AdvancedTopicsandExample 415
<xs:complexType name= "Product ">
<xs:sequence>
<xs:element name= "id"type= "xs:int "/>
<xs:element name= "name"type= "xs:string "/>
<xs:element name= "description "type= "xs:string "/>
<xs:element name= "price "type= "xs:int "/>
</xs:sequence>
</xs:complexType>
</xs:schema>
Runtheschemacompilertoolonthecommandlineasfollows:
xjc Product.xsd
ThiscommandgeneratesthesourcecodeforJavaclassesthatcorrespondtothetypesdefinedin
the.xsdfile.TheschemacompilertoolgeneratesaJavaclassforeach complexType definedin
the.xsdfile.ThefieldsofeachgeneratedJavaclassarethesameastheelementsinsidethe
corresponding complexType ,andtheclasscontainsgetterandsettermethodsforthesefields.
Inthiscasetheschemacompilertoolgeneratestheclasses product.xml.Product and
product.xml.ObjectFactory .The ProductclasscontainsJAXBannotations,anditsfields
correspondtothoseinthe .xsddefinition:
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Product ", propOrder = {
"id",
"name",
"description ",
"price "
})public class Product {
protected int id;@XmlElement(required = true)protected String name;@XmlElement(required = true)protected String description;protected int price;
// Setter and getter methods
// ...
}
Youcancreateinstancesofthe Productclassfromyourapplication(forexample,froma
database).Thegeneratedclass product.xml.ObjectFactory containsamethodthatallowsyou
toconverttheseobjectstoJAXBelementsthatcanbereturnedasXMLinsideJAX-RSresourcemethods:
@XmlElementDecl(namespace = "http://xml.product ", name = "product ")
public JAXBElement<Product> createProduct(Product value) {
return new JAXBElement<Product>(_Product_QNAME, Product.class, null, value);
}
ThefollowingcodeshowshowtousethegeneratedclassestoreturnaJAXBelementasXMLin
aJAX-RSresourcemethod:UsingJAX-RSWithJAXB
TheJavaEE6Tutorial • January2013 416
@Path( "/product ")
public class ProductService {
@GET@Path( "/get")
@Produces( "application/xml ")
public JAXBElement<Product> getProduct() {
Product prod = new Product();prod.setId(1);prod.setName( "Mattress ");
prod.setDescription( "Queen size mattress ");
prod.setPrice(500);return new ObjectFactory().createProduct(prod);
}
}
For@POSTand@PUTresourcemethods,youcanusea Productobjectdirectlyasaparameter.
JAX-RSmapstheXMLdatafromtherequestintoa Productobject.
@Path( "/product ")
public class ProductService {
@GET// ...
@POST
@Path( "/create ")
@Consumes( "application/xml ")
public Response createProduct(Product prod) {
// Process or store the product and return a response// ...
}
}
SomeIDEs,suchasNetBeansIDE,willruntheschemacompilertoolautomaticallyduringthe
buildprocessifyouaddan .xsdfiletoyourprojectsources.Foradetailedexample,see
“ModifyingtheExampletoGenerateEntityClassesfromanExistingSchema”onpage426 .The
modified customer examplecontainsamorehierarchicalXMLschemadefinition,which
resultsinamorecomplexrelationshipbetweentheJavaclassesthatmodelthedata.
UsingJSONwithJAX-RSandJAXB
JAX-RScanautomaticallyreadandwriteXMLusingJAXB,butitcanalsoworkwithJSONdata.JSONisasimpletext-basedformatfordataexchangederivedfromJavaScript.Fortheexamplesabove,theXMLrepresentationofaproductis:
<?xml version= "1.0"encoding= "UTF-8 "?>
<product>
<id>1</id><name>Mattress</name><description>Queen size mattress</description><price>500</price>
</product>
TheequivalentJSONrepresentationis:UsingJAX-RSWithJAXB
Chapter21 • JAX-RS:AdvancedTopicsandExample 417
{
"id":"1",
"name":"Mattress ",
"description ":"Queen size mattress ",
"price ":500
}
Youcanaddtheformat application/json tothe @Produces annotationinresourcemethods
toproduceresponseswithJSONdata:
@GET
@Path( "/get")
@Produces({ "application/xml ","application/json "})
public Product getProduct() { ... }
InthisexamplethedefaultresponseisXML,buttheresponseisaJSONobjectiftheclient
makesa GETrequestthatincludesthisheader:
Accept: application/json
TheresourcemethodscanalsoacceptJSONdataforJAXBannotatedclasses:
@POST
@Path( "/create ")
@Consumes({ "application/xml ","application/json "})
public Response createProduct(Product prod) { ... }
TheclientshouldincludethefollowingheaderwhensubmittingJSONdatawitha POSTrequest:
Content-Type: application/json
Thecustomer ExampleApplication
Thissectiondescribeshowtobuildandrunthe customer sampleapplication.Thisexample
applicationisaRESTfulwebservicethatusesJAXBtoperformtheCreate,Read,Update,Delete(CRUD)operationsforaspecificentity.
Thecustomer sampleapplicationisinthe tut-install /examples/jaxrs/customer/ directory.
See
Chapter2,“UsingtheTutorialExamples,” forbasicinformationonbuildingandrunning
sampleapplications.Thecustomer ExampleApplication
TheJavaEE6Tutorial • January2013 418
Overviewofthe customer ExampleApplication
Thesourcefilesofthisapplicationareat tut-install /examples/jaxrs/customer/src/java/ .
Theapplicationhasthreeparts:
■TheCustomer andAddressentityclasses.Theseclassesmodelthedataoftheapplication
andcontainJAXBannotations.See “The Customer andAddressEntityClasses”onpage419
fordetails.
■TheCustomerService resourceclass.ThisclasscontainsJAX-RSresourcemethodsthat
performoperationson Customer instancesrepresentedasXMLorJSONdatausingJAXB.
See“The CustomerService Class”onpage422 fordetails.
■TheCustomerClientXML andCustomerClientJSON clientclasses.Theseclassestestthe
resourcemethodsofthewebserviceusingXMLandJSONrepresentationsof Customer
instances.See “The CustomerClientXML andCustomerClientJSON Classes”onpage424 for
details.
Thecustomer sampleapplicationshowsyouhowtomodelyourdataentitiesasJavaclasses
withJAXBannotations.TheJAXBschemageneratorproducesanequivalentXMLschemadefinitionfile( .xsd)foryourentityclasses.Theresultingschemaisusedtoautomatically
marshalandunmarshalentityinstancestoandfromXMLorJSONintheJAX-RSresourcemethods.
InsomecasesyoumayalreadyhaveanXMLschemadefinitionforyourentities.See
“ModifyingtheExampletoGenerateEntityClassesfromanExistingSchema”onpage426 for
instructionsonhowtomodifythe customer exampletomodelyourdatastartingfroman .xsd
fileandusingJAXBtogeneratetheequivalentJavaclasses.
TheCustomer andAddressEntityClasses
Thefollowingclassrepresentsacustomer’saddress:
@XmlRootElement(name= "address ")
@XmlAccessorType(XmlAccessType.FIELD)public class Address {
@XmlElement(required=true)
protected int number;
@XmlElement(required=true)
protected String street;
@XmlElement(required=true)
protected String city;
@XmlElement(required=true)
protected String state;Thecustomer ExampleApplication
Chapter21 • JAX-RS:AdvancedTopicsandExample 419
@XmlElement(required=true)
protected String zip;
@XmlElement(required=true)
protected String country;
public Address() { }// Getter and setter methods
// ...
}
The@XmlRootElement(name= "address ")annotationmapsthisclasstothe addressXML
element.The @XmlAccessorType(XmlAccessType.FIELD) annotationspecifiesthatallthe
fieldsofthisclassareboundtoXMLbydefault.The @XmlElement(required=true) annotation
specifiesthatanelementmustbepresentintheXMLrepresentation.
Thefollowingclassrepresentsacustomer:
@XmlRootElement(name= "customer ")
@XmlAccessorType(XmlAccessType.FIELD)public class Customer {
@XmlAttribute(required=true)
protected int id;
@XmlElement(required=true)
protected String firstname;
@XmlElement(required=true)
protected String lastname;
@XmlElement(required=true)
protected Address address;
@XmlElement(required=true)
protected String email;
@XmlElement (required=true)
protected String phone;
public Customer() { }
// Getter and setter methods
// ...
}
TheCustomer classcontainsthesameJAXBannotationsasthepreviousclass,exceptforthe
@XmlAttribute(required=true) annotation,whichmapsapropertytoanattributeofthe
XMLelementrepresentingtheclass.
TheCustomer classcontainsapropertywhosetypeisanotherentity,the Addressclass.This
mechanismallowsyoutodefineinJavacodethehierarchicalrelationshipsbetweenentitieswithouthavingtowritean .xsdfileyourself.Thecustomer ExampleApplication
TheJavaEE6Tutorial • January2013 420
JAXBgeneratesthefollowingXMLschemadefinitionforthetwoclassesabove:
<?xml version= "1.0"encoding= "UTF-8 "standalone= "yes"?>
<xs:schema version= "1.0"xmlns:xs= "http://www.w3.org/2001/XMLSchema ">
<xs:element name= "address "type= "address "/>
<xs:element name= "customer "type= "customer "/>
<xs:complexType name= "address ">
<xs:sequence>
<xs:element name= "number "type= "xs:int "/>
<xs:element name= "street "type= "xs:string "/>
<xs:element name= "city"type= "xs:string "/>
<xs:element name= "state "type= "xs:string "/>
<xs:element name= "zip"type= "xs:string "/>
<xs:element name= "country "type= "xs:string "/>
</xs:sequence>
</xs:complexType>
<xs:complexType name= "customer ">
<xs:sequence>
<xs:element name= "firstname "type= "xs:string "/>
<xs:element name= "lastname "type= "xs:string "/>
<xs:element ref= "address "/>
<xs:element name= "email "type= "xs:string "/>
<xs:element name= "phone "type= "xs:string "/>
</xs:sequence><xs:attribute name= "id"type= "xs:int "use="required "/>
</xs:complexType>
</xs:schema>
Thefile sample-input.xml inthetop-leveldirectoryoftheprojectcontainsanexampleofan
XMLrepresentationofacustomer:
<?xml version= "1.0"encoding= "UTF-8 "?>
<customer id= "1">
<firstname>Duke</firstname><lastname>OfJava</lastname><address>
<number>1</number><street>Duke’s Way</street><city>JavaTown</city><state>JA</state><zip>12345</zip><country>USA</country>
</address><email>duke@example.com</email><phone>123-456-7890</phone>
</customer>
Thefile sample-input.json containsanexampleofaJSONrepresentationofacustomer:
{
"@id":"1",
"firstname ":"Duke",
"lastname ":"OfJava ",Thecustomer ExampleApplication
Chapter21 • JAX-RS:AdvancedTopicsandExample 421
"address ":{
"number ":1 ,
"street ":"Duke’s Way ",
"city":"JavaTown ",
"state ":"JA",
"zip":"12345 ",
"country ":"USA"
},"email ":"duke@example.com ",
"phone ":"123-456-7890 "
}
TheCustomerService Class
TheCustomerService classhasa createCustomer methodthatcreatesacustomerresource
basedonthe Customer classandreturnsaURIforthenewresource.The persistmethod
emulatesthebehavioroftheJPAentitymanager.Thisexampleusesa java.util.Properties
filetostoredata.IfyouareusingthedefaultconfigurationofGlassFishServer,thepropertiesfileisatdomain-dir /CustomerDATA.txt .
@Path( "/Customer ")
public class CustomerService {
public static final String DATA_STORE = "CustomerDATA.txt ";
public static final Logger logger =
Logger.getLogger(CustomerService.class.getCanonicalName());
...
@POST
@Consumes({ "application/xml ","application/json "})
public Response createCustomer(Customer customer) {
try {
long customerId = persist(customer);return Response.created(URI.create( "/"+ customerId)).build();
} catch (Exception e) {
throw new WebApplicationException(e,
Response.Status.INTERNAL_SERVER_ERROR);
}
}...
private long persist(Customer customer) throws IOException {
File dataFile = new File(DATA_STORE);if (!dataFile.exists()) {
dataFile.createNewFile();
}
long customerId = customer.getId();
Address address = customer.getAddress();
Properties properties = new Properties();
properties.load(new FileInputStream(dataFile));Thecustomer ExampleApplication
TheJavaEE6Tutorial • January2013 422
properties.setProperty(String.valueOf(customerId),
customer.getFirstname() + ","
+ customer.getLastname() + ","
+ address.getNumber() + ","
+ address.getStreet() + ","
+ address.getCity() + ","
+ address.getState() + ","
+ address.getZip() + ","
+ address.getCountry() + ","
+ customer.getEmail() + ","
+ customer.getPhone());
properties.store(new FileOutputStream(DATA_STORE),null);return customerId;
}...
}
TheresponsereturnedtotheclienthasaURItothenewlycreatedresource.Thereturntypeis
anentitybodymappedfromthepropertyoftheresponsewiththestatuscodespecifiedbythestatuspropertyoftheresponse.The WebApplicationException isaRuntimeException thatis
usedtowraptheappropriateHTTPerrorstatuscode,suchas404,406,415,or500.
The@Consumes({ "application/xml ","application/json "})and
@Produces({ "application/xml ","application/json "})annotationssettherequestand
responsemediatypestousetheappropriateMIMEclient.Theseannotationscanbeappliedtoaresourcemethod,aresourceclass,orevenanentityprovider.Ifyoudonotusetheseannotations,JAX-RSallowstheuseofanymediatype( "*/*").
Thefollowingcodesnippetshowstheimplementationofthe getCustomer andfindbyId
methods.The getCustomer methodusesthe @Produces annotationandreturnsa Customer
object,whichisconvertedtoanXMLorJSONrepresentationdependingonthe Accept:
headerspecifiedbytheclient.
@GET
@Path( "{id}")
@Produces({ "application/xml ","application/json "})
public Customer getCustomer(@PathParam( "id") String customerId) {
Customer customer = null;
try {
customer = findById(customerId);
} catch (Exception ex) {
logger.log(Level.SEVERE,
"Error calling searchCustomer() for customerId {0}. {1} ",
new Object[]{customerId, ex.getMessage()});
}return customer;
}
private Customer findById(String customerId) throws IOException {
properties properties = new Properties();properties.load(new FileInputStream(DATA_STORE));Thecustomer ExampleApplication
Chapter21 • JAX-RS:AdvancedTopicsandExample 423
String rawData = properties.getProperty(customerId);
if (rawData != null) {
final String[] field = rawData.split( ",");
Address address = new Address();
Customer customer = new Customer();customer.setId(Integer.parseInt(customerId));customer.setAddress(address);
customer.setFirstname(field[0]);
customer.setLastname(field[1]);address.setNumber(Integer.parseInt(field[2]));address.setStreet(field[3]);address.setCity(field[4]);address.setState(field[5]);address.setZip(field[6]);address.setCountry(field[7]);customer.setEmail(field[8]);customer.setPhone(field[9]);
return customer;
}return null;
}
TheCustomerClientXML andCustomerClientJSON
Classes
JerseyisthereferenceimplementationofJAX-RS(JSR311).YoucanusetheJerseyclientAPIto
writeatestclientforthe customer exampleapplication.YoucanfindtheJerseyAPIsat
http://jersey.java.net/nonav/apidocs/latest/jersey/ .
TheCustomerClientXML classcallsJerseyAPIstotestthe CustomerService webservice:
package customer.rest.client;
import com.sun.jersey.api.client.Client;
import com.sun.jersey.api.client.ClientResponse;import com.sun.jersey.api.client.WebResource;import customer.data.Address;import customer.data.Customer;import java.util.logging.Level;import java.util.logging.Logger;import javax.ws.rs.core.MediaType;
public class CustomerClientXML {
public static final Logger logger =
Logger.getLogger(CustomerClientXML.class.getCanonicalName());
public static void main(String[] args) {
Client client = Client.create();
// Define the URL for testing the example applicationThecustomer ExampleApplication
TheJavaEE6Tutorial • January2013 424
WebResource webResource =
client.resource( "http://localhost:8080/customer/rest/Customer ");
// Test the POST method
Customer customer = new Customer();Address address = new Address();customer.setAddress(address);
customer.setId(1);
customer.setFirstname( "Duke");
customer.setLastname( "OfJava ");
address.setNumber(1);address.setStreet( "Duke’s Drive ");
address.setCity( "JavaTown ");
address.setZip( "1234");
address.setState( "JA");
address.setCountry( "USA");
customer.setEmail( "duke@java.net ");
customer.setPhone( "12341234 ");
ClientResponse response =
webResource.type( "application/xml ").post(ClientResponse.class,
customer);
logger.info( "POST status: {0} "+ response.getStatus());
if (response.getStatus() == 201) {
logger.info( "POST succeeded ");
} else {
logger.info( "POST failed ");
}
// Test the GET method using content negotiation
response = webResource.path( "1").accept(MediaType.APPLICATION_XML)
.get(ClientResponse.class);
Customer entity = response.getEntity(Customer.class);
logger.log(Level.INFO, "GET status: {0} ", response.getStatus());
if (response.getStatus() == 200) {
logger.log(Level.INFO, "GET succeeded, city is {0} ",
entity.getAddress().getCity());
} else {
logger.info(
"GET failed ");
}
// Test the DELETE method
response = webResource.path( "1").delete(ClientResponse.class);
logger.log(Level.INFO, "DELETE status: {0} ", response.getStatus());
if (response.getStatus() == 204) {
logger.info( "DELETE succeeded (no content) ");
} else {
logger.info( "DELETE failed ");
}
response = webResource.path( "1").accept(MediaType.APPLICATION_XML)
.get(ClientResponse.class);
logger.log(Level.INFO, "GET status: {0} ", response.getStatus());
if (response.getStatus() == 204) {
logger.info( "After DELETE, the GET request returned no content. ");Thecustomer ExampleApplication
Chapter21 • JAX-RS:AdvancedTopicsandExample 425
} else {
logger.info( "Failed, after DELETE, GET returned a response. ");
}
}
}
ThisJerseyclientteststhePOST,GET,andDELETEmethodsusingXMLrepresentations.
AlloftheseHTTPstatuscodesindicatesuccess:201forPOST,200forGET,and204for
DELETE.FordetailsaboutthemeaningsofHTTPstatuscodes,see http://www.w3.org/
Protocols/rfc2616/rfc2616-sec10.html .
TheCustomerClientJSON classissimilarto CustomerClientXML butitusesJSON
representationstotestthewebservice.Inthe CustomerClientJSON class"application/xml "is
replacedby "application/json ",and MediaType.APPLICATION_XML isreplacedby
MediaType.APPLICATION_JSON .
ModifyingtheExampletoGenerateEntityClasses
fromanExistingSchema
Thissectiondescribeshowyoucanmodifythe customer exampleifyouprovideanXML
schemadefinitionfileforyourentitiesinsteadofprovidingJavaclasses.InthiscaseJAXBgeneratestheequivalentJavaentityclassesfromtheschemadefinition.
Forthe customer exampleyouprovidethefollowing .xsdfile:
<?xml version= "1.0"?>
<xs:schema targetNamespace= "http://xml.customer "
xmlns:xs= "http://www.w3.org/2001/XMLSchema "elementFormDefault= "qualified "
xmlns:ora= "http://xml.customer ">
<xs:element name= "customer "type= "ora:Customer "/>
<xs:complexType name= "Address ">
<xs:sequence>
<xs:element name= "number "type= "xs:int "/>
<xs:element name= "street "type= "xs:string "/>
<xs:element name= "city"type= "xs:string "/>
<xs:element name= "state "type= "xs:string "/>
<xs:element name= "zip"type= "xs:string "/>
<xs:element name= "country "type= "xs:string "/>
</xs:sequence>
</xs:complexType>
<xs:complexType name= "Customer ">
<xs:sequence>
<xs:element name= "firstname "type= "xs:string "/>
<xs:element name= "lastname "type= "xs:string "/>
<xs:element name= "address "type= "ora:Address "/>
<xs:element name= "email "type= "xs:string "/>
<xs:element name= "phone "type= "xs:string "/>Thecustomer ExampleApplication
TheJavaEE6Tutorial • January2013 426
</xs:sequence>
<xs:attribute name= "id"type= "xs:int "use="required "/>
</xs:complexType>
</xs:schema>
Youcanmodifythe customer exampleasfollows:
▼ToModifythe customer ExampletoGenerateJavaEntityClassesfrom
anExistingXMLSchemaDefinition
CreateaJAXBbindingtogeneratetheentityJavaclassesfromtheschemadefinition.For
example,inNetBeansIDE,followthesesteps:
a. Rightclickonthe customer projectandselectNew>Other...
b. UndertheXMLfolder,selectJAXBBindingandclickNext.c. IntheBindingNamefield,type CustomerBinding .
d. ClickBrowseandchoosethe .xsdfilefromyourfilesystem.
e. InthePackageNamefield,type customer.xml .
f. ClickFinish.
Thisprocedurecreatesthe Customer class,the Addressclass,andsomeJAXBauxiliaryclasses
inthepackage customer.xml .
Modifythe CustomerService classasfollows:
a. Replacethe customer.data.* importswith customer.xml.* importsandimportthe
JAXBElement andObjectFactory classes:
import customer.xml.Customer;
import customer.xml.Address;import customer.xml.ObjectFactory;import javax.xml.bind.JAXBElement;
b. Replacethereturntypeofthe getCustomer method:
public JAXBElement<Customer> getCustomer(
@PathParam( "id") String customerId) {
...return new ObjectFactory().createCustomer(customer);
}1
2Thecustomer ExampleApplication
Chapter21 • JAX-RS:AdvancedTopicsandExample 427
Modifythe CustomerClientXML andCustomerClientJSON classesasfollows:
a. Replacethe customer.data.* importswith customer.xml.* importsandimportthe
JAXBElement andObjectFactory classes:
import customer.xml.Address;
import customer.xml.Customer;import customer.xml.ObjectFactory;import javax.xml.bind.JAXBElement;
b. Createan ObjectFactory instanceanda JAXBElement<Customer> instanceatthe
beginningofthe mainmethod:
public static void main(String[] args) {
Client client = Client.create();ObjectFactory factory = new ObjectFactory();WebResource webResource = ...;...
customer.setPhone( "12341234 ");
JAXBElement<Customer> customerJAXB = factory.createCustomer(customer);ClientResponse response = webResource.type( "application/xml ")
.post(ClientResponse.class, customerJAXB);
...
}
c. Modifythe GETrequestaftertestingthe DELETEmethod:
response = webResource.path( "1").accept(MediaType.APPLICATION_XML)
.get(ClientResponse.class);
entity = response.getEntity(Customer.class);logger.log(Level.INFO, "GET status: {0} ", response.getStatus());
try {
logger.info(entity.getAddress().getCity());
} catch (NullPointerException ne) {
// null after deleting the only customerlogger.log(Level.INFO, "After DELETE, city is: {0} ", ne.getCause());
}
Theinstructionsforbuilding,deploying,andrunningtheexamplearethesamefortheoriginal
customer exampleandforthemodifiedversionusingthisprocedure.
Runningthe customer Example
YoucanuseeitherNetBeansIDEorAnttobuild,package,deploy,andrunthe customer
application.
▼ToBuild,Package,andDeploythe customer ExampleUsingNetBeans
IDE
Thisprocedurebuildstheapplicationintothe
tut-install /examples/jax-rs/customer/build/web/ directory.Thecontentsofthisdirectory
aredeployedtotheGlassFishServer.3Thecustomer ExampleApplication
TheJavaEE6Tutorial • January2013 428
FromtheFilemenu,chooseOpenProject.
IntheOpenProjectdialog,navigateto:
tut-install /examples/jaxrs/
Selectthe customer folder.
SelecttheOpenasMainProjectcheckbox.ClickOpenProject.
Itmayappearthatthereareerrorsinthesourcefiles,becausethefilesrefertoJAXBclassesthat
willbegeneratedwhenyoubuildtheapplication.Youcanignoretheseerrors.
IntheProjectstab,right-clickthe customer projectandselectDeploy.
▼ToBuild,Package,andDeploythe customer ExampleUsingAnt
Inaterminalwindow,goto:
tut-install /examples/jaxrs/customer/
Typethefollowingcommand:
ant
Thiscommandcallsthe defaulttarget,whichbuildsandpackagestheapplicationintoaWAR
file,customer.war ,locatedinthe distdirectory.
Typethefollowingcommand:
ant deploy
Typingthiscommanddeploys customer.war totheGlassFishServer.
▼ToRunthe customer ExampleUsingtheJerseyClient
InNetBeansIDE,expandtheSourcePackagesnode.
Expandthe customer.rest.client node.
Right-clickthe CustomerClientXML.java fileandselectRunFile.
Theoutputoftheclientlookslikethis:
run:
Jun 12, 2012 2:40:20 PM customer.rest.client.CustomerClientXML mainINFO: POST status: 201Jun 12, 2012 2:40:20 PM customer.rest.client.CustomerClientXML mainINFO: POST succeededJun 12, 2012 2:40:20 PM customer.rest.client.CustomerClientXML main1
2
3
45
6
1
2
3
1
23Thecustomer ExampleApplication
Chapter21 • JAX-RS:AdvancedTopicsandExample 429
INFO: GET status: 200
Jun 12, 2012 2:40:20 PM customer.rest.client.CustomerClientXML mainINFO: GET succeeded, city is JavaTownJun 12, 2012 2:40:20 PM customer.rest.client.CustomerClientXML mainINFO: DELETE status: 204Jun 12, 2012 2:40:20 PM customer.rest.client.CustomerClientXML mainINFO: DELETE succeeded (no content)Jun 12, 2012 2:40:20 PM customer.rest.client.CustomerClientXML mainINFO: GET status: 204Jun 12, 2012 2:40:20 PM customer.rest.client.CustomerClientXML mainINFO: After DELETE, the GET request returned no content.BUILD SUCCESSFUL (total time: 5 seconds)
Theoutputisslightlydifferentforthemodified customer example:
run:
Jun 12, 2012 2:40:20 PM customer.rest.client.CustomerClientXML mainINFO: POST status: 201[...]Jun 12, 2012 2:40:20 PM customer.rest.client.CustomerClientXML mainINFO: DELETE succeeded (no content)Jun 12, 2012 2:40:20 PM customer.rest.client.CustomerClientXML mainINFO: GET status: 200Jun 12, 2012 2:40:20 PM customer.rest.client.CustomerClientXML mainINFO: After DELETE, city is: nullBUILD SUCCESSFUL (total time: 5 seconds)
▼ToRunthe customer ExampleUsingtheWebServicesTester
InNetBeansIDE,right-clickthecustomernodeandselectTestRESTfulWebServices.
Note–TheWebServicesTesterworksonlywiththemodifiedversionofthe customer example.
IntheConfigureRESTTestClientdialog,selectWebTestClientinProjectandclickBrowse.
IntheSelectProjectdialog,choosethecustomerprojectandclickOK.IntheConfigureRESTTestClientdialog,clickOK.Whenthetestclientappearsinthebrowser,selecttheCustomerresourcenodeintheleftpane.PastethefollowingXMLcodeintotheContenttextarea,replacing“Insertcontenthere”:
<?xml version= "1.0"encoding= "UTF-8 "?>
<customer id= "1">
<firstname>Duke</firstname><lastname>OfJava</lastname><address>
<number>1</number><street>Duke’s Way</street><city>JavaTown</city><state>JA</state>1
2
3456Thecustomer ExampleApplication
TheJavaEE6Tutorial • January2013 430
<zip>12345</zip>
<country>USA</country>
</address><email>duke@example.com</email><phone>123-456-7890</phone>
</customer>
Youcanfindthecodeinthefile customer/sample-input.xml .
ClickTest.
Thefollowingmessageappearsinthewindowbelow:
Status: 201 (Created)
ExpandtheCustomernodeandclick {id}.
Type 1intheidfieldandclickTesttotesttheGETmethod.
Thefollowingstatusmessageappears:
Status: 200 (OK)
TheXMLoutputfortheresourceappearsintheResponsewindow:
<?xml version= "1.0"encoding= "UTF-8 "?>
<customer xmlns= "http://xml.customer "id="1">
<firstname>Duke</firstname><lastname>OfJava</lastname><address>
<number>1</number><street>Duke’s Way</street><city>JavaTown</city><state>JA</state><zip>12345</zip><country>USA</country>
</address><email>duke@example.com</email><phone>123-456-7890</phone>
</customer>
AGETforanonexistentIDalsoreturnsa 200 (OK) status,buttheoutputintheResponse
windowshowsnocontent:
<?xml version= "1.0"encoding= "UTF-8 "?>
<customer xmlns= "http://xml.customer "
xmlns:xsi= "http://www.w3.org/2001/XMLSchema-instance "xsi:nil= "true"/>
Youcantestothermethodsasfollows:
■SelectPUT,typetheinputforanexistingcustomer,modifyanycontentexceptthe idvalue,
andclickTesttoupdatethecustomerfields.Asuccessfulupdatereturnsthefollowingstatusmessage:
Status: 303 (See Other)
■SelectDELETE,typetheIDforanexistingcustomer,andclickTesttoremovethecustomer.Asuccessfuldeletereturnsthefollowingstatusmessage:7
8
9Thecustomer ExampleApplication
Chapter21 • JAX-RS:AdvancedTopicsandExample 431
Status: 204 (See Other)
UsingCurltoRunthe customer ExampleApplication
Curlisacommand-linetoolyoucanusetorunthe customer applicationonUNIXplatforms.
YoucandownloadCurlfrom http://curl.haxx.se oraddittoaCygwininstallation.
Runthefollowingcommandsinthedirectory tut-install /examples/jaxrs/customer/ after
deployingtheapplication.
ToaddanewcustomerandtestthePOSTmethodusingXMLdata,usethefollowing
command:
curl -i --data @sample-input.xml \
--header Content-type:application/xml \http://localhost:8080/customer/rest/Customer
ToaddanewcustomerusingJSONdatainstead,usethefollowingcommand:
curl -i --data @sample-input.json \--header Content-type:application/json \http://localhost:8080/customer/rest/Customer
AsuccessfulPOSTreturnsHTTP Status: 201 (Created) .
ToretrievethedetailsofthecustomerwhoseIDis1,usethefollowingcommand:
curl -i -X GET http://localhost:8080/customer/rest/Customer/1
ToretrievethedetailsofthesamecustomerrepresentedasJSONdata,usethefollowing
command:
curl -i --header Accept:application/json
-X GET http://localhost:8080/customer/rest/Customer/1
AsuccessfulGETreturnsHTTP Status: 200 (OK) .
Todeleteacustomerrecord,usethefollowingcommand:
curl -i -X DELETE http://localhost:8080/customer/rest/Customer/1
AsuccessfulDELETEreturnsHTTP Status: 204 .
Thecustomer exampleandthemodifiedversionresponddifferentlytoaGETrequestfora
customerIDthatdoesnotexist.TheoriginalcustomerexamplereturnsHTTP Status: 204
(No content) ,whereasthemodifiedversionreturnsHTTP Status: 200 (OK) witharesponse
thatcontainstheXMLheaderbutnocustomerdata.Thecustomer ExampleApplication
TheJavaEE6Tutorial • January2013 432
EnterpriseBeans
PartIVexploresEnterpriseJavaBeanscomponents.Thispartcontainsthefollowing
chapters:
■Chapter22,“EnterpriseBeans”
■Chapter23,“GettingStartedwithEnterpriseBeans”
■Chapter24,“RunningtheEnterpriseBeanExamples”
■Chapter25,“AMessage-DrivenBeanExample”
■Chapter26,“UsingtheEmbeddedEnterpriseBeanContainer”
■Chapter27,“UsingAsynchronousMethodInvocationinSessionBeans”PART IV
433
434
EnterpriseBeans
EnterprisebeansareJavaEEcomponentsthatimplementEnterpriseJavaBeans(EJB)
technology.EnterprisebeansrunintheEJBcontainer,aruntimeenvironmentwithintheGlassFishServer(see
“ContainerTypes”onpage48 ).Althoughtransparenttotheapplication
developer,theEJBcontainerprovidessystem-levelservices,suchastransactionsandsecurity,toitsenterprisebeans.Theseservicesenableyoutoquicklybuildanddeployenterprisebeans,whichformthecoreoftransactionalJavaEEapplications.
Thefollowingtopicsareaddressedhere:
■“WhatIsanEnterpriseBean?”onpage435
■“WhatIsaSessionBean?”onpage437
■“WhatIsaMessage-DrivenBean?”onpage439
■“AccessingEnterpriseBeans”onpage441
■“TheContentsofanEnterpriseBean”onpage447
■“NamingConventionsforEnterpriseBeans”onpage449
■“TheLifecyclesofEnterpriseBeans”onpage450
■“FurtherInformationaboutEnterpriseBeans”onpage453
WhatIsanEnterpriseBean?
WrittenintheJavaprogramminglanguage,anenterprisebeanisaserver-sidecomponentthat
encapsulatesthebusinesslogicofanapplication.The businesslogic isthecodethatfulfillsthe
purposeoftheapplication.Inaninventorycontrolapplication,forexample,theenterprisebeansmightimplementthebusinesslogicinmethodscalled checkInventoryLevel and
orderProduct .Byinvokingthesemethods,clientscanaccesstheinventoryservicesprovided
bytheapplication.22CHAPTER 22
435
BenefitsofEnterpriseBeans
Forseveralreasons,enterprisebeanssimplifythedevelopmentoflarge,distributed
applications.First,becausetheEJBcontainerprovidessystem-levelservicestoenterprisebeans,thebeandevelopercanconcentrateonsolvingbusinessproblems.TheEJBcontainer,ratherthanthebeandeveloper,isresponsibleforsystem-levelservices,suchastransactionmanagementandsecurityauthorization.
Second,becausethebeansratherthantheclientscontaintheapplication’sbusinesslogic,the
clientdevelopercanfocusonthepresentationoftheclient.Theclientdeveloperdoesnothavetocodetheroutinesthatimplementbusinessrulesoraccessdatabases.Asaresult,theclientsarethinner,abenefitthatisparticularlyimportantforclientsthatrunonsmalldevices.
Third,becauseenterprisebeansareportablecomponents,theapplicationassemblercanbuild
newapplicationsfromexistingbeans.ProvidedthattheyusethestandardAPIs,theseapplicationscanrunonanycompliantJavaEEserver.
WhentoUseEnterpriseBeans
Youshouldconsiderusingenterprisebeansifyourapplicationhasanyofthefollowingrequirements.
■Theapplicationmustbescalable.Toaccommodateagrowingnumberofusers,youmayneedtodistributeanapplication’scomponentsacrossmultiplemachines.Notonlycantheenterprisebeansofanapplicationrunondifferentmachines,butalsotheirlocationwillremaintransparenttotheclients.
■Transactionsmustensuredataintegrity.Enterprisebeanssupporttransactions,themechanismsthatmanagetheconcurrentaccessofsharedobjects.
■Theapplicationwillhaveavarietyofclients.Withonlyafewlinesofcode,remoteclientscaneasilylocateenterprisebeans.Theseclientscanbethin,various,andnumerous.
TypesofEnterpriseBeans
Table22–1 summarizesthetwotypesofenterprisebeans.Thefollowingsectionsdiscusseach
typeinmoredetail.WhatIsanEnterpriseBean?
TheJavaEE6Tutorial • January2013 436
TABLE22–1 EnterpriseBeanTypes
EnterpriseBeanType Purpose
Session Performsataskforaclient;optionally,mayimplementawebservice
Message-driven Actsasalistenerforaparticularmessagingtype,suchastheJavaMessage
ServiceAPI
WhatIsaSessionBean?
Asessionbean encapsulatesbusinesslogicthatcanbeinvokedprogrammaticallybyaclient
overlocal,remote,orwebserviceclientviews.Toaccessanapplicationthatisdeployedontheserver,theclientinvokesthesessionbean’smethods.Thesessionbeanperformsworkforitsclient,shieldingitfromcomplexitybyexecutingbusinesstasksinsidetheserver.
Asessionbeanisnotpersistent.(Thatis,itsdataisnotsavedtoadatabase.)Forcodesamples,see
Chapter24,“RunningtheEnterpriseBeanExamples.”
TypesofSessionBeans
Sessionbeansareofthreetypes:stateful,stateless,andsingleton.
StatefulSessionBeans
Thestateofanobjectconsistsofthevaluesofitsinstancevariables.Ina statefulsessionbean ,the
instancevariablesrepresentthestateofauniqueclient/beansession.Becausetheclientinteracts(“talks”)withitsbean,thisstateisoftencalledthe conversationalstate .
Asitsnamesuggests,asessionbeanissimilartoaninteractivesession.Asessionbeanisnot
shared;itcanhaveonlyoneclient,inthesamewaythataninteractivesessioncanhaveonlyone
user.Whentheclientterminates,itssessionbeanappearstoterminateandisnolongerassociatedwiththeclient.
Thestateisretainedforthedurationoftheclient/beansession.Iftheclientremovesthebean,
thesessionendsandthestatedisappears.Thistransientnatureofthestateisnotaproblem,however,becausewhentheconversationbetweentheclientandthebeanends,thereisnoneedtoretainthestate.
StatelessSessionBeans
Astatelesssessionbean doesnotmaintainaconversationalstatewiththeclient.Whenaclient
invokesthemethodsofastatelessbean,thebean’sinstancevariablesmaycontainastatespecifictothatclientbutonlyforthedurationoftheinvocation.Whenthemethodisfinished,theWhatIsaSessionBean?
Chapter22 • EnterpriseBeans 437
client-specificstateshouldnotberetained.Clientsmay,however,changethestateofinstance
variablesinpooledstatelessbeans,andthisstateisheldovertothenextinvocationofthepooledstatelessbean.Exceptduringmethodinvocation,allinstancesofastatelessbeanareequivalent,allowingtheEJBcontainertoassignaninstancetoanyclient.Thatis,thestateofastatelesssessionbeanshouldapplyacrossallclients.
Becausetheycansupportmultipleclients,statelesssessionbeanscanofferbetterscalabilityfor
applicationsthatrequirelargenumbersofclients.Typically,anapplicationrequiresfewerstatelesssessionbeansthanstatefulsessionbeanstosupportthesamenumberofclients.
Astatelesssessionbeancanimplementawebservice,butastatefulsessionbeancannot.
SingletonSessionBeans
Asingletonsessionbean isinstantiatedonceperapplicationandexistsforthelifecycleofthe
application.Singletonsessionbeansaredesignedforcircumstancesinwhichasingleenterprisebeaninstanceissharedacrossandconcurrentlyaccessedbyclients.
Singletonsessionbeansoffersimilarfunctionalitytostatelesssessionbeansbutdifferfrom
theminthatthereisonlyonesingletonsessionbeanperapplication,asopposedtoapoolofstatelesssessionbeans,anyofwhichmayrespondtoaclientrequest.Likestatelesssessionbeans,singletonsessionbeanscanimplementwebserviceendpoints.
Singletonsessionbeansmaintaintheirstatebetweenclientinvocationsbutarenotrequiredto
maintaintheirstateacrossservercrashesorshutdowns.
Applicationsthatuseasingletonsessionbeanmayspecifythatthesingletonshouldbe
instantiateduponapplicationstartup,whichallowsthesingletontoperforminitializationtasksfortheapplication.Thesingletonmayperformcleanuptasksonapplicationshutdownaswell,becausethesingletonwilloperatethroughoutthelifecycleoftheapplication.
WhentoUseSessionBeans
Statefulsessionbeansareappropriateifanyofthefollowingconditionsaretrue.
■Thebean’sstaterepresentstheinteractionbetweenthebeanandaspecificclient.
■Thebeanneedstoholdinformationabouttheclientacrossmethodinvocations.
■Thebeanmediatesbetweentheclientandtheothercomponentsoftheapplication,presentingasimplifiedviewtotheclient.
■Behindthescenes,thebeanmanagestheworkflowofseveralenterprisebeans.WhatIsaSessionBean?
TheJavaEE6Tutorial • January2013 438
Toimproveperformance,youmightchooseastatelesssessionbeanifithasanyofthesetraits.
■Thebean’sstatehasnodataforaspecificclient.
■Inasinglemethodinvocation,thebeanperformsagenerictaskforallclients.Forexample,
youmightuseastatelesssessionbeantosendanemailthatconfirmsanonlineorder.
■Thebeanimplementsawebservice.
Singletonsessionbeansareappropriateinthefollowingcircumstances.
■Stateneedstobesharedacrosstheapplication.
■Asingleenterprisebeanneedstobeaccessedbymultiplethreadsconcurrently.
■Theapplicationneedsanenterprisebeantoperformtasksuponapplicationstartupand
shutdown.
■Thebeanimplementsawebservice.
WhatIsaMessage-DrivenBean?
Amessage-drivenbean isanenterprisebeanthatallowsJavaEEapplicationstoprocess
messagesasynchronously.ThistypeofbeannormallyactsasaJMSmessagelistener,whichissimilartoaneventlistenerbutreceivesJMSmessagesinsteadofevents.ThemessagescanbesentbyanyJavaEEcomponent(anapplicationclient,anotherenterprisebean,orawebcomponent)orbyaJMSapplicationorsystemthatdoesnotuseJavaEEtechnology.Message-drivenbeanscanprocessJMSmessagesorotherkindsofmessages.
WhatMakesMessage-DrivenBeansDifferentfrom
SessionBeans?
Themostvisibledifferencebetweenmessage-drivenbeansandsessionbeansisthatclientsdo
notaccessmessage-drivenbeansthroughinterfaces.Interfacesaredescribedinthesection
“AccessingEnterpriseBeans”onpage441 .Unlikeasessionbean,amessage-drivenbeanhas
onlyabeanclass.WhatIsaMessage-DrivenBean?
Chapter22 • EnterpriseBeans 439
Inseveralrespects,amessage-drivenbeanresemblesastatelesssessionbean.
■Amessage-drivenbean’sinstancesretainnodataorconversationalstateforaspecificclient.
■Allinstancesofamessage-drivenbeanareequivalent,allowingtheEJBcontainertoassigna
messagetoanymessage-drivenbeaninstance.Thecontainercanpooltheseinstancestoallowstreamsofmessagestobeprocessedconcurrently.
■Asinglemessage-drivenbeancanprocessmessagesfrommultipleclients.
Theinstancevariablesofthemessage-drivenbeaninstancecancontainsomestateacrossthe
handlingofclientmessages,suchasaJMSAPIconnection,anopendatabaseconnection,oranobjectreferencetoanenterprisebeanobject.
Clientcomponentsdonotlocatemessage-drivenbeansandinvokemethodsdirectlyonthem.
Instead,aclientaccessesamessage-drivenbeanthrough,forexample,JMSbysendingmessagestothemessagedestinationforwhichthemessage-drivenbeanclassisthe MessageListener .
Youassignamessage-drivenbean’sdestinationduringdeploymentbyusingGlassFishServerresources.
Message-drivenbeanshavethefollowingcharacteristics.
■Theyexecuteuponreceiptofasingleclientmessage.
■Theyareinvokedasynchronously.
■Theyarerelativelyshort-lived.
■Theydonotrepresentdirectlyshareddatainthedatabase,buttheycanaccessandupdate
thisdata.
■Theycanbetransaction-aware.
■Theyarestateless.
Whenamessagearrives,thecontainercallsthemessage-drivenbean’s onMessage methodto
processthemessage.The onMessage methodnormallycaststhemessagetooneofthefiveJMS
messagetypesandhandlesitinaccordancewiththeapplication’sbusinesslogic.The onMessage
methodcancallhelpermethodsorcaninvokeasessionbeantoprocesstheinformationinthemessageortostoreitinadatabase.
Amessagecanbedeliveredtoamessage-drivenbeanwithinatransactioncontext,soall
operationswithinthe onMessage methodarepartofasingletransaction.Ifmessageprocessing
isrolledback,themessagewillberedelivered.Formoreinformation,see
Chapter25,“A
Message-DrivenBeanExample,” andChapter44,“Transactions.”
WhentoUseMessage-DrivenBeans
SessionbeansallowyoutosendJMSmessagesandtoreceivethemsynchronouslybutnotasynchronously.Toavoidtyingupserverresources,donottouseblockingsynchronousWhatIsaMessage-DrivenBean?
TheJavaEE6Tutorial • January2013 440
receivesinaserver-sidecomponent;ingeneral,JMSmessagesshouldnotbesentorreceived
synchronously.Toreceivemessagesasynchronously,useamessage-drivenbean.
AccessingEnterpriseBeans
Note–Thematerialinthissectionappliesonlytosessionbeansandnottomessage-driven
beans.Becausetheyhaveadifferentprogrammingmodel,message-drivenbeansdonothaveinterfacesorno-interfaceviewsthatdefineclientaccess.
Clientsaccessenterprisebeanseitherthroughano-interfacevieworthroughabusiness
interface.A no-interfaceview ofanenterprisebeanexposesthepublicmethodsoftheenterprise
beanimplementationclasstoclients.Clientsusingtheno-interfaceviewofanenterprisebeanmayinvokeanypublicmethodsintheenterprisebeanimplementationclassoranysuperclassesoftheimplementationclass.A businessinterface isastandardJavaprogramminglanguage
interfacethatcontainsthebusinessmethodsoftheenterprisebean.
Aclientcanaccessasessionbeanonlythroughthemethodsdefinedinthebean’sbusiness
interfaceorthroughthepublicmethodsofanenterprisebeanthathasano-interfaceview.Thebusinessinterfaceorno-interfaceviewdefinestheclient’sviewofanenterprisebean.Allotheraspectsoftheenterprisebean(methodimplementationsanddeploymentsettings)arehiddenfromtheclient.
Well-designedinterfacesandno-interfaceviewssimplifythedevelopmentandmaintenanceof
JavaEEapplications.Notonlydocleaninterfacesandno-interfaceviewsshieldtheclientsfromanycomplexitiesintheEJBtier,buttheyalsoallowtheenterprisebeanstochangeinternallywithoutaffectingtheclients.Forexample,ifyouchangetheimplementationofasessionbeanbusinessmethod,youwon’thavetoaltertheclientcode.Butifyouweretochangethemethoddefinitionsintheinterfaces,youmighthavetomodifytheclientcodeaswell.Therefore,itisimportantthatyoudesigntheinterfacesandno-interfaceviewscarefullytoisolateyourclientsfrompossiblechangesintheenterprisebeans.
Sessionbeanscanhavemorethanonebusinessinterface.Sessionbeansshould,butarenot
requiredto,implementtheirbusinessinterfaceorinterfaces.
UsingEnterpriseBeansinClients
Theclientofanenterprisebeanobtainsareferencetoaninstanceofanenterprisebeanthrougheitherdependencyinjection ,usingJavaprogramminglanguageannotations,or JNDIlookup ,
usingtheJavaNamingandDirectoryInterfacesyntaxtofindtheenterprisebeaninstance.AccessingEnterpriseBeans
Chapter22 • EnterpriseBeans 441
Dependencyinjectionisthesimplestwayofobtaininganenterprisebeanreference.Clientsthat
runwithinaJavaEEserver-managedenvironment,JavaServerFaceswebapplications,JAX-RSwebservices,otherenterprisebeans,orJavaEEapplicationclients,supportdependencyinjectionusingthe javax.ejb.EJB annotation.
ApplicationsthatrunoutsideaJavaEEserver-managedenvironment,suchasJavaSE
applications,mustperformanexplicitlookup.JNDIsupportsaglobalsyntaxforidentifyingJavaEEcomponentstosimplifythisexplicitlookup.
PortableJNDISyntax
ThreeJNDInamespacesareusedforportableJNDIlookups: java:global ,java:module ,and
java:app .
■Thejava:global JNDInamespaceistheportablewayoffindingremoteenterprisebeans
usingJNDIlookups.JNDIaddressesareofthefollowingform:
java:global[/ applicationname ]/modulename /enterprisebeanname [/interfacename ]
Applicationnameandmodulenamedefaulttothenameoftheapplicationandmodule
minusthefileextension.ApplicationnamesarerequiredonlyiftheapplicationispackagedwithinanEAR.Theinterfacenameisrequiredonlyiftheenterprisebeanimplementsmorethanonebusinessinterface.
■Thejava:module namespaceisusedtolookuplocalenterprisebeanswithinthesame
module.JNDIaddressesusingthe java:module namespaceareofthefollowingform:
java:module/ enterprisebeanname /[interfacename ]
Theinterfacenameisrequiredonlyiftheenterprisebeanimplementsmorethanone
businessinterface.
■Thejava:app namespaceisusedtolookuplocalenterprisebeanspackagedwithinthesame
application.Thatis,theenterprisebeanispackagedwithinanEARfilecontainingmultipleJavaEEmodules.JNDIaddressesusingthe java:app namespaceareofthefollowingform:
java:app[/ modulename ]/enterprisebeanname [/interfacename ]
Themodulenameisoptional.Theinterfacenameisrequiredonlyiftheenterprisebean
implementsmorethanonebusinessinterface.
Forexample,ifanenterprisebean, MyBean,ispackagedwithinthewebapplicationarchive
myApp.war ,themodulenameis myApp.TheportableJNDInameis java:module/MyBean An
equivalentJNDInameusingthe java:global namespaceis java:global/myApp/MyBean .
DecidingonRemoteorLocalAccess
WhenyoudesignaJavaEEapplication,oneofthefirstdecisionsyoumakeisthetypeofclient
accessallowedbytheenterprisebeans:remote,local,orwebservice.AccessingEnterpriseBeans
TheJavaEE6Tutorial • January2013 442
Whethertoallowlocalorremoteaccessdependsonthefollowingfactors.
■Tightorloosecouplingofrelatedbeans :Tightlycoupledbeansdependononeanother.
Forexample,ifasessionbeanthatprocessessalesorderscallsasessionbeanthatemailsaconfirmationmessagetothecustomer,thesebeansaretightlycoupled.Tightlycoupledbeansaregoodcandidatesforlocalaccess.Becausetheyfittogetherasalogicalunit,theytypicallycalleachotheroftenandwouldbenefitfromtheincreasedperformancethatispossiblewithlocalaccess.
■Typeofclient :Ifanenterprisebeanisaccessedbyapplicationclients,itshouldallowremote
access.Inaproductionenvironment,theseclientsalmostalwaysrunonmachinesotherthanthoseonwhichtheGlassFishServerisrunning.Ifanenterprisebean’sclientsarewebcomponentsorotherenterprisebeans,thetypeofaccessdependsonhowyouwanttodistributeyourcomponents.
■Componentdistribution :JavaEEapplicationsarescalablebecausetheirserver-side
componentscanbedistributedacrossmultiplemachines.Inadistributedapplication,forexample,theserverthatthewebcomponentsrunonmaynotbetheoneonwhichtheenterprisebeanstheyaccessaredeployed.Inthisdistributedscenario,theenterprisebeansshouldallowremoteaccess.
■Performance :Owingtosuchfactorsasnetworklatency,remotecallsmaybeslowerthan
localcalls.Ontheotherhand,ifyoudistributecomponentsamongdifferentservers,youmayimprovetheapplication’soverallperformance.Bothofthesestatementsaregeneralizations;performancecanvaryindifferentoperationalenvironments.Nevertheless,youshouldkeepinmindhowyourapplicationdesignmightaffectperformance.
Ifyouaren’tsurewhichtypeofaccessanenterprisebeanshouldhave,chooseremoteaccess.
Thisdecisiongivesyoumoreflexibility.Inthefuture,youcandistributeyourcomponentstoaccommodatethegrowingdemandsonyourapplication.
Althoughitisuncommon,itispossibleforanenterprisebeantoallowbothremoteandlocal
access.Ifthisisthecase,eitherthebusinessinterfaceofthebeanmustbeexplicitlydesignatedasabusinessinterfacebybeingdecoratedwiththe @Remoteor@Localannotations,orthebean
classmustexplicitlydesignatethebusinessinterfacesbyusingthe @Remoteand@Local
annotations.Thesamebusinessinterfacecannotbebothalocalandaremotebusinessinterface.
LocalClients
Alocalclienthasthesecharacteristics.
■Itmustruninthesameapplicationastheenterprisebeanitaccesses.
■Itcanbeawebcomponentoranotherenterprisebean.
■Tothelocalclient,thelocationoftheenterprisebeanitaccessesisnottransparent.AccessingEnterpriseBeans
Chapter22 • EnterpriseBeans 443
Theno-interfaceviewofanenterprisebeanisalocalview.Thepublicmethodsoftheenterprise
beanimplementationclassareexposedtolocalclientsthataccesstheno-interfaceviewoftheenterprisebean.Enterprisebeansthatusetheno-interfaceviewdonotimplementabusinessinterface.
Thelocalbusinessinterface definesthebean’sbusinessandlifecyclemethods.Ifthebean’s
businessinterfaceisnotdecoratedwith @Localor@Remote,andifthebeanclassdoesnot
specifytheinterfaceusing @Localor@Remote,thebusinessinterfaceisbydefaultalocal
interface.
Tobuildanenterprisebeanthatallowsonlylocalaccess,youmay,butarenotrequiredto,do
oneofthefollowing:
■Createanenterprisebeanimplementationclassthatdoesnotimplementabusinessinterface,indicatingthatthebeanexposesano-interfaceviewtoclients.Forexample:
@Session
public class MyBean { ... }
■Annotatethebusinessinterfaceoftheenterprisebeanasa @Localinterface.Forexample:
@Local
public interface InterfaceName { ... }
■Specifytheinterfacebydecoratingthebeanclasswith @Localandspecifytheinterface
name.Forexample:
@Local(InterfaceName .class)
public class BeanName implements InterfaceName { ... }
AccessingLocalEnterpriseBeansUsingtheNo-InterfaceView
Clientaccesstoanenterprisebeanthatexposesalocal,no-interfaceviewisaccomplished
througheitherdependencyinjectionorJNDIlookup.
■Toobtainareferencetotheno-interfaceviewofanenterprisebeanthroughdependencyinjection,usethe javax.ejb.EJB annotationandspecifytheenterprisebean’s
implementationclass:
@EJB
ExampleBean exampleBean;
■Toobtainareferencetotheno-interfaceviewofanenterprisebeanthroughJNDIlookup,
usethe javax.naming.InitialContext interface’s lookupmethod:
ExampleBean exampleBean = (ExampleBean)
InitialContext.lookup( "java:module/ExampleBean ");
Clientsdonotusethe newoperatortoobtainanewinstanceofanenterprisebeanthatusesa
no-interfaceview.AccessingEnterpriseBeans
TheJavaEE6Tutorial • January2013 444
AccessingLocalEnterpriseBeansThatImplementBusinessInterfaces
Clientaccesstoenterprisebeansthatimplementlocalbusinessinterfacesisaccomplished
througheitherdependencyinjectionorJNDIlookup.
■Toobtainareferencetothelocalbusinessinterfaceofanenterprisebeanthroughdependencyinjection,usethe javax.ejb.EJB annotationandspecifytheenterprisebean’s
localbusinessinterfacename:
@EJB
Example example;
■ToobtainareferencetoalocalbusinessinterfaceofanenterprisebeanthroughJNDI
lookup,usethe javax.naming.InitialContext interface’s lookupmethod:
ExampleLocal example = (ExampleLocal)
InitialContext.lookup( "java:module/ExampleLocal ");
RemoteClients
Aremoteclientofanenterprisebeanhasthefollowingtraits.
■ItcanrunonadifferentmachineandadifferentJVMfromtheenterprisebeanitaccesses.
(ItisnotrequiredtorunonadifferentJVM.)
■Itcanbeawebcomponent,anapplicationclient,oranotherenterprisebean.
■Toaremoteclient,thelocationoftheenterprisebeanistransparent.
■Theenterprisebeanmustimplementabusinessinterface.Thatis,remoteclients maynot
accessanenterprisebeanthroughano-interfaceview.
Tocreateanenterprisebeanthatallowsremoteaccess,youmusteither
■Decoratethebusinessinterfaceoftheenterprisebeanwiththe @Remoteannotation:
@Remote
public interface InterfaceName { ... }
■Decoratethebeanclasswith @Remote,specifyingthebusinessinterfaceorinterfaces:
@Remote(InterfaceName.class)
public class BeanName implements InterfaceName { ... }
Theremoteinterface definesthebusinessandlifecyclemethodsthatarespecifictothebean.For
example,theremoteinterfaceofabeannamed BankAccountBean mighthavebusinessmethods
named depositandcredit.Figure22–1 showshowtheinterfacecontrolstheclient’sviewof
anenterprisebean.AccessingEnterpriseBeans
Chapter22 • EnterpriseBeans 445
Clientaccesstoanenterprisebeanthatimplementsaremotebusinessinterfaceisaccomplished
througheitherdependencyinjectionorJNDIlookup.
■Toobtainareferencetotheremotebusinessinterfaceofanenterprisebeanthroughdependencyinjection,usethe javax.ejb.EJB annotationandspecifytheenterprisebean’s
remotebusinessinterfacename:
@EJB
Example example;
■ToobtainareferencetoaremotebusinessinterfaceofanenterprisebeanthroughJNDI
lookup,usethe javax.naming.InitialContext interface’s lookupmethod:
ExampleRemote example = (ExampleRemote)
InitialContext.lookup( "java:global/myApp/ExampleRemote ");
WebServiceClients
AwebserviceclientcanaccessaJavaEEapplicationintwoways.First,theclientcanaccessa
webservicecreatedwithJAX-WS.(FormoreinformationonJAX-WS,see Chapter19,
“BuildingWebServiceswithJAX-WS.” )Second,awebserviceclientcaninvokethebusiness
methodsofastatelesssessionbean.Messagebeanscannotbeaccessedbywebserviceclients.
Providedthatitusesthecorrectprotocols(SOAP,HTTP,WSDL),anywebserviceclientcan
accessastatelesssessionbean,whetherornottheclientiswrittenintheJavaprogramminglanguage.Theclientdoesn’teven“know”whattechnologyimplementstheservice:statelesssessionbean,JAX-WS,orsomeothertechnology.Inaddition,enterprisebeansandwebcomponentscanbeclientsofwebservices.ThisflexibilityenablesyoutointegrateJavaEEapplicationswithwebservices.
Awebserviceclientaccessesastatelesssessionbeanthroughthebean’swebserviceendpoint
implementationclass.Bydefault,allpublicmethodsinthebeanclassareaccessibletowebserviceclients.The @WebMethod annotationmaybeusedtocustomizethebehaviorofweb
servicemethods.Ifthe @WebMethod annotationisusedtodecoratethebeanclass’smethods,
onlythosemethodsdecoratedwith @WebMethod areexposedtowebserviceclients.
Foracodesample,see
“AWebServiceExample: helloservice ”onpage476 .FIGURE22–1 InterfacesforanEnterpriseBeanwithRemoteAccess
Remote Client Remote Interface BankAccountBean
deposit()
credit()
AccessingEnterpriseBeans
TheJavaEE6Tutorial • January2013 446
MethodParametersandAccess
Thetypeofaccessaffectstheparametersofthebeanmethodsthatarecalledbyclients.The
followingsectionsapplynotonlytomethodparametersbutalsotomethodreturnvalues.
Isolation
Theparametersofremotecallsaremoreisolatedthanthoseoflocalcalls.Withremotecalls,theclientandthebeanoperateondifferentcopiesofaparameterobject.Iftheclientchangesthevalueoftheobject,thevalueofthecopyinthebeandoesnotchange.Thislayerofisolationcanhelpprotectthebeaniftheclientaccidentallymodifiesthedata.
Inalocalcall,boththeclientandthebeancanmodifythesameparameterobject.Ingeneral,
youshouldnotrelyonthissideeffectoflocalcalls.Perhapssomedayyouwillwanttodistributeyourcomponents,replacingthelocalcallswithremoteones.
Aswithremoteclients,webserviceclientsoperateondifferentcopiesofparametersthandoes
thebeanthatimplementsthewebservice.
GranularityofAccessedData
Becauseremotecallsarelikelytobeslowerthanlocalcalls,theparametersinremotemethodsshouldberelativelycoarse-grained.Acoarse-grainedobjectcontainsmoredatathanafine-grainedone,sofeweraccesscallsarerequired.Forthesamereason,theparametersofthemethodscalledbywebserviceclientsshouldalsobecoarse-grained.
TheContentsofanEnterpriseBean
Todevelopanenterprisebean,youmustprovidethefollowingfiles:
■Enterprisebeanclass :Implementsthebusinessmethodsoftheenterprisebeanandany
lifecyclecallbackmethods.
■Businessinterfaces :Definethebusinessmethodsimplementedbytheenterprisebeanclass.
Abusinessinterfaceisnotrequirediftheenterprisebeanexposesalocal,no-interfaceview.
■Helperclasses :Otherclassesneededbytheenterprisebeanclass,suchasexceptionand
utilityclasses.
PackagetheprogrammingartifactsintheprecedinglisteitherintoanEJBJARfile(a
stand-alonemodulethatstorestheenterprisebean)orwithinawebapplicationarchive(WAR)module.
PackagingEnterpriseBeansinEJBJARModules
AnEJBJARfileisportableandcanbeusedforvariousapplications.TheContentsofanEnterpriseBean
Chapter22 • EnterpriseBeans 447
ToassembleaJavaEEapplication,packageoneormoremodules,suchasEJBJARfiles,intoan
EARfile,thearchivefilethatholdstheapplication.WhendeployingtheEARfilethatcontainstheenterprisebean’sEJBJARfile,youalsodeploytheenterprisebeantotheGlassFishServer.YoucanalsodeployanEJBJARthatisnotcontainedinanEARfile.
Figure22–2 showsthe
contentsofanEJBJARfile.
PackagingEnterpriseBeansinWARModules
Enterprisebeansoftenprovidethebusinesslogicofawebapplication.Inthesecases,packagingtheenterprisebeanwithinthewebapplication’sWARmodulesimplifiesdeploymentandapplicationorganization.EnterprisebeansmaybepackagedwithinaWARmoduleasJavaprogramminglanguageclassfilesorwithinaJARfilethatisbundledwithintheWARmodule.
ToincludeenterprisebeanclassfilesinaWARmodule,theclassfilesshouldbeinthe
WEB-INF/classes directory.
ToincludeaJARfilethatcontainsenterprisebeansinaWARmodule,addtheJARtothe
WEB-INF/lib directoryoftheWARmodule.
WARmodulesthatcontainenterprisebeansdonotrequirean ejb-jar.xml deployment
descriptor.Iftheapplicationuses ejb-jar.xml ,itmustbelocatedintheWARmodule’s
WEB-INFdirectory.
JARfilesthatcontainenterprisebeanclassespackagedwithinaWARmodulearenot
consideredEJBJARfiles,evenifthebundledJARfileconformstotheformatofanEJBJARfile.FIGURE22–2 StructureofanEnterpriseBeanJAR
Assembly Root
META-INF
ejb-jar.xmlglassfish-ejb-jar.xml(optional)MANIFEST.MFAll .class files
for this module
TheContentsofanEnterpriseBean
TheJavaEE6Tutorial • January2013 448
TheenterprisebeanscontainedwithintheJARfilearesemanticallyequivalenttoenterprise
beanslocatedintheWARmodule’s WEB-INF/classes directory,andtheenvironment
namespaceofalltheenterprisebeansarescopedtotheWARmodule.
Forexample,supposethatawebapplicationconsistsofashoppingcartenterprisebean,acredit
cardprocessingenterprisebean,andaJavaservletfrontend.Theshoppingcartbeanexposesalocal,no-interfaceviewandisdefinedasfollows:
package com.example.cart;
@Stateless
public class CartBean { ... }
ThecreditcardprocessingbeanispackagedwithinitsownJARfile, cc.jar,exposesalocal,
no-interfaceview,andisdefinedasfollows:
package com.example.cc;
@Stateless
public class CreditCardBean { ... }
Theservlet, com.example.web.StoreServlet ,handlesthewebfrontendandusesboth
CartBean andCreditCardBean .TheWARmodulelayoutforthisapplicationlooksasfollows:
WEB-INF/classes/com/example/cart/CartBean.class
WEB-INF/classes/com/example/web/StoreServletWEB-INF/lib/cc.jarWEB-INF/ejb-jar.xmlWEB-INF/web.xml
NamingConventionsforEnterpriseBeans
Becauseenterprisebeansarecomposedofmultipleparts,it’susefultofollowanaming
conventionforyourapplications. Table22–2 summarizestheconventionsfortheexample
beansinthistutorial.
TABLE22–2 NamingConventionsforEnterpriseBeans
Item Syntax Example
Enterprisebeanname name Bean AccountBean
Enterprisebeanclass name Bean AccountBean
Businessinterface name AccountNamingConventionsforEnterpriseBeans
Chapter22 • EnterpriseBeans 449
TheLifecyclesofEnterpriseBeans
Anenterprisebeangoesthroughvariousstagesduringitslifetime,orlifecycle.Eachtypeof
enterprisebean(statefulsession,statelesssession,singletonsession,ormessage-driven)hasadifferentlifecycle.
Thedescriptionsthatfollowrefertomethodsthatareexplainedalongwiththecodeexamples
inthenexttwochapters.Ifyouarenewtoenterprisebeans,youshouldskipthissectionandrunthecodeexamplesfirst.
TheLifecycleofaStatefulSessionBean
Figure22–3 illustratesthestagesthatasessionbeanpassesthroughduringitslifetime.The
clientinitiatesthelifecyclebyobtainingareferencetoastatefulsessionbean.Thecontainerperformsanydependencyinjectionandtheninvokesthemethodannotatedwith@PostConstruct ,ifany.Thebeanisnowreadytohaveitsbusinessmethodsinvokedbythe
client.
Whileinthereadystage,theEJBcontainermaydecidetodeactivate,or passivate,thebeanby
movingitfrommemorytosecondarystorage.(Typically,theEJBcontainerusesaleast-recently-usedalgorithmtoselectabeanforpassivation.)TheEJBcontainerinvokesthemethodannotated @PrePassivate ,ifany,immediatelybeforepassivatingit.Ifaclientinvokes
abusinessmethodonthebeanwhileitisinthepassivestage,theEJBcontaineractivatesthebean,callsthemethodannotated @PostActivate ,ifany,andthenmovesittothereadystage.FIGURE22–3 LifecycleofaStatefulSessionBean
Does Not Exist Ready PassivePrePassivate
callback, if any
PostActivate
callback, if anyCreate
Dependency injection, if anyPostConstruct callback, if anyInit method, or ejbCreate<METHOD>, if any1
2
RemovePreDestroy callback, if any1
23
4TheLifecyclesofEnterpriseBeans
TheJavaEE6Tutorial • January2013 450
Attheendofthelifecycle,theclientinvokesamethodannotated @Remove,andtheEJB
containercallsthemethodannotated @PreDestroy ,ifany.Thebean’sinstanceisthenreadyfor
garbagecollection.
Yourcodecontrolstheinvocationofonlyonelifecyclemethod:themethodannotated @Remove.
Allothermethodsin Figure22–3 areinvokedbytheEJBcontainer.See Chapter45,“Resources
andResourceAdapters,” formoreinformation.
TheLifecycleofaStatelessSessionBean
Becauseastatelesssessionbeanisneverpassivated,itslifecyclehasonlytwostages:nonexistentandreadyfortheinvocationofbusinessmethods.
Figure22–4 illustratesthestagesofastateless
sessionbean.
TheEJBcontainertypicallycreatesandmaintainsapoolofstatelesssessionbeans,beginning
thestatelesssessionbean’slifecycle.Thecontainerperformsanydependencyinjectionandtheninvokesthemethodannotated @PostConstruct ,ifitexists.Thebeanisnowreadytohaveits
businessmethodsinvokedbyaclient.
Attheendofthelifecycle,theEJBcontainercallsthemethodannotated @PreDestroy ,ifit
exists.Thebean’sinstanceisthenreadyforgarbagecollection.
TheLifecycleofaSingletonSessionBean
Likeastatelesssessionbean,asingletonsessionbeanisneverpassivatedandhasonlytwostages,nonexistentandreadyfortheinvocationofbusinessmethods,asshownin
Figure22–5 .FIGURE22–4 LifecycleofaStatelessSessionBean
Does Not Exist ReadyDependency injection, if any
PostConstruct callback, if any1
2
PreDestroy callback, if anyTheLifecyclesofEnterpriseBeans
Chapter22 • EnterpriseBeans 451
TheEJBcontainerinitiatesthesingletonsessionbeanlifecyclebycreatingthesingleton
instance.Thisoccursuponapplicationdeploymentifthesingletonisannotatedwiththe@Startup annotationThecontainerperformsanydependencyinjectionandtheninvokesthe
methodannotated @PostConstruct ,ifitexists.Thesingletonsessionbeanisnowreadytohave
itsbusinessmethodsinvokedbytheclient.
Attheendofthelifecycle,theEJBcontainercallsthemethodannotated @PreDestroy ,ifit
exists.Thesingletonsessionbeanisnowreadyforgarbagecollection.
TheLifecycleofaMessage-DrivenBean
Figure22–6 illustratesthestagesinthelifecycleofamessage-drivenbean.
TheEJBcontainerusuallycreatesapoolofmessage-drivenbeaninstances.Foreachinstance,
theEJBcontainerperformsthesetasks.
1. Ifthemessage-drivenbeanusesdependencyinjection,thecontainerinjectsthesereferences
beforeinstantiatingtheinstance.
2. Thecontainercallsthemethodannotated @PostConstruct ,ifany.FIGURE22–5 LifecycleofaSingletonSessionBean
Does Not Exist ReadyDependency injection, if any
PostConstruct callback, if any1
2
PreDestroy callback, if any
FIGURE22–6 LifecycleofaMessage-DrivenBean
Does Not Exist Ready
PreDestroy callback, if anyonMessageDependency injection, if any
PostConstruct callback, if any1
2TheLifecyclesofEnterpriseBeans
TheJavaEE6Tutorial • January2013 452
Likeastatelesssessionbean,amessage-drivenbeanisneverpassivatedandhasonlytwostates:
nonexistentandreadytoreceivemessages.
Attheendofthelifecycle,thecontainercallsthemethodannotated @PreDestroy ,ifany.The
bean’sinstanceisthenreadyforgarbagecollection.
FurtherInformationaboutEnterpriseBeans
FormoreinformationonEnterpriseJavaBeanstechnology,see
■EnterpriseJavaBeans3.1specification:
http://jcp.org/en/jsr/summary?id=318
■EnterpriseJavaBeanswebsite:
http://www.oracle.com/technetwork/java/ejb-141389.htmlFurtherInformationaboutEnterpriseBeans
Chapter22 • EnterpriseBeans 453
454
GettingStartedwithEnterpriseBeans
Thischaptershowshowtodevelop,deploy,andrunasimpleJavaEEapplicationnamed
converter .Thepurposeof converter istocalculatecurrencyconversionsbetweenJapanese
yenandEurodollars.The converter applicationconsistsofanenterprisebean,whichperforms
thecalculations,andawebclient.
Here’sanoverviewofthestepsyou’llfollowinthischapter:
1. Createtheenterprisebean: ConverterBean .
2. Createthewebclient.3. Deploy converter ontotheserver.
4. Usingabrowser,runthewebclient.
Beforeproceeding,makesurethatyou’vedonethefollowing:
■ReadChapter1,“Overview”
■Becomefamiliarwithenterprisebeans(see Chapter22,“EnterpriseBeans” )
■Startedtheserver(see “StartingandStoppingtheGlassFishServer”onpage73 )
Thefollowingtopicsareaddressedhere:
■“CreatingtheEnterpriseBean”onpage455
■“ModifyingtheJavaEEApplication”onpage458
CreatingtheEnterpriseBean
Theenterprisebeaninourexampleisastatelesssessionbeancalled ConverterBean .Thesource
codefor ConverterBean isinthetut-install /examples/ejb/converter/src/java/ directory.
Creating ConverterBean requiresthesesteps:
1. Codingthebean’simplementationclass(thesourcecodeisprovided)
2. Compilingthesourcecode23CHAPTER 23
455
CodingtheEnterpriseBeanClass
Theenterprisebeanclassforthisexampleiscalled ConverterBean .Thisclassimplementstwo
businessmethods: dollarToYen andyenToEuro .Becausetheenterprisebeanclassdoesn’t
implementabusinessinterface,theenterprisebeanexposesalocal,no-interfaceview.ThepublicmethodsintheenterprisebeanclassareavailabletoclientsthatobtainareferencetoConverterBean .Thesourcecodeforthe ConverterBean classisasfollows:
package converter.ejb;
import java.math.BigDecimal;
import javax.ejb.*;
@Stateless
public class ConverterBean {
private BigDecimal yenRate = new BigDecimal( "83.0602 ");
private BigDecimal euroRate = new BigDecimal( "0.0093016 ");
public BigDecimal dollarToYen(BigDecimal dollars) {
BigDecimal result = dollars.multiply(yenRate);return result.setScale(2, BigDecimal.ROUND_UP);
}
public BigDecimal yenToEuro(BigDecimal yen) {
BigDecimal result = yen.multiply(euroRate);return result.setScale(2, BigDecimal.ROUND_UP);
}
}
Notethe @Stateless annotationdecoratingtheenterprisebeanclass.Thisannotationletsthe
containerknowthat ConverterBean isastatelesssessionbean.
CreatingtheconverterWebClient
Thewebclientiscontainedinthefollowingservletclass:
tut-install /examples/ejb/converter/src/java/converter/web/ConverterServlet.java
AJavaservletisawebcomponentthatrespondstoHTTPrequests.
TheConverterServlet classusesdependencyinjectiontoobtainareferenceto
ConverterBean .The javax.ejb.EJB annotationisaddedtothedeclarationoftheprivate
membervariable converterBean ,whichisoftype ConverterBean .ConverterBean exposesa
local,no-interfaceview,sotheenterprisebeanimplementationclassisthevariabletype:
@WebServlet
public class ConverterServlet extends HttpServlet {
@EJBConverterBean converterBean;...
}CreatingtheEnterpriseBean
TheJavaEE6Tutorial • January2013 456
Whentheuserentersanamounttobeconvertedtoyenandeuro,theamountisretrievedfrom
therequestparameters;thenthe ConverterBean.dollarToYen andthe
ConverterBean.yenToEuro methodsarecalled:
...
try {
String amount = request.getParameter( "amount ");
if (amount != null && amount.length() > 0) {
// convert the amount to a BigDecimal from the request parameterBigDecima l d = new BigDecimal(amount);
// call the ConverterBean.dollarToYen() method to get the amount// in YenBigDecimal yenAmount = converter.dollarToYen(d);
// call the ConverterBean.yenToEuro() method to get the amount
// in EurosBigDecimal euroAmount = converter.yenToEuro(yenAmount);...
}...
}
Theresultsaredisplayedtotheuser.
RunningtheconverterExample
Nowyouarereadytocompiletheenterprisebeanclass( ConverterBean.java )andtheservlet
class( ConverterServlet.java )andtopackagethecompiledclassesintoaWARfile.Youcan
useeitherNetBeansIDEorAnttobuild,package,deploy,andrunthe converter example.
▼ToBuild,Package,andDeploytheconverterExampleinNetBeansIDE
FromtheFilemenu,chooseOpenProject.
IntheOpenProjectdialog,navigateto:
tut-install /examples/ejb/
Selectthe converter folder.
SelecttheOpenasMainProjectcheckbox.ClickOpenProject.IntheProjectstab,right-clickthe converter projectandselectDeploy.1
2
3
456CreatingtheEnterpriseBean
Chapter23 • GettingStartedwithEnterpriseBeans 457
▼ToBuild,Package,andDeploytheconverterExampleUsingAnt
Inaterminalwindow,goto:
tut-install /examples/ejb/converter/
Typethefollowingcommand:
ant all
Thiscommandcallsthe defaulttask,whichcompilesthesourcefilesfortheenterprisebean
andtheservlet,placingtheclassfilesinthe buildsubdirectory(notthe srcdirectory)ofthe
project.ThedefaulttaskpackagestheprojectintoaWARmodule: converter.war .Formore
informationabouttheAnttool,see “BuildingtheExamples”onpage75 .
Note–Whencompilingthecode,the anttaskincludestheJavaEEAPIJARfilesintheclasspath.
TheseJARsresideinthe modulesdirectoryofyourGlassFishServerinstallation.Ifyouplanto
useothertoolstocompilethesourcecodeforJavaEEcomponents,makesurethattheclasspath
includestheJavaEEAPIJARfiles.
▼ToRuntheconverterExample
OpenawebbrowsertothefollowingURL:
http://localhost:8080/converter
TheServletConverterServletpageopens.
Type 100intheinputfieldandclickSubmit.
Asecondpageopens,showingtheconvertedvalues.
ModifyingtheJavaEEApplication
TheGlassFishServersupportsiterativedevelopment.WheneveryoumakeachangetoaJava
EEapplication,youmustredeploytheapplication.
▼ToModifyaClassFile
Tomodifyaclassfileinanenterprisebean,youchangethesourcecode,recompileit,andredeploytheapplication.Forexample,toupdatetheexchangerateinthe dollarToYen business
methodofthe ConverterBean class,youwouldfollowthesesteps.
Tomodify ConverterServlet ,theprocedureisthesame.
EditConverterBean.java andsavethefile.1
2
1
2
1ModifyingtheJavaEEApplication
TheJavaEE6Tutorial • January2013 458
Recompilethesourcefile.
■Torecompile ConverterBean.java inNetBeansIDE,right-clickthe converter projectand
selectRun.
Thisrecompilesthe ConverterBean.java file,replacestheoldclassfileinthebuild
directory,andredeploystheapplicationtoGlassFishServer.
■Recompile ConverterBean.java usingAnt:
a. Inaterminalwindow,gotothe tut-install /examples/ejb/converter/ directory.
b. Typethefollowingcommand:
ant all
Thiscommandrepackages,deploys,andrunstheapplication.2ModifyingtheJavaEEApplication
Chapter23 • GettingStartedwithEnterpriseBeans 459
460
RunningtheEnterpriseBeanExamples
Sessionbeansprovideasimplebutpowerfulwaytoencapsulatebusinesslogicwithinan
application.TheycanbeaccessedfromremoteJavaclients,webserviceclients,andcomponentsrunninginthesameserver.
In
Chapter23,“GettingStartedwithEnterpriseBeans,” youbuiltastatelesssessionbeannamed
ConverterBean .Thischapterexaminesthesourcecodeoffourmoresessionbeans:
■CartBean :astatefulsessionbeanthatisaccessedbyaremoteclient
■CounterBean :asingletonsessionbean
■HelloServiceBean :astatelesssessionbeanthatimplementsawebservice
■TimerSessionBean :astatelesssessionbeanthatsetsatimer
Thefollowingtopicsareaddressedhere:
■“The cartExample”onpage461
■“ASingletonSessionBeanExample: counter”onpage468
■“AWebServiceExample: helloservice ”onpage476
■“UsingtheTimerService”onpage479
■“HandlingExceptions”onpage489
ThecartExample
Thecartexamplerepresentsashoppingcartinanonlinebookstoreandusesastatefulsession
beantomanagetheoperationsoftheshoppingcart.Thebean’sclientcanaddabooktothecart,removeabook,orretrievethecart’scontents.Toassemble cart,youneedthefollowingcode:
■Sessionbeanclass( CartBean )
■Remotebusinessinterface( Cart)
Allsessionbeansrequireasessionbeanclass.Allenterprisebeansthatpermitremoteaccess
musthavearemotebusinessinterface.Tomeettheneedsofaspecificapplication,anenterprise24CHAPTER 24
461
beanmayalsoneedsomehelperclasses.The CartBean sessionbeanusestwohelperclasses,
BookException andIdVerifier ,whicharediscussedinthesection “HelperClasses”on
page466.
Thesourcecodeforthisexampleisinthe tut-install /examples/ejb/cart/ directory.
TheBusinessInterface
TheCartbusinessinterfaceisaplainJavainterfacethatdefinesallthebusinessmethods
implementedinthebeanclass.Ifthebeanclassimplementsasingleinterface,thatinterfaceisassumedtothebusinessinterface.Thebusinessinterfaceisalocalinterfaceunlessitisannotatedwiththe javax.ejb.Remote annotation;the javax.ejb.Local annotationis
optionalinthiscase.
Thebeanclassmayimplementmorethanoneinterface.Inthatcase,thebusinessinterfaces
musteitherbeexplicitlyannotated @Localor@Remoteorbespecifiedbydecoratingthebean
classwith @Localor@Remote.However,thefollowinginterfacesareexcludedwhen
determiningwhetherthebeanclassimplementsmorethanoneinterface:
■java.io.Serializable
■java.io.Externalizable
■Anyoftheinterfacesdefinedbythe javax.ejb package
Thesourcecodeforthe Cartbusinessinterfacefollows:
package cart.ejb;
import cart.util.BookException;
import java.util.List;import javax.ejb.Remote;
@Remote
public interface Cart {
public void initialize(String person) throws BookException;public void initialize(String person, String id)
throws BookException;
public void addBook(String title);public void removeBook(String title) throws BookException;public List<String> getContents();public void remove();
}ThecartExample
TheJavaEE6Tutorial • January2013 462
SessionBeanClass
Thesessionbeanclassforthisexampleiscalled CartBean .Likeanystatefulsessionbean,the
CartBean classmustmeetthefollowingrequirements.
■Theclassisannotated @Stateful .
■Theclassimplementsthebusinessmethodsdefinedinthebusinessinterface.
Statefulsessionbeansalsomay
■Implementthebusinessinterface,aplainJavainterface.Itisgoodpracticetoimplementthe
bean’sbusinessinterface.
■Implementanyoptionallifecyclecallbackmethods,annotated @PostConstruct ,
@PreDestroy ,@PostActivate ,and @PrePassivate .
■Implementanyoptionalbusinessmethodsannotated @Remove.
Thesourcecodeforthe CartBean classfollows:
package cart.ejb;
import cart.util.BookException;
import cart.util.IdVerifier;import java.util.ArrayList;import java.util.List;import javax.ejb.Remove;import javax.ejb.Stateful;
@Stateful
public class CartBean implements Cart {
String customerName;
String customerId;List<String> contents;
public void initialize(String person) throws BookException {
if (person == null) {
throw new BookException( "Null person not allowed. ");
} else {
customerName = person;
}
customerId = "0";
contents = new ArrayList<String>();
}
public void initialize(String person, String id)
throws BookException {
if (person == null) {
throw new BookException( "Null person not allowed. ");
} else {
customerName = person;
}
IdVerifier idChecker = new IdVerifier();ThecartExample
Chapter24 • RunningtheEnterpriseBeanExamples 463
if (idChecker.validate(id)) {
customerId = id;
} else {
throw new BookException( "Invalid id: "+ id);
}
contents = new ArrayList<String>();
}
public void addBook(String title) {
contents.add(title);
}
public void removeBook(String title) throws BookException {
boolean result = contents.remove(title);if (result == false) {
throw new BookException(title + "not in cart. ");
}
}
public List<String> getContents() {
return contents;
}
@Remove
public void remove() {
contents = null;
}
}
LifecycleCallbackMethods
Amethodinthebeanclassmaybedeclaredasalifecyclecallbackmethodbyannotatingthe
methodwiththefollowingannotations:
■javax.annotation.PostConstruct :Methodsannotatedwith @PostConstruct areinvoked
bythecontaineronnewlyconstructedbeaninstancesafteralldependencyinjectionhascompletedandbeforethefirstbusinessmethodisinvokedontheenterprisebean.
■javax.annotation.PreDestroy :Methodsannotatedwith @PreDestroy areinvokedafter
anymethodannotated @Removehascompletedandbeforethecontainerremovesthe
enterprisebeaninstance.
■javax.ejb.PostActivate :Methodsannotatedwith @PostActivate areinvokedbythe
containerafterthecontainermovesthebeanfromsecondarystoragetoactivestatus.
■javax.ejb.PrePassivate :Methodsannotatedwith @PrePassivate areinvokedbythe
containerbeforeitpassivatestheenterprisebean,meaningthatthecontainertemporarilyremovesthebeanfromtheenvironmentandsavesittosecondarystorage.
Lifecyclecallbackmethodsmustreturn voidandhavenoparameters.ThecartExample
TheJavaEE6Tutorial • January2013 464
BusinessMethods
Theprimarypurposeofasessionbeanistorunbusinesstasksfortheclient.Theclientinvokes
businessmethodsontheobjectreferenceitgetsfromdependencyinjectionorJNDIlookup.Fromtheclient’sperspective,thebusinessmethodsappeartorunlocally,althoughtheyrunremotelyinthesessionbean.Thefollowingcodesnippetshowshowthe CartClient program
invokesthebusinessmethods:
cart.create( "Duke DeEarl ","123");
...cart.addBook( "Bel Canto ");
...
List<String> bookList = cart.getContents();...cart.removeBook( "Gravity’s Rainbow ");
TheCartBean classimplementsthebusinessmethodsinthefollowingcode:
public void addBook(String title) {
contents.addElement(title);
}
public void removeBook(String title) throws BookException {
boolean result = contents.remove(title);if (result == false) {
throw new BookException(title + "not in cart. ");
}
}
public List<String> getContents() {
return contents;
}
Thesignatureofabusinessmethodmustconformtotheserules.
■Themethodnamemustnotbeginwith ejb,toavoidconflictswithcallbackmethods
definedbytheEJBarchitecture.Forexample,youcannotcallabusinessmethod ejbCreate
orejbActivate .
■Theaccesscontrolmodifiermustbe public.
■Ifthebeanallowsremoteaccessthrougharemotebusinessinterface,theargumentsand
returntypesmustbelegaltypesfortheJavaRemoteMethodInvocation(RMI)API.
■Ifthebeanisawebserviceendpoint,theargumentsandreturntypesforthemethods
annotated @WebMethod mustbelegaltypesforJAX-WS.
■Themodifiermustnotbe staticorfinal.
Thethrowsclausecanincludeexceptionsthatyoudefineforyourapplication.The removeBook
method,forexample,throwsa BookException ifthebookisnotinthecart.
Toindicateasystem-levelproblem,suchastheinabilitytoconnecttoadatabase,abusiness
methodshouldthrowa javax.ejb.EJBException .ThecontainerwillnotwrapapplicationThecartExample
Chapter24 • RunningtheEnterpriseBeanExamples 465
exceptions,suchas BookException .Because EJBException isasubclassof RuntimeException ,
youdonotneedtoincludeitinthe throwsclauseofthebusinessmethod.
The@RemoveMethod
Businessmethodsannotatedwith javax.ejb.Remove inthestatefulsessionbeanclasscanbe
invokedbyenterprisebeanclientstoremovethebeaninstance.Thecontainerwillremovetheenterprisebeanaftera @Removemethodcompletes,eithernormallyorabnormally.
InCartBean ,the removemethodisa @Removemethod:
@Remove
public void remove() {
contents = null;
}
HelperClasses
TheCartBean sessionbeanhastwohelperclasses: BookException andIdVerifier .The
BookException isthrownbythe removeBook method,andthe IdVerifier validatesthe
customerId inoneofthe createmethods.HelperclassesmayresideinanEJBJARfilethat
containstheenterprisebeanclass,aWARfileiftheenterprisebeanispackagedwithinaWAR,orinanEARthatcontainsanEJBJARoraWARfilethatcontainsanenterprisebean.
RunningthecartExample
Nowyouarereadytocompiletheremoteinterface( Cart.java ),thehomeinterface
(CartHome.java ),theenterprisebeanclass( CartBean.java ),theclientclass
(CartClient.java ),andthehelperclasses( BookException.java andIdVerifier.java ).
Followthesesteps.
YoucanuseeitherNetBeansIDEorAnttobuild,package,deploy,andrunthe cart
application.
▼ToRunthecartExampleUsingNetBeansIDE
FromtheFilemenu,chooseOpenProject.
IntheOpenProjectdialog,navigateto:
tut-install /examples/ejb/
Selectthe cartfolder.1
2
3ThecartExample
TheJavaEE6Tutorial • January2013 466
SelecttheOpenasMainProjectandOpenRequiredProjectscheckboxes.
ClickOpenProject.IntheProjectstab,right-clickthe cartprojectandselectDeploy.
Thisbuildsandpackagestheapplicationinto cart.ear ,locatedin
tut-install /examples/ejb/cart/dist/ ,anddeploysthisEARfiletoyourGlassFishServer
instance.
FromtheRunmenu,chooseRunMainProject.
Youwillseetheoutputofthe cartapplicationclientintheOutputpane:
...
Retrieving book title from cart: Infinite JestRetrieving book title from cart: Bel CantoRetrieving book title from cart: Kafka on the ShoreRemoving "Gravity’s Rainbow "from cart.
Caught a BookException: "Gravity’s Rainbow "not in cart.
Java Result: 1run-cart-app-client:run-nb:BUILD SUCCESSFUL (total time: 14 seconds)
▼ToRunthecartExampleUsingAnt
Inaterminalwindow,goto:
tut-install /examples/ejb/cart/
Typethefollowingcommand:
ant
Thiscommandcallsthe defaulttarget,whichbuildsandpackagestheapplicationintoanEAR
file,cart.ear ,locatedinthe distdirectory.
Typethefollowingcommand:
ant deploy
Thecart.ear fileisdeployedtotheGlassFishServer.
Typethefollowingcommand:
ant run
ThistaskretrievestheapplicationclientJAR, cartClient.jar ,andrunstheapplicationclient.
TheclientJAR, cartClient.jar ,containstheapplicationclientclass,thehelperclass
BookException ,andthe Cartbusinessinterface.
Thistaskisequivalenttorunningthefollowingcommand:
appclient -client cartClient.jar4
56
7
1
2
3
4ThecartExample
Chapter24 • RunningtheEnterpriseBeanExamples 467
Whenyouruntheclient,theapplicationclientcontainerinjectsanycomponentreferences
declaredintheapplicationclientclass,inthiscasethereferencetothe Cartenterprisebean.
TheallTask
Asaconvenience,the alltaskwillbuild,package,deploy,andruntheapplication.Todothis,
enterthefollowingcommand:
ant all
ASingletonSessionBeanExample:counter
Thecounterexampledemonstrateshowtocreateasingletonsessionbean.
CreatingaSingletonSessionBean
Thejavax.ejb.Singleton annotationisusedtospecifythattheenterprisebean
implementationclassisasingletonsessionbean:
@Singleton
public class SingletonBean { ... }
InitializingSingletonSessionBeans
TheEJBcontainerisresponsiblefordeterminingwhentoinitializeasingletonsessionbean
instanceunlessthesingletonsessionbeanimplementationclassisannotatedwiththejavax.ejb.Startup annotation.Inthiscase,sometimescalled eagerinitialization ,theEJB
containermustinitializethesingletonsessionbeanuponapplicationstartup.ThesingletonsessionbeanisinitializedbeforetheEJBcontainerdeliversclientrequeststoanyenterprisebeansintheapplication.Thisallowsthesingletonsessionbeantoperform,forexample,applicationstartuptasks.
Thefollowingsingletonsessionbeanstoresthestatusofanapplicationandiseagerlyinitialized:
@Startup
@Singletonpublic class StatusBean {
private String status;
@PostConstruct
void init {
status = "Ready ";
}...
}ASingletonSessionBeanExample:counter
TheJavaEE6Tutorial • January2013 468
Sometimesmultiplesingletonsessionbeansareusedtoinitializedataforanapplicationand
thereforemustbeinitializedinaspecificorder.Inthesecases,usethe javax.ejb.DependsOn
annotationtodeclarethestartupdependenciesofthesingletonsessionbean.The @DependsOn
annotation’s valueattributeisoneormorestringsthatspecifythenameofthetargetsingleton
sessionbean.Ifmorethanonedependentsingletonbeanisspecifiedin @DependsOn ,theorder
inwhichtheyarelistedisnotnecessarilytheorderinwhichtheEJBcontainerwillinitializethetargetsingletonsessionbeans.
Thefollowingsingletonsessionbean, PrimaryBean ,shouldbestartedupfirst:
@Singleton
public class PrimaryBean { ... }
SecondaryBean dependson PrimaryBean :
@Singleton
@DependsOn( "PrimaryBean ")
public class SecondaryBean { ... }
ThisguaranteesthattheEJBcontainerwillinitialize PrimaryBean before SecondaryBean .
Thefollowingsingletonsessionbean, TertiaryBean ,dependson PrimaryBean and
SecondaryBean :
@Singleton
@DependsOn({ "PrimaryBean ","SecondaryBean "})
public class TertiaryBean { ... }
SecondaryBean explicitlyrequires PrimaryBean tobeinitializedbeforeitisinitialized,through
itsown @DependsOn annotation.Inthiscase,theEJBcontainerwillfirstinitialize PrimaryBean ,
then SecondaryBean ,andfinally TertiaryBean .
If,however, SecondaryBean didnotexplicitlydependon PrimaryBean ,theEJBcontainermay
initializeeither PrimaryBean orSecondaryBean first.Thatis,theEJBcontainercouldinitialize
thesingletonsinthefollowingorder: SecondaryBean ,PrimaryBean ,TertiaryBean .
ManagingConcurrentAccessinaSingletonSessionBean
Singletonsessionbeansaredesignedfor concurrentaccess ,situationsinwhichmanyclients
needtoaccessasingleinstanceofasessionbeanatthesametime.Asingleton’sclientneedsonlyareferencetoasingletoninordertoinvokeanybusinessmethodsexposedbythesingletonanddoesn’tneedtoworryaboutanyotherclientsthatmaybesimultaneouslyinvokingbusinessmethodsonthesamesingleton.
Whencreatingasingletonsessionbean,concurrentaccesstothesingleton’sbusinessmethods
canbecontrolledintwoways:container-managedconcurrencyandbean-managedconcurrency.ASingletonSessionBeanExample:counter
Chapter24 • RunningtheEnterpriseBeanExamples 469
Thejavax.ejb.ConcurrencyManagement annotationisusedtospecifycontainer-managedor
bean-managedconcurrencyforthesingleton.With @ConcurrencyManagement ,atypeattribute
mustbesettoeither javax.ejb.ConcurrencyManagementType.CONTAINER or
javax.ejb.ConcurrencyManagementType.BEAN .Ifno @ConcurrencyManagement annotationis
presentonthesingletonimplementationclass,theEJBcontainerdefaultofcontainer-managedconcurrencyisused.
Container-ManagedConcurrency
Ifasingletonuses container-managedconcurrency ,theEJBcontainercontrolsclientaccessto
thebusinessmethodsofthesingleton.The javax.ejb.Lock annotationanda
javax.ejb.LockType typeareusedtospecifytheaccesslevelofthesingleton’sbusiness
methodsor @Timeout methods.The LockType enumeratedtypesare READandWRITE.
Annotateasingleton’sbusinessortimeoutmethodwith @Lock(LockType.READ) ifthemethod
canbeconcurrentlyaccessed,orshared,withmanyclients.Annotatethebusinessortimeoutmethodwith @Lock(LockType.WRITE) ifthesingletonsessionbeanshouldbelockedtoother
clientswhileaclientiscallingthatmethod.Typically,the @Lock(LockType.WRITE) annotation
isusedwhenclientsaremodifyingthestateofthesingleton.
Annotatingasingletonclasswith @Lockspecifiesthatallthebusinessmethodsandanytimeout
methodsofthesingletonwillusethespecifiedlocktypeunlesstheyexplicitlysetthelocktypewithamethod-level @Lockannotation.Ifno @Lockannotationispresentonthesingletonclass,
thedefaultlocktype, @Lock(LockType.WRITE) ,isappliedtoallbusinessandtimeoutmethods.
Thefollowingexampleshowshowtousethe @ConcurrencyManagement ,
@Lock(LockType.READ) ,and @Lock(LockType.WRITE) annotationsforasingletonthatuses
container-managedconcurrency.
Althoughbydefault,singletonsusecontainer-managedconcurrency,the
@ConcurrencyManagement(CONTAINER) annotationmaybeaddedattheclasslevelofthe
singletontoexplicitlysettheconcurrencymanagementtype:
@ConcurrencyManagement(ConcurrencyManagementType.CONTAINER)
@Singletonpublic class ExampleSingletonBean {
private String state;
@Lock(LockType.READ)
public String getState() {
return state;
}
@Lock(LockType.WRITE)
public void setState(String newState) {
state = newState;
}
}ASingletonSessionBeanExample:counter
TheJavaEE6Tutorial • January2013 470
ThegetState methodcanbeaccessedbymanyclientsatthesametimebecauseitisannotated
with @Lock(LockType.READ) .Whenthe setState methodiscalled,however,allthemethods
inExampleSingletonBean willbelockedtootherclientsbecause setState isannotatedwith
@Lock(LockType.WRITE) .Thispreventstwoclientsfromattemptingtosimultaneouslychange
thestatevariableof ExampleSingletonBean .
ThegetDataandgetStatus methodsinthefollowingsingletonareoftype READ,andthe
setStatus methodisoftype WRITE:
@Singleton
@Lock(LockType.READ)public class SharedSingletonBean {
private String data;private String status;
public String getData() {
return data;
}
public String getStatus() {
return status;
}
@Lock(LockType.WRITE)
public void setStatus(String newStatus) {
status = newStatus;
}
}
Ifamethodisoflockingtype WRITE,clientaccesstoallthesingleton’smethodsisblockeduntil
thecurrentclientfinishesitsmethodcalloranaccesstimeoutoccurs.Whenanaccesstimeoutoccurs,theEJBcontainerthrowsa javax.ejb.ConcurrentAccessTimeoutException .The
javax.ejb.AccessTimeout annotationisusedtospecifythenumberofmillisecondsbeforean
accesstimeoutoccurs.Ifaddedattheclasslevelofasingleton, @AccessTimeout specifiesthe
accesstimeoutvalueforallmethodsinthesingletonunlessamethodexplicitlyoverridesthedefaultwithitsown @AccessTimeout annotation.
The@AccessTimeout annotationcanbeappliedtoboth @Lock(LockType.READ) and
@Lock(LockType.WRITE) methods.The @AccessTimeout annotationhasonerequiredelement,
value,andoneoptionalelement, unit.Bydefault,the valueisspecifiedinmilliseconds.To
changethe valueunit,set unittooneofthe java.util.concurrent.TimeUnit constants:
NANOSECONDS ,MICROSECONDS ,MILLISECONDS ,orSECONDS.
Thefollowingsingletonhasadefaultaccesstimeoutvalueof120,000milliseconds,or2
minutes.The doTediousOperation methodoverridesthedefaultaccesstimeoutandsetsthe
valueto360,000milliseconds,or6minutes.
@Singleton
@AccessTimeout(value=120000)public class StatusSingletonBean {
private String status;ASingletonSessionBeanExample:counter
Chapter24 • RunningtheEnterpriseBeanExamples 471
@Lock(LockType.WRITE)
public void setStatus(String new Status) {
status = newStatus;
}
@Lock(LockType.WRITE)
@AccessTimeout(value=360000)public void doTediousOperation {
...
}
}
Thefollowingsingletonhasadefaultaccesstimeoutvalueof60seconds,specifiedusingthe
TimeUnit.SECONDS constant:
@Singleton
@AccessTimeout(value=60, timeUnit=SECONDS)public class StatusSingletonBean { ... }
Bean-ManagedConcurrency
Singletonsthatuse bean-managedconcurrency allowfullconcurrentaccesstoallthebusiness
andtimeoutmethodsinthesingleton.Thedeveloperofthesingletonisresponsibleforensuringthatthestateofthesingletonissynchronizedacrossallclients.Developerswhocreatesingletonswithbean-managedconcurrencyareallowedtousetheJavaprogramminglanguagesynchronizationprimitives,suchas synchronization andvolatile ,topreventerrorsduring
concurrentaccess.
Adda @ConcurrencyManagement annotationwiththetypesetto
ConcurrencyManagementType.BEAN attheclasslevelofthesingletontospecifybean-managed
concurrency:
@ConcurrencyManagement(ConcurrencyManagementType.BEAN)
@Singletonpublic class AnotherSingletonBean { ... }
HandlingErrorsinaSingletonSessionBean
IfasingletonsessionbeanencountersanerrorwheninitializedbytheEJBcontainer,that
singletoninstancewillbedestroyed.
Unlikeotherenterprisebeans,onceasingletonsessionbeaninstanceisinitialized,itisnot
destroyedifthesingleton’sbusinessorlifecyclemethodscausesystemexceptions.Thisensuresthatthesamesingletoninstanceisusedthroughouttheapplicationlifecycle.
TheArchitectureofthecounterExample
Thecounterexampleconsistsofasingletonsessionbean, CounterBean ,andaJavaServerFaces
Faceletswebfrontend.ASingletonSessionBeanExample:counter
TheJavaEE6Tutorial • January2013 472
CounterBean isasimplesingletonwithonemethod, getHits,thatreturnsaninteger
representingthenumberoftimesawebpagehasbeenaccessed.HereisthecodeofCounterBean :
package counter.ejb;
import javax.ejb.Singleton;/**
* CounterBean is a simple singleton session bean that records the number* of hits to a web page.*/
@Singletonpublic class CounterBean {
private int hits = 1;
// Increment and return the number of hits
public int getHits() {
return hits++;
}
}
The@Singleton annotationmarks CounterBean asasingletonsessionbean. CounterBean uses
alocal,no-interfaceview.
CounterBean usestheEJBcontainer’sdefaultmetadatavaluesforsingletonstosimplifythe
codingofthesingletonimplementationclass.Thereisno @ConcurrencyManagement
annotationontheclass,sothedefaultofcontainer-managedconcurrencyaccessisapplied.Thereisno @Lockannotationontheclassorbusinessmethod,sothedefaultof @Lock(WRITE) is
appliedtotheonlybusinessmethod, getHits.
Thefollowingversionof CounterBean isfunctionallyequivalenttotheprecedingversion:
package counter.ejb;
import javax.ejb.Singleton;
import javax.ejb.ConcurrencyManagement;import static javax.ejb.ConcurrencyManagementType.CONTAINER;import javax.ejb.Lock;import javax.ejb.LockType.WRITE;
/**
* CounterBean is a simple singleton session bean that records the number* of hits to a web page.*/
@Singleton@ConcurrencyManagement(CONTAINER)public class CounterBean {
private int hits = 1;
// Increment and return the number of hits
@Lock(WRITE)public int getHits() {
return hits++;
}
}ASingletonSessionBeanExample:counter
Chapter24 • RunningtheEnterpriseBeanExamples 473
Thewebfrontendof counterconsistsofaJavaServerFacesmanagedbean, Count.java ,thatis
usedbytheFaceletsXHTMLfiles template.xhtml andtemplate-client.xhtml .The Count
JavaServerFacesmanagedbeanobtainsareferenceto CounterBean throughdependency
injection. Countdefinesa hitCount JavaBeansproperty.Whenthe getHitCount gettermethod
iscalledfromtheXHTMLfiles, CounterBean ’sgetHitsmethodiscalledtoreturnthecurrent
numberofpagehits.
Here’sthe Countmanagedbeanclass:
@ManagedBean
@SessionScopedpublic class Count {
@EJBprivate CounterBean counterBean;
private int hitCount;public Count() {
this.hitCount = 0;
}
public int getHitCount() {
hitCount = counterBean.getHits();return hitCount;
}public void setHitCount(int newHits) {
this.hitCount = newHits;
}
}
Thetemplate.xhtml andtemplate-client.xhtml filesareusedtorenderaFaceletsviewthat
displaysthenumberofhitstothatview.The template-client.xhtml fileusesanexpression
languagestatement, #{count.hitCount} ,toaccessthe hitCount propertyofthe Count
managedbean.Hereisthecontentof template-client.xhtml :
<?xml version=’1.0’ encoding=’UTF-8’ ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN "
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd ">
<html lang= "en"
xmlns= "http://www.w3.org/1999/xhtml "
xmlns:ui= "http://java.sun.com/jsf/facelets "
xmlns:h= "http://java.sun.com/jsf/html ">
<body>
This text above will not be displayed.<ui:composition template= "/template.xhtml ">
This text will not be displayed.<ui:define name= "title ">
This page has been accessed #{count.hitCount} time(s).
</ui:define>ASingletonSessionBeanExample:counter
TheJavaEE6Tutorial • January2013 474
This text will also not be displayed.
<ui:define name= "body">
Hooray!
</ui:define>
This text will not be displayed.
</ui:composition>This text below will also not be displayed.
</body>
</html>
RunningthecounterExample
YoucanuseeitherNetBeansIDEorAnttobuild,package,deploy,andrunthe counter
example.
▼ToRunthecounterExampleUsingNetBeansIDE
FromtheFilemenu,chooseOpenProject.
IntheOpenProjectdialog,navigateto:
tut-install /examples/ejb/
Selectthe counterfolder.
SelecttheOpenasMainProjectcheckbox.ClickOpenProject.IntheProjectstab,right-clickthe counterprojectandselectRun.
AwebbrowserwillopentheURL http://localhost:8080/counter ,whichdisplaysthe
numberofhits.
Clickthebrowser’sRefreshbuttontoseethehitcountincrement.
▼ToRunthecounterExampleUsingAnt
Inaterminalwindow,goto:
tut-install /examples/ejb/counter/
Typethefollowingcommand:
ant all1
2
3
456
7
1
2ASingletonSessionBeanExample:counter
Chapter24 • RunningtheEnterpriseBeanExamples 475
Thiswillbuildanddeploy countertoyourGlassFishServerinstance.
Inawebbrowser,typethefollowingURL:
http://localhost:8080/counter
Clickthebrowser’sRefreshbuttontoseethehitcountincrement.
AWebServiceExample:helloservice
Thisexampledemonstratesasimplewebservicethatgeneratesaresponsebasedon
informationreceivedfromtheclient. HelloServiceBean isastatelesssessionbeanthat
implementsasinglemethod: sayHello .Thismethodmatchesthe sayHello methodinvokedby
theclientdescribedin “ASimpleJAX-WSApplicationClient”onpage372 .
TheWebServiceEndpointImplementationClass
HelloServiceBean istheendpointimplementationclass,typicallytheprimaryprogramming
artifactforenterprisebeanwebserviceendpoints.Thewebserviceendpointimplementationclasshasthefollowingrequirements.
■Theclassmustbeannotatedwitheitherthe javax.jws.WebService orthe
javax.jws.WebServiceProvider annotation.
■TheimplementingclassmayexplicitlyreferenceanSEIthroughthe endpointInterface
elementofthe @WebService annotationbutisnotrequiredtodoso.Ifno
endpointInterface isspecifiedin @WebService ,anSEIisimplicitlydefinedforthe
implementingclass.
■Thebusinessmethodsoftheimplementingclassmustbepublicandmustnotbedeclaredstaticorfinal.
■Businessmethodsthatareexposedtowebserviceclientsmustbeannotatedwith
javax.jws.WebMethod .
■BusinessmethodsthatareexposedtowebserviceclientsmusthaveJAXB-compatible
parametersandreturntypes.SeethelistofJAXBdefaultdatatypebindingsat “Types
SupportedbyJAX-WS”onpage377 .
■Theimplementingclassmustnotbedeclared finalandmustnotbe abstract .
■Theimplementingclassmusthaveadefaultpublicconstructor.
■Theendpointclassmustbeannotated @Stateless .
■Theimplementingclassmustnotdefinethe finalize method.
■Theimplementingclassmayusethe javax.annotation.PostConstruct or
javax.annotation.PreDestroy annotationsonitsmethodsforlifecycleeventcallbacks.3
4AWebServiceExample:helloservice
TheJavaEE6Tutorial • January2013 476
The@PostConstruct methodiscalledbythecontainerbeforetheimplementingclass
beginsrespondingtowebserviceclients.
The@PreDestroy methodiscalledbythecontainerbeforetheendpointisremovedfrom
operation.
StatelessSessionBeanImplementationClass
TheHelloServiceBean classimplementsthe sayHello method,whichisannotated
@WebMethod .Thesourcecodeforthe HelloServiceBean classfollows:
package com.sun.tutorial.javaee.ejb;
import javax.ejb.Stateless;
import javax.jws.WebMethod;import javax.jws.WebService;
@Stateless
@WebServicepublic class HelloServiceBean {
private String message = "Hello, ";
public void HelloServiceBean() {}@WebMethod
public String sayHello(String name) {
return message + name + ".";
}
}
RunningthehelloserviceExample
YoucanuseeitherNetBeansIDEorAnttobuild,package,anddeploythe helloservice
example.YoucanthenusetheAdministrationConsoletotestthewebserviceendpointmethods.
▼ToBuild,Package,andDeploythehelloserviceExampleUsing
NetBeansIDE
FromtheFilemenu,chooseOpenProject.
IntheOpenProjectdialog,navigateto:
tut-install /examples/ejb/
Selectthe helloservice folder.
SelecttheOpenasMainProjectcheckbox.1
2
3
4AWebServiceExample:helloservice
Chapter24 • RunningtheEnterpriseBeanExamples 477
ClickOpenProject.
IntheProjectstab,right-clickthe helloservice projectandselectDeploy.
Thisbuildsandpackagestheapplicationinto helloservice.ear ,locatedin
tut-install /examples/ejb/helloservice/dist/ ,anddeploysthisEARfiletotheGlassFish
Server.
▼ToBuild,Package,andDeploythehelloserviceExampleUsingAnt
Inaterminalwindow,goto:
tut-install /examples/ejb/helloservice/
Typethefollowingcommand:
ant
Thisrunsthe defaulttask,whichcompilesthesourcefilesandpackagestheapplicationintoa
JARfilelocatedat tut-install /examples/ejb/helloservice/dist/helloservice.jar .
Todeploy helloservice ,typethefollowingcommand:
ant deploy
Upondeployment,theGlassFishServergeneratesadditionalartifactsrequiredforwebservice
invocation,includingtheWSDLfile.
▼ToTesttheServicewithoutaClient
TheGlassFishServerAdministrationConsoleallowsyoutotestthemethodsofawebserviceendpoint.Totestthe sayHello methodof HelloServiceBean ,followthesesteps.
OpentheAdministrationConsolebyopeningthefollowingURLinawebbrowser:
http://localhost:4848/
IntheleftpaneoftheAdministrationConsole,selecttheApplicationsnode.IntheApplicationstable,click helloservice .
IntheModulesandComponentstable,clickViewEndpoint.OntheWebServiceEndpointInformationpage,clicktheTesterlink:
/HelloServiceBeanService/HelloServiceBean?Tester
AWebServiceTestLinkspageopens.OntheWebServiceTestLinkspage,clickthenon-securelink(theonethatspecifiesport8080).
AHelloServiceBeanServiceWebServiceTesterpageopens.5
6
1
2
3
1
2
345
6AWebServiceExample:helloservice
TheJavaEE6Tutorial • January2013 478
UnderMethods,typeanameastheparametertothe sayHello method.
Clickthe sayHello button.
ThesayHello Methodinvocationpageopens.Under Method returned ,you’llseetheresponse
fromtheendpoint.
UsingtheTimerService
Applicationsthatmodelbusinessworkflowsoftenrelyontimednotifications.Thetimerserviceoftheenterprisebeancontainerenablesyoutoscheduletimednotificationsforalltypesofenterprisebeansexceptforstatefulsessionbeans.Youcanscheduleatimednotificationtooccuraccordingtoacalendarschedule,ataspecifictime,afteradurationoftime,orattimedintervals.Forexample,youcouldsettimerstogooffat10:30a.m.onMay23,in30days,orevery12hours.
Enterprisebeantimersareeitherprogrammatictimersorautomatictimers. Programmatic
timersaresetbyexplicitlycallingoneofthetimercreationmethodsofthe TimerService
interface. Automatictimers arecreateduponthesuccessfuldeploymentofanenterprisebean
thatcontainsamethodannotatedwiththe java.ejb.Schedule orjava.ejb.Schedules
annotations.
CreatingCalendar-BasedTimerExpressions
Timerscanbesetaccordingtoacalendar-basedschedule,expressedusingasyntaxsimilartotheUNIX cronutility.Bothprogrammaticandautomatictimerscanusecalendar-basedtimer
expressions.
Table24–1 showsthecalendar-basedtimerattributes.
TABLE24–1 Calendar-BasedTimerAttributes
Attribute Description DefaultValue AllowableValuesandExamples
second Oneormoreseconds
withinaminute00 to59.Forexample: second= "30".
minute Oneormoreminutes
withinanhour00 to59.Forexample: minute= "15".
hour Oneormorehours
withinaday00 to23.Forexample: hour= "13".
dayOfWeek Oneormoredays
withinaweek*0 to7(both0and7refertoSunday).Forexample:
dayOfWeek= "3".
Sun,Mon,Tue,Wed,Thu,Fri,Sat.Forexample:
dayOfWeek= "Mon".7
8UsingtheTimerService
Chapter24 • RunningtheEnterpriseBeanExamples 479
TABLE24–1 Calendar-BasedTimerAttributes (Continued)
Attribute Description DefaultValue AllowableValuesandExamples
dayOfMonth Oneormoredays
withinamonth*1 to31.Forexample: dayOfMonth= "15".
–7to–1(anegativenumbermeansthe nthdayor
daysbeforetheendofthemonth).Forexample:dayOfMonth= "–3".
Last.Forexample: dayOfMonth= "Last".
[1st,2nd,3rd,4th,5th,Last][Sun,Mon,Tue,Wed,
Thu,Fri,Sat].Forexample: dayOfMonth= "2nd Fri ".
month Oneormoremonths
withinayear*1 to12.Forexample: month= "7".
Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,
Dec.Forexample: month= "July
".
year Aparticularcalendar
year* Afour–digitcalendaryear.Forexample:
year= "2011".
SpecifyingMultipleValuesinCalendarExpressions
Youcanspecifymultiplevaluesincalendarexpressions,asdescribedinthefollowingsections.
UsingWildcardsinCalendarExpressions
Settinganattributetoanasterisksymbol( *)representsallallowablevaluesfortheattribute.
Thefollowingexpressionrepresentseveryminute:
minute= "*"
Thefollowingexpressionrepresentseverydayoftheweek:
dayOfWeek= "*"
SpecifyingaListofValues
Tospecifytwoormorevaluesforanattribute,useacomma( ,)toseparatethevalues.Arange
ofvaluesisallowedaspartofalist.Wildcardsandintervals,however,arenotallowed.
Duplicateswithinalistareignored.
ThefollowingexpressionsetsthedayoftheweektoTuesdayandThursday:
dayOfWeek= "Tue, Thu "
Thefollowingexpressionrepresents4:00a.m.,everyhourfrom9:00a.m.to5:00p.m.usinga
range,and10:00p.m.:UsingtheTimerService
TheJavaEE6Tutorial • January2013 480
hour= "4,9–17,22 "
SpecifyingaRangeofValues
Useadashcharacter( –)tospecifyaninclusiverangeofvaluesforanattribute.Membersofa
rangecannotbewildcards,lists,orintervals.Arangeoftheform x–x,isequivalenttothe
single-valuedexpression x.Arangeoftheform x–ywhere xisgreaterthan yisequivalenttothe
expression x–maximumvalue ,minimumvalue –y.Thatis,theexpressionbeginsat x,rollsover
tothebeginningoftheallowablevalues,andcontinuesupto y.
Thefollowingexpressionrepresents9:00a.m.to5:00p.m.:
hour= "9–17"
ThefollowingexpressionrepresentsFridaythroughMonday:
dayOfWeek= "5–1"
Thefollowingexpressionrepresentsthetwenty-fifthdayofthemonthtotheendofthemonth,
andthebeginningofthemonthtothefifthdayofthemonth:
dayOfMonth= "25–5"
Itisequivalenttothefollowingexpression:
dayOfMonth= "25–Last,1–5 "
SpecifyingIntervals
Theforwardslash( /)constrainsanattributetoastartingpointandanintervalandisusedto
specifyevery Nseconds,minutes,orhourswithintheminute,hour,orday.Foranexpressionof
theform x/y,xrepresentsthestartingpointand yrepresentstheinterval.Thewildcard
charactermaybeusedinthe xpositionofanintervalandisequivalenttosetting xto0.
Intervalsmaybesetonlyfor second,minute,and hourattributes.
Thefollowingexpressionrepresentsevery10minuteswithinthehour:
minute= "*/10"
Itisequivalentto:
minute= "0,10,20,30,40,50 "
Thefollowingexpressionrepresentsevery2hoursstartingatnoon:
hour= "12/2"UsingtheTimerService
Chapter24 • RunningtheEnterpriseBeanExamples 481
ProgrammaticTimers
Whenaprogrammatictimerexpires(goesoff),thecontainercallsthemethodannotated
@Timeout inthebean’simplementationclass.The @Timeout methodcontainsthebusinesslogic
thathandlesthetimedevent.
The@Timeout Method
Methodsannotated @Timeout intheenterprisebeanclassmustreturn voidandoptionallytake
ajavax.ejb.Timer objectastheonlyparameter.Theymaynotthrowapplicationexceptions.
@Timeout
public void timeout(Timer timer) {
System.out.println( "TimerBean: timeout occurred ");
}
CreatingProgrammaticTimers
Tocreateatimer,thebeaninvokesoneofthe createmethodsofthe TimerService interface.
Thesemethodsallowsingle-action,interval,orcalendar-basedtimerstobecreated.
Forsingle-actionorintervaltimers,theexpirationofthetimercanbeexpressedaseithera
durationoranabsolutetime.Thedurationisexpressedasathenumberofmillisecondsbeforeatimeouteventistriggered.Tospecifyanabsolutetime,createa java.util.Date objectand
passittothe TimerService.createSingleActionTimer orthe TimerService.createTimer
method.
Thefollowingcodesetsaprogrammatictimerthatwillexpirein1minute(6,000milliseconds):
long duration = 6000;
Timer timer =
timerService.createSingleActionTimer(duration, new TimerConfig());
Thefollowingcodesetsaprogrammatictimerthatwillexpireat12:05p.m.onMay1,2010,
specifiedasa java.util.Date :
SimpleDateFormatter formatter =
new SimpleDateFormatter( "MM/dd/yyyy ’at’ HH:mm ");
Date date = formatter.parse( "05/01/2010 at 12:05 ");
Timer timer = timerService.createSingleActionTimer(date, new TimerConfig());
Forcalendar-basedtimers,theexpirationofthetimerisexpressedasa
javax.ejb.ScheduleExpression object,passedasaparametertothe
TimerService.createCalendarTimer method.The ScheduleExpression classrepresents
calendar-basedtimerexpressionsandhasmethodsthatcorrespondtotheattributesdescribedin
“CreatingCalendar-BasedTimerExpressions”onpage479 .
Thefollowingcodecreatesaprogrammatictimerusingthe ScheduleExpression helperclass:UsingtheTimerService
TheJavaEE6Tutorial • January2013 482
ScheduleExpression schedule = new ScheduleExpression();
schedule.dayOfWeek( "Mon");
schedule.hour( "12-17, 23 ");
Timer timer = timerService.createCalendarTimer(schedule);
Fordetailsonthemethodsignatures,seethe TimerService APIdocumentationat
http://docs.oracle.com/javaee/6/api/javax/ejb/TimerService.html .
Thebeandescribedin “The timersession Example”onpage485 createsatimerasfollows:
Timer timer = timerService.createTimer(intervalDuration,
"Created new programmatic timer ");
Inthe timersession example, createTimer isinvokedinabusinessmethod,whichiscalledby
aclient.
Timersarepersistentbydefault.Iftheserverisshutdownorcrashes,persistenttimersaresaved
andwillbecomeactiveagainwhentheserverisrestarted.Ifapersistenttimerexpireswhiletheserverisdown,thecontainerwillcallthe @Timeout methodwhentheserverisrestarted.
Nonpersistentprogrammatictimersarecreatedbycalling
TimerConfig.setPersistent(false) andpassingthe TimerConfig objecttooneofthe
timer-creationmethods.
TheDateandlongparametersofthe createTimer methodsrepresenttimewiththeresolution
ofmilliseconds.However,becausethetimerserviceisnotintendedforreal-timeapplications,acallbacktothe @Timeout methodmightnotoccurwithmillisecondprecision.Thetimerservice
isforbusinessapplications,whichtypicallymeasuretimeinhours,days,orlongerdurations.
AutomaticTimers
AutomatictimersarecreatedbytheEJBcontainerwhenanenterprisebeanthatcontainsmethodsannotatedwiththe @Schedule or@Schedules annotationsisdeployed.Anenterprise
beancanhavemultipleautomatictimeoutmethods,unlikeaprogrammatictimer,whichallowsonlyonemethodannotatedwiththe @Timeout annotationintheenterprisebeanclass.
Automatictimerscanbeconfiguredthroughannotationsorthroughthe ejb-jar.xml
deploymentdescriptor.
Addinga @Schedule annotationonanenterprisebeanmarksthatmethodasatimeoutmethod
accordingtothecalendarschedulespecifiedintheattributesof @Schedule .
The@Schedule annotationhaselementsthatcorrespondtothecalendarexpressionsdetailedin
“CreatingCalendar-BasedTimerExpressions”onpage479 andthe persistent ,info,and
timezone elements.
Theoptional persistent elementtakesaBooleanvalueandisusedtospecifywhetherthe
automatictimershouldsurviveaserverrestartorcrash.Bydefault,allautomatictimersarepersistent.UsingtheTimerService
Chapter24 • RunningtheEnterpriseBeanExamples 483
Theoptional timezone elementisusedtospecifythattheautomatictimerisassociatedwitha
particulartimezone.Ifset,thiselementwillevaluatealltimerexpressionsinrelationtothespecifiedtimezone,regardlessofthetimezoneinwhichtheEJBcontainerisrunning.Bydefault,allautomatictimerssetareinrelationtothedefaulttimezoneoftheserver.
Theoptional infoelementisusedtosetaninformationaldescriptionofthetimer.Atimer’s
informationcanberetrievedlaterbyusing Timer.getInfo .
Thefollowingtimeoutmethoduses @Schedule tosetatimerthatwillexpireeverySundayat
midnight:
@Schedule(dayOfWeek= "Sun", hour= "0")
public void cleanupWeekData() { ... }
The@Schedules annotationisusedtospecifymultiplecalendar-basedtimerexpressionsfora
giventimeoutmethod.
Thefollowingtimeoutmethodusesthe @Schedules annotationtosetmultiplecalendar-based
timerexpressions.Thefirstexpressionsetsatimertoexpireonthelastdayofeverymonth.ThesecondexpressionsetsatimertoexpireeveryFridayat11:00p.m.
@Schedules ({
@Schedule(dayOfMonth= "Last"),
@Schedule(dayOfWeek= "Fri", hour= "23")
})public void doPeriodicCleanup() { ... }
CancelingandSavingTimers
Timerscanbecancelledbythefollowingevents.
■Whenasingle-eventtimerexpires,theEJBcontainercallstheassociatedtimeoutmethod
andthencancelsthetimer.
■Whenthebeaninvokesthe cancelmethodofthe Timerinterface,thecontainercancelsthe
timer.
Ifamethodisinvokedonacancelledtimer,thecontainerthrowsthe
javax.ejb.NoSuchObjectLocalException .
Tosavea Timerobjectforfuturereference,invokeits getHandle methodandstorethe
TimerHandle objectinadatabase.(A TimerHandle objectisserializable.)Toreinstantiatethe
Timerobject,retrievethehandlefromthedatabaseandinvoke getTimer onthehandle.A
TimerHandle objectcannotbepassedasanargumentofamethoddefinedinaremoteorweb
serviceinterface.Inotherwords,remoteclientsandwebserviceclientscannotaccessabean’sTimerHandle object.Localclients,however,donothavethisrestriction.UsingtheTimerService
TheJavaEE6Tutorial • January2013 484
GettingTimerInformation
Inadditiontodefiningthe cancelandgetHandle methods,the Timerinterfacedefines
methodsforobtaininginformationabouttimers:
public long getTimeRemaining();
public java.util.Date getNextTimeout();public java.io.Serializable getInfo();
ThegetInfomethodreturnstheobjectthatwasthelastparameterofthe createTimer
invocation.Forexample,inthe createTimer codesnippetoftheprecedingsection,this
informationparameterisa Stringobjectwiththevalue created timer .
Toretrieveallofabean’sactivetimers,callthe getTimers methodofthe TimerService
interface.The getTimers methodreturnsacollectionof Timerobjects.
TransactionsandTimers
Anenterprisebeanusuallycreatesatimerwithinatransaction.Ifthistransactionisrolledback,
thetimercreationalsoisrolledback.Similarly,ifabeancancelsatimerwithinatransactionthatgetsrolledback,thetimercancellationisrolledback.Inthiscase,thetimer’sdurationisresetasifthecancellationhadneveroccurred.
Inbeansthatusecontainer-managedtransactions,the @Timeout methodusuallyhasthe
Required orRequiresNew transactionattributetopreservetransactionintegrity.Withthese
attributes,theEJBcontainerbeginsthenewtransactionbeforecallingthe @Timeout method.If
thetransactionisrolledback,thecontainerwillcallthe @Timeout methodatleastonemore
time.
ThetimersessionExample
Thesourcecodeforthisexampleisinthe tut-install /examples/ejb/timersession/src/java/
directory.
TimerSessionBean isasingletonsessionbeanthatshowshowtosetbothanautomatictimer
andaprogrammatictimer.Inthesourcecodelistingof TimerSessionBean thatfollows,the
setTimer and@Timeout methodsareusedtosetaprogrammatictimer.A TimerService
instanceisinjectedbythecontainerwhenthebeaniscreated.Becauseit’sabusinessmethod,setTimer isexposedtothelocal,no-interfaceviewof TimerSessionBean andcanbeinvokedby
theclient.Inthisexample,theclientinvokes setTimer withanintervaldurationof30,000
milliseconds.The setTimer methodcreatesanewtimerbyinvokingthe createTimer method
ofTimerService .Nowthatthetimerisset,theEJBcontainerwillinvokethe
programmaticTimeout methodof TimerSessionBean whenthetimerexpires,inabout30
seconds.UsingtheTimerService
Chapter24 • RunningtheEnterpriseBeanExamples 485
...
public void setTimer(long intervalDuration) {
logger.info( "Setting a programmatic timeout for "+
intervalDuration + "milliseconds from now. ");
Timer timer = timerService.createTimer(intervalDuration,
"Created new programmatic timer ");
}
@Timeout
public void programmaticTimeout(Timer timer) {
this.setLastProgrammaticTimeout(new Date());logger.info( "Programmatic timeout occurred. ");
}
...
TimerSessionBean alsohasanautomatictimerandtimeoutmethod, automaticTimeout .The
automatictimerissettoexpireevery3minutesandissetbyusingacalendar-basedtimerexpressioninthe @Schedule annotation:
...
@Schedule(minute= "*/3", hour= "*")
public void automaticTimeout() {
this.setLastAutomaticTimeout(new Date());logger.info( "Automatic timeout occured ");
}
...
TimerSessionBean alsohastwobusinessmethods: getLastProgrammaticTimeout and
getLastAutomaticTimeout .Clientscallthesemethodstogetthedateandtimeofthelast
timeoutfortheprogrammatictimerandautomatictimer,respectively.
Here’sthesourcecodeforthe TimerSessionBean class:
package timersession.ejb;
import java.util.Date;
import java.util.logging.Logger;import javax.annotation.Resource;import javax.ejb.Schedule;import javax.ejb.Stateless;import javax.ejb.Timeout;import javax.ejb.Timer;import javax.ejb.TimerService;
@Singleton
public class TimerSessionBean {
@ResourceTimerService timerService;
private Date lastProgrammaticTimeout;
private Date lastAutomaticTimeout;
private Logger logger = Logger.getLogger(
"com.sun.tutorial.javaee.ejb.timersession.TimerSessionBean ");
public void setTimer(long intervalDuration) {UsingtheTimerService
TheJavaEE6Tutorial • January2013 486
logger.info( "Setting a programmatic timeout for "
+ intervalDuration + "milliseconds from now. ");
Timer timer = timerService.createTimer(intervalDuration,
"Created new programmatic timer ");
}
@Timeout
public void programmaticTimeout(Timer timer) {
this.setLastProgrammaticTimeout(new Date());logger.info( "Programmatic timeout occurred. ");
}
@Schedule(minute= "*/3", hour= "*")
public void automaticTimeout() {
this.setLastAutomaticTimeout(new Date());logger.info( "Automatic timeout occured ");
}
public String getLastProgrammaticTimeout() {
if (lastProgrammaticTimeout != null) {
return lastProgrammaticTimeout.toString();
} else {
return "never ";
}
}public void setLastProgrammaticTimeout(Date lastTimeout) {
this.lastProgrammaticTimeout = lastTimeout;
}
public String getLastAutomaticTimeout() {
if (lastAutomaticTimeout != null) {
return lastAutomaticTimeout.toString();
} else {
return "never ";
}
}
public void setLastAutomaticTimeout(Date lastAutomaticTimeout) {
this.lastAutomaticTimeout = lastAutomaticTimeout;
}
}
Note–GlassFishServerhasadefaultminimumtimeoutvalueof1,000milliseconds,or1second.
Ifyouneedtosetthetimeoutvaluelowerthan1,000milliseconds,changethevalueoftheMinimumDeliveryIntervalsettingintheAdministrationConsole.Tomodifytheminimumtimeoutvalue,intheAdministrationConsoleexpandConfigurations,thenexpandserver-config ,clickEJBContainer,andselecttheEJBTimerServicetab.Enteranewvalue
underMinimumDeliveryIntervalandclickSave.Thelowestpracticalvalueisaround10milliseconds,owingtovirtualmachineconstraints.UsingtheTimerService
Chapter24 • RunningtheEnterpriseBeanExamples 487
RunningthetimersessionExample
YoucanuseeitherNetBeansIDEorAnttobuild,package,deploy,andrunthe timersession
example.
▼ToRunthetimersessionExampleUsingNetBeansIDE
FromtheFilemenu,chooseOpenProject.
IntheOpenProjectdialog,navigateto:
tut-install /examples/ejb/
Selectthe timersession folder.
SelecttheOpenasMainProjectcheckbox.ClickOpenProject.FromtheRunmenu,chooseRunProject.
Thisbuildsandpackagestheapplicationinto timersession.war ,locatedin
tut-install /examples/ejb/timersession/dist/ ,deploysthisWARfiletoyourGlassFish
Serverinstance,andthenrunsthewebclient.
▼ToBuild,Package,andDeploythetimersessionExampleUsingAnt
Inaterminalwindow,goto:
tut-install /examples/ejb/timersession/
Typethefollowingcommand:
ant
Thisrunsthe defaulttask,whichcompilesthesourcefilesandpackagestheapplicationintoa
WARfilelocatedat tut-install /examples/ejb/timersession/dist/timersession.war .
Todeploytheapplication,typethefollowingcommand:
ant deploy
▼ToRuntheWebClient
Openawebbrowserto http://localhost:8080/timersession .
ClicktheSetTimerbuttontosetaprogrammatictimer.1
2
3
456
1
2
3
1
2UsingtheTimerService
TheJavaEE6Tutorial • January2013 488
Waitforawhileandclickthebrowser’sRefreshbutton.
Youwillseethedateandtimeofthelastprogrammaticandautomatictimeouts.
Toseethemessagesthatareloggedwhenatimeoutoccurs,openthe server.log filelocatedin
domain-dir /server/logs/ .
HandlingExceptions
Theexceptionsthrownbyenterprisebeansfallintotwocategories:systemandapplication.
Asystemexception indicatesaproblemwiththeservicesthatsupportanapplication.For
example,aconnectiontoanexternalresourcecannotbeobtained,oraninjectedresourcecannotbefound.Ifitencountersasystem-levelproblem,yourenterprisebeanshouldthrowajavax.ejb.EJBException .Becausethe EJBException isasubclassofthe RuntimeException ,
youdonothavetospecifyitinthe throwsclauseofthemethoddeclaration.Ifasystem
exceptionisthrown,theEJBcontainermightdestroythebeaninstance.Therefore,asystemexceptioncannotbehandledbythebean’sclientprogram,butinsteadrequiresinterventionbyasystemadministrator.
Anapplicationexception signalsanerrorinthebusinesslogicofanenterprisebean.Application
exceptionsaretypicallyexceptionsthatyou’vecodedyourself,suchasthe BookException
thrownbythebusinessmethodsofthe CartBean example.Whenanenterprisebeanthrowsan
applicationexception,thecontainerdoesnotwrapitinanotherexception.Theclientshouldbeabletohandleanyapplicationexceptionitreceives.
Ifasystemexceptionoccurswithinatransaction,theEJBcontainerrollsbackthetransaction.
However,ifanapplicationexceptionisthrownwithinatransaction,thecontainerdoesnotrollbackthetransaction.3HandlingExceptions
Chapter24 • RunningtheEnterpriseBeanExamples 489
490
AMessage-DrivenBeanExample
Message-drivenbeanscanimplementanymessagingtype.Mostcommonly,theyimplement
theJavaMessageService(JMS)technology.TheexampleinthischapterusesJMStechnology,soyoushouldbefamiliarwithbasicJMSconceptssuchasqueuesandmessages.Tolearnabouttheseconcepts,see
Chapter47,“JavaMessageServiceConcepts.”
Thischapterdescribesthesourcecodeofasimplemessage-drivenbeanexample.Beforeproceeding,youshouldreadthebasicconceptualinformationinthesection
“WhatIsa
Message-DrivenBean?”onpage439 aswellas “UsingMessage-DrivenBeanstoReceive
MessagesAsynchronously”onpage853 .
Thefollowingtopicsareaddressedhere:
■“Overviewofthe simplemessage Example”onpage491
■“The simplemessage ApplicationClient”onpage492
■“TheMessage-DrivenBeanClass”onpage493
■“Runningthe simplemessage Example”onpage495
Overviewofthe simplemessage Example
Thesimplemessage applicationhasthefollowingcomponents:
■SimpleMessageClient :Anapplicationclientthatsendsseveralmessagestoaqueue
■SimpleMessageBean :Amessage-drivenbeanthatasynchronouslyreceivesandprocesses
themessagesthataresenttothequeue
Figure25–1 illustratesthestructureofthisapplication.Theapplicationclientsendsmessagesto
thequeue,whichwascreatedadministrativelyusingtheAdministrationConsole.TheJMSprovider(inthiscase,theGlassFishServer)deliversthemessagestotheinstancesofthemessage-drivenbean,whichthenprocessesthemessages.25CHAPTER 25
491
Thesourcecodeforthisapplicationisinthe tut-install /examples/ejb/simplemessage/
directory.
Thesimplemessage ApplicationClient
TheSimpleMessageClient sendsmessagestothequeuethatthe SimpleMessageBean listensto.
Theclientstartsbyinjectingtheconnectionfactoryandqueueresources:
@Resource(mappedName= "jms/ConnectionFactory ")
private static ConnectionFactory connectionFactory;
@Resource(mappedName= "jms/Queue ")
private static Queue queue;
Next,theclientcreatestheconnection,session,andmessageproducer:
connection = connectionFactory.createConnection();session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);messageProducer = session.createProducer(queue);
Finally,theclientsendsseveralmessagestothequeue:
message = session.createTextMessage();
f o r( i n ti=0 ;i< NUM_MSGS; i++) {
message.setText( "This is message "+ (i + 1));
System.out.println( "Sending message: "+ message.getText());
messageProducer.send(message);
}FIGURE25–1 Thesimplemessage Application
QueueJava EE Server
Msg
 Msg
Sends DeliversApplication 
Client
EJB Container
MDB 
Instances
Thesimplemessage ApplicationClient
TheJavaEE6Tutorial • January2013 492
TheMessage-DrivenBeanClass
Thecodeforthe SimpleMessageBean classillustratestherequirementsofamessage-driven
beanclass:
■Itmustbeannotatedwiththe @MessageDriven annotationifitdoesnotuseadeployment
descriptor.
■Theclassmustbedefinedas public.
■Theclasscannotbedefinedas abstract orfinal.
■Itmustcontainapublicconstructorwithnoarguments.
■Itmustnotdefinethe finalize method.
Itisrecommended,butnotrequired,thatamessage-drivenbeanclassimplementthemessage
listenerinterfaceforthemessagetypeitsupports.AbeanthatsupportstheJMSAPIimplementsthe javax.jms.MessageListener interface.
Unlikesessionbeansandentities,message-drivenbeansdonothavetheremoteorlocal
interfacesthatdefineclientaccess.Clientcomponentsdonotlocatemessage-drivenbeansandinvokemethodsonthem.Althoughmessage-drivenbeansdonothavebusinessmethods,theymaycontainhelpermethodsthatareinvokedinternallybythe onMessage method.
FortheGlassFishServer,the @MessageDriven annotationtypicallycontainsa mappedName
elementthatspecifiestheJNDInameofthedestinationfromwhichthebeanwillconsumemessages.Forcomplexmessage-drivenbeans,therecanalsobean activationconfig element
containing @ActivationConfigProperty annotationsusedbythebean.
Amessage-drivenbeancanalsoinjecta MessageDrivenContext resource.Commonlyyouuse
thisresourcetocallthe setRollbackOnly methodtohandleexceptionsforabeanthatuses
container-managedtransactions.
Therefore,thefirstfewlinesofthe SimpleMessageBean classlooklikethis:
@MessageDriven(mappedName= "jms/Queue ", activationConfig = {
@ActivationConfigProperty(propertyName = "acknowledgeMode ",
propertyValue = "Auto-acknowledge "),
@ActivationConfigProperty(propertyName = "destinationType ",
propertyValue = "javax.jms.Queue ")
})
public class SimpleMessageBean implements MessageListener {
@Resourceprivate MessageDrivenContext mdc;...
NetBeansIDEtypicallycreatesamessage-drivenbeanwithadefaultsetof
@ActivationConfigProperty settings.Youcandeletethoseyoudonotneed,oraddothers.
Table25–1 listscommonlyusedproperties.TheMessage-DrivenBeanClass
Chapter25 • AMessage-DrivenBeanExample 493
TABLE25–1 @ActivationConfigProperty SettingsforMessage-DrivenBeans
PropertyName Description
acknowledgeMode Acknowledgmentmode;see “ControllingMessageAcknowledgment”
onpage843 forinformation
destinationType Either javax.jms.Queue orjavax.jms.Topic
subscriptionDurability Fordurablesubscribers,setto Durable;see“CreatingDurable
Subscriptions”onpage847 forinformation
clientId Fordurablesubscribers,theclientIDfortheconnection
subscriptionName Fordurablesubscribers,thenameofthesubscription
messageSelector Astringthatfiltersmessages;see “JMSMessageSelectors”onpage839
forinformation,andsee “AnApplicationThatUsestheJMSAPIwitha
SessionBean”onpage897 foranexample
addressList Remotesystemorsystemswithwhichtocommunicate;see “An
ApplicationExampleThatConsumesMessagesfromaRemoteServer”onpage910
foranexample
TheonMessage Method
Whenthequeuereceivesamessage,theEJBcontainerinvokesthemessagelistenermethodor
methods.ForabeanthatusesJMS,thisisthe onMessage methodofthe MessageListener
interface.
Amessagelistenermethodmustfollowtheserules:
■Themethodmustbedeclaredas public.
■Themethodmustnotbedeclaredas finalorstatic.
TheonMessage methodiscalledbythebean’scontainerwhenamessagehasarrivedforthe
beantoservice.Thismethodcontainsthebusinesslogicthathandlestheprocessingofthemessage.Itisthemessage-drivenbean’sresponsibilitytoparsethemessageandperformthenecessarybusinesslogic.
TheonMessage methodhasasingleargument:theincomingmessage.
Thesignatureofthe onMessage methodmustfollowtheserules:
■Thereturntypemustbe void.
■Themethodmusthaveasingleargumentoftype javax.jms.Message .TheMessage-DrivenBeanClass
TheJavaEE6Tutorial • January2013 494
Inthe SimpleMessageBean class,the onMessage methodcaststheincomingmessagetoa
TextMessage anddisplaysthetext:
public void onMessage(Message inMessage) {
TextMessage msg = null;
try {
if (inMessage instanceof TextMessage) {
msg = (TextMessage) inMessage;logger.info( "MESSAGE BEAN: Message received: "+
msg.getText());
} else {
logger.warning( "Message of wrong type: "+
inMessage.getClass().getName());
}
} catch (JMSException e) {
e.printStackTrace();mdc.setRollbackOnly();
} catch (Throwable te) {
te.printStackTrace();
}
}
Runningthe simplemessage Example
YoucanuseeitherNetBeansIDEorAnttobuild,package,deploy,andrunthe simplemessage
example.
AdministeredObjectsforthe simplemessage Example
Thisexamplerequiresthefollowing:
■AJMSconnectionfactoryresource
■AJMSdestinationresource
IfyouhaverunthesimpleJMSexamplesin Chapter47,“JavaMessageServiceConcepts,” and
havenotdeletedtheresources,youalreadyhavetheseresources.Otherwise,theresourceswillbecreatedautomaticallywhenyoudeploytheapplication.
FormoreinformationoncreatingJMSresources,see
“JMSAdministeredObjectsforthe
SynchronousReceiveExample”onpage863 .Runningthe simplemessage Example
Chapter25 • AMessage-DrivenBeanExample 495
▼ToRunthe simplemessage ApplicationUsing
NetBeansIDE
FromtheFilemenu,chooseOpenProject.
IntheOpenProjectdialog,navigateto:
tut-install /examples/ejb/
Selectthe simplemessage folder.
SelecttheOpenasMainProjectcheckboxandtheOpenRequiredProjectscheckbox.ClickOpenProject.IntheProjectstab,right-clickthe simplemessage projectandchooseBuild.
Thistaskpackagestheapplicationclientandthemessage-drivenbean,thencreatesafilenamed
simplemessage.ear inthe distdirectory.
Right-clicktheprojectandchooseRun.
Thiscommandcreatesanyneededresources,deploystheproject,returnsaJARfilenamed
simplemessageClient.jar ,andthenexecutesit.
TheoutputoftheapplicationclientintheOutputpanelookslikethis(precededbyapplication
clientcontaineroutput):
Sending message: This is message 1
Sending message: This is message 2Sending message: This is message 3To see if the bean received the messages,
check <install_dir>/domains/domain1/logs/server.log.
Theoutputfromthemessage-drivenbeanappearsintheserverlog
(domain-dir /logs/server.log ),wrappedinlogginginformation.
MESSAGE BEAN: Message received: This is message 1
MESSAGE BEAN: Message received: This is message 2MESSAGE BEAN: Message received: This is message 3
Thereceivedmessagesmayappearinadifferentorderfromtheorderinwhichtheyweresent.
▼ToRunthe simplemessage ApplicationUsingAnt
Inaterminalwindow,goto:
tut-install /examples/ejb/simplemessage/1
2
3
456
7
1Runningthe simplemessage Example
TheJavaEE6Tutorial • January2013 496
Tocompilethesourcefilesandpackagetheapplication,usethefollowingcommand:
ant
Thistargetpackagestheapplicationclientandthemessage-drivenbean,thencreatesafile
named simplemessage.ear inthe distdirectory.
Byusingresourceinjectionandannotations,youavoidhavingtocreatedeploymentdescriptor
filesforthemessage-drivenbeanandapplicationclient.Youneedtousedeploymentdescriptorsonlyifyouwanttooverridethevaluesspecifiedintheannotatedsourcefiles.
Tocreateanyneededresources,deploytheapplication,andruntheclientusingAnt,usethe
followingcommand:
ant run
IgnorethemessagethatstatesthattheapplicationisdeployedataURL.
Theoutputintheterminalwindowlookslikethis(precededbyapplicationclientcontainer
output):
Sending message: This is message 1
Sending message: This is message 2Sending message: This is message 3To see if the bean received the messages,
check <install_dir>/domains/domain1/logs/server.log.
Intheserverlogfile,thefollowinglinesappear,wrappedinlogginginformation:
MESSAGE BEAN: Message received: This is message 1MESSAGE BEAN: Message received: This is message 2MESSAGE BEAN: Message received: This is message 3
Thereceivedmessagesmayappearinadifferentorderfromtheorderinwhichtheyweresent.
RemovingtheAdministeredObjectsforthe
simplemessage Example
Afteryouruntheexample,youcanuseNetBeansIDEtoremovetheconnectionfactoryand
queue,asdescribedin “ToDeleteJMSResourcesUsingNetBeansIDE”onpage864 .Ifyouare
notusingNetBeansIDE,youcanusethe asadmin list-jms-resources commandtolistthe
resources,andthe asadmin delete-jms-resource commandtoremoveeachone.2
3Runningthe simplemessage Example
Chapter25 • AMessage-DrivenBeanExample 497
498
UsingtheEmbeddedEnterpriseBean
Container
Thischapterdemonstrateshowtousetheembeddedenterprisebeancontainertorun
enterprisebeanapplicationsintheJavaSEenvironment,outsideofaJavaEEserver.
Thefollowingtopicsareaddressedhere:
■“OverviewoftheEmbeddedEnterpriseBeanContainer”onpage499
■“DevelopingEmbeddableEnterpriseBeanApplications”onpage499
■“The standalone ExampleApplication”onpage502
OverviewoftheEmbeddedEnterpriseBeanContainer
Theembeddedenterprisebeancontainerisusedtoaccessenterprisebeancomponentsfrom
clientcodeexecutedinaJavaSEenvironment.Thecontainerandtheclientcodeareexecutedwithinthesamevirtualmachine.Theembeddedenterprisebeancontaineristypicallyusedfortestingenterprisebeanswithouthavingtodeploythemtoaserver.
MostoftheservicespresentintheenterprisebeancontainerinaJavaEEserverareavailablein
theembeddedenterprisebeancontainer,includinginjection,container-managedtransactions,andsecurity.EnterprisebeancomponentsexecutesimilarlyinbothembeddedandJavaEEenvironments,andthereforethesameenterprisebeancanbeeasilyreusedinbothstandaloneandnetworkedapplications.
DevelopingEmbeddableEnterpriseBeanApplications
Allembeddableenterprisebeancontainerssupportthefeatureslistedin Table26–1 .26CHAPTER 26
499
TABLE26–1 RequiredEnterpriseBeanFeaturesintheEmbeddableContainer
EnterpriseBeanFeature Description
Localsessionbeans Localandno-interfaceviewstateless,stateful,andsingletonsession
beans.Allmethodaccessissynchronous.Sessionbeansmustnotbewebserviceendpoints.
Transactions Container-managedandbean-managedtransactions.Security Declarativeandprogrammaticsecurity.Interceptors Class-levelandmethod-levelinterceptorsforsessionbeans.Deploymentdescriptor Theoptional ejb-jar.xml deploymentdescriptor,withthesame
overridingrulesfortheenterprisebeancontainerinJavaEEservers.
Containerprovidersareallowedtosupportthefullsetoffeaturesinenterprisebeans,but
applicationsthatusetheembeddedcontainerwillnotbeportableiftheyuseenterprisebeanfeaturesnotlistedin
Table26–1 ,suchasthetimerservice,sessionbeansaswebservice
endpoints,orremotebusinessinterfaces.
RunningEmbeddedApplications
Theembeddedcontainer,theenterprisebeancomponents,andtheclientallareexecutedinthesamevirtualmachineusingthesameclasspath.Asaresult,developerscanrunanapplicationthatusestheembeddedcontainerjustlikeatypicalJavaSEapplicationasfollows:
java -classpath mySessionBean.jar:containerProviderRuntime.jar:myClient.jar
com.example.ejb.client.Main
Intheaboveexample, mySessionBean.jar isanEJBJARcontainingalocalstatelesssession
bean, containerProviderRuntime.jar isaJARfilesuppliedbytheenterprisebeanprovider
thatcontainstheneededruntimeclassesfortheembeddedcontainer,and myClient.jar isa
JARfilecontainingaJavaSEapplicationthatcallsthebusinessmethodsinthesessionbeanthroughtheembeddedcontainer.
CreatingtheEnterpriseBeanContainer
Thejavax.ejb.embedded.EJBContainer abstractclassrepresentsaninstanceoftheenterprise
beancontainerandincludesfactorymethodsforcreatingacontainerinstance.TheEJBContainer.createEJBContainer methodisusedtocreateandinitializeanembedded
containerinstance.
Thefollowingcodesnippetshowshowtocreateanembeddedcontainerthatisinitializedwith
thecontainerprovider’sdefaultsettings:DevelopingEmbeddableEnterpriseBeanApplications
TheJavaEE6Tutorial • January2013 500
EJBContainer ec = EJBContainer.createEJBContainer();
Bydefault,theembeddedcontainerwillsearchthevirtualmachineclasspathforenterprise
beanmodules:directoriescontaininga META-INF/ejb-jar.xml deploymentdescriptor,
directoriescontainingaclassfilewithoneoftheenterprisebeancomponentannotations(suchas@Stateless ),orJARfilescontainingan ejb-jar.xml deploymentdescriptororclassfile
withanenterprisebeanannotation.Anymatchingentriesareconsideredenterprisebeanmoduleswithinthesameapplication.Onceallthevalidenterprisebeanmoduleshavebeenfoundintheclasspath,thecontainerwillbegininitializingthemodules.WhenthecreateEJBContainer methodsuccessfullyreturns,theclientapplicationcanobtainreferences
totheclientviewofanyenterprisebeanmodulefoundbytheembeddedcontainer.
Analternateversionofthe EJBContainer.createEJBContainer methodtakesa Mapof
propertiesandsettingsforcustomizingtheembeddablecontainerinstance:
Properties props = new Properties();
props.setProperty(...);...EJBContainer ec = EJBContainer.createEJBContainer(props);
ExplicitlySpecifyingEnterpriseBeanModulestobeInitialized
Developerscanspecifyexactlywhichenterprisebeanmodulestheembeddedcontainerwill
initialize.Toexplicitlyspecifytheenterprisebeanmodulesinitializedbytheembeddedcontainer,setthe EJBContainer.MODULES property.
Themodulesmaybelocatedeitherinthevirtualmachineclasspathinwhichtheembedded
containerandclientcoderun,oralternatelyoutsidethevirtualmachineclasspath.
Tospecifymodulesinthevirtualmachineclasspath,set EJBContainer.MODULES toaStringto
specifyasinglemodulename,ora Stringarraycontainingthemodulenames.Theembedded
containersearchesthevirtualmachineclasspathforenterprisebeanmodulesmatchingthespecifiednames.
Properties props = new Properties();
props.setProperty(EJBContainer.MODULES, "mySessionBean ");
EJBContainer ec = EJBContainer.createEJBContainer(props);
Tospecifyenterprisebeanmodulesoutsidethevirtualmachineclasspath,set
EJBContainer.MODULES toajava.io.File objectoranarrayof Fileobjects.Each Fileobject
referstoanEJBJARfile,oradirectorycontaininganexpandedEJBJAR.
Properties props = new Properties();
File ejbJarFile = new File(...);props.setProperty(EJBContainer.MODULES, ejbJarFile);EJBContainer ec = EJBContainer.createEJBContainer(props);DevelopingEmbeddableEnterpriseBeanApplications
Chapter26 • UsingtheEmbeddedEnterpriseBeanContainer 501
LookingUpSessionBeanReferences
Tolookupsessionbeanreferencesinanapplicationusingtheembeddedcontainer,usean
instanceof EJBContainer toretrievea javax.naming.Context object.Callthe
EJBContainer.getContext methodtoretrievethe Contextobject.
EJBContainer ec = EJBContainer.createEJBContainer();
Context ctx = ec.getContext();
ReferencestosessionbeanscanthenbeobtainedusingtheportableJNDIsyntaxdetailedin
“PortableJNDISyntax”onpage442 .Forexample,toobtainareferenceto MySessionBean ,a
localsessionbeanwithano-interfaceview,usethefollowingcode:
MySessionBean msb = (MySessionBean)
ctx.lookup( "java:global/mySessionBean/MySessionBean ");
ShuttingDowntheEnterpriseBeanContainer
Fromtheclient,callthe closemethodoftheinstanceof EJBContainer toshutdownthe
embeddedcontainer:
EJBContainer ec = EJBContainer.createEJBContainer();
...ec.close();
Whileclientsarenotrequiredtoshutdown EJBContainer instances,doingsofreesresources
consumedbytheembeddedcontainer.Thisisparticularlyimportantwhenthevirtualmachineunderwhichtheclientapplicationisrunninghasalongerlifetimethantheclientapplication.
Thestandalone ExampleApplication
Thestandalone exampleapplicationdemonstrateshowtocreateaninstanceoftheembedded
enterprisebeancontainerinaJUnittestclassandcallasessionbeanbusinessmethod.Testingthebusinessmethodsofanenterprisebeaninaunittestallowsdeveloperstoexercisethebusinesslogicofanapplicationseparatelyfromtheotherapplicationlayers,suchasthepresentationlayer,andwithouthavingtodeploytheapplicationtoaJavaEEserver.
Thestandalone examplehastwomaincomponents: StandaloneBean ,astatelesssessionbean,
andStandaloneBeanTest ,aJUnittestclassthatactsasaclientto StandaloneBean usingthe
embeddedcontainer.
StandaloneBean isasimplesessionbeanexposingalocal,no-interfaceviewwithasingle
businessmethod, returnMessage ,whichreturns“Greetings!”asa String.
@Stateless
public class StandaloneBean {Thestandalone ExampleApplication
TheJavaEE6Tutorial • January2013 502
private static final String message = "Greetings! ";
public String returnMessage() {
return message;
}
}
StandaloneBeanTest calls StandaloneBean.returnMessage andteststhatthereturned
messageiscorrect.First,anembeddedcontainerinstanceandinitialcontextarecreatedwithinthesetUpmethod,whichisannotatedwith org.junit.Before toindicatethatthemethod
shouldbeexecutedbeforethetestmethods.
@Before
public void setUp() {
ec = EJBContainer.createEJBContainer();ctx = ec.getContext();
}
ThetestReturnMessage method,annotatedwith org.junit.Test toindicatethatthemethod
includesaunittest,obtainsareferenceto StandaloneBean throughthe Contextinstance,and
calls StandaloneBean.returnMessage .Theresultiscomparedwiththeexpectedresultusinga
JUnitassertion, assertEquals .Ifthestringreturnedfrom StandaloneBean.returnMessage is
equalto“Greetings!”thetestpasses.
@Test
public void testReturnMessage() throws Exception {
logger.info( "Testing standalone.ejb.StandalonBean.returnMessage() ");
StandaloneBean instance = (StandaloneBean)
ctx.lookup( "java:global/classes/StandaloneBean ");
String expResult = "Greetings! ";
String result = instance.returnMessage();assertEquals(expResult, result);
}
Finally,the tearDown method,annotatedwith org.junit.After toindicatethatthemethod
shouldbeexecutedafteralltheunittestshaverun,closestheembeddedcontainerinstance.
@After
public void tearDown() {
if (ec != null) {
ec.close();
}
}
▼ToRunthe standalone ExampleApplication
Youmustrunthe standalone exampleapplicationwithinNetBeansIDE.
FromtheFilemenu,chooseOpenProject.BeforeYouBegin
1Thestandalone ExampleApplication
Chapter26 • UsingtheEmbeddedEnterpriseBeanContainer 503
IntheOpenProjectdialog,navigateto:
tut-install /examples/ejb/
Selectthe standalone folderandclickOpenProject.
IntheProjectstab,right-click standalone andselectTest.
ThiswillexecutetheJUnittestclass StandaloneBeanTest .TheOutputtabshowstheprogress
ofthetestandtheoutputlog.2
3
4Thestandalone ExampleApplication
TheJavaEE6Tutorial • January2013 504
UsingAsynchronousMethodInvocationin
SessionBeans
Thischapterdiscusseshowtoimplementasynchronousbusinessmethodsinsessionbeansand
callthemfromenterprisebeanclients.
Thefollowingtopicsareaddressedhere:
■“AsynchronousMethodInvocation”onpage505
■“The asyncExampleApplication”onpage508
AsynchronousMethodInvocation
Sessionbeanscanimplement asynchronousmethods ,businessmethodswherecontrolis
returnedtotheclientbytheenterprisebeancontainerbeforethemethodisinvokedonthesessionbeaninstance.ClientsmaythenusetheJavaSEconcurrencyAPItoretrievetheresult,canceltheinvocation,andcheckforexceptions.Asynchronousmethodsaretypicallyusedforlong-runningoperations,forprocessor-intensivetasks,forbackgroundtasks,toincreaseapplicationthroughput,ortoimproveapplicationresponsetimeifthemethodinvocationresultisn’trequiredimmediately.
Whenasessionbeanclientinvokesatypicalnon-asynchronousbusinessmethod,controlisnot
returnedtotheclientuntilthemethodhascompleted.Clientscallingasynchronousmethods,however,immediatelyhavecontrolreturnedtothembytheenterprisebeancontainer.Thisallowstheclienttoperformothertaskswhilethemethodinvocationcompletes.Ifthemethodreturnsaresult,theresultisanimplementationofthe java.util.concurrent.Future<V>
interface,where“V”istheresultvaluetype.The Future<V> interfacedefinesmethodstheclient
mayusetocheckwhetherthecomputationiscompleted,waitfortheinvocationtocomplete,retrievethefinalresult,andcanceltheinvocation.27CHAPTER 27
505
CreatinganAsynchronousBusinessMethod
Annotateabusinessmethodwith javax.ejb.Asynchronous tomarkthatmethodasan
asynchronousmethod,orapply @Asynchronous attheclassleveltomarkallthebusiness
methodsofthesessionbeanasasynchronousmethods.Sessionbeanmethodsthatexposewebservicescan’tbeasynchronous.
Asynchronousmethodsmustreturneither voidoranimplementationofthe Future<V>
interface.Asynchronousmethodsthatreturn voidcan’tdeclareapplicationexceptions,butif
theyreturn Future<V> ,theymaydeclareapplicationexceptions.Forexample:
@Asynchronous
public Future<String> processPayment(Order order) throws PaymentException {
...
}
Thismethodwillattempttoprocessthepaymentofanorder,andreturnthestatusasa String.
Evenifthepaymentprocessortakesalongtime,theclientcancontinueworking,anddisplaytheresultwhentheprocessingfinallycompletes.
Thejavax.ejb.AsyncResult<V> classisaconcreteimplementationofthe Future<V> interface
providedasahelperclassforreturningasynchronousresults. AsyncResult hasaconstructor
withtheresultasaparameter,makingiteasytocreate Future<V> implementations.For
example,the processPayment methodwoulduse AsyncResult toreturnthestatusasa String:
@Asynchronous
public Future<String> processPayment(Order order) throws PaymentException {
...String status = ...;return new AsyncResult<String>(status);
}
Theresultisreturnedtotheenterprisebeancontainer,notdirectlytotheclient,andthe
enterprisebeancontainermakestheresultavailabletotheclient.Thesessionbeancancheckwhethertheclientrequestedthattheinvocationbecancelledbycallingthejavax.ejb.SessionContext.wasCancelled method.Forexample:
@Asynchronous
public Future<String> processPayment(Order order) throws PaymentException {
...if (SessionContext.wasCancelled()) {
// clean up
} else {
// process the payment
}...
}AsynchronousMethodInvocation
TheJavaEE6Tutorial • January2013 506
CallingAsynchronousMethodsfromEnterpriseBean
Clients
Sessionbeanclientscallasynchronousmethodsjustlikenon-asynchronousbusinessmethods.
Iftheasynchronousmethodreturnsaresult,theclientreceivesa Future<V> instanceassoonas
themethodisinvoked.Thisinstancecanbeusedtoretrievethefinalresult,canceltheinvocation,checkwhethertheinvocationhascompleted,checkwhetheranyexceptionswerethrownduringprocessing,andcheckwhethertheinvocationwascancelled.
RetrievingtheFinalResultfromanAsynchronousMethodInvocation
Theclientmayretrievetheresultusingoneofthe Future<V>.get methods.Ifprocessinghasn’t
beencompletedbythesessionbeanhandlingtheinvocation,callingoneofthe getmethodswill
resultintheclienthaltingexecutionuntiltheinvocationcompletes.Usethe Future<V>.isDone
methodtodeterminewhetherprocessinghascompletedbeforecallingoneofthe getmethods.
Theget()methodreturnstheresultasthetypespecifiedinthetypevalueofthe Future<V>
instance.Forexample,calling Future<String>.get() willreturna Stringobject.Ifthe
methodinvocationwascancelled,callsto get()resultina
java.util.concurrent.CancellationException beingthrown.Iftheinvocationresultedin
anexceptionduringprocessingbythesessionbean,callsto get()resultina
java.util.concurrent.ExecutionException beingthrown.Thecauseofthe
ExecutionException mayberetrievedbycallingthe ExecutionException.getCause method.
The get(long timeout, java.util.concurrent.TimeUnit unit) methodissimilartothe
get()method,butallowstheclienttosetatimeoutvalue.Ifthetimeoutvalueisexceeded,a
java.util.concurrent.TimeoutException isthrown.SeetheJavadocforthe TimeUnit class
fortheavailableunitsoftimetospecifythetimeoutvalue.
CancellinganAsynchronousMethodInvocation
Callthe cancel(boolean mayInterruptIfRunning) methodonthe Future<V> instanceto
attempttocancelthemethodinvocation.The cancelmethodreturns trueifthecancellation
wassuccessful,and falseifthemethodinvocationcannotbecancelled.
Whentheinvocationcannotbecancelled,the mayInterruptIfRunning parameterisusedto
alertthesessionbeaninstanceonwhichthemethodinvocationisrunningthattheclientattemptedtocanceltheinvocation.If mayInterruptIfRunning issetto true,callsto
SessionContext.wasCancelled bythesessionbeaninstancewillreturn true.If
mayInterruptIfRunning istoset false,callsto SessionContext.wasCancelled bythesession
beaninstancewillreturn false.
TheFuture<V>.isCancelled methodisusedtocheckwhetherthemethodinvocationwas
cancelledbeforetheasynchronousmethodinvocationcompletedbycallingFuture<V>.cancel .The isCancelled methodreturns trueiftheinvocationwascancelled.AsynchronousMethodInvocation
Chapter27 • UsingAsynchronousMethodInvocationinSessionBeans 507
CheckingtheStatusofanAsynchronousMethodInvocation
TheFuture<V>.isDone methodreturns trueifthesessionbeaninstancecompletedprocessing
themethodinvocation.The isDonemethodreturns trueiftheasynchronousmethod
invocationcompletednormally,wascancelled,orresultedinanexception.Thatis, isDone
indicatesonlywhetherthesessionbeanhascompletedprocessingtheinvocation.
TheasyncExampleApplication
Theasyncexampledemonstrateshowtodefineanasynchronousbusinessmethodonasession
beanandcallitfromawebclient.The MailerBean statelesssessionbeandefinesan
asynchronousmethod, sendMessage ,whichusestheJavaMailAPItosendanemailtoa
specifiedemailaddress.
Note–Thisexampleneedstobeconfiguredforyourenvironmentbeforeitrunscorrectly,and
requiresaccesstoanSMTPSserver.
Architectureofthe asyncExampleApplication
Theasyncapplicationconsistsofasinglestatelesssessionbean, MailerBean ,andaJavaServer
FaceswebapplicationfrontendthatusesFaceletstagsinXHTMLfilestodisplayaformforuserstoentertheemailaddressfortherecipientofanemail.Thestatusoftheemailisupdatedwhentheemailisfinallysent.
TheMailerBean sessionbeaninjectsaJavaMailresourceusedtosendanemailmessagetoan
addressspecifiedbytheuser.Themessageiscreated,modified,andsentusingtheJavaMailAPI.TheinjectedJavaMailresourceisconfiguredthroughtheGlassFishServerAdministrationConsole,orthrougharesourceconfigurationfilepackagedwiththeapplication.TheresourceconfigurationcanbemodifiedatruntimebytheGlassFishServeradministratortouseadifferentmailserverortransportprotocol.
@Asynchronous
public Future<String> sendMessage(String email) {
String status;try {
Message message = new MimeMessage(session);message.setFrom();message.setRecipients(Message.RecipientType.TO,
InternetAddress.parse(email, false));
message.setSubject( "Test message from async example ");
message.setHeader( "X-Mailer ","JavaMail ");
DateFormat dateFormatter = DateFormat
.getDateTimeInstance(DateFormat.LONG, DateFormat.SHORT);
Date timeStamp = new Date();String messageBody = "This is a test message from the async example "TheasyncExampleApplication
TheJavaEE6Tutorial • January2013 508
+"of the Java EE Tutorial. It was sent on "
+ dateFormatter.format(timeStamp)+".";
message.setText(messageBody);message.setSentDate(timeStamp);Transport.send(message);status = "Sent";
logger.log(Level.INFO, "Mail sent to {0} ", email);
} catch (MessagingException ex) {
logger.severe( "Error in sending message. ");
status = "Encountered an error ";
logger.severe(ex.getMessage() + ex.getNextException().getMessage());logger.severe(ex.getCause().getMessage());
}return new AsyncResult<String>(status);
}
ThewebclientconsistsofaFaceletstemplate, template.xhtml ,twoFaceletsclients,
index.xhtml andresponse.xhtml ,andaJavaServerFacesmanagedbean,
MailerManagedBean .The index.xhtml filecontainsaformforthetargetemailaddress.When
theusersubmitstheform,the MailerManagedBean.send methodiscalled.Thismethodusesan
injectedinstanceofthe MailerBean sessionbeantocall MailerBean.sendMessage .Theresultis
senttothe response.xhtml Faceletsview.
Runningthe asyncExample
YoucanuseeitherNetBeansIDEorAnttobuild,package,deploy,andrunthe asyncexample.
First,however,youmustconfigurethekeystoreandtruststore.
▼ToConfiguretheKeystoreandTruststoreinGlassFishServer
TheGlassFishServerdomainneedstobeconfiguredwiththeserver’smasterpasswordtoaccessthekeystoreandtruststoreusedtoinitiatesecurecommunicationsusingtheSMTPStransportprotocol.
OpentheGlassFishServerAdministrationConsoleinawebbrowserat
http://localhost:4848 .
ExpandConfigurations,thenexpandserver-config,thenclickJVMSettings.ClickJVMOptions,thenclickAddJVMOptionandenter
-Djavax.net.ssl.keyStorePassword= master-password ,replacing master-password withthe
keystoremasterpassword.Thedefaultmasterpasswordis changeit .
ClickAddJVMOptionandenter -Djavax.net.ssl.trustStorePassword= master-password ,
replacing master-password withthetruststoremasterpassword.Thedefaultmasterpasswordis
changeit .
ClickSave,thenrestartGlassFishServer.1
2
3
45TheasyncExampleApplication
Chapter27 • UsingAsynchronousMethodInvocationinSessionBeans 509
▼ToRunthe asyncExampleUsingNetBeansIDE
Beforerunningthisexample,youmustconfigureyourGlassFishServerinstancetoaccessthe
keystoreandtruststoreusedbyGlassFishServertocreateasecureconnectiontothetargetSMTPSserver.
FromtheFilemenu,chooseOpenProject.IntheOpenProjectdialog,navigateto:
tut-install /examples/ejb/
Selectthe asyncfolderandclickOpenProject.
Under asyncintheprojectpane,expandtheServerResourcesnodeanddouble-click
glassfish-resources.xml .
EntertheconfigurationsettingsforyourSMTPSserverin glassfish-resources.xml .
TheSMTPSserverhostnameissetinthe hostattribute;theemailaddressfromwhichyou
wantthemessagesentissetinthe fromattribute;andtheSMTPSusernameissetinthe user
attribute.Setthe mail-smtps-password propertyvaluetothepasswordfortheSMTPSserver
user.Thefollowingcodesnippetshowsanexampleresourceconfiguration.Linesinboldneedtobemodified.
<resources>
<mail-resource debug= "false "
enabled= "true"
from="user@example.com"host="smtp.example.com"jndi-name= "mail/myExampleSession "
object-type= "user"store-protocol= "imap"
store-protocol-class= "com.sun.mail.imap.IMAPStore "
transport-protocol= "smtps "
transport-protocol-class= "com.sun.mail.smtp.SMTPSSLTransport "
user="user@example.com" >
<description/><property name= "mail-smtps-auth "value= "true"/>
<property name= "mail-smtps-password "value="mypassword" />
</mail-resource>
</resources>
Right-click asyncintheprojectpaneandselectRun.
Thiswillcompile,assemble,anddeploytheapplication,andstartawebbrowseratthe
followingURL: http://localhost:8080/async .
Inthewebbrowserwindow,entertheemailtowhichyouwantthetestmessagesentandclick
Sendemail.
Ifyourconfigurationsettingsarecorrect,atestemailwillbesent,andthestatusmessagewill
read Sentinthewebclient.Thetestmessageshouldappearmomentarilyintheinboxofthe
recipient.BeforeYouBegin
1
2
3
4
5
6
7TheasyncExampleApplication
TheJavaEE6Tutorial • January2013 510
Ifanerroroccurs,thestatuswillread Encountered an error .Checkthe server.log filefor
yourdomaintofindthecauseoftheerror.
▼ToRunthe asyncExampleUsingAnt
Inaterminalwindow,navigateto tut-install /examples/ejb/async/ .
Inatexteditor,open setup/glassfish-resources.xml andentertheconfigurationsettings
foryourSMTPSserver.
TheSMTPSserverhostnameissetinthe hostattribute,emailaddressfromwhichyouwant
themessagesentisthe fromattribute,theSMTPSusernameisthe userattribute.Setthe
mail-smtps-password propertyvaluetothepasswordfortheSMTPSserveruser.The
followingcodesnippetshowsanexampleresourceconfiguration.Linesinboldneedtobemodified.
<resources>
<mail-resource debug= "false "
enabled= "true"
from="user@example.com"host="smtp.example.com"jndi-name= "mail/myExampleSession "
object-type= "user"store-protocol= "imap"
store-protocol-class= "com.sun.mail.imap.IMAPStore "
transport-protocol= "smtps "
transport-protocol-class= "com.sun.mail.smtp.SMTPSSLTransport "
user="user@example.com" >
<description/><property name= "mail-smtps-auth "value= "true"/>
<property name= "mail-smtps-password "value="mypassword" />
</mail-resource>
</resources>
Enterthefollowingcommand:
ant all
Thiswillcompile,assemble,anddeploytheapplication,andstartawebbrowseratthe
followingURL: http://localhost:8080/async .
Note–Ifyourbuildsystemisn’tconfiguredtoautomaticallyopenawebbrowser,opentheabove
URLinabrowserwindow.
Inthewebbrowserwindow,entertheemailtowhichyouwantthetestmessagesentandclick
Sendemail.
Ifyourconfigurationsettingsarecorrect,atestemailwillbesent,andthestatusmessagewill
read Sentinthewebclient.Thetestmessageshouldappearmomentarilyintheinboxofthe
recipient.
Ifanerroroccurs,thestatuswillread Encountered an error .Checkthe server.log filefor
yourdomaintofindthecauseoftheerror.1
2
3
4TheasyncExampleApplication
Chapter27 • UsingAsynchronousMethodInvocationinSessionBeans 511
512
ContextsandDependencyInjectionforthe
JavaEEPlatform
PartVexploresContextsandDependencyInjectionfortheJavaEEPlatform.Thispart
containsthefollowingchapters:
■Chapter28,“IntroductiontoContextsandDependencyInjectionfortheJavaEEPlatform”
■Chapter29,“RunningtheBasicContextsandDependencyInjectionExamples”
■Chapter30,“ContextsandDependencyInjectionfortheJavaEEPlatform:AdvancedTopics”
■Chapter31,“RunningtheAdvancedContextsandDependencyInjectionExamples”PART V
513
514
IntroductiontoContextsandDependency
InjectionfortheJavaEEPlatform
ContextsandDependencyInjection(CDI)fortheJavaEEplatformisoneofseveralJavaEE6
featuresthathelptoknittogetherthewebtierandthetransactionaltieroftheJavaEEplatform.CDIisasetofservicesthat,usedtogether,makeiteasyfordeveloperstouseenterprisebeansalongwithJavaServerFacestechnologyinwebapplications.Designedforusewithstatefulobjects,CDIalsohasmanybroaderuses,allowingdevelopersagreatdealofflexibilitytointegratevariouskindsofcomponentsinalooselycoupledbuttypesafeway.
CDIisspecifiedbyJSR299,formerlyknownasWebBeans.RelatedspecificationsthatCDIuses
includethefollowing:
■JSR330,DependencyInjectionforJava
■TheManagedBeansspecification,whichisanoffshootoftheJavaEE6platformspecification(JSR316)
Thefollowingtopicsareaddressedhere:
■“OverviewofCDI”onpage516
■“AboutBeans”onpage517
■“AboutCDIManagedBeans”onpage517
■“BeansasInjectableObjects”onpage518
■“UsingQualifiers”onpage519
■“InjectingBeans”onpage520
■“UsingScopes”onpage520
■“OverridingtheScopeofaBeanatthePointofInjection”onpage522
■“GivingBeansELNames”onpage522
■“AddingSetterandGetterMethods”onpage523
■“UsingaManagedBeaninaFaceletsPage”onpage524
■“InjectingObjectsbyUsingProducerMethods”onpage524
■“ConfiguringaCDIApplication”onpage525
■“Usingthe @PostConstruct and@PreDestroy AnnotationsWithCDIManagedBean
Classes”onpage525
■“FurtherInformationaboutCDI”onpage52628CHAPTER 28
515
OverviewofCDI
ThemostfundamentalservicesprovidedbyCDIareasfollows:
■Contexts :Theabilitytobindthelifecycleandinteractionsofstatefulcomponentsto
well-definedbutextensiblelifecyclecontexts
■Dependencyinjection :Theabilitytoinjectcomponentsintoanapplicationinatypesafe
way,includingtheabilitytochooseatdeploymenttimewhichimplementationofaparticularinterfacetoinject
Inaddition,CDIprovidesthefollowingservices:
■IntegrationwiththeExpressionLanguage(EL),whichallowsanycomponenttobeused
directlywithinaJavaServerFacespageoraJavaServerPagespage
■Theabilitytodecorateinjectedcomponents
■Theabilitytoassociateinterceptorswithcomponentsusingtypesafeinterceptorbindings
■Anevent-notificationmodel
■Awebconversationscopeinadditiontothethreestandardscopes(request,session,andapplication)definedbytheJavaServletspecification
■AcompleteServiceProviderInterface(SPI)thatallowsthird-partyframeworkstointegratecleanlyintheJavaEE6environment
AmajorthemeofCDIisloosecoupling.CDIdoesthefollowing:
■Decouplestheserverandtheclientbymeansofwell-definedtypesandqualifiers,sothatthe
serverimplementationmayvary
■Decouplesthelifecyclesofcollaboratingcomponentsbydoingthefollowing:
■Makingcomponentscontextual,withautomaticlifecyclemanagement
■Allowingstatefulcomponentstointeractlikeservices,purelybymessagepassing
■Completelydecouplesmessageproducersfromconsumers,bymeansofevents
■DecouplesorthogonalconcernsbymeansofJavaEEinterceptors
Alongwithloosecoupling,CDIprovidesstrongtypingby
■Eliminatinglookupusingstring-basednamesforwiringandcorrelations,sothatthe
compilerwilldetecttypingerrors
■AllowingtheuseofdeclarativeJavaannotationstospecifyeverything,largelyeliminatingtheneedforXMLdeploymentdescriptors,andmakingiteasytoprovidetoolsthatintrospectthecodeandunderstandthedependencystructureatdevelopmenttimeOverviewofCDI
TheJavaEE6Tutorial • January2013 516
AboutBeans
CDIredefinestheconceptofa beanbeyonditsuseinotherJavatechnologies,suchasthe
JavaBeansandEnterpriseJavaBeans(EJB)technologies.InCDI,abeanisasourceofcontextualobjectsthatdefineapplicationstateand/orlogic.AJavaEEcomponentisabeanifthelifecycleofitsinstancesmaybemanagedbythecontaineraccordingtothelifecyclecontextmodeldefinedintheCDIspecification.
Morespecifically,abeanhasthefollowingattributes:
■A(nonempty)setofbeantypes
■A(nonempty)setofqualifiers(see “UsingQualifiers”onpage519 )
■Ascope(see “UsingScopes”onpage520 )
■Optionally,abeanELname(see “GivingBeansELNames”onpage522 )
■Asetofinterceptorbindings
■Abeanimplementation
Abeantypedefinesaclient-visibletypeofthebean.AlmostanyJavatypemaybeabeantypeof
abean.
■Abeantypemaybeaninterface,aconcreteclass,oranabstractclassandmaybedeclaredfinalorhavefinalmethods.
■Abeantypemaybeaparameterizedtypewithtypeparametersandtypevariables.
■Abeantypemaybeanarraytype.Twoarraytypesareconsideredidenticalonlyiftheelementtypeisidentical.
■Abeantypemaybeaprimitivetype.Primitivetypesareconsideredtobeidenticaltotheircorrespondingwrappertypesin java.lang .
■Abeantypemaybearawtype.
AboutCDIManagedBeans
AmanagedbeanisimplementedbyaJavaclass,whichiscalleditsbeanclass.Atop-levelJava
classisamanagedbeanifitisdefinedtobeamanagedbeanbyanyotherJavaEEtechnologyspecification,suchastheJavaServerFacestechnologyspecification,orifitmeetsallthefollowingconditions:
■Itisnotanonstaticinnerclass.
■Itisaconcreteclassorisannotated @Decorator .
■ItisnotannotatedwithanEJBcomponent-definingannotationordeclaredasanEJBbean
classin ejb-jar.xml .AboutCDIManagedBeans
Chapter28 • IntroductiontoContextsandDependencyInjectionfortheJavaEEPlatform 517
■Ithasanappropriateconstructor.Thatis,oneofthefollowingisthecase:
■Theclasshasaconstructorwithnoparameters.
■Theclassdeclaresaconstructorannotated @Inject.
Nospecialdeclaration,suchasanannotation,isrequiredtodefineamanagedbean.
BeansasInjectableObjects
TheconceptofinjectionhasbeenpartofJavatechnologyforsometime.SincetheJavaEE5
platformwasintroduced,annotationshavemadeitpossibletoinjectresourcesandsomeotherkindsofobjectsintocontainer-managedobjects.CDImakesitpossibletoinjectmorekindsofobjectsandtoinjectthemintoobjectsthatarenotcontainer-managed.
Thefollowingkindsofobjectscanbeinjected:
■(Almost)anyJavaclass
■Sessionbeans
■JavaEEresources:datasources,JavaMessageServicetopics,queues,connectionfactories,
andthelike
■Persistencecontexts(JPA EntityManager objects)
■Producerfields
■Objectsreturnedbyproducermethods
■Webservicereferences
■Remoteenterprisebeanreferences
Forexample,supposethatyoucreateasimpleJavaclasswithamethodthatreturnsastring:
package greetings;
public class Greeting {
public String greet(String name) {
return "Hello, "+ name + ".";
}
}
Thisclassbecomesabeanthatyoucantheninjectintoanotherclass.Thisbeanisnotexposed
totheELinthisform. “GivingBeansELNames”onpage522 explainshowyoucanmakeabean
accessibletotheEL.BeansasInjectableObjects
TheJavaEE6Tutorial • January2013 518
UsingQualifiers
Youcanusequalifierstoprovidevariousimplementationsofaparticularbeantype.Aqualifier
isanannotationthatyouapplytoabean.AqualifiertypeisaJavaannotationdefinedas@Target({METHOD, FIELD, PARAMETER, TYPE}) and @Retention(RUNTIME) .
Forexample,youcoulddeclarean @Informal qualifiertypeandapplyittoanotherclassthat
extendsthe Greeting class.Todeclarethisqualifiertype,youwouldusethefollowingcode:
package greetings;
import static java.lang.annotation.ElementType.FIELD;
import static java.lang.annotation.ElementType.METHOD;import static java.lang.annotation.ElementType.PARAMETER;import static java.lang.annotation.ElementType.TYPE;import static java.lang.annotation.RetentionPolicy.RUNTIME;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;
import javax.inject.Qualifier;@Qualifier
@Retention(RUNTIME)@Target({TYPE, METHOD, FIELD, PARAMETER})public @interface Informal {}
Youcanthendefineabeanclassthatextendsthe Greeting classandusesthisqualifier:
package greetings;
@Informal
public class InformalGreeting extends Greeting {
public String greet(String name) {
return "Hi,"+ name + "!";
}
}
Bothimplementationsofthebeancannowbeusedintheapplication.
Ifyoudefineabeanwithnoqualifier,thebeanautomaticallyhasthequalifier @Default .The
unannotated Greeting classcouldbedeclaredasfollows:
package greetings;
import javax.enterprise.inject.Default;@Default
public class Greeting {
public String greet(String name) {
return "Hello, "+ name + ".";
}
}UsingQualifiers
Chapter28 • IntroductiontoContextsandDependencyInjectionfortheJavaEEPlatform 519
InjectingBeans
Inordertousethebeansyoucreate,youinjectthemintoyetanotherbeanthatcanthenbeused
byanapplication,suchasaJavaServerFacesapplication.Forexample,youmightcreateabeancalled Printerintowhichyouwouldinjectoneofthe Greeting beans:
import javax.inject.Inject;
public class Printer {
@Inject Greeting greeting;
...
Thiscodeinjectsthe @Default Greeting implementationintothebean.Thefollowingcode
injectsthe @Informal implementation:
import javax.inject.Inject;
public class Printer {
@Inject @Informal Greeting greeting;
...
Moreisneededforthecompletepictureofthisbean.Itsuseofscopeneedstobeunderstood.In
addition,foraJavaServerFacesapplication,thebeanneedstobeaccessiblethroughtheEL.
UsingScopes
Forawebapplicationtouseabeanthatinjectsanotherbeanclass,thebeanneedstobeableto
holdstateoverthedurationoftheuser’sinteractionwiththeapplication.Thewaytodefinethisstateistogivethebeanascope.Youcangiveanobjectanyofthescopesdescribedin
Table28–1 ,dependingonhowyouareusingit.
TABLE28–1 Scopes
Scope Annotation Duration
Request @RequestScoped Auser’sinteractionwithawebapplicationinasingle
HTTPrequest.
Session @SessionScoped Auser’sinteractionwithawebapplicationacross
multipleHTTPrequests.
Application @ApplicationScoped Sharedstateacrossallusers’interactionswithaweb
application.
Dependent @Dependent Thedefaultscopeifnoneisspecified;itmeansthatan
objectexiststoserveexactlyoneclient(bean)andhasthesamelifecycleasthatclient(bean).InjectingBeans
TheJavaEE6Tutorial • January2013 520
TABLE28–1 Scopes (Continued)
Scope Annotation Duration
Conversation @ConversationScoped Auser’sinteractionwithaJavaServerFacesapplication,
withinexplicitdeveloper-controlledboundariesthatextendthescopeacrossmultipleinvocationsoftheJavaServerFaceslifecycle.Alllong-runningconversationsarescopedtoaparticularHTTPservletsessionandmaynotcrosssessionboundaries.
ThefirstthreescopesaredefinedbybothJSR299andtheJavaServerFacesAPI.Thelasttwoare
definedbyJSR299.
Allpredefinedscopesexcept @Dependent arecontextualscopes.CDIplacesbeansofcontextual
scopeinthecontextwhoselifecycleisdefinedbytheJavaEEspecifications.Forexample,asessioncontextanditsbeansexistduringthelifetimeofanHTTPsession.Injectedreferencestothebeansarecontextuallyaware.Thereferencesalwaysapplytothebeanthatisassociatedwiththecontextforthethreadthatismakingthereference.TheCDIcontainerensuresthattheobjectsarecreatedandinjectedatthecorrecttimeasdeterminedbythescopethatisspecifiedfortheseobjects.
Youcanalsodefineandimplementcustomscopes,butthatisanadvancedtopic.Custom
scopesarelikelytobeusedbythosewhoimplementandextendtheCDIspecification.
Ascopegivesanobjectawell-definedlifecyclecontext.Ascopedobjectcanbeautomatically
createdwhenitisneededandautomaticallydestroyedwhenthecontextinwhichitwascreatedends.Moreover,itsstateisautomaticallysharedbyanyclientsthatexecuteinthesamecontext.
JavaEEcomponents,suchasservletsandenterprisebeans,andJavaBeanscomponentsdonot
bydefinitionhaveawell-definedscope.Thesecomponentsareoneofthefollowing:
■Singletons,suchasEnterpriseJavaBeanssingletonbeans,whosestateissharedamongallclients
■Statelessobjects,suchasservletsandstatelesssessionbeans,whichdonotcontainclient-visiblestate
■Objectsthatmustbeexplicitlycreatedanddestroyedbytheirclient,suchasJavaBeanscomponentsandstatefulsessionbeans,whosestateissharedbyexplicitreferencepassingbetweenclients
If,however,youcreateaJavaEEcomponentthatisamanagedbean,itbecomesascopedobject,
whichexistsinawell-definedlifecyclecontext.UsingScopes
Chapter28 • IntroductiontoContextsandDependencyInjectionfortheJavaEEPlatform 521
Thewebapplicationforthe Printerbeanwilluseasimplerequestandresponsemechanism,so
themanagedbeancanbeannotatedasfollows:
import javax.inject.Inject;
import javax.enterprise.context.RequestScoped;
@RequestScoped
public class Printer {
@Inject @Informal Greeting greeting;
...
Beansthatusesession,application,orconversationscopemustbeserializable,butbeansthat
userequestscopedonothavetobeserializable.
OverridingtheScopeofaBeanatthePointofInjection
Overridingthescopeofabeanatthepointofinjectionenablesanapplicationtorequestanewinstanceofthebeanwiththedefaultscope @Dependent .The @Dependent scopespecifiesthatthe
bean’slifecycleisthelifecycleoftheobjectintowhichthebeanisinjected.TheCDIcontainerprovidesnootherlifecyclemanagementfortheinstance.
Note–Theeffectsofoverridingthescopeofabeanmaybeunpredictableorundesirable,
especiallyiftheoverriddenscopeis @Request or@Session .
Tooverridethescopeofabeanatthepointofinjection,usethe
javax.enterprise.inject.New annotationinsteadofthe @Injectannotation.Formore
informationonthe @Injectannotation,see “InjectingBeans”onpage520 .
GivingBeansELNames
TomakeabeanaccessiblethroughtheEL,usethe @Namedbuilt-inqualifier:
import javax.inject.Inject;
import javax.enterprise.context.RequestScoped;import javax.inject.Named;
@Named
@RequestScopedpublic class Printer {
@Inject @Informal Greeting greeting;
...
The@Namedqualifierallowsyoutoaccessthebeanbyusingthebeanname,withthefirstletter
inlowercase.Forexample,aFaceletspagewouldrefertothebeanas printer.OverridingtheScopeofaBeanatthePointofInjection
TheJavaEE6Tutorial • January2013 522
Youcanspecifyanargumenttothe @Namedqualifiertouseanondefaultname:
@Named( "MyPrinter ")
Withthisannotation,theFaceletspagewouldrefertothebeanas MyPrinter .
AddingSetterandGetterMethods
Tomakethestateofthemanagedbeanaccessible,youneedtoaddsetterandgettermethodsfor
thatstate.The createSalutation methodcallsthebean’s greetmethod,andthe
getSalutation methodretrievestheresult.
Oncethesetterandgettermethodshavebeenadded,thebeaniscomplete.Thefinalcodelooks
likethis:
package greetings;
import javax.inject.Inject;
import javax.enterprise.context.RequestScoped;import javax.inject.Named;
@Named
@RequestScopedpublic class Printer {
@Inject @Informal Greeting greeting;private String name;
private String salutation;
public void createSalutation() {
this.salutation = greeting.greet(name);
}
public String getSalutation() {
return salutation;
}
public void setName(String name) {
this.name = name;
}
public String getName() {
return name;
}
}AddingSetterandGetterMethods
Chapter28 • IntroductiontoContextsandDependencyInjectionfortheJavaEEPlatform 523
UsingaManagedBeaninaFaceletsPage
TousethemanagedbeaninaFaceletspage,youtypicallycreateaformthatusesuserinterface
elementstocallitsmethodsanddisplaytheirresults.Thisexampleprovidesabuttonthataskstheusertotypeaname,retrievesthesalutation,andthendisplaysthetextinaparagraphbelowthebutton:
<h:form id= "greetme ">
<p><h:outputLabel value= "Enter your name: "for="name"/>
<h:inputText id= "name"value= "#{printer.name} "/></p>
<p><h:commandButton value= "Say Hello "
action= "#{printer.createSalutation} "/></p>
<p><h:outputText value= "#{printer.salutation} "/></p>
</h:form>
InjectingObjectsbyUsingProducerMethods
Producermethodsprovideawaytoinjectobjectsthatarenotbeans,objectswhosevaluesmay
varyatruntime,andobjectsthatrequirecustominitialization.Forexample,ifyouwanttoinitializeanumericvaluedefinedbyaqualifiernamed @MaxNumber ,youcandefinethevaluein
amanagedbeanandthendefineaproducermethod, getMaxNumber ,forit:
private int maxNumber = 100;
...@Produces @MaxNumber int getMaxNumber() {
return maxNumber;
}
Whenyouinjecttheobjectinanothermanagedbean,thecontainerautomaticallyinvokesthe
producermethod,initializingthevalueto100:
@Inject @MaxNumber private int maxNumber;
Ifthevaluecanvaryatruntime,theprocessisslightlydifferent.Forexample,thefollowingcodedefinesaproducermethodthatgeneratesarandomnumberdefinedbyaqualifiercalled@Random:
private java.util.Random random =
new java.util.Random( System.currentTimeMillis() );
java.util.Random getRandom() {
return random;
}
@Produces @Random int next() {
return getRandom().nextInt(maxNumber);
}
Whenyouinjectthisobjectinanothermanagedbean,youdeclareacontextualinstanceofthe
object:UsingaManagedBeaninaFaceletsPage
TheJavaEE6Tutorial • January2013 524
@Inject @Random Instance<Integer> randomInt;
Youthencallthe getmethodofthe Instance :
this.number = randomInt.get();
ConfiguringaCDIApplication
AnapplicationthatusesCDImusthaveafilenamed beans.xml .Thefilecanbecompletely
empty(ithascontentonlyincertainlimitedsituations),butitmustbepresent.Forawebapplication,the beans.xml filemustbeinthe WEB-INFdirectory.ForEJBmodulesorJARfiles,
thebeans.xml filemustbeinthe META-INF directory.
Usingthe@PostConstructand@PreDestroyAnnotationsWith
CDIManagedBeanClasses
CDImanagedbeanclassesandtheirsuperclassessupporttheannotationsforinitializingand
forpreparingforthedestructionofabean.Theseannotationaredefinedin JSR250:Common
AnnotationsfortheJavaplatform( http://jcp.org/en/jsr/detail?id=250 ).
▼ToInitializeaManagedBeanUsingthe
@PostConstructAnnotation
InitializingamanagedbeanspecifiesthelifecyclecallbackmethodthattheCDIframework
shouldcallafterdependencyinjectionbutbeforetheclassisputintoservice.
Inthemanagedbeanclassoranyofitssuperclasses,defineamethodthatperformsthe
initializationthatyourequire.
Annotatethedeclarationofthemethodwiththe javax.annotation.PostConstruct
annotation.
Whenthemanagedbeanisinjectedintoacomponent,CDIcallsthemethodafterallinjection
hasoccurredandafterallinitializershavebeencalled.
Note–AsmandatedinJSR250,iftheannotatedmethodisdeclaredinasuperclass,themethod
iscalledunlessasubclassofthedeclaringclassoverridesthemethod.1
2Usingthe@PostConstructand@PreDestroyAnnotationsWithCDIManagedBeanClasses
Chapter28 • IntroductiontoContextsandDependencyInjectionfortheJavaEEPlatform 525
TheUserNumberBean managedbeanin “The guessnumber CDIExample”onpage531 uses
@PostConstruct toannotateamethodthatresetsallbeanfields:
@PostConstruct
public void reset () {
this.minimum = 0;this.userNumber = 0;this.remainingGuesses = 0;this.maximum = maxNumber;this.number = randomInt.get();
}
▼ToPreparefortheDestructionofaManagedBean
Usingthe@PreDestroyAnnotation
Preparingforthedestructionofamanagedbeanspecifiesthelifecyclecallbackmethodthat
signalsthatanapplicationcomponentisabouttobedestroyedbythecontainer.
Inthemanagedbeanclassoranyofitssuperclasses,prepareforthedestructionofthe
managedbean.
Inthismethod,performanycleanupthatisrequiredbeforethebeanisdestroyed,suchas
releasingaresourcethatthebeanhasbeenholding.
Annotatethedeclarationofthemethodwiththe javax.annotation.PreDestroy annotation.
CDIcallsthismethodbeforestartingtodestroythebean.
FurtherInformationaboutCDI
FormoreinformationaboutCDIfortheJavaEEplatform,see
■ContextsandDependencyInjectionfortheJavaEEplatformspecification:
http://jcp.org/en/jsr/detail?id=299
■AnintroductiontoContextsandDependencyInjectionfortheJavaEEplatform:
http://docs.jboss.org/weld/reference/latest/en-US/html/
■DependencyInjectionforJavaspecification:
http://jcp.org/en/jsr/detail?id=330
■ManagedBeansspecification,whichispartoftheJavaPlatform,EnterpriseEdition6(Java
EE6)Specification:
http://jcp.org/en/jsr/detail?id=3161
2FurtherInformationaboutCDI
TheJavaEE6Tutorial • January2013 526
RunningtheBasicContextsandDependency
InjectionExamples
ThischapterdescribesindetailhowtobuildandrunsimpleexamplesthatuseCDI.The
examplesareinthe tut-install /examples/cdi/ directory:
Tobuildandruntheexamples,youwilldothefollowing:
1. UseNetBeansIDEortheAnttooltocompileandpackagetheexample.
2. UseNetBeansIDEortheAnttooltodeploytheexample.3. Runtheexampleinawebbrowser.
Eachexamplehasa build.xml filethatreferstofilesinthe tut-install /examples/bp-project/
directory.
See
Chapter2,“UsingtheTutorialExamples,” forbasicinformationoninstalling,building,and
runningtheexamples.
Thefollowingtopicsareaddressedhere:
■“The simplegreeting CDIExample”onpage527
■“The guessnumber CDIExample”onpage531
ThesimplegreetingCDIExample
Thesimplegreeting exampleillustratessomeofthemostbasicfeaturesofCDI:scopes,
qualifiers,beaninjection,andaccessingamanagedbeaninaJavaServerFacesapplication.Whenyouruntheexample,youclickabuttonthatpresentseitheraformaloraninformalgreeting,dependingonhowyoueditedoneoftheclasses.Theexampleincludesfoursourcefiles,aFaceletspageandtemplate,andconfigurationfiles.29CHAPTER 29
527
ThesimplegreetingSourceFiles
Thefoursourcefilesforthe simplegreeting exampleare
■Thedefault Greeting class,shownin “BeansasInjectableObjects”onpage518
■The@Informal qualifierinterfacedefinitionandthe InformalGreeting classthat
implementstheinterface,bothshownin “UsingQualifiers”onpage519
■ThePrintermanagedbeanclass,whichinjectsoneofthetwointerfaces,showninfullin
“AddingSetterandGetterMethods”onpage523
Thesourcefilesarelocatedinthe
tut-install /examples/cdi/simplegreeting/src/java/greetings/ directory.
TheFaceletsTemplateandPage
TousethemanagedbeaninasimpleFaceletsapplication,youcanuseaverysimpletemplate
fileand index.xhtml page.Thetemplatepage, template.xhtml ,lookslikethis:
<?xml version=’1.0’ encoding=’UTF-8’ ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN "
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd ">
<html lang= "en"
xmlns= "http://www.w3.org/1999/xhtml "
xmlns:h= "http://java.sun.com/jsf/html "
xmlns:ui= "http://java.sun.com/jsf/facelets ">
<h:head>
<meta http-equiv= "Content-Type "content= "text/html; charset=UTF-8 "/>
<h:outputStylesheet library= "css"name= "default.css "/>
<title>
<ui:insert name= "title ">Default Title</ui:insert>
</title>
</h:head>
<body>
<div id= "container ">
<div id= "header ">
<h2><ui:insert name= "head">Head</ui:insert></h2>
</div>
<div id= "space ">
<p></p>
</div>
<div id= "content ">
<ui:insert name= "content "/>
</div>
</div>
</body>
</html>
TocreatetheFaceletspage,youcanredefinethetitleandhead,thenaddasmallformtothe
content:ThesimplegreetingCDIExample
TheJavaEE6Tutorial • January2013 528
<?xml version=’1.0’ encoding=’UTF-8’ ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN "
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd ">
<html lang= "en"
xmlns= "http://www.w3.org/1999/xhtml "
xmlns:ui= "http://java.sun.com/jsf/facelets "
xmlns:h= "http://java.sun.com/jsf/html ">
<ui:composition template= "/template.xhtml ">
<ui:define name= "title ">Simple Greeting</ui:define>
<ui:define name= "head">Simple Greeting</ui:define>
<ui:define name= "content ">
<h:form id= "greetme ">
<p><h:outputLabel value= "Enter your name: "for="name"/>
<h:inputText id= "name"value= "#{printer.name} "/></p>
<p><h:commandButton value= "Say Hello "
action= "#{printer.createSalutation} "/></p>
<p><h:outputText value= "#{printer.salutation} "/> </p>
</h:form>
</ui:define>
</ui:composition>
</html>
Theformaskstheusertotypeaname.ThebuttonislabeledSayHello,andtheactiondefined
foritistocallthe createSalutation methodofthe Printermanagedbean.Thismethodin
turncallsthe greetmethodofthedefined Greeting class.
Theoutputtextfortheformisthevalueofthegreetingreturnedbythesettermethod.
Dependingonwhetherthedefaultorthe @Informal versionofthegreetingisinjected,thisis
oneofthefollowing,where nameisthenametypedbytheuser:
Hello,name .
Hi,name !
TheFaceletspageandtemplatearelocatedinthe
tut-install /examples/cdi/simplegreeting/web/ directory.
ThesimpleCSSfilethatisusedbytheFaceletspageisinthefollowinglocation:
tut-install /examples/cdi/simplegreeting/web/resources/css/default.css
ConfigurationFiles
Youmustcreateanempty beans.xml filetoindicatetoGlassFishServerthatyourapplicationis
aCDIapplication.Thisfilecanhavecontentinsomesituations,butnotinsimpleapplicationslikethisone.
Yourapplicationalsoneedsthebasicwebapplicationdeploymentdescriptors web.xmland
glassfish-web.xml .Theseconfigurationfilesarelocatedinthe
tut-install /examples/cdi/simplegreeting/web/WEB-INF/ directory.ThesimplegreetingCDIExample
Chapter29 • RunningtheBasicContextsandDependencyInjectionExamples 529
RunningthesimplegreetingExample
YoucanuseeitherNetBeansIDEorAnttobuild,package,deploy,andrunthe simplegreeting
application.
▼ToBuild,Package,andDeploythesimplegreetingExampleUsing
NetBeansIDE
Thisprocedurebuildstheapplicationintothe
tut-install /examples/cdi/simplegreeting/build/web/ directory.Thecontentsofthis
directoryaredeployedtotheGlassFishServer.
FromtheFilemenu,chooseOpenProject.IntheOpenProjectdialog,navigateto:
tut-install /examples/cdi/
Selectthe simplegreeting folder.
SelecttheOpenasMainProjectcheckbox.ClickOpenProject.
(Optional)Tomodifythe Printer.java file,performthesesteps:
a. ExpandtheSourcePackagesnode.b. Expandthe greetings node.
c. Double-clickthe Printer.java file.
d. Intheeditpane,commentoutthe @Informal annotation:
@Inject
//@InformalGreeting greeting;
e. Savethefile.
IntheProjectstab,right-clickthe simplegreeting projectandselectDeploy.
▼ToBuild,Package,andDeploythesimplegreetingExampleUsingAnt
Inaterminalwindow,goto:
tut-install /examples/cdi/simplegreeting/1
2
3
45
6
7
1ThesimplegreetingCDIExample
TheJavaEE6Tutorial • January2013 530
Typethefollowingcommand:
ant
Thiscommandcallsthe defaulttarget,whichbuildsandpackagestheapplicationintoaWAR
file,simplegreeting.war ,locatedinthe distdirectory.
Typethefollowingcommand:
ant deploy
Typingthiscommanddeploys simplegreeting.war totheGlassFishServer.
▼ToRunthesimplegreetingExample
Inawebbrowser,typethefollowingURL:
http://localhost:8080/simplegreeting
TheSimpleGreetingpageopens.
Typeanameinthetextfield.
Forexample,supposethatyoutype Duke.
ClicktheSayHellobutton.
Ifyoudidnotmodifythe Printer.java file,thefollowingtextstringappearsbelowthebutton:
Hi, Duke!
Ifyoucommentedoutthe @Informal annotationinthe Printer.java file,thefollowingtext
stringappearsbelowthebutton:
Hello, Duke.
TheguessnumberCDIExample
Theguessnumber example,somewhatmorecomplexthanthe simplegreeting example,
illustratestheuseofproducermethodsandofsessionandapplicationscope.Theexampleisagameinwhichyoutrytoguessanumberinfewerthantenattempts.Itissimilartotheguessnumber exampledescribedin
Chapter5,“IntroductiontoFacelets,” exceptthatyoucan
keepguessinguntilyougettherightansweroruntilyouuseupyourtenattempts.
Theexampleincludesfoursourcefiles,aFaceletspageandtemplate,andconfigurationfiles.
Theconfigurationfilesandthetemplatearethesameasthoseusedforthe simplegreeting
example.2
3
1
2
3TheguessnumberCDIExample
Chapter29 • RunningtheBasicContextsandDependencyInjectionExamples 531
TheguessnumberSourceFiles
Thefoursourcefilesforthe guessnumber exampleare
■The@MaxNumber qualifierinterface
■The@Randomqualifierinterface
■TheGenerator managedbean,whichdefinesproducermethods
■TheUserNumberBean managedbean
Thesourcefilesarelocatedinthe
tut-install /examples/cdi/guessnumber/src/java/guessnumber/ directory.
The@MaxNumber and@RandomQualifierInterfaces
The@MaxNumber qualifierinterfaceisdefinedasfollows:
package guessnumber;
import static java.lang.annotation.ElementType.FIELD;
import static java.lang.annotation.ElementType.METHOD;import static java.lang.annotation.ElementType.PARAMETER;import static java.lang.annotation.ElementType.TYPE;import static java.lang.annotation.RetentionPolicy.RUNTIME;
import java.lang.annotation.Documented;
import java.lang.annotation.Retention;import java.lang.annotation.Target;
import javax.inject.Qualifier;@Target( { TYPE, METHOD, PARAMETER, FIELD })
@Retention(RUNTIME)@Documented@Qualifierpublic @interface MaxNumber {
}
The@Randomqualifierinterfaceisdefinedasfollows:
package guessnumber;
import static java.lang.annotation.ElementType.FIELD;
import static java.lang.annotation.ElementType.METHOD;import static java.lang.annotation.ElementType.PARAMETER;import static java.lang.annotation.ElementType.TYPE;import static java.lang.annotation.RetentionPolicy.RUNTIME;
import java.lang.annotation.Documented;
import java.lang.annotation.Retention;import java.lang.annotation.Target;
import javax.inject.Qualifier;TheguessnumberCDIExample
TheJavaEE6Tutorial • January2013 532
@Target( { TYPE, METHOD, PARAMETER, FIELD })
@Retention(RUNTIME)@Documented@Qualifierpublic @interface Random {
}
TheGenerator ManagedBean
TheGenerator managedbeancontainsthetwoproducermethodsfortheapplication.The
beanhasthe @ApplicationScoped annotationtospecifythatitscontextextendsforthe
durationoftheuser’sinteractionwiththeapplication:
package guessnumber;
import java.io.Serializable;import javax.enterprise.context.ApplicationScoped;
import javax.enterprise.inject.Produces;
@ApplicationScoped
public class Generator implements Serializable {
private static final long serialVersionUID = −7213673465118041882L;
private java.util.Random random =
new java.util.Random( System.currentTimeMillis() );
private int maxNumber = 100;java.util.Random getRandom() {
return random;
}
@Produces @Random int next() {
return getRandom().nextInt(maxNumber);
}
@Produces @MaxNumber int getMaxNumber() {
return maxNumber;
}
}
TheUserNumberBean ManagedBean
TheUserNumberBean managedbean,themanagedbeanfortheJavaServerFacesapplication,
providesthebasiclogicforthegame.Thisbeandoesthefollowing:
■Implementssetterandgettermethodsforthebeanfields
■Injectsthetwoqualifierobjects
■Providesa resetmethodthatallowsyoutobeginanewgameafteryoucompleteone
■Providesa checkmethodthatdetermineswhethertheuserhasguessedthenumberTheguessnumberCDIExample
Chapter29 • RunningtheBasicContextsandDependencyInjectionExamples 533
■Providesa validateNumberRange methodthatdetermineswhethertheuser’sinputis
correct
Thebeanisdefinedasfollows:
package guessnumber;
import java.io.Serializable;import javax.annotation.PostConstruct;
import javax.enterprise.context.SessionScoped;import javax.enterprise.inject.Instance;import javax.inject.Inject;import javax.inject.Named;import javax.faces.application.FacesMessage;import javax.faces.component.UIComponent;import javax.faces.component.UIInput;import javax.faces.context.FacesContext;
@Named
@SessionScopedpublic class UserNumberBean implements Serializable {
private static final long serialVersionUID = −7698506329160109476L;
private int number;private Integer userNumber;private int minimum;private int remainingGuesses;
@MaxNumber
@Injectprivate int maxNumber;
private int maximum;@Random
@InjectInstance<Integer> randomInt;
public UserNumberBean() {
}
public int getNumber() {
return number;
}
public void setUserNumber(Integer user_number) {
userNumber = user_number;
}
public Integer getUserNumber() {
return userNumber;
}
public int getMaximum() {
return (this.maximum);
}TheguessnumberCDIExample
TheJavaEE6Tutorial • January2013 534
public void setMaximum(int maximum) {
this.maximum = maximum;
}
public int getMinimum() {
return (this.minimum);
}
public void setMinimum(int minimum) {
this.minimum = minimum;
}
public int getRemainingGuesses() {
return remainingGuesses;
}
public String check() throws InterruptedException {
if (userNumber > number) {
maximum = userNumber - 1;
}if (userNumber < number) {
minimum = userNumber + 1;
}if (userNumber == number) {
FacesContext.getCurrentInstance().addMessage(null,
new FacesMessage( "Correct! "));
}remainingGuesses--;return null;
}
@PostConstruct
public void reset() {
this.minimum = 0;this.userNumber = 0;this.remainingGuesses = 10;this.maximum = maxNumber;this.number = randomInt.get();
}
public void validateNumberRange(FacesContext context,
UIComponent toValidate,Object value) {
if (remainingGuesses <= 0) {
FacesMessage message = new FacesMessage( "No guesses left! ");
context.addMessage(toValidate.getClientId(context), message);((UIInput) toValidate).setValid(false);return;
}int input = (Integer) value;
if (input < minimum || input > maximum) {
((UIInput) toValidate).setValid(false);
FacesMessage message = new FacesMessage( "Invalid guess ");
context.addMessage(toValidate.getClientId(context), message);
}
}
}TheguessnumberCDIExample
Chapter29 • RunningtheBasicContextsandDependencyInjectionExamples 535
TheFaceletsPage
Thisexampleusesthesametemplatethatthe simplegreeting exampleuses.The index.xhtml
file,however,ismorecomplex.
<?xml version=’1.0’ encoding=’UTF-8’ ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN "
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd ">
<html lang= "en"
xmlns= "http://www.w3.org/1999/xhtml "
xmlns:ui= "http://java.sun.com/jsf/facelets "
xmlns:h= "http://java.sun.com/jsf/html ">
<ui:composition template= "/template.xhtml ">
<ui:define name= "title ">Guess My Number</ui:define>
<ui:define name= "head">Guess My Number</ui:define>
<ui:define name= "content ">
<h:form id= "GuessMain ">
<div style= "color: black; font-size: 24px; ">
<p>I’m thinking of a number from<span style= "color: blue ">#{userNumberBean.minimum}</span>
to<span style= "color: blue ">#{userNumberBean.maximum}</span>.
You have<span style= "color: blue ">#{userNumberBean.remainingGuesses}</span>
guesses.</p>
</div><h:panelGrid border= "0"columns= "5"style= "font-size: 18px; ">
<h:outputLabel for= "inputGuess ">Number:</h:outputLabel>
<h:inputText id= "inputGuess "
value= "#{userNumberBean.userNumber} "
required= "true
"size= "3"
disabled= "#{userNumberBean.number eq userNumberBean.userNumber} "
validator= "#{userNumberBean.validateNumberRange} ">
</h:inputText><h:commandButton id= "GuessButton "value= "Guess "
action= "#{userNumberBean.check} "
disabled= "#{userNumberBean.number eq userNumberBean.userNumber} "/>
<h:commandButton id= "RestartButton "value= "Reset "
action= "#{userNumberBean.reset} "
immediate= "true"/>
<h:outputText id= "Higher "value= "Higher! "
rendered= "#{userNumberBean.number gt userNumberBean.userNumber and userNumberBean.userNumber ne 0} "
style= "color: #d20005 "/>
<h:outputText id= "Lower "value= "Lower! "
rendered= "#{userNumberBean.number lt userNumberBean.userNumber and userNumberBean.userNumber ne 0} "
style= "color: #d20005 "/>
</h:panelGrid><div style= "color: #d20005; font-size: 14px; ">
<h:messages id= "messages "globalOnly= "false "/>
</div>
</h:form>
</ui:define>
</ui:composition>
</html>TheguessnumberCDIExample
TheJavaEE6Tutorial • January2013 536
TheFaceletspagepresentstheuserwiththeminimumandmaximumvaluesandthenumberof
guessesremaining.Theuser’sinteractionwiththegametakesplacewithinthe panelGrid table,
whichcontainsaninputfield,GuessandResetbuttons,andatextfieldthatappearsiftheguessishigherorlowerthanthecorrectnumber.EverytimetheuserclickstheGuessbutton,theuserNumberBean.check methodiscalledtoresetthemaximumorminimumvalueor,ifthe
guessiscorrect,togeneratea FacesMessage tothateffect.Themethodthatdetermineswhether
eachguessisvalidis userNumberBean.validateNumberRange .
RunningtheguessnumberExample
YoucanuseeitherNetBeansIDEorAnttobuild,package,deploy,andrunthe guessnumber
application.
▼ToBuild,Package,andDeploytheguessnumberExampleUsing
NetBeansIDE
Thisprocedurebuildstheapplicationintothe
tut-install /examples/cdi/guessnumber/build/web/ directory.Thecontentsofthisdirectory
aredeployedtotheGlassFishServer.
FromtheFilemenu,chooseOpenProject.IntheOpenProjectdialog,navigateto:
tut-install /examples/cdi/
Selectthe guessnumber folder.
SelecttheOpenasMainProjectcheckbox.ClickOpenProject.IntheProjectstab,right-clickthe guessnumber projectandselectDeploy.
▼ToBuild,Package,andDeploytheguessnumberExampleUsingAnt
Inaterminalwindow,goto:
tut-install /examples/cdi/guessnumber/
Typethefollowingcommand:
ant
Thiscommandcallsthe defaulttarget,whichbuildsandpackagestheapplicationintoaWAR
file,guessnumber.war ,locatedinthe distdirectory.1
2
3
456
1
2TheguessnumberCDIExample
Chapter29 • RunningtheBasicContextsandDependencyInjectionExamples 537
Typethefollowingcommand:
ant deploy
Theguessnumber.war filewillbedeployedtotheGlassFishServer.
▼ToRuntheguessnumberExample
Inawebbrowser,typethefollowingURL:
http://localhost:8080/guessnumber
TheGuessMyNumberpageopens.
TypeanumberintheNumbertextfieldandclickGuess.
Theminimumandmaximumvaluesaremodified,alongwiththeremainingnumberof
guesses.
Keepguessingnumbersuntilyougettherightanswerorrunoutofguesses.
Ifyougettherightanswer,theinputfieldandGuessbuttonaregrayedout.
ClicktheResetbuttontoplaythegameagainwithanewrandomnumber.3
1
2
3
4TheguessnumberCDIExample
TheJavaEE6Tutorial • January2013 538
ContextsandDependencyInjectionforthe
JavaEEPlatform:AdvancedTopics
ThischapterdescribesmoreadvancedfeaturesofContextsandDependencyInjectionforthe
JavaEEPlatform.Specifically,itcoversadditionalfeaturesCDIprovidestoenableloosecouplingofcomponentswithstrongtyping,inadditiontothosedescribedin
“Overviewof
CDI”onpage516 .
Thefollowingtopicsareaddressedhere:
■“UsingAlternativesinCDIApplications”onpage539
■“UsingProducerMethods,ProducerFields,andDisposerMethodsinCDIApplications”on
page541
■“UsingPredefinedBeansinCDIApplications”onpage544
■“UsingEventsinCDIApplications”onpage545
■“UsingInterceptorsinCDIApplications”onpage547
■“UsingDecoratorsinCDIApplications”onpage549
■“UsingStereotypesinCDIApplications”onpage550
UsingAlternativesinCDIApplications
Whenyouhavemorethanoneversionofabeanyouusefordifferentpurposes,youcanchoosebetweenthemduringthedevelopmentphasebyinjectingonequalifieroranother,asshownin
“The simplegreeting CDIExample”onpage527 .
Insteadofhavingtochangethesourcecodeofyourapplication,however,youcanmakethe
choiceatdeploymenttimebyusing alternatives .
Alternativesarecommonlyusedforpurposeslikethefollowing:
■Tohandleclient-specificbusinesslogicthatisdeterminedatruntime
■Tospecifybeansthatarevalidforaparticulardeploymentscenario(forexample,when
country-specificsalestaxlawsrequirecountry-specificsalestaxbusinesslogic)
■Tocreatedummy(mock)versionsofbeanstobeusedfortesting30CHAPTER 30
539
Tomakeabeanavailableforlookup,injection,orELresolutionusingthismechanism,giveita
javax.enterprise.inject.Alternative annotationandthenusethe alternative element
tospecifyitinthe beans.xml file.
Forexample,youmightwanttocreateafullversionofabeanandalsoasimplerversionthat
youuseonlyforcertainkindsoftesting.Theexampledescribedin “The encoderExample:
UsingAlternatives”onpage553 containstwosuchbeans, CoderImpl andTestCoderImpl .The
testbeanisannotatedasfollows:
@Alternative
public class TestCoderImpl implements Coder { ... }
Thefullversionisnotannotated:
public class CoderImpl implements Coder { ... }
Themanagedbeaninjectsaninstanceofthe Coderinterface:
@Inject
Coder coder;
Thealternativeversionofthebeanisusedbytheapplicationonlyifthatversionisdeclaredas
followsinthe beans.xml file:
<beans ... >
<alternatives>
<class>encoder.TestCoderImpl</class>
</alternatives>
</beans>
Ifthe alternatives elementiscommentedoutinthe beans.xml file,the CoderImpl classis
used.
Youcanalsohaveseveralbeansthatimplementthesameinterface,allannotated
@Alternative .Inthiscase,youmustspecifyinthe beans.xml filewhichofthesealternative
beansyouwanttouse.If CoderImpl werealsoannotated @Alternative ,oneofthetwobeans
wouldalwayshavetobespecifiedinthe beans.xml file.
UsingSpecialization
Specializationhasafunctionsimilartothatofalternatives,inthatitallowsyoutosubstituteone
beanforanother.However,youmightwanttomakeonebeanoverridetheotherinallcases.Supposeyoudefinedthefollowingtwobeans:
@Default @Asynchronous
public class AsynchronousService implements Service { ... }
@Alternative
public class MockAsynchronousService extends AsynchronousService { ... }UsingAlternativesinCDIApplications
TheJavaEE6Tutorial • January2013 540
Ifyouthendeclared MockAsynchronousService asanalternativeinyour beans.xml file,the
followinginjectionpointwouldresolveto MockAsynchronousService :
@Inject Service service;
Thefollowing,however,wouldresolveto AsynchronousService ratherthan
MockAsynchronousService ,because MockAsynchronousService doesnothavethe
@Asynchronous qualifier:
@Inject @Asynchronous Service service;
Tomakesure MockAsynchronousService wasalwaysinjected,youwouldhavetoimplementall
beantypesandbeanqualifiersof AsynchronousService .However,if AsynchronousService
declaredaproducermethodorobservermethod,eventhiscumbersomemechanismwouldnotensurethattheotherbeanwasneverinvoked.Specializationprovidesasimplermechanism.
Specialization happensatdevelopmenttimeaswellasatruntime.Ifyoudeclarethatonebean
specializesanother,itextendstheotherbeanclass,andatruntimethespecializedbeancompletelyreplacestheotherbean.Ifthefirstbeanisproducedbymeansofaproducermethod,youmustalsooverridetheproducermethod.
Youspecializeabeanbygivingitthe javax.enterprise.inject.Specializes annotation.
Forexample,youmightdeclareabeanasfollows:
@Specializes
public class MockAsynchronousService extends AsynchronousService { ... }
Inthiscase,the MockAsynchronousService classwillalwaysbeinvokedinsteadofthe
AsynchronousService class.
Usually,abeanmarkedwiththe @Specializes annotationisalsoanalternativeandisdeclared
asanalternativeinthe beans.xml file.Suchabeanismeanttostandinasareplacementforthe
defaultimplementation,andthealternativeimplementationautomaticallyinheritsallqualifiersofthedefaultimplementationaswellasitsELname,ifithasone.
UsingProducerMethods,ProducerFields,andDisposer
MethodsinCDIApplications
Aproducermethod generatesanobjectthatcanthenbeinjected.Typically,youuseproducer
methodsinthefollowingsituations:
■Whenyouwanttoinjectanobjectthatisnotitselfabean
■Whentheconcretetypeoftheobjecttobeinjectedmayvaryatruntime
■WhentheobjectrequiressomecustominitializationthatthebeanconstructordoesnotperformUsingProducerMethods,ProducerFields,andDisposerMethodsinCDIApplications
Chapter30 • ContextsandDependencyInjectionfortheJavaEEPlatform:AdvancedTopics 541
Formoreinformationonproducermethods,see “InjectingObjectsbyUsingProducer
Methods”onpage524 .
Aproducerfield isasimpleralternativetoaproducermethod;itisafieldofabeanthat
generatesanobject.Itcanbeusedinsteadofasimplegettermethod.ProducerfieldsareparticularlyusefulfordeclaringJavaEEresourcessuchasdatasources,JMSresources,andwebservicereferences.
Aproducermethodorfieldisannotatedwiththe javax.enterprise.inject.Produces
annotation.
UsingProducerMethods
Aproducermethodcanallowyoutoselectabeanimplementationatruntime,insteadofatdevelopmenttimeordeploymenttime.Forexample,intheexampledescribedin
“The
producermethods Example:UsingaProducerMethodToChooseaBeanImplementation”on
page558,themanagedbeandefinesthefollowingproducermethod:
@Produces
@Chosen@RequestScopedpublic Coder getCoder(@New TestCoderImpl tci,
@New CoderImpl ci) {
switch (coderType) {
case TEST:
return tci;
case SHIFT:
return ci;
default:
return null;
}
}
Thejavax.enterprise.inject.New qualifierinstructstheCDIruntimetoinstantiatebothof
thecoderimplementationsandprovidethemasargumentstotheproducermethod.Here,getCoder becomesineffectagettermethod,andwhenthe coderpropertyisinjectedwiththe
samequalifierandotherannotationsasthemethod,theselectedversionoftheinterfaceisused.
@Inject
@Chosen@RequestScopedCoder coder;
Specifyingthequalifierisessential:IttellsCDIwhich Codertoinject.Withoutit,theCDI
implementationwouldnotbeabletochoosebetween CoderImpl ,TestCoderImpl ,andtheone
returnedby getCoder ,andwouldcanceldeployment,informingtheuseroftheambiguous
dependency.UsingProducerMethods,ProducerFields,andDisposerMethodsinCDIApplications
TheJavaEE6Tutorial • January2013 542
UsingProducerFieldstoGenerateResources
AcommonuseofaproducerfieldistogenerateanobjectsuchasaJDBC DataSource oraJava
PersistenceAPI EntityManager .Theobjectcanthenbemanagedbythecontainer.For
example,youcouldcreatea @UserDatabase qualifierandthendeclareaproducerfieldforan
entitymanagerasfollows:
@Produces
@UserDatabase@PersistenceContextprivate EntityManager em;
The@UserDatabase qualifiercanbeusedwhenyouinjecttheobjectintoanotherbean,
RequestBean ,elsewhereintheapplication:
@Inject
@UserDatabaseEntityManager em;...
“The producerfields Example:UsingProducerFieldstoGenerateResources”onpage561
showshowtouseproducerfieldstogenerateanentitymanager.Youcanuseasimilar
mechanismtoinject @Resource ,@EJB,or@WebServiceRef objects.
Tominimizetherelianceonresourceinjection,specifytheproducerfieldfortheresourcein
oneplaceintheapplication,theninjecttheobjectwhereverintheapplicationyouneedit.
UsingaDisposerMethod
Youcanuseaproducermethodtogenerateanobjectthatneedstoberemovedwhenitsworkiscompleted.Ifyoudo,youneedacorresponding disposermethod ,annotatedwitha @Disposes
annotation.Forexample,ifyouusedaproducermethodinsteadofaproducerfieldtocreatetheentitymanager,youwouldcreateandcloseitasfollows:
@PersistenceContext
private EntityManager em;
@Produces
@UserDatabasepublic EntityManager create() {
return em;
}
public void close(@Disposes @UserDatabase EntityManager em) {
em.close();
}
Thedisposermethodiscalledautomaticallywhenthecontextends(inthiscase,attheendof
theconversation,because RequestBean hasconversationscope),andtheparameterinthe
closemethodreceivestheobjectproducedbytheproducermethod, create.UsingProducerMethods,ProducerFields,andDisposerMethodsinCDIApplications
Chapter30 • ContextsandDependencyInjectionfortheJavaEEPlatform:AdvancedTopics 543
UsingPredefinedBeansinCDIApplications
CDIprovidespredefinedbeansthatimplementthefollowinginterfaces:
javax.transaction.UserTransaction
AJavaTransactionAPI(JTA)usertransaction.
java.security.Principal
Theabstractnotionofaprincipal,whichrepresentsanyentity,suchasanindividual,acorporation,oraloginID.Whenevertheinjectedprincipalisaccessed,italwaysrepresentstheidentityofthecurrentcaller.Forexample,aprincipalisinjectedintoafieldatinitialization.Later,amethodthatusestheinjectedprincipaliscalledontheobjectintowhichtheprincipalwasinjected.Inthissituation,theinjectedprincipalrepresentstheidentityofthecurrentcallerwhenthemethodisrun.
javax.validation.Validator
Avalidatorforbeaninstances.Thebeanthatimplementsthisinterfaceenablesa Validator
objectforthedefaultbeanvalidation ValidatorFactory objecttobeinjected.
javax.validation.ValidatorFactory
Afactoryclassforreturninginitialized Validator instances.Thebeanthatimplementsthis
interfaceenablesthedefaultbeanvalidationobject ValidatorFactory tobeinjected.
Toinjectapredefinedbean,createaninjectionpointbyusingthe
javax.annotation.Resource annotationtoobtainaninstanceofthebean.Forthebeantype,
specifytheclassnameoftheinterfacethebeanimplements.
Predefinedbeansareinjectedwithdependentscopeandthepredefineddefaultqualifier
@Default .
Formoreinformationaboutinjectingresources,see
“ResourceInjection”onpage807 .
Thefollowingcodesnippetshowshowtousethe @Resource annotationtoinjectapredefined
bean.Thiscodesnippetinjectsausertransactionintotheservletclass TransactionServlet .
Theusertransactionisaninstanceofthepredefinedbeanthatimplementsthejavax.transaction.UserTransaction interface.
import javax.annotation.Resource;
import javax.servlet.http.HttpServlet;import javax.transaction.UserTransaction;...public class TransactionServlet extends HttpServlet {
@Resource UserTransaction transaction;...
}UsingPredefinedBeansinCDIApplications
TheJavaEE6Tutorial • January2013 544
UsingEventsinCDIApplications
Eventsallowbeanstocommunicatewithoutanycompile-timedependency.Onebeancan
defineanevent,anotherbeancanfiretheevent,andyetanotherbeancanhandletheevent.Thebeanscanbeinseparatepackagesandeveninseparatetiersoftheapplication.
DefiningEvents
Aneventconsistsofthefollowing:
■Theeventobject,aJavaobject
■Zeroormorequalifiertypes,theeventqualifiers
Forexample,inthe billpayment exampledescribedin “The billpayment Example:Using
EventsandInterceptors”onpage568 ,aPaymentEvent beandefinesaneventusingthree
properties,whichhavesetterandgettermethods:
public String paymentType;
public BigDecimal value;public Date datetime;
public PaymentEvent() {
}
Theexamplealsodefinesqualifiersthatdistinguishbetweentwokindsof PaymentEvent .Every
eventalsohasthedefaultqualifier @Any.
UsingObserverMethodstoHandleEvents
Aneventhandlerusesan observermethod toconsumeevents.
Eachobservermethodtakesasaparameteraneventofaspecificeventtypethatisannotated
withthe @Observes annotationandwithanyqualifiersforthateventtype.Theobservermethod
isnotifiedofaneventiftheeventobjectmatchestheeventtypeandifallthequalifiersoftheeventmatchtheobservermethodeventqualifiers.
Theobservermethodcantakeotherparametersinadditiontotheeventparameter.The
additionalparametersareinjectionpointsandcandeclarequalifiers.
Theeventhandlerforthe billpayment example, PaymentHandler ,definestwoobserver
methods,oneforeachtypeof PaymentEvent :
public void creditPayment(@Observes @Credit PaymentEvent event) {
...
}UsingEventsinCDIApplications
Chapter30 • ContextsandDependencyInjectionfortheJavaEEPlatform:AdvancedTopics 545
public void debitPayment(@Observes @Debit PaymentEvent event) {
...
}
Observermethodscanalsobeconditionalortransactional:
■Aconditionalobservermethodisnotifiedofaneventonlyifaninstanceofthebeanthat
definestheobservermethodalreadyexistsinthecurrentcontext.Todeclareaconditionalobservermethod,specify notifyObserver=IF_EXISTS asanargumentto @Observes :
@Observes(notifyObserver=IF_EXISTS)
Toobtainthedefaultunconditionalbehavior,youcanspecify
@Observes(notifyObserver=ALWAYS) .
■Atransactionalobservermethodisnotifiedofaneventduringthebefore-completionor
after-completionphaseofthetransactioninwhichtheeventwasfired.Youcanalsospecifythatthenotificationistooccuronlyafterthetransactionhascompletedsuccessfullyorunsuccessfully.Tospecifyatransactionalobservermethod,useanyofthefollowingargumentsto @Observes :
@Observes(during=BEFORE_COMPLETION)
@Observes(during=AFTER_COMPLETION)@Observes(during=AFTER_SUCCESS)@Observes(during=AFTER_FAILURE)
Toobtainthedefaultnon-transactionalbehavior,specify
@Observes(during=IN_PROGRESS) .
Anobservermethodthatiscalledbeforecompletionofatransactionmaycallthe
setRollbackOnly methodonthetransactioninstancetoforceatransactionrollback.
Observermethodsmaythrowexceptions.Ifatransactionalobservermethodthrowsan
exception,theexceptioniscaughtbythecontainer.Iftheobservermethodisnon-transactional,theexceptionterminatesprocessingoftheevent,andnootherobservermethodsfortheeventarecalled.
FiringEvents
Toactivateanevent,callthe javax.enterprise.event.Event.fire method.Thismethod
firesaneventandnotifiesanyobservermethods.
Inthe billpayment example,amanagedbeancalled PaymentBean firestheappropriateeventby
usinginformationitreceivesfromtheuserinterface.Thereareactuallyfoureventbeans,twofortheeventobjectandtwoforthepayload.Themanagedbeaninjectsthetwoeventbeans.Thepaymethodusesa switchstatementtochoosewhicheventtofire,using newtocreatethe
payload.UsingEventsinCDIApplications
TheJavaEE6Tutorial • January2013 546
@Inject
@CreditEvent<PaymentEvent> creditEvent;
@Inject
@DebitEvent<PaymentEvent> debitEvent;
private static final int DEBIT = 1;
private static final int CREDIT = 2;private int paymentOption = DEBIT;...
@Logged
public String pay() {
...switch (paymentOption) {
case DEBIT:
PaymentEvent debitPayload = new PaymentEvent();// populate payload ...debitEvent.fire(debitPayload);break;
case CREDIT:
PaymentEvent creditPayload = new PaymentEvent();// populate payload ...creditEvent.fire(creditPayload);break;
default:
logger.severe( "Invalid payment option! ");
}...
}
Theargumenttothe firemethodisa PaymentEvent thatcontainsthepayload.Thefiredevent
isthenconsumedbytheobservermethods.
UsingInterceptorsinCDIApplications
Aninterceptor isaclassusedtointerposeinmethodinvocationsorlifecycleeventsthatoccurin
anassociatedtargetclass.Theinterceptorperformstasks,suchasloggingorauditing,thatareseparatefromthebusinesslogicoftheapplicationandarerepeatedoftenwithinanapplication.Suchtasksareoftencalled cross-cutting tasks.Interceptorsallowyoutospecifythecodefor
thesetasksinoneplaceforeasymaintenance.WheninterceptorswerefirstintroducedtotheJavaEEplatform,theywerespecifictoenterprisebeans.OntheJavaEE6platformyoucanusethemwithJavaEEmanagedobjectsofallkinds,includingmanagedbeans.
ForinformationonJavaEEinterceptors,see
Chapter50,“UsingJavaEEInterceptors.”
Aninterceptorclassoftencontainsamethodannotated @AroundInvoke ,whichspecifiesthe
taskstheinterceptorwillperformwheninterceptedmethodsareinvoked.Itcanalsocontainamethodannotated @PostConstruct ,@PreDestroy ,@PrePassivate ,or@PostActivate ,to
specifylifecyclecallbackinterceptors,andamethodannotated @AroundTimeout ,tospecifyEJBUsingInterceptorsinCDIApplications
Chapter30 • ContextsandDependencyInjectionfortheJavaEEPlatform:AdvancedTopics 547
timeoutinterceptors.Aninterceptorclasscancontainmorethanoneinterceptormethod,butit
musthavenomorethanonemethodofeachtype.
Alongwithaninterceptor,anapplicationdefinesoneormore interceptorbindingtypes ,which
areannotationsthatassociateaninterceptorwithtargetbeansormethods.Forexample,thebillpayment examplecontainsaninterceptorbindingtypenamed @Loggedandaninterceptor
named LoggedInterceptor .
Theinterceptorbindingtypedeclarationlookssomethinglikeaqualifierdeclaration,butitis
annotatedwith javax.interceptor.InterceptorBinding :
@Inherited
@InterceptorBinding@Retention(RUNTIME)@Target({METHOD, TYPE})public @interface Logged {}
Aninterceptorbindingalsohasthe java.lang.annotation.Inherited annotation,tospecify
thattheannotationcanbeinheritedfromsuperclasses.The @Inherited annotationalsoapplies
tocustomscopes(notdiscussedinthistutorial),butdoesnotapplytoqualifiers.
Aninterceptorbindingtypemaydeclareotherinterceptorbindings.Theinterceptorclassisannotatedwiththeinterceptorbindingaswellaswiththe
@Interceptor annotation.Foranexample,see
“The LoggedInterceptor InterceptorClass”on
page572.
Every @AroundInvoke methodtakesa javax.interceptor.InvocationContext argument,
returnsa java.lang.Object ,andthrowsan Exception .Itcancall InvocationContext
methods.The @AroundInvoke methodmustcallthe proceedmethod,whichcausesthetarget
classmethodtobeinvoked.
Onceaninterceptorandbindingtypearedefined,youcanannotatebeansandindividual
methodswiththebindingtypetospecifythattheinterceptoristobeinvokedeitheronallmethodsofthebeanoronspecificmethods.Forexample,inthe billpayment example,the
PaymentHandler beanisannotated @Logged,whichmeansthatanyinvocationofitsbusiness
methodswillcausetheinterceptor’s @AroundInvoke methodtobeinvoked:
@Logged
@SessionScopedpublic class PaymentHandler implements Serializable {...}
However,inthe PaymentBean bean,onlythe payandresetmethodshavethe @Logged
annotation,sotheinterceptorisinvokedonlywhenthesemethodsareinvoked:
@Logged
public String pay() {...}
@Logged
public void reset() {...}UsingInterceptorsinCDIApplications
TheJavaEE6Tutorial • January2013 548
InorderforaninterceptortobeinvokedinaCDIapplication,itmust,likeanalternative,be
specifiedinthe beans.xml file.Forexample,the LoggedInterceptor classisspecifiedas
follows:
<interceptors>
<class>billpayment.interceptors.LoggedInterceptor</class>
</interceptors>
Ifanapplicationusesmorethanoneinterceptor,theinterceptorsareinvokedintheorder
specifiedinthe beans.xml file.
UsingDecoratorsinCDIApplications
Adecorator isaJavaclassthatisannotated javax.decorator.Decorator andthathasa
corresponding decorators elementinthe beans.xml file.
Adecoratorbeanclassmustalsohaveadelegateinjectionpoint,whichisannotated
javax.decorator.Delegate .Thisinjectionpointcanbeafield,aconstructorparameter,oran
initializermethodparameterofthedecoratorclass.
Decoratorsareoutwardlysimilartointerceptors.However,theyactuallyperformtasks
complementarytothoseperformedbyinterceptors.Interceptorsperformcross-cuttingtasksassociatedwithmethodinvocationandwiththelifecyclesofbeans,butcannotperformanybusinesslogic.Decorators,ontheotherhand,doperformbusinesslogicbyinterceptingbusinessmethodsofbeans.Thismeansthatinsteadofbeingreusablefordifferentkindsofapplicationsasareinterceptors,theirlogicisspecifictoaparticularapplication.
Forexample,insteadofusinganalternative TestCoderImpl classforthe encoderexample,you
couldcreateadecoratorasfollows:
@Decorator
public abstract class CoderDecorator implements Coder {
@Inject
@Delegate@AnyCoder coder;
public String codeString(String s, int tval) {
int len = s.length();
return "\""+s+ "\"becomes "+"\""+ coder.codeString(s, tval)
+"\","+ len + "characters in length ";
}
}
See“The decorators Example:DecoratingaBean”onpage574 foranexamplethatusesthis
decorator.UsingDecoratorsinCDIApplications
Chapter30 • ContextsandDependencyInjectionfortheJavaEEPlatform:AdvancedTopics 549
Thissimpledecoratorreturnsmoredetailedoutputthantheencodedstringreturnedbythe
CoderImpl.codeString method.Amorecomplexdecoratorcouldstoreinformationina
databaseorperformsomeotherbusinesslogic.
Adecoratorcanbedeclaredasanabstractclass,sothatitdoesnothavetoimplementallthe
businessmethodsoftheinterface.
InorderforadecoratortobeinvokedinaCDIapplication,itmust,likeaninterceptororan
alternative,bespecifiedinthe beans.xml file.Forexample,the CoderDecorator classis
specifiedasfollows:
<decorators>
<class>decorators.CoderDecorator</class>
</decorators>
Ifanapplicationusesmorethanonedecorator,thedecoratorsareinvokedintheorderinwhich
theyarespecifiedinthe beans.xml file.
Ifanapplicationhasbothinterceptorsanddecorators,theinterceptorsareinvokedfirst.This
means,ineffect,thatyoucannotinterceptadecorator.
UsingStereotypesinCDIApplications
Astereotype isakindofannotation,appliedtoabean,thatincorporatesotherannotations.
Stereotypescanbeparticularlyusefulinlargeapplicationswhereyouhaveanumberofbeansthatperformsimilarfunctions.Astereotypeisakindofannotationthatspecifiesthefollowing:
■Adefaultscope
■Zeroormoreinterceptorbindings
■Optionally,a @Namedannotation,guaranteeingdefaultELnaming
■Optionally,an @Alternative annotation,specifyingthatallbeanswiththisstereotypeare
alternatives
Abeanannotatedwithaparticularstereotypewillalwaysusethespecifiedannotations,soyou
donothavetoapplythesameannotationstomanybeans.
Forexample,youmightcreateastereotypenamed Action,usingthe
javax.enterprise.inject.Stereotype annotation:
@RequestScoped
@Secure@Transactional@Named@Stereotype@Target(TYPE)@Retention(RUNTIME)public @interface Action {}UsingStereotypesinCDIApplications
TheJavaEE6Tutorial • January2013 550
Allbeansannotated @Actionwillhaverequestscope,usedefaultELnaming,andhavethe
interceptorbindings @Transactional and@Secure.
Youcouldalsocreateastereotypenamed Mock:
@Alternative
@Stereotype@Target(TYPE)@Retention(RUNTIME)public @interface Mock {}
Allbeanswiththisannotationarealternatives.
Itispossibletoapplymultiplestereotypestothesamebean,soyoucanannotateabeanas
follows:
@Action
@Mockpublic class MockLoginAction extends LoginAction { ... }
Itisalsopossibletooverridethescopespecifiedbyastereotype,simplybyspecifyingadifferent
scopeforthebean.Thefollowingdeclarationgivesthe MockLoginAction beansessionscope
insteadofrequestscope:
@SessionScoped
@Action@Mockpublic class MockLoginAction extends LoginAction { ... }
CDImakesavailableabuilt-instereotypecalled Model,whichisintendedforusewithbeans
thatdefinethemodellayerofamodel-view-controllerapplicationarchitecture.Thisstereotypespecifiesthatabeanisboth @Namedand@RequestScoped :
@Named
@RequestScoped@Stereotype@Target({TYPE, METHOD, FIELD})@Retention(RUNTIME)public @interface Model {}UsingStereotypesinCDIApplications
Chapter30 • ContextsandDependencyInjectionfortheJavaEEPlatform:AdvancedTopics 551
552
RunningtheAdvancedContextsand
DependencyInjectionExamples
ThischapterdescribesindetailhowtobuildandrunseveraladvancedexamplesthatuseCDI.
Theexamplesareinthe tut-install /examples/cdi/ directory.
Tobuildandruntheexamples,youwilldothefollowing:
1. UseNetBeansIDEortheAnttooltocompile,package,anddeploytheexample.
2. Runtheexampleinawebbrowser.
Eachexamplehasa build.xml filethatreferstofilesinthe tut-install /examples/bp-project/
directory.
SeeChapter2,“UsingtheTutorialExamples,” forbasicinformationoninstalling,building,and
runningtheexamples.
Thefollowingtopicsareaddressedhere:
■“The encoderExample:UsingAlternatives”onpage553
■“The producermethods Example:UsingaProducerMethodToChooseaBean
Implementation”onpage558
■“The producerfields Example:UsingProducerFieldstoGenerateResources”onpage561
■“The billpayment Example:UsingEventsandInterceptors”onpage568
■“The decorators Example:DecoratingaBean”onpage574
TheencoderExample:UsingAlternatives
Theencoderexampleshowshowtousealternativestochoosebetweentwobeansat
deploymenttime,asdescribedin “UsingAlternativesinCDIApplications”onpage539 .The
exampleincludesaninterfaceandtwoimplementationsofit,amanagedbean,aFaceletspage,andconfigurationfiles.31CHAPTER 31
553
TheCoderInterfaceandImplementations
TheCoderinterfacecontainsjustonemethod, codeString ,thattakestwoarguments:astring,
andanintegervaluethatspecifieshowthelettersinthestringshouldbetransposed.
public interface Coder {
public String codeString(String s, int tval);
}
Theinterfacehastwoimplementationclasses, CoderImpl andTestCoderImpl .The
implementationof codeString inCoderImpl shiftsthestringargumentforwardinthealphabet
bythenumberoflettersspecifiedinthesecondargument;anycharactersthatarenotlettersareleftunchanged.(ThissimpleshiftcodeisknownasaCaesarcipher,forJuliusCaesar,whoreportedlyusedittocommunicatewithhisgenerals.)Theimplementationin TestCoderImpl
merelydisplaysthevaluesofthearguments.The TestCoderImpl implementationisannotated
@Alternative :
import javax.enterprise.inject.Alternative;
@Alternative
public class TestCoderImpl implements Coder {
public String codeString(String s, int tval) {
return ( "input string is "+s+ ", shift value is "+ tval);
}
}
Thebeans.xml fileforthe encoderexamplecontainsan alternatives elementforthe
TestCoderImpl class,butbydefaulttheelementiscommentedout:
<beans ... >
<!--<alternatives>
<class>encoder.TestCoderImpl</class>
</alternatives>-->
</beans>
Thismeansthatbydefault,the TestCoderImpl class,annotated @Alternative ,willnotbeused.
Instead,the CoderImpl classwillbeused.
TheencoderFaceletsPageandManagedBean
ThesimpleFaceletspageforthe encoderexample, index.xhtml ,askstheusertotypethestring
andintegervaluesandpassesthemtothemanagedbean, CoderBean ,as
coderBean.inputString andcoderBean.transVal :
<html lang= "en"
xmlns= "http://www.w3.org/1999/xhtml "
xmlns:h= "http://java.sun.com/jsf/html ">TheencoderExample:UsingAlternatives
TheJavaEE6Tutorial • January2013 554
<h:head>
<h:outputStylesheet library= "css"name= "default.css "/>
<title>String Encoder</title>
</h:head><h:body>
<h2>String Encoder</h2><p>Type a string and an integer, then click Encode.</p><p>Depending on which alternative is enabled, the coder bean
will either display the argument values or return a string thatshifts the letters in the original string by the value you specify.The value must be between 0 and 26.</p>
<h:form id= "encodeit ">
<p><h:outputLabel value= "Type a string: "for="inputString "/>
<h:inputText id= "inputString "
value= "#{coderBean.inputString} "/>
<h:outputLabel value= "Type the number of letters to shift by: "
for="transVal "/>
<h:inputText id= "transVal "value= "#{coderBean.transVal} "/></p>
<p><h:commandButton value= "Encode "
action= "#{coderBean.encodeString()} "/></p>
<p><h:outputLabel value= "Result: "for="outputString "/>
<h:outputText id= "outputString "value= "#{coderBean.codedString} "
style= "color:blue "/> </p>
<p><h:commandButton value= "Reset "action= "#{coderBean.reset} "/></p>
</h:form>...
</h:body>
</html>
WhentheuserclickstheEncodebutton,thepageinvokesthemanagedbean’s encodeString
methodanddisplaystheresult, coderBean.codedString ,inblue.ThepagealsohasaReset
buttonthatclearsthefields.
Themanagedbean, CoderBean ,isa @RequestScoped beanthatdeclaresitsinputandoutput
properties.The transVal propertyhasthreeBeanValidationconstraintsthatenforcelimitson
theintegervalue,sothatiftheusertypesaninvalidvalue,adefaulterrormessageappearsontheFaceletspage.Thebeanalsoinjectsaninstanceofthe Coderinterface:
@Named
@RequestScopedpublic class CoderBean {
private String inputString;
private String codedString;@Max(26)@Min(0)@NotNullprivate int transVal;
@Inject
Coder coder;...TheencoderExample:UsingAlternatives
Chapter31 • RunningtheAdvancedContextsandDependencyInjectionExamples 555
Inadditiontosimplegetterandsettermethodsforthethreeproperties,thebeandefinesthe
encodeString actionmethodcalledbytheFaceletspage.Thismethodsetsthe codedString
propertytothevaluereturnedbyacalltothe codeString methodofthe Coder
implementation:
public void encodeString() {
setCodedString(coder.codeString(inputString, transVal));
}
Finally,thebeandefinesthe resetmethodtoemptythefieldsoftheFaceletspage:
public void reset() {
setInputString( "");
setTransVal(0);
}
Runningthe encoderExample
YoucanuseeitherNetBeansIDEorAnttobuild,package,deploy,andrunthe encoder
application.
▼ToBuild,Package,andDeploythe encoderExampleUsingNetBeans
IDE
FromtheFilemenu,chooseOpenProject.
IntheOpenProjectdialog,navigateto:
tut-install /examples/cdi/
Selectthe encoderfolder.
SelecttheOpenasMainProjectcheckbox.ClickOpenProject.IntheProjectstab,right-clickthe encoderprojectandselectDeploy.
▼ToRunthe encoderExampleUsingNetBeansIDE
Inawebbrowser,typethefollowingURL:
http://localhost:8080/encoder
TheStringEncoderpageopens.1
2
3
456
1TheencoderExample:UsingAlternatives
TheJavaEE6Tutorial • January2013 556
Typeastringandthenumberofletterstoshiftby,thenclickEncode.
TheencodedstringappearsinblueontheResultline.Forexample,ifyoutype Javaand4,the
resultis Neze.
Now,editthe beans.xml filetoenablethealternativeimplementationof Coder.
a. IntheProjectstab,underthe encoderproject,expandtheWebPagesnode,thenthe
WEB-INFnode.
b. Double-clickthe beans.xml filetoopenit.
c. Removethecommentcharactersthatsurroundthe alternatives element,sothatitlooks
likethis:
<alternatives>
<class>encoder.TestCoderImpl</class>
</alternatives>
d. Savethefile.
Right-clickthe encoderprojectandselectDeploy.
Inthewebbrowser,retypetheURLtoshowtheStringEncoderpagefortheredeployedproject:
http://localhost:8080/encoder/
Typeastringandthenumberofletterstoshiftby,thenclickEncode.
Thistime,theResultlinedisplaysyourarguments.Forexample,ifyoutype Javaand4,the
resultis:
Result: input string is Java, shift value is 4
▼ToBuild,Package,andDeploythe encoderExampleUsingAnt
Inaterminalwindow,goto:
tut-install /examples/cdi/encoder/
Typethefollowingcommand:
ant
Thiscommandcallsthe defaulttarget,whichbuildsandpackagestheapplicationintoaWAR
file,encoder.war ,locatedinthe distdirectory.
Typethefollowingcommand:
ant deploy2
3
4
5
6
1
2
3TheencoderExample:UsingAlternatives
Chapter31 • RunningtheAdvancedContextsandDependencyInjectionExamples 557
▼ToRunthe encoderExampleUsingAnt
Inawebbrowser,typethefollowingURL:
http://localhost:8080/encoder/
TheStringEncoderpageopens.
Typeastringandthenumberofletterstoshiftby,thenclickEncode.
TheencodedstringappearsinblueontheResultline.Forexample,ifyoutype Javaand4,the
resultis Neze.
Now,editthe beans.xml filetoenablethealternativeimplementationof Coder.
a. Inatexteditor,openthefollowingfile:
tut-install /examples/cdi/encoder/web/WEB-INF/beans.xml
b. Removethecommentcharactersthatsurroundthe alternatives element,sothatitlooks
likethis:
<alternatives>
<class>encoder.TestCoderImpl</class>
</alternatives>
c. Saveandclosethefile.
Typethefollowingcommands:
ant undeploy
antant deploy
Inthewebbrowser,retypetheURLtoshowtheStringEncoderpagefortheredeployedproject:
http://localhost:8080/encoder
Typeastringandthenumberofletterstoshiftby,thenclickEncode.
Thistime,theResultlinedisplaysyourarguments.Forexample,ifyoutype Javaand4,the
resultis:
Result: input string is Java, shift value is 4
Theproducermethods Example:UsingaProducerMethodTo
ChooseaBeanImplementation
Theproducermethods exampleshowshowtouseaproducermethodtochoosebetweentwo
beansatruntime,asdescribedin “UsingProducerMethods,ProducerFields,andDisposer
MethodsinCDIApplications”onpage541 .Itisverysimilartothe encoderexampledescribed1
2
3
4
5
6Theproducermethods Example:UsingaProducerMethodToChooseaBeanImplementation
TheJavaEE6Tutorial • January2013 558
in“The encoderExample:UsingAlternatives”onpage553 .Theexampleincludesthesame
interfaceandtwoimplementationsofit,amanagedbean,aFaceletspage,andconfigurationfiles.Italsocontainsaqualifiertype.Whenyourunit,youdonotneedtoeditthe beans.xml file
andredeploytheapplicationtochangeitsbehavior.
Componentsofthe producermethods Example
Thecomponentsof producermethods areverymuchlikethosefor encoder,withsome
significantdifferences.
Neitherimplementationofthe Coderbeanisannotated @Alternative ,andthe beans.xml file
doesnotcontainan alternatives element.
TheFaceletspageandthemanagedbean, CoderBean ,haveanadditionalproperty, coderType ,
thatallowstheusertospecifyatruntimewhichimplementationtouse.Inaddition,themanagedbeanhasaproducermethodthatselectstheimplementationusingaqualifiertype,@Chosen.
Thebeandeclarestwoconstantsthatspecifywhetherthecodertypeisthetestimplementation
ortheimplementationthatactuallyshiftsletters:
private final static int TEST = 1;
private final static int SHIFT = 2;private int coderType = SHIFT; // default value
Theproducermethod,annotatedwith @Produces and@Chosenaswellas @RequestScoped (so
thatitlastsonlyforthedurationofasinglerequestandresponse),takesbothimplementationsasarguments,thenreturnsoneortheother,basedonthe coderType suppliedbytheuser.
@Produces
@Chosen@RequestScopedpublic Coder getCoder(@New TestCoderImpl tci,
@New CoderImpl ci) {
switch (coderType) {
case TEST:
return tci;
case SHIFT:
return ci;
default:
return null;
}
}
Finally,themanagedbeaninjectsthechosenimplementation,specifyingthesamequalifieras
thatreturnedbytheproducermethodtoresolveambiguities:
@Inject
@ChosenTheproducermethods Example:UsingaProducerMethodToChooseaBeanImplementation
Chapter31 • RunningtheAdvancedContextsandDependencyInjectionExamples 559
@RequestScoped
Coder coder;
TheFaceletspagecontainsmodifiedinstructionsandapairofradiobuttonswhoseselected
valueisassignedtotheproperty coderBean.coderType :
<h2>String Encoder</h2>
<p>Select Test or Shift, type a string and an integer, then click
Encode.</p>
<p>If you select Test, the TestCoderImpl bean will display the
argument values.</p>
<p>If you select Shift, the CoderImpl bean will return a string that
shifts the letters in the original string by the value you specify.The value must be between 0 and 26.</p>
<h:form id= "encodeit ">
<h:selectOneRadio id= "coderType "
required= "true"
value= "#{coderBean.coderType} ">
<f:selectItem
itemValue= "1"
itemLabel= "Test"/>
<f:selectItem
itemValue= "2"
itemLabel= "Shift Letters "/>
</h:selectOneRadio>...
Runningthe producermethods Example
YoucanuseeitherNetBeansIDEorAnttobuild,package,deploy,andrunthe
producermethods application.
▼ToBuild,Package,andDeploythe producermethods ExampleUsing
NetBeansIDE
FromtheFilemenu,chooseOpenProject.
IntheOpenProjectdialog,navigateto:
tut-install /examples/cdi/
Selectthe producermethods folder.
SelecttheOpenasMainProjectcheckbox.ClickOpenProject.IntheProjectstab,right-clickthe producermethods projectandselectDeploy.1
2
3
456Theproducermethods Example:UsingaProducerMethodToChooseaBeanImplementation
TheJavaEE6Tutorial • January2013 560
▼ToBuild,Package,andDeploythe producermethods ExampleUsingAnt
Inaterminalwindow,goto:
tut-install /examples/cdi/producermethods/
Typethefollowingcommand:
ant
Thiscommandcallsthe defaulttarget,whichbuildsandpackagestheapplicationintoaWAR
file,producermethods.war ,locatedinthe distdirectory.
Typethefollowingcommand:
ant deploy
▼ToRunthe producermethods Example
Inawebbrowser,typethefollowingURL:
http://localhost:8080/producermethods
TheStringEncoderpageopens.
SelecteithertheTestorShiftLettersradiobutton,typeastringandthenumberoflettersto
shiftby,thenclickEncode.
Dependingonyourselection,theResultlinedisplayseithertheencodedstringortheinput
valuesyouspecified.
Theproducerfields Example:UsingProducerFieldsto
GenerateResources
Theproducerfields example,whichallowsyoutocreateato-dolist,showshowtousea
producerfieldtogenerateobjectsthatcanthenbemanagedbythecontainer.Thisexamplegeneratesan EntityManager object,butresourcessuchasJDBCconnectionsanddatasources
canalsobegeneratedthisway.
Theproducerfields exampleisthesimplestpossibleentityexample.Italsocontainsaqualifier
andaclassthatgeneratestheentitymanager.Italsocontainsasingleentity,astatefulsession
bean,aFaceletspage,andamanagedbean.
TheProducerFieldforthe producerfields Example
Themostimportantcomponentofthe producerfields exampleisthesmallest,the
db.UserDatabaseEntityManager class,whichisolatesthegenerationofthe EntityManager1
2
3
1
2Theproducerfields Example:UsingProducerFieldstoGenerateResources
Chapter31 • RunningtheAdvancedContextsandDependencyInjectionExamples 561
objectsoitcaneasilybeusedbyothercomponentsintheapplication.Theclassusesaproducer
fieldtoinjectan EntityManager annotatedwiththe @UserDatabase qualifier,alsodefinedin
thedbpackage:
@Singleton
public class UserDatabaseEntityManager {
@Produces
@PersistenceContext@UserDatabaseprivate EntityManager em;...
}
Theclassdoesnotexplicitlyproduceapersistenceunitfield,buttheapplicationhasa
persistence.xml filethatspecifiesapersistenceunit.Theclassisannotated
javax.inject.Singleton tospecifythattheinjectorshouldinstantiateitonlyonce.
Thedb.UserDatabaseEntityManager classalsocontainscommented-outcodethatuses
createandclosemethodstogenerateandremovetheproducerfield:
/* @PersistenceContext
private EntityManager em;
@Produces
@UserDatabasepublic EntityManager create() {
return em;
}* /
public void close(@Disposes @UserDatabase EntityManager em) {
em.close();
}
Youcanremovethecommentindicatorsfromthiscodeandplacethemaroundthefield
declarationtotesthowthemethodswork.Thebehavioroftheapplicationisthesamewitheithermechanism.
Theadvantageofproducingthe EntityManager inaseparateclassratherthansimplyinjecting
itintoanenterprisebeanisthattheobjectcaneasilybereusedinatypesafeway.Also,amorecomplexapplicationcancreatemultipleentitymanagersusingmultiplepersistenceunits,andthismechanismisolatesthiscodeforeasymaintenance,asinthefollowingexample:
@Singleton
public class JPAResourceProducer {
@Produces@PersistenceUnit(unitName= "pu3")
@TestDatabaseEntityManagerFactory customerDatabasePersistenceUnit;
@Produces
@PersistenceContext(unitName= "pu3")
@TestDatabaseTheproducerfields Example:UsingProducerFieldstoGenerateResources
TheJavaEE6Tutorial • January2013 562
EntityManager customerDatabasePersistenceContext;
@Produces
@PersistenceUnit(unitName= "pu4")
@DocumentsEntityManagerFactory customerDatabasePersistenceUnit;
@Produces
@PersistenceContext(unitName= "pu4")
@DocumentsEntityManager docDatabaseEntityManager; "
}
TheEntityManagerFactory declarationsalsoallowapplicationstousean
application-managedentitymanager.
Theproducerfields EntityandSessionBean
Theproducerfields examplecontainsasimpleentityclass, entity.ToDo ,andastateful
sessionbean, ejb.RequestBean ,thatusesit.
Theentityclasscontainsthreefields:anautogeneratedidfield,astringspecifyingthetask,anda
timestamp.Thetimestampfield, timeCreated ,isannotatedwith @Temporal ,whichisrequired
forpersistent Datefields.
@Entity
public class ToDo implements Serializable {
...
@Id@GeneratedValue(strategy = GenerationType.AUTO)
private Long id;protected String taskText;@Temporal(TIMESTAMP)protected Date timeCreated;
public ToDo() {
}
public ToDo(Long id, String taskText, Date timeCreated) {
this.id = id;this.taskText = taskText;this.timeCreated = timeCreated;
}...
Theremainderofthe ToDoclasscontainstheusualgetters,setters,andotherentitymethods.
TheRequestBean classinjectsthe EntityManager generatedbytheproducermethod,
annotatedwiththe @UserDatabase qualifier:
@ConversationScoped
@Statefulpublic class RequestBean {Theproducerfields Example:UsingProducerFieldstoGenerateResources
Chapter31 • RunningtheAdvancedContextsandDependencyInjectionExamples 563
@Inject
@UserDatabaseEntityManager em;
Itthendefinestwomethods,onethatcreatesandpersistsasingle ToDolistitem,andanother
thatretrievesallthe ToDoitemscreatedsofarbycreatingaquery:
public ToDo createToDo(String inputString) {
ToDo toDo;Date currentTime = Calendar.getInstance().getTime();
try {
toDo = new ToDo();toDo.setTaskText(inputString);toDo.setTimeCreated(currentTime);em.persist(toDo);return toDo;
} catch (Exception e) {
throw new EJBException(e.getMessage());
}
}
public List<ToDo> getToDos() {
try {
List<ToDo> toDos =
(List<ToDo>) em.createQuery("SELECT t FROM ToDo t ORDER BY t.timeCreated ")
.getResultList();
return toDos;
} catch (Exception e) {
throw new EJBException(e.getMessage());
}
}
}
Theproducerfields FaceletsPagesandManaged
Bean
Theproducerfields examplehastwoFaceletspages, index.xhtml andtodolist.xhtml .The
simpleformonthe index.xhtml pageaskstheuseronlyforthetask.Whentheuserclicksthe
Submitbutton,the listBean.createTask methodiscalled.WhentheuserclickstheShow
Itemsbutton,theactionspecifiesthatthe todolist.xhtml fileshouldbedisplayed:
<h:body>
<h2>To Do List</h2><p>Type a task to be completed.</p><h:form id= "todolist ">
<p><h:outputLabel value= "Type a string: "for="inputString "/>
<h:inputText id= "inputString "
value= "#{listBean.inputString} "/></p>
<p><h:commandButton value= "Submit "
action= "#{listBean.createTask()} "/></p>Theproducerfields Example:UsingProducerFieldstoGenerateResources
TheJavaEE6Tutorial • January2013 564
<p><h:commandButton value= "Show Items "
action= "todolist "/></p>
</h:form>...
</h:body>
Themanagedbean, web.ListBean ,injectsthe ejb.RequestBean sessionbean.Itdeclaresthe
entity.ToDo entityandalistoftheentity,alongwiththeinputstringthatitpassestothe
sessionbean.The inputString isannotatedwiththe @NotNull BeanValidationconstraint,so
anattempttosubmitanemptystringresultsinanerror.
@Named
@ConversationScopedpublic class ListBean implements Serializable {
...
@EJBprivate RequestBean request;@NotNullprivate String inputString;private ToDo toDo;private List<ToDo> toDos;
ThecreateTask methodcalledbytheSubmitbuttoncallsthe createToDo methodof
RequestBean :
public void createTask() {
this.toDo = request.createToDo(inputString);
}
ThegetToDos method,whichiscalledbythe todolist.xhtml page,callsthe getToDos method
ofRequestBean :
public List<ToDo> getToDos() {
return request.getToDos();
}
ToforcetheFaceletspagetorecognizeanemptystringasanullvalueandreturnanerror,the
web.xmlfilesetsthecontextparameter
javax.faces.INTERPRET_EMPTY_STRING_SUBMITTED_VALUES_AS_NULL totrue:
<context-param>
<param-name>
javax.faces.INTERPRET_EMPTY_STRING_SUBMITTED_VALUES_AS_NULL
</param-name><param-value>true</param-value>
</context-param>
Thetodolist.xhtml pageisalittlemorecomplicatedthanthe index.html page.Itcontainsa
dataTable elementthatdisplaysthecontentsofthe ToDolist.Thebodyofthepagelookslike
this:Theproducerfields Example:UsingProducerFieldstoGenerateResources
Chapter31 • RunningtheAdvancedContextsandDependencyInjectionExamples 565
<body>
<h2>To Do List</h2><h:form id= "showlist ">
<h:dataTable var= "toDo"
value= "#{listBean.toDos} "
rules= "all"
border= "1"
cellpadding= "5">
<h:column>
<f:facet name= "header ">
<h:outputText value= "Time Stamp "/>
</f:facet><h:outputText value= "#{toDo.timeCreated} "/>
</h:column><h:column>
<f:facet name= "header ">
<h:outputText value= "Task"/>
</f:facet><h:outputText value= "#{toDo.taskText} "/>
</h:column>
</h:dataTable><p><h:commandButton id= "back"value= "Back"action= "index "/></p>
</h:form>
</body>
Thevalueofthe dataTable islistBean.toDos ,thelistreturnedbythemanagedbean’s
getToDos method,whichinturncallsthesessionbean’s getToDos method.Eachrowofthe
tabledisplaysthe timeCreated andtaskText fieldsoftheindividualtask.Finally,aBackbutton
returnstheusertothe index.xhtml page.
Runningthe producerfields Example
YoucanuseeitherNetBeansIDEorAnttobuild,package,deploy,andrunthe producerfields
application.
▼ToBuild,Package,andDeploythe producerfields ExampleUsing
NetBeansIDE
Ifthedatabaseserverisnotalreadyrunning,startitbyfollowingtheinstructionsin “Starting
andStoppingtheJavaDBServer”onpage75 .
FromtheFilemenu,chooseOpenProject.IntheOpenProjectdialog,navigateto:
tut-install /examples/cdi/
Selectthe producerfields folder.
SelecttheOpenasMainProjectcheckbox.1
2
3
4
5Theproducerfields Example:UsingProducerFieldstoGenerateResources
TheJavaEE6Tutorial • January2013 566
ClickOpenProject.
IntheProjectstab,right-clickthe producerfields projectandselectDeploy.
▼ToBuild,Package,andDeploythe producerfields ExampleUsingAnt
Ifthedatabaseserverisnotalreadyrunning,startitbyfollowingtheinstructionsin “Starting
andStoppingtheJavaDBServer”onpage75 .
Inaterminalwindow,goto:
tut-install /examples/cdi/producerfields/
Typethefollowingcommand:
ant
Thiscommandcallsthe defaulttarget,whichbuildsandpackagestheapplicationintoaWAR
file,producerfields.war ,locatedinthe distdirectory.
Typethefollowingcommand:
ant deploy
▼ToRunthe producerfields Example
Inawebbrowser,typethefollowingURL:
http://localhost:8080/producerfields
TheCreateToDoListpageopens.
TypeastringinthetextfieldandclickSubmit.
YoucantypeadditionalstringsandclickSubmittocreateatasklistwithmultipleitems.
ClicktheShowItemsbutton.
TheToDoListpageopens,showingthetimestampandtextforeachitemyoucreated.
ClicktheBackbuttontoreturntotheCreateToDoListpage.
Onthispage,youcanentermoreitemsinthelist.6
7
1
23
4
1
2
34Theproducerfields Example:UsingProducerFieldstoGenerateResources
Chapter31 • RunningtheAdvancedContextsandDependencyInjectionExamples 567
Thebillpayment Example:UsingEventsandInterceptors
Thebillpayment exampleshowshowtousebotheventsandinterceptors.
Theexamplesimulatespayinganamountusingadebitcardorcreditcard.Whentheuser
choosesapaymentmethod,themanagedbeancreatesanappropriateevent,suppliesitspayload,andfiresit.Asimpleeventlistenerhandlestheeventusingobservermethods.
Theexamplealsodefinesaninterceptorthatissetonaclassandontwomethodsofanother
class.
ThePaymentEvent EventClass
Theeventclass, event.PaymentEvent ,isasimplebeanclassthatcontainsano-argument
constructor.Italsohasa toString methodandgetterandsettermethodsforthepayload
components:a Stringforthepaymenttype,a BigDecimal forthepaymentamount,anda Date
forthetimestamp.
public class PaymentEvent implements Serializable {
...
public String paymentType;public BigDecimal value;public Date datetime;
public PaymentEvent() {
}@Overridepublic String toString() {
return this.paymentType
+"=$"+ this.value.toString()
+"at"+ this.datetime.toString();
}...
Theeventclassisasimplebeanthatisinstantiatedbythemanagedbeanusing newandthen
populated.Forthisreason,theCDIcontainercannotinterceptthecreationofthebean,andhenceitcannotallowinterceptionofitsgetterandsettermethods.
ThePaymentHandler EventListener
Theeventlistener, listener.PaymentHandler ,containstwoobservermethods,oneforeachof
thetwoeventtypes:
@Logged
@SessionScopedpublic class PaymentHandler implements Serializable {Thebillpayment Example:UsingEventsandInterceptors
TheJavaEE6Tutorial • January2013 568
...
public void creditPayment(@Observes @Credit PaymentEvent event) {
logger.log(Level.INFO, "PaymentHandler - Credit Handler: {0} ",
event.toString());
// call a specific Credit handler class...
}
public void debitPayment(@Observes @Debit PaymentEvent event) {
logger.log(Level.INFO, "PaymentHandler - Debit Handler: {0} ",
event.toString());
// call a specific Debit handler class...
}
}
Eachobservermethodtakesasanargumenttheevent,annotatedwith @Observes andwiththe
qualifierforthetypeofpayment.Inarealapplication,theobservermethodswouldpasstheeventinformationontoanothercomponentthatwouldperformbusinesslogiconthepayment.
Thequalifiersaredefinedinthe paymentpackage,describedin
“The billpayment Facelets
PagesandManagedBean”onpage569 .
Like PaymentEvent ,the PaymentHandler beanisannotated @Logged,sothatallitsmethodscan
beintercepted.
Thebillpayment FaceletsPagesandManagedBean
Thebillpayment examplecontainstwoFaceletspages, index.xhtml andtheverysimple
response.xhtml .Thebodyof index.xhtml lookslikethis:
<h:body>
<h3>Bill Payment Options</h3><p>Type an amount, select Debit Card or Credit Card,
then click Pay.</p>
<h:form>
<p><h:outputLabel value= "Amount: $ "for="amt"/>
<h:inputText id= "amt"value= "#{paymentBean.value} "
required= "true"
requiredMessage= "An amount is required. "
maxlength= "15"/>
</p><h:outputLabel value= "Options: "for="opt"/>
<h:selectOneRadio id= "opt"value= "#{paymentBean.paymentOption} ">
<f:selectItem id= "debit "itemLabel= "Debit Card "
itemValue= "1"/>
<f:selectItem id= "credit "itemLabel= "Credit Card "
itemValue= "2"/>
</h:selectOneRadio><p><h:commandButton id= "submit "value= "Pay"
action= "#{paymentBean.pay} "/></p>Thebillpayment Example:UsingEventsandInterceptors
Chapter31 • RunningtheAdvancedContextsandDependencyInjectionExamples 569
<p><h:commandButton value= "Reset "
action= "#{paymentBean.reset} "/></p>
</h:form>...
</h:body>
Theinputtextfieldtakesapaymentamount,passedto paymentBean.value .Tworadiobuttons
asktheusertoselectaDebitCardorCreditCardpayment,passingtheintegervaluetopaymentBean.paymentOption .Finally,thePaycommandbutton’sactionissettothemethod
paymentBean.pay ,whiletheResetbutton’sactionissettothe paymentBean.reset method.
Thepayment.PaymentBean managedbeanusesqualifierstodifferentiatebetweenthetwokinds
ofpaymentevent:
@Named
@SessionScopedpublic class PaymentBean implements Serializable {
...
@Inject@CreditEvent<PaymentEvent> creditEvent;
@Inject
@DebitEvent<PaymentEvent> debitEvent;
Thequalifiers, @Creditand@Debit,aredefinedinthe paymentpackagealongwith
PaymentBean .
Next,the PaymentBean definesthepropertiesitobtainsfromtheFaceletspageandwillpasson
totheevent:
public static final int DEBIT = 1;
public static final int CREDIT = 2;private int paymentOption = DEBIT;
@Digits(integer = 10, fraction = 2, message = "Invalid value ")
private BigDecimal value;
private Date datetime;
ThepaymentOption valueisanintegerpassedinfromtheradiobuttoncomponent;thedefault
valueis DEBIT.The valueisaBigDecimal withaBeanValidationconstraintthatenforcesa
currencyvaluewithamaximumnumberofdigits.Thetimestampfortheevent, datetime ,isa
Dateobjectinitializedwhenthe paymethodiscalled.
Thepaymethodofthebeanfirstsetsthetimestampforthispaymentevent.Itthencreatesand
populatestheeventpayload,usingtheconstructorforthe PaymentEvent andcallingtheevent’s
settermethodsusingthebeanpropertiesasarguments.Itthenfirestheevent.
@Logged
public String pay() {
this.setDatetime(Calendar.getInstance().getTime());Thebillpayment Example:UsingEventsandInterceptors
TheJavaEE6Tutorial • January2013 570
switch (paymentOption) {
case DEBIT:
PaymentEvent debitPayload = new PaymentEvent();debitPayload.setPaymentType( "Debit ");
debitPayload.setValue(value);debitPayload.setDatetime(datetime);debitEvent.fire(debitPayload);break;
case CREDIT:
PaymentEvent creditPayload = new PaymentEvent();creditPayload.setPaymentType( "Credit ");
creditPayload.setValue(value);creditPayload.setDatetime(datetime);creditEvent.fire(creditPayload);break;
default:
logger.severe( "Invalid payment option! ");
}return "/response.xhtml ";
}
Thepaymethodreturnsthepagetowhichtheactionisredirected, response.xhtml .
ThePaymentBean classalsocontainsa resetmethodthatemptiesthevaluefieldonthe
index.xhtml pageandsetsthepaymentoptiontothedefault:
@Logged
public void reset() {
setPaymentOption(DEBIT);setValue(BigDecimal.ZERO);
}
Inthisbean,onlythe payandresetmethodsareintercepted.
Theresponse.xhtml pagedisplaystheamountpaid.Itusesa rendered expressiontodisplay
thepaymentmethod:
<h:body>
<h:form>
<h2>Bill Payment: Result</h2><h3>Amount Paid with
<h:outputText id= "debit "value= "Debit Card: "
rendered= "#{paymentBean.paymentOption eq 1} "/>
<h:outputText id= "credit "value= "Credit Card: "
rendered= "#{paymentBean.paymentOption eq 2} "/>
<h:outputText id= "result "value= "#{paymentBean.value} ">
<f:convertNumber type= "currency "/>
</h:outputText>
</h3><p><h:commandButton id= "back"value= "Back"action= "index "/></p>
</h:form>
</h:body>Thebillpayment Example:UsingEventsandInterceptors
Chapter31 • RunningtheAdvancedContextsandDependencyInjectionExamples 571
TheLoggedInterceptor InterceptorClass
Theinterceptorclass, LoggedInterceptor ,anditsinterceptorbinding, Logged,areboth
definedinthe interceptor package.The Loggedinterceptorbindingisdefinedasfollows:
@Inherited
−@InterceptorBinding
@Retention(RUNTIME)@Target({METHOD, TYPE})public @interface Logged {}
TheLoggedInterceptor classlookslikethis:
@Logged
@Interceptorpublic class LoggedInterceptor implements Serializable {
...public LoggedInterceptor() {
}
@AroundInvoke
public Object logMethodEntry(InvocationContext invocationContext)
throws Exception {
System.out.println( "Entering method: "
+ invocationContext.getMethod().getName() + "in class "
+ invocationContext.getMethod().getDeclaringClass().getName());
return invocationContext.proceed();
}
}
Theclassisannotatedwithboththe @Loggedandthe @Interceptor annotations.The
@AroundInvoke method, logMethodEntry ,takestherequired InvocationContext argument,
andcallstherequired proceedmethod.Whenamethodisintercepted, logMethodEntry
displaysthenameofthemethodbeinginvokedaswellasitsclass.
Toenabletheinterceptor,the beans.xml filedefinesitasfollows:
<interceptors>
<class>billpayment.interceptor.LoggedInterceptor</class>
</interceptors>
Inthisapplication,the PaymentEvent andPaymentHandler classesareannotated @Logged,so
alltheirmethodsareintercepted.In PaymentBean ,onlythe payandresetmethodsare
annotated @Logged,soonlythosemethodsareintercepted.Thebillpayment Example:UsingEventsandInterceptors
TheJavaEE6Tutorial • January2013 572
Runningthe billpayment Example
YoucanuseeitherNetBeansIDEorAnttobuild,package,deploy,andrunthe billpayment
application.
▼ToBuild,Package,andDeploythe billpayment ExampleUsing
NetBeansIDE
FromtheFilemenu,chooseOpenProject.
IntheOpenProjectdialog,navigateto:
tut-install /examples/cdi/
Selectthe billpayment folder.
SelecttheOpenasMainProjectcheckbox.ClickOpenProject.IntheProjectstab,right-clickthe billpayment projectandselectDeploy.
▼ToBuild,Package,andDeploythe billpayment ExampleUsingAnt
Inaterminalwindow,goto:
tut-install /examples/cdi/billpayment/
Typethefollowingcommand:
ant
Thiscommandcallsthe defaulttarget,whichbuildsandpackagestheapplicationintoaWAR
file,billpayment.war ,locatedinthe distdirectory.
Typethefollowingcommand:
ant deploy
▼ToRunthe billpayment Example
Inawebbrowser,typethefollowingURL:
http://localhost:8080/billpayment
TheBillPaymentOptionspageopens.1
2
3
456
1
2
3
1Thebillpayment Example:UsingEventsandInterceptors
Chapter31 • RunningtheAdvancedContextsandDependencyInjectionExamples 573
TypeavalueintheAmountfield.
Theamountcancontainupto10digitsandincludeupto2decimalplaces.Forexample:
9876.54
SelectDebitCardorCreditCardandclickPay.TheBillPayment:Resultpageopens,displayingtheamountpaidandthemethodofpayment:
Amount Paid with Credit Card: $9,876.34
(Optional)ClickBacktoreturntotheBillPaymentOptionspage.YoucanalsoclickResettoreturntotheinitialpagevalues.
Examinetheserverlogoutput.
InNetBeansIDE,theoutputisvisibleintheGlassFishServer3+outputwindow.Otherwise,
viewdomain-dir /logs/server.log .
Theoutputfromeachinterceptorappearsinthelog,followedbytheadditionalloggeroutput
definedbytheconstructorandmethods.
Thedecorators Example:DecoratingaBean
Thedecorators example,whichisyetanothervariationonthe encoderexample,showshowto
useadecoratortoimplementadditionalbusinesslogicforabean.Insteadofhavingtheuserchoosebetweentwoalternativeimplementationsofaninterfaceatdeploymenttimeorruntime,adecoratoraddssomeadditionallogictoasingleimplementationoftheinterface.
Theexampleincludesaninterface,animplementationofit,adecorator,aninterceptor,a
managedbean,aFaceletspage,andconfigurationfiles.
Componentsofthe decorators Example
Thedecorators exampleisverysimilartothe encoderexampledescribedin “The encoder
Example:UsingAlternatives”onpage553 .Insteadofprovidingtwoimplementationsofthe
Coderinterface,however,thisexampleprovidesonlythe CoderImpl class.Thedecoratorclass,
CoderDecorator ,ratherthansimplyreturnthecodedstring,displaystheinputandoutput
strings’valuesandlength.
TheCoderDecorator class,like CoderImpl ,implementsthebusinessmethodofthe Coder
interface, codeString :
@Decorator
public abstract class CoderDecorator implements Coder {
@Inject2
34
5Thedecorators Example:DecoratingaBean
TheJavaEE6Tutorial • January2013 574
@Delegate
@AnyCoder coder;
@Override
public String codeString(String s, int tval) {
int len = s.length();
return "\""+s+ "\"becomes "+"\""+ coder.codeString(s, tval)
+"\","+ len + "characters in length ";
}
}
Thedecorator’s codeString methodcallsthedelegateobject’s codeString methodtoperform
theactualencoding.
Thedecorators exampleincludesthe Loggedinterceptorbindingand LoggedInterceptor
classfromthe billpayment example.Forthisexample,theinterceptorissetonthe
CoderBean.encodeString methodandthe CoderImpl.codeString method.Theinterceptor
codeisunchanged;interceptorsareusuallyreusablefordifferentapplications.
Exceptfortheinterceptorannotations,the CoderBean andCoderImpl classesareidenticalto
theversionsinthe encoderexample.
Thebeans.xml filespecifiesboththedecoratorandtheinterceptor:
<decorators>
<class>decorators.CoderDecorator</class>
</decorators><interceptors>
<class>decorators.LoggedInterceptor</class>
</interceptors>
Runningthe decorators Example
YoucanuseeitherNetBeansIDEorAnttobuild,package,deploy,andrunthe decorators
application.
▼ToBuild,Package,andDeploythe decorators ExampleUsing
NetBeansIDE
FromtheFilemenu,chooseOpenProject.
IntheOpenProjectdialog,navigateto:
tut-install /examples/cdi/
Selectthe decorators folder.
SelecttheOpenasMainProjectcheckbox.1
2
3
4Thedecorators Example:DecoratingaBean
Chapter31 • RunningtheAdvancedContextsandDependencyInjectionExamples 575
ClickOpenProject.
IntheProjectstab,right-clickthe decorators projectandselectDeploy.
▼ToBuild,Package,andDeploythe decorators ExampleUsingAnt
Inaterminalwindow,goto:
tut-install /examples/cdi/decorators/
Typethefollowingcommand:
ant
Thiscommandcallsthe defaulttarget,whichbuildsandpackagestheapplicationintoaWAR
file,decorators.war ,locatedinthe distdirectory.
Typethefollowingcommand:
ant deploy
▼ToRunthe decorators Example
Inawebbrowser,typethefollowingURL:
http://localhost:8080/decorators
TheDecoratedStringEncoderpageopens.
Typeastringandthenumberofletterstoshiftby,thenclickEncode.
TheoutputfromthedecoratormethodappearsinblueontheResultline.Forexample,ifyou
typed Javaand4,youwouldseethefollowing:
"Java"becomes "Neze", 4 characters in length
Examinetheserverlogoutput.
InNetBeansIDE,theoutputisvisibleintheGlassFishServer3+outputwindow.Otherwise,
viewdomain-dir /logs/server.log .
Theoutputfromtheinterceptorsappears:
INFO: Entering method: encodeString in class decorators.CoderBean
INFO: Entering method: codeString in class decorators.CoderImpl5
6
1
2
3
1
2
3Thedecorators Example:DecoratingaBean
TheJavaEE6Tutorial • January2013 576
Persistence
PartVIexplorestheJavaPersistenceAPI.Thispartcontainsthefollowingchapters:
■Chapter32,“IntroductiontotheJavaPersistenceAPI”
■Chapter33,“RunningthePersistenceExamples”
■Chapter34,“TheJavaPersistenceQueryLanguage”
■Chapter35,“UsingtheCriteriaAPItoCreateQueries”
■Chapter36,“CreatingandUsingString-BasedCriteriaQueries”
■Chapter37,“ControllingConcurrentAccesstoEntityDatawithLocking”
■Chapter38,“UsingaSecond-LevelCachewithJavaPersistenceAPIApplications”PART VI
577
578
IntroductiontotheJavaPersistenceAPI
TheJavaPersistenceAPIprovidesJavadeveloperswithanobject/relationalmappingfacilityfor
managingrelationaldatainJavaapplications.JavaPersistenceconsistsoffourareas:
■TheJavaPersistenceAPI
■Thequerylanguage
■TheJavaPersistenceCriteriaAPI
■Object/relationalmappingmetadata
Thefollowingtopicsareaddressedhere:
■“Entities”onpage579
■“EntityInheritance”onpage591
■“ManagingEntities”onpage595
■“QueryingEntities”onpage600
■“FurtherInformationaboutPersistence”onpage601
Entities
Anentityisalightweightpersistencedomainobject.Typically,anentityrepresentsatableina
relationaldatabase,andeachentityinstancecorrespondstoarowinthattable.Theprimaryprogrammingartifactofanentityistheentityclass,althoughentitiescanusehelperclasses.
Thepersistentstateofanentityisrepresentedthrougheitherpersistentfieldsorpersistent
properties.Thesefieldsorpropertiesuseobject/relationalmappingannotationstomaptheentitiesandentityrelationshipstotherelationaldataintheunderlyingdatastore.32CHAPTER 32
579
RequirementsforEntityClasses
Anentityclassmustfollowtheserequirements.
■Theclassmustbeannotatedwiththe javax.persistence.Entity annotation.
■Theclassmusthaveapublicorprotected,no-argumentconstructor.Theclassmayhave
otherconstructors.
■Theclassmustnotbedeclared final.Nomethodsorpersistentinstancevariablesmustbe
declared final.
■Ifanentityinstanceispassedbyvalueasadetachedobject,suchasthroughasessionbean’s
remotebusinessinterface,theclassmustimplementthe Serializable interface.
■Entitiesmayextendbothentityandnon-entityclasses,andnon-entityclassesmayextend
entityclasses.
■Persistentinstancevariablesmustbedeclaredprivate,protected,orpackage-privateandcanbeaccesseddirectlyonlybytheentityclass’smethods.Clientsmustaccesstheentity’sstatethroughaccessororbusinessmethods.
PersistentFieldsandPropertiesinEntityClasses
Thepersistentstateofanentitycanbeaccessedthrougheithertheentity’sinstancevariablesorproperties.ThefieldsorpropertiesmustbeofthefollowingJavalanguagetypes:
■Javaprimitivetypes
■java.lang.String
■Otherserializabletypes,including:
■WrappersofJavaprimitivetypes
■java.math.BigInteger
■java.math.BigDecimal
■java.util.Date
■java.util.Calendar
■java.sql.Date
■java.sql.Time
■java.sql.TimeStamp
■User-definedserializabletypes
■byte[]
■Byte[]
■char[]
■Character[]
■EnumeratedtypesEntities
TheJavaEE6Tutorial • January2013 580
■Otherentitiesand/orcollectionsofentities
■Embeddableclasses
Entitiesmayusepersistentfields,persistentproperties,oracombinationofboth.Ifthe
mappingannotationsareappliedtotheentity’sinstancevariables,theentityusespersistentfields.Ifthemappingannotationsareappliedtotheentity’sgettermethodsforJavaBeans-styleproperties,theentityusespersistentproperties.
PersistentFields
Iftheentityclassusespersistentfields,thePersistenceruntimeaccessesentity-classinstancevariablesdirectly.Allfieldsnotannotated javax.persistence.Transient ornotmarkedas
Java transient willbepersistedtothedatastore.Theobject/relationalmappingannotations
mustbeappliedtotheinstancevariables.
PersistentProperties
Iftheentityusespersistentproperties,theentitymustfollowthemethodconventionsofJavaBeanscomponents.JavaBeans-stylepropertiesusegetterandsettermethodsthataretypicallynamedaftertheentityclass’sinstancevariablenames.ForeverypersistentpropertypropertyoftypeTypeoftheentity,thereisagettermethod getPropertyandsettermethod
setProperty.IfthepropertyisaBoolean,youmayuse isPropertyinsteadof getProperty.For
example,ifa Customer entityusespersistentpropertiesandhasaprivateinstancevariable
called firstName ,theclassdefinesa getFirstName andsetFirstName methodforretrieving
andsettingthestateofthe firstName instancevariable.
Themethodsignatureforsingle-valuedpersistentpropertiesareasfollows:
Type getProperty()
void setProperty(Type type)
Theobject/relationalmappingannotationsforpersistentpropertiesmustbeappliedtothe
gettermethods.Mappingannotationscannotbeappliedtofieldsorpropertiesannotated@Transient ormarked transient .
UsingCollectionsinEntityFieldsandProperties
Collection-valuedpersistentfieldsandpropertiesmustusethesupportedJavacollection
interfacesregardlessofwhethertheentityusespersistentfieldsorproperties.Thefollowingcollectioninterfacesmaybeused:
■java.util.Collection
■java.util.SetEntities
Chapter32 • IntroductiontotheJavaPersistenceAPI 581
■java.util.List
■java.util.Map
Iftheentityclassusespersistentfields,thetypeintheprecedingmethodsignaturesmustbeone
ofthesecollectiontypes.Genericvariantsofthesecollectiontypesmayalsobeused.Forexample,ifithasapersistentpropertythatcontainsasetofphonenumbers,the Customer
entitywouldhavethefollowingmethods:
Set<PhoneNumber> getPhoneNumbers() { ... }
void setPhoneNumbers(Set<PhoneNumber>) { ... }
Ifafieldorpropertyofanentityconsistsofacollectionofbasictypesorembeddableclasses,use
thejavax.persistence.ElementCollection annotationonthefieldorproperty.
Thetwoattributesof @ElementCollection aretargetClass andfetch.The targetClass
attributespecifiestheclassnameofthebasicorembeddableclassandisoptionalifthefieldorpropertyisdefinedusingJavaprogramminglanguagegenerics.Theoptional fetchattributeis
usedtospecifywhetherthecollectionshouldberetrievedlazilyoreagerly,usingthejavax.persistence.FetchType constantsofeither LAZYorEAGER,respectively.Bydefault,the
collectionwillbefetchedlazily.
Thefollowingentity, Person,hasapersistentfield, nicknames ,whichisacollectionof String
classesthatwillbefetchedeagerly.The targetClass elementisnotrequired,becauseituses
genericstodefinethefield.
@Entity
public class Person {
...@ElementCollection(fetch=EAGER)protected Set<String> nickname = new HashSet();...
}
Collectionsofentityelementsandrelationshipsmayberepresentedby java.util.Map
collections.A Mapconsistsofakeyandavalue.
Whenusing Mapelementsorrelationships,thefollowingrulesapply.
■TheMapkeyorvaluemaybeabasicJavaprogramminglanguagetype,anembeddableclass,
oranentity.
■Whenthe Mapvalueisanembeddableclassorbasictype,usethe @ElementCollection
annotation.
■Whenthe Mapvalueisanentity,usethe @OneToMany or@ManyToMany annotation.
■Usethe Maptypeononlyonesideofabidirectionalrelationship.
Ifthekeytypeofa MapisaJavaprogramminglanguagebasictype,usetheannotation
javax.persistence.MapKeyColumn tosetthecolumnmappingforthekey.Bydefault,the nameEntities
TheJavaEE6Tutorial • January2013 582
attributeof @MapKeyColumn isoftheform RELATIONSHIP-FIELD/PROPERTY-NAME _KEY.
Forexample,ifthereferencingrelationshipfieldnameis image,thedefault nameattributeis
IMAGE_KEY .
Ifthekeytypeofa Mapisanentity,usethe javax.persistence.MapKeyJoinColumn annotation.
Ifthemultiplecolumnsareneededtosetthemapping,usetheannotation
javax.persistence.MapKeyJoinColumns toincludemultiple @MapKeyJoinColumn
annotations.Ifno @MapKeyJoinColumn ispresent,themappingcolumnnameisbydefaultsetto
RELATIONSHIP-FIELD/PROPERTY-NAME _KEY.Forexample,iftherelationshipfieldnameis
employee ,thedefault nameattributeis EMPLOYEE_KEY .
IfJavaprogramminglanguagegenerictypesarenotusedintherelationshipfieldorproperty,
thekeyclassmustbeexplicitlysetusingthe javax.persistence.MapKeyClass annotation.
Ifthe Mapkeyistheprimarykeyorapersistentfieldorpropertyoftheentitythatisthe Map
value,usethe javax.persistence.MapKey annotation.The @MapKeyClass and@MapKey
annotationscannotbeusedonthesamefieldorproperty.
Ifthe MapvalueisaJavaprogramminglanguagebasictypeoranembeddableclass,itwillbe
mappedasacollectiontableintheunderlyingdatabase.Ifgenerictypesarenotused,the@ElementCollection annotation’s targetClass attributemustbesettothetypeofthe Map
value.
Ifthe Mapvalueisanentityandpartofamany-to-manyorone-to-manyunidirectional
relationship,itwillbemappedasajointableintheunderlyingdatabase.Aunidirectionalone-to-manyrelationshipthatusesa Mapmayalsobemappedusingthe @JoinColumn
annotation.
Iftheentityispartofaone-to-many/many-to-onebidirectionalrelationship,itwillbemapped
inthetableoftheentitythatrepresentsthevalueofthe Map.Ifgenerictypesarenotused,the
targetEntity attributeofthe @OneToMany and@ManyToMany annotationsmustbesettothe
typeofthe Mapvalue.
ValidatingPersistentFieldsandProperties
TheJavaAPIforJavaBeansValidation(BeanValidation)providesamechanismforvalidating
applicationdata.BeanValidationisintegratedintotheJavaEEcontainers,allowingthesamevalidationlogictobeusedinanyofthetiersofanenterpriseapplication.
BeanValidationconstraintsmaybeappliedtopersistententityclasses,embeddableclasses,and
mappedsuperclasses.Bydefault,thePersistenceproviderwillautomaticallyperformvalidationonentitieswithpersistentfieldsorpropertiesannotatedwithBeanValidationconstraintsimmediatelyafterthe PrePersist ,PreUpdate ,and PreRemove lifecycleevents.
BeanValidationconstraintsareannotationsappliedtothefieldsorpropertiesofJava
programminglanguageclasses.BeanValidationprovidesasetofconstraintsaswellasanAPIfordefiningcustomconstraints.CustomconstraintscanbespecificcombinationsofthedefaultEntities
Chapter32 • IntroductiontotheJavaPersistenceAPI 583
constraints,ornewconstraintsthatdon’tusethedefaultconstraints.Eachconstraintis
associatedwithatleastonevalidatorclassthatvalidatesthevalueoftheconstrainedfieldorproperty.Customconstraintdevelopersmustalsoprovideavalidatorclassfortheconstraint.
BeanValidationconstraintsareappliedtothepersistentfieldsorpropertiesofpersistent
classes.WhenaddingBeanValidationconstraints,usethesameaccessstrategyasthepersistentclass.Thatis,ifthepersistentclassusesfieldaccess,applytheBeanValidationconstraintannotationsontheclass’sfields.Iftheclassusespropertyaccess,applytheconstraintsonthegettermethods.
Table9–2 listsBeanValidation’sbuilt-inconstraints,definedinthe
javax.validation.constraints package.
Allthebuilt-inconstraintslistedin Table9–2 haveacorrespondingannotation,
ConstraintName .List,forgroupingmultipleconstraintsofthesametypeonthesamefieldor
property.Forexample,thefollowingpersistentfieldhastwo @Pattern constraints:
@Pattern.List({
@Pattern(regexp= "..."),
@Pattern(regexp= "...")
})
Thefollowingentityclass, Contact,hasBeanValidationconstraintsappliedtoitspersistent
fields.
@Entity
public class Contact implements Serializable {
private static final long serialVersionUID = 1L;@Id@GeneratedValue(strategy = GenerationType.AUTO)private Long id;@NotNullprotected String firstName;@NotNullprotected String lastName;@Pattern(regexp= "[a-z0-9!#$%&’*+/=?^_ ‘{|}~-]+(?:\\. "
+"[a-z0-9!#$%&’*+/=?^_ ‘{|}~-]+)*@ "
+"(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])? ",
message= "{invalid.email} ")
protected String email;@Pattern(regexp= "^\\(?(\\d{3})\\)?[- ]?(\\d{3})[- ]?(\\d{4})$ ",
message= "{invalid.phonenumber} ")
protected String mobilePhone;@Pattern(regexp= "^\\(?(\\d{3})\\)?[- ]?(\\d{3})[- ]?(\\d{4})$ ",
message= "{invalid.phonenumber} ")
protected String homePhone;@Temporal(javax.persistence.TemporalType.DATE)@Pastprotected Date birthday;...
}
The@NotNull annotationonthe firstName andlastName fieldsspecifiesthatthosefieldsare
nowrequired.Ifanew Contactinstanceiscreatedwhere firstName orlastName havenotbeenEntities
TheJavaEE6Tutorial • January2013 584
initialized,BeanValidationwillthrowavalidationerror.Similarly,ifapreviouslycreated
instanceof Contacthasbeenmodifiedsothat firstName orlastName arenull,avalidation
errorwillbethrown.
Theemailfieldhasa @Pattern constraintappliedtoit,withacomplicatedregularexpression
thatmatchesmostvalidemailaddresses.Ifthevalueof emaildoesn’tmatchthisregular
expression,avalidationerrorwillbethrown.
ThehomePhone andmobilePhone fieldshavethesame @Pattern constraints.Theregular
expressionmatches10digittelephonenumbersintheUnitedStatesandCanadaoftheform(xxx)xxx–xxxx.
Thebirthday fieldisannotatedwiththe @Pastconstraint,whichensuresthatthevalueof
birthday mustbeinthepast.
PrimaryKeysinEntities
Eachentityhasauniqueobjectidentifier.Acustomerentity,forexample,mightbeidentifiedby
acustomernumber.Theuniqueidentifier,or primarykey ,enablesclientstolocateaparticular
entityinstance.Everyentitymusthaveaprimarykey.Anentitymayhaveeitherasimpleoracompositeprimarykey.
Simpleprimarykeysusethe javax.persistence.Id annotationtodenotetheprimarykey
propertyorfield.
Compositeprimarykeysareusedwhenaprimarykeyconsistsofmorethanoneattribute,
whichcorrespondstoasetofsinglepersistentpropertiesorfields.Compositeprimarykeysmustbedefinedinaprimarykeyclass.Compositeprimarykeysaredenotedusingthejavax.persistence.EmbeddedId andjavax.persistence.IdClass annotations.
Theprimarykey,orthepropertyorfieldofacompositeprimarykey,mustbeoneofthe
followingJavalanguagetypes:
■Javaprimitivetypes
■Javaprimitivewrappertypes
■java.lang.String
■java.util.Date (thetemporaltypeshouldbe DATE)
■java.sql.Date
■java.math.BigDecimal
■java.math.BigInteger
Floating-pointtypesshouldneverbeusedinprimarykeys.Ifyouuseageneratedprimarykey,
onlyintegraltypeswillbeportable.Entities
Chapter32 • IntroductiontotheJavaPersistenceAPI 585
Aprimarykeyclassmustmeettheserequirements.
■Theaccesscontrolmodifieroftheclassmustbe public.
■Thepropertiesoftheprimarykeyclassmustbe publicorprotected ifproperty-based
accessisused.
■Theclassmusthaveapublicdefaultconstructor.
■Theclassmustimplementthe hashCode() andequals(Object other) methods.
■Theclassmustbeserializable.
■Acompositeprimarykeymustberepresentedandmappedtomultiplefieldsorproperties
oftheentityclassormustberepresentedandmappedasanembeddableclass.
■Iftheclassismappedtomultiplefieldsorpropertiesoftheentityclass,thenamesandtypesoftheprimarykeyfieldsorpropertiesintheprimarykeyclassmustmatchthoseoftheentityclass.
Thefollowingprimarykeyclassisacompositekey,andthe orderIdanditemIdfieldstogether
uniquelyidentifyanentity:
public final class LineItemKey implements Serializable {
public Integer orderId;public int itemId;
public LineItemKey() {}public LineItemKey(Integer orderId, int itemId) {
this.orderId = orderId;this.itemId = itemId;
}
public boolean equals(Object otherOb) {
if (this == otherOb) {
return true;
}if (!(otherOb instanceof LineItemKey)) {
return false;
}LineItemKey other = (LineItemKey) otherOb;return (
(orderId==null?other.orderId==null:orderId.equals(other.orderId))&&(itemId == other.itemId)
);
}
public int hashCode() {
return (
(orderId==null?0:orderId.hashCode())^((int) itemId)
);Entities
TheJavaEE6Tutorial • January2013 586
}
public String toString() {
return ""+ orderId + "-"+ itemId;
}
}
MultiplicityinEntityRelationships
Multiplicitiesareofthefollowingtypes:one-to-one,one-to-many,many-to-one,and
many-to-many:
■One-to-one :Eachentityinstanceisrelatedtoasingleinstanceofanotherentity.For
example,tomodelaphysicalwarehouseinwhicheachstoragebincontainsasinglewidget,StorageBin andWidgetwouldhaveaone-to-onerelationship.One-to-onerelationships
usethe javax.persistence.OneToOne annotationonthecorrespondingpersistent
propertyorfield.
■One-to-many :Anentityinstancecanberelatedtomultipleinstancesoftheotherentities.A
salesorder,forexample,canhavemultiplelineitems.Intheorderapplication, Orderwould
haveaone-to-manyrelationshipwith LineItem .One-to-manyrelationshipsusethe
javax.persistence.OneToMany annotationonthecorrespondingpersistentpropertyor
field.
■Many-to-one :Multipleinstancesofanentitycanberelatedtoasingleinstanceoftheother
entity.Thismultiplicityistheoppositeofaone-to-manyrelationship.Intheexamplejustmentioned,therelationshipto Orderfromtheperspectiveof LineItem ismany-to-one.
Many-to-onerelationshipsusethe javax.persistence.ManyToOne annotationonthe
correspondingpersistentpropertyorfield.
■Many-to-many :Theentityinstancescanberelatedtomultipleinstancesofeachother.For
example,eachcollegecoursehasmanystudents,andeverystudentmaytakeseveralcourses.Therefore,inanenrollmentapplication, CourseandStudentwouldhaveamany-to-many
relationship.Many-to-manyrelationshipsusethe javax.persistence.ManyToMany
annotationonthecorrespondingpersistentpropertyorfield.
DirectioninEntityRelationships
Thedirectionofarelationshipcanbeeitherbidirectionalorunidirectional.Abidirectionalrelationshiphasbothanowningsideandaninverseside.Aunidirectionalrelationshiphasonlyanowningside.TheowningsideofarelationshipdetermineshowthePersistenceruntimemakesupdatestotherelationshipinthedatabase.
BidirectionalRelationships
Inabidirectional relationship,eachentityhasarelationshipfieldorpropertythatreferstothe
otherentity.Throughtherelationshipfieldorproperty,anentityclass’scodecanaccessitsEntities
Chapter32 • IntroductiontotheJavaPersistenceAPI 587
relatedobject.Ifanentityhasarelatedfield,theentityissaidto“know”aboutitsrelatedobject.
Forexample,if Orderknowswhat LineItem instancesithasandif LineItem knowswhat Order
itbelongsto,theyhaveabidirectionalrelationship.
Bidirectionalrelationshipsmustfollowtheserules.
■Theinversesideofabidirectionalrelationshipmustrefertoitsowningsidebyusingthe
mappedBy elementofthe @OneToOne ,@OneToMany ,or@ManyToMany annotation.The
mappedBy elementdesignatesthepropertyorfieldintheentitythatistheownerofthe
relationship.
■Themanysideofmany-to-onebidirectionalrelationshipsmustnotdefinethe mappedBy
element.Themanysideisalwaystheowningsideoftherelationship.
■Forone-to-onebidirectionalrelationships,theowningsidecorrespondstothesidethatcontainsthecorrespondingforeignkey.
■Formany-to-manybidirectionalrelationships,eithersidemaybetheowningside.
UnidirectionalRelationships
Inaunidirectional relationship,onlyoneentityhasarelationshipfieldorpropertythatrefersto
theother.Forexample, LineItem wouldhavearelationshipfieldthatidentifies Product,but
Productwouldnothavearelationshipfieldorpropertyfor LineItem .Inotherwords, LineItem
knowsabout Product,but Productdoesn’tknowwhich LineItem instancesrefertoit.
QueriesandRelationshipDirection
JavaPersistencequerylanguageandCriteriaAPIqueriesoftennavigateacrossrelationships.
Thedirectionofarelationshipdetermineswhetheraquerycannavigatefromoneentitytoanother.Forexample,aquerycannavigatefrom LineItem toProductbutcannotnavigatein
theoppositedirection.For OrderandLineItem ,aquerycouldnavigateinbothdirections
becausethesetwoentitieshaveabidirectionalrelationship.
CascadeOperationsandRelationships
Entitiesthatuserelationshipsoftenhavedependenciesontheexistenceoftheotherentityintherelationship.Forexample,alineitemispartofanorder;iftheorderisdeleted,thelineitemalsoshouldbedeleted.Thisiscalledacascadedeleterelationship.
Thejavax.persistence.CascadeType enumeratedtypedefinesthecascadeoperationsthat
areappliedinthe cascadeelementoftherelationshipannotations.
Table32–1 liststhecascade
operationsforentities.Entities
TheJavaEE6Tutorial • January2013 588
TABLE32–1 CascadeOperationsforEntities
CascadeOperation Description
ALL Allcascadeoperationswillbeappliedtotheparententity’srelatedentity. Allis
equivalent to specifying cascade={DETACH, MERGE, PERSIST, REFRESH,
REMOVE}
DETACH Iftheparententityisdetachedfromthepersistencecontext,therelatedentity
willalsobedetached.
MERGE Iftheparententityismergedintothepersistencecontext,therelatedentitywill
alsobemerged.
PERSIST Iftheparententityispersistedintothepersistencecontext,therelatedentitywill
alsobepersisted.
REFRESH Iftheparententityisrefreshedinthecurrentpersistencecontext,therelated
entitywillalsoberefreshed.
REMOVE Iftheparententityisremovedfromthecurrentpersistencecontext,therelated
entitywillalsoberemoved.
Cascadedeleterelationshipsarespecifiedusingthe cascade=REMOVE elementspecificationfor
@OneToOne and@OneToMany relationships.Forexample:
@OneToMany(cascade=REMOVE, mappedBy= "customer ")
public Set<Order> getOrders() { return orders; }
OrphanRemovalinRelationships
Whenatargetentityinone-to-oneorone-to-manyrelationshipisremovedfromthe
relationship,itisoftendesirabletocascadetheremoveoperationtothetargetentity.Suchtargetentitiesareconsidered“orphans,”andthe orphanRemoval attributecanbeusedtospecify
thatorphanedentitiesshouldberemoved.Forexample,ifanorderhasmanylineitemsandoneofthemisremovedfromtheorder,theremovedlineitemisconsideredanorphan.IforphanRemoval issetto true,thelineitementitywillbedeletedwhenthelineitemisremoved
fromtheorder.
TheorphanRemoval attributein @OneToMany and@oneToOne takesaBooleanvalueandisby
defaultfalse.
Thefollowingexamplewillcascadetheremoveoperationtotheorphaned orderentitywhen
thecustomer entityisdeleted:
@OneToMany(mappedBy= "customer ", orphanRemoval= "true")
public List<Order> getOrders() { ... }Entities
Chapter32 • IntroductiontotheJavaPersistenceAPI 589
EmbeddableClassesinEntities
Embeddableclassesareusedtorepresentthestateofanentitybutdon’thaveapersistent
identityoftheirown,unlikeentityclasses.Instancesofanembeddableclasssharetheidentityoftheentitythatownsit.Embeddableclassesexistonlyasthestateofanotherentity.Anentitymayhavesingle-valuedorcollection-valuedembeddableclassattributes.
Embeddableclasseshavethesamerulesasentityclassesbutareannotatedwiththe
javax.persistence.Embeddable annotationinsteadof @Entity.
Thefollowingembeddableclass, ZipCode,hasthefields zipandplusFour :
@Embeddable
public class ZipCode {
String zip;String plusFour;
...}
Thisembeddableclassisusedbythe Addressentity:
@Entity
public class Address {
@Idprotected long idString street1;String street2;String city;String province;@EmbeddedZipCode zipCode;String country;
...}
Entitiesthatownembeddableclassesaspartoftheirpersistentstatemayannotatethefieldor
propertywiththe javax.persistence.Embedded annotationbutarenotrequiredtodoso.
Embeddableclassesmaythemselvesuseotherembeddableclassestorepresenttheirstate.They
mayalsocontaincollectionsofbasicJavaprogramminglanguagetypesorotherembeddableclasses.Embeddableclassesmayalsocontainrelationshipstootherentitiesorcollectionsofentities.Iftheembeddableclasshassucharelationship,therelationshipisfromthetargetentityorcollectionofentitiestotheentitythatownstheembeddableclass.Entities
TheJavaEE6Tutorial • January2013 590
EntityInheritance
Entitiessupportclassinheritance,polymorphicassociations,andpolymorphicqueries.Entity
classescanextendnon-entityclasses,andnon-entityclassescanextendentityclasses.Entityclassescanbebothabstractandconcrete.
Therosterexampleapplicationdemonstratesentityinheritance,asdescribedin
“Entity
Inheritanceinthe rosterApplication”onpage617 .
AbstractEntities
Anabstractclassmaybedeclaredanentitybydecoratingtheclasswith @Entity.Abstract
entitiesarelikeconcreteentitiesbutcannotbeinstantiated.
Abstractentitiescanbequeriedjustlikeconcreteentities.Ifanabstractentityisthetargetofa
query,thequeryoperatesonalltheconcretesubclassesoftheabstractentity:
@Entity
public abstract class Employee {
@Idprotected Integer employeeId;...
}@Entitypublic class FullTimeEmployee extends Employee {
protected Integer salary;
...
}@Entitypublic class PartTimeEmployee extends Employee {
protected Float hourlyWage;
}
MappedSuperclasses
Entitiesmayinheritfromsuperclassesthatcontainpersistentstateandmappinginformation
butarenotentities.Thatis,thesuperclassisnotdecoratedwiththe @Entityannotationandis
notmappedasanentitybytheJavaPersistenceprovider.Thesesuperclassesaremostoftenusedwhenyouhavestateandmappinginformationcommontomultipleentityclasses.
Mappedsuperclassesarespecifiedbydecoratingtheclasswiththeannotation
javax.persistence.MappedSuperclass :
@MappedSuperclass
public class Employee {
@Idprotected Integer employeeId;EntityInheritance
Chapter32 • IntroductiontotheJavaPersistenceAPI 591
...
}@Entitypublic class FullTimeEmployee extends Employee {
protected Integer salary;...
}@Entitypublic class PartTimeEmployee extends Employee {
protected Float hourlyWage;...
}
Mappedsuperclassescannotbequeriedandcan’tbeusedin EntityManager orQuery
operations.Youmustuseentitysubclassesofthemappedsuperclassin EntityManager or
Queryoperations.Mappedsuperclassescan’tbetargetsofentityrelationships.Mapped
superclassescanbeabstractorconcrete.
Mappedsuperclassesdonothaveanycorrespondingtablesintheunderlyingdatastore.Entities
thatinheritfromthemappedsuperclassdefinethetablemappings.Forinstance,intheprecedingcodesample,theunderlyingtableswouldbe FULLTIMEEMPLOYEE and
PARTTIMEEMPLOYEE ,butthereisno EMPLOYEE table.
Non-EntitySuperclasses
Entitiesmayhavenon-entitysuperclasses,andthesesuperclassescanbeeitherabstractor
concrete.Thestateofnon-entitysuperclassesisnonpersistent,andanystateinheritedfromthenon-entitysuperclassbyanentityclassisnonpersistent.Non-entitysuperclassesmaynotbeusedin EntityManager orQueryoperations.Anymappingorrelationshipannotationsin
non-entitysuperclassesareignored.
EntityInheritanceMappingStrategies
YoucanconfigurehowtheJavaPersistenceprovidermapsinheritedentitiestotheunderlyingdatastorebydecoratingtherootclassofthehierarchywiththeannotationjavax.persistence.Inheritance .Thefollowingmappingstrategiesareusedtomapthe
entitydatatotheunderlyingdatabase:
■Asingletableperclasshierarchy
■Atableperconcreteentityclass
■A“join”strategy,wherebyfieldsorpropertiesthatarespecifictoasubclassaremappedtoadifferenttablethanthefieldsorpropertiesthatarecommontotheparentclass
Thestrategyisconfiguredbysettingthe strategy elementof @Inheritance tooneofthe
optionsdefinedinthe javax.persistence.InheritanceType enumeratedtype:EntityInheritance
TheJavaEE6Tutorial • January2013 592
public enum InheritanceType {
SINGLE_TABLE,JOINED,TABLE_PER_CLASS
};
Thedefaultstrategy, InheritanceType.SINGLE_TABLE ,isusedifthe @Inheritance annotation
isnotspecifiedontherootclassoftheentityhierarchy.
TheSingleTableperClassHierarchyStrategy
Withthisstrategy,whichcorrespondstothedefault InheritanceType.SINGLE_TABLE ,all
classesinthehierarchyaremappedtoasingletableinthedatabase.Thistablehasadiscriminatorcolumn containingavaluethatidentifiesthesubclasstowhichtheinstance
representedbytherowbelongs.
Thediscriminatorcolumn,whoseelementsareshownin
Table32–2 ,canbespecifiedbyusing
thejavax.persistence.DiscriminatorColumn annotationontherootoftheentityclass
hierarchy.
TABLE32–2 @DiscriminatorColumnElements
Type Name Description
String name Thenameofthecolumntobeusedasthediscriminator
column.Thedefaultis DTYPE.Thiselementisoptional.
DiscriminatorType discriminatorType Thetypeofthecolumntobeusedasadiscriminator
column.Thedefaultis DiscriminatorType.STRING .This
elementisoptional.
String columnDefinition TheSQLfragmenttousewhencreatingthediscriminator
column.ThedefaultisgeneratedbythePersistenceproviderandisimplementation-specific.Thiselementisoptional.
String length Thecolumnlengthfor String-baseddiscriminatortypes.
Thiselementisignoredfornon- Stringdiscriminator
types.Thedefaultis31.Thiselementisoptional.
Thejavax.persistence.DiscriminatorType enumeratedtypeisusedtosetthetypeofthe
discriminatorcolumninthedatabasebysettingthe discriminatorType elementof
@DiscriminatorColumn tooneofthedefinedtypes. DiscriminatorType isdefinedas:
public enum DiscriminatorType {
STRING,CHAR,INTEGER
};EntityInheritance
Chapter32 • IntroductiontotheJavaPersistenceAPI 593
If@DiscriminatorColumn isnotspecifiedontherootoftheentityhierarchyanda
discriminatorcolumnisrequired,thePersistenceproviderassumesadefaultcolumnnameof
DTYPEandcolumntypeof DiscriminatorType.STRING .
Thejavax.persistence.DiscriminatorValue annotationmaybeusedtosetthevalue
enteredintothediscriminatorcolumnforeachentityinaclasshierarchy.Youmaydecorateonlyconcreteentityclasseswith @DiscriminatorValue .
If@DiscriminatorValue isnotspecifiedonanentityinaclasshierarchythatusesa
discriminatorcolumn,thePersistenceproviderwillprovideadefault,implementation-specificvalue.Ifthe discriminatorType elementof @DiscriminatorColumn is
DiscriminatorType.STRING ,thedefaultvalueisthenameoftheentity.
Thisstrategyprovidesgoodsupportforpolymorphicrelationshipsbetweenentitiesandqueries
thatcovertheentireentityclasshierarchy.However,thisstrategyrequiresthecolumnsthatcontainthestateofsubclassestobenullable.
TheTableperConcreteClassStrategy
Inthisstrategy,whichcorrespondsto InheritanceType.TABLE_PER_CLASS ,eachconcreteclass
ismappedtoaseparatetableinthedatabase.Allfieldsorpropertiesintheclass,includinginheritedfieldsorproperties,aremappedtocolumnsintheclass’stableinthedatabase.
Thisstrategyprovidespoorsupportforpolymorphicrelationshipsandusuallyrequireseither
SQL UNIONqueriesorseparateSQLqueriesforeachsubclassforqueriesthatcovertheentire
entityclasshierarchy.
SupportforthisstrategyisoptionalandmaynotbesupportedbyallJavaPersistenceAPI
providers.ThedefaultJavaPersistenceAPIproviderintheGlassFishServerdoesnotsupportthisstrategy.
TheJoinedSubclassStrategy
Inthisstrategy,whichcorrespondsto InheritanceType.JOINED ,therootoftheclasshierarchy
isrepresentedbyasingletable,andeachsubclasshasaseparatetablethatcontainsonlythosefieldsspecifictothatsubclass.Thatis,thesubclasstabledoesnotcontaincolumnsforinheritedfieldsorproperties.Thesubclasstablealsohasacolumnorcolumnsthatrepresentitsprimarykey,whichisaforeignkeytotheprimarykeyofthesuperclasstable.
Thisstrategyprovidesgoodsupportforpolymorphicrelationshipsbutrequiresoneormore
joinoperationstobeperformedwheninstantiatingentitysubclasses.Thismayresultinpoorperformanceforextensiveclasshierarchies.Similarly,queriesthatcovertheentireclasshierarchyrequirejoinoperationsbetweenthesubclasstables,resultingindecreasedperformance.
SomeJavaPersistenceAPIproviders,includingthedefaultproviderintheGlassFishServer,
requireadiscriminatorcolumnthatcorrespondstotherootentitywhenusingthejoinedsubclassstrategy.Ifyouarenotusingautomatictablecreationinyourapplication,makesureEntityInheritance
TheJavaEE6Tutorial • January2013 594
thatthedatabasetableissetupcorrectlyforthediscriminatorcolumndefaults,orusethe
@DiscriminatorColumn annotationtomatchyourdatabaseschema.Forinformationon
discriminatorcolumns,see “TheSingleTableperClassHierarchyStrategy”onpage593 .
ManagingEntities
Entitiesaremanagedbytheentitymanager,whichisrepresentedbyjavax.persistence.EntityManager instances.Each EntityManager instanceisassociated
withapersistencecontext:asetofmanagedentityinstancesthatexistinaparticulardatastore.Apersistencecontextdefinesthescopeunderwhichparticularentityinstancesarecreated,persisted,andremoved.The EntityManager interfacedefinesthemethodsthatareusedto
interactwiththepersistencecontext.
TheEntityManager Interface
TheEntityManager APIcreatesandremovespersistententityinstances,findsentitiesbythe
entity’sprimarykey,andallowsqueriestoberunonentities.
Container-ManagedEntityManagers
Withacontainer-managedentitymanager ,anEntityManager instance’spersistencecontextis
automaticallypropagatedbythecontainertoallapplicationcomponentsthatusetheEntityManager instancewithinasingleJavaTransactionAPI(JTA)transaction.
JTAtransactionsusuallyinvolvecallsacrossapplicationcomponents.TocompleteaJTA
transaction,thesecomponentsusuallyneedaccesstoasinglepersistencecontext.Thisoccurswhenan EntityManager isinjectedintotheapplicationcomponentsbymeansofthe
javax.persistence.PersistenceContext annotation.Thepersistencecontextis
automaticallypropagatedwiththecurrentJTAtransaction,and EntityManager referencesthat
aremappedtothesamepersistenceunitprovideaccesstothepersistencecontextwithinthattransaction.Byautomaticallypropagatingthepersistencecontext,applicationcomponentsdon’tneedtopassreferencesto EntityManager instancestoeachotherinordertomake
changeswithinasingletransaction.TheJavaEEcontainermanagesthelifecycleofcontainer-managedentitymanagers.
Toobtainan EntityManager instance,injecttheentitymanagerintotheapplication
component:
@PersistenceContext
EntityManager em;ManagingEntities
Chapter32 • IntroductiontotheJavaPersistenceAPI 595
Application-ManagedEntityManagers
Withanapplication-managedentitymanager ,ontheotherhand,thepersistencecontextisnot
propagatedtoapplicationcomponents,andthelifecycleof EntityManager instancesis
managedbytheapplication.
Application-managedentitymanagersareusedwhenapplicationsneedtoaccessapersistence
contextthatisnotpropagatedwiththeJTAtransactionacross EntityManager instancesina
particularpersistenceunit.Inthiscase,each EntityManager createsanew,isolatedpersistence
context.The EntityManager anditsassociatedpersistencecontextarecreatedanddestroyed
explicitlybytheapplication.Theyarealsousedwhendirectlyinjecting EntityManager
instancescan’tbedonebecause EntityManager instancesarenotthread-safe.
EntityManagerFactory instancesarethread-safe.
Applicationscreate EntityManager instancesinthiscasebyusingthe createEntityManager
methodof javax.persistence.EntityManagerFactory .
Toobtainan EntityManager instance,youfirstmustobtainan EntityManagerFactory
instancebyinjectingitintotheapplicationcomponentbymeansofthejavax.persistence.PersistenceUnit annotation:
@PersistenceUnit
EntityManagerFactory emf;
Thenobtainan EntityManager fromthe EntityManagerFactory instance:
EntityManager em = emf.createEntityManager();
Application-managedentitymanagersdon’tautomaticallypropagatetheJTAtransaction
context.SuchapplicationsneedtomanuallygainaccesstotheJTAtransactionmanagerandaddtransactiondemarcationinformationwhenperformingentityoperations.Thejavax.transaction.UserTransaction interfacedefinesmethodstobegin,commit,androll
backtransactions.Injectaninstanceof UserTransaction bycreatinganinstancevariable
annotatedwith @Resource :
@Resource
UserTransaction utx;
Tobeginatransaction,callthe UserTransaction.begin method.Whenalltheentity
operationsarecomplete,callthe UserTransaction.commit methodtocommitthetransaction.
TheUserTransaction.rollback methodisusedtorollbackthecurrenttransaction.
Thefollowingexampleshowshowtomanagetransactionsinanapplicationthatusesan
application-managedentitymanager:
@PersistenceContext
EntityManagerFactory emf;EntityManager em;ManagingEntities
TheJavaEE6Tutorial • January2013 596
@Resource
UserTransaction utx;...em = emf.createEntityManager();try {
utx.begin();em.persist(SomeEntity);em.merge(AnotherEntity);em.remove(ThirdEntity);utx.commit();
} catch (Exception e) {
utx.rollback();
}
FindingEntitiesUsingthe EntityManager
TheEntityManager.find methodisusedtolookupentitiesinthedatastorebytheentity’s
primarykey:
@PersistenceContext
EntityManager em;public void enterOrder(int custID, Order newOrder) {
Customer cust = em.find(Customer.class, custID);cust.getOrders().add(newOrder);newOrder.setCustomer(cust);
}
ManaginganEntityInstance’sLifecycle
Youmanageentityinstancesbyinvokingoperationsontheentitybymeansofan
EntityManager instance.Entityinstancesareinoneoffourstates:new,managed,detached,or
removed.
■Newentityinstanceshavenopersistentidentityandarenotyetassociatedwithapersistencecontext.
■Managedentityinstanceshaveapersistentidentityandareassociatedwithapersistencecontext.
■Detachedentityinstanceshaveapersistentidentityandarenotcurrentlyassociatedwithapersistencecontext.
■Removedentityinstanceshaveapersistentidentity,areassociatedwithapersistentcontext,andarescheduledforremovalfromthedatastore.
PersistingEntityInstances
Newentityinstancesbecomemanagedandpersistenteitherbyinvokingthe persistmethod
orbyacascading persistoperationinvokedfromrelatedentitiesthathavethe
cascade=PERSIST orcascade=ALL elementssetintherelationshipannotation.Thismeansthat
theentity’sdataisstoredtothedatabasewhenthetransactionassociatedwiththe persist
operationiscompleted.Iftheentityisalreadymanaged,the persistoperationisignored,ManagingEntities
Chapter32 • IntroductiontotheJavaPersistenceAPI 597
althoughthe persistoperationwillcascadetorelatedentitiesthathavethe cascadeelement
setto PERSISTorALLintherelationshipannotation.If persistiscalledonaremovedentity
instance,theentitybecomesmanaged.Iftheentityisdetached,either persistwillthrowan
IllegalArgumentException ,orthetransactioncommitwillfail.
@PersistenceContext
EntityManager em;...public LineItem createLineItem(Order order, Product product,
int quantity) {
LineItem li = new LineItem(order, product, quantity);order.getLineItems().add(li);em.persist(li);return li;
}
Thepersistoperationispropagatedtoallentitiesrelatedtothecallingentitythathavethe
cascadeelementsetto ALLorPERSISTintherelationshipannotation:
@OneToMany(cascade=ALL, mappedBy= "order ")
public Collection<LineItem> getLineItems() {
return lineItems;
}
RemovingEntityInstances
Managedentityinstancesareremovedbyinvokingthe removemethodorbyacascading
removeoperationinvokedfromrelatedentitiesthathavethe cascade=REMOVE orcascade=ALL
elementssetintherelationshipannotation.Ifthe removemethodisinvokedonanewentity,
theremoveoperationisignored,although removewillcascadetorelatedentitiesthathavethe
cascadeelementsetto REMOVEorALLintherelationshipannotation.If removeisinvokedona
detachedentity,either removewillthrowan IllegalArgumentException ,orthetransaction
commitwillfail.Ifinvokedonanalreadyremovedentity, removewillbeignored.Theentity’s
datawillberemovedfromthedatastorewhenthetransactioniscompletedorasaresultoftheflushoperation.
public void removeOrder(Integer orderId) {
try {
Order order = em.find(Order.class, orderId);
em.remove(order);
}...
Inthisexample,all LineItem entitiesassociatedwiththeorderarealsoremoved,as
Order.getLineItems hascascade=ALL setintherelationshipannotation.
SynchronizingEntityDatatotheDatabase
Thestateofpersistententitiesissynchronizedtothedatabasewhenthetransactionwithwhich
theentityisassociatedcommits.Ifamanagedentityisinabidirectionalrelationshipwithanothermanagedentity,thedatawillbepersisted,basedontheowningsideoftherelationship.ManagingEntities
TheJavaEE6Tutorial • January2013 598
Toforcesynchronizationofthemanagedentitytothedatastore,invokethe flushmethodof
theEntityManager instance.Iftheentityisrelatedtoanotherentityandtherelationship
annotationhasthe cascadeelementsetto PERSISTorALL,therelatedentity’sdatawillbe
synchronizedwiththedatastorewhen flushiscalled.
Iftheentityisremoved,calling flushwillremovetheentitydatafromthedatastore.
PersistenceUnits
Apersistenceunitdefinesasetofallentityclassesthataremanagedby EntityManager
instancesinanapplication.Thissetofentityclassesrepresentsthedatacontainedwithinasingledatastore.
Persistenceunitsaredefinedbythe persistence.xml configurationfile.Thefollowingisan
example persistence.xml file:
<persistence>
<persistence-unit name= "OrderManagement ">
<description>This unit manages orders and customers.
It does not rely on any vendor-specific features and cantherefore be deployed to any persistence provider.
</description><jta-data-source>jdbc/MyOrderDB</jta-data-source><jar-file>MyOrderApp.jar</jar-file><class>com.widgets.Order</class><class>com.widgets.Customer</class>
</persistence-unit>
</persistence>
Thisfiledefinesapersistenceunitnamed OrderManagement ,whichusesaJTA-awaredata
source: jdbc/MyOrderDB .The jar-file andclasselementsspecifymanagedpersistence
classes:entityclasses,embeddableclasses,andmappedsuperclasses.The jar-file element
specifiesJARfilesthatarevisibletothepackagedpersistenceunitthatcontainmanagedpersistenceclasses,whereasthe classelementexplicitlynamesmanagedpersistenceclasses.
Thejta-data-source (forJTA-awaredatasources)and non-jta-data-source (for
non-JTA-awaredatasources)elementsspecifytheglobalJNDInameofthedatasourcetobeusedbythecontainer.
TheJARfileordirectorywhose META-INF directorycontains persistence.xml iscalledthe
rootofthepersistenceunit.Thescopeofthepersistenceunitisdeterminedbythepersistenceunit’sroot.Eachpersistenceunitmustbeidentifiedwithanamethatisuniquetothepersistenceunit’sscope.ManagingEntities
Chapter32 • IntroductiontotheJavaPersistenceAPI 599
PersistentunitscanbepackagedaspartofaWARorEJBJARfileorcanbepackagedasaJAR
filethatcanthenbeincludedinanWARorEARfile.
■IfyoupackagethepersistentunitasasetofclassesinanEJBJARfile, persistence.xml
shouldbeputintheEJBJAR’s META-INF directory.
■IfyoupackagethepersistenceunitasasetofclassesinaWARfile, persistence.xml should
belocatedintheWARfile’s WEB-INF/classes/META-INF directory.
■IfyoupackagethepersistenceunitinaJARfilethatwillbeincludedinaWARorEARfile,
theJARfileshouldbelocatedineither
■TheWEB-INF/lib directoryofaWAR
■TheEARfile’slibrarydirectory
Note–IntheJavaPersistenceAPI1.0,JARfilescouldbelocatedattherootofanEARfile
astherootofthepersistenceunit.Thisisnolongersupported.PortableapplicationsshouldusetheEARfile’slibrarydirectoryastherootofthepersistenceunit.
QueryingEntities
TheJavaPersistenceAPIprovidesthefollowingmethodsforqueryingentities.
■TheJavaPersistencequerylanguage(JPQL)isasimple,string-basedlanguagesimilartoSQLusedtoqueryentitiesandtheirrelationships.See
Chapter34,“TheJavaPersistence
QueryLanguage,” formoreinformation.
■TheCriteriaAPIisusedtocreatetypesafequeriesusingJavaprogramminglanguageAPIstoqueryforentitiesandtheirrelationships.See
Chapter35,“UsingtheCriteriaAPItoCreate
Queries,” formoreinformation.
BothJPQLandtheCriteriaAPIhaveadvantagesanddisadvantages.Justafewlineslong,JPQLqueriesaretypicallymoreconciseandmorereadablethanCriteria
queries.DevelopersfamiliarwithSQLwillfinditeasytolearnthesyntaxofJPQL.JPQLnamedqueriescanbedefinedintheentityclassusingaJavaprogramminglanguageannotationorintheapplication’sdeploymentdescriptor.JPQLqueriesarenottypesafe,however,andrequireacastwhenretrievingthequeryresultfromtheentitymanager.Thismeansthattype-castingerrorsmaynotbecaughtatcompiletime.JPQLqueriesdon’tsupportopen-endedparameters.
Criteriaqueriesallowyoutodefinethequeryinthebusinesstieroftheapplication.Although
thisisalsopossibleusingJPQLdynamicqueries,CriteriaqueriesprovidebetterperformancebecauseJPQLdynamicqueriesmustbeparsedeachtimetheyarecalled.Criteriaqueriesaretypesafeandthereforedon’trequirecasting,asJPQLqueriesdo.TheCriteriaAPIisjustanotherJavaprogramminglanguageAPIanddoesn’trequiredeveloperstolearnthesyntaxofanotherQueryingEntities
TheJavaEE6Tutorial • January2013 600
querylanguage.CriteriaqueriesaretypicallymoreverbosethanJPQLqueriesandrequirethe
developertocreateseveralobjectsandperformoperationsonthoseobjectsbeforesubmittingthequerytotheentitymanager.
FurtherInformationaboutPersistence
FormoreinformationabouttheJavaPersistenceAPI,see
■JavaPersistence2.0APIspecification:
http://jcp.org/en/jsr/detail?id=317
■EclipseLink,theJavaPersistenceAPIimplementationintheGlassFishServer:
http://www.eclipse.org/eclipselink/jpa.php
■EclipseLinkteamblog:
http://eclipselink.blogspot.com/
■EclipseLinkwikidocumentation:
http://wiki.eclipse.org/EclipseLinkFurtherInformationaboutPersistence
Chapter32 • IntroductiontotheJavaPersistenceAPI 601
602
RunningthePersistenceExamples
ThischapterexplainshowtousetheJavaPersistenceAPI.Thematerialherefocusesonthe
sourcecodeandsettingsofthreeexamples.Thefirstexample, order,isanapplicationthatuses
astatefulsessionbeantomanageentitiesrelatedtoanorderingsystem.Thesecondexample,roster,isanapplicationthatmanagesacommunitysportssystem.Thethirdexample,
address-book ,isawebapplicationthatstorescontactdata.Thischapterassumesthatyouare
familiarwiththeconceptsdetailedin
Chapter32,“IntroductiontotheJavaPersistenceAPI.”
Thefollowingtopicsareaddressedhere:
■“The orderApplication”onpage603
■“The rosterApplication”onpage615
■“The address-book Application”onpage623
TheorderApplication
Theorderapplicationisasimpleinventoryandorderingapplicationformaintainingacatalog
ofpartsandplacinganitemizedorderofthoseparts.Theapplicationhasentitiesthatrepresentparts,vendors,orders,andlineitems.Theseentitiesareaccessedusingastatefulsessionbeanthatholdsthebusinesslogicoftheapplication.Asimplesingletonsessionbeancreatestheinitialentitiesonapplicationdeployment.AFaceletswebapplicationmanipulatesthedataanddisplaysdatafromthecatalog.
Theinformationcontainedinanordercanbedividedintoelements.Whatistheorder
number?Whatpartsareincludedintheorder?Whatpartsmakeupthatpart?Whomakesthepart?Whatarethespecificationsforthepart?Arethereanyschematicsforthepart?The order
applicationisasimplifiedversionofanorderingsystemthathasalltheseelements.
TheorderapplicationconsistsofasingleWARmodulethatincludestheenterprisebean
classes,theentities,thesupportclasses,andtheFaceletsXHTMLandclassfiles.
ThedatabaseschemaintheJavaDBdatabasefor orderisshownin
Figure33–1 .33CHAPTER 33
603
Note–Inthisdiagram,forsimplicity,the PERSISTENCE_ORDER_ prefixisomittedfromthetable
names.
EntityRelationshipsintheorderApplication
Theorderapplicationdemonstratesseveraltypesofentityrelationships:self-referential,
one-to-one,one-to-many,many-to-one,andunidirectionalrelationships.FIGURE33–1 DatabaseSchemafortheorderApplication
 VENDORPARTNUMBER
 DESCRIPTION PRICE VENDORID PARTNUMBER PARTREVISION
VENDOR_PART
BIGINT
VARCHAR(255)
DOUBLE(52,0)
INT
VARCHAR(255)
INT
 PARTNUMBER REVISION  DRAWING SPECIFICATION
PART_DETAIL
VARCHAR(255)
INT
BLOBBLOB ORDERID DISCOUNT LASTUPDATE SHIPMENTINFO STATUS
ORDER
INT
INT
TIMESTAMP
VARCHAR(255)
CHAR(1)
 VENDORID ADDRESS CONTACT VENDORNAME PHONE
VENDOR
INT
VARCHAR(255)VARCHAR(255)VARCHAR(255)VARCHAR(255)
 REVISION PARTNUMBER DESCRIPTION REVISIONDATE BOMREVISION BOMPARTNUMBER 
PART
INT
VARCHAR(255)VARCHAR(255)
DATE
INT
VARCHAR(255)
 ITEMID   ORDERID  QUANTITY  VENDORPARTNUMBER   
LINEITEM
INT
INTINT
BIGINT
Primary key 
Primary foreign keyForeign keyField
TheorderApplication
TheJavaEE6Tutorial • January2013 604
Self-ReferentialRelationships
Aself-referential relationshipoccursbetweenrelationshipfieldsinthesameentity. Parthasa
field, bomPart,whichhasaone-to-manyrelationshipwiththefield parts,whichisalsoin Part.
Thatis,apartcanbemadeupofmanyparts,andeachofthosepartshasexactlyonebill-of-materialpart.
Theprimarykeyfor Partisacompoundprimarykey,acombinationofthe partNumber and
revision fields.Thiskeyismappedtothe PARTNUMBER andREVISION columnsinthe
EJB_ORDER_PART table:
...
@ManyToOne@JoinColumns({
@JoinColumn(name= "BOMPARTNUMBER ",
referencedColumnName= "PARTNUMBER "),
@JoinColumn(name= "BOMREVISION ",
referencedColumnName= "REVISION ")
})public Part getBomPart() {
return bomPart;
}...
@OneToMany(mappedBy= "bomPart ")
public Collection<Part> getParts() {
return parts;
}...
One-to-OneRelationships
Parthasafield, vendorPart ,thathasaone-to-onerelationshipwith VendorPart ’spartfield.
Thatis,eachparthasexactlyonevendorpart,andviceversa.
Hereistherelationshipmappingin Part:
@OneToOne(mappedBy= "part")
public VendorPart getVendorPart() {
return vendorPart;
}
Hereistherelationshipmappingin VendorPart :
@OneToOne
@JoinColumns({
@JoinColumn(name= "PARTNUMBER ",
referencedColumnName= "PARTNUMBER "),
@JoinColumn(name= "PARTREVISION ",
referencedColumnName= "REVISION ")
})public Part getPart() {
return part;
}TheorderApplication
Chapter33 • RunningthePersistenceExamples 605
Notethat,because Partusesacompoundprimarykey,the @JoinColumns annotationisusedto
mapthecolumnsinthe PERSISTENCE_ORDER_VENDOR_PART tabletothecolumnsin
PERSISTENCE_ORDER_PART .The PERSISTENCE_ORDER_VENDOR_PART table’s PARTREVISION
columnrefersto PERSISTENCE_ORDER_PART ’sREVISION column.
One-to-ManyRelationshipMappedtoOverlappingPrimaryand
ForeignKeys
Orderhasafield, lineItems ,thathasaone-to-manyrelationshipwith LineItem ’sfield order.
Thatis,eachorderhasoneormorelineitem.
LineItem usesacompoundprimarykeythatismadeupofthe orderIdanditemIdfields.This
compoundprimarykeymapstothe ORDERIDandITEMIDcolumnsinthe
PERSISTENCE_ORDER_LINEITEM table. ORDERIDisaforeignkeytothe ORDERIDcolumninthe
PERSISTENCE_ORDER_ORDER table.Thismeansthatthe ORDERIDcolumnismappedtwice:once
asaprimarykeyfield, orderId;andagainasarelationshipfield, order.
Hereistherelationshipmappingin Order:
@OneToMany(cascade=ALL, mappedBy= "order ")
public Collection<LineItem> getLineItems() {return lineItems;
}
Hereistherelationshipmappingin LineItem :
@ManyToOne
public Order getOrder() {return order;
}
UnidirectionalRelationships
LineItem hasafield, vendorPart ,thathasaunidirectionalmany-to-onerelationshipwith
VendorPart .Thatis,thereisnofieldinthetargetentityinthisrelationship:
@ManyToOne
public VendorPart getVendorPart() {return vendorPart;
}
PrimaryKeysintheorderApplication
Theorderapplicationusesseveraltypesofprimarykeys:single-valuedprimarykeys,
compoundprimarykeys,andgeneratedprimarykeys.TheorderApplication
TheJavaEE6Tutorial • January2013 606
GeneratedPrimaryKeys
VendorPart usesageneratedprimarykeyvalue.Thatis,theapplicationdoesnotassignprimary
keyvaluesfortheentitiesbutinsteadreliesonthepersistenceprovidertogeneratetheprimarykeyvalues.The @GeneratedValue annotationisusedtospecifythatanentitywillusea
generatedprimarykey.
InVendorPart ,thefollowingcodespecifiesthesettingsforgeneratingprimarykeyvalues:
@TableGenerator(
name= "vendorPartGen ",
table= "PERSISTENCE_ORDER_SEQUENCE_GENERATOR ",
pkColumnName= "GEN_KEY ",
valueColumnName= "GEN_VALUE ",
pkColumnValue= "VENDOR_PART_ID ",
allocationSize=10)
@Id@GeneratedValue(strategy=GenerationType.TABLE,
generator= "vendorPartGen ")
public Long getVendorPartNumber() {
return vendorPartNumber;
}
The@TableGenerator annotationisusedinconjunctionwith @GeneratedValue ’s
strategy=TABLE element.Thatis,thestrategyusedtogeneratetheprimarykeysistouseatable
inthedatabase.The @TableGenerator annotationisusedtoconfigurethesettingsforthe
generatortable.Thenameelementsetsthenameofthegenerator,whichis vendorPartGen in
VendorPart .
TheEJB_ORDER_SEQUENCE_GENERATOR table,whosetwocolumnsare GEN_KEYandGEN_VALUE ,
willstorethegeneratedprimarykeyvalues.Thistablecouldbeusedtogenerateotherentity’sprimarykeys,sothe pkColumnValue elementissetto VENDOR_PART_ID todistinguishthis
entity’sgeneratedprimarykeysfromotherentity’sgeneratedprimarykeys.TheallocationSize elementspecifiestheamounttoincrementwhenallocatingprimarykey
values.Inthiscase,each VendorPart ’sprimarykeywillincrementby10.
Theprimarykeyfield vendorPartNumber isoftype Long,asthegeneratedprimarykey’sfield
mustbeanintegraltype.
CompoundPrimaryKeys
Acompoundprimarykeyismadeupofmultiplefieldsandfollowstherequirementsdescribedin
“PrimaryKeysinEntities”onpage585 .Touseacompoundprimarykey,youmustcreatea
wrapperclass.TheorderApplication
Chapter33 • RunningthePersistenceExamples 607
Inorder,twoentitiesusecompoundprimarykeys: PartandLineItem .
■Partusesthe PartKeywrapperclass. Part’sprimarykeyisacombinationofthepart
numberandtherevisionnumber. PartKeyencapsulatesthisprimarykey.
■LineItem usesthe LineItemKey class. LineItem ’sprimarykeyisacombinationoftheorder
numberandtheitemnumber. LineItemKey encapsulatesthisprimarykey.
Thisisthe LineItemKey compoundprimarykeywrapperclass:
package order.entity;
public final class LineItemKey implements
java.io.Serializable {
private Integer orderId;
private int itemId;
public int hashCode() {
return ((this.getOrderId()==null
?0:this.getOrderId().hashCode())
^ ((int) this.getItemId()));
}
public boolean equals(Object otherOb) {
if (this == otherOb) {
return true;
}if (!(otherOb instanceof LineItemKey)) {
return false;
}
LineItemKey other = (LineItemKey) otherOb;return ((this.getOrderId()==null
?other.orderId==null:this.getOrderId().equals
(other.orderId)) && (this.getItemId ==
other.itemId));
}
public String toString() {
return ""+ orderId + "-"+ itemId;
}
}
The@IdClass annotationisusedtospecifytheprimarykeyclassintheentityclass.In
LineItem ,@IdClass isusedasfollows:
@IdClass(order.entity.LineItemKey.class)
@Entity...public class LineItem {...}
Thetwofieldsin LineItem aretaggedwiththe @Idannotationtomarkthosefieldsaspartofthe
compoundprimarykey:TheorderApplication
TheJavaEE6Tutorial • January2013 608
@Id
public int getItemId() {
return itemId;
}...@Id@Column(name= "ORDERID ", nullable=false,
insertable=false, updatable=false)
public Integer getOrderId() {
return orderId;
}
FororderId,youalsousethe @Columnannotationtospecifythecolumnnameinthetableand
thatthiscolumnshouldnotbeinsertedorupdated,asitisanoverlappingforeignkeypointing
atthe PERSISTENCE_ORDER_ORDER table’s ORDERIDcolumn(see “One-to-ManyRelationship
MappedtoOverlappingPrimaryandForeignKeys”onpage606 ).Thatis, orderIdwillbesetby
theOrderentity.
InLineItem ’sconstructor,thelineitemnumber( LineItem.itemId )issetusingthe
Order.getNextId method:
public LineItem(Order order, int quantity, VendorPart
vendorPart) {
this.order = order;this.itemId = order.getNextId();this.orderId = order.getOrderId();this.quantity = quantity;this.vendorPart = vendorPart;
}
Order.getNextId countsthenumberofcurrentlineitems,adds1,andreturnsthatnumber:
public int getNextId() {
return this.lineItems.size() + 1;
}
Partdoesn’trequirethe @Columnannotationonthetwofieldsthatcomprise Part’scompound
primarykey,because Part’scompoundprimarykeyisnotanoverlappingprimarykey/foreign
key:
@IdClass(order.entity.PartKey.class)
@Entity...public class Part {...
@Idpublic String getPartNumber() {
return partNumber;
}
...
@Idpublic int getRevision() {
return revision;
}TheorderApplication
Chapter33 • RunningthePersistenceExamples 609
...
}
EntityMappedtoMoreThanOneDatabaseTable
Part’sfieldsmaptomorethanonedatabasetable: PERSISTENCE_ORDER_PART and
PERSISTENCE_ORDER_PART_DETAIL .The PERSISTENCE_ORDER_PART_DETAIL tableholdsthe
specificationandschematicsforthepart.The @SecondaryTable annotationisusedtospecify
thesecondarytable.
...
@Entity@Table(name= "PERSISTENCE_ORDER_PART ")
@SecondaryTable(name= "PERSISTENCE_ORDER_PART_DETAIL ", pkJoinColumns={
@PrimaryKeyJoinColumn(name= "PARTNUMBER ",
referencedColumnName= "PARTNUMBER "),
@PrimaryKeyJoinColumn(name= "REVISION ",
referencedColumnName= "REVISION ")
})public class Part {...}
PERSISTENCE_ORDER_PART_DETAIL andPERSISTENCE_ORDER_PART sharethesameprimarykey
values.The pkJoinColumns elementof @SecondaryTable isusedtospecifythat
PERSISTENCE_ORDER_PART_DETAIL ’sprimarykeycolumnsareforeignkeysto
PERSISTENCE_ORDER_PART .The @PrimaryKeyJoinColumn annotationsetstheprimarykey
columnnamesandspecifieswhichcolumnintheprimarytablethecolumnrefersto.Inthis
case,theprimarykeycolumnnamesforboth PERSISTENCE_ORDER_PART_DETAIL and
PERSISTENCE_ORDER_PART arethesame: PARTNUMBER andREVISION ,respectively.
CascadeOperationsintheorderApplication
Entitiesthathaverelationshipstootherentitiesoftenhavedependenciesontheexistenceofthe
otherentityintherelationship.Forexample,alineitemispartofanorder;iftheorderisdeleted,thenthelineitemalsoshouldbedeleted.Thisiscalledacascadedeleterelationship.
Inorder,therearetwocascadedeletedependenciesintheentityrelationships.Ifthe Orderto
whicha LineItem isrelatedisdeleted,the LineItem alsoshouldbedeleted.Ifthe Vendorto
whicha VendorPart isrelatedisdeleted,the VendorPart alsoshouldbedeleted.
Youspecifythecascadeoperationsforentityrelationshipsbysettingthe cascadeelementinthe
inverse(nonowning)sideoftherelationship.Thecascadeelementissetto ALLinthecaseof
Order.lineItems .Thismeansthatallpersistenceoperations(deletes,updates,andsoon)are
cascadedfromorderstolineitems.
Hereistherelationshipmappingin Order:TheorderApplication
TheJavaEE6Tutorial • January2013 610
@OneToMany(cascade=ALL, mappedBy= "order ")
public Collection<LineItem> getLineItems() {
return lineItems;
}
Hereistherelationshipmappingin LineItem :
@ManyToOne
public Order getOrder() {return order;
}
BLOBandCLOBDatabaseTypesintheorder
Application
ThePARTDETAIL tableinthedatabasehasacolumn, DRAWING,oftype BLOB.BLOBstandsfor
binarylargeobjects,whichareusedforstoringbinarydata,suchasanimage.The DRAWING
columnismappedtothefield Part.drawingoftype java.io.Serializable .The @Lob
annotationisusedtodenotethatthefieldislargeobject.
@Column(table= "PERSISTENCE_ORDER_PART_DETAIL ")
@Lobpublic Serializable getDrawing() {
return drawing;
}
PERSISTENCE_ORDER_PART_DETAIL alsohasacolumn, SPECIFICATION ,oftype CLOB.CLOB
standsforcharacterlargeobjects,whichareusedtostorestringdatatoolargetobestoredinaVARCHARcolumn. SPECIFICATION ismappedtothefield Part.specification oftype
java.lang.String .The @Lobannotationisalsousedheretodenotethatthefieldisalarge
object.
@Column(table= "PERSISTENCE_ORDER_PART_DETAIL ")
@Lobpublic String getSpecification() {
return specification;
}
Bothofthesefieldsusethe @Columnannotationandsetthe tableelementtothesecondary
table.TheorderApplication
Chapter33 • RunningthePersistenceExamples 611
TemporalTypesintheorderApplication
TheOrder.lastUpdate persistentproperty,whichisoftype java.util.Date ,ismappedtothe
PERSISTENCE_ORDER_ORDER.LASTUPDATE databasefield,whichisoftheSQLtype TIMESTAMP .
Toensurethepropermappingbetweenthesetypes,youmustusethe @Temporal annotation
withthepropertemporaltypespecifiedin @Temporal ’selement. @Temporal ’selementsareof
type javax.persistence.TemporalType .Thepossiblevaluesare
■DATE,whichmapsto java.sql.Date
■TIME,whichmapsto java.sql.Time
■TIMESTAMP ,whichmapsto java.sql.Timestamp
Hereistherelevantsectionof Order:
@Temporal(TIMESTAMP)
public Date getLastUpdate() {
return lastUpdate;
}
ManagingtheorderApplication’sEntities
TheRequestBean statefulsessionbeancontainsthebusinesslogicandmanagestheentitiesof
order.RequestBean usesthe @PersistenceContext annotationtoretrieveanentitymanager
instance,whichisusedtomanage order’sentitiesin RequestBean ’sbusinessmethods:
@PersistenceContext
private EntityManager em;
This EntityManager instanceisacontainer-managedentitymanager,sothecontainertakes
careofallthetransactionsinvolvedinthemanaging order’sentities.
CreatingEntities
TheRequestBean.createPart businessmethodcreatesanew Partentity.The
EntityManager.persist methodisusedtopersistthenewlycreatedentitytothedatabase.
Part part = new Part(partNumber,
revision,description,
revisionDate,specification,drawing);
em.persist(part);
TheConfigBean singletonsessionbeanisusedtoinitializethedatain order.ConfigBean is
annotatedwith @Startup ,whichindicatesthattheEJBcontainershouldcreate ConfigBean
when orderisdeployed.The createData methodisannotatedwith @PostConstruct and
createstheinitialentitiesusedby orderbycalling RequestBean ’sbusinessmethods.TheorderApplication
TheJavaEE6Tutorial • January2013 612
FindingEntities
TheRequestBean.getOrderPrice businessmethodreturnsthepriceofagivenorder,basedon
theorderId.The EntityManager.find methodisusedtoretrievetheentityfromthedatabase.
Order order = em.find(Order.class, orderId);
Thefirstargumentof EntityManager.find istheentityclass,andthesecondistheprimary
key.
SettingEntityRelationships
TheRequestBean.createVendorPart businessmethodcreatesa VendorPart associatedwitha
particular Vendor.The EntityManager.persist methodisusedtopersistthenewlycreated
VendorPart entitytothedatabase,andthe VendorPart.setVendor and
Vendor.setVendorPart methodsareusedtoassociatethe VendorPart withthe Vendor.
PartKey pkey = new PartKey();
pkey.partNumber = partNumber;pkey.revision = revision;
Part part = em.find(Part.class, pkey);
VendorPart vendorPart = new VendorPart(description, price,
part);
em.persist(vendorPart);
Vendor vendor = em.find(Vendor.class, vendorId);
vendor.addVendorPart(vendorPart);vendorPart.setVendor(vendor);
UsingQueries
TheRequestBean.adjustOrderDiscount businessmethodupdatesthediscountappliedtoall
orders.Thismethodusesthe findAllOrders namedquery,definedin Order:
@NamedQuery(
name= "findAllOrders ",
query= "SELECT o FROM Order o "
)
TheEntityManager.createNamedQuery methodisusedtorunthequery.Becausethequery
returnsa Listofalltheorders,the Query.getResultList methodisused.
List orders = em.createNamedQuery(
"findAllOrders ")
.getResultList();
TheRequestBean.getTotalPricePerVendor businessmethodreturnsthetotalpriceofallthe
partsforaparticularvendor.Thismethodusesanamedparameter, id,definedinthenamed
query findTotalVendorPartPricePerVendor definedin VendorPart .TheorderApplication
Chapter33 • RunningthePersistenceExamples 613
@NamedQuery(
name= "findTotalVendorPartPricePerVendor ",
query= "SELECT SUM(vp.price) "+
"FROM VendorPart vp "+
"WHERE vp.vendor.vendorId = :id "
)
Whenrunningthequery,the Query.setParameter methodisusedtosetthenamedparameter
idtothevalueof vendorId ,theparameterto RequestBean.getTotalPricePerVendor :
return (Double) em.createNamedQuery(
"findTotalVendorPartPricePerVendor ")
.setParameter( "id", vendorId)
.getSingleResult();
TheQuery.getSingleResult methodisusedforthisquerybecausethequeryreturnsasingle
value.
RemovingEntities
TheRequestBean.removeOrder businessmethoddeletesagivenorderfromthedatabase.This
methodusesthe EntityManager.remove methodtodeletetheentityfromthedatabase.
Order order = em.find(Order.class, orderId);
em.remove(order);
RunningtheorderExample
YoucanuseeitherNetBeansIDEorAnttobuild,package,deploy,andrunthe order
application.First,youwillcreatethedatabasetablesintheJavaDBserver.
▼ToRuntheorderExampleUsingNetBeansIDE
FromtheFilemenu,chooseOpenProject.
IntheOpenProjectdialog,navigateto:
tut-install /examples/persistence/
Selectthe orderfolder.
SelecttheOpenasMainProjectcheckbox.ClickOpenProject.IntheProjectstab,right-clickthe orderprojectandselectRun.
NetBeansIDEopensawebbrowserto http://localhost:8080/order/ .1
2
3
456TheorderApplication
TheJavaEE6Tutorial • January2013 614
▼ToRuntheorderExampleUsingAnt
Inaterminalwindow,goto:
tut-install /examples/persistence/order/
Typethefollowingcommand:
ant
Thisrunsthe defaulttask,whichcompilesthesourcefilesandpackagestheapplicationintoa
WARfilelocatedat tut-install /examples/persistence/order/dist/order.war .
TodeploytheWAR,makesurethattheGlassFishServerisstarted,thentypethefollowing
command:
ant deploy
Openawebbrowserto http://localhost:8080/order/ tocreateandupdatetheorderdata.
TheallTask
Asaconvenience,the alltaskwillbuild,package,deploy,andruntheapplication.Todothis,
typethefollowingcommand:
ant all
TherosterApplication
Therosterapplicationmaintainstheteamrostersforplayersinrecreationalsportsleagues.
Theapplicationhasfourcomponents:JavaPersistenceAPIentities( Player,Team,and League),
astatefulsessionbean( RequestBean ),anapplicationclient( RosterClient ),andthreehelper
classes( PlayerDetails ,TeamDetails ,and LeagueDetails ).
Functionally, rosterissimilartothe orderapplication,withthreenewfeaturesthat order
doesnothave:many-to-manyrelationships,entityinheritance,andautomatictablecreationatdeploymenttime.
ThedatabaseschemaintheunderlyingJavaDBdatabasefor rosterisshownin
Figure33–2 .1
2
3
4TherosterApplication
Chapter33 • RunningthePersistenceExamples 615
Note–Inthisdiagram,forsimplicity,the PERSISTENCE_ROSTER_ prefixisomittedfromthetable
names.
RelationshipsintherosterApplication
Arecreationalsportssystemhasthefollowingrelationships:
■Aplayercanbeonmanyteams.
■Ateamcanhavemanyplayers.
■Ateamisinexactlyoneleague.
■Aleaguehasmanyteams.
Inrosterthissystemisreflectedbythefollowingrelationshipsbetweenthe Player,Team,and
Leagueentities.
■Thereisamany-to-manyrelationshipbetween PlayerandTeam.
■Thereisamany-to-onerelationshipbetween TeamandLeague.FIGURE33–2 DatabaseSchemafortherosterApplication
 PLAYER_ID  
 TEAM_ID    
TEAM_PLAYER
 ID   NAME     POSITION     SALARY  
PLAYER
 ID     CITY   NAME  LEAGUE_ID
TEAM
VARCHAR(255)
VARCHAR(255)VARCHAR(255)VARCHAR(255)VARCHAR(255)
VARCHAR(255)VARCHAR(255)
DOUBLE(52,0)VARCHAR(255)
VARCHAR(255)
PRIMARY key
Foreign keyField
 ID   
 DTYPE  NAME   SPORT 
LEAGUE
VARCHAR(255)
VARCHAR(31)
VARCHAR(255)VARCHAR(255)
TherosterApplication
TheJavaEE6Tutorial • January2013 616
TheMany-To-ManyRelationshipinroster
Themany-to-manyrelationshipbetween PlayerandTeamisspecifiedbyusingthe
@ManyToMany annotation.In Team.java ,the @ManyToMany annotationdecoratesthe
getPlayers method:
@ManyToMany
@JoinTable(
name= "EJB_ROSTER_TEAM_PLAYER ",
joinColumns=
@JoinColumn(name= "TEAM_ID ", referencedColumnName= "ID"),
inverseJoinColumns=
@JoinColumn(name= "PLAYER_ID ", referencedColumnName= "ID")
)public Collection<Player> getPlayers() {
return players;
}
The@JoinTable annotationisusedtospecifyadatabasetablethatwillassociateplayerIDswith
teamIDs.Theentitythatspecifiesthe @JoinTable istheowneroftherelationship,sothe Team
entityistheowneroftherelationshipwiththe Playerentity.Because rosterusesautomatic
tablecreationatdeploymenttime,thecontainerwillcreateajointablenamedEJB_ROSTER_TEAM_PLAYER .
Playeristheinverse,ornonowning,sideoftherelationshipwith Team.Asone-to-oneand
many-to-onerelationships,thenonowningsideismarkedbythe mappedBy elementinthe
relationshipannotation.Becausetherelationshipbetween PlayerandTeamisbidirectional,the
choiceofwhichentityistheowneroftherelationshipisarbitrary.
InPlayer.java ,the @ManyToMany annotationdecoratesthe getTeams method:
@ManyToMany(mappedBy= "players ")
public Collection<Team> getTeams() {
return teams;
}
EntityInheritanceintherosterApplication
Therosterapplicationshowshowtouseentityinheritance,asdescribedin “Entity
Inheritance”onpage591 .
TheLeagueentityin rosterisanabstractentitywithtwoconcretesubclasses: SummerLeague
andWinterLeague .Because Leagueisanabstractclass,itcannotbeinstantiated:
...
@Entity@Table(name = "EJB_ROSTER_LEAGUE ")
public abstract class League implements java.io.Serializable {...}TherosterApplication
Chapter33 • RunningthePersistenceExamples 617
Instead,whencreatingaleague,clientsuse SummerLeague orWinterLeague .SummerLeague and
WinterLeague inheritthepersistentpropertiesdefinedin Leagueandaddonlyaconstructor
thatverifiesthatthesportparametermatchesthetypeofsportallowedinthatseasonalleague.Forexample,hereisthe SummerLeague entity:
...
@Entitypublic class SummerLeague extends League
implements java.io.Serializable {
/** Creates a new instance of SummerLeague */
public SummerLeague() {}
public SummerLeague(String id, String name,
String sport) throws IncorrectSportException {
this.id = id;this.name = name;if (sport.equalsIgnoreCase( "swimming ")| |
sport.equalsIgnoreCase( "soccer ")| |
sport.equalsIgnoreCase( "basketball ")| |
sport.equalsIgnoreCase( "baseball ")) {
this.sport = sport;
} else {
throw new IncorrectSportException(
"Sport is not a summer sport. ");
}
}
}
Therosterapplicationusesthedefaultmappingstrategyof InheritanceType.SINGLE_TABLE ,
sothe @Inheritance annotationisnotrequired.Ifyouwanttouseadifferentmappingstrategy,
decorate Leaguewith @Inheritance andspecifythemappingstrategyinthe strategy element:
@Entity
@Inheritance(strategy=JOINED)
@Table(name= "EJB_ROSTER_LEAGUE ")
public abstract class League implements java.io.Serializable {
...
}
Therosterapplicationusesthedefaultdiscriminatorcolumnname,sothe
@DiscriminatorColumn annotationisnotrequired.Becauseyouareusingautomatictable
generationin roster,thePersistenceproviderwillcreateadiscriminatorcolumncalled DTYPE
inthe EJB_ROSTER_LEAGUE table,whichwillstorethenameoftheinheritedentityusedtocreate
theleague.Ifyouwanttouseadifferentnameforthediscriminatorcolumn,decorate League
with @DiscriminatorColumn andsetthe nameelement:
@Entity
@DiscriminatorColumn(name= "DISCRIMINATOR ")
@Table(name= "EJB_ROSTER_LEAGUE ")
public abstract class League implements java.io.Serializable {
...
}TherosterApplication
TheJavaEE6Tutorial • January2013 618
CriteriaQueriesintherosterApplication
TherosterapplicationusesCriteriaAPIqueries,asopposedtotheJPQLqueriesusedin
order.CriteriaqueriesareJavaprogramminglanguage,typesafequeriesdefinedinthebusiness
tierof roster,inthe RequestBean statefulsessionbean.
MetamodelClassesintherosterApplication
Metamodelclassesmodelanentity’sattributesandareusedbyCriteriaqueriestonavigatetoan
entity’sattributes.Eachentityclassin rosterhasacorrespondingmetamodelclass,generated
atcompiletime,withthesamepackagenameastheentityandappendedwithanunderscorecharacter(_).Forexample,the roster.entity.Player entityhasacorrespondingmetamodel
class, roster.entity.Player_ .
Eachpersistentfieldorpropertyintheentityclasshasacorrespondingattributeintheentity’s
metamodelclass.Forthe Playerentity,thecorrespondingmetamodelclassis:
@StaticMetamodel(Player.class)
public class Player_ {
public static volatile SingularAttribute<Player, String> id;public static volatile SingularAttribute<Player, String> name;public static volatile SingularAttribute<Player, String> position;public static volatile SingularAttribute<Player, Double> salary;public static volatile CollectionAttribute<Player, Team> teams;
}
Obtaininga CriteriaBuilder Instancein RequestBean
TheCrtiteriaBuilder interfacedefinesmethodstocreatecriteriaqueryobjectsandcreate
expressionsformodifyingthosequeryobjects. RequestBean createsaninstanceof
CriteriaBuilder byusinga @PostConstruct method, init:
@PersistenceContext
private EntityManager em;private CriteriaBuilder cb;
@PostConstruct
private void init() {
cb = em.getCriteriaBuilder();
}
TheEntityManager instanceisinjectedatruntime,andthenthat EntityManager objectisused
tocreatethe CriteriaBuilder instancebycalling getCriteriaBuilder .The
CriteriaBuilder instanceiscreatedina @PostConstruct methodtoensurethatthe
EntityManager instancehasbeeninjectedbytheenterprisebeancontainer.
CreatingCriteriaQueriesin RequestBean ’sBusinessMethods
Manyofthebusinessmethodsin RequestBean defineCriteriaqueries.Onebusinessmethod,
getPlayersByPosition ,returnsalistofplayerswhoplayaparticularpositiononateam:TherosterApplication
Chapter33 • RunningthePersistenceExamples 619
public List<PlayerDetails> getPlayersByPosition(String position) {
logger.info( "getPlayersByPosition ");
List<Player> players = null;
try {
CriteriaQuery<Player> cq = cb.createQuery(Player.class);if (cq != null) {
Root<Player> player = cq.from(Player.class);
// set the where clause
cq.where(cb.equal(player.get(Player_.position), position));cq.select(player);TypedQuery<Player > q = em.createQuery(cq);
players = q.getResultList();
}
return copyPlayersToDetails(players);
} catch (Exception ex) {
throw new EJBException(ex);
}
}
Aqueryobjectiscreatedbycallingthe CriteriaBuilder object’s createQuery method,with
thetypesetto Playerbecausethequerywillreturnalistofplayers.
Thequeryroot ,thebaseentityfromwhichthequerywillnavigatetofindtheentity’sattributes
andrelatedentities,iscreatedbycallingthe frommethodofthequeryobject.Thissetsthe
FROMclauseofthequery.
TheWHEREclause,setbycallingthe wheremethodonthequeryobject,restrictstheresultsof
thequeryaccordingtotheconditionsofanexpression.The CriteriaBuilder.equal method
comparesthetwoexpressions.In getPlayersByPosition ,the position attributeofthe
Player_metamodelclass,accessedbycallingthe getmethodofthequeryroot,iscomparedto
theposition parameterpassedto getPlayersByPosition .
TheSELECTclauseofthequeryissetbycallingthe selectmethodofthequeryobject.The
querywillreturn Playerentities,sothequeryrootobjectispassedasaparameterto select.
Thequeryobjectispreparedforexecutionbycalling EntityManager.createQuery ,which
returnsa TypedQuery<T> objectwiththetypeofthequery,inthiscase Player.Thistypedquery
objectisusedtoexecutethequery,whichoccurswhenthe getResultList methodiscalled,
anda List<Player> collectionisreturned.
AutomaticTableGenerationintherosterApplication
Atdeploymenttime,theGlassFishServerwillautomaticallydropandcreatethedatabasetables
usedby roster.Thisisdonebysettingthe eclipselink.ddl-generation propertyto
drop-and-create-tables inpersistence.xml :
<?xml version= "1.0"encoding= "UTF-8 "?>
<persistence version= "2.0"
xmlns= "http://java.sun.com/xml/ns/persistence "TherosterApplication
TheJavaEE6Tutorial • January2013 620
xmlns:xsi= "http://www.w3.org/2001/XMLSchema-instance "
xsi:schemaLocation= "http://java.sun.com/xml/ns/persistence
http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd ">
<persistence-unit name= "em"transaction-type= "JTA">
<jta-data-source>jdbc/__default</jta-data-source><properties>
<property name= "eclipselink.ddl-generation "
value= "drop-and-create-tables "/>
</properties>
</persistence-unit>
</persistence>
ThisfeatureisspecifictotheJavaPersistenceAPIproviderusedbytheGlassFishServerandis
notportableacrossJavaEEservers.Automatictablecreationisusefulfordevelopmentpurposes,however,andthe eclipselink.ddl-generation propertymayberemovedfrom
persistence.xml whenpreparingtheapplicationforproductionuse,whendeployingtoother
JavaEEservers,orwhenusingotherpersistenceproviders.
RunningtherosterExample
YoucanuseeitherNetBeansIDEorAnttobuild,package,deploy,andrunthe roster
application.
▼ToRuntherosterExampleUsingNetBeansIDE
FromtheFilemenu,chooseOpenProject.
IntheOpenProjectdialog,navigateto:
tut-install /examples/persistence/
Selectthe rosterfolder.
SelecttheOpenasMainProjectandOpenRequiredProjectscheckboxes.ClickOpenProject.IntheProjectstab,right-clickthe rosterprojectandselectRun.
YouwillseethefollowingpartialoutputfromtheapplicationclientintheOutputtab:
List all players in team T2:
P6 Ian Carlyle goalkeeper 555.0P7 Rebecca Struthers midfielder 777.0P8 Anne Anderson forward 65.0P9 Jan Wesley defender 100.0P10 Terry Smithson midfielder 100.0
List all teams in league L1:
T1 Honey Bees Visalia1
2
3
456TherosterApplication
Chapter33 • RunningthePersistenceExamples 621
T2 Gophers Manteca
T5 Crows Orland
List all defenders:
P2 Alice Smith defender 505.0P5 Barney Bold defender 100.0P9 Jan Wesley defender 100.0P22 Janice Walker defender 857.0P25 Frank Fletcher defender 399.0...
▼ToRuntherosterExampleUsingAnt
Inaterminalwindow,goto:
tut-install /examples/persistence/roster/
Typethefollowingcommand:
ant
Thisrunsthe defaulttask,whichcompilesthesourcefilesandpackagestheapplicationintoan
EARfilelocatedat tut-install /examples/persistence/roster/dist/roster.ear .
TodeploytheEAR,makesurethattheGlassFishServerisstarted;thentypethefollowing
command:
ant deploy
ThebuildsystemwillcheckwhethertheJavaDBdatabaseserverisrunningandstartitifitis
notrunning,thendeploy roster.ear .TheGlassFishServerwillthendropandcreatethe
databasetablesduringdeployment,asspecifiedin persistence.xml .
After roster.ear isdeployed,aclientJAR, rosterClient.jar ,isretrieved.Thiscontainsthe
applicationclient.
Toruntheapplicationclient,typethefollowingcommand:
ant run
Youwillseetheoutput,whichbegins:
[echo] running application client container.
[exec] List all players in team T2:[exec] P6 Ian Carlyle goalkeeper 555.0[exec] P7 Rebecca Struthers midfielder 777.0[exec] P8 Anne Anderson forward 65.0[exec] P9 Jan Wesley defender 100.0[exec] P10 Terry Smithson midfielder 100.0
[exec] List all teams in league L1:
[exec] T1 Honey Bees Visalia[exec] T2 Gophers Manteca[exec] T5 Crows Orland1
2
3
4TherosterApplication
TheJavaEE6Tutorial • January2013 622
[exec] List all defenders:
[exec] P2 Alice Smith defender 505.0[exec] P5 Barney Bold defender 100.0[exec] P9 Jan Wesley defender 100.0
[exec] P22 Janice Walker defender 857.0[exec] P25 Frank Fletcher defender 399.0...
TheallTask
Asaconvenience,the alltaskwillbuild,package,deploy,andruntheapplication.Todothis,
typethefollowingcommand:
ant all
Theaddress-bookApplication
Theaddress-book exampleapplicationisasimplewebapplicationthatstorescontactdata.It
usesasingleentityclass, Contact,thatusestheJavaAPIforJavaBeansValidation(Bean
Validation)tovalidatethedatastoredinthepersistentattributesoftheentity,asdescribedin
“ValidatingPersistentFieldsandProperties”onpage583 .
BeanValidationConstraintsinaddress-book
TheContactentityusesthe @NotNull ,@Pattern ,and @Pastconstraintsonthepersistent
attributes.
The@NotNull constraintmarkstheattributeasarequiredfield.Theattributemustbesettoa
non-nullvaluebeforetheentitycanbepersistedormodified.BeanValidationwillthrowavalidationerroriftheattributeisnullwhentheentityispersistedormodified.
The@Pattern constraintdefinesaregularexpressionthatthevalueoftheattributemustmatch
beforetheentitycanbepersistedormodified.Thisconstrainthastwodifferentusesinaddress-book .
■Theregularexpressiondeclaredinthe @Pattern annotationonthe emailfieldmatches
emailaddressesoftheform name @domainname .topleveldomain ,allowingonlyvalid
charactersforemailaddresses.Forexample, username@example.com willpassvalidation,as
willfirstname.lastname@mail.example.com .However,
firstname,lastname@example.com ,whichcontainsanillegalcommacharacterinthelocal
name,willfailvalidation.
■ThemobilePhone andhomePhone fieldsareannotatedwitha @Pattern constraintthat
definesaregularexpressiontomatchphonenumbersoftheform (xxx)xxx–xxxx.
The@Pastconstraintisappliedtothebirthdayfield,whichmustbea java.util.Date inthe
past.Theaddress-bookApplication
Chapter33 • RunningthePersistenceExamples 623
Herearetherelevantpartsofthe Contactentityclass:
@Entity
public class Contact implements Serializable {
private static final long serialVersionUID = 1L;@Id@GeneratedValue(strategy = GenerationType.AUTO)private Long id;@NotNullprotected String firstName;@NotNullprotected String lastName;
@Pattern(regexp= "[a-z0-9!#$%&’*+/=?^_ ‘{|}~-]+(?:\\. "
+"[a-z0-9!#$%&’*+/=?^_ ‘{|}~-]+)* "
+"@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])? ",
message= "{invalid.email} ")
protected String email;@Pattern(regexp= "^\\(?(\\d{3})\\)?[- ]?(\\d{3})[- ]?(\\d{4})$ ",
message= "{invalid.phonenumber} ")
protected String mobilePhone;@Pattern(regexp= "^\\(?(\\d{3})\\)?[- ]?(\\d{3})[- ]?(\\d{4})$ ",
message= "{invalid.phonenumber} ")
protected String homePhone;@Temporal(javax.persistence.TemporalType.DATE)@Pastprotected Date birthday;...
}
SpecifyingErrorMessagesforConstraintsin
address-book
Someoftheconstraintsinthe Contactentityspecifyanoptionalmessage:
@Pattern(regexp= "^\\(?(\\d{3})\\)?[- ]?(\\d{3})[- ]?(\\d{4})$ ",
message= "{invalid.phonenumber} ")
protected String homePhone;
Theoptionalmessageelementinthe @Pattern constraintoverridesthedefaultvalidation
message.Themessagecanbespecifieddirectly:
@Pattern(regexp= "^\\(?(\\d{3})\\)?[- ]?(\\d{3})[- ]?(\\d{4})$ ",
message= "Invalid phone number! ")
protected String homePhone;
Theconstraintsin Contact,however,arestringsintheresourcebundle
tut-install /examples/persistence/address-book/src/java/
ValidationMessages.properties .Thisallowsthevalidationmessagestobelocatedinone
singlepropertiesfileandthemessagestobeeasilylocalized.OverriddenBeanValidationmessagesmustbeplacedinaresourcebundlepropertiesfilenamedValidationMessages.properties inthedefaultpackage,withlocalizedresourcebundlesTheaddress-bookApplication
TheJavaEE6Tutorial • January2013 624
takingtheform ValidationMessages_ locale-prefix .properties .Forexample,
ValidationMessages_es.properties istheresourcebundleusedinSpanishspeakinglocales.
Validating ContactInputfromaJavaServerFaces
Application
Theaddress-book applicationusesaJavaServerFaceswebfrontendtoallowuserstoenter
contacts.WhileJavaServerFaceshasaforminputvalidationmechanismusingtagsinFaceletsXHTMLfiles, address-book doesn’tusethesevalidationtags.BeanValidationconstraintsin
JavaServerFacesmanagedbeans,inthiscaseinthe Contactentity,automaticallytrigger
validationwhentheformsaresubmitted.
Thefollowingcodesnippetfromthe Create.xhtml Faceletsfileshowssomeoftheinputform
forcreatingnew Contactinstances:
<h:form>
<table columns= "3"role= "presentation ">
<tr>
<td><h:outputLabel value= "#{bundle.CreateContactLabel_firstName} "
for="firstName "/></td>
<td><h:inputText id= "firstName "
value= "#{contactController.selected.firstName} "
title= "#{bundle.CreateContactTitle_firstName} "/></td>
<td><h:message for= "firstName "/></td>
</tr><tr>
<td><h:outputLabel value= "#{bundle.CreateContactLabel_lastName} "
for="lastName "/></td>
<td><h:inputText id= "lastName "
value= "#{contactController.selected.lastName} "
title= "#{bundle.CreateContactTitle_lastName} "/></td>
<td><h:message for= "lastName "/></td>
</tr>...
</table>
</h:form>
The<h:inputText> tagsfirstName andlastName areboundtotheattributesinthe Contact
entityinstance selected inthe ContactController statelesssessionbean.Each
<h:inputText> taghasanassociated <h:message> tagthatwilldisplayvalidationerror
messages.Theformdoesn’trequireanyJavaServerFacesvalidationtags,however.
Runningtheaddress-bookExample
YoucanuseeitherNetBeansIDEorAnttobuild,package,deploy,andrunthe address-book
application.Theaddress-bookApplication
Chapter33 • RunningthePersistenceExamples 625
▼ToRuntheaddress-bookExampleUsingNetBeansIDE
FromtheFilemenu,chooseOpenProject.
IntheOpenProjectdialog,navigateto:
tut-install /examples/persistence/
Selectthe address-book folder.
SelecttheOpenasMainProjectandOpenRequiredProjectscheckboxes.ClickOpenProject.IntheProjectstab,right-clickthe address-book projectandselectRun.
Aftertheapplicationhasbeendeployed,awebbrowserwindowappearsatthefollowingURL:
http://localhost:8080/address-book/
ClickShowAllContactItems,thenCreateNewContact.Typevaluesintheformfields;thenclick
Save.
Ifanyofthevaluesenteredviolatetheconstraintsin Contact,anerrormessagewillappearin
redbesidetheformfieldwiththeincorrectvalues.
▼ToRuntheaddress-bookExampleUsingAnt
Inaterminalwindow,goto:
tut-install /examples/persistence/address-book/
Typethefollowingcommand:
ant
Thiswillcompileandassemblethe address-book application.
Typethefollowingcommand:
ant deploy
ThiswilldeploytheapplicationtoGlassFishServer.OpenawebbrowserwindowandtypethefollowingURL:
http://localhost:8080/address-book/1
2
3
456
7
1
2
34Theaddress-bookApplication
TheJavaEE6Tutorial • January2013 626
Tip–Asaconvenience,the alltaskwillbuild,package,deploy,andruntheapplication.Todo
this,typethefollowingcommand:
ant all
ClickShowAllContactItems,thenCreateNewContact.Typevaluesintheformfields;thenclickSave.
Ifanyofthevaluesenteredviolatetheconstraintsin Contact,anerrormessagewillappearin
redbesidetheformfieldwiththeincorrectvalues.5Theaddress-bookApplication
Chapter33 • RunningthePersistenceExamples 627
628
TheJavaPersistenceQueryLanguage
TheJavaPersistencequerylanguagedefinesqueriesforentitiesandtheirpersistentstate.The
querylanguageallowsyoutowriteportablequeriesthatworkregardlessoftheunderlyingdatastore.
Thequerylanguageusestheabstractpersistenceschemasofentities,includingtheir
relationships,foritsdatamodelanddefinesoperatorsandexpressionsbasedonthisdatamodel.Thescopeofaqueryspanstheabstractschemasofrelatedentitiesthatarepackagedinthesamepersistenceunit.ThequerylanguageusesanSQL-likesyntaxtoselectobjectsorvaluesbasedonentityabstractschematypesandrelationshipsamongthem.
Thischapterreliesonthematerialpresentedinearlierchapters.Forconceptualinformation,
see
Chapter32,“IntroductiontotheJavaPersistenceAPI.” Forcodeexamples,see Chapter33,
“RunningthePersistenceExamples.”
Thefollowingtopicsareaddressedhere:
■“QueryLanguageTerminology”onpage630
■“CreatingQueriesUsingtheJavaPersistenceQueryLanguage”onpage630
■“SimplifiedQueryLanguageSyntax”onpage632
■“ExampleQueries”onpage633
■“FullQueryLanguageSyntax”onpage63734CHAPTER 34
629
QueryLanguageTerminology
Thefollowinglistdefinessomeofthetermsreferredtointhischapter:
■Abstractschema :Thepersistentschemaabstraction(persistententities,theirstate,and
theirrelationships)overwhichqueriesoperate.Thequerylanguagetranslatesqueriesoverthispersistentschemaabstractionintoqueriesthatareexecutedoverthedatabaseschematowhichentitiesaremapped.
■Abstractschematype :Thetypetowhichthepersistentpropertyofanentityevaluatesin
theabstractschema.Thatis,eachpersistentfieldorpropertyinanentityhasacorrespondingstatefieldofthesametypeintheabstractschema.TheabstractschematypeofanentityisderivedfromtheentityclassandthemetadatainformationprovidedbyJavalanguageannotations.
■Backus-NaurForm(BNF) :Anotationthatdescribesthesyntaxofhigh-levellanguages.
ThesyntaxdiagramsinthischapterareinBNFnotation.
■Navigation :Thetraversalofrelationshipsinaquerylanguageexpression.Thenavigation
operatorisaperiod.
■Pathexpression :Anexpressionthatnavigatestoaentity’sstateorrelationshipfield.
■Statefield :Apersistentfieldofanentity.
■Relationshipfield :Apersistentfieldofanentitywhosetypeistheabstractschematypeof
therelatedentity.
CreatingQueriesUsingtheJavaPersistenceQueryLanguage
TheEntityManager.createQuery andEntityManager.createNamedQuery methodsareused
toquerythedatastorebyusingJavaPersistencequerylanguagequeries.
ThecreateQuery methodisusedtocreate dynamicqueries ,whicharequeriesdefineddirectly
withinanapplication’sbusinesslogic:
public List findWithName(String name) {
return em.createQuery(
"SELECT c FROM Customer c WHERE c.name LIKE :custName ")
.setParameter( "custName ", name)
.setMaxResults(10).getResultList();
}
ThecreateNamedQuery methodisusedtocreate staticqueries ,orqueriesthataredefinedin
metadatabyusingthe javax.persistence.NamedQuery annotation.The nameelementof
@NamedQuery specifiesthenameofthequerythatwillbeusedwiththe createNamedQuery
method.The queryelementof @NamedQuery isthequery:
@NamedQuery(
name= "findAllCustomersWithName ",QueryLanguageTerminology
TheJavaEE6Tutorial • January2013 630
query= "SELECT c FROM Customer c WHERE c.name LIKE :custName "
)
Here’sanexampleof createNamedQuery ,whichusesthe @NamedQuery :
@PersistenceContext
public EntityManager em;...customers = em.createNamedQuery( "findAllCustomersWithName ")
.setParameter( "custName ","Smith ")
.getResultList();
NamedParametersinQueries
Namedparametersarequeryparametersthatareprefixedwithacolon( :).Namedparameters
inaqueryareboundtoanargumentbythefollowingmethod:
javax.persistence.Query.setParameter(String name, Object value)
Inthefollowingexample,the nameargumenttothe findWithName businessmethodisboundto
the:custName namedparameterinthequerybycalling Query.setParameter :
public List findWithName(String name) {
return em.createQuery(
"SELECT c FROM Customer c WHERE c.name LIKE :custName ")
.setParameter( "custName ", name)
.getResultList();
}
Namedparametersarecase-sensitiveandmaybeusedbybothdynamicandstaticqueries.
PositionalParametersinQueries
Youmayusepositionalparametersinsteadofnamedparametersinqueries.Positional
parametersareprefixedwithaquestionmark( ?)followedthenumericpositionofthe
parameter in the query. The Query.setParameter(integer position, Object value)
methodisusedtosettheparametervalues.
Inthefollowingexample,the findWithName businessmethodisrewrittentouseinput
parameters:
public List findWithName(String name) {
return em.createQuery(
“SELECT c FROM Customer c WHERE c.name LIKE ?1”).setParameter(1, name).getResultList();
}
Inputparametersarenumberedstartingfrom1.Inputparametersarecase-sensitive,andmay
beusedbybothdynamicandstaticqueries.CreatingQueriesUsingtheJavaPersistenceQueryLanguage
Chapter34 • TheJavaPersistenceQueryLanguage 631
SimplifiedQueryLanguageSyntax
Thissectionbrieflydescribesthesyntaxofthequerylanguagesothatyoucanquicklymoveon
to“ExampleQueries”onpage633 .Whenyouarereadytolearnaboutthesyntaxinmoredetail,
see“FullQueryLanguageSyntax”onpage637 .
SelectStatements
Aselectqueryhassixclauses: SELECT,FROM,WHERE,GROUP BY,HAVING,and ORDER BY.The
SELECTandFROMclausesarerequired,butthe WHERE,GROUP BY,HAVING,and ORDER BY clauses
areoptional.Hereisthehigh-levelBNFsyntaxofaquerylanguageselectquery:
QL_statement ::= select_clause from_clause
[where_clause][groupby_clause][having_clause][orderby_clause]
■TheSELECTclausedefinesthetypesoftheobjectsorvaluesreturnedbythequery.
■TheFROMclausedefinesthescopeofthequerybydeclaringoneormoreidentification
variables,whichcanbereferencedinthe SELECTandWHEREclauses.Anidentification
variablerepresentsoneofthefollowingelements:
■Theabstractschemanameofanentity
■Anelementofacollectionrelationship
■Anelementofasingle-valuedrelationship
■Amemberofacollectionthatisthemultiplesideofaone-to-manyrelationship
■TheWHEREclauseisaconditionalexpressionthatrestrictstheobjectsorvaluesretrievedby
thequery.Althoughtheclauseisoptional,mostquerieshavea WHEREclause.
■TheGROUP BY clausegroupsqueryresultsaccordingtoasetofproperties.
■TheHAVINGclauseisusedwiththe GROUP BY clausetofurtherrestrictthequeryresults
accordingtoaconditionalexpression.
■TheORDER BY clausesortstheobjectsorvaluesreturnedbythequeryintoaspecifiedorder.
UpdateandDeleteStatements
Updateanddeletestatementsprovidebulkoperationsoversetsofentities.Thesestatements
havethefollowingsyntax:
update_statement :: = update_clause [where_clause]
delete_statement :: = delete_clause [where_clause]
Theupdateanddeleteclausesdeterminethetypeoftheentitiestobeupdatedordeleted.The
WHEREclausemaybeusedtorestrictthescopeoftheupdateordeleteoperation.SimplifiedQueryLanguageSyntax
TheJavaEE6Tutorial • January2013 632
ExampleQueries
Thefollowingqueriesarefromthe Playerentityofthe rosterapplication,whichis
documentedin “The rosterApplication”onpage615 .
SimpleQueries
Ifyouareunfamiliarwiththequerylanguage,thesesimplequeriesareagoodplacetostart.
ABasicSelectQuery
SELECT p
FROM Player p
■Dataretrieved :Allplayers.
■Description :The FROMclausedeclaresanidentificationvariablenamed p,omittingthe
optionalkeyword AS.Ifthe ASkeywordwereincluded,theclausewouldbewrittenas
follows:
FROM Player AS
p
ThePlayerelementistheabstractschemanameofthe Playerentity.
■Seealso:“IdentificationVariables”onpage643 .
EliminatingDuplicateValues
SELECT DISTINCT
p
FROM Player pWHERE p.position = ?1
■Dataretrieved :Theplayerswiththepositionspecifiedbythequery’sparameter.
■Description :The DISTINCT keywordeliminatesduplicatevalues.
TheWHEREclauserestrictstheplayersretrievedbycheckingtheir position ,apersistentfield
ofthe Playerentity.The ?1elementdenotestheinputparameterofthequery.
■Seealso:“InputParameters”onpage648 and“The DISTINCT Keyword”onpage658 .
UsingNamedParameters
SELECT DISTINCT p
FROM Player pWHERE p.position = :position AND p.name = :name
■Dataretrieved :Theplayershavingthespecifiedpositionsandnames.ExampleQueries
Chapter34 • TheJavaPersistenceQueryLanguage 633
■Description :The position andnameelementsarepersistentfieldsofthe Playerentity.The
WHEREclausecomparesthevaluesofthesefieldswiththenamedparametersofthequery,set
usingthe Query.setNamedParameter method.Thequerylanguagedenotesanamedinput
parameterusingacolon( :)followedbyanidentifier.Thefirstinputparameteris
:position ,thesecondis :name.
QueriesThatNavigatetoRelatedEntities
Inthequerylanguage,anexpressioncantraverse,ornavigate,torelatedentities.These
expressionsaretheprimarydifferencebetweentheJavaPersistencequerylanguageandSQL.Queriesnavigatestorelatedentities,whereasSQLjoinstables.
ASimpleQuerywithRelationships
SELECT DISTINCT p
FROM Player p, IN(p.teams) t
■Dataretrieved :Allplayerswhobelongtoateam.
■Description :The FROMclausedeclarestwoidentificationvariables: pandt.The pvariable
representsthe Playerentity,andthe tvariablerepresentstherelated Teamentity.The
declarationfor treferencesthepreviouslydeclared pvariable.The INkeywordsignifiesthat
teamsisacollectionofrelatedentities.The p.teamsexpressionnavigatesfroma Playerto
itsrelated Team.Theperiodinthe p.teamsexpressionisthenavigationoperator.
Youmayalsousethe JOINstatementtowritethesamequery:
SELECT DISTINCT p
FROM Player p JOIN p.teams t
Thisquerycouldalsoberewrittenas:
SELECT DISTINCT pFROM Player pWHERE p.team IS NOT EMPTY
NavigatingtoSingle-ValuedRelationshipFields
Usethe JOINclausestatementtonavigatetoasingle-valuedrelationshipfield:
SELECT t
FROM Team t JOIN t.league lWHERE l.sport = ’soccer ’OR l.sport = ’football ’
Inthisexample,thequerywillreturnallteamsthatareineithersoccerorfootballleagues.
TraversingRelationshipswithanInputParameter
SELECT DISTINCT p
FROM Player p, IN (p.teams) AS tWHERE t.city = :cityExampleQueries
TheJavaEE6Tutorial • January2013 634
■Dataretrieved :Theplayerswhoseteamsbelongtothespecifiedcity.
■Description :Thisqueryissimilartothepreviousexamplebutaddsaninputparameter.
TheASkeywordinthe FROMclauseisoptional.Inthe WHEREclause,theperiodprecedingthe
persistentvariable cityisadelimiter,notanavigationoperator.Strictlyspeaking,
expressionscannavigatetorelationshipfields(relatedentities)butnottopersistentfields.Toaccessapersistentfield,anexpressionusestheperiodasadelimiter.
Expressionscannotnavigatebeyond(orfurtherqualify)relationshipfieldsthatare
collections.Inthesyntaxofanexpression,acollection-valuedfieldisaterminalsymbol.Becausethe teamsfieldisacollection,the WHEREclausecannotspecify p.teams.city (an
illegalexpression).
■Seealso:“PathExpressions”onpage646 .
TraversingMultipleRelationships
SELECT DISTINCT p
FROM Player p, IN (p.teams) tWHERE t.league = :league
■Dataretrieved :Theplayerswhobelongtothespecifiedleague.
■Description :Theexpressionsinthisquerynavigateovertworelationships.The p.teams
expressionnavigatesthe Player-Teamrelationship,andthe t.league expressionnavigates
theTeam-Leaguerelationship.
Intheotherexamples,theinputparametersare Stringobjects;inthisexample,theparameter
isanobjectwhosetypeisa League.Thistypematchesthe leaguerelationshipfieldinthe
comparisonexpressionofthe WHEREclause.
NavigatingAccordingtoRelatedFields
SELECT DISTINCT p
FROM Player p, IN (p.teams) tWHERE t.league.sport = :sport
■Dataretrieved :Theplayerswhoparticipateinthespecifiedsport.
■Description :The sportpersistentfieldbelongstothe Leagueentity.Toreachthe sport
field,thequerymustfirstnavigatefromthe Playerentityto Team(p.teams)andthenfrom
Teamtothe Leagueentity( t.league ).Becauseitisnotacollection,the leaguerelationship
fieldcanbefollowedbythe sportpersistentfield.
QuerieswithOtherConditionalExpressions
Every WHEREclausemustspecifyaconditionalexpression,ofwhichthereareseveralkinds.In
thepreviousexamples,theconditionalexpressionsarecomparisonexpressionsthattestforequality.Thefollowingexamplesdemonstratesomeoftheotherkindsofconditionalexpressions.Fordescriptionsofallconditionalexpressions,see
“WHEREClause”onpage647 .ExampleQueries
Chapter34 • TheJavaPersistenceQueryLanguage 635
TheLIKEExpression
SELECT p
FROM Player pWHERE p.name LIKE ’Mich% ’
■Dataretrieved :Allplayerswhosenamesbeginwith“Mich.”
■Description :The LIKEexpressionuseswildcardcharacterstosearchforstringsthatmatch
thewildcardpattern.Inthiscase,thequeryusesthe LIKEexpressionandthe %wildcardto
findallplayerswhosenamesbeginwiththestring“Mich.”Forexample,“Michael”and
“Michelle”bothmatchthewildcardpattern.
■Seealso:“LIKEExpressions”onpage650 .
TheISNULLExpression
SELECT t
FROM Team tWHERE t.league IS NULL
■Dataretrieved :Allteamsnotassociatedwithaleague.
■Description :The IS NULLexpressioncanbeusedtocheckwhetherarelationshiphasbeen
setbetweentwoentities.Inthiscase,thequerycheckswhethertheteamsareassociatedwithanyleaguesandreturnstheteamsthatdonothavealeague.
■Seealso:“NULLComparisonExpressions”onpage650 and“NULLValues”onpage655 .
TheISEMPTYExpression
SELECT p
FROM Player pWHERE p.teams IS EMPTY
■Dataretrieved :Allplayerswhodonotbelongtoateam.
■Description :The teamsrelationshipfieldofthe Playerentityisacollection.Ifaplayerdoes
notbelongtoateam,the teamscollectionisempty,andtheconditionalexpressionis TRUE.
■Seealso:“EmptyCollectionComparisonExpressions”onpage651 .
TheBETWEENExpression
SELECT DISTINCT p
FROM Player pWHERE p.salary BETWEEN :lowerSalary AND :higherSalary
■Dataretrieved :Theplayerswhosesalariesfallwithintherangeofthespecifiedsalaries.
■Description :This BETWEENexpressionhasthreearithmeticexpressions:apersistentfield
(p.salary )andthetwoinputparameters( :lowerSalary and:higherSalary ).The
followingexpressionisequivalenttothe BETWEENexpression:
p.salary >= :lowerSalary AND p.salary <= :higherSalary
■Seealso:“BETWEENExpressions”onpage649 .ExampleQueries
TheJavaEE6Tutorial • January2013 636
ComparisonOperators
SELECT DISTINCT p1
FROM Player p1, Player p2WHERE p1.salary > p2.salary AND p2.name = :name
■Dataretrieved :Allplayerswhosesalariesarehigherthanthesalaryoftheplayerwiththe
specifiedname.
■Description :The FROMclausedeclarestwoidentificationvariables( p1andp2)ofthesame
type( Player).Twoidentificationvariablesareneededbecausethe WHEREclausecompares
thesalaryofoneplayer( p2)withthatoftheotherplayers( p1).
■Seealso:“IdentificationVariables”onpage643 .
BulkUpdatesandDeletes
Thefollowingexamplesshowhowtousethe UPDATEandDELETEexpressionsinqueries. UPDATE
andDELETEoperateonmultipleentitiesaccordingtotheconditionorconditionssetinthe
WHEREclause.The WHEREclausein UPDATEandDELETEqueriesfollowsthesamerulesas SELECT
queries.
UpdateQueries
UPDATE Player p
SET p.status = ’inactive’WHERE p.lastPlayed < :inactiveThresholdDate
■Description :Thisquerysetsthestatusofasetofplayersto inactive iftheplayer’slastgame
waslongerthanthedatespecifiedin inactiveThresholdDate .
DeleteQueries
DELETE
FROM Player p
WHERE p.status = ’inactive’AND p.teams IS EMPTY
■Description :Thisquerydeletesallinactiveplayerswhoarenotonateam.
FullQueryLanguageSyntax
Thissectiondiscussesthequerylanguagesyntax,asdefinedintheJavaPersistenceAPI2.0
specificationavailableat http://jcp.org/en/jsr/detail?id=317 .Muchofthefollowing
materialparaphrasesordirectlyquotesthespecification.
BNFSymbols
Table34–1 describestheBNFsymbolsusedinthischapter.FullQueryLanguageSyntax
Chapter34 • TheJavaPersistenceQueryLanguage 637
TABLE34–1 BNFSymbolSummary
Symbol Description
::= Theelementtotheleftofthesymbolisdefinedbytheconstructsontheright.
* Theprecedingconstructmayoccurzeroormoretimes.
{...} Theconstructswithinthebracesaregroupedtogether.
[...] Theconstructswithinthebracketsareoptional.
| Anexclusive OR.
BOLDFACE Akeyword;althoughcapitalizedintheBNFdiagram,keywordsarenotcase-sensitive.
Whitespace Awhitespacecharactercanbeaspace,ahorizontaltab,oralinefeed.
BNFGrammaroftheJavaPersistence
QueryLanguage
HereistheentireBNFdiagramforthequerylanguage:
QL_statement ::= select_statement | update_statement | delete_statement
select_statement ::= select_clause from_clause [where_clause] [groupby_clause]
[having_clause] [orderby_clause]
update_statement ::= update_clause [where_clause]delete_statement ::= delete_clause [where_clause]from_clause ::=
FROM identification_variable_declaration
{, {identification_variable_declaration |
collection_member_declaration}}*
identification_variable_declaration ::=
range_variable_declaration { join | fetch_join }*
range_variable_declaration ::= abstract_schema_name [AS]
identification_variable
join ::= join_spec join_association_path_expression [AS]
identification_variable
fetch_join ::= join_specFETCH join_association_path_expressionassociation_path_expression ::=
collection_valued_path_expression |single_valued_association_path_expression
join_spec::= [LEFT [OUTER] |INNER] JOINjoin_association_path_expression ::=
join_collection_valued_path_expression |join_single_valued_association_path_expression
join_collection_valued_path_expression::=
identification_variable.collection_valued_association_field
join_single_valued_association_path_expression::=
identification_variable.single_valued_association_field
collection_member_declaration ::=
IN (collection_valued_path_expression) [AS]identification_variable
single_valued_path_expression ::=FullQueryLanguageSyntax
TheJavaEE6Tutorial • January2013 638
state_field_path_expression |
single_valued_association_path_expression
state_field_path_expression ::=
{identification_variable |single_valued_association_path_expression}.state_field
single_valued_association_path_expression ::=
identification_variable.{single_valued_association_field.}*single_valued_association_field
collection_valued_path_expression ::=
identification_variable.{single_valued_association_field.}*collection_valued_association_field
state_field ::=
{embedded_class_state_field.}*simple_state_field
update_clause ::=UPDATE abstract_schema_name [[AS]
identification_variable] SET update_item {, update_item}*
update_item ::= [identification_variable.]{state_field |
single_valued_association_field} = new_value
new_value ::=
simple_arithmetic_expression |
string_primary |datetime_primary |boolean_primary |enum_primary simple_entity_expression |NULL
delete_clause ::= DELETE FROM abstract_schema_name [[AS]
identification_variable]
select_clause ::= SELECT [DISTINCT] select_expression {,
select_expression}*
select_expression ::=
single_valued_path_expression |aggregate_expression |identification_variable |OBJECT(identification_variable) |constructor_expression
constructor_expression ::=
NEW constructor_name(constructor_item {,constructor_item}*)
constructor_item ::= single_valued_path_expression |
aggregate_expression
aggregate_expression ::=
{AVG |MAX |MIN |SUM} ([DISTINCT]
state_field_path_expression) |
COUNT ([DISTINCT] identification_variable |
state_field_path_expression |single_valued_association_path_expression)
where_clause ::= WHERE conditional_expressiongroupby_clause ::= GROUP BY groupby_item {, groupby_item}*groupby_item ::= single_valued_path_expressionhaving_clause ::= HAVING conditional_expressionorderby_clause ::= ORDER BY orderby_item {, orderby_item}*orderby_item ::= state_field_path_expression [ASC |DESC]subquery ::= simple_select_clause subquery_from_clause
[where_clause] [groupby_clause] [having_clause]
subquery_from_clause ::=
FROM subselect_identification_variable_declaration
{, subselect_identification_variable_declaration}*
subselect_identification_variable_declaration ::=
identification_variable_declaration |association_path_expression [AS] identification_variable |FullQueryLanguageSyntax
Chapter34 • TheJavaPersistenceQueryLanguage 639
collection_member_declaration
simple_select_clause ::= SELECT [DISTINCT]
simple_select_expression
simple_select_expression::=
single_valued_path_expression |aggregate_expression |identification_variable
conditional_expression ::= conditional_term |
conditional_expression OR conditional_term
conditional_term ::= conditional_factor | conditional_term AND
conditional_factor
conditional_factor ::= [NOT] conditional_primaryconditional_primary ::= simple_cond_expression |(
conditional_expression)
simple_cond_expression ::=
comparison_expression |between_expression |like_expression |in_expression |null_comparison_expression |empty_collection_comparison_expression |collection_member_expression |exists_expression
between_expression ::=
arithmetic_expression [NOT] BETWEEN
arithmetic_expressionAND arithmetic_expression |
string_expression [NOT] BETWEEN string_expression AND
string_expression |
datetime_expression [NOT] BETWEEN
datetime_expression AND datetime_expression
in_expression ::=
state_field_path_expression [NOT] IN (in_item {, in_item}*| subquery)
in_item ::= literal | input_parameterlike_expression ::=
string_expression [NOT] LIKE pattern_value [ESCAPE
escape_character]
null_comparison_expression ::=
{single_valued_path_expression | input_parameter} IS [NOT]
NULL
empty_collection_comparison_expression ::=
collection_valued_path_expression IS [NOT] EMPTY
collection_member_expression ::= entity_expression
[NOT] MEMBER [OF] collection_valued_path_expression
exists_expression::= [NOT] EXISTS (subquery)all_or_any_expression ::= {ALL |ANY |SOME} (subquery)comparison_expression ::=
string_expression comparison_operator {string_expression |all_or_any_expression} |boolean_expression {= |<> } {boolean_expression |all_or_any_expression} |enum_expression {= |<> } {enum_expression |all_or_any_expression} |datetime_expression comparison_operator
{datetime_expression | all_or_any_expression} |
entity_expression {= |<> } {entity_expression |all_or_any_expression} |arithmetic_expression comparison_operator
{arithmetic_expression | all_or_any_expression}FullQueryLanguageSyntax
TheJavaEE6Tutorial • January2013 640
comparison_operator ::= = |> |>= |< |<= |<>
arithmetic_expression ::= simple_arithmetic_expression |
(subquery)
simple_arithmetic_expression ::=
arithmetic_term | simple_arithmetic_expression {+ |- }
arithmetic_term
arithmetic_term ::= arithmetic_factor | arithmetic_term {* |/ }
arithmetic_factor
arithmetic_factor ::= [{+ |- }] arithmetic_primaryarithmetic_primary ::=
state_field_path_expression |numeric_literal |(simple_arithmetic_expression) |input_parameter |functions_returning_numerics |aggregate_expression
string_expression ::= string_primary | (subquery)string_primary ::=
state_field_path_expression |string_literal |input_parameter |functions_returning_strings |aggregate_expression
datetime_expression ::= datetime_primary | (subquery)datetime_primary ::=
state_field_path_expression |input_parameter |functions_returning_datetime |aggregate_expression
boolean_expression ::= boolean_primary | (subquery)boolean_primary ::=
state_field_path_expression |boolean_literal |input_parameter
enum_expression ::= enum_primary | (subquery)
enum_primary ::=
state_field_path_expression |enum_literal |input_parameter
entity_expression ::=
single_valued_association_path_expression |
simple_entity_expression
simple_entity_expression ::=
identification_variable |input_parameter
functions_returning_numerics::=
LENGTH(string_primary) |LOCATE(string_primary, string_primary[,
simple_arithmetic_expression]) |
ABS(simple_arithmetic_expression) |SQRT(simple_arithmetic_expression) |MOD(simple_arithmetic_expression,
simple_arithmetic_expression) |
SIZE(collection_valued_path_expression)
functions_returning_datetime ::=
CURRENT_DATE |CURRENT_TIME |CURRENT_TIMESTAMP
functions_returning_strings ::=FullQueryLanguageSyntax
Chapter34 • TheJavaPersistenceQueryLanguage 641
CONCAT(string_primary, string_primary) |
SUBSTRING(string_primary,
simple_arithmetic_expression,simple_arithmetic_expression)|
TRIM([[trim_specification] [trim_character] FROM]
string_primary) |
LOWER(string_primary) |UPPER(string_primary)
trim_specification ::= LEADING | TRAILING | BOTH
FROMClause
TheFROMclausedefinesthedomainofthequerybydeclaringidentificationvariables.
Identifiers
Anidentifierisasequenceofoneormorecharacters.Thefirstcharactermustbeavalidfirst
character(letter, $,_)inanidentifieroftheJavaprogramminglanguage,hereafterinthis
chaptercalledsimply“Java”.Eachsubsequentcharacterinthesequencemustbeavalidnonfirstcharacter(letter,digit, $,_)inaJavaidentifier.(Fordetails,seetheJavaSEAPIdocumentation
ofthe isJavaIdentifierStart andisJavaIdentifierPart methodsofthe Character class.)
Thequestionmark( ?)isareservedcharacterinthequerylanguageandcannotbeusedinan
identifier.
Aquerylanguageidentifieriscase-sensitive,withtwoexceptions:
■Keywords
■Identificationvariables
Anidentifiercannotbethesameasaquerylanguagekeyword.Hereisalistofquerylanguage
keywords:
ABS ALL AND ANY
AS ASC AVG BETWEENBIT_LENGTH BOTH BY CASECHAR_LENGTH CHARACTER_LENGTH CLASS COALESCECONCAT COUNT CURRENT_DATE CURRENT_TIMESTAMPDELETE DESC DISTINCT ELSEEMPTY END ENTRY ESCAPEEXISTS FALSE FETCH FROMGROUP HAVING IN INDEXINNER IS JOIN KEYFullQueryLanguageSyntax
TheJavaEE6Tutorial • January2013 642
LEADING LEFT LENGTH LIKE
LOCATE LOWER MAX MEMBERMIN MOD NEW NOTNULL NULLIF OBJECT OFOR ORDER OUTER POSITIONSELECT SET SIZE SOMESQRT SUBSTRING SUM THENTRAILING TRIM TRUE TYPEUNKNOWN UPDATE UPPER VALUEWHEN WHERE
ItisnotrecommendedthatyouuseanSQLkeywordasanidentifier,becausethelistof
keywordsmayexpandtoincludeotherreservedSQLwordsinthefuture.
IdentificationVariables
Anidentificationvariable isanidentifierdeclaredinthe FROMclause.Althoughtheycan
referenceidentificationvariables,the SELECTandWHEREclausescannotdeclarethem.All
identificationvariablesmustbedeclaredinthe FROMclause.
Becauseitisanidentifier,anidentificationvariablehasthesamenamingconventionsand
restrictionsasanidentifier,withtheexceptionthatanidentificationvariablesiscase-insensitive.Forexample,anidentificationvariablecannotbethesameasaquerylanguagekeyword.(Seetheprecedingsectionformorenamingrules.)Also,withinagivenpersistenceunit,anidentificationvariablenamemustnotmatchthenameofanyentityorabstractschema.
TheFROMclausecancontainmultipledeclarations,separatedbycommas.Adeclarationcan
referenceanotheridentificationvariablethathasbeenpreviouslydeclared(totheleft).Inthefollowing FROMclause,thevariable treferencesthepreviouslydeclaredvariable p:
FROM Player p, IN (p.teams) AS t
Evenifitisnotusedinthe WHEREclause,anidentificationvariable’sdeclarationcanaffectthe
resultsofthequery.Forexample,comparethenexttwoqueries.Thefollowingqueryreturnsallplayers,whetherornottheybelongtoateam:
SELECT p
FROM Player p
Incontrast,becauseitdeclaresthe tidentificationvariable,thenextqueryfetchesallplayers
whobelongtoateam:FullQueryLanguageSyntax
Chapter34 • TheJavaPersistenceQueryLanguage 643
SELECT p
FROM Player p, IN (p.teams) AS t
Thefollowingqueryreturnsthesameresultsastheprecedingquery,butthe WHEREclausemakes
iteasiertoread:
SELECT p
FROM Player pWHERE p.teams IS NOT EMPTY
Anidentificationvariablealwaysdesignatesareferencetoasinglevaluewhosetypeisthatof
theexpressionusedinthedeclaration.Therearetwokindsofdeclarations:rangevariableandcollectionmember.
RangeVariableDeclarations
Todeclareanidentificationvariableasanabstractschematype,youspecifyarangevariabledeclaration.Inotherwords,anidentificationvariablecanrangeovertheabstractschematypeofanentity.Inthefollowingexample,anidentificationvariablenamed prepresentstheabstract
schemanamed Player:
FROM Player p
Arangevariabledeclarationcanincludetheoptional ASoperator:
FROM Player AS p
Toobtainobjects,aqueryusuallyusespathexpressionstonavigatethroughtherelationships.
Butforthoseobjectsthatcannotbeobtainedbynavigation,youcanusearangevariabledeclarationtodesignateastartingpoint,or root.
Ifthequerycomparesmultiplevaluesofthesameabstractschematype,the FROMclausemust
declaremultipleidentificationvariablesfortheabstractschema:
FROM Player p1, Player p2
Foranexampleofsuchaquery,see “ComparisonOperators”onpage637 .
CollectionMemberDeclarations
Inaone-to-manyrelationship,themultiplesideconsistsofacollectionofentities.Anidentificationvariablecanrepresentamemberofthiscollection.Toaccessacollectionmember,thepathexpressioninthevariable’sdeclarationnavigatesthroughtherelationshipsintheabstractschema.(Formoreinformationonpathexpressions,see
“PathExpressions”on
page646.)Becauseapathexpressioncanbebasedonanotherpathexpression,thenavigation
cantraverseseveralrelationships.See “TraversingMultipleRelationships”onpage635 .
Acollectionmemberdeclarationmustincludethe INoperatorbutcanomittheoptional AS
operator.FullQueryLanguageSyntax
TheJavaEE6Tutorial • January2013 644
Inthefollowingexample,theentityrepresentedbytheabstractschemanamed Playerhasa
relationshipfieldcalled teams.Theidentificationvariablecalled trepresentsasinglemember
ofthe teamscollection.
FROM Player p, IN (p.tea
ms) t
Joins
TheJOINoperatorisusedtotraverseoverrelationshipsbetweenentitiesandisfunctionally
similartothe INoperator.
Inthefollowingexample,thequeryjoinsovertherelationshipbetweencustomersandorders:
SELECT c
FROM Customer c JOIN c.orders oWHERE c.statu s = 1 AND o.totalPrice > 10000
TheINNERkeywordisoptional:
SELECT c
FROM Customer c INNER JOIN c.orders oWHERE c.statu s = 1 AND o.totalPrice > 10000
Theseexamplesareequivalenttothefollowingquery,whichusesthe INoperator:
SELECT c
FROM Customer c, IN(c.orders) oWHERE c.statu s = 1 AND o.totalPrice > 10000
Youcanalsojoinasingle-valuedrelationship:
SELECT t
FROM Team t JOIN t.league lWHERE l.sport = :sport
ALEFT JOIN orLEFT OUTER JOIN retrievesasetofentitieswherematchingvaluesinthejoin
conditionmaybeabsent.The OUTERkeywordisoptional.
SELECT c.name, o.totalPrice
FROM Order o LEFT JOIN o.customer c
AFETCH JOIN isajoinoperationthatreturnsassociatedentitiesasasideeffectofrunningthe
query.Inthefollowingexample,thequeryreturnsasetofdepartmentsand,asasideeffect,theassociatedemployeesofthedepartments,eventhoughtheemployeeswerenotexplicitlyretrievedbythe SELECTclause.
SELECT d
FROM Department d LEFT JOIN FETCH d.employeesWHERE d.deptno = 1FullQueryLanguageSyntax
Chapter34 • TheJavaPersistenceQueryLanguage 645
PathExpressions
Pathexpressionsareimportantconstructsinthesyntaxofthequerylanguage,forseveral
reasons.First,pathexpressionsdefinenavigationpathsthroughtherelationshipsintheabstractschema.Thesepathdefinitionsaffectboththescopeandtheresultsofaquery.Second,pathexpressionscanappearinanyofthemainclausesofaquery( SELECT,DELETE,HAVING,UPDATE,
WHERE,FROM,GROUP BY,ORDER BY).Finally,althoughmuchofthequerylanguageisasubsetof
SQL,pathexpressionsareextensionsnotfoundinSQL.
ExamplesofPathExpressions
Here,the WHEREclausecontainsa single_valued_path_expression ;the pisanidentification
variable,and salaryisapersistentfieldof Player:
SELECT DISTINCT p
FROM Player p
WHERE p.salary BETWEEN :lowerSalary AND :higherSalary
Here,the WHEREclausealsocontainsa single_valued_path_expression ;tisanidentification
variable, leagueisasingle-valuedrelationshipfield,and sportisapersistentfieldof league:
SELECT DISTINCT p
FROM Player p, IN (p.teams) t
WHERE t.league.sport = :sport
Here,the WHEREclausecontainsa collection_valued_path_expression ;pisanidentification
variable,and teamsdesignatesacollection-valuedrelationshipfield:
SELECT DISTINCT p
FROM Player p
WHERE p.teams IS EMPTY
ExpressionTypes
Thetypeofapathexpressionisthetypeoftheobjectrepresentedbytheendingelement,which
canbeoneofthefollowing:
■Persistentfield
■Single-valuedrelationshipfield
■Collection-valuedrelationshipfield
Forexample,thetypeoftheexpression p.salary isdoublebecausetheterminatingpersistent
field( salary)isa double.
Intheexpression p.teams,theterminatingelementisacollection-valuedrelationshipfield
(teams).Thisexpression’stypeisacollectionoftheabstractschematypenamed Team.Because
Teamistheabstractschemanameforthe Teamentity,thistypemapstotheentity.Formore
informationonthetypemappingofabstractschemas,see “ReturnTypes”onpage657 .FullQueryLanguageSyntax
TheJavaEE6Tutorial • January2013 646
Navigation
Apathexpressionenablesthequerytonavigatetorelatedentities.Theterminatingelementsof
anexpressiondeterminewhethernavigationisallowed.Ifanexpressioncontainsasingle-valuedrelationshipfield,thenavigationcancontinuetoanobjectthatisrelatedtothefield.However,anexpressioncannotnavigatebeyondapersistentfieldoracollection-valuedrelationshipfield.Forexample,theexpression p.teams.league.sport isillegalbecause teams
isacollection-valuedrelationshipfield.Toreachthe sportfield,the FROMclausecoulddefinean
identificationvariablenamed tforthe teamsfield:
FROM Player AS p, IN (p.teams) t
WHERE t.league.sport = ’soccer ’
WHEREClause
TheWHEREclausespecifiesaconditionalexpressionthatlimitsthevaluesreturnedbythequery.
Thequeryreturnsallcorrespondingvaluesinthedatastoreforwhichtheconditionalexpressionis TRUE.Althoughusuallyspecified,the WHEREclauseisoptional.Ifthe WHEREclause
isomitted,thequeryreturnsallvalues.Thehigh-levelsyntaxforthe WHEREclausefollows:
where_clause ::= WHERE conditional_expression
Literals
Therearefourkindsofliterals:string,numeric,Boolean,andenum.
■Stringliterals :Astringliteralisenclosedinsinglequotes:
’Duke’
Ifastringliteralcontainsasinglequote,youindicatethequotebyusingtwosinglequotes:
’Duke’’s’
LikeaJava String,astringliteralinthequerylanguageusestheUnicodecharacter
encoding.
■Numericliterals :Therearetwotypesofnumericliterals:exactandapproximate.
Anexactnumericliteralisanumericvaluewithoutadecimalpoint,suchas65,–233,and
+12.UsingtheJavaintegersyntax,exactnumericliteralssupportnumbersintherangeofaJava long.
Anapproximatenumericliteralisanumericvalueinscientificnotation,suchas57.,–85.7,
and+2.1.UsingthesyntaxoftheJavafloating-pointliteral,approximatenumericliteralssupportnumbersintherangeofaJava double.
■Booleanliterals :ABooleanliteraliseither TRUEorFALSE.Thesekeywordsarenot
case-sensitive.FullQueryLanguageSyntax
Chapter34 • TheJavaPersistenceQueryLanguage 647
■Enumliterals :TheJavaPersistencequerylanguagesupportstheuseofenumliteralsusing
theJavaenumliteralsyntax.Theenumclassnamemustbespecifiedasafullyqualifiedclassname:
SELECT e
FROM Employee eWHERE e.status = com.xyz.EmployeeStatus.FULL_TIME
InputParameters
Aninputparametercanbeeitheranamedparameterorapositionalparameter.
■Anamedinputparameterisdesignatedbyacolon( :)followedbyastring;forexample,
:name.
■Apositionalinputparameterisdesignatedbyaquestionmark( ?)followedbyaninteger.
Forexample,thefirstinputparameteris ?1,thesecondis ?2,andsoforth.
Thefollowingrulesapplytoinputparameters.
■Theycanbeusedonlyina WHEREorHAVINGclause.
■Positionalparametersmustbenumbered,startingwiththeinteger1.
■Namedparametersandpositionalparametersmaynotbemixedinasinglequery.
■Namedparametersarecase-sensitive.
ConditionalExpressions
AWHEREclauseconsistsofaconditionalexpression,whichisevaluatedfromlefttorightwithin
aprecedencelevel.Youcanchangetheorderofevaluationbyusingparentheses.
OperatorsandTheirPrecedence
Table34–2 liststhequerylanguageoperatorsinorderofdecreasingprecedence.
TABLE34–2 QueryLanguageOrderPrecedence
Type PrecedenceOrder
Navigation .(aperiod)
Arithmetic +–(unary)
*/(multiplicationanddivision)
+–(additionandsubtraction)FullQueryLanguageSyntax
TheJavaEE6Tutorial • January2013 648
TABLE34–2 QueryLanguageOrderPrecedence (Continued)
Type PrecedenceOrder
Comparison =
>>=<<=<>(notequal)
[NOT] BETWEEN[NOT] LIKE[NOT] INIS [NOT] NULLIS [NOT] EMPTY[NOT] MEMBER OF
Logical NOT
ANDOR
BETWEENExpressions
ABETWEENexpressiondetermineswhetheranarithmeticexpressionfallswithinarangeof
values.
Thesetwoexpressionsareequivalent:
p.age BETWEEN 15 AND 19
p.age >= 15 AND p.age <= 19
Thefollowingtwoexpressionsalsoareequivalent:
p.age NOT BETWEEN 15 AND 19
p.age < 15 OR p.age > 19
Ifanarithmeticexpressionhasa NULLvalue,thevalueofthe BETWEENexpressionisunknown.
INExpressions
AnINexpressiondetermineswhetherastringbelongstoasetofstringliteralsorwhethera
numberbelongstoasetofnumbervalues.FullQueryLanguageSyntax
Chapter34 • TheJavaPersistenceQueryLanguage 649
Thepathexpressionmusthaveastringornumericvalue.Ifthepathexpressionhasa NULL
value,thevalueofthe INexpressionisunknown.
Inthefollowingexample,theexpressionis TRUEifthecountryis UK,but FALSEifthecountryis
Peru.
o.country IN (’UK’, ’US’, ’France’)
Youmayalsouseinputparameters:
o.country IN (’UK’, ’US’, ’France’, :country)
LIKEExpressions
ALIKEexpressiondetermineswhetherawildcardpatternmatchesastring.
Thepathexpressionmusthaveastringornumericvalue.Ifthisvalueis NULL,thevalueofthe
LIKEexpressionisunknown.Thepatternvalueisastringliteralthatcancontainwildcard
characters.Theunderscore( _)wildcardcharacterrepresentsanysinglecharacter.Thepercent
(%)wildcardcharacterrepresentszeroormorecharacters.The ESCAPEclausespecifiesanescape
characterforthewildcardcharactersinthepatternvalue. Table34–3 showssomesample LIKE
expressions.
TABLE34–3 LIKEExpressionExamples
Expression TRUE FALSE
address.phone LIKE ’12%3’ ’123’
’12993’’1234’
asentence.word LIKE ’l_se’ ’lose’ ’loose’
aword.underscored LIKE ’\_%’ ESCAPE ’\’ ’_foo’ ’bar’address.phone NOT LIKE ’12%3’ ’1234’ ’123’
’12993’
NULLComparisonExpressions
ANULLcomparisonexpressiontestswhetherasingle-valuedpathexpressionoraninput
parameterhasa NULLvalue.Usually,the NULLcomparisonexpressionisusedtotestwhethera
single-valuedrelationshiphasbeenset:
SELECT t
FROM Team tWHERE t.league IS NULLFullQueryLanguageSyntax
TheJavaEE6Tutorial • January2013 650
Thisqueryselectsallteamswheretheleaguerelationshipisnotset.Notethatthefollowing
queryisnotequivalent:
SELECT t
FROM Team tWHERE t.league = NULL
Thecomparisonwith NULLusingtheequalsoperator( =)alwaysreturnsanunknownvalue,
eveniftherelationshipisnotset.Thesecondquerywillalwaysreturnanemptyresult.
EmptyCollectionComparisonExpressions
TheIS [NOT] EMPTY comparisonexpressiontestswhetheracollection-valuedpathexpression
hasnoelements.Inotherwords,ittestswhetheracollection-valuedrelationshiphasbeenset.
Ifthecollection-valuedpathexpressionis NULL,theemptycollectioncomparisonexpression
hasa NULLvalue.
Hereisanexamplethatfindsallordersthatdonothaveanylineitems:
SELECT o
FROM Order oWHERE o.lineItems IS EMPTY
CollectionMemberExpressions
The[NOT] MEMBER [OF] collectionmemberexpressiondetermineswhetheravalueisamember
ofacollection.Thevalueandthecollectionmembersmusthavethesametype.
Ifeitherthecollection-valuedorsingle-valuedpathexpressionisunknown,thecollection
memberexpressionisunknown.Ifthecollection-valuedpathexpressiondesignatesanemptycollection,thecollectionmemberexpressionis FALSE.
TheOFkeywordisoptional.
Thefollowingexampletestswhetheralineitemispartofanorder:
SELECT o
FROM Order oWHERE :lineItem MEMBER OF o.lineItems
Subqueries
Subqueriesmaybeusedinthe WHEREorHAVINGclauseofaquery.Subqueriesmustbe
surroundedbyparentheses.
Thefollowingexamplefindsallcustomerswhohaveplacedmorethantenorders:
SELECT c
FROM Customer cWHERE (SELECT COUNT(o) FROM c.orders o) > 10FullQueryLanguageSyntax
Chapter34 • TheJavaPersistenceQueryLanguage 651
Subqueriesmaycontain EXISTS,ALL,and ANYexpressions.
■EXISTSexpressions :The [NOT] EXISTS expressionisusedwithasubqueryandistrueonly
iftheresultofthesubqueryconsistsofoneormorevaluesandisfalseotherwise.
Thefollowingexamplefindsallemployeeswhosespousesarealsoemployees:
SELECT DISTINCT emp
FROM Employee empWHERE EXISTS (
SELECT spouseEmpFROM Employee spouseEmpWHERE spouseEmp = emp.spouse)
■ALLandANYexpressions :The ALLexpressionisusedwithasubqueryandistrueifallthe
valuesreturnedbythesubqueryaretrueorifthesubqueryisempty.
TheANYexpressionisusedwithasubqueryandistrueifsomeofthevaluesreturnedbythe
subqueryaretrue.An ANYexpressionisfalseifthesubqueryresultisemptyorifallthe
valuesreturnedarefalse.The SOMEkeywordissynonymouswith ANY.
TheALLandANYexpressionsareusedwiththe =,<,<=,>,>=,and <>comparisonoperators.
Thefollowingexamplefindsallemployeeswhosesalariesarehigherthanthesalariesofthe
managersintheemployee’sdepartment:
SELECT emp
FROM Employee empWHERE emp.salary > ALL (
SELECT m.salaryFROM Manager mWHERE m.department = emp.department)
FunctionalExpressions
Thequerylanguageincludesseveralstring,arithmetic,anddate/timefunctionsthatmaybe
usedinthe SELECT,WHERE,orHAVINGclauseofaquery.Thefunctionsarelistedin Table34–4 ,
Table34–5 ,andTable34–6 .
InTable34–4 ,the startandlengthargumentsareoftype intanddesignatepositionsinthe
Stringargument.Thefirstpositioninastringisdesignatedby1.FullQueryLanguageSyntax
TheJavaEE6Tutorial • January2013 652
TABLE34–4 StringExpressions
FunctionSyntax ReturnType
CONCAT(String, String) String
LENGTH(String) intLOCATE(String, String [, start]) intSUBSTRING(String, start, length) StringTRIM([[LEADING|TRAILING|BOTH] char) FROM] (String) StringLOWER(String) StringUPPER(String) String
TheCONCATfunctionconcatenatestwostringsintoonestring.
TheLENGTHfunctionreturnsthelengthofastringincharactersasaninteger.
TheLOCATEfunctionreturnsthepositionofagivenstringwithinastring.Thisfunctionreturns
thefirstpositionatwhichthestringwasfoundasaninteger.Thefirstargumentisthestringtobelocated.Thesecondargumentisthestringtobesearched.Theoptionalthirdargumentisanintegerthatrepresentsthestartingstringposition.Bydefault, LOCATEstartsatthebeginningof
thestring.Thestartingpositionofastringis 1.Ifthestringcannotbelocated, LOCATEreturns 0.
TheSUBSTRING functionreturnsastringthatisasubstringofthefirstargumentbasedonthe
startingpositionandlength.
TheTRIMfunctiontrimsthespecifiedcharacterfromthebeginningand/orendofastring.Ifno
characterisspecified, TRIMremovesspacesorblanksfromthestring.Iftheoptional LEADING
specificationisused, TRIMremovesonlytheleadingcharactersfromthestring.Iftheoptional
TRAILING specificationisused, TRIMremovesonlythetrailingcharactersfromthestring.The
defaultis BOTH,whichremovestheleadingandtrailingcharactersfromthestring.
TheLOWERandUPPERfunctionsconvertastringtolowercaseoruppercase,respectively.
In
Table34–5 ,the numberargumentcanbean int,afloat,ora double.FullQueryLanguageSyntax
Chapter34 • TheJavaPersistenceQueryLanguage 653
TABLE34–5 ArithmeticExpressions
FunctionSyntax ReturnType
ABS(number) int ,float,ordouble
MOD(int, int) intSQRT(double) doubleSIZE(Collection) int
TheABSfunctiontakesanumericexpressionandreturnsanumberofthesametypeasthe
argument.
TheMODfunctionreturnstheremainderofthefirstargumentdividedbythesecond.
TheSQRTfunctionreturnsthesquarerootofanumber.
TheSIZEfunctionreturnsanintegerofthenumberofelementsinthegivencollection.
InTable34–6 ,thedate/timefunctionsreturnthedate,time,ortimestamponthedatabase
server.
TABLE34–6 Date/TimeExpressions
FunctionSyntax ReturnType
CURRENT_DATE java.sql.Date
CURRENT_TIME java.sql.TimeCURRENT_TIMESTAMP java.sql.Timestamp
CaseExpressions
Caseexpressionschangebasedonacondition,similartothe casekeywordoftheJava
programminglanguage.The CASEkeywordindicatesthestartofacaseexpression,andthe
expressionisterminatedbythe ENDkeyword.The WHENandTHENkeywordsdefineindividual
conditions,andthe ELSEkeyworddefinesthedefaultconditionshouldnoneoftheother
conditionsbesatisfied.
Thefollowingqueryselectsthenameofapersonandaconditionalstring,dependingonthe
subtypeofthe Personentity.Ifthesubtypeis Student,thestring kidisreturned.Ifthesubtype
isGuardian orStaff,thestring adultisreturned.Iftheentityissomeothersubtypeof Person,
thestring unknownisreturned.
SELECT p.name
CASE TYPE(p)
WHEN Student THEN ’kid’FullQueryLanguageSyntax
TheJavaEE6Tutorial • January2013 654
WHEN Guardian THEN ’adult’
WHEN Staff THEN ’adult’ELSE ’unknown’
ENDFROM Person p
Thefollowingquerysetsadiscountforvarioustypesofcustomers.Gold-levelcustomersgeta
20%discount,silver-levelcustomersgeta15%discount,bronze-levelcustomersgeta10%discount,andeveryoneelsegetsa5%discount.
UPDATE Customer c
SET c.discount =
CASE c.level
WHEN ’Gold’ THEN 20WHEN ’SILVER’ THEN 15WHEN ’Bronze’ THEN 10ELSE 5
END
NULLValues
Ifthetargetofareferenceisnotinthepersistentstore,thetargetis NULL.Forconditional
expressionscontaining NULL,thequerylanguageusesthesemanticsdefinedbySQL92.Briefly,
thesesemanticsareasfollows.
■Ifacomparisonorarithmeticoperationhasanunknownvalue,ityieldsa NULLvalue.
■Two NULLvaluesarenotequal.Comparingtwo NULLvaluesyieldsanunknownvalue.
■TheIS NULLtestconvertsa NULLpersistentfieldorasingle-valuedrelationshipfieldto TRUE.
The IS NOT NULL testconvertsthemto FALSE.
■Booleanoperatorsandconditionaltestsusethethree-valuedlogicdefinedby Table34–7
andTable34–8 .(Inthesetables,Tstandsfor TRUE,Ffor FALSE,andUforunknown.)
TABLE34–7 ANDOperatorLogic
AND T F U
TT F U
FF F FUU F UFullQueryLanguageSyntax
Chapter34 • TheJavaPersistenceQueryLanguage 655
TABLE34–8 OROperatorLogic
OR T F U
TT T T
FT F UUT U U
EqualitySemantics
Inthequerylanguage,onlyvaluesofthesametypecanbecompared.However,thisrulehasone
exception:Exactandapproximatenumericvaluescanbecompared.Insuchacomparison,therequiredtypeconversionadherestotherulesofJavanumericpromotion.
ThequerylanguagetreatscomparedvaluesasiftheywereJavatypesandnotasifthey
representedtypesintheunderlyingdatastore.Forexample,apersistentfieldthatcouldbeeitheranintegerora NULLmustbedesignatedasan Integerobjectandnotasan intprimitive.
ThisdesignationisrequiredbecauseaJavaobjectcanbe NULL,butaprimitivecannot.
Twostringsareequalonlyiftheycontainthesamesequenceofcharacters.Trailingblanksare
significant;forexample,thestrings ’abc’and’abc ’arenotequal.
Twoentitiesofthesameabstractschematypeareequalonlyiftheirprimarykeyshavethesame
value.
Table34–9 showstheoperatorlogicofanegation,and Table34–10 showsthetruth
valuesofconditionaltests.
TABLE34–9 NOTOperatorLogic
NOTValue Value
TF
FTUU
TABLE34–10 ConditionalTest
ConditionalTest T F U
Expression IS TRUE TF F
Expression IS FALSE FT F
Expressionisunknown F F TFullQueryLanguageSyntax
TheJavaEE6Tutorial • January2013 656
SELECTClause
TheSELECTclausedefinesthetypesoftheobjectsorvaluesreturnedbythequery.
ReturnTypes
Thereturntypeofthe SELECTclauseisdefinedbytheresulttypesoftheselectexpressions
containedwithinit.Ifmultipleexpressionsareused,theresultofthequeryisan Object[] ,and
theelementsinthearraycorrespondtotheorderoftheexpressionsinthe SELECTclauseandin
typetotheresulttypesofeachexpression.
ASELECTclausecannotspecifyacollection-valuedexpression.Forexample,the SELECTclause
p.teamsisinvalidbecause teamsisacollection.However,theclauseinthefollowingqueryis
validbecausethe tisasingleelementofthe teamscollection:
SELECT t
FROM Player p, IN (p.teams) t
Thefollowingqueryisanexampleofaquerywithmultipleexpressionsinthe SELECTclause:
SELECT c.name, c.country.name
FROM customer cWHERE c.lastname = ’Coss’ AND c.firstname = ’Roxane’
Thisqueryreturnsalistof Object[] elements;thefirstarrayelementisastringdenotingthe
customername,andthesecondarrayelementisastringdenotingthenameofthecustomer’scountry.
Theresultofaquerymaybetheresultofanaggregatefunction,listedin
Table34–11 .
TABLE34–11 AggregateFunctionsinSelectStatements
Name ReturnType Description
AVG Double Returnsthemeanaverageofthefields
COUNT Long Returnsthetotalnumberofresults
MAX Thetypeofthefield Returnsthehighestvalueintheresult
set
MIN Thetypeofthefield Returnsthelowestvalueintheresult
set
SUM Long (forintegralfields)
Double(forfloating-pointfields)
BigInteger (forBigInteger fields)
BigDecimal (forBigDecimal fields)Returnsthesumofallthevaluesinthe
resultsetFullQueryLanguageSyntax
Chapter34 • TheJavaPersistenceQueryLanguage 657
Forselectmethodquerieswithanaggregatefunction( AVG,COUNT,MAX,MIN,orSUM)inthe
SELECTclause,thefollowingrulesapply:
■TheAVG,MAX,MIN,and SUMfunctionsreturn nulliftherearenovaluestowhichthefunction
canbeapplied.
■TheCOUNTfunctionreturns0iftherearenovaluestowhichthefunctioncanbeapplied.
Thefollowingexamplereturnstheaverageorderquantity:
SELECT AVG(o.quantity)
FROM Order o
ThefollowingexamplereturnsthetotalcostoftheitemsorderedbyRoxaneCoss:
SELECT SUM(l.price)FROM Order o JOIN o.lineItems l JOIN o.customer cWHERE c.lastname = ’Coss’ AND c.firstname = ’Roxane’
Thefollowingexamplereturnsthetotalnumberoforders:
SELECT COUNT(o)FROM Order o
ThefollowingexamplereturnsthetotalnumberofitemsthathavepricesinHalIncandenza’s
order:
SELECT COUNT(l.price)
FROM Order o JOIN o.lineItems l JOIN o.customer cWHERE c.lastname = ’Incandenza’ AND c.firstname = ’Hal’
TheDISTINCTKeyword
TheDISTINCT keywordeliminatesduplicatereturnvalues.Ifaqueryreturnsa
java.util.Collection ,whichallowsduplicates,youmustspecifythe DISTINCT keywordto
eliminateduplicates.
ConstructorExpressions
ConstructorexpressionsallowyoutoreturnJavainstancesthatstoreaqueryresultelementinsteadofan Object[] .
Thefollowingquerycreatesa CustomerDetail instanceper Customer matchingthe WHERE
clause.A CustomerDetail storesthecustomernameandcustomer’scountryname.Sothe
queryreturnsa ListofCustomerDetail instances:
SELECT NEW com.xyz.CustomerDetail(c.name, c.country.name)
FROM customer c
WHERE c.lastname = ’Coss’ AND c.firstname = ’Roxane’FullQueryLanguageSyntax
TheJavaEE6Tutorial • January2013 658
ORDERBYClause
Asitsnamesuggests,the ORDER BY clauseordersthevaluesorobjectsreturnedbythequery.
Ifthe ORDER BY clausecontainsmultipleelements,theleft-to-rightsequenceoftheelements
determinesthehigh-to-lowprecedence.
TheASCkeywordspecifiesascendingorder,thedefault,andthe DESCkeywordindicates
descendingorder.
Whenusingthe ORDER BY clause,the SELECTclausemustreturnanorderablesetofobjectsor
values.Youcannotorderthevaluesorobjectsforvaluesorobjectsnotreturnedbythe SELECT
clause.Forexample,thefollowingqueryisvalidbecausethe ORDER BY clauseusestheobjects
returnedbythe SELECTclause:
SELECT o
FROM Customer c JOIN c.orders o JOIN c.address aWHERE a.state = ’CA’ORDER BY o.quantity, o.totalcost
Thefollowingexampleis notvalid,becausethe ORDER BY clauseusesavaluenotreturnedbythe
SELECTclause:
SELECT p.product_name
FROM Order o, IN(o.lineItems) l JOIN o.customer cWHERE c.lastname = ’Faehmel’ AND c.firstname = ’Robert’ORDER BY o.quantity
GROUPBYandHAVINGClauses
TheGROUP BY clauseallowsyoutogroupvaluesaccordingtoasetofproperties.
Thefollowingquerygroupsthecustomersbytheircountryandreturnsthenumberof
customerspercountry:
SELECT c.country, COUNT(c)
FROM Customer c GROUP BY c.country
TheHAVINGclauseisusedwiththe GROUP BY clausetofurtherrestrictthereturnedresultofa
query.
Thefollowingquerygroupsordersbythestatusoftheircustomerandreturnsthecustomer
statusplustheaverage totalPrice forallorderswherethecorrespondingcustomershasthe
samestatus.Inaddition,itconsidersonlycustomerswithstatus 1,2,or3,soordersofother
customersarenottakenintoaccount:
SELECT c.status, AVG(o.totalPrice)
FROM Order o JOIN o.customer c
GROUP BY c.status HAVING c.status IN (1, 2, 3)FullQueryLanguageSyntax
Chapter34 • TheJavaPersistenceQueryLanguage 659
660
UsingtheCriteriaAPItoCreateQueries
TheCriteriaAPIisusedtodefinequeriesforentitiesandtheirpersistentstatebycreating
query-definingobjects.CriteriaqueriesarewrittenusingJavaprogramminglanguageAPIs,aretypesafe,andareportable.Suchqueriesworkregardlessoftheunderlyingdatastore.
Thefollowingtopicsareaddressedhere:
■“OverviewoftheCriteriaandMetamodelAPIs”onpage661
■“UsingtheMetamodelAPItoModelEntityClasses”onpage663
■“UsingtheCriteriaAPIandMetamodelAPItoCreateBasicTypesafeQueries”onpage664
OverviewoftheCriteriaandMetamodelAPIs
SimilartoJPQL,theCriteriaAPIisbasedontheabstractschemaofpersistententities,their
relationships,andembeddedobjects.TheCriteriaAPIoperatesonthisabstractschematoallowdeveloperstofind,modify,anddeletepersistententitiesbyinvokingJavaPersistenceAPIentityoperations.TheMetamodelAPIworksinconcertwiththeCriteriaAPItomodelpersistententityclassesforCriteriaqueries.
TheCriteriaAPIandJPQLarecloselyrelatedandaredesignedtoallowsimilaroperationsin
theirqueries.DevelopersfamiliarwithJPQLsyntaxwillfindequivalentobject-leveloperationsintheCriteriaAPI.
ThefollowingsimpleCriteriaqueryreturnsallinstancesofthe Petentityinthedatasource:
EntityManager em = ...;
CriteriaBuilder cb = em.getCriteriaBuilder();CriteriaQuery<Pet> cq = cb.createQuery(Pet.class);Root<Pet> pet = cq.from(Pet.class);cq.select(pet);TypedQuery<Pet > q = em.createQuery(cq);
List<Pet> allPets = q.getResultList();
TheequivalentJPQLqueryis:35CHAPTER 35
661
SELECT p
FROM Pet p
ThisquerydemonstratesthebasicstepstocreateaCriteriaquery:
1. Usean EntityManager instancetocreatea CriteriaBuilder object.
2. Createaqueryobjectbycreatinganinstanceofthe CriteriaQuery interface.Thisquery
object’sattributeswillbemodifiedwiththedetailsofthequery.
3. Setthequeryrootbycallingthe frommethodonthe CriteriaQuery object.
4. Specifywhatthetypeofthequeryresultwillbebycallingthe selectmethodofthe
CriteriaQuery object.
5. Preparethequeryforexecutionbycreatinga TypedQuery<T> instance,specifyingthetypeof
thequeryresult.
6. Executethequerybycallingthe getResultList methodonthe TypedQuery<T> object.
Becausethisqueryreturnsacollectionofentities,theresultisstoredina List.
Thetasksassociatedwitheachsteparediscussedindetailinthischapter.Tocreatea CriteriaBuilder instance,callthe getCriteriaBuilder methodonthe
EntityManager instance:
CriteriaBuilder cb = em.getCriteriaBuilder();
Thequeryobjectiscreatedbyusingthe CriteriaBuilder instance:
CriteriaQuery<Pet> cq = cb.createQuery(Pet.class);
Thequerywillreturninstancesofthe Petentity,sothetypeofthequeryisspecifiedwhenthe
CriteriaQuery objectiscreatedtocreateatypesafequery.
TheFROMclauseofthequeryisset,andtherootofthequeryspecified,bycallingthe from
methodofthequeryobject:
Root<Pet> pet = cq.from(Pet.class);
TheSELECTclauseofthequeryissetbycallingthe selectmethodofthequeryobjectand
passinginthequeryroot:
cq.select(pet);
Thequeryobjectisnowusedtocreatea TypedQuery<T> objectthatcanbeexecutedagainstthe
datasource.Themodificationstothequeryobjectarecapturedtocreateaready-to-executequery:
TypedQuery<Pet > q = em.createQuery(cq);OverviewoftheCriteriaandMetamodelAPIs
TheJavaEE6Tutorial • January2013 662
Thistypedqueryobjectisexecutedbycallingits getResultList method,becausethisquery
willreturnmultipleentityinstances.Theresultsarestoredina List<Pet> collection-valued
object.
List<Pet> allPets = q.getResultList();
UsingtheMetamodelAPItoModelEntityClasses
TheMetamodelAPIisusedtocreateametamodelofthemanagedentitiesinaparticularpersistenceunit.Foreachentityclassinaparticularpackage,ametamodelclassiscreatedwithatrailingunderscoreandwithattributesthatcorrespondtothepersistentfieldsorpropertiesoftheentityclass.
Thefollowingentityclass, com.example.Pet ,hasfourpersistentfields: id,name,color,and
owners:
package com.example;
...@Entity
public class Pet {
@Idprotected Long id;protected String name;protected String color;@ManyToOneprotected Set<Owner> owners;...
}
ThecorrespondingMetamodelclassis:
package com.example;
...
@Static Metamodel(Pet.class)
public class Pet_ {
public static volatile SingularAttribute<Pet, Long> id;
public static volatile SingularAttribute<Pet, String> name;public static volatile SingularAttribute<Pet, String> color;public static volatile SetAttribute<Pet, Owner> owners;
}
ThemetamodelclassanditsattributesareusedinCriteriaqueriestorefertothemanagedentity
classesandtheirpersistentstateandrelationships.UsingtheMetamodelAPItoModelEntityClasses
Chapter35 • UsingtheCriteriaAPItoCreateQueries 663
UsingMetamodelClasses
Metamodelclassesthatcorrespondtoentityclassesareofthefollowingtype:
javax.persistence.metamodel.EntityType<T>
Metamodelclassesaretypicallygeneratedbyannotationprocessorseitheratdevelopmenttime
oratruntime.DevelopersofapplicationsthatuseCriteriaqueriesmaygeneratestaticmetamodelclassesbyusingthepersistenceprovider’sannotationprocessorormayobtainthemetamodelclassbyeithercallingthe getModel methodonthequeryrootobjectorfirst
obtaininganinstanceofthe Metamodel interfaceandthenpassingtheentitytypetothe
instance’s entitymethod.
Thefollowingcodesnippetshowshowtoobtainthe Petentity’smetamodelclassbycalling
Root<T>.getModel :
EntityManager em = ...;
CriteriaBuilder cb = em.getCriteriaBuilder();CriteriaQuery cq = cb.createQuery(Pet.class);Root<Pet> pet = cq.from(Pet.class);EntityType<Pet> Pet_ = pet.getModel();
Thefollowingcodesnippetshowshowtoobtainthe Petentity’smetamodelclassbyfirst
obtainingametamodelinstancebyusing EntityManager.getMetamodel andthencalling
entityonthemetamodelinstance:
EntityManager em = ...;
Metamode l m = em.getMetamodel();
EntityType<Pet> Pet_ = m.entity(Pet.class);
Note–Themostcommonusecaseistogeneratetype-safestaticmetamodelclassesat
developmenttime.Obtainingthemetamodelclassesdynamically,bycalling
Root<T>.getModel orEntityManager.getMetamodel andthenthe entitymethod,doesn’t
allowfortype-safetyanddoesn’tallowtheapplicationtocallpersistentfieldorpropertynamesonthemetamodelclass.
UsingtheCriteriaAPIandMetamodelAPItoCreateBasic
TypesafeQueries
ThebasicsemanticsofaCriteriaqueryconsistsofa SELECTclause,a FROMclause,andan
optional WHEREclause,similartoaJPQLquery.CriteriaqueriessettheseclausesbyusingJava
programminglanguageobjects,sothequerycanbecreatedinatypesafemanner.UsingtheCriteriaAPIandMetamodelAPItoCreateBasicTypesafeQueries
TheJavaEE6Tutorial • January2013 664
CreatingaCriteriaQuery
Thejavax.persistence.criteria.CriteriaBuilder interfaceisusedtoconstruct
■Criteriaqueries
■Selections
■Expressions
■Predicates
■Ordering
Toobtainaninstanceofthe CriteriaBuilder interface,callthe getCriteriaBuilder method
oneitheran EntityManager oran EntityManagerFactory instance.
Thefollowingcodeshowshowtoobtaina CriteriaBuilder instancebyusingthe
EntityManager.getCriteriaBuilder method.
EntityManager em = ...;
CriteriaBuilder cb = em.getCriteriaBuilder();
Criteriaqueriesareconstructedbyobtaininganinstanceofthefollowinginterface:
javax.persistence.criteria.CriteriaQuery
CriteriaQuery objectsdefineaparticularquerythatwillnavigateoveroneormoreentities.
Obtain CriteriaQuery instancesbycallingoneofthe CriteriaBuilder.createQuery
methods.Forcreatingtypesafequeries,callthe CriteriaBuilder.createQuery methodas
follows:
CriteriaQuery<Pet> cq = cb.createQuery(Pet.class);
TheCriteriaQuery object’stypeshouldbesettotheexpectedresulttypeofthequery.Inthe
precedingcode,theobject’stypeissetto CriteriaQuery<Pet> foraquerythatwillfind
instancesofthe Petentity.
Inthefollowingcodesnippet,a CriteriaQuery objectiscreatedforaquerythatreturnsa
String:
CriteriaQuery<String> cq = cb.createQuery(String.class);
QueryRoots
Foraparticular CriteriaQuery object,therootentityofthequery,fromwhichallnavigation
originates,iscalledthe queryroot .Itissimilartothe FROMclauseinaJPQLquery.
Createthequeryrootbycallingthe frommethodonthe CriteriaQuery instance.The
argumenttothe frommethodiseithertheentityclassoran EntityType<T> instanceforthe
entity.UsingtheCriteriaAPIandMetamodelAPItoCreateBasicTypesafeQueries
Chapter35 • UsingtheCriteriaAPItoCreateQueries 665
Thefollowingcodesetsthequeryroottothe Petentity:
CriteriaQuery<Pet> cq = cb.createQuery(Pet.class);
Root<Pet> pet = cq.from(Pet.class);
Thefollowingcodesetsthequeryroottothe Petclassbyusingan EntityType<T> instance:
EntityManager em = ...;
Metamode l m = em.getMetamodel();
EntityType<Pet> Pet_ = m.entity(Pet.class);Root<Pet> pet = cq.from(Pet_);
Criteriaqueriesmayhavemorethanonequeryroot.Thisusuallyoccurswhenthequery
navigatesfromseveralentities.
Thefollowingcodehastwo Rootinstances:
CriteriaQuery<Pet> cq = cb.createQuery(Pet.class);
Root<Pet> pet1 = cq.from(Pet.class);Root<Pet> pet2 = cq.from(Pet.class);
QueryingRelationshipsUsingJoins
Forqueriesthatnavigatetorelatedentityclasses,thequerymustdefineajointotherelated
entitybycallingoneofthe From.join methodsonthequeryrootobjectoranotherjoinobject.
Thejoinmethodsaresimilartothe JOINkeywordinJPQL.
ThetargetofthejoinusestheMetamodelclassoftype EntityType<T> tospecifythepersistent
fieldorpropertyofthejoinedentity.
Thejoinmethodsreturnanobjectoftype Join<X, Y> ,where Xisthesourceentityand Yisthe
targetofthejoin.Inthefollowingcodesnippet, Petisthesourceentity, Owneristhetarget,and
Pet_isastaticallygeneratedmetamodelclass:
CriteriaQuery<Pet> cq = cb.createQuery(Pet.class);
Root<Pet> pet = cq.from(Pet.class);
Join<Pet, Owner> owner = pet.join(Pet_.owners);
Joinscanbechainedtogethertonavigatetorelatedentitiesofthetargetentitywithouthavingto
createa Join<X, Y> instanceforeachjoin:
CriteriaQuery<Pet> cq = cb.createQuery(Pet.class);
Root<Pet> pet = cq.from(Pet.class);
Join<Owner, Address> address = cq.join(Pet_.owners).join(Owner_.addresses);UsingtheCriteriaAPIandMetamodelAPItoCreateBasicTypesafeQueries
TheJavaEE6Tutorial • January2013 666
PathNavigationinCriteriaQueries
Pathobjectsareusedinthe SELECTandWHEREclausesofaCriteriaqueryandcanbequeryroot
entities,joinentities,orother Pathobjects.The Path.get methodisusedtonavigateto
attributesoftheentitiesofaquery.
Theargumenttothe getmethodisthecorrespondingattributeoftheentity’sMetamodelclass.
Theattributecaneitherbeasingle-valuedattribute,specifiedby @SingularAttribute inthe
Metamodelclass,oracollection-valuedattribute,specifiedbyoneof @CollectionAttribute ,
@SetAttribute ,@ListAttribute ,or@MapAttribute .
Thefollowingqueryreturnsthenamesofallthepetsinthedatastore.The getmethodiscalled
onthequeryroot, pet,withthe nameattributeofthe Petentity’sMetamodelclass, Pet_,asthe
argument:
CriteriaQuery<String> cq = cb.createQuery(String.class);
Root<Pet> pet = cq.from(Pet.class);
cq.select(pet.get(Pet_.name));
RestrictingCriteriaQueryResults
Theresultsofaquerycanberestrictedonthe CriteriaQuery objectaccordingtoconditionsset
bycallingthe CriteriaQuery.where method.Callingthe wheremethodisanalogoustosetting
theWHEREclauseinaJPQLquery.
Thewheremethodevaluatesinstancesofthe Expression interfacetorestricttheresults
accordingtotheconditionsoftheexpressions. Expression instancesarecreatedbyusing
methodsdefinedinthe Expression andCriteriaBuilder interfaces.
TheExpression InterfaceMethods
AnExpression objectisusedinaquery’s SELECT,WHERE,orHAVINGclause.Table35–1 shows
conditionalmethodsyoucanusewith Expression objects.
TABLE35–1 ConditionalMethodsinthe Expression Interface
Method Description
isNull Testswhetheranexpressionisnull
isNotNull Testswhetheranexpressionisnotnull
in Testswhetheranexpressioniswithinalistofvalues
Thefollowingqueryusesthe Expression.isNull methodtofindallpetswherethe color
attributeisnull:UsingtheCriteriaAPIandMetamodelAPItoCreateBasicTypesafeQueries
Chapter35 • UsingtheCriteriaAPItoCreateQueries 667
CriteriaQuery<Pet> cq = cb.createQuery(Pet.class);
Root<Pet> pet = cq.from(Pet.class);cq.where(pet.get(Pet_.color).isNull());
Thefollowingqueryusesthe Expression.in methodtofindallbrownandblackpets:
CriteriaQuery<Pet> cq = cb.createQuery(Pet.class);
Root<Pet> pet = cq.from(Pet.class);cq.where(pet.get(Pet_.color).in( "brown ","black "));
Theinmethodalsocancheckwhetheranattributeisamemberofacollection.
ExpressionMethodsinthe CriteriaBuilder Interface
TheCriteriaBuilder interfacedefinesadditionalmethodsforcreatingexpressions.These
methodscorrespondtothearithmetic,string,date,time,andcaseoperatorsandfunctionsofJPQL.
Table35–2 showsconditionalmethodsyoucanusewith CriteriaBuilder objects.
TABLE35–2 ConditionalMethodsinthe CriteriaBuilder Interface
ConditionalMethod Description
equal Testswhethertwoexpressionsareequal
notEqual Testswhethertwoexpressionsarenotequal
gt Testswhetherthefirstnumericexpressionisgreaterthanthesecondnumeric
expression
ge Testswhetherthefirstnumericexpressionisgreaterthanorequaltothesecond
numericexpression
lt Testswhetherthefirstnumericexpressionislessthanthesecondnumericexpression
le Testswhetherthefirstnumericexpressionislessthanorequaltothesecondnumeric
expression
between Testswhetherthefirstexpressionisbetweenthesecondandthirdexpressioninvalue
like Testswhethertheexpressionmatchesagivenpattern
Thefollowingcodeusesthe CriteriaBuilder.equal method:
CriteriaQuery<Pet> cq = cb.createQuery(Pet.class);
Root<Pet> pet = cq.from(Pet.class);cq.where(cb.equal(pet.get(Pet_.name), "Fido"));
...
Thefollowingcodeusesthe CriteriaBuilder.gt method:
CriteriaQuery<Pet> cq = cb.createQuery(Pet.class);
Root<Pet> pet = cq.from(Pet.class);
Date someDate = new Date(...);cq.where(cb.gt(pet.get(Pet_.birthday), date));UsingtheCriteriaAPIandMetamodelAPItoCreateBasicTypesafeQueries
TheJavaEE6Tutorial • January2013 668
Thefollowingcodeusesthe CriteriaBuilder.between method:
CriteriaQuery<Pet> cq = cb.createQuery(Pet.class);
Root<Pet> pet = cq.from(Pet.class);Date firstDate = new Date(...);Date secondDate = new Date(...);cq.where(cb.between(pet.get(Pet_.birthday), firstDate, secondDate));
Thefollowingcodeusesthe CriteriaBuilder.like method:
CriteriaQuery<Pet> cq = cb.createQuery(Pet.class);
Root<Pet> pet = cq.from(Pet.class);cq.where(cb.like(pet.get(Pet_.name), "*do"));
Multipleconditionalpredicatescanbespecifiedbyusingthecompoundpredicatemethodsof
theCriteriaBuilder interface,asshownin Table35–3 .
TABLE35–3 CompoundPredicateMethodsinthe CriteriaBuilder Interface
Method Description
and AlogicalconjunctionoftwoBooleanexpressions
or AlogicaldisjunctionoftwoBooleanexpressions
not AlogicalnegationofthegivenBooleanexpression
Thefollowingcodeshowstheuseofcompoundpredicatesinqueries:
CriteriaQuery<Pet> cq = cb.createQuery(Pet.class);
Root<Pet> pet = cq.from(Pet.class);cq.where(cb.equal(pet.get(Pet_.name), "Fido")
.and(cb.equal(pet.get(Pet_.color), "brown ")));
ManagingCriteriaQueryResults
Forqueriesthatreturnmorethanoneresult,it’softenhelpfultoorganizethoseresults.The
CriteriaQuery interfacedefinesthe orderBymethodtoorderqueryresultsaccordingto
attributesofanentity.The CriteriaQuery interfacealsodefinesthe groupBymethodtogroup
theresultsofaquerytogetheraccordingtoattributesofanentity,andthe havingmethodto
restrictthosegroupsaccordingtoacondition.
OrderingResults
Theorderoftheresultsofaquerycanbesetbycallingthe CriteriaQuery.orderBy method
andpassinginan Orderobject. Orderobjectsarecreatedbycallingeitherthe
CriteriaBuilder.asc orthe CriteriaBuilder.desc method.The ascmethodisusedtoUsingtheCriteriaAPIandMetamodelAPItoCreateBasicTypesafeQueries
Chapter35 • UsingtheCriteriaAPItoCreateQueries 669
ordertheresultsbyascendingvalueofthepassedexpressionparameter.The descmethodis
usedtoordertheresultsbydescendingvalueofthepassedexpressionparameter.Thefollowingqueryshowstheuseofthe descmethod:
CriteriaQuery<Pet> cq = cb.createQuery(Pet.class);
Root<Pet> pet = cq.from(Pet.class);cq.select(pet);cq.orderBy(cb.desc(pet.get(Pet_.birthday)));
Inthisquery,theresultswillbeorderedbythepet’sbirthdayfromhighesttolowest.Thatis,
petsborninDecemberwillappearbeforepetsborninMay.
Thefollowingqueryshowstheuseofthe ascmethod:
CriteriaQuery<Pet> cq = cb.createQuery(Pet.class);
Root<Pet> pet = cq.from(Pet.class);Join<Owner, Address> address = cq.join(Pet_.owners).join(Owner_.address);cq.select(pet);cq.orderBy(cb.asc(address.get(Address_.postalCode)));
Inthisquery,theresultswillbeorderedbythepetowner’spostalcodefromlowesttohighest.
Thatis,petswhoseownerlivesinthe10001zipcodewillappearbeforepetswhoseownerlivesinthe91000zipcode.
Ifmorethanone Orderobjectispassedto orderBy,theprecedenceisdeterminedbytheorder
inwhichtheyappearintheargumentlistof orderBy.Thefirst Orderobjecthasprecedence.
Thefollowingcodeordersresultsbymultiplecriteria:
CriteriaQuery<Pet> cq = cb.createQuery(Pet.class);
Root<Pet> pet = cq.from(Pet.class);Join<Pet, Owner> owner = cq.join(Pet_.owners);cq.select(pet);cq.orderBy(cb.asc(owner.get(Owner_.lastName), owner.get(Owner_.firstName)));
Theresultsofthisquerywillbeorderedalphabeticallybythepetowner’slastname,thenfirst
name.
GroupingResults
TheCriteriaQuery.groupBy methodpartitionsthequeryresultsintogroups.Thesegroups
aresetbypassinganexpressionto groupBy:
CriteriaQuery<Pet> cq = cb.createQuery(Pet.class);
Root<Pet> pet = cq.from(Pet.class);cq.groupBy(pet.get(Pet_.color));
Thisqueryreturnsall Petentitiesandgroupstheresultsbythepet’scolor.
TheCriteriaQuery.having methodisusedinconjunctionwith groupBytofilteroverthe
groups.The havingmethodtakesaconditionalexpressionasaparameter.Bycallingthe
havingmethod,thequeryresultisrestrictedaccordingtotheconditionalexpression:UsingtheCriteriaAPIandMetamodelAPItoCreateBasicTypesafeQueries
TheJavaEE6Tutorial • January2013 670
CriteriaQuery<Pet> cq = cb.createQuery(Pet.class);
Root<Pet> pet = cq.from(Pet.class);cq.groupBy(pet.get(Pet_.color));cq.having(cb.in(pet.get(Pet_.color)).value( "brown ").value( "blonde "));
Inthisexample,thequerygroupsthereturned Petentitiesbycolor,asinthepreceding
example.However,theonlyreturnedgroupswillbe Petentitieswherethe colorattributeisset
tobrownorblonde.Thatis,nogray-coloredpetswillbereturnedinthisquery.
ExecutingQueries
Toprepareaqueryforexecution,createa TypedQuery<T> objectwiththetypeofthequery
resultbypassingthe CriteriaQuery objectto EntityManager.createQuery .
Queriesareexecutedbycallingeither getSingleResult orgetResultList onthe
TypedQuery<T> object.
Single-ValuedQueryResults
TheTypedQuery<T>.getSingleResult methodisusedforexecutingqueriesthatreturna
singleresult:
CriteriaQuery<Pet> cq = cb.createQuery(Pet.class);
...TypedQuery<Pet > q = em.createQuery(cq);
Pet result = q.getSingleResult();
Collection-ValuedQueryResults
TheTypedQuery<T>.getResultList methodisusedforexecutingqueriesthatreturna
collectionofobjects:
CriteriaQuery<Pet> cq = cb.createQuery(Pet.class);
...TypedQuery<Pet > q = em.createQuery(cq);
List<Pet> results = q.getResultList();UsingtheCriteriaAPIandMetamodelAPItoCreateBasicTypesafeQueries
Chapter35 • UsingtheCriteriaAPItoCreateQueries 671
672
CreatingandUsingString-BasedCriteria
Queries
Thischapterdescribeshowtocreateweakly-typedstring-basedCriteriaAPIqueries.
Thefollowingtopicsareaddressedhere:
■“OverviewofString-BasedCriteriaAPIQueries”onpage673
■“CreatingString-BasedQueries”onpage674
■“ExecutingString-BasedQueries”onpage675
OverviewofString-BasedCriteriaAPIQueries
String-basedCriteriaAPIqueries(“string-basedqueries”)areJavaprogramminglanguage
queriesthatusestringsratherthanstrongly-typedmetamodelobjectstospecifyentityattributeswhentraversingadatahierarchy.String-basedqueriesareconstructedsimilarlytometamodelqueries,canbestaticordynamic,andcanexpressthesamekindofqueriesandoperationsasstrongly-typedmetamodelqueries.
Strongly-typedmetamodelqueriesarethepreferredmethodofconstructingCriteriaAPI
queries.Themainadvantageofstring-basedqueriesovermetamodelqueriesistheabilitytoconstructCriteriaqueriesatdevelopmenttimewithouttheneedtogeneratestaticmetamodelclassesorotherwiseaccessdynamicallygeneratedmetamodelclasses.Themaindisadvantagetostring-basedqueriesistheirlackoftypesafety,whichmayleadtoruntimeerrorsduetotypemismatchesthatwouldbecaughtatdevelopmenttimewhenusingstrongly-typedmetamodelqueries.
Forinformationonconstructingcriteriaqueries,see
Chapter35,“UsingtheCriteriaAPIto
CreateQueries.”36CHAPTER 36
673
CreatingString-BasedQueries
Tocreateastring-basedquery,specifytheattributenamesofentityclassesdirectlyasstrings,
ratherthantheattributesofthemetamodelclass.Forexample,thisqueryfindsall Petentities
wherethevalueofthe nameattributeis Fido:
CriteriaQuery<Pet> cq = cb.createQuery(Pet.class);
Root<Pet> pet = cq.from(Pet.class);cq.where(cb.equal( pet.get("name") ,"Fido"));
...
Thenameoftheattributeisspecifiedasastring.Thisqueryistheequivalentofthefollowing
metamodelquery:
CriteriaQuery<Pet> cq = cb.createQuery(Pet.class);
Metamode l m = em.getMetamodel();
EntityType<Pet> Pet_ = m.entity(Pet.class);Root<Pet> pet = cq.from(Pet.class);cq.where(cb.equal(pet.get(Pet_.name), "Fido"));
Note–Typemismatcherrorsinstring-basedquerieswon’tappearuntilthecodeisexecutedat
runtime,unlikeintheabovemetamodelquery,wheretypemismatcheswillbecaughtatcompiletime.
Joinsarespecifiedinthesameway:
CriteriaQuery<Pet> cq = cb.createQuery(Pet.class);
Root<Pet> pet = cq.from(Pet.class);Join<Owner, Address> address = pet.join( "owners ").join( "addresses ");
...
Alltheconditionalexpressions,methodexpressions,pathnavigationmethods,andresult
restrictionmethodsusedinmetamodelqueriescanbeusedinstring-basedqueries.Ineachcase,theattributesarespecifiedusingstrings.Forexample,hereisastring-basedquerythatusesthe inexpression:
CriteriaQuery<Pet> cq = cb.createQuery(Pet.class);
Root<Pet> pet = cq.from(Pet.class);cq.where(pet.get( "color ").in( "brown ","black "));
Hereisastring-basedquerythatorderstheresultsindescendingorderbydate:
CriteriaQuery<Pet> cq = cb.createQuery(Pet.class);
Root<Pet> pet = cq.from(Pet.class);cq.select(pet);cq.orderBy(cb.desc(pet.get( "birthday ")));CreatingString-BasedQueries
TheJavaEE6Tutorial • January2013 674
ExecutingString-BasedQueries
String-basedqueriesareexecutedsimilarlytostrongly-typedCriteriaqueries.Firstcreatea
javax.persistence.TypedQuery objectbypassingthecriteriaqueryobjecttothe
EntityManager.createQuery methodandthencalleither getSingleResult or
getResultList onthequeryobjecttoexecutethequery.
CriteriaQuery<Pet> cq = cb.createQuery(Pet.class);
Root<Pet> pet = cq.from(Pet.class);cq.where(cb.equal(pet.get( "name"),"Fido"));
TypedQuery<Pet > q = em.createQuery(cq);
List<Pet> results = q.getResultList();ExecutingString-BasedQueries
Chapter36 • CreatingandUsingString-BasedCriteriaQueries 675
676
ControllingConcurrentAccesstoEntityData
withLocking
Thischapterdetailshowtohandleconcurrentaccesstoentitydata,andthelockingstrategies
availabletoJavaPersistenceAPIapplicationdevelopers.
Thefollowingtopicsareaddressedhere:
■“OverviewofEntityLockingandConcurrency”onpage677
■“LockModes”onpage679
OverviewofEntityLockingandConcurrency
Entitydatais concurrentlyaccessed ifthedatainadatasourceisaccessedatthesametimeby
multipleapplications.Specialcaremustbetakentoensurethattheunderlyingdata’sintegrityispreservedwhenaccessedconcurrently.
Whendataisupdatedinthedatabasetablesinatransaction,thepersistenceproviderassumes
thedatabasemanagementsystemwillholdshort-termreadlocksandlong-termwritelockstomaintaindataintegrity.Mostpersistenceproviderswilldelaydatabasewritesuntiltheendofthetransaction,exceptwhentheapplicationexplicitlycallsforaflush(thatis,theapplicationcallsthe EntityManager.flush methodorexecutesquerieswiththeflushmodesetto AUTO).
Bydefault,persistenceprovidersuse optimisticlocking ,where,beforecommittingchangesto
thedata,thepersistenceproviderchecksthatnoothertransactionhasmodifiedordeletedthedatasincethedatawasread.Thisisaccomplishedbyaversioncolumninthedatabasetable,withacorrespondingversionattributeintheentityclass.Whenarowismodified,theversionvalueisincremented.Theoriginaltransactioncheckstheversionattribute,andifthedatahasbeenmodifiedbyanothertransaction,a javax.persistence.OptimisticLockException will
bethrown,andtheoriginaltransactionwillberolledback.Whentheapplicationspecifiesoptimisticlockmodes,thepersistenceproviderverifiesthataparticularentityhasnotchangedsinceitwasreadfromthedatabaseeveniftheentitydatawasnotmodified.
Pessimisticlocking goesfurtherthanoptimisticlocking.Withpessimisticlocking,the
persistenceprovidercreatesatransactionthatobtainsalong-termlockonthedatauntilthe37CHAPTER 37
677
transactioniscompleted,whichpreventsothertransactionsfrommodifyingordeletingthe
datauntilthelockhasended.Pessimisticlockingisabetterstrategythanoptimisticlockingwhentheunderlyingdataisfrequentlyaccessedandmodifiedbymanytransactions.
Note–Usingpessimisticlocksonentitiesthatarenotsubjecttofrequentmodificationmay
resultindecreasedapplicationperformance.
UsingOptimisticLocking
Thejavax.persistence.Version annotationisusedtomarkapersistentfieldorpropertyasa
versionattributeofanentity.Byaddingaversionattribute,theentityisenabledforoptimisticconcurrencycontrol.Theversionattributeisreadandupdatedbythepersistenceproviderwhenanentityinstanceismodifiedduringatransaction.Theapplicationmayreadtheversionattribute,but mustnotmodifythevalue.
Note–Althoughsomepersistenceprovidersmaysupportoptimisticlockingforentitiesthatdo
nothaveversionattributes,portableapplicationsshouldalwaysuseentitieswithversionattributeswhenusingoptimisticlocking.Iftheapplicationattemptstolockanentitywithoutaversionattribute,andthepersistenceproviderdoesn’tsupportoptimisticlockingfornon-versionedentities,a PersistenceException willbethrown.
The@Version annotationhasthefollowingrequirements:
■Onlyasingle @Version attributemaybedefinedperentity.
■The@Version attributemustbeintheprimarytableforanentitymappedtomultipletables.
■Thetypeofthe @Version attributemustbeoneofthefollowing: int,Integer,long,Long,
short,Short,orjava.sql.Timestamp .
Thefollowingcodesnippetshowshowtodefineaversionattributeinanentitywithpersistent
fields:
@Version
protected int version;OverviewofEntityLockingandConcurrency
TheJavaEE6Tutorial • January2013 678
Thefollowingcodesnippetshowshowtodefineaversionattributeinanentitywithpersistent
properties:
@Version
protected Short getVersion() { ... }
LockModes
Theapplicationmayincreasetheleveloflockingforanentitybyspecifyingtheuseoflock
modes.Lockmodesmaybespecifiedtoincreasethelevelofoptimisticlockingortorequesttheuseofpessimisticlocks.
Theuseofoptimisticlockmodescausesthepersistenceprovidertochecktheversionattributes
forentitiesthatwereread(butnotmodified)duringatransactionaswellasforentitiesthatwereupdated.
Theuseofpessimisticlockmodesspecifiesthatthepersistenceprovideristoimmediately
acquirelong-termreadorwritelocksforthedatabasedatacorrespondingtoentitystate.
Thelockmodeforanentityoperationmaybesetbyspecifyingoneofthelockmodesdefinedin
thejavax.persistence.LockModeType enumeratedtype,listedin
Table37–1 .
TABLE37–1 LockModesforConcurrentEntityAccess
LockMode Description
OPTIMISTIC Obtainanoptimisticreadlockforallentitieswithversionattributes.
OPTIMISTIC_FORCE_INCREMENT Obtainanoptimisticreadlockforallentitieswithversionattributes,
andincrementtheversionattributevalue.
PESSIMISTIC_READ Immediatelyobtainalong-termreadlockonthedatatopreventthe
datafrombeingmodifiedordeleted.Othertransactionsmayreadthedatawhilethelockismaintained,butmaynotmodifyordeletethedata.
Thepersistenceproviderispermittedtoobtainadatabasewritelock
whenareadlockwasrequested,butnotviceversa.
PESSIMISTIC_WRITE Immediatelyobtainalong-termwritelockonthedatatoprevent
thedatafrombeingread,modified,ordeleted.
PESSIMISTIC_FORCE_INCREMENT Immediatelyobtainalong-termlockonthedatatopreventthedata
frombeingmodifiedordeleted,andincrementtheversionattributeofversionedentities.
READ Asynonymfor OPTIMISTIC .Useof LockModeType.OPTIMISTIC isto
bepreferredfornewapplications.LockModes
Chapter37 • ControllingConcurrentAccesstoEntityDatawithLocking 679
TABLE37–1 LockModesforConcurrentEntityAccess (Continued)
LockMode Description
WRITE Asynonymfor OPTIMISTIC_FORCE_INCREMENT .Useof
LockModeType.OPTIMISTIC_FORCE_INCREMENT istobepreferredfor
newapplications.
NONE Noadditionallockingwilloccuronthedatainthedatabase.
SettingtheLockMode
Thelockmodemaybespecifiedbyoneofthefollowingtechniques:
■Callingthe EntityManager.lock andpassinginoneofthelockmodes:
EntityManager em = ...;
Person person = ...;em.lock(person, LockModeType.OPTIMISTIC);
■Callingoneofthe EntityManager.find methodsthattakesthelockmodeasaparameter:
EntityManager em = ...;
String personPK = ...;Person person = em.find(Person.class, personPK,
LockModeType.PESSIMISTIC_WRITE);
■Callingoneofthe EntityManager.refresh methodsthattakesthelockmodeasa
parameter:
EntityManager em = ...;
String personPK = ...;Person person = em.find(Person.class, personPK);...em.refresh(person, LockModeType.OPTIMISTIC_FORCE_INCREMENT);
■Callingthe Query.setLockMode orTypedQuery.setLockMode method,passingthelock
modeastheparameter:
Quer y q = em.createQuery(...);
q.setLockMode(LockModeType.PESSIMISTIC_FORCE_INCREMENT);
■Addinga lockMode elementtothe @NamedQuery annotation:
@NamedQuery(name= "lockPersonQuery ",
query= "SELECT p FROM Person p WHERE p.name LIKE :name ",
lockMode=PESSIMISTIC_READ)
UsingPessimisticLocking
Versionedentitiesaswellasentitiesthatdonothaveversionattributescanbelocked
pessimistically.
Tolockentitiespessimistically,setthelockmodeto PESSIMISTIC_READ ,PESSIMISTIC_WRITE ,
orPESSIMISTIC_FORCE_INCREMENT .LockModes
TheJavaEE6Tutorial • January2013 680
Ifapessimisticlockcannotbeobtainedonthedatabaserows,andthefailuretolockthedata
resultsinatransactionrollback,a PessimisticLockException isthrown.Ifapessimisticlock
cannotbeobtained,butthelockingfailuredoesn’tresultinatransactionrollback,aLockTimeoutException isthrown.
Pessimisticallylockingaversionentitywith PESSIMISTIC_FORCE_INCREMENT resultsinthe
versionattributebeingincrementedeveniftheentitydataisunmodified.Whenpessimisticallylockingaversionedentity,thepersistenceproviderwillperformtheversionchecksthatoccurduringoptimisticlocking,andiftheversioncheckfails,an OptimisticLockException willbe
thrown.Attemptingtolockanon-versionedentitywith PESSIMISTIC_FORCE_INCREMENT isnot
portableandmayresultina PersistenceException ifthepersistenceproviderdoesn’tsupport
optimisticlocksfornon-versionedentities.LockingaversionedentitywithPESSIMISTIC_WRITE resultsintheversionattributebeingincrementedifthetransactionwas
successfullycommitted.
PessimisticLockingTimeouts
Thelengthoftimeinmillisecondsthepersistenceprovidershouldwaittoobtainalockonthedatabasetablesmaybespecifiedusingthe javax.persistence.lock.timeout property.Ifthe
timeittakestoobtainalockexceedsthevalueofthisproperty,a LockTimeoutException willbe
thrown,butthecurrenttransactionwillnotbemarkedforrollback.Ifthispropertyissetto 0,
thepersistenceprovidershouldthrowa LockTimeoutException ifitcannotimmediately
obtainalock.
Note–Portableapplicationsshouldnotrelyonthesettingof
javax.persistence.lock.timeout ,asthelockingstrategyandunderlyingdatabasemaymean
thatthetimeoutvaluecannotbeused.Thevalueof javax.persistence.lock.timeout isa
hint,notacontract.
Thispropertymaybesetprogrammaticallybypassingittothe EntityManager methodsthat
allowlockmodestobespecified,the Query.setLockMode andTypedQuery.setLockMode
methods,the @NamedQuery annotation,andasapropertytothe
Persistence.createEntityManagerFactory method.Itmayalsobesetasapropertyinthe
persistence.xml deploymentdescriptor.
Ifjavax.persistence.lock.timeout issetinmultipleplaces,thevaluewillbedeterminedin
thefollowingorder:
1. Theargumenttooneofthe EntityManager orQuerymethods.
2. Thesettinginthe @NamedQuery annotation.
3. Theargumenttothe Persistence.createEntityManagerFactory method.
4. Thevalueinthe persistence.xml deploymentdescriptor.LockModes
Chapter37 • ControllingConcurrentAccesstoEntityDatawithLocking 681
682
UsingaSecond-LevelCachewithJava
PersistenceAPIApplications
Thischapterexplainshowtomodifythesecond-levelcachemodesettingstoimprovethe
performanceofapplicationsthatusetheJavaPersistenceAPI.
Thefollowingtopicsareaddressedhere:
■“OverviewoftheSecond-LevelCache”onpage683
■“SpecifyingtheCacheModeSettingstoImprovePerformance”onpage685
OverviewoftheSecond-LevelCache
Asecond-levelcache isalocalstoreofentitydatamanagedbythepersistenceproviderto
improveapplicationperformance.Asecond-levelcachehelpsimproveperformancebyavoidingexpensivedatabasecalls,keepingtheentitydatalocaltotheapplication.Asecond-levelcacheistypicallytransparenttotheapplication,asitismanagedbythepersistenceproviderandunderliesthepersistencecontextofanapplication.Thatis,theapplicationreadsandcommitsdatathroughthenormalentitymanageroperationswithoutknowingaboutthecache.
Note–Persistenceprovidersarenotrequiredtosupportasecond-levelcache.Portable
applicationsshouldnotrelyonsupportbypersistenceprovidersforasecond-levelcache.
Thesecond-levelcacheforapersistenceunitmaybeconfiguredtooneofseveralsecond-levelcachemodes.ThefollowingcachemodesettingsaredefinedbytheJavaPersistenceAPI.
TABLE38–1 CacheModeSettingsfortheSecond-LevelCache
CacheModeSetting Description
ALL Allentitydataisstoredinthesecond-levelcacheforthispersistence
unit.38CHAPTER 38
683
TABLE38–1 CacheModeSettingsfortheSecond-LevelCache (Continued)
CacheModeSetting Description
NONE Nodataiscachedinthepersistenceunit.Thepersistenceprovidermust
notcacheanydata.
ENABLE_SELECTIVE Enablecachingforentitiesthathavebeenexplicitlysetwiththe
@Cacheable annotation.
DISABLE_SELECTIVE Enablecachingforallentitiesexceptthosethathavebeenexplicitlyset
withthe @Cacheable(false) annotation.
UNSPECIFIED Thecachingbehaviorforthepersistenceunitisundefined.The
persistenceprovider’sdefaultcachingbehaviorwillbeused.
Oneconsequenceofusingasecond-levelcacheinanapplicationisthattheunderlyingdata
mayhavechangedinthedatabasetables,whilethevalueinthecachehasnot,acircumstancecalledastaleread.Stalereadsmaybeavoidedbychangingthesecond-levelcachetooneofthe
cachemodesettings,controllingwhichentitiesmaybecached(describedin
“Controlling
WhetherEntitiesMayBeCached”onpage684 ),orchangingthecache’sretrievalorstoremodes
(describedin “SettingtheCacheRetrievalandStoreModes”onpage686 ).Whichstrategiesbest
avoidstalereadsareapplicationdependent.
ControllingWhetherEntitiesMayBeCached
Thejavax.persistence.Cacheable annotationisusedtospecifythatanentityclass,andany
subclasses,maybecachedwhenusingthe ENABLE_SELECTIVE orDISABLE_SELECTIVE cache
modes.Subclassesmayoverridethe @Cacheable settingbyaddinga @Cacheable annotation
andchangingthevalue.
Tospecifythatanentitymaybecached,adda @Cacheable annotationattheclasslevel:
@Cacheable
@Entitypublic class Person { ... }
Bydefault,the @Cacheable annotationis true.Thefollowingexampleisequivalent:
@Cacheable(true)
@Entitypublic class Person{ ... }OverviewoftheSecond-LevelCache
TheJavaEE6Tutorial • January2013 684
Tospecifythatanentitymustnotbecached,adda @Cacheable annotationandsetitto false:
@Cacheable(false)
@Entitypublic class OrderStatus { ... }
Whenthe ENABLE_SELECTIVE cachemodeisset,thepersistenceproviderwillcacheanyentities
thathavethe @Cacheable(true) annotationandanysubclassesofthatentitythathavenotbeen
overridden.Thepersistenceproviderwillnotcacheentitiesthathave @Cacheable(false) or
haveno @Cacheable annotation.Thatis,the ENABLE_SELECTIVE modewillcacheonlyentities
thathavebeenexplicitlymarkedforthecacheusingthe @Cacheable annotation.
Whenthe DISABLE_SELECTIVE cachemodeisset,thepersistenceproviderwillcacheany
entitiesthat donothavethe @Cacheable(false) annotation.Entitiesthatdonothave
@Cacheable annotations,andentitieswiththe @Cacheable(true) annotationwillbecached.
Thatis,the DISABLE_SELECTIVE modewillcacheallentitiesthathavenotbeenexplicitly
preventedfrombeingcached.
Ifthecachemodeissetto UNDEFINED ,orisleftunset,thebehaviorofentitiesannotatedwith
@Cacheable isundefined.Ifthecachemodeissetto ALLorNONE,thevalueofthe @Cacheable
annotationisignoredbythepersistenceprovider.
SpecifyingtheCacheModeSettingstoImprovePerformance
Toadjustthecachemodesettingsforapersistenceunit,specifyoneofthecachemodesasthevalueofthe shared-cache-mode elementinthe persistence.xml deploymentdescriptor
(shownin bold):
<persistence-unit name= "examplePU "transaction-type= "JTA">
<provider>org.eclipse.persistence.jpa.PersistenceProvider</provider><jta-data-source>jdbc/__default</jta-data-source><shared-cache-mode>DISABLE_SELECTIVE</shared-cache-mode>
</persistence-unit>
Note–Becausesupportforasecond-levelcacheisnotrequiredbytheJavaPersistenceAPI
specification,settingthesecond-levelcachemodein persistence.xml willhavenoeffectwhen
usingapersistenceproviderthatdoesnotimplementasecond-levelcache.SpecifyingtheCacheModeSettingstoImprovePerformance
Chapter38 • UsingaSecond-LevelCachewithJavaPersistenceAPIApplications 685
Alternatively,thesharedcachemodemaybespecifiedbysettingthe
javax.persistence.sharedCache.mode propertytooneofthesharedcachemodesettings:
EntityManagerFactor emf =
Persistence.createEntityManagerFactory(
"myExamplePU ", new Properties().add(
"javax.persistence.sharedCache.mode ","ENABLE_SELECTIVE "));
SettingtheCacheRetrievalandStoreModes
Ifthesecond-levelcachehasbeenenabledforapersistenceunitbysettingthesharedcache
mode,thebehaviorofthesecond-levelcachecanbefurthermodifiedbysettingthejavax.persistence.cache.retrieveMode andjavax.persistence.cache.storeMode
properties.Thesepropertiesmaybesetatthepersistencecontextlevelbypassingthepropertynameandvaluetothe EntityManager.setProperty method,ormaybesetona
per-EntityManager operation( EntityManager.find orEntityManager.refresh )or
per-querylevel.
CacheRetrievalMode
Thecacheretrievalmode,setbythe javax.persistence.retrieveMode property,controls
howdataisreadfromthecacheforcallstothe EntityManager.find methodandfromqueries.
TheretrieveMode propertycanbesettooneoftheconstantsdefinedbythe
javax.persistence.CacheRetrieveMode enumeratedtype,either USE(thedefault)or BYPASS.
Whenitissetto USE,dataisretrievedfromthesecond-levelcache,ifavailable.Ifthedataisnot
inthecache,thepersistenceproviderwillreaditfromthedatabase.Whenitissetto BYPASS,the
second-levelcacheisbypassedandacalltothedatabaseismadetoretrievethedata.
CacheStoreMode
Thecachestoremode,setbythe javax.persistence.storeMode property,controlshowdata
isstoredinthecache.
ThestoreMode propertycanbesettooneoftheconstantsdefinedbythe
javax.persistence.CacheStoreMode enumeratedtype,either USE(thedefault), BYPASS,or
REFRESH.Whensetto USEthecachedataiscreatedorupdatedwhendataisreadfromor
committedtothedatabase.Ifdataisalreadyinthecache,settingthestoremodeto USEwillnot
forcearefreshwhendataisreadfromthedatabase.
Whenthestoremodeissetto BYPASS,datareadfromorcommittedtothedatabaseis not
insertedorupdatedinthecache.Thatis,thecacheisunchanged.
Whenthestoremodeissetto REFRESH,thecachedataiscreatedorupdatedwhendataisread
fromorcommittedtothedatabase,andarefreshisforcedondatainthecacheupondatabasereads.SpecifyingtheCacheModeSettingstoImprovePerformance
TheJavaEE6Tutorial • January2013 686
SettingtheCacheRetrievalorStoreMode
Tosetthecacheretrievalorstoremodeforthepersistencecontext,callthe
EntityManager.setProperty methodwiththepropertynameandvaluepair:
EntityManager em = ...;
em.setProperty( "javax.persistence.cache.storeMode ","BYPASS ");
Tosetthecacheretrievalorstoremodewhencallingthe EntityManger.find or
EntityManager.refresh methods,firstcreatea Map<String, Object> instanceandadda
name/valuepairasfollows:
EntityManager em = ...;
Map<String, Object> props = new HashMap<String, Object>();props.put( "javax.persistence.cache.retrieveMode ","BYPASS ");
String personPK = ...;Person person = em.find(Person.class, personPK, props);
Note–Thecacheretrievemodeisignoredwhencallingthe EntityManager.refresh method,as
callsto refreshalwaysresultindatabeingreadfromthedatabase,notthecache.
Tosettheretrievalorstoremodewhenusingqueries,callthe Query.setHint or
TypedQuery.setHint methods,dependingonthetypeofquery:
EntityManager em = ...;
CriteriaQuery<Person> cq = ...;TypedQuery<Person > q = em.createQuery(cq);
q.setHint( "javax.persistence.cache.storeMode ","REFRESH ");
...
Settingthestoreorretrievemodeinaqueryorwhencallingthe EntityManager.find or
EntityManager.refresh methodoverridesthesettingoftheentitymanager.
ControllingtheSecond-LevelCacheProgrammatically
Thejavax.persistence.Cache interfacedefinesmethodsforinteractingwiththesecond-level
cacheprogrammatically.The Cacheinterfacedefinesmethodstocheckwhetheraparticular
entityhascacheddata,toremoveaparticularentityfromthecache,toremoveallinstances(andinstancesofsubclasses)ofanentityclassfromthecache,andtoclearthecacheofallentitydata.
Note–Ifthesecond-levelcachehasbeendisabled,callstothe Cacheinterface’smethodshaveno
effect,exceptfor contains ,whichwillalwaysreturn false.SpecifyingtheCacheModeSettingstoImprovePerformance
Chapter38 • UsingaSecond-LevelCachewithJavaPersistenceAPIApplications 687
CheckingWhetheranEntity’sDataIsCached
Callthe Cache.contains methodtofindoutwhetheragivenentityiscurrentlyinthe
second-levelcache.The contains methodreturns trueiftheentity’sdataiscached,and false
ifthedataisnotinthecache.
EntityManager em = ...;
Cache cache = em.getEntityManagerFactory().getCache();String personPK = ...;if (cache.contains(Person.class, personPK)) {
// the data is cached
} else {
// the data is NOT cached
}
RemovinganEntityfromtheCache
Calloneofthe Cache.evict methodstoremoveaparticularentityorallentitiesofagiventype
fromthesecond-levelcache.Toremoveaparticularentityfromthecache,callthe evict
methodandpassintheentityclassandtheprimarykeyoftheentity:
EntityManager em = ...;
Cache cache = em.getEntityManagerFactory().getCache();String personPK = ...;cache.evict(Person.class, personPK);
Toremoveallinstancesofaparticularentityclass,includingsubclasses,callthe evictmethod
andspecifytheentityclass:
EntityManager em = ...;
Cache cache = em.getEntityManagerFactory().getCache();cache.evict(Person.class);
Allinstancesofthe Personentityclasswillberemovedfromthecache.Ifthe Personentityhasa
subclass, Student,callstotheabovemethodwillremoveallinstancesof Studentfromthe
cacheaswell.
RemovingAllDatafromtheCache
Callthe Cache.evictAll methodtocompletelyclearthesecond-levelcache:
EntityManager em = ...;
Cache cache = em.getEntityManagerFactory().getCache();cache.evictAll();SpecifyingtheCacheModeSettingstoImprovePerformance
TheJavaEE6Tutorial • January2013 688
Security
PartVIIexploressecurityconceptsandexamples.Thispartcontainsthefollowing
chapters:
■Chapter39,“IntroductiontoSecurityintheJavaEEPlatform”
■Chapter40,“GettingStartedSecuringWebApplications”
■Chapter41,“GettingStartedSecuringEnterpriseApplications”
■Chapter42,“JavaEESecurity:AdvancedTopics”PART VII
689
690
IntroductiontoSecurityintheJavaEEPlatform
Everyenterprisethathaseithersensitiveresourcesthatcanbeaccessedbymanyusersor
resourcesthattraverseunprotected,open,networks,suchastheInternet,needstobeprotected.Thischapterintroducesbasicsecurityconceptsandsecuritymechanisms.MoreinformationontheseconceptsandmechanismscanbefoundinthechapteronsecurityintheJavaEE6specification.Thisdocumentisavailablefordownloadonlineat
http://www.jcp.org/en/
jsr/detail?id=316 .
OtherchaptersinPartVIIdiscusssecurityrequirementsinwebtierandenterprisetier
applications:
■Chapter40,“GettingStartedSecuringWebApplications,” explainshowtoaddsecurityto
webcomponents,suchasservlets.
■Chapter41,“GettingStartedSecuringEnterpriseApplications,” explainshowtoadd
securitytoJavaEEcomponents,suchasenterprisebeansandapplicationclients.
Someofthematerialinthischapterassumesthatyouunderstandbasicsecurityconcepts.To
learnmoreabouttheseconceptsbeforeyoubeginthischapter,youshouldexploretheJavaSEsecuritywebsiteat
http://docs.oracle.com/javase/6/docs/technotes/guides/
security/ .
Thefollowingtopicsareaddressedhere:
■“OverviewofJavaEESecurity”onpage692
■“SecurityMechanisms”onpage697
■“SecuringContainers”onpage700
■“SecuringtheGlassFishServer”onpage702
■“WorkingwithRealms,Users,Groups,andRoles”onpage702
■“EstablishingaSecureConnectionUsingSSL”onpage710
■“FurtherInformationaboutSecurity”onpage71139CHAPTER 39
691
OverviewofJavaEESecurity
Enterprisetierandwebtierapplicationsaremadeupofcomponentsthataredeployedinto
variouscontainers.Thesecomponentsarecombinedtobuildamultitierenterpriseapplication.
Securityforcomponentsisprovidedbytheircontainers.Acontainerprovidestwokindsofsecurity:declarativeandprogrammatic.
■Declarativesecurity expressesanapplicationcomponent’ssecurityrequirementsbyusing
eitherdeploymentdescriptorsorannotations.
AdeploymentdescriptorisanXMLfilethatisexternaltotheapplicationandthatexpresses
anapplication’ssecuritystructure,includingsecurityroles,accesscontrol,andauthenticationrequirements.Formoreinformationaboutdeploymentdescriptors,read
“UsingDeploymentDescriptorsforDeclarativeSecurity”onpage701 .
Annotations,alsocalledmetadata,areusedtospecifyinformationaboutsecuritywithina
classfile.Whentheapplicationisdeployed,thisinformationcanbeeitherusedbyoroverriddenbytheapplicationdeploymentdescriptor.AnnotationssaveyoufromhavingtowritedeclarativeinformationinsideXMLdescriptors.Instead,yousimplyputannotationsonthecode,andtherequiredinformationgetsgenerated.Forthistutorial,annotationsareusedforsecuringapplicationswhereverpossible.Formoreinformationaboutannotations,see
“UsingAnnotationstoSpecifySecurityInformation”onpage700 .
■Programmaticsecurity isembeddedinanapplicationandisusedtomakesecuritydecisions.
Programmaticsecurityisusefulwhendeclarativesecurityaloneisnotsufficienttoexpressthesecuritymodelofanapplication.Formoreinformationaboutprogrammaticsecurity,read
“UsingProgrammaticSecurity”onpage701 .
ASimpleApplicationSecurityWalkthrough
ThesecuritybehaviorofaJavaEEenvironmentmaybebetterunderstoodbyexaminingwhathappensinasimpleapplicationwithawebclient,auserinterface,andenterprisebeanbusinesslogic.
Inthefollowingexample,whichistakenfromtheJavaEE6Specification,thewebclientrelies
onthewebservertoactasitsauthenticationproxybycollectinguserauthenticationdatafromtheclientandusingittoestablishanauthenticatedsession.
Step1:InitialRequest
Inthefirststepofthisexample,thewebclientrequeststhemainapplicationURL.Thisactionisshownin
Figure39–1 .OverviewofJavaEESecurity
TheJavaEE6Tutorial • January2013 692
Sincetheclienthasnotyetauthenticateditselftotheapplicationenvironment,theserver
responsiblefordeliveringthewebportionoftheapplication,hereafterreferredtoasthe web
server,detectsthisandinvokestheappropriateauthenticationmechanismforthisresource.For
moreinformationonthesemechanisms,see “SecurityMechanisms”onpage697 .
Step2:InitialAuthentication
Thewebserverreturnsaformthatthewebclientusestocollectauthenticationdata,suchasusernameandpassword,fromtheuser.Thewebclientforwardstheauthenticationdatatothewebserver,whereitisvalidatedbythewebserver,asshownin
Figure39–2 .Thevalidation
mechanismmaybelocaltoaserverormayleveragetheunderlyingsecurityservices.Onthebasisofthevalidation,thewebserversetsacredentialfortheuser.
Step3:URLAuthorization
Thecredentialisusedforfuturedeterminationsofwhethertheuserisauthorizedtoaccessrestrictedresourcesitmayrequest.Thewebserverconsultsthesecuritypolicyassociatedwiththewebresourcetodeterminethesecurityrolesthatarepermittedaccesstotheresource.Thesecuritypolicyisderivedfromannotationsorfromthedeploymentdescriptor.Thewebcontainerthenteststheuser’scredentialagainsteachroletodeterminewhetheritcanmaptheusertotherole.
Figure39–3 showsthisprocess.FIGURE39–1 InitialRequest
Request access to
protected resource
Web Client Web Server
FIGURE39–2 InitialAuthentication
Web Server
Web ClientForm
Authentication
data
CredentialOverviewofJavaEESecurity
Chapter39 • IntroductiontoSecurityintheJavaEEPlatform 693
Thewebserver’sevaluationstopswithan“isauthorized”outcomewhenthewebserverisable
tomaptheusertoarole.A“notauthorized”outcomeisreachedifthewebserverisunabletomaptheusertoanyofthepermittedroles.
Step4:FulfillingtheOriginalRequest
Iftheuserisauthorized,thewebserverreturnstheresultoftheoriginalURLrequest,asshownin
Figure39–4 .
Inourexample,theresponseURLofawebpageisreturned,enablingtheusertopostformdata
thatneedstobehandledbythebusiness-logiccomponentoftheapplication.See Chapter40,
“GettingStartedSecuringWebApplications,” formoreinformationonprotectingweb
applications.
Step5:InvokingEnterpriseBeanBusinessMethods
Thewebpageperformstheremotemethodcalltotheenterprisebean,usingtheuser’scredentialtoestablishasecureassociationbetweenthewebpageandtheenterprisebean,as
shownin
Figure39–5 .Theassociationisimplementedastworelatedsecuritycontexts:onein
thewebserverandoneintheEJBcontainer.FIGURE39–3 URLAuthorization
Web Server
Requested 
access to 
protected 
resourceSession
Context
Credential
 Web 
Component
Authorization
Web Client
FIGURE39–4 FulfillingtheOriginalRequest
Web Server
Session
Context
Web 
ComponentWeb ClientResult of request
Post to
business logic
CredentialOverviewofJavaEESecurity
TheJavaEE6Tutorial • January2013 694
TheEJBcontainerisresponsibleforenforcingaccesscontrolontheenterprisebeanmethod.
Thecontainerconsultsthesecuritypolicyassociatedwiththeenterprisebeantodeterminethesecurityrolesthatarepermittedaccesstothemethod.Thesecuritypolicyisderivedfromannotationsorfromthedeploymentdescriptor.Foreachrole,theEJBcontainerdetermineswhetheritcanmapthecallertotherolebyusingthesecuritycontextassociatedwiththecall.
Thecontainer’sevaluationstopswithan“isauthorized”outcomewhenthecontainerisableto
mapthecaller’scredentialtoarole.A“notauthorized”outcomeisreachedifthecontainerisunabletomapthecallertoanyofthepermittedroles.A“notauthorized”resultcausesanexceptiontobethrownbythecontainerandpropagatedbacktothecallingwebpage.
Ifthecallisauthorized,thecontainerdispatchescontroltotheenterprisebeanmethod.The
resultofthebean’sexecutionofthecallisreturnedtothewebpageandultimatelytotheuserbythewebserverandthewebclient.
FeaturesofaSecurityMechanism
Aproperlyimplementedsecuritymechanismwillprovidethefollowingfunctionality:
■Preventunauthorizedaccesstoapplicationfunctionsandbusinessorpersonaldata(authentication)
■Holdsystemusersaccountableforoperationstheyperform(non-repudiation)
■Protectasystemfromserviceinterruptionsandotherbreachesthataffectqualityofservice
Ideally,properlyimplementedsecuritymechanismswillalsobe
■Easytoadminister
■Transparenttosystemusers
■InteroperableacrossapplicationandenterpriseboundariesFIGURE39–5 InvokinganEnterpriseBeanBusinessMethod
Web ClientWeb Server EJB
ContainerCredential
used to
establish
security
association
Remote
call Session
ContextSecurity
ContextSecurity
Context
Credential
Web 
Component
Authorization
EJBOverviewofJavaEESecurity
Chapter39 • IntroductiontoSecurityintheJavaEEPlatform 695
CharacteristicsofApplicationSecurity
JavaEEapplicationsconsistofcomponentsthatcancontainbothprotectedandunprotected
resources.Often,youneedtoprotectresourcestoensurethatonlyauthorizedusershaveaccess.Authorizationprovidescontrolledaccesstoprotectedresources.Authorizationisbasedonidentificationandauthentication. Identification isaprocessthatenablesrecognitionofanentity
byasystem,andauthenticationisaprocessthatverifiestheidentityofauser,device,orotherentityinacomputersystem,usuallyasaprerequisitetoallowingaccesstoresourcesinasystem.
Authorizationandauthenticationarenotrequiredforanentitytoaccessunprotected
resources.Accessingaresourcewithoutauthenticationisreferredtoasunauthenticated,oranonymous,access.
Thecharacteristicsofapplicationsecuritythat,whenproperlyaddressed,helptominimizethe
securitythreatsfacedbyanenterpriseincludethefollowing:
■Authentication :Themeansbywhichcommunicatingentities,suchasclientandserver,
provetoeachotherthattheyareactingonbehalfofspecificidentitiesthatareauthorizedforaccess.Thisensuresthatusersarewhotheysaytheyare.
■Authorization ,oraccesscontrol :Themeansbywhichinteractionswithresourcesare
limitedtocollectionsofusersorprogramsforthepurposeofenforcingintegrity,confidentiality,oravailabilityconstraints.Thisensuresthatusershavepermissiontoperformoperationsoraccessdata.
■Dataintegrity :Themeansusedtoprovethatinformationhasnotbeenmodifiedbyathird
party,anentityotherthanthesourceoftheinformation.Forexample,arecipientofdatasentoveranopennetworkmustbeabletodetectanddiscardmessagesthatweremodifiedaftertheyweresent.Thisensuresthatonlyauthorizeduserscanmodifydata.
■Confidentiality ,ordataprivacy :Themeansusedtoensurethatinformationismade
availableonlytouserswhoareauthorizedtoaccessit.Thisensuresthatonlyauthorizeduserscanviewsensitivedata.
■Non-repudiation :Themeansusedtoprovethatauserwhoperformedsomeactioncannot
reasonablydenyhavingdoneso.Thisensuresthattransactionscanbeprovedtohavehappened.OverviewofJavaEESecurity
TheJavaEE6Tutorial • January2013 696
■QualityofService :Themeansusedtoprovidebetterservicetoselectednetworktrafficover
varioustechnologies.
■Auditing :Themeansusedtocaptureatamper-resistantrecordofsecurity-relatedevents
forthepurposeofbeingabletoevaluatetheeffectivenessofsecuritypoliciesandmechanisms.Toenablethis,thesystemmaintainsarecordoftransactionsandsecurityinformation.
SecurityMechanisms
Thecharacteristicsofanapplicationshouldbeconsideredwhendecidingthelayerandtypeofsecuritytobeprovidedforapplications.ThefollowingsectionsdiscussthecharacteristicsofthecommonmechanismsthatcanbeusedtosecureJavaEEapplications.Eachofthesemechanismscanbeusedindividuallyorwithotherstoprovideprotectionlayersbasedonthespecificneedsofyourimplementation.
JavaSESecurityMechanisms
JavaSEprovidessupportforavarietyofsecurityfeaturesandmechanisms:
■JavaAuthenticationandAuthorizationService(JAAS) :JAASisasetofAPIsthatenable
servicestoauthenticateandenforceaccesscontrolsuponusers.JAASprovidesapluggableandextensibleframeworkforprogrammaticuserauthenticationandauthorization.JAASisacoreJavaSEAPIandisanunderlyingtechnologyforJavaEEsecuritymechanisms.
■JavaGenericSecurityServices(JavaGSS-API) :JavaGSS-APIisatoken-basedAPIusedto
securelyexchangemessagesbetweencommunicatingapplications.TheGSS-APIoffersapplicationprogrammersuniformaccesstosecurityservicesatopavarietyofunderlyingsecuritymechanisms,includingKerberos.
■JavaCryptographyExtension(JCE) :JCEprovidesaframeworkandimplementationsfor
encryption,keygenerationandkeyagreement,andMessageAuthenticationCode(MAC)algorithms.Supportforencryptionincludessymmetric,asymmetric,block,andstreamciphers.Blockciphersoperateongroupsofbytes;streamciphersoperateononebyteatatime.Thesoftwarealsosupportssecurestreamsandsealedobjects.
■JavaSecureSocketsExtension(JSSE) :JSSEprovidesaframeworkandanimplementation
foraJavaversionoftheSecureSocketsLayer(SSL)andTransportLayerSecurity(TLS)protocolsandincludesfunctionalityfordataencryption,serverauthentication,messageintegrity,andoptionalclientauthenticationtoenablesecureInternetcommunications.
■SimpleAuthenticationandSecurityLayer(SASL) :SASLisanInternetstandard(RFC
2222)thatspecifiesaprotocolforauthenticationandoptionalestablishmentofasecuritylayerbetweenclientandserverapplications.SASLdefineshowauthenticationdataistobeexchangedbutdoesnotitselfspecifythecontentsofthatdata.SASLisaframeworkintowhichspecificauthenticationmechanismsthatspecifythecontentsandsemanticsoftheauthenticationdatacanfit.SecurityMechanisms
Chapter39 • IntroductiontoSecurityintheJavaEEPlatform 697
JavaSEalsoprovidesasetoftoolsformanagingkeystores,certificates,andpolicyfiles;
generatingandverifyingJARsignatures;andobtaining,listing,andmanagingKerberostickets.
FormoreinformationonJavaSEsecurity,visit http://docs.oracle.com/javase/6/docs/
technotes/guides/security/ .
JavaEESecurityMechanisms
JavaEEsecurityservicesareprovidedbythecomponentcontainerandcanbeimplementedbyusingdeclarativeorprogrammatictechniques(see
“SecuringContainers”onpage700 ).JavaEE
securityservicesprovidearobustandeasilyconfiguredsecuritymechanismforauthenticatingusersandauthorizingaccesstoapplicationfunctionsandassociateddataatmanydifferentlayers.JavaEEsecurityservicesareseparatefromthesecuritymechanismsoftheoperatingsystem.
Application-LayerSecurity
InJavaEE,componentcontainersareresponsibleforprovidingapplication-layersecurity,securityservicesforaspecificapplicationtypetailoredtotheneedsoftheapplication.Attheapplicationlayer,applicationfirewallscanbeusedtoenhanceapplicationprotectionbyprotectingthecommunicationstreamandallassociatedapplicationresourcesfromattacks.
JavaEEsecurityiseasytoimplementandconfigureandcanofferfine-grainedaccesscontrolto
applicationfunctionsanddata.However,asisinherenttosecurityappliedattheapplicationlayer,securitypropertiesarenottransferabletoapplicationsrunninginotherenvironmentsandprotectdataonlywhileitisresidingintheapplicationenvironment.Inthecontextofatraditionalenterpriseapplication,thisisnotnecessarilyaproblem,butwhenappliedtoawebservicesapplication,inwhichdataoftentravelsacrossseveralintermediaries,youwouldneedtousetheJavaEEsecuritymechanismsalongwithtransport-layersecurityandmessage-layersecurityforacompletesecuritysolution.
Theadvantagesofusingapplication-layersecurityincludethefollowing.
■Securityisuniquelysuitedtotheneedsoftheapplication.
■Securityisfinegrained,withapplication-specificsettings.
Thedisadvantagesofusingapplication-layersecurityincludethefollowing.
■Theapplicationisdependentonsecurityattributesthatarenottransferablebetween
applicationtypes.
■Supportformultipleprotocolsmakesthistypeofsecurityvulnerable.
■Dataisclosetoorcontainedwithinthepointofvulnerability.
Formoreinformationonprovidingsecurityattheapplicationlayer,see “SecuringContainers”
onpage700 .SecurityMechanisms
TheJavaEE6Tutorial • January2013 698
Transport-LayerSecurity
Transport-layersecurityisprovidedbythetransportmechanismsusedtotransmitinformation
overthewirebetweenclientsandproviders;thus,transport-layersecurityreliesonsecureHTTPtransport(HTTPS)usingSecureSocketsLayer(SSL).Transportsecurityisapoint-to-pointsecuritymechanismthatcanbeusedforauthentication,messageintegrity,andconfidentiality.WhenrunningoveranSSL-protectedsession,theserverandclientcan
authenticateeachotherandnegotiateanencryptionalgorithmandcryptographickeysbeforetheapplicationprotocoltransmitsorreceivesitsfirstbyteofdata.Securityisactivefromthetimethedataleavestheclientuntilitarrivesatitsdestination,orviceversa,evenacrossintermediaries.Theproblemisthatthedataisnotprotectedonceitgetstothedestination.Onesolutionistoencryptthemessagebeforesending.
Transport-layersecurityisperformedinaseriesofphases,asfollows.
■Theclientandserveragreeonanappropriatealgorithm.
■Akeyisexchangedusingpublic-keyencryptionandcertificate-basedauthentication.
■Asymmetriccipherisusedduringtheinformationexchange.
DigitalcertificatesarenecessarywhenrunningHTTPSusingSSL.TheHTTPSserviceofmost
webserverswillnotrununlessadigitalcertificatehasbeeninstalled.DigitalcertificateshavealreadybeencreatedfortheGlassFishServer.
Theadvantagesofusingtransport-layersecurityincludethefollowing.
■Itisrelativelysimple,well-understood,standardtechnology.
■Itappliestobothamessagebodyanditsattachments.
Thedisadvantagesofusingtransport-layersecurityincludethefollowing.
■Itistightlycoupledwiththetransport-layerprotocol.
■Itrepresentsanall-or-nothingapproachtosecurity.Thisimpliesthatthesecurity
mechanismisunawareofmessagecontents,sothatyoucannotselectivelyapplysecuritytoportionsofthemessageasyoucanwithmessage-layersecurity.
■Protectionistransient.Themessageisprotectedonlywhileintransit.Protectionisremovedautomaticallybytheendpointwhenitreceivesthemessage.
■Itisnotanend-to-endsolution,simplypoint-to-point.
Formoreinformationontransport-layersecurity,see “EstablishingaSecureConnectionUsing
SSL”onpage710 .
Message-LayerSecurity
Inmessage-layersecurity,securityinformationiscontainedwithintheSOAPmessageand/orSOAPmessageattachment,whichallowssecurityinformationtotravelalongwiththemessageorattachment.Forexample,aportionofthemessagemaybesignedbyasenderandencryptedSecurityMechanisms
Chapter39 • IntroductiontoSecurityintheJavaEEPlatform 699
foraparticularreceiver.Whensentfromtheinitialsender,themessagemaypassthrough
intermediatenodesbeforereachingitsintendedreceiver.Inthisscenario,theencryptedportionscontinuetobeopaquetoanyintermediatenodesandcanbedecryptedonlybytheintendedreceiver.Forthisreason,message-layersecurityisalsosometimesreferredtoasend-to-endsecurity.
Theadvantagesofmessage-layersecurityincludethefollowing.
■Securitystayswiththemessageoverallhopsandafterthemessagearrivesatitsdestination.
■Securitycanbeselectivelyappliedtodifferentportionsofamessageand,ifusingXMLWeb
ServicesSecurity,toattachments.
■Messagesecuritycanbeusedwithintermediariesovermultiplehops.
■Messagesecurityisindependentoftheapplicationenvironmentortransportprotocol.
Thedisadvantageofusingmessage-layersecurityisthatitisrelativelycomplexandaddssome
overheadtoprocessing.
TheGlassFishServersupportsmessagesecurityusingMetro,awebservicesstackthatusesWeb
ServicesSecurity(WSS)tosecuremessages.BecausethismessagesecurityisspecifictoMetroandisnotapartoftheJavaEEplatform,thistutorialdoesnotdiscussusingWSStosecuremessages.Seethe MetroUser’sGuide at
http://metro.java.net/guide/ .
SecuringContainers
InJavaEE,thecomponentcontainersareresponsibleforprovidingapplicationsecurity.A
containerprovidestwotypesofsecurity:declarativeandprogrammatic.
UsingAnnotationstoSpecifySecurityInformation
Annotationsenableadeclarativestyleofprogrammingandsoencompassboththedeclarativeandprogrammaticsecurityconcepts.Userscanspecifyinformationaboutsecuritywithinaclassfilebyusingannotations.TheGlassFishServerusesthisinformationwhentheapplicationisdeployed.Notallsecurityinformationcanbespecifiedbyusingannotations,however.Someinformationmustbespecifiedintheapplicationdeploymentdescriptors.
Specificannotationsthatcanbeusedtospecifysecurityinformationwithinanenterprisebean
classfilearedescribedin
“SecuringanEnterpriseBeanUsingDeclarativeSecurity”onpage742 .
Chapter40,“GettingStartedSecuringWebApplications,” describeshowtouseannotationsto
securewebapplicationswherepossible.Deploymentdescriptorsaredescribedonlywherenecessary.
Formoreinformationonannotations,see
“FurtherInformationaboutSecurity”onpage711 .SecuringContainers
TheJavaEE6Tutorial • January2013 700
UsingDeploymentDescriptorsforDeclarative
Security
Declarativesecuritycanexpressanapplicationcomponent’ssecurityrequirementsbyusing
deploymentdescriptors.Becausedeploymentdescriptorinformationisdeclarative,itcanbechangedwithouttheneedtomodifythesourcecode.Atruntime,theJavaEEserverreadsthedeploymentdescriptorandactsuponthecorrespondingapplication,module,orcomponentaccordingly.Deploymentdescriptorsmustprovidecertainstructuralinformationforeachcomponentifthisinformationhasnotbeenprovidedinannotationsorisnottobedefaulted.
Thispartofthetutorialdoesnotdocumenthowtocreatedeploymentdescriptors;itdescribes
onlytheelementsofthedeploymentdescriptorrelevanttosecurity.NetBeansIDEprovidestoolsforcreatingandmodifyingdeploymentdescriptors.
Differenttypesofcomponentsusedifferentformats,orschemas,fortheirdeployment
descriptors.Thesecurityelementsofdeploymentdescriptorsdiscussedinthistutorialincludethefollowing.
■Webcomponentsmayuseawebapplicationdeploymentdescriptornamed web.xml.
TheschemaforwebcomponentdeploymentdescriptorsisprovidedinChapter14ofthe
JavaServlet3.0specification(JSR315),whichcanbedownloadedfrom
http://jcp.org/en/jsr/detail?id=315 .
■EnterpriseJavaBeanscomponentsmayuseanEJBdeploymentdescriptornamed
META-INF/ejb-jar.xml ,containedintheEJBJARfile.
TheschemaforenterprisebeandeploymentdescriptorsisprovidedinChapter19oftheEJB
3.1specification(JSR318),whichcanbedownloadedfrom http://jcp.org/en/jsr/
detail?id=318 .
UsingProgrammaticSecurity
Programmaticsecurityisembeddedinanapplicationandisusedtomakesecuritydecisions.Programmaticsecurityisusefulwhendeclarativesecurityaloneisnotsufficienttoexpressthesecuritymodelofanapplication.TheAPIforprogrammaticsecurityconsistsofmethodsoftheEJBContext interfaceandthe HttpServletRequest interface.Thesemethodsallow
componentstomakebusiness-logicdecisionsbasedonthesecurityroleofthecallerorremoteuser.
Programmaticsecurityisdiscussedinmoredetailinthefollowingsections:
■“UsingProgrammaticSecuritywithWebApplications”onpage724
■“SecuringanEnterpriseBeanProgrammatically”onpage746SecuringContainers
Chapter39 • IntroductiontoSecurityintheJavaEEPlatform 701
SecuringtheGlassFishServer
ThistutorialdescribesdeploymenttotheGlassFishServer,whichprovideshighlysecure,
interoperable,anddistributedcomponentcomputingbasedontheJavaEEsecuritymodel.GlassFishServersupportstheJavaEE6securitymodel.YoucanconfigureGlassFishServerforthefollowingpurposes:
■Adding,deleting,ormodifyingauthorizedusers.Formoreinformationonthistopic,see
“WorkingwithRealms,Users,Groups,andRoles”onpage702 .
■ConfiguringsecureHTTPandInternetInter-OrbProtocol(IIOP)listeners.
■ConfiguringsecureJavaManagementExtensions(JMX)connectors.
■Adding,deleting,ormodifyingexistingorcustomrealms.
■DefininganinterfaceforpluggableauthorizationprovidersusingJavaAuthorizationContractforContainers(JACC).JACCdefinessecuritycontractsbetweentheGlassFishServerandauthorizationpolicymodules.Thesecontractsspecifyhowtheauthorizationprovidersareinstalled,configured,andusedinaccessdecisions.
■Usingpluggableauditmodules.
■Customizingauthenticationmechanisms.AllimplementationsofJavaEE6compatiblewebcontainersarerequiredtosupporttheServletProfileofJSR196,whichoffersanavenueforcustomizingtheauthenticationmechanismappliedbythewebcontaineronbehalfofoneormoreapplications.
■Settingandchangingpolicypermissionsforanapplication.
WorkingwithRealms,Users,Groups,andRoles
Youoftenneedtoprotectresourcestoensurethatonlyauthorizedusershaveaccess.See
“CharacteristicsofApplicationSecurity”onpage696 foranintroductiontotheconceptsof
authentication,identification,andauthorization.
Thissectiondiscussessettingupuserssothattheycanbecorrectlyidentifiedandeithergiven
accesstoprotectedresourcesordeniedaccessiftheyarenotauthorizedtoaccesstheprotectedresources.Toauthenticateauser,youneedtofollowthesebasicsteps.
1. Theapplicationdeveloperwritescodetopromptforausernameandpassword.Thevarious
methodsofauthenticationarediscussedin
“SpecifyingAuthenticationMechanisms”on
page719.
2. Theapplicationdevelopercommunicateshowtosetupsecurityforthedeployed
applicationbyuseofametadataannotationordeploymentdescriptor.Thisstepisdiscussedin
“SettingUpSecurityRoles”onpage707 .
3. TheserveradministratorsetsupauthorizedusersandgroupsontheGlassFishServer.This
isdiscussedin “ManagingUsersandGroupsontheGlassFishServer”onpage706 .SecuringtheGlassFishServer
TheJavaEE6Tutorial • January2013 702
4. Theapplicationdeployermapstheapplication’ssecurityrolestousers,groups,and
principalsdefinedontheGlassFishServer.Thistopicisdiscussedin “MappingRolesto
UsersandGroups”onpage709 .
WhatAreRealms,Users,Groups,andRoles?
Arealmisasecuritypolicydomaindefinedforaweborapplicationserver.Arealmcontainsa
collectionofusers,whomayormaynotbeassignedtoagroup.ManagingusersontheGlassFishServerisdiscussedin
“ManagingUsersandGroupsontheGlassFishServer”on
page706.
Anapplicationwilloftenpromptforausernameandpasswordbeforeallowingaccesstoa
protectedresource.Aftertheusernameandpasswordhavebeenentered,thatinformationispassedtotheserver,whicheitherauthenticatestheuserandsendstheprotectedresourceordoesnotauthenticatetheuser,inwhichcaseaccesstotheprotectedresourceisdenied.Thistypeofuserauthenticationisdiscussedin
“SpecifyinganAuthenticationMechanisminthe
DeploymentDescriptor”onpage722 .
Insomeapplications,authorizedusersareassignedtoroles.Inthissituation,theroleassigned
totheuserintheapplicationmustbemappedtoaprincipalorgroupdefinedontheapplicationserver.
Figure39–6 showsthis.Moreinformationonmappingrolestousersandgroupscanbe
foundin“SettingUpSecurityRoles”onpage707 .
Thefollowingsectionsprovidemoreinformationonrealms,users,groups,androles.WorkingwithRealms,Users,Groups,andRoles
Chapter39 • IntroductiontoSecurityintheJavaEEPlatform 703
WhatIsaRealm?
Theprotectedresourcesonaservercanbepartitionedintoasetofprotectionspaces,eachwith
itsownauthenticationschemeand/orauthorizationdatabasecontainingacollectionofusersandgroups.Arealmisacompletedatabaseofusersandgroupsidentifiedasvalidusersofoneormoreapplicationsandcontrolledbythesameauthenticationpolicy.
TheJavaEEserverauthenticationservicecangovernusersinmultiplerealms.The file,
admin-realm ,and certificate realmscomepreconfiguredfortheGlassFishServer.
Inthe filerealm,theserverstoresusercredentialslocallyinafilenamed keyfile.Youcanuse
theAdministrationConsoletomanageusersinthe filerealm.Whenusingthe filerealm,the
serverauthenticationserviceverifiesuseridentitybycheckingthe filerealm.Thisrealmis
usedfortheauthenticationofallclientsexceptforwebbrowserclientsthatuseHTTPSandcertificates.
Inthe certificate realm,theserverstoresusercredentialsinacertificatedatabase.When
usingthe certificate realm,theserverusescertificateswithHTTPStoauthenticateweb
clients.Toverifytheidentityofauserinthe certificate realm,theauthenticationservice
verifiesanX.509certificate.Forstep-by-stepinstructionsforcreatingthistypeofcertificate,see
“WorkingwithDigitalCertificates”onpage759 .ThecommonnamefieldoftheX.509
certificateisusedastheprincipalname.FIGURE39–6 MappingRolestoUsersandGroups
Role 1
Role 2
Role 1
Role 2
Create users
and/or groupsDefine roles
in applicationMap roles to users
and/or groups
Application
Group 1
User 1
User 2User 3
Group 1
User 1User 2User 3User 1
User 2
User 3User 1
User 2User 3ApplicationWorkingwithRealms,Users,Groups,andRoles
TheJavaEE6Tutorial • January2013 704
Theadmin-realm isalsoa filerealmandstoresadministratorusercredentialslocallyinafile
named admin-keyfile .YoucanusetheAdministrationConsoletomanageusersinthisrealm
inthesamewayyoumanageusersinthe filerealm.Formoreinformation,see “Managing
UsersandGroupsontheGlassFishServer”onpage706 .
WhatIsaUser?
AuserisanindividualorapplicationprogramidentitythathasbeendefinedintheGlassFish
Server.Inawebapplication,ausercanhaveassociatedwiththatidentityasetofrolesthatentitletheusertoaccessallresourcesprotectedbythoseroles.Userscanbeassociatedwithagroup.
AJavaEEuserissimilartoanoperatingsystemuser.Typically,bothtypesofusersrepresent
people.However,thesetwotypesofusersarenotthesame.TheJavaEEserverauthenticationservicehasnoknowledgeoftheusernameandpasswordyouprovidewhenyoulogintotheoperatingsystem.TheJavaEEserverauthenticationserviceisnotconnectedtothesecuritymechanismoftheoperatingsystem.Thetwosecurityservicesmanageusersthatbelongtodifferentrealms.
WhatIsaGroup?
Agroupisasetofauthenticatedusers,classifiedbycommontraits,definedintheGlassFish
Server.AJavaEEuserofthe filerealmcanbelongtoagroupontheGlassFishServer.(Auser
inthe certificate realmcannot.)AgroupontheGlassFishServerisacategoryofusers
classifiedbycommontraits,suchasjobtitleorcustomerprofile.Forexample,mostcustomersofane-commerceapplicationmightbelongtothe CUSTOMER group,butthebigspenderswould
belongtothe PREFERRED group.Categorizingusersintogroupsmakesiteasiertocontrolthe
accessoflargenumbersofusers.
AgroupontheGlassFishServerhasadifferentscopefromarole.Agroupisdesignatedforthe
entireGlassFishServer,whereasaroleisassociatedonlywithaspecificapplicationintheGlassFishServer.
WhatIsaRole?
Aroleisanabstractnameforthepermissiontoaccessaparticularsetofresourcesinan
application.Arolecanbecomparedtoakeythatcanopenalock.Manypeoplemighthaveacopyofthekey.Thelockdoesn’tcarewhoyouare,onlythatyouhavetherightkey.WorkingwithRealms,Users,Groups,andRoles
Chapter39 • IntroductiontoSecurityintheJavaEEPlatform 705
SomeOtherTerminology
ThefollowingterminologyisalsousedtodescribethesecurityrequirementsoftheJavaEE
platform:
■Principal :Anentitythatcanbeauthenticatedbyanauthenticationprotocolinasecurity
servicethatisdeployedinanenterprise.Aprincipalisidentifiedbyusingaprincipalnameandauthenticatedbyusingauthenticationdata.
■Securitypolicydomain ,alsoknownas securitydomain orrealm:Ascopeoverwhicha
commonsecuritypolicyisdefinedandenforcedbythesecurityadministratorofthesecurityservice.
■Securityattributes :Asetofattributesassociatedwitheveryprincipal.Thesecurity
attributeshavemanyuses:forexample,accesstoprotectedresourcesandauditingofusers.Securityattributescanbeassociatedwithaprincipalbyanauthenticationprotocol.
■Credential :Anobjectthatcontainsorreferencessecurityattributesusedtoauthenticatea
principalforJavaEEservices.Aprincipalacquiresacredentialuponauthenticationorfromanotherprincipalthatallowsitscredentialtobeused.
ManagingUsersandGroupsontheGlassFishServer
Followthesestepsformanagingusersbeforeyourunthetutorialexamples.
▼ToAddUserstotheGlassFishServer
StarttheGlassFishServer,ifyouhaven’talreadydoneso.
InformationonstartingtheGlassFishServerisavailablein “StartingandStoppingtheGlassFish
Server”onpage73 .
StarttheAdministrationConsole,ifyouhaven’talreadydoneso.
TostarttheAdministrationConsole,openawebbrowserandspecifytheURL
http://localhost:4848/ .IfyouchangedthedefaultAdminportduringinstallation,typethe
correctportnumberinplaceof 4848.
Inthenavigationtree,expandtheConfigurationsnode,thenexpandtheserver-confignode.ExpandtheSecuritynode.ExpandtheRealmsnode.1
2
3
45WorkingwithRealms,Users,Groups,andRoles
TheJavaEE6Tutorial • January2013 706
Selecttherealmtowhichyouareaddingusers.
■Selectthe filerealmtoaddusersyouwanttoaccessapplicationsrunninginthisrealm.
Fortheexamplesecurityapplications,selectthe filerealm.
TheEditRealmpageopens.
■Selectthe admin-realm toaddusersyouwanttoenableassystemadministratorsofthe
GlassFishServer.
TheEditRealmpageopens.
Youcannotadduserstothe certificate realmbyusingtheAdministrationConsole.Inthe
certificate realm,youcanaddonlycertificates.Forinformationonadding(importing)
certificatestothe certificate realm,see “AddingUserstotheCertificateRealm”onpage762 .
OntheEditRealmpage,clicktheManageUsersbutton.
TheFileUsersorAdminUserspageopens.
OntheFileUsersorAdminUserspage,clickNewtoaddanewusertotherealm.
TheNewFileRealmUserpageopens.
TypevaluesintheUserID,GroupList,NewPassword,andConfirmNewPasswordfields.
FortheAdminRealm,theGroupListfieldisread-only,andthegroupnameis asadmin.Restart
theGlassFishServerandAdministrationConsoleafteryouaddausertotheAdminRealm.
Formoreinformationontheseproperties,see “WorkingwithRealms,Users,Groups,and
Roles”onpage702 .
Fortheexamplesecurityapplications,specifyauserwithanynameandpasswordyoulike,but
makesurethattheuserisassignedtothegroup TutorialUser .Theusernameandpassword
arecase-sensitive.Keeparecordoftheusernameandpasswordforworkingwiththeexampleslaterinthistutorial.
ClickOKtoaddthisusertotherealm,orclickCanceltoquitwithoutsaving.
SettingUpSecurityRoles
Whenyoudesignanenterprisebeanorwebcomponent,youshouldalwaysthinkaboutthe
kindsofuserswhowillaccessthecomponent.Forexample,awebapplicationforahumanresourcesdepartmentmighthaveadifferentrequestURLforsomeonewhohasbeenassignedtheroleof DEPT_ADMIN thanforsomeonewhohasbeenassignedtheroleof DIRECTOR .The
DEPT_ADMIN rolemayletyouviewemployeedata,butthe DIRECTOR roleenablesyoutomodify
employeedata,includingsalarydata.Eachofthesesecurityrolesisanabstractlogicalgrouping6
7
89
10WorkingwithRealms,Users,Groups,andRoles
Chapter39 • IntroductiontoSecurityintheJavaEEPlatform 707
ofusersthatisdefinedbythepersonwhoassemblestheapplication.Whenanapplicationis
deployed,thedeployerwillmaptherolestosecurityidentitiesintheoperationalenvironment,asshownin
Figure39–6 .
ForJavaEEcomponents,youdefinesecurityrolesusingthe @DeclareRoles and
@RolesAllowed metadataannotations.
Thefollowingisanexampleofanapplicationinwhichtheroleof DEPT-ADMIN isauthorizedfor
methodsthatreviewemployeepayrolldata,andtheroleof DIRECTOR isauthorizedformethods
thatchangeemployeepayrolldata.
Theenterprisebeanwouldbeannotatedasshowninthefollowingcode:
import javax.annotation.security.DeclareRoles;
import javax.annotation.security.RolesAllowed;...@DeclareRoles({ "DEPT-ADMIN ","DIRECTOR "})
@Stateless public class PayrollBean implements Payroll {
@Resource SessionContext ctx;
@RolesAllowed( "DEPT-ADMIN ")
public void reviewEmployeeInfo(EmplInfo info) {
oldInfo = ... read from database;// ...
}
@RolesAllowed( "DIRECTOR ")
public void updateEmployeeInfo(EmplInfo info) {
newInfo = ... update database;// ...
}...
}
Foraservlet,youcanusethe @HttpConstraint annotationwithinthe @ServletSecurity
annotationtospecifytherolesthatareallowedtoaccesstheservlet.Forexample,aservletmightbeannotatedasfollows:
@WebServlet(name = "PayrollServlet ", urlPatterns = { "/payroll "})
@ServletSecurity(@HttpConstraint(transportGuarantee = TransportGuarantee.CONFIDENTIAL,
rolesAllowed = { "DEPT-ADMIN ","DIRECTOR "}))
public class GreetingServlet extends HttpServlet {
Theseannotationsarediscussedinmoredetailin “SpecifyingSecurityforBasicAuthentication
UsingAnnotations”onpage731 and“SecuringanEnterpriseBeanUsingDeclarativeSecurity”
onpage742 .WorkingwithRealms,Users,Groups,andRoles
TheJavaEE6Tutorial • January2013 708
Afterusershaveprovidedtheirlogininformationandtheapplicationhasdeclaredwhatroles
areauthorizedtoaccessprotectedpartsofanapplication,thenextstepistomapthesecurityroletothenameofauser,orprincipal.
MappingRolestoUsersandGroups
WhenyouaredevelopingaJavaEEapplication,youdon’tneedtoknowwhatcategoriesofusershavebeendefinedfortherealminwhichtheapplicationwillberun.IntheJavaEEplatform,thesecurityarchitectureprovidesamechanismformappingtherolesdefinedintheapplicationtotheusersorgroupsdefinedintheruntimerealm.
Therolenamesusedintheapplicationareoftenthesameasthegroupnamesdefinedonthe
GlassFishServer.Underthesecircumstances,youcanenableadefaultprincipal-to-rolemappingontheGlassFishServerbyusingtheAdministrationConsole.Thetask
“ToSetUp
YourSystemforRunningtheSecurityExamples”onpage729 explainshowtodothis.Allthe
tutorialsecurityexamplesusedefaultprincipal-to-rolemapping.
Iftherolenamesusedinanapplicationarenotthesameasthegroupnamesdefinedonthe
server,usetheruntimedeploymentdescriptortospecifythemapping.Thefollowingexampledemonstrateshowtodothismappinginthe glassfish-web.xml file,whichisthefileusedfor
webapplications:
<glassfish-web-app>
...<security-role-mapping>
<role-name>Mascot</role-name><principal-name>Duke</principal-name>
</security-role-mapping>
<security-role-mapping>
<role-name>Admin</role-name><group-name>Director</group-name>
</security-role-mapping>...
</glassfish-web-app>
Arolecanbemappedtospecificprincipals,specificgroups,orboth.Theprincipalorgroup
namesmustbevalidprincipalsorgroupsinthecurrentdefaultrealmorintherealmspecifiedinthe login-config element.Inthisexample,theroleof Mascotusedintheapplicationis
mappedtoaprincipal,named Duke,thatexistsontheapplicationserver.Mappingaroletoa
specificprincipalisusefulwhenthepersonoccupyingthatrolemaychange.Forthisapplication,youwouldneedtomodifyonlytheruntimedeploymentdescriptorratherthansearchandreplacethroughouttheapplicationforreferencestothisprincipal.
Alsointhisexample,theroleof Adminismappedtoagroupofusersassignedthegroupnameof
Director .Thisisusefulbecausethegroupofpeopleauthorizedtoaccessdirector-level
administrativedatahastobemaintainedonlyontheGlassFishServer.Theapplicationdeveloperdoesnotneedtoknowwhothesepeopleare,butonlyneedstodefinethegroupofpeoplewhowillbegivenaccesstotheinformation.WorkingwithRealms,Users,Groups,andRoles
Chapter39 • IntroductiontoSecurityintheJavaEEPlatform 709
Therole-name mustmatchthe role-name inthe security-role elementofthecorresponding
deploymentdescriptorortherolenamedefinedina @DeclareRoles annotation.
EstablishingaSecureConnectionUsingSSL
SecureSocketsLayer(SSL)technology issecuritythatisimplementedatthetransportlayer(see
“Transport-LayerSecurity”onpage699 formoreinformationabouttransport-layersecurity).
SSLallowswebbrowsersandwebserverstocommunicateoverasecureconnection.Inthissecureconnection,thedataisencryptedbeforebeingsentandthenisdecrypteduponreceiptandbeforeprocessing.Boththebrowserandtheserverencryptalltrafficbeforesendinganydata.
SSLaddressesthefollowingimportantsecurityconsiderations:
■Authentication :Duringyourinitialattempttocommunicatewithawebserverovera
secureconnection,thatserverwillpresentyourwebbrowserwithasetofcredentialsintheformofaservercertificate(alsocalledapublickeycertificate).Thepurposeofthecertificateistoverifythatthesiteiswhoandwhatitclaimstobe.Insomecases,theservermayrequestacertificateprovingthattheclientiswhoandwhatitclaimstobe;thismechanismisknownasclientauthentication.
■Confidentiality :Whendataisbeingpassedbetweentheclientandtheserveronanetwork,
thirdpartiescanviewandinterceptthisdata.SSLresponsesareencryptedsothatthedatacannotbedecipheredbythethirdpartyandthedataremainsconfidential.
■Integrity:Whendataisbeingpassedbetweentheclientandtheserveronanetwork,third
partiescanviewandinterceptthisdata.SSLhelpsguaranteethatthedatawillnotbemodifiedintransitbythatthirdparty.
TheSSLprotocolisdesignedtobeasefficientassecurelypossible.However,encryptionand
decryptionarecomputationallyexpensiveprocessesfromaperformancestandpoint.ItisnotstrictlynecessarytorunanentirewebapplicationoverSSL,anditiscustomaryforadevelopertodecidewhichpagesrequireasecureconnectionandwhichdonot.Pagesthatmightrequireasecureconnectionincludethoseforlogin,personalinformation,shoppingcartcheckouts,orcreditcardinformationtransmittal.Anypagewithinanapplicationcanberequestedoverasecuresocketbysimplyprefixingtheaddresswith https:insteadof http:.Anypagesthat
absolutelyrequireasecureconnectionshouldchecktheprotocoltypeassociatedwiththepagerequestandtaketheappropriateactionif https:isnotspecified.
Usingname-basedvirtualhostsonasecuredconnectioncanbeproblematic.Thisisadesign
limitationoftheSSLprotocolitself.The SSLhandshake ,wherebytheclientbrowseracceptsthe
servercertificate,mustoccurbeforetheHTTPrequestisaccessed.Asaresult,therequestinformationcontainingthevirtualhostnamecannotbedeterminedbeforeauthentication,anditisthereforenotpossibletoassignmultiplecertificatestoasingleIPaddress.IfallvirtualhostsonasingleIPaddressneedtoauthenticateagainstthesamecertificate,theadditionofmultiplevirtualhostsshouldnotinterferewithnormalSSLoperationsontheserver.Beaware,however,EstablishingaSecureConnectionUsingSSL
TheJavaEE6Tutorial • January2013 710
thatmostclientbrowserswillcomparetheserver’sdomainnameagainstthedomainname
listedinthecertificate,ifany;thisisapplicableprimarilytoofficialcertificatessignedbyacertificateauthority(CA).Ifthedomainnamesdonotmatch,thesebrowserswilldisplayawarningtotheclient.Ingeneral,onlyaddress-basedvirtualhostsarecommonlyusedwithSSLinaproductionenvironment.
VerifyingandConfiguringSSLSupport
Asageneralrule,youmustaddressthefollowingissuestoenableSSLforaserver:
■Theremustbea Connector elementforanSSLconnectorintheserverdeployment
descriptor.
■Theremustbevalidkeystoreandcertificatefiles.
■Thelocationofthekeystorefileanditspasswordmustbespecifiedintheserverdeploymentdescriptor.
AnSSLHTTPSconnectorisalreadyenabledintheGlassFishServer.FortestingpurposesandtoverifythatSSLsupporthasbeencorrectlyinstalled,loadthedefault
introductionpagewithaURLthatconnectstotheportdefinedintheserverdeploymentdescriptor:
https://localhost:8181/
ThehttpsinthisURLindicatesthatthebrowsershouldbeusingtheSSLprotocol.The
localhost inthisexampleassumesthatyouarerunningtheexampleonyourlocalmachineas
partofthedevelopmentprocess.The 8181inthisexampleisthesecureportthatwasspecified
wheretheSSLconnectorwascreated.Ifyouareusingadifferentserverorport,modifythisvalueaccordingly.
Thefirsttimethatyouloadthisapplication,theNewSiteCertificateorSecurityAlertdialogbox
appears.SelectNexttomovethroughtheseriesofdialogboxes,andselectFinishwhenyoureachthelastdialogbox.Thecertificateswilldisplayonlythefirsttime.Whenyouacceptthecertificates,subsequenthitstothissiteassumethatyoustilltrustthecontent.
FurtherInformationaboutSecurity
FormoreinformationaboutsecurityinJavaEEapplications,see
■JavaEE6specification:
http://jcp.org/en/jsr/detail?id=316
■EnterpriseJavaBeans3.1specification:
http://jcp.org/en/jsr/detail?id=318FurtherInformationaboutSecurity
Chapter39 • IntroductiontoSecurityintheJavaEEPlatform 711
■ImplementingEnterpriseWebServices1.3specification:
http://jcp.org/en/jsr/detail?id=109
■JavaSEsecurityinformation:
http://docs.oracle.com/javase/6/docs/technotes/guides/security/
■JavaServlet3.0specification:
http://jcp.org/en/jsr/detail?id=315
■JavaAuthorizationContractforContainers1.4specification:
http://jcp.org/en/jsr/detail?id=115FurtherInformationaboutSecurity
TheJavaEE6Tutorial • January2013 712
GettingStartedSecuringWebApplications
ThewaystoimplementsecurityforJavaEEwebapplicationsarediscussedinageneralwayin
“SecuringContainers”onpage700 .Thischapterprovidesmoredetailandafewexamplesthat
explorethesesecurityservicesastheyrelatetowebcomponents.
Awebapplicationisaccessedusingawebbrowseroveranetwork,suchastheInternetora
company’sintranet.Asdiscussedin “DistributedMultitieredApplications”onpage39 ,theJava
EEplatformusesadistributedmultitieredapplicationmodel,andwebapplicationsruninthewebtier.
Webapplicationscontainresourcesthatcanbeaccessedbymanyusers.Theseresourcesoften
traverseunprotected,opennetworks,suchastheInternet.Insuchanenvironment,asubstantialnumberofwebapplicationswillrequiresometypeofsecurity.
SecuringapplicationsandtheirclientsinthebusinesstierandtheEIStierisdiscussedin
Chapter41,“GettingStartedSecuringEnterpriseApplications.”
Thefollowingtopicsareaddressedhere:
■“OverviewofWebApplicationSecurity”onpage713
■“SecuringWebApplications”onpage715
■“UsingProgrammaticSecuritywithWebApplications”onpage724
■“Examples:SecuringWebApplications”onpage729
OverviewofWebApplicationSecurity
IntheJavaEEplatform,webcomponentsprovidethedynamicextensioncapabilitiesforaweb
server.WebcomponentscanbeJavaservletsorJavaServerFacespages.Theinteractionbetweenawebclientandawebapplicationisillustratedin
Figure40–1 .40CHAPTER 40
713
Certainaspectsofwebapplicationsecuritycanbeconfiguredwhentheapplicationisinstalled,
ordeployed,tothewebcontainer.Annotationsand/ordeploymentdescriptorsareusedtorelayinformationtothedeployeraboutsecurityandotheraspectsoftheapplication.Specifyingthisinformationinannotationsorinthedeploymentdescriptorhelpsthedeployersetuptheappropriatesecuritypolicyforthewebapplication.Anyvaluesexplicitlyspecifiedinthedeploymentdescriptoroverrideanyvaluesspecifiedinannotations.
SecurityforJavaEEwebapplicationscanbeimplementedinthefollowingways.
■Declarativesecurity :Canbeimplementedusingeithermetadataannotationsoran
application’sdeploymentdescriptor.See “OverviewofJavaEESecurity”onpage692 for
moreinformation.
Declarativesecurityforwebapplicationsisdescribedin “SecuringWebApplications”on
page715.
■Programmaticsecurity :Isembeddedinanapplicationandcanbeusedtomakesecurity
decisionswhendeclarativesecurityaloneisnotsufficienttoexpressthesecuritymodelofanapplication.Declarativesecurityalonemaynotbesufficientwhenconditionallogininaparticularworkflow,insteadofforallcases,isrequiredinthemiddleofanapplication.See
“OverviewofJavaEESecurity”onpage692 formoreinformation.
Servlet3.0providesthe authenticate ,login,and logoutmethodsofthe
HttpServletRequest interface.Withtheadditionofthe authenticate ,login,and logout
methodstotheServletspecification,anapplicationdeploymentdescriptorisnolongerrequiredforwebapplicationsbutmaystillbeusedtofurtherspecifysecurityrequirementsbeyondthebasicdefaultvalues.FIGURE40–1 JavaWebApplicationRequestHandling
HTTP
Request
HTTP
Response
DatabaseDatabaseWeb 
Client
HttpServlet
Request
HttpServlet
Response
Web 
Components
Web 
C
Web 
Components
Web 
CC
Web
Web 
Web
C
CC
C
W
C
Wb
Web 
Components
CCompoonents
o
 t
ne
WWb
WWeb 
WWeb 
C
C
 s
 CCompoonents
 CCompoonents
oo
o
ne
 CC
Web
C
Web
Web 
Web 
Web 
Web
Web
s
 Components
 p
 s
s
 CoCmponoents
 Componen ts
 o
 CC
C
Compoonents
 ompoonents
 Components
omponents
oo
oo
o
o
oo
oo
 CCo
Co
C
Wb
WWeb 
WWeb
C
C
C
Web 
Components
Web 
Components
Web 
C
Web 
Components
Web 
CC
Web
Web 
Web
C
CC
C
W
C
Wb
Web 
Components
CCompoonents
WWb
WWeb 
WWeb 
Cmp ens
 CCompoonents
 CCompoonents
Web
C
Web
Web 
Web 
Web 
Web
Web
s
 Components
 s
s
 CoCmponoents
 Componen ts
 Compoonents
 ompoonents
 Components
Components
C
Wb
WWeb 
WWeb
C
C
C
JavaBeans
Components14
4
2
5
 3
6OverviewofWebApplicationSecurity
TheJavaEE6Tutorial • January2013 714
Programmaticsecurityisdiscussedin “UsingProgrammaticSecuritywithWeb
Applications”onpage724
■MessageSecurity :Workswithwebservicesandincorporatessecurityfeatures,suchas
digitalsignaturesandencryption,intotheheaderofaSOAPmessage,workingintheapplicationlayer,ensuringend-to-endsecurity.MessagesecurityisnotacomponentofJavaEE6andismentionedhereforinformationalpurposesonly.
Someofthematerialinthischapterbuildsonmaterialpresentedearlierinthistutorial.In
particular,thischapterassumesthatyouarefamiliarwiththeinformationinthefollowingchapters:
■Chapter3,“GettingStartedwithWebApplications”
■Chapter4,“JavaServerFacesTechnology”
■Chapter15,“JavaServletTechnology”
■Chapter39,“IntroductiontoSecurityintheJavaEEPlatform”
SecuringWebApplications
Webapplicationsarecreatedbyapplicationdeveloperswhogive,sell,orotherwisetransfertheapplicationtoanapplicationdeployerforinstallationintoaruntimeenvironment.Applicationdeveloperscommunicatehowtosetupsecurityforthedeployedapplicationbyusingannotationsordeploymentdescriptors.Thisinformationispassedontothedeployer,whousesittodefinemethodpermissionsforsecurityroles,setupuserauthentication,andsetuptheappropriatetransportmechanism.Iftheapplicationdeveloperdoesn’tdefinesecurityrequirements,thedeployerwillhavetodeterminethesecurityrequirementsindependently.
Someelementsnecessaryforsecurityinawebapplicationcannotbespecifiedasannotations
foralltypesofwebapplications.Thischapterexplainshowtosecurewebapplicationsusing
annotationswhereverpossible.Itexplainshowtousedeploymentdescriptorswhereannotationscannotbeused.
SpecifyingSecurityConstraints
Asecurityconstraint isusedtodefinetheaccessprivilegestoacollectionofresourcesusingtheir
URLmapping.
Ifyourwebapplicationusesaservlet,youcanexpressthesecurityconstraintinformationby
usingannotations.Specifically,youusethe @HttpConstraint and,optionally,the
@HttpMethodConstraint annotationswithinthe @ServletSecurity annotationtospecifya
securityconstraint.
Ifyourwebapplicationdoesnotuseaservlet,however,youmustspecifya
security-constraint elementinthedeploymentdescriptorfile.Theauthentication
mechanismcannotbeexpressedusingannotations,soifyouuseanyauthenticationmethodotherthan BASIC(thedefault),adeploymentdescriptorisrequired.SecuringWebApplications
Chapter40 • GettingStartedSecuringWebApplications 715
Thefollowingsubelementscanbepartofa security-constraint :
■Webresourcecollection (web-resource-collection ):AlistofURLpatterns(thepartofa
URLafterthehostnameandportyouwanttoconstrain)andHTTPoperations(the
methodswithinthefilesthatmatchtheURLpatternyouwanttoconstrain)thatdescribeasetofresourcestobeprotected.Webresourcecollectionsarediscussedin
“SpecifyingaWeb
ResourceCollection”onpage716 .
■Authorizationconstraint (auth-constraint ):Specifieswhetherauthenticationistobe
usedandnamestherolesauthorizedtoperformtheconstrainedrequests.Formoreinformationaboutauthorizationconstraints,see
“SpecifyinganAuthorizationConstraint”
onpage717 .
■Userdataconstraint (user-data-constraint ):Specifieshowdataisprotectedwhen
transportedbetweenaclientandaserver.Userdataconstraintsarediscussedin “Specifying
aSecureConnection”onpage717 .
SpecifyingaWebResourceCollection
Awebresourcecollectionconsistsofthefollowingsubelements:
■web-resource-name isthenameyouuseforthisresource.Itsuseisoptional.
■url-pattern isusedtolisttherequestURItobeprotected.Manyapplicationshaveboth
unprotectedandprotectedresources.Toprovideunrestrictedaccesstoaresource,donotconfigureasecurityconstraintforthatparticularrequestURI.
TherequestURIisthepartofaURL afterthehostnameandport.Forexample,let’ssaythat
youhaveane-commercesitewithacatalogthatyouwouldwantanyonetobeabletoaccessandbrowse,andashoppingcartareaforcustomersonly.Youcouldsetupthepathsforyourwebapplicationsothatthepattern /cart/*isprotectedbutnothingelseisprotected.
Assumingthattheapplicationisinstalledatcontextpath /myapp,thefollowingaretrue:
■http://localhost:8080/myapp/index.xhtml isnotprotected.
■http://localhost:8080/myapp/cart/index.xhtml isprotected.
Auserwillbepromptedtologinthefirsttimeheorsheaccessesaresourceinthe cart/
subdirectory.
■http-method orhttp-method-omission isusedtospecifywhichmethodsshouldbe
protectedorwhichmethodsshouldbeomittedfromprotection.AnHTTPmethodisprotectedbya web-resource-collection underanyofthefollowingcircumstances:
■IfnoHTTPmethodsarenamedinthecollection(whichmeansthatallareprotected)
■IfthecollectionspecificallynamestheHTTPmethodinan http-method subelement
■Ifthecollectioncontainsoneormore http-method-omission elements,noneofwhich
namestheHTTPmethodSecuringWebApplications
TheJavaEE6Tutorial • January2013 716
“SecuringHTTPResources”onpage775 describeshowtocreatesecurityconstraintsfor
HTTPmethodsthatdonotunintentionallyleaveyourapplicationopentocross-sitetracingorHTTPverbtamperingattacks.
SpecifyinganAuthorizationConstraint
Anauthorizationconstraint( auth-constraint )containsthe role-name element.Youcanuse
asmany role-name elementsasneededhere.
Anauthorizationconstraintestablishesarequirementforauthenticationandnamestheroles
authorizedtoaccesstheURLpatternsandHTTPmethodsdeclaredbythissecurityconstraint.Ifthereisnoauthorizationconstraint,thecontainermustaccepttherequestwithoutrequiringuserauthentication.Ifthereisanauthorizationconstraintbutnorolesarespecifiedwithinit,thecontainerwillnotallowaccesstoconstrainedrequestsunderanycircumstances.Eachrolenamespecifiedheremusteithercorrespondtotherolenameofoneofthe security-role
elementsdefinedforthiswebapplicationorbethespeciallyreservedrolename *,which
indicatesallrolesinthewebapplication.Rolenamesarecasesensitive.Therolesdefinedfortheapplicationmustbemappedtousersandgroupsdefinedontheserver,exceptwhendefaultprincipal-to-rolemappingisused.
Formoreinformationaboutsecurityroles,see
“DeclaringSecurityRoles”onpage723 .For
informationonmappingsecurityroles,see “MappingRolestoUsersandGroups”onpage709 .
Foraservlet,the @HttpConstraint and@HttpMethodConstraint annotationsaccepta
rolesAllowed elementthatspecifiestheauthorizedroles.
SpecifyingaSecureConnection
Auserdataconstraint( user-data-constraint inthedeploymentdescriptor)containsthe
transport-guarantee subelement.Auserdataconstraintcanbeusedtorequirethata
protectedtransport-layerconnection,suchasHTTPS,beusedforallconstrainedURLpatternsandHTTPmethodsspecifiedinthesecurityconstraint.ThechoicesfortransportguaranteeareCONFIDENTIAL ,INTEGRAL ,orNONE.Ifyouspecify CONFIDENTIAL orINTEGRAL asasecurity
constraint,itgenerallymeansthattheuseofSSLisrequiredandappliestoallrequeststhatmatchtheURLpatternsinthewebresourcecollection,notjusttothelogindialogbox.
Thestrengthoftherequiredprotectionisdefinedbythevalueofthetransportguarantee.
■Specify CONFIDENTIAL whentheapplicationrequiresthatdatabetransmittedsoasto
preventotherentitiesfromobservingthecontentsofthetransmission.
■Specify INTEGRAL whentheapplicationrequiresthatthedatabesentbetweenclientand
serverinsuchawaythatitcannotbechangedintransit.
■Specify NONEtoindicatethatthecontainermustaccepttheconstrainedrequestsonany
connection,includinganunprotectedone.SecuringWebApplications
Chapter40 • GettingStartedSecuringWebApplications 717
Note–Inpractice,JavaEEserverstreatthe CONFIDENTIAL andINTEGRAL transportguarantee
valuesidentically.
Theuserdataconstraintishandytouseinconjunctionwithbasicandform-baseduserauthentication.Whentheloginauthenticationmethodissetto BASICorFORM,passwordsare
notprotected,meaningthatpasswordssentbetweenaclientandaserveronanunprotectedsessioncanbeviewedandinterceptedbythirdparties.Usingauserdataconstraintwiththeuserauthenticationmechanismcanalleviatethisconcern.Configuringauserauthenticationmechanismisdescribedin
“SpecifyinganAuthenticationMechanismintheDeployment
Descriptor”onpage722 .
Toguaranteethatdataistransportedoverasecureconnection,ensurethatSSLsupportis
configuredforyourserver.SSLsupportisalreadyconfiguredfortheGlassFishServer.
Note–AfteryouswitchtoSSLforasession,youshouldneveracceptanynon-SSLrequestsfor
therestofthatsession.Forexample,ashoppingsitemightnotuseSSLuntilthecheckoutpage,andthenitmightswitchtousingSSLtoacceptyourcardnumber.AfterswitchingtoSSL,youshouldstoplisteningtonon-SSLrequestsforthissession.ThereasonforthispracticeisthatthesessionIDitselfwasnotencryptedontheearliercommunications.Thisisnotsobadwhenyou’reonlydoingyourshopping,butafterthecreditcardinformationisstoredinthesession,youdon’twantanyonetousethatinformationtofakethepurchasetransactionagainstyourcreditcard.Thispracticecouldbeeasilyimplementedbyusingafilter.
SpecifyingSecurityConstraintsforResources
Youcancreatesecurityconstraintsforresourceswithinyourapplication.Forexample,youcouldallowuserswiththeroleof PARTNERfullaccesstoallresourcesattheURLpattern
/company/wholesale/* andallowuserswiththeroleof CLIENTfullaccesstoallresourcesatthe
URLpattern /company/retail/* .Thisistherecommendedwaytoprotectresourcesifyoudo
notwanttoprotectsomeHTTPmethodswhileleavingotherHTTPmethodsunprotected.Anexampleofadeploymentdescriptorthatwoulddemonstratethisfunctionalityisthefollowing:
<!-- SECURITY CONSTRAINT #1 -->
<security-constraint>
<web-resource-collection>
<web-resource-name>wholesale</web-resource-name><url-pattern>/company/wholesale/*</url-pattern>
</web-resource-collection><auth-constraint>
<role-name>PARTNER</role-name>
</auth-constraint><user-data-constraint>
<transport-guarantee>CONFIDENTIAL</transport-guarantee>
</user-data-constraint>
</security-constraint>SecuringWebApplications
TheJavaEE6Tutorial • January2013 718
<!-- SECURITY CONSTRAINT #2 -->
<security-constraint>
<web-resource-collection>
<web-resource-name>retail</web-resource-name><url-pattern>/company/retail/*</url-pattern>
</web-resource-collection><auth-constraint>
<role-name>CLIENT</role-name>
</auth-constraint><user-data-constraint>
<transport-guarantee>CONFIDENTIAL</transport-guarantee>
</user-data-constraint>
</security-constraint>
SpecifyingAuthenticationMechanisms
Auserauthenticationmechanismspecifies
■Thewayausergainsaccesstowebcontent
■Withbasicauthentication,therealminwhichtheuserwillbeauthenticated
■Withform-basedauthentication,additionalattributes
Whenanauthenticationmechanismisspecified,theusermustbeauthenticatedbeforeaccessis
grantedtoanyresourcethatisconstrainedbyasecurityconstraint.Therecanbemultiplesecurityconstraintsapplyingtomultipleresources,butthesameauthenticationmethodwillapplytoallconstrainedresourcesinanapplication.
Beforeyoucanauthenticateauser,youmusthaveadatabaseofusernames,passwords,and
rolesconfiguredonyourweborapplicationserver.Forinformationonsettinguptheuserdatabase,see
“ManagingUsersandGroupsontheGlassFishServer”onpage706 .
TheJavaEEplatformsupportsthefollowingauthenticationmechanisms:
■Basicauthentication
■Form-basedauthentication
■Digestauthentication
■Clientauthentication
■Mutualauthentication
Basic,form-based,anddigestauthenticationarediscussedinthissection.Clientandmutual
authenticationarediscussedin Chapter42,“JavaEESecurity:AdvancedTopics.”
HTTPbasicauthenticationandform-basedauthenticationarenotverysecureauthenticationmechanisms.BasicauthenticationsendsusernamesandpasswordsovertheInternetasBase64-encodedtext.Form-basedauthenticationsendsthisdataasplaintext.Inbothcases,thetargetserverisnotauthenticated.Therefore,theseformsofauthenticationleaveuserdataexposedandvulnerable.Ifsomeonecaninterceptthetransmission,theusernameandpasswordinformationcaneasilybedecoded.SecuringWebApplications
Chapter40 • GettingStartedSecuringWebApplications 719
However,whenasecuretransportmechanism,suchasSSL,orsecurityatthenetworklevel,
suchastheInternetProtocolSecurity(IPsec)protocolorvirtualprivatenetwork(VPN)strategies,isusedinconjunctionwithbasicorform-basedauthentication,someoftheseconcernscanbealleviated.Tospecifyasecuretransportmechanism,usetheelementsdescribedin
“SpecifyingaSecureConnection”onpage717 .
HTTPBasicAuthentication
Specifying HTTPbasicauthentication requiresthattheserverrequestausernameand
passwordfromthewebclientandverifythattheusernameandpasswordarevalidbycomparingthemagainstadatabaseofauthorizedusersinthespecifiedordefaultrealm.
Basicauthenticationisthedefaultwhenyoudonotspecifyanauthenticationmechanism.Whenbasicauthenticationisused,thefollowingactionsoccur:
1. Aclientrequestsaccesstoaprotectedresource.
2. Thewebserverreturnsadialogboxthatrequeststheusernameandpassword.3. Theclientsubmitstheusernameandpasswordtotheserver.4. Theserverauthenticatestheuserinthespecifiedrealmand,ifsuccessful,returnsthe
requestedresource.
Figure40–2 showswhathappenswhenyouspecifyHTTPbasicauthentication.
FIGURE40–2 HTTPBasicAuthentication
Server1
2Requests a protected resource
Requests username:password
3
Sends username:password
4
Returns requested resourceClient
SecuringWebApplications
TheJavaEE6Tutorial • January2013 720
Form-BasedAuthentication
Form-basedauthentication allowsthedevelopertocontrolthelookandfeelofthelogin
authenticationscreensbycustomizingtheloginscreenanderrorpagesthatanHTTPbrowserpresentstotheenduser.Whenform-basedauthenticationisdeclared,thefollowingactionsoccur.
1. Aclientrequestsaccesstoaprotectedresource.
2. Iftheclientisunauthenticated,theserverredirectstheclienttoaloginpage.3. Theclientsubmitstheloginformtotheserver.4. Theserverattemptstoauthenticatetheuser.
a. Ifauthenticationsucceeds,theauthenticateduser’sprincipalischeckedtoensurethatit
isinarolethatisauthorizedtoaccesstheresource.Iftheuserisauthorized,theserverredirectstheclienttotheresourcebyusingthestoredURLpath.
b. Ifauthenticationfails,theclientisforwardedorredirectedtoanerrorpage.
Figure40–3 showswhathappenswhenyouspecifyform-basedauthentication.
Thesection “The hello1_formauth Example:Form-BasedAuthenticationwithaJavaServer
FacesApplication”onpage734 isanexampleapplicationthatusesform-basedauthentication.FIGURE40–3 Form-BasedAuthentication
Server Login 
Page
Error 
Page
1
2Requests protected resource
Redirected to
login page
3
Form submitted
4
Redirected to source
Error page returnedSuccess
Failure
j_security_checkClient
?
SecuringWebApplications
Chapter40 • GettingStartedSecuringWebApplications 721
Whenyoucreateaform-basedlogin,besuretomaintainsessionsusingcookiesorSSLsession
information.
Forauthenticationtoproceedappropriately,theactionoftheloginformmustalwaysbe
j_security_check .Thisrestrictionismadesothattheloginformwillworknomatterwhich
resourceitisforandtoavoidrequiringtheservertospecifytheactionfieldoftheoutboundform.ThefollowingcodesnippetshowshowtheformshouldbecodedintotheHTMLpage:
<form method= "POST"action= "j_security_check ">
<input type= "text"name= "j_username ">
<input type= "password "name= "j_password ">
</form>
DigestAuthentication
Likebasicauthentication, digestauthentication authenticatesauserbasedonausernameanda
password.However,unlikebasicauthentication,digestauthenticationdoesnotsenduserpasswordsoverthenetwork.Instead,theclientsendsaone-waycryptographichashofthepasswordandadditionaldata.Althoughpasswordsarenotsentonthewire,digestauthenticationrequiresthatclear-textpasswordequivalentsbeavailabletotheauthenticatingcontainersothatitcanvalidatereceivedauthenticatorsbycalculatingtheexpecteddigest.
SpecifyinganAuthenticationMechanisminthe
DeploymentDescriptor
Tospecifyanauthenticationmechanism,usethe login-config element.Itcancontainthe
followingsubelements.
■Theauth-method subelementconfigurestheauthenticationmechanismfortheweb
application.Theelementcontentmustbeeither NONE,BASIC,DIGEST,FORM,or
CLIENT-CERT .
■Therealm-name subelementindicatestherealmnametousewhenthebasicauthentication
schemeischosenforthewebapplication.
■Theform-login-config subelementspecifiestheloginanderrorpagesthatshouldbeused
whenform-basedloginisspecified.
Note–Anotherwaytospecifyform-basedauthenticationistousethe authenticate ,login,
andlogoutmethodsof HttpServletRequest ,asdiscussedin “AuthenticatingUsers
Programmatically”onpage724 .
Whenyoutrytoaccessawebresourcethatisconstrainedbya security-constraint element,
thewebcontaineractivatestheauthenticationmechanismthathasbeenconfiguredforthat
resource.Theauthenticationmechanismspecifieshowtheuserwillbepromptedtologin.IfSecuringWebApplications
TheJavaEE6Tutorial • January2013 722
thelogin-config elementispresentandthe auth-method elementcontainsavalueotherthan
NONE,theusermustbeauthenticatedtoaccesstheresource.Ifyoudonotspecifyan
authenticationmechanism,authenticationoftheuserisnotrequired.
Thefollowingexampleshowshowtodeclareform-basedauthenticationinyourdeployment
descriptor:
<login-config>
<auth-method>FORM</auth-method><realm-name>file</realm-name><form-login-config>
<form-login-page>/login.xhtml</form-login-page><form-error-page>/error.xhtml</form-error-page>
</form-login-config>
</login-config>
Theloginanderrorpagelocationsarespecifiedrelativetothelocationofthedeployment
descriptor.Examplesofloginanderrorpagesareshownin “CreatingtheLoginFormandthe
ErrorPage”onpage734 .
Thefollowingexampleshowshowtodeclaredigestauthenticationinyourdeployment
descriptor:
<login-config>
<auth-method>DIGEST</auth-method>
</login-config>
DeclaringSecurityRoles
Youcandeclaresecurityrolenamesusedinwebapplicationsbyusingthe security-role
elementofthedeploymentdescriptor.Usethiselementtolistallthesecurityrolesthatyouhavereferencedinyourapplication.
Thefollowingsnippetofadeploymentdescriptordeclarestherolesthatwillbeusedinan
applicationusingthe security-role elementandspecifieswhichoftheserolesisauthorizedto
accessprotectedresourcesusingthe auth-constraint element:
<security-constraint>
<web-resource-collection>
<web-resource-name>Protected Area</web-resource-name><url-pattern>/security/protected/*</url-pattern><http-method>PUT</http-method><http-method>DELETE</http-method><http-method>GET</http-method><http-method>POST</http-method>
</web-resource-collection><auth-constraint>
<role-name>manager</role-name>
</auth-constraint>
</security-constraint>SecuringWebApplications
Chapter40 • GettingStartedSecuringWebApplications 723
<!-- Security roles used by this web application -->
<security-role>
<role-name>manager</role-name>
</security-role><security-role>
<role-name>employee</role-name>
</security-role>
Inthisexample,the security-role elementlistsallthesecurityrolesusedintheapplication:
managerandemployee .Thisenablesthedeployertomapalltherolesdefinedintheapplication
tousersandgroupsdefinedontheGlassFishServer.
Theauth-constraint elementspecifiestherole, manager,thatcanaccesstheHTTPmethods
PUT,DELETE,GET,POSTlocatedinthedirectoryspecifiedbythe url-pattern element
(/jsp/security/protected/* ).
The@ServletSecurity annotationcannotbeusedinthissituationbecauseitsconstraints
applytoallURLpatternsspecifiedbythe @WebServlet annotation.
UsingProgrammaticSecuritywithWebApplications
Programmaticsecurityisusedbysecurity-awareapplicationswhendeclarativesecurityaloneis
notsufficienttoexpressthesecuritymodeloftheapplication.
AuthenticatingUsersProgrammatically
Servlet3.0specifiesthefollowingmethodsofthe HttpServletRequest interfacethatenable
youtoauthenticateusersforawebapplicationprogrammatically:
■authenticate ,whichallowsanapplicationtoinstigateauthenticationoftherequestcaller
bythecontainerfromwithinanunconstrainedrequestcontext.Alogindialogboxdisplaysandcollectstheusernameandpasswordforauthenticationpurposes.
■login,whichallowsanapplicationtocollectusernameandpasswordinformationasan
alternativetospecifyingform-basedauthenticationinanapplicationdeploymentdescriptor.
■logout,whichallowsanapplicationtoresetthecalleridentityofarequest.UsingProgrammaticSecuritywithWebApplications
TheJavaEE6Tutorial • January2013 724
Thefollowingexamplecodeshowshowtousethe loginandlogoutmethods:
package test;
import java.io.IOException;
import java.io.PrintWriter;import java.math.BigDecimal;import javax.ejb.EJB;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;
@WebServlet(name= "TutorialServlet ", urlPatterns={ "/TutorialServlet "})
public class TutorialServlet extends HttpServlet {
@EJBprivate ConverterBean converterBean;
/**
* Processes requests for both HTTP <code>GET</code>* and <code>POST</code> methods.* @param request servlet request* @param response servlet response* @throws ServletException if a servlet-specific error occurs* @throws IOException if an I/O error occurs*/
protected void processRequest(HttpServletRequest request,
HttpServletResponse response)
throws ServletException, IOException {
response.setContentType( "text/html;charset=UTF-8 ");
PrintWriter out = response.getWriter();try {
out.println( "<html> ");
out.println( "<head> ");
out.println( "<title>Servlet TutorialServlet</title> ");
out.println( "</head> ");
out.println( "<body> ");
request. login ("TutorialUser ","TutorialUser ");
BigDecimal result =
converterBean.dollarToYen(new BigDecimal( "1.0"));
out.println( "<h1>Servlet TutorialServlet result of dollarToYen= "
+ result + "</h1> ");
out.println( "</body> ");
out.println( "</html> ");
} catch (Exception e) {
throw new ServletException(e);
} finally {
request. logout ();
out.close();
}
}
}
Thefollowingexamplecodeshowshowtousethe authenticate method:UsingProgrammaticSecuritywithWebApplications
Chapter40 • GettingStartedSecuringWebApplications 725
package com.sam.test;
import java.io.*;
import javax.servlet.*;import javax.servlet.http.*;
public class TestServlet extends HttpServlet {
protected void processRequest(HttpServletRequest request,
HttpServletResponse response)throws ServletException, IOException {
response.setContentType( "text/html;charset=UTF-8 ");
PrintWriter out = response.getWriter();try {
request. authenticate (response);
out.println( "Authenticate Successful ");
} finally {
out.close();
}
}
CheckingCallerIdentityProgrammatically
Ingeneral,securitymanagementshouldbeenforcedbythecontainerinamannerthatis
transparenttothewebcomponent.ThesecurityAPIdescribedinthissectionshouldbeusedonlyinthelessfrequentsituationsinwhichthewebcomponentmethodsneedtoaccessthesecuritycontextinformation.
Servlet3.0specifiesthefollowingmethodsthatenableyoutoaccesssecurityinformationabout
thecomponent’scaller:
■getRemoteUser ,whichdeterminestheusernamewithwhichtheclientauthenticated.The
getRemoteUser methodreturnsthenameoftheremoteuser(thecaller)associatedbythe
containerwiththerequest.Ifnouserhasbeenauthenticated,thismethodreturns null.
■isUserInRole ,whichdetermineswhetheraremoteuserisinaspecificsecurityrole.Ifno
userhasbeenauthenticated,thismethodreturns false.Thismethodexpectsa Stringuser
role-name parameter.
Thesecurity-role-ref elementshouldbedeclaredinthedeploymentdescriptorwitha
role-name subelementcontainingtherolenametobepassedtothemethod.Usingsecurity
rolereferencesisdiscussedin “DeclaringandLinkingRoleReferences”onpage728 .
■getUserPrincipal ,whichdeterminestheprincipalnameofthecurrentuserandreturnsa
java.security.Principal object.Ifnouserhasbeenauthenticated,thismethodreturns
null.Callingthe getNamemethodonthe Principal returnedby getUserPrincipal
returnsthenameoftheremoteuser.
Yourapplicationcanmakebusiness-logicdecisionsbasedontheinformationobtainedusing
theseAPIs.UsingProgrammaticSecuritywithWebApplications
TheJavaEE6Tutorial • January2013 726
ExampleCodeforProgrammaticSecurity
Thefollowingcodedemonstratestheuseofprogrammaticsecurityforthepurposesof
programmaticlogin.Thisservletdoesthefollowing:
1. Itdisplaysinformationaboutthecurrentuser.
2. Itpromptstheusertologin.3. Itprintsouttheinformationagaintodemonstratetheeffectofthe loginmethod.
4. Itlogstheuserout.5. Itprintsouttheinformationagaintodemonstratetheeffectofthe logoutmethod.
package enterprise.programmatic_login;
import java.io.*;
import java.net.*;import javax.annotation.security.DeclareRoles;import javax.servlet.*;import javax.servlet.http.*;
@DeclareRoles( "javaee6user ")
public class LoginServlet extends HttpServlet {
/**
* Processes requests for both HTTP GET and POST methods.* @param request servlet request* @param response servlet response*/
protected void processRequest(HttpServletRequest request,
HttpServletResponse response)
throws ServletException, IOException {
response.setContentType( "text/html;charset=UTF-8 ");
PrintWriter out = response.getWriter();try {
String userName = request.getParameter( "txtUserName ");
String password = request.getParameter( "txtPassword ");
out.println( "Before Login "+"<br><br> ");
out.println( "IsUserInRole?.. "
+ request.isUserInRole( "javaee6user ")+"<br>");
out.println( "getRemoteUser?.. "+ request.getRemoteUser()+ "<br>");
out.println( "getUserPrincipal?.. "
+ request.getUserPrincipal()+ "<br>");
out.println( "getAuthType?.. "+ request.getAuthType()+ "<br><br> ");
try {
request.login(userName, password);
} catch(ServletException ex) {
out.println( "Login Failed with a ServletException.. "
+ ex.getMessage());
return;
}
out.println( "After Login... "+"<br><br> ");
out.println( "IsUserInRole?..
"
+ request.isUserInRole( "javaee6user ")+"<br>");UsingProgrammaticSecuritywithWebApplications
Chapter40 • GettingStartedSecuringWebApplications 727
out.println( "getRemoteUser?.. "+ request.getRemoteUser()+ "<br>");
out.println( "getUserPrincipal?.. "
+ request.getUserPrincipal()+ "<br>");
out.println( "getAuthType?.. "+ request.getAuthType()+ "<br><br> ");
request.logout();
out.println( "After Logout... "+"<br><br> ");
out.println( "IsUserInRole?.. "
+ request.isUserInRole( "javaee6user ")+"<br>");
out.println( "getRemoteUser?.. "+ request.getRemoteUser()+ "<br>");
out.println( "getUserPrincipal?.. "
+ request.getUserPrincipal()+ "<br>");
out.println( "getAuthType?.. "+ request.getAuthType()+ "<br>");
} finally {
out.close();
}
}...
}
DeclaringandLinkingRoleReferences
Asecurityrolereference isamappingbetweenthenameofarolethatiscalledfromaweb
componentusing isUserInRole(String role) andthenameofasecurityrolethathasbeen
definedfortheapplication.Ifno security-role-ref elementisdeclaredinadeployment
descriptorandthe isUserInRole methodiscalled,thecontainerdefaultstocheckingthe
providedrolenameagainstthelistofallsecurityrolesdefinedforthewebapplication.Usingthedefaultmethodinsteadofusingthe security-role-ref elementlimitsyourflexibilityto
changerolenamesinanapplicationwithoutalsorecompilingtheservletmakingthecall.
Thesecurity-role-ref elementisusedwhenanapplicationusesthe
HttpServletRequest.isUserInRole(String role) .Thevaluepassedtothe isUserInRole
methodisa Stringrepresentingtherolenameoftheuser.Thevalueofthe role-name element
mustbethe Stringusedastheparametertothe HttpServletRequest.isUserInRole(String
role).The role-link mustcontainthenameofoneofthesecurityrolesdefinedinthe
security-role elements.Thecontainerusesthemappingof security-role-ref to
security-role whendeterminingthereturnvalueofthecall.
Forexample,tomapthesecurityrolereference custtothesecurityrolewithrolename
bankCustomer ,thesyntaxwouldbe:
<servlet>
...
<security-role-ref>
<role-name>cust</role-name><role-link>bankCustomer</role-link>
</security-role-ref>
...</servlet>
Iftheservletmethodiscalledbyauserinthe bankCustomer securityrole,
isUserInRole( "cust")returns true.UsingProgrammaticSecuritywithWebApplications
TheJavaEE6Tutorial • January2013 728
Therole-link elementinthe security-role-ref elementmustmatcha role-name defined
inthe security-role elementofthesame web.xmldeploymentdescriptor,asshownhere:
<security-role>
<role-name>bankCustomer</role-name>
</security-role>
Asecurityrolereference,includingthenamedefinedbythereference,isscopedtothe
componentwhosedeploymentdescriptorcontainsthe security-role-ref deployment
descriptorelement.
Examples:SecuringWebApplications
Somebasicsetupisrequiredbeforeanyoftheexampleapplicationswillruncorrectly.Theexamplesuseannotations,programmaticsecurity,and/ordeclarativesecuritytodemonstrateaddingsecuritytoexistingwebapplications.
Herearesomeotherlocationswhereyouwillfindexamplesofsecuringvarioustypesof
applications:
■“The cart-secure Example:SecuringanEnterpriseBeanwithDeclarativeSecurity”on
page750
■“The converter-secure Example:SecuringanEnterpriseBeanwithProgrammatic
Security”onpage754
■GlassFishsamples: http://glassfish-samples.java.net/
▼ToSetUpYourSystemforRunningtheSecurity
Examples
Tosetupyoursystemforrunningthesecurityexamples,youneedtoconfigureauserdatabase
thattheapplicationcanuseforauthenticatingusers.Beforecontinuing,followthesesteps.
AddanauthorizedusertotheGlassFishServer.Fortheexamplesinthischapterandin
Chapter41,“GettingStartedSecuringEnterpriseApplications,” addausertothe filerealmof
theGlassFishServer,andassigntheusertothegroup TutorialUser :
a. FromtheAdministrationConsole,expandtheConfigurationsnode,thenexpandthe
server-confignode.
b. ExpandtheSecuritynode.c. ExpandtheRealmsnode.d. SelecttheFilenode.1Examples:SecuringWebApplications
Chapter40 • GettingStartedSecuringWebApplications 729
e. OntheEditRealmpage,clickManageUsers.
f. OntheFileUserspage,clickNew.g. IntheUserIDfield,typeaUserID.h. IntheGroupListfield,type TutorialUser .
i. IntheNewPasswordandConfirmNewPasswordfields,typeapassword.j. ClickOK.
Besuretowritedowntheusernameandpasswordfortheuseryoucreatesothatyoucanuseit
fortestingtheexampleapplications.Authenticationiscasesensitiveforboththeusernameandpassword,sowritedowntheusernameandpasswordexactly.Thistopicisdiscussedmorein
“ManagingUsersandGroupsontheGlassFishServer”onpage706 .
SetupDefaultPrincipaltoRoleMappingontheGlassFishServer:a. FromtheAdministrationConsole,expandtheConfigurationsnode,thenexpandthe
server-confignode.
b. SelecttheSecuritynode.c. SelecttheDefaultPrincipaltoRoleMappingEnabledcheckbox.d. ClickSave.
Thehello2_basicauth Example:BasicAuthentication
withaServlet
Thisexampleexplainshowtousebasicauthenticationwithaservlet.Withbasicauthentication
ofaservlet,thewebbrowserpresentsastandardlogindialogthatisnotcustomizable.Whenausersubmitshisorhernameandpassword,theserverdetermineswhethertheusernameandpasswordarethoseofanauthorizeduserandsendstherequestedwebresourceiftheuserisauthorizedtoviewit.2Examples:SecuringWebApplications
TheJavaEE6Tutorial • January2013 730
Ingeneral,thefollowingstepsarenecessaryforaddingbasicauthenticationtoanunsecured
servlet,suchastheonesdescribedin Chapter3,“GettingStartedwithWebApplications.” Inthe
exampleapplicationincludedwiththistutorial,manyofthesestepshavebeencompletedforyouandarelistedheresimplytoshowwhatneedstobedoneshouldyouwishtocreateasimilarapplication.Thecompletedversionofthisexampleapplicationcanbefoundinthetut-install /examples/security/hello2_basicauth/ directory.
1. Followthestepsin
“ToSetUpYourSystemforRunningtheSecurityExamples”on
page729.
2. Createawebmoduleasdescribedin Chapter3,“GettingStartedwithWebApplications,”
fortheservletexample, hello2.
3. Addtheappropriatesecurityannotationstotheservlet.Thesecurityannotationsare
describedin “SpecifyingSecurityforBasicAuthenticationUsingAnnotations”onpage731 .
4. Build,package,anddeploythewebapplicationbyfollowingthestepsin “ToBuild,Package,
andDeploythe hello2_basicauth ExampleUsingNetBeansIDE”onpage732 or“To
Build,Package,andDeploythe hello2_basicauth ExampleUsingAnt”onpage732 .
5. Runthewebapplicationbyfollowingthestepsdescribedin “ToRunthe hello2_basicauth
Example”onpage733 .
SpecifyingSecurityforBasicAuthenticationUsingAnnotations
ThedefaultauthenticationmechanismusedbytheGlassFishServerisbasicauthentication.Withbasicauthentication,theGlassFishServerspawnsastandardlogindialogtocollectusernameandpassworddataforaprotectedresource.Oncetheuserisauthenticated,accesstotheprotectedresourceispermitted.
Tospecifysecurityforaservlet,usethe @ServletSecurity annotation.Thisannotationallows
youtospecifybothspecificconstraintsonHTTPmethodsandmoregeneralconstraintsthatapplytoallHTTPmethodsforwhichnospecificconstraintisspecified.Withinthe@ServletSecurity annotation,youcanspecifythefollowingannotations:
■The@HttpMethodConstraint annotation,whichappliestoaspecificHTTPmethod
■Themoregeneral @HttpConstraint annotation,whichappliestoallHTTPmethodsfor
whichthereisnocorresponding @HttpMethodConstraint annotation
Boththe @HttpMethodConstraint and@HttpConstraint annotationswithinthe
@ServletSecurity annotationcanspecifythefollowing:
■AtransportGuarantee elementthatspecifiesthedataprotectionrequirements(thatis,
whetherornotSSL/TLSisrequired)thatmustbesatisfiedbytheconnectionsonwhichrequestsarrive.Validvaluesforthiselementare NONEandCONFIDENTIAL .
■ArolesAllowed elementthatspecifiesthenamesoftheauthorizedroles.
Forthe hello2_basicauth application,the GreetingServlet hasthefollowingannotations:Examples:SecuringWebApplications
Chapter40 • GettingStartedSecuringWebApplications 731
@WebServlet(name = "GreetingServlet ", urlPatterns = { "/greeting "})
@ServletSecurity(@HttpConstraint(transportGuarantee = TransportGuarantee.CONFIDENTIAL,
rolesAllowed = { "TutorialUser "}))
TheseannotationsspecifythattherequestURI /greeting canbeaccessedonlybyuserswho
havebeenauthorizedtoaccessthisURLbecausetheyhavebeenverifiedtobeintheroleTutorialUser .Thedatawillbesentoveraprotectedtransportinordertokeeptheusername
andpassworddatafrombeingreadintransit.
Ifyouusethe @ServletSecurity annotation,youdonotneedtospecifysecuritysettingsinthe
deploymentdescriptor.Usethedeploymentdescriptortospecifysettingsfornondefaultauthenticationmechanisms,forwhichyoucannotusethe @ServletSecurity annotation.
▼ToBuild,Package,andDeploythe hello2_basicauth ExampleUsing
NetBeansIDE
Followthestepsin “ToSetUpYourSystemforRunningtheSecurityExamples”onpage729 .
InNetBeansIDE,fromtheFilemenu,chooseOpenProject.IntheOpenProjectdialog,navigateto:
tut-install /examples/security/
Selectthe hello2_basicauth folder.
SelecttheOpenasMainProjectcheckbox.ClickOpenProject.Right-click hello2_basicauth intheProjectspaneandselectDeploy.
ThisoptionbuildsanddeploystheexampleapplicationtoyourGlassFishServerinstance.
▼ToBuild,Package,andDeploythe hello2_basicauth ExampleUsing
Ant
Followthestepsin “ToSetUpYourSystemforRunningtheSecurityExamples”onpage729 .
Inaterminalwindow,goto:
tut-install /examples/security/hello2_basicauth/
Typethefollowingcommand:
ant1
23
4
567
1
2
3Examples:SecuringWebApplications
TheJavaEE6Tutorial • January2013 732
Thiscommandcallsthe defaulttarget,whichbuildsandpackagestheapplicationintoaWAR
file,hello2_basicauth.war ,thatislocatedinthe distdirectory.
MakesurethattheGlassFishServerisstarted.Todeploytheapplication,typethefollowingcommand:
ant deploy
▼ToRunthehello2_basicauthExample
Inawebbrowser,navigatetothefollowingURL:
https://localhost:8181/hello2_basicauth/greeting
Youmaybepromptedtoacceptthesecuritycertificatefortheserver.Ifso,acceptthesecurity
certificate.Ifthebrowserwarnsthatthecertificateisinvalidbecauseitisself-signed,addasecurityexceptionfortheapplication.
AnAuthenticationRequireddialogboxappears.Itsappearancevaries,dependingonthe
browseryouuse.
Typeausernameandpasswordcombinationthatcorrespondstoauserwhohasalreadybeen
createdinthe filerealmoftheGlassFishServerandhasbeenassignedtothegroupof
TutorialUser ;thenclickOK.
Basicauthenticationiscasesensitiveforboththeusernameandpassword,sotypetheuser
nameandpasswordexactlyasdefinedfortheGlassFishServer.
Theserverreturnstherequestedresourceifallthefollowingconditionsaremet.
■AuserwiththeusernameyouenteredisdefinedfortheGlassFishServer.
■Theuserwiththeusernameyouenteredhasthepasswordyouentered.
■Theusernameandpasswordcombinationyouenteredisassignedtothegroup
TutorialUser ontheGlassFishServer.
■Theroleof TutorialUser ,asdefinedfortheapplication,ismappedtothegroup
TutorialUser ,asdefinedfortheGlassFishServer.
TypeanameinthetextfieldandclicktheSubmitbutton.
Becauseyouhavealreadybeenauthorized,thenameyouenterinthisstepdoesnothaveany
limitations.Youhaveunlimitedaccesstotheapplicationnow.
Theapplicationrespondsbysaying“Hello”tothenameyoutyped.
Forrepetitivetestingofthisexample,youmayneedtocloseandreopenyourbrowser.You
shouldalsorunthe ant undeploy andant clean targetsortheNetBeansIDECleanandBuild
optiontogetafreshstart.4
5
1
2
3
NextStepsExamples:SecuringWebApplications
Chapter40 • GettingStartedSecuringWebApplications 733
Thehello1_formauth Example:Form-Based
AuthenticationwithaJavaServerFacesApplication
Thisexampleexplainshowtouseform-basedauthenticationwithaJavaServerFaces
application.Withform-basedauthentication,youcancustomizetheloginscreenanderrorpagesthatarepresentedtothewebclientforauthenticationoftheusernameandpassword.Whenausersubmitshisorhernameandpassword,theserverdetermineswhethertheusernameandpasswordarethoseofanauthorizeduserand,ifauthorized,sendstherequestedwebresource.
Thisexample, hello1_formauth ,addssecuritytothebasicJavaServerFacesapplicationshown
in
“WebModules:The hello1Example”onpage84 .
Ingeneral,thestepsnecessaryforaddingform-basedauthenticationtoanunsecured
JavaServerFacesapplicationaresimilartothosedescribedin “The hello2_basicauth
Example:BasicAuthenticationwithaServlet”onpage730 .Themajordifferenceisthatyou
mustuseadeploymentdescriptortospecifytheuseofform-basedauthentication,asdescribedin
“SpecifyingSecurityfortheForm-BasedAuthenticationExample”onpage736 .Inaddition,
youmustcreatealoginformpageandaloginerrorpage,asdescribedin “CreatingtheLogin
FormandtheErrorPage”onpage734 .
Thecompletedversionofthisexampleapplicationcanbefoundinthe
tut-install /examples/security/hello1_formauth/ directory.
CreatingtheLoginFormandtheErrorPage
Whenusingform-basedloginmechanisms,youmustspecifyapagethatcontainstheformyou
wanttousetoobtaintheusernameandpassword,aswellasapagetodisplayifloginauthenticationfails.Thissectiondiscussestheloginformandtheerrorpageusedinthisexample.
“SpecifyingSecurityfortheForm-BasedAuthenticationExample”onpage736 shows
howyouspecifythesepagesinthedeploymentdescriptor.
TheloginpagecanbeanHTMLpageoraservlet,anditmustreturnanHTMLpagecontaining
aformthatconformstospecificnamingconventions(seetheJavaServlet3.0specificationformoreinformationontheserequirements).Todothis,includetheelementsthatacceptusernameandpasswordinformationbetween <form></form> tagsinyourloginpage.Thecontent
ofanHTMLpageorservletforaloginpageshouldbecodedasfollows:
<form method= "post"action= "j_security_check ">
<input type= "text"name= "j_username ">
<input type= "password "name= "j_password ">
</form>
YoucanuseFaceletstagsinsteadoftheHTML inputtags,butyoumustusetheHTML form
tag,notaFaceletstag.Examples:SecuringWebApplications
TheJavaEE6Tutorial • January2013 734
Thefullcodefortheloginpageusedinthisexamplecanbefoundat
tut-install /examples/security/hello1_formauth/web/login.xhtml .Hereisthecodeforthis
page:
<html lang= "en"
xmlns= "http://www.w3.org/1999/xhtml "
xmlns:h= "http://java.sun.com/jsf/html ">
<h:head>
<title>Login Form</title>
</h:head><h:body>
<h2>Hello, please log in:</h2><form method= "post"action= "j_security_check ">
<table columns= "2"role= "presentation ">
<tr>
<td><h:outputLabel for= "j_username "
value= "Please type your user name: "/></td>
<td><h:inputText id= "j_username "autocomplete= "off"
size= "20"/></td>
</tr><tr>
<td><h:outputLabel for= "j_password "
value= "Please type your password: "/></td>
<td><h:inputSecret id= "j_password "autocomplete= "off"
size= "20"/></td>
</tr>
</table><p>
<h:commandButton type= "submit "value= "Submit "/>
&nbsp;<h:commandButton type= "reset "value= "Reset "/>
</p>
</form>
</h:body>
</html>
Theloginerrorpageisdisplayediftheuserentersausernameandpasswordcombinationthat
isnotauthorizedtoaccesstheprotectedURI.Forthisexample,theloginerrorpagecanbefoundattut-install /examples/security/hello1_formauth/web/error.xhtml .Forthis
example,theloginerrorpageexplainsthereasonforreceivingtheerrorpageandprovidesalinkthatwillallowtheusertotryagain.Hereisthecodeforthispage:
<html lang= "en"
xmlns= "http://www.w3.org/1999/xhtml ">
<head>
<title>Login Error</title>
</head><body><h2>Invalid user name or password.</h2>
<p>Please enter a user name or password that is authorized to access this
application. For this application, this means a user that has beencreated in the <code>file</code> realm and has been assigned to the<em>group</em> of <code>TutorialUser</code>.</p>
<p><a href= "faces/index.xhtml ">Return to login page</a></p>Examples:SecuringWebApplications
Chapter40 • GettingStartedSecuringWebApplications 735
</body>
</html>
SpecifyingSecurityfortheForm-BasedAuthenticationExample
Thisexampletakesaverysimpleservlet-basedwebapplicationandaddsform-basedsecurity.
Tospecifyform-basedinsteadofbasicauthenticationforaJavaServerFacesexample,youmustusethedeploymentdescriptor.
Thefollowingsamplecodeshowsthesecurityelementsaddedtothedeploymentdescriptorfor
thisexample,whichcanbefoundin tut-install /examples/security/
hello1_formauth/web/WEB-INF/web.xml .
<security-constraint>
<display-name>Constraint1</display-name><web-resource-collection>
<web-resource-name>wrcoll</web-resource-name><description/><url-pattern>/*</url-pattern>
</web-resource-collection><auth-constraint>
<description/><role-name>TutorialUser</role-name>
</auth-constraint>
</security-constraint>
<login-config>
<auth-method>FORM</auth-method><realm-name>file</realm-name><form-login-config>
<form-login-page>/faces/login.xhtml</form-login-page><form-error-page>/faces/error.xhtml</form-error-page>
</form-login-config>
</login-config>
<security-role>
<description/><role-name>TutorialUser</role-name>
</security-role>
▼ToBuild,Package,andDeploythe hello1_formauth ExampleUsing
NetBeansIDE
Followthestepsin “ToSetUpYourSystemforRunningtheSecurityExamples”onpage729 .
InNetBeansIDE,fromtheFilemenu,chooseOpenProject.IntheOpenProjectdialog,navigateto:
tut-install /examples/security/
Selectthe hello1_formauth folder.1
23
4Examples:SecuringWebApplications
TheJavaEE6Tutorial • January2013 736
SelecttheOpenasMainProjectcheckbox.
ClickOpenProject.Right-click hello1_formauth intheProjectspaneandselectDeploy.
▼ToBuild,Package,andDeploythe hello1_formauth ExampleUsingAnt
Followthestepsin “ToSetUpYourSystemforRunningtheSecurityExamples”onpage729 .
Inaterminalwindow,goto:
tut-install /examples/security/hello1_formauth/
Typethefollowingcommandattheterminalwindoworcommandprompt:
ant
Thistargetwillspawnanynecessarycompilations,copyfilestothe
tut-install /examples/security/hello1_formauth/build/ directory,createtheWARfile,and
copyittothe tut-install /examples/security/hello1_formauth/dist/ directory.
Todeploy hello1_formauth.war totheGlassFishServer,typethefollowingcommand:
ant deploy
▼ToRunthe hello1_formauth Example
Torunthewebclientfor hello1_formauth ,followthesesteps.
OpenawebbrowsertothefollowingURL:
https://localhost:8181/hello1_formauth/
Theloginformopensinthebrowser.Typeausernameandpasswordcombinationthatcorrespondstoauserwhohasalreadybeen
createdinthe filerealmoftheGlassFishServerandhasbeenassignedtothegroupof
TutorialUser .
Form-basedauthenticationiscasesensitiveforboththeusernameandpassword,sotypethe
usernameandpasswordexactlyasdefinedfortheGlassFishServer.
ClicktheSubmitbutton.
Ifyouentered My_Nameasthenameand My_Pwdforthepassword,theserverreturnsthe
requestedresourceifallthefollowingconditionsaremet.
■Auserwiththeusername My_NameisdefinedfortheGlassFishServer.
■Theuserwiththeusername My_Namehasapassword My_PwddefinedfortheGlassFish
Server.5
67
1
2
3
4
1
2
3Examples:SecuringWebApplications
Chapter40 • GettingStartedSecuringWebApplications 737
■Theuser My_Namewiththepassword My_Pwdisassignedtothegroup TutorialUser onthe
GlassFishServer.
■Therole TutorialUser ,asdefinedfortheapplication,ismappedtothegroup
TutorialUser ,asdefinedfortheGlassFishServer.
Whentheseconditionsaremetandtheserverhasauthenticatedtheuser,theapplication
appears.
TypeyournameandclicktheSubmitbutton.
Becauseyouhavealreadybeenauthorized,thenameyouenterinthisstepdoesnothaveany
limitations.Youhaveunlimitedaccesstotheapplicationnow.
Theapplicationrespondsbysaying“Hello”toyou.
Foradditionaltestingandtoseetheloginerrorpagegenerated,closeandreopenyourbrowser,
typetheapplicationURL,andtypeausernameandpasswordthatarenotauthorized.
Note–Forrepetitivetestingofthisexample,youmayneedtocloseandreopenyourbrowser.
Youshouldalsorunthe ant clean andant undeploy commandstoensureafreshbuildif
usingtheAnttool,orselectCleanandBuildthenDeployifusingNetBeansIDE.4
NextStepsExamples:SecuringWebApplications
TheJavaEE6Tutorial • January2013 738
GettingStartedSecuringEnterprise
Applications
Systemadministrators,applicationdevelopers,beanproviders,anddeployersareresponsible
foradministeringsecurityforenterpriseapplications:
■Asystemadministratorisresponsibleforsettingupadatabaseofusersandassigningthemtothepropergroup.ThesystemadministratorisalsoresponsibleforsettingGlassFishServerpropertiesthatenabletheapplicationstorunproperly.Somesecurity-relatedexamplessetupadefaultprincipal-to-rolemapping,anonymoususers,defaultusers,andpropagatedidentities.Whenneededforthistutorial,thestepsforperformingspecifictasks
areprovided.
■Anapplicationdeveloperorbeanproviderisresponsibleforannotatingtheclassesandmethodsoftheenterpriseapplicationinordertoprovideinformationtothedeployeraboutwhichmethodsneedtohaverestrictedaccess.Thistutorialdescribesthestepsnecessarytocompletethistask.
■Adeployerisresponsiblefortakingthesecurityviewprovidedbytheapplicationdeveloperandimplementingthatsecurityupondeployment.Thisdocumentprovidestheinformationneededtoaccomplishthistaskforthetutorialexampleapplications.
Thefollowingtopicsareaddressedhere:
■“SecuringEnterpriseBeans”onpage739
■“Examples:SecuringEnterpriseBeans”onpage749
SecuringEnterpriseBeans
EnterprisebeansareJavaEEcomponentsthatimplementEJBtechnology.Enterprisebeansrun
intheEJBcontainer,aruntimeenvironmentwithintheGlassFishServer.Althoughtransparenttotheapplicationdeveloper,theEJBcontainerprovidessystem-levelservices,suchastransactionsandsecuritytoitsenterprisebeans,whichformthecoreoftransactionalJavaEEapplications.41CHAPTER 41
739
Enterprisebeanmethodscanbesecuredineitherofthefollowingways:
■Declarativesecurity (preferred):Expressesanapplicationcomponent’ssecurity
requirementsusingeitherdeploymentdescriptorsorannotations.Thepresenceofanannotationinthebusinessmethodofanenterprisebeanclassthatspecifiesmethodpermissionsisallthatisneededformethodprotectionandauthenticationinsomesituations.Thissectiondiscussesthissimpleandefficientmethodofsecuringenterprise
beans.
Becauseofsomelimitationstothesimplifiedmethodofsecuringenterprisebeans,you
wouldwanttocontinuetousethedeploymentdescriptortospecifysecurityinformationinsomeinstances.Anauthenticationmechanismmustbeconfiguredontheserverforthesimplesolutiontowork.BasicauthenticationistheGlassFishServer’sdefaultauthenticationmethod.
Thistutorialexplainshowtoinvokeusername/passwordauthenticationofauthorizedusers
bydecoratingtheenterpriseapplication’sbusinessmethodswithannotationsthatspecifymethodpermissions.
Tomakethedeployer’staskeasier,theapplicationdevelopercandefinesecurityroles.A
securityroleisagroupingofpermissionsthatagiventypeofapplicationusersmusthaveinordertosuccessfullyusetheapplication.Forexample,inapayrollapplication,someuserswillwanttoviewtheirownpayrollinformation( employee),somewillneedtoviewothers’
payrollinformation( manager),andsomewillneedtobeabletochangeothers’payroll
information( payrollDept ).Theapplicationdeveloperwoulddeterminethepotentialusers
oftheapplicationandwhichmethodswouldbeaccessibletowhichusers.Theapplicationdeveloperwouldthendecorateclassesormethodsoftheenterprisebeanwithannotationsthatspecifythetypesofusersauthorizedtoaccessthosemethods.Usingannotationstospecifyauthorizedusersisdescribedin
“SpecifyingAuthorizedUsersbyDeclaringSecurity
Roles”onpage743 .
Whenoneoftheannotationsisusedtodefinemethodpermissions,thedeploymentsystem
willautomaticallyrequireusername/passwordauthentication.Inthistypeofauthentication,auserispromptedtoenterausernameandpassword,whichwillbecomparedagainstadatabaseofknownusers.Iftheuserisfoundandthepasswordmatches,therolesthattheuserisassignedwillbecomparedagainsttherolesthatareauthorizedtoaccessthemethod.Iftheuserisauthenticatedandfoundtohavearolethatisauthorizedtoaccessthatmethod,thedatawillbereturnedtotheuser.
Usingdeclarativesecurityisdiscussedin
“SecuringanEnterpriseBeanUsingDeclarative
Security”onpage742 .
■Programmaticsecurity :Foranenterprisebean,codeembeddedinabusinessmethodthat
isusedtoaccessacaller’sidentityprogrammaticallyandthatusesthisinformationtomakesecuritydecisions.Programmaticsecurityisusefulwhendeclarativesecurityaloneisnotsufficienttoexpressthesecuritymodelofanapplication.
Ingeneral,securitymanagementshouldbeenforcedbythecontainerinamannerthatis
transparenttotheenterprisebeans’businessmethods.TheprogrammaticsecurityAPIsdescribedinthischaptershouldbeusedonlyinthelessfrequentsituationsinwhichtheSecuringEnterpriseBeans
TheJavaEE6Tutorial • January2013 740
enterprisebeanbusinessmethodsneedtoaccessthesecurity-contextinformation,suchas
whenyouwanttograntaccessbasedonthetimeofdayorothernontrivialconditionchecksforaparticularrole.
Programmaticsecurityisdiscussedin
“SecuringanEnterpriseBeanProgrammatically”on
page746.
Someofthematerialinthischapterassumesthatyouhavealreadyread Chapter22,“Enterprise
Beans,”Chapter23,“GettingStartedwithEnterpriseBeans,” andChapter39,“Introductionto
SecurityintheJavaEEPlatform.”
Asmentionedearlier,enterprisebeansrunintheEJBcontainer,aruntimeenvironmentwithintheGlassFishServer,asshownin
Figure41–1 .
FIGURE41–1 JavaEEServerandContainers
Application Client 
Container
Client Machine
Java EE
Server
Web
Container
Web Page
 Servlet
EJB
Container
Enterprise
Bean
WebBrowser Application
Client
Enterprise
Bean
DatabaseSecuringEnterpriseBeans
Chapter41 • GettingStartedSecuringEnterpriseApplications 741
ThissectiondiscussessecuringaJavaEEapplicationwhereoneormoremodules,suchasEJB
JARfiles,arepackagedintoanEARfile,thearchivefilethatholdstheapplication.SecurityannotationswillbeusedintheJavaprogrammingclassfilestospecifyauthorizedusersandbasic,orusername/password,authentication.
Enterprisebeansoftenprovidethebusinesslogicofawebapplication.Inthesecases,packaging
theenterprisebeanwithinthewebapplication’sWARmodulesimplifiesdeploymentandapplicationorganization.EnterprisebeansmaybepackagedwithinaWARmoduleasJavaclassfilesorwithinaJARfilethatisbundledwithintheWARmodule.WhenaservletorJavaServerFacespagehandlesthewebfrontendandtheapplicationispackagedintoaWARmoduleasaJavaclassfile,securityfortheapplicationcanbehandledintheapplication’s web.xmlfile.The
EJBintheWARfilecanhaveitsowndeploymentdescriptor, ejb-jar.xml ,ifrequired.
Securingwebapplicationsusing web.xmlisdiscussedin
Chapter40,“GettingStartedSecuring
WebApplications.”
Thefollowingsectionsdescribedeclarativeandprogrammaticsecuritymechanismsthatcanbeusedtoprotectenterprisebeanresources.Theprotectedresourcesincludeenterprisebeanmethodsthatarecalledfromapplicationclients,webcomponents,orotherenterprisebeans.
Formoreinformationonthistopic,readtheEnterpriseJavaBeans3.1specification.This
documentcanbedownloadedfrom
http://jcp.org/en/jsr/detail?id=318 .Chapter17of
thisspecification,“SecurityManagement,”discussessecuritymanagementforenterprisebeans.
SecuringanEnterpriseBeanUsingDeclarative
Security
Declarativesecurityenablestheapplicationdevelopertospecifywhichusersareauthorizedto
accesswhichmethodsoftheenterprisebeansandtoauthenticatetheseuserswithbasic,orusername-password,authentication.Frequently,thepersonwhoisdevelopinganenterprise
applicationisnotthesamepersonwhoisresponsiblefordeployingtheapplication.AnapplicationdeveloperwhousesdeclarativesecuritytodefinemethodpermissionsandauthenticationsmechanismsispassingalongtothedeployerasecurityviewoftheenterprisebeanscontainedintheEJBJAR.Whenasecurityviewispassedontothedeployer,heorsheusesthisinformationtodefinemethodpermissionsforsecurityroles.Ifyoudon’tdefineasecurityview,thedeployerwillhavetodeterminewhateachbusinessmethoddoestodeterminewhichusersareauthorizedtocalleachmethod.
Asecurityviewconsistsofasetofsecurityroles,asemanticgroupingofpermissionsthata
giventypeofusersofanapplicationmusthavetosuccessfullyaccesstheapplication.Securityrolesaremeanttobelogicalroles,representingatypeofuser.Youcandefinemethodpermissionsforeachsecurityrole.Amethodpermissionisapermissiontoinvokeaspecifiedgroupofmethodsofanenterprisebean’sbusinessinterface,homeinterface,componentinterface,and/orwebserviceendpoints.Aftermethodpermissionsaredefined,username/passwordauthenticationwillbeusedtoverifytheidentityoftheuser.SecuringEnterpriseBeans
TheJavaEE6Tutorial • January2013 742
Itisimportanttokeepinmindthatsecurityrolesareusedtodefinethelogicalsecurityviewof
anapplication.Theyshouldnotbeconfusedwiththeusergroups,users,principals,andotherconceptsthatexistintheGlassFishServer.Anadditionalstepisrequiredtomaptherolesdefinedintheapplicationtousers,groups,andprincipalsthatarethecomponentsoftheuser
databaseinthefilerealmoftheGlassFishServer.Thesestepsareoutlinedin
“MappingRolesto
UsersandGroups”onpage709 .
Thefollowingsectionsshowhowanapplicationdeveloperusesdeclarativesecuritytoeither
secureanapplicationortocreateasecurityviewtopassalongtothedeployer.
SpecifyingAuthorizedUsersbyDeclaringSecurityRoles
Thissectiondiscusseshowtouseannotationstospecifythemethodpermissionsforthemethodsofabeanclass.Formoreinformationontheseannotations,refertotheCommonAnnotationsfortheJavaPlatformspecificationat
http://jcp.org/en/jsr/detail?id=250 .
Methodpermissionscanbespecifiedontheclass,thebusinessmethodsoftheclass,orboth.
Methodpermissionscanbespecifiedonamethodofthebeanclasstooverridethemethodpermissionsvaluespecifiedontheentirebeanclass.Thefollowingannotationsareusedtospecifymethodpermissions:
■@DeclareRoles :Specifiesalltherolesthattheapplicationwilluse,includingrolesnot
specificallynamedina @RolesAllowed annotation.Thesetofsecurityrolestheapplication
usesisthetotalofthesecurityrolesdefinedinthe @DeclareRoles and@RolesAllowed
annotations.
The@DeclareRoles annotationisspecifiedonabeanclass,whereitservestodeclareroles
thatcanbetested(forexample,bycalling isCallerInRole )fromwithinthemethodsofthe
annotatedclass.WhendeclaringthenameofaroleusedasaparametertotheisCallerInRole(String roleName) method,thedeclarednamemustbethesameasthe
parametervalue.
Thefollowingexamplecodedemonstratestheuseofthe @DeclareRoles annotation:
@DeclareRoles( "BusinessAdmin ")
public class Calculator {
...
}
Thesyntaxfordeclaringmorethanoneroleisasshowninthefollowingexample:
@DeclareRoles({ "Administrator ","Manager ","Employee "})
■@RolesAllowed( "list-of-roles "):Specifiesthesecurityrolespermittedtoaccessmethodsin
anapplication.Thisannotationcanbespecifiedonaclassorononeormoremethods.Whenspecifiedattheclasslevel,theannotationappliestoallmethodsintheclass.Whenspecifiedonamethod,theannotationappliestothatmethodonlyandoverridesanyvaluesspecifiedattheclasslevel.SecuringEnterpriseBeans
Chapter41 • GettingStartedSecuringEnterpriseApplications 743
Tospecifythatnorolesareauthorizedtoaccessmethodsinanapplication,usethe
@DenyAll annotation.Tospecifythatauserinanyroleisauthorizedtoaccessthe
application,usethe @PermitAll annotation.
Whenusedinconjunctionwiththe @DeclareRoles annotation,thecombinedsetof
securityrolesisusedbytheapplication.
Thefollowingexamplecodedemonstratestheuseofthe @RolesAllowed annotation:
@DeclareRoles({ "Administrator ","Manager ","Employee "})
public class Calculator {
@RolesAllowed( "Administrator ")
public void setNewRate(int rate) {
...
}
}
■@PermitAll :Specifiesthat allsecurityrolesarepermittedtoexecutethespecifiedmethodor
methods.Theuserisnotcheckedagainstadatabasetoensurethatheorsheisauthorizedtoaccessthisapplication.
Thisannotationcanbespecifiedonaclassorononeormoremethods.Specifyingthis
annotationontheclassmeansthatitappliestoallmethodsoftheclass.Specifyingitatthemethodlevelmeansthatitappliestoonlythatmethod.
Thefollowingexamplecodedemonstratestheuseofthe @PermitAll annotation:
import javax.annotation.security.*;
@RolesAllowed( "RestrictedUsers ")
public class Calculator {
@RolesAllowed( "Administrator ")
public void setNewRate(int rate) {
//...
}@PermitAllpublic long convertCurrency(long amount) {
//...
}
}
■@DenyAll :Specifiesthat nosecurityrolesarepermittedtoexecutethespecifiedmethodor
methods.ThismeansthatthesemethodsareexcludedfromexecutionintheJavaEEcontainer.
Thefollowingexamplecodedemonstratestheuseofthe @DenyAll annotation:
import javax.annotation.security.*;
@RolesAllowed( "Users ")
public class Calculator {
@RolesAllowed( "Administrator ")
public void setNewRate(int rate) {
//...
}@DenyAllpublic long convertCurrency(long amount) {
//...SecuringEnterpriseBeans
TheJavaEE6Tutorial • January2013 744
}
}
Thefollowingcodesnippetdemonstratestheuseofthe @DeclareRoles annotationwiththe
isCallerInRole method.Inthisexample,the @DeclareRoles annotationdeclaresarolethat
theenterprisebean PayrollBean usestomakethesecuritycheckbyusing
isCallerInRole( "payroll ")toverifythatthecallerisauthorizedtochangesalarydata:
@DeclareRoles( "payroll ")
@Stateless public class PayrollBean implements Payroll {
@Resource SessionContext ctx;
public void updateEmployeeInfo(EmplInfo info) {
oldInfo = ... read from database;// The salary field can be changed only by callers
// who have the security role "payroll "
Principal callerPrincipal = ctx.getCallerPrincipal();if (info.salary != oldInfo.salary && !ctx.isCallerInRole( "payroll ")) {
throw new SecurityException(...);
}...
}...
}
Thefollowingexamplecodeillustratestheuseofthe @RolesAllowed annotation:
@RolesAllowed( "admin ")
public class SomeClass {
public void aMethod () {...}public void bMethod () {...}...
}
@Stateless public class MyBean extends SomeClass implements A {
@RolesAllowed( "HR")
public void aMethod () {...}
public void cMethod () {...}
...
}
Inthisexample,assumingthat aMethod,bMethod,and cMethodaremethodsofbusiness
interface A,themethodpermissionsvaluesofmethods aMethodandbMethodare
@RolesAllowed( "HR")and@RolesAllowed( "admin "),respectively.Themethodpermissions
formethod cMethodhavenotbeenspecified.
Toclarify,theannotationsarenotinheritedbythesubclassitself.Instead,theannotationsapply
tomethodsofthesuperclassthatareinheritedbythesubclass.SecuringEnterpriseBeans
Chapter41 • GettingStartedSecuringEnterpriseApplications 745
SpecifyinganAuthenticationMechanismandSecureConnection
Whenmethodpermissionsarespecified,basicusername/passwordauthenticationwillbe
invokedbytheGlassFishServer.
TouseadifferenttypeofauthenticationortorequireasecureconnectionusingSSL,specifythis
informationinanapplicationdeploymentdescriptor.
SecuringanEnterpriseBeanProgrammatically
Programmaticsecurity,codethatisembeddedinabusinessmethod,isusedtoaccessacaller’sidentityprogrammaticallyandusesthisinformationtomakesecuritydecisionswithinthemethoditself.
AccessinganEnterpriseBeanCaller’sSecurityContext
Ingeneral,securitymanagementshouldbeenforcedbythecontainerinamannerthatistransparenttotheenterprisebean’sbusinessmethods.ThesecurityAPIdescribedinthissectionshouldbeusedonlyinthelessfrequentsituationsinwhichtheenterprisebeanbusinessmethodsneedtoaccessthesecuritycontextinformation,suchaswhenyouwanttorestrictaccesstoaparticulartimeofday.
Thejavax.ejb.EJBContext interfaceprovidestwomethodsthatallowthebeanproviderto
accesssecurityinformationabouttheenterprisebean’scaller:
■getCallerPrincipal ,whichallowstheenterprisebeanmethodstoobtainthecurrentcaller
principal’sname.Themethodsmight,forexample,usethenameasakeytoinformationinadatabase.
Thefollowingcodesampleillustratestheuseofthe getCallerPrincipal method:
@Stateless public class EmployeeServiceBean implements EmployeeService {
@Resource SessionContext ctx;@PersistenceContext EntityManager em;
public void changePhoneNumber(...) {
...// obtain the caller principal.callerPrincipal = ctx.getCallerPrincipal();
// obtain the caller principal’s name.
callerKey = callerPrincipal.getName();
// use callerKey as primary key to find EmployeeRecord
EmployeeRecord myEmployeeRecord =
em.find(EmployeeRecord.class, callerKey);
// update phone number
myEmployeeRecord.setPhoneNumber(...);
...
}
}SecuringEnterpriseBeans
TheJavaEE6Tutorial • January2013 746
Inthisexample,theenterprisebeanobtainstheprincipalnameofthecurrentcalleranduses
itastheprimarykeytolocatean EmployeeRecord entity.Thisexampleassumesthat
applicationhasbeendeployedsuchthatthecurrentcallerprincipalcontainstheprimarykeyusedfortheidentificationofemployees(forexample,employeenumber).
■isCallerInRole ,whichtheenterprisebeancodecanusetoallowthebean
provider/applicationdevelopertocodethesecuritychecksthatcannotbeeasilydefinedusingmethodpermissions.Suchacheckmightimposearole-basedlimitonarequest,oritmightdependoninformationstoredinthedatabase.
Theenterprisebeancodecanusethe isCallerInRole methodtotestwhetherthecurrent
callerhasbeenassignedtoagivensecurityrole.Securityrolesaredefinedbythebeanproviderortheapplicationassemblerandareassignedbythedeployertoprincipalsorprincipalgroupsthatexistintheoperationalenvironment.
Thefollowingcodesampleillustratestheuseofthe isCallerInRole method:
@Stateless public class PayrollBean implements Payroll {
@Resource SessionContext ctx;
public void updateEmployeeInfo(EmplInfo info) {
oldInfo = ... read from database;// The salary field can be changed only by callers
// who have the security role "payroll "
if (info.salary != oldInfo.salary &&
!ctx.isCallerInRole( "payroll ")) {
throw new SecurityException(...);
}...
}...
}
Youwoulduseprogrammaticsecurityinthiswaytodynamicallycontrolaccesstoamethod,
forexample,whenyouwanttodenyaccessexceptduringaparticulartimeofday.Anexampleapplicationthatusesthe getCallerPrincipal andisCallerInRole methodsisdescribedin
“The converter-secure Example:SecuringanEnterpriseBeanwithProgrammaticSecurity”
onpage754 .
PropagatingaSecurityIdentity(Run-As)
Youcanspecifywhetheracaller’ssecurityidentityshouldbeusedfortheexecutionofspecifiedmethodsofanenterprisebeanorwhetheraspecificrun-asidentityshouldbeused.
Figure41–2
illustratesthisconcept.SecuringEnterpriseBeans
Chapter41 • GettingStartedSecuringEnterpriseApplications 747
Inthisillustration,anapplicationclientismakingacalltoanenterprisebeanmethodinone
EJBcontainer.Thisenterprisebeanmethod,inturn,makesacalltoanenterprisebeanmethodinanothercontainer.Thesecurityidentityduringthefirstcallistheidentityofthecaller.Thesecurityidentityduringthesecondcallcanbeanyofthefollowingoptions.
■Bydefault,theidentityofthecalleroftheintermediatecomponentispropagatedtothetargetenterprisebean.Thistechniqueisusedwhenthetargetcontainertruststheintermediatecontainer.
■Aspecificidentityispropagatedtothetargetenterprisebean.Thistechniqueisusedwhen
thetargetcontainerexpectsaccessusingaspecificidentity.
Topropagateanidentitytothetargetenterprisebean,configurearun-asidentityforthe
bean,asdescribedin “ConfiguringaComponent’sPropagatedSecurityIdentity”on
page748.Establishingarun-asidentityforanenterprisebeandoesnotaffecttheidentitiesof
itscallers,whicharetheidentitiestestedforpermissiontoaccessthemethodsoftheenterprisebean.Therun-asidentityestablishestheidentitythattheenterprisebeanwillusewhenitmakescalls.
Therun-asidentityappliestotheenterprisebeanasawhole,includingallthemethodsof
theenterprisebean’sbusinessinterface,localandremoteinterfaces,componentinterface,andwebserviceendpointinterfaces,themessagelistenermethodsofamessage-drivenbean,thetimeoutmethodofanenterprisebean,andallinternalmethodsofthebeanthatmightbecalledinturn.
ConfiguringaComponent’sPropagatedSecurityIdentity
Youcanconfigureanenterprisebean’srun-as,orpropagated,securityidentitybyusingthe
@RunAsannotation,whichdefinestheroleoftheapplicationduringexecutioninaJavaEE
container.Theannotationcanbespecifiedonaclass,allowingdeveloperstoexecuteanapplicationunderaparticularrole.Therolemustmaptotheuser/groupinformationinthecontainer’ssecurityrealm.The @RunAsannotationspecifiesthenameofasecurityroleasits
parameter.
Hereissomeexamplecodethatdemonstratestheuseofthe @RunAsannotation.
@RunAs( "Admin ")
public class Calculator {FIGURE41–2 SecurityIdentityPropagation
Initiating Client Intermediate TargetApplication Client
or Web Client
Java EE 
Security
IdentityPropagated
Security Identity
(Java EE)EJB or Web
ContainerEJB 
ContainerSecuringEnterpriseBeans
TheJavaEE6Tutorial • January2013 748
//....
}
Youwillhavetomaptherun-asrolenametoagivenprincipaldefinedontheGlassFishServerif
thegivenrolesareassociatedwithmorethanoneuserprincipal.
TrustbetweenContainers
Whenanenterprisebeanisdesignedsothateithertheoriginalcalleridentityoradesignatedidentityisusedtocallatargetbean,thetargetbeanwillreceivethepropagatedidentityonly.Thetargetbeanwillnotreceiveanyauthenticationdata.
Thereisnowayforthetargetcontainertoauthenticatethepropagatedsecurityidentity.
However,becausethesecurityidentityisusedinauthorizationchecks(forexample,methodpermissionsorwiththe isCallerInRole method),itisvitallyimportantthatthesecurity
identitybeauthentic.Becausenoauthenticationdataisavailabletoauthenticatethepropagatedidentity,thetargetmusttrustthatthecallingcontainerhaspropagatedanauthenticatedsecurityidentity.
Bydefault,theGlassFishServerisconfiguredtotrustidentitiesthatarepropagatedfrom
differentcontainers.Therefore,youdonotneedtotakeanyspecialstepstosetupatrustrelationship.
DeployingSecureEnterpriseBeans
Thedeployerisresponsibleforensuringthatanassembledapplicationissecureafterithasbeendeployedinthetargetoperationalenvironment.Ifasecurityviewhasbeenprovidedtothedeployerthroughtheuseofsecurityannotationsand/oradeploymentdescriptor,thesecurityviewismappedtothemechanismsandpoliciesusedbythesecuritydomaininthetargetoperationalenvironment,whichinthiscaseistheGlassFishServer.Ifnosecurityviewisprovided,thedeployermustsetuptheappropriatesecuritypolicyfortheenterprisebeanapplication.
Deploymentinformationisspecifictoaweborapplicationserver.
Examples:SecuringEnterpriseBeans
Thefollowingexamplesshowhowtosecureenterprisebeansusingdeclarativeand
programmaticsecurity.Examples:SecuringEnterpriseBeans
Chapter41 • GettingStartedSecuringEnterpriseApplications 749
Thecart-secureExample:SecuringanEnterpriseBean
withDeclarativeSecurity
Thissectiondiscusseshowtoconfigureanenterprisebeanforbasicusername/password
authentication.Whenabeanthatisconstrainedinthiswayisrequested,theserverrequestsausernameandpasswordfromtheclientandverifiesthattheusernameandpasswordarevalidbycomparingthemagainstadatabaseofauthorizedusersontheGlassFishServer.
Ifthetopicofauthenticationisnewtoyou,see
“SpecifyingAuthenticationMechanisms”on
page719.
Thisexampledemonstratessecuritybystartingwiththeunsecuredenterprisebeanapplication,
cart,whichisfoundinthedirectory tut-install /examples/ejb/cart/ andisdiscussedin “The
cartExample”onpage461 .
Ingeneral,thefollowingstepsarenecessarytoaddusername/passwordauthenticationtoan
existingapplicationthatcontainsanenterprisebean.Intheexampleapplicationincludedwiththistutorial,thesestepshavebeencompletedforyouandarelistedheresimplytoshowwhatneedstobedoneshouldyouwishtocreateasimilarapplication.
1. Createanapplicationliketheonein
“The cartExample”onpage461 .Theexampleinthis
tutorialstartswiththisexampleanddemonstratesaddingbasicauthenticationoftheclienttothisapplication.Theexampleapplicationdiscussedinthissectioncanbefoundattut-install /examples/security/cart-secure/ .
2. Ifyouhavenotalreadydoneso,completethestepsin
“ToSetUpYourSystemforRunning
theSecurityExamples”onpage729 toconfigureyoursystemforrunningthetutorial
applications.
3. Modifythesourcecodefortheenterprisebean, CartBean.java ,tospecifywhichrolesare
authorizedtoaccesswhichprotectedmethods.Thisstepisdiscussedin “Annotatingthe
Bean”onpage750 .
4. Build,package,anddeploytheenterprisebean;thenbuildandruntheclientapplicationby
followingthestepsin “ToRunthe cart-secure ExampleUsingNetBeansIDE”onpage752
or“ToRunthe cart-secure ExampleUsingAnt”onpage753 .
AnnotatingtheBean
Thesourcecodefortheoriginal cartapplicationwasmodifiedasshowninthefollowingcode
snippet(modificationsin bold).Theresultingfilecanbefoundin
tut-install /examples/security/cart-secure/cart-secure-ejb/src/java/cart/ejb/
CartBean.java .
Thecodesnippetisasfollows:
package cart.ejb;
import cart.util.BookException;Examples:SecuringEnterpriseBeans
TheJavaEE6Tutorial • January2013 750
import cart.util.IdVerifier;
import java.util.ArrayList;
import java.util.List;import javax.ejb.Remove;import javax.ejb.Stateful;import javax.annotation.security.DeclareRoles;import javax.annotation.security.RolesAllowed;
@Stateful
@DeclareRoles("TutorialUser")public class CartBean implements Cart {
List<String> contents;String customerId;String customerName;
public void initialize(String person) throws BookException {
if (person == null) {
throw new BookException( "Null person not allowed. ");
} else {
customerName = person;
}
customerId = "0";
contents = new ArrayList<String>();
}
public void initialize(
String person,String id) throws BookException {if (person == null) {
throw new BookException( "Null person not allowed. ");
} else {
customerName = person;
}
IdVerifier idChecker = new IdVerifier();if (idChecker.validate(id)) {
customerId = id;
} else {
throw new BookException( "Invalid id: "+ id);
}
contents = new ArrayList<String>();
}
@RolesAllowed("TutorialUser")
public void addBook(String title) {
contents.add(title);
}
@RolesAllowed("TutorialUser")
public void removeBook(String title) throws BookException {
boolean result = contents.remove(title);
if (result == false) {
throw new BookException( "\""+ title + "\"not in cart. ");
}
}Examples:SecuringEnterpriseBeans
Chapter41 • GettingStartedSecuringEnterpriseApplications 751
@RolesAllowed("TutorialUser")
public List<String> getContents() {
return contents;
}
@Remove()
@RolesAllowed("TutorialUser")public void remove() {
contents = null;
}
}
The@RolesAllowed annotationisspecifiedonmethodsforwhichyouwanttorestrictaccess.In
thisexample,onlyusersintheroleof TutorialUser willbeallowedtoaddandremovebooks
fromthecartandtolistthecontentsofthecart.A @RolesAllowed annotationimplicitly
declaresarolethatwillbereferencedintheapplication;therefore,no @DeclareRoles
annotationisrequired.Thepresenceofthe @RolesAllowed annotationalsoimplicitlydeclares
thatauthenticationwillberequiredforausertoaccessthesemethods.Ifnoauthenticationmethodisspecifiedinthedeploymentdescriptor,thetypeofauthenticationwillbeusername/passwordauthentication.
▼ToRunthecart-secureExampleUsingNetBeansIDE
Followthestepsin “ToSetUpYourSystemforRunningtheSecurityExamples”onpage729 .
InNetBeansIDE,fromtheFilemenu,chooseOpenProject.IntheOpenProjectdialog,navigateto:
tut-install /examples/security/
Selectthe cart-secure folder.
SelecttheOpenasMainProjectandOpenRequiredProjectscheckboxes.ClickOpenProject.IntheProjectstab,right-clickthe cart-secure projectandselectBuild.
IntheProjectstab,right-clickthe cart-secure projectandselectDeploy.
Thisstepbuildsandpackagestheapplicationinto cart-secure.ear ,locatedinthedirectory
tut-install /examples/security/cart-secure/dist/ ,anddeploysthisEARfiletoyour
GlassFishServerinstance.
Toruntheapplicationclient,right-clickthe cart-secure projectandselectRun.
ALogin for user: dialogboxappears.1
23
4
5678
9Examples:SecuringEnterpriseBeans
TheJavaEE6Tutorial • January2013 752
Inthedialogbox,typetheusernameandpasswordofafilerealmusercreatedontheGlassFish
Serverandassignedtothegroup TutorialUser ;thenclickOK.
Iftheusernameandpasswordyouenterareauthenticated,theoutputoftheapplicationclient
appearsintheOutputpane:
...
Retrieving book title from cart: Infinite JestRetrieving book title from cart: Bel CantoRetrieving book title from cart: Kafka on the ShoreRemoving "Gravity’s Rainbow "from cart.
Caught a BookException: "Gravity’s Rainbow "not in cart.
Java Result: 1...
Iftheusernameandpasswordarenotauthenticated,thedialogboxreappearsuntilyoutype
correctvalues.
▼ToRunthecart-secureExampleUsingAnt
Followthestepsin “ToSetUpYourSystemforRunningtheSecurityExamples”onpage729 .
Inaterminalwindow,goto:
tut-install /examples/security/cart-secure/
TobuildtheapplicationandpackageitintoanEARfile,typethefollowingcommandatthe
terminalwindoworcommandprompt:
ant
TodeploytheapplicationtotheGlassFishServer,typethefollowingcommand:
ant deploy
Toruntheapplicationclient,typethefollowingcommand:
ant run
ThistaskretrievestheapplicationclientJARandrunstheapplicationclient.
ALogin for user: dialogboxappears.
Inthedialogbox,typetheusernameandpasswordofafilerealmusercreatedontheGlassFish
Serverandassignedtothegroup TutorialUser ;thenclickOK.
Iftheusernameandpasswordareauthenticated,theclientdisplaysthefollowingoutput:
[echo] running application client container.
[exec] Retrieving book title from cart: Infinite Jest[exec] Retrieving book title from cart: Bel Canto[exec] Retrieving book title from cart: Kafka on the Shore[exec] Removing "Gravity’s Rainbow "from cart.
[exec] Caught a BookException: "Gravity’s Rainbow "not in cart.
[exec] Result: 110
1
2
3
4
5
6Examples:SecuringEnterpriseBeans
Chapter41 • GettingStartedSecuringEnterpriseApplications 753
Iftheusernameandpasswordarenotauthenticated,thedialogboxreappearsuntilyoutype
correctvalues.
Theconverter-secure Example:Securingan
EnterpriseBeanwithProgrammaticSecurity
Thisexampledemonstrateshowtousethe getCallerPrincipal andisCallerInRole
methodswithanenterprisebean.ThisexamplestartswithaverysimpleEJBapplication,converter ,andmodifiesthemethodsofthe ConverterBean sothatcurrencyconversionwill
occuronlywhentherequesterisintheroleof TutorialUser .
Thecompletedversionofthisexamplecanbefoundinthe tut-install /
examples/security/converter-secure directory.Thisexampleisbasedontheunsecured
enterprisebeanapplication, converter ,whichisdiscussedin
Chapter23,“GettingStartedwith
EnterpriseBeans,” andisfoundinthe tut-install /examples/ejb/converter/ directory.This
sectionbuildsontheexamplebyaddingthenecessaryelementstosecuretheapplicationbyusingthe getCallerPrincipal andisCallerInRole methods,whicharediscussedinmore
detailin
“AccessinganEnterpriseBeanCaller’sSecurityContext”onpage746 .
Ingeneral,thefollowingstepsarenecessarywhenusingthe getCallerPrincipal and
isCallerInRole methodswithanenterprisebean.Intheexampleapplicationincludedwith
thistutorial,manyofthesestepshavebeencompletedforyouandarelistedheresimplytoshowwhatneedstobedoneshouldyouwishtocreateasimilarapplication.
1. Createasimpleenterprisebeanapplication.
2. SetupauserontheGlassFishServerinthe filerealm,inthegroup TutorialUser ,andset
updefaultprincipaltorolemapping.Todothis,followthestepsin
“ToSetUpYourSystem
forRunningtheSecurityExamples”onpage729 .
3. Modifythebeantoaddthe getCallerPrincipal andisCallerInRole methods.
4. Iftheapplicationcontainsawebclientthatisaservlet,specifysecurityfortheservlet,as
describedin “SpecifyingSecurityforBasicAuthenticationUsingAnnotations”onpage731 .
5. Build,package,deploy,andruntheapplication.
Modifying ConverterBean
Thesourcecodefortheoriginal ConverterBean classwasmodifiedtoaddthe if..else clause
thattestswhetherthecallerisintheroleof TutorialUser ..Iftheuserisinthecorrectrole,the
currencyconversioniscomputedanddisplayed.Iftheuserisnotinthecorrectrole,thecomputationisnotperformed,andtheapplicationdisplaystheresultas 0.Thecodeexample
canbefoundintut-install /examples/ejb/converter-secure/converter-secure-ejb/src/java/
converter/ejb/ConverterBean.java .
Thecodesnippet(withmodificationsshownin bold)isasfollows:Examples:SecuringEnterpriseBeans
TheJavaEE6Tutorial • January2013 754
package converter.ejb;
import java.math.BigDecimal;
import javax.ejb.Stateless;import java.security.Principal;import javax.annotation.Resource;import javax.ejb.SessionContext;import javax.annotation.security.DeclareRoles;import javax.annotation.security.RolesAllowed;
@Stateless()
@DeclareRoles("TutorialUser")public class ConverterBean{
@Resource SessionContext ctx;
private BigDecimal yenRate = new BigDecimal( "89.5094 ");
private BigDecimal euroRate = new BigDecimal( "0.0081 ");
@RolesAllowed("TutorialUser")
public BigDecimal dollarToYen(BigDecimal dollars) {
BigDecimal result = new BigDecimal("0.0");Principal callerPrincipal = ctx.getCallerPrincipal();if (ctx.isCallerInRole("TutorialUser")) {
result = dollars.multiply(yenRate);return result.setScale(2, BigDecimal.ROUND_UP);
} else {
return result.setScale(2, BigDecimal.ROUND_UP);
}
}
@RolesAllowed("TutorialUser")
public BigDecimal yenToEuro(BigDecimal yen) {
BigDecimal result = new BigDecimal("0.0");Principal callerPrincipal = ctx.getCallerPrincipal();if (ctx.isCallerInRole("TutorialUser")) {
result = yen.multiply(euroRate);return result.setScale(2, BigDecimal.ROUND_UP);
} else {
return result.setScale(2, BigDecimal.ROUND_UP);
}
}
}
Modifying ConverterServlet
Thefollowingannotationsspecifysecurityforthe converter webclient, ConverterServlet :
@WebServlet(name = "ConverterServlet ", urlPatterns = { "/"})
@ServletSecurity(@HttpConstraint(transportGuarantee = TransportGuarantee.CONFIDENTIAL,
rolesAllowed = { "TutorialUser "}))Examples:SecuringEnterpriseBeans
Chapter41 • GettingStartedSecuringEnterpriseApplications 755
▼ToBuild,Package,andDeploythe converter-secure ExampleUsing
NetBeansIDE
Followthestepsin “ToSetUpYourSystemforRunningtheSecurityExamples”onpage729 .
InNetBeansIDE,fromtheFilemenu,chooseOpenProject.IntheOpenProjectdialog,navigateto:
tut-install /examples/security/
Selectthe converter-secure folder.
SelecttheOpenasMainProjectcheckbox.ClickOpenProject.Right-clickthe converter-secure projectandselectBuild.
Right-clickthe converter-secure projectandselectDeploy.
▼ToBuild,Package,andDeploythe converter-secure Example
UsingAnt
Followthestepsin “ToSetUpYourSystemforRunningtheSecurityExamples”onpage729 .
Inaterminalwindow,goto:
tut-install /examples/security/converter-secure/
Typethefollowingcommand:
ant all
Thiscommandbothbuildsanddeploystheexample.
▼ToRunthe converter-secure Example
OpenawebbrowsertothefollowingURL:
http://localhost:8080/converter-secure
AnAuthenticationRequireddialogboxappears.
Typeausernameandpasswordcombinationthatcorrespondstoauserwhohasalreadybeen
createdinthe filerealmoftheGlassFishServerandhasbeenassignedtothegroupof
TutorialUser ;thenclickOK.1
23
4
5678
1
2
3
1
2Examples:SecuringEnterpriseBeans
TheJavaEE6Tutorial • January2013 756
Type 100intheinputfieldandclickSubmit.
Asecondpageappears,showingtheconvertedvalues.3Examples:SecuringEnterpriseBeans
Chapter41 • GettingStartedSecuringEnterpriseApplications 757
758
JavaEESecurity:AdvancedTopics
ThischapterprovidesadvancedinformationonsecuringJavaEEapplications.
Thefollowingtopicsareaddressedhere:
■“WorkingwithDigitalCertificates”onpage759
■“AuthenticationMechanisms”onpage764
■“UsingForm-BasedLogininJavaServerFacesWebApplications”onpage769
■“UsingtheJDBCRealmforUserAuthentication”onpage771
■“SecuringHTTPResources”onpage775
■“SecuringApplicationClients”onpage778
■“SecuringEnterpriseInformationSystemsApplications”onpage780
■“ConfiguringSecurityUsingDeploymentDescriptors”onpage783
■“FurtherInformationaboutSecurity”onpage785
WorkingwithDigitalCertificates
DigitalcertificatesfortheGlassFishServerhavealreadybeengeneratedandcanbefoundinthe
directory domain-dir /config/ .Thesedigitalcertificatesareself-signedandareintendedfor
useinadevelopmentenvironment;theyarenotintendedforproductionpurposes.Forproductionpurposes,generateyourowncertificatesandhavethemsignedbyacertificateauthority(CA).
TousetheSecureSocketsLayer(SSL),anapplicationorwebservermusthaveanassociated
certificateforeachexternalinterface,orIPaddress,thatacceptssecureconnections.Thetheorybehindthisdesignisthataservershouldprovidesomekindofreasonableassurancethatitsowneriswhoyouthinkitis,particularlybeforereceivinganysensitiveinformation.Itmaybeusefultothinkofacertificateasa“digitaldriver’slicense”foranInternetaddress.Thecertificatestateswithwhichcompanythesiteisassociated,alongwithsomebasiccontactinformationaboutthesiteowneroradministrator.42CHAPTER 42
759
Thedigitalcertificateiscryptographicallysignedbyitsownerandisdifficultforanyoneelseto
forge.Forsitesinvolvedine-commerceorinanyotherbusinesstransactioninwhichauthenticationofidentityisimportant,acertificatecanbepurchasedfromawell-knownCAsuchasVeriSignorThawte.Ifyourservercertificateisself-signed,youmustinstallitintheGlassFishServerkeystorefile( keystore.jks ).Ifyourclientcertificateisself-signed,youshould
installitintheGlassFishServertruststorefile( cacerts.jks ).
Sometimes,authenticationisnotreallyaconcern.Forexample,anadministratormightsimply
wanttoensurethatdatabeingtransmittedandreceivedbytheserverisprivateandcannotbesnoopedbyanyoneeavesdroppingontheconnection.Insuchcases,youcansavethetimeandexpenseinvolvedinobtainingaCAcertificateandsimplyuseaself-signedcertificate.
SSLusespublic-keycryptography ,whichisbasedonkeypairs. Keypairs containonepublickey
andoneprivatekey.Dataencryptedwithonekeycanbedecryptedonlywiththeotherkeyofthepair.Thispropertyisfundamentaltoestablishingtrustandprivacyintransactions.Forexample,usingSSL,theservercomputesavalueandencryptsitbyusingitsprivatekey.Theencryptedvalueiscalleda digitalsignature .Theclientdecryptstheencryptedvaluebyusingthe
server’spublickeyandcomparesthevaluetoitsowncomputedvalue.Ifthetwovaluesmatch,theclientcantrustthatthesignatureisauthentic,becauseonlytheprivatekeycouldhavebeenusedtoproducesuchasignature.
DigitalcertificatesareusedwithHTTPStoauthenticatewebclients.TheHTTPSserviceof
mostwebserverswillnotrununlessadigitalcertificatehasbeeninstalled.Usetheprocedureoutlinedinthenextsection,
“CreatingaServerCertificate”onpage760 ,tosetupadigital
certificatethatcanbeusedbyyourapplicationorwebservertoenableSSL.
Onetoolthatcanbeusedtosetupadigitalcertificateis keytool,akeyandcertificate
managementutilitythatshipswiththeJDK.Thistoolenablesuserstoadministertheirown
public/privatekeypairsandassociatedcertificatesforuseinself-authentication,wherebytheuserauthenticateshimselforherselftootherusersorservices,ordataintegrityandauthenticationservices,usingdigitalsignatures.Thetoolalsoallowsuserstocachethepublickeys,intheformofcertificates,oftheircommunicatingpeers.
Forabetterunderstandingof keytoolandpublic-keycryptography,see
“FurtherInformation
aboutSecurity”onpage785 foralinktothe keytooldocumentation.
CreatingaServerCertificate
AservercertificatehasalreadybeencreatedfortheGlassFishServerandcanbefoundinthe
domain-dir /config/ directory.Theservercertificateisin keystore.jks .The cacerts.jks file
containsallthetrustedcertificates,includingclientcertificates.
Ifnecessary,youcanuse keytooltogeneratecertificates.The keytoolutilitystoresthekeys
andcertificatesinafiletermeda keystore,arepositoryofcertificatesusedforidentifyingaclient
oraserver.Typically,akeystoreisafilethatcontainsoneclient’soroneserver’sidentity.Thekeystoreprotectsprivatekeysbyusingapassword.WorkingwithDigitalCertificates
TheJavaEE6Tutorial • January2013 760
Ifyoudon’tspecifyadirectorywhenspecifyingthekeystorefilename,thekeystoresarecreated
inthedirectoryfromwhichthe keytoolcommandisrun.Thiscanbethedirectorywherethe
applicationresides,oritcanbeadirectorycommontomanyapplications.
Thegeneralstepsforcreatingaservercertificateareasfollows.
1. Createthekeystore.
2. Exportthecertificatefromthekeystore.3. Signthecertificate.4. Importthecertificateintoa truststore:arepositoryofcertificatesfrompartieswithwhich
youexpecttocommunicateorfromCertificateAuthoritiesthatyoutrusttoidentifyparties.Thetruststoreisusedbytheclienttoverifythecertificatethatissentbytheserver.Atruststoretypicallycontainsmorethanonecertificate.
“ToUse keytooltoCreateaServerCertificate”onpage761 providesspecificinformationon
usingthe keytoolutilitytoperformthesesteps.
▼ToUse keytooltoCreateaServerCertificate
Run keytooltogenerateanewkeypairinthedefaultdevelopmentkeystorefile, keystore.jks .
Thisexampleusesthealias server-alias togenerateanewpublic/privatekeypairandwrap
thepublickeyintoaself-signedcertificateinside keystore.jks .Thekeypairisgeneratedby
usinganalgorithmoftypeRSA,withadefaultpasswordof changeit .Formoreinformation
andotherexamplesofcreatingandmanagingkeystorefiles,readthe keytooldocumentation.
Note–RSAispublic-keyencryptiontechnologydevelopedbyRSADataSecurity,Inc.
Fromthedirectoryinwhichyouwanttocreatethekeypair,run keytoolasshowninthe
followingsteps.
Generatetheservercertificate.
Typethe keytoolcommandallononeline:
java-home /bin/keytool -genkey -alias server-alias -keyalg RSA -keypass changeit
-storepass changeit -keystore keystore.jks
WhenyoupressEnter, keytoolpromptsyoutoentertheservername,organizationalunit,
organization,locality,state,andcountrycode.
Youmusttypetheservernameinresponseto keytool’sfirstprompt,inwhichitasksforfirst
andlastnames.Fortestingpurposes,thiscanbe localhost .
Whenyouruntheexampleapplications,thehost(servername)specifiedinthekeystoremust
matchthehostidentifiedinthe javaee.server.name propertyspecifiedinthe
tut-install /examples/bp-project/build.properties file(bydefault,thisis localhost ).1WorkingwithDigitalCertificates
Chapter42 • JavaEESecurity:AdvancedTopics 761
Exportthegeneratedservercertificatein keystore.jks intothefile server.cer .
Typethe keytoolcommandallononeline:
java-home /bin/keytool -export -alias server-alias -storepass changeit
-file server.cer -keystore keystore.jks
IfyouwanttohavethecertificatesignedbyaCA,readtheexampleinthe keytool
documentation.
Toaddtheservercertificatetothetruststorefile, cacerts.jks ,run keytoolfromthedirectory
whereyoucreatedthekeystoreandservercertificate.
Usethefollowingparameters:
java-home /bin/keytool -import -v -trustcacerts -alias server-alias
-file server.cer -keystore cacerts.jks -keypass changeit -storepass changeit
Informationonthecertificate,suchasthatshownnext,willappear:
Owner: CN=localhost, OU=My Company, O=Software, L=Santa Clara, ST=CA, C=USIssuer: CN=localhost, OU=My Company, O=Software, L=Santa Clara, ST=CA, C=USSerial number: 3e932169Valid from: Mon Nov 26 18:15:47 EST 2012 until: Sun Feb 24 18:15:47 EST 2013Certificate fingerprints:
MD5: 52:9F:49:68:ED:78:6F:39:87:F3:98:B3:6A:6B:0F:90SHA1: EE:2E:2A:A6:9E:03:9A:3A:1C:17:4A:28:5E:97:20:78:3F:SHA256: 80:05:EC:7E:50:50:5D:AA:A3:53:F1:11:9B:19:EB:0D:20:67:C1:12:
AF:42:EC:CD:66:8C:BD:99:AD:D9:76:95
Signature algorithm name: SHA256withRSAVersion: 3...
Trust this certificate? [no]:
Type yes,thenpresstheEnterorReturnkey.
Thefollowinginformationappears:
Certificate was added to keystore
[Storing cacerts.jks]
AddingUserstotheCertificateRealm
Inthe certificate realm,useridentityissetupintheGlassFishServersecuritycontextand
populatedwithuserdataobtainedfromcryptographicallyverifiedclientcertificates.Forstep-by-stepinstructionsforcreatingthistypeofcertificate,see
“WorkingwithDigital
Certificates”onpage759 .2
3
4
5WorkingwithDigitalCertificates
TheJavaEE6Tutorial • January2013 762
UsingaDifferentServerCertificatewiththeGlassFish
Server
Followthestepsin “CreatingaServerCertificate”onpage760 tocreateyourownserver
certificate,haveitsignedbyaCA,andimportthecertificateinto keystore.jks .
Makesurethatwhenyoucreatethecertificate,youfollowtheserules:
■Whenyoucreatetheservercertificate, keytoolpromptsyoutoenteryourfirstandlast
name.Inresponsetothisprompt,youmustenterthenameofyourserver.Fortestingpurposes,thiscanbe localhost .
■Theserver/hostspecifiedinthekeystoremustmatchthehostidentifiedinthe
javaee.server.name propertyspecifiedinthe
tut-install /examples/bp-project/build.properties fileforrunningtheexample
applications.
■Yourkey/certificatepasswordin keystore.jks shouldmatchthepasswordofyour
keystore, keystore.jks .Thisisabug.Ifthereisamismatch,theJavaSDKcannotreadthe
certificateandyougeta“tampered”message.
■Ifyouwanttoreplacetheexisting keystore.jks ,youmusteitherchangeyourkeystore’s
passwordtothedefaultpassword( changeit )orchangethedefaultpasswordtoyour
keystore’spassword.
▼ToSpecifyaDifferentServerCertificate
TospecifythattheGlassFishServershouldusethenewkeystoreforauthenticationandauthorizationdecisions,youmustsettheJVMoptionsfortheGlassFishServersothattheyrecognizethenewkeystore.Touseadifferentkeystorefromtheoneprovidedfordevelopmentpurposes,followthesesteps.
StarttheGlassFishServerifyouhaven’talreadydoneso.InformationonstartingtheGlassFish
Servercanbefoundin
“StartingandStoppingtheGlassFishServer”onpage73 .
OpentheGlassFishServerAdministrationConsoleinawebbrowserat
http://localhost:4848 .
ExpandConfigurations,thenexpandserver-config,thenclickJVMSettings.SelecttheJVMOptionstab.ChangethefollowingJVMoptionssothattheypointtothelocationandnameofthenew
keystore.Thecurrentsettingsareshownbelow:
-Djavax.net.ssl.keyStore=${com.sun.aas.instanceRoot}/config/keystore.jks
-Djavax.net.ssl.trustStore=${com.sun.aas.instanceRoot}/config/cacerts.jks1
23
45WorkingwithDigitalCertificates
Chapter42 • JavaEESecurity:AdvancedTopics 763
Ifyou’vechangedthekeystorepasswordfromitsdefaultvalue,youneedtoaddthepassword
optionaswell:
-Djavax.net.ssl.keyStorePassword= your-new-password
ClickSave,thenrestartGlassFishServer.
AuthenticationMechanisms
Thissectiondiscussestheclientauthenticationandmutualauthenticationmechanisms.
ClientAuthentication
Withclientauthentication ,thewebserverauthenticatestheclientbyusingtheclient’spublic
keycertificate.Clientauthenticationisamoresecuremethodofauthenticationthaneitherbasicorform-basedauthentication.ItusesHTTPoverSSL(HTTPS),inwhichtheserverauthenticatestheclientusingtheclient’spublickeycertificate.SSLtechnologyprovidesdataencryption,serverauthentication,messageintegrity,andoptionalclientauthenticationforaTCP/IPconnection.Youcanthinkofapublickeycertificateasthedigitalequivalentofapassport.Thecertificateisissuedbyatrustedorganization,acertificateauthority(CA),andprovidesidentificationforthebearer.
Beforeusingclientauthentication,makesuretheclienthasavalidpublickeycertificate.For
moreinformationoncreatingandusingpublickeycertificates,read
“WorkingwithDigital
Certificates”onpage759 .
Thefollowingexampleshowshowtodeclareclientauthenticationinyourdeployment
descriptor:
<login-config>
<auth-method>CLIENT-CERT</auth-method>
</login-config>
MutualAuthentication
Withmutualauthentication ,theserverandtheclientauthenticateeachother.Mutual
authenticationisoftwotypes:
■Certificate-based(see Figure42–1 )
■Username/password-based(see Figure42–2 )6
7AuthenticationMechanisms
TheJavaEE6Tutorial • January2013 764
Whenusingcertificate-basedmutualauthentication,thefollowingactionsoccur.
1. Aclientrequestsaccesstoaprotectedresource.
2. Thewebserverpresentsitscertificatetotheclient.3. Theclientverifiestheserver’scertificate.4. Ifsuccessful,theclientsendsitscertificatetotheserver.5. Theserververifiestheclient’scredentials.6. Ifsuccessful,theservergrantsaccesstotheprotectedresourcerequestedbytheclient.
Figure42–1 showswhatoccursduringcertificate-basedmutualauthentication.
Inusername/password-basedmutualauthentication,thefollowingactionsoccur.
1. Aclientrequestsaccesstoaprotectedresource.
2. Thewebserverpresentsitscertificatetotheclient.3. Theclientverifiestheserver’scertificate.FIGURE42–1 Certificate-BasedMutualAuthentication
Server1
2Requests protected resourceVerifies
certificateVerifies
certificate
Presents certificate
435
Presents certificate
6
Accesses protected resourceClient
server.keystore client.keystoretrustStore
client.cert
client.cert
server.cert
server.cert
AuthenticationMechanisms
Chapter42 • JavaEESecurity:AdvancedTopics 765
4. Ifsuccessful,theclientsendsitsusernameandpasswordtotheserver.
5. Theserververifiestheclient’scredentials.6. Iftheverificationissuccessful,theservergrantsaccesstotheprotectedresourcerequested
bytheclient.
Figure42–2 showswhatoccursduringusername/password-basedmutualauthentication.
EnablingMutualAuthenticationoverSSL
Thissectiondiscussessettingupclient-sideauthentication.Enablingbothserver-sideandclient-sideauthenticationiscalledmutual,ortwo-way,authentication.Inclientauthentication,clientsarerequiredtosubmitcertificatesissuedbyacertificateauthoritythatyouchoosetoaccept.FIGURE42–2 UserName/Password-BasedMutualAuthentication
Server1
2Requests protected resourceVerifies
certificateVerifies
certificate
Presents certificate
43
Sends username:password
65
Accesses protected resourceClient
trustStore
server.certserver.keystore
server.cert
AuthenticationMechanisms
TheJavaEE6Tutorial • January2013 766
ThereareatleasttwowaystoenablemutualauthenticationoverSSL:
■Thepreferredmethodistosetthemethodofauthenticationinthe web.xmlapplication
deploymentdescriptorto CLIENT-CERT .Thisenforcesmutualauthenticationbymodifying
thedeploymentdescriptorofthegivenapplication.Inthisway,clientauthenticationisenabledonlyforaspecificresourcecontrolledbythesecurityconstraint,andthecheckisperformedonlywhentheapplicationrequiresclientauthentication.
■Alesscommonlyusedmethodistosetthe clientAuth propertyinthe certificate realm
totrueifyouwanttheSSLstacktorequireavalidcertificatechainfromtheclientbefore
acceptingaconnection.A falsevalue(whichisthedefault)willnotrequireacertificate
chainunlesstheclientrequestsaresourceprotectedbyasecurityconstraintthatusesCLIENT-CERT authentication.Whenyouenableclientauthenticationbysettingthe
clientAuth propertyto true,clientauthenticationwillberequiredforalltherequests
goingthroughthespecifiedSSLport.Ifyouturn clientAuth on,itisonallofthetime,
whichcanseverelydegradeperformance.
Whenclientauthenticationisenabledinbothoftheseways,clientauthenticationwillbe
performedtwice.
CreatingaClientCertificateforMutualAuthentication
IfyouhaveacertificatesignedbyatrustedCertificateAuthority(CA)suchasVerisign,andtheGlassFishServer cacerts.jks filealreadycontainsacertificateverifiedbythatCA,youdonot
needtocompletethisstep.YouneedtoinstallyourcertificateintheGlassFishServercertificatefileonlywhenyourcertificateisself-signed.
Fromthedirectorywhereyouwanttocreatetheclientcertificate,run keytoolasoutlinedhere.
WhenyoupressEnter, keytoolpromptsyoutoentertheservername,organizationalunit,
organization,locality,state,andcountrycode.
Youmustentertheservernameinresponseto keytool’sfirstprompt,inwhichitasksforfirst
andlastnames.Fortestingpurposes,thiscanbe localhost .Thehostspecifiedinthekeystore
mustmatchthehostidentifiedinthe javee.server.host variablespecifiedinyour
tut-install /examples/bp-project/build.properties file.Ifthisexampleistoverifymutual
authenticationandyoureceivearuntimeerrorstatingthattheHTTPShostnameiswrong,re-createtheclientcertificate,beingsuretousethesamehostnameyouwillusewhenrunningtheexample.Forexample,ifyourmachinenameis duke,thenenter dukeasthecertificateCN
orwhenpromptedforfirstandlastnames.Whenaccessingtheapplication,enteraURLthatpointstothesamelocation(forexample, https://duke:8181/mutualauth/hello ).Thisis
necessarybecauseduringSSLhandshake,theserververifiestheclientcertificatebycomparingthecertificatenametothehostnamefromwhichitoriginates.
▼ToCreateaClientCertificateandKeystore
Tocreateakeystorenamed client_keystore.jks thatcontainsaclientcertificatenamed
client.cer ,followthesesteps.AuthenticationMechanisms
Chapter42 • JavaEESecurity:AdvancedTopics 767
Createabackupcopyoftheservertruststorefile.Todothis,
a. Changetothedirectorycontainingtheserver’skeystoreandtruststorefiles,
domain-dir \config.
b. Copy cacerts.jks tocacerts.backup.jks .
c. Copy keystore.jks tokeystore.backup.jks .
Donotputclientcertificatesinthe cacerts.jks file.Anycertificateyouaddtothe cacerts
fileeffectivelycanbeatrustedrootforanyandallcertificatechains.Afteryouhavecompleteddevelopment,deletethedevelopmentversionofthe cacertsfileandreplaceit
withtheoriginalcopy.
Generatetheclientcertificate.Enterthefollowingcommandfromthedirectorywhereyouwant
togeneratetheclientcertificate:
java-home \bin\keytool -genkey -alias client-alias -keyalg RSA
-keypass changeit -storepass changeit -keystore client_keystore.jks
Exportthegeneratedclientcertificateintothefile client.cer :
java-home \bin\keytool -export -alias client-alias -storepass changeit
-file client.cer -keystore client_keystore.jks
Addthecertificatetothetruststorefile domain-dir /config/cacerts.jks .Run keytoolfrom
thedirectorywhereyoucreatedthekeystoreandclientcertificate.Usethefollowingparameters:
java-home \bin\keytool -import -v -trustcacerts -alias client-alias
-file client.cer -keystore domain-dir /config/cacerts.jks
-keypass changeit -storepass changeit
Thekeytoolutilityreturnsamessagelikethisone:
Owner: CN=localhost, OU=My Company, O=Software, L=Santa Clara, ST=CA, C=US
Issuer: CN=localhost, OU=My Company, O=Software, L=Santa Clara, ST=CA, C=USSerial number: 3e39e66aValid from: Tue Nov 27 12:22:47 EST 2012 until: Mon Feb 25 12:22:47 EST 2013Certificate fingerprints:
MD5: 5A:B0:4C:88:4E:F8:EF:E9:E5:8B:53:BD:D0:AA:8E:5ASHA1:90:00:36:5B:E0:A7:A2:BD:67:DB:EA:37:B9:61:3E:26:B3:89:46:32Signature algorithm name: SHA1withRSAVersion: 3
Trust this certificate? [no]: yesCertificate was added to keystore[Storing cacerts.jks]
RestartGlassFishServer.1
2
3
4
5AuthenticationMechanisms
TheJavaEE6Tutorial • January2013 768
UsingForm-BasedLogininJavaServerFacesWeb
Applications
Thissectiondescribesstrategiesforimplementingform-basedlogininJavaServerFaces
applications.
Using j_security_check inJavaServerFacesForms
Themostcommonwayofauthenticatingauserinwebapplicationsisthroughaloginform.As
describedin “Form-BasedAuthentication”onpage721 ,JavaEEsecuritydefinesthe
j_security_check actionforloginforms.Thisallowsthewebcontainertoauthenticateusers
frommanydifferentwebapplicationresources.Faceletsforms,usingthe h:form,h:inputText ,
andh:inputSecret tags,however,generatetheactionandinputIDsautomatically,which
meansdevelopersareunabletospecify j_security_check astheformaction,norcantheyset
theusernameandpasswordinputfieldIDsto j_username andj_password ,respectively.
UsingstandardHTMLformtagsallowsdeveloperstospecifythecorrectactionandinputIDs
fortheform.
<form action= "j_security_check "method= "POST">
<input type= "text"name= "j_username "/>
<input type= "secret "name= "j_password "/>
...</form>
Thisform,however,doesn’thaveaccesstothefeaturesofaJavaServerFacesapplication,suchas
automaticlocalizationofstringsandtheuseoftemplatingtodefinethelookandfeelofthepages.AstandardHTMLform,incombinationwithFaceletsandHTMLtags,allowsdeveloperstouselocalizedstringsfortheinputfieldlabelswhilestillensuringtheformusesstandardJavaEEsecurity:
<form action= "j_security_check "method= "POST">
<h:outputLabel for= "j_username ">#{bundle[’login.username’]}:</h:outputLabel>
<h:inputText id= "j_username "size= "20"/>
<h:outputLabel for= "j_password ">#{bundle[’login.password’]}:</h:outputLabel>
<h:inputSecret id= "j_password "size= "20"/>
<input type= "submit "value= "#{bundle[’login.submit’]} "/>
</form>UsingForm-BasedLogininJavaServerFacesWebApplications
Chapter42 • JavaEESecurity:AdvancedTopics 769
UsingaManagedBeanforAuthenticationin
JavaServerFacesApplications
AmanagedbeancanauthenticateusersofaJavaServerFacesapplication,whichallowsregular
FaceletsformtagstobeusedinsteadofamixofstandardHTMLandFaceletstags.Inthiscase,themanagedbeandefines loginandlogoutmethods,andFaceletsformscallthesemethodsin
theactionattribute.Themanagedbean’smethodscallthe
javax.servlet.http.HttpServletRequest.login andHttpServletRequest.logout
methodstomanageuserauthentication.
Inthefollowingmanagedbean,astatelesssessionbeanusestheusercredentialspassedtothe
loginmethodtoauthenticatetheuserandresetsthecalleridentityoftherequestwhenthe
logoutmethodiscalled.
@Stateless
@Namedpublic class LoginBean {
private String username;private String password;
public String getUsername() {
return this.username;
}
public void setUserName(String username) {
this.username = username;
}
public String getPassword() {
return this.password;
}
public void setPassword() {
this.password = password;
}
...
public String login () {
FacesContext context = FacesContext.getCurrentInstance();HttpServetRequest request = (HttpServletRequest)
context.getExternalContext().getRequest();
try {
request.login(this.username, this.password);
} catch (ServletException e) {
...context.addMessage(null, new FacesMessage( "Login failed. "));
return "error ";
}return "admin/index ";
}
public void logout() {
FacesContext context = FacesContext.getCurrentInstance();UsingForm-BasedLogininJavaServerFacesWebApplications
TheJavaEE6Tutorial • January2013 770
HttpServetRequest request = (HttpServletRequest)
context.getExternalContext().getRequest();
try {
request.logout();
} catch (ServletException e) {
...context.addMessage(null, new FacesMessage( "Logout failed. "));
}
}
}
TheFaceletsformthencallsthesemethodsforuserloginandlogout.
<h:form>
<h:outputLabel for= "usernameInput ">
#{bundle[’login.username’]:
</h:outputLabel><h:inputText id= "usernameInput "value= "#{loginBean.username} "
required= "true"/>
<br /><h:outputLabel for= "passwordInput ">
#{bundle[’login.password’]:
</h:outputLabel><h:inputSecret id= "passwordInput "value= "#{loginBean.password} "
required= "true"/>
<br /><h:commandButton value= "${bundle[’login.submit’] "
action= "#{loginBean.login} "/>
</h:form>
UsingtheJDBCRealmforUserAuthentication
Anauthenticationrealm,sometimescalleda securitypolicydomain orsecuritydomain ,isa
scopeoverwhichanapplicationserverdefinesandenforcesacommonsecuritypolicy.Arealmcontainsacollectionofusers,whomayormaynotbeassignedtoagroup.GlassFishServercomespreconfiguredwiththefile,certificate,andadministrationrealms.AnadministratorcanalsosetupLDAP,JDBC,digest,orcustomrealms.
Anapplicationcanspecifyinitsdeploymentdescriptorwhichrealmtouse.Iftheapplication
doesnotspecifyarealm,GlassFishServerusesitsdefaultrealm,thefilerealm.IfanapplicationspecifiesthataJDBCrealmistobeusedforuserauthentication,GlassFishServerwillretrieveusercredentialsfromadatabase.TheapplicationserverusesthedatabaseinformationandtheenabledJDBCrealmoptionintheconfigurationfile.
Adatabaseprovidesaneasywaytoadd,edit,ordeleteusersatruntimeandenablesusersto
createtheirownaccountswithoutanyadministrativeassistance.Usingadatabasealsohasanadditionalbenefit,providingaplacetosecurelystoreanyextrauserinformation.ArealmcanbethoughtofasadatabaseofusernamesandpasswordsthatidentifyvalidusersofawebapplicationorsetofwebapplicationswithanenumerationofthelistofrolesassociatedwithUsingtheJDBCRealmforUserAuthentication
Chapter42 • JavaEESecurity:AdvancedTopics 771
eachvaliduser.Accesstospecificwebapplicationresourcesisgrantedtoallusersinaparticular
role,insteadofenumeratingalistofassociatedusers.Ausernamecanhaveanynumberofrolesassociatedwithit.
Twoofthetutorialcasestudies,
Chapter52,“Duke’sTutoringCaseStudyExample,” and
Chapter53,“Duke’sForestCaseStudyExample,” usetheJDBCrealmforuserauthentication.
Whereappropriate,referencewillbemadetooneorbothoftheseexamples.
▼ToConfigureaJDBCAuthenticationRealm
GlassFishServerenablesadministratorstospecifyauser’scredentials(usernameandpassword)intheJDBCrealminsteadofintheconnectionpool.Thispreventsotherapplicationsfrombrowsingthedatabasetablesforusercredentials.Bydefault,storingpasswordsascleartextisnotsupportedintheJDBCrealm.Undernormalcircumstances,passwordsshouldnotbestoredascleartext.
Createthedatabasetablesinwhichusercredentialsfortherealmwillbestored.
Howyoucreatethedatabasetablesdependsonthedatabaseyouareusing.Duke’sForestuses
anAnttask, create-tables ,inthe build.xml filefortheEntitiesproject.Thetaskexecutesan
SQLscript, create.sql ,thatcreatesthe FOREST.PERSON ,FOREST.GROUPS ,and
FOREST.PERSON_GROUPS databasetables,asshownbelow:
CREATE TABLE "FOREST "."PERSON "
(
ID int NOT NULL PRIMARY KEY GENERATED ALWAYS AS IDENTITY
(START WITH 1, INCREMENT BY 1),
FIRSTNAME varchar(50) NOT NULL,LASTNAME varchar(100) NOT NULL,EMAIL varchar(45) NOT NULL UNIQUE,ADDRESS varchar(45) NOT NULL,CITY varchar(45) NOT NULL,PASSWORD varchar(100),DTYPE varchar(31)
);CREATE UNIQUE INDEX SQL_PERSON_EMAIL_INDEX ON "FOREST "."PERSON "(EMAIL)
;CREATE UNIQUE INDEX SQL_PERSON_ID_INDEX ON "FOREST "."PERSON "(ID)
;
CREATE TABLE "FOREST "."GROUPS "
(
ID int NOT NULL PRIMARY KEY GENERATED ALWAYS AS IDENTITY
(START WITH 1, INCREMENT BY 1),
NAME varchar(50) NOT NULL,DESCRIPTION varchar(300)
);CREATE TABLE "FOREST "."PERSON_GROUPS "
(
GROUPS_ID int NOT NULL,EMAIL varchar(45) NOT NULL1UsingtheJDBCRealmforUserAuthentication
TheJavaEE6Tutorial • January2013 772
)
;ALTER TABLE "FOREST "."PERSON_GROUPS "
ADD CONSTRAINT FK_PERSON_GROUPS_PERSONFOREIGN KEY (EMAIL)REFERENCES "FOREST "."PERSON "(EMAIL)
;ALTER TABLE "FOREST "."PERSON_GROUPS "
ADD CONSTRAINT FK_PERSON_GROUPS_GROUPSFOREIGN KEY (GROUPS_ID)REFERENCES "FOREST "."GROUPS "(ID)
;CREATE INDEX SQL_PERSONGROUPS_EMAIL_INDEX ON "FOREST "."PERSON_GROUPS "(EMAIL)
;CREATE INDEX SQL_PERSONGROUPS_ID_INDEX ON "FOREST "."PERSON_GROUPS "(GROUPS_ID)
;
TheDuke’sTutoringcasestudyusesasingletonbean, ConfigBean ,tocreateitsdatabasetables,
insteadofusingSQLcommands.
Addusercredentialstothedatabasetablesyoucreated.
Howyouaddusercredentialstothedatabasetablesdependsonthedatabasethatyouareusing.
Duke’sForestusesanAnttask.The create-tables AnttaskforDuke’sForestaddstheuser
credentialstothetablescreatedinthepreviousstep:
INSERT INTO "FOREST "."PERSON "(FIRSTNAME,LASTNAME,EMAIL,ADDRESS,CITY,
PASSWORD,DTYPE) VALUES (’Robert’,’Exampler’,’robert@example.com’,’Example street’,’San Francisco’,’81dc9bdb52d04dc20036dbd8313ed055’,’Customer’);INSERT INTO "FOREST "."PERSON "(FIRSTNAME,LASTNAME,EMAIL,ADDRESS,CITY,
PASSWORD,DTYPE) VALUES (’Admin’,’Admin’,’admin@example.com’,’Example street’,’Belmont’,’81dc9bdb52d04dc20036dbd8313ed055’,’Administrator’);
INSERT INTO "FOREST "."PERSON "(FIRSTNAME,LASTNAME,EMAIL,ADDRESS,CITY,
PASSWORD,DTYPE) VALUES (’Jack’,’Frost’,’jack@example.com’,’Example Blvd’,’San Francisco’,’81dc9bdb52d04dc20036dbd8313ed055’,’Customer’);INSERT INTO "FOREST "."PERSON "(FIRSTNAME,LASTNAME,EMAIL,ADDRESS,CITY,
PASSWORD,DTYPE) VALUES (’Payment’,’User’,’paymentUser@dukesforest.com’,’-’,’-’,’58175e1df62779046a3a4e2483575937’,’Customer’);
INSERT INTO "FOREST "."GROUPS "(NAME, DESCRIPTION)
VALUES (’USERS’, ’Users of the store’);INSERT INTO "FOREST "."GROUPS "(NAME, DESCRIPTION)
VALUES (’ADMINS’, ’Administrators of the store’);
INSERT INTO "FOREST "."PERSON_GROUPS "(GROUPS_ID,EMAIL)
VALUES (1,’robert@example.com’);INSERT INTO "FOREST "."PERSON_GROUPS "(GROUPS_ID,EMAIL)
VALUES (2,’admin@example.com’);INSERT INTO "FOREST "."PERSON_GROUPS "(GROUPS_ID,EMAIL)
VALUES (1,’jack@example.com’);INSERT INTO "FOREST "."PERSON_GROUPS "(GROUPS_ID,EMAIL)
VALUES (1,’paymentUser@dukesforest.com’);
TheDuke’sTutoringcasestudyusesasingletonbean, ConfigBean ,topopulateitsdatabase
tables,insteadofusingSQLcommands.2UsingtheJDBCRealmforUserAuthentication
Chapter42 • JavaEESecurity:AdvancedTopics 773
CreateaJDBCconnectionpoolforthedatabase.
Duke’sForestusesanAnttask, create-forest-pool ,tocreatethe
derby_net_forest_forestPool JDBCconnectionpoolforthedatabase:
<target name= "create-forest-pool "
description= "create JDBC connection pool ">
<antcall target= "create-jdbc-connection-pool ">
<param name= "pool.name "value= "derby_net_forest_forestPool "/>
</antcall>
</target>
YoucanalsousetheAdministrationConsoleorthecommandlinetocreateaconnectionpool.
CreateaJDBCresourceforthedatabase.
Duke’sForestusesanAnttask, create-forest-resource ,tocreatethe jdbc/forest JDBC
resourceforthedatabase:
<target name= "create-forest-resource "depends= "create-forest-pool "
description= "create JDBC resource ">
<antcall target= "create-jdbc-resource ">
<param name= "pool.name "value= "derby_net_forest_forestPool "/>
<param name= "jdbc.resource.name "value= "jdbc/forest "/>
</antcall>
</target>
YoucanalsousetheAdministrationConsoleorthecommandlinetocreateaJDBCresource.
Createarealm.
Duke’sForestusesanAnttask, create-forest-realm ,tocreate jdbcRealm ,theJDBCrealm
usedforuserauthentication:
<target name= "create-forest-realm "depends= "create-forest-resource "
description= "create JDBC realm ">
<antcall target= "create-jdbc-realm ">
<param name= "jdbc.resource.name "value= "jdbc/forest "/>
<param name= "jdbc.realm.name "value= "jdbcRealm "/>
<param name= "user.table.name "value= "forest.PERSON "/>
<param name= "user.name.column "value= "email "/>
<param name= "password.column "value= "password "/>
<param name= "group.table "value= "forest.GROUPS "/>
<param name= "group.name.column "value= "name"/>
<param name= "assign.groups "value= "USERS,ADMINS "/>
<param name= "digest.algorithm "value= "MD5"/>
</antcall>
</target>
Thistaskassociatestheresourcewiththerealm,definesthetablesandcolumnsforusersand
groupsusedforauthentication,anddefinesthedigestalgorithmthatwillbeusedforstoringpasswordsinthedatabase.
YoucanalsousetheAdministrationConsoleorthecommandlinetocreatearealm.
ModifythedeploymentdescriptorforyourapplicationtospecifytheJDBCrealm:
■ForanenterpriseapplicationinanEARfile,modifythe glassfish-application.xml file.3
4
5
6UsingtheJDBCRealmforUserAuthentication
TheJavaEE6Tutorial • January2013 774
■ForawebapplicationinaWARfile,modifythe web.xmlfile.
■ForanenterprisebeaninanEJBJARfile,modifythe glassfish-ejb-jar.xml file.
Forexample,fortheDuke’sForestapplication,the web.xmlfilespecifiesthe jdbcRealm realm:
<login-config>
<auth-method>FORM</auth-method><realm-name>jdbcRealm</realm-name><form-login-config>
<form-login-page>/login.xhtml</form-login-page><form-error-page>/login.xhtml</form-error-page>
</form-login-config>
</login-config><security-constraint>
<web-resource-collection>
<web-resource-name>Secure Pages</web-resource-name><description/><url-pattern>/admin/*</url-pattern>
</web-resource-collection><auth-constraint>
<role-name>ADMINS</role-name>
</auth-constraint>
</security-constraint>
Form-basedloginisspecifiedforallwebpagesunder /admin.Accesstothosepageswillbe
allowedonlytousersinthe ADMINSrole.
Assignsecurityrolestousersorgroupsofusersintherealm.
Toassignasecurityroletoagrouportoauser,adda security-role-mapping elementtothe
applicationserver-specificdeploymentdescriptor,inthiscase glassfish-web.xml :
<security-role-mapping>
<role-name>USERS</role-name><group-name>USERS</group-name>
</security-role-mapping><security-role-mapping>
<role-name>ADMINS</role-name><group-name>ADMINS</group-name>
</security-role-mapping>
SinceGlassFishServerusersareassignedtogroupsduringtheusercreationprocess,thisis
moreefficientthanmappingsecurityrolestoindividualusers.
SecuringHTTPResources
WhenarequestURIismatchedbymultipleconstrainedURLpatterns,theconstraintsthatapplytotherequestarethosethatareassociatedwiththebestmatchingURLpattern.TheservletmatchingrulesdefinedinChapter12, "MappingRequestsToServlets, "intheJava
Servlet3.0Specification,areusedtodeterminethebestmatchingURLpatterntotherequestURI.NoprotectionrequirementsapplytoarequestURIthatisnotmatchedbyaconstrainedURLpattern.TheHTTPmethodoftherequestplaysnoroleinselectingthebestmatchingURLpatternforarequest.7SecuringHTTPResources
Chapter42 • JavaEESecurity:AdvancedTopics 775
WhenHTTPmethodsarelistedwithinaconstraintdefinition,theprotectionsdefinedbythe
constraintareappliedtothelistedmethodsonly.
WhenHTTPmethodsarenotlistedwithinaconstraintdefinition,theprotectionsdefinedby
theconstraintapplytothecompletesetofHTTPmethods,includingHTTPextensionmethods.
Whenconstraintswithdifferentprotectionrequirementsapplytothesamecombinationof
URLpatternsandHTTPmethods,therulesforcombiningtheprotectionrequirementsareasdefinedinSection13.8.1, "CombiningConstraints, "intheJavaServlet3.0Specification.
Followtheseguidelinestoproperlysecureawebapplication:
■DonotlistHTTPmethodswithinconstraintdefinitions.Thisisthesimplestwaytoensure
thatyouarenotleavingHTTPmethodsunprotected.Forexample:
<!-- SECURITY CONSTRAINT #1 -->
<security-constraint>
<display-name>Do not enumerate Http Methods</display-name><web-resource-collection>
<url-pattern>/company/*</url-pattern>
</web-resource-collection><auth-constraint>
<role-name>sales</role-name>
</auth-constraint>
</security-constraint>
Ifyoulistmethodsinaconstraint,allnon-listedmethodsoftheeffectivelyinfinitesetof
possibleHTTPmethods,includingextensionmethods,willbe unprotected .Thefollowing
exampleshowsaconstraintthatliststheGETmethodandthusdefinesnoprotectiononanyoftheotherpossibleHTTPmethods.Donotusesuchaconstraintunlessyouarecertainthatthisistheprotectionschemeyouintendtodefine.
<!-- SECURITY CONSTRAINT #2 -->
<security-constraint>
<display-name>
Protect GET only, leave all other methods unprotected
</display-name><web-resource-collection>
<url-pattern>/company/*</url-pattern><http-method>GET</http-method>
</web-resource-collection><auth-constraint>
<role-name>sales</role-name>
</auth-constraint>
</security-constraint>
■IfyouneedtoapplyspecifictypesofprotectiontospecificHTTPmethods,makesureyou
defineconstraintstocovereverymethodthatyouwanttopermit,withorwithoutconstraint,atthecorrespondingURLpatterns.Ifthereareanymethodsthatyoudonotwanttopermit,youmustalsocreateaconstraintthatdeniesaccesstothosemethodsatthesamepatterns;foranexample,seesecurityconstraint#5inthenextbullet.
Forexample,topermitGETandPOST,wherePOSTrequiresauthenticationandGETis
permittedwithoutconstraint,youcoulddefinethefollowingconstraints:SecuringHTTPResources
TheJavaEE6Tutorial • January2013 776
<!-- SECURITY CONSTRAINT #3 -->
<security-constraint>
<display-name>Allow unprotected GET</display-name><web-resource-collection>
<url-pattern>/company/*</url-pattern><http-method>GET</http-method>
</web-resource-collection>
</security-constraint>
<!-- SECURITY CONSTRAINT #4 -->
<security-constraint>
<display-name>Require authentication for POST</display-name><web-resource-collection>
<url-pattern>/company/*</url-pattern><http-method>POST</http-method>
</web-resource-collection><auth-constraint>
<role-name>sales</role-name>
</auth-constraint>
</security-constraint>
■ThesimplestwaytoensurethatyoudenyallHTTPmethodsexceptthosethatyouwantto
bepermittedistouse http-method-omission elementstoomitthoseHTTPmethodsfrom
thesecurityconstraint,andalsotodefinean auth-constraint thatnamesnoroles.The
securityconstraintwillapplytoallmethodsexceptthosethatwerenamedintheomissions,andtheconstraintwillapplyonlytotheresourcesmatchedbythepatternsintheconstraint.
Forexample,thefollowingconstraintexcludesaccesstoallmethodsexceptGETandPOST
attheresourcesmatchedbythepattern /company/* :
<!-- SECURITY CONSTRAINT #5 -->
<security-constraint>
<display-name>Deny all HTTP methods except GET and POST</display-name><web-resource-collection>
<url-pattern>/company/*</url-pattern><http-method-omission>GET</http-method-omission><http-method-omission>POST</http-method-omission>
</web-resource-collection><auth-constraint/>
</security-constraint>
Ifyouwanttoextendtheseexclusionstotheunconstrainedpartsofyourapplication,also
includetheURLpattern /(forwardslash):
<!-- SECURITY CONSTRAINT #6 -->
<security-constraint>
<display-name>Deny all HTTP methods except GET and POST</display-name><web-resource-collection>
<url-pattern>/company/*</url-pattern><url-pattern>/</url-pattern><http-method-omission>GET</http-method-omission><http-method-omission>POST</http-method-omission>
</web-resource-collection><auth-constraint/>
</security-constraint>SecuringHTTPResources
Chapter42 • JavaEESecurity:AdvancedTopics 777
■If,foryourwebapplication,youdonotwantanyresourcetobeaccessibleunlessyou
explicitlydefineaconstraintthatpermitsaccesstoit,youcandefinean auth-constraint
thatnamesnorolesandassociateitwiththeURLpattern /.TheURLpattern /isthe
weakestmatchingpattern.DonotlistanyHTTPmethodsinthisconstraint.
<!-- SECURITY CONSTRAINT #7 -->
<security-constraint>
<display-name>
Switch from Constraint to Permission model(where everything is denied by default)
</display-name><web-resource-collection>
<url-pattern>/</url-pattern>
</web-resource-collection><auth-constraint/>
</security-constraint>
SecuringApplicationClients
TheJavaEEauthenticationrequirementsforapplicationclientsarethesameasforotherJava
EEcomponents,andthesameauthenticationtechniquescanbeusedasforotherJavaEEapplicationcomponents.Noauthenticationisnecessarywhenaccessingunprotectedwebresources.
Whenaccessingprotectedwebresources,theusualvarietiesofauthenticationcanbeused:
HTTPbasicauthentication,HTTPlogin-formauthentication,orSSLclientauthentication.
“SpecifyinganAuthenticationMechanismintheDeploymentDescriptor”onpage722
describeshowtospecifyHTTPbasicauthenticationandHTTPlogin-formauthentication.
“ClientAuthentication”onpage764 describeshowtospecifySSLclientauthentication.
Authenticationisrequiredwhenaccessingprotectedenterprisebeans.Theauthentication
mechanismsforenterprisebeansarediscussedin “SecuringEnterpriseBeans”onpage739 .
Anapplicationclientmakesuseofanauthenticationserviceprovidedbytheapplicationclient
containerforauthenticatingitsusers.Thecontainer’sservicecanbeintegratedwiththenativeplatform’sauthenticationsystemsothatasinglesign-oncapabilityisused.Thecontainercanauthenticatetheusereitherwhentheapplicationisstartedorwhenaprotectedresourceisaccessed.
Anapplicationclientcanprovideaclass,calleda loginmodule ,togatherauthenticationdata.If
so,the javax.security.auth.callback.CallbackHandler interfacemustbeimplemented,
andtheclassnamemustbespecifiedinitsdeploymentdescriptor.Theapplication’scallbackhandlermustfullysupport Callback objectsspecifiedinthe javax.security.auth.callback
package.SecuringApplicationClients
TheJavaEE6Tutorial • January2013 778
UsingLoginModules
AnapplicationclientcanusetheJavaAuthenticationandAuthorizationService(JAAS)to
createloginmodulesforauthentication.AJAAS-basedapplicationimplementsthejavax.security.auth.callback.CallbackHandler interfacesothatitcaninteractwithusers
toenterspecificauthenticationdata,suchasusernamesorpasswords,ortodisplayerrorandwarningmessages.
Applicationsimplementthe CallbackHandler interfaceandpassittothelogincontext,which
forwardsitdirectlytotheunderlyingloginmodules.Aloginmoduleusesthecallbackhandlerbothtogatherinput,suchasapasswordorsmartcardPIN,fromusersandtosupplyinformation,suchasstatusinformation,tousers.Becausetheapplicationspecifiesthecallbackhandler,anunderlyingloginmodulecanremainindependentofthevariouswaysapplicationsinteractwithusers.
Forexample,theimplementationofacallbackhandlerforaGUIapplicationmightdisplaya
windowtosolicituserinput,ortheimplementationofacallbackhandlerforacommand-linetoolmightsimplyprompttheuserforinputdirectlyfromthecommandline.
Theloginmodulepassesanarrayofappropriatecallbackstothecallbackhandler’s handle
method,suchasa NameCallback fortheusernameanda PasswordCallback forthepassword;
thecallbackhandlerperformstherequesteduserinteractionandsetsappropriatevaluesinthecallbacks.Forexample,toprocessa NameCallback ,the CallbackHandler mightpromptfora
name,retrievethevaluefromtheuser,andcallthe setNamemethodofthe NameCallback to
storethename.
FormoreinformationonusingJAASforauthenticationinloginmodules,refertothe
documentationlistedin
“FurtherInformationaboutSecurity”onpage785 .
UsingProgrammaticLogin
Programmaticloginenablestheclientcodetosupplyusercredentials.IfyouareusinganEJBclient,youcanusethe com.sun.appserv.security.ProgrammaticLogin classwithits
convenient loginandlogoutmethods.Programmaticloginisspecifictoaserver.SecuringApplicationClients
Chapter42 • JavaEESecurity:AdvancedTopics 779
SecuringEnterpriseInformationSystemsApplications
InEnterpriseInformationSystems(EIS)applications,componentsrequestaconnectiontoan
EISresource.Aspartofthisconnection,theEIScanrequireasign-onfortherequestertoaccesstheresource.TheapplicationcomponentproviderhastwochoicesforthedesignoftheEISsign-on:
■Container-managedsign-on :Theapplicationcomponentletsthecontainertakethe
responsibilityofconfiguringandmanagingtheEISsign-on.ThecontainerdeterminestheusernameandpasswordforestablishingaconnectiontoanEISinstance.Formoreinformation,see
“Container-ManagedSign-On”onpage780 .
■Component-managedsign-on :TheapplicationcomponentcodemanagesEISsign-onby
includingcodethatperformsthesign-onprocesstoanEIS.Formoreinformation,see
“Component-ManagedSign-On”onpage780 .
Youcanalsoconfiguresecurityforresourceadapters.See “ConfiguringResourceAdapter
Security”onpage781 .
Container-ManagedSign-On
Incontainer-managedsign-on,anapplicationcomponentdoesnothavetopassanysign-onsecurityinformationtothe getConnection() method.Thesecurityinformationissuppliedby
thecontainer,asshowninthefollowingexample(themethodcallishighlightedin bold):
// Business method in an application component
Context initctx = new InitialContext();// Perform JNDI lookup to obtain a connection factoryjavax.resource.cci.ConnectionFactory cxf =
(javax.resource.cci.ConnectionFactory)initctx.lookup("java:comp/env/eis/MainframeCxFactory ");
// Invoke factory to obtain a connection. The security// information is not passed in the getConnection methodjavax.resource.cci.Connection cx = cxf. getConnection() ;
...
Component-ManagedSign-On
Incomponent-managedsign-on,anapplicationcomponentisresponsibleforpassingthe
neededsign-onsecurityinformationfortheresourcetothe getConnection method.For
example,securityinformationmightbeausernameandpassword,asshownhere(themethodcallishighlightedin bold):
// Method in an application component
Context initctx = new InitialContext();
// Perform JNDI lookup to obtain a connection factorySecuringEnterpriseInformationSystemsApplications
TheJavaEE6Tutorial • January2013 780
javax.resource.cci.ConnectionFactory cxf =
(javax.resource.cci.ConnectionFactory)initctx.lookup("java:comp/env/eis/MainframeCxFactory ");
// Get a new ConnectionSpec
com.myeis.ConnectionSpecImpl properties = //..
// Invoke factory to obtain a connection
properties.setUserName( "...");
properties.setPassword( "...");
javax.resource.cci.Connection cx =
cxf. getConnection(properties) ;
...
ConfiguringResourceAdapterSecurity
Aresourceadapterisasystem-levelsoftwarecomponentthattypicallyimplementsnetwork
connectivitytoanexternalresourcemanager.AresourceadaptercanextendthefunctionalityoftheJavaEEplatformeitherbyimplementingoneoftheJavaEEstandardserviceAPIs,suchasaJDBCdriver,orbydefiningandimplementingaresourceadapterforaconnectortoanexternalapplicationsystem.Resourceadapterscanalsoprovideservicesthatareentirelylocal,perhapsinteractingwithnativeresources.ResourceadaptersinterfacewiththeJavaEEplatformthroughJavaEEserviceproviderinterfaces(JavaEESPI).AresourceadapterthatusesJavaEESPIstoattachtotheJavaEEplatformwillbeabletoworkwithallJavaEEproducts.
Toconfigurethesecuritysettingsforaresourceadapter,youneedtoedittheresourceadapter
descriptorfile, ra.xml.Hereisanexampleofthepartofan ra.xmlfilethatconfiguressecurity
propertiesforaresourceadapter:
<authentication-mechanism>
<authentication-mechanism-type>
BasicPassword
</authentication-mechanism-type><credential-interface>
javax.resource.spi.security.PasswordCredential
</credential-interface>
</authentication-mechanism><reauthentication-support>false</reauthentication-support>
Youcanfindoutmoreabouttheoptionsforconfiguringresourceadaptersecuritybyreviewing
as-install /lib/dtds/connector_1_0.dtd .Youcanconfigurethefollowingelementsinthe
resourceadapterdeploymentdescriptorfile:
■Authenticationmechanisms :Usethe authentication-mechanism elementtospecifyan
authenticationmechanismsupportedbytheresourceadapter.Thissupportisfortheresourceadapter,notfortheunderlyingEISinstance.
Therearetwosupportedmechanismtypes:
■BasicPassword ,whichsupportsthefollowinginterface:
javax.resource.spi.security.PasswordCredentialSecuringEnterpriseInformationSystemsApplications
Chapter42 • JavaEESecurity:AdvancedTopics 781
■Kerbv5,whichsupportsthefollowinginterface:
javax.resource.spi.security.GenericCredential
TheGlassFishServerdoesnotcurrentlysupportthismechanismtype.
■Reauthenticationsupport :Usethe reauthentication-support elementtospecify
whethertheresourceadapterimplementationsupportsreauthenticationofexistingManaged-Connection instances.Optionsare trueorfalse.
■Securitypermissions :Usethe security-permission elementtospecifyasecurity
permissionthatisrequiredbytheresourceadaptercode.SupportforsecuritypermissionsisoptionalandisnotsupportedinthecurrentreleaseoftheGlassFishServer.Youcan,however,manuallyupdatethe server.policy filetoaddtherelevantpermissionsforthe
resourceadapter.
Thesecuritypermissionslistedinthedeploymentdescriptoraredifferentfromthose
requiredbythedefaultpermissionsetasspecifiedintheconnectorspecification.
Formoreinformationontheimplementationofthesecuritypermissionspecification,see
thesecuritypolicyfiledocumentationlistedin
“FurtherInformationaboutSecurity”on
page785.
Inadditiontospecifyingresourceadaptersecurityinthe ra.xmlfile,youcancreateasecurity
mapforaconnectorconnectionpooltomapanapplicationprincipalorausergrouptoaback-endEISprincipal.ThesecuritymapisusuallyusedifoneormoreEISback-endprincipalsareusedtoexecuteoperations(ontheEIS)initiatedbyvariousprincipalsorusergroupsintheapplication.
▼ToMapanApplicationPrincipaltoEISPrincipals
WhenusingtheGlassFishServer,youcanusesecuritymapstomapthecalleridentityoftheapplication(principalorusergroup)toasuitableEISprincipalincontainer-managedtransaction-basedscenarios.WhenanapplicationprincipalinitiatesarequesttoanEIS,theGlassFishServerfirstchecksforanexactprincipalbyusingthesecuritymapdefinedfortheconnectorconnectionpooltodeterminethemappedback-endEISprincipal.Ifthereisnoexactmatch,theGlassFishServerusesthewildcardcharacterspecification,ifany,todeterminethemappedback-endEISprincipal.SecuritymapsareusedwhenanapplicationuserneedstoexecuteanEISoperationthatrequiresexecutionasaspecificidentityintheEIS.
Toworkwithsecuritymaps,usetheAdministrationConsole.FromtheAdministration
Console,followthesestepstogettothesecuritymapspage.
Inthenavigationtree,expandtheResourcesnode.ExpandtheConnectorsnode.SelecttheConnectorConnectionPoolsnode.
1
23SecuringEnterpriseInformationSystemsApplications
TheJavaEE6Tutorial • January2013 782
OntheConnectorConnectionPoolspage,clickthenameoftheconnectionpoolforwhichyou
wanttocreateasecuritymap.
ClicktheSecurityMapstab.ClickNewtocreateanewsecuritymapfortheconnectionpool.Typeanamebywhichyouwillrefertothesecuritymap,aswellastheotherrequired
information.
ClicktheHelpbuttonformoreinformationontheindividualoptions.
ConfiguringSecurityUsingDeploymentDescriptors
TherecommendedwaytoconfiguresecurityintheJavaEE6platformiswithannotations.If
youwishtooverridethesecuritysettingsatdeploymenttime,youcanusesecurityelementsintheweb.xmldeploymentdescriptortodoso.Thissectiondescribeshowtousethedeployment
descriptortospecifybasicauthenticationandtooverridedefaultprincipal-to-rolemapping.
SpecifyingSecurityforBasicAuthenticationinthe
DeploymentDescriptor
Theelementsofthedeploymentdescriptorthataddbasicauthenticationtoanexampletellthe
serverorbrowsertoperformthefollowingtasks:
■Sendastandardlogindialogtocollectusernameandpassworddata
■Verifythattheuserisauthorizedtoaccesstheapplication
■Ifauthorized,displaytheservlettotheuser
Thefollowingsamplecodeshowsthesecurityelementsforadeploymentdescriptorthatcould
beusedintheexampleofbasicauthenticationfoundinthetut-install /examples/security/hello2_basicauth/ directory:
<security-constraint>
<display-name>SecurityConstraint</display-name><web-resource-collection>
<web-resource-name>WRCollection</web-resource-name>
<url-pattern>/greeting</url-pattern>
</web-resource-collection><auth-constraint>
<role-name>TutorialUser</role-name>
</auth-constraint><user-data-constraint>
<transport-guarantee>CONFIDENTIAL</transport-guarantee>
</user-data-constraint>
</security-constraint>4
5
67ConfiguringSecurityUsingDeploymentDescriptors
Chapter42 • JavaEESecurity:AdvancedTopics 783
<login-config>
<auth-method>BASIC</auth-method><realm-name>file</realm-name>
</login-config>
<security-role>
<role-name>TutorialUser</role-name>
</security-role>
ThisdeploymentdescriptorspecifiesthattherequestURI /greeting canbeaccessedonlyby
userswhohaveenteredtheirusernamesandpasswordsandhavebeenauthorizedtoaccessthisURLbecausetheyhavebeenverifiedtobeintherole TutorialUser .Theusernameand
passworddatawillbesentoveraprotectedtransportinordertokeepitfrombeingreadintransit.
SpecifyingNon-DefaultPrincipal-to-RoleMappingin
theDeploymentDescriptor
Tomaparolenamepermittedbytheapplicationormoduletoprincipals(users)andgroups
definedontheserver,usethe security-role-mapping elementintheruntimedeployment
descriptorfile( glassfish-application.xml ,glassfish-web.xml ,or
glassfish-ejb-jar.xml ).Theentryneedstodeclareamappingbetweenasecurityroleused
intheapplicationandoneormoregroupsorprincipalsdefinedfortheapplicablerealmoftheGlassFishServer.Anexampleforthe glassfish-web.xml fileisshownbelow:
<glassfish-web-app>
<security-role-mapping>
<role-name>DIRECTOR</role-name><principal-name>schwartz</principal-name>
</security-role-mapping><security-role-mapping>
<role-name>DEPT-ADMIN</role-name><group-name>dept-admins</group-name>
</security-role-mapping>
</glassfish-web-app>
Therolenamecanbemappedtoeitheraspecificprincipal(user),agroup,orboth.The
principalorgroupnamesreferencedmustbevalidprincipalsorgroupsinthecurrentdefaultrealmoftheGlassFishServer.The role-name inthisexamplemustexactlymatchthe
role-name inthe security-role elementofthecorresponding web.xmlfileortherolename
definedinthe @DeclareRoles and/or @RolesAllowed annotations.ConfiguringSecurityUsingDeploymentDescriptors
TheJavaEE6Tutorial • January2013 784
FurtherInformationaboutSecurity
Formoreinformationaboutsecurity,see:
■Documentationonthe keytoolcommand:
http://docs.oracle.com/javase/6/docs/technotes/tools/solaris/keytool.html
■JavaAuthenticationandAuthorizationService(JAAS)ReferenceGuide
http://docs.oracle.com/
javase/6/docs/technotes/guides/security/jaas/JAASRefGuide.html
■JavaAuthenticationandAuthorizationService(JAAS):LoginModuleDeveloper’sGuide
http://docs.oracle.com/javase/6/docs/technotes/guides/security/jaas/JAASLMDevGuide.html
■Documentationonsecuritypolicyfilesyntax:
http://docs.oracle.com/javase/6/docs/technotes/guides/security/PolicyFiles.html#FileSyntaxFurtherInformationaboutSecurity
Chapter42 • JavaEESecurity:AdvancedTopics 785
786
JavaEESupportingTechnologies
PartVIIIexploresseveraltechnologiesthatsupporttheJavaEEplatform.Thispart
containsthefollowingchapters:
■Chapter43,“IntroductiontoJavaEESupportingTechnologies”
■Chapter44,“Transactions”
■Chapter45,“ResourcesandResourceAdapters”
■Chapter46,“TheResourceAdapterExample”
■Chapter47,“JavaMessageServiceConcepts”
■Chapter48,“JavaMessageServiceExamples”
■Chapter49,“BeanValidation:AdvancedTopics”
■Chapter50,“UsingJavaEEInterceptors”PART VIII
787
788
IntroductiontoJavaEESupporting
Technologies
TheJavaEEplatformincludesseveraltechnologiesandAPIsthatextenditsfunctionality.These
technologiesallowapplicationstoaccessawiderangeofservicesinauniformmanner.Thesetechnologiesareexplainedingreaterdetailin
Chapter44,“Transactions,” andChapter45,
“ResourcesandResourceAdapters,” aswellas Chapter47,“JavaMessageServiceConcepts,”
Chapter48,“JavaMessageServiceExamples,” andChapter49,“BeanValidation:Advanced
Topics.”
Thefollowingtopicsareaddressedhere:
■“TransactionsinJavaEEApplications”onpage789
■“ResourcesinJavaEEApplications”onpage790
TransactionsinJavaEEApplications
InaJavaEEapplication,atransactionisaseriesofactionsthatmustallcompletesuccessfully,orelseallthechangesineachactionarebackedout.Transactionsendineitheracommitorarollback.
TheJavaTransactionAPI(JTA)allowsapplicationstoaccesstransactionsinamannerthatis
independentofspecificimplementations.JTAspecifiesstandardJavainterfacesbetweenatransactionmanagerandthepartiesinvolvedinadistributedtransactionsystem:thetransactionalapplication,theJavaEEserver,andthemanagerthatcontrolsaccesstothesharedresourcesaffectedbythetransactions.
TheJTAdefinesthe UserTransaction interfacethatapplicationsusetostart,commit,orroll
backtransactions.Applicationcomponentsgeta UserTransaction objectthroughaJNDI
lookupbyusingthename java:comp/UserTransaction orbyrequestinginjectionofa
UserTransaction object.AnapplicationserverusesanumberofJTA-definedinterfacesto
communicatewithatransactionmanager;atransactionmanagerusesJTA-definedinterfacestointeractwitharesourcemanager.43CHAPTER 43
789
SeeChapter44,“Transactions,” foramoredetailedexplanation.TheJTA1.1specificationis
availableat http://www.oracle.com/technetwork/java/javaee/tech/jta-138684.html .
ResourcesinJavaEEApplications
Aresourceisaprogramobjectthatprovidesconnectionstosuchsystemsasdatabaseservers
andmessagingsystems.
TheJavaEEConnectorArchitectureandResource
Adapters
TheJavaEEConnectorarchitectureenablesJavaEEcomponentstointeractwithenterprise
informationsystems(EISs)andEISstointeractwithJavaEEcomponents.EISsoftwareincludessuchkindsofsystemsasenterpriseresourceplanning(ERP),mainframetransactionprocessing,andnonrelationaldatabases.ConnectorarchitecturesimplifiestheintegrationofdiverseEISs.EachEISrequiresonlyoneimplementationoftheConnectorarchitecture.BecauseitadherestotheConnectorspecification,animplementationisportableacrossallcompliantJavaEEservers.
Thespecificationdefinesthecontractsforanapplicationserveraswellasforresourceadapters,
whicharesystem-levelsoftwaredriversforspecificEISresources.ThesestandardcontractsprovidepluggabilitybetweenapplicationserversandEISs.TheJavaEEConnectorArchitecture1.6specificationdefinesnewsystemcontractssuchasGenericWorkContextandSecurityInflow.TheJavaEEConnectorArchitecture1.6specificationisavailableat
http://jcp.org/en/jsr/detail?id=322 .
AresourceadapterisaJavaEEcomponentthatimplementstheConnectorarchitecturefora
specificEIS.Aresourceadaptercanchoosetosupportthefollowinglevelsoftransactions:
■NoTransaction :Notransactionsupportisprovided.
■LocalTransaction :Resourcemanagerlocaltransactionsaresupported.
■XATransaction :TheresourceadaptersupportstheXAdistributedtransactionprocessing
modelandtheJTA XATransaction interface.
SeeChapter45,“ResourcesandResourceAdapters,” foramoredetailedexplanationofresource
adapters.
JavaDatabaseConnectivitySoftware
Tostore,organize,andretrievedata,mostapplicationsuserelationaldatabases.JavaEEapplicationsaccessrelationaldatabasesthroughtheJDBCAPI.ResourcesinJavaEEApplications
TheJavaEE6Tutorial • January2013 790
AJDBCresource,ordatasource,providesapplicationswithameansofconnectingtoa
database.Typically,aJDBCresourceiscreatedforeachdatabaseaccessedbytheapplicationsdeployedinadomain.TransactionalaccesstoJDBCresourcesisavailablefromservlets,JavaServerFacespages,andenterprisebeans.TheconnectionpoolinganddistributedtransactionfeaturesareintendedforusebyJDBCdriverstocoordinatewithanapplicationserver.Formoreinformation,see
“DataSource ObjectsandConnectionPools”onpage806 .
JavaMessageService
Messagingisamethodofcommunicationbetweensoftwarecomponentsorapplications.A
messagingsystemisapeer-to-peerfacility:Amessagingclientcansendmessagesto,andreceivemessagesfrom,anyotherclient.Eachclientconnectstoamessagingagentthatprovidesfacilitiesforcreating,sending,receiving,andreadingmessages.
TheJavaMessageService(JMS)APIallowsapplicationstocreate,send,receive,andread
messages.ItdefinesacommonsetofinterfacesandassociatedsemanticsthatallowprogramswrittenintheJavaprogramminglanguagetocommunicatewithothermessagingimplementations.
TheJMSAPIminimizesthesetofconceptsaprogrammermustlearninordertousemessaging
productsbutprovidesenoughfeaturestosupportsophisticatedmessagingapplications.ItalsostrivestomaximizetheportabilityofJMSapplicationsacrossJMSprovidersinthesamemessagingdomain.JavaMessageService
Chapter43 • IntroductiontoJavaEESupportingTechnologies 791
792
Transactions
Atypicalenterpriseapplicationaccessesandstoresinformationinoneormoredatabases.
Becausethisinformationiscriticalforbusinessoperations,itmustbeaccurate,current,andreliable.Dataintegritywouldbelostifmultipleprogramswereallowedtoupdatethesameinformationsimultaneouslyorifasystemthatfailedwhileprocessingabusinesstransactionweretoleavetheaffecteddataonlypartiallyupdated.Bypreventingbothofthesescenarios,softwaretransactionsensuredataintegrity.Transactionscontroltheconcurrentaccessofdatabymultipleprograms.Intheeventofasystemfailure,transactionsmakesurethatafterrecovery,thedatawillbeinaconsistentstate.
Thefollowingtopicsareaddressedhere:
■“WhatIsaTransaction?”onpage793
■“Container-ManagedTransactions”onpage794
■“Bean-ManagedTransactions”onpage800
■“TransactionTimeouts”onpage801
■“UpdatingMultipleDatabases”onpage802
■“TransactionsinWebComponents”onpage803
■“FurtherInformationaboutTransactions”onpage803
WhatIsaTransaction?
Toemulateabusinesstransaction,aprogrammayneedtoperformseveralsteps.Afinancial
program,forexample,mighttransferfundsfromacheckingaccounttoasavingsaccountbyusingthestepslistedinthefollowingpseudocode:
begin transaction
debit checking accountcredit savings accountupdate history log
commit transaction44CHAPTER 44
793
Eitherallornoneofthethreestepsmustcomplete.Otherwise,dataintegrityislost.Becausethe
stepswithinatransactionareaunifiedwhole,a transaction isoftendefinedasanindivisible
unitofwork.
Atransactioncanendintwoways:withacommitorwitharollback.Whenatransaction
commits,thedatamodificationsmadebyitsstatementsaresaved.Ifastatementwithinatransactionfails,thetransactionrollsback,undoingtheeffectsofallstatementsinthetransaction.Inthepseudocode,forexample,ifadiskdriveweretocrashduringthe credit
step,thetransactionwouldrollbackandundothedatamodificationsmadebythe debit
statement.Althoughthetransactionfails,dataintegritywouldbeintactbecausetheaccountsstillbalance.
Intheprecedingpseudocode,the beginandcommitstatementsmarktheboundariesofthe
transaction.Whendesigninganenterprisebean,youdeterminehowtheboundariesaresetbyspecifyingeithercontainer-managedorbean-managedtransactions.
Container-ManagedTransactions
Inanenterprisebeanwith container-managedtransactiondemarcation ,theEJBcontainersets
theboundariesofthetransactions.Youcanusecontainer-managedtransactionswithanytypeofenterprisebean:sessionormessage-driven.Container-managedtransactionssimplifydevelopmentbecausetheenterprisebeancodedoesnotexplicitlymarkthetransaction’sboundaries.Thecodedoesnotincludestatementsthatbeginandendthetransaction.Bydefault,ifnotransactiondemarcationisspecified,enterprisebeansusecontainer-managedtransactiondemarcation.
Typically,thecontainerbeginsatransactionimmediatelybeforeanenterprisebeanmethod
startsandcommitsthetransactionjustbeforethemethodexits.Eachmethodcanbeassociatedwithasingletransaction.Nestedormultipletransactionsarenotallowedwithinamethod.
Container-managedtransactionsdonotrequireallmethodstobeassociatedwithtransactions.
Whendevelopingabean,youcansetthetransactionattributestospecifywhichofthebean’smethodsareassociatedwithtransactions.
Enterprisebeansthatusecontainer-managedtransactiondemarcationmustnotuseany
transaction-managementmethodsthatinterferewiththecontainer’stransactiondemarcationboundaries.Examplesofsuchmethodsarethe commit,setAutoCommit ,and rollback methods
ofjava.sql.Connection orthe commitandrollback methodsof javax.jms.Session .Ifyou
requirecontroloverthetransactiondemarcation,youmustuseapplication-managedtransactiondemarcation.
Enterprisebeansthatusecontainer-managedtransactiondemarcationalsomustnotusethe
javax.transaction.UserTransaction interface.Container-ManagedTransactions
TheJavaEE6Tutorial • January2013 794
TransactionAttributes
Atransactionattribute controlsthescopeofatransaction. Figure44–1 illustrateswhy
controllingthescopeisimportant.Inthediagram, method-A beginsatransactionandthen
invokes method-B ofBean-2.When method-B executes,doesitrunwithinthescopeofthe
transactionstartedby method-A ,ordoesitexecutewithanewtransaction?Theanswerdepends
onthetransactionattributeof method-B .
Atransactionattributecanhaveoneofthefollowingvalues:
■Required
■RequiresNew
■Mandatory
■NotSupported
■Supports
■Never
RequiredAttribute
Iftheclientisrunningwithinatransactionandinvokestheenterprisebean’smethod,the
methodexecuteswithintheclient’stransaction.Iftheclientisnotassociatedwithatransaction,thecontainerstartsanewtransactionbeforerunningthemethod.
TheRequired attributeistheimplicittransactionattributeforallenterprisebeanmethods
runningwithcontainer-managedtransactiondemarcation.YoutypicallydonotsettheRequired attributeunlessyouneedtooverrideanothertransactionattribute.Because
transactionattributesaredeclarative,youcaneasilychangethemlater.FIGURE44–1 TransactionScope
Bean-1-
--method-A(){ - - - bean-2.method-B()}Bean-2-
--method-B(){ - - -}
TX1TX?Container-ManagedTransactions
Chapter44 • Transactions 795
RequiresNewAttribute
Iftheclientisrunningwithinatransactionandinvokestheenterprisebean’smethod,the
containertakesthefollowingsteps:
1. Suspendstheclient’stransaction
2. Startsanewtransaction3. Delegatesthecalltothemethod4. Resumestheclient’stransactionafterthemethodcompletes
Iftheclientisnotassociatedwithatransaction,thecontainerstartsanewtransactionbefore
runningthemethod.
Youshouldusethe RequiresNew attributewhenyouwanttoensurethatthemethodalways
runswithinanewtransaction.
MandatoryAttribute
Iftheclientisrunningwithinatransactionandinvokestheenterprisebean’smethod,themethodexecuteswithintheclient’stransaction.Iftheclientisnotassociatedwithatransaction,thecontainerthrowsa TransactionRequiredException .
Usethe Mandatory attributeiftheenterprisebean’smethodmustusethetransactionofthe
client.
NotSupportedAttribute
Iftheclientisrunningwithinatransactionandinvokestheenterprisebean’smethod,thecontainersuspendstheclient’stransactionbeforeinvokingthemethod.Afterthemethodhascompleted,thecontainerresumestheclient’stransaction.
Iftheclientisnotassociatedwithatransaction,thecontainerdoesnotstartanewtransaction
beforerunningthemethod.
Usethe NotSupported attributeformethodsthatdon’tneedtransactions.Becausetransactions
involveoverhead,thisattributemayimproveperformance.
SupportsAttribute
Iftheclientisrunningwithinatransactionandinvokestheenterprisebean’smethod,themethodexecuteswithintheclient’stransaction.Iftheclientisnotassociatedwithatransaction,thecontainerdoesnotstartanewtransactionbeforerunningthemethod.
Becausethetransactionalbehaviorofthemethodmayvary,youshouldusethe Supports
attributewithcaution.Container-ManagedTransactions
TheJavaEE6Tutorial • January2013 796
NeverAttribute
Iftheclientisrunningwithinatransactionandinvokestheenterprisebean’smethod,the
containerthrowsa RemoteException .Iftheclientisnotassociatedwithatransaction,the
containerdoesnotstartanewtransactionbeforerunningthemethod.
SummaryofTransactionAttributes
Table44–1 summarizestheeffectsofthetransactionattributes.Boththe T1andthe T2
transactionsarecontrolledbythecontainer.A T1transactionisassociatedwiththeclientthat
callsamethodintheenterprisebean.Inmostcases,theclientisanotherenterprisebean.A T2
transactionisstartedbythecontainerjustbeforethemethodexecutes.
Inthelastcolumnof Table44–1 ,theword“None”meansthatthebusinessmethoddoesnot
executewithinatransactioncontrolledbythecontainer.However,thedatabasecallsinsuchabusinessmethodmightbecontrolledbythetransactionmanagerofthedatabasemanagementsystem.
TABLE44–1 TransactionAttributesandScope
TransactionAttribute Client’sTransaction BusinessMethod’sTransaction
Required None T2
Required T1 T1
RequiresNew None T2
RequiresNew T1 T2
Mandatory None Error
Mandatory T1 T1
NotSupported None None
NotSupported T1 None
Supports None None
Supports T1 T1
Never None None
Never T1 Error
SettingTransactionAttributes
Transactionattributesarespecifiedbydecoratingtheenterprisebeanclassormethodwitha
javax.ejb.TransactionAttribute annotationandsettingittooneofthe
javax.ejb.TransactionAttributeType constants.Container-ManagedTransactions
Chapter44 • Transactions 797
Ifyoudecoratetheenterprisebeanclasswith @TransactionAttribute ,thespecified
TransactionAttributeType isappliedtoallthebusinessmethodsintheclass.Decoratinga
businessmethodwith @TransactionAttribute appliesthe TransactionAttributeType only
tothatmethod.Ifa @TransactionAttribute annotationdecoratesboththeclassandthe
method,themethod TransactionAttributeType overridestheclass
TransactionAttributeType .
TheTransactionAttributeType constantsshownin Table44–2 encapsulatethetransaction
attributesdescribedearlierinthissection.
TABLE44–2 TransactionAttributeType Constants
TransactionAttribute TransactionAttributeType Constant
Required TransactionAttributeType.REQUIRED
RequiresNew TransactionAttributeType.REQUIRES_NEWMandatory TransactionAttributeType.MANDATORYNotSupported TransactionAttributeType.NOT_SUPPORTEDSupports TransactionAttributeType.SUPPORTSNever TransactionAttributeType.NEVER
Thefollowingcodesnippetdemonstrateshowtousethe @TransactionAttribute annotation:
@TransactionAttribute(NOT_SUPPORTED)
@Statefulpublic class TransactionBean implements Transaction {...
@TransactionAttribute(REQUIRES_NEW)public void firstMethod() {...}
@TransactionAttribute(REQUIRED)
public void secondMethod() {...}
public void thirdMethod() {...}public void fourthMethod() {...}
}
Inthisexample,the TransactionBean class’stransactionattributehasbeensetto
NotSupported ,firstMethod hasbeensetto RequiresNew ,and secondMethod hasbeensetto
Required .Becausea @TransactionAttribute setonamethodoverridestheclass
@TransactionAttribute ,callsto firstMethod willcreateanewtransaction,andcallsto
secondMethod willeitherruninthecurrenttransactionorstartanewtransaction.Callsto
thirdMethod orfourthMethod donottakeplacewithinatransaction.Container-ManagedTransactions
TheJavaEE6Tutorial • January2013 798
RollingBackaContainer-ManagedTransaction
Therearetwowaystorollbackacontainer-managedtransaction.First,ifasystemexceptionis
thrown,thecontainerwillautomaticallyrollbackthetransaction.Second,byinvokingthesetRollbackOnly methodofthe EJBContext interface,thebeanmethodinstructsthe
containertorollbackthetransaction.Ifthebeanthrowsanapplicationexception,therollbackisnotautomaticbutcanbeinitiatedbyacallto setRollbackOnly .
SynchronizingaSessionBean’sInstanceVariables
TheSessionSynchronization interface,whichisoptional,allowsstatefulsessionbean
instancestoreceivetransactionsynchronizationnotifications.Forexample,youcouldsynchronizetheinstancevariablesofanenterprisebeanwiththeircorrespondingvaluesinthedatabase.Thecontainerinvokesthe SessionSynchronization methods( afterBegin ,
beforeCompletion ,and afterCompletion )ateachofthemainstagesofatransaction.
TheafterBegin methodinformstheinstancethatanewtransactionhasbegun.Thecontainer
invokes afterBegin immediatelybeforeitinvokesthebusinessmethod.
Thecontainerinvokesthe beforeCompletion methodafterthebusinessmethodhasfinished
butjustbeforethetransactioncommits.The beforeCompletion methodisthelastopportunity
forthesessionbeantorollbackthetransaction(bycalling setRollbackOnly ).
TheafterCompletion methodindicatesthatthetransactionhascompleted.Thismethodhasa
single booleanparameterwhosevalueis trueifthetransactionwascommittedand falseifit
wasrolledback.
MethodsNotAllowedinContainer-Managed
Transactions
Youshouldnotinvokeanymethodthatmightinterferewiththetransactionboundariessetby
thecontainer.Thelistofprohibitedmethodsfollows:
■Thecommit,setAutoCommit ,and rollback methodsof java.sql.Connection
■ThegetUserTransaction methodof javax.ejb.EJBContext
■Anymethodof javax.transaction.UserTransaction
Youcan,however,usethesemethodstosetboundariesinapplication-managedtransactions.Container-ManagedTransactions
Chapter44 • Transactions 799
Bean-ManagedTransactions
Inbean-managedtransactiondemarcation ,thecodeinthesessionormessage-drivenbean
explicitlymarkstheboundariesofthetransaction.Althoughbeanswithcontainer-managedtransactionsrequirelesscoding,theyhaveonelimitation:Whenamethodisexecuting,itcanbeassociatedwitheitherasingletransactionornotransactionatall.Ifthislimitationwillmakecodingyourbeandifficult,youshouldconsiderusingbean-managedtransactions.
Thefollowingpseudocodeillustratesthekindoffine-grainedcontrolyoucanobtainwith
application-managedtransactions.Bycheckingvariousconditions,thepseudocodedecideswhethertostartorstopcertaintransactionswithinthebusinessmethod:
begin transaction
...
update table-a
...
if (condition-x)
commit transaction
else if (condition-y)
update table-bcommit transaction
else
rollback transactionbegin transactionupdate table-ccommit transaction
Whencodinganapplication-managedtransactionforsessionormessage-drivenbeans,you
mustdecidewhethertouseJavaDatabaseConnectivityorJTAtransactions.Thesectionsthatfollowdiscussbothtypesoftransactions.
JTATransactions
JTA,ortheJavaTransactionAPI,allowsyoutodemarcatetransactionsinamannerthatisindependentofthetransactionmanagerimplementation.GlassFishServerimplementsthetransactionmanagerwiththeJavaTransactionService(JTS).However,yourcodedoesn’tcalltheJTSmethodsdirectlybutinsteadinvokestheJTAmethods,whichthencallthelower-levelJTSroutines.
AJTAtransaction iscontrolledbytheJavaEEtransactionmanager.YoumaywanttouseaJTA
transactionbecauseitcanspanupdatestomultipledatabasesfromdifferentvendors.AparticularDBMS’stransactionmanagermaynotworkwithheterogeneousdatabases.However,
theJavaEEtransactionmanagerdoeshaveonelimitation:Itdoesnotsupportnestedtransactions.Inotherwords,itcannotstartatransactionforaninstanceuntiltheprecedingtransactionhasended.
TodemarcateaJTAtransaction,youinvokethe begin,commit,and rollback methodsofthe
javax.transaction.UserTransaction interface.Bean-ManagedTransactions
TheJavaEE6Tutorial • January2013 800
ReturningwithoutCommitting
Inastatelesssessionbeanwithbean-managedtransactions,abusinessmethodmustcommitor
rollbackatransactionbeforereturning.However,astatefulsessionbeandoesnothavethisrestriction.
InastatefulsessionbeanwithaJTAtransaction,theassociationbetweenthebeaninstanceand
thetransactionisretainedacrossmultipleclientcalls.Evenifeachbusinessmethodcalledbytheclientopensandclosesthedatabaseconnection,theassociationisretaineduntiltheinstancecompletesthetransaction.
InastatefulsessionbeanwithaJDBCtransaction,theJDBCconnectionretainstheassociation
betweenthebeaninstanceandthetransactionacrossmultiplecalls.Iftheconnectionisclosed,theassociationisnotretained.
MethodsNotAllowedinBean-ManagedTransactions
Donotinvokethe getRollbackOnly andsetRollbackOnly methodsofthe EJBContext
interfaceinbean-managedtransactions.Thesemethodsshouldbeusedonlyincontainer-managedtransactions.Forbean-managedtransactions,invokethe getStatus and
rollback methodsofthe UserTransaction interface.
TransactionTimeouts
Forcontainer-managedtransactions,youcanusetheAdministrationConsoletoconfigurethe
transactiontimeoutinterval.See “StartingtheAdministrationConsole”onpage74 .
Forenterprisebeanswithbean-managedJTAtransactions,youinvokethe
setTransactionTimeout methodofthe UserTransaction interface.
▼ToSetaTransactionTimeout
IntheAdministrationConsole,expandtheConfigurationsnode,thenexpandtheserver-config
nodeandselectTransactionService.
OntheTransactionServicepage,setthevalueoftheTransactionTimeoutfieldtothevalueof
yourchoice(forexample,5).
Withthissetting,ifthetransactionhasnotcompletedwithin5seconds,theEJBcontainerrolls
itback.
Thedefaultvalueis0,meaningthatthetransactionwillnottimeout.1
2TransactionTimeouts
Chapter44 • Transactions 801
ClickSave.
UpdatingMultipleDatabases
TheJavaEEtransactionmanagercontrolsallenterprisebeantransactionsexceptfor
bean-managedJDBCtransactions.TheJavaEEtransactionmanagerallowsanenterprisebeantoupdatemultipledatabaseswithinatransaction.
Figure44–2 andFigure44–3 showtwo
scenariosforupdatingmultipledatabasesinasingletransaction.
InFigure44–2 ,theclientinvokesabusinessmethodin Bean-A.Thebusinessmethodbeginsa
transaction,updatesDatabaseX,updatesDatabaseY,andinvokesabusinessmethodinBean-B.ThesecondbusinessmethodupdatesDatabaseZandreturnscontroltothebusiness
methodin Bean-A,whichcommitsthetransaction.Allthreedatabaseupdatesoccurinthesame
transaction.
In
Figure44–3 ,theclientcallsabusinessmethodin Bean-A,whichbeginsatransactionand
updatesDatabaseX.Then Bean-Ainvokesamethodin Bean-B,whichresidesinaremoteJava
EEserver.Themethodin Bean-BupdatesDatabaseY.ThetransactionmanagersoftheJavaEE
serversensurethatbothdatabasesareupdatedinthesametransaction.
FIGURE44–2 UpdatingMultipleDatabases
Databases
YZJava EE
Server
X
Client
Bean-A
 Bean-B
3UpdatingMultipleDatabases
TheJavaEE6Tutorial • January2013 802
TransactionsinWebComponents
Youcandemarcateatransactioninawebcomponentbyusingeitherthe
java.sql.Connection orthe javax.transaction.UserTransaction interface.Thesearethe
sameinterfacesthatasessionbeanwithbean-managedtransactionscanuse.Transactionsdemarcatedwiththe UserTransaction interfacearediscussedin
“JTATransactions”on
page800.
FurtherInformationaboutTransactions
Formoreinformationabouttransactions,see
■JavaTransactionAPI1.1specification:
http://www.oracle.com/technetwork/java/javaee/tech/jta-138684.htmlFIGURE44–3 UpdatingMultipleDatabasesacrossJavaEEServers
Databases
XYJava EE
Server
Java EE
Server
Client
Bean-A
 Bean-B
FurtherInformationaboutTransactions
Chapter44 • Transactions 803
804
ResourcesandResourceAdapters
JavaEEcomponentscanaccessawidevarietyofresources,includingdatabases,mailsessions,
JavaMessageServiceobjects,andURLs.TheJavaEE6platformprovidesmechanismsthatallowyoutoaccessalltheseresourcesinasimilarmanner.Thischapterexplainshowtogetconnectionstoseveraltypesofresources.
Thefollowingtopicsareaddressedhere:
■“ResourcesandJNDINaming”onpage805
■“DataSource ObjectsandConnectionPools”onpage806
■“ResourceInjection”onpage807
■“ResourceAdaptersandContracts”onpage810
■“MetadataAnnotations”onpage814
■“CommonClientInterface”onpage815
■“UsingResourceAdaptersWithContextsandDependencyInjectionfortheJavaEE
Platform(CDI)”onpage816
■“FurtherInformationaboutResources”onpage817
ResourcesandJNDINaming
Inadistributedapplication,componentsneedtoaccessothercomponentsandresources,suchasdatabases.Forexample,aservletmightinvokeremotemethodsonanenterprisebeanthatretrievesinformationfromadatabase.IntheJavaEEplatform,theJavaNamingandDirectoryInterface(JNDI)namingserviceenablescomponentstolocateothercomponentsandresources.
Aresourceisaprogramobjectthatprovidesconnectionstosystems,suchasdatabaseservers
andmessagingsystems.(AJavaDatabaseConnectivityresourceissometimesreferredtoasadatasource.)Eachresourceobjectisidentifiedbyaunique,people-friendlyname,calledtheJNDIname.Forexample,theJNDInameoftheJDBCresourcefortheJavaDBdatabasethatisshippedwiththeGlassFishServeris jdbc/__default .45CHAPTER 45
805
AnadministratorcreatesresourcesinaJNDInamespace.IntheGlassFishServer,youcanuse
eithertheAdministrationConsoleorthe asadmincommandtocreateresources.Applications
thenuseannotationstoinjecttheresources.Ifanapplicationusesresourceinjection,theGlassFishServerinvokestheJNDIAPI,andtheapplicationisnotrequiredtodoso.However,itisalsopossibleforanapplicationtolocateresourcesbymakingdirectcallstotheJNDIAPI.
AresourceobjectanditsJNDInameareboundtogetherbythenaminganddirectoryservice.
Tocreateanewresource,anewname/objectbindingisenteredintotheJNDInamespace.Youinjectresourcesbyusingthe @Resource annotationinanapplication.
Youcanuseadeploymentdescriptortooverridetheresourcemappingthatyouspecifyinan
annotation.Usingadeploymentdescriptorallowsyoutochangeanapplicationbyrepackagingitratherthanbybothrecompilingthesourcefilesandrepackaging.However,formostapplications,adeploymentdescriptorisnotnecessary.
DataSource ObjectsandConnectionPools
Tostore,organize,andretrievedata,mostapplicationsusearelationaldatabase.JavaEE6
componentsmayaccessrelationaldatabasesthroughtheJDBCAPI.ForinformationonthisAPI,see
http://www.oracle.com/technetwork/java/javase/tech/
index-jsp-136101.html .
IntheJDBCAPI,databasesareaccessedbyusing DataSource objects.A DataSource hasasetof
propertiesthatidentifyanddescribethereal-worlddatasourcethatitrepresents.Thesepropertiesincludesuchinformationasthelocationofthedatabaseserver,thenameofthedatabase,thenetworkprotocoltousetocommunicatewiththeserver,andsoon.IntheGlassFishServer,adatasourceiscalledaJDBCresource.
Applicationsaccessadatasourcebyusingaconnection,anda DataSource objectcanbe
thoughtofasafactoryforconnectionstotheparticulardatasourcethatthe DataSource
instancerepresents.Inabasic DataSource implementation,acalltothe getConnection
methodreturnsaconnectionobjectthatisaphysicalconnectiontothedatasource.
ADataSource objectmayberegisteredwithaJNDInamingservice.Ifso,anapplicationcanuse
theJNDIAPItoaccessthat DataSource object,whichcanthenbeusedtoconnecttothedata
sourceitrepresents.
DataSource objectsthatimplementconnectionpoolingalsoproduceaconnectiontothe
particulardatasourcethatthe DataSource classrepresents.Theconnectionobjectthatthe
getConnection methodreturnsisahandletoa PooledConnection objectratherthanbeinga
physicalconnection.Anapplicationusestheconnectionobjectinthesamewaythatitusesaconnection.Connectionpoolinghasnoeffectonapplicationcodeexceptthatapooled
connection,likeallconnections,shouldalwaysbeexplicitlyclosed.Whenanapplicationclosesaconnectionthatispooled,theconnectionisreturnedtoapoolofreusableconnections.Thenexttime getConnection iscalled,ahandletooneofthesepooledconnectionswillbereturnedDataSource ObjectsandConnectionPools
TheJavaEE6Tutorial • January2013 806
ifoneisavailable.Becauseconnectionpoolingavoidscreatinganewphysicalconnectionevery
timeoneisrequested,applicationscanrunsignificantlyfaster.
AJDBCconnectionpoolisagroupofreusableconnectionsforaparticulardatabase.Because
creatingeachnewphysicalconnectionistimeconsuming,theservermaintainsapoolofavailableconnectionstoincreaseperformance.Whenitrequestsaconnection,anapplicationobtainsonefromthepool.Whenanapplicationclosesaconnection,theconnectionisreturnedtothepool.
ApplicationsthatusethePersistenceAPIspecifythe DataSource objecttheyareusinginthe
jta-data-source elementofthe persistence.xml file:
<jta-data-source>jdbc/MyOrderDB</jta-data-source>
ThisistypicallytheonlyreferencetoaJDBCobjectforapersistenceunit.Theapplicationcode
doesnotrefertoanyJDBCobjects.
ResourceInjection
Thejavax.annotation.Resource annotationisusedtodeclareareferencetoaresource;
@Resource candecorateaclass,afield,oramethod.Thecontainerwillinjecttheresource
referredtoby @Resource intothecomponenteitheratruntimeorwhenthecomponentis
initialized,dependingonwhetherfield/methodinjectionorclassinjectionisused.Withfield-basedandmethod-basedinjection,thecontainerwillinjecttheresourcewhentheapplicationisinitialized.Forclass-basedinjection,theresourceislookedupbytheapplicationatruntime.
The@Resource annotationhasthefollowingelements:
■name:TheJNDInameoftheresource
■type:TheJavalanguagetypeoftheresource
■authenticationType :Theauthenticationtypetousefortheresource
■shareable :Indicateswhethertheresourcecanbeshared
■mappedName :Anonportable,implementation-specificnametowhichtheresourceshouldbe
mapped
■description :Thedescriptionoftheresource
ThenameelementistheJNDInameoftheresourceandisoptionalforfield-basedand
method-basedinjection.Forfield-basedinjection,thedefault nameisthefieldnamequalifiedby
theclassname.Formethod-basedinjection,thedefault nameistheJavaBeanspropertyname,
basedonthemethodqualifiedbytheclassname.The nameelementmustbespecifiedfor
class-basedinjection.ResourceInjection
Chapter45 • ResourcesandResourceAdapters 807
Thetypeofresourceisdeterminedbyoneofthefollowing:
■Thetypeofthefieldthe @Resource annotationisdecoratingforfield-basedinjection
■ThetypeoftheJavaBeanspropertythe @Resource annotationisdecoratingfor
method-basedinjection
■Thetypeelementof @Resource
Forclass-basedinjection,the typeelementisrequired.
TheauthenticationType elementisusedonlyforconnectionfactoryresources,suchasthe
resourcesofaconnector,alsocalledtheresourceadapter,ordatasource.Thiselementcanbesettooneofthe javax.annotation.Resource.AuthenticationType enumeratedtypevalues:
CONTAINER ,thedefault,and APPLICATION .
Theshareable elementisusedonlyforObjectResourceBroker(ORB)instanceresourcesor
connectionfactoryresource.Thiselementindicateswhethertheresourcecanbesharedbetweenthiscomponentandothercomponentsandmaybesetto true,thedefault,or false.
ThemappedName elementisanonportable,implementation-specificnametowhichtheresource
shouldbemapped.Becausethe nameelement,whenspecifiedordefaulted,islocalonlytothe
application,manyJavaEEserversprovideawayofreferringtoresourcesacrosstheapplicationserver.Thisisdonebysettingthe mappedName element.Useofthe mappedName elementis
nonportableacrossJavaEEserverimplementations.
Thedescription elementisthedescriptionoftheresource,typicallyinthedefaultlanguageof
thesystemonwhichtheapplicationisdeployed.Thiselementisusedtohelpidentifyresourcesandtohelpapplicationdeveloperschoosethecorrectresource.
Field-BasedInjection
Tousefield-basedresourceinjection,declareafieldanddecorateitwiththe @Resource
annotation.Thecontainerwillinferthenameandtypeoftheresourceifthe nameandtype
elementsarenotspecified.Ifyoudospecifythe typeelement,itmustmatchthefield’s type
declaration.
Inthefollowingcode,thecontainerinfersthe nameoftheresource,basedontheclassnameand
thefieldname: com.example.SomeClass/myDB .Theinferred typeis
javax.sql.DataSource.class :
package com.example;
public class SomeClass {
@Resourceprivate javax.sql.DataSource myDB;
...}ResourceInjection
TheJavaEE6Tutorial • January2013 808
Inthefollowingcode,theJNDInameis customerDB ,andtheinferred typeis
javax.sql.DataSource.class :
package com.example;
public class SomeClass {
@Resource(name= "customerDB ")
private javax.sql.DataSource myDB;
...}
Method-BasedInjection
Tousemethod-basedinjection,declareasettermethodanddecorateitwiththe @Resource
annotation.Thecontainerwillinferthenameandtypeoftheresourceifthe nameandtype
elementsarenotspecified.ThesettermethodmustfollowtheJavaBeansconventionsforpropertynames:Themethodnamemustbeginwith set,havea voidreturntype,andonlyone
parameter.Ifyoudospecifythe typeelement,itmustmatchthefield’stypedeclaration.
Inthefollowingcode,thecontainerinfersthe nameoftheresourcebasedontheclassnameand
thefieldname: com.example.SomeClass/myDB .Theinferred typeis
javax.sql.DataSource.class :
package com.example;
public class SomeClass {
private javax.sql.DataSource myDB;
...
@Resourceprivate void setMyDB(javax.sql.DataSource ds) {
myDB = ds;
}
...}
Inthefollowingcode,theJNDInameis customerDB ,andtheinferred typeis
javax.sql.DataSource.class :
package com.example;
public class SomeClass {
private javax.sql.DataSource myDB;
...
@Resource(name= "customerDB ")
private void setMyDB(javax.sql.DataSource ds) {
myDB = ds;
}
...}ResourceInjection
Chapter45 • ResourcesandResourceAdapters 809
Class-BasedInjection
Touseclass-basedinjection,decoratetheclasswitha @Resource annotation,andsetthe
required nameandtypeelements:
@Resource(name= "myMessageQueue ",
type= "javax.jms.ConnectionFactory ")
public class SomeMessageBean {...}
The@Resources annotationisusedtogrouptogethermultiple @Resource declarationsfor
class-basedinjection.Thefollowingcodeshowsthe @Resources annotationcontainingtwo
@Resource declarations.OneisaJavaMessageServicemessagequeue,andtheotherisa
JavaMailsession:
@Resources({
@Resource(name= "myMessageQueue ",
type= "javax.jms.ConnectionFactory "),
@Resource(name= "myMailSession ",
type= "javax.mail.Session ")
})public class SomeMessageBean {...}
ResourceAdaptersandContracts
AresourceadapterisaJavaEEcomponentthatimplementstheJavaEEConnectorarchitecture
foraspecificEIS.ExamplesofEISsincludeenterpriseresourceplanning,mainframetransactionprocessing,anddatabasesystems.InaJavaEEserver,theJavaMessageServerandJavaMailalsoactasEISsthatyouaccessusingresourceadapters.Asillustratedin
Figure45–1 ,
theresourceadapterfacilitatescommunicationbetweenaJavaEEapplicationandanEIS.ResourceAdaptersandContracts
TheJavaEE6Tutorial • January2013 810
StoredinaResourceAdapterArchive(RAR)file,aresourceadaptercanbedeployedonany
JavaEEserver,muchlikeaJavaEEapplication.ARARfilemaybecontainedinanEnterpriseArchive(EAR)file,oritmayexistasaseparatefile.
AresourceadapterisanalogoustoaJDBCdriver.BothprovideastandardAPIthroughwhich
anapplicationcanaccessaresourcethatisoutsidetheJavaEEserver.Foraresourceadapter,thetargetsystemisanEIS;foraJDBCdriver,itisaDBMS.ResourceadaptersandJDBCdriversarerarelycreatedbyapplicationdevelopers.Inmostcases,bothtypesofsoftwarearebuiltbyvendorsthatselltools,servers,orintegrationsoftware.
TheresourceadaptermediatescommunicationbetweentheJavaEEserverandtheEISby
meansofcontracts.TheapplicationcontractdefinestheAPIthroughwhichaJavaEEcomponent,suchasanenterprisebean,accessestheEIS.ThisAPIistheonlyviewthatthecomponenthasoftheEIS.ThesystemcontractslinktheresourceadaptertoimportantservicesthataremanagedbytheJavaEEserver.TheresourceadapteritselfanditssystemcontractsaretransparenttotheJavaEEcomponent.
ManagementContracts
TheJavaEEConnectorArchitecturedefinessystemcontractsthatenableresourceadapter
lifecycleandthreadmanagement.FIGURE45–1 ResourceAdapters
EISJava EE Server
Enterprise Bean
Web Component
Transaction 
Connection 
Security
Resource 
Adapter
Managers
ApplicationContract
Application
ContractSystem
Contracts
ResourceAdaptersandContracts
Chapter45 • ResourcesandResourceAdapters 811
LifecycleManagement
TheConnectorArchitecturespecifiesalifecyclemanagementcontractthatallowsan
applicationservertomanagethelifecycleofaresourceadapter.Thiscontractprovidesamechanismfortheapplicationservertobootstraparesourceadapterinstanceduringthedeploymentorapplicationserverstartup.Thiscontractalsoprovidesameansfortheapplicationservertonotifytheresourceadapterinstancewhenitisundeployedorwhenanorderlyshutdownoftheapplicationservertakesplace.
WorkManagementContract
TheConnectorArchitectureworkmanagementcontractensuresthatresourceadaptersusethreadsintheproper,recommendedmanner.Thiscontractalsoenablesanapplicationservertomanagethreadsforresourceadapters.
Resourceadaptersthatimproperlyusethreadscanjeopardizetheentireapplicationserver
environment.Forexample,aresourceadaptermightcreatetoomanythreadsormightnotproperlyreleasethreadsithascreated.Poorthreadhandlinginhibitsapplicationservershutdownandimpactstheapplicationserver’sperformancebecausecreatinganddestroyingthreadsareexpensiveoperations.
Theworkmanagementcontractestablishesameansfortheapplicationservertopoolandreuse
threads,similartopoolingandreusingconnections.Byadheringtothiscontract,theresourceadapterdoesnothavetomanagethreadsitself.Instead,theresourceadapterhastheapplicationservercreateandprovideneededthreads.Whenitisfinishedwithagiventhread,theresourceadapterreturnsthethreadtotheapplicationserver.Theapplicationservermanagesthethread,eitherreturningittoapoolforlaterreuseordestroyingit.Handlingthreadsinthismanner
resultsinincreasedapplicationserverperformanceandmoreefficientuseofresources.
Inadditiontomovingthreadmanagementtotheapplicationserver,theConnector
Architectureprovidesaflexiblemodelforaresourceadapterthatusesthreads.
■Therequestingthreadcanchoosetoblock(stopitsownexecution)untiltheworkthreadcompletes.
■Therequestingthreadcanblockwhileitwaitstogettheworkthread.Whentheapplicationserverprovidesaworkthread,therequestingthreadandtheworkthreadexecuteinparallel.
■Theresourceadaptercanopttosubmittheworkforthethreadtoaqueue.Thethreadexecutestheworkfromthequeueatsomelaterpoint.Theresourceadaptercontinuesitsownexecutionfromthepointitsubmittedtheworktothequeue,nomatterwhenthethreadexecutesit.
Withthelattertwoapproaches,thesubmittingthreadandtheworkthreadmayexecute
simultaneouslyorindependently.Fortheseapproaches,thecontractspecifiesalistenermechanismtonotifytheresourceadapterthatthethreadhascompleteditsoperation.Theresourceadaptercanalsospecifytheexecutioncontextforthethread,andtheworkmanagementcontractcontrolsthecontextinwhichthethreadexecutes.ResourceAdaptersandContracts
TheJavaEE6Tutorial • January2013 812
GenericWorkContextContract
Theworkmanagementcontractbetweentheapplicationserverandaresourceadapterenables
aresourceadaptertodoatask,suchascommunicatingwiththeEISordeliveringmessages,bydelivering Workinstancesforexecution.
Agenericworkcontextcontractenablesaresourceadaptertocontrolthecontextsinwhichthe
Workinstancesthatitsubmitsareexecutedbytheapplicationserver’s WorkManager .Ageneric
workcontextmechanismalsoenablesanapplicationservertosupportnewmessageinflowanddeliveryschemes.Italsoprovidesarichercontextual Workexecutionenvironmenttothe
resourceadapterwhilestillmaintainingcontroloverconcurrentbehaviorinamanagedenvironment.
Thegenericworkcontextcontractstandardizesthetransactioncontextandthesecurity
context.
OutboundandInboundContracts
TheConnectorArchitecturedefinesthefollowingoutboundcontracts,system-levelcontractsbetweenanapplicationserverandanEISthatenableoutboundconnectivitytoanEIS.
■Theconnectionmanagementcontractsupportsconnectionpooling,atechniquethatenhancesapplicationperformanceandscalability.Connectionpoolingistransparenttotheapplication,whichsimplyobtainsaconnectiontotheEIS.
■ThetransactionmanagementcontractextendstheconnectionmanagementcontractandprovidessupportformanagementofbothlocalandXAtransactions.
AlocaltransactionislimitedinscopetoasingleEISsystem,andtheEISresourcemanager
itselfmanagessuchtransaction.AnXAtransactionorglobaltransactioncanspanmultipleresourcemanagers.Thisformoftransactionrequirestransactioncoordinationbyanexternaltransactionmanager,typicallybundledwithanapplicationserver.Atransactionmanagerusesatwo-phasecommitprotocoltomanageatransactionthatspansmultipleresourcemanagersorEISs,andusesone-phasecommitoptimizationifonlyoneresourcemanagerisparticipatinginanXAtransaction.
■Thesecuritymanagementcontractprovidesmechanismsforauthentication,authorization,andsecurecommunicationbetweenaJavaEEserverandanEIStoprotecttheinformationintheEIS.
AworksecuritymapmatchesEISidentitiestotheapplicationserverdomain’sidentities.
InboundcontractsaresystemcontractsbetweenaJavaEEserverandanEISthatenable
inboundconnectivityfromtheEIS:pluggabilitycontractsformessageprovidersandcontractsforimportingtransactions.ResourceAdaptersandContracts
Chapter45 • ResourcesandResourceAdapters 813
MetadataAnnotations
JavaEEConnectorArchitecture1.6introducesasetofannotationstominimizetheneedfor
deploymentdescriptors.
■The@Connector annotationcanbeusedbytheresourceadapterdevelopertospecifythat
theJavaBeanscomponentisaresourceadapterJavaBeanscomponent.Thisannotationisusedforprovidingmetadataaboutthecapabilitiesoftheresourceadapter.Optionally,youcanprovideaJavaBeanscomponentimplementingthe ResourceAdapter interface,asinthe
followingexample:
@Connector(
description = "Sample adapter using the JavaMail API ",
displayName = "InboundResourceAdapter ",
vendorName = "My Company, Inc. ",
eisType = "MAIL",
version = "1.0"
)public class ResourceAdapterImpl
implements ResourceAdapter, java.io.Serializable {
......
}
■The@ConnectionDefinition annotationdefinesasetofconnectioninterfacesandclasses
pertainingtoaparticularconnectiontype,asinthefollowingexample:
@ConnectionDefinition(
connectionFactory = JavaMailConnectionFactory.class,connectionFactoryImpl = JavaMailConnectionFactoryImpl.class,connection = JavaMailConnection.class,connectionImpl = JavaMailConnectionImpl.class
)public class ManagedConnectionFactoryImpl implements
ManagedConnectionFactory, Serializable {
...
}
■The@AdministeredObject annotationdesignatesaJavaBeanscomponentasan
administeredobject.
■The@Activation annotationcontainsconfigurationinformationpertainingtoinbound
connectivityfromanEISinstance,asinthefollowingexample:
@Activation(
messageListeners = {JavaMailMessageListener.class}
)public class ActivationSpecImpl
implements ActivationSpec, Serializable {
...@ConfigProperty()// serverName property valueprivate String serverName = "";
@ConfigProperty()
// userName property valueprivate String userName = "";MetadataAnnotations
TheJavaEE6Tutorial • January2013 814
@ConfigProperty()
// password property valueprivate String password = "";
@ConfigProperty()
// folderName property valueprivate String folderName = "INBOX ";
// protocol property value
@ConfigProperty(
description = "Normally imap or pop3 "
)private String protocol = "imap";
...
}
■The@ConfigProperty annotationcanbeusedonJavaBeanscomponentstoprovide
additionalconfigurationinformationthatmaybeusedbythedeployerandresourceadapterprovider.Theprecedingexamplecodeshowsseveral @ConfigProperty annotations.
Thespecificationallowsaresourceadaptertobedevelopedinmixed-modeform,thatisthe
abilityforaresourceadapterdevelopertousebothmetadataannotationsanddeploymentdescriptorsinapplications.Anapplicationassemblerordeployermayusethedeploymentdescriptortooverridethemetadataannotationsspecifiedbytheresourceadapterdeveloper.
Thedeploymentdescriptorforaresourceadapter,ifpresent,isnamed ra.xml.The
metadata-complete attributedefineswhetherthedeploymentdescriptorfortheresource
adaptermoduleiscompleteorwhethertheclassfilesavailabletothemoduleandpackagedwiththeresourceadapterneedtobeexaminedforannotationsthatspecifydeploymentinformation.
ForthecompletelistofannotationsandJavaBeanscomponentsintroducedintheJavaEE6
platform,seetheJavaEEConnectorarchitecture1.6specification.
CommonClientInterface
ThissectionexplainshowcomponentsusetheConnectorArchitectureCommonClientInterface(CCI)APIandaresourceadaptertoaccessdatafromanEIS.TheCCIAPIdefinesasetofinterfacesandclasseswhosemethodsallowaclienttoperformtypicaldataaccessoperations.TheCCIinterfacesandclassesareasfollows:
■ConnectionFactory :Providesanapplicationcomponentwitha Connection instancetoan
EIS.
■Connection :RepresentstheconnectiontotheunderlyingEIS.
■ConnectionSpec :Providesameansforanapplicationcomponenttopass
connection-request-specificpropertiestothe ConnectionFactory whenmakinga
connectionrequest.
■Interaction :ProvidesameansforanapplicationcomponenttoexecuteEISfunctions,
suchasdatabasestoredprocedures.CommonClientInterface
Chapter45 • ResourcesandResourceAdapters 815
■InteractionSpec :Holdspropertiespertainingtoanapplicationcomponent’sinteraction
withanEIS.
■Record:Thesuperinterfaceforthevariouskindsofrecordinstances.Recordinstancescan
beMappedRecord ,IndexedRecord ,orResultSet instances,allofwhichinheritfromthe
Recordinterface.
■RecordFactory :Providesanapplicationcomponentwitha Recordinstance.
■IndexedRecord :Representsanorderedcollectionof Recordinstancesbasedonthe
java.util.List interface.
AclientorapplicationcomponentthatusestheCCItointeractwithanunderlyingEISdoesso
inaprescribedmanner.ThecomponentmustestablishaconnectiontotheEIS’sresourcemanager,anditdoessousingthe ConnectionFactory .The Connection objectrepresentsthe
connectiontotheEISandisusedforsubsequentinteractionswiththeEIS.
ThecomponentperformsitsinteractionswiththeEIS,suchasaccessingdatafromaspecific
table,usingan Interaction object.TheapplicationcomponentdefinestheInteractionobject
byusingan InteractionSpec object.WhenitreadsdatafromtheEIS,suchasfromdatabase
tables,orwritestothosetables,theapplicationcomponentdoessobyusingaparticulartypeofRecordinstance:a MappedRecord ,anIndexedRecord ,ora ResultSet instance.
Note,too,thataclientapplicationthatreliesonaCCIresourceadapterisverymuchlikeany
otherJavaEEclientthatusesenterprisebeanmethods.
UsingResourceAdaptersWithContextsandDependency
InjectionfortheJavaEEPlatform(CDI)
ToenablearesourceadapterforCDI,providea beans.xml fileinthe META-INF directoryofthe
packagedarchiveoftheresourceadapter.Formoreinformationabout beans.xml ,see
“ConfiguringaCDIApplication”onpage525 .
Allclassesintheresourceadapterareavailableforinjection.Allclassesintheresourceadapter
canbeCDImanagedbeansexceptforthefollowingclasses:
■Resourceadapterbeans :Thesebeansareclassesthatareannotatedwiththe
javax.resource.spi.Connector annotationoraredeclaredascorrespondingelementsin
theresourceadapterdeploymentdescriptor, ra.xml.
■Managedconnectionfactorybeans :Thesebeansareclassesthatareannotatedwiththe
javax.resource.spi.ConnectorDefinition annotationorthe
javax.resource.spi.ConnectorDefinitions annotationoraredeclaredas
correspondingelementsin ra.xml.
■Activationspecificationbeans :Thesebeansareclassesthatareannotatedwiththe
javax.resource.spi.Activation annotationoraredeclaredascorrespondingelementsin
ra.xml.UsingResourceAdaptersWithContextsandDependencyInjectionfortheJavaEEPlatform(CDI)
TheJavaEE6Tutorial • January2013 816
■Administeredobjectbeans :Thesebeansareclassesthatareannotatedwiththe
javax.resource.spi.AdministeredObject annotationoraredeclaredascorresponding
elementsin ra.xml.
FurtherInformationaboutResources
Formoreinformationaboutresourcesandannotations,see
■JavaEE6PlatformSpecification(JSR316):
http://jcp.org/en/jsr/detail?id=316
■JavaEEConnectorarchitecture1.6specification:
http://jcp.org/en/jsr/detail?id=322
■EJB3.1specification:
http://jcp.org/en/jsr/detail?id=318
■CommonAnnotationsfortheJavaPlatform:
http://www.jcp.org/en/jsr/detail?id=250FurtherInformationaboutResources
Chapter45 • ResourcesandResourceAdapters 817
818
TheResourceAdapterExample
Themailconnector exampleshowshowyoucanusearesourceadapter,amessage-drivenbean
(MDB),andJavaServerFacestechnologytocreateanapplicationthatcansendemailmessagesandbrowseformessages.ThisexampleusesasampleimplementationoftheJavaMailAPIcalled mock-javamail .Theresourceadapterisdeployedseparately,whiletheMDBandtheweb
applicationarepackagedinanEARfile.
Thefollowingtopicsareaddressedhere:
■“TheResourceAdapter”onpage819
■“TheMessage-DrivenBean”onpage820
■“TheWebApplication”onpage820
■“Runningthe mailconnector Example”onpage820
TheResourceAdapter
Themailconnector resourceadapterenablestheMDBtoreceiveemailmessagesthatare
deliveredtoaspecificmailboxfolderonamailserver.Italsoprovidesconnectionfactoryobjectsclientscanusetoobtainconnectionobjectsthatallowthemtosynchronouslyqueryemailserversfornewmessagesinaspecificmailboxfolder.
Inthisexample,theMDBactivatestheresourceadapter,butitdoesnotreceiveemailmessages.
Instead,thisexampleallowsuserstosynchronouslyqueryanemailserverfornewmessages.
Thecomponentsoftheresourceadapterareasfollows:
■mailconnector.ra :Baseclassofthe mailconnector resourceadapter
■mailconnector.ra/inbound :Classesthatimplementtheinboundresourceadapter,which
supportsdeliveryofJavaMailmessagestoMDBs
■mailconnector.ra/outbound :Classesthatimplementtheoutboundresourceadapter,
whichsupportssynchronousqueriestoemailservers46CHAPTER 46
819
■mailconnector.api :InterfacesthatareimplementedbyMDBsassociatedwiththis
resourceadapterandbythe Connection andConnectionFactoryinterface sprovidedby
theoutboundresourceadapter
■mailconnector.share :JavaBeansclassthatimplementsthe ConnectionSpec interface,
allowingpropertiestobepassedtotheoutboundresourceadapter
Whentheresourceadapterisdeployed,itusestheWorkManagementfacilitiesavailableto
resourceadapterstostartathreadthatmonitorsmailboxfoldersfornewmessages.Thepollingthreadoftheresourceadaptermonitorsthemailboxfoldersevery30secondsfornewmessages.
TheMessage-DrivenBean
Themailconnector message-drivenbean, JavaMailMessageBean ,activatestheresource
adapter.WhenanMDBisdeployed,theapplicationserverpassestheMDB’sactivationconfigproperties(commentedoutinthiscase)tothe mailconnector resourceadapter,which
forwardsittothepollingthread.WhentheMDBisundeployed,theapplicationservernotifiestheresourceadapter,whichnotifiesthepollingthreadtostopmonitoringthemailfolderassociatedwiththeMDBbeingundeployed.
TheMDBispackagedinanEJBJARfile.
TheWebApplication
Thewebapplicationinthe mailconnector examplecontainsanHTMLpage( index.html ),
Faceletspages,andmanagedbeansthatletyoulogin,sendemailmessagestoamailboxfolder,andqueryfornewmessagesinamailfolderusingtheconnectioninterfacesprovidedbythemailconnector resourceadapter.
TheapplicationprotectstheFaceletspagesbyusingform-basedauthentication,specified
throughasecurityconstraintinthe web.xmlfile.
ThewebapplicationispackagedinaWARfile.
Runningthe mailconnector Example
YoucanuseeitherNetBeansIDEorAnttobuild,package,deploy,andrunthe mailconnector
example.
▼BeforeYouDeploythe mailconnector Example
Beforeyoudeploythe mailconnector application,performthefollowingsteps.TheMessage-DrivenBean
TheJavaEE6Tutorial • January2013 820
Download mock-javamail-1.9.jar from
http://download.java.net/maven/2/org/jvnet/mock-javamail/mock-javamail/1.9/ .
CopythisJARfiletothedirectory as-install /lib.
RestartGlassFishServer.OpentheGlassFishServerAdministrationConsoleinawebbrowserat
http://localhost:4848 .
IntheAdministrationConsole,expandtheConfigurationsnode,thenexpandthe
server-config node.
SelecttheSecuritynode.SelecttheDefaultPrincipaltoRoleMappingEnabledcheckbox.ClickSave.
▼ToBuild,Package,andDeploythe mailconnector
ExampleUsingNetBeansIDE
FromtheFilemenu,chooseOpenProject.
IntheOpenProjectdialog,navigateto:
tut-install /examples/connectors/mailconnector/
Selectthe mailconnector-ra folderandclickOpenProject.
IntheProjectstab,right-clickthe mailconnector-ra projectandselectBuild.
Thiscommandbuildstheresourceadapter.Italsoplacesidenticalfilesnamed
mailconnector.rar andmailconnector.jar inthe mailconnector directory.
IntheProjectstab,right-clickthe mailconnector-ra projectandselectDeploy.
FromtheFilemenu,chooseOpenProject.IntheOpenProjectdialog,navigateto:
tut-install /examples/connectors/mailconnector/
Selectthe mailconnector-ear folder.1
2
34
5
6
78
1
2
3
4
5
67
8Runningthe mailconnector Example
Chapter46 • TheResourceAdapterExample 821
SelecttheOpenRequiredProjectscheckboxandclickOpenProject.
IntheProjectstab,right-clickthe mailconnector-ear projectandselectBuild.
Inaterminalwindow,navigateto:
tut-install /examples/connectors/mailconnector/mailconnector-ear/
Enterthefollowingcommandtocreatetheresourcesandusers:
ant setup
InNetBeansIDE,intheProjectstab,right-clickthe mailconnector-ear projectandselect
Deploy.
▼ToBuild,Package,andDeploythe mailconnector
ExampleUsingAnt
Inaterminalwindow,goto:
tut-install /examples/connectors/mailconnector/mailconnector-ear/
Enterthefollowingcommand:
ant all
Thiscommandbuildsanddeploysthe mailconnector-ra RARfile,setsupusersandresources,
thenbuildsanddeploysthe mailconnector-ear EARfile.Italsoplacesidenticalfilesnamed
mailconnector.rar andmailconnector.jar inthe mailconnector directory.
▼ToRunthe mailconnector Example
Inawebbrowser,navigatetothefollowingURL:
http://localhost:8080/mailconnector-war/
Loginwithausernameofeither user1,user2,user3,oruser4.Thepasswordisthesameasthe
username.
Youcansendmessagesandbrowseforthemessagesyousent.Themessagesyousentare
available30secondsafteryousentthem.
Forexample,youcanloginas user1andsendamessageto user4,thenloginas user4and
queryformessages.Intheformforbrowsingmessages,verifythatthefieldsarecorrect,thenclickBrowse.
Viewtheserverlogtofollowtheflowoftheapplication.Mostclassesandmethodsspecify
logginginformationthatmakesthesequenceofeventseasytofollow.9
1011
1213
1
2
1
2Runningthe mailconnector Example
TheJavaEE6Tutorial • January2013 822
Beforeyouundeploytheapplication,inaterminalwindow,navigateto
tut-install /examples/connectors/mailconnector/mailconnector-ear/ andenterthe
followingcommandtoremovetheresourcesandusers:
ant takedown
Youcannotundeploytheresourceadapteruntilyourunthiscommand.
Whenyoucleantheapplication,youcanalsoremovethe mailconnector.rar and
mailconnector.jar filesfromthe mailconnector directory.
Removethe mock-javamail-1.9.jar filefromthe as-install /libdirectoryifyoumightrunany
otherapplicationsthatusetheJavaMailAPI(forexample, “The asyncExampleApplication”on
page508).3
NextStepsRunningthe mailconnector Example
Chapter46 • TheResourceAdapterExample 823
824
JavaMessageServiceConcepts
ThischapterprovidesanintroductiontotheJavaMessageService(JMS)API,aJavaAPIthat
allowsapplicationstocreate,send,receive,andreadmessagesusingreliable,asynchronous,looselycoupledcommunication.Itcoversthefollowingtopics:
■“OverviewoftheJMSAPI”onpage825
■“BasicJMSAPIConcepts”onpage828
■“TheJMSAPIProgrammingModel”onpage832
■“CreatingRobustJMSApplications”onpage842
■“UsingtheJMSAPIinJavaEEApplications”onpage851
■“FurtherInformationaboutJMS”onpage858
OverviewoftheJMSAPI
Thisoverviewdefinestheconceptofmessaging,describestheJMSAPIandwhenitcanbeused,andexplainshowtheJMSAPIworkswithintheJavaEEplatform.
WhatIsMessaging?
Messagingisamethodofcommunicationbetweensoftwarecomponentsorapplications.Amessagingsystemisapeer-to-peerfacility:Amessagingclientcansendmessagesto,andreceivemessagesfrom,anyotherclient.Eachclientconnectstoamessagingagentthatprovidesfacilitiesforcreating,sending,receiving,andreadingmessages.
Messagingenablesdistributedcommunicationthatis looselycoupled .Acomponentsendsa
messagetoadestination,andtherecipientcanretrievethemessagefromthedestination.However,thesenderandthereceiverdonothavetobeavailableatthesametimeinordertocommunicate.Infact,thesenderdoesnotneedtoknowanythingaboutthereceiver;nordoesthereceiverneedtoknowanythingaboutthesender.Thesenderandthereceiverneedtoknowonlywhichmessageformatandwhichdestinationtouse.Inthisrespect,messagingdiffersfrom47CHAPTER 47
825
tightlycoupledtechnologies,suchasRemoteMethodInvocation(RMI),whichrequirean
applicationtoknowaremoteapplication’smethods.
Messagingalsodiffersfromelectronicmail(email),whichisamethodofcommunication
betweenpeopleorbetweensoftwareapplicationsandpeople.Messagingisusedforcommunicationbetweensoftwareapplicationsorsoftwarecomponents.
WhatIstheJMSAPI?
TheJavaMessageServiceisaJavaAPIthatallowsapplicationstocreate,send,receive,andreadmessages.DesignedbySunandseveralpartnercompanies,theJMSAPIdefinesacommonsetofinterfacesandassociatedsemanticsthatallowprogramswrittenintheJavaprogramminglanguagetocommunicatewithothermessagingimplementations.
TheJMSAPIminimizesthesetofconceptsaprogrammermustlearninordertousemessaging
productsbutprovidesenoughfeaturestosupportsophisticatedmessagingapplications.ItalsostrivestomaximizetheportabilityofJMSapplicationsacrossJMSprovidersinthesamemessagingdomain.
TheJMSAPIenablescommunicationthatisnotonlylooselycoupledbutalso:
■Asynchronous :AJMSprovidercandelivermessagestoaclientastheyarrive;aclientdoes
nothavetorequestmessagesinordertoreceivethem.
■Reliable:TheJMSAPIcanensurethatamessageisdeliveredonceandonlyonce.Lower
levelsofreliabilityareavailableforapplicationsthatcanaffordtomissmessagesortoreceiveduplicatemessages.
ThecurrentversionoftheJMSspecificationisVersion1.1.Youcandownloadacopyofthe
specificationfromtheJMSwebsite:
http://www.oracle.com/technetwork/java/
index-jsp-142945.html .
WhenCanYouUsetheJMSAPI?
AnenterpriseapplicationproviderislikelytochooseamessagingAPIoveratightlycoupledAPI,suchasaremoteprocedurecall(RPC),underthefollowingcircumstances.
■Theproviderwantsthecomponentsnottodependoninformationaboutothercomponents’interfaces,socomponentscanbeeasilyreplaced.
■Theproviderwantstheapplicationtorunwhetherornotallcomponentsareupandrunningsimultaneously.
■Theapplicationbusinessmodelallowsacomponenttosendinformationtoanotherandtocontinuetooperatewithoutreceivinganimmediateresponse.OverviewoftheJMSAPI
TheJavaEE6Tutorial • January2013 826
Forexample,componentsofanenterpriseapplicationforanautomobilemanufacturercanuse
theJMSAPIinsituationslikethese:
■Theinventorycomponentcansendamessagetothefactorycomponentwhentheinventorylevelforaproductgoesbelowacertainlevelsothefactorycanmakemorecars.
■Thefactorycomponentcansendamessagetothepartscomponentssothefactorycanassemblethepartsitneeds.
■Thepartscomponentsinturncansendmessagestotheirowninventoryandordercomponentstoupdatetheirinventoriesandtoordernewpartsfromsuppliers.
■Boththefactoryandthepartscomponentscansendmessagestotheaccountingcomponenttoupdatebudgetnumbers.
■Thebusinesscanpublishupdatedcatalogitemstoitssalesforce.
Usingmessagingforthesetasksallowsthevariouscomponentstointeractwithoneanother
efficiently,withouttyingupnetworkorotherresources. Figure47–1 illustrateshowthissimple
examplemightwork.
ManufacturingisonlyoneexampleofhowanenterprisecanusetheJMSAPI.Retail
applications,financialservicesapplications,healthservicesapplications,andmanyotherscanmakeuseofmessaging.
HowDoestheJMSAPIWorkwiththeJavaEEPlatform?
WhentheJMSAPIwasintroducedin1998,itsmostimportantpurposewastoallowJavaapplicationstoaccessexistingmessaging-orientedmiddleware(MOM)systems,suchasMQSeriesfromIBM.Sincethattime,manyvendorshaveadoptedandimplementedtheJMSAPI,soaJMSproductcannowprovideacompletemessagingcapabilityforanenterprise.FIGURE47–1 MessaginginanEnterpriseApplication
Inventory
SalesFactory PartsParts 
Inventory
Parts Order
AccountingOverviewoftheJMSAPI
Chapter47 • JavaMessageServiceConcepts 827
Beginningwiththe1.3releaseoftheJavaEEplatform,theJMSAPIhasbeenanintegralpartof
theplatform,andapplicationdevelopershavebeenabletousemessagingwithJavaEEcomponents.
TheJMSAPIintheJavaEEplatformhasthefollowingfeatures.
■Applicationclients,EnterpriseJavaBeans(EJB)components,andwebcomponentscansend
orsynchronouslyreceiveaJMSmessage.ApplicationclientscaninadditionreceiveJMSmessagesasynchronously.(Applets,however,arenotrequiredtosupporttheJMSAPI.)
■Message-drivenbeans,whichareakindofenterprisebean,enabletheasynchronousconsumptionofmessages.AJMSprovidercanoptionallyimplementconcurrentprocessingofmessagesbymessage-drivenbeans.
■Messagesendandreceiveoperationscanparticipateindistributedtransactions,whichallowJMSoperationsanddatabaseaccessestotakeplacewithinasingletransaction.
TheJMSAPIenhancestheJavaEEplatformbysimplifyingenterprisedevelopment,allowing
looselycoupled,reliable,asynchronousinteractionsamongJavaEEcomponentsandlegacysystemscapableofmessaging.AdevelopercaneasilyaddnewbehaviortoaJavaEEapplicationthathasexistingbusinesseventsbyaddinganewmessage-drivenbeantooperateonspecificbusinessevents.TheJavaEEplatform,moreover,enhancestheJMSAPIbyprovidingsupportfordistributedtransactionsandallowingfortheconcurrentconsumptionofmessages.Formoreinformation,seetheEnterpriseJavaBeansspecification,v3.1.
TheJMSprovidercanbeintegratedwiththeapplicationserverusingtheJavaEEConnector
architecture.YouaccesstheJMSproviderthrougharesourceadapter.ThiscapabilityallowsvendorstocreateJMSprovidersthatcanbepluggedintomultipleapplicationservers,anditallowsapplicationserverstosupportmultipleJMSproviders.Formoreinformation,seetheJavaEEConnectorarchitecturespecification,v1.6.
BasicJMSAPIConcepts
ThissectionintroducesthemostbasicJMSAPIconcepts,theonesyoumustknowtogetstartedwritingsimpleapplicationclientsthatusetheJMSAPI.
ThenextsectionintroducestheJMSAPIprogrammingmodel.Latersectionscovermore
advancedconcepts,includingtheonesyouneedinordertowriteapplicationsthatusemessage-drivenbeans.BasicJMSAPIConcepts
TheJavaEE6Tutorial • January2013 828
JMSAPIArchitecture
AJMSapplicationiscomposedofthefollowingparts.
■AJMSprovider isamessagingsystemthatimplementstheJMSinterfacesandprovides
administrativeandcontrolfeatures.AnimplementationoftheJavaEEplatformincludesaJMSprovider.
■JMSclients aretheprogramsorcomponents,writtenintheJavaprogramminglanguage,
thatproduceandconsumemessages.AnyJavaEEapplicationcomponentcanactasaJMSclient.
■MessagesaretheobjectsthatcommunicateinformationbetweenJMSclients.
■Administeredobjects arepreconfiguredJMSobjectscreatedbyanadministratorfortheuse
ofclients.ThetwokindsofJMSadministeredobjectsaredestinationsandconnectionfactories,describedin
“JMSAdministeredObjects”onpage833 .
Figure47–2 illustratesthewaythesepartsinteract.Administrativetoolsallowyoutobind
destinationsandconnectionfactoriesintoaJNDInamespace.AJMSclientcanthenuseresourceinjectiontoaccesstheadministeredobjectsinthenamespaceandthenestablishalogicalconnectiontothesameobjectsthroughtheJMSprovider.
MessagingDomains
BeforetheJMSAPIexisted,mostmessagingproductssupportedeitherthepoint-to-pointorthepublish/subscribeapproachtomessaging.TheJMSspecificationprovidesaseparatedomainforeachapproachanddefinescomplianceforeachdomain.Astand-aloneJMSprovidercanimplementoneorbothdomains.AJavaEEprovidermustimplementbothdomains.FIGURE47–2 JMSAPIArchitecture
Logical 
ConnectionBindJNDI NamespaceAdministrative 
Tool
JMS Client JMS ProviderInject Resource
CF
 
DBasicJMSAPIConcepts
Chapter47 • JavaMessageServiceConcepts 829
Infact,mostimplementationsoftheJMSAPIsupportboththepoint-to-pointandthe
publish/subscribedomains,andsomeJMSclientscombinetheuseofbothdomainsinasingleapplication.Inthisway,theJMSAPIhasextendedthepowerandflexibilityofmessagingproducts.
TheJMSspecificationgoesonestepfurther:Itprovidescommoninterfacesthatenableyouto
usetheJMSAPIinawaythatisnotspecifictoeitherdomain.Thefollowingsubsectionsdescribethetwomessagingdomainsandtheuseofthecommoninterfaces.
Point-to-PointMessagingDomain
Apoint-to-point (PTP)productorapplicationisbuiltontheconceptofmessage queues,
senders,andreceivers.Eachmessageisaddressedtoaspecificqueue,andreceivingclientsextractmessagesfromthequeuesestablishedtoholdtheirmessages.Queuesretainallmessagessenttothemuntilthemessagesareconsumedorexpire.
PTPmessaging,illustratedin
Figure47–3 ,hasthefollowingcharacteristics:
■Eachmessagehasonlyoneconsumer.
■Asenderandareceiverofamessagehavenotimingdependencies.Thereceivercanfetch
themessagewhetherornotitwasrunningwhentheclientsentthemessage.
■Thereceiveracknowledgesthesuccessfulprocessingofamessage.
UsePTPmessagingwheneverymessageyousendmustbeprocessedsuccessfullybyone
consumer.
Publish/SubscribeMessagingDomain
Inapublish/subscribe (pub/sub)productorapplication,clientsaddressmessagestoa topic,
whichfunctionssomewhatlikeabulletinboard.Publishersandsubscribersaregenerallyanonymousandcandynamicallypublishorsubscribetothecontenthierarchy.ThesystemFIGURE47–3 Point-to-PointMessaging
Sends
Consumes
AcknowledgesClient 1 Client 2
 Msg
Msg
QueueBasicJMSAPIConcepts
TheJavaEE6Tutorial • January2013 830
takescareofdistributingthemessagesarrivingfromatopic’smultiplepublisherstoitsmultiple
subscribers.Topicsretainmessagesonlyaslongasittakestodistributethemtocurrentsubscribers.
Pub/submessaginghasthefollowingcharacteristics.
■Eachmessagecanhavemultipleconsumers.
■Publishersandsubscribershaveatimingdependency.Aclientthatsubscribestoatopiccan
consumeonlymessagespublishedaftertheclienthascreatedasubscription,andthesubscribermustcontinuetobeactiveinorderforittoconsumemessages.
TheJMSAPIrelaxesthistimingdependencytosomeextentbyallowingsubscriberstocreate
durablesubscriptions ,whichreceivemessagessentwhilethesubscribersarenotactive.Durable
subscriptionsprovidetheflexibilityandreliabilityofqueuesbutstillallowclientstosendmessagestomanyrecipients.Formoreinformationaboutdurablesubscriptions,see
“Creating
DurableSubscriptions”onpage847 .
Usepub/submessagingwheneachmessagecanbeprocessedbyanynumberofconsumers(or
none).Figure47–4 illustratespub/submessaging.
ProgrammingwiththeCommonInterfaces
Version1.1oftheJMSAPIallowsyoutousethesamecodetosendandreceivemessagesundereitherthePTPorthepub/subdomain.Thedestinationsyouuseremaindomain-specific,andthebehavioroftheapplicationwilldependinpartonwhetheryouareusingaqueueoratopic.However,thecodeitselfcanbecommontobothdomains,makingyourapplicationsflexibleandreusable.Thistutorialdescribesandillustratesthesecommoninterfaces.FIGURE47–4 Publish/SubscribeMessaging
TopicPublishes
Client 1
DeliversSubscribesDeliversSubscribes
Client 3
Msg
 MsgClient 2BasicJMSAPIConcepts
Chapter47 • JavaMessageServiceConcepts 831
MessageConsumption
Messagingproductsareinherentlyasynchronous:Thereisnofundamentaltimingdependency
betweentheproductionandtheconsumptionofamessage.However,theJMSspecificationusesthisterminamoreprecisesense.Messagescanbeconsumedineitheroftwoways:
■Synchronously :Asubscriberorareceiverexplicitlyfetchesthemessagefromthe
destinationbycallingthe receivemethod.The receivemethodcanblockuntilamessage
arrivesorcantimeoutifamessagedoesnotarrivewithinaspecifiedtimelimit.
■Asynchronously :Aclientcanregistera messagelistener withaconsumer.Amessage
listenerissimilartoaneventlistener.Wheneveramessagearrivesatthedestination,theJMSproviderdeliversthemessagebycallingthelistener’s onMessage method,whichactson
thecontentsofthemessage.
TheJMSAPIProgrammingModel
ThebasicbuildingblocksofaJMSapplicationare:
■Administeredobjects:connectionfactoriesanddestinations
■Connections
■Sessions
■Messageproducers
■Messageconsumers
■Messages
Figure47–5 showshowalltheseobjectsfittogetherinaJMSclientapplication.TheJMSAPIProgrammingModel
TheJavaEE6Tutorial • January2013 832
Thissectiondescribesalltheseobjectsbrieflyandprovidessamplecommandsandcode
snippetsthatshowhowtocreateandusetheobjects.ThelastsubsectionbrieflydescribesJMSAPIexceptionhandling.
Examplesthatshowhowtocombinealltheseobjectsinapplicationsappearinlatersections.
Formoredetail,seetheJMSAPIdocumentation,partoftheJavaEEAPIdocumentation.
JMSAdministeredObjects
TwopartsofaJMSapplication,destinationsandconnectionfactories,arebestmaintainedadministrativelyratherthanprogrammatically.ThetechnologyunderlyingtheseobjectsislikelytobeverydifferentfromoneimplementationoftheJMSAPItoanother.Therefore,themanagementoftheseobjectsbelongswithotheradministrativetasksthatvaryfromprovidertoprovider.
JMSclientsaccesstheseobjectsthroughinterfacesthatareportable,soaclientapplicationcan
runwithlittleornochangeonmorethanoneimplementationoftheJMSAPI.Ordinarily,anadministratorconfiguresadministeredobjectsinaJNDInamespace,andJMSclientsthenaccessthembyusingresourceinjection.FIGURE47–5 TheJMSAPIProgrammingModel
DestinationReceives
From
DestinationMessage 
ProducerMessage 
Consumer
Sends ToCreates
CreatesCreatesCreatesConnection
Factory
CreatesSessionConnection
Msg
TheJMSAPIProgrammingModel
Chapter47 • JavaMessageServiceConcepts 833
WithGlassFishServer,youcanusethe asadmin create-jms-resource commandorthe
AdministrationConsoletocreateJMSadministeredobjectsintheformofconnectorresources.Youcanalsospecifytheresourcesinafilenamed glassfish-resources.xml thatyoucan
bundlewithanapplication.
NetBeansIDEprovidesawizardthatallowsyoutocreateJMSresourcesforGlassFishServer.
See
“ToCreateJMSResourcesUsingNetBeansIDE”onpage863 fordetails.
JMSConnectionFactories
Aconnectionfactory istheobjectaclientusestocreateaconnectiontoaprovider.Aconnection
factoryencapsulatesasetofconnectionconfigurationparametersthathasbeendefinedbyanadministrator.Eachconnectionfactoryisaninstanceofthe ConnectionFactory ,
QueueConnectionFactory ,orTopicConnectionFactory interface.Tolearnhowtocreate
connectionfactories,see
“ToCreateJMSResourcesUsingNetBeansIDE”onpage863 .
AtthebeginningofaJMSclientprogram,youusuallyinjectaconnectionfactoryresourceinto
aConnectionFactory object.Forexample,thefollowingcodefragmentspecifiesaresource
whoseJNDInameis jms/ConnectionFactory andassignsittoa ConnectionFactory object:
@Resource(lookup = "jms/ConnectionFactory ")
private static ConnectionFactory connectionFactory;
InaJavaEEapplication,JMSadministeredobjectsarenormallyplacedinthe jmsnaming
subcontext.
JMSDestinations
Adestination istheobjectaclientusestospecifythetargetofmessagesitproducesandthe
sourceofmessagesitconsumes.InthePTPmessagingdomain,destinationsarecalledqueues.Inthepub/submessagingdomain,destinationsarecalledtopics.AJMSapplicationcanusemultiplequeuesortopics(orboth).Tolearnhowtocreatedestinationresources,see
“To
CreateJMSResourcesUsingNetBeansIDE”onpage863 .
TocreateadestinationusingtheGlassFishServer,youcreateaJMSdestinationresourcethat
specifiesaJNDInameforthedestination.
IntheGlassFishServerimplementationofJMS,eachdestinationresourcereferstoaphysical
destination.Youcancreateaphysicaldestinationexplicitly,butifyoudonot,theApplicationServercreatesitwhenitisneededanddeletesitwhenyoudeletethedestinationresource.
Inadditiontoinjectingaconnectionfactoryresourceintoaclientprogram,youusuallyinjecta
destinationresource.Unlikeconnectionfactories,destinationsarespecifictoonedomainortheother.Tocreateanapplicationthatallowsyoutousethesamecodeforbothtopicsandqueues,youassignthedestinationtoa Destination object.
Thefollowingcodespecifiestworesources,aqueueandatopic.Theresourcenamesare
mappedtodestinationresourcescreatedintheJNDInamespace.TheJMSAPIProgrammingModel
TheJavaEE6Tutorial • January2013 834
@Resource(lookup = "jms/Queue ")
private static Queue queue;
@Resource(lookup = "jms/Topic ")
private static Topic topic;
Withthecommoninterfaces,youcanmixormatchconnectionfactoriesanddestinations.That
is,inadditiontousingthe ConnectionFactory interface,youcaninjecta
QueueConnectionFactory resourceanduseitwitha Topic,andyoucaninjecta
TopicConnectionFactory resourceanduseitwitha Queue.Thebehavioroftheapplicationwill
dependonthekindofdestinationyouuseandnotonthekindofconnectionfactoryyouuse.
JMSConnections
Aconnection encapsulatesavirtualconnectionwithaJMSprovider.Forexample,aconnection
couldrepresentanopenTCP/IPsocketbetweenaclientandaproviderservicedaemon.Youuseaconnectiontocreateoneormoresessions.
Note–IntheJavaEEplatform,theabilitytocreatemultiplesessionsfromasingleconnectionis
limitedtoapplicationclients.Inwebandenterprisebeancomponents,aconnectioncancreatenomorethanonesession.
Connectionsimplementthe Connection interface.Whenyouhavea ConnectionFactory
object,youcanuseittocreatea Connection :
Connection connection = connectionFactory.createConnection();
Beforeanapplicationcompletes,youmustcloseanyconnectionsyouhavecreated.Failureto
closeaconnectioncancauseresourcesnottobereleasedbytheJMSprovider.Closingaconnectionalsoclosesitssessionsandtheirmessageproducersandmessageconsumers.
connection.close();
Beforeyourapplicationcanconsumemessages,youmustcalltheconnection’s startmethod;
fordetails,see “JMSMessageConsumers”onpage837 .Ifyouwanttostopmessagedelivery
temporarilywithoutclosingtheconnection,youcallthe stopmethod.
JMSSessions
Asessionisasingle-threadedcontextforproducingandconsumingmessages.Youusesessions
tocreatethefollowing:
■Messageproducers
■MessageconsumersTheJMSAPIProgrammingModel
Chapter47 • JavaMessageServiceConcepts 835
■Messages
■Queuebrowsers
■Temporaryqueuesandtopics(see “CreatingTemporaryDestinations”onpage846 )
Sessionsserializetheexecutionofmessagelisteners;fordetails,see “JMSMessageListeners”on
page838.
Asessionprovidesatransactionalcontextwithwhichtogroupasetofsendsandreceivesinto
anatomicunitofwork.Fordetails,see “UsingJMSAPILocalTransactions”onpage849 .
Sessionsimplementthe Sessioninterface.Afteryoucreatea Connection object,youuseitto
createa Session:
Session session = connection.createSession(false,
Session.AUTO_ACKNOWLEDGE);
Thefirstargumentmeansthesessionisnottransacted;thesecondmeansthesession
automaticallyacknowledgesmessageswhentheyhavebeenreceivedsuccessfully.(Formoreinformation,see
“ControllingMessageAcknowledgment”onpage843 .)
Tocreateatransactedsession,usethefollowingcode:
Session session = connection.createSession(true, 0);
Here,thefirstargumentmeansthesessionistransacted;thesecondindicatesthatmessage
acknowledgmentisnotspecifiedfortransactedsessions.Formoreinformationontransactions,see
“UsingJMSAPILocalTransactions”onpage849 .ForinformationaboutthewayJMS
transactionsworkinJavaEEapplications,see “UsingtheJMSAPIinJavaEEApplications”on
page851.
JMSMessageProducers
Amessageproducer isanobjectthatiscreatedbyasessionandusedforsendingmessagestoa
destination.Itimplementsthe MessageProducer interface.
Youusea Sessiontocreatea MessageProducer foradestination.Thefollowingexamplesshow
thatyoucancreateaproducerfora Destination object,a Queueobject,ora Topicobject.
MessageProducer producer = session.createProducer(dest);
MessageProducer producer = session.createProducer(queue);MessageProducer producer = session.createProducer(topic);
Youcancreateanunidentifiedproducerbyspecifying nullastheargumentto
createProducer .Withanunidentifiedproducer,youdonotspecifyadestinationuntilyou
sendamessage.
Afteryouhavecreatedamessageproducer,youcanuseittosendmessagesbyusingthe send
method:TheJMSAPIProgrammingModel
TheJavaEE6Tutorial • January2013 836
producer.send(message);
Youmustfirstcreatethemessages;see “JMSMessages”onpage839 .
Ifyouhavecreatedanunidentifiedproducer,useanoverloaded sendmethodthatspecifiesthe
destinationasthefirstparameter.Forexample:
MessageProducer anon_prod = session.createProducer(null);
anon_prod.send(dest, message);
JMSMessageConsumers
Amessageconsumer isanobjectthatiscreatedbyasessionandusedforreceivingmessagessent
toadestination.Itimplementsthe MessageConsumer interface.
AmessageconsumerallowsaJMSclienttoregisterinterestinadestinationwithaJMS
provider.TheJMSprovidermanagesthedeliveryofmessagesfromadestinationtotheregisteredconsumersofthedestination.
Forexample,youcouldusea Sessiontocreatea MessageConsumer fora Destination object,a
Queueobject,ora Topicobject:
MessageConsumer consumer = session.createConsumer(dest);
MessageConsumer consumer = session.createConsumer(queue);MessageConsumer consumer = session.createConsumer(topic);
Youusethe Session.createDurableSubscriber methodtocreateadurabletopicsubscriber.
Thismethodisvalidonlyifyouareusingatopic.Fordetails,see “CreatingDurable
Subscriptions”onpage847 .
Afteryouhavecreatedamessageconsumeritbecomesactive,andyoucanuseittoreceive
messages.Youcanusethe closemethodfora MessageConsumer tomakethemessage
consumerinactive.Messagedeliverydoesnotbeginuntilyoustarttheconnectionyoucreatedbycallingits startmethod.(Rememberalwaystocallthe startmethod;forgettingtostartthe
connectionisoneofthemostcommonJMSprogrammingerrors.)TheJMSAPIProgrammingModel
Chapter47 • JavaMessageServiceConcepts 837
Youusethe receivemethodtoconsumeamessagesynchronously.Youcanusethismethodat
anytimeafteryoucallthe startmethod:
connection.start();
Messag e m = consumer.receive();
connection.start();Messag e m = consumer.receive(1000); // time out after a second
Toconsumeamessageasynchronously,youuseamessagelistener,asdescribedinthenext
section.
JMSMessageListeners
Amessagelistenerisanobjectthatactsasanasynchronouseventhandlerformessages.Thisobjectimplementsthe MessageListener interface,whichcontainsonemethod, onMessage .In
theonMessage method,youdefinetheactionstobetakenwhenamessagearrives.
YouregisterthemessagelistenerwithaspecificMessageConsumerbyusingthe
setMessageListener method.Forexample,ifyoudefineaclassnamed Listener that
implementsthe MessageListener interface,youcanregisterthemessagelistenerasfollows:
Listener myListener = new Listener();
consumer.setMessageListener(myListener);
Note–IntheJavaEEplatform,a MessageListener canbeusedonlyinanapplicationclient,not
inawebcomponentorenterprisebean.
Afteryouregisterthemessagelistener,youcallthe startmethodonthe Connection tobegin
messagedelivery.(Ifyoucall startbeforeyouregisterthemessagelistener,youarelikelyto
missmessages.)
Whenmessagedeliverybegins,theJMSproviderautomaticallycallsthemessagelistener’s
onMessage methodwheneveramessageisdelivered.The onMessage methodtakesone
argumentoftype Message,whichyourimplementationofthemethodcancasttoanyofthe
othermessagetypes(see “MessageBodies”onpage840 ).
Amessagelistenerisnotspecifictoaparticulardestinationtype.Thesamelistenercanobtain
messagesfromeitheraqueueoratopic,dependingonthetypeofdestinationforwhichthemessageconsumerwascreated.Amessagelistenerdoes,however,usuallyexpectaspecificmessagetypeandformat.
Your onMessage methodshouldhandleallexceptions.Itmustnotthrowcheckedexceptions,
andthrowinga RuntimeException isconsideredaprogrammingerror.
Thesessionusedtocreatethemessageconsumerserializestheexecutionofallmessagelisteners
registeredwiththesession.Atanytime,onlyoneofthesession’smessagelistenersisrunning.TheJMSAPIProgrammingModel
TheJavaEE6Tutorial • January2013 838
IntheJavaEEplatform,amessage-drivenbeanisaspecialkindofmessagelistener.Fordetails,
see“UsingMessage-DrivenBeanstoReceiveMessagesAsynchronously”onpage853 .
JMSMessageSelectors
Ifyourmessagingapplicationneedstofilterthemessagesitreceives,youcanuseaJMSAPImessageselector,whichallowsamessageconsumertospecifythemessagesthatinterestit.MessageselectorsassigntheworkoffilteringmessagestotheJMSproviderratherthantotheapplication.Foranexampleofanapplicationthatusesamessageselector,see
“AnApplication
ThatUsestheJMSAPIwithaSessionBean”onpage897 .
Amessageselectorisa Stringthatcontainsanexpression.Thesyntaxoftheexpressionis
basedonasubsetoftheSQL92conditionalexpressionsyntax.Themessageselectorintheexampleselectsanymessagethathasa NewsType propertythatissettothevalue ’Sports’ or
’Opinion’ :
NewsType = ’Sports ’OR NewsType = ’Opinion ’
ThecreateConsumer andcreateDurableSubscriber methodsallowyoutospecifyamessage
selectorasanargumentwhenyoucreateamessageconsumer.
Themessageconsumerthenreceivesonlymessageswhoseheadersandpropertiesmatchthe
selector.(See “MessageHeaders”onpage839 ,and“MessageProperties”onpage840 .)A
messageselectorcannotselectmessagesonthebasisofthecontentofthemessagebody.
JMSMessages
TheultimatepurposeofaJMSapplicationistoproduceandconsumemessagesthatcanthenbeusedbyothersoftwareapplications.JMSmessageshaveabasicformatthatissimplebuthighlyflexible,allowingyoutocreatemessagesthatmatchformatsusedbynon-JMSapplicationsonheterogeneousplatforms.
AJMSmessagecanhavethreeparts:aheader,properties,andabody.Onlytheheaderis
required.Thefollowingsectionsdescribetheseparts.
Forcompletedocumentationofmessageheaders,properties,andbodies,seethe
documentationofthe MessageinterfaceintheAPIdocumentation.
MessageHeaders
AJMSmessageheadercontainsanumberofpredefinedfieldsthatcontainvaluesusedbyboth
clientsandproviderstoidentifyandroutemessages. Table47–1 liststheJMSmessageheader
fieldsandindicateshowtheirvaluesareset.Forexample,everymessagehasauniqueidentifier,whichisrepresentedintheheaderfield JMSMessageID .Thevalueofanotherheaderfield,
JMSDestination ,representsthequeueorthetopictowhichthemessageissent.Otherfields
includeatimestampandaprioritylevel.TheJMSAPIProgrammingModel
Chapter47 • JavaMessageServiceConcepts 839
Eachheaderfieldhasassociatedsetterandgettermethods,whicharedocumentedinthe
descriptionofthe Messageinterface.Someheaderfieldsareintendedtobesetbyaclient,but
manyaresetautomaticallybythe sendorthe publishmethod,whichoverridesanyclient-set
values.
TABLE47–1 HowJMSMessageHeaderFieldValuesAreSet
HeaderField SetBy
JMSDestination send orpublishmethod
JMSDeliveryMode send orpublishmethod
JMSExpiration send orpublishmethod
JMSPriority send orpublishmethod
JMSMessageID send orpublishmethod
JMSTimestamp send orpublishmethod
JMSCorrelationID Client
JMSReplyTo Client
JMSType Client
JMSRedelivered JMSprovider
MessageProperties
Youcancreateandsetpropertiesformessagesifyouneedvaluesinadditiontothoseprovided
bytheheaderfields.Youcanusepropertiestoprovidecompatibilitywithothermessagingsystems,oryoucanusethemtocreatemessageselectors(see
“JMSMessageSelectors”on
page839).Foranexampleofsettingapropertytobeusedasamessageselector,see “An
ApplicationThatUsestheJMSAPIwithaSessionBean”onpage897 .
TheJMSAPIprovidessomepredefinedpropertynamesthataprovidercansupport.Theuseof
thesepredefinedpropertiesorofuser-definedpropertiesisoptional.
MessageBodies
TheJMSAPIdefinesfivemessagebodyformats,alsocalledmessagetypes,whichallowyoutosendandreceivedatainmanydifferentformsandwhichprovidecompatibilitywithexistingmessagingformats.
Table47–2 describesthesemessagetypes.
TABLE47–2 JMSMessageTypes
MessageType BodyContains
TextMessage Ajava.lang.String object(forexample,thecontentsofanXMLfile).TheJMSAPIProgrammingModel
TheJavaEE6Tutorial • January2013 840
TABLE47–2 JMSMessageTypes (Continued)
MessageType BodyContains
MapMessage Asetofname-valuepairs,withnamesas Stringobjectsandvaluesasprimitive
typesintheJavaprogramminglanguage.Theentriescanbeaccessedsequentiallybyenumeratororrandomlybyname.Theorderoftheentriesisundefined.
BytesMessage Astreamofuninterpretedbytes.Thismessagetypeisforliterallyencodingabody
tomatchanexistingmessageformat.
StreamMessage AstreamofprimitivevaluesintheJavaprogramminglanguage,filledandread
sequentially.
ObjectMessage ASerializable objectintheJavaprogramminglanguage.
Message Nothing.Composedofheaderfieldsandpropertiesonly.Thismessagetypeis
usefulwhenamessagebodyisnotrequired.
TheJMSAPIprovidesmethodsforcreatingmessagesofeachtypeandforfillingintheir
contents.Forexample,tocreateandsenda TextMessage ,youmightusethefollowing
statements:
TextMessage message = session.createTextMessage();
message.setText(msg_text); // msg_text is a Stringproducer.send(message);
Attheconsumingend,amessagearrivesasageneric Messageobjectandmustbecasttothe
appropriatemessagetype.Youcanuseoneormoregettermethodstoextractthemessagecontents.Thefollowingcodefragmentusesthe getTextmethod:
Messag e m = consumer.receive();
if (m instanceof TextMessage) {
TextMessage message = (TextMessage) m;System.out.println( "Reading message: "+ message.getText());
} else {
// Handle error
}
JMSQueueBrowsers
Messagessenttoaqueueremaininthequeueuntilthemessageconsumerforthatqueue
consumesthem.TheJMSAPIprovidesa QueueBrowser objectthatallowsyoutobrowsethe
messagesinthequeueanddisplaytheheadervaluesforeachmessage.TocreateaQueueBrowser object,usethe Session.createBrowser method.Forexample:
QueueBrowser browser = session.createBrowser(queue);
See“ASimpleExampleofBrowsingMessagesinaQueue”onpage875 foranexampleofusinga
QueueBrowser object.TheJMSAPIProgrammingModel
Chapter47 • JavaMessageServiceConcepts 841
ThecreateBrowser methodallowsyoutospecifyamessageselectorasasecondargument
whenyoucreatea QueueBrowser .Forinformationonmessageselectors,see “JMSMessage
Selectors”onpage839 .
TheJMSAPIprovidesnomechanismforbrowsingatopic.Messagesusuallydisappearfroma
topicassoonastheyappear:Iftherearenomessageconsumerstoconsumethem,theJMSproviderremovesthem.Althoughdurablesubscriptionsallowmessagestoremainonatopicwhilethemessageconsumerisnotactive,nofacilityexistsforexaminingthem.
JMSExceptionHandling
TherootclassforexceptionsthrownbyJMSAPImethodsis JMSException .Catching
JMSException providesagenericwayofhandlingallexceptionsrelatedtotheJMSAPI.
TheJMSException classincludesthefollowingsubclasses,describedintheAPIdocumentation:
■IllegalStateException
■InvalidClientIDException
■InvalidDestinationException
■InvalidSelectorException
■JMSSecurityException
■MessageEOFException
■MessageFormatException
■MessageNotReadableException
■MessageNotWriteableException
■ResourceAllocationException
■TransactionInProgressException
■TransactionRolledBackException
Alltheexamplesinthetutorialcatchandhandle JMSException whenitisappropriatetodoso.
CreatingRobustJMSApplications
ThissectionexplainshowtousefeaturesoftheJMSAPItoachievethelevelofreliabilityand
performanceyourapplicationrequires.ManypeoplechoosetoimplementJMSapplicationsbecausetheycannottoleratedroppedorduplicatemessagesandbecausetheyrequirethateverymessagebereceivedonceandonlyonce.TheJMSAPIprovidesthisfunctionality.
Themostreliablewaytoproduceamessageistosenda PERSISTENT messagewithina
transaction.JMSmessagesare PERSISTENT bydefault.A transaction isaunitofworkintowhich
youcangroupaseriesofoperations,suchasmessagesendsandreceives,sothattheoperationseitherallsucceedorallfail.Fordetails,see
“SpecifyingMessagePersistence”onpage845 and
“UsingJMSAPILocalTransactions”onpage849 .CreatingRobustJMSApplications
TheJavaEE6Tutorial • January2013 842
Themostreliablewaytoconsumeamessageistodosowithinatransaction,eitherfroma
queueorfromadurablesubscriptiontoatopic.Fordetails,see “CreatingTemporary
Destinations”onpage846 ,“CreatingDurableSubscriptions”onpage847 ,and“UsingJMSAPI
LocalTransactions”onpage849 .
Forotherapplications,alowerlevelofreliabilitycanreduceoverheadandimprove
performance.Youcansendmessageswithvaryingprioritylevels(see “SettingMessagePriority
Levels”onpage845 )andyoucansetthemtoexpireafteracertainlengthoftime(see “Allowing
MessagestoExpire”onpage846 ).
TheJMSAPIprovidesseveralwaystoachievevariouskindsanddegreesofreliability.This
sectiondividesthemintotwocategories,basicandadvanced.
ThefollowingsectionsdescribethesefeaturesastheyapplytoJMSclients.Someofthefeatures
workdifferentlyinJavaEEapplications;inthesecases,thedifferencesarenotedhereandareexplainedindetailin
“UsingtheJMSAPIinJavaEEApplications”onpage851 .
UsingBasicReliabilityMechanisms
Thebasicmechanismsforachievingoraffectingreliablemessagedeliveryareasfollows:
■Controllingmessageacknowledgment :Youcanspecifyvariouslevelsofcontrolover
messageacknowledgment.
■Specifyingmessagepersistence :Youcanspecifythatmessagesarepersistent,meaningthey
mustnotbelostintheeventofaproviderfailure.
■Settingmessageprioritylevels :Youcansetvariousprioritylevelsformessages,whichcan
affecttheorderinwhichthemessagesaredelivered.
■Allowingmessagestoexpire :Youcanspecifyanexpirationtimeformessagessotheywill
notbedeliverediftheyareobsolete.
■Creatingtemporarydestinations :Youcancreatetemporarydestinationsthatlastonlyfor
thedurationoftheconnectioninwhichtheyarecreated.
ControllingMessageAcknowledgment
UntilaJMSmessagehasbeenacknowledged,itisnotconsideredtobesuccessfullyconsumed.Thesuccessfulconsumptionofamessageordinarilytakesplaceinthreestages.
1. Theclientreceivesthemessage.
2. Theclientprocessesthemessage.3. Themessageisacknowledged.AcknowledgmentisinitiatedeitherbytheJMSprovideror
bytheclient,dependingonthesessionacknowledgmentmode.
Intransactedsessions(see
“UsingJMSAPILocalTransactions”onpage849 ),acknowledgment
happensautomaticallywhenatransactioniscommitted.Ifatransactionisrolledback,all
consumedmessagesareredelivered.CreatingRobustJMSApplications
Chapter47 • JavaMessageServiceConcepts 843
Innontransactedsessions,whenandhowamessageisacknowledgeddependonthevalue
specifiedasthesecondargumentofthe createSession method.Thethreepossibleargument
valuesareasfollows:
■Session.AUTO_ACKNOWLEDGE :Thesessionautomaticallyacknowledgesaclient’sreceiptofa
messageeitherwhentheclienthassuccessfullyreturnedfromacallto receiveorwhenthe
MessageListener ithascalledtoprocessthemessagereturnssuccessfully.
Asynchronousreceiveinan AUTO_ACKNOWLEDGE sessionistheoneexceptiontotherulethat
messageconsumptionisathree-stageprocessasdescribedearlier.Inthiscase,thereceiptandacknowledgmenttakeplaceinonestep,followedbytheprocessingofthemessage.
■Session.CLIENT_ACKNOWLEDGE :Aclientacknowledgesamessagebycallingthemessage’s
acknowledge method.Inthismode,acknowledgmenttakesplaceonthesessionlevel:
Acknowledgingaconsumedmessageautomaticallyacknowledgesthereceiptof all
messagesthathavebeenconsumedbyitssession.Forexample,ifamessageconsumerconsumestenmessagesandthenacknowledgesthefifthmessagedelivered,alltenmessagesareacknowledged.
Note–IntheJavaEEplatform,a CLIENT_ACKNOWLEDGE sessioncanbeusedonlyinan
applicationclient,notinawebcomponentorenterprisebean.
■Session.DUPS_OK_ACKNOWLEDGE :Thisoptioninstructsthesessiontolazilyacknowledgethe
deliveryofmessages.ThisislikelytoresultinthedeliveryofsomeduplicatemessagesiftheJMSproviderfails,soitshouldbeusedonlybyconsumersthatcantolerateduplicatemessages.(IftheJMSproviderredeliversamessage,itmustsetthevalueoftheJMSRedelivered messageheaderto true.)Thisoptioncanreducesessionoverheadby
minimizingtheworkthesessiondoestopreventduplicates.
Ifmessageshavebeenreceivedfromaqueuebutnotacknowledgedwhenasessionterminates,
theJMSproviderretainsthemandredeliversthemwhenaconsumernextaccessesthequeue.TheprovideralsoretainsunacknowledgedmessagesforaterminatedsessionthathasadurableTopicSubscriber .(See
“CreatingDurableSubscriptions”onpage847 .)Unacknowledged
messagesforanondurable TopicSubscriber aredroppedwhenthesessionisclosed.
Ifyouuseaqueueoradurablesubscription,youcanusethe Session.recover methodtostopa
nontransactedsessionandrestartitwithitsfirstunacknowledgedmessage.Ineffect,thesession’sseriesofdeliveredmessagesisresettothepointafteritslastacknowledgedmessage.Themessagesitnowdeliversmaybedifferentfromthosethatwereoriginallydelivered,ifmessageshaveexpiredorifhigher-prioritymessageshavearrived.ForanondurableTopicSubscriber ,theprovidermaydropunacknowledgedmessageswhenitssessionis
recovered.
Thesampleprogramin
“AMessageAcknowledgmentExample”onpage887 demonstratestwo
waystoensurethatamessagewillnotbeacknowledgeduntilprocessingofthemessageiscomplete.CreatingRobustJMSApplications
TheJavaEE6Tutorial • January2013 844
SpecifyingMessagePersistence
TheJMSAPIsupportstwodeliverymodesspecifyingwhethermessagesarelostiftheJMS
providerfails.Thesedeliverymodesarefieldsofthe DeliveryMode interface.
■ThePERSISTENT deliverymode,thedefault,instructstheJMSprovidertotakeextracareto
ensurethatamessageisnotlostintransitincaseofaJMSproviderfailure.Amessagesentwiththisdeliverymodeisloggedtostablestoragewhenitissent.
■TheNON_PERSISTENT deliverymodedoesnotrequiretheJMSprovidertostorethemessage
orotherwiseguaranteethatitisnotlostiftheproviderfails.
Youcanspecifythedeliverymodeineitheroftwoways.
■Youcanusethe setDeliveryMode methodofthe MessageProducer interfacetosetthe
deliverymodeforallmessagessentbythatproducer.Forexample,thefollowingcallsetsthedeliverymodeto NON_PERSISTENT foraproducer:
producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
■Youcanusethelongformofthe sendorthe publishmethodtosetthedeliverymodefora
specificmessage.Thesecondargumentsetsthedeliverymode.Forexample,thefollowingsendcallsetsthedeliverymodefor messagetoNON_PERSISTENT :
producer.send(message, DeliveryMode.NON_PERSISTENT, 3, 10000);
Thethirdandfourthargumentssettheprioritylevelandexpirationtime,whichare
describedinthenexttwosubsections.
Ifyoudonotspecifyadeliverymode,thedefaultis PERSISTENT .Usingthe NON_PERSISTENT
deliverymodemayimproveperformanceandreducestorageoverhead,butyoushoulduseitonlyifyourapplicationcanaffordtomissmessages.
SettingMessagePriorityLevels
YoucanusemessageprioritylevelstoinstructtheJMSprovidertodeliverurgentmessagesfirst.Youcansettheprioritylevelineitheroftwoways.
■Youcanusethe setPriority methodofthe MessageProducer interfacetosetthepriority
levelforallmessagessentbythatproducer.Forexample,thefollowingcallsetsaprioritylevelof7foraproducer:
producer.setPriority(7);
■Youcanusethelongformofthe sendorthe publishmethodtosettheprioritylevelfora
specificmessage.Thethirdargumentsetstheprioritylevel.Forexample,thefollowing send
callsetstheprioritylevelfor messageto3:
producer.send(message, DeliveryMode.NON_PERSISTENT, 3, 10000);
Thetenlevelsofpriorityrangefrom0(lowest)to9(highest).Ifyoudonotspecifyapriority
level,thedefaultlevelis4.AJMSprovidertriestodeliverhigher-prioritymessagesbeforelower-priorityonesbutdoesnothavetodelivermessagesinexactorderofpriority.CreatingRobustJMSApplications
Chapter47 • JavaMessageServiceConcepts 845
AllowingMessagestoExpire
Bydefault,amessageneverexpires.Ifamessagewillbecomeobsoleteafteracertainperiod,
however,youmaywanttosetanexpirationtime.Youcandothisineitheroftwoways.
■Youcanusethe setTimeToLive methodofthe MessageProducer interfacetosetadefault
expirationtimeforallmessagessentbythatproducer.Forexample,thefollowingcallsetsa
timetoliveofoneminuteforaproducer:
producer.setTimeToLive(60000);
■Youcanusethelongformofthe sendorthe publishmethodtosetanexpirationtimefora
specificmessage.Thefourthargumentsetstheexpirationtimeinmilliseconds.Forexample,thefollowing sendcallsetsatimetoliveof10seconds:
producer.send(message, DeliveryMode.NON_PERSISTENT, 3, 10000);
Ifthespecified timeToLive valueis 0,themessageneverexpires.
Whenthemessageissent,thespecified timeToLive isaddedtothecurrenttimetogivethe
expirationtime.Anymessagenotdeliveredbeforethespecifiedexpirationtimeisdestroyed.Thedestructionofobsoletemessagesconservesstorageandcomputingresources.
CreatingTemporaryDestinations
Normally,youcreateJMSdestinations(queuesandtopics)administrativelyratherthanprogrammatically.YourJMSproviderincludesatooltocreateandremovedestinations,anditiscommonfordestinationstobelong-lasting.
TheJMSAPIalsoenablesyoutocreatedestinations( TemporaryQueue andTemporaryTopic
objects)thatlastonlyforthedurationoftheconnectioninwhichtheyarecreated.Youcreatethesedestinationsdynamicallyusingthe Session.createTemporaryQueue andthe
Session.createTemporaryTopic methods.
Theonlymessageconsumersthatcanconsumefromatemporarydestinationarethosecreated
bythesameconnectionthatcreatedthedestination.Anymessageproducercansendtothetemporarydestination.Ifyouclosetheconnectiontowhichatemporarydestinationbelongs,thedestinationisclosedanditscontentsarelost.
Youcanusetemporarydestinationstoimplementasimplerequest/replymechanism.Ifyou
createatemporarydestinationandspecifyitasthevalueofthe JMSReplyTo messageheader
fieldwhenyousendamessage,thentheconsumerofthemessagecanusethevalueoftheJMSReplyTo fieldasthedestinationtowhichitsendsareply.Theconsumercanalsoreference
theoriginalrequestbysettingthe JMSCorrelationID headerfieldofthereplymessagetothe
valueofthe JMSMessageID headerfieldoftherequest.Forexample,an onMessage methodcan
createasessionsothatitcansendareplytothemessageitreceives.Itcanusecodesuchasthefollowing:CreatingRobustJMSApplications
TheJavaEE6Tutorial • January2013 846
producer = session.createProducer(msg.getJMSReplyTo());
replyMsg = session.createTextMessage( "Consumer "+
"processed message: "+ msg.getText());
replyMsg.setJMSCorrelationID(msg.getJMSMessageID());
producer.send(replyMsg);
Formoreexamples,see Chapter48,“JavaMessageServiceExamples.”
UsingAdvancedReliabilityMechanisms
Themoreadvancedmechanismsforachievingreliablemessagedeliveryarethefollowing:
■Creatingdurablesubscriptions :Youcancreatedurabletopicsubscriptions,whichreceive
messagespublishedwhilethesubscriberisnotactive.Durablesubscriptionsofferthereliabilityofqueuestothepublish/subscribemessagedomain.
■Usinglocaltransactions :Youcanuselocaltransactions,whichallowyoutogroupaseries
ofsendsandreceivesintoanatomicunitofwork.Transactionsarerolledbackiftheyfailatanytime.
CreatingDurableSubscriptions
Toensurethatapub/subapplicationreceivesallpublishedmessages,use PERSISTENT delivery
modeforthepublishersanddurablesubscriptionsforthesubscribers.
TheSession.createConsumer methodcreatesanondurablesubscriberifatopicisspecifiedas
thedestination.Anondurablesubscribercanreceiveonlymessagesthatarepublishedwhileitisactive.
Atthecostofhigheroverhead,youcanusethe Session.createDurableSubscriber methodto
createadurablesubscriber.Adurablesubscriptioncanhaveonlyoneactivesubscriberatatime.
Adurablesubscriberregistersadurablesubscriptionbyspecifyingauniqueidentitythatis
retainedbytheJMSprovider.Subsequentsubscriberobjectsthathavethesameidentityresumethesubscriptioninthestateinwhichitwasleftbytheprecedingsubscriber.Ifadurablesubscriptionhasnoactivesubscriber,theJMSproviderretainsthesubscription’smessagesuntiltheyarereceivedbythesubscriptionoruntiltheyexpire.
Youestablishtheuniqueidentityofadurablesubscriberbysettingthefollowing:
■AclientIDfortheconnection
■Atopicandasubscriptionnameforthesubscriber
YousettheclientIDadministrativelyforaclient-specificconnectionfactoryusingeitherthe
commandlineortheAdministrationConsole.
Afterusingthisconnectionfactorytocreatetheconnectionandthesession,youcallthe
createDurableSubscriber methodwithtwoarguments:thetopicandastringthatspecifies
thenameofthesubscription:CreatingRobustJMSApplications
Chapter47 • JavaMessageServiceConcepts 847
String subName = "MySub ";
MessageConsumer topicSubscriber =
session.createDurableSubscriber(myTopic, subName);
Thesubscriberbecomesactiveafteryoustartthe Connection orTopicConnection .Later,you
mightclosethesubscriber:
topicSubscriber.close();
TheJMSproviderstoresthemessagessentorpublishedtothetopic,asitwouldstoremessagessenttoaqueue.Iftheprogramoranotherapplicationcalls createDurableSubscriber using
thesameconnectionfactoryanditsclientID,thesametopic,andthesamesubscriptionname,thenthesubscriptionisreactivatedandtheJMSproviderdeliversanymessagesthatwerepublishedwhilethesubscriberwasinactive.
Todeleteadurablesubscription,firstclosethesubscriber,thenusethe unsubscribe method
withthesubscriptionnameastheargument:
topicSubscriber.close();
session.unsubscribe( "MySub ");
Theunsubscribe methoddeletesthestatetheprovidermaintainsforthesubscriber.
Figure47–6 andFigure47–7 showthedifferencebetweenanondurableandadurable
subscriber.Withanordinary,nondurablesubscriber,thesubscriberandthesubscriptionbeginandendatthesamepointandare,ineffect,identical.Whenasubscriberisclosed,thesubscriptionalsoends.Here, createstandsforacallto Session.createConsumer witha Topic
argument,and closestandsforacallto MessageConsumer.close .Anymessagespublishedto
thetopicbetweenthetimeofthefirst closeandthetimeofthesecond createarenot
consumedbythesubscriber.In
Figure47–6 ,thesubscriberconsumesmessagesM1,M2,M5,
andM6,butmessagesM3andM4arelost.
Withadurablesubscriber,thesubscribercanbeclosedandre-created,butthesubscription
continuestoexistandtoholdmessagesuntiltheapplicationcallsthe unsubscribe method.InFIGURE47–6 NondurableSubscribersandSubscriptions
Subscription
Subscriber
create closeSubscription
Subscriber
create closeM1 M2 M3 M4 M5 M6CreatingRobustJMSApplications
TheJavaEE6Tutorial • January2013 848
Figure47–7 ,createstandsforacallto Session.createDurableSubscriber ,closestandsfor
acallto MessageConsumer.close ,and unsubscribe standsforacallto Session.unsubscribe .
Messagespublishedwhilethesubscriberisclosedarereceivedwhenthesubscriberiscreatedagain,soeventhoughmessagesM2,M4,andM5arrivewhilethesubscriberisclosed,theyarenotlost.
See
“AMessageAcknowledgmentExample”onpage887 ,“ADurableSubscriptionExample”on
page889,and“AnApplicationThatUsestheJMSAPIwithaSessionBean”onpage897 for
examplesofJavaEEapplicationsthatusedurablesubscriptions.
UsingJMSAPILocalTransactions
Youcangroupaseriesofoperationsintoanatomicunitofworkcalleda transaction .Ifanyone
oftheoperationsfails,thetransactioncanberolledback,andtheoperationscanbeattemptedagainfromthebeginning.Ifalltheoperationssucceed,thetransactioncanbecommitted.
InaJMSclient,youcanuselocaltransactionstogroupmessagesendsandreceives.TheJMS
APISessioninterfaceprovides commitandrollback methodsyoucanuseinaJMSclient.A
transactioncommitmeansthatallproducedmessagesaresentandallconsumedmessagesareacknowledged.Atransactionrollbackmeansthatallproducedmessagesaredestroyedandallconsumedmessagesarerecoveredandredeliveredunlesstheyhaveexpired(see
“Allowing
MessagestoExpire”onpage846 ).
Atransactedsessionisalwaysinvolvedinatransaction.Assoonasthe commitorthe rollback
methodiscalled,onetransactionendsandanothertransactionbegins.Closingatransactedsessionrollsbackitstransactioninprogress,includinganypendingsendsandreceives.FIGURE47–7 ADurableSubscriberandSubscription
Subscriber Subscribercreate
create close create close create closeSubscriberM1
unsubscribeM2 M3 M4M5 M6CreatingRobustJMSApplications
Chapter47 • JavaMessageServiceConcepts 849
InanEnterpriseJavaBeanscomponent,youcannotusethe Session.commit and
Session.rollback methods.Instead,youusedistributedtransactions,describedin “Usingthe
JMSAPIinJavaEEApplications”onpage851 .
YoucancombineseveralsendsandreceivesinasingleJMSAPIlocaltransaction.Ifyoudoso,
youneedtobecarefulabouttheorderoftheoperations.Youwillhavenoproblemsifthe
transactionconsistsofallsendsorallreceives,orifthereceivesallcomebeforethesends.However,ifyoutrytousearequest/replymechanism,inwhichyousendamessageandthentrytoreceiveareplytothatmessageinthesametransaction,theprogramwillhang,becausethesendcannottakeplaceuntilthetransactioniscommitted.Thefollowingcodefragmentillustratestheproblem:
// Don ’t do this!
outMsg.setJMSReplyTo(replyQueue);producer.send(outQueue, outMsg);consumer = session.createConsumer(replyQueue);inMsg = consumer.receive();session.commit();
Becauseamessagesentduringatransactionisnotactuallysentuntilthetransactionis
committed,thetransactioncannotcontainanyreceivesthatdependonthatmessage’shavingbeensent.
Inaddition,theproductionandtheconsumptionofamessagecannotbothbepartofthesame
transaction.ThereasonisthatthetransactionstakeplacebetweentheclientsandtheJMSprovider,whichintervenesbetweentheproductionandtheconsumptionofthemessage.
Figure47–8 illustratesthisinteraction.
ThesendingofoneormoremessagestooneormoredestinationsbyClient1canformasingle
transaction,becauseitformsasinglesetofinteractionswiththeJMSproviderusingasinglesession.Similarly,thereceivingofoneormoremessagesfromoneormoredestinationsbyClient2alsoformsasingletransactionusingasinglesession.Butbecausethetwoclientshavenodirectinteractionandareusingtwodifferentsessions,notransactionscantakeplacebetweenthem.FIGURE47–8 UsingJMSAPILocalTransactions
Transaction 1 Transaction 2Sends Consumes
Client 1 Client 2
QueueCreatingRobustJMSApplications
TheJavaEE6Tutorial • January2013 850
Anotherwayofputtingthisisthattheactofproducingand/orconsumingmessagesinasession
canbetransactional,buttheactofproducingandconsumingaspecificmessageacrossdifferentsessionscannotbetransactional.
Thisisthefundamentaldifferencebetweenmessagingandsynchronizedprocessing.Insteadof
tightlycouplingthesendingandreceivingofdata,messageproducersandconsumersuseanalternativeapproachtoreliability,builtonaJMSprovider’sabilitytosupplyaonce-and-only-oncemessagedeliveryguarantee.
Whenyoucreateasession,youspecifywhetheritistransacted.Thefirstargumenttothe
createSession methodisa booleanvalue.Avalueof truemeansthesessionistransacted;a
valueof falsemeansitisnottransacted.Thesecondargumenttothismethodisthe
acknowledgmentmode,whichisrelevantonlytonontransactedsessions(see
“Controlling
MessageAcknowledgment”onpage843 ).Ifthesessionistransacted,thesecondargumentis
ignored,soitisagoodideatospecify 0tomakethemeaningofyourcodeclear.Forexample:
session = connection.createSession(true, 0);
Thecommitandthe rollback methodsforlocaltransactionsareassociatedwiththesession.
Youcancombinequeueandtopicoperationsinasingletransactionifyouusethesamesessiontoperformtheoperations.Forexample,youcanusethesamesessiontoreceiveamessagefromaqueueandsendamessagetoatopicinthesametransaction.
Youcanpassaclientprogram’ssessiontoamessagelistener’sconstructorfunctionanduseitto
createamessageproducer.Inthisway,youcanusethesamesessionforreceivesandsendsinasynchronousmessageconsumers.
“ALocalTransactionExample”onpage891 providesanexampleofusingJMSAPIlocal
transactions.
UsingtheJMSAPIinJavaEEApplications
ThissectiondescribeshowusingtheJMSAPIinenterprisebeanapplicationsorwebapplicationsdiffersfromusingitinapplicationclients.
AgeneralruleintheJavaEEplatformspecificationappliestoallJavaEEcomponentsthatuse
theJMSAPIwithinEJBorwebcontainers:ApplicationcomponentsinthewebandEJBcontainersmustnotattempttocreatemorethanoneactive(notclosed) Sessionobjectper
connection.
Thisruledoesnotapplytoapplicationclients.Theapplicationclientcontainersupportsthe
creationofmultiplesessionsforeachconnection.UsingtheJMSAPIinJavaEEApplications
Chapter47 • JavaMessageServiceConcepts 851
Using @Resource AnnotationsinEnterpriseBeanor
WebComponents
Whenyouusethe @Resource annotationinanapplicationclientcomponent,younormally
declaretheJMSresourcestatic:
@Resource(lookup = "jms/ConnectionFactory ")
private static ConnectionFactory connectionFactory;
@Resource(lookup = "jms/Queue ")
private static Queue queue;
However,whenyouusethisannotationinasessionbean,amessage-drivenbean,oraweb
component,do notdeclaretheresourcestatic:
@Resource(lookup = "jms/ConnectionFactory ")
private ConnectionFactory connectionFactory;
@Resource(lookup = "jms/Topic ")
private Topic topic;
Ifyoudeclaretheresourcestaticinthesecomponents,runtimeerrorswillresult.
UsingSessionBeanstoProduceandtoSynchronously
ReceiveMessages
Anapplicationthatproducesmessagesorsynchronouslyreceivesthemcanuseasessionbean
toperformtheseoperations.Theexamplein “AnApplicationThatUsestheJMSAPIwitha
SessionBean”onpage897 usesastatelesssessionbeantopublishmessagestoatopic.
Becauseablockingsynchronousreceivetiesupserverresources,itisnotagoodprogramming
practicetousesucha receivecallinanenterprisebean.Instead,useatimedsynchronous
receive,oruseamessage-drivenbeantoreceivemessagesasynchronously.Fordetailsaboutblockingandtimedsynchronousreceives,see
“WritingtheClientsfortheSynchronousReceive
Example”onpage860 .
UsingtheJMSAPIinanenterprisebeanisinmanywayssimilartousingitinanapplication
client.Themaindifferencesaretheareasofresourcemanagementandtransactions.UsingtheJMSAPIinJavaEEApplications
TheJavaEE6Tutorial • January2013 852
ManagingJMSResourcesinSessionBeans
TheJMSAPIresourcesareaJMSAPIconnectionandaJMSAPIsession.Ingeneral,itis
importanttoreleaseJMSresourceswhentheyarenolongerbeingused.Herearesomeusefulpracticestofollow:
■IfyouwishtomaintainaJMSAPIresourceonlyforthelifespanofabusinessmethod,itisagoodideatoclosetheresourceina finallyblockwithinthemethod.
■IfyouwouldliketomaintainaJMSAPIresourceforthelifespanofanenterprisebean
instance,itisagoodideatousea @PostConstruct callbackmethodtocreatetheresource
andtousea @PreDestroy callbackmethodtoclosetheresource.Ifyouuseastatefulsession
beanandyouwishtomaintaintheJMSAPIresourceinacachedstate,youmustclosetheresourceina @PrePassivate callbackmethodandsetitsvalueto null,andyoumustcreate
itagainina @PostActivate callbackmethod.
ManagingTransactionsinSessionBeans
Insteadofusinglocaltransactions,youusecontainer-managedtransactionsforbeanmethods
thatperformsendsorreceives,allowingtheEJBcontainertohandletransactiondemarcation.Becausecontainer-managedtransactionsarethedefault,youdonothavetouseanannotationtospecifythem.
Youcanusebean-managedtransactionsandthe javax.transaction.UserTransaction
interface’stransactiondemarcationmethods,butyoushoulddosoonlyifyourapplicationhasspecialrequirementsandyouareanexpertinusingtransactions.Usually,container-managedtransactionsproducethemostefficientandcorrectbehavior.Thistutorialdoesnotprovideanyexamplesofbean-managedtransactions.
UsingMessage-DrivenBeanstoReceiveMessages
Asynchronously
Thesections “WhatIsaMessage-DrivenBean?”onpage439 and“HowDoestheJMSAPI
WorkwiththeJavaEEPlatform?”onpage827 describehowtheJavaEEplatformsupportsa
specialkindofenterprisebean,themessage-drivenbean,whichallowsJavaEEapplicationsto
processJMSmessagesasynchronously.Sessionbeansallowyoutosendmessagesandtoreceivethemsynchronouslybutnotasynchronously.
Amessage-drivenbeanisamessagelistenerthatcanreliablyconsumemessagesfromaqueue
oradurablesubscription.ThemessagescanbesentbyanyJavaEEcomponent(fromanapplicationclient,anotherenterprisebean,orawebcomponent)orfromanapplicationorasystemthatdoesnotuseJavaEEtechnology.UsingtheJMSAPIinJavaEEApplications
Chapter47 • JavaMessageServiceConcepts 853
Likeamessagelistenerinanapplicationclient,amessage-drivenbeancontainsan onMessage
methodthatiscalledautomaticallywhenamessagearrives.Likeamessagelistener,amessage-drivenbeanclasscanimplementhelpermethodsinvokedbythe onMessage methodto
aidinmessageprocessing.
Amessage-drivenbean,however,differsfromanapplicationclient’smessagelistenerinthe
followingways:
■CertainsetuptasksareperformedbytheEJBcontainer.
■Thebeanclassusesthe @MessageDriven annotationtospecifypropertiesforthebeanorthe
connectionfactory,suchasadestinationtype,adurablesubscription,amessageselector,oranacknowledgmentmode.Theexamplesin
Chapter48,“JavaMessageServiceExamples,”
showhowtheJMSresourceadapterworksintheGlassFishServer.
TheEJBcontainerautomaticallyperformsseveralsetuptasksthatastand-aloneclientmust
perform:
■Creatingamessageconsumertoreceivethemessages.Insteadofcreatingamessageconsumerinyoursourcecode,youassociatethemessage-drivenbeanwithadestination
andaconnectionfactoryatdeploymenttime.Ifyouwanttospecifyadurablesubscriptionoruseamessageselector,youdothisatdeploymenttimealso.
■Registeringthemessagelistener.Youmustnotcall setMessageListener .
■Specifyingamessageacknowledgmentmode.Thedefaultmode, AUTO_ACKNOWLEDGE ,isused
unlessitisoverriddenbyapropertysetting.
IfJMSisintegratedwiththeapplicationserverusingaresourceadapter,theJMSresource
adapterhandlesthesetasksfortheEJBcontainer.
Yourmessage-drivenbeanclassmustimplementthe javax.jms.MessageListener interface
andthe onMessage method.
Itmayimplementa @PostConstruct callbackmethodtocreateaconnection,anda
@PreDestroy callbackmethodtoclosetheconnection.Typically,itimplementsthesemethods
ifitproducesmessagesorperformssynchronousreceivesfromanotherdestination.
Thebeanclasscommonlyinjectsa MessageDrivenContext resource,whichprovidessome
additionalmethodsyoucanusefortransactionmanagement.
Themaindifferencebetweenamessage-drivenbeanandasessionbeanisthatamessage-driven
beanhasnolocalorremoteinterface.Instead,ithasonlyabeanclass.
Amessage-drivenbeanissimilarinsomewaystoastatelesssessionbean:Itsinstancesare
relativelyshort-livedandretainnostateforaspecificclient.Theinstancevariablesofthemessage-drivenbeaninstancecancontainsomestateacrossthehandlingofclientmessages:forexample,aJMSAPIconnection,anopendatabaseconnection,oranobjectreferencetoanenterprisebeanobject.UsingtheJMSAPIinJavaEEApplications
TheJavaEE6Tutorial • January2013 854
Likeastatelesssessionbean,amessage-drivenbeancanhavemanyinterchangeableinstances
runningatthesametime.Thecontainercanpooltheseinstancestoallowstreamsofmessagestobeprocessedconcurrently.Thecontainerattemptstodelivermessagesinchronologicalorderwhenthatwouldnotimpairtheconcurrencyofmessageprocessing,butnoguaranteesaremadeastotheexactorderinwhichmessagesaredeliveredtotheinstancesofthemessage-drivenbeanclass.Becauseconcurrencycanaffecttheorderinwhichmessagesaredelivered,youshouldwriteyourapplicationstohandlemessagesthatarriveoutofsequence.
Forexample,yourapplicationcouldmanageconversationsbyusingapplication-levelsequence
numbers.Anapplication-levelconversationcontrolmechanismwithapersistentconversationstatecouldcachelatermessagesuntilearliermessageshavebeenprocessed.
Anotherwaytoensureorderistohaveeachmessageormessagegroupinaconversation
requireaconfirmationmessagethatthesenderblocksonreceiptof.Thisforcestheresponsibilityfororderbackontothesenderandmoretightlycouplessenderstotheprogressofmessage-drivenbeans.
Tocreateanewinstanceofamessage-drivenbean,thecontainerdoesthefollowing:
■Instantiatesthebean
■Performsanyrequiredresourceinjection
■Callsthe @PostConstruct callbackmethod,ifitexists
Toremoveaninstanceofamessage-drivenbean,thecontainercallsthe @PreDestroy callback
method.
Figure47–9 showsthelifecycleofamessage-drivenbean.
FIGURE47–9 LifecycleofaMessage-DrivenBean
Does Not Exist Ready
PreDestroy callback, if anyonMessageDependency injection, if any
PostConstruct callback, if any1
2UsingtheJMSAPIinJavaEEApplications
Chapter47 • JavaMessageServiceConcepts 855
ManagingDistributedTransactions
JMSclientapplicationsuseJMSAPIlocaltransactions(describedin “UsingJMSAPILocal
Transactions”onpage849 ),whichallowthegroupingofsendsandreceiveswithinaspecific
JMSsession.JavaEEapplicationscommonlyusedistributedtransactionstoensuretheintegrityofaccessestoexternalresources.Forexample,distributedtransactionsallowmultipleapplicationstoperformatomicupdatesonthesamedatabase,andtheyallowasingleapplicationtoperformatomicupdatesonmultipledatabases.
InaJavaEEapplicationthatusestheJMSAPI,youcanusetransactionstocombinemessage
sendsorreceiveswithdatabaseupdatesandotherresourcemanageroperations.Youcanaccessresourcesfrommultipleapplicationcomponentswithinasingletransaction.Forexample,aservletcanstartatransaction,accessmultipledatabases,invokeanenterprisebeanthatsendsaJMSmessage,invokeanotherenterprisebeanthatmodifiesanEISsystemusingtheConnectorarchitecture,andfinallycommitthetransaction.Yourapplicationcannot,however,bothsendaJMSmessageandreceiveareplytoitwithinthesametransaction;therestrictiondescribedin
“UsingJMSAPILocalTransactions”onpage849 stillapplies.
DistributedtransactionswithintheEJBcontainercanbeeitheroftwokinds:
■Container-managedtransactions :TheEJBcontainercontrolstheintegrityofyour
transactionswithoutyourhavingtocall commitorrollback .Container-managed
transactionsarerecommendedforJavaEEapplicationsthatusetheJMSAPI.Youcanspecifyappropriatetransactionattributesforyourenterprisebeanmethods.
Usethe Required transactionattribute(thedefault)toensurethatamethodisalwayspart
ofatransaction.Ifatransactionisinprogresswhenthemethodiscalled,themethodwillbepartofthattransaction;ifnot,anewtransactionwillbestartedbeforethemethodiscalledandwillbecommittedwhenthemethodreturns.
■Bean-managedtransactions :Youcanusetheseinconjunctionwiththe
javax.transaction.UserTransaction interface,whichprovidesitsown commitand
rollback methodsyoucanusetodelimittransactionboundaries.Bean-managed
transactionsarerecommendedonlyforthosewhoareexperiencedinprogrammingtransactions.
Youcanuseeithercontainer-managedtransactionsorbean-managedtransactionswith
message-drivenbeans.Toensurethatallmessagesarereceivedandhandledwithinthecontextofatransaction,usecontainer-managedtransactionsandusethe Required transaction
attribute(thedefault)forthe onMessage method.Thismeansthatifthereisnotransactionin
progress,anewtransactionwillbestartedbeforethemethodiscalledandwillbecommittedwhenthemethodreturns.UsingtheJMSAPIinJavaEEApplications
TheJavaEE6Tutorial • January2013 856
Whenyouusecontainer-managedtransactions,youcancallthefollowing
MessageDrivenContext methods:
■setRollbackOnly :Usethismethodforerrorhandling.Ifanexceptionoccurs,
setRollbackOnly marksthecurrenttransactionsothattheonlypossibleoutcomeofthe
transactionisarollback.
■getRollbackOnly :Usethismethodtotestwhetherthecurrenttransactionhasbeenmarked
forrollback.
Ifyouusebean-managedtransactions,thedeliveryofamessagetothe onMessage methodtakes
placeoutsidethedistributedtransactioncontext.ThetransactionbeginswhenyoucalltheUserTransaction.begin methodwithinthe onMessage method,anditendswhenyoucall
UserTransaction.commit orUserTransaction.rollback .Anycalltothe
Connection.createSession methodmusttakeplacewithinthetransaction.Ifyoucall
UserTransaction.rollback ,themessageisnotredelivered,whereascalling setRollbackOnly
forcontainer-managedtransactionsdoescauseamessagetoberedelivered.
NeithertheJMSAPIspecificationnortheEnterpriseJavaBeansspecification(availablefrom
http://jcp.org/en/jsr/detail?id=318 )specifieshowtohandlecallstoJMSAPImethods
outsidetransactionboundaries.TheEnterpriseJavaBeansspecificationdoesstatethattheEJBcontainerisresponsibleforacknowledgingamessagethatissuccessfullyprocessedbytheonMessage methodofamessage-drivenbeanthatusesbean-managedtransactions.Using
bean-managedtransactionsallowsyoutoprocessthemessagebyusingmorethanonetransactionortohavesomepartsofthemessageprocessingtakeplaceoutsideatransactioncontext.Inmostcases,however,container-managedtransactionsprovidegreaterreliabilityandarethereforepreferable.
Whenyoucreateasessioninanenterprisebean,thecontainerignorestheargumentsyou
specify,becauseitmanagesalltransactionalpropertiesforenterprisebeans.Itisstillagoodideatospecifyargumentsof trueand0tothe createSession methodtomakethissituationclear:
session = connection.createSession(true, 0);
Whenyouusecontainer-managedtransactions,younormallyusethe Required transaction
attribute(thedefault)foryourenterprisebean’sbusinessmethods.
Youdonotspecifyamessageacknowledgmentmodewhenyoucreateamessage-drivenbean
thatusescontainer-managedtransactions.Thecontaineracknowledgesthemessageautomaticallywhenitcommitsthetransaction.
Ifamessage-drivenbeanusesbean-managedtransactions,themessagereceiptcannotbepart
ofthebean-managedtransaction,sothecontaineracknowledgesthemessageoutsidethetransaction.
Ifthe onMessage methodthrowsa RuntimeException ,thecontainerdoesnotacknowledge
processingthemessage.Inthatcase,theJMSproviderwillredelivertheunacknowledgedmessageinthefuture.UsingtheJMSAPIinJavaEEApplications
Chapter47 • JavaMessageServiceConcepts 857
UsingtheJMSAPIwithApplicationClientsandWeb
Components
AnapplicationclientinaJavaEEapplicationcanusetheJMSAPIinmuchthesamewaythata
stand-aloneclientprogramdoes.Itcanproducemessages,anditcanconsumemessagesbyusingeithersynchronousreceivesormessagelisteners.See
Chapter25,“AMessage-Driven
BeanExample,” foranexampleofanapplicationclientthatproducesmessages.Foranexample
ofusinganapplicationclienttoproduceandtoconsumemessages,see “AnApplication
ExampleThatDeploysaMessage-DrivenBeanonTwoServers”onpage916 .
TheJavaEEplatformspecificationdoesnotimposestrictconstraintsonhowwebcomponents
shouldusetheJMSAPI.IntheGlassFishServer,awebcomponentcansendmessagesandconsumethemsynchronouslybutcannotconsumethemasynchronously.
Becauseablockingsynchronousreceivetiesupserverresources,itisnotagoodprogramming
practicetousesucha receivecallinawebcomponent.Instead,useatimedsynchronous
receive.Fordetailsaboutblockingandtimedsynchronousreceives,see
“WritingtheClientsfor
theSynchronousReceiveExample”onpage860 .
FurtherInformationaboutJMS
FormoreinformationaboutJMS,see:
■JavaMessageServicewebsite:
http://www.oracle.com/technetwork/java/index-jsp-142945.html
■JavaMessageServicespecification,version1.1,availablefrom:
http://www.oracle.com/technetwork/java/docs-136352.htmlFurtherInformationaboutJMS
TheJavaEE6Tutorial • January2013 858
JavaMessageServiceExamples
ThischapterprovidesexamplesthatshowhowtousetheJMSAPIinvariouskindsofJavaEE
applications.Itcoversthefollowingtopics:
■“WritingSimpleJMSApplications”onpage860
■“WritingRobustJMSApplications”onpage886
■“AnApplicationThatUsestheJMSAPIwithaSessionBean”onpage897
■“AnApplicationThatUsestheJMSAPIwithanEntity”onpage902
■“AnApplicationExampleThatConsumesMessagesfromaRemoteServer”onpage910
■“AnApplicationExampleThatDeploysaMessage-DrivenBeanonTwoServers”onpage916
Theexamplesareinthe tut-install /examples/jms/ directory.
Thestepstobuildandruneachexampleareasfollows:
1. UseNetBeansIDEorAnttocompileandpackagetheexample.
2. UseNetBeansIDEorAnttodeploytheexampleandcreateresourcesforit.3. UseNetBeansIDE,the appclient command,orAnttoruntheclient.
Eachexamplehasa build.xml filethatreferstofilesinthe tut-install /examples/bp-project/
directory.
Eachexamplehasa setup/glassfish-resources.xml filethatisusedtocreateresourcesfor
theexample.
See
Chapter25,“AMessage-DrivenBeanExample,” forasimplerexampleofaJavaEE
applicationthatusestheJMSAPI.48CHAPTER 48
859
WritingSimpleJMSApplications
Thissectionshowshowtocreate,package,andrunsimpleJMSclientsthatarepackagedas
applicationclientsanddeployedtoaJavaEEserver.TheclientsdemonstratethebasictasksaJMSapplicationmustperform:
■Creatingaconnectionandasession
■Creatingmessageproducersandconsumers
■Sendingandreceivingmessages
InaJavaEEapplication,someofthesetasksareperformed,inwholeorinpart,bythe
container.Ifyoulearnaboutthesetasks,youwillhaveagoodbasisforunderstandinghowaJMSapplicationworksontheJavaEEplatform.
Eachexampleusestwoclients:onethatsendsmessagesandonethatreceivesthem.Youcan
runtheclientsinNetBeansIDEorintwoterminalwindows.
WhenyouwriteaJMSclienttoruninanenterprisebeanapplication,youusemanyofthesame
methodsinmuchthesamesequenceasforanapplicationclient.However,therearesomesignificantdifferences.
“UsingtheJMSAPIinJavaEEApplications”onpage851 describesthese
differences,andthischapterprovidesexamplesthatillustratethem.
Theexamplesforthissectionareinthe tut-install /examples/jms/simple/ directory,underthe
followingfoursubdirectories:
producer
synchconsumerasynchconsumermessagebrowser
ASimpleExampleofSynchronousMessageReceives
Thissectiondescribesthesendingandreceivingclientsinanexamplethatusesthe receive
methodtoconsumemessagessynchronously.Thissectionthenexplainshowtocompile,package,andruntheclientsusingtheGlassFishServer.
Thefollowingsubsectionsdescribethestepsincreatingandrunningtheexample.
WritingtheClientsfortheSynchronousReceiveExample
Thesendingclient, producer/src/java/Producer.java ,performsthefollowingsteps:
1. Injectsresourcesforaconnectionfactory,queue,andtopic:
@Resource(lookup = "jms/ConnectionFactory ")
private static ConnectionFactory connectionFactory;@Resource(lookup = "jms/Queue ")private static Queue queue;
@Resource(lookup = "jms/Topic ")private static Topic topic;WritingSimpleJMSApplications
TheJavaEE6Tutorial • January2013 860
2. Retrievesandverifiescommand-lineargumentsthatspecifythedestinationtypeandthe
numberofarguments:
final int NUM_MSGS;
String destType = args[0];System.out.println( "Destination type is "+ destType);
i f(!( destType.equals( "queue ") || destType.equals( "topic "))){
System.err.println( "Argument must be \”queue\” or "+"\”topic\” ");
System.exit(1);
}if (args.length == 2){
NUM_MSGS = (new Integer(args[1])).intValue();
}else {
NUM_MSGS = 1;
}
3. Assignseitherthequeueorthetopictoadestinationobject,basedonthespecified
destinationtype:
Destination dest = null;
try {
if (destType.equals( "queue ")) {
dest = (Destination) queue;
} else {
dest = (Destination) topic;
}
}catch (Exception e) {
System.err.println( "Error setting destination: "+ e.toString());
e.printStackTrace();System.exit(1);
}
4. Createsa Connection anda Session:
Connection connection = connectionFactory.createConnection();
Session session = connection.createSession(
false,Session.AUTO_ACKNOWLEDGE);
5. Createsa MessageProducer anda TextMessage :
MessageProducer producer = session.createProducer(dest);
TextMessage message = session.createTextMessage();
6. Sendsoneormoremessagestothedestination:
f o r( i n ti=0 ;i< NUM_MSGS; i++) {
message.setText( "This is message "+( i+1 )+ "from producer ");
System.out.println( "Sending message: "+ message.getText());
producer.send(message);
}
7. Sendsanemptycontrolmessagetoindicatetheendofthemessagestream:
producer.send(session.createMessage());
Sendinganemptymessageofnospecifiedtypeisaconvenientwaytoindicatetothe
consumerthatthefinalmessagehasarrived.WritingSimpleJMSApplications
Chapter48 • JavaMessageServiceExamples 861
8. Closestheconnectionina finallyblock,automaticallyclosingthesessionand
MessageProducer :
} finally {
if (connection != null) {
try { connection.close(); }catch (JMSException e) { }
}
}
Thereceivingclient, synchconsumer/src/java/SynchConsumer.java ,performsthefollowing
steps:
1. Injectsresourcesforaconnectionfactory,queue,andtopic.
2. Assignseitherthequeueorthetopictoadestinationobject,basedonthespecified
destinationtype.
3. Createsa Connection anda Session.
4. Createsa MessageConsumer :
consumer = session.createConsumer(dest);
5. Startstheconnection,causingmessagedeliverytobegin:
connection.start();
6. Receivesthemessagessenttothedestinationuntiltheend-of-message-streamcontrol
messageisreceived:
while (true) {
Messag e m = consumer.receive(1);
if (m != null) {
if (m instanceof TextMessage) {
message = (TextMessage) m;System.out.println( "Reading message: "+ message.getText());
} else {
break;
}
}
}
Becausethecontrolmessageisnota TextMessage ,thereceivingclientterminatesthe while
loopandstopsreceivingmessagesafterthecontrolmessagearrives.
7. Closestheconnectionina finallyblock,automaticallyclosingthesessionand
MessageConsumer .
Thereceivemethodcanbeusedinseveralwaystoperformasynchronousreceive.Ifyou
specifynoargumentsoranargumentof 0,themethodblocksindefinitelyuntilamessage
arrives:
Messag e m = consumer.receive();
Messag e m = consumer.receive(0);WritingSimpleJMSApplications
TheJavaEE6Tutorial • January2013 862
Forasimpleclient,thismaynotmatter.Butifyoudonotwantyourapplicationtoconsume
systemresourcesunnecessarily,useatimedsynchronousreceive.Dooneofthefollowing:
■Callthe receivemethodwithatimeoutargumentgreaterthan 0:
Messag e m = consumer.receive(1); // 1 millisecond
■Callthe receiveNoWait method,whichreceivesamessageonlyifoneisavailable:
Messag e m = consumer.receiveNoWait();
TheSynchConsumer clientusesanindefinite whilelooptoreceivemessages,calling receive
withatimeoutargument.Calling receiveNoWait wouldhavethesameeffect.
StartingtheJMSProvider
WhenyouusetheGlassFishServer,yourJMSprovideristheGlassFishServer.Starttheserver
asdescribedin “StartingandStoppingtheGlassFishServer”onpage73 .
JMSAdministeredObjectsfortheSynchronousReceiveExample
ThisexampleusesthefollowingJMSadministeredobjects:
■Aconnectionfactory
■Twodestinationresources:atopicandaqueue
NetBeansIDEandtheAnttasksfortheJMSexamplescreateneededJMSresourceswhenyou
deploytheapplications,usingafilenamed setup/glassfish-resources.xml .Thisfileismost
easilycreatedusingNetBeansIDE,althoughyoucancreateitbyhand.
Youcanalsousethe asadmin create-jms-resource commandtocreateresources,the
asadmin list-jms-resources commandtodisplaytheirnames,andthe asadmin
delete-jms-resource commandtoremovethem.
▼ToCreateJMSResourcesUsingNetBeansIDE
FollowthesestepstocreateaJMSresourceinGlassFishServerusingNetBeansIDE.Repeat
thesestepsforeachresourceyouneed.
Theexampleapplicationsinthischapteralreadyhavetheresources,soyouwillneedtofollow
thesestepsonlywhenyoucreateyourownapplications.
Right-clicktheprojectforwhichyouwanttocreateresourcesandchooseNew,thenchoose
Other.
TheNewFilewizardopens.
UnderCategories,selectGlassFish.UnderFileTypes,selectJMSResource.
TheGeneralAttributes-JMSResourcepageopens.1
2
3WritingSimpleJMSApplications
Chapter48 • JavaMessageServiceExamples 863
IntheJNDINamefield,typethenameoftheresource.
Byconvention,JMSresourcenamesbeginwith jms/.
Selecttheradiobuttonfortheresourcetype.
Normally,thisiseither javax.jms.Queue ,javax.jms.Topic ,or
javax.jms.ConnectionFactory .
ClickNext.
TheJMSPropertiespageopens.
Foraqueueortopic,typeanameforaphysicalqueueintheValuefieldfortheNameproperty.
Youcantypeanyvalueforthisrequiredfield.
Connectionfactorieshavenorequiredproperties.Inafewsituations,discussedinlater
sections,youmayneedtospecifyaproperty.
ClickFinish.
Afilenamed glassfish-resources.xml iscreatedinyourproject,inadirectorynamed setup.
Intheprojectpane,youcanfinditundertheServerResourcesnode.Ifthisfileexists,resourcesarecreatedautomaticallybyNetBeansIDEwhenyoudeploytheproject.
▼ToDeleteJMSResourcesUsingNetBeansIDE
IntheServicespane,expandtheServersnode,thenexpandtheGlassFishServer3+node.
ExpandtheResourcesnode,thenexpandtheConnectorResourcesnode.ExpandtheAdminObjectResourcesnode.Right-clickanydestinationyouwanttoremoveandselectUnregister.ExpandtheConnectorConnectionPoolsnode.Right-clickanyconnectionfactoryyouwanttoremoveandselectUnregister.
Everyconnectionfactoryhasbothaconnectorconnectionpoolandanassociatedconnector
resource.Whenyouremovetheconnectorconnectionpool,theresourceisremovedautomatically.YoucanverifytheremovalbyexpandingtheConnectorResourcesnode.
RunningtheClientsfortheSynchronousReceiveExample
ToruntheseexamplesusingtheGlassFishServer,packageeachoneinanapplicationclientJARfile.TheapplicationclientJARfilerequiresamanifestfile,locatedinthe src/conf directoryfor
eachexample,alongwiththe .classfile.4
5
6
7
8
1
23456WritingSimpleJMSApplications
TheJavaEE6Tutorial • January2013 864
Thebuild.xml fileforeachexamplecontainsAnttargetsthatcompile,package,anddeploythe
example.Thetargetsplacethe .classfilefortheexampleinthe build/jar directory.Thenthe
targetsusethe jarcommandtopackagetheclassfileandthemanifestfileinanapplication
clientJARfile.
Becausetheexamplesusethecommoninterfaces,youcanrunthemusingeitheraqueueora
topic.
▼ToBuildandPackagetheClientsfortheSynchronousReceiveExample
UsingNetBeansIDE
FromtheFilemenu,chooseOpenProject.
IntheOpenProjectdialog,navigateto:
tut-install /examples/jms/simple/
Selectthe producer folder.
SelecttheOpenasMainProjectcheckbox.ClickOpenProject.IntheProjectstab,right-clicktheprojectandselectBuild.FromtheFilemenu,chooseOpenProjectagain.Selectthe synchconsumer folder.
SelecttheOpenasMainProjectcheckbox.ClickOpenProject.IntheProjectstab,right-clicktheprojectandselectBuild.
▼ToDeployandRuntheClientsfortheSynchronousReceiveExample
UsingNetBeansIDE
Deployandrunthe Producer example:
a. Right-clickthe producer projectandselectProperties.
b. SelectRunfromtheCategoriestree.1
2
3
456789
1011
1WritingSimpleJMSApplications
Chapter48 • JavaMessageServiceExamples 865
c. IntheArgumentsfield,typethefollowing:
queue 3
d. ClickOK.
e. Right-clicktheprojectandselectRun.
Theoutputoftheprogramlookslikethis(alongwithsomeadditionaloutput):
Destination type is queue
Sending message: This is message 1 from producerSending message: This is message 2 from producerSending message: This is message 3 from producer
Themessagesarenowinthequeue,waitingtobereceived.
Note–Whenyourunanapplicationclient,thecommandoftentakesalongtimeto
complete.
Nowdeployandrunthe SynchConsumer example:
a. Right-clickthe synchconsumer projectandselectProperties.
b. SelectRunfromtheCategoriestree.c. IntheArgumentsfield,typethefollowing:
queue
d. ClickOK.e. Right-clicktheprojectandselectRun.
Theoutputoftheprogramlookslikethis(alongwithsomeadditionaloutput):
Destination type is queue
Reading message: This is message 1 from producerReading message: This is message 2 from producerReading message: This is message 3 from producer
Nowtryrunningtheprogramsintheoppositeorder.Right-clickthe synchconsumer projectand
selectRun.
TheOutputpanedisplaysthedestinationtypeandthenappearstohang,waitingformessages.
Right-clickthe producer projectandselectRun.
Whenthemessageshavebeensent,the SynchConsumer clientreceivesthemandexits.The
Outputpaneshowstheoutputofbothprograms,intwodifferenttabs.2
3
4WritingSimpleJMSApplications
TheJavaEE6Tutorial • January2013 866
Nowrunthe Producer exampleusingatopicinsteadofaqueue.
a. Right-clickthe producer projectandselectProperties.
b. SelectRunfromtheCategoriestree.c. IntheArgumentsfield,typethefollowing:
topic 3
d. ClickOK.e. Right-clicktheprojectandselectRun.
Theoutputlookslikethis(alongwithsomeadditionaloutput):
Destination type is topic
Sending message: This is message 1 from producerSending message: This is message 2 from producerSending message: This is message 3 from producer
Nowrunthe SynchConsumer exampleusingthetopic.
a. Right-clickthe synchconsumer projectandselectProperties.
b. SelectRunfromtheCategoriestree.c. IntheArgumentsfield,typethefollowing:
topic
d. ClickOK.e. Right-clicktheprojectandselectRun.
Theresult,however,isdifferent.Becauseyouareusingatopic,messagesthatweresent
beforeyoustartedtheconsumercannotbereceived.(See
“Publish/SubscribeMessaging
Domain”onpage830 fordetails.)Insteadofreceivingthemessages,theprogramappearsto
hang.
Runthe Producer exampleagain.Right-clickthe producer projectandselectRun.
Nowthe SynchConsumer examplereceivesthemessages:
Destination type is topic
Reading message: This is message 1 from producerReading message: This is message 2 from producerReading message: This is message 3 from producer5
6
7WritingSimpleJMSApplications
Chapter48 • JavaMessageServiceExamples 867
▼ToBuildandPackagetheClientsfortheSynchronousReceiveExample
UsingAnt
Inaterminalwindow,gotothe producer directory:
cd producer
Typethefollowingcommand:
ant
Inaterminalwindow,gotothe synchconsumer directory:
cd ../synchconsumer
Typethefollowingcommand:
ant
ThetargetsplacetheapplicationclientJARfileinthe distdirectoryforeachexample.
▼ToDeployandRuntheClientsfortheSynchronousReceiveExample
UsingAntandthe appclient Command
Youcanruntheclientsusingthe appclient command.The build.xml fileforeachproject
includesatargetthatcreatesresources,deploystheclient,andthenretrievestheclientstubsthatthe appclient commanduses.Eachoftheclientstakesoneormorecommand-line
arguments:adestinationtypeand,for Producer ,anumberofmessages.
Tobuild,deploy,andrunthe Producer andSynchConsumer examplesusingAntandthe
appclient command,followthesesteps.
Toruntheclients,youneedtwoterminalwindows.
Inaterminalwindow,gotothe producer directory:
cd ../producer
Createanyneededresources,deploytheclientJARfiletotheGlassFishServer,thenretrievethe
clientstubs:
ant getclient
IgnorethemessagethatstatesthattheapplicationisdeployedataURL.
Runthe Producer program,sendingthreemessagestothequeue:
appclient -client client-jar/producerClient.jar queue 3
Theoutputoftheprogramlookslikethis(alongwithsomeadditionaloutput):
Destination type is queue
Sending message: This is message 1 from producer1
234
1
2
3WritingSimpleJMSApplications
TheJavaEE6Tutorial • January2013 868
Sending message: This is message 2 from producer
Sending message: This is message 3 from producer
Themessagesarenowinthequeue,waitingtobereceived.
Note–Whenyourunanapplicationclient,thecommandoftentakesalongtimetocomplete.
Inthesamewindow,gotothe synchconsumer directory:
cd ../synchconsumer
DeploytheclientJARfiletotheGlassFishServer,thenretrievetheclientstubs:
ant getclient
IgnorethemessagethatstatesthattheapplicationisdeployedataURL.
Runthe SynchConsumer client,specifyingthequeue:
appclient -client client-jar/synchconsumerClient.jar queue
Theoutputoftheclientlookslikethis(alongwithsomeadditionaloutput):
Destination type is queue
Reading message: This is message 1 from producerReading message: This is message 2 from producerReading message: This is message 3 from producer
Nowtryrunningtheclientsintheoppositeorder.Runthe SynchConsumer client:
appclient -client client-jar/synchconsumerClient.jar queue
Theclientdisplaysthedestinationtypeandthenappearstohang,waitingformessages.
Inadifferentterminalwindow,runthe Producer client.
cdtut-install /examples/jms/simple/producer
appclient -client client-jar/producerClient.jar queue 3
Whenthemessageshavebeensent,the SynchConsumer clientreceivesthemandexits.
Nowrunthe Producer clientusingatopicinsteadofaqueue:
appclient -client client-jar/producerClient.jar topic 3
Theoutputoftheclientlookslikethis(alongwithsomeadditionaloutput):
Destination type is topic
Sending message: This is message 1 from producerSending message: This is message 2 from producerSending message: This is message 3 from producer
Nowrunthe SynchConsumer clientusingthetopic:
appclient -client client-jar/synchconsumerClient.jar topic4
5
6
7
8
9
10WritingSimpleJMSApplications
Chapter48 • JavaMessageServiceExamples 869
Theresult,however,isdifferent.Becauseyouareusingatopic,messagesthatweresentbefore
youstartedtheconsumercannotbereceived.(See “Publish/SubscribeMessagingDomain”on
page830fordetails.)Insteadofreceivingthemessages,theclientappearstohang.
Runthe Producer clientagain.
Nowthe SynchConsumer clientreceivesthemessages(alongwithsomeadditionaloutput):
Destination type is topic
Reading message: This is message 1 from producerReading message: This is message 2 from producerReading message: This is message 3 from producer
ASimpleExampleofAsynchronousMessage
Consumption
Thissectiondescribesthereceivingclientsinanexamplethatusesamessagelistenerto
consumemessagesasynchronously.ThissectionthenexplainshowtocompileandruntheclientsusingtheGlassFishServer.
WritingtheClientsfortheAsynchronousReceiveExample
Thesendingclientis producer/src/java/Producer.java ,thesameclientusedintheexample
in“ASimpleExampleofSynchronousMessageReceives”onpage860 .
Anasynchronousconsumernormallyrunsindefinitely.Thisonerunsuntiltheusertypesthe
character qorQtostoptheclient.
Thereceivingclient, asynchconsumer/src/java/AsynchConsumer.java ,performsthe
followingsteps:
1. Injectsresourcesforaconnectionfactory,queue,andtopic.
2. Assignseitherthequeueorthetopictoadestinationobject,basedonthespecified
destinationtype.
3. Createsa Connection anda Session.
4. Createsa MessageConsumer .
5. Createsaninstanceofthe TextListener classandregistersitasthemessagelistenerforthe
MessageConsumer :
listener = new TextListener();consumer.setMessageListener(listener);
6. Startstheconnection,causingmessagedeliverytobegin.
7. Listensforthemessagespublishedtothedestination,stoppingwhentheusertypesthe
character qorQ:
System.out.println( "To end program, type Q or q, "+"then <return> ");
inputStreamReader = new InputStreamReader(System.in);while (!((answer == ’q’) || (answer == ’Q’))) {11WritingSimpleJMSApplications
TheJavaEE6Tutorial • January2013 870
try {
answer = (char) inputStreamReader.read();
} catch (IOException e) {
System.out.println( "I/O exception: "+ e.toString());
}
}
8. Closestheconnection,whichautomaticallyclosesthesessionand MessageConsumer .
Themessagelistener, asynchconsumer/src/java/TextListener.java ,followsthesesteps:
1. Whenamessagearrives,the onMessage methodiscalledautomatically.
2. The onMessage methodconvertstheincomingmessagetoa TextMessage anddisplaysits
content.Ifthemessageisnotatextmessage,itreportsthisfact:
public void onMessage(Message message) {
TextMessage msg = null;try {
if (message instanceof TextMessage) {
msg = (TextMessage) message;
System.out.println( "Reading message: "+ msg.getText());
} else {
System.out.println( "Message is not a "+"TextMessage ");
}
} catch (JMSException e) {
System.out.println( "JMSException in onMessage(): "+ e.toString());
} catch (Throwable t) {
System.out.println( "Exception in onMessage(): "+ t.getMessage());
}
}
Forthisexample,youwillusetheconnectionfactoryanddestinationsyoucreatedfor “A
SimpleExampleofSynchronousMessageReceives”onpage860 .
▼ToBuildandPackagethe AsynchConsumer ClientUsingNetBeansIDE
FromtheFilemenu,chooseOpenProject.
IntheOpenProjectdialog,navigateto:
tut-install /examples/jms/simple/
Selectthe asynchconsumer folder.
SelecttheOpenasMainProjectcheckbox.ClickOpenProject.IntheProjectstab,right-clicktheprojectandselectBuild.1
2
3
456WritingSimpleJMSApplications
Chapter48 • JavaMessageServiceExamples 871
▼ToDeployandRuntheClientsfortheAsynchronousReceiveExample
UsingNetBeansIDE
Runthe AsynchConsumer example:
a. Right-clickthe asynchconsumer projectandselectProperties.
b. SelectRunfromtheCategoriestree.c. IntheArgumentsfield,typethefollowing:
topic
d. ClickOK.e. Right-clicktheprojectandselectRun.
Theclientdisplaysthefollowinglinesandappearstohang:
Destination type is topic
To end program, type Q or q, then <return>
Nowrunthe Producer example:
a. Right-clickthe producer projectandselectProperties.
b. SelectRunfromtheCategoriestree.c. IntheArgumentsfield,typethefollowing:
topic 3
d. ClickOK.e. Right-clicktheprojectandselectRun.
Theoutputoftheclientlookslikethis:
Destination type is topic
Sending message: This is message 1 from producerSending message: This is message 2 from producerSending message: This is message 3 from producer
Intheothertab,the AsynchConsumer clientdisplaysthefollowing:
Destination type is topic
To end program, type Q or q, then <return>
Reading message: This is message 1 from producerReading message: This is message 2 from producerReading message: This is message 3 from producerMessage is not a TextMessage1
2WritingSimpleJMSApplications
TheJavaEE6Tutorial • January2013 872
Thelastlineappearsbecausetheclienthasreceivedthenon-textcontrolmessagesentbythe
Producer client.
Type QorqintheOutputwindowandpressReturntostoptheclient.
Nowrunthe Producer clientusingaqueue.
Inthiscase,aswiththesynchronousexample,youcanrunthe Producer clientfirst,because
thereisnotimingdependencybetweenthesenderandthereceiver.
a. Right-clickthe producer projectandselectProperties.
b. SelectRunfromtheCategoriestree.c. IntheArgumentsfield,typethefollowing:
queue 3
d. ClickOK.e. Right-clicktheprojectandselectRun.
Theoutputoftheclientlookslikethis:
Destination type is queue
Sending message: This is message 1 from producerSending message: This is message 2 from producerSending message: This is message 3 from producer
Runthe AsynchConsumer client.
a. Right-clickthe asynchconsumer projectandselectProperties.
b. SelectRunfromtheCategoriestree.c. IntheArgumentsfield,typethefollowing:
queue
d. ClickOK.e. Right-clicktheprojectandselectRun.
Theoutputoftheclientlookslikethis:
Destination type is queue
To end program, type Q or q, then <return>Reading message: This is message 1 from producerReading message: This is message 2 from producerReading message: This is message 3 from producerMessage is not a TextMessage
Type QorqintheOutputwindowandpressReturntostoptheclient.3
4
5
6WritingSimpleJMSApplications
Chapter48 • JavaMessageServiceExamples 873
▼ToBuildandPackagethe AsynchConsumer ClientUsingAnt
Inaterminalwindow,gotothe asynchconsumer directory:
cd ../asynchconsumer
Typethefollowingcommand:
ant
ThetargetspackageboththemainclassandthemessagelistenerclassintheJARfileandplace
thefileinthe distdirectoryfortheexample.
▼ToDeployandRuntheClientsfortheAsynchronousReceiveExample
UsingAntandthe appclient Command
DeploytheclientJARfiletotheGlassFishServer,thenretrievetheclientstubs:
ant getclient
IgnorethemessagethatstatesthattheapplicationisdeployedataURL.
Runthe AsynchConsumer client,specifyingthe topicdestinationtype.
appclient -client client-jar/asynchconsumerClient.jar topic
Theclientdisplaysthefollowinglines(alongwithsomeadditionaloutput)andappearstohang:
Destination type is topic
To end program, type Q or q, then <return>
Intheterminalwindowwhereyouranthe Producer clientpreviously,runtheclientagain,
sendingthreemessages.
appclient -client client-jar/producerClient.jar topic 3
Theoutputoftheclientlookslikethis(alongwithsomeadditionaloutput):
Destination type is topic
Sending message: This is message 1 from producerSending message: This is message 2 from producerSending message: This is message 3 from producer
Intheotherwindow,the AsynchConsumer clientdisplaysthefollowing(alongwithsome
additionaloutput):
Destination type is topic
To end program, type Q or q, then <return>
Reading message: This is message 1 from producerReading message: This is message 2 from producerReading message: This is message 3 from producerMessage is not a TextMessage1
2
1
2
3WritingSimpleJMSApplications
TheJavaEE6Tutorial • January2013 874
Thelastlineappearsbecausetheclienthasreceivedthenon-textcontrolmessagesentbythe
Producer client.
Type QorqandpressReturntostoptheclient.
Nowruntheclientsusingaqueue.
Inthiscase,aswiththesynchronousexample,youcanrunthe Producer clientfirst,because
thereisnotimingdependencybetweenthesenderandreceiver:
appclient -client client-jar/producerClient.jar queue 3
Theoutputoftheclientlookslikethis:
Destination type is queue
Sending message: This is message 1 from producer
Sending message: This is message 2 from producerSending message: This is message 3 from producer
Runthe AsynchConsumer client:
appclient -client client-jar/asynchconsumerClient.jar queue
Theoutputoftheclientlookslikethis(alongwithsomeadditionaloutput):
Destination type is queue
To end program, type Q or q, then <return>Reading message: This is message 1 from producerReading message: This is message 2 from producerReading message: This is message 3 from producerMessage is not a TextMessage
Type Qorqtostoptheclient.
ASimpleExampleofBrowsingMessagesinaQueue
Thissectiondescribesanexamplethatcreatesa QueueBrowser objecttoexaminemessagesona
queue,asdescribedin “JMSQueueBrowsers”onpage841 .Thissectionthenexplainshowto
compile,package,andruntheexampleusingtheGlassFishServer.
WritingtheClientforthe QueueBrowser Example
Tocreatea QueueBrowser foraqueue,youcallthe Session.createBrowser methodwiththe
queueastheargument.Youobtainthemessagesinthequeueasan Enumeration object.You
cantheniteratethroughthe Enumeration objectanddisplaythecontentsofeachmessage.
Themessagebrowser/src/java/MessageBrowser.java clientperformsthefollowingsteps:
1. Injectsresourcesforaconnectionfactoryandaqueue.
2. Createsa Connection anda Session.4
5
6
7WritingSimpleJMSApplications
Chapter48 • JavaMessageServiceExamples 875
3. Createsa QueueBrowser :
QueueBrowser browser = session.createBrowser(queue);
4. Retrievesthe Enumeration thatcontainsthemessages:
Enumeration msgs = browser.getEnumeration();
5. Verifiesthatthe Enumeration containsmessages,thendisplaysthecontentsofthemessages:
if ( !msgs.hasMoreElements() ) {
System.out.println( "No messages in queue ");
} else {
while (msgs.hasMoreElements()) {
Message tempMsg = (Message)msgs.nextElement();System.out.println( "Message: "+ tempMsg);
}
}
6. Closestheconnection,whichautomaticallyclosesthesessionandthe QueueBrowser .
Theformatinwhichthemessagecontentsappearisimplementation-specific.IntheGlassFish
Server,themessageformatlookssomethinglikethis:
Message contents:
Text: This is message 3 from producerClass: com.sun.messaging.jmq.jmsclient.TextMessageImplgetJMSMessageID(): ID:14-128.149.71.199(f9:86:a2:d5:46:9b)-40814-1255980521747getJMSTimestamp(): 1129061034355getJMSCorrelationID(): nullJMSReplyTo: nullJMSDestination: PhysicalQueuegetJMSDeliveryMode(): PERSISTENTgetJMSRedelivered(): falsegetJMSType(): nullgetJMSExpiration(): 0getJMSPriority(): 4Properties: null
Forthisexample,youwillusetheconnectionfactoryandqueueyoucreatedfor “ASimple
ExampleofSynchronousMessageReceives”onpage860 .
▼ToRunthe MessageBrowser ClientUsingNetBeansIDE
Tobuild,package,deploy,andrunthe MessageBrowser exampleusingNetBeansIDE,follow
thesesteps.
Youalsoneedthe Producer exampletosendthemessagetothequeue,andoneoftheconsumer
clientstoconsumethemessagesafteryouinspectthem.Ifyoudidnotdosoalready,packagetheseexamples.
FromtheFilemenu,chooseOpenProject.IntheOpenProjectdialog,navigateto:
tut-install /examples/jms/simple/1
2WritingSimpleJMSApplications
TheJavaEE6Tutorial • January2013 876
Selectthe messagebrowser folder.
SelecttheOpenasMainProjectcheckbox.ClickOpenProject.IntheProjectstab,right-clicktheprojectandselectBuild.Runthe Producer client,sendingonemessagetothequeue:
a. Right-clickthe producer projectandselectProperties.
b. SelectRunfromtheCategoriestree.c. IntheArgumentsfield,typethefollowing:
queue
d. ClickOK.e. Right-clicktheprojectandselectRun.
Theoutputoftheclientlookslikethis:
Destination type is queue
Sending message: This is message 1 from producer
Runthe MessageBrowser client.Right-clickthe messagebrowser projectandselectRun.
Theoutputoftheclientlookssomethinglikethis:
Message:
Text: This is message 1 from producerClass: com.sun.messaging.jmq.jmsclient.TextMessageImplgetJMSMessageID(): ID:12-128.149.71.199(8c:34:4a:1a:1b:b8)-40883-1255980521747getJMSTimestamp(): 1129062957611getJMSCorrelationID(): nullJMSReplyTo: nullJMSDestination: PhysicalQueuegetJMSDeliveryMode(): PERSISTENTgetJMSRedelivered(): falsegetJMSType(): nullgetJMSExpiration(): 0getJMSPriority(): 4Properties: nullMessage:Class: com.sun.messaging.jmq.jmsclient.MessageImplgetJMSMessageID(): ID:13-128.149.71.199(8c:34:4a:1a:1b:b8)-40883-1255980521747getJMSTimestamp(): 1129062957616getJMSCorrelationID(): nullJMSReplyTo: nullJMSDestination: PhysicalQueuegetJMSDeliveryMode(): PERSISTENTgetJMSRedelivered(): false3
4567
8WritingSimpleJMSApplications
Chapter48 • JavaMessageServiceExamples 877
getJMSType(): null
getJMSExpiration(): 0getJMSPriority(): 4Properties: null
Thefirstmessageisthe TextMessage ,andthesecondisthenon-textcontrolmessage.
Runthe SynchConsumer clienttoconsumethemessages.
a. Right-clickthe synchconsumer projectandselectProperties.
b. SelectRunfromtheCategoriestree.c. IntheArgumentsfield,typethefollowing:
queue
d. ClickOK.e. Right-clicktheprojectandselectRun.
Theoutputoftheclientlookslikethis:
Destination type is queue
Reading message: This is message 1 from producer
▼ToRunthe MessageBrowser ClientUsingAntandthe appclient
Command
Tobuild,package,deploy,andrunthe MessageBrowser exampleusingAnt,followthesesteps.
Youalsoneedthe Producer exampletosendthemessagetothequeue,andoneoftheconsumer
clientstoconsumethemessagesafteryouinspectthem.Ifyoudidnotdosoalready,packagetheseexamples.
Toruntheclients,youneedtwoterminalwindows.
Inaterminalwindow,gotothe messagebrowser directory.
cd ../messagebrowser
Typethefollowingcommand:
ant
ThetargetsplacetheapplicationclientJARfileinthe distdirectoryfortheexample.
Inanotherterminalwindow,gotothe producer directory.
Runthe Producer client,sendingonemessagetothequeue:
appclient -client client-jar/producerClient.jar queue9
1
2
3
4WritingSimpleJMSApplications
TheJavaEE6Tutorial • January2013 878
Theoutputoftheclientlookslikethis(alongwithsomeadditionaloutput):
Destination type is queue
Sending message: This is message 1 from producer
Gotothe messagebrowser directory.
DeploytheclientJARfiletotheGlassFishServer,thenretrievetheclientstubs:
ant getclient
IgnorethemessagethatstatesthattheapplicationisdeployedataURL.Becausethisexampletakesnocommand-linearguments,youcanrunthe MessageBrowser
clientusingthefollowingcommand:
ant run
Alternatively,youcantypethefollowingcommand:
appclient -client client-jar/messagebrowserClient.jar
Theoutputoftheclientlookssomethinglikethis(alongwithsomeadditionaloutput):
Message:
Text: This is message 1 from producerClass: com.sun.messaging.jmq.jmsclient.TextMessageImplgetJMSMessageID(): ID:12-128.149.71.199(8c:34:4a:1a:1b:b8)-40883-1255980521747getJMSTimestamp(): 1255980521747getJMSCorrelationID(): nullJMSReplyTo: nullJMSDestination: PhysicalQueue
getJMSDeliveryMode(): PERSISTENTgetJMSRedelivered(): falsegetJMSType(): nullgetJMSExpiration(): 0getJMSPriority(): 4Properties: nullMessage:Class: com.sun.messaging.jmq.jmsclient.MessageImplgetJMSMessageID(): ID:13-128.149.71.199(8c:34:4a:1a:1b:b8)-40883-1255980521767getJMSTimestamp(): 1255980521767getJMSCorrelationID(): nullJMSReplyTo: nullJMSDestination: PhysicalQueuegetJMSDeliveryMode(): PERSISTENTgetJMSRedelivered(): falsegetJMSType(): nullgetJMSExpiration(): 0getJMSPriority(): 4Properties: null
Thefirstmessageisthe TextMessage ,andthesecondisthenon-textcontrolmessage.
Gotothe synchconsumer directory.5
6
7
8WritingSimpleJMSApplications
Chapter48 • JavaMessageServiceExamples 879
Runthe SynchConsumer clienttoconsumethemessages:
appclient -client client-jar/synchconsumerClient.jar queue
Theoutputoftheclientlookslikethis(alongwithsomeadditionaloutput):
Destination type is queue
Reading message: This is message 1 from producer
RunningJMSClientsonMultipleSystems
JMSclientsthatusetheGlassFishServercanexchangemessageswitheachotherwhentheyare
runningondifferentsystemsinanetwork.Thesystemsmustbevisibletoeachotherbyname(theUNIXhostnameortheMicrosoftWindowscomputername)andmustbothberunningtheGlassFishServer.
Note–AnymechanismforexchangingmessagesbetweensystemsisspecifictotheJavaEE
serverimplementation.ThistutorialdescribeshowtousetheGlassFishServerforthispurpose.
Supposeyouwanttorunthe Producer clientononesystem, earth,andthe SynchConsumer
clientonanothersystem, jupiter.Beforeyoucandoso,youneedtoperformthesetasks:
1. Createtwonewconnectionfactories
2. ChangethenameofthedefaultJMShostononesystem3. Editthesourcecodeforthetwoexamples4. Recompileandrepackagetheexamples
Note–AlimitationintheJMSproviderintheGlassFishServermaycausearuntimefailure
tocreateaconnectiontosystemsthatusetheDynamicHostConfigurationProtocol(DHCP)toobtainanIPaddress.Youcan,however,createaconnection fromasystemthat
usesDHCP toasystemthatdoesnotuseDHCP.Intheexamplesinthistutorial, earthcan
beasystemthatusesDHCP,and jupitercanbeasystemthatdoesnotuseDHCP.
Whenyouruntheclients,theywillworkasshownin Figure48–1 .Theclientrunon earth
needsthequeueon earthonlysotheresourceinjectionwillsucceed.Theconnection,session,
andmessageproducerareallcreatedon jupiterusingtheconnectionfactorythatpointsto
jupiter.Themessagessentfrom earthwillbereceivedon jupiter.9WritingSimpleJMSApplications
TheJavaEE6Tutorial • January2013 880
Forexamplesshowinghowtodeploymorecomplexapplicationsontwodifferentsystems,see
“AnApplicationExampleThatConsumesMessagesfromaRemoteServer”onpage910 and
“AnApplicationExampleThatDeploysaMessage-DrivenBeanonTwoServers”onpage916 .
▼ToCreateAdministeredObjectsforMultipleSystems
Toruntheseclients,youmustdothefollowing:
■Createanewconnectionfactoryonboth earthandjupiter
■Createadestinationresourceonboth earthandjupiter
Youdonothavetoinstallthetutorialexamplesonbothsystems,butyoumustbeabletoaccess
thefilesystemwhereitisinstalled.Youmayfinditmoreconvenienttoinstallthetutorialexamplesonbothsystemsifthetwousedifferentoperatingsystems(forexample,Windows
andUNIX).Otherwiseyouwillhavetoeditthetut-install /examples/bp-project/build.properties fileandchangethelocationofthe
javaee.home propertyeachtimeyoubuildorrunaclientonadifferentsystem.
StarttheGlassFishServeron earth.
StarttheGlassFishServeron jupiter.FIGURE48–1 SendingMessagesfromOneSystemtoAnother
Earth
Java EE Server on Earth
ProducerSendsCF that
points to 
JupiterJupiter
Java EE Server on Jupiter
SynchConsumer
CFDelivers
Msg
CF
Msg
Queue
 Queue
1
2WritingSimpleJMSApplications
Chapter48 • JavaMessageServiceExamples 881
Tocreateanewconnectionfactoryon jupiter,followthesesteps:
a. Fromacommandshellon jupiter,gotothe tut-install /examples/jms/simple/producer/
directory.
b. Typethefollowingcommand:
ant create-local-factory
Thecreate-local-factory target,definedinthe build.xml fileforthe Producer example,
createsaconnectionfactorynamed jms/JupiterConnectionFactory .
Tocreateanewconnectionfactoryon earththatpointstotheconnectionfactoryon jupiter,
followthesesteps:
a. Fromacommandshellon earth,gotothe tut-install /examples/jms/simple/producer/
directory.
b. Typethefollowingcommand:
ant create-remote-factory -Dsys= remote-system-name
Replaceremote-system-name withtheactualnameoftheremotesystem.
Thecreate-remote-factory target,definedinthe build.xml fileforthe Producer
example,alsocreatesaconnectionfactorynamed jms/JupiterConnectionFactory .In
addition,itsetsthe AddressList propertyforthisfactorytothenameoftheremotesystem.
Additionalresourceswillbecreatedwhenyoudeploytheapplication,iftheyhavenotbeen
createdbefore.
Thereasonthe glassfish-resources.xml filedoesnotspecify
jms/JupiterConnectionFactory isthaton earththeconnectionfactoryrequiresthe
AddressList propertysetting,whereason jupiteritdoesnot.Youcanexaminethetargetsin
thebuild.xml filefordetails.
ChangingtheDefaultHostName
Bydefault,thedefaulthostnamefortheJMSserviceontheGlassFishServeris localhost .To
accesstheJMSservicefromanothersystem,however,youmustchangethehostname.Youcanchangeiteithertotheactualhostnameorto 0.0.0.0.
YoucanchangethedefaulthostnameusingeithertheAdministrationConsoleorthe asadmin
command.
▼ToChangetheDefaultHostNameUsingtheAdministrationConsole
Onjupiter,starttheAdministrationConsolebyopeningabrowserat
http://localhost:4848/ .3
4
1WritingSimpleJMSApplications
TheJavaEE6Tutorial • January2013 882
Inthenavigationtree,expandtheConfigurationsnode,thenexpandtheserver-confignode.
Undertheserver-confignode,expandtheJavaMessageServicenode.UndertheJavaMessageServicenode,expandtheJMSHostsnode.UndertheJMSHostsnode,select default_JMS_host .
TheEditJMSHostpageopens.
IntheHostfield,typethenameofthesystem,ortype 0.0.0.0.
ClickSave.RestarttheGlassFishServer.
▼ToChangetheDefaultHostNameUsingthe asadminCommand
Specifyacommandlikeoneofthefollowing:
asadmin set server-config.jms-service.jms-host.default_JMS_host.host="0.0.0.0"
asadmin set server-config.jms-service.jms-host.default_JMS_host.host=" hostname "
RestarttheGlassFishServer.
▼ToRuntheClientsUsingNetBeansIDE
Thesestepsassumeyouhavethetutorialinstalledonbothofthesystemsyouareusingandthat
youareabletoaccessthefilesystemof jupiterfrom earthorviceversa.Youwilleditthe
sourcefilestospecifythenewconnectionfactory.Thenyouwillrebuildandruntheclients.
Toeditthesourcefiles,followthesesteps:a. On earth,openthefollowingfileinNetBeansIDE:
tut-install /examples/jms/simple/producer/src/java/Producer.java
b. Findthefollowingline:
@Resource(lookup = "jms/ConnectionFactory ")
c. Changethelinetothefollowing:
@Resource(lookup = "jms/JupiterConnectionFactory ")
d. Savethefile.2
345
6
78
1
2
1WritingSimpleJMSApplications
Chapter48 • JavaMessageServiceExamples 883
e. On jupiter,openthefollowingfileinNetBeansIDE:
tut-install /examples/jms/simple/synchconsumer/src/java/SynchConsumer.java
f. Repeat StepbandStepc,thensavethefile.
Torecompileandrepackagethe Producer exampleon earth,right-clickthe producer project
andselectCleanandBuild.
Torecompileandrepackagethe SynchConsumer exampleon jupiter,right-clickthe
synchconsumer projectandselectCleanandBuild.
Onearth,deployandrun Producer .Followthesesteps:
a. Right-clickthe producer projectandselectProperties.
b. SelectRunfromtheCategoriestree.c. IntheArgumentsfield,typethefollowing:
queue 3
d. ClickOK.e. Right-clicktheprojectandselectRun.
Theoutputlookslikethis(alongwithsomeadditionaloutput):
Destination type is topic
Sending message: This is message 1 from producerSending message: This is message 2 from producerSending message: This is message 3 from producer
Onjupiter,run SynchConsumer .Followthesesteps:
a. Right-clickthe synchconsumer projectandselectProperties.
b. SelectRunfromtheCategoriestree.c. IntheArgumentsfield,typethefollowing:
queue
d. ClickOK.e. Right-clicktheprojectandselectRun.
Theoutputoftheprogramlookslikethis(alongwithsomeadditionaloutput):
Destination type is queue
Reading message: This is message 1 from producerReading message: This is message 2 from producer2
34
5WritingSimpleJMSApplications
TheJavaEE6Tutorial • January2013 884
Reading message: This is message 3 from producer
▼ToRuntheClientsUsingAntandthe appclient Command
Thesestepsassumeyouhavethetutorialinstalledonbothofthesystemsyouareusingandthat
youareabletoaccessthefilesystemof jupiterfrom earthorviceversa.Youwilleditthe
sourcefilestospecifythenewconnectionfactory.Thenyouwillrebuildandruntheclients.
Toeditthesourcefiles,followthesesteps:a. On earth,openthefollowingfileinatexteditor:
tut-install /examples/jms/simple/producer/src/java/Producer.java
b. Findthefollowingline:
@Resource(lookup = "jms/ConnectionFactory ")
c. Changethelinetothefollowing:
@Resource(lookup = "jms/JupiterConnectionFactory ")
d. Saveandclosethefile.
e. On jupiter,openthefollowingfileinatexteditor:
tut-install /examples/jms/simple/synchconsumer/src/java/SynchConsumer.java
f. Repeat StepbandStepc,thensaveandclosethefile.
Torecompileandrepackagethe Producer exampleon earth,typethefollowing:
ant
Torecompileandrepackagethe SynchConsumer exampleon jupiter,gotothe synchconsumer
directoryandtypethefollowing:
ant
Onearth,deployandrun Producer .Followthesesteps:
a. On earth,fromthe producer directory,createanyneededresources,deploytheclientJAR
filetotheGlassFishServer,thenretrievetheclientstubs:
ant getclient
IgnorethemessagethatstatesthattheapplicationisdeployedataURL.
b. Toruntheclient,typethefollowing:
appclient -client client-jar/producerClient.jar queue 31
2
3
4WritingSimpleJMSApplications
Chapter48 • JavaMessageServiceExamples 885
Theoutputlookslikethis(alongwithsomeadditionaloutput):
Destination type is topic
Sending message: This is message 1 from producerSending message: This is message 2 from producerSending message: This is message 3 from producer
Onjupiter,run SynchConsumer .Followthesesteps:
a. Fromthe synchconsumer directory,createanyneededresources,deploytheclientJARfileto
theGlassFishServer,thenretrievetheclientstubs:
ant getclient
IgnorethemessagethatstatesthattheapplicationisdeployedataURL.
b. Toruntheclient,typethefollowing:
appclient -client client-jar/synchconsumerClient.jar queue
Theoutputoftheprogramlookslikethis(alongwithsomeadditionaloutput):
Destination type is queue
Reading message: This is message 1 from producerReading message: This is message 2 from producerReading message: This is message 3 from producer
UndeployingandCleaningtheSimpleJMSExamples
Afteryoufinishrunningtheexamples,youcanundeploythemandremovethebuildartifacts.
Youcanalsousethe asadmin delete-jms-resource commandtodeletethedestinationsand
connectionfactoriesyoucreated.However,itisrecommendedthatyoukeepthem,becausetheywillbeusedinmostoftheexampleslaterinthischapter.Afteryouhavecreatedthem,theywillbeavailablewheneveryourestarttheGlassFishServer.
WritingRobustJMSApplications
ThefollowingexamplesshowhowtousesomeofthemoreadvancedfeaturesoftheJMSAPI.5WritingRobustJMSApplications
TheJavaEE6Tutorial • January2013 886
AMessageAcknowledgmentExample
TheAckEquivExample.java clientshowshowbothofthefollowingscenariosensurethata
messagewillnotbeacknowledgeduntilprocessingofitiscomplete:
■Usinganasynchronousmessageconsumer(amessagelistener)inan AUTO_ACKNOWLEDGE
session
■Usingasynchronousreceiverina CLIENT_ACKNOWLEDGE session
Note–IntheJavaEEplatform,messagelistenersand CLIENT_ACKNOWLEDGE sessionscanbeused
onlyinapplicationclients,asinthisexample.
Withamessagelistener,theautomaticacknowledgmenthappenswhenthe onMessage method
returns(thatis,aftermessageprocessinghasfinished).Withasynchronousreceiver,theclientacknowledgesthemessageafterprocessingiscomplete.Ifyouuse AUTO_ACKNOWLEDGE witha
synchronousreceive,theacknowledgmenthappensimmediatelyafterthe receivecall;ifany
subsequentprocessingstepsfail,themessagecannotberedelivered.
Theexampleisinthefollowingdirectory:
tut-install /examples/jms/advanced/ackequivexample/src/java/
Theexamplecontainsan AsynchSubscriber classwitha TextListener class,a
MultiplePublisher class,a SynchReceiver class,a SynchSender class,a mainmethod,anda
methodthatrunstheotherclasses’threads.
Theexampleusesthefollowingobjects:
■jms/ConnectionFactory ,jms/Queue ,and jms/Topic :resourcesthatyoucreatedfor “A
SimpleExampleofSynchronousMessageReceives”onpage860 .
■jms/ControlQueue :anadditionalqueue
■jms/DurableConnectionFactory :aconnectionfactorywithaclientID(see “Creating
DurableSubscriptions”onpage847 formoreinformation)
Thenewqueueandconnectionfactoryarecreatedatdeploymenttime.YoucanuseeitherNetBeansIDEorAnttobuild,package,deploy,andrun ackequivexample .
▼ToRun ackequivexample UsingNetBeansIDE
Tobuildandpackagetheclient,followthesesteps.
a. FromtheFilemenu,chooseOpenProject.1WritingRobustJMSApplications
Chapter48 • JavaMessageServiceExamples 887
b. IntheOpenProjectdialog,navigateto:
tut-install /examples/jms/advanced/
c. Selectthe ackequivexample folder.
d. SelecttheOpenasMainProjectcheckbox.e. ClickOpenProject.f. IntheProjectstab,right-clicktheprojectandselectBuild.Toruntheclient,right-clickthe ackequivexample projectandselectRun.
Theclientoutputlookssomethinglikethis(alongwithsomeadditionaloutput):
Queue name is jms/ControlQueue
Queue name is jms/QueueTopic name is jms/TopicConnection factory name is jms/DurableConnectionFactory
SENDER: Created client-acknowledge session
SENDER: Sending message: Here is a client-acknowledge messageRECEIVER: Created client-acknowledge sessionRECEIVER: Processing message: Here is a client-acknowledge messageRECEIVER: Now I ’ll acknowledge the message
SUBSCRIBER: Created auto-acknowledge sessionSUBSCRIBER: Sending synchronize message to control queuePUBLISHER: Created auto-acknowledge sessionPUBLISHER: Receiving synchronize messages from control queue; count = 1PUBLISHER: Received synchronize message; expect 0 morePUBLISHER: Publishing message: Here is an auto-acknowledge message 1PUBLISHER: Publishing message: Here is an auto-acknowledge message 2SUBSCRIBER: Processing message: Here is an auto-acknowledge message 1PUBLISHER: Publishing message: Here is an auto-acknowledge message 3SUBSCRIBER: Processing message: Here is an auto-acknowledge message 2SUBSCRIBER: Processing message: Here is an auto-acknowledge message 3
Afteryouruntheclient,youcandeletethedestinationresource jms/ControlQueue byusing
thefollowingcommand:
asadmin delete-jms-resource jms/ControlQueue
Youwillneedtheotherresourcesforotherexamples.
▼ToRun ackequivexample UsingAnt
Inaterminalwindow,gotothefollowingdirectory:
tut-install /examples/jms/advanced/ackequivexample/
Tocompileandpackagetheclient,typethefollowingcommand:
ant2
3
1
2WritingRobustJMSApplications
TheJavaEE6Tutorial • January2013 888
Tocreateneededresources,deploytheclientJARfiletotheGlassFishServer,thenretrievethe
clientstubs,typethefollowingcommand:
ant getclient
IgnorethemessagethatstatesthattheapplicationisdeployedataURL.
Becausethisexampletakesnocommand-linearguments,youcanruntheclientusingthe
followingcommand:
ant run
Alternatively,youcantypethefollowingcommand:
appclient -client client-jar/ackequivexampleClient.jar
Theclientoutputlookssomethinglikethis(alongwithsomeadditionaloutput):
Queue name is jms/ControlQueue
Queue name is jms/QueueTopic name is jms/TopicConnection factory name is jms/DurableConnectionFactory
SENDER: Created client-acknowledge sessionSENDER: Sending message: Here is a client-acknowledge messageRECEIVER: Created client-acknowledge sessionRECEIVER: Processing message: Here is a client-acknowledge messageRECEIVER: Now I ’ll acknowledge the message
SUBSCRIBER: Created auto-acknowledge sessionSUBSCRIBER: Sending synchronize message to control queuePUBLISHER: Created auto-acknowledge sessionPUBLISHER: Receiving synchronize messages from control queue; count = 1PUBLISHER: Received synchronize message; expect 0 morePUBLISHER: Publishing message: Here is an auto-acknowledge message 1PUBLISHER: Publishing message: Here is an auto-acknowledge message 2SUBSCRIBER: Processing message: Here is an auto-acknowledge message 1PUBLISHER: Publishing message: Here is an auto-acknowledge message 3SUBSCRIBER: Processing message: Here is an auto-acknowledge message 2SUBSCRIBER: Processing message: Here is an auto-acknowledge message 3
Afteryouruntheclient,youcandeletethedestinationresource jms/ControlQueue byusing
thefollowingcommand:
asadmin delete-jms-resource jms/ControlQueue
Youwillneedtheotherresourcesforotherexamples.
ADurableSubscriptionExample
DurableSubscriberExample.java showshowdurablesubscriptionswork.Itdemonstrates
thatadurablesubscriptionisactiveevenwhenthesubscriberisnotactive.Theexamplecontainsa DurableSubscriber class,a MultiplePublisher class,a mainmethod,andamethod
thatinstantiatestheclassesandcallstheirmethodsinsequence.3
4
5WritingRobustJMSApplications
Chapter48 • JavaMessageServiceExamples 889
Theexampleisinthe
tut-install /examples/jms/advanced/durablesubscriberexample/src/java/ directory.
Theexamplebeginsinthesamewayasanypublish/subscribeclient:Thesubscriberstarts,the
publisherpublishessomemessages,andthesubscriberreceivesthem.Atthispoint,thesubscriberclosesitself.Thepublisherthenpublishessomemessageswhilethesubscriberisnotactive.Thesubscriberthenrestartsandreceivesthosemessages.
YoucanuseeitherNetBeansIDEorAnttobuild,package,deploy,andrun
durablesubscriberexample .
▼ToRun durablesubscriberexample UsingNetBeansIDE
Tocompileandpackagetheclient,followthesesteps:
a. FromtheFilemenu,chooseOpenProject.b. IntheOpenProjectdialog,navigateto:
tut-install /examples/jms/advanced/
c. Selectthe durablesubscriberexample folder.
d. SelecttheOpenasMainProjectcheckbox.e. ClickOpenProject.f. IntheProjectstab,right-clicktheprojectandselectBuild.Toruntheclient,right-clickthe durablesubscriberexample projectandselectRun.
Theoutputlookssomethinglikethis(alongwithsomeadditionaloutput):
Connection factory without client ID is jms/ConnectionFactory
Connection factory with client ID is jms/DurableConnectionFactoryTopic name is jms/TopicStarting subscriberPUBLISHER: Publishing message: Here is a message 1SUBSCRIBER: Reading message: Here is a message 1PUBLISHER: Publishing message: Here is a message 2SUBSCRIBER: Reading message: Here is a message 2PUBLISHER: Publishing message: Here is a message 3SUBSCRIBER: Reading message: Here is a message 3Closing subscriberPUBLISHER: Publishing message: Here is a message 4PUBLISHER: Publishing message: Here is a message 5PUBLISHER: Publishing message: Here is a message 6Starting subscriberSUBSCRIBER: Reading message: Here is a message 4SUBSCRIBER: Reading message: Here is a message 5SUBSCRIBER: Reading message: Here is a message 61
2WritingRobustJMSApplications
TheJavaEE6Tutorial • January2013 890
Closing subscriber
Unsubscribing from durable subscription
Afteryouruntheclient,youcandeletetheconnectionfactory
jms/DurableConnectionFactory byusingthefollowingcommand:
asadmin delete-jms-resource jms/DurableConnectionFactory
▼ToRun durablesubscriberexample UsingAnt
Inaterminalwindow,gotothefollowingdirectory:
tut-install /examples/jms/advanced/durablesubscriberexample/
Tocompileandpackagetheclient,typethefollowingcommand:
ant
Tocreateanyneededresources,deploytheclientJARfiletotheGlassFishServer,thenretrieve
theclientstubs,typethefollowingcommand:
ant getclient
IgnorethemessagethatstatesthattheapplicationisdeployedataURL.
Becausethisexampletakesnocommand-linearguments,youcanruntheclientusingthe
followingcommand:
ant run
Alternatively,youcantypethefollowingcommand:
appclient -client client-jar/durablesubscriberexampleClient.jar
Afteryouruntheclient,youcandeletetheconnectionfactoryjms/DurableConnectionFactory byusingthefollowingcommand:
asadmin delete-jms-resource jms/DurableConnectionFactory
ALocalTransactionExample
TransactedExample.java demonstratestheuseoftransactionsinaJMSclientapplication.The
exampleisinthe tut-install /examples/jms/advanced/transactedexample/src/java/
directory.
Thisexampleshowshowtouseaqueueandatopicinasingletransactionaswellashowtopass
asessiontoamessagelistener’sconstructorfunction.Theexamplerepresentsahighlysimplifiede-commerceapplicationinwhichthefollowingactionsoccur.
1. Aretailersendsa MapMessage tothevendororderqueue,orderingaquantityofcomputers,
andwaitsforthevendor’sreply:3
1
23
4
5WritingRobustJMSApplications
Chapter48 • JavaMessageServiceExamples 891
producer = session.createProducer(vendorOrderQueue);
outMessage = session.createMapMessage();outMessage.setString( "Item","Computer(s) ");
outMessage.setInt( "Quantity ", quantity);
outMessage.setJMSReplyTo(retailerConfirmQueue);producer.send(outMessage);System.out.println( "Retailer: ordered "+ quantity + "computer(s) ");
orderConfirmReceiver = session.createConsumer(retailerConfirmQueue);connection.start();
2. Thevendorreceivestheretailer’sordermessageandsendsanordermessagetothesupplier
ordertopicinonetransaction.ThisJMStransactionusesasinglesession,soyoucancombineareceivefromaqueuewithasendtoatopic.Hereisthecodethatusesthesamesessiontocreateaconsumerforaqueueandaproducerforatopic:
vendorOrderReceiver = session.createConsumer(vendorOrderQueue);
supplierOrderProducer = session.createProducer(supplierOrderTopic);
Thefollowingcodereceivestheincomingmessage,sendsanoutgoingmessage,and
commitsthesession.Themessageprocessinghasbeenremovedtokeepthesequencesimple:
inMessage = vendorOrderReceiver.receive();
// Process the incoming message and format the outgoing// message...supplierOrderProducer.send(orderMessage);...
session.commit();
Forsimplicity,thereareonlytwosuppliers,oneforCPUsandoneforharddrives.
3. Eachsupplierreceivestheorderfromtheordertopic,checksitsinventory,andthensends
theitemsorderedtothequeuenamedintheordermessage’s JMSReplyTo field.Ifitdoesnot
haveenoughoftheiteminstock,thesuppliersendswhatithas.ThesynchronousreceivefromthetopicandthesendtothequeuetakeplaceinoneJMStransaction.
receiver = session.createConsumer(orderTopic);
...inMessage = receiver.receive();if (inMessage instanceof MapMessage) {
orderMessage = (MapMessage) inMessage;
}// Process messageMessageProducer producer =
session.createProducer((Queue) orderMessage.getJMSReplyTo());
outMessage = session.createMapMessage();// Add content to messageproducer.send(outMessage);// Display message contentssession.commit();
4. Thevendorreceivesthesuppliers'repliesfromitsconfirmationqueueandupdatesthestate
oftheorder.Messagesareprocessedbyanasynchronousmessagelistener;thisstepshowstheuseofJMStransactionswithamessagelistener.
MapMessage component = (MapMessage) message;
...WritingRobustJMSApplications
TheJavaEE6Tutorial • January2013 892
orderNumber = component.getInt( "VendorOrderNumber ");
Order order = Order.getOrder(orderNumber).processSubOrder(component);session.commit();
5. Whenalloutstandingrepliesareprocessedforagivenorder,thevendormessagelistener
sendsamessagenotifyingtheretailerwhetheritcanfulfilltheorder.
Queue replyQueue = (Queue) order.order.getJMSReplyTo();
MessageProducer producer = session.createProducer(replyQueue);MapMessage retailerConfirmMessage = session.createMapMessage();// Format the messageproducer.send(retailerConfirmMessage);session.commit();
6. Theretailerreceivesthemessagefromthevendor:
inMessage = (MapMessage) orderConfirmReceiver.receive();
Figure48–2 illustratesthesesteps.
Theexamplecontainsfiveclasses: GenericSupplier ,Order,Retailer ,Vendor,and
VendorMessageListener .Theexamplealsocontainsa mainmethodandamethodthatruns
thethreadsofthe Retailer ,Vendor,andtwosupplierclasses.FIGURE48–2 Transactions:JMSClientExample
Vendor
OrderQ
Retailer
ConfirmQSupplier 
Order 
Topic
Vendor
ConfirmQRetailer VendorSupplier 1
Supplier N1
3333
4 5 62a 2b
Message Send
Message ReceiveMessage ListenWritingRobustJMSApplications
Chapter48 • JavaMessageServiceExamples 893
Allthemessagesusethe MapMessage messagetype.Synchronousreceivesareusedforall
messagereceptionexceptwhenthevendorprocessestherepliesofthesuppliers.Theserepliesareprocessedasynchronouslyanddemonstratehowtousetransactionswithinamessagelistener.
Atrandomintervals,the Vendorclassthrowsanexceptiontosimulateadatabaseproblemand
causearollback.
Allclassesexcept Retailer usetransactedsessions.
Theexampleusesthreequeuesnamed jms/AQueue ,jms/BQueue ,and jms/CQueue ,andone
topicnamed jms/OTopic .
YoucanuseeitherNetBeansIDEorAnttobuild,package,deploy,andrun
transactedexample .
▼ToRun transactedexample UsingNetBeansIDE
Inaterminalwindow,gotothefollowingdirectory:
tut-install /examples/jms/advanced/transactedexample/
Tocompileandpackagetheclient,followthesesteps:
a. FromtheFilemenu,chooseOpenProject.b. IntheOpenProjectdialog,navigateto:
tut-install /examples/jms/advanced/
c. Selectthe transactedexample folder.
d. SelecttheOpenasMainProjectcheckbox.e. ClickOpenProject.f. IntheProjectstab,right-clicktheprojectandselectBuild.Todeployandruntheclient,followthesesteps:a. Right-clickthe transactedexample projectandselectProperties.
b. SelectRunfromtheCategoriestree.c. IntheArgumentsfield,typeanumberthatspecifiesthenumberofcomputerstoorder:
31
2
3WritingRobustJMSApplications
TheJavaEE6Tutorial • January2013 894
d. ClickOK.
e. Right-clicktheprojectandselectRun.
Theoutputlookssomethinglikethis(alongwithsomeadditionaloutput):
Quantity to be ordered is 3
Retailer: ordered 3 computer(s)Vendor: Retailer ordered 3 Computer(s)Vendor: ordered 3 CPU(s) and hard drive(s)
CPU Supplier: Vendor ordered 3 CPU(s)CPU Supplier: sent 3 CPU(s)
CPU Supplier: committed transactionVendor: committed transaction 1
Hard Drive Supplier: Vendor ordered 3 Hard Drive(s)Hard Drive Supplier: sent 1 Hard Drive(s)Vendor: Completed processing for order 1
Hard Drive Supplier: committed transaction
Vendor: unable to send 3 computer(s)
Vendor: committed transaction 2
Retailer: Order not filledRetailer: placing another orderRetailer: ordered 6 computer(s)Vendor: JMSException occurred: javax.jms.JMSException:Simulated database concurrent access exceptionjavax.jms.JMSException: Simulated database concurrent access exception
at TransactedExample$Vendor.run(Unknown Source)
Vendor: rolled back transaction 1
Vendor: Retailer ordered 6 Computer(s)Vendor: ordered 6 CPU(s) and hard drive(s)CPU Supplier: Vendor ordered 6 CPU(s)Hard Drive Supplier: Vendor ordered 6 Hard Drive(s)CPU Supplier: sent 6 CPU(s)
CPU Supplier: committed transaction
Hard Drive Supplier: sent 6 Hard Drive(s)
Hard Drive Supplier: committed transactionVendor: committed transaction 1
Vendor: Completed processing for order 2Vendor: sent 6 computer(s)Retailer: Order filled
Vendor: committed transaction 2
Afteryouruntheclient,youcandeletethedestinationresourcesinNetBeansIDEorbyusing
thefollowingcommands:
asadmin delete-jms-resource jms/AQueue
asadmin delete-jms-resource jms/BQueueasadmin delete-jms-resource jms/CQueueasadmin delete-jms-resource jms/OTopic
▼ToRun transactedexample UsingAntandthe appclient Command
Inaterminalwindow,gotothefollowingdirectory:
tut-install /examples/jms/advanced/transactedexample/4
1WritingRobustJMSApplications
Chapter48 • JavaMessageServiceExamples 895
Tobuildandpackagetheclient,typethefollowingcommand:
ant
Createneededresources,deploytheclientJARfiletotheGlassFishServer,thenretrievethe
clientstubs:
ant getclient
IgnorethemessagethatstatesthattheapplicationisdeployedataURL.
Useacommandlikethefollowingtoruntheclient.
Theargumentspecifiesthenumberofcomputerstoorder.
appclient -client client-jar/transactedexampleClient.jar 3
Theoutputlookssomethinglikethis(alongwithsomeadditionaloutput):
Quantity to be ordered is 3
Retailer: ordered 3 computer(s)Vendor: Retailer ordered 3 Computer(s)Vendor: ordered 3 CPU(s) and hard drive(s)CPU Supplier: Vendor ordered 3 CPU(s)CPU Supplier: sent 3 CPU(s)
CPU Supplier: committed transactionVendor: committed transaction 1
Hard Drive Supplier: Vendor ordered 3 Hard Drive(s)Hard Drive Supplier: sent 1 Hard Drive(s)Vendor: Completed processing for order 1
Hard Drive Supplier: committed transaction
Vendor: unable to send 3 computer(s)
Vendor: committed transaction 2
Retailer: Order not filledRetailer: placing another orderRetailer: ordered 6 computer(s)Vendor: JMSException occurred: javax.jms.JMSException:Simulated database concurrent access exceptionjavax.jms.JMSException: Simulated database concurrent access exception
at TransactedExample$Vendor.run(Unknown Source)
Vendor: rolled back transaction 1
Vendor: Retailer ordered 6 Computer(s)Vendor: ordered 6 CPU(s) and hard drive(s)CPU Supplier: Vendor ordered 6 CPU(s)Hard Drive Supplier: Vendor ordered 6 Hard Drive(s)CPU Supplier: sent 6 CPU(s)
CPU Supplier: committed transaction
Hard Drive Supplier: sent 6 Hard Drive(s)
Hard Drive Supplier: committed transactionVendor: committed transaction 1
Vendor: Completed processing for order 2Vendor: sent 6 computer(s)Retailer: Order filled
Vendor: committed transaction 22
3
4
WritingRobustJMSApplications
TheJavaEE6Tutorial • January2013 896
Afteryouruntheclient,youcandeletethedestinationresourcesbyusingthefollowing
commands:
asadmin delete-jms-resource jms/AQueue
asadmin delete-jms-resource jms/BQueueasadmin delete-jms-resource jms/CQueueasadmin delete-jms-resource jms/OTopic
AnApplicationThatUsestheJMSAPIwithaSessionBean
Thissectionexplainshowtowrite,compile,package,deploy,andrunanapplicationthatuses
theJMSAPIinconjunctionwithasessionbean.Theapplicationcontainsthefollowingcomponents:
■Anapplicationclientthatinvokesasessionbean
■Asessionbeanthatpublishesseveralmessagestoatopic
■Amessage-drivenbeanthatreceivesandprocessesthemessagesusingadurabletopicsubscriberandamessageselector
Youwillfindthesourcefilesforthissectioninthe
tut-install /examples/jms/clientsessionmdb/ directory.Pathnamesinthissectionare
relativetothisdirectory.
WritingtheApplicationComponentsforthe
clientsessionmdb Example
Thisapplicationdemonstrateshowtosendmessagesfromanenterprisebean(inthiscase,a
sessionbean)ratherthanfromanapplicationclient,asintheexamplein Chapter25,“A
Message-DrivenBeanExample.”Figure48–3 illustratesthestructureofthisapplication.5AnApplicationThatUsestheJMSAPIwithaSessionBean
Chapter48 • JavaMessageServiceExamples 897
ThePublisherenterprisebeaninthisexampleistheenterprise-applicationequivalentofa
wire-servicenewsfeedthatcategorizesnewseventsintosixnewscategories.Themessage-drivenbeancouldrepresentanewsroom,wherethesportsdesk,forexample,wouldsetupasubscriptionforallnewseventspertainingtosports.
TheapplicationclientintheexampleinjectsthePublisherenterprisebean’sremotehome
interfaceandthencallsthebean’sbusinessmethod.Theenterprisebeancreates18textmessages.Foreachmessage,itsetsa Stringpropertyrandomlytooneofsixvalues
representingthenewscategoriesandthenpublishesthemessagetoatopic.Themessage-drivenbeanusesamessageselectorforthepropertytolimitwhichofthepublishedmessagesitreceives.
CodingtheApplicationClient: MyAppClient.java
Theapplicationclient, clientsessionmdb-app-client/src/java/MyAppClient.java ,
performsnoJMSAPIoperationsandsoissimplerthantheclientin Chapter25,“A
Message-DrivenBeanExample.” TheclientusesdependencyinjectiontoobtainthePublisher
enterprisebean’sbusinessinterface:
@EJB(name= "PublisherRemote ")
static private PublisherRemote publisher;
Theclientthencallsthebean’sbusinessmethodtwice.
CodingthePublisherSessionBean
ThePublisherbeanisastatelesssessionbeanthathasonebusinessmethod.ThePublisherbean
usesaremoteinterfaceratherthanalocalinterfacebecauseitisaccessedfromtheapplicationclient.FIGURE48–3 AnEnterpriseBeanApplication:ClienttoSessionBeantoMessage-DrivenBean
Java EE Server
PublishesTopic
EJB Container
 EJB Container
MDB Instance
Msg
Delivers
Msg
Session Bean
Application 
ClientCallsAnApplicationThatUsestheJMSAPIwithaSessionBean
TheJavaEE6Tutorial • January2013 898
Theremoteinterface, clientsessionmdb-ejb/src/java/sb/PublisherRemote.java ,
declaresasinglebusinessmethod, publishNews .
Thebeanclass, clientsessionmdb-ejb/src/java/sb/PublisherBean.java ,implementsthe
publishNews methodanditshelpermethod chooseType .Thebeanclassalsoinjects
SessionContext ,ConnectionFactory ,and Topicresourcesandimplements @PostConstruct
and@PreDestroy callbackmethods.Thebeanclassbeginsasfollows:
@Stateless
@Remote({PublisherRemote.class})public class PublisherBean implements PublisherRemote {
@Resource
private SessionContext sc;
@Resource(lookup = "jms/ConnectionFactory ")
private ConnectionFactory connectionFactory;
@Resource(lookup = "jms/Topic ")
private Topic topic;...
The@PostConstruct callbackmethodofthebeanclass, makeConnection ,createsthe
Connection usedbythebean.Thebusinessmethod publishNews createsa Sessionanda
MessageProducer andpublishesthemessages.
The@PreDestroy callbackmethod, endConnection ,deallocatestheresourcesthatwere
allocatedbythe @PostConstruct callbackmethod.Inthiscase,themethodclosesthe
Connection .
CodingtheMessage-DrivenBean: MessageBean.java
Themessage-drivenbeanclass, clientsessionmdb-ejb/src/java/mdb/MessageBean.java ,is
almostidenticaltotheonein Chapter25,“AMessage-DrivenBeanExample.” However,the
@MessageDriven annotationisdifferent,becauseinsteadofaqueue,thebeanisusingatopic
withadurablesubscription,anditisalsousingamessageselector.Therefore,theannotationsetstheactivationconfigproperties messageSelector ,subscriptionDurability ,clientId ,
andsubscriptionName ,asfollows:
@MessageDriven(mappedName = "jms/Topic ", activationConfig = {
@ActivationConfigProperty(propertyName = "messageSelector ",
propertyValue = "NewsType = ’Sports’ OR NewsType = ’Opinion’ ")
, @ActivationConfigProperty(propertyName = "subscriptionDurability ",
propertyValue = "Durable ")
, @ActivationConfigProperty(propertyName = "clientId ",
propertyValue = "MyID")
, @ActivationConfigProperty(propertyName = "subscriptionName ",
propertyValue = "MySub ")
})AnApplicationThatUsestheJMSAPIwithaSessionBean
Chapter48 • JavaMessageServiceExamples 899
Note–Foramessage-drivenbean,thedestinationisspecifiedwiththe mappedName element
insteadofthe lookupelement.
TheJMSresourceadapterusesthesepropertiestocreateaconnectionfactoryforthe
message-drivenbeanthatallowsthebeantouseadurablesubscriber.
CreatingResourcesforthe clientsessionmdb
Example
Thisexampleusesthetopicnamed jms/Topic andtheconnectionfactory
jms/ConnectionFactory ,whicharealsousedinpreviousexamples.Ifyoudeletedthe
connectionfactoryortopic,theywillberecreatedwhenyoudeploytheexample.
Runningthe clientsessionmdb Example
YoucanuseeitherNetBeansIDEorAnttobuild,package,deploy,andrunthe
clientsessionmdb example.
▼ToRunthe clientsessionmdb ExampleUsingNetBeansIDE
Tocompileandpackagetheproject,followthesesteps:
a. FromtheFilemenu,chooseOpenProject.b. IntheOpenProjectdialog,navigateto:
tut-install /examples/jms/
c. Selectthe clientsessionmdb folder.
d. SelecttheOpenasMainProjectcheckboxandtheOpenRequiredProjectscheckbox.e. ClickOpenProject.f. IntheProjectstab,right-clickthe clientsessionmdb projectandselectBuild.
Thistaskcreatesthefollowing:
■AnapplicationclientJARfilethatcontainstheclientclassfileandthesessionbean’s
remoteinterface,alongwithamanifestfilethatspecifiesthemainclassandplacestheEJBJARfileinitsclasspath
■AnEJBJARfilethatcontainsboththesessionbeanandthemessage-drivenbean1AnApplicationThatUsestheJMSAPIwithaSessionBean
TheJavaEE6Tutorial • January2013 900
■AnapplicationEARfilethatcontainsthetwoJARfiles
Right-clicktheprojectandselectRun.
Thiscommandcreatesanyneededresources,deploystheproject,returnsaJARfilenamed
clientsessionmdbClient.jar ,andthenexecutesit.
TheoutputoftheapplicationclientintheOutputpanelookslikethis(precededbyapplication
clientcontaineroutput):
To view the bean output,
check <install_dir>/domains/domain1/logs/server.log.
Theoutputfromtheenterprisebeansappearsintheserverlog
(domain-dir /logs/server.log ),wrappedinlogginginformation.ThePublishersessionbean
sendstwosetsof18messagesnumbered0through17.Becauseofthemessageselector,themessage-drivenbeanreceivesonlythemessageswhose NewsType propertyis Sportsor
Opinion.
▼ToRunthe clientsessionmdb ExampleUsingAnt
Gotothefollowingdirectory:
tut-install /examples/jms/clientsessionmdb/
Tocompilethesourcefilesandpackagetheapplication,usethefollowingcommand:
ant
Theantcommandcreatesthefollowing:
■AnapplicationclientJARfilethatcontainstheclientclassfileandthesessionbean’sremote
interface,alongwithamanifestfilethatspecifiesthemainclassandplacestheEJBJARfileinitsclasspath
■AnEJBJARfilethatcontainsboththesessionbeanandthemessage-drivenbean
■AnapplicationEARfilethatcontainsthetwoJARfiles
Theclientsessionmdb.ear fileiscreatedinthe distdirectory.
Tocreateanyneededresources,deploytheapplication,andruntheclient,usethefollowing
command:
ant run
IgnorethemessagethatstatesthattheapplicationisdeployedataURL.
Theclientdisplaystheselines(precededbyapplicationclientcontaineroutput):
To view the bean output,
check <install_dir>/domains/domain1/logs/server.log.2
1
2
3AnApplicationThatUsestheJMSAPIwithaSessionBean
Chapter48 • JavaMessageServiceExamples 901
Theoutputfromtheenterprisebeansappearsintheserverlogfile,wrappedinlogging
information.ThePublishersessionbeansendstwosetsof18messagesnumbered0through17.Becauseofthemessageselector,themessage-drivenbeanreceivesonlythemessageswhoseNewsType propertyis SportsorOpinion.
AnApplicationThatUsestheJMSAPIwithanEntity
Thissectionexplainshowtowrite,compile,package,deploy,andrunanapplicationthatuses
theJMSAPIwithanentity.Theapplicationusesthefollowingcomponents:
■Anapplicationclientthatbothsendsandreceivesmessages
■Twomessage-drivenbeans
■Anentityclass
Youwillfindthesourcefilesforthissectioninthe
tut-install /examples/jms/clientmdbentity/ directory.Pathnamesinthissectionarerelative
tothisdirectory.
Overviewofthe clientmdbentity Example
Application
Thisapplicationsimulates,inasimplifiedway,theworkflowofacompany’shumanresources
(HR)departmentwhenitprocessesanewhire.ThisapplicationalsodemonstrateshowtousetheJavaEEplatformtoaccomplishataskthatmanyJMSapplicationsneedtoperform.
AJMSclientmustoftenwaitforseveralmessagesfromvarioussources.Itthenusesthe
informationinallthesemessagestoassembleamessagethatitthensendstoanotherdestination.Thecommontermforthisprocessis joiningmessages .Suchataskmustbe
transactional,withallthereceivesandthesendasasingletransaction.Ifnotallthemessagesarereceivedsuccessfully,thetransactioncanberolledback.Foranapplicationclientexamplethatillustratesthistask,see
“ALocalTransactionExample”onpage891 .
Amessage-drivenbeancanprocessonlyonemessageatatimeinatransaction.Toprovidethe
abilitytojoinmessages,anapplicationcanhavethemessage-drivenbeanstoretheinteriminformationinanentity.Theentitycanthendeterminewhetheralltheinformationhasbeenreceived;whenithas,theentitycanreportthisbacktooneofthemessage-drivenbeans,whichthencreatesandsendsthemessagetotheotherdestination.Afterithascompleteditstask,theentitycanberemoved.
Thebasicstepsoftheapplicationareasfollows.AnApplicationThatUsestheJMSAPIwithanEntity
TheJavaEE6Tutorial • January2013 902
1. TheHRdepartment’sapplicationclientgeneratesanemployeeIDforeachnewhireand
thenpublishesamessage(M1)containingthenewhire’sname,employeeID,andposition.Theclientthencreatesatemporaryqueue, ReplyQueue ,withamessagelistenerthatwaits
forareplytothemessage.(See
“CreatingTemporaryDestinations”onpage846 formore
information.)
2. Twomessage-drivenbeansprocesseachmessage:Onebean, OfficeMDB ,assignsthenew
hire’sofficenumber,andtheotherbean, EquipmentMDB ,assignsthenewhire’sequipment.
Thefirstbeantoprocessthemessagecreatesandpersistsanentitynamed SetupOffice ,
thencallsabusinessmethodoftheentitytostoretheinformationithasgenerated.Thesecondbeanlocatestheexistingentityandcallsanotherbusinessmethodtoadditsinformation.
3. Whenboththeofficeandtheequipmenthavebeenassigned,theentitybusinessmethod
returnsavalueof truetothemessage-drivenbeanthatcalledthemethod.The
message-drivenbeanthensendstothereplyqueueamessage(M2)describingtheassignments.Thenitremovestheentity.Theapplicationclient’smessagelistenerretrievestheinformation.
Figure48–4 illustratesthestructureofthisapplication.Ofcourse,anactualHRapplication
wouldhavemorecomponents;otherbeanscouldsetuppayrollandbenefitsrecords,scheduleorientation,andsoon.
Figure48–4 assumesthat OfficeMDB isthefirstmessage-drivenbeantoconsumethemessage
fromtheclient. OfficeMDB thencreatesandpersiststhe SetupOffice entityandstorestheoffice
information. EquipmentMDB thenfindstheentity,storestheequipmentinformation,andlearns
thattheentityhascompleteditswork. EquipmentMDB thensendsthemessagetothereplyqueue
andremovestheentity.AnApplicationThatUsestheJMSAPIwithanEntity
Chapter48 • JavaMessageServiceExamples 903
WritingtheApplicationComponentsforthe
clientmdbentity Example
Writingthecomponentsoftheapplicationinvolvescodingtheapplicationclient,the
message-drivenbeans,andtheentityclass.
CodingtheApplicationClient: HumanResourceClient.java
Theapplicationclient,
clientmdbentity-app-client/src/java/HumanResourceClient.java ,performsthe
followingsteps:
1. Injects ConnectionFactory andTopicresources
2. Createsa TemporaryQueue toreceivenotificationofprocessingthatoccurs,basedon
new-hireeventsithaspublished
3. Createsa MessageConsumer forthe TemporaryQueue ,setsthe MessageConsumer ’smessage
listener,andstartstheconnection
4. Createsa MessageProducer anda MapMessage
5. Createsfivenewemployeeswithrandomlygeneratednames,positions,andIDnumbers(in
sequence)andpublishesfivemessagescontainingthisinformationFIGURE48–4 AnEnterpriseBeanApplication:ClienttoMessage-DrivenBeanstoEntity
Java EE Server
FindsCreates and 
Persists
HR
Client
M1
M2 M2
Reply QueueNew Hire TopicM1
OfficeMDB
EquipmentMDB
 SetupOffice 
Entity
M1
Message Passing
Method InvocationAnApplicationThatUsestheJMSAPIwithanEntity
TheJavaEE6Tutorial • January2013 904
Themessagelistener, HRListener ,waitsformessagesthatcontaintheassignedofficeand
equipmentforeachemployee.Whenamessagearrives,themessagelistenerdisplaystheinformationreceivedanddetermineswhetherallfivemessageshavearrived.Whentheyhave,themessagelistenernotifiesthe mainmethod,whichthenexits.
CodingtheMessage-DrivenBeansforthe clientmdbentity Example
Thisexampleusestwomessage-drivenbeans:
■clientmdbentity-ejb/src/java/eb/EquipmentMDB.java
■clientmdbentity-ejb/src/java/eb/OfficeMDB.java
Thebeanstakethefollowingsteps:
1. Theyinject MessageDrivenContext andConnectionFactory resources.
2. The onMessage methodretrievestheinformationinthemessage.The EquipmentMDB ’s
onMessage methodchoosesequipment,basedonthenewhire’sposition;the OfficeMDB ’s
onMessage methodrandomlygeneratesanofficenumber.
3. Afteraslightdelaytosimulaterealworldprocessinghitches,the onMessage methodcallsa
helpermethod, compose.
4. The composemethodtakesthefollowingsteps:
a. Iteithercreatesandpersiststhe SetupOffice entityorfindsitbyprimarykey.
b. Itusestheentitytostoretheequipmentortheofficeinformationinthedatabase,calling
eitherthe doEquipmentList orthe doOfficeNumber businessmethod.
c. Ifthebusinessmethodreturns true,meaningthatalloftheinformationhasbeenstored,
itcreatesaconnectionandasession,retrievesthereplydestinationinformationfromthemessage,createsa MessageProducer ,andsendsareplymessagethatcontainsthe
informationstoredintheentity.
d. Itremovestheentity.
CodingtheEntityClassforthe clientmdbentity Example
TheSetupOffice class, clientmdbentity-ejb/src/java/eb/SetupOffice.java ,isanentity
class.Theentityandthemessage-drivenbeansarepackagedtogetherinanEJBJARfile.Theentityclassisdeclaredasfollows:
@Entity
public class SetupOffice implements Serializable {
Theclasscontainsano-argumentconstructorandaconstructorthattakestwoarguments,the
employeeIDandname.ItalsocontainsgetterandsettermethodsfortheemployeeID,name,officenumber,andequipmentlist.ThegettermethodfortheemployeeIDhasthe @Id
annotationtoindicatethatthisfieldistheprimarykey:AnApplicationThatUsestheJMSAPIwithanEntity
Chapter48 • JavaMessageServiceExamples 905
@Id
public String getEmployeeId() {
return id;
}
Theclassalsoimplementsthetwobusinessmethods, doEquipmentList anddoOfficeNumber ,
andtheirhelpermethod, checkIfSetupComplete .
Themessage-drivenbeanscallthebusinessmethodsandthegettermethods.Thepersistence.xml filefortheentityspecifiesthemostbasicsettings:
<?xml version= "1.0"encoding= "UTF-8 "?>
<persistence version= "2.0"
xmlns= "http://java.sun.com/xml/ns/persistence "
xmlns:xsi= "http://www.w3.org/2001/XMLSchema-instance "
xsi:schemaLocation= "http://java.sun.com/xml/ns/persistence
http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd ">
<persistence-unit name= "clientmdbentity-ejbPU "transaction-type= "JTA">
<provider>org.eclipse.persistence.jpa.PersistenceProvider</provider><jta-data-source>jdbc/__default</jta-data-source><class>eb.SetupOffice</class><properties>
<property name= "eclipselink.ddl-generation "
value= "drop-and-create-tables "/>
</properties>
</persistence-unit>
</persistence>
CreatingResourcesforthe clientmdbentity Example
Thisexampleusestheconnectionfactory jms/ConnectionFactory andthetopic jms/Topic ,
bothofwhichyouusedin “AnApplicationThatUsestheJMSAPIwithaSessionBean”on
page897.ItalsousestheJDBCresourcenamed jdbc/__default ,whichisenabledbydefault
whenyoustarttheGlassFishServer.
Ifyoudeletedtheconnectionfactoryortopic,theywillbecreatedwhenyoudeploythe
example.
Runningthe clientmdbentity Example
YoucanuseeitherNetBeansIDEorAnttobuild,package,deploy,andrunthe
clientmdbentity example.AnApplicationThatUsestheJMSAPIwithanEntity
TheJavaEE6Tutorial • January2013 906
▼ToRunthe clientmdbentity ExampleUsingNetBeansIDE
FromtheFilemenu,chooseOpenProject.
IntheOpenProjectdialog,navigateto:
tut-install /examples/jms/
Selectthe clientmdbentity folder.
SelecttheOpenasMainProjectcheckboxandtheOpenRequiredProjectscheckbox.ClickOpenProject.IntheProjectstab,right-clickthe clientmdbentity projectandselectBuild.
Thistaskcreatesthefollowing:
■AnapplicationclientJARfilethatcontainstheclientclassandlistenerclassfiles,alongwith
amanifestfilethatspecifiesthemainclass
■AnEJBJARfilethatcontainsthemessage-drivenbeansandtheentityclass,alongwiththepersistence.xml file
■AnapplicationEARfilethatcontainsthetwoJARfilesalongwithan application.xml file
IftheJavaDBdatabaseisnotalreadyrunning,followthesesteps:a. ClicktheServicestab.b. ExpandtheDatabasesnode.c. Right-clicktheJavaDBnodeandselectStartServer.IntheProjectstab,right-clicktheprojectandselectRun.
Thiscommandcreatesanyneededresources,deploystheproject,returnsaclientJARfile
named clientmdbentityClient.jar ,andthenexecutesit.
TheoutputoftheapplicationclientintheOutputpanelookssomethinglikethis:
PUBLISHER: Setting hire ID to 50, name Bill Tudor, position Programmer
PUBLISHER: Setting hire ID to 51, name Carol Jones, position Senior ProgrammerPUBLISHER: Setting hire ID to 52, name Mark Wilson, position ManagerPUBLISHER: Setting hire ID to 53, name Polly Wren, position Senior ProgrammerPUBLISHER: Setting hire ID to 54, name Joe Lawrence, position DirectorWaiting for 5 message(s)New hire event processed:
Employee ID: 52Name: Mark WilsonEquipment: PDAOffice number: 2941
2
3
456
7
8AnApplicationThatUsestheJMSAPIwithanEntity
Chapter48 • JavaMessageServiceExamples 907
Waiting for 4 message(s)
New hire event processed:
Employee ID: 53Name: Polly Wren
Equipment: LaptopOffice number: 186
Waiting for 3 message(s)New hire event processed:
Employee ID: 54Name: Joe LawrenceEquipment: Java PhoneOffice number: 135
Waiting for 2 message(s)New hire event processed:
Employee ID: 50Name: Bill TudorEquipment: Desktop SystemOffice number: 200
Waiting for 1 message(s)New hire event processed:
Employee ID: 51Name: Carol JonesEquipment: LaptopOffice number: 262
Theoutputfromthemessage-drivenbeansandtheentityclassappearsintheserverlog,
wrappedinlogginginformation.
Foreachemployee,theapplicationfirstcreatestheentityandthenfindsit.Youmaysee
runtimeerrorsintheserverlog,andtransactionrollbacksmayoccur.Theerrorsoccurifbothofthemessage-drivenbeansdiscoveratthesametimethattheentitydoesnotyetexist,sotheybothtrytocreateit.Thefirstattemptsucceeds,butthesecondfailsbecausethebeanalreadyexists.Aftertherollback,thesecondmessage-drivenbeantriesagainandsucceedsinfindingtheentity.Container-managedtransactionsallowtheapplicationtoruncorrectly,inspiteoftheseerrors,withnospecialprogramming.
▼ToRunthe clientmdbentity ExampleUsingAnt
Gotothefollowingdirectory:
tut-install /examples/jms/clientmdbentity/
Tocompilethesourcefilesandpackagetheapplication,usethefollowingcommand:
ant
Theantcommandcreatesthefollowing:
■AnapplicationclientJARfilethatcontainstheclientclassandlistenerclassfiles,alongwith
amanifestfilethatspecifiesthemainclass
■AnEJBJARfilethatcontainsthemessage-drivenbeansandtheentityclass,alongwiththepersistence.xml file
■AnapplicationEARfilethatcontainsthetwoJARfilesalongwithan application.xml file1
2AnApplicationThatUsestheJMSAPIwithanEntity
TheJavaEE6Tutorial • January2013 908
Tocreateanyneededresources,deploytheapplication,andruntheclient,usethefollowing
command:
ant run
Thiscommandstartsthedatabaseserverifitisnotalreadyrunning,thendeploysandrunstheapplication.
IgnorethemessagethatstatesthattheapplicationisdeployedataURL.Theoutputintheterminalwindowlookssomethinglikethis(precededbyapplicationclient
containeroutput):
running application client container.
PUBLISHER: Setting hire ID to 50, name Bill Tudor, position ProgrammerPUBLISHER: Setting hire ID to 51, name Carol Jones, position Senior ProgrammerPUBLISHER: Setting hire ID to 52, name Mark Wilson, position ManagerPUBLISHER: Setting hire ID to 53, name Polly Wren, position Senior ProgrammerPUBLISHER: Setting hire ID to 54, name Joe Lawrence, position DirectorWaiting for 5 message(s)New hire event processed:
Employee ID: 52Name: Mark WilsonEquipment: PDAOffice number: 294
Waiting for 4 message(s)New hire event processed:
Employee ID: 53Name: Polly WrenEquipment: LaptopOffice number: 186
Waiting for 3 message(s)New hire event processed:
Employee ID: 54Name: Joe LawrenceEquipment: Java PhoneOffice number: 135
Waiting for 2 message(s)New hire event processed:
Employee ID: 50
Name: Bill TudorEquipment: Desktop SystemOffice number: 200
Waiting for 1 message(s)New hire event processed:
Employee ID: 51Name: Carol JonesEquipment: LaptopOffice number: 262
Theoutputfromthemessage-drivenbeansandtheentityclassappearsintheserverlog,
wrappedinlogginginformation.
Foreachemployee,theapplicationfirstcreatestheentityandthenfindsit.Youmaysee
runtimeerrorsintheserverlog,andtransactionrollbacksmayoccur.Theerrorsoccurifbothofthemessage-drivenbeansdiscoveratthesametimethattheentitydoesnotyetexist,sotheybothtrytocreateit.Thefirstattemptsucceeds,butthesecondfailsbecausethebeanalready3AnApplicationThatUsestheJMSAPIwithanEntity
Chapter48 • JavaMessageServiceExamples 909
exists.Aftertherollback,thesecondmessage-drivenbeantriesagainandsucceedsinfinding
theentity.Container-managedtransactionsallowtheapplicationtoruncorrectly,inspiteoftheseerrors,withnospecialprogramming.
AnApplicationExampleThatConsumesMessagesfroma
RemoteServer
Thissectionandthefollowingsectionexplainhowtowrite,compile,package,deploy,andruna
pairofJavaEEmodulesthatrunontwoJavaEEserversandthatusetheJMSAPItointerchangemessageswitheachother.Itisacommonpracticetodeploydifferentcomponentsofanenterpriseapplicationondifferentsystemswithinacompany,andtheseexamplesillustrateonasmallscalehowtodothisforanapplicationthatusestheJMSAPI.
Thetwoexamplesworkinslightlydifferentways.Inthefirstexample,thedeployment
informationforamessage-drivenbeanspecifiestheremoteserverfromwhichitwill consume
messages.Inthenextexample,describedin
“AnApplicationExampleThatDeploysa
Message-DrivenBeanonTwoServers”onpage916 ,thesamemessage-drivenbeanisdeployed
ontwodifferentservers,soitistheclientmodulethatspecifiestheservers(onelocal,oneremote)towhichitis sendingmessages.
Thisfirstexampledividestheexamplein
Chapter25,“AMessage-DrivenBeanExample,” into
twomodules:onecontainingtheapplicationclient,andtheothercontainingthemessage-drivenbean.
Youwillfindthesourcefilesforthissectioninthe tut-install /examples/jms/consumeremote/
directory.Pathnamesinthissectionarerelativetothisdirectory.
Overviewofthe consumeremote ExampleModules
Thisexampleisverysimilartotheonein Chapter25,“AMessage-DrivenBeanExample,”
exceptforthefactthatitispackagedastwoseparatemodules:
■Onemodulecontainstheapplicationclient,whichrunsontheremotesystemandsends
threemessagestoaqueue.
■Theothermodulecontainsthemessage-drivenbean,whichisdeployedonthelocalserverandconsumesthemessagesfromthequeueontheremoteserver.
Thebasicstepsofthemodulesareasfollows:
1. TheadministratorstartstwoJavaEEservers,oneoneachsystem.
2. Onthelocalserver,theadministratordeploysthemessage-drivenbeanmodule,which
specifiestheremoteserverwheretheclientisdeployed.
3. Ontheremoteserver,theadministratorplacestheclientJARfile.AnApplicationExampleThatConsumesMessagesfromaRemoteServer
TheJavaEE6Tutorial • January2013 910
4. Theclientmodulesendsthreemessagestoaqueue.
5. Themessage-drivenbeanconsumesthemessages.
Figure48–5 illustratesthestructureofthisapplication.Youcanseethatitisalmostidenticalto
Figure25–1 exceptthattherearetwoJavaEEservers.Thequeueusedistheoneontheremote
server;thequeuemustalsoexistonthelocalserverforresourceinjectiontosucceed.
WritingtheModuleComponentsforthe
consumeremote Example
Writingthecomponentsofthemodulesinvolves
■Codingtheapplicationclient
■Codingthemessage-drivenbean
Theapplicationclient, jupiterclient/src/java/SimpleClient.java ,isalmostidenticalto
theonein “The simplemessage ApplicationClient”onpage492 .
Similarly,themessage-drivenbean, earthmdb/src/java/MessageBean.java ,isalmost
identicaltotheonein “TheMessage-DrivenBeanClass”onpage493 .Theonlysignificant
differenceisthattheactivationconfigpropertiesincludeonepropertythatspecifiesthenameoftheremotesystem.Youneedtoeditthesourcefiletospecifythenameofyoursystem.
CreatingResourcesforthe consumeremote Example
Theapplicationclientcanuseanyconnectionfactorythatexistsontheremoteserver;inthis
example,ituses jms/ConnectionFactory .Bothcomponentsusethequeuenamed jms/Queue ,FIGURE48–5 AJavaEEApplicationThatConsumesMessagesfromaRemoteServer
Java EE Server on Jupiter
Java EE Server on Earth Delivers Sends
EJB Container
MDB Instance
Queue
Msg
 Msg
Application 
Client
AnApplicationExampleThatConsumesMessagesfromaRemoteServer
Chapter48 • JavaMessageServiceExamples 911
whichyoucreatedfor “ASimpleExampleofSynchronousMessageReceives”onpage860 .The
message-drivenbeandoesnotneedapreviouslycreatedconnectionfactory;theresourceadaptercreatesoneforit.
Anymissingresourceswillbecreatedwhenyoudeploytheexample.
UsingTwoApplicationServersforthe consumeremote
Example
Asin“RunningJMSClientsonMultipleSystems”onpage880 ,thetwoserversarereferredtoas
earthandjupiter.
TheGlassFishServermustberunningonbothsystems.
Beforeyoucanruntheexample,youmustchangethedefaultnameoftheJMShoston jupiter,
asdescribedin “ToChangetheDefaultHostNameUsingtheAdministrationConsole”on
page882.Ifyouhavealreadyperformedthistask,youdonothavetorepeatit.
Whichsystemyouusetopackageanddeploythemodulesandwhichsystemyouusetorunthe
clientdependonyournetworkconfiguration(specifically,whichfilesystemyoucanaccessremotely).Theseinstructionsassumeyoucanaccessthefilesystemof jupiterfrom earthbut
cannotaccessthefilesystemof earthfrom jupiter.(Youcanusethesamesystemsfor
jupiterandearththatyouusedin
“RunningJMSClientsonMultipleSystems”onpage880 .)
Youcanpackagebothmoduleson earthanddeploythemessage-drivenbeanthere.Theonly
actionyouperformon jupiterisrunningtheclientmodule.
Runningthe consumeremote Example
YoucanuseeitherNetBeansIDEorAnttobuild,package,deploy,andrunthe consumeremote
example.
▼ToRunthe consumeremote ExampleUsingNetBeansIDE
Toeditthemessage-drivenbeansourcefileandthenpackage,deploy,andrunthemodules
usingNetBeansIDE,followthesesteps.
FromtheFilemenu,chooseOpenProject.IntheOpenProjectdialog,navigateto:
tut-install /examples/jms/consumeremote/
Selectthe earthmdb folder.1
2
3AnApplicationExampleThatConsumesMessagesfromaRemoteServer
TheJavaEE6Tutorial • January2013 912
SelecttheOpenasMainProjectcheckbox.
ClickOpenProject.Editthe MessageBean.java fileasfollows:
a. IntheProjectstab,expandthe earthmdb ,SourcePackages,and mdbnodes,then
double-click MessageBean.java .
b. Findthefollowinglinewithinthe @MessageDriven annotation:
@ActivationConfigProperty(propertyName = "addressList ",
propertyValue = "remotesystem "),
c. Replace remotesystem withthenameofyourremotesystem.
Right-clickthe earthmdb projectandselectBuild.
ThiscommandcreatesaJARfilethatcontainsthebeanclassfile.
FromtheFilemenu,chooseOpenProject.Selectthe jupiterclient folder.
SelecttheOpenasMainProjectcheckbox.ClickOpenProject.IntheProjectstab,right-clickthe jupiterclient projectandselectBuild.
ThiscommandcreatesaJARfilethatcontainstheclientclassfileandamanifestfile.
Right-clickthe earthmdb projectandselectDeploy.
Tocopythe jupiterclient moduletotheremotesystem,followthesesteps:
a. Changetothedirectory jupiterclient/dist :
cdtut-install /examples/jms/consumeremote/jupiterclient/dist
b. Typeacommandlikethefollowing:
cp jupiterclient.jar F:/
Thatis,copytheclientJARfiletoalocationontheremotefilesystem.Youcanusethefile
systemgraphicaluserinterfaceonyoursysteminsteadofthecommandline.4
56
7
8
9
101112
13
14AnApplicationExampleThatConsumesMessagesfromaRemoteServer
Chapter48 • JavaMessageServiceExamples 913
Toruntheapplicationclient,followthesesteps:
a. Ifyoudidnotpreviouslycreatethequeueandconnectionfactoryontheremotesystem
(jupiter),gotothe tut-install /examples/jms/consumeremote/jupiterclient/ directory
ontheremotesystemandtypethefollowingcommand:
ant add-resources
b. Gotothedirectoryontheremotesystem( jupiter)whereyoucopiedtheclientJARfile.
c. Todeploytheclientmoduleandretrievetheclientstubs,usethefollowingcommand:
asadmin deploy --retrieve . jupiterclient.jar
ThiscommanddeploystheclientJARfileandretrievestheclientstubsinafilenamed
jupiterclientClient.jar
d. Toruntheclient,usethefollowingcommand:
appclient -client jupiterclientClient.jar
Onjupiter,theoutputofthe appclient commandlookslikethis(precededbyapplication
clientcontaineroutput):
Sending message: This is message 1 from jupiterclient
Sending message: This is message 2 from jupiterclientSending message: This is message 3 from jupiterclient
Onearth,theoutputintheserverloglookssomethinglikethis(precededbylogging
information):
MESSAGE BEAN: Message received: This is message 1 from jupiterclient
MESSAGE BEAN: Message received: This is message 2 from jupiterclientMESSAGE BEAN: Message received: This is message 3 from jupiterclient
e. Toundeploytheclientafteryoufinishrunningit,usethefollowingcommand:
asadmin undeploy jupiterclient
▼ToRunthe consumeremote ExampleUsingAnt
Toeditthemessage-drivenbeansourcefileandthenpackage,deploy,andrunthemodules
usingAnt,followthesesteps.
Openthefollowingfileinaneditor:
tut-install /examples/jms/consumeremote/earthmdb/src/java/mdb/MessageBean.java
Findthefollowinglinewithinthe @MessageDriven annotation:
@ActivationConfigProperty(propertyName = "addressList ",
propertyValue = "remotesystem "),
Replace remotesystem withthenameofyourremotesystem,thensaveandclosethefile.15
1
2
3AnApplicationExampleThatConsumesMessagesfromaRemoteServer
TheJavaEE6Tutorial • January2013 914
Gotothefollowingdirectory:
tut-install /examples/jms/consumeremote/earthmdb/
Typethefollowingcommand:
ant
ThiscommandcreatesaJARfilethatcontainsthebeanclassfile.
Typethefollowingcommand:
ant deploy
Gotothe jupiterclient directory:
cd ../jupiterclient
Typethefollowingcommand:
ant
ThiscommandcreatesaJARfilethatcontainstheclientclassfileandamanifestfile.
Tocopythe jupiterclient moduletotheremotesystem,followthesesteps:
a. Changetothedirectory jupiterclient/dist :
cd ../jupiterclient/dist
b. Typeacommandlikethefollowing:
cp jupiterclient.jar F:/
Thatis,copytheclientJARfiletoalocationontheremotefilesystem.
Toruntheapplicationclient,followthesesteps:a. Ifyoudidnotpreviouslycreatethequeueandconnectionfactoryontheremotesystem
(jupiter),gotothe tut-install /examples/jms/consumeremote/jupiterclient/ directory
ontheremotesystemandtypethefollowingcommand:
ant add-resources
b. Gotothedirectoryontheremotesystem( jupiter)whereyoucopiedtheclientJARfile.
c. Todeploytheclientmoduleandretrievetheclientstubs,usethefollowingcommand:
asadmin deploy --retrieve . jupiterclient.jar
ThiscommanddeploystheclientJARfileandretrievestheclientstubsinafilenamed
jupiterclientClient.jar
d. Toruntheclient,usethefollowingcommand:
appclient -client jupiterclientClient.jar4
5
6
78
9
10AnApplicationExampleThatConsumesMessagesfromaRemoteServer
Chapter48 • JavaMessageServiceExamples 915
Onjupiter,theoutputofthe appclient commandlookslikethis(precededbyapplication
clientcontaineroutput):
Sending message: This is message 1 from jupiterclient
Sending message: This is message 2 from jupiterclientSending message: This is message 3 from jupiterclient
Onearth,theoutputintheserverloglookssomethinglikethis(precededbylogging
information):
MESSAGE BEAN: Message received: This is message 1 from jupiterclient
MESSAGE BEAN: Message received: This is message 2 from jupiterclientMESSAGE BEAN: Message received: This is message 3 from jupiterclient
e. Toundeploytheclientafteryoufinishrunningit,usethefollowingcommand:
asadmin undeploy jupiterclient
AnApplicationExampleThatDeploysaMessage-DrivenBean
onTwoServers
Thissection,liketheprecedingone,explainshowtowrite,compile,package,deploy,andruna
pairofJavaEEmodulesthatusetheJMSAPIandrunontwoJavaEEservers.Thesemodulesareslightlymorecomplexthantheonesinthefirstexample.
Themodulesusethefollowingcomponents:
■Anapplicationclientthatisdeployedonthelocalserver.Itusestwoconnectionfactories,an
ordinaryoneandoneconfiguredtocommunicatewiththeremoteserver,tocreatetwopublishersandtwosubscribersandtopublishandconsumemessages.
■Amessage-drivenbeanthatisdeployedtwice:onceonthelocalserver,andonceontheremoteone.Itprocessesthemessagesandsendsreplies.
Inthissection,theterm localserver meanstheserveronwhichboththeapplicationclientand
themessage-drivenbeanaredeployed( earthintheprecedingexample).Theterm remote
servermeanstheserveronwhichonlythemessage-drivenbeanisdeployed( jupiterinthe
precedingexample).
Youwillfindthesourcefilesforthissectioninthe tut-install /examples/jms/sendremote/
directory.Pathnamesinthissectionarerelativetothisdirectory.
Overviewofthe sendremote ExampleModules
Thispairofmodulesissomewhatsimilartothemodulesin “AnApplicationExampleThat
ConsumesMessagesfromaRemoteServer”onpage910 inthattheonlycomponentsareaAnApplicationExampleThatDeploysaMessage-DrivenBeanonTwoServers
TheJavaEE6Tutorial • January2013 916
clientandamessage-drivenbean.However,themoduleshereusethesecomponentsinmore
complexways.Onemoduleconsistsoftheapplicationclient.Theothermodulecontainsonlythemessage-drivenbeanandisdeployedtwice,onceoneachserver.
Thebasicstepsofthemodulesareasfollows.
1. YoustarttwoJavaEEservers,oneoneachsystem.
2. Onthelocalserver( earth),youcreatetwoconnectionfactories:onelocalandonethat
communicateswiththeremoteserver( jupiter).Ontheremoteserver,youcreatea
connectionfactorythathasthesamenameastheonethatcommunicateswiththeremoteserver.
3. Theapplicationclientlooksupthetwoconnectionfactories(thelocaloneandtheonethat
communicateswiththeremoteserver)tocreatetwoconnections,sessions,publishers,andsubscribers.Thesubscribersuseamessagelistener.
4. Eachpublisherpublishesfivemessages.5. Eachofthelocalandtheremotemessage-drivenbeansreceivesfivemessagesandsends
replies.
6. Theclient’smessagelistenerconsumesthereplies.
Figure48–6 illustratesthestructureofthisapplication.M1representsthefirstmessagesent
usingthelocalconnectionfactory,andRM1representsthefirstreplymessagesentbythelocalMDB.M2representsthefirstmessagesentusingtheremoteconnectionfactory,andRM2representsthefirstreplymessagesentbytheremoteMDB.AnApplicationExampleThatDeploysaMessage-DrivenBeanonTwoServers
Chapter48 • JavaMessageServiceExamples 917
WritingtheModuleComponentsforthe sendremote
Example
Writingthecomponentsofthemodulesinvolvescodingtheapplicationclientandthe
message-drivenbean.
CodingtheApplicationClient: MultiAppServerClient.java
Theapplicationclientclass, multiclient/src/java/MultiAppServerClient.java ,doesthe
following.
1. Itinjectsresourcesfortwoconnectionfactoriesandatopic.
2. Foreachconnectionfactory,itcreatesaconnection,apublishersession,apublisher,a
subscribersession,asubscriber,andatemporarytopicforreplies.
3. Eachsubscribersetsitsmessagelistener, ReplyListener ,andstartstheconnection.FIGURE48–6 AJavaEEApplicationThatSendsMessagestoTwoServers
Remote Java EE ServerLocal Java EE Server
PTopic
M1
M1Reply 
Topic
RM1
M2RM2RM1
RM2CF1
Local MDB
PTopic
M2Reply 
Topic
CF2
 Remote MDB
Application 
ClientAnApplicationExampleThatDeploysaMessage-DrivenBeanonTwoServers
TheJavaEE6Tutorial • January2013 918
4. Eachpublisherpublishesfivemessagesandcreatesalistofthemessagesthelistenershould
expect.
5. Wheneachreplyarrives,themessagelistenerdisplaysitscontentsandremovesitfromthe
listofexpectedmessages.
6. Whenallthemessageshavearrived,theclientexits.
CodingtheMessage-DrivenBean: ReplyMsgBean.java
Themessage-drivenbeanclass, replybean/src/ReplyMsgBean.java ,doesthefollowing:
1. Usesthe @MessageDriven annotation:
@MessageDriven(mappedName = "jms/Topic ")
2. Injectsresourcesforthe MessageDrivenContext andforaconnectionfactory.Itdoesnot
needadestinationresourcebecauseitusesthevalueoftheincomingmessage’s JMSReplyTo
headerasthedestination.
3. Usesa @PostConstruct callbackmethodtocreatetheconnection,anda @PreDestroy
callbackmethodtoclosetheconnection.
TheonMessage methodofthemessage-drivenbeanclassdoesthefollowing:
1. Caststheincomingmessagetoa TextMessage anddisplaysthetext
2. Createsaconnection,asession,andapublisherforthereplymessage3. Publishesthemessagetothereplytopic4. Closestheconnection
Onbothservers,thebeanwillconsumemessagesfromthetopic jms/Topic .
CreatingResourcesforthe sendremote Example
Thisexampleusestheconnectionfactorynamed jms/ConnectionFactory andthetopic
named jms/Topic .Theseobjectsmustexistonboththelocalandtheremoteservers.
Thisexampleusesanadditionalconnectionfactory, jms/JupiterConnectionFactory ,which
communicateswiththeremotesystem;youcreateditin “ToCreateAdministeredObjectsfor
MultipleSystems”onpage881 .Thisconnectionfactorymustexistonthelocalserver.
Thebuild.xml fileforthe multiclient modulecontainstargetsyoucanusetocreatethese
resourcesifyoudeletedthempreviously.
Tocreatetheresourceneededonlyonthelocalsystem,usethefollowingcommand:
ant create-remote-factory -Dsys= remote-system-name
Theotherresourceswillbecreatedwhenyoudeploytheapplication.AnApplicationExampleThatDeploysaMessage-DrivenBeanonTwoServers
Chapter48 • JavaMessageServiceExamples 919
▼ToEnableDeploymentontheRemoteSystem
GlassFishServerbydefaultdoesnotallowdeploymentonaremotesystem.Youmustcreatea
passwordfortheadministratorontheremotesystem,thenenablesecureadministrationonthatsystem.Afterthat,youwillbeabletodeploythemessage-drivenbeanontheremote
system.
Onjupiter,starttheAdministrationConsolebyopeningabrowserat
http://localhost:4848/ .
Inthenavigationtree,expandtheConfigurationsnode,thenexpandtheserver-confignode.ExpandtheSecuritynode.ExpandtheRealmsnode.Selecttheadmin-realmnode.OntheEditRealmpage,clickManageUsers.IntheFileUserstable,clickadminintheUserIDcolumn.OntheEditFileRealmUserspage,typeapassword(forexample,jmsadmin)intheNew
PasswordandConfirmNewPasswordfields,thenclickSave.
Inthenavigationtree,clicktheServer(AdminServer)node.OntheGeneralInformationpage,clickSecureAdministration.ClickEnableSecureAdmin,acceptingthedefaultvaluesforthealiasandinstance.Theserveron jupiterwillstopandrestartautomatically.LogintotheAdministrationConsole
withthe adminuserIDandthepasswordyoucreatedandverifythatthesettingsarecorrect.
▼ToUseTwoApplicationServersforthe sendremote
Example
IfyouareusingNetBeansIDE,youneedtoaddtheremoteserverinordertodeploythe
message-drivenbeanthere.Todoso,followthesesteps.
InNetBeansIDE,clicktheServicestab.1
2
345678
9
101112
1AnApplicationExampleThatDeploysaMessage-DrivenBeanonTwoServers
TheJavaEE6Tutorial • January2013 920
Right-clicktheServersnodeandselectAddServer.IntheAddServerInstancedialog,follow
thesesteps:
a. SelectGlassFishServer3+fromtheServerlist.b. IntheNamefield,specifyanameslightlydifferentfromthatofthelocalserver,suchas
GlassFish Server 3+ (2) .
c. ClickNext.
d. FortheServerLocation,browsetothelocationoftheGlassFishServerontheremotesystem.
Thislocationmustbevisiblefromthelocalsystem.
e. ClickNext.f. SelecttheRegisterRemoteDomainradiobutton.g. IntheHostNamefield,typethenameoftheremotesystem.h. ClickFinish.i. Inthedialogthatappears,entertheusername(admin)andthepasswordyoucreated.
Beforeyoucanruntheexample,youmustchangethedefaultnameoftheJMShoston jupiter,
asdescribedin
“ToChangetheDefaultHostNameUsingtheAdministrationConsole”on
page882.Ifyouhavealreadyperformedthistask,youdonothavetorepeatit.
Runningthe sendremote Example
YoucanuseeitherNetBeansIDEorAnttobuild,package,deploy,andrunthe sendremote
example.
▼ToRunthe sendremote ExampleUsingNetBeansIDE
Tobuildthe replybean module,followthesesteps:
a. FromtheFilemenu,chooseOpenProject.b. IntheOpenProjectdialog,navigateto:
tut-install /examples/jms/sendremote/
c. Selectthe replybean folder.2
NextSteps
1AnApplicationExampleThatDeploysaMessage-DrivenBeanonTwoServers
Chapter48 • JavaMessageServiceExamples 921
d. SelecttheOpenasMainProjectcheckbox.
e. ClickOpenProject.f. IntheProjectstab,right-clickthe replybean projectandselectBuild.
ThiscommandcreatesaJARfilethatcontainsthebeanclassfile.
Tobuildthe multiclient module,followthesesteps:
a. FromtheFilemenu,chooseOpenProject.b. Selectthe multiclient folder.
c. SelecttheOpenasMainProjectcheckbox.d. ClickOpenProject.e. IntheProjectstab,right-clickthe multiclient projectandselectBuild.
ThiscommandcreatesaJARfilethatcontainstheclientclassfileandamanifestfile.
Tocreateanyneededresourcesanddeploythe multiclient moduleonthelocalserver,follow
thesesteps:
a. Right-clickthe multiclient projectandselectProperties.
b. SelectRunfromtheCategoriestree.c. FromtheServerlist,selectGlassFishServer3+(thelocalserver).d. ClickOK.e. Right-clickthe multiclient projectandselectDeploy.
YoucanusetheServicestabtoverifythat multiclient isdeployedasanAppClientModule
onthelocalserver.
Todeploythe replybean moduleonthelocalandremoteservers,followthesesteps:
a. Right-clickthe replybean projectandselectProperties.
b. SelectRunfromtheCategoriestree.c. FromtheServerlist,selectGlassFishServer3+(thelocalserver).2
3
4AnApplicationExampleThatDeploysaMessage-DrivenBeanonTwoServers
TheJavaEE6Tutorial • January2013 922
d. ClickOK.
e. Right-clickthe replybean projectandselectDeploy.
f. Right-clickthe replybean projectagainandselectProperties.
g. SelectRunfromtheCategoriestree.h. FromtheServerlist,selectGlassFishServer3+(2)(theremoteserver).i. ClickOK.j. Right-clickthe replybean projectandselectDeploy.
YoucanusetheServicestabtoverifythat replybean isdeployedasanEJBModuleonboth
servers.
Toruntheapplicationclient,right-clickthe multiclient projectandselectRun.
ThiscommandreturnsaJARfilenamed multiclientClient.jar andthenexecutesit.
Onthelocalsystem,theoutputofthe appclient commandlookssomethinglikethis:
running application client container.
...Sent message: text: id=1 to local app serverSent message: text: id=2 to remote app serverReplyListener: Received message: id=1, text=ReplyMsgBean processed message:text: id=1 to local app serverSent message: text: id=3 to local app serverReplyListener: Received message: id=3, text=ReplyMsgBean processed message:text: id=3 to local app serverReplyListener: Received message: id=2, text=ReplyMsgBean processed message:text: id=2 to remote app serverSent message: text: id=4 to remote app serverReplyListener: Received message: id=4, text=ReplyMsgBean processed message:text: id=4 to remote app serverSent message: text: id=5 to local app serverReplyListener: Received message: id=5, text=ReplyMsgBean processed message:text: id=5 to local app serverSent message: text: id=6 to remote app serverReplyListener: Received message: id=6, text=ReplyMsgBean processed message:text: id=6 to remote app server
Sent message: text: id=7 to local app serverReplyListener: Received message: id=7, text=ReplyMsgBean processed message:text: id=7 to local app serverSent message: text: id=8 to remote app serverReplyListener: Received message: id=8, text=ReplyMsgBean processed message:text: id=8 to remote app serverSent message: text: id=9 to local app serverReplyListener: Received message: id=9, text=ReplyMsgBean processed message:text: id=9 to local app serverSent message: text: id=10 to remote app serverReplyListener: Received message: id=10, text=ReplyMsgBean processed message:text: id=10 to remote app server5AnApplicationExampleThatDeploysaMessage-DrivenBeanonTwoServers
Chapter48 • JavaMessageServiceExamples 923
Waiting for 0 message(s) from local app server
Waiting for 0 message(s) from remote app serverFinishedClosing connection 1Closing connection 2
Onthelocalsystem,wherethemessage-drivenbeanreceivestheodd-numberedmessages,the
outputintheserverloglookslikethis(wrappedinlogginginformation):
ReplyMsgBean: Received message: text: id=1 to local app server
ReplyMsgBean: Received message: text: id=3 to local app serverReplyMsgBean: Received message: text: id=5 to local app serverReplyMsgBean: Received message: text: id=7 to local app serverReplyMsgBean: Received message: text: id=9 to local app server
Ontheremotesystem,wherethebeanreceivestheeven-numberedmessages,theoutputinthe
serverloglookslikethis(wrappedinlogginginformation):
ReplyMsgBean: Received message: text: id=2 to remote app server
ReplyMsgBean: Received message: text: id=4 to remote app serverReplyMsgBean: Received message: text: id=6 to remote app serverReplyMsgBean: Received message: text: id=8 to remote app serverReplyMsgBean: Received message: text: id=10 to remote app server
▼ToRunthe sendremote ExampleUsingAnt
Topackagethemodules,followthesesteps:
a. Gotothefollowingdirectory:
tut-install /examples/jms/sendremote/multiclient/
b. Typethefollowingcommand:
ant
ThiscommandcreatesaJARfilethatcontainstheclientclassfileandamanifestfile.
c. Changetothedirectory replybean :
cd ../replybean
d. Typethefollowingcommand:
ant
ThiscommandcreatesaJARfilethatcontainsthebeanclassfile.
Todeploythe replybean moduleonthelocalandremoteservers,followthesesteps:
a. Verifythatyouarestillinthedirectory replybean .1
2AnApplicationExampleThatDeploysaMessage-DrivenBeanonTwoServers
TheJavaEE6Tutorial • January2013 924
b. Typethefollowingcommand:
ant deploy
IgnorethemessagethatstatesthattheapplicationisdeployedataURL.
c. Typethefollowingcommand:
ant deploy-remote -Dsys= remote-system-name
Replaceremote-system-name withtheactualnameoftheremotesystem.
Todeploytheclient,followthesesteps:a. Changetothedirectory multiclient :
cd ../multiclient
b. Typethefollowingcommand:
ant getclient
Toruntheclient,typethefollowingcommand:
ant run
Onthelocalsystem,theoutputlookssomethinglikethis:
running application client container.
...
Sent message: text: id=1 to local app serverSent message: text: id=2 to remote app serverReplyListener: Received message: id=1, text=ReplyMsgBean processed message:text: id=1 to local app serverSent message: text: id=3 to local app serverReplyListener: Received message: id=3, text=ReplyMsgBean processed message:text: id=3 to local app serverReplyListener: Received message: id=2, text=ReplyMsgBean processed message:text: id=2 to remote app serverSent message: text: id=4 to remote app serverReplyListener: Received message: id=4, text=ReplyMsgBean processed message:text: id=4 to remote app serverSent message: text: id=5 to local app serverReplyListener: Received message: id=5, text=ReplyMsgBean processed message:text: id=5 to local app serverSent message: text: id=6 to remote app serverReplyListener: Received message: id=6, text=ReplyMsgBean processed message:text: id=6 to remote app serverSent message: text: id=7 to local app serverReplyListener: Received message: id=7, text=ReplyMsgBean processed message:text: id=7 to local app serverSent message: text: id=8 to remote app serverReplyListener: Received message: id=8, text=ReplyMsgBean processed message:text: id=8 to remote app serverSent message: text: id=9 to local app serverReplyListener: Received message: id=9, text=ReplyMsgBean processed message:text: id=9 to local app serverSent message: text: id=10 to remote app server3
4AnApplicationExampleThatDeploysaMessage-DrivenBeanonTwoServers
Chapter48 • JavaMessageServiceExamples 925
ReplyListener: Received message: id=10, text=ReplyMsgBean processed message:
text: id=10 to remote app serverWaiting for 0 message(s) from local app serverWaiting for 0 message(s) from remote app serverFinishedClosing connection 1Closing connection 2
Onthelocalsystem,wherethemessage-drivenbeanreceivestheodd-numberedmessages,the
outputintheserverloglookslikethis(wrappedinlogginginformation):
ReplyMsgBean: Received message: text: id=1 to local app server
ReplyMsgBean: Received message: text: id=3 to local app serverReplyMsgBean: Received message: text: id=5 to local app serverReplyMsgBean: Received message: text: id=7 to local app serverReplyMsgBean: Received message: text: id=9 to local app server
Ontheremotesystem,wherethebeanreceivestheeven-numberedmessages,theoutputinthe
serverloglookslikethis(wrappedinlogginginformation):
ReplyMsgBean: Received message: text: id=2 to remote app server
ReplyMsgBean: Received message: text: id=4 to remote app serverReplyMsgBean: Received message: text: id=6 to remote app serverReplyMsgBean: Received message: text: id=8 to remote app serverReplyMsgBean: Received message: text: id=10 to remote app server
▼ToDisableDeploymentontheRemoteSystem
Afterrunningthisexampleandundeployingthecomponents,youshoulddisablesecure
administrationontheremotesystem( jupiter).Inaddition,youwillprobablywanttoreturn
theGlassFishServeron jupitertoitspreviousstateofnotrequiringausernameandpassword
foradministration,tomakeiteasiertorunsubsequentexamplesthere.
Ontheremotesystem( jupiter),starttheAdministrationConsolebyopeningabrowserat
http://localhost:4848/ ,ifitisnotalreadyrunning.
Youwillneedtologin.
Inthenavigationtree,clicktheServer(AdminServer)node.OntheGeneralInformationpage,clickSecureAdministration.ClickDisableSecureAdmin.Theserverwillstopandrestartautomatically.LogintotheAdministrationConsoleagain.Inthenavigationtree,expandtheConfigurationsnode,thenexpandtheserver-confignode.ExpandtheSecuritynode.1
2
34567AnApplicationExampleThatDeploysaMessage-DrivenBeanonTwoServers
TheJavaEE6Tutorial • January2013 926
ExpandtheRealmsnode.
Selecttheadmin-realmnode.OntheEditRealmpage,clickManageUsers.IntheFileUserstable,clickadminintheUserIDcolumn.OntheEditFileRealmUserspage,clickSave.Inthedialogthatasksyoutoconfirmthatyouaresettinganemptypasswordforthespecified
user,clickOK.
ThenexttimeyoustarttheAdministrationConsoleorissuean asadmincommand,youwillnot
needtoprovidelogincredentials.
Onearth,ifyouusedNetBeansIDEtoaddtheremoteserver,youmayalsowanttoremovethe
server.8
9
10111213
NextStepsAnApplicationExampleThatDeploysaMessage-DrivenBeanonTwoServers
Chapter48 • JavaMessageServiceExamples 927
928
BeanValidation:AdvancedTopics
Thischapterdescribeshowtocreatecustomconstraints,customvalidatormessages,and
constraintgroupsusingtheJavaAPIforJavaBeansValidation(BeanValidation).
Thefollowingtopicsareaddressedhere:
■“CreatingCustomConstraints”onpage929
■“CustomizingValidatorMessages”onpage930
■“GroupingConstraints”onpage931
CreatingCustomConstraints
BeanValidationdefinesannotations,interfaces,andclassestoallowdeveloperstocreate
customconstraints.
UsingtheBuilt-InConstraintstoMakeaNew
Constraint
BeanValidationincludesseveralbuilt-inconstraintsthatcanbecombinedtocreatenew,
reusableconstraints.Thiscansimplifyconstraintdefinitionbyallowingdeveloperstodefineacustomconstraintmadeupofseveralbuilt-inconstraintsthatmaythenbeappliedtocomponentattributeswithasingleannotation.
@Pattern.List({
@Pattern(regexp = "[a-z0-9!#$%&’*+/=?^_ ‘{|}~-]+(?:\\. "
+"[a-z0-9!#$%&’*+/=?^_ ‘{|}~-]+)* "
+"@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])? ")
})@Constraint(validatedBy = {})@Documented@Target({ElementType.METHOD,49CHAPTER 49
929
ElementType.FIELD,
ElementType.ANNOTATION_TYPE,ElementType.CONSTRUCTOR,ElementType.PARAMETER})
@Retention(RetentionPolicy.RUNTIME)public @interface Email {
String message() default "{invalid.email} ";
Class<?>[] groups() default {};Class<? extends Payload>[] payload() default {};@Target({ElementType.METHOD,
ElementType.FIELD,ElementType.ANNOTATION_TYPE,ElementType.CONSTRUCTOR,ElementType.PARAMETER})
@Retention(RetentionPolicy.RUNTIME)@Documented@interface List {
Email[] value();
}
}
Thiscustomconstraintcanthenbeappliedtoanattribute.
...@Emailprotected String email;...
CustomizingValidatorMessages
BeanValidationincludesaresourcebundleofdefaultmessagesforthebuilt-inconstraints.
Thesemessagescanbecustomized,andlocalizedfornon-Englishspeakinglocales.
TheValidationMessages ResourceBundle
TheValidationmessages resourcebundleandthelocalevariantsofthisresourcebundle
containstringsthatoverridethedefaultvalidationmessages.The ValidationMessages
resourcebundleistypicallyapropertiesfile, ValidationMessages.properties ,inthedefault
packageofanapplication.
LocalizingValidationMessages
Localevariantsof ValidationMessages.properties areaddedbyappendinganunderscore
andthelocaleprefixtothebasenameofthefile.Forexample,theSpanishlocalevariantresourcebundlewouldbe ValidationMessages_es.properties .CustomizingValidatorMessages
TheJavaEE6Tutorial • January2013 930
GroupingConstraints
Constraintsmaybeaddedtooneormoregroups.Constraintgroupsareusedtocreatesubsets
ofconstraintssoonlycertainconstraintswillbevalidatedforaparticularobject.Bydefault,allconstraintsareincludedinthe Defaultconstraintgroup.
Constraintgroupsarerepresentedbyinterfaces.
public interface Employee {}
public interface Contractor {}
Constraintgroupscaninheritfromothergroups.
public interface Manager extends Employee {}
Whenaconstraintisaddedtoanelement,theconstraintdeclaresthegroupstowhichthat
constraintbelongsbyspecifyingtheclassnameofthegroupinterfacenameinthe groups
elementoftheconstraint.
@NotNull(groups=Employee.class)
Phone workPhone;
Multiplegroupscanbedeclaredbysurroundingthegroupswithanglebrackets( {and})and
separatingthegroups'classnameswithcommas.
@NotNull(groups={ Employee.class, Contractor.class })
Phone workPhone;
Ifagroupinheritsfromanothergroup,validatingthatgroupresultsinvalidatingallconstraints
declaredaspartofthesupergroup.Forexample,validatingthe Managergroupresultsinthe
workPhone fieldbeingvalidated,because Employee isasuperinterfaceof Manager.
CustomizingGroupValidationOrder
Bydefault,constraintgroupsarevalidatedinnoparticularorder.Therearecaseswheresome
groupsshouldbevalidatedbeforeothers.Forexample,inaparticularclass,basicdatashouldbevalidatedbeforemoreadvanceddata.
Tosetthevalidationorderforagroup,adda javax.validation.GroupSequence annotationto
theinterfacedefinition,listingtheorderinwhichthevalidationshouldoccur.
@GroupSequence({Default.class, ExpensiveValidationGroup.class})
public interface FullValidationGroup {}
Whenvalidating FullValidationGroup ,firstthe Defaultgroupisvalidated.Ifallthedata
passesvalidation,thenthe ExpensiveValidationGroup groupisvalidated.IfaconstraintisGroupingConstraints
Chapter49 • BeanValidation:AdvancedTopics 931
partofboththe Defaultandthe ExpensiveValidationGroup groups,theconstraintis
validatedaspartofthe Defaultgroup,andwillnotbevalidatedonthesubsequent
ExpensiveValidationGroup pass.GroupingConstraints
TheJavaEE6Tutorial • January2013 932
UsingJavaEEInterceptors
Thischapterdiscusseshowtocreateinterceptorclassesandmethodsthatinterposeonmethod
invocationsorlifecycleeventsonatargetclass.
Thefollowingtopicsareaddressedhere:
■“OverviewofInterceptors”onpage933
■“UsingInterceptors”onpage935
■“The interceptor ExampleApplication”onpage939
OverviewofInterceptors
InterceptorsareusedinconjunctionwithJavaEEmanagedclassestoallowdevelopersto
invokeinterceptormethodsonanassociated targetclass ,inconjunctionwithmethod
invocationsorlifecycleevents.Commonusesofinterceptorsarelogging,auditing,andprofiling.
TheInterceptors1.1specificationispartofthefinalreleaseofJSR318,EnterpriseJavaBeans3.1,
availablefrom
http://jcp.org/en/jsr/detail?id=318 .
Aninterceptorcanbedefinedwithinatargetclassasan interceptormethod ,orinanassociated
classcalledan interceptorclass .Interceptorclassescontainmethodsthatareinvokedin
conjunctionwiththemethodsorlifecycleeventsofthetargetclass.
Interceptorclassesandmethodsaredefinedusingmetadataannotations,orinthedeployment
descriptoroftheapplicationcontainingtheinterceptorsandtargetclasses.
Note–Applicationsthatusethedeploymentdescriptortodefineinterceptorsarenotportable
acrossJavaEEservers.
Interceptormethodswithinthetargetclassorinaninterceptorclassareannotatedwithoneof
themetadataannotationsdefinedin Table50–1 .50CHAPTER 50
933
TABLE50–1 InterceptorMetadataAnnotations
InterceptorMetadataAnnotation Description
javax.interceptor.AroundInvoke Designatesthemethodasaninterceptormethod.
javax.interceptor.AroundTimeout Designatesthemethodasatimeoutinterceptor,for
interposingontimeoutmethodsforenterprisebeantimers.
javax.annotation.PostConstruct Designatesthemethodasaninterceptormethodfor
post-constructlifecycleevents.
javax.annotation.PreDestroy Designatesthemethodasaninterceptormethodfor
pre-destroylifecycleevents.
InterceptorClasses
Interceptorclassesmaybedesignatedwiththeoptional javax.interceptor.Interceptor
annotation,butinterceptorclassesaren’trequiredtobesoannotated.Aninterceptorclass must
haveapublic,no-argumentconstructor.
Thetargetclasscanhaveanynumberofinterceptorclassesassociatedwithit.Theorderin
whichtheinterceptorclassesareinvokedisdeterminedbytheorderinwhichtheinterceptorclassesaredefinedinthe javax.interceptor.Interceptors annotation.However,thisorder
canbeoverriddeninthedeploymentdescriptor.
Interceptorclassesmaybetargetsofdependencyinjection.Dependencyinjectionoccurswhen
theinterceptorclassinstanceiscreated,usingthenamingcontextoftheassociatedtargetclass,andbeforeany @PostConstruct callbacksareinvoked.
InterceptorLifecycle
Interceptorclasseshavethesamelifecycleastheirassociatedtargetclass.Whenatargetclass
instanceiscreated,aninterceptorclassinstanceisalsocreatedforeachdeclaredinterceptorclassinthetargetclass.Thatis,ifthetargetclassdeclaresmultipleinterceptorclasses,aninstanceofeachclassiscreatedwhenthetargetclassinstanceiscreated.Thetargetclassinstanceandallinterceptorclassinstancesarefullyinstantiatedbeforeany @PostConstruct
callbacksareinvoked,andany @PreDestroy callbacksareinvokedbeforethetargetclassand
interceptorclassinstancesaredestroyed.OverviewofInterceptors
TheJavaEE6Tutorial • January2013 934
InterceptorsandCDI
ContextsandDependencyInjectionfortheJavaEEPlatform(CDI)buildsonthebasic
functionalityofJavaEEinterceptors.ForinformationonCDIinterceptors,includingadiscussionofinterceptorbindingtypes,see
“UsingInterceptorsinCDIApplications”on
page547.
UsingInterceptors
Aninterceptorisdefinedusingoneoftheinterceptormetadataannotationslistedin Table50–1
withinthetargetclass,orinaseparateinterceptorclass.Thefollowingcodedeclaresan@AroundTimeout interceptormethodwithinatargetclass.
@Stateless
public class TimerBean {...
@Schedule(minute= "*/1", hour= "*")
public void automaticTimerMethod() { ... }
@AroundTimeout
public void timeoutInterceptorMethod(InvocationContext ctx) { ... }
...}
Ifinterceptorclassesareused,usethe javax.interceptor.Interceptors annotationto
declareoneormoreinterceptorsattheclassormethodlevelofthetargetclass.Thefollowingcodedeclaresinterceptorsattheclasslevel.
@Stateless
@Interceptors({PrimaryInterceptor.class, SecondaryInterceptor.class})public class OrderBean { ... }
Thefollowingcodedeclaresamethod-levelinterceptorclass.
@Statelesspublic class OrderBean {...
@Interceptors(OrderInterceptor.class)public void placeOrder(Order order) { ... }
...}UsingInterceptors
Chapter50 • UsingJavaEEInterceptors 935
InterceptingMethodInvocations
The@AroundInvoke annotationisusedtodesignateinterceptormethodsformanagedobject
methods.Onlyonearound-invokeinterceptormethodperclassisallowed.Around-invokeinterceptormethodshavethefollowingform:
@AroundInvoke
visibility Objectmethod-name (InvocationContext) throws Exception { ... }
Forexample:
@AroundInvoke
public void interceptOrder(InvocationContext ctx) { ... }
Around-invokeinterceptormethodscanhavepublic,private,protected,orpackage-level
access,andmustnotbedeclaredstaticorfinal.
Anaround-invokeinterceptorcancallanycomponentorresourcecallablebythetarget
methodonwhichitinterposes,havethesamesecurityandtransactioncontextasthetargetmethod,andruninthesameJavavirtualmachinecall-stackasthetargetmethod.
Around-invokeinterceptorscanthrowanyexceptionallowedbythethrowsclauseofthetarget
method.Theymaycatchandsuppressexceptions,andthenrecoverbycallingtheInvocationContext.proceed method.
UsingMultipleMethodInterceptors
Usethe @Interceptors annotationtodeclaremultipleinterceptorsforatargetmethodorclass.
@Interceptors({PrimaryInterceptor.class, SecondaryInterceptor.class,
LastInterceptor.class})
public void updateInfo(String info) { ... }
Theorderoftheinterceptorsinthe @Interceptors annotationistheorderinwhichthe
interceptorsareinvoked.
Multipleinterceptorsmayalsobedefinedinthedeploymentdescriptor.Theorderofthe
interceptorsinthedeploymentdescriptoristheorderinwhichtheinterceptorswillbeinvoked.
...
<interceptor-binding>
<target-name>myapp.OrderBean</target-name><interceptor-class>myapp.PrimaryInterceptor.class</interceptor-class><interceptor-class>myapp.SecondaryInterceptor.class</interceptor-class><interceptor-class>myapp.LastInterceptor.class</interceptor-class><method-name>updateInfo</method-name>
</interceptor-binding>...
Toexplicitlypasscontroltothenextinterceptorinthechain,callthe
InvocationContext.proceed method.UsingInterceptors
TheJavaEE6Tutorial • January2013 936
Datacanbesharedacrossinterceptors:
■Thesame InvocationContext instanceispassedasaninputparametertoeachinterceptor
methodintheinterceptorchainforaparticulartargetmethod.The InvocationContext
instance’s contextData propertyisusedtopassdataacrossinterceptormethods.The
contextData propertyisa java.util.Map<String, Object> object.Datastoredin
contextData isaccessibletointerceptormethodsfurtherdowntheinterceptorchain.
■Thedatastoredin contextData isnotsharableacrossseparatetargetclassmethod
invocations.Thatis,adifferent InvocationContext objectiscreatedforeachinvocationof
themethodinthetargetclass.
AccessingTargetMethodParametersFromanInterceptorClass
TheInvocationContext instancepassedtoeacharound-invokemethodmaybeusedtoaccess
andmodifytheparametersofthetargetmethod.The parameters propertyof
InvocationContext isanarrayof Objectinstancesthatcorrespondstotheparameterorderof
thetargetmethod.Forexample,forthefollowingtargetmethod,the parameters property,in
theInvocationContext instancepassedtothearound-invokeinterceptormethodin
PrimaryInterceptor ,isan Objectarraycontainingtwo Stringobjects( firstName and
lastName )anda Dateobject( date):
@Interceptors(PrimaryInterceptor.class)
public void updateInfo(String firstName, String lastName, Date date) { ... }
Theparameterscanbeaccessedandmodifiedusingthe InvocationContext.getParameters
andInvocationContext.setParameters methods,respectively.
InterceptingLifecycleCallbackEvents
Interceptorsforlifecyclecallbackevents(post-createandpre-destroy)maybedefinedinthe
targetclassorininterceptorclasses.The @PostCreate annotationisusedtodesignateamethod
asapost-createlifecycleeventinterceptor.The @PreDestroy annotationisusedtodesignatea
methodasapre-destroylifecycleeventinterceptor.
Lifecycleeventinterceptorsdefinedwithinthetargetclasshavethefollowingform:
voidmethod-name () { ... }UsingInterceptors
Chapter50 • UsingJavaEEInterceptors 937
Forexample:
@PostCreate
void initialize() { ... }
Lifecycleeventinterceptorsdefinedinaninterceptorclasshavethefollowingform:
void <method-name >(InvocationContext) { ... }
Forexample:
@PreDestroy
void cleanup(InvocationContext ctx) { ... }
Lifecycleinterceptormethodscanhavepublic,private,protected,orpackage-levelaccess,and
mustnotbedeclaredstaticorfinal.
Lifecycleinterceptormethodsarecalledinanunspecifiedsecurityandtransactioncontext.
Thatis,portableJavaEEapplicationsshouldnotassumethelifecycleeventinterceptormethodhasaccesstoasecurityortransactioncontext.Onlyoneinterceptormethodforeachlifecycleevent(post-createandpre-destroy)isallowedperclass.
UsingMultipleLifecycleCallbackInterceptors
Multiplelifecycleinterceptorsmaybedefinedforatargetclassbyspecifyingtheinterceptorclassesinthe @Interceptors annotation:
@Interceptors({PrimaryInterceptor.class, SecondaryInterceptor.class,
LastInterceptor.class})
@Statelesspublic class OrderBean { ... }
Theorderinwhichtheinterceptorclassesarelistedinthe @Interceptors annotationdefines
theorderinwhichtheinterceptorsareinvoked.
Datastoredinthe contextData propertyof InvocationContext isnotsharableacrossdifferent
lifecycleevents.
InterceptingTimeoutEvents
InterceptorsforEJBtimerservicetimeoutmethodsmaybedefinedusingthe @AroundTimeout
annotationonmethodsinthetargetclassorinaninterceptorclass.Onlyone @AroundTimeout
methodperclassisallowed.
Timeoutinterceptorshavethefollowingform:
Object < method-name >(InvocationContext) throws Exception { ... }
Forexample:UsingInterceptors
TheJavaEE6Tutorial • January2013 938
@AroundTimeout
protected void timeoutInterceptorMethod(InvocationContext ctx) { ... }
Timeoutinterceptormethodscanhavepublic,private,protected,orpackage-levelaccess,and
mustnotbedeclaredstaticorfinal.
Timeoutinterceptorscancallanycomponentorresourcecallablebythetargettimeout
method,andareinvokedinthesametransactionandsecuritycontextasthetargetmethod.
Timeoutinterceptorsmayaccessthetimerobjectassociatedwiththetargettimeoutmethod
throughthe InvocationContext instance’s getTimer method.
UsingMultipleTimeoutInterceptors
Multipletimeoutinterceptorsmaybedefinedforagiventargetclassbyspecifyingthe
interceptorclassescontaining @AroundTimeout interceptormethodsinan @Interceptors
annotationattheclasslevel.
Ifatargetclassspecifiestimeoutinterceptorsinaninterceptorclass,andalsohasa
@AroundTimeout interceptormethodwithinthetargetclassitself,thetimeoutinterceptorsin
theinterceptorclassesarecalledfirst,followedbythetimeoutinterceptorsdefinedinthetargetclass.Forexample,inthefollowingexample,assumethatboththe PrimaryInterceptor and
SecondaryInterceptor classeshavetimeoutinterceptormethods.
@Interceptors({PrimaryInterceptor.class, SecondaryInterceptor.class})
@Statefulpublic class OrderBean {...
@AroundTimeoutprivate void last(InvocationContext ctx) { ... }
...}
Thetimeoutinterceptorin PrimaryInterceptor willbecalledfirst,followedbythetimeout
interceptorin SecondaryInterceptor ,andfinallythe lastmethoddefinedinthetargetclass.
Theinterceptor ExampleApplication
Theinterceptor exampledemonstrateshowtouseaninterceptorclass,containingan
@AroundInvoke interceptormethod,withastatelesssessionbean.
TheHelloBean statelesssessionbeanisasimpleenterprisebeanwithtwobusinessmethods,
getNameandsetName,toretrieveandmodifyastring.The setNamebusinessmethodhasan
@Interceptors annotationthatspecifiesaninterceptorclass, HelloInterceptor ,forthat
method.
@Interceptors(HelloInterceptor.class)
public void setName(String name) {
this.name = name;
}Theinterceptor ExampleApplication
Chapter50 • UsingJavaEEInterceptors 939
TheHelloInterceptor classdefinesan @AroundInvoke interceptormethod, modifyGreeting ,
thatconvertsthestringpassedto HelloBean.setName tolowercase.
@AroundInvoke
public Object modifyGreeting(InvocationContext ctx) throws Exception {
Object[] parameters = ctx.getParameters();String param = (String) parameters[0];param = param.toLowerCase();parameters[0] = param;ctx.setParameters(parameters);try {
return ctx.proceed();
} catch (Exception e) {
logger.warning( "Error calling ctx.proceed in modifyGreeting() ");
return null;
}
}
Theparametersto HelloBean.setName areretrievedandstoredinan Objectarraybycalling
theInvocationContext.getParameters method.Because setNamehasonlyoneparameter,it
isthefirstandonlyelementinthearray.Thestringissettolowercaseandstoredinthe
parameters array,thenpassedto InvocationContext.setParameters .Toreturncontrolto
thesessionbean, InvocationContext.proceed iscalled.
Theuserinterfaceof interceptor isaJavaServerFaceswebapplicationthatconsistsoftwo
Faceletsviews: index.xhtml ,whichcontainsaformforenteringthename,and
response.xhtml ,whichdisplaysthefinalname.
Runningthe interceptor Example
YoucanuseeitherNetBeansIDEorAnttobuild,package,deploy,andrunthe interceptor
example.
▼ToRunthe interceptor ExampleUsingNetBeansIDE
FromtheFilemenu,chooseOpenProject.
IntheOpenProjectdialog,navigateto tut-install /examples/ejb/ .
Selectthe interceptor folderandclickOpenProject.
IntheProjectstab,right-clickthe interceptor projectandselectRun.
Thiswillcompile,deploy,andrunthe interceptor example,openingawebbrowserpageto
http://localhost:8080/interceptor/ .1
234Theinterceptor ExampleApplication
TheJavaEE6Tutorial • January2013 940
TypeanameintotheformandselectSubmit.
Thenamewillbeconvertedtolowercasebythemethodinterceptordefinedinthe
HelloInterceptor class.
▼ToRunthe interceptor ExampleUsingAnt
Gotothefollowingdirectory:
tut-install /examples/ejb/interceptor/
Tocompilethesourcefilesandpackagetheapplication,usethefollowingcommand:
ant
Thiscommandcallsthe defaulttarget,whichbuildsandpackagestheapplicationintoaWAR
file,interceptor.war ,locatedinthe distdirectory.
TodeployandruntheapplicationusingAnt,usethefollowingcommand:
ant run
Thiscommanddeploysandrunsthe interceptor example,openingawebbrowserpageto
http://localhost:8080/interceptor/ .
TypeanameintotheformandselectSubmit.
Thenamewillbeconvertedtolowercasebythemethodinterceptordefinedinthe
HelloInterceptor class.5
1
2
3
4Theinterceptor ExampleApplication
Chapter50 • UsingJavaEEInterceptors 941
942
CaseStudies
PartIXpresentscasestudiesthatuseavarietyofJavaEEtechnologies.Thispartcontains
thefollowingchapters:
■Chapter51,“Duke’sBookstoreCaseStudyExample”
■Chapter52,“Duke’sTutoringCaseStudyExample”
■Chapter53,“Duke’sForestCaseStudyExample”PART IX
943
944
Duke’sBookstoreCaseStudyExample
TheDuke’sBookstoreexampleisasimplee-commerceapplicationthatillustratessomeofthe
moreadvancedfeaturesofJavaServerFacestechnologyincombinationwithContextsandDependencyInjectionfortheJavaEEPlatform(CDI),enterprisebeans,andtheJavaPersistenceAPI.Userscanselectbooksfromanimagemap,viewthebookstorecatalog,andpurchasebooks.Nosecurityisusedinthisapplication.
Thefollowingtopicsareaddressedhere:
■“DesignandArchitectureofDuke’sBookstore”onpage945
■“TheDuke’sBookstoreInterface”onpage946
■“RunningtheDuke’sBookstoreCaseStudyApplication”onpage951
DesignandArchitectureofDuke’sBookstore
Duke’sBookstoreisasimplewebapplicationthatusesmanyfeaturesofJavaServerFaces
technology,inadditiontootherJavaEE6features:
■JavaServerFacestechnology,aswellasContextsandDependencyInjectionfortheJavaEE
Platform(CDI):
■AsetofFaceletspages,alongwithatemplate,providestheuserinterfacetotheapplication.
■CDImanagedbeansareassociatedwitheachoftheFaceletspages.
■Acustomimagemapcomponentonthefrontpageallowsyoutoselectabooktoenterthestore.EachareaofthemapisrepresentedbyaJavaServerFacesmanagedbean.Texthyperlinksarealsoprovidedforaccessibility.
■Actionlistenersareregisteredontheimagemapandthetexthyperlinks.TheselistenersretrievetheIDvaluefortheselectedbookandstoreitinthesessionmapsoitcanberetrievedbythemanagedbeanforthenextpage.
■Theh:dataTable tagisusedtorenderthebookcatalogandshoppingcartcontents
dynamically.51CHAPTER 51
945
■Acustomconverterisregisteredonthecreditcardfieldonthecheckoutpage,
bookcashier.xhtml ,whichalsousesan f:validateRegEx tagtoensurethattheinputis
correctlyformatted.
■Avalue-changelistenerisregisteredonthenamefieldon bookcashier.xhtml .This
listenersavesthenameinaparametersothefollowingpage, bookreceipt.xhtml ,can
accessit.
■Enterprisebeans:Local,no-interface-viewstatelesssessionbeanandsingletonbean
■AJavaPersistenceAPIentity
ThepackagesoftheDuke’sBookstoreapplication,locatedinthe
tut-install /examples/case-studies/dukes-bookstore/src/java/dukesbookstore/
directory,areasfollows:
■components :IncludesthecustomUIcomponentclasses, MapComponent andAreaComponent
■converters :Includesthecustomconverterclass, CreditCardConverter
■ejb:Includestwoenterprisebeans:
■Asingletonbean, ConfigBean ,thatinitializesthedatainthedatabase
■Astatelesssessionbean, BookRequestBean ,thatcontainsthebusinesslogictomanage
theentity
■entity:Includesthe Bookentityclass
■exceptions :Includesthreeexceptionclasses
■listeners :Includestheeventhandlerandeventlistenerclasses
■model:IncludesamodelJavaBeansclass
■renderers :IncludesthecustomrenderersforthecustomUIcomponentclasses
■web.managedbeans :IncludesthemanagedbeansfortheFaceletspages
■web.messages :Includestheresourcebundlefilesforlocalizedmessages
TheDuke’sBookstoreInterface
ThissectionprovidesadditionaldetailregardingthecomponentsoftheDuke’sBookstore
exampleandhowtheyinteract.
TheBookJavaPersistenceAPIEntity
TheBookentity,locatedinthe dukesbookstore.entity package,encapsulatesthebookdata
storedbyDuke’sBookstore.TheDuke’sBookstoreInterface
TheJavaEE6Tutorial • January2013 946
TheBookentitydefinesattributesusedintheexample:
■AbookID
■Theauthor’sfirstname
■Theauthor’ssurname
■Thetitle
■Theprice
■Whetherthebookisonsale
■Thepublicationyear
■Adescriptionofthebook
■Thenumberofcopiesintheinventory
TheBookentityalsodefinesasimplenamedquery, findBooks .
EnterpriseBeansUsedinDuke’sBookstore
Twoenterprisebeanslocatedinthe dukesbookstore.ejb packageprovidethebusinesslogic
forDuke’sBookstore.
BookRequestBean isastatelesssessionbeanthatcontainsthebusinessmethodsforthe
application.Themethodscreate,retrieve,andpurchasebooks,andupdatetheinventoryforabook.Toretrievethebooks,the getBooks methodcallsthe findBooks namedquerydefinedin
theBookentity.
ConfigBean isasingletonsessionbeanusedtocreatethebooksinthecatalogwhenthe
applicationisinitiallydeployed.Itcallsthe createBook methoddefinedin BookRequestBean .
FaceletsPagesandManagedBeansUsedinDuke’s
Bookstore
TheDuke’sBookstoreapplicationusesFaceletsanditstemplatingfeaturestodisplaytheuser
interface.TheFaceletspagesinteractwithasetofCDImanagedbeansthatprovidetheunderlyingpropertiesandmethodsfortheuserinterface.Thefrontpagealsointeractswiththecustomcomponentsusedbytheapplication.
TheapplicationusesthefollowingFaceletspages,whicharelocatedinthe
tut-install /examples/case-studies/dukes-bookstore/web/ directory:
bookstoreTemplate.xhtml Thetemplatefile,whichspecifiesaheaderusedoneverypage
aswellasthestylesheetusedbyallthepages.Thetemplatealsoretrievesthelanguagesetinthewebbrowser.
Usesthe LocaleBean managedbean.TheDuke’sBookstoreInterface
Chapter51 • Duke’sBookstoreCaseStudyExample 947
index.xhtml Landingpage,whichlaysoutthecustommapandarea
componentsusingmanagedbeansconfiguredinthefaces-config.xml file,andallowstheusertoselectabookand
advancetothe bookstore.xhtml page.
bookstore.xhtml Pagethatallowstheusertoobtaindetailsontheselectedbook
orthefeaturedbook,toaddeitherbooktotheshoppingcart,andtoadvancetothe bookcatalog.xhtml page.
Usesthe BookstoreBean managedbean.
bookdetails.xhtml Pagethatshowsdetailsonabookselectedfrom
bookstore.xhtml orotherpagesandallowstheusertoaddthe
booktothecartand/oradvancetothe bookcatalog.xhtml .
Usesthe BookDetailsBean managedbean.
bookcatalog.xhtml Pagethatdisplaysthebooksinthecatalogandallowstheuser
toaddbookstotheshoppingcart,viewthedetailsforanybook,viewtheshoppingcart,emptytheshoppingcart,orpurchasethebooksintheshoppingcart.
Usesthe CatalogBean andShoppingCart managedbeans.
bookshowcart.xhtml Pagethatdisplaysthecontentsoftheshoppingcartandallows
theusertoremoveitems,viewthedetailsforanitem,emptytheshoppingcart,purchasethebooksintheshoppingcart,orreturntothecatalog.
Usesthe ShowCartBean andShoppingCart managedbeans.
bookcashier.xhtml Pagethatallowstheusertopurchasebooks,specifyashipping
option,subscribetonewsletters,orjointheDukeFanClubwithapurchaseoveracertainamount.
Usesthe CashierBean andShoppingCart managedbeans.
bookreceipt.xhtml Pagethatconfirmstheuser’spurchaseandallowstheuserto
returntothecatalogpagetocontinueshopping.
Usesthe CashierBean managedbean.
InadditiontothemanagedbeansusedbytheFaceletstemplateandpages,theapplicationuses
thefollowingmanagedbeans:
AbstractBean Containsutilitymethodscalledbyothermanagedbeans.
ShoppingCartItem Containsmethodscalledby ShoppingCart ,CatalogBean ,and
ShowCartBean .TheDuke’sBookstoreInterface
TheJavaEE6Tutorial • January2013 948
CustomComponentsandOtherCustomObjectsUsed
inDuke’sBookstore
ThemapandareacustomcomponentsforDuke’sBookstore,alongwithassociatedrenderer,
listener,andmodelclasses,aredefinedinthefollowingpackagesinthetut-install /examples/case-studies/dukes-bookstore/src/java/dukesbookstore/
directory:
components Containsthe MapComponent andAreaComponent classes.See
“CreatingCustom
ComponentClasses”onpage262 .
listeners Containsthe AreaSelectedEvent class,alongwithotherlistenerclasses.See
“HandlingEventsforCustomComponents”onpage275 .
model Containsthe ImageArea class.See “ConfiguringModelData”onpage259 .
renderers Containsthe MapRenderer andAreaRenderer classes.See “Delegating
RenderingtoaRenderer”onpage270 .
Thetut-install /examples/case-studies/dukes-bookstore/src/java/dukesbookstore/
directoryalsocontainsacustomconverterandothercustomlistenersnotspecificallytiedtothecustomcomponents:
converters Containsthe CreditCardConverter class.See
“CreatingandUsingaCustom
Converter”onpage279 .
listeners Containsthe LinkBookChangeListener ,MapBookChangeListener ,and
NameChanged classes.See “ImplementinganEventListener”onpage273 .
PropertiesFilesUsedinDuke’sBookstore
ThestringsusedintheDuke’sBookstoreapplicationareencapsulatedintoresourcebundlesto
allowthedisplayoflocalizedstringsinmultiplelocales.Thepropertiesfiles,locatedinthetut-install /examples/case-studies/dukes-bookstore/src/java/
dukesbookstore/web/messages/ directory,consistofadefaultfilecontainingEnglishstrings
andthreeadditionalfilesforotherlocales.Thefilesareasfollows:
Messages.properties Defaultfile,containingEnglishstrings
Messages_de.properties FilecontainingGermanstrings
Messages_es.properties FilecontainingSpanishstrings
Messages_fr.properties FilecontainingFrenchstringsTheDuke’sBookstoreInterface
Chapter51 • Duke’sBookstoreCaseStudyExample 949
Thelanguagesettingintheuser’swebbrowserdetermineswhichlocaleisused.The htmltagin
bookstoreTemplate.xhtml retrievesthelanguagesettingfromthe language propertyof
LocaleBean :
<html lang= "#{localeBean.language} "
...
Formoreinformationaboutresourcebundles,see Chapter17,“Internationalizingand
LocalizingWebApplications.”
Theresourcebundleisconfiguredasfollowsinthe faces-config.xml file:
<application>
<resource-bundle>
<base-name>dukesbookstore.web.messages.Messages</base-name><var>bundle</var>
</resource-bundle><locale-config>
<default-locale>en</default-locale><supported-locale>de</supported-locale><supported-locale>fr</supported-locale><supported-locale>es</supported-locale>
</locale-config>
</application>
ThisconfigurationmeansthatintheFaceletspages,messagesareretrievedusingtheprefix
bundlewiththekeyfoundinthe Messages_ locale .properties file,asinthefollowingexample
fromthe index.xhtml page:
<h:outputText style= "font-weight:bold "
value= "#{bundle.ChooseBook} "/>
InMessages.properties ,thekeystringisdefinedasfollows:
ChooseBook=Choose a Book from our Catalog
DeploymentDescriptorsUsedinDuke’sBookstore
ThefollowingdeploymentdescriptorsareusedinDuke’sBookstore:
src/conf/persistence.xml TheJavaPersistenceAPIconfigurationfile
web/WEB-INF/beans.xml Anemptydeploymentdescriptorfileusedtoenable
theCDIruntime
web/WEB-INF/bookstore.taglib.xml Thetaglibrarydescriptorfileforthecustom
componentsTheDuke’sBookstoreInterface
TheJavaEE6Tutorial • January2013 950
web/WEB-INF/faces-config.xml TheJavaServerFacesconfigurationfile,which
configuresthemanagedbeansforthemapcomponentaswellastheresourcebundlesfortheapplication
web/WEB-INF/glassfish-web.xml TheGlassFish-specificconfigurationfile
web/WEB-INF/web.xml Thewebapplicationconfigurationfile
RunningtheDuke’sBookstoreCaseStudyApplication
YoucanuseeitherNetBeansIDEorAnttobuild,package,deploy,andruntheDuke’s
Bookstoreapplication.
▼ToBuildandDeployDuke’sBookstoreUsingNetBeans
IDE
YoumusthavealreadyconfiguredGlassFishServerasaJavaEEserverinNetBeansIDE,as
describedin “ToAddGlassFishServerasaServerinNetBeansIDE”onpage72 .
FromtheFilemenu,chooseOpenProject.IntheOpenProjectdialog,navigateto:
tut-install /examples/case-studies/
SelecttheOpenasMainProjectcheckbox.
ClickOpenProject.Right-click dukes-bookstore intheprojectpaneandselectDeploy.
Thiswillbuild,package,anddeployDuke’sBookstoretotheGlassFishServer,startingtheJava
DBdatabaseandGlassFishServeriftheyhavenotalreadybeenstarted.
▼ToBuildandDeployDuke’sBookstoreUsingAnt
MakesuretheGlassFishServerisstartedasdescribedin “StartingandStoppingtheGlassFish
Server”onpage73 andtheJavaDBserverisstartedasdescribedin “StartingandStoppingthe
JavaDBServer”onpage75 .BeforeYouBegin
1
2
3
45
BeforeYouBeginRunningtheDuke’sBookstoreCaseStudyApplication
Chapter51 • Duke’sBookstoreCaseStudyExample 951
Inaterminalwindow,goto:
tut-install /examples/case-studies/dukes-bookstore/
Typethefollowingcommand:
ant all
Thiscommandbuilds,packages,anddeploysDuke’sBookstoretotheGlassFishServer.
▼ToRunDuke’sBookstore
Inawebbrowser,typethefollowingURL:
http://localhost:8080/dukesbookstore/
OntheDuke’sBookstoremainpage,clickabookinthegraphic,orclickoneofthelinksatthe
bottomofthepage.
Usethepagesintheapplicationtoviewandpurchasebooks.1
2
1
23RunningtheDuke’sBookstoreCaseStudyApplication
TheJavaEE6Tutorial • January2013 952
Duke’sTutoringCaseStudyExample
TheDuke’sTutoringexampleapplicationisatrackingsystemforatutoringcenterforstudents.
Studentsortheirguardianscancheckinandout.Thetutoringcentercantrackattendanceandstatusupdatesandcanstorecontactinformationforguardiansandstudents.
Thefollowingtopicsareaddressedhere:
■“DesignandArchitectureofDuke’sTutoring”onpage953
■“MainInterface”onpage955
■“AdministrationInterface”onpage959
■“RunningtheDuke’sTutoringCaseStudyApplication”onpage960
DesignandArchitectureofDuke’sTutoring
Duke’sTutoringisawebapplicationthatincorporatesseveralJavaEEtechnologies.Itexposes
bothamaininterface(forstudents,guardians,andtutoringcenterstaff)andanadministrationinterface(forstafftomaintainthesystem).Thebusinesslogicforbothinterfacesisprovidedbyenterprisebeans.TheenterprisebeansusetheJavaPersistenceAPItocreateandstoretheapplication’sdatainthedatabase.
Figure52–1 illustratesthearchitectureoftheapplication.52CHAPTER 52
953
TheDuke’sTutoringapplicationisorganizedintotwomainprojects,the
dukes-tutoring-common library,andthe dukes-tutoring-war webapplication.The
dukes-tutoring-common libraryprojectcontainstheentityclassesandhelperclassesusedby
thedukes-tutoring-war webapplication,and dukes-tutoring-common ispackagedand
deployedwith dukes-tutoring-war .ThelibraryJARfileisusefulforallowingtheentityclasses
andhelperclassestobereusedbyotherapplications,suchasaJavaFXclientapplication.
Duke’sTutoringusesthefollowingJavaEE6platformfeatures:
■JavaPersistenceAPIentities
■JavaAPIforJavaBeansValidation(BeanValidation)annotationsontheentitiesfor
verifyingdata
■AcustomBeanValidationannotation, @Email,forvalidatingemailaddresses
■Enterprisebeans
■Local,no-interface-viewsessionandsingletonbeans
■JAX-RSresourcesinasessionbean
■JavaEEsecurityconstraintsontheadministrativeinterfacebusinessmethods
■AllenterprisebeanspackagedwithintheWAR
■JavaServerFacestechnology,usingFaceletsforthewebfrontendFIGURE52–1 ArchitectureoftheDuke’sTutoringExampleApplication
Database 
Server
Web 
Container
EJB Container
Java EE
Server
Database
Client
Admin Client
AdminBean
Main 
Interface 
(JSF)
Admin 
Interface 
(JSF)
RequestBean
ConfigBean
DesignandArchitectureofDuke’sTutoring
TheJavaEE6Tutorial • January2013 954
■Templating
■Compositecomponents
■Acustomformatter, PhoneNumberFormatter
■Securityconstraintsontheadministrativeinterface
■AJAX-enabledFaceletscomponents
■Customconvertersfortheentityclassesusedintheuser-interfacecomponents
TheDuke’sTutoringapplicationhastwomainuserinterfaces,bothpackagedwithinasingle
WARfile:
■Themaininterface,forstudents,guardians,andstaff
■Theadministrativeinterfaceusedbythestafftomanagethestudentsandguardians,andtogenerateattendancereports
Apartfromthemainandadministrativeinterfaces,thereisaJUnittestthatdemonstrateshow
tousetheembeddedEJBcontainertotestthebusinesslogicofthesessionbeans.
MainInterface
Themaininterfaceallowsstudentsandstafftocheckstudentsinandout,andrecordwhenstudentsareoutsideattheplayground.
JavaPersistenceAPIEntitiesUsedintheMain
Interface
TheentitiesusedinthemaininterfaceencapsulatedatastoredandmanipulatedbyDuke’s
Tutoring,andarelocatedinthe dukestutoring.entity packageinthe
dukes-tutoring-common project.
ThePersonentitydefinesattributescommontostudents,guardians,andadministrators
trackedbytheapplication.Theseattributesaretheperson’snameandcontactinformation,includingphonenumbersandemailaddress.ThephonenumberandemailaddressattributeshaveBeanValidationannotationstoensurethatthesubmitteddataiswell-formed.Theemailattributeusesacustomvalidationclass, dukestutoring.util.Email .The Personentityhas
threesubclasses, Student,Guardian ,and Administrator .Foradditionaldatacommontoall
people,the PersonDetails entityisusedtostoreattributeslikepicturesandtheperson’s
birthday,whicharen’tincludedinthe Personentityforperformancereasons.
TheStudententitystoresattributesspecifictothestudentswhocometotutoring.Thisincludes
informationlikethestudent’sgradelevelandschool.The Guardian entity’sattributesare
specifictotheparentsorguardiansofa Student.Studentsandguardianshaveamany-to-many
relationship.Thatis,astudentmayhaveaoneormoreguardians,andaguardianmayhaveoneormorestudents.The Administrator entityisforstaffwhomanagethetutoringcenter.MainInterface
Chapter52 • Duke’sTutoringCaseStudyExample 955
TheAddressentityrepresentsamailingaddress,andisassociatedwith Personentities.
Addressesandpeoplehaveamany-to-onerelationship.Thatis,onepersonmayhavemanyaddresses.
TheTutoringSession entityrepresentsaparticulardayatthetutoringcenter.Aparticular
tutoringsessiontrackswhichstudentsattendedthatday,andwhichstudentswenttothepark.Associatedwith TutoringSession isthe StatusEntry entity,whichlogswhenastudent’sstatus
changes.Students’statuschangeswhentheycheckintoatutoringsession,whentheygotothepark,andwhentheycheckout.Thestatusentryallowsthetutoringcenterstafftotrackexactlywhichstudentsattendedatutoringsession,whentheycheckedinandout,whichstudentswenttotheparkwhiletheywereatthetutoringcenter,andwhentheywenttoandcamebackfromthepark.
ForinformationoncreatingJavaPersistenceAPIentities,see
Chapter32,“Introductiontothe
JavaPersistenceAPI.” Forinformationonvalidatingentitydata,see “ValidatingPersistent
FieldsandProperties”onpage583 andChapter49,“BeanValidation:AdvancedTopics.”
EnterpriseBeansUsedintheMainInterface
TheenterprisebeansusedinthemaininterfaceprovidethebusinesslogicforDuke’sTutoring,andarelocatedinthe dukestutoring.ejb packageinthe dukes-tutoring-war project.
ConfigBean issingletonsessionbeanusedtocreatethedefaultstudents,guardians,and
administratorwhentheapplicationisinitiallydeployed,andtocreateanautomaticEJBtimerthatcreatestutoringsessionentitieseveryweekday.
RequestBean isastatelesssessionbeancontainingthebusinessmethodsforthemaininterface.
Studentsorstaffcancheckstudentsinandoutandtrackwhentheygotoandcomebackfromthepark.Thebeanalsohasbusinessmethodsforretrievinglistsofstudents.Thebusinessmethodsin RequestBean usestrongly-typedCriteriaAPIqueriestoretrievedatafromthe
database.
Forinformationoncreatingandusingenterprisebeans,see
PartIV,“EnterpriseBeans.” For
informationoncreatingstrongly-typedCriteriaAPIqueries,see Chapter35,“Usingthe
CriteriaAPItoCreateQueries.”
FaceletsFilesUsedintheMainInterface
TheDuke’sTutoringapplicationusesFaceletstodisplaytheuserinterface,andmakesextensiveuseofthetemplatingfeaturesofFacelets.FaceletsisthedefaultdisplaytechnologyforJavaServerFaces,andconsistsofXHTMLfileslocatedinthetut-install /examples/case-studies/dukes-tutoring/dukes-tutoring-war/web/ directory.
ThefollowingFaceletsfilesareusedinthemaininterface:MainInterface
TheJavaEE6Tutorial • January2013 956
template.xhtml
Templatefileforthemaininterface
error.xhtml
Errorfileemployedifsomethinggoeswrong
index.xhtml
Landingpageforthemaininterface
park.xhtml
Pageshowingwhoiscurrentlyatthepark
current.xhtml
Pageshowingwhoiscurrentlyintoday’stutoringsession
statusEntries.xhtml
Pageshowingthedetailedstatusentrylogfortoday’ssession
resources/components/allStudentsTable.xhtml
Acompositecomponentforatabledisplayingallactivestudents
resources/components/currentSessionTable.xhtml
Acompositecomponentforatabledisplayingallstudentsintoday’ssession
resources/components/parkTable.xhtml
Acompositecomponentforatabledisplayingallstudentscurrentlyatthepark
WEB-INF/includes/navigation.xhtml
XHTMLfragmentforthemaininterface’snavigationbar
WEB-INF/includes/footer.xhtml
XHTMLfragmentforthemaininterface’sfooter
ForinformationonusingFacelets,see Chapter5,“IntroductiontoFacelets.”
HelperClassesUsedintheMainInterface
Thefollowinghelperclasses,foundinthe dukes-tutoring-common project’s
dukestutoring.util package,areusedinthemaininterface:
CalendarUtil Aclassthatprovidesamethodtostriptheunnecessarytimedatafrom
java.util.Calendar instances
Email AcustomBeanValidationannotationclassforvalidatingemailaddressesin
thePersonentity
StatusType Anenumeratedtypedefiningthedifferentstatusesthatastudentcanhave.
Possiblevaluesare IN,OUT,and PARK.StatusType isusedthroughoutthe
application,includinginthe StatusEntry entity,andthroughoutthemain
interface. StatusType alsodefinesa toString methodthatreturnsaMainInterface
Chapter52 • Duke’sTutoringCaseStudyExample 957
localizedtranslationofthestatusbasedonthelocale.
Thefollowinghelperclasses,foundinthe dukes-tutoring-war project’s
dukestutoring.web.util package,areusedintheJavaServerFacesapplication:
EntityConverter Aparentclassto StudentConverter andGuardianConverter that
definesacachetostoretheentityclasseswhenconvertingtheentitiesforuseinJavaServerFacesuser-interfacecomponents.Thecachehelpsincreaseperformance.ThecacheisstoredintheJavaServerFacescontext.
StudentConverter AJavaServerFacesconverterforthe Studententityclass.Thisclass
containsmethodstoconvert Studentinstancestostringsandback
again,sotheycanbeusedintheuser-interfacecomponentsoftheapplication.
GuardianConverter Similarto StudentConverter ,thisclassisaconverterforthe
Guardian entityclass.
PropertiesFiles
Thestringsusedinthemaininterfaceareencapsulatedintoresourcebundlestoallowthe
displayoflocalizedstringsinmultiplelocales.Eachofthepropertiesfileshaslocale-specificfilesappendedwithlocalecodes,containingthetranslatedstringsforeachlocale.Forexample,Messages_es.properties containsthelocalizedstringsforSpanishlocales.
Thedukestutoring.util packageinthe dukes-tutoring-common projecthasthefollowing
resourcebundle:
StatusMessages Stringsforeachofthestatustypesdefinedinthe StatusType enumerated
typeforthedefaultlocale.Eachsupportedlocalehasapropertyfileoftheform StatusMessages_ localeprefix .properties containingthelocalized
strings.Forexample,thestringsforSpanish-speakinglocalesarelocatedinStatusMessages_es.properties .
Thedukes-tutoring-war projecthasthefollowingresourcebundles:
ValidationMessages.properties
StringsforthedefaultlocaleusedbytheBeanValidationruntimetodisplayvalidationmessages.Thisfilemustbenamed ValidationMessages.properties andlocatedinthe
defaultpackageasrequiredbytheBeanValidationspecification.Eachsupportedlocalehasapropertyfileoftheform ValidationMessages_ localeprefix .properties containingthe
localizedstrings.Forexample,thestringsforGerman-speakinglocalesarelocatedinValidationMessages_de.properties .MainInterface
TheJavaEE6Tutorial • January2013 958
dukestutoring/web/messages/Messages.properties
StringsforthedefaultlocaleforthemainandadministrationFaceletsinterfaces.Eachsupportedlocalehasapropertyfileoftheform Messages_ localeprefix .properties
containingthelocalizedstrings.Forexample,thestringsforsimplifiedChinese-speakinglocalesarelocatedin Messages_zh.properties .
Forinformationonlocalizingwebapplications,see
“RegisteringApplicationMessages”on
page308.
DeploymentDescriptorsUsedinDuke’sTutoring
Thefollowingdeploymentdescriptorsinthe dukes-tutoring-war projectareusedinDuke’s
Tutoring:
src/conf/beans.xml Anemptydeploymentdescriptorfileusedtoenablethe
CDIruntime
web/WEB-INF/faces-config.xml TheJavaServerFacesconfigurationfile
web/WEB-INF/glassfish-web.xml TheGlassFish-specificconfigurationfile
web/WEB-INF/web.xml Thewebapplicationconfigurationfile
Thefollowingdeploymentdescriptorinthe dukes-tutoring-common projectisusedinDuke’s
Tutoring:
src/META-INF/persistence.xml TheJavaPersistenceAPIconfigurationfile
NoenterprisebeandeploymentdescriptorisusedinDuke’sTutoring.Annotationsinthe
enterprisebeanclassfilesareusedfortheconfigurationofenterprisebeansinthisapplication.
AdministrationInterface
TheadministrationinterfaceofDuke’sTutoringisusedbythetutoringcenterstafftomanagethedataemployedbythemaininterface:thestudents,thestudents’guardians,andtheaddresses.Theadministrationinterfaceusesmanyofthesamecomponentsasthemaininterface.Additionalcomponentsthatareonlyusedintheadministrationinterfacearedescribedhere.
EnterpriseBeansUsedintheAdministrationInterface
Thefollowingenterprisebeans,inthe dukestutoring.ejb package,areusedinthe
administrationinterface:AdministrationInterface
Chapter52 • Duke’sTutoringCaseStudyExample 959
AdminBean Astatelesssessionbeanforallthebusinesslogicusedintheadministration
interface.Containssecurityconstraintannotationstoallowinvocationofthebusinessmethodsonlybyauthorizedusers.
FaceletsFilesUsedintheAdministrationInterface
ThefollowingFaceletsfilesareusedintheadministrationinterface:
admin/adminTemplate.xhtml Templatefortheadministrationinterface
admin/index.xhtml Landingpagefortheadministrationinterface
admin/login.xhtml Loginpageforthesecurity-constrained
administrationinterface
admin/loginError.xhtml Pagedisplayedifthereareerrors
authenticatingtheadministrationuser
admin/address directory Pagesthatallowyoutocreate,edit,anddelete
Addressentities
admin/guardian directory Pagesthatallowyoutocreate,edit,anddelete
Guardian entities
admin/student directory Pagesthatallowyoutocreate,edit,anddelete
Studententities
resources/components/formLogin.xhtml Compositecomponentforaloginformusing
JavaEEsecurity
WEB-INF/includes/adminNav.xhtml XHTMLfragmentfortheadministration
interface’snavigationbar
RunningtheDuke’sTutoringCaseStudyApplication
Thissectiondescribeshowtobuild,package,deploy,andruntheDuke’sTutoringapplication.
SettingUpGlassFishServer
BeforerunningtheDuke’sTutoringapplication,setupthesecurityrealmusedbyDuke’sTutoringwithusersandgroups.TheusernamesandpasswordssetinthissecurityrealmareusedtologintotheadministrationinterfaceofDuke’sTutoring.
Duke’sTutoring’ssecurityrealmmapsmembersofthe Administrator entitytothe
Administrator roleusedinthesecurityconstraintannotationsin AdminBean .RunningtheDuke’sTutoringCaseStudyApplication
TheJavaEE6Tutorial • January2013 960
▼ToCreatetheJDBCRealminGlassFishServer
Createthe tutoringRealm JDBCsecurityrealminGlassFishServer.
MakesureGlassFishServerisstartedasdescribedin “StartingandStoppingtheGlassFish
Server”onpage73 ,andJavaDBisstartedasdescribedin “StartingandStoppingtheJavaDB
Server”onpage75 .
Inaterminalwindow,goto:
tut-install /examples/case-studies/dukes-tutoring/dukes-tutoring-war/
Enterthefollowingcommand:
ant create-tutoring-realm
ThistargetcreatesaJDBCrealmusingthe jdbc/tutoring JDBCresource,whichwillbe
createdwhen dukes-tutoring-war hasbeendeployed.
RunningDuke’sTutoring
YoucanuseeitherNetBeansIDEorAnttobuild,package,deploy,andrunDuke’sTutoring.
▼ToBuildandDeployDuke’sTutoringinNetBeansIDE
YoumusthavealreadyconfiguredGlassFishServerasaJavaEEserverinNetBeansIDE,as
describedin “ToAddGlassFishServerasaServerinNetBeansIDE”onpage72 .
FromtheFilemenu,chooseOpenProject.IntheOpenProjectdialog,navigateto:
tut-install /examples/case-studies/dukes-tutoring/
Selectthe dukes-tutoring-war folder.
SelecttheOpenasMainProjectcheckboxandtheOpenRequiredProjectscheckbox.
Thedukes-tutoring-common libraryprojectisrequiredby dukes-tutoring-war ,andwillbe
openedalongwith dukes-tutoring-war .
ClickOpenProject.
Note–ThefirsttimeyouopenDuke’sTutoringinNetBeans,youwillseeerrorglyphsinthe
projectpane.Thisisexpected,asthemetamodelfilesusedbytheenterprisebeansforCriteriaAPIquerieshavenotyetbeengenerated.BeforeYouBegin
1
2
BeforeYouBegin
1
2
3
4
5RunningtheDuke’sTutoringCaseStudyApplication
Chapter52 • Duke’sTutoringCaseStudyExample 961
Right-click dukes-tutoring-war intheprojectpaneandselectRun.
Thiswillbuildandpackagethe dukes-tutoring-common anddukes-tutoring-war projects
anddeploy dukes-tutoring-war toGlassFishServer,startingtheJavaDBdatabaseand
GlassFishServeriftheyhavenotalreadybeenstarted.The jdbc/tutoring JDBCresourcewill
becreatedatdeploytime.Aftertheapplicationhasbeensuccessfullydeployed,theDuke’sTutoringmaininterfacewillopeninawebbrowserifNetBeansIDEhasbeenconfiguredtoopenwebapplicationsinawebbrowser.
▼ToBuildandDeployDuke’sTutoringUsingAnt
MakesureGlassFishServerisstartedasdescribedin “StartingandStoppingtheGlassFish
Server”onpage73 ,andJavaDBserverisstartedasdescribedin “StartingandStoppingtheJava
DBServer”onpage75 .
Inaterminalwindow,goto:
tut-install /examples/case-studies/dukes-tutoring/dukes-tutoring-war/
Enterthefollowingcommand:
ant all
Thiscommandbuildsandpackagesthe dukes-tutoring-common anddukes-tutoring-war
projects,anddeploys dukes-tutoring-war toGlassFishServer.
UsingDuke’sTutoring
OnceDuke’sTutoringisrunningonGlassFishServer,usethemaininterfacetoexperiment
withcheckingstudentsinandoutorsendingthemtothepark.
▼ToUsetheMainInterfaceofDuke’sTutoring
Inawebbrowser,openthemaininterfaceatthefollowingURL:
http://localhost:8080/dukes-tutoring/
Usethemaininterfacetocheckstudentsinandout,andtologwhenthestudentsgotothepark.
▼ToUsetheAdministrationInterfaceofDuke’sTutoring
FollowtheseinstructionstologintotheadministrationinterfaceofDuke’sTutoringandaddnewstudents,guardians,andaddresses.
Inawebbrowser,opentheadministrationinterfaceatthefollowingURL:
http://localhost:8080/dukes-tutoring/admin/index.xhtml6
BeforeYouBegin
1
2
1
2
1RunningtheDuke’sTutoringCaseStudyApplication
TheJavaEE6Tutorial • January2013 962
Thiswillredirectyoutotheloginpage.
Attheloginpage,entertheusername admin@example.com andpassword javaee.
Usetheadministrationinterfacetoaddormodifystudents,guardians,oraddresses.2
3RunningtheDuke’sTutoringCaseStudyApplication
Chapter52 • Duke’sTutoringCaseStudyExample 963
964
Duke’sForestCaseStudyExample
Duke’sForestisasimplee-commerceapplicationthatcontainstwowebapplicationsand
illustratestheuseofmultipleJavaEE6APIs:
■JavaServerFacestechnology,includingAjax
■ContextsandDependencyInjectionfortheJavaEEPlatform(CDI)
■JavaAPIforXMLWebServices(JAX-WS)
■JavaAPIforRESTfulWebServices(JAX-RS)
■JavaPersistenceAPI(JPA)
■JavaAPIforJavaBeansValidation(BeanValidation)
■EnterpriseJavaBeans(EJB)technology
Theapplicationconsistsofthefollowingprojects:
■Duke’sStore:Awebapplicationthathasaproductcatalog,customerself-registration,anda
shoppingcart.Italsohasanadministrationinterfaceforproduct,category,andusermanagement.Theprojectnameis dukes-store .
■Duke’sShipment:Awebapplicationthatprovidesaninterfaceforordershipment
management.Theprojectnameis dukes-shipment .
■Duke’sPayment:AwebserviceapplicationthathasaJAX-WSservicefororderpayment.
Theprojectnameis dukes-payment .
■Duke’sResources:AsimpleJavaarchiveprojectthatcontainsallresourcesusedbytheweb
projects.Itincludesmessages,CSSstylesheets,images,JavaScriptfiles,andJavaServerFacescompositecomponents.Theprojectnameis dukes-resources .
■Entities:AsimpleJavaarchiveprojectthatcontainsallJPAentities.Thisprojectisshared
amongotherprojectsthatusetheentities.Theprojectnameis entities .
■Events:AsimpleJavaarchiveprojectthatcontainsaPOJOclassthatisusedasaCDIevent.
Theprojectnameis events.53CHAPTER 53
965
Thefollowingtopicsareaddressedhere:
■“DesignandArchitectureofDuke’sForest”onpage966
■“BuildingandDeployingtheDuke’sForestCaseStudyApplication”onpage979
■“RunningtheDuke’sForestApplication”onpage982
DesignandArchitectureofDuke’sForest
Duke’sForestisacomplexapplicationconsistingofthreemainprojectsandthreesubprojects.
Figure53–1 showsthearchitectureofthethreemainprojectsthatyouwilldeploy:Duke’sStore,
Duke’sShipment,andDuke’sPayment.ItalsoshowshowDuke’sStoremakesuseoftheEventsandEntitiesprojects.
FIGURE53–1 ArchitectureoftheDuke’sForestExampleApplication
Duke’s Store    Duke ’s Shipment
EJB Container
Main Interface 
(Web Pages)
Main Interface 
(Web Pages)
Administration 
Interface (Web Pages)
Shipment 
Bean
Web Services / REST
OrderBean
EJB Container
AdministratorBean
 CategoryBean
 OrderBean
UserBean
 ProductBean
 OrderDetailBean
GroupsBean
 ShoppingCart
 OrderStatusBean
Entities
Category
 CustomerOrder
 OrderDetailPK
Product
 OrderDetail
 OrderStatus
Person
 Customer
Administrator
 Groups
Events
OrderEventDuke ’s Payment
Web Services
Payment ServiceDesignandArchitectureofDuke’sForest
TheJavaEE6Tutorial • January2013 966
Duke’sForestusesthefollowingJavaEE6platformfeatures:
■JavaPersistenceAPIentities:
■BeanValidationannotationsontheentitiesforverifyingdata
■XMLannotationsforJavaAPIforXMLBinding(JAXB)serialization
■Webservices:
■AJAX-WSwebserviceforpayment,withsecurityconstraints
■AJAX-RSwebservicethatisEJBbased
■Enterprisebeans:
■Localsessionbeans
■AllenterprisebeanspackagedwithintheWAR
■ContextsandDependencyInjection(CDI):
■CDIannotationsforJavaServerFacescomponents
■ACDImanagedbeanusedasashoppingcart,withconversationscoping
■Qualifiers
■Eventsandeventhandlers
■Servlets:
■AServlet3.0fileuploadexample
■Aservletfordynamicimagepresentation
■JavaServerFacestechnology,usingFaceletsforthewebfrontend
■Templating
■Compositecomponents
■ResourcespackagedinaJARfilesotheycanbefoundintheclasspath
■Security:
■JavaEEsecurityconstraintsontheadministrativeinterfacebusinessmethods
(enterprisebeans)
■Securityconstraintsforcustomersandadministrators(webcomponents)
TheDuke’sForestapplicationhastwomainuserinterfaces,bothpackagedwithintheDuke’s
StoreWARfile:
■Themaininterface,forcustomersandguests
■Theadministrativeinterfaceusedtoperformbackofficeoperations,suchasaddingnewitemstothecatalog
TheDuke’sShipmentapplicationalsohasauserinterface,accessibletoadministrators.
Figure53–2 showshowthewebapplicationsandthewebserviceinteract.DesignandArchitectureofDuke’sForest
Chapter53 • Duke’sForestCaseStudyExample 967
Asillustratedin Figure53–2 ,thecustomerinteractswiththemaininterfaceofDuke’sStore,
whiletheadministratorinteractswiththeadministrationinterface.Bothinterfacesaccessafaçadeconsistingofmanagedbeansandstatelesssessionbeans,whichinturninteractwiththeentitiesthatrepresentdatabasetables.ThefaçadealsointeractswithwebservicesAPIsthataccesstheDuke’sPaymentwebservice.TheadministratoralsointeractswiththeinterfaceofDuke’sShipment,whichcanbeaccessedeitherdirectlythroughDuke’sShipmentorfromtheadministrationinterfaceofDuke’sStorebymeansofawebservice.
ThemostfundamentalbuildingblocksoftheapplicationaretheEventsandEntitiesprojects,
whicharebundledintoDuke’sStoreandDuke’sShipmentalongwiththeDuke’sResourcesproject.
TheeventsProject
EventsareoneofthecorecomponentsofDuke’sForest.The eventsproject,includedinall
threeofthemainprojects,isthemostsimpleprojectoftheapplication.Ithasonlyoneclass,OrderEvent ,butthisclassisresponsibleformostofthemessagesbetweenobjectsinthe
application.FIGURE53–2 InteractionsbetweenDuke’sForestComponents
Duke ’s Store    Duke ’s Shipment
Main Interface 
(Web Pages)
EntitiesDuke ’s Payment
Payment 
Service
json
 xml
Customer
DatabaseAdministratorREST/HTTP
HTTPHTTP
HTTPSOAP/HTTP
JDBC
Facade
Main Interface 
(Web Pages)
Admin Interface 
(Web Pages)
Web Services 
APIDesignandArchitectureofDuke’sForest
TheJavaEE6Tutorial • January2013 968
Theapplicationcansendmessagesbasedoneventstodifferentcomponentsandreacttothem
basedonthequalificationoftheevent.Theapplicationsupportsthefollowingqualifiers:
■@LoggedIn :Forauthenticatedusers
■@New:Whenaneworderiscreatedbytheshoppingcart
■@Paid:Whenanorderispaidforandreadyforshipment
Thefollowingcodesnippetfromthe PaymentHandler classofDuke’sStoreshowshowthe
@Paideventishandled:
@Inject @Paid Event<OrderEvent> eventManager;
...
public void onNewOrder(@Observes @New OrderEvent event) {
if (processPayment(convertForWS(event))) {
orderBean.setOrderStatus(event.getOrderID(),
OrderBean.Status.PENDING_PAYMENT.getStatus());
logger.info( "Payment Approved ");
eventManager.fire(event);
} else {
orderBean.setOrderStatus(event.getOrderID(),
OrderBean.Status.CANCELLED_PAYMENT.getStatus())
logger.info( "Payment Denied ");
}
}...
Toenableuserstoaddmoreeventstotheprojecteasilyorupdateaneventclasswithmorefields
foranewclient,thiscomponentisaseparateprojectwithintheapplication.
Theentities Project
Theentities projectisaJavaPersistenceAPI(JPA)projectusedbybothDuke’sStoreand
Duke’sShipment.Itisgeneratedfromthedatabaseschemashownin Figure53–3 andisalso
usedasabasefortheentitiesconsumedandproducedbythewebservicesthroughJAXB.Eachentityhasvalidationrulesbasedonbusinessrequirements,specifiedusingBeanValidation.DesignandArchitectureofDuke’sForest
Chapter53 • Duke’sForestCaseStudyExample 969
Thedatabaseschemacontainseighttables:
■PERSON,whichhasaone-to-manyrelationshipwith PERSON_GROUPS andCUSTOMER_ORDER
■GROUPS,whichhasaone-to-manyrelationshipwith PERSON_GROUPS
■PERSON_GROUPS ,whichhasamany-to-onerelationshipwith PERSONandGROUPS(itisthe
jointablebetweenthosetwotables)
■PRODUCT,whichhasamany-to-onerelationshipwith CATEGORY andaone-to-many
relationshipwith ORDER_DETAIL
■CATEGORY ,whichhasaone-to-manyrelationshipwith PRODUCTFIGURE53–3 Duke’sForestDatabaseTablesandtheirRelationships
 ID INT
 FIRSTNAME VARCHAR(50) LASTNAME VARCHAR(100) EMAIL VARCHAR(45) ADDRESS VARCHAR(45) CITY VARCHAR(45) PASSWORD VARCHAR(100) DTYPE VARCHAR(31)
PERSON
 ID INT NAME VARCHAR(45) PRICE DECIMAL(10,2) DESCRIPTION VARCHAR(45) IMG VARCHAR(45) CATEGORY_ID INT IMG_SRC BLOB(1073741823)
PRODUCT
 GROUPS_ID INT  EMAIL VARCHAR(45)
PERSON_GROUPS
 ID INT NAME VARCHAR(50) DESCRIPTION VARCHAR(300)GROUPS
 ID INT AMOUNT FLOAT(52) DATE_CREATED TIMESTAMP CUSTOMER_ID INT STATUS_ID INT
CUSTOMER_ORDER
 ORDER_ID INT PRODUCT_ID INT QTY INT
ORDER_DETAIL
 ID INT STATUS VARCHAR(45) DESCRIPTION VARCHAR(200)
ORDER_STATUS
 ID INT NAME VARCHAR(45) TAGS VARCHAR(45)
CATEGORY
Primary keyForeign keyRequired fieldFieldDesignandArchitectureofDuke’sForest
TheJavaEE6Tutorial • January2013 970
■ORDER_DETAIL ,whichhasamany-to-onerelationshipwith PRODUCTandCUSTOMER_ORDER
(itisthejointablebetweenthosetwotables)
■CUSTOMER_ORDER ,whichhasaone-to-manyrelationshipwith ORDER_DETAIL anda
many-to-onerelationshipwith PERSONandORDER_STATUS
■ORDER_STATUS ,whichhasaone-to-manyrelationshipwith CUSTOMER_ORDER
Theentityclassesthatcorrespondtothesetablesareasfollows:
■Person,whichdefinesattributescommontocustomersandadministrators.These
attributesaretheperson’snameandcontactinformation,includingstreetandemailaddresses.TheemailaddresshasaBeanValidationannotationtoensurethatthesubmitteddataiswell-formed.Thegeneratedtablefor Personentitiesalsohasa DTYPEfieldthat
representsthediscriminatorcolumn.Itsvalueidentifiesthesubclass( Customer or
Administrator )towhichthepersonbelongs.
■Customer ,aspecializationof Personwithaspecificfieldfor CustomerOrder objects.
■Administrator ,aspecializationof Personwithfieldsforadministrationprivileges.
■Groups,whichrepresentsthegroup( USERSorADMINS)towhichtheuserbelongs.
■Product,whichdefinesattributesforproducts.Theseattributesincludename,price,
description,associatedimage,andcategory.
■Category ,whichdefinesattributesforproductcategories.Theseattributesincludeaname
andasetoftags.
■CustomerOrder ,whichdefinesattributesforordersplacedbycustomers.Theseattributes
includeanamountandadate,alongwithidvaluesforthecustomerandtheorderdetail.
■OrderDetail ,whichdefinesattributesfortheorderdetail.Theseattributesincludea
quantity,alongwithidvaluesfortheproductandthecustomer.
■OrderStatus ,whichdefinesastatusattributeforeachorder.
Thedukes-payment Project
Thedukes-payment projectisawebprojectthatholdsasimple Paymentwebservice.Sincethis
isanexampleapplication,itdoesnotobtainanyrealcreditinformationorevencustomerstatustovalidatethepayment.Fornow,theonlyruleimposedbythepaymentsystemistodenyallordersabove$1,000.Thisapplicationillustratesacommonscenariowhereathird-partypaymentserviceisusedtovalidatecreditcardsorbankpayments.
TheprojectusesHTTPBasicAuthenticationandJAAS(JavaAuthenticationandAuthorization
Service)toauthenticateacustomertoaJAX-WSwebservice.Theimplementationitselfexposesasimplemethod, processPayment ,whichreceivesan OrderEvent toevaluateand
approveordenytheorderpayment.ThemethodiscalledfromthecheckoutprocessofDuke’sStore.DesignandArchitectureofDuke’sForest
Chapter53 • Duke’sForestCaseStudyExample 971
Thedukes-resources Project
Thedukes-resources projectcontainsanumberoffilesusedbybothDuke’sStoreandDuke’s
Shipment,bundledintoaJARfileplacedintheclasspath.Theresourcesareinthesrc/META-INF/resources directory:
src/META-INF/resources/css Twostylesheets, default.css andjsfcrud.css
src/META-INF/resources/img Imagesusedbytheprojects
src/META-INF/resources/js AJavaScriptfile, util.js
src/META-INF/resources/util Compositecomponentsusedbytheprojects
TheDuke’sStoreProject
Duke’sStore,awebapplication,isthecoreapplicationofDuke’sForest.Itisresponsibleforthe
mainstoreinterfaceforcustomersaswellastheadministrationinterface.
ThemaininterfaceofDuke’sStoreallowstheusertoperformthefollowingtasks:
■Browsingtheproductcatalog
■Signingupasanewcustomer
■Addingproductstotheshoppingcart
■Checkingout
■Viewingorderstatus
TheadministrationinterfaceofDuke’sStoreallowsadministratorstoperformthefollowing
tasks:
■Productmaintenance(create,edit,update,delete)
■Categorymaintenance(create,edit,update,delete)
■Customermaintenance(create,edit,update,delete)
■Groupmaintenance(create,edit,update,delete)
TheprojectalsousesstatelesssessionbeansasfaçadesforinteractionswiththeJPAentities
describedin “The entities Project”onpage969 ,andCDImanagedbeansascontrollersfor
interactionswithFaceletspages.TheprojectthusfollowstheMVC(Model-View-Controller)patternandappliesthesamepatterntoallentitiesandpages,asinthefollowingexample:
■AbstractFacade isanabstractclassthatreceivesa Type<T>andimplementsthecommon
operations(CRUD)forthistype,where <T>isaJPAentity.
■ProductBean isastatelesssessionbeanthatextends AbstractFacade ,applying Productas
Type<T>,andinjectsthe PersistenceContext fortheEntityManager.Thisbean
implementsanycustommethodsneededtointeractwiththe Productentityortocalla
customquery.DesignandArchitectureofDuke’sForest
TheJavaEE6Tutorial • January2013 972
■ProductController isaCDImanagedbeanthatinteractswiththenecessaryenterprise
beansandFaceletspagestocontrolthewaythedatawillbedisplayed.
ProductBean beginsasfollows:
@Stateless
public class ProductBean extends AbstractFacade<Product> {
private static final Logger logger =
Logger.getLogger(ProductBean.class.getCanonicalName());
@PersistenceContext(unitName= "forestPU ")
private EntityManager em;
@Override
protected EntityManager getEntityManager() {
return em;
}...
EnterpriseBeansUsedinDuke’sStore
TheenterprisebeansusedinDuke’sStoreprovidethebusinesslogicfortheapplicationandare
locatedinthe com.forest.ejb package.Allarestatelesssessionbeans.
AbstractFacade isnotanenterprisebeanbutanabstractclassthatimplementscommon
operationsfor Type<T>,where <T>isaJPAentity.
Mostoftheotherbeansextend AbstractFacade ,injectthe PersistenceContext ,and
implementanyneededcustommethods:
■AdministratorBean
■CategoryBean
■GroupsBean
■OrderBean
■OrderDetailBean
■OrderStatusBean
■ProductBean
■ShoppingCart
■UserBean
TheShoppingCart ,althoughitisinthe ejbpackage,isaCDImanagedbeanwithconversation
scope,whichmeansthattherequestinformationwillpersistacrossmultiplerequests.Also,ShoppingCart isresponsibleforstartingtheeventchainforcustomerorders,asdescribedin
“The eventsProject”onpage968 .DesignandArchitectureofDuke’sForest
Chapter53 • Duke’sForestCaseStudyExample 973
FaceletsFilesUsedintheMainInterfaceofDuke’sStore
Liketheothercasestudyexamples,Duke’sStoreusesFaceletstodisplaytheuserinterface.The
maininterfaceusesalargenumberofFaceletspagestodisplaydifferentareas.Thepagesaregroupedintodirectoriesbasedonwhichmoduletheyhandle.
template.xhtml Templatefile,usedforbothmainandadministrationinterfaces.It
firstperformsabrowserchecktoverifythattheuser’sbrowsersupportsHTML5,whichisrequiredforDuke’sForest.Itdividesthescreenintoseveralareasandspecifiestheclientpageforeacharea.
topbar.xhtml Pagefortheloginareaatthetopofthescreen
top.xhtml Pageforthetitlearea
left.xhtml Pagefortheleftsidebar
index.xhtml Pageforthemainscreencontent
login.xhtml Loginpagespecifiedin web.xml.Themainlogininterfaceis
providedin topbar.xhtml ,butthispageappearsifthereisalogin
error.
admindirectory Pagesrelatedtotheadministrationinterface,describedin
“Facelets
FilesUsedintheAdministrationInterfaceofDuke’sStore”onpage974
customer directory Pagesrelatedtocustomers( Create.xhtml ,Edit.xhtml ,
List.xhtml ,Profile.xhtml ,View.xhtml )
orderdirectory Pagesrelatedtoorders( Create.xhtml ,List.xhtml ,
MyOrders.xhtml ,View.xhtml )
orderDetail directory Popuppageallowinguserstoviewdetailsofanorder
(View_popup.xhtml )
orderStatus directory Pagesrelatedtoorderstatus( Create.xhtml ,Edit.xhtml ,
List.xhtml ,View.xhtml )
productdirectory Pagesrelatedtoproducts( List.xhtml ,ListCategory.xhtml ,
View.xhtml )
FaceletsFilesUsedintheAdministrationInterfaceofDuke’sStore
TheFaceletspagesfortheadministrationinterfaceofDuke’sStorearefoundinthe web/admin
directory.
administrator directory Pagesrelatedtoadministratormanagement( Create.xhtml ,
Edit.xhtml ,List.xhtml ,View.xhtml )DesignandArchitectureofDuke’sForest
TheJavaEE6Tutorial • January2013 974
category directory Pagesrelatedtoproductcategorymanagement( Create.xhtml ,
Edit.xhtml ,List.xhtml ,View.xhtml )
customer directory Pagesrelatedtocustomermanagement( Create.xhtml ,
Edit.xhtml ,List.xhtml ,Profile.xhtml ,View.xhtml )
groupsfolder Pagesrelatedtogroupmanagement( Create.xhtml ,Edit.xhtml ,
List.xhtml ,View.xhtml )
orderdirectory Pagesrelatedtoordermanagement( Create.xhtml ,Edit.xhtml ,
List.xhtml ,View.xhtml )
orderDetail directory Popuppageallowingtheadministratortoviewdetailsofanorder
(View_popup.xhtml )
productdirectory Pagesrelatedtoproductmanagement( Confirm.xhtml ,
Create.xhtml ,Edit.xhtml ,List.xhtml ,View.xhtml )
ManagedBeansUsedinDuke’sStore
Duke’sStoreusesthefollowingCDImanagedbeans,whichcorrespondtotheenterprisebeans.
Thebeansareinthe com.forest.web package.
■AdministratorController
■CategoryController
■CustomerController
■CustomerOrderController
■GroupsController
■OrderDetailController
■OrderStatusController
■ProductController
■UserController
HelperClassesUsedinDuke’sStore
TheCDImanagedbeansinthemaininterfaceofDuke’sStoreusethefollowinghelperclasses,
foundinthe com.forest.web.util package:
AbstractPaginationHelper Anabstractclasswithmethodsusedbythemanaged
beans
FileUploadServlet ,ImageServlet Classesusedforimageprocessing.
FileUploadServlet uploadsanimageandstoresits
contentinthedatabase. ImageServlet retrievesthe
imagecontentfromthedatabaseanddisplaysit.(JavaServerFacestechnologydoesnotprovidethisfunctionality,soaservletisneeded.)DesignandArchitectureofDuke’sForest
Chapter53 • Duke’sForestCaseStudyExample 975
JsfUtil ClassusedforJavaServerFacesoperations,suchas
queuingmessagesona FacesContext instance
MD5Util Classusedbythe CustomerController managedbean
togenerateanencryptedpasswordforauser
QualifiersUsedinDuke’sStore
Duke’sStoredefinesthefollowingqualifiersinthe com.forest.qualifiers package:
@LoggedIn Qualifiesauserashavingloggedin.
@New Qualifiesanorderasnew.
@Paid Qualifiesanorderaspaid.
EventHandlersUsedinDuke’sStore
Duke’sStoredefineseventhandlersrelatedtothe OrderEvent classpackagedin “The events
Project”onpage968 .Theeventhandlersareinthe com.forest.handlers package:
IOrderHandler TheIOrderHandler interfacedefinesamethod, onNewOrder ,
implementedbythetwohandlerclasses.
PaymentHandler TheShoppingCart beanfiresan OrderEvent qualifiedas @New.The
onNewOrder methodof PaymentHandler observestheseeventsand,
whenitinterceptsthem,processesthepaymentusingtheDuke’sPaymentwebservice.Afterasuccessfulresponsefromthewebservice,PaymentHandler firesthe OrderEvent again,thistimequalifiedas @Paid.
DeliveryHandler TheonNewOrder methodof DeliveryHandler observes OrderEvent
objectsqualifiedas @Paid(orderspaidandreadyfordelivery)and
modifiestheorderstatusto PENDING_SHIPMENT .Whenanadministrator
accessesDuke’sShipment,itwillcalltheOrderService,aRESTfulwebservice,andaskforallordersinthedatabasethatarereadyfordelivery.
PropertiesFilesUsedinDuke’sStore
ThestringsusedinthemainandadministrationinterfacesofDuke’sStoreareencapsulatedintoresourcebundlestoallowthedisplayoflocalizedstringsinmultiplelocales.Theresourcebundlesarelocatedinthedefaultpackage.
Bundle.properties ApplicationmessagesinEnglish
Bundle_es.properties ApplicationmessagesinSpanish
ValidationMessages.properties BeanValidationmessagesinEnglish
ValidationMessages_es.properties BeanValidationmessagesinSpanishDesignandArchitectureofDuke’sForest
TheJavaEE6Tutorial • January2013 976
DeploymentDescriptorsUsedinDuke’sStore
Duke’sStoreusesthefollowingdeploymentdescriptors,locatedinthe web/WEB-INF directory:
beans.xml AnemptydeploymentdescriptorfileusedtoenabletheCDIruntime
faces-config.xml TheJavaServerFacesconfigurationfile
glassfish-web.xml TheconfigurationfilespecifictoGlassFishServer
jaxws-catalog.xml AdeploymentdescriptorforaJAX-WSwebserviceclient
web.xml Thewebapplicationconfigurationfile
TheDuke’sShipmentProject
Duke’sShipmentisawebapplicationwithaloginpage,amainFaceletspage,andsomeother
objects.Thisapplication,whichisaccessibleonlytoadministrators,callstheOrderService(theRESTfulwebserviceexposedbyDuke’sStore)andlistsallordersundertwostatusheadings:PendingandShipped.Theadministratorcaneitherapproveordenyapendingorder.Ifapproved,theorderisshipped,anditappearsundertheShippedheading.Ifdenied,theorderdisappearsfromthepage,andonthecustomer’sOrderslistitappearsascancelled.
ThereisalsoagearicononthePendinglistthatmakesanAjaxcalltotheOrderServiceto
refreshthelistwithoutrefreshingthepage.Thecodelookslikethis:
<h:commandLink>
<h:graphicImage library= "img"title= "Check for new orders "
style= "border:0px "name= "refresh.png "/>
<f:ajax execute= "refresh "render= "out"/>
</h:commandLink>
EnterpriseBeanUsedinDuke’sShipment
TheenterprisebeanusedinDuke’sShipment, UserBean ,providesthebusinesslogicforthe
applicationandislocatedinthe com.forest.shipment.session package.Itisastateless
sessionbean.
LikeDuke’sStore,Duke’sShipmentusesthe AbstractFacade class.Thisclassisnotan
enterprisebeanbutanabstractclassthatimplementscommonoperationsfor Type<T>,where
<T>isaJPAentity.
FaceletsFilesUsedinDuke’sShipment
Duke’sShipmenthasonlyonepage,soithasmanyfewerFaceletsfilesthanDuke’sStore.DesignandArchitectureofDuke’sForest
Chapter53 • Duke’sForestCaseStudyExample 977
template.xhtml Thetemplatefile,liketheoneinDuke’sStore,firstperformsabrowser
checktoverifythattheuser’sbrowsersupportsHTML5,whichisrequiredforDuke’sForest.Itdividesthescreenintoareasandspecifiestheclientpageforeacharea.
topbar.xhtml Pagefortheloginareaatthetopofthescreen
top.xhtml Pageforthetitlearea
left.xhtml Pagefortheleftsidebar(notusedinDuke’sShipment)
index.xhtml Pagefortheinitialmainscreencontent
login.xhtml Loginpagespecifiedin web.xml.Themainlogininterfaceisprovided
intopbar.xhtml ,butthispageappearsifthereisaloginerror
admin/index.xhtml Pageforthemainscreencontentafterauthentication
ManagedBeansUsedinDuke’sShipment
Duke’sShipmentusesthefollowingCDImanagedbeans,inthe com.forest.shipment
package:
control.ShippingBean ManagedbeanthatactsasaclienttotheOrderService
web.UserController Managedbeanthatcorrespondstothe UserBean sessionbean
HelperClassUsedinDuke’sShipment
TheDuke’sShipmentmanagedbeansuseonlyonehelperclass,foundinthe
com.forest.shipment.web.util package:
JsfUtil ClassusedforJavaServerFacesoperations,suchasqueuingmessagesona
FacesContext instance
QualifierUsedinDuke’sShipment
Duke’sShipmentdefinesthefollowingqualifierinthe com.forest.qualifiers package:
@LoggedIn Qualifiesauserashavingloggedin
PropertiesFilesUsedinDuke’sShipment
TheDuke'sShipmentpropertiesfiles,locatedinthedefaultpackage,are Bundle.properties ,
containingEnglishstrings,and Bundle_es.properties ,containingSpanishstrings.Theyare
identicaltothefilesinDuke'sStore.DesignandArchitectureofDuke’sForest
TheJavaEE6Tutorial • January2013 978
DeploymentDescriptorsUsedinDuke’sShipment
Duke’sShipmentusesthefollowingdeploymentdescriptors:
web/WEB-INF/beans.xml Anemptydeploymentdescriptorfileusedtoenablethe
CDIruntime
web/WEB-INF/faces-config.xml TheJavaServerFacesconfigurationfile
web/WEB-INF/glassfish-web.xml TheconfigurationfilespecifictoGlassFishServer
web/WEB-INF/web.xml Thewebapplicationconfigurationfile
src/conf/persistence.xml TheJavaPersistenceAPIconfigurationfile
BuildingandDeployingtheDuke’sForestCaseStudy
Application
YoucanuseNetBeansIDEorAnttobuildanddeployDuke’sForest.Theprerequisitetask
requiresAnt.
PrerequisiteTask
Beforeyoubeginthistask,youmusthavealreadyconfiguredGlassFishServerasaJavaEEserverinNetBeansIDE,asdescribedin
“ToAddGlassFishServerasaServerinNetBeansIDE”
onpage72 .
▼ToCreatetheJDBCRealmandPopulatetheDatabase
EnableDefaultPrincipaltoRoleMappingontheGlassFishServer,ifyouhavenotdonesopreviously:
a. FromtheAdministrationConsole,expandtheConfigurationsnode,thenexpandthe
server-confignode.
b. SelecttheSecuritynode.c. SelecttheDefaultPrincipaltoRoleMappingEnabledcheckbox.d. ClickSave.Inaterminalwindow,goto:
tut-install /examples/case-studies/dukes-forest/entities/1
2BuildingandDeployingtheDuke’sForestCaseStudyApplication
Chapter53 • Duke’sForestCaseStudyExample 979
Executethe create-forest-realm Anttask:
ant create-forest-realm
ThistaskcreatesaJDBCconnectionpoolandaJDBCresourceaswellastherealm.
ExecutetheAnttask:
ant
Thistaskcreatesthetables(droppinganyexistingtables)andbuildstheJARfile.Ignoreany
errorsifyouarerunningthetaskforthefirsttime.
▼ToBuildandDeploytheDuke’sForestApplication
UsingNetBeansIDE
FromtheFilemenu,chooseOpenProject.
IntheOpenProjectdialog,navigateto:
tut-install /examples/case-studies/dukes-forest/
Selectthe dukes-store folder.
SelecttheOpenRequiredProjectscheckbox.ClickOpenProject.
TheIDEwillopenthe dukes-store ,dukes-resources ,entities ,and eventsprojects.
Theprojectopenswithamessagestatingthatthereisadatasourceproblem.
Right-clicktheprojectandselectResolveDataSourceProblem.Inthedialogthatopens,select jdbc/forest andclickAddConnection.
ClickFinish.
Theconnectiontothe forestdatabaseisnowestablished.
Iftheprojectstillindicatesthereisadatasourceproblembutthedialogdoesnotindicatea
missingconnection,closeandreopentheproject.
Repeatsteps1–5toopenthe dukes-shipment project.
Repeatsteps1–5toopenthe dukes-payment project.
Right-clickthe eventsprojectandselectBuild.3
4
1
2
3
45
6
78
9
1011BuildingandDeployingtheDuke’sForestCaseStudyApplication
TheJavaEE6Tutorial • January2013 980
Right-clickthe dukes-resources projectandselectBuild.
Right-clickthe dukes-payment projectandselectDeploy.
Right-clickthe dukes-store projectandselectDeploy.
Right-clickthe dukes-shipment projectandselectDeploy.
Thedukes-shipment projectrequiresthefile jersey-client.jar ,whichislocatedin
as-install /lib/modules/ .IfyougetaResolveReferenceserrorwhenyoufirsttrytobuild
dukes-shipment ,youcanresolvetheerrorbylocatingthisfile.
▼ToBuildandDeploytheDuke’sForestApplication
UsingAnt
Inaterminalwindow,goto:
tut-install /examples/case-studies/dukes-forest/events/
Enterthefollowingcommandtobuildthe events.jar file:
ant
Gotothe dukes-resources directory:
cd ../dukes-resources
Enterthefollowingcommandtobuildthe dukes-resources.jar file:
ant
Gotothe dukes-payment directory:
cd ../dukes-payment
Enterthefollowingcommand:
ant all
Gotothe dukes-store directory:
cd ../dukes-store
Enterthefollowingcommand:
ant all
Gotothe dukes-shipment directory:
cd ../dukes-shipment12
131415
1
23456789BuildingandDeployingtheDuke’sForestCaseStudyApplication
Chapter53 • Duke’sForestCaseStudyExample 981
Enterthefollowingcommand:
ant all
RunningtheDuke’sForestApplication
RunningtheDuke’sForestapplicationinvolvesseveraltasks,amongthemthefollowing:
■RegisteringasacustomerofDuke’sStore
■Asacustomer,purchasingproducts
■Asanadministrator,approvingshipmentofaproduct
■Asanadministrator,creatinganewproduct
▼ToRegisterasaDuke’sStoreCustomer
Inawebbrowser,enterthefollowingURL:
http://localhost:8080/dukes-store
TheDuke’sForest-Storepageopens.
ClicktheSignUpbuttonatthetopofthepage.Fillintheformfields,thenclickSave.
Allfieldsarerequired,andthePasswordvaluemustbeatleast7charactersinlength.
▼ToPurchaseProducts
Tologinastheuseryoucreated,orasoneoftwousersalreadyinthedatabase,entertheuser
nameandpasswordandclickLogIn.
Thepreexistingusershavetheusernames jack@example.com androbert@example.com ,and
theybothhavethesamepassword, 1234.
ClickProductsintheleftsidebar.Onthepagethatappears,clickoneofthecategories(Plants,Food,Services,orTools).ChooseaproductandclickAddtoCart.
Youcanorderonlyoneofanyoneproduct,butyoucanordermultiple differentproductsin
multiplecategories.TheproductsandarunningtotalappearintheShoppingCartintheleftsidebar.10
1
2
3
1
2
34RunningtheDuke’sForestApplication
TheJavaEE6Tutorial • January2013 982
Whenyouhavefinishedchoosingproducts,clickCheckout.
Amessageappears,reportingthatyourorderisbeingprocessed.
ClickOrdersintheleftsidebartoverifyyourorder.
Ifthetotaloftheorderwasover$1,000,thestatusoftheorderis“Ordercancelled,”becausethe
Paymentwebservicedeniesordersoverthatlimit.Otherwise,thestatusis“Readytoship.”
Whenyouhavefinishedplacingorders,clicktheLogoutbuttonatthetopofthepage.
▼ToApproveShipmentofaProduct
LogintoDuke’sStoreasanadministrator.
Yourusernameis admin@example.com ,andyourpasswordis 1234.
Themainadministrationpageallowsyoutoviewcategories,customers,administrators,
groups,products,andorders,andtocreatenewobjectsofalltypesexceptorders.
Atthebottomofthepage,clickApproveShipment.
ThisactiontakesyoutoDuke’sShipment.
LogintoDuke’sShipmentatthetopofthepage,as admin@example.com .
OnthePendinglist,clickApprovetoapproveanorderandmoveittotheShippedareaofthe
page.
IfyouclickDeny,theorderdisappearsfromthepage.IfyoulogintoDuke’sStoreagainasthe
customer,itwillappearintheOrderslistas“OrderCancelled.”
ToreturntoDuke’sStorefromDuke’sShipment,clickReturntoDuke’sStore.
▼ToCreateaNewProduct
Youcancreateotherkindsofobjectsaswellasproducts.Creatingproductsismorecomplex
thantheothercreationprocesses.
LogintoDuke’sStoreasanadministrator.Onthemainadministrationpage,clickCreateNewProduct.EntervaluesintheName,Price,andDescriptionfields.5
6
7
1
2
3
4
NextSteps
1
23RunningtheDuke’sForestApplication
Chapter53 • Duke’sForestCaseStudyExample 983
Selectacategory,thenclickNext.
OntheUploadtheProductImagepage,clickBrowsetolocateanimageonyourfilesystem
usingafilechooser.
ClickNext.Onthenextpage,viewtheproductfields,thenclickDone.ClickProductsintheleftsidebar,thenclickthecategorytoverifythattheproducthasbeen
added.
ClickAdministrationatthetopofthepagetoreturntothemainadministrationpage,orclick
Logouttologout.4
5
6
78
9RunningtheDuke’sForestApplication
TheJavaEE6Tutorial • January2013 984
Index
NumbersandSymbols
@AccessTimeout annotation, 471
@Alternative annotation, 539–541
@ApplicationScoped annotation, 88,296,520–522
@AroundInvoke annotation, 934
@AroundTimeout annotation, 934
@Asynchronous annotation, 506
@ConcurrencyManagement annotation, 470
@Consumes annotation, 384,391–392
@Context annotation, 403–406
@ConversationScoped annotation, 520–522
@CookieParam annotation, 403–406
@CustomScoped annotation, 297
@DeclareRoles annotation, 743–745,750–752
@Decorator annotation, 549–550
@Delegate annotation, 549–550
@DELETEannotation, 383,387–388
@DenyAll annotation, 744
@Dependent annotation, 520–522
@DependsOn annotation, 469
@DiscriminatorColumn annotation, 593–594
@DiscriminatorValue annotation, 593–594
@Disposes annotation, 543
@Embeddable annotation, 590
@EmbeddedId annotation, 585
@Entityannotation, 580
@FormParam annotation, 403–406
@GETannotation, 383,387–388
@GroupSequence annotation, 931–932
@HEADannotation, 383
@HeaderParam annotation, 403–406
@HttpConstraint annotation, 715,731@HttpMethodConstraint annotation, 715,731
@Idannotation, 585
@IdClass annotation, 585
@Injectannotation, 520
@Localannotation, 443,462
@Lockannotation, 470–472
@ManagedBean annotation, 106–107,113–114,
296–297
@ManyToMany annotation, 587,588
@ManyToOne annotation, 587
@MatrixParam annotation, 403–406
@MessageDriven annotation, 899–900
@MultipartConfig annotation, 347–348
@Namedannotation, 522–523
@NamedQuery annotation, 630
@NoneScoped annotation, 297
@Observes annotation, 545–546
@OneToMany annotation, 587,588,589
@OneToOne annotation, 587,588,589
@Pathannotation, 383,385–387
@PathParam annotation, 383,392–395,403–406
@PermitAll annotation, 744
@PersistenceContext annotation, 595
@PersistenceUnit annotation, 596
@POSTannotation, 383,387–388
@PostActivate annotation, 463,464
@PostConstruct annotation, 450–453,463,464,934
sessionbeansusingJMS, 899
@PreDestroy annotation, 450–453,463,464,934
sessionbeansusingJMS, 899
@PrePassivate annotation, 463,464
985
@Produces annotation, 384,390–391,524–525,
541–543
@Provider annotation, 384
@PUTannotation, 383,387–388
@Qualifier annotation, 519
@QueryParam annotation, 383,392–395,403–406
@Remoteannotation, 443,462
@Removeannotation, 450,463,466
@RequestScoped annotation, 88,296,520–522
@Resource annotation, 807–810
JMSresources, 492,834
@ResourceDependency annotation, 238
@RolesAllowed annotation, 743,750–752
@RunAsannotation, 747–749
@Schedule and@Schedules annotations, 483–484
@ServletSecurity annotation, 715,731
@SessionScoped annotation, 88,296,520–522
@Singleton annotation, 468
@Startup annotation, 468
@Stateful annotation, 463
@Timeout annotation, 482
@Timeout method, 482,484
@Transient annotation, 581
@ViewScoped annotation, 296
@WebFilter annotation, 335
@WebInitParam annotation, 332,335
@WebListener annotation, 329
@WebMethod annotation, 465
@WebService annotation, 368
@WebServiceRef annotation, 101
@WebServlet annotation, 93,331–332
A
abstractschemas, 630
accesscontrol, 696acknowledge method, 844
acknowledgingmessages, Seemessageacknowledgment
actionevents, 153,221–222,224,273–274
ActionEvent class, 273,274
actionListener attribute, 152,186,187,258
ActionListener implementation, 273,274
ActionListener interface, 182–183
actionListener tag, 171,182–183actionevents (Continued)
f:actionListener tag, 254
processAction(ActionEvent) method, 274
referencingmethodsthathandleactionevents, 187,
202
writingamanagedbeanmethodtohandleaction
events, 202
actionmethod, 224administeredobjects, 829,833–835
Seealsoconnectionfactories,destinations
creatingandremoving, 863–864
AdministrationConsole, 67
starting, 74
afterBegin method, 799
afterCompletion method, 799
Ajax
errorhandling, 234eventattributeof f:ajaxtag, 231–232
example, 238–242executeattributeof f:ajaxtag, 232
groupingcomponents, 236immediate attributeof f:ajaxtag, 232
listener attributeof f:ajaxtag, 233
loadingJavaScriptresourcelibrary, 236–238monitoringevents, 233onerrorattributeof f:ajaxtag, 234
oneventattributeof f:ajaxtag, 233
overview, 228receivingresponses, 234–235renderattributeof f:ajaxtag, 234–235
requestlifecycle, 235sendingrequests, 231–233usingJavaScriptAPIdirectly, 237–238usingwithFacelets, 229–231usingwithJavaServerFacestechnology, 227–242
alternatives
CDI, 539–541example, 553–558
annotations, 37
interceptormetadata, 933JAX-RS, 382–395,403–406security, 700,731–732,740,743–745
Anttool, 72–73appclient tool, 67Index
TheJavaEE6Tutorial • January2013 986
appletcontainer, 49
applets, 43,44applicationclientcontainer, 49applicationclients, 42–43
securing, 778–779
applicationclients,JMS
building, 865,868,871examples, 492,860–886packaging, 874running, 865–867,868–870,872–873,874–875runningonmultiplesystems, 880–886
applications
JavaServerFaces, 104security, 698undeploying, 92–93
asadmintool, 67
asynchronousmessageconsumption, 832
Seealsomessage-drivenbeans
JMSclientexample, 870–875
asynchronousmethodinvocation
callingasynchronousbusinessmethods, 507–508cancelling, 507checkingstatus, 508creatingasynchronousbusinessmethods, 506example, 508–511java.util.concurrent.Future<V> interface, 505
retrievingresults, 507sessionbeans, 505–511
attributesreferencingmanagedbeanmethods, 186
actionattribute, 186,187
actionListener attribute, 186,187
validator attribute, 186,187
valueChangeListener attribute, 186,188
auditmodules,pluggable, 702auditing, 697auth-constraint element, 717
authenticate method, 724–726
authenticatingusers, 719–722,722–723authentication, 696–697,710
basic, 720basicwithEJB, 746certificate-basedmutual, 765client, 764,766–767digest, 722authentication (Continued)
form-based, 721–722,734–738mutual, 764–768username/password-basedmutual, 765
authorization, 696–697authorizationconstraints, 716,717
authorizationproviders,pluggable, 702AUTO_ACKNOWLEDGE mode, 844
autocommit, 61
B
basicauthentication, 720
EJB, 746example, 730–733
bean-managedtransactions, 856
Seetransactions,bean-managed
BeanValidation, 62
advanced, 929–932constraints, 623–624customconstraints, 929–930examples, 623–627groups, 931–932JavaPersistenceAPI, 583–585JavaServerFacesapplications, 204–208,625localization, 930messages, 930ordering, 931–932resourcebundles, 930
beans,definedforCDI, 517beans.xml file, 525
beforeCompletion method, 799
BLOBs,Seepersistence,BLOBs
bookmarkableURLs
componenttags, 165–166example, 167–168viewparameters, 166–167
BufferedReader class, 333
buildartifacts,removing, 92–93bundles,Seeresourcebundles
businesslogic, 436businessmethods, 445
clientcalls, 465exceptions, 465Index
987
businessmethods (Continued)
locating, 456requirements, 465transactions, 797,799,801,802
BytesMessage interface, 841
C
CallbackHandler interface, 778
capture-schema tool, 67
CDI
SeeContextsandDependencyInjection(CDI)for
theJavaEEplatform
certificateauthorities, 760certificates, 698
client, 767–768digital, 699,759–764server, 763–764server,generating, 760–762usingforauthentication, 762
characterencodings, 360charactersets, 359–360classfiles,removing, 92–93CLIENT_ACKNOWLEDGE mode, 844
clientcertificates,generating, 767–768clientID,fordurablesubscriptions, 847clients
authenticating, 764,766–767securing, 778–779
CLOBs,Seepersistence,CLOBs
collections
persistence, 581–583,671
commitmethod, 799
commitmethod(JMS), 849–851
commits, Seetransactions,commits
CommonClientInterface,Connector
architecture, 815–816
componentbinding, 191,192,288,292–293
bindingattribute, 191,288,292
component-managedsign-on, 780componentproperties, Seemanagedbeanproperties
componentrenderingmodel, 217,219
decodemethod, 213,267,275,280
decoding, 254,262componentrenderingmodel (Continued)
delegatedimplementation, 255directimplementation, 255encodemethod, 281
encodeBegin method, 265
encodeChildren method, 265
encodeEnd method, 265,271
encoding, 254,262HTMLrenderkit, 276,317renderkit, 219Renderer class, 219
Renderer implementation, 317
RenderKit class, 220
RenderKit implementation, 317
componenttagattributes
actionattribute, 152,201,258
actionListener attribute, 152,186,202,258
altattribute, 258
bindingattribute, 143,145,191,288,292
columnsattribute, 156
converter attribute, 148,176–177,282
forattribute, 151,165
idattribute, 143
immediate attribute, 143,258
redisplay attribute, 150
rendered attribute, 143,144–145,292
styleattribute, 143,145,165
styleClass attribute, 143,145
validator attribute, 148,202
valueattribute, 143,145,192,259,288,289–291
valueChangeListener attribute, 149,188,203
varattribute, 359
componenttags, 192,220,222
attributes
Seecomponenttagattributes
bodytag, 145–146
bookmarkableURLs, 165–166buttontag, 165–166
columntag, 141
commandButton tag, 141,152–153
commandLink tag, 141,153
dataTable tag, 141,161–164,194
formtag, 141,146–147,147
graphicImage tag, 141,153–154Index
TheJavaEE6Tutorial • January2013 988
componenttags (Continued)
h:graphicImage tag, 258
headtag, 145–146
inputHidden tag, 141,148
inputSecret tag, 141,148,150
inputText tag, 141,148,149–150
inputTextarea tag, 141,148
linktag, 165–166
messagetag, 141,164–165
messages tag, 141,164–165
outputFormat tag, 141,149,151
outputLabel tag, 141,149,150–151
outputLink tag, 142,149,151
outputScript tag, 169–170
outputStylesheet tag, 169–170
outputText tag, 142,149,153,195
panelGrid tag, 142,154–156
panelGroup tag, 142,154–156
resourcerelocation, 169–170selectBooleanCheckbox tag, 142,157,195
selectItems tag, 198
selectManyCheckbox tag, 142,158–159,196
selectManyListbox tag, 142,158
selectManyMenu tag, 142,158
selectOneListbox tag, 142,157
selectOneMenu tag, 142,157–158,197
selectOneRadio tag, 142,157
components
buttons, 141,152–153checkboxes, 142,157,158–159comboboxes, 142datagrids, 141hiddenfields, 141hyperlinks, 141,153images, 153–154labels, 141,142listboxes, 142menus, 157–158,158passwordfields, 141radiobuttons, 142tablecolumns, 141tables, 142,154–156,161–164textareas, 141textfields, 141compositecomponents
advancedfeatures, 243–249attributes, 243–244defaultattribute, 243
example, 245–249f:validateBean tag, 245
f:validateRegex tag, 245
f:validateRequired tag, 245
Facelets, 121–123invokingmanagedbeans, 244method-signature attribute, 244
nameattribute, 243
required attribute, 243
typeattribute, 244
validatingvalues, 245
concurrentaccess, 793concurrentaccesstoentitydata, 677–679conditionalHTTPrequests,JAX-RS, 409–410confidentiality, 710configuringJavaServerFacesapplications
Application class, 298
applicationconfigurationresourcefiles, 297–300configuringmanagedbeans, 296–297,300–308configuringnavigationrules
Seeconfiguringnavigationrules
errormessageregistration, 284faces-config.xml files, 315
includingtheclasses,pages,andother
resources, 324–325
javax.faces.application.CONFIG_FILES context
parameter, 298
registeringcustomconverters, 313registeringcustomrenderers, 317–319registeringcustomUIcomponents, 319–320registeringcustomvalidators, 312registeringmessages, 308–311specifyingwhereUIcomponentstateissaved, 270valuebinding, 289–291
configuringmanagedbeans, 259,300–308configuringnavigationrules, 223,313–317
from-action element, 315
from-view-id element, 315
navigation-case element, 314,315
navigation-rule element, 315Index
989
configuringnavigationrules (Continued)
to-view-id element, 315
connectionfactories, 834
creating, 495,863–864injectingresources, 492,834specifyingforremoteservers, 881–882
Connection interface, 799,803
Connection interface(JMS), 835
connectionpooling, 806ConnectionFactory interface(JMS), 834
connections,securing, 710–711connections,JMS
introduction, 835managinginenterprisebeanapplications, 853
connectors, SeeJavaEEConnectorarchitecture
container-managedsign-on, 780container-managedtransactions, Seetransactions,
container-managed
containers, 47–49
SeealsoEJBcontainer,webcontainer
applicationclient, 49configurableservices, 47nonconfigurableservices, 47securing, 700–701security, 692–697services, 47trustbetween, 749web, 82
contextparameters, 88
specifying, 97–98
contextroots, 89ContextsandDependencyInjection(CDI)fortheJava
EEplatform, 62advancedtopics, 539–551alternatives, 539–541basicconcepts, 515–526beans, 517configuringapplications, 525convertingmanagedbeanstoJAX-RSrootresource
classes, 409
decorators, 549–550disposermethods, 543EL, 522–523events, 545–547ContextsandDependencyInjection(CDI)fortheJava
EEplatform (Continued)
examples, 527–538,553–576Faceletspages, 524injectableobjects, 518injectingbeans, 520integratingwithJAX-RS, 408–409interceptors, 547–549managedbeans, 517–518observermethods, 545–546overview, 516producerfields, 541–543,543producermethods, 524–525,541–543qualifiers, 519scopes, 520–522
setterandgettermethods, 523specialization, 540–541stereotypes, 550–551
conversationalstate, 437conversionmodel, 217,220–221
Seealsoconvertertags
Seealsoconverters
converter attribute, 148,176–177,282
Converter implementations, 175–180,220,282
Converter interface, 279
converterId attribute, 176
convertingdatabetweenmodeland
presentation, 220
javax.faces.convert package, 175
modelview, 279,280presentationview, 279,280
Converter implementationclasses
BigDecimalConverter class, 175
BigIntegerConverter class, 175
BooleanConverter class, 175
ByteConverter class, 175
CharacterConverter class, 175
DateTimeConverter class, 175,176,177
DoubleConverter class, 175
EnumConverter class, 175
FloatConverter class, 176
IntegerConverter class, 176
LongConverter class, 176
NumberConverter class, 176,177,179–180Index
TheJavaEE6Tutorial • January2013 990
Converter implementationclasses (Continued)
ShortConverter class, 176
convertertags
convertDateTime tag, 177
convertDateTime tagattributes, 178–179
converter tag, 177
convertNumber tag, 177,179–180
convertNumber tagattributes, 179–180
f:converter tag, 282
converters, 213,217
Seealsostandardconverters
customconverters, 221,282–283
convertingdata, Seeconversionmodel
cookieparameters,JAX-RS, 395createBrowser method, 875
createTimer method, 482
credential, 706CriteriaAPI, 661–671
creatingqueries, 665examples, 619–620expressions, 667–668,668–669pathnavigation, 667queryexecution, 671queryresults, 667–669,669–671
criteriaqueries,string-based, 673–675cryptography,public-key, 760customconverters
bindingtomanagedbeanproperties, 293–294creating, 279–283getAsObject(FacesContext, UIComponent,
String)method, 279
getAsObject method, 280
getAsString(FacesContext, UIComponent,
Object)method, 280
getAsString method, 281
registering, 313using, 282–283
customobjects
Seealsocustomrenderers,customtags,customUI
components,customvalidators
customconverters, 282–283using, 277–278usingcustomcomponents,renderersandtags
together, 255–256customrenderers
creatingthe Renderer class, 270–272
determiningnecessityof, 254–255performingdecoding, 267performingencoding, 265–267registeringwitharenderkit, 317–319
customtags, 223,255–256
getRendererType method, 272
identifyingtherenderertype, 270specifying, 286–287taglibrarydescriptor, 261,286
customUIcomponents
creating, 251–294creatingcomponentclasses, 262–270customobjects, 277delegatingrendering, 270–272determiningnecessityof, 253–254handlingeventsemittedby, 275–276queueEvent method, 267
registering
SeeregisteringcustomUIcomponents
restoreState(FacesContext, Object)
method, 269–270
saveState(FacesContext) method, 269–270
savingstate, 269–270stepsforcreating, 261
customvalidators, 283–288
bindingtomanagedbeanproperties, 293–294customvalidatortags, 286–287f:validator tag, 283,286
implementingthe Validator interface, 284–286
registering, 312using, 287–288validate method, 202,284
Validator implementation, 200,284,286
Validator interface, 283
D
dataencryption, 764
dataintegrity, 696,793,794datasources, 806databases
SeealsotransactionsIndex
991
databases (Continued)
clients, 436connections, 465,801datarecovery, 793EIStier, 40message-drivenbeansand, 440multiple, 800,802
DataSource interface, 806
debugging,JavaEEapplications, 77–78declarativesecurity, 692,714,740
example, 750–754
decorators
CDI, 549–550example, 574–576
deliverymodes, 845
JMSDeliveryMode messageheaderfield, 840
DeliveryMode interface, 845
DependencyInjectionforJava(JSR330), 62,515deployerroles, 54deployment, 457–458deploymentdescriptors, 51,692,701
enterprisebean, 448,701,740,742JavaEE, 51runtime, 51,84security-role-mapping element, 709–710
security-role-ref element, 728–729
webapplication, 82,84,320,701
Destination interface, 834–835
destinations, 834–835
Seealsoqueues,temporarydestinations,topics
creating, 495,863–864injectingresources, 492,834JMSDestination messageheaderfield, 840
temporary, 846–847,904–905,918–919
destroymethod, 342
developmentroles, 52–55
applicationassemblers, 54applicationclientdevelopers, 54applicationcomponentproviders, 53–54applicationdeployersandadministrators, 54enterprisebeandevelopers, 53JavaEEproductproviders, 53toolproviders, 53webcomponentdevelopers, 53digestauthentication, 722
digitalsignatures, 760disposermethods,CDI, 543documentroots, 84doFilter method, 335,336,337
doGetmethod, 332
domains, 73doPostmethod, 332
downloading,GlassFishServer, 70DUPS_OK_ACKNOWLEDGE mode, 844
durablesubscriptions, 847–849
examples, 889–891,897–902
E
eagerattribute,managedbeans, 297
EARfiles, 51EIStier, 46
security, 780–783
EJBcontainer, 48
Seealsoembeddedenterprisebeancontainer
container-managedtransactions, 794message-drivenbeans, 853–855onMessage method,invoking, 494–495
services, 435,436,739–749
EJBJARfiles, 447ejb-jar.xml file, 448,701,742
EJBContext interface, 799,801
EL, 107,125–137
CDImanagedbeans, 522–523compositeexpressions, 131deferredevaluationexpressions, 126expressionexamples, 137immediateevaluationexpressions, 126literalexpressions, 131,135literals, 130lvalueexpressions, 126,128managedbeans, 191–192method-bindingexpressions, 224methodexpressions, 126,132operators, 136overview, 125–126parameterizedmethodcalls, 133reservedwords, 136Index
TheJavaEE6Tutorial • January2013 992
EL(Continued)
rvalueexpressions, 126,128tagattributetype, 134typeconversionduringexpressionevaluation, 131valueexpressions, 126,128
embeddableclasses, Seepersistence:embeddableclasses
embeddedenterprisebeancontainer
SeealsoEJBcontainer,enterprisebeans
creating, 500–501developingapplications, 499examples, 502–504initializingenterprisebeanmodules, 501overview, 499runningapplications, 500sessionbeanreferences, 502
shuttingdown, 502
end-to-endsecurity, 699–700enterpriseapplications, 37
securing, 739–757
enterprisebeans, 45,58–59
Seealsobusinessmethods
Seealsoembeddedenterprisebeancontainer
SeealsoJavaEEcomponents
Seealsomessage-drivenbeans
Seealsosessionbeans
accessing, 441classes, 447compiling, 457–458contents, 447–449convertingtoJAX-RSrootresource
classes, 408–409
defined, 435dependencyinjection, 441deployment, 447distribution, 443exceptions, 489finding, 502getCallerPrincipal method, 746–747
implementorofbusinesslogic, 45integratingwithJAX-RS, 408–409interceptors, 933–941interfaces, 441–447,447isCallerInRole method, 746–747
JAX-RSresources, 398–400enterprisebeans (Continued)
JNDIlookup, 441lifecycles, 450–453localaccess, 443–445localinterfaces, 444packaging, 447–448,457–458performance, 443programmaticsecurity, 746–747remoteaccess, 445–446remoteinterfaces, 445securing, 739–749singletons, 398–399testing, 502–504timerservice, 479–489types, 436
webservices, 437,446,476–479
EnterpriseInformationSystems, SeeEIStier
entities
abstract, 591abstractschemanames, 632application-managedentitymanagers, 596–597cascadingoperations, 588–589,589collections, 644–645container-managedentitymanagers, 595controllingcaching, 684–685creating, 612discriminatorcolumns, 593entitymanager, 595–599finding, 597,613inheritance, 591–595,617–618inheritancemapping, 592–595lifecycle, 597managing, 595–600,612–614mappingtomultipletables, 610non-entitysuperclasses, 592overview, 579–590persistentfields, 580–585persistentproperties, 580–585persisting, 597–598primarykeys, 585–587querying, 600–601relationships, 613removing, 598,614requirements, 580
Index
993
entities(Continued)
superclasses, 591–592synchronizing, 598–599validating, 583–585
entitydata
lockmodes, 679–681optimisticlocking, 677,678–679pessimisticlocking, 677,680–681
entityproviders,JAX-RS, 389–390entityrelationships
bidirectional, 587–588many-to-many, 587,617many-to-one, 587multiplicity, 587one-to-many, 587
one-to-one, 587querylanguage, 588unidirectional, 588
equalsmethod, 586
eventandlistenermodel, 217,221–222
Seealsoactionevents
Seealsovalue-changeevents
bindinglistenerstomanagedbean
properties, 293–294
Eventclass, 221
eventhandlers, 213,261eventlisteners, 213,214handlingeventsofcustomUI
components, 275–276
implementingeventlisteners, 273–274Listener class, 221
listenerclass, 200queueEvent method, 267
ValueChangeEvent class, 188
events
CDI, 545–547example, 568–574
examples, 69–78
Ajax, 238–242asynchronousmethodinvocation,session
beans, 508–511
basicauthentication, 730–733BeanValidation, 623–627bookmarkableURLs, 167–168examples (Continued)
building, 75CDI, 527–538,553–576classpath, 458compositecomponents, 245–249connectors, 819–823CriteriaAPI, 619–620directorystructure, 76Duke’sBookstorecasestudy, 945–952Duke’sForestcasestudy, 965–984Duke’sTutoringcasestudy, 953–963embeddedenterprisebeancontainer, 502–504fileuploadusingservlets, 349–353interceptors, 939–941JavaEEConnectorarchitecture, 819–823
JAX-RS, 396–401,418–432JAX-WS, 368–376JMSasynchronousmessageconsumption, 870–875JMSdurablesubscriptions, 889–891JMSlocaltransactions, 891–897JMSmessageacknowledgment, 887–889JMSmessage-drivenbeans, 491–497JMSonmultiplesystems, 880–886,910–916,
916–927
JMSqueuebrowsing, 875–880JMSsynchronousmessageconsumption, 860–870JMSwithentities, 902–910JMSwithsessionbeans, 897–902message-drivenbeans, 491–497persistence, 603–627primarykeys, 586querylanguage, 613–614,633–637requiredsoftware, 69–73resourceadapters, 819–823security, 734–738,750–754,754–757servlet, 344–345servlets, 93–101,456sessionbeans, 456,461–468singletonsessionbeans, 468–476timerservice, 485–488webclients, 456webservices, 476–479
exceptions
businessmethods, 465
Index
TheJavaEE6Tutorial • January2013 994
exceptions (Continued)
enterprisebeans, 489JMS, 842mappingtoerrorscreens, 98–99rollingbacktransactions, 489,799transactions, 796,797
expirationofJMSmessages, 846
JMSExpiration messageheaderfield, 840
ExpressionLanguage
SeeEL
expressions
lvalueexpressions, 191tagattributetype, 134
F
Facelets, 111–124
SeealsoEL
compositecomponents, 121–123configuringapplications, 116–117f:ajaxtag, 229–231
features, 111–113resources, 123–124templating, 119–121usingAjaxwith, 229–231XHTMLpages, 114–116
Faceletsapplications
developing, 113–119lifecycle, 216usingJavaScriptin, 237–238
faces-config.xml file, 297–300
FacesContext class, 212,278
ApplyRequestValuesphase, 213customconverters, 280performingencoding, 266ProcessValidationsphase, 214UpdateModelValuesphase, 214validationmethods, 202Validator interface, 285
FacesServlet ,mapping, 108
filterchains, 335,337Filterinterface, 335
filters, 334
defining, 335filters(Continued)
mappingtowebcomponents, 336mappingtowebresources, 336overridingrequestmethods, 336overridingresponsemethods, 336responsewrappers, 336
foreignkeys, 606form-basedauthentication, 721–722formparameters, 395
JAX-RS, 405–406
forwardmethod, 339
G
garbagecollection, 453
GenericServlet interface, 328
getCallerPrincipal method, 746–747,754–757
getConnection method, 806
getPartmethod, 348
getParts method, 348
getRemoteUser method, 726
getRequestDispatcher method, 338
getRollbackOnly method, 801,857
getServletContext method, 339
getSession method, 340
getStatus method, 801
getUserPrincipal method, 726
GlassFishServer
addingusersto, 706–707downloading, 70enablingdebugging, 78installationtips, 70securing, 702serverlog, 77–78SSLconnectors, 711starting, 73–74stopping, 73tools, 67–68
groups, 705
managing, 706–707Index
995
H
handlingevents, Seeeventandlistenermodel
hashCode method, 586
headerparameters,JAX-RS, 395helperclasses, 447
sessionbeanexample, 466
HTTP, 367
basicauthentication, 720overSSL, 764
HTTPmethods, 387–390HTTPrequestandresponseentitybodies, 389–390
supportedtypes, 389
HTTPrequestURLs, 333
querystrings, 333requestpaths, 333
HTTPrequests, 333,387–390
Seealsorequests
HTTPresponses, 334
Seealsoresponses
statuscodes, 98–99
HTTPS, 699,711,717–718,760HttpServlet interface, 328
HttpServletRequest interface, 333,726
HttpServletResponse interface, 334
HttpSession interface, 340
I
identification, 696–697
implicitnavigation, 106implicitobjects, 291–292
bindingcomponentvaluesto, 291–292
includemethod, 339
initmethod, 332
InitialContext interface, 65
initializationparameters, 332initializingpropertieswiththe managed-property
elementinitializing ArrayandListproperties, 306
initializingmanaged-beanproperties, 307–308initializing Mapproperties, 305–306
initializingmapsandlists, 308referencingacontextinitialization
parameter, 304–305initParams attribute, 332
injectableobjects,CDI, 518integrity, 710
ofdata, 696
interceptors, 933–941
CDI, 547–549
classes, 934example, 939–941example(CDI), 568–574lifecycle, 934using, 935–939
internationalization, 355–360internationalizingJavaServerFacesapplications
f:loadBundle tag, 359
FacesContext.getLocale method, 178
usingthe FacesMessage classtocreatea
message, 310
invalidate method, 341
isCallerInRole method, 746–747,754–757
ISO8859characterencoding, 360isUserInRole method, 726
J
JAAS, 67,697,779
loginmodules, 779
JACC, 63–64,702JAF, 65JARfiles, 51
querylanguage, 643
JARsignatures, 698JASPIC, 64JavaAPIforJavaBeansValidation, SeeBeanValidation
JavaAPIforRESTfulWebServices, SeeJAX-RS
JavaAPIforXMLBinding(JAXB), 66
usingwithJAX-RS, 412–418
JavaAPIforXMLProcessing(JAXP), 65–66JavaAPIforXMLWebServices, SeeJAX-WS
JavaAuthenticationandAuthorizationService, See
JAAS
JavaAuthenticationServiceProviderInterfacefor
Containers(JASPIC), 64
JavaAuthorizationContractforContainers, SeeJACC
JavaBluePrints, 76Index
TheJavaEE6Tutorial • January2013 996
JavaCryptographyExtension(JCE), 697
JavaDatabaseConnectivityAPI, SeeJDBCAPI
JavaDB, 67
starting, 75stopping, 75
JavaEEapplications, 39–46
debugging, 77–78deploying, 457–458iterativedevelopment, 458runningonmorethanonesystem, 910–916,
916–927
tiers, 39–46
JavaEEclients, 42–43
Seealsoapplicationclients,webclients
JavaEEcomponents, 42
JavaEEConnectorarchitecture, 63,790,810–813
example, 819–823
JavaEEmodules, 51,52
Seealsowebmodules
applicationclientmodules, 52EJBmodules, 52,447resourceadaptermodules, 52
JavaEEplatform
APIs, 55–64JMSand, 827–828overview, 38–39
JavaEEsecuritymodel, 47JavaEEservers, 48JavaEEtransactionmodel, 47JavaGenericSecurityServices, 697JavaGSS-API, 697JavaMessageService(JMS)API, SeeJMS
JavaNamingandDirectoryInterfaceAPI, 65
SeealsoJNDI
JavaPersistenceAPI, 61,579–601
Seealsopersistence
JavaPersistenceAPIquerylanguage, Seequerylanguage
JavaPersistenceCriteriaAPI, SeeCriteriaAPI
JavaSecureSocketsExtension(JSSE), 697JavaServlettechnology, 59,327–346
Seealsoservlets
JavaTransactionAPI, 61,800JavaBeansActivationFramework(JAF), 65JavaBeanscomponents, 43JavaMailAPI, 63
example, 819–823
JavaServerFacesapplicationdevelopment, 106–110
beanproperty, 194BeanValidation, 204–208managedbeans, 189–192webpages, 139–173
JavaServerFacesapplications
configuring
SeeconfiguringJavaServerFacesapplications
HTMLtags, 140–170queueingmessages, 203
JavaServerFacescoretaglibrary, 139,171
actionListener tag, 171,182–183
attribute tag, 172
convertDateTime tag, 171,177
convertDateTime tagattributes, 178–179
converter tag, 171,177
converterId attribute, 176
convertNumber tag, 171,177,179–180
convertNumber tagattributes, 179–180
f:actionListener tag, 254
f:ajaxtag, 229–231
f:converter tag, 282
f:validator tag, 223,283
customvalidatortags, 286
facettag, 162,171
loadBundle tag, 172
metadata tag, 166–167,171
paramtag, 151,172
selectItem tag, 158,159,160,172
selectItems tag, 158,159,160,172
typeattribute, 181
validateDoubleRange tag, 172,184
validateLength tag, 172,184
validateLongRange tag, 172,184,185–186
validator tag, 172
valueChangeListener tag, 171,181–182
viewparam
tag, 166–167
JavaServerFacesstandardHTMLrenderkit
library, 220,317html_basic TLD, 276
JavaServerFacesstandardHTMLtaglibrary
SeealsocomponenttagsIndex
997
JavaServerFacesstandardUIcomponents, 217,251
UIComponent component, 281
JavaServerFacestaglibraries, 112
JavaServerFacescoretaglibrary, 139,171JavaServerFacesHTMLrenderkittaglibrary, 139namespacedirectives, 140
JavaServerFacestechnology, 44,59–60,103–110
Seealsocomponentrenderingmodel,component
tags,conversionmodel,eventandlistenermodel,FacesContext class,JavaServerFacesstandardUI
components,lifecycleofaJavaServerFacesapplication,UIcomponentbehavioralinterfaces,UIcomponentclasses,validationmodel
Seealsocomponenttags
SeealsoFacelets
advantages, 105–106bookmarkableURLs, 165–166,166–167compositecomponents, 243–249FacesServlet class, 321
features, 104–105partialprocessing, 216partialrendering, 216partialstatesaving, 263,269–270usingAjaxwith, 227–242Validator interface, 202
JavaServerPagesStandardTagLibrary, SeeJSTL
javax.servlet.http package, 328
javax.servlet package, 328
JAX-RS, 61,381–401
accessingXMLdocuments, 412–418advancedfeatures, 403–432annotations, 403–406applicationoverview, 384–385conditionalHTTPrequests, 409–410convertingCDImanagedbeanstorootresource
classes, 409
convertingenterprisebeanstorootresource
classes, 408–409
entityproviders, 389–390examples, 396–401,418–432extractingJavatypeofrequestorresponse, 406formparameters, 405–406integratingwithCDI, 408–409integratingwithEJBtechnology, 408–409JAX-RS(Continued)
introduction, 364–365pathparameters, 404–405pathtemplates, 385–387queryparameters, 405referenceimplementation, 381requestheaders, 403–406requestmethoddesignators, 382–395resourceclassmethods, 407–408resourceclasses, 382–395resourcemethods, 382–395runtimecontentnegotiation, 410–412runtimeresourceresolution, 407–408staticcontentnegotiation, 410–412subresourcelocators, 407
subresourcemethods, 407subresources, 407–408URI, 403–406usingJSONrepresentations, 417–418usingwithJAXB, 412–418
JAX-WS, 66–67
defined, 367examples, 368–376introduction, 364serviceendpointinterfaces, 368specification, 379
JAXB, 66
examples, 418–432generatingJavaentityclassesfromXML
schema, 415–417
generatingXMLschemafromJavaclasses, 414–415Javaentityclasses, 414–415returningJavaentityclassesinJAX-RS
resources, 414–415
schemagenerator, 414–415usingwithJAX-RS, 412–418withJSON, 417–418xjcschemacompilertool, 415–417
JAXBElement ,inJAX-RSresourcemethods, 415–417
JAXP, 65–66JCE, 697JDBCAPI, 64,790–791,806JMS, 63
achievingreliabilityandperformance, 842–851
Index
TheJavaEE6Tutorial • January2013 998
JMS(Continued)
administeredobjects, 833–835applicationclientexamples, 860–886architecture, 829basicconcepts, 828–832definition, 826examples, 491–497,859–927introduction, 825–828JavaEEplatform, 827–828,851–858messagingdomains, 829–831programmingmodel, 832–842
JMSCorrelationID messageheaderfield, 840
JMSDeliveryMode messageheaderfield, 840
JMSDestination messageheaderfield, 840
JMSException class, 842
JMSExpiration messageheaderfield, 840
JMSMessageID messageheaderfield, 840
JMSPriority messageheaderfield, 840
JMSRedelivered messageheaderfield, 840
JMSReplyTo messageheaderfield, 840
JMSTimestamp messageheaderfield, 840
JMSTypemessageheaderfield, 840
JNDI, 65,805
datasourcenamingsubcontexts, 65enterprisebeanlookup, 441enterprisebeannamingsubcontexts, 65environmentnamingcontexts, 65jmsnamingsubcontext, 834
namespaceforJMSadministeredobjects, 833–835namingcontexts, 65namingenvironments, 65namingsubcontexts, 65
jsf.jsfile, 236–238
JSON,withJAXBandJAX-RS, 417–418JSR299,SeeContextsandDependencyInjection(CDI)
fortheJavaEEplatform
JSR311,SeeJAX-RS
JSSE, 697JSTL, 60–61JTA, 61,800JTSAPI, 800JUnit, 502–504K
Kerberos, 697,698
keypairs, 760keystores, 698,759–764
managing, 760
keytoolutility, 760
L
lifecyclecallbackevents,intercepting, 937–938
lifecycleofaJavaServerFacesapplication, 108–109,
210–215actionandvalue-changeeventprocessing, 221ApplyRequestValuesphase, 213,267customconverters, 280,281getRendererType method(RenderResponse
phase), 272
immediate attribute, 258
InvokeApplicationphase, 215performingencoding(RenderResponsephase), 265ProcessValidationsphase, 214RenderResponsephase, 215renderResponse method, 212,213,214
responseComplete method, 212,214,215
RestoreViewphase, 213savingstate, 269UpdateModelValuesphase, 214–215
updateModels method, 214
Validator interface, 285
views, 213
listenerclasses, 328
defining, 328
listenerinterfaces, 328listeners
HTTP, 702IIOP, 702
localinterfaces, 444localtransactions, 849–851localization, 355–360
BeanValidation, 930
log,server, 77–78loginconfiguration, 719–722,722–723loginmethod, 724–726
loginmodules, 779Index
999
logoutmethod, 724–726
M
managedbeancreationfacility, 300–308
managedbeandeclarations, 259
key-class element, 305
list-entries element, 303
managed-bean element, 300–303,307
managed-bean-name element, 302
managed-property element, 303–308
map-entries element, 303,305
map-entry element, 305
null-value elements, 303
valueelement, 303
managedbeanmethods
attributes
Seeattributesreferencingmanagedbeanmethods
referencing
Seereferencingmanagedbeanmethods
writing
Seewritingmanagedbeanmethods
managedbeanproperties, 176,190,191,288
boundtocomponentinstances, 198–199UIDataproperties, 194–195
UIInputandUIOutput properties, 193
UISelectBoolean properties, 195–196
UISelectItem properties, 197
UISelectItems properties, 198
UISelectMany properties, 196
UISelectOne properties, 196–197
writing, 192–200
managedbeans, 104
Seealsovaluebinding
compositecomponents, 244configuringinJavaServerFaces
technology, 296–297
conversionmodel, 220customcomponentalternative, 254definedforCDI, 517–518developing, 106–107,113–114eventandlistenermodel, 222JavaServerFacestechnology, 189–192loadingJavaScript, 238managedbeans (Continued)
methodbinding, 149properties
Seemanagedbeanproperties
ManagedBeansspecification, 61–62,515MapMessage interface, 841
matrixparameters,JAX-RS, 395messageacknowledgment, 843–844
bean-managedtransactions, 857message-drivenbeans, 854
messagebodies, 840–841messageconsumers, 837–839messageconsumption, 832
asynchronous, 832,870–875synchronous, 832,860–870
message-drivenbeans, 58,439–441
accessing, 439coding, 493–495,899–900,905,919examples, 491–497,897–902,902–910,910–916,
916–927
garbagecollection, 453introduction, 853–855onMessage method, 440,494–495
requirements, 493–495transactions, 440,794,800
messageheaders, 839–840messageIDs, JMSMessageID messageheaderfield, 840
Messageinterface, 841
messagelisteners, 439,838–839
examples, 871,904–905,918–919
messageproducers, 836–837messageproperties, 840messagesecurity, 715messageselectors, 839MessageBodyReader interface, 389–390
MessageBodyWriter interface, 389–390
MessageConsumer interface, 837–839
MessageListener interface, 838–839
MessageProducer interface, 836–837
messages
integrity, 764MessageFormat pattern, 151,172
outputFormat tag, 151
paramtag, 151,172Index
TheJavaEE6Tutorial • January2013 1000
messages (Continued)
parametersubstitutiontags, 172queueingmessages, 203,308securing, 699–700usingthe FacesMessage classtocreatea
message, 310
messages,JMS
bodyformats, 840–841browsing, 841–842definition, 829deliverymodes, 845expiration, 846headers, 839–840introduction, 839–841persistence, 845prioritylevels, 845properties, 840
messaging,definition, 825–826messagingdomains, 829–831
commoninterfaces, 831point-to-point, 830publish/subscribe, 830–831
metadataannotations
resourceadapters, 814–815security, 700
MetamodelAPI, 661–663
using, 619,663–664
methodbinding
method-bindingexpressions, 224,315methodexpressions, 268
methodexpressions, 186,222methodinvocations,intercepting, 936–937methodpermissions, 742
annotations, 743–745
mutualauthentication, 764–768
N
namingcontexts, 65namingenvironments, 65navigationmodel, 223–226
actionattribute, 152,186,187,258
actionmethods, 201,314ActionEvent class, 187navigationmodel (Continued)
configuringnavigationrules, 313–317logicaloutcome, 201,314NavigationHandler class, 225
referencingmethodsthatperformnavigation, 187,
201
writingamanagedbeanmethodtoperform
navigationprocessing, 201–202
NetBeansIDE, 71–72NON_PERSISTENT deliverymode, 845
non-repudiation, 696
O
ObjectMessage interface, 841
objects,administered, 833–835
creatingandremoving, 863–864
observermethods,CDI, 545–546onMessage method
introduction, 838–839message-drivenbeans, 440,494–495,854
P
package-appclient tool, 67
parameters,extracting, 392–395Partinterface(Servlet), 348
pathparameters
JAX-RS, 394,404–405
pathtemplates,JAX-RS, 385–387permissions,securitypolicy, 702persistence
BLOBs, 611cascadeoperations, 610–611CLOBs, 611collections, 581–583concurrentaccesstoentitydata, 677–681configuration, 599context, 595–600embeddableclasses, 590entities, 579–590examples, 603–627JMSexample, 902–910Index
1001
persistence (Continued)
JMSmessages, 845lockingstrategies, 677–681many-to-many, 617maps, 582one-to-many, 606one-to-one, 605–606overview, 579–601persistenceunits, 599–600persistentfields, 581primarykeys, 585–587,607properties, 581queries, 579–601,613–614,630–631
Seealsoquerylanguage
creating, 665
Criteria, 661–671dynamic, 630executing, 671expressions, 667–668,668–669joins, 666parameters, 631pathnavigation, 667results, 667–669,669–671static, 630typesafe, 661–671
querylanguage, 588relationships, 604–606scope, 599–600second-levelcache, 683–688self-referentialrelationships, 605string-basedcriteriaqueries, 673–675temporaltypes, 612
persistenceunits
querylanguage, 629,643
PERSISTENT deliverymode, 845
pluggableauditmodules, 702pluggableauthorizationproviders, 702point-to-pointmessagingdomain, 830
Seealsoqueues
POJOs, 38policyfiles, 698primarykeys, 606
compound, 607–610defined, 585–587primarykeys (Continued)
examples, 586generated, 607
principal, 706PrintWriter class, 333
prioritylevels,formessages, 845
JMSPriority messageheaderfield, 840
producerfields
CDI, 541–543,543example, 561–567
producermethods
CDI, 524–525,541–543example, 558–561
programmaticsecurity, 692,701,714,740
example, 754–757
programmingmodel,JMS, 832–842providers,JMS, 829proxies, 367publickeycertificates, 764public-keycryptography, 760publish/subscribemessagingdomain
Seealsotopics
durablesubscriptions, 847–849introduction, 830–831
Q
qualifiers,usinginCDI, 519QualityofService, 697querylanguage
ABSfunction, 654
abstractschemas, 630,632,644ALLexpression, 652
ANYexpression, 652
arithmeticfunctions, 652–654ASCkeyword, 659
AVGfunction, 657
BETWEENexpression, 636,649
Booleanliterals, 647Booleanlogic, 655caseexpressions, 654–655collectionmemberexpressions, 644,651collections, 644–645,651comparedtoSQL, 634,643,646Index
TheJavaEE6Tutorial • January2013 1002
querylanguage (Continued)
comparisonoperators, 637,649CONCATfunction, 653
conditionalexpressions, 635,647,648,656constructors, 658COUNTfunction, 657
DELETEexpression, 637
DELETEstatement, 632
DESCkeyword, 659
DISTINCT keyword, 633
domainofquery, 629,642,643duplicatevalues, 633enumliterals, 648equality, 656–657ESCAPEclause, 650
examples, 613–614,633–637EXISTSexpression, 652
FETCH JOIN operator, 645
FROMclause, 632,642–645
grammar, 637–659GROUP BY clause, 632,659
HAVINGclause, 632,659
identificationvariables, 632,642,643–644identifiers, 642–643INoperator, 645,649–650
INNER JOIN operator, 645
inputparameters, 635,648IS EMPTY expression, 636
IS FALSE operator, 656
IS NULLexpression, 636
IS TRUEoperator, 656
JOINstatement, 634,645
LEFT JOIN operator, 645
LEFT OUTER JOIN operator, 645
LENGTHfunction, 653
LIKEexpression, 636,650
literals, 647–648LOCATEfunction, 653
LOWERfunction, 653
MAXfunction, 657
MEMBERexpression, 651
MINfunction, 657
MODfunction, 654
multipledeclarations, 643querylanguage (Continued)
multiplerelationships, 635namedparameters, 634,648navigation, 634–635,635,644,647negation, 656NOToperator, 656
nullvalues, 650–651,655–656numericcomparisons, 656numericliterals, 647operatorprecedence, 648–649operators, 648–649ORDER BY clause, 632,659
parameters, 633parentheses, 648pathexpressions, 630,646–647
positionalparameters, 648rangevariables, 644relationshipfields, 630relationships, 630,634,635returntypes, 657root, 644scope, 629SELECTclause, 632,657–658
setNamedParameter method, 634
SIZEfunction, 654
SQRTfunction, 654
statefields, 630stringcomparison, 656stringfunctions, 652–654stringliterals, 647subqueries, 651–652SUBSTRING function, 653
SUMfunction, 657
syntax, 632,637–659TRIMfunction, 653
types, 646,656UPDATEexpression, 632,637
UPPERfunction, 653
WHEREclause, 632,647–657
wildcards, 650
queryparameters
JAX-RS, 393,405
queryroots, 665–666Queueinterface, 834–835Index
1003
QueueBrowser interface, 841–842
JMSclientexample, 875–880
queues, 834–835
browsing, 841–842,875–880creating, 834–835,863–864injectingresources, 492
temporary, 846–847,904–905
R
realms, 703,704–705
admin-realm , 705
certificate , 704,762
configuring, 702file, 704
recovermethod, 844
redeliveryofmessages, 843,844
JMSRedelivered messageheaderfield, 840
referencingmanagedbeanmethods, 186–188
forhandlingactionevents, 187,202forhandlingvalue-changeevents, 188forperformingnavigation, 187,201forperformingvalidation, 187–188,202
registeringcustomconverters, 313
converter element, 313
registeringcustomrenderers, 317–319
render-kit element, 317
renderer element, 317
registeringcustomUIcomponents, 261,319–320
component element, 319
registeringcustomvalidators, 312
validator element, 312
registeringmessages, 308–311
resource-bundle element, 309
relationshipfields,querylanguage, 630relationships
direction, 587–589unidirectional, 606
reliability,JMS
advancedmechanisms, 847–851basicmechanisms, 843–847durablesubscriptions, 847–849localtransactions, 849–851messageacknowledgment, 843–844reliability,JMS (Continued)
messageexpiration, 846messagepersistence, 845messageprioritylevels, 845temporarydestinations, 846–847
remoteinterfaces, 445RemoteMethodInvocation(RMI),and
messaging, 825–826
requestheaders,JAX-RS, 403–406requestmethoddesignators
JAX-RS, 382–395
Requestobjects,JAX-RS, 411
requestparameters,extracting, 392–395request/replymechanism
JMSCorrelationID messageheaderfield, 840
JMSReplyTo messageheaderfield, 840
temporarydestinationsand, 846
RequestDispatcher interface, 338
requests, 332
SeealsoHTTPrequests
customizing, 336gettinginformationfrom, 332retrievingalocale, 356
Required transactionattribute, 857
resourceadapters, 63,790,810–813
example, 819–823metadataannotations, 814–815security, 781–782
resourcebundles, 355
BeanValidation, 930
resourceclasses,JAX-RS, 382–395resourceinjection, 807–810resourcemethods,JAX-RS, 382–395resources, 790–791,805–817
Seealsodatasources
JMS, 853
ResponseBuilder class, 389–390
responses, 333
SeealsoHTTPresponses
bufferingoutput, 334customizing, 336settingheaders, 332
RESTfulwebservices, 61,381–401
defined, 381–382Index
TheJavaEE6Tutorial • January2013 1004
roles, 705
application, 709–710declaring, 723–724mappingtogroups, 709–710mappingtousers, 709–710referencing, 743–745
security, 707–709,723–724,742,743–745
rollback method, 799,800,801
rollback method(JMS), 849–851
rollbacks, Seetransactions,rollbacks
rootresourceclasses, 382run-asidentity, 747–749
S
SAAJ, 66SASL, 697schema,deploymentdescriptors, 701schemagen,JAXB, 414–415schemagen tool, 68
scopes
servlets, 330–331usinginCDI, 520–522usinginJavaServerFacestechnology, 296–297
secureconnections, 710–711SecureSocketsLayer(SSL), 710–711security
annotations, 700,731–732,740application, 696–697,698applicationclients, 778–779callbackhandlers, 778,779component-managedsign-on, 780–781constraints, 715–719container-managedsign-on, 780containertrust, 749containers, 692–697,700–701contextforenterprisebeans, 746–747declarative, 692,701,714,740deployingenterprisebeans, 749EISapplications, 780–783end-to-end, 699–700enterpriseapplications, 739–757enterprisebeans, 739–749examples, 734–738,750–754,754–757security(Continued)
groups, 705introduction, 691–712JAASloginmodules, 779JavaSE, 697–698loginforms, 778loginmodules, 779mechanismfeatures, 695mechanisms, 697–700message, 715message-layer, 699–700methodpermissions, 742,743–745overview, 692–697policydomain, 706programmatic, 692,701,714,724–729,740
programmaticlogin, 779propagatingidentity, 747–749realms, 704–705resourceadapters, 781–782rolenames, 723–724,743–745roles, 705,707–709,723–724,742run-asidentity, 747–749simplewalkthrough, 692–695transport-layer, 699,710–711users, 705webapplications, 713–738webcomponents, 713–738
securityconstraints, 715–719
multiple, 718–719
securitydomain, 706securityidentity
propagating, 747–749specificidentity, 748
security-role-mapping element, 709–710
security-role-ref element, 728–729
securityrolereferences, 728–729securityroles, 707–709,742sendmethod, 836–837
serverauthentication, 764servercertificates, 759–764serverlog, 77–78servers,JavaEE
deployingonmorethanone, 910–916,916–927runningJMSclientsonmorethanone, 880–886
Index
1005
servicemethods,servlets, 332
Servletinterface, 328
ServletContext interface, 339
ServletInputStream class, 333
ServletOutputStream class, 333
ServletRequest interface, 332
ServletResponse interface, 333
servlets, 44,328
binarydata, 333characterdata, 333compiling, 457–458creating, 331–332examples, 93–101,344–345,456finalizing, 342initializing, 332
lifecycle, 328–330lifecycleevents, 328packaging, 457–458scopeobjects, 330–331servicemethods, 332,343specifyinginitializationparameters, 332trackingservicerequests, 342uploadingfileswith, 347–353
sessionbeans, 58,437–439
Seealsoasynchronousmethodinvocation
activation, 450bean-managedconcurrency, 469,472businessinterfaces, 441clients, 437concurrentaccess, 469–472container-managedconcurrency, 469,470–472databases, 799eagerinitialization, 468examples, 456,461–468,468–476,476–479,
897–902
handlingerrors, 472no-interfaceviews, 441passivation, 450requirements, 463singleton, 438,468–476stateful, 437,438stateless, 437–438,439transactions, 794,799,800webservices, 446,477Sessioninterface, 835–836
sessions, 340–341
associatingattributes, 340associatingwithuser, 341invalidating, 341notifyingobjectsassociatedwith, 340
sessions,JMS, 835–836
managinginenterprisebeanapplications, 853
SessionSynchronization interface, 799
setRollbackOnly method, 799,801,857
sign-on
component-managed, 780container-managed, 780
SimpleAuthenticationandSecurityLayer(SASL), 697SingleThreadModel interface, 331
SOAP, 363–365,367,379SOAPmessages, 50,66
securing, 699–700
SOAPwithAttachmentsAPIforJava(SAAJ), 66specialization,CDI, 540–541SQL, 64,634,643,646SQL92, 655SSL, 699,710–711,717–718,764
connectors,GlassFishServer, 711handshake, 710verifyingsupport, 711
standardconverters, 221
convertertags, 177NumberConverter class, 176
using, 175–180
standardvalidators, 222
using, 183–186
statefields,querylanguage, 630stereotypes,CDI, 550–551StreamMessage interface, 841
string-basedcriteriaqueries, 673–675subresources,JAX-RS, 407–408subscriptionnames,fordurablesubscribers, 847substitutionparameters,defining, Seemessages, param
tag
synchronousmessageconsumption, 832
JMSclientexample, 860–870Index
TheJavaEE6Tutorial • January2013 1006
T
templating,Facelets, 119–121
temporaryJMSdestinations, 846–847
examples, 904–905,918–919
testing
enterprisebeans, 502–504unit, 502–504
TextMessage interface, 840
timeoutevents,intercepting, 938–939timerservice, 479–489
automatictimers, 479,483–484calendar-basedtimerexpressions, 479–481cancellingtimers, 484creatingtimers, 482–483examples, 485–488exceptions, 484getInfomethod, 485
getNextTimeout method, 485
getTimeRemaining method, 485
gettinginformation, 485programmatictimers, 479,482–483savingtimers, 484transactions, 485
timestamps,formessages, JMSTimestamp message
headerfield, 840
Topicinterface, 834–835
topics, 834–835
creating, 834–835,863–864durablesubscriptions, 847–849temporary, 846–847,918–919
transactions, 789–790,793–803
application-managed, 596–597attributes, 795–798
bean-managed, 800–801,801,856boundaries, 794,799,800businessmethods
Seebusinessmethods,transactions
commits, 794,799container-managed, 794–799,856container-managedtransactiondemarcation, 794defined, 794distributed, 856–857examples, 891–897transactions (Continued)
exceptions
Seeexceptions,transactions
JDBC, 802JMSandenterprisebeanapplications, 853JTA, 800
local, 849–851managers, 797,800,802message-drivenbeans
Seemessage-drivenbeans,transactions
nested, 794,800Required attribute, 857
rollbacks, 794,799,800scope, 795sessionbeans
Seesessionbeans,transactions
timeouts, 801–802timerservice, 485webcomponents, 803
transport-guarantee element, 717–718
transportguarantees, 717–718transport-layersecurity, 699,710–711truststores, 759–764
managing, 760
U
UIcomponentbehavioralinterfaces, 218
ActionSource interface, 218,221,262,273
ActionSource2 interface, 218,262
ClientBehaviorHolder interface, 219
ConvertibleValueHolder interface, 218
EditableValueHolder interface, 218,262
NamingContainer interface, 218,262
StateHelper interface, 263,268,269–270
StateHolder interface, 219,262,269–270
SystemEventListenerHolder interface, 219
ValueHolder interface, 219,262
UIcomponentclasses, 217,219,253
SeealsocustomUIcomponents
javax.faces.component package, 262
UIColumn class, 217
UICommand class, 217,220
UIComponent class, 217,220Index
1007
UIcomponentclasses (Continued)
UIComponentBase class, 217,262,265
UIDataclass, 194–195,217
UIFormclass, 218
UIGraphic class, 218
UIInputandUIOutput classes, 193
UIInputclass, 218,221
UIMessage class, 218
UIMessages class, 218
UIOutput class, 218,220
UIPanelclass, 218
UIParameter class, 218
UISelectBoolean class, 195–196,218
UISelectItem class, 197,218
UISelectItems class, 198,218
UISelectMany class, 196,218
UISelectOne class, 196–197,218,219
UIViewRoot class, 218
UnavailableException class, 332
undeployingmodulesandapplications, 92–93Unicodecharacterset, 360unifiedexpressionlanguage, SeeEL
UniformResourceIdentifiers(URIs), 381URIpathparameters,JAX-RS, 394URIpathtemplates
JAX-RS, 385
URLpaths, 93US-ASCIIcharacterset, 359user-data-constraint element, 717–718
userdataconstraints, 716,717–718users, 705
addingtoGlassFishServer, 706–707managing, 706–707
UserTransaction interface, 799,800,801,803
message-drivenbeans, 856
usingpages, 123UTF-8characterencoding, 360utilityclasses, 447
V
validatinginput
SeeBeanValidation
Seevalidationmodelvalidation
customizing, 929–930entities, 583–585groups, 931–932localization, 930messages, 930ordering, 931–932
validationmodel, 217,222–223
Seealsovalidators
referencingamethodthatperforms
validation, 187–188
validator attribute, 148,186,187,202
Validator implementation, 222,287
Validator interface, 200,202–203,223
customvalidatortags, 286
implementing, 284
writingamanagedbeanmethodtoperform
validation, 202–203
Validator implementationclasses, 184,222
DoubleRangeValidator class, 172,184
LengthValidator class, 172,184
LongRangeValidator class, 172,184,185–186
validatortags
compositecomponents, 245f:validator tag, 223,286
validateDoubleRange tag, 184
validateLength tag, 184
validateLongRange tag, 184,185–186
validators, 213,217
customvalidators, 172,287–288default, 311–312registering, 185
valuebinding
acceptabletypesofcomponentvalues, 193componentinstancestobeanproperties
Seecomponentbinding
componentvaluesandinstancestomanagedbean
properties, 288–293
componentvaluestoimplicitobjects, 291–292componentvaluestomanagedbean
properties, 289–291
properties, 193–198valueattribute, 192,259,288,289–291
value-bindingexpressions, 289Index
TheJavaEE6Tutorial • January2013 1008
valuebinding (Continued)
valueexpressions, 194,268,292
value-changeevents, 221,273
f:valueChangeListener tag, 254
processValueChange(ValueChangeEvent)
method, 273
processValueChangeEvent method, 203
referencingmethodsthathandlevalue-change
events, 188
typeattribute, 181
ValueChangeEvent class, 181,273
valueChangeListener attribute, 149,186,203
ValueChangeListener class, 181–182,203,273
ValueChangeListener implementation, 273
valueChangeListener tag, 171,181–182
writingamanagedbeanmethodtohandle
value-changeevents, 203–204
valueexpressions, 191
ValueExpression class, 192
Variantclass,JAX-RS, 411
W
W3C, 66,367,379
WARfiles, 51webapplications, 81–101
configuring, 82,93deploymentdescriptors, 82documentroots, 84establishingthelocale, 356internationalizingandlocalizing, 355maintainingstateacrossrequests, 340–341parsingandformattinglocalizeddatesand
numbers, 359
presentation-oriented, 81providinglocalizedmessages, 356retrievinglocalizedmessages, 358securing, 713–738service-oriented, 81settingtheresourcebundle, 357specifyingcontextparameters, 97–98specifyingwelcomefiles, 97
webbeans, SeeContextsandDependencyInjection
(CDI)fortheJavaEEplatformwebclients, 42,81–101
examples, 456
webcomponents, 44,81–83
appletsbundledwith, 44concurrentaccesstosharedresources, 331forwardingtootherwebcomponents, 339includingotherwebresources, 339invokingotherwebresources, 338JMSand, 858mappingexceptionstoerrorscreens, 98–99mappingfiltersto, 336scopeobjects, 330–331securing, 713–738sharinginformation, 330transactions, 803
types, 44utilityclassesbundledwith, 44webcontext, 339
webcontainer, 48,82
loadingandinitializingservlets, 328mappingURLstowebcomponents, 93
webmodules, 52,84
deploying, 90dynamicreloading, 91undeploying, 92–93updating, 91viewingdeployed, 91
webpages
XHTML, 107,112
web-resource-collection element, 716–717
webresourcecollections, 716webresources, 84
Facelets, 123–124mappingfiltersto, 336unprotected, 716
webservices, 49–50
Seealsoenterprisebeans,webservices
declaringreferencesto, 101endpointimplementationclasses, 476examples, 368–376,476–479introduction, 363JAX-RScomparedtoJAX-WS, 363–365
web.xmlfile, 84,320,701,742
welcomefiles,specifying, 97Index
1009
workflows, 438
writingmanagedbeanmethods, 200–204
forhandlingactionevents, 202forhandlingvalue-changeevents, 203–204forperformingnavigation, 201–202forperformingvalidation, 202–203
writingmanagedbeanproperties
converters, 199–200listeners, 199–200validators, 199–200
WSDL, 50,363–365,367,379wsgentool, 68
wsimport tool, 68
X
xjcschemacompilertool,JAXB, 415–417
xjctool, 68
XML, 49–50,367XMLschema
mappingsofJavaclassestoXMLdata
types, 378–379
mappingstoJavadatatypes, 377–378Index
TheJavaEE6Tutorial • January2013 1010
