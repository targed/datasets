Java™ Application Development
on Linux®

Java™ Application Development
on Linux®
Carl  Albing
Michael  Schwarz
Prentice Hall Professional Technical Reference
Boston
Many of the designations used by manufacturers and sellers to distinguish their products are
claimed as trademarks. Where those designations appear in this book, and the publisher wasaware of a trademark claim, the designations have been printed with initial capital letters or inall capitals.
The authors and publisher have taken care in the preparation of this book, but make no
expressed or implied warranty of any kind and assume no responsibility for errors or omissions.No liability is assumed for incidental or consequential damages in connection with or arisingout of the use of the information or programs contained herein.
The publisher offers excellent discounts on this book when ordered in quantity for bulk
purchases or special sales, which may include electronic versions and/or custom covers andcontent particular to your business, training goals, marketing focus, and branding interests.For more information, please contact:
U. S. Corporate and Government Sales
(800) 382-3419corpsales@pearsontechgroup.com
For sales outside the U. S., please contact:
International Sales
international@pearsoned.com
Visit us on the Web: www.phptr.comLibrary of Congress Cataloging-in-Publication Data:CIP data on ﬁle.© 2005 Pearson Education, Inc.ISBN 0–13–143697-XText printed in the United States on recycled paper at Pheonix Color in Hagerstown Maryland.First printing, November 2004
To my mother, for her love of words.
—Michael
  
To my wife, Cynthia.
—Carl

xxi Preface ..........................................................................................................
xxvii Introduction ...................................................................................................
1 Getting Started ...................................................... PART I
3 An Embarrassment of Riches: The Linux Environment ............ Chapter 1
3 What You Will Learn ........................................................................... 1.1
4 The Command Line: What’s the Big Deal? ........................................ 1.2
5 Basic Linux Concepts and Commands ............................................... 1.3
6 Redirecting I/O ....................................................................... 1.3.1
9 The lsCommand ................................................................... 1.3.2
9 Filenames .............................................................................. 1.3.3
10 Permissions ........................................................................... 1.3.4
12 File Copying ........................................................................... 1.3.5
13 Seeing Stars .......................................................................... 1.3.6
15 File Contents .......................................................................... 1.3.7
19 The grep Command .............................................................. 1.3.8
viiContents
20 The ﬁnd Command ................................................................ 1.3.9
21 The Shell Revisited ................................................................ 1.3.10
26 The tar and zipCommands ................................................... 1.3.11
29 The man Command ............................................................... 1.3.12
30 Review ................................................................................................ 1.4
30 What You Still Don’t Know .................................................................. 1.5
30 Resources .......................................................................................... 1.6
33 An Embarrassment of Riches: Editors ....................................... Chapter 2
33 What You Will Learn ........................................................................... 2.1
34 Eye to Eye with vi ............................................................................... 2.2
40 Exiting .................................................................................... 2.2.1
41 Search and Replace .............................................................. 2.2.2
43 The Joy of Regular Expressions ............................................ 2.2.3
44 Starting Off Right: .exrc  ..................................................... 2.2.4
45 Editors Galore ..................................................................................... 2.3
47 Editing Your Pipes ( sed, the Stream EDitor) ......................... 2.3.1
47 Simple Graphical Editors ....................................................... 2.3.2
49 Review ................................................................................................ 2.4
49 What You Still Don’t Know .................................................................. 2.5
49 Resources .......................................................................................... 2.6
51 An Experienced Programmer’s Introduction to Java ................ Chapter 3
51 What You Will Learn ........................................................................... 3.1
52 Fundamental Language Elements ...................................................... 3.2
53 Scalar Types .......................................................................... 3.2.1
57 Object Types .......................................................................... 3.2.2
65 Statements ............................................................................. 3.2.3
74 Error Handling, Java Style ..................................................... 3.2.4
78 print() , println() , printf()  ............................... 3.2.5
82 Using (and Making) Java APIs ........................................................... 3.3
82 The package Statement ..................................................... 3.3.1
84 The import Statement ....................................................... 3.3.2
85 Encapsulation, Inheritance, and Polymorphism ................................. 3.4
85 Encapsulation ........................................................................ 3.4.1
86 Inheritance ............................................................................. 3.4.2Contents viii
91 Polymorphism ........................................................................ 3.4.3
93 O, Templates! Where Art Thou? ......................................................... 3.5
94 Virtually Final ...................................................................................... 3.6
95 A Useful Simple Application ............................................................... 3.7
95 Review ................................................................................................ 3.8
97 What You Still Don’t Know .................................................................. 3.9
97 Resources .......................................................................................... 3.10
98 Exercises ............................................................................................ 3.11
99 Where Am I? Execution Context .................................................. Chapter 4
100 What You Will Learn ........................................................................... 4.1
100 A Simple Start ..................................................................................... 4.2
100 Command-Line Arguments .................................................... 4.2.1
102 Unit Testing Made Easy ......................................................... 4.2.2
102 The System Class ........................................................................... 4.3
102 Java and Standard I/O ........................................................... 4.3.1
104 Environment Variables ........................................................... 4.3.2
105 Java and Environment Variables ........................................... 4.3.3
109 The Properties Class ................................................................. 4.4
111 The Runtime Class ......................................................................... 4.5
111 exec()  ................................................................................ 4.5.1
113 Portability ............................................................................... 4.5.2
113 Review ................................................................................................ 4.6
113 What You Still Don’t Know .................................................................. 4.7
114 Resources .......................................................................................... 4.8
115 The Sun Microsystems Java Software Development Kit ........... Chapter 5
116 What You Will Learn ........................................................................... 5.1
116 All You Need, and Not One Thing More ............................................. 5.2
117 The Java Compiler ............................................................................. 5.3
117 Compiler Behavior, Defaults, and Environment Variables ..... 5.3.1
119 javac Options ......................................................................... 5.3.2
121 The Java Runtime Engine .................................................................. 5.4
121 The Basics ............................................................................. 5.4.1
122 java Options ........................................................................... 5.4.2
122 Complete, Up-to-Date Program Documentation Made Easy .............. 5.5ix Contents
123 Running javadoc  ................................................................... 5.5.1
124 Javadoc Command-Line Options ........................................... 5.5.2
128 Javadoc Comments ............................................................... 5.5.3
131 Dispensing with Applets ..................................................................... 5.6
132 Going Native ....................................................................................... 5.7
137 Introducing RMI .................................................................................. 5.8
137 A Brief Introduction to RMI ..................................................... 5.8.1
143 The rmic Tool ........................................................................ 5.8.2
144 The rmiregistry Tool ............................................................. 5.8.3
144 Setting Up Servers and Clients .............................................. 5.8.4
147 RMI Summary ........................................................................ 5.8.5
148 The Java Debugger ............................................................................ 5.9
157 Return to the Source: The Java Decompiler ...................................... 5.10
157 Bundling a Java Program: Put It in a JAR .......................................... 5.11
160 Deploying Applications ........................................................... 5.11.1
163 Basic jarOperation ................................................................ 5.11.2
164 The Rest of the Toolkit ....................................................................... 5.12
166 Review ................................................................................................ 5.13
166 What You Still Don’t Know .................................................................. 5.14
166 Resources .......................................................................................... 5.15
167 The IBM Developer Kit for Linux, Java 2 Technology Edition ... Chapter 6
167 What You Will Learn ........................................................................... 6.1
168Use Linux Features to Make Multiple Java SDKs Play Nicely
Together .............................................................................................6.2
168 Links ....................................................................................... 6.2.1
173 Switching Java Versions by Symlink ...................................... 6.2.2
174 How the IBM JDK Differs from the Sun JDK ...................................... 6.3
175 Performance .......................................................................... 6.3.1
175 Differences in the Commands ................................................ 6.3.2
175 IBM Classes ........................................................................... 6.3.3
176 What Are All These “_g” Versions? .................................................... 6.4
176 Review ................................................................................................ 6.5
177 What You Still Don’t Know .................................................................. 6.6
177 Resources .......................................................................................... 6.7Contents x
179 The GNU Compiler for Java (gcj) ................................................. Chapter 7
179 What You Will Learn ........................................................................... 7.1
179 A Brand GNU Way ............................................................................. 7.2
180 The GNU Compiler Collection ............................................................ 7.3
181 Compiling Our Simple Application with gcj ........................................ 7.4
182 Compiling FetchURL with gcj ................................................ 7.4.1
184 Compiling a Multiclass Program ............................................ 7.4.2
185 Options and Switches ......................................................................... 7.5
186 Reasons to Use gcj ............................................................................ 7.6
187 Reasons Not to Use gcj ..................................................................... 7.7
187 Review ................................................................................................ 7.8
187 What You Still Don’t Know .................................................................. 7.9
188 Resources .......................................................................................... 7.10
189 Know What You Have: CVS .......................................................... Chapter 8
190 What You Will Learn ........................................................................... 8.1
190 Source Control: Whys and Hows ........................................................ 8.2
193 Setup ...................................................................................... 8.2.1
195 Import ..................................................................................... 8.2.2
198 Normal Use ............................................................................ 8.2.3
201 Update ................................................................................... 8.2.4
201 Merges ................................................................................... 8.2.5
203 Log ......................................................................................... 8.2.6
205 cvs status  ...................................................................... 8.2.7
205 cvs tag  .............................................................................. 8.2.8
207 Branching Tags ...................................................................... 8.2.9
210 cvs export  ...................................................................... 8.2.10
210 A Quick Look behind the Scenes ........................................... 8.2.11
211 A GUI: jCVS ........................................................................................ 8.3
211 Installing jCVS ........................................................................ 8.3.1
213 Review ................................................................................................ 8.4
214 What You Still Don’t Know .................................................................. 8.5
214 Resources .......................................................................................... 8.6xi Contents
215 Ant: An Introduction ..................................................................... Chapter 9
215 What You Will Learn ........................................................................... 9.1
216 The Need for a Different Build Tool .................................................... 9.2
217 Obtaining and Installing Ant ................................................................ 9.3
217 Installing a Binary Tarball ....................................................... 9.3.1
219 Installing a Source Tarball ..................................................... 9.3.2
220 A Sample Ant Buildﬁle ........................................................................ 9.4
220 XML for the Uninitiated .......................................................... 9.4.1
222 The Buildﬁle Tags .................................................................. 9.4.2
229 A Real, Live Buildﬁle .............................................................. 9.4.3
232 Review ................................................................................................ 9.5
232 What You Still Don’t Know .................................................................. 9.6
232 Resources .......................................................................................... 9.7
235 Integrated Development Environments ...................................... Chapter 10
236 What You Will Learn ........................................................................... 10.1
236 NetBeans: The Open Source IDE ...................................................... 10.2
236 A Brief History of NetBeans ................................................... 10.2.1
237 Installing NetBeans ................................................................ 10.2.2
241 Getting Around in NetBeans .................................................. 10.2.3
245 Integration with CVS .............................................................. 10.2.4
248 Integration with Ant ................................................................ 10.2.5
250 Other Add-on Tools ................................................................ 10.2.6
251 SunONE Studio Community Edition ................................................... 10.3
251 Eclipse: The Source of SWT .............................................................. 10.4
251 Selecting and Installing Eclipse ............................................. 10.4.1
254 Using Eclipse for a New Project ............................................. 10.4.2
256 Using Eclipse for an Existing Project ..................................... 10.4.3
257 Working with Eclipse .............................................................. 10.4.4
258 Review ................................................................................................ 10.5
259 What You Still Don’t Know .................................................................. 10.6
259 Resources .......................................................................................... 10.7Contents xii
261 Developing Business Logic ................................. PART II
263 Balancing Acts: An Imaginary Scenario ..................................... Chapter 11
263 What You Will Learn ........................................................................... 11.1
264 Statement of the Need ........................................................................ 11.2
264 How to Develop Software ................................................................... 11.3
267 What Makes a Good Requirement ..................................................... 11.4
268 Whom to Ask for Requirements .......................................................... 11.5
269 Requirements for the Budget Application ........................................... 11.6
269 Monday Morning, 10 A.M.  ...................................................... 11.6.1
272 Back at His Desk .................................................................... 11.6.2
272 Documenting, Prototyping, and Stakeholder Buy-In ........................... 11.7
272 Documenting .......................................................................... 11.7.1
274 Stakeholder Buy-In ................................................................ 11.7.2
275 Prototyping ............................................................................. 11.7.3
276 Review ................................................................................................ 11.8
276 What You Still Don’t Know .................................................................. 11.9
276 Resources .......................................................................................... 11.10
277 Exercises ............................................................................................ 11.11
279 Analysis and Design: Seeking the Objects ................................ Chapter 12
279 What You Will Learn ........................................................................... 12.1
280 Facing the Blank Page ....................................................................... 12.2
280 Using CRC Cards ............................................................................... 12.3
280 Finding the Objects ............................................................................. 12.4
283 Finding the Methods and Attributes .................................................... 12.5
284 Essential and Nonessential ................................................................ 12.6
287 Analysis Paralysis ............................................................................... 12.7
288 Real Software Engineering ................................................................. 12.8
289 Core Classes ...................................................................................... 12.9
289 Review ................................................................................................ 12.10
289 What You Still Don’t Know .................................................................. 12.11
289 Resources .......................................................................................... 12.12
292 Exercises ............................................................................................ 12.13xiii Contents
295 JUnit: Automating Unit Testing ................................................... Chapter 13
295 What You Will Learn ........................................................................... 13.1
296 JUnit: Why All the Fuss? .................................................................... 13.2
296 Design Then Test Then Code ............................................................ 13.3
297 Installing and Running JUnit ............................................................... 13.4
299 Downloading and Unzipping .................................................. 13.4.1
301 Using JUnit ............................................................................. 13.4.2
303 Writing Test Cases ............................................................................. 13.5
306 JUnit Assertions ..................................................................... 13.5.1
308 Running a Test Case ............................................................. 13.5.2
309 Running Test Suites ........................................................................... 13.6
312 Review ................................................................................................ 13.7
312 What You Still Don’t Know .................................................................. 13.8
313 Resources .......................................................................................... 13.9
313 Exercises ............................................................................................ 13.10
315 Storing the Data ............................................................................ Chapter 14
315 What You Will Learn ........................................................................... 14.1
316 Follow the Objects .............................................................................. 14.2
316 Of Persistence .................................................................................... 14.3
316 Thinking of the Future, or Painting in Corners .................................... 14.4
316 Oracle, PostgreSQL, MySQL ............................................................. 14.5
317 MySQL ................................................................................... 14.5.1
317 PostgreSQL ........................................................................... 14.5.2
318 Oracle .................................................................................... 14.5.3
318 Selection Criteria .................................................................... 14.5.4
318 Being Self-Contained .......................................................................... 14.6
319 Beyond the Basics .............................................................................. 14.7
322 Persistence Is Not the Whole Story .................................................... 14.8
322 Setting Up PostgreSQL for BudgetPro ............................................... 14.9
322 Installing PostgreSQL ............................................................ 14.9.1
323 Creating a postgres User ................................................. 14.9.2
324 Creating Our Database .......................................................... 14.9.3
325 Straight JDBC ........................................................................ 14.9.4
325 Review ................................................................................................ 14.10Contents xiv
326 What You Still Don’t Know .................................................................. 14.11
326 Resources .......................................................................................... 14.12
326 Exercises ............................................................................................ 14.13
327 Accessing the Data: An Introduction to JDBC ........................... Chapter 15
327 What You Will Learn ........................................................................... 15.1
328 Introducing JDBC ............................................................................... 15.2
329 Making Connections ........................................................................... 15.3
332 Downloading JDBC for MySQL .............................................. 15.3.1
332 Querying Data .................................................................................... 15.4
334 Getting Results ................................................................................... 15.5
336 Updates, Inserts, Deletes ................................................................... 15.6
336 Review ................................................................................................ 15.7
336 What You Still Don’t Know .................................................................. 15.8
337 Resources .......................................................................................... 15.9
338 Exercises ............................................................................................ 15.10
339 Developing Graphical User Interfaces ................ PART III
341Getting in the Swing of Things: Designing a GUI for
BudgetPro ......................................................................................Chapter 16
341 What You Will Learn ........................................................................... 16.1
342 A Simple Swing Program .................................................................... 16.2
343 Stompin’ at the Savoy, or The Swing Paradigm ................................. 16.3
345 Slow, Slow, Quick-Quick, Slow: The Basic Swing Objects ................. 16.4
347 Layout Managers ................................................................................ 16.5
348 Beyond Arthur Murray: Actions, Listeners, Events ............................. 16.6
348 Getting Down to Cases: Designing a GUI for BudgetPro ................... 16.7
350 Overview ................................................................................ 16.7.1
352 Creating Pieces ...................................................................... 16.7.2
373 Review ................................................................................................ 16.8
374 What You Still Don’t Know .................................................................. 16.9
375 Resources .......................................................................................... 16.10
375 Exercises ............................................................................................ 16.11xv Contents
377 Other Ways: Alternatives to Swing ............................................. Chapter 17
377 What You Will Learn ........................................................................... 17.1
378 The IBM SWT Toolkit ......................................................................... 17.2
378 Another GUI Toolkit. Why? .................................................... 17.2.1
379 Duplicated Effort. Why Cover It? ............................................ 17.2.2
380 Portability: Better andWorse .................................................. 17.2.3
380 The Rest of the Chapter ......................................................... 17.2.4
380 SWT: Close to the Metal ........................................................ 17.2.5
381 “Hello, world” SWT Style ........................................................ 17.2.6
384 Porting BudgetPro to SWT ................................................................. 17.3
387 Step 1: Convert the Class Members ...................................... 17.3.1
389 Step 2: Converting the main() Method .............................. 17.3.2
391Step 3: Converting the GUI build()  and init()
Methods .................................................................................17.3.3
394 Completing the Conversion of the BudgetPro Class ........ 17.3.4
395 Completing the Conversion of the Application ....................... 17.3.5
395 Closing Thoughts ................................................................... 17.3.6
396 SWT and gcj ...................................................................................... 17.4
398 Review ................................................................................................ 17.5
398 What You Still Don’t Know .................................................................. 17.6
398 Resources .......................................................................................... 17.7
399 Exercises ............................................................................................ 17.8
401 Developing Web Interfaces .................................. PART IV
403 Servlets: Java Pressed into Service ............................................ Chapter 18
403 What You Will Learn ........................................................................... 18.1
404 Servlets: Program-Centric Server-Side Documents ........................... 18.2
405 Perspective ......................................................................................... 18.3
407 How to Write a Servlet ........................................................................ 18.4
411 Input, Output ....................................................................................... 18.5
413Matters of State: Cookies, Hidden Variables, and the Dreaded
“Back” Button ......................................................................................18.6
414 Cookies .................................................................................. 18.6.1
416 Designing a BudgetPro Servlet .......................................................... 18.7Contents xvi
416 Prototype ................................................................................ 18.7.1
417 Design .................................................................................... 18.7.2
420 Review ................................................................................................ 18.8
420 What You Still Don’t Know .................................................................. 18.9
421 Resources .......................................................................................... 18.10
421 Exercises ............................................................................................ 18.11
423 JSP: Servlets Turned Inside Out ................................................. Chapter 19
424 What You Will Learn ........................................................................... 19.1
424 Servlets Turned Inside Out: JSP ........................................................ 19.2
426 How to Write a JSP Application .......................................................... 19.3
427 Scriptlet .................................................................................. 19.3.1
429 Declaration ............................................................................. 19.3.2
430 Expression ............................................................................. 19.3.3
431 Directive ................................................................................. 19.3.4
434 New Syntax ............................................................................ 19.3.5
434 JavaBeans in JSP .................................................................. 19.3.6
437 Tag Libraries .......................................................................... 19.3.7
438 Using JSP with BudgetPro ................................................................. 19.4
439 Review ................................................................................................ 19.5
440 What You Still Don’t Know .................................................................. 19.6
440 Resources .......................................................................................... 19.7
441 Exercises ............................................................................................ 19.8
443 Open Source Web Application Servers ...................................... Chapter 20
443 What You Will Learn ........................................................................... 20.1
444 Downloading JBoss ............................................................................ 20.2
444 Be an Enabler, or “Let’s Be Codependent!” ........................................ 20.3
445 Nonroot-Installed Software .................................................... 20.3.1
450 Finer Grained Control ............................................................ 20.3.2
450 Installing JBoss ................................................................................... 20.4
451 Things That Make It Go ...................................................................... 20.5
451 System V Init System ............................................................. 20.5.1
458 RedHat/Fedora chkconﬁg  .................................................... 20.5.2
463 Other Distributions ................................................................. 20.5.3
464 IDE Integration ....................................................................... 20.5.4xvii Contents
464 Disposition of Forces .......................................................................... 20.6
464 Apache Geronimo ............................................................................... 20.7
467 Installing Geronimo ............................................................................. 20.8
468 Running the Geronimo Server ............................................................ 20.9
468 Review ................................................................................................ 20.10
469 What You Still Don’t Know .................................................................. 20.11
469 Resources .......................................................................................... 20.12
471 Developing Enterprise Scale Software ............... PART V
473 Introduction to Enterprise JavaBeans ........................................ Chapter 21
473 What You Will Learn ........................................................................... 21.1
473 Expanding to EJBs ............................................................................. 21.2
474 EJB Concepts ........................................................................ 21.2.1
477 Bean Types ............................................................................ 21.2.2
482 Under the Hood ...................................................................... 21.2.3
482 What’s in a Name? An Introduction to JNDI ....................................... 21.3
482 Naming and Directory System Concepts ............................... 21.3.1
484 Common Directory Services .................................................. 21.3.2
487 Putting a Face to a Name: JNDI ............................................ 21.3.3
491 Using JNDI with JBoss ........................................................... 21.3.4
491 Review ................................................................................................ 21.4
492 What You Still Don’t Know .................................................................. 21.5
492 Resources .......................................................................................... 21.6
493 Building an EJB ............................................................................. Chapter 22
493 What You Will Learn ........................................................................... 22.1
493 EJBs: You Don’t Know Beans? .......................................................... 22.2
495 SessionBean  .................................................................... 22.2.1
497 EJBObject  ......................................................................... 22.2.2
498 EJBHome  .............................................................................. 22.2.3
499 Summarizing the Pieces ........................................................ 22.2.4
499 EJBLocalHome  and EJBLocalObject  ...................... 22.2.5
501 Compiling Your Beans ........................................................... 22.2.6
502 Review ................................................................................................ 22.3Contents xviii
502 What You Still Don’t Know .................................................................. 22.4
503 Resources .......................................................................................... 22.5
505 Deploying EJBs ............................................................................. Chapter 23
505 What You Will Learn ........................................................................... 23.1
506 Lend Me Your EAR: Enterprise Packaging and Deployment ............. 23.2
508 What’s in an EJB-JAR File ..................................................... 23.2.1
511 Using Our Bean ..................................................................... 23.2.2
512 Packaging the Servlet ............................................................ 23.2.3
514 Deploying the EAR ............................................................................. 23.3
515 JBoss ..................................................................................... 23.3.1
515 Geronimo ............................................................................... 23.3.2
516 Maintaining a Distributed Application ................................................. 23.4
516 Ant and CVS .......................................................................... 23.4.1
517 XDoclet .................................................................................. 23.4.2
518 Abstracting Legacy Applications ......................................................... 23.5
518 Review ................................................................................................ 23.6
519 What You Still Don’t Know .................................................................. 23.7
519 Resources .......................................................................................... 23.8
521 Parting Shots ................................................................................. Chapter 24
521 The Future’s So Bright, I Squint and Look Confused ......................... 24.1
522 Our Book Is Yours .............................................................................. 24.2
522 Came the Revolution .......................................................................... 24.3
523 What You Still Don’t Know .................................................................. 24.4
523 Resources .......................................................................................... 24.5
525 ASCII Chart .................................................................................... Appendix A
527 A Java Swing GUI for BudgetPro ................................................ Appendix B
539 GNU General Public License ........................................................ Appendix C
549 Index .............................................................................................................xix Contents

JAVA AND  LINUX
Why another book on Java? Why a book on Java and Linux? Isn’t Java a plat-
form-independent system? Aren’t there enough books on Java? Can’t I learneverything I need to know from the Web?
No doubt, there are a host of Java books on the market. We didn’t wake
up one morning and say, “You know what the world really  needs? Another book
about Java!” No. What we realized was that there are a couple of “holes” in theJava book market.
First, Linux as a development platform and deployment platform for Java
applications has been largely ignored. This is despite the fact that the *nixplatform (meaning all UNIX and UNIX-like systems, Linux included) has longbeen recognized as one of the most programmer-friendly platforms in existence.Those few resources for Java on Linux that exist emphasize tools to the exclu-sion of the Java language and APIs.
Second, books on the Java language and APIs have focused on pedagogical
examples that serve to illustrate the details of the language and its libraries, butvery few of these examples are in themselves practically useful, and they tendPreface
xxi
to deal only with the issues of writing programs, and not at all with deploying
and maintaining them. Anyone who has worked on a major software project,especially a software project that is developed and deployed in a business for abusiness, knows that designing and coding are only about half of the work in-volved. Yes, writing Java code is only slightly affected by the development andthe deployment platform, but the process of releasing and maintaining suchapplications is signiﬁcantly different between platforms.
To address these missing pieces, we decided to cover development and
deployment of a Java application that has command-line, GUI, servlet, andenterprise components on a Linux platform. We’re writing the guide book wewish we had had when we started writing and deploying Java applications onLinux. We’re going to show you a simplistic enterprise application, “from cradleto grave,” but along the way cover issues of design process, production environ-ment, setup, administration, and maintenance that few books bother to cover.
1
If you are considering buying this book and you are wondering if there is
any information in here that you can’t get for free on the Web, then, no. Thereis not. In fact, there is little information in any Java or Linux book that is notavailable for free on the Internet. In fact, in each of our chapters we will tellyou where on the Web to ﬁnd virtually all of the information we present, andthen some. And yet books continue to sell, and we have the chutzpah  to ask
you to buy the book. The reason is that Web information is scattered, unorga-nized, and of highly variable quality. We will be trying to bring all the relevantinformation together in this book, in a clearly organized manner (and, wewould like to believe, at an acceptably high level of quality). We think thathas value.
Also, this book is part of the Bruce Perens’ Open Source Series. This book
is part of the Web literature. And you may freely read it and use it on the Web.We hope this book will be one of those you use on the Web and buy on paper.We don’t know about you, but we like to use Web books for reference, but forreading, we like books. We own at least three books that are available for freeon the Web: Thinking in C++ , Thinking in Java , and O’Reilly’s Docbook: The
Deﬁnitive Guide . We hope that open publishing will be the new model.
1. This is not to say this book is without purely pedagogical examples. Especially in Part I we
make use of your typical “throwaway” examples and single classes. To try to illustrate the basicswith a complete application would obscure and confuse the points being illustrated.Preface xxii
FREE SOFTWARE AND  JAVA
GNU/Linux2 is Free Software. It is Open Source. I don’t even want to start
the debate on what each term means and which one is “right.” One of the twoauthors of this book is a Free Software advocate, and the other is of a purelylaissez-faire attitude towards the question (we won’t tell you which, althoughwe invite you to guess). But even with a deliberate decision to cease-ﬁre, thequestion remains: Is Java Open Source or Free Software?
The answer is mixed. Neither Sun’s nor IBM’s Java implementations are
Open Source or Free Software. You may download and use them for free, butyou do not have the source code to them, nor do you have the right to makemodiﬁcations to them.
3 This book will cover the GNU Compiler for Java,
which compiles Java source code to native machine code. The GNU Compilerfor Java ( gcj) is both Open Source and Free Software. It is, however, supporting
differing levels of the Java APIs (some packages are current, some are back at1.1.x levels) and does not fully support the AWT or Swing GUIs.
However, none of this means that you cannot write your own Java pro-
grams and release them under a Free Software or Open Source license. So youcan certainly develop Free Software in Java. Staunch Free Software partisans(such as Richard Stallman and the Free Software Foundation) would questionthe wisdom of doing so. Their argument would be that a Free Software productthat depends on non-Free tools isn’t really Free Software, since to compile, use,or modify it, you need to make use of a proprietary tool.
There is more than one effort to produce a Free Software Java runtime
implementation. None of them is “ready for prime time.” It would, in ouropinion, be a very good thing for Sun to release their SDK and Java VirtualMachine as Free Software. But so far, they have steadily resisted calls to do so.
2. This is the only time we will refer to it as “GNU/Linux.” See Section 7.3 for the story of
why GNU/Linux is the preferred name of some. We understand Stallman and the FSF’s posi-tion, but “Linux” is much easier on the eyes and ears than “GNU/Linux.” And that, not prin-ciple, is how names and words go into the language. For better or for worse, “Linux” is thename of the operating system.
3. As we write this, a very public discussion is taking place between Sun, IBM, and Eric Ray-
mond, founder of the Open Source Initiative, about opening Java under some sort of opensource license. At this time, no one knows how this will turn out, but it is possible that Javawill be Free Software in the future.xxiii Preface
The fact, however, that two distinct vendors (Sun and IBM) produce ef-
fectively interchangeable development and runtime environments reduces someof the risk that you face when you select a platform available only from a singlevendor who does not provide source code.
So, to put the case ﬁrmly: Java is free for use, but it is certainly not Free
Software as deﬁned in The GNU Manifesto
4 or the GNU General Public Li-
cense.5 This is a political and philosophical issue of interest only to those
aforementioned Free Software partisans. For the rest of us, this has no bearingon Java’s technical or business merits. As for us, obviously we like the languageor we wouldn’t be writing about it.
YOU CAN HELP!
This book is part of the Bruce Perens’ Open Source Series. Shortly after thisbook is published in dead-tree form, it will be on the Web,
6 free for use, redis-
tribution, and modiﬁcation in compliance with the terms of the Open Publica-tion License,
7 with no options taken. You can immediately create your own
version as permitted in that license.
Naturally enough, we plan to maintain our “ofﬁcial” version of the online
book, so we encourage you to send suggestions, corrections, extensions, com-ments, and ideas to us. Please send any such to 
javalinux@multitool.net
and we will try to keep our little tome up-to-date so it continues to serve theneeds of the Java and Linux development communities.
ACKNOWLEDGMENTS
First off, we naturally wish to thank Mark L. Taub, our acquisitions editor atPrentice Hall PTR, for believing in the book and in open publishing as the wayto put it out there. We also want to thank Bruce Perens for lending his nameand powers of persuasion to open-content publishing through the Prentice HallPTR Bruce Peren’s Open Source Series. Thanks, too, to Patrick Cash-Peterson
4.http://www.gnu.org/gnu/manifesto.html
5.http://www.gnu.org/copyleft/gpl.html
6.http://www.javalinuxbook.com/
7.http://www.opencontent.org/openpub/Preface xxiv
and Tyrrell Albaugh, who worked as our in-house production contacts, for all
the behind-the-scenes work they did, including overseeing the cover.
In more direct terms of content, we owe major thanks to Kirk Vogen of
IBM Consulting in Minneapolis for his article on using SWT with gcj, and
for his kind help in allowing us to use the ideas he ﬁrst presented in his IBMdeveloperWorks articles. In more direct terms of content, we owe major thanksto: Kirk Vogen of IBM Consulting in Minneapolis for his article on using SWTwith gcj, and for his kind help in allowing us to use ideas he ﬁrst presented in
his IBM developerWorks articles; and to Deepak Kumar
8 for graciously allow-
ing us to base our build.xml  ﬁle for EJBs off of a version that he wrote.
Thanks, too, to Andrew Albing for his help in drawing some of our dia-
grams, and to George Logajan and to Andy Miller for sharing their insights onthe more intricate details of Swing.
We also wish to express our great indebtedness to our technical reviewers,
especially Andrew Hayes, Steve Huseth, and Dan Moore. A very large thank-you is also due to Alina Kirsanova whose eye for detail, endless patience, andtenacity, and overall talent with prooﬁng, layout, and more added so muchreﬁnement and improvement to the book. We are greatful for all their contri-butions. Any errors or omissions in this text are our fault and certainly nottheirs. The book is much stronger for all their efforts.
There are likely many more people we ought to thank, especially those at
Prentice Hall PTR, whose names and contributions we may never know, butwe do know that this was an effort of many more people than just the authors,and we are grateful to them all.
8.http://www.roseindia.net/xxv Preface

This book has the unfortunate burden of serving a diverse set of audiences. We
realize that this book might appeal to both experienced Java programmers whoare new to Linux, and to experienced Linux programmers who are new to Java,with all possible shadings in between.
In addition to balancing these two poles, we are also trying to strike a bal-
ance between the size of the book and the range of our topic. Fortunately, thereis today quite a range of both book and Web publishing on both Java andLinux, so we are able to do our best within the limits of a book a normal personmay lift, and we can make recourse to a number of outside references you mightwish to use to supplement our efforts.
WHO SHOULD  BUYTHIS BOOK
If you are an experienced Java programmer, but quite new to Linux, and youhave been looking for information on the tools available to develop and deployJava applications on Linux systems, this book will provide a lot of usefulinformation.Introduction
xxvii
If you are an experienced Linux user or developer, and you are interested
in using the Java language on that platform, this book will guide you throughsome advanced Java development topics and will present, we hope, some noveluses for familiar Linux and GNU tools.
If you are a rank beginner to either Linux or Java, we still think this book
has value, but we would recommend that you use it in conjunction with moreintroductory books. For a basic introduction to Java and object-oriented pro-gramming, we recommend Bruce Eckel’s excellent book, Thinking in Java
(ISBN 0-13-100287-2). For an introduction to Linux and its tools, we canrecommend The Linux Book  by David Elboth (ISBN 0-13-032765-4)
1 as an
all-around title. We also list several other books in sections titled Resourcesthroughout this book. Many books we recommend are not actually Linux-speciﬁc. Since Linux duplicates (in most respects) a UNIX platform, we dooccasionally recommend books that are general to all *nix systems.
If you are a developer, contractor, or MIS development manager with
more projects than budget, our book will introduce you to many solid toolsthat are free of license fees for the development and deployment of productionJava applications. We are all being asked to do more with less all the time. Inmany (but certainly not all) cases, Free and Open Source software is an excellentway to do that.
WHO SHOULD  NOT BUYTHIS BOOK
Those looking for complete documentation on Java APIs and Linux-based Javaapplication servers will be disappointed. Complete reference material on FreeSoftware and Open Source Software may be found in book form, but it is mostcertainly out-of-date. And while this is an open-content book, we know fullwell that we will only be updating it as our “day jobs” permit. In other words,those seeking complete and current reference material should go to the Web.
Those who have a multimillion-dollar budget for applications development
will probably be well served by commercial application server products. Whilewe very much believe that Linux and Java on Linux are fully capable of support-ing production environments, we recognize that products such as BEAWeblogicand IBM’s WebSphere have large support organizations behind them, and
1. Note that we do tend to recommend titles from Pearson Education (our publishers), but
that we by no means conﬁne ourselves to that publisher.Introduction xxviii
(at least for now) a larger base of developers and contracting organizations with
staff (variably) experienced in writing and supporting applications in these en-vironments. Please note that you can run these products on Linux systems, andthat they are part of the Linux-Java world. Our book does not cover them,however, both because they are well-covered elsewhere, and because we havechosen to emphasize the Free and Open Source tools merely to keep the booksmall enough to lift, while still covering those tools most in need of well-writtensupporting documentation.
HOW TO  USETHIS BOOK
There are many approaches to a book. Some people like to start with the lastchapter to see how it all turns out in the end; others like to start at the frontand master each topic before moving on; some read through quickly, thenreread for detail; still others prefer to skip around, “cherry picking” topics aswhim and fancy strike. We hope this book will work for you, whateveryour style.
Each chapter is not really free-standing, nor is it intricately tied to the
previous chapters. If we were writing in depth on a single topic we might beable to build chapter by chapter. Instead, we’ve tackled an immense amountof information in hopes of condensing it down to give a good overview, to giveyou a glimpse of the possibilities, and to whet your appetite for more. Somechapters will be strongly related to previous chapters; others you may be ableto read without having read any of the preceding chapters—it will depend onthe topic.
Many Paths
What we’re describing below are a few possible paths that you might take
through the book, depending on what you bring to the task—your experienceand skills, your patience and persistence. We have tried to pack a lot of usefuland practical information into these few chapters, distilling down the mostimportant topics for each subject area. We hope that, even for the most experi-enced of our readers, we still offer, if not some new facts, at least some freshexplanations that might give you new insight into familiar topics.xxix Introduction
The Linux Newbie Path
If you are new to Linux, then you’ll want to start with the ﬁrst two chapters.
If you are already experienced in Java, feel free to skip Chapter 3, but you maywant at least to skim Chapters 4 and 5. You will deﬁnitely want to check outChapter 7 as we are almost sure that it is something you didn’t know about.
Chapter 8 is another topic you may not have encountered outside of
Linux, although CVS is not limited to Linux environments. Beyond that, itwill depend on what else you already know. See what other categories, below,might ﬁt your situation.
The Java Newbie Path
If you are new to Java, then be sure to read Chapters 3 and 4, but if you arenot already an experienced programmer you should probably bring alonganother, more introductory text.
Chapters 5 and 10 will give you some good background for choosing your
Java development tools. So many Java projects these days are tied to Ant thatyou should also cover Chapter 9 if you don’t already know the tool.
With your experience in other languages you may have done a lot of unit
testing; read about the approach most popular with Java developers inChapter 13.
The Client-Side Path
Depending on what type of Java development that you hope to do, you maywant to concentrate on certain parts of the latter half of the book. Those mostinterested in the front end or client side should focus on the middle chapters.Of most interest to you will be Chapters 16 and 17. Your client-side emphasisshould also include Chapters 18 and 19.
The Server-Side Path
For those with an emphasis on the middle and third tier, or those with a generalserver emphasis, all of Part IV will be helpful. This is in addition to a solidgrounding in the previous chapters in Parts I and II.
The Enterprise Path
The ﬁnal Part V will discuss enterprise scale software. Such software also typi-cally includes JSP and Servlet software, as covered in Chapters 18, 19, and 20.Introduction xxx
For those working at this level, the projects are usually large enough to be
staffed with a variety of roles. Even if your role doesn’t include the deploymentof the software, we encourage you to read these chapters (20 and 24) so as toget some understanding of what is needed and how it ﬁts together.
Now, let’s get to work, and discover some of the amazing capabilities
available to you when you combine two of the most powerful software trendsin the history of computing—Java and Linux.xxxi Introduction

Part I
Getting Started

The reader is introduced to the vast possibilities of the Linux command line,
and excuses are made for its eclecticism.
WHATYOUWILL LEARN 1.1
Some basic shell commands are described in this chapter, especially those relat-ed to some common programming tasks. Used as a toolkit, they can be a handycollection of tools for everyday use.
Linux provides an incredible array of such tools, useful for any develop-
ment effort, Java or otherwise. They will be important not only for the develop-ment of your Java code, but for all the hundreds of related housekeeping tasksassociated with programming and with managing your development environ-ment. A few tools are described brieﬂy in this chapter, to hint at what can bedone and to whet your appetite for more.
We will also describe a command which will help you learn about other
commands. Even so, it may be quite worth your while to have another bookabout UNIX/Linux handy. If there is something you, as a programmer, needChapter 1
An Embarrassment of Riches:
The Linux Environment
3
to do on a Linux system, chances are there is already a command (or a sequence
of commands) which will do it.
Finally, we will discuss the extent of our remaining ignorance upon
ﬁnishing the chapter.
Let us take a moment to explain that last comment. As readers of comput-
er books ourselves, we are often frustrated when we discover how lightly a topichas been covered, but particularly so when other parts of the same book arefound to fully explore their topics. When only some parts of a book are thor-ough, you often don’t know that you don’t know it all. We will introduce somebasic shell concepts and commands here, and we may expand on some of thesein later chapters, but each of our chapters covers topics that could each ﬁll itsown book. Therefore we need to leave out lots of material. We will also let youknow when we have left things out because they are off-topic, or because wedon’t have room. We’ll also try to tell you where to look for the rest of theknowledge. We try to sum this up in a ﬁnal section of each chapter entitledWhat You Still Don’t Know. But we do have a lot of information to impart,so let’s get going.
THE COMMAND  LINE:WHAT’S THE  BIG DEAL? 1.2
One of the revolutionary things that UNIX (and thus Linux) did was to sepa-
rate operating system commands from the operating system itself. The com-mands to display ﬁles, show the contents of directories, set permissions, and soon were, in the “olden days,” an integral part of an operating system. UNIXremoved all that from the operating system proper, leaving only a small “kernel”of necessary functionality in the operating system. The rest became executablesthat lived outside of the operating system and could be changed, enhanced, oreven replaced individually by (advanced) users without modifying the operatingsystem. The most signiﬁcant of these standalone pieces was the commandprocessor itself, called the shell.
The shell is the program that takes command-line input, decides what
program(s) you are asking to have run, and then runs those programs. Beforethere were Graphical User Interfaces, the shell was the user interface to UNIX.
As more developers began working with UNIX, different shells were developedto provide different features for usability. Now there are several shells tochoose from, though the most popular is bash . Some BSD/UNIX die hardsChapter 1 An Embarrassment of Riches: The Linux Environment 4
still swear by csh, a.k.a. the C-shell , though most of its best features have been
incorporated into bash .
TIP
There are actually quite a few shells to choose from, and several editors for
entering text. Our recommendation: If you learn only one shell, learn bash . If
you learn only one editor, learn vi. Some basic shell scripting will go a long way
to eliminating mundane, repetitive tasks. Some basic vi editing will let you do
things so much faster than what GUI editors support. (More on editing inChapter 2.)
Since commands could be developed and deployed apart from the operat-
ing system, UNIX and Linux have, over the years, had a wide variety of toolsand commands developed for them. In fact, much of what is called Linux  is
really the set of GNU tools which began development as Open Source longbefore Linux even existed. These tools, while not technically part of the operat-ing system, are written to work atop any UNIX-like operating system and pro-grammers have come to expect them on any Linux system that they use. Somecommands and utilities have changed over the years, some are much the sameas they ﬁrst were in the early days of UNIX.
Developers, encouraged by the openness of Open Source (and perhaps
having too much free time on their hands) have continued to create new utili-ties to help them get their job done better/faster/cheaper. That Linux supportssuch a model has helped it to grow and spread. Thus Linux presents the ﬁrsttime user with a mind-boggling array of commands to try to learn. We willdescribe a few essential tools and help you learn about more.
BASIC LINUX CONCEPTS AND  COMMANDS 1.3
There are some basic Linux commands and concepts that you should know inorder to be able to move around comfortably in a Linux ﬁlesystem. Check yourknowledge of these commands, and if need be, brush up on them. At the endof the chapter, we list some good resources for learning more about these andother commands. Remember, these are commands that you type, not icons forclicking, though the windowing systems will let you set up icons to representthose commands, once you know what syntax to use.5 1.3 Basic Linux Concepts and Commands
So let’s get started. Once you’ve logged in to your Linux system, regardless
of which windowing system you are using—KDE, Gnome, Window Maker,and so on, start up an xterm window by running xterm  (or even konsole ) and
you’ll be ready to type these commands.
1
Redirecting I/O 1.3.1
The second great accomplishment of UNIX,2 carried on into its Linux descen-
dants, was the concept of redirecting input and output (I/O). It was based onthe concept of a standardized way in which I/O would be done, calledstandard I/O .
Standard I/O 1.3.1.1
A familiar concept to Linux developers is the notion of standard I/O. Virtually
every Linux process begins its life with three open ﬁle descriptors—standardin, standard out, and standard error. Standard in is the source of input for theprocess; standard out is the destination of the process’ output; and standarderror is the destination for error messages. For “old fashioned” command-lineapplications, these correspond to keyboard input for standard in and the outputwindow or screen for both standard out and error.
A feature of Linux that makes it so adaptable is its ability to redirect its
I/O. Programs can be written generically to read from standard in and write tostandard out, but then when the user runs the program, he or she can change(or redirect) the source (in) or destination (out) of the I/O. This allows aprogram to be used in different ways without changing its code.
Redirecting I/O is accomplished on the Linux shell command line by the
“<” and “>” characters. Consider the ls program which lists the contents of a
directory. Here is a sample run of ls:
$ ls
afile    more.data     zz.top$ 
1. If you’re not using a windowing system, these commands are typed at the shell prompt that
you get after you log in. But if you’re not using a windowing system, either you’re not a begin-ner (and don’t need this introduction) or you can’t get your windowing system to work, inwhich case you may need more help that we can give you here.
2. Yes, we are aware that much of UNIX actually comes from the Multics project, but we
credit UNIX with popularizing it.Chapter 1 An Embarrassment of Riches: The Linux Environment 6
We can redirect its output to another location, a ﬁle, with the “>”
character:
$ ls > my.files
$
The output from the ls command no longer appears on the screen (the
default location of standard out); it has been redirected to the ﬁle my.files .
What makes this so powerful a construct (albeit for a very simple example)
is the fact that not only was no change to the program required, but the pro-grammer who wrote the ls program also did nothing special for I/O. He simply
built the program to write to standard out. The shell did the work of redirectingthe output. This means that any program invoked by the shell can have itsoutput similarly redirected.
Standard error is another location for output, but it was meant as the des-
tination for error messages. For example, if you try to list the contents of anonexistent directory, you get an error message:
$ ls bogus
ls: bogus: No such file or directory$
If you redirect standard out, nothing changes:
$ ls bogus > save.outls: bogus: No such file or directory$
That’s because the programmer wrote the program to send the message to
standard error, not standard out. In the shell ( bash ) we can redirect standard
error by preceding the redirect symbol with the number 2, as follows:3
$ ls bogus 2> save.out
$
3. The use of the number 2 comes from an implementation detail: All the I/O descriptors for
a UNIX process were kept in an array. The ﬁrst three elements of the array, numbered 0, 1,and 2, were deﬁned to be the standard in, out, and err, in that order. Thus in the shell you canalso redirect standard out by using “1>” as well as the shorter “>”.7 1.3 Basic Linux Concepts and Commands
Note there is no output visible from ls. The error message, ls: bogus:
No such file or directory , has been written to the ﬁle save.out .
In a similar way standard input ( stdin ) can be redirected from its default
source, the keyboard.
As an example, we’ll run the sort  program. Unless you tell it otherwise,
sort  will read from stdin —that is, the keyboard. We type a short list of
phrases and then type a ^D (a Control-D) which won’t really echo to the screen
as we have shown but will tell Linux that it has reached the end of the input.The lines of text are then printed back out, now sorted by the ﬁrst character ofeach line. (This is just the tip of the iceberg of what 
sort  can do.)
$ sort
once upon a timea small creaturecame to live inthe forest.^Da small creaturecame to live inonce upon a timethe forest.
Now let’s assume that we already have our text inside a ﬁle called
story.txt . We can use that ﬁle as input to the sort  program by redirecting
the input with the “ <” character. The sort  doesn’t know the difference. Our
output is the same:
$ sort < story.txt
a small creaturecame to live inonce upon a timethe forest.
Pipes 1.3.1.2
The output from one command can also be sent directly to the input of another
command. Such a connection is called a pipe. Linux command-line users also
use “pipe” as a verb, describing a sequence of commands as piping  the output
of one command into another. Some examples:
$ ls  | wc > wc.fields
$ java MyCommand < data.file | grep -i total > out.putChapter 1 An Embarrassment of Riches: The Linux Environment 8
The ﬁrst example runs ls, then pipes its output to the input of the wc
program. The output of the wc command is redirected to the ﬁle wc.fields .
The second example runs java, giving it a class ﬁle named MyCommand . Any
input that this command would normally read from keyboard input will beread this time from the ﬁle 
data.file . The output from this will be piped
into grep, and the output from grep will be put into out.put .
Don’t worry about what these commands really do. The point of the ex-
ample is to show how they connect. This has wonderful implications for devel-opers. You can write your program to read from the keyboard and write to awindow, but then, without any change to the program, it can be instructed toread from ﬁles and write to ﬁles, or be interconnected with other programs.
This leads to a modularization of functions into small, reusable units. Each
command can do a simple task, but it can be interconnected with other com-mands to do more, with each pipeline tailored by the user to do just what isneeded. Take wc for example. Its job is to count words, lines, and characters
in a ﬁle. Other commands don’t have to provide an option to do this; any timeyou want to count the lines in your output, just pipe it into wc.
The ls Command 1.3.2
The ls command is so basic, showing the names of ﬁles in a directory. Be sure
that you know how to use these options:
•
ls lists the ﬁles in a directory.
•ls -l  is the long form, showing permissions, ownership, and size.
•ls -ld  doesn’t look inside the directory, so you can see the directory’s
permissions.
•ls -lrt  shows the most recently modiﬁed ﬁles last, so you can see what
you’ve just changed.
Filenames 1.3.3
Filenames in Linux can be quite long and composed of virtually any character.
Practically speaking, however, you’re much better off if you limit the length tosomething reasonable, and keep to the alphanumeric characters, period, andthe underscore (“
_”). That’s because almost all the other punctuation characters
have a special meaning to the shell, so if you want to type them, you need toescape  their special meaning, or suffer the results of unintended actions.9 1.3 Basic Linux Concepts and Commands
Filenames are case sensitive—upper- and lowercase names are different.
The ﬁles ReadMe.txt  and readme.txt  could both be in the same directory;
they are distinct ﬁles.
Avoid using spaces in ﬁlenames, as the shell uses whitespace to delineate
between arguments on a command line. You can put a blank in a name, but
then you always have to put the name in quotes to refer to it in the shell.
To give a ﬁlename more visual clues, use a period or an underscore.
You can combine several in one ﬁlename, too. The ﬁlenames
read_me_before_you_begin  or test.data.for_my_program  may be
annoyingly long to type, but they are legal ﬁlenames.
NOTE
The period, or “dot,” in Linux ﬁlenames has no special meaning. If you come
from the MS-DOS world, you may think of the period as separating the ﬁlenamefrom the extension, as in 
myprogrm.bas  where the ﬁlename is limited to eight
characters and the extension to three characters. Not so in Linux. There is no“extension,” it’s all just part of the ﬁlename.
You will still see names like 
delim.c  or Account.java , but the .c or
.java  are simply the last two characters or the last ﬁve characters, respective-
ly, of the ﬁlenames. That said, certain programs will insist on those endings fortheir ﬁles. The Java compiler will insist that its source ﬁles end in 
.java  and
will produce ﬁles that end in .class —but there is no special part of the ﬁle-
name to hold this. This will prove to be very handy, both when you name yourﬁles and when you use patterns to search for ﬁles (see below).
Permissions 1.3.4
Permissions in Linux are divided into three categories: the owner  of a ﬁle
(usually the user who created it), the group  (a collection of users), and others ,
meaning everyone who is not the owner and not in the group. Any ﬁle belongsto a single owner and, simultaneously, to a single group. It has separateread/write/execute permissions for its owner, its group, and all others. If youare the owner of a ﬁle, but also a member of the group that owns the ﬁle, thenthe owner permissions are what counts. If you’re not the owner, but a memberof the group, then the group permissions will control your access to the ﬁle. Allothers get the “other” permissions.
If you think of the three permissions, read/write/execute, as three bits of
a binary number, then a permission can be expressed as an octal digit—wherethe most signiﬁcant bit represents read permission, the middle bit is writeChapter 1 An Embarrassment of Riches: The Linux Environment 10
permission, and the least signiﬁcant bit is execute permission. If you think of
the three categories, user/group/others, as three digits, then you can express thepermissions of a ﬁle as three octal digits, for example “750”. The earliest ver-sions of this command required you to set ﬁle permissions this way, by specify-ing the octal number. Now, although there is a fancier syntax (for example,
g+a), you can still use the octal numbers in the chmod  command. See the
example below.
The fancier, or more user-friendly, syntax uses letters to represent the var-
ious categories and permissions. The three categories of user, group, and otherare represented by their ﬁrst letters: 
u, g, and o. The permissions are similarly
represented by r, w, and x. (OK, we know “x” is not the ﬁrst letter, but it is a
reasonable choice.) For both categories and permissions, the letter a stands for
“all.” Then, to add permissions, use the plus sign ( +); to remove permissions,
use the minus sign ( -). So g+a means “add all permissions to the group catego-
ry,” and a+r means “add read permissions to all categories.”
Be sure that you know these commands for manipulating permissions:
•chmod  changes the mode  of a ﬁle, where mode refers to the
read/write/execute permissions.
•chown  changes the owner of a ﬁle.4
•chgrp  changes the group owner of a ﬁle.
Table 1.1 shows some common uses of these commands.
Table 1.1 Changing permissions
Explanation Command
Gives everyone read permission. chmod a+r file
Takes away write permission from group, others. chmod go-w file
Sets up a shell script so you can execute it like a command. chmod u+x file
Sets permission to read and write for the owner but no permissions
for anyone else.chmod 600 file
4. On Linux the use of this command is restricted to the superuser, or “root.”11 1.3 Basic Linux Concepts and Commands
File Copying 1.3.5
Do you know these commands?
•mv
•cp
•ln
The mv command (short for “move”) lets you move a ﬁle from one place
in the hierarchy of ﬁles to another—that is, from one directory to another.When you move the ﬁle, you can give it a new name. If you move it withoutputting it in a different directory, well, that’s just renaming the ﬁle.
•
mv Classy.java Nouveau.java
•mv Classy.java /tmp/outamy.way
•mv Classx.java Classz.java ..
•mv /usr/oldproject/*.java .
The ﬁrst example moves Classy.java  to a new name, Nouveau.java ,
while leaving the ﬁle in the same directory.
The second example moves the ﬁle named Classy.java  from the current
directory over to the /tmp  directory and renames it outamy.way —unless the
ﬁle outamy.way  is an already existing directory. In that case, the ﬁle
Classy.java  will end up (still named Classy.java ) inside the directory
outamy.way .
The next example just moves the two Java source ﬁles up one level, to the
parent directory. The “ ..” is a feature of every Linux directory. Whenever you
create a directory, it gets created with two links already built in: “ ..” points to
its parent (the directory that contains it), and “ .” points to the directory itself.
A common question at this point is, “Why does a directory need a refer-
ence to itself?” Whatever other reasons there may be, it certainly is a handyshorthand to refer to the current directory. If you need to move a whole lot ofﬁles from one directory to another, you can use the “
.” as your destination.
That’s the fourth example.
The cp command is much like the mv command, but the original ﬁle is
left right where it is. In other words, it copies ﬁles instead of moving them. So:
cp Classy.java Nouveau.javaChapter 1 An Embarrassment of Riches: The Linux Environment 12
will make a copy of Classy.java  named Nouveau.java , and:
cp Classy.java /tmp
will make a copy of Classy.java  in the /tmp  directory, and:
cp *.java /tmp
will put the copies of all the Java sources in the current directory to the /tmp
directory.
If you run this command,
ln Classy.java /tmp
you might think that ln copies ﬁles, too. You will see Classy.java  in your
present working directory and you will see what appears to be a copy of the ﬁlein the 
/tmp  directory. But if you edit your local copy of Classy.java  and
then look at the “copy” that you made in the /tmp  directory, you will see the
changes that you made to your local ﬁle now also appear in the ﬁle in the /tmp
directory.
That’s because ln doesn’t make a copy. It makes a link. A link is just an-
other name for the same contents. We will discuss linking in detail later in thebook (see Section 6.2.1).
Seeing Stars 1.3.6
We need to describe shell pattern matching for those new to it. It’s one of the
more powerful things that the shell (the command processor) does for theuser—and it makes all the other commands seem that much more powerful.
When you type a command like we did previously:
mv /usr/oldproject/*.java .
the asterisk character (called a “star” for short) is a shorthand to match any
characters, which in combination with the .java  will then match any ﬁle in
the /usr/oldproject  directory whose name ends with .java .
There are two signiﬁcant things to remember about this feature. First, the
star and the other shell pattern matching characters (described below) do not
mean the same as the regular expressions in vi or other programs or languages.
Shell pattern matching is similar in concept, but quite different in speciﬁcs.13 1.3 Basic Linux Concepts and Commands
Second, the pattern matching is done by the shell, the command inter-
preter, before  the arguments are handed off to the speciﬁc command. Any text
with these special characters is replaced, by the shell, with one or more ﬁlenamesthat match the pattern. This means that all the other Linux commands ( mv,
cp, ls, and so on) never see the special characters—they don’t do the pattern
matching, the shell does. The shell just hands them a list of ﬁlenames.
The signiﬁcance here is that this functionality is available to any and every
command, including shell scripts and Java programs that you write, with noextra effort on your part. It also means that the syntax for specifying multipleﬁles doesn’t change between commands—since the commands don’t implementthat syntax; it’s all taken care of in the shell before they ever see it. Any com-mand that can handle multiple ﬁlenames on a command line can beneﬁt fromthis shell feature.
If you’re familiar with MS-DOS commands, consider the way pattern
matching works (or doesn’t work) there. The limited pattern matching youhave available for a dir command in MS-DOS doesn’t work with other com-
mands—unless the programmer who wrote that command also implementedthe same pattern matching feature.
What are the other special characters for pattern matching with ﬁlenames?
Two other constructs worth knowing are the question mark and the squarebrackets. The “
?” will match any single  character.
The [...]  construct is a bit more complicated. In its simplest form, it
matches any of the characters inside; for example, [abc]  matches any of a or
b or c. So Version[123].java  would match a ﬁle called Version2.java
but not those called Version12.java  or VersionC.java . The pattern
Version*.java  would match all of those. The pattern Version?.java  would
match all except Version12.java , since it has two characters where the ?
matches only one.
The brackets can also match a range of characters, as in [a-z]  or [0-9] .
If the ﬁrst character inside the brackets is a “ ^” or a “!”, then (think “not”) the
meaning is reversed, and it will match anything but those characters. So
Version[^0-9].java  will match VersionC.java  but not Version1.java .
How would you match a “ -”, without it being taken to mean a range? Put it
ﬁrst inside the brackets. How would you match a “ ^” or “!” without it being
understood as the “not”? Don’t  put it ﬁrst.
Some sequences are so common that a shorthand syntax is included. Some
other sequences are not sequential characters and are not easily expressed as arange, so a shorthand is included for those, too. The syntax for these specialChapter 1 An Embarrassment of Riches: The Linux Environment 14
sequences is [:name:] where name  is one of: alnum , alpha , ascii , blank ,
cntrl , digit , graph , lower , print , punct , space , upper , xdigit . The
phrase [:alpha:]  matches any alphabetic character. The phrase [:punct:]
matches any punctuation character. We think you got the idea.
Escape at Last 1.3.6.1
Of course there are always times when you want the special character to be just
that character, without its special meaning to the shell. In that case you needto escape  the special meaning, either by preceding it with a backslash or by en-
closing the expression in single quotes. The commands 
rm Account\$1.class
or rm 'Account$1.class'  would remove the ﬁle even though it has a dollar
sign in its name (which would normally be interpreted by the shell as a vari-able). Any character sequence in single quotes is left alone by the shell; no spe-cial substitutions are done. Double quotes still do some substitutions insidethem, such as shell variable substitution, so if you want literal values, use thesingle quotes.
TIP
As a general rule, if you are typing a ﬁlename which contains something other
than alphanumeric characters, underscores, or periods, you probably want toenclose it in single quotes, to avoid any special shell meaning.
File Contents 1.3.7
Let’s look at a directory of ﬁles. How do you know what’s there? We can start
with an ls to list the names:
$ ls
ReadMe.txt   Shift.java  dispColrs  moresrcShift.class  anIcon.gif  jam.jar    moresrc.zip$
That lists them alphabetically, top to bottom, then left to right, arranged
so as to make the most use of the space while keeping the list in columns.(There are options for other orderings, single column, and so on.)
An 
ls without options only tells us the names, and we can make some
guesses based on those names (for example, which ﬁle is Java source, and which15 1.3 Basic Linux Concepts and Commands
is a compiled class ﬁle). The long listing ls -l  will tell us more: permissions,
links, owner, group, size (in bytes), and the date of last modiﬁcation.
$ ls -l
total 2414-rw-r--r--    1 albing   users         132 Jan 22 07:53 ReadMe.txt-rw-r--r--    1 albing   users         637 Jan 22 07:52 Shift.class-rw-r--r--    1 albing   users         336 Jan 22 07:55 Shift.java-rw-r--r--    1 albing   users        1374 Jan 22 07:58 anIcon.gif-rw-r--r--    1 albing   users        8564 Jan 22 07:59 dispColrs-rw-r--r--    1 albing   users        1943 Jan 22 08:02 jam.jardrwxr-xr-x    2 albing   users          48 Jan 22 07:52 moresrc-rw-r--r--    1 albing   users     2435522 Jan 22 07:56 moresrc.zip$
While ls is only looking at the “outside” of ﬁles,5 there is a command that
looks at the “inside,” the data itself, and based on that, tries to tell you whatkind of ﬁle it found. The command is called ﬁle, and it takes as arguments a
list of ﬁles, so you can give it the name of a single ﬁle or you can give it a wholelong list of ﬁles.
NOTE
Remember what was said about pattern matching in the shell: we can let the
shell construct that list of ﬁles for us. We can give file  the list of all the ﬁles
in our current directory by using the “ *” on the command line so that the shell
does the work of expanding it to the names of all the ﬁles in our directory (sinceany ﬁlename will match the star pattern).
$ file *
ReadMe.txt:  ASCII textShift.class: compiled Java class data, version 45.3Shift.java:  ASCII Java program textanIcon.gif:  GIF image data, version 89a, 26 x 26,dispColrs:   PNG image data, 565 x 465, 8-bit/color RGB, non-interlacedjam.jar:     Zip archive data, at least v2.0 to extractmoresrc:     directorymoresrc.zip: Zip archive data, at least v1.0 to extract$
5. Technically, ls (without arguments) need only read the directory, whereas ls -l  looks at
the contents of the inode in order to get all the other information (permissions, size, and soon), but it doesn’t look at the data blocks of the ﬁle.Chapter 1 An Embarrassment of Riches: The Linux Environment 16
The ﬁle looks at the ﬁrst several hundred bytes of the ﬁle and does a statis-
tical analysis of the types of characters that it ﬁnds there, along with other spe-cial information it uses about the formats of certain ﬁles.
Three things to note with this output from ﬁle. First, notice that
dispColrs  was (correctly) identiﬁed as a PNG ﬁle, even without the .png
sufﬁx that it would normally have. That was done deliberately to show you that
the type of ﬁle is based not just on the name but on the actual contents ofthe ﬁle.
Second, notice that the 
.jar  ﬁle is identiﬁed as a ZIP archive. They really
do use a identical internal format.
Thirdly, ﬁle is not foolproof. It’s possible to have perfectly valid, compil-
able Java ﬁles that ﬁle thinks are C++ source, or even just English text. Still,
it’s a great ﬁrst guess when you need to ﬁgure out what’s in a directory.
Now let’s look at a ﬁle. This simplest way to display its contents is to
use cat.
$ cat Shift.java
import java.io.*;import java.net.*;/** * The Shift object */public classShift{  private int val;
  public Shift() { }  // ... and so on} // class Shift
When a ﬁle is longer than a few lines you may want to use more  or less
to look at the ﬁle.6 These programs provide a screen’s worth of data, then pause
6. Like any open marketplace, the marketplace of ideas and open source software has its “me-
too” products. Someone thought they could do even better than more , so they wrote a new,
improved and largely upward compatible command. They named it less, on the minimalist
philosophy (with apologies to Dave Barry: “I am not making this up”) that “less is more.”Nowadays, the more  is rather passe. The less command has more features and has largely
replaced it. In fact, on many Linux distributions, more  is a link to less. In the name of full17 1.3 Basic Linux Concepts and Commands
for your input. You can press the space bar to get the next screen’s worth of
output. You can type a slash, then a string, and it will search forward for thatstring. If you have gone farther forward in the ﬁle than you wanted, press “
b”
to go backwards.
To ﬁnd out more about the many, many commands available, press ?
(the question mark) while it’s running.
Typical uses for these commands are:
• To view one or more ﬁles, for example more *.java , where you can type
:n to skip to the next ﬁle.
• To page through long output from a previous pipe of commands, for ex-
ample, $ grep Account *.java | more , which will search (see more
on grep below) for the string Account  in all of the ﬁles whose names end
in .java  and print out each line that is found—and that output will be
paginated by more .
If you need only to check the top few lines of a ﬁle, use head . You can
choose how many lines from the front of the ﬁle to see with a simple parameter.The command 
head -7  will write out the ﬁrst seven lines, then exit.
If your interest is the last few lines of a ﬁle, use tail. You can choose how
many lines from the end of the ﬁle to see; the command tail -7  will write
out the last seven lines of the ﬁle. But tail has another interesting parameter,
-f. Though tail normally prints its lines and then, having reached the end of
ﬁle, it quits, the -f option tells tail to wait after it prints the last few lines and
then try again.7 If some other program is writing to this ﬁle, then tail will, on
its next read, ﬁnd more data and print it out. It’s a great way to watch a log ﬁle,for example, 
tail -f /tmp/server.log .
In this mode, tail won’t end when it reaches the end of ﬁle, so when you
want it to stop you’ll have to manually interrupt it with a ^C (Control-C— i.e.,
hold down the Control key and press the C key).
disclosure, there is also a paging program called pg, the precursor to more , but we’ll say no
more about that.
7. The less command has the same feature. If you press “F” while looking at a ﬁle, it goes into
an identical mode to the tail -f  command. As is often the case in the wacky world of Linux,
there is more than one way to do it.Chapter 1 An Embarrassment of Riches: The Linux Environment 18
The grep Command 1.3.8
No discussion of Linux commands would be complete without mentioning
grep. Grep, an acronym for “generalized regular expression processor,” is a tool
for searching through the contents of a ﬁle. It searches not just for ﬁxedsequences of characters, but can also handle regular expressions.
In its simplest form, 
grep myClass *.java  will search for and display
all lines from the speciﬁed ﬁles that contain the string myClass . (Recall that
the *.java  expansion is done by the shell, listing all the ﬁles that end with
.java .)
The ﬁrst parameter to grep, myClass  in the example above, is the string
that you want to search for. But the ﬁrst nonoption parameter to grep is con-
sidered a regular expression meaning that it can contain special characters forpattern matching to make for more powerful searches (see Section 2.2.3). Someof the most common option parameters for grep are listed in Table 1.2.
Here’s a quick example:
grep println *.java | grep -v System.out
It will look for every occurrence of println  but then exclude those that contain
System.out . Be aware that while it will exclude lines like
System.out.println(msg);
it will also exclude lines like this:
file.println(msg);    // I'm not using System.out
It is, after all, just doing string searches.
Table 1.2 Options for grep
Explanation Option
Ignore upper/lower case differences in its matching. -i
Only list the ﬁlename, not the actual line that matched. -l
Show the line number where the match was found. -n
Reverses the meaning of the search—shows every line that does not  match the
pattern.-v19 1.3 Basic Linux Concepts and Commands
The ﬁnd Command 1.3.9
If someone compiled a list of the top 10 most useful Linux utilities, ﬁnd would
most likely be near the top of the list. But it would also make the top 10 mostconfusing. Its syntax is very unlike other Linux utilities. It consists ofpredicates —logical expressions that cause actions and have true/false values that
determine if the rest of the expression is executed. Confused? If you haven’tused ﬁnd before you probably are. We’ll try to shed a little light by showing a
few examples.
find . -name '*frag*' -print
This command looks for a ﬁle whose name contains frag . It starts looking in
the current directory and descends into all subdirectories in its search.
find /over/there . /tmp/here -name '*frag*.java' -print
This command looks for a ﬁle that has frag  in its name and ends with .java .
It searches for this ﬁle starting in three different directories—the currentdirectory (“
.”), /over/there , and /tmp/here .
find . -name 'My[A-Z]*.java' -exec ls -l '{}' \;
Starting in the current directory, this command searches for a ﬁle whose namebegins with 
My followed by an uppercase alphabetic character followed by
anything else, ending with .java . When it ﬁnds such a ﬁle, it will execute a
command—in this case, the ls command with the -l option. The braces are
replaced with the name of the ﬁle that is found; the “ \;” indicates to ﬁnd the
end of the command.
The -name  is called a predicate; it takes a regular expression as an argu-
ment. Any ﬁle that matches that regular expression pattern is considered true ,
so control passes on to the next predicate—which in the ﬁrst example is simply
-print  that prints the ﬁlename (to standard out) and is always true  (but since
no other predicate follows it in this example, it doesn’t matter). Since only thenames that match the regular expression cause the 
-name  predicate to be true ,
only those names will get printed.
There are other predicates besides -name . You can get an entire list by
typing man find at a command prompt, but Table 1.3 lists a few gems, to give
you a taste of what ﬁnd can do.
Let’s look at an example to see how they ﬁt together:Chapter 1 An Embarrassment of Riches: The Linux Environment 20
Table 1.3 Some ﬁnd predicates
Explanation Option
Is true  if the ﬁle is a directory. -type d
Is true  if the ﬁle is a plain ﬁle (e.g., not a directory). -type f
Is true  if the ﬁle is less than ﬁve days old, that is, has been
modiﬁed within the last ﬁve days. A +5 would mean older than
ﬁve days and a 5 with no sign means exactly ﬁve days.-mtime -5
Is true  if the ﬁle was accessed within the last ﬁve days. The +
and - mean greater and less than the speciﬁed time, as in the
previous example.-atime -5
Is true  if the ﬁle is newer than the ﬁle myEx.class . -newer myEx.class
Is true  if the ﬁle is greater than 24K. The sufﬁx c would mean
bytes or characters (since b stands for 512-byte blocks in this
context). The + and - mean greater and less than the speciﬁed
size, as in the other examples.-size +24k
$ find . -name '*.java' -mtime +90 -atime +30 -print
./MyExample.java./old/sample/MyPrev.java$
This command printed out the names of two ﬁles that end with .java  found
beneath the current directory. These ﬁles hadn’t been modiﬁed in the last90 days nor accessed within the last 30 days. The next thing you might wantto do is to run this command again adding something at the end to removethese old ﬁles.
$ find . -name '*.java' -mtime +90 -atime +30 -print -exec rm '{}' \;
./MyExample.java./old/sample/MyPrev.java$
The Shell Revisited 1.3.10
Most Linux shells—the command interpreters—can be considered program-
ming languages in their own right. That is, they have variables and controlstructures—
if statements, for loops, and so on. While the syntax can be subtly
different between shells, the basic constructs are all there.21 1.3 Basic Linux Concepts and Commands
Entire books can be—and have been—written on shell programming.
(It’s one of our favorite subjects to teach.) Programs written in the shell lan-guage are often called shell scripts . Such scripts can be powerful yet easy to write
(once you are familiar with the syntax) and can make you very productive indealing with all those little housekeeping tasks that accompany programdevelopment. All you need to do (dangerous words, no?) is to put commandsin a text ﬁle and give the ﬁle execute permissions. But that’s a subject foranother day.
Some elements of shell scripting, however, are useful even if you never
create a single shell script. Of these, perhaps the most important to know(especially for Java programmers) is how to deal with shell variables.
NOTE
We’ll be describing the syntax for bash , the default shell on most Linux
distributions.  The syntax will differ for other shells, but the concepts are largelythe same.
Any string of alphanumeric or underscore characters can be used as the
name of a variable. By convention shell variables typically use uppercasenames—but that is only convention (although it will hold true for most ifnot all of our examples, too). Since commands in Linux are almost alwayslowercase, the use of uppercase for shell variables helps them to stand out.
Set the value of a shell variable with the familiar method—the equal sign:
$ FILE=/tmp/abc.out
$
This has assigned the variable FILE  the value /tmp/abc.out . But to make
use of the value that is now in FILE , the shell uses syntax that might not be
familiar to you: The name must be preceded with a “ $”.
Shell variables can be passed on to other environments if they are exported ,
but they can never be passed back up. To set a shell variable for use by yourcurrent shell and every subsequent subshell, export the variable:
$ export FILE
$Chapter 1 An Embarrassment of Riches: The Linux Environment 22
You can combine the assignment of a value with the exporting into one
step. Since repeating the export doesn’t hurt, you will often see shell scripts usethe 
export  command every time they do an assignment, as if it were part of
the assignment syntax—but you know better.
$ export FILE="/tmp/way.out"
$
NOTE
The shell uses the dollar sign to distinguish between the variable name and just
text of the same letters. Consider the following example:
$ echo first > FILE
$ echo second  > TEXT$ FILE=TEXT$ cat FILEfirst$
The cat command will dump the contents of the ﬁle named FILE  to the
screen—and you should see first . But how would you tell the shell that you
want to see the contents of the ﬁle whose name you have put in the shellvariable
FILE ? For that you need the “ $”:
$ cat $FILE
second$
This is a contrived example, but the point is that shell syntax supports ar-
bitrary strings of characters in the command line—some of them are ﬁlenames,others are just characters that you want to pass to a program. It needs a wayto distinguish those from shell variables. It doesn’t have that problem on theassignment because the “
=” provides the needed clue. To say it in computer
science terms, the “ $” syntax provides the R-value  of the variable. (Not the
insulation R-value, but what you expect when a variable is used on the Right-hand-side of an assignment operator, as opposed to the L-value  used on the
Left-hand-side of an assignment operator.)
There are several shell variables that are already exported because they are
used by the shell and other programs. You may need or want to set them tocustomize your environment. Since they are already exported, you won’t needto use the 
export  command and can just assign a value, but it doesn’t hurt.23 1.3 Basic Linux Concepts and Commands
The most important shell variable to know is PATH . It deﬁnes the directo-
ries in the ﬁlesystem where the shell will look for programs to execute. Whenyou type a command like ls or javac  the shell will look in all of the directories
speciﬁed in the 
PATH  variable, in the order speciﬁed, until it ﬁnds the
executable.
$ echo $PATH
/usr/local/bin:/usr/bin:/usr/X11R6/bin:/bin:.$
The PATH  shown in the example has ﬁve directories, separated by colons
(“:”). (Note the ﬁfth one, the “ .”; it says to look in the current directory.)
Where do you suppose it will ﬁnd cat? You can look for it yourself by search-
ing in each directory speciﬁed in PATH . Or you can use the which  command:
$ which cat
/bin/cat$
Some commands (like exit ) don’t show up, since they are built into the
shell. Others may be aliases—but that opens a whole other topic that we aren’tcovering here. Just remember that each directory in the 
PATH  variable is exam-
ined for the executable you want to run. If you get a command not found  error,
the command may be there, it just may not be on your PATH .
To look at it the other way around: If you want to install a command so
that you can execute it from the command line, you can either always type itsfull pathname, or (a more user-friendly choice) you can set your 
PATH  variable
to include the location of the new command’s executable.
So where and how do you set PATH ? Whenever a shell is started up, it reads
some initialization ﬁles. These are shell scripts that are read and executed as ifthey were typed by the user—that is, not in a subshell. Among other actions,they often set values for variables like 
PATH . If you are using bash , look at
.bashrc  in your home directory.
Shell scripts are just shell commands stored in a ﬁle so that you don’t need
to type the same commands and options over and over. There are two ways torun a shell script. The easiest, often used when testing the script, is
$ sh myscriptChapter 1 An Embarrassment of Riches: The Linux Environment 24
where myscript is the name of the ﬁle in which you have put your commands.
(See Chapter 2 for more on how to do that.) Once you’ve got a script runningthe way you’d like, you might want to make its invocation as seamless as anyother command. To do that, change its permissions to include the executionpermission and then, if the ﬁle is located in a place that your 
PATH  variable
knows about, it will run as a command. Here’s an example:
$ chmod a+rx myscript
$ mv myscript ${HOME}/bin$ myscript... (script runs)$
The ﬁle was put into the bin directory off of the home directory. That’s
a common place to put homebrew commands. Just be sure that $HOME/bin  is
in your PATH , or edit .bashrc  and add it.
If you want to parameterize your shell, you’ll want to use the variables $1,
$2, and so on which are given the ﬁrst, second, and so on parameters on the
command line that you used to invoke your script. If you type myscript
Account.java  then $1 will have the value Account.java  for that invocation
of the script.
We don’t have the space to go into all that we’d like to about shell pro-
gramming, but let us leave you with a simple example that can show you someof its power. Used in shell scripts, 
for loops can take a lot of drudgery out of
ﬁle maintenance. Here’s a simple but real example.
Imagine that your project has a naming convention that all Java ﬁles asso-
ciated with the user interface on your project will begin with the letters “UI”.Now suppose your boss decides to change that convention to “GUI” but you’vealready created 200 or more ﬁles using the old naming convention. Shell scriptto the rescue:
for i in UI*.java
do  new="G${i}"  echo $i ' ==> ' $new  mv $i $newdone
You could just type those commands from the command line—that’s the
nature of shell syntax. But putting them into a ﬁle lets you test out the scriptwithout having to type it over and over, and keeps the correct syntax once25 1.3 Basic Linux Concepts and Commands
you’ve got it debugged. Assuming we put those commands into a ﬁle called
myscript , here’s a sample run:
$ myscript
UI_Button.java  ==>  GUI_Button.javaUI_Plovar.java  ==>  GUI_Plovar.javaUI_Screen.java  ==>  GUI_Screen.javaUI_Tofal.java  ==>  GUI_Tofal.javaUI_Unsov.java  ==>  GUI_Unsov.java...$
Imagine having to rename 200 ﬁles. Now imagine having to do that with
a point-and-click interface. It could take you all morning. With our shell script,it will be done in seconds.
We can’t hope to cover all that we’d like to about shell scripting. Perhaps
we have been able to whet your appetite. There are lots of books on the subjectof shell programming. We’ve listed a few at the end of this chapter.
The tar and zip Commands 1.3.11
The tar and zip commands allow you to pack data into an archive or extract it
back. They provide lossless data compression (unlike some image compressionalgorithms) so that you get back out exactly what you put in, but it can takeup less space when archived.
8 Therefore tar and zip are often used for data
backup, archival, and network transmission.
There are three basic actions that you can take with tar, and you can
specify which action you want with a single letter9 in the arguments on the
command line. You can either
8. Well, technically, tar doesn’t compress the data in the ﬁle, but it does provide a certain
amount of “compression” by cutting off the tail ends of blocks of data; for example, a ﬁle of37 bytes in its own ﬁle takes up 4K of disk space since disk blocks are allocated in “chunks”(not the technical term). When you tar together a whole bunch of ﬁles, those extra tail-end
empty bytes are not used (except in the ﬁnal block of the TAR ﬁle). So, for example, 10 ﬁlesof 400 bytes could be packed into a single 4K ﬁle, instead of the 40K bytes they would occupyon the ﬁlesystem. So, while tar won’t compress the data inside the ﬁle (and thus is quite
assuredly “lossless”) it does result in a smaller ﬁle.
9. Linux option strings always start with a “
-”, right? Yes, except for tar. It seems there is always
an exception to every rule. The newer versions of tar allow the leading minus sign, but can also
work without it, for historical compatibility reasons. Early versions of UNIX only had singleChapter 1 An Embarrassment of Riches: The Linux Environment 26
•c: Create an archive.
•x: Extract from an archive.
•t: Get a table of contents.
In addition, you’ll want to know these options:
•f: The next parameter is the ﬁlename of the archive.
•v: Provide more verbose output.
Using these options, Table 1.4 shows examples of each of the basic
functions.
Now let’s do the same thing using the zipcommand (Table 1.5). There
are actually two commands here—one to compress the ﬁles into an archive(zip), and the other to reverse the process ( unzip ).
Table 1.4 Examples of the tar command
Explanation Command
Gives a table of contents, in long (or verbose) form.
Without the v, all you get is the ﬁlenames; with the v
you get additional information similar in format to the
ls -l  command.tar tvf packedup.tar
Extracts all the ﬁles from the TAR ﬁle, creating themaccording to their speciﬁed pathname, assuming youruser ID and ﬁle permissions allow it. Remove the 
v
option if you don’t want to see each ﬁlename as the ﬁleis extracted.tar xvf packedup.tar
Creates a TAR archive named packedup.tar  from
the mydir  directory and its contents. Remove the v
option if you don’t want to see each ﬁlename as the ﬁleis added to the archive.tar cvf packedup.tar mydir
letter options. Newer POSIX versions of UNIX and the GNU tools, which means all ﬂavorsof Linux, also support longer full-word options preﬁxed with a double minus, as in 
--extract
instead of x or -x.27 1.3 Basic Linux Concepts and Commands
Table 1.5 Examples of the zip and unzip  commands
Explanation Command
Gives a table of contents of the archive with some extra frill
around the edges, like a count of the ﬁles in the archive.unzip -l packedup.zip
Extracts all the ﬁles from the ZIP ﬁle, creating themaccording to their speciﬁed pathname, assuming your userID and ﬁle permissions allow it. Add the quiet option with
-q if you would like unzip  not to list each ﬁle as it unzips it.unzip packedup.zip
Creates a ZIP archive named packedup.zip  from the
mydir  directory and its contents. The -r tells zip to
recursively descend into all the subdirectories, theirsubdirectories, and so on; otherwise, zip will just take the
ﬁles at the ﬁrst layer and go no deeper.zip -r packedup mydir
TIP
Since TAR and ZIP ﬁles can contain absolute as well as relative pathnames, it
is a good idea to look at their contents (e.g., tar tvf file ) before unpacking
them, so that you know what is going to be written where.
There are many, many more options for tar and zip that we are not cover-
ing here, but these are the most common in our experience, and they will giveyou a good start.
The tar and zip commands are also worth knowing about by a Java devel-
oper because of their relationship to JAR ﬁles . If you are working with Java you
will soon run across the notion of a Java ARchive ﬁle, or JAR ﬁle. They arerecognizable by name, ending in 
.jar . Certain Java tools are built to under-
stand the internal format of JAR ﬁles. For Enterprise Java (J2EE) there aresimilar archives known as WAR ﬁles and EAR ﬁles. The command syntax fordealing with the jar command that builds these archives is very similar to the
basic commands of tar. The internal format of a jar is the same as a ZIP ﬁle.
In fact, most places where you can use a JAR ﬁle you can use a ZIP ﬁle as well.(You will see more about this when we discuss the standard Java tools inSection 5.11.)Chapter 1 An Embarrassment of Riches: The Linux Environment 28
TIP
Here’s one more handy example we know you’ll use:
find . -name '*.java' -print | zip allmysource -@
This command starts in the current directory (“ .”) ﬁnding every ﬁle that ends in
.java  and gives their names to zip which will read them from standard in in-
stead of its argument list (told to do so with the -@ argument) and zip them all
into an archive named allmysource.zip . To put it simply, it will zip up all
your Java source ﬁles from the current directory on down.
The man Command 1.3.12
Primitive but handy, the man command (short for manual ) was the early
UNIX online manual. While we’ve come to expect (and ignore) online help,the idea of online manuals was rather revolutionary in the early days of UNIX.In contrast to walls of printed documentation, UNIX provided terse butdeﬁnitive descriptions of its various commands. When they are done well, thesedescriptions are an invaluable handy reference. They are not the best way tolearn about a command, but they can be a great guide to using the command’soptions correctly.
The format is simply 
man followed by the name of the command about
which you want information. So man man  will tell you about the man
command itself.
The most useful option to man is the -k option. It will do a keyword
search in the titles of all the manpages looking for the keyword that you give.Try typing 
man -k java  to see what commands are available. The (1) means
that it’s a user command—something that you can type from the shell prompt,as opposed to 
(2) which is a system call or (3) which is a C library call. These
numbers refer to the original UNIX documentation volumes (volume one wasshell commands and so on), and it all ﬁt into a single three ring binder.
TIP
One other way to ﬁnd out something about a command, if you know the com-
mand name already, is to ask the command itself for help. Most commandshave either a 
-? or --help  option. Try --help  ﬁrst. If you need to type -?
either put it in single quotes or type it with a backslash before the question mark,as in 
-\?, since the ? is a pattern-matching character to the shell.29 1.3 Basic Linux Concepts and Commands
There are other help systems available, such as info and some GUI-based
ones. But man provides some of the quickest and most terse help when you
need to check the syntax of a command or ﬁnd out if there is an option thatdoes what you need.
REVIEW 1.4
We’ve looked at commands that will show you where ﬁles are in your directorystructure, show ﬁles’ permissions and sizes, change the permissions, show youwhat is in a ﬁle, look for ﬁles by searching for strings, and look for ﬁles basedon names or other properties.
Even so, we’ve given only the briefest coverage to only a few of the scores
of Linux commands worth knowing. Tops among these is the shell, bash  in
our case. Whole books have been written on this subject, and you would dowell to have one at hand.
WHATYOU STILL DON’T KNOW 1.5
The shell is a powerful language in its own right. While you think of it mostlyas a command interpreter used for running other commands, it is, in fact, alanguage, complete with variables, logic and looping constructs. We are notsuggesting that you write your application in shell scripts, but you will ﬁnd ituseful for automating many repetitive tasks. There is so much that can be donewith shell scripts that we encourage you to read more about this and to talkwith other Linux users.
Linux is replete with so many different commands. Some are powerful
languages like awk and perl, others are simple handy utilities like head , tail,
sort, tr, and diff. There are hundreds of other commands that we don’t even
have time to mention.
RESOURCES 1.6
• Cameron Newham and Bill Rosenblatt, Learning the Bash Shell , O’Reilly
Associates, ISBN 1565923472.
• Ellie Quigley, Linux Shells by Example , 4th ed., Prentice Hall PTR, ISBN
013147572X.Chapter 1 An Embarrassment of Riches: The Linux Environment 30
• Rafeeq Rehman and Christopher Paul, The Linux Development Platform ,
Prentice Hall PTR.
• Mark G. Sobell, A Practical Guide to Linux , Addison-Wesley, ISBN
0201895498.
• Mark G. Sobell, A Practical Guide to Red Hat Linux , Addison-Wesley,
ISBN 0201703130.31 1.6 Resources

Here the joys of creating and changing text ﬁles are introduced, the rudiments
of the venerable vi editor are presented, and the power of text is exalted.
WHATYOUWILL LEARN 2.1
Readers are encouraged, but not required, to plumb the depths of vi. Other
text editor choices are brieﬂy covered.
Remember our recommendation: If you learn only one shell, learn bash .
If you learn only one editor, learn vi. Some basic shell scripting will go a long
way to eliminating mundane, repetitive tasks. Some basic vi editing will let you
do things much faster than you can with GUI editors.
33Chapter 2
An Embarrassment of Riches:
Editors
EYE TO  EYE WITH VI 2.2
Java programs consist of Java classes. Java classes are text ﬁles with Java state-
ments and expressions. In order to write a Java program, then, you need to beable to enter text into a ﬁle. Sounds simple enough.
With Linux and its GNU tools, you have an amazing array of choices for
how to do this. Some are GUI tools not unlike simple word processors. Others,like vi and Emacs, predate GUI tools, but provide much the same capability
without the luxury (or annoyance) of a mouse or menus.
1
The editor named vi (pronounced as you would spell it: “vee-eye”) is one
of the most enduring tools in Linux. Its popularity comes from a combinationof power and ubiquity—you can ﬁnd it on virtually every release of UNIX andLinux since 1985. But it is a powerful editor that can do a lot with only a fewkeystrokes.
There are actually several variants of vi from which to choose. Each is
someone’s attempt to go one better on vi, but all retain the same basic syntax
and what you learn here will work equally well on any of the vi clones. You can
choose among
•elvis
•nvi
•vim
Start up vi by typing the command name at a shell prompt, followed by
the name of the ﬁle(s) that you want to edit:
$ vi Account.java
Keep in mind that vi was developed in the days of character-only video
screens. Keyboards didn’t always have arrow keys or other special characters,which have since been (largely) standardized by the advent of the IBM PC. Inthat situation, the authors of vihad only the alphabetic characters to use for all
1. We realize that vi is famous for being difﬁcult to learn and nonintuitive. The UI design of
vi dates back to earliest cursor-addressable display terminals. User interface design has come a
long way since then. The vi UI does indeed show its age. But the program refuses to die. Why?
Because while simple GUI editors make the easy stuff easy, vi makes the hard stuff easy. You
can fall back on pico or kate or other GUI editors if you want, but bear with us. Mastering vi
really does pay off.Chapter 2 An Embarrassment of Riches: Editors 34
of their commands . . . and did they make good use of those keys! Virtually
every letter is used, both lower and upper case, to mean something unique invi. But don’t be put off by the large number of commands to learn; they ﬁt
some patterns that will make it easy for you to become proﬁcient in a shorttime by learning a few commands and applying the patterns.
NOTE
If you really can’t bear to part with your mouse and menus, try gvim . We haven’t
used it, but we hear that it has support for mice to help with cut and paste andthe like. After you learn vi and get a little practice, though, you may ﬁnd that
you’re never reaching for your mouse any more when you edit.
There are three modes to vi: the regular vi mode , some extended
commands in the ex mode , and the input mode .
The simplest mode is the input mode. In input mode, every character you
type becomes part of the text of the ﬁle. It’s how you enter the bulk of the textfor your Java programs. But vi doesn’t start up in input mode; you have to “get
into” input mode, and then get back out. Once out, you can use other vi
commands to save the text and exit vi. More about those in a bit.
NOTE
Get out of input mode by pressing the Escape key. You can press it more than
once, too, just to be sure that you are no longer in input mode. If you are nolonger in input mode and you press escape, it will beep at you—with an audibleor visual notiﬁcation, depending on how your terminal window is set to respond.
In both vim and elvis (two popular vi clones) there is a status line at the
bottom of the window that will show if you are in input mode. In vim, look
in the lower left and elvis, the lower right. When in input mode, you will see
a status word displayed like insert  or replace .
In the vi mode, the default mode that you start in, all the keystrokes are
interpreted as commands to the editor. They are not displayed as characters. So
when we describe a command, such as dt;, you can type those three characters
but will not see those characters on your screen. Instead you will see some ac-tion taken by vi—in this case it will delete text from your cursor up to the ﬁrst
semicolon on that line, if any (otherwise it will just beep).35 2.2 Eye to Eye with vi
There are several ways to get into input mode, depending on where you
want to do the insert. When the ﬁle you’re editing is completely empty, allthese commands are equivalent, but for nonempty ﬁles, each command willbegin input mode in a different place in the ﬁle:
•
i inserts before the cursor.
•I inserts at the beginning of the line.
•a appends after the cursor.
•A appends at the end of the line.
•o “opens” a line for input after the line on which the cursor sits.
•O “opens” a line for input before the line on which the cursor sits.
Remember that this is character-based editing, before the days of mice and
I-bars. So there is no meta-character for the cursor to show its position between
two characters in the ﬁle. Instead, the cursor sits on top of a character, and thusinserts or appends will happen before or after that character.
Reminder: Get out of input mode by pressing the Escape key.Next, let’s move the cursor around. The simplest way to do that is one
character at a time. Using the (lowercase) 
h, j, k, and l keys—notice that
they’re all in a row on QWERTY keyboards—you have the “arrow” keys forleft, down, up, and right. One of the common enhancements for vi clones is
to include support for the arrow keys on standard PC keyboards. Even so, theconvenience of having the motion keys on the “home row” for touch typistscan be a great speedup.
•
h moves left one character.
•j moves down one line.
•k moves up one line.
•l moves right one character; same as a space.
Often, character- or line-at-a-time is too slow. Move to the beginning of
the line that you are on with 0 (zero), or to the end of the line with $. Move
to the top and bottom of the window with H (think “High”) and L (think
“Low”). So ﬁrst type L then hold down j. To move back in a ﬁle, ﬁrst type H
then hold down k. That gets the display moving down or up respectively.
•H (“high”) moves to the top line of the window.
•M (“middle”) moves to the middle line of the window.Chapter 2 An Embarrassment of Riches: Editors 36
•L (“low”) moves to the bottom line of the window.
•0 moves to the beginning of the line.
•$ moves to the end of the line.
This may still be too slow for you, especially if you are working your way
through a large ﬁle. If you want to page up and down half a page at a time, try
^U and ^D (think “up” and “down”). To move a full page at each keystroke, try
^F and ^B (think “forward” and “back”).
This may still take a while, especially if you want to get to the absolute
beginning or end of the ﬁle. For those locations, type a three-character se-quence, starting with a colon—which will jump your cursor to the status lineof the window—then type either zero or the dollar sign, then press the Enterkey. For example, 
:$.
So what’s with the colon? Just when you thought you were getting the
hang of the vi keystrokes, this odd pattern appears. It’s called ex mode , and has
to do with the history of vi being built atop the ex editor. Typing the colon
got you back giving commands to ex, without the fancier screen-based
GUI. (Even editors can have command lines.) There are many powerfulsearch/replace commands that you can do from the ex command line; more onthat later. For now, though, remember that you can type the colon, then a linenumber, then the Enter key and vi will position the cursor (and thus what is
displayed on the screen) to that line number. The 
0 and $ are just special cases
of that more generic way to position your place in the ﬁle.
Back to our positioning in the ﬁle. Recall that h, j, k, and l will move you
one unit (char or line) at a time. Now enhance that motion by typing a numberﬁrst, then the 
h, j, k, or l. So to move ﬁve lines up type 5k (just be sure you
use a lowercase letter). You can move way down in a ﬁle by typing somethinglike 
2000j which will move down 2,000 lines. If the ﬁle doesn’t have that many
lines, you will ﬁnd your cursor at the end of the ﬁle.
The point here is that almost any vi command can be preceded by a count,
to repeat it that many times.
A few more navigation tips. Another useful way to move through text is a
word at a time. You can move your cursor forward by a word with the letter w
(for “word”). You can move “back” with the letter b. You can move ﬁve words
at a time with 5w or 5b. See?
The deﬁnition of “word” to vi has to do with alphanumerics separated by
whitespace, but also by certain punctuation characters. So to vi, the following
Java code consists of how many words? Seven.37 2.2 Eye to Eye with vi
myArraylist.doSomething(magical); // cool
From the beginning of the line, you’d need to type w seven times (or know
to type 7w—but how could you guess seven?) To help out, vi uses the upper-
case W to skip words deﬁned not by punctuation but solely by white space.
Think of it as “bigger” words. And of course B will go “back” by these bigger
words. So on our example line, a single W will get you to the start of the
comment.
Be sure that you’re not just reading these descriptions. Run vi on any ﬁle
that you can ﬁnd and practice navigating by lines or words or screens. Onceyou get the hang of it, it can be so much faster than reaching for the mouse andtrying to maneuver the cursor into just the right spot between letters.
Sometimes you can see where you want to go based on the characters of
text in the document. See that “x”? That’s a relatively rare character on any lineof text. If you see a character, your cursor can “ﬁnd” it if you type 
f and then
the character you are looking for. So fx would search forward on the line for
an “x”. And Fx would search backward from the cursor. To repeat the search,
just type a semicolon (“ ;”).
Searching for a string is another good way to move your way through a
ﬁle. To search forward, type a slash ( /), then the characters for which you want
to search, and end the string with a second slash and then Enter:2
/myArrayList/
To search backwards (towards the ﬁrst line of the ﬁle) use the question
mark rather than the slash to bracket your search string. In either case, to jumpto the next occurrence, type 
n, or 27n to jump to the 27th occurrence. Whether
you are searching forward ( /) or backward ( ?), using uppercase N will reverse
the direction as it searches for the next occurrence. So, you can search forwardwith 
/myVar/  and then press n for each next occurrence forward. If you go too
far, just type N to back up. Similarly, if you were going backwards looking for
an occurrence of a constructor, say something like: ?new HotClass? ; then
each n will search toward the top of the ﬁle, and each N will search toward the
end of ﬁle.
2. The second slash is optional in most vi implementations, but used for consistency with the
same command in ex mode which has optional sufﬁx characters.Chapter 2 An Embarrassment of Riches: Editors 38
In both cases, when you hit the top or bottom of the ﬁle, vi will wrap and
keep searching from the opposite end, though a warning message will appearin the status bar.
OK, enough navigation. Let’s start modifying text.Copy and paste operations can be done easily on whole lines. Just yank
and put the lines. You can yank a single line or several at a time (e.g., 
7y) and
then a single put ( p) will deposit a copy just after the current line (the line
where your cursor sits). If you want to put the text before, not after, the currentline, use uppercase 
P.
Go ahead. Try it on the ﬁle you’re practicing on. It’s the best way to get
a feel for what we’re describing here.
Cut and paste operations involve deleting the lines, not just copying them.
This gets us into our third and ﬁnal kind of syntax in vi, the double letter
commands. Use dd to delete a line. Try it and you will ﬁnd that the line your
cursor is on just got deleted, and the cursor now rests comfortably on the nextline. To paste that line back, use the same 
p or P that we used for to put the
lines that we had copied (a.k.a. “yanked”) above.
But why the dd? What’s with the double letters? Think of “delete” for d
and then add another letter to describe how much you want to delete— dw for
“delete word” or dW for “delete the bigger words” (see above). So why dd for a
line? We don’t know for a fact, but we suspect that it’s just for speed. You canalso follow a 
d with the h, j, k, or l of our cursor movement, and that will
delete either a character or a line in the appropriate direction.
A faster way (one keystroke, not two) to delete a single character is with
the x key. And of course 5x, or 27x, will delete multiple characters. But if
you’re deleting many characters you will probably get it done faster by deleting“words” (
dw or dW).
Another powerful way to delete text is to delete it from the cursor up to a
speciﬁc character. The sequence dt; will delete from the cursor up to (but not
including) the semicolon on the current line. If there is no semicolon, vi will
beep, and no change will be made. To delete from the cursor up to and includ-
ing the semicolon, use df;.
Everything you’ve just learned about delete is also true for change, the c
in vi. You can combine it with itself ( cc) to change a whole line. You can
combine it with w to change a word ( cw), or you can change from the cursor
up to the next semicolon ( ct;), and so on.39 2.2 Eye to Eye with vi
Change does the delete, then puts you in input mode. (Notice the re-
minder on the status line.) Remember, to get out of input mode and back intovi mode, press the Escape key.
Sometimes you’ve done too much, and you’d like to undo what you’ve
just done. Typing 
u will undo the last change that you made. But here’s a dif-
ference between the classic vi and some of the new, improved versions. In classic
vi, if you type another u, then you are telling vi to undo what it just
did—which was an undo. So the undo of an undo remakes the change that youhad originally made. But in vim, “vi improved,” typing 
u again and again will
just keep undoing previous changes. If you want to undo the undo, in vim,
you need to type :redo  and then Enter.
The vi editor has shortcuts for helping you to change the indentation of
your code. Typing two less-than signs ( <<) will shift the line to the left; typing
two greater-than signs ( >>) will shift the line to the right. Typing a number
ﬁrst and then the less-than or greater-than signs will shift that many lines atonce. But how far will they shift? The default is usually set at eight, but youcan set it to any value you want. In ex mode you can set all sorts of values andﬂags, customizing vi’s operation. The value we’re interested in here is
shiftwidth  which can be abbreviated sw. So the command would be :set
sw=4 if you want each shift to move by four characters. For more about this,
and how to make it your default, see Section 2.2.4.
Any command that you do may be worth repeating. Say, you just shifted
14 lines and you’d like to shift them further. Or you just deleted ﬁve lines, andwould like to delete ﬁve more. Well, you could just retype the command, butan easier way is just to type the period (
.) and let vi repeat it for you.
Exiting 2.2.1
There are three ways of exiting vi (ZZ, :q, :q!) that you should know. The
correct one to use depends on whether or not you want  to save the changes to
the ﬁle and on whether or not you have saved your changes.
•ZZ saves and quits in one step (three keystrokes).
•:w writes what you’ve been editing but doesn’t quit.
•:w filename  writes what you’ve been editing to a new ﬁle named
filename ; it will complain (and not write out anything) if the ﬁle
already exists.Chapter 2 An Embarrassment of Riches: Editors 40
•:7,.w! filename writes lines from line 7 up to and including the current
line to the named ﬁle, clobbering any previous contents (think of the “!”as meaning “and don’t argue with me!”).
•
:q quits, provided you’ve saved your changes (e.g., with :w).
•:q! quits without saving any changes to the ﬁle.
•:n doesn’t exit vi, but moves on to the next ﬁle if you started up with
more than one ﬁle to edit (e.g., vi Fir.java Pine.java ). When you’ve
reached the last ﬁle in the list, you need to quit—for example, with :q.
Search and Replace 2.2.2
We’ve mentioned searching for a string with / or ?, but what about replacing?
Once you’ve located a string with /, you can use cw or C or R or other such
commands to effect the change. Search for the next occurrence with n, and then
you can repeat your change (the last c, s, r, and so on) by typing the period
“.” that will repeat that last substitution, insert, and so on.
But what if you want to make 225 substitutions? Typing n.n.n.n.n.n.
would get old after a while. Here, the ex mode, like any good command line,comes to the rescue to help with repetitive tasks.
If we want to search and replace all occurrences of one string for another,
we can use the command
:1,$s/one string/another/
Almost all ex commands take an address range , that is, the lines of the ﬁle
over which they will operate. If just one line number is given, the commandwill operate on that one line. Two numbers, separated by commas, representthe start and end lines—inclusive—of the operation. The ﬁrst line is line 1, soa 0 as line number would mean “before the ﬁrst line.” The line where the cursoris currently located is just “
.” (a period). The last line of the ﬁle can be repre-
sented by the dollar sign ( $). You can even do some simple math on the
addresses—for example, .+2 meaning the second line in front of the cursor’s
current line.
TIP
There is a shortcut for the 1,$ address range. Use % to mean “all lines”—for
example, %s/one string/another/ .41 2.2 Eye to Eye with vi
Here are a few more substitution examples along with an explanation
for each.
.,$s/here/eternity/
From here to the end of the ﬁle, replace here  with eternity .
27,$-5s/lost/found/
From line 27 to the 5th line prior to the end of the ﬁle, replace lost  with
found .
s/here/now/
Replace here  with now, on the current line only.
Each line that has a match will do the substitution on only the ﬁrst occur-
rence of the string. If you want to change all occurrences on those lines, youappend a 
g (for “global” substitution) to the end of the command. Consider
this snippet of Java:
class tryout
{  int tryout;
  tryout(int startval) { // make a new tryout
    tryout = startval;  } // tryout constructor
  // a tryout-like resetting
  public void  setTryout(int toval) {    tryout = toval;  }  // willfindtryoutinhere
} // class tryout
1,$s/tryout/sample/
Works as expected except for line 5, where “tryout” appears as the
constructor name but also in the comment.
1,$s/tryout/sample/g
Works better (note the trailing g). But neither command can deal with
“Tryout” in the setTryout  method name. That’s because of the uppercase
“T”, which doesn’t match “tryout”.Chapter 2 An Embarrassment of Riches: Editors 42
1,$s/Tryout/Sample/g
Will make the substitution in that method name.
TIP
Remember to precede these commands with a colon (“ :”) to put you into ex
mode which puts your cursor on the status bar of the window.
The Joy of Regular Expressions 2.2.3
The substitution command really becomes powerful when you start using reg-
ular expressions. Our examples so far have only had plain alphanumeric charac-ters between the slashes of the substitution. But other characters take on specialmeanings inside the search and replace strings. Table 2.1 shows just a few.
From this small collection we can do some useful things. We show just a
few in Table 2.2. All commands begin with 
:1,$  to say that the substitution
will be attempted from the ﬁrst through the last line of the ﬁle.3 You could use
a smaller range for any of these substitutions, as we discussed above.
Table 2.1 Regular expression character meanings
Meaning Character
The beginning of the line. ^
The end of the line. $
Any single character. .
Zero or more repetitions of the previous expression. *
One or more repetitions of the previous expression. +
Any of the characters inside the brackets will match—e.g., [abc]  matches any
of a, b, c. Ranges are allowed too—e.g., [a-z] .[]
When used on the right-hand side, stands for whatever was found with thesearch string on the left-hand side (for an example, see Table 2.2). &
3. Note that % is valid substitute for 1,$.43 2.2 Eye to Eye with vi
Table 2.2 Some useful vi substitutions
Explanation Command
Removes all (any number of) trailing blanks—that is, looks for zero or
more blanks followed immediately by the end of line, and replacesthem with nothing (no characters between the last two slashes).:1,$s/ *$//
Puts quotes around the text of each and every line. :1,$s/^.*$/""/
Removes the leading quote from any line that starts with one. :1,$s/^"//
Removes the trailing quote from any line that ends with one. :1,$s/"$//
There is so much more that could be said about regular expressions. They
are one of the most powerful features for making big changes with fewkeystrokes. It’s an integral part of sed, Perl, and other tools. It’s in such demand
that it has been added to Java for better pattern matching. See Section 2.6 forways to learn more about regular expressions.
Starting Off Right:
.exrc 2.2.4
You can preset certain behaviors in vi by putting ex commands in a ﬁle called
.exrc  in your home directory. Those commands will be read whenever you
invoke vi and before you begin typing commands.
Here’s a simple but useful .exrc  example:
" set my favorite options:
set autoindent shiftwidth=4set ignorecase
As you can see from the example, settings can be combined on one line.
Note also that these lines do not begin with a colon. A colon is needed if you
type these lines from within vi—because you need to get into ex mode; but
since these are assumed to be ex commands (hence the name .exrc ) they are
going straight to the ex side of vi and no colon is needed. Comment lines
begin with a double quote; the rest of the line is ignored, and doesn’t need amatching quote.
The 
ignorecase  command tells vi to ignore any difference between
upper- and lowercase characters when searching for text with the / or ? com-
mands. The single character searches on the current line ( f and F) are notChapter 2 An Embarrassment of Riches: Editors 44
affected by this setting. The default for vi is noignorecase , which means case
is signiﬁcant.
The autoindent setting (can be abbreviated ai) means that when you do
an o or O to open a line after or before ( o versus O) the line on which your cursor
rests, vi will automatically add whitespace so that the text that you enter begins
at the same column where the current line begins.
For example, suppose you are editing an if statement like this:
if (userBalance < minDaily) {
    userAccount.chargeFees();}
With your cursor on the middle line, if you type an o or O, the new (blank)
line will open with your cursor at the ﬁfth character position, right in line withthe “u” of 
userAccount . If you ﬁnd that your cursor is ﬂush left when you try
this, then you need to set autoindent. You can do this from within vi by typing
:set ai  or the longer :set autoindent . The leading “ :” is important—it
gets you to ex mode. (Don’t forget to press Enter at the end of the command.)
The shiftwidth  setting tells vi how many character positions to move
text left or right with each << (left) or >> (right) command, as well as when
typing ^D and ^T in input mode. When typing text in input mode, people often
use the Tab key to indent their text, for example inside an if or for statement.
You can do this in vi, and the actual tab character will be the character in your
text. But if you want tighter indenting, use the ^T (that’s Control-T, “T” for
Tab, we suppose) to increase your indent and ^D to decrease your indent while
in input mode. The vi editor will automatically compute how much whitespace
to use and will put an optimal combination of tabs and spaces as needed to linethings up. Alternately, you can have vi always expand tabs into spaces and not
mix tabs and spaces, but just use spaces, with 
set expandtab . (Remember to
add a “:” if you want to type this from the command line.)
EDITORS  GALORE 2.3
There are many editors available to a programmer on a Linux system. Some aretext-based editors, typically antedating GUI interfaces. Many have graphicalinterfaces, with mouse-based cut and paste and the like. We will mention sev-eral here and encourage you to ﬁnd the one with which you are comfortable.45 2.3 Editors Galore
The list of choices for editors is quite long. One of the beauties of the
Open Source approach is that personal choices like favorite editors aren’tsquashed by arbitrary decisions: If you want, you can write an editor; otherscan adopt it.
Test drive a few; try them on for size. Remember that there can be a
learning curve to climb. Don’t necessarily settle for the easiest to learn—it maynot be able to handle all that you’ll need it to do, which may cost you more inthe long run.
Speaking of editors that aren’t easy to learn, we can’t discuss editors
without a mention of Emacs. To quote the GNU Emacs project home page:
4
Emacs is the extensible, customizable, self-documenting real-time display
editor. If this seems to be a bit of a mouthful, an easier explanation is Emacsis a text editor and more. At its core is an interpreter for Emacs Lisp (“elisp,”for short), a dialect of the Lisp programming language with extensions tosupport text editing. Some of the features of GNU Emacs include:
• Content sensitive major modes for a wide variety of ﬁle types, from
plain text to source code to HTML ﬁles.
• Complete online documentation, including a tutorial for new users.• Highly extensible through the Emacs Lisp language.• Support for many languages and their scripts, including all the Euro-
pean “Latin” scripts, Russian, Greek, Japanese, Chinese, Korean, Thai,Vietnamese, Lao, Ethiopian, and some Indian scripts. (Sorry, Mayanhieroglyphs are not supported.)
• A large number of extensions which add other functionality. The
GNU Emacs distribution includes many extensions; many others areavailable separately—even a Web browser.
There is another variant of Emacs called XEmacs. It came from the same
code base but split over differences both technical and philosophical.5 Now if
you thought that vi had a lot of obscure key sequences, you ain’t seen nothin’
yet. With its Lisp interpreter Emacs is incredibly extensible and powerful, but
4. This is from http://www.gnu.org/software/emacs/emacs.html#Whatis .
5. If you want to read more about those differences, and how they came about, see
http://www.xemacs.org/About/XEmacsVsGNUemacs.html .Chapter 2 An Embarrassment of Riches: Editors 46
has a huge learning curve—which is why we aren’t going to cover Emacs or
XEmacs at all in this book.
Our favorite editor is still vi—in part, we’re sure, because we already know
it so well. But like any skilled craftsman, even though you may have a favoritehammer or saw that you use on most of your work, you will still have severalothers ready in your toolkit, and use specialized ones for certain tasks.
Editing Your Pipes (sed, the Stream EDitor) 2.3.1
One important kind of editor available on Linux is the stream editor , or sed. It
allows you to perform editing on the data that comes in on standard in andwrites its result to standard out. Similar to the syntax from ex mode in vi (and
based on the simple ed editor), it can be very useful for making changes to large
numbers of ﬁles in one go.
You can learn much more about sed from its manpage or from the book
UNIX AWK and SED Programmer’s Interactive Workbook  by Peter Patsis.
Simple Graphical Editors 2.3.2
Linux comes with a wide range of open source software, not all of which is in-
stalled on every installation. You may need to use your Linux installation disksto add these programs to your system. Whether it’s RedHat’s package manageror SuSE’s YaST2 or Debian’s apt-get , most Linux admin interfaces make it
easy to add these extra packages. Of course you can also resort to the Web forﬁnding and downloading additional open source software.
Here’s a quick listing of some of the many editors that you might ﬁnd to
your liking. The description of each is largely “in its own words,” based on thetext that the authors supply with their software.
•jedit is a cross-platform programmer’s text editor written in Java. The
Java-based portability seems appealing. This is a very powerful editor anda popular choice.
•pico is a small easy to use editor.
•mbedit  is a multiplatform editor.
• NEdit is a GUI style text editor for workstations with X Window and
Motif. NEdit provides all of the standard menu, dialog, editing, mousesupport, as well as macro extension language, syntax highlighting, and alot of other nice features (and extensions for programmers).47 2.3 Editors Galore
•xcoral  comes up fast; seems well done. Half of the YaST developers swear
by it, not only because of the built-in C/C++/Java browser. This editorprovides support for C, C++, Java, Perl, Ada, and Fortran programs, aswell as L
ATEX and HTML documents. With the help of the built-in SMall
ANSI C Interpreter (SMAC), xcoral  can be conﬁgured and extended
in almost arbitrary ways. Examples can be found in the directory
/usr/lib/xcoral  (or wherever xcoral  is installed on your system).
Further information about xcoral  and SMAC is available in the detailed
online help system (also available in HTML and PostScript format).
•axe features multiple windows, multiple buffers, conﬁgurable menus and
buttons, access to external ﬁlters, keyboard macros, comprehensive onlinehelp, and more.
•eddi is an X editor based on the TiX shell, with syntax highlighting and
several other useful features.
•the: If you’re an IBMer from the heyday of mainframes, perhaps you’ve
used xedit  from VM/CMS. If so, you might want to check out the, whose
name is the acronym of “The Hessling Editor.”
• JED is an extremely powerful but small Emacs-like editor for programmers
that is extensible in a C-like macro language and is able to perform colorsyntax highlighting. Among the many features: Emacs, WordStar,EDT emulation; C, Fortran, T EX, text editing modes; full undo; Emacs-
compatible info reader, and lots more. It claims to be 8-bit clean, so youcan even edit binary ﬁles.
• Glimmer is the editor formerly known as CodeCommander. It is a full
featured code editor with many advanced features, including full scriptingintegration with either Python or Guile.
•joe (Joe’s own editor) is a freeware ASCII editor for UNIX. joe is similar
to most IBM PC text editors. The keyboard shortcuts are similar toWordStar and Turbo C. When joe has several ﬁles opened at the same
time, each ﬁle is displayed in its own window. Additionally, joe supports
shell windows whereby the output of the executed commands is saved ina buffer, automatic ﬁlename completion (via Tab), help windows, undo/redo, search and replace using regular expressions.
• gEdit is a small but powerful text editor designed expressly for GNOME.
It supports a split-screen mode and plug-ins that make it even more pow-erful. Developers can develop their own plug-ins if they desire.Chapter 2 An Embarrassment of Riches: Editors 48
•fte is an editor “with many features and simple usage for X11 and
console.”
•e3 is a very tiny editor (only .07MB) that offers many different modes
such as vi, Emacs, and WordStar. The default mode is WordStar.
•asedit  is a simple ASCII text editor for X11/Motif. Mouse support, dialog
boxes, hypertext online help, undo/redo. Named for its author, AndrzejStochniol.
REVIEW 2.4
We’ve given a good foundation for using vi—a set of commands that will help
you with much of your daily editing. While not as pretty as a GUI tool, vi can
be much more productive once you get familiar with the commands. Start withsome basic commands, then refer to this chapter or another vi resource and
learn a new keystroke each week. By next year, you’ll be a master at vi—and
incredibly productive at producing code.
We also described several other editors available under Linux. If you know
them already, or are wed to your mouse, then try one on for size. The choiceof an editor can be as much about personality and “ﬁt” as it is a technicalchoice.
WHATYOU STILL DON’T KNOW 2.5
There is still a lot more to learn about regular expressions. They may take a bitof practice, but it is a skill that can be used in a variety of contexts, in a varietyof languages.
RESOURCES 2.6
• Rafeeq Rehman and Christopher Paul, The Linux Development Platform ,
Prentice Hall PTR, especially Chapter 2 on editors vim, Emacs, and jed.
• Peter Patsis, UNIX AWK and SED Programmer’s Interactive Workbook ,
Prentice Hall PTR, ISBN 0130826758.49 2.6 Resources

Here the reader is rapidly acquainted with the manner in which Java imple-
ments the OO (Object-Oriented) concepts. The language’s statements are un-ceremoniously presented. Much deference is paid to other texts in print andon the Web, since this is well traveled ground. We then present a simple sampleJava application that will be used throughout the rest of this introductory partas an example that can be easily built in all of the Java environments availablefor Linux.
WHATYOUWILL LEARN 3.1
• Java syntax and semantics for the familiar (to an experienced programmer)
programming constructs.
• How Java implements the OO: buzzwords of inheritance, encapsulation,
and polymorphism.
• How Java deals with the absence of C++-style multiple inheritance.Chapter 3
An Experienced Programmer’s
Introduction to Java
51
• Why the absence of templates in Java is not as crippling as a C++
programmer might suppose.
• How final  is better than virtual  and how interfaces are often better
than multiple inheritance.
This is going to be a whirlwind tour. Our book assumes that you already
know programming in general, and have had some exposure to OO program-ming. We are going to distill into a single chapter material that comprises sig-niﬁcant portions of other books. In particular, if there are concepts here thatyou are not already familiar with, look at Chapters 1–9 of Bruce Eckel’s won-derful book, Thinking in Java , 3rd ed., published by Prentice Hall PTR (ISBN
0-131-00287-2). It is, genuinely, one of the best books on the market forlearning the Java language and the design principles Java embodies.
If you are somewhat new to programming, but technically quite adept
(maybe a system administrator or database administrator with little formalprogramming background), you may want to supplement your reading with abook that, unlike Eckel’s, is targeted more toward the novice programmer. Welike Java Software Solutions: Foundations of Program Design , 3rd ed., by John
Lewis and William Loftus, Addison-Wesley, 2003 (ISBN 0-201-78129-8).It will introduce the concepts behind the programming constructs, whereaswe will assume that you know these concepts so we can focus only on theJava syntax.
FUNDAMENTAL  LANGUAGE  ELEMENTS 3.2
Before the object-oriented structures, Java (like C) has a small number offundamental statements and (again, like C and C++) some fundamental“nonobject” data types.
1
1. The existence of these nonobject data types is another thing that brings up criticism of the
Java language. Since Java does not have C++’s operator overloading features, you cannot useobjects in standard algebraic expressions. I’m not sure if the inclusion of scalar classes was mo-tivated by speed, or by the lack of operator overloading. Whatever the reason, like any otherdesign compromise, it has both advantages and disadvantages, as we shall see throughoutthe book.Chapter 3 An Experienced Programmer’s Introduction to Java 52
Scalar Types 3.2.1
Java has a number of built-in scalar (in this context, nonobject) types. We
discuss these below.
Integer Types 3.2.1.1
Java deﬁnes four integer types— byte , short , int, and long . Unlike some
languages, Java deﬁnes the precision, that is, the bit size, of these types.
•byte : 8 bits
•short : 16 bits
•int: 32 bits
•long : 64 bits
For Java, the goal is “compile once, run anywhere.” Deﬁning that int
means 32 bits—everywhere—helps to achieve this goal. By contrast, when C
language was ﬁrst deﬁned, its goal was different: to be available quickly on avariety of architectures, not to produce object code that would be portable be-tween architectures. Thus, for C, the choice was up to the compiler developerto choose a size that was most “natural” (i.e., convenient) for that particulararchitecture.
2 This would make it easiest on the compiler writer. It
succeeded—C was an easy language to implement, and it spread widely.
Back to Java. Note that all these values are signed. Java has no
“unsigned” type.
Note also that byte  is listed here. It can be treated as a numeric value, and
calculations performed on it. Note especially that it is a signed  number (i.e.,
values range from –128 to 127 and not from 0 to 255). Be careful when pro-moting a 
byte  to an int (or other numeric value). Java will sign-extend on the
promotion. If the value in the byte  variable was a character (e.g., an ASCII
value) then you really wanted it treated like an unsigned value. To assign sucha value to an 
intyou’ll need to mask off the upper bits, as in Example 3.1.
You may never encounter such a situation, but if you are ever working
with bytes (e.g., byte arrays) and start to mess with the individual bytes, don’tsay we didn’t warn you.
2. In fact, C’s only rule is that a short int  will not be longer than an int and a long  will
not be shorter than an int. It is both ANSI and K&R compatible for all integer types in a C
compiler to be the same size!53 3.2 Fundamental Language Elements
Example 3.1 Coercing a byte  to int as if the byte  were unsigned
byte c;
int ival;...ival = ((int) c) && 0xFF;  // explicit cast needed
Floating Point Types 3.2.1.2
Java provides two different precisions of ﬂoating point numbers. They are:
•float : 32 bits
•double : 64 bits
The float  type is not very useful at that precision, so double  is much
more commonly seen. For other situations where precision is important, butyou can spare some cycles, consider the 
BigDecimal  and BigInteger
object classes.
Java ﬂoating point numbers are speciﬁed to follow the IEEE ﬂoating point
standard, IEEE 754.
Other Types 3.2.1.3
Java also has a boolean  type, along with constants true  and false . In Java,
unlike C/C++, boolean  values are a distinct type, and do not convert to
numeric types. For example, it is common in C to write:
if (strlen(instr)) {
 strcpy(buffer, instr);}
In this case, the integer result of strlen()  is used as a boolean , where 0 is
false  and any other value is true . This doesn’t work in Java. The expression
must be of a boolean  type.
Java also has a char  type, which is not the same as a byte . The char  is a
character, and in Java, characters are represented using Unicode (UTF-16).They take two bytes each.
For more discussion on the differences between 
byte s and char s and
about Unicode, read the Java tutorial on the java.sun.com  Web site or visit
www.unicode.org , the international standard’s Web site.Chapter 3 An Experienced Programmer’s Introduction to Java 54
Operators 3.2.1.4
Before we move on to the topic of arrays (which are sort of a hybrid scalar/
object type in Java), let’s spend a moment on the operators that can be used inexpressions (Table 3.1). Most deal with numeric or boolean operands. Forcompleteness, we’ll include the operators that deal exclusively with arrays(the “
[]”) and classes (“ .”, new, and instanceof ), even though we haven’t
discussed them yet.
Operators listed on the same row in the table have the same precedence.
Operators with the same precedence, except for the unary operators, groupfrom left to right. Unary operators group from right to left.
Arrays 3.2.1.5
Example 3.2 demonstrates the array syntax in Java.
Example 3.2 Example array syntax
int [] oned = new int[35];               // array = new type[size]
int alta [] = {1, 3, 5, 14, 11, 6, 24};  // alternative syntax plus                                          // initializationint j=0;
for(int i=0; i<35; i++) {
  oned[i] = valcomp(i, prop, alta[j]);   // array[index]  if (++j > alta.length) {               // array.length    j = 0;  }}
The array can be declared with the [] on either side of the variable name.
While our example uses the primitive type int, array syntax looks just the same
for any objects.
Note that in Java, one doesn’t declare the size of the array. It’s only in
creating the array with a new that the array gets created to a particular size.
(The {...}  syntax is really just a special compiler construct for what is
essentially a new followed by an assignment of values.)
Multidimensional arrays follow the syntax of simple arrays, but with
additional adjacent square brackets, as shown in Example 3.3.55 3.2 Fundamental Language Elements
Table 3.1 Arithmetic and logical Java operators in order of precedence
Explanation Operators
array indexing, member reference []  .
unary operators: negate, increment, decrement, logical-not, bitwise-not -  ++ -- ! ~
coercion, or casting to a different type; creating a new object (type) new
multiplication, division, remainder * / %
addition, subtraction + -
shift-left, shift-right-sign-extend, shift-right-zero-ﬁll << >> >>>
less-than, greater-than, less-or-equal, greater-or-equal, comparing object
types< > <= >=
instanceof
equal, not-equal == !=
bitwise-and (boolean for boolean operands with no short-circuit)* &
bitwise-xor (with boolean operands it is a boolean-xor)** ^
bitwise-or (boolean for boolean operands with no short-circuit)* |
logical-and (with short-circuit)* &&
logical-or (with short-circuit)* ||
Inline if expression, e.g., a ? b : c  says, if a is true , then the value
is b, else it is c.?:
Assignment; those with an operator, as in a op= b  will perform the
operation a op b  then assign the result back to a.= += -= *= /= 
%= <<= >>= >>>= &= ^= |=
In Java there are two ways to do a boolean AND operation: using & or &&. Remember that
for “a AND b”, if either is false , then the result is false . That means that if “a” is
false , there is no need to evaluate “b” because it will not affect the result. Skipping the
evaluation of “b” in this case is called short-circuiting . Java will use short-circuit evaluation
when using the && operator, but not &. The same applies to the OR operators || and |
where Java can short-circuit on a true  evaluation of the ﬁrst operand for ||. This is an
important distinction when “a” and “b” are not just simple variable references but rathermethod calls or other complex expressions, especially ones with side effects.*
XOR is exclusive or, where the result of “a XOR b” is true  if “a” or “b” is true , but not
both. For bitwise operands, “a” and “b” refer here to bits in the operand; for booleanoperands it is the one value. Examples: 
5^6 is 3; true^false  is true  but true^true
is false .**Chapter 3 An Experienced Programmer’s Introduction to Java 56
Example 3.3 Example two-dimensional array syntax
int [][] ragtag = new int[35][10];
for (int i=0; i<35; i++) {
  for (int j=0; j<10; j++) {    ragtag[i][j] = i*j;  } // next j} // next i
Multidimensional arrays are built as arrays of arrays. Therefore, we can
actually allocate it in a piecemeal fashion and have ragged-edged arrays, where
each row has a different number of columns, as shown in Example 3.4.
Example 3.4 Ragged two-dimensional array syntax
int [][] ragtag = new int[17][];
for (int i=0; i<17; i++) {
  ragtag[i] = new int[10+i];} // next i
for (int i=0; i<17; i++) {
  System.out.println("ragtag["+i+"] is "+ragtag[i].length+" long.");} // next i
For a fuller discussion of arrays, see Chapter 9 of Eckel or Chapter 6 of
Lewis&Loftus.
Object Types 3.2.2
The real power in Java, or any object-oriented language, comes not from the
scalar types, cool operators, or powerful control statements it provides (seebelow), but from its objects .
Object-oriented programming is a relatively recent innovation in software
design and development. Objects are meant to embody the real world in a morenatural way; they give us a way to describe, in our programs, the real-worldobjects with which we deal. If you are programming a business application,think of real-world business objects such as orders, customers, employees,57 3.2 Fundamental Language Elements
addresses, and so on. Java is an object-oriented programming language and thus
has some signiﬁcant syntax related to OO concepts.
If you are new to object-oriented programming, be sure to read Chapter 1
of Eckel’s Thinking in Java .
In Java, we deﬁne a classto represent the objects about which we want to
program. A class consists of the data and the methods to operate on that data.When we create a new instance of some class, that instance is an object of thattype of class. Example 3.5 shows a simple class.
Example 3.5 Simple class
class
PairInt{  // data  int i;  int j;
  // constructors
  PairInt() { i=0; j=0; }  PairInt(int ival, int jval) { i=ival; j=jval; }
  // methods
  setI(int val) { i=val; }  setJ(int val) { j=val; }  int getI() { return i; }  int getJ() { return j; }}
Note that this class deﬁnes both data ( i, j) and methods ( setI() ,
getJ() , and so on). We put all this into a ﬁle named PairInt.java  to match
the name of the class deﬁnition.
If some other Java code wanted to create and use a PairInt  object, it
would create it with the new keyword followed by a call to a constructor
(Example 3.6).
This example shows only a snippet of code, not the entire PairInt  class.
That class, though, would likely reside in its own source ﬁle (named for its classname). In Java you normally create lots of ﬁles, one for each class. When it’sChapter 3 An Experienced Programmer’s Introduction to Java 58
Example 3.6 Using simple class
// declare a reference to one:
PairInt twovals;
// now create one:
twovals = new PairInt(5, 4);
// we can also declare and create in one step:
PairInt twothers = new PairInt(7, 11);
time to run the program, its various classes are loaded as needed. We’ll discuss
grouping classes together and how Java locates them in Section 3.3.1.
In Java, each source ﬁle contains one class and the ﬁle is named after that
class. It is possible to deﬁne inner  classes located inside another class deﬁnition
and thus inside its ﬁle, but that introduces other complexities that we wish toavoid discussing at this point. Most importantly, an inner class has access toeven the private members of the enclosing class. (Read more about inner classesin any of the Java books that we recommend at the end of this chapter.)
For each of the class methods, class data declarations, and the class itself,
Java has syntax to limit the scope, or visibility, of those pieces. The examples
above didn’t include those keywords—that is, they took the default values.Usually you’ll want to specify something. See Section 3.4.1.
Objects as References 3.2.2.1
So far we have not explained something important about object type variables.
These variables can all be thought of as pointers or references to an object.When you declare a variable of an object type, what you are declaring is a vari-able that is capable of referring to an object of that type. When declared, it doesnot point at anything. It has a value of null and any attempt to use it will result
in a null pointer exception  (more on those later).
Before an object variable might be used, it must be made to refer to an
instance of an object. This is done by assignment. You can assign an existingobject, or you can use the 
new operator.
Any new class will have a constructor , that is, a method whose name is the
name of the class. There can be many different constructors for the same class,59 3.2 Fundamental Language Elements
each with unique types of parameters. For example, the String  class has many
different constructors, including one which constructs a new String  from a
different String  and another that constructs a new String  from an array
of bytes.
String strbystr = new String(oldstr);
String strbyarr = new String(myByteArray);
Strings 3.2.2.2
One of the most commonly used classes is the String  class. It comes already
deﬁned as part of Java and has some special syntax for initialization whichmakes it look familiar. Whereas other objects need a 
new keyword and a con-
structor call, a String  object can be created and initialized with the intuitive
double quotes, as in:
String xyz="this is the stringtext";
The compiler also makes a special allowance for String s with respect to
the plus sign ( +). It can be used to concatenate two String s into a third, new
String .
String phrase = "That is"
String fullsent = phrase + " all.";
It is worth noting that String s do not change—they are immutable .
When you assign a String  the value of one String  plus another, there’s a lot
of String  object creation going on behind the scenes. If you need to do a lot
of concatenation of String s, say inside loops, then you should look into the
use of the StringBuffer object. See Appendix A of Thinking in Java , 3rd ed.,
the section titled Overloading “+” and the StringBuffer , for a full discussion
of the tradeoffs here.
There are a variety of methods for String —ones that will let you make
substrings, search for substrings at the start or end or anywhere in the string,or check for equality of two strings.
Table 3.2 shows some of the most useful methods associated with 
String
objects.Chapter 3 An Experienced Programmer’s Introduction to Java 60
Table 3.2 Useful String  methods
Description Method Return type
Returns the length, i.e. number of characters,
in the String .length() int
Returns true  if the object is a String
object and is equal to the String . (Aside:
the argument takes a generic Object  type
rather than only a String  object because it’s
meant to override the equals()  method in
the class Object  of which String  is a
descendant.) This is the way to compare two
String s to see if they are both holding the
same sequence of characters. Using stringA
== stringB  will only tell you if stringA
and stringB  are referencing the same object
(pointing to the same location in memory).What you typically want is
stringA.equals(stringB) .equals(Object obj) boolean
Similar to equals() , but this one only
allows a String  parameter, and it ignores
the upper/lower case distinction betweenletters. For example:
String sample = "abcdefg";
String sample2 = "AbCdEfG";sample.equalsIgnoreCase(sample2)
returns true .equalsIgnoreCase(String str) boolean
Returns a string with all characters converted
to lowercase.toLowerCase() String
Returns a string with all characters convertedto uppercase. toUpperCase() String
Returns true  if the String  starts with the
given substring.startsWith(String substr) boolean
Returns true  if the String  ends with the
given substring.endsWith(String substr) boolean
Returns a string starting at position index
to the end of the String .substring(int index) String61 3.2 Fundamental Language Elements
Table 3.2 (Continued)
Description Method Return type
Returns a string starting at position first
and up to, but not including, character
positionlast . If last  is greater than the
length of the String , or last  is less than
first , it throws an IndexOutOfBounds
exception.substring(int first, int last) String
Other Classes: Reading Javadoc 3.2.2.3
Java comes with a huge collection of existing classes for you to use. The simplest
ones are just wrappers for the primitive classes. There is an int primitive data
type, but Java provides an Integer  class, so that you can have an integer as an
object. Similarly, there are classes for Long , Float , Boolean , and so on. Such
classes aren’t nearly as interesting as the myriad other classes that come withJava. These others provide objects for doing I/O, networking, 2D and 3Dgraphics, graphical user interfaces (GUIs), and distributed computing. Javaprovides ready-to-use classes for strings, math functions, and for special kindsof data structures like trees and sets and hash tables. There are classes to helpyou with the manipulation of HTML, XML, and SQL, as well as classes forsound, music, and video. All these objects can be yours to use and enjoy if youjust learn the magic of reading Javadoc —online documentation for Java classes.
The documentation for all these classes is viewed with a Web browser. (In afollowing chapter we’ll describe how you can make Javadoc documents for theclasses that you write, too.)
The online version of the API documentation can be found at
http://java.sun.com/j2se/1.4.2/docs/api/
for Java 1.4.2. (Similarly, put 1.5.1 or whatever version you want at theappropriate place in the URL.) When displayed, it shows a three-frame page,as seen in Figure 3.1, except that we’ve overlaid the image with three labels:A, B, and C.
The upper left frame of the Javadoc display, the area labeled with A in our
ﬁgure, lists all the packages that are part of Java 2 Standard Edition (J2SE).While there are many other packages of classes available for Java, these classesare the standard ones available without any other class libraries, with noChapter 3 An Experienced Programmer’s Introduction to Java 62
BA
C
dFigure 3.1 The three frames of a Javadoc page
additional downloads necessary. Other classes are documented in the same
way—with Javadoc—but they are downloaded and displayed separately.
Frame B initially lists all the classes and interfaces available in all of the
packages. When you select a package in A, B will display only those interfacesand classes that are part of the chosen package.
Frame C starts out with a list and description of all packages. Once you
have selected a package in A, C will show the overview of that package, showingits classes and interfaces with descriptions.
But C is most often used to display the detailed description of a class.
Choose a class or interface in B and you will see C ﬁlled with its descrip-tion—some opening information followed by a list of the visible members ofthat class, followed by the possible constructors for that class and all the meth-ods in that class (Figure 3.2). Each method is shown with its parameters and aone-sentence description. Clicking on the method name will open a fullerdescription (Figure 3.3).63 3.2 Fundamental Language Elements
Figure 3.2 Javadoc display of class information
Figure 3.3 Javadoc display of a single method
Since you will likely be referencing the Javadoc pages regularly, you may
want to download a copy to your hard drive. From the same page on the
java.sun.com  Web site where you can download the Java SDK you can also
download the API documentation.
If you agree to the licensing terms, you will download a large ZIP ﬁle. In-
stalling the documentation, then, is just a matter of unzipping the ﬁle—but it’sbest if you put it in a sensible location. If you have installed your Java SDKinto a location like 
/usr/local/java  then cd into that directory and unzip
the ﬁle that you downloaded. Assuming that you saved the downloaded ﬁleinto 
/tmp , a good place to put temporary ﬁles, and assuming that you have in-
stalled your version of Java into /usr/local/java  and that you have writeChapter 3 An Experienced Programmer’s Introduction to Java 64
permission in that directory (check the permissions with ls -ld . ) then you
can run these commands:
$ cd /usr/local/java
$ unzip -q /tmp/j2sdk-1_4_2-doc.zip
There may be quite a pause (tens of seconds) while it unzips everything.
The unzip  command will spew out a huge list of ﬁlenames as it unpacks them
unless you use the -q option (“quiet”) on the command line (which we did, to
avoid all that). The ﬁles are all unzipped into a directory named docs . So now
you can point your browser to
file:///usr/local/java/docs/api/index.html
Now you have your own local copy for quick reference, regardless of how
busy the network or Sun’s Web site gets. Be sure to bookmark this page; you’llwant to reference it often. It’s your best source of information about all thestandard Java2 classes.
Statements 3.2.3
This section is not intended to be a formal presentation of Java syntactic
elements.
3 Our purpose here is merely to show you the Java way to express
common programming constructs. You will ﬁnd that these are fundamentallysimilar to the analogous statements in C and C++. For much more detail onthese subjects, see Chapter 3 of Thinking in Java  by Bruce Eckel.
Like C, Java has a very small set of statements. Most constructs are actually
expressions . Most operations are either assignments or method calls. Those few
statements that are not expressions fall into two broad categories:
• Conditional execution statements
• Loop control statements
By the way, you may have already noticed one of the two kinds of
comments  that Java supports. They are like the C/C++ comments—a pair of
slashes (
//) marks a comment from there to the end of the line, and a block
3. For those so inclined, Sun has a BNF language grammar ( http://java.sun.com/docs/
books/jls/second_edition/html/syntax.doc.html ) on their Web site, and the Lewis and
Loftus book, Appendix L, has a good set of syntax diagrams.65 3.2 Fundamental Language Elements
comment consists of everything from the opening /* to the closing */
sequence.
Conditional Execution 3.2.3.1
An experienced programmer probably only needs to see examples of if and
other such statements to learn them. It’s only a matter of syntax. Java breaksno new ground here; it adds no new semantics to conditional executionconstructs.
The 
if-else  statement.  The ifcan take a single statement without any
braces, but we always use the braces as a matter of good style (Example 3.7).
Example 3.7 A compound Java if-else  statement
if (x < 0) {
    y = z + progo;} else if (x > 5) {    y = z + hmron;    mylon.grebzob();} else {    y = z + engrom;    mylon.kuggle();}
TIP
An important thing to remember about the Java if statement (and all other
conditional tests, such as while , do-while , and for) is that, unlike C/C++,
its expression needs to evaluate to a boolean . In C/C++, numeric expressions
are valid, any nonzero value being considered true , but not so in Java.
The switch  statement.  For a multiway branch Java, like C/C++, has a
switch  statement, though the Java version of switch is a bit more restrictive.
Example 3.8 shows the syntax.
In Java, the expression in the switch  statement must evaluate to either
an int or a char . Even short  and long  are not allowed.
As in C/C++, be sure to put the break  statement at the end of each case ,
or else control will ﬂow right into the next case . Sometimes this is the desired
behavior—but if you ever do that deliberately, be sure to add a comment.Chapter 3 An Experienced Programmer’s Introduction to Java 66
Example 3.8 A switch  statement in Java
switch (rval*k+zval)
{  case 0:    mylon.reset();    break;  case 1:  case 4:    // matches either 1 or 4    y = zval+engrom;    mylon.kuggle(y);    break;  default:    // all other values end up here    System.out.println("Unexpected value.");    break;}
The default  case is where control goes when no other case  matches the
expression. It is optional—you don’t need to have one among your switch cases.Its location is also arbitrary; it could come ﬁrst, but by convention programmersput it last in the sequence of cases, as a visual “catch all.”
TIP
For whichever case  is last (typically default ), the ending break  is redundant
because control will continue outside the break —but we show it here in the
example, and use it ourselves in our code. Why? Well, code gets edited—forbug ﬁxes and for feature additions. It is especially important to use 
break  in all
the case s in switch  statements that have no default  case, but even in
those that do, we keep the break  to avoid forgetting it, should another case
ever be added or this last one relocated. We recommend that you do the same.
Looping and Related Statements 3.2.3.2
The while  statement.  Like the while  construct in other computer lan-
guages, the expression inside the parentheses is evaluated, and if true , the
statement following it is executed. Then the expression is evaluated again, andif still 
true , the looped statement is again executed. This continues until the
expression evaluates to false (Example 3.9).67 3.2 Fundamental Language Elements
Example 3.9 A Java while  statement
while (greble != null)
{  greble.glib();  greble = treempl.morph();}
Technically, the while  statement consists of the expression and a single
statement, but that single statement can be replaced by a set of statements en-closed in braces (you know, the characters 
{ and }). We will always use braces,
even if there is only one statement in our while  loop. Experience has shown
that it’s a safer practice that leads to code that is easier to maintain. Just treatit as if the braces were required syntax, and you’ll never forget to add themwhen you add a second statement to a loop.
The 
do-while  loop.  To put the terminating check at the bottom of the
loop, use do-while as shown in Example 3.10. Notice the need for the
terminating semicolon after the expression.
Example 3.10 A Java do-while  statement
do {
  greble.morph();
  xrof = treempl.glib();
} while (xrof == null);
Die-hard Pascal programmers should note that Java has no repeat-until
statement. Sorry. Of course the logic of an until(condition)  is equivalent
to do-while(!condition) .
The for loop.  The forloop in Java is very similar to C/C++. It consists of
three parts (Example 3.11):
• The initializing expression, done up front before the loop begins
• The conditional expression for terminating the loopChapter 3 An Experienced Programmer’s Introduction to Java 68
• The expression that gets executed at the end of each loop iteration, just
prior to retesting the conditional
Example 3.11 A Java for loop
for (i = 0; i < 8; i++) {
  System.out.println(i);}
Unlike C/C++, Java doesn’t have the comma operator for use within arbi-
trary expressions, but the comma is supported as special syntax in Java for
loops. It makes it possible to have multiple initializers in the opening of the
for loop and multiple expressions in the portion repeated at each iteration of
the loop. The result is much the same—you can initialize and incrementmultiple variables or objects in your 
for loop.
More formally, the full syntax of the forloop can be described with fol-
lowing meta-language as shown in Example 3.12 (where the []* means “zero
or more repetitions of”).
Example 3.12 Java for loop syntax
for ( before [, before]* ; exit_condition  ; each_time  [, each_time ]* ) 
statement
The biggest difference between C and Java for loops, however, is that Java
allows you to declare one or more variables of a single type in the initializingexpression of the 
forloop (Example 3.13). Such a variable’s scope is the for
loop itself, so don’t declare a variable there if you want to reference it outsidethe loop. It is a very handy construct, however, for enumerators, iterators, andsimple counters.
Example 3.13 A Java for loop with local index
for (int i = 0; i < 8; i++) {
  System.out.println(i);}69 3.2 Fundamental Language Elements
As in the if and while  statements, the braces are optional when only a
single statement is involved, but good practice compels us always to use thebraces. Additional code can easily be added without messing up the logic—should one forget, at that point, the need to add braces.
Speaking of the 
while  loop: When do you use a for and when do you
use a while  loop? The big advantage of the for loop is its readability. It con-
solidates the loop control logic into a single place—within the parentheses.Anyone reading your code can see at once what variable(s) are being used tocontrol how many times the loop executes and what needs to be done on eachiteration (e.g., just increment 
i). If no initialization is needed before starting
the loop, or if the increment happens indirectly as part of what goes on in thebody of the loop, then you might as well use a 
while  loop. But when the ini-
tialization and iteration parts can be clearly spelled out, use the for loop for
the sake of the next programmer who might be reading your code.
The for loop with iterators. As of Java 5.0, there is additional syntax for a
for loop. It is meant to provide a useful shorthand when looping over the
members of an iterator.4 So what’s an iterator? Well, it has to do with collec-
tions. Uh, oh, we’re surrounded by undeﬁned terms. One step at a time, here.Java has a whole bunch (we won’t say “collection,” it’s a loaded term) of utilityclasses that come with it. We mentioned these classes in our discussion ofJavadoc. While not part of the language syntax, some of these classes are souseful that you will see them throughout many, if not most, Java programs.
Collection is a generic term (in fact, it’s a Java interface) for several classes
that allow you to group similar objects together. It covers such classes as 
Lists ,
LinkedLists , Hashtables , Sets , and the like. They are implementations of
all those things that you (should have) learned in a Data Structures course inschool. Typically you want to add (and sometimes remove) members from acollection, and you may also want to look something up in the collection. (Ifyou’re new to collections, think “array,” as they are a simple and familiar typeof collection.) Sometimes, though, you don’t want just one item from the col-lection, but you want to look at all of the objects in the collection, one at atime. The generic way to do that, the way that hides the speciﬁcs of what kindof collection you have (linked list, or array, or map) is called an iterator.
5
4. This feature is related to the topic of templates and generics. See Section 3.5.
5. The earliest versions of Java used an object called an Enumeration . It does much the same
thing as an iterator, but with somewhat clumsier method names. Iterators also allow for aChapter 3 An Experienced Programmer’s Introduction to Java 70
The purpose of an iterator, then, is to step through a collection one item
at a time. Example 3.14 shows a collection being built from the arguments onthe command line. Then two iterators are used to step through the collection
Example 3.14 Using iterators
import java.util.*;
public class
Iter8{  public static void  main(String [] args)  {    // create a new (empty) ArrayList    ArrayList al = new ArrayList();
    // fill the ArrayList with args
    for(int i = 0; i < args.length; i++) {      al.add(args[i]);    }
    // use the iterator in the while loop
    Iterator itr1 = al.iterator();
    while(itr1.hasNext()) {
      String onearg;      onearg = (String) (itr1.next());      System.out.println("arg=" + onearg);    }
    // define and use the iterator in the for loop:
    for(Iterator itr2 = al.iterator(); itr2.hasNext(); ) {      String onearg;      onearg = (String) (itr2.next());      System.out.println("arg=" + onearg);    }
  } // main} // Iter8
remove()  method, something that Enumeration  doesn’t support. The Enumeration  class
is still around, but less frequently used. It is only available from certain older utility classes.71 3.2 Fundamental Language Elements
and print the objects in the collection to the command window. The ﬁrst iter-
ator uses the while  loop, the second one uses a for loop, but they both do the
same thing.
As of Java 5.0, there is another way to work your way through a collection,
one that requires less type casting, but more importantly one that can enforcethe type of objects at compile time.
Notice in Example 3.14 that the result of the 
next()  is coerced into type
String . That’s because everything coming from the iterator (via the next()
method) comes to us as a generic object. That way an iterator can handle anytype of object, but that also means that it is up to the application program toknow what type should be coming back from the iterator. Any typecasting errorwon’t be found until runtime.
With the syntax added in 5.0, not only is there a shorthand in the 
for
loop for looping with an iterator. There is also syntax to tell the compiler explic-itly what type of objects you are putting into your collection or array so thatthe compiler can enforce that type.
Example 3.15 may help to make this clearer.
Example 3.15 Using a for loop iterator
import java.util.*;
public class
Foreign{  public static void  main(String [] args)  {    List <String> loa = Arrays.asList(args);
    System.out.println("size=" + loa.size());    for(String str : loa) {
      System.out.println("arg=" + str);    }
  } // main
} // Foreign
Here we build a List  from the arguments supplied on the command line.
Notice the type name inside of angle brackets (less-than and greater-than signs).Chapter 3 An Experienced Programmer’s Introduction to Java 72
This is the new syntax that tells the compiler that we are putting String s into
the List . The compiler will enforce that and give a compile time error if we
try to add any other type to the List .
Now we come to the for loop. Read it as “for str in loa” or “for String
values of str iterating over loa.” We will get an iterator working out of sight
that will iterate over the values of loa, our List . The values (the result of the
next()  method) will be put in the String  variable str. So we can use str
inside the body of the loop, with it taking on successive values from thecollection.
Let’s describe the syntax, then, as
for ( SomeType variable : SomeCollectionVariable ) {
}
which will deﬁne variable  to be of type SomeType  and then iterate over the
SomeCollectionVariable . Each iteration will execute the body of the loop,
with the variable set to the next()  value from the iterator. If the collection is
empty, the body of the loop will not be executed.
This variation of the forloop works for arrays as well as for these new
typed collections. The syntax for arrays is the same. Example 3.16 will echo thearguments on the command line, but without loading up a 
List  like we did
in our previous example.
Example 3.16 A for loop iterator for arrays
import java.util.*;
public class
Forn{  public static void  main(String [] args)  {    for(String str : args) {      System.out.println("arg="+str);    }
  } // main
} // Forn73 3.2 Fundamental Language Elements
The break  and continue  statements.  There are two statements that will
change the course of execution of the while , do-while , and for loops from
within the loop. A continue  will cause execution to skip the rest of the body
of the loop and go on to the next iteration. With a for loop, this means execut-
ing the iteration expression, and then executing the test-for-termination expres-sion. With the 
while  and do-while  loops, this means just going to the test
expression.
You can quit out of the loop entirely with the break  statement. Execution
continues on the next statement after the loop.
The return  statement 3.2.3.3
There is one more statement that we need to cover. The return  statement is
optionally followed by an expression. Execution of the current method ends atonce upon executing 
return , and the expression is used as the return value of
the method. Obviously, the type of the expression must match the return typeof the method. If the method is void, there should be no return expression.
Error Handling, Java Style 3.2.4
Errors in Java are handled through exceptions . In some circumstances, the Java
runtime will throw  an exception, for example, when you reference a null
pointer. Methods you write may also throw exceptions. This is quite similar toC++. But Java exceptions are classes. They descend from 
Object , and you can
write your own classes that extend  an existing exception. By so doing, you can
carry up to the handler any information you would like. But we’re getting aheadof ourselves here. Let’s ﬁrst describe the basics of exceptions, how to catch them,how to pass them along, and so forth.
In other programming languages a lot of code can be spent checking return
codes of function or subroutine calls. If A calls B and B calls C and C calls D,then at each step the return value of the called function should be checkedto see if the call succeeded. If not, something should be done about theerror—though that “something” is usually just returning the error code to thenext level up. So function C checks D’s return value, and if in error, returns anerror code for B to check. B in turn looks for an error returned from C and re-turns an error code to A. In a sense, the error checking in B and C is superﬂu-ous. Its only purpose is to pass the error from its origin in D to the functionthat has some logic to deal with the error—in our example that’s A.Chapter 3 An Experienced Programmer’s Introduction to Java 74
Java provides the try/catch/throw  mechanism for more sophisticated
error handling. It avoids a lot of unnecessary checking and passing on of errors.The only parts of a Java program that need to deal with an error are those thatknow what to do with it.
The 
throw  in Java is really just a nonlocal “goto”—it will branch the exe-
cution of your program to a location which can be quite far away from themethod where the exception was thrown. But it does so in a very structuredand well-deﬁned manner.
In our simple example of A calling B calling C calling D, D implemented
as a Java method can throw  an exception when it runs into an error. Control
will pass to the ﬁrst enclosing block of code on the call stack that contains a
catch  for that kind of exception. So A can have code that will catch an excep-
tion, and B and C need not have any error handling code at all. Example 3.17demonstrates the syntax.
Example 3.17 A simple try/catch  block
try {
  for (i = 0; i < max; i++) {    someobj.methodB(param1, i);  }} catch (Exception e) {  // do the error handling here:  System.out.println("Error encountered. Try again.");}// continues execution here after successful completion// but also after the catch if an error occurs
In the example, if any of the calls to methodB()  in the for loop go
awry—that is, anywhere inside methodB()  or whatever methods it may call an
exception is thrown (and assuming those called methods don’t have their own
try/catch  blocks), then control is passed up to the catch  clause in our exam-
ple. The for loop is exited unﬁnished, and execution continues ﬁrst with the
catch  clause and then with the statements after the catch .
How does an error get thrown in the ﬁrst place? One simply creates an
Exception object and then throws the exception (Example 3.18).75 3.2 Fundamental Language Elements
Example 3.18 Throwing an Exception , step by step
Exception ex = new Exception("Bad News");
throw ex;
Since there is little point in keeping the reference to the object for the local
method—execution is about to leave the local method—there is no need todeclare a local variable to hold the exception. Instead, we can create the excep-tion and throw it all in one step (Example 3.19).
Example 3.19 Throwing an Exception , one step
throw new Exception("Bad News");
Exception  is an object, and as such it can be extended. So we can create
our own unique kinds of exceptions to differentiate all sorts of error conditions.Moreover, as objects, exceptions can contain any data that we might want topass back to the calling methods to provide better diagnosis and recovery.
The 
try/catch  block can catch different kinds of exceptions much
like cases in a switch/case  statement, though with different syntax
(Example 3.20).
Notice that each catch  has to declare the type of each exception and
provide a local variable to hold a reference to that exception. Then method callscan be made on that exception or references to any of its publicly available datacan be made.
Remember how we created an exception (
new Exception("message") )?
That message can be retrieved from the exception with the toString()
method, as shown in that example. The method printStackTrace() is also
available to print out the sequence of method calls that led up to the creationof the exception (Example 3.21).
The exception’s stack trace is read top to bottom showing the most
recently called module ﬁrst. Our example shows that the exception occurred(i.e., was constructed) on line 6 of the class named 
InnerMost , inside a method
named doOtherStuff() . The doOtherStuff()  method was called from
inside the class MidModule —on line 7—in a method named doStuff() .
In turn, doStuff()  had been called by doSomething() , at line 11 insideChapter 3 An Experienced Programmer’s Introduction to Java 76
Example 3.20 Catching different kinds of exceptions
try {
  for (i = 0; i < max; i++) {    someobj.methodB(param1, i);  } // next i
} catch (SpecialException sp) {
    System.out.println(sp.whatWentWrong());
} catch (AlternateException alt) {
    alt.attemptRepair(param1);
} catch (Exception e) {
    // do the error handling here:    System.out.println(e.toString());    e.printStackTrace();}// continues execution here after any catch
Example 3.21 Output from printStackTrace()
java.lang.Exception: Error in the fraberstam.
    at InnerMost.doOtherStuff(InnerMost.java:6)    at MidModule.doStuff(MidModule.java:7)    at AnotherClass.doSomething(AnotherClass.java:11)    at ExceptExample.main(ExceptExample.java:14)
AnotherClass , which itself had been called from line 14 in the
ExceptExample  class’ main()  method.
We want to mention one more piece of syntax for the try/catch  block.
Since execution may never get to all of the statements in a try block (the excep-
tion may make it jump out to a catch  block), there is a need, sometimes,
for some statements to be executed regardless of whether all the try code
completed successfully. (One example might be the need to close an I/O con-nection.) For this we can add a 
finally  clause after the last catch  block. The
code in the finally  block will be executed (only once) after the try or after
the catch —even if the path of execution is about to leave because of throwing
an exception (Example 3.22).77 3.2 Fundamental Language Elements
Example 3.22 Use of a finally  clause
try {
  for (i = 0; i < max; i++) {    someobj.methodB(param1, i);  } // next i
} catch (SpecialException sp) {
    System.out.println(sp.whatWentWrong());
} catch (AlternateException alt) {
    alt.attemptRepair(param1);    throw alt;    // pass it on
} catch (Exception e) {
    // do the error handling here:    System.out.println(e.toString());    e.printStackTrace();
} finally {
    // Continue execution here after any catch    // or after a try with no exceptions.    // It will even execute after the AlternateException    // before the throw takes execution away from here.    gone = true;    someobj = null;}
print() ,println() ,printf() 3.2.5
We’ve already used println()  in several examples, and assumed that you can
ﬁgure out what it’s doing from the way we have used it. Without going whole-hog into an explanation of Java I/O and its various classes, we’d like to say alittle more about the three various output methods on a 
PrintStream  object.6
Two of the methods, print()  and println() , are almost identical. They
differ only in that the latter one appends a newline (hence the ln) at the end
of its output, thereby also ﬂushing the output. They expect a String  as their
only argument, so when you want to output more than one thing, you add the
String s together, as in:
6. The mention of the PrintStream  object was meant to be a hint, to tell you that you can
ﬁnd out more about this sort of thing on the Javadoc pages for the PrintStream  object.Chapter 3 An Experienced Programmer’s Introduction to Java 78
System.out.println("The answer is "+val);
“But what if val is not a String ?” we hear you asking. Don’t worry, the
Java compiler is smart enough to know, that when you are adding with a
String  argument it must convert the other argument to a String , too. So for
any Object , it will implicitly call its toString()  method. For any primitive
type (e.g., int or boolean ), the compiler will convert it to a String , too.
The third of the three output methods, printf() , sounds very familiar
to C/C++ programmers, but be warned:
• It is only available in Java 5.07 and after.
• It is similar but not identical to the C/C++ version.
Perhaps the most signiﬁcant enhancement to printf()  is its additional
syntax for dealing with internationalization. It’s all well and good to translateyour 
String s to a foreign language, but in doing so you may need to change
the word order and thus the order of the arguments to printf() . For example,
the French tend to put the adjective after rather than before  the noun (as we do
in English). We say “the red balloon”  and they say “le balloon rouge.”  If your
program had String s for adjective and noun, then a printf()  like this:
String format = "the %s %s\n";
System.out.printf(format, adjective, noun);
wouldn’t work if you translate just the format String :
String format = "le %s %s\n";System.out.printf(format, noun, adjective);
You’d like to be able to do the translation without changing the code in your
program.8 With the Java version of printf() , there is syntax for specifying
which argument corresponds to which format ﬁeld in the format string. It uses
7. Remember, you’ll need the -source 5.0  option on the command line.
8. Java has good support for internationalization, another topic for which we don’t have the
time. The ability to translate the strings without otherwise modifying the program is a crucialpart to internationalization, and the 
printf() in Java 5.0 is certainly a help in this regard. In
a similar vein, the Eclipse IDE, covered in Chapter 10, includes a feature to take all stringconstants and convert them to external properties at a stroke, making internationalization mucheasier to do.79 3.2 Fundamental Language Elements
a number followed by a dollar sign as part of the format ﬁeld. This may be
easier to explain by example; our French translation, switching the order inwhich the arguments are used, would be as follows:
String format = "le %2$s %1$s\n";
System.out.printf(format, noun, adjective);
The format ﬁeld %2$s  says to use the second argument from the argument
list—in this case, adjective—as the string that gets formatted here. Similarly,the format ﬁeld 
%1$s  says to use the ﬁrst argument. In effect, the arguments
get reversed without having to change the call to println() , only by translat-
ing the format String . Since such translations are often done in external ﬁles,
rather than by assignment statements like we did for our example, it means thatsuch external ﬁles can be translated without modifying the source to move ar-guments around.
This kind of argument speciﬁcation can also be used to repeat an argument
multiple times in a format string. This can be useful in formatting 
Date  objects,
where you use the same argument for each of the different pieces that make upa date—day, month, and so on. Each has its own format, but they can becombined by repeating the same argument for each piece. One format ﬁeldformats the month, the next format ﬁeld formats the day, and so on. Again anexample may make it easier to see:
import java.util.Date;
Date today = new Date(); System.out.printf("%1$tm / %1$td / %1$ty\n", today);
The previous statement uses the single argument, today , and formats it
in three different ways, ﬁrst giving the month, then the day of the month, thenthe year. The 
t format indicates a date/time format. There are several sufﬁxes
for it that specify parts of a date, a few of which are used in the example.9
NOTE
Don’t forget the trailing \n at the end of the format string, if you want the output
to be a line by itself.
9. There are many more, familiar to C/C++ UNIX/Linux/POSIX programmers who have used
the strftime()  library call.Chapter 3 An Experienced Programmer’s Introduction to Java 80
The details for all the different format ﬁelds can be found in the Javadoc
for the java.util.Formatter  class, a class that is used by printf()  to do
its formatting, but one that you can also use by itself (C programmers: think“sprintf”).
In order to implement 
printf() for Java, the language also had to be ex-
tended to allow for method calls with a varying number of arguments. So as ofJava 5.0, a method’s argument list can be declared like this:
methodName(Type ... arglist)
This results in a method declaration which takes as its argument an array
named arglist  of values of type Type . That is, it is much the same as if you
declared methodName(Type [] arglist)  except that now the compiler will
let you call the method with a varying number of arguments and it will load upthe arguments into the array before calling the method. One other implicationof this is that if you have a declaration like this:
varOut(String ... slist)
then you can’t, in the same class, also have one like this:
varOut(String [] alist)
because the former is just a compiler alias for the latter.
TIP
We recommend that you avoid methods with variable argument list length. You
lose the compile-time checking on the number of arguments that you supply(since it can vary). Often the type of the arguments in the list will be 
Object ,
the most general type, to allow anything to be passed in. This, too, circumventstype checking of arguments, and can lead to runtime class-cast exceptions andother problems. Methods with variable argument list length are often a lazyapproach, but were necessary to make 
printf()  work, and for that we
are grateful.81 3.2 Fundamental Language Elements
USING (AND MAKING ) JAVA API S 3.3
With every class you write, you deﬁne a name—the name of the class. But what
if someone else has already used that name? Java programming should encour-age reuse of existing code, so how do you keep straight which names areavailable?
This is a namespace  issue—who can use which names. A classic way to
solve a namespace issue is to divide the namespace up into domains. On theInternet, host names are sectioned off into domains, so that I can have a hostnamed 
Pluto  or www and so can lots of others—because each host is qualiﬁed
by its domain (e.g., myco.com ). Thus www.myco.com  isn’t confused with
www.otherco.com  or www.hisgroup.org . Each host is named www, but each
is unique because of the qualifying domain.
Java solves the problem in much the same way, but with the names in the
reverse order. Think of the “host” as the class name; the “domain” name, usedto sort out identical host names, is, in Java parlance, the package name . When
you see a name like 
com.myco.finapp.Account , that can be a Java package
com.myco.finapp  qualifying a class named Account .
Beyond just keeping the namespace clean, Java packages serve another
important function. They let you group together similar classes and interfacesto control access to them. Classes within the same package can access eachothers’ members and methods even when they are not declared 
public , provid-
ed they are not declared to be private . This level of intimacy, sometimes
called package protection , means that you should group classes together that are
related, but avoid grouping too many classes together. It’s tempting just toput all your classes for a project into the same package, for example,
com.myco.ourproject , but you will provide better safety and perhaps pro-
mote better reuse by grouping them into several smaller packages, for example,
com.myco.util , com.myco.financial , and com.myco.gui .
The package  Statement 3.3.1
So how do you make a Java class part of a package? It’s easy—you just put, as
the ﬁrst (noncomment) line of the ﬁle, the package  statement, naming the
package to which you want this class to belong. So if you want your Account
class to be part of the com.myco.financial package, your Java code would
look as shown in Example 3.23.Chapter 3 An Experienced Programmer’s Introduction to Java 82
Example 3.23 Use of a package  statement
package com.myco.financial;
public class
Account{  // ...}
Making a class part of a package is easy. What’s tricky is putting the class
ﬁle in the right location so that Java can ﬁnd it.
Think of the current directory as the root of your package tree. Each part
of a package name represents a directory from that point on down. So if youhave a package named 
com.myco.financial  then you’ll need a directory
named com and within that a directory named myco  and within that a directory
named financial . Inside that financial  directory you can put your
Account.class  ﬁle.
When Java runs a class ﬁle, it will look in all the directories named in the
CLASSPATH  environment variable. Check its current value:
$ echo $CLASSPATH
$
If it’s empty, as in this example, then the only place where it will look for
your classes will be the current directory. That’s a handy default, because it isjust what you want when your class ﬁle has no 
package  statement in it. With
no package  statement, your class becomes part of the unnamed package . That’s
ﬁne for simple sample programs, but for serious application development you’llwant to use packages.
Let’s assume that you’re in your home directory, 
/home/joeuser , and
beneath that you have a com directory and beneath that a myco  directory with
two subdirectories financial  and util . Then with your classes in those lower
level directories, you can run your Java program from the home directory.If you want to run it from any arbitrary directory (e.g., 
/tmp  or
/home/joeuser/alt ) then you need to set CLASSPATH  so it can ﬁnd this
package tree. Try:83 3.3 Using (and Making) Java APIs
$ export CLASSPATH="/home/joeuser"
$
Now Java knows where to look to ﬁnd classes of the
com.myco.financial  and com.myco.util  packages.
The import  Statement 3.3.2
Once we have put our classes into packages, we have to use that package’s name
when we refer to those classes—unless we use the import  statement.
Continuing our example, if we want to declare a reference to an Account
object, but Account  is now part of com.myco.financial , then we could refer
to it with its full name, as in:
com.myco.financial.Account = 
    new com.myco.financial.Account(user, number);
which admittedly is a lot more cumbersome than just:
Account = new Account(user, number);
To avoid the unnecessarily long names, Java has import  statements. They
are put at the beginning of the class ﬁle, outside the class deﬁnition, just afterany 
package  statement. In an import  statement, you can name a class with
its full name, to avoid having to use the full name all the time. So our examplebecomes:
import com.myco.financial.Account;
// ...Account = new Account(user, number);
If you have several classes from that package that you want to reference,
you can name them all with a “ *”, and you can have multiple different import
statements, as in:
import java.util.*;
import com.myco.financial.*;// ...Account = new Account(user, number);
Here are a few things to remember about import  statements. First, they
don’t bring in any new code into the class. While their syntax and placementChapter 3 An Experienced Programmer’s Introduction to Java 84
is reminiscent of the C/C++ include  preprocessor directive, their function is
not the same. An import  statement does not include any new code; it only aids
name resolution. Secondly, the “ *” can only be used at the end of the package
name; it is not a true wildcard in the regular expression sense of the word.Thirdly, every class has what is in effect an implicit 
import java.lang.*  so
that you don’t need to put one there. References to String  or System  or other
core language classes can be made without the need for either the import
statement or the fully qualiﬁed name (except as described in the nextparagraph).
If you need to use two different classes that have the same name but come
from different packages, you will still need to refer to them by their full names;
import  can’t help you here. As an example of this, consider the two classes
java.util.Date  and java.sql.Date  (though with any luck you won’t need
to refer to both of them within the same class).
ENCAPSULATION , INHERITANCE ,AND POLYMORPHISM 3.4
The classic troika of OOP buzzwords is “encapsulation, inheritance, andpolymorphism.” How does Java do each of these things?
Encapsulation 3.4.1
Encapsulation is the grouping of data and algorithms together into units, and
it’s also about hiding implementation details that are not important to the usersof the unit. The basic unit of encapsulation is the class. All Java code exists inclasses. A class is declared with the 
class keyword (Example 3.24).
Example 3.24 A sample Java class declaration that doesn’t actually do anything useful
public class
Sample{  private int id;
  public void method()
  {    System.out.println(id);  }}85 3.4 Encapsulation, Inheritance, and Polymorphism
Inheritance 3.4.2
Inheritance is how a class places itself in a hierarchy of existing classes. In Java,
each class inherits from exactly one existing class. A class names the class fromwhich it inherits with the 
extends keyword. We said a Java class inherits from
exactly one class, and yet our Example 3.24 doesn’t contain the extends
keyword. What gives?
If a class doesn’t explicitly extend an existing class, it implicitly extends
the “root” Java class, Object . The Object  class has some interesting features,
and the fact that all Java classes directly or indirectly extend Object  has
interesting consequences that we will explore later.
Persons coming to Java from another object-oriented language whose
name shall remain C++ might wonder about multiple inheritance. Java has theconcept of interfaces . An interface is like a class, except that it may not contain
data
10and may contain only method deﬁnitions, without any implementation
(Example 3.25). An interface may not be instantiated  (created with the new
operator),11 so how do you make use of interfaces? Well, a class extends exactly
one existing base class, but it may implement  any number of interfaces by using
the implements keyword (Example 3.26).
Example 3.25 An interface
public interface
Identifiable{  public int getID();}
As you can see, a class that implements an interface must provide an imple-
mentation of all the methods deﬁned in the interface. We said that an interfacecannot be instantiated, but you can declare a variable of type 
Identifiable
10. Actually, an interface may contain final static  data, but since we haven’t introduced
these concepts yet, just pretend interfaces cannot contain data for now and we’ll put the lie toit later.
11. Although you can do something that looks suspiciously like it with anonymous inner
classes —but since we haven’t introduced these concepts yet, just pretend that you cannot instan-
tiate an interface; you will see such use later.Chapter 3 An Experienced Programmer’s Introduction to Java 86
Example 3.26 A class that implements an interface
class
Sample  implements Identifiable{  private int id;
  public void method()
  {    System.out.println(id);  }
  public int getID()
  {    return id;  }}
and assign an instance of the Sample  class to it. In fact, you could assign an
instance of any class that implements the Identifiable  interface to it.
Interfaces may also have an extends  keyword. In other words, an interface
may inherit from an existing interface. This may be useful if you know you willwant to use methods from both the extended and the base interface withouthaving to cast the object reference. Otherwise extending an interface isunnecessary since a given class may implement as many interfaces as desired.
Inheritance and Encapsulation 3.4.2.1
Encapsulation and inheritance are related to one another and are controlled by
access modiﬁers  on classes, data members, and methods. Let’s spend a little time
talking about these modiﬁers and what they mean.
The access modiﬁer keywords are public , private , and protected .
When a data member or method is private , it can only be accessed or called
from within this speciﬁc class. Neither classes that extend this class, nor classesoutside this class may access such a data member or call such a method. How-ever, one instance of a class can access 
private  members of another instance
of the same class. We don’t encourage such use.
When a data member or method is marked protected , however, the only
classes that can access such a data member or method are either 1) classes thatextend this class and their descendants, or 2) other classes in this package (even87 3.4 Encapsulation, Inheritance, and Polymorphism
if they don’t extend this class). Classes in other packages (unless they extend
this class) can not get at such members.
A public  data member or method may be accessed by any code in
any class.
What if you do not put an access speciﬁer on? Then the item (data mem-
ber, method, or class) has package visibility. Such an item is accessible to anyother class within the package, but no further. Not even derived classes, unlessthey are in the same package, are allowed to see it.
12
In terms of how restrictive the access is, you can think of the terms in order
of decreasing strictness as:
•private
• (package)13
•protected
•public
TIP
Beginner Java programmers often declare everything as public , so that they
can ignore such issues. But then they get the OO religion, and having experi-enced reliability issues (others messing with their variables) they go to the otherextreme and declare 
private  as much as possible. The problem here is that
they often don’t know how others will want to reuse their code. Restricting every-thing to 
private  makes reuse more narrow. We prefer using private  for
data members but protected  for those internal helper methods that you might
otherwise make private ; this hides your implementation from most other
classes while allowing someone to override your methods, effectively providinga way for them to override your implementation. Allow those who would buildon your work the ability to do so without having to reimplement.
Here is a simple example of each type of declaration:
12. If you are a C++ programmer, the following description may mean something to you
(if not, skip this): All classes within a package are essentially “friends.”
13. Remember there is no keyword for package level protection, rather it is the absence of a
keyword that denotes this level of protection. We had to write something in that space on thepage so you’d know what we’re talking about.Chapter 3 An Experienced Programmer’s Introduction to Java 88
private String hidn;
String pkgstr;protected String protstr;public String wideOpen;
The static  statement 3.4.2.2
Another keyword qualiﬁer on declarations that we need to describe is the
static  keyword. When a variable is declared static  then there is only one
instance of that variable shared among all instances of the class. Since the vari-able exists apart from a particular instance of the class, one refers to it with theclass name followed by a dot followed by the variable name, as in 
System.out .
Similarly, methods can be declared static  as well. This also means that
you don’t need an instance of the class to call them, just the class name, as in
System.getProperties() .
Now with Java 5.0, you don’t even need the class name, provided that you
have a static import  statement at the top of your class, for example:
import static java.lang.System.*;
The final  statement 3.4.2.3
Another way that static  is often seen is in conjunction with the final  key-
word. When a variable is declared final  then a value can be assigned to it once,
but never changed. This can make for good constants.
Since public  will make the variable visible to all other classes, static
will make it a class variable (available without an instance of that class), and
final  will keep it from being altered (even though it is publicly available), then
combining all of those gives us a good declaration for a constant, for example:
public static void long lightSpeed = 186000;    // mps
New to Java 5.0 is the explicit creation of enumerated types. Prior to 5.0,
programmers would often use static final  constants even when the partic-
ular value was unimportant, as a way to provide compile-time checking of theuse of the constant values. Here is an example of a declaration of a set ofenumerated values:
enum WallMods { DOOR, WINDOW, VENT, GLASSBLOCK };89 3.4 Encapsulation, Inheritance, and Polymorphism
TIP
A common technique used with public static final  constants is to put
them in an interface deﬁnition. (This is the exception to the rule that interfacesdeﬁne method signatures but contain no data.) When a class wants to use oneor more of those constants, it is declared to implement that interface:
public MyClass
  extends BigClass  implements Comparable, LotsaConstants{...}
In deﬁning MyClass  we have declared that it implements LotsaConstants
(not a name that we recommend you using). That makes all the constants that
we have deﬁned inside the LotsaConstants  interface available to the
MyClass  class. Since classes can implement many different interfaces, this
doesn’t interfere with the use of other “real” interfaces, such as Comparable .
WARNING
The keyword enum is new to Java 5.0, so older programs that may have used
enum  as a variable name and will now cause an error when recompiled for
Java 5.0.
The enum  will look very familiar to C/C++ programmers, but there are
some important differences. In C/C++ the values of the enum  elements are, in
reality, integer values. Not so in Java. Here they are their own type, but can beconverted to a 
String  via the toString()  method, with a value that matches
the name, for easy reading and debugging.
Enumerated values can be used in == comparisons since they will be
deﬁned only once (like other static final  constants) and it would only be
references that are passed around. They would be referenced by the name ofthe enumeration followed by dot followed by the particular value (e.g.,
WallMods.WINDOW ) and used as an object. (We have used uppercase for the
names not out of any syntax requirement, but only to follow the typical namingconvention for constants.)Chapter 3 An Experienced Programmer’s Introduction to Java 90
Polymorphism 3.4.3
Polymorphism (from the Greek poly meaning “many” and morph  meaning
“shape”) refers to the language’s ability to deal with objects of many different“shapes,” that is, classes, as if they were all the same. We have already seen thatJava does this via the 
extends  and implements  keywords. You can deﬁne an
interface and then deﬁne two classes that both implement this interface.
Remember our Sample class (Example 3.26). We’ll now deﬁne another
class, Employee , which also implements the Identifiable  interface
(Example 3.27).
Example 3.27 The Employee  class
class
Employee  extends Person  implements Identifiable{  private int empl_id;
  public int getID()
  {    return empl_id;  }}
Notice that the same method, getID() , is implemented in the Employee
class, but that the ﬁeld from which it gets the ID value is a different ﬁeld. That’s
implementation-speciﬁc—the interface deﬁnes only the methods that can becalled but not their internal implementation. The 
Employee  class not only
implements Identifiable , but it also extends the Person  class, so we better
show you what our example Person class looks like (Example 3.28).
To make a really useful Person  class would take a lot more code than we
need for our example. The important part for our example is only that it isquite different from the 
Sample  class we saw earlier.
Example 3.29 demonstrates the use of polymorphism. We only show some
small relevant snippets of code; there would be a lot more code for this to be-come an entire, complete example. Don’t be distracted by the constructors; wemade up some new ones just for this example, that aren’t in the class deﬁnitionsabove. Can you see where the polymorphism is at work?91 3.4 Encapsulation, Inheritance, and Polymorphism
Example 3.28 The Person  class
class
Person{  String name;  Address addr;
  public
  Person(String name, Address addr)  {    this.name = name;    this.addr = addr;
  } // constructor  // ... lots more code is here  public String getName()
  {    return name;  }}
Example 3.29 An example use of polymorphism
//...
Sample labwork = new Sample(petridish);Employee tech = new Employee(newguy, 27);Identifiable stuff;
//...
if (mode) {    stuff = labwork;} else {    stuff = tech;}id = stuff.getID();
The key point here is when the call is made to getID() . The compiler
can’t know at compile time which object will be referred to by stuff , so it
doesn’t know whose getID()  method will be called. But don’t worry—it worksChapter 3 An Experienced Programmer’s Introduction to Java 92
this all out at runtime. That’s polymorphism—Java can deal with these different
objects while you, the programmer, can describe them in a generalized way.
One other related keyword should be mentioned here, abstract . When
one declares a class as an abstract class, then the class itself is an incompletedeﬁnition. With an abstract class you deﬁne all the data of the class but needonly write method declarations, not necessarily all the code for the methods.This makes abstract classes similar to interfaces, but in an abstract class, someof the methods can be fully written out.
If you’d like to know more about polymorphism, “late binding,” and more
of this aspect of Java, read Chapter 7 of Eckel’s Thinking in Java . There is an
extensive example there with much more detail than we can cover here.
O, T EMPLATES ! WHERE  ARTTHOU? 3.5
Programmers familiar with C++ may be wondering how in the world an OOP
language without templates can be useful.
NOTE
Actually, something very much like templates is available in Java 5.0. 14 A new
feature, which Sun calls generics , looks an awful lot like C++ templates
(including similar syntax). It provides compile-time type checking and implicitcasting when retrieving objects from a generic container.
Speaking as programmers who worked with C++ before it had templates,
we can sympathize. Java’s previous lack of true templates does impose somelimits on generic programming, but not as much as one might think. Remem-ber that unlike C++, all Java classes inherit from exactly one base class, and thatif no base class is speciﬁed, they extend the 
Object  class. This means that every
single Java class either directly or indirectly extends Object , and thus all Java
classes are instances of Object . So if you need, for example, to implement a
container, you can guarantee that it can contain any Java class by implementinga container for the 
Object  type. Java also has runtime type identiﬁcation fea-
tures that are more than a match for anything C++ has, plus it has type-safe
14. Java 5.0 will only be out by the time this book is completed.93 3.5 O, Templates! Where Art Thou?
downcasting15 so that in the worst case scenario, your program has a nice, clean
type exception. You simply do not get the kind of “mystery bugs” that you canget in C++ when you miscast an object.
16
Thanks to interfaces and a true single object hierarchy, many of the uses
of C++ templates go away. We doubt very much that you will miss them. Inmany cases, such as STL algorithms and other functional programming imple-mentations, you can use interfaces to produce similar results.
Critics of the Java language have a point when they complain that all the
type casting of class references in order to expose desired interfaces tends toproduce code that violates object-oriented principles. The fact that a class orinterface implements all these other named interfaces is hard-coded all over theplace in an application’s code. Such critics say this is a bad thing, because it vi-olates encapsulation and implementation hiding. These critics have a point. Ifyou ﬁnd yourself frequently downcasting object references, consider using theJava 5.0 generics, or try to ﬁnd another way to code what you want to do.There may be a better way. In defense of the original Java approach (beforegenerics), all casts are runtime type safe. An exception is thrown if a class refer-ence is improperly cast. In C++, if you miscast a pointer, it assumes you meantit. Java certainly can be awkward, but errors will get caught. Sometimes that ismore important.
VIRTUALLY  FINAL 3.6
One difﬁculty anyone writing about Java faces is whether or not to assume yourreaders are familiar with C++. In this chapter, we have tried to help those withC++ experience without requiring such knowledge. But it is in the inevitablecomparisons between those languages that many subtle Java features are bestdiscussed. We promised you that we would talk about the relative merits of
virtual  (a C++ concept) and final  (a Java concept). To do that, we have to
assume some knowledge of C++. So, let’s reverse the pattern and talk about the
15. Don’t worry if this is all gibberish to you right now. We will revisit these topics in detail
when we come upon them in the course of our sample project.
16. Actually, we’re being a bit optimistic here. While Java programs are not subject to many
mystery bugs, the Java Virtual Machines that run Java code are written in traditional languages,and there have been VMs with bugs. Time and again we see that there is no “silver bullet.” Butin our experience, Java comes close. So very close.Chapter 3 An Experienced Programmer’s Introduction to Java 94
straight Java facts so we can let the non-C++ folks move on while we go a little
deeper with you C++’ers.
In Java, a method or a class may be declared final . A method that is de-
clared final  may not be overridden in classes that extend the class containing
the final  implementation. A class that is declared final  may not be extended
at all.
Now, the comparisons to C++ require us to talk about a language feature
that does not exist at all in Java. In C++, unless a method is declared virtual ,
when a class is used by reference to a base class (for example, when using
Employee  as a Person ), the base class version of the method is called. If the
method is declared virtual, the version of the method called is the version forthe type of 
Person  referenced (in this case, Employee ). In Java, all methods
are virtual. There is no such keyword in Java.
A U SEFUL  SIMPLE  APPLICATION 3.7
We will use the sample application shown in Example 3.30 in other sectionsof this book to illustrate the use of Java tools. This example is so simple (a singleclass) that it doesn’t demonstrate the object-oriented aspect of development,but it does make use of some APIs that take advantage of it. We will not walkyou through this application right here, but present it as a listing of a completeJava class. Not all of the APIs used in this example will be explained, so youmay want to refer to the Javadoc pages for explanations of object types ormethod calls that don’t seem obvious.
REVIEW 3.8
We’ve taken a very quick look at the syntax of Java statements, classes, andinterfaces. Much of the syntax is very reminiscent of C, though Java’s object-oriented features differ in signiﬁcant ways from C++. We looked at how to putJava classes into packages, and at the implications of this for locating the
.class  ﬁles.
We also showed what the HTML-based Javadoc documentation looks
like. These HTML pages will likely be a handy reference for you as you designand write your Java code.95 3.8 Review
Example 3.30 Single class example: FetchURL
import java.net.*;
import java.io.*;
public class FetchURL {
  private URL requestedURL;
  public FetchURL(String urlName)
  {    try {       requestedURL = new URL(urlName);    } catch (Exception e) {       e.printStackTrace();    }  }
  public String toString()
  {    String rc = "";    String line;    BufferedReader rdr;
    try {
        rdr = new BufferedReader(          new InputStreamReader(          requestedURL.openConnection().getInputStream()          )        );
        while ((line = rdr.readLine()) != null)
        {          rc = rc + line + "\n";        }    } catch (Exception e) {        e.printStackTrace();        rc = null;    }
    return rc;
  }Chapter 3 An Experienced Programmer’s Introduction to Java 96
  public static void main(String[] args)
  {    int i;    FetchURL f;
    for (i = 0; i < args.length; i++)
    {      System.out.println(args[i] + ":");      System.out.println(new FetchURL(args[i]));    }  }}
WHATYOU STILL DON’T KNOW 3.9
We have deliberately avoided ﬁle I/O. For Java, it is a multilayered and complex
topic—and with version 1.4 of Java, there is a whole new set of additionalclasses (
java.nio.* ) to consider. We refer you instead to Chapter 11 of Eckel’s
Thinking in Java .
There are also a few Java keywords that we have not yet discussed, notably
synchronize .
Even if you know all the Java syntax, it may still take a while to get familiar
with the way that syntax is typically put to use. Experience and reading otherpeople’s Java code will be your best teachers—but don’t assume that a particularapproach is good just because someone else uses it; much new code has beenwritten in the last several years as people have learned Java. Be sure it’s a styleworth imitating, and if you ﬁnd a better way to do it, use it.
RESOURCES 3.10
• Bruce Eckel, Thinking in Java .
• Cay S. Horstmann and Gary Cornell, Core Java 2: Volume 1 Fundamentals ,
especially Chapter 3.
• John Lewis and William Loftus, Java Software Solutions .
• The Sun Microsystems Java Tutorial.17
17.http://java.sun.com/docs/books/tutorial/index.html97 3.10 Resources
EXERCISES 3.11
1. Write a simple class with a main()  method that prints out the arguments
supplied on the command line used to invoke it. First use a for loop to
do this, then a while  loop, then a do-while . What differences do you
notice? Which do you ﬁnd most amenable for this task?
2. Modify the previous class to quit echoing its arguments should it en-
counter an argument of length 5. (You can tell the length of a String
object with the length()  method, e.g., mystr.length() .) Did you use
break , or continue , or some other mechanism?Chapter 3 An Experienced Programmer’s Introduction to Java 98
Java claims—and rightly so—to be a “compile once, run anywhere” language.
But when a program starts, that “anywhere” is now a speciﬁc somewhere. Whenrunning a Java application on Linux, or any environment for that matter, thequestion arises, “Where am I?” (context, environment, familiar landmarks).What can a Java program ﬁnd out about its environment? In particular, on theLinux platform, (how) can we get at:
• Command-line parameters?
• The current shell’s environment variables?• The current working directory?• The location of data ﬁles?
The answers to these questions will depend on what kind of Java applica-
tion you are creating, and just how portable you want your application to be.
99Chapter 4
Where Am I?
Execution Context
WHATYOUWILL LEARN 4.1
We’ll show you how Java provides access to the command-line parameters and
environment variables. We’ll also discuss the Java RunTime  and Property
classes. Java’s use of the standard input/output/error streams is also brieﬂycovered, along with an introduction to those concepts. We’ll end with a shortword on portability concerns.
A SIMPLE  START 4.2
The most basic external information that a program may use is the informationsupplied on its invocation—simple parameters or arguments, such as ﬁlenamesor options, that can direct its running and make it a more ﬂexible tool. Let’sstart with getting at that information from a Java program.
Command-Line Arguments 4.2.1
When a program is run from the command line, more than just the program
name can be supplied. Here are some examples:
$ javac Hi.java
$ mv Acct.java core/Account.java$ ls -l
In the ﬁrst example, we invoked a program called javac  and gave it the
parameter Hi.java , the name of the ﬁle containing the Java program that we
want javac to compile to Java byte code. (We’ve got a whole chapter on how
to set up and run the Java compiler, see Chapter 5.) The mv got two command-
line arguments, Acct.java  and core/Account.java , which look a lot like
pathnames. The ls command has one argument, -l, which in Linux usually
indicates, by its leading minus sign, that it is an option for altering the behaviorof the command. (In this case it produces the “long” version of the directorylisting.)
Even point-and-click GUIs allow such parameters to be supplied, though
often not visible to the user. In KDE, one can create a new desktop icon thatis a link to an application. Such an icon has a property sheet that lists, on theExecute  tab, the command to be run, including any parameters.
In Java, the parameters supplied on the command line are available to the
main()  method of a Java class. The signature for this method is:Chapter 4 Where Am I? Execution Context 100
public static void main(String args[])
From within main() , the various parameters are available as the elements
of the array of String s. The class in Example 4.1 will display those parameters
when the program is run.
Example 4.1 Java program to dump command-line arguments
/*
 * simple command-line parameter displayer */
public class
CLine{  public static void  main(String [] args)  {    for (int i = 0; i < args.length; i++)     {      System.out.println(args[i]);    }
  } // main} // class CLine
We compile and run the example, providing a few command-line
parameters:
$ javac CLine.java
$ java CLine hello world file.txt bluehelloworldfile.txtblue$ 
Not all classes will have main()  methods, but any can. Even if several
classes in a package have main()  methods, that is not a problem. Which one
will be the “main” main() ? It’s the class we speciﬁed when we invoked our
program. In Example 4.1, the main()  that is executed is the one in the CLine101 4.2 A Simple Start
class. Even if CLine  used other classes (it does— String  is a class) it doesn’t
matter if those other classes have main()  methods or not.
Unit Testing Made Easy 4.2.2
Why all the fuss about main()  and command-line parameters? Such main()
methods are a handy way to provide unit tests for a class. The tests can be
controlled by the command-line parameters. By testing each class you can re-duce the time to integrate the parts of an application. Furthermore, a set of unittests can be built up (e.g., as shell scripts) to provide automated regression testsfor the entire project. As a more rigorous and systematic approach to unittesting, we discuss junit in Chapter 13.
THESystem  CLASS 4.3
The Java System  class provides some of the answers to questions about our
environment. What follows is not an exhaustive discussion of all the methodsin the 
System  class, but only of those areas that touch on our speciﬁc focus—
input/output (I/O) and environment variables.
Be aware that all of the methods in the System  class are static . There-
fore you never need to (and you can’t) call a constructor on System . You just
use the “class name, dot, method name” syntax to call the method (e.g.,
System.getProperties() ). Similarly, the accessible ﬁelds in System  are all
static , so for some of the I/O-related methods you use the “class name, dot,
ﬁeld name, dot, method name” syntax (e.g., System.out.println() ). As of
Java 5.0, you can shorten this, by using a static import , that is:
import static java.lang.System.*;
Then in your other references you can leave off System , for example,
getProperties()  and out.println() .
Java and Standard I/O 4.3.1
Java adopted the UNIX concept of standard I/O (see Section 1.3.1.1). The
Linux ﬁle descriptors are available to a running Java program as I/O streamsvia the 
System  class. The System  class contains three public static  ﬁeldsChapter 4 Where Am I? Execution Context 102
named in, out, and err. You’ve probably already seen out in Java programs
with statements like this:
System.out.println("Hello, world.");
You can also write:
System.err.println("Error message here\n");
and
BufferedReader in = new BufferedReader(new
                        InputStreamReader(System.in));while ((line = in.readLine()) != null) {...}
Java parallels Linux nicely on I/O descriptors. If you redirect any of those
ﬁle descriptors from the shell command line when you execute a Java program,then that redirected I/O is available to your Java application—with noadditional work on your part.
In the example above, if you have 
System.in  all wrapped up into a
BufferedReader  from which your program is reading lines, then you can run
that program as:
$ java MyCode 
and it will read input as you type it on your keyboard. This may be how youtest your program, but when you put this program to its intended use, you maywant it to be able to read from a ﬁle. This you can do without any change tothe program—thanks to ﬁle descriptors, input streams, and redirecting input,for example:
$ java MyCode < file2
which will let the same Java program read from the ﬁle named file2  rather
than from keyboard.
Your Java program can also set the values of System.in , System.out ,
and System.err  as it executes, to change their destinations.
One common example is changing the destination of System.out , the
typical recipient of debugging or logging messages. Say you’ve created a class103 4.3 The System Class
or even a whole package of classes that write log messages to System.out
(e.g., System.out.println("some message") ). Now you realize that you’d
like the output to go somewhere else.
You could redirect standard out, as in:
$ java SomeClass > log
but that requires the user to remember to redirect the output every time theprogram is invoked. That’s ﬁne for testing, or if the output is intended to goto a different place each time it is invoked. But, in this example, we always wantthe output to go to the same location.
Without changing any of the 
System.out.println()  statements, all the
messages can be sent to a new location by reassigning the System.out  print
stream. The System  class has a setter for out—that is, a method which will let
you set a new value for out. In your Java program, open the new destination
ﬁle and give this to the System  class:
PrintStream ps = new PrintStream("pathname");
System.setOut(ps);
It will be used from that point forward in the execution of this program as its
out output stream.
CAUTION
Changing standard out (or in, or err) will make the change for all classes
from here on in this invocation of the Java runtime—they are static  ﬁelds of
the one System class. Since this is so serious a move, the Java Security
Manager (see Section 5.8.4.2) provides a check for setIO  to see if the Java
program is allowed to make such changes. If such a security manager is inplace and you are not allowed to make such changes, an exception(
SecurityException ) will be thrown. Note also that the permission applies
to setting any of the ﬁelds; it doesn’t divide the permission into setting one(e.g., 
out) but not another (e.g., in).
Environment Variables 4.3.2
When Linux programs are run they have the open ﬁle descriptors described
above. They also carry with them a list of “name=value” pairs called theirenvironment . These environment variables allow for context to be shared amongChapter 4 Where Am I? Execution Context 104
several successively executed programs. Some examples of environment
variables are:
•USER  is the name you used to log in.
•HOME  is the directory where you start when you log in.
•PATH  is the list of directories searched for executable ﬁles.
To see the environment variables deﬁned in your current shell, type env
at the command prompt:
$ env
HOME=/home/user01USER=user01PATH=/bin:/usr/bin:/usr/local/bin:/home/user01/bin...$
The names of environment variables, sometimes referred to as shell vari-
ables, are traditionally uppercase, though that is only a convention. The variable
names are treated in a case sensitive fashion (e.g., Home != HOME ).
You can set environment variables for use in the current shell with a simple
assignment statement:
$ VAR=value
That will set the value for the duration of this shell, but not for any of its sub-
processes. Since running another program is a subprocess, such an assignmentwon’t be visible in your running program. Instead, you can export the variableso that it is carried forward to all subprocesses:
1
$ export VAR=value
Java and Environment Variables 4.3.3
If these environment variables are available to all Linux processes, then how do
we get at them from a Java program? Well, we can’t do it quite as directly asyou might think. In previous (1.2 and older) versions of Java, the 
System  class
1. If you are using csh (the C-shell, another Linux command-line interpreter), then the syntax
is slightly different. Instead of export name=value  use setenv name value  (note the
different keyword and no equal sign).105 4.3 The System Class
Example 4.2 Java program to dump environment variables
/*
 * simple environment examiner */import java.util.*;
public class
AllEnv{  public static void  main(String [] args)  {    Properties props = java.lang.System.getProperties();    for (Enumeration enm = props.propertyNames(); enm.hasMoreElements();)    {      String key = (String) enm.nextElement();      System.out.print(key);      System.out.print(" = ");      System.out.println(props.getProperty(key));    }
  } // main} // class AllEnv
had a getenv()  method. Its argument was a String  name of an environment
variable and it returned the environment variable’s value as a String . This has
been deprecated. In fact, an attempt to use getenv()  in more recent versions
of Java will result in an exception. Sun decided that this was too platform-speciﬁc; not all platforms have environment variables.
Now (Java 1.3 and beyond) the preferred approach is to use the
getProperties()  and getProperty()  methods of the System  class. How
are these different from the getenv()  approach? To a Linux developer,
getenv()  was easy and straightforward—just not very portable. To accommo-
date other systems, Java deﬁnes a set of properties that are reasonable to expectto be deﬁned on any system, and provides a Java property name for each one.
To see the entire list, call the 
getProperties()  method. It returns a
Properties  class, which is an extension of the Hashtable  class. From this
class you can get an Enumeration of the names, as Example 4.2 demonstrates.
Now compile and run this example:Chapter 4 Where Am I? Execution Context 106
$ javac AllEnv.java
$ java AllEnv
and you will get a long list of properties—in no particular order. They are kept
in a hashtable and thus not sorted. Of course it would be easier to use this listif they were sorted. Linux to the rescue.
$ java AllEnv | sort
It’s often in simple little steps like this that one begins to see the power of
Linux. In Linux, not every desirable feature has to be crammed into every pos-sible place where it might be used. Instead, features can be written once andconnected to one another as needed. Here what we need is to have the list ofproperties sorted. We don’t need to worry that our class didn’t sort its output.In Linux we just connect the standard output of the Java program with a sortutility that Linux provides.
So what are all these properties? Many of them have to do with Java-
related information (
java.version , and so on), but a few are more general.
Those that parallel the typical Linux environment variables are:
•file.separator  is the ﬁle separator (“ /” on Linux).
•path.separator  is the path separator (“ :” on Linux).
•line.separator  is the line separator (“ \n” on Linux).
•user.name  is the user’s account name.
•user.home  is the user’s home directory.
•user.dir  is the user’s current working directory.
But that leaves out so many environment variables, especially the applica-
tion-speciﬁc ones (e.g., CVSROOT ). How would a Java program get at these?
Because of this new, more portable way to describe the environment,
there is no easy way to get at other environment variables. There are a fewapproaches, but they are all indirect.
First, you can add to the properties list by deﬁning new properties on the
command line when invoking the program, for example:
$ java -Dkey=value AllEnv
You can list several properties on the line by repeating the -D parameter:107 4.3 The System Class
$ java -DHOME=/home/mydir -DALT=other -DETC="so forth" AllEnv
Instead of typing those values, you’d probably want to let the Linux shell
put in the values from its environment. So you’d use shell variables, forexample:
$ java -DHOME="${HOME}" -DALT="${ALT}" -DETC="${ETC}" AllEnv
assuming that HOME , ALT, and ETC have already been deﬁned in the shell’s
environment.2
If there are only a few variables that you need to pass to Java, put them on
the command line as shown above. Put that command line into a shell scriptand use the script to invoke the program so that the parameters are suppliedevery time.
But if you want to access many or all of the environment variables then
you may want to do something a little more complex. Notice the syntax of theoutput of the 
env command. It is in the same format ( name=value ) as are
properties. So if we use a shell script to invoke our program, we can have itplace all these values into a ﬁle by redirecting output, then open this ﬁle as aJava properties ﬁle and thus make all the name/value pairs accessible.
The following commands in a shell script attempt to do just that:
env > /tmp/$$.env
java -DENVFILE=/tmp/$$.env MyClassrm /tmp/$$.env
where MyClass  is the Java program that you wish to run.
TIP
The shell variable $$ is the numeric process ID of the running process. This
provides a unique ID during each invocation of the program. Each run of thescript will have its own process and thus its own process ID. Thus a single usercould execute this script multiple times concurrently without fear of collisionwith himself or others.
2. The quotations around the shell variables keep any embedded spaces as part of the variable’s
value. The curly braces are not strictly necessary in this use.Chapter 4 Where Am I? Execution Context 108
We remove the temporary ﬁle with the rm command in the last line of
the script to avoid cluttering our /tmp  directory with lots of these ﬁles.
But now we have to add code to MyClass  to open the ﬁle deﬁned by
ENVFILE  and read the properties it contains. This leads us naturally to the Java
Properties  class, the subject of our next section, where we’ll talk more about
this example.
THEProperties  CLASS 4.4
The Javadoc page for the Properties class describes it as “a persistent set of
properties . . . saved to . . . or loaded from . . . a stream.” In other words, it isa hashtable (a set of name/value pairs) that can be read from or written to astream—which typically means a ﬁle. (Other things can be streams, but fornow, think “ﬁle”.)
The great thing about name/value pairs is how readable and usable they
are. When they are written to a ﬁle, there’s no fancy formatting, no ﬁxed widthﬁelds, no unreadable encryptions and special characters; it’s just 
name=value .
You could say that the “ =” and the newline are the special characters that pro-
vide all the formatting you need. It means that you can type up a properties ﬁlewith the simplest of editors, or even generate one quickly as we saw in the pre-vious example (here we use a simple ﬁlename):
$ env > propertyfile
Properties are also easy to use. Since they’re based on hashtables, there is
no searching code to write. You call a method giving it the name, it returnsthe value.
If we pass in the name of the ﬁle via the 
-D parameter, then we can get
that ﬁlename in Java with:
System.getProperty("ENVFILE");
where ENVFILE  is a name that we made up and used on the command line:
$ java -DENVFILE=propertyfile MyClass
We could also have used:
$ java MyClass propertyfile109 4.4 The Properties Class
so that args[0]3in the Java code to get the name of the ﬁle (see Section 4.2.1),
but since we want to learn about properties, we’ll use the propertymethods here.
Now let’s open that property ﬁle (Example 4.3).
Example 4.3 Demonstrating the Properties  class
import java.io.*;
import java.util.*;
public class
EnvFileIn{  public static void  main(String [] args)    throws IOException  {    String envfile = System.getProperty("ENVFILE", ".envfile");
    BufferedInputStream bis = new BufferedInputStream(
                                new FileInputStream(envfile));    Properties prop = new Properties();    prop.load(bis);    bis.close();
    prop.list(System.out);  // dumps the whole list to System.out  } // main} // class EnvFileIn
Notice the way that we got the value for the environment ﬁle’s name. This
form of the getProperty()  call provides not only the name we are looking
up (ENVFILE ) but also lets us specify a default value in case the name is not
found in the properties list. Here our default value is .envfile .
Just as it was a simple matter of using the load()  method to read up an
entire ﬁle of properties, so you can write out the entire list of properties to the
3. In C language, the arg[0]  is the command being invoked; not so in Java. In Java, the ﬁrst
element of the array is the ﬁrst argument of the command line ( propertyfile  in our
example).Chapter 4 Where Am I? Execution Context 110
screen with the list()  method. The argument to list()  is either a
PrintStream  or a PrintWriter . System.out  is a PrintStream , so that
will work.
The format of the properties ﬁle is name=value . But it is also possible to
put comments in a properties ﬁle. Any line beginning with a “ #” is ignored.
Try it.
It’s also easy to (re)write a ﬁle of properties with the store()  method.
The parameters are an OutputStream  and a String ; the latter will serve as a
label for the parameters, written to an opening comment in the properties ﬁle.
If your program needs to examine the list of property names, you can get
an Enumerator  of the entire list via the propertyNames() method. Modify
Example 4.3 to replace the list()  call with a do-it-yourself version that uses
the Enumerator  returned from propertyNames()  to list all the names and
values. Hint: Use getProperty()  on each name retrieved via the enumeration.
The Java Properties  class extends the java.util.Hashtable  class.
This means, in part, that all the other Hashtable  methods are available to a
Properties  class. Methods such as containsKey()  or containsValue()
can be helpful, as can isEmpty() . One caution, though. You should use
setProperty()  if you want to add values to Properties , rather than
the Hashtable ’sput()  method. They do largely the same thing, but
setProperty()  enforces that its parameters are String s. This is important if
you want to write out the properties to a ﬁle, as it’s meant for String s only.
THERuntime  CLASS 4.5
Let’s discuss one last way to get to the underlying (Linux) system information.Be warned, though, that this is the least portable approach of all we havementioned.
exec() 4.5.1
Familiar to C/C++ programmers, the exec()  call in the Java Runtime  class
does much the same thing. It gives you a way to start another program outsideof the current Java Virtual Machine. In doing so, you can connect to its stan-dard 
in/out/err and either drive it by writing to its standard in, or read its
results from its standard out. (Yes, that’s correct—we write to its input and
read from its output. If that sounds wrong, think it through. Our Java code is111 4.5 The Runtime Class
on the opposite side of the I/O fence. The external program’s output becomes
our input.)
Example 4.4 shows a Java program that can invoke an arbitrary Linux
program. The output of the program is displayed.
Example 4.4 Java program to execute any Linux program
import java.io.*;
public class
Exec{  public static void  main(String [] args)    throws IOException  {    String ln;    Process p = Runtime.getRuntime().exec(args);    BufferedReader br = new BufferedReader(                          new InputStreamReader(                            p.getInputStream()));
    while((ln = br.readLine()) != null) {
      System.out.println(ln);    }    System.out.println("returns:" + p.exitValue());
  } // main} // class Exec
The command-line arguments are taken to be the command to be execut-
ed and its arguments. For example:
$ java Exec ls -l
Be aware that in this example, only the standard output is captured and
displayed from the invoked process. Error messages written to standard err
will be lost, unless you modify the program to handle this. We leave that as anexercise for the reader.
Check your Linux knowledge—see if you understand the distinction. If
you invoke the sample Exec program as:Chapter 4 Where Am I? Execution Context 112
$ java Exec ls -l *.java
the shell does the wildcard expansion before invoking the Java runtime. The
*.java  becomes many ﬁles listed on the command line (provided that you
have .java  ﬁles in this directory). If you try to pass the *.java  through liter-
ally to exec(ls '*.java')  it will likely return an error (which won’t be dis-
played using our example code) and you’ll see a nonzero return status (e.g., 1).That’s because ls doesn’t expand the 
*. The shell does that. So ls is looking for
a single ﬁle named *.java , which we hope doesn’t exist in your directory.
Portability 4.5.2
Be aware that the more environment-speciﬁc code you build, the less portable
your application becomes. It’s not uncommon to use a properties ﬁle as a wayto parameterize your program, to customize its behavior in a given installation.But keep these to a minimum to stay portable. Avoid invoking other programs,they are likely not available in all environments where Java can run. Java’s claimto “compile once, run anywhere” is amazingly true—provided you keep awayfrom logic in your program that goes looking for trouble.
REVIEW 4.6
Java command-line parameters are not that different from C/C++ command-line parameters. Environment variables are a different story. Most of the shell’senvironment variables are not readily accessible, and we looked at how youmight deal with this situation.
We have discussed, among other things, some uses for these classes:
java.util.Properties , java.lang.System , and java.lang.Runtime ,
but we have only barely scratched the surface. There are many more methodsavailable in these classes with which you can do lots more.
WHATYOU STILL DON’T KNOW 4.7
The biggest topic in this area that we’ve avoided for now is the Java Native In-terface (JNI), a mechanism whereby you can get outside of the Java environ-ment to make calls to existing ( native ) libraries—for example, Linux system
calls. In a coming chapter we’ll actually give you an example of such a call.113 4.7 What You Still Don’t Know
Then you’ll really be able to make your application nonportable and
system-dependent. (But sometimes portability isn’t your goal, right?)
RESOURCES 4.8
Perhaps the best resource for the speciﬁcs that you’ll need to work with thetopics mentioned in this chapter is the Javadoc documentation on the classesthat we have mentioned. Learn to read Javadoc pages (see Section 3.2.2.3),bookmark them in your browser, and keep them handy as you write yourJava code.Chapter 4 Where Am I? Execution Context 114
The Sun Microsystems Java Software Development Kit (Java SDK) is the most
basic toolkit for Java development. In some ways, it remains the most ﬂexible.Your understanding of Java development should include this very basic toolset,even if you move beyond it to more “hand-holding” Integrated DevelopmentEnvironments (IDEs). This chapter introduces all the major components ofthe Java 2 Standard Edition (J2SE)
1 development kit. The Enterprise Edition
is discussed later. There is a third Java SDK (the Micro Edition) for embeddeddevelopment which we will not cover in this book.
1. What does the “2” in “Java 2” mean? Hoo boy. Explaining product marketing names is not
always easy. There was Java 1.0. Then there were several releases of Java 1.1.x. Then Sun re-leased Java 1.2.x, but they started calling it “Java 2”. Since then, they have released Java 1.3.x,Java 1.4.x and they still call it “Java 2”. But it gets even more confusing. Sun is now releasingwhat had been preliminarily numbered 1.5, but is now ofﬁcially called the 5.0 release, thoughthey still call it Java 2. That’s what the 2 in “J2SE” refers to. So it is Java 2 platform, version5.0. Any questions? See 
http://java.sun.com/j2se/naming_versioning_5_0.html .
115Chapter 5
The Sun Microsystems Java
Software Development Kit
WHATYOUWILL LEARN 5.1
In this chapter you will learn about the purpose of the programs in the Sun Java
Software Development Kit. We will provide you with some details of their op-tions and demonstrate their use in compiling our two sample applications. Thenext step up in tool automation would be the build tool known as Ant (seeChapter 9 for more information).
ALLYOU NEED,AND NOT ONETHING MORE 5.2
These days, many programmers are what we affectionately call “tool junkies.”They can only develop software with the support of complex integrated devel-opment environments, their supporting classes, and screen painting tools. Bythis, we do not mean to imply that we are Luddites. The right IDE can indeedbe an enormous boost to productivity, but a programmer should be able towork with any tool. The Sun Java SDK is the lowest common denominator; ifyou can be productive with it, then you can be productive with absolutely anyJava development environment. That makes your skills more portable. Andthat means more jobs are open to you. And that is good for you and youremployers.
The Sun Microsystems Java SDK (formerly known as, and often still re-
ferred to as the Sun Microsystems Java Development Kit, or JDK) providesyou with all the tools you need to compile, document, run, package, debug,and deploy Java applications and applets. It does this with a collection ofpurely text-based command-line tools. This is no-frills software development.But a lot of us crusty old types really like that.
You should become comfortable and familiar with these tools. Some IDEs
are just fancy window dressing that calls these tools underneath (some arenot—some have written their own Java compilers, for example). If you can usethese tools comfortably to build any kind of Java program, then you know youhave a mastery of the basics and are not “addicted” to a particular tool. You alsoknow the “hardest” way to get the job done. This will help you to make goodchoices about tools that enhance productivity. Some tools, we ﬁnd, actuallyslow you down or get in your way in some cases. If you know the lowest level,you can better recognize the merits and ﬂaws of more advanced tools. Enoughjustiﬁcation. On to the SDK.Chapter 5 The Sun Microsystems Java Software Development Kit 116
NOTE
By the way, you will notice that we do not cover the installation of the Develop-
ment Kit in this chapter. That is because we are deferring the discussion of in-stallation for the next chapter, where we also introduce the concept of multipleconcurrent Development Kits on a single box. See Chapter 6 for details.
THE JAVA COMPILER 5.3
At the heart of the SDK is javac , the Java compiler. The general form of javac
follows:
javac [option...] [sourcefile ...] [@optfile ...]
The option  list may be zero or more command-line options. We’ll detail
those later. The sourcefile  list may be the name of zero or more Java source
ﬁles. Usually you specify just the “main” class of an application. As we will de-scribe later, javac  generally will compile all necessary 
.java  ﬁles for any classes
that main()  class references, directly or indirectly. If you preﬁx a ﬁlename with
the at sign ( @), the contents of the ﬁle will be treated as if they had been typed
on the command line.
Compiler Behavior, Defaults, and Environment Variables 5.3.1
In the simplest case—compiling a single class, such as our FetchURL.java
class—you get no diagnostics on success (Example 5.1).
Example 5.1 Compiling FetchURL.java
$ javac FetchURL.java
$
There will now be a new ﬁle, FetchURL.class , in the directory with the
Java source ﬁle. Let’s run that again with a command-line option we will detaillater (Example 5.2).
Boy, our single, simple, one-class application sure uses a lot of classes! It
does. Where did they come from? They come from the classes referenced by117 5.3 The Java Compiler
Example 5.2 Compiling FetchURL.java  with the -verbose  option
$ javac -verbose FetchURL.java
[parsing started FetchURL.java][parsing completed 479ms][loading /usr/java/j2sdk1.4.1_02/jre/lib/rt.jar(java/lang/Object.class)][loading /usr/java/j2sdk1.4.1_02/jre/lib/rt.jar(java/net/URL.class)][loading /usr/java/j2sdk1.4.1_02/jre/lib/rt.jar(java/lang/String.class)][checking FetchURL][loading /usr/java/j2sdk1.4.1_02/jre/lib/rt.jar(java/lang/Exception.class)][loading /usr/java/j2sdk1.4.1_02/jre/lib/rt.jar(java/lang/Throwable.class)][loading /usr/java/j2sdk1.4.1_02/jre/lib/rt.jar(java/io/BufferedReader.class)][loading /usr/java/j2sdk1.4.1_02/jre/lib/rt.jar(java/io/InputStreamReader.class)][loading /usr/java/j2sdk1.4.1_02/jre/lib/rt.jar(java/net/URLConnection.class)][loading /usr/java/j2sdk1.4.1_02/jre/lib/rt.jar(java/io/Reader.class)][loading /usr/java/j2sdk1.4.1_02/jre/lib/rt.jar(java/io/InputStream.class)][loading /usr/java/j2sdk1.4.1_02/jre/lib/rt.jar(java/lang/System.class)][loading /usr/java/j2sdk1.4.1_02/jre/lib/rt.jar(java/io/PrintStream.class)][loading /usr/java/j2sdk1.4.1_02/jre/lib/rt.jar(java/io/FilterOutputStream.class)][loading /usr/java/j2sdk1.4.1_02/jre/lib/rt.jar(java/io/OutputStream.class)][loading /usr/java/j2sdk1.4.1_02/jre/lib/rt.jar(java/lang/Error.class)][loading /usr/java/j2sdk1.4.1_02/jre/lib/rt.jar(java/net/MalformedURLException.class)][loading /usr/java/j2sdk1.4.1_02/jre/lib/rt.jar(java/io/IOException.class)][loading /usr/java/j2sdk1.4.1_02/jre/lib/rt.jar(java/lang/RuntimeException.class)][loading /usr/java/j2sdk1.4.1_02/jre/lib/rt.jar(java/lang/StringBuffer.class)][wrote FetchURL.class][total 3469ms]$
the application, either directly through composition or inheritance, or indirectly
because the classes we used are themselves composed of or inherit from otherclasses. How did the Java compiler know where to ﬁnd these classes? For this,it used what the Sun documentation calls a bootstrap classpath , which is set when
the SDK is installed. A classpath is a list of directories and/or JAR ﬁles that aresearched for classes. We seem to dimly recall that in early versions of Java, therewas only one classpath, and if you changed it, you had to remember to put theJava runtime JAR ﬁle on it, or none of the standard APIs were available. This,no doubt, is why Sun created the concept of a bootstrap classpath. If you useany third party JAR ﬁles or you create your own, you must tell the compilerabout it by creating your own classpath.
There are two ways to provide a classpath to the Java compiler. One is
through a command-line switch, which we will cover in a moment. The otheris through an environment variable. The 
CLASSPATH  environment variable listsChapter 5 The Sun Microsystems Java Software Development Kit 118
Example 5.3 Setting the CLASSPATH  environment variable
$ export CLASSPATH=/home/mschwarz/java/simpleApp:/var/java/lib/project.jar
$ echo $CLASSPATH/home/mschwarz/java/simpleApp:/var/java/lib/project.jar$
directories and/or JAR or ZIP ﬁles that contain classes. Each directory or JAR
ﬁle is separated from the others by a colon (“ :”), as shown in Example 5.3.
The classpath for the compiler consists of the bootstrap classpath plus the
user-speciﬁed classpath. What does the classpath mean in terms of Java classnames? Think of the classpath as a list of “package roots.” In otherwords, when you refer to a class like 
java.sql.DriverManager  or
net.multitool.SAMoney , the Java compiler is going to go to each
entry in the combined bootstrap-and-user classpath and check there for
java/sql/DriverManager.class  or net/multitool/SAMoney.class . If
it doesn’t ﬁnd the .class  ﬁle in a candidate directory, it will look for the
.java  ﬁle. If it ﬁnds the .java  ﬁle, it will compile it and then use the resulting
.class  ﬁle. When it has a .class  ﬁle for the class, it stops searching the
classpath. In this way, compiling the single “main” class of an application willoften compile the whole application (we will get to exceptions to that rule later).
javac Options 5.3.2
The Java compiler has many command-line options that modify its behavior.
We will go over the most important ones here. This is not a complete reference!See the Sun SDK Documentation for complete reference information.
-classpath
Sets the classpath. This overrides the CLASSPATH  environment variable, if
one is speciﬁed.
-d
This switch is followed by a directory name. Compiled classes are placedin that directory. Normally, compiled classes are placed in the samedirectory as the source code.119 5.3 The Java Compiler
-deprecation
This causes every use or reference to a deprecated class or method to be
displayed on compilation.2
-g
Put full debugging information in the compiled class ﬁles. See also -g:
(the next entry in this list).
-g:keyword_list
This switch gives you ﬁne-grained control over the amount of debug infor-
mation included in compiled class ﬁles. The argument after the colon maybe either 
none , in which case no debug information is included, or a
comma-separated list with any combination of source , to include source
ﬁle debugging information, lines , to include line number information,
or vars , to include information about local variable names. The default,
if no -g ﬂag of any kind is speciﬁed, is to include source ﬁle and line
number information only.
-nowarn
Disables warning messages.
-verbose
Causes the compiler to output information about each class encounteredduring compilation. This can be helpful when trying to resolve problemswith missing class deﬁnitions.
There are also a number of switches that relate to cross-compiling as well
as UNIX-speciﬁc options, but these are not commonly used. Refer to the SunJava SDK Tools documentation if you need details on these options.
2. In Java, it is rare for APIs to break support for existing code. Rather than remove old meth-
ods, it is more common to deprecate  them. This is done by putting a @deprecated  tag in a
Javadoc comment on the class or method. The Java compiler will issue a warning (if the
-deprecated  switch is on) whenever a deprecated class or method is used. In general, depre-
cation is a warning that the class or method will be removed in a future version of the codeor library. It is interesting to note that the javac  compiler records that a method or class is
deprecated in the binary. Thus the compiler produces different output based on the contentsof a comment. As we have written simple compilers and interpreters, this creeps us out. Wehave always wondered why 
deprecated  has not become a Java language keyword.Chapter 5 The Sun Microsystems Java Software Development Kit 120
THE JAVA RUNTIME  ENGINE 5.4
You can download and install just the software required to run Java applications
without the development tools. This is known as the Java 2 Runtime Edition .
The Basics 5.4.1
You run a Java program by invoking the java command. Usually, the argument
to the command is a class name. That class is loaded, and its main()  method
is run.
Remember, this is not a ﬁlename, but a class name! The rest of the com-
mand-line arguments that follow the class name are passed as an array of
String s to the main() method of the named class. Example 5.4 demonstrates
running the FetchURL program.
Example 5.4 Running a Java program with java
$ java FetchURL http://www.yahoo.com/news
http://www.yahoo.com/news:<html><head><title>Yahoo! Directory News and Media</title><script type="text/javascript"  src="http://us.js1.yimg.com/us.yimg.com/lib/common/yg_csstare.js"></script><style>  li { font-size: 12px; margin-bottom: 2px; }</style><base href=http://dir.yahoo.com/News_and_Media/></head><body>...... etc.
CAUTION
Remember that if you override the classpath, either with the -classpath  or
-cp command-line options (detailed below) or with the CLASSPATH  environ-
ment variable, you must include the “ .” directory somewhere in the classpath
if you want Java to include current working directory in the search list. Since “ .”
is the default classpath, many people are surprised when they set a classpathand suddenly can no longer run a 
.class  ﬁle in their current directory.121 5.4 The Java Runtime Engine
The class invoked must be ﬁndable on either the bootstrap or user-
speciﬁed classpath.
java Options 5.4.2
Just as the Java compiler, the runtime program, java, takes a number of com-
mand-line options. Here are the most commonly used ones:
-classpath  or -cp
Sets the runtime classpath. Overrides any value in the CLASSPATH
environment variable.
-Dproperty=value
Allows a system property to be set on the command line.
-jar
Speciﬁes that the ﬁrst nonoption command-line argument is not a Javaclass name, but the name of a JAR ﬁle. The JAR ﬁle must have a
Main-Class:  speciﬁcation in its MANIFEST (see Section 5.11). The
main()  method of the class named by the JAR’s MANIFEST Main-Class:
speciﬁcation will be called as if that class had been named on the commandline, rather than the JAR ﬁle. This is commonly used in shell scripts andbatch ﬁles that accompany Java applications distributed in single
.jar  ﬁles.
There are several other command-line options that are less commonly
used. We will cover some of them in later chapters when their use will makemore sense. Of course, full documentation on all options for this command isin the Sun Java SDK Development Tools documentation.
COMPLETE , UP-TO-DATE PROGRAM  DOCUMENTATION  MADE EASY 5.5
One of Java’s most useful features is javadoc , a command that (by default)
produces comprehensive HTML program documentation directly from theprogram source. Since it works from the source, it can be automated, and youmay be certain that the documentation is up-to-date. It takes much of thedocumentation burden off of programmers and permits new programmers tojoin a project and rapidly come up to speed because there is comprehensivedocumentation in a standard format. The javadoc  tool produces HTMLChapter 5 The Sun Microsystems Java Software Development Kit 122
documentation by default, but this is because it uses a doclet  that produces
HTML documentation. You can write your own doclet that produces whateverformat you wish. Most ﬁnd the HTML documentation so satisfactory thatcustom doclets are rare.
Javadoc can be a large topic, because it not only documents all classes,
methods, and class variables, but can also use detailed text from specially for-matted comments in the source code. We will cover Javadoc comments onlybrieﬂy here, but you will see examples in our project code throughout this book.
Running javadoc 5.5.1
The javadoc  command has the following general form:
javadoc [ options...] [package names ...] [source filenames ...]
 [@optfile ...]
Options are covered in the next section. You can specify the classes to
document in two ways. First, you can list one or more Java packages on thecommand line. Source code for the named packages is searched for on thesource classpath (see Section 5.5.2). Wildcards are not permitted inpackage names.
Second, you may list as many Java source ﬁles as you like, and you may
use wildcards in the names.
As with the javac  compiler above, the 
@optfile  allows you to name a text
ﬁle whose lines are treated as arguments as if they had been typed on the com-mand line.
Example 5.5 shows how to run javadoc  on our small multiclass sample.
In this case, we were in the “base directory” of the package when we ran
the command. In other words, 
net was a subdirectory of the current working
directory when we ran Javadoc. Javadoc uses the same default classpaths andenvironment variables as javac  does, so by default “
.” is on the path.
Generally, specifying packages is the most convenient way to document a
number of classes, since packages are how collections of classes are generallymanaged in Java development.
Figure 5.1 shows the main screen of the documentation thus produced.123 5.5 Complete, Up-to-Date Program Documentation Made Easy
Example 5.5 Running javadoc  with defaults against a package
$ javadoc net.multitool.Payback
Loading source files for package net.multitool.Payback...Constructing Javadoc information...Standard Doclet version 1.4.1
Generating constant-values.html...
Building tree for all the packages and classes...Building index for all the packages and classes...Generating overview-tree.html...Generating index-all.html...Generating deprecated-list.html...Building index for all classes...Generating allclasses-frame.html...Generating allclasses-noframe.html...Generating index.html...Generating packages.html...Generating net/multitool/Payback/package-frame.html...Generating net/multitool/Payback/package-summary.html...Generating net/multitool/Payback/package-tree.html...Generating net/multitool/Payback/Account.html...Generating net/multitool/Payback/Cost.html...Generating net/multitool/Payback/DebtAccount.html...Generating net/multitool/Payback/Payback.html...Generating net/multitool/Payback/Purchase.html...Generating net/multitool/Payback/SavingsAccount.html...Generating package-list...Generating help-doc.html...Generating stylesheet.css...$
Javadoc Command-Line Options 5.5.2
As with other options documentation in this chapter, this is not intended to
be a complete reference document. We are documenting only the most impor-tant command-line switches.
-public
Causes only public classes, members, and methods to be documented. Youmight want this for end-user documentation of a library.Chapter 5 The Sun Microsystems Java Software Development Kit 124
Figure 5.1 Javadoc documentation viewed in Konqueror Web browser
-protected
Causes public and protected classes, members, and methods to be docu-
mented. This is the default documentation level.  This is also the most likely
level at which you would want to document code meant for distribution.
-package
We suspect you can see where this is going. This switch causes package,protected, and public classes, members, and methods to be documented.
-private
This switch causes all classes, members, and methods to be documented.In our experience, this is the setting you will want to use for internalprojects. It documents everything.
-sourcepath  and -classpath
These are the paths that will be searched for source classes or referencedclasses. These switches work like the corresponding switches for the javac
compiler.125 5.5 Complete, Up-to-Date Program Documentation Made Easy
-verbose  and -quiet
These switches control how much output is produced as javadoc  runs. If
you choose -verbose , detailed information is produced (more than the
default; in current versions, this option mostly shows time measurementsof the parsing of each source ﬁle). If you choose the 
-quiet  option,
progress messages are suppressed completely.
-doclet starting_class
We’re not going to go into too much detail on this, but this switch allows
you to name a doclet (a class that uses the Doclet API) to use in place ofthe default doclet. See the next paragraph for more information.
All of the switches documented so far are provided by the javadoc  program
itself. Javadoc, like the rest of the Sun Microsystems Java SDK, is written inJava. The authors of javadoc  took advantage of this. The default behavior of
javadoc  is to produce HTML documentation with a standard look and feel.
However, there exists an API, called the Doclet API, which allows you to writea Java class of your own to process the information parsed out of the source byjavadoc . For details, see the Doclet Overview
3 on Sun’s Web site.
Sun provides a default doclet that produces HTML documentation. That
doclet takes a number of command-line options as well. We’ll cover the mostimportant of those now. Remember, these are provided by the standard doclet.If you use the 
-doclet  switch, then these switches will not be available (unless,
of course, the alternate doclet just happens to provide them).
-d directory
By default, the HTML documentation is saved in the same directory as
the source. Use this switch to specify an alternate directory into whichdocumentation is to be placed.
-use
Causes javadoc  to generate a “Use” page for each class and package. Such
a page is a cross-reference to all uses of the class or package.
-version
Causes any @version  tag data to be included in the documentation. If
you are using CVS for source control (and why wouldn’t you?) we
3.http://java.sun.com/j2se/1.4.1/docs/tooldocs/javadoc/overview.htmlChapter 5 The Sun Microsystems Java Software Development Kit 126
recommend adding $Id$ after the version tag, which CVS will automati-
cally replace by its ID string containing the ﬁlename, CVS revision num-ber, date/time and the author of last check-in. (For more about CVS, seeChapter 8.)
-author
Causes any @author  tag data to be included in the documentation.
-splitindex
Causes the alphabetical index to be broken into multiple pages, one perletter. Can be useful when you have a very large number of classes and/orpackages documented in a single Javadoc document set.
-windowtitle title
Sets the title for the document set. The text that follows this switch will
go into the HTML <title>  element on documentation pages.
-nodeprecated
This causes all deprecated methods and classes to go undocumented.Normally they are documented, but marked as deprecated.
-nodeprecatedlist
Drops deprecated classes and methods from indexes, lists, and cross-references, but leaves the actual documentation in place.
There are actually many more switches. Some of the most important that
we haven’t covered are the 
-link , -linkoffline , and related tags. If you end
up producing many API packages and document them separately, you can usethese switches to link your separate Javadoc documentation together seamlessly,so that when you use classes from separately documented packages, the refer-ences in the documentation for your code will be live links to that separatedocumentation. For details on these and other switches, see the Sundocumentation on javadoc .
4
4.http://java.sun.com/j2se/1.4.2/docs/tooldocs/solaris/javadoc.html127 5.5 Complete, Up-to-Date Program Documentation Made Easy
Javadoc Comments 5.5.3
There’s more to Javadoc than just documenting the types and names of classes,
methods, and arguments. A developer can annotate or supplement the docu-mentation by placing specially formatted comments in his or her code.
A Javadoc comment begins with the C-style open comment plus at least
one more asterisk. It ends with a C-style close comment. In other words:
/* This is a C-style comment, but it
 is _not_ a Javadoc comment. */
/** This is a C-style comment, but it
 is also a Javadoc comment. */
This isn’t a part of the Java programming language. It is merely a lexical hack
to allow the javadoc  program to recognize a comment it should pick up and
process. Javadoc is fairly intelligent about where to place the text extracted froma Javadoc comment. For example, a Javadoc comment placed just before thestart of a class will appear in the class summary on the package page and at thetop of the class detail page. A Javadoc comment placed just before a methodwill appear in the method’s box on the class detail page, and so on.
We encourage you to discover for yourself the relationship between
Javadoc comments and the output of the standard doclet. Use it. Experiment.Or, you can go and read the ofﬁcial Sun Microsystems documentation onJavadoc.
5 That’s your choice.
Since comment text is extracted and placed into certain positions in an
HTML document, you may use HTML tags in your comments to affect howthey are rendered. Be aware that when you do so, you may get unexpectedresults if you use any custom doclets.
There’s more to it than that, however. There are a number of macros that
you can place in Javadoc comments to mark data of particular signiﬁcance. Forexample, 
@author  should appear just before the name of the author of a
particular piece of code.
These at-tags  must appear after all descriptive text in a Javadoc comment.6
A tag must be at the beginning of a line within the comment (ignoring any
5.http://java.sun.com/j2se/1.4.2/docs/tooldocs/solaris/javadoc.html
6. The exception is embedded tags, which we will discuss in a moment.Chapter 5 The Sun Microsystems Java Software Development Kit 128
Example 5.6 Sample Javadoc comment with at-tags
/**
 * addWait - adds in the given wait time to all the counters; * we could say much more about the method here, but let me say * that we sometimes include HTML tags directly in our comments. * Since Javadoc will run all our text together, we may need: <br> *         break tags <br> *         or paragraph tags <br> *         for spacing and separation. * <p>We also add <i>other</i> HTML tags for <b>emphasis</b>. * <p>You should still try to make the comment readable, though, * for the programmer who is editing the source, not * just for those looking at the formatted Javadoc. * @author John Q. Programmer * @version $Id$ *  * @param delay - elapsed time, in milliseconds * @throws TakesTooLongException * @returns total time, in milliseconds * * @see net.multitool.util.TakesTooLongException, net.multitool.ctrl.Time#count * */public longaddWait(long delay){  // ...}
preceding whitespace or asterisks). The tag’s data is everything from the end of
the tag to the end of the line (Example 5.6.)
Here are the standard at-tags:
@author
Everything from the tag to the end of the line is taken as the name of thecode’s author.
@deprecated
Marks the method or class deprecated. This tag may be optionally followedby explanatory text. If present, this text should describe when and why theclass or method was deprecated and what programmers should use instead.129 5.5 Complete, Up-to-Date Program Documentation Made Easy
@exception  or @throws
Only valid in the comment for a method or constructor. This tag is
followed by the name of an exception class (a descendant of
java.lang.Exception ) and optionally by additional explanatory text.
The intent is to list the exceptions that the method throws.
@param
Only valid in the comment for a method or constructor. This tag shouldbe followed by the name of a parameter to the method followed by descrip-tive text. This is used to document method and constructor parameters.
@return
Only valid in the comment for a method.7 This tag is followed by
descriptive text meant to document the return value of the method.
@see
Populates a “See Also” section in the documentation that will providehyperlinks to related content. There is a general format for linking to anyURL, but the most common use is to refer to other elements in the sameJava program. See below for the general format of such links.
In addition to these standard at-tags, there are other at-tags that may be
embedded in any comment text—either the comment itself or in text that isan argument to a standard at-tag.
Such tags are placed within curly braces, for example 
{@example} , within
a Javadoc comment. The one we use the most is the @link  tag, which allows
you to make a reference to another package, class, method, or class member.The general format is the same as that for the 
@see  tag:
package_name .class_name #member_or_method_name
Any of these elements is optional.
The embedded at-tags include:
@docRoot
This tag may be used when embedding HTML anchor or image tags(
A or IMG tags) in a Javadoc comment to supply the root part of the
7. But not a constructor in this case, because constructors cannot return a value.Chapter 5 The Sun Microsystems Java Software Development Kit 130
documentation path. You should always use this instead of hard-coding
the full URL, or a change in directory structure or server conﬁgurationmight break all of your links.
@link
Allows you to embed a cross-reference to another section of the program’sdocumentation directly in comment text. The format of a reference is thesame as that for the 
@see  tag.
This list is not complete. As always, see the ofﬁcial documentation8
for details.
DISPENSING WITH  APPLETS 5.6
While this book does not cover writing applets, we should mention that, since
an applet does not (generally) have a main()  method, you need something else
to launch it outside of a browser. Enter appletviewer . This program provides
an execution environment for applets.
Why No Applets?
The decision to not cover applets was based both on limited space andon some deployment issues with applets. A surprisingly large number ofpeople are running with either very old browsers that support onlyJava 1.1.x features, or that support Java runtime plug-ins but do not havethem installed or enabled. Also, applets have severe limitations (for soundsecurity reasons), and enabling various features requires a good under-standing of the 
SecurityManager  Java classes, which could ﬁll a book
by themselves. We chose to minimize coverage of applets for thesereasons.
8.http://java.sun.com/j2se/1.4.2/docs/tooldocs/solaris/javadoc.html131 5.6 Dispensing with Applets
GOING NATIVE 5.7
Now we come to the deeper darker mysteries. Let us take a look at javah . No,
javah  is not a Hebrew word. It is not some lost mystical text from the days be-
fore science supplanted magic. It is the Java C header and stub ﬁle generator.
If you are not already fairly experienced in writing, compiling, and build-
ing shared libraries in C on a Linux system, we would suggest that you skip thissection, at least until you have developed intermediate skills in these areas.Otherwise, feel free to proceed.
We’re going to walk you very quickly through building a Java native
method here.
9Don’t worry if you don’t quite follow it all. We will cover this
topic at greater length elsewhere in the book. For now, we’re giving you thehighlights. Also be sure to check out Section 5.15. We’ll point you to manyadditional resources on JNI (Java Native Interface) in that section.
Sounds pretty intimidating, huh? Well, depending upon your background
and experience, it can be a bit intimidating. As much as this will hurt some die-hard Java purists, Java is not the right language for everything. Java’s size andsemiinterpreted nature in particular make Java ill-suited for the “close to themetal” tasks, such as device drivers and raw socket networking.
Fortunately, Java’s designers were of this rocket-scientist breed (and so,
for that matter, are your bending authors), so they gave Java programmers aback door: native methods . A native method is a class method whose name, ar-
guments, and return type are declared in Java, but whose underlying implemen-tation is written in “native code” (usually C, but it could be any compiledlanguage that can match C’s stack frame conventions).
As an example, let’s implement a native method that will use the native
Linux C library calls to get the current program’s effective user ID and thename associated with that user.
First, we will write the Java class (Example 5.7).You may never have seen code like that at the start of a class deﬁnition.
The block declared
static { ... }
9. You might be tempted to call our comments in the introduction where we mentioned that
we did not like purely pedagogical examples and that we would provide real, useful code. Well,we have to confess that there are some features of the Java language that we couldn’t cram intoour real-world examples. This JNI sample is one such. We admit our failure, and we apologize.Chapter 5 The Sun Microsystems Java Software Development Kit 132
Example 5.7 Java application with a native method ( GetUser.java )
public class GetUser {
  static {    System.loadLibrary("getuser");  }
  public native String getUserName();  public static void main(String[] args)
  {    GetUser usr = new GetUser();
    System.out.println(usr.getUserName());
  }}
is called a static initializer  and we’ll discuss it in a moment.
Once you have the Java code, compile it with javac . You now have the
compiled class. The next step is to use the javah  tool to build the header ﬁle
for your C code.
$ javah GetUser
Example 5.8 shows the header ﬁle thus produced.Note that you run javah  on the class ﬁle, not on the source ﬁle. The nor-
mal class name to classpath mappings apply. The ﬁle produced as a result iscalled, in this case, 
GetUser.h . The next step is to write the C code that
implements the method (Example 5.9).
There’s a lot going on here. First, the constant, L_cuserid , is deﬁned in
stdio.h ; it represents the number of characters required to hold a user name.
We’re deﬁning a char array to hold that number of characters plus one.10 We
are then calling the cuserid()  function (see the manpage of cuserid(3) ) to
get the user name of the effective user ID of the process.
That much is familiar C. But what is the argument list? Our method took
no arguments. And what’s with the functions being called through the pointerargument?
10. What can we say? We’re paranoid about the trailing null. Sue us.133 5.7 Going Native
Example 5.8 Header ﬁle for GetUser  native methods ( GetUser.h )
/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>/* Header for class GetUser */
#ifndef _Included_GetUser
#define _Included_GetUser#ifdef __cplusplusextern "C" {#endif/* * Class:     GetUser * Method:    getUserName * Signature: ()Ljava/lang/String; */JNIEXPORT jstring JNICALL Java_GetUser_getUserName  (JNIEnv *, jobject);
#ifdef __cplusplus
}#endif#endif
Example 5.9 Native method’s C implementation ﬁle ( GetUser.c )
#include "GetUser.h"
#include <stdio.h>
JNIEXPORT jstring JNICALL 
Java_GetUser_getUserName(JNIEnv *jenv, jobject obj){  char buffer[L_cuserid + 1];
  cuserid(buffer);  return (*jenv)->NewStringUTF(jenv, buffer);
}
All of the Java class member data and Java class methods may be reached
through the JNIEnv  pointer argument. There are also methods provided by
JNI itself. One of those is NewStringUTF() . Remember that Java String s are
Unicode, not 8-bit ASCII, so you must convert to and from Unicode (UTF-8Chapter 5 The Sun Microsystems Java Software Development Kit 134
is an 8-bit encoding for Unicode that coincides with ASCII in the low 7 bits,
so it is often used for such conversions). You can think of the JNIEnv  as a C++
class pointer, or you can think of it as a structure of data and function pointers(that’s really what a C++ class is, after all). The bottom line is, it provides themeans to access and manipulate the Java environment from your native code.
The second argument, 
jobject , is the “this” pointer. It points to the
GetUser  class, and it is upcast to the JNI equivalent of the Java Object
type. If our method took parameters, they would follow these two constantarguments.
JNI is a huge topic. You can read more about it in the Sun Microsystems
JNI Tutorial,
11 or in Java 2 SDK JNI FAQ,12 or in the JNI 1.1 Speciﬁcation,13
or in the associated JDK 1.2 Update14 or the JDK 1.4 Update.15
Even with all of this “We’re too busy to explain things to you” going on
here, we’ve got a lot more to cover before we are done. The next step in ourlittle demo is to compile the C program and create a shared library of the code.
$ cc -c GetUser.c
$ cc -shared -o libgetuser.so GetUser.o$ export LD_LIBRARY_PATH=.
The ﬁrst line compiles the native method to a .o(object) ﬁle. The second
command makes a shared library out of it. Now, refer back to the static initial-izer in Example 5.7. A static initializer is run before everything else in a class,even before 
 main() . In this case, it uses the loadLibrary()  method of the
System  class to load the shared library we just created. Note that library naming
rules of the target OS are applied. The library is named getuser  and on
a Linux system it is assumed that that library will be in a ﬁle named
libgetuser.so .
The last line sets an environment variable, LD_LIBRARY_PATH , to provide
a path where Java will search for libraries. This is behavior inherited from So-laris. Linux uses ldconﬁg  to maintain a list of shared libraries. Usually, a library
is placed in a directory named in the ﬁle 
ld.so.conf  and a memory cache of
11.http://java.sun.com/docs/books/tutorial/native1.1/index.html
12.http://java.sun.com/products/jdk/faq/jni-j2sdk-faq.html
13.http://java.sun.com/products/jdk/1.2/docs/guide/jni/spec/jniTOC.doc.html
14.http://java.sun.com/j2se/1.4.1/docs/guide/jni/jni-12.html
15.http://java.sun.com/j2se/1.4.1/docs/guide/jni/jni-14.html135 5.7 Going Native
these libraries is built and maintained with the ldconﬁg  program. The library
loader in the JVM, however, works as the shared library system in Solaris, wherethe 
LD_LIBRARY_PATH  is searched for shared libraries. If you try a JNI method
and get library errors, check your LD_LIBRARY_PATH  ﬁrst. Here, we used “ .”,
meaning “current directory.” In practice, you wouldn’t do this. You would de-ploy your shared library to a standard location and have 
LD_LIBRARY_PATH
preset to that directory or directories. We just wanted to show you how itworks here.
Let’s see our class in action now.
$ java GetUser
mschwarz$ suPassword:# export LD_LIBRARY_PATH=.# java GetUserroot# exitexit$
To JNI or Not to JNI
We dislike religious debates. We have no desire to nail down what taints
the purity of Java and what does not. A warning we do want to give youis, if you are an experienced UNIX C/C++ developer, you must resist thetemptation to use JNI and native methods all over the place. The JavaAPIs are extensive, and there are probably classes that already do whatyou want to do. You will be tempted to use native methods because “youknow how to do it in C.” Resist. Find the Java way. JNI is a great way tointroduce subtle and hard to ﬁnd bugs into your Java programs. Leavethat to the API and JVM coders. ;-)
That said, we don’t want to discourage you from making use of JNI
when it is the right way, or the only way, for what you need to do. Thetool is there. Use it. Just remember what it does cost you in portabilityand what it may cost you in maintenance and debugging. Designdecisions have costs and beneﬁts. Try to ﬁnd the balance.Chapter 5 The Sun Microsystems Java Software Development Kit 136
Here you see the class being run, and, sure enough, it displays our user-
name. We then run su to become root and (after setting that library path) run
it again—and, sure enough, it tells us we are “root.”
We’ll talk more about JNI later in the book, but now you know enough
to be dangerous.
INTRODUCING  RMI 5.8
Remote Method Invocation  (RMI) is a system for distributing application code
over multiple hosts. It is a small part of multitier computing. Much of this bookwill be devoted to the how’s and why’s of multitier client/server computing.Here we are concerned only with the SDK tool rmic, the RMI compiler.
A Brief Introduction to RMI 5.8.1
Remote Method Invocation is a basic client-server model for invoking Java
methods over a network.
History and Background 5.8.1.1
One of the most common problems in computing is how best to make an ap-
plication available to the largest number of users at the least cost. To this endwe have seen the development of “timeshare” systems with dumb terminals allover the place. We have seen the evolution of distributed GUI systems with XWindows and its network display system, and with tools like VNC (VirtualNetwork Console).
16 We have seen the emergence of the PC, providing
autonomous computing at each worker’s desktop. And ﬁnally we have seen thedesktop turning slowly back into a terminal (albeit a prettier one) with theemergence of client-server computing.
What seems to have emerged from this progression is two major kinds of
software systems. One is the PC and associated hardware and software. Devel-opments here have dramatically increased the power and productivity of indi-vidual work. The PC revolution was indeed a real change throughout the worldof business and technology. But even with this, there are a host of applicationsand business functions that require a collection of data and resources to beavailable to multiple  workers at the same time. This is the second major kind
16.http://www.realvnc.com/137 5.8 Introducing RMI
of software systems. This second kind used to be the only kind, but now it may,
in a sense, be the minority of applications, but the most critical to an operation.This second class of system has come to be called enterprise  systems.
In enterprise computing, we have the same problem we opened with: How
do you make the information and resources available to everyone who needsthem at the lowest cost? And the answer is (as it always is) “that depends.”
These days, one of the most common solutions is to use a Web server to
publish  an application. This works well for a great many applications and it is
much easier to do than many other methods. That explains its popularity. TheWeb interface is quite limited, however, so for more user interface intensiveapplications, client-server computing evolved. To us techies, all of this stuff isclient-server. In this context however, client-server refers to a 2-tier systemwhere the UI and logic exist in a GUI application on a PC and commonresources are in an SQL database all the clients share.
This is also commonly used, but becomes expensive in a couple of cases.
The ﬁrst is when the database itself becomes a bottleneck because the numberof users grows and grows but only one database can exist. The second is simplythe cost of maintenance. Since the logic exists in the client, any change to thelogic requires updating the software on all clients. Even when a scheme for au-tomating this exists, it is still time-consuming and costly to get all the changesout to all users simultaneously. There are workarounds for both of these issues,but here we are concerned with a different solution altogether.
So, how can we have a UI richer than with a Web application but avoid
the pitfalls of the traditional 2-tier client-server computing? The answer is toseparate the UI from the business logic and the business logic from the under-lying data store. This results in 3 tiers— presentation , business logic , and data.
Much of this book will concern itself with 3-tier computing solutions.
Java has four major architectures for building 3-tier solutions. One of themis RMI.
17
RMI Basics 5.8.1.2
RMI works by sharing an interface between the client and the server. The inter-
face groups together the methods that a client may call on a server. A class is
17. The others are Enterprise JavaBeans, servlets, and JavaServer Pages. The latter two are Web-
based, and therefore suffer from the UI deﬁciencies of Web forms, but Sun calls them part ofEnterprise Java, so we will too.Chapter 5 The Sun Microsystems Java Software Development Kit 138
written on the server side that implements the interface, and a special compiler
is used to generate stubs for the server side and the client side. On the client
side, a call to an RMI method looks like any other method call, but it is sentacross the network to the server, where the actual instructions are carried out.Any return value is then passed back over the network to the client.
We will walk you through a very simple (and very pointless) example just
to show you the tools.
Writing the Interface 5.8.1.3
Our interface is pathetically simple. It is a class that sums two integer arguments
and returns an integer result. Example 5.10 shows the interface ﬁle.
NOTE
The names of the classes in the following examples may seem a bit strange,
and they are. It is because we aim to build on this example later.
Example 5.10 The Session  interface
package net.multitool.RMIDemo;
import java.rmi.*;public interface Session extends Remote {
  public int add(int x, int y) throws RemoteException;}
The two important things to note here are that the interface must extend
java.rmi.Remote  and that any remote method must be deﬁned as throwing
java.rmi.RemoteException . If anything goes wrong during an RMI call,
like someone tripping over a network cable, the call will not complete success-fully and an exception of that type will be thrown. It is not possible to have aRMI method that cannot throw this exception.
Beyond those features, you can see that deﬁning remote methods is quite
familiar and easy.139 5.8 Introducing RMI
Writing the Server Class 5.8.1.4
An interface is an “empty vessel.” Before any interface can be used, you must
have an actual class that implements the interface. In an RMI application, theimplementing class is the server (Example 5.11).
The class is named 
SessionImpl  to emphasize its relationship with the
Session  interface. There is no requirement to match up such names. Likewise,
the RMI name given, //penfold/Session , uses the interface name, but it
could use any name. It is a good idea to develop a naming convention for RMIinterfaces and their implementations. It is critical  to develop naming conven-
tions for RMI registry names, particularly in production environments. With-out a naming convention, it is difﬁcult to avoid confusion and even chaos.What happens when multiple business units develop RMI code destined for asingle production server, and they have all made an RMI interface named
Session , or Payment ?18 Bad things happen.
There is no “one size ﬁts all” naming convention that we can offer. Possi-
bilities include using package names in RMI registry names, using some elementof the business area as a component of the name (such as 
AccountingSession ,
ShippingSession , ExecutiveSession ). All that matters is that an unambigu-
ous standard be created and followed.
Let’s spend some time talking about what this code does.First, notice that the class extends 
UnicastRemoteObject . This is not
necessary, but using that as a base class saves a lot of server setup. There aretimes when you would want to do such setup manually, but for our purposehere it saves a lot of effort. The class also implements our remote interface.
The ﬁrst method is a constructor that calls the superclass constructor. At
ﬁrst glance, this is pointless. Any Java class gets a default constructor that justcalls the superclass constructor, so why is this here? It is here because the super-class constructor throws 
RemoteException . If we didn’t deﬁne a constructor
like the one here specifying that it throws RemoteException , the compiler
would complain that there is an unhandled exception. So we deﬁne a construc-tor identical to a default constructor except that it speciﬁes that it can throwthe exception.
18. One solution is to use a more advanced naming system, such as LDAP. See
Section 21.3.2.3.Chapter 5 The Sun Microsystems Java Software Development Kit 140
Example 5.11 The Session  server implementation
package net.multitool.RMIDemo;
import net.multitool.RMIDemo.*;
import java.rmi.*;import java.rmi.server.*;
/** SessionImpl is the server class for the Session RMI interface.
 */public classSessionImpl  extends UnicastRemoteObject  implements Session{  /** Constructor needed to ensure call to UnicastRemoteObject   *  constructor and to thus propagate the possible exception.   */  public SessionImpl() throws RemoteException {    super();  }
  /** A static main() for the server. */
  public static void main(String[] arglist)  {    if (System.getSecurityManager() == null) {      System.setSecurityManager(new RMISecurityManager());    }
    String rmiName = "//penfold/Session";
    try {      Session adder = new SessionImpl();      Naming.rebind(rmiName, adder);    } catch (Exception e) {      e.printStackTrace();    }  }
  /** Implementation of the RMI method, add. */
  public int add(int x, int y) throws java.rmi.RemoteException  {    return x+y;  }}141 5.8 Introducing RMI
Next, we have the server main() method. It ﬁrst sets a security manager.
The security manager controls what the VM is allowed to do. A number ofdefault security managers are provided, and here we use one that is designedspeciﬁcally to give safe and reasonable defaults for RMI applications. You can,of course, write your own security manager. Security managers use “policyspeciﬁcations” to alter their capabilities. For now, we will explain enough torun a simple example. See Section 5.8.4.2 for more information on policies forour example.
Remember that 
main()  is static, so there is no instance of SessionImpl
yet, and thus also no instance of Session . We declare a variable of type
Session , and set it to a new instance of SessionImpl . (There is no need
to typecast here because SessionImpl  implements Session , therefore
SessionImpl  is, among other things, a Session .) We now have an instance
of the server class.
Next, the server must make itself available to the world. It does this by
registering itself with the RMI registry (see Section 5.8.3). This is done througha static method of the 
java.rmi.Naming  class, rebind() . Put simply, this
maps a remote object to a string name in the registry. When clients contact theregistry looking for a name then, if a remote object is mapped to that name,the communication can take place (yes, we are simplifying at the moment).The call to 
rebind()  does not return. The server is up and running.
Finally, we have the implementation of our remote method, add() .
This looks like a lot of hassle to go through, and it is, but consider writing
an interface that offers, for example, methods like getDirContents() ,
chDir() , downloadFile() , uploadFile() . You’ve just written something
like an FTP server. No matter how many methods you add to your interface,the complexity of the setup code does not increase. Maybe now it looks a littlemore useful?
Writing the Client Class 5.8.1.5
At this point, Example 5.12 should be fairly obvious. Our class has just a single
static method, main() . It, like our server side main() , sets up a security man-
ager. It then contacts a registry on the machine named penfold  looking for an
instance of a remote interface named Session  (again, lookup()  is a static
method of the java.rmi.Naming  class). We store that reference in a variable
of type Session  called sess . We can then call the add()  on sess . We’ll show
the server and client running shortly.Chapter 5 The Sun Microsystems Java Software Development Kit 142
Example 5.12 The RMI client program
package net.multitool.RMIDemo;
import java.rmi.*;public class Client {
  public static void main(String[] arglist) {    if (System.getSecurityManager() == null) {      System.setSecurityManager(new RMISecurityManager());    }
    try {
      String name = "//penfold/Session";      // Obtain reference to the remote object      Session sess = (Session) Naming.lookup(name);
      System.out.println("Pointless RMI Client. 47 + 13 = " + 
                            sess.add(47,13) + ", right?");    } catch (Exception e) {      e.printStackTrace();    }  }}
The rmic Tool 5.8.2
In order for a remote object to make itself available and in order for a client to
be able to call such an object, each method needs a client and server-side stub
to proxy the method call. Arguments to the method call are converted tostreamable data (this process is called marshaling ) by the client stub, and that
data is sent over the network to the server stub, which must convert that streaminto object instances on the server side (this is called unmarshaling ). The server-
side stub then calls the actual method implementation. When the method re-turns, any return values and changes to the state of the arguments must bemarshaled by the server stub and sent back to the client stub where they areunmarshaled and stored in the correct locations on the client.
This was the traditionally painful part of writing multitier clients. What
rmic does is automate the generation of these stubs, so writing a remote method
is only slightly more difﬁcult than writing any other method.143 5.8 Introducing RMI
To generate RMI stubs for our application, run rmic19 against the class
that implements the remote interface:
penfold$ rmic net.multitool.RMIDemo.SessionImpl
When you are writing “traditional” Java RMI, that is just about all you
need to know about rmic. The program actually has a large number of options
and switches, but most of these are to support alternate protocols and systems,such as CORBA IDL and IIOP. If you know what these are, and make use ofthese, you will ﬁnd details on these options in Sun’s rmic tool documentation.
20
The rmiregistry Tool 5.8.3
The rmiregistry  is a naming service that binds RMI server stubs to simple
names. Invoking it is incredibly simple. Just type rmiregistry . You may want
to run it on other than the default port (1099). For that, just specify the portnumber on the command line:
$ rmiregistry 21099 &
That example shows us running a registry on port 21099 and running it
in the background. You might want to use a nonstandard port in order to runa test version of the service while the production version remains available onthe standard port.
That is just about all there is to rmiregistry . You can ﬁnd details in the
Sun Java SDK documentation.
Setting Up Servers and Clients 5.8.4
So far, we have written an RMI interface, a server implementation, and a client
implementation. We have generated RMI stubs for our RMI object. We are
19. Be careful! If you have one or more Java SDKs installed and you have the GNU Compiler
for Java installed, watch out for your PATH . The Java compiler and the Java runtime from the
JDK don’t collide with gcj because the compiler has a different name and gcj compiles to native
binaries. But gcj does have an rmic compiler, and it is usually in /usr/bin , which is usually
ahead of your JDK in the executable path. If you run rmic and it explodes with errors, make
sure you aren’t running the rmic from gcj against .class  ﬁles from a JDK. (And, yes, this bit
me and had me confused for a while!)
20.http://java.sun.com/j2se/1.4.2/docs/tooldocs/solaris/rmic.htmlChapter 5 The Sun Microsystems Java Software Development Kit 144
almost ready to ﬁre our system up and give it a try. But ﬁrst, we’ll give you
some information about our sample environment and talk very brieﬂy aboutsecurity.
21
What RMI Servers and Clients Need to Be Able to Do 5.8.4.1
RMI servers and clients need to be able to listen for connections on network
ports, and they need to be able to initiate connections on network ports. Backin the Java 1.1 days, there were no limits on what RMI methods could do. The
CLASSPATH was assumed to be trusted. With the RMI 1.2 protocol speciﬁca-
tion, the ability to actually pass bytecodes between VMs over RMI was added.That means that it is possible for clients to pass code to servers. Obviously, thisopens a lot of possible security risks. For this reason, RMI got a security man-agement layer. It is the same security manager as the one that applets use. Italso provides a default security manager class that has virtually all such capabil-ities safely turned off. We need to turn on some of these capabilities in orderto make our sample work.
The RMI system expects Java classes to be made available through one of
two paths.
1. The 
CLASSPATH , either the environment variable or on the command line.
2. Through a property that points at URL. This URL may be a file:  URL,
or an http:  URL.
We are going to do the simplest case for now. We will have our compiled
code installed on both our server system and our client system. The classes willall be referenced relative to the default classpath (in other words, relative to “.”,the current directory).
This is not the typical case. The most common case will be for the
classes to be available in a JAR ﬁle via a Web server, and for the
java.rmi.server.codebase  property to be set to point to the JAR ﬁle via
an http:  URL.
21. We’re going to gloss over this subject for now.145 5.8 Introducing RMI
Example 5.13 A Java security policy ﬁle suitable for the RMI example
grant {
  permission java.net.SocketPermission "*:1024-65535", "connect,accept";  permission java.net.SocketPermission "*:80", "connect,accept";};
Our Environment 5.8.4.2
We have two machines. One, penfold , is our server machine. The other,
grovel , is our client machine. To keep things straight in our samples, the shell
prompts will have the host names in them.
If you are using a JDK that supports the 1.2 RMI speciﬁcation (and we
hope you are—it’s in all current JDKs), you have to give your server and yourclient permission to access the network ports needed to run. By default, theJava runtime will look for a security policy ﬁle in the home directory of theuser running the VM. The default name of the ﬁle is 
.java.policy . Exam-
ple 5.13 shows what we suggest you put in this ﬁle, at least to run this example.
NOTE
You will have to put this in your home directory both on the server and on all
client machines.
Compiling and Running the Server 5.8.4.3
Our packages here follow Sun’s suggested naming convention of your
domain name, reversed, followed by your package names. It so happens thatMr. Schwarz’s domain is called 
multitool.net  (named after his ﬁrst
book, Multitool Linux ), so we put all of these classes in a package called
net.multitool.RMIDemo .
For all of the examples in this section, as well as the following section on
building and running the client, assume that our current working directory isthe directory that contains the 
net directory of our source code.
The output you see in Example 5.14 includes the result of running our
client once. Note that the SessionImpl  class doesn’t terminate. It keeps
running to service clients indeﬁnitely.Chapter 5 The Sun Microsystems Java Software Development Kit 146
Example 5.14 Compiling and running our server on penfold .
penfold$ javac net/multitool/RMIDemo/SessionImpl.java
penfold$ rmic net.multitool.RMIDemo.SessionImplpenfold$ rmiregistry & 17286penfold$ java net.multitool.RMIDemo.SessionImplAsked to add 47 and 13
Compiling and Running the Client 5.8.4.4
Example 5.15 shows the actual steps we ran to build and run the client.
Example 5.15 Compiling and running our client on grovel
grovel$ javac net/multitool/RMIDemo/Client.java
grovel$ javac net/multitool/RMIDemo/SessionImpl.javagrovel$ /usr/java/jdk/bin/rmic net.multitool.RMIDemo.SessionImplgrovel$ java net.multitool.RMIDemo.ClientPointless RMI Client.  47+13=60, right?grovel$
NOTE
We compile the server class, SessionImpl , on the client side and run rmic
against it just to produce the stubs the client requires. You could copy the stubclasses from the server machine, or you could put them in a JAR ﬁle, put that ﬁleon a Web server, and have the 
java.rmi.server.codebase property point
to that JAR ﬁle. We’re taking the simple way here, but in a real implementation,you would not do it this way. We’ll cover more realistic cases later.
RMI Summary 5.8.5
RMI greatly simpliﬁes the business of writing multitier client-server applica-
tions. It is suitable for many classes of distributed computing problems, but itdoes lack several features that required in large, mission-critical applications.For one thing, it lacks any sort of transaction support. If a method invocationfails, the client may not know for certain whether the server ﬁnished some work,like writing to a database, before the failure. Also, the rmiregistry  program is147 5.8 Introducing RMI
a very simplistic naming/lookup system. Clients must know where to ﬁnd the
registry with the resources they need.
RMI is very useful for problems of a certain scale, but it is not, in and of
itself, sufﬁcient for high-volume, highly available, mission-critical enterprisesystems.
22But that is what J2EE and EJB are for. We’ll deal with those in
Part V later in the book.
THE JAVA DEBUGGER 5.9
How can you stand using the SDK? It doesn’t even have a debugger!
Wrong. It has a debugger. It just has an extremely basic command-line
debugger. Example 5.16 shows the output of its help.
Again, we are not going to document everything here. That’s what the
online Sun Microsystems Java SDK documentation is for. Instead, we will usethe debugger to step through the execution of our simple application and showyou some of the debugger’s basic operations.
There are two ways to invoke jdb. One is to attach it to an already running
JVM that has been started with remote debugging enabled. See the Java SDKdocumentation for details on that method. Here we’ll show you the simplercase of invoking the program locally by running the application directly underthe debugger.
The basic invocation is:
$ jdb
You may optionally name the class whose main()  is to be executed under
the debugger, but we usually use the run from inside the debugger itself to do
this. Remember that if you want to be able to view local variables in the debug-ger, you must have compiled your class or classes with the 
-g option of javac .
In the rest of this section, we will examine an actual debug session. We
will run our single-class application, FetchURL, and use it to retrieve the
index.html ﬁle from the Web server on the laptop on which this chapter is
being written. To refresh your memory, remember that the source code forFetchURL is at Example 3.30. Example 5.17 is what that ﬁle looks like.
22. If that sentence did not cause you to get “buzzword bingo,” then you aren’t trying.Chapter 5 The Sun Microsystems Java Software Development Kit 148
Example 5.16 The Java debugger help command output
$ jdb GetUser
Initializing jdb ...> help** command list **run [class [args]]        -- start execution of application's main class
threads [threadgroup]     -- list threads
thread <thread id>        -- set default threadsuspend [thread id(s)]    -- suspend threads (default: all)resume [thread id(s)]     -- resume threads (default: all)where [thread id] | all   -- dump a thread's stackwherei [thread id] | all  -- dump a thread's stack, with pc infoup [n frames]             -- move up a thread's stackdown [n frames]           -- move down a thread's stackkill <thread> <expr>      -- kill a thread with the given exception objectinterrupt <thread>        -- interrupt a thread
print <expr>              -- print value of expression
dump <expr>               -- print all object informationeval <expr>               -- evaluate expression (same as print)set <lvalue> = <expr>     -- assign new value to field/variable/array elementlocals                    -- print all local variables in current stack frame
classes                   -- list currently known classes
class <class id>          -- show details of named classmethods <class id>        -- list a class's methodsfields <class id>         -- list a class's fields
threadgroups              -- list threadgroups
threadgroup <name>        -- set current threadgroup
stop in <class id>.<method>[(argument_type,...)]
                          -- set a breakpoint in a methodstop at <class id>:<line> -- set a breakpoint at a lineclear <class id>.<method>[(argument_type,...)]                          -- clear a breakpoint in a methodclear <class id>:<line>   -- clear a breakpoint at a lineclear                     -- list breakpointscatch [uncaught|caught|all] <exception-class id>                          -- break when specified exception occursignore [uncaught|caught|all] <exception-class id>                          -- cancel 'catch' for the specified exceptionwatch [access|all] <class id>.<field name>                          -- watch access/modifications to a fieldunwatch [access|all] <class id>.<field name>                          -- discontinue watching access/modifications to a fieldtrace methods [thread]    -- trace method entry and exit149 5.9 The Java Debugger
untrace methods [thread]  -- stop tracing method entry and exit
step                      -- execute current linestep up                   -- execute until the current method returns to its callerstepi                     -- execute current instructionnext                      -- step one line (step OVER calls)cont                      -- continue execution from breakpoint
list [line number|method] -- print source code
use (or sourcepath) [source file path]                          -- display or change the source pathexclude [class id ... | "none"]                          -- do not report step or method events for specified classesclasspath                 -- print classpath info from target VM
monitor <command>         -- execute command each time the program stops
monitor                   -- list monitorsunmonitor <monitor#>      -- delete a monitorread <filename>           -- read and execute a command file
lock <expr>               -- print lock info for an object
threadlocks [thread id]   -- print lock info for a thread
pop                       -- pop the stack through and including the current frame
reenter                   -- same as pop, but current frame is reenteredredefine <class id> <class filename>                          -- redefine the code for a class
disablegc <expr>          -- prevent garbage collection of an object
enablegc <expr>           -- permit garbage collection of an object
!!                        -- repeat last command
<n> <command>             -- repeat command n timeshelp (or ?)               -- list commandsversion                   -- print version informationexit (or quit)            -- exit debugger
<class id> or <exception-class id>: full class name with package
qualifiers or a pattern with a leading or trailing wildcard ('*')NOTE: any wildcard pattern will be replaced by at most one full classname matching the pattern.<thread id>: thread number as reported in the 'threads' command<expr>: a Java(tm) Programming Language expression.Most common syntax is supported.
Startup commands can be placed in either "jdb.ini" or ".jdbrc"
in user.home or user.dir>Chapter 5 The Sun Microsystems Java Software Development Kit 150
Example 5.17 index.html  used in jdb session
<HTML>
  <HEAD>    <TITLE>RedHat Linux Laptop</TITLE>  </HEAD>  <BODY>    <H1>RedHat Linux Laptop</H1>    <P>You have contacted Michael Schwarz's RedHat Linux Laptop.      You would probably rather     <A HREF="http://www.multitool.net/">see his permanent Web     page</A> since this server goes up and down all the time, what     with it being on a laptop.</P>  </BODY></HTML>
Example 5.18 is an actual transcript of a real jdb session. It is annotated
with explanatory comments. Our goal here is to get you going. The best wayto learn jdb, or indeed any of these tools, is to use them.
Obviously, this little session has merely scratched the surface of the Java
debugger. You can debug multithreaded applications with commands that cansuspend and resume individual threads, list the running threads, switch your“executable view” between threads, and so forth. You can trace method calls.You can monitor variables. You can execute expressions (including assignmentexpressions, allowing you to force variables to certain values). You can browseclasses. You can dump all local variables with a single command. The debuggeris quite capable, if a bit limited in user interface.
23 Learn it. Play with it. Step
through your favorite Java program with it.
23. As you know, we do not automatically like IDEs and GUI development tools (see Sec-
tion 5.2). A debugger is an exception to that rule. When debugging, a well designed UI witha code pane, a stack pane, a data viewer, a class browser, a thread selection pane, and so on isenormously helpful. You need to be able to see all these elements nearly simultaneously; youneed to see the whole system  as it runs. The command-line debugger makes everything you need
available, but with a traditional “glass-teletype” UI that is quite awkward. By all means, learnthe CLI debugger, but then ﬁnd a good Java debugger with a windowed UI of some kind. Itis hard to say which compiler UI is the best, but I think we can safely say the command-linedebugger UI is the worst! You should know it as a last resort, but use it as a last resort!151 5.9 The Java Debugger
Example 5.18 An actual jdb session, with commentary
$ jdb
Initializing jdb ...> stop in FetchURL.main (1)
Deferring breakpoint FetchURL.main.It will be set after the class is loaded.> run FetchURL http://localhostrun  FetchURL http://localhostSet uncaught java.lang.ThrowableSet deferred uncaught java.lang.Throwable>VM Started: Set deferred breakpoint FetchURL.main
Breakpoint hit: "thread=main", FetchURL.main(), line=48 bci=0
48          for (i = 0; i < args.length; i++)
main[1] list
44       {45          int i;46          FetchURL f;4748 => (2)     for (i = 0; i < args.length; i++)
49          {50             System.out.println(args[i] + ":");51             System.out.println(new FetchURL(args[i]));52          }53       }main[1] step>Step completed: "thread=main", FetchURL.main(), line=50 bci=550             System.out.println(args[i] + ":");
main[1] step
> http://localhost:
Step completed: "thread=main", FetchURL.main(), line=51 bci=32
51             System.out.println(new FetchURL(args[i]));
main[1] step
>Step completed: "thread=main", FetchURL.<init>(), line=8 bci=08       {
main[1] list
4    public class FetchURL {5       private URL requestedURL;Chapter 5 The Sun Microsystems Java Software Development Kit 152
6
7       public FetchURL(String urlName)8 =>    {9          try {10             requestedURL = new URL(urlName);11          } catch (Exception e) {12             e.printStackTrace();13          }main[1] step>Step completed: "thread=main", FetchURL.<init>(), line=10 bci=410             requestedURL = new URL(urlName);
main[1] step (3)
>Step completed: "thread=main", FetchURL.<init>(), line=11 bci=1611          } catch (Exception e) {
main[1] step
>Step completed: "thread=main", FetchURL.<init>(), line=14 bci=2714       }
main[1] step
>Step completed: "thread=main", FetchURL.main(), line=51 bci=4551             System.out.println(new FetchURL(args[i]));
main[1] step
>Step completed: "thread=main", FetchURL.toString(), line=19 bci=219          String rc = "";
main[1] list
151617       public String toString()18       {19 =>       String rc = "";20          String line;21          BufferedReader rdr;2223          try {24             rdr = new BufferedReader(main[1] step>Step completed: "thread=main", FetchURL.toString(), line=24 bci=324             rdr = new BufferedReader(153 5.9 The Java Debugger
main[1] step
>Step completed: "thread=main", FetchURL.toString(), line=30 bci=2830             while ((line = rdr.readLine()) != null)
main[1] step
>Step completed: "thread=main", FetchURL.toString(), line=32 bci=3132                rc = rc + line + "\n";
main[1] list
28             );2930             while ((line = rdr.readLine()) != null)31             {32 =>             rc = rc + line + "\n";33             }34          } catch (Exception e) {35             e.printStackTrace();36             rc = null;37          }main[1] step>Step completed: "thread=main", FetchURL.toString(), line=30 bci=5530             while ((line = rdr.readLine()) != null)
main[1] step
>Step completed: "thread=main", FetchURL.toString(), line=32 bci=3132                rc = rc + line + "\n";
main[1] step
>Step completed: "thread=main", FetchURL.toString(), line=30 bci=5530             while ((line = rdr.readLine()) != null)
main[1] step
>Step completed: "thread=main", FetchURL.toString(), line=32 bci=3132                rc = rc + line + "\n";
main[1] dump this  (4)
 this = {    requestedURL: instance of java.net.URL(id=378)}main[1] dump rc    (5)
  rc = "<HTML>          <HEAD>Chapter 5 The Sun Microsystems Java Software Development Kit 154
"
main[1] list 3632                rc = rc + line + "\n";33             }34          } catch (Exception e) {35             e.printStackTrace();36 =>          rc = null;37          }3839          return rc;40       }41main[1] stop at FetchURL:39     (6)
Set breakpoint FetchURL:39main[1] cont>Breakpoint hit: "thread=main", FetchURL.toString(), line=39 bci=7939          return rc;
main[1] dump rc
  rc = "<HTML>          <HEAD>            <TITLE>RedHat Linux Laptop</TITLE>          </HEAD>          <BODY>            <H1>RedHat Linux Laptop</H1>            <P>You have contacted Michael Schwarz's RedHat Linux Laptop.              You would probably rather             <A HREF="http://www.multitool.net/">see his permanent Web             page</A> since this server goes up and down all the time, what             with it being on a laptop.</P>          </BODY>        </HTML>"main[1] step> <HTML>    <HEAD>      <TITLE>RedHat Linux Laptop</TITLE>    </HEAD>    <BODY>      <H1>RedHat Linux Laptop</H1>      <P>You have contacted Michael Schwarz's RedHat Linux Laptop.        You would probably rather       <A HREF="http://www.multitool.net/">see his permanent Web       page</A> since this server goes up and down all the time, what       with it being on a laptop.</P>    </BODY>  </HTML>155 5.9 The Java Debugger
Step completed: "thread=main", FetchURL.main(), line=48 bci=48
48          for (i = 0; i < args.length; i++)
main[1] step
>Step completed: "thread=main", FetchURL.main(), line=53 bci=5753       }
main[1] step
>The application exited$
1. Here we tell the debugger where to break execution to let us run debugger commands.
We do so at the start of the FetchURL  class’ main()  method. If we did not set a
breakpoint, the run would have run the program to termination, making it no different
from running it with the java command (except perhaps a bit slower).
2. The list command shows the source line that is about to be executed, along with some
more lines to either side. It is a handy way to get a little context. The standard “nextline” prompt isn’t enough for most of us to get context (unless, of course, we arelooking at a line-numbered printout of the source or an editor window at the sametime, which we often do).
3. The step steps execution one “line” (what a line is can be a bit fuzzy when there’s a
lot of vertical whitespace in the source, or when multiple method calls occur on oneline). Note the information in the status message. The name of the thread is given (oursample is single-threaded, so it is always “main”), as is the line number in the sourceﬁle and the 
bci. Note that there is a very similar command, next, that advances to the
next line in the same stack frame . In other words, it won’t step into method calls, it
steps over them.
4, 5. Here we see two uses of the dump  command. First, we apply it to this  (which is an
implicit argument to any nonstatic method call) to dump the currently executing ob-ject. The second instance dumps the 
rc local variable, which is an accumulating string
containing the requested Web page. At the moment, it contains only the ﬁrst few lines.
6. Here we set a breakpoint on a speciﬁc source line number. We then use the cont
command to resume “full speed” code execution.Chapter 5 The Sun Microsystems Java Software Development Kit 156
RETURN TO THE  SOURCE :THE JAVA DECOMPILER 5.10
Java includes a decompiler of sorts called javap . It is sometimes referred to as
the “class ﬁle disassembler.” We titled this section “Return to the Source,” butit is a bit misleading; javap  simply provides a way to examine the members and
methods of a compiled Java class
24 even when you do not have its source code.
The javap  command takes the same access-modiﬁer command-line argu-
ments as javadoc  (-public , -protected , -package , -private ) to determine
which attributes and methods are to be reported. An additional switch, -c,
causes the bytecodes of methods to be reported. For details, see Sun’s documen-tation for javap .
25
Example 5.19 shows what you get if you run javap -c  on our FetchURL
example.
BUNDLING A  JAVA PROGRAM : PUT ITI NA  JAR 5.11
Distributing a Java application can be a pain. All but the simplest of applica-
tions will have many public classes—and since there can only be one publicJava class per source ﬁle, each Java source ﬁle becomes a class ﬁle, and the ele-ments of a package name become directory nodes in the path to the class, youend up with a fairly complex collection of directories and ﬁles. Wouldn’t it benice to be able to roll the whole mess up into a single binary ﬁle fordistribution?
Well, you can. The tool to do the job is called jar, which stands for Java
ARchive.
26 The ﬁles produced by this utility are called JAR ﬁles . The JAR for-
mat is the common DOS/Windows ZIP ﬁle format, with a few special ﬁles tosupport some special features we will explain as they come up.
24. In Chapter 7 we will introduce gcj, the GNU Compiler for Java, which compiles Java to
native machine code. javap  is useless with such a ﬁle. It deals only with JVM bytecodes as
documented in Sun’s JVM Speciﬁcation.
25.http://java.sun.com/j2se/1.4.2/docs/tooldocs/solaris/javap.html
26. An abbreviation made up of syllables from words instead of just initials is called a
portmanteau . The US Navy is particularly keen on them, using terms like COMSURPAC
(Commander, Surface Fleet, Paciﬁc), COMSUBLANT (Commander, Submarine Fleet,Atlantic), and so forth. There. Now you can’t claim you didn’t learn anything from this book.157 5.11 Bundling a Java Program: Put It in a JAR
Example 5.19 javap  output for FetchURL.class
Compiled from FetchURL.java
public class FetchURL extends java.lang.Object {  private java.net.URL requestedURL;  public FetchURL(java.lang.String);  public java.lang.String toString();  public static void main(java.lang.String[]);}
Method FetchURL(java.lang.String)
   0 aload_0   1 invokespecial #1 <Method java.lang.Object()>   4 aload_0   5 new #2 <Class java.net.URL>   8 dup   9 aload_1  10 invokespecial #3 <Method java.net.URL(java.lang.String)>  13 putfield #4 <Field java.net.URL requestedURL>  16 goto 27  19 astore_2  20 aload_2  21 invokevirtual #6 <Method null>  24 goto 27  27 returnException table:   from   to  target type     4    16    19   <Class java.lang.Exception>
Method java.lang.String toString()
   0 ldc #7 <String "">   2 astore_1   3 new #8 <Class java.io.BufferedReader>   6 dup   7 new #9 <Class java.io.InputStreamReader>  10 dup  11 aload_0  12 getfield #4 <Field java.net.URL requestedURL>  15 invokevirtual #10 <Method java.net.URLConnection openConnection()>  18 invokevirtual #11 <Method java.io.InputStream getInputStream()>  21 invokespecial #12 <Method java.io.InputStreamReader(java.io.InputStream)>  24 invokespecial #13 <Method java.io.BufferedReader(java.io.Reader)>  27 astore_3  28 goto 55  31 new #14 <Class java.lang.StringBuffer>  34 dup  35 invokespecial #15 <Method java.lang.StringBuffer()>  38 aload_1Chapter 5 The Sun Microsystems Java Software Development Kit 158
  39 invokevirtual #16 <Method java.lang.StringBuffer append(java.lang.String)>
  42 aload_2  43 invokevirtual #16 <Method java.lang.StringBuffer append(java.lang.String)>  46 ldc #17 <String "">  48 invokevirtual #16 <Method java.lang.StringBuffer append(java.lang.String)>  51 invokevirtual #18 <Method java.lang.String toString()>  54 astore_1  55 aload_3  56 invokevirtual #19 <Method java.lang.String readLine()>  59 dup  60 astore_2  61 ifnonnull 31  64 goto 79  67 astore 4  69 aload 4  71 invokevirtual #20 <Method null>  74 aconst_null  75 astore_1  76 goto 79  79 aload_1  80 areturnException table:   from   to  target type     3    64    67   <Class java.lang.Exception>
Method void main(java.lang.String[])
   0 iconst_0   1 istore_1   2 goto 51   5 getstatic #21 <Field java.io.PrintStream out>   8 new #14 <Class java.lang.StringBuffer>  11 dup  12 invokespecial #15 <Method java.lang.StringBuffer()>  15 aload_0  16 iload_1  17 aaload  18 invokevirtual #16 <Method java.lang.StringBuffer append(java.lang.String)>  21 ldc #22 <String ":">  23 invokevirtual #16 <Method java.lang.StringBuffer append(java.lang.String)>  26 invokevirtual #18 <Method java.lang.String toString()>  29 invokevirtual #23 <Method void println(java.lang.String)>  32 getstatic #21 <Field java.io.PrintStream out>  35 new #24 <Class FetchURL>  38 dup  39 aload_0  40 iload_1  41 aaload  42 invokespecial #25 <Method FetchURL(java.lang.String)>159 5.11 Bundling a Java Program: Put It in a JAR
  45 invokevirtual #26 <Method void println(java.lang.Object)>
  48 iinc 1 1  51 iload_1  52 aload_0  53 arraylength  54 if_icmplt 5  57 return
A JAR ﬁle packages a subdirectory and its descendants into a single ﬁle. A Java
CLASSPATH  speciﬁcation may contain a JAR ﬁlename everywhere it might
contain a directory name. Let’s say you use the GPL’ed Java personal ﬁnanceprogram called jgnash  and you’ve compiled it from source, so you have a direc-
tory off your home directory called 
jgnash/bin . Suppose you run the program
by directly invoking java to run the class jgnashMain  and you have
$HOME/jgnash/bin  on your CLASSPATH . You could clean up the mess on your
hard drive by using the jar command to squash all the ﬁles in jgnash/bin
together into a single JAR ﬁle, as shown in Example 5.20.
Example 5.20 Making a JAR ﬁle
$ cd ; mkdir jars
$ jar cvf jars/jgnash.jar jgnash/bin
You could then replace the $HOME/jgnash/bin  entry in your CLASSPATH
with $HOME/jars/jgnash.jar . After that you would still run jgnash  with
exactly the same java command you always did, but now you got rid of the
cluttered pile of ﬁles.
This is only the most basic purpose of jar, however. Its uses extend well
beyond merely concatenating and compressing collections of .class  ﬁles.
Deploying Applications 5.11.1
One of the best uses of jar is to package applications for distribution. You can
put a large Java application into a single ﬁle with jar, and by using a manifest
(which we are about to discuss) you can nominate the main class to run in thatJAR ﬁle. You can then provide a shell script (and a batch ﬁle, if you are alsodeploying to Microsoft Windows) that will set the 
CLASSPATH  to point to theChapter 5 The Sun Microsystems Java Software Development Kit 160
JAR ﬁle and run java against it. With this simple setup, users need not even
know they are using a Java application—it runs like any other application.
The Manifest File 5.11.1.1
The only way in which jar really differs from any other ZIP archive utility is
in the automatic creation and use of a manifest ﬁle, by default named
META-INF/MANIFEST  in the archive. Even if you do not specify a manifest ﬁle
of your own, the jar utility creates one for you. Let’s take a moment to look at
what goes into the manifest.
A manifest is basically a list of key/value pairs. The key comes at the start
of a line and the value comes at the end of the line with a colon separating thetwo. Example 5.21 shows a sample manifest.
Example 5.21 Manifest from the Payback sample application
Manifest-Version: 1.0
Ant-Version: Apache Ant 1.5.3 Created-By: 1.4.1_02-b06 (Sun Microsystems Inc.)Version: 1.0Main-Class: net.multitool.Payback.Payback
All of these entries were produced automatically by ant or the jar utility
itself, except for Main-Class , which we speciﬁed (albeit with ant, as you will
see in Chapter 9). The manifest has certain values that are always ﬁlled in byjar, but two that you might commonly specify are
•
Main-Class , which allows users to run a Java application by merely typ-
ing java someJarFile.jar , without having to know the fully package
qualiﬁed name of the class that contains the application’s main() .
•Class-Path , which allows you to specify what the classpath should be
when the application is run.
There are keys speciﬁc to applets, to signed applications, to beans, and so
forth. We will address these as it becomes necessary. Full details can, of course,be found in the Sun’s documentation for jar.
27
27.http://java.sun.com/j2se/1.4.2/docs/tooldocs/solaris/jar.html161 5.11 Bundling a Java Program: Put It in a JAR
Putting a Compiled Application in a JAR File 5.11.1.2
Let’s assume we are going to manually put a Java application in a JAR ﬁle. We
will want to specify the name of the class that contains the main()  method of
the application. First off, you want the JAR’s directory hierarchy to begin atthe folder that contains the ﬁrst node of each package’s name. Our sample ap-plication here is in the package 
net.multitool.Payback , so we want our
present working directory to be the one which contains the net subdirectory.
Here’s a dump of the directory tree from that point after compilation of oursample application:
$ find . -print
../net./net/multitool./net/multitool/Payback./net/multitool/Payback/Account.class./net/multitool/Payback/Purchase.class./net/multitool/Payback/Cost.class./net/multitool/Payback/DebtAccount.class./net/multitool/Payback/Payback.class./net/multitool/Payback/SavingsAccount.class./net/multitool/util./net/multitool/util/SAMoney.class./net/multitool/util/SAMoneyTest$1.class./net/multitool/util/SAMoneyTest$2.class./net/multitool/util/SAMoneyTest.class$
We now want to specify which class contains the application’s main()
method. It happens to be the Payback  class, so we create a ﬁle called
manifest28 with the following contents:
$ cat manifestMain-Class: net.multitool.Payback.Payback
Next, we use the jar utility to create the JAR ﬁle:
28. It can have any name. The key/value pairs from the ﬁle will be placed by the jar utility into
the standard manifest called META-INF/MANIFEST.MF  no matter what name you give to
this ﬁle.Chapter 5 The Sun Microsystems Java Software Development Kit 162
$ jar cmf manifest payback.jar net
$ ls -latotal 20drwxrwxr-x    3 mschwarz mschwarz     4096 Aug  4 18:19 .drwxrwxr-x    7 mschwarz mschwarz     4096 Aug  4 17:57 ..-rw-rw-r--    1 mschwarz mschwarz       43 Aug  4 18:17 manifestdrwxrwxr-x    3 mschwarz mschwarz     4096 Jul 28 16:16 net-rw-rw-r--    1 mschwarz mschwarz     7506 Aug  4 18:21 payback.jar
The options to jar tell it what to do. In our case, -c instructs to create a
JAR ﬁle, -m adds the contents of the ﬁle named in the next parameter to the
META-INF/MANIFEST  ﬁle, -f and the next parameter is the ﬁlename of the JAR
ﬁle being created. If we had not speciﬁed -f, the JAR ﬁle would have been
written to standard out and an I/O redirect would be needed, but the result
would have been the same:
$ jar cvm manifest net > payback.jar
$ ls -latotal 24drwxrwxr-x    3 mschwarz mschwarz     4096 Aug  4 18:24 .drwxrwxr-x    7 mschwarz mschwarz     4096 Aug  4 17:57 ..-rw-rw-r--    1 mschwarz mschwarz       43 Aug  4 18:17 manifestdrwxrwxr-x    3 mschwarz mschwarz     4096 Jul 28 16:16 net-rw-rw-r--    1 mschwarz mschwarz     7506 Aug  4 18:27 payback.jar
Everything that follows parameters required by option letters is considered
to be a ﬁle or directory that is to be added to the JAR ﬁle. The option syntaxfor jar is similar to that for pkzip  in the DOS/Windows world and the tar
utility in the UNIX world.
As elsewhere in this chapter, we are just getting you started. See Sun’s
documentation for details.
Basic jar Operation 5.11.2
We have already covered the most common case, using jar to create a “rolled-
up” Java application. jar has many command options besides 
-c and we’ll
document a few of them.
-c
Create a JAR ﬁle.
-u
Update a JAR ﬁle—replace updated ﬁles, add missing ﬁles.163 5.11 Bundling a Java Program: Put It in a JAR
-x
Extract ﬁles from a JAR ﬁle.
-t
List ﬁles in a JAR.
-f
Specify the JAR ﬁlename.
-v
Be verbose—display descriptions of what the jar utility is doing as it
does it.
-m
Add the contents of the named ﬁle to the manifest.
THE REST OF THE TOOLKIT 5.12
There are additional utilities in the toolkit. Below is a capsule summary of themand their purposes.
extcheck
This utility checks an applet JAR ﬁle for any extensions it requires that arein conﬂict with the current Java runtime environment. (But we don’tcover applets in this book.)
jarsigner
This is a utility for digitally signing JAR ﬁle. Once a JAR is signed, anyonelooking at it can be sure of two things—ﬁrst, the ﬁle was deﬁnitely pre-pared by the owner of the private key that matches the public key used toverify the signature;
29 and second, the JAR ﬁle has not been modiﬁed in
any way since it was signed. In other words, depending upon the care withwhich the signer treats his/her private key, this certiﬁes the authenticity
29. A discussion of public/private keys as an authentication mechanism is beyond our scope
here. As a shameless plug, Mr. Schwarz would like to point you to Chapter 10 of his previousbook, Multitool Linux , which contains a beginner’s introduction to public key authentication
using GnuPG. Of course, a quick Google search will ﬁnd you many online descriptions thatare free.Chapter 5 The Sun Microsystems Java Software Development Kit 164
and accuracy of the JAR ﬁle; you can trust it as much as you trust
the signer.
Generally speaking, an applet must be signed by a key that the user
trusts in order for the applet to increase its security access to the clientmachine (open/read/write ﬁles, access the printer, and so on). But we don’tcover applets in this book.
keytool
This tool is used to create and manage the keys we were talking about inthe previous entry. Again, this is used mainly for JAR signing, and JARsigning is used mainly for applet authentication, but we don’t cover appletsin this book.
rmid
The RMI activation daemon. In the RMI example we showed you in thischapter, you had to start a server manually and leave it running to processrequests. RMI activation  is a system where RMI servers may be started on
demand.
serialver
Reports the RMI 
serialVersionUID  of a class. This can be useful when
trying to track down problems with complex RMI systems, especially whenmultiple versions of an RMI interface with the same name must be in useat the same time.
native2ascii
As mentioned before, Java uses Unicode for all strings. Most of the time,you and we are working with ASCII-encoded ﬁles. This program convertsﬁles from one format to the other.
policytool
Remember how we had to set up a security policy ﬁle for our RMIdemonstration (Example 5.13)? Well, this is a Java GUI application forcreating and editing Java policy ﬁles.
There are a few more. One group of utilities is related to Kerberos tickets.
Another is related to Java IDL and RMI-IIOP, both of which are to allow Javato interoperate with CORBA. If you are in a CORBA environment, you willwant to look at those. We’ve got enough on our plates without trying to jamCORBA in here. You’re on your own, buddy. Finally, there are a couple of165 5.12 The Rest of the Toolkit
programs that support the Java plug-in, which is a way to make Java available
in browsers.30
REVIEW 5.13
For all of its humble command-line interface, the Sun Java 2 SDK provides acomplete software development package, with everything you need to writeand run a wide gamut of Java applications.
WHATYOU STILL DON’T KNOW 5.14
Oh dear, where to start? There are all those programs in the kit we glossed overright at the end there. We barely scratched the surface of JNI and RMI. Wepositively orbited the topics of policy ﬁles and JAR manifests.
You now have exposure to the bulk of the Java SDK. It is only the ﬁrst
step up the learning curve. We’ll take you up a few more as the book progresses,but mastery comes only with time and experience. So use the tools. Write,compile, and debug a lot of Java code.
RESOURCES 5.15
One of the best sources of information on Java is Sun’s Web site for Java,
http://java.sun.com , where you can ﬁnd a wide variety of information—
tutorials, white papers, API speciﬁcations, and more.
30. Those browsers that had Java built into them generally used Java 1.0 or 1.1. After Java 1.1
it became clear that it would be a major pain to have to reintegrate each new version of Javainto each browser product. It would make browser versions and Java releases dependent on oneanother and would, in general, be a pain both for Sun and for Microsoft and Netscape (remem-ber Netscape?). Thus, the plug-in architecture was born (okay, plug-ins were for thingslike RealPlayer and Macromedia Flash too). Since Java 1.2, browser integration has beenvia plug-ins.Chapter 5 The Sun Microsystems Java Software Development Kit 166
This chapter introduces the IBM Java Software Development Kit. It does so
mainly by pointing out how completely the kit mimics the Sun Java SoftwareDevelopment Kit covered in Chapter 5. Some time is spent on the minordifferences and some installation issues.
WHATYOUWILL LEARN 6.1
• The small number of important differences between the IBM and Sun
Java Software Development Kits.
• How to put more than one version of Java on the same development
machine and how to switch between them painlessly.
167Chapter 6
The IBM Developer Kit for Linux,
Java 2 Technology Edition
USE LINUX FEATURES TO  MAKE MULTIPLE  JAVA SDK S
PLAY NICELY  TOGETHER6.2
We did not spend much time discussing the installation of Java on your Linux
system in previous chapter. In fact, we did not discuss it at all. This is becausethe installation instructions that come with the SDK are more than adequateif you wish only to install a single Java SDK. But what if you want to install,say, both the Sun Java SDK and the IBM Java SDK? Then things get a bit moreinteresting.
We’re going to review the concept of ﬁlesystem links, and how they work
on Linux. While it may seem odd to discuss them here, we’ll be using links toswitch gracefully between different Java installations. Links are a powerfulfeature in Linux ﬁlesystems, and switching SDKs is a good application thereof.If you’re already familiar with links, skip ahead to Section 6.2.2.
Links 6.2.1
A link is simply a name attached to a collection of data—that is, to a ﬁle. In
other words, every ﬁle has one set of data and at least one link (a name). But aﬁle may have more than one link. In other words, two different ﬁlenames maypoint to the same data. When you do this, you appear to have two copies ofthe ﬁle, but a change to one also changes the other. Deleting one, however,does not delete the other. It merely deletes the link. The ﬁle itself is onlydeleted when the last link is gone.
Hard Links 6.2.1.1
Links come in two ﬂavors: hard and symbolic. A hard link looks like a ﬁle in
and of itself. Let’s show you a hard link, before and after.
$ ls -la
total 12drwxrwxr-x    2 mschwarz mschwarz     4096 Jul  8 10:11 .drwx------   50 mschwarz mschwarz     4096 Jul  8 10:11 ..-rw-rw-r--    1 mschwarz mschwarz       45 Jul  8 10:11 sample$ cat sampleThis is a samplefile to demonstratelinks.
$Chapter 6 The IBM Developer Kit for Linux, Java 2 Technology Edition 168
As you can see, we have a directory with a single ﬁle in it, sample . Now
let’s make a hard link to that ﬁle.
$ ln sample example
$ ls -latotal 16drwxrwxr-x    2 mschwarz mschwarz     4096 Jul  8 10:13 .drwx------   50 mschwarz mschwarz     4096 Jul  8 10:11 ..-rw-rw-r--    2 mschwarz mschwarz       45 Jul  8 10:11 example-rw-rw-r--    2 mschwarz mschwarz       45 Jul  8 10:11 sample$ cat exampleThis is a samplefile to demonstratelinks.
$
Notice a few things here. First, other than the size and timestamps being
the same, there is nothing obvious to show that these two ﬁles are, in fact, thesame ﬁle. Note also the number just ahead of the owning user and groupnames. In the ﬁrst directory listing, 
sample  had 1 in that position; now both
sample  and example  have 2. This number is the link count . It tells you how
many names are linked to the data associated with this name.
We have a couple more things to point out before we move on to soft
links, which are going to be more important for our purposes.
$ chgrp wwwdev example
$ ls -latotal 16drwxrwxr-x    2 mschwarz mschwarz     4096 Jul  8 10:13 .drwx------   50 mschwarz mschwarz     4096 Jul  8 10:11 ..-rw-rw-r--    2 mschwarz wwwdev         45 Jul  8 10:11 example-rw-rw-r--    2 mschwarz wwwdev         45 Jul  8 10:11 sample$ chmod o-r example$ ls -latotal 16drwxrwxr-x    2 mschwarz mschwarz     4096 Jul  8 10:13 .drwx------   50 mschwarz mschwarz     4096 Jul  8 10:11 ..-rw-rw----    2 mschwarz wwwdev         45 Jul  8 10:11 example-rw-rw----    2 mschwarz wwwdev         45 Jul  8 10:11 sample$ chgrp mschwarz sample$ ls -latotal 16169 6.2 Use Linux Features to Make Multiple Java SDKs Play Nicely Together
drwxrwxr-x    2 mschwarz mschwarz     4096 Jul  8 10:13 .
drwx------   50 mschwarz mschwarz     4096 Jul  8 10:11 ..-rw-rw----    2 mschwarz mschwarz       45 Jul  8 10:11 example-rw-rw----    2 mschwarz mschwarz       45 Jul  8 10:11 sample$
As you can see, a ﬁle can have only one set of owners and permissions, no
matter how many links are made to it. Changing the owner or permissions ofone link changes all hard links at the same time. In other words, the securityof a ﬁle is like its data: A change to one link is a change to them all.
A link need not be in the same directory as the original name.
$ ln example /tmp/sample
$ ls -latotal 16drwxrwxr-x    2 mschwarz mschwarz     4096 Jul  8 10:13 .drwx------   50 mschwarz mschwarz     4096 Jul  8 10:11 ..-rw-rw----    3 mschwarz mschwarz       45 Jul  8 10:11 example-rw-rw----    3 mschwarz mschwarz       45 Jul  8 10:11 sample$ ls -la /tmptotal 132drwxrwxr-x    2 mschwarz mschwarz     4096 Jul  8 10:23 .drwx------   50 mschwarz mschwarz     4096 Jul  8 10:11 ..-rw-rw-r--    1 mschwarz mschwarz   118081 Jun  3 18:51 jLin.tar.gz-rw-rw----    3 mschwarz mschwarz       45 Jul  8 10:11 sample$
Here we made a third link in a different directory; /tmp/sample  is a third
name for the same data ﬁle. Note that we made it from the example  link, not
the original ﬁlename. In fact, as far as the Linux ﬁlesystem is concerned, thereis no “original” name. None of these names is more signiﬁcant than any other.When you remove a ﬁlename, the link is destroyed and the ﬁle’s link count isdecremented. If the link count goes to zero, the ﬁle is removed. That’s it.Nothing else.
Hard links have a couple of drawbacks. One of them is a genuine technical
limitation and the other is more of a usability problem. The technical limitationis that a hard link cannot be made across mounted ﬁlesystems. In the simplestChapter 6 The IBM Developer Kit for Linux, Java 2 Technology Edition 170
case (we don’t want to muddy the waters with LVM1 or RAID2 at this
point—most Linux distributions do not do LVM or RAID “out-of-the-box”),if you have more than one partition or disk drive, these are “mounted” at dif-ferent points on the directory tree. For example, Mr. Schwarz’s laptop’s mounttable looks like this:
$ mount
/dev/hda2 on / type ext3 (rw)none on /proc type proc (rw)usbdevfs on /proc/bus/usb type usbdevfs (rw)/dev/hda1 on /boot type ext3 (rw)none on /dev/pts type devpts (rw,gid=5,mode=620)none on /dev/shm type tmpfs (rw)$
We have one large partition mounted at /, or root, and a small partition
mounted at /boot . In all of our hard link examples so far, we have been making
links on the root ﬁlesystem. Example 6.1 shows what happens when an attemptis made to hardlink between two different mounted devices.
This is what we mean when we say a link cannot cross ﬁlesystems.
3
The other problem is more “touchy-feely.” With a hard link, you can see
by the link count that other links exist, but you don’t know where they are.Symbolic links get you around both of these issues.
Symbolic Links, or Symlinks 6.2.1.2
In a sense, symbolic links are much simpler than hard links. A symbolic link is
a ﬁle that contains the name of another ﬁle or directory. Because it is markedas a symbolic link, the system will replace it with the contents of the linked ﬁle.Example 6.2 will make this more clear.
1. Logical Volume Manager. This is a tool that lets you arbitrarily aggregate disk drives and
partitions into a “logical volume” that may be mounted and unmounted as a unit. Such toolsare commonly used in serious production servers, but are rare on workstations or simple Linuxservers.
2. Redundant Array of Inexpensive Disks. Another heavy server feature that allows multiple
disk drives to be linked up as if they were a single disk drive and to act as backup to one anothersilently and transparently.
3. In a similar vein, there are some networked ﬁlesystems that do not support hard links at all
because the server or host system doesn’t support the concept. Attempts to make links on orto such systems will also fail.171 6.2 Use Linux Features to Make Multiple Java SDKs Play Nicely Together
Example 6.1 Attempt to hardlink between mounts
$ ln example /boot/sample
ln: creating hard link `/boot/sample' to `example': Invalid cross-device link$
Example 6.2 Symlinking /etc/passwd
$ ls -la
total 8drwxrwxr-x    2 mschwarz mschwarz     4096 Jul  8 15:30 .drwx------   50 mschwarz mschwarz     4096 Jul  8 15:29 ..$ ln -sf /etc/passwd passwd$ ls -latotal 8drwxrwxr-x    2 mschwarz mschwarz     4096 Jul  8 15:31 .drwx------   50 mschwarz mschwarz     4096 Jul  8 15:29 ..lrwxrwxrwx    1 mschwarz mschwarz       11 Jul  8 15:31 passwd -> /etc/passwd$ cat passwdroot:x:0:0:root:/root:/bin/bashbin:x:1:1:bin:/bin:/sbin/nologindaemon:x:2:2:daemon:/sbin:/sbin/nologin...etc.
What we did here works just like a hard link, but note the attributes
on the ﬁle: The l indicates a symbolic link, and the permissions are
read/write/execute for user, group, and other (or for “world” for short). How-ever, these permissions apply to the link, not to the ﬁle. Just as with hard links,there is only one set of permissions on the ﬁle, and these are on the ﬁle that ispointed to, not on the pointer.
One interesting difference between symlinks and hard links is that sym-
links do not increment the link count on a ﬁle. If we remove 
/etc/password
(a very bad idea, by the way), the symlink would be unaffected, but an attemptto open or read the symlink would not work, because it points at nothing thatexists. This is called a dangling symlink .
Symlinks may refer to symlinks, and thus you need to be cautious to avoid
circular symlink chains. All the shells we have used on Linux report circularsymlinks as “too many levels of symbolic links,” which sounds like a processexceeding its stack limits but handling it gracefully.Chapter 6 The IBM Developer Kit for Linux, Java 2 Technology Edition 172
Switching Java Versions by Symlink 6.2.2
Here is the process we went through to install both Sun’s Java 2 SDK and
IBM’s Java 2 SDK on a system at the same time.
1. Download the Sun JDK as a compressed TAR ﬁle.
2. Install it to /usr/java . The Sun installer named its directory
j2sdk1.4.1_02 , so the full path is /usr/java/j2sdk1.4.1_02 .
3. Download the IBM JDK and untar it also in /usr/java . The base
directory in the TAR ﬁle was IBMJava2-141 , so the path is
/usr/java/IBMJava2-141 .
4. Create a symlink called jdk in /usr/java and make it point at the Sun
JDK by default (Example 6.3).
5. Add /usr/java/jdk/bin  to the system’s default PATH  environment
variable.4 Also add JAVA_HOME  and JDK_HOME  environment variables that
point to /usr/java/jdk .
Now when we run javac  or any other Java command, we run the version
which is pointed to by the jdksymlink. If we wish to switch to the IBM JDK,
we can just replace the link as show in Example 6.4.
From then on, the machine will be using the IBM Java SDK.And, of course, by explicitly setting the path and environment variables,
you can use whatever you prefer without changing the symlink for all otherusers on the system. This is an excellent example of how the features of theLinux system can make your life as a Java developer easier—with this generalmethod, you can keep as many Java SDKs from as many vendors as you wishand switch between them at will.
Here, we showed you how to do this on a system-wide basis, but you
could, by creating the symlink in your home directory and changing the pathfor your user account, switch between versions in your own account only,leaving the system-wide default alone. Linux provides endless ﬂexibility fordevelopers.
4. Exactly where you do this depends on your distribution. If you aren’t sure, you can always
do it in the .bash_profile  ﬁle in your user account’s home directory.173 6.2 Use Linux Features to Make Multiple Java SDKs Play Nicely Together
Example 6.3 Symlinking jdk to the Sun Java SDK
# ln -s j2sdk1.4.1_02 jdk
# ls -latotal 16drwxr-xr-x    4 root     root        4096 Jul  8 15:51 .drwxr-xr-x   17 root     root        4096 Jun 17 10:18 ..drwxr-xr-x    8 root     root        4096 May 21 21:09 IBMJava2-141drwxr-xr-x    8 root     root        4096 Mar  5 14:44 j2sdk1.4.1_02lrwxrwxrwx    1 root     root          14 Jul  7 22:33 jdk -> j2sdk1.4.1_02#
Example 6.4 Symlinking jdk to the IBM Java SDK
# rm jdk
# ln -s IBMJava2-141 jdk# ls -latotal 16drwxr-xr-x    4 root     root        4096 Jul  8 15:51 .drwxr-xr-x   17 root     root        4096 Jun 17 10:18 ..drwxr-xr-x    8 root     root        4096 May 21 21:09 IBMJava2-141drwxr-xr-x    8 root     root        4096 Mar  5 14:44 j2sdk1.4.1_02lrwxrwxrwx    1 root     root          14 Jul  7 22:33 jdk -> IBMJava2-141#
HOW THE  IBM JDK D IFFERS FROM THE  SUN JDK 6.3
After the last chapter, which was one of the longest in the book, this chapter
should come as something of a relief. It is one of the shortest in the book. Why?Because the IBM Java Software Development Kit is practically identical in useto the Sun package. It differs in only a few respects and that is all we will talkabout here.
One of the biggest differences is the version of Java available from each
vendor. Sun has the newest versions, as they have been deﬁning what those are.IBM is still releasing the 1.3 versions of Java as Sun begins to release 5.0. Butyou may not want or need the “bleeding edge” of the technology.Chapter 6 The IBM Developer Kit for Linux, Java 2 Technology Edition 174
Performance 6.3.1
IBM’s Java implementation appears to run most code faster than the Sun im-
plementation. Benchmarking something as complex as a Java Virtual Machineis well beyond our scope here (and, in fact, coming up with a benchmark thatwill actually predict how much faster  your application will run on one environ-
ment versus another is practically impossible). Nonetheless, we have seen somefairly dramatic performance improvements when running Java applicationsunder the IBM JVM—improvements on the order of 50%–100%.
It is interesting to note that it does not matter which Java SDK produced
the bytecode ﬁles. We see these improvements when the compiled classes arerun, no matter which compiler (IBM’s or Sun’s) was used to produce them.This suggests that it is some combination of a faster virtual machine and/or abetter Just-In-Time compiler (JIT) that gives IBM’s runtime its apparentperformance advantage.
For the most part, we use the Sun development kit and runtime, simply
because Sun’s is the deﬁnition of Java. But if execution speed is proving to becritical for your application, consider the IBM Java runtime. You may see somespeed advantages.
Differences in the Commands 6.3.2
You will notice a few differences. For example, there is both a java and a javaw .
Both invoke the Java runtime. The former has the Java console interface, thelatter does not. For our purposes, this does not matter. The IBM Java SDKcomes with an Object Request Broker Daemon ( orbd ) for CORBA/IIOP while
the Sun SDK does not. Again, for our purposes this doesn’t matter.
For the bulk of the utilities, the differences are so slight that you can use
the Sun documentation for the IBM tools.
IBM Classes 6.3.3
IBM’s Eclipse project (which we begin to cover in Chapter 10) provides a large
GUI API library called SWT. We won’t go into that here; it is covered inChapter 17. Of more immediate interest is IBM’s enhanced 
BigDecimal  class
(com.ibm.math.BigDecimal ) which addresses a lot of deﬁciencies in Sun’s
implementation of decimal arithmetic. We will be using the standard Java classin our book (as it is the same for all development kits we cover), but you mightwant to take a look at IBM’s FAQ document on their enhanced 
BigDecimal175 6.3 How the IBM JDK Differs from the Sun JDK
class.5It also appears that IBM’s class may become the ofﬁcial Sun version in
Java 5.0 when it comes out. The primary feature of this class is its ability todeal correctly with rounding and precision, which is of great beneﬁt in ﬁnancialand scientiﬁc applications. Check out IBM’s documentation and see if this issomething you should use.
Note that Java bytecodes are Java bytecodes. You can download and use
the IBM class with the Sun Java Runtime. It is there if you need it.
WHAT ARE ALLTHESE “_G”VERSIONS ? 6.4
One thing you will notice right away when you unpack the IBM Java SDK is
that it has virtually all of the same commands as does the Sun Java SDK, butthere is a whole bunch of them duplicated with a mysterious “_g” sufﬁx. What’sup with that?
These versions run a Java VM that was compiled with debug information,
so that you can report information about bugs and errors that is of use to IBMSDK developers in locating and ﬁxing problems. These versions should not beused for production work, but only to recreate and report bugs.
REVIEW 6.5
Well, we told you this one would be short. With a handful of minor exceptions,the IBM Java SDK is a complete drop-in replacement for the Sun Java SDK.You could go back to the previous chapter and repeat every example and exer-cise with the IBM Java SDK, and you would get the same results. There isdeﬁnitely some comfort in knowing that even though you don’t have an OpenSource Java VM and SDK, at least you have two vendors the produce function-ally identical development environments. You are not trapped into a singlevendor’s offering.
5.http://www2.hursley.ibm.com/decimalj/decfaq.htmlChapter 6 The IBM Developer Kit for Linux, Java 2 Technology Edition 176
WHATYOU STILL DON’T KNOW 6.6
What you still don’t know after reading this chapter is similar to what you still
didn’t know after reading Chapter 5. IBM Java SDK has many things we havenot covered, including security policy ﬁles, JNI, and RMI.
RESOURCES 6.7
The best source of information about IBM’s Java technology is IBM itself.Search the alphaWorks section of their Web site; we used 
http://
www.alphaworks.ibm.com/nav/java?openc=java+-+Developer+Kits
and found entries for the Java 1.3 Development Kit for Linux, as well as other
Java-related downloads, including the Jikes Open Source compiler.177 6.7 Resources

The GNU Compiler for Java provides a native binary compiler for Java code.
In this chapter we’ll show you how to compile a simple binary application fromJava sources.
WHATYOUWILL LEARN 7.1
You will learn how to compile a binary executable from Java source code usingthe gcj compiler.
A B RAND  GNU W AY 7.2
Quite some time ago Richard Stallman started an effort to create a free version
of UNIX called GNU1 (which stands for GNU’s Not UNIX—a recursive
1.http://www.gnu.org/
179Chapter 7
The GNU Compiler for Java
(gcj)
acronym). More than that, he tried to convince the world that code should be
Free with a capital “F”. By this, he meant that it was unreasonable to providesoftware without both providing the source code and the right to use andmodify that code as desired. To ensure this, he and his team created the GPL
2
(the GNU Public License) and founded the Free Software Foundation3 to foster
development and promote the idea.
The story of the founding of GNU/FSF and the motivations behind it4
makes for a fascinating reading. Even if you are not interested in Free Software,the story prompts you to think in new ways about software, property, andfreedom. As interesting as this story is, it is not our topic. The important thingis how the quest to create a Free operating system lead to a native Java compilerand the twists and turns on this way.
THE GNU C OMPILER  COLLECTION 7.3
If you are going to write a UNIX-like operating system, and one that is “Free”(certainly free of anyone else’s intellectual property which might be restrictedfrom the Free Software point of view), the ﬁrst thing you need is a C compiler.Thus, a great deal of early effort by the FSF went into developing what wasoriginally called the GNU C Compiler, or gcc.
Once they had a C compiler, some people began to write hundreds of
utilities from ls to grep, while others began work on HURD, a microkernel for
GNU. That work continues to this day. The bulk of the system commands youuse on Linux were in fact developed by the FSF as part of the GNU project.This is why Stallman et al. want us all to refer to “GNU/Linux” rather than“Linux”.
5 An understandable, if unenforceable, position.
It wasn’t long before an effort began to integrate C++ into gcc. As time
progressed, support for more and more languages and for more and more
2.http://www.gnu.org/licenses/gpl.html
3.http://www.fsf.org/
4.http://www.gnu.org/gnu/thegnuproject.html
5. A viewpoint we understand and appreciate, but we do not bow to is that we must always  say
“GNU/Linux.” We say it sometimes, but it gets tedious and annoying if used all the time. Sowe compromise. We tell you about GNU, but we’ll usually say just “Linux” in the text.Chapter 7 The GNU Compiler for Java (gcj) 180
architectures6 was being added. At some point, it was decided to rename
(reacronym?) gcc to mean “GNU Compiler Collection.”
Not too surprisingly, as Java emerged and gained popularity, it became
one of the languages supported by the GCC using a front end called gcj.7 That
is what we’ll be talking about here.
COMPILING  OUR SIMPLE  APPLICATION WITH GCJ 7.4
The basic form of gcj is
gcj [ options...] [ codefile ...] [@ listfile ...] [ libraryfile ...]
We’ll go over the options in a moment. For now, let’s talk about the
various kinds of input ﬁles the compiler can process.
In the above command-line synopsis, codefile  refers to a Java source
ﬁle, a compiled .class  ﬁle (yes, gcj can convert already compiled Java byte-
codes into native binaries), or even a ZIP or JAR ﬁle. A ﬁlename preﬁxed withthe at-sign, 
@, indicates that the ﬁle contains a list of ﬁlenames to be compiled.
That’s the @listfile  entry in the command synopsis. Finally, zero or more
library ﬁles to link with may be speciﬁed on the command line. When youspecify them directly (as opposed to using the 
-l command-line option) you
must provide the full name of the library.
Like all the other Java compilers we have talked about so far, gcj supports
the notion of a classpath. It will look in the classpath for unknown classes refer-enced by the classes you name to the compiler. Since gcj can read and compile
from 
.class  and .jar  ﬁles, you might think you could just make sure that
the JAR ﬁles from Sun or IBM Java SDK are on the gcj classpath and you
would be able to compile any Java program using any Java APIs. Alas, youwould be wrong. Why? Because the Java APIs are full of native methods,and which methods are implemented in Java and which are native is notdocumented anywhere.
6. A lot of people do not realize this, but gcc is a cross-compiler. Precompiled binaries do
not always support this, but if you build your compiler from source, you can use gcc to
compile code for any supported platform. For example, you can compile a program for aPowerPC-based Macintosh on your Intel-based PC.
7.
http://gcc.gnu.org/java/index.html181 7.4 Compiling Our Simple Application with gcj
Even if this were not so, it is not permissible under the GPL to distribute
binaries without also offering to distribute source code. So, to distribute theSun or IBM API JAR ﬁles would be incompatible with the GPL, and to notdistribute them but to depend on them would mean shipping a product thatdoesn’t work out of the box and requires users to obtain some non-Free soft-ware in order to work. That is just not acceptable. So the developers of gcj have
opted to reimplement as much of the Java APIs as possible.
As you can probably guess if you have browsed the Java API Javadoc ﬁles,
this is a monumental undertaking. The Java APIs are a moving target, and theystarted huge and grow larger with every new release. There is a parallel projectto gcj called GNU Classpath
8which is attempting to implement the entire Java
API. Its target for the 1.0 release is to be fully compatible with Java 1.1 and“largely compatible” with Java 1.2. You might want to look at that project forbetter API support than that provided by gcj’s 
libgcj .9 If you are curious
about the present status of libgcj ’s implementation of the Java APIs, there is
a Web page (frequently updated) that compares the status of it against theJava 1.4 packages.
10
Compiling FetchURL with gcj 7.4.1
We’ll discuss gcj’s command-line switches in detail in Section 7.5, but we will
have to use a couple of them here. First off, be aware that since gcj is actually
part of gcc, all of the non-language-speciﬁc switches of that system also work
in gcj; thus, -o speciﬁes the name of the binary output ﬁle, and so on. There
are many references on gcc to which you should refer for details (the manpage
on gccis a good place to start). Example 7.1 shows compiling and running
FetchURL  with gcj.
8.http://www.gnu.org/software/classpath/
9. The gcj and GNU Classpath projects are in the middle of an effort to merge their libraries
into a common library. The GNU Classpath project aims to be a Free Software replacementfor the JRE API JAR ﬁle. As such, it is meant to be a library of Java bytecodes that may be usedas a drop-in replacement in any Java runtime environment. For our discussion, we will assumeyou are using 
libgcj  as shipped with gcj itself.
10.http://gcc.gnu.org/java/jdk14-libgcj.htmlChapter 7 The GNU Compiler for Java (gcj) 182
TIP
The source code for FetchURL can be found in Example 3.30.
Example 7.1 Compiling and running FetchURL  with gcj
$ gcj -o furl --main=FetchURL FetchURL.java
$ ./furl http://www.multitool.net/pubkey.htmlhttp://www.multitool.net/pubkey.html:<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"><HTML><HEAD><TITLE>Michael Schwarz's Public GPG key</TITLE></HEAD><BODY><CENTER><H1>Michael Schwarz's Public GPG Key</H1></CENTER><PRE>-----BEGIN PGP PUBLIC KEY BLOCK-----Version: GnuPG v1.0.7 (GNU/Linux)
mQGiBDuv6IQRBACn1TIWUXiEuZtfR+0Lqx6tYBAzIRpljL42O6r5nKHmndsWV71e
FUnhQpQIf+bNGGPMEt0g0vFpD6YWKP4uIEh2o+u1iyIIMs5QH3iqp8kFjbtVZa21.........etc.
We already explained the -o switch which names the resulting binary. The
other switch we use here is --main  which speciﬁes the class containing the
main()  that should be run when the binary is invoked. Remember that every
Java class may contain a main() . In a multiclass program, the binary needs to
know which main()  to run when the binary is executed.
Remember that FetchURL  is in the default package,11 so you simply
type the class name as the argument to --main . However, if the class is in a
nondefault package, the fully qualiﬁed name must be used.
11. Any class without a package  declaration is in the default package.183 7.4 Compiling Our Simple Application with gcj
Compiling a Multiclass Program 7.4.2
For contrast, Example 7.2 shows compiling a multiclass program that is
contained in a package (it is the Payback debt/savings/purchase calculator).12
Example 7.2 Compiling and running a multiclass program
$ cd payback/src
$ gcj -o payback -I. --main=net.multitool.Payback.Payback \net/multitool/Payback/Payback.java$ ./paybackPayback -- A savings/credit comparison toolCopyright (C) 2003 by Carl Albing and Michael SchwarzReleased under the GNU/GPL.  Free Software..........etc.
The -I switch names a directory that is to be prepended to the classpath.
In this case, we added “ .” which is the source directory for the Payback
program.13 Notice the package elements expressed with dots for the --main
argument, and with slashes for the ﬁlename argument.
NOTE
The gcj compiler does pick up and use the CLASSPATH  environment variable
if it is speciﬁed. Also, gcj has a number of switches besides -I for classpath
manipulation. We won’t cover those here; -I is the preferred method (according
to the gcj manpage at any rate).
12. Since this chapter was written, XML features were added to Payback that make it no longer
work with gcj.
13. The Payback code can be found at the book’s Web site: http://www.javalinux-
book.com/ .Chapter 7 The GNU Compiler for Java (gcj) 184
OPTIONS AND  SWITCHES 7.5
As we have said, gcj is part of the gcc suite of compilers and therefore supports
all of the non-language-speciﬁc options and switches of that suite.
As with most reference material in this book, we will only cover the
highlights. See the gcj manpage or the project’s Web site for full details.14
-Idirname
Add dirname  to the classpath ahead of its existing contents.
-Dname[=value]
Add name  and optional value  to the system properties list. This is only
valid with the --main  switch.
--main
Speciﬁes which class contains the application’s main() . This gives the
starting point for an application.
-fno-bounds-check
Disable array bounds checking. Like “real” Java, gcj checks all array oper-
ations to ensure that array bounds are not exceeded. Using this switchdisables that check. It speeds up array operations but can introduce subtleand hard-to-ﬁnd bugs. Use at your own risk.
-fno-store-check
Like -fno-bounds-check , this disables a safety feature on arrays. Normal-
ly, when you store an object into an array, a check is made to make surethat the object is assignment-compatible with the array type (in otherwords, that the object is an 
instanceof()  of the array type). Using this
switch disables this test. It speeds up array operations but can introducesubtle and hard-to-ﬁnd bugs. Use at your own risk.
There are other switches for native methods, bytecode (as opposed to
native) compilation, and some switches related to resources. We leave it as anexercise for the reader to learn and use these where needed.
14.http://gcc.gnu.org/java/185 7.5 Options and Switches
REASONS TO  USE GCJ 7.6
You might think that speed would be the primary reason to use gcj, but this is
not necessarily the case. Yes, gcj is usually used as a native code compiler
(it can compile to Java bytecode as well, and thus can be used as a replacementfor javac ), but there is a lot more to Java performance than that. First off, both
Sun’s and IBM’s JVMs have JIT (“Just-In-Time”) compilers in them, whichconvert some or all of a class’s bytecode to native code on the ﬂy. In some cases,these compilers may do a better job than the gcj compiler, so as a result, initial
runs under a JVM are slower than gcj but later loops or iterations are compara-
ble or faster. Also performance of both gcj and JVM code is highly affected by
memory, stack, and garbage-collection parameters which may be modiﬁed withcommand-line options or properties ﬁles. So speed is not the determining fac-tor. We have not done sufﬁcient testing or measurement to tell you which en-vironment produces “the fastest code” from a given source ﬁle. (We’re not evensure exactly what such “sufﬁcient testing” might consist of. All we can suggestis that your try your code in all three environments and then make your
own choice.)
It is, perhaps, ironic that one of the main reasons why you might wish to
use gcj is portability. You see, you can only run Sun’s and IBM’s JVMs on
platforms for which they provide a compiled version. Linux runs on severalhardware platforms (such as StrongARM) for which Sun and/or IBM do notprovide JVMs. Also, if you are running Linux on some architectures, there maybe VMs for the “ofﬁcial” OS, but none for Linux on that architecture. This isthe case, for example, for SPARC and Alpha. The cross-compilation that gcj
inherits from the GNU Compiler Collection allows you to compile Java tonative code for Linux on those platforms.
Another reason to use gcj might be a desire for better integration with
code compiled from other languages. gcj has JNI support, but also provides its
own inter-language integration system called CNI, for Compiled Native Inter-
face. We don’t have space to cover CNI (and, frankly, we haven’t used itenough to be good judges), but its proponents claim that it is both easier to useand more efﬁcient than JNI. You can read up, use it, and judge that foryourself.
Still another reason might be one that we don’t like very much. Again, it
is ironic that the only Free Software Java compiler is the one best able to pro-duce proprietary binary code. Code compiled with gcj is as difﬁcult to reverse
engineer as compiled C or C++ code. It is subject to the same sort of binaryChapter 7 The GNU Compiler for Java (gcj) 186
obfuscation as other native compiled code. If you need to make your code
closed and proprietary, gcj may be the right tool for you. Naturally, we aren’t
very fond of this idea, but it is still a reason one might choose the tool.
Finally, we mentioned that speed wasn’t a certain factor for choosing gcj,
but there is an exception. So far,15 Java is particularly slow at starting and
shutting down virtual machines. If you have a Java program that is invoked ondemand or in a loop and the VM is started and stopped on each invocation,then gcj will give you a huge speed improvement, even if the code executes at
the same speed or slightly slower than the JIT JVM code.
REASONS  NOT TO  USE GCJ 7.7
We can think of three reasons not to use gcj. First, the compiled binary will
run only on the target platform, whereas a Java bytecode binary is portable to
any Java runtime without modiﬁcation or recompilation. Second, gcj is not
deﬁnitive. Sun still “owns” Java and only Sun’s implementation can be pre-sumed to be “correct.” Third, the gcj API classes are not complete. If you visit
the API status page we mentioned earlier, you can see what is provided andwhat is not. If gcj lacks an API your application requires, then you can be sure
gcj is not the tool for you.
REVIEW 7.8
The GNU Compiler for Java is part of the GNU Compiler Collection. It is
generally used to compile Java source code into native binaries. It providesmany of Sun’s API classes, but not all.
WHATYOU STILL DON’T KNOW 7.9
You do not know how to interface with C/C++ code using gcj. You do not
know how to use SWT from Eclipse to write GUI apps with gcj.
15. Sun claims that Java 5.0 will show considerable improvement in VM initialization speed.187 7.9 What You Still Don’t Know
RESOURCES 7.10
There are a number of resources for gcj, including
• The gcj home page.16
• The gcj FAQ.17
• The gcj documentation page.18
• The JDK1.4 to libgcj  comparison page.19 This resource is particularly
useful in deciding whether gcj is an appropriate tool for compiling your
program.
• Many features of gcj are, in fact, “inherited” from the parent project,
the GNU Compiler Collection. You can ﬁnd your way to a lot of goodinformation from the GCC home page.
20
16.http://gcc.gnu.org/java/
17.http://gcc.gnu.org/java/faq.html
18.http://gcc.gnu.org/java/docs.html
19.http://gcc.gnu.org/java/jdk14-libgcj.html
20.http://gcc.gnu.org/Chapter 7 The GNU Compiler for Java (gcj) 188
Source control is such a necessary part of good development practice that it
ranks right up there with a sound compiler as a critical part of any softwareproject. It may seem like only an administrative overhead to newcomers, butits effect on a project of any size will be felt over time; it’s not the ﬁrst versionof a project that needs source control so much as versions 2 and beyond. Andit can be a life saver.
One of the Linux tools that is most appreciated on projects around the
globe is the Concurrent Versioning System, CVS.
1 It is one of the best, most
reliable pieces of software that these authors have ever used. It should be partof your repertoire of software skills, even when you’re not running on Linux.But enough praise; back to practicalities.
1. As we were writing this chapter, the core developers of CVS released version 1.0 of a new
version control system called Subversion. This new system supposedly contains many improve-ments over CVS. We do not doubt this, and we recommend that you take a look at Subversionbefore you select a version control tool. Meanwhile, we know CVS, and most Open Sourceprojects are currently managed with CVS. Choosing CVS won’t be a bad choice.
189Chapter 8
Know What You Have:
CVS
WHATYOUWILL LEARN 8.1
• Why you need CVS—the problem with source code.
• How CVS solves this problem.• Some basic CVS mechanisms:
• Importing source• Checkout• Commit• Tagging• Branch tagging• Status• Log• Export
• A quick look at a CVS GUI.
SOURCE  CONTROL :WHYS AND  HOWS 8.2
Consider the following scenario: A customer has called with a problem in the
software that your development team released over a month ago. Your develop-ers try to reproduce the problem on their systems without success. What versionof software is your team running? Well, there has been a lot of developmentin the last month, a lot has changed. Some new features have beenadded—halfway. In other words, it’s close but not really the same software.And it’s far from being ready to be given to the customer as a ﬁx-release. Well,what’s changed since the release was shipped six weeks ago? Can you ﬁnd orcreate a set of sources that matches exactly what the customer is running? Canyou then provide a modiﬁed version that contains only the ﬁx necessary andno other changes?
With such low prices for hard drives these days it is now economically
feasible to track your software releases simply by shelving an entire hard drivewith each release of your software. It could contain the source code and all thetools in use for that version. But it does make search and comparisons a bitdifﬁcult. Still, conceptually, this is almost what you’d like—to be able to accessan image of what your source looked like at any given point in time (forexample, when released).Chapter 8 Know What You Have: CVS 190
Enter cvs—the Concurrent Versioning System. It’s a versioning system ,
allowing you to retrieve copies of the source based on either date parameters(e.g., last Tuesday) or the labels that you create. It’s concurrent  because it
supports multiple simultaneous users.
You may have used a versioning system before that let multiple program-
mers work with a set of ﬁles. Often such systems will “lock” a ﬁle while oneuser is using it, keeping others from modifying it. CVS doesn’t work thatway—or doesn’t have to. Rather it allows users to each modify the same ﬁle(truly concurrent), and then reconciles the changes when those changes aremade permanent.
To explain all this, it would be best to set down some terminology, as used
by CVS.
repository
The master copy of the source.
sandbox
A developer’s local copy of the source.
checkout
The process of acquiring a copy of the source (one or more pieces) fromthe repository.
commit
The process of adding the changes from your sandbox into the repository.
update
The process of revising your sandbox with changes that have occurred inthe repository since you last updated or created your sandbox. When you“update” your sandbox, other developers’ changes that have been commit-ted to the repository are merged into your source sandbox.
tag
As a noun, is a special label that you create to mark a milestone in yoursource repository; you can return to that milestone by checking out a copyof the source with that tag.
tag
As a verb, refers to creating a tag in the source repository.191 8.2 Source Control: Whys and Hows
Once a repository has been set up for use by a project, each developer
would check out a copy of the source. Thereafter, the typical sequence for adeveloper would be:
1. Edit.
2. Test.3. Commit.4. Go to step 1.
In some organizations, developers will commit and then test. Others will
want to only commit changes that have been tested. Which order you chooseis a policy decision by your project, not mandated by CVS.
TIP
We recommend that you test before committing because once you have com-
mitted your changes, they become available to all others developers. The morepeople are working together on a project, the more important it is to keep thesource base workable, that is, clean compiling at least, so others can keepworking.
Sometimes the developer needs to do an update step before a commit.
Such a step is used to integrate other developers’ changes into this developer’ssource. Sometimes this goes smoothly; other times it needs someadditional work.
A simple scenario might help explain these steps, too.Two developers, Ti and Kwan, are working on project Doh. They already
have a repository set up with all the source for project Doh. Each developer,on his/her own system, checks out a copy of the source (
cvs checkout doh ).
Now let’s say that part of the source is a Java class ﬁle called Account.java
and it has had several changes made already, so Account.java  is now at
version 1.7 in CVS.
Let’s say that Ti ﬁnds a bug in Account.java  and makes a change to ﬁx
that problem. Ti checks in (commits) the changes to Account.java  (cvs
commit Account.java ) so that the repository now contains Ti’s changes,
which CVS keeps as version 1.8 of Account.java .
All this time Kwan has been busy modifying Account.java  (e.g., adding
a new method). Remember that Kwan is working from the 1.7 version. WhenChapter 8 Know What You Have: CVS 192
Kwan goes to commit his modiﬁed version of Account.java  to the repository,
he is notiﬁed that Account.java  has been changed since his copy was checked
out, and the commit attempt fails. So Kwan does an update which merges the1.8 version of 
Account.java  in with his modiﬁed 1.7 version. If all goes well,
the resulting ﬁle will be a 1.8 version of Account.java  which includes Kwan’s
new changes in the right place(s). Kwan just commits this to the repository,and 
Account.java then stands at version 1.9.
Note that cautionary phrase “if all goes well.” The merge will work if Ti
and Kwan have each modiﬁed different parts of the same ﬁle. If all Kwan didwas add a new method, it would merge just ﬁne. But what if they both makechanges in the same region of the source ﬁle? It is up to the programmer toresolve such conﬂicts and commit the source once again.
In such a situation, CVS does what it can to help out. There is an example
of a merge conﬂict later in this chapter. But such conﬂicts require humanintervention.
Merging of conﬂicts is, undoubtedly, a very manual process, but you will
be surprised by how infrequently you need to do this. Most changes will bemerged clean with no manual intervention required. That’s probably becausemost often, when two or more programmers are modifying the same ﬁle, theyare modifying different sections of it.
With merging, you have the ability to incorporate other developer’s
changes into your version of the source without the fear of losing your changes.No one’s changes get lost, no one’s ﬁles get “stepped on.”
Setup 8.2.1
Before you can use CVS to track your sources, you need to initialize a reposito-
ry. You can use this repository for several different projects, so you only needto do this setup once.
There are two different ways to connect to a repository—directly on a
ﬁlesystem, or indirectly over a network. We will use the simpler ﬁlesystemmechanism for this discussion. The network connections are described in thereferences at the end of this chapter.
In order for CVS to know where the repository is located and how to
connect to it, it looks for an environment variable called 
CVSROOT . You can
assign a value to CVSROOT  from the command line each time you create a CVS
project, or for more convenience, you can set it in the shell startup script(e.g., 
.bashrc ) so that its ready all the time. The CVSROOT  value is really only193 8.2 Source Control: Whys and Hows
used, though, to set up the project. Once a project is established, the informa-
tion in CVSROOT  is kept, along with other data, in a directory of ﬁles (called
CVS). From that point on, CVSROOT  (the environment variable) no longer needs
to be set. The CVS commands will always use what is in the local sandbox todetermine where the repository is; the value of the environment variable willbe ignored.
It is possible to have different repositories for different projects. One
repository might be for your personal work—revisions of memos and docu-ments that you create on your local machine and store in a repository also onyour local machine. Another repository might be a shared network-basedrepository, used for a project at work. Still another might be a network-basedproject for some Open Source work that you do in your spare time. Since theCVS repository keeps track of whence it comes, you needn’t set a value for
CVSROOT  every time you switch projects. Instead, CVS knows from within the
sandbox where to go for its updates, commits, and so on.
So let’s get started and create a CVS repository on our local Linux system,
in our own home directory. We will call the repository srcbank , as it will be
the “bank” where we will deposit our source ﬁles.
$ mkdir ${HOME}/srcbank
$ export CVSROOOT="${HOME}/srcbank"$ cvs init
The mkdir  creates the directory named srcbank  as a subdirectory of our
home directory. The export  command sets the shell variable CVSROOT  to refer
to the location of the new directory. The cvs init  command initializes the
repository with some needed directories and data ﬁles.
Before the cvs init  command, the srcbank  directory is empty. After-
ward it contains a directory called CVSROOT  (literal name, not the shell variable’s
value) which contains a variety of administrative ﬁles—most of which you neednever worry about.
If your are using a remote repository, that is, one that you connect to over
a network (typical when you are sharing a repository amongst team members),then you need one additional step—you need to log in to the CVS repository’sserver:
$ cvs loginChapter 8 Know What You Have: CVS 194
which will prompt you for a password. Having logged in once, you will not
need to log in again, even after reboots of your system, as CVS keeps thepassword (by default; it can be changed) in a ﬁle called 
.cvspass  in your home
directory. This makes using CVS with a remote repository (once you’ve loggedin as simple as if the repository were local). From here on, the commands willall look the same. If your repository is remote, CVS will use the password fromyour 
.cvspass  ﬁle, without asking you for it.
Import 8.2.2
Are you wanting to use CVS on an existing project? Have you already got your
project at least partly underway? Let’s look at how to enter all those ﬁles intoCVS with a single command.
Not every ﬁle that is in a working directory needs to be kept under source
control. Some, like 
.class  ﬁles, are created from the .java  source ﬁles. Others
may be just scratch ﬁles that you don’t want to keep versioned.
To automatically exclude certain ﬁles from ever being included in your
repository, CVS uses a ﬁle called .cvsignore  that lists ﬁlename patterns. Any
ﬁlename matching a pattern will be ignored by all CVS commands.
Here is a .cvsignore  ﬁle that we recommend for Java developers:
*.zip
*.class
This will exclude any ﬁle whose name ends in .class  or .zip . Note that
the comparison is strictly based on a name, not the actual contents. CVSdoesn’t know what a “class” ﬁle is; it is only excluding a ﬁle based on its name.
Certain ﬁles are not really source ﬁles and can’t be managed as such, but
we would still like to keep versions and a history of changes for them. A goodexample would be an image ﬁle. For example, you may have a corporate logoin a ﬁle called 
logo.jpg  and at some point you may get a new or revised ver-
sion of that ﬁle. You can use CVS to track such ﬁles, but you need to tell CVSthat this is a binary ﬁle, so that CVS doesn’t try to do some special substitutionsthat it does on check-in and check-out. (More about those substitutions later.)
For now, let’s just consider how to tell CVS which ﬁles are binary. We can
do that on the command line when we create a new ﬁle, but for importing alot of ﬁles at once, and to avoid the need to remember doing that each time weadd a ﬁle, we can put patterns for binary ﬁlenames in a CVS ﬁle called
.cvswrappers .195 8.2 Source Control: Whys and Hows
Here is a .cvswrappers  ﬁle that we recommend for Java developers:
#
# A recommended .cvswrappers file## jar files - treat as binary:*.jar -k 'b'## Image file formats - treat as binary:*.gif -k 'b'*.jpg -k 'b'*.png -k 'b'*.tif -k 'b'## Document file formats - treat as binary# both MSOffice and OpenOffice.org file formats:*.doc -k 'b'*.ppt -k 'b'*.xls -k 'b'*.sx? -k 'b'
The format of the ﬁle is very UNIX-like. A leading # means that the rest
of the line is a comment. The asterisk matches any number of any characters.The question mark matches a single character.
Now we’re ready to import. The 
.cvsignore  ﬁle should be placed in the
topmost directory of the set of ﬁles that you want to import. Then, from thatdirectory, issue the command:
$ cvs import Project YourCo  import
where Project  is whatever name you want to use for this project (or module )
in CVS, and YourCo  is the name of your company or some other designator
to differentiate this source from other third-party packages that you may keepin your repository.
Most importantly, execute the 
cvs import  command from within the
directory, even though the name of the project is likely (but doesn’t have to be)the same as the name of the directory in which you sit.
For example, consider a fragment of the ﬁlesystem shown in Figure 8.1.
You would want to cdinto the directory 
coolj  and then issue the import
command:
$ cd coolj
$ cvs import coolj GJSinc importChapter 8 Know What You Have: CVS 196
mydir
prev coolj misc
FetchURL.java Sprit.java Tux.javaFigure 8.1 A sample directory structure prior to import
This will create a module named coolj  in the repository, whose contents
are all the directories and subdirectories that you see there. But you had to bein the 
coolj  directory, which may seem counter-intuitive.
Now go to some other directory, one that is not part of the coolj  part of
the tree, and check out a copy of the source. For example:
$ cd
$ mkdir devsrc$ cd devsrc$ cvs checkout coolj
NOTE
It is important to check out the source after you’ve done the import, and before
you make any changes, because the part of the ﬁlesystem that you importedremains untouched. It has no CVS knowledge, so you can’t commit changesfrom that directory, unless you somehow make it CVS-aware. Since these ﬁlesare your originals, until you’ve veriﬁed that the 
cvs import  has gone as
planned, it’s best not to disturb those ﬁles. Create a new directory and checkout the module there.
What do you see after the checkout? There should be a single directory,
coolj , in the directory where you did the checkout (since it was empty when
you started). That directory contains a copy of all the ﬁles that you checked in,along with a directory named 
CVS inside that directory and every subdirectory.
The CVS directories contain administrative ﬁles that help CVS keep track of
things for you, which means no CVS tracking information needs to be kept in197 8.2 Source Control: Whys and Hows
your source. You should never need to mess with the ﬁles in the CVSdirectory;
see the Cederqvist reference in Section 8.6 for more information aboutthese ﬁles.
Normal Use 8.2.3
The typical use of CVS occurs after you’ve made some changes to your source
code. At some point, typically after the code compiles cleanly or after thechanges have been tested to some extent, you will want to commit your changesto the CVS repository. When you commit one or more ﬁles, they become thelatest version, the version that others get when they checkout or update themodule. To say it another way, when you commit, you make those changes apermanent part of the source repository, available to others.
You can commit a single ﬁle at a time, like this:
$ cvs commit Account.java
Or you can commit several ﬁles at a time, like this:
$ cvs commit Account.java User.java Xyz.java
Or you can commit all the changes from a certain point in the ﬁlesystem
hierarchy (e.g., the current directory) on down, like this:
$ cvs commit 
(Specifying no ﬁles implies the current directory. You can also name a directoryexplicitly.)
When you commit changes, CVS wants you to provide a bit of commen-
tary to explain what you’ve changed, to say something about this new version.The comment can be supplied on the command line, with the 
-m option:
$ cvs commit -m "bug fix" 
If you don’t provide the -m parameter and its argument, CVS will invoke
your favorite editor (as speciﬁed in the environment variable CVSEDITOR  or
VISUAL  or else EDITOR , in that order of precedence). The default, on Linux
systems, is to invoke vi(see Figure 8.2). In the editor, you can type one or more
lines of text; when you exit, the commit will continue to completion.Chapter 8 Know What You Have: CVS 198
Figure 8.2 CVS asking for commentary as part of a commit
NOTE
If you quit the editor without writing your changes (in vi, that would be :q!) then
CVS will ask if you want to abort the entire commit. If you choose to abort, nochanges will be made to the repository. You’ll be right back to where you werejust before typing the 
cvs commit  command.
You will be able to see the comments associated with each version of the
ﬁle using the cvs log command (see Section 8.2.6).
As you will want to provide brief but meaningful descriptions in these
comments, it may be helpful to remind yourself what in fact has changed. Youcan see the differences between the version that you checked out and the ﬁle asit stands today by using the 
cvs diff  command:
$ cvs diff Account.java
Here, as in commit , you can name one or more ﬁles, or even a directory. CVS
will display what lines you’ve added, modiﬁed, or removed in each ﬁle.199 8.2 Source Control: Whys and Hows
Example 8.1 Sample output from cvs diff
$ cvs diff Account.java
albing@cvs.multitool.net's password:Index: Account.java===================================================================RCS file: /usr/lib/cvs/cvsroot/JavaAppDevLinux/majorApp/net/multitool/core/Account.java,vretrieving revision 1.10diff -r1.10 Account.java31d30<       this.parent = null;66a66>     * returns an iterator93c92<       children.put(acct, name);--->       children.put(name, acct);$
In Example 8.1, CVS has found three differences—one line being re-
moved, one line being added, and one line being changed. The < precedes lines
from the repository version, and the > precedes lines from the new, that is,
changed, version. The 31d30  shows the line numbers from both versions, sep-
arated by a single character to indicate what difference action is being described:
a for adding lines, d for deleting lines, and c for lines that change.
A typical work sequence might go something like this:
1. Edit some ﬁles.
2.cvs diff  those ﬁles.
3.cvs commit  those ﬁles.
4. Go to 1.
The cvs diff  command is also quite useful for ﬁnding out what changed
between some previous version of a ﬁle and the current version:
$ cvs diff -r 1.15 Account.java
or between two different previous versions:
$ cvs diff -r 1.12 -r 1.15 Account.javaChapter 8 Know What You Have: CVS 200
or since a certain date:
$ cvs diff -D 06-Sep-03 Account.java
Update 8.2.4
If there are other people working on this project with you, they will also be
making changes. To bring there changes into your sandbox, run the cvs
update  command:
$ cvs update 
cvs server: Updating .P Account.javaM User.javacvs server: Updating subdir
Here, P indicates CVS has patched in changes to that source ﬁle; and M
indicates you have modiﬁed the ﬁle. Note that Xyz.java  is not mentioned.
That means there were no updates involved.
The subdirectory subdir  was also updated, but no changes were made.
Had a change been made, you would see the modiﬁed ﬁles mentioned by name.
You can update a single ﬁle at a time by naming that ﬁle on the command
line, but typically you want to get the changes for all the ﬁles in a directory, oreven all the changes throughout the project, since a change in one ﬁle may bedependent on changes in other ﬁles.
Sometimes when you try to commit your changes you will be told that the
commit did not succeed because one or more of your ﬁles was not up to date.Not to worry; it’s easy to bring your ﬁles up to date. This leads directly intoour next topic. Read on!
Merges 8.2.5
When you commit changes, a new version of each changed ﬁle is now part of
the repository. If someone else commits changes, that person’s changes are nowpart of the repository as well. But those changes (unlike your own local changes)are yet to appear in your own local copy of the ﬁles, that is your sandbox.
The following CVS command will bring your ﬁles up to date with all the
changes made since you checked out your copy (or last did an update):
$ cvs update201 8.2 Source Control: Whys and Hows
With that command all the ﬁles from the current working directory on
down will be updated with the most recent versions of the ﬁles from therepository—and not just updated: changes that you have made in your localﬁles will be preserved and merged  with the new version of the ﬁles.
Here’s what a successful merge looks like:
$ cvs update Account.java
cvs server: Updating Account.javaM Account.javaRCS file: /usr/local/srcbank/JavaAppDevLinux/Account.java,vretrieving revision 1.17retrieving revision 1.18Merging differences between 1.17 and 1.18 into Account.javaM Account.java$
Remember our scenario earlier in the chapter? Our two programmers, Ti
and Kwan, have each modiﬁed the same ﬁle. If all Kwan changed was addinga new method, it would merge just ﬁne. But what if they both made changesin the same region of the source ﬁle? Well, the ﬁrst one to check in his changeswill be ﬁne. His commit will succeed. But the second person to try to commitchanges to the ﬁle will ﬁnd that CVS will report an error:
$ cvs commit Account.java
cvs server: Up-to-date check failed for `Account.java'cvs [server aborted]: correct above errors first!cvs commit: saving log message in /tmp/cvsQ9rk01
Now, attempting to update will put both versions in your local ﬁle, marked
up by certain character strings to highlight and separate the sections. It is upto the programmer to resolve those conﬂicts and commit the source once again.
Here’s an example of how a conﬂict might look in a source ﬁle:
<<<<< ver. 1.7
for (i=0; i<20; i++) {    myData.callSomething(dollars, time);}======while (i<20) {    myData.callOtherwise(dollars*(i++), time/60);}>>>>>Chapter 8 Know What You Have: CVS 202
In such a case, the programmer must decide which changes to keep, or
how to combine them. After editing the ﬁle and removing the dividing lines(i.e., 
<<<<< , ===== , and >>>>> ), recompiling and probably a bit of testing,
too, the programmer can now do a cvs commit  to incorporate his changes in
the repository.
Log 8.2.6
With each cvs commit  you are prompted for a comment, to describe the
changes that you are committing. What happens to these comments? How canyou see them again? Use the 
cvs log  command to show the history of a ﬁle’s
revisions and associated comments.
See Example 8.2 for an example of the cvs output command.Looking down the output of 
cvs log , you can see
• The complete ﬁlename—in the repository—of the ﬁle whose log we’re
checking out.
• The local ﬁlename in your sandbox.• Which revision is the “head,” that is, the front-most or default revision.• Which branch, if any.• What kind of locking mechanism CVS uses. There are some choices, but
most users of CVS leave this as is.
• The access limitations. CVS can limit who can modify ﬁles (see our
reference list if you need to use this).
• A list of all the tags (symbolic names) for this module and to which
revision each refers.
• What kind of keyword substitution happens. For binary ﬁles this would
be 
kb.
• The count of revisions for this ﬁle.
Then comes a description of each of the revisions, showing
• The revision number.
• Some stats on the change including the user ID of the user who committed
the change.
• How many lines were added and deleted compared to the previous revi-
sion.203 8.2 Source Control: Whys and Hows
Example 8.2 An example of running the cvs log  command
$ cvs log Account.java
RCS file: /usr/local/srcbank/JavaAppDevLinux/Account.java,vWorking file: Account.javahead: 1.4branch:locks: strictaccess list:symbolic names:keyword substitution: kvtotal revisions: 4; selected revisions: 4description:----------------------------revision 1.4date: 2003/05/20 11:59:59;  author: albing;  state: Exp;  lines: +80 -5more comments added----------------------------revision 1.3date: 2003/05/18 15:03:23;  author: albing;  state: Exp;  lines: +3 -2end case fixed----------------------------revision 1.2date: 2003/05/17 11:05:40;  author: albing;  state: Exp;  lines: +69 -2actually runs - unit tested----------------------------revision 1.1date: 2003/05/17 10:15:18;  author: albing;  state: Exp;a rough structure=======================================================================
• The comment that was entered when the user committed the change.
(For a description of state, and why you will almost always see Exp; , see the
Cederqvist reference in Section 8.6.)
Do you want less output from cvs log ? You can restrict the information
to cover only a certain user’s changes ( -w), to a certain range of revisions ( -r),
and/or between certain dates ( -d).
For example,
cvs -walbing -r1.2:1.4 -d05-Sep03 -d28-Sep-03 Account.java
will list only changes committed by user albing , only in the revision range of
1.2 through 1.4, and only between the dates of 05 and 28 September of 2003.Chapter 8 Know What You Have: CVS 204
Note: do not put a space between the -w, -r, or -d and its parameter or CVS
will think that the parameter is the name of a source module, and you will seea message like this:
$ cvs log -r 1.2:1.4 Account.java
cvs log: nothing known about 1.2:1.4...
which will be followed by output about the Account.java  module that CVS
does know about.
For more variations on the logging output, type:
$ cvs log --help
cvs status 8.2.7
While the cvs log  command will tell you about the history of all revisions of
a ﬁle, you sometimes need to know the status of the current ﬁle in your sand-box: Which revision is it? From where did it come? And, most importantly, isit part of the head or part of a branch?
Those questions can be answered with the 
cvs status  command. Its
output will show the revision number of the ﬁle in your sandbox and any“sticky” tags. But to understand what that means, we need to talk about tagsﬁrst.
cvs tag 8.2.8
We began this chapter asking: “Can you ﬁnd or create a set of sources that
matches exactly what your customer is running? Can you then provide a mod-iﬁed version that contains only the ﬁx necessary and no other changes?” Partof the answers to these questions will depend on your use of the 
cvs tag
command. With it, you can set down a label across all your source to mark aparticular milestone, so that later you can recall that version of the source.For example,
$ cvs tag Rel_2_4
will put a tag (that is, a label) called Rel_2_4  on the head revision of all source
ﬁles from the directory where this command was executed on down through205 8.2 Source Control: Whys and Hows
all its subdirectories. If you run this command from the uppermost directory
in your project sandbox, it will label your entire project.
A tag can be applied to a single ﬁle or group of ﬁles by listing them
explicitly on the command line.
NOTE
Certain special characters are not allowed in CVS tags. Speciﬁcally, the charac-
ters $,.:;@  are not allowed. So you can’t use release_2.4  as a tag.
Too bad.
Tags cut across the various revisions of the source. While you can specify
that a tag goes on the same revision of all sources (e.g., cvs tag -r 1.3
one_dot_three_tag ), the more typical use is to tag different revisions of each
module, the revisions that you’ve just been working with and testing.
Figure 8.3 shows a tag ( QA) that cuts across the various revisions of the
different sources. With such a tag, someone can check out a copy of the sourcesto get the 
QA release:
$ cvs co -r QA project
a.java
v. 1.1a.java
v. 1.2a.java
v. 1.3
b.java
v. 1.1b.java
v. 1.2
QA tagb.java
v. 1.3b.java
v. 1.4
c.java
v. 1.1c.java
v. 1.2
Figure 8.3 A tag across three ﬁlesChapter 8 Know What You Have: CVS 206
Since your project would likely have more than one time in its life that it
would be handed off to QA, some people will put date information in the tag,
for example, QA_2003_07_15 . Others will use a simple tag, such as QA, but
such a tag may need to be reused.
If you’ve put down a tag and decide that you no longer want that tag
(for example, your product is preparing for a new QA cycle and you want to
reuse last cycle’s tag, or maybe you simply misspelled your tag), you can deleteit using the 
-d option.
WARNING
Once you delete a tag, it’s gone forever. It is not available even when you recall
earlier versions. If you reuse a deleted tag, it doesn’t remember any history fromits ﬁrst use.
Imagine your project has just reached a milestone, like the hand-off to QA,
so you have tagged your source accordingly. Now the QA group ﬁnds a bug and
you ﬁx it. What do you do with the tag? The tag will be on the unﬁxed versionof source. One thing that you can do, after you commit your changes, is simply
to move the label:
$ cvs commit Account.java
...$ cvs tag -F QA Account.java
This will “force” the tag on Account.java  to move to the current version.
Such a mechanism works ﬁne for the short term, for quick changes that
are put in shortly after the tag has been set down. But what if it takes QA several
days to ﬁnd the bug, and what if, during that time, you’ve been refactoring
Account.java , or adding features for a future release? In those cases, what you
really need is a branching tag.
Branching Tags 8.2.9
When you use the -b option with a cvs tag  command, then the tag you create
is a “branching” tag. That means that you now have two paths in your sourcerepository. You can check out source from, and commit changes to, either ofthose paths. This allows you to keep moving ahead with new development onthe head or tip of the source while providing ﬁxes against a previous version.207 8.2 Source Control: Whys and Hows
a.java
v. 1.3a.java
v. 1.4a.java
v. 1.5a.java
v. 1.6a.java
v. 1.4a.java
v. 1.5
a.java
v. 1.4a.java
v. 1.5Head
QAFigure 8.4 A simple branch and merge
Figure 8.4 shows a single source ﬁle with a single branch. The tag ( QA)
may have been applied to multiple ﬁles, typically to your entire project. Thebranched version of each ﬁle (for example, 1.3.1.1) is not created until the nextchange is checked in for that ﬁle, so many of the ﬁles with the tag may still beon their main source branch.
TIP
When do you want to create a branching tag? You can do it at any time that you
lay down a tag. We have found it best to do it right away when you “release”your software, that is, whenever you hand it off to another group (e.g., 
QA or
customers). This provides a label (the tag) to identify what exactly was handedoff, but also puts the possibility for branching in place for ﬁxes that may beneeded on that branch.
Let’s look brieﬂy at the steps you would take to lay down a branching tag
named QA, and then apply a ﬁx to that branch.
In the directory where you have your current source, which is what you
just released, set down the branching tag:
$ cvs tag -b QA
NOTE
You have just set down the branching label on the source but you have not
changed your current set of sources. If you make changes in the current direc-tory (and subdirectories) and check those changes in, you will be making thosechanges to the head, not the branch, of the source.Chapter 8 Know What You Have: CVS 208
Example 8.3 Checking out a tagged revision
$ cd
$ mkdir fixes$ cd fixes$ cvs co -r QA myprojectcvs checkout: Updating myproject...U myproject/Account.javaU myproject/Caltron.javaU myproject/Demo.javaU myproject/Employee.javaU myproject/Person.java...$ cd myproject$ cvs status Account.java===================================================================File: Account.java      Status: Up-to-date
   Working revision:    1.2     Sat Oct 26 03:32:17 2002
   Repository revision: 1.2     /usr/local/srctree/myproject/Account.java,v   Sticky Tag:          QA (branch: 1.2.2)   Sticky Date:         (none)   Sticky Options:      (none)
$
Now that you have the label set down, you need to check out a copy of
that version of the source. Since we are checking out a new copy, be sure that
your CVSROOT environment variable is set appropriately (see above). Then ﬁnd
some new directory to put your source and check out a copy with the tag, asshown in Example 8.3.
We did a 
cvs status  after the checkout to show you the important dif-
ference between this version and the other versions. These ﬁles will all show a
Sticky Tag  in their status. This is the label used to check out or update this
version of the source. When you check in changes to these source ﬁles, thechanges will be against that branch, and not the head.
From there on, everything is the same. Make your changes and just check
ﬁles in as usual. CVS will remember (via the ﬁles in the 
CVS directory) that
you’re on the branch, so when you check things in, they’ll go to the branch.
The important thing is to create the tag as a branch  tag so that you can
commit changes against that branch. The downside, however, is that you now209 8.2 Source Control: Whys and Hows
have two different source versions; bug ﬁxes have to be made in both sources,
new features have to be added twice, and so on.
The easiest way to deal with that is to keep your number of active branch
tags small; you likely don’t want to have to apply a ﬁx to 14 differentbranches. Also, keep the lifespan of the branches brief—which is, of course, arelative term.
CVS does provide commands to merge a branch back into the source head.
But for this, we will refer you to other CVS material. Our job is to give you anoverview and a feel for the possibilities. For this sort of task you will want acomplete reference manual.
For more variations on 
cvs tag , type:
$ cvs tag --help
cvs export 8.2.10
If you want to produce a copy of your source tree without the CVS subdirecto-
ries—just the pure source—you can use the cvs export  command. Like the
inverse of import, it will check out a copy of the source, but will not create anyof the 
CVS subdirectories that allow CVS to manage the commits, checkouts,
logging, status, tags, and so on. In other words, the exported directories are nota CVS sandbox—they’re just a copy of the ﬁles.
NOTE
Changes made to an exported collection of ﬁles cannot be committed back to
CVS. Of course you can get the changes back into CVS by creating a sandboxwith a 
cvs checkout  command, copying all or some of the exported ﬁles into
that sandbox, and then committing the changes from there. But it’s better tothink of export as a one-way street.
A Quick Look behind the Scenes 8.2.11
If you are one of those people who worry excessively about efﬁciency, let us re-
assure you that CVS is OK. You could think of a CVS repository as saving eachrevision of a ﬁle (for example, versions 1.1, 1.2, and 1.3), but in fact CVS onlykeeps a single full version of a ﬁle—the latest version—and then stores thedeltas , that is, changes required to revert back to the previous versions. So it
keeps a full version of 1.3, but then only the differences between 1.3 and 1.2Chapter 8 Know What You Have: CVS 210
and the differences between 1.2 and 1.1. This means that it is always very efﬁ-
cient to get the latest version of any ﬁle. (Other systems have tried keeping theoriginal and the deltas for each revision going forward—but that gets very ex-pensive to retrieve versions with hundreds of modiﬁcations. With CVS, thelatest version is always at hand.)
An exception to this are “binary” ﬁles, those on which CVS can’t do key-
word substitutions. The revisions of those ﬁles, such as JPEG image ﬁles, won’tbe stored by deltas, but by complete copies of each revision.
A GUI: JCVS 8.3
If you are a die-hard GUI kind of developer, and aren’t yet convinced of the
power and convenience of the command line, then reread Section 1.3.10. Ifyou are still not convinced, that’s OK—you can still use CVS with the help ofa GUI written entirely in Java. This is an implementation of the CVS client,that is, the portion of the CVS system that communicates with a remote server.The server does the real work of managing the versions; the client collects thedata, manages the local ﬁles, and communicates with the server.
If you’re going to use jCVS, you will need to get a CVS server up and
running—or maybe your project administrator has already done that. If so,read on.
Installing jCVS 8.3.1
jCVS can be downloaded from 
www.jcvs.org  where you can get it as a zipped
archive ﬁle. Unzip it into a directory and create a shell script to make it easy toinvoke. Since jCVS is an actual Java program, all the shell script needs to do isto ensure that its JAR ﬁles are on the 
CLASSPATH  and then invoke the jCVS
main class.
Here’s a straightforward shell script which will accomplish that:
JCVS="/usr/local/jCVS-5.2.2"
CLASSPATH="${CLASSPATH}:${JCVS}/jars/activation.jar"CLASSPATH="${CLASSPATH}:${JCVS}/jars/jcvsii.jar"CLASSPATH="${CLASSPATH}:${JCVS}/jars/jh.jar"CLASSPATH="${CLASSPATH}:${JCVS}/jars/js.jar"java -jar ${JCVS}/jars/jcvsii.jar211 8.3 A GUI: jCVS
You would need to change the deﬁnition of JCVS  to match the directory
where you unpacked the ZIP ﬁle, but the rest will work with your location. Ofcourse the classpath could all be set on one longer line, but this way is morereadable.
Run jCVS (Figure 8.5) and navigate to the checkout page (Figure 8.6) to
ﬁll in the parameters for your CVS server. Then you should be able to contactit for checking out your sources (Figure 8.7).
Figure 8.5 jCVS splash screen
Figure 8.6 jCVS initial screenChapter 8 Know What You Have: CVS 212
Figure 8.7 jCVS checkout screen
Conspicuous in its absence on the jCVS Web site is a good user manual.
Since we’re proponents of the command line, don’t look for it here, either.
Many, if not most, Java developers these days will be using, at least part
of the time, an Integrated Development Environment (IDE). One of the toolsthat these IDEs integrate is a source code manager, and typically for OpenSource tools that means CVS. So while we’re not giving you much info onjCVS, you will ﬁnd a useful GUI for CVS inside most IDEs.
REVIEW 8.4
This chapter has been all about CVS, one of the great jems of the Open Sourceworld. Projects all across the globe depend on CVS to track their sourcechanges, as programmers half a world away collaborate and share source.
We discussed how to import source ﬁles into CVS and how to get them
back out. We discussed the mechanism for checking in changes and how tosort out collisions for the rare occasions when automatic merges don’t succeed.We described how to tag a set of source ﬁles for later retrieval, and how to make213 8.4 Review
those tags into branches in your source tree. We also discussed how to show
the history of those changes and the status of a source ﬁle. Finally, we took aquick look at a GUI for use with CVS, for those so inclined.
WHATYOU STILL DON’T KNOW 8.5
• The myriad of administrative commands which help you manage and
maintain a source library. Most of those commands you won’t need, butit’s nice to know that they are available, just in case. Refer to theCederqvist document (Section 8.6) for all the gory details.
• How to set up remote users for sharing a CVS repository on a network,
especially the use of the 
CVS_RSH  environment variable.
• How CVS integrates into development tools. We’ll see this in the coming
chapters; for example, CVS interaction is built into NetBeans, SunONEStudio, and Eclipse.
• How good it feels to have CVS come to the rescue so you can recover a
version of something that you thought was lost. May you never have tolearn this the hard way.
RESOURCES 8.6
•Version Management with CVS  by Per Cederqvist et al. is the “ofﬁcial”
manual for CVS. It can be viewed as HTML or downloaded as HTML,PDF, or PostScript from 
http://www.cvshome.org/docs/manual/ .
• Chapter 6 of The LINUX Development Platform: Conﬁguring, Using and
Maintaining a Complete Programming Environment  by Rafeeq Rehman and
Christopher Paul (ISBN 0130826758, Prentice Hall PTR) gives a goodintroduction to CVS. They give more information, too, on jCVS as wellas on how to integrate CVS into Emacs.Chapter 8 Know What You Have: CVS 214
Ant1 is a tool for building and deploying collections of ﬁles. It is particularly
suited to building and deploying Java applications (in no small part because itis written in Java). Ant is well worth knowing and using for all but the simplestJava applications.
WHATYOUWILL LEARN 9.1
• How to install and set up Ant.
• Enough about XML to read an Ant buildﬁle.• The basic tags used in most buildﬁles.• The extent of our remaining ignorance after completing the chapter.
1. I must mention something about the title of this chapter: There was a Monty Python’s
Flying Circus episode that had this title, and my inner geek couldn’t resist.
215Chapter 9
Ant:
An Introduction
THE NEED FOR A  DIFFERENT  BUILDTOOL 9.2
James Duncan Davidson had a problem. Perhaps you’ve had this problem, too.
It has to do with the building of software—compiling, copying, and otherwisemodifying ﬁles to get all the pieces in all the right places for running a collectionof programs.
There are a number of ways to automate the building of software. You can
script the compilation using shell scripts or batch jobs. That works ﬁne, butthere are two problems with that solution. First, scripts are generally notportable across very different operating systems. That’s a serious problem for alanguage like Java, which is intended to be portable across operating systems.Second, it is difﬁcult if not impossible, using scripting languages, to preventwasted compiles; the checking and comparing of date stamps on source andobject ﬁles makes scripts large and difﬁcult to maintain.
Very well, we hear you say. There’s make . The make  program has been
around for a long time. It is available on many operating systems. It handlesthe conditional compilation of ﬁles very well. It has been around for centuries(it seems). It is well known and widely used. All of this is true, but even thisvenerable tool falls a bit short in the Java world. First of all, although makeﬁlesare generally far more portable than other scripts, there are still considerablevariations in details, and make  does nothing to mask the differences in ﬁle,
path, and disk designations that exist across operating systems. Moreover, bothmake  and scripts suffer from a more basic problem. Although Java programs
can execute reasonably quickly, the overhead of starting a JVM and tearing itdown again is considerable. Since javac  is written in Java, each time it is in-
voked to compile a source ﬁle (one ﬁle at a time is the make  way) this setup
and teardown time cost is paid.
But, we once more hear you protest, you can just use javac  on the entire
project! Doesn’t it build everything that needs to be built? In the simplest case,yes, it does. But as soon as you share code between projects, or use RMI whichrequires execution of the rmic compiler, or use EJBs, or link in native methods,
then javac ’s dependency resolution just will not work.
Luckily, James Duncan Davidson had this problem. And luckily it really
bothered him. And even more luckily for us all, he decided to share his solution.Chapter 9 Ant: An Introduction 216
His solution was Ant, which we will from now on refer to as ant. Why
ant? Well, he suggests that it might be because ants are little things2 that build
big things. He has also suggested (in his preface to the O’Reilly book Ant: The
Deﬁnitive Guide , Jesse Tilly and Eric Burke) that it might stand for “Another
Neato Tool.” We’re inclined to put forth the former, but believe the latter.
James Duncan Davidson wrote ant and contributed it to the Apache
project, so it is Free Software. And it makes the problems cited above ratherpifﬂing. Through the rest of this chapter we will describe how.
OBTAINING AND  INSTALLING  ANT 9.3
You can obtain ant from the Apache Web site.3 Which version you download
will depend on your system and your needs. There are stable releases and dailybuilds. Unless you have a compelling need for a feature not yet in a stable re-lease, we would suggest you stick with the most recent stable release. As of thiswriting, that is version 1.5.1.
If you are using RedHat, or another Linux distribution that uses the
RedHat Package Manager, rpm, then the simplest way to install would be to
download the RPMs linked from the Web site and install those:
$ rpm -i ant-1.5.1-3jpp.noarch.rpm
You have two other options besides the trusty old RPM method. First,
you may download a binary tarball , a word often used for a compressed ﬁle
created with the tar utility, or you may download and compile the ant
source code.
Let’s take these each in turn.
Installing a Binary Tarball 9.3.1
Binary distributions of ant are available in .zip , .tar.gz , and .tar.bz2
formats. Utilities are available for all of these formats for Linux, although you
2. Not so little anymore. As of this writing, the head of the CVS tree for ant weighs in at just
shy of 48MB, and there are 5,239 ﬁles in there! These totals include a lot of project documen-tation, but even considering only the 
src subdirectory, we are still looking at 18MB and
1,687 ﬁles. It is probably incorrect to call ant a “little thing” these days.
3.http://ant.apache.org/217 9.3 Obtaining and Installing Ant
will ﬁnd that generally .zip  ﬁles are intended for Windows machines and
.tar.gz  and .tar.bz2  for UNIX systems. The .gz format is decompressed
with the gzip utility and .bz2  ﬁles with the bzip2  utility. The bzip2  compres-
sion algorithm produces better compression, while gzip is “more common.” If
you have a modern Linux distribution, you almost certainly have both installedalready.
Once you have the archive ﬁle downloaded, you should download one of
the ﬁles linked next to it. These are cryptographic hashes of the legitimatearchive ﬁle so you may be (more) assured that the software is the software youthink it is. The ﬁrst, PGP, is an actual digital signature. If you are already famil-iar with PGP or GnuPG and are comfortable with them, then by all means usethis. It is, as you know, a superior form of validation compared to MD5. Butexplaining how to use digital signatures and GPG keys is beyond our scopehere. As for MD5, however, this is fairly easy.
An MD5 hash is a 128-bit value generated in such a way that it is impos-
sible for two different ﬁles of the same length to have the same hash value (ac-tually, the term used in the literature is “computationally unfeasible,” but forour purposes that is the same thing). If you run the program md5sum  with the
tarball ﬁle as an argument and you get the same number as the one you down-loaded, you may be certain that the ﬁle you have is an exact match with theone that was used to produce the number you downloaded from the Web page.Remember that this is all that is proved by this. If both the ﬁle server and the
Web page have been compromised, then the fact of a match doesn’t meanmuch. A mismatch  however proves that one of the two has been compromised
and you probably shouldn’t use the tarball.
You should get in the habit of verifying checksums and digital signatures
where they are supported.
If you are still worried about the dual compromise, well, that’s where a
PGP digital signature can help. It not only proves the integrity of the data; italso proves the identity of the generator. Learn more about PGP (actually, theFree Software version of it, called GnuPG, at the GnuPG Web site.
4
Once you have downloaded both the md5ﬁle and the tarball, validate and
extract the tarball (Example 9.1).
Note that we did this in a regular user’s home directory. If you just wish
to use ant yourself, then this is the way to go. If you wish to make ant available
4.http://www.gnupg.org/Chapter 9 Ant: An Introduction 218
Example 9.1 Validating and extracting the ant tarball
$ cat jakarta-ant-1.5.1-bin.tar.gz.md5
2be27d9e09011bf1cc3d1967ee34f7d1
$ md5sum jakarta-ant-1.5.1-bin.tar.gz
2be27d9e09011bf1cc3d1967ee34f7d1  jakarta-ant-1.5.1-bin.tar.gz$ zcat jakarta-ant-1.5.1-bin.tar.gz | tar xf -$ cd jakarta-ant-1.5.1$ lsbin           docs         etc          KEYS            lib          LICENSE       LICENSE.dom  LICENSE.sax  LICENSE.xerces  README welcome.html  WHATSNEW$
to multiple (or all) users on the system, you will want to untar as root  and
move the resulting directories to locations convenient to other users, such as
/usr/local .
Whether for one user or for many, there is a handful of remaining tasks
to make ant usable.
Environment Variables 9.3.1.1
The JAVA_HOME  environment variable should already be set as a result of setting
up your JDK. JAVA_HOME  should point at the base of your JDK installation.
The ANT_HOME  environment variable should be set to point at the untar-
ed installation of ant. In our sample here, it would be ~/jakarta-ant-1.5.1 .
Make sure that the bin directory of the ant installation is added to
your PATH .
Installing a Source Tarball 9.3.2
We do not encourage you to install ant from source, although we do encourage
you to download and study the ant source. It is an excellent sample Java
application.
If you must build from source, the start of the process is the same as above.
You download the tarball, verify it with GPG or md5sum , then unzip and
untar it.219 9.3 Obtaining and Installing Ant
It begins to differ at this point. The ant source package comes with a shell
script, build.sh , that actually builds a minimal version of ant and then runs
ant to complete the install.
Make sure that the JAVA_HOME  and ANT_HOME  are set as you want them,
then execute build.sh install . Unless you have installed the optional tasks,5
you will see several warnings about missing classes. You may safely ignore these.
As with the installation of other packages built from source, you will need
to have appropriate permissions for the target directories. This might meanrunning the install as root, with all appropriate attention and dread.
A SAMPLE  ANT BUILDFILE 9.4
Let’s go over the basics of creating an Ant buildﬁle. We’ll start with an intro-duction to XML, and then move on to the speciﬁc tags Ant supports and howyou might use them to automate a build.
XML for the Uninitiated 9.4.1
The buildﬁles of ant, usually named 
build.xml , are written in Extensible
Markup Language, or XML. Some of the reasons for this are:
• XML is hierarchical.
• XML is standardized.• XML is widely used and familiar to many programmers.• Java has many classes for reading, parsing, and using XML.• XML-based representations of hierarchical data structures are easy to read
and parse for both humans and programs.
XML is a successor to SGML, Standard Generalized Markup Language,
which is a language for deﬁning markup languages. A markup document maybe validated . A validated document is one that conforms to a structural speciﬁ-
cation of the markup tags in the document. Such a speciﬁcation may be madeusing a Document Type Deﬁnition (DTD), which is a holdover from the waySGML markup languages were speciﬁed, or using one of the newer speciﬁcation
5. There is a horde of optional tasks. As the name suggests, they are optional. Include these if
you need them. This is the only mention they will receive.Chapter 9 Ant: An Introduction 220
standards, such as W3C’s XML Schema. In either case, the DTD or schema
specify what tags may be used in the markup, where they may exist with respectto one another, what attributes tags may have, and how many times a given tagmay appear in a given place. A document can thus be validated—that is,checked against the corresponding DTD or schema. It’s not necessary, however;in many situations, documents can also be used without validation so long asthey are well-formed —that is, conform to the basic syntax of XML.
HTML, with which even nonprogrammers are familiar, is an instance of
a markup language deﬁned in terms of SGML (and XHTML is its reformula-tion in terms of XML). This book itself was written in Docbook, which isanother SGML markup language.
So, if SGML is such a wonder, why is XML all the rage? Well, SGML is
one of those standards that attempt to “subsume the world.” SGML has verycomplex and ﬂexible syntax, with many different ways to represent a simplemarkup construct. Thus, to completely implement an SGML parser is difﬁcult.Recognizing that 90% of the complexity of SGML is needed in only about 1%of cases, the designers of XML realized that they could make a markup speciﬁ-cation language only 10% as complicated that would cover 99% of cases (ofcourse, like 85% of statistics, we’re making these numbers up, but you getthe point).
Implementing an XML parser, while not exactly trivial, is much easier
than implementing an SGML parser.
SGML/DSSSL and XML/XSLT are efforts to make the transformation
and presentation of hierarchical data easier and more standardized. If whatyou have read here is all that you know about XML (or SGML), you shouldcertainly consider getting yourself a book on these important standards.
For now, we can say that XML consists of tags which are set off from data
content by the familiar less-than and greater-than brackets we are used to seeingin HTML:
<samplexmltag>
Just as in HTML, the tags may have start tag and end tag forms:
<samplexmltag>Sample XML tagged data</samplexmltag>
The entire construct, including the pair of matching tags and everything
inside them, is called an element . The start tags may also, like in HTML, carry
data inside them in the form of attributes :221 9.4 A Sample Ant Buildﬁle
<samplexmltag color="blue">Sample XML tagged data</samplexmltag>
If you have an empty element, one that that either does not or cannot have
data between its start tag and end tag, you may “combine” the start and endtag by putting the slash at the end of the tag:
<samplexmltag color="blue"/>
Obviously, there is more to it than this, but it is enough to begin with.
XML’s uses range from publishing to networked interprocess communica-
tions. Our interest here is in using it to represent a model of a piece of softwareand the various ways that software might be built and deployed. So from hereon, we will be discussing not XML in general, but the ant document type. Ac-
tually, ant’s markup language uses unvalidated XML. In other words, there
isn’t ofﬁcially a schema  for ant. Thus, the only formal deﬁnition for an ant
XML ﬁle is what ant accepts and understands. This is more common than it
should be. Any XML markup vocabulary really should have a schema, but oftenXML use starts with “Oh, this is just a quick thing. No one will ever read orwrite this markup. Just these two programs of mine.” These famous last wordswill one day be right up there with “I only changed one line of code!” Asstrongly as we feel about this, ant really can never have a DTD, at least not a
complete one. The custom task feature makes this impossible.
The Buildﬁle Tags 9.4.2
The buildﬁle (usually named 
build.xml ) begins with a header announcing
that this is an XML document and specifying what version of XML is beingused in it:
<?xml version="1.0"?>
The <? and ?> delimiters mark up an XML statement  (as opposed to an
XML tag).6 In this case, we are declaring that this is an XML document and
that it is using XML version 1.0.
6. Note that these are the terms we are using to describe XML to a new user. They are not the
formal terms for these document elements. For the proper names, consult an XML reference.Chapter 9 Ant: An Introduction 222
The project Tag 9.4.2.1
Every buildﬁle must begin with a project  tag. A buildﬁle must contain exactly
one project  tag.
The project  tag contains three attributes:
name
The name of the project.
default
The default target (see next section).
basedir
The base directory of the project. Usually this is “.” meaning the directorythe buildﬁle is in.
The project name is just a name. It is not of particular importance to ant,
although many IDEs that integrate ant will make use of the name attribute of
the project.
The 
default  attribute names a target  tag that will be built by default
if a build target is not passed to ant(see Section 9.4.2.2).
The target Tag 9.4.2.2
Every time you run ant, you are building a target . If you do not specify a target,
ant will run the target named in the default  attribute of the project  tag.
A project may contain any number of targets. The target  tag has ﬁve
attributes:
depends
The name or names of other targets that must be built before this targetmay be built.
description
A descriptive name for the target. Displayed when ant -projecthelp
is run.
if
Speciﬁes a property name (see Section 4.4). The target is only built if thenamed property is set.223 9.4 A Sample Ant Buildﬁle
name
The name of the target. This is the name entered as an argument to ant.
This is also the name that may be used in the default  attribute of the
project  tag.
unless
This is the reverse of the if attribute. The target is built unless the
property is set.
Properties 9.4.2.3
There is more than one way to set what we might call variables in ant. The
only one we will concern ourselves with here is properties . Properties are like a
simple hash, or associative array. They associate value, which is stored as a
String , with a name, which is also a String . They behave very much like the
Properties  class introduced earlier in this book.7 You can use buildﬁle prop-
erties to associate a single name with a single value that you use in multipleplaces throughout the buildﬁle to make conﬁguration changes easier and lesserror-prone. Some tasks also expect certain properties to be set, as we shallsoon see.
You set a property with the 
property tag (Example 9.2).
Example 9.2 A useless build.xml  example to demonstrate properties
<?xml version="1.0"?>
<project name="pointless" default="useless" basedir=".">  <target name="useless">
    <property name="example.utility" value="nil"/>      <echo>This example's usefulness:       ${example.utility}.  OK?</echo>  </target></project>
Running antwith Example 9.2 gives this output:
7. In fact, an examination of the ant source code reveals that ant properties are stored in a
HashTable .Chapter 9 Ant: An Introduction 224
$ ant
Buildfile: build.xml
useless:
     [echo] This example's usefulness: nil.  OK?
BUILD SUCCESSFUL
Total time: 1 second
Tasks 9.4.2.4
A task is something that must be done to build the target. There is no single
“task” tag; instead, each kind of task has its own tag8 so there are many tags
referred to collectively as task tags .
There are dozens of standard task tags, but only a few of them are “every-
day.” We’ll introduce a few of them here, and then talk about the tags thatdon’t fall into the project/target/task hierarchy.
Standard task attributes. All ant task tags have at least the three attributes:
id
A unique ID for the task (not required).
taskname
A name for the task, used in logging (not required).
description
A description of the task, used for comments.
The javac  task.  The javac  task, not surprisingly, runs the Java compiler.
Note that since the Java compiler is written in Java and so is ant, there is no
VM launch overhead to running the compiler. This can make ant many times
faster than make  simply for normal compiles.
The javac  tag is one of the most complex in ant.
The javac  task tag has a very large number of attributes, and may contain
quite a number of other tags within it. First off, it is sensitive to a property,
build.compiler , which may be used to specify that a particular Java compiler
version must be used. The use of this will come up later when we build part of
8. In fact, task tag names correspond to the names of the Java classes that implement them.
This will matter to you only if you wish to write your own ant tasks. We will not take you that
far in this book.225 9.4 A Sample Ant Buildﬁle
our application using the GNU Compiler for Java, but for now, and in general,
you will not set this property,9 compiling with the default compiler for the JDK
version you are using. This is ant’s default behavior.
srcdir
Location of the Java source ﬁles.
destdir
Location to store the class ﬁles.
includes
Comma- or space-separated list of ﬁles (optionally using wildcards) that
must be included; all .java  ﬁles are included when this attribute is not
speciﬁed.
excludes
Comma- or space-separated list of ﬁles (optionally using wildcards) thatmust be excluded; no ﬁles (except default excludes) are excluded whenomitted.
classpath
The classpath to use.
sourcepath
The sourcepath to use; defaults to the value of the srcdir  attribute or to
nested src elements. To suppress the sourcepath  switch, use
sourcepath="" .
classpathref
The classpath to use, given as a reference to a path deﬁned elsewhere.
extdirs
Location of installed extensions.
nowarn
Indicates whether the -nowarn  switch should be passed to the compiler;
defaults to off (i.e., warnings are shown).
9. The one place you are likely to need to set this is when you are using a recent JDK to compile
applets that you wish to work in Netscape 4.0 and IE 4.0 and older browsers. But this bookdoesn’t teach you Java applets. We swear.Chapter 9 Ant: An Introduction 226
debug
Indicates whether the source should be compiled with debug information;
defaults to off. If set to off, -g:none  will be passed on the command
line to compilers that support it (for other compilers, no command-lineargument will be used). If set to true, the value of the 
debuglevel
attribute determines the command-line argument.
debuglevel
Keyword list to be appended to the -g command-line switch. This will be
ignored by all implementations except modern and classic (version 1.2 andmore recent). Legal values are 
none  or a comma-separated list of the fol-
lowing keywords: lines , vars , and source . If debuglevel  is not
speciﬁed (by default) nothing will be appended to -g. If debug  is not
turned on, this attribute will be ignored.
optimize
Indicates whether compilation should include optimization; defaultsto 
off.
deprecation
Indicates whether source should be compiled with deprecation informa-tion; defaults to 
off.
verbose
Asks the compiler for verbose output; defaults to no.
depend
Enables dependency tracking for compilers that support this (Jikes andclassic).
The 
jar task.  The jar task makes a JAR ﬁle.
The javadoc  task.  One of the greatest beneﬁts of developing in Java is the
nearly automatic generation of thorough and correct documentation. Javadocis the tool that does the job, and the 
javadoc  task is the way to automate
document production in ant. This tag has a number of attributes that specify
where the source to be documented is located, how the documentation is to beproduced, and where the documentation is to be placed.
The 
copy  and mkdir  tasks.  These tasks are used to copy ﬁles and make
directories.227 9.4 A Sample Ant Buildﬁle
The rmic  task. Remote Method Invocation is a distributed computing
technology (Section 5.8). RMI requires the generation of server and stub classesthat provide the networking support for an RMI-enabled class. This is normallydone by the rmic compiler, and this is one of the common reasons the Java
programmers turn to build automation tools. The 
rmic  tag allows ant to build
RMI classes.
Other Tags 9.4.2.5
So far we have ignored a major component of ant. In order to introduce it, we
need to give you a (painfully) high-level view of how ant works “under
the hood.”
Task tags actually map directly to Java classes that implement the tasks.
Each task class is an instance of the Task  class (in other words, it is a Java class
that either directly or indirectly extends the Task  class). This is how you can
write your own tasks—download the ant source code and write your classes
that extend the Task  class.
Tasks are not, however, the only tags that map to Java classes. There is
another category of tags that do so. They are called datatypes . These are classes
that directly or indirectly extend the antDataType  class.
Generally speaking, a task may require zero to many datatypes to specify
the data with which the task works. Some such tags include the manifest  tag
used in our sample build.xml  ﬁle discussed later in this chapter.
We’ll mention a couple of the most frequently used datatype tags here and
leave looking up the details as an exercise for you.
The PatternSet , Include , and Exclude  datatypes.  As you may have
noticed, the most common tags we have covered allow you to specify the ﬁlesto be processed using the tag’s attributes. Usually, you nominate a base directo-ry and let the task tag process everything in that directory.
There are times, however, when you need ﬁner grained control than that.
For example, you might wish to exclude all Java classes whose names end in“
Test ” (Example 9.3).
Other datatypes.  There are many other datatypes used for various purposes.
One of them, FilterSet , is able to modify ﬁles before they are copied or
moved. This can be useful, for example, to put build information into a sourceﬁle for an About  dialog.Chapter 9 Ant: An Introduction 228
Example 9.3 Using the PatternSet  datatype
<patternset id="nontest.source">
  <include name="**/*.java">  <exclude name="**/*Test.java"><patternset>
<target name="build">
  <javac destdir="build">    <src path="src"/>    <patternset refid="nontest.source"/>  </javac></target>
In general, datatypes give you more sophisticated control than do the at-
tributes of a task. Take a look at the Ant User’s Manual10 for full details on ant.
A Real, Live Buildﬁle 9.4.3
Let’s take it to the next level and examine a real working buildﬁle.
Project Organization 9.4.3.1
All but the simplest of projects will require multiple classes. Some will require
libraries, multiple programs, binary deployment, Web deployment, enterprisedeployment, and so on. A project will be most successful if you plan out whatgoes where in advance. We’re going to present a series of suggestions for howto organize the ﬁles involved in developing, building, and deploying a Javaproject with ant. By no means is this the only way it might be done, but it has
worked well for us.
The build.xml  File for Payback 9.4.3.2
Example 9.4 is the actual Ant buildﬁle for the Payback program in our source
code examples. These examples are available on the book’s Web site.11
10.http://ant.apache.org/manual/
11.http://www.javalinuxbook.com/229 9.4 A Sample Ant Buildﬁle
Example 9.4 The build.xml  ﬁle for the Payback application
<?xml version="1.0"?>
<!-- 
  $Id: 070_antIntro.sgml,v 1.51 2004/04/13 05:10:45 mschwarz Exp $  Buildfile for the Payback program.  Payback will calculate  the length of time and real amount of money it takes to make a  purchase using various savings or credit accounts. -->
<project name="Payback" default="all" basedir="."><!-- The "init" target sets up properties used throughout 
  the buildfile. --><target name="init" description="Sets build properties">  <echo>Running INIT</echo>  <property name="src" value="${basedir}/src"/>  <property name="build" value="${basedir}/build"/>  <property name="doc" value="${basedir}/doc"/></target>
<!-- The "all" target does nothing but tie together the "jar" and 
  "doc" targets. --><target name="all" depends="jar,doc"         description="Pseudo-target that builds JAR and Javadoc">  <echo>Building ALL</echo></target>
<!-- The "build" target compiles the code in the project. -->
<target name="build" depends="init"         description="Compiles the classes">  <echo>Running BUILD</echo>  <mkdir dir="${build}"/>  <javac destdir="${build}" srcdir="${src}" debug="true"          deprecation="true"/></target>
<!-- The "doc" target generates Javadoc documentation of the 
  project.  The "author", "version", and "use" attributes set to   true cause those Javadoc tags to be used in the final document.    The "private" attribute set to true causes private methods and   attributes to be included in the documentation.  We tend to use   this for projects to provide complete reference documentation.   You would probably not want to do this for an app or lib   distributed as a JAR file only. -->Chapter 9 Ant: An Introduction 230
<target name="doc" depends="init" 
        description="Generates Javadoc documentation">  <echo>Running DOC</echo>  <mkdir dir="${doc}/api"/>  <javadoc packagenames="net.multitool.Payback.*"           sourcepath="${src}" destdir="${doc}/api"           author="true"       version="true"            use="true"          private="true"/></target>
<!-- The "jar" target depends on the "build" target.  It places 
  all of the class files in the project into a JAR file, and   builds a manifest using the "manifest" tag. --><target name="jar" depends="build"         description="Builds an application JAR file">  <echo>Running JAR</echo>  <jar basedir="${build}" jarfile="${basedir}/Payback.jar">    <manifest>      <attribute name="Version" value="1.0"/>      <attribute name="Main-Class"                  value="net.multitool.Payback.Payback"/>    </manifest>  </jar></target>
<!-- The "run" target depends on the "jar" target.  It executes 
  the class named as the "Main-Class" in the JAR's manifest. --><target name="run" depends="jar" description="Runs the program">  <echo>Running RUN</echo>  <java jar="${basedir}/Payback.jar" fork="true">    <arg value="${basedir}/accounts.properties"/>  </java></target>
<!-- The "clean" target erases all files and directories that other 
  Ant targets might have generated.  It returns a copy of the   project tree to a "pristine" (some might say "clean") state. --><target name="clean" depends="init"         description="Erase all generated files and dirs">  <echo>Running CLEAN</echo>  <delete dir="${build}" verbose="true"/>  <delete dir="${doc}/api" verbose="true"/>  <delete file="Payback.jar" verbose="true"/></target> 
</project>231 9.4 A Sample Ant Buildﬁle
REVIEW 9.5
We’ve taken a very quick tour through the most popular tool for building and
deploying Java applications. We’ve shown you how to install and set up ant.
We’ve given you enough description of XML so that you can read an ant
buildﬁle. We’ve touched brieﬂy on the basic tags used in most buildﬁles.
WHATYOU STILL DON’T KNOW 9.6
What we’ve covered here will probably explain most of the buildﬁles you en-counter in the wild. It will probably also give you what you need to know tobuild most of the buildﬁles you will have to build. But we have left out afair amount.
You can write your own tasks. That’s a biggie right there. There are many
built-in tasks that we didn’t cover. Look those up. They might be just whatyou need if you ﬁnd yourself saying, “Boy, ant is nice, but I wish it could
do X.” X might already be a built-in task. And if not, you can write it.
Ant has datatypes that can often be used in place of the simple strings al-
lowed in task attributes. Tasks and datatypes are instances of Java base classesdeﬁned in the source code for ant. If you download the source, you can write
your own classes that extend these base classes and you can thus add your owntags to ant.
RESOURCES 9.7
•The Ant User’s Manual12 at the Ant project homepage13 (which itself is
part of the Apache Project14) is the deﬁnitive resource for ant.
12.http://ant.apache.org/manual/
13.http://ant.apache.org/
14.http://apache.org/Chapter 9 Ant: An Introduction 232
• O’Reilly has also published Ant: The Deﬁnitive Guide  by Jesse Tilly and
Eric M. Burke (ISBN 0596001843), which was the ﬁrst book on ant that
we read.
• If you are into Extreme Programming you’ll want to check out Extreme
Programming with Ant: Building and Deploying Java Applications with JSP ,EJB, XSLT, XDoclet, and JUnit  by Glenn Niemeyer and Jeremy Poteet,
published by SAMS (ISBN 0672325624).233 9.7 Resources

Some people prefer glitz. The shiny sparkle has always attracted the human eye.
Sometimes that sparkle is a real gem, a treasure; sometimes it’s only a gumwrapper on the sidewalk. Integrated Development Environments (IDEs) addglitz to Java development. At their most basic, they combine (integrate) anediting environment with a compiler. This gives you
• Language-speciﬁc formatting of your Java text (different colors, comments
in italics, and so on)
• Quick feedback on errors (the ability to click on a compile error message
to begin editing at the offending Java statement)
• Automatic word completion, to help you ﬁnish typing the names of
methods in your Java code
• A point-and-click GUI for that all important “modern” look-and-feel
If those were all they gave you, IDEs would be, in our opinion, leaning
toward “gum wrapper.” But a good IDE can be more than that. It can beextended to integrate many different tools, including:
235Chapter 10
Integrated Development
Environments
• Version control (e.g., CVS, see also Chapter 8)
• One or more Web servers (e.g., Tomcat)• A build control mechanism (e.g., ant, see also Chapter 9)
• Other editors besides the built-in editor• A specialized editor for building GUIs• Other languages besides Java
WHATYOUWILL LEARN 10.1
In this chapter we will examine two major Open Source IDEs, NetBeans and
Eclipse. We will show a straightforward installation of each. We will describethe “operating paradigm” of each and show a few major features. It should beenough to get you started using them.
There are several major commercial IDEs, including Idea by IntelliJ,
JBuilder from Borland, WebSphere Studio from IBM, SunONE Studio (Enter-prise Edition) from Sun, and others. Because they are commercial, and notOpen Source, we will not be covering them; their vendors and other expertscan provide the documentation and training you need. Be advised, however,that the licenses for such commercial products typically cost anywhere fromseveral hundred to a few thousand dollars per seat. That can make Open SourceIDEs look very attractive.
NETBEANS :THE OPEN SOURCE  IDE 10.2
NetBeans is an Open Source IDE, freely available, with full source code. It is
also the basis for the SunONE Studio (more on that product later).
A Brief History of NetBeans1 10.2.1
NetBeans (originally called Xelﬁ) began in 1996 as a student project in the
Czech Republic, with the goal being to write a Delphi-like Java IDE in Java.A company called NetBeans was formed around this project. By May of 1999,after two commercial releases of Developer, the company released a beta of what
1. From the netbeans.org  Web site.Chapter 10 Integrated Development Environments 236
was to be Developer 3.0. In October 1999 NetBeans was acquired by Sun Mi-
crosystems. After some additional development, Sun released the Forte for JavaCommunity Edition IDE—the same IDE that had been in beta as NetBeansDeveloper 3.0. There had always been interest in going Open Source at Net-Beans. In June 2000, Sun open-sourced the NetBeans IDE; now it can befound at the 
netbeans.org  Web site.
Installing NetBeans 10.2.2
NetBeans can be downloaded from the netbeans.org  Web site. You will want
the NetBeans “IDE” and not the NetBeans “platform.” The IDE is the fully
featured Java development environment. The platform is the underlying coreof NetBeans on top of which one can develop other tools—for example, IDEsfor other languages. Installation of the IDE consists of only three steps:
1. Download.
2. Install.3. Execute.
Downloading 10.2.2.1
The ﬁrst step is to get the software downloaded onto your system. From the
netbeans.org  Web site, navigate your way to a download of the latest IDE.
The prepackaged “installers” might work—but if they fail, you have no infor-mation as to why, and still less as to what you can do about it. We’ll act like“real programmers” and download an archive ﬁle. (Here “archive” means acollection of software compressed for easier transmission, not “archive” in thesense of “old documents.”) Click on a link to begin the download(you’ll need to read, review, and accept the license agreement to proceed).The result should be a ﬁle on your system named something like
NetBeansIDE-release35.tar.bz2 .
Installing 10.2.2.2
The installation consists of three steps: untarring the ﬁle, adjusting a parameter
in a conﬁguration ﬁle, then creating a symbolic link for easy startup.2
2. Thanks to John Zoetebier from New Zealand for his contribution on the NetBeans users
mailing list, on which this manual installation procedure is based.237 10.2 NetBeans: The Open Source IDE
Uncompress the archive:
bunzip2 NetBeansIDE-release35.tar.bz2
This will leave the ﬁle NetBeansIDE-release35.tar  in place of the
.bz2  ﬁle.
You can examine the contents of the TAR ﬁle with:
tar -tvf NetBeansIDE-release35.tar | more
Here the options ( -tvf ) specify to show a table of contents ( -t) in ver-
bose, that is, long, form ( -v) from the speciﬁed ﬁle ( -f) followed by the TAR
ﬁlename. The output from tar here is piped into more  so that you can page
through it. Type q when you’ve seen enough, or leave off the | more  to let it
run through without pausing.
Notice that the names of all the ﬁles in the TAR archive begin with
netbeans/  which tells us that if we untar the ﬁle, it will put all the ﬁles into a
directory called netbeans . Therefore, we don’t need to make such a folder
beforehand.
Change directory to the directory where you would like to install
NetBeans. If you are on a system that may be used by different users, you’llprobably want to put it in a more public location like 
/usr/local  or /opt . If
it is for your personal use, you can put it anywhere—just be sure that you havewrite permissions on the directory where you want to install NetBeans.(Reminder: use 
ls -ld .  to see the permissions of the current directory.)
The tar command to untar everything in place is simple:
tar -xf NetBeansIDE-release35.tar
This will extract ( -x) all the ﬁles that are in the TAR ﬁle ( -f) named
NetBeansIDE-release35.tar . If you’d like to see each ﬁle get named as it
is extracted, then change the -xf to -xvf  (v for verbose) and you will see a
whole long list of ﬁlenames displayed on your screen as the ﬁle is unpacked.
Next, we need to adjust the startup parameter in the conﬁguration ﬁle.
The ﬁle is in the netbeans  directory that you just untarred. In there is a direc-
tory named bin, and in there is a ﬁle called ide.cfg . Open this ﬁle with an
editor and change the line that begins -jdkhome  so that the pathname refers
to the location of your Java Development Kit (JDK, see Chapter 5).
Here’s an example of the contents of ide.cfg :Chapter 10 Integrated Development Environments 238
-J-Xms24m -J-Xmx96m
-J-Xverify:none-jdkhome /usr/local/java/j2sdk1.4.1_01
This speciﬁes that the Java SDK is located in /usr/local/java/
j2sdk1.4.1_01 , and in that directory there is a bin directory which contains
java, javac , javadoc , and so on.
Finally, to make the executable easy to run, we will construct a symbolic
link for easy access:
$ ln -s /usr/local/netbeans/bin/runide.sh /usr/local/bin/nb
This creates a symbolic link from the runide.sh  ﬁle in the current
directory to the /usr/local/bin  directory, as a ﬁle named nb.
Running 10.2.2.3
Now that you have the symbolic link to the script which runs NetBeans, simply
invoke it with nbat a shell prompt. NetBeans will start loading (Figure 10.1).
If you get a message like “Command not found,” check to see if the shell
knows where to look. If you used the same name and location as in the previousexample, then make sure that 
/usr/local/bin  is part of the search path for
the shell. (Reminder: echo $PATH  will tell you what directories are searched.
If you need to, add /usr/local/bin  to PATH , as in:
Figure 10.1 NetBeans begins239 10.2 NetBeans: The Open Source IDE
Figure 10.2 NetBeans’ main window
export PATH="${PATH}:/usr/local/bin"
which you can type from the command line for immediate use and then put
in the .bashrc  ﬁle in your home directory to set things this way next time you
invoke a shell.)
Also be sure that the script runide.sh  has execute permissions on it.
(Reminder: check this with ls -l runide.sh  and change with chmod a+x
runide.sh .)
If all goes well then after the splash screen, you should see the window
shown in Figure 10.2.
For more information on installing NetBeans, check out
http://www.netbeans.org/kb/articles/install.html#unix .
Now let’s take a look at how you might use NetBeans.Chapter 10 Integrated Development Environments 240
Getting Around in NetBeans 10.2.3
Let’s take a look, from top down, at NetBeans’ main window. First, of course,
is the menu bar. There are lots of choices to explore there. Much of what you’lldo with NetBeans won’t require much use of the menus—there are so manyshortcuts elsewhere.
Next comes a row of icons, which are just shortcuts for menu times.
This row of icons can be customized, and you can even add your own (seeSection 10.2.5).
The three tabs below the icons, labeled Editing , GUI Editing , and
Debugging , modify the window to provide three distinct workspaces. Each
one customizes the window environment for a speciﬁc task, but it is stillworking on the same ﬁles.
Next, on the left, comes the Explorer , which is in many ways similar to
the tools that you may use for traversing ﬁlesystems on a Windows or Linuxsystem.
One oddity of NetBeans is that it doesn’t just use the ﬁles as it ﬁnds them
in the directories on your hard drive(s). Rather, is requires you to designate apiece of the ﬁlesystem as the part that you want to use. You can designate sev-eral such pieces. Each piece is “mounted” as if it were a mountable ﬁlesystem.(This is an operating system concept. If you’re not familiar with it, don’t worry.For the purposes of NetBeans, just think of the IDE as too dumb to knowabout any ﬁles until you tell it about them.)
There are three different types of ﬁles that you can mount—local, CVS,
or JAR. By specifying the type, NetBeans can treat each one in its special way.
• Local ﬁles need no special treatment; they are just the local ﬁles on your
hard drive.
• If a ﬁlesystem is mounted under a version control system (CVS or generic
VCS), then its ﬁles can have version control operations performed on them(checkin, checkout, and so on), via commands in the IDE. (More on thatbelow.) Also, special directories used by the version control system (e.g.,CVS) are hidden from the display, as you almost never want to manipulatethese ﬁles directly.
• When you mount a JAR ﬁle or ZIP archive as a ﬁlesystem, NetBeans
displays the contents  of the archive as if they were just ﬁles in a
directory—which can make them easier to manipulate. More importantly,the JAR is automatically added to the classpath for Java compiling.241 10.2 NetBeans: The Open Source IDE
Therefore, any third-party JARs that you may need for your project should
be mounted.
To mount a local directory as a ﬁlesystem, right-click on the little icon la-
beled Filesystems  in the Explorer [Filesystems]  window. Choose Mount , then
Local Directory , and you’ll get a ﬁlechooser to let you navigate your ﬁle
structure and choose a directory to mount.
IMPORTANT
To ensure that NetBeans knows how to compile your source, you need to mount
the directory that contains the base level of your source as a mountpoint, notjust have that directory somewhere in a tree of directories.
For example, let’s say that your source is kept in two packages,
com.coolco.projecta  and com.coolco.util  which implies that you
have a directory structure with those names. Let’s further assume that you keepthem in a directory called 
src which is itself contained in a directory called
brolly , as shown in Figure 10.3.
The likely thing to do is to mount the brolly  directory, since it will contain
the source and all sorts of other project-related directories. That’s ﬁne, as faras it goes. But since the mountpoints in NetBeans are also the 
CLASSPATH
directories, you need to also mount brolly/src , so that directories like
com/coolco/util  are found when your Java sources have statements such
as import com.coolco.util.*; .
It’s OK to have the same directory show up in different mountpoints. Net-
Beans won’t get confused, although you may. You’ll probably want to edit andcompile from the mountpoint of, in this example, 
brolly/src . The src folder
inside the brolly  mountpoint would refer to the same ﬁles. Just keep the one
always open and the other closed, and you should be able to keep them straight.
Filesystem versus Project 10.2.3.1
The Explorer  window has tabs at the bottom which let you look at different
aspects of your work. In some instances you’ll want the Project  view. For this,
you have to mount ﬁle’s from the already mounted ﬁlesystems in the Filesys-
tem view. Seems redundant, no? The Project  view lets you set properties for
the project as a whole or for individual ﬁles in the project. These settings applyto that ﬁle only for the project. Another project, looking at the same ﬁles, mighthave different settings.
For now, don’t worry about the difference. Many people like to work in
the Filesystem  view and never bother with projects. Others, especially those
working on multiple products or projects, like Projects  as a way to switchChapter 10 Integrated Development Environments 242
brolly
other scr build.xml
com
coolco
util projecta
other ProjA.javaFigure 10.3 A simple source structure
between tasks—you can only have one project active at a time, but when you
switch projects, it switches all the mounted ﬁlesystems and other settings thatyou have conﬁgured.
Editing 10.2.3.2
Like other IDEs, NetBeans provides its own editing window. It’s a GUI point-
and-click environment, with syntax highlighting and other helpful features fora programmer.
At the top of the editing window is a toolbar (Figure 10.4). Each icon on
the toolbar has a tooltip, a help text that pops up when you rest your mousepointer over the icon, to explain the somewhat cryptic little icons. Most of thetools are quite handy. With the pulldown menu, you can navigate to anymethod or class variable within the class. The next four buttons deal withsearching: Select any text in your source ﬁle, click on the magnifying glass icon,and the search will be performed for the next occurrence of that text. In addi-tion, all occurrences are highlighted. This highlighting can be toggled on or off.243 10.2 NetBeans: The Open Source IDE
Figure 10.4 NetBeans’ Edit screen toolbar
Figure 10.5 NetBeans’ Find  dialog
The toolbar search only works within a single source ﬁle. If you want to
search across multiple ﬁles, go back to the Explorer  window and right-click on
the folder containing the ﬁles you wish to search. There is a Find . . . com-
mand in the pop-up menu. That brings up a dialog box (Figure 10.5) that hasmultiple tabs for quite extensive ﬁltering of your search. In its simplest use, justtype in the text you want to ﬁnd, and press Enter.
A list of the ﬁles which contain the text will appear in a different window,
citing ﬁlename and linenumber for each ﬁle. There you can double-click onany citation to bring up that ﬁle in the edit window, at that location.
If you heeded our admonition to learn vi, you’ll be glad to know that
NetBeans can handle the fact that the source ﬁles can be modiﬁed externallyfrom the IDE. Go ahead and edit any of your source ﬁles, even while the IDEChapter 10 Integrated Development Environments 244
is running. When you next touch the ﬁle from within the IDE, NetBeans will
recognize the fact that the ﬁle has been modiﬁed and load the new version.
If you haven’t yet learned vi, you may ﬁnd yourself quite comfortable us-
ing the NetBeans editor. If you dig deeper into NetBeans you can ﬁnd how tomap certain keystrokes to make it even more editor-like. However, mousingand cut-and-paste may sufﬁce for beginners for quite some time.
Integration with CVS 10.2.4
NetBeans comes with a built-in CVS client, which means that you don’t need
to install any additional features in NetBeans to get it to talk with a CVS server.It has all it needs to check out and commit ﬁles from and to a CVS repository.NetBeans can be conﬁgured to use external (i.e., outside of NetBeans) CVScommands, but you likely won’t need to do that.
What you will need to do, however, is tell NetBeans that the ﬁles you are
using are under CVS control. You do this by mounting the ﬁlesystem not asjust a regular ﬁlesystem, but as a CVS ﬁlesystem. In the Explorer  window, go
to the Filesystem  tab if you are not already there. On the Filesystem  icon,
right-click your mouse, and from the pulldown menu choose Mount , then
Version Control , then CVS (Figure 10.6). What follows will be a wizard-like
series of dialogs which you will ﬁll in to describe the type and location of theCVS repository with which you want to work. Those choices and values arespeciﬁc to your installation, so we’ll leave that for you to ﬁgure out with yournetwork administrator or whoever has set up your repository.
Once mounted, the CVS ﬁlesystem’s ﬁles will look much like any other
ﬁlesystem you have mounted—except that the ﬁles will show, via their icon,when they have been modiﬁed and need to be committed, and will show theversion number in parentheses after the ﬁlename. The other difference is thatthere is now a CVS command on the pulldown menu (Figure 10.7) that
appears when you right-click on one of the ﬁlenames (or on its tab in theEdit view).
Move your mouse over the CVS command; an additional pulldown menu
appears (Figure 10.8). If you’ve used CVS at all, then you’ll recognize the listof commands in the cascaded menu. There are the Commit , Update , Diff,
Log, Status , and Checkout  commands that you are familiar with. The ﬁrst
item, Refresh , is likely unfamiliar, though. Not being a CVS command (it’s
not part of the command-line syntax), it is a way for you to tell the IDE to245 10.2 NetBeans: The Open Source IDE
Figure 10.6 Mounting a CVS ﬁlesystem
Figure 10.7 Right click on a CVS ﬁle
reconsider what it thinks about the CVS-related information displayed in its
icons and the parenthetical text.
If you click on a folder instead of a single ﬁle, then the Refresh  command
will be followed by Refresh Recursively  which will do a refresh on each ﬁle
from there on down the tree.Chapter 10 Integrated Development Environments 246
Figure 10.8 Cascaded menu with CVS commands
Using the integrated CVS is much like using the command line. If you
want to see the changes that you’ve made (before committing), use the Diff
command. A window will appear showing the two different versions andcoloring the lines that have been added, deleted, or changed.
When you need to commit your changes, click the ﬁlename, then right-
mouse your way to Commit . A dialog window will appear for you to type in
the comment that you want to be associated with this change. (This commentwill appear in the Log command display).
To incorporate the changes others on your project may have made on the
ﬁle, use the Update command. A dialog box will display the CVS output
showing what was updated and if any merge conﬂicts occurred. (See Chapter 8for more on this.)
The CVS commands in the menu, as we’ve described them so far, don’t
allow you to add any options to the commands. They just run with the defaults.What if you want to use some of the options available on the CVS commandline? Then hold down the Ctrl key just before your make your CVS choices.You should see an ellipsis (“ ...”) appear after each CVS command for which
you can now select options (Figure 10.9).
Of course one of the great things about knowing the command-line ver-
sion (see Chapter 8) is that you’re not limited to what the GUI tools will dofor you. If you can’t ﬁnd the option you want, just go back to a window witha shell prompt, 
cd into the appropriate directory in your source tree, and type
the CVS command by hand. As noted earlier, NetBeans is smart enough to247 10.2 NetBeans: The Open Source IDE
Figure 10.9 Cascaded menu after choosing CVS with Ctrl pressed
catch on to the changes made outside of NetBeans to its ﬁles, though you may
need to do a Refresh , as described above.
Integration with Ant 10.2.5
If you’ve already discovered ant, either by using it on a Java project or by
reading this book in chapter order, then you’ll know that it’s a plus to have ant
integrated into NetBeans. As of NetBeans version 3.5, ant comes bundled with
NetBeans and you don’t need to install it separately.
NetBeans recognizes a build.xml  buildﬁle and gives it a special icon. If
you click on the icon for the build.xml  ﬁle in the Explorer , it will show each
of the properties and then each of the targets (Figure 10.10). Right-click on atarget to choose Execute  to run ant with that target. As a shortcut you can ei-
ther select that target and press the F6 key, or you can just double-click on thetarget name.
If you are making frequent use of an ant build script in your project, you
may want to add a shortcut—an icon that you can put on the icon panel—thatChapter 10 Integrated Development Environments 248
Figure 10.10 Cascaded menu after choosing CVS
will run a speciﬁed ant target. You can also add a keyboard shortcut, to invoke
the target with a keystroke or two. The speciﬁc steps for doing that are foundin the NetBeans online help. Just look for the section titled Creating a Shortcutto a Target.
There is one other topic worth mentioning about integration with ant.
Normally in NetBeans, when you compile a Java class, the IDE does the com-pilation. You can conﬁgure the IDE to use different types and versions of Javacompiler, but it is the IDE which controls the compile. You can invoke acompile with the F9 key as a shortcut. But if you are building with ant, you
may want ant to do the compiles for you. Fortunately, you can conﬁgure
NetBeans to do this. Again, we’ll refer you to the NetBeans online help, to asection called Indirect Ant Compilation.249 10.2 NetBeans: The Open Source IDE
Other Add-on Tools 10.2.6
NetBeans is built to allow other tools to be plugged into it. There is a module
that you can add to NetBeans to support C/C++ development. But there arevarious other plug-ins available. The best reference for all of those is theNetBeans Web site.
3 Many of the add-ons are commercial, but one notable
tool is available, at least in its simple form, as a free download.
Poseidon for UML Community Edition is a UML modeling tool that in-
tegrates with NetBeans. A product of Gentleware AG, it is distributed at theirWeb site.
4 The Community Edition is offered free of charge, but they have
more advanced (professional, enterprise) versions for sale. Their Web site saysthat Poseidon for UML Community Edition has the following features:
• Fully implemented in Java, platform-independent
• All 9 diagrams of the UML supported• Compliant to the UML 1.4 standard• XMI supported as standard saving format• Runs under Java 1.4• Diagram export into GIF, PS, EPS, SVG, JPEG, and PNG• Undo/redo (can be turned on in options)• Copy/cut/paste within the tool• Drag and drop within the tool• Zooming and bird’s eye view of the diagrams• Internationalization and localization for English, German, French, and
Spanish
• Code generation for Java• Sophisticated support of OCL• Reverse engineering from Java sources• Auto-layout of reverse engineered diagrams• Cognitive support, critique mechanism (by default turned off)• Simple install and update with JavaWebStart
3.http://www.netbeans.org/about/third-party.html
4.http://www.gentleware.com/Chapter 10 Integrated Development Environments 250
We won’t be discussing its installation or use, but we encourage you to
explore this option if you need a UML tool.
SUNONE S TUDIO  COMMUNITY  EDITION 10.3
SunONE Studio (SOS) Community Edition was built on NetBeans and wasdistributed for free. You would even see the NetBeans logo on startup. As ofSOS 5.0 (summer 2003), the Community Edition is no longer available—NetBeans is what Sun recommends for the no-cost download. (The SOS Enter-prise Edition is still actively developed and sold by Sun; it is licensed at a costsimilar to other commercial packages.)
ECLIPSE :THE SOURCE OF  SWT 10.4
Eclipse is yet another GUI IDE. The Standard Widget Toolkit (SWT) was in-
vented as part of this project. Since Eclipse uses SWT for its graphics, it has themost familiar GUI look and feel, and it is the fastest performer on lower endhardware.
5 Eclipse is built as an IDE toolkit. Although it was developed in
Java/SWT, you can use it to develop AWT/Swing applications. It is buildaround a plug-in architecture, so it can be an IDE for virtually any language.To use it for Java, you must actually install the Java plug-ins.
Selecting and Installing Eclipse 10.4.1
The main site for obtaining Eclipse is 
www.eclipse.org . Installing Eclipse,
particularly for a single user, is incredibly easy. But ﬁrst, you have a few choicesto make as to what to download. As of this writing, the current production re-lease of Eclipse is 2.1.2. If you follow the Downloads link from the main pageto the 2.1.2 build, you will see a fairly lengthy list of download choices.
The ﬁrst major choice you must make is whether or not you plan to write
your own plug-ins and extensions to Eclipse. If you do, you will probably wishto download the Eclipse Software Development Kit or the source code andbuild Eclipse for yourself. We strongly recommend that you choose the EclipseSDK binary for GTK. The Motif UI is quite dated in comparison. The Eclipse
5. It’s the fastest performer on high-end hardware too, but the difference is much less percepti-
ble. Really fast and incredibly fast are hard for humans to discern.251 10.4 Eclipse: The Source of SWT
SDK contains the Eclipse Platform (which you need), the Java Development
Toolkit (which you need), and the Eclipse Platform Development Kit (whichyou need only if you plan to develop plug-ins for Eclipse). But by downloadingthe Eclipse SDK package, you get everything you need in one go. You couldalso download the Eclipse source package and build the whole thing yourself;save that for a spare week. For now, start with a prebuilt binary.
If you scroll down, you will see a collection of ﬁles that have “platform”
in their names. You will note that there are two choices of Linux binary: oneis Motif, the other GTK. If you are not familiar with these, Motif and GTKare two common extensions to the X Window API that provide widgets andother common functions and UI features. One of these, Motif, is rather oldand (to brashly add opinion) dated in appearance, but it is very stable and ma-ture. The other, GTK, stands for GIMP Toolkit and was developed to supportthe remarkable GNU Image Manipulation Program (GIMP). There are otherwidget/UI libraries that run on top of X Window, notably the Qt library usedby KDE.
So, which to use? If you read the documentation on the Eclipse Web site,
you will see that the Motif version has been more heavily tested and is availablefor other platforms than Linux. This is probably because Motif is standard onmost commercial UNIX versions, and thus is where emphasis was placed to getthe “most bang for the buck” in development and testing.
However, we much prefer the look of the GTK version and, to date, have
found no major problems with it, so that is what we use for our examples.There should be no functional difference between the two—merely differencesin the look and feel of menus, toolbars, and dialogs. One reason to select Motifmight be if you are working in a mixed environment of Linux and other UNIXplatforms, where you may be forced to use the Motif version on some plat-forms, and do not want the “cognitive dissonance” of switching betweenthe two.
6
So, step one:  Download eclipse-SDK-2.1.2-linux-gtk.zip .
The Eclipse platform is a “generic IDE.” You will see the term perspective
all over Eclipse. A perspective is kind of a collection of tools in the IDE. Thepackage you just downloaded contains a generic perspective called Resource. A
6. Please note that the differences are fewer and smaller than the differences involved in
switching between any common X Window desktop and Microsoft Windows. If you canhandle that (and many of us do every day), switching between Motif and GTK versions ofEclipse will be no problem for you.Chapter 10 Integrated Development Environments 252
perspective is a set of views , which are panes within the IDE, each having a
speciﬁc purpose, such as editing the project contents, editing ﬁles, keeping atask list, and so on, as well as menus and toolbars relevant to those views. TheResource perspective has its uses, but it is not the main one you will be usingas a Java programmer. As a Java programmer, you will most likely want the Javaperspective.
7
First, you must decide if you are going to install Eclipse in a common lo-
cation (such as /usr/local  or /opt ), or if you are just going to install it in
your home directory for your own use. The answer to this question, naturally,depends on whether or not you have root access on the machine and whetheror not multiple people actually use the machine.
CAUTION
We are assuming you already have at least one Java SDK installed. If you do
not, refer to Chapter 6 for some tips on installing Java SDKs.
We’re going to install in the user’s home directory. Doing this could
hardly be simpler. So, step two:  From your home directory, type:
$ unzip eclipse-SDK-2.1.2-linux-gtk.zip
That’s it. You’re done. Now just cd to the newly created eclipse  directo-
ry and type ./eclipse . The ﬁrst time you do this, you will see a “Completing
the install” banner (Figure 10.11).
Figure 10.11 Running Eclipse for the ﬁrst time
7. Although you will also often be using the Debug perspective.253 10.4 Eclipse: The Source of SWT
Figure 10.12 Eclipse splash screen
During this initial run some workspace directories and data ﬁles are set
up. These store meta-information about projects and perspectives. After amoment, you will get the standard splash screen (Figure 10.12).
Following this, you will see the initial Eclipse IDE, with a welcome screen
in the default Resource perspective (Figure 10.13).
Eclipse works with projects . A project is a collection of ﬁles that you man-
age as a group. Usually a project is a single program, although it need not be.Eclipse remembers the state of all projects. If you close Eclipse in the middleof a debug session on a project, the next time you open Eclipse, it will have thatsame project open in the Debug perspective. If you then switch to anotherproject and switch back, you will come back to the Debug perspective. Eclipseremembers. But we get ahead of ourselves here. You need to create a project.
Using Eclipse for a New Project 10.4.2
Now that you have Eclipse up and running (Figure 10.13), you will
want to create a Java project. Eclipse has “wizards” (to use the MicrosoftWindows terminology) for creating projects. From the main menu, selectFile>New >Project . You will get the screen shown in Figure 10.14.
Now, you are not an idiot. This is not “Java Applications Programming
on Linux for People with Well Below Average Intelligence.” We’re not goingto walk you slowly and painfully through a screenshot of every window EclipseChapter 10 Integrated Development Environments 254
Figure 10.13 The Eclipse Resource perspective
can display and pretend that this is “educational.” We like trees too much to
do that. So let’s pick up the pace a bit. The ﬁrst screen in Figure 10.14 asksyou to select the type of project. The next screen asks for a project name andit automatically chooses a directory to house the project. In Section 10.4.3 wewill talk about changing away from this default. For now, trust Eclipse to doit right. Enter a project name and hit the Next  button.
The next screen shows a tabbed display. The ﬁrst tab allows you to add
folders for source code. If you have already worked out a directory structure foryour project, you may build it here. The next tab is the Projects  tab. Here you
specify other projects on which this project depends. The next tab is theLibraries  tab. Basically, it lets you specify the project’s classpath. Eclipse puts
its preferred set of JARs on the classpath by default, including those that arestandard with whichever Java runtime Eclipse found on startup. The last tab iscalled Order and Export ; it allows you to specify the order in which source255 10.4 Eclipse: The Source of SWT
Figure 10.14 Step one: New project
folders should be built, as well as to specify which folders are accessible to other
projects that name this project on their Projects  tabs (in other words, this is
the “other side” of the Projects  tab).
That’s the ﬁnal wizard box. Hit the Finish  button. A dialog box pops up
to tell you that the project you just created is associated with the Java perspec-tive. Since you are currently in the Resource perspective, it asks you if itmay switch you to the Java perspective. Hit the Yes button, and you will be
rewarded with the Java perspective display (Figure 10.15).
At this point, your exploration of the Eclipse tools would be more fruitful
than anything we could tell you. There is a marvelous book on Eclipse, The
Java Developer’s Guide to Eclipse  by Sherry Shavor et al. from Addison-Wesley.
We encourage you to seek out that book.
Using Eclipse for an Existing Project 10.4.3
In the previous section, we mentioned that the second wizard screen in setting
up a Java project allowed you to override the default path for a project. If youhave an existing Java program, point the project path to the directory that isthe base for that program’s packages. When you create the project (in otherChapter 10 Integrated Development Environments 256
Figure 10.15 The Java perspective
words, when you hit the Finish  button in the wizard), Eclipse will scan that
directory and analyze what it ﬁnds there. It does an excellent job of importinga project and “eclipsifying” it, even to the point of recognizing and analyzingan ant’s 
build.xml  ﬁle.
Working with Eclipse 10.4.4
Eclipse is a huge topic. We can’t devote enough space to it for this chapter to
qualify as a user guide. The best we can do is to offer you a handful of tips.
• The Java perspective consists mainly of the Package Explorer  on the left,
the edit window in the middle, the outline view in the right, and a bottomwindow that changes based on context. Initially, it is a task list. When yourun a Java application, the console output is displayed there, overlayingthe task list.257 10.4 Eclipse: The Source of SWT
• You can do a lot of what you need to get started on a project by right-
clicking in the Package Explorer . For example, you can create a package
by right-clicking and selecting New >Package . When you type a new
package name into the resulting dialog box, all required folders are createdunder the project.
• You can create new classes and interfaces in the same way. If you right-
click on a package in the Package Explorer  and select New >Class  or
New >Interface , an appropriate dialog box comes up, and a skeletal ﬁle is
created in the appropriate place.
You can compile, run, and debug programs by hitting buttons on the
toolbar, by selecting from the menu, by right-clicking almost anywhere, andby keyboard shortcuts. To put it plainly: Eclipse is a modern, rich IDE thatworks like other IDEs you have seen.
Eclipse’s real advantages lie in some of the dynamism it offers. As you
know, the authors of this book like text mode and command line, but we mustadmit that Eclipse’s refactoring features are a great timesaver. For example,when you use the refactoring tools to change a method, you can be certain thatevery call to that method, everywhere in the project, is updated. Sure, westaunch CLI guys will tell you that you can use pipes and sed to similar effect,
but even we must admit that you can miss some. We stand by what we havesaid: Know all the tools, and you can then choose the right one. But if all youhave is a hammer, you’ll end up using it to repair a china cup.
REVIEW 10.5
We’ve given you the choice of two great development environments. Withthem you can do so much more than just edit and compile. Both are expand-able to include other tools, like CVS and JUnit. Each has a slightly differentparadigm for how they manage ﬁles and projects. It seems the longer we workwith one (either one), the more we like it. They kind of grow on you and youget used to some of the shortcuts that they offer. And yet, there are still thosetimes when it’s handy to be back at the simple command line.Chapter 10 Integrated Development Environments 258
WHATYOU STILL DON’T KNOW 10.6
NetBeans comes with a built-in version of Tomcat for serving up Web pages
and JSP and Java Servlets. It’s very handy for developing and testing on yourdesktop. We’ll look at that more in Part IV of this book.
In the NetBeans help ﬁle, you’ll ﬁnd this intriguing note:
Using Scripting Languages in NetBeans: NetBeans provides you with a
scripting feature that lets you use scripts to operate the IDE remotely orfrom the Scripting Console or by using a scripting ﬁle. You can use thescripting languages provided in the Scripting Console, or you can create ascripting class through the New From Template wizard. The followingscripting languages are provided with NetBeans: DynamicJava, BeanShell,and JPython. For information on the scripting languages provided, seeDynamicJava at 
http://www-sop.inria.fr/koala/djava/ , BeanShell at
http://www.beanshell.org/ , JPython at http://www.jpython.org/ .
We barely got you into Eclipse. Eclipse supports CVS (check out the
Team  submenu). Eclipse provides code refactoring features that allow you to
rename classes and methods with automatic update of all affected source.Eclipse provides a feature to “externalize” strings (which takes all string con-stants out of a module and makes them into properties references, allowing foreasy internationalization). It is a powerful Java development platform.
RESOURCES 10.7
NetBeans.  NetBeans has some very extensive online help. There are also
some very good Web-based documents, including the user guide which can befound at 
http://usersguide.netbeans.org/ . Of particular value is the
Getting Work Done guide at http://usersguide.netbeans.org/gwd/
which describes itself as “a more detailed introduction to the IDE than availablein the Getting Started tutorial.”
Support for NetBeans, as with many other Open Source projects, happens
online. There is no toll-free number to call. Instead you subscribe to an e-maillist; all messages sent to the list are then forwarded to everyone on the list.Anyone can respond, and you are encouraged to respond too, to share whatyou know with others. The NetBeans developers are often the ones who answer259 10.7 Resources
the most difﬁcult questions, but lots of times answers come from others who
have just made it a little further up the learning curve than you.
To subscribe to the nbusers list, send e-mail to nbusers-subscribe@
netbeans.org . You might want to create a special mail folder for the constant
stream of messages that you’ll get from nbusers. We’ve seen about 15–20 mes-sages per day, on average, over the past year. You don’t need to read them all,but as you scan the subject lines, see if there are ones that you might be able toanswer. If you want others to reply to your requests for help, it would only befair for you to do likewise. For a directory of the many e-mail lists related toNetBeans, go to 
http://www.netbeans.org/community/lists/ .
Eclipse. The Java Developer’s Guide to Eclipse  by Sherry Shavor et al. (ISBN
0321159640, from Addison-Wesley Professional) is an excellent book on theEclipse platform, particularly from (as the title suggests) the Java developer’spoint of view. Eclipse is, however, more than just Java. It is designed to be an“IDE Factory,” providing a framework for almost any task that involves anedit/compile/deploy kind of lifecycle.Chapter 10 Integrated Development Environments 260
Part II
Developing
Business Logic

In this chapter, the authors wax poetic on practical software development
methodologies, and attempt to introduce a simple, or maybe simplistic, exampleapplication for use in future chapters.
WHATYOUWILL LEARN 11.1
We want to share with you some thoughts on practical software development.We are not covering anything speciﬁc to Linux or Java in this chapter; therewill be no commands to type or syntax to learn here. You may skip ahead tothe next chapter—but at your own peril. Those who know and use good soft-ware process won’t need this chapter, but many programmers don’t fall in tothat category. In fact, some who think they are using good process may be usingtoo much or too little for their actual situation.
If you are relatively new to the corporate world, or have only worked for
one or two companies in your career to date, you may get a taste of how soft-ware is done in other corporate cultures. If you are a seasoned programmer withmany such experiences, see if this doesn’t sound all too familiar.
263Chapter 11
Balancing Acts:
An Imaginary Scenario
You will also see the requirements for a simple budget application that will
be used in succeeding chapters. It has little to do with real budgets, but lots todo with a simple application that we can use to demonstrate various Javatechnologies.
STATEMENT OF THE  NEED 11.2
Financial planning is something that everyone does. The basic tool of ﬁnancialplanning is the budget. But unlike the home budget, the budget of a large cor-poration is managed at multiple levels within the organization. Sure, at somelevel, the board, the CEO, and the CFO decide that “we will spend X milliondollars for operations for this quarter,” but that is the start of the process, notthe end.
From there, the feeding frenzy of middle management begins. And keeping
track of things becomes an important aspect of ﬁnancial control and corporategovernance.
Realistically, any large business will already have processes and tools in
place that meet this need. We are not expecting that what we develop here willbe anything that a business will actually adopt to manage this process. Rather,our goal is to illustrate some methods of software development that actuallywork to build real Java application. The outline of methods and code could beused to address many classes of enterprise software.
HOW TO  DEVELOP  SOFTWARE 11.3
There is a science of Software Engineering. The development of software canbe made an engineering discipline, with mathematical rules and metrics ofsuccess. Every aspect of a complete system can be worked out in detail before-hand so that you know, well before a line of code is written, what the outcomewill be.
That’s not what we’re talking about here.We are talking about software development not as it happens at NASA,
medical device companies, and in factories where nuclear missiles are made. Inthose contexts, the potential costs of error are extremely high, ranging from themultibillion dollar loss (and public embarrassment) of crashing a spacecraft intoMars, on through having heart pacemakers ﬁre off incorrectly, right to endinglife as we know it on this planet. In such cases, no matter how much the correctChapter 11 Balancing Acts: An Imaginary Scenario 264
software costs, you pay it because the consequences of not doing it perfectly are
far too high.
TIP
Our discussion is not meant to be scholarship on the topic of software develop-
ment methodology; instead, it is meant to show simple, basic processes thatcan bring a reasonable amount of control to a software development project.These steps are, to name a few, requirements gathering, speciﬁcation, objectanalysis, database design, development iteration (code, unit test, repeat),and so on.
But most of us who write software do not deal with such consequences.
Most of us are keeping track of purchases and payments. We’re recording pro-duction data. We’re tracking manifests and updating inventories. We are thegreat unwashed mass of MIS software developers. Here we, too, want to do itperfectly right. But every time we go to management and tell them how muchit will cost and how long it will take, the little “mass layoff” vein throbs in theirforeheads. We are always being told to do it faster and cheaper. And so we ﬁndourselves, again and again, tilting at the windmill of quality.
So where does that leave us? When we go to management with the text-
books of software engineering, they either laugh or scowl. Clearly, the moneypeople are not prepared to support the cost of doing it right. So what do youdo? The best that you can. The one thing we can tell you for certain is that theformula for success is not “start writing code and trust to luck.”
It is fair to say that even the minimal software development method should
include the following steps:
• Requirements gathering
• Use case speciﬁcation• Class discovery and problem domain decomposition• Technical requirements speciﬁcation (architecturing)• Testing• Code and release management• Production and operations support• Bug and enhancement tracking265 11.3 How to Develop Software
This list, when done in that order, has been referred to as the classic
“waterfall” model—each step is done in its entirety (or largely so) beforeproceeding on to the next step.
Or at least that’s the ideal which programmers have often pursued.The problem is that the process involves people, and people, especially
those responsible for the requirements, a) are sometimes unimaginative and 2)keep changing their minds. They start out with some requirements, based onwhat they think they’re going to need. But they just aren’t imaginative enoughto think of how terrible their system will be for the average user. They also keepchanging their minds as to what they want.
1
The “iterative” approach has been tried as a way to address this problem.
Rather than wait for all requirements to be spelled out perfectly, with the itera-tive approach you jump right in with what you do know, build that, but expectchanges to come. The sooner you get a working product or prototype into thehands of the users, the sooner you’ll get feedback on what works, what doesn’t,and what is really wanted (“what works” is used here not in the testing sense,but in the usability sense).
Note, however, that in the iterative approach, one still gathers require-
ments, develops designs for the code and the tests, develops them, tests (andﬁxes) the code, and releases it. It’s just that one does that on a much smallerand more rapid basis. You get something runnable sooner, and continue tomodify it.
Some people will complain that this makes for more expensive rework,
but we (and others) would disagree. You are reﬁning the process. Your reworksare less expensive than if you went to the work of building the entire systemonly to have some key requirement(s) change—there can be a lot more“wasteage” there.
Be aware, however, that the iterative approach is not just “whipping the
horses to run faster.” It is not just the waterfall model run at high speed. Rather,it is using the early iterations of the product as a sort of a “living” requirementsspeciﬁcation, one that you can show to people and that they can try out, in real-world scenarios, and on which they can give feedback. Don’t expect to be ableto compile complete requirements, but don’t give up on talking to your end
1. Did you notice that we tried to hint at that ever-enjoyable mid-project shifting of require-
ments as we went from a) to 2), changing our numbering scheme midway? Minimal humor,admittedly, but if you’ve lived it, you understand.Chapter 11 Balancing Acts: An Imaginary Scenario 266
users and other stakeholders either. Requirements are still key to delivering a
solution.
So with either approach, you’ll start with requirements. Let’s look at the
art of requirements.
WHAT MAKES A  GOOD REQUIREMENT 11.4
A good requirement is one that states a need but not a solution. Sounds simple,but it’s easier said than done—especially with solution-oriented technical types.
A typical ﬁrst cut at a requirement might be something like “Our budget
application should store its data in the database.” While it sounds reasonable,it is really a solution posing as a requirement.
The ﬁrst step in reﬁning such a requirement is to ask the simple question:
“Why?” The answer we’re looking for is not “Because we’ve paid so much forour database software,” nor is it “Because we all know SQL.” Rather, it shouldbe something dealing with reliability, fault tolerance, the need for transactionalintegrity, and so on.
Sometimes you may have to ask the “why” question more than once, to
reﬁne the requirement(s). “Transactional integrity” is, in a way, a solution. Youcould ask, “Why do we need that?” For some projects it may be appropriate toask this, because there may not be a real need for it after all.
But don’t overdo it. Push any requirement in a business setting far enough,
and you could get something like “To make money.” That’s not a helpful re-quirement. You’ve gone too far. Part of the art of requirements is recognizingwhen to stop asking why.
A more detailed description of a requirement is that it should be
SMART—Speciﬁc, Measurable, Attainable,Repeatable, and Testable. Considerthe following.
A common concern among users of almost any application is that it be
“fast” or “responsive.” While we can sympathize with the concern, it will needsome reﬁnement before it can be considered a (good) requirement. Applyingthe “Speciﬁc” and the “Measurable” aspects of SMART, we need to specifywhat constitutes “fast enough.”
We can try “No button press in the GUI will delay more than .1 second
before providing some evidence of activity to the user, or more than .5 secondbefore completing its operation.”267 11.4 What Makes a Good Requirement
Sounds more formal, and more speciﬁc, but is it realistic (i.e., attainable)?
If the “button press” is one that updates a database across a network, what effectwill network trafﬁc have? What about the size of the operation? If the buttonpress starts an operation that is dependent on the size of some data set, what’sthe largest it could be and how long will that take?
Depending on how obsessive you or some colleague will be in enforcing
these requirements, you would do well to add a few “weasel words” to give yousome ﬂexibility in the requirements. Phrases like “on average” or “most” willhelp. Notice, though, that such words are also the cause of much ambiguity,working against the “Speciﬁc” and “Measurable” aspects of good requirements.Use them sparingly, if at all.
We should also consider the “testable” aspect of our requirement for speed.
Will we be able to measure this? Can we do so repeatedly? Consider the effectof network trafﬁc on response times. Under what network load will the testsbe done and the real usage occur? If you want to test under “normal” networkloads, how can you control this (for the sake of repeatability)?
It really is an art to craft good requirements. Moreover, a good require-
ment for one organization may not work well for another. Some teams, groups,or companies want to be very precise in their use of requirements, viewing themalmost like legal contracts for what will be delivered. Such requirements, how-ever, would be greeted with derision in other, more informal, organizations.It’s not that the one will produce good software and the other garbage (well,they might). It’s more a matter of style. Excessively formal organizations willdrown in the details and spend way too much time (and money) arguing overthe minutiae of the requirements. Overly informal groups will get sloppy withtheir requirements and not reap the beneﬁts of building the right thing the ﬁrsttime. As is so often the case in life, the answer lies in striking a balance betweentwo forces, one pushing for exactitude and the other pulling you to get goingand do something.
So let’s keep going.
WHOM TO  ASK FOR  REQUIREMENTS 11.5
There are many people to ask about the requirements for a software project orproduct. Ask yourself the following questions:
• Who is going to use the software that you develop?Chapter 11 Balancing Acts: An Imaginary Scenario 268
• Who is going to use the data that comes from the use of the software (i.e.,
who will read the reports generated from the data collected either directlyor indirectly from the running of the software)?
• Who is going to support the software and who will support the machines
on which it will run?
All these people can be considered “stakeholders” in the project.
So where do you start? That’s a political more than a technical question.
Start with your boss and with whoever is the major backer of the project. Thenask your customers. For in-house IT projects, the “customers” are usually veryaccessible; for software products, the customer’s point of view may need to berepresented by marketing and/or customer support people who have had directcontact with the customer base.
REQUIREMENTS FOR THE  BUDGET  APPLICATION 11.6
Let’s take a look at how such requirements might evolve. We’ll look at thesituation through the eyes of a ﬁctional IT guy named Bob.
2
Monday Morning, 10 A.M. 11.6.1
Bob gets called in to the ofﬁce of his manager, Ellen. The conversation goes
something like this:
Bob:  Yes, Ellen, you wanted to see me?
Ellen: Come in, Bob. Yes. We’re just about to enter another budget
planning cycle. We’ve got to propose our next year’s budget to the VP by theend of the quarter, and I got to thinking . . . 
Bob:  Uh-oh.
Ellen:  . . . on my way to work today, I got to thinking that we ought to
be able to develop a software tool that would help us do a better job of thisprocess.
2. We’re avoiding giving Bob a title because titles vary so much within our industry. Call
someone an analyst and it may mean that they never code. Call someone a programmer and itmay mean that they only code and never deal with requirements or even designs. Some usethose terms interchangeably. We’ll just call him an IT guy.269 11.6 Requirements for the Budget Application
Bob:  We’ve used a spreadsheet these past few years to do our budgets. You
want us to develop another spreadsheet application?
Ellen:  No, I want a whole new application.
Bob:  You want us to reinvent the spreadsheet?
Ellen:  No, I want something simpler and more speciﬁc to the budgeting
process.
Bob:  Tell me more. What are the key features that you see in this
application?
Ellen:  Well, ﬁrst of all it needs to be able to work concurrently with all
the users. With our spreadsheet, we’d have to take turns with the data entry orwe’d risk loosing each other’s changes.
Bob:  It may just be that we’re not using our spreadsheet’s advanced
features. Shouldn’t we investigate that ﬁrst?
Ellen:  No, I’d rather have us invest our time in building the tool we know
that we need. At the end of the day your investigation may only show that westill need the tool, and by then it might be too late to build it.
Bob:  I hear you saying that the deadline is rapidly approaching.
Ellen:  Yes—I want to be able to use it for the budget planning at the end
of this quarter. How long do you think it will take you to build it?
Bob:  Build what?
Ellen:  Haven’t you been listening? The budget tool!
Bob:  I know that you mean the budget tool—but you haven’t really given
me enough requirements upon which to base an estimate. Tell me more abouthow you envision this tool being used.
Ellen:  Well, in the past we’ve taken last year’s numbers and just bumped
them up by a few percent. Then we look at each category and tweak them. Iwant a different approach this year. I’m going to take our department’s budget,give it a bump, then assign a chunk to each of my reports. I want you to takethose discretionary dollars and spell out how you would spend them.
Bob:  Shouldn’t we be providing you with estimates of what we need for
the coming year, rather than you telling us what we have to spend?
Ellen:  In theory, perhaps so. But in practice we can only grow the budget
by so much. I’d rather skip the charade and jump right to allocating the dollarswe will likely be able to spend. Then as the year progresses, I’d like to use thistool to track our spending against this plan.
Bob:  But isn’t that why we have that big SAP application?Chapter 11 Balancing Acts: An Imaginary Scenario 270
Ellen:  Have you ever tried to use it?! Please! The CFO thought it looked
great—and on paper it did. But that user interface makes it almost impossibleto be productive. And it’s as slow as molasses.
3
Bob: But back to this new application . . . I’m assuming you’ll want a GUI
on this?
Ellen:  Of course. Give it a standard, simple GUI. Something like this.
(She begins to draw on her whiteboard.)
For any given department there will be a “pool” of money. Those dollars
are displayed and can be subdivided into smaller pools of money by creatingsubaccounts.
But as the money is subdivided those new accounts and associated dollars
should become visible by others. And as dollars are spent during the year, we’llwant to track those dollars, so those amounts should be visible, too, andsubtracted from the overall pool of available dollars.
Bob: Wait . . . back up. What needs to be entered to subdivide an
account?
Ellen: The user just picks an account, then chooses to subdivide it, enter-
ing the amount to put in each account . . . or even just a percent of the largerpot of money.
Bob:  So if he picks one account to subdivide, does it split into two, or
three or how many?
Ellen:  Let the user choose, but maybe two as a default.
Bob:  OK, but we may need to take a harder look at that interaction.
Ellen:  So how long will that take? Can you have it ready by the end of this
month?
Bob:  I’d like to try the “spiral” approach on this project. I can have
something for you by the end of this week— from which you can tell me if I’mheading in the right direction. It will just be a beginning, but you’ll be able tosee something run. By the way, is this tool only for our group?
Ellen:  For now it is, but I could see other departments wanting to use it
some day. Who knows how far it could go?
3. Remember, this is a ﬁctional account. We are providing justiﬁcation for why they can’t use
the corporate application. Anyone’s use of such a tool can be less than optimal, reﬂecting moreon themselves than on the value and usability of the tool.271 11.6 Requirements for the Budget Application
Back at His Desk 11.6.2
Bob is now back at his desk pondering the conversation he had with Ellen.
“These are not like the requirements we learned about in my software engineer-ing courses,” he muses. “I’ve got that sketch of the UI and a brief descriptionof its functionality. But there seem to be so many unanswered questions.”
So what is Bob supposed to do? He could go back and try to get more
“face time” with Ellen, and ask lots more questions. Sometimes that’s a smartthing to do. Other times such repetition is seen as annoying and a sign of aslow-witted analyst, never mind how obscure the initial discussions were orhow many times someone changed their mind about what they want. You willhave to judge each situation as you encounter it. At some point, though, youhave to deal with whatever information you’ve been given, and try to make thebest of it.
So where do you turn? The next best things to do are to begin to docu-
ment the requirements as you understand them, to prototype a solution, andto start getting buy-in from other stakeholders. Each of these activities mayhelp bring out more requirements, but that’s not a bad side effect.
DOCUMENTING , PROTOTYPING ,AND STAKEHOLDER  BUY-IN 11.7
Once a project is started, the design must be documented. A prototype may bebuilt to validate and reﬁne the design. Finally, everyone with a stake in thesuccess of the design has to be brought up to speed and needs to agree on whatis to be built.
Documenting 11.7.1
After such a conversation, it’s smart to try to get your thoughts down on paper
as soon as possible. Some of what gets said will fade with time, so work quicklyto capture what you can of the requirements that were spoken. Even if you haveto leave lots of blanks, keep moving and get as much of the major requirementswritten down as you can, even if they don’t sound very formal or polished.Then go back, revise and edit your statements, ﬁlling in the blanks where youcan. Sometimes you will need to ask others to get the answers to ﬁll in theblanks. Other times you can use your own judgment and initiative to providean answer. Out of this process with its subsequent rewrites will come therequirements document.Chapter 11 Balancing Acts: An Imaginary Scenario 272
Some organizations are very formal in their understanding of requirements.
They will have company-standard formats which you must follow. But thereis no magic format that will make for good requirements. It really all comesdown to content.
Here’s an informal list of the requirements for the budget application,
based on the conversation between Bob and Ellen.
Features:
• Starts with a single lump sum of dollars.
How does this ﬁrst sum get entered?•
• Each dollar amount is associated with an “account.”• Any account may be divided into two or more subaccounts.• The dollar amount associated with a subaccount is speciﬁed either in
absolute dollars or as a percentage.
What if they don’t add up?•
• Can the user mix $ and %?• Can the user leave the last subaccount’s amount blank for “remaining
dollars”?
• Tracking of the dollars—not enough info, so not in ﬁrst prototype.• Multiple users will have access to the data.• Concurrent use is allowed and supported.• Short development time, limited resources.• Has a graphical user interface; earliest versions may be command-line and
terminal interaction.
Not all requirements will be easily forthcoming; not all can be traced back
to an exact quote from the previous discussion. Other requirements will needto be inferred from the discussion or from department “culture,” or come fromyour own judgment:
• Platform: “any” PC in Ellen’s department—but her developers are all using
Linux platforms.
• Future platforms: “any” PC in the company means any Windows, Linux,
or Mac OS X.
• Reliability: once entered, data is never lost.• Maintainability: the application must be easy to maintain.273 11.7 Documenting, Prototyping, and Stakeholder Buy-In
• Interoperability: there’s no requirement to interoperate with any other
software but here’s an idea for a future version: export/import into CSVformat for spreadsheets, and/or XML format for future expansion).
• Response time: “reasonable” interactive speed; subsecond response when
entering new accounts and values, so that the user can type quickly andcontinuously; waiting, if it occurs, should only be at button presses, notbetween data entries.
Stakeholder Buy-In 11.7.2
Stakeholder buy-in can be another important part of a software project. As we
discussed in Section 11.5, stakeholders are any of those people who are touchedin some way, direct or indirect, by this software project.
For this simple budgeting program, there will be few stakeholders—it will
largely be Ellen and her direct reports. The system will not likely be a largedrain on computing resources, so system admins don’t need to be brought inat this point. If and when the project expands to include other users across thenetwork and across the enterprise, then the system administrators shoulddeﬁnitely be included. There will be few reports from this ﬁrst cut of theproject, and what few there are will only be read by Ellen and her direct reports,so again, there are few others that need to be consulted as stakeholders.
The idea at this stage is to listen to other points of view—those of your
stakeholders—to get a different perspective before charging headlong downone avenue of development.
It’s not that you will be able to satisfy all points of view—it can be a wor-
thy goal, but it is often unattainable. Rather, you need to hear from all thoseinvolved since your software will affect all those people, and understandingsomething about how it will ﬁt into their roles and daily tasks will help youmake better tradeoffs and design better software. It will likely uncover previous-ly unseen requirements. It also has the political beneﬁt of those people knowingthat you cared enough to listen to them before sending them a ﬁnished solu-tion. It increases the likelihood that your software will be seen as a help, nothinderance.
4
4. As engineering types it is difﬁcult for us to understand and appreciate the importance of
this, but in many ways these personal, political, and psychological factors are much more im-portant to the success of a project than are technical choices. It has taken us years to appreciateChapter 11 Balancing Acts: An Imaginary Scenario 274
Prototyping 11.7.3
Prototyping can be an effective way to carry on the discussion of both require-
ments and user interface design. Given only a hypothetical or abstract descrip-tion of some software, it can be very difﬁcult for people to imagine what theimplications of its use will be. A simple prototype can immediately bring thediscussion down to the concrete; people can point at things and say “I like this”and “I don’t like that” and “How would I do so-and-so” and then see whetheror not it would work. Sometimes, ideas that sound great on paper turn out tobe pretty poor ideas when realized. Prototypes can help you discover thatquickly and easily.
One very useful but inexpensive prototyping mechanism can be
HTML—that is, creating Web pages. Simple static HTML can be fast andcheap to build, but can begin to approximate what the user interaction willlook like—especially for, but not only for, Web-based solutions. It may not bean exact replica of the ﬁnal product, but for a ﬁrst step it can really get thediscussion moving.
If the UI is too complex for a Web page mock-up, you can still use HTML
for prototyping by getting images (screenshots) of what you want your ﬁnalsolution to look like and then making these images clickable on Web pages, tosimulate some simple user interaction with hyperlinked image sequences.
The idea is to get something “tangible” in front of people as soon as possi-
ble, to further the discussion in a way that written descriptions never can.(“A picture is worth a thousand words.”)
Once you’ve built a prototype, shop it around. Hold informal meetings
where you demonstrate the basic functions to stakeholders. We recommend,as much as possible, meeting with one group of stakeholders at a time. Thatway you can keep your conversations focused. If you have two different stake-holder groups represented and their expertise and interests are wildly different,you’ll be boring ½ the participants all the time. Even if their expertise is similar,you may have groups with competing or conﬂicting requirements. While youneed to understand such conﬂicting requirements and eventually come to somedetente, this meeting is not the best venue for settling those issues; it wouldmore likely simply scuttle your meeting and void any value from it.
that Dale Carnegie is as important to the software designer as Yourden or Booch. Your users
need to be your friends if you want to succeed.275 11.7 Documenting, Prototyping, and Stakeholder Buy-In
After each meeting, review your requirements and see what more you need
to add. Likely at such meetings, you’ll begin to get requests for new features.
You have, in fact, begun the iterative process. Even the most bare-bones
prototype that may only consist of a sequence of pictures is a ﬁrst cut of yourproduct. The sooner you can get to a running version, the sooner you will beable to respond to stakeholder suggestions by adding real features.
REVIEW 11.8
A good requirement is one that states a need but not a solution. Your ﬁrst stepis to uncover the needs, while listening to everyone’s solutions. These require-ments will develop into feature descriptions. These should be documented andthen prototyped. The prototype, which is in effect the ﬁrst release of yourproduct, can then be shown to various groups—stakeholders—as a way toelicit their feedback. This feedback should begin to factor in to what you willbuild, so now you need to move quickly on to building the real product; donot get stuck enhancing the prototype.
WHATYOU STILL DON’T KNOW 11.9
Writing good requirements is as much art as it is science, and it involves politi-cal science as well. This is not something easily taught in a book, but learnedthrough hard experience.
RESOURCES 11.10
One of the original purposes of the World Wide Web was to allow researchersto share their results. So, you should be able to search the Web for requirementsdocuments from various projects for examples of requirements speciﬁcation.As with any Web search, remember to consider your source. Just becausesomeone has posted a requirements speciﬁcation or a template doesn’t make ita good example.
Here are three examples that we found on a single simple Google search.
They may still be there by now.Chapter 11 Balancing Acts: An Imaginary Scenario 276
•http://www.progsoc.uts.edu.au/~timj/thesis/web/srs.html
•http://www2.ics.hawaii.edu/~johnson/413/lectures/5.2.html
•http://www.cc.gatech.edu/people/home/tomoyo/rocky-axel.1.doc
For those who are serious about their software development process, the
Capability Maturity Model for Software from the Software Engineering Insti-tute at Carnegie Mellon University is the standard. Visit their Web site at
http://www.sei.cmu.edu/cmm/ .
If you would like to know more about the spiral approach to software de-
sign, you might want to start with the seminal paper on the topic, “A SpiralModel of Software Development and Enhancement,” in Computer  21, no. 5
(May 1988), pages 61–72.
To see how the director of the Software Engineering Institute views
the spiral approach, check out the short and readable introduction at
http://www.dacs.dtic.mil/awareness/newsletteres/technews2-1/
disciplined.html .
Another good look at the spiral, or iterative, approach can be found at
http://www.stickyminds.com/se/S3420.asp  which has a hyperlink for
a PDF ﬁle of a paper by Philippe Kruchten of Rational Software. The papercovers some pitfalls common to the ﬁrst uses of the iterative approach; worththe read.
A great survey of key papers on three major approaches—spiral and related
topics (including newer work by Boehm), aspect-oriented programming (AOP),and the rational uniﬁed process—is at 
http://www.rspa.com/reflib/
PrescriptiveModels.html .
EXERCISES 11.11
1. Write requirements for a simple word processor or spreadsheet. Start with
some obvious functionality. Add only enough “bells and whistles” for itto be usable for beginners. Show this list to others, especially people famil-iar with similar applications. What features do they ﬁnd missing that areimportant to them? How quickly does your list expand? What might youdo to limit the size and the rate of growth of the features list?277 11.11 Exercises
2. Discuss the requirements for your application with someone who has no
experience with a similar product. How difﬁcult is it to get useful feed-back? Now show them (the simple features of ) a working spreadsheet orword processor, as if it were your prototype. Does the conversation change?In what ways? Is the feedback now more or less useful than before theysaw the prototype?Chapter 11 Balancing Acts: An Imaginary Scenario 278
In this chapter, we will present the barest outline of a software development
methodology. For some readers, this will be simplistic and unsuitable. In ourexperience, however, there are many businesses out there with very small devel-opment teams that have very little software engineering experience, even thoughthey have considerable technical and programming skill. Our goal here is topresent a bare minimum of analysis and design method, so that we can be surewe have a common basis for discussing the issues of object-oriented analysisand design.
WHATYOUWILL LEARN 12.1
In this chapter you will learn a very simple method for object discovery and asimple method of documenting this process.
279Chapter 12
Analysis and Design:
Seeking the Objects
FACING THE  BLANK  PAGE 12.2
So, you have some requirements. Maybe you even have some UI prototypes.
How do you turn that into an object-oriented design for Java classes? How doyou confront the paralyzing blank white of your whiteboard, terminal session,or easel?
The simplest way is to start with real-world objects. Stop thinking about
everything you have read about object-oriented programming. Instead, askyourself, “What are the real objects involved in this problem?”
In our case, the more you look at it, the simpler it gets. For the moment,
the only real objects we have are people—the users—and accounts, that is,named pools of money. We know that users get accounts from “above,” andthat they may break those pools down into subaccounts, which they may ownor delegate to other users.
At the broadest level, then, we seem to have two “classes” or types of
real-world objects: Accounts and Users.
USING CRC C ARDS 12.3
So, we need two classes. But what goes into those classes? How do we go aboutputting the substance into this simplistic framework?
In their now (semi)famous paper presented at the object-oriented program-
ming conference OOPSLA in 1989, Kent Beck and Ward Cunningham intro-duced a simple, practical design tool for object-oriented design based on asimple, practical 3x5 ﬁle card. The CRC cards for our classes are shown inFigures 12.1 and 12.2.
But we are getting a bit ahead of ourselves. These CRC cards are an end
product of analysis. They are the starting point for coding. Let’s talk a little bitabout what is on these cards and how we came to that content.
FINDING THE  OBJECTS 12.4
The basic technique for doing OOA1 with CRC cards is to start with a stack
of blank cards. Assemble a design team (this may be one person, or this may
1. (object-oriented analysis)Chapter 12 Analysis and Design: Seeking the Objects 280
a pool of dollarsAccount
members collaborations
* name - a String
* owne r - a User
* amount - an SAMoney object* children - an ArrayList (of Accounts)* parent - an Account* persistence (CRUD)
* Usera pool of dollarsAccount
members collaborations
* name - a String
* owne r - a User
* amount - an SAMoney object* children - an ArrayList (of Accounts)* parent - an Account* persistence (CRUD)
* UserFigure 12.1 Account CRC card
someone who manages budget dollarsUser
members collaborations
* name - a String
* home - an Account* persistence (CRUD)
* Account
Figure 12.2 User CRC card
be dozens).2 The ﬁrst step should always be the nomination of the real-world
objects. Don’t edit or critique at this point. If someone says “computer” as anobject, write “Computer” on the top of a card and put it on the table. Ifsomeone says “Manager” write it on a card and put it on the table.
2. It is fun to gloss over such a complex topic with a single sentence! Obviously, the composi-
tion of a design team is a complicated matter. At the very least, a design team must include arepresentative from the programming team and a future user of the system. On small, simpleprojects, that may be all you need. On more complex or mission-critical systems, there willhave to be additional representatives, such as people from Operations, Support, Training,Quality Assurance, and so on.281 12.4 Finding the Objects
To take our example, suppose we have the following list of CRC cards
after such an open brainstorming session:
• Database
• Capital Account• Current Account• CEO• Computer• CFO• Director• Keyboard• Manager
Where do you go from here? Let’s articulate a general principle.
The ﬁrst principle.  If we could teach a programmer only one thing about
software design, it would be this idea: less is more. Or, to quote Antoine deSaint-Exupéry: “Perfection is achieved not when nothing can be added, butwhen nothing can be taken away.” Or, to put it yet another way, always usethe KISS
3 principle. The best object design is the smallest possible number of
classes that model the real objects and meet all the requirements.
You are seeking simplifying abstractions.First of all, all the objects that represent technologies or implementation
details should be removed. In our list, this would include “Database,” “Com-puter,” and “Keyboard.” While it is likely that all three will be involved in theﬁnal product, they are not objects in the problem space. There is no theoreticalreason why an OOA session cannot produce a manual, noncomputer solution.It is a common tendency to leap from problem analysis directly to technicalsolutions. “We can write that in Java,” “We can store those in Oracle,” “Thatcould be an XML ﬁle.” Statements like these are to be avoided at this stage.Those are details about the implementation. You haven’t got a design toimplement yet!
As we said, you are seeking simplifying abstractions. The next step, after
culling cards that do not represent real objects in the problem space, is togroup together the cards that have any attributes in common. If we look at our
3. An acronym for: Keep It Simple, Stupid!Chapter 12 Analysis and Design: Seeking the Objects 282
remaining cards, we can quickly see that we have two cards that are accounts:
“Capital Account” and “Current Account.” These are both pools of money.Put them on top of one another on the table. Likewise, it is fairly obvious that“CEO,” “CFO,” “Director,” and “Manager” are all people. Put them togetheron the table.
Remember that we are looking for simplifying abstractions. The grouped
cards should all be obviously variant types of a generic class of objects. In ourexample, the one is a stack of Accounts, and the other is a stack of People, or,as we will call them, Users. Create new cards for these generic classes. Make acard with “Account” at the top and put it above the ﬁrst stack. Make anothercard with “User” at the top and put it above the second stack.
There are two ways that this might simplify your design. For now, all cards
below the abstract cards are “on probation.” We are going to move on to deﬁnethe attributes (data) and methods (behavior) of our abstract classes. If the ab-stract class can handle all use cases without having to treat any of the morespeciﬁc classes differently, then the speciﬁc cards are discarded. If not, then allfunctionality that is common across the more speciﬁc types will be put on theabstract class card, and only those data and behaviors that are different will beput on the more detailed cards.
In the ﬁrst case, the simpliﬁcation is a reduction of several potential classes
to a single class. This is always a good thing, when it is possible. In the secondcase, you are identifying potential inheritance relationships.
4
FINDING THE  METHODS AND  ATTRIBUTES 12.5
The next step is to start identifying the data and behavior that characterize yourclasses. Always put such items on the most abstract class ﬁrst. The only time toadd an attribute or method to a more speciﬁc class is when it applies to thatclass and only that class—in other words, only when it represents a differencebetween the general case and the speciﬁc case.
5
4. We’ll talk more about that later in the book. As it happens, all of our simpliﬁcations in this
chapter are examples of the ﬁrst case.
5. In complex cases, you may ﬁnd an attribute or method that applies to several, but not all,
of the speciﬁc cases. In such a case, a new abstract class below the main abstract class, but aboveall the speciﬁc classes that share that attribute or method, may be called for.283 12.5 Finding the Methods and Attributes
ESSENTIAL AND  NONESSENTIAL 12.6
So far, we have walked you through a very simple example, and we have made
sound choices at every step. In more complex cases, even the best of us willmake mistakes. We will head down blind alleys. We will group things togetherthat might belong in separate abstract categories, but should, perhaps, share aninterface. These are not so much errors as judgment calls, and skill at recogniz-ing them and making the correct decisions comes only with experience.
For now, the most important questions to ask include:
•Do I need this class?
We are often tempted to create too many inherited classes. When we
seek more generic, higher level abstractions, it is often possible to use onlythe more abstract class. Of course, it is possible to carry that tendency toofar. If your methods contain a lot of “if’s” to handle various subtypes, thatmight be a case where you should inherit and overload the method.
•Should I get functionality by inheritance or composition?
Inheritance should be reserved only for cases where a class is a more
speciﬁc variety of the base class. For example, you might have a Personclass, and then you might have Employee and Customer classes inheritcommon attributes and methods from Person. This is frequently called an“is-a” relationship, as in “A User is a Person.” If your proposed inheritancerelationship makes sense phrased that way, it might well be a goodcandidate for inheritance.
Composition is when you use a class as an attribute. To extend our
example, you might have an Address class. You might be tempted to havePerson inherit from Address. But a Person is not an Address. Try it: “A
Person is an Address.” Nope. Instead, you should just have an instance ofthe Address class as an attribute of Person. Such a relationship is oftencalled a “has-a” relationship, as in “A Person has an Address.” If therelationship makes sense phrased that way, it is a good candidate forcomposition. Another way to recognize that you’ve wrongly used inheri-tance is if you end up having a radically different class inherit from thesame base class. For example, suppose you have a class, Building. Wouldit make sense for Building and Person to inherit from Address? AreBuildings and Persons more speciﬁc instances of the same general type ofthing? No, they are not. Building and Person should get Addressfunctionality by composition.Chapter 12 Analysis and Design: Seeking the Objects 284
•Does this attribute or method belong here?
If you ﬁnd yourself specifying nearly identical methods in more than
one class, this should make you ask if the classes should have a commonbase class from which they should inherit, or if there should be a newunrelated class that they all share by composition.
If the functionality is the same for a set of classes, and the classes are
speciﬁc instances of a more general type, the method should be on thegeneral class. For example, a 
changeName()  method should probably be
on Person, not on Employee or Customer, because the functionality is thesame for all three classes. By contrast, a 
changeEmployeeNumber()
method should be only on Employee. It should not be on Person, becausenot all Persons are Employees. There may also be methods that are com-mon to both Employee and Customer types, but are radically different inimplementation. For example, a 
changePassword()  method might
change a password in a system-wide LDAP server for an Employee, butmight just change a record in a Web site database for a Customer. This iseasily done by writing separate methods in each class.
But should you add a 
changePassword()  method on Person? If you
want to be able to call the method when treating either a Customer or anEmployee as a Person, then you should. But you don’t have to implementthe method on Person. You can declare 
Person.changePassword  as ab-
stract, and then, if you call the method on a Person, it will call the correctmethod based on what type of Person (Employee or Customer) the Personis. Note that if a class contains any abstract methods, the class itself mustbe declared abstract and it cannot then be instantiated. Also note thatthis is often best accomplished not through abstract classes, but throughinterfaces (see Eckel, pp. 321–322).
These are by no means the only considerations that come to bear on what
classes to create and how to arrange and implement them, but they do representa good start. They are a foundation on which you can build best practices outof your own experience and environment.
Whole books have been written on the topics of object-oriented analysis
and object-oriented design. CRC cards are only one part of an array of tech-niques that can be applied to OOA/OOD. The Uniﬁed Modeling Language(UML) is popular in many MIS circles. UML consists of a variety of differentdiagrams which are used to model parts of an object-oriented design. They are:285 12.6 Essential and Nonessential
Am I Mature? Or Are You My Mommy?
Let us point you at one more business buzzword link. Even though we
think this particular site and their work are being ill-applied by manywell-intentioned IT managers, there is still a great deal of value in theCarnegie Mellon Capability Maturity Model (
http://www.sei.
cmu.edu/cmm/ ). At the very least it provides an objective way to assess
the level of process sophistication you have in your organization.
The CMM deﬁnes ﬁve levels of maturity:
1. Initial
2. Repeatable3. Deﬁned4. Managed5. Optimizing
If we may grossly oversimplify (and why should we stop now?),
“Initial” means you do things differently every time. You just make yourbest guess about what the right thing to do is, and you do it. “Repeatable”means that you have hit upon a method that appears to work, and youuse it consistently. “Deﬁned” means that somebody has written it down.“Managed” means that the process is actively maintained and supervisedin an effort to adapt it to changing circumstances. “Optimizing” meansthat measurements (“metrics”) are made that objectively assess the pro-cess, and ensure that continuous improvement takes place and can be soproven.
*
What we have shown you in this chapter probably falls in the Repeat-
able category, a long way from the engineering and management nirvanaof Optimizing.
The problem that seems to come up with this system is that very bad processes may
be very mature and very good processes may be relatively immature. Obviously,however, an Optimizing process must be steadily moving towards the good.*Chapter 12 Analysis and Design: Seeking the Objects 286
Class Diagram•
• Sequence Diagram• Collaboration Diagram• Use Case Diagram• Activity Diagram• Component Diagram• Deployment Diagram
Using the simple but effective technique of CRC cards can be a good place
to start, but you may soon want to move up the OOA/OOD ladder to use toolslike Umbrello
6 to make UML diagrams, and perhaps to use the whole UML
toolset.7 Many organizations that we know of will pick and choose various
techniques and tools. No matter how far down the road of formal software en-gineering you go, you must at least make some effort to have a repeatableprocess that incorporates continuous improvement.
ANALYSIS  PARALYSIS 12.7
The catchy phrase “analysis paralysis” has become a cliché. (And how could itnot, being so catchy?) What it refers to, of course, is the tendency to becomebogged down in details; or the tendency to refuse to start implementation untilyou are certain that your design is “right.”
This is where using a “spiral” development model can pay off. By doing
frequent small releases, you can expose subtle design ﬂaws at an earlier stage indevelopment. Often, you can (to trot out another trendy term) “refactor” asmall part of your design or implementation. If you have clean object interfaces,this can often be done with minimal disruption because a good object modelhides implementation details within classes.
In most cases it is best, once you have the use cases and requirements, to
proceed to a prototype object model and learn by doing.
6.http://uml.sourceforge.net/index.php
7.http://www.uml.org/287 12.7 Analysis Paralysis
REAL SOFTWARE  ENGINEERING 12.8
Let’s take a moment here and ask a fundamental question. Is this the best way
to make software? And there is another fundamental, but subtly and important-ly different question: Is this the right way to make software?
There are techniques and methods of Software Engineering that do ap-
proach the ideal of “zero defects.” NASA uses such procedures for mannedspacecraft. Coders for medical devices do likewise. The outline method we havesuggested here doesn’t come close to such methods. So, is what we have de-scribed the best way to make software? No, it is not. So why don’t we all usethose zero defect methods? That is easy to answer: cost. It is expensive. Virtuallyno MIS shop on the planet would be willing to pay the price it takes to get thatstability and certainty. The price isn’t just dollar cost, either. The Space Shuttle,for example, has computers that still use magnetic core memory, a technologythat was old in the 1970s. Why? Because the restrictions imposed by theirchange control systems would essentially require the entire shuttle to beredesigned and retested if they made such a change.
8
But this isn’t an either-or. You do not have to apply either a full-ﬂedged
software engineering methodology, or use nothing at all. Instead, you have toapply some design, development, and maintenance processes that improve theprobability of success and reduce the cost of failure. When we recommendversion control, requirements gathering, use cases, and CRC cards, we are giv-ing you a bare-bones set of methods that will help to write fairly successfulsoftware at reasonable cost in reasonable amounts of time.
To some of you, this will be old news. If you are at level 2 or above on the
Capability Maturity Model (see the sidebar in Section 12.6), then you alreadyhave some process. But you would be surprised how many business out theredo not even have source code control in place. To some of you, what we suggesthere will be primitive compared to processes you already have. The point is, noone’s level of control and process is “right” (to us, that means “cost-justiﬁed”)for all cases. But using no method at all is a risk too great for any business.
8. An exaggeration to be sure, though maybe not as much as you might think, but you get
our point.Chapter 12 Analysis and Design: Seeking the Objects 288
CORE CLASSES 12.9
So, let’s meet our core Java classes. Here they are, in all their glory (Exam-
ples 12.1, 12.2).
REVIEW 12.10
We have discussed a simple approach to object-oriented analysis and designthrough the use of CRC cards. The ideal outcome is a design with the smallestpossible number of classes that model real-world objects while meeting all therequirements.
WHATYOU STILL DON’T KNOW 12.11
We could list the names of a number of formal software engineering method-ologies, but we won’t bother. If this chapter has served as your only introduc-tion to object-oriented analysis and software engineering, let’s just say you havea lot of reading to do. But beyond that, there is something you need that ismuch more subtle and difﬁcult to pin down: experience . The only way to get
good at analysis and design is to do it. It helps to do it in conjunction with ex-perienced people, because they can save you time and pain in acquiring yourexperience. This chapter is the simplest of foundations. The books give youknowledge. Experience gives you wisdom.
RESOURCES 12.12
Kent Beck and Ward Cunningham, “A Laboratory for Teaching Object-Oriented Thinking”, in OOPSLA’89 Conference Proceedings , New Orleans,
Louisiana, October 1–6, 1989. The special issue of SIGPLAN Notices  24, no. 10
(October 1989) is also available online at 
http://c2.com/doc/oopsla89/
paper.html#cards .
More on the Capability Maturity Model can be found at
http://www.sei.cmu.edu/cmm/ .
Information on the Uniﬁed Modeling Language can be found at
http://www.uml.org/ .289 12.12 Resources
Example 12.1 The Account  class
package net.multitool.core;
import net.multitool.util.*;
import java.util.*;import java.sql.*;
public class
Account{  private String name;                      // A name to identify this account  private User owner;                       // The user assigned to this account  private SAMoney total;                    // Total amt originally allocated to                                             //   this account  private SAMoney balance;                  // amt remaining unallocated to any                                             //   subaccounts  private Account parent;                   // The account which contains this                                             //   account as a child  private HashMap children;                 // The collection of subaccounts,                                             //   by name  private static Connection dbConn = null;  // JDBC connection  private ArrayList payments;               // TODO: unimplemented  private SAMoney unspent;                  // TODO: unimplemented
  /**
   * Create an account, with a pool of dollars to budget.   * Use this constructor to create the master account.   * Use createSub to create children of this account.   */  public  Account(String name, User owner, String total)    throws NumberFormatException  {    this.name = name;    this.owner = owner;    this.total = new SAMoney(Double.valueOf(total).doubleValue());    this.balance = new SAMoney(Double.valueOf(total).doubleValue());                                                // N.B. must not be the same object    this.parent = null;    this.children = new HashMap();  }
  // Static that connects to the DB and either returns the top account,
  // or creates it for us.  public static Account getTopAccount() throws SQLException {  Account topAccount = null;
  dbConn = DriverManager.getConnection("jdbc:postgresql:budgetPro?user=mschwarz");Chapter 12 Analysis and Design: Seeking the Objects 290
  if (dbConn != null) {
    // We have a database connection.  } else {    // We don't and we must create a top account.  }
  return topAccount;
  }
  // Simple getter; returns the name.
  public String  getName() { return name; }
  // Simple getter; returns the total pool of money that this account represents.
  public SAMoney  getTotal() { return total; }
  // Simple getter; returns the balance.
  public SAMoney  getBalance() { return balance; }
  // Simple getter; returns the parent account.
  public Account  getParent() { return parent; }
  // Simple getter; returns the owner of this account, as a User object.
  public User  getOwner() { return owner; }
  // Census - how many children.
  public int  size() { return children.size(); }
  /**
   * Get to all the children, via an iterator.   */  public Iterator  getAllSubs()  {    return children.values().iterator();  }
  /**
   * Create a new subaccount (i.e., child)   * given a name and an amount.   * The child is connected to the parent, and   * the parent's balance is reduced by the amount   * allocated to the child.   */291 12.12 Resources
  public Account
  createSub(String name, String amt)    throws NumberFormatException  {    Account acct = new Account(name, owner, amt);
    // Reduce the parent's unallocated funds.
    balance = balance.subtract(acct.getTotal());
    // Connect the accounts to each other.
    acct.parent = this;    children.put(name, acct);
    return acct;  } // createSub  /**
   * Looks up and returns the account with the given name.   */  public Account  getSub(String name)  {    return (Account) children.get(name);
  } // getSub} // class Accoun
The Umbrello UML modeller is an Open Source tool for creating the various
UML diagrams. You can ﬁnd it at http://uml.sourceforge.net/
index.php . We also recommend their online documentation as a good brief
introduction to UML and to Umbrello. It can be found from the main Umbrel-lo page, or directly at 
http://docs.kde.org/en/HEAD/kdesdk/umbrello/ .
EXERCISES 12.13
1. Imagine a public library. Carry out the CRC nomination process for a
system to track library members and the collection. What list of objectsdo you come up with? What abstract classes do you ﬁnd? Which did youdiscard and why?
2. Extend the purpose of the library program to include generating mailings
to members with overdue materials. Did you add classes? Did you addmethods and/or members? To which classes did you add them?Chapter 12 Analysis and Design: Seeking the Objects 292
Example 12.2 The User  class
package net.multitool.core;
import net.multitool.util.*;
import java.util.*;
public class
User{  private String name;  private Account home;        // TODO: implement
  public
  User(String username)  {     name = username;  }
  public String
  toString()  {     return name;  }
} // class User
3. A new requirement is added. The system must allow for books, audio
recordings, and movies to be checked out for different lengths of time.Did you add classes? Did you add methods and/or members? To whichclasses did you add them?293 12.13 Exercises

Testing may not be your favorite task as a programmer; it probably rates just
above documentation. Yet here is a tool that has made testing more bearableand more productive for many Java developers—and not just because it haspretty colors and ﬂashing lights.
WHATYOUWILL LEARN 13.1
• What JUnit is and why it’s getting so much attention.
• How some people test before they start coding.• How to install and invoke JUnit.• The major JUnit concepts that you need to understand.• What assertions are available in JUnit.
295Chapter 13
JUnit:
Automating Unit Testing
JUNIT:WHY ALL THE  FUSS? 13.2
JUnit is a framework for unit tests. It consists of a handful of classes which you
can use to build bunches of test cases for testing your application. JUnit alsocomes with three test “runners” for running your tests and reporting the testresults. So why all the fuss? Why has JUnit been so much in the technicalforefront the last year or two?
Start with a straightforward idea, well executed, that can help almost any
programmer working on any application. Make it something that can be inte-grated incrementally into existing projects. Make it robust enough to be usedfor projects starting “from scratch.” Give it a simple but pleasing GUI, and putit to work on a few high-proﬁle projects. Give it some good press coverage. Andyou’ve got a winner: You’ve got JUnit. Besides, it really does help you get usefulwork done; it makes writing tests a little less work and a little more enjoyable.And working with well-tested code is its own reward—a satisfying experience.
DESIGN THENTESTTHEN CODE 13.3
This is the slogan of the test-oriented crowd, and if it sounds a bit impossible,it is. It’s hype—it got your attention, and there is a bit of truth to it, but don’ttake it too literally.
The approach espoused by the “Testing First” crowd is to start, like all
good software development efforts, with design. But once you have pieces de-signed, move directly into testing. Now you don’t have any code that can betested yet, but you can start writing  your tests. Then—although the tests will
fail, as there is no code to run yet—you can begin keeping score on yourprogress by running these tests as code gets implemented.
NOTE
Some people like to tout the use of JUnit as an automated tool to track progress,
but that’s a little hard to do when you can’t compile your tests because theclasses they need don’t yet exist. However, if you document your design of aclass by (among other things) creating an empty version of the source, withJavadoc comments for the class and whatever methods you have come up withso far, well, then you’ve got something that will compile, and thus can be usedfor tracking progress. It also makes great, tangible documentation. Our pointhere, though, is that you are doing some coding before you begin testing. It’sreally more of a back-and-forth between coding and testing.Chapter 13 JUnit: Automating Unit Testing 296
Let’s apply that approach to our previous design discussion. We’ve de-
scribed an Account  class in our design discussion. It needs a name, an owner,
and an amount of money when created. It should have a method to createsubaccounts, ones that are connected to this account and get allocated some orall of the main account’s money.
Example 13.1 is the basic structure of our 
Account  class.
That’s enough to begin writing a test. We have described the constructor,
with the three parameters that it will need. We’ve also described a method onthe 
Account  object, one that will create subaccounts. That gives us enough
information to write a test that will create an account and then create subac-counts of that account. We can test to see if the accounts are created properly(i.e., are not null) and if the subaccounts use up all the money of the parentaccount.
When you “test then code,” you begin to use the objects that you have
designed without getting bogged down in their implementation. You are, ineffect, describing  their external interfaces without implementing them. You are
also beginning to use the classes as a user might, though a tester’s use is a bitdifferent than the way an application might use them. However, as a user ofthese classes you are beginning to test the design, by testing the results of theuse cases—are these classes really usable?
You may discover that you need some additional functionality. In our ex-
ample, we can see from the description of our test that we will need a gettermethod on the account to return the amount of money that remains unallocat-ed to subaccounts. Then we can test to see if it gets used up properly.
There are many more test cases that we could develop for the 
Account
class, but let’s use just these for now, so that the size of our test case ismanageable.
Our next step is to get JUnit installed before we get too deep into
developing our test cases. That will give us something to run these tests.
INSTALLING AND  RUNNING  JUNIT 13.4
It’s rather simple to install a standalone version of JUnit. We download a ZIPﬁle from the JUnit Web site, then unzip it into a directory. Adding the JUnitJAR ﬁle to your 
CLASSPATH  is all that’s needed to make JUnit available for you
to run it.297 13.4 Installing and Running JUnit
Example 13.1 The bare bones of our Account  class
package net.multitool.core;
import net.multitool.util.*;
import java.util.*;
/**
 * The basic Account class for our budgeting example; this is the  * first-cut "implementation" where we have just transferred our  * design into Java code. We can use this much to generate Javadocs  * and also to begin our JUnit testing (design, test, code). */
public class
Account{   private String name;      // a name to identify this account   private User owner;       // the user assigned to this account   private SAMoney total;    // total amt allocated to this account   private HashMap children; // the collection of subaccounts,                              //   by name   private Account parent;   // it has this account as a child
   /**
    * Create an account, with a pool of dollars to budget.    * Use this constructor to create the master account.    * Use "createSub" to create children of this account.    */   public   Account(String name, User owner, String total)   {   }
   /**
    * Create a new subaccount (i.e., child), given a name     * and an amount. The child is connected to the parent.    */   public Account   createSub(String name, String amt)   {      return null;        // so it compiles
   } // createChild} // class AccountChapter 13 JUnit: Automating Unit Testing 298
Downloading and Unzipping 13.4.1
Point your browser at the site http://www.junit.org/ (Figure 13.1). From
the main page, choose the Download heading.
That takes you to a SourceForge site (Figure 13.2); click on one of the
sites near you, though any will do. The download is only a few hundredkilobytes, so it shouldn’t take long.
You’ll be left with a ﬁle named 
junit X.Y.Z.zip , where the X, Y, Z char-
acters are the digits that tell you what release of JUnit this is. Our examplesshow the 
3.8.1  release.
NOTE
It’s a good idea to inspect the ZIP ﬁles that you download before you actually
unzip them. We like to know what ﬁles and especially what directories are goingto get modiﬁed or cluttered up by the unzipping. Some ZIP ﬁles come with alltheir ﬁles inside of a single folder. Those are ﬁne to unzip in place. Other ZIPﬁles have been built from lots of pieces and unzipping them can make a messof your current directory, or worse, of other directories that you may not evenknow about. Instead, play it safe and look before you leap. You can see the listof all the ﬁles in the JUnit ZIP ﬁle by typing this command:
$ unzip -l junit3.8.1.zip
The -l option will produce a listing of the contents of the ZIP ﬁle. That
way you can see what subdirectories it will create, that is, if it is going to unpackinto a single directory or make a mess. The JUnit ZIP ﬁle is very well behavedin this respect.
Figure 13.1 The JUnit home page299 13.4 Installing and Running JUnit
Figure 13.2 The SourceForge download site
Create a directory and unpack the JUnit ZIP ﬁle in there:
$ mkdir ~/junit
$ mv junit3.8.1.zip !$$ cd !$$ unzip junit3.8.1.zip
This warning from the installation instructions is worth noting:
IMPORTANT
Don’t install the junit.jar  into the extention directory of your JDK installation.
If you do so the test class on the ﬁlesystem will not be found.Chapter 13 JUnit: Automating Unit Testing 300
The JDK installation directory has a subdirectory named jre/lib/ext .
Don’t put the JUnit JAR ﬁle in there. If you have followed our instructions,you’re OK, since we had you create a new directory.
To use JUnit, the 
junit.jar  ﬁle needs to be in your classpath. For
example:
$ export CLASSPATH="${CLASSPATH}:${HOME}/junit/junit3.8.1/junit.jar"
That’s all the installing there is. It doesn’t feel like much, because you
haven’t done much. All it provides is a JAR ﬁle that you will use when you wantto run tests. That’s where it gets interesting.
Using JUnit 13.4.2
To test out your installation, 
cd to the directory where you unpacked JUnit.
If it isn’t already part of it, add the current directory (“ .”) to your CLASSPATH :
$ export CLASSPATH="${CLASSPATH}:."
Then try:
$ java junit.swingui.TestRunner junit.samples.AllTests
You should see a Java Swing GUI appear, with a green bar showing the
progress of the testing (Figure 13.3).
NOTE
You may see an error message like this in your terminal window:
(data/time) java.util.prefs.FileSystemPreferences checkLock...
WARNING: Could not lock System prefs.Unix error code 136742412(data/time) java.util.prefs.FileSystemPreferences syncWorldWARNING: Couldn't flush system prefs: java.util.prefs.Backi...
It will keep repeating as long as JUnit’s GUI is running. The easiest ﬁx is
to make the jre directory world-writable while you run the GUI the ﬁrst time. It
will create the ﬁles it needs (in a directory, .systemPrefs ), and thereafter
stop pestering you. Remember to change permissions on the directory back totheir original value.301 13.4 Installing and Running JUnit
Figure 13.3 JUnit Swing GUI running tests
This is the GUI part of JUnit, part of what has made it so popular. By
writing JUnit tests, you get to use their GUI. If you were to develop your owntesting mechanism, you would also have to (re)invent a GUI.
There is an AWT GUI for the Swing-averse, but it is less featured. There
is also a plain command-line test case runner:
$ java junit.textui.TestRunner junit.samples.AllTests
.......................................................................................................................Time: 3.834
OK (119 tests)$Chapter 13 JUnit: Automating Unit Testing 302
It prints a period for each test that it runs. (Yes, there are 119 periods
there. Go ahead; count them if you must.) The command-line version is usefulfor incorporating JUnit tests into shell scripts (e.g., for testing nightly builds,e-mailing the results) and is used by ant when it invokes JUnit.
WRITING TEST CASES 13.5
Writing a test case for your own Java code consists, at its simplest, of writing a
new class for each class that you want to test. But this class that you create isbuilt in a special way so that the test harness of JUnit can execute it. That is,the test case class that you create should meet certain naming conventions, sothat the JUnit test runners can ﬁnd what they need in order to run your tests.
More speciﬁcally, your test cases will extend the JUnit class 
TestCase .
Now, TestCase  is an abstract class, meaning there are parts that you have to
ﬁll in (i.e., methods that you must write) to make it a working class. Moreover,
TestCase  implements (in the Java sense of the word) the Test  interface. Can
you begin to see how the TestCase  class is a framework? It deﬁnes the rough
outline of how the test cases will look so that a common test runner can runany test case, no matter who wrote it.
Let’s look at a simple example, to see what such a test case looks like.
Example 13.2 shows one for testing our 
Account  class.
Example 13.2 Simple test case
package net.multitool.core;
import java.util.*;             // needed by our class
import net.multitool.util.*;    // needed by our class
import junit.framework.*;       // needed by JUnit/**
 * for JUnit testing of Account.java */public classAccountTest  extends TestCase{  // our test instrumentation:  Account base;303 13.5 Writing Test Cases
  // run before each test case:
  protected void  setUp()  {    base = new Account("Base", new User("testuser"), "150");  }
  // our one test case
  public void  testCreateSub()  {    // Create a subaccount, assigning $50 of our pool of $150.    Account sub1 = base.createSub("sub1", "50");    // Make sure that it created something.    assertNotNull("Couldn't create sub1", sub1);
    // Now a 2nd subaccount.
    Account sub2  = base.createSub("sub2", "75");    assertNotNull("Couldn't create sub2", sub2);
    // Now a 3rd subaccount, to use up all the $.
    Account sub3  = base.createSub("sub3", "25");    assertNotNull("Couldn't create sub3", sub3);
    // We should have the same total that we started with.
    assertEquals(150, base.getTotal().getDollars());
    // We should have used up all our $.
    assertEquals(0, base.getBalance().getDollars());
    // Be sure the (sub)account lookup works:
    Account ex2 = base.getSub("sub2");    assertNotNull("Couldn't find sub2", ex2);    assertSame(sub2, ex2);
  } // testCreateSub} // class AccountTest
Notice how we’ve named our test case class. We take the name of the class
and append Test  to the end. This is convenient for us—we can easily see which
classes have test cases; but more importantly, JUnit can use this and othernaming conventions to derive the test case names (more on that later). Noticealso that the method in the 
Account  class that we want to test, called
createSub() , gets exercised by a method named testCreateSub() —weChapter 13 JUnit: Automating Unit Testing 304
Table 13.1 JUnit Naming
In your test case In your original code
MyClassTest MyClass Class
testMyMethod myMethod Method
prepend the word “test” to the method name, and capitalize the now-no-longer-
ﬁrst letter. Again, JUnit will use this naming convention, along withintrospection, to automatically derive the test names from the actual methodnames (more on that later, too). The naming conventions we’ve seen so far aresummarized in Table 13.1.
Let’s take a quick look at the code. We import the framework for JUnit
test cases, so that the compiler can resolve the names that deal with JUnit stuff.The 
TestCase  class that we extend is part of that JUnit stuff. It’s an abstract
class that deﬁnes much of what we use for testing. We just ﬁll in what we need.
The TestCase  class deﬁnes a method called setUp() . The setUp()
method is called not just once, but before every test method is called. That wayyou can initialize variables and get into a known state before each test. Sinceit’s already deﬁned in the 
TestCase  class, we can override it (as in our example)
to do what we want, or we can not include it in our class and get the defaultbehavior from 
TestCase  (which is to do nothing).
There is also a method named tearDown()  which you can override if you
need to close things up at the end of a test case (e.g., close a database connec-tion). As with 
setUp() , its default behavior, as deﬁned in TestCase , is to do
nothing.
The test case itself—the method where we will exercise our class—is called
testCreateSub  (since we want to test our createSub()  method). Inside such
a method (and we could have more than one) we write code which uses theobjects in our application. Then at various junctures in the code we make asser-tions about the state of things—for example, this variable should be non-null,or this expression should have this particular value.
Those assertions are, to our way of thinking, the tests. We’re testing to see
if the subaccount was created, or if the main account did, indeed, use up all ofits dollars in allocation to the subaccounts. But they are not what is called tests
by JUnit. Rather, each individual method in a test class is considered a singletest. Such test methods are, typically, a collection of assertions surrounding theuse of a single (application) method. So in our example, the method305 13.5 Writing Test Cases
testCreateSub()  is a single JUnit test which asserts various conditions about
various invocations of the createSub()  method. Note that all of the assertions
encountered in the execution of the test class must pass for the test to pass.
So what happens if an assertion fails? The assert method will throw an ex-
ception, reporting the failure. In JUnit terminology, a failure  is a test that didn’t
pass, whereas an error is a problem with the running of the test. A missing class
or a null pointer exception are errors, whereas an assertNotNull()  call failing
is considered a test failure.
The handy thing about the exceptions that the assert methods throw is
that they are, technically speaking, not java.lang.Exception  throwables but
rather belong to the java.lang.Error  type of throwable. (Don’t confuse this
technical Java use of the word “error” with our more informal use in the previ-ous discussion of failure versus error.) To quote from the Javadoc page for
java.lang.Error :
A method is not required to declare in its throws  clause any subclasses of
Error  that might be thrown during the execution of the method but not
caught, since these errors are abnormal conditions that should never occur.
So the use of Error  by JUnit’s various assert methods is done simply as a
convenience for us test developers, so that we don’t have to put throws ...
clauses on all of our method declarations.
JUnit Assertions 13.5.1
These are the various test assertions available with JUnit:
•assertEquals() , comparing
•boolean  with boolean
•char  with char
•short  with short
•int with int
•long  with long
•float  with float
•double  with double
•Object  with Object
•String  with StringChapter 13 JUnit: Automating Unit Testing 306
•assertTrue( boolean expression )
•assertFalse( boolean expression )
•assertNull (Object)
•assertNotNull (Object)
•assertSame (Object1, Object2)
•assertNotSame (Object1, Object2)
•fail()
Each of the assert methods comes in two “ﬂavors,” one with a message
String  and one without. For example, there is a method assertTrue()  which
takes a boolean  as its parameter; typically it would be used with an expression,
for example:1
assertTrue( (sample  actual) );
If the condition is not true, an AssertionFailedError  is thrown. That
means, among other things, that if/when your test fails, it will stop executingat that point. The 
tearDown()  method, though, will still be executed before
proceeding to the next test.
There is also a method of the same name, assertTrue() , but with a
slightly different signature—it adds a String  as its ﬁrst parameter. The string
is the message to be included in the error report. Using this variation on
assertTrue() , our example would become:
assertTrue("Sample too small", (sample  actual));
In the same way, assertFalse()  has two versions—
assertFalse(boolean)  and assertFalse(String, boolean) —and so
on for all other assert methods.
1. Yes, the extra parentheses are not needed; they just make the point that this is a boolean ex-
pression being passed as the argument to assertTrue() . We could also have written it as:
boolean result = (sample  actual);
assertTrue(result);
Again, the extra parentheses are used just to make it clearer.307 13.5 Writing Test Cases
The String  message is very helpful when you get large numbers of com-
parisons and assertions inside your test cases. It can help you identify whichassert in which test failed.
TIP
When writing your assertions, keep in mind the difference between
assertEquals()  and assertSame() . The latter will test if the two argu-
ments refer to the very same instance of an object, whereas the former onlychecks to see that their values are equal. So any two references to objects thatare the same will also be equal, but not vice versa. For example:
String sample = "value";
String others = "more value".substring(5);assertEquals(sample, others);   // will passassertSame(sample, others);     // will fail
Digging a little deeper into how all this works, it might be worth pointing
out that the JUnit TestCase  class, while an abstract class itself, is also an exten-
sion of another class, the Assert  class. The Assert  class is the class that deﬁnes
all these public static methods for asserting the various conditions (see the listabove). That is why you don’t need any qualiﬁers on the various assert calls.They are all part of your test case by virtue of it extending 
TestCase . It also
means that you could override any of them to get special behavior. This mightbe useful for 
assertEquals(Object, Object) , to allow you to compare
objects of your own kinds, but we don’t recommend this. You are better offoverriding the 
equals()  method of your own object than messing with the
JUnit methods. And remember that if you override those behaviors, your testswill only be as good as your implementation of the assert mechanisms.
Running a Test Case 13.5.2
Recall how we ran the JUnit self-tests after installation. We can now use a
similar command to execute our own test case. With the 
CLASSPATH  still set
as above, try compiling and running the test case:
$ javac net/multitool/core/AccountTest.java
$ java junit.textui.TestRunner net.multitool.core.AccountTestChapter 13 JUnit: Automating Unit Testing 308
The TestRunner  will use introspection and reﬂection to dig information
out of the AccountTest  class. It will ﬁnd all the public methods that begin
with test  and have no parameters. It will execute setUp() , then one of the
test methods, then tearDown() ; then setUp() , then another test method,
then tearDown() , and so on. Our example has only one test method,
testCreateSub() , so that will be the one test method it runs.
The result of running the test should look like this:
$ java junit.textui.TestRunner net.multitool.core.AccountTest
.Time: 0.071
OK (1 test)$
RUNNING TEST SUITES 13.6
Quite likely, you’ll want to run several tests, exercising the various classes that
make up your application. Let’s see an example of how to build such a suite oftests (Example 13.3).
While not deﬁned as an interface, the convention is used by JUnit
TestRunner  classes that they will look for a public static method called
suite()  in any class that you ask a TestRunner  to run. Your class, the one
that will deﬁne the suite of tests, should return something that implements the
Test  interface. A TestSuite  object is one such object, and we can ﬁll it with
tests gleaned automatically by JUnit from the class names that we supply.
We’ve also added a main()  that invokes the text-based user interface for
running these tests. That way you can invoke the tests from the command lineif you like.
Here are the two commands to compile and execute the 
CoreTest  suite,
using the Swing GUI:
$ javac test/net/multitool/core/CoreTest.java
$ java junit.swingui.TestRunner net.multitool.core.CoreTest
When the GUI runs, click on the Hierarchy tab and you can see the vari-
ous tests that make up the suite. Opening the folders will show the tests insideof suites (Figure 13.4).309 13.6 Running Test Suites
Example 13.3 A suite of test cases
package net.multitool.core;
import junit.framework.*;public class
CoreTestextends TestCase{  public  CoreTest(String str)  {    super(str);  } // constructor CoreTest
  /**
   * Constructs a collection of tests to be run by the TestRunner.   */  public static Test  suite()  {    /*     * Add the results of each separate Test into a big Suite.     */    TestSuite suite = new TestSuite("Core Classes");    suite.addTestSuite(net.multitool.util.SAMoneyTest.class);    suite.addTestSuite(AccountTest.class);    suite.addTestSuite(UserTest.class);
    return suite;  } // suite  public static void
  main(String [] args)  {    junit.textui.TestRunner.run(suite());  } // main
} // class CoreTestChapter 13 JUnit: Automating Unit Testing 310
Figure 13.4 The CoreTest running a suite of tests
One last example is the SAMoneyTest.java  ﬁle that was used in the
CoreTest example (Figure 13.4). Did you notice the names displayed in the
test hierarchy? They don’t match the method names used to run the tests in
SAMoneyTest.java  because we constructed the suite “by hand” instead of
letting the JUnit introspection and reﬂection ﬁnd the methods dynamically.
Such manual approach has some advantages. You can restrict the current
set of tests being executed to a subset of the entire set of tests. You can also, asthis example shows, give other names to the tests. The biggest drawback,though, is the maintenance cost of having to add the test by hand to the
suite()  method whenever you add another test method.311 13.6 Running Test Suites
REVIEW 13.7
We have shown you how to download JUnit and get it running. We have dis-
cussed creating a test case and creating a suite of tests. We’ve looked at theSwing GUI for JUnit but also at the command-line interface. We have shownhow our design translates to a minimal code implementation from which wecan begin testing. We’ve discussed the “design, test, then code” approach, andhow you can use it to track the progress of your implementation.
WHATYOU STILL DON’T KNOW 13.8
JUnit can be invoked from ant. It is an optional task (not part of the standard
ant release), but easy to install and get running. Both the junit.jar  and ant’s
optional tasks JAR ﬁle need to be in your classpath. That’s all it takes. See
http://ant.apache.org/manual/OptionalTasks/junit.html  for more
details.
JUnit integrates well with Eclipse and other IDEs. It is easy to install and
very easy to use when it’s part of your IDE. For whichever IDE you choose,get the JUnit plug-in for it and use it.
One area we haven’t yet discussed is how to do unit testing for the GUI
portion of your application. The basic idea is the same. In order to manipulateyour GUI from the test, you may want to investigate the 
java.awt.Robot
class. It can be used to generate system input events such as mouse andkeyboard actions.
In fact, we’ve only begun to describe the various ways that JUnit can be
used for all kinds of testing. Our focus has been on unit tests during code devel-opment, but JUnit can also be applied to integration and release testing. Withany large Java application, it is crucial to have a good set of regression tests thatcan be rerun after features or ﬁxes are added, or after classes have beenrefactored. JUnit has proven to be very valuable in these situations.
Finally, remember that JUnit is only a tool. The GIGO law
2 tells us not
to expect great tests just because we know how to run a tool. Test design, likeany good design skill, is art as well as science. Learning the art of testing willpay dividends in better code built faster.
2. Garbage In, Garbage Out.Chapter 13 JUnit: Automating Unit Testing 312
RESOURCES 13.9
Visit http://www.junit.org/  for all things JUnit-y, including some docu-
mentation (though it’s not the greatest) and scores of articles which providetons of useful information.
A very good article on JUnit appeared in the May/June 2003 issue of
Oracle  magazine (online at 
http://otn.oracle.com/oraclemagazine ),
titled “A JUnit Step-by-Step,” by Michel Casabianca.
For more about software testing in general, there is a classic (that is, from
early days of computing) book on the subject: Glenford J. Myers, The Art of
Software T esting , Wiley, New York, 1979.
You may also want to check out Just Enough Software T est Automation  by
Daniel J. Mosley and Bruce A. Posey (ISBN 0-13-008468-9, 2002). TheirWeb site
3 includes a bibliography of nearly hundred articles and books on
client-server and other software testing topics.
EXERCISES 13.10
How many other tests can you think up to add to the AccountTest  class? Did
you include checks for bad behavior—for example, attempting to make toomany subaccounts? Add the new asserts and rerun the test.
3.http://www.csst-technologies.com/csstbibl.htm313 13.10 Exercises

In this chapter we will very brieﬂy introduce three database products that run
on the Linux platform and will support our sample applications. We will alsoselect one of the three and explain how to set up our database tables.
WHATYOUWILL LEARN 14.1
In this chapter you will learn a little bit about database server products availablefor Linux, including both commercial and Free or Open Source products. Wewill brieﬂy discuss some factors that might enter into choosing one over theother. We will then describe how one might design tables to back our applica-tion, and how to create and implement those tables in two Open Sourcedatabases: MySQL and PostgreSQL.
315Chapter 14
Storing the Data
FOLLOW THE  OBJECTS 14.2
One of the consequences of a good object design is a relatively simple database
design. For the most part, each class will end up as a database table where eachrow represents an instance of that class. Beyond that, all that is needed are thosetables required to represent relationships between objects.
In this chapter we will show you examples of these relationships, and we
will do so in a manner that should easily port to any SQL relational database.
OF PERSISTENCE 14.3
Programs cannot be assured of running forever. Virtually all computer mainmemory (i.e., RAM) is volatile, meaning that if the power is removed, the datais lost. Since computers are sometimes rebooted, and since the power sometimesgoes out, we obviously need some place besides memory to store our class in-stances. We need persistent (nonvolatile) storage. This can be as simple asstreaming our classes out to ﬂat ﬁle, or it can be as complex as a clustered multi-user database. We will discuss the selection criteria and how you might chooseyour persistent storage strategy.
THINKING OF THE  FUTURE ,OR PAINTING IN  CORNERS 14.4
It is important that you try, in your class design, to avoid making the persis-tence system dependent on a particular storage method or product. If you dothis, you can switch storage products or solutions relatively easily.
ORACLE , POSTGRE SQL, M YSQL 14.5
One of the ﬁrst major decisions you must make is what to use as a database
server. On Linux systems, you have both Free Software and commercial soft-ware options. As we have said before, we will tend to focus on Free Softwarein this text, but we cannot ignore the most popular database software packageout there, which is, of course, Oracle.
Let’s take a quick look at each of the “big 3” database choices on Linux
platforms.Chapter 14 Storing the Data 316
MySQL 14.5.1
MySQL is a very fast but somewhat limited SQL database system. It is wildly
popular mainly because it is simple, fast, and Free. It is everything that youwould need to back a dynamic Web site. As of this writing, the stable produc-tion version of MySQL is 4.0.16, but most Linux distributions are still shippingsomething from the 3.23.x series.
At this point, MySQL lacks some key features:
• Stored procedures
• Sub-SELECTs• Triggers
Version 4.0.x does support some long-awaited features (if you use the
InnoDB table type instead of the default MyISAM tables), such as row-levellocking, foreign keys, and transactions. But InnoDB tables are not directlyavailable in the 3.23.x versions still shipping with many distributions.
MySQL is an excellent choice for designs that do not require stored proce-
dures, triggers, or transactions. It is widely used as a back end for dynamic Websites—applications with many reading users and few writing users.
For more information on MySQL, see Core MySQL  by Leon Atkinson
(ISBN 0-13-066190-2).
PostgreSQL 14.5.2
PostgreSQL is a surprisingly complete and full-featured database offering.
Not only does it fully support stored procedures, triggers, views, foreign
keys, and transactions, but it also implements an innovative “record versioning”system for multiuser integrity. Unlike many other databases, readers may con-tinue to read consistent data during writing activity ( nonblocking revisions ), and
backups may be taken while the database is still available for queries. This is aserious database.
This database has excellent public documentation. Take a look at the
PostgreSQL Documentation.
1 Another useful book is PostgreSQL  by Korry and
Susan Douglas (ISBN 0-7357-1257-3).
1.http://www.postgresql.org/docs/current/static/index.html317 14.5 Oracle, PostgreSQL, MySQL
Oracle 14.5.3
What can we say? In the world of databases, this is the top dog. This is the
standard against which other database systems are measured. Oracle is the DBthat runs the “big applications” out there in the enterprise world. It is also acostly piece of software when it is used for production applications. It is, how-ever, available for free download to use for development. It is emphatically not
Free Software. You don’t have the source code. You don’t have the right tomodify it, and you don’t have the right to pass it on to third parties. That mayor may not be an issue for you.
If you need advanced features like high-availability clustering, it is certain
that Oracle will work for you. You may download it for evaluation anddevelopment from Oracle’s OTN (Oracle Technology Network)
2 Web site.
Selection Criteria 14.5.4
For the simple application we are developing, all of these databases are sufﬁ-
cient. But in the real world, there could be many factors that might come tobear upon your selection of a database server product. These factors mightinclude:
• Price
• License terms• Transaction capacity (speed)• Integration (does it work with or depend on other software you use?)• Human resources (do you have operators and developers familiar with the
product on your staff, or are they available for hire?)
• Presence (does your organization already use this product?)• Features (do you have future plans that might require a particular
product?)
BEING SELF-CONTAINED 14.6
One of the common difﬁculties with software that requires a database is howto get the database structures up and running. Database storage is often not in
2.http://otn.oracle.com/software/products/oracle9i/htdocs/othersoft.htmlChapter 14 Storing the Data 318
ﬁles, and even when it is in ﬁles on the ﬁlesystem, you cannot, when you install
a package like BudgetPro, simply put your database ﬁles in place, since thereare probably other applications that have their tables in those ﬁles, and replacingthem with yours would destroy that data.
Often, the table creation statements and any initial table rows required are
placed in a SQL ﬁle and that ﬁle is run against the database. Meanwhile, all ofthe database code that performs application interactions is either in the applica-tion code or in stored procedures called by the application code. But there isno fundamental reason to make this distinction. The application can see to itthat its database and tables are created.
Of course, you can automate this setup with a shell script, but Java is
supposed to be cross-platform. Of course, you can write a batch ﬁle for Win-dows and a shell script for UNIX, but if you just put this setup into your Javacode, you don’t have to maintain and test separate installation procedures. Oneof the areas where Java applications tend to lag behind other applications is ininstallation and setup. You can obviate this somewhat by including databasesetup in your Java code, thus eliminating the need to write platform-speciﬁcscripts.
Consider including your database and table creation statements directly
in your Java code, even if it is in a singleton setup class that only runs once.
The basic tables should parallel the objects. So, for our classes, the SQL
statements to build the tables might look as shown in Example 14.1.
For the moment, we are conﬁning our table declarations to a form that
should work with both Open Source databases.
These are very basic deﬁnitions. We will be talking about issues like gener-
ating unique IDs for records as we develop the code to back these. Differentdatabase products have different “best” solutions, which will make the supportfor multiple databases more problematic.
BEYOND THE  BASICS 14.7
We are going to adopt a very simple strategy for database persistence. We aregoing to read in the data structures at startup and maintain them as changesare made during execution. That way, any abnormal termination will leave thedata in a recoverable state. The application will not require any “save”operation.319 14.7 Beyond the Basics
Example 14.1 Candidate DB tables for BudgetPro
DROP DATABASE budgetPro;
CREATE DATABASE budgetPro;USE DATABASE budgetPro;CREATE TABLE Account (
  id INTEGER NOT NULL,  name VARCHAR(64) NOT NULL,  user_id INTEGER NOT NULL,  amount DECIMAL,  balance DECIMAL,  parent_account_id INTEGER,  PRIMARY KEY (id),  FOREIGN KEY (user_id) REFERENCES User(id));
CREATE TABLE User (
  id INTEGER NOT NULL,  name VARCHAR(64),  PRIMARY KEY (id));
We will implement this in the simplest way possible, by directly embedded
SQL statements in the application code. But this is far from your only choice.
It is possible to design a “persistence framework,” such that all classes that
inherit from a persistence base class or implement a persistence interface andfollow certain naming conventions for member data can be automaticallybacked by persistent storage. Java’s ability to introspect , that is, to look at the
names and structures of a class dynamically at runtime, allow one to write suchan automatic persistence framework. Several such libraries already exist, includ-ing both commercial and Open Source options. This being an Open Sourcebook, we’ll call you attention to the Open Source choices:
3
3. Have we tried all of these? Yeah. Sure. Why not? Of course we haven’t. Don’t read endorse-
ment into this or any of our “here are some choices” lists. These are also not presented in anyparticular order. We tell you they exist. It is up to you to evaluate their suitability for yourpurposes.Chapter 14 Storing the Data 320
Hibernate4
Hibernate is probably the most widely known Open Source persistence
framework. It is released under the LGPL license.
OJB5
Billed as “Object Relational Bridge,” this one is from Apache. It provides
both an ODMG (a persistence API much used in the C++ world) and aJDO (Java Data Objects—Sun’s object persistence API speciﬁcation) API.
Castor
6
Castor does persistence to both XML and relational databases. They call
their RDBMS persistence framework “JDO,” but beware: It is not compat-
ible with or identical to Sun’s JDO. They say it is better.
pBeans7
pBeans does fully automated persistence of JavaBeans. You have to follow
the rules for writing beans (not EJBs, but the “classic” JavaBeans), butonce done, this will automatically persist your instances to any JDBC-compatible database. No XML speciﬁcation, no SQL scripting, no tem-plates. For the easiest “just save my instance data” type of applications,this can be a good choice.
8 This product even automates the creation of
tables, as we advocated above.
Are there others? Heck, yes. Not all of them persist to relational databases.
Some persist only to XML. Some to other databases like B-trees or the BerkeleyDB system. We didn’t concern ourselves with those. We also left off a coupleof libraries that appear not to have been developed for more than a coupleof years.
4.http://www.hibernate.org/
5.http://db.apache.org/ojb/
6.http://castor.exolab.org/
7.http://pbeans.sourceforge.net/
8. But we are not endorsing here.321 14.7 Beyond the Basics
PERSISTENCE  IS NOT THE WHOLE  STORY 14.8
In this chapter and throughout this book we take a practical view that a
database is there to store an application’s data. That’s far from the intent. Arelational database is designed to create collections of data and to perform logi-cal queries within and between those collections. The relational model is muchmore than application storage. It facilitates all kinds of data analysis. This isoften ignored in enterprises these days.
Don’t forget that designing database tables should take into account
concerns beyond mere application storage.
SETTING  UP POSTGRE SQL FOR BUDGET PRO 14.9
Let’s turn our attention to installing and starting PostgreSQL to support theBudgetPro application.
Installing PostgreSQL 14.9.1
The simplest way to install PostgreSQL is to use precompiled binary packages.
RedHat and Fedora have RPM packages for installing the database and clientsoftware (although neither distributes the client libraries for Java due to licens-ing issues with Java itself). The PostgreSQL project produces RPM packagesof their own, including the Java JDBC class library. Those might be your easiestcourse. Debian packages for PostgreSQL exist, but again, they do not providethe JDBC library.
For our purposes, we are going to assume that you have downloaded and
installed the following RPM packages
9 from the PostgreSQL Download page:10
•postgresql-server
•postgresql-devel
•postgresql-jdbc
•postgresql-docs  (optional)
9. If you are a user of Debian or another Debian-based Linux distribution, you should be aware
that there is a Debian package called alien , which can install and manage RPM packages on
a Debian system.
10.http://www.postgresql.org/mirrors-ftp.htmlChapter 14 Storing the Data 322
Creating a postgres  User 14.9.2
More than likely, installing a PostgreSQL package will create a new Linux user
called postgres  on your system. This is not a login account; it will be used by
the database server process daemon11 (called “postmaster,” lest you think that
it might be an e-mail server or something). Furthermore, only the postgres
user is able to create additional database users or any databases.
Obviously, we won’t want it to be like this forever. It has the same prob-
lem as the root  user on the OS itself: There’s one magic user with all the
power. You’ll need to create additional users and you’ll want to limit what theycan do. How to do it?
First off, you can’t log in as 
postgres , so you will have to become root
and then su to the postgres  user:
[mschwarz@cassidy mschwarz]$ su -
Password:[root@cassidy root]# su - postgres-bash-2.05b$
Note that postgres  didn’t have any proﬁle or rc script to set up prompts
or anything.
All PostgreSQL databases have owning users, in much the same way that
all Linux ﬁles have owning users. But PostgreSQL users are not necessarily thesame as Linux users.
12 The only PostgreSQL user that exists “out of the box”
is postgres . You must use the createuser  command-line utility (or the
equivalent SQL) to create a user. Here’s an example:
11. Historically, daemon processes on UNIX systems used to be run as root . But a program
error in a daemon would allow a malicious user to execute code as the owner of the process. Ifthat owner is 
root , one programming mistake in a server process could give an attacker total
control of the system. Beware of any daemon process that runs as root . Nowadays, these run
as either a totally nonpriviledged user such as nobody , or, if they really need to write ﬁles or
some such thing, as a catch-all user like daemon . The database is an important process and it
needs its own security, so it runs as its own user, postgres .
12. For most PostgreSQL command-line utilities, if no PostgreSQL username is speciﬁed, the
current Linux username will be used. This is often a convenient choice, but you might havecompelling reasons not to do this.323 14.9 Setting Up PostgreSQL for BudgetPro
-bash-2.05b$ createuser mschwarz
Shall the new user be allowed to create databases? (y/n) yShall the new user be allowed to create more new users? (y/n) yCREATE USER-bash-2.05b$
Here, we created the PostgreSQL user mschwarz  and gave him the ability
to create databases and new users.
Creating Our Database 14.9.3
Now that our username, mschwarz , has been created and is authorized to create
databases, we use the createdb  command to create our database:
[mschwarz@cassidy mschwarz]$ createdb budgetPro
CREATE DATABASE
Notice that we did this as the Linux user mschwarz , so the createdb
command used that username when it created the budgetPro  database. What
would have happened if we had used a Linux user that did not have a matchingPostgreSQL user? Let’s see:
[albing@cassidy albing]$ createdb budgetPro
createdb: could not connect to database template1: \FATAL:  user "albing" does not exist
WARNING
Note that we have not implemented any security yet. The user mschwarz  ex-
ists, but it does not have a password. Depending on how PostgreSQL securityis conﬁgured, it may be possible for any user to use the 
-U option with the
PostgreSQL command-line utilities to impersonate mschwarz . As packaged
for Fedora Core 2, PostgreSQL uses ident  to check authentication, so when
albing  attempts this, he gets this error:
[albing@cassidy albing]$ createdb -U mschwarz budgetPro
createdb: could not connect to database template1: \FATAL:  IDENT authentication failed for user "mschwarz"
Just remember that this behavior is dependent on the local conﬁguration
of PostgreSQL. You cannot assume this security is in place just because youare in a PostgreSQL environment. Always be aware of the security conﬁgurationof your production environment!Chapter 14 Storing the Data 324
Straight JDBC 14.9.4
Our application is quite simple. We’re going to directly integrate database
access by simply calling the JDBC interface at startup and making use of thatconnection again and again for data changes.
Our solution is more than sufﬁcient for the standalone command-line and
GUI versions of the application, but it will be left as an exercise for the readerto implement a better solution for the EJB implementation.
What will be lacking? Well, the solution we will implement here will get
a single database connection and use it throughout the life of the application.It will be assumed that a single thread is accessing the database. These are allbad assumptions for a multiuser and multithreaded environment such as anapplication server.
Static Account Members 14.9.4.1
Most of the database code is in the Account  class. It consists of a static method,
getTopAccount() , which will establish a static connection to the database,
create the Account  table if need be, and load the top level account (deﬁned as
the account record with a null parent) if present or create it if not present.
The username is passed in as an argument. The username must exist in
the User  table. If it does not, an exception is thrown.
Joining the User 14.9.4.2
Two static methods are added that take a JDBC Connection  and a String  as
arguments. They are getUserIdByName()  and getUserByName() . The
String  is the username to look for. The ﬁrst method returns the id column
for that user. It returns zero (0) if the user doesn’t exist. The other returns a
User object, or null if the user doesn’t exist.
REVIEW 14.10
We brieﬂy examined choices of Open Source SQL database servers. Wedescribed how to set up PostgreSQL.325 14.10 Review
WHATYOU STILL DON’T KNOW 14.11
This is another chapter that represents a mere gloss of its topic. Visit your local
book megamart and just count the number of books on Oracle, MySQL, andPostgreSQL. Database servers and relational database design are very largetopics indeed. We have hardly scratched the surface. Our goal here has beenmerely to give you enough to get started. If you plan to use one of these prod-ucts, deﬁnitely take the time to download and read the ofﬁcial product docu-mentation (for both MySQL and PostgreSQL it is actually quite good), andthen take your time looking for after-market books that seem to meetyour needs.
RESOURCES 14.12
By no means have we read all the titles available on this topic, but we have readand can recommend:
• Leon Atkinson, Core MySQL , ISBN 0-13-066190-2.
• Paul DuBois, MySQL , ISBN 0-7357-0921-1.
• Korry Douglas and Susan Douglas, PostgreSQL , ISBN 0-7357-1257-3.
EXERCISES 14.13
Is this database fully normalized?13 If not, what would need to be done to
normalize it? What reasons might exist for not fully normalizing a database?
13. “Normalization” is a process of eliminating database redundancy and of theoretical
optimization of the data model. A decent introduction to the concepts may be found at
http://dev.mysql.com/tech-resources/articles/intro-to-normalization.html .Chapter 14 Storing the Data 326
Java provides a back-end-independent interface to databases called Java
DataBase Connectivity classes, or JDBC. We introduce the basics of the systemhere, and illustrate portability that makes it possible for our application toswitch between two different database back ends.
WHATYOUWILL LEARN 15.1
We will cover the basics of interaction with a database in Java. This involves
• Establishing and tearing down connections to a database
• Querying data in the database and reading the results• Performing other database operations that modify data, but do not return
data results
We assume that you are familiar with simple SQL constructs.
327Chapter 15
Accessing the Data:
An Introduction to JDBC
INTRODUCING  JDBC 15.2
For many real-world applications, there are copious amounts of data associated
with them. Programmers ﬁrst learn to store data into ﬁles, but serious applica-tions require a database. Java programs can connect to and query a databasewith the help of several Java classes which together make up the Java DataBaseConnectivity API, or JDBC.
With JDBC, your Java programs will be able to connect to databases any-
where on the network and to query data from the database with the simplesyntax that database programmers have been using for years—SQL.
JDBC provides an abstraction , a way to talk about the various aspects of
working with a database which is largely vendor-independent. Implementationsof JDBC can be, and are, built for many different databases and even otherdata sources, such as ﬂat ﬁles and spreadsheets.
The Linux environment offers several choices of databases, the two most
popular being MySQL and PostgreSQL. Both are Open Source projects avail-able with most major Linux distributions, as well as online for downloading.For many Java and Linux developers, however, the use of Java and Linux willinclude their development environment and the servers to which they deploytheir applications, but the database to which they connect will still be the cor-porate database. For most commercial applications this is an Oracle database,the industry leader, and due to its major presence in the marketplace we willuse Oracle in our examples as well.
NOTE
JDBC interfaces are available for almost any commercial database with any
signiﬁcant marketshare. See Section 15.9 for a URL that has a list of suchchoices. Most of what you will learn in this chapter will apply regardless of thedatabase you connect to.
To make even the most basic use of JDBC, you must understand three
basic operations:
• First, establishing and tearing down connections to your database server
• Second, querying data• Finally, reading up the results of that queryChapter 15 Accessing the Data: An Introduction to JDBC 328
These three operations correspond to JDBC objects for doing these very
things, namely the classes Connection , PreparedStatement , and ResultSet .
Let’s jump right in and look at some code. Example 15.1 will make a
connection to a MySQL database, prepare a query statement, execute the query,then read up the results.
Let’s also look at a similar example, but this time for an Oracle database
(Example 15.2). Notice how much is the same between the two examples, andwhich parts are different.
The only real difference between the two programs has to do with the
connections. Once the connection to the database is established, the rest of thecode is exactly the same—which is what you’d hope for in an abstraction. Thisis a good news for developers: “Learn once, use anywhere.”
MAKING  CONNECTIONS 15.3
The most complicated part of JDBC is establishing the connection. There areseveral ways to make a connection, depending on how much information aboutthe connection driver you want hard-coded into your application. We are goingto keep it simple and describe one straightforward way to connect.
The 
DriverManager  class is where our application goes to get its
connection to the database, as shown in our example. Many different JDBCdrivers can register with the 
DriverManager , and it can make the
connection to the kind of driver that you want based on the URL that youprovide in the call to
getConnection() . So where did our example register
anything with the DriverManager ? Well, it happened indirectly, via the
Class.forName(...).newInstance();  call. That loaded the class and cre-
ated an instance of it. The JDBC speciﬁcation says that when a Driver  class
initializes it must register with the DriverManager . So it happened “under the
covers,” in loading the driver class.
Another difference between the two examples deals with how the username
and password are supplied to the database. Both are supplied in the URL,though in different syntax. That syntax is at the discretion of those who imple-mented the JDBC driver for that particular ﬂavor of database. If we were toconstruct the URL at runtime, so that the user could supply a username andpassword dynamically, we’d want to remove the difference in how the URL isconstructed. To do that we could use a call to 
getConnection()  with a signa-
ture that includes the username and password as separate String  parameters:329 15.3 Making Connections
Example 15.1 Simple sample program using JDBC for MySQL
import java.sql.*;
public class
MyCon{  public static void  main(String [] args)  {    try {      // A simple connection example looks like this:
      Class.forName("com.mysql.jdbc.Driver").newInstance();      String url = "jdbc:mysql://host.domain.com/test"+
                   "?user=blah&password=blah";
      Connection conn = DriverManager.getConnection(url);      // query
      String mySQL = "SELECT id, pw FROM Users WHERE name = ?";
      PreparedStatement stmt = conn.prepareStatement(mySQL);
      stmt.setString(1, args[0]);
      // execute the query
      ResultSet rs = stmt.executeQuery();
      // read the results
      while(rs.next()) {          int id = rs.getInt("id");          String pw = rs.getString("pw");
          System.out.println("id="+id);
      }    } catch (Exception e) {        System.out.println("Exception: "+e);        e.printStackTrace();    }
  } // main} // class MyConChapter 15 Accessing the Data: An Introduction to JDBC 330
Example 15.2 Simple sample program using JDBC for Oracle
// import oracle.jdbc.driver.*;
import java.sql.*;
public class
MyCon{ public static void main(String [] args) {   try {     // A simple connection example looks like this:
     Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();     String url = "jdbc:oracle:thin:mydbusername/mydbpasswd"+
                  "@host.domain.com:1521:dbname";
     Connection conn = DriverManager.getConnection(url);     // query
     String mySQL = "SELECT id, pw FROM Users WHERE name = ?";
     PreparedStatement stmt = conn.prepareStatement(mySQL);
     stmt.setString(1, args[0]);
     // execute the query
     ResultSet rs = stmt.executeQuery();
     // read the results
     while(rs.next()) {       int id = rs.getInt("id");       String pw = rs.getString("pw");
       System.out.println("id="+id);
     }   } catch (Exception e) {       System.out.println("Exception: "+e);       e.printStackTrace();   }
 } // main} // class MyCon331 15.3 Making Connections
Connection conn = DriverManager.getConnection(url, username, password);
Getting this to compile and run requires you to have the appropriate
JDBC JAR ﬁles available. For Oracle, see your Oracle DBA, or see pages228–229 of Java Oracle Database Development  by David Gallardo. For MySQL,
it’s an easy download you can install from the Internet.
Downloading JDBC for MySQL 15.3.1
The JDBC implementation for MySQL is available for free from
http://www.mysql.com/downloads/api-jdbc.html .
The current version at the time of writing was mysql-connector-java-
3.0.9-stable.tar.gz  which you can unpack as follows:
$ gunzip mysql-connector-java-3.0.9-stable.tar.gz
$ tar xvf mysql-connector-java-3.0.9-stable.tar
That leaves you with a directory named mysql-connector-java-
3.0.9-stable  which contains a JAR ﬁle named mysql-connector-java-
3.0.9-stable-bin.jar  along with some directories (which are the contents
of the JAR, unpacked) and a few miscellaneous ﬁles.
From the readme ﬁle:
Once you have unarchived the distribution archive, you can install the
driver in one of two ways:
• Either copy the com and org subdirectories and all of their contents
to anywhere you like, and put the directory holding the com and org
subdirectories in your classpath, or
• Put mysql-connector-java-3.0.9-stable-bin.jar  in your class-
path, either by adding the full path to it to your CLASSPATH
environment variable, or putting it in $JAVA_HOME/jre/lib/ext .
Unlike JUnit, it is OK to put this JAR in the ext directory.
QUERYING  DATA 15.4
Back to our example. Do you remember the portion that built the query? Here
it is again:Chapter 15 Accessing the Data: An Introduction to JDBC 332
// query
String mySQL = "SELECT id, pw FROM Users WHERE name = ?";
PreparedStatement stmt = conn.prepareStatement(mySQL);
stmt.setString(1, args[0]);
If you’re at all familiar with SQL then you’ll recognize the SQL syntax
within the String mySQL . Whatever you want your query to be, just build it
as literal text. The query is “parameterized” by using the “ ?” character. Wher-
ever a “?” appears in the query string, you can substitute a value with the
setString()  method on the PreparedStatement  class.
There are a variety of setXXXX() methods where XXXX  stands for different
data types. Besides setString() , the most common ones are setInt() ,
setBigDecimal() , setDouble() , and setTimestamp()  which set the
parameter from an int, BigDecimal , Double , and Timestamp  classes, respec-
tively. The java.sql.Timestamp  class is basically a java.util.Date  aug-
mented for compatibility with SQL’s notion of TIMESTAMP . Read more
about it on the Javadoc page for java.sql.Timestamp , or read the
java.sql.PreparedStatement  page for more on the other set methods
available.
The two arguments to each of these set methods are the index and the
value that you want to substitute. The index is simply the count of whichquestion mark gets substituted, starting with 
1 for the ﬁrst one. Caution: The
parameters start at one, even though most other things in Java, such as Array s,
ArrayList s, and so on, are zero-based. So it’s not uncommon in code that
uses JDBC to see something like this:
setInt(i+1, args[i]);
NOTE
Building SQL queries out of String  literals is made easier in Java by a conve-
nient mismatch between the two languages. In Java, String s are delimited
by double quotes ( ") whereas in SQL literals are bounded by single quotes
('). Thus in Java, you can construct SQL queries that contain literal string
references without much trouble, as in:
String clause = "WHERE name != 'Admin'"333 15.4 Querying Data
If this all seems rather simplistic, well, it is. It may not be a very sophisti-
cated way of blending SQL with Java, but it is very effective. Notice that youdon’t get any syntax checking on the SQL query when you write your program,though it will throw an exception at runtime if you try to execute ungrammat-ical SQL. For this reason it is not uncommon to try out all your SQL before-hand, cutting and pasting the queries out of the SQL program that you use fordirectly talking with your database. Some developers even like to keep theirqueries in ﬁles, to be read at runtime. This has the added ﬂexibility (and risk)of being able to change the query without recompiling the code. Since the re-compile doesn’t provide any syntax checking on your query string anyway, itseems a reasonable way to go, provided that you properly write-protect the ﬁlescontaining the queries.
GETTING  RESULTS 15.5
Returning to our example, we see that we can execute the query on the
Statement  object and then get out the results:
ResultSet rs = stmt.executeQuery();
// read the results
while(rs.next()) {  int id = rs.getInt("id");  String pw = rs.getString("pw");
  System.out.println("id="+id);
}
The results of a query are returned in a ResultSet  object. The easiest way
to think of it is to consider it an iterator over the rows that result from thequery. In its simple form it is, like an iterator, a one-pass, once-through traversalof the data. Since the result set is iterating over rows, we need to get at the indi-vidual columns of results with a further method call on the 
ResultSet . You
can see that inside the while  loop of the example.
The query was built to retrieve the columns id and pw from our table.
The getInt()  and getString()  methods use those column names to retrieve
the data from the ResultSet .Chapter 15 Accessing the Data: An Introduction to JDBC 334
TIP
The case (UPPER or lower) of the column name strings is ignored, so you could
write ID and pW and it would work ﬁne. Some developers prefer, for example,
to use all-uppercase names of columns. We recommend using a consistentcase throughout to avoid confusing those who later have to read your code.
There is another form for each of those getXXXX() calls that takes as its
argument the column number rather than name. Since our query selected
"id, pw" , the id is column one and pw is column two, so we could have
written:
int id = rs.getInt(1);
String pw = rs.getString(2);
In addition to the get methods, ResultSet  also has some boolean
methods that will help your application ﬁgure out how far in the result setthe iterator has reached: 
isBeforeFirst() , isFirst() , isLast() , and
isAfterLast() . There is, however, no way to tell how big the result set is
directly from this simple result set.
More complex manipulation of the ResultSet  object is possible if we
create the PreparedStatement  with a different method call, one that lets us
provide additional parameters to specify this more complex behavior. Wecould use:
conn.prepareStatement(mySQL,
                        ResultSet.TYPE_SCROLL_INSENSITIVE,                        ResultSet.CONCUR_READ_ONLY);
which lets us specify a type of scrollable behavior and whether
(CONCUR_UPDATEABLE ) or not ( CONCUR_READ_ONLY ) the results set can be
updated.
Once we’ve built the prepared statement this way, we can move the itera-
tor forward or backward, to absolute (e.g., row 7) or relative (e.g., 3 rows back)positions. For a good discussion of this topic, see page 257 and the followingpages in the Gallardo book.
If you’re still hung up on the fact that you can’t get the size, in rows, of
the result set from our ﬁrst example, notice that you can now do that with thismore ﬂexible, “scrollable” result set. To ﬁnd its size before reading any data,335 15.5 Getting Results
position it afterLast() , then getRow()  to get the size, then position it back
to beforeFirst()  to be ready to read.
UPDATES , INSERTS , DELETES 15.6
Not every action on a database returns a ResultSet . Operations that create
the tables in a database, or those that modify, insert, or delete rows of data don’treturn rows of values. For those sorts of SQL statements, we don’t call
executeQuery() —we call executeUpdate()  instead. It returns an int giving
the number of rows affected by the execution. In the case of a CREATE TABLE
operation, it simply returns 0.
REVIEW 15.7
Connecting a Java application to a database is a key step in real applications.The mechanisms for doing that are varied and can be complicated. We’vepicked a single approach for connecting, to keep it simple and to highlight thesimilarities and differences between two different database implementations.
The rest of the conversation with a database depends as much on your
SQL skills as on Java skills. Java will take strings of SQL, which can be param-eterized, and, via JDBC calls, send them to be executed by the database. Theresults are like iterators; they can be retrieved, row after row, for further process-ing. Updates, inserts, and deletes are also easily done, with a few simple calls toprocess the SQL.
WHATYOU STILL DON’T KNOW 15.8
We’ve skipped over lots of topics to keep this simple. There are a variety ofways to connect to a database that we haven’t covered; the most important onemay be the use of a 
DataSource  instead of a DriverManager . As of Java 1.4.1,
the DataSource  is the preferred means of making connections to your
database. While it makes the code more portable (e.g., if you’re planning onmoving around, changing databases and/or database servers), it is more compli-cated to set up—there are more “moving parts” to get right. If you already havea Java Naming and Directory Interface (JNDI) service running, thought, it’svery straightforward (see page 254 and the following pages of Gallardo).Chapter 15 Accessing the Data: An Introduction to JDBC 336
We haven’t covered the basic Statement  class suitable for ﬁxed queries
with no parameters (instead we used PreparedStatement  which will work
with or without parameters), nor have we discussed the CallableStatement
class for calling stored procedures in the database. With what you know now,though, you should be able to glean enough information from the Javadocpages on these classes to do what you need, as they are similar to the
PreparedStatment  class.
RowSets  extend ResultSet  to include mechanisms for listening for data
changes and for JavaBeans functionality. But again, Javadoc information or acomprehensive book on the subject would be a good next step, now that youhave the basics in hand.
We haven’t covered the 
ResultSetMetaData  class, which provides a way
for you to get the names of the columns that come back from the query. Again,check the Javadoc for details on its use.
We also haven’t said anything about transactions, a key element in many
database applications. We’ll say more about that as we get into the enterprise-scale applications.
What we have covered should enable you to connect to a database, make
real queries, and process the results. There are more advanced techniques tolearn for special cases, but what we’ve covered here, accompanied by theJavadoc pages for 
java.sql.*  classes, should be enough to create useful, real
applications.
And of course there is always that other good teacher, experience. So go
try some of what you now know.
RESOURCES 15.9
If you are going to use an Oracle database, we highly recommend Java Oracle
Database Development  by David Gallardo (ISBN 0130462187, Prentice Hall
PTR), part of their Oracle Series. It includes several introductory chapters ondatabase design, SQL, and even PL/SQL. It then has a much more thoroughcoverage of JDBC topics, with examples speciﬁc to Oracle, than we can coverin our limited space.
A JDBC implementation for MySQL is available at
http://www.mysql.com/downloads/api-jdbc.html .
JDBC tutorial information, as well as lots of other JDBC information, is
available from Sun at http://www.java.sun.com/products/jdbc/ .337 15.9 Resources
If you are working with a database other than mySQL or Oracle, you
might want to check out http://servlet.java.sun.com/products/jdbc/
drivers  for a list of approximately two hundred JDBC implementations for
various databases.
EXERCISES 15.10
1. Write a program that connects to a database and, for each of the tables
speciﬁed on the command line, prints out the table name and the numberof rows in that table.
2. Using what has been covered in this chapter, write a simple non-GUI SQL
program, allowing the user to enter SQL statements, executing them, andshowing the results (like a simpliﬁed SQL/Plus program). Can you providesome simple editing of the SQL? Or can you implement escaping to anexternal editor, for example, vi?
3. Make it possible for the user of your SQL program to set and change the
connection URL—via an environment variable, command-line parameter,or even from within the program. Your SQL program will then be able toquery a variety of databases from various vendors.Chapter 15 Accessing the Data: An Introduction to JDBC 338
Part III
Developing
Graphical User Interfaces

Sometimes you gotta have a GUI; even we will admit that command lines only
go so far. When it comes to simple interactions with casual users, a GraphicalUser Interface is a great step forward . . . if it’s done well. The toolkit forbuilding such an interface with Java is called Swing. The original Java toolkitis AWT (A Windowing Toolkit), and is still in use, but much less attractive.We’ll take a quick look at some major pieces of Swing, and show a completeexample—a GUI for our budget application. After this example, you will havethe tools you need to construct some real GUIs on your own.
WHATYOUWILL LEARN 16.1
• The Swing GUI paradigm.
• A simple standalone Swing application.• Some basic Swing objects—buttons and labels.• A bit about layout managers.• A more complex object—the 
JTable .Chapter 16
Getting in the Swing of Things:
Designing a GUI for BudgetPro
341
A SIMPLE  SWING  PROGRAM 16.2
Let’s take a look at a very simple (in its function, not in its composition)
Swing program—a simple “Hello, world” that will appear in a window(Example 16.1).
Example 16.1 A simple Swing application
import java.awt.*;
import javax.swing.*;
public class
hw{  public static void  main(String[] args)  {    //Create the top-level container    JFrame frame = new JFrame();    JLabel hi = new JLabel("Hello, world.");    frame.getContentPane().add(hi, BorderLayout.CENTER);    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);    frame.pack(); // kicks the UI into action    frame.setVisible(true);
  } // main
} // class hw
Now compile this program and run it from the command line like this:
$ javac hw.java$ java hw
You should then see a small window appear, looking as in Figure 16.1.
Figure 16.1 “Hello, world” in a Swing windowChapter 16 Getting in the Swing of Things: Designing a GUI for BudgetPro 342
While this may look like a lot of extra junk just to say “Hello, world,” re-
member that a GUI is not just providing output in fancy windows, but alsomonitoring and responding to a wide variety of user inputs—a capability ofwhich we make little or no use in this example. But you can see some of thisextra capability—grab the lower left corner of the window frame and expandand resize the window.
STOMPIN ’AT THE  SAVOY ,ORTHE SWING  PARADIGM 16.3
When we say “Swing,” we generally mean the set of classes in the javax.swing
package and its subpackages (such as javax.swing.table ). The packages are
libraries of code that give you predeﬁned classes from which you can constructa GUI for your application. The programs you write will be written in Java,the syntax will look like Java, but there will be a lot of creation of classes, usesof interfaces, implementations of abstract classes, and a variety of method callsthat all deal with these Swing classes.
So what’s going on with all this stuff? What can we expect to do, see,
write? In most applications that a programmer writes, it is the job of the pro-grammer to design and write the code for the main execution path of the pro-gram. “Yes, every program has a beginning, middle, and an end” (with apologiesto “Seymour and his frozen yoghurt stand,” from Sesame Street). But it’s notquite the same with Swing. While it does have to have a beginning, middle,and end (these are, after all, basic Von Neumann architecture machines), thebig difference is that you do not have to write most of the control logic; itcomes as part of the Swing set.
Look at it this way. With Swing, as with other GUI toolkits, you don’t
have to write code to deal with the mouse, keyboard shortcuts, or paintingcharacters onto a graphical screen. You don’t have to write all the codeassociated with a button press, because, while it seems simple enough, a buttonpress is really a quite complex user interaction, involving repainting of thebutton’s border, possibly its shading or changing its icon, coordinating thatwith the mouse presses and releases, and deciding whether the releases happenwithin or without the boundaries of the button—all this and more, just for asimple button press. All this has been done for you, and packaged up intoSwing classes.343 16.3 Stompin’ at the Savoy, or The Swing Paradigm
So what is left for you to do? You have to:
• Construct the various items that will appear on the screen (in one or more
windows).
• Specify the location of these objects in the windows (layout).• Provide snippets of code that are the actions  associated with various events
(events happen, for example, when a button is pressed or a mouse isclicked). These actions are the guts of the code that make your applicationbehave how you want.
Remember, some behaviors are enforced by the GUI as part of standard
“look and feel.” Some things, like layout, are up to you to do well so long asyou keep within the standard UI guidelines. And some is just speciﬁc to yourapplication.
With that in mind, let’s walk through the “Hello, world” example for a
brief description of what each line does.
We begin with some 
import  statements, to resolve references to both
Swing and AWT classes. Swing is built on top of AWT, so some of the classesthat you use will actually be AWT classes. The biggest difference this makes toyou is in the 
import  statements.
We then begin our class declaration, followed by the deﬁnition of the only
method in this class, main() . Swing applications will typically have other
methods, but for our simple example we only need this one.
Now comes some real Swing. The creation of a JFrame  object is very im-
portant. In Swing we need to have containers to hold the objects that we wantto display. The 
JFrame  is a top-level container, one speciﬁcally meant to hold
other objects, but also meant to be the ﬁrst one of a containment hierarchy.(There are only three such top-level containers in Swing: 
JFrame , JDialog ,
and JApplet .)
Next we create a JLabel . It’s a Swing object meant to hold small amounts
of text. The text can be either constant or changing, but it’s not user-editable(that would be a different kind of Swing object).
We add the label to the frame, so that when the window (the 
JFrame )
appears, it will show our text inside.
The setDefaultCloseAction()  does what you think. When you press
the X in the upper right of the window frame (or wherever your window man-ager puts it), then not only will the window go away, but the program will stoprunning. (This is not the standard default value since 
JFrame s can containChapter 16 Getting in the Swing of Things: Designing a GUI for BudgetPro 344
other JFrame s, and for most frames you wouldn’t want closing the frame to
quit the program.)
When we “pack” the frame, that’s when the real magic happens. It kicks
off the GUI activity on a separate thread, but also packs the various pieces thatwe’ve added to the frame, sizing them as best it can to ﬁt into the frame, andsizing the frame to hold all the pieces. We see little of that with our example,which has only one label.
As an aside, 
pack()  is inherited from awt.Window , which describes the
“magic” thus:
A component is displayable when it is connected to a native screen resource.
A component is made displayable either when it is added to a displayablecontainment hierarchy or when its containment hierarchy is made dis-playable. A containment hierarchy is made displayable when its ancestorwindow is either packed or made visible.
So pack() -ing the frame connects it to a “native screen resource,” which
effectively gets the whole GUI thing going.
And now back to the business at hand.Finally, the 
setVisible()  call makes the window appear. Then the
main()  is done. In case you’re wondering, go ahead and put a
System.out.println()  message after the setVisible() . It will be printed
right away. The main()  has ended; the GUI activity is happening on another
thread.
SLOW, SLOW, QUICK-QUICK, SLOW:THE BASIC SWING  OBJECTS 16.4
Let’s take a quick look at a variety of Swing objects that you can use to build aGUI. Like any job of craftsmanship, it helps to be familiar with your tools.What you can build will be aided (and limited) by the tools with which youbuild, and by how familiar you are with them. Here are some pieces which canbe put together to make Swing GUIs:
button
A push button to trigger actions; can contain text and/or an icon.
radio button
A group of buttons where only one value can be chosen at a time.345 16.4 Slow, Slow, Quick-Quick, Slow: The Basic Swing Objects
check box
A choice of one or many of a small set of options.
combo box
A pull-down list of choices.
menu
A special case of a pull-down choice, a part of the border of a mainwindow.
label
A small amount of text, typically used to label other controls.
text ﬁeld
A simple display and/or entry of one line of text; think “ﬁll-in-the-blank”kinds of forms, password entry, and the like.
text area
A multiline display and/or entry of text, all in a single font format.
text pane
Same as text area, plus multifont support, image display, and more; reallymore like a word processor in a window.
list
Selection from a list.
table
A two-dimensional display—rows and columns of data.
tree
A display of hierarchically-structured data.
slider
A graphical control for selecting a value.
tool tip
A bit of text that appears over objects when the mouse hovers.
progress bar
A graphical display of progress.Chapter 16 Getting in the Swing of Things: Designing a GUI for BudgetPro 346
color chooser
A control for selecting colors from a palette.
ﬁle chooser
A window for interacting with the ﬁlesystem—selecting a directory or aﬁlename.
In addition to all these, there are various kinds of containers—objects
whose job is to hold and display the other objects:
panel
A simple container.
split pane
A container divided into 2 separate parts.
scroll pane
A complex control with scrollbars, used to hold objects larger than thedisplayable area.
tabbed pane
A complex control with tab buttons to select different panels.
toolbar
A container for holding objects (usually buttons) which can attach todifferent sides of a window, or separate from a window and stand alone.
LAYOUT  MANAGERS 16.5
Once you decided on all the graphical objects that you want to pack into yourGUI, there is still one major hurdle—where to place all the objects. This canbe one of the more challenging parts of GUI design because so many differentscreen sizes are available to the end user. How do you make your GUI lookgood to all (or most) of them?
Beginners often want to ﬁx their components to absolute locations—for
example, by sketching the GUI out on a piece of graph paper and then usingthose coordinates to ﬁx the location. But with a windowing display, the usercan grab a corner of the window and resize it. So, consider that piece of graphpaper—what if it just got stretched to twice the size? Do you want all the con-trols to just get bigger? Buttons need not grow larger, but it would be nice to347 16.5 Layout Managers
have additional space contributed to text areas. Consider a word processor:
When you resize its window you only want the text area to expand, not themenus and icons.
Layout managers are meant to address the issues of component placement
and sizing. Some are very simple, others are much more complex. All have theiradvantages and disadvantages. We’ll use a few in our example to give you a tasteof how they work.
BEYOND  ARTHUR  MURRAY : ACTIONS , LISTENERS , EVENTS 16.6
With any serious GUI comes a lot of advanced Java, especially constructs likeanonymous inner classes. These are useful when we implement actions for ourbuttons and listeners for user selections.
Keep in mind that there are three different time frames that we’re consid-
ering—compile time, construction time, and event time. Compile time is obvi-ous, and the compiler will complain if it cannot access what it needs due toscoping problems. Construction time is when the program constructs the GUIobjects for display in a window using the 
new and add()  calls as well as layout
managers. Event time is when the user presses a button or edits text in a ﬁeld,or when other external events change data.
GETTING  DOWN TO  CASES : DESIGNING A  GUI FOR BUDGET PRO 16.7
Our goal is a GUI for the BudgetPro application. We’ve already built a com-mand-line version, so we want to have the same general functions but with theconvenience and glamour of a GUI. The GUI will need to:
• Display the current account (name and dollars)
• Display the list of subaccounts that are part of this account• Provide a way to create a new (sub)account• Provide a way to move down into a subaccount• Provide a way to move up to the parent account
From this brief list we devise a simple display with a heading that contains
the current account and its dollar status, a table which lists the subaccounts,Chapter 16 Getting in the Swing of Things: Designing a GUI for BudgetPro 348
and, at the bottom of the window, some buttons—one for creating new ac-
counts and one for viewing subaccounts. Of course, we’ll also need a button toclose or exit the application. In order to move back up from a subaccount, we’lladd a button up in the header, an up-arrow, which will take us back to theparent account.
Now we could show you a hand-drawn sketch of what this UI might look
like, from our rough description, but we’ll cut to the chase and show you theﬁnished product. This is the GUI for the BudgetPro application, in three stages.First comes the GUI when we ﬁrst start up, with no subaccounts (Figure 16.2).
When the New Subaccount button is pressed, a dialog will appear to
collect the information need to create the subaccount, namely the new account’sname and the dollar amount to allocate to that account (Figure 16.3).
Figure 16.2 BudgetPro GUI: top account window
Figure 16.3 BudgetPro GUI: creating a (sub)account349 16.7 Getting Down to Cases: Designing a GUI for BudgetPro
Figure 16.4 BudgetPro GUI: viewing subaccounts
Finally, Figure 16.4 is a look at the main GUI window for BudgetPro once
several accounts have been constructed.
There is more to describe, but let’s walk through the code that builds this
GUI and explain the parts as we go. The complete listing is available online at
http://www.javalinuxbook.com . We’ll make reference to the line numbers
of the listing in Appendix B, but sometimes we’ll show excerpts of the code aswe go. You might ﬁnd it handy to have a listing of the code (on paper or inyour browser) as you read the next several sections.
Overview 16.7.1
We divide the work between two GUI classes: one for the main window and
the other for the dialog that will appear when we want to create a new subac-count. All of the other GUI elements will be either existing Swing classes ortheir extensions as anonymous inner classes in our code. (More on those later.)
So that means that we have four of our own classes that we’re working
with: two from the core of our application, 
Account  and User , and two from
the GUI side of things, BudgetPro  and AcctDialog . This will be reﬂected in
the package structure; we’ll put BudgetPro  and AcctDialog  into the
net.multitool.gui  package. This will effect both the location of the sourceChapter 16 Getting in the Swing of Things: Designing a GUI for BudgetPro 350
(to be put into net/multitool/gui ) and the package  statement on line 1 of
BudgetPro.java :
1 package net.multitool.gui;
Instance Variables 16.7.1.1
Take a look at the picture of the BudgetPro GUI. Count the GUI objects that
we need: four buttons, three labels, and let’s not forget the (empty at ﬁrst) tableof subaccounts. These are declared in lines 23–31. (Ignore lines 22 and 32for now, we’ll cover them later. Line 34 declares our dialog—more on thatlater, too.)
21   // gui components
22   private JFrame frame;   // needed by dialogs to root themselves23   private JLabel nam;24   private JLabel tot;25   private JLabel val;26   private JButton upton = new JButton(                       new ImageIcon("net/multitool/gui/back.gif"));27   private JButton creat = new JButton("new subaccount");28   private JButton view  = new JButton("view subaccount");29   private JButton clos  = new JButton("quit");3031   private JTable list;32   private AbstractTableModel model;3334   private AcctDialog askem;   // make once, use often
Main 16.7.1.2
Skip all the way to the last method of the class, line 289 and following. It’s the
main()  which gets run when we run this class. If we focus on the major piece
involved in getting our GUI together, it’s these lines:
JFrame frame = new JFrame("BudgetPro");
frame.getContentPane().add(status, ...);frame.getContentPane().add(list, ...);frame.getContentPane().add(buttons, ...);
We’re leaving out lots of intermediate text to emphasize the “real” work.
We create a JFrame , the outermost window object. We add into it all the other351 16.7 Getting Down to Cases: Designing a GUI for BudgetPro
GUI pieces—the status line, the table list of accounts, and the buttons. The
JFrame  is a bit odd here, in that you have to add objects to its content pane;
other container objects you can just add to directly. (We could have done the
getContentPane()  once, store the result in an intermediate variable, and do
the adds to it, but the efﬁciency gain is unimportant here because we only needto do this once, to get the GUI started.)
When we’ve got it built, we pack the frame, and make it visible:
frame.pack();
frame.setVisible(true);
That’s the basic core of what you need to do with any GUI: construct its
pieces, add them to the frame, pack the frame, and make it visible. Now you’reoff and running. The rest is just details.
Creating Pieces 16.7.2
The three pieces that we create—the status, the list, and the buttons—will each
package up their objects into an intermediate container, a 
JPanel , and return
that container to main() . This not only serves to chunk the problem into
fewer pieces (just three parts, not eight or more), but also helps with theformatting. Each piece can format its objects relative to each other. Then
main()  only has to lay out the three big pieces. So watch for each of the
create...()  methods to return a JPanel —a good approach when you build
your GUIs, too.
The JPanel s returned to main()  are just Swing objects. They, like the
buttons or labels (that we will see here shortly), just get added into other con-tainers. For 
main() , that container is the JFrame , the main window. Any
container will have a layout manager, the mechanism by which objects areplaced in that container. For 
JFrame , the default is the BorderLayout  manag-
er. When you call the add()  method on a container using a BorderLayout ,
you can specify (as a second parameter to the add()  method) where the
object being added will get placed. The constants deﬁned for placingobjects are 
NORTH ,SOUTH , EAST , WEST , or CENTER —hence the “Border” of
BorderLayout . There are also relative position values: PAGE_START ,
PAGE_END , LINE_START , and LINE_END  which are just like north, south, west,
and east, respectively, provided that the ComponentOrientation  is set to
LEFT_TO_RIGHT . (If you really want to know, check the Javadoc page for
java.awt.BorderLayout .)Chapter 16 Getting in the Swing of Things: Designing a GUI for BudgetPro 352
With a BorderLayout , if you put something in the NORTH  section, it will
appear across the top area of that container. If you resize the container (e.g.,drag the window edges), it will take extra space and use it for horizontal, butnot vertical, stretching. That is, the objects won’t get bigger than they need tovertically, though they will stretch wider. The same is true for 
SOUTH , but the
objects are at the bottom rather than top of the container. Putting somethingin 
EAST  or WEST  will move them to the left or right of the container. For these
two areas, though, space when resizing a window is added to the objects verti-cally, but not horizontally. Putting an object in 
EAST  or WEST  will let it get
taller, but not wider.
The CENTER  area, the default location if you use the add()  method with
no second parameter, will use extra space both vertically and horizontally.
Adding more than one object into a region (e.g., NORTH ) will result in only
the last item added being displayed. For this reason, too, one often builds inter-mediate containers to hold several objects. Then the single container object isadded to one of 
BorderLayout ’s regions.
Simple JLabel s 16.7.2.1
Let’s look at the simplest of the three pieces that we create for our GUI—the
top line of information indicating the status of the account. In lines 88–107we create this portion of the GUI.
 88   private Component
 89   createStatus() 90   { 91     JPanel retval = new JPanel();   // default: flow layout 92 93     upton.addActionListener(upAction); 94 95     nam = new JLabel("Account: Name"); 96     tot = new JLabel("Total: $"); 97     val = new JLabel("Remaining: $"); 98 99     retval.add(upton);100     retval.add(nam);101     retval.add(tot);102     retval.add(val);103104     setStatus();105106     return retval;107   } // createStatus353 16.7 Getting Down to Cases: Designing a GUI for BudgetPro
It consists of three parts, one for the account name, one for the total value
of the account, and one for the remaining value. Each part will be representedby its own label, using a 
JLabel  object. (We could have done the entire line
in one label, but this gives us a few more objects to manipulate.) Since we wantto group the labels together, we create a 
JPanel , which is a Swing container,
to hold all these objects. We’ll also add the JButton  object (the variable named
upton ).
A JLabel  is a simple Swing object. You can construct an empty one with
new JLabel();  but you can also construct a label with a String  as its initial
value, which is more useful. You can later change a label’s value with a call toits 
setText()  method, as you see here from line 117:
117     tot.setText("Total: $"+current.getTotal());
FlowLayout 16.7.2.2
The JLabel s are added to their JPanel , but with no position argument, unlike
the JFrame  and BorderLayout  used in main() . JPanel  has a different default
layout manager: It uses FlowLayout . With it, added objects are placed side by
side according to the window size. If the window is narrowed, they will simplyﬂow onto the next line. (You won’t see this behavior if you narrow the Budget-Pro window, but that’s because the 
JPanel  has been added to the JFrame ’s
NORTH  region, which means it’s no longer just a FlowLayout  that determines
sizes.) FlowLayout  is a layout that’s easy to use, but doesn’t give you much
control; it was just ﬁne for our purposes here.
BoxLayout 16.7.2.3
Another simple layout mechanism is the BoxLayout . It allows you to place the
objects like stacking boxes—though they can be stacked horizontally as well asvertically. Look at line 224:
224     retval.setLayout(new BoxLayout(retval, BoxLayout.X_AXIS));
Here we are creating a BoxLayout  object and associating it with our
JFrame  to manage its objects. When we create a BoxLayout  we can tell it that
we want to stack our objects horizontally (using either X_AXIS  or LINE_AXIS )
or vertically (using either Y_AXIS  or PAGE_AXIS ). Note that the BoxLayoutChapter 16 Getting in the Swing of Things: Designing a GUI for BudgetPro 354
object needs to be told about (i.e., given a reference to) the container (here,
retval , a JPanel ) whose objects it will manage, but that the container also
needs to be told (via setLayout() ) about the BoxLayout  object. A bit
confusing, perhaps.
Another handy part of BoxLayout  is the uses of rigid areas , invisible ob-
jects that do nothing except putting some space between objects. These rigidareas are deﬁned in pixels; for our GUI we create them with no height and awidth of ten pixels. They are held together using “horizontal glue” (see line 226)
226     retval.add(Box.createHorizontalGlue());
so that if the window is stretched, the extra space doesn’t get added betweenthe buttons, but only to the “glue” component, which absorbs all extra space.This keeps all the buttons to the right hand side of the window.
JButton s 16.7.2.4
The method named createButtons()  actually packs up the buttons into a
JPanel  to return to the caller. It begins like this:
218   private Component
219   createButtons(JRootPane root)220   {221     JPanel retval = new JPanel();   // default: flow layout222223     //Lay out the buttons from left to right.224     retval.setLayout(new BoxLayout(retval, BoxLayout.X_AXIS));225     retval.setBorder                (BorderFactory.createEmptyBorder(10, 10, 10, 10));226     retval.add(Box.createHorizontalGlue());227     retval.add(creat);228     retval.add(Box.createRigidArea(new Dimension(10, 0)));229     retval.add(view);230     retval.add(Box.createRigidArea(new Dimension(10, 0)));231     retval.add(clos);
The buttons themselves were created at the beginning of this class, in
lines 27–29, thus:
27   private JButton creat = new JButton("New Subaccount");
28   private JButton view  = new JButton("View Subaccount");29   private JButton clos  = new JButton("Quit");355 16.7 Getting Down to Cases: Designing a GUI for BudgetPro
Note that the constructor takes a String  argument—that’s the text that
will appear in the button. A button may also have an icon (image) in it (moreon that in just a bit). These buttons, as created, don’t do anything. Whenclicked on by the user, they will behave as real buttons (depress, then release),but no action will occur. Yet.
Actions for Buttons 16.7.2.5
We need to attach an action to each button, which is little more than a special
class to hold the code that you want to be run when the button is pressed. Wecan deﬁne the action as an anonymous inner class, so that the code is rightthere, inline with the rest of our code. Then we just attach that code to thebutton. Here is an example of that for our close button (the one labeled Quit ):
234     ActionListener closAction = new ActionListener()
235     {236       public void237       actionPerformed(ActionEvent e)238       {239           System.exit(0);240       }241     } ;
ActionListener  is an interface—a very simple interface that deﬁnes just
one method, actionPerformed() . You can take any class, have it extend
ActionListener , and then deﬁne an actionPerformed()  method for it.
That class can then serve as the action for a button. Here we just create an in-line class that does nothing but the 
actionPerformed()  method, and a pretty
simple one at that. It simply exits.
We could deﬁne the action elsewhere, and then just use the reference to
the action. If we had put the declaration of closAction  at a higher lexical
scope (out at the beginning of the class deﬁnition, for example) then other UIelements could also use this action. Of course, if you’re going to share youraction between GUI elements, be sure that you write the code to be reentrant.
Lines 244–267 (still within the 
createButtons() method) deﬁne the
action for the button labeled New Subaccount . Line 268 connects it to the
button. Don’t pay attention to the speciﬁcs of this action just yet. We’ll discussit in detail below, once we know more about the other objects. Here is howthat action is built:Chapter 16 Getting in the Swing of Things: Designing a GUI for BudgetPro 356
244     ActionListener creatAction = new ActionListener()
245     {246       public void247       actionPerformed(ActionEvent e)248       {249         Account child;250         // get the info via a Dialog (of sorts)251         if (askem == null) {252             askem = new AcctDialog(frame, "New Subaccount");253         } else {254             askem.clear();255             askem.setVisible(true);256         }257         String subName = askem.getName();258         String subAmnt = askem.getAmnt();259260         // if empty, assume the operation was cancelled, else:261         if ((subName != null) && (subName.length() > 0)) {262             child = current.createSub(subName, subAmnt);263             setStatus();264             model.fireTableDataChanged(); // notify the table265         }266       }267     };268     creat.addActionListener(creatAction);
We deﬁned the action for the View Subaccount  button (as we said you
could) elsewhere in the program. Its action is deﬁned in lines 54–75. Then online 271 we connect the action to the button. (We’ll get back to this button’saction, too, once we’ve discussed the 
JTable .) But after we’ve attached the ac-
tion, we also disable the button (line 273).
270     // function is to get selection from table and cd there
271     view.addActionListener(cdAction);272     // but it starts off disabled, since there is no data yet273     view.setEnabled(false);
In Swing, a button is either enabled or disabled. Enabled buttons are the
active ones on which you can click. Disabled buttons are grayed out and notresponsive to clicks. We can make a button either active or inactive with amethod on the button called 
setEnabled()  whose argument is a
boolean —true  to enable the button, false  to disable it. For example:357 16.7 Getting Down to Cases: Designing a GUI for BudgetPro
203             if (lsm.isSelectionEmpty()) {
204                 view.setEnabled(false);205             } else {206                 view.setEnabled(true);207             }
However, we start with the View Subaccount  button disabled until the
user has created and selected some subaccounts worth viewing.
The createStatus()  Revisited 16.7.2.6
There is one other button on the BudgetPro application, one that is not located
in this bottom panel of buttons. It’s the one on the status line. It, too, starts updisabled or grayed out—but it has an image in it. Any 
JButton  can contain
either text or an image, or both, but we’ve chosen to do just one or the otherin our application. We declare it like any other button:
private JButton upton;
but for its initialization we use a variation of the JButton  constructor, one that
takes an ImageIcon  object as its parameter:
upton = new JButton(new ImageIcon("net/multitool/gui/back.gif"));
Why do we do that all in one line? When you read it, you can certainly
think of it as two steps:
ImageIcon backup = new ImageIcon("net/multitool/gui/back.gif");
upton = new JButton(backup);
but we have no other need for the image, so we don’t need to keep a reference
for it in a variable. Some programmers prefer to write it out in two simple steps,as it is easier to read and perhaps to maintain. We’ve chosen to put it all in the
JButton ’s constructor to show that we’re making no other use of the image.
Which style do you prefer?
And what about a button that needs to contain both text and an image?
There is a constructor that takes both a String  and an ImageIcon . Then
you can set certain attributes of the JButton  to position the text
relative to the image. Look in the Javadoc of JButton  for the methods
setVerticalTextPosition()  and setHorizontalTextPosition() .Chapter 16 Getting in the Swing of Things: Designing a GUI for BudgetPro 358
JTable :The Workhorse of Data Display 16.7.2.7
Look again at our GUI application. In its center you see the table object:
This is a JTable . A simple way to create a JTable  is by passing in two
arrays to the constructor—ﬁrst, a two-dimensional array of data objects, andsecond, a one-dimensional array of column names. Notice that we said dataobjects; you need to use 
Integer  objects, not simple int types, and Double s
instead of double s. This allows the constructor to take any Object  type and
display it in the table via the object’s toString()  method.
While this form of a table is simple to use, it usually isn’t enough for all
the various things you’ll want to do with a table. Let’s look at the “industrialstrength” table initialization. For that, we need to talk about a table model.
Table Model 16.7.2.8
If you’ve ever taken an object-oriented design class, they’ve probably talked
about the Model/View/Controller design pattern. (If you haven’t taken such aclass, at least read a good book or two on the subject; it will improve your Javaprogramming skills.) A simpler version of this pattern is the View/Model pat-tern. What it describes is separating the core of the data from the frill of itspresentation— what you want to display versus how you want to display it. The
Model is the underlying data; the View is one particular way to show that data.
This View versus Model distinction is used to great effect with 
JTable
and TableModel  objects in Swing. What you need to do is create a
TableModel , then give that TableModel  to the JTable  via the JTable ’s
constructor. The TableModel  will give you all sorts of control over your
data—how, where, and when to get or update it. The JTable  will display it
and let you rearrange or resize the columns.
Rather than implement a complete TableModel  from scratch, Swing gives
us a helping hand with its AbstractTableModel  class. AbstractTableModel
is a partially implemented class which handles most of the grundy details—it359 16.7 Getting Down to Cases: Designing a GUI for BudgetPro
has most of the Table  interface implemented. You only need to implement
three methods:
public int getRowCount();
public int getColumnCount();public Object getValueAt(int row, int column);
Together, these three methods give a pretty good deﬁnition of a table: how
many rows it has, how many columns it has, and how to access the value at any(row, column) location. Notice, too, that the 
getValueAt()  returns an
Object , so you can’t return an int or float  or double . You can only return
an Integer , Double , and so on. Another option is to return a String  value
of the number that you want to display.
Let’s take a look at how the AbstractTableModel  was implemented in
the BudgetPro application. We begin at line 135, inside the createList()
method. The createList()  method is going to build the central portion
of our GUI, the table display. In order to do that, it creates an
AbstractTableModel  to give to the JTable  it creates on line 193. The
AbstractTableModel  is deﬁned inline as an anonymous inner class that
implicitly extends AbstractTableModel . This section of code is listed in
Example 16.2; follow along as we discuss it further.
(An aside: We could also have deﬁned this inner class elsewhere in the class
ﬁle, as a class which explicitly extends AbstractTableModel . However, as
with the icon we used in the JButton  example, we have no further need of the
object other than this single use, so we didn’t bother to create it as a standaloneentity. Both ways work, and are more a matter of preference or of how familiaryou are with the inline syntax.
In our implementation of the 
AbstractTableModel , we are going to in-
clude column headings, so we begin with a deﬁnition of Strings  for our col-
umn headings (line 137). Then the getColumnCount()  method, one of the
three methods that we need to implement in this class, is simply a matter ofreturning the size of this array (line 159). Lines 139–142 override the
getColumnName()  method, which isn’t one of the three that we must imple-
ment. But if we don’t, the default behavior from AbstractTableModel  will
return nulls, so we’d get no column headings. Instead, we use the columnnumber as an index to our array of column names.
The 
getRowCount()  method is almost as simple (lines 144–155).
The number of rows that this table should display for any account is theChapter 16 Getting in the Swing of Things: Designing a GUI for BudgetPro 360
Example 16.2 Deﬁning our AbstractTableModel
130   private Component
131   createList()132   {133     JScrollPane retval;134135     model = new AbstractTableModel()136       {137         private String [] columnNames = {"Account", "Owner", "Value"};138139         public String140         getColumnName(int col) {141           return columnNames[col];142         } // getColumnName143144         public int145         getRowCount()146         {147           int retval;148149           if (current != null) {150               retval = current.size();151           } else {152               retval = 1;     // testing only153           }154155           return retval;156157         } // getRowCount158159         public int getColumnCount() { return columnNames.length; }160161         public Object162         getValueAt(int row, int col) {163           Object retval = null;164           Account aa = null;165           // return "---";   // rowData[row][col];166           int count = 0;167           for (Iterator itr=current.getAllSubs(); itr.hasNext(); )168           {169             count++;170             aa = (Account) itr.next();171             if (count > row) { break; }172           } // next361 16.7 Getting Down to Cases: Designing a GUI for BudgetPro
173           switch (col) {
174           case 0:175                   retval = aa.getName();176                   break;177           case 1:178                   retval = aa.getOwner();179                   break;180           case 2:181                   retval = aa.getTotal();182                   break;183           } // endswitch184           return retval;185         } // getValueAt186187         public boolean188         isCellEditable(int row, int col)189         {190           return false;191         } // isCellEditable192       };193     list = new JTable(model);194     list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);195196     list.getSelectionModel().addListSelectionListener(197         new ListSelectionListener()198         {199           public void200           valueChanged(ListSelectionEvent e)201           {202             ListSelectionModel lsm = (ListSelectionModel)e.getSource();203             if (lsm.isSelectionEmpty()) {204                 view.setEnabled(false);205             } else {206                 view.setEnabled(true);207             }208           } // valueChanged209         }210     );211212     retval = new JScrollPane(list);213214     return retval;215216   } // createListChapter 16 Getting in the Swing of Things: Designing a GUI for BudgetPro 362
number of subaccounts deﬁned for the account. Since we’re deﬁning our
AbstractTableModel  as an inner class, we have access to the data in the outer
(BudgetPro ) class. We use the instance variable current , which refers to
whichever account we’re currently working with. A quick check of the Account
class shows that an Account  object can return the number of subaccounts
(or “children”) via its size()  method. So for our getRowCount()  method we
returncurrent.size() —provided that current  is not null . If it is null ,
we return 1 rather than 0, so that the table itself shows up and the headings
appear. (But it also means that getValueAt()  has to deal with requests for
data from the ﬁrst row when data may not exist.)
The core of what makes our data appear is the getValueAt()  method,
lines 161–185. Since each row represents a subaccount of the current account,we’ll just iterate through 
current ’s list of subaccounts until we reach the
row-th subaccount; for example, to get the third row we iterate over this list of
subaccounts until we get to the third one returned by the iterator’s next()
method. This is a bit “brute force,” to keep marching over the list of accounts,but for our small data size it’s not bad. (Another approach would be to changethe 
Account  class to provide a method to return the n-th subaccount. Then it
can use its internal knowledge of the way it stores subaccounts to provide amore efﬁcient access. Alternately, our extended 
AbstractTableModel  could
iterate over the list once and store the subaccounts in an array, for quicker accesslater; the trick here is that the array needs to be refreshed every time the accountchanges—so we took the simple approach.)
Once we have a row selected, we use the 
switch/case construct to choose
the correct data for the requested column. (See the listing in Example 16.2,lines 173–183.)
The return value for 
getValueAt()  is an Object.  Here’s one situation
where that is very useful. Refer to the deﬁnition of the Account  object and
you’ll see that getName()  returns a String , but getOwner()  returns a User
and getTotal()  returns an SAMoney  object. Since retval  is the most generic
type, Object , it can handle all three results.
But how does JTable  deal with these odd types? How can it display an
SAMoney  object when it doesn’t know what one is? There is both a simple and
a complicated answer to that question; we’ll try to give you both.
Renderers 16.7.2.9
The simple answer is that JTable , to display the data returned by
getValueAt() , will call the toString()  method on the object. As long as we363 16.7 Getting Down to Cases: Designing a GUI for BudgetPro
return an object which has a toString() , we’re ﬁne. Both User  and SAMoney
do have such a method, so they ﬁt ﬁne here.
The more complex answer has to do with why JTable  calls the
toString()  method at all. The JTable  uses, behind the scenes, a complex
table cell display mechanism, called a table cell renderer . A renderer is an object
that displays data in a certain way. Each table cell renderer returns a GUIcomponent, and if you don’t want to use the default renderer, you can deﬁneyour own table cell renderer for your table. This allows you to display almostanything you can imagine inside a table’s cell. The renderer acts as a templatefor those cells and will be called upon with the result of the 
getValueAt() ,
along with a few more parameters, so that it can build and display theresulting cell.
Let’s revisit our simple explanation above, in light of the concept of a
renderer. The default cell renderer for a 
JTable  uses just a JLabel . When
called upon, the default cell renderer is given the object returned by
getValueAt()  and the renderer ﬁlls its JLabel  by calling its setText()
method, passing in the result of toString()  on the given object. That’s how
toString()  got called on all our results. You can explicitly set a different
renderer using the setDefaultRenderer()  method on JTable .
In the Javadoc for Swing table objects we ﬁnd this interface:
public Component 
getTableCellRendererComponent(JTable table,                              Object value,                              boolean isSelected,                              boolean hasFocus,                              int row,                              int column)
This tells us that if we want to write a class which can act as a renderer, it
needs to implement this method. The method will be called with the valuereturned by 
getValueAt() , but the row and column  (and table ) will be
repeated here in case your renderer cares. For example, having the row and
column  would allow you to create a table with the third column of the table
in green—your method could check the column number, and if it is 2(columns are numbered 0, 1, 2, . . . ) set the background color to green for the
Component  that you would return.Chapter 16 Getting in the Swing of Things: Designing a GUI for BudgetPro 364
JLabel retval = new JLabel();
// ...if (row == 2) {    retval.setBackground(Color.GREEN);} else {    retval.setBackground(Color.WHITE);}return retval;
The full implementation of a renderer can also take into account whether
or not the cell is selected and/or has focus. This has to do with enabling mouseclicks to select either that particular cell or the row or column containing thatcell. You will likely want to render the cell differently (with a darker color,perhaps) to show that it has been selected. Whatever the renderer, you set upand then return a GUI component whose attributes (font, color, size, andso on) are used to display that cell.
We hope you get the idea—there is a lot more to renderers than we will
cover here. The Java Tutorial covers them more, and the Javadoc pages havesome introduction, too.
Similar to renderers are editors. When a user clicks in a table cell, the table
may allow him or her to edit its contents. A cell editor is needed to do that,and then your program needs to do something with the value that was entered.For our BudgetPro example we avoid this complexity by disallowing the userto enter anything into the table—our table is for display only. We do this onlines 187–191 by overriding the method 
isCellEditable()  to always return
false :
187         public boolean
188         isCellEditable(int row, int col)189         {190           return false;191         } // is CellEditable
Notice that the method is passed the row and column  means that you
could make some cells editable and some not.
Selection Listeners 16.7.2.10
Let’s look at the last part of the table that we implement for BudgetPro:
194     list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);365 16.7 Getting Down to Cases: Designing a GUI for BudgetPro
This call tells our table (list) that we want to allow the user to select only
a single row or column at a time. Valid options are:
ListSelectionModel.SINGLE_SELECTION
ListSelectionModel.SINGLE_INTERVAL_SELECTIONListSelectionModel.MULTIPLE_INTERVAL_SELECTION
The latter two allow the user to select more than one row at a time; multi-
ple intervals mean that the selected rows can be discontinuous. (Think“Shift+click” versus “Control+click” as the user action that selects these.)
So what will our program do, once the user has made a selection? The se-
lected row is a subaccount of the current account and we will allow the user todisplay that account and its subaccount, if any. Think of it as “changingdirectory” into that account, to look at or change its status.
For a table to take an action when a selection is made you need another
listener called a selection listener . We wrote:
196     list.getSelectionModel().addListSelectionListener(
197       new ListSelectionListener()198       {199         public void200         valueChanged(ListSelectionEvent e)201         {202           ListSelectionModel lsm =                                   (ListSelectionModel)e.getSource();203           if (lsm.isSelectionEmpty()) {204               view.setEnabled(false);205           } else {206               view.setEnabled(true);207           }208         } // valueChanged209       }210     );
Similar to how a table has a table model behind it, it also has a selection
model behind it. We don’t need to reimplement an entire selection model; wejust retrieve the default one from our table (
list.getSelectionModel() )
and add a listener to it so that it will notify us when something has changed.
The javax.swing.event.ListSelectionListener  is an interface with
only one method, so it’s easy to extend and override it in place, as we do, begin-ning at line 197. When called, it will be handed an event (
e) and we take the
source of that event and coerce it to a ListSelectionModel . That’s safe toChapter 16 Getting in the Swing of Things: Designing a GUI for BudgetPro 366
do here because it can’t be any other type of event—or we wouldn’t have been
called. All we’re doing with it is checking to see if the user just selected or dese-lected something. The only action we take is to enable or disable the viewbutton.
Deep inside the 
cdaction  object is a line that does the real action that
we’re after with our selection. It says:
61       int row = list.getSelectedRow();
This shows that a JTable  (list) has a method, getSelectedRow() , which
will return the row number of the row that the user has selected (that is,clicked on). This is all part of the action listener (deﬁned on lines 54–75 ofBudgetPro) for the View Subaccount  button.
54   private ActionListener cdAction = new ActionListener()
55   {56     public void57     actionPerformed(ActionEvent e)58     {59       // this is the action for VIEW subdirectory;60       // a "cd" into the subaccount.61       int row = list.getSelectedRow();62       // System.out.println("Row="+row); // DEBUG; TODO: REMOVE63       if (row > -1) {             // only if a row was selected64         String subname = (String) model.getValueAt(row, 0);                                                     // name column65         Account next = current.getSub(subname);66         if (next != null) {67           current = next;68           // System.out.println("cd to:"+current.getName());69           setStatus();70           // notify the table, too71           model.fireTableDataChanged();72         } // TODO: else infodialog or Beep.73       }74     }75   } ;
With the row number in hand, the actionPerformed()  method can
then use the row number to look up the account name. Since the account nameis in the ﬁrst column (numbered 0) of our table, we call 
getValueAt(row, 0)
to get that name. Then we give the name to the current account to look up thesubaccount (line 65).367 16.7 Getting Down to Cases: Designing a GUI for BudgetPro
As long as this returned Account  is not null (line 66), we can make it the
current account (line 67). At that point the display needs to be updated, so we:1) call our own 
setStatus()  method, to update the upper portion of our
GUI, and 2) tell the table that its data has changed (line 71).
Ready, aim, ﬁre! 16.7.2.11
A word about the fire...()  methods. They are not part of the TableModel
interface deﬁnition. Rather, they are part of the AbstractTableModel  class.
When a Java class is declared abstract it means that some methods need to beimplemented by those classes that use (extend) this class. An abstract class canstill have lots of intact, completely implemented methods, and that is the casewith 
AbstractTableModel .
The TableModel  interface deﬁnes methods for adding and removing lis-
teners. Any implementation of the TableModel  interface needs to support
these, and to notify any listeners when a change occurs. Such listeners will re-ceive a call to their 
tableChanged()  method when such a change occurs. But
it doesn’t tell us how such notiﬁcation is triggered. Moreover, the change event,when received by the listener, needs to deﬁne the extent of the change—just asingle cell? a whole row? a column? all columns? and so on.
The 
AbstractTableModel provides some methods for us to call when a
change in the data has occurred, methods that will then notify all the registeredlisteners (Table 16.1). Moreover, it has different methods depending on theextent of the change, so that the 
TableModelEvent , sent to all
TableModelListener s, can be constructed with the appropriate deﬁnition of
what has changed.
We used (line 71) the fireTableDataChanged()  since the content of
the table will change with a change of accounts, but the structure remains thesame. It is also a handy all-purpose method for you to use if you’d rather notadd the complexity of determining which rows have changed to your code.
Finally, remember that anyone who uses (extends) 
AbstractTableModel ,
including the DefaultTableModel  class, gets these methods for their use.
There are several other interactions that are supported by JTable s, ones
that don’t require you to do anything to provide them to your application’send user. When running the BudgetPro GUI, did you try to drag the columnheadings? You can also rearrange and resize columns. This is the default behav-ior for 
JTable s. You can turn it off, however, if you want your columns to
be ﬁxed:Chapter 16 Getting in the Swing of Things: Designing a GUI for BudgetPro 368
Table 16.1 AbstractTableModel  methods for data change notiﬁcation
When to use Method
Use when only a single cell has
changed.fireTableCellUpdated(int row, int col)
Use when the given range of rows(inclusive) have changed. fireTableRowsUpdated(int first, int last)
Use when the given range of rows(inclusive) have been deleted. fireTableRowsDeleted(int first, int last)
Use when the given range of rows(inclusive) have been inserted. fireTableRowsInserted(int first, int last)
Use when any/all of the row datahave changed, including thenumber of rows; columns havenot changed.fireTableDataChanged()
Use when the columns havechanged—that is, when thenames, number, or types ofcolumns have changed.fireTableStructureChanged()
An all purpose method, whereyou have to deﬁne the change inthe 
TableModelEvent  object.fireTableChanged(TableModelEvent e)
table.getTableHeader().setResizingAllowed(false);
table.getTableHeader().setReorderingAllowed(false);
The call is not made on the table directly, but rather on its header. We get
the JTableHeader  object with the call to getTableHeader() . There is much
more that could be said about JTableHeader  objects, but we will leave that
“as an exercise for the reader”; we’ve got to draw the line somewhere.
Scrolling 16.7.2.12
One last thing to mention about the createList()  method is how we deal
with tables that are larger than the viewing area. This is typically done with ascroll pane , a GUI element familiar to anyone who has used a word processing
program. Such scrolling is accomplished in Swing by putting the potentiallybig object, such as our table, into a 
JScrollPane  container.369 16.7 Getting Down to Cases: Designing a GUI for BudgetPro
Don’t think of it as adding scrollbars to the table. Rather, we’re putting
the table into a container that has scrollbars, and this container is smart enoughto retrieve and display the table’s header separately from the table (thus, thetable’s data scrolls but the header stays put).
Here, in one step, we create the 
JScrollPane  object and initialize it with
the JTable  that we want to be scrolled over.
212     retval = new JScrollPane(list);
Think of the JScrollPane  as a window with scrollbars through which
we can view the JTable . It has the convenient side effect of taking care of the
table’s heading for us. Without the scroll pane (e.g., if we just put the JTable
in a JPanel ) we’d get only the data and no heading, unless we also did a lot of
extra work using other objects and method calls.
It is possible to set the JScrollPane  to show horizontal as well as vertical
scrollbars. Those scrollbars can be made to be always or never visible, or visibleonly as needed. Setting a scrollbar to “never visible” effectively turns off anyscrolling in that direction. Use the 
setHorizontalScrollBarPolicy()  and
setVerticalScrollBarPolicy()  methods to set the value to one of:
JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED
JScrollPane.HORIZONTAL_SCROLLBAR_NEVERJScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS
Scroll panes can scroll over any GUI element—that is, any Component
object, not just tables. For more information on scroll panes, be sure to refer
to the Javadoc pages.
Dialogs 16.7.2.13
We have covered most of the code in the main GUI functionality—the way it
initially creates its parts and lays them out for display. We have examined the
JTable  in some considerable detail and looked at a few actions associated with
buttons. Now we need to get to the user interaction that allows us to create anew account.
Lines 244–268 of BudgetPro are the action that gets attached to the
button for creating a new subaccount.Chapter 16 Getting in the Swing of Things: Designing a GUI for BudgetPro 370
244     ActionListener creatAction = new ActionListener()
245     {246       public void247       actionPerformed(ActionEvent e)248       {249         Account child;250         // get the info via a Dialog (of sorts)251         if (askem == null) {252             askem = new AcctDialog(frame, "New Subaccount");253         } else {254             askem.clear();255             askem.setVisible(true);256         }257         String subName = askem.getName();258         String subAmnt = askem.getAmnt();259260         // if empty, assume the operation was cancelled, else:261         if ((subName != null) && (subName.length() > 0)) {262             child = current.createSub(subName, subAmnt);263             setStatus();264             model.fireTableDataChanged(); // notify the table265         }266       }267     };268     creat.addActionListener(creatAction);
Looking at the constructor for an Account , we see that we need three
things: a User  object (who will own the subaccount), a name for the new sub-
account, and the dollars to be allocated to this subaccount. To keep our exam-ple simpler, we will always use the current user as the 
User  for creating the new
Account . That means we only need some way to get the name and dollar
amount.
In the GUI world, this sort of information is typically provided in a dialog
box, a window that has blanks to be ﬁlled in (Figure 16.5). Then, when thedialog is closed, we can ask that dialog for the values that the user provided.
Swing has some ready-to-use dialogs for warnings or for simple single value
inputs. Since we want to get two pieces of data, we need to create our owndialog and display it.
What may seem strange about the 
createAction()  is that we only create
the dialog once (line 252), when the reference to it ( askem ) is null (line 251).
Thereafter, we simply clear out the previous values (line 254) and make thedialog visible again (line 255). That is all that it takes to use the dialog more371 16.7 Getting Down to Cases: Designing a GUI for BudgetPro
Figure 16.5 Dialog for creating a new subaccount
than once. We could throw away the dialog (or let it get garbage-collected) by
declaring it internal to the actionPerformed()  method. Then on each button
press the dialog would need to be recreated. Well, it’s slower to do it that way,and for a button click we want quick response—so we keep it around from oneuse to the next. When the user closes the dialog, all that really does is makes itinvisible; to reuse it, we make it visible again.
Notice, too, that in either case—creating the dialog or making it visi-
ble—control does not return to our method until the user has dismissed thedialog. That’s because it’s a modal  dialog, one that allows no other interaction
with the application until the user has responded to this dialog.
The dialog is dismissed (ﬁnished, ended, put away) simply by making it
no longer visible. For example:
73         dialog.setVisible(false);   // go away
New to our application, in AcctDialog , is the JTextField . On lines 22
and 23 we declare two of them, one for the account name and the other for theamount.
22     nameField = new JTextField(25);
23     amntField = new JTextField(9);
The size that we pass in to the constructor is the number of characters; it
sets a maximum for that ﬁeld, but also gives a clue to some layout managers asto how big the ﬁeld needs to be.
Speaking of layout managers, we use a few here, including a 
BoxLayout ,
to format the buttons relative to each other; a BorderLayout , to hold the
overall dialog; and a newer layout manager, the SpringLayout , which is new
as of Java 1.4. The Swing Tutorial provides a handy utility class for dealingChapter 16 Getting in the Swing of Things: Designing a GUI for BudgetPro 372
with SpringLayout s, and we make use of it to format the labels and text ﬁelds
relative to each other.
Similar to a JTextField  is a JPasswordField . It behaves just like a
JTextField  but instead of showing the characters that the user types it shows,
by default, an asterisk for each character typed, thereby hiding the passwordfrom passers-by. The character that is displayed can be changed to other thanthe asterisk—see the Javadoc page.
We do something new with our 
JLabel  in AcctDialog , too. We mess
with its font:
44     Font font = label.getFont();
45     label.setFont(label.getFont().deriveFont(font.PLAIN, 14.0f));
This gets the font from the label, however it might have been set, then
creates a new value for the font, keeping whatever font family it might havebeen, but making it 14 pt plain (not italic, not bold).
We also put HTML text in the 
JLabel :
40     JLabel label = new JLabel("<html><p align=left><i>"
41                    + "Enter the info to create a subaccount.<br>"42                    + "</i>");
All but the oldest versions of Swing will display the HTML text as it would
be formatted by a browser. Here, we make the text italic by means of the (now
deprecated) <i> tag, thereby undoing the effort to make it plain in lines 44
and 45.
One of the arguments to the dialog’s constructor is the JFrame  inside
which the dialog will appear. Lines 102 and 103 round out this picture, settingthe size of the dialog and anchoring its position relative to the parent frame.The last step for the constructor is to make the dialog visible, thereby passingcontrol to it.
REVIEW 16.8
When programming in Swing, we create the GUI objects and then let Swingdo the work of managing all the interactions. We created:373 16.8 Review
• Containers to hold GUI objects, such as JFrame  for our outermost win-
dow, JPanel  for an assortment of objects, and JScrollPane  for viewing
larger objects through a scrollable window.
• Labels ( JLabel  class) to hold either a short bit of text, or an image, or
both; it can even take snippets of HTML, for fancier formatting andcoloring of text.
• Buttons (
JButton  class) to which we attached actions—the code frag-
ments that get called when the buttons get pushed; a button could havetext and/or an image displayed in it.
• Actions—whether for buttons or selections (or other triggers yet to be
discussed), an action is the code that runs when the event (e.g., buttonpress) occurs.
• Text ﬁelds (
JTextField  class) to take small amounts of user input; our
application didn’t need the other types of text ﬁelds ( JTextArea  and
JTextPane ) useful for much more extensive user input.
•A  JTable  instance and its associated TableModel , SelectionModel , and
TableCellRenderer  which provide tremendous ﬂexibility and control
over table behavior and contents.
•A  JDialog  instance with custom content, to allow for multiple user in-
puts; the dialog comes and goes with its visibility; since it’s a modal dialog,when it is visible, it “hogs” all the user interactions; it is possible to makenonmodal dialogs, but our application didn’t need to.
•
LayoutManager s for our JFrame  and JPanel s, used to place objects
within a container with various algorithms for placement and expansion.
WHATYOU STILL DON’T KNOW 16.9
One could spend a career learning the vagaries of layout managers, especiallythe way they interact (e.g., a 
BoxLayout  inside the various regions of a
BorderLayout ). There is still an art to getting all the interactions right; it’s
often quickest to prototype the layout before you get too committed to a par-ticular layout. Also, putting objects into containers can help you subdivide thelayout problem into more manageable pieces. You can even go so far as to writeyour own 
LayoutManager , a topic we do not cover in this book.
The information that we display in the JTable  in our example is hierar-
chical. Swing provides a JTree  object for displaying such information. Like aChapter 16 Getting in the Swing of Things: Designing a GUI for BudgetPro 374
ﬁlesystem tree familiar to many PC users, the JTree  allows you to view multi-
ple levels at once and to open and close nodes, exposing or hiding their subtrees.It would make more sense to use the 
JTree  in our example, but then we
wouldn’t have been able to describe all the ins and outs of the JTable , a class
that is so useful in so many applications.
There are many more Swing classes that we haven’t discussed, though
many will behave similarly to those you have seen here. There are topics thatwe have avoided—for example, we haven’t talked about sorting 
JTable s by
clicking on the column headings, or about TableColumnModel s which add
another layer to JTable s. Some of what you would need to know in order to
use these Swing classes you can glean from the Javadoc pages. The informationthere should make more sense now, based on your experience with the variousSwing mechanisms that you’ve seen in these pages. For some other Swing topicsyou will have to search farther, and there are plenty of books on the topic—theclassic one, the The JFC Swing Tutorial  from Sun, being over 900 pages long.
Is it any wonder that we didn’t cover it all in this chapter?
RESOURCES 16.10
•The JFC Swing Tutorial: A Guide to Constructing GUIs  by Kathy Walrath
and Mary Campione, Addison-Wesley, also available online at
http://java.sun.com/docs/books/tutorial/uiswing/index.html .
• Our favorite bookmark within the Swing tutorial, the visual index of the
various Swing components, is at http://java.sun.com/docs/books/
tutorial/uiswing/components/components.html .
• If you want a better understanding of layout managers, we recommend
this tutorial by Jan Newmarch at Monash University in Australia:
http://pandonia.canberra.edu.au/java/xadvisor/geometry/
geometry.html . Don’t let the mention of AWT scare you away. Almost
all of the layout managers (except BoxLayout  and SpringLayout ) are
actually from AWT, and they all apply to Swing.
EXERCISES 16.11
1. Use different layout managers to create of the status area of the BudgetPro
main window, laying out the status information differently. Make the375 16.11 Exercises
button and account name information left-justiﬁed, and stack the Total
and Remaining  labels vertically on top of each other. Do you always need
to create new intermediate containers? Can you do it just with
GridBagLayout ?
2. Modify the BudgetPro program so that it displays a pop-up dialog when
you try to create a subaccount with more money than is available to thataccount.
3. Modify the dialog used for creating subaccounts, so that it also prompts
for the owner’s name. This can get more complicated if you want to allowonly valid user names. Instead, let any name be entered and create a 
User
object for it.
4. Modify the BudgetPro program and associated classes to allow for editing
of the values in the accounts, so that the user can change dollar allocations.Start with the ability to edit the value in the table (custom editor).
5. Replace the 
JTable  (and the View Subaccount  button) with a JTree
object.Chapter 16 Getting in the Swing of Things: Designing a GUI for BudgetPro 376
In which we discover that Swing is not the only GUI game in town. In so doing
we learn the rudiments of the Standard Widget Toolkit and we describe someof the key limitations of this alternative toolkit.
WHATYOUWILL LEARN 17.1
This chapter will introduce the basic classes of SWT, the Standard WidgetToolkit, which is an alternative GUI library developed mainly for the EclipseJava IDE.
1 Development of Eclipse has been led primarily by IBM.2
1.http://www.eclipse.org/
2.http://www.ibm.com/
377Chapter 17
Other Ways:
Alternatives to Swing
THE IBM SWT T OOLKIT 17.2
The Standard Widget Toolkit is a complete GUI library for Java, completely
independent of Swing and AWT. It is implemented as a library of nativemethods, so it cannot be ported to any Java runtime unless that platform hasthe native part of the SWT library implemented for it.
Another GUI Toolkit. Why? 17.2.1
The ﬁrst question one should ask, perhaps, is why create an alternative GUI?
Good question. The answer, according to the SWT FAQ,
3 primarily has to do
with execution speed and look-and-feel similarity to native GUI applicationson each platform.
If we may editorialize, we ﬁnd neither reason particularly compelling, al-
though the execution speed argument made some sense when the Eclipseproject started. Swing is unlikely to win any performance awards, even thougheach version brings some improvements in speed.
4 Still, these reasons do not
seem particularly compelling for such a large duplication of effort and function-ality.
Whatever the reason, SWT exists. SWT works by providing a thin abstrac-
tion layer over native GUI features. It is a small GUI library. It is implementedusing the Java Native Interface, so it requires that a native binary library beimplemented for your platform. Fortunately, such implementations exist forall platforms Eclipse runs on. So if you can run Eclipse, you can write and runSWT applications.
3.http://dev.eclipse.org/viewcvs/index.cgi/~checkout~/platform-swt-home/
faq.html
4. The question of speed in Java is a rather tired argument. If maximum speed is a primary
concern, Java is probably not your ﬁrst choice of a development language. In our experience,speed is something everybody says they need, but more often than not other considerationssuch as development time and error rate are much more important. Java is fast enough for vir-tually all MIS applications, and that is the market Java is squarely aimed at. Our computerskeep getting faster, disk drives and memory keep getting cheaper. The “resource” and “perfor-mance” arguments only apply to applications where experienced designers would already havechosen C or assembly language. Besides, with the JIT compilers in both Sun’s and IBM’s JDKs,a well-written Java application is often as fast or faster than some other compiled languages, atleast on the second run of the code.Chapter 17 Other Ways: Alternatives to Swing 378
Duplicated Effort. Why Cover It? 17.2.2
The next logical question is, “If you think SWT is unnecessary with Swing al-
ready there, why cover it in your book?” Also a sensible question. The answeris that there is very little published literature on this library (a notable exceptionbeing Chapter 10 of The Java Developer’s Guide to Eclipse  by Shaver et al., from
Addison-Wesley). Also, SWT provides the only fully functional GUI librarythat will work with the GNU Compiler for Java. As such, it is a major requiredcomponent if you wish to write native compiled GUI applications on Linuxsystems.
Of course, there is another reason. Anyone heavily into Linux is well aware
of the political and philosophical debate about Free Software and Open Source.If the core values of Free Software are critical for you, you should be aware thatthe IBM Common Public License
5 under which Eclipse (and thus SWT) are
published is a Free Software license. You get the source code, you may use itin your own products, and it imposes obligations similar to the GNU GPL,
6
but goes even further by requiring you to grant royalty-free licenses for anypatents you hold in derivative works.
So you might choose SWT (or not) for political or philosophical reasons.
Both authors still suggest Swing ﬁrst because it is the ofﬁcial Java GUI library.When an employer wants to know if you can write a Java GUI application, heor she almost certainly means a Swing application. Philosophy is great, but itmay not put the food on your table. You need to know that Swing is not FreeSoftware (and neither is either of the major Java SDKs), and SWT is FreeSoftware, but it is up to you to decide what best serves your interests.
7
5.http://www.eclipse.org/legal/cpl-v10.html
6.http://www.gnu.org/licenses/gpl.html
7. A lot of people couldn’t care less about the Free versus non-Free issue, but I must say that
many of my most interesting workplace discussions have arisen from this issue. It is the ﬁrstissue in my career that has had programmers talking about the balance between their personalinterests, their employers’ interests, and the public interest. Wherever you stand philosophically,I think it is good that programmers are thinking about the consequences of their work at allof these levels. I wish there were more pressure at all levels of business to consider and balanceall of these interests.379 17.2 The IBM SWT Toolkit
Portability: Better and Worse 17.2.3
How about portability? Well, it depends on what “portability” means to you.
If portability means “looks and runs the same on all platforms,” then Swingoffers better portability. If portability means “runs on all platforms for whichthere is a Java runtime,” then Swing offers better portability. If portabilitymeans “looks like a native application on all supported platforms,” then SWTis your choice. Make your selection accordingly.
TIP
The bottom line: If you only learn one Java GUI, make it Swing.
The Rest of the Chapter 17.2.4
The rest of this chapter will be devoted to describing the basic classes of SWT
by converting one of the application classes from the previous chapter fromSwing to SWT. We will not attempt to explain the operating principles ofGUIs. For an introduction to GUI programming, see the previous chapter onSwing. It introduces the concepts and programming principles for GUIprogramming in Java. SWT is functionally similar, although quite spartan,providing only basic windows, controls, and events.
Eclipse also contains a family of higher level user interface classes, known
collectively as 
JFace , that provide UI features such as dialogs, wizards, font
handlers, and images. We will not cover JFace  in this book.
SWT: Close to the Metal 17.2.5
SWT breaks some of the Java contract. For example, you cannot rely on garbage
collection to clean up SWT objects. Any SWT object you create with new must
be explicitly destroyed with a call to the dispose()  method. Why? Since SWT
is implemented with native methods, the low-level implementation allocatesnative OS data structures and objects that must be explicitly freed. Since theJava garbage collector cannot be relied upon to collect objects at a certain time(or ever, for that matter), these allocations can result in memory leaks andaddress space conﬂicts. As we shall see, however, SWT is well designed tominimize the amount of this that you need to worry about.
SWT is also close to the metal in the sense that it does not abstract the
underlying message-based event system that drives both X Window andChapter 17 Other Ways: Alternatives to Swing 380
Microsoft Windows. If you have ever written an X Window or Microsoft
Windows application in straight C (without a GUI framework library or classlibrary), you have written a 
main()  function that contains an event loop . SWT
actually puts simple method calls around this core message queue event loop.We’ll cover the details of this in the next section where we introduce the
Display  and Shell  classes.
“Hello, world” SWT Style 17.2.6
SWT consists mainly of classes that represent controls—such as buttons, text
areas, scrollbars, and so on—and layout managers which are much like layoutmanagers in Swing. But there are two other classes: 
Display , which models
the interface between your Java application and the underlying windowingsystem, and 
Shell , which effectively represents a single window.
The application in Example 17.1 is a parallel to the simple Swing program
in the last chapter (Example 16.1).
This simple program, like its parallel in the Swing chapter, is deceptive.
Sure, this is a lot of code to say “Hello, world” but it is because what we aresetting up here is an event-driven program that must respond to any validuser input.
Setting Up to Run an SWT Application 17.2.6.1
One advantage of Swing that we haven’t pointed out up to now is that it is part
of every Java runtime (well, not gcj; more on that later), so you have all the
classes on your classpath without any special setup. Not so with SWT. Theexact procedure for setting up to run an SWT application depends on whatdevelopment environment you are using.
There is an excellent set of directions for running an SWT application
under Eclipse in the SWT FAQ.
8 No matter what your environment is, there
is a basic series of steps:
1. Download the Eclipse SDK.
2. Install it.
8.http://dev.eclipse.org/viewcvs/index.cgi/~checkout~/platform-swt-home/
faq.html?rev=1.83content-type=text/html#standalone . Note that this link is to
the current revision in CVS as of this writing. You should take a look at the parent page to seeif there is a newer revision.381 17.2 The IBM SWT Toolkit
Example 17.1 A simple SWT application
import org.eclipse.swt.*;
import org.eclipse.swt.layout.*;import org.eclipse.swt.widgets.*;
/**
 * @author mschwarz * * Sample SWT "Hello, world" application */public class SWTHelloWorld {
  public static void main(String[] args) {
    Display disp = new Display();    Shell window = new Shell(disp);    window.setLayout(new RowLayout());    Label label = new Label(window, SWT.NONE);    label.setText("Hello, world.");    window.setSize(320,160);    window.open();
    while (!window.isDisposed()) {
      if (!disp.readAndDispatch()) {        disp.sleep();          }    }
    disp.dispose();
  }}
3. Extract the SWT JAR ﬁles.
4. Extract the SWT JNI ﬁles.5. Conﬁgure your development environment.
Let’s go over these in a bit more detail.
SWT was developed as a GUI library for the Eclipse project. It is distribut-
ed as part of Eclipse. There is no ofﬁcial standalone SWT package. The rightway to obtain SWT is to download and (at least temporarily) install the EclipseSDK. See Section 10.4 for details.Chapter 17 Other Ways: Alternatives to Swing 382
Figure 17.1 Running the SWT version of “Hello, world”
If you have followed our sage advice and downloaded the GTK
version of the Eclipse SDK, then you need to copy out the SWT JAR ﬁles.There are two ﬁles in the GTK version, and just one in the Motif version. TheGTK version’s ﬁles are 
swt.jar  and swt-pi.jar . They are both in the
eclipse/plugins/org.eclipse.swt.gtk_2.1.2/ws/gtk  directory. You
will need to have both of these JAR ﬁles on the classpath of any SWTapplication you are compiling or running.
Remember that SWT is a JNI library. You must also have the native Linux
shared libraries. These need to be made available to the Java native loader. Theﬁles you need are located in the 
eclipse/plugins/org.eclipse.swt.
gtk_2.1.2/os/linux/x86  directory. The .soﬁles there must be available to
any running SWT application. There are a couple of ways to do this. First, asdescribed in Section 5.7, you can set the 
LD_LIBRARY_PATH  environment
variable. You also can use the -D parameter for the runtime VM to set the
java.library.path  property.
If you want to, you can copy these ﬁles out of the eclipse  directory to
some other location and then erase the eclipse  directory with the lovable old
standby, rm -rf eclipse .
Oh, by the way, once you have compiled the sample code above and set
your classpath and Java library path correctly, running the application producesthe window shown in Figure 17.1.
Anatomy of an SWT Application 17.2.6.2
Before we launch into this discussion, we should point out that the Javadoc
documentation for all SWT packages is available as part of the Eclipse Platform383 17.2 The IBM SWT Toolkit
documentation.9 You might want to use that resource along with this
lightweight tutorial to ﬁll in the gaps and shortcuts.
It should not be too surprising that there are similarities between SWT,
AWT, and Swing. They all take different approaches to solving the sameproblem, namely how to control the complexity of a graphical event-drivenapplication. Because the problem is the same, there can’t help but be similaritiesbetween different solutions. By now you may have deduced that the 
Shell
class is an analog to the JFrame  class, and that SWT uses a system of layout
managers not too different from Swing. If so, you are on the right track andwell on your way to using SWT.
If we had to summarize the difference in approaches between SWT and
Swing, it would be that SWT tries to provide a small number of complexclasses, and Swing tries to provide a large number of simpler classes. Obviously,this is a generalization, but everybody generalizes. Sorry.
The 
Display  is a class that provides the link to the underlying GUI sys-
tem. Think of it as an abstraction of the interface to the windowing system. Inalmost all cases, an SWT application will have exactly one instance of 
Display .
The Shell  class represents a window. This class descends from a series of
abstract parent classes, so if you look at the Javadoc for Shell  and think it is
simple, be sure to drill down into those parent classes! We’ll discuss Shell  quite
a bit more as we go along.
PORTING  BUDGET PRO TO  SWT 17.3
The conversion of an existing application is a complex process. Always consider
rewriting from scratch. Still, it is worthwhile to show an application convertedfrom Swing to SWT, because it will emphasize the relationship betweenthe two.
We begin with the reobjecting. Starting with the 
BudgetPro  class, we
need to add an instance of the Display  class. Then the JFrame  becomes a
Shell . Likewise, the JLabel s become Label s. Then . . . Wait a minute. You
don’t need a blow-by-blow account. Maybe it would be simpler to show youwhat SWT classes roughly correspond to the equivalent Swing classes(Table 17.1).
9.http://download.eclipse.org/downloads/documentation/2.0/html/plugins/
org.eclipse.platform.doc.isv/reference/api/Chapter 17 Other Ways: Alternatives to Swing 384
Table 17.1 Major SWT widgets and their Swing equivalents
Description Analogous Swing
componentSWT widget
Display widget that sends notiﬁcation when
pressed and/or released.JButton Button
Composite widget that provides a surface for
drawing arbitrary graphics. May be used tocreate custom widgets.java.awt.Canvas ,
but see also
java.awt.Graphics2DCanvas
A cursor used as the insertion point for text. javax.swing.text.Caret Caret
Widget that permits the user to choose a
string from a list of strings, or to enter a newvalue into a text ﬁeld.JComboBox Combo
Widget that is capable of containing other
widgets.JPanel Composite
Composite widget that groups other widgets
and surrounds them with an etched borderand/or label.JPanel Group
Nonselectable widget that displays an image
or a string.JLabel Label
Selectable widget to choose a string or strings
from a list of strings.JList List
User interface widget that contains menu
items.JMenu Menu
Selectable widget that represents an item in a
menu.JMenuItemA ,
JCheckboxMenuitem ,
JRadioButtonMenuitemMenuItem
Nonelectable widget that displays progress to
the user.JProgressBar ProgressBar
Widget that represents a range of numeric
values.JSpinner Scale
Widget that represents a range of positive
numeric values. Used in a Composite  that
has V_SCROLL  and/or H_SCROLL  styles. The
mapping to Swing is not very tight here, since
JScrollPane  is like a combination of
Composite  and ScrollBar .JScrollPane ScrollBar385 17.3 Porting BudgetPro to SWT
Table 17.1 (Continued)
Description Analogous Swing
componentSWT widget
Window that is managed by the OS window
manager. A Shell  may be a child of a
Display  or another shell.JPanel Shell
Widget that represents a range of numeric
values. Differs from a Scale  by having a
“thumb” to change the value along the range.JSlider Slider
Composite widget that groups pages that can
be selected by the user using labeled tabs.JTabPane TabFolder
Selectable user interface object corresponding
to a tab for a page in a tab folder.Any JComponent TabItem
A selectable widget that displays a list of table
items that can be selected by the user. Rowsare items, columns are attributes of items.JTable Table
Selectable widget that represents a column in
a table.JTableColumn
or instance of
TableColumnModelTableColumn
Selectable widget that represents an item in a
table.TableCellRenderer  or
TableCellEditorTableItem
Editable widget that allows the user to type
text into it.JTextField ,
JPasswordField ,
JFormattedTextField ,
JTextArea ,
JEditorPane , JTextPaneText
Composite widget that supports the layout of
selectable toolbar items.ToolBar
Selectable widget that represents an item in atoolbar. JButton ToolItem
A selectable widget that displays a hierarchical
list of user-selectable tree items.JTree Tree
Selectable user interface object that represents
a hierarchy of items in a tree.MutableTreeNode TreeItemChapter 17 Other Ways: Alternatives to Swing 386
We are going to walk you through converting only one of the GUI source
ﬁles for the BudgetPro application. We will leave converting the rest as an exer-cise for you. We’ll talk about some of the entertaining differences between themodels. As you shall see, there is no clear “winner” here between SWT andSwing. Almost all technical choices—SWT versus Swing, Java versus C++,Emacs versus vi, or for that matter UNIX versus Windows—are tradeoffs. This
is no exception. There are things we like about SWT. For simple GUI applica-tions, we think it is easier to set up and use. We think it is easier to learn in itsentirety than Swing. Swing, on the other hand, is more complete, offeringclasses that will do more than SWT. So the best solution depends (as always)on your requirements.
Step 1: Convert the Class Members 17.3.1
We are going to tackle converting 
BudgetPro.java  from Swing to SWT. In
real life, this is an exercise you are unlikely to have to carry out. You will morelikely write your GUI applications from scratch. But going through the conver-sion provides a useful roadmap for talking about the architecture of SWT; itteaches you SWT in terms of a class library with which you are already familiar.
First off, we change the packages imported at the start of the ﬁle. Remove
all of the 
awt and swing  packages. If you are using an IDE, this should ﬂag
every single line of code that touches the GUI as an error. This can be a bighelp when you are doing a mass conversion like this. When you have killed allthe compile errors, you know you are well on your way to completing theconversion.
Replace the 
import  statements with the imports you are likely to need for
your SWT application. These are:
import org.eclipse.swt.*;         
// The static SWT class, which contains a number of constants.
import org.eclipse.swt.widgets.*; 
// The widgets library.  Almost all your display elements are here.
import org.eclipse.swt.events.*;  // Event handlersimport org.eclipse.swt.layout.*;  // Layout managers
We will go into these families of classes in more detail as we convert the
members and methods of BudgetPro.java .387 17.3 Porting BudgetPro to SWT
The next step is to convert the GUI members of the class from the Swing
classes to their SWT counterparts. Of course, SWT requires the Display  class,
which has no analog in SWT, so we add a Display  type member named disp
just ahead of the frame  member.
Next, we change the type of frame  from JFrame  to Shell . We could re-
name the member,10 but why add to our typing burden? The name is still clear
and meaningful, even if it doesn’t match the SWT name.11 There’s more to it
than just changing the type, however. The constructor call for the JFrame
doesn’t match any constructor for Shell . In fact, the Shell  constructor re-
quires a Display  object argument, and all subsequent constructors for widgets
and controls require a Composite  as an argument.
This is a key difference between Swing and SWT. Swing allows you to
build GUI components in arbitrary order at arbitrary times and then join themup to the GUI with an 
add()  method call. SWT instead requires that you link
your components up to the GUI element they belong to when they are construct-
ed. There are good reasons for this difference. Remember that SWT allocates
native objects and memory that Java’s garbage collector cannot recover. Becauseof this, SWT makes the promise that if you call the 
dispose()  method on any
SWT object, it will dispose of it and everything it contains. That allows you toclean up all resources from an SWT program by calling 
dispose()  on the top
level Display  object. If SWT allowed you to build GUI structures indepen-
dently and then graft them onto the hierarchy, it could not keep this promise.For this reason (amongst others) SWT objects are always built in a fairly rigidtop-down manner.
12
The most direct consequence of this is that we have to get rid of the con-
structors on these declarations. We’ll start construction in the main() . So, away
with the constructors for the GUI elements. We now need to change the
JButton s to Button s and the JLabel s to Label s. Again, if you are using a
dynamic IDE, you should see your error count skyrocket with these changes
10. If you are using Eclipse, this is easily done throughout your code with the Refactoring
feature.
11. All right, I’m being lazy. Write your own book if you don’t like it.12. In some ways, this greatly simpliﬁes SWT programs, but at the cost of some reusability.
With Swing, you could construct a panel or other GUI element and reuse it in many places.You can achieve the same thing in SWT by encapsulating such a construct in its own class andpassing in a parent to the constructor, but this is a bit more bulky and complex than theSwing way.Chapter 17 Other Ways: Alternatives to Swing 388
Key SWT Abstractions
Composite  is one of the key abstractions in SWT. Any control that may
contain other controls is a Composite .
Here’s a quick rundown of the key abstract classes and interfaces in
SWT, along with the basics of the functionality they embody:
•A  Widget  is the abstract superclass of all user interface objects in
SWT. At this level the methods exist that create, dispose, and dis-patch events to listeners. Every single class we use in this chapter,with the exception of event handlers and layout managers, is a
Widget .
•A  Control  is the abstract superclass of all windowed user interface
classes. This is almost all of the UI classes, either by direct descentor through classes such as 
Sash  or Scrollable . All constructors
for Control  classes require a Composite  parent class as a construc-
tor argument.
•A  Composite  is a Control  which is capable of containing other
Control s. One direct descendant of Control  which is very similar
to the Swing JPanel  is Group .
The relationships and the power of these abstractions will become
clear as you work with real-life examples.
(well, maybe not really skyrocket, since the import  changes have already
produced a lot of errors right off the bat).
Finally, we remove the AbstractTableModel  member. SWT has a
simpler (and more limited) table functionality that we will discuss later.
Step 2: Converting the main()  Method 17.3.2
The main (pun unintended) changes that need to be made here include allocat-
ing the SWT Display , changing from instantiating a JFrame  to a Shell ,
doing away with the Swing “look and feel” stuff (an SWT application alwayslooks like a platform-native application, that’s SWT’s main selling point), andreworking the construction of the GUI. We’ll explain that a little bit later.
For now, we take care of the simple changes. Remember that 
main()  is a
static method, so we do not have any nonstatic class members available right389 17.3 Porting BudgetPro to SWT
now. The original BudgetPro  constructor took a JFrame  argument, now it
will have to get a Display  and a Shell . So we have to allocate a local Display
and a local Shell . We also need to add the Display  argument to the
BudgetPro  constructor.
After this is done, we modify the call to the constructor to pass the local
Display  and Shell  to our class instance.
Next, we have to set a layout manager. The original application used the
Swing BorderLayout  layout manager. SWT doesn’t have such a critter.
Fortunately, the original used only the north, center, and south positionsof the 
BorderLayout . SWT has a simple layout manager called a
FillLayout  that puts its contained controls in a single row or column, equally
sized. Putting the three controls in a column will end up looking much likeusing the north, center, and south of a 
BorderLayout . So we change the call
to the frame.setLayout()  to pass in a new FillLayout  and add the
SWT.VERTICAL  attribute.
The SWT Class
The SWT class is pretty bare-bones. Its primary use is a library of named
constants used for attributes to Widget  (and other) constructors. You’ll
see such SWT. xxxx  constants all over your typical SWT application.
There are a handful of methods that the SWT class provides, all of
them static, including error() , which throws an SWTException ,
getPlatform() , which returns a string with the name of the platform
on which SWT is running, and getVersion() , which returns an int
version number.
It also has a subclass, called OLE, which is a Windows-only class that
provides ActiveX support for SWT. Obviously, such use is nonportableand non-Linux, so we won’t talk any more about it.
The next block of code in 
main()  sets the Swing look and feel. SWT has
nothing like this. All SWT applications look like native applications (we seemto be saying that a lot), so all of this code may be removed.
The next block of code calls methods on the application object (
app) that,
in the original, construct the three “chunks” of UI and add them to the frameusing the 
BorderLayout  attributes. Since, as we explained earlier, all SWT
controls must be explicitly joined to a parent control when they are constructed,Chapter 17 Other Ways: Alternatives to Swing 390
the separate create-then-add semantics used in the original will not apply. In
the next section, we will walk through converting one of these three createmethods. For now, it is enough to know that they will be changed to be meth-ods that return 
void  (no return value) and the calls to add()  may be deleted.
That completes the conversion of main() .
Step 3: Converting the GUI build()  and init()
Methods17.3.3
Lest you believe that this means the application is ready to run, just try
compiling what you have. Got a few errors yet, don’t we?
Let’s walk through converting the createStatus()  method and its relat-
ed methods. We’ll then brieﬂy discuss converting the createList()  and
createButtons()  concentrating on the details of the unique UI widgets used
in each.
Converting the GUI build()  Method 17.3.3.1
In BudgetPro, the top part of the UI is the status pane. It consists, basically, of
three labels. In the original application, this pane is constructed by the
createStatus()  method. In the original, it returns a Swing Component ,
which is then placed by calling add()  on a container managed by the caller.
In SWT, Widget s must be joined to their containers at construction , so we
must restructure this code a little bit. We create a Group  to hold our classes
together as a unit. We attach the group directly to the parent Shell  by using
the member variable frame . We set the layout manager to be RowLayout .
We then populate the Group . First, we add the Up button, which is only
enabled when in a subaccount. While SWT does support image buttons, wetake the shortcut of using the 
SWT.ARROW  style, bitwise-or’ed with the SWT.UP
style. Next, we populate the group with our Label s.
Note a change we will talk about some more below: The listener for
the Button  object called upton  is changed. The method is renamed from
addActionListener()  to addSelectionListener() . Event handling in
SWT is similar to Swing/AWT, but not identical, as we will see when we goover the rewrite of the actual event handler code a little later on.
These are the only changes we make to this method.391 17.3 Porting BudgetPro to SWT
CAUTION
If a Composite  has no layout manager, each Widget  in the Composite
must have its size and position explicitly set, or else their sizes will default to
zero, and they will all be invisible! Tremendous details on SWT layout managerclasses can be found in the article “Understanding Layouts in SWT” by CarolynMacLeod and Shantha Ramachandran on the Eclipse Web site.
13
Converting the GUI init()  Method 17.3.3.2
The setStatus()  method is called whenever the data in the core model
changes. Its job is to update the UI to reﬂect those changes. More speciﬁcally,it updates the status pane at the top of the UI. There are correspondingmethods for the list pane and the button pane.
Oddly, there are no changes in this particular method. The purpose of this
method is unchanged. It updates the 
Label s with the new numbers and checks
to see if the current Account  is the top level Account . If it is, the Up button
is disabled, otherwise it is enabled.
It turns out that all of the methods called on the UI classes in this method
have the same names and purposes in Swing and SWT. Don’t assume this willbe true in the other cases.
Reworking Event Handlers 17.3.3.3
Finally, in the litany of conversion, we have to modify the event handlers. In
this case, the only event of interest is when the Up button is pressed. Pressing
a Button  produces a Selection  event.
In SWT, there are several types of events. Generally, you specify a class
that will handle the event by calling one of the add...Listener()  methods
on the Widget  that you wish to process the event for. Examples of these
method calls include:
•addSelectionListener()
•addControlListener()
•addFocusListener()
•addHelpListener()
13.http://www.eclipse.org/articles/Understanding%20Layouts/Understanding%20
Layouts.htmChapter 17 Other Ways: Alternatives to Swing 392
•addKeyListener()
•addMouseListener()
•addMouseMoveListener()
•addMouseTrackListener()
•addPaintListener()
•addTraverseListener()
There are others. SWT naming conventions deﬁne an interface for
which each add...Listener()  method is named. For example, there is a
SelectionListener  interface. Many such interfaces have multiple methods,
each to handle a distinct kind of event; for example, the MouseListener  inter-
face deﬁnes separate methods to handle a button down event, a button releaseevent, and a double-click event. As in Swing, it is common to implement eventlisteners as anonymous inner classes that implement the listener interface.However, since it is common to be interested only in some (or even only one)listener event, it is annoying to have to implement the full interface, since youhave to provide method implementations for every event. For this reason, SWTalso provides classes called adapters  that implement “do-nothing” methods for
every listener event. These also follow a naming convention. For example, theadapter for the 
MouseListener  interface is a class named MouseAdapter ; the
SelectionListener  interface has an adapter named SelectionAdapter ,
and so on.
For us, this means that we are going to create a reference to an anonymous
inner class that implements the SelectionListener  interface by extending
the SelectionAdapter class. This is probably the weirdest common code
construct in Java. Let’s take a direct look at that method (Example 17.2).
If you can correctly answer the following question, then you can be reason-
ably assured that you do, in fact, understand what is going on here. Would theprogram compile and run correctly if the type of the 
upAction  variable were
changed to SelectionAdapter ? The answer is in the footnote.14
14. Yes, it would. The reason is that the addSelectionListener()  method takes an argu-
ment of type SelectionListener . Both SelectionListener  and SelectionAdapter
are of that base type. Aren’t Object s wonderful?393 17.3 Porting BudgetPro to SWT
Example 17.2 The uptonButton  event listener class reference declaration
private SelectionListener upAction = new SelectionAdapter()
{  public void widgetSelected(SelectionEvent e)  {    // this is the action for UP arrow icon;    Account next;    next = current.getParent();    if (next != null) {      current = next;      setStatus();    }   }} ;
Completing the Conversion of the BudgetPro  Class 17.3.4
To keep this book to a reasonable size, we are always trying to avoid covering
the same ground more than once. We won’t walk you through the details ofconverting the 
createList()  and createButtons()  methods as we did with
the createStatus()  method, but we will talk about the details of converting
to SWT of some of the classes used in those methods.
The Table ,TableColumn , and TableItem  Classes 17.3.4.1
Without a doubt, the biggest change the BudgetPro  class requires in order to
convert from Swing to SWT lies in the table pane of the UI. The Table  class
is the root of tables in SWT. The TableColumn  class deﬁnes the names and
headers of the columns. TableColumn  constructors must have a Table  as their
ﬁrst argument, followed, as usual, by a numeric style speciﬁcation. The
TableItem  class deﬁnes a row in the Table . As with TableColumn , the
TableItem  constructor must have a Table  as its ﬁrst argument, followed by
a numeric style.
If you think about it, this is an extension of the same design philosophy
that requires that all constructors name their parent Composite . While Swing’s
abstract table model permits a nice separation between the data and the presen-tation, implementing a similar system in SWT would violate its strict containersemantics.
You will need to follow the basic rewrite process outlined above and you
will have to squish the Swing abstract table model into the simpler SWT tableChapter 17 Other Ways: Alternatives to Swing 394
model. This will be your biggest challenge. Go to it. It is a great way to learn.
Of course, you can also just download the complete SWT application from thebook Web site.
15
Completing the Conversion of the Application 17.3.5
Completing the conversion of the BudgetPro  class does not complete the
conversion of the entire application. The AcctDialog  class must also be con-
verted. Use the same techniques we described here to convert that class as well.(Or, again, just download the complete SWT application.)
Closing Thoughts 17.3.6
Our overall impression is that SWT is more easily comprehended in its entirety
than Swing. It may be easier to learn SWT ﬁrst, since Swing’s core model ismore complex but more powerful. But SWT and Swing weren’t developed inthat order and Swing is still much more widely used.
16
For many GUI applications, our feeling is that it may be faster to write in
the SWT idiom. The problem lies in that SWT’s model has limitations thatSwing’s does not. Notably, SWT GUI elements are in a single rigid tree struc-ture. It is not possible to have a factory class that constructs a GUI elementsuch as a dialog box which is passed up to the caller to be grafted into place ona GUI. Instead, the parent element must be passed in, so all GUI elements be-long to the single tree from the moment they are created. Also, by introducingobjects that cannot be garbage-collected, SWT brings into your application thepossibility of a class of bugs that Java otherwise eliminates.
Moreover, while converting a Swing application helped give this chapter
shape, we would, in general, prefer that an application be designed with its GUItoolkit in mind. You would likely make slightly different design decisionsdepending on which style of the GUI you choose.
15.http://www.javalinuxbook.com/
16. A gut feel—not based on any real statistics.395 17.3 Porting BudgetPro to SWT
SWT AND GCJ 17.4
Up to now, we have told you again and again that SWT will work with gcj.
But no Linux distribution with which we are familiar provides SWT with gcj
out of the box. So how do you get SWT to play nice with gcj? Unfortunately,
you have a bit of work to do. Fortunately, the work is not particularly difﬁcult.
Before we proceed, we must acknowledge those who have been there be-
fore. We, too, had heard about SWT’s usability with gcj but we had never
bothered to try it because there was no documentation on how to do it. Weﬁrst made the attempt thanks to a great IBM developerWorks article by KirkVogen entitled “Create Native, Cross-Platform GUI Applications.” Follow theURL
17 to the information that enabled us to write this chapter.18
SWT source code is included in the Eclipse SDK download. See Sec-
tion 10.4 for details on where and how to download and install Eclipse. Onceyou have Eclipse, you need to get your mits on the SWT source code. Whatwe will do is compile the SWT source into a shared object ﬁle that we can linkto any gcj application.
We’re assuming that you’ve got gcj installed. We’re assuming that you’ve
unzipped the Eclipse SDK. We’re assuming you’re still reading the book. Wehave to make that assumption. The ﬁrst thing you need to do is to unzip theSWT source code. It is found in 
ECLIPSE_INSTALL/plugins/org.eclipse.
platform.linux.gtk.source_2.1.2/src/org.eclipse.swt.gtk_2.1.2/ws/gtk
. If you are using (as we recommend) the GTK version of Eclipse,19
there are two ﬁles in there: swtsrc.zip  and swt-pisrc.zip .
Once you have these unzipped, you have to compile the code with gcj.
There are two different patterns these ﬁles follow. Files that do not containnative methods are compiled with a command line that looks like this:
17.http://www-106.ibm.com/developerworks/library/j-nativegui/
18. Please note that Kirk’s article provides links to additional documentation and to an ant
buildﬁle that automates the steps we are going to teach you manually here. We certainly didn’twant to steal anything from Mr. Vogen (or from IBM—scary!), so we will instead direct youto the (copyrighted) IBM Web resources. The article is worth checking out. It can save yousome time over our version of the process. It is up to you.
19. Be aware: As helpful as Kirk Vogen’s article and ﬁles are, they are written to an old version
of gcj and they assume you are using the Motif version of Eclipse. His scripts work only with
the Motif version.Chapter 17 Other Ways: Alternatives to Swing 396
$ gcj -c SomeClass.java -o SomeClass.o
Files that do contain native methods are compiled with a command line
that looks like this:
$ gcj -fjni -c SomeClass.java -o SomeClass.o
That said, it does no harm to compile a source ﬁle that has no native
methods with the -fjni  ﬂag. This gives us a quick and dirty way to make our
library ﬁle.
$ find . -name "*.java" -exec gcj -fjni -c {} \; -print
Remember, you are in UNIX-land. Leverage your tools! In this case, the
advantage of using ﬁnd is that, should the SWT source change (classes added
or removed), our “compile process” will handle it. Obviously, you can take thisin more sophisticated directions with make  or ant. But this will get the job
done for us for now.
That will compile all of the SWT source.
20 Next, we want to assemble all
of the object ﬁles produced into a shared object.
$ gcj -shared -o swt.so $(find . -name "*.o" -print)
Once again, we leverage our tools. This time, we use bash  execution
quotes around our ﬁnd command to get all of the .o ﬁlenames added to our
gcj command that builds the shared library. For our ﬁnal trick, we will compile
our HelloWorld  class from the start of this chapter with gcj and our new SWT
shared library:
20. When we did this with Eclipse 2.1 GTK and gcj version 3.2.2, we had one compile error
where the return type of the org.eclipse.swt.custom.TableCursor.traverse()
method was void, whereas the Control.traverse()  method (from which
TableCursor  inherits) was boolean. So we hacked it. We changed the return type of
TableCursor.traverse()  to boolean  and had it return true . We didn’t test to see if this
was right! Use at your own peril!397 17.4 SWT and GCJ
$ gcj -classpath=~/eclipse/plugins/org.eclipse.swt/swt.jar:\
~/eclipse/plugins/org.eclipse.swt/swt-pi.jar -c HelloWorld.java$ gcj -main=HelloWorld -o HelloWorld Hello.o swt.so$ export LD_LIBRARY_PATH=.:~/eclipse:\~/eclipse/plugins/org.eclipse.swt/ws/gtk$ ./HelloWorld
Et voilà! You have the HelloWorld application! Again. But now it is an
executable binary. Enjoy.
REVIEW 17.5
Compared to Swing, SWT is a somewhat simpler GUI library. Unlike Swing,it is Free Software and Open Source. It provides a full GUI library for use withgcj. It is part of the Eclipse project. It uses native methods that require calls to
dispose of allocated objects. It has a rigid hierarchy that requires that lowerlevel GUI components be linked to their parents when they are constructed.This means there are some limitations on how applications may be constructed.SWT is much less commonly used than Swing. Swing is the lingua franca ofJava GUIs. SWT is deﬁnitely worth knowing, but if you want your skills to bemarketable, it is probably best to start with Swing.
WHATYOU STILL DON’T KNOW 17.6
We just scratched the surface of SWT Widget s. There are a bunch we haven’t
covered.
RESOURCES 17.7
• SWT was written to support the Eclipse IDE. Eclipse is at
http://www.eclipse.org/ .
• An introduction to SWT can be found at the same site:
http://www.eclipse.org/articles/Article-SWT-Design-1/
SWT-Design-1.html .
• Part 2 of the same article is at http://www.eclipse.org/articles/
swt-design-2/swt-design-2.html .Chapter 17 Other Ways: Alternatives to Swing 398
• The full list of Eclipse technical articles (including those on SWT) may
be found at http://www.eclipse.org/articles/index.html .
• A good introductory article can be found on the Developer.com
Web site: http://www.developer.com/java/other/article.php/
3330861 .
• As always, consider using Google.com  to ﬁnd additional information.
• In dead-tree form, Chapter 10 of the book The Java Developer’s Guide to
Eclipse  by Sherry Shavor et al. (Addison-Wesley, ISBN 0-321-15964-0),
also provides an introduction to SWT.
EXERCISES 17.8
1. Complete the conversion of the BudgetPro  class.
2. Complete the conversion of the entire BudgetPro GUI application.3. While you have Eclipse installed, follow the instructions to unpack the
SWT examples. In particular, run the 
ControlExample . This is an appli-
cation that demos all the major Widget s, while giving you the ability to
apply most (if not all) of the style values to them dynamically. It is like a
Widget  browser that can get you familiar with the look and feel of SWT
Widget s quickly. Run it. Play with it. Become friends with it. Also, remem-
ber you have the source code for this application. Want to know how tocode a given 
Widget ? Look!399 17.8 Exercises

Part IV
Developing
Web Interfaces

Java was ﬁrst seen by many programmers as a way to enhance Web pages by
adding some actual code to them, to be run in the browser. But the real powerof Java was unleashed at the other end of the client-server connection, whenJava was pressed into service on the Web server—to help serve up pages,sometimes of its own making, to Web clients all across an enterprise.
WHATYOUWILL LEARN 18.1
• What servlets are.
• How to write a simple servlet.• More complex servlet matters (servlet state).• An example—our BudgetPro application as a servlet.
403Chapter 18
Servlets:
Java Pressed into Service
SERVLETS : PROGRAM -CENTRIC  SERVER -SIDE DOCUMENTS 18.2
Servlets are Java programs that are run by a Web server. At its simplest, a servlet
is a Java class that is invoked by a Web server (referred to in some contexts asthe servlet’s container ). A servlet is run not from the command line as a regular
Java program, but by visiting its URL. Point a Web browser at a servlet’s ad-dress and the Web server (the one which serves up that address) will run theservlet and send its output back to the browser (see Figure 18.1). So you cansee that typical output for a servlet is HTML—what better thing to send toa browser?
Now, more and more servlets are using XML as their output and then
converting it to HTML via XSLT stylesheets, but we’re trying to keep thingssimple here.
In their most generic form, servlets are classes which implement the
Servlet  interface. That means that they provide three methods:
•init(ServletConfig config)
•service(ServletRequest request, ServletResponse response)
•destroy()
The init()  method gets called when the Web server starts up the class.
(Think of the init()  method as a constructor; Java doesn’t allow constructors
to be deﬁned for interfaces, so init()  plays that role.)
The destroy()  method gets called whenever the Web server takes the
servlet out of service. This might happen when a system administrator wantsto shut down the system, or shut down just that particular Web service.
Naturally, the 
service()  method is the method that gets called whenever
requests for this servlet arrive at the Web server. The server knows that the re-quested service is provided by this servlet, so it packages up certain data andsends it along as a request to the servlet. Thus, servlets can provide data in thisgeneric request/response kind of protocol. Simple, but vague, right now.
Servlets get a bit more interesting when we look at the 
HttpServlet  class.
This class extends Servlet  and adds two more methods that must be
implemented:
•doGet(HttpServletRequest request, HttpServletResponse
response)Chapter 18 Servlets: Java Pressed into Service 404
HTTP requestLinux system
Web server
Servlet class
PC
Web browserHTML HTTP requestLinux system
Web server
Servlet class
PC
Web browserHTMLFigure 18.1 Servlet diagram
•doPost(HttpServletRequest request, HttpServletResponse
response)
We hope that you’ve noticed the similarity between doGet() , doPost() ,
and the previously mentioned service()  method. More on that in a minute.
PERSPECTIVE 18.3
To better understand the interaction with servlets, let’s consider the requeststhat come to a Web server. Web servers serve up Web pages. At ﬁrst (in theearly days of the Web) that just meant simple ﬂat HTML ﬁles, along with afew image types. A Web browser would send a request to a Web server in theform of a URL, such as 
http://www.dom.com/file.html , which would be
sent to the Web server named www at the dom.com  domain. It would look up
the ﬁle named file.html  in its directory and send it back to the browser.
That approach worked ﬁne, and still does today. But this only covers static
Web pages, ones whose content doesn’t change. Users want to get at lots moreinformation today, not all of which has been embodied in static Web pages.405 18.3 Perspective
Rather than require fancier browsers with more dynamic querying or other ca-
pabilities, Web servers became smarter and were able to talk to other programsthat would generate HTML on the ﬂy and send it back as the response to anincoming request. In the Java environment, this mechanism includes the
Servlet  and related classes.
As for requests coming from a browser, they come in two ﬂavors— GET
and POST . The GET request is a request via a URL. Simple URLs that appear
as hyperlinks on a Web page are sent as GET requests. Any additional parameters
appear at the end of the URL as name=value  pairs separated by “ &”. The
parameters are separated from the URL with a “ ?” character:
http://www.google.com/search?hl=en&ie=ISO-8859-1&q=java
The example URL includes three parameters:
•hl=en
•ie=ISO-8859-1
•q=java
The POST  is virtually the same, except that the name=value pairs don’t
appear on the URL but are sent in a less visible way. The net result is the same,and the same methods can be used in the servlet to retrieve the parameters. The
POST  requests typically come from HTML form  elements, as when you ﬁll in
the ﬁelds of a form and press a submit button (though forms can specify thatthe browser use 
GET as the submission mechanism for a particular form). The
biggest advantage to posting the form is that the parameters don’t appear inthe URL, which is both more aesthetically pleasing and avoids problems fromaccidentally revisited pages or user-altered parameters.
One further twist: URLs are not necessarily literal paths to ﬁles anymore.
The Web server can interpret parts of the URL as an alias for some other pro-gram. So 
http://www.google.com/search  may not actually refer to a direc-
tory named search on the Google site, but more likely tells the Web server to
use its search program. We’ll discuss this more in Chapter 19.
So servlets are given requests which have come from browsers (and other
Web clients), and then they respond with output. In our examples, we’ll besending HTML back. There are lots of other choices, too. Since browsers un-derstand other formats, a servlet might also send back plain text or even imagedata. Another choice gaining popularity is having the servlet generate XML andthen using a conversion via stylesheets to produce HTML. This allows for theChapter 18 Servlets: Java Pressed into Service 406
formatting to be changed (e.g., to apply a new corporate look to the pages)
without changing the content or the programs that generate the content.
Since a Web server (e.g., Apache Tomcat) is typically conﬁgured to run
constantly, that is, to always be around, then a servlet is also always around.(The Web server keeps a reference to the class, so the class is not garbage collect-ed—hence its persistence.) Well, “always” here means “as long as the Webserver and the operating system are up and running.”
An aside: Not all servlets are for Web browsing. Sometimes servlets can
be used as daemons that hang around in the background doing other tasks(e.g., background processing of some database records). The browser interface,if any, may only be for the purpose of providing an administrative interface tothe daemon. The administrator would then have a Web page to which to go,in order to see how many records have been processed. This page may also havebuttons to reset, restart, or shut down the process. While we typically think ofservlets being for the production of dynamic Web pages, here the Web pageswould only be an aside to the real purpose, that of processing database records.
HOW TO WRITE A  SERVLET 18.4
So how do you write a servlet? You may already have ﬁgured it out, from whatwe’ve described so far. You need to:
• Write a Java class that extends 
HttpServlet
• In that class, write the following methods:
•init()
•destroy()
•doGet()  and/or doPost()
That’s the basic idea. There are lots of details about what arguments are
supplied, what other resources are available, what methods can be used to getat parameters, and so on. We’ll discuss some of those in our example servlet.
Let’s start with a simplistic servlet, one that will dynamically generate the
“Hello, world” string as a Web page (Example 18.1).407 18.4 How to Write a Servlet
Example 18.1 A “Hello, world” servlet
/*
 * HiServlet.java */
package net.multitool.servlet;import javax.servlet.*;
import javax.servlet.http.*;
/**
 * Simple Servlet that generates a page of HTML */public class HiServlet  extends HttpServlet {  /**    * Think of this as the constructor for the servlet.     * We need do nothing for our example,    * but we should call our parent object.   */  public void   init(ServletConfig config)    throws ServletException  {    super.init(config);      } // init
  /** 
   * Called when the Web server is shutting down   * or wants to shut down this particular servlet.     * We need do nothing.   */  public void   destroy()   {      } // destroy
  /** 
   * Handles the HTTP GET method.   * @param request servlet request   * @param response servlet response   */Chapter 18 Servlets: Java Pressed into Service 408
  protected void 
  doGet(HttpServletRequest request, HttpServletResponse response)    throws ServletException, java.io.IOException  {    doBoth(request, response);  } // doGet
  /** 
   * Handles the HTTP POST method.   * @param request servlet request   * @param response servlet response   */  protected void   doPost(HttpServletRequest request, HttpServletResponse response)    throws ServletException, java.io.IOException   {    doBoth(request, response);  } // doPost
  /** 
   * Requests for both HTTP GET and POST methods come here,    * because we're not doing anything different   * between the two request types.  This way we need only one   * version of the code that does the real work.   * @param request servlet request   * @param response servlet response   */  protected void  doBoth(HttpServletRequest request, HttpServletResponse response)    throws ServletException, java.io.IOException  {    java.io.PrintWriter out = response.getWriter();    response.setContentType("text/html");    /* output our page of html */    out.println("<html>");    out.println("<head>");    out.println("<title>A Java Servlet</title>");    out.println("</head>");    out.println("<body>");    out.println("Hello, world.");    out.println("</body>");    out.println("</html>");
    out.close();
  } // doBoth409 18.4 How to Write a Servlet
  /**
   * Returns a short description of the servlet.   */  public String  getServletInfo()  {    return "Very Simple Servlet";  } // getServletInfo()
} // class HiServlet
Whew! That is a lot of code for only a simple “Hello, world,” but remem-
ber that this is not just a run-on-your-desktop application. This is a network-based servlet that can respond to concurrent requests from across the networkand talk to Web browsers. There’s a lot of plumbing that needs to be connectedto a Web server for the servlet to run, and that’s what most of this code is—justthe connections. The other verbose part is all of the HTML that we spit outaround our message. You can make it even more elaborate, with backgroundcolors and other HTML decorations if you want to try it yourself.
Once you’ve written a servlet, though, you can’t just run it from the
command line like any Java class.
1 Much of the work of a servlet is done behind
the scenes by the Web server (e.g., Tomcat). The tougher question is, “Howdo you run a servlet?” That involves issues of conﬁguring the Web server, set-ting up directory locations, and so forth. It’s the subject of the next chapter.
Once you’ve deployed this servlet (by reading the next chapter and/or with
help from your IDE), you can run the servlet and talk to it via your browser.We’ve pointed a browser window at one such deployment to get a highly unin-teresting Web page (Figure 18.2) whose HTML source (in your browser menu,select View >Page Source ) is shown in Figure 18.3.
1. Well, actually, you could if it had a main()  method deﬁned. Our example doesn’t, but a
servlet class is still a Java class, and you might deﬁne a public static void main()
method that would allow you to run it from the command line as a way to drive the rest of theclass for simple testing. Of course, such a simple test harness wouldn’t be driving a Webbrowser, and so on but technically it is possible. We didn’t want to lie to you.Chapter 18 Servlets: Java Pressed into Service 410
Figure 18.2 A very simple page from our servlet
Figure 18.3 The servlet-generated source of our simple page
INPUT , OUTPUT 18.5
OK, so we’ve dynamically created a Web page—but the contents of that
page don’t change. The real use for servlets comes from having them producedynamic content, not just from dynamically producing content.
One way for the content to be dynamic is to extract it from a database.
Using what we described in Chapter 15, you can add code to pull values fromtables in a database. Consider a query that will return multiple rows of results.Each row could be displayed as a row in an HTML table for display on a Webpage.
Using a loop, we can generate lots of HTML with little code. This is
handy for generating HTML tables. We would likely generate the 
<table>  tag
outside a for loop, but the <tr>  and <td>  tags would be output from within411 18.5 Input, Output
the loop, one for each iteration of the loop. (If you’re not picturing that, be
patient. There are examples of this coming up. If you’re not conversant inHTML, then you better check out some of the HTML references at the endof this chapter. We’re going to assume that you speak HTML ﬂuently. Comeon—we can’t cover everything in one book.)
The other side of dynamic content comes from variable input. Google’s
search engine, for example, generates different pages for different search strings.It is the variation in user input that results in varying output pages. On a Webpage, user input typically comes from an HTML form. The form values canbe passed either as parameters on the URL or as 
POST  values. URL parameters
are also easy to generate by hand, or to code in place in <a> tags. For example,
<a href="/servlet/doSuch?cmd=find&value=joe">
is an HTML tag for a hyperlink which will invoke the doSuch  servlet and pass
in the parameters cmd and value . (It’s a servlet not because the pathname is
/servlet , but we use that for illustrative purposes. In fact, the servlet invoked
may not even be called doSuch ; it all part of servlet mapping that recognizes
certain URLs as aliases for particular servlets. See Chapter 19 for a fullerexplanation.)
The point is, we can invoke the same servlet repeatedly (even simultane-
ously) but with different values for our parameters, so we can program it fordifferent behaviors and different output.
These parameters are available to the servlet via the 
request  argument of
the doGet()  and doPost()  methods. You can get an enumerator over all of
the arguments (using getParameterNames() ), or if you know it’s name (and
you likely would, since you’re writing the program) you can ask for a particularargument.
The previous example used an argument called 
cmd, whose value we could
retrieve thus:
String act = request.getParameter("cmd");
The parameters all come as String s. If your arguments are numeric, you’ll
have to parse them (and error-check them—HTML forms are, understandably,weak on validating their input; tons of JavaScript have been written to dealwith this, but this is beyond the scope of this book.)
Some parameters may have embedded spaces and other special characters
that would disrupt a URL. To deal with that, browsers encode the charactersChapter 18 Servlets: Java Pressed into Service 412
in form ﬁelds before sending them to a Web server. You can see that in some
URLs—space gets replaced with a “ +” character, and special characters (such
as the plus sign) get replaced with a character sequence for hexadecimal values(for example, “
+” becomes %2B ). The getParameter()  method will automat-
ically decode those. But we need to remember this if we want to generate anyliteral URLs in the HTML that we produce. (See the 
URLEncoder  class in the
Javadoc documentation for servlets.)
One more annoyance that must be dealt with: What if the URL contains
the same argument twice—for example, www.google.com/search?
cmd=search&cmd=bogus ?
If you make the call to getParameter()  you will get the ﬁrst value
(search ). If you want to handle such a situation differently, you can call
getParameterValues()  which will return an array of String s for all the
different values. In our example,
String [] allofem = getParameterValues("cmd");
will return an array such that:
allofem[0] = "search"
allofem[1] = "bogus"
If there was only one value, then you get an array of one element. If the
parameter wasn’t used in the URL, getParameterValues()  returns null .
MATTERS OF  STATE: COOKIES , HIDDEN VARIABLES ,
AND THE  DREADED  “BACK” BUTTON18.6
The toughest part about working with HTML is, perhaps, its statelessness .
HTML and browsers were not designed to keep a connection going. It’s not aphone call type of connection, where the line is kept open between the browserand the Web server. Rather, it’s a one-shot, send-me-what-you’ve-got mecha-nism more like postal mail (but without the stamp). Here’s the rub: Just be-cause you mail a letter, you can’t assume that you’ll get an answer back. Thereis no on-going connection between browser and server, except for the durationof the data transfer. Once you’ve got your complete page displayed, the413 18.6 Matters of State: Cookies, Hidden Variables, and the Dreaded “Back” Button
connection is gone.2 About the best one can hope for is that you’ll use what,
in our postal analogy, would be like a supplied reply envelope. This allows theservlet engine of the Web server to track requests from the same user and pro-vide a session capability across requests. It will use your browsers cookie  mecha-
nism to store this session’s ID used to track your session. If you don’t havesessions on, it will need to use URL rewriting, whereby the URLs generatedwill have an added parameter, the session ID.
Unlike the early days in the life of the Web, nowadays virtually everyone
has cookies enabled in their browsers—anyone who shops at 
amazon.com , at
least. This makes session tracking so much easier for the servlet developer. TheWeb server handles all that automatically, and you only need to make a fewcalls to the session-related methods of the 
HttpRequest .
To get a session for a user, ask for one from the HttpRequest :
HttpSession session = request.getSession(true);
The boolean parameter says whether ( true ) or not to create a session if
one does not yet exist for this user. Once you have a session, you can storeobjects associated with that session:
session.setAttribute("cart", shopCart);
where shopCart  is any serializable Object  and "cart"  could be any String
that you want to use to later identify and retrieve this object, for example:
Basket myCart = (Basket) session.getAttribute("cart");
Notice that we need to explicitly cast the object type returned by
getAttribute() , because it returns a generic Object .
Cookies 18.6.1
For any information that you want to save for longer than the duration of a
session, you may want to investigate cookies—little bits of data (4K max; typi-cally only a few bytes) sent to the browser for it to store and send back at a latertime. You make a cookie thus:
2. You can go to another page, just be staring at the page for a long long time, or you might
have shut down your browser completely—and the server-side servlet will never know.Chapter 18 Servlets: Java Pressed into Service 414
Cookie snack = new Cookie("name", "value");
snack.setMaxAge(36000); // lifetime in seconds (10 hours)
Setting the maximum age of the cookie to a positive value is needed to let
the browser know that it needs to store the cookie on disk. After that manyseconds the cookie will be discarded by the browser as no longer relevant. No-tice, too, that you must send the data inside the cookie as a string, and whenyou retrieve it, you’ll have to parse that string.
Then you can send the cookie as part of a response, along with your
other output:
response.addCookie(snack);
Getting data back via cookies involves requesting data from the
HttpServletRequest  object. All the cookies associated with your URL are
sent with the HTTP header to this address. You make the call:
Cookies [] allSuch = request.getCookies();
and then you have to look through the list looking for the cookie you want:
if (allSuch != null) {
    for(i=0; i  allSuch.length; i++) {        Cookie c1 = allSuch[i];        if ("DesiredCookieName".equals(c1.getName())) {            String result = c1.getValue();            // ... now do something with it        } // endif    } // next cookie} // endif
While cookies have gotten a lot of press, especially in the early days of Web
technology, we’ve found much less use for them than for session objects. Sessionobjects stay on the server, cannot be modiﬁed or deleted by the user, and areeasier to look up and use. The drawback, or course, is their limited lifespan.But if you really want to leave data around for the next time some user visitsyour servlet, you may be better off putting the data in your own database andidentifying that user by means of a cookie or by some login mechanism.
Let’s take a look at a complete servlet example.415 18.6 Matters of State: Cookies, Hidden Variables, and the Dreaded “Back” Button
DESIGNING A  BUDGET PRO SERVLET 18.7
When designing a servlet, there are many different patterns to follow. We can’t
hope to cover all the approaches that can be used for effective servlet program-ming. What we hope to do is show you our previous BudgetPro GUI applica-tion rewritten as a servlet, so that you can see the mechanics of a working servletapplication. From this, you can become accustomed to the mechanics of aservlet so that you’ll feel comfortable with other approaches, too. All servletsneed to use these basic mechanisms.
Our BudgetPro GUI application was started from the command line, with
a name for the budget and a total dollar amount. We’ll use a static HTML pagewith a form for supplying that information. That will invoke our servlet. Theservlet will use HTML pages analogous to the windows we used in ourGUI—there will be a main screen that shows the current account listing itssubaccounts, and there will also be a screen for creating new subaccounts.
One nice feature of HTML-based Web applications is that you can use
hyperlinks as a way to both select something and take an action on it. We’ll usethat feature in lieu of a View Subaccount  button. Instead of selecting a subac-
count and then pressing View Subaccount , the user will only have to click on
the name of the subaccount. As a hyperlink, it will make the request to theservlet to view that subaccount.
We will still use a button to send us to the screen for creating the subac-
counts. We could have used a hyperlink, but this makes the browser page looka bit more like the GUI version.
Prototype 18.7.1
When designing servlets, it’s handy to use static HTML pages as a prototype
for the work to be done. You can mock up the various screens using HTML,simulate interactions by using hyperlinks to move between the screens, and geta feel for what the screens and interactions will look like.
Such a prototype also serves as a “runnable” speciﬁcation. It can sometimes
be easier to show the action than to describe it with words. And if you take carewhen you are building these static HTML pages, most of the HTML can bereused directly in the ﬁnal product. (This will be even more true when we getto JSP.)Chapter 18 Servlets: Java Pressed into Service 416
Design 18.7.2
Let’s review what we need our servlet application to do for us. Given an account
name and the initial dollar amount, we need to:
• Create a top-level account with that amount of dollars
• Display the current account and its total and remaining dollars, along with
a list of its subaccounts, if any
• Create subaccounts, specifying a name and dollar amount• Make a selected subaccount be the current one, displayed as above
After each or any of these actions, the servlet has to spit out the HTML
page for the user to view. If the user wants to create a subaccount, then theservlet produces a form page for entering the name and dollar amount for thesubaccount. When the user presses a Create  button on that page, the browser
tells the servlet (via the form data) that the servlet should create the subaccountand redisplay the current account with this new subaccount added to its list.
TIP
It may help to think of the servlet as a two-step process, with a current and fu-
ture perspective. The ﬁrst step is the action that the servlet must perform basedon the supplied parameters (e.g., create a new account). The second step isthe creation of the page allowing the user to take the next (future) action. Thatpage reﬂects the state of things after the parameter-driven action has occurred.In our example, that means showing the list of subaccounts including the onethat we just created.
Let’s spell out in more detail what our interactions with the servlet will be,
and describe what output we expect for each of those inputs. We will create akeyword to tell the servlet what function we want it to perform; we’ll call theparameter 
func . We will sometimes need two other parameters: name  and
dollars .
Table 18.1 shows our design as a compact reference.The code for our servlet is at 
http://www.javalinuxbook.com/ . Let’s
look at some of the key parts of the servlet in more detail. We’ll look at:1) reading the parameters, 2) the core business logic of the servlet, as describedin Table 18.1, and 3) how we create and output the HTML.417 18.7 Designing a BudgetPro Servlet
Table 18.1 BudgetPro servlet actions
Next screen Action Other params func  parameter
main Create a top-level account, save in
the session.name , dollars begin
subacct none none mkacct
main Get account from session. none cancel
main Get account from session; create
subaccount.name , dollars create
main Get account from session, look up
subaccount by name , save as current
in session.name cd
main Get account from session, get
parent from account, save as currentin session.none
back
The parsing of the parameters is very straightforward. The request  param-
eter, part of the signature of the doGet()  and doPost()  methods, can be used
to retrieve the parameters we need:
String act = request.getParameter("func");
String name = request.getParameter("name");String dollars = request.getParameter("dollars");
Notice that we always ask for all three parameters, even though we will
often use only one ( act). Once we have the requested function in act, it’s just
a matter of if-then-else-ing our way through the possible values and takingthe appropriate actions. We store, or retrieve, the current account in thesession manager, thereby providing continuity between browser requests(Example 18.2).
The output is the page to send back to the browser. We create
that page as an object, either an 
AccountView  or a SubPage . The
HttpServletResponse  provides us with an output channel on which to write.
java.io.PrintWriter out = response.getWriter();
if (nextPage != null) {    response.setContentType("text/html");    out.println(nextPage.toString());}Chapter 18 Servlets: Java Pressed into Service 418
Example 18.2 Implementing the BudgetPro servlet actions
if ("begin".equals(act)) {
    Account top = new Account(name, theUser, dollars);    session.setAttribute("top", top);    session.setAttribute("current", top);    nextPage = new AccountView(top);} else if ("mkacct".equals(act)) {    // show the subaccount creation page    nextPage = new SubPage(null);} else if ("cancel".equals(act)) {    Account current = (Account) session.getAttribute("current");    nextPage = new AccountView(current);} else if ("create".equals(act)) {    Account current = (Account) session.getAttribute("current");    try {        current.createSub(name, dollars);        nextPage = new AccountView(current);    } catch (NumberFormatException nfe) {        // show the subaccount creation page (with error message)        nextPage = new SubPage("Bad number format");    }} else if ("cd".equals(act)) {    Account current = (Account) session.getAttribute("current");    Account nextAcct = current.getSub(name);    session.setAttribute("current", nextAcct);    nextPage = new AccountView(nextAcct);} else if ("back".equals(act)) {    Account current = (Account) session.getAttribute("current");    Account nextAcct = current.getParent();    session.setAttribute("current", nextAcct);    nextPage = new AccountView(nextAcct);} else {    log("Unknown func=["+act+"]");    response.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED);}
The way that we construct the output, it will all get sent back to the user
in one fell swoop. That’s ﬁne for relatively short pages with rapid response time.If response time is a major concern and you are sending large quantities of data,you may want to change things a bit. Instead of building up the output in a
StringBuffer  and then getting it all back with a toString()  call, you could
take each of our append()  calls and make them individual out.println()419 18.7 Designing a BudgetPro Servlet
calls, to send each snippet of HTML separately. The output can be ﬂushed
explicitly, too, using
response.flushBuffer();
You might do such a call just before beginning a database operation, or
place such calls at strategic points through your output.
REVIEW 18.8
We have seen that servlets are Java programs that are run by a Web server. Theytypically, but not necessarily, produce output intended for a browser. By imple-menting the 
HttpServlet  interface, your Java class will have all the methods
needed for it to be run by a Web server. We looked at a simple example andsaw its output to a Web browser, then we looked at another example using ourBudgetPro application.
WHATYOU STILL DON’T KNOW 18.9
There is more that we haven’t discussed, so if you’re going to do some seriouswork with servlets, be sure to do some additional reading, especially on thesetopics:
• The servlet lifecycle and the need for thread safety.
• How to keep the servlet output from being cached.• Dealing with failures.• Initialization parameters.• Other kinds of output.• Sharing between servlets.• How to conﬁgure and deploy servlets (this is coming up in the next
chapter).Chapter 18 Servlets: Java Pressed into Service 420
RESOURCES 18.10
The deﬁnitive place for all the details is the Java Web site at Sun,3 particularly
the pages dealing with javax.servlet.http  classes.
Some of the best material on servlets comes from:
•Core Servlets and JavaServer Pages  by Marty Hall and Larry Brown, ISBN
0-13-009229-0, a Prentice Hall PTR book.
• Its sequel, More Servlets and JavaServer Pages  by Marty Hall, ISBN
0-13-067614-1, also by Prentice Hall PTR.
•Java Servlet Programming, Second Edition  by Jason Hunter and William
Crawford, ISBN 0596000405, from O’Reilly.
EXERCISES 18.11
1. Modify the BudgetPro servlet so that it responds differently for the
doGet()  and doPost()  methods. Have doPost()  continue to work as
is, but have doGet()  report the number of different users and the number
of accounts that they have created. (You may need to “instrument” thecode—that is, add additional statements—to start counting such things.)
2. Change BudgetPro to do its output on the ﬂy instead of building the entire
page before output. Can you notice any difference in the display time?
3. Design error handling for BudgetPro to prevent the user from allocating
more than is available in the (sub)account. Will you use Java exceptions?If so, which object will throw them and which will catch them? How willyou inform the user of the error? Implement your design.
3.http://java.sun.com/j2ee/1.4/docs/api/421 18.11 Exercises

In our last chapter, the BudgetPro servlet example spent a lot of code generating
the HTML output for the servlet to send back to the browser. If you want tochange the HTML for any page (for example, add a background color), youwould have to modify the Java code (obviously)—but you’re not really wantingto modify the logic of the servlet, you only want to tweak its output. TheHTML that a servlet generates can be scattered among output statements, stringconcatenations, classes, and method calls. Servlets, we might say, bury theHTML deep inside the code. We’re now going to take a look at JavaServerPages (JSP) which do the opposite—they expose the HTML and hide the codedown inside.
This technique has been given the fancy description, document-centric
server-side programs . They are “document-centric” because the HTML code is
so visible—JSP content looks like (and is) HTML with some additions. Theyare “server-side” because all the work is done on the server and all the additionsand special features of JSP are boiled down to a simple stream of HTML bythe time it gets to the browser.
423Chapter 19
JSP:
Servlets Turned Inside Out
WHATYOUWILL LEARN 19.1
• Theory of operation: how JSP can be thought of as servlets “inside out.”
• Three simple JSP directives: scriptlet , declaration , expression .
• Servlet variables made available: request , response , out, session .
• Server-side includes.• A tiny bit about tags.•
jsp:useBean .
• A look at our BudgetPro using JSP.• The correct spelling of JavaServer Pages.
SERVLETS TURNED  INSIDE  OUT: JSP 19.2
Take a look at the AccountView.java  class in the BudgetPro servlet example.
It consists almost entirely of
sb.append("</a></td>");
method calls which build up a string of HTML. Instead, this could have beencalls to do the output right then and there:
out.println("</a></td>");
Either way, if we want to modify the HTML, we have to modify the Java
code. While that’s not difﬁcult, it can be error-prone. It would be nice to not
have the Java syntax in the way when we want to modify the HTML. (That’sespecially true when you want to put quotation marks in your HTML:
out.println("<input name=\"name\" size=\"20\">");
It’s not that it can’t be done; the \" just gets hard to read and hard to get right
the ﬁrst time.)
One way to externalize all the HTML is to put it into a ﬁle. Then our Java
application could read the ﬁle at runtime and send its contents to the browser.Not bad, but what about the dynamic parts? Remember how we generated thetable from the 
for loop in AccountView.java :Chapter 19 JSP: Servlets Turned Inside Out 424
for (Iterator actit = acct.getAllSubs(); actit.hasNext(); ) {
    Account suba = (Account) actit.next();    sb.append("<tr>");    sb.append("<td><a href=\"BudgetPro?name="+suba.getName());    sb.append("&func=cd\">");    sb.append(suba.getName());    sb.append("</a></td>");    sb.append("<td>albing</td>");    sb.append("<td>");    sb.append(suba.getTotal().toString());    sb.append("</td>");    sb.append("</tr>\n");} // next acct
That would be hard to do with ﬁle-based HTML.
Another approach, the one used by JavaServer Pages, would be to use the
HTML ﬁle as input to a converter program—one which would take each lineof HTML, for example
<input name="name" size="20">
and produce a line of Java code:
out.println("<input name=\"name\" size=\"20\">");
Notice how the converter would be the one to handle the escape sequence
for the quotation marks; we get to write straight HTML—it has to deal withthe backslashes.
This is the basic idea behind JavaServer Pages. JSP ﬁles are nothing more
than HTML (with some additions that we’ll discuss shortly) which are com-piled into Java programs—servlets, to be exact—that are then run to producethe Web page. The conversion happens no later than the ﬁrst time the Webserver tries to serve up that JSP. If it hasn’t yet been converted, it will convertit into Java code and start the servlet. Thereafter, other requests to that page godirectly to the servlet. If you modify the JSP ﬁle, then the Web server recognizesthat the ﬁle has been modiﬁed and reconverts it.
But why go to all this trouble? It’s not for the static HTML that we need
JSP, but rather for the dynamic bits. Remember that 
for loop, above, used to
make the HTML table of subaccounts? Let’s look at part of a JSP that does thesame thing:425 19.2 Servlets Turned Inside Out: JSP
<table border=1 width=50%>
<tr><th>Account</th><th>Owner</th><th>Value</th></tr><% // for each subaccount:  for (Iterator actit = acct.getAllSubs(); actit.hasNext(); ) {    Account suba = (Account) actit.next();%>    <tr>    <td><a href="BPControl?name=<%= suba.getName() %>&func=cd">    <%= suba.getName() %>    </a></td>    <td>albing</td>    <td>    <%= suba.getTotal().toString() %>    </td>    </tr><% } // next acct%></table>
Notice how it starts off as simply the HTML building the table
opening. Then we encounter some Java source code, enclosed in delimiters(
<% ... %> ), then back to plain HTML. There’s even a line which intermixes
HTML and Java:
<td><a href="BPControl?name=<%= suba.getName() %>&func=cd">
To understand what’s going on here, let’s take a look at four pieces of
syntax that are the keys to JSP.
HOW TO WRITE A  JSP A PPLICATION 19.3
Writing a JSP application consists, syntax-wise, of writing your desired outputpage in HTML and, where you need the dynamic bits, putting Java code and/orother special syntax inside special delimiters that begin with 
<%.
There are four special delimiters that we should describe if you’re going
to work with JSP. The bulk of your JSP will likely be HTML. But interspersedamong the HTML will be Java source or JSP directives, inside of these fourkinds of delimiters:Chapter 19 JSP: Servlets Turned Inside Out 426
•<% code %>
•<%= expression %>
•<%! code %>
•<%@ directive %>
Let’s look at them one at a time.
Scriptlet 19.3.1
The code that appears between the <% and %> delimiters is called a scriptlet . By
the way, we really hate the term “scriptlet.” It seems to imply (falsely) a com-pleteness that isn’t there. It is too parallel to the term “applet,” which is acomplete Java program that runs inside a browser. A scriptlet isn’t necessarilya complete anything. It’s a snippet of code that gets dropped inside the codeof the servlet generated from the JSP source.
Recall that servlets may have a 
doPost()  and a doGet()  methods, which
we collapsed in our example by having them both call the doBoth()  method.
Same sort of thing is happening here with the JSP, and the doBoth()  ends up
doing all the output of the HTML. Any snippets of Java code from within the
<% and %> delimiters get dropped right in place between those output calls,
becoming just a part of a method.
It can be useful to keep this in mind when writing JSP. It helps you answer
the questions of scope—who has access to what, where are variables gettingdeclared and how long will they be around? (Can you answer that last question?Since any variable declared inside the 
<% and %> will be in the JSP equivalent
of our doBoth()  method, then that variable will only be around for the dura-
tion of that one call to the doBoth() , which is the result of one GET (or POST )
from the browser.)
The source code snippets can be just pieces of Java, so long as it makes a
complete construct when all is converted. For example, we can write:
<% if (acct != null) { // acct.getParent() %>
    <a href="BudgetPro?func=back">    <img src="/back.gif">    </a><% } else { %>    <img src="/back.gif"><% } %>427 19.3 How to Write a JSP Application
Notice how the if-else  construct is broken up into three separate
scriptlets—that is, snippets of code. Between them, in the body of the if and
the else , is plain HTML. Here is what that will get translated into after the
JSP conversion:
if (acct != null) { // acct.getParent()
    out.println("<a href=\"BudgetPro?func=back\">");    out.println("<img src=\"/back.gif\">");    out.println("</a>");} else {    out.println("<img src=\"/back.gif\">");}
Do you also see why we describe it as being “turned inside out”? What
was delimited becomes undelimited; what was straight HTML becomesdelimited strings in output statements.
As long as we’re on the topic of conversion, let’s consider comments.
There are two ways to write comments in JSP, either in HTML or in Java. InHTML we would write:
<!-- HTML comment format -->
but since we can put Java inside of delimiters, we can use Java comments, too:
<% // Java comment format %>
or even:
<% /*
    * Larger comments, too.    */%>
If you’ve been following what we’ve been saying about translation of JSP
into Java code, you may have ﬁgured out the difference. The Java comments,when compiled, will be removed, as all comments are, from the ﬁnal executable.
The HTML-based comments, however, will be part of the ﬁnal HTML
output. This means that you’ll see the HTML comments in the HTML thatreaches the browser. (Use the View Source  command in your browser to see
them. As HTML comments, they aren’t displayed on the page, but they aresent to the browser.) This is especially something to be aware of when writinga loop. Remember our loop for generating the table?Chapter 19 JSP: Servlets Turned Inside Out 428
<% // for each subaccount:
  for (Iterator actit = acct.getAllSubs(); actit.hasNext(); ) {    Account suba = (Account) actit.next(); %>    <!-- Next Row -->    <tr>    <td><a href="BPControl?name=<%= suba.getName() %>&func=cd">...<% } // next acct %>
We’ve put a comment just prior to the <tr>  tag. What will happen is that
the comment will be part of the generated HTML, and since this is a loop, thecomment, just like the 
<tr>  and other tags, will be repeated for each iteration
of the loop. Now we’re not saying this is undesirable—in fact it makes the re-sultant HTML more readable. But be aware that these comments will be visibleto the end user. Be careful in what you say in them. The additional transmissiontime required for these few extra bytes is probably imperceptible, unless yourcomments are large and repeated many times.
Declaration 19.3.2
The other place that code can be placed is outside the 
doGet()  and doPost() .
It is still inside the class deﬁnition for the servlet class that gets generated fromthe JSP, but it is not inside any method. Such code is delimited like this:
<%! code %>
The exclamation mark makes all the difference. Since it’s outside any
method, such code typically includes things like variable declarations andcomplete method declarations. For example:
<%! public static MyType varbl;
public long
countEm(){    long retval = 0L;    retval *= varbl.toLong();    return retval;}%>429 19.3 How to Write a JSP Application
If you tried to do something like this inside of a scriptlet, you would get
errors when the server tries to compile your JSP. Such syntax belongs at theouter lexical level. The use of the 
<%! ... %>  syntax puts it there.
Expression 19.3.3
This delimiter is a shorthand for getting output from a very small bit of Java
into the output stream. It’s not a complete Java statement, only an expressionthat evaluates into a 
String . Here’s an example:
<h4>As of <%= new java.util.Date() %></h4>
which will create a Java Date  object (initialized, by default, with the current
date/time) and then call the toString()  method on that object. This yields a
date/time stamp as part of an <h4>  heading.
Any methods and variables deﬁned inside the previously described
delimiters are OK to use with this expression shorthand.
There are also a few predeﬁned servlet variables.We’ve described how the JSP is converted into a servlet—the HTML
statements become 
println()  calls. This all happens inside of an
HttpServlet -like class, just like our BudgetProServlet  extends
HttpServlet  in the previous chapter. In such a class, the method called when
a request arrives from a browser looks very much like our doBoth()  method:
doBoth(HttpServletRequest request, HttpServletResponse response)
TIP
If you want to see the source for the servlet that gets generated when a JSP is
converted, and if you’re using NetBeans, right-click on the ﬁlename (in theExplorer  view) and, from this menu, choose Compile . Then do it again and
you’ll notice that the second choice on the menu is View Servlet (Figure 19.1).
If you are using Apache Tomcat as your Web server, just look in the 
work
subdirectory in the directory where Tomcat is installed. In the appropriate subdi-rectory you will ﬁnd both the 
.java  and .class  ﬁles for your converted JSP
with the .jsp  sufﬁx converted to $jsp.java  and $jsp.class  respectively.
For example, BPAcct.jsp  becomes BPAcct$jsp.java  and is compiled
into BPAcct$jsp.class .Chapter 19 JSP: Servlets Turned Inside Out 430
Figure 19.1 Viewing the converted JSP in NetBeans
The point here is that a request object and a response object are deﬁned
by the way the servlet is generated. They are called, oddly enough, request
and response . In addition to these, a session  is deﬁned and initialized, just
like we did in our servlet example. (What were we thinking?)
There are a few other variables that the converted servlet has created that
we can use. We’ll summarize them in Table 19.1. To read more about how touse them, look up the Javadoc page for their class deﬁnition.
Remember that these can be used not only by the 
<%= %>  expressions, but
also by the <% %>  snippets of code.
Directive 19.3.4
The last of the special delimiters that we will discuss is the one that doesn’t di-
rectly involve Java code. The <%@ ... %>  delimiter encompasses a wide variety
of directives to the JSP converter. We don’t have the space or the patience tocover them all, so we’ll cover the few that you are most likely to need early on431 19.3 How to Write a JSP Application
Table 19.1 JSP predeﬁned variables
Variable name Type
pageContext PageContext
session HttpSession
application ServletContext
config ServletConfig
out JspWriter
in your use of JSP. We have some good JSP references at the end of this chapter
for those who want all the gory details of this feature.
<%@page import="package.name.*" %>
is the way to provide Java import  statements for your JSP. We bet you can
guess what that happens in the generated servlet.
Here’s another useful page directive:
<%@page contentType="text/html" %>
You’ll see this as the opening line of our JSP, to identify the output MIME
type for our servlet.
JSP also has an include  directive:
<%@include file="relative path" %>
This directive is, for some applications, worth the price of admission alone.
That is, it is such a useful feature that even if they use nothing else, they coulduse JSP just for this feature. It will include the named ﬁle when converting theJSP—that is, at compile time.
It can be used for common header and footer ﬁles for a family of Web
pages. (If you’re a C programmer, think 
#include .) By deﬁning one header
ﬁle and then using this directive in each JSP, you could give all your JSP thesame look—say, a corporate logo and title at the top of page and a standardcopyright statement and hyperlink to your webmaster’s e-mail address atthe bottom.
Be aware that this inclusion happens at compile time and is a source-level
inclusion. That is, you are inserting additional source into the JSP, so if yourChapter 19 JSP: Servlets Turned Inside Out 432
included ﬁle contains snippets of Java code, they will be part of the resulting
program. For example, you could deﬁne a variable in the included ﬁle andreference in the including ﬁle.
Also, since this inclusion happens at compile time, if you later change the
included ﬁle, the change will not become visible until the JSP ﬁles that do theincluding are recompiled. (On Linux, this is simply a matter of touch ing all
the JSP, as in:
$ touch *.jsp
assuming all your JSP ﬁles are in that directory. Touching them updates theirtime of last modiﬁcation, so the Web server thinks they’ve been modiﬁed sothe next access will cause them to be reconverted and their generated servletsreloaded. You get the idea.
There is another way to do an include in JSP—one that happens not at
compile time, but at runtime. The syntax is different than the directives we’veseen so far, but more on that in minute. First, an example of this kindof include:
<jsp:include page="URL" flush="true" />
In this format, the page speciﬁed by the URL (relative to this Web appli-
cation’s root) is visited and its output is included in place amongst the outputof this JSP, the one doing the include.
A few quick notes:
• Be sure to include the ending “
/” in the directive; it’s part of the XML
syntax which is a shorthand for ending the element in the same tag as youbegin—that is, 
<p />  instead of <p> </p> .
• When all is working, flush  being true  or false  doesn’t matter; when
the included page has an error, then flush="true"  causes the output to
the browser to end at the point of the include; with flush="false" , the
rest of the page will come out despite the error in the include.
• The page that is being included is turned into its own servlet. That is, it
is its own JSP. You don’t have to just include static HTML, you caninclude a JSP.
• Since this is a runtime include, all you are including is the output of that
other page. You can’t, with this mechanism, include Java snippets ordeclarations, but only HTML output.433 19.3 How to Write a JSP Application
Table 19.2 New XML syntax for JSP constructs
New HTML format Standard format
<jsp:scriptlet> code </jsp:scriptlet> <% code %>
<jsp:declaration> code </jsp:declaration> <%! code %>
<jsp:expression> expr </jsp:expression> <%= expr %>
New Syntax 19.3.5
But what about that new syntax? It’s an XML-conformant syntax, and it’s the
syntax for all the newer features added to JSP. In fact, even the old JSPsyntax, the statements that we’ve discussed, have an alternative new syntax(Table 19.2). Prior to JSP 2.0, that syntax was reserved for JSP that produceXML rather than HTML. (That’s a whole other can of worms that we won’topen now.) Now, as of JSP 2.0, both forms can be used, if your Web server isJSP 2.0 compliant.
You can see that the old syntax is more compact and less distracting than
the large tags. We suspect that means the old syntax is likely to continue to beused for a long time yet.
1
This new syntax is also used for the last two parts of JSP that we will cover,
useBean  and tag libraries.
JavaBeans in JSP 19.3.6
For those who really want to avoid doing any Java coding inside of a JSP, there
is additional syntax that will provide for a lot of capability but without havingto explicitly write any Java statements. Instead, you write a lot of arcane JSPdirectives, as we’ll show you in just a bit. Is this any better? In some ways yes,but in other ways, no, it’s just different syntax.
What we’ll be able to do with this additional syntax is:
1. Instantiate a Java class and specify how long it should be kept around
2. Get values from this class3. Set values in this class
1. The newer XML-style syntax would be useful if your JSP are generated by an XSLT
stylesheet or are validated against a DTD, both topics being beyond the scope of our discussion.Chapter 19 JSP: Servlets Turned Inside Out 434
The syntax looks like this:
<jsp:useBean id="myvar" class="net.multitool.servlet.AccountBean" />
which will create a variable called myvar  as an instance of the AccountBean
class found in the net.multitool.servlet  package. Think of this as:
<%! import net.multitool.servlet.AccountBean; %>
<% AccountBean myval = new AccountBean(); %>
So can AccountBean  be any class? Well, sort of. It can be any class that
you want, as long as it is a bean. It doesn’t have to end in “ Bean ”, but it does
have to be a class which has:
• A null constructor (you may have noticed there is no syntax to support
arguments to the constructor on the useBean  statement).
• No public instance variables.• Getters and setters for instance variables.• Getters and setters named according to a standard: 
getTotal()  or
isTotal()  and setTotal()  for a variable called total  (isTotal()
would be used if we had a boolean getter, that is, if the getter returned a
boolean ; otherwise it would expect getTotal()  as the getter’s name).
Otherwise, its a normal class. These restrictions mean that you can call the
class a “JavaBean” or just “bean,” and there is additional JSP syntax to manipu-late the class. Speciﬁcally:
<jsp:getProperty name="myvar" property="total" />
will do, in effect, the following:
<%= myvar.getTotal() %>
or
<% out.print(myvar.getTotal()); %>
Similarly, we can set a value in the JSP with this syntax:
<jsp:setProperty name="myvar" property="total" value="1234" />435 19.3 How to Write a JSP Application
which will do, in effect, the following:
<% myvar.setTotal("1234"); %>
So this would hardly seem worth it, but there are other syntax constructs
that make this much more powerful. Remember that we’re working with Web-based stuff, with a JSP that will be invoked via a URL. That URL may haveparameters on it, and we can map those parameters onto a bean’s proper-ties—that is, connect the parameters to setters for a given bean. We replace the
value  attribute with a parameter  attribute, for example:
<jsp:setProperty name="myvar" property="total" parameter="newtot" />
which works the same as:
<% myvar.setTotal ( request.getParameter("newtot") ); %>
We can take that one step further and map all the parameters that arrive
in the URL to setters in one step:
<jsp:setProperty name="myvar" parameter="*" />
So if you design your JSP and your HTML well, you can get a lot done
automatically for you. One other thing going on behind the scenes that we’veglossed over is the type of the argument to the setter. The parameters allcome in as
String s. However, if your setter’s type is a Java primitive, it will
automatically convert to that type for you, instead of just passing you String s.
One ﬁnal twist on using beans is the duration of the bean and its values.
If you don’t specify otherwise (and we have yet to show you syntax to do other-wise) your bean will be around for the duration of the request, at which timeit will be available to be garbage-collected. Any values in the bean will not bethere on the next visit to that URL (i.e., the next call to that servlet).
Here is the syntax to make that bean last longer:
<jsp:useBean id="myvar" class="net.multitool.servlet.AccountBean" 
             scope="session" />
which will make it stay for the duration of the session. You may remember (or
you can ﬂip back and look up) how we created and used session variables inthe servlet. The same mechanism is at work here, but behind the scenes. YouChapter 19 JSP: Servlets Turned Inside Out 436
only use the speciﬁc syntax in the useBean  tag, and it does the rest (getting
and storing) for you.
Tag Libraries 19.3.7
Well, we’re almost done with JSP, but the one topic that we have yet to cover
is huge. It’s the trap door, or the way back out, through which JSP can get tolots of other code without the JSP author having to write it. Tag libraries arespecially packaged libraries of Java code that can be invoked from within theJSP. Just like the 
useBean , they can do a lot of work behind the scenes and
just return the results.
There are lots of available libraries, which is one reason for this topic to
be so huge. We could spend chapters just describing all the various databaseaccess routines, HTML generating routines, and so on available to you. Perhapsthe leading tag library is the JSP Standard Tag Library (JSTL).
Here are two of the most common directives used with tag libraries. First
is the directive that declares a library to be used:
<%@ taglib prefix="my" uri="http://java.sun.com/jstl/core" %>
You then use the preﬁx as part of the tag name on subsequent tags that
refer to this library. For example, if we had an out directive in our library, we
could use my as the preﬁx, separated by a colon: <my:out ...> .
The second directive we will show is a for loop. The for loop mechanism
provided by this library is in some ways simpler than using Java scriptlets. Itcomes in many forms, including one for explicit numeric values:
<my:forEach var="i" begin="0" end="10" step="2">
This example will loop six times with i taking on the values 0, then 2,
then 4, and so on. Another variation of the forEach  loop can also make it easy
to set up the looping values:
<my:forEach var="stripe" items="red,white,blue">
In this example it will parse the items  string into three values: red,
white , and blue , assigning each, in turn, to the variable stripe . In fact the
items  attribute can also store an array, or collection, or iterator from the Java
code that you may have declared (or that is implicit from the underlying437 19.3 How to Write a JSP Application
servlet). The forEach  will iterate over those values without you having to code
the explicit next()  calls or index your way through an array.
The bottom of the loop is delimited by the closing tag:
</my:forEach>
For more information on these and other tags, check out
•http://java.sun.com/products/jsp/jstl
•http://jakarta.apache.org/products/jsp/jstl
• The references at the end of this chapter
Beyond the standard library of tags, there are other third-party collections
of tags; you can also create your own libraries, called custom tag libraries . While
a useful and powerful thing to do if you have a large JSP-based application,such details would expand this book well beyond its scope. If you’re interestedin this topic, please follow up with some of the excellent references at the endof this chapter.
USING JSP WITH BUDGET PRO 19.4
We could have taken the BudgetPro example from the previous chapter andsimply translated it all into JSP ﬁles. The reason we didn’t is that it’s not howyou are likely to ﬁnd JSP used “in the wild.” Since JSP ﬁles become servlets, itis not uncommon to ﬁnd JSP and servlets mixed together—not arbitrarily, butin a sensible way. Remember the Model/View/Controller (MVC) pattern fromyour readings on object-oriented programming and design patterns?
2 Well, JSP
makes for a reasonable View, and a plain servlet can act as the Controller. TheModel is typically the database behind all this. That’s what we’ve done withthe BudgetPro example.
We’ve taken the two main chunks of output code—that for the main ac-
count display and the form used for creating subaccounts—and turned those
2. If not, then a) you should do some more reading, and b) the MVC pattern is a “classic” way
to divide the work of a GUI into three distinct parts: Model—the data behind what you aredoing or displaying; View—a particular way to display that data; and Controller—an objectthat acts as the “trafﬁc cop” to various inputs and events, sending messages to either the View,or Model, or both.Chapter 19 JSP: Servlets Turned Inside Out 438
into JSP ﬁles. The main servlet class ( BudgetProServlet.java ) is thus “gut-
ted” of its output, and the new version ( BudgetProController.java ) acts
as the controller. Requests come to it via HTTP requests, but for output, itredirects the browser making that request over to the appropriate JSP.
This introduces a new bit of servlet syntax—redirecting a request to
another URL. The action is taken by means of a method call on the HTTPresponse object:
response.sendRedirect("BPAcct");
Whereas in the previous, servlet version of BudgetPro, we would create an
object that was the next page of output:
nextPage = new AccountView(current);
In this version, we instead redirect the response to a JSP that produces the
output for that page.
So how does the JSP know for which account it should display informa-
tion? That is shared between the JSP and the controller servlet via the sessioninformation. As with the previous, servlet-base BudgetPro, the session is usedto store the current account. It can be retrieved from the session information,as seen in line 11 of 
BPAcct.jsp :
11:   <% Account acct = (Account) session.getAttribute("current");
That variable ( acct ) is then used throughout the JSP to get the appropri-
ate data for display, as in:
21:   Account: <%= acct.getName() %>
We could also have used a session JavaBean. Such a mechanism requires
more setup on both sides, the controller and the JSP, but has the advantage ofremoving more literal Java code from the JSP. (“We leave this as an exercise forthe reader!”)
REVIEW 19.5
We’ve looked at server-side Java processing with JavaServer Pages which canbe thought of as servlets turned inside out. From that simple concept we looked439 19.5 Review
at our servlet example and converted it to use JSP. We also looked brieﬂy at
the syntax for JSP tags and the JSTL, but encouraged you to do more readingon this topic.
WHATYOU STILL DON’T KNOW 19.6
We didn’t yet discuss the spelling of JavaServer Pages. If you’ve read throughthis chapter, you may have noticed that there is no space between Java andServer but there is a space between Server and Pages. If you’ve read this chapter,you may also have some idea of why it’s spelled this way: It’s the JavaServerthat’s doing the work—serving up the Pages. OK, it’s not a huge deal, but it isworth knowing how to spell something kerectly, rite?
There are volumes that we could have written about tag libraries. Large
scale projects, and any project with a database connection behind it, will ﬁndtag libraries invaluable at providing standard mechanisms for database access.Check out the resources, below, for more information on tag libraries.
RESOURCES 19.7
Some of the best material on JavaServer Pages comes from two of the books wementioned in the previous chapter. You now understand how interrelated thetwo topics of servlets and JSP are, and these two books cover both topicsvery well:
•Core Servlets and JavaServer Pages  by Marty Hall and Larry Brown, ISBN
0-13-009229-0, a Prentice Hall PTR book.
• Its sequel, More Servlets and JavaServer Pages  by Marty Hall, ISBN
0-13-067614-1, also by Prentice Hall PTR.
As we said, the topic of tag libraries is huge, and just writing about JSTL
could ﬁll it’s own volume. It has. We recommend:
•Core JSTL: Mastering the JSP Standard T ag Library  by David Geary, ISBN
0-13-100153-1, Sun Microsystems Press.Chapter 19 JSP: Servlets Turned Inside Out 440
To get it straight from the horse’s mouth, there is the ofﬁcial Sun
speciﬁcations for JSP, available at
•http://java.sun.com/products/jsp/ download.html#specs
EXERCISES 19.8
1. Convert the controller and the JSP to share their data via JavaBeans.
2. Add a control button to each page ( BPAcct.jsp ) to return not just one
level upwards, but back to the top level account. (Hint: The controller canstore a reference to the top level account in a session variable named 
top.)441 19.8 Exercises

Servlets and JSP need to be served up by something; that something is a Web
application server. What started as simple Web servers serving up little morethan HTML pages developed into Java application servers—the backbone ofthe enterprise IT environment.
WHATYOUWILL LEARN 20.1
In this chapter, we will describe the installation of both the JBoss and Geroni-mo Java application servers on a Linux platform. These servers not only runservlets and JSP, but they are also, as we shall see in later chapters, J2EE EJBcontainers, so the installation part of this chapter is important for using thetechnologies and examples covered in the remaining chapters. We will reviewthe System V init system and explain how to add JBoss to the regular systemof services on your Linux box. We will show you how to use groups and permis-sions to enable a number of nonroot users to do the basic application serveradministration.
443Chapter 20
Open Source
Web Application Servers
DOWNLOADING  JBOSS 20.2
JBoss1 is a complete application server . It provides a full, production-ready, J2EE
environment. Be aware that as of this writing JBoss 4.0 has just passed the SunJ2EE certiﬁcation tests, but even prior to the certiﬁcation JBoss has been oneof the most widely used J2EE application servers.
A great deal of JBoss information can be found on the JBoss Web site.
2
Visit the site’s download page3 to download the product.
NOTE
Version 4.0 of JBoss has only just become available, so you will see us using
the prior production stable version, 3.2.3. By the time you read this, however,version 4.0 will be the better choice. What we describe should apply equallywell to both.
First off, you must choose what form of the product to download. The
choice is really between a binary and source distribution. Within that choice,you can choose between a number of compression methods. We will downloadand install a binary. Just click on 
jboss-3.2.3.tgz  and save the ﬁle. Before
we install, we need to consider some issues of management.
BEA N ENABLER ,OR“LET’S BE CODEPENDENT !” 20.3
People often give inadequate consideration to the issues of management of
software systems. This is especially true of Java systems, which are, by their na-ture, cross-platform. We have the luxury of dealing only with Linux systemshere, so we can make some practical suggestions most books ignore.
1. JBoss is actually a combination of two distinct projects: JBoss, the EJB container and JMS
server, and Tomcat, the servlet and JSP server. You can install and use Tomcat alone. We won’tbother to do that in this book. We’ll install JBoss and use JBoss for everything. We are alsolazy typists who do not like to keep typing JBoss/Tomcat, so we’ll refer to it merely as JBossfrom now on. If you are deploying only servlets and JSP, then, by all means, download andinstall Tomcat only. It is part of the Apache Jakarta project.
2.
http://www.jboss.org/index.html
3.http://www.jboss.org/downloads/Chapter 20 Open Source Web Application Servers 444
Up to this point, we have largely been considering a situation where the
Java developer is working on an individual workstation where he or she has
root  access. Now that we are talking about application servers, we are dealing
with systems where, as the software progresses from development throughrounds of testing to production, we will want to limit the people who are ableto change certain elements of the system. Often, the “quick and dirty” strategyis to share out the 
root  password to a number of users. This is a serious security
risk, even when all parties are trusted. Why? Because root  isn’t a person. When
someone logs in as root , we do not know who that person is. We only know
that it is someone who knows the root  password. In some businesses, this is
an unacceptable ambiguity in audit.
A common alternative is to restrict root  login to the console only, and to
require the use of the su (“set user”) command to promote an already logged-
in user to root  status. This provides a link back to the individual, so actions
can be traced to single person. That improves auditability.
This strategy is better, but since root  is an all-or-nothing proposition, it
is a fairly blunt instrument. Once someone can su to root , that someone can
do anything . That’s a lot of power to give to someone who just needs to be able
to install WAR ﬁles.
Yet another strategy is to set up the sudo  system.4 Using sudo , you can
specify what people can execute which commands as root , and where they may
do it from. In other words, you might let user alice  start and stop the Web
server and mount and unmount ﬁlesystems when she is logged in to a localmachine, but only to start the Web server when she is logged in on a machineoutside your network. Check out the manpage for sudo  to learn more. Even
this isn’t the best solution for the present issue.
The best solution is not to require 
root  power at all if you can avoid it.
Remember that permissions on ﬁles in Linux are assigned to users, groups , and
others . Most people do not think about the middle tier, groups. But groups are
the best way to give control over parts of the ﬁlesystem to a collection of userswithout requiring them to share an account and password.
Nonroot-Installed Software 20.3.1
The problem with all of the power-sharing strategies we outlined earlier is that
once the user escalates to 
root , there is no way to limit what he or she can do
4. Some folks pronounce this “ess-you doo,” and some “pseudo.” Whatever ﬂoats your boat.445 20.3 Be an Enabler, or “Let’s Be Codependent!”
(well, sudo  lets you limit it, but a mistake can be fatal—consider what happens
if you let them run a program that lets them escape to a shell). So, for example,if you want to let the Web services group install and maintain JBoss, but youdon’t want them to mess with any standard software on the system, then createa separate place for nonsystem software.
Two common places for such software on Linux systems are 
/opt  and
/usr/local . We tend to use /usr/local  mainly because this is the default
path on an awful lot of software that uses autoconf  to handle cross-platform
compilation (it is used by the majority of Free Software programs, but excep-tions include what are arguably the four most widely used Free Software pack-ages: the Linux kernel, the Apache Web server, the Perl language, andXFree86). So we are going to install JBoss under 
/usr/local  and we are going
to give a number of users the power to install and manage software in
/usr/local .
You will need to be root  to carry out this procedure. Here are the
steps—but don’t worry, we’ll pad them out with a lot of ponderousexplanation:
1.Create the group.
Groups are deﬁned in the ﬁle 
/etc/group . Each line in that ﬁle
deﬁnes a group. Each line is of the form:
GroupName:x:GroupID:GroupMembers
GroupName  is the name of the group. It is the group name that shows
up in long form ls output. The second ﬁeld is for the group’s password.
If we may confess, we don’t know if this feature works anymore. You usedto be able to specify a group password, but this defeats the whole purposeof not sharing passwords. Sharing passwords is a security risk. Don’t doit. The third ﬁeld is the group ID number. Remember that ﬁles haveowning users and owning groups. These are both stored as numbers. Usernumbers are known as 
uids and group numbers as gids. These numbers
should be unique. If you reuse a number for more than one group, theeffect could be indeterminate, since it would depend on how a given pro-gram was written. Don’t reuse numbers. The ﬁnal column is a comma-delimited list of user names. Those named users are said to belong to thegroup. We’ll talk some more about what that means as we go on.Chapter 20 Open Source Web Application Servers 446
Imagine that user names bob, ted, carol , and alice  are part of
carl  and michael ’s Web development team and each has an account on
the box on which we intend to install JBoss.
So, we create a group entry in the /etc/group  ﬁle:
local:x:100:carl,michael,bob,carol,ted,alice
If Bob later leaves to join the custodial staff, simply remove his name
from the group and he loses his access.
TIP
The user’s default group is speciﬁed in the /etc/passwd  ﬁle. Here’s a sample:
mschwarz:x:500:500:Michael Schwarz:/home/mschwarz:/bin/bash
The ﬁelds of this are:
username:passwd:uid:gid:userinfo:homedir:loginprog
where:
username  is the login name of the user.
passwd  is the user’s encrypted password. Or rather it used to be. Now,
this is usually x and the encrypted password is stored in the
/etc/shadow  ﬁle. This is because /etc/passwd  must be world-
readable. The shadow ﬁle is not. This prevents someone reading theencrypted passwords to do an ofﬂine dictionary attack.

uid is the numeric user ID associated with this username.
gid is the numeric group ID of this user’s default group. Look for this
number in /etc/group  to ﬁnd the name of the default group.
userinfo  is additional information about this user. Sometimes called the
gecos  ﬁeld for obscure historical reasons, 5 this ﬁeld usually stores the
user’s real name and possibly other information like ofﬁce location andphone number.

homedir  is the user’s home directory.
loginprog  is the name of the program that will be executed when the
user logs in. This is usually a shell, but it may be any program.
5. See http://www.hyperdictionary.com/dictionary/GCOS  if you are dying to
know why.447 20.3 Be an Enabler, or “Let’s Be Codependent!”
NOTE
There are two strategies that Linux distributions follow for assigning a default
group to a new user. One is to put all users into a group called staff  or some
such. This is widely considered a security risk since it often leads to making ﬁlesaccidentally readable or writable by all users on the system. The more commonmethod is to create a group for each user when the user is created.
TIP
If you get in the habit of creating groups, you might want to assign the numberssystematically: 500–599 groups for programs, 600–699 groups for program in-stallation, 700–799 groups for company departments to allow them to controltheir own Web content, and so on.
2.Change group ownership of /usr/local .
Odds are, /usr/local  already exists on your system. It may even
have several programs installed in it. You must give the group ownershipover everything in 
/usr/local  and below. The chgrp  command changes
the group owner of ﬁles, and the -R argument says to do so recursively:
# cd /usr/local
# chgrp -R local .
At this point, everything in /usr/local  and below is group-owned
by the local  group.
3.Set group permissions on /usr/local .
Basically, you want the group to be able to read and write everything
in /usr/local . To do this, you need to change the permissions on all the
ﬁles with the chmod . As with chgrp , this command takes a -R argument
that recursively walks the directory tree. We need to give everyone in thegroup read and write permission on all the ﬁles:
# chmod -R g+rw .Chapter 20 Open Source Web Application Servers 448
NOTE
We are assuming you are carrying out these steps in sequence and thus your
current working directory is still /usr/local .
4.Set directory permissions on /usr/local .
You want slightly different permissions on directories. First, you want
the group to have execute permission on directories. This allows eachmember of the group to make each directory his or her current workingdirectory. See Eric Raymond’s Unix and Internet Fundamentals
6 for a good
basic introduction to ﬁle permissions on UNIX.
Also, on Linux systems, when a user creates a ﬁle, that ﬁle is, by de-
fault, group-owned by the user’s primary group,7 which is not what we
want here. We want ﬁles created by a user in this directory to be group-owned by the 
local  group. To do this, we have to set the setgid bit  on all
the directories in /usr/local  and below. When a user creates a ﬁle in a
directory that has the setgid bit set, that ﬁle will be group-owned by thegroup-owner of the directory if the user is a member of that group . If the
user is not, it will be group-owned by the user’s default group as usual. Sowe need to set execute and setgid permissions on all the directories in
/usr/local  and below:
# find /usr/local -type d -exec chmod g+xs {} \; -print
/usr/local/usr/local/share/usr/local/share/bochs/usr/local/share/bochs/keymaps/usr/local/share/bochs/keymaps/CVS/usr/local/share/doc......etc.
6.http://en.tldp.org/HOWTO/Unix-and-Internet-Fundamentals-HOWTO/
disk-layout.html#permissions
7. Which is the group ID speciﬁed for the user in the /etc/passwd  ﬁle.449 20.3 Be an Enabler, or “Let’s Be Codependent!”
With this setup, members of the local  group can manage ﬁles and pro-
grams in /usr/local  and below as they wish. They have full power over the
ﬁles and they need nothing but their own login credentials to do it. The root
password can remain private.
Finer Grained Control 20.3.2
This pattern can be repeated. We can give ownership of different branches un-
der /usr/local  to other groups to allow control to be doled out in small sets.
INSTALLING  JBOSS 20.4
Using a platform-neutral system like Java has both advantages and disadvan-tages. A disadvantage is that, generally, Java products don’t use the traditionalinstallation mechanisms of your native platform. You don’t install an RPM ora DEB. But this is somewhat offset by the fact that all a Java application needsis for its classes to be arranged in a particular pattern on the ﬁlesystem. In otherwords, all you need to do to install JBoss is to unpack the tarball.
You did the hard part already. Since you have created the group and made
yourself a member of that group,
8 any member of the group can install the
product:
$ cd /usr/local
$ tar xzvf jboss-3.2.3.tgzjboss-3.2.3/lib/jboss-3.2.3/client/jboss-3.2.3/docs/jboss-3.2.3/docs/dtd/jboss-3.2.3/docs/dtd/html-svg/......etc.
8. Group membership is established at login. It may be necessary to log out and log back in to
take advantage of a newly created group. There are other obscure ways, such as running a sub-shell with the 
login  argument or running su - , but the simplest is to log out and log back in.Chapter 20 Open Source Web Application Servers 450
TIP
At this point we suggest using one more Linux ﬁlesystem trick. The tarball un-
packs into a directory whose name includes the product version—in this case,
jboss-3.2.3 . In many cases, you will want to be able to have more than one
version of JBoss installed on a box simultaneously, either because you need toport projects from one version to another, or perhaps because you need to de-velop applications that will run on different versions on different target servers.To make your life easier, create a symbolic link to a generically named directory,such as 
jboss , and have that symlink point to jboss-3.2.3 . Then you can
write your startup and shutdown scripts to use the jboss  pathname. You can
then switch to another version by changing where the symlink points:
$ cd /usr/local
$ ln -s jboss-3.2.3 jboss
This process is discussed in detail in Section 6.2 in the context of switching
between Java SDK versions.
THINGS THAT MAKE IT GO 20.5
In order to explain how to integrate an Open Source application server into
your system, we have to do a little Linux Sysadmin training. We need to showyou how server processes are generally managed on Linux systems.
System V Init System 20.5.1
Virtually all Linux distributions use some variant of the System V init system
to create and customize programs and services that run at the startup of thebox. Now, we don’t want to write a Linux system administration manual, butwe do need to tell you enough to decide how to make JBoss available whenneeded on your server.
The core of the System V init system is the 
/etc/inittab  ﬁle. Everything
else devolves from this conﬁguration ﬁle. In the days before network services,the primary startup tasks were to get getty  programs running and then run a
single startup shell script. The 
/etc/inittab  ﬁle handles these tasks beautiful-
ly. Since then, the world of UNIX and Linux has become a complex mixtureof client-server programs and protocols, so a complex set of conventions hasbeen developed to turn the primitive 
/etc/inittab  into a much richer set of451 20.5 Things That Make It Go
controls. Let’s take a very brief look at /etc/inittab  and how it works; then
we’ll move on to the extended scripts that manage server processes. That iswhere we will integrate JBoss.
A key concept in the System V init system is the runlevel . The idea is that
a system can have a number of “standard” conﬁgurations, numbered from 0 to6, where 0 is shutdown, 1 is single-user, 2 to 5 are up to the system administra-tor, and 6 is reboot. The init
9 command can be used (by the root  user) to
change the system from its current runlevel to another:
# init 1
What happens when you issue such a command is determined by the
/etc/inittab  ﬁle. Let’s take a look at the out-of-the-box /etc/inittab  ﬁle
from a Fedora Core 110system (Example 20.1).
This is a pretty complex ﬁle, and we don’t want to bog down in it too
much, since most of what interests us occurs outside this ﬁle.
The basic format of a line in /etc/inittab  is:
id:runlevels:action:process
The id is a unique 1–4 character identiﬁer. The runlevels  is a list of the
runlevel numbers to which the record applies. The action  speciﬁes what action
is to be taken. The process  is the program to run. The respawn  action, for
example, tells init that when the process exits, it should be run again. The once
action says it should be run once on transition to the runlevel. We won’t go
into too much more here. See the man inittab  page for details.
The part that concerns us are the l0 through l6 entries. Note that these
cause the /etc/rc.d/rc  script to be run once, with the runlevel passed as an
argument. This is the key to System V init system.
9.telinit  is a common alias from other UNIX implementations. Linux symlinks this to init.
10. During the writing of this book, RedHat decided to put their completely Free Software
OS out to a public-controlled project and to stop calling it “RedHat.” The name RedHat isreserved for Fedora-based Linux systems that must be purchased with support contracts. It isstill the same system with a different name maintained by basically the same people. The keydifference is that you cannot  purchase support for Fedora (at least from RedHat, we expect
some enterprising folks to offer Fedora support for a fee at some point).Chapter 20 Open Source Web Application Servers 452
Example 20.1 Fedora Core 1 default /etc/inittab  ﬁle
#
# inittab       This file describes how the INIT process should set up#               the system in a certain runlevel.## Author:       Miquel van Smoorenburg, miquels@drinkel.nl.mugnet.org>#               Modified for RHS Linux by Marc Ewing and Donnie Barnes#
# Default runlevel. The runlevels used by RHS are:
#   0 - halt (Do NOT set initdefault to this)#   1 - Single user mode#   2 - Multiuser, without NFS #       (The same as 3, if you do not have networking)#   3 - Full multiuser mode#   4 - unused#   5 - X11#   6 - reboot (Do NOT set initdefault to this)# id:5:initdefault:
# System initialization.
si::sysinit:/etc/rc.d/rc.sysinit
l0:0:wait:/etc/rc.d/rc 0
l1:1:wait:/etc/rc.d/rc 1l2:2:wait:/etc/rc.d/rc 2l3:3:wait:/etc/rc.d/rc 3l4:4:wait:/etc/rc.d/rc 4l5:5:wait:/etc/rc.d/rc 5l6:6:wait:/etc/rc.d/rc 6
# Trap CTRL-ALT-DELETE
ca::ctrlaltdel:/sbin/shutdown -t3 -r now
# When our UPS tells us power has failed, assume we have a few minutes
# of power left.  Schedule a shutdown for 2 minutes from now.# This does, of course, assume you have powered installed and your# UPS connected and working correctly.  pf::powerfail:/sbin/shutdown -f -h +2 "Power Failure; System Shutting Down"
# If power was restored before the shutdown kicked in, cancel it.
pr:12345:powerokwait:/sbin/shutdown -c "Power Restored; Shutdown Cancelled"453 20.5 Things That Make It Go
# Run gettys in standard runlevels
1:2345:respawn:/sbin/mingetty tty12:2345:respawn:/sbin/mingetty tty23:2345:respawn:/sbin/mingetty tty34:2345:respawn:/sbin/mingetty tty45:2345:respawn:/sbin/mingetty tty56:2345:respawn:/sbin/mingetty tty6
# Run xdm in runlevel 5
x:5:respawn:/etc/X11/prefdm -nodaemon
NOTE
Some Linux distributions run different scripts for each runlevel instead of passing
the runlevel as an argument to a single script. The details are not important.The net effect is that a script is run for each runlevel.
Sure, you could put the code to run JBoss directly in that script if you
want. But these scripts have been designed to handle arbitrary sets of serviceswithout you having to modify those scripts directly. How? By doing what Linux(and its UNIX antecedents) does so well: making complex systems out ofsimple parts.
Each service you might wish to start and stop gets a shell script that con-
trols it. This shell script must take a command argument. The minimum setof commands that must be supported are 
start  and stop . Other options such
as restart  and status  are often supported, but start  and stop  are the
important ones.
The script for atd, the one-shot job scheduler, is a ﬁne example. Let’s take
a look at it (Example 20.2).
Example 20.2 The atd init shell script
#!/bin/bash
## /etc/rc.d/init.d/atd## Starts the at daemon## chkconfig: 345 95 5Chapter 20 Open Source Web Application Servers 454
# description: Runs commands scheduled by the at command at the \
#    time specified when at was run, and runs batch commands when \#    the load average is low enough.# processname: atd
# Source function library.
. /etc/init.d/functions
test -x /usr/sbin/atd || exit 0RETVAL=0#
# See how we were called.#
prog="atd"start() {
  # Check if atd is already running  if [ ! -f /var/lock/subsys/atd ]; then    echo -n $"Starting $prog: "    daemon /usr/sbin/atd    RETVAL=$?    [ $RETVAL -eq 0 ]  touch /var/lock/subsys/atd    echo  fi  return $RETVAL}
stop() {
  echo -n $"Stopping $prog: "  killproc /usr/sbin/atd  RETVAL=$?  [ $RETVAL -eq 0 ] && rm -f /var/lock/subsys/atd  echo    return $RETVAL}
restart() {
  stop  start}  
reload() {
  restart}  455 20.5 Things That Make It Go
status_at() {
  status /usr/sbin/atd}
case "$1" in
start)  start  ;;stop)  stop  ;;reload|restart)  restart  ;;condrestart)  if [ -f /var/lock/subsys/atd ]; then    restart  fi  ;;status)  status_at  ;;*)  echo $"Usage: $0 {start|stop|restart|condrestart|status}"  exit 1esac
exit $?
exit $RETVAL
This script is from a RedHat Linux system. Those comments at the top
are a magic incantation for the chkconﬁg  program that ships with that distri-
bution11 (and with Fedora Core). We’ll talk more about chkconﬁg  in the next
section.
As you can see, the basic premise is that when a daemon is started, the
process ID is saved into a ﬁle. If the “stop” option is passed, the PID is lookedup and the process is killed. That’s the basic idea. But wait! There’s more!
Each runlevel has a directory of scripts. Let’s look at the contents of such
a directory (Example 20.3).
11. The RedHat chkconﬁg  program is conceptually similar to the one in the IRIX operating
system.Chapter 20 Open Source Web Application Servers 456
Example 20.3 A directory of scripts
[mschwarz@host238 mschwarz]$ cd /etc/rc5.d
[mschwarz@host238 rc5.d]$ lsK01yum         K73ypbind           S18rpcgssd     S58ntpdK05saslauthd   K74nscd             S19rpcidmapd   S80sendmailK11jboss       K89netplugd         S19rpcsvcgssd  S80spamassassinK12mysqld      S00microcode_ctl    S20random      S85gpmK15httpd       S04readahead_early  S24pcmcia      S90crondK15postgresql  S05kudzu            S25netfs       S90vmwareK20nfs         S06cpuspeed         S26apmd        S90xfsK24irda        S08iptables         S28autofs      S95anacronK35smb         S09isdn             S40smartd      S95atdK35vncserver   S10network          S44acpid       S96readaheadK35winbind     S12syslog           S55cups        S97messagebusK36lisa        S13irqbalance       S55sshd        S97rhnsdK50snmpd       S13portmap          S56rawdevices  S99localK50snmptrapd   S14nfslock          S56xinetd
Notice the ﬁle S95atd ? Let’s look at the long form ls output for that ﬁle:
[mschwarz@host238 rc5.d]$ ls -la S95atd
lrwxrwxrwx  1 root   root   13 Feb  2 02:08 S95atd -> ../init.d/atd
The ﬁle is a symbolic link to the ﬁle in the init.d  directory! If you take
a look at the actual script run by the /etc/inittab  ﬁle on a runlevel change,
you will notice that what it does is to pick up all the ﬁles in the rcX.d  directory
(where X is the runlevel being changed to12) that begin with the letter K, run
through them in numerical order, and execute the linked scripts with stop  as
the argument. It then picks up all the ﬁles that begin with S, runs through them
in numerical order, and executes the linked scripts with start  as the argument.
This sounds like a mess, but it is actually a very nice way to automate the
starting and stopping of services by runlevel. Adding or removing a new serviceis simply a matter of creating the 
/etc/init.d  script, and then adding the
12. That phrase actually caused my high school grammar teacher to materialize in my ofﬁce
and scold me. I invite anyone who can come up with an elegant and grammatical way to phrasethat to contact me at 
mschwarz@multitool.net . I’m perfectly serious.457 20.5 Things That Make It Go
appropriate symlinks to the rcX.d  directories.13 So, ﬁrst we have to take an
init script and modify it to run JBoss.
RedHat/Fedora chkconﬁg 20.5.2
RedHat and its stepchild, Fedora, use a program called chkconﬁg  to automate
the setup and integration of init scripts.
The chkconﬁg  program has four basic functions. Two involve adding and
removing services from management. That’s our main interest here, but we’llget to that in a moment. The other two involve querying and setting the run-levels in which services run. That is the more common use, so we’ll look atthose ﬁrst.
[root@host238 root]# chkconfig --list ntpd
ntpd           0:off   1:off   2:off   3:on    4:off   5:on    6:off
TIP
chkconfig --list  without specifying a service name will list all the services
managed by chkconﬁg , including those that are provided by xinetd , which we
will not cover here.
As you can see, ntpd  runs at runlevels 3 and 5, and does not run at any
others. The --list  argument lets you query the runlevels.
[root@host238 root]# chkconfig --levels 2345 ntpd on
[root@host238 root]# chkconfig --list ntpdntpd           0:off   1:off   2:on    3:on    4:on    5:on    6:off
The --levels  argument lets you specify a list of runlevels that will apply
to the named service. The last argument may be on or off to specify which
setting to apply to those runlevels. The current value ( on or off) for a speciﬁed
13. Just a quick reminder that not all Linux distributions name their directories or scripts in
precisely the same way, but they all use something similar. By examining the /etc/inittab
ﬁle and the contents of the /etc  directory, you should be able to ﬁgure out the details of any
given distribution. Over time, more and more distributions have come to exactly match thenaming scheme described here. RedHat, Fedora, and Debian, for example, all follow thisnaming scheme.Chapter 20 Open Source Web Application Servers 458
runlevel is overwritten by whatever you specify. There is more to this; see the
manpage for chkconﬁg  for details.
Now, before we put JBoss under management, we need to make a script
for it. Or rather, we need to modify the one provided by JBoss. In the bin
subdirectory of JBoss, you will ﬁnd a script called jboss_init_redhat.sh .
You will notice that it has the “ chkconﬁg  mojo” in it—that is, the
“chkconfig: ” comment line. We mentioned this in passing when we looked
at the atd init script, but we didn’t tell you what those three numbers after the
colon actually mean. The ﬁrst is the list of runlevels in which you want theprogram to run. The second is the start priority, which is the number that willfollow the 
S in the rcX.d  runlevel symlink directory. The third number is the
stop priority, which is the number that will follow the K in the rcX.d runlevel
symlink directory.
These start and stop priority numbers can be very important indeed. Some
services (like NFS) depend upon others (like portmap). Your JBoss server mightdepend on a service like mysqld or postgresql. Don’t toy with these orderslightly. You can seriously mess up your services if you don’t know what you aredoing. Still, you will probably have to tweak things to get them completelyright. Just be cautious and think about every change.
Example 20.4 is the script as it comes with JBoss 3.2.3.There are three things we have to change here. The ﬁrst are the runlevels
in the “
chkconfig: ” line (we’ll show you the changed lines with a couple of
lines of context):
#
# chkconfig: 345 80 20# description: JBoss EJB Container# 
Next, we may need to change the paths to JBoss and to the Java runtime.
In our case, if you installed into /usr/local  and created the symbolic link as
we suggested, you don’t need to change the JBOSS_HOME , but you have to
change the JAVAPTH  variable:14
14. We are assuming you have set up your Java SDK as described in Chapter 6. If your java*
commands are located somewhere else, change this path to point at them.459 20.5 Things That Make It Go
Example 20.4 Out-of-the-box JBoss init script for RedHat
#!/bin/sh
## JBoss Control Script## chkconfig: 3 80 20# description: JBoss EJB Container# # To use this script,# run it as root - it will switch to the specified user.# It loses all console output - use the log.## Here is a little (and extremely primitive) # startup/shutdown script for RedHat systems. It assumes # that JBoss lives in /usr/local/jboss, it's run by user # 'jboss' and JDK binaries are in /usr/local/jdk/bin. All # this can be changed in the script itself. # Bojan ## Either amend this script for your requirements# or just ensure that the following variables are set correctly # before calling the script.
# [ #420297 ] JBoss startup/shutdown for RedHat# define where jboss is - this is the directory 
# containing directories log, bin, conf, etc.JBOSS_HOME=${JBOSS_HOME:-"/usr/local/jboss"}
# make sure Java is on your path
JAVAPTH=${JAVAPTH:-"/usr/local/jdk/bin"}
# define the classpath for the shutdown class
JBOSSCP=${JBOSSCP:-"$JBOSS_HOME/bin/shutdown.jar:$JBOSS_HOME/client/jnet.jar"}
# define the script to use to start jboss
JBOSSSH=${JBOSSSH:-"$JBOSS_HOME/bin/run.sh -c all"}
if [ -n "$JBOSS_CONSOLE" -a ! -d "$JBOSS_CONSOLE" ]; then
  # ensure the file exists  touch $JBOSS_CONSOLEfiChapter 20 Open Source Web Application Servers 460
if [ -n "$JBOSS_CONSOLE" -a ! -f "$JBOSS_CONSOLE" ]; then
  echo "WARNING: location for saving console log invalid: $JBOSS_CONSOLE"  echo "WARNING: ignoring it and using /dev/null"  JBOSS_CONSOLE="/dev/null"fi
# define what will be done with the console log
JBOSS_CONSOLE=${JBOSS_CONSOLE:-"/dev/null"}
# define the user under which JBoss will run, 
# or use RUNASIS to run as the current userJBOSSUS=${JBOSSUS:-"jboss"}
CMD_START="cd $JBOSS_HOME/bin; $JBOSSSH" 
CMD_STOP="java -classpath $JBOSSCP org.jboss.Shutdown --shutdown"
if [ "$JBOSSUS" = "RUNASIS" ]; then
  SUBIT=""else  SUBIT="su - $JBOSSUS -c "fi
if [ -z "`echo $PATH | grep $JAVAPTH`" ]; then
  export PATH=$PATH:$JAVAPTHfi
if [ ! -d "$JBOSS_HOME" ]; then
  echo JBOSS_HOME does not exist as a valid directory : $JBOSS_HOME  exit 1fi
echo CMD_START = $CMD_STARTcase "$1" in
start)    cd $JBOSS_HOME/bin    if [ -z "$SUBIT" ]; then        eval $CMD_START ${JBOSS_CONSOLE} 2>1     else        $SUBIT "$CMD_START ${JBOSS_CONSOLE} 2>1 "     fi    ;;stop)    if [ -z "$SUBIT" ]; then        $CMD_STOP    else        $SUBIT "$CMD_STOP"    fi     ;;461 20.5 Things That Make It Go
restart)
    $0 stop    $0 start    ;;*)    echo "usage: $0 (start|stop|restart|help)"esac
# define where JBoss is - this is the directory 
# containing directories log, bin, conf, etc.JBOSS_HOME=${JBOSS_HOME:-"/usr/local/jboss"}
# make sure Java is on your path
JAVAPTH=${JAVAPTH:-"/usr/java/jdk/bin"}
Finally, we don’t need to run the “all” conﬁguration, we only need the
default conﬁguration at the moment, so we change the argument to the run.sh
invocation:
# define the script to use to start JBoss
JBOSSSH=${JBOSSSH:-"$JBOSS_HOME/bin/run.sh -c default"}
JBoss Conﬁgurations
When you unpacked JBoss, it contained three predeﬁned server conﬁgu-
rations located in jboss/server . The three conﬁgurations are named
all (which runs every single service JBoss supports, including RMI/IIOP
and clustering features), default  (which runs only the set needed to run
servlets, JSP, and EJBs), and minimal  (which runs just JNDI, the logger,
and a URL deployment service; no Web container, no JMS, no EJBs).
In effect, the selected conﬁguration is the server. You can, of
course, customize any conﬁguration, and you may create additionalconﬁgurations.
Now, this script allows you to run JBoss as any user. It defaults to user
jboss  if none is speciﬁed. You have to decide what to do here. Without speci-
fying a user, it will run as root . That is a major security risk. On an out-of-the-
box RedHat or Fedora system, there is no user called jboss . We will have to
create one. There are a lot of security concerns to creating a special “nonlogin”user. The most important involve changing the user entries in 
/etc/passwdChapter 20 Open Source Web Application Servers 462
Example 20.5 Using chkconﬁg  to include JBoss start script
[root@cvs root]# cd /usr/local/jboss/bin
[root@cvs bin]# cp jboss_init_redhat.sh /etc/init.d/jboss[root@cvs bin]# chkconfig --add jboss[root@cvs bin]# chkconfig --list jbossjboss           0:off   1:off   2:off   3:on    4:on    5:on    6:off[root@cvs bin]# /etc/init.d/jboss startCMD_START = cd /usr/local/jboss/bin; /usr/local/jboss/bin/run.sh -c default
and /etc/shadow  after you create the user. Unfortunately, the JBoss program
needs to run a shell script, so you cannot set the shell to /sbin/nologin  as is
usual. Set the password for the user in /etc/shadow  to x, which is completely
invalid and will forbid login to the account by password.
Finally, you will need to add the user jboss  to any groups you created for
JBoss management (such as local  in our case). Truth be told, it would be a
good idea to use the jboss  user to install JBoss. It will avoid having to deal
with some ﬁle ownership and permission issues. If you do not do this, thesimplest way to get this init script working (you will get permission errors) isto run
chmod -R g+w /usr/local/jboss
That will make the script work with the jboss  user, provided jboss  be-
longs to the group owner of the JBoss installation.
The ﬁnal step is to copy your modiﬁed script to its ﬁnal destination and
run chkconﬁg to install it in all the runlevels (Example 20.5).
You now have JBoss running. You can start and stop it with the script,
and it will come up and shut down automatically depending on the runlevelyou switch to. Beauty, eh?
Other Distributions 20.5.3
You don’t need chkconﬁg  to set up equivalent scripts. In fact, the same script
provided by JBoss for RedHat will work with most distributions that use Sys-tem V init system. You will have to copy the init script and then create theappropriate symlinks manually, or locate the automated setup tools for yourparticular distribution (Debian, for example, has many such tools which youselect with their package management system).463 20.5 Things That Make It Go
IDE Integration 20.5.4
Another piece of software you might want to look at is JBoss-IDE,15 an Eclipse
plug-in for JBoss. The software is not downloadable from the footnoted Website, it is available only from the Eclipse Install/Update manager, so run yourcopy of Eclipse and install it. We will not cover JBoss-IDE here, but if you useEclipse as your development platform, JBoss-IDE is very useful for managingand deploying EJB’s, servlets, and JSP.
DISPOSITION OF  FORCES 20.6
Not to go all Sun-Tzu on you or anything, but if you want to win the war, youmust control the initiative. In other words, move only when you are ready.Deploying software into JBoss could not be easier if you get everything ready
before you begin.
You see, the key is to create a correctly conﬁgured WAR ﬁle, as a
build.xml ﬁle from our project does (Example 20.6).
If you look at the deploy  task, you will see that it simply copies the WAR
ﬁle to a particular directory under the Web server16 and, it turns out, that is all
you need to do to deploy to JBoss. JBoss will notice the new WAR ﬁle, stopany existing version, and start the new one. It all depends on getting the WARﬁle right.
APACHE  GERONIMO 20.7
An up-and-coming alternative to JBoss is Apache Geronimo. Part of the ApacheSoftware Foundation’s set of projects, Geronimo is an Open Source, Apache-licensed
17 implementation of the J2EE speciﬁcation. Furthermore, Geronimo
aims to be an Open Source J2EE implementation that is J2EE-certiﬁed by
15. http://www.jboss.org/developers/projects/jboss/jbosside
16. Note that that’s normal for development. For integration and production, either someone
authorized will run the same build on the target, or (more likely) the WAR ﬁle will be “formal-ly” built, tagged, and copied to the test or production server. We’ll talk more about that whenwe get to application maintenance issues.
17. Most notably, it doesn’t require anyone to open the source of their changes or customiza-
tions if they improve on an Apache software project, unlike the GPL which does.Chapter 20 Open Source Web Application Servers 464
Example 20.6 Ant build.xml  for the BudgetPro servlet and JSP examples
<!-- ================ File and Directory Names ================= -->
<!-- ...   app.name     The name of our application, used for file/dir names.  build.home   The name of the directory into which the                "compile" target will generate its output.  server.home  The name of the directory where the Web server                is installed.  deploy.home  The name of the directory into which the WAR file                will be copied.-->
  <property name="server.home" value="/usr/local/jboss" />
  <property name="deploy.home"             value="${server.home}/server/default/deploy"/>
<!-- ... --><!-- ================ Deploy Target ============================ -->
<!--  The "deploy" target copies the WAR file into a location required  (i.e., defined) by the servlet container. For some servlet   containers, you must restart them before they will recognize our   new/modified Web application.  Others may reload automatically.-->
  <target name="deploy" depends="compile"
          description="Deploy application to servlet container">
    <!-- Copy the contents of the build directory -->
    <mkdir   dir="${deploy.home}"/>    <copy  todir="${deploy.home}" file="${app.name}.war"/>
  </target><!-- ... --><!-- ================ Product WAR file ========================= -->  <target name="war" depends="compile"
          description="Create WAR file to be deployed">    <war destfile="${app.name}.war" webxml="web/WEB-INF/web.xml">      <fileset dir="${build.home}"/>    </war>  </target>465 20.7 Apache Geronimo
Sun.18 We will take a quick walk through the installation of the Apache
Geronimo Java application server. Geronimo not only runs servlets and JSP,but it is also, as we shall see in later chapters, a J2EE EJB container, so theinstallation part of this chapter is important for using the examples andtechnologies covered in the remaining chapters.
Geronimo is a complete application server. It provides a full, production-
ready, J2EE environment. It is the stated goal of the Geronimo project to passthe Sun J2EE certiﬁcation tests. Such certiﬁcation will, in all probability,quickly make Geronimo one of the most widely used J2EE application servers.
A great deal of Geronimo information can be found on the Geronimo
Web site.
19
NOTE
As of this writing, the project was just nearing the certiﬁcation process. Only the
milestone releases were available for downloading. By the time you read this,however, a fully certiﬁed version will likely be production-ready. There may beslight differences in the download and installation procedures. Be sure to followthe instructions from the Web site and any readme ﬁles for the most up-to-dateinformation.
First off, you must choose what form of the product to download. The
choice is really between a binary and source distribution. Within that choice,you can choose between two compression methods, zip or tar/gzip. While the
ﬁrst is typical for Windows distributions and the second for Linux, you canchoose either, as Linux has utilities for decompressing both. More importantly,the binaries are Java JAR ﬁles so they are not tied to a particular operating sys-tem. We will download and install a binary. Just click on the 
tar.gz  ﬁlename
and save the ﬁle.
If you haven’t read the previous sections because you were going to skip
JBoss and just use Geronimo, please go back and read Section 20.3. It dealswith administration and privileges for setting up your installation, and you’llwant to know that for this chapter’s installation discussion, too.
18. As of this writing, there was still a legal hurdle to overcome, since Sun requires derivative
works to be branded and compatible, whereas the Apache license places no such requirementson its derivative works. This may be resolved by the time you are reading this.
19.
http://geronimo.apache.org/Chapter 20 Open Source Web Application Servers 466
INSTALLING  GERONIMO 20.8
Using a platform-neutral system like Java has both advantages and disadvan-
tages. A disadvantage is that, generally, Java products don’t use the traditionalinstallation mechanisms of your native platform. For Linux users that meansthat with Java you don’t install using an RPM or a DEB. But this is somewhatoffset by the fact that all a Java application needs is for its classes (in JARs) tobe arranged in a particular pattern on the ﬁlesystem. In other words, all youneed to do to install Geronimo is to unpack the tarball.
You did the hard part already. Since you have created the group and made
yourself a member of that group (see Section 20.3), any member of the groupcan install the product:
$ cd /usr/local
$ tar xzvf geronimo.tar.gz...$
TIP
At this point we suggest using one more Linux ﬁlesystem trick. The tarball
unpacks into a directory whose name includes the product version—in thiscase, 
geronimo-1.0-M1 . In many cases, you will want to be able to have
more than one version of Geronimo installed on a box simultaneously, eitherbecause you need to port projects from one version to another, or perhapsbecause you need to develop applications that will run on different versions ondifferent target servers. To make your life easier, create a symbolic link to agenerically named directory, such as 
geronimo  and have that symlink point
to geronimo-1.0-M1 . Then you can write your startup and shutdown scripts
to use the geronimo  pathname. You can then switch to another version by
changing where the symlink points:
$ cd /usr/local
$ ln -s geronimo-1.0-M1/ geronimo
This process is discussed in detail in Section 6.2 in the context of switching
between Java SDK versions.467 20.8 Installing Geronimo
RUNNING THE  GERONIMO  SERVER 20.9
Getting the Geronimo server up and running is simply a matter of running a
Java application contained in the server.jar  ﬁle in the bin directory.
$ cd /usr/local/geronimo
$ java -jar bin/server.jar org/apache/geronimo/Server
That last parameter looks like a pathname, but it isn’t. It is a conﬁguration
ID which just uses the pathname-like syntax as a namespace, to be unique to
Geronimo (by virtue of the /org/apache/geronimo  preﬁx). That name tells
the server which of the several possible conﬁgurations you want to use. Formore information on the other conﬁgurations, refer to the Geronimo Wiki.
20
Having once invoked a particular conﬁguration, you need not repeat that
conﬁguration choice on subsequent invocations. That means that the next timeyou run Geronimo, you can just use:
$ java -jar bin/server.jar
If you want to put this in a startup script you’ll want to use the full
speciﬁcation, so as to be absolutely sure what you are getting.
To stop the server invoked from a command line, simply type Control-C.
If the server was invoked from a startup script, you will need to ﬁnd its processID (e.g., with the ps command) and use the Linux kill command to send it
a signal.
REVIEW 20.10
In this chapter we have looked at the installation of both the JBoss andGeronimo Java application servers on a Linux platform. For both of these OpenSource servers installation was little more than getting the JAR ﬁles in a usablelocation. We reviewed the System V init system and explained how to add JBossto the regular system of services on your Linux box. We showed you how touse groups and permissions to enable a number of nonroot users to do the basicapplication server administration.
20.http://wiki.apache.org/geronimo/Chapter 20 Open Source Web Application Servers 468
WHATYOU STILL DON’T KNOW 20.11
There is conﬁguration information about your Web applications that must be
provided to the Web servers in XML ﬁles. A small bit of this will be discussedin Chapter 23, but much of this you will need to ﬁnd elsewhere. Since this in-formation is in XML and speciﬁc to each application server, there is little of itthat is speciﬁc to the deployment on a Linux system.
RESOURCES 20.12
Documentation on JBoss is available from JBoss.org . They have an interest-
ing business model in that they open-source their code but charge for the doc-umentation. Expect to see more third-party books on JBoss, or you may see amove toward Geronimo instead.
Geronimo is, as of this writing, a bit sparse on documentation, too. There
is a Wiki site with the beginnings of documentation. Try and hunt down whatyou need starting from 
http://wiki.apache.org/geronimo/  and at the
http://geronimo.apache.org/  home page.469 20.12 Resources

Part V
Developing
Enterprise Scale Software

This chapter will serve as an almost criminally brief introduction to Enterprise
JavaBeans, their varieties, and their uses.
WHATYOUWILL LEARN 21.1
You will learn the basics of Enterprise JavaBeans and the Java Naming andDirectory Interface, which is how applications and EJB’s meet up with oneanother.
EXPANDING TO  EJB S 21.2
All right, we’ll admit it. It is a bit of a stretch to expand our sample applicationto the J2EE Enterprise JavaBean component model. The truth is, given thesmall data requirements and simplicity of our application, the Web front endthat we put on our application in the previous chapters is probably sufﬁcientto scale our application to even very large organizations.
473Chapter 21
Introduction to
Enterprise JavaBeans
That confessed, we still think our example is the best way to address our
topic. Why? Because EJBs are a large topic, worthy of several books (and weencourage you to read some of them, such as Enterprise JavaBeans Component
Architecture  by Gail Anderson and Paul Anderson (ISBN 0-13-035571-2). We
simply cannot teach you all about EJBs in our book. Our goal here is to intro-duce the concepts, provide a working example, and explain how to deploy andmaintain an EJB system on Linux using JBoss. Believe us, we’ll have enoughto cover to achieve that modest goal.
EJB Concepts 21.2.1
In a way, the use of the term Enterprise JavaBean , with its echo of the older
term JavaBean , is unfortunate. Apart from the similar intention of creating
reusable components, the two technologies have little in common.
The Life Cycle of an Enterprise JavaBean 21.2.1.1
Most of the books on EJBs that we have seen start with the simplest type of
bean and work their way up in complexity. We’re going to dare to be different,because the most complex case isn’t that hard, and once you understand it, thefunctions of all the other types of EJBs become obvious. They simply don’timplement what they do not need.
For the moment, assume that an EJB is a simple class that provides a set
of methods to clients. The methods represent business functions that clientswant the server to carry out.
Implementing an Enterprise JavaBean requires implementing three Java
source ﬁles:
• An object that represents the bean implementation
• An interface called the home interface  that represents the interface between
the bean and the EJB container
• An interface called the remote interface  which represents the methods that
a client may call on the bean
We’ll get into the details of these interfaces (and the sometimes obtuse
reasons behind) a little later on. For now, we will concentrate on theimplementation.
The implementation class contains methods that are there only to allow
the container to control the bean and to inform the bean of impending changesChapter 21 Introduction to Enterprise JavaBeans 474
to its status. Those methods are deﬁned in the bean class that the implementa-
tion class extends. The classes one extends to implement a bean are:
•SessionBean
•EntityBean
•MessageBean
Please forgive us right now for admitting that we will not cover message
beans in this book beyond a brief description in the next section. For detailson message beans, take a look at Chapter 8 of Enterprise JavaBeans Component
Architecture  by Gail Anderson and Paul Anderson (ISBN 0-13-035571-2).
Not all of the control methods need to be implemented in all cases, but
the full set is not that large or difﬁcult to understand. They correspond to im-portant “life events” in lifetime of the bean. The primary events are: creation,destruction, passivation, activation, persist to DB, restore from DB, and contextswitching.
Creation.  A bean is created when its constructor is called. As we shall learn,
the calling of the constructor has absolutely no connection with a client request.For session beans, the container maintains a pool of instances to handle clientrequests. For entity beans, a bean (most commonly) represents a database table,and the 
setEntityContext()  method is used to move that bean from row
(instance) to row as needed.
In practice, this usually means that a number of instances of the bean are
created when the application server is started. Additional instances are createdas the demand for this bean (number of clients, number of calls per unit time)increases.
Destruction.  As you know, Java objects do not have explicit destructors,
but when a bean instance is destroyed, an explicit method in the 
Bean  class is
called to permit shutdown operations to take place.
This is quite distinct from activation and passivation. Activation and pas-
sivation are operations carried out when the application server needs to shoveaside some 
Bean  instances that may still be needed by clients in order to make
room for an active request that requires more than the available systemresources.
Passivation and activation.  As we said above, passivation involves the
container asking the beans that are still potentially needed to step aside to allow475 21.2 Expanding to EJBs
more urgent tasks (probably beans that are being actively called) to use resources
tied up by otherwise idle beans. Think of this as like memory swap in anoperating system. The bean will save any data and context information intosome sort of persistent storage, which may be a database, ﬂat ﬁles, XML ﬁles,whatever, when it is passivated.
Context switching.  Since both session and entity beans may be called
upon to service requests from multiple clients, it is necessary to provide amethod whereby the container can notify the bean which “context” (whichmay be loosely said to be a client) is active at the moment. In stateless sessionbeans this is not necessarily implemented, but in stateful session beans and inentity beans this activity must be supported.
How is this distinct from passivation and activation? Passivation is the
temporary “swapping out” of a bean to make room for something else. Contextswitching is the move of a 
Bean  instance from client to client. Or, to put it
another way, passivation makes room for some other bean to become activeand serve a client.
1 Context switching switches a given bean from client
to client.2
The EJB Container 21.2.1.2
A J2EE application server has two containers : a Web container and an EJB
container. You can also think of these as “servers” in the more classic sense.J2EE calls them containers because it emphasizes the idea that you place Javaobjects (applets, servlets, and Enterprise JavaBeans) into the container that canrun them (a browser, a Web container, an EJB container). The J2EE speciﬁca-tion speciﬁes the exact relationship between these application objects and theircontainer. For EJB’s, the container provides lifecycle control, network manage-ment, load management, perhaps clustering services, CMP (container-managedpersistence) services, and so on. We’ll talk a lot more about container services
1. This is a simpliﬁcation. A container can passivate a bean to make resources available for any
purpose, not just for another EJB. Beans might be passivated because some process on theserver outside the application server needs resources. It is entirely dependent on how theapplication server is written. What is said here is conceptually true, if not actually true ;-)
2. Again, saying “client-to-client” is a simpliﬁcation. A single client may have multiple threads
interacting with multiple beans, and a context switch might be performed to serve differentrequests from a single client. Again: conceptually true, if not actually true.Chapter 21 Introduction to Enterprise JavaBeans 476
as we go along. For now, be aware that the container will start, stop, instantiate,
destroy, and provide network services to the EJBs it contains.
Bean Types 21.2.2
Enterprise JavaBeans come in more than one variety. Let’s take a look at those.
Session Beans 21.2.2.1
A session bean  is a reusable component that represents a collection of server
methods. The intention is that each such method represents some businessprocess, such as 
addCustomer() , createShoppingCart() , and so on.
Session beans are thus organized around business processes. Actually, a
session bean is not much more than a facade that collects a business processAPI into a single class. But remember what EJBs give you—networked server-based functionality, load balancing, clustering features, reliability, failover, andthe ability to handle increased demand by merely adding more 
Bean  instances
and server hardware. The power comes not from how EJBs extend the language,but from how they automate and hide infrastructure.
Session beans come in two major varieties: stateless and stateful. Let’s take
a look at what they offer and the differences between the two.
Stateless Session BeansWhat they are. A stateless session bean is one where each method call is
completely independent of any other method call, whether by one or manyclients.
An EJB application designed this way has certain advantages. Since a single
Bean  instance can be switched from client to client on demand (because no
state information is kept between method invocations), a small number of Bean
instances can handle a large number of clients. Compare this with statefulsession beans described below.
Why you would use them. In a sense, this is the optimum bean. If you can
design your application to use nothing but stateless session beans (perhapsbacked by entity beans), then you have a maximally ﬂexible, extensible, andadaptable enterprise application—one that can be easily scaled from a singleapplication server to a very large cluster. Why? Because the lack of state infor-mation means that any single 
Bean  instance can serve any given client at any477 21.2 Expanding to EJBs
time that it is free without requiring any distribution of client information
betweenBean  instances.
From the client’s perspective, the client can connect to any instance of the
Bean  on any server at any time to get the same work done.
Stateful Session BeansWhat they are. A stateful session bean is one that remembers its client be-
tween method invocations. It maintains some information between calls froma client. Because of this, a given 
Bean  instance can only handle one client at a
time, and if an instance is to be switched between clients, the informationabout the previous client must be saved so that the client’s session may berestored later.
An application that is designed around stateful session beans will generally
require more resources than one designed around stateless session beans(described above) because each active client requires a dedicated instance ofthe 
Bean .
Why you would use them. We think we’ve beaten the issue of the advan-
tages of stateless beans into the ground. But what are the advantages of astateful bean?
Many types of client interaction require the bean to “remember” some-
thing about the client. The classic (and, by now, almost cliché) example is aWeb-based shopping cart application. The remote interface for a stateful
ShoppingCart  EJB might look something like this:
createCart
Creates a new shopping cart for the customer.
addItem
Adds an item to the shopping cart.
delItem
Removes an item from the shopping cart.
purchaseCart
Processes the cart; charges the credit card; generates pick list, shipping list,and invoice; discards cart.
abandonCart
Discards the cart.Chapter 21 Introduction to Enterprise JavaBeans 478
Here, items like the identity of the customer and the list of items in the
cart must be preserved between method invocations. Obviously, it is possibleto present such an interface through a stateless bean by creating some sort of asession identiﬁer token and passing that in to every method, thus allowing thestateless session bean to save this data to a database and then load it back, butthe primary advantage of a stateful session bean is that this work is done foryou through the setting of the bean’s context .
So, the primary advantage of stateful session beans is that the server side
can keep track of client data for you. The primary disadvantage is that thecontainer will try its best to keep an instance of the 
Bean  around for every
client, so it must sometimes swap an idle instance out to make room for an ac-tive instance, which is an expensive operation. But—and this is important tokeep in mind—it is much less expensive than reading and writing this data onevery call to a stateless bean! You have to understand what is happening underthe hood if you want to produce an optimal design. If you need state betweenmethod calls, a stateful bean is likely to be the most effective way to go.
Entity Beans 21.2.2.2
What they are.  An entity bean is often described as an object that represents
a row in a database table. This is the most typical case, but it isn’t always so.We have worked on a J2EE application where the entity bean represented anXML document in the ﬁlesystem.
The general idea is that enterprise applications tend to work on lists of
similar things: customers, employees, locations, accounts, servers, inventoryitems, and so on. An entity bean is an object that represents a single item insuch a list. In other words, it is an interface to a data item. And, yes, in practicethere is one entity bean class for a table and one instance of the class foreach row.
Obviously, a J2EE container doesn’t maintain an in-memory instance for
every row of every table. In fact, you can think of both entity beans and sessionbeans as ways to automate keeping the optimal balance between in-memoryinstances for speed and data storage for memory utilization.
Entity beans can be written to manage the persistent storage itself, using
code added to the bean implementation by the bean author (this is known asbean-managed persistence , or BMP), or they may be written to allow the
container to automatically manage the data in the underlying database for you(this is known as container-managed persistence , or CMP). Which you use may479 21.2 Expanding to EJBs
depend many factors, including the databases your container supports, the
complexity of your database, the quantity of non-Java clients, or the amountof legacy code.
Entity beans can be a hard sell in many development environments. We
can see three strong reasons to resist the use of entity beans.
1.Heterogenous environments.  In many enterprises, rich and diverse sets
of development environments exist—Windows.NET and ASP clients,mainframe clients, C and C++ applications, third-party applications, andJava. The solution many database environments adopt is to use storedprocedures that are shared across all of these platforms to concentratedatabase access into a common set of code. Stored procedures do not tendto be written with the kind of strict row-to-object mapping that entitybeans model so well; instead, they are often designed to support speciﬁcbusiness processes. That ﬁts so well with the session bean model that youmay be tempted to implement a session bean facade in front of such storedprocedures and leave it at that.
2.Legacy code.  A variation on the above argument exists when there is al-
ready a considerable body of code, perhaps even Java code written directlyusing JDBC, that accesses the database and performs the common opera-tions. Here again, the simplest solution is to put a session bean facade onthe already existing code.
3.Mobile cheese.  One of the trendy business books published recently is ti-
tled Who Moved My Cheese?  and it is about the negative ways in which
people react to change. You might very well meet resistance simply becausethe technology is new and unfamiliar, and represents a change in thinkingabout data persistence from what the development staff is used to doing.
So, where is it suitable? Entity beans are particularly well suited to environ-
ments that are homogenous by being based either mostly on Java or onCORBA/IIOP. Further, they are well suited to environments where the bulkof the work is the editing and manipulation of small numbers of entities persession, as opposed to large reports or statistical queries where a session mightwant to use many or all rows in a table.
Please note that using entity beans in such appropriate cases in no way
precludes other types of use! You just won’t likely use entity beans for them.In other words, you don’t have to use it just because it is there.Chapter 21 Introduction to Enterprise JavaBeans 480
One further word. This is by no means an established doctrine, but it
seems to be common practice to keep entity beans hidden behind session beans.In other words, it seems to be commonplace to not allow clients (Web applica-tions, Java applications) to communicate directly with entity beans, but ratherto have session beans perform all entity bean operations. This is probably be-cause the idea of session beans is to decouple business process from implemen-tation details, and entity beans, no matter how much they hide the underlyingdatabase, are still rather tightly coupled to the implementation of the datastorage.
Why you would use them. Essentially, they allow you to write your data
access layer exactly once, and then reuse it any number times without worryingabout capacity and management. Also, by trying to keep the most often useddata in fast memory, they can, when running on a powerful container or clusterof containers, keep many client operations running much faster than a strictwrite-read update back end.
Message Beans 21.2.2.3
What they are. We’re going to gloss over message beans in our book, but
you should know what they are. A message bean represents an interface to amessage queue. An entity bean represents a transaction where completion ofthe call tells you the operation has fully completed. A message queue, on theother hand, is an interface where you are given the ﬁrm promise that systemwill get to this when it can. The client doesn’t know where or when the messagewill be handled. It doesn’t know if it was successful or not. But it does knowthat it is the problem of the queue reader.
There are many such operations in large enterprises. And there are many
products that implement such functionality. Microsoft offers Message QueueServer (MSMQ). IBM has MQSeries. Message queues are common with oper-ations that take time, or need to be batched, or require human intervention.
Why you would use them.  Let’s go back to our shopping cart idea. Man-
agement might want a daily sales report. You could send each and every itempurchased to a message bean. Then a process to read that queue might bekicked off once a day and the report produced without hitting the database thatsupports all the current Web users. That’s a good example of how a messagequeue (and thus a message bean) might be used. Again, we’re not going to workwith message beans here.481 21.2 Expanding to EJBs
Under the Hood 21.2.3
We’re not going to take apart the source code for JBoss here, but we do want
to spend some time talking about what is going on in an EJB container. It isn’tmagic. The whole system is built on some familiar technologies that you canlearn all about if you want to. First of all, the default protocol for EJB sessionand entity beans is RMI. That’s right. A major part of an EJB container is thecode to set up RMI connections between beans and clients. RMI is an applica-tion protocol that deﬁnes how to encode the state of a Java class, transfer it overa network (using TCP/IP sockets), and restore the coded data to a local imple-mentation of the class (the encoding/decoding process is called marshaling/
unmarshaling ). That’s part one. Knowing where to ﬁnd the appropriate bean
is the next part.
WHAT’SI NA  NAME? AN INTRODUCTION TO  JNDI 21.3
JNDI abstracts a type of service known generically as a directory service. We
need to introduce that concept and then describe a few common examples ofsuch systems. Then we can explain how JNDI abstracts these various services.
Naming and Directory System Concepts 21.3.1
Directory services are one of the dark mysteries of modern computing. Why?
Because if the people who developed these systems ever let on how simple theyactually are, everyone would understand and be able to use them well. Thenwhere would we be?
In practice, a naming system is what we programmers call an associative
array, or, when we are feeling less verbose, a simple hash of name/value pairs.That’s it. The core concept isn’t any more complicated than that. The mostfamiliar naming service out there (one that we are sure you use every day)is the Internet Domain Name Service, or DNS. This is a system that mapsdomain names (like 
www.somedumbnetwork.net ) to IP addresses (like
205.117.29.1 ). In the world of directory services, such a name/value pair is
called a binding .
Of course, the devil is in the details. DNS is implemented by a complex
network of name servers that pass requests up and down a distributed hierarchyof name servers. That part can get quite complex, but the core idea is that youhave a name (the domain name) and a value (an IP address) that you joinChapter 21 Introduction to Enterprise JavaBeans 482
together. DNS can actually bind other information, such multiple alias names
for a single canonical name/IP pair, a mail handler name for a domain, andother general purpose data which the DNS administrator can choose to share.
So, naming services are a way to join names and values together.Before we move on, let’s make sure we understand how general and uni-
versal this concept is. A ﬁlesystem can be thought of as a naming service. AUNIX ﬁlename (like, say, 
/etc/inittab ) can be thought of as a way of linking
that name with the data it contains. So the key is the name ( /etc/inittab )
and the value could be either the data it contains, or perhaps a ﬁle handle that,when read, returns the data contained in the ﬁle.
3
There are some other common features of naming systems that we
should point out. They are frequently hierarchical. A domain name such as
www.multitool.net  actually indicates the host www in the multitool  domain
within the net domain. The name www.multitool.com  is not related in any
way with the name www.multitool.net . They are contained in different top-
level domains. They do not intersect. Likewise, the name /etc/inittab  would
be completely unrelated to, say, /tmp/inittab —because inittab  is a ﬁle in
the etc directory, and inittab  is a ﬁle in the tmp directory. So, most naming
systems are hierarchical. They differ in how the levels of the hierarchy are indi-cated, and in how absolute names are constructed from components of thehierarchy, but they share this common concept.
So, that’s naming. Next come directory concepts.A naming service is good, but what happens if you don’t have the key and
you need to go looking? That’s what directories are for. Consider the ls com-
mand. Why do you need it? Have you ever run it? Of course you have. Why?Because you often don’t know the exact name of something or where exactlyit is in a naming system. You need to be able to look for what you want. Thatis the “directory” part of naming and directory services. You want somethingthat lets you query and browse the naming system to ﬁnd what you want.
The ls command will give you the complete contents of a directory, or it
will allow you to query a directory by specifying wildcard names. These are ex-amples of browse  and query  features. We’ll talk more about these concepts in
relation to naming and directory systems in general and to JNDI in particular.
3. The ﬁrst case would be a name/value pair, the second case would be a name/reference pair.
The distinction is often not important, but it does exist.483 21.3 What’s in a Name? An Introduction to JNDI
Key to directory services is the concept of a context . A context is a set of
bindings with a common name, expressed in a common way. In our ﬁlesystemexample, 
/etc  is a context. A context may contain other contexts that follow
the same naming convention. For example, /etc/sysconfig  is a context that
is a subcontext  of /etc . Likewise, multitool.net  is a subcontext of the
net context.
A context is distinguished by having a naming convention for itself and
its subcontexts, and it must have means of creating bindings, removingbindings, and querying or listing bindings.
Since JNDI is designed to operate across multiple naming and directory
systems, it is necessary to talk about  naming systems  and namespaces . A naming
system is a connected set of contexts that use the same naming convention.Thus, Internet domain names are a naming system, UNIX ﬁlenames are anaming system, and so on. A namespace is a set of names in a naming system.These terms will have signiﬁcance later when we’ll talk about JNDI.
A naming system binds a name to a value. Directory services bind a direc-
tory object to one or more attributes . A naming service could be thought of as
a simple case of a directory where “name” and “value” are the attributes of thedirectory object. A directory can store many more attributes (bindings) for agiven name than can a naming service. Directory services also (in general)support the notion of searches and queries.
A directory object  represents an object in the computing environment. This
might be a server, a printer, a user, a router, whatever. Each object would havea set of attributes that describe the object. A directory  is a connected set of
directory objects.
In the directories we know about (see Sections 21.3.2.4 and 21.3.2.5 for
the limits of our knowledge), directory objects are arranged in a hierarchy, sothat they serve as naming contexts as well as directory objects.
Common Directory Services 21.3.2
Now that you have seen the concepts, we can cover a few common implemen-
tations of naming and directory services.
Domain Name Service (DNS) 21.3.2.1
This is probably the most familiar naming and directory system. It is used all
the time to resolve Internet host names to IP addresses, and it is commonlyused to obtain the names of mail servers for domains. It also has less often usedChapter 21 Introduction to Enterprise JavaBeans 484
features to look up arbitrary data for domains. These features are not used often
because standard DNS has no authentication and authorization controls.Information in DNS is, inherently, public information.
Filesystems 21.3.2.2
The UNIX ﬁlesystems, NTFS, FAT, and other ﬁlesystems provide name-to-
data mappings that are compatible with JNDI. When they are combined withnetworked ﬁlesystems, such as SMB, CIFS, NFS, and even rsync  and FTP,
ﬁles can be made available over the network through JNDI.
LDAP 21.3.2.3
LDAP is the “Lightweight Directory Access Protocol.” There is an old joke that
a platypus is a swan put together by a committee. If that is so, then it oftenseems that LDAP is the platypus of name and directory services.
To be fair, LDAP has the heavy burden that goes with any standards that
are produced by a large committee-driven process. It has to try to be all thingsto all people. LDAP is a query and transport protocol speciﬁcation of theISO X.500 naming and directory service standard.
4 Like other ISO and ANSI
standards, the speciﬁcation is robust to the point of uselessness. LDAP is de-signed to allow every possible name system in the Universe to be subsumed intoa single, uniquely addressable Directory Information Tree. Every entry inLDAP has a distinguished name , which is an unambiguous speciﬁcation of the
name from the root of the tree. So far, this is like the other naming systems.There is a root, there are nodes at each layer, and then, at the bottom, there isdata. What makes X.500 and LDAP different is that each node consists of notjust a name, but of a type/name pair . An example of an LDAP name might be:
url=http://www.multitool.net/,cn=M. Schwarz,o=MAS Consulting,st=MN,c=us
4. If you are dying to know, X.500 is a naming and directory services standard from the Inter-
national Standards Organization (ISO), an international technical standards body. X.500 hasa transport and query protocol speciﬁcation of its own, but it uses the ISO OSI (Open SystemsInterconnection) network protocol standard. OSI is rarely used because TCP/IP took off ﬁrstand has been hacked and hacked again to keep it alive and well. At one time, it looked like IPaddress space limitations would push the world to OSI protocols, but hacks like CIDR, privatesubnets, and now the (less hackish) IPv6 make it look like TCP/IP will be here for quite awhile. In a sense, then, LDAP is X.500 over TCP/IP. Or, to put it another way, LDAP is aTCP/IP implementation of ISO X.500.485 21.3 What’s in a Name? An Introduction to JNDI
At each node there is a type ( c, cn, url, and so on) and a name (or value)
for that type. The deﬁnitions of these types and the lists of types permitted ata particular level depend on a schema  which is controlled by whoever controls
the server that serves the given level of the hierarchy. In other words, as withDNS, if you want to be part of the public, global namespace, you have to playby the rules of the ancestor nodes. You can do what you want with your pointof control and below, but you must obey the naming schema of all of yourancestors.
5
This explains why so few organizations actually use LDAP globally
(i.e., integrating directly with all other public LDAP servers in the world). In-stead, they tend to use LDAP by setting up schema and servers that are com-pletely internal and private so that they do not have to use the many requiredparent nodes it would take to hook up to the global LDAP namespace.
6
LDAP can (and does) ﬁll books of its own. The type/name pairs are bulky
to type and hard to remember, but they allow you to easily map in entire othernaming systems, by simply assigning a type to a naming system and allowingthat system’s names to be values at that level. Remember that these names arehierarchical, so everything under 
cn (normally used for “common name”) ap-
plies to (in this case) Michael Schwarz. If I deﬁned the schema for my space,I could put anything I wanted under that name.
A common use of LDAP is for centralizing authentication and authoriza-
tion data for users. Users authenticate to LDAP and all systems in an organiza-tion can validate a single credential to authenticate the user—the holy grail ofsingle sign-in. Alas, doing this right is nontrivial because LDAP doesn’t specifyany mandatory authentication and encryption scheme. (Thus it is often thehacker’s holy grail of single sniff-in and 0wn3d systems.)
5. We want to be clear: You only have to do this if you wish to give those ancestors and outside
users access to your directories. You are free to create entirely private directory structures thatneed not conform to anyone else’s schema. It all depends on the purpose and audience of yourdirectory.
6. Another reason is that LDAP itself has no cryptographically secure authentication or trans-
port mechanisms. That means that hooking up all your directory data to the global Internetgives hackers a one-stop opportunity to steal your data. Not good. Of course, as with otherprotocols, there are several add-on security mechanisms for LDAP.Chapter 21 Introduction to Enterprise JavaBeans 486
Novell Directory Service (NDS) 21.3.2.4
Novell, the folks behind Netware, came up with NDS, which provides full di-
rectory services like LDAP/X.500, but (according to the computer press—letus confess right now that we have never directly used NDS or Microsoft’s Ac-tive Directory) with a simpler API and easier administration. We don’t knowenough about it to comment on it. But we do know that JNDI can access it.
Microsoft’s Active Directory 21.3.2.5
We have to do the same hand-waving here. Active Directory provides similar
functionality to NDS and LDAP. We don’t know enough about it to commenton it. But, again, JNDI can talk to it.
Putting a Face to a Name: JNDI 21.3.3
The Java Naming and Directory Interface package is designed to provide a
common way to access all of these disparate naming and directory services.
The JNDI architecture consists of the JNDI API, which provides a consis-
tent API, and a Service Provider Interface (SPI), which requires an instanceto connect to each naming service (such as DNS, LDAP, the RMI registry,and so on).
Basic naming system functionality is obtained through the 
javax.naming
package. Directory services are provided by the javax.naming.directory
package.
Since JNDI can span multiple naming and directory systems, there are no
absolute root contexts, so the InitialContext  class exists to provide a base
from which all other names and directories may be looked up.
A Sample JNDI Program 21.3.3.1
The next couple of sections describe a very simple JNDI application that uses
the DNS Service Provider Interface to do directory operations on a DNSdomain. The source code for the class is shown in Example 21.1.487 21.3 What’s in a Name? An Introduction to JNDI
Example 21.1 A sample JNDI application
   import java.util.*;
   import javax.naming.*;   import javax.naming.directory.*;
 5
   public class GetDomain {     private Hashtable env = new Hashtable();     private DirContext dctx;     private String domainQuery;10     public GetDomain(String dom2Query) throws NamingException {       domainQuery = dom2Query;       env.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.dns.DnsContextFactory");       dctx = new InitialDirContext(env);15   }
     public NamingEnumeration getDomainMembers() throws NamingException {
       return dctx.list(domainQuery);     }20     public static void main(String[] args) {       GetDomain gd = null;       NamingEnumeration ne = null; 
25     try {
         gd = new GetDomain(args[0]);         ne = gd.getDomainMembers();
         while (ne.hasMore()) {
30         Object o = ne.next();
           System.out.println("Object ["+o+"]");
         }       } catch (Exception e) {35       e.printStackTrace();       }     }   }
40Chapter 21 Introduction to Enterprise JavaBeans 488
Example 21.2 is what we get when we run this program against one of the
author’s DNS domains.7
Example 21.2 Running GetDomain  against the multitool.net  domain
[mschwarz@cassidy simpleApp]$ java GetDomain multitool.net
Object [baroni: java.lang.Object]Object [erik: java.lang.Object]Object [www: java.lang.Object]Object [class: java.lang.Object]Object [jboss: java.lang.Object]Object [penguin: java.lang.Object]Object [mail: java.lang.Object]Object [cvs: java.lang.Object]Object [stiletto: java.lang.Object]Object [penfold: java.lang.Object]Object [ns2: java.lang.Object]Object [ns1: java.lang.Object]Object [irc: java.lang.Object][mschwarz@cassidy simpleApp]$
The GetDomain main()  method.  This is another “single class” program
example. In this case, the main()  method creates an instance of the class,
passing the ﬁrst command-line argument to the constructor. We’ll cover theconstructor in the next section. By now, you will recognize that this is one ofthe purely pedagogical examples. Note the complete lack of input validationand error checking on the number and content of the command-line argu-ments.
Establishing an initial context.  For both naming and directory services, it
is necessary to establish an initial context . A context is a collected set of names.
A directory system is a connected set of contexts. Our example is for DNS.We must set an initial context for DNS. The class constructor (lines 11–15)does that.
7. Note that directory operations in the JNDI DNS Service Provider Interface are done with
DNS zone transfers. Many domains, especially large domains, disable zone transfers either forsecurity reasons, or because they generate a lot of network trafﬁc and are a popular tool forDenial of Service (DoS) attacks on name servers. To put it simply: This program won’t workon a lot of domains, especially from outside.489 21.3 What’s in a Name? An Introduction to JNDI
So what is going on here? This constructor is a bit unusual, isn’t it? The
InitialDirContext  is a “context factory.” It takes an “environment,” which
is a Hashtable , that provides the information needed to make the context.
And what is that information? At a minimum, the constant value associatedwith 
Context.INITIAL_CONTEXT_FACTORY  must be associated with the class
name of the real context factory for the directory system—in this case,
com.sun.jndi.dns.DnsContextFactory . If you are from a C/C++
background, think of this as a function pointer.8
We now have an initial directory context, which we can use to search.
Going from the initial context to a DNS entry.  Let’s now consider a use
case for this little program. The program begins at main() , line 21. We create
an instance of our class and an instance of NamingEnumeration  (which we
will discuss in a moment). We do some very lazy error handling by enclosingthe entire process in a simple 
try/catch  block9 and treating all exceptions the
same. The ﬁrst thing we do is construct an instance of our class, passing in theﬁrst command-line argument
10 as the domain name to use for setting the initial
context.
Next, we get an enumeration of all the names in that context. This is done
through a method in our class that simply wraps the actual JNDI call that ob-tains this enumeration. The real event is on line 18. The 
list()  method of
the directory context returns a NamingEnumeration , which is an extension of
the classic Enumeration  Java class. With it, you can iterate over the contents
of the context—which we do in lines 29–33. We rely on our old Object
method, toString() , to make these names readable for us. Of course, each
8. Of course, it is not. What really happens here is that the code in InitialDirContext
uses the Class  class to load the speciﬁed class by name. All JNDI context factory classes imple-
ment the Context  interface, so InitialDirContext  uses the ability of Class  to load the
class by its name as an instance of Context .
9. JNDI has a particularly rich collection of exceptions. When a naming or directory operation
fails, it is usually possible to determine exactly how and why it failed from the type of
Exception  thrown. All JNDI Exception s extend NamingException , so they also make it
quite easy to handle them in a lazy manner. In a real production application, you should atleast make some effort to differentiate between failures where the network is not working andfailures where the network is working ﬁne, but the named resource does not exist. Believe us,if you have to support your application in production you will care about the difference.
10. Again, very bad production coding. Note that no attempt is made to check the number of
arguments passed or their contents.Chapter 21 Introduction to Enterprise JavaBeans 490
entry in the enumeration is actually a binding that binds the name to either a
name object or to a context object.
If, when you encounter a context, you save the current context, set the
current context to the new context, and make the method recursive, you wouldwalk from the present context on down. In theory, you could set your initialcontext to “
.” (which is the root of DNS) and this program would dump the
whole domain name system to you.11
Learning More about JNDI 21.3.3.2
As with so much in this book, we have had time and space to cover only the
basics. There is so much more to JNDI. For now we want to point you at Sun’sexcellent JNDI Tutorial.
12 JNDI is covered in more depth in many books,
including JNDI API Tutorial and Reference: Building Directory-Enabled Java
Applications  by Rosanna Lee and Scott Seligman, ISBN 0201705028.
Using JNDI with JBoss 21.3.4
For our purposes, it is important to know that JBoss uses JNDI to provide
much of the EJB container infrastructure. The primary use is to look up theEJBs, as we shall see in the code examples in the following chapters.
REVIEW 21.4
We covered the basic concepts behind the various types of EJBs. We talkedabout the events in the life of a bean. From here we will go on to describe actualimplementations and discuss how a bean is written and deployed to a J2EEcontainer.
11. If you are a relatively unschooled net hooligan, let us assure you that this is only “in theory.”
Before you go off and attempt a DoS attack on the entire Internet with a simple Java class likethis, we have to tell you that JNDI DNS enumerations depend on a DNS protocol featurecalled zone transfers . Most high-level DNS servers will not do zone transfers at all, and many
will only accept zone transfer requests from internal addresses. Sorry.
12.
http://java.sun.com/products/jndi/tutorial491 21.4 Review
WHATYOU STILL DON’T KNOW 21.5
Where to begin? Your humble authors themselves are still learning the intrica-
cies of J2EE. We have more or less ignored message beans. We have not de-scribed the local and local home interfaces, concentrating instead on the remoteaccess of beans. This is because remote access is what client applications willmost often use. But entity beans, for example, can only call one anotherthrough the local interface, and, in practice, a session bean will likely provideremote access but call any other beans through a local interface.
A quick examination of your local bookstore’s computer books section
will reveal that J2EE is a vast topic, just by the number of books on the topicand their thickness. Our goal here is to give you enough to make a quick startin using EJBs on a Linux-hosted application server. From there—well, thosethick books are probably your next stop.
RESOURCES 21.6
•http://java.sun.com/products/jndi/tutorial/trailmap.html
is Sun’s JNDI tutorial.
• Sun has a J2EE tutorial ( http://java.sun.com/j2ee/1.4/docs/
tutorial/doc/index.html ) that is a great place to start.Chapter 21 Introduction to Enterprise JavaBeans 492
In this chapter we write a very simple EJB and compile it.
WHATYOUWILL LEARN 22.1
• What a simple EJB example looks like.
• What are the several pieces that you need to make an EJB.• How to compile the pieces of an EJB.
You’ll ﬁnd the full text of our example on the book’s Web site at
http://www.javalinuxbook.com/ . We will only use code excerpts in this
chapter.
EJB S:YOU DON’T KNOW BEANS ? 22.2
Enough theory about EJBs and naming services and the like. It’s time to put
together an actual EJB so you can see one run. First we need to write our EJB
493Chapter 22
Building an EJB
classes, then compile them. Then, in the next chapter, we’ll package them,
along with other supporting information, into an EAR ﬁle. But let’s begin bywriting some Java classes.
It’s not that we just write a single EJB class, say a session bean, and we’re
done. Keep in mind that we’re going to be using these beans in a distributedenvironment, so we need a way to have an application running on one systemﬁnd, create, look up, or otherwise access the bean running on another machinesomewhere in our enterprise network. The job of EJBs is to simplify (up to apoint) the efforts of the application programmer doing all this, and make itseem as if the bean is quite local or at least independent of location.
Here’s how it works. Any application that wants to use the functions pro-
vided by an EJB must ﬁrst locate the bean. It uses a naming service(Chapter 21) for this. What it gets from the lookup is something called a home
interface . The home interface object is in effect a factory for producing remote
interfaces , which are the proxies for the actual service(s) that our application
wants to use. A remote interface has the method signatures that give the func-tionality that the application is after, but it doesn’t do the actual work of thebean. Rather, it is a proxy for the bean. The remote interface’s job is to do allthe work behind the scenes to marshal the arguments and send them off to thebean, and to unmarshal the results returned from the bean.
So it’s a three step process:
1. Do the lookup.
2. Use the home interface to produce a remote interface.3. Use the remote interface to call the methods on the bean.
What’s all this talk about interfaces? They provide a way to deﬁne the
methods you want to use, but without having to write all the code to do it. Forexample, with the remote interface you may deﬁne a method to do somethingwith several arguments, say 
Blah(a, b, c) . Now the remote object doesn’t
really do the Blah  work; its job is to marshal the arguments (serialized a, b,
and c) and send them off to the EJB to do whatever Blah  is, and then unmar-
shal the results. So you as an application programmer will write the guts of
Blah  in the EJB object, but for the remote object, its proxy, you only need to
declare the method signature. Then the job of the EJB container (e.g., JBossor Geronimo) is to provide the smarts of the proxy—that is, to generate a Javaclass that implements your interface, along with the code that knows how tocontact your EJB and marshal and unmarshal the arguments and results. That’sChapter 22 Building an EJB 494
right, the EJB container (server) makes code that uses your interfaces, along
with its own code, to do the infrastructure work of EJBs.
Talking about all these pieces of an EJB can be confusing, too. Sometimes
it is helpful to think of an EJB as a single class; sometimes it’s better to thinkof it as a family of classes that act together pretending to be a single bean thatis distributed across several hosts. This can make it a bit confusing when talkingabout an EJB—do we mean the family of interacting classes or do we mean thesingle class that provides the application functionality that we want?
The names of EJB classes and EJB interfaces (which we will extend and
implement) don’t help much either—they can be confusing, too. For example,we will extend 
EJBObject , but not to write an EJB session bean; no, we extend
SessionBean  for that, but EJBObject  is the name for the remote interface.
Go ﬁgure.
A bit of perspective may help here. The names Remote , Local , and Home
are used as modiﬁers on these classes. Local  means “on the same host as the
bean.” But Home  and Remote  don’t offer much of a clue. The home interface
is what we get from a lookup; it produces remote objects (objects which imple-ment the remote interface). A remote object is what our application uses as ifit were a Java object doing what we need, even though its application-speciﬁcactivity will happen on a bean somewhere else on the network.
Let’s look at a very very simple example, to see the pieces in action.
SessionBean 22.2.1
Let’s write a stateless session bean that will compute the time value of money.
Why that? Well, two reasons. First, we already have an SAMoney  class with a
save()  method for computing some values; and second, we need some simple,
stateless, but somewhat computationally intensive task to make for a halfwayreasonable example.
The real guts of an EJB, the core of the application functionality—in our
example, the computation of the time value of money—is the session (or entity)bean. For our session bean we begin by implementing the 
SessionBean
interface, which means that we need to deﬁne these methods:
public void setSessionContext(SessionContext context) { }
public void ejbCreate() { } public void ejbRemove() { }public void ejbActivate() { } public void ejbPassivate() { } 495 22.2 EJBs: You Don’t Know Beans?
which, for our example, we can implement as empty methods. A stateless ses-
sion bean never needs an activation or passivation method to do anything—itis pointless to passivate a stateless session bean. Why? Since it’s stateless, anyinstance of it is as good as any other, so the instances are interchangeable andthere’s no need to passivate one to get to another—just use the one available.It follows that if a bean is never passivated, it will never have to be activated.
But why no body to the 
ejbCreate()  method? Well, our bean isn’t doing
anything extra. This would only be used if our example were more complicatedand we needed to do application-speciﬁc initializations. For example, if thebean had to connect to a database (and did not use entity beans), it might es-tablish the JDBC connection in 
ejbCreate  and close it in ejbRemove() .
Similarly, we can have an empty ejbRemove()  method.
Next we add our own methods, the ones that provide the application
functionality. For our MoneyBean application, we’ll add save()  and debt()
methods which will use an SAMoney  class by calling its save()  and debt()
methods. Example 22.1 is the listing of the SessionBean .
Example 22.1 Listing of our implementation of a SessionBean
package com.jadol.budgetpro;
import net.multitool.util.*;
import javax.ejb.*;/**
 * Actual implementation of the EJB */public classMoneyEJBean  implements SessionBean{  protected SessionContext sessionContext;      // typical; just not used now
  public Cost
  save(double amt, double rate, double paymnt)    throws java.rmi.RemoteException  {    return SAMoney.save(amt, rate, paymnt);  } // saveChapter 22 Building an EJB 496
  public Cost
  debt(double amt, double rate, double paymnt)    throws java.rmi.RemoteException  {    return SAMoney.debt(amt, rate, paymnt);  } // debt
  public void
  setSessionContext(SessionContext context)  {    sessionContext = context;
  } // setSessionContext  public void
  ejbCreate() { }
  public void
  ejbRemove() { }
  public void
  ejbActivate() { }
  public void
  ejbPassivate() { }
} // interface MoneyEJBean
EJBObject 22.2.2
At the other end of the chain of EJB objects used to accomplish all this distribut-
ed computing is the object that our application is actually going to touch.When our application creates an EJB, it, acting as a client, won’t actually getits hands on the distant session (or entity) bean because that session bean isrunning somewhere out in the network. There will be, however, a proxy object,acting on behalf of the distant EJB. It is described as the remote interface , be-
cause it is remote from the EJB (though very close to the application). It is aninterface because J2EE supplies a class that does the hidden work of marshalingthe data, contacting the EJB, sending the data and receiving the results; theapplication developer only adds a few additional application-speciﬁc methods,via this interface (Example 22.2).497 22.2 EJBs: You Don’t Know Beans?
Example 22.2 Sample remote interface
package com.jadol.budgetpro;
import javax.ejb.*;import java.rmi.*;import net.multitool.util.*;
/**
 * Remote Interface for the Money EJB */public interfaceMoney  extends EJBObject{  // the methods from the remote object which we will call  public Cost  save(double amt, double rate, double paymnt)    throws java.rmi.RemoteException;
  public Cost
  debt(double amt, double rate, double paymnt)    throws java.rmi.RemoteException;
} // interface Money
The crucial thing to note with this interface is that we have deﬁned two
methods that match the two methods in our SessionBean —the save()  and
debt()  methods. These are the methods that will actually be called by our ap-
plication, and the J2EE mechanisms will do their work behind the scenes toconnect to the methods of our 
SessionBean  implementation and send back
the results.
EJBHome 22.2.3
Between the SessionBean  and its remote interface lies the home interface , also
called the remote home interface , since it pairs with the remote interface. An
object that implements the home interface is the kind of object that is returnedafter the 
lookup()  and then narrow()  method calls. It is used to create a ref-
erence to the EJB. The home interface for a stateless session bean needs onlyimplement a single method, the 
create()  method with no arguments. The
body of the method needs do nothing. All the real work is done by theunderlying object supplied by J2EE.Chapter 22 Building an EJB 498
Example 22.3 is a listing of our home interface. It looks like an empty
shell, but it is all that we need. The rest is handled by J2EE.
Example 22.3 Sample (remote) home interface
package com.jadol.budgetpro;
import javax.ejb.*;import java.rmi.*;
/**
 * Remote Home Interface */public interfaceMoneyHome  extends EJBHome{  public Money  create()    throws CreateException, RemoteException  ;
} // interface MoneyHome
Summarizing the Pieces 22.2.4
With these three pieces—the session bean, the remote interface, and the home
interface—we can see the structure of the key pieces of an EJB. Let’s reviewwhat we have:
Talked about as Extends/implements Application object
remote interface EJBObject Money
home interface EJBHome MoneyHome
the implementation SessionBean MoneyBean
EJBLocalHome  and EJBLocalObject 22.2.5
When the session or entity bean is going to be referenced by application code
that resides on the same host as the bean, there are variations on the home andremote interfaces that allow for more efﬁcient execution. When you know thatthe beans are local to this host, you should use a local interface (Example 22.4)499 22.2 EJBs: You Don’t Know Beans?
Example 22.4 Sample local interface
package com.jadol.budgetpro;
import javax.ejb.*;import java.rmi.*;
/**
 * Local Interface for the Money EJB */public interfaceMoneyLocal  extends EJBLocalObject{  // the methods which we will call
} // interface MoneyLocal
Example 22.5 Sample local home interface
package com.jadol.budgetpro;
import javax.ejb.*;import java.rmi.*;
/**
 * Local Home Interface */public interfaceMoneyLocalHome  extends EJBLocalHome{  public MoneyLocal  create()    throws CreateException;
} // interface MoneyLocalHome
and a local home interface (Example 22.5). The local interface is in place of the
remote interface and extends EJBLocalObject . The local home interface is in
place of the remote home interface and extends EJBLocalHome .
Why bother? Well, there’s no need to marshal and unmarshal all that data
if the calls are staying on the same host. This saves execution time. Perhapsmore importantly, since the arguments don’t have to be marshaled andChapter 22 Building an EJB 500
unmarshaled, they don’t have to be serializable. For some applications, this is
the only way that they can use beans.
Finally, keep in mind that the choice of local versus remote interfaces is
not necessarily an either-or choice. For our session bean we have deﬁned bothkinds of interfaces. Then the deployment can determine which one will be used.
Compiling Your Beans 22.2.6
In order to compile these bean-related Java classes, you need to have a J2EE
JAR in your classpath. If you’ve installed JBoss into 
/usr/local/jboss , you
could add the JAR to your classpath this way:
export CLASSPATH="/usr/local/jboss/client"\
"/jboss-j2ee.jar:.:${CLASSPATH}"
If you have the Sun J2EE reference implementation installed on your
system (in /usr/local ), then you could use:
export CLASSPATH="/usr/local/SUNWappserver"\
"/lib/j2ee.jar:.:${CLASSPATH}"
If you have Geronimo installed on your system (with an environment
variable GHOME  to hold its location), then you would use:1
export CLASSPATH="${GHOME}/repository/geronimo-spec/jars"\
"/geronimo-spec-j2ee-1.0-M1.jar:.:${CLASSPATH}"
In any case, the point is to have in your classpath the JAR ﬁle which
contains the javax/ejb/  classes, such as EJBObject.class . If you haven’t
installed one of these containers on your machine, then download a copy ofthe JAR from the machine where that container is installed. Put your copysomewhere in your classpath, as in the examples above.
1. Our JAR is named geronimo-spec-j2ee-1.0-M1.jar  but yours will likely have a dif-
ferent name by the time the J2EE-certiﬁed version of Geronimo is available. It may likely justhave the trailing 
-M1 dropped from the name; check in the geronimo-spec/jars  directory.
Another option is to use any of the J2EE JARs, for example, from the Sun reference implemen-tation. That’s the advantage of standards. Any of them should work for this compilation step.The resulting compiled code should be deployable to any server. “Compile once, runanywhere,” right?501 22.2 EJBs: You Don’t Know Beans?
If you are using Ant (and why wouldn’t you be?) you will need to put the
path to the J2EE JAR in the classpath which Ant uses. Since Ant can deﬁne itsown classpath, you may want to deﬁne your compile task as something like this:
<target name="compile" >
<javac srcdir="${src}"    destdir="${build}"    classpath="/usr/local/SUNWappserver/lib/j2ee.jar:${stdpath}" /></target>
Now it’s a simple matter to compile. The basic Java compile command:
$ javac com/jadol/budgetpro/*.java
will compile all the various classes and interfaces that make up the EJB. There
may be other classes in your source tree that need to be compiled as well. Withall that going on, you can see why so many people use Ant. With the 
compile
target deﬁned as in our example above, you would need only the command:
$ ant compile
REVIEW 22.3
There are many pieces involved in the construction of an EJB. Besides writingthe session bean implementation, there are the remote and home interfaces tobe written. The local and local home interfaces are optional, but useful, espe-cially in cases where arguments cannot be serialized or where you know thatthe beans and the client will reside on the same host. Compiling an EJB is notdifferent from any other Java compile, but it requires a special JAR in yourclasspath, one that contains the deﬁnitions of the J2EE objects and interfaces.
WHATYOU STILL DON’T KNOW 22.4
We still haven’t shown you how to deploy the EJB, now that you have onecompiled. In the next chapter we’ll show you how to assemble the pieces of theEJB into an Enterprise Archive and then deploy and run it.
More importantly, though, we haven’t covered how to write the code for
stateful session beans or entity beans. Stateful session beans are one-to-a-client-session, rather than taking all comers, so there is a little more to code, and aChapter 22 Building an EJB 502
few small changes required in the ejb-jar.xml  conﬁg ﬁle. (What is the
ejb-jar.xml  conﬁg ﬁle? It is part of the conﬁguration information used to
deploy your EJB, the topic of the next chapter.) But there are some seriouscomplications with entity beans that involve retrieving the bean’s data froma “backing store”—for example, a database—and writing it back. There aremany good references on these topics, and we mention our favorites in thenext section.
RESOURCES 22.5
These are some of our favorite resources for learning about and dealing withEJBs. All of these give much more extensive examples that we have space for,and we encourage you to look at one or more of them.
•J2EE and Beyond  by Art Taylor (Prentice Hall PTR, ISBN
0-13-141745-2) gives a very good overview of all of the pieces of J2EE.At over 1,000 pages, it’s no small book, but it covers a lot more thanjust EJBs.
•Enterprise JavaBeans Component Architecture: Designing and Coding Enter-
prise Applications  by Gail Anderson and Paul Anderson, Sun Microsystems
Press, ISBN 0-13-035571-2. At only 435 pages it is the most concise ofthe three, with the tightest focus and an emphasis on the code.
•Applied Enterprise JavaBeans T echnology  by Kevin Boone, Sun Microsystems
Press, ISBN 0-13-044915-6. At just over 700 pages, it is midway betweenthe other two titles. Like the Taylor book, it covers some related technolo-gies, but gives more depth to EJBs than Taylor, as that is its focus. It pro-vides more examples than the Andersons, but its examples are not anydeeper, just broader.503 22.5 Resources

In this chapter we take apart an EAR, put it together, and then send it out into
the world.
WHATYOUWILL LEARN 23.1
• What is in an EAR.
• How to build an EAR by hand.• How to integrate some of the tools we’ve covered before (CVS and Ant)
to automate this and avoid having to build an EAR by hand.
• How to deploy an EAR to JBoss.• How to deploy an EAR to Geronimo.
Some people may wonder why anyone would want to describe to you how
to build an EAR by hand. The task of constructing such things is increasinglyautomated, often performed by IDEs, Ant, or J2EE containers or related tools.So why the grubby details of doing it yourself? Two reasons, really. First, if you
505Chapter 23
Deploying EJBs
hide behind the tool, you never fully understand what is happening. It looks
too much like magic, and you’re helpless if the magic fails. Secondly, seeinghow it works inside out gives you a better understanding of what is going onand even empowers you to do a custom version for your project. If this discus-sion sounds familiar, it may be because you read something similar about IDEsin Chapter 10.
LEND MEYOUR EAR: E NTERPRISE  PACKAGING AND  DEPLOYMENT 23.2
There are lots of pieces that are needed to make Enterprise JavaBeans (EJBs)work—not only the classes and interfaces that we have deﬁned, but supportingclasses and other Web application pieces (e.g., JSP ﬁles) as well. They all haveto be in the right place. The distributed nature of EJBs means that we need away to distribute them across (potentially) several machines. And its not just amatter of putting a single Enterprise JavaBean on a single host. A single beanis typically part of a larger collection of classes and other ﬁles (properties, im-ages, JSP, HTML) that work together to make an application. The mechanismto manage all this is the Enterprise Archive, or EAR ﬁle.
Let’s take a look inside an EAR and examine its pieces. Knowing what
it’s made of will make an EAR look less intimidating, but will also help usunderstand what we’ll need for our application.
TIP
An EAR ﬁle (whose name ends with .ear ) is nothing more than a JAR ﬁle with
particular expected contents. So you can easily look inside an EAR with the jar
command. Use the -tvf  options for table of contents, verbose, and ﬁle
(meaning that the next argument is the ﬁlename).
The budgetpro.ear  ﬁle will be our example. We haven’t yet discussed
building this ﬁle, but let’s peek ahead, to see how it will be put together(Example 23.1).
Notice that, at the top level, there are two ﬁles and a directory, and inside
the directory there are two other ﬁles (Table 23.1).
From the standpoint of building an EAR yourself, you need to create all
the ﬁles listed in Table 23.1 and then put them all together into a JAR ﬁle. Sowe need to understand those pieces.Chapter 23 Deploying EJBs 506
Example 23.1 Contents of a sample EAR ﬁle
$ jar -tvf budgetpro.ear
    0 Wed May 19 05:58:02 CDT 2004 META-INF/  110 Wed May 19 05:58:00 CDT 2004 META-INF/MANIFEST.MF  295 Wed May 19 05:58:00 CDT 2004 META-INF/application.xml11498 Wed May 19 05:58:02 CDT 2004 budgetpro.jar12626 Wed May 19 05:58:02 CDT 2004 budgetpro.war$
Table 23.1 Files inside an EAR archive
Content Type Name
The EJB-JAR ﬁle—the JAR ﬁle that contains our EJB. JAR budgetpro.jar
The Web application with servlet and JSP ﬁles. WAR budgetpro.war
A standard JAR manifest; at a minimum, it gives the
version number of the JAR ﬁle format—for example,
Manifest-Version: 1.0 .text MANIFEST.MF
The deployment descriptor , an XML description of
what’s what.XML application.xml
A directory with other ﬁles. directory META-INF
The plain ﬁles that appear in the META-INF  directory are simple. The
MANIFEST.MF  ﬁle is like any JAR manifest and can contain simply the JAR
version number:
Manifest-Version: 1.0
The application.xml ﬁle is shown in Example 23.2
Two JAR ﬁles are mentioned in this XML description ﬁle. This tells the
container that we have two modules, an EJB and a Web application. The Webmodule also deﬁnes a context root, which is the portion of the URL pathnamethat is intended to direct requests to this Web application. For example, if yourhost is 
www.bighost.com , then the context root of /budgetpro  means that
the URL you will use to access the Web application in this EAR is
www.bighost.com/budgetpro/  followed by whatever other ﬁlename you
might need to append, such as a JSP ﬁle—or, if left blank, the default
index.html  ﬁle.507 23.2 Lend Me Your EAR: Enterprise Packaging and Deployment
Example 23.2 Sample application.xml  ﬁle
<?xml version="1.0" encoding="ISO-8859-1"?>
<application>
  <display-name>BudgetPro</display-name>  <module>  <web>    <web-uri>budgetpro.war</web-uri>    <context-root>/budgetpro</context-root>  </web>  </module>
  <module>
    <ejb>budgetpro.jar</ejb>  </module>
</application>
That takes care of the two plain ﬁles. Let’s also look inside the other two
archives, the JAR ﬁle and the WAR ﬁle, and see what they hold.
What’s in an EJB-JAR File 23.2.1
Let’s look ﬁrst at the content of the JAR ﬁle. After that we’ll look at the speciﬁcs
of the XML descriptor ﬁles.
$ jar xf budgetpro.ear    # unjar the EAR
$ ls                      # see what we gotMETA-INF budgetpro.ear budgetpro.jar budgetpro.war$ jar tf *.jar            # list the JAR contentsMETA-INF/META-INF/MANIFEST.MFcom/com/jadol/com/jadol/budgetpro/net/net/multitool/net/multitool/util/com/jadol/budgetpro/MoneyLocal.classcom/jadol/budgetpro/SessionTestServlet.classChapter 23 Deploying EJBs 508
com/jadol/budgetpro/MoneyEJBean.class
com/jadol/budgetpro/MoneyHome.classcom/jadol/budgetpro/Money.classcom/jadol/budgetpro/MoneyLocalHome.classcom/jadol/budgetpro/TestMoneyEJBean.classnet/multitool/util/Save.classnet/multitool/util/Cost.classnet/multitool/util/Debt.classnet/multitool/util/SAMoney.classMETA-INF/ejb-jar.xmlMETA-INF/jboss.xml$
The EJB-JAR ﬁle contains the speciﬁcs for our EJB ﬁle (Table 23.2).
To keep Table 23.2 simpler and shorter, we didn’t list each of the directo-
ries in the tree of directories down to each class ﬁle. When we show, for exam-ple, 
com/jadol/budgetpro/* , realize that each directory that is part of that
structure ( com, com/jadol , and so on) is part of the JAR ﬁle. The class ﬁles
are located in that tree.
So what are the two XML ﬁles?These XML ﬁles provide the EJB container with information on how the
bean parts are wired together. Let’s look at the contents of each.
Table 23.2 Contents of the EJB-JAR ﬁle
Content Type Name
A standard JAR manifest; besides deﬁning the
JAR version it can be empty.text MANIFEST.MF
A description of the EJB, most importantly the
mapping between the name of the EJB and theactual Java class ﬁle.XML
ejb-jar.xml
This ﬁle is speciﬁc to JBoss (well, duh!). It
describes a mapping between the JNDI nameused in the 
locate()  and the name of the EJB.
The equivalent ﬁle for Geronimo (which usesOpenEJB) is 
openejb-jar.xml .XML jboss.xml
Various classes. class ﬁles net/multitool/util/*
Various classes. class ﬁles com/jadol/budgetpro/*
A directory with other ﬁles. directory META-INF509 23.2 Lend Me Your EAR: Enterprise Packaging and Deployment
The ejb-jar.xml ﬁle (Example 23.3) is part of the J2EE standard. It
speciﬁes the names of the home and remote (and local, if any) interfaces, theimplementation class (i.e., the real bean) and the name for the bean.
Example 23.3 Sample ejb-jar.xml  ﬁle
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE ejb-jar PUBLIC   "-//Sun Microsystems, Inc.//DTD Enterprise JavaBeans 2.0//EN"  "http://java.sun.com/dtd/ejb-jar_2_0.dtd">
<ejb-jar>  <description>BudgetPro</description>
  <display-name>BudgetPro</display-name>
  <enterprise-beans>    <!-- Session Beans -->
    <session id="test_Money">      <display-name>Test Money Bean</display-name>      <ejb-name>test/Money</ejb-name>      <home>com.jadol.budgetpro.MoneyHome</home>      <remote>com.jadol.budgetpro.Money</remote>      <ejb-class>com.jadol.budgetpro.MoneyEJBean</ejb-class>      <session-type>Stateless</session-type>      <transaction-type>Container</transaction-type>    </session>
  </enterprise-beans>  <assembly-descriptor>  </assembly-descriptor></ejb-jar>
The name of the bean deﬁned in the ejb-jar.xml  ﬁle is not, however,
the name we will use in our JNDI lookup. Rather, there is one more level ofmapping used by JBoss. Look at the contents of the 
jboss.xml  ﬁle
(Example 23.4).Chapter 23 Deploying EJBs 510
Example 23.4 Sample jboss.xml  ﬁle
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE jboss PUBLIC "-//JBoss//DTD JBOSS//EN"   "http://www.jboss.org/j2ee/dtd/jboss.dtd">
<jboss>  <enterprise-beans>    <session>
      <ejb-name>test/Money</ejb-name>      <jndi-name>ejb/Money</jndi-name>    </session>
  </enterprise-beans>  <resource-managers>
  </resource-managers>
</jboss>
The two tags deﬁne the mapping: You use the jndi-name  in the
lookup()  method and it will (try to) ﬁnd the EJB named with the ejb-name
tag. The ejb-name  tag is also used in the ejb-jar.xml  ﬁle. This provides the
association between the two, and the mapping from the JNDI name to EJB isthereby deﬁned.
To summarize, if we want to build an EJB-JAR ﬁle, we will need to gather
all the class ﬁles in their appropriate classpath directory structures. Then wewill need to write two XML ﬁles and place them in the 
META-INF  directory
along with the MANIFEST.MF  ﬁle. The two XML ﬁles will deﬁne the EJB pieces
and provide a name mapping for locating this bean. Then put all these piecestogether into a JAR ﬁle, and you have an EJB-JAR ﬁle.
Using Our Bean 23.2.2
We have put a lot of pieces in place to get a bean that we can call from across
the enterprise. But what does that call look like? How might we make use ofthe bean?
The ﬁrst step is to make contact with the JNDI service and locate the
home interface for the bean. It looks like the section of code in Example 23.5.511 23.2 Lend Me Your EAR: Enterprise Packaging and Deployment
Example 23.5 Locating the home interface
//Look up home interface
InitialContext initctxt = new InitialContext();Object obj = initctxt.lookup("ejb/Money");MoneyHome homer = (MoneyHome) PortableRemoteObject.narrow(obj, MoneyHome.class);
We’re putting this code in the init()  method of a servlet; it could also
be in a test program, or in a JSP. It needs to happen only once for our servlet(which is why we put it in the 
init()  method) and then the connection can
be used many times, once for each contact with the bean.
We get to the actual bean this way:
Money mrbean;
mrbean = homer.create();
We then use the bean, making the calls on its remote interface (a Money
object, that extends EJBObject ) as if it were just a simple method call on an
ordinary class:
car = mrbean.save(20000.00, 0.04, 250.00);
The math is done in the actual SessionBean , out there in the network,
and the results are sent back to this application. Our application goes on todisplay this number as part of an HTML page.
Then when we’re done with the bean, we need to clean up:
mrbean.remove();
Packaging the Servlet 23.2.3
We will now package up the servlet, along with a simple startup page to invoke
it. We’ll look at the WAR ﬁle and see how it’s built.
What Is in the WAR File 23.2.3.1
The other JAR-like ﬁle in the EAR is the WAR ﬁle. Let’s see what is in one of
those (Table 23.3).
Notice that the WAR ﬁle puts its XML descriptor not in the META-INF
directory but in a WEB-INF  directory along with the classes.Chapter 23 Deploying EJBs 512
Table 23.3 Contents of the WAR ﬁle
Content Type Name
A standard JAR manifest; it can be empty or list the
contents.text MANIFEST.MF
XML description of the Web application—servlet
deﬁnitions, and so on.XML web.xml
Empty in our example—no JBoss-speciﬁc directives
are used.XML jboss-web.xml
Directory structure for the Java class ﬁles. directory classes
The various class ﬁles. class classes/.../*.class
These are the JSP ﬁles that run as part of the Web
application; note that they are in the top level of thisdirectory structure, not in any subdirectory.JSP
*.jsp
Any static HTML pages, too. HTML *.html
A directory with other ﬁles. directory META-INF
A directory with other ﬁles. directory WEB-INF
Weaving the Web 23.2.3.2
The web.xml  ﬁle is the descriptor for the Web application part of all this.
Using the servlet  tag, it deﬁnes a servlet associating a name with this servlet
(a name which can be used elsewhere in this XML ﬁle) and stating whichJava class ﬁle is that servlet.
Then the 
servlet-mapping  tag is used to map a URL pattern to a servlet.
The URL pattern is the portion of the URL that signals to the server that therequest is not for a simple HTML page, but rather for our servlet.
Example 23.6 is a sample 
web.xml ; notice in particular how the mapping
from URLs to the Java class is accomplished.
Connecting the Pieces 23.2.3.3
So now that you have seen all the pieces, know that you can edit the XML ﬁles
with your favorite editor, and can build the JAR/WAR/EAR ﬁles with the jar
command, it’s not that hard to put it all together. It is, however, tedious, andis well worth automating, at least with Ant.
The key to making it work, whether by hand or by automation, is a
workable directory structure. The easiest way to construct JAR ﬁles is to have513 23.2 Lend Me Your EAR: Enterprise Packaging and Deployment
Example 23.6 Sample web.xml  ﬁle
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE web-app PUBLIC   "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"   "http://java.sun.com/dtd/web-app_2_3.dtd">
<web-app>
  <servlet>    <servlet-name>SessionServlet</servlet-name>    <display-name>Simple Session Servlet</display-name>    <servlet-class>com.jadol.budgetpro.SessionTestServlet</servlet-class>
    <load-on-startup>1</load-on-startup>  </servlet>  <servlet-mapping>
    <servlet-name>SessionServlet</servlet-name>    <url-pattern>/servlet/test</url-pattern>  </servlet-mapping>
  <session-config>
    <session-timeout>0</session-timeout>  </session-config>
</web-app>
a directory structure that mirrors the structure of the JARs that you are build-
ing. But that arrangement is often not helpful for source management purposes.It is therefore not uncommon to have a source tree that reﬂects the projectstructure and a separate build directory that mirrors the JAR ﬁle directory lay-out. As classes are compiled, the class ﬁles are copied into the build directoryalong with copies of the XML, JSP, and other ﬁles. As a last step in the buildprocess, the build directories are “jarred up” into WAR/JAR/EAR ﬁles.
DEPLOYING THE  EAR 23.3
Deploying means getting your ﬁle(s) into the right place and dealing with the
Web server to get your application up and running. For EJBs this includes theChapter 23 Deploying EJBs 514
automatic construction of various components by the server. It’s not as daunt-
ing as it sounds—at least not any more.
JBoss 23.3.1
One of the great things about JBoss is its dynamic or “hot” deployment. The
only work involved in deploying your application, if you have the EAR ﬁle builtproperly, is to copy the EAR ﬁle to the deployment directory. JBoss does allthe rest.
Here is a listing of a very simple shell script that does what is needed, fol-
lowed by an invocation of that shell script to install our BudgetPro exampleEAR ﬁle.
$ cat ejbinstall
cp $* /usr/local/jboss-3.2.3/server/default/deploy$ ejbinstall budgetpro.ear$
Of course, this assumes that execute permission has been given to the
script and it is located in the search path. Furthermore, it assumes that JBoss(version 3.2.3) was installed in 
/usr/local .
Geronimo 23.3.2
Geronimo will be undergoing lots of change between the time that we write
this and the time that you read this. Be sure to check the Geronimo Web site1
for the latest information.
Geronimo deployment is done as a separate executable step and is not
folded into the server. This separation of functions keeps the server smaller andquicker on startup. The deployer has the smarts for reading in all the XMLconﬁguration information for your bean, building all the needed classes, andserializing it to package it up.
To deploy our EAR, we execute the following command from the
Geronimo home directory:
$ java -jar bin/deployer.jar --install --module budgetpro.ear
1.http://geronimo.apache.org/515 23.3 Deploying the EAR
Although not available in the early releases, Geronimo may add a “hot
deploy” feature where the EAR ﬁle can just be put into a deploy directory andthe rest will happen automatically. Even so, what will be happening behind thescenes is this same deploy step.
MAINTAINING A  DISTRIBUTED  APPLICATION 23.4
The deployment is easy if you have the EAR ﬁle built properly. But as you justsaw, that can be a big “if”—the EAR consists of several layers of ﬁles that mustbe in the right place and have the right contents. There are tools to help withall this, though. Ant is widely used to automate many of these tasks.
Ant and CVS 23.4.1
In previous chapters we’ve talked about CVS for managing sources and Ant
for automating our builds. The ﬁrst step to making all this work together issomething that we should have covered sooner—using CVS with Ant.
2
Example 23.7 is a simple Ant buildﬁle ( build.xml ) that will let you get
the source from your CVS repository by supplying a particular CVS tag. Youname the tag (which you would have previously applied to your sources) andthis Ant target will check out that version. The ﬁles are put in the 
srctree
directory off of the basedir  of the Ant project.
You will have to modify this script to make it ﬁt your environment. The
cvsRoot  and csvRsh  values correspond to the CVSROOT  and CVS_RSH  environ-
ment variables that you would otherwise have set for working with CVS. The
package  attribute should be set to the project directory that you would specify
when you check out sources. The directory speciﬁed by the dest attribute will
be created if it doesn’t exist.
The next task to accomplish with Ant is the construction of the EAR,
WAR, and JAR ﬁles. Since all three ﬁles are essentially just JAR ﬁles, we canuse the Ant 
jar task. The EAR contains a WAR and a JAR, and those in turn
contain Java class ﬁles (and a few miscellaneous ﬁles). Using the depends
attribute, we can build them in steps.
2. So, aren’t you glad that you’ve kept reading and gotten this far? Ah, the rewards of
persistence!Chapter 23 Deploying EJBs 516
Example 23.7 An Ant target for checking out source from CVS
<?xml version="1.0"?>
<!-- ++++++++++++++++++++++++++++++++++++++++++++++ --><!--      retrieve our sources by tag name          --><!--      invoke with: ant -DTAG=puttaghere         --><!-- ++++++++++++++++++++++++++++++++++++++++++++++ -->
<project name="sources" default="src" basedir=".">  <!-- src target  -->
  <target name="src">    <cvs cvsRoot=":ext:user@hostaddress:/usr/lib/cvs/cvsroot"         cvsRsh="/usr/bin/ssh"         package="projectdir/subproj"         dest="srctree"         tag="${TAG}">    </cvs>  </target>
</project>
Our example (see the book’s Web site3 for the full listing) only copies
prebuilt XML ﬁles (the deployment descriptors) into place to be included inthe JAR, WAR, and EAR ﬁles. For small examples like ours, building the de-ployment descriptors by hand is not a difﬁcult task. But larger, more complexprojects will beneﬁt from further automation. Most J2EE servers come withtools to help build such things. These tools tend to be speciﬁc to the particularsof their products. Since the J2EE speciﬁcation allows for certain vendor varia-tions and conﬁguration differences, they can be helpful in conﬁguring thingsfor your speciﬁc vendor’s version. But being dependent on them for your de-ployment is a subtle way to become locked into their product. Another goodchoice—one that avoids this vendor lock-in—is the Open Source tool XDoclet.
XDoclet 23.4.2
XDoclet is an important tool to help with the automation of EJB-related tasks.
Working in conjunction with Ant, it uses the Javadoc mechanism of Java to
3.http://www.javalinuxbook.com/517 23.4 Maintaining a Distributed Application
automate the building of many of the EJB ﬁles and deployment descriptors.
Recall that Java comments can include special Javadoc tags, such as @author
and @param . Javadoc uses these tags to generate HTML ﬁles that are the docu-
mentation of your Java classes and methods based on the text associated withthese tags. XDoclet takes this a step further and deﬁnes tags like 
@ejb.bean
and a few dozen more. Then, using the Javadoc mechanism, it can generate allthe various pieces required for an EJB. Used this way, you can write a singlesource ﬁle for your EJB, and have XDoclet generate the various home, remote,and local interfaces as well as the deployment descriptors.
So why aren’t we all using XDoclet? It has been around for a few years and
is gaining a following in the development community. We may be moving inthat direction, but it will take some time. It adds yet another layer to what isneeded to build an EJB application, albeit a layer that brings some simpliﬁca-tion. Later releases of EJB speciﬁcations from Sun may subsume its EJB func-tionality. However, it is still very important to understand the pieces that gotogether to make an EJB application. One of the favorite quotes from XDoclet
in Action  by Craig Walls and Norman Richards says it well: “Don’t generate
what you don’t understand.”
ABSTRACTING  LEGACY  APPLICATIONS 23.5
One of the best uses of J2EE technology, particularly the EJB technology, is toprovide a single common interface to heterogenous systems. If an applicationprovides any sort of ﬁle, data, pipe, or network access to its data, you can wrapan EJB interface around it and make it available to an entire distributed net-work. This can be a powerful way to leverage investments in legacy systemswith modern multitier architectures.
While it is commonplace for EJB applications to interface directly to a re-
lational database back end, there is no requirement that such a system be theback end. IBM, for example, provides Java interfaces to their mainframe legacydata systems, such as CICS.
REVIEW 23.6
We’ve looked at the contents of an EAR ﬁle—not that you’ll need to be digginginside them or even building them by hand, but you’ll want to know what’sinside so as to understand what it takes to put one together. We took a look atChapter 23 Deploying EJBs 518
Ant and CVS and how they can be used together to make building and
deployment easier. We even mentioned XDoclet, another tool worth knowingsomething about.
WHATYOU STILL DON’T KNOW 23.7
JBoss has an IDE plug-in for Eclipse which uses XDoclet to provide an integrat-ed development environment for writing EJBs. If you are working with Eclipseand are going to be doing a lot of EJB development, you should deﬁnitelyexplore this option.
The EJB 3.0 speciﬁcation, due out within a year, promises to change all
this, at least somewhat. With support for metadata in Java 1.5 there will be astandardized mechanism available for use in EJB class construction anddeployment. Look for some signiﬁcant improvements in usability.
RESOURCES 23.8
• Visit http://geronimo.apache.org  for the latest information on
Geronimo.
• Visit http://www.jboss.org  for the latest information on JBoss.
For more information about all the tags that can be put into the various
XML conﬁguration ﬁles, look at the DTD ﬁles which deﬁne them, for example:
•http://java.sun.com/dtd/ejb-jar_2_0.dtd
•http://www.jboss.org/j2ee/dtd/jboss.dtd
•http://www.jboss.org/j2ee/dtd/jboss-web.dtd
XDoclet in Action  by Craig Walls and Norman Richards (Manning Publi-
cations, ISBN 1932394052) covers the Open Source XDoclet tool for automat-ing the generation of Java code and related ﬁles (e.g., deployment descriptors).519 23.8 Resources

We try to wrap this whole thing up, talk about the future, and beg for
your help.
THE FUTURE ’S SO BRIGHT , I S QUINT AND  LOOK CONFUSED 24.1
Our crystal ball is a bit foggy, though. Linux is a moving target, and so is Java.In a twist of fate that few could have predicted, the Mono project has a .NETdevelopment platform for Linux (and, in fact, for most UNIX-like operatingsystems). Sun has been talking about open-sourcing Java.
1 New languages and
tools emerge all the time. Heck, Geronimo popped up during the research andwriting of this very book, while JBoss was the ﬁrst to pass the CompatibilityTest Suite for J2EE. Two minor and one major Java release happened duringthe writing of this book. A major Linux kernel release occurred. Naught enduresbut mutability. (The only constant is change.)
1. And may we drop all pretense of objectivity and say “Go, Sun! Go! Open it up!”Chapter 24
Parting Shots
521
The three things we can say with conﬁdence are that with Java, Linux, and
Open Source, the platform and the tools only get better, the price doesn’t goup, and everyone has the chance to play on an level ﬁeld.
We wouldn’t dream of predicting the future, but we’re sure that both
Linux and Java will have a signiﬁcant place in it.
OUR BOOK ISYOURS 24.2
This is an Open Content book (as we explained in Preface). You will be ableto take it and do with it what you please. We plan to keep improving the bookonline, and we’d like to invite you all to join in. The authors (who like to referto themselves in the third person) have the book set up on public servers at
http://www.javalinuxbook.com/  and we welcome comments, suggestions,
even patch ﬁles.
Don’t be afraid to participate. Credit of some sort will be given to every
accepted contribution.
CAME THE  REVOLUTION 24.3
A lot of people write about Free Software and Open Source in terms rangingfrom economic history to political revolutionary rhetoric. One of your presenthumble authors has even written the phrase “economic inevitability” in a weakmoment. And while there is ample room to speculate on the future by lookingat the past, and while there actually are legitimate issues of liberty, rights, andpolitics in the mix, it is always shaky when an argument veers close to tautology(“Free Software is right because it is right”).
Some people will actually choose Free Software for political reasons, just
as some Americans chose rebellion for political reasons. But the majority ofAmericans in 1776 were not revolutionaries, and the majority of people usingLinux are not either. We have other concerns. In both cases, keeping bread onthe table is a greater concern for most than the revolutionary issue.
Read Richard Stallman’s writings if you are interested in the revolution.
Read Lawrence Lessig
2 if you are interested in the politics and legal issues.
2. A Stanford Law School professor and founder of the Center for Internet and Society, Lessig
is the author of three remarkable books: Code and Other Laws of Cyberspace , The Future of Ideas:Chapter 24 Parting Shots 522
Most of us, however, will be asking how these technologies can put bread on
our table.
The key is lifelong learning. And that is where Open has a distinct advan-
tage. You want to know how it works? Look. There is a lot of good code (andsome very bad code) out there, free for the taking, analyzing, and for certainuses. One of the arguments made for closed code is a quality argument. But asprogrammers who have worked on closed systems, we can tell you that we haveseen plenty of bad code out that is closed and proprietary. You just have to lookat news about viruses and worms to know that. The point is that Open Sourceand Free Software are a safer investment. In closed systems there is alwayspressure to “churn” the APIs so that new OS versions and new developmenttools can be sold. There is some of that in Free Software too, but you can watchit as it happens, and if a program is your bread and butter, you can participate.
In any revolution, there are the brave and foolhardy rushing to the barri-
cades, banners in hand. But the sensible are keeping their heads down and try-ing to ﬁgure out how to get through it all. We hope our modest contributionhelps the latter.
WHATYOU STILL DON’T KNOW 24.4
This is a book about writing Java applications on Linux systems. We hope we’vegiven you enough to get started, and pointed you to some tools and techniquesthat, while they’ve been around a while, may not all be well known ordocumented.
We’ve said it before, but each of our chapters tried to cover in a small
space what really takes volumes. Our aim has been to give you a ﬂavor, and astart, and a direction.
RESOURCES 24.5
This book that you are reading is part of the Bruce Perens’ Open Source Series,“a deﬁnitive series of Linux and Open Source books” according to the publisher
The Fate of the Commons in a Connected World , and Free Culture: How Big Media Uses T echnology
and the Law to Lock Down Culture and Control Creativity .523 24.5 Resources
Prentice Hall PTR; and who are we to disagree? Seriously though, we encourage
you to check out any or all of the titles in the series.
We have already mentioned the more philosophical works by Stallman
and by Lessig. As a ﬁnal reference we offer one that covers not the politicalphilosophy of Open Source but the practical philosophy of what makes Linuxso successful. It’s called Linux and the UNIX Philosophy  by Mike Gancarz,
published by Digital Press (ISBN 1555582737). It gives practical examples ofthe way Linux does things, which makes it so useful, so usable, and so enduring.If you’re going to be developing on Linux, we encourage you to read it. It iseasier to swim with the tide, and understanding the design approaches behindLinux will give you that advantage.Chapter 24 Parting Shots 524
All our favorite computer books have an ASCII chart. We wanted one, too.
Int    Oct   Hex   ASCII              Int    Oct   Hex   ASCII                 
---   ----   ---   -----              ---   ----   ---   -----                   0    000    00    ^@                 19    023    13    ^S                     1    001    01    ^A                 20    024    14    ^T                     2    002    02    ^B                 21    025    15    ^U                     3    003    03    ^C                 22    026    16    ^V                     4    004    04    ^D                 23    027    17    ^W                     5    005    05    ^E                 24    030    18    ^X                     6    006    06    ^F                 25    031    19    ^Y                     7    007    07    ^G                 26    032    1a    ^Z                     8    010    08    ^H                 27    033    1b    ^[                     9    011    09    ^I                 28    034    1c    ^\                    10    012    0a    ^J                 29    035    1d    ^]                    11    013    0b    ^K                 30    036    1e    ^^                    12    014    0c    ^L                 31    037    1f    ^_                    13    015    0d    ^M                 32    040    20                          14    016    0e    ^N                 33    041    21    !                     15    017    0f    ^O                 34    042    22    "                     16    020    10    ^P                 35    043    23    #                     17    021    11    ^Q                 36    044    24    $                     18    022    12    ^R                 37    045    25    %                    Appendix A
ASCII Chart
525
Int    Oct   Hex   ASCII              Int    Oct   Hex   ASCII                    
---   ----   ---   -----              ---   ----   ---   -----                     38    046    26    &                  83    123    53    S                       39    047    27    '                  84    124    54    T                       40    050    28    (                  85    125    55    U                       41    051    29    )                  86    126    56    V                       42    052    2a    *                  87    127    57    W                       43    053    2b    +                  88    130    58    X                       44    054    2c    ,                  89    131    59    Y                       45    055    2d    -                  90    132    5a    Z                       46    056    2e    .                  91    133    5b    [                       47    057    2f    /                  92    134    5c    \                       48    060    30    0                  93    135    5d    ]                       49    061    31    1                  94    136    5e    ^                       50    062    32    2                  95    137    5f    _                       51    063    33    3                  96    140    60    `                       52    064    34    4                  97    141    61    a                       53    065    35    5                  98    142    62    b                       54    066    36    6                  99    143    63    c                       55    067    37    7                 100    144    64    d                       56    070    38    8                 101    145    65    e                       57    071    39    9                 102    146    66    f                       58    072    3a    :                 103    147    67    g                       59    073    3b    ;                 104    150    68    h                       60    074    3c    <                 105    151    69    i 61    075    3d    =                 106    152    6a    j 62    076    3e    >                 107    153    6b    k 63    077    3f    ?                 108    154    6c    l 64    100    40    @                 109    155    6d    m 65    101    41    A                 110    156    6e    n 66    102    42    B                 111    157    6f    o 67    103    43    C                 112    160    70    p 68    104    44    D                 113    161    71    q 69    105    45    E                 114    162    72    r 70    106    46    F                 115    163    73    s 71    107    47    G                 116    164    74    t 72    110    48    H                 117    165    75    u 73    111    49    I                 118    166    76    v 74    112    4a    J                 119    167    77    w 75    113    4b    K                 120    170    78    x 76    114    4c    L                 121    171    79    y 77    115    4d    M                 122    172    7a    z 78    116    4e    N                 123    173    7b    { 79    117    4f    O                 124    174    7c    | 80    120    50    P                 125    175    7d    } 81    121    51    Q                 126    176    7e    ~ 82    122    52    R                 127    177    7f   ^?Appendix A ASCII Chart 526
This is the listing of the GUI for BudgetPro. For a discussion, see Chapter 16.
  1 package net.multitool.gui;
  2  3 import java.awt.*;  4 import java.awt.event.*;  5 import javax.swing.*;  6 import javax.swing.event.*;  7 import javax.swing.table.*;  8 import java.util.*;  9 import net.multitool.core.*; 10 11 /** 12  * This class is the main application class for the BudgetPro gui 13  */ 14 15 public class 16 BudgetPro 17 { 18   Account top; 19   Account current; 20
527Appendix B
A Java Swing GUI
for BudgetPro
 21   // gui components
 22   private JFrame frame;   // needed by dialogs to root themselves 23   private JLabel nam; 24   private JLabel tot; 25   private JLabel val; 26   private JButton upton = new JButton(                        new ImageIcon("net/multitool/gui/back.gif")); 27   private JButton creat = new JButton("New Subaccount"); 28   private JButton view  = new JButton("View Subaccount"); 29   private JButton clos  = new JButton("Quit"); 30 31   private JTable list; 32   private AbstractTableModel model; 33 34   private AcctDialog askem;   // make once, use often 35 36   // Set Up an Action for a Button 37   private ActionListener upAction = new ActionListener() 38   { 39     public void 40     actionPerformed(ActionEvent e) 41     { 42       // this is the action for UP arrow icon; 43       Account next; 44       next = current.getParent(); 45       if (next != null) { 46         current = next; 47         setStatus(); 48         // TODO: notify the table, too 49         model.fireTableDataChanged(); 50       } // TODO: else infodialog or Beep. 51     } 52   } ; 53 54   private ActionListener cdAction = new ActionListener() 55   { 56     public void 57     actionPerformed(ActionEvent e) 58     { 59       // this is the action for VIEW subdirectory; 60       // a "cd" into the subaccount. 61       int row = list.getSelectedRow(); 62       // System.out.println("Row="+row); // DEBUG; TODO: REMOVE 63       if (row > -1) {             // only if a row was selected 64         String subname = (String) model.getValueAt(row, 0); // name column 65         Account next = current.getSub(subname); 66         if (next != null) { 67           current = next; 68           // System.out.println("cd to:"+current.getName());Appendix B A Java Swing GUI for BudgetPro 528
 69           setStatus();
 70           // notify the table, too 71           model.fireTableDataChanged(); 72         } // TODO: else infodialog or Beep. 73       } 74     } 75   } ; 76 77   // TEST ONLY: 78   int testid = 0; 79 80   BudgetPro(JFrame frame, String username, String value) 81   { 82     this.frame = frame; 83     top = new Account("TopLevel", new User(username), value); 84     current = top; 85 86   } // constructor 87 88   private Component 89   createStatus() 90   { 91     JPanel retval = new JPanel();   // default: flow layout 92 93     upton.addActionListener(upAction); 94 95     nam = new JLabel("Account: Name"); 96     tot = new JLabel("Total: $"); 97     val = new JLabel("Remaining: $"); 98 99     retval.add(upton);100     retval.add(nam);101     retval.add(tot);102     retval.add(val);103104     setStatus();105106     return retval;107   } // createStatus108109   /**110    * Set the values of the status fields,111    * as when the account has changed.112    */113   private void114   setStatus()115   {116     nam.setText("Account: "+current.getName());117     tot.setText("Total: $"+current.getTotal());529 Appendix B A Java Swing GUI for BudgetPro
118     // tot.setText("SubAccounts: "+current.size());
119     val.setText("Remaining: $"+current.getBalance());120121     // disable the button if there is no "up" to go122     if (current.getParent() == null) {123         upton.setEnabled(false);124     } else {125         upton.setEnabled(true);126     }127128   } // setStatus129130   private Component131   createList()132   {133     JScrollPane retval;134135     model = new AbstractTableModel()136       {137         private String [] columnNames = {"Account", "Owner", "Value"};138139         public String140         getColumnName(int col) {141           return columnNames[col];142         } // getColumnName143144         public int145         getRowCount()146         {147           int retval;148149           if (current != null) {150               retval = current.size();151           } else {152               retval = 1;     // testing only153           }154155           return retval;156157         } // getRowCount158159         public int getColumnCount() { return columnNames.length; }160161         public Object162         getValueAt(int row, int col) {163           Object retval = null;164           Account aa = null;165           // return "---";   // rowData[row][col];166           int count = 0;Appendix B A Java Swing GUI for BudgetPro 530
167           for (Iterator itr=current.getAllSubs(); itr.hasNext(); )
168           {169             count++;170             aa = (Account) itr.next();171             if (count > row) { break; }172           } // next173           switch (col) {174           case 0:175                   retval = aa.getName();176                   break;177           case 1:178                   retval = aa.getOwner();179                   break;180           case 2:181                   retval = aa.getTotal();182                   break;183           } // endswitch184           return retval;185         } // getValueAt186187         public boolean188         isCellEditable(int row, int col)189         {190           return false;191         } // isCellEditable192       };193     list = new JTable(model);194     list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);195196     list.getSelectionModel().addListSelectionListener(197       new ListSelectionListener()198       {199         public void200         valueChanged(ListSelectionEvent e)201         {202           ListSelectionModel lsm = (ListSelectionModel)e.getSource();203           if (lsm.isSelectionEmpty()) {204               view.setEnabled(false);205           } else {206               view.setEnabled(true);207           }208         } // valueChanged209       }210     );211212     retval = new JScrollPane(list);213214     return retval;215531 Appendix B A Java Swing GUI for BudgetPro
216   } // createList
217218   private Component219   createButtons(JRootPane root)220   {221     JPanel retval = new JPanel();   // default: flow layout222223     //Lay out the buttons from left to right.224     retval.setLayout(new BoxLayout(retval, BoxLayout.X_AXIS));225     retval.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));226     retval.add(Box.createHorizontalGlue());227     retval.add(creat);228     retval.add(Box.createRigidArea(new Dimension(10, 0)));229     retval.add(view);230     retval.add(Box.createRigidArea(new Dimension(10, 0)));231     retval.add(clos);232233     // ---------------------------------------- Define some actions234     ActionListener closAction = new ActionListener()235     {236       public void237       actionPerformed(ActionEvent e)238       {239           System.exit(0);240       }241     } ;242     clos.addActionListener(closAction);243244     ActionListener creatAction = new ActionListener()245     {246       public void247       actionPerformed(ActionEvent e)248       {249         Account child;250         // get the info via a Dialog (of sorts)251         if (askem == null) {252             askem = new AcctDialog(frame, "New Subaccount");253         } else {254             askem.clear();255             askem.setVisible(true);256         }257         String subName = askem.getName();258         String subAmnt = askem.getAmnt();259260         // if empty, assume the operation was cancelled, else:261         if ((subName != null) && (subName.length() > 0)) {262             child = current.createSub(subName, subAmnt);263             setStatus();264             model.fireTableDataChanged(); // notify the tableAppendix B A Java Swing GUI for BudgetPro 532
265         }
266       }267     };268     creat.addActionListener(creatAction);269270     // function is to get selection from table and cd there271     view.addActionListener(cdAction);272     // but it starts off disabled, since there is no data yet273     view.setEnabled(false);274275     // ------------------------------------------------------------276     frame.getRootPane().setDefaultButton(creat);277     clos.grabFocus();278279     return retval;280281   } // createButtons282283   public static void284   main(String[] args)285   {286     BudgetPro app = null;287288     //Create the top-level container289     JFrame frame = new JFrame("BudgetPro");290291     // ----------- set up the account/app based on the command line args292     try {293         String username = System.getProperty("user.name", "default");294         if (args.length > 0) {295             app = new BudgetPro(frame, username, args[0]);296          } else {297             System.err.println("usage: BudgetPro dollar_amt");298             System.exit(1);299          }300     } catch (Exception e) {301         System.err.println("Error on startup.");302         e.printStackTrace();303         System.exit(2);304     }305306     // ----------- now set up the UI and get things going307     try {308         UIManager.setLookAndFeel(309                     UIManager.getCrossPlatformLookAndFeelClassName());310     } catch (Exception e) {311         System.err.println("Can't set the desired look and feel.");312         e.printStackTrace();313         System.exit(3);533 Appendix B A Java Swing GUI for BudgetPro
314     }
315316     // build the pieces and add them to the top-level container317318     Component status = app.createStatus();319     frame.getContentPane().add(status, BorderLayout.NORTH);320321     Component list = app.createList();322     frame.getContentPane().add(list, BorderLayout.CENTER);323324     Component buttons = app.createButtons(frame.getRootPane());325     frame.getContentPane().add(buttons, BorderLayout.SOUTH);326327     frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);328     frame.pack();329     frame.setVisible(true);330   } // main331332 } // class BudgetPro
Here is the code for the dialog for creating new accounts,
AcctDialog.java :
  1 package net.multitool.gui;  2  3 import java.awt.*;  4 import java.awt.event.*;  5 import javax.swing.*;  6 import javax.swing.table.*;  7 import java.util.*;  8 import net.multitool.core.*;  9 10 class 11 AcctDialog 12   extends JDialog 13 { 14   JDialog dialog;   // for reference from the buttons' actions 15   JTextField nameField; 16   JTextField amntField; 17 18   AcctDialog(JFrame frame, String title) 19   { 20     super(frame, title, true); 21     dialog = this; 22     nameField = new JTextField(25); 23     amntField = new JTextField(9);Appendix B A Java Swing GUI for BudgetPro 534
 24
 25     // right justify the numeric field 26     amntField.setHorizontalAlignment(JTextField.RIGHT); 27 28     // TODO: so that <Enter> will do a create 29     // this.getInputMap().put(KeyStroke.getKeyStroke("Enter"), "create"); 30     /* 31       Action myAction = new AbstractAction("doSomething") { 32         public void actionPerformed() { 33           doSomething(); 34         } 35       }; 36       myComponent.getActionMap().put(myAction.get(Action.NAME), myAction); 37      */ 38 39     //--------------------------------------------------Label on top---- 40     JLabel label = new JLabel("<html><p align=left><i>" 41                    + "Enter the info to create a subaccount.<br>" 42                    + "</i>"); 43     label.setHorizontalAlignment(JLabel.LEFT); 44     Font font = label.getFont(); 45     label.setFont(label.getFont().deriveFont(font.PLAIN, 14.0f)); 46 47     //--------------------------------------------------Text Fields----- 48     String[] labels = {"(Sub)Account Name: ", "Dollar Amount: "}; 49     JTextField [] fields = {nameField, amntField}; 50     int numPairs = fields.length; 51 52     //Create and populate the panel. 53     JPanel textes = new JPanel(new SpringLayout()); 54     for (int i = 0; i < numPairs; i++) { 55       JLabel l = new JLabel(labels[i], JLabel.TRAILING); 56       textes.add(l); 57       l.setLabelFor(fields[i]);  // not nec. since we have no kb shortcuts 58       textes.add(fields[i]); 59     } 60 61     //Lay out the panel. 62     SpringUtilities.makeCompactGrid(textes, 63                                     numPairs, 2, //rows, cols 64                                     6, 6,        //initX, initY 65                                     6, 6);       //xPad, yPad 66 67 68     //--------------------------------------------------Buttons on bottom 69     JButton createButton = new JButton("Create"); 70     createButton.addActionListener(new ActionListener() { 71       public void actionPerformed(ActionEvent e) { 72         nameField.grabFocus(); // before leaving, ready for next time.535 Appendix B A Java Swing GUI for BudgetPro
 73         dialog.setVisible(false);   // go away
 74       } 75     }); 76 77     JButton cancelButton = new JButton("Cancel"); 78     cancelButton.addActionListener(new ActionListener() { 79       public void actionPerformed(ActionEvent e) { 80         clear(); // toss out any entry 81         dialog.setVisible(false); 82       } 83     }); 84     getRootPane().setDefaultButton(createButton); 85 86     JPanel closePanel = new JPanel(); 87     closePanel.setLayout(new BoxLayout(closePanel, BoxLayout.LINE_AXIS)); 88     closePanel.add(Box.createHorizontalGlue()); 89     closePanel.add(createButton); 90     closePanel.add(Box.createRigidArea(new Dimension(5, 0))); 91     closePanel.add(cancelButton); 92     closePanel.setBorder(BorderFactory.createEmptyBorder(10,0,5,5)); 93 94     JPanel contentPane = new JPanel(new BorderLayout()); 95     contentPane.add(label, BorderLayout.PAGE_START); 96     contentPane.add(textes, BorderLayout.CENTER); 97     contentPane.add(closePanel, BorderLayout.PAGE_END); 98     contentPane.setOpaque(true); 99     setContentPane(contentPane);100101     //Show it.102     setSize(new Dimension(300, 160));103     setLocationRelativeTo(frame);104     setVisible(true);105106   } // constructor107108   public String109   getName()110   {111     String retval = null;112     if (nameField != null) {113       retval = nameField.getText();114     }115     return retval;116   } // getName117118   public String119   getAmnt()120   {121     String retval = null;Appendix B A Java Swing GUI for BudgetPro 536
122     if (amntField != null) {
123       retval = amntField.getText();124     }125     return retval;126   } // getAmnt127128   public void129   clear()130   {131     nameField.setText(null);132     amntField.setText(null);133   } // clear134135 } // class AcctDialog537 Appendix B A Java Swing GUI for BudgetPro

Version 2, June 1991
Copyright © 1989, 1991 Free Software Foundation, Inc.
59 Temple Place, Suite 330, Boston, MA 02111, USA
Everyone is permitted to copy and distribute verbatim copies
of this license document, but changing it is not allowed.
PREAMBLE
The licenses for most software are designed to take away your freedom to shareand change it. By contrast, the GNU General Public License is intended toguarantee your freedom to share and change free software—to make sure thesoftware is free for all its users. This General Public License applies to most ofthe Free Software Foundation’s software and to any other program whose au-thors commit to using it. (Some other Free Software Foundation software iscovered by the GNU Library General Public License instead.) You can applyit to your programs, too.
539Appendix C
GNU
General Public License
When we speak of free software, we are referring to freedom, not price.
Our General Public Licenses are designed to make sure that you have the free-dom to distribute copies of free software (and charge for this service if youwish), that you receive source code or can get it if you want it, that you canchange the software or use pieces of it in new free programs; and that you knowyou can do these things.
To protect your rights, we need to make restrictions that forbid anyone
to deny you these rights or to ask you to surrender the rights. These restrictionstranslate to certain responsibilities for you if you distribute copies of thesoftware, or if you modify it.
For example, if you distribute copies of such a program, whether gratis or
for a fee, you must give the recipients all the rights that you have. You mustmake sure that they, too, receive or can get the source code. And you must showthem these terms so they know their rights.
We protect your rights with two steps: (1) copyright the software, and
(2) offer you this license which gives you legal permission to copy, distributeand/or modify the software.
Also, for each author’s protection and ours, we want to make certain that
everyone understands that there is no warranty for this free software. If thesoftware is modiﬁed by someone else and passed on, we want its recipients toknow that what they have is not the original, so that any problems introducedby others will not reﬂect on the original authors’ reputations.
Finally, any free program is threatened constantly by software patents. We
wish to avoid the danger that redistributors of a free program will individuallyobtain patent licenses, in effect making the program proprietary. To preventthis, we have made it clear that any patent must be licensed for everyone’s freeuse or not licensed at all.
The precise terms and conditions for copying, distribution, and
modiﬁcation follow.
TERMS AND  CONDITIONS FOR  COPYING , DISTRIBUTION , AND
MODIFICATION
0. This License applies to any program or other work which contains a no-
tice placed by the copyright holder saying it may be distributed under theterms of this General Public License. The “Program,” below, refers to anysuch program or work, and a “work based on the Program” means eitherAppendix C GNU General Public License 540
the Program or any derivative work under copyright law: that is to say, a
work containing the Program or a portion of it, either verbatim or withmodiﬁcations and/or translated into another language. (Hereinafter,translation is included without limitation in the term “modiﬁcation.”)Each licensee is addressed as “you.”
Activities other than copying, distribution and modiﬁcation are not
covered by this License; they are outside its scope. The act of running theProgram is not restricted, and the output from the Program is coveredonly if its contents constitute a work based on the Program (independentof having been made by running the Program). Whether that is truedepends on what the Program does.
1. You may copy and distribute verbatim copies of the Program’s source
code as you receive it, in any medium, provided that you conspicuouslyand appropriately publish on each copy an appropriate copyright noticeand disclaimer of warranty; keep intact all the notices that refer to thisLicense and to the absence of any warranty; and give any other recipientsof the Program a copy of this License along with the Program.
You may charge a fee for the physical act of transferring a copy, and
you may at your option offer warranty protection in exchange for a fee.
2. You may modify your copy or copies of the Program or any portion of
it, thus forming a work based on the Program, and copy and distributesuch modiﬁcations or work under the terms of Section 1 above, providedthat you also meet all of these conditions:
a) You must cause the modiﬁed ﬁles to carry prominent notices stating
that you changed the ﬁles and the date of any change.
b) You must cause any work that you distribute or publish, that in
whole or in part contains or is derived from the Program or any partthereof, to be licensed as a whole at no charge to all third partiesunder the terms of this License.
c) If the modiﬁed program normally reads commands interactively
when run, you must cause it, when started running for such interac-tive use in the most ordinary way, to print or display an announce-ment including an appropriate copyright notice and a notice thatthere is no warranty (or else, saying that you provide a warranty) andthat users may redistribute the program under these conditions, andtelling the user how to view a copy of this License. (Exception: if theProgram itself is interactive but does not normally print such an541 C.2 Terms and Conditions for Copying, Distribution, and Modiﬁcation
announcement, your work based on the Program is not required to
print an announcement.)
These requirements apply to the modiﬁed work as a whole. If iden-
tiﬁable sections of that work are not derived from the Program, and canbe reasonably considered independent and separate works in themselves,then this License, and its terms, do not apply to those sections when youdistribute them as separate works. But when you distribute the samesections as part of a whole which is a work based on the Program, thedistribution of the whole must be on the terms of this License, whosepermissions for other licensees extend to the entire whole, and thus toeach and every part regardless of who wrote it.
Thus, it is not the intent of this section to claim rights or contest
your rights to work written entirely by you; rather, the intent is to exercisethe right to control the distribution of derivative or collective works basedon the Program.
In addition, mere aggregation of another work not based on the
Program with the Program (or with a work based on the Program) on avolume of a storage or distribution medium does not bring the other workunder the scope of this License.
3. You may copy and distribute the Program (or a work based on it, under
Section 2) in object code or executable form under the terms of Sections 1and 2 above provided that you also do one of the following:
a) Accompany it with the complete corresponding machine-readable
source code, which must be distributed under the terms ofSections 1 and 2 above on a medium customarily used for softwareinterchange; or,
b) Accompany it with a written offer, valid for at least three years, to
give any third party, for a charge no more than your cost ofphysically performing source distribution, a complete machine-readable copy of the corresponding source code, to be distributedunder the terms of Sections 1 and 2 above on a medium customarilyused for software interchange; or,
c) Accompany it with the information you received as to the offer to
distribute corresponding source code. (This alternative is allowedonly for noncommercial distribution and only if you received theprogram in object code or executable form with such an offer, inaccord with Subsection b above.)Appendix C GNU General Public License 542
The source code for a work means the preferred form of the work
for making modiﬁcations to it. For an executable work, complete sourcecode means all the source code for all modules it contains, plus any asso-ciated interface deﬁnition ﬁles, plus the scripts used to control compila-tion and installation of the executable. However, as a special exception,the source code distributed need not include anything that is normallydistributed (in either source or binary form) with the major components(compiler, kernel, and so on) of the operating system on which theexecutable runs, unless that component itself accompanies the executable.
If distribution of executable or object code is made by offering access
to copy from a designated place, then offering equivalent access to copythe source code from the same place counts as distribution of the sourcecode, even though third parties are not compelled to copy the sourcealong with the object code.
4. You may not copy, modify, sublicense, or distribute the Program except
as expressly provided under this License. Any attempt otherwise to copy,modify, sublicense or distribute the Program is void, and will automatical-ly terminate your rights under this License. However, parties who havereceived copies, or rights, from you under this License will not have theirlicenses terminated so long as such parties remain in full compliance.
5. You are not required to accept this License, since you have not signed it.
However, nothing else grants you permission to modify or distribute theProgram or its derivative works. These actions are prohibited by law ifyou do not accept this License. Therefore, by modifying or distributingthe Program (or any work based on the Program), you indicate your ac-ceptance of this License to do so, and all its terms and conditions forcopying, distributing or modifying the Program or works based on it.
6. Each time you redistribute the Program (or any work based on the Pro-
gram), the recipient automatically receives a license from the original li-censor to copy, distribute or modify the Program subject to these termsand conditions. You may not impose any further restrictions on the recip-ients’ exercise of the rights granted herein. You are not responsible forenforcing compliance by third parties to this License.
7. If, as a consequence of a court judgment or allegation of patent infringe-
ment or for any other reason (not limited to patent issues), conditions areimposed on you (whether by court order, agreement or otherwise) thatcontradict the conditions of this License, they do not excuse you from543 C.2 Terms and Conditions for Copying, Distribution, and Modiﬁcation
the conditions of this License. If you cannot distribute so as to satisfy si-
multaneously your obligations under this License and any other pertinentobligations, then as a consequence you may not distribute the Programat all. For example, if a patent license would not permit royalty-free redis-tribution of the Program by all those who receive copies directly or indi-rectly through you, then the only way you could satisfy both it and thisLicense would be to refrain entirely from distribution of the Program.
If any portion of this section is held invalid or unenforceable under
any particular circumstance, the balance of the section is intended to ap-ply and the section as a whole is intended to apply in other circumstances.
It is not the purpose of this section to induce you to infringe any
patents or other property right claims or to contest validity of any suchclaims; this section has the sole purpose of protecting the integrity of thefree software distribution system, which is implemented by public licensepractices. Many people have made generous contributions to the widerange of software distributed through that system in reliance on consistentapplication of that system; it is up to the author/donor to decide if he orshe is willing to distribute software through any other system and alicensee cannot impose that choice.
This section is intended to make thoroughly clear what is believed
to be a consequence of the rest of this License.
8. If the distribution and/or use of the Program is restricted in certain
countries either by patents or by copyrighted interfaces, the originalcopyright holder who places the Program under this License may add anexplicit geographical distribution limitation excluding those countries, sothat distribution is permitted only in or among countries not thus exclud-ed. In such case, this License incorporates the limitation as if written inthe body of this License.
9. The Free Software Foundation may publish revised and/or new versions
of the General Public License from time to time. Such new versions willbe similar in spirit to the present version, but may differ in detail toaddress new problems or concerns.
Each version is given a distinguishing version number. If the Pro-
gram speciﬁes a version number of this License which applies to it and“any later version,” you have the option of following the terms and con-ditions either of that version or of any later version published by the FreeSoftware Foundation. If the Program does not specify a version numberAppendix C GNU General Public License 544
of this License, you may choose any version ever published by the Free
Software Foundation.
10. If you wish to incorporate parts of the Program into other free programs
whose distribution conditions are different, write to the author to ask forpermission. For software which is copyrighted by the Free SoftwareFoundation, write to the Free Software Foundation; we sometimes makeexceptions for this. Our decision will be guided by the two goals ofpreserving the free status of all derivatives of our free software and ofpromoting the sharing and reuse of software generally.
NOWARRANTY
11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE,
THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EX-TENT PERMITTED BY APPLICABLE LAW. EXCEPT WHENOTHERWISE STATED IN WRITING THE COPYRIGHT HOLD-ERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM “ASIS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSEDOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IM-PLIED WARRANTIES OF MERCHANTABILITY AND FITNESSFOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THEQUALITY AND PERFORMANCE OF THE PROGRAM IS WITHYOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU AS-SUME THE COST OF ALL NECESSARY SERVICING, REPAIR ORCORRECTION.
12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR
AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER,OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDIS-TRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLETO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPE-CIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISINGOUT OF THE USE OR INABILITY TO USE THE PROGRAM (IN-CLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATABEING RENDERED INACCURATE OR LOSSES SUSTAINED BYYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAMTO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH545 C.3 NO WARRANTY
HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.
END OF TERMS AND  CONDITIONS
 
HOW TO  APPLY THESE TERMS TO YOUR NEW PROGRAMS
If you develop a new program, and you want it to be of the greatest possibleuse to the public, the best way to achieve this is to make it free software whicheveryone can redistribute and change under these terms.
To do so, attach the following notices to the program. It is safest to attach
them to the start of each source ﬁle to most effectively convey the exclusion ofwarranty; and each ﬁle should have at least the “copyright” line and a pointerto where the full notice is found.
one line to give the program's name and an idea of what it does.
Copyright (C) year name of author
This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public Licenseas published by the Free Software Foundation; either version 2of the License, or (at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty ofMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See theGNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free SoftwareFoundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111, USA.
Also add information on how to contact you by electronic and paper mail.
If the program is interactive, make it output a short notice like this when
it starts in an interactive mode:
Gnomovision version 69, Copyright (C) year name of author
Gnomovision comes with ABSOLUTELY NO WARRANTY; for detailstype `show w'.  This is free software, and you are welcometo redistribute it under certain conditions; type `show c'for details.Appendix C GNU General Public License 546
The hypothetical commands ‘ show w ’ and ‘show c ’ should show the ap-
propriate parts of the General Public License. Of course, the commands youuse may be called something other than ‘
show w ’ and ‘show c ’; they could
even be mouse-clicks or menu items—whatever suits your program.
You should also get your employer (if you work as a programmer) or your
school, if any, to sign a “copyright disclaimer” for the program, if necessary.Here is a sample; alter the names:
Yoyodyne, Inc., hereby disclaims all copyright
interest in the program `Gnomovision'(which makes passes at compilers) writtenby James Hacker.
signature of Ty Coon , 1 April 1989
Ty Coon, President of Vice
This General Public License does not permit incorporating your program
into proprietary programs. If your program is a subroutine library, you mayconsider it more useful to permit linking proprietary applications with thelibrary. If this is what you want to do, use the GNU Lesser General PublicLicense instead of this License.547 C.5 How to Apply These Terms to Your New Programs

Symbols
- (minus)
in command-line options, 26operator, 56in permissions, 11in regular expressions, 43in shell pattern matching, 14
-- (double minus)
in command-line options, 26operator, 56
-= operator, 56
_ (underscore) in ﬁlenames, 10
: (colon)
in classpath, 24, 107, 119in shell pattern matching, 14in vi, 37, 43–45
! (exclamation mark)
operator, 56in shell pattern matching, 14
!= operator, 56
? (question mark)
as command-line option, 29in shell pattern matching, 14, 196in SQL, 333in URLs, 406, 412
?: operator, 56
/ (forward slash)
as ﬁle separator, 107in HTML/XML, 221–222, 433operator, 56
// comments, 66
/* ... */  comments, 66, 128
/** ... */  comments, 128/= operator, 56
. (dot)
as current working directory, 12, 20, 24, 29,
121, 238
in ﬁlenames, 10in regular expressions, 43
.. (dot-dot) parent directory, 12
... (ellipsis) in method declarations, 82
^ (hat)
for the Control key, 18operator, 56in regular expressions, 43in shell pattern matching, 14
^= operator, 56
~ operator, 56
' (single quote)
for literals in SQL, 333in shell pattern matching, 15
" (double quote)
for String s in Java, 60, 333
in shell pattern matching, 15, 108
[] (square brackets)
array operator, 55–56in regular expressions, 43in shell pattern matching, 14
{} (braces)
array operator, 55for compound statements, 66–70in Javadoc comments, 130in shell pattern matching, 108
@ (at), 181
in command-line options, 117, 123in Javadoc comments, 128Index
549
$ (dollar)
in format ﬁelds, 81in regular expressions, 43in shell pattern matching, 15, 22
$$ environment variable, 108
* (asterisk)
in import  statements, 85–86
operator, 56in password ﬁelds, 373in regular expressions, 43in shell pattern matching, 13, 16, 113, 196
*= operator, 56
\ (backslash) in shell pattern matching, 15
& (ampersand)
operator, 56in regular expressions, 43in URLs, 406, 412
&& operator, 56
&= operator, 56
# (hash)
in comments, 196in properties ﬁles, 111
% (per cent)
operator, 56in regular expressions, 43
%= operator, 56
+ (plus)
operator, 56, 60in permissions, 11in regular expressions, 43in URLs, 413
++ operator, 56
+= operator, 56
< (less-than)
operator, 56as redirection command, 6
< ... >
in command-line syntax, 73in HTML/XML, 221
<? ... ?> , 222
<% ... %> , 426–431, 434
<%! ... %> , 429–430, 434
<%@ ... %> , 431–433
<%= ... %> , 430–431, 434
<< operator, 56
<<= operator, 56
<= operator, 56> (greater-than)
operator, 56as redirection command, 6
>= operator, 56
>> operator, 56
>>= operator, 56
>>> operator, 56
>>>=  operator, 56
= operator, 56
== operator, 56, 61, 91
| operator, 56, 391
|= operator, 56
|| operator, 56
Numbers
0wn3d systems, 4862-tier systems, 1383-tier systems, 138
A
a element (HTML), 412
A Windowing Toolkit, see AWT
abstract  access modiﬁer, 94
AbstractTableModel  class, 359–363, 368,
389
access modiﬁers, 88–94
ActionListener  class, 356
actionPerformed() , 356, 367, 371
ActiveX, 390
add() , 142, 352–353, 391
addActionListener() , 391
addControlListener() , 392
addCookie() , 415
addFocusListener() , 392
addHelpListener() , 392
addKeyListener() , 393
addMouseListener() , 393
addMouseMoveListener() , 393
addMouseTrackListener() , 393
addPaintListener() , 393
address space conﬂicts, 380
addSelectionListener() , 391–393
addTraverseListener() , 393
afterLast() , 336
Albaugh, Tyrrell, xxvAlbing, Andrew, xxvalgebraic expressions, 52
alien  package, 322Index 550
Alpha architecture, 186
Ant, 161, 215–233, 397, 505
building JAR/WAR/EAR ﬁles, 513, 516command-line options, 223comparing with make, 225datatypes, 228documentation, 232–233installing, 217–220properties, 224targets, 223tasks, 225–228, 464, 516using with CVS, 516–517using with EJBs, 502using with gcj, 226using with JUnit, 303, 312using with NetBeans, 248–249using with XDoclet, 517–518
ANT_HOME  environment variable, 219–220
AOP (aspect-oriented programming), 277Apache, 217, 321, 444, 446, 464
append() , 419
applets, 131, 145, 165, 226appletviewer, 131application servers, 325, 444, 476applications
building, 216deploying, 160–163developing, see software engineering
distributing, 157Free, see Free Software
nonsystem, 446Open, see Open Source
readability of source code, 70releases, 190, 208, 210, 312reliability, 264running, 100, 111–113testing, 103–104
archives, 26
Array  class, 333
ArrayList  class, 333
arrays, 55–57
associative, 482checking, 185multidimensional, 55operators for, 56ragged-edged, 57size, 55zero-based, 333ASCII encoding, 48, 165, 525–526
asedit, 49ASP clients, 480aspect-oriented programming, see AOP
Assert  class, 308
assertEquals() , 306, 308
assertFalse() , 307
assertNotNull() , 306–307
assertNotSame() , 307
assertNull() , 307
assertSame() , 307–308
assertTrue() , 307
assignments, 56, 59, 66atd, 454, 459authentication, 164–165, 324, 485–486
@author  tag (Javadoc), 127–129, 518
autoconf, 446AWT (A Windowing Toolkit), xxiii, 251, 341,
344–345, 384
axe, 48
B
backups, 190, 317Barry, Dave, 17
.bash_profile  ﬁle, 173
bash shell, 5, 7, 22, 397
.bashrc  ﬁle, 24–25, 193, 240
bean-managed persistence, see BMP
beans, see EJBs, JavaBeans
BeanShell, 259BEAWeblogic, xxviiiBeck, Kent, 280
beforeFirst() , 336
Berkeley DB, 321
BigDecimal  class, 54, 175, 333
BigInteger  class, 54
binding, 482, 484BMP (bean-managed persistence), 479BNF language grammar, 65book’s Web site, xxiv, 229, 350, 395, 417,
493, 517, 522
Boolean  class, 62
boolean  type, 54, 56
converting to String , 80
BorderLayout  class, 352–353, 372, 374,
390
Borland, 236
BoxLayout  class, 354–355, 372, 374551 Index
break  statement, 67, 74–75
browsers, 404
connecting with a server, 413plug-ins, 166sessions, 414–415
Bruce Perens’ Open Source Series, xxii, xxiv,
523
BSD/UNIX, 5B-trees, 321BudgetPro
as a servlet, 416–420, 423, 430buildﬁle for, 464database for, 320, 324EAR ﬁle for, 506–512, 515in JSP, 424–426, 438in Swing, 348–373, 527–537in SWT, 387–395
buildﬁles (
build.xml ), 220–231, 248, 257,
516
Button  class, 385, 388, 391–392
buttons (in GUI), 345, 352, 355–356, 374
actions, 356–358, 374enabled/disabled, 357, 392
byte  type, 53–54
bzip2, 218
C
C language, 53, 249C++ language, 249
exceptions, 77operator overloading, 52templates, 94virtual methods, 96
CallableStatement  class, 337
Canvas  class, 385
Capability Maturity Model, see CMM
Caret  class, 385
Carnegie, Dale, 274
case  statement, 67
Cash-Peterson, Patrick, xxivCastor, 321cat, 17
catch  statement, 76–79
char  type, 54
characters
coding, 54counting, in a ﬁle, 9escaping, 9, 15characters (continued)
lowercase/uppercase, 61ranges, 14–15
check boxes (in GUI), 346chgrp, 11, 448chkconﬁg, 456, 458–463chmod, 11, 240, 448, 463chown, 11CICS (Customer Information Control
System), 518
CIDR (Classless Inter-Domain Routing), 485CIFS ﬁlesystem, 485
class  statement, 86
classes, 34, 58, 86
abstract, 305, 368base, 285compiling, 117, 119constructors for, 59, 140core language, 86deprecated, 120, 127, 129documentation, 518extended, 87–91, 96ﬁles, 58–59, 84–85, 117, 119
disassembling, see javap
grouping, 83inherited, 87–91, 94, 284inner, 59, 87, 348, 356, 360, 393instances, 58names, 83–86, 119referencing, 85–86RMI serial versions, 165scope, 59testing, 102without 
package  declaration, 183
classpath, 117–119, 181
bootstrap, 117runtime, 119, 121–122
CLASSPATH  environment variable, 84–85,
118, 145, 158, 184, 211, 242, 297, 301,308, 332, 501
overriding, 119, 121–122setting, 119
clients
compiling, 147developing, 142–143setting up, 144–147working with servers, 138Index 552
CMM (Capability Maturity Model), 277,
286, 288–289
CMP (container-managed persistence), 476,
479
CNI (Compiled Native Interface), 186CodeCommander, 48collections, 70–74color choosers (in GUI), 347combo boxes (in GUI), 346, 385
Combo  class, 385
command line, 4, 151, 258, 341
options, 26, 100–102standard I/O, 6
commands
built-in, 24documentation, 29installing, 24online help, 29searching, 24, 29
comments
in HTML, 428in Java, 66, 428, 518in Javadoc, 127–131
commit() , 77
Compatibility Test Suite for J2EE, 521compilation, 179–188, 248
of a multiclass application, 184cross-platform, 180, 186, 446with debug information, 120, 227speed, 348see also  gcj, javac
Compiled Native Interface, see CNI
Composite  class, 385, 388–389, 392, 394
Concurrent Versioning System, see CVS
conditionals, 66–67
Connection  class, 325, 329
constants, 90–91constructors, 59, 140cont, 156container-managed persistence, see CMP
containers
EJB, 444, 474, 476, 491, 495J2EE, 479, 505Swing, 344Web, 476
containsKey() , 111
containsValue() , 111context, 479, 484
initial, 489–491switching, 476
Context  class, 490
continue  statement, 74–75
Control  class, 389
cookies, 414–415
copy  tag (Ant), 227
CORBA (Common Object Request Broker
Architecture), 144, 165, 175, 480
CRC cards, 280–288
createAction() , 371
createButtons() , 355, 391, 394
createdb, 324
createList() , 360, 369, 391, 394
createStatus() , 353, 358, 391, 394
createuser, 323csh shell, 5, 105Cunningham, Ward, 280Customer Information Control System, see
CICS
CVS (Concurrent Versioning System), 126,
189–214, 241
checkouts, 191, 197–198, 210, 244, 246command-line options, 198, 204, 207, 210commits, 191–194, 198–203, 244, 246differences between versions, 199–201, 246documentation, 214editor invocations, 198exports, 210imports, 196–197logs, 199, 203–205, 246merging, 201–203repositories, 191
initializing, 193–195remote, 195, 214
sandboxes, 191, 194, 210status, 205, 246tags, 191, 205–210
branching, 207–210deleting, 207moving, 207sticky, 205, 209
updates, 191–194, 198, 201–202, 246using with Ant, 516–517using with Eclipse, 259using with NetBeans, 244–248
CVS directories, 194, 197, 209–210553 Index
CVS_RSH  environment variable, 214, 516
CVSEDITOR  environment variable, 198
.cvsignore  ﬁle, 195–196
.cvspass  ﬁle, 195
CVSROOT  directories, 194
CVSROOT  environment variable, 193–194,
209, 516
.cvswrappers  ﬁle, 195–196
D
daemons, 323, 407data types
nonobject, 52numeric, 53–54object, 57–64wrappers for, 62
databases, 138, 315–326
connecting to, 328–332, 336, 496creating, 324interaction with, 327, 480normalizing, 326querying, 328, 332–334, 411relational, 322, 518selection criteria, 318setup, 318updating, 336
DataSource  class, 336
DataType  class, 228
Date  class, 81
Davidson, James Duncan, 216–217Debian, 47, 322, 457, 463debugging, 91, 103, 136, 148–151
adding information to class ﬁles, 120, 176
declarations, in JSP, 434
default  statement, 67
DefaultTableModel  class, 368
@deprecated  tag (Javadoc), 120, 129
destroy() , 404, 407
dialogs (in GUI), 370–373
dismissed, 372modal, 372
dir, 14directories, 483–484
current working, 12, 20, 24, 29, 107, 121,
238
home, 107directories (continued)
listing ﬁles in, 9, 15parent, 12permissions of, see permissions
directory services, 482–487, 491, 494
Display  class, 381, 384, 386–390
dispose() , 380, 388
DNS (Domain Name Service), 482–484,
487–491
Docbook, 221doclets, 123, 126
@docRoot  tag (Javadoc), 130
Document Style Semantics and Speciﬁcation
Language, see DSSSL
Document Type Deﬁnitions, see DTDs
documentation, 122–131
comments, 127–131links, 127, 130–131
doGet() , 404, 407, 412, 418, 427, 429
Domain Name Service, see DNS
domains, 83
doPost() , 405, 407, 412, 418, 427, 429
DoS (Denial of Service) attacks, 489, 491
Double  class, 333, 359
double  type, 53–54
do-while  statement, 68–69, 75
DriverManager  class, 329, 336
DSSSL (Document Style Semantics and
Speciﬁcation Language), 221
DTDs (Document Type Deﬁnitions), 220,
222
dump, 156DynamicJava, 259
E
e3, 49EAR ﬁles, 28, 506–514
building with Ant, 513, 516deploying, 514–516
echo, 239Eclipse, 175, 251–258, 378–379, 382, 396,
464
documentation, 260, 383downloading, 252GTK vs. Motif versions, 252, 383, 396installing, 251–254Index 554
Eclipse (continued)
perspectives, 253
Debug, 253–254Java, 256–258Resource, 253–256
projects, 254refactoring, 258–259, 388using with CVS, 259using with JUnit, 312using with XDoclet, 519views, 253working with, 257–258
ed, 47eddi, 48
EDITOR  environment variable, 198
ejbCreate() , 496
EJBHome  class, 498–499
EJB-JAR ﬁles, 508–511
ejb-jar.xml , 509–511, 519
EJBLocalHome  class, 499–501
EJBLocalObject  class, 499–501
EJBObject  class, 495, 497–498, 512
ejbRemove() , 496
EJBs (Enterprise JavaBeans), 138, 148, 216,
473–492, 518
activating/passivating, 475–476, 496compiling, 501–502creating, 475deploying, 505–519destructing, 475documentation, 503entity, 475–476, 479, 492, 499, 503implementing, 474, 493–503message, 475, 481session, 475–481, 492, 495, 499
stateful, 476, 478–479, 502stateless, 476–477, 495–498
using with Ant, 502
elvis, 34–35Emacs, 34, 48–49, 214encapsulation, 86–87
endsWith() , 61
Enterprise Java, see J2EE
Enterprise JavaBeans, see EJBs
enterprise systems, 138
EntityBean  class, 475
enum  statement, 91enumerated values, 90–91
Enumeration  class, 71, 490
env, 108
ENVFILE  environment variable, 109–110
.envfile  ﬁle, 110
environment variables, 22–25, 104–109, 219
exporting, 22, 105names, 105passing to Java, 107setting, 23, 105substituting, 15
environments, 104–110
equals() , 61
equalsIgnoreCase() , 61
Error  class, 306
error handling, 75–79error messages, 6–8, 112
/etc/inittab , 451–453, 457
events
loops, 381time, 348
ex, 37
Exception  class, 76–77, 306, 490
@exception  tag (Javadoc), 130
exceptions, 75–76, 79, 130
catching, 78creating, 77extending, 75, 77null pointer, 59stack trace, 77throwing, 76–77
Exclude  datatype (Ant), 228
exec() , 111–113
executeUpdate() , 336
exit , 24
export , 23, 105, 194
expressions
in Java, 66in JSP, 434
.exrc  ﬁle, 44–45
ext directory, 301, 332
extcheck, 164
extends  statement, 87–88, 92
Extensible HyperText Markup Language, see
XHTML
Extensible Markup Language, see XML555 Index
F
fail() , 307
false  constant, 54
FAT ﬁlesystem, 485Fedora, 322, 324, 452–453, 456, 458–463FetchURL, 97, 158
compiling, 117–118, 182–183running, 121, 148–156
ﬁle, 16–17ﬁle choosers (in GUI), 347File Transfer Protocol, see FTP
ﬁlenames, 9–10, 168, 483–484
case sensitiveness, 10changing, 12, 25extensions, 10spaces in, 10
ﬁles
access time, 21counting characters, words, lines in, 9deltas, 210descriptors, 102–104modiﬁcation time, 9, 16, 21moving, 11–13ownership of, see owners
permissions of, see permissions
searching, 19–21size, 9, 16temporary, 109types, 17viewing, 18
ﬁlesystems, 483, 485
mounted, 170–171, 245networked, 171
FillLayout  class, 390
FilterSet  datatype (Ant), 228
final  access modiﬁer, 87, 90–91, 96
finally  statement, 78–79
ﬁnd, 19–21, 29, 397
fireTableCellUpdated() , 369
fireTableChanged() , 369
fireTableDataChanged() , 368–369
fireTableRowsDeleted() , 369
fireTableRowsInserted() , 369
fireTableRowsUpdated() , 369
fireTableStructureChanged() , 369
Float  class, 62float  type, 53–54
FlowLayout  class, 354
folders, see directories
for statement, 69–70
for arrays, 74changing execution, 75for collections, 74compared with the 
while  loop, 70, 73
with multiple expressions, 69in shell scripts, 21, 25
form  element (HTML), 406
format ﬁelds, 80–82
Formatting  class, 82
Free Software, xxiii–xxiv, xxviii, 180, 379,
446, 522–523
FSF (Free Software Foundation), xxiii, 180fte, 49FTP (File Transfer Protocol), 142, 485
G
garbage collection, 380, 388, 436Garbage In, Garbage Out, 312gcc (GNU Compiler Collection), 181, 188gcc (GNU C Compiler), 180gcj (GNU Compiler for Java), xxiii, xxv, 157,
181–188, 379
command-line options, 182–185documentation, 188installing, 144performance, 186–187using with Ant, 226using with SWT, 396–398
GECOS, 447gEdit, 48General Public License, see GNU GPL
generics feature, 94–95Gentleware, 249Geronimo, 464–466, 495, 501, 521
deploying, 515documentation, 468–469, 519installing, 467mapping, 509running, 468
GET request, 406
getAttribute() , 414
getColumnCount() , 360
getColumnName() , 360Index 556
getConnection() , 329
getContentPane() , 352
getCookies() , 415
GetDomain  class, 489
getenv() , 105–106
getInt() , 334–335
getName() , 363
getOwner() , 363
getParameterNames() , 412
getParameterValues() , 413
getPlatform() , 390
getProperties() , 106
getProperty  element (JSP), 435
getProperty() , 106, 110–111
getRow() , 336
getRowCount() , 360
getSelectedRow() , 367
getSelectionModel() , 366
getSession() , 414
getString() , 334–335
getTableCellRendererComponent() ,
364
getTableHeader() , 369
getTotal() , 363, 435
getty, 451
GetUser  class, 132–137
getValueAt() , 360, 363–364, 367
getVersion() , 390
GHOME  environment variable, 501
gid (group ID), 446–447
GIGO (Garbage In, Garbage Out), 312GIMP (GNU Image Manipulation Program),
252
Glimmer, 48GNOME, 48GNU, xxiv, 5, 26, 179–180GNU C Compiler, see gcc
GNU Classpath, 182GNU Compiler Collection, see gcc
GNU Compiler for Java, see gcj
GNU GPL (General Public License), xxiv,
180, 182, 379, 539–547
GNU/Linux, see Linux
GnuPG (GNU Privacy Guard), 164, 218–219
Graphics2D  class, 385
grep, 18–19, 180
Group  class, 385, 389, 391GTK (GIMP Toolkit), 252, 383
GUI, 151, 341
and program parameters, 100construction time, 348designing, 347–374graphical objects, 345–347native compiled, 378–379rigid areas, 355
gvim, 35gzip, 218, 466
H
hard links, 168–171
Hashtable  class, 106, 111
Hashtables  class, 70
Hayes, Andrew, xxvhead, 18header ﬁles, 133“Hello, world”
in Swing, 342–344in SWT, 381–384Web page, 407–410
Hibernate, 321
HOME  environment variable, 25, 105, 160
hosts, 83HTML (HyperText Markup Language), 221,
405
comments, 428dynamically generated, 406–407forms, 406, 412generated from XML, 406hyperlinks, 416using for prototyping, 275
HttpRequest  class, 414
HttpServlet  class, 404, 407, 430
HttpServletRequest  class, 415
HttpServletResponse  class, 418
HURD microkernel, 180Huseth, Steve, xxvhyperlinks, 416HyperText Markup Language, see HTML
I
I/O, 79
closing, 78redirecting, 6, 163standard, 6–8, 102–104557 Index
IBM, 236, 377, 518
Common Public License, 379developerWorks, xxv, 396Java SDK, xxiii, xxiv, 167–177, 378
debugging, 176differences from SUN Java SDK,
174–176
installing, 173performance, 175
MQSeries, 481PC, 34, 48Web site, 176–177
ide.cfg , 238
Idea IDE, 236ident, 324
Identifiable  class, 88
IDEs (Integrated Development
Environments), 213, 235–260, 505
IDL (Interface Deﬁnition Language), 144, 165
if-else  statement, 66–67
inline, 56in shell scripts, 21
IIOP (Internet Inter-ORB Protocol), 144,
165, 175, 480
ImageIcon  class, 358
implements  statement, 87, 92
import  statement, 85–86, 90, 432
include  C/C++ directive, 85
Include  datatype (Ant), 228
IndexOutOfBounds  exception, 62
info, 30init, 452
init() , 404, 407, 512
InitialContext  class, 487
InitialDirContext  class, 490
initialization ﬁles, 24InnoDB tables, 317
int type, 53, 333
converting to String , 80
Integer  class, 62, 359
Integrated Development Environments,
see IDEs
IntelliJ, 236interfaces, 87–88, 139
generating with XDoclet, 518home, 474, 494–495, 498–499, 511–512implementating, 87–88, 91–92inherited, 88interfaces (continued)
local, 492, 495, 499–501local home, 500remote, 144, 474, 478, 492, 494–495,
497–498, 512
remote home, 498
internationalization, 80–81IP addresses, 482–484IPv6, 485IRIX operating system, 456
isAfterLast() , 335
isBeforeFirst() , 335
isCellEditable() , 365
isEmpty() , 111
isFirst() , 335
isLast() , 335
ISO (International Organization for
Standardization), 485
isTotal() , 435
iterators, 70–74
J
J2EE (Java 2 Enterprise Edition), 28, 115,
148, 444, 464–466, 498–499, 501, 510,517–518
documentation, 492, 503
J2SE (Java 2 Standard Edition), 62, 115Jakarta project, 438, 444
JApplet  class, 344
jar, 28, 157–164, 506, 513
command-line options, 163–164
JAR ﬁles, 17, 28, 122, 157–164
building with Ant, 513, 516digitally signed, 164–165in NetBeans, 241
jar tag (Ant), 227
jarsigner, 164java, 121–122, 156, 158, 175
command-line options, 122
Java, 94–95, 522
and Open Source, xxiii–xxiv, 521comments, 66, 428, 518documentation, xxviii, 166performance, 378portability, 53version 5.0, 73, 80, 90, 94versions 1.2 and older, 105versions 1.3 and newer, 106Index 558
Java Compiler, see javac
Java Data Objects, see JDO
Java DataBase Connectivity, see JDBC
Java Debugger, see jdb
Java Decompiler, see javap
JAVA_HOME  environment variable, 173,
219–220, 332
Java Naming and Directory Interface, see
JNDI
Java Native Interface, see JNI
Java Runtime, see java
Java SDKs (Software Development Kits)
IBM, see IBM Java SDK
installing, 144Sun, see Sun Java SDK
switching between, 168, 173
Java Security Manager, 104Java VMs (Virtual Machines), 95, 111, 175,
186–187, 383
java.library.path , 383
.java.policy  ﬁle, 146, 165
JavaBeans, 321, 337, 474
duration, 436enterprise, see EJBs
session, 439using with JSP, 434–437
javac, 24, 117–120, 173, 186, 216
command-line options, 100, 119–120, 148debugging, 120, 148diagnostics on success, 117performance, 186–187
javac  tag (Ant), 225
Javadoc, 62–64, 114, 122–131, 227
“Use” pages, 126at-tags, 128, 518command-line options, 123–127comments, 127–131documentation, 128downloading, 64running, 123
javadoc  tag (Ant), 227
javah, 132–137javap (Java Decompiler), 157–160
JAVAPTH  environment variable, 459, 462
JavaScript, 412JavaServer Pages, see JSPjavaw, 175
JBoss, 495, 501, 521
conﬁgurations, 462deploying, 515documentation, 469, 519downloading, 444installing, 446, 450–451, 463JBoss-IDE, 464mapping, 509–511using with JNDI, 491using with XDoclet, 519
JBOSS_HOME  environment variable, 459, 462
jboss.xml , 509–511
JBOSSSH  environment variable, 462
JBuilder IDE, 236
JButton  class, 354–358, 374, 385–386, 388
JCheckboxMenuitem  class, 385
JComboBox  class, 385
JComponent  class, 386
jCVS, 211–213
documentation, 214
JCVS  environment variable, 212
jdb (Java Debugger), 148–151JDBC (Java DataBase Connectivity),
321–322, 325, 327–338, 480, 496
documentation, 337downloading, 332
JDialog  class, 344, 374
JDK, see Sun Java Development Kit
JDK_HOME  environment variable, 173
JDO (Java Data Objects), 321JED, 48jedit, 47
JEditorPane  class, 386
JFace  class, 380
JFormattedTextField  class, 386
JFrame  class, 344–345, 351–354, 373–374,
384, 388–389
jgnash, 158Jikes compiler, 177, 227JITs (Just-In-Time compilers), 175, 186, 378
JLabel  class, 344, 353–354, 364, 373–374,
384–385, 388
JList  class, 385
JMenu  class, 385
JMenuItemA  class, 385559 Index
JNDI (Java Naming and Directory Interface),
336, 482–491, 509
contacting with, 511documentation, 491–492using with JBoss, 491
JNI (Java Native Interface), 113, 132–137,
186, 378
joe, 48
JPanel  class, 352–355, 370, 374, 385–386
JPasswordField  class, 373, 386
JProgressBar  class, 385
JPython, 259
JRadioButtonMenuitem  class, 385
JScrollPane  class, 369, 374, 385
JSlider  class, 386
JSP (JavaServer Pages), 138, 416, 423–441,
444
declarations, 429–430, 434directives, 431–433documentation, 440expressions, 430–431, 434generated from XML, 434predeﬁned variables, 432scriptlets, 427–429, 434updating, 433using with JavaBeans, 434–437using with servlets, 425, 430validating, 434XML syntax for, 434
JSpinner  class, 385
JSTL (JSP Standard Tag Library), 437–438,
440
JTable  class, 359–364, 367–368, 370, 374,
386
JTableColumn  class, 386
JTableHeader  class, 369
JTabPane  class, 386
JTextArea  class, 374, 386
JTextField  class, 372–374, 386
JTextPane  class, 374, 386
JTree  class, 374, 386
JUnit, 295–313
assertions, 305–308command-line version, 303documentation, 313downloading, 299–301errors, 306JUnit (continued)
failures, 306GUI version, 302installing, 297–303test cases, 303–309test suites, 309–311using with Ant, 303, 312using with Eclipse, 312
K
KDE, 100, 252Kerberos, 165kernel, 4, 446keytool, 165kill, 468Kirsanova, Alina, xxvKISS principle (Keep It Simple, Stupid!), 282konsole, 6Kumar, Deepak, xxv
L
Label  class, 384–385, 388, 391–392
labels (in GUI), 346, 353–354, 374, 385layout managers, 347–348, 372, 374, 392
LayoutManager  class, 374
LD_LIBRARY_PATH  environment variable,
135, 383
LDAP (Lightweight Directory Access
Protocol), 140, 485–487
distinguished names, 485
ldconﬁg, 135
length() , 61
less, 17Lessig, Lawrence, 522, 524
libgcj , 182, 188
libraries
in command-line options, 181names, 135shared, 135, 383
@link  tag (Javadoc), 130–131
LinkedLists  class, 70
Linux, xxiii, 107, 180, 522
philosophy, 524as programmer-friendly platform, xxireleases, 34tools, 5
list, 156Index 560
List  class, 385
list() , 110
lists (in GUI), 346, 385
Lists  class, 70
ListSelectionListener  class, 366
ListSelectionModel  class, 365–367
load() , 110
loadLibrary() , 135
log ﬁles, 18, 104Logajan, George, xxv
Long  class, 62
long  type, 53
lookup() , 142
loops, 67–75ls, 6, 9, 15, 24, 100, 180, 240, 446, 483LVM (Logical Volume Manager), 171
M
Macromedia Flash, 166
main() , 100–102, 121–122, 161
specifying on command line, 183, 185
mainframe clients, 480make, 216, 397
comparing with Ant, 225
makeﬁles, 216man, 29–30manifest ﬁles (
MANIFEST.MF ), 122, 161–162,
507, 511
marshaling/unmarshaling, 143, 482, 495, 500mbedit, 47md5sum, 218–219memory leaks, 380
Menu  class, 385
MenuItem  class, 385
menus (in GUI), 346, 385
MessageBean  class, 475
META-INF  directory, 507, 511
methods
calls, 66deﬁning, 58deprecated, 120, 127, 129native, 132–137, 216overriding, 96remote, 143return values, 75scope, 59with variable argument list length, 82void, 75Microsoft
Active Directory, 487Internet Explorer, 166Message Queue Server, 481MS-DOS, 10, 14, 163Windows, 161, 163, 217, 253, 255, 319,
381
Miller, Andy, xxvmkdir, 194
mkdir  tag (Ant), 227
Model/View/Controller design pattern, 359,
438
modularization, 9MoneyBean, 496Mono project, 521Monty Python, 215Moore, Dan, xxvmore, 17, 238Motif, 47, 49, 252, 383
MouseAdapter  class, 393
MouseListener  class, 393
Multics project, 6multitier systems, 137, 143, 147, 518
MutableTreeNode  class, 386
mv, 11–13, 100MyISAM tables, 317MySQL, 317, 328
connecting to, 329documentation, 317, 326JDBC for, 332, 337
mysqld, 459
N
\n , 81, 107
namespaces, 83, 484naming services, see directory services
NamingEnumeration  class, 490
native2ascii, 165NDS (Novell Directory Service), 487NEdit, 47.NET development environment, 480, 521NetBeans, 236–251
CVS in, 244–248documentation, 259–260downloading, 237editing, 243–244GUI, 240–244installing, 237–239561 Index
NetBeans (continued)
running, 239–240using with Ant, 248–249using with C/C++, 249using with servlets, 430
new statement, 56–59, 87
newline characters, in output, 79
NewStringUTF() , 134
next, 156
next() , 73
NFS (Network File System), 459, 485
nobody  user, 323
nonblocking revisions, 317Novell Directory Service, see NDS
NTFS ﬁlesystem, 485numbers, 53–54nvi, 34
O
Object  class, 61, 87, 94, 359
objects, 57
comparing, 56converting to 
String , 80
creating, 56grouping, 70referencing, 59–60
ODMG (Object Data Management Group),
321
OJB (Object Relational Bridge), 321
OLE class, 390
OOA (object-oriented analysis), 279–280,
285, 287
OOD (object-oriented design), 279–287, 359OOP (object-oriented programming), xxviii,
57
Open Publication License, The, xxivOpen Source, xxiii–xxiv, xxviii, 5, 46, 189,
213, 379, 522–524
openejb-jar.xml , 509
operators, 55–56
overloading, 52precedence, 55unary, 55–56
Oracle, 316, 318, 328, 332
connecting to, 329documentation, 337
orbd, 175OSI (Open Systems Interconnection), 485
OTN (Oracle Technology Network), 318owners of ﬁles, 9–10, 16
changing, 11, 170, 448group, 10, 445–450, 463other, 10user, 10
P
pack() , 345, 352
package  statement, 83–85, 125, 183
packages
default, 183directories, 84documentation, 123names, 83–84, 146protecting, 83size, 83
panels (in GUI), 347
@param  tag (Javadoc), 130, 518
Pascal, 69passwords, 285, 324, 373
root , 445–450
sharing, 445–446storing, 195, 447supplying in URL, 329
PATH  environment variable, 24–25, 105, 144,
173, 219, 239
pattern matching, 13–15
PatternSet  datatype (Ant), 228
Payback, 123, 161–163
buildﬁle for, 229–231compiling, 184
pBeans, 321Perens, Bruce, xxvPerl, 44, 446permissions, 10–11, 445, 463
changing, 11, 448for directories, 9, 449for ﬁles, 9, 16for hard links, 170
persistent storage, 316, 320–322pg, 17PGP signatures, 218pico, 47pipes, 8–9, 238, 258pkzip, 163Index 562
pointers, 134
null, 59, 75
policytool, 165polymorphism, 91–94portability, 53, 106, 113, 186–187, 216, 319,
380
portmanteau abbreviations, 157portmap, 459Poseidon for UML, 249
POST  request, 406, 412
postgres  user, 323
postgresql, 459PostgreSQL, 317, 328
documentation, 317, 326installing, 322
predicates, 20–21Prentice Hall PTR, xxiv, 523
PreparedStatement  class, 329, 333, 335,
337
print() , 79
printf() , 79–82
println() , 79, 419
printStackTrace() , 77
PrintStream  class, 79
private  access modiﬁer, 83, 88–89, 125
processes
IDs, 108running, 121
programs, see applications
progress bars (in GUI), 346, 385
ProgressBar  class, 385
project  element (Ant), 223–224
Properties  class, 106, 109–111, 224
properties ﬁles, 109–111, 113
comments in, 111names, 110
property  element (Ant), 224
propertyNames() , 111
protected  access modiﬁer, 88–89, 125
prototyping, 274–276, 416proxies, 143, 494ps, 468
public  access modiﬁer, 83, 88–90, 124
put() , 111
Q
Qt library, 252R
radio buttons (in GUI), 345RAID (Redundant Array of Inexpensive
Disks), 171
Raymond, Eric, xxiii, 449RealPlayer, 166
rebind() , 142
RedHat, 217, 322, 452, 456, 458–463
Package Manager, see rpm
regular expressions, 19, 43–44
RemoteException  exception, 139–140
remove() , 71
repeat-until  statement, 69
ResultSet  class, 329, 334–337
return  statement, 75
@return  tag (Javadoc), 130
rigid areas (in GUI), 355
rm, 109
RMI (Remote Method Invocation), 137–148,
216, 482
building with Ant, 228registry, 140, 142, 487stubs, 138, 143–144
rmic, 137, 143–144, 147, 216, 228
rmic  tag (Ant), 228
rmid, 165rmiregistry, 144, 148
Robot  class, 312
rollback() , 77
root  (superuser), 11, 323, 445–450, 452, 462
RowLayout  class, 391
RowSets  class, 337
rpm, 217rsync, 485run, 148runlevels, 452–459
Runtime  class, 111–113
S
Saint-Exupéry, Antoine de, 282
SAMoney  class, 496
Sash  class, 389
Scale  class, 385
scriptlets, 427–429, 434scroll panes (in GUI), 347, 369–370
Scrollable  class, 389563 Index
ScrollBar  class, 385
search engines, 412security, 165, 323–324, 486
and default groups for users, 448and 
root  access, 445, 462
auditability, 445checksums, 218digital signatures, 164, 218passwords, 324, 446–450policy ﬁles, 146, 165
security managers, 142, 145
SecurityException  exception, 104
SecurityManager  class, 131
sed, 44, 47, 258
@see  tag (Javadoc), 130
Selection  class, 392
selection listeners, 365–368, 393
SelectionAdapter  class, 393
SelectionListener  class, 393
SelectionModel  class, 374
serialver, 165servers, 404–407, 410, 443–469
compiling, 146–147connecting with a browser, 413developing, 139–142setting up, 144–147
Service Provider Interface, see SPI
service() , 404
Servlet  class, 404, 406
servlets, 138, 403–421, 512
designing, 416–420documentation, 440MIME for, 432packaging, 512–514session variables, 414, 431, 437, 439, 441using as daemons, 407using with JSP, 425, 430
Sesame Street, 343
Session  class, 139–142
SessionBean  class, 475, 495–498, 512
setAttribute() , 414
setBigDecimal() , 333
setDefaultCloseAction() , 344
setDefaultRenderer() , 364
setDouble() , 333
setEnabled() , 357
setEntityContext() , 475setenv , 105
setgid bits, 449
setHorizontalScrollBarPolicy() , 370
setHorizontalTextPosition() , 358
setInt() , 333
setLayout() , 355, 390
setProperty  element (JSP), 435
setProperty() , 111
setReorderingAllowed() , 368
setResizingAllowed() , 368
Sets  class, 70
setStatus() , 368, 392
setString() , 333
setters, 104
setText() , 354, 364
setTimestamp() , 333
setTotal() , 435
setUp() , 305, 309
setVerticalScrollBarPolicy() , 370
setVerticalTextPosition() , 358
setVisible() , 345, 352
SGML (Standard Generalized Markup
Language), 220–221
Shell  class, 381, 384, 386–391
shell languages, 21shell scripts, 22, 319
JUnit tests, 303loops, 25parameters, 25running, 24, 108for startup, 193
shell variables, see environment variables
shells, 4, 21–26shopping cart, 477–478, 481
short  type, 53
short-circuiting, 56
Slider  class, 386
sliders (in GUI), 346SMAC (SMall ANSI C Interpreter), 48SMB ﬁlesystem, 485software, see applications
software engineering, 57, 263–279
documenting, 272–274iterative approach, 266, 277requirements, 266–276, 288
Software Engineering Institute, 277sorting, 107Index 564
source control, 126, 189–190, 213
ﬁles for, 195
SourceForge, 299SPARC, 186SPI (Service Provider Interface), 487–491split panes (in GUI), 347
SpringLayout  class, 372
sprintf() , 82
SQL, 328, 333–336Stallman, Richard, xxiii, 179–180, 522, 524standard error, 6–8Standard Generalized Markup Language, see
SGML
standard input, 6–8, 47, 103standard output, 6–8, 47, 103
piping, 8, 107reassigning, 104redirecting, 6, 104, 108
Standard Widget Toolkit, see SWT
startsWith() , 61
Statement  class, 337
statements, in Java, 64–75
static  access modiﬁer, 87, 90–91, 102
static initializers, 133, 135status lines (in GUI), 352, 358step, 156STL algorithms, 95Stochniol, Andrzej, 49
store() , 111
stored procedures, 480streams, 109
strftime() , 81
String  class, 60–62, 86
StringBuffer  class, 60
strings
comparing, 61concatenating, 60, 79length, 61searching, 18–19substrings, 61
strlen() , 54
StrongARM, 186su, 445, 450
substring() , 61
Subversion, 189sudo, 445–446Sun Microsystems, 94, 106, 166, 187, 236,
321, 521
Java SDK, xxiii, xxiv, 115–166, 378
differences from IBM Java SDK,
174–176
Enterprise Edition, see J2EE
installing, 173Micro Edition, 115Standard Edition, see J2SE
SOS (SunONE Studio), 236, 251Web site, 64–65, 98, 161, 166, 337, 375,
421, 441, 491–492
superuser, see
root
Swing, xxiii, 251, 309, 341–376
compared to SWT, 379, 384–388, 395containers, 344documentation, 375graphical objects, 345–347performance, 378portability, 380using with HTML, 373
switch  statement, 67
SWT (Standard Widget Toolkit), xxv, 175,
251, 377–399
ActiveX support, 390adapters, 393and garbage collection, 380compared to Swing, 379, 384–388, 395documentation, 381, 383, 398installing, 381performance, 378portability, 380using with gcj, 396–398
SWT class, 390
SWTException  class, 390
symlinks (symbolic links), 171–172, 239, 451,
467
circular chains, 172dangling, 172
System  class, 86, 102–109
System V init system, 451–458, 463
T
tabbed panes (in GUI), 347
TabFolder  class, 386
TabItem  class, 386565 Index
Table  class, 386, 394–395
table  element (HTML), 386, 411
TableCellEditor  class, 386
TableCellRenderer  class, 374, 386
tableChanged() , 368
TableColumn  class, 386, 394–395
TableColumnModel  class, 386
TableItem  class, 386, 394–395
TableModel  class, 359, 368, 374
TableModelEvent  class, 368–369
TableModelListener  class, 368
tables (in GUI), 346
background color, 364editors, 365renderers, 363–365scrolling, 369–370in Swing, 352, 359–363, 374in SWT, 394–395
tag libraries, 437–438tail, 18tar, 26–29, 163, 217, 466
command-line options, 26, 238examining contents of ﬁles, 238
target  element (Ant), 223–224
Task  class, 228
Taub, Mark, xxivTCP/IP, 482, 485
td element (HTML), 411
tearDown() , 305, 307, 309
TestCase  class, 303–305, 308
TestRunner  class, 309
TestSuite  class, 309
text areas (in GUI), 346
Text  class, 386
text ﬁelds (in GUI), 346, 372, 374, 386text panes (in GUI), 346the, 48Thinking in Java , 52, 58, 60, 65, 94, 98
throw  statement, 76–77
throws  keyword, 306
@throws  tag (Javadoc), 130
time value of money, 495–497
Timestamp  class, 333
toLowerCase() , 61
Tomcat, 259, 407, 410, 430, 444tool tips (in GUI), 346ToolBar  class, 386
toolbars (in GUI), 347, 386
ToolItem  class, 386
toString() , 77, 80, 91, 359, 363–364, 419,
430, 490
touch, 433
toUpperCase() , 61
tr element (HTML), 411
translations, see internationalization
traverse() , 397
Tree  class, 386
TreeItem  class, 386
trees (in GUI), 346, 386
true  constant, 54
try statement, 76–79
U
uid (user ID), 446–447
Umbrello, 287, 290UML (Uniﬁed Modeling Language), 249,
285, 287, 289
UnicastRemoteObject  class, 140
Unicode, 54, 134, 165UNIX
archive formats, 163, 217commercial versions, 252daemon processes, 323ﬁlesystems, 483–485online manuals, 29operating system commands, 4philosophy, 524as programmer-friendly platform, xxi, 397releases, 34shell scripts, 319standard I/O, 6, 102tools, 5user interface, 4
unzip, 27, 299
inspecting ﬁles before unzipping, 299
URLEncoder  class, 413
URLs, 404–406
parameters in, 412–413, 436passwords in, 329
useBean  element (JSP), 435
USER  environment variable, 105
UTF-8 encoding, 134Index 566
V
validation, 220
variables
declaring inside for loops, 69
local, 77of object type, 59
@version  tag (Javadoc), 126
vi, 5, 34–45, 49
case sensitiveness, 44copying/pasting, 39deleting, 39exiting, 40–41indentation, 40, 45modes, 35
ex, 37–38, 40–44input, 35–36, 40, 45vi, 35
positioning, 36–38repeating commands, 40searching, 38–39, 41–44substitutions, 41–44undoing/redoing, 40using with CVS, 198using with NetBeans, 244words in, 37
vim, 34–35, 40
virtual  access modiﬁer (C++), 96
Virtual Network Console, see VNC
VISUAL  environment variable, 198
VNC (Virtual Network Console), 137Vogen, Kirk, xxv, 396Von Neumann architecture, 343
W
WAR ﬁles, 28, 464, 512
building with Ant, 513, 516
wc, 9Web browsers, see browsers
Web pages, 405
changing, 423common parts, 432dynamically generated, 406–407, 411static, 405, 416
Web servers, see servers
web.xml , 512–513, 519
WEB-INF  directory, 512WebSphere Studio, xxviii, 236
well-formedness, 221which, 24
while  statement, 67–68
changing execution, 75compared with the 
for loop, 70, 73
whitespace
in ﬁlenames, 10trailing, 44
Widget  class, 389, 391–392
windows (in GUI), resizing, 343, 353–355WordStar, 48–49
X
X Window, 47, 252, 380X.500 standard, 485X11, 49xcoral, 48XDoclet, 517–518
documentation, 519generating interfaces, 518using with Ant, 517–518using with JBoss, 519
xedit, 48Xelﬁ, see NetBeans
XFree86, 446XHTML (Extensible HyperText Markup
Language), 221
xinetd, 458XML (Extensible Markup Language),
220–222
using for JSP, 434
XML Schema, 220XSLT (XSL Transformations), 221xterm, 6
Y
YaST, 47–48
Z
zip, 26–29, 466ZIP ﬁles, 17, 157
inspecting before unzipping, 299in NetBeans, 241
Zoetebier, John, 237zone transfers, 491567 Index
