Python 2.7quick reference
John W.Shipman
2013-05-30 19:01
Abstract
Areference guide tomost ofthecommon features ofthePython programming language, version
2.7.
This publication isavailable inWeb form1andalsoasaPDF document2.Please forward any
comments totcc-doc@nmt.edu .
Table ofCont ents
1.Introduction: What isPython? ..................................................................................................5
2.Python 2.7andPython 3.x........................................................................................................5
3.Starting Python ........................................................................................................................6
3.1.Using Python inWindows .............................................................................................6
3.2.Using Python inLinux ...................................................................................................7
4.Line syntax ..............................................................................................................................7
5.Names andkeywords ..............................................................................................................7
6.Basic types ..............................................................................................................................8
7.Numeric types .........................................................................................................................9
7.1.Typeint:Integers ........................................................................................................9
7.2.Typelong :Extended-precision integers .........................................................................9
7.3.Typebool :Boolean truth values ..................................................................................10
7.4.Typefloat :Floating-point numbers ............................................................................10
7.5.Typecomplex :Imaginary numbers .............................................................................11
8.Sequence types .......................................................................................................................11
8.1.Operations common toallthesequence types ................................................................12
9.Typestr:Strings of8-bit characters ........................................................................................14
9.1.String constants ...........................................................................................................14
9.2.Definition of“whitespace” ...........................................................................................15
9.3.Methods onstr values ................................................................................................16
9.4.Thestring.format() method .....................................................................................23
9.4.1. General form ofaformat code ............................................................................24
9.4.2. Thename part ...................................................................................................24
9.4.3. Theconversion part .......................................................................................25
9.4.4. Thespec part ...................................................................................................25
9.4.5. Formatting afield ofvariable length ...................................................................29
9.5.Theolder string format operator ...................................................................................30
10.Typeunicode :Strings of32-bit characters ............................................................................32
10.1. TheUTF-8 encoding ...................................................................................................33
1http://www.nmt.edu/tcc/help/pubs/python27/web/2http://www.nmt.edu/tcc/help/pubs/python27/python27.pdf
1 Python 2.7quick reference New Mexico Tech Computer Center
11.Typelist :Mutable sequences .............................................................................................35
11.1. Methods onlists.........................................................................................................35
11.2. Listcomprehensions ..................................................................................................38
12.Typetuple :Immutable sequences ........................................................................................39
13.Thebytes type ....................................................................................................................40
13.1. Using thebytes type in3.xconversion .......................................................................41
14.Thebytearray type ............................................................................................................42
15.Typesset andfrozenset :Settypes ...................................................................................43
15.1. Operations onmutable andimmutable sets.................................................................44
15.2. Operations onmutable sets.........................................................................................47
16.Typedict :Dictionaries ........................................................................................................49
16.1. Operations ondictionaries ..........................................................................................49
16.2. Dictionary comprehensions ........................................................................................53
17.Typefile :Input andoutput files .........................................................................................54
17.1. Methods onfile objects ............................................................................................55
18.None :Thespecial placeholder value ......................................................................................56
19.Operators andexpressions ....................................................................................................57
19.1. What isapredicate? ...................................................................................................58
19.2. What isaniterable? ....................................................................................................58
19.3. Duck typing, or:what isaninterface? ..........................................................................59
19.4. What isthelocale? .....................................................................................................60
20.Basic functions .....................................................................................................................60
20.1.abs() :Absolute value ...............................................................................................60
20.2.all() :Arealltheelements ofaniterable true? ............................................................61
20.3.any() :Areanyofthemembers ofaniterable true? .....................................................61
20.4.bin() :Convert tobinary ...........................................................................................61
20.5.bool() :Convert toBoolean .......................................................................................61
20.6.bytearray() :Create abyte array .............................................................................62
20.7.chr() :Getthecharacter with agiven code .................................................................62
20.8.cmp() :Compare twovalues .......................................................................................62
20.9.complex() :Convert tocomplex type .......................................................................63
20.10.dict() :Convert toadictionary ...............................................................................63
20.11.divmod() :Quotient andremainder ..........................................................................64
20.12.enumerate() :Step through indices andvalues ofaniterable ....................................64
20.13.file() :Open afile.................................................................................................65
20.14.filter() :Extract qualifying elements from aniterable .............................................65
20.15.float() :Convert tofloat type ..............................................................................65
20.16.format() :Format avalue .......................................................................................66
20.17.frozenset() :Create afrozen set............................................................................66
20.18.hex() :Convert tobase 16........................................................................................66
20.19.int() :Convert toint type ......................................................................................67
20.20.input() :Read anexpression from theuser ..............................................................67
20.21.iter() :Produce aniterator over asequence .............................................................68
20.22.len() :Number ofelements .....................................................................................68
20.23.list() :Convert toalist..........................................................................................68
20.24.long() :Convert tolong type ..................................................................................69
20.25.map() :Apply afunction toeach element ofaniterable ...............................................69
20.26.max() :Largest element ofaniterable ........................................................................70
20.27.min() :Smallest element ofaniterable .......................................................................70
20.28.next() :Call aniterator ............................................................................................71
20.29.oct() :Convert tobase 8..........................................................................................71
20.30.open() :Open afile.................................................................................................71
New Mexico Tech Computer Center Python 2.7quick reference 2
20.31.ord() :Find thenumeric code foracharacter .............................................................71
20.32.pow() :Exponentiation .............................................................................................72
20.33.range() :Generate anarithmetic progression asalist................................................72
20.34.raw_input() :Prompt andread astring from theuser ..............................................73
20.35.reduce() :Sequence reduction .................................................................................73
20.36.reversed() :Produce areverse iterator ....................................................................74
20.37.round() :Round tothenearest integral value ............................................................74
20.38.set() :Create analgebraic set..................................................................................75
20.39.sorted() :Sort asequence .......................................................................................76
20.40.str() :Convert tostr type ......................................................................................76
20.41.sum() :Total theelements ofasequence ....................................................................76
20.42.tuple() :Convert toatuple .....................................................................................77
20.43.type() :Return avalue's type ...................................................................................77
20.44.unichr() :Convert anumeric code toaUnicode character ........................................77
20.45.unicode() :Convert toaUnicode string ...................................................................78
20.46.xrange() :Arithmetic progression generator ............................................................78
20.47.zip() :Combine multiple sequences .........................................................................78
21.Advanced functions ..............................................................................................................79
21.1.basestring :Thestring base class .............................................................................79
21.2.callable() :Isthisthing callable? ............................................................................79
21.3.classmethod() :Create aclass method .....................................................................79
21.4.delattr() :Delete anamed attribute .........................................................................80
21.5.dir() :Display anamespace's names ..........................................................................80
21.6.eval() :Evaluate anexpression insource form ...........................................................82
21.7.execfile() :Execute aPython source file..................................................................82
21.8.getattr() :Retrieve anattribute ofagiven name .......................................................82
21.9.globals() :Dictionary ofglobal name bindings .........................................................83
21.10.hasattr() :Does avalue have anattribute ofagiven name? .....................................83
21.11.id() :Unique identifier ............................................................................................83
21.12.isinstance() :Isavalue aninstance ofsome class ortype? .....................................84
21.13.issubclass() :Isaclass asubclass ofsome other class? ...........................................84
21.14.locals() :Dictionary oflocal name bindings ............................................................85
21.15.property() :Create anaccess-controlled attribute ....................................................85
21.16.reload() :Reload amodule .....................................................................................87
21.17.repr() :Representation ...........................................................................................87
21.18.setattr() :Setanattribute .....................................................................................88
21.19.slice() :Create aslice instance ...............................................................................88
21.20.staticmethod() :Create astatic method .................................................................89
21.21.super() :Superclass ................................................................................................89
21.22.vars() :Local variables ...........................................................................................89
22.Simple statements .................................................................................................................90
22.1. Theassignment statement: name=expression .......................................................91
22.2. Theassert statement: Verify preconditions ...............................................................94
22.3. Thedel statement: Delete aname orpart ofavalue .....................................................94
22.4. Theexec statement: Execute Python source code ........................................................94
22.5. Theglobal statement: Declare access toaglobal name ...............................................95
22.6. Theimport statement: Useamodule .........................................................................96
22.7. Thepass statement: Donothing .................................................................................97
22.8. Theprint statement: Display output values ...............................................................97
22.9. Theprint() function ...............................................................................................98
23.Compound statements ..........................................................................................................98
23.1. Python's block structure .............................................................................................99
3 Python 2.7quick reference New Mexico Tech Computer Center
23.2. Thebreak statement: Exitafor orwhile loop .........................................................100
23.3. Thecontinue statement: Jump tothenext cycle ofafor orwhile ...........................100
23.4. Thefor statement: Iteration over asequence .............................................................101
23.5. Theifstatement: Conditional execution ...................................................................102
23.6. Theraise statement: Cause anexception .................................................................103
23.7. Thereturn statement: Exitafunction ormethod ......................................................104
23.8. Thetry statement: Anticipate exceptions ..................................................................104
23.9. Thewith statement andcontext managers ................................................................107
23.10. Theyield statement: Generate oneresult from agenerator ......................................107
24.def() :Defining your own functions ...................................................................................108
24.1. Afunction's local namespace .....................................................................................110
24.2. Iterators: Values thatcanproduce asequence ofvalues ...............................................110
24.3. Generators: Functions thatcanproduce asequence ofvalues ......................................111
24.4. Decorators ...............................................................................................................112
25.Exceptions: Error signaling andhandling .............................................................................113
25.1. Definitions ofexception terms ...................................................................................113
25.2. Lifecycle ofanexception ..........................................................................................114
25.3. Built-in exceptions ....................................................................................................115
26.Classes: Defining your own types ........................................................................................117
26.1. Old-style classes .......................................................................................................120
26.1.1. Defining anold-style class ..............................................................................120
26.1.2. Instantiation ofanold-style class: Theconstructor, .__init__() ....................121
26.1.3. Attribute references inold-style classes ...........................................................121
26.1.4. Method calls inanold-style class ....................................................................122
26.1.5. Instance deletion: thedestructor, .__del__() ................................................123
26.2. Lifecycle ofanew-style class ....................................................................................123
26.2.1.__new__() :New instance creation ................................................................123
26.2.2. Attribute access control innew-style classes ....................................................124
26.2.3. Properties innew-style classes: Fine-grained attribute access control .................125
26.2.4. Conserving memory with__slots__ ............................................................125
26.3. Special method names ..............................................................................................125
26.3.1. Rich comparison methods ..............................................................................128
26.3.2. Special methods forbinary operators ..............................................................129
26.3.3. Unary operator special methods .....................................................................129
26.3.4. Special methods toemulate built-in functions ..................................................130
26.3.5.__call__() :What todowhen someone calls aninstance ...............................130
26.3.6.__cmp__() :Generalized comparison .............................................................130
26.3.7.__contains__() :The“in”and“notin”operators ....................................131
26.3.8.__del__() :Destructor .................................................................................131
26.3.9.__delattr__() :Delete anattribute ..............................................................131
26.3.10.__delitem__() :Delete oneitem ofasequence ............................................131
26.3.11.__enter__ :Context manager initialization ..................................................132
26.3.12.__exit__ :Context manager cleanup ............................................................132
26.3.13.__format__ :Implement theformat() function ..........................................132
26.3.14.__getattr__() :Handle areference toanunknown attribute .......................133
26.3.15.__getattribute__() :Intercept allattribute references ..............................133
26.3.16.__getitem__() :Getoneitem from asequence ormapping ..........................133
26.3.17.__iter__() :Create aniterator ....................................................................133
26.3.18.__nonzero__() :True/false evaluation .......................................................134
26.3.19.__repr__() :String representation ..............................................................134
26.3.20.__reversed__() :Implement thereversed() function ..............................134
26.3.21.__setattr__() :Intercept allattribute changes ............................................134
26.3.22.__setitem__() :Assign avalue tooneitem ofasequence ............................134
New Mexico Tech Computer Center Python 2.7quick reference 4
26.4. Static methods ..........................................................................................................135
26.5. Class methods ..........................................................................................................135
27.pdb:ThePython interactive debugger ..................................................................................136
27.1. Starting uppdb ........................................................................................................136
27.2. Functions exported bypdb .......................................................................................136
27.3. Commands available inpdb ......................................................................................137
28.Commonly used modules ....................................................................................................138
28.1.math :Common mathematical operations ..................................................................138
28.2.string :Utility functions forstrings ..........................................................................139
28.3.random :Random number generation ........................................................................141
28.4.time :Clock andcalendar functions ...........................................................................142
28.5.re:Regular expression pattern-matching ...................................................................144
28.5.1. Characters inregular expressions ....................................................................144
28.5.2. Functions intheremodule ............................................................................146
28.5.3. Compiled regular expression objects ...............................................................147
28.5.4. Methods onaMatchObject ..........................................................................147
28.6.sys:Universal system interface .................................................................................148
28.7.os:Theoperating system interface ............................................................................149
28.8.stat :Interpretation offilestatus ..............................................................................151
28.9.os.path :Fileanddirectory interface ........................................................................152
28.10.argparse :Processing command linearguments .....................................................154
28.10.1. Types ofcommand linearguments ................................................................154
28.10.2. Overall flow ofargument processing .............................................................155
28.10.3. TheArgumentParser() constructor ...........................................................155
28.10.4. TheArgumentParser.add_argument() method ......................................155
28.10.5. TheArgumentParser.parse_args() method ..........................................158
28.10.6. Other usefulArgumentParser methods ......................................................160
1.Introduction: WhatisPython?
Python isarecent, general-purpose, high-level programming language. Itisfreely available andruns
pretty much everywhere.
•This document isareference guide, notatutorial. Ifyouarenew toPython programming, seeAPython
programming tutorial3.
•Complete documentation andfreeinstalls areavailable from thepython.org homepage4.
This document does notdescribe every single feature ofPython 2.7.Afewinteresting features that99%
ofPython users willnever need, such asmetaclasses, arenotdescribed here. Refer totheofficial docu-
mentation forthefullfeature set.
2.Python 2.7andPython 3.x
Atthiswriting, both Python 2.7andPython 3.2areofficially maintained implementations. The3.0release
marked thefirst release inthedevelopment ofPython that anew version was incompatible with the
oldone.
Ifyouareusing 2.xreleases ofPython, there isnohurry toconvert tothe3.xseries. Release 2.7isguar-
anteed tobearound formany years. Furthermore, there aretools tohelp you automate much ofthe
3http://www.nmt.edu/tcc/help/pubs/lang/pytut27/4http://www.python.org/
5 Python 2.7quick reference New Mexico Tech Computer Center
conversion process. Notes throughout thisdocument willdiscuss specific features of2.7thatareintended
toease thetransition.
•Foradiscussion ofthechanges between 2.7and3.0,seeWhat's New inPython5.
•Toseewhat changes must bemade inyour program toallow automatic conversion toPython 3.x,
runPython with thisflag:
python-3yourprogram
•Toconvert your program toPython 3.x,first make acopy oftheoriginal program, then runthis
command:
python3-2to3 -wyourprogram
The-wflag replaces yourprogram with theconverted 3.xversion, and moves theoriginal to
“yourprogram .bak”
Forfulldocumentation ofthePython 3.2version, seetheonline documentation6.
3.StartingPython
You canusePython intwodifferent ways:
•In“calculator” or“conversational mode”, Python willprompt youforinput with three greater-than
signs (>>>).Type alineandPython willprint theresult. Here's anexample:
>>>2+2
4
>>>1.0/7.0
0.14285714285714285
•You canalsousePython towrite aprogram, sometimes called ascript .
3.1.Using Python inWindows
Ifyouareusing Python attheNMTech Computer Center (TCC), youcangetconversational mode from
Start→AllPrograms→ActiveStateActivePython2.6→PythonInteractiveShell.
Towrite aprogram:
1. Start→AllPrograms→ActiveStateActivePython2.6→PythonWinEditor.
2.Use File→New,select PythonScript inthepop-up menu, andclick OK.This willbring upanedit
window.
3.Write your Python program intheeditwindow, then useFile→SaveAs... tosave itunder some
filename that ends in“.py”.UseyourU:drive. This drive ismounted everywhere attheTCC,
andcontains your personal files. Itisbacked upregularly.
4.Torunyour program, useFile→Run.Inthe“RunScript”popup, enter thename ofyour program
inthefield labeled Script File,then click OK.
Theoutput willappear inthe“InteractiveWindow”.
5http://docs.python.org/whatsnew/6http://docs.python.org/py3k/
New Mexico Tech Computer Center Python 2.7quick reference 6
You may alsorunaPython script bydouble-clicking onit,provided thatitsname ends with“.py”.
3.2.Using Python inLinux
Toenter conversational mode onaLinux system, type thiscommand:
python
Type Control-Dtoterminate thesession.
Ifyouwrite aPython script namedfilename .py,youcanexecute itusing thecommand
python filename .py
Under Unix, youcanalsomake ascript self-executing byplacing thislineatthetop:
#!/usr/bin/env python
You must also tellLinux that thefileisexecutable byusing thecommand “chmod+xfilename ”.
Forexample, ifyour script iscalledhello.py ,youwould type thiscommand:
chmod+xhello.py
4.Line syntax
Thecomment character is“#”;comments areterminated byendofline.
Long lines may becontinued byending thelinewith abackslash (\),butthisisnotnecessary ifthere
isatleast oneopen“(”,“[”,or“{”.
5.Names andkeywords
Python names (also called identifiers) canbeanylength andfollow these rules:
•Thefirstoronly character must bealetter (uppercase orlowercase) ortheunderbar character, “_”.
•Any additional characters may beletters, underbars, ordigits.
Examples: coconuts ,sirRobin ,blanche_hickey_869 ,__secretWord .
Case issignificant inPython. Thename“Robin ”isnotthesame name as“robin ”.
Thenames below arekeywords ,also known asreserved words. They have special meaning inPython
andcannot beused asnames oridentifiers.
and def finally in print yield
as del for is raise
assert elif from lambda return
break else global not try
class except if or with
continue exec import pass while
7 Python 2.7quick reference New Mexico Tech Computer Center
6.Basic types
Inprogramming, youmanipulate values using operators .Forexample, intheexpression “1+2”,thead-
dition operator (+)isoperating onthevalues 1and2toproduce thesum, 3.ThePython operators are
described inSection 19,“Operators and expressions” (p.57),butlet's lookfirst atPython's way of
representing values.
Every Python value must have atype. Forexample, thetype ofthewhole number 1isint,short for
“integer.”
Here isatable summarizing most ofthecommonly-used Python types.
Table 1.Python's common types
Examples Values Type name
42,-3,1000000 Integers intherange [-2147483648, 2147483647]. See
Section 7.1,“Typeint:Integers” (p.9).int
42L,-3L,100000000000000L Integers ofany size, limited only bytheavailable
memory. SeeSection 7.2,“Typelong :Extended-
precision integers” (p.9).long
True ,False Thetwo Boolean valuesTrue andFalse .SeeSec-
tion 7.3,“Typebool :Boolean truth values” (p.10).bool
3.14159 ,-1.0 ,6.0235e23 Floating-point numbers; see Section 7.4,“Type
float :Floating-point numbers” (p.10).float
(3.2+4.9j) ,(0+3.42e-3j) Complex numbers. Iftheidea ofcomputing with the
square root of-1bothers you, justignore thistype,complex
otherwise seeSection 7.5,“Typecomplex :Imaginary
numbers” (p.11).
'SirRobin' ,"xyz" ,"I'd've" Strings of8-bit characters; seeSection 9,“Typestr:
Strings of8-bit characters” (p.14).Strings canbe
empty: write such asastring as“""”or“''”.str
u'Fred' ,u'\u03fa' Strings of32-bit Unicode characters; seeSection 10,
“Typeunicode :Strings of32-bit characters” (p.32).unicode
['dot', 'dash'] ;[] Amutable sequence ofvalues; seeSection 11,“Type
list :Mutable sequences” (p.35).list
('dot', 'dash') ;();
("singleton",)Animmutable sequence ofvalues; seeSection 12,
“Typetuple :Immutable sequences” (p.39).tuple
{'go':1, 'stop':2} ;{} Usedict values (dictionaries) tostructure data as
look-up tables; seeSection 16,“Typedict :Diction-
aries” (p.49).dict
bytearray('Bletchley') Amutable sequence of8-bit bytes; seeSection 14,
“Thebytearray type” (p.42).bytearray
open('/etc/motd') Afilebeing read orwritten; seeSection 17,“Type
file :Input andoutput files” (p.54).file
None Aspecial, unique value that may beused where a
value isrequired butthere isnoobvious value. SeeNone
Section 18,“None :The special placeholder
value” (p.56).
New Mexico Tech Computer Center Python 2.7quick reference 8
7.Numeric types
Python hasanumber ofdifferent types used forrepresenting numbers.
7.1.Typeint:Integers
Python values oftypeint represent integers, thatis,whole numbers intherange [-231,231-1],roughly
plus orminus twobillion.
You canrepresent avalue inoctal (base 8)bypreceding itwith“0o”.Similarly, usealeading “0x”to
represent avalue inhexadecimal (base 16),or“0b”forbinary. Examples inconversational mode:
>>>999+1
1000
>>>0o77
63
>>>0xff
255
>>>0b1001
9
Note
The0oand0bprefixes work only inPython versions 2.6and later. In2.5and earlier versions, any
number starting with“0”wasconsidered tobeoctal. This functionality isretained inthe2.6+ versions,
butwillnotwork inthePython 3.xversions.
Toconvert other numbers orcharacter strings totypeint,seeSection 20.19, “int() :Convert toint
type” (p.67).
Ifyouperform operations onintvalues thatresult innumbers thataretoolarge, Python automatically
converts them tolong type; seeSection 7.2,“Typelong :Extended-precision integers” (p.9).
7.2.Typelong :Extended-pr ecision integers
Values oflong type represent whole numbers, butthey may have many more than thenine ortendigits
allowed byint type. Inpractice, thenumber ofdigits inalong value islimited only byprocessor
memory size.
Towrite along -type constant, usethesame syntax asforint-type constants, butplace aletterLim-
mediately after thelastdigit. Also, ifanoperation onintvalues results inanumber toolarge torepresent
asanint,Python willautomatically converted ittotypelong .
>>>100*100
10000
>>>100L*100L
10000L
>>>1000000000*1000000000
1000000000000000000L
>>>0xffffL
65535L
9 Python 2.7quick reference New Mexico Tech Computer Center
Toconvert avalue ofadifferent numeric type orastring ofcharacters toalong value, seeSection 20.24,
“long() :Convert tolong type” (p.69).
7.3.Typebool :Boolean truth values
Avalue ofbool type represents aBoolean (true orfalse) value. There areonly twovalues, written in
Python as“True”and“False ”.
Internally, True isrepresented as1andFalse as0,andthey canbeused innumeric expressions as
those values.
Here's anexample. InPython, theexpression “a<b”compares twovaluesaandb,andreturnsTrue
ifaislessthanb,False isaisgreater than orequal tob.
>>>2<3
True
>>>3<2
False
>>>True+4
5
>>>False*False
0
These values areconsidered False wherever true/false values areexpected, such asinanifstatement:
•Thebool valueFalse .
•Any numeric zero: theint value0,thefloat value0.0,thelong value0L,orthecomplex value
0.0j .
•Any empty sequence: thestr value'',theunicode valueu'',theemptylist value[],orthe
emptytuple value().
•Any empty mapping, such astheemptydict (dictionary) value{}.
•Thespecial valueNone .
Allother values areconsidered True .Toconvert anyvalue toaBoolean, seeSection 20.5,“bool() :
Convert toBoolean” (p.61).
7.4.Typefloat :Floating-point numbers
Values ofthistype represent realnumbers, with theusual limitations ofIEEE-754 floating point type:
itcannot represent very large orvery small numbers, andtheprecision islimited toonly about 15digits.
Forcomplete details ontheIEEE-754 standard anditslimitations, seetheWikipedia article7.
Afloating-point constant may bepreceded bya“+”or“-”sign, followed byastring ofoneormore
digits containing adecimal point (“.”).
Forvery large orsmall numbers, youmay express thenumber inexponential notation byappending a
letter“e”followed byapower often(which may bepreceded byasign).
Forexample, Avogadro's Number gives thenumber ofatoms ofcarbon in12grams ofcarbon12,andis
written as6.0221418×1023.InPython thatwould be“6.0221418e23 ”.
Please note thatcalculations involvingfloat type areapproximations. Incalculator mode, Python will
display thenumbers totheir fullprecision, soyoumay seeanumber thatisvery close towhat youexpect,
butnotexact.
7http://en.wikipedia.org/wiki/IEEE_754-1985
New Mexico Tech Computer Center Python 2.7quick reference 10
>>>1.0/7.0
0.14285714285714285
>>>-2*-4.2e37
8.4000000000000004e+37
7.5.Typecomplex :Imaginary numbers
Mathematically, acomplex number isanumber oftheformA+Bi whereiistheimaginary number,
equal tothesquare root of-1.
Complex numbers arequite commonly used inelectrical engineering. Inthatfield, however, because
thesymboliisused torepresent current, they usethesymboljforthesquare rootof-1.Python adheres
tothisconvention: anumber followed by“j”istreated asanimaginary number. Python displays
complex numbers inparentheses when they have anonzero realpart.
>>>5j
5j
>>>1+2.56j
(1+2.5600000000000001j)
>>>(1+2.56j)*(-1-3.44j)
(7.8064-6j)
Unlike Python's other numeric types, complex numbers areacomposite quantity made oftwoparts:
therealpart andtheimaginary part, both ofwhich arerepresented internally asfloat values. You can
retrieve thetwocomponents using attribute references. Foracomplex numberC:
•C.real istherealpart.
•C.imag istheimaginary part asafloat ,notasacomplex value.
>>>a=(1+2.56j)*(-1-3.44j)
>>>a
(7.8064-6j)
>>>a.real
7.8064
>>>a.imag
-6.0
Toconstruct acomplex value from twofloat values, seeSection 20.9,“complex() :Convert to
complex type” (p.63).
8.Sequenc etypes
Thenext four types described (str,unicode ,list andtuple) arecollectively referred toassequence
types.
Each sequence value represents anordered setinthemathematical sense, thatis,acollection ofthings
inaspecific order.
Python distinguishes between mutable and immutable sequences:
•Animmutable sequence canbecreated ordestroyed, butthenumber, sequence, and values ofits
elements cannot change.
•Thevalues ofamutable sequence canbechanged. Any element canbereplaced ordeleted, andnew
elements canbeadded atthebeginning, theend, orinthemiddle.
11 Python 2.7quick reference New Mexico Tech Computer Center
There arefour sequence types, butthey share most ofthesame operations.
•Section 8.1,“Operations common toallthesequence types” (p.12).
•Section 9,“Typestr:Strings of8-bit characters” (p.14)(immutable).
•Section 10,“Typeunicode :Strings of32-bit characters” (p.32)(immutable).
•Section 11,“Typelist :Mutable sequences” (p.35)(mutable).
•Section 12,“Typetuple :Immutable sequences” (p.39)(immutable).
8.1.Opera tions common toallthesequenc etypes
These functions work onvalues ofthefour sequence types:int,unicode ,tuple ,andlist .
•Section 20.22, “len() :Number ofelements” (p.68).
•Section 20.26, “max() :Largest element ofaniterable” (p.70).
•Section 20.27, “min() :Smallest element ofaniterable” (p.70).
These operators apply tosequences.
S1+S2
Concatenation—for twosequences S1andS2ofthesame type, anew sequence containing allthe
elements fromS1followed byalltheelements ofS2.
>>>"vi"+"car"
'vicar'
>>>[1,2,3]+[5,7,11,13]+[15]
[1,2,3,5,7,11,13,15]
>>>('roy', 'g')+('biv',)
('roy', 'g','biv')
S*n
Forasequence Sandapositive integern,theresult isanew sequence containing alltheelements
ofSrepeated ntimes.
>>>'worra'*8
'worraworraworraworraworraworraworraworra'
>>>[0]*4
[0,0,0,0]
>>>(True,False)*5
(True,False,True,False,True,False,True,False,True,False)
xinS
Isanyelement ofasequence Sequal tox?
Forconvenience insearching forsubstrings, ifthesequence tobesearched isastring, thexoperand
canbeamulti-character string. Inthatcase, theoperation returnsTrue ifxisfound anywhere in
S.
>>>1in[2,4,6,0,8,0]
False
>>>0in[2,4,6,0,8,0]
True
>>>'a'in'banana'
True
New Mexico Tech Computer Center Python 2.7quick reference 12
>>>3.0in(2.5,3.0,3.5)
True
>>>"baz"in"rowrbazzle"
True
xnotinS
Arealltheelements ofasequence Snotequal tox?
>>>'a'notin'banana'
False
>>>'x'notin'banana'
True
S[i]
Subscripting: retrieve theithelement ofs,counting from zero.Ifiisgreater than orequal tothe
number ofelements ofS,anIndexError exception israised.
>>>'Perth'[0]
'P'
>>>'Perth'[1]
'e'
>>>'Perth'[4]
'h'
>>>'Perth'[5]
Traceback (mostrecentcalllast):
File"<stdin>", line1,in<module>
IndexError: stringindexoutofrange
>>>('red', 'yellow', 'green')[2]
'green'
S[i:j]
Slicing: Forasequence Sandtwointegersiandj,return anew sequence with copies oftheelements
ofSbetween positions iandj.
Thevalues used inslicing refer tothepositions between elements, where position zero istheposition
before thefirstelement; position 1isbetween thefirstandsecond element; andsoon.
You canalso specify positions relative totheendofasequence. Position -1istheposition before
thelastelement; -2istheposition before thesecond-to-last element; andsoon.
Youcanomit thestarting position toobtain aslice starting atthebeginning. Youcanomit theending
position togetalltheelements through thelast.
Forexample, here isadiagram showing three slices ofthestring'abcdef' .
a b c d e f[−6][−5][−4][−3][−2][−1]
[0] [1] [2] [3] [4] [5] [6]
[2:5]
[3:] [:3]
13 Python 2.7quick reference New Mexico Tech Computer Center
>>>'abcdef'[2:5]
'cde'
>>>'abcdef'[:3]
'abc'
>>>'abcdef'[3:]
'def'
>>>(90,91,92,93,94,95)[2:5]
(92,93,94)
S[i:j:k]
You canuseaslice expression likethistoselect everykthelement. Examples:
>>>teens=range(13,20)
>>>teens
[13,14,15,16,17,18,19]
>>>teens[::2]
[13,15,17,19]
>>>teens[1::2]
[14,16,18]
>>>teens[1:5]
[14,15,16,17]
>>>teens[1:5:2]
[14,16]
9.Typestr:Strings of8-bit chara cters
Python hastwostring types. Typestr holds strings ofzero ormore 8-bit characters, whileunicode
strings provide fullsupport oftheexpanded Unicode character set;seeSection 10,“Typeunicode :
Strings of32-bit characters” (p.32).
Inaddition tothefunctions described inSection 8.1,“Operations common toallthesequence
types” (p.12),these functions apply tostrings:
•Section 20.34, “raw_input() :Prompt andread astring from theuser” (p.73).
•Section 20.40, “str() :Convert tostr type” (p.76).
•Section 20.45, “unicode() :Convert toaUnicode string” (p.78).
9.1.String constants
There aremany forms forstring constants:
•'...' :You may enclose thestring insingle-quotes.
•"..." :You may instead enclose itindouble-quotes. Internally, there isabsolutely nodifference. To
include adouble-quote character inside thestring, usetheescape sequence “\"”.
Inconversational mode, Python willgenerally display values using single-quotes. Ifthestring contains
single-quotes butnodouble-quotes, Python willdisplay thevalue using double-quotes. Ifthestring
contains both, thevalue willbedisplayed insingle-quotes, with single-quote characters inside the
value displayed astheescape sequence “\'”.
•'''...''':Youmay enclose your string between three single quotes inarow. Thedifference isthat
youcancontinue such astring over multiple lines, andthelinebreaks willbeincluded inthestring
asnewline characters.
New Mexico Tech Computer Center Python 2.7quick reference 14
•"""...""" :You canusethree setsofdouble quotes. Aswith three setsofsingle quotes, linebreaks
areallowed andpreserved as"\n" characters. Ifyouusethese triply-quoted strings inconversational
mode, continuation lines willprompt youwith“...”.
>>>'Penguin'
'Penguin'
>>>"ha'penny"
"ha'penny"
>>>"Single 'anddouble\" quotes"
'Single \'anddouble" quotes'
>>>''
''
>>>""
''
>>>s='''This string
...contains twolines.'''
>>>t="""This string
...contains
...threelines."""
Inaddition, youcanuseanyofthese escape sequences inside astring constant (seeWikipedia8formore
information ontheASCII code).
Table 2.String escape sequences
Abackslash attheendofalineisignored. \newline
Backslash (\) \\
Closing single quote (') \'
Double-quote character (") \"
Newline (ASCII LForlinefeed) \n
Backspace (inASCII, theBScharacter) \b
Formfeed (ASCII FF) \f
Carriage return (ASCII CR) \r
Horizontal tab(ASCII HT) \t
Vertical tab(ASCII VT) \v
Thecharacter with octal codeooo,e.g.,'\177' . \ooo
Thecharacter with hexadecimal valuehh,e.g.,'\xFF' . \xhh
Raw strings :Ifyouneed tousealotofbackslashes inside astring constant, anddoubling them istoo
confusing, youcanprefix anystring with theletterrtosuppress theinterpretation ofescape sequences.
Forexample,'\\\\' contains twobackslashes, butr'\\\\' contains four. Raw strings areparticularly
useful with Section 28.5,“re:Regular expression pattern-matching” (p.144).
9.2.Definition of“whit espace”
InPython, these characters areconsidered whitespace:
8http://en.wikipedia.org/wiki/ASCII
15 Python 2.7quick reference New Mexico Tech Computer Center
English name ASCII9name Escape sequence
spaceSP ''
newlineNL '\n'
carriage return CR '\r'
horizontal tab HT '\t'
form feed FF '\f'
vertical tab VT '\v'
9.3.Methods onstr values
These methods areavailable onanystring valueS.
S.capitalize()
ReturnSwith itsfirstcharacter capitalized (ifaletter).
>>>'eecummings'.capitalize()
'Eecummings'
>>>'---abc---'.capitalize()
'---abc---'
S.center( w)
ReturnScentered inastring ofwidthw,padded with spaces. Ifw<=len(S),theresult isacopy of
S.Ifthenumber ofspaces ofpadding isodd, theextra space willplaced after thecentered value.
Example:
>>>'x'.center(4)
'x'
S.count( t[,start[,end]])
Return thenumber oftimes stringtoccurs inS.Tosearch only asliceS[start:end]ofS,supply
start andend arguments.
>>>'banana'.count('a')
3
>>>'bananana'.count('na')
3
>>>'banana'.count('a', 3)
2
>>>'banana'.count('a', 3,5)
1
S.decode (encoding )
IfScontains anencoded Unicode string, thismethod willreturn thecorresponding value asunicode
type. Theencoding argument specifies which decoder touse; typically thiswill bethestring
'utf_8' fortheUTF-8 encoding. Fordiscussion andexamples, seeSection 10.1,“The UTF-8 en-
coding” (p.33).
S.endswith( t[,start[,end]])
Predicate totestwhether Sends with stringt.Ifyousupply theoptional start andendarguments,
ittests whether thesliceS[start:end]ends witht.
9http://en.wikipedia.org/wiki/ASCII
New Mexico Tech Computer Center Python 2.7quick reference 16
>>>'bishop'.endswith('shop')
True
>>>'bishop'.endswith('bath andwells')
False
>>>'bishop'[3:5]
'ho'
>>>'bishop'.endswith('o', 3,5)
True
S.expandtabs([ tabsize])
Returns acopy ofSwith alltabsreplaced byoneormore spaces. Each tabisinterpreted asarequest
tomove tothenext“tab stop”. Theoptional tabsize argument specifies thenumber ofspaces
between tabstops; thedefault is8.
Here ishow thefunction actually works. Thecharacters ofSarecopied toanew stringToneata
time. Ifthecharacter isatab,itisreplaced byenough tabs sothenew length ofTisamultiple of
thetabsize(but always atleast onespace).
>>>'X\tY\tZ'.expandtabs()
'X Y Z'
>>>'X\tY\tZ'.expandtabs(4)
'XYZ'
>>>'a\tbb\tccc\tdddd\teeeee\tfffff'.expandtabs(4)
'abbcccdddd eeeee fffff'
S.find(t[,start[,end]])
Ifstringtisnotfound inS,return -1;otherwise return theindex ofthefirst position inSthat
matches t.
Theoptional start andend arguments restrict thesearch tosliceS[start:end].
>>>'banana'.find('an')
1
>>>'banana'.find('ape')
-1
>>>'banana'.find('n', 3)
4
>>>'council'.find('c', 1,4)
-1
.format(* p,**kw)
SeeSection 9.4,“The string.format() method” (p.23).
S.index( t[,start[,end]])
Works like.find() ,butiftisnotfound, itraises aValueError exception .
>>>'council'.index('co')
0
>>>'council'.index('phd')
Traceback (mostrecentcalllast):
File"<stdin>", line1,in<module>
ValueError: substring notfound
S.isalnum()
Predicate thattests whether Sisnonempty andallitscharacters arealphanumeric.
17 Python 2.7quick reference New Mexico Tech Computer Center
>>>''.isalnum()
False
>>>'abc123'.isalnum()
True
>>>'&*$#&*()abc123'.isalnum()
False
S.isalpha()
Predicate thattests whether Sisnonempty andallitscharacters areletters.
>>>'abc123'.isalpha()
False
>>>'MaryRecruiting'.isalpha()
True
>>>''.isalpha()
False
S.isdigit()
Predicate thattests whether Sisnonempty andallitscharacters aredigits.
>>>'abc123'.isdigit()
False
>>>''.isdigit()
False
>>>'2415'.isdigit()
True
S.islower()
Predicate that tests whether Sisnonempty andallitsletters arelowercase (non-letter characters
areignored).
>>>''.islower()
False
>>>'abc123'.islower()
True
>>>'ABC123'.islower()
False
S.isspace()
Predicate thattests whether Sisnonempty andallitscharacters arewhitespace characters.
>>>''.isspace()
False
>>>'\t\n\r'.isspace()
True
>>>'killer \t\nrabbit'.isspace()
False
S.istitle()
Apredicate that tests whether Shas“titlecase”.Inatitle-cased string, uppercase characters
may appear only atthebeginning ofthestring orafter some character thatisnotaletter. Lowercase
characters may appear only after anuppercase letter.
>>>'abcdefGHI'.istitle()
False
New Mexico Tech Computer Center Python 2.7quick reference 18
>>>'AbcDefGhi'.istitle()
True
S.isupper()
Predicate thattests whether Sisnonempty andallitsletters areuppercase letters (non-letter char-
acters areignored).
>>>'abcDEF'.isupper()
False
>>>'123GHI'.isupper()
True
>>>''.isupper()
False
S.join(L)
Lmust beaniterable thatproduces asequence ofstrings. Thereturned value isastring containing
themembers ofthesequence with copies ofthedelimiter stringSinserted between them.
One quite common operation istousetheempty string asthedelimiter toconcatenate theelements
ofasequence.
Examples:
>>>'/'.join(['never', 'pay','plan'])
'never/pay/plan'
>>>'(***)'.join (('Property', 'of','the','zoo'))
'Property(***)of(***)the(***)zoo'
>>>''.join(['anti', 'dis','establish', 'ment', 'arian', 'ism'])
'antidisestablishmentarianism'
S.ljust( w)
Return acopy ofSleft-justified inafield ofwidthw,padded with spaces. Ifw<=len(S),theresult
isacopy ofS.
>>>"Ni".ljust(4)
'Ni'
S.lower()
Returns acopy ofSwith alluppercase letters replaced bytheir lowercase equivalent.
>>>"IlikeSHOUTING!".lower()
'ilikeshouting!'
S.lstrip([ c])
ReturnSwith allleading characters from stringcremoved. Thedefault value forcisastring con-
taining allthewhitespace characters .
>>>'\t\nRun\t\naway!\n\t'.lstrip()
'Run\t\naway!\n\t'
"***Done***".lstrip('*')
'Done***'
>>>"(*)(*)(*Undone*)".lstrip (")(*")
'Undone*)'
19 Python 2.7quick reference New Mexico Tech Computer Center
S.partition( d)
Searches stringSforthefirst occurrence ofsome delimiter stringd.IfScontains thedelimiter, it
returns atuple(pre,d,post),wherepreisthepart ofSbefore thedelimiter, disthedelimiter
itself, andpost isthepart ofSafter thedelimiter.
Ifthedelimiter isnotfound, thismethod returns a3-tuple(S,'','').
>>>"DaffyEnglish kniggets!".partition(' ')
('Daffy', '','English kniggets!')
>>>"DaffyEnglish kniggets!".partition('/')
('Daffy English kniggets!', '','')
>>>"a*b***c*d".partition("**")
('a*b', '**','*c*d')
S.replace( old,new[,max])
Return acopy ofSwith alloccurrences ofstringold replaced bystringnew.Normally, alloccur-
rences arereplaced; ifyouwant tolimit thenumber ofreplacements, pass thatlimit asthemax ar-
gument.
>>>'Frenetic'.replace('e', 'x')
'Frxnxtic'
>>>'Frenetic'.replace('e', '###')
'Fr###n###tic'
>>>'banana'.replace('an', 'erzerk')
'berzerkerzerka'
>>>'banana'.replace('a', 'x',2)
'bxnxna'
S.rfind( t[,start[,end]])
Like.find() ,butiftoccurs inS,thismethod returns thehighest starting index.
>>>'banana'.find('a')
1
>>>'banana'.rfind('a')
5
S.rindex( t[,start[,end]])
Similar toS.index() ,butitreturns thelastindex inSwhere stringtisfound. Itwill raise a
ValueError exception ifthestring isnotfound.
>>>"Justafleshwound.".index('s')
2
>>>"Justafleshwound.".rindex('s')
10
>>>"Justafleshwound.".rindex('xx')
Traceback (mostrecentcalllast):
File"<stdin>", line1,in<module>
ValueError: substring notfound
S.rjust( w[,fill])
Return acopy ofSright-justified inafield ofwidthw,padded with spaces. Ifw<=len(S),theresult
isacopy ofS.
Topadvalues with some character other than aspace, pass that character astheoptional second
argument.
New Mexico Tech Computer Center Python 2.7quick reference 20
>>>'123'.rjust(5)
'123'
>>>'123'.rjust(5,'*')
'**123'
S.rpartition( d)
Similar toS.partition() ,except thatitfinds thelastoccurrence ofthedelimiter.
>>>"DaffyEnglish kniggets!".rpartition(' ')
('Daffy English', '','kniggets!')
>>>"a*b***c*d".rpartition("**")
('a*b*', '**','c*d')
S.rsplit( d[,max])
Similar toS.split( d[,max]),except that ifthere aremorefields thanmax,thesplitfields are
taken from theendofthestring instead offrom thebeginning.
>>>"IamZoot'sidentical twinsister, Dingo.".rsplit(None, 2)
["IamZoot'sidentical twin",'sister,', 'Dingo.']
S.rstrip([ c])
ReturnSwith alltrailing characters from stringcremoved. Thedefault value forcisastring con-
taining allthewhitespace characters .
>>>'\t\nRun\t\naway!\n\t'.rstrip()
'\t\nRun\t\naway!'
S.split([ d[,max]])
Returns alistofstrings[s0,s1,...] made bysplitting Sinto pieces wherever thedelimiter
stringdisfound. Thedefault istosplit upSintopieces wherever clumps ofoneormore whitespace
characters arefound.
>>>"I'dannex\t\rtheSudetenland" .split()
["I'd", 'annex', 'the','Sudetenland']
>>>'3/crunchy frog/Bath&Wells'.split('/')
['3','crunchy frog','Bath&Wells']
>>>'//Norwegian Blue/'.split('/')
['','','Norwegian Blue','']
>>>'never<*>pay<*>plan<*>'.split('<*>')
['never', 'pay','plan', '']
Theoptional max argument limits thenumber ofpieces removed from thefront ofS.Theresulting
listwillhave nomore thanmax+1elements.
Tousethemax argument while splitting thestring onclumps ofwhitespace, passNone asthefirst
argument.
>>>'a/b/c/d/e'.split('/', 2)
['a','b','c/d/e']
>>>'a/b'.split('/', 2)
['a','b']
>>>"IamZoot'sidentical twinsister, Dingo.".split(None, 2)
['I','am',"Zoot's identical twinsister, Dingo."]
21 Python 2.7quick reference New Mexico Tech Computer Center
S.splitlines([ keepends ])
SplitsSinto lines andreturns alistofthelines asstrings. Discards thelineseparators unless the
optional keepends arguments istrue.
>>>"""Isthat
...anocarina?""".splitlines()
['Isthat','anocarina?']
>>>"""What isyourname?
...SirRobinofCamelot.""".splitlines(True)
['Whatisyourname?\n', 'SirRobinofCamelot.']
S.startswith( t[,start[,end]])
Predicate totestwhether Sstarts with stringt.Otherwise similar to.endswith() .
>>>"bishop".startswith('bish')
True
>>>"bishop".startswith('The')
False
S.strip([ c])
ReturnSwith allleading andtrailing characters from stringcremoved. Thedefault value forcis
astring containing allthewhitespace characters .
>>>'\t\nRun\t\naway!\n\t'.strip()
'Run\t\naway!'
S.swapcase()
Return acopy ofSwith each lowercase character replaced byitsuppercase equivalent, andvice
versa.
>>>"abcDEF".swapcase()
'ABCdef'
S.title()
Returns thecharacters ofS,except thatthefirstletter ofeach word isuppercased, andother letters
arelowercased.
>>>"huge...tracts ofland".title()
'Huge...Tracts OfLand'
S.translate( new[,drop])
This function isused totranslate orremove each character ofS.Thenew argument isastring of
exactly 256characters, andeach character xoftheresult isreplaced bynew[ord( x)].
Ifyouwould likecertain characters removed fromSbefore thetranslation, provide astring ofthose
characters asthedrop argument.
Foryour convenience inbuilding thespecial 256-character strings used here, seethedefinition of
themaketrans() function ofSection 28.2,“string :Utility functions forstrings” (p.139),where
youwillfind examples.
S.upper()
Return acopy ofSwith alllowercase characters replaced bytheir uppercase equivalents.
>>>'Ilikeshouting'.upper()
'ILIKESHOUTING'
New Mexico Tech Computer Center Python 2.7quick reference 22
S.zfill( w)
Return acopy ofSleft-filled with'0' characters towidthw.
>>>'12'.zfill(9)
'000000012'
9.4.Thestring.format() method
The.format() method ofthestrtype isanextremely convenient way toformat textexactly theway
youwant it.
Note
This method wasadded inPython 2.6.
Quite often, wewant toembed data values insome explanatory text. Forexample, ifwearedisplaying
thenumber ofnematodes inahectare, itisalotmore meaningful todisplay itas"Therewere37.9
nematodes perhectare "than just"37.9" .Sowhat weneed isaway tomix constant textlike
"nematodes perhectare" with values from elsewhere inyour program.
Here isthegeneral form:
template .format( p0,p1,...,k0=v0,k1=v1,...)
Thetemplate isastring containing amixture ofoneormore format codes embedded inconstant text.
Theformat method uses itsarguments tosubstitute anappropriate value foreach format code inthe
template.
Thearguments tothe.format() method areoftwotypes. Theliststarts with zero ormore positional
arguments pi,followed byzero ormore keyword arguments oftheformki=vi,where eachkiisa
name with anassociated valuevi.
Justtogive youthegeneral flavor ofhow thisworks, here's asimple conversational example. Inthis
example, theformat code“{0}”isreplaced bythefirstpositional argument (49), and“{1}”isreplaced
bythesecond positional argument, thestring"okra" .
>>>"Wehave{0}hectares planted to{1}.".format(49, "okra")
'Wehave49hectares planted tookra.'
>>>
Inthenext example, wesupply thevalues using keyword arguments. Thearguments may besupplied
inany order. The keyword names must bevalid Python names (see Section 5,“Names and
keywords” (p.7)).
>>>"{monster} hasnoweaten{city}".format(
... city='Tokyo', monster='Mothra')
'Mothra hasnoweatenTokyo'
You may mixreferences topositional andkeyword arguments:
>>>"The{structure} sank{0}timesin{1}years.".format(
...3,2,structure='castle')
'Thecastlesank3timesin2years.'
Ifyouneed toinclude actual “{”and“}”characters intheresult, double them, likethis:
23 Python 2.7quick reference New Mexico Tech Computer Center
>>>"Thereare{0}members inset{{a}}.".format(15)
'Thereare15members inset{a}.'
9.4.1. General formofaforma tcode
Here isthegeneral form ofaformat code, where optional parts in[brackets] ,andactual characters
arein"double quotes" :
"{"[name]["!"conversion ][":"spec]"}"
•Forthename portion, seeSection 9.4.2,“Thename part” (p.24).
•Fortheconversion part, seeSection 9.4.3,“Theconversion part” (p.25).
•Forthespec part, seeSection 9.4.4,“Thespec part” (p.25).
9.4.2. Thename part
Thename part ofaformat code specifies thesource ofthevalue tobeformatted here. Numbers refer
topositional arguments passed tothe.format() method, starting at0forthefirstargument. Youmay
alsouseanyPython name torefer tooneofthekeyword arguments.
•Iftheassociated argument isaniterable, youmay append anexpression ofthisform toretrieve one
ofitselements:
"["index"]"
Forexample:
>>>signal=['red', 'yellow', 'green']
>>>signal[2]
'green'
>>>"Thelightis{0[2]}!".format(signal)
'Thelightisgreen!'
•Iftheassociated argument hasattributes, youcanappend anexpression ofthisform torefer tothat
attribute:
"."name
Forexample:
>>>importstring
>>>string.digits
'0123456789'
>>>"Ourdigitsare'{s.digits}'.".format(s=string)
"Ourdigitsare'0123456789'."
Ingeneral, youcanuseanycombination ofthese features. Forexample:
>>>"Thesixthdigitis'{s.digits[5]}'".format(s=string)
"Thesixthdigitis'5'"
Starting with Python 2.7,youmay omit allofthenumbers thatrefer topositional arguments, andthey
willbeused inthesequence they occur. Forexample:
New Mexico Tech Computer Center Python 2.7quick reference 24
>>>"Thedateis{}-{}-{}.".format(2012, 5,1)
'Thedateis2012-5-1.'
Ifyouusethisconvention, youmust omit allthose numbers. You can, however, omit allthenumbers
andstillusethekeyword names feature:
>>>"CanIhave{}poundsto{excuse}?".format(
...50,excuse='mend theshed')
'CanIhave50poundstomendtheshed?'
9.4.3. Theconversion part
Following thename part ofaformat code, youcanuseoneofthese twoforms toforce thevalue tobe
converted byastandard function:
str()!s
repr()!r
Here's anexample:
>>>"{}".format('Don\'t')
"Don't"
>>>"{!r}".format('Don\'t')
'"Don\'t"'
9.4.4. Thespec part
After thename andconversion parts ofaformat code, youmay useacolon (“:”)andaformat specifier
tosupply more details about how toformat therelated value.
Here isthegeneral form ofaformat specifier.
":"[[fill]align][sign]["#"]["0"][width][","]["."prec][type]
fill
You may specify anyfillcharacter except “}”.This character isused topad ashort value tothe
specified length. Itmay bespecified only incombination with analign character.
align
Specifies how toalign values that arenotlong enough tooccupy thespecified length. There are
four values:
Left-justify thevalue. This isthedefault alignment forstring values. <
Right-justify thevalue. This isthedefault alignment fornumbers. >
Center thevalue. ^
Fornumbers using asign specifier, addthepadding between thesign andtherestofthevalue. =
Here aresome examples oftheuseoffill andalign .
>>>"{:>8}".format(13)
'13'
25 Python 2.7quick reference New Mexico Tech Computer Center
>>>"{:>8}".format('abc')
'abc'
>>>"{:*>8}".format('abc')
'*****abc'
>>>"{:*<8}".format('abc')
'abc*****'
>>>"{:>5d}".format(14)
'14'
>>>"{:#>5d}".format(14)
'###14'
>>>"{:<6}".format('Git')
'Git'
>>>"{:*<6}".format('Git')
'Git***'
>>>"{:=^8}".format('Git')
'==Git==='
>>>"{:*=-9d}".format(-3)
'-*******3'
sign
This option controls whether anarithmetic sign isdisplayed. There arethree possible values:
Always display asign:+forpositive,-fornegative. +
Display-only fornegative values. -
Display onespace forpositive values,-fornegative. (one space)
Here aresome examples ofuseofthesign options.
>>>'{}{}'.format(17, -17)
'17-17'
>>>'{:5}{:5}'.format(17, -17)
'17-17'
>>>'{:<5}{:<5}'.format(17, -17)
'17-17'
>>>'{:@<5} {:@<5}'.format(17, -17)
'17@@@-17@@'
>>>'{:@>5} {:@>5}'.format(17, -17)
'@@@17@@-17'
>>>'{:@^5} {:@^5}'.format(17, -17)
'@17@@@-17@'
>>>'{:@^+5} {:@^+5}'.format(17, -17)
'@+17@@-17@'
>>>'{:@^-5} {:@^-5}'.format(17, -17)
'@17@@@-17@'
>>>'{:@^5}{:@^5}'.format(17, -17)
'@17@@-17@'
"#"
This option selects the“alternate form” ofoutput forsome types.
•When formatting integers asbinary, octal, orhexadecimal, thealternate form adds“0b”,“0o”,
or“0x”before thevalue, toshow theradix explicitly.
New Mexico Tech Computer Center Python 2.7quick reference 26
>>>"{:4x}".format(255)
'ff'
>>>"{:#4x}".format(255)
'0xff'
>>>"{:9b}".format(62)
'111110'
>>>"{:#9b}".format(62)
'0b111110'
>>>"{:<#9b}".format(62)
'0b111110 '
•When formatting float ,complex ,orDecimal values, the“#”option forces theresult tocontain
adecimal point, even ifitisawhole number.
>>>
"{:5.0f}".format(36)
'36'
>>>"{:#5.0f}".format(36)
'36.'
>>>fromdecimal importDecimal
>>>w=Decimal(36)
>>>"{:g}".format(w)
'36'
>>>"{:#g}".format(w)
'36.'
"0"
Tofillthefield with leftzeroes, place a“0”atthisposition inyour format code.
>>>"{:5d}".format(36)
'36'
>>>"{:05d}".format(36)
'00036'
>>>"{:021.15}".format(1.0/7.0)
'00000.142857142857143'
width
Place anumber atthisposition tospecify thetotal width ofthedisplayed value.
>>>"Beware the{}!".format('Penguin')
'Beware thePenguin!'
>>>"Beware the{:11}!".format('Penguin')
'Beware thePenguin !'
>>>"Beware the{:>11}!".format('Penguin')
'Beware the Penguin!'
","
Place acomma atthisposition inyour format code todisplay commas between groups ofthree digits
inwhole numbers.
Note
This feature wasadded inPython 2.7.
27 Python 2.7quick reference New Mexico Tech Computer Center
>>>"{:,d}".format(12345678901234)
'12,345,678,901,234'
>>>"{:,f}".format(1234567890123.456789)
'1,234,567,890,123.456787'
>>>"{:25,f}".format(98765432.10987)
' 98,765,432.109870'
"."precision
Usethispart tospecify thenumber ofdigits after thedecimal point.
>>>frommathimportpi
>>>"{}".format(pi)
'3.141592653589793'
>>>"{:.3}".format(pi)
'3.14'
>>>"{:25,.3f}".format(1234567890123.456789)
'1,234,567,890,123.457'
type
This code specifies thegeneral type offormat used. Thedefault istoconvert thevalue ofastring
asifusing thestr() function. Refer tothetable below forallowed values.
Format aninteger inbinary. b
Given anumber, display thecharacter thathasthatcode. c
Display anumber indecimal (base 10). d
Display afloat value using theexponential format. e
Same ase,butuseacapital “E”intheexponent. E
Format anumber infixed-point form. f
General numeric format: useeitherforg,whichever isappropriate. g
Same as“g”,butuses acapital “E”intheexponential form. G
Forformatting numbers, thisformat uses thecurrent local setting toinsert separator characters. For
example, anumber thatAmericans would show as“1,234.56 ”,Europeans would show itas
“1.234,56 ”.n
Display aninteger inoctal format. o
Display aninteger inhexadecimal (base 16).Digits greater than 9aredisplayed aslowercase charac-
ters.x
Display aninteger inhexadecimal (base 16).Digits greater than 9aredisplayed asuppercase charac-
ters.X
Display anumber asapercentage: itsvalue ismultiplied by100,followed bya“%”character. %
Examples:
>>>"{:b}".format(9)
'1001'
>>>"{:08b}".format(9)
'00001001'
>>>"{:c}".format(97)
'a'
>>>"{:d}".format(0xff)
New Mexico Tech Computer Center Python 2.7quick reference 28
'255'
>>>frommathimportpi
>>>"{:e}".format(pi*1e10)
'3.141593e+10'
>>>"{:E}".format(pi*1e10)
'3.141593E+10'
>>>"{:f}".format(pi)
'3.141593'
>>>"{:g}".format(pi)
'3.14159'
>>>"{:g}".format(pi*1e37)
'3.14159e+37'
>>>"{:G}".format(pi*1e37)
'3.14159E+37'
>>>"{:o}".format(255)
'377'
>>>"{:#o}".format(255)
'0o377'
>>>"{:x}".format(105199)
'19aef'
>>>"{:X}".format(105199)
'19AEF'
>>>"{:<#9X}".format(105199)
'0X19AEF '
>>>"{:%}".format(0.6789)
'67.890000%'
>>>"{:15.3%}".format(0.6789)
' 67.890%'
9.4.5. Forma tting afield ofvariable length
Sometimes youneed toformat afield using alength thatisavailable only once theprogram isrunning.
Todothis, youcanuseanumber orname in{braces} inside aformat code atthewidth position. This
item then refers toeither apositional orkeyword argument tothe.format() method asusual.
Here's anexample. Suppose youwant toformat anumbernusingddigits. Here areexamples showing
thiswith andwithout left-zero fill:
>>>n=42
>>>d=8
>>>"{0:{1}d}".format(42, 8)
'42'
>>>"{0:0{1}d}".format(42, 8)
'00000042'
>>>
You can, ofcourse, also usekeyword arguments tospecify thefield width. This trick also works for
variable precision.
"{count:0{width}d}".format(width=8, count=42)
'00000042'
>>>
Thesame technique applies tosubstituting anyofthepieces ofaformat code.
29 Python 2.7quick reference New Mexico Tech Computer Center
>>>"{:&<14,d}".format(123456)
'123,456&&&&&&&'
>>>"{1:{0}{2}{3},{4}}".format('&', 123456, '<',14,'d')
'123,456&&&&&&&'
>>>"{:@^14,d}".format(1234567)
'@@1,234,567@@@'
>>>"{n:{fil}{al}{w},{kind}}".format(
... kind='d', w=14,al='^', fil='@', n=1234567)
'@@1,234,567@@@'
9.5.Theolder string forma topera tor
Python versions before 2.6didnothave thestring.format() method described inSection 9.4,“The
string.format() method” (p.23).Instead, string formatting used thisgeneral form:
f%v
wherefisatemplate string andvspecifies thevalue orvalues tobeformatted using thattemplate. If
multiple values aretobeformatted, vmust beatuple.
Thetemplate string may contain anymixture ofordinary textand format codes .Aformat code always
starts with apercent (%)symbol. SeeTable 4,“Format codes” (p.30).
Theresult ofaformat operation consists oftheordinary characters from thetemplate with values sub-
stituted within them wherever aformat code occurs. Aconversational example:
>>>print"Wehave%dpallets of%stoday." %(49,"kiwis")
Wehave49pallets ofkiwistoday.
Intheabove example, there aretwo format codes. Code“%d”means “substitute adecimal number
here,” andcode“%s”means “substitute astring value here”. Thenumber 49issubstituted forthefirst
format code, andthestring"kiwis" replaces thesecond format code.
Ingeneral, format codes have thisform:
%[p][m[.n]]c
Table 3.Parts oftheformat operator
Anoptional prefix; seeTable 5,“Format code prefixes” (p.31). p
Specifies thetotal desired field width. Theresult willnever beshorter than thisvalue, butmay be
longer ifthevalue doesn't fit;so,"%5d"%1234 yields"1234" ,but"%2d"%1234 yields
"1234" .m
Ifthevalue isnegative, values areleft-aligned inthefield whenever they don'tfilltheentire width.
Forfloat values, thisspecifies thenumber ofdigits after thedecimal point. n
Indicates thetype offormatting. c
Here aretheformat type codes,cinthegeneral expression above:
Table 4.Format codes
Format astring. Forexample,'%-3s'%'xy' yields'xy';thewidth (-3)forces leftalignment. %s
Decimal conversion. Forexample,'%3d'%-4yields thestring'-4'. %d
New Mexico Tech Computer Center Python 2.7quick reference 30
Exponential format; allow four characters fortheexponent. Examples: '%08.1e' %1.9783
yields'0002.0e+00' .%e
Same as%e,buttheexponent isshown asanuppercase E. %E
Forfloat type. E.g.,'%4.1f' %1.9783 yields'2.0' . %f
General numeric format. Use%fifitfits,otherwise use%e. %g
Same as%G,butanuppercase Eisused fortheexponent ifthere isone. %G
Octal (base 8).Forexample,'%o'%13yields'15' . %o
Hexadecimal (base 16).Forexample,'%x'%247 yields'f7' . %x
Same as%x,butcapital letters areused forthedigits A-F. Forexample,'%04X'%247 yields
'00F7' ;theleading zero inthelength (04)requests thatPython fillupanyempty leading positions
with zeroes.%X
Convert aninteger tothecharacter with thecorresponding ASCII10code. Forexample,'%c'%
0x61 yields thestring'a'.%c
Places apercent sign (%)intheresult. Does notrequire acorresponding value. Example:"Energy
at%d%%."%88yields thevalue'Energy at88%.' .%%
Table 5.Format code prefixes
Fornumeric types, forces thesign toappear even forpositive values. +
Left-justifies thevalue inthefield. -
Fornumeric types, usezerofill.Forexample,'%04d'%2produces thevalue '0002'. 0
With the%o(octal) format, append aleading"0";with the%x(hexadecimal) format, append a
leading"0x" ;with the%g(general numeric) format, append alltrailing zeroes. Examples:
>>>'%4o'%127
'177'#
>>>'%#4o'%127
'0177'
>>>'%x'%127
'7f'
>>>'%#x'%127
'0x7f'
>>>'%10.5g' %0.5
' 0.5'
>>>'%#10.5g' %0.5
'0.50000'
Youcanalsousethestring format operator%toformat asetofvalues from adictionary D(seeSection 16,
“Typedict :Dictionaries” (p.49)):
f%D
Inthisform, thegeneral form foraformat code is:
%(k)[p][m[.n]]c
10http://en.wikipedia.org/wiki/ASCII
31 Python 2.7quick reference New Mexico Tech Computer Center
wherekisakeyindictionary D,andtherestoftheformat code isasintheusual string format operator.
Foreach format code, thevalue ofD[k]isused. Example:
>>>named={'last': 'Poe','first': 'Aloysius'}
>>>'Dear%(first)s %(last)s:' %named
'DearAloysius Poe:'
10.Typeunicode :Strings of32-bit chara cters
With theadvent oftheWeb asmedium forworldwide information interchange, theUnicode character
sethasbecome vital. Forgeneral background onthischaracter set,seetheUnicode homepage11.
TogetaUnicode string, prefix thestring withu.Forexample:
u'klarn'
isafive-character Unicode string.
Toinclude oneofthespecial Unicode characters inastring constant, usethese escape sequences:
Foracode with the8-bit hexadecimal valueHH. \xHH
Foracode with the16-bit hexadecimal valueHHHH . \uHHHH
Foracode with the32-bit hexadecimal valueHHHHHHHH . \UHHHHHHHH
Examples:
>>>u'Klarn.'
u'Klarn.'
>>>u'Non-breaking-\xa0-space.'
u'Non-breaking-\xa0-space.'
>>>u'Less-than-or-equal symbol: \u2264'
u'Less-than-or-equal symbol: \u2264'
>>>u"Phoenician letter'wau':\U00010905"
u"Phoenician letter'wau':\U00010905"
>>>len(u'\U00010905')
1
Alltheoperators andmethods ofstr type areavailable withunicode values.
Additionally, foraUnicode valueU,usethismethod toencode itsvalue asastring oftypestr:
U.encode (encoding [,error)
Return thevalue ofUastypestr.Theencoding argument isastring thatspecifies theencoding
method. Inmost cases, thiswillbe'utf_8' .Fordiscussion andexamples, seeSection 10.1,“The
UTF-8 encoding” (p.33).
Theoptional error string specifies what todowith characters thatdonothave exact equivalents.
Forexample, ifyouareconverting totheASCII12character set,theencoding argument is'ascii' .
Values oftheerror argument aregiven inthetable below.
Raise aUnicodeError exception ifanycharacter hasnoASCII equivalent.
This isthedefault behavior.'strict'
11http://www.unicode.org/12http://en.wikipedia.org/wiki/ASCII
New Mexico Tech Computer Center Python 2.7quick reference 32
Leave outcharacters thathave noequivalent. 'ignore'
Substitute a'?' foreach character thathasnoequivalent. 'replace'
UsetheXML character entity escape sequence forcharacters with noASCII
equivalent. Thegeneral form ofthissequence is"&#N;",whereNisthe'xmlcharrefre-
place'
decimal value ofthecharacter's code point. This feature isvery handy for
generating internationalized Web pages.
UsePython backslash escape sequences torepresent characters with no
equivalent.'backslashreplace'
Here aresome examples todemonstrate error argument values.
>>>s=u"a\u262ez"
>>>len(s)
3
>>>s
u'a\u262ez'
>>>s.encode('ascii')
Traceback (mostrecentcalllast):
File"<stdin>", line1,in<module>
UnicodeEncodeError: 'ascii' codeccan'tencodecharacter u'\u262e'
inposition 1:ordinal notinrange(128)
>>>s.encode('ascii', 'ignore')
'az'
>>>s.encode('ascii', 'replace')
'a?z'
>>>s.encode('ascii', 'xmlcharrefreplace')
'a&#9774;z'
>>>hex(9774)
'0x262e'
>>>t=s.encode('ascii', 'backslashreplace')
>>>t
'a\\u262eb'
>>>printt
a\u262eb
>>>len(t)
8
>>>t[1]
'\\'
10.1. TheUTF-8 encoding
How, youmight ask,dowepack 32-bit Unicode characters into8-bit bytes? Quite prevalent ontheWeb
and theInternet generally istheUTF-8 encoding, which allows anyoftheUnicode characters tobe
represented asastring ofoneormore 8-bit bytes.
First, some definitions:
•Acode point isanumber representing aunique member oftheUnicode character set.
•TheUnicode code points arevisualized asathree-dimensional structure made ofplanes ,each ofwhich
hasarange of65536 code points organized as256rows of256columns each.
33 Python 2.7quick reference New Mexico Tech Computer Center
Thelow-order eight bitsofthecode point select thecolumn; thenext eight more significant bitsselect
therow; andtheremaining most significant bitsselect theplane.
This diagram shows how UTF-8 encoding works. Thefirst 128code points (hexadecimal 00through
7F)areencoded asinnormal 7-bit ASCII13,with thehigh-order bitalways 0.Forcode points above hex
7F,allbytes have thehigh-order (0x80 )bitset,andthebitsofthecode point aredistributed through
two, three, orfour bytes, depending onthenumber ofbitsneeded torepresent thecode point value.
0 x x x x x x x
0 0 0 0 0 0 0 0 x x x x y y y y y y z z z z z 4x 6y 6zz
0 0 0wwwx x x x x x y y y y y y z z z z z 3w 6x 6y 6zz0 0 0 0 0 0 0 0 0 0 0 0 0 y y y y y z z z z z 5y 6zz0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 7x 0 x x x
1 0 zz z z z z 1 1 y0 y y y y
1 1 11 0www1 1 01 x x x x 1 0 y y y y y y 1 0 z z z z z z
1 0 zz z z z z 1 0 xx x x x x 1 0 y y y y y yx x x xplane row column byte 0 byte 1 byte 2 byte 3UTF−8 encoded Code point
Toencode aUnicode stringU,usethismethod:
U.encode('utf_8')
Todecode aregularstr valueSthatcontains aUTF-8 encoded value, usethismethod:
S.decode('utf_8')
Examples:
>>>tilde='~'
>>>tilde.encode('utf_8')
'~'
>>>u16=u'\u0456'
>>>s=u16.encode('utf_8')
>>>s
'\xd1\x96'
>>>s.decode('utf_8')
u'\u0456'
>>>u32=u'\U000E1234'
>>>s=u32.encode('utf_8')
>>>s
'\xf3\xa1\x88\xb4'
>>>s.decode('utf_8')
u'\U000e1234'
UTF-8 isnottheonly encoding method. Formore details, consult thedocumentation forthePython
modulecodecs14.
13http://en.wikipedia.org/wiki/ASCII14http://docs.python.org/library/codecs.html
New Mexico Tech Computer Center Python 2.7quick reference 34
11.Typelist :Mutable sequenc es
Toform values intoasequence, usePython'slist type ifyouaregoing tochange, delete, oraddvalues
tothesequence. Foradiscussion ofwhen touselist andwhen tousetuple ,seeSection 12,“Type
tuple :Immutable sequences” (p.39).
Tocreate alist,enclose alistofzero ormore comma-separated values inside square brackets, “[...] ”.
Examples:
[]
["baked beans"]
[23,30.9,'x']
You canalsocreate alistbyperforming specific operations oneach element ofsome sequence; seeSec-
tion 11.2,“List comprehensions” (p.38).
Lists support alltheoperations described under Section 8.1,“Operations common toallthesequence
types” (p.12).Methods available onlistsarediscussed inSection 11.1,“Methods onlists” (p.35).
There areanumber offunctions thatcanbeused with listsaswell:
•Section 20.2,“all() :Arealltheelements ofaniterable true?” (p.61).
•Section 20.3,“any() :Areanyofthemembers ofaniterable true?” (p.61).
•Section 20.8,“cmp() :Compare twovalues” (p.62).
•Section 20.12, “enumerate() :Step through indices andvalues ofaniterable” (p.64)
•Section 20.14, “filter() :Extract qualifying elements from aniterable” (p.65).
•Section 20.21, “iter() :Produce aniterator over asequence” (p.68).
•Section 20.22, “len() :Number ofelements” (p.68).
•Section 20.23, “list() :Convert toalist” (p.68).
•Section 20.25, “map() :Apply afunction toeach element ofaniterable” (p.69).
•Section 20.26, “max() :Largest element ofaniterable” (p.70).
•Section 20.27, “min() :Smallest element ofaniterable” (p.70).
•Section 20.33, “range() :Generate anarithmetic progression asalist” (p.72).
•Section 20.35, “reduce() :Sequence reduction” (p.73).
•Section 20.36, “reversed() :Produce areverse iterator” (p.74).
•Section 20.39, “sorted() :Sort asequence” (p.76).
•Section 20.41, “sum() :Total theelements ofasequence” (p.76).
•Section 20.46, “xrange() :Arithmetic progression generator” (p.78).
•Section 20.47, “zip() :Combine multiple sequences” (p.78).
11.1. Methods onlists
ForanylistvalueL,these methods areavailable.
L.append( x)
Append anew element xtotheendoflistL.Does notreturn avalue.
>>>colors=['red', 'green', 'blue']
>>>colors.append('indigo')
>>>colors
['red', 'green', 'blue', 'indigo']
L.count( x)
Return thenumber ofelements ofLthatcompare equal tox.
35 Python 2.7quick reference New Mexico Tech Computer Center
>>>[59,0,0,0,63,0,0].count(0)
5
>>>['x','y'].count('Fomalhaut')
0
L.extend( S)
Append another sequence StoL.
>>>colors
['red', 'green', 'blue', 'indigo']
>>>colors.extend(['violet', 'palepuce'])
>>>colors
['red', 'green', 'blue', 'indigo', 'violet', 'palepuce']
L.index( x[,start[,end]])
IfLcontains anyelements thatequalx,return theindex ofthefirst such element, otherwise raise
aValueError exception .
The optional start andend arguments canbeused tosearch only positions within theslice
L[start:end].
>>>colors
['red', 'green', 'blue', 'indigo', 'violet', 'palepuce']
>>>colors.index('blue')
2
>>>colors.index('taupe')
Traceback (mostrecentcalllast):
File"<stdin>", line1,in<module>
ValueError: list.index(x): xnotinlist
>>>M=[0,0,3,0,0,3,3,0,0,3]
>>>M.index(3)
2
>>>M.index(3, 4,8)
5
>>>M.index(3, 0,2)
Traceback (mostrecentcalllast):
File"<stdin>", line1,in<module>
ValueError: list.index(x): xnotinlist
L.insert( i,x)
Insert anew element xintolistLjustbefore theithelement, shifting allhigher-number elements
totheright. Novalue isreturned.
>>>colors
['red', 'green', 'blue', 'indigo', 'violet', 'palepuce']
>>>colors[1]
'green'
>>>colors.insert(1, "yellow")
>>>colors
['red', 'yellow', 'green', 'blue', 'indigo', 'violet', 'palepuce']
L.pop([i])
Remove andreturn theelement with indexifromL.Thedefault value foriis-1,soifyoupass no
argument, thelastelement isremoved.
New Mexico Tech Computer Center Python 2.7quick reference 36
>>>colors
['red', 'yellow', 'green', 'blue', 'indigo', 'violet', 'palepuce']
>>>tos=colors.pop()
>>>tos
'palepuce'
>>>colors
['red', 'yellow', 'green', 'blue', 'indigo', 'violet']
>>>colors[4]
'indigo'
>>>dye=colors.pop(4)
>>>dye
'indigo'
>>>colors
['red', 'yellow', 'green', 'blue', 'violet']
L.remove( x)
Remove thefirstelement ofLthatisequal tox.Ifthere aren't anysuch elements, raisesValueError .
>>>colors
['red', 'yellow', 'green', 'blue', 'violet']
>>>colors.remove('yellow')
>>>colors
['red', 'green', 'blue', 'violet']
>>>colors.remove('cornflower')
Traceback (mostrecentcalllast):
File"<stdin>", line1,in<module>
ValueError: list.remove(x): xnotinlist
>>>notMuch =[0,0,3,0]
>>>notMuch.remove(0)
>>>notMuch
[0,3,0]
>>>notMuch.remove(0)
>>>notMuch
[3,0]
>>>notMuch.remove(0)
>>>notMuch
[3]
>>>notMuch.remove(0)
Traceback (mostrecentcalllast):
File"<stdin>", line1,in<module>
ValueError: list.remove(x): xnotinlist
L.reverse()
Reverses theelements ofLinplace. Does notreturn aresult. Compare Section 20.36, “reversed() :
Produce areverse iterator” (p.74).
>>>colors
['red', 'green', 'blue', 'violet']
>>>colors.reverse()
>>>colors
['violet', 'blue', 'green', 'red']
37 Python 2.7quick reference New Mexico Tech Computer Center
L.sort(cmp[,key[,reverse]]])
Sort listLinplace. Does notreturn aresult. Compare Section 20.39, “sorted() :Sort ase-
quence” (p.76).
Thereordering isguaranteed tobestable—that is,iftwoelements areconsidered equal, their order
after sorting willnotchange.
While sorting, Python willusethebuilt-incmp() function tocompare elements; seeSection 20.8,
“cmp() :Compare two values” (p.62).You may provide, asthefirst argument tothe.sort()
method, your own comparator function tocompare elements. This function must have thesame
calling sequence andreturn value convention asthebuilt-incmp() function: itmust take twoargu-
ments, andreturn anegative number ofthefirstargument precedes thesecond, apositive number
ifthesecond argument precedes thefirst, orzero ifthey areconsidered equal.
You may also provide a“key extractor function” that isapplied toeach element todetermine its
key. This function must take oneargument andreturn thevalue tobeused asthesortkey. Ifyou
want toprovide akeyextractor function butnotacomparator function, passNone asthefirstargu-
ment tothemethod.
Additionally, youmay provide athird argument ofTrue tosortthesequence indescending order;
thedefault behavior istosortintoascending order.
>>>temps=[67, 73,85,93,92,78,95,100,104]
>>>temps.sort()
>>>temps
[67,73,78,85,92,93,95,100,104]
>>>defreverser(n1, n2):
... '''Comparison function tousereverse order.
... '''
... returncmp(n2, n1)
...
>>>temps.sort(reverser)
>>>temps
[104,100,95,93,92,85,78,73,67]
>>>defunitsDigit(n):
... '''Returns onlytheunitsdigitofn.
... '''
... returnn%10
...
>>>temps.sort(None, unitsDigit)
>>>temps
[100,92,93,73,104,95,85,67,78]
>>>temps.sort(None, None,True)
>>>temps
[104,100,95,93,92,85,78,73,67]
11.2. Listcompr ehensions
You canuseaform called alistcomprehension tocreate alist.Thegeneral form is:
[e
forv1ins1
forv2ins2
...
ifc]
New Mexico Tech Computer Center Python 2.7quick reference 38
whereeissome expression, followed byoneormorefor clauses, optionally followed byanifclause.
Theresult isalistcontaining allthevalues ofexpression eafter allthenestedfor loops have been run;
thefor loops have thesame structure asinSection 23.4,“Thefor statement: Iteration over ase-
quence” (p.101).Ifthere isan“if”clause, itdetermines which values ofeareadded tothelist:ifthe
ifcondition istrue, thevalue isadded, otherwise itisnotadded.
This isperhaps easiest toexplain with afewexamples. Inthefirstexample, weconstruct alistcontaining
thecubes ofthenumbers from 1to10,inclusive. Thefor loop generates thenumbers 1,2,...,10,and
then theexpression “x**3”cubes each oneandappends ittotheresulting list.
>>>range(1, 11)
[1,2,3,4,5,6,7,8,9,10]
>>>[x**3forxinrange(1,11 )]
[1,8,27,64,125,216,343,512,729,1000]
Inthenext example, weusetwofor loops. Theouter loop generates thesequence[1,2,3],and
theinner loop generates thesequence[50,51].Theexpression “x*1000+y”iscomputed foreach
oftheresulting sixvalue setsforxandy,andtheresult isappended tothelistbeing built.
>>>[x*1000+y
...forxinrange(1,4)
...foryinrange(50, 52)]
[1050,1051,2050,2051,3050,3051]
Inthenext example, there aretwonested loops, each generating thesequence[0,1,2].Foreach of
thenine trips through theinner loop, wetestthevalues ofxandyanddiscard thecases where they
areequal. Theexpression “(y,x)”combines thetwovalues intoa2-tuple.
>>>[(y,x)
...foryinrange(3)
...forxinrange(3)
...ifx!=y]
[(0,1),(0,2),(1,0),(1,2),(2,0),(2,1)]
12.Typetuple :Immutable sequenc es
Forrepresenting asequence ofvalues, Python hastwosimilar container types :list andtuple .
Aninstance ofacontainer type isbasically avalue thathasother values inside it;wecallthecontained
values elements .
So,when should youusealist,andwhen atuple? Inmany contexts, either willwork. However, there
areimportant differences.
•Values oftypelist aremutable; thatis,youcandelete oraddelements, orchange thevalue ofany
oftheelements inside thelist.
Lists cannot beused incertain contexts. Forexample, youcan't usealistasthekeyinadictionary.
>>>d={}
>>>d[(23,59)] ='hike'
>>>d[[46,19]] ='hut'
Traceback (mostrecentcalllast):
File"<stdin>", line1,in<module>
TypeError: listobjects areunhashable
39 Python 2.7quick reference New Mexico Tech Computer Center
•Values oftypetuple areimmutable. Once youhave assembled atuple, youcannot add ordelete
elements orchange thevalue ofanelement inside thetuple.
Among thereasons touseatuple instead ofalist:
•Tuples areallowed incertain contexts where lists arenot,such astheright-hand argument ofthe
string format operator, orasakeyinadictionary.
•Ifyour program isindanger ofrunning outofprocessor memory, tuples areslightly more efficient
intheir memory usage.
Write aliteral tuple asasequence ofvalues inparentheses, separated bycommas. There may beany
number ofvalues ofanytype oranymixture oftypes. There may bezero values.
Towrite atuple with exactly onevalue, youmust usethisspecial syntax:
(value,)
That is,youmust provide acomma before theclosing “)”,inorder toshow thatitisatuple, andnot
justaparenthesized expression. Note especially thelasttwoexamples below:
>>>()
()
>>>('farcical', 'aquatic', 'ceremony')
('farcical', 'aquatic', 'ceremony')
>>>('Ni',)
('Ni',)
>>>('Ni')
'Ni'
Youmay alsoconvert anyiterable intoatuple using Section 20.42,“tuple() :Convert toatuple” (p.77).
Thetuple type does nothave comprehensions (see Section 11.2,“List comprehensions” (p.38)),but
youcangettheequivalent byapplying thetuple() function toalistcomprehension. Here isanexample:
>>>tuple([x**2 forxin(2,3,8)])
(4,9,64)
>>>
Tuples alsosupport the.index() and.count() methods asdescribed inSection 11.1,“Methods on
lists” (p.35).
13.Thebytes type
Tounderstand why Python version 2.6andbeyond have abytes type, itisnecessary toreview alittle
history.
Most early computing used 7-and8-bit character codes, butthese character setsarevery limited. In
particular, lifewasdifficult forFrancophone countries when“è”and“é”arevery different letters. The
32-bit character setoftheUnicode standard15isthecurrent preferred practice, andprovides enough
characters tolastagood while intothefuture.
Text handling inthePython 2.xreleases was awkward duetothepresence oftwodifferent types for
representing character data:strandunicode .Consequently, intheupcoming major incompatible 3.x
releases, allcharacter data willberepresented internally by32-bit characters.
15http://www.unicode.org/
New Mexico Tech Computer Center Python 2.7quick reference 40
Therefore, inPython 2.6thebytes type wasadded toaidtransition tothe3.0family, which hasasep-
aratebytes type for8-bit character strings. Inthe3.xversions, abytes value isasequence ofzero or
more unsigned 8-bit integers, each intherange 0–255, inclusive.
InPython 2.6andsubsequent versions, thebytes type isasynonym forstr.Thebytes() function
works exactly likethestr() function.
>>>s=bytes(987)
>>>s
'987'
>>>type(s)
<type'str'>
Usethistype where your program expects 8-bit characters, anditwillease thetransition toPython 3.x,
because thesemi-automated translation process willknow thatvalues ofbytes type areintended for
sequences of8-bit characters.
13.1. Using thebytes type in3.xconversion
Versions 2.6+ support anew notation: tocreate aliteral oftypebytes ,place a“b”justbefore the
opening quote.
>>>s=b'abc'
>>>s
'abc'
>>>type(s)
<type'str'>
Such literals areexactly likeregular string literals. Thedifference comes when youconvert your program
tothe3.xversions. InPython 3.x,astring oftheformb'...' willhave typebytes ,which willbedif-
ferent than thestr (32-bit character) type in3.x.
One step inconverting your 2.xprograms to3.xistoaddthisimport before alltheother imports in
your program:
from__future__ importunicode_literals
Inprograms thatstart with thisdeclaration, allstring literals willautomatically beconsidered unicode
type without using theu'...' prefix. This means youmay alsoinclude escape sequences oftheform
'\uXXXX',each ofwhich designates a16-bit Unicode code point asfour hexadecimal digitsXXXX .
Here isademonstration ofthedifference. Before theimport ,the\uescape isnotrecognized, andthe
value hastypestr.Afterwards, thereturn value istypeunicode
>>>s='\u2672'
>>>len(s)
6
>>>s
'\\u2672'
>>>type(s)
<type'str'>
>>>from__future__ importunicode_literals
>>>t='\u2672'
>>>len(t)
41 Python 2.7quick reference New Mexico Tech Computer Center
1
>>>type(t)
<type'unicode'>
>>>t
u'\u2672'
14.Thebytearray type
New inPython 2.6isthebytearray type. Each instance isasequence of8-bit bytes, each ofwhich is
anunsigned integer intherange 0<=255.Unlike thestrtype, however,bytearray values aremutable:
youcandelete, insert, orreplace arbitrary values orslices.
Aswith thefeatures described inSection 13,“Thebytes type” (p.40),thistype isintended toease the
transition toPython 3.xversions. Useitforsituations where youarehandling sequences of8-bit bytes
thatarenot intended astextual representations, such asrawbinary data.
Values ofthistype support almost alloftheoperators andmethods ofthestr type (with theexception
of.encode() and.format() methods). They also support these methods ofthelist type:.ex-
tend() ,.insert() ,.pop() ,.remove() ,.reverse() .You canalso replace values using either
integers ortheb'...' (bytes )literals.
Some examples:
>>>s=bytearray('abcdef')
>>>s
bytearray(b'abcdef')
>>>type(s)
<type'bytearray'>
>>>s[3]
100
>>>s.insert(0, b'^')
>>>s
bytearray(b'^abcdef')
>>>s.reverse()
>>>s
bytearray(b'fedcba^')
>>>s[2:6]
bytearray(b'dcba')
>>>s[2:6]=b'#'
>>>s
bytearray(b'fe#^')
>>>s[0]=63
>>>s
bytearray(b'?e#^')
>>>
Thebytearray type also hasastatic method named.fromhex() that creates abytearray value
from aUnicode string containing hexadecimal characters (which may beseparated byspaces forlegib-
ility).
>>>ao=bytearray.fromhex(u'00 ff')
>>>ao
bytearray(b'\x00\xff')
New Mexico Tech Computer Center Python 2.7quick reference 42
>>>ao[1]
255
15.Typesset andfrozenset :Settypes
Mathematically speaking, asetisanunordered collection ofzero ormore distinct elements. Python has
twosettypes thatrepresent thismathematical abstraction. Usethese types when youcare only about
whether something isamember ofthesetornot,andyoudon't need them tobeinanyspecific order.
Theelements ofaPython setmust beimmutable. Inparticular, youcan't have listordictionary elements
inaset.
Most operations onsetswork with bothset andfrozenset types.
•Values oftypeset aremutable: youcanaddordelete members.
There aretwoways tocreate amutable set.
•InallPython versions ofthe2.xseries, theset(S)function operates onasequence Sandreturns
amutable setcontaining theunique elements ofS.Theargument isoptional; ifomitted, yougeta
new, empty set.
>>>s1=set([1, 1,1,9,1,8,9,8,3])
set([8, 1,3,9])
>>>s1=set([1, 1,1,9,1,8,9,8,3])
>>>s2=set()
>>>s1
set([8, 1,3,9])
>>>s2
set([])
>>>printlen(s1), len(s2)
40
>>>s3=set("notlob bolton")
>>>s3
s3
set(['','b','l','o','n','t'])
•Starting inPython 2.7,youcancreate asetbysimply enclosing oneormore elements within braces
{...} separated bycommas.
s1={1,1,1,9,1,8,9,8,3}
>>>s1
set([8, 9,3,1])
Note thewording “one ormore:” anempty pairofbraces “{}”isanempty dictionary, notanempty
set.
•Afrozenset value isimmutable: youcan't change themembership, butyoucanuseafrozenset
value incontexts wheresetvalues arenotallowed. Forexample, youcanuseafrozenset asakey
inadictionary, butyoucan't useaset value asadictionary key.
Tocreate aset orfrozenset ,seeSection 20.38, “set() :Create analgebraic set” (p.75)and Sec-
tion 20.17, “frozenset() :Create afrozen set”(p.66).
Anumber offunctions thatwork onsequences alsowork onsets. Ineach case, thesetisconverted toa
listbefore being passed tothefunction.
43 Python 2.7quick reference New Mexico Tech Computer Center
•Section 20.2,“all() :Arealltheelements ofaniterable true?” (p.61).Predicate totestwhether all
members ofasetareTrue .
•Section 20.3,“any() :Areanyofthemembers ofaniterable true?” (p.61).Predicate totestwhether
anymember ofasetistrue.
•Section 20.14, “filter() :Extract qualifying elements from aniterable” (p.65).Returns alistofthe
elements thatpass through afiltering function.
•Section 20.21, “iter() :Produce aniterator over asequence” (p.68).Returns aniterator that will
visit every element oftheset.
•Section 20.22, “len() :Number ofelements” (p.68).Returns thelength (cardinality) oftheset.
•Section 20.23, “list() :Convert toalist” (p.68).Returns theelements ofthesetasalist.
•Section 20.25,“map() :Apply afunction toeach element ofaniterable” (p.69).Returns alistcontaining
theresult oftheapplication ofafunction toeach element ofaset.
•Section 20.26, “max() :Largest element ofaniterable” (p.70).Returns thelargest element ofaset.
•Section 20.27, “min() :Smallest element ofaniterable” (p.70).Returns thesmallest element ofaset.
•Section 20.35, “reduce() :Sequence reduction” (p.73).Returns theresult oftheapplication ofa
given function pairwise toalltheelements ofaset.
•Section 20.39, “sorted() :Sort asequence” (p.76).Returns alistcontaining thesorted elements of
theset.
Another new feature inPython 2.7isthesetcomprehension .This issimilar tothefeature described in
Section 11.2,“List comprehensions” (p.38).Here isthegeneral form:
{e
forv1ins1
forv2ins2
...
ifc}
Aswith alistcomprehension, youuseoneormorefor clauses toiterate over setsofvalues, andthe
expression eisevaluated forevery combination ofthevalues inthesequences si.Ifthere isno“if”
clause, orifthe“if”condition evaluates asTrue ,thevalue isadded tothesequence from which aset
isthen constructed.
Here isanexample. FunctiontakeUppers() takes onestring argument andreturns asetoftheunique
letters inthatstring, uppercased. Thefor clause iterates over thecharacters intheargument s;theif
clause discards characters that aren't letters; andthe.upper() method converts lowercase letters to
uppercase.
>>>deftakeUpper(s):
... return{c.upper()
... forcins
... ifc.isalpha() }
...
>>>takeUpper("A a|ccCc^#zZ")
set(['A', 'C','Z'])
15.1. Opera tions onmutable andimmutable sets
These operations aresupported bybothset andfrozenset types:
xinS
Predicate thattests whether element xisamember ofsetS.
New Mexico Tech Computer Center Python 2.7quick reference 44
>>>1inset([0,1,4])
True
>>>99inset([0,1,4])
False
xnotinS
Predicate thattests whether element xisnotamember ofsetS.
>>>1notinset([0,1,4])
False
>>>99notinset([0,1,4])
True
S1==S2
Predicate thattests whether setsS1andS2have exactly thesame members.
>>>set('bedac') ==set('abcde')
True
>>>set('bedac') ==set('bedack')
False
S1!=S2
Predicate thattests whether setsS1andS2have different members.
>>>set('bedac' )!=set('abcde' )
False
>>>set('bedac')!=set('bedack')
True
S1<S2
Predicate that tests whether S1isaproper subset ofS2;that is,alltheelements ofS1arealso
members ofS2,butthere isatleast oneelement ofS2thatisnotinS1.
>>>set('ab') <set('ab')
False
>>>set('ab') <set('abcde')
True
S1>S2
Predicate that tests whether S1isaproper superset ofS2;that is,alltheelements ofS2arealso
members ofS1,butthere isatleast oneelement ofS1thatisnotinS2.
>>>set('ab') >set('ab')
False
>>>set('abcde') >set('cd')
True
S.copy()
Return anew setofthesame type asS,containing allthesame elements.
>>>s1=set('aeiou')
>>>s2=s1
>>>s3=s1.copy()
>>>s1.add('y')
>>>s1
45 Python 2.7quick reference New Mexico Tech Computer Center
set(['a', 'e','i','o','u','y'])
>>>s2
set(['a', 'e','i','o','u','y'])
>>>s3
set(['a', 'i','e','u','o'])
S1.difference( S2)
Returns anew setofthesame type asS1,containing only those values found inS1butnotfound
inS2.TheS2argument may beasetorasequence.
>>>set('roygbiv').difference('rgb')
set(['i', 'o','v','y'])
S1-S2
Same asS1.difference( S2),except thatS2must beaset.
>>>set('roygbiv') -set('rgb')
set(['i', 'y','o','v'])
S1.intersection( S2)
Returns anew set,ofthesame type asS1,containing only theelements found both inS1andS2.
S2may beasetorasequence.
>>>set([1,2,3,5,7,11]).intersection(set([1,3,5,7,9]))
set([1, 3,5,7])
>>>set([1,3,5]).intersection( (2,4,6,8) )
set([])
S1&S2
Same asS1.intersection( S2),butS2must beaset.
S1.issubset( S2)
Predicate thattests whether every element ofS1isalsoinS2.S2may beasetorasequence.
>>>set([1,2]).issubset(set([2,4,1,8]))
True
>>>set([2,4,1,8]).issubset(set([1,2]))
False
>>>set(['r', 'g','b'])<=set(['r', 'o','y','g','b','i','v'])
True
S1<=S2
Same asS1.issubset( S2),butS2must beaset.
S1.issuperset( S2)
Predicate thattests whether every element ofS2isalsoinS1.S2may beasetorasequence.
>>>set([1,2]).issuperset(set([2,4,1,8]))
False
>>>set([2,4,1,8]).issuperset(set([1,2]))
True
S1>=S2
Same asS1.issuperset( S2).
New Mexico Tech Computer Center Python 2.7quick reference 46
S1.symmetric_difference( S2)
Returns anew setofthesame type asS1,containing only elements found inS1orS2,butnotfound
inboth. TheS2argument may beasetorasequence.
>>>set('aeiou').symmetric_difference('etaoin')
set(['n', 'u','t'])
S1^S2
Same asS1.symmetric_difference( S2),butS2must beaset.
S1.union( S2)
Returns anew set,with thesame type asS1,containing alltheelements found ineitherS1orS2.
TheS2argument may beasetorasequence.
>>>set([1,2]).union(set([1,3,7]))
set([1, 2,3,7])
>>>set([1,2]).union( (8,2,4,5) )
set([8, 1,2,4,5])
S1|S2
Same asS1.union( S2).
15.2. Opera tions onmutable sets
The operations described inthissection apply toset (mutable) values, butmay notbeused with
frozenset (immutable) values.
S.add(x)
Add element xtosetS.Duplicate elements willbeignored.
>>>pbr=set(['USA', 'Brazil', 'Canada'])
>>>pbr.add('Australia')
>>>pbr
set(['Brazil', 'Canada', 'Australia', 'USA'])
>>>pbr.add('USA')
>>>pbr
set(['Brazil', 'Canada', 'Australia', 'USA'])
S.clear()
Remove alltheelements from setS.
>>>pbr
set(['Brazil', 'USA'])
>>>pbr.clear()
>>>pbr
set([])
S.discard( x)
IfsetScontains element x,remove thatelement fromS.
IfxisnotinS,itisnotconsidered anerror; compare S.remove( x).
>>>pbr
set(['Brazil', 'Australia', 'USA'])
>>>pbr.discard('Swaziland')
47 Python 2.7quick reference New Mexico Tech Computer Center
>>>pbr
set(['Brazil', 'Australia', 'USA'])
>>>pbr.discard('Australia')
>>>pbr
set(['Brazil', 'USA'])
S1.difference_update( S2)
Modify setS1byremoving anyvalues found inS2.ValueS2may beasetorasequence.
>>>s1=set('roygbiv')
>>>s1.difference_update('rgb')
>>>s1
set(['i', 'o','v','y'])
S1-=S2
Same asS1.difference_update( S2),butS2must beaset.
S1.intersection_update( S2)
Modify setS1sothatitcontains only values found inbothS1andS2.
>>>s1=set('roygbiv')
>>>s1
set(['b', 'g','i','o','r','v','y'])
>>>s1.intersection_update('roy')
>>>s1
set(['y', 'r','o'])
S1&=S2
Same asS1.intersection_update( S2),butS2must beaset.
S.remove( x)
Ifelement xisinsetS,remove thatelement fromS.
Ifxisnotanelement ofS,thisoperation willraise aKeyError exception.
>>>pbr
set(['Brazil', 'Canada', 'Australia', 'USA'])
>>>pbr.remove('Canada')
>>>pbr
set(['Brazil', 'Australia', 'USA'])
>>>pbr.remove('Swaziland')
Traceback (mostrecentcalllast):
File"<stdin>", line1,in<module>
KeyError: 'Swaziland'
S1.symmetric_difference_update( S2)
Remove fromS1anyelements found inbothS1andS2.ValueS2may beasetorasequence.
>>>s1=set('abcd')
>>>s1.symmetric_difference_update('cdefg')
>>>s1
set(['a', 'b','e','g','f'])
S1^=S2
Same asS1.symmetric_difference_update( S2),butS2must beaset.
New Mexico Tech Computer Center Python 2.7quick reference 48
S1.update( S2)
Add toS1anyelements ofS2notfound inS1.TheS2argument may beasetorasequence.
>>>s1=set('rgb')
>>>s1
set(['r', 'b','g'])
>>>s1.update('roygbiv')
>>>s1
set(['b', 'g','i','o','r','v','y'])
S1|=S2
Same asS1.update( S2),butS2must beaset.
16.Typedict :Dictionaries
Python dictionaries areoneofitsmore powerful built-in types. They aregenerally used forlook-up
tables andmany similar applications.
APython dictionary represents asetofzero ormore ordered pairs(ki,vi)such that:
•Eachkivalue iscalled akey;
•each keyisunique andimmutable; and
•theassociated valuevicanbeofanytype.
Another term forthisstructure ismapping ,since itmaps thesetofkeys onto thesetofvalues (intheal-
gebraic sense).
Tocreate anew dictionary, usethisgeneral form:
{k0:v0,k1:v1,...}
There canbeanynumber ofkey-value pairs (including zero). Each key-value hastheform“ki:vi”,
andpairs areseparated bycommas. Here aresome examples ofdictionaries:
{}
{'Bolton': 'Notlob', 'Ipswich': 'Esher'}
{(1,1):48, (8,20): 52}
Forefficiency reasons, theorder ofthepairs inadictionary isarbitrary: itisessentially anunordered
setofordered pairs. Ifyoudisplay adictionary, thepairs may beshown inadifferent order than you
used when youcreated it.
>>>signals ={0:'red', 1:'yellow', 2:'green'}
>>>signals
{2:'green', 0:'red',1:'yellow'}
16.1. Opera tions ondictionaries
These operations areavailable onanydictionary objectD:
len(D)
Returns thenumber ofkey-value pairs inD.
49 Python 2.7quick reference New Mexico Tech Computer Center
D[k]
Ifdictionary Dhasakeywhose value isequal tok,thisoperation returns thecorresponding value
forthatkey. Ifthere isnomatching key, itraises aKeyError exception.
>>>signals ={0:'red',1:'yellow', 2:'green'}
>>>signals[2]
'green'
>>>signals[88]
Traceback (mostrecentcalllast):
File"<stdin>", line1,in<module>
KeyError: 88
D[k]=v
Ifdictionary Ddoes nothave akey-value pair whose keyequalsk,anew pair isadded with keyk
andvaluev.
IfDalready hasakey-value pair whose keyequalsk,thevalue ofthatpair isreplaced byv.
kinD
Apredicate thattests whether Dhasakeyequal tok.
>>>roster={1:'Pat', 2:'Ray', 3:'Min'}
>>>3inroster
True
>>>88inroster
False
knotinD
Apredicate thattests whether Ddoes nothave akeyequal tok.
>>>roster={1:'Pat', 2:'Ray', 3:'Min'}
>>>3notinroster
False
>>>88notinroster
True
delD[k]
InPython,del isastatement, notafunction; seeSection 22.3,“Thedel statement: Delete aname
orpart ofavalue” (p.94).
Ifdictionary Dhasakey-value pair whose keyequalsk,that key-value pair isdeleted fromD.If
there isnomatching key-value pair, thestatement willraise aKeyError exception.
>>>rgb={'red':'#ff0000', 'green':'#00ff00', 'blue':'#0000ff'}
>>>delrgb['red']
>>>rgb
{'blue': '#0000ff', 'green': '#00ff00'}
>>>delrgb['cerise']
Traceback (mostrecentcalllast):
File"<stdin>", line1,in<module>
KeyError: 'cerise'
D.get(k,x)
Ifdictionary Dhasakeyequal tox,itreturns thecorresponding value, thatis,itisthesame asthe
expression “D[x]”.
New Mexico Tech Computer Center Python 2.7quick reference 50
However, ifDhasnokey-value pair forkeyk,thismethod returns thedefault valuex.Thesecond
argument isoptional; ifomitted, andDhasnokeyequal tok,itreturnsNone .
>>>roster={1:'Pat', 2:'Ray', 3:'Min'}
>>>roster.get(2)
'Ray'
>>>v=roster.get(8)
>>>printv
None
>>>roster.get(2, 'Notfound')
'Ray'
>>>roster.get(8, 'Notfound')
'Notfound'
D.has_key( k)
Apredicate thatreturnsTrue ifDhasakeyk.
>>>signals ={0:'red',1:'yellow', 2:'green'}
>>>signals.has_key(1)
True
>>>signals.has_key(88)
False
D.items()
Returns thecontents ofdictionary Dasalistoftwo-element tuples(k,v),innoparticular order.
>>>signals ={0:'red',1:'yellow', 2:'green'}
>>>signals.items()
[(0,'red'), (1,'yellow'), (2,'green')]
D.iteritems()
Returns aniterator thatgenerates thevalues from dictionary Dasasequence oftwo-element tuples
(k,v).SeeSection 24.2,“Iterators: Values thatcanproduce asequence ofvalues” (p.110).
>>>roster={1:'Pat', 2:'Ray', 3:'Min'}
>>>rosterScan =roster.iteritems()
>>>forn,nameinrosterScan:
... print"{0:04d}: {1}".format(n, name)
...
0001:Pat
0002:Ray
0003:Min
D.iterkeys()
Returns aniterator that generates thekeys from dictionary D.SeeSection 24.2,“Iterators: Values
thatcanproduce asequence ofvalues” (p.110).
>>>roster={1:'Pat', 2:'Ray', 3:'Min'}
>>>nScan=roster.iterkeys()
>>>forninnScan:
... printn,
...
123
51 Python 2.7quick reference New Mexico Tech Computer Center
D.itervalues()
Returns aniterator thatgenerates thevalues from dictionary D.SeeSection 24.2,“Iterators: Values
thatcanproduce asequence ofvalues” (p.110).
>>>roster={1:'Pat', 2:'Ray', 3:'Min'}
>>>nameScan =roster.itervalues()
>>>fornameinnameScan:
... printname,
...
PatRayMin
D.keys()
Returns alistofthekeyvalues indictionary D,innoparticular order.
>>>signals ={0:'red',1:'yellow', 2:'green'}
>>>signals.keys()
[1,0,2]
D.popitem()
Returns anarbitrary entry from dictionary Dasa(key,value)tuple, andalsoremoves thatentry.
IfDisempty, raises aKeyError exception.
>>>roster={1:'Pat', 2:'Ray', 3:'Min'}
>>>roster.popitem()
(1,'Pat')
>>>roster
{2:'Ray',3:'Min'}
D.setdefault( k,x)
Ifdictionary Dhasakeyequal tok,thismethod returns thecorresponding valueD[k].
IfDhasnokeyequal tok,themethod returns thedefault valuex.However, unlike the.get()
method, italsocreates anew key-value pair(k,x)inD.
Aswith the.get() method, thesecond argument isoptional, anddefaults tothevalueNone .
D.values()
Returns alistofthevalues from key-value pairs indictionary D,innoparticular order. However,
ifyou callboth the.items() and.values() methods ofadictionary without changing that
dictionary's contents between those calls, Python guarantees that theordering ofthetwo results
willbethesame.
>>>signals ={0:'red',1:'yellow', 2:'green'}
>>>signals.values()
['yellow', 'red','green']
>>>signals.keys()
[1,0,2]
D.update( D2)
Merge thecontents ofdictionary D2into dictionary D.Foranykey-value pairs thathave thesame
keyinbothDandD2,thevalue forthatkeyinDafter thisoperation willbethevalue fromD2,not
thevalue fromD.
>>>roster={1:'Pat', 2:'Ray', 3:'Min'}
>>>newer={3:'Bev', 4:'Wes'}
>>>roster.update(newer)
New Mexico Tech Computer Center Python 2.7quick reference 52
>>>roster
{1:'Pat',4:'Wes',2:'Ray',3:'Bev'}
>>>newer
{3:'Bev',4:'Wes'}
16.2. Dictionary compr ehensions
New inPython 2.7aredictionary comprehensions: aconstruct that allows you tobuild adictionary
dynamically, somewhat likeSection 11.2,“List comprehensions” (p.38).Here isthegeneral form:
{ek:ev
forv1ins1
forv2ins2
...
ifc}
Aswith listcomprehensions, youprovide oneormorefor clauses andanoptionalifclause. Forall
possible combinations ofthevalues inthefor clauses thathave atrue value fortheifclause, twoex-
pressions ekandevareevaluated, andanew dictionary entry isadded with keyekandvalueev.
Here isanexample. TheWikipedia article onthegame ofScrabble16gives theScrabble score foreach
letter ofthealphabet.
What wewould likeisadictionary whose keys areletters, andeach related value isthescore. However,
theWikipedia article shows thescore values grouped byscore: the1'stogether, the2'stogether, andso
on.So,tomake iteasy tocheck thatwehave entered theright score values andletters, wecanusealist
oftuples, where thefirstelement ofeach tuple isthescore andthesecond element isastring ofallthe
letters with thatscore. Wecanthen convert thatlisttothedesired dictionary using adictionary compre-
hension.
>>>scrabbleTuples =[(1,"EAOINRTLSU"), (2,"DG"),(3,"BCMP"),
... (4,"FHVWY"), (5,"K"),(8,"JX"),(10,"QZ")]
>>>scrabbleMap ={letter: score
... forscore,letterList inscrabbleTuples
... forletterinletterList }
>>>scrabbleMap['A']
1
>>>scrabbleMap['Z']
10
Evaluating thesetcomprehension proceeds asfollows.
1.Inthefirstfor clause, thefirsttuple isunpacked, settingscore to1andletterList to"EAOIN-
RTLSU" .
2.Inthesecondfor clause,letter issetto"E".
3.Anew entry isadded tothedictionary, with key"E" andvalue 1.
4.Inthesecondfor clause,letter issetto"A".
5.Anew entry isadded with key"A" andvalue 1.
Execution proceeds inthismanner until alltheforclauses arecomplete. Then thenamescrabbleMap
isbound totheresulting dictionary.
16http://en.wikipedia.org/wiki/Scrabble_letter_distributions
53 Python 2.7quick reference New Mexico Tech Computer Center
17.Typefile :Input andoutput files
Toopen afile,usethisgeneral form:
f=open(name[,mode[,bufsize]]])
name
Thepath name ofthefiletobeopened, asastring.
mode
Anoptional string specifying what youplan todowith thefile.Ifomitted, youwillgetread access
tothefile.Ingeneral thevalue consists ofthree parts:
•General mode, oneof:
Read access. Thefilemust already exist. You willnotbeallowed towrite toit. r
Write access. Ifthere isnofilebythisname, anew onewillbecreated. w
Important
Ifthere isanexisting file,itwillbedeleted!
Append access. Ifthere isafilebythisname, your initial position willbeattheendofthefile,
andyouwillbeallowed towrite (and read). Ifthere isnofilebythisname, anew onewillbea
created. Onsome systems, allwrites toafilewith append mode areadded attheendofthe
file,regardless ofthecurrent fileposition.
•Ifyouplan tomodify thefile,append a“+”next.
Forexample, mode “r+”puts youatthebeginning ofanexisting fileandallows youtowrite to
thefileanywhere.
Mode “w+”isthesame as“w”:itdeletes anexisting fileifthere isany, then creates anewfileand
gives youwrite access.
Mode “a+”allows youtowrite new data attheendofanexisting file;ifnofilebythisname exists,
itwillcreate anew one.
•Ifyouarehandling binary data, asopposed tolines oftext, add“b”attheendofthemode string.
•Formodes beginning with'r',you may append acapital'U' torequest universal newline
treatment. This ishandy when youarereading files made onaplatform with different lineter-
mination conventions.
When reading lines from afileopened inthisway, anylineterminator ('\n' ,'\r' ,or'\r\n' )
willappear inthereturn value asthestandard'\n' .Also,files soopened willhave anattribute
named.newlines ;thisattribute willbeNone initially, butafter anylineterminators have been
read, itwillbeatuple containing allthedifferent lineterminator strings seen sofar.
bufsize
Buffer size: thisaffects when physical device writes aredone, compared towrite operations that
your program performs.
•Inmost cases youwillprobably want toomit thisargument. Thedefault istouselinebuffering
forterminal-type devices, orsome system default forother devices.
•Use0toforce unbuffered operation. This may beinefficient, butanyfilewrites areperformed
immediately.
New Mexico Tech Computer Center Python 2.7quick reference 54
•Use1forlinebuffering: output lines arewritten whenever youwrite alineterminator such as
'\n' .
•Uselarger values tospecify theactual sizeofthebuffer.
•Useanegative value torequest thesystem defaults.
Ifyouarereading textfiles, andyoudon't want toworry about thevariety oflinetermination protocols,
youmay useamode value of“U”for“universal lineterminator mode.” Inthismode, input lines may
beterminated with either carriage return ('\r' ),newline ('\n' ),orboth, butthelines youreceive will
always beterminated with asingle newline. (Exception: Ifthelastlineisunterminated, thestring you
getwillalsobeunterminated.)
There areanumber ofpotential error conditions. Formodes starting with“r”,thefilemust exist before
youopen it.Also, youmust have access according totheunderlying operating system. Forexample, in
Linux environments, you must have read access toread afile,and you must have write access to
modify ordelete afile.These sorts offailures willraise anIOError exception.
Afileisitsown iterator (see Section 24.2,“Iterators: Values that canproduce asequence ofval-
ues” (p.110)).Hence, ifyouhave afileinFile opened forreading, youcanuseafor loop thatlooks
likethistoiterate over thelines ofthefile:
forlineininFile:
...
Thevariableline willbesettoeach lineofthefileinturn. Thelineterminator character (ifany) will
bepresent inthatstring.
Other aspects offiles:
•Every openfilehasacurrent position .Initially, thiswill0Lifyouopened itforreading orwriting, or
thesizeofthefileifyouopened itwith append access. Each write orread operation moves thisposition
bytheamount read orwritten. You canalsoquery orsetthefileposition; seeSection 17.1,“Methods
onfile objects” (p.55).
•Files may useatechnique called buffering .Because physical access tosome storage media (such as
disk drives) takes arelatively long time, Python may employ astorage area called abuffer asaholding
area fordata being input oroutput.
Forexample, ifyouarewriting data toadiskfile,Python may keep thedata inthefile's buffer area
until thebuffer isfullandonly then actually write ittothephysical disk. There arevarious techniques
forcontrolling thisbehavior; seeSection 17.1,“Methods onfile objects” (p.55).
17.1. Methods onfile objects
Usethese methods onanopenfile instance F.
F.close()
ClosefileF.Any unwritten data inthebuffer willbeflushed. Nofurther operations willbeallowed
onthefileunless itisreopened with theopen() function.
F.flush()
Forbuffered files, youcanusethismethod tomake sure that alldata written tothefilehasbeen
physically transmitted tothestorage medium. Closing afilewillalsoflush thebuffers. Avoid using
thismethod unless youreally need it,asitmay make your program lessefficient.
F.isatty()
Apredicate thattests whether Fisaterminal; “tty” isanancient term thatoriginally meant “Tele-
type”, buthascome tomean anyterminal orsimulated terminal.
55 Python 2.7quick reference New Mexico Tech Computer Center
F.read(n)
Read thenextncharacters fromFandreturn them asastring.
Ifthere arefewer thanncharacters remaining after your current position, youwillgetallremaining
characters. Ifyouareattheendofthefile,youwillgetback anempty string ('').
Theargument isoptional. Ifomitted, youwillgettheentire remaining contents ofthefileasastring.
F.readline( maxlen)
Read thenext textlinefromFandreturn itasastring, including thelineterminator ifany.
Ifyouneed tolimit themaximum sizeofincoming lines, pass thatsizelimit astheoptional maxlen
argument. Thedefault istoreturn alineofanysize(subject tomemory limitations). Ifthelineexceeds
maxlen ,thefileposition willbeleftpointing tothefirstunread character ofthatline.
F.readlines()
Read allremaining lines fromFandreturn them asalistofstrings, including lineterminator char-
acters ifany.
F.seek(offset,whence)
Change thefile's current position. Thevalue ofwhence determines how theoffset value isused
tochange theposition:
•0:Settheposition tooffset bytes after thebeginning ofthefile.
•1:Move thecurrent position offset bytes toward theendofthefile.
•2:Move thecurrent position offset bytes relative totheendofthefile.
Forexample, forafilef,thisoperation would settheposition to4bytes before theendofthefile:
f.seek(-4, 2)
F.tell()
This method returns thecurrent fileposition relative tothebeginning asalong value.
>>>f=open('roundtable', 'w')
>>>f.write('Bedevere')
>>>f.tell()
8L
>>>f.seek(2L)
>>>f.tell()
2L
F.truncate([ pos])
Remove anycontents ofFpast position pos,which defaults tothecurrent position.
F.write( s)
Write thecontents ofstringstofileF.This operation will notadd terminator characters; ifyou
want newlines inyourfile,include them inthestrings.
F.writelines( S)
Forasequence Scontaining strings, write allthose strings toF.Nolineterminators willbeadded;
youmust provide them explicitly ifyouwant them.
18.None :Thespecial placeholder value
Python hasaunique value calledNone .This special null value canbeused asaplaceholder, ortosig-
nifythatsome value isunknown.
New Mexico Tech Computer Center Python 2.7quick reference 56
Inconversational mode, anyexpression that evaluates toNone isnotprinted. However, ifavalue of
None isconverted toastring, theresult isthestring'None' ;thismay happen, forexample, inaprint
statement.
>>>x=None
>>>x
>>>printx
None
ThevalueNone isreturned from anyfunction thatexecutes areturn statement with novalue, orany
function after itexecutes itslastlineifthatlastlineisnotareturn statement.
>>>defuseless():
... print"Useless!"
...
>>>useless()
Useless!
>>>z=useless()
Useless!
>>>z
>>>printz
None
>>>defboatAnchor():
... pass
...
>>>x=boatAnchor()
>>>x
>>>printx
None
19.Opera torsandexpressions
Python's operators areshown here from highest precedence tolowest, with aruled lineseparating
groups ofoperators with equal precedence:
Table 6.Python operator precedence
Parenthesized expression ortuple . (E)
List. [E,...]
Dictionary orset. {key:value,...}
Convert tostring representation. `...`
Attribute reference. x.attribute
Subscript orslice; seeSection 8.1,“Operations common toallthe
sequence types” (p.12).x[...]
Call function f. f(...)
xtotheypower. x**y
Negation. -x
Bitwise not(one's complement). ~x
Multiplication. x*y
57 Python 2.7quick reference New Mexico Tech Computer Center
Division. The“//”form discards thefraction from theresult. For
example, “13.9//5.0 ”returns thevalue2.0.x/y,x//y
Modulo (remainder ofx/y). x%y
Addition, concatenation. x+y
Subtraction. x-y
xshifted leftybits. x<<y
xshifted rightybits. x>>y
Bitwise and. x&y
Bitwise exclusive or. x^y
Bitwise or. x|y
Comparisons. These operators areallpredicates; seeSection 19.1,
“What isapredicate?” (p.58).x<y,x<=y,x>y,x>=y,x!=y,
x==y
Test formembership. xiny,xnotiny
Test foridentity. xisy,xisnoty
Boolean “not.” notx
Boolean “and.” xandy
Boolean “or.” xory
19.1. Whatisapredica te?
Weusetheterm predicate tomean anyPython function thattests some condition andreturns aBoolean
value.
Forexample,x<yisapredicate that tests whetherxislessthany.Forexample,5<500 returns
True ,while5>=500 returnsFalse .
19.2. Whatisaniterable?
Toiterate overasequence means tovisit each element ofthesequence, anddosome operation foreach
element.
InPython, wesaythatavalue isaniterable when your program caniterate over it.Inshort, aniterable
isavalue thatrepresents asequence ofonemore values.
Allinstances ofPython's sequence types areiterables. These types may bereferred toascontainer types :
aunicode string string isacontainer for32-bit characters, andlists andtuples aregeneral-purpose
containers thatcancontain anysequence.
One ofthemost common uses foraniterable isinafor statement, where youwant toperform some
operation onasequence ofvalues. Forexample, ifyou have atuple namedcelsiuses containing
Celsius temperatures, and you want toprint them with their Fahrenheit equivalents, and you have
written afunctioncToF() thatconverts Celsius toFahrenheit, thiscode does it:
>>>defcToF(c): returnc*9.0/5.0 +32.0
...
>>>celsiuses =(0,20,23.6,100)
>>>forcelsius incelsiuses:
... print"{0:.1f} C={1:.1f} F".format(celsius, cToF(celsius))
New Mexico Tech Computer Center Python 2.7quick reference 58
...
0.0C=32.0F
20.0C=68.0F
23.6C=74.5F
100.0C=212.0F
However, Python also supports mechanisms forlazy evaluation :apiece ofprogram thatactslikease-
quence, butproduces itscontained values oneatatime.
Keep inmind thattheabove code works exactly thesame ifcelsiuses isaniterator (seeSection 24.2,
“Iterators: Values thatcanproduce asequence ofvalues” (p.110)).Youmayfindmany uses foriterators
inyour programs. Forexample,celsiuses might beasystem thatgoes offandreads anactual ther-
mometer andreturns thereadings every tenseconds. Inthisapplication, thecode above doesn't care
wherecelsiuses gets thevalues, itcares only about how toconvert andprint them.
19.3. Duck typing, or:whatisaninterface?
When Iseeabird thatwalks likeaduck andswims likeaduck andquacks likeaduck,
Icallthatbird aduck.
—James Whitcomb Riley
Theterm duck typing comes from thisquote. Inprogramming terms, thismeans thattheimportant thing
about avalue iswhat itcando,notitstype. Astheexcellent Wikipedia article onduck typing17says,
“Simply stated: provided youcanperform thejob,wedon't care who your parents are.”
One common example ofduck typing isinthePython term“file-like object”. Ifyou open afilefor
reading using theopen() function, yougetback avalue oftypefile :
>>>inFile=open('input')
>>>type(inFile)
<type'file'>
Let's suppose thatyouwrite afunction callednumberIt() thattakes areadablefile asanargument
andprints thelines from afilepreceded byfive-digit linenumbers. Here's thefunction andanexample
ofitsuse:
>>>defnumberIt(f):
... forlineNo, lineinenumerate(f):
... print"{0:05d} {1}".format(lineNo, line.rstrip())
...
>>>numberIt(inFile)
00000Kant
00001Heidegger
00002Hume
Theway youhave written thenumberIt() function, itworks forfiles, butitalsoworks foranyiterable .
Thus, when youseethestatement thatsome Python feature works with a“file-like object,” thatmeans
that theobject must have aninterface likethat ofthefile type; Python doesn't care about thetype,
justtheoperations thatitsupports.
Inpractice, theenumerate() function works with anyiterable, soyour function willalso work with
anyiterable:
17http://en.wikipedia.org/wiki/Duck_typing
59 Python 2.7quick reference New Mexico Tech Computer Center
>>>numberIt(['Kant', 'Heidegger', 'Hume'])
00000Kant
00001Heidegger
00002Hume
SoinPython when wesaythatweexpect some value tohave aninterface ,wemean thatitmust provide
certain methods orfunctions, buttheactual type ofthevalue isimmaterial.
More formally, when wesaythatavalue supports theiterable interface ,thatvalue must provide either
ofthefollowing features:
•A.__getitem__() method asdescribed inSection 26.3.16, “__getitem__() :Getoneitem from
asequence ormapping” (p.133).
•A.__iter__() method asdescribed inSection 26.3.17, “__iter__() :Create aniterator” (p.133).
19.4. Whatisthelocale?
Inorder toaccommodate different character encodings, your system may have alocale setting that
specifies apreferred character set.
IntheUSA, most systems usetheASCII18encoding. Good application code should bewritten inaway
thatdoes notdepend onthisencoding todeal with cultural issues.
Forgeneral information onhandling locale issues, seethedocumentation forthelocale module19.
20.Basic functions
Python hasalotofbuilt-in functions. This section describes theones thatmost people usemost ofthe
time. Ifyou areinterested inexploring some ofthemore remote corners ofPython, seeSection 21,
“Advanced functions” (p.79).
20.1.abs() :Absolut evalue
Tofind theabsolute value ofanumberx:
abs(x)
Ifxisnegative, thefunction returns-x;otherwise itreturnsx.
For complex values, the function returns the magnitude, that is,the square root of
(x.real**2+ x.imag**2) .
>>>abs(-33)
33
>>>abs(33)
33
>>>abs(0)
0
>>>abs(complex(1,5))
5.0990195135927845
18http://en.wikipedia.org/wiki/ASCII19http://docs.python.org/library/locale.html
New Mexico Tech Computer Center Python 2.7quick reference 60
20.2.all() :Arealltheelements ofaniterable true?
Apredicate that tests whether alltheelements ofsome iterable areconsidered True .Ifanyelements
arenotalready typebool ,they areconverted toBoolean values using thebool() built-in function.
>>>all([True, 14,(88,99)])
True
>>>all([True, 14,(88,99), None])
False
20.3.any() :Areanyofthemembers ofaniterable true?
This function, applied tosome iterable ,isapredicate thattests whether anyoftheelements ofthatiterable
areTrue .Ifanyelement isnotalready typebool ,itisconverted toaBoolean value using thebool()
built-in function.
>>>noneTrue =(0,0.0,(),None)
>>>any(noneTrue)
False
>>>someTrue =(0,0.0,(88,),'penguin')
>>>any(someTrue)
True
20.4.bin() :Converttobinary
This function takes aninteger argument andreturns astring thatrepresents thatnumber inbinary (base
2)starting with'0b' .
>>>
bin(7)
'0b111'
>>>bin(257)
'0b100000001'
20.5.bool() :ConverttoBoolean
This function takes anyvaluexandconverts ittoaBoolean (true orfalse) value.
Forthelistofvalues that areconsidered True orFalse ,seeSection 7.3,“Typebool :Boolean truth
values” (p.10).Examples:
>>>bool(0)
False
>>>bool(0.0)
False
>>>bool(0L)
False
>>>bool(0j)
False
>>>bool('')
False
>>>bool([])
61 Python 2.7quick reference New Mexico Tech Computer Center
False
>>>bool(())
False
>>>bool({})
False
>>>bool(None)
False
>>>bool(1)
True
>>>bool(15.9)
True
>>>bool([0])
True
>>>bool((None,))
True
>>>bool({None: False})
True
20.6.bytearray() :Createabytearray
SeeSection 14,“Thebytearray type” (p.42).
20.7.chr() :Getthechara cterwith agivencode
Forarguments nintherange 0to255,thisfunction returns aone-character string containing thechar-
acter thathascoden.Compare Section 20.31, “ord() :Find thenumeric code foracharacter” (p.71).
>>>chr(65)
'A'
>>>chr(0)
'\x00'
20.8.cmp() :Comp aretwovalues
This function compares thevalues oftwoarguments xandy:
cmp(x,y)
Thereturn value is:
•Anegative number ifxislessthany.
•Zero ifxisequal toy.
•Apositive number ifxisgreater thany.
Thebuilt-incmp() function willtypically return only thevalues -1,0,or1.However, there areother
places thatexpect functions with thesame calling sequence, andthose functions may return other values.
Itisbest toobserve only thesign oftheresult.
>>>cmp(2,5)
-1
>>>cmp(5,5)
0
New Mexico Tech Computer Center Python 2.7quick reference 62
>>>cmp(5,2)
1
>>>cmp('aardvark', 'aardwolf')
-1
20.9.complex() :Converttocomplex type
Tocreate acomplex number from arealpartRandacomplex partI:
complex( R,I)
Both arguments areoptional.
•With twoarguments, both arguments must benumbers ofanynumeric type.
With onenumeric argument, itreturns acomplex number with realpartRandanimaginary part of
zero.
Toconvert acomplex number instring form, pass that string astheonly argument. Ifthestring is
notavalid complex number, thefunction raises aValueError exception.
•Ifcalled with noarguments, itreturns acomplex zero.
Examples:
>>>complex(-4.04, 3.173)
(-4.04+3.173j)
>>>complex(-4.04)
(-4.04+0j)
>>>complex()
0j
>>>c1=4+5j
>>>c2=6+7j
>>>complex(c1, c2)#Equals(4+5j)+(6+7j)j =4+5j+6j-7
(-3+11j)
>>>c1+c2*1.0j
(-3+11j)
20.10.dict() :Converttoadictionary
This function creates anew dictionary from itsarguments. Thegeneral form is:
dict(v,k0=v0,k1=v1,...)
That is,there may beoneoptional positional argument oranynumber ofkeyword arguments.
•Ifyousupply noarguments, yougetanew, empty dictionary.
•Ifonepositional argument issupplied, itmust beaiterable containing two-element iterables. Each
two-element iterable becomes onekey-value pair oftheresult.
>>>dict()
{}
>>>dict([(0,'stop'), (1,'go')])
{0:'stop', 1:'go'}
63 Python 2.7quick reference New Mexico Tech Computer Center
>>>dict((('y', 'boy'), ('x','girl')))
{'y':'boy','x':'girl'}
•Ifyousupply anykeyword arguments, each keyword becomes akeyintheresulting dictionary, and
thatargument's value becomes thecorresponding value ofthatkey-value pair.
>>>dict(bricks='sleep', keith='maniac', rj='gumby')
{'bricks': 'sleep', 'keith': 'maniac', 'rj':'gumby'}
20.11.divmod() :Quotient andremainder
divmod( x,y)
Sometimes youwant both thequotient andremainder when dividing xbyy.This function returns a
tuple(q,r),whereqisthequotient andristheremainder.
Ifeitherxoryisafloat ,thereturned valueqisthewhole part ofthequotient, andthereturned ris
computed asx-(r*d).
Examples:
>>>divmod(13, 5)
(2,3)
>>>divmod(1.6, 0.5)
(3.0,0.10000000000000009)
20.12.enumerate() :Stepthrough indic esandvalues ofaniterable
Given aniterableS,enumerate( S)produces aniterator that iterates over thepairs ofvalues(i,
S[i]),forihaving thevalues inrange(len( S)).Formore information oniterators, seeSection 24.2,
“Iterators: Values thatcanproduce asequence ofvalues” (p.110).
>>>L=['Ministry', 'of','Silly', 'Walks']
>>>forwhere,whatinenumerate(L):
... print"[{0}]{1}".format(where, what)
...
[0]Ministry
[1]of
[2]Silly
[3]Walks
Ifyouwould likethenumbers tostart atadifferent origin, pass thatorigin asthesecond argument to
theenumerate() function. You will stillgetalltheelements ofthesequence, butthenumbers will
start atthevalue youprovide. (Python 2.6andlater versions only.)
>>>forwhere,whatinenumerate(L, 1):
... print"[{0}]{1}".format(where, what)
...
[1]Ministry
[2]of
[3]Silly
[4]Walks
New Mexico Tech Computer Center Python 2.7quick reference 64
20.13.file() :Open afile
This function isidentical totheopen() function; fordetails, seeSection 17,“Typefile :Input and
output files” (p.54).
20.14.filter() :Extra ctqualifying elements fromaniterable
This function isuseful forremoving some oftheelements ofaniterable .You must provide afiltering
function thattakes oneargument andreturns abool value. Here isthecalling sequence:
filter( f,S)
Thefiltering function fisthefirstargument. Itisapplied toevery element ofsome iterableS.Theresult
isanew sequence containing only those elements xofSforwhichf(x)returnedTrue .
•Iffisastring ortuple, theresult hasthesame type, otherwise theresult isalist .
•IffisNone ,yougetasequence ofthetrueelements ofS.Inthiscase, thefiltering function iseffectively
thebool() function .
>>>defisOdd(x):
... if(x%2)==1:returnTrue
... else:returnFalse
...
>>>filter(isOdd, [88,43,65,-11,202])
[43,65,-11]
>>>filter(isOdd, (1,2,4,6,9,3,3))
(1,9,3,3)
>>>defisLetter(c):
... returnc.isalpha()
...
>>>filter(isLetter, "01234abcdeFGHIJ*(&!^")
'abcdeFGHIJ'
>>>maybes=[0,1,(),(2,),0.0,0.25]
>>>filter(None, maybes)
[1,(2,),0.25]
>>>filter(bool, maybes)
[1,(2,),0.25]
20.15.float() :Converttofloat type
Converts avalue totypefloat .Theargument must beanumber, orastring containing anumeric
value instring form (possibly surrounded bywhitespace). Iftheargument isnotavalid number, this
function willraise aValueError exception. Ifnoargument isgiven, itwillreturn 0.0.
>>>float()
0.0
>>>float(17)
17.0
>>>float(' 3.1415 ')
3.1415000000000002
>>>printfloat('6.0221418e23')
6.0221418e+23
>>>float('142x')
65 Python 2.7quick reference New Mexico Tech Computer Center
Traceback (mostrecentcalllast):
File"<stdin>", line1,in<module>
ValueError: invalid literal forfloat(): 142x
20.16.format() :Forma tavalue
This function converts avalue toaformatted representation. Thegeneral form is:
format( value[,spec])
•Forbuilt-in types, thespec hasthesyntax asthatdescribed inSection 9.4,“The string.format()
method” (p.23)between “:”andtheclosing “}”.
>>>x=34.56
>>>format(x, '9.4f')
'34.5600'
>>>'{0:9.4f}'.format(x)
'34.5600'
•You candefine how thisfunction works forauser-defined class bydefining thespecial method de-
scribed inSection 26.3.13, “__format__ :Implement theformat() function” (p.132).
•Ifthespec argument isomitted, theresult isthesame asstr(value).
20.17.frozenset() :Createafrozenset
This function isused tocreate anewfrozenset value: animmutable set.General form:
frozenset( S)
This function converts anexisting iterableStoafrozenset .Theargument isoptional; ifomitted, you
getafrozen empty set.
>>>frozenset()
frozenset([])
>>>frozenset('aeiou')
frozenset(['a', 'i','e','u','o'])
>>>frozenset([0, 0,0,44,0,44,18])
frozenset([0, 18,44])
Formore information, seeSection 15,“Typesset andfrozenset :Settypes” (p.43).
20.18.hex() :Converttobase16
Given aninteger, thisfunction returns astring displaying thatvalue inhexadecimal (base 16).
>>>hex(15)
'0xf'
>>>hex(255)
'0xff'
>>>hex(256)
'0x100'
>>>hex(1325178541275812780L)
'0x1263fadcb8b713ac'
New Mexico Tech Computer Center Python 2.7quick reference 66
SeealsoSection 9.4,“The string.format() method” (p.23):hexadecimal conversion issupported by
specifying atype code of'x' or'X'.
20.19.int() :Converttoint type
Toconvert anumber ofadifferent type toint type, ortoconvert astring ofcharacters thatrepresents
anumber:
int(ns)
wherensisthevalue tobeconverted. Ifnsisafloat ,thevalue will betruncated, discarding the
fraction.
Ifyouwant toconvert acharacter strings,expressed inaradix (base) other than 10,toanint,usethis
form, wherebisaninteger intherange [2,36]thatspecifies theradix.
int(s,b)
Examples:
>>>int(43L)
43
>>>int(True)
1
>>>int(False)
0
>>>int(43.89)
43
>>>int("69")
69
>>>int('77', 8)
63
>>>int('7ff', 16)
2047
>>>int('10101', 2)
21
20.20.input() :Readanexpression fromtheuser
This function asks theuser totype something, then evaluates itasaPython expression. Here isthe
general form:
input([ prompt])
Ifyousupply astring astheoptional prompt argument, thatstring willbewritten totheuser before
theinput isread.
Inanycase, theresult isthevalue oftheexpression. Ofcourse, iftheuser types something thatisn't a
valid Python expression, thefunction willraise anexception .
>>>input()
2+2
4
>>>print"Theanswerwas'{0}'.".format(input())
2+3*4
67 Python 2.7quick reference New Mexico Tech Computer Center
Theanswerwas'14'.
>>>print"Theanswerwas'{0}'.".format(input("Type anexpression:"))
Typeanexpression:2+3*4
Theanswerwas'14'.
>>>printinput()
1/0
Traceback (mostrecentcalllast):
File"<stdin>", line1,in<module>
File"<string>", line1,in<module>
ZeroDivisionError: integer division ormodulobyzero
20.21.iter() :Produc eaniteratoroverasequenc e
Given asequence S,thisfunction returns aniterator that generates theelements ofthesequence. For
more information, seeSection 24.2,“Iterators: Values thatcanproduce asequence ofvalues” (p.110).
>>>listWalker =iter([23,47,'hike'] )
>>>forxinlistWalker: printx,
...
2347hike
Ingeneral, thecalling sequence is:
iter(s[,sentinel ])
•Ifthesentinel argument isomitted, thefirstargument must beeither asequence value thatimple-
ments the.__getitem__() method oraninstance ofaclass thathasthe.__iter__() method .
•Ifyouprovide asentinel argument, thesargument must becallable. Theiterator returned will
calls()with noarguments andgenerate thevalues itreturns until thereturn value equalssentinel ,
atwhich point itwillraiseStopIteration .
20.22.len() :Number ofelements
Given asequence ordictionary, thisfunction returns thenumber ofelements.
>>>len('')
0
>>>len([23,47,'hike'] )
3
>>>len({1: 'foot', 2:'shoulder', 'feather': 'rare'})
3
20.23.list() :Converttoalist
This function creates anew list.Theargument xmay beanyiterable (seeSection 19.2,“What isaniter-
able?” (p.58)).
>>>list(('Bentham', 'Locke', 'Hobbes'))
['Bentham', 'Locke', 'Hobbes']
>>>list("Bruce")
['B','r','u','c','e']
New Mexico Tech Computer Center Python 2.7quick reference 68
>>>list((42,))
[42]
>>>list()
[]
20.24.long() :Converttolong type
This function works exactly thesame way asSection 20.19,“int() :Convert tointtype” (p.67),except
thatitproduces aresult oftypelong .
>>>long(43)
43L
>>>long(43.889)
43L
>>>long('12345678901234567890123457890')
12345678901234567890123457890L
>>>long('potrzebie456', 36)
3381314581245790842L
20.25.map() :Apply afunction toeachelement ofaniterable
Thepurpose ofthisfunction istoperform some operation oneach element ofaniterable .Itreturns a
listcontaining theresult ofthose operations. Here isthegeneral form:
map(f,S)
•fisafunction thattakes oneargument andreturns avalue.
•Sisanyiterable .
>>>defadd100(x):
... returnx+100
...
>>>map(add100, (44,22,66))
[144,122,166]
Toapply afunction with multiple arguments toasetofsequences, justprovide multiple iterables as
arguments, likethis.
>>>defabc(a,b,c):
... returna*10000 +b*100+c
...
>>>map(abc, (1,2,3),(4,5,6),(7,8,9))
[10407, 20508,30609]
IfyoupassNone asthefirstargument, Python uses theidentity function tobuild theresulting list.This
isuseful ifyouwant tobuild alistoftuples containing items from twoormore iterables.
>>>map(None, range(3))
[0,1,2]
>>>map(None, range(3), 'abc',[44,55,66])
[(0,'a',44),(1,'b',55),(2,'c',66)]
69 Python 2.7quick reference New Mexico Tech Computer Center
20.26.max() :Largest element ofaniterable
Given aniterableSthatcontains atleast oneelement,max(S)returns thelargest element ofthesequence.
>>>max('blimey')
'y'
>>>max([-505,-575,-144,-288])
-144
>>>max([])
Traceback (mostrecentcalllast):
File"<stdin>", line1,in<module>
ValueError: max()argisanemptysequence
You canalso pass multiple arguments, andmax() will return thelargest. Intheexample below,
'cheddar' isthelargest because lowercase letters have higher codes than uppercase letters.
>>>max('Gumby', 'Lambert', 'Sartre', 'cheddar')
'cheddar'
Ifyouwant toredefine thecomparison function, youmay provide akeyword argument key=f,where
fisafunction thattakes oneargument andreturns avalue suitable forcomparisons. Inthisexample,
weusethe.upper() method ofthestr class tocompare theuppercased strings, then return theori-
ginal string whose uppercased value islargest.
>>>max('Gumby', 'Lambert', 'Sartre', 'cheddar', key=str.upper)
'Sartre'
20.27.min() :Smallest element ofaniterable
Given aniterableScontaining atleast oneelement,max(S)returns thelargest element ofS.
>>>min('blimey')
'b'
>>>min([-505,-575,-144,-288])
-575
You may alsopass multiple arguments, andthemin() function willreturn thesmallest.
>>>min(-505, -575,-144,-288)
-575
Ifyouwould liketouseadifferent function todefine theordering, specify thatfunction asakeyword
argument key=f,wherefisafunction thattakes oneargument andreturns avalue suitable forcom-
parisons. Inthisexample, wewant toorder thevalues based ontheir inverse.
>>>defrev(x):
... return-x
...
>>>min(-505, -575,-144,-288,key=rev)
-144
New Mexico Tech Computer Center Python 2.7quick reference 70
20.28.next() :Callaniterator
This function attempts togetthenext value from some iteratorI(seeSection 24.2,“Iterators: Values
thatcanproduce asequence ofvalues” (p.110)).(New inversion 2.6.)
next(I[,default)
•Iftheiterator produces another value, thatvalue isreturned bythisfunction.
•Iftheiterator isexhausted andyouprovide adefault value, thatvalue isreturned.
•Iftheiterator isexhausted and you donotprovide adefault value, thenext() function raises a
StopIteration exception.
Here isanexample.
>>>it=iter(xrange(0,2))
>>>next(it, 'Done')
0
>>>next(it, 'Done')
1
>>>next(it, 'Done')
'Done'
>>>next(it)
Traceback (mostrecentcalllast):
File"<stdin>", line1,in<module>
StopIteration
20.29.oct() :Converttobase8
Given anumbern,oct(n)returns astring containing anoctal (base 8)representation ofn.Consistent
with Python's convention that anynumber starting with azero isconsidered octal, theresult ofthis
function willalways have aleading zero.
>>>oct(0)
'0'
>>>oct(127)
'0177'
SeealsoSection 9.4,“The string.format() method” (p.23):octal conversion issupported byspecifying
type code'o'.
20.30.open() :Open afile
Open afile.Forthecalling sequence, seeSection 17,“Typefile :Input andoutput files” (p.54).
20.31.ord() :Findthenumeric codeforachara cter
Given astringscontaining asingle character, ord(s)returns thatcharacter's numeric code. Compare
Section 20.7,“chr() :Getthecharacter with agiven code” (p.62).
>>>ord('A')
65
>>>ord('\x00')
0
71 Python 2.7quick reference New Mexico Tech Computer Center
>>>ord(u'\u262e')
9774
>>>hex(9774)
'0x262e'
20.32.pow() :Exponentia tion
There aretwoways tocompute xyinPython. You canwrite itas“x**y”.There isalsoafunction that
does thesame thing:
pow(x,y)
Forinteger arithmetic, thefunction alsohasathree-argument form thatcomputes xy%z,butmore effi-
ciently than ifyouused thatexpression:
pow(x,y,z)
Examples:
>>>2**4
16
>>>pow(2,4)
16
>>>pow(2.5, 4.5)
61.763235550163657
>>>(2**9)%3
2
>>>pow(2,9,3)
2
20.33.range() :Genera teanarithmetic progression asalist
This function generates alistcontaining thevalues ofanarithmetic progression, thatis,asequence of
numbers such thatthedifference between adjacent numbers isalways thesame. There arethree forms:
range(n)
Returns thelist[0,1,2,...,n-1].Note thattheresult never includes thevaluen.
range(start,stop)
Returns thelist[start,start+1,start+2,...,stop-1].Theresult never includes the
stop value.
range(start,stop,step)
Returns thelist[start,start+step,start+2*step,...] ,uptobutnotincluding the
value ofstop .Thevalue ofstep may benegative.
Examples:
>>>range(4)
[0,1,2,3]
>>>range(4,9)
[4,5,6,7,8]
>>>range(10,104,10)
[10,20,30,40,50,60,70,80,90,100]
New Mexico Tech Computer Center Python 2.7quick reference 72
>>>range(5,-1,-1)
[5,4,3,2,1,0]
20.34.raw_input() :Prompt andreadastring fromtheuser
Toprompt forkeyboard entry, usethisfunction:
raw_input( p)
Theargument pisaprompt string thatiswritten tostandard output. Then alineisread from standard
input andreturned asastring, without itstrailing newline character.
>>>party=raw_input('Party affiliation: ')
Partyaffiliation: Slightly silly.
>>>party
'Slightly silly.'
Iftheuser signals endofinput (e.g., with Control-Dunder Unix), thefunction raises anEOFError ex-
ception.
20.35.reduce() :Sequenc ereduction
Theidea ofreduction comes from theworld offunctional programming. There isagood introductory
article onthisconcept inWikipedia20.Insimple terms, afunction oftwoarguments isapplied repeatedly
totheelements ofaniterable tobuild upafinal value.
•The idea ofa“sum ofelements ofasequence” isareduction ofthose elements using “+”asthe
function. Forexample, the+-reduction of[2,3,5]is2+3+5 or10.
•Similarly, theproduct ofaseries ofnumbers isareduction using the“*”operator: themultiply re-
duction of[2,3,5]is2*3*5 or30.
There aretwogeneral forms:
reduce( f,S)
reduce( f,S,I)
•fisafunction thattakes twoarguments andreturns avalue.
•Sisaniterable .
Theresult depends onthenumber ofelements inS,andwhether theinitial valueIissupplied. Let's
lookfirstatthecase where argument Iisnotsupplied.
•IfShasonly oneelement, theresult isS[0].
•IfShastwoelements, theresult isf(S[0],S[1]) .
•IfShasthree elements, theresult isf(f(S[0],S[1]),S[2]) .
•IfShasfour ormore elements, fisapplied firsttoS[0] andS[1],then tothatresult andS[2],and
soonuntil allelements arereduced toasingle value.
•IfSisempty andnoinitial value wasprovided, thefunction raises aTypeError exception.
Ifaninitial valueIisprovided, theresult isthesame asreduce( f,[I]+list( S)).
20http://en.wikipedia.org/wiki/Fold_(higher-order_function)
73 Python 2.7quick reference New Mexico Tech Computer Center
Some examples:
>>>defx100y(x,y):
... returnx*100+y
...
>>>reduce(x100y, [15])
15
>>>reduce(x100y, [1,2])
102
>>>reduce(x100y, [1,2,3])
10203
>>>reduce(x100y, (),44)
44
>>>reduce(x100y, [1],2)
201
>>>reduce(x100y, [1,2],3)
30102
>>>reduce(x100y, [1,2,3], 4)
4010203
>>>reduce(x100y, [])
Traceback (mostrecentcalllast):
File"<stdin>", line1,in<module>
TypeError: reduce() ofemptysequence withnoinitial value
20.36.reversed() :Produc eareverse iterator
This function, applied toasequence S,returns aniterator that generates theelements ofSinreverse
order (seeSection 24.2,“Iterators: Values thatcanproduce asequence ofvalues” (p.110)).
>>>L=[22,44,88]
>>>backL=reversed(L)
>>>foriinbackL:
... printi,
...
884422
Theallowable values forSinclude allthetypes described inSection 8,“Sequence types” (p.11).Italso
works foranyclass provided oneofthese twoconditions ismet:
•The method described inSection 26.3.20, “__reversed__() :Implement thereversed() func-
tion” (p.134).
•Iftheclass hasno.__reversed__() method,reversed() willstillwork provided thatinstances
actlikeasequence; thatis,theclass hasa.__len__() method anda.__getitem__() method.
20.37.round() :Round tothenearestintegral value
Tofind theintegral value nearest tosome valuex,usethisfunction:
round(x)
Thevalue isreturned asafloat .Inthecase thatthefractional partofxisexactly one-half, thereturned
value istheinteger farther from zero. Examples:
New Mexico Tech Computer Center Python 2.7quick reference 74
>>>round(4.1)
4.0
>>>round(4.9)
5.0
>>>round(4.5)
5.0
>>>round(-4.1)
-4.0
>>>round(-4.9)
-5.0
>>>round(-4.5)
-5.0
You canalso provide anoptional second argument that specifies how many digits toretain after the
decimal.
>>>frommathimportpi
>>>round(pi)
3.0
>>>printround(pi,1)
3.1
>>>printround(pi,2)
3.14
>>>printround(pi, 4)
3.1416
>>>round(pi,30)
3.1415926535897931
20.38.set() :Createanalgebraic set
Usethisfunction tocreate aset value. Here isthegeneral form:
set(S)
Theoptional argument Sisanyiterable ;thereturn value isanewset instance containing theunique
values fromS.When called with noarguments, thisfunction returns anew, empty set.Examples:
>>>empty=set()
>>>empty
set([])
>>>len(empty)
0
>>>swallows=set(['African', 'European'])
>>>swallows
set(['European', 'African'])
>>>len(swallows)
2
>>>set((0,0,0,58,0,0,58,17))
set([0, 17,58])
Formore information about sets, seeSection 15,“Typesset andfrozenset :Settypes” (p.43).
75 Python 2.7quick reference New Mexico Tech Computer Center
20.39.sorted() :Sortasequenc e
This function, applied toanyiterableS,produces anew listcontaining theelements ofSinascending
order (orsome other order youspecify).
Here isthegeneral form:
sorted( S[,cmp[,key[,reverse]]])
Thecmp,key,andreverse arguments areoptional, andhave thesame meaning asinthe.sort()
method ofthelist type (seeSection 11.1,“Methods onlists” (p.35)).
>>>L=['geas', 'clue', 'Zoe','Ann']
>>>sorted(L)
['Ann', 'Zoe','clue', 'geas']
>>>defignoreCase(x,y):
... returncmp(x.upper(), y.upper())
...
>>>sorted(L, ignoreCase)
['Ann', 'clue', 'geas', 'Zoe']
>>>sorted(L, None,str.upper)
['Ann', 'clue', 'geas', 'Zoe']
>>>L
['geas', 'clue', 'Zoe','Ann']
Inthefirstexample above,'Zoe' precedes'clue' ,because alluppercase letters areconsidered tobe
lessthan alllowercase letters. Thesecond example shows theuseofacmp argument tosortstrings as
ifthey were alluppercase; thethird example shows how toachieve thesame result using the.upper()
method ofthestr class asthekey argument. Note inthelastlinethattheoriginal listLisunchanged.
20.40.str() :Converttostr type
Toconvert anyvaluextoastring, usethisgeneral form:
str(x)
Forexample:
>>>str(17)
'17'
>>>str({'boy': 'Relmond', 'girl': 'Wirdley'})
"{'boy': 'Relmond', 'girl': 'Wirdley'}"
Forgeneral information, seeSection 9,“Typestr:Strings of8-bit characters” (p.14).
20.41.sum() :Totaltheelements ofasequenc e
This function, applied toaniterableS,returns thesum ofitselements. There aretwogeneral forms:
sum(S)
sum(S,I)
Inthesecond form, thesumming process starts with theinitial valueI.Examples:
New Mexico Tech Computer Center Python 2.7quick reference 76
>>>L=[1,2,3,4]
>>>sum(L)
10
>>>sum(L,1000)
1010
>>>sum((), 1000)
1000
20.42.tuple() :Converttoatuple
Toconvert some iterableStoatuple, usethisgeneral form:
tuple(s)
Theresult willbeanew tuple with thesame elements asSinthesame order. Forgeneral information,
seeSection 12,“Typetuple :Immutable sequences” (p.39).
Tocreate anempty tuple, omit theargument. Examples:
>>>tuple()
()
>>>tuple(['swallow', 'coconut'] )
('swallow', 'coconut')
>>>tuple('shrubbery' )
('s','h','r','u','b','b','e','r','y')
>>>tuple(['singleton'] )
('singleton',)
20.43.type() :Return avalue's type
This function canbeapplied toanyvalue. Itreturns atype object corresponding tothetype ofthatvalue.
Forbuilt-in types, thetype object isthesame asthename ofthetype:int,str,list ,andsoon.To
testwhether avaluexissome typeT,youcanusethepredicate “type(x)isT”.
Ifyoudisplay atype object inconversational mode, itwilllook like“<type'T'>”.Examples:
>>>type(i)
<type'int'>
>>>type(i) isint
True
>>>type([2,4,8]) islist
True
20.44.unichr() :Convertanumeric codetoaUnicodechara cter
Given anumbern,thisfunction returns theUnicode character thathascode pointn.Formore onUnicode,
seeSection 10,“Typeunicode :Strings of32-bit characters” (p.32).
>>>unichr(0)
u'\x00'
>>>unichr(ord('A'))
u'A'
77 Python 2.7quick reference New Mexico Tech Computer Center
>>>unichr(0x3046)
u'\u3046'
>>>unichr(0xe0047)
u'\U000e0047'
20.45.unicode() :ConverttoaUnicodestring
Usethisfunction toconvert astring totypeunicode .Formore information about Unicode, seeSec-
tion 10,“Typeunicode :Strings of32-bit characters” (p.32).
>>>unicode('Pratt')
u'Pratt'
>>>unicode()
u''
20.46.xrange() :Arithmetic progression genera tor
Thexrange() function hasexactly thesame arguments astherange() function (seeSection 20.33,
“range() :Generate anarithmetic progression asalist” (p.72)).
Thedifference isthatxrange() isagenerator (seeSection 24.3,“Generators: Functions thatcanproduce
asequence ofvalues” (p.111)),whilerange() actually builds alistforitsresult. This means youcan
usexrange() insituations where youwant togenerate alarge series ofthevalues from anarithmetic
progression, butyoudon't have enough memory tobuild thatseries asalist.
>>>foriinxrange(2000000000):
... printi,
... ifi>8:
... break
...
0123456789
>>>foriinrange(2000000000):
... printi,
... ifi>8:
... break
...
Traceback (mostrecentcalllast):
File"<stdin>", line1,in<module>
MemoryError
20.47.zip() :Combine multiple sequenc es
Thepurpose ofthisfunction istobuild alistoftuples from twoormore iterables ofthesame length.
Here isthegeneral form:
zip(S0,S1,S2,...)
EachSimust beiniterable. Theresult isalist[T0,T1,...] ,where eachTiisthetuple(S0[i],
S1[i],S2[i],...) .
Here aresome examples.
New Mexico Tech Computer Center Python 2.7quick reference 78
>>>L1=[1,2,3,4]
>>>L2=['a', 'b','c','d']
>>>zip(L1, L2)
[(1,'a'),(2,'b'),(3,'c'),(4,'d')]
>>>L3=[10.0, 20.0,30.0,40.0]
>>>zip(L1, L2,L3)
[(1,'a',10.0),(2,'b',20.0),(3,'c',30.0),(4,'d',40.0)]
21.Advanc edfunctions
This section describes Python functions thatmost people willnever need. However, theadvanced Python
programmer mayfind some ofthem quite useful.
21.1.basestring :Thestring baseclass
Theclassbasestring istheparent class forthetwostring types,strandunicode .Itexists notbecause
youcancallit(you can't), butfortype testing. Totestwhether some valuesisaninstance ofeither type
ofstring, usethispredicate :
isinstance( s,basestring)
SeeSection 21.12, “isinstance() :Isavalue aninstance ofsome class ortype?” (p.84).
21.2.callable() :Isthisthing callable?
This predicate tests whether some valuexcanbecalled asafunction.
callable( x)
Class names canbecalled tocreate aninstance oftheclass. Instances canbecalled ifthey define a
.__call__() special method; seeSection 26.3.5, “__call__() :What todowhen someone calls an
instance” (p.130).
>>>defsomeFunction():
... pass
...
>>>callable(someFunction)
True
>>>callable(len)
True
>>>callable(int)
True
>>>callable(42)
False
21.3.classmethod() :Createaclass method
Thepurpose oftheclassmethod() function istoconvert amethod intoaclass method .Foradiscussion
ofthepurpose andusage ofclass methods, seeSection 26.5,“Class methods” (p.135).
There aretwoways todeclare aclass method within aclass:
79 Python 2.7quick reference New Mexico Tech Computer Center
•You canusethefunction decorator syntax todeclare thatclassmethod isadecorator foryour
method. Precede themethod definition with alinereading:
@classmethod
defmethodName (cls,...):
method body
•Insome older versions ofPython without thedecorator syntax, youcanstilldeclare aclass method
byplacing aline after themethod definition, atthesame indentation level asthemethod'sdef
statement, having thisform:
methodName =classmethod( methodName )
21.4.delattr() :Delet eanamed attribut e
Usethisfunction todelete anattribute namedAofsome instance I.Itdoes notreturn avalue. Here is
thegeneral form:
delattr( I,A)
Forexample, ifaninstanceseabiscuit hasarider attribute, thisstatement would delete thatattribute:
delattr(seabiscuit, 'rider')
Iftheinstance hasnosuch attribute, thisfunction willraise anAttributeError exception.
21.5.dir() :Displa yanamesp ace'snames
Thepurpose ofthedir() function istofind outwhat names aredefined inagiven namespace, and
return alistofthose names. Ifcalled without arguments, itreturns alistofthenames defined inthe
local namespace. This function canbevery handy forfinding outwhat items areinamodule orclass.
Certain special names arefound inmost orallnamespaces:
•__doc__ ispresent inevery namespace. InitiallyNone ,youcanstore documentation there.
•__name__ isthename ofthecurrent module (minus the.py extension). Inthetop-level script orin
conversational mode, thisname issettothestring'__main__' .
•__builtins__ isalistofthenames ofallbuilt-in functions andvariables.
Inthisexample sequence, we'll show youwhat isintheglobal namespace justafter starting upPython.
Then we'll import themath module anddisplay itsnames.
>>>dir()
['__builtins__', '__doc__', '__name__']
>>>x=5;forkTail='Tyrannus'
>>>dir()
['__builtins__', '__doc__', '__name__', 'forkTail', 'x']
>>>print__doc__
None
>>>print__name__
__main__
>>>importmath
>>>printmath.__name__
math
New Mexico Tech Computer Center Python 2.7quick reference 80
>>>dir(math)
['__doc__', '__file__', '__name__', 'acos', 'asin', 'atan', 'atan2', 'ceil'
,'cos','cosh', 'degrees', 'e','exp','fabs', 'floor', 'fmod', 'frexp',
'
hypot', 'ldexp', 'log','log10', 'modf', 'pi','pow','radians', 'sin','si
nh','sqrt', 'tan','tanh']
>>>printmath.__doc__
Thismoduleisalwaysavailable. Itprovides accesstothe
mathematical functions defined bytheCstandard.
>>>printmath.log10.__doc__
log10(x) ->thebase10logarithm ofx.
>>>print__builtins__
<module '__builtin__' (built-in)>
>>>fork,nameinenumerate(dir(__builtins__)):
... if(k%4)==3: print
... printname,
...
ArithmeticError AssertionError AttributeError
BaseException BufferError BytesWarning DeprecationWarning
EOFError Ellipsis EnvironmentError Exception
FalseFloatingPointError FutureWarning GeneratorExit
IOError ImportError ImportWarning IndentationError
IndexError KeyError KeyboardInterrupt LookupError
MemoryError NameError NoneNotImplemented
NotImplementedError OSError OverflowError PendingDeprecationWarning
ReferenceError RuntimeError RuntimeWarning StandardError
StopIteration SyntaxError SyntaxWarning SystemError
SystemExit TabError TrueTypeError
UnboundLocalError UnicodeDecodeError UnicodeEncodeError UnicodeError
UnicodeTranslateError UnicodeWarning UserWarning ValueError
Warning ZeroDivisionError ___debug__
__doc__ __import__ __name__ __package__
absallanyapply
basestring binboolbuffer
bytearray bytescallable chr
classmethod cmpcoercecompile
complex copyright credits delattr
dictdirdivmodenumerate
evalexecfile exitfile
filterfloatformatfrozenset
getattr globals hasattr hash
helphexidinput
intinternisinstance issubclass
iterlenlicense list
localslongmapmax
minnextobjectoct
openordpowprint
property quitrangeraw_input
reducereloadreprreversed
roundsetsetattr slice
sortedstaticmethod strsum
supertupletypeunichr
unicode varsxrangezip
81 Python 2.7quick reference New Mexico Tech Computer Center
21.6.eval() :Evalua teanexpression insourceform
This function evaluates aPython expression from astring. Example:
>>>cent=100
>>>eval('cent**3')
1000000
Ifyouwant toevaluate theexpression using different name environments, refer totheofficial document-
ation21.Forrelated features, seealsoSection 21.7,“execfile() :Execute aPython source file” (p.82)
andSection 22.4,“Theexec statement: Execute Python source code” (p.94).
21.7.execfile() :ExecuteaPython sourcefile
Toexecute asequence ofPython statements insomefileF,usethisfunction:
execfile( F)
Thefunction returnsNone .Foradditional features that allow you tocontrol theenvironment ofthe
executed statements, seetheofficial documentation22.
21.8.getattr() :Retrie veanattribut eofagivenname
Usethisfunction toretrieve anattribute ofaninstance I,where theattribute's name isastrings.
getattr( I,s[,default])
IfIhasnoattribute whose name matches s:
•Ifyousupplied theoptional default value, thatvalue isreturned.
•Ifyoudon't supply adefault value andthere isnosuch attribute inI,thisfunction willraise an
AttributeError exception.
Example:
>>>classC:
... def__init__(self, flavor):
... self.flavor =flavor
...
>>>c=C('garlicky')
>>>getattr(c, 'flavor')
'garlicky'
>>>getattr(c, 'aroma', 'bland')
'bland'
>>>getattr(c, 'aroma')
Traceback (mostrecentcalllast):
File"<stdin>", line1,in<module>
AttributeError: Cinstance hasnoattribute 'aroma'
21http://docs.python.org/library/functions.html22http://docs.python.org/library/functions.html
New Mexico Tech Computer Center Python 2.7quick reference 82
21.9.globals() :Dictionary ofglobalname bindings
This function takes noarguments andreturns adictionary thatrepresents thecurrent global namespace.
Thekeys ofthisdictionary areglobally defined names, andeach corresponding value isthevalue for
thatname. This example starts from afresh execution ofPython inconversational mode, sotheglobal
namespace hasonly thethree special names discussed inSection 21.5,“dir() :Display anamespace's
names” (p.80).
>>>globals()
{'__builtins__': <module '__builtin__' (built-in)>, '__name__': '__main_
_','__doc__': None}
>>>finch='Fleep'
>>>globals()
{'__builtins__': <module '__builtin__' (built-in)>, '__name__': '__main_
_','__doc__': None,'finch': 'Fleep'}
The special name__builtins__ isbound toamodule; name__name__ isbound tothestring
'__main__' ;and__doc__ isbound toNone .Note that defining anew name adds anentry tothe
result ofglobals() .
21.10.hasattr() :Does avalue haveanattribut eofagivenname?
This predicate tests toseeifsome instance Ihasanattribute whose name isgiven bysome strings:
hasattr( I,s)
Ifthisfunction returnsTrue ,youcanbesure thattheinstance hasanattribute nameds.However, if
itreturnsFalse ,attempts toaccess anattribute may stillsucceed, iftheclass provides dynamic attributes;
seeSection 26.3.14, “__getattr__() :Handle areference toanunknown attribute” (p.133).Example:
>>>classC:
... def__init__(self, disc):
... self.disk =disc
...
>>>c=C('five')
>>>hasattr(c, 'disk')
True
>>>hasattr(c, 'disc')
False
>>>hasattr(c, 'jukebox')
False
>>>c.jukebox ='Nine'
>>>hasattr(c, 'jukebox')
True
21.11.id() :Unique identifier
This function, given anyPython value, returns aninteger value thatuniquely identifies it.Inmost im-
plementations, itisthevalue's physical memory address.
>>>i=20
>>>id(i)
137727456
83 Python 2.7quick reference New Mexico Tech Computer Center
21.12.isinstance() :Isavalue aninstanc eofsome class ortype?
Usethispredicate totestwhether some instance Iisaninstance ofsome classC(oraninstance ofany
ancestor class from whichCinherits). Thegeneral form:
isinstance( I,C)
Thesecond argument may beaclass name, atype object, oratuple ofclass names andtype objects. If
atuple, thefunction willtesttheinstance against each oftheclass names ortype objects.
>>>classC1:
... pass
...
>>>classC2(C1):
... pass
...
>>>c2=C2()
>>>isinstance(c2,C2)
True
>>>isinstance(c2,C1)
True
>>>isinstance(c2,int)
False
>>>isinstance(1,type(55))
True
>>>isinstance(1, (int,float,long))
True
>>>isinstance('Ni', (int,float,long))
False
Amost useful built-in Python class isbasestring ,which istheancestor class ofbothstrandunicode
types. Itisintended forcases where youwant totestwhether something isastring butyoudon't care
whether itisstr orunicode .
>>>isinstance(42, str)
False
>>>isinstance('x', str)
True
>>>isinstance(u'x', str)
False
>>>isinstance('x', basestring)
True
>>>isinstance(u'x', basestring)
True
21.13.issubclass() :Isaclass asubclass ofsome other class?
Totestwhether some classC1isasubclass ofanother classC2,usethispredicate :
issubclass( C1,C2)
Examples:
New Mexico Tech Computer Center Python 2.7quick reference 84
>>>classPolygon:
... pass
...
>>>classSquare(Polygon):
... pass
...
>>>issubclass(Square, Polygon)
True
>>>issubclass(Polygon, Square)
False
>>>issubclass(Square, Square)
True
>>>issubclass(unicode, basestring)
True
>>>issubclass(str, basestring)
True
Formore information about thebuilt-inbasestring class, seeSection 21.12, “isinstance() :Isa
value aninstance ofsome class ortype?” (p.84).
21.14.locals() :Dictionary oflocal name bindings
This function returns adictionary containing thenames andvalues ofallvariables inthelocal namespace.
Anexample:
>>>deff(a,b=1):
... c=2
... printlocals()
...
>>>f(5)
{'a':5,'c':2,'b':1}
Forrelated functions, seeSection 21.5,“dir() :Display anamespace's names” (p.80)andSection 21.9,
“globals() :Dictionary ofglobal name bindings” (p.83).
21.15.property() :Createanaccess-c ontrolled attribut e
Thepurpose ofthisfunction istocreate aproperty ofaclass. Aproperty looks andactslikeanordinary
attribute, except thatyouprovide methods thatcontrol access totheattribute.
There arethree kinds ofattribute access: read, write, anddelete. When youcreate aproperty, youcan
provide anyorallofthree methods thathandle requests toread, write, ordelete thatattribute.
Here isthegeneral method foradding aproperty namedptoanew-style classC.
classC(...):
defR(self):
...readmethod...
defW(self,value):
...writemethod...
defD(self):
...delete method...
p=property( R,W,D,doc)
...
85 Python 2.7quick reference New Mexico Tech Computer Center
where:
•Risagetter method thattakes noarguments andreturns theeffective attribute value. Ifomitted, any
attempt toread thatattribute willraiseAttributeError .
•Wisasetter method thattakes oneargument andsetstheattribute tothatargument's value. Ifomitted,
anyattempt towrite thatattribute willraiseAttributeError .
•Disadeleter method thatdeletes theattribute. Ifomitted, anyattempt todelete thatattribute willraise
AttributeError .
•doc isadocumentation string thatdescribes theattribute. Ifomitted, defaults tothedocumentation
string oftheRmethod ifany, otherwise None .
Toretrieve aproperty's documentation, usethisform:
C.p.__doc__
whereCistheclass name andpistheproperty name.
Asanexample, here isasmall class thatdefines aproperty namedx:
classC(object):
def__init__(self):
self.__x=None
defgetx(self):
print"+++getx()"
returnself.__x
defsetx(self, v):
print"+++setx({0})".format(v)
self.__x =v
defdelx(self):
print"+++delx()"
delself.__x
x=property(getx, setx,delx,"Meproperty 'x'.")
Assuming thatclass isdefined, here isaconversational example.
>>>c=C()
>>>printc.x
+++getx()
None
>>>printC.x.__doc__
Meproperty 'x'.
>>>c.x=15
+++setx(15)
>>>c.x
+++getx()
15
>>>delc.x
+++delx()
>>>c.x
+++getx()
Traceback (mostrecentcalllast):
File"<stdin>", line1,in<module>
File"<stdin>", line6,ingetx
AttributeError: 'C'objecthasnoattribute '_C__x'
New Mexico Tech Computer Center Python 2.7quick reference 86
Starting with Python 2.6,thisfunction canalso beused asadecorator (see Section 24.4,“Decorat-
ors” (p.112)).Thedecorated method isused asthegetter method. Furthermore, thedecorated method
willitself have twodecorators namedsetter anddeleter ;youcanusethese decorators todefine
setter anddeleter methods.
Forexample, suppose youwant toprovide your class with aproperty namedstate ,andyoura getter
method returns aprivate attribute named._state .You could define itlikethis:
@property
defstate(self):
'''Theinternal stateproperty.'''
returnself._state
Inthisexample, notonly willthe.state() method bethegetter forthisproperty, butthedocument-
ation string'''Theinternal stateproperty.''' willbestored asthedocumentation string
fortheproperty.
Suppose further that you want towrite asetter method that checks tomake sure theargument isa
positive number lessthan orequal to2.Tousethebuilt-insetter method towrite your setter, give
thefunction thesame name astheproperty, anddecorate itwithP.setter wherePisthename ofthe
previously defined getter:
@state.setter
defstate(self, k):
ifnot(0<=k<=2):
raiseValueError("Must be0through 2inclusive!")
else:
self._state =k
Similarly, youcanwrite adeleter method bydecorating itwithP.deleter :
@state.deleter
defstate(self):
delself._state
21.16.reload() :Reloadamodule
This function reloads apreviously loaded module (assuming youloaded itwith thesyntax “import
moduleName ”.Itisintended forconversational use,where youhave edited thesource fileforamodule
andwant totestitwithout leaving Python andstarting itagain. General form:
reload( moduleName )
ThemoduleName istheactual name ofthemodule, notastring containing itsname. Forexample, if
youhave imported amodule likethis:
importparrot
youwould say“reload(parrot) ”,not“reload('parrot') ”.
21.17.repr() :Representa tion
Therepr function attempts toconvert anyvalue toastring. Unlike thestr() function, itattempts to
display thevalue inPython source form, thatis,inaform suitable forpassing toeval() (seeSection 21.6,
87 Python 2.7quick reference New Mexico Tech Computer Center
“eval() :Evaluate anexpression insource form” (p.82)).Itworks thesame asthe`...` operator.
Examples:
>>>s='Wensleydale'
>>>prints
Wensleydale
>>>printstr(s)
Wensleydale
>>>printrepr(s)
'Wensleydale'
>>>print`s`
'Wensleydale'
Tospecify thebehavior oftherepr() when itisapplied toaninstance ofauser-defined class, see
Section 26.3.19, “__repr__() :String representation” (p.134).
21.18.setattr() :Setanattribut e
This function istheinverse ofSection 21.8,“getattr() :Retrieve anattribute ofagiven name” (p.82):
itsetsthevalue ofsome attribute whose name isAfrom aninstance Itoanew valueV:
setattr( I,A,V)
Example:
>>>classC5:
... def__init__(self, x):
... self.x=x
...
>>>c=C5(14)
>>>c.x
14
>>>setattr(c, 'x',19)
>>>c.x
19
>>>setattr(c, 'violateEncapsulation', True)
>>>c.violateEncapsulation
True
Asthelastlines above show, youcanusethisfunction tocreate attributes thatdidn't even exist before.
However, thisisoften considered badstyle, asitviolates theprinciple ofencapsulation23.
21.19.slice() :Createasliceinstanc e
This function creates aninstance oftypeslice .Aslice instance Icanbeused toindex asequence S
inanexpression oftheformS[I].Here isthegeneral form:
slice(start,limit,step)
Theresult isaslice that isequivalent tostart:limit:step .UseNone togetthedefault value for
anyofthethree arguments.
Examples:
23http://en.wikipedia.org/wiki/Encapsulation_(object-oriented_programming)
New Mexico Tech Computer Center Python 2.7quick reference 88
>>>r=range(9)
>>>r
[0,1,2,3,4,5,6,7,8]
>>>r[::2]
[0,2,4,6,8]
>>>r[slice(None, None,2)]
[0,2,4,6,8]
>>>r[3:7]
[3,4,5,6]
>>>r[slice(3,7)]
[3,4,5,6]
>>>r[1::2]
[1,3,5,7]
>>>odds=slice(1, None,2)
>>>r[odds]
[1,3,5,7]
>>>'roygbiv'[odds]
'ogi'
21.20.staticmethod() :Createastaticmethod
Thepurpose ofthestaticmethod function istoconvert amethod intoastatic method .SeeSection 26.4,
“Static methods” (p.135)fordefinitions andusage.
Typically youwilldeclare astatic method using thedecorator syntax, likethis:
@staticmethod
defmethodName (...):
method body
Analternative istoplace alinelikethisafter themethod's definition (atthesame indentation level as
itsdef):
methodName =staticmethod( methodName )
21.21.super() :Super class
The purpose ofthisfunction istoretrieve thesuperclass ofagiven type orobject. Superclasses are
beyond thescope ofthisdocument; seetheonline documentation forbuilt-in functions24(scroll down).
21.22.vars() :Local variables
This function returns adictionary thatrepresents asymbol table: itskeys arevariable names, andeach
key's corresponding value isitsbound value. The official documentation warns you nottochange
anything inthisdictionary, orBadThings Will Happen.
There aretwoforms ofcall:
vars()
Returns thelocal symbol table.
24http://docs.python.org/library/functions.html
89 Python 2.7quick reference New Mexico Tech Computer Center
vars(ns)
Returns thesymbol table ofanamespace ns,where anamespace canbeamodule, aninstance, or
aclass.
Compare thesimilar functions Section 21.5,“dir() :Display anamespace's names” (p.80),Section 21.14,
“locals() :Dictionary oflocal name bindings” (p.85),andSection 21.9,“globals() :Dictionary of
global name bindings” (p.83).
22.Simple statements
Python statement types aredivided intotwogroups. Simple statements, thatareexecuted sequentially
anddonotaffect theflow ofcontrol, aredescribed first. Compound statements, which may affect the
sequence ofexecution, arediscussed inSection 23,“Compound statements” (p.98).
Here, foryour convenience, isatable ofallthePython statement types, andthesections where they are
described. Thefirst one, theassignment statement, does nothave aninitial keyword: anassignment
statement isastatement oftheform“variable =expression ”.
Section 22.1,“The assignment statement: name=expression ”(p.91). Assignment
Section 22.2,“Theassert statement: Verify preconditions” (p.94). assert
Section 23.2,“Thebreak statement: Exitafor orwhile loop” (p.100). break
Section 23.3,“Thecontinue statement: Jump tothenext cycle ofafororwhile ”(p.100). continue
Section 22.3,“Thedel statement: Delete aname orpart ofavalue” (p.94). del
Section 23.5,“Theifstatement: Conditional execution” (p.102)andSection 23.8,“The
try statement: Anticipate exceptions” (p.104).elif
Section 23.5,“Theifstatement: Conditional execution” (p.102). else
Section 23.8,“Thetry statement: Anticipate exceptions” (p.104). except
Section 22.4,“Theexec statement: Execute Python source code” (p.94). exec
Section 23.8,“Thetry statement: Anticipate exceptions” (p.104). finally
Section 23.4,“Thefor statement: Iteration over asequence” (p.101). for
Section 22.6,“Theimport statement: Useamodule” (p.96). from
Section 22.5,“Theglobal statement: Declare access toaglobal name” (p.95). global
Section 23.5,“Theifstatement: Conditional execution” (p.102). if
Section 22.6,“Theimport statement: Useamodule” (p.96). import
Section 22.7,“Thepass statement: Donothing” (p.97). pass
Section 22.8,“Theprint statement: Display output values” (p.97). print
Section 23.6,“Theraise statement: Cause anexception” (p.103). raise
Section 23.7,“Thereturn statement: Exitafunction ormethod” (p.104). return
Section 23.8,“Thetry statement: Anticipate exceptions” (p.104). try
Section 23.10, “Theyield statement: Generate oneresult from agenerator” (p.107). yield
New Mexico Tech Computer Center Python 2.7quick reference 90
22.1. Theassignment statement:name=expression
Thepurpose ofPython's assignment statement istoassociate names with values inyour program. Itis
theonly statement thatdoes notstart with akeyword. Anassignment statement isalinecontaining at
least onesingle equal sign (=)thatisnotinside parentheses.
Here isthegeneral form ofanassignment statement:
target0=target1=...=expression
Inmost cases, there willbeonetarget thatisaname. Python willevaluate theexpression ,reducing
ittoasingle value, andthen bind thatname tothethatvalue.
Abinding isanassociation between aname andavalue. Itisimportant tonote thatinPython, unlike
many other languages, names themselves arenotassociated with aspecific type. Aname isjustalabel,
anditcanbebound toanyvalue ofanytype atanytime. Inthisexample, namexisbound first toan
int value 5,then toastr value'Somestring' .
>>>x=5
>>>x
5
>>>x='Somestring'
>>>printx
Somestring
Ifatarget name wasalready bound toavalue, thename isunbound from thatvalue before itisrebound
tothenew value. Foreach value inarunning program, Python keeps track ofhow many names are
bound tothatvalue. When thevalue hasnomore names bound toit,thevalue's memory isautomatically
recycled. Ifthevalue isaninstance ofaclass, itsdestructor may becalled; seeSection 26.3.8, “__del__() :
Destructor” (p.131).
There areseveral other forms ofassignment statement.
n0=n1=...=expression
Ifyou supply multiple target names, each target will beassigned thevalue oftheexpression .
Example:
>>>i=j=errorCount =0
>>>i
0
>>>j
0
>>>errorCount
0
n0,n1,...=expression
Ifthetarget isacomma-separated listofnames, theexpression must evaluate toaniterable with
thesame number ofvalues asthere arenames. Each value intheexpression isthen bound tothe
corresponding name. Example:
>>>L=["Bell's Blue","male", 6]
>>>name,sex,age=L
>>>name
"Bell's Blue"
>>>sex
'male'
91 Python 2.7quick reference New Mexico Tech Computer Center
>>>age
6
This feature, called “unpacking,” generalizes toarbritrarily nested sequences within sequences.
You may group targets inside parentheses (...) orbrackets[...] toshow thelevels ofnesting.
Here isanexample:
>>>s=[1,[2,3,[4,5],6],7]
>>>a,(b,c,[d,e],f),g=s
>>>printa,b,c,d,e,f,g
1234567
Alltheassignments areeffectively simultaneous. Therefore, youcansafely exchange thevalues of
twovariables using astatement likethis:
v1,v2=v2,v1
Examples:
>>>a=5;b=9998
>>>printa,b
59998
>>>a,b=b,a
>>>printa,b
99985
>>>c=432
>>>a,b,c=b,c,a
>>>printa,b,c
54329998
name[i]=expression
Ifname isaniterable ,theexpression imust evaluate toaninteger. Theelement after position iis
replaced bythevalue oftheexpression .
>>>L=range(6)
>>>L
[0,1,2,3,4,5]
>>>L[2]
2
>>>L[2]=888
>>>L
[0,1,888,3,4,5]
Ifname isadictionary (orother mapping), andname does nothave akey-value pair whose key
equalsindex ,anew key-value pair isadded toname with keyiandvalueexpression .
>>>d={'pudding': 'figgy'}
>>>d
{'pudding': 'figgy'}
>>>d['tart'] ='strawberry'
>>>d
{'pudding': 'figgy', 'tart': 'strawberry'}
>>>d["tart"] ="rat"
>>>d
{'pudding': 'figgy', 'tart': 'rat'}
New Mexico Tech Computer Center Python 2.7quick reference 92
Asthelasttwolines show, ifthedictionary already hasakey-value pair forkeyi,theoldvalue of
thatpair isreplaced bytheexpression value.
name[start:end]=S
Ifname isalistorother mutable sequence, youcanreplace theelements ofaslice ofthatsequence
with theelements from some sequence S.(Foranexplanation ofslicing, seeSection 8.1,“Operations
common toallthesequence types” (p.12).)This may result inaddition, deletion, orreplacement
oftheelements ofname .Some examples willgive theflavor ofthiskind ofassignment.
>>>L=range(6)
>>>L
[0,1,2,3,4,5]
>>>L[2:4]
[2,3]
>>>L[2:4]=[111,222,333,444,555]
>>>L
[0,1,111,222,333,444,555,4,5]
>>>L[3]
222
>>>L[3:3]
[]
>>>L[3:3] =[41.0,42.0,43.0]
>>>L
[0,1,111,41.0,42.0,43.0,222,333,444,555,4,5]
>>>L[4:7]
[42.0,43.0,222]
>>>L[4:7]=()
>>>L
[0,1,111,41.0,333,444,555,4,5]
Note
The“=”signs inanassignment isnotanoperator, asitisinsome other languages. You cannot assign
avalue toaname inside anexpression; anassignment statement must stand alone.
>>>a=5+(a=7)
File"<stdin>", line1
a=5+(a=7)
^
SyntaxError: invalid syntax
Python alsosupports augmented assignment .Inthisform, youmay place certain operators before the“=”.
Here isthegeneral form:
nameoperator =expression
Anassignment ofthisgeneral form hasthesame semantics asthisform:
name=nameoperator expression
Supported operator symbols include:
+-*/%**>><<&^|
93 Python 2.7quick reference New Mexico Tech Computer Center
Examples:
>>>i=1
>>>i+=3
>>>i
4
>>>i*=5
>>>i
20
22.2. Theassert statement: Verify preconditions
Tocheck for“shouldn't happen” errors, youcanuseanassert statement:
assert e1
assert e1,e2
wheree1issome condition thatshould betrue. Ifthecondition isfalse, Python raises anAssertion-
Error exception (seeSection 25,“Exceptions: Error signaling andhandling” (p.113)).
Ifasecond expression e2isprovided, thevalue ofthatexpression ispassed with theexception.
Assertion checking canbedisabled byrunning Python with the-O(optimize) option.
22.3. Thedel statement: Delet eaname orpartofavalue
Thepurpose ofthedel statement istodelete things. Thegeneral form is:
delL0,L1,...
where eachLiisanitem tobedeleted. You candelete:
•Aname. Forexample, thestatement
deli,j
causes namesiandjtobecome unbound ,thatis,undefined.
•Anelement orslice from alist.Forexample:
delL[5],M[-2:]
would delete thesixth element oflistLandthelasttwoelements oflistM.
•One entry inadictionary. Forexample, ifDisadictionary,
delD['color']
would delete fromDtheentry forkey'color' .
22.4. Theexec statement: ExecutePython sourcecode
Todynamically execute Python code, useastatement ofthisform:
execE0[inE1[,E2]]
New Mexico Tech Computer Center Python 2.7quick reference 94
Expression E0specifies what toexecute, andmay beastring containing Python source code, anopen
file,oracode object. IfE1isomitted, thecode isexecuted inthelocal scope. IfE1isgiven butE2isnot,
E1isadictionary used todefine thenames intheglobal andlocal scopes. IfE2isgiven,E1isadictionary
defining theglobal scope, andE2isadictionary defining thelocal scope.
22.5. Theglobal statement: Declar eaccesstoaglobalname
Thepurpose oftheglobal statement istodeclare that afunction ormethod intends tochange the
value ofaname from theglobal scope, thatis,aname from outside thefunction.
When Python reads thedefinition ofafunction, itchecks each name toseeifthat name's value may
possibly bechanged anywhere inthefunction—that is,ifthename shows upontheleftside ofanas-
signment statement, orastheinduction variable inaforloop, orinanyother context where thename's
value canbechanged.
Such names areassumed tobelocal tothefunction unless youoverride thisbehavior bydeclaring that
name inaglobal statement. Here isthegeneral form:
global name1,name2,...
Some conversational examples may help make thisclear. Suppose youdefine aglobal variablex;you
canusethatname inside afunction.
>>>x=5
>>>defshow1():
... printx
...
>>>show1()
5
However, ifyouassign avalue toxinside thefunction, thenamexisnow local tothefunction. Itis
said toshadow theglobal variable with thesame name, andanychanges tothevalue associated with
that name inside thefunction willoperate onalocal copy, andwillnotaffect thevalue oftheglobal
variablex.
>>>x=5
>>>defshow2():
... x=42
... printx
...
>>>show2()
42
>>>x
5
Butifyouactually dowant tochange thevalue oftheglobal variable inside thefunction, justdeclare
itglobal likethis:
>>>x=5
>>>defshow3():
... globalx
... x=42
... printx
...
>>>show3()
95 Python 2.7quick reference New Mexico Tech Computer Center
42
>>>x
42
Notice what happens inthiscase:
>>>x=5
>>>defshow4():
... printx,"Before"
... x=42
... printx,"After"
...
>>>show4()
Traceback (mostrecentcalllast):
File"<stdin>", line1,in<module>
File"<stdin>", line2,inshow4
UnboundLocalError: localvariable 'x'referenced beforeassignment
Because theline“x=42”changes thevalue ofx,andbecause itisnotdeclared asaglobal, execution
fails because thevalue ofthelocal variablexisused before thatvariable hashadavalue assigned toit.
22.6. Theimport statement: Useamodule
One ofthecornerstones ofPython's design philosophy istokeep thelanguage relatively small andwell-
defined, andmove allnon-essential functionality tolibrary modules. Theimport andfrom statements
allow your programs touseitems from these library modules.
•Your Python installation willcome with alarge collection ofreleased modules.
•You canalso create your own modules. Justplace Python statements defining variables, functions,
andclasses intoafilewhose name ends in“.py”.
There aretwodifferent statements youcanusetoimport items from amodule:
•Thefrom statement copies items from amodule into your namespace. After importing anitem in
thisway, youcanrefer totheitem simply byitsname.
General forms:
frommoduleName import*
frommoduleName import name1,name2,...
Thefirstform imports alltheitems from themodule namedmoduleName .Ifyouwant toimport only
specific items, usethesecond form, andenumerate thenames youwant from thatmodule.
•Theimport statement makes anentire module's content available toyouasaseparate namespace.
Torefer tosome item namedNinamodule namedM,usethedotnotation, M.N.
Here isthegeneral form:
import moduleName ,...
Ifyouwant tousesome moduleMinthisway, butyouwant tochange thename tosome different
nameA,usethisform:
import MasA
New Mexico Tech Computer Center Python 2.7quick reference 96
Here aresome examples thatusethestandardmath module thatisalways available inaproper Python
install. This module hasfunctions such assqrt() (square root), aswell asvariables such aspi.(Although
πisaconstant inthemathematical sense, thenamepiisavariable inthePython sense.)
>>>frommathimport*
>>>sqrt(16)
4.0
>>>pi
3.1415926535897931
Ifyouwanted only thesqrt function andthevariablepi,thisstatement would dothejob:
frommathimportsqrt,pi
Now some examples ofthesecond form.
>>>importmath
>>>math.sqrt(25)
5.0
>>>math.pi
3.1415926535897931
Suppose your program already used thenamemath forsomething else, butyoustillwant tousefunctions
from themath module. You canimport itunder adifferent name likethis:
>>>importmathascrunch
>>>crunch.sqrt(25)
5.0
>>>crunch.pi
3.1415926535897931
22.7. Thepass statement: Donothing
Python'spass statement isaplaceholder. Itdoes nothing.
Here's anexample. Suppose youhave afunction namedarr() thatdoes something andthen returns
aTrue orFalse value. You want tokeep calling thisfunction until itreturns afalse value. This code
would suffice:
whilearr():
pass
22.8. Theprint statement: Displa youtput values
Usethisstatement todisplay values onthestandard output stream. General form:
printthing1,thing2,...[,]
Eachthing must beastring, oravalue thatcanbeconverted intoastring bythestr() function (see
Section 20.40, “str() :Convert tostr type” (p.76)).These strings arewritten tothestandard output
stream, with onespace between each value. Aprint statement byitself prints anempty line.
>>>print4.3,'SirRobin', 1./7
4.3SirRobin0.142857142857
>>>foriinrange(4):
97 Python 2.7quick reference New Mexico Tech Computer Center
... printi**4,
...
011681
>>>
Normally, anewline isprinted after thelastvalue. However, youcansuppress thisbehavior byappending
acomma totheendofthelist.Forexample, thisstatement:
print'Stateyourname:',
would print thestring followed byonespace andleave thecursor attheendofthatline.
22.9. Theprint() function
InPython 3,print isafunction, notastatement. Tomake iteasier toconvert your programs tothe
new syntax, firstusethisimport statement (introduced inPython 2.6):
from__future__ importprint_function
Here istheinterface tothisfunction:
print(*args, sep='',end='\n', file=None)
args
One ormore positional arguments whose values aretobeprinted.
sep
Bydefault, consecutive values areseparated byonespace. You may specify adifferent separator
string using thiskeyword argument.
end
Bydefault, anewline ("\n" )iswritten after thelastvalue inargs .You may usethiskeywoard
argument tospecify adifferent lineterminator, ornoterminator atall.
file
Output normally goes tothestandard output stream (sys.stdout ).Todivert theoutput toanother
writeable file,usethiskeyword argument.
Here's anexample. Suppose you arewriting three strings namedclan ,moiety ,anddistro toa
writeable filenamedspreader ,andyouwant toseparate thefields with tab("\t" )characters, and
useASCII25CR,Carriage Return ("\r" ),asthelineterminator. Your calltotheprint() function
would gosomething likethis:
print(clan, moiety, distro, file=spreader, end='\r', sep='\t')
23.Compound statements
Thestatements inthissection alter thenormal sequential execution ofaprogram. They cancause a
statement tobeexecuted only under certain circumstances, orexecute itrepeatedly.
25http://en.wikipedia.org/wiki/ASCII
New Mexico Tech Computer Center Python 2.7quick reference 98
23.1. Python's block structur e
One unusual feature ofPython istheway thattheindentation ofyour source program organizes itinto
blocks within blocks within blocks. This iscontrary totheway languages likeCandPerlorganize code
blocks byenclosing them indelimiters such asbraces{...}.
Various Python branching statements likeifandfor control theexecution ofblocks oflines.
•Atthevery toplevel ofyour program, allstatements must beunindented—they must start incolumn
one.
•Various Python branching statements likeifandforcontrol theexecution ofoneormore subsidiary
blocks oflines.
•Ablock isdefined asagroup ofadjacent lines thatareindented thesame amount, butindented further
than thecontrolling line. Theamount ofindentation ofablock isnotcritical.
•You canuseeither spaces ortabcharacters forindentation. However, mixing thetwoisperverse and
canmake your program hard tomaintain. Tabstops areassumed tobeevery eight columns.
Blocks within blocks aresimply indented further. Here isanexample ofsome nested blocks:
ifi<0:
print"iisnegative"
else:
print"iisnonnegative"
ifi<10:
print"ihasonedigit"
else:
print"ihasmultiple digits"
Ifyouprefer amore horizontal style, youcanalways place statements after thecolon (:)ofacompound
statement, and you canplace multiple statements onalinebyseparating them with semicolons (;).
Example:
>>>if2>1:print"Mathstillworks"; print"Yay!"
...else:print"Huh?"
...
Mathstillworks
Yay!
You can't mixtheblock style with thehorizontal style: theconsequence ofaniforelse must either
beonthesame lineorinablock, never both.
>>>if1:print"True"
... print"Unexpected indenterrorhere."
File"<stdin>", line2
print"Unexpected indenterrorhere."
^
IndentationError: unexpected indent
>>>
99 Python 2.7quick reference New Mexico Tech Computer Center
23.2. Thebreak statement: Exitafor orwhile loop
Thepurpose ofthisstatement istojump outofafor orwhile loop before theloop would terminate
otherwise. Control istransferred tothestatement after thelastlineoftheloop. Thestatement looks like
this:
break
Here's anexample.
>>>foriin[1,71,13,2,81,15]:
... printi,
... if(i%2)==0:
... break
...
171132
Normally thisloop would beexecuted sixtimes, once foreach value inthelist,butthebreak statement
gets executed wheniissettoaneven value.
23.3. Thecontinue statement: Jump tothenext cycleofafor orwhile
Useacontinue statement inside afor orwhile loop when youwant tojump directly back tothe
topoftheloop andgoaround again.
•Ifused inside awhile loop, theloop's condition expression isevaluated again. Ifthecondition is
False ,theloop isterminated; ifthecondition isTrue ,theloop isexecuted again.
•Inside afor loop, acontinue statement goes back tothetopoftheloop. Ifthere areanyvalues re-
maining intheiterable thatcontrols theloop, theloop variable issettothenext value intheiterable,
andtheloop body isentered.
Ifthecontinue isexecuted during thelastpass through theloop, control goes tothestatement after
theendoftheloop.
Examples:
>>>i=0
>>>whilei<10:
... printi,
... i+=1
... if(i%3)!=0:
... continue
... print"num",
...
012num345num678num9
>>>foriinrange(10):
... printi,
... if(i%4)!=0:
... continue
... print"whee",
...
0whee1234whee5678whee9
New Mexico Tech Computer Center Python 2.7quick reference 100
23.4. Thefor statement: Iterationoverasequenc e
Use afor statement toexecute ablock ofstatements repeatedly. Here isthegeneral form. (For the
definition ofablock, seeSection 23.1,“Python's block structure” (p.99).)
forVinS:
B
•Visavariable called theinduction variable .
•Sisanyiterable; seeSection 19.2,“What isaniterable?” (p.58).
This iterable iscalled thecontrolling iterable oftheloop.
•Bisablock ofstatements.
Theblock isexecuted once foreach value inS.During each execution oftheblock,Vissettothecorres-
ponding value ofSinturn. Example:
>>>forcolorin['black', 'blue', 'transparent']:
... printcolor
...
black
blue
transparent
Ingeneral, youcanuseanynumber ofinduction variables. Inthiscase, themembers ofthecontrolling
iterable must themselves beiterables, which areunpacked intotheinduction variables inthesame way
assequence unpacking asdescribed inSection 22.1,“The assignment statement: name=expres-
sion”(p.91).Here isanexample.
>>>fourDays =(('First', 1,'orangutan librarian'),
... ('Second', 5,'loaves ofdwarfbread'),
... ('Third', 3,'driedfrogpills'),
... ('Fourth', 2,'sentient luggages') )
>>>forday,number, iteminfourDays:
... print("Onthe{1}dayofHogswatch, mytruelovegave"
... "tome".format(day) )
... print"{0}{1}".format(number, item)
...
OntheFirstdayofHogswatch, mytruelovegavetome
1orangutan librarian
OntheSeconddayofHogswatch, mytruelovegavetome
5loavesofdwarfbread
OntheThirddayofHogswatch, mytruelovegavetome
3driedfrogpills
OntheFourthdayofHogswatch, mytruelovegavetome
2sentient luggages
You canchange theinduction variable inside theloop, butduring thenext pass through theloop, itwill
besettothenext element ofthecontrolling iterable normally. Modifying thecontrolling iterable itself
won't change anything; Python makes acopy ofitbefore starting theloop.
>>>foriinrange(4):
... print"Before:", i,
... i+=1000
101 Python 2.7quick reference New Mexico Tech Computer Center
... print"After:", i
...
Before: 0After:1000
Before: 1After:1001
Before: 2After:1002
Before: 3After:1003
>>>L=[7,6,1912]
>>>forninL:
... L=[44,55]
... printn
...
7
6
1912
23.5. Theifstatement: Conditional execution
Thepurpose oftheifconstruct istoexecute some statements only when certain conditions aretrue.
Here isthemost general form ofanifconstruct:
ifE0:
B0
elifE1:
B1
elif...:
...
else:
Bf
Inwords, thisconstruct means:
•Ifexpression E0istrue, execute blockB0.
•Ifexpression E0isfalse butE1istrue, execute blockB1.
•Ifthere aremoreelif clauses, evaluate each one's expression until thatexpression hasatrue value,
andthen execute thecorresponding block.
•Ifalltheexpressions inifandelif clauses arefalse, execute blockBf.
Anifconstruct may have zero ormoreelif clauses. Theelse clause isalsooptional.
Examples:
>>>foriinrange(5):
... ifi==0:
... print"iiszero",
... elifi==1:
... print"it'sone",
... elifi==2:
... print"it'stwo",
... else:
... print"many",
... printi
...
iiszero0
New Mexico Tech Computer Center Python 2.7quick reference 102
it'sone1
it'stwo2
many3
many4
>>>if2>3:print"Huh?"
...
>>>if2>3:print"Huh?"
...else:print"Oh,good."
...
Oh,good.
>>>if2>3:print"Huh?"
...elif2==2:print"Oh."
...
Oh.
23.6. Theraise statement: Causeanexception
Python's exception mechanism istheuniversal framework fordealing with errors—situations where
your program can't really proceed normally. Foranoverview, seeSection 25,“Exceptions: Error signaling
andhandling” (p.113).
There arethree forms oftheraise statement:
raise
raiseE1
raiseE1,E2
Thefirstform isequivalent to“raiseNone,None ”andthesecond form isequivalent to“raiseE1,
None”.Each form raises anexception ofagiven type andwith agiven value. Thetype andvalue depend
onhow many expressions youprovide:
Exception value Exception type E2 E1
Re-raise thecurrent exception, ifany. This might bedone, forexample,
inside anexcept ,else ,orfinally block; seeSection 23.8,“Thetry
statement: Anticipate exceptions” (p.104).NoneNone
E1() E1 None class
E2 E1 instance ofE1 class
E1(*E2) E1 tuple class
E1(E2) E1 none oftheabove class
E1 type(E1) None instance
Thecurrent recommended practice istousearaise statement ofthisform:
raiseE(...)
whereEissome class derived from thebuilt-inException class: youcanuseoneofthebuilt-in excep-
tions, oryoucancreate your own exception classes.
Forclasses derived fromException ,theconstructor takes oneargument, anerror message—that is,
astring explaining why theexception wasraised. Theresulting instance makes thatmessage available
asanattribute named.message .Example:
103 Python 2.7quick reference New Mexico Tech Computer Center
>>>try:
... raiseValueError('The dayistoofrabjous.')
...exceptValueError asx:
... pass
...
>>>type(x)
<type'exceptions.ValueError'>
>>>x.message
'Thedayistoofrabjous.'
Tocreate your own exceptions, write aclass thatinherits fromException andpasses itsargument to
theparent constructor, asinthisexample.
>>>classVocationError(Exception):
... def__init__(self, mismatch):
... Exception.__init__(self, mismatch)
...
>>>try:
... print"Andnow,theVocational Guidance Counsellor Sketch."
... raiseVocationError("Does nothaveproperhat")
... print"Thisprintstatement willnotbereached."
...exceptVocationError asproblem:
... print"Vocation problem: {0}".format(problem)
...
Andnow,theVocational Guidance Counsellor Sketch.
Vocation problem: Doesnothaveproperhat
23.7. Thereturn statement: Exitafunction ormethod
Within anyfunction ormethod, youcanexitthefunction with areturn statement. There aretwoforms:
return expression
return
Inthefirstform, execution resumes atthepoint where thefunction ormethod wascalled, andthevalue
oftheexpression issubstituted intothecalling statement.
Thesecond form istheequivalent of“returnNone”.(See Section 18,“None :Thespecial placeholder
value” (p.56).)
23.8. Thetry statement: Anticip ateexceptions
Thepurpose ofa“try”construct istospecify what actions totake intheevent oferrors. Foranintro-
duction toPython's exception mechanism, seeSection 25,“Exceptions: Error signaling and hand-
ling” (p.113).
When anexception israised, twoitems areassociated with it:
•Anexception type, and
•anexception value.
Here isthemost general form ofatry construct. Symbols likeB0andB1represent indented blocks of
statements. Eachexcept clause names some exception classEi(oratuple ofexception classes), and
optionally avariable vithatwillbesettotheexception value.
New Mexico Tech Computer Center Python 2.7quick reference 104
try:
B0
except E1[asv1]:
B1
except E2[asv2]:
B2
except...:
...
else:
Be
finally:
Bf
Theelse: andfinally: blocks areoptional. There must beatleast oneexcept block, butthere may
beanynumber.
Here isasimplified description oftheexecution ofatry block ingeneral:
1.IfB0executes without raising anyexceptions, theelse blockBeisexecuted, then thefinally
blockBf.
2.Iftheexecution ofblockB0raises some exception with typeE0,thattype iscompared against each
except clause until oneofthem matches theraised exception orthere arenomoreexcept clauses.
Thematching condition isslightly complicated: forsome clause “except Eiasvi:”,expression
Eiiseither anexception class oratuple ofexception classes.
•IfEiisasingle class, itisconsidered amatch ifE0iseither thesame class asEiorasubclass of
Ei.
•IfEiisatuple ofexception classes, theraised exception iscompared toeach toseeifitisthe
same class orasubclass, asinthesingle-class case.
Ifmultipleexcept clauses match, thefirst matching clause issaid tohandle theexception. The
corresponding variable vi(ifpresent) isbound totheraised exception instance, andcontrol passes
tothecorresponding blockBi.
3.Ifthere isafinally clause, itisexecuted, whether theexception wascaught ornot.Iftheexception
wasnotcaught, itisre-raised after theendofthefinally clause.
Examples:
>>>try:
... raiseValueError("Strike three!")
...exceptIOError asx:
... print"I/Oerrorcaught:", x
...exceptValueError asx:
... print"Valueerrorcaught:", x
...exceptSyntaxError asx:
... print"Syntax errorcaught:", x
...else:
... print"Thisistheelseclause"
...finally:
... print"Thisisthefinally clause"
...
Valueerrorcaught: Strikethree!
Thisisthefinally clause
105 Python 2.7quick reference New Mexico Tech Computer Center
>>>try:
... raiseValueError("Uncaught!")
...exceptIOError asx:
... print"I/Oerror:", x
...else:
... print"Thisistheelseclause"
...finally:
... print"Thisisthefinally clause"
...
Thisisthefinally clause
Traceback (mostrecentcalllast):
File"<stdin>", line2,in<module>
ValueError: Uncaught!
>>>try:
... print"Noexceptions raised"
...exceptValueError asx:
... print"ValueError:", x
...else:
... print"Thisistheelseclause"
...finally:
... print"Thisisthefinally clause"
...
Noexceptions raised
Thisistheelseclause
Thisisthefinally clause
Forthose ofyouwho areinterested inthegory details, thefunbegins when asecond oreven athird
exception israised inside anexcept ,else ,orfinally clause. Theresults arewell-defined, andhere
isapseudocode description oftheedge cases. Inthisprocedure, we'll usetwointernal variables named
pending anddetail .
1.Setpending toNone .
2.Attempt toexecute blockB0.Ifthisblock raises anexception E0with detaild0,setpending toE0
andsetdetail tod0.
3.Ifpending isNone ,gotoStep 8(p.106).
4.Find thefirstblockexcept Ei,vi:such thatissubclass( E0,Ei).
Ifthere isnosuch match, gotoStep 10(p.106).
5.Setvitodetail .
6.Attempt toexecute blockBi.
Ifthisblock raises some new exception Enwith detaildn,setpending toEnandsetdetail todn.
However, ifblockBiexecutes without exception, setpending toNone .Inthiscase, theoriginal
exception issaid tohave been caught orhandled.
7.GotoStep 10(p.106).
8.Ifthere isnoelse: clause, gotoStep 10(p.106).
9.Attempt toexecute theelse: blockBe.
Ifthisblock raises some new exception Enwith detaildn,setpending toEnandsetdetail todn.
10.Ifthere isnofinally: clause, proceed toStep 12(p.107).
New Mexico Tech Computer Center Python 2.7quick reference 106
11.Attempt toexecute thefinally: blockEf.
Ifthisblock raises some new exception Enwith detaildn,setpending toEnandsetdetail todn.
12.Ifpending isnotNone ,re-raise theexception asinthisstatement:
raisepending, detail
Ifpending isNone ,fallthrough tothestatement following thetry: block.
23.9. Thewith statement andcontextmana gers
Thepurpose ofthisstatement istoprotect ablock ofcode with acontext manager thatinsures thatcertain
initialization andcleanup steps getperformed, regardless ofwhether thatblock raises anexception.
Acontext manager isaclass thathas.__enter__() and.__exit__() methods.
1.The.__enter__() method performs anynecessary initialization, andreturns avalue.
2.The.__exit__() method isalways executed toperform necessary cleanup actions.
Starting with version 2.6,Python now was awith statement that executes ablock using acontext
manager. Here isthegeneral form, whereBistheblock tobeexecuted.
withE[asV]:
B
•Eisanexpression thatevaluates toacontext manager .
•Ifyouprovide avariable Vintheoptional part“asV”,thatvariable willbesettothevalue returned
bythecontext manager's .__enter__() method.
Python'sfile class isacontext manager; its.__enter__() method returns theopened file,andits
.__exit__() method closes thefile.Forexample, suppose youwant tocallafunctionbeat() and
pass itanopened filenamed"goat" ,butyou want tobesure thefileisclosed even ifthebeat()
function raises anexception. This code would dothat:
withopen("goat") asinFile:
beat(inFile)
When thebeat() function terminates (either normally orbecause itraised anexception), thefilewill
beclosed (inthefile.__exit__() method). Ifthefunction raised anexception, thatexception will
then bere-raised.
Starting inPython 2.7,youcanenclose ablock inmultiple context managers byrepeating the“E[as
V”parts ofthestatement. Forexample:
withopen('in') asinFile, open('out', 'w')asoutFile:
forrawLine ininFile:
outFile.write(rawLine)
23.10. Theyield statement: Genera teoneresult fromagenera tor
Agenerator isanyfunction ormethod that contains atleast oneyield statement. Generators area
special type ofiterator; seeSection 24.3,“Generators: Functions that canproduce asequence ofval-
ues” (p.111).Here isthegeneral form:
yieldexpression
107 Python 2.7quick reference New Mexico Tech Computer Center
Unlike ordinary functions ormethods thatusethereturn statement toreturn asingle value, agener-
atorisamechanism thatproduces asequence ofzero ormore values. Each execution ofayield statement
produces anadditional value. Tosignal thecaller thatthere arenomore values, usethisraise statement:
raiseStopIteration
Asanexample, here isafunction thatgenerates thesequence 0,1,2,...,n-1,n,n-1,n-2,...,2,1,0.
>>>defupdown(n):
... '''Generate thevalues0,1,2,...,n-1,n,n-1,n-2,...0.
... '''
... foranswerinrange(0,n):
... yieldanswer
... foranswerinrange(n, -1,-1):
... yieldanswer
... raiseStopIteration
...
>>>forxinupdown(4):
... printx,
...
012343210
24.def() :Defining yourownfunctions
Thedef construct isused todefine functions andmethods. Here isthegeneral form:
defn(p0[=e0][,p1[=e1]]...[,* pv][,**pd]):
B
Thenamenofthefunction isfollowed byapairofparentheses containing descriptions ofthearguments
tothefunction. TheblockBiscalled thebody ofthefunction, andisexecuted when thefunction iscalled.
Afunction may have noarguments atall.Ifthere arearguments tobepassed tothefunction when itis
called, they must bedeclared inthisorder:
•Apositional argument isaname thatisnotfollowed byanequal sign (=)anddefault value.
•Akeyword argument isfollowed byanequal sign andanexpression thatgives itsdefault value .
Ifafunction hasboth positional arguments andkeyword arguments, allpositional arguments must
precede allkeyword arguments.
•Ifthere isa*pvparameter, when thefunction iscalled thatname isbound toa(possibly empty) tuple
ofallpositional arguments passed tothefunction that donotcorrespond toother positional or
keyword arguments inthedef.
•Ifthere isa**pdparameter, when thefunction iscalled that name isbound toadictionary ofall
keyword arguments passed tothefunction thatdonotappear inthefunction's def.
When youcallafunction, theargument values youpass toitmust obey these rules:
•There aretwokinds ofarguments: positional (also called non-default arguments) andkeyword (also
called default arguments). Apositional argument issimply anexpression, whose value ispassed to
theargument.
Akeyword argument hasthisform:
New Mexico Tech Computer Center Python 2.7quick reference 108
name=expression
•Allpositional arguments inthefunction call(ifany) must precede allkeyword arguments (ifany).
>>>defwrong(f=1, g):
... printf,g
...
File"<stdin>", line1
SyntaxError: non-default argument follows default argument
•You must supply atleast asmany positional arguments asthefunction expects.
>>>defwantThree(a, b,c):
... printa,b,c
...
>>>wantThree('nudge', 'nudge', 'nudge')
nudgenudgenudge
>>>wantThree('nudge')
Traceback (mostrecentcalllast):
File"<stdin>", line1,in<module>
TypeError: wantThree() takesexactly 3arguments (1given)
•Ifyousupply more positional arguments than thefunction expects, theextra arguments arematched
against keyword arguments intheorder oftheir declaration inthedef.Any additional keyword ar-
guments aresettotheir default values.
>>>deff(a,b,c=1,d='elk'):
... printa,b,c,d
...
>>>f(99,111)
991111elk
>>>f(99,111,222,333)
99111222333
>>>f(8,9,10,11,12,13)
Traceback (mostrecentcalllast):
File"<stdin>", line1,in<module>
TypeError: f()takesatmost4arguments (6given)
•You may supply arguments forkeyword parameters inanyorder byusing theformk=v,wherekis
thekeyword used inthedeclaration ofthatparameter andvisyour desired argument.
>>>defblackKeys(fish='Eric', dawn='Stafford', attila='Abdul'):
... printfish,dawn,attila
...
>>>blackKeys()
EricStafford Abdul
>>>blackKeys(attila='Gamera', fish='Abdul')
AbdulStafford Gamera
•Ifyou declare aparameter oftheform“*name”,thecaller canprovide anynumber ofadditional
keyword arguments, andthename willbebound toatuple containing those additional arguments.
109 Python 2.7quick reference New Mexico Tech Computer Center
>>>defposish(i, j,k,*extras):
... printi,j,k,extras
...
>>>posish(38, 40,42)
384042()
>>>posish(44, 46,48,51,57,88)
444648(51,57,88)
•Similarly, youmay declare afinal parameter oftheform“**name”.Ifthecaller provides anykeyword
arguments whose names donotmatch declared keyword arguments, thatname willbebound toa
dictionary containing theadditional keyword arguments askey-value pairs.
>>>defextraKeys(a, b=1,*c,**d):
... printa,b,c,d
...
>>>extraKeys(1,2)
12(){}
>>>extraKeys(3,4,6,12, hovercraft='eels', record='scratched')
34(6,12){'record': 'scratched', 'hovercraft': 'eels'}
24.1. Afunction's local namesp ace
Any name thatappears inafunction's argument list,oranyname thatissettoavalue anywhere inthe
function, issaidtobelocal tothefunction. Ifalocal name isthesame asaname from outside thefunction
(aso-called global name), references tothat name inside thefunction willrefer tothelocal name, and
theglobal name willbeunaffected. Here isanexample:
>>>x='lobster'
>>>y='Thermidor'
>>>deff(x):
... y='crevettes'
... printx,y
...
>>>f('spam')
spamcrevettes
>>>printx,y
lobster Thermidor
Keyword parameters have aspecial characteristic: their names arelocal tothefunction, butthey are
alsoused tomatch keyword arguments when thefunction iscalled.
24.2. Iterators:Values thatcanproduc easequenc eofvalues
Closely related toPython's concept ofsequences istheconcept ofaniterator :
Foragiven sequence S,aniteratorIisessentially asetofinstructions forproducing
theelements ofSasasequence ofzero ormore values.
Toproduce aniterator over some sequence S,usethisfunction:
iter(S)
•Theresult ofthisfunction isan“iterator object” thatcanbeused inafor statement.
New Mexico Tech Computer Center Python 2.7quick reference 110
>>>continents =('AF','AS','EU','AU','AN','SA','NA')
>>>worldWalker =iter(continents)
>>>type(worldWalker)
<type'tupleiterator'>
>>>forlandMass inworldWalker:
... print"Visit{0}.".format(landMass,)
...
VisitAF.VisitAS.VisitEU.VisitAU.VisitAN.VisitSA.VisitNA.
•Alliterators have a.next() method thatyoucancalltogetthenext element inthesequence. This
method takes noarguments. Itreturns thenext element inthesequence, ifany. When there areno
more elements, itraises aStopIteration exception.
>>>trafficSignal =['green', 'yellow', 'red']
>>>signalCycle =iter(trafficSignal)
>>>type(signalCycle)
<type'listiterator'>
>>>signalCycle.next()
'green'
>>>signalCycle.next()
'yellow'
>>>signalCycle.next()
'red'
>>>signalCycle.next()
Traceback (mostrecentcalllast):
File"<stdin>", line1,in<module>
StopIteration
Once aniterator isexhausted, itwillcontinue toraiseStopIteration indefinitely.
•You canalsouseaniterator astheright-hand operand ofthe“in”operator.
>>>signalCycle =iter(trafficSignal)
>>>'red'insignalCycle
True
24.3. Genera tors:Functions thatcanproduc easequenc eofvalues
Unlike conventional functions thatreturn only asingle result, agenerator isafunction thatproduces a
sequence ofzero ormore results.
Generators areaspecial case ofiterators (seeSection 24.2,“Iterators: Values thatcanproduce asequence
ofvalues” (p.110)),sothey canbeused asthecontrolling iterable inforstatements andtheother places
where iterators areallowed.
Inaconventional function, thebody ofthefunction isexecuted until iteither executes areturn state-
ment, oruntil itruns outofbody statements (which istheequivalent ofa“returnNone”statement).
Bycontrast, when agenerator function iscalled, itsbody isexecuted until iteither hasanother value to
produce, oruntil there arenomore values.
•When afunction wishes toreturn thenext generated value, itexecutes astatement ofthisform:
yielde
111 Python 2.7quick reference New Mexico Tech Computer Center
where theeisanyPython expression.
Thedifference betweenyield andreturn isthatwhen areturn isexecuted, thefunction iscon-
sidered finished with itsexecution, andallitscurrent state diasppears.
Bycontrast, when afunction executes ayield statement, execution ofthefunction isexpected to
resume justafter thatstatement, atthepoint when thecaller ofthefunction needs thenext generated
value.
•Agenerator signals thatthere arenomore values byexecuting thisstatement:
raiseStopIteration
Foranexample ofagenerator, seeSection 23.10, “Theyield statement: Generate oneresult from a
generator” (p.107).
Ifyouarewriting acontainer class (that is,aclass whose instances arecontainers forasetofvalues),
andyouwant todefine aniterator (seeSection 26.3.17, “__iter__() :Create aniterator” (p.133)),that
method canbeagenerator. Here isasmall example. Theconstructor forclassBunch takes asequence
ofvalues and stores them ininstance attribute.__stuffList .Theiterator method.__iter__()
generates theelements ofthesequence inorder, except itwraps each ofthem inparentheses:
>>>classBunch(object):
... def__init__(self, stuffList):
... self.__stuffList =stuffList
... def__iter__(self):
... forthinginself.__stuffList:
... yield"({0})".format(thing)
... raiseStopIteration
...
>>>mess=Bunch(('lobster Thermidor', 'crevettes', 'Mornay'))
>>>foriteminmess:
... printitem,
...
(lobster Thermidor) (crevettes) (Mornay)
>>>messWalker =iter(mess)
>>>forthinginmessWalker: printthing,
...
(lobster Thermidor) (crevettes) (Mornay)
24.4. Decorators
Thepurpose ofaPython decorator istoreplace afunction ormethod with amodified version atthetime
itisdefined .Forexample, theoriginal way todeclare astatic method waslikethis:
defsomeMethod(x, y):
...
someMethod =staticmethod(someMethod)
Using Python's decorator syntax, youcangetthesame effect likethis:
@staticmethod
defsomeMethod(x, y):
...
New Mexico Tech Computer Center Python 2.7quick reference 112
Ingeneral, afunction ormethod may bepreceded byanynumber ofdecorator expressions, andyou
may alsoprovide arguments tothedecorators.
•Ifafunction fispreceded byadecorator expression oftheform“@d”,itistheequivalent ofthiscode:
deff(...):
...
f=d(f)
•Youmay provide aparenthesized argument listafter thename ofyour decorator. Adecorator expres-
siond(...) istheequivalent ofthiscode:
deff(...):
...
f=d(...)(f)
First, thedecorator iscalled with theargument listyouprovided. Itmust return acallable object. That
callable isthen called with oneargument, thedecorated function. Thename ofthedecorated function
isthen bound tothereturned value.
•Ifyouprovide multiple decorators, they areapplied inside out,insequence from thelasttothefirst.
Here isanexample ofafunction wrapped with twodecorators, ofwhich thesecond hasadditional ar-
guments:
@f1
@f2('Pewty')
deff0(...):
...
This istheequivalent code without using decorators:
deff0(...):
...
f0=f1(f2('Pewty') (f0))
First functionf2iscalled with oneargument, thestring'Pewty' .Thereturn value, which must be
callable, isthen called withf0asitsargument. Thereturn value from that callisthen passed tof1.
Namef0isthen bound tothereturn value from thecalltof1.
25.Exceptions: Errorsignaling andhandling
Python's exception system provides away tosignal error conditions andother disruptions innormal
processing, andalsoaway forprograms torecover from these conditions.
•Section 25.1,“Definitions ofexception terms” (p.113).
•Section 25.2,“Life cycle ofanexception” (p.114).
•Section 25.3,“Built-in exceptions” (p.115).
25.1. Definitions ofexception terms
Some definitions:
•Toraise anexception means tosignal thattheprogram cannot proceed normally duetoanerror or
other condition. (Inother programming languages, such asJava, theequivalent term istothrow an
exception.)
113 Python 2.7quick reference New Mexico Tech Computer Center
Two values accompany theraising ofanexception: thetypeandthevalue .Forexample, ifaprogram
attempts toopen anexisting diskfilebutthere isnosuchfile,thetype isIOError ,andthevalue is
aninstance oftheIOError class thatcontains additional information about thiserror.
Formore information about raising exceptions, seeSection 23.6,“Theraise statement: Cause an
exception” (p.103).
•Aprogram may choose tohandle anexception. That is,aprogram may saythatifacertain exception
orcategory ofexceptions occurs inaspecific block ofcode, Python must execute another code block
called ahandler .
•Atraceback isamessage from Python showing where anexception occurred.
Ifyoutype astatement inconversational mode thatcauses anexception, youwillseeashort traceback
likethis:
>>>x=59/0
Traceback (mostrecentcalllast):
File"<stdin>", line1,in<module>
ZeroDivisionError: integer division ormodulobyzero
The above example showed that theoffending statement was read from thestandard input stream
(<stdin> ).
When looking atatraceback, always look atthelastlinefirst. Ittells youthegeneral type ofexception
(intheexample, aZeroDivisionError ),followed byadditional details (“integer division ormodulo
byzero”).
Ifanexception occurs inside oneormore function calls, thetraceback willgive acomplete listofthe
functions involved, from outermost toinnermost. Again, thelastlineshows theexception type and
details.
>>>deff():g()
...
>>>defg():h()
...
>>>defh():return1/0
...
>>>f()
Traceback (mostrecentcalllast):
File"<stdin>", line1,in<module>
File"<stdin>", line1,inf
File"<stdin>", line1,ing
File"<stdin>", line1,inh
ZeroDivisionError: integer division ormodulobyzero
25.2. Lifecycleofanexception
Ifyouanticipate thatexecuting aparticular statement may cause anexception andyoudon't want your
program toterminate anddisplay atraceback, youcanuseatry construct tospecify handlers tobe
executed ifanexception occurs. Fordetails, seeSection 23.8,“Thetry statement: Anticipate excep-
tions” (p.104).
Ifanexception occurs inside afunction anditisnothandled atthat level byatry construct, Python
willwork back through thepending function calls until iteither finds ahandler forthat exception or
runs outofpending function calls.
New Mexico Tech Computer Center Python 2.7quick reference 114
Ifthere aremultiple handlers fortheexception incalling functions, theinnermost willbeused. Ifthere
arenohandlers fortheexception incalling functions, youwillgetastack traceback andtheprogram
willterminate.
>>>deff():
... try:
... g()
... exceptValueError, detail:
... print"Caught aValueError:", detail.message
...
>>>defg():h()
...
>>>defh():
... raiseValueError('This isatest.')
...
>>>f()
CaughtaValueError: Thisisatest.
Intheexample above, functionf() calls functiong(),which inturn calls functionh().Functionh()
raises aValueError exception, butthere isnotry: block around it.Python looks toseeifthere isa
ValueError handler ing(),butthere isnot.Finally ahandler forValueError isfound inside function
f(),socontrol resumes inside that handler. Note that nostack traceback isdisplayed, because the
ValueError exception washandled successfully.
25.3. Built-in exceptions
Python defines acomplete hierarchy ofbuilt-in exception classes. When youwrite ahandler, youcan
specify anyclass inthishierarchy, andthathandler willapply tothatclass andanyderived classes .This
allows youtowrite generic handlers thatcatch whole groups ofexception types.
Indescribing thishierarchy, wewilluseindentation toshow thesubclass/parent class relationships.
Generally araise statement willname oneofthe“leaf” classes, thatis,aclass thatdoes nothave any
subclasses. Ancestor classes that arenotusually raised aremarked with anasterisk (*)inthesection
below.
•BaseException *:This istheancestor ofallexception classes. Theconstructor forthisclass takes
oneargument, astring containing theerror message. That argument isavailable asthe.message
attribute.
•SystemExit :Raise thisexception toterminate execution ofyour program; itisaspecial case in
thatitdoes notproduce astack traceback. Inmodulesys,the.exit() method raises thisexception.
Itispossible towrite ahandler forthisexception. Todefeat such ahandler andforce immediate
termination, import moduleosandusemethodos._exit() .
•KeyboardInterrupt :Raised when theuser signals aninterruption with thekeyboard (delunder
Windows, orControl-CinLinux orMac environments).
This class inherits fromBaseException rather than fromException sothatcatch-all handlers
forclassException willnotprevent program termination.
•Exception *:This isthepreferred base class forallbuilt-in anduser-defined exceptions. Ifyou
want towrite ahandler forallthese exception types, useException asthehandler's type.
>>>try:
... x=1/0
115 Python 2.7quick reference New Mexico Tech Computer Center
...exceptException, detail:
... print"Fail:", detail.message
...
Fail:integer division ormodulobyzero
>>>try:
... x=noSuchVariable
...exceptException, detail:
... print"Fail:", detail.message
...
Fail:name'noSuchVariable' isnotdefined
Warning
Acatch-all handler likethiscanmask anynumber oferrors. Donotusesuch ahandler unless your
program must absolutely stay running.
•StopIteration :This istheexception thatagenerator must raise inorder tosignal thatnomore
generated values areavailable. SeeSection 24.3,“Generators: Functions that canproduce ase-
quence ofvalues” (p.111).
•StandardError *:This isthebase class forallbuilt-in exceptions thatareconsidered errors.
•ArithmeticError *:This isthebase class forerrors involving arithmetic computations.
•FloatingPointError :This israised forarithmetic errors involving thefloat type.
•OverflowError :This israised when theresult ofanoperation cannot berepresented.
•ZeroDivisionError :Anattempt todivide byzero.
•AssertionError :Anassert statement hasfailed. SeeSection 22.2,“Theassert statement:
Verify preconditions” (p.94).
•AttributeError :Failure toaccess anattribute.
•EnvironmentError *:Errors caused byfunctions outside ofPython, such astheoperating
system orperipheral devices.
•IOError :Errors related tofileinput oroutput.
•OSError :Errors signaled from theoperating system.
•ImportError :Failure toimport amodule ortoimport items from amodule.
•LookupError *:Superclass forerrors caused byattempts toretrieve values from inside a
container class.
•IndexError :Attempt toretrieve asequence member S[I],whereIisnotavalid index
insequence S.
•KeyError :Attempt toretrieve adictionary member D[K],whereKisnotavalid keyinD.
•MemoryError :Nomore processor memory isavailable.
•NameError :Attempt toretrieve aname thatisnotdefined.
•UnboundLocalError :Attempt toretrieve thevalue ofalocal name when novalue hasyet
been assigned toit.
•RuntimeError :Anerror thatdoesn't fittheother categories.
New Mexico Tech Computer Center Python 2.7quick reference 116
•NotImplementedError :This isthepreferred way forthevirtual methods ofabase class
tosignal thatthey have notbeen replaced byaconcrete method inaderived class.
•SyntaxError :Attempt toexecute invalid Python source code.
•TypeError :Attempt toperform anoperation onavalue thatdoes notsupport thatoperation,
such astrying touseexponentiation (**)onastring.
•ValueError :Caused byanoperation thatisperformed onvalues ofthecorrect type, butthe
actual values arenotvalid. Example: taking anegative number toafractional power.
26.Classes: Defining yourowntypes
This section assumes you already understand thebasics ofobject-oriented programming inPython,
andthatyouknow themeaning ofconcepts such asclass, instance, method, andattribute. Forageneral
tutorial onthese concepts, seetheintroduction toobject-oriented Python programming26intheTech
Computer Center's Python tutorial27.
Here isthegeneral form oftheclass declaration forsome classCwith oneormore parent classesP1,
P2,…:
classC(P1,P2,...):
attribute definitions
...
Todeclare aclass thatdoes notinherit from anyparent classes:
classC:
attribute definitions
...
Theattribute definitions may include anynumber ofdef blocks that declare methods ofthe
class, andanynumber ofclass variable declarations.
Functionally, aclass isreally justanamespace. This namespace isjustaplace tostore thepieces ofthe
class mechanisms: itsmethods andclass variables.
•When Python reads a“class ”declaration, itcreates anew, empty namespace.
•When Python reads a“def” within aclass, thename ofthatmethod isadded totheclass's namespace.
•Ifyoudefine aclass variable (that is,ifyouassign avalue toaname inside aclass butoutside ofany
methods oftheclass), theclass variable's name andvalue areadded tothenamespace.
Abrief conversational session may serve toillustrate these concepts. We'll make useofthebuilt-in
functiondir() toshow thecontents oftheclass's namespace; seeSection 21.5,“dir() :Display a
namespace's names” (p.80).
>>>classTaunter:
1
... tauntCount =0
2
... deftaunt(self):
3
... print"Goaway,orIshalltauntyouasecondtime!"
...
>>>dir(Taunter)
4
['__doc__', '__module__', 'taunt', 'tauntCount']
>>>type(Taunter.__doc__)
26http://www.nmt.edu/tcc/help/pubs/lang/pytut27/obj-intro.html27http://www.nmt.edu/tcc/help/pubs/lang/pytut27/
117 Python 2.7quick reference New Mexico Tech Computer Center
<type'NoneType'>
>>>Taunter.__module__
'__main__'
>>>Taunter.tauntCount
5
0
>>>Taunter.taunt
6
<unbound methodTaunter.taunt>
1
When Python reads thisline, itadds thenameTaunter tothecurrent local namespace, bound to
anew, empty namespace oftypeclass .
2
Because thisassignment takes place inside classTaunter butnotinside adef,nametauntCount
becomes aclass variable, bound toanint value ofzero.
3
Thenext twolines define amethod namedtaunt() within theclass.
4
After we've finished entering theclass definition, weusedir(Taunter) toseewhat names are
intheclass's namespace. Variables__doc__ and__module__ areadded automatically. Because
there was nodocumentation string intheclass,__doc__ isbound toNone .The__module__
variable hasthevalue'__main__' because theclass wasentered inconversational mode.
5
Toretrieve thevalue ofaclass variable VinclassC,usethesyntax “C.V”.
6
Nametaunt intheclass namespace isbound toanobject oftype“unbound method.” Anunbound
method isamethod (function) thatisinside aclass, butitisnotassociated with aninstance ofthe
class.
Aninstance ofaclass isalso anamespace. When theinstance iscreated, allthenames from theclass's
namespace arecopied intotheinstance namespace. From thatpoint on,anychanges made totheinstance's
namespace donotaffect theclass namespace:
>>>frenchy =Taunter()
1
>>>dir(frenchy)
['__doc__', '__module__', 'taunt', 'tauntCount']
>>>frenchy.where ='crenelations'
2
>>>dir(frenchy)
3
['__doc__', '__module__', 'where', 'taunt', 'tauntCount']
>>>frenchy.where
'crenelations'
>>>dir(Taunter)
['__doc__', '__module__', 'taunt', 'tauntCount']
>>>frenchy.tauntCount
4
0
>>>frenchy.tauntCount +=1
5
>>>frenchy.tauntCount
1
>>>Taunter.tauntCount
0
>>>type(frenchy.taunt)
6
<type'instancemethod'>
>>>frenchy.taunt()
7
Goaway,orIshalltauntyouasecondtime!
>>>Taunter.taunt(frenchy)
8
Goaway,orIshalltauntyouasecondtime!
1
This class does nothave aconstructor (__init__ )method, sowhen aninstance iscreated, the
instance isanamespace with thesame names astheclass, andthesame values.
New Mexico Tech Computer Center Python 2.7quick reference 118
2This lineadds anew namewhere totheinstance's namespace. Itisbound tothestring value
'crenelations' .
3
Note thattheinstance namespace now contains thenamewhere ,buttheclass's namespace isun-
changed.
4
Toretrieve anattribute Aofaninstance I,usethesyntax “I.A”.Initially, theinstance variable has
thesame value astheclass variable ofthesame name.
5
Here, weaddonetotheinstance variabletauntCount .Theinstance variable hasthenew value,
buttheclass variabletauntCount isunchanged.
6
Within theinstance namespace, nametaunt isnow abound method :itisassociated with theinstance
frenchy .
Thenext twolines show twoequivalent methods ofcalling thetaunt method.
7
Most method calls arebound method calls.Tocallabound methodBofaninstance I,usethesyntax
“I.B(...) ”.
When amethodBisbound toaninstanceI,theinstance namespace Ibecomes the“self”argument
passed intothemethod.
8
This linehasthesame effect astheprevious line, butitisanunbound method call.
Theexpression “Taunter.taunt ”retrieves theunbound method from theclass definition. When
youcallanunbound method, youmust supply the“self”argument explicitly asthefirstargument.
Unbound method calls arenotterribly common, butyouwillneed toknow about them when you
write theconstructor foraderived class: youmust calltheparent class constructor asanunbound
call. Generally, ifclassDhasparent classC,thederived class might look something likethis:
classD(C):
def__init__(self, ...):
C.__init__(self, ...)
...
Namespaces arevery much likedictionaries. Where adictionary hasunique keys, anamespace has
unique names. Asamatter offact, classes and instances have aspecial built-in attribute called
“__dict__ ”which, formost purposes, isthenamespace asadictionary. Continuing theexamples
above:
>>>Taunter.__dict__
{'taunt': <function tauntat0xb7ed002c>, '__module__': '__main__', 'tau
ntCount': 0,'__doc__': None}
>>>newFrenchy=Taunter()
>>>newFrenchy.__dict__
{}
>>>frenchy.__dict__
{'tauntCount': 1,'where': 'crenelations'}
Theclass's dictionary hasthefour names weexpect: thebuilt-ins__module__ and__doc__ ,theclass
variabletauntCount ,andthemethodtaunt .
Butnotice thatthe__dict__ attribute ofthenewly created instancenewFrenchy does nothave the
four names copied from theclass. Infact, itisempty. And the__dict__ ofinstancefrenchy contains
only thenames thathave changed since itsinstantation.
What actually happens when you refer toanattribute isthat Python looks first intheinstance's
__dict__ ;ifthename isnotfound there, itlooks inthe__dict__ oftheclass. Forderived classes,
Python willalsosearch the__dict__ attributes ofalltheancestor classes.
119 Python 2.7quick reference New Mexico Tech Computer Center
So,inourexample, areference tofrenchy.tauntCount would find thevalue of1intheinstance. A
reference tonewFrenchy.tauntCount would failtofind thatname innewFrench.__dict__ ,but
would succeed infinding theclass variable value 0inTaunter.__dict__['tauntCount'] .
Let's now look atthelifecycles ofclasses inmore detail. Due toimprovements made inthelanguage
since itwasfirst introduced, Python hastwokinds ofclasses, old-style andnew-style. Weencourage
you tousenew-style classes; old-style classes will nolonger besupported inthenext major release,
Python 3000.
•Allnew-style classes must declare atleast oneparent class thatiseither thetop-level classobject
orsome other class that derives ultimately fromobject .Such aclass issaid tobederived from,or
inherits from,theobject class.
Todeclare anew-style classCthatinherits fromobject :
classC(object):
...classmethods andvariables ...
•Anold-style class isonethatdoesn't declare aparent class atall,oraclass thatinherits from anexisting
old-style class. Thelifecycle ofanold-style class isdescribed inSection 26.1,“Old-style classes” (p.120).
Inmost respects, thetwoclasses perform identically.
•We'll start byexplaining old-style classes inSection 26.1,“Old-style classes” (p.120).
•Tobenefit from themany functional improvements ofnew-style classes, andespecially ifyouexpect
tomigrate your code tothemajor changes ofPython 3.0,seeSection 26.2,“Life cycle ofanew-style
class” (p.123).
26.1. Old-style classes
Old-style classes arethose declared without aparent class, orclasses thatinherit from anexisting old-
style class.
Here isanoutline ofthebirth, life,anddeath ofanold-style class anditsinstances.
•Section 26.1.1, “Defining anold-style class” (p.120).
•Section 26.1.2, “Instantiation ofanold-style class: Theconstructor, .__init__() ”(p.121).
•Section 26.1.3, “Attribute references inold-style classes” (p.121).
•Section 26.1.4, “Method calls inanold-style class” (p.122).
•Section 26.1.5, “Instance deletion: thedestructor, .__del__() ”(p.123).
26.1.1. Defining anold-style class
Todefine anold-style classCwith noparent class, usethisgeneral form:
classC:
...classmethods andvariables ...
Tocreate aclass thatinherits from oneormore parent classesP1,P2,…:
classC(P1,P2,...):
...classmethods andvariables ...
AsPython reads thedefinition ofyour class, itfirst creates anew, empty namespace called theclass
namespace .You canaccess theclass namespace directly asanattribute named__dict__ ,adictionary
whose keys arethenames inthatnamespace.
New Mexico Tech Computer Center Python 2.7quick reference 120
AsPython reads each method orclass variable inyour class declaration, itadds thename ofthat
method orvariable totheclass namespace.
26.1.2. Instantia tionofanold-style class: Theconstruct or,.__init__()
Thecreation ofanew instance ofaclass happens when arunning Python program encounters acallto
thatclass, thatis,theclass name with apairofparentheses after it,with zero ormore arguments inside
theparentheses.
Here isthegeneral form:
C(a1,a2,...)
Theinstance creation (also called instantiation )ishandled bythe__init__() orconstructor method.
1.First Python creates theinstance with anempty.__dict__ attribute thatwillcontain theinstance's
values.
2.Python then calls theconstructor. Theargument listforthiscallalways hasthespecial firstargument
self (theinstance), followed bywhatever arguments were used intheinitial call.Theconstructor
callisequivalent tothis:
C.__init__(self, a1,a2,...)
3.Theconstructor method then executes. Typically theconstructor willsetupnew instance attributes
byassignments ofthisform:
self.name=expression
When theconstructor finishes executing, theinstance isreturned totheconstructor's caller.
26.1.3. Attribut ereferencesinold-style classes
Thenames inside theinstance arecalled attributes .(The methods aretechnically attributes—attributes
thatareoftype function.) There arethree operations onattributes: get,set,anddelete.
•Togetanattribute means toretrieve itsvalue. Python searches theinstance's.__dict__ fortheat-
tribute's name; ifthatname isfound, itsvalue isreturned. Iftheinstance's.__dict__ does nothave
abinding forthegiven name, Python searches theclass's.__dict__ .Ifnovalue isfound there,
Python searches thenamespaces oftheancestor classes (ifany).
>>>classC:
... def__init__(self, x):
... self.thingy =x
...
>>>c=C(42)
>>>c.thingy
42
>>>c.__dict__['thingy']
42
When youcallamethodMofaninstance Iinanexpression oftheform“I.M(...) ”,thisisconsidered
justanother attribute “get” operation: thegetoperation I.Mretrieves themethod, and then that
method iscalled using thearguments inside the“(...) ”.
121 Python 2.7quick reference New Mexico Tech Computer Center
•Tosetanattribute means togive itavalue. Ifthere isanexisting attribute with thesame name, itsold
value isdiscarded, andtheattribute name isbound tothenew value. Thenew value isstored inthe
instance's.__dict__ .
>>>c.thingy
42
>>>c.thingy =58
>>>c.thingy
58
>>>c.__dict__['thingy']
58
•You candelete anattribute from aninstance using adel statement (seeSection 22.3,“Thedel state-
ment: Delete aname orpart ofavalue” (p.94)).
>>>c.thingy
58
>>>delc.thingy
>>>c.thingy
Traceback (mostrecentcalllast):
File"<stdin>", line1,in<module>
AttributeError: Cinstance hasnoattribute 'thingy'
Inaddition toordinary attributes andmethods, your class canaccept references tonames that donot
exist intheinstance orclass namespace. You candefine special methods thatwillbecalled when some
statement tries toget,set,ordelete anattribute thatisn't found intheinstance's .__dict__ .SeeSec-
tion 26.3.14, “__getattr__() :Handle areference toanunknown attribute” (p.133),Section 26.3.21,
“__setattr__() :Intercept allattribute changes” (p.134),andSection 26.3.9, “__delattr__() :Delete
anattribute” (p.131).
Ifallelsefails—if anattribute isnotfound intheinstance's namespace andtheclass does notprovide
aspecial method thathandles theattribute reference—Python willraise anAttributeError exception.
26.1.4. Method calls inanold-style class
There aretwodifferent ways tocallamethodMofsome classC:
•Most calls arebound method calls ofthisform, whereIisaninstance ofsome classC:
I.methodName (a1,a2,...)
Theinstance Ireplacesself asthefirst argument when setting upthearguments tobepassed to
themethod.
•Thefollowing form, called anunbound method call,isexactly equivalent totheabove:
C.methodName( i,a1,a2,...)
Here isademonstration oftheequivalence ofbound andunbound method calls.
>>>classC:
... def__init__(self, x):
... self.x=x
... defshow(self, y):
... print"***({0},{1}) ***".format(self.x, y)
New Mexico Tech Computer Center Python 2.7quick reference 122
...
>>>c=C(42)
>>>c.show(58)
***(42,58) ***
>>>C.show(c,58)
***(42,58) ***
26.1.5. Instanc edeletion: thedestruct or,.__del__()
When there arenovalues thatrefer toaninstance anymore, thestorage occupied bytheinstance isre-
cycled. However, ifthere arecertain cleanup operations that must bedone (such asclosing external
files), these operations canbeplaced into adestructor method that will becalled before recycling the
instance. Here isthegeneral form ofadestructor:
def__del__(self):
...cleanup statements ...
26.2. Lifecycleofanew-style class
Most ofthefeatures ofnew-style classes arethesame asforold-syle classes. This section willdiscuss
only thedifferences. Wewon't cover afewofthemore obscure advanced features here; forinformation
onsuch topics asdescriptors and metaclasses, seethe“Data model” section ofthePython Reference
Manual28.
Thedeclaration ofanew-style class looks thesame asforanold-style class, with oneconstraint: the
class must inherit from theuniversal base class namedobject ,orfrom oneormore other new-style
classes.
•Section 26.2.1, “__new__() :New instance creation” (p.123).
•Section 26.2.2, “Attribute access control innew-style classes” (p.124).
•Section 26.2.3, “Properties innew-style classes: Fine-grained attribute access control” (p.125).
•Section 26.2.4, “Conserving memory with__slots__ ”(p.125).
26.2.1.__new__() :Newinstanc ecreation
New-style classes have anew special method name,__new__() ,that iscalled oninstantiation before
theconstructor. Ithandles thecreation ofanew instance.
•The.__new__() method iscalled when aninstance iscreated.
•Method.__new__() isalways astatic method (seeSection 26.4,“Static methods” (p.135)),even if
youdonotspecifically make itastatic method.
•Aconstructor callforsome classChasthisgeneral form:
C(*p,**k)
That is,itcanhave anynumber ofpositional arguments andanynumber ofkeyword arguments.
Theequivalent calltothe.__new__() method willlook likethis:
def__new__( cls,*p,**k):
...
28http://docs.python.org/reference/datamodel.html
123 Python 2.7quick reference New Mexico Tech Computer Center
Thefirstargument cls must betheclass being created.
•The.__new__() method must calltheparent class's.__new__() method tocreate theinstance.
Forexample, ifyour class inherits directly fromobject ,youmust call:
object.__new__( cls)
Thevalue returned bythatcallisthenew instance.
•Inmost cases, the.__new__() method will return anew instance ofcls,and that class's
.__init__() willthen becalled with that instance asitsself argument, andthepositional and
keyword arguments pandkwillbepassed tothatconstructor aswell.
>>>classTest(object):
... def__new__(cls, *p,**k):
... inst=object.__new__(cls)
... returninst
... def__init__(self, *p,**k):
... print"p={0}k={1}".format(p, k)
...
>>>t=Test('egg', 'kale', sauce='Bearnaise')
p=('egg', 'kale') k={'sauce': 'Bearnaise'}
However ,ifthe.__new__() method does notreturn aninstance ofclasscls,theconstructor method
.__init__() willnotbecalled. This allows theclass more control over how new instances arecreated
andinitialized. You canreturn aninstance ofanentirely different class ifyoulike.
26.2.2. Attribut eaccesscontrolinnew-style classes
New-style classes give youmore ways tocontrol what happens when aninstance's attribute isaccessed.
Here isthegeneral procedure foraccess toattribute aofinstance i,whereCistheclass ofi.
1.Iftheinstance hasa__getattribute__() special method (seeSection 26.3.15, “__getattrib-
ute__() :Intercept allattribute references” (p.133)),execute thatmethod, which must either return
theattribute value orraiseAttributeError .
2.Iftheinstance has a__slots__ attribute (see Section 26.2.4, “Conserving memory with
__slots__ ”(p.125)),return thevalue oftheslotwith namea.Ifadoes notmatch anyoftheslot
names, orifthenamed slothasnever been settoavalue, raiseAttributeError .
3.Ifaisakeyini.__dict__, return thecorresponding value.
4.Search forattribute ainclassC.Ifthat fails, search alltheparent classes ofCalltheway back to
object .
5.Ifallsearches inthepreceding stepfailed andtheinstance hasa.__getattr__() special method,
callthatmethod. SeeSection 26.3.14, “__getattr__() :Handle areference toanunknown attrib-
ute” (p.133);please note thedifferences from Section 26.3.15, “__getattribute__() :Intercept
allattribute references” (p.133).
6.Ifalltheabove steps failtoproduce avalue, raiseAttributeError .
New Mexico Tech Computer Center Python 2.7quick reference 124
26.2.3. Proper tiesinnew-style classes: Fine-grained attribut eaccesscontrol
Theoutline ofattribute access inSection 26.2.2, “Attribute access control innew-style classes” (p.124)
isslightly oversimplified inonerespect. Any oftheattribute search steps inthisprocedure may produce
aproperty rather than theactual attribute value.
Aproperty isaspecial object that isproduced bytheproperty() function. Foradiscussion ofthe
three types ofattribute access (get, set,anddelete), theprotocols fortheaccessor functions, andexamples,
seeSection 21.15, “property() :Create anaccess-controlled attribute” (p.85).
26.2.4. Conserving memory with__slots__
Normally, youcanaddnew attributes toaninstance's namespace with anyname youwant. Theinstance's
.__dict__ attribute iseffectively adictionary, andyoucanaddanynumber ofnames toit.
However, inanew-style class, youmay specify agiven, limited setofattribute names thatareallowed
ininstances oftheclass. There aretworeasons why youmight want todothis:
•Ifyour program isgoing tocreate large numbers ofinstances ofaclass, tothepoint where youmay
runoutofmemory, youcansave some storage within each instance bysacrificing theability toadd
arbitrary attribute names.
•Ifyoulimit thesetofpermissible attribute names, Python willdetect anyreference toaname notin
thepermissible set,andraise anAttributeError exception. This may help youcatch certain pro-
gramming errors.
Tolimit thesetofattribute names inanew-style class, assign toaclass variable named__slots__ a
tuple containing theallowable names, likethis:
__slots__ =(n1,n2,...)
Here's asmall example. Suppose youwant instances ofclassPoint tocontain nothing more than two
attributes named.xand.y:
>>>classPoint(object):
... __slots__ =('x','y')
... def__init__(self, abscissa, ordinate):
... self.x, self.y=abscissa, ordinate
...
>>>x2=Point(3, 7)
>>>x2.x
3
>>>x2.y
7
>>>x2.temperature =98.6
Traceback (mostrecentcalllast):
File"<stdin>", line1,in<module>
AttributeError: 'Point' objecthasnoattribute 'temperature'
When youdeclare a__slots__ attribute inanew-style class, instances will nothave a.__dict__
attribute.
26.3. Special method names
Within aclass, anumber ofreserved method names have special meaning. Here isalistoftheones
covered inthisdocument.
125 Python 2.7quick reference New Mexico Tech Computer Center
Section 26.3.4, “Special methods toemulate built-in functions” (p.130) __abs__
Section 26.3.2, “Special methods forbinary operators” (p.129) __add__
Section 26.3.2, “Special methods forbinary operators” (p.129) __and__
Section 26.3.5, “__call__() :What todowhen someone calls anin-
stance” (p.130)__call__
Section 26.3.6, “__cmp__() :Generalized comparison” (p.130) __cmp__
Section 26.3.4, “Special methods toemulate built-in functions” (p.130) __complex__
Section 26.3.7, “__contains__() :The“in”and“notin”operators” (p.131) __contains__
Section 26.3.8, “__del__() :Destructor” (p.131) __del__
Section 26.3.9, “__delattr__() :Delete anattribute” (p.131) __delattr__
Section 26.3.10, “__delitem__() :Delete oneitem ofasequence” (p.131) __delitem__
Section 26.3.4, “Special methods toemulate built-in functions” (p.130) __divmod__
Section 26.3.2, “Special methods forbinary operators” (p.129) __div__
Section 26.3.4, “Special methods toemulate built-in functions” (p.130) __divmod__
Section 26.3.11, “__enter__ :Context manager initialization” (p.132) __enter__
Section 26.3.12, “__exit__ :Context manager cleanup” (p.132) __exit__
Section 26.3.1, “Rich comparison methods” (p.128) __eq__
Section 26.3.2, “Special methods forbinary operators” (p.129) __floordiv__
Section 26.3.4, “Special methods toemulate built-in functions” (p.130) __float__
Section 26.3.1, “Rich comparison methods” (p.128) __ge__
Section 26.3.14, “__getattr__() :Handle areference toanunknown attrib-
ute” (p.133)__getattr__
Section 26.3.15, “__getattribute__() :Intercept allattribute refer-
ences” (p.133)__getattribute__
Section 26.3.16, “__getitem__() :Getoneitem from asequence ormap-
ping” (p.133)__getitem__
Section 26.3.1, “Rich comparison methods” (p.128) __gt__
Section 26.3.4, “Special methods toemulate built-in functions” (p.130) __hex__
Section 26.3.2, “Special methods forbinary operators” (p.129) __iadd__
Section 26.3.2, “Special methods forbinary operators” (p.129) __iand__
Section 26.3.2, “Special methods forbinary operators” (p.129) __idiv__
Section 26.3.2, “Special methods forbinary operators” (p.129) __ifloordiv__
Section 26.3.2, “Special methods forbinary operators” (p.129) __ilshift__
Section 26.3.2, “Special methods forbinary operators” (p.129) __imod__
Section 26.3.2, “Special methods forbinary operators” (p.129) __imul__
Section 26,“Classes: Defining your own types” (p.117) __init__
Section 26.3.4, “Special methods toemulate built-in functions” (p.130) __int__
Section 26.3.3, “Unary operator special methods” (p.129) __invert__
Section 26.3.2, “Special methods forbinary operators” (p.129) __ior__
Section 26.3.2, “Special methods forbinary operators” (p.129) __ipow__
New Mexico Tech Computer Center Python 2.7quick reference 126
Section 26.3.2, “Special methods forbinary operators” (p.129) __irshift__
Section 26.3.2, “Special methods forbinary operators” (p.129) __isub__
Section 26.3.17, “__iter__() :Create aniterator” (p.133) __iter__
Section 26.3.2, “Special methods forbinary operators” (p.129) __ixor__
Section 26.3.1, “Rich comparison methods” (p.128) __le__
Section 26.3.4, “Special methods toemulate built-in functions” (p.130) __len__
Section 26.3.4, “Special methods toemulate built-in functions” (p.130) __long__
Section 26.3.2, “Special methods forbinary operators” (p.129) __lshift__
Section 26.3.1, “Rich comparison methods” (p.128) __lt__
Section 26.3.2, “Special methods forbinary operators” (p.129) __mod__
Section 26.3.2, “Special methods forbinary operators” (p.129) __mul__
Section 26.3.1, “Rich comparison methods” (p.128) __ne__
Section 26.3.3, “Unary operator special methods” (p.129) __neg__
Section 26.2.1, “__new__() :New instance creation” (p.123) __new__
Section 26.3.18, “__nonzero__() :True/false evaluation” (p.134) __nonzero__
Section 26.3.4, “Special methods toemulate built-in functions” (p.130) __oct__
Section 26.3.2, “Special methods forbinary operators” (p.129) __or__
Section 26.3.3, “Unary operator special methods” (p.129) __pos__
Section 26.3.2, “Special methods forbinary operators” (p.129) __pow__
Section 26.3.2, “Special methods forbinary operators” (p.129) __radd__
Section 26.3.2, “Special methods forbinary operators” (p.129) __rand__
Section 26.3.2, “Special methods forbinary operators” (p.129) __rdiv__
Section 26.3.19, “__repr__() :String representation” (p.134) __repr__
Section 26.3.20, “__reversed__() :Implement thereversed() func-
tion” (p.134)__reversed__
Section 26.3.2, “Special methods forbinary operators” (p.129) __rfloordiv__
Section 26.3.2, “Special methods forbinary operators” (p.129) __rlshift__
Section 26.3.2, “Special methods forbinary operators” (p.129) __rmod__
Section 26.3.2, “Special methods forbinary operators” (p.129) __rmul__
Section 26.3.2, “Special methods forbinary operators” (p.129) __ror__
Section 26.3.2, “Special methods forbinary operators” (p.129) __rpow__
Section 26.3.2, “Special methods forbinary operators” (p.129) __rrshift__
Section 26.3.2, “Special methods forbinary operators” (p.129) __rshift__
Section 26.3.2, “Special methods forbinary operators” (p.129) __rsub__
Section 26.3.2, “Special methods forbinary operators” (p.129) __rxor__
Section 26.3.21, “__setattr__() :Intercept allattribute changes” (p.134) __setattr__
Section 26.3.22, “__setitem__() :Assign avalue tooneitem ofase-
quence” (p.134)__setitem__
Section 26.3.4, “Special methods toemulate built-in functions” (p.130) __str__
127 Python 2.7quick reference New Mexico Tech Computer Center
Section 26.3.2, “Special methods forbinary operators” (p.129) __sub__
Section 26.3.4, “Special methods toemulate built-in functions” (p.130) __unicode__
Section 26.3.2, “Special methods forbinary operators” (p.129) __xor__
Themost important special method name istheclass constructor, .__init__() .
•Forageneral introduction toclass constructors, seeSection 26,“Classes: Defining your own
types” (p.117).
•Forold-style class constructors, seeSection 26.1.2, “Instantiation ofanold-style class: Theconstructor,
.__init__() ”(p.121).
•Fornew-style class constructors, seeSection 26.2,“Life cycle ofanew-style class” (p.123).
Many special methods fallintobroad categories:
•Section 26.3.1, “Rich comparison methods” (p.128):formethods thatimplement comparisons such
as“<=”and“==”.
•Section 26.3.2, “Special methods forbinary operators” (p.129):foroperators thatoperate ontwoop-
erands, such as“%”.
•Section 26.3.3, “Unary operator special methods” (p.129):foroperators thatoperate onasingle operand,
such asnegation, “-”.
•Section 26.3.4, “Special methods toemulate built-in functions” (p.130):forclasses thathandle calls to
built-in functions such as“str() ”.
26.3.1. Rich comparison methods
These special methods allow your class tospecify what happens when comparison operators such as
“<=”areused, and theleft-hand operator isaninstance ofyour class. (Inmost cases theright-hand
operator isalsoaninstance ofthesame class, butthisisnotactually required.)
Ineach case, thecalling sequence forthemethod must look likethis:
def__method__ (self,other):
...
Theself argument istheleft-hand operand andtheother argument istheoperand ontheright hand
oftheoperator.
Each method must return anumeric value:
•Anegative number indicates thatself precedesother .
•Zero indicates thatself andother areconsidered equal.
•Apositive number indicates thatother precedesself .
•Ifthemethod does notimplement theoperation, itmay return thespecial valueNotImplemented .
Method name Operator
__eq__==
__ge__>=
__gt__>
__le__<=
__lt__<
__ne__!=
New Mexico Tech Computer Center Python 2.7quick reference 128
26.3.2. Special methods forbinary opera tors
Your class candefine special methods with these names totellPython how tohandle binary operators
such as“*”or“%”.Ineach case, thecalling sequence willlook something likethis:
def__method__ (self,other):
...
Theself argument istheleft-hand operand, andtheother argument istheright-hand operand. Your
method willreturn theresult oftheoperation.
Foreach operator, youmay supply uptothree methods:
•Themethod inthefirstcolumn performs thenormal operation.
•Themethod inthesecond column isused when theleft-hand operand does notsupport thegiven
operation andtheoperands have different types. Inthese methods,self istheright-hand operand
andother istheleft-hand operand.
•Thethird column implements the“augmented assignment” operators such as“+=”.Forexample, for
method__iadd__(self, other) ,themethod must perform theequivalent of“self+=other ”.
Augmented Reversed Normal Operator
__iadd__ __radd__ __add__+
__iand__ __rand__ __and__&
__idiv__ __rdiv__ __div__/
__ifloordiv__ __rfloordiv__ __floordiv__//
__ilshift__ __rlshift__ __lshift__<<
__imod__ __rmod__ __mod__%
__imul__ __rmul__ __mul__*
__ior__ __ror__ __or__|
__ipow__ __rpow__ __pow__**
__irshift__ __rrshift__ __rshift__>>
__isub__ __rsub__ __sub__-
__ixor__ __rxor__ __xor__^
26.3.3. Unary opera torspecial methods
You candefine these special methods inyour class tospecify what happens when aunary operator
such as“-”(negate) isapplied toaninstance oftheclass.
Ineach case, thedefinition willlook likethis:
def__method__ (self):
...
Themethod returns theresult oftheoperation.
Method Operator
__invert__~
__neg__-
__pos__+
129 Python 2.7quick reference New Mexico Tech Computer Center
26.3.4. Special methods toemula tebuilt-in functions
Youcandefine special methods thatwillhandle calls tosome ofPython's built-in functions. Thenumber
ofarguments willbethesame asforthebuilt-in functions, except thatself isalways thefirstargument.
Forexample, aspecial method tohandle calls tofunctiondivmod( x,y)willlook likethis:
def__divmod__(self, other):
...
Inthismethod, thevalue ofthefirst argument will bepassed toself and thesecond argument to
other .
Method Function
__abs__ abs
__complex__ complex
__divmod__ divmod
__hex__ hex
__int__ int
__len__ len
__long__ long
__mod__ mod
__oct__ oct
__str__ str
__unicode__ unicode
26.3.5.__call__() :Whattodowhen someone calls aninstanc e
Ifaclass hasa.__call__() method, itsinstances canbecalled asifthey were functions.
Any arguments passed inthatfunction callbecome arguments tothe.__call__() method. Example:
>>>classCallMe(object):
... def__call__(self, *p,**k):
... print"CallMe instance calledwith:"
... print"Positional arguments", p
... print"Keyword arguments", k
...
>>>c=CallMe()
>>>c(1,'rabbit', fetchez='la vache', hamster='elderberries')
CallMeinstance calledwith:
Positional arguments (1,'rabbit')
Keyword arguments {'fetchez': 'lavache', 'hamster': 'elderberries'}
26.3.6.__cmp__() :Generaliz edcomparison
Thepurpose ofthisspecial method istoimplement comparison operations between instances. Itwill
becalled inthese situations:
New Mexico Tech Computer Center Python 2.7quick reference 130
•Ifthebuilt-incmp() function iscalled tocompare aninstance ofaclass tosome other value, andthe
class hasa.__cmp__() method, thatmethod iscalled toperform thecomparison.
•When aninstance appears ontheleft-hand sideofacomparison (relational) operator, andthatinstance's
class hasathecorresponding rich-comparison method (such as.__eq__() forthe“==”operator;
seeSection 26.3.1, “Rich comparison methods” (p.128)),therich-comparison method willbecalled
toperform thecomparison. and, ifso,thatmethod iscalled.
Thecomparison operators are“<”,“<=”,“==”,“!=”,“>”,and“>=”.
However, iftheclass does nothave thecorrect rich-comparison method, butitdoes have a
.__cmp__() method, thatmethod willbecalled toevaluate thecomparison.
Thecalling sequence is:
def__cmp__(self, other):
...
Theconvention forreturn values isthesame onedescribed inSection 20.8,“cmp() :Compare twoval-
ues” (p.62):negative ifself precedesother ,positive ifother precedesself ,zero ifthey arecon-
sidered equal.
26.3.7.__contains__() :The “in”and“notin”opera tors
This special method defines how instances ofaclass behave when they appear astheright-hand operand
ofPython's “in”and“notin”operators.
Here isthecalling sequence:
def__contains__(self, x):
...
Themethod returnsTrue ifxisconsidered tobeinself ,False otherwise.
26.3.8.__del__() :Destruct or
Ifaclass hasa.__del__() method, thatmethod iscalled when aninstance isdeleted. Fordetails, see
Section 26.1.5, “Instance deletion: thedestructor, .__del__() ”(p.123).
26.3.9.__delattr__() :Delet eanattribut e
Ifaclass hasa.__delattr__() method, thatmethod iscalled when anattribute isdeleted. Here is
thecalling sequence:
def__delattr__(self, name):
...
Thename argument isthename oftheattribute tobedeleted.
26.3.10.__delitem__() :Delet eoneitemofasequenc e
This method defines thebehavior ofadel statement ofthisform:
dels[i]
131 Python 2.7quick reference New Mexico Tech Computer Center
Such astatement canbeused either onobjects thatactlikesequences, whereispecifies theposition of
theelement tobedeleted, ormapping objects (that is,dictionary-like objects), whereiisthekeyofthe
key-value pair tobedeleted.
Thecalling sequence is:
def__delitem__(self, i):
...
26.3.11.__enter__ :Cont extmana gerinitializa tion
Forageneral explanation ofcontext managers, seeSection 23.9,“Thewith statement and context
managers” (p.107).Aclass thatactsacontent manager must provide thisspecial method aswell asthe
onedescribed inSection 26.3.12, “__exit__ :Context manager cleanup” (p.132).
Theexpression thatfollows thewordwith inthewith statement must evaluate toacontext manager,
whose.__enter__() method iscalled with noarguments (other thanself ).Thevalue itreturns will
bebound tothevariable named inthewith statement's asclause, ifonewasprovided.
26.3.12.__exit__ :Cont extmana gercleanup
Forageneral explanation ofcontext managers, seeSection 23.9,“Thewith statement and context
managers” (p.107).Aclass thatactsacontent manager must provide thisspecial method aswell asthe
onedescribed inSection 26.3.11, “__enter__ :Context manager initialization” (p.132).
When thebody ofawith statement completes itsexecution, the.__exit__() method oftherelated
context manager Miscalled with three arguments. Iftheblock terminated without raising anexception,
allthree arguments willbeNone ;otherwise seebelow.
M.__exit__(self, eType,eValue,eTrace)
eType
Thetype oftheexception.
eValue
Theexception instance raised.
eTrace
Atraceback instance. Formore information about stack traces, seethedocumentation forthe
traceback module29.
Your.__exit__() method's return value determines what happens next iftheblock raised anexception.
IfitreturnsTrue ,Python ignores theexception andproceeds with execution atapoint justafter the
with block. Ifyoudon't want your context manager tosuppress theexception, don't re-raise itexplicitly,
justreturnFalse andPython willthen re-raise theexception.
26.3.13.__format__ :Implement theformat() function
Usethisspecial method todetermine how aninstance ofyour class actswhen passed tothefunction
described inSection 20.16, “format() :Format avalue” (p.66).Thecalling sequence is:
def__format__(self, fmt):
...
29http://docs.python.org/library/traceback.html
New Mexico Tech Computer Center Python 2.7quick reference 132
Theinterpretation ofthefmt argument isentirely uptoyou. Thereturn value should beastring rep-
resentation oftheinstance.
Ifthecalltotheformat() function does notprovide asecond argument, thefmt value passed tothis
method willbeanempty string.
26.3.14.__getattr__() :Handle areferencetoanunkno wnattribut e
This method, ifpresent, handles statements that getanattribute value ofaninstance, butthere isno
such entry intheinstance's namespace. Thecalling sequence is:
def__getattr__(self, name):
...
Theargument isthename ofthedesired attribute. Themethod must either return theattribute's value
orraise anAttributeError exception.
Compare Section 26.3.15, “__getattribute__() :Intercept allattribute references” (p.133),which is
called even iftheinstance namespace doeshave anattribute with thedesired name.
26.3.15.__getattribute__() :Interceptallattribut ereferences
This method iscalled whenever anattribute isreferenced, whether theinstance orclass namespace has
anattribute with thegiven name ornot.Itworks only with new-style classes.
Foranoverview andexamples, seeSection 26.2.2, “Attribute access control innew-style classes” (p.124).
26.3.16.__getitem__() :Getoneitemfromasequenc eormapping
Ifaclass defines it,thisspecial method iscalled whenever avalue isretrieved from asequence or
mapping (dictionary-like object) using thesyntax “v[i]”,wherevisthesequence ormapping andi
isaposition inasequence, orakeyinamapping.
Here isthecalling sequence:
def__getitem__(self, i):
...
Themethod either returns thecorresponding item orraises anappropriate exception: IndexError for
sequences orKeyError formappings.
26.3.17.__iter__() :Createaniterator
Ifaclass defines an.__iter__() method, thatmethod iscalled:
•Whenever thebuilt-initer() function isapplied toaninstance oftheclass.
•Inanysituation where theinstance isiterated over, such aswhen itappears asthecontrolling iterable
ofafor statement.
Thecalling sequence is:
def__iter__(self):
...
133 Python 2.7quick reference New Mexico Tech Computer Center
Thereturn value must beaniterator. Aniterator isanyobject thathasa.next() method thatreturns
thenext value inthesequence, orraisesStopIteration when thesequence isexhausted. Formore
information, seeSection 24.2,“Iterators: Values thatcanproduce asequence ofvalues” (p.110).
26.3.18.__nonzero__() :True/false evalua tion
Ifaclass defines it,thisspecial method iscalled whenever aninstance isconverted toaBoolean value,
either implicitly (forexample, when itisthetestinan“if”statement) orexplicitly viathebuilt-in
bool() function. Here isthecalling sequence:
def__nonzero__(self):
...
Return aBoolean value, eitherTrue orFalse .
26.3.19.__repr__() :String representa tion
Ifaclass defines it,thisspecial method iscalled tofind the“representation” ofanobject. There aretwo
ways togetarepresentation:
•Viathefunction described inSection 21.17, “repr() :Representation” (p.87).
•Viathe“back-quote operator”, enclosing aPython expression inopen single quotes.
Thecalling sequence is:
def__repr__(self):
...
Themethod returns therepresentation ofself asastring.
26.3.20.__reversed__() :Implement thereversed() function
Ifprovided, thismethod allows thereversed() function tobeapplied toaninstance oftheclass. It
returns aniterator thatiterates over thecontained elements inreverse order.
26.3.21.__setattr__() :Interceptallattribut echanges
Ifaclass defines it,thismethod iscalled whenever anew value isstored into anattribute. Calling se-
quence:
def__setattr__(self, name,value):
...
Themethod setstheattribute given bythename argument tothevalue argument, orraisesAttrib-
uteError ifthatoperation isnotpermitted.
26.3.22.__setitem__() :Assign avalue tooneitemofasequenc e
Ifaclass defines it,thismethod iscalled whenever anew value isstored into asequence ormapping
(dictionary-like object), such asinstatements ofthisform:
V[i]=expr
Here isthecalling sequence:
New Mexico Tech Computer Center Python 2.7quick reference 134
def__setitem__(self, i,value):
...
Forsequence-type objects, theiargument specifies theposition inthesequence tobemodified. For
mappings, theiargument isthekeyunder which thevalue istobestored.
26.4. Staticmethods
Astatic method ofaPython class isamethod thatdoes notobey theusual convention inwhichself ,
aninstance oftheclass, isthefirstargument tothemethod.
Todeclare astatic method, declare themethod normally, andwrap itwith thebuilt-instaticmethod
function, using either ofthetechniques described inSection 21.20, “staticmethod() :Create astatic
method” (p.89).
Once youhave declared amethod tobestatic, thearguments youpass itareexactly thearguments it
receives. Example:
>>>classHobbs:
... @staticmethod
... defrepresent():
... print"Hobbsrepresent!"
...
>>>Hobbs.represent()
Hobbsrepresent!
26.5. Class methods
Aclass method issimilar toastatic method (seeSection 26.4,“Static methods” (p.135)),except thatits
firstargument isalways theclass thatcontains themethod.
Todeclare aclass method, useadeclaration ofthisgeneral form:
@classmethod
defmethodName (cls,...):
...
When thismethod iscalled, thefirstargument (cls)willbetheclass containing methodName .
There aretwoways tocallaclass method: using itsclassC,oraninstance i.These twogeneral forms
are:
C.methodName (...)
i.methodName (...)
Inthefirst case, theclassCispassed asthecls argument ofthemethod. Inthesecond case, theclass
ofinstance iispassed asthecls argument.
>>>classJal(object):
... @classmethod
... defwhatClass(cls, n):
... print"cls={0} n={1}".format(cls, n)
... def__init__(self, color):
... self.color =color
...
135 Python 2.7quick reference New Mexico Tech Computer Center
>>>Jal.whatClass(5)
cls=<class '__main__.Jal'> n=5
>>>eunice=Jal('green')
>>>eunice.whatClass(17)
cls=<class '__main__.Jal'> n=17
27.pdb:ThePython interactivedebugger
ThePython debugger allows youtomonitor andcontrol execution ofaPython program, toexamine
thevalues ofvariables during execution, andtoexamine thestate ofaprogram after abnormal termin-
ation (post-mortem analysis).
•Section 27.1,“Starting uppdb”(p.136).
•Section 27.2,“Functions exported bypdb”(p.136).
•Section 27.3,“Commands available inpdb”(p.137).
27.1. Startinguppdb
Toexecute anyPython statement under thecontrol ofpdb:
>>>importpdb
>>>importyourModule
>>>pdb.run('yourModule.test()') #Oranyotherstatement
whereyourModule.py contains thesource code youwant todebug.
Todebug aPython script namedmyscript.py :
python/usr/lib/python2.5/pdb.py myscript.py
Toperform post-mortem analysis:
>>>importpdb
>>>importyourModule
>>>yourModule.test()
[crashtraceback appears here]
>>>pdb.pm()
(pdb)
Then youcantype debugger commands atthe(pdb) prompt.
27.2. Functions expor tedbypdb
Thepdb module exports these functions:
pdb.run( stmt[,globals[,locals]])
Executes anyPython statement. You must provide thestatement asastring .Thedebugger prompts
you before beginning execution. You canprovide your own global name space byproviding a
globals argument; thismust beadictionary mapping global names tovalues. Similarly, youcan
provide alocal namespace bypassing adictionary locals .
pdb.runeval( expr[,globals[,locals]])
This issimilar tothepdbrun command, butitevaluates anexpression, rather than astatement.
Theexpr isanyPython expression instring form.
New Mexico Tech Computer Center Python 2.7quick reference 136
pdb.runcall( func[,arg]...)
Calls afunction underpdb control. Thefunc must beeither afunction oramethod. Arguments
after thefirstargument arepassed toyour function.
27.3. Commands available inpdb
Thedebugger prompts with alinelikethis:
(pdb)
Atthisprompt, you cantype anyofthepdb commands discussed below. You canabbreviate any
command byomitting thecharacters insquare brackets. Forexample, thewhere command canbeab-
breviated assimplyw.
expr
Evaluate anexpression expr andprint itsvalue.
!stmt
Execute aPython statement stmt .The“!”may beomitted ifthestatement does notresemble a
pdb command.
(empty line)
Ifyoupress Enter atthe(pdb) prompt, theprevious command isrepeated. Thelist command
isanexception: anempty lineentered after alist command shows youthenext 11lines after the
ones previously listed.
a[rgs]
Display theargument names andvalues tothecurrently executing function.
b[reak] [[filename :]lineno[,condition ]]
Thebreak command setsabreakpoint atsome location inyour program. Ifexecution reaches a
breakpoint, execution willbesuspended andyouwillgetback tothe(pdb) prompt.
This form ofthecommand setsabreakpoint ataspecific lineinasource file.Specify thelinenumber
within your source fileaslineno ;addthefilename :ifyouareworking with multiple source
files, orifyour source filehasn't been loaded yet.
You canalsospecify aconditional breakpoint, thatis,onethatinterrupts execution only ifagiven
condition evaluates astrue. Forexample, thecommand break92,i>5 would break atline92
only wheniisgreater than 5.
When yousetabreakpoint, pdbprints a“breakpoint number.” You willneed toknow thisnumber
toclear thebreakpoint.
b[reak] [function [,condition ]]
This form ofthebreak command setsabreakpoint onthefirst executable statement ofthegiven
function .
c[ont[inue]]
Resume execution until thenext breakpoint (ifany).
cl[ear] [lineno]
Ifused without anargument, clears allbreakpoints. Toclear onebreakpoint, give itsbreakpoint
number (seebreak above).
h[elp][cmd]
Without anargument, prints alistofvalid commands. Usethecmdargument togethelp oncommand
cmd.
137 Python 2.7quick reference New Mexico Tech Computer Center
l[ist][begin[,end]]
Displays your Python source code. With noarguments, itshows 11lines centered around thecurrent
point ofexecution. Thelineabout tobeexecuted ismarked with anarrow (->),andtheletterB
appears atthebeginning oflines with breakpoints set.
Tolook atagiven range ofsource lines, usethebegin argument tolist11lines around that line
number, orprovide theending linenumber asanend argument. Forexample, thecommand list
50,65 would listlines 50-65.
n[ext]
Likestep ,butdoes notstop upon entry toacalled function.
q[uit]
Exitpdb.
r[eturn]
Resume execution until thecurrent function returns.
s[tep]
Single step: execute thecurrent line. Ifanyfunctions arecalled inthecurrent line,pdb willbreak
upon entering thefunction.
tbreak
Same options andbehavior asbreak ,butthebreakpoint istemporary, thatis,itisremoved after
thefirsttime itishit.
w[here]
Shows your current location intheprogram asastack traceback, with anarrow (->)pointing to
thecurrent stack frame.
28.Commonly used modules
Thesections below discuss only atiny fraction oftheofficial andunofficial module library ofPython.
Forafullset,consult thePython Library Reference30.
Ifyouwant touseanyofthese modules, youmust import them. SeeSection 22.6,“Theimport statement:
Useamodule” (p.96).
28.1.math :Common mathema tical opera tions
This module provides theusual basic transcendental mathematical functions. Alltrigfunctions use
angles inradians. (Forasimilar setoffunctions using thecomplex number system, seethePython library
documentation forthecmath module31.)
Themath module hastwoconstant attributes:
Theconstant 3.14159... pi
Thebase ofnatural logarithms, 2.71828... e
Functions inthismodule include:
Angle (inradians) whose cosine isx,thatis,arccosine ofx. acos(x)
30http://docs.python.org/library/31http://docs.python.org/library/cmath.html
New Mexico Tech Computer Center Python 2.7quick reference 138
Inverse hyperbolic cosine ofx acosh(x)
Arcsine ofx. asin(x)
Inverse hyperbolic sine ofx asinh(x)
Arctangent ofx. atan(x)
Inverse hyperbolic tangent ofx atanh(x)
Angle whose slope isy/x,even ifxiszero. atan2(y,x)
True ceiling function, defined asthesmallest integer thatisgreater than orequal to
x.Forexample,ceil(3.9) yields 4.0,whileceil(-3.9) yields -3.0.ceil(x)
Cosine ofx,wherexisexpressed inradians. cos(x)
Hyperbolic cosine ofx. cosh(x)
Forxinradians, returns thatangle indegrees. degrees( x
Error function. erf(x)
Error function complement. erfc(x)
etothexpower. exp(x)
Returns theabsolute value ofxasafloat value. fabs(x
Returns thefactorial ofn,which must beanonnegative integer. factorial( n)
Truefloor function, defined asthelargest integer thatislessthan orequal tox.For
example,floor(3.9) is3.0,andfloor(-3.9) is-4.0.floor(x)
Returns(x-int(x/y)*y). fmod(x,y)
Forafloat valuex,returns atuple(m,e)wheremisthemantissa andeistheex-
ponent. Forx=0.0 ,itreturns(0.0,0);otherwise, abs(m)isafloat inthehalf-
open interval [0.5, 1)andeisaninteger, such thatx==m*2**e .frexp(x)
Gamma function. gamma(x)
Thesquare root of(x2+y2). hypot(x,y)
Returnsx*(2**i).This istheinverse offrexp() . ldexp(x,i)
Natural logofabs(gamma( x)). lgamma( x)
With oneargument, returns thenatural logofx.With thesecond argument, returns
thelogofxtothebaseb.log(x[,b)
Common log(base 10)ofx. log10(x)
Returns atuple(f,i)wherefisthefractional part ofx,iistheintegral part (as
afloat), andboth have thesame sign asx.modf(x)
Forxindegrees, returns thatangle inradians. radians( x)
Sine ofx. sin(x)
Hyperbolic sine ofx. sinh(x)
Square root ofx. sqrt(x)
Tangent ofx. tan(x)
Hyperbolic tangent ofx. tanh(x)
28.2.string :Utility functions forstrings
Variables andfunctions forworking with character strings.
139 Python 2.7quick reference New Mexico Tech Computer Center
ascii_letters
Astring containing alltheletters fromascii_uppercase andascii_lowercase .
ascii_lowercase
Thecharacters thatareconsidered lowercase letters intheASCII32character set,namely:
"abcdefghijklmnopqrstuvwxyz"
ascii_uppercase
"ABCDEFGHIJKLMNOPQRSTUVWXYZ"
Thevalue ofthisconstant does notdepend onthelocale setting; seeSection 19.4,“What istheloc-
ale?” (p.60).
digits
Thedecimal digits:"0123456789" .
hexdigits
Thehexadecimal digits:"0123456789abcdefABCDEF" .
letters
Astring containing allthecharacters thatareconsidered letters inthecurrent locale .
lowercase
Astring containing allthecharacters thatareconsidered lowercase letters inthecurrent locale .
maketrans( s,t)
Builds atranslation table tobeused asthefirst argument tothe.translate() string method.
Thearguments sandtaretwostrings ofthesame length; theresult isatranslation table thatwill
convert each character ofstothecorresponding character oft.
>>>importstring
>>>bingo=string.maketrans("lLrR", "rRlL")
>>>"Cornwall Llanfair".translate(bingo)
'Colnwarr Rranfail'
>>>"Cornwall Llanfair".translate(bingo, 'ai')
'Colnwrr Rrnfl'
octdigits
Theoctal digits:"01234567" .
printable
Astring containing alltheprintable characters.
punctuation
Allprintable characters that arenotletters ordigits inthecurrent locale .IfASCII33isthelocale's
current encoding, these characters areincluded:
!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~
uppercase
Astring containing allthecharacters that areconsidered uppercase letters inthecurrent locale .
May notbethesame asascii_uppercase
32http://en.wikipedia.org/wiki/ASCII33http://en.wikipedia.org/wiki/ASCII
New Mexico Tech Computer Center Python 2.7quick reference 140
whitespace
Astring containing allthecharacters considered tobewhite space inthecurrent locale .ForASCII
thiswillbe:
"\t\n\x0b\x0c\r "
SeeSection 9.2,“Definition of“whitespace”” (p.15).
28.3.random :Random number genera tion
This module provides forthegeneration ofpseudorandom numbers.
Any onewho considers arithmetical methods ofproducing random digits is,ofcourse,
inastate ofsin.For,ashasbeen pointed outseveral times, there isnosuch thing asa
random number—there areonly methods toproduce random numbers, and astrict
arithmetic procedure ofcourse isnotsuch amethod.
—John vonNeumann34
choice( S)
Returns arandomly selected element from aniterableS.
>>>foriinrange(9): printchoice(['s','h','d','c']),
...
scchcsshd
normalvariate( m,s)
Generate anormally distributed pseudorandom number with meanmandstandard deviation s.
randint( x,y)
Returns arandom integer intheclosed interval [x,y];thatis,anyresult rwillsatisfyx<=r<=
y.
>>>foriinrange(20): printrandint(1,6),
...
34632112121233356442
random()
Returns arandom float inthehalf-open interval [0.0, 1.0); that is,foranyresultr,0.0<=r<
1.0.
>>>forcountinrange(48):
... print"{0:.3f}".format(random()),
... if(count%12)==11:print
...
0.0120.7500.8990.3390.3710.5610.3580.9310.8220.9900.6820.847
0.2450.5410.9920.1510.3940.3350.7020.8850.9860.3500.4170.748
0.9180.1030.1090.3280.4230.1800.2030.6890.6000.7940.2010.008
0.5640.9200.9060.4690.5100.8180.1420.5890.5900.2900.6500.889
randrange([ start,]stop[,step])
Return arandom element from thesequencerange(start,stop,step).
34http://en.wikiquote.org/wiki/John_von_Neumann
141 Python 2.7quick reference New Mexico Tech Computer Center
>>>fromrandomimport*
>>>foriinrange(35): printrandrange(4),
...
02221123133222302001202111222113112
>>>foriinrange(35): printrandrange(1,5),
...
33211144321132124414244111114411221
>>>range(2,18,5)
[2,7,12,17]
>>>foriinrange(28): printrandrange(2,18,5),
...
1227217177712171727171277121717712777777
shuffle( L)
Randomly permute theelements ofasequence L.
Here's anexample. First webuild a(small) deck ofcards, using alistcomprehension tobuild alist
ofallpossible combinations ofthree ranks (ace, king, queen) andfour suits (spades, hearts, diamonds,
andclubs). Then weshuffle thedeck twice andinspect theresults.
>>>ranks='AKQ'
>>>suits='shdc'
>>>deck=[r+s
... forsinsuits
... forrinranks]
>>>deck
['As','Ks','Qs','Ah','Kh','Qh','Ad','Kd','Qd','Ac','Kc','Qc']
>>>shuffle(deck)
>>>deck
['Qh','Ks','Kh','As','Kc','Kd','Qd','Qc','Ah','Ad','Qs','Ac']
>>>shuffle(deck)
>>>deck
['As','Qs','Ks','Kc','Ad','Kh','Qh','Ac','Ah','Qc','Qd','Kd']
uniform( x,y)
Returns arandom float inthehalf-open interval [x,y);thatis,each resultrwillsatisfyx<=r<
y.
Anassortment ofother pseudorandom distributions isavailable. SeethePython Library Reference35for
details.
28.4.time :Clock andcalendar functions
This module provides minimal time anddate functions. Foranewer andmore complete module, see
thedatetime module36.
•Epoch time isthetime inseconds since some arbitrary starting point. Forexample, Unix measures
time inseconds since January 1,1970.
•UTC isCoordinated Universal Time, thetime onthezero meridian (which goes through London).
•DST refers toDaylight Savings Time.
35http://docs.python.org/library/random.html36http://docs.python.org/library/datetime
New Mexico Tech Computer Center Python 2.7quick reference 142
Atime tuple isa9-tupleTwith these elements, allintegers:
Second, in[0,59]. T[5] Four-digit year. T[0]
Day ofweek, 0forMonday, 6forSunday. T[6] Month, 1forJanuary, 12forDecember. T[1]
Ordinal dayoftheyear, in[1,366]. T[7] Day ofmonth, in[1,31]. T[2]
DSTflag:1ifthetime isDST,0ifitisnotDST,
and-1ifunknown.T[8] Hour, in[0,23]. T[3]
Minute, in[0,59]. T[4]
Contents ofthetime module:
altzone
Thelocal DST offset, inseconds west ofUTC (negative foreastofUTC).
asctime([ T])
Foratime-tuple T,returns astring ofexactly 24characters with thisformat:
"ThuJun1215:25:31 1997"
Thedefault time isnow.
clock()
Theaccumulated CPU time ofthecurrent process inseconds, asafloat.
ctime([ E])
Converts anepoch timeEtoastring with thesame format asasctime() .Thedefault time isnow.
daylight
Nonzero ifthere isaDST value defined locally.
gmtime([ E])
Returns thetime-tuple corresponding toUTC atepoch timeE;theDSTflagwillbezero. Thedefault
time isnow.
localtime([ E])
Returns thetime-tuple corresponding tolocal time atepoch timeE.Thedefault time isnow.
mktime( T)
Converts atime-tuple Ttoepoch time asafloat, whereTisthelocal time.
sleep(s)
Suspend execution ofthecurrent process forsseconds, wherescanbeafloat orinteger.
strftime( f[,t])
Time formatting function; formats atime-tuple taccording toformat stringf.Thedefault timet
isnow. Aswith theoldstring format operator ,format codes start with%,andother textappears
unchanged intheresult. Seethetable ofcodes below.
time()
Thecurrent epoch time, asafloat.
timezone
Thelocal non-DST time zone asanoffset inseconds west ofUTC (negative foreastofUTC). This
value applies when daylight savings time isnotineffect.
143 Python 2.7quick reference New Mexico Tech Computer Center
tzname
A2-tuple (s,d)wheresisthename ofthenon-DST time zone locally anddisthename ofthelocal
DST time zone. Forexample, inSocorro, NM, youget('MST', 'MDT') .
Format codes forthestrftime function include:
Abbreviated weekday name, e.g.,'Tue' . %a
Fullweekday name, e.g.,'Tuesday' . %A
Abbreviated month name, e.g.,'Jul' . %b
Fullmonth name, e.g.,'July' . %B
Day ofthemonth, twodigits with leftzerofill;e.g.'03' . %d
Hour onthe24-hour clock, twodigits with zerofill. %H
Hour onthe12-hour clock, twodigits with zerofill. %I
Day oftheyear asadecimal number, three digits with zerofill,e.g.'366'. %j
Decimal month, twodigits with zerofill. %m
Minute, twodigits with zerofill. %M
Either'AM' or'PM' .Midnight isconsidered AMandnoon PM. %p
Second, twodigits with zerofill. %S
Numeric weekday: 0forSunday, 6forSaturday. %w
Two-digit year. Notrecommended!37%y
Four-digit year. %Y
Ifthere isatime zone, astring representing thatzone; e.g.,'PST' . %Z
Outputs thecharacter%. %%
28.5.re:Regular expression pattern-ma tching
Theremodule provides functions formatching strings against regular expressions. SeetheO'Reilly
book Mastering Regular Expressions byFriedl andOram forthewhys andhows ofregular expressions.
Wediscuss only themost common functions here. Refer tothePython Library Reference38forthefull
feature set.
•Section 28.5.1, “Characters inregular expressions” (p.144).
•Section 28.5.2, “Functions intheremodule” (p.146).
•Section 28.5.3, “Compiled regular expression objects” (p.147).
•Section 28.5.4, “Methods onaMatchObject ”(p.147).
28.5.1. Chara ctersinregular expressions
Note:Theraw string notationr'...' ismost useful forregular expressions; seeraw strings (p.15),
above.
These characters have special meanings inregular expressions:
Matches anycharacter except anewline. .
37http://en.wikipedia.org/wiki/Y2k38http://docs.python.org/library/re.html
New Mexico Tech Computer Center Python 2.7quick reference 144
Matches thestart ofthestring. ^
Matches theendofthestring. $
Matches zero ormore repetitions ofregular expression r. r*
Matches oneormore repetitions ofr. r+
Matches zero oroner. r?
Non-greedy form ofr*;matches asfewcharacters aspossible. Thenormal*operator is
greedy: itmatches asmuch textaspossible.r*?
Non-greedy form ofr+. r+?
Non-greedy form ofr?. r??
Matches frommtonrepetitions ofr.Forexample,r'x{3,5}' matches between three
andfivecopies ofletter'x';r'(bl){4}' matches thestring'blblblbl' .r{m,n}
Non-greedy version oftheprevious form. r{m,n}?
Matches onecharacter from asetofcharacters. You canputalltheallowable characters
inside thebrackets, orusea-btomean allcharacters fromatobinclusive. Forexample,[...]
regular expression r'[abc]' willmatch either'a','b',or'c'.Patternr'[0-9a-zA-
Z]' willmatch anysingle letter ordigit.
Matches anycharacter notinthegiven set. [^...]
Matches expression rfollowed byexpression s. rs
Matches eitherrors. r|s
Matches randforms itinto agroup that canberetrieved separately after amatch; see
MatchObject ,below. Groups arenumbered starting from 1.(r)
Matches rbutdoes notform agroup forlater retrieval. (?:r)
Matches randforms itintoanamed group, with namen,forlater retrieval. (?P<n>r)
Matches whatever string matched anearlier(?P<n>r)group. (?P=n)
Comment: the“...”portion isignored andmay contain acomment. (?#...)
The“...”portion must bematched, butisnotconsumed bythematch. This issometimes
called alookahead match. Forexample,r'a(?=bcd)' matches thestring'abcd' but(?=...)
notthestring'abcxyz' .Compared tousingr'abcd' astheregular expression, the
difference isthatinthiscase thematched portion would be'a' andnot'abcd' .
This issimilar tothe(?=...) :itspecifies aregular expression thatmust notmatch, but
does notconsume anycharacters. Forexample,r'a(?!bcd)' would match'axyz' ,(?!...)
andreturn'a' asthematched portion; butitwould notmatch'abcdef' .You could
callitanegative lookahead match.
Thespecial sequences inthetable below arerecognized. However, many ofthem function inways that
depend onthelocale; seeSection 19.4,“What isthelocale?” (p.60).Forexample, ther'\s' sequence
matches characters thatareconsidered whitespace inthecurrent locale.
Matches thesame textasagroup thatmatched earlier, wherenisthenumber ofthatgroup. For
example,r'([a-zA-Z]+):\1' matches thestring"foo:foo" .\n
Matches only atthestart ofthestring. \A
Matches theempty string butonly atthestart orend ofaword (where aword issetoffby
whitespace oranon-alphanumeric character). Forexample,r'foo\b' would match"foo" but
not"foot" .\b
145 Python 2.7quick reference New Mexico Tech Computer Center
Matches theempty string when notatthestart orendofaword. \B
Matches anydigit. \d
Matches anynon-digit. \D
Matches anywhitespace character . \s
Matches anynon-whitespace character. \S
Matches anyalphanumeric character plus theunderbar'_'. \w
Matches anynon-alphanumeric character. \W
Matches only attheendofthestring. \Z
Matches abackslash (\)character. \\
28.5.2. Functions intheremodule
There aretwoways tomatch regular expressions with theremodule. Assuming youimport themodule
withimportre,youcantestwhether aregular expression rmatches astringswith theconstruct:
re.match( r,s)
However, ifyou will bematching thesame regular expression many times, theperformance will be
better ifyoucompile theregular expression likethis:
re.compile( r)
There.compile() function returns acompiled regular expression object. You canthen check astring
sformatching byusing the.match( s)method onthatobject.
Here arethefunctions inmodulere:
compile( r[,f])
Compile regular expression r.This function returns acompiled regular expression object; seeSec-
tion 28.5.3, “Compiled regular expression objects” (p.147).Togetcase-insensitive matching, use
re.I asthefargument. There areotherflags thatmay bepassed tothefargument; seethePython
Library Reference39.
match(r,s[,f])
Ifrmatches thestart ofstrings,return aMatchObject (seebelow), otherwise returnNone .
search( r,s[,f])
Like thematch() method, butmatches ranywhere ins,notjustatthebeginning.
split(r,s[,maxsplit= m])
Splits stringsintopieces where patternroccurs. Ifrdoes notcontain groups, returns alistofthe
parts ofsthat matchr,inorder. Ifrcontains groups, returns alistcontaining allthecharacters
froms,with parts matching rinseparate elements from thenon-matching parts. Ifthemargument
isgiven, itspecifies themaximum number ofpieces thatwillbesplit, andtheleftovers willbere-
turned asanextra string attheendofthelist.
sub(r,R,s[,count= c])
Replace theleftmost non-overlapping parts ofsthatmatchrusingR;returnssifthere isnomatch.
TheRargument canbeastring orafunction thattakes oneMatchObject argument andreturns
thestring tobesubstituted. Ifthecargument issupplied (defaulting to0),nomore thancreplace-
ments aredone, where avalue of0means dothem all.
39http://docs.python.org/library/re.html
New Mexico Tech Computer Center Python 2.7quick reference 146
28.5.3. Compiled regular expression objects
Compiled regular expression objects returned byre.compile() have these methods:
.match( s[,[ps][,pe]])
Ifthestart ofstringsmatches, return aMatchObject ;ifthere isnomatch, returnNone .Ifpsis
given, itspecifies theindex withinswhere matching istostart; thisdefaults to0.Ifpeisgiven, it
specifies themaximum length ofsthatcanbeused inmatching.
.pattern
Thestring from which thisobject wascompiled.
.search( s[,[ps][,pe]])
Likematch() ,butmatches anywhere ins.
.split( s[,maxsplit= m])
Likere.split() .
.sub(R,s[,count= c])
Likere.sub() .
28.5.4. Methods onaMatchObject
AMatchObject istheobject returned by.match() orother methods. Such anobject hasthese
methods andattributes:
.end([n])
Returns thelocation where amatch ended. Ifnoargument isgiven, returns theindex ofthefirst
character past thematch. Ifnisgiven, returns theindex ofthefirst character past where thenth
group matched.
.endpos
Theeffective pevalue passed to.match() or.search() .
.group([ n])
Retrieves thetextthatmatched. Ifthere arenoarguments, orifniszero, itreturns theentire string
thatmatched.
Toretrieve justthetextthat matched thenthgroup, pass inanintegern,where thegroups are
numbered starting at1.Forexample, foraMatchObject m,m.group(2) would return thetext
thatmatched thesecond group, orNone ifthere were nosecond group.
Ifyou have named thegroups inyour regular expression using aconstruct oftheform
(?P<name>...) ,thenargument canbethename asastring. Forexample, ifyouhave agroup
(?P<year>[\d]{4}) (which matches four digits), you can retrieve thatfield using
m.group('year') .
.groups([ default])
Return atuple(s1,s2,...) containing allthematched strings, wheresiisthestring thatmatched
theithgroup.
Forgroups that didnotmatch, thecorresponding value inthetuple willbeNone ,oranoptional
default value thatyouspecify inthecalltothismethod.
.groupdict([ default])
Return adictionary whose keys arethenamed groups intheregular expression. Each corresponding
value willbethetextthat matched thegroup. Ifagroup didnotmatch, thecorresponding value
willbeNone ,oranalternate default value thatyousupply when youcallthemethod.
147 Python 2.7quick reference New Mexico Tech Computer Center
.lastgroup
Holds thename ofthelastnamed group (using the(?P<n>r)construct) thatmatched. Itwillbe
None ifnonamed groups matched, orifthelastgroup thatmatched was anumbered group and
notanamed group.
.lastindex
Holds theindex ofthelastgroup thatmatched, orNone ifnogroups matched.
.pos
Theeffective psvalue passed to.match() or.search() .
.re
Theregular expression object used toproduce thisMatchObject .
.span([ n])
Returns a2-tuple(m.start( n),m.end(n)).
.start([ n])
Returns thelocation where amatch started. Ifnoargument isgiven, returns theindex within the
string where theentire match started. Ifanargument nisgiven, returns theindex ofthestart ofthe
match forthenthgroup.
.string
Thesargument passed to.match() or.search() .
28.6.sys:Univ ersal systeminterface
Theservices inthismodule give youaccess tocommand linearguments, standard input andoutput
streams, andother system-related facilities.
argv
sys.argv[0] isthename ofyour Python script, or'-c' ifininteractive mode. Theremaining
elements,sys.argv[1:] ,arethecommand linearguments, ifany.
builtin_module_names
Alistofthenames ofthemodules compiled intoyour installation ofPython.
exit(n)
Terminate execution with statusn.
modules
Adictionary ofthemodules already loaded.
path
Thesearch path formodules, alistofstrings insearch order.
Note: You canmodify thislist.Forexample, ifyouwant Python tosearch directory/u/dora/py-
thon/lib formodules toimport before searching anyother directory, these twolines willdoit:
importsys
sys.path.insert(0, "/u/dora/python/lib")
platform
Astring identifying thesoftware architecture.
stderr
Thestandard error stream asafileobject .
New Mexico Tech Computer Center Python 2.7quick reference 148
stdin
Thestandard input stream asafileobject .
stdout
Thestandard output stream asafileobject .
28.7.os:Theopera tingsysteminterface
Thevariables andmethods intheosmodule allow youtointeract withfiles anddirectories. Inmost
cases thenames and functionalities arethesame astheequivalent Clanguage functions, sorefer to
Kernighan andRitchie, TheCProgramming Language ,second edition, ortheequivalent formore details.
chdir(p)
Change thecurrent working directory tothatgiven bystringp
chmod(p,m)
Change thepermissions forpathname ptom.Seemodulestat ,below, forsymbolic constants to
beused inmaking upmvalues.
chown(p,u,g)
Change theowner ofpathname ptouser iduandgroup idg.
environ
Adictionary whose keys arethenames ofallcurrently defined environmental variables, andwhose
values arethevalues ofthose variables.
error
Theexception raised forerrors inthismodule.
execv(p,A)
Replace thecurrent process with anew process executing thefileatpathname p,whereAisalist
ofthestrings tobepassed tothenew process ascommand linearguments.
execve( p,A,E)
Likeexecv() ,butyousupply adictionary Ethatdefines theenvironmental variables forthenew
process.
_exit(n)
Exit thecurrent process andreturn status coden.This method should beused only bythechild
process after afork() ;normally youshould usesys.exit() .
fork()
Fork achild process. Inthechild process, thisfunction returns0;intheparent, itreturns thechild's
process ID.
getcwd()
Returns thecurrent working directory name asastring.
getegid()
Returns theeffective group ID.
geteuid()
Returns theeffective user ID.
getgid()
Returns thecurrent process's group ID.Todecode user IDs, seethegrp standard module40.
40http://docs.python.org/library/grp.html
149 Python 2.7quick reference New Mexico Tech Computer Center
getpid()
Returns thecurrent process's process ID.
getppid()
Returns theparent process's PID(process ID).
getuid()
Returns thecurrent process's user ID.Todecode user IDs, seethepwd standard module41.
kill(p,s)
Send signalstotheprocess whose process IDisp.
link(s,d)
Create ahard linktosandcallthelinkd.
listdir( p)
Return alistofthenames ofthefiles inthedirectory whose pathname isp.This listwill never
contain thespecial entries'.' and'..' forthecurrent andparent directories. Theentries may
notbeinanyparticular order.
lstat(p)
Likestat() ,butifpisalink, youwillgetthestatus tuple forthelinkitself, rather than thefileit
points at.
makedirs( p[,mode])
Works likemkdir() ,butwillalsocreate anyintermediate directories between existing directories
andthedesired new directory.
mkdir(p[,m])
Create adirectory atpathname p.Youmay optionally specify permissions m;seemodulestat below
fortheinterpretation ofpermission values.
mkfifo( p,m)
Create anamed pipe with namepandopen modem.Theserver side ofthepipe willopen itfor
reading, andtheclient side forwriting. This function does notactually open thefifo,itjustcreates
therendezvous point.
nice(i)
Renice (change thepriority) ofthecurrent process byaddingitoitscurrent priority.
readlink( p)
Ifpisthepathname toasoft(symbolic) link, thisfunction returns thepathname towhich thatlink
points.
remove( p)
Removes thefilewith pathname p,asintheUnixrmcommand. RaisesOSError ifitfails.
removedirs( p)
Similar toremove() ,butalso removes anyother parent directory inthepath that hasnoother
children.
rename( po,pn)
Rename pathpotopn.
rmdir(p)
Remove thedirectory atpathp.
41http://docs.python.org/library/pwd.html
New Mexico Tech Computer Center Python 2.7quick reference 150
stat(p)
Return astatus tuple describing thefileordirectory atpathname p.Seemodulestat ,below, for
theinterpretation ofastatus tuple. Ifpisalink, youwillgetthestatus tuple ofthefiletowhichp
islinked.
symlink( s,d)
Create asymbolic linktopaths,andcallthelinkd.
system( c)
Execute thecommand instringcasasub-shell. Returns theexitstatus oftheprocess.
times()
Returns atuple ofstatistics about thecurrent process's elapsed time. This tuple hastheform
(u,s,u',s',r)whereuisuser time,sissystem time,u'ands'areuser andsystem time includ-
ingallchild processes, andriselapsed realtime. Allvalues areinseconds asfloats.
tmpfile()
Returns anew, open temporary file,with update mode"w+b" .Thisfilewillnotappear inanydir-
ectory, andwilldisappear when itisnolonger inuse.
umask(m)
Setsthe“umask”thatdetermines thedefault permissions fornewly created files. Returns theprevious
value. Each bitsetintheumask corresponds toapermission thatisnotgranted bydefault.
uname()
Returns atuple ofstrings descriping theoperating system's version:(s,n,r,v,m) wheresisthe
name oftheoperating system,nisthename oftheprocessor (node) where youarerunning, ris
theoperating system's version number, visthemajor version, andmdescribes thetype ofprocessor.
urandom( n)
Return astring ofnrandom bytes. These bytes should besufficiently random foruseincryptographic
applications.
utime(p,t)
Thetargument must beatuple(a,m)whereaandmareepoch times. Forpathname p,setthe
lastaccess time toaandthelastmodification tom.
wait()
Wait forthetermination ofachild process. Returns atuple(p,e)wherepisthechild's process ID
andeisitsexitstatus.
waitpid( p,o)
Likewait() ,butitwaits fortheprocess whose IDisp.Theoption valueospecifies what todoif
thechild isstillrunning. Ifois0,youwait forthechild toterminate. Useavalue ofos.WNOHANG
ifyoudon't want towait.
WNOHANG
Seewaitpid() above.
28.8.stat :Interpretationoffilestatus
Thestat module contains anumber ofvariables used inencoding anddecoding various items returned
bycertain methods intheosmodule, such asstat() andchmod() .
First, there areconstants forindexing thecomponents ofa“status tuple” such asthat returned by
os.stat() :
Theepoch time oflastaccess (seethetime module forinterpretation oftimes). ST_ATIME
151 Python 2.7quick reference New Mexico Tech Computer Center
Theepoch time ofthefile's laststatus change. ST_CTIME
Thedevice number. ST_DEV
Thegroup ID. ST_GID
Thei-node number. ST_INO
Thefile's permissions. ST_MODE
Theepoch time oflastmodification. ST_MTIME
Thenumber ofhard links. ST_NLINK
Thecurrent sizeinbytes. ST_SIZE
Theuser ID. ST_UID
Thefollowing functions aredefined inthestat module fortesting amode valuem,wheremisthe
ST_MODE element ofthestatus tuple. Each function isapredicate :
Isthisablock device? S_ISBLK( m)
Isthisacharacter device? S_ISCHR( m)
Isthisadirectory? S_ISDIR( m)
IsthisaFIFO? S_ISFIFO( m)
Isthisasoft(symbolic) link? S_ISLNK( m)
Isthisanordinary file? S_ISREG( m)
Isthisasocket? S_ISSOCK( m)
These constants aredefined foruseasmask values intesting andassembling permission values such
asthose returned byos.stat() inSection 28.7,“os:Theoperating system interface” (p.149).
Group read permission. S_IRGRP
World read permission. S_IROTH
Owner read permission. S_IRUSR
SGID (setgroup ID)bit. S_ISGID
SUID (setuser ID)bit. S_ISUID
Group write permission. S_IWGRP
World write permission. S_IWOTH
Owner write permission. S_IWUSR
Group execute permission. S_IXGRP
World execute permission. S_IXOTH
Owner execute permission. S_IXUSR
28.9.os.path :Fileanddirectoryinterface
These functions allow youtodeal with path names anddirectory trees. Touseagivenmethod inthis
module, import theosmodule andthen useos.path. method() .
Forexample, togetthebase name ofapathp,useos.path.basename( p).
New Mexico Tech Computer Center Python 2.7quick reference 152
abspath( p)
Return theabsolute path name thatisequivalent topathp.
basename( p)
Return thebase name portion ofapath name stringp.Seesplit() ,below.
commonprefix( L)
ForalistLcontaining pathname strings, return thelongest string thatisaprefix ofeach element in
L.
exists( p)
Predicate fortesting whether pathname pexists.
expanduser( p)
Ifpisapathname starting with atilde character (~),return theequivalent fullpathname; otherwise
returnp.
isabs(p)
Predicate fortesting whether pisanabsolute pathname (e.g., starts with aslash onUnix systems).
isfile( p)
Predicate fortesting whether prefers toaregular file,asopposed toadirectory, link, ordevice.
islink(p)
Predicate fortesting whether pisasoft(symbolic) link.
ismount( p)
Predicate fortesting whether pisamount point, thatis,whether pisonadifferent device than its
parent directory.
join(p,q)
Ifqisanabsolute path, returnsq.Otherwise, ifpisempty orends inaslash, returnsp+q,butoth-
erwise itreturnsp+'/'+q.
normcase( p)
Return pathname pwith itscase normalized. OnUnix systems, thisdoes nothing, butonMacs it
lowercases p.
samefile( p,q)
Predicate fortesting whether pandqarethesamefile(that is,thesame inode onthesame device).
This method may raise anexception ifos.stat() fails foreither argument.
split(p)
Return a2-tuple(H,T)whereTisthetailendofthepathname (not containing aslash) andHis
everything uptothetail.Ifpends with aslash, returns(p,'').Ifpcontains noslashes, returns
('',p).Thereturned Hstring willhave itstrailing slash removed unlessHistheroot directory.
splitext( p)
Returns a2-tuple(R,E)whereEisthe“extension” part ofthepathname andRisthe“root” part.
Ifpcontains atleast oneperiod,Ewillcontain thelastperiod andeverything after that, andRwill
beeverything uptobutnotincluding thelastperiod. Ifpcontains noperiods, returns(p,'').
walk(p,V,a)
Walks anentire directory structure starting atpathname p.Seebelow formore information.
Theos.path.walk( p,V,a)function does thefollowing forevery directory atorbelowp(including
pifpisadirectory), thismethod calls the“visitor function” Vwith arguments
V(a,d,N)
153 Python 2.7quick reference New Mexico Tech Computer Center
Thesameapassed toos.path.walk() .Youcanuseatoprovide information totheV()function,
ortoaccumulate information throughout thetraversal ofthedirectory structure.a
Astring containing thename ofthedirectory being visited. d
Alistofallthenames within directory d.You canremove elements from thislistinplace ifthere
aresome elements ofdthatyoudon't wantwalk() tovisit.N
28.10.argparse :Processing command linearguments
This module isthecurrent recommended standard module forprocessing arguments from thecommand
line. Themodule hasmany more features than those described here: refer tothefulldocumentation42.
•Section 28.10.1, “Types ofcommand linearguments” (p.154)
•Section 28.10.2, “Overall flow ofargument processing” (p.155)
•Section 28.10.3, “TheArgumentParser() constructor” (p.155)
•Section 28.10.4, “TheArgumentParser.add_argument() method” (p.155)
•Section 28.10.5, “TheArgumentParser.parse_args() method” (p.158)
•Section 28.10.6, “Other usefulArgumentParser methods” (p.160)
28.10.1. Types ofcommand linearguments
Forthepurposes ofthismodule, arguments aredivided intotwotypes:
•Positional arguments donotbegin with ahyphen. When there aremultiple positional arguments, the
meaning ofeach oneisinferred from their position relative totheother positional arguments.
•Optional arguments begin with ahyphen. Ingeneral each optional argument may have twoforms, a
short form consisting ofahyphen andaletter (e.g.,“-h”forhelp), andalong form consisting oftwo
hyphens andafullname (e.g.,“--help ”).Generally optional arguments arenotrequired, butyour
program canmake them required ifyouwish.
Some optional arguments may allow orrequire avalue. Forexample, let's suppose your script has
anoption that specifies thename ofariver, and that theshort form is“-r”and thelong form is
“--river ”.Onthecommand line, theuser canspecify theNile inanyofthese four ways:
-rNile
-rNile
--river Nile
--river=Nile
Users may group multiple short-form options together. Forexample, ifascript namedssshasoptions
“-a”,“-m”,“-p”,and“-s”,these twoexamples arevalid andequivalent:
sss-a-m-p-s
sss-spma
Ashort-form option that takes anargument may occur aspart ofsuch agroup, butonly ifitisthe
lastoption inthegroup.
Contrary toUnix practice, optional arguments may occur anywhere relative tothepositional argu-
ments. Also, thenames oflong-form optional arguments may beabbreviated iftheabbreviation is
unambiguous. Forexample, ifascript hastwolong-form options--pratt and--polonius ,option
42http://docs.python.org/library/argparse.html
New Mexico Tech Computer Center Python 2.7quick reference 154
--pr willbeaccepted asanabbreviation for--pratt ;but--p would notbeacceptable because it
isambiguous.
28.10.2. Overall flowofargument processing
Here isthegeneral procedure forusing theargparse module tocheck andprocess your command
linearguments, which inmost cases willcome fromsys.argv (seeSection 28.6,“sys:Universal system
interface” (p.148)).
1.Create anargparse.ArgumentParser instance. SeeSection 28.10.3, “TheArgumentParser()
constructor” (p.155).
2.Foreach command lineargument, callthe.add_argument() method ofthat instance once to
define what thatargument may be.SeeSection 28.10.4, “TheArgumentParser.add_argument()
method” (p.155).
3.Callthe.parse_args() method oftheinstance. Ifthere areanyerrors inthecommand line, this
method willprint amessage summarizing thearguments, andthen terminate execution.
Ifthearguments arecorrect according totherules that youhave specified, allthevalues willbe
packaged into anobject containing allyour arguments asattributes, with default values filled in
where necessary. SeeSection 28.10.5, “TheArgumentParser.parse_args() method” (p.158).
28.10.3. TheArgumentParser() construct or
Here isthecalling sequence tocreate anArgumentParser instance P:
importargparse
P=argparse.ArgumentParser(** kw)
Valid keyword arguments include:
description
Astring describing theoverall purpose ofyour script. This string willbedisplayed inthegenerated
help message.
add_help=True
Bydefault, thereturned parser willimplement options-hand--help todisplay thehelp message
showing thevalid option syntax. Useadd_help=False ifyoudon't want thisbehavior.
prog
Bydefault, when thename ofyour script isdisplayed, itwillbethename fromsys.argv[0] .If
youwould liketodisplay adifferent program name, pass thatname asthevalue ofthiskeyword
argument.
Here's anexample.
parser=argparse.ArgumentParser(prog="nile-source",
description="Find thesourceoftheNile")
28.10.4. TheArgumentParser.add_argument() method
Todefine each command lineargument, callthe.add_argument() method ofanArgumentParser
instance P.There aretwoforms, depending onwhether youaredefining apositional command line
155 Python 2.7quick reference New Mexico Tech Computer Center
argument oranoptional argument. Ineither case, there areanumber ofkeyword arguments denoted
as“**kw”;wewilldescribe these arguments below.
Todefine apositional command lineargument, usethisform:
P.add_argument( posName,**kw)
TheposName isastring that specifies thename oftheargument (which cannot begin with“-”).For
example, ifyourArgumentParser instance isp,todefine apositional argument called “inFile ”,
your callmight begin likethis:
p.add_argument("inFile", ...)
Todefine anoptional command lineargument, usethisform:
P.add_argument( s0,s1,...,,**kw)
Eachsiisastring defining theoption name, starting with either"-" forshort-form options or"--"
foroptions with thelong form.
Forexample, ifyouhave anoption whose short form is“-x”andwhose long form is“--exec ”,your
method callwould begin:
p.add_argument("-x", "--exec", ...)
You canspecify anynumber ofshort andlong form options inthisway.
Here aretheprinciple keyword arguments tothe.add_argument() method. Some ofthese require
information tobepassed through other keyword arguments.
dest
Name oftheattribute where thevalue ofthisargument willbestored intheresult returned bythe
ArgumentParser.parse_args() method. Ifyoudon't specify this, theattribute name willbe:
•Forpositional arguments, theattribute name will bethename passed asthefirst argument to
.add_argument() .
•Foroptional arguments, theattribute name isthefirstlong-form option name given ifthere isat
least one; otherwise theattribute name isthefirstshort-form option name given.
Forexample, ifthemethod calllooks like.add_argument('-x', '--exec', '--run',
...) ,thevalue willbestored inthe.exec attribute oftheresult returned by.arg_parse() .
action
Specifies what happens when thiscommand lineargument isprocessed. Thevalue must beoneof
thefollowing:
action='store'
Store theargument value asastring intheresult returned by.arg_parse() .Thename ofthe
attribute where itisstored isgiven bythedest keyword argument, orthedefault name as
explained above.
action='store_const'
Youmust provide akeyword argumentconst=V,whereVisthevalue tobestored intheresult
returned from.arg_parse() .
action='store_true'
Store aTrue value inthe returned result. Ifthe user does not supply this option,
.parse_args() stores aFalse value inthereturned result.
New Mexico Tech Computer Center Python 2.7quick reference 156
action='store_false'
Store aFalse value inthe returned result. Ifthe user doesn't supply this option,
.parse_args() stores aTrue value inthereturned result.
action='append'
Forarguments thatmay berepeated, thisaction causes each repeated argument tobeappended
tothelistofvalues intheresult returned by.arg_parse() .
action='append_const'
This works likeaction='append' ,butthevalueV,specified elsewhere byconst=Visappen-
dedtothelistofarguments.
action='version'
This option instructs theArgumentParser instance toimplement a--version option that
reports thecurrent version ofyour script. Youmust provide aversion= Vargument thatdefines
theversion string asV.
Ifyoudon't supply anaction argument, thedefault isaction=None .Inthiscase:
•Forpositional command linearguments, thevalue oftheargument isstored.
•Foroptional command linearguments, thestored value isNone ,unless youprovide adefault= S
argument to.add_argument() .
nargs
Specifies thenumber ofthiskind ofargument. This feature works forboth positional andoptional
arguments. Inthevalue returned by.parse_args() ,theattribute associated with thisargument
willbealist,notasingle value.
•Ifthevalue ofthenargs option isaninteger, exactly thatmany arguments must beprovided.
•nargs='*' means zero ormore. Forpositional arguments, thismeans alltheremaining arguments
supplied willbeincluded inthereturned listofvalues.
•nargs='+' means oneormore: there must beatleast onesuch argument, butthere may beany
number.
•nargs='?' means thatthisargument isoptional.
•Forpositional command linearguments, thereturned value willbethevalue from thecommand
lineifthere isone;otherwise youwillsupply thedefault returned valueDbyproviding keyword
argument default= Dtothe.add_argument() call.
•Foroptional command linearguments, nargs='?' signifies that theoption may begiven a
value.
•Iftheuser does notprovide thisoption, thevalue returned by.arg_parse() willbethe
default value from theconst=Cargument to.add_argument() .
•Iftheuser provides thisoption butdoes notfollow itwith avalue, thevalue returned by
.arg_parse() willbethedefault value from thedefault= Dargument to.add_argu-
ment() .
•Iftheuser provides this option with avalueV,theattribute ofthevalue returned by
.arg_parse() willbeV.
•Thedefault value isnargs=None .Inthiscase:
•Forapositional command lineargument, thismeans exactly oneisexpected.
•Foranoptional command lineargument, thestored value isNone unless youprovide adefault
valueDwithdefault= D.
const
Seeabove underaction='store_const' andaction='append_const' .
157 Python 2.7quick reference New Mexico Tech Computer Center
default
Provides adefault value; seeabove undernargs .
type
Convert thevalue toagiven type. Forexample,type=int would attempt toconvert theassociated
argument toaPythonint;iftheargument isnotavalid integer,.arg_parse() will print the
usage message andterminate.
Forarguments thatarefilenames, theargparse module willeven open thefileforyou. Here is
thegeneral form:
type=argparse.FileType(mode= M)
whereMisthemode string asinthesecond argument toopen() .Forexample, thisform would
attempt toopen anewfileforwriting, using thevalue ofthecommand lineoption asthefilename.
p.add_argument(..., type=argparse.FileType(mode='w'), ...)
Note that.arg_parse() may raise anIOError orOSError exception ifthefilecan't beopened.
You canspecify anyconverter function asthevalue ofthetype keyword argument. This function
takes oneargument, astring, andreturns avalue ofwhatever type youlike. Your converter function
may alsoraise anargparse.ArgumentTypeError exception tosignify aninvalid value.
choices
Aniterable thatspecifies theonly valid choices. Forexample,choices=('red', 'grn','blu')
would allow only those three specific strings asvalues oftheassociated command lineargument.
required
Ifanargument thatstarts with ahyphen isnotactually optional, userequired=True .
help
Astring describing what thisoption does. Strongly recommended, anditwillbedisplayed inthe
help message.
metavar
Specifies thename ofthisoptional forexternal display. Forexample, suppose your.add_argu-
ment() callstarts likethis:
P.add_argument('inFile', metavar='INFILE', ...)
Then theargument value will bestored inattribute.inFile oftheresult returned by
.arg_parse() ,butthehelp message willrefer tothisargument as“INFILE ”.
28.10.5. TheArgumentParser.parse_args() method
Once youhave added allyour command linearguments, thecalltothe.parse_args() method looks
likethis, wherePisyourArgumentParser instance.
P.parse_args(args=None, namespace=None)
Theargs parameter specifies asetofcommand linearguments asalistofstrings. Ifyouomit this, the
command linearguments willbetaken fromsys.argv .
Bydefault, thereturned value willbeaninstance ofclassargparse.Namespace .Thevalues returned
byparsing thecommand linewillbestored asattributes inthisinstance. However, youmay instead
usenamespace tospecify some instance towhich theattributes willbeadded.
New Mexico Tech Computer Center Python 2.7quick reference 158
Here's anextended example. This script setsupfour command linearguments andthen tests itagainst
various simulated argument lists.
#!/usr/bin/env python
from__future__ importprint_function
importsys
importargparse
deftest(p, argList):
print("\n=== Testwith",argList)
r=p.parse_args(args=argList)
print(vars(r))
p=argparse.ArgumentParser(prog='larch',
description="Number 1:TheLarch")
p.add_argument('-n', '--name', default='Dinsdale',
help='Name youramoeba')
p.add_argument('-x', '--exec', action='store_true',
help='Shoot amoebaafterwards')
p.add_argument('in', help='Input file',metavar='INFILE')
p.add_argument('outs', nargs='*', help='Output file(s)',
metavar='OUTFILE')
print("=== Usagemessage:")
p.print_usage()
print("\n=== Helpmessage:")
p.print_help()
test(p, ['ingoat'])
test(p, ['-x','Brian'])
test(p, ['--exec', 'Brian', 'Reg','Dirk'])
test(p, ['-n','Brian', 'Reg','Dirk'])
test(p, ['--name=Pinnet', 'notlob', 'bolton'])
test(p, ['--nosuch', 'Centurion'])
Output ofthisscript:
===Usagemessage:
usage:larch[-h][-nNAME][-x]INFILE[OUTFILE [OUTFILE ...]]
===Helpmessage:
usage:larch[-h][-nNAME][-x]INFILE[OUTFILE [OUTFILE ...]]
Number1:TheLarch
positional arguments:
INFILE Inputfile
OUTFILE Outputfile(s)
optional arguments:
-h,--help showthishelpmessage andexit
-nNAME,--nameNAMENameyouramoeba
-x,--exec Shootamoebaafterwards
159 Python 2.7quick reference New Mexico Tech Computer Center
===Testwith['ingoat']
{'in':'ingoat', 'name': 'Dinsdale', 'outs': [],'exec': False}
===Testwith['-x','Brian']
{'in':'Brian', 'name': 'Dinsdale', 'outs': [],'exec': True}
===Testwith['--exec', 'Brian', 'Reg','Dirk']
{'in':'Brian', 'name': 'Dinsdale', 'outs': ['Reg', 'Dirk'], 'exec': True}
===Testwith['-n','Brian', 'Reg','Dirk']
{'in':'Reg','name': 'Brian', 'outs': ['Dirk'], 'exec': False}
===Testwith['--name=Pinnet', 'notlob', 'bolton']
{'in':'notlob', 'name': 'Pinnet', 'outs': ['bolton'], 'exec': False}
===Testwith['--nosuch', 'Centurion']
usage:larch[-h][-nNAME][-x]INFILE[OUTFILE [OUTFILE ...]]
larch:error:unrecognized arguments: --nosuch
Notes onthisexample:
•Theprint_function import uses thePython 3.xprint() function; seeSection 22.9,“Theprint()
function” (p.98).
•Thevars() function isused toconvert theargparse.Namespace instance returned bythe
.parse_args() method toadictionary fordisplay; seeSection 21.22, “vars() :Local vari-
ables” (p.89).
•Thelasttime thetest() function iscalled, thefunction does notreturn, because thespecified setof
options isnotvalid. Thelasttwolines shown intheoutput below were sent tosys.stderr ,notto
sys.stdout likeallthepreceding lines.
28.10.6. Other usefulArgumentParser methods
These methods areavailable onyourArgumentParser instance:
.print_usage(file=None)
Prints theshort summary ofargument usage. Thedefaultfile issys.stdout .
.print_help(file=None)
Prints thefullsummary ofargument usage, including thehelp textforeach argument. Thedefault
file issys.stdout .
.format_usage()
Formats theshort summary ofargument usage andreturns itasastring.
.format_help()
Formats thefullhelp textandreturns itasastring.
.exit(status=0, message=None)
Terminates execution with status 0(orthestatus value youprovide). Ifyouprovide amessage
string, thatmessage willbeprinted before termination.
.error(message)
Prints theusage message, plus themessage string you provide, then terminates execution with
status 2.
New Mexico Tech Computer Center Python 2.7quick reference 160
.add_mutually_exclusive_group(required=False)
Ifyou have two ormore options that cannot bespecified onthesame command line, usethis
method tocreate anoption group. Then callthe.add_argument() onthegroup instance toadd
these options. Ifyouspecifyrequired=True ,theuser isrequired supply oneoftheoptions inthe
group.
Suppose forexample that youhave twomutually exclusive options--english and--metric .
This code would prohibit theuser from specifying both atonce:
p=argparse.ArgumentParser()
g=p.add_mutually_exclusive_group()
g.add_argument("-e", "--english", dest="isMetric", action="store_false")
g.add_argument("-m", "--metric", dest="isMetric", action="store_true")
.set_defaults(**kw)
Usethismethod tospecify thedefault values ofanyvariable. Foreach keyword argument n=v,the
value ofnintheresult returned by.parse_args() willhave valuevincase theuser does not
specify avalue explicitly.
Forexample, ifyouhave twomutually exclusive options, butyoudon't require oneortheother,
the.set_defaults() method isagood way tospecify thevalue oftheoption when neither is
given. Here isaninteractive example showing thistechnique.
>>>parser=argparse.ArgumentParser()
>>>group=parser.add_mutually_exclusive_group()
>>>group.add_argument("-y", "--yes", dest="which", action="store_true")
>>>group.add_argument("-n", "--no", dest="which", action="store_false")
>>>parser.set_defaults(which=True)
>>>printparser.parse_args(["--no"])
Namespace(which=False)
>>>printparser.parse_args(["-y"])
Namespace(which=True)
>>>printparser.parse_args([])
Namespace(which=True)
161 Python 2.7quick reference New Mexico Tech Computer Center
New Mexico Tech Computer Center Python 2.7quick reference 162
