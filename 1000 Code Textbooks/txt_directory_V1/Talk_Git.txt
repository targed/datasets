Source Code Management with Git1Benjamin S. SkrainkaUniversity of ChicagoThe Harris School of Public Policyskrainka@uchicago.eduMay 20, 2012
1The nice ﬁgures are copyright by Mark Lodato under the CreativeCommons 3.0 License.
ObjectivesThis talk’s objectives:IState beneﬁts of using a source code management (SCM)systemIUse core git commands to manage your workﬂow for both soloand collaborative projectsIDescribe concepts needed to use git eﬀectively
Plan for this TalkGetting StartedKey ConceptsSingle DeveloperDistributed DevelopmentAdvanced
Beneﬁts of Source Code ManagementSCM increases your productivity by allowing you to:ITrack every version of your work (source code, LATEX,documentation, etc.)ICoordinate work across diﬀerent computersICollaborate with colleagues on diﬀerent computers in diﬀerentlocationsIUndo mistakes!ISCM is also known as version controlIPopular tools include: git, hg (Mercurial), svn (Subversion),CVS, Perforce, . . .IYou should be sued for professional negligence if you are notusing SCM.
Git vs. SubversionGit is currently the best SCM tool:IBlazingly fast performanceICheap branches and merges which facilitate experimentationand collaborationISimple architecture (once you understand it!)IDistributedISecureISVN is none of these things and much more painful to use
Getting Started
First StepsLet’s start by discussing:IInstallationIConﬁgurationIGetting Help
Installation: LinuxTo get started, install git:IIf you are root:$s u d oa p t - g e ti n s t a l ll i b c u r l 4 - g n u t l s - d e v\libexpat1-dev gettext libz-dev libssl-dev$s u d oa p t - g e ti n s t a l lg i t - c o r eIOtherwise,IHarass your system administratorIDownload and build from source
Installation: OS/XYou have several options:IUse git bundled with latest XcodeIUse graphical installer:http://code.google.com/p/git-osx-installerIInstall your own copy:$s u d op o r t- vi n s t a l lg i t - c o r e+ s v n+ d o c\+bash_completion +gitwebOptions besides git-core are optional...IGet GitX, SourceTree, etc. to help visualize
Installation: WindowsOn Windows,IInstall Git GUI:Ihttp://code.google.com/p/msysgitIIncludes SSH clientIYou can probably also use the cygwin package manager. . .IBut why oh why are you using Windows?
VisualizerInstall a visualizer:IWill help you see how commands aﬀect directed graph ofchanges to your codeIWill help you learn git:IView state of repositoryIPredict how it will changeIApply git commandICheck your understanding. . .ISome popular visualizers: gitk, SourceTree, GitBox, GitHub,...
ConﬁgurationGit is highly conﬁgurable:IConﬁguration is stored in ~/.gitconﬁgISet the options using git:$g i tc o n f i g- - g l o b a lu s e r . n a m e“ D r .B i l l yH o r r i b l e ”$g i tc o n f i g- - g l o b a lu s e r . e m a i l“ d r h @ h o r r i b l e . c o m ”$g i tc o n f i g- - g l o b a lc o r e . e d i t o rv i m$g i tc o n f i gc o l o r . u it r u eIYou can edit ~/.gitconﬁg to set options directly once youknow what you are doing. . .
HelpThere are many resources for help:IGit provides three equivalent ways to get help:Iman git-commandIgit helpcommandIgitcommand–helpITo learn about git init, the following all work:man git-initgit help initgit init --helpIProGit:a ne x c e l l e n tf r e e - i s hb o o kIOther linksIGit ReferenceIgit - The Simple GuideIThink Like (a) GitIVisual Git
Key Concepts
Create a RepositoryTo create a repository (akahistory) for your work:$m k d i ro r b i t a l #C r e a t eaw o r k s p a c e$c do r b i t a l$g i ti n i tInitialized empty Git repository in \/home/horrible/sbox/orbital/.git/IThis initializes git’s internal data structures to track your workIGit’s data is stored in .git:$l s- a.git$l s. g i tHEAD config hooks/ objects/branches/ description info/ refs/IEdit.git/descriptionto describe your project (optional)
Git Workﬂow
IndexWorkspaceRepo
checkoutaddcommitCommited changes (a.k.a. the repository) are referred to as theHistory
Git Internals: ObjectsGit’s internal structure is very simple and manages only three typesof objects:Iblob: a ﬁleItree: a directoryIcommit: a group of blobs and/or treesIcommit objects are stored via a directed graph (which is notacyclic)INewer commits are children of parent commitsIA commit with multiple parents is a mergeI... p l u s l a b e l s f o r b r a n c h e s
SHA-1 HashCommit’s ID = hash of its contents + parentIAv e r yl o n gn u m b e rl i k e :833da57ebd73e6f5c35f1753569b112df5364344IIs cryptographically secure and nigh uniqueIProvides a unique ID of a place on the graph of commits)Two repos with same IDs are identical from that pointbackwards in history, even if repos are on diﬀerent machines!IShortcut: can use 4+ leading characters of hash as an IDICommands show ~7 characters or full hash as ID as neededIPower, ﬂexibility, and security!ICan also use HEAD, HEAD^, HEAD^^, HEAD~n
Git Internals: SCM OperationsSCM operations manipulate these objects by:I(Re)labeling commits to handle branching and taggingICreating new commits, if necessary, to handle mergesIMoving blobs and trees between:Iyour workspaceIthe staging area (aka the index aka the cache)Ithe history (aka repo)IMakes git very fast and powerful!
Index FileThe Index ﬁles sits between your work and the repository:INaming of the Index is not standardized:IThe Index == The Staging Area == The CacheIКто виноват и что делать?( ‘ W h oi sg u i l t ya n dw h a ts h o u l dwe do about it?’)IProvides ﬂexibility:IIndex contains list of ﬁles to be committedIAllows you to work on several diﬀerent things at once andcommit just subsets of changesIIn order to commit a change, must add the ﬁles or directoriesto index. Also known as ‘staging.’
Single Developer
Basic SCM OperationsNow that you have setup your repository withgit init,y o ua r eready to get to work:IStage changes for commitICommit changesIBranchIMergeIInspect your changesIRevert changes
Staging Your Work: git addgit addregisters your ﬁle with the index:$v iR E A D M E . t x t$g i ta d dR E A D M E . t x tIWork is now staged for committingIgit adddoes more than just adding ﬁles – it is the interfaceto the staging area!Igit adddirwill recursively adddirand its contents.IActually copies your work to the repository, but it isunlabeled. . .
Examining Workspace State: git statusgit statusshows the state of your workspace – i.e. what hasbeen modiﬁed and/or staged:$g i ts t a t u s#O nb r a n c hm a s t e r##I n i t i a lc o m m i t##C h a n g e st ob ec o m m i t t e d :#( u s e " g i t r m - - c a c h e d < f i l e > . . . " t o u n s t a g e )##new file: README.txt#git status -sprovides a more concise report
Saving Staged Work: git commitgit commitstores the objects which are in the index as a commit:IEach commit has a unique SHA-1 IDIShould specify a message saying why you did what you did$g i tc o m m i t- m" C r e a t e dd o c u m e n t a t i o n . "[master (root-commit)8cddf03]C r e a t e dd o c u m e n t a t i o n .1f i l e sc h a n g e d ,1i n s e r t i o n s ( + ) ,0d e l e t i o n s ( - )create mode 100644 README.txtIgit commit --amendadds staged work to previous commitIgit commit -a will addand commit modiﬁed ﬁlesIOnly commit objects which are not easily recreated)commit often to increase granularity of versions
git commit

The Commit MessageProvide meaningful comments about why the changes you made:ISay why you did what you did (git diﬀ will always show whatyou did)IBest practice:IDo not specify a short message with -m optionIThen, git will start up your favorite editor so you can write apithy commentIBy convention, the comment should be structured as:This is a one line summary of my brilliant changes.After the blank line, I provide a detailedexplanation of my genius. Often it is helpfulto include bullet points using *’s or -’s:*H e l p sm a k er e a s o nf o rc h a n g ec l e a r*I sn i c ef o ry o u rf u t u r es e l fa n dc o l l a b o r a t o r s
View History: git loggit logdisplays information about commits (messages, hashes,and committer):$g i tl o gcommit8cddf03e1a9f62c1f39dc4b47eb40a3bef6080e4Author: Dr. Billy Horrible <drh@horrible.com>Date: Tue Apr 3 14:05:17 2012 -0500Created documentation.IThere are many options:$g i tl o g- 5$g i tl o g- - p r e t t y = o n e l i n e- 5$g i tl o g- - p r e t t y = f o r m a t : " % h% a d|% s % d[ % a n ] "\--graph --date=short
Compare Versions: git diﬀYou can compare diﬀerent versions of ﬁles as well as diﬀerentcommits withgit commit:Igit diff: compares index vs. working directoryIgit diff --stat:o v e r v i e wo fd i ﬀ e r e n c e sIgit diff --cachedorgit diff --staged:c o m p a r e si n d e xvs. HEADIgit diff HEAD: compares working directory with historyIgit diff da985 b325c:c o m p a r e st w oc o m m i t sIgit diff master...test:c o m p u t e sc o m m o na n c e s t e ro fthe two branches and then shows how test has changed. Thisis equvalent to:$g i td i f f- - s t a t$ ( g i tm e r g e - b a s em a s t e rt e s t )t e s t
git diﬀ

Branching: git branchgit branch:ICreate ‘save points’ICan experiment safely in a branch. . .IManage several versions of software: for diﬀerent projects orfeature setsILoad work from other repositories into a branch to checkbefore mergingGit is incredibly powerful and ﬂexible because branches and mergesare cheap: only 40 char needed to branch!IThis is a PITA with all other SCM toolsIBehind the scenes, git just shuﬄes labels on the commitswhich are a directed graph (not acyclic)
git branch + git checkoutUsegit branchto display or create branches:$g i tb r a n c h #s h o w sb r a n c h e smaint*m a s t e r$g i tb r a n c hg e n i u s #c r e a t eb r a n c h$g i tb r a n c h- dm a i n t#d e l e t eb r a n c hUsegit checkoutto switch branches:$g i tc h e c k o u tg e n i u s #s w i t c ht on e wb r a n c hINow commits aﬀect genius branchIGit copies appropriate version of ﬁles into workspace!ICan create and switch to a branch with$g i tc h e c k o u t- bg e n i u s#c r e a t e&s w i t c ht ot e s t
git branch
8cddfa15c691a40
5f78a
geniusgit branch genius
HEADmaster

git checkout
8cddfa15c691a40
5f78a
geniusgit checkout geniusHEAD
master

Merging Branchesgit mergebranchID:IFast forward: just move label from ancestor/parent commit tochildIMerge: creates a new commit which contains all the changeswhich have occurred in both branches to the nearest commonancestor commitIChanges are merged automaticallyI. . . unless changes conﬂict. Then you will need to resolve themmanually$g i tc h e c k o u tm a s t e r$g i tm e r g em a i n t$g i tm e r g ec 2 4 e 7 4
Fast Forward Merge

Merge

Resolving ConﬂictsIf you change the same place in a ﬁle in two diﬀerent branches,there will be a conﬂict when you merge:IMust resolve manually by editing the ﬁleIThe graphical merge took,git mergetoolmay helpIUsegit diff -ccto verify changes after resolving conﬂictIThen stage and commit the changes
Reverting Changes
Usegit reset HEAD --fileto unstage a ﬁle
Other CommandsThere are a few other basic commands which are helpful:Igit tag -aver1.0-m ’First release.’:t om a r kknown point, such as submitting a paper or a release of yoursoftwareIgit show-branch:t od i s p l a ya n c e s t r yg r a p ho fc o m m i t s
.gitignoreTo ignore certain ﬁles, create a.gitignoreﬁle:IPrevents output about derived objectsIAvoids accidentally adding ﬁles which should not be underSCMICan use wild cards and comments
Example .gitignore#C o m p i l e dO b j e c tf i l e s*.slo*.lo*.o#C o m p i l e dD y n a m i cl i b r a r i e s*.so#C o m p i l e dS t a t i cl i b r a r i e s*.lai*.la*.a#E d i t e df i l e s*~.DS_Store#D e r i v e df i l e s*.pdffort.*depend.inc
Distributed Development
Multiple RepositoriesGit makes it easy to collaborate with others or synchronize yourwork across multiple computers:ICan manage source code on diﬀerent computers (laptop,Athens, Blue Gene/Q, Beagle, . . . )ICan coordinate work with multiple developersIGit is fast and decentralized (a.k.a.peer to peer):INo central repositoryIRedundant!Can keep working when the Internet is down!Doesn’t matter if the repository server is vaporized.
Cloning Repositories: git clonegit clonerepocreates a local copy of another repository:$g i tc l o n eg i t @ g i t h u b . c o m : d r h / o m c l . g i tCloning into omcl...remote: Counting objects: 24, done.remote: Compressing objects: 100% (21/21), done.remote: Total 24 (delta 7), reused 17 (delta 1)Receiving objects: 100% (24/24), 74.36 KiB, done.Resolving deltas: 100% (7/7), done.IPathname to repository can specify SSH, Git, or local path.IThis repository is now known asorigin
Remote Repositories: git remoteUsegit remoteto manage remote repositories:$g i tr e m o t e #L i s tr e m o t er e p o soriginUsegit remote add [shortname] [url]to associate a namewith a remote repository:$g i tr e m o t ea d dm o o ng i t : / / m o o n . c o m / h o r r i b l e / o m c l$g i tr e m o t e- v #D e t a i l e dl i s t i n gorigin git@github.com:drh/omcl.git (fetch)origin git@github.com:drh/omcl.git (push)moon git://moon.com/horrible/omcl.git (fetch)moon git://moon.com/horrible/omcl.git (push)
Update Your RepositoryTo update your repository with changes from a remote repository,usegit fetch[remote]:$g i tf e t c ho r i g i nremote: Counting objects: 10, done.remote: Compressing objects: 100% (4/4), done.remote: Total 6 (delta 0), reused 0 (delta 0)Unpacking objects: 100% (6/6), done.From git@github.com:drh/omcl8cddf03..3415ba4 genius -> origin/genius343c44b..2593ae6 master -> origin/masterICopies changes from remote repository to a local branchnamedRemoteName/RemoteBranch(info stored in.git/refs/remotes)IAllows you to examine changes withgit diffand thenmerge:$g i td i f fo r i g i n / g e n i u s
One-stop Update & Merge: git pullIf you are feeling lucky, you can usegit pullto perform a fetchand merge as one operation:IFetches changes and merges into current branch (dangerous!)IRemote repository you clone from is known asorigin.$g i tp u l lremote: Counting objects: 5, done.remote: Compressing objects: 100% (2/2), done.remote: Total 3 (delta 0), reused 0 (delta 0)Unpacking objects: 100% (3/3), done.From git://fortress.com/horrible/orbital8cddf03..343c44b master -> origin/masterUpdating 8cddf03..343c44bFast-forwardREADME.txt | 5 +++++1f i l e sc h a n g e d ,5i n s e r t i o n s ( + ) ,0d e l e t i o n s ( - )
Publishing Your Changes: git pushYou can publish your changes to a remote repository:Igit push[remote] [branch], e.g.:$g i tp u s ho r i g i nm a s t e rIMust have write access to remote repositoryIDangerous if two people push to a repository at the same timeIBy default tags are not pushed!usegit push remote origin --tagsITo push everything under .git/refs/heads (eﬀectively branchesand tags)!usegit push remote origin --all
Repository HostingBecause git is distributed, setup a central repository forcoordination:IBitBucketIGitHubProvides:IHostingIIssue TrackingICoordination – especially useful if you work on a laptop!IForking oﬀ other repositoriesIWikiISecurity
Remote Repository SetupTo setup remote repository hosting:1.Create an account onBitBucketorGitHub2.Generate SSH Public & Private keys:$s s h - k e y g e n- tr s a- C" d r h @ h o r r i b l e . c o m "Generating public/private rsa key pair.Enter file in which to save the key \(/home/horrible/.ssh/id_rsa): <press enter>...3.Upload your public key (follow the instructions on the website)4.Create a repository. Typically this is abarerepository – i.e. itlacks a working directory5.Website will provide URL to use6.Add this URL as origin:git remote add origin git@github.com:horrible/omcl.git
Advanced ConﬁgurationSome helpful aliases are:$g i tc o n f i g- - g l o b a la l i a s . c oc h e c k o u t$g i tc o n f i g- - g l o b a la l i a s . b rb r a n c h$g i tc o n f i g- - g l o b a la l i a s . c ic o m m i t$g i tc o n f i g- - g l o b a la l i a s . s ts t a t u s$g i tc o n f i g- - g l o b a la l i a s . u n s t a g e’ r e s e tH E A D- - ’$g i tc o n f i g- - g l o b a la l i a s . l a s t’ l o g- 1H E A D ’$g i tc o n f i g- - g l o b a la l i a s . h i s t\"log --pretty=format:\"%h %ad | %s%d [%an]\" \--graph --date=short"ICan also create by editing~/.gitconfig(if you know whatyou are doing. . . )
Advanced CommandsSee the manual for other commands, including:Igit cherrypick:r e p l a yo n ec h a n g ef r o mo n eb r a n c ho nanotherIgit rebase:r e p l a ya l lc h a n g e sf r o mo n eb r a n c ho na n o t h e rIgit add --patch:l e t sy o ui n t e r a c t i v e l yc h o o s ew h i c hchanges on a ﬁle to stageIgit log:f o r m a t t i n gc o m m a n d sIgit remote showRemoteName:p r i n ti n f oa b o u tRemoteNameIgit remote rmRemoteName:d e l e t ear e m o t e
ConclusionSCM will increase your productivity and make your research morereproducible:ITrack changes to your softwareITest changes safely in a branchICoordinate work with (remote) colleaguesISynchronize work across multiple machines
ConclusionCore commands:Igit init:c r e a t ear e p o s i t o r yIgit add:s t a g ec h a n g e sIgit commit:s t o r ec h a n g e st or e p o s i t o r yIgit branch:c r e a t eab r a n c hIgit checkout: change workspace to a diﬀerent branchIgit merge:m e r g et w ob r a n c h e sIgit remote:s p e c i f yp a t ht or e p o s i t o r yIgit fetch:r e t r i e v ec h a n g e sf r o mr e m o t er e p o s i t o r y
