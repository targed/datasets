GET UNDER THE HOOD OF WORDPRESS!THE
WORDP RESS
ANTHOLOGY
BY MICK OLINIK &
RAENA JACKSON ARMI TAGE PANTONE 2955 C PANTONE Orange 021 C
CMYK 100, 45, 0, 37 CMYK  O, 53, 100, 0
Black 100% Black 50%CMYK:Pantone:
Grey scale

Summary of Contents
Preface  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xvii
1. Hello W orld . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1
2. WordPress 101 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21
3. The Loop and W ordPress File System  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 55
4. Post T ypes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79
5. Plugins  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101
6. Themes  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 139
7. Taxonomies  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 159
8. Image Galleries and Featur ed Images  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 179
9. The W ordPress API  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 195
10. Multisite: Rolling Y our Own Network  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 215
11. Going Global with Themes and Plugins  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 241
12. SEO , Marketing, and Goal Conver sion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 267
Index  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 287

THEWORDPRES S
ANTHOL OGY
BYMICKOLINIK
&RAENA JACKSON ARMITAGE
The W ordPress Anthology
byMick Olinik andRaena Jackson Armitage
Copyright ©2011 SitePoint Pty.Ltd.
Product Manager :Simon Mackie
Technical Editor :TomMuseth
Expert Reviewer :Brad Williams
Indexer :Michele Combs
Editor :Kelly Steele
Cover Designer :Alex Walker
Notice of Rights
Allrights reserved. Nopart ofthisbook may bereproduced, stored inaretrieval system, ortransmitted inanyform orby
anymeans without theprior written permission ofthepublisher ,except inthecase ofbrief quotations included incritical
articles orreviews.
Notice of Liability
Theauthor andpublisher have made every effort toensure theaccuracy oftheinformation herein. However ,theinformation
contained inthisbook issold without warranty ,either express orimplied. Neither theauthors andSitePoint Pty.Ltd., nor
itsdealers ordistributors, willbeheld liable foranydamages caused either directly orindirectly bytheinstructions contained
inthisbook, orbythesoftware orhardware products described herein.
Trademark Notice
Rather than indicating every occurrence ofatrademarked name assuch, thisbook uses thenames only inaneditorial
fashion andtothebenefit ofthetrademark owner with nointention ofinfringement ofthetrademark.
Published bySitePoint Pty.Ltd.
48Cambridge Street, Collingwood
VIC3066 Australia
Web:www .sitepoint.com
Email: business@sitepoint.com
ISBN 978-0-9871530-0-5 (print)
ISBN 978-0-9871530-5-0 (ebook)
Printed andbound intheUnited States ofAmericaiv
About Mick Olinik
Mick Olinik isaweb developer andbusiness model expert who’ shadtheluxury andpleasure ofwatching
theWebgrow upover thepast 15years. Apartner atSuperfast Websites andNinjaDesk Elite Technical Support
&Training, Mick isaWordPress expert who specializes ingraphic design, WordPress theme skinning, and
organic search engine optimization. He’sthego-to web development guru forseveral ofthetopinternet mar-
keting specialists intheworld, andaregular contributor tositepoint.com. Agraduate ofMichigan State Uni-
versity andmember ofPhiGamma Delta, Mick spends histime evenly between Asheville, North Carolina and
Traverse City,Michigan. Aside from anobsessive passion fortheever-evolving technologies thatbring the
Webtoyour local internet browser orphone, Mick enjoys music, outdoor activities, photography ,playing
with hisdogLacie, spending time with family ,andobserving different business models inaction. Come and
sayhiathispersonal siteathttp://www .mickolinik.com, orfollow himonFacebook athttp://www .fbmick.com.
About Raena Jackson Armitage
Raena Jackson Armitage isaweb developer ,trainer ,andcontent management geek. In2010, Raena co-authored
SitePoint’ sBuild YourOwn Wicked WordPress Themes, andhascontributed totheSitePoint blogs and
newsletters. When she’snotpushing bytes around theInternet, you’ll find heronherbike, watching Australian
Rules football, gaming, ortracking down theperfect all-day breakfast.
About Br ad Williams
Brad Williams istheco-founder ofWebDevStudios.com andtheco-author ofProfessional WordPress (2010)
andProfessional WordPress Plugin Development (2011), both published byWiley.Brad hasbeen developing
websites formore than 15years, recently focusing onopen-source technologies such asWordPress. Heisalso
oneoftheorganizers ofthePhiladelphia WordPress Meetup Group andWordCamp Philly .Youcanfind Brad
onTwitter at@williamsba andathisblog athttp://strangework.com .
About T om Museth
TomMuseth firstfellinlove with code while creating scrolling adventure games inBASIC onhisCommodore
64,andusability testing them onreluctant family members. Hethen spent 16years asajournalist andproduction
editor before deciding web development would bemore rewarding. Hehasapassion forjQuery ,PHP,HTML5,
andCSS3, iseagerly eyeing theworld ofmobile dev,andlikes tode-stress viaabook, abeach, andafishing
rod.v

ForClaire, Mom, Dad, andGrandma Jo
—Mick
ToMike andLeanne
—Raena

Table of Contents
Preface  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xvii
Chapter 1 Hello W orld  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1
In the Beginning …  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1
A Brief History of W ordPress . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2
WordPress.com ver sus W ordPress.or g . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3
Core WordPress . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4
WordPress and its License, the GPL  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4
The Main Ingr edients: HTML, CSS, JavaScript, PHP , and MySQL  . . . . . . . . . . . . . . . . . 4
Why W ordPress? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5
Installing W ordPress . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8
Choose Y our Oper ating System Wisely  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8
Installing W ordPress thr ough the W eb-Based User Interface  . . . . . . . . . . . . . . . . . . . 9
Installing W ordPress Manually  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13
A Word about Installer s . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15
Giving W ordPress Its Own Dir ectory  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16
Resour ces and Learning T ools . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17
The W ordPress Codex  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17
Support Forums  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18
WordCamp and Local Meetups  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18
WordPress.tv  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19
Chat Rooms  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19
Google  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19
Ready to Pr ess On  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19
Chapter 2 WordPress 101  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21
An Overview of Cor e WordPress . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21
Setting the Mood  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21
The Dashboar d . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22
Screen Options  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23
The Admin Menu  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23
Gener al Settings  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25
Themes  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26
Privacy Settings  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27
Automatically Updating  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27
Creating and Managing T ext-based Content  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28
Pages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28
The Content Editor  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29
Meta Boxes  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31
Saving (Y our Backside)  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33
Quick Edit and Bulk Edit  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33
Under standing P osts and Categories  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 34
Under standing T ags . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35
Creating and W orking with P osts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 36
Managing Categories and T ags . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38
Working with the Links Content T ype . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39
Permalinks  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40
Alternative W ays to P ost Text-based Content  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41
Working with Media and the Media Libr ary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41
The Media Libr ary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41
Adding Images into a P age or P ost . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42
Modifying Images  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43
Image Manipulation within W ordPress . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 45
Managing Media Outside of W ordPress . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46
Media Settings  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47
Everyone W ants a Say  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47
Managing Comments  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47
Comment Spam  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48
Discussion Settings  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48
Avatar s . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 49
Additional Display Elements  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 49
Managing Custom Menus  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 50
Sidebar s and Widgets  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51
Extending W ordPress thr ough Plugins  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52x
Import and Export T ools . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52
Users Roles and P ermissions  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52
Default User Roles  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53
Extending User Pr ofiles  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54
Now Y ou Know the Basics …  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54
Chapter 3 The Loop and W ordPress File System  . . . . . . . . . 55
The Standar d WordPress File Structur e . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 55
The Role of Queries and The Loop  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58
The Loop: Exposed!  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59
The Loop and T emplate T ags . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59
Conditional T ags: is . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64
Let’s Try a Simple loop  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 66
Beyond the Default: Custom Queries  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 70
Roll Y our Own Loop Magic  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74
Fetch Any P osts Matching a Custom Field  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75
Teaser s of Futur e-dated P osts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 76
Any Mor e Queries?  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77
Chapter 4 Post T ypes  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79
Moving Beyond the Blog  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79
Creating Y our Fir st Custom P ost Types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80
The Basics of register_post_type()  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 82
Adding Custom Fields to the Edit Scr een . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 85
Adding Confer ence Sessions  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 88
Custom T axonomies  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 89
Providing Help  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 92
Displaying Y our Custom P ost Types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95
Showing off Our Confer ence Sessions and Speaker s . . . . . . . . . . . . . . . . . . . . . . . . . 96
Custom Ar chives  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 98
You’re Custom-r eady . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 100xi
Chapter 5 Plugins  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101
The Basics  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101
The Upside to Plugins  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102
The Downside to Plugins  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102
Rules to Follow When Using Plugins  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 103
Must-use Plugins  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104
Drop-in Plugins  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 105
Determining When to Cr eate a New Plugin  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 106
Debugging Y our Plugin As Y ou Go  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 107
The Anatomy of a Plugin  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 107
Standar d Plugin P ackaging  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 107
Action Hooks and Filter Hooks  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 109
The P ower of P aranoia: Data V alidation  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 112
Dissecting a Plugin: Antelope Gener al Social Media Links  . . . . . . . . . . . . . . . . . . . . . . . 113
Header and License  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 119
Localization Settings  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 120
Creating the Menu Item for the Settings  Page . . . . . . . . . . . . . . . . . . . . . . . . . . . . 121
Styling the Admin  Screen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 124
Formatting for the Settings  Page . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 125
Getting Output Styles Ready  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 127
Widgets 1 01 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 128
Registering Our Antelope Gener al Widget  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 129
Define What the Widget Should Do  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 130
Display Logic  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 130
Updating the Instance of the Widget  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 132
Creating the Form to Change the Title  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 132
Load Our Widget into W ordPress . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 133
Taking Plugins Further  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 133
Meta Boxes  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 134
Shortcodes  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 135
The W ordPress Plugin Dir ectory  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 136
Plug In All the W ay . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 137xii
Chapter 6 Themes  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 139
Basic Components of a Theme  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 139
Requir ed Elements of a Theme  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 140
Nomenclatur e Hier archy and P age T emplates  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 144
Page T emplates  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 146
Adding Functionality to Y our Theme  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 147
Adding Custom Menus  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 148
Creating Widgetized Ar eas . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 149
Adding Support for Visual Modifications  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 150
Adding Support for Custom Header s . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 150
Adding Support for a Custom Backgr ound  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 151
Does My Functionality Belong in a Plugin or Theme?  . . . . . . . . . . . . . . . . . . . . . . . . . . . 152
Defining Functionality  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 152
The Differ ence between Display Logic and Site Functionality  . . . . . . . . . . . . . . . . 153
A Case Study: ABC Real Estate  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 154
My W ay of Adding Site Functionality W orks for Me!  . . . . . . . . . . . . . . . . . . . . . . . 155
Breaking the Rules  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 156
Looking Good  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 157
Chapter 7 Taxonomies  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 159
Categories, T ags, and Custom T axonomies  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 160
A Word on Information Hier archy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 160
Why Custom T axonomies?  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 161
Creating Custom T axonomies  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 165
Registering a New T axonomy  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 165
The $args  Array . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 166
The Nested Labels Arr ay Ar gument  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 167
Using register_taxonomy()  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 168
Using Our Custom T axonomies  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 173
Taxonomy T emplate File Hier archy and Nomenclatur e . . . . . . . . . . . . . . . . . . . . . . 173
Customizing Output with Functions That Must Be Called in The Loop  . . . . . . . . . 175
Customizing T axonomy Output outside of The Loop  . . . . . . . . . . . . . . . . . . . . . . . . 176
Everything in Its Place  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 176xiii
Chapter 8 Image Galleries and Featured Images  . . . . . . . . 179
Revisiting the Media Libr ary and Media Settings  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 179
Configuring Image Pr ocessing in Media Settings  . . . . . . . . . . . . . . . . . . . . . . . . . . 180
The [gallery]  Shortcode  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 182
Common Uses of [gallery]  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 183
Specialized Uses of [gallery]  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 184
Working with [gallery]  in the Content Editor GUI  . . . . . . . . . . . . . . . . . . . . . . 185
Firing the [gallery]  Shortcode fr om a T emplate  . . . . . . . . . . . . . . . . . . . . . . . . 187
Lightboxes  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 187
Working with Featur ed Images  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 188
Enabling Support for P ost Thumbnails  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 188
Sizing Y our P ost Thumbnails  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 190
Adding Differ ent-sized P ost Thumbnails  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 191
Post Thumbnail Implementation in Themes  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 192
Got the Pictur e? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 193
Chapter 9 The W ordPress API  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 195
A Quick Review of the APIs Cover ed So Far  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 196
Shortcodes under the Micr oscope  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 197
The Dashboar d Widgets API  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 200
Removing Dashboar d Widgets  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 202
The HTTP API  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 203
The Database API  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 205
The Options API  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 205
The T ransients API  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 206
The Metadata API  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 206
The Rewrite API  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 207
Other Functions and T ools . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 208
register_activation_hook()  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 208
wp_schedule_event()  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 208
wp_enqueue_script()  and wp_register_script()  . . . . . . . . . . . . . . . . . . 210
BackPr ess . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 212
A Box Full of T ools . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 213xiv
Chapter 10 Multisite: Rolling Y our Own Network  . . . . . . . . 215
A Brief History of Multisite  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 216
Enabling Multisite  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 216
Multisite in Action  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 221
The Network Admin  Dashboar d . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 222
The Sites  Submenu  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 223
Individual Network Site Settings  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 225
The Settings  Submenu  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 229
The Users  Submenu  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 235
The Themes  Submenu  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 235
The Plugins  Submenu  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 236
The Updates  Submenu  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 236
Useful Plugins Within Multisite  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 237
Troubleshooting Multisite  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 237
Enabling Multisite  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 238
Routing Issues in Subdir ectory Multisite Installations  . . . . . . . . . . . . . . . . . . . . . . . 238
You’re Multiskilled  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 239
Chapter 11 Going Global with Themes and Plugins  . . . . . 241
The Basics of Internationalization and Localization  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 242
Anatomy of a Localization Pr ocess  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 243
GNU gettext Marker s Tell Which Strings to T ranslate  . . . . . . . . . . . . . . . . . . . . . . . 243
A Function Linking Marker s to a File with a T ranslation K ey . . . . . . . . . . . . . . . . . 243
A File Pr oviding a T ranslation K ey . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 244
Putting the Pieces T ogether  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 245
Localizing a Theme  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 246
Localizing a Plugin  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 248
A Word on .MO File Nomenclatur e . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 250
Introducing P oedit  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 250
Creating a .POT  File . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 251
Translating Our .POT  File . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 259
Another W ay to Gener ate a .POT  File . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 263
Is Ther e an Easier W ay Than Localization?  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 264xv
Installing W ordPress in Y our Own Language  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 265
World T our Complete  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 266
Chapter 12 SEO, Marketing, and Goal Conversion  . . . . . . . 267
Why SEO Is So Difficult  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 267
SEO Is a Moving T arget . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 267
The Google Sear ch Algorithm Is Private  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 268
Sharks P atrol These W aters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 269
Websites Ar e Poorly Coded  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 269
There’s a Differ ence Between SEO and SEM  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 270
SEO and SEM Requir e a Team Effort  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 270
What’ s it all about anyway?  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 272
The Big Thr ee Fundamental SEO Components  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 272
Semantic P ermalinking  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 273
Proper <meta>  and <title>  Tag Inclusion  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 275
Proper Header T ag Structur e and Implementation  . . . . . . . . . . . . . . . . . . . . . . . . . 276
The Anatomy of a T ypical Sear ch Engine Spider Visit  . . . . . . . . . . . . . . . . . . . . . . . 278
Other Important SEO Aspects  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 279
Image alt Attributes  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 279
Individual P age Privacy Settings  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 280
XML Sitemaps  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 280
Disclaimer s, Terms and Conditions, and Privacy P ages . . . . . . . . . . . . . . . . . . . . . . 281
Proper Use of 30 1 Redir ects and Avoidance of 404s  . . . . . . . . . . . . . . . . . . . . . . . . 281
It’s about GOAL CONVERSIONS!  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 282
Metrics and Split T esting  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 282
Keywor ds and T ext . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 283
Making the Right Offer  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 284
Differ ent Visual Layout  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 284
Heatmaps  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 284
Over to Y ou . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 284
Index  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 287xvi
Preface
WordPress isthemost widely used website platform andcontent management system ontheWeb
today ,running onapproximately 15% ofwebsites. Itisopen source and, hence, free, released under
theGNU Public License version 2,orGPL2 forshort. Itspermissive useanddevelopment license,
combined with itsease ofusefrom both awebsite user’ sanddeveloper’ sperspective, hashelped
WordPress rapidly gain global market share forthepast several years. Itcontinues togrow each
month, outpacing other content management systems atarateofmore than twotoone. Indeed, in
theeight years since Matt Mullenweg andMike Little created WordPress asabranch ofanother
open-source project, WordPress hasbecome bigbusiness …andbusiness isgood.
Today ,WordPress hasbecome something ofahottopic making itsway from thesphere ofdesigners
andprogrammers into thecorporate world. Business owners seeking awebsite often look tobuild
aWordPress sitebecause they hear thatit’sagreat platform, andwhile some ofthem might beunsure
why WordPress issuperior ,their intuition iscorrect: WordPress isanexcellent, flexible content
management system with which tobuild awebsite. And thatmeans whether you’re aweb designer
orweb developer (and regardless ofyour experience), learning todevelop websites with WordPress
andbend theplatform toyour will isapotentially lucrative proposition. Luckily ,it’squite easy to
learn too,andwe’re here tohelp youwith that.
Sopull upachair ,grab abeverage andahighlighter ,anddiginwhile weshow youhow this
powerful, flexible, extensively developed, andever-popular content management system works!
Who Should Read This Book
This book isaimed atbeginner tointermediate-level webdevelopers seeking towork with WordPress
onafundamental level, soastodevelop effective websites forclients intherealworld. Thebook
begins byexplaining fundamental concepts, andthen extends tointermediate andeven advanced-
level topics.
While noncoders will beable toglean some useful information from thisbook, youshould atleast
have aground-level knowledge ofHTML andPHP togain themost outofit.There’ scertainly no
requirement tobeacoding guru, butunderstanding integral concepts such asifstatements, loops,
functions, variables, andthemanner inwhich PHP creates HTML forscreen output will goalong
way inhelping youcomprehend how WordPress does itsthing. Solid conceptual appreciation of
functionality aremore important than memorizing specific functions andsyntax—you canalways
look those upeasily enough. Other languages andabilities thatareuseful tohave when broadening
your WordPress knowhow include CSS, JavaScript, andwebserver configuration skills viainterfaces
such ascPanel.
What’ s in This Book
This book could bedivided into three sections. Chapters 1and2serve asathorough introduction
toWordPress andareappropriate forbeginner -level web developers who arejustgetting their feet
wetwith WordPress, aswell asexperienced developers who arenew totheWordPress world and
arelooking forasolid primer .While adeep understanding ofcoding isunnecessary when reading
theopening chapters, itisabsolutely recommended fortherestofthebook. Chapters 3to6discuss
indetail some ofthefundamental aspects ofWordPress’ sfunctionality ,andhow youcanmanipulate
each onetobuild asuccessful WordPress site. Finally ,Chapters 7to12cover specific WordPress
topics thatareuseful forgaining anintricate comprehension oftheplatform.
Because each chapter builds upon theinformation presented inprevious chapters, you’ll benefit
themost byreading through from start tofinish. However ,ifyou’re looking tosimply further your
knowledge onacertain concept, thebook canalso accommodate you. Byreading theentire book,
you’ll have athorough understanding ofWordPress’ sstrengths, weaknesses, andcapabilities asa
complete CMS solution asofWordPress version 3.2.
Chapter 1:Hello World
WordPress isreally cool. Wanttoknow why? We’llstart with abrief history oftheplatform,
before introducing youtoWordPress 3.2.You’ll alsolearn which types ofprojects areappropriate
forWordPress, andwhich aren’t. And ofcourse, we’ll introduce youtoWordPress’ sfamous
five-minute installation.
Chapter 2:WordPress 101
Before wedigtoodeeply into how youcanmake WordPress dohandstands atyour beck and
call, you’ll want tobecome acquainted with thecore platform. This chapter isyour black-tie
guided tour thatintroduces youtoallthemenus, functionality ,andbasic concepts about core
WordPress you’ll need tohave down patbefore youtackle thecode underpinning WordPress.
Chapter 3:TheLoop andWordPress FileSystem
TheLoop isthebeating heart ofWordPress, asitcontrols how content isdisplayed inanygiven
installation. Intruth, TheLoop rules everything inWordPress; itisafairly simple concept, but
without having afirm understanding ofit,you’ll struggle when taking onanysortofserious
development. Sowe’ll break itdown foryouright here, along with asolid overview ofthefile
andfolder structure you’ll need tobefamiliar with when manipulating andwriting code for
WordPress.
Chapter 4:PostTypes
Creating pages orblog posts isgreat andall,butsometimes youneed theability toformat ele-
ments sothatthey appear uniform; forinstance, items such asrecipes, staff listings, orthe
product details page inashopping cart. WordPress offers custom post types tomeet thisneed,xviii
andinthischapter we’ll explain what they are,how they work, andhow youcancreate your
own.
Chapter 5:Plugins
One oftheprimary reasons WordPress hasbecome acontent management powerhouse isdue
toitsplugins system, allowing web developers toeasily extend functionality beyond core. We’ll
explain everything youneed toknow about plugins, andhow youcanquickly andeasily install
them. We’llalso create andanalyze ourown plugin sothatyoucanunderstand how every line
ofcode works.
Chapter 6:Themes
Themes make things look awesome—it’ sassimple asthat. Inanymodern content management
system there’ saseparation ofcontent anddesign, soyoucaneasily make changes tohow a
website looks, andthemes arehow WordPress addresses this. We’lltalkabout thecomponents
ofatheme, aswell ashow youcanusethenomenclature hierarchy andpage template systems
WordPress provides tocreate richvisual experiences. We’llalsodiscuss thedifference between
display logic andsitefunctionality .
Chapter 7:Taxonomies
Modern, robust content management systems provide methods togroup pieces ofsimilar content
together inmeaningful ways; these methods arereferred toastaxonomies. Inthischapter ,we’ll
discuss taxonomies indetail andshow youhow tocreate them. We’llalsointroduce thenotions
ofinformation hierarchy andcontent wireframes, important tools thathelp facilitate intelligent
website development.
Chapter 8:Image Galleries andFeatured Images
WordPress provides ahost oflow-level andhigh-level functions formanipulating images, ranging
from theability toinsert prebuilt galleries into anypage orpost with ease andflexibility ,to
creating custom preset image sizes foruseincommercial theme development. Whatever your
skill level, you’re bound tofind something inthischapter foryou.
Chapter 9:TheWordPress API
Knowing theways ofthevarious application programming interfaces (APIs) made available
within WordPress will lead youtotruly mastering theplatform. We’llcover thePlugins and
Shortcode APIs thathandle surface functionality ,andmore fundamental processes found in
theHTTP andDatabase APIs. We’llalso talkabout thebest ways touseJavaScript libraries
throughout your themes andplugins, anddiscuss BackPress, anopen-source PHP library that
provides much ofthecore functionality available inWordPress. This isprobably themost ad-
vanced chapter ofthebook.
Chapter 10:Multisite: Rolling YourOwn Network
Inaddition tobeing configured forstandalone websites, WordPress canbeused torunanetwork
supporting many individual websites offasingle installation; thisistheMultisite feature. We’llxix
explain how tosetMultisite up,andtake youthrough aguided tour sothatyoucantryit
yourself.
Chapter 11:Going Global with Themes andPlugins
AsWordPress gains global market share, itfollows thatdevelopers around theworld would be
interested intranslating itintotheir native languages. Here we’ll cover thedistinction between
internationalization andlocalization, andexplain why youowe ittoyourself toensure your
themes andplugins areproperly localized. We’llfinish thechapter byshowing youhow toinstall
WordPress inadifferent language.
Chapter 12:SEO, Marketing, andGoal Conversion
While it’sfuntoplay with WordPress, therealreason anybusiness owner builds awebsite re-
volves around making money—and thisiswhere search engines come intoplay.We’llconclude
byexplaining toyouwhy search engine optimization (SEO) hasalways been sohard tomaster ,
andexplain thedifference between search engine optimization andsearch engine marketing.
We’llinvestigate thethree most vital SEO components, andintroduce youtotheimportance
ofgoal conversion.
Wher e to Find Help
SitePoint hasathriving community ofweb designers anddevelopers ready andwaiting tohelp you
outifyouruninto trouble. Wealso maintain alistofknown errata forthebook, which youcan
consult forthelatest updates.
The SiteP oint Forums
TheSitePoint Forums1arediscussion forums where youcanaskquestions about anything related
towebdevelopment. Youmay,ofcourse, answer questions too.That’ show aforum siteworks—some
people ask,some people answer ,andmost people doabitofboth. Sharing your knowledge benefits
others andstrengthens thecommunity .Alotofinteresting andexperienced web designers and
developers hang outthere. It’sagood way tolearn new stuff, have questions answered inahurry ,
andgenerally have ablast.
The Book’ s Website
Located athttp://www .sitepoint.com/books/wpant1/ ,thewebsite thatsupports thisbook will give
youaccess tothefollowing facilities:
1http://www .sitepoint.com/forums/xx
The Code Ar chive
Asyouprogress through thisbook, you’ll note anumber ofreferences tothecode archive. This is
adownloadable ZIParchive thatcontains theexample source code printed inthisbook. Ifyouwant
tocheat (orsave yourself from carpal tunnel syndrome), goahead anddownload thearchive.2
Updates and Err ata
Nobook isperfect, andweexpect thatwatchful readers will beable tospot atleast oneortwo
mistakes before theendofthisone. TheErrata page3onthebook’ swebsite will always have the
latest information about known typographical andcode errors.
The SiteP oint Network
TheSitePoint network now features ahost ofsites dedicated tothelatest hottopics inweb devel-
opment anddesign: RubySource4,DesignFestival5,BuildMobile6,PHPMaster7,andCloudSpring8.
Inaddition, SitePoint publishes freeemail newsletters thatfeature thelatest news, product releases,
trends, tips, andtechniques forallaspects ofweb development anddesign. Youcansign uptoone
ormore SitePoint newsletters athttp://www .sitepoint.com/newsletter/ .
The SiteP oint P odcast
JointheSitePoint Podcast team fornews, interviews, opinion, andfresh thinking forweb developers
anddesigners. Wediscuss thelatest web industry topics, present guest speakers, andinterview
some ofthebest minds intheindustry .Youcancatch uponthelatest andprevious podcasts at
http://www .sitepoint.com/category/podcast/ ,orsubscribe viaiTunes.
Your Feedback
Ifyou’re unable tofind ananswer through theforums, orifyouwish tocontact usforanyother
reason, thebestplace towrite isbooks@sitepoint.com .Wehave awell-staffed email support system
setuptotrack your inquiries, andifoursupport team members can’t answer your question, they’ll
send itstraight tous.Suggestions forimprovements, aswell asnotices ofanymistakes youmay
find, areespecially welcome.
2http://www .sitepoint.com/books/wpant1/code.php
3http://www .sitepoint.com/books/wpant1/errata.php
4http://rubysource.com
5http://designfestival.com
6http://buildmobile.com
7http://phpmaster .com
8http://cloudspring.comxxi
Acknowledgments
Mick Olinik
First, I’dliketothank everyone atSitePoint fortheir help andsupport onthisproject—especially
Tom,Kelly ,Lisa, andBrad. Youguys were allfabulous, andIenjoyed working with youonthe
project. I’dalso liketoespecially thank JenSheahan forintroducing metothisgroup inthefirst
place, andMark Harbottle forasking metowork onthisproject; itwastruly anhonor .Special
mention goes toJeremy Ferguson forhisassistance with some ofthecode andgeneral research
throughout thebook—you saved mealotoftime. Thanks tomywife, Claire, forherinitial edits
thatmade melook good infront oftheSitePoint team, andforputting upwith measIwrote it.My
team atRockstar ,especially Zack Fretty ,kept allmyducks inarowaswewent through thisprocess.
Thanks toJames Schramko andNicLucas forgiving mesomany opportunities inAustralia; Iap-
preciate working with both ofyoumore than you’ll ever know .Thanks toJason Silverman, for
giving methatinitial kick inthebehind tobegin writing, andtomyfather ,John Olinik, forgiving
metheinitial push into both web development andentrepreneurship. And finally ,thanks toTrey,
Mike, Page, andJonforalmost 20years ofperpetual inspiration, creativity ,andenergy …I’mforever
indebted toyou. Cheesecake.
Raena Jackson Armitage
Thanks first ofalltoeveryone atSitePoint whose task istocrack thewhip andpolish mywords
into something approximating cleverness—but especially toLouis, Tom,Lisa, Simon, andtoKelly
most ofall.Abigthanks toMick, whose enthusiasm andimmense knowledge ofeverything
WordPress is,frankly ,kind ofstaggering. Thanks tomyfamily andfriends allover theworld. Finally ,
thanks totheWordPress community ,forbeing kind andsharing people who make thisproduct
great.
Conventions Used in This Book
You’ll notice thatwe’ve used certain typographic andlayout styles throughout thebook tosignify
different types ofinformation. Look outforthefollowing items:
Code Samples
Code inthisbook will bedisplayed using afixed-width font, likeso:
if (have_posts()) : while (have_posts()) : the_post();
        the_content(); endwhile; endif;
Ifthecode istobefound inthebook’ scode archive, thename ofthefilewill appear atthetopof
theprogram listing, likethis:xxii
example.php
add_action('save_post',
          'save_conference_speaker_attributes'); 
Ifonly part ofthefileisdisplayed, thisisindicated bytheword excerpt :
example.php  (excerpt)
function check_current_screen() { if(!is_admin())
          return; global $current_screen; print_r($current_screen);
          }
Ifadditional code istobeinserted intoanexisting example, thenew code willbedisplayed inbold:
function the_author() { new_variable =
        "Hello";  }
Where existing code isrequired forcontext, rather than repeat allthecode, avertical ellipsis will
bedisplayed:
function the_author() { ⋮ return new_variable;
        }
Some  lines  of code  are intended  to be entered  on one line, but we’ve  had to wrap  them  because  of
page  constraints.  A ➥ indicates  a line break  that exists  for formatting  purposes  only, and should
be ignored:
URL.open("http://www.sitepoint.com/blogs/2007/05/28/user-style-she
        ➥ets-come-of-age/");
Tips, Notes , and W arnings
Hey, You!
Tipswill give youhelpful little pointers.
Ahem, Excuse Me …
Notes areuseful asides thatarerelated—but notcritical—to thetopic athand. Think ofthem as
extra tidbits ofinformation.xxiii
Make Sur e You Always …
…payattention tothese important points.
Watch Out!
Warnings will highlight anygotchas thatarelikely totripyouupalong theway.xxiv
Chapter1
Hello W orld
We’reglad you’ve picked thisbook up,andwant tolearn about oneofthemost increasingly popular
pieces ofweb software ontheInternet today: WordPress. WordPress isincredibly simple toinstall
anduse, butit’salotlikeaniceberg; thestuff thevast majority ofpeople will ever seeoruserep-
resents justthetipofwhat’ spossible. TrueWordPress rock stars understand thatit’sactually an
elegantly crafted content management system thatgoes much further below thesurface. Ouraim
istoshow youthefundamentals sothatyoucanharness ittobuild almost anything youwant online.
Asyou’ll soon see,thepower todowhatever youlikealready exists within WordPress’ score in-
stallation. Allyouneed todoisshape your application tolook theway youwant ittowith afew
simple tools. Let’sdigin,starting with ashort history lesson.
In the Beginning …
When theWorld WideWebwasborn andbegan tobecome populated with early websites inthe
mid-to-late 1990s, website developers used What YouSeeIsWhat YouGet(WYSIWYG) programs
likeMicrosoft FrontPage andMacromedia Dreamweaver (later purchased byAdobe), orminimalist
hand-coding tools likeNotepad tocreate their HTML files andupload them directly toweb servers
viaFTP clients. Webpages were generally created andmaintained individually ,which ledtoa
whole host ofproblems (looking back with thebenefit ofhindsight!). Forinstance, ifyouwanted
tochange thesame item onseveral web pages inthesame website, youtypically hadtoupdate
each ofthose pages separately .Itwasalso common forpages todiffer slightly from oneanother on
thesame sitebecause ofastray image orsome slightly different code, resulting inahodgepodge
collection ofpages thatlacked uniformity andappeared rather amateur .Worse yet—and maybe
even worst ofall—there wasnoclear separation ofdesign, functionality ,andcontent. This made
web developers theonly people qualified tomake content changes tojustabout anywebsite; addi-
tionally ,itoften proved tobeatedious, time-consuming process. Theresult wasthatbuilding a
website tended tobeahigh-cost, lowreturn-on-investment proposition thatproduced mostly frus-
tration forweb developers, business owners, andwebsite users alike—not tomention stagnant
websites.
Inresponse tothese issues, web developers began tocreate web-based software thatattempted to
allow users tosystematically manage content. While rudimentary atfirst, these content management
systems (orCMSs) developed andbecame more widespread. However ,while new features were
always being introduced andadded, they allhadtheir limitations, most notably usability forthe
non-technical, content-oriented administrative user.
Over time, three general types ofcontent management systems evolved:
■commercial
■open source, orfree
■homegrown (defined asasetofprograms developed byaparticular web developer orweb shop
fortheir clients’ exclusive use)
While theindividualistic, hero mentality ofthecommon coder dictated thathomegrown systems
were initially themost common, commercial andopen-source CMSs gained momentum. Many
developers found (and continue tofind) theopen-source world auseful andsatisfying way tocol-
laborate andbuild better systems than they’d otherwise create ontheir own; hence, open-source
projects began totake offlikewildfire.
A Brief History of WordPress
Now enters adeveloper named Michel Valdrini. In2001, Valdrini added totheopen-source com-
munity bylaunching theb2/cafelog project, anopen-source content management system written
inPHP1andutilizing MySQL2asitsdatabase. While b2/cafelog metwith limited success, 2003
sawtwonew developers, Matt Mullenweg andMike Little, step inandcreate afork oftheproject—a
legal copy ofapiece ofsoftware developed tocreate adistinctly new product, with adifferent
purpose anddirection. Thesoftware created asaresult ofthefork became WordPress.
While b2/cafelog isrecognized astheofficial predecessor toWordPress, it’sstillinactive develop-
ment itself under thename b2evolution3.Inforking b2/cafelog tocreate WordPress, Mullenweg
andLittle sought todevelop ablogging system thatwasmore focused ontheuser experience as
well asweb standards, topics thatatthetime were stillvery much influx. Over time, major features
1http://php.net/
2http://www .mysql.com/
3http://b2evolution.netThe W ordPress Anthology 2
including plugins, themes, post types, andcustom navigation have been added andimproved upon,
resulting inanextremely robust web publishing system thatcontinues toevolve.
WordPress itself isactively developed andsupported byseveral core developers—including Mul-
lenweg, Little, andValdrini—as well asavolunteer team ofabout 100keycontributors who work
diligently tomake itabetter piece ofsoftware touse. About halfofthecore contributors work for
Mullenweg’ scompany Automattic, while theothers arefrom allwalks oftheWordPress community .
Furthermore, developers around theworld continue tobuild andsupport new plugins andthemes
thatareuseful forawhole range ofpurposes, andtranslators abound tovoluntarily interpret plugins,
themes, andWordPress itself into additional languages where demand exists, further increasing
thescope andreach oftheproject.
Despite coming into theworld asblogging software, today WordPress isafull-fledged CMS with
page navigation, user management, blog creation, andmanagement tools. Whilst theword blog is
shorthand foracombination oftwowords: “web” and“log,” it’sbest defined asacollection ofin-
formation thatyouwant tocategorize. Forinstance, ifyou’re aphotographer andyouwant to
showcase your images, youcould dosobyputting together ablog foryour photos. Each post could
comprise onephoto, which inturn would combine tocreate acollection ofphotos. Similar examples
canbefound inarange oftopics, from current news andhappenings toanonline recipe collection.
Forthisreason, youcanview WordPress asboth ablog andafull-featured CMS. It’sapiece ofweb-
based software thatletsyoucreate pages, categories, andposts andassociate posts with different
categories.
WordPress.com versus W ordPress.org
WordPress comes intwoflavors: wordpress.com4,andself-hosted WordPress that’savailable for
download atwordpress.org5.Wordpress.com isanetwork ofwebsites supported andhosted by
Automattic. Users canvisit wordpress.com, sign upforafreeaccount, andcreate asmany blogs as
they likeinasimilar fashion toother popular hosted blogging services liketypepad.com.6Each of
theblogs thatauser signs upforwill have itsown URL, andwill employ many popular features,
such astheability toaddpages andbasic design elements likebackgrounds andcolors. While a
solid service, thisisallwe’ll cover onwordpress.com inthisbook.
Ontheother hand, self-hosted WordPress isfreetodownload, butnohosting isprovided—you
actually need tosecure hosting separately .Theadvantages ofself-hosted WordPress arenumerous,
including theability tocustomize every aspect ofyour site’svisual appearance through themes,
addadditional functionality viaplugins, have custom permalink URL structures, andofcourse
have fullaccess tothesource code. Infact, self-hosted WordPress includes anoption thatenables
multisite functionality ,essentially allowing youtocreate blog networks similar totheoneemployed
4http://wordpress.com
5http://wordpress.org
6http://typepad.com3 Hello W orld
atwordpress.com (formore information onmultisite, flipover toChapter 10).From here onout,
when wetalkabout WordPress inthisbook, we’ll mean self-hosted WordPress unless specifically
otherwise stated.
Core WordPress
When youdownload WordPress from wordpress.org, youaredownloading what isreferred toas
core WordPress ,orsometimes justcore.Core WordPress includes allthefundamental functionality
maintained andhoned bythecore developers andcontributors, andeach successive WordPress
release isthenext iteration ofthisprimary functionality .Minor releases tend tobesecurity patches
andbugfixes, while major releases introduce new functionality andoccasional design changes.
This book isbased ontheWordPress 3.2major release, nicknamed Gershwin.
WordPress and its License, the GPL
WordPress isanopen-source content management system licensed under theGnu Public License
(GPL), version 2.Thelicense itself canbefound inthelicense.txt filedelivered inevery WordPress
installation; however ,most people usually ignore it,because they justthink ofWordPress asopen
source, orfree. That’ sreally allyouneed toknow ,butifyouareinterested inhow theGPL works,
here’ sthedeal inanutshell.
Theprimary assertion made bytheGPL isthatallsource code foranyGPL-licensed software must
bemade openly available foranybody touseonanybasis, including those with commercial intent.
Furthermore, anymodifications made totheGPL-licensed source code must bemade freely available
ifthatsoftware istoberedistributed inanyway.Forexample, ifyouwere going tomake awhole
bunch ofchanges toWordPress’ score code andthen useittorunaprofitable business selling
oversized lawn darts tooutdoor gaming enthusiasts, that’sperfectly fine…andyouwouldn’t need
toredistribute your code todoso.However ,ifyoumade changes tothecore code, renamed it
PhrasePress, andbegan todistribute it,you’d berequired tomake your source code freely available
andrelease your new software under theGPL.
It’snecessary tonote thattheGPL license employed byWordPress innoway involves content, be-
cause content isn’t derived from theWordPress core. Instead, thecontent housed onaWordPress
siteisdistinct from WordPress. This isanimportant distinction tounderstand, specifically for
legal professionals concerned about thesecurity andintegrity oftheir client’ sintellectual property
rights.
The Main Ingr edients: HTML, CSS, JavaScript, PHP , and MySQL
WordPress’ spower comes from thesimplicity ofitssystem. Itsstandardized filehierarchy isintu-
itive andeasy tounderstand, andkeeps aclean separation between commonly modified components
andthecore installation. Additionally ,forallbutthemost novice ofdevelopers juststarting out,
it’slikely tobeunnecessary tolearn anynew languages ortechnologies toeffectively work withThe W ordPress Anthology 4
WordPress. Instead, WordPress accepts anyflavor ofCSS andHTML thatyou’re comfortable with,
andPHP 5&MySQL 5when youneed toperform some heavy lifting.
WordPress istruly aneasy-entry piece ofsoftware, andifyou’re intending tojustsetupasiteand
go,there’ snorequirement tounderstand anycode atall.Aswe’ll seeinamoment, installing
WordPress isapiece ofcake, andfrom there youcanuseafreetheme orpurchase acommercial
onetomake your sitelook awesome. After that, it’sreally allabout understanding thecontrols and
figuratively driving thecar,andwe’ll cover alotofthisfunctional usage inChapter 2.Beginner
WordPress developers willneed aworking knowledge ofHTML andCSStodosimple modifications.
Still, there’ snogetting around it…ifyouwant toreally getyour hands dirty andbend WordPress
toyour will, you’ll need tobecomfortable with PHP,andifyoureally want togetfancy ,some
JavaScript experience willcome inhandy too.This book isnotdesigned toteach youeither ofthose
things, butifyou’d liketobroaden your repertoire, there areanumber ofbooks from SitePoint that
wecanrecommend. Build YourOwn Website theRight WayUsing HTML &CSS7isagreat place
tostart intheworld ofclient-side development, while Build YourOwn Database Driven Website8
provides awonderful introduction toPHP,MySQL, andserver -side coding. Ifyou’re keen todive
into more client-side stuff andtackle JavaScript, youcould look into Kevin Yank’sexcellent
Learnable course, JavaScript Programming fortheWeb9.Without afunctional understanding of
these technologies, youmay become abitconfused once yougetpast Chapter 2.
Why W ordPress?
Let’sbehonest: asmuch asanything else, WordPress hasbecome apopular buzzword inthepast
fewyears. Many newbie web developers flock toitimmediately without much thought astowhy
they might want tousetheplatform. Experienced web project managers will tellyouthatthere’ sa
direct correlation between theultimate success ofaproject andyour reasons forwhy you’re selecting
aparticular CMS platform, aswell ashow youintend toutilize itwithin thescope oftheproject.
Luckily ,WordPress isanexceptionally flexible platform thatserves asafabulous choice formost
applications—but notnecessarily all.
Which applications areappropriate forWordPress? Let’shave alook:
Blogs
WordPress started itslifeasablogging platform, andit’sarguably thebest currently available.
Whether you’re looking tocreate atopical hobby blog oranauthority blog, WordPress isan
excellent selection.
7http://www .sitepoint.com/books/html3/
8http://www .sitepoint.com/books/phpmysql4/
9https://learnable.com/courses/javascript-programming-for -the-web-405 Hello W orld
Information-rich websites
Flexibility inhandling simple content types likefairly static pages, combined with thecustom
menu options androbust blogging capabilities, makes WordPress anawesome platform for
small, mid-sized, orlarge businesses alike. It’ssuitable forjustabout anyinformational purpose.
Information marketing andaffiliate marketing websites
Anindustry thatexploded inthelatter halfofthe’00s, information andaffiliate marketing has
special needs thatblur thelinebetween blogging andecommerce. Having been banned bymost
freeblogging platforms, thistype ofsitecanfind ahome with WordPress, offering allofthe
required customization, sales functionality ,andtoken passing andtracking inaformat thatallows
marketers toown their space instead ofrenting orpotentially breaching terms ofservice else-
where.
Light tomedium-level ecommerce
Combined with oneofseveral supported plugins, WordPress canbeanextremely robust ecom-
merce platform forphysical anddigital products, allwhile offering asimplified, easy-to-use
interface.
Membership sites
Whether you’re seeking asimple membership wall, orselling access toamultiple-tiered mem-
bership program onasingle site, there aremyriad plugins available thatprovide solid function-
ality.
Intranets
Core WordPress includes most ofthefundamental functionality thatITmanagers look forin
anintranet. Combine thatwith WordPress’ sstandard privacy options, aswell asawell-placed
plugin ortwothatprovides solutions toeach corporation’ sunique needs, andWordPress is
appropriate formany corporate intranets.
Social media
Asetofplugins andthemes exist thatarecollectively referred toasBuddyPress .BuddyPress
extends WordPress’ sstandard functionality toallow registered users tomessage andinteract
with oneanother ,ascommonly seen onsocial media networks. While there arecertainly other
options available inthisparticular area, WordPress is,ataminimum, aviable choice.
Light tomedium-level forums
WordPress canalso beextended toserve asaforum (also referred toasabulletin board). There
areseveral plugin-based solutions thatintroduce thisfunctionality ,themost lauded ofwhich
isbbPress.10It’suseful tonote thatwhile youcantechnically addforum functionality toa
WordPress installation, it’stypically done asanaddendum toother functionality onthesame
10http://bbpress.org/The W ordPress Anthology 6
site. Sites thatarefully dedicated toforums often find more fleshed-out functionality inother
solutions.
Blog networks
We’ve already alluded toWordPress providing forwhat’ scalled multisite capability ,allowing
youtomanage either afewwebsites orthousands ofthem from asingle installation. Multisite
also centralizes themanagement ofnetwork-wide plugin additions, andintroduces more
sophisticated, layered user androllsupport. Formore onmultisite, have alook atChapter 10.
Youmight think thispreceding listcovers justabout everything, butitreally doesn’t. There area
fewmore specialized types ofsites thatthecurrent core release, combined with theselection of
widely available plugins, simply fails tooffer acommercially viable solution. Many ofthese types
ofsites areeither extremely specialized orincur enterprise-level traffic. Ofcourse, thisisn’t tosay
thatthere arenoWordPress solutions available forthese types ofsites; certainly ,new plugins are
developed daily thatmay nothave existed orhadwide release atthetime ofwriting. Please take
thefollowing listwith agrain ofsalt—but here areafewexamples ofthekinds ofsites we’re talking
about:
Large-scale, specialized forums
Businesses andorganizations whose entire business model revolves around extremely large,
robust, andsecure forums often optformore specialized commercial software tosuittheir
purposes.
Large-scale ecommerce sites
While WordPress does offer excellent ecommerce platforms towork with viapremium plugins,
there arestillseveral types ofecommerce functionality youcommonly won’t find. Insuch in-
stances, there arespecialized commercial options thatcanprove tobebetter solutions forthe
high-volume retailer with specific needs. Some functionality that’scurrently lacking includes
customized visual product configurations, support formultiple shipping centers based onfactors
such asproximity tothepurchaser ortype ofmerchandise stocked, orautomated RMA (return
merchandise authorization) support.
Photography sales andgallery management
This isafairly specific one. While there areplenty ofWordPress themes andplugins that
manage images andgalleries invarious ways, there continues tobeagaping hole inthemarket
forphotography professionals who seek topresent public andprivate, password-protected
photo galleries thathave fullecommerce integration. These types ofsites areusually sought
outbyevent photography professionals andportrait photography studios. Currently ,better
options arefound with commercial andSaaS (software asaservice; typically cloud-based and
on-demand) solutions.7 Hello W orld
Customer Relationship Management
CRM solutions doexist forWordPress, butmost organizations find thatthefeature setthey re-
quire isbetter served byoneofseveral popular SaaS CRM solutions.
Web-based project management
Similar toCRMs, solutions doexist forWordPress, butmore widely accepted andutilized
project management solutions canbefound through popular SaaS options.
Now thatwehave agood idea ofwhat WordPress ismostly used for,andwhat youcanuseitfor
(and what youprobably shouldn’t useitfor), youshould now have abetter sense ofhow you’ll
implement itwithin thecontext ofyour project. Withallthatsaid, let’sstart playing with WordPress
abit.
Installing W ordPress
One ofthebiggest reasons forWordPress’ smad popularity isitsease ofuse, beginning with the
famous five-minute installation process ittouts …andfiveminutes isfairly accurate. There are
twoprimary ways toinstall WordPress, butbefore wecheck them out,let’stake amoment totalk
about your server’ soperating system.
Choose Y our Oper ating System Wisely
Invery general terms, there aretwoflavors ofweb servers commercially available:
■Linux servers
■Windows servers
Officially ,WordPress runs onboth server types, butitruns natively onaLinux server ,notaWindows
server .This means thatnotallofWordPress’ sawesome functionality works asintended onaWin-
dows server .Forinstance, it’sextremely difficult toproperly activate Pretty Permalinks (seethe
section called “Permalinks” inChapter 2)onaWindows server (and next toimpossible todowithout
fullrootaccess)—W indows forces theinsertion ofindex.php tomake itfunction. Inpragmatic terms,
instead ofaprecise linklikehttp://www .esquandolas.com/footwear/shoes/running ,youareforced
tohave themore ponderous http://www .esquandolas.com/index.php/footwear/shoes/running .
While thistechnically works, it’sabadsolution foravariety ofreasons, nottheleast ofwhich is
search engine optimization. Sowhile youcantechnically runWordPress onaWindows server ,it
doesn’t mean thatyoushould. Itisbest practice torunyour WordPress sites onLinux servers.
Now thatwehave operating systems covered, let’sjump into theinstallation process.The W ordPress Anthology 8
Installing W ordPress thr ough the W eb-Based User Interface
There aretwoaccepted ways thatmost professionals prefer toinstall WordPress: manually ,orvia
theweb-based interface thatWordPress provides. Youcanusewhichever method youlike, and
we’ll detail both here, beginning with theweb-based interface.
1.Download thecurrent version ofWordPress.
Start outbyvisiting wordpress.org11anddownloading thecurrent version ofWordPress. You’ll
endupwith asingle compression file,either a.zipfileoratarball,12depending onwhich version
youchoose todownload.
2.Upload andextract WordPress.
Upload WordPress toyour web server using either your FTP client orthecontrol panel running
onyour server ,asshown inFigure 1.1.
Figur e 1.1. Zipped W ordPress package on a cPanel web server
Note thatyoucanextract theWordPress files locally andthen upload them totheserver indi-
vidually ,oryoucanupload thecompressed WordPress fileandthen extract thefiles directly
onto theserver .Thelatter method istheway togoifyoucandoit,because it’stypically faster ,
anditminimizes theriskofacorrupted orincomplete upload. You’ll also remove thechance of
anupload timeout thatcauses some files tonotbeuploaded atall.
11http://wordpress.org
12http://searchenterpriselinux.techtarget.com/definition/tarball9 Hello W orld
The Right Place
Once youextract thefiles onyour server ,take care toplace thefiles where youwant toinstall
WordPress. Bydefault, WordPress willextract allitsfiles intoasingle directory called /wordpress/ .
Ifyouwant toinstall WordPress intherootdirectory thatyour URL ismapped to,you’ll probably
need tomove thefiles down onedirectory ,outofthe/wordpress/ directory .
3.Create your MySQL database
WordPress requires aMySQL database tostore essential data, andyou’ll have tocreate itmanually .
Ifyouuseahosting control panel likecPanel, youcandothisvery easily through avisual interface.
Create your database, database user,andpassword, andthen addyour user toyour database as
shown inFigure 1.2.Besure towrite down allofthisinformation andkeep itinasafeplace.
Figur e 1.2. Add the database user to your new database
4.Point your web browser toyour installation.
Now thatyour files areinplace, navigate towhere youexpect toseeyour website. You’ll be
greeted byascreen thatlooks likeFigure 1.3,anditwill askyoutocreate aconfiguration fileby
clicking thebutton. Goahead anddoso.The W ordPress Anthology 10
Figur e 1.3. The scr een you’ll see when pointing your br owser to the install location
5.Getyour information ready .
Next, WordPress isgoing togive youalittle reminder astotheinformation it’sabout toaskyou
for(how thoughtful, eh?), asshown inFigure 1.4.Nothing tobeconcerned about here; make sure
thatyouhave thedatabase information youjustsetup,andthen click theLet’s go! button tokeep
moving.
Figur e 1.4. W ordPress pr ompts you for the information you’ll ultimately need
6.Enter your database information.
Now justfollow theinstructions andenter your database information asperFigure 1.5.Remember ,
it’scase-sensitive, socapitalization matters.11 Hello W orld
Figur e 1.5. Inserting your database information
7.Run theinstallation.
After running abrief check toensure itcantalktothedatabase with theinformation youjust
provided, WordPress tells youthatafter abitmore descriptive information onyour part, it’s
ready togo.Let’sgive itwhat itwants asinFigure 1.6…andruntheinstall.
Figur e 1.6. Clicking the install button
8.Provide your basic siteinfo.
Now forthereally basic stuff. WordPress isready tosetitself up,butitneeds alittle information
from youabout thesiteyouareabout tocreate, asindicated inFigure 1.7.Answer afewquestions
here andthen push thebutton toinstall WordPress. Goahead. Click it.Feel thepower .The W ordPress Anthology 12
Figur e 1.7. Feeling the power of WordPress
9.And you’re ready toroll!
You’ve justinstalled WordPress. Easy.
Installing W ordPress Manually
Iftheweb-based installer seems abittedious, don’t sweat it—you’re infinecompany .Especially
when youfind yourself installing WordPress often, thewhole process cangofaster byskipping the
web-based interface altogether andjustdirectly editing thewp-config.php file.Thefirst three steps
areidentical totheprevious process andthen wechange itupabit.Let’shave alook:
1.Download thecurrent version ofWordPress.
2.Upload andextract WordPress.13 Hello W orld
3.Create your MySQL database.
4.Rename andedit wp-config-sample.php .
WordPress relies heavily onafilecalled wp-config.php tofunction, andbydefault provides you
with atemplate toshow youhow itworks: wp-config-sample.php .Start offbyrenaming thisfile
from wp-config-sample.php to wp-config.php ,sothatWordPress canseeitwhen itstarts running.
Open itupinatexteditor—you candothisdirectly onyour server ifyouaresoinclined, oron
your local machine ifyou’re more comfortable thatway (but remember toupload thefileback
totheserver after you’re done editing it).Inside thefile,you’ll justhave toaddyour database
name, database user,anduser password intheappropriate fields. You’ll also want tomake sure
thatyour authentication unique keys andsalts aresetup,which exist toincrease thesecurity of
your installation. WordPress provides aneasy tooltorandomly generate these lines ofcode,13
which youcancopy andpaste right into your wp-config.php file.
Let’spreview atwhat themodified portion ofthewp-config.com will look likewhen youfinish
editing it:
chapter_01/completed-wp-config-abridged.php
// ** MySQL settings - You can get this info from your web host 
   ** //
/** The name of the database for WordPress */
define('DB_NAME', 'sample_esquandolas');
/** MySQL database username */
define('DB_USER', 'sample_marco');
/** MySQL database password */
define('DB_PASSWORD', 'spiteman83');
/** MySQL hostname */
define('DB_HOST', 'localhost');
/** Database Charset to use in creating database tables. */
define('DB_CHARSET', 'utf8');
/** The Database Collate type. Don't change this if in doubt. */
define('DB_COLLATE', '');
/**#@+
 * Authentication Unique Keys and Salts.
 *
 * Change these to different unique phrases!
 * You can generate these using the {@link https://api. ➥
13https://api.wordpress.org/secret-key/1.1/salt/The W ordPress Anthology 14
   wordpress.org/secret-key/1.1/salt/ WordPress.org ➥
   secret-key service}
 * You can change these at any point in time to invalidate all ➥
   existing cookies. This will force all users to have to log ➥
   in again.
 *
 * @since 2.6.0
 */
define('AUTH_KEY',         'QnGRcSzcDG+e+Kv{y+@h7l&Nm>MeGNQzbJ! ➥
                            7k!-eF*35VG{+E9 6++^M!F@|Gq~|');
define('SECURE_AUTH_KEY',  'EEgr)P13 7tjQ)Hs>h%A8US/BQ20r.2X+] ➥
                            @~641=S|C%VMq|Ko|zdvp/1W)k@`+&');
define('LOGGED_IN_KEY',    'Y3--2:9a!V+_76{&9d$:UB7i{54ksw*f&$ ➥
                            !i>y&TF3LlcdJgkrnO+UmA:HUx[>3=');
define('NONCE_KEY',        'A-*,KFM%alj6lD,Gri3-z~&-tD`N*t1; ➥
                            +/*X#fPgtF!q6/2d4oj+-gn^k#Ko>@9&');
define('AUTH_SALT',        'V;bXi_7=M,?}9*t49+2DxKq`DD(v]==N# ➥
                            xwicF![UoI:F^S`x,F|,(vrvK#*6kG');
define('SECURE_AUTH_SALT', '*qi`X3#On+rRI2yc~o@cw!OQSm[z+|Qb+ ➥
                            E#!z-BdjT9j2FC`2XeWH>S-3s8Fmszd');
define('LOGGED_IN_SALT',   '2UOc--owpM}Sq<@zHv`|G_a:;)2T_B[H+^ ➥
                            nfn<CJi3xMmb<NOAFt%=gEV0*R5]2Z');
define('NONCE_SALT',       'kqpm(x+2j#bS]p-].h|3b5Hw3t6mw2$F-2C ➥
                            /kiJ;S!OQ^AZh=P)sn-BdK>ItuxgO');
/**#@-*/
5.Provide basic siteinformation andinstall WordPress.
From here onout,it’seasy sailing (ifitwasn’t already). Justpoint your browser totheinstallation
location onyour server andyou’ll begreeted bythe“basic siteinformation needed” screen we
sawpreviously .Fillitoutandclick Install W ordPress ,andbada boom—you’re done!
A Word about Installers
Technically ,there’ sathird method youcanusetoinstall WordPress, although wedon’t recommend
it.Many hosting companies provide one-click installers likeFantastico orSimple Scripts thatyou
canusetoinstall avariety ofopen-source software, including WordPress. Onthesurface, itsounds
likeagreat idea—after all,aseasy astheaforementioned installation process sounds, why notjust
click abutton andhave italltaken care offoryouimmediately ,right?
Actually ,there areacouple ofreasons tobewary ofinstallers. First ofall,andprobably theleast
harmful, isthefactthattheinstaller may notinstall themost recent version ofWordPress. WordPress
releases new versions allthetime, andit’simportant tokeep upwith them foravariety ofreasons,
nottheleast ofwhich issecurity .After all,WordPress isanextremely popular piece ofsoftware,
andthatmakes itatarget formalicious hackers. WordPress constantly fixes security holes, somany15 Hello W orld
updates don’t introduce new features, butrather aresecurity patches designed tomake sure your
siteisasbulletproof asitcanbe.
Youmight think thatthere’ sstillnorealissue tobeconcerned about with installers—despite the
factthey may notinstall thecurrent version ofWordPress—because ofhow easy WordPress isto
upgrade automatically .However ,some ofthese installers actually tiethemselves into your install-
ation, preventing upgrades unless they occur through their system rather than WordPress’ s.This
isdistressing onseveral levels: weneed tobecertain thatthecurrent WordPress version isinstalled,
andwedefinitely want tobeconfident thatwe’re dealing with aclean, unchanged version of
WordPress.
Lastly ,while itseems likeagreat idea toautomate asmuch asyoucan, sometimes itcanallgo
wrong. Especially insituations where thehosting environment hasn’t been accounted forbythe
author ofaninstaller ,matters canandsometimes dogobump, andyoucanendupwith aWordPress
sitethat’sinstalled incorrectly .Thepoint isthatit’svery easy toinstall WordPress—so doyourself
afavor andinstall itthecorrect way.
Giving W ordPress Its Own Dir ectory
When WordPress isnottheonly software being runonaparticular domain, many developers choose
togive WordPress itsown directory ontheweb server ,instead ofinstalling itintheroot public
HTML directory you’d likethesystem topropagate to.Soyoumight physically install WordPress
athttp://www .esquandolas.com/wordpress ,butactually look tohave thewebsite respond properly
atjusthttp://www .esquandolas.com ,asindicated inFigure 1.8.This technique isoften used when
youneed toredevelop anexisting website onthesame server thatthecurrent website isrunning
on,butdon’t want tointerrupt theexisting website until youareready tofliptheswitch andmake
itgolive. It’salso ahandy way tokeep thedirectory structure clean andorganized onyour web
server ,andavoids mixing inother files anddirectories being used forapurpose outside WordPress.
Figur e 1.8. W ordPress URL, Site URL, and admin email addr ess in the Gener al Settings page
A Word About Multisite
When youenable multisite, WordPress must beinstalled inarootdirectory; itwon’t work correctly
ifyouattempt tousetheaforementioned technique. That said, ifyouareenabling multisite, you’re
likely tonotbedoing anything elseinthatserver directory space, soit’sbarely anissue anyway .
SeeChapter 10formore onmultisite.The W ordPress Anthology 16
Giving WordPress itsown directory isaneasy process. Simply install WordPress likeyouwould
normally—but initsown directory .Then, when youwant toportittoshow upinadifferent location,
loginto your WordPress installation, gotoSettings >General ,andchange thesiteURL toreflect
where you’d likethesitetopropagate to.Now save your changes. Finally ,copy theindex.php and
.htaccess files tothenew directory where thenew siteshould actually resolve toandopen upthe
index.php file.Assuming you’ve installed WordPress into asubdirectory ofthedirectory you’d like
thewebsite stored inside, andcalled itwordpress asperourexample, you’ll need tofind thisline
inthecopied index.php file:
require('./wp-blog-header.php');
And change ittothisnew line:
require('./wordpress/wp-blog-header.php');
After yousave thefile,you’re alldone, unless you’ve already setupyour pretty permalinks (more
onthese inthesection called “Permalinks” inChapter 2).Ifthat’sthecase, goback into your
WordPress admin dashboard andnavigate toSettings >Permalinks ;save theexisting permalink
structure onemore time. This will refresh your permalink structure inthe.htaccess fileandmake
theentire siteroute properly .Formore detailed information onthisprocess, check outtheWordPress
Codex page.14
Resour ces and Learning T ools
What most developers come toappreciate upon digging into theWordPress community isjust
that—there’ sareal, vibrant, intelligent, andhelpful development community thatisconstantly
building, improving, refining, translating, andotherwise adding totheconversation thatisWordPress.
Beitthrough documentation, forums, local meetups, orchat rooms, you’ll find numerous mediums
togive andreceive help within thecommunity .Let’snow look atsome ofthemore popular ways
tobecome involved andinteract with thecommunity .
The W ordPress Codex
Although it’stheleast interactive ofanyofthetools we’ll mention here, theWordPress Codex15is
byfarthemost powerful resource thatthecommunity hastooffer.TheCodex isWordPress’ sonline
documentation. It’sacomplete resource thatisperpetually kept uptodate byvolunteer contributors
within thecommunity ,andmay well bethemost useful toolavailable forlearning how touse
WordPress from theground up.It’salso handy forlooking upspecific functions andprocesses.
While theCodex istechnically awiki, andassuch contains information thatisoutofdate from
14http://codex.wordpress.org/Giving_W ordPress_Its_Own_Directory
15http://codex.wordpress.org/17 Hello W orld
time totime, theCodex willteach youmuch more about understanding how tocomplete tasks than
simply memorize specific functions (although themore youknow ,theeasier your lifewillultimately
be).Ifyoustruggle tounderstand aconcept orneed clarification onhow touseaparticular function,
theCodex should always beyour first stop. It’syour very best friend.
Support Forums
Interactive places thatoffer help canbefound inanynumber ofsupport forums ontheWeb.In
particular ,theofficial WordPress Support Forum16isagreat place tostart. Powered bybbPress,
theforum software wediscussed earlier ,theWordPress Support Forum isespecially unique inthat
itautomatically creates aforum forevery plugin listed within theWordPress Plugin Directory ,and
includes functionality thatallows forplugin developers tomark support questions asresolved.
There areplenty ofother WordPress forums tobefound across theWeb,including SitePoint’ sown
WordPress forum.17
WordCamp and Local Meetups
Ifyouaremore ofareach-out-and-touch-somebody type ofperson, have alook toseeifthere might
bealocal group ofWordPress developers andenthusiasts thatconnects onaregular basis.18Local
meetups tend todraw people from allaspects oftheWordPress community ,including developers,
designers, entrepreneurs, academics, hobbyists, marketers, andmore. They’ve proven extremely
beneficial forboth novice andseasoned WordPressers alike. Inlarger communities, youmay find
several groups segmented formore specific purposes, butitreally depends onwhat thegeneral in-
terests areofthepeople within your community .
Once agroup becomes sizeable andthere’ senough interest shown, somebody either inside the
group orwithin thegeneral WordPress community may seek toorganize aWordCamp. Inanygiven
locality ,WordCamp isanevent thatoften serves astheannual keystone forlocal meetup groups.
Usually comprising twodays, such events areoften sponsored byAutomattic, encouraging alarge
number oflocal experts togive presentations onWordPress-related topics, along with national and
international experts who introduce new information, ideas, andinfluences intothelocal community .
Ifyou’ve never been toaWordCamp andareinterested inWordPress andeverything thatgoes along
with it,it’sanevent thatiswell worth your time. Check outtheschedule ofupcoming WordCamps19
andattend anevent near you.
16http://wordpress.org/support/
17http://www .sitepoint.com/forums/wordpress-300/
18http://wordpress.meetup.com/
19http://central.wordcamp.org/The W ordPress Anthology 18
WordPress.tv
Ifyou’re unable tomake ittoaWordCamp, butwant toseereplays ofpresentations orarelooking
forvideo tutorials andrelated WordPress video-based content, WordPress.tv isforyou.20Here
you’ll find information pertinent toboth self-hosted WordPress andwordpress.com.
Chat Rooms
IfyouareanIRC(Internet Relay Chat) fan,there areseveral chat rooms thatoffer real-time assistance
toyour issues. Ifyou’ve never used IRCbefore, you’ll need anIRCclient onyour computer toconnect
totheservice. Once youhave your IRCclient ready toroll, connect totheFreenode server at
http://webchat.freenode.net/ ,andhave alook atthefollowing chat rooms thatcover these topics:
#wordpress This isthemain WordPress support channel. Ifyouhave general questions,
thisisreally thebest place tohang out.
#wordpress-dev This isthemain channel covering discussions about WordPress core devel-
opment. Itisbest toskip thisoneifyouarelooking forgeneral WordPress
assistance. Topics here regard core development only.
#buddypress-dev This channel isforanything andeverything related toBuddyPress.
#bbpress Thechannel foranything andeverything related tobbPress.
Google
Look, thetruth isthatWordPress ispretty darn popular ,sototrytocreate anexhaustive listof
quality WordPress learning tools andresources might literally uptake halfofthisbook—not to
mention become outofdate quickly because ofnew resources thatcontinually crop up.Aswith
anything else, anexcellent tactic istosimply usethealmighty Google andtype inexactly what it
isyou’re seeking tolearn about. You’ll find tutorials, videos, support forums, andblog posts galore
thattouch upon every aspect ofWordPress.
People, wehave abig,helpful community outthere, somake sure youuseit.Don’t beafraid tobe-
come involved, andremember togive back tohelp outthenext newbie. Attheendoftheday,we’re
allamateurs; some ofusarejustalotmore professional about itthan others!
Ready to Pr ess On
Well,that’sawhole bunch ofstuff wejustcovered, huh? Welooked atabrief history ofmodern
webdevelopment, from itsorigins through thedevelopment ofmature content management systems,
aswell ashow Matt Mullenweg andMike Little brought WordPress into being. Wealso covered
20http://wordpress.tv/19 Hello W orld
theway theWordPress community works duetoitscore developers andcontributors, aswell as
thegeneral development community thatcreates andsupports both freeandpremium plugins and
themes.
Wediscovered themost common uses forWordPress, thegeneral approaches totake toaccomplish
aparticular type ofproject, andwhen you’re better offlooking inadifferent direction forasolution
toaweb application. Finally ,youshould now have atleast oneWordPress installation upand
humming along nicely ,andanarmy ofresources where youcangotofind help. So,with allthat
said andyour shiny new WordPress siteattheready ,let’sjump oninandhave alook around, shall
we?The W ordPress Anthology 20
Chapter2
WordPress 101
WordPress isapowerful development platform thatcanscale tohandle thesimplest ofwebsites,
aswell asmore robust andcomplex custom web applications. Before wediginto thenitty-gritty of
code manipulation, it’suseful toreturn tothebeginning andtakealook atthefunctionality provided
bydefault inevery core WordPress installation.
An Overview of Cor e WordPress
Fornewbie website administrators, thischapter will serve asaprimer onthebasics ofwhat you’ll
find within amodern CMS. And ifyou’re already well-versed inalternative commercial oropen-
source content management systems, itwillprovide athorough road map thatillustrates how content
management concepts apply intheWordPress universe. Ifeither ofthese descriptions resonate with
you, orifyoujustfeellikereviewing what’ savailable andpossible, weinvite youtositback, relax,
andcome along with usonatour ofthecore WordPress administrative back end. Ifthiswasn’t a
book, we’d offer refreshments, butsadly you’re outofluck.
Setting the Mood
Like many things inlife,itcanbehelpful tosetthestage forwhatever itisyou’re doing before
jumping into themain event. After all,ifyou’re planning aromantic dinner foryour significant
other ,it’smore than justcooking areally nice meal …you’ll want tosetthetable, light some candles,
dim thelights, andputsome Barry White on,right? Inthesame way,it’sagood idea tohave alook
around theWordPress admin back endandconfigure some basic settings before youlaunch into
adding content.
The Dashboar d
TheDashboard isessentially thehome page fortheWordPress administrative dashboard, andit’s
what you’ll first encounter every time youloginto WordPress. Itisdesigned togive youavisual
overview ofsome ofthekeyelements going onwithin thewebsite byutilizing movable Dashboard
widgets. AsyoucanseeinFigure 2.1,theDashboard features several rectangular areas thateach
encapsulate apiece ofinformation orfunctionality .
Figur e 2.1. The W ordPress Dashboar d
Each ofthese sections areactually self-contained, movable Dashboard widgets thatwecanarrange
bysimply dragging them around into theorder andconfiguration wechoose. Assoon aswemove
aparticular Dashboard widget, thenew configuration isautomatically saved; it’llalways beright
where weleftitunless wemove itagain.
Take It or Leave It
It’suseful tonote thatyou’ll either absolutely love orlargely disregard theDashboard. There’ s
nothing ontheDashboard thatyouwon’t find elsewhere within theadministrative back end, and
usually with more fleshed-out functionality .Still, alotofusers quite likeit,because itallows them
anoverview oflotsofelements from onevantage.
Core WordPress comes with abunch ofpre-installed Dashboard widgets thatyoucanmove around
andplay with, butsome plugins will introduce additional Dashboard widgets foryour use. Ifyou
find yourself using theDashboard quite abitbutwould liketocustomize itsappearance orremove
several widgets thattake uptoomuch space, youcanhave alook atitsscreen options.The W ordPress Anthology 22
Screen Options
Many areas oftheadministrative back endfeature screen options, evident inFigure 2.2.When
screen options exist foraparticular WordPress section, you’ll find anappropriately labeled button
intheupper right-hand corner ofyour screen thatwill reveal amenu specific tothearea you’re
working on.
Figur e 2.2. Scr een options in the W ordPress Dashboar d
FortheDashboard, you’ll notice thatWordPress provide twotypes offeature controls: theability
toshow andhide different Dashboard widgets, andvary thenumber ofvertical columns todisplay
your Dashboard widgets. Asauser,thisgives youagreat deal offlexibility incustomizing your
Dashboard.
Keep It Relative
Ifyouareadeveloper who plans onintegrating aDashboard widget into aplugin, you’ll want to
take thewidth ofaDashboard widget intoaccount. Keep inmind thatyour widget could berunning
inarelatively wide, one-column environment, orcrunched upinamuch narrower four-column
environment. Besure touserelative widths forvisual outputs inthese instances, andrecognize
thatyousimply lack anycontrol astohow theDashboard widget will ultimately beviewed.
The Admin Menu
Running along theleft-hand side oftheback end, you’ll find themain Admin menu used within
WordPress. Over theyears, theAdmin menu hasseen some ofthemost significant overhauls ofany
ofthevisual aspects within theadministrative back end, originating asatop-running horizontal
menu andremaining thatway until WordPress 2.7,when thedesign wasshifted toavertical posi-
tioning. Along with several other administrative visual elements, WordPress 3.2took itastepfurther
andmade themenu minimal andnarrow; adesign improvement thatdoes abetter jobofstaying
outofyour way,andgives youmore workspace onsmaller browsers.
Each main section within thecore isatop-level menu item intheAdmin menu. Moving your cursor
over totheright ofeach top-level menu label will reveal adrop-down arrow thatexpands toa
submenu beneath. InFigure 2.3,you’ll notice thattheUpdates menu item displays agray circle
with anumber oneinit,indicating thatwehave oneplugin ortheme thathasupdates available23 WordPress 101
thatwecanautomatically upgrade to.Additionally ,themenu highlights thesection you’re working
in,pointing toitwith asubtle right-handed arrow .Finally ,ifyouwant toseelessofthemenu, you
canalways click theCollapse menu link atthebottom ofthemenu, which will decrease itswidth
byabout 80%. This leaves only themain icons visible, soyoustillhave access toyour navigational
controls.
An Ever-expanding Menu
Figure 2.3shows thedefault Admin menu when youfirstinstall core WordPress, butonce youbegin
adding plugins toyour site, your menu will become more cluttered. When youdoinstall plugins
andlook touseyour new functionality ,understand thatitssettings page cantechnically belocated
anywhere onthismenu, ashooks exist toaddtoeach section (we’ll learn more about hooks later
oninthesection called “Action Hooks andFilter Hooks” inChapter 5).However ,you’ll most
commonly find plugin settings pages listed assubitems ineither theSettings orToolsmenus, or
added astheir own top-level menu.
Figur e 2.3. The main Admin  menu in W ordPressThe W ordPress Anthology 24
Gener al Settings
Thenext piece weshould have alook atistheGeneral Settings screen, seen inFigure 2.4andlocated
atSettings >General .General Settings arewhere youcansetthemost fundamental variables used
throughout theinstallation.
Figur e 2.4. The Gener al Settings page
Site T itleand Tagline areself-explanatory ,andmany themes usethem bydefault inyour website
header andtitle tags. We’ve already touched upon siteaddresses inChapter 1,with theWordPress
address being thephysical location where WordPress isinstalled, while thesiteaddress istheURL
thatthewebsite should actually propagate anddisplay to(ifyouareunclear onthis, goback and
have alook atthesection called “Giving WordPress ItsOwn Directory” inChapter 1).Therestof
theoptions arealso self-evident bytheir names: primary administrative email address, new user
default role, time zone, date format, time format, andwhat dayyouwant tostart your calendar on
ifyouchoose tousethecalendar widget thatcomes standard with core.
Theonly option thatmay need explanation isMembership ,which iswhere youcanindicate who
cansign uptobeauser onthewebsite—whether through theautomated user registration functions
built into core, ormore restricted access with amanual registration ofallusers. Let’skeep moving,
though; thetour getsbetter .25 WordPress 101
Themes
When youmove into anew house, youonly feelcomfortable once there’ sfurniture inyour front
room andsome artwork onyour walls. Itdoesn’t have tobeperfect—just aslong asit’snotblank
andbare. Thesame holds true foryour website, andluckily WordPress ships with adefault theme
thatcanbecustomized. Furthermore, while youcanonly have onetheme activated atatime, you
canaddthemes toyour sitetoyour heart’ scontent. Popover toAppearance >Themes andyou’ll see
your Manage Themes screen, which willshow youallthethemes you’ve already loaded toyour site.
Foreach inactive theme, you’ll have three available options: Activate ,Preview ,and Delete .When
youhave content populated inyour site, thePreview option isespecially nice, asyou’ll getagood
idea ofwhat anew theme will look likewithout having toactually make thechange toyour live
site.
Youcanalso addnew themes from right inside your back endbyclicking theInstall Themes tabat
thetopofyour screen, asseen inFigure 2.5.There’ salso theoption tolook foradditional themes
through theWordPress Theme Directory ifyouwish.
Figur e 2.5. Some of the theme options in Install Themes
WordPress will letyousearch themes from theTheme Directory bykeyword andvisual attribute,
oryoucanlook through featured, recently updated, orbrand new themes thathave been made
available. Each theme canbepreviewed andinstalled right away ,giving youplenty ofoptions to
make your website look killer—even ifyouhave noparticular graphic design skills. Youcanalso
usetheUpload link toinstall atheme ina.zipfileyoumight have onyour local machine.
Since we’re talking about themes, there areacouple more points worth noting. Aswe’ll seelater
inthisbook, many themes include theme-specific, user-configurable options. Inthese instances,The W ordPress Anthology 26
thetheme canactlikeaplugin, andmay addsubmenu items intheAppearance menu. Forinstance,
wehave WordPress 3.2’sdefault theme—T wenty Eleven—active intheprevious example, which
hasinturn added Theme Options ,Background ,and Header submenu items toourAppearance menu.
Ifwechange toanother theme, these menu items will disappear andbereplaced with different
options unless thenew theme hasspecifically configured them tobethere. Anadditional toolthat
youshould beaware (but wary) ofisthetheme editor ,found atAppearance >Editor .This toolgives
youdirect access toview and(ifyouhave relaxed enough permissions) make changes tothetheme
code directly while itislive. Bevery,very careful with thistool: it’snever best practice tomake
coding changes inaliveenvironment, since even experts canaccidentally miss asemicolon here
orabracket there, resulting inmayhem.
Finally ,while youtechnically canchange your theme easily andasoften asyoulike, ifyou’re trying
tobuild abrand foryour company orwebsite ingeneral, making frequent theme changes isgenerally
abadidea, unless youhappen tobethemost avant-garde ofartists. People canbeconfused easily ,
andvisual brand continuity means alot.Remember thatwhile dressing upyour website canbe
tons offun, itisn’t likedressing yourself inthemorning—save thefrills forwhat you’re wearing.
Privacy Settings
Inwhat may betheeasiest, most straightforward setting inWordPress, Privacy Settings (available by
navigating toSettings >Privacy )determine whether ornotyouwant toaddnoindex ,noarchive ,and
nofollow tagstoevery page onyour website. This effectively makes itinvisible tosearch engines,
andhence justabout anyone who’ sunaware ofthedirect URL ofthewebsite. It’sreally handy when
youarerebuilding anexisting website inapublic location, andwant toensure your timing isright
when relaunching thenew one, orifyouarelooking torunapublic corporate intranet, buthave
noneed foryour pages tobeindexed byengines. When privacy issettoblock search engines, a
message isdisplayed intheRight Now Dashboard widget, letting youknow thatsearch engine logging
isblocked.
Automatically Updating
Finally ,WordPress gives users theability toupgrade conveniently anddirectly from within the
WordPress administrative back end. Whenever anew release ofWordPress isavailable, you’ll receive
anotification with acorresponding upgrade link atthetopofevery page intheback end. Click the
link andyou’ll betaken toaformal update page, which will give youtheoption toupgrade Word-
Press, aswell asanyout-of-date plugins thatyouhave inbatch. Theautomated upgrade utility is
excellent, andmakes keeping upwith feature updates andsecurity patches apiece ofcake.
Back Up, Back Up, Back Up!
While itshould genuinely gowithout saying (and before youactually click theUpgrade button you
must read past amessage thatreminds you), please, pretty please, with sugar ontop…make sure
youhave abackup ofyour website. WordPress core itself hasnointegrated backup solution fora27 WordPress 101
number ofreasons, most notably because ofthevaried environments thatWordPress will runon;
however ,ifyouaredoing anything ofnote with your website andhave anylong-term care foritat
all,youreally owe ittoyourself toregularly back upyour data. There aretwocommon methods
forbacking upandrestoring WordPress—either aWordPress backup plugin (and there areseveral
premium plugins outthere thatdoagreat job), orsome type ofserver -based backup option that
covers both your website andyour other web-based server data (such asemail, DNS andthelike).
Wewon’t digmuch more intobackup solutions here asit’sbeyond thescope ofthisbook, butavoid
making themistake ofoverlooking itsimportance before it’stoolate.
Creating and Managing T ext-based Content
Now thatwe’ve covered thebackground andsetup stuff thatweneed with every WordPress install,
wecanfinally getdown towhat thisisreally allabout: working with, organizing, andmanaging
content. Content canpragmatically bethought ofasanypiece ofinformation we’re going tobe
adding toourwebsite, andcommonly describes text, images, videos, andaudio files. However ,
placed within thecontext ofWordPress, most people tend torefer totextthroughout awebsite as
content ,while images, videos, audio files, PDFs, andthelikearecategorized asmedia. Bydefinition
it’sallcontent, butyou’ll find people referring toitindifferent ways. Don’t worry ,we’ll cover all
ofit,beginning with thetext-based stuff.
Pages
InWordPress, themost basic andintuitive form oftext-based content isapage. Pages aremeant to
beused forstatic informational content; thatis,content that’sonly changed infrequently .Ifyou
think about itinterms ofthegeneric small business brochure website, example pages might include
About Us ,Map and Directions ,orContact Us .Ineach ofthese, thecontent may need occasional adjust-
ments, butitshouldn’t change allthatmuch.
Inorder toview allthepages thatyouhave loaded into your site, gotothePages top-level menu in
theAdmin menu, andclick oneither themain Pages heading ortheAll Pages submenu item. This
will give youacomplete listing ofallthepages thathave been created, aswell astheir publishing
status (whether they’re indraft, published, orscheduled tobepublished—more onthisinabit),
theauthor who created them, andthedate they were created orpublished. Adding pages isas
simple asclicking theAdd New button atthetopofthePages management screen, orthesubmenu
item ofthesame name inthePages section oftheAdmin menu. Editing existing pages, ontheother
hand, canbedone bysimply locating thepage you’d liketoeditwithin thepage listing, andclicking
onthename ofthatpage. You’ll then bebrought toascreen thatlooks likeFigure 2.6.
Before wejump into theguts ofpage editing, it’suseful tonote thatforboth theprimary types of
text-based content inWordPress—pages andposts—the editing screens aresimilar .They aredivided
into twosections: thecontent editor ,andsupporting attributes thataredisplayed viameta boxes
(seethesection called “Meta Boxes” ).We’llexamine both sections within thecontext ofpages soThe W ordPress Anthology 28
thatwedon’t need tospend asmuch time onthem when welook atposts, which arealittle more
complicated conceptually .
Figur e 2.6. Editing a page
Upon initial installation, WordPress isgood enough toprovide asample page toplay with, sothat
youcangetafeelforhow things work; thisiswhat theEdit Page screen looks likeforthatpage. The
main portion isfairly obvious; atthetopisthemain title forthepage—in thisinstance, it’sSample
Page.Below thetitle boxisthepermalink, which we’ll cover thislater oninthechapter ,andin
even greater detail inChapter 12;fornow itsuffices tounderstand thatifyouhave Pretty permalinks
enabled, thepage’ sslug will default tothesanitized version ofthepage title. Below thisisthe
content editor: theplace where youcanactually enter andedityour page content.
The Content Editor
Aswe’ve described, pages (and posts, covered later) make identical useofthecontent editor ,which
youcanthink ofasakind ofword processing program. After typing orpasting your page copy into
themain content area, youcanthen format itasyouintuitively would doinanycommonly used
word processor: through aformatting baratthetopofthecontent area. This toolbar hasthebuttons
thatprovide your most important formatting functionality: highlight aword orphrase andclick the
bold, italic, orstrikethrough buttons, place your cursor inyour textwhere youwant tocreate bulleted
lists orblock quotes, oralign your content asyouwant it—it’ sallthere. Hovering over each button
will produce atooltip, incase youneed todiscover itspurpose. When youwant toaddalink,
highlight thecopy where itwill be,andclick thebutton thatlooks likeachain link. This will give
youadialog boxwith allthestandard hyperlinking options thatyou’re accustomed to,aswell as
additional features thatletyousearch andlink toexisting content within your site. It’sjustaseasy29 WordPress 101
toeditanexisting link: place your cursor onthelink youwant towork with andclick thesame
button. Deleting alink follows thesame process, butinstead ofclicking thebutton thatlooks like
achain link, click thebutton thatlooks likeabroken chain link. (See what wejustdidthere? Tough
stuff!)
Adding images, video, andaudio isdone byclicking theappropriate icon next totheUpload/Insert
link above thecontent editor .This will bring upadialog screen where youcaneither upload afile
directly from your computer ,orinsert oneyoualready have inyour media library .We’llcover this
inmore detail inthesection called “Working with Media andtheMedia Library” .
Another essential feature built intothecontent editor istheability toflipbetween visual andHTML
versions ofthepage you’re working with. Todoso,click theappropriate tabintheupper right-
hand corner oftheeditor tomodify your view .Ultimately ,keep inmind thateverything youbuild
inWordPress isgoing tobedisplayed inanHTML format; therefore, while avisual editor ishelpful
inknowing how your page will look, it’ssometimes necessary tolook atandmake adjustments to
theunderlying HTML thatwill support thatcontent. It’salso anabsolute necessity anytime you
need toaddascript ofsome sorttoyour copy .Companies thatprovide ready-to-use services for
website owners—such ashosted streaming video players, mailing listservices, andeven hosted
ecommerce solutions—routinely provide rawHTML orJavaScript code blocks thatthey require
youtoinsert into your page copy where youwant their service toappear onyour web page. This
means youneed tohave theability todirectly access theunderlying HTML ofyour content copy
through thecontent editor .
Keep It Plain
Ifyouarepasting inyour copy from another source rather than typing itin,beaware ofthefollowing.
Although youcanpaste directly from Microsoft WordtoWordPress, orconvert copy toplain text
before pasting it,it’sadvisable touseaplain texteditor such asNotepad orTextEdit instead. This
ensures youareadding itinplain text(rather than rich text), thus avoiding anyextraneous
formatting orrandom characters thatcancause display issues within WordPress.
Completing thetour ofthecontent editor istheenhanced fullscreen editing feature commonly re-
ferred toasdistraction-free writing. Inthetoptoolbar ,click onthemenu item with theicon featuring
four arrows thatpoint towards thecorners inanexpanding fashion. Youshould seeasimilar view
asinFigure 2.7.The W ordPress Anthology 30
Figur e 2.7. W riting without distr actions
Introduced with WordPress 3.2,distraction-free, fullscreen writing isapopular feature among
copywriters who spend alotoftime writing directly into WordPress. Upon entering thefullscreen
mode, youareinitially shown thepared-down content editing options asdisplayed inFigure 2.7;
butplace your cursor inthecontent areaandstart typing, andallthose minimal functionality queues
fade away ,leaving youwith justyour thoughts andwords onawhite screen. It’saZen-like feature
thatcanhelp thecreative process bygetting ridofoverstimulating clutter ,letting youfocus onthe
content youarewriting. Move your cursor again andyour minimal navigation pops back up,complete
with theoption toleave fullscreen andgoback tothenormal editing screen.
Meta Boxes
Thenext major component inthepage editing screen isallabout thesupporting attributes associated
with anygiven page (orpost). These supporting attributes arehoused inmeta boxes —boxes within
thegraphical user interface thatcompartmentalize information—and display ontheright side of
thepage editing screen. While plugins orthemes willoffer youtheability toaddcustom meta boxes
tothesidebar orbeneath thecontent editor indifferent ways, thetwothatyoushould beaware of
first upinvolve publishing information andprimary page attributes.
Atthetopoftheright-hand sidebar isthePublish meta box, which handles publishing information
forthepage. Themain attributes thatyoucanchange andmodify here are:
Status
Pages andposts canbesaved inWordPress andmarked with thestatus ofPublished ,Pending
Review ,orDraft .Pages thathave astatus ofDraft arejustthat: they areworks inprogress, and
unable tobeviewed inanymanner atthefront endofthewebsite. Pages thatarePending Review
aresimilar tothose inDraft ,with theexception thatwebsite editors with publishing privileges31 WordPress 101
caneffectively moderate thecontent onthese pages, making changes prior topublishing. Published
pages areliveonthesite.
Visibility
Relevant once apage hasactually been published, thisattribute describes therules allowing
website visitors toview thatparticular page. Private pages areavailable onthefront endofthe
website only tothecreator ofthepage, while Password Protected pages require apassword to
beviewed, which canbesetinthislocation upon selecting theoption. Public pages arevisible
toall.
Published on
Defaulting tothecurrent time, thisattribute allows youtodefine thespecific time apage should
bepublished tothesite. Youcanbackdate thepublishing date ofapage ifyouwish, oryoucan
schedule apage tobepublished atadate andtime inthefuture. This attribute ismore useful
inbatch scheduling thepublishing ofposts rather than pages, butthere arecases where
scheduling apage might beappropriate. Forinstance, aphysician’ soffice might have apage
foreach ofthedoctors working intheoffice. Ifanew doctor washired andscheduled tobegin
work several weeks from thatdate, theperson responsible forwebcontent could addthatdoctor’ s
profile page tothesiteimmediately ,butnotpublish ituntil thedaythedoctor started work.
Directly underneath thePublish meta boxisthePage Attributes meta box, which features these par-
ticularly important attributes:
Parent
Pages have theability tobebuilt intohierarchical structures; thisisextremely useful fororgan-
izing your siteinformation andsetting upyour website permalinks properly (more onpermalinks
inthesection called “Permalinks” ).Pages arestructured tohave parent-child relationships,
which enable amore specialized version (child information) ofamore general version (parent
information) ofaparticular page. Forinstance, ifwewere building awebsite thatrevolved
around thetopic ofenergy andfuel, wemay have apage forliquid fuel. Ifwechose tobreak
outindividual pages thatdetailed different types ofliquid fuel—say gasoline, diesel, andjet
fuel—we would seek tocreate aparent-child relationship within individual pages. After creating
apage foreach ofthese topics, we’d then locate andselect theLiquid Fuels page inthedrop-
down boxoneach ofthethree different fueltype pages (JetFuel, Gasoline, andDiesel); this
indicates thateach fueltype page aresubsets (orchildren) oftheoriginating page, Liquid Fuel).
Template
Every WordPress theme bydefinition comes with atleast onepage template, which isdefined
bytheindex.php fileaswe’ll learn inChapter 6;however ,youcanaddasmany page templates
asyou’d liketoanygiven theme. Page templates cancontrol how anyWordPress page appears
and, insome cases, operates.The W ordPress Anthology 32
To Be, or Not to Be Seen
Many aspects ofWordPress won’t bevisible onthescreen until youhave aneed foranoption to
bedisplayed. Forinstance, when youinitially install WordPress, you’ll beprovided with onesample
page. Ifyouhappen togolooking fortheparent drop-down boxwhere youonly have onepage
loaded toWordPress, youwon’t find it;WordPress issmart enough toknow thatit’simpossible to
have aparent-child relationship ifonly onepage exists. Similarly ,inacategory listing, aparticular
category will remain unseen unless there isactually apost inthatcategory todisplay .This really
isintuitive information, butwhen you’re learning how tousethesystem initially ,itcanbeabit
confusing. So,asyoulearn techniques andfeatures ofWordPress, always keep inmind thatyou
may actually need toaddcontent inorder toseesomething work theway youexpect itto.
Saving (Y our Backside)
Thefinal twoelements ofnote onthepage editing screen aretheUpdate button andtheMove to
Trashbutton. The Update button isstraightforward: it’syour main save andupdate button forthe
page. Ifyoudotrytonavigate away from apage before updating, WordPress willtryitsbesttosave
your behind: apop-up notice will askifyoureally want toleave thepage before saving your work.
Ifyoustilldecide tomove onandenduplosing something youreally needed—remember ,wedid
trytowarn you.
Publish First
Technically ,theUpdate button will only display ifyou’ve already published your post orpage;
otherwise, itwill bereplaced with thePublish button, allowing youtopublish thepage orpost to
thesite. You’ll have your Save Draft option aswell.
The Move to T rashbutton does justthat—moves thepage tothetrash. This brings upanimportant
point: WordPress doesn’t justdelete stuff—its Trashfunction issimilar totheoneyoumight befa-
miliar with onyour PCorMac. When youdelete apage orapost from your site, WordPress doesn’t
remove itimmediately; rather ,itthrows itinto aholding queue thateffectively removes itfrom
view ,butholds ontoitfor30days incase youchange your mind anddecide thatyouactually need
it.Toretrieve it,click onyour trash binineither thePages orPosts area, restore it,andpresto—it’ s
back, allshiny andnew! There’ sWordPress again, doing itsbest tocover your backside.
Quick Edit and Bulk Edit
Ahandy feature thatboth pages andposts share isQuick Edit .Sometimes youmay need tochange
apage orpost attribute inWordPress, butwould prefer toavoid loading uptheentire page editing
screen todoso.This isoften thecase when youneed tomake changes toseveral pages orposts all
atonce. One way tohandle thisisthrough theQuick Edit screen, seen inFigure 2.8.33 WordPress 101
Figur e 2.8. The Quick Edit Scr een
When yougotoeither thepage orpost listings page intheback end, asmall menu willberevealed
when youmove your cursor over anygiven page orpost. This menu will give youfour options:
Edit,Quick Edit ,Trash,orView.We’ve covered Editand Trash,and Viewjustshows youwhat thepage
orpost looks likeonyour site. Quick Edit will open upasetofcontrols inline with your listings as
seen inFigure 2.8.Furthermore, ifyouneed tomake thesame basic changes toseveral pages or
posts inyour site, WordPress gives youaBulk Edit feature towork with aswell.
Inthedrop-down menu above thepage/post listings, you’ll find afurther drop-down thatlists Bulk
Actions .Select thepages orposts youneed towork with andthen select Editfrom theBulk Actions
drop-down. You’ll bepresented with theinline screen seen inFigure 2.9,allowing youtomake
wholesale changes toentries inyour sitevery quickly .
Figur e 2.9. Using the Bulk Edit  option
Understanding P osts and Categories
Now let’slearn about posts, theother primary text-based content type inWordPress. From an
editing perspective, posts aresimilar topages, aswe’ve already seen. Themain difference between
posts andpages isthatwhile pages aremeant tobestand-alone pieces ofinformation, posts arein-
dividual pieces ofcontent ofadynamic nature thatneed tobegrouped together andcategorized in
meaningful ways. Thekeyword tonote isdynamic ,where content is(orcanbe)perpetually addedThe W ordPress Anthology 34
toadegree thatwould make itssheer volume unmanageable without asystem. And ofcourse,
WordPress provides asystem using categories. Before welook atthehow ofposts andcategories,
let’smake sure weconceptually understand what they areandwhy they’re structured theway they
are.
Posts andcategories canbebest illustrated bylooking atanexample from theoffline world. A
classic example canbefound inprint newspapers. Let’screate afictitious newspaper thatwe’ll call
TheMockingbird Gazette .Like most newspapers, TheMockingbird hasstandard sections: Sports,
Business News, Finance, Lifestyle, andofcourse themain News section. Within each ofthese sec-
tions, Mockingbird editors have formed subsections tobetter organize thearticles within the
newspaper ,making iteasier forreaders. IntheLifestyle section, forinstance, there might besubsec-
tions forMovies, Music, Books, Community Events, andFood andDrink. Let’ssaythatthenewspaper
printed anarticle about atrendy microbrewery called TheWedge, which opened upinacool,
urban, reclamation-style location thatsatadjacent tosome train tracks. Ifyouwere recommending
thearticle toafriend, youmight hand them acopy ofTheMockingbird anddirect them tothe
Lifestyle section. Ifyouwanted tobemore specific, youcould tellyour friend thatitwasinthe
Food andDrink section oftheLifestyle section, making iteasier forthatperson togoandfind it.
InWordPress, posts andcategories work inthesame fashion. Drawing from ourexample, let’ssay
wewanted toditch thepaper aspect ofournewspaper altogether ,publishing TheMockingbird online
forenvironmental, economic, andaccessibility reasons (sounds familiar ,doesn’t it?).We’llreplace
ournewspaper sections with what werefer toinWordPress ascategories, andwrite ourarticles in
theform ofposts. TheMockingbird online now hasaWordPress website with categories thatinclude
Featured News ,Sports ,Business News ,Finance ,and Lifestyle .Furthermore, we’ll divide ourLifestyle
category into subcategories: Movies ,Music ,Books ,Events ,and Food and Drink .Wecaneven organize
ourposts further ,sothatwhen avisitor looks forthearticle about TheWedge brewery wetalked
about earlier ,itwill beinboth theLifestyle category aswell asthemore refined Lifestyle >Food and
Drink category .When ourvisitor hasfinished reading about thefreepeanuts onoffer while drinking
thetop-class beer atTheWedge, andwants toknow about thecommunity events going onelsewhere
around town, they canthen click over toLifestyle >Community Events .This method oforganizing
posts into categories andsubcategories isjustoneoftheways thatWordPress letsyouorganize in-
formation. Let’snow look atanother .
Understanding T ags
What’ sreally cool about content management systems ingeneral isthatyou’re able toinstantly
extend functionality beyond what you’d ever have been able todointhebricks-and-mortar world.
Sticking with ourexample post onTheWedge microbrewery ,weknow where wecanfindthearticle
within thecategory andsubcategory system. Wealsoknow thatifwewere tosearch for“The Wedge”
inoursearch box, we’ll find itthatway.35 WordPress 101
Butwhat about theother stuff welearned about TheWedge? That it’samicrobrewery inanurban
reclamation-style location. Itsitsnext toactive train tracks. Let’ssaythey also play freemovies
there, andit’sdog-friendly .And please, let’snotforget about thefreepeanuts, okay? Allofthese
facts arebigplusses, soitsure would becool tofind more places with similar characteristics, espe-
cially ifyouhave adogthatyouliketotake with youwhen youchill outintown. Tagshelp make
thatareality .
Tagsarepredefined keywords thattheauthor oreditor ofapost canusetodescribe it;they’re gen-
erally notbroad enough tonecessitate their own category .Forinstance, inallbutthemost niche
markets, itwould never make sense tolist“dog-friendly” or“free peanuts” asacategory toroutinely
post to;however ,youstillmight mention thissortofinformation when it’srelevant. Forourexample
post onTheWedge, itwould beappropriate toaddtagssuch as“microbrewery ,”“urban reclamation,”
“train tracks,” “free movies,” “dog friendly ,”and, ofcourse, “free peanuts.”
Creating and W orking with P osts
Now thatweunderstand how posts areused, let’sreturn totheWordPress administrative back end
toseehow weactually create andapply posts, categories, andtags. Creating apost ismuch like
creating apage. Inthemain Admin menu, open thePosts menu andselect All Posts ;then click the
Add New button above thelisting ofposts currently saved within thesite. Alternatively ,click the
Add New submenu item button inthePosts Menu. This will bring youtoapage thatlooks similar
totheAdd New Page screen. Infact, almost everything about adding anew post toWordPress is
identical toadding anew page toWordPress, with theexception thatindividual posts donothave
parent-child relationships with oneanother (categories dointheform ofsubcategories, asdescribed
inourexample). You’ll also notice several new meta boxes ontheright-hand side oftheAdd New
Post screen, asshown inFigure 2.10.The W ordPress Anthology 36
Figur e 2.10. New meta boxes in the Add New Post  screen
First upistheFormat meta box, andit’sbeing included here because itwould beconfusing notto
doso.Simply put, thiswasintroduced into core during theWordPress 3.1release, anditspurpose
istostandardize how WordPress conveys thetype ofinformation contained within aspecific post
toatheme orexternal blogging tools. Asofthetime ofthiswriting, it’snotwidely utilized, soits
future isunclear interms ofongoing usage. Furthermore, iftheactive theme lacks support forpost
metadata, thisboxwon’t display .Forthemost part, it’sfairly safetojustusethestandard format
andmove right along, butit’suseful tokeep thisinmind when your usage expectations might shift.
Formore information, have alook atpost formats ontheWordPress Codex.1
Closer totheheart ofthematter aretheCategories and Post T agsmeta boxes thatfollow Formats .
These arefairly intuitive, with some cool logic integrated. Within theCategories box, you’re
presented with alistofavailable sitecategories tochoose from; adding your post toacategory is
assimple asticking theadjacent checkbox. Bear inmind thatposts canbelisted inmultiple categor -
ies,which ishandy ifit’sappropriate, butit’sadvisable tousesome restraint with thisfeature. In
1http://codex.wordpress.org/Post_Formats37 WordPress 101
situations where youhave amultitude ofcategories, itcanbeuseful toclick theMost Used taband
select from thislisting instead. Finally ,youcanalsoaddnew categories onthefly,which isespecially
useful intheearly stages ofsitedevelopment. Intheevent thatyouneed tocreate acategory ,click
ontheAdd New Categor ybutton andyou’ll beable tocreate itinline. Click theUpdate button, and
you’re good togo!
Minimize Y our Categories
It’sacommon mistake among newcomers toWordPress (and thecreators ofcontent management
systems ingeneral) tocreate fartoomany categories; they subsequently endupwith only oneor
twoposts percategory inanygiven space. Thecategory system quickly loses itseffectiveness because
itbecomes unclear foryour users where anything should belocated. So,instead, focus onmaintaining
asmall, reasonable number ofcategories thatbetter classifies your data, andrelyontagsformore
specific categorization. Theexact number oftop-level categories forawebsite isentirely uptothe
website administrator ,butfrom aninformation hierarchy design standpoint, four toeight main
level categories isrecommended. Always errontheside thatfewer categories isbetter .
While thePost T agsmeta boxisequally straightforward interms ofuse, it’simportant toguard
against doubles ormisspellings thatultimately dilute theeffectiveness ofthetag.Forinstance, if
youusethetag“dog friendly” ononepost, andthen thetag“dog-friendly” onanother post, you
literally cuttheeffectiveness ofyour tagsinhalf. After all,ifauser clicks onthetagwith ahyphen,
only those posts tagged thatway will bevisible, with those sans hyphen remaining hidden. This
problem isalsocommon with plural versions ofwords (“dog” versus “dogs”), aswell aswords that
arecommonly misspelled.
WordPress tries tohelp byoffering anautofill function, revealing available options asyoubegin to
type tagsinto thepost tagbox. Sowhen youtype inthecharacters “do,” youwill automatically be
presented with tagsalready listed inyour WordPress sitethatstart thisway,such as“doctor’ soffice,”
“Doppler radar ,”“Donald Trump,” and“dog friendly .”Another method istosimply click onthe
Choose from the most used tags button, andclick therelevant tags. Ifyoudoneed toaddanew tag
toyour system foruseonthepost, youneed merely click theAddbutton. Finish itallupbyclicking
theUpdate button, andyou’re allset.
Managing Categories and T ags
It’sgreat thatwecanapply tagsandcategories toapost atthepoint ofadding orediting it,butwe
also need some type ofcentral management forboth pieces offunctionality .WordPress gives this
tousintheform oftheCategories and Post T agsmanagement screens. Let’sbegin bynavigating to
thecategories management screen intheAdmin menu—as seen inFigure 2.11—by going toPosts >
Categories .The W ordPress Anthology 38
Figur e 2.11. The Categories  management scr een
Once inside, you’ll seeboth your current category structure ontheright-hand side, complete with
subdirectories (officially referred towith thesame parent-child nomenclature wediscussed earlier
regarding pages), aswell astheability tocreate andorganize new categories ontheleft-hand side
ofthescreen. Adding new categories issimple, andallthat’srequired isthename field. Adding a
name willautomatically generate therestofthevalues within thecategory andplace thenew category
inthelocation where youlastcreated acategory .Slugs areparticularly important forsearch engine
optimization when youhave pretty permalinks enabled (which iscovered inthesection called
“Permalinks” ).Ifthecategory youarecreating ismeant tobeasubcategory ,besure toselect the
appropriate category astheparent. Finally ,it’ssafetodisregard thecategory description inmost
instances; thislargely unused field isirrelevant forsearch engine optimization purposes. Editing
existing categories isequally intuitive: justclick onthecategory you’re looking tomodify ,make
thechanges youneed, andclick Update .
The Post T agsmanagement page isessentially identical totheCategories management page, except
there isnoParent drop-down option tocontend with. Easy peasy .
Working with the Links Content T ype
Another content type found within WordPress arelinks, which youcanaccess intheAdmin menu
byclicking ontheLinks submenu andanyofitsrelated submenu items. While they’re lessfrequently
utilized than other types ofWordPress content, links canbeuseful ifyou’re looking todisplay ex-
ternal website links inyour footer oronsidebars. Links alsoshare allthesame organizational features
ofposts andpages. However ,they comprise atype offunctionality distinct from inserting internal
orexternal links inyour website copy ,andmany users simply don’t usethiscontent type atall.As
links areamain Admin menu item, they’re stillworth mentioning here.39 WordPress 101
Permalinks
Sofar,we’ve made repeated references topermalinks andslugs. We’llcover permalinks andtheir
practical application andconfiguration inmore depth inChapter 12,which deals with search engine
optimization andmarketing. Butbecause we’ve now duginto ourbasic category types, wehave
enough background information toframe abasic explanation. Putsimply ,permalinks arepermanent
URLS associated with anygiven page, post, category ,tag,orother piece ofmedia thatcanhave a
slug attached toit.Slugs aresanitized textstrings thatareassociated with aspecific piece ofcontent,
category ,ortag,andalways form thelastcomponent ofaURL. Slugs contain only letters, numbers,
andspecific characters such ashyphens andunderscores. Soifwehave apage with aslug named
“testimonials,” thepermalink forthatpage might behttp://www .esquandolas.com/testimonials .
Permalinking structures arehighly configurable within WordPress, andcanbemodified bynavig-
ating toSettings >Permalinks .InthePermalinks Settings screen, you’re able tomodify your site’s
permalinking structure tooneofyour own choosing. WordPress provides youwith several commonly
used options, butifnone ofthem suityou, youcancreate your own here through thecreative use
ofpermalink structure tags. We’llcover thisinmore detail inChapter 12,butyoucanalso obtain a
complete listing ofstructure tagsontheWordPress Codex page thatdiscusses permalinks.2
Inorder forpermalinks towork properly (oratall),youmust have thecorrect server permissions
setupandavailable. This willallow WordPress towrite directly tothe.htaccess fileinthedirectory
hosting thesiteURL, asdefined inSettings >General .Without thecorrect permissions, you’ll have
tocopy thefileinput thatWordPress provides after setting thepermalink structure settings. You’ll
then need tomanually addtheentry tothe.htaccess filebefore your linking will display .
Wher e’s My .htaccess ?
You’ll notice thatwearedescribing the.htaccess file,which needs tobemodified. Ifyour WordPress
installation isrunning onaWindows server ,youwon’t beable todothis, because Windows servers
have no.htaccess files. Instead, you’ll need tomake modifications directly toIIS,theweb server
thatmanages andruns Windows-based web servers; however ,thiswillliterally beimpossible unless
youhave root access totheserver andareable todirectly work with IIS.
Thereason forthisisbecause WordPress isaPHP-based program, andPHP itself isascripting
language native toLinux servers rather than Windows servers; thelatter have their own server -side
scripting counterpart, ASPX. While it’stechnically possible torunWordPress onaWindows server ,
thatdoesn’t mean it’sagood idea; frankly ,ifyou’re running onaWindows server ,you’re justdoing
itwrong. Ifyoustillmust useaWindows server andwant tousepermalinks, feelfreetopour over
thehelp textintheWordPress Codex.
2http://codex.wordpress.org/Using_PermalinksThe W ordPress Anthology 40
Alternative W ays to P ost Text-based Content
Ifyou’d prefer tonotuseWordPress’ sbuilt-in web-based mechanisms topost new content, there
areother options. Navigate totheWriting Settings page atSettings >Writing ,andyou’ll find three
methods integrated directly with core WordPress. It’spossible topost viaemail bycreating aded-
icated email account andgiving WordPress access toperiodically check it.After selecting adefault
category foryour posts, each time yousend anemail tothataddress, itwillautomatically post directly
toyour siteinthespecified category .Additionally ,APIhooks exist thatcanbeactivated inthis
area, allowing youtopost tothesiteviatheRSS-based Atom Publishing Protocol orXML-RPC.
Finally ,afewmiscellaneous items arelocated ontheWritings Settings page, ifandwhen youneed
totake advantage ofthem. Most notably ,theability tomodify thedefault post category (aswell as
post format andlinkcategory) arehere, aswell asthedialog boxtoaddextra pinging services, aside
from thestellar Ping-O-Matic3toolmanaged byAutomattic. Pinging services notify article directories,
search engines, andother siteindexing services thatyour sitehasbeen updated, sothey’re useful
forsearch engine optimization purposes. However ,Ping-O-Matic automatically pings allthemost
important services available inonefellswoop each time youupdate your site, eliminating your
need toworry about notifying them individually .
Working with Media and the Media Libr ary
Now thatwe’ve explored text-based content indetail, it’stime toturn ourattention toward the
other forms ofcontent thatwe’ll work with inWordPress: media. Media isthecollective term that
refers toimages, video, audio recordings, andother files thatyoumight upload andusewithin your
website. Inorder touseanygiven piece ofmedia within WordPress, thatmedia needs toliveona
web server ,sothatitcanberegularly accessed bythepages andposts trying todisplay it.WordPress
sports ahandy ,easy-to-use system called theMedia Library thatmakes managing media abreeze.
The Media Libr ary
Accessed bygoing toMedia >Librar ywithin theAdmin menu, theMedia Library provides avisual
representation ofalltheimages, videos, audio files, andother filetypes such asPDFs thatyouupload
toyour site. Whether you’re working within apage orapost, ifyouright-click ontheAdd New
button intheMedia Library—or intheMedia submenu oftheAdmin menu—new media files will
appear here whenever youupload them toWordPress. TheMedia Library page bears asolid resemb-
lance tothepost orpage listing pages, giving aquick overview ofeverything that’sbeen added to
thesystem.
3http://pingomatic.com/41 WordPress 101
Adding Images into a P age or P ost
Toinsert animage into apage orpost, place your textcursor inthecontent editor where youwant
theimage placed. Click ononeoftheupload media icons above thecontent editor ,asshown in
Figure 2.12.
Figur e 2.12. Icons for inserting media
WordPress willdisplay alightbox, which gives youtheoption ofeither uploading animage directly
from your computer ,orlooking through theMedia Library foranimage that’salready been loaded.
Whether youupload anew image oruseanexisting one, you’ll bebrought totheAdd an Image
dialog box, asinFigure 2.13.
Figur e 2.13. Inserting an imageThe W ordPress Anthology 42
This screen gives youabevy ofoptions andparameters youcansetforyour image, many ofwhich
arestandard image parameters supplied bythe<img> HTML tag.Theonly required parameter is
theTitle,which defaults tothefilename oftheimage. Adding inrelevant data forallthese fields is
agood idea forsearch engine optimization purposes, butareunnecessary from afunctional perspect-
ive.Align theimage andindicate whether it’sasmall, medium, orlarge size(anoption configurable
intheMedia Settings page located atSettings >Media ),andclick theInsert into Post button. Finally ,
besure toclick theUpdate button tosave thepage/post andcommit thechanges tothedatabase.
Modifying Images
Once youaddanimage, it’scommon towant totweak how itappears inyour page orpost, oreven
delete italtogether .Tomake these modifications, click ontheimage inthecontent editor .This will
highlight anddarken theimage, causing twoicons toappear initsupper left-hand corner ,asin
Figure 2.14.
Figur e 2.14. Editing or deleting an image
Ifyouwant todelete theimage from your page, justclick ontheredcircle with aslash through it;
note thatthiswill only remove itfrom thepage, andnotfrom theMedia Library .Ifyoujustwant
tomake some sizing oralignment changes, click thebutton ontheleftwith thesmall photo init.
This willbring uptheEdit Image dialog box, which bydefault letsyouchange theimage’ salignment;
italso displays some fairly basic options like Title,Alternate T ext,and Caption ,which areuseful
mostly forsearch engine optimization. Ifyouclick theAdvanced Settings tab,you’ll begiven more
detailed image display properties toplay with, asevident inFigure 2.15.43 WordPress 101
Figur e 2.15. Advanced image settings
Inthisarea, you’ll beable toscale andpreview theimage atvarious percentage sizes, oraddCSS
properties toeither theimage oralinkconnected totheimage inthecontent editor .One nice feature
here istheImage Properties settings, which allow youtodefine inline styles onyour image forborder ,
vertical space, andhorizontal space.
What’ s the link URL?
Occasionally ,some plugins andthemes will askyoutoprovide thelink URL forimages, inorder
tousethem forvarious functions within their own processes. Thelink URL isnothing more than
thephysical location ofyour image ontheweb server ,andyoucanalways find theunique link
URL foranygiven image intheMedia Library .The W ordPress Anthology 44
Image Manipulation within W ordPress
It’sworth noting thatWordPress provides some basic source image manipulation andediting directly
within theMedia Library .Image manipulation differs from modifying how images appear inthat
nochanges aremade directly totheimage filewhen youmodify how itappears. Image manipulation,
ontheother hand, actually changes theimage file.Soifyouscale animage with image manipulation,
youaremaking thefilephysically larger orsmaller ,(and hence thefilesize), instead ofjustchanging
thedimensions ofhow thatfileisdisplayed.
Inorder tomake changes toanimage, select itintheMedia Library ,andclick theEdit Image button,
which will bring youtoascreen likeinFigure 2.16.
Figur e 2.16. Editing media will affect the file itself, not just how it appear s45 WordPress 101
WordPress shows youaworking preview ofyour image, along with arowoftoolbuttons above it.
Thefirstisacrop toolfortrimming theimage down. Thenext twobuttons rotate theimage 90degrees
leftorright, while thefurther twoinvert theimage vertically orhorizontally .Finally ,there areyour
standard, handy undo andredo buttons should youmake amistake! Totheright ofthepreview
photo areadditional photo manipulation tools thatcaneither scale theimage, ormodify the
thumbnail settings thataresetupandmanaged byWordPress.
Managing Media Outside of W ordPress
There aretimes when itmakes sense tomanage your media files outside thescope ofWordPress,
even ifyouplan todisplay itontheWordPress siteitself; it’sactually common practice foraudio
andvideo files. Such files differ from image files inthatthey require media players thatinterface
with web ormobile browsers inorder tofunction. Furthermore, different formats ofboth audio and
video require their own types ofplayers towork properly ,andwhile youcanupload audio orvideo
files tothemedia library ,WordPress hasnointegrated audio orvideo players installed with core.
You’ll need tofind asolution tobeable toplay these types offiles onyour website.
Tothisend, social media services likeYouTube4andVimeo5areextremely popular .Such services
arefree, host themedia files foryou, andprovide thebenefit oftying into popular social media
platforms thatcanhelp publicize anddrive traffic back toyour website. These types ofhosting
services provide youwith achunk ofcode, which youpaste right into theHTML tabofyour
page/post’ scontent editor ,andyou’re onyour way!
Another solution istouseaplayer that’sconfigured asaplugin, andthen create instances ofthat
player thatrefer totheaudio orvideo fileontheappropriate pages. It’savery common way of
handling audio andvideo, allowing youtoupload files directly toWordPress andthen reference
them intheplayer .This istypically triggered through ashortcode —apiece ofcode used tocreate
amacro, which isadded where you’d likeittoshow upinthecontent. However ,while youtech-
nically canhost your audio andvideo files inWordPress, youmight question whether youreally
want to.Audio andvideo files areoften extremely large andtaxyour web server severely .Websites
with moderate toheavy amounts oftraffic canbecome bogged down anddownright slow because
ofheavy usage, which canbeanissue. Furthermore, ifyouhave particularly large files onyour
website, your visitors canconsume aninordinate amount ofbandwidth bysimply viewing and
listening totosuch files. Hosting plans aretypically priced with bandwidth inmind, sothiscould
lead toextremely high hosting bills, oreven having your website shut down completely until more
bandwidth ispurchased andallocated. Either way,situations likethisarecommonly solved by
utilizing third-party media filehosting providers liketheAmazon S3hosting service.6Inthisin-
stance, youcanstilluseallyour WordPress video andaudio player plugins, butinstead ofgiving
4http://www .youtube.com/
5http://vimeo.com/
6http://aws.amazon.com/s3/The W ordPress Anthology 46
theWordPress-hosted link URL found inthemedia manager ,youreference thefiletoanexternal
URL provided byyour media filehosting service.
Afinal solution popular amongst many small business owners istowork with aSaaS (software as
aservice) platform. This provides large media filehosting, aswell asanarray ofvideo andaudio
players thatyoucanembed anywhere inyour website with asmall code chunk. Such asolution
cuts theguesswork outoftheequation formany website administrators.
Media Settings
Aswe’ve already touched upon, WordPress provides some miscellaneous media settings thatcan
bemanaged byvisiting theMedia Settings page atSettings >Media .Site-wide defaults forThumbnail ,
Medium ,and Large image dimensions canbesethere, aswell asglobal settings fortheserver path
youwant tostore images in.Global settings forembedding third-party media areavailable here as
well.
Everyone W ants a Say
When people throw the“Web2.0” buzzword around, theheart ofwhat they’re talking about is
creating andmaintaining conversation. Tothatend, oneofthemost powerful aspects ofWordPress
isitsbuilt-in commenting capabilities. Bydefault, WordPress enables website visitors topost
comments onanyoftheposts inyour website ifthey’ve hadatleast onepreviously approved
comment. Users who areyettohave anapproved comment willneed their initial comment moderated
andapproved byanadministrator before it’spublished. Once published, thecomment becomes
visible toother website visitors, who canthen respond toit,aswell astotheoriginal post, orthe
individual comments thathave been posted. Inthisway,WordPress creates discussion among the
visitors thatfrequent aparticular site.
Managing Comments
WordPress gives administrators several methods tomanage comments onawebsite, butthemost
commonly used istheComments section, seen inFigure 2.17.Itislocated byclicking onComments
intheAdmin menu.47 WordPress 101
Figur e 2.17. The Comments page
From theComments area intheback end, administrators canview allcomments from onelocation;
acontextual menu isrevealed foreach comment when moused over.This menu allows administrators
toapprove orreject acomment onthefly,reply directly toacomment fordisplay onthefront end
ofthewebsite, editthecomment, mark itasspam, ortrash it.This panel isparticularly useful in
situations where allcomments onasiteareconfigured tobemoderated byanadministrator prior
topublishing, apractice thatcompletely eliminates comment spam.
Comment Spam
Comment spam consists ofnuisance, unwanted comments thattypically promote other services or
websites. It’sarampant issue plaguing many content management systems including WordPress,
andismost commonly entered into WordPress sites viaautomated scripts. These scripts locate
WordPress sites andautomatically comment ontheir posts; it’susually off-topic andnever intends
togenuinely engage your realwebsite visitors inanhonest, meaningful way.There areavariety of
plugins thatprovide protection against content spam, notably theAkismet plugin7thatcomes
bundled with core WordPress. Inorder totakeadvantage ofAkismet, you’ll need tocreate andretrieve
anAPIKeybysetting upanaccount athttp://akismet.com/wordpress/ .Once youhave your API
Key,it’sassimple asadding itinto your plugin settings toverify your identity .
Discussion Settings
Thesettings thatgovern how comments aremanaged canbefound intheDiscussion Settings page,
located atSettings >Discussion .WordPress offers fairly comprehensive control over how comments
aremanaged andwewon’t cover alltheoptions here, butafewworth mentioning inparticular in-
clude thefollowing:
■Allow people to post comments on new articles :effectively turns thecommenting system onand
offfornew articles
7http://akismet.com/The W ordPress Anthology 48
■Comment author must fill out name and email :provides website users with ameasure ofaccount-
ability
■Users must be logged in to comment :ensures thatallcommenters areregistered users ofyour
website
■Email me whenever anyone posts a comment :notifies theadministrative email address whenever
anew comment isposted
■Email me whenever a comment is held for moderation :notifies anadministrator whenever acomment
isheld formoderation
■Before a comment appears, an administrator must always approve a comment :represents thedefault
moderation settings thatships with core WordPress
■Before a comment appears, comment author must have a previously approved comment :themost re-
strictive commenting option available short ofdisabling altogether
Leaving both Before a comment appears, an administrator must always approve a comment and Before
a comment appears, comment author must have a previously approved comment unchecked effectively
leaves thesitewide open tocomment spam, andisseverely discouraged. It’salso useful tonote
thatwhile Discussion Settings manages global settings forusethroughout awhole website, commenting
canbeturned onandoffinindividual posts atanytime byediting thatpost andselecting theap-
propriate option.
Foramore thorough description oftheDiscussion Settings screen, seetheCodex.8
Avatars
Avatars aretheprofile images thataredisplayed next toauser’ sname upon posting acomment on
asite, andtend toaddlifeandpersonality toanywebsite. Avatars canbeturned onoroffglobally
within theDiscussion Settings page, andcanbepersonalized byregistered users onthatsite.Bydefault,
avatars inWordPress areautomatically powered bygravatar .com,9afreeservice thatyoucanuse
toassociate animage with anyemail address youlike.
Additional Display Elements
Sofarinourfunctional overview ofcore WordPress, we’ve looked atthetwomost important
building blocks ofWordPress sites: thesettings thatdescribe how thesitewill look andact,and
how wecreate, manage, andinteract with thedifferent types ofcontent onanygiven website. While
these components aretheprimary building blocks ofanyWordPress site, it’simportant toexplore
8http://codex.wordpress.org/Settings_Discussion_Screen
9http://en.gravatar .com/49 WordPress 101
thesmaller yetequally important components thatserve astheglue tobring italltogether: navigation,
sidebars, andadditional functionality thatcanbeadded through thecreative useofplugins.
Managing Custom Menus
Regardless ofthecontent’ squality ,websites thatlack thought-out, intuitive navigation tohelp users
move around easily aredead inthewater before they even getstarted. Tothisend, WordPress enables
administrators toreplace thedefault menu with their own customized version, which they can
easily create andmanage inthemes andplugins supporting thefeature.
The Menus screen isavailable viaAppearance >Menus ,andisfrighteningly easy touse. Tostart,
you’ll need tocreate amenu byclicking ontheCreate Menu button andgiving itaname. InFig-
ure2.18,we’ve gone ahead andcreated three menus thatwecanusetointuitively navigate
throughout oursite.
Figur e 2.18. The Menus scr een
Once amenu iscreated, adding pages orpost categories isassimple asticking thecheckbox adjacent
totheoption, andthen clicking theAdd to Menu button toinsert thepages inthemenu organization
area ontheright. Once entries areinthisarea, youcanmove them into your desired order ,orpull
them slightly totheright sothatthey indent tocreate asubmenu; youcanseethisinFigure 2.18
with Sample Page indented underneath Army of … .Once you’ve saved your menu, youcanassociate
itwith your theme andaspecifically defined menu area byselecting thelocation where themenu
should bedisplayed. This isdone from thedrop-down menu intheupper left-hand meta boxtitledThe W ordPress Anthology 50
Theme Locations .Keep inmind thatthemes cansupport multiple menus, ascanplugins, which is
acommon way toaddmobile website functionality toaWordPress installation.
Sidebars and Widgets
Widgets arethefigurative Swiss Army knife oftheWordPress universe, andarebest explained by
first understanding how sidebars operate. InWordPress, whenever youseeasidebar oneither side
ofapage, orwhen younotice content such asaTwitter feed orrecent comments being displayed
inafooter ,chances arethatthecontent ishoused within some type ofwidgetized area. Widgetized
areas aredefined locations within WordPress page templates thatallow users toeasily insert and
organize smaller blocks offunctionality known aswidgets .
Youcanwork with widgets bynavigating toAppearance >Widgets intheAdmin menu, asseen in
Figure 2.19,andthey’re dead simple touse.
Figur e 2.19. The Widgets main page
Core WordPress comes bundled with avariety ofuseful widgets, andplugins introduce new widgets
allthetime, allowing youtoaddthelatest andgreatest functionality tothewidgetized areas inyour
theme atthedrop ofthehat.Todoso,look forwidget functionality thatinterests youintheAvailable
Widgets area inthecenter ofthescreen. Now open thedrop-in area onthewidgetized sidebar where
you’d liketoaddthewidget byclicking onthedrop-down arrow ,anddrag theavailable widget
into thatarea. Ifthere’ smore than onewidget, youcanorder them however youlike, ordistribute
them toother widgetized areas displaying elsewhere onthewebsite.
Many widgets have options thatallow them toperform anaction differently from other instances
ofthesame type ofwidget. Forexample, WordPress comes bundled with theTextwidget, which
letsyouaddinanyplain textorrawHTML orJavaScript tododifferent tasks. Inthisway,you
could easily useaTextwidget todisplay simple textual information inafooter ,allwhile using51 WordPress 101
another Textwidget inthesidebar tohouse JavaScript code from athird-party mailing listservice,
which creates anewsletter sign-up form onyour website.
Extending W ordPress thr ough Plugins
We’ve already referenced plugins many times throughout thisbook andwe’re devoting anentire
chapter tothem later on(seeChapter 5),butthey dodeserve acursory mention inthisspace. Plugins
arepackaged pieces offunctionality thatcanbeeasily added toanyWordPress installation, and
areanessential toolthatextends thefunctionality ofWordPress tomeet different needs.
From anorganizational standpoint intheback end, plugins aresetupalotlikethemes. Expand the
Plugins submenu intheAdmin menu andyou’ll find Installed Plugins ,which provides acomplete
listing ofcurrently installed plugins (both active andinactive); anAdd New submenu item, which
takes youtotheplugin installation screen; and Editor ,which letsyou(gulp) directly editthesource
code ofboth active andinactive plugins.
Leave the Plugins Alone!
It’snever considered best practice toeditactive PHP programs. While youprobably won’t cause
permanent damage toyour website ifyouhave asolid understanding ofPHP andremember exactly
what youdidtocause aproblem, it’sbest tomake sure youreally know what you’re doing before
youeven conceive ofusing theplugin editor tomake changes. Remember thatthere isnoundo
function inside theeditor .Beafraid. Bevery,very afraid.
Foracomplete, comprehensive look atthegood, bad, andugly ofplugins, aswell ashow youcan
usethem tohelp youbend WordPress toyour willinthesame way thatKeanu Reeves bends reality
tohiswill inTheMatrix ,have alook atChapter 5andgetbusy with your badself.
Import and Export T ools
Speaking ofplugins, aspecific setofthem aremaintained bytheWordPress development community
toassist with importing andexporting page andpost content into andoutofWordPress. These
plugins canbeinstalled andutilized byvisiting theTools>Import orTools>Export menu options
intheAdmin menu. These tools make iteasier tomigrate WordPress from server toserver ,aswell
asprovide essential links toliquidate older freeblogs running onservices likeBlogger ,TypePad,
andLiveJournal, ifyouwant tomigrate them totheself-hosted WordPress platform.
Users Roles and P ermissions
Thefinal component worth mentioning with core WordPress istheuser management system that
comes bundled with it.User roles arethetypes ofuser youcanexpect tofind within WordPress;
each user rolehasitsown permissions thatdictate different levels ofaccessibility .The W ordPress Anthology 52
Default User Roles
Bydefault, core WordPress comes with fiveuser roles, each with itsunique setofpermissions.
Let’shave aquick look atwhat they areandwhat they cando:
Administrator
hasaccess toallfeatures andfunctionality across theWordPress site,andistheuser roleassigned
tothefirst user created when aWordPress installation iscreated
Editor
hassignificantly lessauthority than anAdministrator ,butisable tocreate, manage, andedit
posts, whether ornotthey belong toother users; Editors also have theability toapprove posts
submitted byusers assigned toContributor roles
Author
hastheauthority tocreate, edit, andpublish their own posts solely
Contributor
hastheauthority tocreate andedittheir own posts, butcannot publish them; Contributor articles
must bemoderated andpublished byEditors
Subscriber
canread posts andaddandread comments, buthasnoauthority tocreate post content ofany
kind; after theinitial Administrator iscreated during installation, WordPress creates allusers
asSubscribers bydefault unless otherwise configured
Administrator andSubscriber roles aremore than sufficient forthevast majority ofwebsites, and
full-blown publishing sites will commonly find thedefault user roles built into WordPress quite
adequate. Still, awebsite thatseeks tooperate asmore ofacorporate content management system
—able tocreate new user roles anddefine customized permissions foreach—can find thefunction-
ality they arelooking forthrough plugins. Atthetime ofwriting, there arethree plugins inparticular
thatareuseful inmanaging thisprocess: Members, Role Scoper ,andCapability Manager .
Members (http://wordpress.org/extend/plugins/members/ )
Members isanexceptional plugin thatisfrequently updated andextends users androles; it
also introduces some very useful content management functionality .Youcanmake asiteorits
feed entirely private, aswell asuseshortcodes todetermine who hasaccess tospecific con-
tent—well worth alook.
Role Scoper (http://wordpress.org/extend/plugins/role-scoper/ )
Role Scoper isakiller plugin thatallows youtoextend user roles inmany ways. Aside from
giving youtheability todefine groups andassign them specific roles, italso provides theop-
portunity toassign roles andrestrictions tospecific posts, pages, orcategories. Role Scoper is53 WordPress 101
alsosupported byMultisite (seeChapter 10),andallows youtogive Subscribers content editing
privileges.
Capability Manager (http://wordpress.org/extend/plugins/capsman/ )
Capability Manager allows youtochange thecapabilities ofanyroleaswell asaddnew roles,
copying andmodifying theexisting rules into thenew ones. Capability Manager also features
abackup/restore tool, which enables administrators tosave current roles andcapabilities before
making anychanges, andrestore them incase problems arise from therolemodifications.
Extending User Pr ofiles
Sometimes it’suseful toextend theinformation inatypical user profile past thebare bones options
provided with core WordPress. There aretwospecific plugins useful inthispurpose:
Cimy User Extra Fields (http://wordpress.org/extend/plugins/cimy-user -extra-fields/ )
Cimy User Extra Fields allows youtocreate additional user fields toyour heart’ scontent,
complete with form validation configurable byanadministrator toverify thatfields areall
properly filled. It’salso Multisite compliant.
Register Plus (http://wordpress.org/extend/plugins/register -plus/ )
Register Plus isacomprehensive plugin thatletsyouaddcustom user fields, butalso does all
sorts oftasks foryouincluding adding acustom logo, adding Captcha verification onyour re-
gistration forms, letting users choose their own passwords when signing up,andmuch, much
more.
Now Y ou Know the Basics …
Wehope youhave enjoyed thedime tour through core WordPress, butdon’t worry—there’ sstill
lotsinstore aswegodeeper into therabbit hole. It’simpossible toreally understand what wecan
achieve with WordPress without anappreciation forthefundamental processes WordPress supports.
Sowhat didwecover? Well,first wegotafeelforthebasic functional andvisual settings ina
WordPress installation, andthen took alook atpages, andhow thecontent editor works. Wetook
atasty triptoTheWedge tolearn about how WordPress handles posts, categories, andtags, which
helped usbetter understand theorganizational structure ofwebsites andblogs ingeneral.
After that, wetalked abitabout images andbest practices involved inusing audio andvideo files
onourwebsite. Finally ,wefinished ourtripthrough theWordPress core with alook atsome ofthe
lesssexy butimportant functions inside thesystem, including navigation, widgets andwidgetized
areas, anduser roles andpermissions. It’sbeen awhirlwind tripsofar,buttake adeep breath and
hold ontight—we’re about togetdownright jiggy with theguts ofWordPress. Sopull outyour PHP
manuals andgetready tolearn about WordPress’ sbeating heart—The Loop!The W ordPress Anthology 54
Chapter3
The Loop and W ordPress File System
While oneofthemain reasons forthemassive popularity ofWordPress istheapproachable and
simple-to-use GUIitboasts, ultimately it’snothing more than apiece ofsoftware, andasadeveloper
you’re going tohave togetyour hands dirty with some code. Nottofear,though; likeeverything
elseWordPress-related, there aresystematic rules tofollow thathelp youunderstand where different
files live. Sayhello tothestandard WordPress filestructure.
The Standar d WordPress File Structur e
Like most content management systems, WordPress hasastandardized way ofdescribing how it’s
puttogether asacohesive piece ofsoftware byadhering toastandardized filestructure. This is
shown inFigure 3.1.This isthestandard WordPress filestructure shared byevery single WordPress
siterunning ontheWeb,regardless ofwhat thesitelooks likeorhow itoperates. It’spowerful be-
cause it’sfairly elegant, simple, andfamiliar toWordPress coders across theglobe. Let’stake a
moment togetfamiliar with thestructure.
Figur e 3.1. The standar d WordPress file structur e
Thefilestructure itself canbecleanly divided into twotypes offiles andfolders: system files and
user-manageable files. System files include everything inthewp-admin and wp-includes directories,
aswell asalltheactual files intheroot directory except forwp-config.php .User-manageable files
include everything that’sleft:thewp-config.php file,thewp-content directory ,and(onmost servers)
the.htaccess file.Incase you’re curious, here’ sabrief description ofwhat everything isanddoes.
System files andfolders
■These areallthe.php files intheroot directory ,andserve aslinchpins ofWordPress, initi-
ating thekeyfunctions thatneed tohappen inorder tomake thesystem work. Forexample,
index.php initiates thewebsite page serving functionality ,while wp-register .php contains all
thelogic necessary toinitiate theuser registration process, and wp-cron.php initiates the
scheduled event functionality within WordPress.
■wp-admin :Allthefiles andfolders within wp-admin comprise allthevarious tools andinter -
faces necessary tomake WordPress run.The W ordPress Anthology 56
■wp-includes :Allthefiles andfolders within wp-includes comprise thevarious pieces ofcode
thatactually execute WordPress andmake allthemagic happen.
User -manageable files andfolders
■wp-config.php :We’ve already worked with thisfilequite abit.wp-config.php begins itslife
inanewborn WordPress installation aswp-config-sample.php before being renamed, and
controls alltheprimary settings andcontrol keys fortheinstallation. This includes defining
thedatabase location andcredentials, setting thelanguage being used inthesite, andestab-
lishing unique keys thatdemonstrate authenticity andauthority fortheinstallation asa
whole.
■wp-content :This directory iswhere justabout everything youever addormodify will live
inyour WordPress installation, including plugins, themes, andabsolutely every image you
upload tothesite.
■.htaccess :While notvisible inourscreenshot, the.htaccess fileiscrucial indetermining
routing andgeneral rules forhow things operate. .htaccess isafilethatcanonly becreated
onLinux andUnix-based servers, anddoesn't ship with atypical WordPress installation;
youhave toactually make itforyourself, orWordPress will often create itonitsown when
youinitially setyour permalink settings (iftheserver you’re running WordPress onallows
sufficient permission todoso).
Color Inside the Lines
Unless youreally know what you’re doing, it’snever agood idea tochange thecore WordPress files
outside wp-config.php orthewp-content directory .Aswe’ve already learned, WordPress hasthe
ability toupdate itself attheclick ofabutton, andphysically thisisaccomplished byoverwriting
what areconsidered tobestandard system files. Ifyoumake changes toanyofthese files regardless
ofwhere they are,youruntheriskofhaving your filemodifications overwritten atsome point in
time. Forthisreason, it’shighly advisable tocolor inside thelines, andmake sure thatyoumake
allyour changes either inthewp-config.php file,orintheproper plugin andtheme files inwp-content .
Ifwhere youhang your hatiswhere youcallhome, forthepurposes oftheWordPress universe,
home may aswell have theaddress ofwp-content ,asthat’swhere we’ll keep allourstuff. We’ve
already hadacursory discussion ofthemes andplugins, butit’simportant torealize thatwhether
wehave only asingle theme andthree plugins or20themes and200plugins, they’ll allbestored
ineither thewp-content/plugins orwp-content/themes directories. Additionally ,when youbegin to
upload media toyour website, thewp-content/uploads directory (orsome form ofit)willautomatically
becreated, andwill house allthemedia onyour site.57 The Loop and W ordPress File System
Sothere youhave it:abrief overview ofwhere youcanfind justabout anything inside atypical
WordPress installation. While now weknow where justabout everything lives, it’shigh time we
rolled upoursleeves andstarted digging into some PHP code—so hold ontoyour hats!
The Role of Queries and The Loop
Let’sstart outbydigging intoatheme inourWordPress installation andlooking atthecode wecan
find intheindex.php filetherein. Now whenever youload thatWordPress page, WordPress queries
thedatabase fortheposts thatneed tobeshown. Theposts thatarereturned depend, ofcourse, on
what’ sbeen asked forinthecode ofthepage; forexample, arequest forthehome page generally
results inaquery asking forthemost recent posts. Even thetemplates forasingle post orpage query
thedatabase andmake alist,albeit alistwith only oneitem. WordPress loads upallthese posts
into aposts object.
Once wehave thatobject, wecanuseapiece ofcode called TheLoop tocontrol how these posts
aretreated. TheLoop simply runs through theposts thatarestored intheobject, anddefines how
each should behave. Wecanuseablend ofWordPress’ stemplate tags—functions todisplay post
data—and regular HTML markup tocontrol theappearance oftheposts.
Ifyou’re working with templates likethehome page, atagorcategory listing, adate-based archive,
orasearch page, thequery toretrieve theposts youneed isbuilt right into WordPress; thismeans
thatyour only task istomanipulate TheLoop. When youwant toproduce your own custom setof
posts, however ,you’ll need tocreate your own query foracustom loop towork with. Inthischapter ,
we’ll start byplaying with thebasic loops, andonce wehave thehang ofthat, we’ll move onto
creating custom queries.
What is the default loop doing?
It’seasy enough tofind outwhat sorts ofposts arebeing retrieved inagiven page’ sloop. InWord-
Press, thequery_vars object stores allthedifferent parts ofTheLoop’ squery .Seewhat’ sinside
byechoing thequery’ squery_vars :
<?php
echo "<pre>"; 
print_r($wp_query->query_vars); 
echo "</pre>";
?>
You’ll soon find outawealth ofinformation about what’ sbeen asked forineach query .The W ordPress Anthology 58
The Loop: Exposed!
Because TheLoop controls theappearance ofagroup ofposts, you’ll often find yourself working
with itwhen you’re editing template files. Aquick trawl through theWordPress support forums
will reveal thatTheLoop is,byfar,oneofthesingle most popular questions toaskabout, and
rightly so—it’ soneofthemost important parts oftheWordPress experience. That hastobeonebig
andscary bitofcode, right?
Actually ,it’sfairly lightweight. Stripped back toitsbasics, TheLoop generally looks likethis:
<?php if (have_posts()): 
?>
     ... anything that should appear before your group of posts
<?php while ( have_posts()) : the_post(); 
?>
     ... instructions for each post
<?php endwhile; 
?>
     ... anything after your group of posts
<?php else: 
?>
     ... what to show if there were no posts
<?php endif; 
?>
What’ sgoing onhere? Ifyou’re cosy with PHP,youalready know what anifstatement isfor—it’ s
checking toseeifwehave posts. Ifso,awhile loop kicks in—that’ sapiece ofcode thatrepeats
based onagiven condition. Inourcase, werepeat thisloop once foreach post. And ifthere areno
posts, we’ll dotheinstructions thatfollowelse .
Ofcourse, thisisonly assimple asitisbecause alotofthehard work hasbeen abstracted away
into different functions: have_posts() ,the_post() ,andsoon.Forourpurposes inthischapter ,
it’senough toknow thatthey simply work, butifyou’re especially keen tofind out,theCodex will
explain itall.
The Loop and T emplate T ags
Ofcourse, theabove loop isstripped back toitsmost basic components, andifyouwere togoahead
andputitinto your theme right now,you’d seevery little indeed. Inorder toactually seeanything
interesting onyour page, you’ll need toinclude some template tags.
Aswementioned earlier ,template tagsarethefunctions responsible forshowing stuff—generally
it’sinformation about your WordPress site, orabout individual posts. There’ sadizzying array of
these forallkinds ofpurposes; roughly ,youcould divide them into simpler approaches, andmore
complex ones.59 The Loop and W ordPress File System
Some Easy T ags: the_
Simpler tagsarethose functions thatcanbeused with little ornofunny business with PHP.The
easy tagsaregenerally characterized bystarting with thewordthe.
the_title()
This taggenerates thepost’ stitle. You’ll often usethiswithin aheading element, inconjunction
withthe_permalink() ,likeso:
<h2>
     <a href="<?php the_permalink();
               ?>">
          <?php the_title(); ?>
     </a>
</h2>
the_permalink()
This isused tooutput theURL ofthepost, ortheURL ofwhere thepost would always befound,
thelatter which isknown aspermalinking .Inourprevious code example, we’ve used itto
wrap around thetitle. You’ll also often find itinthemes where afooter isused toprovide post
information. Weusedthe_permalink() inthe<a>element inourprevious example.
the_author()
This isthetagthatshows theauthor’ sname. Inauser’ sWordPress administrator profile screen,
it’spossible tochoose how you’d likeyour name tobedisplayed—login name, fullname, first
name, andsoon.Bydefault, thepreference youchoose istheonethat’sshown forthistag:
<p>
Posted by <?php the_author(); ?>
</p>
the_author_meta()
This istoshow other kinds ofinformation about theauthor ,andaccepts aparameter todefine
theinformation you’d liketoshow .Forexample, youcanshow apost author’ scontact details
orwebsite, ordifferent variations ontheir name:
<p>
<?php the_author_meta(’first_name’); ?>
  has been a member since 
<?php the_author_meta(’user_registered’); ?>.
</p>The W ordPress Anthology 60
the_time() andthe_modified_time()
These tagsshow thetimestamp forwhen thepost wasmade, oredited, respectively .They accept
four arguments: format, texttoshow before, texttoshow after,andwhether toecho thedate
(true isthedefault) orsimply return itforyour own use(false ).
Thesimplest way tocalloneitherthe_time() orthe_modified_time() istocallitwithout
arguments; WordPress willdisplay thetime thatyour post wasmade orupdated with theformat
youspecified inyour blog’ stime settings. Ifyouwant touseittocalladate aswell, simply
pass itaformat, using thePHP date symbols:1
<p>
Posted on <?php the_time(’jS F Y’); ?> 
at <?php the_time(’g:i a’); ?>
</p>
the_date()
the_date() actsalittle differently tothe_time() inthatitonly appears once foreach day; so
forlisting pages, likemonthly archives, youcanuseitasaheading forgroups ofposts posted
onthesame day.Aswiththe_time() ,itaccepts fourparameters: theformat, texttoshow before,
texttoshow after,andwhether toecho orreturn thetext. Thefollowing example will puta
date inside alevel 2heading:
<?php the_date( "jS F Y", "<h2>", "</h2>" ); ?>
the_excerpt()
This displays thetextthatwasentered inapost’ sexcerpt field. You’ll find thatthe_excerpt()
isputtogood useinmagazine-style themes where posts’ descriptions areused. Ifapost lacks
anexcerpt, WordPress will show thefirst 55words ofapost, with allmarkup stripped. This
tagtakes noparameters, soourexample issimply:
<?php the_excerpt(); ?>
the_content()
This tagshows thecontents ofapost. Onthehome page oralisting page, ifyour post contains
themore quicktag (aquicktag islikeanHTML formatting tag,butisused solely within Word-
Press),the_content() only shows content uptothispoint, followed byalinkinviting avisitor
toread more. When you’re onasingle post’ spage, theentire post isshown.
the_content() accepts twoparameters: astring thatisshown fortheRead More link, anda
Boolean todefine whether youwant toomit thetextbefore themore quicktag —false isthedefault.
1http://php.net/manual/en/function.date.php61 The Loop and W ordPress File System
Inthisexample, we’ll combine the_title() withthe_content() ’sstring (that is,its“read
more”) parameter:
<?php the_content("Continue reading "
     . the_title(’’, ’’, false)); ?>
the_meta()
Ifyou’re making useofWordPress’ scustom fields,the_meta() isaquick way todisplay allthe
fields’ keys andvalues. These keys andvalues areoutput inanunordered list,andthefunction
accepts noparameters.
the_category()
This shows alinked listofthecategories thathave been selected forthispost. Itaccepts three
parameters: astring touseasaseparator ,achoice ofmultiple orsingle toshow parent cat-
egories orjustchild categories, andapost IDifyouwere using thisoutside TheLoop. Commonly ,
you’ll justpass theseparator parameter .Inthefollowing example, we’ll receive alistofitems
separated byacomma:
<p>We filed it under: <?php 
     the_category(’, ’); 
     ?>
</p>
Bydefault—that is,when called without aseparator parameter—the listofcategories isprinted
asanunordered list.
the_tags()
Likethe_category() ,you’d usethistagtoshow alistofthecategories you’ve used forthis
post. Unlikethe_category() ,itsparameters areforcompletely different purposes: texttoshow
before thetags, aseparator ,andtexttoshow after.Bydefault, theoutput istheword Tags:,fol-
lowed byeach tag,separated bycommas. Inthisexample, we’ll uselistitems forourtags, so
thatthey match thedefault behavior ofthe_category() :
<?php the_tags(’<ul><li>’,’</li><li>’,’</li></ul>’); ?>
More Tags
We’ve touched onjustafewofthefunctions thatarecommonly used while you’re inside The
Loop. Youcanfind even more tags, andcomplete documentation oneach, intheWordPress
Function Reference.2
2http://codex.wordpress.org/Function_ReferenceThe W ordPress Anthology 62
More Complex Functions: get_
Forthemost part, ourarsenal ofthe_ template tagswill dothejob;butsometimes theoutput that
WordPress provides islessflexible than we’d like. Maybe we’d want togetattheinformation about
each post, butwe’d liketomake afewtactical strikes with ourPHP before it’sprinted.
Fortunately ,WordPress provides anumber oftagsthatretrieve, rather than simply print, post and
page information (like ourthe_ tags). These aregenerally prefixed withget_ .Theseget_ functions
return strings orarrays thatwecanstash inavariable andmanipulate. Foreverythe_ function,
there’ satleast oneget_ function thatcandoasimilar job.Let’slook intohow tousesome ofthese.
get_the_category()
Imagine thatforapost, youwant tolisteach ofitscategories’ names anddescriptions asa
definition list.Usingget_the_category() ,wecanretrieve anobject describing each category
associated with thecurrent post:
<dl>
   <?php 
   foreach((get_the_category()) as $category) { 
     echo "<dt>" . $category->cat_name . 
          "</dt>";
     echo "<dd>" . $category_description . 
          "</dd>";
     } 
   ?>
</dl>
get_the_time()
Acommon way tomanipulate thetime ofaWordPress post istouserelative timestamps; that
is,astatement like“Last posted 6hours ago.” Inthisexample, we’ll useget_the_time() and
get_the_modified_time() inconjunction withhuman_time_diff() ,abuilt-in WordPress
function, toprovide afriendly depiction ofwhen content wasedited. Ofcourse, ifthepost has
never been edited after thefact, wehave noneed toshow thissection, sowe’ll useanifstate-
ment tocheck whether thepost’ slastedited timestamp islater than itspublished timestamp.
Here goes:
<?php
  $lastmodified = get_the_modified_time(’U’);
  $posted = get_the_time(’U’);
  if ($lastmodified > $posted) {
    echo "Edited " . human_time_diff(get_the_time(’U’), ➥
        get_the_modified_time(’U’)) . 
        " later"; 
  } 
?>63 The Loop and W ordPress File System
get_post_custom()
Welearned earlier thatthe_meta() fetches allthecustom fields associated with apost. Custom
fields areoften used inplugins orforspecial post types, soitcanbeimpractical todisplay them
allindiscriminately .Instead, wecanuseget_post_custom() toretrieve justthefields wewant.
Inthisexample, we’ve used thistoretrieve anycustom fields with akeyofsong ,andthen we’ll
print them into anunordered list.Naturally ,ifthere’ snosong field forthispost, we’ll display
nothing:
<?php
  $custom_fields = get_post_custom();
  $song = $custom_fields[’song’];
  if (isset($song)) {
    echo "<h3>Songs</h3>";
    echo "<ul>";
    foreach ( $song as $key => $value )
    echo "<li>" . $value . "</li>";
    echo "</ul>";
  }
?>
Conditional T ags: is
Conditional tagsarethose thatanswer questions about common conditions, such aswhether we’re
viewing asingle page, orwhether aparticular post matches certain criteria. It’sagreat way tointro-
duce some simple logic toyour loops.
istagsareused inconjunction withifstatements inPHP.Forexample, youmay decide thaton
your home page asticky post should display athumbnail, butaregular post should not.Inyour
loop, youcould simply popyour thumbnail code inside anifstatement thatchecks toseeifthe
post issticky ,andwhether ithasathumbnail inthefirst place:
<?php while (have_posts()) : the_post(); 
?>
<li>
  <h2><a href="<?php the_permalink() ?>">
      <?php the_title(); ?></a> 
      <?php the_time("jS F"); ?>
  </h2>
  <?php if(is_sticky() && has_post_thumbnail()) { 
          the_post_thumbnail();
        } 
  ?>
  <p><?php the_excerpt(); ?></p>The W ordPress Anthology 64
  <p><?php the_tags( "Tagged with: ", " / ", "" ); ?></p>
</li>
<?php endwhile; ?>
Youcanpass arguments toconditional tags, too,letting youperform actions atavery granular level.
Forexample, is_page() will check ifyou’re onapage, butifyoupass itapage IDorapage title,
youcanperform those actions only onthatpage. Here’ sasnippet totry:
<?php if(is_page(’About Us’)) { ?>
<div id="gallery">
  <h2>Gallery</h2>
      ⋮
</div>
<?php }?>
Conditional tagsaredescribed indetail intheCodex.3
Pagination
Yourreaders often want tonavigate backwards andforwards through pages ofposts—especially
onblog- ornews-style sites, soremember toinclude options forpagination inyour themes. In
WordPress, there areafewways toachieve this.posts_nav_link() isasingle template tagthat
creates apair oflinks allowing theuser tonavigate tothenext orprevious posts; youcanuseitin
archive templates orsingle post templates. Ifyouwant tosplit them uponanarchive page, you
canuseprevious_posts_link() andnext_posts_link() toprint alink totheprevious andnext
setofresults. Tosplit these links onasingle template, previous_post_link() andnext_post_link()
print alink totheprevious andnext single post.
posts_nav_link() accepts three parameters: texttositbetween thelinks, thetextfortheprevious
link, andthetextforthenext link:
<p><?php posts_nav_link(’ &bull; ’, ’Older posts’, ’Newer posts’); 
    ?>.</p>
Used onlisting pages,previous_posts_link() andnext_posts_link() each accept twoparameters:
thelink text, andthenumber ofpages onwhich toshow thelinks. Thedefault forthesecond
parameter is0,meaning allpages:
<p><?php next_posts_link(’Go back in time...’, 0); ?></p>
3http://codex.wordpress.org/Conditional_T ags65 The Loop and W ordPress File System
Forsingle posts,previous_post_link() andnext_post_link() actalittle differently .They accept
four parameters: aformat forthelink, thetextofthelink, whether weonly want toshow apost
from thesame category ,andanycategories from which wedon’t want toshow posts. Inmost cases,
youcangoahead andcallthiswithout passing anyparameters, butifyoudohave aneed tofiddle
with thelinks, youcanusethe%title and%link tokens tofine-tune theoutput. Inthisexample,
wecreate alink totheprevious andnext post, andadjust thetextoutput accordingly:
<?php next_post_link(’Older: <strong>%link</strong>’); ?> 
<?php previous_post_link(’Newer: <strong>%link</strong>’); ?> 
That’s Backwar ds
WordPress considers thenext_post_link() function toactually refer tothesetofposts thatcame
previously intime.previous_post_link() refers totheones thatcame afterwards.
Find itabitbaffling? Ithelps ifyouthink ofthisprocess asstarting from your blog’ shome page,
which contains thenewest posts, anddigging backwards. When you’re working backwards, the
next page isgoing tohave older posts.
Let’s Try a Simple loop
Now thatweknow what makes upaloop, let’stryfilling insome oftheblanks. Thefollowing ex-
ample isaloop thatwill show each entry’ stitle, permalink, linked listoftags, andtheexcerpt.
We’llwrap upallthose posts inatidyunordered list,andifthere arenoposts toshow ,we’ll include
afriendly message. Here goes:
chapter_03/loop-index.php  (excerpt)
<?php if (have_posts()) : ?>
  <h1>Latest Posts</h1>
  <ul class="mini-list">
    <?php while (have_posts()) : the_post(); ?>
      <li>
        <h2><a href="<?php the_permalink() ?>">
          <?php the_title(); ?></a> 
          <?php the_time("jS F"); ?>
        </h2>
        <p><?php the_excerpt(); ?></p>
        <p><?php the_tags( "Tagged with: ", " / ", "" ); ?></p>
      </li>
    <?php endwhile; ?>
  </ul>
<?php else: ?>
<h1>No posts to show</h1>The W ordPress Anthology 66
<p>Sorry, we got nada. Nothing. Bupkis. Zippo.
Diddly-squat. Sorry to disappoint.</p>
<?php endif; ?>
Let’sseehow thatloop looks ifweuseitinahome page template reminiscent ofWordPress’ s
Twenty Eleven style. Since it’sonthehome page, it’ssimply displaying themost recent posts in
reverse chronological order .Figure 3.2shows uswhat comes outofthisloop.
Figur e 3.2. Our compact loop, showing titles, tags, dates, and excerpts
Exciting? Hardly ,butitserves todemonstrate how quickly andeasily youcanhave asimple loop
upandrunning inyour templates. Soon we’ll trysome prettier examples.67 The Loop and W ordPress File System
Counters and The Loop
Weoften find it’suseful tointerrupt TheLoop atacertain point, ortotreat particular positions
differently .Forexample, youmight want tomake thefirst post inyour loop stand outmore, or
place anadvertisement after thefifth post. Youcanaccomplish thisquite easily byintroducing a
counter toyour loop. Every time TheLoop prints outapost, we’ll increment thecounter .Allyou
need isabitofcode tocheck thevalue ofthecounter ,andactaccordingly .
Inthefollowing example, we’ll extend oursimple mini loop from theprevious section toshow the
first post’ sfullcontent, andleave theothers asexcerpts:
chapter_03/loop-index.php  (excerpt)
<?php if (have_posts()) : $postcounter = 1; ?>
  <h1>Latest Posts</h1>
  <ul class="mini-list">
    <?php while (have_posts()) : the_post(); ?>
      <li>
        <h2><a href="<?php the_permalink() ?>">
            <?php the_title(); ?></a> 
            <?php the_time("j M"); ?></h2>
        <p>
          <?php if ($postcounter == 1) {
                  the_content();
                } else {
                    the_excerpt();
                  } ?>
        </p>
        <p><?php the_tags( "Tagged with: ", " / ", "" ); ?> </p>
      </li>
<?php $postcounter++; ?>
⋮
You’ll seethatwestart bycreating avariable, postcounter ,andatthebeginning weassign ita
value of1.Attheendofthewhile loop, weincrement thevalue ofpostcounter by1.And inthe
middle oftheloop, wecheck thevalue ofpostcounter anddecide whether toshow theexcerpt
(the_excerpt() ),orthepost’ scontent (the_content() ).
Now ,let’sputthatsame counter towork inthepursuit ofcold hard cash: we’ll insert advertising
blocks after every third post. After theendofthelistitems, we’ll check toseewhether thevalue of
postcounter isdivisible bythree, andifso,we’ll insert asubtle bitofadvertising. Thefollowing
example extends further onourprevious one:The W ordPress Anthology 68
chapter_03/loop-index.php  (excerpt)
⋮
</li>
<?php 
  if (($postcounter % 3) == 0) { ?>
    <li class="break">
      <a href="http://www.example.com">Buy lots of widgets please
      </a>
    </li>
<?php  } 
$postcounter++; ?>
Let’sseehow thatturned out,inFigure 3.3.
Figur e 3.3. Our mini loop, now with ads—we’ll be rich!
Ofcourse, youmight have better luck with raking inthecash ifyouuseamore enticing adfrom a
reputable adnetwork, butnodoubt yougetthedrift.69 The Loop and W ordPress File System
Rewinding The Loop
Ifyouwant tousemore than oneloop onapage, usetherewind_posts() function toreset The
Loop’ scounters tothebeginning. Ifyouforget todoso,youmight find thatyou’re missing posts
inyour other loops, orexperiencing funny behavior inpagination.
Beyond the Default: Custom Queries
It’sallvery well tobeable tomeddle with thedefault loops, butwhat about changing them com-
pletely ,oreven creating your own? Sometimes your project calls forasetofposts from aparticular
category orsetoftagsonly.Maybe you’d liketoshow offyour most recent photo attachments ina
sidebar widget. Youmight want tochange your author archives toshow theposts inalphabetical
order ,instead ofreverse chronological order .However youslice it,it’sacertainty thatoneday
you’ll need togobeyond thesafety ofthose default loops.
Like anyCMS, WordPress’ smost important jobistoretrieve anddisplay posts. Accordingly ,there
areafewdifferent methods forquerying thedatabase. Let’slook athow these aredone andwhen
youmight useeach technique.
Manipulating the Default loop: query_posts()
Welearned earlier thatWordPress, being ahelpful type ofCMS, setsupitsown queries oncertain
pages. What happens, though, when youwant toalter thatbehavior ever soslightly? Ifyour goal is
simply tomodify what should appear inthemain WordPress loop, thequery_posts() function4
isforyou. It’safunction thatoverrides thecurrent page’ sdefault loop, andit’suseful whenever
youwant tomake some quick tweaks tothetype ofposts thatappear .
Touseit,simply callonquery_posts() before your loop begins, andsetuptheparameters you
need from theavailable options. Forexample, weoften findthatwewant toexclude certain categories
from date-based archives orthehome page. Wecandothisbysimply adjusting thequery toexclude
those categories’ IDswith aminus sign, likeso:
<?php query_posts(’cat=-11,-8,-90’); 
if (have_posts()): while (have_posts()) : the_post(); ?>
... continue your loop as normal
Toaddmore parameters, justpass onmore ofthem, separated byampersands:
<?php query_posts(’cat=-11,-8,-90&post_type=reviews&tag=action’); ?>
4http://codex.wordpress.org/T emplate_T ags/query_postsThe W ordPress Anthology 70
What P arameters Can I Use?
Alltheavailable parameters aredocumented intheWordPress Codex’ sWP_Query documentation,5
which istheclass thatunderpins allthefunctions around fetching content.
Once youstart adding more andmore criteria, itbecomes alittle easier toread ifyouexpress these
asalonghand-style array ,andthen pass thearray into thequery_posts() function:
<?php $args = array(
        ’cat’ => ’-11,-8,-90’,
        ’post_type’ => ’reviews’,
        ’tag’ => ’action’,
        ’posts_per_page’ => 30,
        ’order’ => ’ASC’,
        ’order_by’ => ’rand’
    );    
    query_posts($args);
?>
When you’ve finished with your customized loop, it’simportant toclean upafter yourself, andreset
thequery back tonormal.query_posts() modifies alotofglobal variables, many ofwhich arealso
inusebyplugins andthemes; ifyouneglect toreset your query once you’re done, itcould have an
adverse effect onplugins andtheelements thatassume thequery hasbeen leftuntouched. Over -
coming itissimple—the wp_reset_query() function avoids allthedrama:
    ... The Loop
<?php else: ?>
    ... the no posts message
<?php endif;
 wp_reset_query(); ?>
Creating New Customized Loops: get_posts
Thequery_posts() function isgreat ifyouwant tomodify what happens onanygiven page’ sdefault
loop. When youhave aneed tocreate completely customized loops, however ,wehave adifferent
toolatourdisposal: get_posts() .6
Weoften find ourselves using custom loops when wewant tocreate complex pages. Forexample,
theever-popular magazine-style layout frequently makes useofanumber ofseparate loops to
achieve effects such assliders andfeatured posts, orformats including topical sections. Inthis
situation, modifying theexisting loop isn’t going tobeenough.
5http://codex.wordpress.org/Class_Reference/WP_Query#Parameters
6http://codex.wordpress.org/T emplate_T ags/get_posts71 The Loop and W ordPress File System
Forexample, let’ssaythatwe’re creating apage template thatlists aparticular series ofposts. Each
post intheseries istagged with wordpress andtutorial .Wewant toshow thelistofposts inascending
date order ,sothatareader ofthepage knows which order toread them in.
Tosetupaloop thatworks forthisscenario, we’ll first need tomake anew array with allthe
parameters wewant tousetoretrieve ourposts. Then, we’ll useget_posts() tocreate anew array
ofposts,tutorials ,anduseaforeach loop toiterate through them. Bydefault, we’re unable to
usetemplate tagslikethe_content intheusual way,sotheaddition ofthesetup_postdata()
function takes each post andprepares itforeasier use:
chapter_03/get_posts.php
<?php $args = array(
    ’numberposts’ => 30,
    ’tag’ => ’wordpress+tutorial’,
    ’order’ => ’ASC’,
    ’order_by’ => ’date’
);
$tutorials = get_posts($args);
foreach($tutorials as $post) : setup_postdata($post); ?>
    <h2><a href="<?php the_permalink(); ?>">
      <?php the_title(); ?>
      </a>
    </h2>
    <?php the_excerpt(); ?>
<?php endforeach; ?>
setup_postdata()  Requir es a post
Intheabove example, each item inthetutorials array isreferred toaspost .Withthe
setup_postdata() function, youmust always calloneach post aspost —no other variable will
do.
Post Query P arameters
When we’re building ourown queries, wehave some incredibly powerful tools atourdisposal. As
always, there’ snobetter place than theCodex7tolearn about allthedifferent parameters andhow
tocombine them.
Asweprogress through thisbook, andcover different techniques andtopics, we’ll seehow various
parameters andmethods help usgetthose jobs done.
7http://codex.wordpress.org/Class_Reference/WP_QueryThe W ordPress Anthology 72
Using the WP_Query  Class Dir ectly
TheWP_Query class iswhat’ sresponsible forreturning theposts foradefault loop,get_posts() ,
andquery_posts() ,alike; these functions callonthesame class, justindifferent ways. Calling on
itdirectly getsyouabigobject with aselection ofposts, plus agood deal ofinformation about the
request itself.
Ifyou’re acreature ofhabit andconsistency ,abigbenefit ofthisapproach isthatyoucaninstantiate
anewWP_Query object andtreat itjustlikearegular WordPress loop, butdealing withget_posts()
canbealittle more tricky .Most ofthetechniques andfunctions arethesame astheones you’d use
when you’re manipulating aregular oldloop, soit’svery easy topick upandusethismethod right
away .Withget_posts() ,you’ll find thatthere areafewcaveats: pagination needs extra help,
plugins work differently with aloop made fromget_posts() ,andsoon.
Another benefit oftheWP_Query approach isthatyou’ll often find itinusewith plugins, especially
ones thatmodify theWordPress back end. Ifyou’re anaspiring plugin ninja, it’slikely you’ll deal
withWP_Query often, sosome consistency inhow youretrieve content ishandy tohave.
It’sstillokay touseget_posts() tograb simpler lists ofposts—in fact, it’sbeen apopular method
forsolong thatitwill probably bearound foralittle while yet—but theease ofdealing with the
WP_Query object directly makes itagreat choice overall. Youmay find thatyounever need toworry
about usingget_posts() atall!
Let’slook athow easy itistodeal with aWP_Query object. Inthisexample, we’re creating asimilar
loop totheoneintheprevious section, showing ourWordPress tutorial series inchronological or-
der—this time, using theWP_Query method. Before webegin, we’ll puttheexisting query inanew
variable forsafekeeping:
chapter_03/WP_Quer y.php (excerpt)
<?php
$original_query = $wp_query;
$wp_query = null;
$args = array(
    ’numberposts’ => 30,
    ’tag’ => ’wordpress+tutorial’,
    ’order’ => ’ASC’,
    ’order_by’ => ’date’,
    ’paged’ => $paged
    );
$wp_query = new WP_Query($args);
?>73 The Loop and W ordPress File System
For Pagination, Only $wp_query  Will Do
Inthisexample, we’ll bemaking ourown query ,butwe’ll becopying ouroriginal query toanother
variable andthen naming thatvariable$wp_query .This isnecessary forpagination methods and
their associated tags. They simply failtowork when thequery isstored inanobject byanyother
name. Ofcourse, you’ll only need toconcern yourself with thisissue when youneed pagination.
Withussofar?Now thatwe’ve stashed theoldquery away andsetupournew one, wecanstart
using thenew query inaloop:
chapter_03/WP_Quer y.php (excerpt)
<?php if ($wp_query->have_posts()): ?>
<?php while ($wp_query->have_posts()) : $wp_query->the_post(); ?>
  <h2><a href="<?php the_permalink(); ?>">
      <?php the_title(); ?>
    </a>
  </h2>
  <?php the_excerpt(); ?>
<?php endwhile; else: ?>
    ... something to show if there were no posts
<?php endif; ?>
When you’re finished playing with yourWP_Query object, it’stime toreturn everything tohow you
found it.We’llputthecontents of$original_query back into$wp_query ,andensure everything’ s
back tonormal byusing thewp_reset_postdata() function. This function uses thepage’ sPOST
data torestore thepost global variable toitsoriginal state:
<?php
  $wp_query = $original_query;
  wp_reset_postdata();
?>
Roll Y our Own Loop Magic
Withacombination ofcustom queries, loops, andgood old-fashioned HTML elbow grease, you’ll
beable tocreate some groovy features foryour blog. Here aresome examples ofcommon techniques,
andhow queries andloops areused toachieve them. We’ve touched onabitoftheory inthis
chapter ,butsince TheLoop issuch animportant partoftheWordPress experience, you’ll find that
wedelve into more interesting aspects ofitthroughout thisbook.
Fornow,let’sjusttryoutafewmore examples.The W ordPress Anthology 74
Fetch Any P osts Matching a Custom Field
Imagine thatyou’d liketopull outaseries ofposts matching agiven custom field. Forexample, if
you’ve been keeping anote ofthemusic youwere listening towhile youwrote each post, itmight
beamusing topull outlinks toalltheposts matching agiven artist.WP_Query provides twocustom
field arguments, meta_key andmeta_value ,toconstruct aquery:
chapter_03/custom-field.php  (excerpt)
<?php
$original_query = $wp_query;
$wp_query = null;
$args = array(
    ’meta_key’ => ’artist’,
    ’meta_value’ => ’The Beatles’,
    ’order’ => ’DESC’,
    ’order_by’ => ’date’,
    ’post_count’ => ’10’
    );
$wp_query = new WP_Query($args); 
?>
Now thatwehave ourarguments andourquery inplace, we’ll create aloop thatshows aheading
andlistwhen there’ smatching posts. Since wehave noneed toshow anything here ifnothing exists,
we’ll justexitTheLoop after ourwhile loop:
chapter_03/custom-field.php  (excerpt)
<?php if (have_posts()): ?>
  <h3>This artist also inspired...</h3>
  <ul>
    <?php while (have_posts()) : the_post(); ?>
      <li><a href="<?php the_permalink(); ?>">
          <?php the_title(); ?>
          </a>
      </li>
    <?php endwhile; ?>
  </ul>
<?php endif; ?>
Aswelearned earlier ,it’simportant toclean upyour mess afterwards:
<?php
// Reset post data
wp_reset_postdata();75 The Loop and W ordPress File System
// Restore some order
$wp_query = $original_query;
?>
Teasers of Futur e-dated P osts
Ifyou’re super -organized, youprobably have abunch offuture-dated posts waiting togoup.Why
nottease your readers with ataste ofwhat’ stocome? Inthisexample, we’ll create aquery thatre-
trieves future posts, andshows their titles, excerpts, andanidea ofhow long readers need towait
tillthey canseeit.
Asbefore, we’ll store away theoriginal query inanother object, andcreate anewWP_Query .Inthis
case, we’ll usethepost_status argument toaskforposts thataresetforpublication inthefuture:
chapter_03/future-dated-posts.php  (excerpt)
<?php
$original_query = $wp_query;
$wp_query = null;
$args = array(
    ’post_status’ => ’future’,
    ’order’ => ’ASC’,
    ’order_by’ => ’date’,
    ’post_count’ => ’3’
    );
$wp_query = new WP_Query($args);
?>
Easy enough sofar.Now we’ll show atitle, theexcerpt, andahuman-friendly explanation ofhow
long ourreaders will have tobitetheir nails andwait toread it:
chapter_03/future-dated-posts.php  (excerpt)
<?php
if (have_posts()) : while (have_posts()) : the_post(); ?>
<h2><?php the_title(); ?></h2>
<p><?php the_excerpt(); ?></p>  
<?php
$now = time(’U’);
$posted = get_the_time(’U’);
echo "Going live in " . human_time_diff($posted, $now) . " time";
?>
<?php endwhile;
else: ?>
    <p>No future posts are planned.</p>
<?php endif; ?>The W ordPress Anthology 76
Any Mor e Queries?
There aremany different facets todeveloping akeen understanding ofWordPress, butthenone of
them will make sense until youunderstand TheLoop andtemplate tags, how they work together ,
andwhere everything lives. Inthischapter ,wecovered thestandard WordPress filestructure and
described how andwhere touseTheLoop. Wewent through afewexamples ofsimple versions of
TheLoop, andthen duginto some more custom manipulations where wecreated ourown queries
andlooked atthedifference between query_posts() ,get_posts() ,andWP_Query .Onthesurface,
TheLoop isn’t thesexiest topic inWordPress, butit’sthevital building block required tomake
everything elsehum. Now let’sstart putting ournew-found knowledge about template tagsandThe
Loop into action anddelve into theworld ofcustom post types.77 The Loop and W ordPress File System

Chapter4
Post Types
One ofthefactors thatelevates WordPress from being amere blogging toolintoabutt-kicking CMS
ready forworld domination isitscustom post types capability .Custom post types letyougobeyond
theconcept ofablog post orpage, andmove into justabout anytype ofcontent youlike. Imagine
creating arecipe ortutorial site, astaff directory ,oraportfolio ofwork.
Inthischapter ,we’ll learn about why wemight want tocreate ourown post types, how toputthem
together ,andhow tocreate templates forthem.
Moving Beyond the Blog
While many ofusgetalong finewith thebuilt-in content types provided inWordPress, sometimes
youjusthave tostretch thesystem alittle—you want tobeable tomake upyour own content types,
with customized fields, categories, andmore.
Before WordPress 2.9,ifyouwanted tocreate acustom content type, you’d have totrytocombine
pages orposts with categories, tags, custom fields, andsome judicious useoftheming. While it
achieved thetask athand, itwashardly anideal solution; ablog post isstillablog post, nomatter
how well your theme could dress ituptolook likeaproduct page. More adventurous souls would
build plugins andstrange hacks thatcreated custom database tables anddidother mysterious tricks
behind thescenes, butitwasanapproach fraught with trouble.
Custom post types, bycomparison, give usastraightforward way toextend WordPress’ snative
content types beyond thedefault types. Setting them upisstupendously easy: justafewlines of
configuration andsome effort with ourtemplates isallittakes tohave intuitive andfunctional
content types.
What’ s in a name?
When we’re talking about post types ,what wereally mean iscontent types. Thefactthatit’scalled
apost type inWordPress might make itseem likeit’sstillintended forblogging, butdon’t bedis-
suaded—there’ ssomuch more thatcanbedone with these.
Creating Y our First Custom P ost Types
Let’simagine thatwe’ve found ourselves incharge ofcreating awebsite forasmall web conference.
Any good conference website needs tohave atleast twoimportant pieces ofinformation: who is
speaking, andwhat they aretalking about.
This sounds likeagreat opportunity toexplore post types. Wecanusethese tohelp usdescribe
each ofthespeakers andthesessions. We’llalso have information pages andaconference blog,
though we’ll usestandard pages andblog entries forthese. We’llstart byplanning outthetypes of
information we’d liketoexpress:
Speakers pages
These will besimple enough. They should describe alittle bitabout each person, including an
image, their business, short andlong versions oftheir bio,andalink toawebsite. We’lllistall
thespeakers onalisting page.
Sessions pages
These will bemore complex. They should describe thename ofthetalk, itslocation, itsdate
andtime, adescription, andaway toupload aslide deck ofthetalk. They should also have
their own tags, sothatauser cancheck outallthesessions thatmay beofinterest tothem. We’ll
belisting sessions onapage, too.
Let’sbegin with thespeakers. Create anew plugin folder called sitepoint inwp-content/plugins ,
andplace anew plugin fileinside itwith thefilename sitepoint-custom-types.php .You’ll need to
give your plugin aheader ,which WordPress will usewhen initializing your plugin foruse:
chapter_04/sitepoint-custom-types.php  (excerpt)
<?php 
/*
Plugin Name: SitePoint Custom Conference Types
Plugin URI: http://sitepoint.com
Description: This is a plugin that provides the Custom Post Types 
  chapter of the WordPress Anthology.
Author: Your Name HereThe W ordPress Anthology 80
Version: 0.1
Author URI: http://sitepoint.com/
*/
?>
Youcandefine your custom post types inaplugin folder ,orinatheme folder’ sfunctions.php
file.Sowhich should youchoose?
Ifyour custom content isforwide use, itmight bebest topresent itasaplugin. Ifyou’re working
onaclient’ sproject where you’re fairly sure they’ll stick tousing thetheme youprovided—
whether that’sTwenty Eleven oryour own creative choice—perhaps you’ll besafekeeping it
within thefunctions.php fileinthatparticular theme’ sfolder (which canbefound in
wp-content/themes ).Thelitmus testforwhere your code belongs isreally whether thatfunctionality
canbebestdescribed assitefunctionality ordisplay logic—but foradeeper discussion ofthis, have
alook atthesection called “Does MyFunctionality Belong inaPlugin orTheme?” inChapter 6.
When indoubt, it’susually best toaddyour functionality inaplugin. Ifyouareconcerned that
your client may accidentally turn theplugin off,consider simply making theplugin amust-use
plugin (you canlearn more about must-use plugins inChapter 5).
Inthischapter ,we’ll work onaplugin—not least because itmakes itreally easy foryoutodrop our
example files into your own install. Ifitsounds likewe’re jumping ahead alittle, weare.Infact,
plugin development iscovered indetail inChapter 5,specifically inthesection called “The Anatomy
ofaPlugin” inChapter 5.We’llonly betouching onthemost basic parts ofplugin setup here, and
ifyou’ve been reading cover tocover andareyettoread Chapter 5,these instructions should still
make sense. Ofcourse, ifyou’re justdying tofind outnow,feelfreetoflipahead—we’ll stillbe
here when youreturn.
Head intotheWordPress admin area, gotothePlugins submenu, andclick onInstalled Plugins .There’ s
ourplugin, listed alongside anyothers inthewp-content/plugins folder ,with alltheinformation
from ourheader attached toit.Cool, huh? Again, fornow,avoid fretting toomuch about thedetails
behind this—it’ sallgoing tobefully fleshed outinChapter 5.
Ourplugin, asyet,does absolutely nothing, soyou’ll need toactivate itinorder toseeyour code
take shape. Goahead andclick Activate .Make sure youkeep your Admin panel open inaseparate
tabinyour browser ,too,aswe’re going tobecoming back toitalot.
Must-use Plugins Ar e Active
Ifyou’ve setupyour plugin asamust-use plugin, it’sunnecessary tomanually activate theplugin.
Must-use plugins areautomatically active whenever they arepresent inthewp-content/mu-plugins
directory .Formore information onthis, flipforward tothesection called “Must-use Plugins” in
Chapter 5.81 Post Types
Now forsome action!
The Basics of register_post_type()
Theregister_post_type() function takes care oftelling WordPress about how wedefine each
new piece ofcontent. Like most things WordPress, it’sdescribed ingreat detail over attheCodex,1
along with itsdizzying array ofconfiguration arguments (See what wedidthere—array ?Okay ,
tough crowd …).Inthischapter ,we’ll justrefer totheones weneed.
We’llwrap allthese upinourown function, conference_post_types_register() ,andcallon
thatfunction whenever theinit action occurs:
chapter_04/sitepoint-custom-types.php  (excerpt)
function conference_post_types_register() {
    register_post_type( 'conference_speaker',
        array(
            'labels' => array(
                'name' => __( 'Speakers' ),
                'singular_name' => __( 'Speaker' ),
                'add_new' => __( 'Add New Speaker' ),
                'add_new_item' => __( 'Add New Speaker' ),
                'edit' => __( 'Edit' ),
                'edit_item' => __( 'Edit Speaker' ),
                'new_item' => __( 'New Speaker' ),
                'view' => __( 'View Speaker' ),
                'view_item' => __( 'View Speaker' ),
                'search_items' => __( 'Search Speakers' ),
                'not_found' => __( 'No speakers' ),
                'not_found_in_trash' => __( 'No speakers in the Trash' ),
            ),
            'hierarchical' => false,
            'public' => true,
            'menu_position' => 25,
            'menu_icon' => plugins_url( 'icons/user_comment.png' , __FILE__ ),
            'has_archive' => 'speakers',
            'rewrite' => array('slug' => 'speaker'),
            'supports' => array( 'title', 'excerpt', 'editor', 'thumbnail'),
            'description' => "A conference speaker page is a page of ➥
               information about a person who'll appear at this event."
        )
    );
}
add_action( 'init', 'conference_post_types_register' );
1http://codex.wordpress.org/Function_Reference/register_post_typeThe W ordPress Anthology 82
Thelabels array takes care ofhow thecustom type isrepresented intheWordPress back end.
We’llusetheword “speaker” invariations appropriate tothecontext.
hierarchical tells WordPress whether thepost type canhave parents andchildren, likepages.
Inthisinstance, we’ll besaying no.
public helps define whether we’d likethispost type tobeviewable onthefront end, whether
itcanbereturned insearch results, andwhether we’d likeittobeeditable intheback end.
Youmight wonder why you’d want these tobehidden. Insome cases, especially ifyou’re
automating content creation orwant totreat some kinds ofcontent likeaprivate database, you
may want tohide some ofthese items.
menu_position isanumber thatrepresents theplace thispost type’ smenu will occupy inthe
Admin menu.25will place itbelow theComments submenu.
menu_icon looks after theall-important icon thatrepresents thispost type intheWordPress
Admin menu. Forthisexample, we’ve used oneofthevery excellent Silk icons.2These have
afairly close resemblance insizeandstyle totheexisting WordPress icons, andlook about a
million times better than anything wecould draw up.
has_archive defines whether thepost type hasanarchive page ofitsown—that is,alisting
page. We’dliketohave aspeaker listing page, sothevalue wepass itisspeakers ;thisisboth
saying thatwewant anarchive (true ),andalso serves astheslug wewant toseeforour
archive’ spermalink.
rewrite looks after what willbeused inthepermalink rewrite rules foranindividual speaker;
inthiscase, itwill bespeaker .
supports ,tucked away attheendhere, might beoneofthemost important parts ofall.It
defines which ofthecore fields aresupported andshown bythispost type. Theavailable fields
are:
■title :textinput field tocreate apost title
■editor :themain textediting box—the area thatforms ablog entry’ spost content
■excerpt :aplain textregion forwriting acustom excerpt
■comments ortrackbacks :thecomments ortrackbacks configuration areas, respectively
■revisions :allows revisions tobemade toyour post
■author :displays apull-down menu forchanging theitem’ sauthor
■thumbnail :shows theFeatured Image uploading box
■custom-fields :custom fields input area; youcanleave thisout,andstillstore custom
fields—in fact, that’swhat we’ll bedoing
■page-attributes :theattributes boxforpages, such astheparent post orpage template
2http://www .famfamfam.com/lab/icons/silk/83 Post Types
Wechose justfour ofthedefaultsupports fields:title ,editor ,excerpt ,andthumbnail ,
representing thespeaker’ sname, long bio,short bio,andimage, respectively .We’llusecustom
fields totake care oftheothers later.
Action? What’ s that?
Hooks andactions areincredibly important concepts inWordPress hackery .Once more, these are
covered indetail inChapter 5,sohead there forafuller explanation ofwhat these areandhow they
work. Fornow,justbepleased they’re making your page work beautifully!
And Mor e!
There areeven more arguments youcanpass withregister_post_type() .Explore them allat
theCodex.3
That’ salotofarguments, butcanyoubelieve thatthisisallyouneed tocreate abasic new post
type? It’strue! Save your work andhave alook atyour WordPress admin screen. Youshould find
thatyour menu now contains anew item forSpeakers ,asseen inFigure 4.1.
Figur e 4.1. Cr eating a new speaker
Neat, hey? Butwestillneed toaddsome new fields; that’swhat will come next.
3http://codex.wordpress.org/Function_Reference/register_post_typeThe W ordPress Anthology 84
Adding Custom Fields to the Edit Scr een
Ourconference speakers’ pages need toinclude anote about who they work for(even ifit’sthem-
selves), andtheir website’ sURL andtitle. Now ,youcould include these inthetextofeach page,
ifyouwanted, butthat’shardly thesame asproperly structured data.
This problem’ sbeen solved foralong time intheworld ofWordPress, ofcourse; itscustom fields
feature allows youtocreate metadata about apost. Used properly ,custom fields areadeadly weapon
inthehands ofanexpert WordPress ninja—unfortunately ,italso means thatourusers need tore-
member which field goes with what type ofdata. Forexample, youmight want certain blog posts
thatrepresent quotations tohave asource name andURL, soyou’d have toremember topick the
right label, putthesource in,andhope there’ snothing you’ve forgotten. And ifyouusecustom
fields forseveral types ofposts, they’re allshown right there intheCustom Posts pull-down, which
justseems superfluous.
Forimproved usability ,wouldn’t itbebetter justtofillinaclearly labeled setoffields? Sure it
would—that’ swhy we’ve hidden thatinterface element from ourposting screen. We’llwrite our
own Edit Screen ,with ourown form fields.
Let’screate afunction thatreads thevalues ofanumber ofcustom fields, andprints form fields for
each. Here’ safairly simplistic bitofPHP form creation:
chapter_04/sitepoint-custom-types.php  (excerpt)
function conference_speaker_fields (){
    global $post;
    $custom = get_post_custom($post->ID);
    $conference_speaker_business = $custom["conference_speaker_business"][0];
    $conference_speaker_website_name = $custom ➥
      ["conference_speaker_website_name"][0];
    $conference_speaker_website_url = $custom["conference_speaker_website_url"] ➥
      [0];
    $conference_speaker_location = $custom["conference_speaker_location"][0];
    ?>
    <p>
    <label>Employer/Business Name:</label><br />
    <input size="45" name="conference_speaker_business" 
       value="<?php echo $conference_speaker_business; ?>" />
    </p>
    <p>
    <label>Website Name:</label><br />
    <input size="45" name="conference_speaker_website_name" 
       value="<?php echo $conference_speaker_website_name; ?>" />
    </p>
    <p>
    <label>Website URL:</label><br />85 Post Types
    <input size="45" name="conference_speaker_website_url" 
       value="<?php echo $conference_speaker_website_url; ?>" />
    </p>
    <p>
    <label>Location:</label><br />
    <input size="45" name="conference_speaker_location" 
       value="<?php echo $conference_speaker_location; ?>" /></p>
    <?php
}
Notice thatwe’ve prefixed every post meta field withconference_speaker_ ?Younever know when
youmight install aplugin thathasfields thatclash with your existing ones. Using aprefix likethis
makes itlesslikely tooccur .
How doweplace them ontheeditscreen?add_meta_box() isthefunction thatwill help us,and
itaccepts seven arguments. Thefour mandatory arguments are:
■id:theHTMLidofthedivision thatWordPress will insert
■title :thetitle we’ll show forthiseditscreen section
■callback :thefunction thatprints outtheHTML fortheeditscreen section
■page :thebuilt-in type orcustom post type wewant tomodify
Optional arguments are:
■context :being thepart oftheeditscreen wewant toputitin;acceptable options arenormal ,
advanced ,orside (side placement isgreat forsmall fields)
■priority :determines theposition (importance) ofwhere theboxes should show; theavailable
options arehigh ,core ,default ,orlow
■callback_args :anyfurther arguments topass ontoourcallback function
Let’stake allthatHTML wemade before inconference_speaker_fields() ,andputitinanew
meta boxcalledconference_speaker_info ,with atitle ofSpeaker Details .Naturally ,weonly want
thistoappear intheconference_speaker content type. Here’ safunction tocreate it:
chapter_04/sitepoint-custom-types.php  (excerpt)
 function add_conference_speaker_box(){
    add_meta_box(
        "conference_speaker_info",
        "Speaker Details",
        "conference_speaker_fields",The W ordPress Anthology 86
        "conference_speaker"
        );
}
Here, we’ve only used thefour mandatory arguments.
Why meta?
Hey,have younoticed how functions about custom fields always seem torefer tometa thisand
meta that? It’sbecause inthepast they were called post meta fields .Wenow callthem custom
fields because thismakes more sense, butthefunctions’ names remain thesame.
We’llalsoneed afunction tosave them.update_post_meta() istheWordPress function thatinserts
values ascustom fields. We’lltake thevalue ofeach field from thePOST variable, andsave them in
anappropriately named custom field forthecurrent post:
chapter_04/sitepoint-custom-types.php  (excerpt)
function save_conference_speaker_attributes(){
    global $post;
    update_post_meta($post->ID, "conference_speaker_business", ➥
      $_POST["conference_speaker_business"]);
    update_post_meta($post->ID, "conference_speaker_website_url", ➥
      $_POST["conference_speaker_website_url"]);
    update_post_meta($post->ID, "conference_speaker_website_name", ➥
      $_POST["conference_speaker_website_name"]);
    update_post_meta($post->ID, "conference_speaker_location", ➥
      $_POST["conference_speaker_location"]);
}
Theadmin_init action istriggered whenever anadmin page isloaded; accordingly ,it’stheright
place tocallonourfunction thatadds theconference speaker box:
chapter_04/sitepoint-custom-types.php  (excerpt)
add_action( 'admin_init', 'add_conference_speaker_box' ); 
Wealso want tojump aboard when thesave andpublish actions happen, sothatwecansave
what’ sinourcustomized fields:
chapter_04/sitepoint-custom-types.php  (excerpt)
add_action('save_post', 
'save_conference_speaker_attributes');
add_action('publish_post', 
'save_conference_speaker_attributes');87 Post Types
Adding Confer ence Sessions
Let’sexpand onourplugin alittle further ,andcreate ourconference sessions post type, with a
Sessions submenu intheAdmin menu. Wehave already learned how tosetuponeofthese, sothe
following register_post_type() should bereasonably familiar toyou:
sitepoint-custom-types.php  (excerpt)
register_post_type( 'conference_session',
    array(
        'labels' => array(
            'name' => __( 'Sessions' ),
            'singular_name' => __( 'Session' ),
            'add_new' => __( 'Add New Session' ),
            'add_new_item' => __( 'Add New Session' ),
            'edit' => __( 'Edit' ),
            'edit_item' => __( 'Edit Session' ),
            'new_item' => __( 'New Session' ),
            'view' => __( 'View Session' ),
            'view_item' => __( 'View Session' ),
            'search_items' => __( 'Search Session' ),
            'not_found' => __( 'No sessions' ),
            'not_found_in_trash' => __( 'No sessions in the Trash' ),
        ),
        'public' => true,
        'hierarchical' => false,
        'exclude_from_search' => false,
        'menu_position' => 20,
        'menu_icon' => plugins_url( 'icons/calendar_view_day.png' , ➥
           __FILE__ ),
        'query_var' => true,
        'can_export' => true,
        'has_archive' => 'sessions',
        'description' => "A conference session is an event: a ➥ 
           workshop, talk, panel, or get-together.",
        'rewrite' => array('slug' => 'sessions'),
        'supports' => array( 'title', 'excerpt', 'editor', 'thumbnail' )
    )
);
Again, although it’srelatively long, it’salso fairly straightforward. Each piece ofsession content
represents anevent inourconference, butinmany other respects itresembles aregular sortofpost:
it’llhave anexcerpt, apost body ,andatitle. We’llalso need some details about where andwhen
thesession will beheld, sowe’ll addanother meta box, likeso:The W ordPress Anthology 88
sitepoint-custom-types.php  (excerpt)
function conference_session_admin(){
    add_meta_box("conference_session_meta", "Session Details", ➥
                  "conference_session_meta", "conference_session", ➥
                  "normal", "core");
}
function conference_session_meta (){
    global $post;
    $custom = get_post_custom($post->ID);
    $conference_session_room = $custom["conference_session_room"][0];
    $conference_session_date = $custom["conference_session_date"][0];
    ?>
    <p>
    <label>Room</label><br />
    <select name="conference_session_room">
      <option value="Grand Ballroom">Grand Ballroom</option>
      <option value="Plenary A">Plenary A</option>
      <option value="Plenary B">Plenary B</option>
      <option value="Theatre">Theatre</option>
    </select>
    </p>
    <p><label>Session date and time</label><br />
    <input size="45" id="conference_session_date" 
       name="conference_session_date" 
       value="<?php echo $conference_session_date; ?>" />
    </p>    
    <?php
}
Inthisexample, we’ve chosen touseapull-down foreach oftheconference session venues, since
they won’t change. Thedate andtime information isopen—that makes iteasy toinsert flexible
statements like“From 8tilllate” or“6:30pm fora7pm start.” Sofar,sogood, andstillfamiliar
territory .
Where oursessions willdiffer significantly from ourearlier efforts willbeinhow wetreat thetopic
of,well, topics.
Custom T axonomies
Ifyou’ve attended aconference lately ,you’ll know how tricky itistodecide which sessions toat-
tend—and ifitwasareally good conference, youwould have found yourself spoiled forchoice!
It’shelpful tobeable toplan your timetable bygaining asense ofwhich sessions willbestsuityour
interests andskills. How canwemake thiseasy foroursite’svisitors? One way isbycreating a89 Post Types
custom taxonomy forourconference sessions. Inthegeneral sense, ataxonomy isascheme of
classification. IntheWordPress sense, taxonomies arewhat wecallsetsofcategories andtags. A
vanilla install ofWordPress already comes with three: post tags, categories, andlink categories.
Custom taxonomies work likethese familiar tagsandcategories toaddmore meaning tocustom
post types.
Don’t T ax Your Br ain Just Y et
Custom taxonomies arediscussed ingreat detail inChapter 7.Once again, youshould look atthat
chapter formore information about how itallworks. Inthissection, we’ll justtouch onthebasics.
Inourconference scenario, we’ll beexpecting ourspeakers tohold forth onanumber ofweb-type
topics—such asJavaScript, usability ,orWordPress—so itmakes sense forourconference session
post types toallow forthis. Youcancreate anew taxonomy using theregister_taxonomy() func-
tion,4which accepts three parameters: thename ofthetaxonomy ,thetype ofcontent it’stobeused
with, andanarray ofadditional arguments. Inthebelow example, we’ll setupanew taxonomy for
session topics:
1.Thefirst variable will bethename ofourtaxonomy: conference_topics .
2.Thesecond argument defines which post types itshould apply to;conference_session ,inour
case.
3.Ourthird argument isanarray ofmore arguments:
■hierarchical letsuschoose ifthetaxonomy should allow forahierarchy ,likecategories, or
nohierarchy ,liketags. Inourcase, we’ll useatag-like construction.
■labels define thenames ofthetaxonomy asseen intheadmin area, much likethelabels for
new post types welearned about earlier .
■query_var determines whether thepost type isable tobequeried—that is,ifyoucanform a
loop with it.
■People arelikely toenter their tagswith acomma between each one;update_count_callback()
calls onafunction thatensures thatWordPress treats these correctly .
■Therewrite value determines what will beshown intheURL forapost ofthistype.
We’llwrap itallupinafunction, create_conference_taxonomy() ,likeso:
4http://codex.wordpress.org/Function_Reference/register_taxonomyThe W ordPress Anthology 90
chapter_04/sitepoint-custom-types.php  (excerpt)
function create_conference_taxonomy() {
    $topiclabels = array(
      'name' => 'Topic',
      'singular_name' => 'topic',
      'search_items' =>  'Search topics',
      'popular_items' => 'Popular topics',
      'all_items' => 'All topics',
      'parent_item' => null,
      'parent_item_colon' => null,
      'edit_item' => 'Edit topic', 
      'update_item' => 'Update topic',
      'add_new_item' => 'Add new topic',
      'new_item_name' => 'New topic name',
      'separate_items_with_commas' => 'Separate topics with commas',
      'add_or_remove_items' => 'Add or remove topics',
      'choose_from_most_used' => 'Choose from common topics',
      'menu_name' => 'Conference topics',
    ); 
    register_taxonomy( 'conference_topics', 'conference_session',
        array(
       'hierarchical' => false,
             'labels' => $topiclabels,
             'query_var' => true,
             'update_count_callback' => '_update_post_term_count',
             'rewrite' => array('slug' => 'topics' )
        )
    );
}
Avoid These T erms in Y our Taxonomy Name
Some special terms arereserved forWordPress’ suse, andifyouusethem toname your taxonomy ,
itwillresult inacheeky error .Uppercase letters arealsoano-no. Ifyou’re being apolite developer ,
youprobably have little need toworry; after all,you’re already prefixing your custom taxonomies
uniquely ,likewetalked about earlier ,right? Even so,keep aneyeoutforthereserved names, which
arelisted ontheCodex.5
Finally ,you’ll need toinitialize thisfunction—associate itwith theinit action asfollows:
add_action('init', 'create_conference_taxonomy', 0);
5http://codex.wordpress.org/Function_Reference/register_taxonomy#Reserved_T erms91 Post Types
Once you’ve putallthistogether ,your new taxonomy will beinyour administration area, and
should look likeFigure 4.2.Since topics areassociated with questions, you’ll findthem intheSessions
menu.
Figur e 4.2. Our new taxonomy , ready for action
Providing Help
Remember thefirst time youjumped into WordPress? Ifyou’re anything likeus,youwould have
found yourself lostamong allthose different screens intheWordPress administrative interface.
Thegood news isthatonalmost every WordPress admin screen, afriendly Help link isthere to
guide theway.Clicking itreveals apanel, which canbeseen inFigure 4.3.The Help link often
provides relevant links totheCodex ordescriptions ofeach object. Theeven better news isthat, as
aWordPress developer ,it’seasy foryoutoaddthatsame level ofhelp toyour own work. It’salso
agreat opportunity toencourage users tovisit anyhelp pages youmight have setup,orletthem
know how they canseek support.The W ordPress Anthology 92
Figur e 4.3. The Help  link r eveals this handy panel
Theadd_contextual_help hook provides asimple, nonintrusive way toaddormodify help panels,
justliketheones thatcome with WordPress. Itaccepts twoarguments: thename oftheadmin screen
thatyouwant toaddhelp to,andsome texttoadd.
Straightforward, right? Buthey,wait aminute—how doyouknow thename ofeach ofthedifferent
WordPress admin screens? TheCodex provides ahandy way tofind out.6Where doyouplace this
nifty little piece ofcode? Navigate tothetheme folder thatyou’re currently using. Right now,we’re
using Twenty Eleven, soourfilepath will bewp-content/themes/twentyeleven .Inhere you’ll find a
functions.php file;thisiswhere you’ll input thefollowing code:
function check_current_screen() {
  if(!is_admin()) return;
  global $current_screen;
  print_r($current_screen);
}
add_action('admin_notices', 'check_current_screen');
This function reveals afewbitsofinformation about thescreens youcancallupintheadmin area.
Goandclick onSessions ,andyouwill seethatourprint_r() function hasoutput some useful in-
formation inthebrowser .Theonly piece ofdata we’re interested inhere isthe[id] ,which will
bethename oftheadmin screen we’re on.Placing thisvalue intheadmin_notices hook means
thatit’llbenice andobvious atthetopofeach page, justunderneath theHelp menu. Itturns out
6http://codex.wordpress.org/Function_Reference/add_contextual_help#Finding_the_Screen_Name93 Post Types
thatthepage forediting conference sessions iscallededit-conference_session ,revealed inFig-
ure4.4,which ishardly surprising.
Figur e 4.4. Our Edit Session  page’ s name is r evealed to be edit-conference_session
Once youhave apage’ sname, youcanhook into itscontextual help menu. We’llbundle upour
add_contextual_help() actions intoafunction wecancallconference_contextual_help() ,and
then bring them allinusing theadmin_init hook. Inthisexample, we’ve truncated thetextinour
help menus—normally ,you’d want tobemore explanatory—but youshould have notrouble coming
upwith your own appropriately helpful content. Again, putthiscode into your functions.php file:
function conference_contextual_help() { 
    $editspeaker = "From this screen, you can view and update all ➥
                    your conference's speakers...";
    $addspeaker = "Enter the details of a new speaker...";
    $editsession = "View and edit your conference's sessions...";
    $addsession = "Add a new session ...";
    $editsessiontopics = "Add and edit topics...";
    add_contextual_help('edit-conference_speaker', $editspeaker); 
    add_contextual_help('conference_speaker', $addspeaker); 
    add_contextual_help('edit-conference_sessions', $editsession);
    add_contextual_help('conference_sessions', $addsession); The W ordPress Anthology 94
    add_contextual_help('edit-conference_topics', $editsessiontopics); 
}
add_action('admin_init', 'conference_contextual_help');
Okay, Enough Help!
Itcanbevery tempting, when writing contextual help, totrytopack inafullandfrank explanation
ofeverything thatneeds tohappen. After all,that’swhat help menus arefor,right?
Well,sometimes youcanlose thereader’ sconcentration with toomuch text—it becomes abit
overwhelming. Ifyoulook around inWordPress land, you’ll seethatit’sallkept simple. Check out
thehelp inWordPress’ sdefault screens, like Media orSettings ,where you’ll find abrief overview
ofthescreen’ sfunctionality ,andlinks totheWordPress Codex foranyone who wants toknow
more.
Remember ,WordPress isabout being easy andfun, notoverwhelming andwordy .Trytotake a
similar approach toyour inline documentation, too.
While you’re poking around infunctions.php ,remember toremove—or atleast disable—your
add_action( 'admin_notices', 'check_current_screen' ); function thatweused earlier .It’s
handy forustoknow ,butyour users candowithout theunsightly mess onscreen. Once you’ve
done this, youshould seethatyour help textappears intheright places whenever youpress Help
inanygiven submenu. Neat!
Displaying Y our Custom P ost Types
You’ve puttogether your custom post types, added acustom taxonomy tooneofthem, andeven
given thegiftofhelp. Allthat’sleftnow istothink about how your new post types willbedisplayed.
And ifyou’ve already jumped ahead abitandread Chapter 6,youalready know justabout everything
youneed inorder todisplay your nifty new custom post types. It’strue! Ifyoulove theming, this
will betheeasiest part ofthechapter .
WordPress hasastructured system tolook fortemplate information—it’ scalled theTemplate
Hierarchy .7Todisplay asingle item, WordPress willlook inaparticular theme folder foratemplate
called single-{post_type} —like single-conference_session orsingle-conference_speaker .Ifafileofthat
name isnotpart ofourtheme, itwill look next tosingle.php ,andthen toindex.php .Similarly ,if
we’re showing ourcustom taxonomy ,WordPress hasahierarchy forthat, too.Itlooks for:
■taxonomy-{taxonomy_name}-{taxonomy-term}.php first, then
■taxonomy-{taxonomy_name}.php ,andfinally to
7http://codex.wordpress.org/T emplate_Hierarchy95 Post Types
■taxonomy_name .
Thesimplest path tocool custom post styles, then, istocreate atemplate thatfalls intothetemplate
hierarchy ofeach ofourcustomized features. Inourtheme folder ,we’ll need twoPHP files forour
post types: single-conference_speaker .php,and single-conference_session.php .Forourpurposes, it’s
unnecessary toworry about aseparate template foreach taxonomy term, sowe’ll justgowith a
template forallterms: taxonomy-conference_topics.php .
Showing off Our Confer ence Sessions and Speakers
Inthisexample, we’ll useachild theme forthetheTwenty Eleven template. Let’ssave ourselves
some extra work, andmake acopy ofTwenty Eleven’ ssingle.php template; then we’ll rename it
according totherules oftheTemplate Hierarchy—let’ scallitsingle-conference_speaker .php.
Looking inside thetemplate, we’ll seethatthere’ sa<nav> element containing forward andback
links (remember previous_post_link() andnext_post_link() ?),areference toatemplate part,
andareference tothecomments template. These areallsurplus toourrequirements, sobemerciless
with thedelete key! Getridofthissuperfluous markup, andyoushould beleftwith anempty shell
ofatemplate containing anempty loop:
chapter_04/single-conference_speaker .php (excerpt)
get_header(); ?>
        <div id="primary">
            <div id="content" role="main">
                <?php while ( have_posts() ) : the_post(); ?>
                <?php endwhile; // end of the loop. ?>
            </div><!-- #content -->
        </div><!-- #primary -->
<?php get_footer(); ?>
That certainly isabig,empty hole inthemiddle ofthattemplate. Let’sfillitwith template tags!
Forourspeakers, we’ll listthespeaker’ sname (theitem’ stitle), plus thecompany ,website, and
location (allpost meta fields). After that, we’ll show theentry’ scontent. Here’ ssome markup and
template tagsthatwill help usachieve thateffect:The W ordPress Anthology 96
chapter_04/single-conference_speaker .php (excerpt)
<?php while ( have_posts() ) : the_post(); ?>
    <article id="post-<?php the_ID(); ?>" <?php post_class(); ?>>
        <header class="entry-header">
            <h1 class="entry-title">
                Speaker Profile: <span><?php the_title(); ?></span>
            </h1>
            <p class="speaker-meta">
            Works at: <?php echo get_post_meta($post->ID, ➥
                       'conference_speaker_business', true); ?>
            | Visit <a href="<?php echo get_post_meta($post->ID, ➥
                       'conference_speaker_website_url', true); ?>">
                <?php echo get_post_meta($post->ID, ➥
                   'conference_speaker_website_name', true); ?>
            </a>
          | Comes from: <?php echo get_post_meta($post->ID, ➥ 
                         'conference_speaker_location', true); ?>
            </p>
        </header>
        <div class="entry-content">
            <?php the_content(); ?>
        </div><!-- .entry-content -->
    </article>
<?php endwhile; ?>
Asyoucansee,it’sjustliketheming asingle post orpage—but thistime, we’re making useofthose
custom meta fields. Itwill besimilar foroursessions, butwe’ll also throw inanifstatement that
checks toseeifthetaxonomy exists. Ifitdoes, we’ll useget_the_term_list() tobuild upasetof
links:
chapter_04/single-conference_session.php  (excerpt)
<?php while ( have_posts() ) : the_post(); ?>
    <article id="post-<?php the_ID(); ?>" <?php post_class(); ?>>
        <header class="entry-header">
            <h1 class="entry-title"><?php the_title(); ?></h1>
            <div class="session-meta">
            <dl>
            <dt>Where</dt>
            <dd><?php echo get_post_meta($post->ID, 'conference_session_room', ➥
              true); ?></dd>
            <dt>When</dt>97 Post Types
            <dd><?php echo get_post_meta($post->ID, 'conference_session_date', ➥
              true); ?></dd>
            <?php
            if(taxonomy_exists('conference_topics')) { 
                echo get_the_term_list( $post->ID, 'conference_topics', ➥
                  '<dt>Topics</dt><dd>', ', ', '</dd>' ); 
                 } ?>
            </dl>
            </div>
        </header>
        <div class="entry-content">
            <?php the_content(); ?>
        </div><!-- .entry-content -->
    </article>
<?php endwhile; ?>
There arevery fewdifferences between regular ,built-in WordPress content types andyour own
custom ones. Ifyou’re askilled themer ,you’ll have noproblem showing offyour custom types!
Custom Ar chives
Earlier inthischapter ,wetalked about how wecould specify anarchive page foreach ofourcustom
types—the pages thatrepresent each archive willbefound atSpeakers and Sessions .Now thatwe’re
digging around inourtheme, it’stime toputthese archives together .Looking back atourTemplate
Hierarchy structure, wecanseethatWordPress will check forafilecalled archive-{posttype}.php ,
sowe’ll need twofiles, archive-conference_session.php and archive-conference_speaker .php.
Once again, we’ll create anarchive template bycopying theonethatcomes with Twenty Eleven,
stripping outtheunnecessary parts, andenhancing therest. Wecanalsomanipulate TheLoop using
ouroldfriendquery_posts() .Inthisexample, we’re collecting ourconference_session items at
30items perpage, ordered bytitle:
chapter_04/ar chive-conference_session.php  (excerpt)
$args = array(
        'posts_per_page' => 30,
        'order' => 'ASC',
        'orderby' => 'title',
        'post_type' => 'conference_session'
    );
  query_posts($args);
And ifwehave posts, we’ll display ourlist.Ifwehappen tohave more than 30events, we’ll paginate.
twentyeleven_content_nav() isafunction defined byourparent theme thatdoes thejobhere:The W ordPress Anthology 98
chapter_04/ar chive-conference_session.php  (excerpt)
if ( have_posts() ) : ?>
<header class="archive-header">
    <h1>
        Sessions
    </h1>
</header>
<p>You'll love our packed timetable! ...</p>
<?php twentyeleven_content_nav( 'nav-above' ); ?>
<?php /* Start the Loop */ ?>
<?php while ( have_posts() ) : the_post(); ?>
    <article class="session">
        <h2><a href="<?php the_permalink() ?>"><?php the_title(); 
            ?></a></h2>
        <div class="session-meta">
        <dl>
        <dt>Where</dt>
        <dd><?php echo get_post_meta($post->ID, ➥
             'conference_session_room', true); ?></dd>
        <dt>When</dt>
        <dd><?php echo get_post_meta($post->ID, ➥
             'conference_session_date', true); ?></dd>
        <?php if(taxonomy_exists('conference_topics')) { 
            echo get_the_term_list( $post->ID, 'conference_topics', ➥
           '<dt>Topics</dt><dd>', ', ', '</dd>' ); 
             } ?>
        </dl>
        </div>
        <?php the_excerpt(); ?>
    </article>
<?php endwhile; ?>
<?php twentyeleven_content_nav( 'nav-below' ); ?>
Ifthere’ snothing todisplay ,it’sprobably because we’re yettopost anysessions, sowe’ll show a
message tothateffect:
<?php else : ?>
    <article id="post-0" class="post no-results not-found">
        <header class="entry-header">
            <h1 class="entry-title">Watch this space!</h1>99 Post Types
        </header><!-- .entry-header -->
        <div class="entry-content">
            <p>We've yet to post any sessions, but if you
               subscribe to our newsletter you'll be the first 
               to find out!</p>
            <?php get_search_form(); ?>
        </div><!-- .entry-content -->
    </article><!-- #post-0 -->
<?php endif; ?>
Once youhave your templates sorted, your custom post modifications arecomplete!
You’re Custom-r eady
AsWordPress evolved, andasitspopularity grew ,users found themselves dealing with somuch
more than amere blogging tool. Before wehadthiskind ofsupport forcustom content types, entire
cottage industries grew uparound hacking andbending WordPress toawebmaster’ swill. Nowadays,
powerful CMS features arewell within ourreach, andinthischapter we’ve shown youjusthow
easy itistostart creating your own powerful CMS features.
Ahuge slice oftheworld’ smost popular websites isWordPress-powered, andalarge reason for
thatsuccess isdown tothefactthatdevelopers have lettheir imaginations grow beyond simple
posts andpages. It’stime foryoutodothesame!The W ordPress Anthology 100
Chapter5
Plugins
WordPress’ score functionality isproven, tested, andthoroughly maintained bythecore committers
atAutomattic, andthroughout therestoftheWordPress community .However ,while core WordPress
provides youwith theprimary tools youneed tomanage awebsite—such asadding, modifying and
deleting pages andposts, managing users, andother basic functions foramodern website—most
sites need more functionality tobetruly useful totheenduser.Tomeet thisneed, WordPress offers
plugins, astandard way tointroduce additional functionality outside thescope ofcore WordPress
toextend itforjustabout anypurpose.
Intruth, theease with which users canaddplugins toWordPress, along with thesimple mechanisms
available todevelopers forcreating plugins, hascontributed tomaking WordPress themost popular
CMS ontheWebtoday .Ifthere’ satask youwant toperform onyour website thatisn’t available
specifically within core WordPress, there’ sprobably aplugin forit.
The Basics
Plugins areincredibly powerful; they heighten thescope andfunctionality ofanyWordPress project,
butthey canalsocause many ofproblems onanygiven site. Forthatreason, it’simportant tocover
some basic information about plugins before wedive deep into thecode.
The Upside to Plugins
Plugins aresoeasy tofind andinstall. From right within thePlugins menu intheadmin area, you
cansearch for,browse, andinstall plugins thatarelisted—as seen inFigure 5.1—in theWordPress
Plugin Directory .1
Figur e 5.1. The W ordPress Plugin Dir ectory
Beware, though, thatnotallWordPress plugins arelisted within theWordPress Plugin Directory ,
butasanenduser seeking plugins, Google isagreat option foryou. Many premium, commonly
used plugins likeGravity Forms orShopp need tobepurchased separately andinstalled into your
WordPress installation through theUpload option.
Aside from their easy installation, there isabunch ofother useful aspects about plugins; forinstance:
■You’ll almost always beable tofind aplugin forwhat youarelooking toaccomplish.
■It’scommon tobeable tofind several plugins thatperform thesame task inadifferent way,
should youbeunhappy with theway aparticular plugin works.
■Plugins provide acertain level offuture-proofing insurance foryour site, because you’re able to
easily addthelatest functionality when new technologies arequickly embraced bythepublic.
The Downside to Plugins
While theupsides arefairly obvious, there’ sadarker side toplugins that’soften overlooked byend
users, butalltooapparent totheseasoned developer who’ shadtodeal with theaftermath. While
core WordPress isdeveloped, maintained, andvetted byateam oftrusted developers with core
commit privileges, theplugin space is,inmany ways, theequivalent oftheWildWest.
1http://wordpress.org/extend/plugins/The W ordPress Anthology 102
Onthemost fundamental level, plugins typically comprise nothing more than afewPHP functions
andpossibly some supporting JavaScript orCSS. Aswe’ll demonstrate injustabit,writing aplugin
andregistering itwith your WordPress installation isasimple process, butthequality ofthecode
therein isonly assolid andthought-out asthedeveloper chooses to(orisable to)make it.Reality
dictates thatthere areplugin developers allalong thetalent spectrum, ranging from beginners to
experts, and, naturally ,theproducts each developer produces directly corresponds totheir level
ofproficiency .Furthermore, plugins aretypically developed byeither onedeveloper orasmall
team oftwotothree working ontheproject. Things cangetmissed, andeverybody hasbaddays.
Inshort, there aresome poorly coded plugins outthere.
While nomethod is100% guaranteed, youcanlargely avoid poorly coded plugins bydoing your
homework onthem before youinstall them. Start bylooking attheoverall starranking ofaplu-
gin—these rankings aresubjective, butalarge enough sample user base willgiveyousome reasonable
expectations. Youcanalsolook atthediscussion about theplugin right from theplugin’ scomments
section: seeifthere have been complaints about theplugin (and ifyouaresoinclined, trytomake
ajudgment astohow relevant those complaints are). Another tried-and-tested way tocheck out
plugins before installing istosimply google them andseewhat’ sbeen said about them. And, of
course, even ahighly rated plugin canbeproblematic ifithasn’t been inproduction forsome time,
andwaslastcompatible with anolder WordPress version than youhappen toberunning.
Justwhat aresome oftheissues thatcome upwith plugins? There isalitany ,buthere areafew
common problems:
■Aportion ofplugins usedeprecated action hooks thateither arenolonger inuse, orareinthe
process ofbeing phased outofcore WordPress.
■Some plugins have poor naming conventions thatconflict with other active plugins, thus creating
unexpected results onthesite.
■Occasionally ,aplugin simply isn’t coded correctly ,soitjustfails towork.
Another issue with many plugins—especially those intheWordPress Plugin Directory—is that
since most ofthem arecreated bynon-compensated developers intheir spare time, youmay not
receive prompt technical support when theneed arises; thisfacthasalmost single-handedly driven
thepopularity ofthepremium WordPress plugin market, where tech support ismore widespread.
Rules to Follow When Using Plugins
Withallofthatsaid, plugins areessential tobending WordPress toyour will; it’sjustnecessary to
keep afewguidelines inmind when using them. Asanenduser,follow these twotipsandyou’ll
befine:103 Plugins
Only usewhat youneed
Every time youaddanew plugin toWordPress, youareintroducing anew setofPHP functions
thataredesigned toperform tasks. Bydefinition, adding PHP functions toawebsite adds pro-
gramming thatmakes your WordPress installation alittle more complex, andcreates potential
tripping points forproblems tooccur down thetrack. It’sactually alotlikeinstalling andrunning
software programs onyour computer: themore programs youhave running atanyonetime,
theslower your computer may run, especially ifsome ofthose programs arepoorly puttogether .
Inthisway,running superfluous plugins possibly increases your site’sexecution time, thus
slowing itdown. Given thatsearch engines factor sitespeed asapartoftheir ranking algorithms,
that’spotentially asensitive issue.
Deactivate ordelete what’ snotbeing used
It’sacorollary totherule above, butwhen unused plugins arekept active, it’scommon tosee
conflicts crop uplater onwith other plugins (orthemes), should youmake achange tothem.
Yourbest practice isto—at thevery least—keep unused plugins deactivated.
Must-use Plugins
Worth mentioning aswell aremust-use plugins ,which comprise anunderutilized butextremely
useful technique forworking with plugins. Must-use plugins arehandy fordevelopers who want
toaddplugins toaWordPress installation inaway thatmakes them more difficult forendusers to
deactivate. There’ snothing particularly special about must-use plugins themselves—any plugin
canbeamust-use plugin. What’ sunique ishow andwhere theplugins areinstalled. Instead of
being downloaded from theWordPress Plugin Directory (oruploaded from your computer system)
into thewp-content/plugins directory ,they must bemanually installed viaFTP oryour web host’ s
control panel intothewp-content/mu-plugins directory .This directory does notexist bydefault—you’ll
need tocreate it—but when WordPress sees thatit’sthere, itwill automatically activate andload
anyplugin itfinds therein.
Must-use plugins have several special properties intheway thatthey’re handled byWordPress:
■Youcan’t justdrop aplugin subdirectory into wp-content/mu-plugins .Must-use plugins either
need tobeindividual PHP files inthedirectory ,orthey need tohave aPHP include filepointing
tothesubdirectory thattheplugin issitting in.
■Ifaplugin isloaded asamust-use plugin, there’ snoneed toactivate it—it’ salways on.This is
useful todevelopers when they want toensure thataclient does notremove aparticular plugin.
■WordPress won’t notify youwhen amust-use plugin hasanupdate. Instead, you’ll need to
manage updates manually …ornot.This canbeuseful when youwant tocontinue using an
older version ofaplugin foranyreason.The W ordPress Anthology 104
■Must-use plugins areloaded byPHP before allstandard plugins, soAPIhooks added inamust-
useplugin will apply toallother plugins.
Deactivation Can Be a Solution
When you’re running awebsite onWordPress andyoubegin toexperience problems, start by
looking atyour plugins andusethiselimination technique. Deactivate allyour plugins, andcheck
toseewhether your problem stillexists onthewebsite. Ifitdoes, youcanbereasonably certain
thattheissue iseither coming from within your content orwithin theWordPress core installation
itself (it’srare, butitdoes happen).
It’scommon, however ,fortheissue toresolve itself after thedeactivation ofallyour plugins. From
here, reactivate your plugins onebyone, starting with themost important plugins necessary for
your sitetofunction properly .Sooner orlater,you’ll locate theoffending plugin, where youcan
then seek analternate solution tomanaging thatpiece offunctionality onyour site.
Zip It
When you’re troubleshooting WordPress byremoving plugins, remember thatmust-use plugins
won’t show upinthemain plugins listing. Unless youphysically remove must-use plugins from
thewp-content/mu-plugins directory ,those plugins will beactive andloading their functions into
your WordPress environment. Ifyouforget toremove them, youcanfoilyour own divide-and-
conquer trouble-shooting technique thatwedescribed above. Ahandy technique istozipallyour
plugins upinto azipfileoratarfileonyour server forsafekeeping, andthen delete theruntime
files. Once you’re done troubleshooting, youcanrestore your ziportarfile,restoring your plugins
totheir original state.
Drop-in Plugins
Another special type ofplugin isadrop-in plugin. Drop-in plugins replace entire portions of
WordPress core functionality .They arespecifically named files thatyoucancreate andcustomize,
andmust belocated within thewp-content/ directory .Acomplete listing ofdrop-in plugins canbe
found inTable 5.1,along with thecontext (single WordPress installation orWordPress Multisite
installation) inwhich each isappropriate.105 Plugins
Table 5.1. Dr op-in plugin availability chart
Context Description Drop-in Plugin Name
Single Advanced caching plugin advanced-cache.php
Single Custom database class db.php
Single Custom database err or message db-error .php
Single Custom installation script install.php
Single Custom maintenance message maintenance.php
Single External object cache object-cache.php
Multisite Advanced domain mapping sunrise.php
Multisite Custom blog deleted message blog-deleted.php
Multisite Custom blog inactive message blog-inactive.php
Multisite Custom blog suspended message blog-suspended.php
Determining When to Cr eate a New Plugin
Whether you’re adeveloper oranenduser,askyourself whether it’snecessary todevelop (orcontract
outthedevelopment of)aplugin before youbegin thework. There areliterally dozens ofways to
domany common programming tasks within WordPress, andwith theprolific useoftheplatform,
it’srarethatyou’d becreating aplugin thatnobody elsehasattempted todobefore you. Whether
searching intheWordPress Plugin Directory orGoogle, youareapttofind several solutions that
meet your needs. Intheevent thatyou’re unable tofind asuitable plugin solution, sometimes the
creative useofseveral plugins canaccomplish your goal equally aswell.
While many ofusinthedevelopment community cutourteeth onwriting every single lineofcode
ourselves, you’ll often find thatothers who’ve tackled thesame problems before ushave created
scripts with more fleshed outandbetter interfaces than we’d manage—at least, notwithout asigni-
ficant investment oftime andeffort onourown. Usetheopen-source community; it’sthere tohelp
you. Ifafter anexhaustive search youstillfind thatnoexisting plugin meets your needs, oryou
have anextremely specific piece offunctionality that’sunique toyour application, byallmeans
knock yourself out!
Can I see your license?
Ifyouchoose tomodify anexisting plugin, youwill need topayattention tothesoftware license
associated with it.Ifyou’re modifying aplugin fortheplugin directory ,make sure ithasaGPLv2
license, which allows anyuser tomodify andreuse code solong asanattribution isgiven toits
original author .The W ordPress Anthology 106
Debugging Y our Plugin As Y ou Go
None ofusareperfect, andexperienced plugin developers will testify thatdebugging your plugin
asyoudevelop itisjustafactoflife.While there areseveral techniques youcanusetodebug your
code, themost fundamental istogointoyour wp-config.php fileinyour sandbox WordPress install-
ation andensure you’ve enabledWP_DEBUG ,sothatitappears inyour code asfollows:
define('WP_DEBUG', true);
This will automatically make WordPress spitoutanyPHP warnings ornotices thatyou’ll need to
beaware ofinorder tocorrect, displaying them inrealtime asthey happen. Furthermore, ifyou’re
going tobemodifying anyofWordPress’ sbuilt-in JavaScript, make sure youenableSCRIPT_DEBUG
aswell, sothatitappears inwp-config.php asfollows:
define('SCRIPT_DEBUG', true);
Inthesame way asWP_DEBUG ,SCRIPT_DEBUG willdisplay JavaScript issues inrealtime asthey occur .
Now thatwe’ve addressed thebasics ofwhat plugins are,how they’re installed, what tobecareful
ofwhen youusethem, andwhen toactually create oneyourself, let’sgetourhands dirty andpick
them apart. Upwards andonwards!
The Anatomy of a Plugin
Conceptually ,every plugin isbroken upinto twobasic pieces:
■thewrapper ,orpackaging, which tells WordPress thatitis,indeed, avalid plugin
■thescripting thatmakes theplugin actually perform auseful task
Let’sinvestigate thewrapper component ofaplugin first.
Standar d Plugin P ackaging
WordPress provides uswith astandardized place tokeep alltheplugins within aparticular
WordPress installation: thewp-content/plugins directory .Because allplugins arestored inthesame
location, your plugin must have aunique name, lestitcause anerror asWordPress attempts to
initialize itupon running. This unique name should bebuilt right into themain PHP fileforthe
plugin thatwill liveinthewp-content/plugins directory ,orinthename ofthedirectory thatwill
house theprimary plugin PHP file.While technically allaplugin needs tofunction isjustone
properly formatted PHP file,it’sgenerally considered best practice togive each plugin itsown dir-
ectory ,storing allfiles associated with theplugin within subdirectories therein. Atthevery topof
ourprimary PHP fileforourplugin, we’ll addastandard identifying WordPress plugin header .We107 Plugins
introduced theconcept oftheplugin header briefly back inthesection called “Creating YourFirst
Custom Post Types” inChapter 4,butit’sworth going into more detail here:
chapter_05/standard-header .php
<?php
/*
Plugin Name: The Name of Your Plugin Here
Plugin URI: Link to the Home page for the Plugin
Description: Brief descriptive text for the Plugin 
Version: What Version is the Plugin
Author: Author Name
Author URI: Author Home page
*/
Theonly required lineinthisheader isthePlugin Name ,buttherestoftheinformation isextremely
important, andWordPress willusetheinformation within thisheader when initializing your plugin
foruse.Aside from verifying thatitisavalid WordPress plugin file,WordPress gathers theinform-
ation about theplugin inthisheader foryour users toview intheManage Plugins screen, asshown
inFigure 5.2.
Figur e 5.2. The Manage Plugins  screen
Making sure thatyouinclude correct, up-to-date information about who theplugin iswritten by
andwhere users cangoforupdates ensures itsusefulness over time. Additionally ,youshould make
sure toinclude licensing information about theplugin. Most plugins areGPL-compatible, andindeed
must besoifthey aretobeincluded within theWordPress Plugin Directory (more onthatinthe
section called “The WordPress Plugin Directory” ).Licensing information should directly follow
your header information. Standard GPL licensing (with dummy textinserted forcopyright year,
plugin author name, andplugin author email) looks likethis:
chapter_05/standard-gpl-license.php
<?php
/*  Copyright YEAR  PLUGIN_AUTHOR_NAME(email : PLUGIN AUTHOR EMAIL)
    This program is free software; you can redistribute it and/or 
    modify it under the terms of the GNU General Public License as 
    published by the Free Software Foundation; either version 2 
    of the License, or (at your option) any later version.The W ordPress Anthology 108
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
    You should have received a copy of the GNU General Public 
    License along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  
    02110-1301  USA
*/
While itiscustomary toinsert theplugin license directly underneath theplugin header ,it’salso a
nice idea toinclude itinatextfilecalled license.txt within theplugin directory .Anadditional (and
completely optional) step istoinclude areadme.txt filewith your plugin, toprovide anybasic in-
formation orfrequently asked questions toyour plugin users thatyoumight deem useful, butthat’s
entirely uptoyou.
That’ spretty much allweneed todoinorder tosetupaplugin inthecorrect format sothat
WordPress canrecognize it.Now’ swhen thefunbegins, andwecanactually start doing something
genuinely useful.
Action Hooks and Filter Hooks
Weknow thatWordPress isacollection ofPHP scripts thatexecutes functions inaspecific order ,
creating anendresult thatessentially comprises ourwebsite. One way tovisualize theway core
WordPress works istothink ofitasaconveyor beltthatmoves through aspecific process toget
from point Atopoint B,producing awebsite asitsendproduct. There’ snoblack magic here, but
rather anassembly lineofPHP functions thatmoves information indifferent directions, depending
onasetofpredefined rules.
When wewrite plugins, what wearereally doing isintroducing new PHP functions thataddtothe
predetermined rules WordPress hasalready given us.Tomake thathappen, WordPress hasbeen
good enough tocreate aspecial setofPHP functions thatgive ustheability toconnect with that
conveyor beltinthespecific place itisappropriate todoso.These functions arecalled hooks ,and
they aretheessential tools weneed tobeable totake ourgreat new ideas andlatch them into
WordPress inaway thatmakes them useful toourusers. Twohooks exist: Action hooks andfilter
hooks.
Action hooks areused when specific events take place within WordPress’ sexecution process. For
instance, ifyou’d liketoaddsome inline CSS code into theheader ofapage template, youcould
usethewp_head() action hook todoso,executing your function tocreate theappropriate lines of
code when thewp_head() function isruninthestandard assembly lineofWordPress core functions.
Aproperly formatted action hook callfollows thisformat:109 Plugins
<?php add_action( hook, function, priority, accepted_arguments ); ?>
Where theparameters areequivalent to:
■hook (string): theaction hook touse(required)
■function (string): thename ofyour function toadd(required)
■priority (arguments): thepriority inwhich thefunction should berun(optional, anddefaults
to10)
■accepted_arguments (arguments): thenumber ofarguments thedefined function canaccept
(optional, anddefaults to1)
Let’sconsider oursimple CSS insertion example above, andseewhat thatcode might look like:
action-example.php
<?php
function inline_css() { ?>
<style type="text/css"  >
  .mockingbird {padding-top:15px;}
  .mockingbird .famous {display:block;padding:1em;}
  .mockingbird .famous p.label_title {font-size:12px;font-weight:bold;
     display:block;margin-bottom:5px;}
  .mockingbird .famous label.no_bold {font-weight:normal;}
</style>
<?php }
add_action( 'wp_head', 'inline_css' );
?>
Easy stuff, right? We’ve justcreated ashort function calledinline_css() containing some CSS
code thatdefines styles foraclass calledmockingbird ,aswell asasubclass thatdefines what a
famous mockingbird might look like. Then, using ouradd_action() function, weemploy the
wp_head() action hook toaddthecode inthisfunction totheheader ofourWordPress page; this
iswhen events occur thatareassociated with thewp_head action hook.
There aremany action hooks available tolatch into ourWordPress assembly lineprocess where
wewant to,buthere aresome thataremore commonly used:
■wp_head :triggered inthe<head> section oftheloaded theme
■wp_footer —triggered inthefooter oftheloaded themeThe W ordPress Anthology 110
■init—triggered after WordPress hasfinished loading, butbefore anyheaders aresent; excellent
place tointercept $_GET and$_POST HTML requests
■admin_init —same asinit ,butruns only onadmin Dashboard pages
■admin_head —triggered inthe<head> section oftheadmin Dashboard
■user_register —triggered whenever anew user isregistered
■publish_post —triggered whenever anew post ispublished
■comment_post —triggered whenever anew comment isposted
Where action hooks areused toexecute functions atacertain time during theWordPress assembly
lineprocess, filter hooks ,areused when youwant tomodify information before saving ittoa
database oroutputting ittoabrowser; they’re typically used when modifying textinsome way,
shape, orform. Theclassic example ofafilter would beincensoring outprofane language thatyour
users might trytoaddtopages orposts onyour site.Inthisinstance, youmight apply aPHP function
toaspecific filtering hook such asthe_content ,sothatyoucanremove words such asputz, dumdum
head, ordimwit with astandard phrase like[mean name]. Let’stake apeek atwhat anexample of
thePHP function andtheassociated filter might look likeinthisinstance:
chapter_05/filter-example.php
<?php
function play_nice($content) {
  $mean_words = array("putz","dumdum head","dimwit");
  $content=str_ireplace($mean_words,'[mean name]',$content);
  return $content;
}
add_filter ('the_content', 'play_nice');
?>
Here, we’ve written alittle function thatidentifies andreplaces words thatwewant toomit. Then,
we’ve added ourfilter ,instructing WordPress toruneverything thatgoes throughthe_content (our
filter hook) through ourfunction, thus ensuring nobody cancallanybody elseadimwit.
You Say P o-TAY-to, I Say P o-TAH-to
Didyounotice thatthesyntax ofthefilter hook inourexample above looks awhole lotlikethe
syntax foraproperly formatted action hook? There’ sgood reason: while filter hooks andaction
hooks serve very different purposes, theadd_action() andadd_filter() functions have
identical syntaxes andtake parameters inidentical ways. Intruth, youcanreally view the
add_filter() function asamechanism tokeep concepts straight inyour mind, andkeep yourself111 Plugins
(and other programmers working onyour code) sane when trying tofigure outexactly what and
how itworks.
The P ower of P aranoia: Data V alidation
Asmuch asweallliketobetrusting, thetruth isthatevery room hasashadow ortwo, andsometimes
badthings lurk intheshadows. And ifwehave auser who tries tocallanother user adumdum
head onourpublic website foralltosee,maybe they’ll want todoworse! There’ spower inparanoia,
kids, andforthisreason youalways need tobecertain tovalidate andsanitize your data.
Much likebrushing your teeth and(wetrust) showering with soap every morning, data validation
andsanitization should betreated asahabit every time youeither output toabrowser orsave to
your database. Essentially ,what youwant todohere isscrub every piece ofdata youcanthatis
coming from alocation external toyour own code, asitmay have illegal characters orgenuine
malicious intent.
WordPress gives usastandardized setofescaping functions wecanusetoscrub ourdata andensure
it’ssafeforouruse. Consider Figure 5.3,which describes theWordPress escaping API.
Figur e 5.3. W ordPress escaping API
Inthisdiagram, weseethatthere arethree components tothefunction set,asdescribed following:
1.esc:theprefix fortheescaping function
2.attr :thecontext being escaped, with possible values including:
attr—HTML attribute scrubbing ■
■js—JavaScript scrubbing
■html :HTML character scrubbing such as<,>,',and"
■sql—MySQL query scrubbing
■url—URL scrubbing
■url_raw :URL scrubbing before saving toadatabase
3._e:anoptional translation suffix, with possible values including:
__:returns atranslated value ■
■_e:echoes atranslated value
Forexample, inorder toremove anyHTML tagsfrom atextstring, youwould usethisformat:The W ordPress Anthology 112
<?php esc_html( $text ); ?>
Alternatively ,ifyouwere looking toescape anyillegal characters from within anHTML attribute,
youmight code this:
<input type=”text” name=”name” value=”<?php echo esc_attr($text); ?>”>
Formore information ondata validation, take alook attheWordPress Codex.2
Leave It Till Last
When youarevalidating andsanitizing your data, make sure youdoitaslateasyoupossibly can
before outputting itorsaving ittoyour database. Running your validation tooearly willleave your
data susceptible toanyerrors orvulnerabilities introduced incode that’srunafter thevalidation
hasbeen complete, potentially causing issues. And nobody wants that.
Okay ,we’ll avoid acting likeaparent here andbeating thisinto theground, butseriously: don’t be
aningrate, remember tovalidate!
Dissecting a Plugin: Antelope Gener al
Social Media Links
Forthepurpose ofillustrating how allthepieces ofanygiven plugin work inpractice, we’ll usean
example ofafictitious plugin created especially foryouandthisbook: Antelope General Social
Media Links (orAGSocialMedia, forshort). AGSocialMedia isasimple plugin thatwill show us
how todosome basic butuseful tasks, such as:
■create aplugin settings screen inside WordPress thatletsusupdate andmanage links toour
four favorite social media sites: Facebook, Twitter ,YouTube, andLinkedIn
■addaSettings linkintheplugin management screen thattakes usdirectly totheaforementioned
plugin settings page
■addasimple widget thatletsusintegrate oursocial media links wherever andhowever wewant
onourWordPress site
Ofcourse, it’snotreally afictitious plugin; inactuality ,itworks quite well andyoucanfeelfree
touseitorextend itforyourself. After all,it’sbeing presented toyoubyusunder theGPL license,
andyoucanfind thecode inthisbook’ scode archive.
2http://codex.wordpress.org/Data_V alidation113 Plugins
Keeping Our Eye on the Prize
Thepurpose ofthissection isnottoteach youhow tocode PHP—we’ll assume youhave aworking
knowledge ofthat. Rather ,thepurpose ofthisdemonstration istoillustrate how your PHP code
will interact with thevarious hooks andfilters thatconnect your script toWordPress andmake all
themagic happen.
We’llbegin ourexamination ofAGSocialMedia bylooking atthecode fortheentire plugin, and
then pick itapart limb bylimb:
chapter_05/AGSocialMedia/antelope-social-media-links.php
<?php
/*
Plugin Name: Antelope General Social Media Links
Plugin URI: http://mickolinik.com/plugins/antelope-social-media-links
Description: Easily add links to your social media profiles
Version: 1.0
Author: Mick Olinik
Author URI: http://www.mickolinik.com
*/
/*  Copyright 2011  Mick Olinik  (email : mick@rockstarcoding.com)
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA
*/
//load textdomain for localization settings
load_plugin_textdomain('agsml', false, basename( dirname( __FILE__ ) ) . ➥
  '/languages' );
add_action('admin_menu', 'agsml_create_menu');
function agsml_create_menu() {
  //create new top-level menu
  add_options_page('Antelope General Social Media Links', ➥The W ordPress Anthology 114
   'AG Social Media Links', 'manage_options', __FILE__, 'agsml_settings_page');
  add_filter( "plugin_action_links", "agsml_settings_link", 10, 2 );
  //call register settings function
  add_action( 'admin_init', 'agsml_register_settings' );
}
//add settings link to plugins list
function agsml_settings_link($links, $file) {
  static $this_plugin;
  if (!$this_plugin) $this_plugin = plugin_basename(__FILE__);
  if ($file == $this_plugin){
    $settings_link = '<a href="options-general.php?page=AGSocialMedia/ ➥
      antelope-social-media-links.php">'.__("Settings", "agsml_social_media"). ➥
      '</a>';
    array_unshift($links, $settings_link);
  }
  return $links;
  }
function agsml_register_settings() {
  //register our settings
  register_setting( 'antelope_social_group', 'agsml_facebook' );
  register_setting( 'antelope_social_group', 'agsml_twitter' );
  register_setting( 'antelope_social_group', 'agsml_youtube' );
  register_setting( 'antelope_social_group', 'agsml_linkedin' );
}
//create css for admin screen
function agsml_admin_css() { ?>
<style type="text/css"  >
.agsml_social_list {padding-top:15px;}
.agsml_social_list .setting {display:block;padding:1em;}
.agsml_social_list .setting p.label_title {font-size:12px;font-weight:bold;
  display:block;margin-bottom:5px;}
.agsml_social_list .setting label.no_bold {font-weight:normal;}
.agsml_social_list .setting label span.slim {width:200px;float:left;
  display:block;margin: 1px;padding: 3px;}
.agsml_social_list .setting p.desc {font-size:10px;font-style:italic;
  text-indent:10px; text-align:left;}
</style>
<?php }
add_action('admin_head', 'agsml_admin_css');
//html for settings form
function agsml_settings_page() { ?>
<div class="wrap agsml_social_list">115 Plugins
  <h2>Antelope General Social Media Links</h2>
  <form method="post" action="options.php">
    <?php settings_fields( 'antelope_social_group' ); ?>
        <div class="setting">
        <p class="label_title"><?php _e('Facebook Profile URL:', 'agsml') ?></p>
        <p><label class="no_bold" for="agsml_facebook">
           <span class="slim"><?php _e('Facebook URL', 'agsml')
           ?></span>
        <input name="agsml_facebook" type="text" id="agsml_facebook"
           value="<?php form_option('agsml_facebook'); ?>" /></label></p>
        <p class="desc"><?php _e('Enter the URL to your Facebook profile.')
           ?></p>
        <p class="label_title"><?php _e('Twitter Profile URL:', 'agsml') ?></p>
        <p><label class="no_bold" for="agsml_twitter">
           <span class="slim"><?php _e('Twitter URL', 'agsml')
           ?></span>
        <input name="agsml_twitter" type="text" id="agsml_twitter"
           value="<?php form_option('agsml_twitter'); ?>" /></label>
        </p>
        <p class="desc"><?php _e('Enter the URL to your Twitter profile.')
           ?></p>     
        
        <p class="label_title"><?php _e('YouTube Profile URL:', 'agsml')
           ?></p>
        <p><label class="no_bold" for="agsml_youtube"><span class="slim">
           <?php _e('YouTube URL', 'agsml') ?></span>
        <input name="agsml_youtube" type="text" id="agsml_youtube" 
           value="<?php form_option('agsml_youtube'); ?>" /></label></p>
        <p class="desc"><?php _e('Enter the URL to your YouTube profile.')
           ?></p>
        <p class="label_title"><?php _e('LinkedIn Profile URL:', 'agsml')
           ?></p>
        <p><label class="no_bold" for="agsml_linkedin"><span class="slim">
           <?php _e('LinkedIn URL', 'agsml') ?></span>
        <input name="agsml_linkedin" type="text" id="agsml_linkedin" 
           value="<?php form_option('agsml_linkedin'); ?>" /></label></p>
        <p class="desc"><?php _e('Enter the URL to your LinkedIn profile.', ➥
             'agsml') ?></p>             
        <p class="setting">
        <input type="submit" class="button-primary" value="<?php _e ➥
             ('Save Social Media Links', 'agsml') ?>" />
        </p>The W ordPress Anthology 116
        </div>
  </form>
</div>
<?php }
function agsml_enqueue_styles() {
  // url to stylesheet
  $agsml_css_url= WP_PLUGIN_URL . '/' . plugin_basename(dirname(__FILE__)) . ➥
    '/agsml-widget.css';
       
  //register and enqueue stylesheet
  wp_register_style('agsml_styles', $agsml_css_url);
  wp_enqueue_style( 'agsml_styles');
        
}
add_action( 'wp_print_styles', 'agsml_enqueue_styles' );
/* Register the widget */
function agsml_register_widget() {
  register_widget( 'Antelope_Widget' );
}
/* Begin Widget Class */
class Antelope_Widget extends WP_Widget {
/* Widget setup  */
function Antelope_Widget() {
  $widget_ops = array('classname' => 'agsml_widget', 'description' => ➥
     __( 'Your Social Media Links', 'agsml') );
  // The actual widget code goes here
  parent::WP_Widget( false, $name = 'AG Social Media Links', $widget_ops );
}
/* Display the widget  */
function widget( $args, $instance ) {
  //get widget arguments
  extract($args);
  //get widget title from instance variable
  $title = apply_filters('widget_title', $instance['title']);
 
  //insert before widget markup
  echo $before_widget;
  //if theres a title, echo it.117 Plugins
  if( $title ) 
  echo $before_title . $title . $after_title;
 
  //start list
  $social_list .= '<ul>';
  
  // define list
  if (get_option('agsml_facebook' )){ 
    $social_list .= '<li class="facebook"><a href="'. ➥
      get_option('agsml_facebook').'">' . __('Friend us on Facebook', 'agsml') . ➥
      '</a></li>';
  } 
  if (get_option('agsml_twitter' )){ 
    $social_list .= '<li class="twitter"><a href="'. ➥
      get_option('agsml_twitter').'">' . __('Follow us on Twitter', 'agsml') . ➥
      '</a></li>';
  }
  if (get_option('agsml_linkedin' )){ 
    $social_list .= '<li class="linkedin"><a href="'. ➥
      get_option('agsml_linkedin').'">' . __('Link us on LinkedIn', 'agsml') . ➥
      '</a></li>';
  }
  if (get_option('agsml_youtube' )){ 
    $social_list .= '<li class="youtube"><a href="'. ➥
       get_option('agsml_youtube').'">' . __('Watch us on Youtube', 'agsml') . ➥
       '</a></li>';
  }
  // end list
  $share_content .= '</ul>';
  //display assembled list
  echo $social_list;
 
  //insert before widget markup
  echo $after_widget;
}
/* Update the widget settings, just the title in this case  */
function update( $new_instance, $old_instance ) {
  $instance = $old_instance;
  $instance['title'] = strip_tags($new_instance['title']);
  return $instance;
}
//form to display in widget settings.  Allows user to set
//title of widget.
function form( $instance ) {
  $title = esc_attr($instance['title']);
     ?>The W ordPress Anthology 118
        <p>
          <label for="<?php echo $this->get_field_id('title'); ?>">
          <?php _e('Title:'); ?></label> 
          <input class="widefat" id="<?php echo $this->get_field_id('title');
            ?>" name="<?php echo $this->get_field_name('title'); ?>" 
            type="text" value="<?php echo $title; ?>" />
        </p>
        <?php 
}
}
/* Load the widget */
add_action( 'widgets_init', 'agsml_register_widget' );
?>
This isthemeat oftheplugin. The AGSocialMedia folder also includes several other directories and
files, including anexternal CSS filetoprovide essential styles forthewidget output, an/images
directory forthesocial media icons we’ll useinourplugin, anda/languages directory with a.pot
fileforlocalization purposes. We’lltouch onsome ofthese files inother areas ofthebook; fornow,
let’sjustfocus ontheactual plugin filedoing allthework.
Header and License
Let’stake alook atthatfirst chunk ofcode:
chapter_05/AGSocialMedia/agsml_header_license.php
<?php
/*
Plugin Name: Antelope General Social Media Links
Plugin URI: http://mickolinik.com/plugins/antelope-social-media-links
Description: Easily add links to your social media profiles
Version: 1.0
Author: Mick Olinik
Author URI: http://www.mickolinik.com
*/
/*  Copyright 2011  Mick Olinik  (email : mick@rockstarcoding.com)
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the119 Plugins
    GNU General Public License for more details.
    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/
Nothing tooexciting’ sgoing onhere, butthere’ sstuff weneed totake care ofanyway .Wehave our
standard WordPress header detailing exactly what thename oftheplugin is,what it’sfor,theversion,
who wrote it,andsoon.We’realso telling people what theterms ofuseare—will your endusers
need topromise youtheir firstborn child tousethisthing, oraretheterms ofuseeasy likethe
summer breeze? Letthegood people know whether it’sGPL orcommercial.
Version Contr ol
WordPress queues plugin data intheplugin repository based ontheinformation youprovide
within theheader ofyour plugin. Ifyoulistyour plugin inthePlugin Directory andforget toupdate
theversion number ,WordPress installations running your plugin won’t beprompted thatthere’ s
anupdate available. Nobody wants toseeyour efforts wasted likethat.
Localization Settings
Next comes thecode forourlocalization settings:
chapter_05/AGSocialMedia/agsml_localization.php
//load textdomain for localization settings
load_plugin_textdomain('agsml', false, basename( dirname( __FILE__ ) ) . ➥
  '/languages' );
Before wereally doanything inourplugin, weshould check toseewhether wehave alanguage
translation filethatmatches thelanguage thathasbeen setinwp-config.php .WordPress isbrought
toyouinEnglish bydefault, andmost plugins areaswell, butifwehave localized ourplugin (and
wehave), weenable ourusers theability toextend theplugin themselves bytranslating itinto a
language oftheir choice. Consider thefunction load_plugin_textdomain() ,which takes thethree
parameters described below:
load_plugin_textdomain( $domain, $abs_rel_path, $plugin_rel_path ) 
■$domain —aunique identifier assigned toyour custom translatable strings
■$abs_rel_path —an optional, deprecated function asofWordPress 2.7.Default ittofalse orjust
omit it;it’snothing toworry aboutThe W ordPress Anthology 120
■$plugin_rel_path —the relative path toyour translation keyfile.Ifyoufailtodefine thispath,
itwill default totheroot directory thatthefileisin.While thisisbydefinition anoptional
parameter ,it’sbestpractice tokeep your language translation files separate from your logic files,
soyou’ll usually want tospecify avalue here.
Amore detailed explanation oflocalization canbefound inChapter 11,butforourpurposes here,
we’re looking inthe/languages directory ofourplugin toseeifthere’ salanguage translation file
thatmatches thelanguage we’re running WordPress in(ifwe’re notrunning itinEnglish already).
Ifwefind amatch,load_plugin_textdomain() will grab allthetranslated textstrings andswap
them outfortheir counterparts; these counterparts aredefined within theplugin’ scode asitexecutes
andoutputs tothescreen.
Creating the Menu Item for the Settings  Page
Now matters become interesting. Let’slook atthisnext code block andbreak itdown into pieces:
chapter_05/AGSocialMedia/agsml_createadmin.php
add_action('admin_menu', 'agsml_create_menu');
function agsml_create_menu() {
  //create new top-level menu
  add_options_page('Antelope General Social Media Links', ➥
    'AG Social Media Links', 'manage_options', __FILE__, 'agsml_settings_page');
  add_filter( "plugin_action_links", "agsml_settings_link", 10, 2 );
  //call register settings function
  add_action( 'admin_init', 'agsml_register_settings' );
}
//add settings link to plugins list
function agsml_settings_link($links, $file) {
  static $this_plugin;
  if (!$this_plugin) $this_plugin = plugin_basename(__FILE__);
  if ($file == $this_plugin){
    $settings_link = '<a href="options-general.php?page=AGSocialMedia/ ➥
      antelope-social-media-links.php">'.__("Settings", "agsml_social_media"). ➥
      '</a>';
    array_unshift($links, $settings_link);
  }
  return $links;
}
function agsml_register_settings() {
  //register our settings
  register_setting( 'antelope_social_group', 'agsml_facebook' );
  register_setting( 'antelope_social_group', 'agsml_twitter' );121 Plugins
  register_setting( 'antelope_social_group', 'agsml_youtube' );
  register_setting( 'antelope_social_group', 'agsml_linkedin' );
}
Infull, what we’re doing here islaying thegroundwork forworking with ourplugin inside the
WordPress admin area. Let’sstart bylooking atthetopcode block:
chapter_05/AGSocialMedia/agsml_createadmin1.php
add_action('admin_menu', 'agsml_create_menu');
function agsml_create_menu() {
  //create new top-level menu
  add_options_page('Antelope General Social Media Links', ➥
    'AG Social Media Links', 'manage_options', __FILE__, 'agsml_settings_page');
  add_filter( "plugin_action_links", "agsml_settings_link", 10, 2 );
  //call register settings function
  add_action( 'admin_init', 'agsml_register_settings' );
}
Westart byfirstusing anaction hook, requesting thattheAdmin menu runtheagsml_create_menu()
function. And what does thatfunction do?Itutilizes theadd_options_page() function toaddthe
Antelope General Social Media Links plugin andlabel itAGSocial Media Links. Theother para-
meter ofinterest intheadd_options_page() function isagsml_settings_page ,which defines the
callback function tobeused thatdisplays thecontents ofthepage within thelink. We’llcover this
function further oninourexplanation.
It’s a Wr ap
WordPress provides easy wrapper functions thatallow developers toaddsublevel menu items to
theprimary top-level administrative menu items such asDashboard ,Posts ,Media ,Appearance ,Settings ,
andsoon.Formore information astohow toaddthem, have alook attheWordPress Codex.3
Thenext lineisanexample ofafilter hook, whereby wearecallingplugin_action_links() and
running itthrough theagsml_settings_link() function thatwe’ll explore inamoment. This filter
serves toinsert thefunction thatcreates thelink toourplugin settings page directly within the
Manage Plugins listing page, which isutilized bymany ofthenicer plugins.
Finally ,weuseanother action hook toinitialize theagsml_register_settings() function, which
we’ll usetosave ourdata directly tothewp_options table inourWordPress database. More onthis
shortly .
3http://codex.wordpress.org/Administration_Menus#Using_W rapper_FunctionsThe W ordPress Anthology 122
Let’slook atournext function:
chapter_05/AGSocialMedia/agsml_createadmin2.php
//add settings link to plugins list
function agsml_settings_link($links, $file) {
  static $this_plugin;
  if (!$this_plugin) $this_plugin = plugin_basename(__FILE__);
  if ($file == $this_plugin){
    $settings_link = '<a href="options-general.php?page=AGSocialMedia/ ➥
      antelope-social-media-links.php">'.__("Settings", ➥
      "simple-social-sharing").'</a>';
    array_unshift($links, $settings_link);
  }
  return $links;
}
This little code block justdefines thePHP code we’ll usetoactually create thelink andlabel that
we’ll insert into ourplugin settings page. This will beplaced directly within theManage Plugins
listing page, asdescribed previously inthefilter hook intheagsml_create_menu() function. This
isreally justPHP code, andthere’ snotmuch here thatinvolves WordPress.
Next upcomes ouragsml_register_settings() function:
chapter_05/AGSocialMedia/agsml_createadmin3.php
function agsml_register_settings() {
  //register our settings
  register_setting( 'antelope_social_group', 'agsml_facebook' );
  register_setting( 'antelope_social_group', 'agsml_twitter' );
  register_setting( 'antelope_social_group', 'agsml_youtube' );
  register_setting( 'antelope_social_group', 'agsml_linkedin' );
}
Here wego,back toWordPress functions. This isauseful spot todiscuss database considerations
when dealing with WordPress plugins.
When youareworking with WordPress plugins, you’ll almost always need tosave your data tothe
database atsome point. There aregenerally twoways todothis:
■Save your data tothewp_options table within your WordPress database.
■Create anew table within your WordPress database andsave your data there.
Space doesn’t allow ustocover thecreation ofnew tables forplugin data storage inthecontext of
thischapter; however ,bear inmind thatwhen yougointhisdirection, there’ll beseveral consider -
ations you’ll need tokeep inmind including initially setting thetable up,ensuring thatthere are
nonaming conflicts, anddeveloping amechanism tosafely remove thetable upon uninstall. With123 Plugins
thatsaid, unless your plugin isextremely specialized andcomplex, andrequires youtosave an
extensive quantity ofdata, you’ll typically usethefirstmethod andstore your data inthewp_options
table.
Theregister_setting() function isuseful fordefining thedata youwant tosave foryour plugin,
andtakes thefollowing parameters:
register_setting( $option_group, $option_name, $sanitize_callback )
■$option_group (string): asettings group name, typically used toidentify your plugin (required)
■$option_name (string): thename ofanoption tosanitize andsave (required)
■$sanitize_callback (string): acallback function thatsanitizes theoption’ svalue (optional)
Inourcase, ourintent isquite simple. Weonly really have four values wewant tosave with this
plugin, soweregister each ofthese with itsown unique name andtagitback toaunique group
name:antelope_social_group .Once we’ve done this, wehave ourframework inplace andwe’re
offtotheraces …what’ snext?
Styling the Admin  Screen
Check outtheCSS fileintheAGSocialMedia folder:
chapter_05/AGSocialMedia/agsml-widget.css
/* Antelope General Social Media Links */
.agsml_widget {
  overflow: hidden;
  padding: 0;
}
.agsml_widget ul {
  list-style-type:none;
  margin:0;
  padding:5px 0;
}
.agsml_widget ul li a{
  padding: 5px 10px 5px 20px;
  line-height:18px;
  margin:0;
}
.agsml_widget ul li {
  padding-bottom:5px;
}The W ordPress Anthology 124
.agsml_widget ul li.twitter a {
  background:url(images/mini_twitter.png) no-repeat left; 
  margin:0;
}
.agsml_widget ul li.facebook a {
  background:url(images/mini_facebook.png) no-repeat left; 
  margin:0;
}
.agsml_widget ul li.linkedin a {
  background:url(images/mini_linkedin.png) no-repeat left; 
  margin:0;
}
.agsml_widget ul li.youtube a {
  background:url(images/mini_youtube.png) no-repeat left; 
  margin:0;
}
Again, notawhole lottoseehere aside from demonstrating theaddition ofinternal CSS styles
within aplugin. We’rejustcreating afunction, inlaying some CSS forthepurpose ofstyling our
Admin page tomake itlook pretty ,andthen adding thefunction intorunwith theadmin_head action
hook. Atthispoint inthegame, we’ve seen thisstuff before; let’skeep moving.
Formatting for the Settings  Page
Following thiscomes achunk ofform-building HTML:
chapter_05/AGSocialMedia/agsml_settingspage.php
//html for settings form
function agsml_settings_page() { ?>
<div class="wrap agsml_social_list">
  <h2>Antelope General Social Media Links</h2>
  <form method="post" action="options.php">
    <?php settings_fields( 'antelope_social_group' ); ?>
      <div class="setting">
        <p class="label_title"><?php _e('Facebook Profile URL:', 'agsml') ?></p>
        <p><label class="no_bold" for="agsml_facebook"><span class="slim">
           <?php _e('Facebook URL', 'agsml') ?></span>
        <input name="agsml_facebook" type="text" id="agsml_facebook" 
            value="<?php form_option('agsml_facebook'); ?>" /></label></p>125 Plugins
        <p class="desc"><?php _e('Enter URL to your Facebook profile.') ?></p>
        <p class="label_title"><?php _e('Twitter Profile URL:', 'agsml') ?></p>
        <p><label class="no_bold" for="agsml_twitter"><span class="slim">
           <?php _e('Twitter URL', 'agsml') ?></span>
        <input name="agsml_twitter" type="text" id="agsml_twitter" 
           value="<?php form_option('agsml_twitter'); ?>" /></label></p>
        <p class="desc"><?php _e('Enter the URL to your Twitter profile.') ?></p>     
        
        <p class="label_title"><?php _e('YouTube Profile URL:', 'agsml') ?></p>
        <p><label class="no_bold" for="agsml_youtube"><span class="slim">
           <?php _e('YouTube URL', 'agsml') ?></span>
        <input name="agsml_youtube" type="text" id="agsml_youtube" 
            value="<?php form_option('agsml_youtube'); ?>" /></label></p>
        <p class="desc"><?php _e('Enter the URL to your YouTube profile.') ?></p>
        <p class="label_title"><?php _e('LinkedIn Profile URL:', 'agsml') ?></p>
        <p><label class="no_bold" for="agsml_linkedin"><span class="slim">
           <?php _e('LinkedIn URL', 'agsml') ?></span>
        <input name="agsml_linkedin" type="text" id="agsml_linkedin"  
           value="<?php form_option('agsml_linkedin'); ?>" /></label></p>
        <p class="desc"><?php _e('Enter the URL to your LinkedIn profile.', ➥
                          'agsml') ?>
        </p>             
        <p class="setting">
        <input type="submit" class="button-primary" 
           value="<?php _e('Save Social Media Links', 'agsml') ?>" />
        </p>
      </div>
  </form>
</div>
<?php }
There arethree main points inthiscode block worth noting. First, weseeourdefinition ofour
agsml_settings_page() function, which welastreferenced asthecallback function inour
add_options_page() function further back inthecode. Inother words, it’sthisfunction thatdefines
theinstructions fordisplaying allthecode forouractual Settings page intheAdmin menu.
Secondly ,since thisistheadministrative settings page output, itfollows thatwehave textstrings
here being displayed toourusers. Because wearethoughtful developers andwant tomake sure
thatfolks allover theworld areable touseourplugin intheir own native language, weneed to
prepare ourtextstrings forlocalization. This means thatinstead ofjusttyping inanoutput string
likethis:The W ordPress Anthology 126
<p class="label_title">LinkedIn Profile URL:</p> 
We’ve added our_e() wrapper tagsaround each ofourstrings toproduce results thatlook more
likethis:
<p class="label_title"><?php _e('LinkedIn Profile URL:', 'agsml') ?></p>
You’ll notice here thatwe’ve defined both thestring tobetranslated (inthisinstance, 'LinkedIn
Profile URL:' )aswell astheunique domain namespace we’ve created forourlocalization atthe
topofourcode (agsml ).Again, formore onlocalization, have alook atChapter 11.
Finally ,notice thatwe’ve taken care tosanitize thedata here before committing anything toour
database. Here, we’ve usedform_option() tooutput oursocial media values.form_option() runs
these values throughesc_attr() tosanitize them, ensuring thatthey aresafeforouruse.
Getting Output Styles Ready
This next piece ofcode isanexample oftheproper andsafeway toinsert anexternal CSS sheet
into your plugin:
chapter_05/AGSocialMedia/agsml_enqueuestyles.php
function agsml_enqueue_styles() {
  // url to stylesheet
  $agsml_css_url= WP_PLUGIN_URL . '/' . plugin_basename(dirname(__FILE__)) . ➥
    '/agsml-widget.css';
       
  //register and enqueue stylesheet
  wp_register_style('agsml_styles', $agsml_css_url);
  wp_enqueue_style( 'agsml_styles');
        
}
add_action( 'wp_print_styles', 'agsml_enqueue_styles' );
Wecreate afunction calledagsml_enqueue_styles() ,andthen define theURL totheCSS forour
widget tobedisplayed onthefront endofourwebsite, butthenext twofunctions arereally worth
taking note of.Rather than justinjecting thelink totheCSS sheet directly into the<head> section
ofyour WordPress site, enqueueing aWordPress CSS fileallows youtospecify dependencies that
tellWordPress your CSS depends onanother CSS file,andshould beloaded afterwards. While the
wp_register_style() function essentially serves asahelper function toprepare your data for
wp_enqueue_style() ,wp_enqueue_style() iswhere allthemagic happens. Ourexample isavery
simplified form ofwp_enqueue_style() ,andsointhesituation ofAGSocialMedia we’re really in-
cluding itforproper form, andtoprepare toextend theplugin later onifwesochoose.127 Plugins
Don’t For ce Your Design on Users
It’scommon toseeplugin authors trytohelp people outbyproviding styles within thecontext of
their plugins, essentially forcing user plugins tolook acertain way.While thethought isusually
well-intentioned, itcanbearealpain inthebehind forWordPress sitedevelopers trying touse
your plugin ontheir own sites, especially when their visual style differs markedly towhat you’ve
supplied. Instead ofcreating abevy ofstyles foryour users choose from when using your plugin,
make thechoice togominimal. Particularly ifyouareplanning onreleasing your plugin into the
WordPress Plugin Directory ,askyourself thisimportant question: “What’ stheleast amount ofCSS
Icansupply forthisfunctionality todisplay properly?” When youcome upwith ananswer ,add
only thatstyling, andtrytoerrontheside oflessismore. Ifyouwere toputaDoandaDon’t list
together forthis, think ofitthisway: Doprovide easy-to-use classes thatdesigners cangrab tostyle
your plugin tosuittheir own needs. Don’t trytoforce your own perception ofhow your plugin
should appear onto your endusers.
Widgets 1 01
Before wefurther continue tearing apart ourAntelope General Social Media Links plugin, let’stake
amoment totalkabout widgets andhow they work.
Useful fordragging different pieces offunctionality around tosidebars, footers, andother widgetized
areas onaWordPress site, widgets extend thefunctionality ofaplugin byallowing users toplace
itinanappropriate place ontheir websites. They’re notappropriate toaddtoallplugins, butin
thecase ofourAGSocialMedia plugin, they are,astheentire purpose oftheplugin istodisplay
icons andlinks toourfour most used social media sites: Facebook, Twitter ,LinkedIn, andYouTube.
Thanks tothewidget APIthatWordPress gives us,creating andusing widgets isn’t asdifficult as
itcould be.There arethree basic steps tocreating andusing awidget inyour plugin, broken down
asfollows:
1.registering your widget using theregister_widget() function
2.defining thewidget viatheWordPress-provided widget class, which we’ll touch onmore ina
moment
3.loading thewidget viathewidgets_init action hook
Tofurther understand how widgets work, let’slook briefly atthebasic structure ofthewidget class
inWordPress:
chapter_05/AGSocialMedia/widgetclass.php
<?php
class Antelope_Widget extends WP_Widget {
  function Antelope_Widget() {The W ordPress Anthology 128
    // actual widget code that contains the function logic
  }
  function widget($args, $instance) {
    // display the widget on website 
  }
  function update($new_instance, $old_instance) {
    // save widget options
  }
  function form($instance) {
    // form to display widget settings in WordPress admin
  }
}
?>
Asyoucansee,thewidget class contains four basic components:
■declaration ofthewidget name thatextends theWP_Widget object andthesubsequent initialization
ofthefunction ofthesame name (inthiscase,Antelope_Widget )
■logic thatactually outputs thewidget coding tothewebsite asdesired
■functionality thatallows youtocreate andsave instances ofthewidget
■aform thatallows users tomake changes tothewidget ifthedeveloper hasmade them available
intheWidgets management screen
Widgets Extend Classes
Ifyouarefairly new toprogramming andhave never dealt with objects andinstances before, widgets
might throw youabit.Here’ salayman’ sversion ofwhat youneed tounderstand. When youare
registering awidget, you’re essentially creating anobject ,which canbethought offorourpurposes
asatemplate framework forhow thatparticular widget should function andappear .Any given
working example ofthatwidget would then bereferred toasaninstance ofthewidget. Therefore,
when wetalkabout widgets, wearereally discussing twodifferent aspects: initializing thetemplate
forhow itwillwork (theobject), andcreating andoutputting individual instances thatyouactually
seeanduse. This may seem asclear asmud. It’llgeteasier .
Let’sbuild upon these definitions andtake upourAGSocialMedia plugin code where weleftoff:
setting upthewidget tooutput ourlinks.
Registering Our Antelope Gener al Widget
Check outourfirst piece ofwidget-related code:129 Plugins
chapter_05/AGSocialMedia/agsml_register widget.php
/* Register the widget */
function agsml_register_widget() {
  register_widget( 'Antelope_Widget' );
}
Thefirst piece here issuper -easy ,andit’sourfirst step increating andusing awidget forour
Antelope General Social Media Links plugin. We’rejustgoing toregister ourwidget sothatWordPress
knows wehave anew onecoming, andit’scalledAntelope_Widget .Easy peasy .
Define What the Widget Should Do
Now wejump into step twoofcreating ourwidget, which isreally step oneofitsown four-step
process: defining thewidget class functionality:
chapter_05/AGSocialMedia/agsml_widgetlogic.php
/* Begin Widget Class */
class Antelope_Widget extends WP_Widget {
  //* Widget setup  */
  function Antelope_Widget() {
    $widget_ops = array('classname' => 'agsml_widget', 'description' => ➥
       __( 'Your Social Media Links', 'agsml') );
  // The actual widget code goes here
    parent::WP_Widget( false, $name = 'AG Social Media Links', $widget_ops );
  }
Inthecode, youcanseethatwebegin byextending theWP_Widget object with theAntelope_Widget
class, thus extending itandcreating anamespace forourselves towork with. After that, wecreate
abasic localized array (note thedouble underscore wrapper thatencompasses thestring'Your
Social Media Links' andwhich denotes theunique domain namespace we’ve created earlier in
'agsml' )andtossitallinto avariable. Then weutilize thewidget APItocreate anew object for
ouractual widget, which we’ll beable tofind intheAppearance >Widgets menu area within
WordPress. Notice thatwehave alabel forourwidget here ('AG Social Media Links' ),andwe’re
also passing ourarray inaswell, sowehave ourobject’ sdata handy foruse.
Display Logic
Thesecond piece ofthewidget class involves actually outputting theinstance ofagiven widget to
thebrowser:The W ordPress Anthology 130
chapter_05/AGSocialMedia/agsml_widgetdisplay .php
/* Display the widget  */
function widget( $args, $instance ) {
  //get widget arguments
  extract($args);
  //get widget title from instance variable
  $title = apply_filters('widget_title', $instance['title']);
 
  //insert before widget markup
  echo $before_widget;
  //if theres a title, echo it.
  if( $title ) 
  echo $before_title . $title . $after_title;
 
  //start list
  $social_list .= '<ul>';
  
  // define list
  if (get_option('agsml_facebook' )){ 
    $social_list .= '<li class="facebook"><a href="'. ➥
      get_option('agsml_facebook').'">' . __('Friend us on Facebook', 'agsml') . ➥
      '</a></li>';
  } 
  if (get_option('agsml_twitter' )){ 
    $social_list .= '<li class="twitter"><a href="'. ➥
      get_option('agsml_twitter').'">' . __('Follow us on Twitter', 'agsml') . ➥
      '</a></li>';
  }
  if (get_option('agsml_linkedin' )){ 
    $social_list .= '<li class="linkedin"><a href="'. ➥
      get_option('agsml_linkedin').'">' . __('Link us on LinkedIn', 'agsml') . ➥
      '</a></li>';
  }
  if (get_option('agsml_youtube' )){ 
    $social_list .= '<li class="youtube"><a href="'. ➥
      get_option('agsml_youtube').'">' . __('Watch us on Youtube', 'agsml') . ➥
      '</a></li>';
  }
  // end list
  $share_content .= '</ul>';
  //display assembled list
  echo $social_list;
 
  //insert before widget markup131 Plugins
  echo $after_widget;
}
Because we’ve passed theobject’ sdata totheinstance ofthewidget asjustdescribed, thefirst step
istoextract the$args sothatwecanusethem. TheAGSocialMedia widget hasthecapacity to
create acustom title onaninstance-by-instance basis aswe’ll seeinamoment, sooneofthefirst
items here istheextraction andsanitization ofthetitle string from ourarray ,after which wedrop
itinto the$title variable.
Youmay notice thatthere areseveral variables sprinkled throughout thiscode block thatwearen’t
defining: $before_title ,$after_title ,$before_widget ,and$after_widget .These tagsare
provided toyoubythewidget API, andareavailable totheme designers tomanipulate indifferent
ways, sothatthey canaddcode tomake their websites look pretty .Make sure thetagsstay asposi-
tioned, sothose designers avoid running into anyunforeseen andunexpected surprises.
Aside from that, therestofthiscode isfairly self-explanatory .Because we’re outputting tothe
browser here, weonce again have strings thatarebeing localized inthesame format asbefore; it
doesn’t bear anymore explanation, butwhen youarewriting your own plugins, youwill want to
remember thisimportant detail. Spread theWordPress love bylocalizing—have younoticed this
asarecurring theme yet? Weshould make bumper stickers: “BeWiseandLocalize!”
Updating the Instance of the Widget
Thethird piece ofthewidget class isthenearest wehave toastandardized component, andit’s
very simple toseewhat’ shappening:
chapter_05/AGSocialMedia/agsml_widgetupdate.php
/* Update the widget settings, just the title in this case  */
function update( $new_instance, $old_instance ) {
  $instance = $old_instance;
  $instance['title'] = strip_tags($new_instance['title']);
  return $instance;
}
Allwearedoing here issanitizing theonly input wehave forourwidget—in thiscase thecustomized
title—and saving itasanew instance, replacing theoldinstance ifitexisted.
Creating the Form to Change the Title
Thefinal component ofthewidget class provides thelogic fortheform, which isnecessary toupdate
thetitle oftheinstance ofthewidget:The W ordPress Anthology 132
chapter_05/AGSocialMedia/agsml_widgetform.php
//form to display in widget settings.  Allows user to set title of widget.
function form( $instance ) {
  $title = esc_attr($instance['title']);
?>
<p>
  <label for="<?php echo $this->get_field_id('title'); ?>"><?php _e('Title:');
    ?></label> 
  <input class="widefat" id="<?php echo $this->get_field_id('title'); ?>"
    name="<?php echo $this->get_field_name('title'); ?>" type="text" 
    value="<?php echo $title; ?>" />
</p>
<?php 
}
}
Here wefind avery simple form with justonelabel (that includes ournow all-too-familiar localized
string) anditscorresponding input field, which autopopulates with theexisting title, ifonehas
been previously set.
Load Our Widget into W ordPress
Thefinal touches onourAntelope General Social Media Links plugin arefinally within ourgrasp:
chapter_05/AGSocialMedia/agsml_loadwidget.php
/* Load the widget */
add_action( 'widgets_init', 'agsml_register_widget' );
?>
Now allweneed todoisusewidgets_init toload upouragsml_register_widget() function.
After thisfunction fires, we’re home, andwhile most antelopes runoutofcontrol, ourantelope is
running with allthecontrolled precision wecould possibly hope for!
Taking Plugins Further
While we’ve pieced together anentire plugin bitbybit,we’ve only begun totouch onwhat youcan
dowith plugins. Intruth, theonly limit towhat youcanaccomplish with aplugin isyour imagin-
ation, asthere arethousands ofhooks towork with, andeven more standardized tools thatyoucan
usetocontinue topush theenvelope with WordPress. While itmade nosense toinclude them
within thecontext oftheAntelope General Social Media Links plugin example, there aretwopieces
offunctionality commonly implemented within plugins thatweshould cover: meta boxes and
shortcodes. Wewon’t gointo nearly asmuch depth oneither piece offunctionality ,butwe’ll look
atthem sothatyou’ll atleast beable tousethem. Let’sstart with abasic discussion ofmeta boxes.133 Plugins
Meta Boxes
Inmany plugins, you’ll want togive your endusers theability toaddinformation inastandardized
way right onthepage orpost editing screen. One way toaccomplish thisistoutilize meta boxes,
which welooked atback inthesection called “Meta Boxes” inChapter 2.Ifyourecall, meta boxes
arecustomized dialog boxes youcaninsert onadministrative editing screens, seen inFigure 5.4.
Figur e 5.4. Custom meta boxes
Meta boxes areadded using astandard function thattakes seven parameters, asshown below:
add_meta_box($id, $title, $callback, $page, $context, $priority, $callback_args) 
Each oftheparameters isdefined asfollows:
■$id(string): CSSidattribute forthemeta box(required)
■$title (string): thetitle displayed within theheader ofthemeta box(required)
■$callback (string): thename ofthefunction thatdisplays themeta boxinformation (required)
■$page (string): thetype ofpage thatyouwant themeta boxdisplayed on;forexample, post ,
page ,link ,orcustom_post_type ,wherecustom_post_type isthecustom post type slug (re-
quired)The W ordPress Anthology 134
■$context (string): thespecific area within theeditscreen ofwhere youwant themeta boxdis-
played, such asnormal ,advanced ,orside (optional)
■$priority (string): thepriority within thecontext where themeta boxshould bedisplayed,
such ashigh ,core ,default ,orlow(optional)
■$callback_args (array): arguments topass into your callback function (optional)
Theadd_meta_box() function istypically used inconjunction with theadmin_init action hook,
which youcanusetocreate your custom meta boxwithin page types associated with your plugin.
While most oftheparameters thatadd_meta_box() takes areself-explanatory ,there’ sacouple of
really cool ones thatmake thisaparticularly flexible function. Notably ,the$page parameter queues
upthetype ofpage thatyour meta boxcanbedisplayed on;because ittiesinto custom post types,
itgives youanadditional level ofcontrol when morphing WordPress intothespecialized CMS you
envision foryour website, asdescribed inChapter 4.The$context parameter isequally useful,
giving youcontrol over exactly where thatmeta boxwill show uponthepage type editing screen.
This issexy stuff thatletsyoucarve outWordPress tomake itlook andfunction however yousee
fit.
Shortcodes
Another extremely useful concept todiginto isshortcodes. Shortcodes areessentially sanitized
placeholders forPHP functions thatareeither initialized bycore WordPress, from within aplugin,
oreven from within thefunctions.php fileofyour theme. They canaccept parameters thatmake
them perform tasks, andarevery useful when youwant toinsert fairly complicated code into a
page orpost without actually inserting thatcode. Instead, youcanthink ofashortcode asaplace-
holder thatWordPress willidentify when outputting your website, replacing itwith theappropriate
code associated with theshortcode. They areformatted with opening andclosing brackets thatlook
likethis:[my_super_awesome_shortcode] .
Shortcodes areeasy tocreate, andforthemost partyoucanembed anyfunctionality youwant into
them. WordPress gives usthefollowing standard function tousewhen wewant tocreate one:
add_shortcode( 'shortcode-name', 'shortcode-function-name' )
Here, theparameters arestraightforward, with thename oftheshortcode (thetextweinsert inour
brackets) being defined within thefirst string parameter ,andtheassociated function thatcalls the
PHP function we’ll beexecuting where theshortcode isinserted inourpage. Let’stake alook ata
very simple example ofashortcode inaction:135 Plugins
chapter_05/shortcode-example.php
<?php
function thank_you() {
  return 'You can feel good about Hood.';
}
add_shortcode( 'mrminer', 'thank_you' );
?>
Here, wehave defined anextremely simple shortcode namedmrminer ,which makes reference to
afunction calledthank_you() .While youcanbeextremely creative andintricate with thefunction-
ality you’d liketointroduce inyour shortcode, we’ve kept itvery simple here toillustrate theprocess.
Inourexample, wecanaddtheshortcode [mrminer] toanypost orpage, andit’llprint out“You
can feel good about Hood.” inthatspace.
Return, Don’t Echo
Acommon mistake thatmany plugin developers make when they arebeginning towork with
shortcodes istotrytoecho theresults ofashortcode, rather thanreturn theresponse. Don’t sweat
it,though …now thatyou’ve read thistip,you’ll avoid thispitfall!
The W ordPress Plugin Dir ectory
Allright, solet’ssayyou’ve created aplugin andyouwant togive back tothecommunity bysharing
your creation with theworld. One oftheeasiest andmost effective ways ofdoing thatistosubmit
ittotheWordPress Plugin Directory onWordPress.org. There areseveral really cool things that
result from listing your plugin inthedirectory ,most notably thatitinstantly becomes accessible
toanybody who’ srunning aWordPress installation. Withjustafewclicks andtheright search,
your plugin cancome upintheplugin search andbeadded toanyone’ sWordPress siteinjusta
fewminutes. Additionally ,when youupdate your plugin inside thedirectory ,your users will be
immediately notified andprompted toupgrade from right within their WordPress admin back end
…andthatjustfeels socool thefirst time youever seeithappen with oneofyour plugins. Finally ,
WordPress.org also gives youaccess tostatistics, soyou’ll beable toseeexactly how many people
have downloaded your plugin andtheratings they’ve given it,aswell asview andrespond to
comments.
You’ll need toadhere toseveral blanket terms andconditions ifyouwant your plugin tobelisted
inthedirectory ,namely:
■Yourplugin should have alicense thatisGPL-compatible.
■Yourplugin can’t doanything illegal, orbemorally offensive inanyway.
■You’ll need tohost theplugin using theWordPress.org subversion repository .The W ordPress Anthology 136
■You’ll need avalid readme.txt fileforyour plugin.
■Yourplugin can’t embed anexternal link totheauthor’ ssitewithout giving theuser anoption
toeasily remove it.
Ifyouchoose tosubmit your plugin totheWordPress Plugin Directory ,it’saneasy process, even
though it’snotimmediate. You’ll need tobeaWordPress.org registered user,andthen yousubmit
your plugin athttp://www .WordPress.org/extend/plugins/add/ .Upon adding your plugin, itwill
need tobereviewed andapproved bythestaff managing WordPress; it’saprocess thatcantake
some time, asitismanual.
Upon having your plugin approved, youwill begiven access totheWordPress.org Subversion re-
pository ,where you’ll commit theuncompressed plugin totheSVN repository ,along with avalid
readme.txt filethatdescribes theinformation needed forlisting aplugin inthedirectory .Asample
readme.txt filecanbefound athttp://wordpress.org/extend/plugins/about/readme.txt ,andareadme
validator thatwill help youdetermine whether you’ve added therequired elements foralisting is
available athttp://www .WordPress.org/extend/plugins/about/validator/ .
Some Food for Thought
Few things areworse intheWordPress community than apoorly supported plugin, especially ifit
starts offwith ahead ofsteam andgains afollowing. Such plugins areoneofthereasons why
WordPress earned abadname inthepast, soweencourage youtogive some thought tohow com-
fortable youareinproviding areasonable level ofsupport toothers using your plugin. When you
submit aplugin totheWordPress Plugin Directory ,youreally aremaking aloose, implied agreement
toprovide abasic level ofsupport toothers who may useyour plugin; otherwise, releasing itinto
thedirectory makes little sense outside ofsatisfying your ego.Submitting your plugin tothedirectory
isachoice thatyouasthedeveloper canmake—it’ snotarequirement.
Plug In All the W ay
Plugins arepowerful pieces offunctionality ,andareessential inextending thefunctionality ofany
WordPress website. Poorly coded orout-of-date plugins areoneofthemost common reasons why
WordPress websites occasionally have problems, sotheeasiest place tobegin troubleshooting isto
turn offallyour plugins.
Ifyouareadeveloper ,youcanmake WordPress dobackflips with thecreative useofplugins (all
right, maybe notbackflips, butyoucould probably make itorder pizza foryou). Mastering action
hooks andfilter hooks areessential tomaking your plugins hum, butyou’ll need asolid foundation
inPHP tomake anything really go.Justremember ,ifyoucandream it,youcandoitwith plugins
inWordPress!137 Plugins

Chapter6
Themes
Well-designed content management systems seek tocreate aseparation between design, content,
andfunctionality ,andWordPress isnoexception. Sofarinthisbook, we’ve covered thefundamental
building blocks ofWordPress thatprimarily manage functionality: TheLoop, post types, andplugins.
Themes ,ontheother hand, comprise thestructural CSS, HTML, andJavaScript code thathandle
theoverall design, layout, andvisual user experience ofawebsite. Inother words, themes areall
about making your website look really good, andlessabout theprogramming thatdoes alltheheavy
lifting inthebackground. There areplenty ofconsiderations thatmuddy these waters, though, as
we’ll learn later inthechapter ,butforthetime being, let’sfocus onthebasics ofwhat goes into a
theme.
Basic Components of a Theme
Attheir core, themes arereally nothing more than theHTML code tocreate astructure thatdescribes
where different components will liveonawebsite, andtheCSS code thatdescribes what those
components will look like. Forthepurposes ofthischapter ,we’ll assume youhave asolid under -
standing ofboth HTML andCSS, andthatyouunderstand thefundamental components necessary
toconstruct asuccessful web page. It’svital thatyouunderstand how allthose pieces work together
within aWordPress theme.
Justlikewith plugins, WordPress provides uswith astandardized place tostore ourthemes within
aparticular WordPress installation: thewp-content/themes directory .Although only onetheme can
beactivated atanygiven time, WordPress does letyoustore asmany themes asyouliketoactivate
anddeactivate atyour leisure. Keeping with thesame pattern wesawwith plugins, themes must
have unique names andbestored intheir own unique directories within thewp-content/themes
directory .Sofar,sogood.
Requir ed Elements of a Theme
Now thatweknow where tosave thefiles within ourtheme, weneed tostart building those files.
While we’ll probably endupcreating several more files, wetechnically only require twofiles to
setupavalid theme:
■styles.css
■index.php
The styles.css fileisthemore crucial ofthetwo, andisthefirst filethatWordPress will look for
when itgathers information about your theme prior toactivation. Similar totheway inwhich it
recognizes plugins, WordPress searches forastandardized header atthevery topofthestyles.css
filetogather pertinent information about your theme. Since wewon’t becreating ourown full-
blown theme here within thischapter ,let’stake alook athow theteam over atWordPress.org has
done itwith their latest andgreatest theme, Twenty Eleven:
chapter_06/twenty-eleven-styles-header .php
/*
Theme Name: Twenty Eleven
Theme URI: http://wordpress.org/extend/themes/twentyeleven
Author: the WordPress team
Author URI: http://wordpress.org/
Description: The 2011 theme for WordPress is sophisticated, lightweight, and 
  adaptable. Make it yours with a custom menu, header image, and background -- 
  then go further with available theme options for light or dark color scheme, 
  custom link colors, and three layout choices. Twenty Eleven comes equipped 
  with a Showcase page template that transforms your front page into a showcase 
  to show off your best content, widget support galore (sidebar, three footer 
  areas, and a Showcase page widget area), and a custom "Ephemera" widget to 
  display your Aside, Link, Quote, or Status posts. Included are styles for 
  print and for the admin editor, support for featured images (as custom header
  images on posts and pages and as large images on featured "sticky" posts), and 
  special styles for six different post formats.
Version: 1.0
License: GNU General Public License
License URI: license.txt
Tags: dark, light, white, black, gray, one-column, two-columns, left-sidebar,
  right-sidebar, fixed-width, flexible-width, custom-background, custom-colors,
  custom-header, custom-menu, editor-style, featured-image-header, 
  featured-images, full-width-template, microformats, post-formats, 
  rtl-language-support, sticky-post, theme-options, translation-ready
*/The W ordPress Anthology 140
Asyoucansee,thisisfairly standard fare. What’ simportant toremember isthatnotwothemes
loaded inthesame WordPress installation canhave thesame name; soifyouarebuilding atheme
bycopying anexisting theme andmaking modifications from there, make sure youchange the
header information here toyour own unique values.
Theremainder ofthestyles.css fileisjuststandard CSS. Youcanuseittocreate allthecool styles
you’ll utilize tomake your theme look awesome.
The index.php file,ontheother hand, istheinitial page thatabrowser will fireupon visiting your
site, andserves asthekeyfiletodescribe thelayout ofthemain page (and potentially theentire
site, aswe’ll discuss inamoment). Wecanplace whatever HTML wewant ourtheme todisplay
inside thisfile,butsince ourgoal here istooutput ourWordPress content viaourtheme, we’ll take
amore structured approach. Let’stake alook atastripped down index.php filewemight commonly
seeinatheme:
chapter_06/basic-index.php
<?php
// Insert the header.php file to begin the page output
get_header();
// Add in page logic via the Loop
if (have_posts()) :
   while (have_posts()) :
      the_post();
      the_content();
   endwhile;
endif;
// Insert the sidebar.php file to include widgetized sidebars
get_sidebar();
// Insert the footer.php file to complete the page output
get_footer(); 
?>
Right away ,you’ll notice thatthis index.php fileisbroken upinto four sections:
■header area
■thelocation toaddTheLoop, which will define ourpage logic
■sidebar area
■footer area
Justbylooking atthecomments inthecode, wecandeduce thatget_header() grabs andinserts
theheader .php file,whileget_sidebar() andget_footer() perform thesame function with141 Themes
sidebar .php and footer .php,respectively .Fairly easy,right? There’ snoneed todefine thespecific
names ofthose files; WordPress assumes thatyou’ll follow itsnomenclature (arecurring theme, as
we’ll seehere inamoment). We’ve already covered TheLoop indetail inChapter 3,soweshould
already beable toseewhere thecontent isgoing tobeadded. However ,thisdoes introduce three
more files thatwe’ll need toaddtoourtheme:
■header .php
■sidebar .php
■footer .php
These files aren’t vital, butyou’ll find almost every theme makes useofthem. And justtokeep you
onyour toes, they won’t necessarily include what youthink they might ifyoutrytointerpret them
literally .Forinstance, theheader .php filewill contain allthedisplay code required tocreate the
code ofagiven page right uptowhere thecontent code isadded into theoutputted source code.
This includes the<DOCTYPE> information foryour outputted page, allthetypical components you’d
need inany<head> code such asmeta information andlinks toyour stylesheets, andtheopening
<body> tagtobegin your display code. Withallthatsaid, there aretwotasks youmust include when
creating your header .php filethatwill break WordPress without their presence:
■Reference thestyles.css fileyou’ve setuptoinitialize your theme.
■Add thewp_head() function inthe<head> code toinitialize WordPress andensure thatallcore
functions work properly .
Similarly ,thefooter .php filecancover alltheoutputted source code from thebottom ofthecontent
block totheendofthefile,although, inourexample, we’ve inserted oursidebar .php fileinthis
space, which serves toinclude logic forourwidgetized areas. Typically ,thefooter contains the
</body> and</html> tags, andmust containwp_footer() toallow core WordPress functions to
manage footer settings asrequired; without it,unexpected results will occur when WordPress uses
your theme.
Tying It All T ogether
Ifyouwere paying close attention inChapter 5,you’ll recall thattwoofourmost common action
hooks were thewp_head andwp_footer action hooks. Thefunctions thatwe’ve justdiscussed
above—wp_head() andwp_footer() —are thefunctions thatactually trigger each ofthese action
hooks, respectively .Nothing liketying ittogether with anice little bow,right?
Let’sstop foramoment anddraw ananalogy toillustrate thispoint further ,using ahamburger (or
aveggie burger ifyouprefer) asanexample. Now ,theway thatweprefer ourburgers may well be
different from theway youprefer yours. While alotofpeople prefer toputtheir pickles, mustard,
andketchup underneath themeat, with thecheese, lettuce, andtomato ontop,wechoose tohave
nothing underneath ourburger ,instead having alltoppings between themeat andthetopbun.
Other people may choose toskip themustard andketchup, favoring mayonnaise astheir onlyThe W ordPress Anthology 142
condiment. Whatever your preference, what weallhave incommon onourburger isthefactthat
there’ satopbun, abottom bun, andthemeat inthemiddle—what youaddtotheburger isreally
uptoyou.
Inthesame way,themes arereally allabout visual flavors andpreferences. Weallhave stuff onthe
top(aheader), stuff onthebottom (afooter), andmeat inthemiddle (thecontent being added by
TheLoop). Other than that, asdesigners weliketobecreative andmake ourthemes uniquely our
own, much likewedowhen weprepare ourburgers. Consider Figure 6.1.
Figur e 6.1. index.php  structur e dressed up like a hambur ger
What theburger -maker hasdone here ischange thevery nature ofthemeal. It’snolonger aham-
burger ,butadouble cheeseburger ,andwe’ll need tomanage some options thatdeal with thecheese.
Bringing theanalogy back totheindex.php filewithin ourtheme, we’ll callthese places where we
need tomanage options sidebars, andwecanmove them around however welike. Inourinitial
example, we’d already added onesidebar between TheLoop andthefooter ,butnow wehave to
manage twosidebars thatmay have different options. Theeasiest way todothisistocreate aleft
andaright sidebar ,which wecandobypassing thecorrect standard parameter totheget_sidebar()
function, asisdone intherevised example:
chapter_06/dual-sidebar-index.php
<?php
// Insert the header.php file to begin the page output
get_header();
// Add in page logic via The Loop
if (have_posts()) :
  while (have_posts()) :
    the_post();
    the_content();
  endwhile;143 Themes
endif;
// Insert both widgetized sidebars
get_sidebar('left');
get_sidebar('right');
// Insert the footer.php file to complete the page output
get_footer(); 
?>
We’recooking with gasnow,except …wait. We’ve added twosidebars toourtheme, butweonly
have one sidebar .php file.What gives?
Easy—get_sidebar() takes oneoptional parameter ,aname thatcorresponds directly toastandard
nomenclature with sidebar .php.Sowhen youuseget_sidebar('left') ,get_sidebar('right') ,
orevenget_sidebar('footer') ,WordPress will seek outsidebar_left.php ,sidebar_right.php ,or
sidebar_footer .php,respectively .Nomenclature, infact, plays avery bigroleindetermining how
WordPress parses outtemplate files within your theme, asweareabout tofind out.
Nomenclatur e Hier archy and P age T emplates
Wenow have ahandle onthefundamental components youcanusetoassemble your web pages
within your WordPress theme. This isgreat, butwhat about extending those styles andchanging
your theme depending onwhere youareinyour website? After all,it’squite common tomake your
home page appear different from your internal pages, andyoujustmight want tohave adistinct
look fora404page thatpops upwhen auser tries tovisit aplace onyour sitethatdoesn’t actually
exist. Regardless, WordPress hasyoucovered intwoways:
■thetemplate nomenclature hierarchy
■page templates
Let’stackle thenomenclature hierarchy first.
Bydefault, WordPress requires thatyouonly create onetemplate filewithin your theme: index.php .
Ifyoucreate noother template files aside from index.php ,WordPress will simply default tothis
visual styling foreverything itneeds todisplay onyour website. However ,WordPress provides us
with aspecific nomenclature system thatprovides ahandy way fortheme designers toautomatically
display templates foraparticular type ofpage output, oreven forapage, post, orcategory .Allyou
need todoismake acopy ofyour index.php file,rename ittomatch upwith thetype ofcontent
you’ll display ,andthen make your template modifications within thatfile.Consider theWordPress
Template Hierarchy inFigure 6.2.The W ordPress Anthology 144
Figur e 6.2. A simplified ver sion of the W ordPress template hier archy structur e
This simplified hierarchy structure describes theprocess; ithelps tothink ofitlikeafunnel, with
aURL working top-down through thehierarchy .Atthetopofthestructure, there aretemplates
used todescribe themost specific forms ofcontent types wecould have. Ifatemplate fileexists for
aspecific slug orpost ID,thattemplate isused. Ifnoslug orIDtemplate fileexists, WordPress
would look forthenext template fileinthelinear hierarchy andusethefirst available, defaulting
toindex.php ifnofileisfound until thatpoint.
Forexample, let’ssaythatyouwould liketocreate apage template tomanage theappearance of
allyour pages, butyou’d liketogiveyour About Uspage itsown look andfeel. Youcould accomplish
thisbycreating atemplate named page.php tohandle allthepages within your theme, butthen
create asecond filenamed page-about.php with thespecialized display logic (assuming that“about”
istheslug forthatparticular page).
Themost common templates modified bytheme designers, aside from index.php ,arecolored in
blue inFigure 6.2.Here’ swhat each ofthem modify:
■single.php manages alldisplay formatting forindividual posts145 Themes
■page.php manages alldisplay formatting forindividual pages
■home.php manages alldisplay formatting forthehome page (called from theis_home() function,
rather than theis_front_page() function, which ismanaged bythefront-page.php display
template)
■archive.php manages alldisplay formatting forpost-listing pages (those thattypically display
post excerpts)
■404.php manages alldisplay formatting foranypages notfound (this canbeuseful forimproving
your visitors’ experience bygiving them helpful navigation tips, since youcansafely deduce
thatthey’re experiencing what they didn’t expect onyour site)
But W ait—Ther e’s Mor e
Figure 6.2lists only some ofthemost common page template types used bytheme designers. For
amore complete listing, have alook atthediagram provided byWordPress.1
The archive.php template isitsown special case aswell, asitistheroot controlling template file
foravariety oftemplates, including categories, tags, andseveral others such astaxonomies, which
aren’t pictured here. Other than this, thearchive.php template works justliketheothers. Forexample,
let’ssaythatyou’re running asports website about theOlympics, andyouhave aparticular interest
inswimming events. Working from thebottom up,youcould create aspecialized display template
forposts about Olympic swimming bycreating afilecalled categor y-swimming.php .However ,you
may also want topost about sports unrelated toswimming thathave noneed foradistinct appear -
ance, soyoucould create asecond template called categor y.php thatserves thiscatch-all category .
Finally ,since you’ll bedoing thisover thecourse ofseveral Olympic Games, youmay want todisplay
older ,lessrelevant posts differently; youcould then useanother display template forarchived
posts. Shockingly ,thiswould benamed archive.php !
Page T emplates
Theother way tocreate distinct layouts inWordPress istousepage templates .It’snosurprise to
find thatyoucanonly usepage templates with individual pages, butthey’re useful forgiving your
enduser aneasy way tochange theappearance ofapage within thepage editing screen.
Creating anew page template iseasy aspie.Justcopy anexisting template youhave within your
theme andgive itaunique name. There’ snorequirement tofollow anomenclature forfilenames
ofpage templates asitiswith thetemplate hierarchy; infact, you’ll want tomake sure thatyou
avoid naming your page templates oneofthetemplate names, asitwill cause ittobehave inaway
youdon’t want. Instead, youregister your page templates with WordPress inwhat should now be
1http://codex.W ordPress.org/T emplate_HierarchyThe W ordPress Anthology 146
avery familiar way: having astandardized comment format atthetopofyour template file,asde-
scribed here:
chapter_06/page-template-registration.php
<?php
/*
Template Name: Antelope General Special Sales Page Template
*/
?>
Astherequired Template Name: label suggests, thename ofyour custom page template isdefined
here, andonce saved, you’ll find itimmediately inthepage templates drop-down onyour page
editing screen. Nothing toit,asFigure 6.3shows.
Figur e 6.3. P age T emplates dialog box
Adding Functionality to Y our Theme
Sofar,we’ve talked indetail about how themes work andarestructured, which isallwell andgood,
butsooner orlater you’ll want tomake your theme sing anddance, andthatmeans adding some
theme-specific functionality .Forthisreason, animportant filethatyou’ll find inmost themes is
thefunctions.php file.AfilethatWordPress automatically searches forwhen itloads atheme,
functions.php isessentially treated asatheme-specific plugin. There areplenty ofappropriate uses
forit(and inappropriate uses, aswe’ll discuss inabit); what’ simportant toremember isthat147 Themes
functions.php iswhere you’ll want toplace custom PHP functions thatmake sense tousewithin the
context ofyour theme, andyour theme alone. Let’stake alook atsome ofthemore common uses
offunctions.php .
Keep It Functional
Functions defined andwritten into functions.php areautomatically loaded whenever thetheme is
inuse; therefore, it’suseful tokeep inmind thatlong, unwieldy functions.php files canactually
slow your website down.
Adding Custom Menus
While youcanliterally addanyfunctions you’d liketothefunctions.php file,oneofthemost common
functions theme designers useinvolve setting upcustom menus forextended navigation onthe
site. WordPress gives usanexceptionally easy method forcreating asmany menus aswe’d like,
which isuseful forproducing topheader menus, footer menus, contextual menus, andanyother
type youcandream up.Inorder tocreate ourmenus, we’ll need toregister them within our
functions.php fileusing theregister_nav_menus() function, which takes anarray ofmenu slugs
anddescriptive names asitsargument. Let’shave alook atitinuse:
chapter_06/functions-php-menus.php
<?php
if ( function_exists( 'register_nav_menus' ) ) {
     register_nav_menus(
       array(
        'header_menu' => 'Header Menu',
        'footer_menu' => 'Footer Menu',
        'mobile_menu' => 'Mobile Menu'
       )
     );
}
Asisfairly plain tosee,we’ve registered theavailability ofthree new menu files inthisexample—a
header menu, afooter menu, andamobile menu. Withthiscode saved toourfunctions.php ,we’ll
now have these menu options available touswhen wenavigate totheMenus screen intheDashboard
atAppearance >Menus ;here wecanmake modifications toourheart’ scontent. However ,westill
need toplace them inourtheme, andtodothisweneed only usethewp_nav_menu() function in
thedesired location within ourtheme, which looks likethisinaction:
<?php wp_nav_menu('header_menu'); ?> The W ordPress Anthology 148
Working Backwar ds
Thecustom WordPress menu system wasintroduced inWordPress 3.0.Ifyouwant tomake sure
thatyour theme iscompatible with WordPress versions older than 3.0,usetheconditional if (
function_exists ( ‘register_nav_menus()’ ) code asdescribed inourrecent example.
Choose Y our Format
While thestandard usage ofwp_nav_menu() isfairly basic, youcandoallsorts offormatting tricks
with it.Have alook intheWordPress Codex2fortherange ofparameters youcanpass tothefunction
toextend your custom menus.
Creating Widgetized Ar eas
Aside from adding customized menus, functions.php isoften utilized toextend WordPress’ sfunc-
tionality ,creating additional widget-ready areas forusewithin your theme. Consider thefollowing
code:
chapter_06/register-widgetized-area.php
<?php
// Register Antelope Featured Widgetized Area so it exists and we can use it
if ( function_exists('register_sidebar') )
register_sidebar(array(
  'name' => 'Antelope Featured Widgetized Area',
  'before_widget' => '',
  'after_widget' => '',
  'before_title' => '<h2>',
  'after_title' => '</h2>',
));
?>
Nothing tothis, really .Here, we’re justletting WordPress know thatwehave anew widgetized area
called Antelope Featured Widgetized Area thatwe’ll want touse.WordPress willrespond bycreating
anamespace foryoutowork with; sonow when yougototheAppearance >Widgets area within
theadmin area, you’ll seeanew sidebar named Antelope Featured W idgetized Area .Goahead and
fillitupwith whatever widget functionality you’d like, andthen we’ll move ontothenext (and
final) step sothatwecanactually reap thebenefits ofourefforts.
Since we’ve justregistered anew widgetized area, let’sfollow through andaddittoourtheme in
auseful location forourpurposes. Widgetized areas canbeadded anywhere inatheme, butthey’re
2http://codex.wordpress.org/Function_Reference/register_nav_menus149 Themes
commonly added within sidebar .php templates (orderivatives thereof). Justlocate theplace inyour
code where youwant toaddyour new widgetized area, anddrop inthefollowing PHP code:
chapter_06/display-widgetized-area.php
<?php 
// Output Antelope Featured Widgetized Area in our theme
if ( !function_exists('dynamic_sidebar') || !dynamic_sidebar ➥
  ("Antelope Featured Widgetized Area") ) : ?>
<!-- Default formatting code here  -->
<?php endif; ?>
Wepromised we’d avoid delving toodeeply into PHP here, butthisshouldn’t betooscary .Here
wearejustbeing responsible andmaking sure thatourtheme hasnoissues; forexample, ifthe
theme isunable tofind either thedynamic_sidebar function (highly unlikely ,asit’sacore function)
orthewidgetized area wejustregistered inourfunctions.php file(more likely ,since everybody is
prone tohuman error). Intheevent thatthetheme runs into anissue here, it’lljustdisplay the
output code we’ve specified—in thiscase, adescriptive comment. However ,solong aswehave
coded ourwidgetized area correctly andadded widgets toit,weshould seeauseful addition here.
Adding Support for Visual Modifications
Theother types offunctions most commonly added tofunctions.php involve giving your users the
ability tomake visual changes tothetheme from directly within theadmin Dashboard.
Adding Support for Custom Headers
It’stypical thatusers with aparticular theme ontheir website will want tochange theheader to
oneoftheir own creations, andWordPress gives usareally easy,standardized method ofdoing so.
Inorder tomake thishappen, WordPress provides uswith asetofcode additions thatwe’ll need
tobuild ourfunctions.php file:
chapter_06/functions-php-custom-header .php
<?php
// Four constants that must be defined in order for the custom image 
// header to work properly
define('HEADER_TEXTCOLOR', 'ffffff');
define('HEADER_IMAGE', get_bloginfo('styesheet_directory') . ➥
  '/images/default_header.jpg'); 
define('HEADER_IMAGE_WIDTH', 900); 
define('HEADER_IMAGE_HEIGHT', 150);The W ordPress Anthology 150
// Include the header within the theme
function header_style() {
    ?><style type="text/css">
        #header {
            background: url(<?php header_image(); ?>);
        }
    </style><?php
}
// Include the header within the admin interface
function admin_header_style() {
    ?><style type="text/css">
        #headimg {
            width: <?php echo HEADER_IMAGE_WIDTH; ?>px;
            height: <?php echo HEADER_IMAGE_HEIGHT; ?>px;
            background: no-repeat;
        }
    </style><?php
}
// Enabling the custom image header
add_custom_image_header('header_style', 'admin_header_style');
You’ll notice thatthere arefour basic blocks ofcode: thefirst defines four constants; thesecond
adds theheader tothefront endofthetheme; thethird adds theheader totheadministrative portion
ofthetheme; andthelastactually enables itallwithin WordPress. From anediting perspective,
it’simportant topayattention asatheme developer tothefirst code block where wedefine our
constants. Make sure toinput theheader dimensions accurately ,aswell asdescribe thelocation of
theheader image, andthecolor ofanytextthatisadded totheheader .Without these constants,
thecustom header will simply failtowork.
Following theconstants definition, theremaining three code blocks comprise pretty much our
standard WordPress magic. First, we’ll create afunction thatwillload with thewp_head action hook
thatadds theheader image anditsattributes intoyour theme. Thenext code block loads theheader
totheadmin Dashboard, followed byouractivation function inadd_custom_image_header() ,
which specifically calls thetwofunctions we’ve justdefined.
Adding Support for a Custom Backgr ound
Inwhat may bethegranddaddy ofeasy functionality toaddtoanytheme, WordPress hasasimple
method thatgives your users theability toaddacustom background totheir themes. Inyour
functions.php file,addthefollowing lineofcode:
<?php add_custom_background(); ?>151 Themes
Doing thiswill automatically addasetoffunctionality toyour theme thatwill allow thewebsite
administrator toseetheexisting background image ofthetheme, upload abackground toreplace
theoldone, andtweak several ofthecommonly modified attributes ofthebackground. Takealook
atFigure 6.4.
Figur e 6.4. Adding a custom backgr ound
Ifyouwere expecting amore complicated process, don’t knock it.Every once inawhile you’re
given agift,andthisisoneofthem!
Does My Functionality Belong in a Plugin or Theme?
While youcantechnically addfunctionality wherever youlikeinyour theme, thequestion ofwhere
it’sappropriate todosocanbeabitmurky when considering both theflexibility ofWordPress and
thedivergent intentions ofdifferent web developers. Before weexamine these nuances, though,
let’sfirst define exactly what wemean byfunctionality .
Defining Functionality
Theterm functionality isacommon buzzword thatisthrown around fairly loosely these days by
developers, designers, andclients alike, butexactly what arewetalking about when wereference
it?Forthemost part, justabout anybody involved would agree thatit’sageneral term describing
aspecific feature setthathasbeen introduced into asystem. Within WordPress, almost alltypes of
functionality canbebroken down into four primary categories:The W ordPress Anthology 152
■core WordPress functionality
■functionality thatenhances existing feature setswithin core WordPress
■functionality thatintroduces entirely new feature setsunavailable within core WordPress (in-
cluding third-party application integration; forexample, Twitter)
■functionality thataidsaspecific theme inhandling variables from adesign andlayout perspective
Whether you’re looking toaddareal-time feed ofTweets toyour sidebar orajQuery image gallery
onyour home page, orjusttosetupyour sitetoberanked better insearch engines, thecategories
listed should cover justabout anything youwant tothrow atWordPress. Ifweassert thatallfunc-
tionality inWordPress falls within oneofthese fourcategories, andconsider thatWordPress provides
alogical location tohouse operations, wecanproject whether aspecific piece offunctionality belongs
within aplugin orwithin atheme.
Core WordPress functionality isincluded within WordPress, andshould never bedirectly edited
atanytime (ifyoudo,badstuff canhappen; think “removing random pieces ofyour engine justto
seewhat happens”). Functionality thateither enhances existing WordPress core features orintroduces
brand new features typically belongs asplugins, sothatthey canbeadded andremoved asnecessary .
Likewise, functionality thataids atheme belongs within thattheme, butit’suseful tonote thatit’s
scripting thathelps display specific pieces ofcontent rather than addorextend functions. Inthis
way,theintent ofthescripting isdifferent; it’smore about display logic than itisabout sitefunc-
tionality ,andit’sprobably themost important distinction tomake indetermining where toplace
your site’scustom functionality .
The Differ ence between Display Logic and Site Functionality
Almost allfunctionality inWordPress iswritten inoneoftwolanguages: PHP orJavaScript. After
all,whether you’re creating acustom jQuery script toaddabehavior toaslide show ormodifying
TheLoop toaddthethree most recent posts intheFeatured category tothefront page, youarereally
working onthesite’sfunctionality .Right?
Sort of.
Thetruth isthatwhile youare,indeed, working with functional pieces ofscripting onyour site,
youshould beable tosquarely place anyscripting intooneoftwocategories. Thescript either adds
toorenhances theactual features ofyour WordPress site(sitefunctionality ),orassists youindis-
playing thatinformation toyour audience (display logic ).Weallhave areasonable idea ofwhat
sitefunctionality is,butdisplay logic haseverything todowith how weactually display useful
data within thecontext ofthetheme. Common examples ofdisplay logic include:
■registering sidebars andwidgetized areas
■registering new WordPress menus153 Themes
■inserting custom conditional logic into TheLoop
■using post thumbnail scripting references such asTimThumb3
Incorporating prefabricated sitefunctionality viatheplugin system bycustomizing atheme’ sdisplay
logic isthemost common form ofWordPress development performed bythetypical WordPress
developer ,asmost ofusspend ourtime finding slicker andmore effective ways ofintegrating ex-
isting tools across theWebtocreate client solutions. Often, thedifference between good andpoor
coding practices isinrecognizing thedifference between actual sitefunctionality anddisplay logic,
andcoding each intheappropriate location.
A Case Study: ABC Real Estate
Soifthisisallasclear asmud, let’stake alook atapractical example. Suppose thatwehave anew
client—ABC Real Estate—who’d likeustodevelop anew website built upon WordPress with the
following functionality requests:
■some form ofevent management system, asitwill berunning regular seminars
■thateach property bedisplayed inaconstant, intuitive way with space formultiple photos (to
vary perhouse listing)
■sixfeatured properties inaspecific format tobeselected forthehome page
■siteintegration ofFacebook comments sothatvisitors caneasily share potential homes with
their friends
Each ofthese requests seems more than reasonable andintuitive forarealestate website, butlet’s
sortoutexactly where we’d addeach piece offunctionality listed.
Some Form of Event Management System
This oneisrelatively simple. Because WordPress lacks anevent management system initscore,
we’ll need toaddoneviatheplugin system. Could wewrite ourown andadditdirectly tothe
theme itself? Technically ,wecould, butitwould make little sense, asthere arealready somany
event management systems available totryinaheartbeat. Furthermore, ifwewere absolutely bent
onwriting ourown system, itwould beeasiest tocontain allthefiles necessary intheir own place
tokeep ittidy.Sounds likeaplugin.
Each Pr operty Displayed in a Constant, Intuitive W ay
This oneisatouch more complex, andabitofatrick question. Since we’re talking about how ele-
ments aredisplayed, youmight think we’re immediately intherealm ofdisplay logic. However ,
WordPress 3.0introduced thenotion ofpost types, which allows fordevelopers tocreate acertain
3http://code.google.com/p/timthumb/The W ordPress Anthology 154
display format foraspecific type ofpost. Youcancollect adiscrete setofdata within theWordPress
admin foreach record within thepost type, andthen output thatrecord toapost template inside
thetheme, allowing thepost tobeoutput tothescreen inaunique way.Because oftheparticular
way thatpost types operate, youareessentially forced tocreate both display logic aswell assite
functionality when youwork with them. We’llgoover thisinabitmore detail further oninthis
chapter .
Six Featur ed Properties in a Specific Format for the Home P age
This isdisplay logic. We’readding nothing new here atall,butrather picking specific pieces of
stored content from thedatabase. This isalways done directly within thetheme.
Site Integr ation of Facebook Comments
Third-party application integration—in thiscase, Facebook. Piece ofcake; we’ll addoneofthe
myriad Facebook commenting plugins available forWordPress andintegrate itappropriately .
My W ay of Adding Site Functionality W orks for Me!
And tothatwesay:wecompletely understand where you’re coming from, butallow ustomake a
fewcompelling points thatjustmight change your mind.
First ofall,ifyouaredeveloping sitefunctionality yourself, you’re likely tofind itmore useful to
dosowithin thecontext ofaplugin forpurposes ofportability ,rather than directly within the
theme. After all,even after ajobhasbeen completed andthesitelaunched, alarge percentage of
developers retain theintellectual property rights ofprograms thatthey develop andutilize within
sites they work on;sooner orlater there isaneed toreuse thesame code (oraversion ofit)foran-
other project. Plugins make thissitefunctionality portable andeasy toinstall, saving quite abitof
time inthelong run.
Because WordPress plugins arestructured tomaintain alltheir files inseparate directories away
from other plugins andcore WordPress features, they inherently provide order tothefunctions
written throughout thesite. Forinstance, ifyouarehaving anissue with themeta description on
thehome page andyouknow youareusing anSEO plugin thathandles thatfunction (easily looked
upbyreferencing theactive plugin listing intheWordPress admin), you’ll know exactly where to
begin investigating thesource oftheissue, even ifyouweren’t theoriginal developer .Inthisway,
plugins canactually provide aloose form ofdocumentation inandofthemselves, giving developers
reasonable clues astowhere certain functions might live, even inthepoorest-documented ofsites.
Troubleshooting isanother fabulous reason tomaintain sitefunctionality within plugins rather
than embed itdirectly into thetheme. Adding new features toaWordPress sitecanoccasionally
cause conflicts andbreak awebsite, causing anynumber ofdisplay orperformance issues thatneed
tobecorrected. When such issues gobump inthenight, most seasoned developers begin examining
existing plugins toseewhere scripting plugins may behappening. Using WordPress’ splugin system155 Themes
toactivate anddeactivate plugins provides ahandy way toeliminate active scripts running onthe
site, andthen bring them back onebyonetodetermine which aretheoffending scripts. Without
theability toturn plugins onandoff,adeveloper canbestuck trying tosortoutexactly which
scripts areconflicting with oneanother andcausing abuggy result totheenduser.
Finally ,don’t underestimate theimportance offlexibility inyour website functionality .Themore
ofthesite’score functionality thatisdirectly built into thetheme, themore difficult itbecomes to
make design changes tothattheme, oreven swap itoutentirely .Itmay sound clichéd, buttheWeb
isconstantly shifting, and, ultimately ,sowill your site’sneeds. Hard-coding sitefunctionality into
atheme canlead totime-consuming edits, changes, andoverhauls inthelong term (and often the
short term) asyourealize thatwhat youthought wascrucial yesterday—basing your entire sitede-
velopment onit—is entirely obsolete next week. Honestly ,ithashappened tothebest ofus.
Breaking the Rules
“All right,” wehear yousay.“That’ sfine, butIhave agood reason todeviate …”Every subjective
argument likethishassolid reasoning togoyour own way,andit’suseful topoint outafewhere.
Reason #1: P ost Types
Inourcase study ,wediscussed putting together acustomized post type tohandle thedisplay format
foraproperty listing. Pragmatically ,thisinvolves putting twopieces ofcode together: anarray
initializing thedata forthepost type, andthepost template tohandle thedisplay within thecontext
ofthetheme. While thesecond component here isclearly anissue ofdisplay logic, thearray initial-
izations areabitmore fuzzy .This function iscommonly defined within thetheme’ sfunctions.php
file,butit’simportant tonote thatitcould bedefined with afunctions fileinitialized within the
plugin system. Inmany ways, thismakes atouch more sense asitkeeps aclean separation between
sitefunctionality anddesign components, andwould ensure thatthesite’sfunctionality wasretained
ifyouwere toswap themes outdown thetrack. Asofthiswriting, initializing thearray within the
theme’ sfunctions.php fileisclearly themost common practice, butit’scertainly agray area.
Reason #2: Specialized P age T emplates
Occasionally ,itbecomes important tocreate apage onaWordPress sitethatperforms aparticular
function. Perhaps you’re framing anitem from another site, orpulling insome type ofcustom
functionality thatisn’t really conducive toworking within theconstructs ofthestandard WordPress
page template andcontent editor .When thisisthecase, ausual practice istoregister anew page
template with thestandard WordPress syntax inthetemplate file,andthen include thefunctionality
directly within thatpage. Inthisinstance, thefunctionality isnotportable toother sites atall,but
often itisdone inasituation where thatisunnecessary .The W ordPress Anthology 156
Reason #3: Pr otecting the Client fr om Themselves
Asmuch aswe’d allliketobelieve thatWordPress isabulletproof system thatclients areunable
tobreak, weknow that’sinaccurate. Occasionally there isagood reason tohardcode. Forexample,
let’ssayyouhave aclient who hastoeditthesidebar ontheir website, butcontinually adds toor
edits thewrong item. Inthisinstance, itcanbeuseful tohardcode simple elements intothesidebar
thatyou’re reasonably sure theclients themselves will never need toupdate, guarding against the
possibility ofaccidentally deleting it.Examples ofwhat might behardcoded include anemail opt-
inboxorsocial media connection buttons.
Reason #4: Specialized Pr oducts for a Specific Industry
There aremany theme developers outthere who build targeted WordPress themes tailored tocertain
industries. These themes lack acertain amount offlexibility ,buttheupshot isthatforthetarget
market they serve, theadditional flexibility isunnecessary .Examples ofthisinclude realestate-
specific themes, product review themes, orquestion-and-answer aggregation themes.
Reason #5: Time and Budget Consider ations
Point blank, it’ssometimes faster tocode directly into atheme than tomake itmodular andusea
plugin. When time isafactor oryour client hasatight budget, alegitimate reason exists tocut
corners andcode sitefunctionality directly intothetheme. It’simportant tonote thatthisiscertainly
notabest practice, butit’sareason todowhat youneed todotogetthejobdone.
Looking Good
Ultimately ,themes areallabout making your sitelook pretty ,andit’seasy todoifyoukeep inmind
afewpoints:
■Themes revolve around moving template tagsintodifferent positions within your page templates.
Forthemost part, every template will have aheader andafooter ,inserting page logic inthe
middle viaourtrusted friend andally,TheLoop.
■There aresome linear rules fordetermining how toname your template files, sothatthey auto-
matically style thetypes ofcontent youwant them to.
■Youcanusepage templates toallow users greater control inthepage editing screen over how
certain pages appear .
Wealso learned how toaddfunctionality such aswidgetized areas inatheme’ sfunctions.php file,
anddiscussed thedifference between sitefunctionality anddisplay logic. We’vemade thecase that
thebest practice foradding functionality istocode display logic directly into thetheme, while
creating sitefunctionality within theplugin system.157 Themes

Chapter7
Taxonomies
Sofarwithin thisbook, we’ve touched upon theprimary components thatcomprise themain content
andoperational functions ofWordPress: thecore WordPress installation; TheLoop thathandles
WordPress’ smain content display logic; post types, which provide forextended flexibility indis-
playing different types ofcontent; plugins, which addentirely new functionality atthedrop ofa
hat;andthemes, which determine how thesitewilllook. While each ofthese elements areessential
increating theability toadd, manipulate, anddisplay information differently ,itistheability to
organize ourcontent intointuitive, searchable groupings thatultimately makes WordPress auseful
tool. Tothisend, WordPress employs taxonomies ,which aredefined asmethods ofgrouping sim-
ilarindividual instances ofcontent together inmeaningful ways.
Before wedigdeep intotaxonomies asthey areapplied inWordPress, let’shave alook atanexample
ofhow taxonomies areused intherealworld. When youwalk intoanylibrary ,youknow thatthere
arethousands ofpublications tochoose from. Most ofthose publications arebooks, butsome are
magazines, periodicals, compact discs, DVDs, or—if thelibrary isreally old-school—microfiche.
While weknow thatthese forms ofmedia areusually kept indifferent places, imagine how confusing
itwould beifthatwastheonly form oforganization ourlibrary gave us!After all,could youimagine
throwing anoutdoor party andbeing forced torifle through thousands ofbooks trying tofind the
right oneonbarbecuing sausages? Instead, wehave whole sections devoted tospecific topics, in-
cluding oneoncooking, andthen within itasubsection onbarbecuing, andwithin thatasubsection
onbarbecuing sausages. Alltheorganization andsuborganization thatyoufind inanylibrary isan
excellent example oftaxonomy atwork inthereal, physical world …andwith thehelp ofareal-
lifelibrarian ortheDewey Decimal System (google it,kids) youeven have abuilt-in search function.
Now thatwe’ve covered agood example ofwhat ataxonomy might look likeinreallife,let’sdig
into taxonomies asthey areapplied inWordPress.
Categories , Tags, and Custom T axonomies
InWordPress, taxonomies areused toaddarelational dimension tohow yougroup elements together .
Categories andtagsareboth used togroup posts together ,andindeed define thetaxonomy forany
given post once assigned. Core WordPress includes three taxonomies bydefault: categories, tags,
andlink categories. Each time youcreate anew category ,tag,orlink category ,youarecreating a
term ofthattaxonomy .Forinstance, acategory called Neighborhoods would beaterm ofthecategory
taxonomy ,while atagnamed Fijiwould beaterm ofthetagtaxonomy .
While we’ve already talked about categories andtagsatlength inChapter 2,what’ simportant to
recognize isthatcategories arehierarchical innature. Individual categories canhave subcategories,
andthen those subcategories canhave their own subcategories, andsoforth. Tags,ontheother
hand, arenothierarchical butmerely labels thatyouapply toanygiven post, regardless ofwhich
category thepost isnested in.Inthisway,youcanthink ofcategories asbuckets thatareused to
group posts together ,whereas tagsprovide amuch looser relationship between posts.
Link Categories
Link categories—the third taxonomy type thatWordPress includes—are notnecessarily adeprecated
topic inWordPress, butarenotparticularly relevant forourdiscussion ontaxonomies. What’ smore
important istorecognize thatthey areofficially aseparate taxonomy type thathappen tobeincluded
with core which youmight seereferenced indocumentation from time totime. Formore information
onlink categories, have alook intheCodex.1
Understanding therelationship between categories andtagsinthecontext oftaxonomy iscentral
todeveloping asolid information structure foryour website’ scontent. Themore thoroughly you
plan how your WordPress siteshould function from thestandpoint ofcontent andinformation
structure, themore successful your sitewill ultimately be.
A Word on Information Hier archy
One ofthemost common mistakes made byboth beginners andseasoned web developers alike
when building anew website, WordPress orotherwise, isthelack offoresight toplan outthesite’s
information structure andhierarchy .Especially when youarestarting out,there’ stheromantic
notion ofsitting onabarstool somewhere, having abright idea forasite, andthen sketching ideas
onanapkin forthenext million-dollar online business model. Undoubtedly ,thishappens from
time totime, butit’stheexception totherule. Ultimately ,many ofusbecome fartoocaught upin
1http://codex.wordpress.org/T axonomies#Link_CategoryThe W ordPress Anthology 160
thegraphic design ofasite, andthen wonder why weendupwith awatered-down product that
fails towork asweintended.
Most effective websites areplanned from aninformation hierarchy perspective, rather than from a
design perspective. Forourpurposes, we’ll define information hierarchy (orinformation structure)
astheoverall planned organization ofthecontent onagiven website. Aneffective information
hierarchy takes various factors into account andputs them together toform acohesive structure.
These factors include theactual sitecontent topics andhow content should bepresented. Willyou
beusing pages andsubpages forsome types ofcontent, orwill itbeposts added tocategories and
subcategories? What types ofcontent should besearchable? Should some content besearchable on
itsown, without search entries from posts orpages elsewhere onthewebsite? Allthese variables
combine tocreate theinformation hierarchy ofagiven website.
When youbegin putting together asite(orworking with aclient toputtogether their site), it’sper-
fectly finetoaskquestions about what thesiteshould look like. However ,it’sfarmore important
toaskwhat thesiteshould do.What information isgoing tobeonthesite? How should users be
able tointeract with thatinformation? Should theinformation beclustered together inonearea of
thesite, ordoweneed more structure? Understand thatthere arenoright orwrong answers tothese
questions, butit’simportant youaskthem andseek genuine responses.
What youshould attempt toendupwith isacontent wireframe foryour website. Unlike layout
wireframes, which show theoverall design layout ofaweb page’ sbasic components prior toitbeing
fleshed outbyagraphic designer ,acontent wireframe offers acomprehensive plan foryour site’s
information hierarchy .We’llshow yousome examples ofdeveloped content wireframes injusta
bit,butfornow consider your responses tothese basic considerations carefully .Takeyour time
andbespecific with your responses, andremember thatregardless ofhow awesome WordPress or
anyother web development toolyouhappen tobeusing is,it’sultimately uptoyoutobuild your
website intelligently .
Why Custom T axonomies?
Part ofyour plan fortheinformation hierarchy foryour website issorting outwhich content will
befiltered into categories andposts, andwhich will besetupaspages. Organizationally ,you’ll
alsoseek tofigure outwhat youcanlabel andcross-reference astags. Intruth, youcandoalotwith
WordPress pages, posts, categories, andcustom post types, butusing custom taxonomies isafairly
easy technique thatprovides more flexibility inhow youorganize your content. Using custom tax-
onomies isalso more professional, asitprovides thetype ofpolish thatclients tend torecognize
andrespect.
Throughout thischapter ,we’ll useacommon example tohighlight how tousecustom taxonomies,
andwhy they might beuseful. We’llputtogether aWordPress siteforarealestate company named
Rutherford Real Estate, which wants todisplay properties organized byneighborhoods inseveral
regions. Furthermore, Rutherford Real Estate hasmany sales agents working forit,allofwhom161 Taxonomies
represent multiple properties inanygiven region orneighborhood. IfRutherford Real Estate sells
property inthree regions—each ofwhich have several neighborhoods—and agents cansellproperties
inanyregion orneighborhood they choose, let’shave alook atwhat avisual representation ofthe
business might look like, inFigure 7.1.
Figur e 7.1. Regions and neighborhoods for Rutherfor d Real Estate
It’splain toseewe’re dealing with twotypes ofinformation: hierarchical andnonhierarchical, with
neighborhoods being hierarchical subsets ofregions, andsales agents acting asfreeradicals that
canattach towhatever they please. InWordPress terms, thismeans thatweshould beable tosafely
usecategories forregions andneighborhoods, andtagsfortheagents. Now let’sreframe ourchart
into acontent wireframe thatexplains theinformation hierarchy forthisbusiness model inour
website, inFigure 7.2.The W ordPress Anthology 162
Figur e 7.2. Content wir eframe with category tags
That’ smore likeit.Ourtaxonomy isstarting totake shape. We’veestablished thatourthree regions
will besetupascategories, each having several related subcategories tohandle therespective
neighborhoods. Subsequently ,individual posts willbeused tohandle individual properties, giving
usanice way tocategorize ourproperty listings forRutherford Real Estate. We’ve also established
thatwe’ll beusing tagstohandle sales agents, asindividual agents cansellproperties indifferent
regions, andthere may beinstances when several agents team uptorepresent oneproperty inpar-
ticular .Functionally ,thisshould work well, andmany developers will choose tosimply stop here
andproceed with development. However ,with abitoffurther planning, you’ll beable tofurther
customize WordPress functionality forRutherford Real Estate. Intheabsence ofthis, acommon
default permalinking taxonomy thatmay beconfigured forRutherford Real Estate might look like
this:
/%category%/%postname%/
Ifweconfigured thesiteasdescribed previously ,thismight render apermalink foraproperty titled
“Farmhouse” inTraverse City tolook likethis:
http://www .esquandoloas.com/category/midwest/traverse-city/farmhouse
That’ snotbad. Itcertainly includes thecategory andpost slugs thatdescribe what thecontent is
allabout (afarmhouse inTraverse City that’slocated intheMidwest), butwecould doeven better
from anSEO perspective. Custom taxonomies allow ustocreate aseparate hierarchical structure
with amore descriptive permalink thatincreases therelevance forsearch engines likeGoogle,
producing higher rankings. Consider asituation where wesetupacustom taxonomy forourprop-
erties thatcould create apermalink thatlooked likethis:
http://www .esquandoloas.com/properties-for -sale/midwest/traverse-city/farmhouse163 Taxonomies
This issemantically amuch better permalink, asitinstantly establishes toboth search engines and
realusers thatthecontent onthislinkisaproperty that’sforsale, located intheMidwest (Traverse
City,tobeexact), andafarmhouse. Furthermore, ifwesetthisupasacustom taxonomy ,wecreate
awhole new taxonomy towork with, leaving ouroriginal category taxonomy untouched andintact,
which canbeused forother purposes onthewebsite—say blogging about news andevents that
support Rutherford Real Estate’ ssales efforts. Byadding acustom taxonomy tohandle properties,
thenew content wireframe might look likeFigure 7.3.
Figur e 7.3. Our full content wir eframe
Now we’re cooking with gas.Wehave ourcustom taxonomy setuptowork inahierarchical manner ,
andwe’ve also created aplace touseournormal categories andtagsformarketing purposes. In
addition, wefully expect tosetupourpermalink taxonomies toreflect twodifferent structures.
Forourproperties, we’ll have permalinks thatlook like:
http://www .esquandoloas.com/properties-for -sale/midwest/traverse-city/farmhouse ,while forour
news andevents, we’ll have taxonomies thatlook like:
http://www .esquandoloas.com/category/events/marcos-crazy-estate-blowout-sale .Aren’t wefancy?
There aretwoother really cool aspects ofcustom taxonomies: extensible functionality requirements
andcustom searching. Custom searching isfairly straightforward. Using custom taxonomies allows
ustodelineate content sowecancreate custom searching restrictions. Therefore, ifwewant to
search thewebsite andonly return properties, wecanrestrict theparameters ofthesearch toonly
pull from thattaxonomy type (more onthatinabit). And when weconsider custom taxonomies
asatoolwecanplug inatanytime, werealize thatwecanextend WordPress inalmost anydirection
wewant, even ifthesitewe’re looking toextend isalready inplace andfilled tothebrim with ex-
isting content. Weneed donothing more than establish thenew type ofcontent thatwewant to
logwithin thesite, create ourtaxonomies, andbegin tousethem.The W ordPress Anthology 164
Creating Custom T axonomies
Now thatwe’ve discussed what custom taxonomies areandwhy we’d want tousethem, let’sgoto
therealheart ofthematter: creating them andusing them toouradvantage.
Registering a New T axonomy
Creating new taxonomies inWordPress isarelatively simple process, andWordPress provides us
with afunction thataccomplishes thejob:register_taxonomy() .Youshould always usetheinit
action hook when callingregister_taxonomy() ,orelseyouwill incur fatal errors, andnobody
likes anything thatincludes theword “fatal”, dothey?
register_taxonomy() takes onerequired parameter andtwooptional butextremely useful para-
meters:
register_taxonomy( $taxonomy, $object_type, $args );
The$taxonomy parameter isrequired; itissimply thename ofthetaxonomy being used, andmust
exclude capital letters andspaces. It’sextremely important toensure thatthename ofthetaxonomy
isunique sothatitavoids conflicts with plugins. Drawing from ourRutherford Real Estate example,
when naming thetaxonomy forsales agents, we’d bebetter served using “Rutherford-sales-agents”
instead of“agents.”
The$object_type parameter must bedefined aseither apredefined object thatisbuilt into core
WordPress, ortheslug name ofagiven custom post type thathasalready been created intheinstall-
ation. Theparameter istechnically optional, butleaving itout(orexplicitly setting ittonull )will
register thetaxonomy without associating itwith anyobjects. Therefore, thetaxonomy will beun-
available foradministration within theWordPress back end, andyou’ll have tomanually register
itusing thetaxonomy parameter (passed through$args )when registering acustom post type with
register_post_type() orregister_taxonomy_for_object_type() .
WordPress built-in post types thatcanbepassed inasavalid value forthe$object_type parameter
areasfollows:
■post
■page
■mediapage
■attachment
■revision
■nav_menu_item
Themost commonly used ofthese built-in post types with custom taxonomies arepost orpage .165 Taxonomies
The$args parameter isanassociative array ofarguments thatdefine anddescribe thetaxonomy .
While itistechnically anoptional parameter ,thefunctions andswitches thataremanaged within
thisarray areessential forshaping taxonomies andmaking them dowhat youwant. Infact, it’s
such animportant aspect ofunderstanding andmanaging taxonomies thatweshould delve deeper
into thisarray .
The $args  Array
The$args array (orarguments array ,aswe’ll refer toithere) takes upto12different arguments,
oneofwhich isnotrecommended forusebycore developers (the_builtin argument—see the
Codex2,which states it’sjustfordocumentation purposes). Each argument isoptional, andindividu-
allyhandles important functionality switches fortaxonomy registration, which canbeuseful fora
variety ofreasons. Let’slook atthem indetail.
label
This isaplural descriptive name forthetaxonomy marked fortranslation thatisoverridden by
$labels->name bydefault.
labels
This isanassociative nested array oflabels thatdefine thetextused within thetaxonomy in
andofitself. This nested array isimportant sowe’ll refer toitasthenested labels array argument,
andcover thisinmore detail inthesection ofthesame name.
public
This isaBoolean thatdescribes whether ornotthetaxonomy should beexposed within the
WordPress administrative back end; settotrue bydefault.
show_in_nav_menus
This isaBoolean thatdescribes whether ornotthetaxonomy should bemade available forse-
lection inthenavigation menus intheWordPress administrative back end. Itdefaults tothe
value setinthepublic argument.
show_ui
This isaBoolean thatdescribes whether ornottodisplay auser interface tomanage different
aspects ofthetaxonomy intheWordPress administrative back end. Itdefaults tothevalue set
inthepublic argument.
show_tagcloud
This isaBoolean thatdescribes whether ornottoallow theTagCloud Widget (which ships
with core WordPress) touseinformation setwithin thetaxonomy .Itdefaults tothevalue set
intheshow_ui argument.
2http://codex.wordpress.org/Function_Reference/register_taxonomyThe W ordPress Anthology 166
hierarchical
This isaBoolean thatdescribes whether ornotthetaxonomy willbehierarchical, anddefaults
tofalse. It’saprincipal argument, asitisthemaster switch thatdefines whether acustom tax-
onomy should work likeacategory orlikeatag.
update_count_callback
This isafunction name that’sused toupdate thecount oftheassociated $object_type when
itisupdated.
query_var
This defaults tothe$taxonomy parameter value, andcanbeused totake either astring (asper
the$taxonomy value) oraBoolean, which will often befalse toprevent anyqueries. It’srefer-
enced inthenext argument, rewrite .
rewrite
Relatively advanced, thisparameter canbepassed either aBoolean oranarray .Itdefaults to
true ,butyoucanpass afalse value toprevent rewriting perthemod_rewrite module inApache.
Ifyoupass theargument anarray ,these values canbepassed:
■slug :prepends posts with acustom slug, defaulting tothetaxonomy’ sname
■with_front :aBoolean thatallows permalinks tobeprepended, defaulting totrue
■hierarchical :aBoolean thatallows hierarchical URLS
capabilities
This array allows foruser-group control byproviding theability todescribe theexact capabilities
thathave access tousefunctions ofthetaxonomy .Itisuseful indetermining who canusethe
taxonomy intheWordPress administrative back end. Bydefault, users ofroles with theman-
age_categories capability canmanage, edit, anddelete terms inataxonomy; users with roles
with theedit_posts capability canassign terms ofataxonomy toapost.
This sums upthearguments array ,butaswenoted earlier ,weneed todiscuss thelabels argument
further .
The Nested Labels Arr ay Argument
Thearray used forthelabels argument isimportant forproviding thetextused throughout the
WordPress administrative back endforallyour taxonomy terms. These labels canandshould be
setuptobelocalized foreventual translation (seeChapter 11foranexplanation oflocalization).
Let’shave alook atwhat’ savailable tobeconfigured:
name Thegeneral name forthepost type, which istypically plural andoverrid-
denbypost_type_object->label .When internationalizing thisstring167 Taxonomies
inpreparation forlocalization, it’sbest tousethegettext context
matching your post type. Formore information oncontext translation
withgettext ,gototheCodex.3
singular_name Thename ofoneobject ofthepost type, which defaults tothevalue of
name .Using thegettext context translation type isuseful here aswell,
andisdescribed intheCodex.
add_new Thetextused foradding anew term, andthedefault value isAdd New
forboth hierarchical andnonhierarchical content types. This isanother
instance where it’sworth using thegettext context translation type (and
yes,youcanrefer totheCodex).
all_items Theallitems textused inthemenu, which defaults tothename label.
add_new_item Thetextused when adding anew item tothetaxonomy ,which defaults
toAdd New Post orAdd New Page .
edit_item Theedititem textwhose default isEdit Post orEdit Page .
new_item Thenew item textwhose default isNew Post orNew Page .
view_item Theview item textwhose default isView Post orView Page .
search_item Thesearch item textwhose default isSearch Posts orSearch Pages .
not_found Thenotfound textwhose default isNo Posts Found orNo Pages Found .
not_found_in_trash Thenotfound intrash textwhose default isNo Posts Found in T rashorNo
Pages Found in T rash.
parent_item_colon Theparent text, which isonly used onhierarchical content types. This
defaults toParent Page orParent Post .
menu_name Themenu name text, which defaults tothevalue ofname .
That’ sallthere istoregister_taxonomy() ,which frankly isanawful lot.Yetregister_taxonomy()
isreally justafunction thatdefines alotabout how wewant ourtaxonomy towork. This isbest
understood bylooking atareal-life example, solet’srevisit Rutherford Real Estate.
Using register_taxonomy()
We’vealready setupthecontent wireframes forRutherford Real Estate thatdefine their information
hierarchies. Asyoumay recall, wewant tocreate anew taxonomy tohandle locations (regions and
3http://codex.wordpress.org/I18n_for_W ordPress_Developers#Disambiguation_by_contextThe W ordPress Anthology 168
neighborhoods), aswell asaseparate taxonomy tohandle sales agents who represent theproperties
indifferent regions. Thelocations taxonomy needs tobehierarchical, asspecific neighborhoods
(Chicago, East Lansing, andTraverse City) aresubsets oftheregions they aresituated in(Midwest).
Conversely ,asales agent named Palmer may represent aproperty inseveral neighborhoods, and
inmore than oneregion, sothere isnohierarchical relationship with sales agents. Thetaxonomy
thathandles sales agents should therefore beloose instructure andactsimilarly totags. Let’ssee
what ourcode should look liketoregister ournew taxonomies:
chapter_07/register-taxonomy .php
<?php
//hook into the init action and call create_property_taxonomies
add_action( 'init', 'create_property_taxonomies', 0 );
//create two taxonomies, locations and sales agents
function create_property_taxonomies() 
{
  // Add new taxonomy locations, make it hierarchical (like categories)
  $labels = array(
    'name' => _x( 'Locations', 'taxonomy general name' ),
    'singular_name' => _x( 'Location', 'taxonomy singular name' ),
    'search_items' =>  __( 'Search Locations' ),
    'all_items' => __( 'All Locations' ),
    'parent_item' => __( 'Parent Location' ),
    'parent_item_colon' => __( 'Parent Location:' ),
    'edit_item' => __( 'Edit Location' ), 
    'update_item' => __( 'Update Location' ),
    'add_new_item' => __( 'Add New Location' ),
    'new_item_name' => __( 'New Location Name' ),
    'menu_name' => __( 'Locations' ),
  );
  register_taxonomy('location', post, array(
    'hierarchical' => true,
    'labels' => $labels,
    'show_ui' => true,
    'query_var' => true,
    'rewrite' => array( 'slug' => 'location' ),
  ));
  // Add new taxonomy for sales agents, NOT hierarchical (like tags)
  $labels = array(
    'name' => _x( 'Sales Agents', 'taxonomy general name' ),
    'singular_name' => _x( 'Sales Agent', 'taxonomy singular name' ),
    'search_items' =>  __( 'Search Sales Agents' ),
    'popular_items' => __( 'Prolific Agents' ),
    'all_items' => __( 'All Sales Agents' ),
    'parent_item' => null,
    'parent_item_colon' => null,169 Taxonomies
    'edit_item' => __( 'Edit Sales Agent' ), 
    'update_item' => __( 'Update Sales Agent' ),
    'add_new_item' => __( 'Add New Sales Agent' ),
    'new_item_name' => __( 'New Sales Agent' ),
    'separate_items_with_commas' => __( 'Separate agents with commas' ),
    'add_or_remove_items' => __( 'Add or remove agents' ),
    'choose_from_most_used' => __( 'Choose from the most prolific sales agents' ),
    'menu_name' => __( 'Sales Agents' ),
  ); 
  register_taxonomy('agent','post',array(
    'hierarchical' => false,
    'labels' => $labels,
    'show_ui' => true,
    'update_count_callback' => '_update_post_term_count',
    'query_var' => true,
    'rewrite' => array( 'slug' => 'agent' ),
  ));
}
?>
This pulls together allthatwe’ve justcovered ontheregister_taxonomy() function quite nicely—so
let’spick itapart. First ofall,we’re creating afunction calledcreate_property_taxonomies() ,
which we’re adding with theinit action hook. Ournew function begins bydefining a$labels
variable thatconsists ofthenested labels array wediscussed, andestablishes allthetextforthe
location taxonomy we’ll define inourfirstregister_taxonomy() function call. Notice thatin
keeping with standard coding practices throughout thisbook, wehave setupthevalues inourlabels
array tobelocalized ifrequired. Additionally ,intheregister_taxonomy() function we’ve defined
thehierarchical parameter tobetrue, ensuring thatlocations will work similarly tocategories.
Immediately after ourfirstregister_taxonomy() function call, wehave reset theinformation in
the$labels variable byadding anew array similar tothefirst, thistime inserting theinternation-
alized textvariables thatfocus onthesales agents. Weusetheprevious technique inpulling this
array into theregister_taxonomy() function thatdefines sales agents; however ,notice thatthis
time ourhierarchical parameter issettofalse, allowing theagents tooperate astags. We’ve also
added theoptionupdate_count_callback with astring value of_update_post_term_count toour
register_taxonomy() function. This ensures thatthetaxonomy behaves likeatag,andininstances
where youaddmultiple items tothetaxonomy separated bycommas, theitems aresaved asseparated
values asintended, rather than onelong, single item thatmakes nosense.
Wher e Do I Register?
Youcanregister new taxonomies anywhere youlike, solong asyoucallitwith theinit action
hook, butit’sprobably mainly called from atheme’ sfunctions.php file.While thistechnically works,
seriously consider whether thismakes themost sense foryour users. Ifyoutieyour custom taxonomyThe W ordPress Anthology 170
directly tothefunctions.php fileinyour theme, youessentially tieyour clients’ hands ifthey lack
thetechnical awareness oravailable expertise toport thetaxonomy registration intothesubsequent
functions.php fileofthenew theme. While every website hasitsown unique situations andcircum-
stances, custom taxonomies should beviewed asafeature ofthewebsite’ spermalinking structure,
notafeature ofthecurrent theme thatisactive onthesite. Therefore, taxonomy registrations should
behoused inamust-use plugin, ensuring thatthey stay with thewebsite itself, regardless of
whether ornotthetheme isswapped outatalater date.
Notice thatinthescreenshots andtheprevious code example, we’re associating ournew taxonomies
with generic posts. Inmany instances (especially arealestate property), youmay belooking toas-
sociate thetaxonomy with acustom post type instead ofageneric content type. Inthiscase, you’d
actually want tocallthename ofthecustom post type oranarray ofinstances ofthatpost type in
ahierarchical situation, asseen inthiscode chunk:
chapter_07/register-taxonomy-custom-post-type.php
<?php
// Associating the $object_type with an array of instances of custom post type
  register_taxonomy('location',array('property'), array(
    'hierarchical' => true,
    'labels' => $labels,
    'show_ui' => true,
    'query_var' => true,
    'rewrite' => array( 'slug' => 'location' ),
  ));
// Associating the $object_type with a single instance of a custom post type
  register_taxonomy('agent','property',array(
    'hierarchical' => false,
    'labels' => $labels,
    'show_ui' => true,
    'update_count_callback' => '_update_post_term_count',
    'query_var' => true,
    'rewrite' => array( 'slug' => 'agent' ),
  ));
Regardless ofhow yousetupyour taxonomy ,you’ll seeitinyour WordPress administrative back
endonce it’sregistered, andthus have theability tobegin managing content therein. ForRutherford
Real Estate, wehave chosen tojustassociate ourtaxonomies with regular oldposts. Asaresult,
youcanfind ourtwonew taxonomy types onthePosts submenu panel, asshown inFigure 7.4.171 Taxonomies
Figur e 7.4. Locations  taxonomy
Notice thatthelocations taxonomy management page looks identical tothecategories management
page; were wetohave alook atthesales agents taxonomy page, we’d seeaninterface thatlikewise
mimics thattagmanagement page. Furthermore, since we’ve associated ournew taxonomies with
posts, when wegotoaddanew post oreditanexisting post, we’ll now seetheappropriate meta
boxes intheright-hand column, asseen inFigure 7.5.
Figur e 7.5. Locations  and Sales Agents  meta boxesThe W ordPress Anthology 172
Wecanusethese meta boxes tomark ourproperty’ sneighborhood—as well asthesales agents
representing it—in thesame way weutilize categories andtags. Overall, it’sintuitive, easy-to-use
stuff!
Using Our Custom T axonomies
Once ourcustom taxonomies have been setupforRutherford Real Estate andwe’ve begun toput
upproperties onthesite, we’ll want toactually usethedata andmake itavailable forpublic con-
sumption. There areseveral ways tointegrate thedata onyour website, andit’sallabout creatively
using thefunctions andtechniques thatWordPress provides you. Let’shave alook atsome ofthese
methods now aswe’d apply them toRutherford Real Estate.
Takealook back atFigure 7.3andthatfinal wireframe weended upwith. When webegin coding
ourtheme forRutherford Real Estate, we’ll setthemenu uptomanage Home asastandard static
page, andboth News and Events asstandard categories thatcanberoutinely linked towith standard
nomenclature. Ourthree regions andtheir subsequent categories (aswell asourAgents taxonomy),
however ,canbemanaged inseveral ways, andyou’re probably going toneed some modifications
toTheLoop inorder tomake themagic happen. Technically ,youcould gointo your index.php or
archive.php template fileandbegin structuring TheLoop with some complex conditional logic to
getthings moving intheright direction, oryoucould take advantage ofWordPress’ stemplate
hierarchy nomenclature asitapplies tocustom taxonomies.
Taxonomy T emplate File Hier archy and Nomenclatur e
We’ve already discussed thenotion ofWordPress template hierarchies andnomenclature atlength
inChapter 6,butWordPress does give usatemplate hierarchy nomenclature dedicated tocustom
taxonomies. This isseen inFigure 7.6.173 Taxonomies
Figur e 7.6. Custom taxonomy template hier archy structur e
Using thistemplate hierarchy system automatically tells WordPress which visual blueprint should
beused foranygiven taxonomy .This automatically simplifies theprocess ofdeciding which
functional display logic we’ll useforeach ofourtaxonomy types byremoving theconditional logic
forus.Atthispoint, thetaxonomy nomenclature should befairly straightforward, butlet’sreview
itbriefly ,justtobesure.
Themost specific taxonomy template fileisthetopone, which inourexample might look like
taxonomy-location-firenze.php .Ifthisfilewascreated andpopulated, itwould bethedefault filethat
WordPress would utilize when displaying information forthe“Firenze” neighborhood. However ,The W ordPress Anthology 174
ifwewere comfortable with alltheneighborhoods andregions having display logic thatworked
inexactly thesame way,wecould addthatdisplay logic tothetaxonomy-location.php file.Similarly ,
ifwewanted ourdisplay logic forneighborhoods andagents toactthesame way,we’d befineusing
afilenamed taxonomy .php.From there, thenomenclature defaults into thegeneral system, with
archive.php andthen index.php being thefinal defaults inthatorder .It’seasy toseehow thiscan
allow youtocustomize theappearance ofWordPress inconjunction with taxonomies (especially
ifyouchoose towork with custom post types aswell), butexactly what type offunctions are
available inthecontext ofthese template files? We’reglad youasked …
Customizing Output with Functions That Must Be Called in The
Loop
Yes,we’re back tothemeat ofWordPress again; after all,who doesn’t love TheLoop? Weknow
thatTheLoop isthebeating heart ofWordPress, andinorder tocustomize thedisplay output and
functionality it’soften necessary torollyour sleeves upandplunge into thetemplate files that
manage logic inTheLoop. Withrespect tocustom taxonomies, there areseveral functions youcan
utilize tochange theway TheLoop pulls inpost information.
query_posts()
Back inChapter 3,wementioned thatyoucanusewp_query() tohandle justabout anyqueries
youwant within TheLoop, butifyoureally want tocustomize your queries andpull from just
asubset ofallposts, insome instances youmay need tousequery_posts() instead. This is
oneofthose instances. Let’ssayyouwould liketodisplay apost foraspecific taxonomy term.
Inourexample, thismay beasituation where youwanted todisplay alltheproperties thatare
being listed byoursales agent named Tela.Inthisinstance, youcould create atemplate called
taxonomy-agent-tela.php andusethefunction call<?php query_posts( array( 'agent' =>
'tela' ) ); ?> tolistallproperties thatarecurrently being represented byTela.Youcanac-
tually pass inanarray ofparameters todefine thisasspecifically asyou’d like. Formore inform-
ation astotheparameters thatareavailable tobepassed intothequery_posts() function, look
intheCodex.4Formore information onquery_posts() ,seethisCodex page.5
get_the_term_list()
get_the_term_list() needs tobeechoed inorder toprint tothescreen, andreturns anHTML
string oftheterms associated with agiven taxonomy .Forinstance, inasituation where we
might want tolistalltheindividual properties located inourEast Lansing neighborhood, using
thefunction call<?php echo get_the_term_list( $post->ID, ‘east-lansing’, ‘Properties
in East Lansing:’, ‘ ‘, ‘’ ); ?> would generate alisting ofalltheproperties we’re looking
for.Formore information onusingget_the_term_list() ,seetherelevant page intheCodex.6
4http://codex.wordpress.org/Class_Reference/WP_Query#Parameters
5http://codex.wordpress.org/Function_Reference/query_posts
6http://codex.wordpress.org/Function_Reference/get_the_term_list175 Taxonomies
get_terms()
Inasituation where youneed toretrieve anarray ofyour custom taxonomy values tomanipulate
them inother ways, youcanusetheget_terms() function. Inthisway,get_terms() isvery
much autility function with awide variety ofpotential programmable uses. Formore details
andideas onusing thisfunction, check outtheCodex.7
Customizing T axonomy Output outside of The Loop
Themost useful andcommon way tocustomize thedisplay ofyour taxonomy output outside of
TheLoop isthrough theuseofthewp_tag_cloud() function. This core function creates aTagCloud,
andoneoftheparameters itwill take isataxonomy parameter .Therefore, ifwedecided thatwe
wanted tocreate aTagCloud which listed allouragents andthen insert thattagcloud into our
sidebar ,wecould place thefunction call<? wp_tag_cloud( array( ‘taxonomy’ => ‘agents’ )
); ?> into theappropriate location, either inawidget orwithin thecode foroursidebar display .
Asyoucansee,custom taxonomies areuseful features thatarehidden inthedepths ofcore Word-
Press, andusing them toyour advantage canreally provide thepolish thatmakes your work super -
iortoyour competitors. It’snotthathard tousecustom taxonomies; it’smore acase ofunderstanding
how toregister them andthen utilize thetemplate hierarchy andafewloop functions tomake all
thepieces come together nicely .
Everything in Its Place
WordPress employs taxonomies tomanage content loaded inside it.Taxonomies aremethods of
grouping similar individual instances ofcontent together inmeaningful ways. Bydefault, WordPress
comes with three types oftaxonomies: categories, tags, andlinkcategories. Categories arehierarch-
icalbynature, while tagscanbeapplied toanygiven piece ofcontent, regardless ofwhere itsits
inthecontent structure, asalabel toprovide arelational categorization element tothecontent.
WordPress also gives youtheability tocreate custom taxonomies, andthere areseveral reasons
youmight setthem up,namely to:
■better organize thecontent onyour website
■increase thesearch engine optimization ofthepermalinks throughout your website
■give thewebsite amore professional, polished look andfeel
■segment content sothatitcanbeeasily queried onitsown
■institute entirely new functional requirements thataclient may have forthewebsite
7http://codex.wordpress.org/Function_Reference/get_termsThe W ordPress Anthology 176
Weillustrated custom taxonomies bylooking atapractical example ofsetting upataxonomy that
could beused inmanaging properties forafictional realestate company .Westarted outbyexplaining
theprocess ofcreating acontent wireframe tooutline anintuitive information hierarchy forcontent
inthesite. Wethen implemented theideas inthatwireframe byregistering what wefeltwasan
intelligent taxonomy design inamust-use plugin. Afterwards, wediscussed creating specialized
page templates thattook advantage oftheWordPress template hierarchy structure andnomenclature
tosimplify ourconditional logic. Wethen introduced TheLoop functions thatcould beused to
manipulate your new taxonomy data. Like anything else, taxonomies areeasy towork with when
youknow how!177 Taxonomies

Chapter8
Image Galleries and Featur ed Images
Working with images draws many first-time users tocontent management systems. After all,
everybody wants tobeable tochange textontheir posts andpages, sousers justlearning what
content management isallabout arekeen toknow how they canwork with images ontheir website.
Tothisend, justabout every modern content management system hassome sortofmechanism in
place toaddress images andimage galleries, andWordPress isnoexception. Let’shave alook at
some ofthemore advanced image manipulation tools thatWordPress makes available tous.
Revisiting the Media Libr ary and Media Settings
Tobriefly review what wediscussed about images inWordPress inChapter 2,users areable to
upload images toWordPress invarious locations. IntheWordPress administrative back end, you
cannavigate totheMedia subpanel andaddnew images byclicking onMedia >Add New ,orby
editing anew orexisting post orpage andadding animage directly from thecontent editor .Either
way,theimage isuploaded intoWordPress’ smedia management area, known astheMedia Library .
TheMedia Library therefore provides youdirect access toview andmanage allimages, audio files,
videos, andadditional media filetypes thathave been uploaded directly toyour WordPress install-
ation. Ifyouneed toview ormodify themetadata foranyimage thathasbeen loaded tothesite,
youcandosointheMedia Library .
Once animage hasbeen uploaded intoWordPress andthus theMedia Library ,itcanthen beinserted
either intoapost orpage with specific formatting andsizing parameters. Theformatting parameters
arefairly straightforward—you canalign images leftorright, orcenter them, andyoucanalso
provide different values forvertical andhorizontal spacing—but oneelement thateven seasoned
professionals canmiss isthatWordPress allows youtoinsert alarge, medium, orthumbnail version
oftheimage. What’ snotable about thisisthatWordPress isn’t justoffering toapply aninline HTML
orCSS style toyour image tomake itdisplay inaparticular dimension; it’sactually amodified
version oftheimage thathasbeen scaled down byWordPress’ simage processing features. Let’s
explore image processing abitdeeper .
Configuring Image Pr ocessing in Media Settings
Ifyouhave been aweb developer formore than fiveyears, youhave probably runintothesituation
more than once where clients wanted toupload images straight from their digital camera totheir
website, andsuch images were routinely way toolarge. Teaching clients touseimage-resizing
software isatask initself thatnone ofusnecessarily signed upfor,soultimately it’spreferable for
theproblem tobesolved bytheCMS you’re using. Like many other content management systems,
WordPress fixes thisproblem byactually processing theimage upon itsinitial upload totheMedia
Library .What happens isthatwhen animage isuploaded, WordPress assesses itsdimensions and
matches itagainst thesizing parameters thathave been defined intheMedia Settings subpanel,
located atSettings >Media Settings andseen inFigure 8.1.
Figur e 8.1. Setting image sizes
There arethree different sizing parameters thatyoucanset,andthey aredefined asfollows:
Thumbnail size
Thethumbnail isacropped version oftheoriginal image, andyoucansetittobecropped to
specific sizes. Bytheir very nature, thumbnails arenotnecessarily meant toinclude theentire
image, butrather aportion ofitthatrepresents theimage asawhole. Thumbnails areoften
clickable, andWordPress’ sgallery shortcode (which we’ll discuss inabit)uses thumbnails by
default tobuild image galleries.The W ordPress Anthology 180
Medium size
Amedium-size image isthefullimage thathasbeen downsized tomeet auniform image size.
WordPress willtake thelarger oftheimage’ swidth orheight andscale theimage proportionally
tothemedium image setting’ sMax W idthorMax Height .
Large size
This isidentical tothemedium-size image, with thepredictable exception thattheMax W idth
and Max Height dimensions arelarger butstilldesigned tofitwithin thecontext ofthewebsite
design.
WordPress then creates theappropriate new,smaller images thatrelate totheoriginating image. In
instances where theoriginal image being uploaded issmaller than oneofthemedium orlarge image
sizes defined, thatparticular large ormedium sizing issimply notcreated. Forexample, let’ssay
youareuploading animage named anna.jpg with dimensions of1,000 pixels by1,500 pixels. In
thisinstance, andassuming weused thesettings inthescreenshot, WordPress would ultimately
store four versions oftheimage foreventual useonthesite:
■anna.jpg (original)
■anna-150x150.jpg (thumbnail size)
■anna-200x300.jpg (medium size)
■anna-682x1024.jpg (large size)
However ,were wetoupload adifferent image named readicculus.jpg whose original dimensions
were 376pixels by126pixels, only three versions oftheimage would bestored foreventual use:
■readicculus.jpg (original)
■readicculus-150x126.jpg (thumbnail size)
■readicculus-300x100.jpg (medium size)
Inthisinstance, there’ snoneed tohave alarge image created, asthelarge sizedimensions arein-
herently bigger than theoriginal image. Note also thatbecause theoriginal image’ sheight of126
pixels issmaller than thedefault thumbnail height of150pixels, thethumbnail height sizejust
defaults to126pixels. WordPress makes noattempt toaddadditional pixels inorder tomake an
image fit.
Finally ,it’simportant toreiterate thatWordPress only runs image processing upon theinitial upload
oftheimage. This means thatifyouhave abunch ofimages loaded outtotheMedia Library and
decide tochange thedimensions ofyour thumbnails (perhaps tofacilitate atheme change), the
thumbnails won’t beautomatically reprocessed tomatch your new settings. Todothis, you’ll either
need tore-upload your images with thenew settings applied (which isanunattractive option), or
youcanuseaplugin toassist youinregenerating your specifically sized images. There areplenty181 Image Galleries and Featur ed Images
ofplugins available within theWordPress Plugin Directory thatdothisforyou, butonethat’sworth
looking atinparticular isAJAX Thumbnail Rebuild.1
AJAX Thumbnail Rebuild isahandy utility because itwill letyourebuild allthesetsizeimages
(thumbnails, medium-size, andlarge-size) onyour siteatthesame time inaresource-efficient way.
Many thumbnail rebuilding plugins will runoffasingle script thattells theserver toresize the
images allatonce, andinsituations where youhave alotofimages toresize, thescript may time
outonsome servers. Forthisreason, AJAX Thumbnail Rebuild isuseful asitfires thescript indi-
vidually foreach photo, thus keeping thescript execution time toaminimum.
The [gallery]  Shortcode
Forallthecool functionality thatcanbebuilt into shortcodes (seeChapter 5orChapter 9),it’s
mildly surprising thatWordPress core developers failtomake more useofthem tointroduce en-
hanced functionality within thesystem. That said, core WordPress comes preloaded with exactly
oneshortcode: [gallery] .Thegallery shortcode isoften overlooked bydevelopers because, quite
frankly ,many ofusareyettorealize it’sthere andavailable touse. There isamultitude ofpopular
image gallery plugins outthere andinheavy use, butthegallery shortcode institutes some really
cool functionality right outofthebox, andisahidden gem intheWordPress toolkit.
Asisimplied byitsname, thegallery shortcode canbeused toinsert aphoto gallery directly into
apost orapage where the[gallery] tagisadded inthecontent editor .Theshortcode itself fires
acore WordPress PHP script thatconstructs thegallery foryou, andpulls alltheimages thatare
either embedded within thepost orpage, orareotherwise attached tothepost orpage. This isan
important distinction, asitisentirely possible to“attach” images toaparticular post orpage without
actually embedding them directly inthecontent. Inorder todothis, gototheMedia Librar y,click
open theScreen Options atthetopofthescreen, andmake sure tocheck theAttached to checkbox,
asseen inFigure 8.2.
1http://wordpress.org/extend/plugins/ajax-thumbnail-rebuild/The W ordPress Anthology 182
Figur e 8.2. Attaching images
This will show youwhat page orpost anygiven image isattached toforthepurpose ofyour image
galleries, andwill letyouselect apage/post iftheimage isunattached. Using theMedia Library in
thisinstance isaneasy way tomanage which images arelocated within which image galleries on
anygiven post orpage.
Common Uses of [gallery]
Simply inserting the[gallery] shortcode intoapage orpost willautomatically grab alltheimages
attached tothatpage/post andcreate animage gallery ,which isformatted intothree rows using the
thumbnail astheclickable link toview alarger version oftheimage. Youcancontrol these default
gallery characteristics bypassing theshortcode options, which isdone similarly topassing parameters
toaPHP function. Thesyntax ofanyshortcode (and thus the[gallery] shortcode) isthefollowing:
[gallery option1=“parameter1” option2=“parameter2” option3=“parameter3”] 
Therefore, youcancontrol thegallery’ sappearance andoutput byworking with theseveral built-
inoptions. Like many functions, several ofthese arefrequently used, while others areformore
specialized purposes. Let’shave alook atthemost popularly used options:
columns
This option determines thenumber ofcolumns thatshould bebuilt into theimage gallery by
triggering theinsertion ofabreak tagattheappropriate location. This option defaults to3.
id
This specifies theIDofthepost, anddefaults tothecurrent post IDthattheshortcode isinserted
into. This isuseful ifyouwant toinsert theimage gallery from adifferent page orpost onto183 Image Galleries and Featur ed Images
your current post; forinstance, ifyouwere editing apost with anIDof42,andyouwanted to
insert theimage gallery from apost with anIDof84,youwould usethisoption.
size
Bydefault, theimage thatisused fordisplay within thegallery itself isthethumbnail image.
However ,ifyouwant touseadifferent image forgallery display ,youcanchoose thesizesetting
with thisoption. Values forthisoption arelimited tothumbnail (which isthedefault), medium ,
large ,andfull .
Pulling allthistogether ,let’ssaywewere looking toinsert atwo-column image gallery forallthe
images inpost 197, andwewanted tousethemedium-sized images forthegallery thumbnails. In
thisinstance, we’d insert ashortcode thatlooks likethis:
[gallery columns="2" id="197" size="medium"] 
Piece ofcake, right? You’ll rarely need touseanyother options with the[gallery] shortcode, but
there areafewmore tricks youcandowith it.Let’slook atsome ofitsmore advanced uses.
The Psychology Behind ID
Wondering what wemean when we’re talking about ID?Ifyou’re unsure, don’t sweat it…it’snot
insanely intuitive. InWordPress, every post, page, andpiece ofmedia isgiven aunique IDthat
identifies itfrom everything elseinside WordPress. IDsstart with thenumber 1,andincrease se-
quentially .Youcanfind outwhat agiven page orpost IDiswhen you’re intheWordPress back
endbyrolling your cursor over thelinktoeditthepost andlooking atthetrailing numerical value,
orbyactually clicking toeditapost andlooking forthevalue inthesame location. Alternately ,if
forsome reason youdon’t have pretty permalinks enabled, theIDwill bethenumber listed inthe
link ofyour post orpage. Likewise, when yougototheMedia Librar yandrollover orclick ona
given piece ofmedia, you’ll beable tofind theattachment_id thesame way.
Specialized Uses of [gallery]
There areeight more options atyour disposal toplay with when youtinker with the[gallery]
shortcode. Let’shave alook atthem now.
orderby This option letsyouspecify theitem used tosortthedisplay thumbnails. Itdefaults
tomenu_order ,butalso takesIDandRAND (which means random) asvalues.
order This option letsyouspecify thesortorder used todisplay thumbnails, andtakes
ASCorDESC (ascending ordescending) asvalues.
itemtag This isthename ofthetagused toenclose each item inthegallery ,anditdefaults
todl.The W ordPress Anthology 184
icontag This isthetagused toenclose each thumbnail icon inthegallery ,defaulting todt.
captiontag This tagisused toenclose each caption inthegallery ,anddefaults todd.
link This option canbesettofile ifyoulike, which will cause each image todefault
directly totheimage filerather than theattachment’ spermalink; thiswillessentially
give theattachment itsown page onyour site.
include This option isused toprovide alistofcomma-separated attachment IDs,which
means thatthegallery willexplicitly only include theimages specified. This option
cannot beused inconjunction with theexclude option, anditsformat looks like:
[gallery include=“42,89,229”]
exclude This option provides alistofcomma-separated attachment IDs,butthistime the
gallery will explicitly exclude theimages specified. This option cannot beused in
conjunction with theinclude option, andtheformat looks like:
[gallery exclude=“55,72,111”]
Taking allthese options into account andlooking athow tousethem together ,let’ssaythatwe
wanted tochange thegallery markup touse<div> ,<span> ,and<p>tags. We’llspecifically exclude
several files from ourgallery ,which we’d liketobefivecolumns wide. Inthisinstance, we’d use
thefollowing implementation oftheshortcode:
[gallery columns="5" itemtag="div" icontag="span" captiontag="p" exclude="4,12,19"]
Forthemost part, thisisallfairly intuitive stuff once yourealize thatthe[gallery] shortcode is
around andavailable tobeworked with atall.However ,what’ salso kind ofcool isthatWordPress
hasabuilt-in visual editor tomanage[gallery] shortcode options.
Working with [gallery]  in the Content Editor GUI
After youinsert the[gallery] shortcode intothevisual content editor andsave your post orpage,
thevisual editor will nolonger display theshortcode (although you’ll stillbeable towork with it
viatheHTML view ofthecontent editor). Inthevisual editor ,you’ll find alarge light blue boxthat
denotes theexistence ofthegallery .Ifyourollyour cursor over thisbox, you’ll seetwobuttons
show upintheupper left-hand corner oftheboxinmuch thesame way youseethem when looking
toeditanexisting image. Theboxontheright canbeused todelete thegallery ,butclicking onthe
boxtotheleftwillbring upalightbox with options forworking with andmanaging thegallery .The
screenshot seen inFigure 8.3shows theimages we’re using foroursample gallery ,andgives us185 Image Galleries and Featur ed Images
plenty ofoptions towork with them. We’llnow briefly gothrough thevisual options describing
what youcandohere.
Figur e 8.3. Content editor gr aphical user interface
Atthetopofthedialog boxyou’ll seeavisual representation ofalltheimages inthegallery .Here,
youcaneither numerically change their order bychanging thenumbers intheboxes ontheright,
oryoucanjustdrag anddrop them into your preferred order (which isawhole loteasier andabit
more rewarding). Youcanalso click theShow button todisplay andmodify thecharacteristics of
anygiven image. Clicking theShow button willalsoallow youtoremove animage from your gallery ,The W ordPress Anthology 186
ormake itthefeatured image foryour page orpost. Furthermore, atthebottom ofthedialog box
arecontrols tochange what thethumbnails linkto,decide how youwant toorder your images, and
govern thenumber ofcolumns youwant theshortcode tocreate onyour behalf. When youfinish
making your modifications, besure tosave your gallery settings andchanges, aswell asyour page
orpost toensure thatthegallery changes you’ve made areactually committed.
Firing the [gallery]  Shortcode fr om a T emplate
Ifyouareatheme developer andliketheidea ofthe[gallery] shortcode, butwould liketoharness
itwith alittle more control, youmay choose tofireitdirectly from within thetemplate. Asimple
way ofdoing thisistoecho theshortcode with thedo_shortcode() function directly within apage
template inside your theme likethis:
<?php echo do_shortcode('[gallery columns="4"]'); ?>
Obviously youcanusewhatever [gallery] shortcode options you’d prefer foryour theme. Ifyou
want tomake thegallery abitmore dynamic, perhaps because you’re actually looking tocreate a
series ofgalleries throughout your theme, youcould alsouseafilter hook toaddappropriate galleries
with code similar tothefollowing:
chapter_08/dynamic-galleries.php
<?php
  $gallery_shortcode_feature = '[gallery id="' . intval( $post->post_parent ) . ➥
    '"]';
  print apply_filters( 'the_content', $gallery_shortcode_feature );
?>
Lightboxes
Allright, let’sbehonest: galleries arecool andall,butWordPress’ sdefault options ofeither viewing
animage inanattachment page, orviewing itinitsrawformat onitsown…well, they’re abit
vanilla. Tothisend, lightboxes have become apopular solution asamechanism toscroll through
image galleries without leaving thethumbnail area. Alightbox isanoverlay thatdarkens everything
onasite(usually with some amount oftranslucency thatallows youtostillmake outthesitein
thebackground) anddisplays anelement ontopofthesite. Usually lightboxes areused todisplay
images, butyoucandisplay almost anything with them—videos, opt-in boxes, external HTML
pages, whatever youwant.
Ingeneral, lightboxes arecrowd-pleasers. They’re easy toimplement, andgarner alotof“oohs and
aahs” from your clientele, butit’stypically agood idea toensure thatyoureally want tousethem.
How about aquick pros andcons list?187 Image Galleries and Featur ed Images
Thepros listisobvious. First andforemost, alightbox makes itmuch easier formost ofyour users
toview your galleries. They canclick onanimage, which instantly pops upinahandy inline screen
right inthebrowser .Well-constructed lightbox scripts also have solid, intuitive, andeasy-to-use
navigation, which makes iteasy foryour user toflipthrough anentire gallery quickly andwith
style. And ofcourse, let’snotforget thatlastword, style. Simply put,lightboxes arejustreally sexy,
andaneasy way toaddabitofbling toanywebsite.
Asforthecons, thebiggest oneisthatlightboxes arebuilt inJavaScript. While it’sbecoming more
rare, occasionally you’ll find auser who’ sdeactivated JavaScript inthebrowser forsome reason,
andthegallery justfails towork inthatinstance. Ofcourse, youcould make thecounterargument
thatusers who choose todeactivate JavaScript should beused tosuch situations, butthat’sreally
adifferent discussion altogether .Furthermore, youmay want toconsider theuser experience of
flipping through photo galleries onmobile devices. Where thescreen isvery small, lightboxes may
beapoor choice. However ,some scripts have solid deprecation thathandle mobile devices well.
Overall, youwant tobecertain thatanylightbox script youchoose avoids overriding mobile device
default image handling.
Soifyouaresold ontheconcept ofusing alightbox foryour galleries atthispoint, thenext question
isnaturally about how todoit.Youhave twooptions here: youcaneither code ascript right into
your theme using thewp_enqueue_script() function (seeChapter 9formore information astoits
usage), oryoucanadopt theeasier route ofjustusing oneofseveral readily available plugins. Note
thatifyouareatheme developer ,you’ll probably want topass onusing aplugin andbuild your
script intoyour theme. However ,ifyouarejustsetting upasiteforaclient orforyourself, aplugin
isoften theeasiest andmost flexible way togo.There aretons ofthem available intheWordPress
Plugin Directory .
Working with Featur ed Images
Playing with galleries islotsoffunforendusers, butifyouareatheme developer andarelooking
tomake useofWordPress’ sbuilt-in image-handling functions toyour advantage, you’re probably
alotmore interested inworking with featured images. Thefeatured image functionality that’sbuilt
into WordPress allows youtouseanimage torepresent each page orpost forusesomewhere on
thewebsite. Often theimage isjustdisplayed inacropped format next tothepost’ sexcerpt, butit
could bedisplayed anywhere, andtheme developers find itquite handy .
Enabling Support for P ost Thumbnails
Thefirst point youwant torealize about featured images isthatthey aresynonymous inthe
WordPress world with theterm post thumbnail .Originally introduced inWordPress version 2.9,
post thumbnails arenow more commonly referred toasfeatured images. Sowhile werefer tothem
asfeatured images, alltheWordPress function documentation refers tothem aspost thumbnails,
which isonly alittle bitconfusing.The W ordPress Anthology 188
Post thumbnails areactually atheme feature defined inWordPress, sothey need tobeactivated
within thetheme togain access totheir fullfunctionality anduser interfaces. Hence, thefirst step
istoaddtheme support forpost thumbnails byadding thefollowing code toyour functions.php file:
chapter_08/add-theme-support.php
<?php
if ( function_exists( 'add_theme_support' ) ) { 
  add_theme_support( 'post-thumbnails' ); 
}
?>
Asyoucansee,inthiscode we’ve ensured thatourtheme will remain compatible with WordPress
installations older than 2.9bychecking toseeifthefunction add_theme_support() exists before
wegoahead andinitiate it.Afterwards, simply adding thepost thumbnail support aswe’ve done
here isenough toaddthepost thumbnail user interface forboth page andpost content types. If,for
whatever reason, youonly want toaddpost thumbnail support foreither pages orposts, replace
theadd_theme_support() function with theappropriate selection aslisted inthiscode:
chapter_08/add-theme-support-posts-OR-pages.php
<?php
add_theme_support( 'post-thumbnails', array( 'post' ) ); 
  // Add support individually for posts
add_theme_support( 'post-thumbnails', array( 'page' ) ); 
  // Add support individually for pages
?>
Once youhave your theme supporting post thumbnails, youhave awhole setoftemplate tagsand
other functions available touseinyour theme’ stemplate files. These include functions andtags
such as:
■has_post_thumbnail()
■the_post_thumbnail()
■get_the_post_thumbnail()
■set_the_post_thumbnail_size()
We’lltalkabout some ofthese functions shortly ,butifyou’d liketoread more about what’ savailable
toyouasatheme developer inreference topost thumbnails, have alook attheCodex.2
2http://codex.wordpress.org/Post_Thumbnails189 Image Galleries and Featur ed Images
Functions Ar e Fine
Throughout thisbook, wefocus heavily onchoosing thecorrect location tocode anyfunctionality
into your site. Inmost situations, wesuggest thatyoushould beplacing your site’sfunctionality
inplugins tokeep itindependent ofthetheme, sothatthesitedoesn’t break ifyouchange your
theme. However ,inthisparticular case allyour code canquite comfortably beembedded intoyour
functions.php file,aspost thumbnail support tends tobemuch more about display logic than itis
about general sitelogic. There areinstances where youcanmake thecase thatthisisn’t so,and
that’swhen it’spermissible toembed thefunctionality inamust-use plugin, butfunctions.php will
often work justfineforthese purposes.
Sizing Y our Post Thumbnails
Once you’ve enabled post thumbnails inyour theme, you’ll need todetermine what sizeyouwant
thepost thumbnails tobewherever youhappen tobeusing them inyour theme. Youhave two
options here: youcaneither choose tousethedefault thumbnail sizeasspecified within theMedia
Settings screen intheback end, oryoucangoyour own way andfixthesizeforyour own purposes
atthatlocation inyour theme. While keeping thesizeeditable inWordPress may seem likeagood
idea atfirst, from theperspective ofatheme developer ,we’d liketokeep asmuch ofthetheme’ s
functionality asbulletproof aspossible. Therefore, it’stypically wiser tograb thepost thumbnail
sizeright inside thecode andwork from there. Todothis, you’ll usetheset_post_thumbnail_size()
function, which takes thefollowing parameters:
<?php set_post_thumbnail_size( $width, $height, $crop ); ?>
These parameters areequivalent to:
$width thepost thumbnail width inpixels
$height thepost thumbnail height inpixels
$crop ABoolean thatdetermines iftheimage willbecropped. This defaults tofalse ,meaning
thatbydefault your image won’t becropped, butrather resized proportionately tofit
inside thesizesetinthefirst twoparameters.
What’ simportant tonote here isthatyouessentially have twochoices forhow youdisplay featured
images. Ifyouomit the$crop parameter orexplicitly setittofalse ,your image will beresized
proportionately tofitinside thatspace. Therefore, ifyouhave athumbnail sizeof150pixels wide
by150pixels tall,butyour featured image actually hasadimension of200pixels wide by300pixels
tall,your image will bedisplayed with awidth of100pixels andaheight of150pixels. Onthe
positive side, you’ll beable toseethewhole image, butitmay notnecessarily look uniform with
therestofyour post thumbnails. Yourother option here istosetthe$crop parameter astrue ,whichThe W ordPress Anthology 190
will simply chop theappropriate amount from theleftandright sides, orfrom thetopandbottom
oftheimage, ensuring auniform look with allfeatured images onthewebsite.
Adding Differ ent-sized P ost Thumbnails
Another handy toolyoucanuseinrelation topost thumbnails istoactually addyour own custom
thumbnail types with their own respective sizing. This canbeuseful inslightly complex theme
designs where youmay want touseseveral sizes ofthepost thumbnail indifferent places across
thesite. Forexample, youmay liketousealarge, uncropped featured image forthefirst twoposts
inyour post listing pages, andthen have smaller ,cropped post thumbnails fortheremaining eight
posts onthatpage. Tomake thishappen, usetheadd_image_size() function, which takes thefol-
lowing parameters:
<?php add_image_size( $name, $width, $height, $crop ); ?>
Theparameters areequivalent to:
$name thenew image sizename, which canbecalled asahandle bythe_post_thumbnail()
$width thepost thumbnail width inpixels
$height thepost thumbnail height inpixels
$crop ABoolean thatdetermines iftheimage willbecropped. This defaults tofalse ,meaning
thatbydefault your image won’t becropped butrather resized proportionately tofit
inside thesizesetinthefirst twoparameters.
Ifwewanted toautomatically create these custom image sizes forthelarger featured image (we’ll
callitfeatured-image inourfunction) andoursmaller cropped versions (we’ll callthosesmall-
crops ),wecould usethefollowing code inourfunctions.php filetomake ithappen:
chapter_08/custom-image-sizes.php
<?php
add_image_size( 'featured-image',  424, 9999 ); 
  // uncropped featured image fixed to 424 pixels wide with no height restriction
add_image_size( 'small-crops',  150, 100 , true ); 
  // cropped image fixed to 150 x 100 pixels wide
?>
Remember ,thumbnail images areonly created during theinitial image upload, sobesure totake
account ofthatfact. Finally ,when wewant touseeither ofournew custom image sizes inour
theme, wecancallthe_post_thumbnail() andpass ittheimage sizehandle likethis:191 Image Galleries and Featur ed Images
<?php the_post_thumbnail( 'featured-image' ); ?>
Allofwhich brings ustothefunpart: actually implementing ourfeatured images inourthemes.
Post Thumbnail Implementation in Themes
Once wehave everything prepped andready togowith ourpost thumbnails, actually implementing
them inourcustom themes isabreeze. Todothis, we’ll make useoftwofunctions:
has_post_thumbnail() andthe_post_thumbnail() .Both these functions should beused inyour
theme’ stemplate files within TheLoop inorder towork correctly .
has_post_thumbnail() isasimple Boolean function that’sused inaconditional PHP loop, returning
avalue thatdescribes whether ornotapost hasapost thumbnail associated with it.Ifitdoes, you
canusethethe_post_thumbnail() function todisplay thethumbnail inthatlocation. Let’slook
atasimple version ofthisscript inaction:
chapter_08/if-post-thumbnail.php
<?php
if(has_post_thumbnail()) {   // Does the post have a thumbnail?
  the_post_thumbnail();   // If a thumbnail exists, display it
} else {
  // Do something else here in place of a post thumbnail
  }
?>
This isjustasimpleif/else statement thatdegrades gracefully towhatever action you’d likeitto
intheevent thatapost thumbnail isabsent. When it’spresent, usingthe_post_thumbnail() you
caneither print itoutdirectly tothescreen, oryoucanpass itback toyour PHP code toperform a
task with itusingget_the_post_thumbnail() .Thefunctions arevery similar ,sowe’ll take abrief
look ateach onebeginning withthe_post_thumbnail() ,which takes thefollowing parameters:
<?php the_post_thumbnail( $size, $attr ); ?>
Theparameters aredefined as:
$size This istheimage sizethatyouwant touseinthethumbnail, with acceptable values being
thumbnail ,medium ,large ,full ,orthename ofthehandle thatyoucreate with the
add_image_size() function. Alternately ,youcanpass inanarray todescribe thesizeyou
want; forexample, the_post_thumbnail( array( 150, 150 ) ) .The W ordPress Anthology 192
$attr This isanarray ofattributes most commonly used toassign alignment classes. Formore
information onavailable attributes, seetheCodex.3
Bysimply adding thisfunction inyour conditional logic, you’ll beable toprint outyour post
thumbnails where youwant them. However ,ifyouneed topass thethumbnail toanother PHP
script, you’ll usetheget_the_post_thumbnail() function, which takes thefollowing parameters:
<?php get_the_post_thumbnail( $id, $size, $attr ); ?> 
Theparameters aredefined as:
$id This isthepost IDforthepost orpage ofthethumbnail you’re looking toretrieve, andis
arequired value.
$size This istheimage sizethatyouwant touseinthethumbnail, with valid values being
thumbnail ,medium ,large ,full ,orthename ofthehandle thatyoucreate with the
add_image_size() function.
$attr This isanarray ofattributes most commonly used toassign alignment classes. Formore
information onavailable attributes, seetheCodex.4
Note thatbecause youcanpass inan$idparameter ,youcanuseget_the_post_thumbnail() outside
TheLoop, ifyouwish. Withthistype offlexibility available, thecreative useofthese twofunctions
will allow youtodopractically whatever you’d liketodowith thefeatured image functionality in
WordPress.
Got the Pictur e?
There arealotofopportunities foradvanced image manipulation inWordPress, andwecovered a
substantial amount inthischapter .Westarted offbyrevisiting thenotion ofuploading images to
acentral Media Librar yinyour WordPress installation, andexplained why thatmatters inthecontext
ofworking with WordPress galleries. Wealso revisited theMedia Settings section oftheWordPress
administrative back end, discussing what thedifferent image sizes areallabout, andhow (and
when) they areused. Inaddition, wenoted thatwhile WordPress does process images tocreate the
image sizes thataredefined within theMedia Settings area, thisimage processing isonly done upon
theinitial upload oftheimage. Ifyouwant toresize images thathave already been uploaded tothe
Media Library ,you’ll need tomake useofoneofanynumber ofavailable plugins found inthe
WordPress Plugin Directory .
After that, wemoved ontotalkabout thesole shortcode thatcore WordPress gives ustoplay with:
the[gallery] shortcode. Because it’stheonly shortcode thatcomes pre-rolled inWordPress, it’s
3http://codex.wordpress.org/Function_Reference/the_post_thumbnail#Parameters
4http://codex.wordpress.org/Function_Reference/get_the_post_thumbnail#Parameters193 Image Galleries and Featur ed Images
commonly overlooked byboth novice andseasoned WordPress developers alike, butyoucando
allsorts ofcool stuff with it.Wecovered allthebasic options forWordPress galleries, aswell as
how tochange them both manually within thecontext oftheshortcode andviathegraphical user
interface thatappears once yousave agallery inapage orpost.
Addressing theneeds ofprofessional theme developers, wetalked abitabout how toeffectively
fireboth individual anddynamic galleries directly from your page templates, before discussing the
useoflightboxes asmechanisms tocreate abetter viewing experience forusers looking through
your galleries. Finally ,wetalked about featured images, which arethesame thing aspost thumbnails
(inWordPress, thetwoterms aresynonyms). Post thumbnails arereally easy touse, andneed to
beenabled asatheme feature inthefunctions.php file.Wediscussed using built-in image sizes, as
well ascreating new ones forcustomized purposes, before going intoabrief explanation about how
toactually display post thumbnails inyour theme, orpass them into your PHP logic foruseina
script.
Inaway,youcould saythatallthepost thumbnail functionality integrated into WordPress isa
form ofapplication programming interface. This leads usquite nicely into ournext chapter—
WordPress APIs!The W ordPress Anthology 194
Chapter9
The W ordPress API
Learning how tointimately work with themost fleshed-out portions ofWordPress canbeadetailed,
arduous task, butasyougetpretty hardcore with some ofthehandstands you’d likeWordPress to
perform onyour behalf, youmay well find theneed togotothemost low-level functions WordPress
hastooffer.Tothisend, theWordPress APIoffers some avenues toreally fine-tune your installation.
Developers differ intheir ideas ofwhat anAPIisbecause, inpractice, it’soften presented asatool
thatperforms avery specific function. Since most ofuspick upnew concepts aswegoonanas-
needed basis, wetend tolearn how towork with aparticular API, andthen assume thatallAPIs
areused forthatparticular purpose. Usually ,theterm APIisused inrelation toproviding aninterface
within aparticular software program thatother external programs canusetoform acommon language
andcommunicate data between oneanother .When youmake your website talktoFacebook, for
example, youaremainly using theFacebook API. Likewise, providing aninterface forwebsites to
useaparticular merchant account vendor isoften done using theAPIterminology .Whether thisis
your exposure toAPIs, orotherwise, youprobably already have afairidea ofitsdefinition.
While most ofusknow thattheacronym APIstands forApplication Programming Interface, in
reality itisacatch-all term thatdescribes agroup ofideas rather than asingle function. Theterm
canbeused torefer toanentire interface, asingle function, orasetofcomplete interfaces thatserve
different functions. Therefore, theterm APIisdefined bythecontext ofitsuse.APIs canbelanguage-
dependent, making them more convenient touseinanenvironment where thelanguage isconstant,
orlanguage-independent, where their functionality canbeaccessed byavariety ofprogramming
languages; thelatter ismore appropriate forweb services andhence, more common forwhat we
need todo.Infact, theWordPress APIitself isdefined as“the plugin/theme/add-on interface created
bytheentire WordPress project.” Putthatway,youcould make thecase thateverything wehave
already covered inthisbook—as well asanything you’ll ever findintheCodex—is alltheWordPress
API, butthat’salittle toobroad. Solet’snow askthemillion-dollar question: what exactly isthe
WordPress API, aside from everything ?
Glad youasked. There’ sactually apage ontheWordPress APIintheCodex.1Forourpurposes,
we’re going tobetalking about theWordPress APIinterms ofthese more specialized, compartment-
alized aspects ofWordPress thatyoucanindividually tapintoandmanipulate tofinetune different
aspects ofyour WordPress website. We’realso going toextend theconversation alittle bitwith
some other functions that, while notofficially listed here within theWordPress API, enable youto
doallsorts ofreally cool andinteresting things. Seriously ,thisisthestuff thatseparates thefigur -
ative men from theboys intheWordPress world. Let’sgetiton!
A Quick Review of the APIs Cover ed So Far
Soifyou’ve been paying attention, youprobably remember seeing theterm APIthrown around in
several places throughout thisbook already .We’ve already covered some ofthemore commonly
used APIs indetail inChapter 5,sowe’ll justreview them here. Ifyouwant tolearn more about
how anyofthem work, flipback toChapter 5andhave alook. Otherwise, jump ahead andstart
digging into thenew stuff.
Widgets API
TheWidgets APIisthecollected setofPHP functions thatmanage thecreation, registration
andusage offunctions ofsidebars (orwidgetized areas) andwidgets inside WordPress. Within
anygiven WordPress installation, theWidgets APIcanbelocated inwp-includes/widgets.php .
Anadditional detailed explanation oftheWidgets APIcanbefound intheCodex.2
Plugins API
ThePlugins APIessentially deals with actions hooks andfilter hooks. Forthemost part, it’sa
safebettoassume thattheentirety ofChapter 5inandofitself documents thePlugins API,
minus theareas thatspecifically discuss theWidgets APIandShortcodes, which we’ll talk
about next. Foradditional information onthePlugin API, take alook intheCodex.3
Shortcode API
TheShortcode APIisthecollected setofPHP functions thatcreate macro codes, which canbe
used toinsert complex functionality inside post content, andwecallthese macro codes short-
codes .Asheavily documented inChapter 8,WordPress includes onemajor shortcode thatadds
photo gallery functionality toanygiven post orpage—[gallery] —but wecanmake ourown
1http://codex.wordpress.org/W ordPress_API's
2http://codex.wordpress.org/W idgets_API
3http://codex.wordpress.org/Plugin_APIThe W ordPress Anthology 196
quite easily .Webriefly discussed shortcodes ingeneral inChapter 5,butwe’ll study them in
detail now.
Shortcodes under the Micr oscope
Shortcodes arewritten inaformat very similar inappearance toWordPress filters where weadd
andname ashortcode, andthen associate itwith ahandler function thatactually executes thelogic
being called within theshortcode:
add_shortcode( 'shortcode-name', 'shortcode-handler-function' );
Shortcode handler functions commonly accept twoparameters (and forsome very rareuses, athird
thatwewon’t discuss asit’lljustconfuse thenotion):
■$atts :anarray ofattributes
■$content :content enclosed within theopening andclosing tags
Asthesecond parameter above suggests, there areactually twodifferent forms inwhich youcan
create shortcodes— enclosing shortcodes, andself-closing shortcodes. The[gallery] shortcode is
anexample ofaself-closing shortcode. Inthisform, theshortcode’ sfunctionality isentirely self-
contained, andmerely adding theshortcode andanyofitsnecessary parameter values will cause
theshortcode toproperly function when added topost content. Forinstance, let’stake thisself-
enclosed shortcode asanexample:
[gallery id="55" columns="4"] 
Ifweinserted thisshortcode into thepost content ofanygiven post orpage, WordPress would
automatically gooutandgrab alloftheimages associated with posts with thenumerical IDof55
andaddthem toagallery thatissetuptodisplay infour vertical columns.
Enclosing shortcodes ,ontheother hand, require theuseofanopening andclosing taginorder to
work properly .Let’slook atafictitious example ofanenclosing shortcode:
[helping-friendly-shortcode]We want you to be happy.[/helping-friendly-shortcode] 
Intheinstance ofenclosing shortcodes, wearetaking aparticular textstring (inthisinstance, We
want you to be happy. )andplanning onplacing code oneither side ofittoencapsulate itinthe
final output HTML thatwill beread byabrowser .Let’slook atsome actual code examples tosee
how allthisworks inpractice. Wecanbegin bylooking atthecode forasimple self-closing shortcode;
thesame shortcode thatwelooked atinChapter 5:197 The W ordPress API
chapter_09/shortcode-example.php
<?php
function thank_you_mr_miner() {
  return 'You can feel good about Hood.';
}
add_shortcode( 'mrminer', 'thank_you_mr_miner' );
?>
Inthisexample, we’re creating ashortcode thatcanbecalled bytyping[mrminer] into anypost or
page. When WordPress parses outthecontent, it’llfiretheshortcode’ shandler function andoutput
thetextYou can feel good about Hood. where theshortcode isadded. Simple stuff, right?
Return, Don’t Echo
Acommon mistake made with shortcodes isattempting tooutput your shortcode results using an
echo instead ofareturn .Keep inmind thatanything thatisechoed willbeoutput toyour browser ,
butitwon’t bedisplayed inthecorrect location youintend itto.Returning thevalue will produce
thedesired results.
Now let’stake itastep further ,andinvestigate enclosing shortcodes:
chapter_09/enclosed-shortcode-example.php
<?php
function readicculus( $atts, $content = null ) {
   return '<span class="helping-friendly-book">' . $content . '</span>';
}
add_shortcode( 'helping-friendly-shortcode', 'readicculus' );
?>
Allright …sothisisalittle bitmore complicated, butnottoobadreally .Thefirstthing you’ll note
isthatourhandler function now hastwoparameters being passed into it:$atts and$content =
null .Atthemoment, wehaven’t defined anyattributes tobepassed into thehandler function, so
it’sblank. However ,$content = null essentially actslikeaswitch toletWordPress know thatthis
shortcode isdesigned toactasanenclosed shortcode rather than asastandalone self-closing
shortcode. Thereturn code isactually astring thatconcatenates the$content wehave encapsulated
within ourshortcode tagsin-between theopening andclosing textstrings wehave hard coded here.
Now let’slook atwhat thisshortcode does:
[helping-friendly-shortcode]We want you to be happy.[/helping-friendly-shortcode] The W ordPress Anthology 198
Werewetoaddthisshortcode into apost orpage, theHTML output inassociation with itwould
look likethis:
<span class="helping-friendly-book">We want you to be happy."</span>
We’remaking some headway here; however ,let’ssaywewanted topass anattribute into this
shortcode now,giving ustheability tomodify ourCSS orJavaScript behaviors depending onthe
class being referenced inthe<span> tag.We’dneed tocreate anarray thatcontained adefault value
foreach attribute ourshortcode canreceive; thatway,ifwedon’t pass theattribute inwith the
shortcode, theshortcode itself stillhasalltheinformation itneeds tooperate correctly .Consider
thefollowing code block:
chapter_09/enclosed-shortcode-attribute-example.php
<?php
function readicculus( $atts, $content = null ) {
  extract( shortcode_atts( array(
      'class' => 'helping-friendly-book',
      ), $atts ) );
  return '<span class="' . esc_attr($class) . '">' . $content . '</span>';
}
add_shortcode( 'helping-friendly-shortcode', 'readicculus' );
?>
We’ve now given ourselves theability topass inanattribute forclass. Ifwechoose nottodoso,
ouroutput willbeexactly aswesawabove, defaulting tothehelping-friendly-book class. However ,
let’ssayweusethefollowing form oftheshortcode inourpost orpage:
[helping-friendly-shortcode class="magazine"]We want you to be happy. ➥
  [/helping-friendly-shortcode]
Inthisinstance, we’ve replaced thedefaulthelping-friendly-book attribute with ournew one,
magazine ,causing anew output when rendered toHTML:
<span class="magazine">We want you to be happy.</span>
Allinall,it’sfairly simple when youbreak itdown into bite-sized pieces.
One lastpoint isthattheshortcode parser uses asingle pass onpost content, which means thatby
default youcannot fireseparate shortcodes inside ofenclosed shortcodes. Like anything elsethough,
there isaworkaround ifyoufeelyouneed togive yourself theability todothis. Thesolution isto
encapsulate your$content tagwith thedo_shortcode() function, asshown below:199 The W ordPress API
chapter_09/doshortcode-enclosed-shortcode-attribute-example.php
<?php
function readicculus( $atts, $content = null ) {
   extract( shortcode_atts( array(
      'class' => 'helping-friendly-book',
      ), $atts ) );
 
   return '<span class="' . esc_attr($class) . '">' . do_shortcode($content) . ➥
     '</span>';
}
add_shortcode( 'helping-friendly-shortcode', 'readicculus' );
?>
Bystructuring your shortcodes inthisway,you’ll essentially beable tofireshortcodes within
shortcodes, should theneed arise.
do Us a Favor
Thedo_shortcode() function isanextremely useful function. Using thisfunction, youcaneasily
execute anyshortcode youlikefrom directly within anyofyour theme’ stemplate files. Formore
information onthespecifics ofitsusage, check itoutintheCodex.4
Asyoucansee,shortcodes canbeextremely powerful, andyoucanusethem ininnovative ways
toincrease theusability andfunctionality ofyour WordPress installation. Formore detail onthe
Shortcode API, have alook intheCodex.5Now let’smove onandlook atsome genuinely new stuff
intheWordPress API.
The Dashboar d Widgets API
First uptotheplate istheDashboard Widgets API, agreat place forustostart because ofitssimil-
arity toaction hooks, filter hooks, andtheway inwhich weinteract with theShortcode API. We
briefly touched ontheuseofDashboard widgets inChapter 2,buttheDashboard Widgets APIgives
youthefacility toeasily register your own. Let’shave alook.
Themain new function we’ll beplaying with here iswp_add_dashboard_widget() ,which takes
three required parameters andoneoptional parameter:
wp_add_dashboard_widget( $widget_id, $widget_name, $callback, ➥
  $control_callback = null )
4http://codex.wordpress.org/Function_Reference/do_shortcode
5http://codex.wordpress.org/Shortcode_APIThe W ordPress Anthology 200
Here’ show theparameters aredefined:
$widget_id anidentifying slug foryour widget, which canbeused astheCSS
class andthekeyinthearray ofDashboard widgets
$widget_name theactual name theDashboard widget willdisplay initsheading
$callback thename ofthefunction youcreate, which willdisplay theactual
contents oftheDashboard widget
$control_callback = null
(optional)thename ofthefunction youcreate, which willhandle submission
ofwidget form options
Furthermore, inorder torunthefunction, you’ll need tocallitwith thewp_dashboard_setup action
hook, telling WordPress toinitiate your widget functionality into theDashboard. Therefore, the
complete code forasimple Dashboard widget might look likethefollowing:
chapter_09/dashboard-widget.php
<?php 
// Create the function to output the contents of our Dashboard Widget
function underoverground() {
  // Display whatever it is you want to show
  echo "Don't forget to turn the Earth so both sides get their share of ➥
        darkness and of light.";
} 
// Create the function used in the action hook
function add_underoverground() {
  wp_add_dashboard_widget('not_so_fast', 'Not So Fast', 'underoverground');
} 
// Hook into the 'wp_dashboard_setup' 
add_action('wp_dashboard_setup', 'add_underoverground' );
Working from thebottom up,we’ve used thewp_dashboard_setup action hook tocallournew
function add_underoverground() ,which invokes thenecessary wp_add_dashboard_widget()
function tocreate theactual Dashboard widget instance. And what goes inthatinstance? Thecode
thatisfired byourreferenced function— underoverground() .Therefore, thecode above willresult
inaDashboard Widget being installed with aheading ofNot So Fast andthetext-based contents of
Don’t forget to turn the Earth so both sides get their share of darkness and of
light. Pretty cool, huh?201 The W ordPress API
Removing Dashboar d Widgets
TheDashboard APIdoes afewother actions thatwehave noroom tocover here, butonetopic that
comes uprather often inthedevelopment community ishow tocustomize theDashboard experience
forusers bydefault. Users can, ofcourse, always navigate uptoScreen Options intheupper right-
hand corner oftheDashboard anduncheck anyDashboard widgets they want toremove from view;
however ,sometimes users have nobusiness seeing some ofthetypes ofDashboard widgets available
bydefault inastandard WordPress installation. Ifthispretty well describes your situation, then
don’t fear: theDashboard Widgets APIhasyour back, providing amethod toremove default Dash-
board widgets youdon’t want tosee.Here’ show youdoit.
You’ll beworking with theremove_meta_box() function, which youcanread about inmore detail
intheCodex.6
First ofall,recognize thatyour default widgets arenamed inthefollowing manner:
Main column
■$wp_meta_boxes['dashboard']['normal']['core']['dashboard_right_now']<br/>
■$wp_meta_boxes['dashboard']['normal']['core']['dashboard_recent_comments']<br/>
■$wp_meta_boxes['dashboard']['normal']['core']['dashboard_incoming_links']<br/>
■$wp_meta_boxes['dashboard']['normal']['core']['dashboard_plugins']<br/>
Side column
■$wp_meta_boxes['dashboard']['side']['core']['dashboard_quick_press']<br/>
■$wp_meta_boxes['dashboard']['side']['core']['dashboard_recent_drafts']<br/>
■$wp_meta_boxes['dashboard']['side']['core']['dashboard_primary']<br/>
■$wp_meta_boxes['dashboard']['side']['core']['dashboard_secondary']<br/>
What you’ll want todoistapinto thewp_dashboard_setup action hook andcreate anew function
thatremoves theDashboard widgets ofyour choice. Justmimic thepattern following toremove
whatever Dashboard widgets youneed to.Yourcode might look likethis:
6http://codex.wordpress.org/Function_Reference/remove_meta_boxThe W ordPress Anthology 202
chapter_09/remove-dashboard-widget.php
<?php 
// Create the function to remove default Dashboard widgets
function peace_out_dashboard_widgets() {
  remove_meta_box( 'dashboard_right_now', 'dashboard', 'normal' );
  remove_meta_box( 'dashboard_incoming_links', 'dashboard', 'normal' );
  remove_meta_box( 'dashboard_quick_press', 'dashboard', 'side' );
  remove_meta_box( 'dashboard_recent_drafts', 'dashboard', 'side' );
} 
// Hook into the 'wp_dashboard_setup' action
add_action('wp_dashboard_setup', 'peace_out_dashboard_widgets' );
This code stops four default Dashboard widgets from displaying within aWordPress installation:
theRight Now widget, theIncoming Links widget, theQuick Press widget, andtheRecent Drafts widget.
Formore information astohow work with thefiner points oftheDashboard Widgets API, have a
look intheCodex.7
The HTTP API
Ifyouareanexperienced PHP coder ,you’ve nodoubt come across situations thathave required
youtomake anHTTP request inPHP.Youmay have used cURL8orfopen()9orsomething else, but
what you’re bound tohave noticed isthatthere’ smore than oneway tomake anHTTP request in
PHP.And what makes thegame funisthatnotallservers support thesame methods—occasionally ,
some servers don’t support anymethods atall(gotta love that!). HTTP requests canrange from
simpleGETrequests thatarelooking topollthelatest tweets from Twitter toslightly more advanced
POST requests where youmight need topass afewparameters likeausername andpassword tore-
trieve themost recent Facebook status ofaparticular user.
WordPress officially recognizes fivemethods tosend anHTTP request inPHP,andrefers tothem
collectively astransports .TheHTTP APIwasdeveloped specifically tosupport allthese transports,
providing auniversal method ofhandling them within WordPress. Inthisway,WordPress isable
toassess which transports areavailable onanygiven server ,andautomatically usethemost appro-
priate onewhen making itsgeneral HTTP requests.
WordPress provides four helper functions thatretrieve URLs indifferent ways, which youcanuse
tointerface directly with theHTTP APIclasses located inwp-includes/http.php .These functions
andtheir uses areasfollows:
7http://codex.wordpress.org/Dashboard_W idgets_API
8http://curl.haxx.se/
9http://au.php.net/manual/en/function.fopen.php203 The W ordPress API
wp_remote_get()
retrieves aURL using theGETHTTP method
wp_remote_post()
retrieves aURL using thePOST HTTP method
wp_remote_head()
retrieves aURL using theHEAD HTTP method
wp_remote_request()
retrieves aURL using either thedefaultGEToracustom HTTP method thatyouspecify; thisis
useful when youneed tosend basic authentication headers with aURL request
Allthese functions return aWP_Error class upon failure, soyouneed tocheck forWordPress errors
after using them.
chapter_09/error-check.php
<?php
$whatchutalkinboutwillis = wp_remote_get('http://esquandolas.com');
if( is_wp_error( $whatchutalkinboutwillis ) )
    // Deal with your error here
?>
Other helper functions thatwork with theHTTP APIdeal with retrieving only specific portions of
aresponse, andinthisinstance thefunctions actually dotheerror testing onyour behalf:
wp_remote_retrieve_body()
retrieves only thebody from agiven response
wp_remote_retrieve_header()
retrieves asingle HTTP header from agiven response
wp_remote_retrieve_headers()
retrieves allHTTP headers from agiven response
wp_remote_retrieve_response_code()
gives youthenumber code foragiven HTTP response; positive responses should be200, but
failed responses could bewithin the300-400 range
wp_remote_retrieve_response_message()
retrieves theresponse message based upon theresponse codeThe W ordPress Anthology 204
Finally ,these functions arestackable within themselves, sothefollowing isperfectly acceptable;
itwillreturn only thebody oftheURL http://esquandolas.com ,checking forWordPress errors along
theway:
$whatchutalkinboutwillis = wp_remote_retrieve_body( wp_remote_get ➥
  ('http://esquandolas.com') ); 
Formore detailed information ontheHTTP API, look intheCodex.10
The Database API
TheDatabase APIisactually acollection ofthree APIs thatcombine tomanage theplugin, theme,
andadd-on interactions with WordPress’ sdatabase andthestored values within. These APIs include
theOptions API, theTransients API, andtheMetadata API. Let’slook ateach oneinturn.
The Options API
TheOptions APIiscomposed ofasetoffunctions thatprovide astandardized way tocreate, access,
update, anddelete options andvalues within thedatabase, without theneed toutilize SQL state-
ments, which may become obsolete inlater versions ofWordPress orMySQL (WordPress’ sdatabase
ofchoice). Allthedata managed through theOptions APIisstored inthewp_options table within
thedatabase.
TheOptions API’sfour functions provide afairly predictable functionality:
add_option()
adds anew option tothedatabase forusethroughout theinstallation viatheget_option()
function; ittakes noaction ifanoption ofthesame name hasalready been added
delete_option()
removes anexisting named option anditsassociated value from thewp_options table inthe
database
get_option()
returns anexisting option from thedatabase ifitexists
update_option()
updates anamed option anditsassociated value, andadds itiftheoption isyettoexist
Formore detailed information ontheOptions API, look intheCodex.11
10http://codex.wordpress.org/HTTP_API
11http://codex.wordpress.org/Options_API205 The W ordPress API
The Transients API
TheTransients APIisvery similar totheOptions API, with theexception thattheTransients API
allows youtostore data inthedatabase temporarily thatwillexpire andbedeleted after asetperiod
oftime. This allows WordPress amechanism tostore cached data inthedatabase, although caching
plugins have theability toforce WordPress tostore transient values inmemory rather than inthe
database, inherently speeding upanyWordPress installation. Forthisreason, youshould never
assume thattransient data isautomatically stored within thedatabase, andhence permanent data
should never bestored with theTransients APIatall.
TheTransients APIoffers functions thatimitate theOptions API, with theexception thattheadd
andupdate functions aretraded outforasetfunction asdescribed here:
set_transient() setsorupdates thevalue ofatransient
get_transient() returns anexisting transient value ifitexists
delete_transient() deletes atransient value
Formore detailed information ontheTransients API, look intheCodex.12
The Metadata API
TheMetadata APIprovides astandardized mechanism forstoring, retrieving andmanipulating
metadata such ascustom fields onposts forvarious WordPress object types inthewp_commentmeta ,
wp_postmeta ,orwp_usermeta tables. This essentially makes itpossible toaddandmanipulate custom
data tocomments, posts, orusers atwill.
TheMetadata APIoffers four functions which mimic theOptions APIfunctions exactly ,assume
thatadedicated MySQL table exists forthe$meta_type youspecify aslisted above, andaredescribed
below:
add_metadata() allows formetadata tobeadded toanykind ofWordPress object
delete_metadata() deletes metadata foraparticular object
get_metadata() returns theexisting metadata from thedatabase foraspecific object ifit
exists
update_metadata() updates themetadata ofacertain object within thedatabase andadds itif
itdoesn’t exist
Formore detailed information ontheMetadata API, look intheCodex.13
12http://codex.wordpress.org/T ransients_API
13http://codex.wordpress.org/Metadata_APIThe W ordPress Anthology 206
The Rewrite API
TheRewrite APIisanadvanced APIandshould bedealt with andused with caution. Itisasetof
four functions thatessentially helps WordPress developers tapinto theWP_Rewrite class topro-
grammatically specify new,custom rewrite rules forusewith WordPress’ spretty permalinks. Itis
dependent upon theavailability ofthemod_rewrite Apache module, meaning thatitsusage isneces-
sarily predicated upon theinstallation being runonaLinux platform. Each function thatmakes up
theRewrite APIistypically called within theinit hook, meaning they arerunduring WordPress’ s
initialization process. Furthermore, permalinks willusually need toberefreshed within theSettings
>Permalinks page intheWordPress back endbefore therewrite changes will take effect. Thecode
fortheRewrite APIishoused inwp-includes/rewrite.php .Let’stake alook atthese functions:
add_rewrite_tag()
This isused tomake WordPress aware ofcustomquerystring variables inconjunction with
add_rewrite_rule() .Ittakes tworequired parameters—a tagname, andaregular expression
toparse thetagname foruseintherewrite URL. Thefunction callmust bemade oninit or
earlier ,otherwise thetagsarenotavailable forusebyadd_rewrite_rule() .There arealotof
advanced tasks youcandowithadd_rewrite_tag() ,butthey’re beyond thescope ofthisbook.
Formore information onusingadd_rewrite_tag() ,seeitspage intheCodex.14
add_rewrite_rule()
Commonly used inconjunction withadd_rewrite_tag() ,add_rewrite_rule() searches for
custom rewrite tagsanduses them toinsert individual values into aparticular rewritten URL.
Forexample, ifapage employing acustom page template about veterinary records took two
custom rewrite variables—pet type andpetname—as defined byadd_rewrite_tag() ,arequested
URL thatlooked likehttp://esquandolas.com/vetrecords/dog/mcgrupp could beinterpreted to
actually mean http://esquandolas.com/index.php?p=42&pettype=dog&petname=mcgrupp .Like
add_rewrite_tag() ,there arealotofadvanced actions youcancomplete with
add_rewrite_rule() thatarebeyond thescope ofthisbook. Formore information onusing
add_rewrite_rule() ,seeitspage intheCodex.15
add_rewrite_endpoint()
This isused toaddcustom endpoints totheendofyour URLs inaformat like/trackback/ .
add_feed()
This isused toaddnew feed types.
14http://codex.wordpress.org/Rewrite_API/add_rewrite_tag
15http://codex.wordpress.org/Rewrite_API/add_rewrite_rule207 The W ordPress API
Formore detailed information ontheRewrite API, look intheCodex.16Additionally ,you’ll find a
wealth ofinformation andresources bylooking atthepage onWP_Rewrite ,WordPress’ sclass for
managing rewrite rules. TheWP_Rewrite class documentation islocated intheCodex.17
Other Functions and T ools
This concludes ourdiscussion oftheWordPress APIasdefined intheCodex, buttake note that
there areseveral other APIs described intheCodex worth exploring. Fornow,we’re going tomove
ontosome interesting, useful functions andtools thatyoushould aimtoreally understand.
register_activation_hook()
Theregister_activation_hook() function allows youtoregister acustom activation hook when
youactivate aplugin, andisuseful when your plugin needs totakeaspecific action upon activation.
Thefunction takes tworequired parameters:
register_activation_hook ( $file, $function ); 
Theparameters aredefined asfollows:
$file thepath tothemain plugin fileinside thewp_content/plugins directory
$function thefunction tobecalled within theplugin filewhen theplugin isactivated
Acorresponding function exists thatreverses theprocess inregister_deactivation_hook() .We’ll
take acloser look attheregister_activation_hook() andregister_deactivation_hook()
functions inaction with ournext noteworthy function thathandles theregular scheduling ofevents.
wp_schedule_event()
Ifyouarefamiliar with Linux, you’ll nodoubt befamiliar with cron. InLinux, cron isaprogram
thatallows youtoschedule scripts torunautomatically onaschedule. It’sahandy toolthatessen-
tially gives youtheability toautomate justabout anyroutine task you’d likesuch asbacking upa
directory ,sending emails inbatch, oranything elseyoucandream up.WordPress provides uswith
aseries offunctions thatcould probably bereferred toastheCron API, butforourpurposes we’ll
focus onthewp_schedule_event() function.
wp_schedule_event() utilizes cron-like functionality tofireevents onaregular schedule within
WordPress themes, plugins, andcore files. Infact, WordPress makes useofthisfunction tocheck
forplugin andgeneral WordPress updates once every 12hours, aswell aspublish scheduled posts.
Whilewp_schedule_event() doesn’t utilize cron itself, it’slocated within thewp-includes/cron.php
16http://codex.wordpress.org/Rewrite_API
17http://codex.wordpress.org/Function_Reference/WP_RewriteThe W ordPress Anthology 208
file,andthere’ sactually afunction within thatfilenamedwp_cron which does most oftheheavy
lifting.
Most developers regularly usewp_schedule_event() intheir plugins, andthefunction works by
scheduling ahook tobeexecuted byWordPress ataspecific interval thatyouasthedeveloper
define. Theaction triggers whenever auser visits thesiteiftheinitial scheduled time haspassed,
andtakes three required parameters andoneoptional parameter:
wp_schedule_event( $timestamp, $recurrence, $hook, $arg );
Theparameters aredefined asfollows:
$timestamp thefirst time thatyouwant theevent tooccur inaUNIX timestamp format
$recurrence thefrequency inwhich theevent should occur ,where possible values are
hourly ,twice daily ,ordaily
$hook thename oftheaction hook thatshould beexecuted
$args (optional) anyarguments thatshould bepassed tothehook functions
Toseethewp_schedule_event() function inaction, let’sconsider thecode thatwe’ll addtoa
plugin file:
chapter_09/schedule-event-plugin.php
<?php 
// Register our custom activation hook
register_activation_hook(__FILE__, 'roggae_activation');
// Add custom action hook and call our custom function
add_action('hourly_turning_event', 'hourly_earth_turn');
// Define the function associated with our custom action hook
function roggae_activation() {
  wp_schedule_event(time(), 'hourly', 'hourly_turning_event');
}
// Define our function that will do something on a scheduled basis
function hourly_earth_turn() {
  // code that turns the Earth every hour
}
// Clean scheduler upon plugin deactivation
register_deactivation_hook(__FILE__, 'roggae_deactivation');
function roggae_deactivation() {
  wp_clear_scheduled_hook('hourly_turning_event');
}209 The W ordPress API
Firstly ,takenote thatwearetelling WordPress toregister ourcustom action hook upon theactivation
ofourcustom plugin byusing theregister_activation_hook() function wediscussed before.
Notice thatatthebottom ofthecode block, weclear outthevalues ofthehook sothatwecan
eliminate italtogether when wedeactivate thesame plugin.
Asyoucansee,ourscheduled event iswritten toallow WordPress toturn theEarth ever soslightly
every hour ,onthehour .Wedothisbycreating afunction inourplugin (roggae_activation() ,
inthiscase), which callswp_schedule_event() andprovides itwith thenecessary parameters. In
ourexample, we’re telling WordPress we’d liketoexecute thehourly_turning_event action hook
(which fires thefunctionality we’ve defined inourhourly_earth_turn() function) every hour ,on
thehour .This isbeginning from theexact timestamp thatwascreated when weinitially activated
ourplugin. After all,it’sincumbent onustoensure thatevery portion oftheEarth receives itsfair
share ofdarkness andlight, anditwould become tiresome totrytoremember todoallthatonour
own!
Inallseriousness, wp_schedule_event() anditssimilar supporting functions areincredibly
powerful, andforthemost part rather underutilized. Tolearn more about itandother cron-type
functions inWordPress, have alook attheCodex page.18
wp_enqueue_script()  and wp_register_script()
Weallknow thatJavaScript isanextremely popular client-side scripting language thatgives us
easy access toinsanely cool GUI elements thatmake ourwebsites visually stunning. However ,if
you’ve ever tried tomanually work with different JavaScript libraries onthesame website, you’re
acutely aware that, despite their inherent sexiness, JavaScript libraries rarely play nicely with one
another .Justgoahead andtrytoload outjQuery andscript.aculo.us onthesame site; itmight work,
and, then again, itmight not.Still, alltoooften you’ll find theme developers hardcoding JavaScript
libraries into the<head> code oftheir websites tomake their interface elements work asintended.
This isjustfinefortheinitial theme developer ,butwhat about plugin developers who want touse
different JavaScript libraries, oreven ifthesame theme developer finds ithandy touseanother
version ofthesame library inother locations onthesame site? Asusual, WordPress comes tothe
rescue with auseful andshockingly underused pair offunctions: wp_enqueue_script() and
wp_register_script() .
Byusingwp_register_script() ,youcansafely register andsave JavaScript libraries tobecalled
bywp_enqueue_script() later onwhen needed.wp_register_script() isalways called with an
init action, andtakes onerequired parameter aswell asfour optional parameters:
wp_register_script( $handle, $src, $deps, $ver, $in_footer );
Theparameters aredefined asfollows:
18http://codex.wordpress.org/Category:WP-Cron_FunctionsThe W ordPress Anthology 210
$handle This istheunique name ofthescript thatwill belater used when
called bywp_enqueue_script() .
$src (optional) This istheURL tothescript, arequired parameter when notusing a
default script thatships with core WordPress (seetheCodex fora
listing ofscripts thatareincluded with core WordPress).19
$deps (optional) This isanarray ofdependencies thescript has,which defaults tofalse
ifthescript hasnone. This parameter isrequired only where Word-
Press does notship with thescript.
$ver (optional) This isastring defining theversion number ofthescript, ifithasone.
$in_footer (optional) Scripts arenormally loaded into the<head> section ofthecode, but
ifyouneed thescript tobequeued withwp_footer() ,thisBoolean
canoptionally besettotrue.
Once ascript hasaregistered handle asdefined bywp_register_script() ,itcanthen beutilized
bywp_enqueue_script() foruseinaplugin ortheme (orcore function). wp_enqueue_script()
queues scripts intheproper order based ontheir explicit dependencies, andthus allows youtouse
anyofWordPress’ sbuilt-in script libraries orexternal scripts youneed tomanually load.
wp_enqueue_script() takes thesame required parameter andfour optional parameters that
wp_register_script() takes:
wp_enqueue_script( $handle, $src, $deps, $ver, $in_footer );
Theparameters aredefined asfollows:
$handle It’stheunique name ofthescript defined bywp_register_script() .
$src (optional) This istheURL tothescript, arequired parameter when notusing a
default script thatships with core WordPress (seetheCodex fora
listing ofscripts thatareincluded with core WordPress).
$deps (optional) This isanarray ofdependencies thescript has,which defaults tofalse
ifthescript hasnodependencies. It’saparameter that’srequired only
where WordPress does notship with thescript.
$ver (optional) This isastring defining theversion number ofthescript, ifithasone.
19http://codex.wordpress.org/Function_Reference/wp_enqueue_script#Default_scripts_included_with_W ordPress211 The W ordPress API
$in_footer (optional) Scripts arenormally loaded into the<head> section ofthecode, but
ifyouneed thescript tobequeued with thewp_footer() ,thisBoolean
canoptionally besettotrue.
wp_enqueue_script() isadded totheinit action hook, andshould only becalled when needed
(that is,wrapped inanif (!is_admin()) {} statement sothatitdoesn’t interfere with adminis-
trative scripts ifit’smeant tobeused fortheoutwardly facing areas ofthewebsite). Likewise, ifthe
script isbeing used foraplugin admin screen, itcan(and should) berestricted toonly being shown
onthatparticular section oftheadmin area.
Avoid Script Clashes
It’svital toremember thatyoushould only runscripts where they’re necessary .Ifyourunscripts
inthebackground where they’re unnecessary ,youcanfind yourself experiencing incompatibilities
andcollisions with other libraries. Ascript thatyouactually need tousecould befound tobe
competing with theJavaScript library youhave carelessly leftrunning inthebackground, causing
allsorts ofunanticipated issues onthepage.
Formore information onhowwp_register_scripts()20andwp_enqueue_script()21work, look
attherelevant sections intheCodex.
Acorresponding setoffunctions towp_register_scripts() andwp_enqueue_script() exist
dealing with stylesheets. Forthese purposes, \wp_register_style()22andwp_enqueue_style()23
work tomanage stylesheets inexactly thesame way thatscripts canbemanaged, although thesly
functions aremore commonly used toensure thatstylesheets arenotloaded before anynecessary
dependencies areloaded. Formore information onthese twofunctions, reference thesection called
“Dissecting aPlugin: Antelope General Social Media Links” inChapter 5,orcheck theCodex.
BackPr ess
Lastbutcertainly notleast, let’ssayyou’re looking tobuild abrand new webapplication independent
ofWordPress, butwould love totake advantage ofmany ofthetools andfeature setsincluded
within core WordPress. Ifthissounds interesting toyou, BackPress may justbewhat you’re been
looking for.
Licensed under theGPL2 license, BackPress24istheWordPress code back endpresented asaPHP
library ,which allows youtobuild scalable web applications independent oftheWordPress CMS.
20http://codex.wordpress.org/Function_Reference/wp_register_script
21http://codex.wordpress.org/Function_Reference/wp_enqueue_script
22http://codex.wordpress.org/Function_Reference/wp_register_style
23http://codex.wordpress.org/Function_Reference/wp_enqueue_style
24http://backpress.orgThe W ordPress Anthology 212
While youneed torollyour own database andimplementations forthecode, BackPress provides
youwith access tomany ofthevaluable features WordPress provides, including:
■logging
■user roles andcapabilities
■database connections
■HTTP transactions
■object caching
■formatting
■XSS andSQL injection protection
■taxonomies
■options management
Ifyouareaweb developer looking forafabulous framework tobegin your web application devel-
opment with, remember tosayplease andthank youtothekind folks atbackpress.org .
A Box Full of T ools
TheWordPress APIisasetofcompartmentalized functions thatserve toprovide programmable
interfaces into different aspects ofcore WordPress. After reviewing theWidgets APIandPlugin
API, andproviding abitmore detail ontheShortcode API(allofwhich weexplored indetail in
Chapter 5)weexplored themajority oftheremainder oftheWordPress API. This includes the
Dashboard Widgets API, theHTTP API, theDatabase API(itself asetofthree APIs managing
WordPress’ sdatabase layer—the Options API, theTransients API, andtheMetadata API), andthe
Rewrite API.
Wealso looked atsome really useful functions notofficially listed within theWordPress API, but
essential when seeking tounveil sophisticated functionality within WordPress. Notably ,wecovered
thewp_schedule_event() function, which creates amechanism inWordPress toautomate the
processing ofroutine tasks likebatch email functionality ,aswell asthewp_enqueue_script() and
wp_register_script() functions, which allow ustosafely load andusedifferent JavaScript libraries
inourplugins andthemes. Finally ,wetook abrief look atBackPress, aPHP library available with
theGPL2 license thatallows youtoutilize much ofWordPress’ score functionality inyour own
separate web applications213 The W ordPress API

Chapter10
Multisite: Rolling Y our Own Network
Sofarinthisbook, we’ve delved deep into theWordPress universe andpulled back thecurtain to
show how themost fundamental elements ofthecore WordPress installation areputtogether and
operate. Now,we’re going tolook atoneofthenewest andmost exciting additions tocore: Multisite.
Itscapabilities allow youtoextend theCMS inaway thatwill letyouhost andmanage your own
centralized network ofWordPress websites, much inthesame way thatAutomattic manages the
freewordpress.com service. Soyoucanliterally leverage asingle WordPress installation tomanaging
dozens, hundreds, oreven thousands ofindividual WordPress websites. It’soneofthemost popular
up-and-coming features within core, andwell worth theeffort oflearning.
Once youunderstand andmaster it,Multisite hasahost ofpractical purposes. Forindividual de-
velopers andmarketers who handle alarge number ofWordPress sites, Multisite cansave significant
time andaggravation bycentralizing plugin management inparticular; after all,ifyouhave a
thousand websites andneed toupgrade thesame plugin oneach one, it’saloteasier andfaster to
doitonce than athousand times, right? Communities canalso find Multisite helpful byenabling
their users tomanage their own blogs themselves, much likewordpress.com does. Finally ,there
areseveral examples ofbusiness models thatuseMultisite totarget specific industry vertical markets,
andprovide valuable syndicated content services inanynumber ofcreative ways. Thenotion ofa
self-hosted multisite concept isstillintheearly stages ofdevelopment when compared toother
content management concepts intheweb development community ,butlikeanything else, itsuses
aremuch more dependent upon theimagination ofthedevelopers working with itthan anytech-
nical limitations.
A Brief History of Multisite
Before weexamine thespecifics ofMultisite, it’sagood idea toinvestigate itsbackground sothat
youhave abetter understanding ofitsfunctionality .Intheearly days ofWordPress, there were two
distinct projects thatwere actively maintained: WordPress, andWordPress µ.Pronounced “WordPress
M-YOU,” µwasalso called WordPress Multi-user; itwasbuilt tobeastandalone version ofWord-
Press thatfeatured theability tocreate multiple blogs, which could beaccessed bymany users with
different administrative privileges. While µshared much ofthesame codebase ascore WordPress,
itwasultimately farlesspopular ,sowhen changes were made tocore WordPress, they weren’t
necessarily added immediately toµ.This resulted inafeature setthatwasperpetually lacking and
generally behind thecurve, causing µtohave areputation asadodgy framework thatworked as
expected only some ofthetime.
Inorder tocorrect thesituation with µ,thepowers thatbewisely chose todiscontinue thestandalone
project andinstead factor itsfunctionality into core WordPress, beginning with themajor release
ofWordPress 3.0inMarch 2010. Since thattime, Multisite, asitcame tobeknown, hasbeen actively
developed within thecore WordPress feature set,although itisdeactivated bydefault inastandard
WordPress installation. Thepoint youshould understand isthatMultisite doesn’t need tobein-
stalled, butmerely enabled within anexisting core WordPress installation. Let’stake alook athow.
Change Is Good
It’spertinent tonote thatMultisite isaWordPress feature thatistruly inanevolutionary development
cycle within core WordPress atthistime. Asthisbook isbased upon WordPress 3.2,theMultisite
functionality discussed within thischapter reflects the3.2implementation. While conceptually
thesame asitsprevious iterations, thevisual presentation andfunctionality ofMultisite asimple-
mented in3.2issignificantly different from itsimplementation in3.1,which wassimilarly different
from the3.0implementation. While it’sunclear how much theimplementation will shift infuture
major releases, it’sareasonable assumption thattheimplementation infuture releases willcontinue
tobeaugmented andrefined.
Enabling Multisite
Fortheamount offunctionality thatyouareinstantly afforded, it’ssurprisingly easy toenable
Multisite inWordPress. Thetrickiest part isthatbecause you’re creating individual websites that
each need tooperate asaunique entity ,you’ll have tocreate aspecific namespace foreach oneto
operate in.Multisite offers youtwomethods ofdoing this: creating sites viasubdomains, orvia
subdirectories. Utilizing oneofthese will give youaclean website installation initsown unique
namespace thatlooks likeoneofthese examples:
■subdomain namespace: http://marco.esquandolas.com
■subdirectory namespace: http://www .esquandolas.com/marcoThe W ordPress Anthology 216
Now youmight bethinking thatthisisallwell andgood, butyou’re better offavoiding namespaces
thatlook likeeither format; youwant aunique domain tobeused here instead ofasubdomain or
subdirectory .Never fear,there’ saplugin tohelp youdothat, butweneed towalk through theinitial
process first.
Location, Location
While it’scommon among many web developers togive WordPress itsown directory asamatter
ofrule, Multisite precludes youfrom thispractice because oftherouting itneeds todefine and
manage foritsnetwork sites. Therefore, inorder forMultisite tooperate atall,WordPress itself
must beinstalled inthepublic HTML directory thewebsite propagates to.Putdifferently ,thesite
URL andtheWordPress URL asdefined inSettings >General must besettothesame location in
order touseMultisite.
Enabling Multisite canbeuptoafour-step process, with several ofthesteps being optional or
skipped altogether ,depending onwhether you’re setting upthesitefrom scratch orconverting an
existing sitetoMultisite, aswell aswhether ornotyou’re going tobeusing subdomains. Let’shave
alook attheprocess.
Step 1:Back upWordPress
Understand thatwhen yousetupanetwork with Multisite, bydefinition you’ll beupdating
your WordPress files. Attheriskoflosing your data, it’sawise idea toback upyour WordPress
installation before youbegin anywork, especially ifyou’re going tobeenabling Multisite on
anexisting liveWordPress site. Ifyou’re enabling Multisite onafresh WordPress install, this
isanunnecessary step.
Step 2:Setupwildcard subdomains ifyou’ll beusing asubdomain namespace with Multisite
Ifyouaresetting upMultisite tocreate new sites insubdirectories instead ofonsubdomains,
youcanskip thisstep andmove straight tostep 3.
Inorder tosetupMultisite tocreate new network websites onunique subdomains, you’ll first
need tohave acursory knowledge ofDNS, aswell astheconfidence andthenecessary server
permissions required tomake afewchanges totheDNS records thatmanage your web server .
DNS isanacronym thatstands forDomain Name Service, andinthiscontext consists ofaset
oftext-based rules thatreside onyour web server .These rules direct types oftraffic thatare
associated with your domain name, such asemail, web service, filetransfer protocols, andthe
like, andserve asamaster record thatdescribes everything about where information physically
goes andhow itactsinrelation toyour domain name. Ifyou’ve never been introduced toDNS
before anditsounds likeaserious topic, your intuition isserving youwell—it’ sheavy-duty
stuff, andnotsomething youwant tomess with unless yougenuinely feelcomfortable doing
so.Ifthewhole notion scares theliving esquandolas outofyou, gotalktoyour server adminis-
trator toseeifthey’ll help youout,orfind another qualified individual toperform these
modifications.217 Multisite: Rolling Y our Own Network
Inorder forMultisite towork properly ,weneed tocreate awildcard entry forsubdomains.
Wildcard subdomains aredomains thathaven’t been specifically defined within theDNS tables,
andsetting them upalleviates theneed tomake individual DNS entries foreach subdomain
thatMultisite creates. There areacouple ofways tosetupwildcard subdomains, andit’satwo-
step process. Onyour Linux web server ,you’ll firstneed tobecertain thatApache (thesoftware
thatenables web serving capabilities) isconfigured toaccept wildcards. Todothis, open up
thehttpd.conf fileortheinclude filecontaining theVHOST entry foryour web account, and
addinthefollowing line:
ServerAlias *.esquandolas.com
Itshould gowithout saying, butyouneed toreplace thedomain name with your own. After
this, you’ll want toaddthefollowing DNS record toyour server:
A *.esquandolas.com
It’sworth mentioning thatmany hosting providers offer their clients oneofseveral standardized
control panels toassist them inmanaging their Linux web servers, andthese control panels
have their own steps andprocesses thatusers must gothrough inorder tomake modifications.
Arguably ,themost widespread ofthese control panels iscPanel, asseen inFigure 10.1.
Figur e 10.1. Cr eating your wildcar d subdomain in cP anel
cPanel boasts theeasiest method byfarofenabling subdomains forMultisite; allyouneed to
doisaddasubdomain entry named “*"onthedomain you’re enabling Multisite on,andensure
thatyoupoint thesubdomain towhere your wp-config.php fileislocated. Foramore detailedThe W ordPress Anthology 218
explanation ofhow tosimilarly enable subdomain Multisite with other common control panels,
take alook attheCodex page.1
Check Y our Plan
Becareful totake note thatmany cheap hosting providers donotallow their clients tosetup
wildcard DNS entries likewe’ve justdone. Ifyou’re uncertain whether thisapplies toyouand
your hosting plan, contact your hosting provider before youattempt thisstep.
Step 3:Allow Multisite inwp-config.php
Next, open upyour wp-config.php fileinatexteditor ,andwhere itsays/* That’s all, stop
editing! Happy blogging. */ ,addthefollowing lineofcode above it:
define(' WP_ALLOW_MULTISITE', true);
This lineofcode isallthat’sneeded toletWordPress know youplan toenable Multisite. It
creates anew submenu item called Network Setup intheToolssubpanel oftheAdmin menu in
theWordPress administrative back end.
Step 4:Install anetwork
Now thatwe’ve allowed Multisite onourWordPress install, it’stime togoahead andcreate a
network. Becertain todeactivate allyour plugins before youactivate Multisite, oryou’ll receive
anerror telling youthatallplugins must bedeactivated before proceeding. Solong asyou’re
allsetandgood togoontheplugin front, navigate toTools>Network Setup andyou’ll seethe
Create a Network of W ordPress Sites screen, asshown inFigure 10.2.
1http://codex.wordpress.org/Create_A_Network#Specific_Configurations219 Multisite: Rolling Y our Own Network
Figur e 10.2. Cr eating a network of W ordPress Sites
This istheplace where we’ll define whether we’ll beusing subdomains orsubdirectories
within Multisite, aswell asname ournetwork andprovide anadmin email address. Once you
aresatisfied with your entries, click theInstall button …WordPress will doitsthing, andthen
display anew screen providing asetofthree instructions, asdisplayed below inFigure 10.3.The W ordPress Anthology 220
Figur e 10.3. Customizing a dir ectory for your network
Asdescribed bytheonscreen instructions, you’ll need tomanually create ablogs.dir directory
inthewp-content directory thatiswritable bytheserver ,andthen manually copy thecode
blocks provided into your wp-config.php and .htaccess files, respectively .Complete thisstep,
andthen logoutofWordPress. Congratulations; you’ve justenabled Multisite inWordPress!
Multisite in Action
Now thatwehave successfully enabled Multisite inourWordPress installation, let’slogback in
andhave alook around. Upon logging into WordPress with Multisite enabled andrunning, you’ll
initially notnotice much difference atall,with theexception thatthere isnow aMy Sites submenu
item listed intheDashboard submenu panel. However ,something elsehaschanged, andthatisthe
introduction ofanew user role—a super administrator (which we’ll also refer toasasuper admin
oranetwork admin). Asuper admin isanadministrator who looks after allthenetwork management
systems andprocesses onagiven WordPress Multisite installation. Astheuser who initially created
theMultisite installation, youaregranted super admin status (although you’ll beable tospread this
outtoadditional users later onifyousochoose).
Logged into WordPress now asasuper admin, some further investigation will yield anew menu
item inthedrop-down menu listed next toyour name intheupper right-hand corner ofthescreen,
asevident inFigure 10.4.221 Multisite: Rolling Y our Own Network
Figur e 10.4. Now you’r e a network admin!
Thekeyfactor torecognize here isthatwith Multisite enabled, WordPress will provide youwith
twoentirely separate administrative control panels towork with: theSite Admin ,andtheNetwork
Admin .The Site Admin control panel looks almost identical totheWordPress youhave come toknow
andlove, andisdesigned toprovide allthemanagement functionality necessary forawebsite in-
stalled onthenetwork. Themain difference istheMy Sites submenu item intheDashboard subpanel,
which gives youoptions tonavigate totheSiteAdmin Dashboards thatyouhave administrator access
towithin thenetwork. You’ll notice thattheNetwork Admin ,ontheother hand, hasavariety of
options thatanetwork administrator canwork with. Goahead andclick ontheNetwork Admin link
andhave alook around.
The Network Admin  Dashboar d
You’ll notice inFigure 10.5 thattheNetwork Admin area appears similar totheSite Admin ,butthere
areseveral visual clues youcanlatch onto thatwill confirm you’re intheright place.
Figur e 10.5. Y our new Network Admin  dashboar d
Yourmain indicator isthename ofthenetwork thatyoucreated; inthisinstance, theEsquandolas
Network, which differs from theAntelope General website thatweinstalled thenetwork onto. A
subtle color change might beasuitable visual cuetoremind theadministrator thatthearea they’reThe W ordPress Anthology 222
operating inis,indeed, anadministration area entirely separate from theSite Admin area. Then
again, aswe’ve previously stated, Multisite isafeature setinevolutionary development, andit’s
reasonable tothink thatthisdistinction might bemade clearer inthefuture.
Inaddition tothenetwork name atthetopofevery screen intheNetwork Admin area, you’ll also
notice aslightly different Admin menu layout. We’ve expanded each ofthetop-level menus inour
screenshot, andyou’ll seethatthey collectively hold asignificant amount ofnew functionality that
isessential formanaging Multisite. Before wedigintoeach areaonebyone, notice thattheDashboard
intheNetwork Admin area does include anew widget thatyouwon’t find ontheSite Admin screen,
giving youquick links tocreate new sites andnew users, aswell assearch forexisting sites and
users (which become quite handy asthevolume ofsites andusers grow inyour network).
The Sites Submenu
The Sites submenu isfairly straightforward, asyoucanseeinFigure 10.6,provides theAll Sites and
theAdd New submenu items.
Figur e 10.6. Adding a new site as the network admin
Clicking ontheAdd New submenu item brings youtotheAdd New Site screen. Inthescreenshot
above, you’ll notice weareusing thesubdomain method ofcreating new websites within ournetwork.
Inorder tocreate anew site, you’ll need todefine only three parameters:
1.thesubdomain zone thatthesitewill becreated on(orthename ofthesubdirectory ifyouhave
selected subdirectory installation)
2.thetitle ofthewebsite
3.theprimary administrative email
Here we’ve created asitecalled theDoniac Schvice, asample network sitethatwe’ll bereferring
tofortheduration ofthisillustration. Click ontheInstall Site button, andyou’ll seethenew site
loaded when youclick theAll Sites submenu option, asinFigure 10.7.223 Multisite: Rolling Y our Own Network
Figur e 10.7. Our new site in the All Sites  submenu
There areseveral points totakenote ofhere. First ofall,thelabel forthenetwork siteyoujustcreated
isthename ofthesubdomain (orsubdirectory) youjustprovided. Secondly ,anew user with the
same subdomain (orsubdirectory) name hasbeen automatically created foryou. Inthisinstance,
Multisite hascreated schvice forus,associating theemail address ofmike@esquandolas.com that
weprovided while adding thesite. This user isgiven theroleofadministrator bydefault, although
it’spertinent tonote thatthey areonly able toadminister settings onthesitethatthey have been
added to,inthisinstance schvice .Finally ,rolling over anindividual network sitereveals acontex-
tualmenu similar tothose we’ve seen elsewhere inWordPress. However ,what youmay find inter -
esting aresome ofthesubmenu items thatseem more likely tobefound inposts rather than in
network siteadministration. The Edit,Dashboard ,Delete ,and Visitoptions areallself-explanatory
(and we’ll digmuch deeper into Editinamoment), butDeactivate ,Archive and Spam require abit
more explanation.
Aswe’ll seeinmore detail intheNetwork Admin Settings menu, Multisite gives ustheability to
create network websites inamanner thathasshades ofWordPress’ sbuilt-in commenting system.
Depending upon how Multisite isconfigured, new blog sites canactually besetupautomatically
without theintervention ofanadministrator .While thispractice hasrelevant uses, itcarries with
ittheinherent danger ofautomated splog (or“spam blog”) creation. Splogs areunwanted blogs
created either manually orbymeans ofanautomated script, andaretypically packed fullofcontent
oraffiliate links designed tofoolsearch engines into providing ahigher ranking toaparticular
website. Splogs areevery bittheproblem thatcomment spam canbeonindividual blogs themselves,
andtothisendMultisite gives youtheability tomark aparticular network siteinstance asSpam ,
deactivating andremoving itfrom theWordPress installation.
Thefinal options inthecontextual submenu inAll Sites areArchive and Deactivate .Archiving and
deactivating network siteinstances arevery similar ,andboth arereversible (deleting anetwork
website isnotareversible action). Either archiving ordeactivating anetwork website will cause
thewebsite tonolonger beoutwardly visible ontheWeb,butdeactivating awebsite willcause the
sitetonolonger beaccessible ormanageable bysiteadministrators either .Archived sites canbeThe W ordPress Anthology 224
managed byadministrators. Network administrators have thesole ability toreactivate deactivated
sites, while siteadministrators canunarchive their sites tomake them once again visible onthe
Web.Plenty oftricky funtobehadhere, right? Justwait…we’re about tolearn thatthere’ sawhole
lotmore than meets theeyetowhat atfirst seems tobesome fairly light functionality .
Individual Network Site Settings
Every network sitetruly isitsown individual entity ,complete with itsown content andprivacy
rules, visual design, anduser base. When youclick ontheEditsubmenu item inthecontextual
menu we’ve justdescribed (orclick onthename ofthesiteyouwant toedit), you’ll begreeted by
ascreen thatsays Edit Site: ,andthen thename ofthesiteyouareworking on.Inourcase, itreads
Edit Site: schvice.esquandolas.com/ asseen inFigure 10.8.
Figur e 10.8. Editing the settings for an individual site
It’suseful tonote thatthese aresome ofthemost low-level settings offered fordirect manipulation
within WordPress, andassuch none ofthem aretobetoyed with.
The High and the Low
Ifyouarenew tolow-level/high-level terminology ,here’ saquick description. It’sreasonably well
understood thatthehigher -level aparticular feature is,themore isbeing automatically done for
youinthebackground. High-level functionality isdesigned totake theguesswork outofwhatever
itisyouaredoing, andtypically caters totasks thatcanbecompleted quickly bybatching certain
repetitive processes, ortoless-experienced users who don’t have theknowledge base todocertain
things. Examples ofhigh-level functionality include thevisual editor provided within WordPress,
ortheWordPress administrative back enditself. Low-level functionality ,ontheother hand, involves
functionality that’shappening deeper within thecode, closer towhere thelogic isactually being
executed. Low-level functionality affords more options andahigher level offlexibility inhow you225 Multisite: Rolling Y our Own Network
canmake something happen, butit’salsomuch, much easier topermanently break things with low-
level tools, soit’sworth offering youafirm warning before youwade toodeeply intoanything with
those characteristics. Don’t beafraid tolook around, butproceed with caution andrespect.
IntheNetwork Admin area, theEdit Site: screen isbroken upinto four tabs, beginning with theInfo
tab.There’ snogood reason tomodify theInfotabinanyway,butit’suseful forunderstanding
when thesitewasregistered andlastcreated. Matters become abitmore interesting when youclick
ontheUsers tab,asyou’ll seeinFigure 10.9.
Figur e 10.9. Editing individual site user s
The Users tablooks much likethestandard Users screen intheregular Site Admin area, butyou’ll
notice thatthere areactually twoways toaddusers toanetwork site. Because we’re working
within thecontext ofawebsite network, users who have already been registered onadifferent
website within thenetwork canbeadded here aswell, andassigned anyroleofyour choosing.
Perhaps enacted asasecurity feature, WordPress doesn’t provide ausername input boxhere that
issmart enough topull from anAjaxed listofusers already defined within thedatabase, butrather
forces youtoinput aspecific username upon adding theuser.There are,ofcourse, plugins available
thatmodify thisdefault functionality ,butit’sworthwhile mentioning thebasic way itworks here.
Thesecond way toaddusers reflects theway users areadded andmanaged throughout therestof
WordPress, enabling youtocreate new users andassign roles asyouwould anywhere else.The W ordPress Anthology 226
Next upistheThemes tab,andmarks ourfirst introduction inMultisite tothenotion ofsomething
being network enabled. Let’stake amoment toexplain thisconcept. Both themes andplugins can
bedefined asnetwork enabled ,which means thatthey areautomatically available forusebyany
given siteadministrator within every single website throughout thenetwork. However ,themes and
plugins differ inthatnetwork administrators areable toupload individual themes tothenetwork
andthen enable them forspecific sites within thenetwork. Plugins thatareuploaded tothenetwork
must either benetwork enabled orinactive altogether .Furthermore, once Multisite isenabled,
plugins canonly beinstalled intheNetwork Admin area, which bydefinition means thattheonly
users who canactually install new plugins aresuper admins. Siteadministrators, therefore, cannot
upload new plugins themselves, butcanactivate anddeactivate plugins thathave been made
available foruseontheir site. Ifyouareabitconfused, don’t sweat it—this oneisabitofamind
bender ,butFigure 10.10 below might help youunderstand itbetter .
Figur e 10.10. Editing themes within the individual sites
IntheThemes tab,weseetwothemes thatareavailable forustowork with: Twenty Eleven and
Twenty Ten.We’ve enabled Twenty Eleven here, which won’t actually activate thetheme onthe
http://schvice.esquandolas.com network site,butrather makes thetheme available totheindividual
siteadministrator toactivate andmake liveontheir network site. Furthermore, notice thelineof
textabove thethemes which states that“Network enabled themes arenotshown onthisscreen.”
This letsusknow thatwhile we’ve enabled Twenty Eleven foruseonschvice.esquandolas.com,
wevery well may seeother options thatwechoose touseforourtheme aswell. Forinstance, ifour
network administrator hasmarked twoother themes—T wenty Twelve andTwenty Thirteen—as
network enabled, then ultimately thesiteadministrator forschvice.esquandolas.com willhave three
themes available towork with: Twenty Eleven, Twenty Twelve, andTwenty Thirteen.227 Multisite: Rolling Y our Own Network
After youhave read theabove paragraph afewtimes andstopped your head from spinning, you
may find yourself asking thequestion: “Okay ,sowhere dothethemes come from thatI’mseeing
intheThemes tab?” It’sagreat question, andtheanswer isthatthethemes thataremade available
toyouwithin theThemes tabarethedisabled themes thathave been loaded intotheNetwork Admin
Themes Manager ,asseen inFigure 10.11 .
Figur e 10.11. Themes that have been installed in your network
Ifthisallseems likealong, strange, winding road, we’re here totellyouthatyeah, itis.Have we
mentioned thatMultisite isinanevolutionary development cycle?
Finally ,wecanclick ontheSettings tab,depicted inFigure 10.12 ,which provides extremely low-
level access tothespecific features setupforeach network site.The W ordPress Anthology 228
Figur e 10.12. Editing the settings in an individual site
Theoptions andparameters thatareavailable tobesetcorrespond directly totherecord forthe
network site, aslisted intheinstallation’ sdatabase, andyou’ll notice thatsome oftheoptions listed
here areactually Booleans (where0equalsnoorfalse ,and1equalsyesortrue ).Ifyoufeelcom-
fortable playing around inhere, youcanusethisscreen toquickly override some global Multisite
settings, which brings ustotheSettings subpanel oftheAdmin menu intheNetwork Admin area.
The Settings  Submenu
Although it’snotthenext option sequentially intheAdmin menu, ifyoulook towards thebottom
oftheAdmin menu andexpand theSettings panel, you’ll seetwooptions: Network Settings and
Network Setup .Network Setup isthere forreference purposes only,andisthesame screen thatwe
sawwhen initially enabling Multisite inourWordPress installation; thisasked ustocreate ablogs.dir
directory inwp-content ,andinstall specific code chunks intoboth wp-config.php andyour .htaccess
file. Network Settings ,however ,istheprimary screen thatcontrols most ofthemaster settings
functionality fortheentire Multisite installation. This isascreen with many options, butwe’ll
break each down foryouhere inFigure 10.13 ,complete with screenshots, starting with Operational
Settings .229 Multisite: Rolling Y our Own Network
Figur e 10.13. Oper ational settings for your network
This defines thename ofthenetwork aswell asthenetwork administrative email. This isfairly
straightforward, solet’smove down toRegistration Settings ,seen inFigure 10.14 ,where things get
abitmore interesting.
Figur e 10.14. Registr ation settings for your network
Registration Settings defines who cancreate anew user ornew site, andwhere those sites canbe
created. While itlooks harmless, it’sreally oneofthemost crucial aspects ofMultisite configuration.
Let’sbreak down each option, onebyone:
Allow new registrations deals specifically with who cancreate new users andwebsites viathefront-
facing public portal oftheMultisite installation. Itrefers tousers who arevisiting andinteracting
with thenetwork, rather than siteadministrators.
■Registration is disabled essentially locks down theMultisite installation. Any existing sites or
users thathave been created areallowed toremain intact, butunder nocircumstances canany-
body create new user accounts ornetwork sites while thisoption isselected. It’sideal ifyou’re
paranoid about security ,spam, andsplogs.The W ordPress Anthology 230
■User accounts may be registered allows new users toregister themselves butnotnecessarily create
new sites. This option isgood ifyouwant toallow users toregister andinteract with oneanother
viaWordPress’ sbuilt-in commenting system onexisting websites within thenetwork.
■Logged in users may register new sites allows users who arelogged intocreate their own sites, but
does notnecessarily give users theability toregister onthenetwork themselves. This isanex-
cellent option tousewhere youwant todefine asetofusers thatyouasanadministrator trust
with creating websites, butwant tostop short atopening your siteregistration tothepublic.
■Both sites and user accounts can be registered isalmost identical totheway thewebsite network
onwordpress.com isrun, andopens upthefront-end registration page thatwould beaccessible
athttp://esquandolas.com/wp-signup.php .Users have theability toregister themselves, and
then create new site/s thatthey canmanage. This isobviously themost permissive ofallthe
different user andsitecreation options, andhasthepotential tobeexploited ifnotconfigured
andmonitored properly .
Registration notification isacheckbox thatsends thenetwork admin anemail notification every time
auser registers asiteoremail account. This isahandy tooltouseintheearly stages ofpopulating
anetwork with users andsites, butcanbecome unwieldy asthevolume increases.
Add New Users isacheckbox thatallows siteadministrators toaddnew users within their own Site
Admin area bynavigating toUsers >Add New .Again, thisisauseful switch thatyoucanfliponor
offdepending largely upon how much youtrust thesiteadministrators working within your network.
Every network isdifferent, anddon’t beafraid tomake security restrictions thatyoudeem appro-
priate toyour particular situation.
Banned Names refers specifically tosubdomains orsubdirectories thatyouwill under nocircum-
stances allow tobecreated inyour network. WordPress lists thedefaults thatyouwill probably
want tomake sure arelisted, butyoumay find thatthere areothers thatyouwant toaddaswell.
Forexample, duetothecombination ofthemethod thatpermalinking structures aresetupwith in
WordPress aswell asthevery nature ofMultisite, routing collisions canoccur when youcreate a
page onyour primary siteandthen andallow anetwork siteofthesame name tobecreated.
Tobetter understand thepotential problem here, let’slook atanexample. Consider asituation
where youuseaMultisite network configured towork with subdirectories tocreate anetwork
website called running .TheURL forthatwebsite might becalled http://esquandolas.com/running ,
which isallwell andgood; however ,what ifwealready hadaRunning with the Antelopes page on
theprimary directory thatalready hadaslug entitled running .This would create apermalink col-
lision, andinthisinstance thenetwork sitewould begiven routing priority andactually override
thepage originating within theprimary site, creating asituation where people justcan’t find out
how torunwith theantelopes …andnobody wants that.231 Multisite: Rolling Y our Own Network
Thesolution tothisistobesure totakecaretoaddtheindividual slugs ofpages within your primary
sitetotheBanned Names box, thus avoiding thepossibility ofanybody using oneofthose names in
thefirst place. Who knows—in thefuture, maybe Multisite will besmart enough tobeable toat
least give ustheoption todynamically pick upthepage slug listing from theprimary siteand
automatically restrict theability tocreate network sites inthose namespaces.
Intheevent thatyou’re happy toallow siteregistrations from anybody who uses anemail address
with aparticular domain name, youcanjustaddthedomain name intheLimited Email Registrations
dialog box, andyou’ll besettogo.This isuseful, forexample, ifyouareanorganization with your
own domain name andwant toallow only your employees with acorporate email address tocreate
their own sites. Inthisinstance, you’d justaddyour corporate domain name (ordomain names, if
youuseseveral foryour corporation). Subsequently ,users who registered onthenetwork under
their corporate email addresses would have sitecreation authority ,while other users would not.
Banned Email Domains have theexact opposite effect asLimited Email Registrations do.Using Banned
Email Domains ,anadministrator canspecifically restrict theauthority tocreate new network sites
from users who areusing specific domain names. This isauseful option ifyou’d liketorestrict
users who create aveilofanonymity byoriginating from freeemail hosting services.
New Site Settings ,asseen inFigure 10.15 ,arenext totheplate, andsupply theverbiage templates
thatusers will seeupon initially registering asboth auser aswell ascreating anew site. Network
administrators who aresensitive totheambience andsense ofcommunity they want tocreate and
nurture among themembers oftheir network arewell advised topayattention tothisarea inpartic-
ular,asthetone andcontent oftheverbiage provided inthisspace provides theinitial impression
your user will receive ofyour network asawhole. After all,networks aretypically puttogether for
oneoftworeasons: either toconsolidate themanagement ofasetofwebsites andmake things
easier fortechnical staff, ortocreate andnurture anonline community .Ifyour intent falls within
thecommunity side ofthings, then you’ll find thatthisisoneofthose “separating-the-men-from-
the-boys” type ofaspects thatmany organizations fallcompletely flaton.Payattention tothis—it’ s
adetail, tobesure, butit’sanawfully bigdetail.The W ordPress Anthology 232
Figur e 10.15. V erbiage templates that you can modify to suit your needs
Inthisscreenshot, we’ve included thedefault textassociated with each ofthetemplates. Youcan
(and should) make changes toallofthem, adding your own texttopersonalize your user’ sexperience.
Asyou’ll note inFirst Post ,HTML isallowed here.
Most ofthese templates should beself-explanatory ,butwe’ll give youaheads-up onthenuances
ofeach. Welcome Email is,ofcourse, theemail thatwill besent outtothesiteadmin email address
anytime anew siteisregistered. Notice thattheemail includes thevariables SITE_NAME ,BLOG_URL ,
USERNAME ,andPASSWORD .Ifyou’ve ever worked with Mail Merge inside word processors, hosted233 Multisite: Rolling Y our Own Network
newsletter services, orother programs ofthesort, you’ll recognize these types ofvariables astags
thatwill bereplaced byactual user information. It’sunnecessarily toinclude them, butyour user
will probably appreciate itifyoudo.You’ll find similar variables intheWelcome User Email (sends
outawelcome email toauser), aswell asFirst Post ,which defines thetextfortheinitial post on
thewebsite.
First Page ,First Comment ,and First Comment Author areallleftblank. WordPress hasdefault content
thatitinserts into these spaces; however ,your own entries here will trump WordPress. Finally ,
First Comment URL isjusttheslugthat’sassociated with thefirstcomment, anddefaults tocomment-1 .
Thelastsection oftheNetwork Settings page contains Upload Settings and Menu Settings ,andcanbe
seen inFigure 10.16 .
Figur e 10.16. Upload Settings  and Menu Settings
The Media upload buttons checkbox options donothing more than display thedifferent icons that
provide avisual cueastothedifferent types ofmedia thatcanbeuploaded. However ,ifyouhave
played with themedia upload andmedia library functionality within WordPress atanylength, you
know thatthese buttons actually allgotothesame upload screen, andwhat isfarmore important
isthat Upload file types textboxlisted further onwithin thesame section. Thefiletypes arebased
upon thefileextension associated with each file,anddelineated from oneanother byasingle space
between each one. While youcantechnically addnew filetypes toyour heart’ scontent, theones
thatareadded bydefault aregenerally apretty good indication ofwhat isappropriate. Ifyouvalue
having arunning, non-compromised web server ,doyourself afavor andtrytostayaway from .exe,
.doc,and .docx files asarule ofthumb.
Site upload space and Max upload file size arehandy controls topayattention toaswell. Uploaded
files arealmost always media files, andmedia files cangetpretty big,eating upspace onyour web
server andslowing your system down. It’sgenerally considered apoor practice toexpand either of
these values toohigh, oruncheck theSite upload space parameter altogether .The W ordPress Anthology 234
Finally ,Menu Settings deals solely with whether ornotyouwant toallow siteadministrators the
ability toactivate ordeactivate plugins thathave been approved foruseandmade available toindi-
vidual sites bynetwork administrators. It’simportant tonote thatsiteadministrators never have
theability toadd, delete ormodify plugins ontheir own, andthisauthority must instead bemanaged
strictly byanetwork administrator .
The Users  Submenu
Well,thatwasamouthful, huh? There really isalottoMultisite, butthegood news isthatwe’ve
covered thebulk ofthemenu options. From here on,therestoftheconfigurable options inthe
Network Admin area arefairly self-explanatory ,with theexception ofafewitems thatareworth
pointing out.Let’sstart byclicking ontheAll Users submenu item intheUsers subpanel seen in
Figure 10.17 .
Figur e 10.17. Looking into All Users
Ingeneral, users look, act,andfeelvery similar tousers within thecontext ofatypical standalone
WordPress site. Aside from thenotion ofanetwork administrator (orsuper admin asdenoted in
Figure 10.17 ),theroles areidentical inthecore installation. What isuseful topoint out,however ,
isthatusers arenotautomatically added toevery site, butrather areassociated with individual sets
within thenetwork. IntheUsers screen, columns exist thatlistallofthesites aparticular user is
associated with, aswell asthedate thattheuser wasinitially registered onthenetwork.
The Themes  Submenu
The Themes subpanel predictably deals with themes thathave been uploaded tothenetwork. We’ve
already discussed themes indetail inthecontext ofMultisite, butforatheme tobeinitially available
within anygiven network site, itmust first beuploaded into theThemes subpanel byclicking on
theAdd New submenu item inthemenu, oratthetopoftheThemes listing page. Once installed,
anygiven theme canbenetwork-enabled, which means thatit’savailable forusebydefault
throughout every siteonthenetwork. Themes thataren’t network-enabled canstillbemade available235 Multisite: Rolling Y our Own Network
onasitebyvisiting theThemes tabofthatsite’sEdit Site: screen, accessible intheSites >All Sites
listing.
Foramore comprehensive discussion ofthemes within Multisite, refer back tothethesection called
“Individual Network SiteSettings” ontheThemes taboftheEdit Site: screen earlier inthischapter .
The Plugins  Submenu
Inthecontext ofMultisite, plugins aresimilar tothemes inthatthey canbeinstalled andnetwork-
enabled, thus becoming available tositeadministrators throughout thenetwork. The Plugins screen
canbeseen inFigure 10.18 .
Figur e 10.18. Network plugins
Bynetwork-enabling aplugin, network administrators caneffectively determine which plugins are
suitable forusewithin thenetwork; however ,it’sworth noting thatnotallplugins will work when
network-enabled. Ifaplugin iscoded incorrectly ,itcanrunintoproblems when used inconjunction
with Multisite.
It’suseful tonote thatjustasthey arewith standard WordPress, must-use anddrop-in plugins are
also available forusewithin Multisite, enabling theability toforce theuseofspecific plugins
throughout thenetwork aswell asthefiring ofspecific scripts atspecified times during theloading
ofMultisite ingeneral. Formore information onthese types ofplugins, refer back tothesection
called “Must-use Plugins” inChapter 5andthesection called “Drop-in Plugins” inChapter 5.
The Updates  Submenu
Last butnotleast intheNetwork Admin area istheUpdates subpanel. Arguably themost useful aspect
ofMultisite ingeneral, thefunctionality controlled inthissubpanel isthefigurative engine that
drives Multisite from afunctional perspective. It’salso themain reason youmight beinterested inThe W ordPress Anthology 236
using itifyouarelooking tocentralize themanagement ofamultitude ofWordPress sites rather
than attempting tobuild acommunity .
Updates isessentially atwo-step process. Clicking ontheAvailable Updates submenu item will list
alltheavailable theme, plugin, andcore WordPress updates thatareavailable tobedownloaded
andused. When you’re ready tomake your upgrades, click ontheUpdate Network submenu item
thatwill bring youtoascreen with anUpdate Network button. This function works bycalling the
update script ofeach siteindividually andautomatically ,sothattheindividual network sites update
themselves onebyone.
Asalways, save yourself aheadache andhave some mechanism toback your sites upbefore you
touch thiswith a10-foot pole.
Useful Plugins Within Multisite
We’ve covered thebasics ofMultisite functionality asincluded with core WordPress, butthere are
several notable plugins thatadduseful functionality ,making Multisite more relevant inthereal
world. While notanexhaustive listbyanystretch oftheimagination, here’ safewthatsupport
Multisite andareworth taking alook at:
WordPress MUDomain Mapping2
Allows users tomap their subdomain orsubdirectory network nomenclatures tospecific domain
nomenclatures. Inthisway,youcantake aspecific domain andmap ittoanygiven network
site, permanently altering your root permalinks toreflect unique domain names instead of
subdomains orsubdirectories.
Role Scoper3
Role Scoper isakiller plugin thatallows youtoextend user roles inmany different ways. Aside
from giving youtheability todefine groups andassign them specific roles, italsogives youthe
opportunity toassign roles andrestrictions tospecific posts, pages, orcategories.
Cimy User Extra Fields4
Cimy User Extra Fields allows youtocreate additional user fields toyour heart’ scontent,
complete with form validation that’sconfigurable byanadministrator toverify thatfields are
allproperly filled.
Troubleshooting Multisite
Aswe’ve previously mentioned, Multisite isaWordPress feature setthathasrecently been the
subject ofarapid evolutionary development cycle, andchances arethatthiswill continue with
2http://wordpress.org/extend/plugins/wordpress-mu-domain-mapping/
3http://wordpress.org/extend/plugins/role-scoper/
4http://wordpress.org/extend/plugins/cimy-user -extra-fields/237 Multisite: Rolling Y our Own Network
new major WordPress releases. Asaresult, there arenuances worth paying attention to.While by
nomeans comprehensive, thisnext section should give youageneral idea astosome ofthemore
common issues.
Enabling Multisite
While enabling Multisite iseasy enough inanideal environment, it’snotquite thepainless, foolproof
process thatinstalling WordPress is.We’ve already covered afewsituations where enabling
Multisite isnotpossible, butthere areseveral others. Ifyoufind yourself having issues, chances
arethatoneofthese reasons may betheculprit, soyou’ll need tocircle thewagons andcome up
with adifferent approach.
Multisite hasnosupport onsubdomains ininstances where theWordPress URL isdefined as:
■localhost
■IPaddress, asopposed toadomain name
Multisite isnotsupported insubdirectories inthefollowing circumstances:
■WordPress isinstalled onanon-Linux server thatdoes notsupport .htaccess and mod_rewrite .
■Due toissues with theway thatthepermalinking system issetup,aWordPress installation has
been setupforatime span thatcovers more than asingle month (this isanissue thatisslated
tobecorrected inasubsequent release).
Routing Issues in Subdir ectory Multisite Installations
Theother place where wetend toseeissues crop upasaresult ofMultisite insubdirectory install-
ations isinpermalink routing collisions between theprimary sitehosting thenetwork functionality
andthenetwork sitethemselves. Let’slook atthetwomost common ones.
■Ontheprimary site, anextra taxonomy label of/blog/ isautomatically created toavert routing
collisions insubdirectory Multisite installations. This only pertains tothecategory andpost
structure, andnotpages. However ,ifyoucreate apage with aslug ofblog onthemain site, you’ll
find anissue where thepage issuperseded andfails todisplay duetotheinherent permalink
collision. Asofthetime ofwriting, there isnosolution forthispermalinking collision issue,
aside from being aware ofitandsimply avoiding it.
■Wetouched onthisearlier within thechapter ,butthere’ salsotheissue ofcreating named pages
whose slugs arelabelled identically tonetwork sites within theinstallation. Toavoid thisissue,
besure tomanually addtheindividual slugs ofpages within your primary sitetotheBanned
Names boxintheNetwork Settings screen. This isaccessible viaSettings >Network Settings ,and
will avoid thepossibility ofanybody using oneofthose names inthefirst place.The W ordPress Anthology 238
You’re Multiskilled
Multisite enables youtoconsolidate themanagement ofmultiple WordPress sites into asingle in-
stallation, andisanextremely useful toolthatappeals totwoprimary user groups: people who
want tostreamline themanagement ofmultiple WordPress sites, andpeople who areinterested in
developing diverse communities ofblogs theway Automattic maintains onwordpress.com.
Beginning itslifeasaseparate project intheWordPress universe, Multisite wasmerged into the
WordPress core asofthemajor 3.0release. While anincredibly feature-rich setoffunctionality ,
Multisite iscurrently inaheavy stage ofdevelopment asacore WordPress component, andisnot
enabled bydefault inanygiven WordPress installation. However ,ifyouarewilling torollupyour
sleeves andgetdirty with Multisite, itsbenefits arepotentially extremely rewarding.239 Multisite: Rolling Y our Own Network

Chapter11
Going Global with Themes and Plugins
Withtheworldwide success ofWordPress, it'seasy tounderstand why it'suseful tobeable to
seamlessly translate plugins, themes andWordPress itself into other languages. However ,that
doesn't necessarily make iteasily adopted, andforgood reason. Localization (orinternationalization,
asitissometimes referred to)isnotanew concept, noristhenotion ofdoing business internationally .
However ,what we're beginning toseenow amounts toaperfect storm forWordPress.
Initially ablogging platform popular among aniche ofindependent amateur journalists, WordPress’
growth hasbeen fueled byitswidespread adoption within theSME (small tomedium-sized enter -
prises) market inthepast fewyears. Asofthetime ofwriting, WordPress isbeing runbyroughly
14.5% ofallwebsites ontheInternet, easily outpacing itsclosest competitors, Drupal andJoomla.
Thereasons forthisarevaried:
■Since thesocial media explosion ofthelate2000s, being online hasbecome away oflifefor
professionals throughout theworld. Online services andsoftware thatarefunctional andeasy
tousehave exploded inpopularity ,andWordPress isarguably theeasiest CMS available to
nontech people.
■WordPress ispainfully easy tosetup.Like many other CMSs, WordPress canbeinstalled viaa
one-click installer likeFantastico orSimpleScripts. However ,ifyouwant toinstall WordPress
manually ,your time investment won’t bemore than fiveminutes orso.
■WordPress isincredibly flexible, aswe’ve seen with plugins thatareeasy touseandinstall, es-
sentially future-proofing thesystem. This hascaused thetypically frugal SME market togain
confidence andfeelcomfortable investing time andfinancial resources inWordPress websites.
■We’reseeing ashift inthebusiness climate, with many parts oftheworld decentralizing and
moving away from atypical corporate structure. This isfueling amore independent-thinking
SME market.
■When properly setupandconfigured, WordPress hasshown itself tobeextremely attractive to
search engines, often gaining organic ranking with ease where other CMSs fail(more onthisin
Chapter 12).
Understandably ,localization hasbeen thesource ofconfusion formany aWordPress developer .
After all,we’re web developers, notlinguistic experts, andit’saloteasier tojustapply labels to
fields inourprograms inplain English. Plus, theidea oftrying tofigure outhow totranslate text
strings intoother languages onourown (much lesshaving somebody elsedoitforus)might induce
mild nausea ineven seasoned developers who’ve never hadtheneed orinclination todosobefore.
Buttrust me,it’sreally notallthatbad, anditcansignificantly increase theusefulness aswell as
theuser base ofyour custom WordPress plugins andthemes. Let’sbreak itdown into bite-sized
pieces, starting with thefoundations.
The Basics of Internationalization and Localization
Let’sexamine thataforementioned development nausea justabit.Theway many ofuslearned to
code, keeping language considerations inmind when coding aPHP program was, atbest, rather
academic. Themajority ofcommercial coding projects have targeted scopes with defined audiences,
soit’soften been reasonable toassume wecanproceed without regard totranslation. However ,
since WordPress plugins andthemes ultimately become more functional when auser canemploy
them intheir own language, weneed asystematic way tocorrect thisissue.
Enter i18n—another funacronym totuck under your belt. Named forthefactthatthere are18letters
between theiandthenintheword internationalization ,i18n describes thenotion ofcreating
software systems thataredesigned tobetranslated into other languages. Theprocess ofactually
translating thatsoftware intoaspecific language isreferred toaslocalization orL10n (can youguess
how many letters arebetween theLandthenintheword localization ?).1WordPress utilizes a
specific framework tohandle i18n called GNU gettext—the defacto standard system thatisused
innearly allopen-source software. GNU gettext isreally justalibrary ofPHP helper functions.
Since itiscoded right into core, WordPress hasthehooks necessary toallow youasadeveloper to
define textstring variables inyour themes andplugins, aswell asastandardized system toprovide
translations foreach string inanunlimited number oflanguages.
1The“L”inL10n isgenerally upper -cased todistinguish itfrom “i,”which, when upper -cased, looks almost exactly the
same.The W ordPress Anthology 242
Anatomy of a Localization Pr ocess
Ingeneral terms, thelocalization process isfairly straightforward. Conceptually ,there arethree key
components totheprocess foreither atheme oraplugin:
■GNU gettext markers inyour theme orplugin thattellWordPress which strings totranslate
■afunction linking themarkers inyour theme orplugin toafilethatprovides atranslation key
■afilethatprovides atranslation key,essentially creating aone-to-one relationship between
translatable strings, andwhat thetranslation should beforagiven string
Let’stalkinabitmore detail astowhat each ofthese three components do.
GNU gettext Markers T ell Which Strings to T ranslate
Inthisfirst component, weneed toletWordPress know which strings wewant totranslate. This
isdone directly intheoutput code ofyour theme orplugin bywrapping aspecific string with a
PHP function thatidentifies thetype oflocalization youwant, andthen running your original string
through afilter thatwill return thecorrect version. While there areanarray offunctions thatexist
within gettext thatallow youtodefine oroutput localized strings indifferent ways (you canseea
more thorough description ofthem intheCodex2),there arereally only twolocalization functions
you’ll usethemajority ofthetime:
__( 'string', $domain ) This isadouble underscore, andreturns alocalized string.
_e( 'string', $domain ) This isanunderscore “e”thatprints outalocalized string directly
tothebrowser .
Note thatboth__() and_e() take twoparameters, astring andadomain. Inthiscontext, adomain
isstrictly aunique identifier; thelabel thatisattached toaspecific translation file(many developers
commonly recommend thatthisbetheunique plugin name). This relationship isdefined inthe
second component.
A Function Linking Markers to a File with a T ranslation K ey
Secondly ,within your theme orplugin, you’ll need tocreate arelationship between thestrings you
want totranslate andatranslation filethatprovides akeyforthestring translation. This isdone
using thePHP function load_theme_textdomain() forthemes, orload_plugin_textdomain() for
plugins.
Inthecase oftheme localization, you'll useload_theme_textdomain() inyour functions.php file.
Thefunction takes twoparameters, which follows:
2http://codex.wordpress.org/I18n_for_W ordPress_Developers#Marking_Strings_for_T ranslation243 Going Global with Themes and Plugins
load_theme_textdomain( $domain, $path )
■$domain :aunique identifier assigned toyour custom translatable strings
■$path :thepath toyour translation keyfilewithin thetheme
Theme localization isconnected totheWPLANG constant inwp-config.php ,butwe'll discuss thisin
more detail inabit.
Plugin localization works very similarly totheme localization, butwith afewdifferences. Set
within thecore PHP files ofthei18n-enabled plugin,load_plugin_textdomain() takes three
parameters:
load_plugin_textdomain( $domain, $abs_rel_path, $plugin_rel_path )
■$domain :aunique identifier assigned toyour custom translatable strings
■$abs_rel_path :anoptional, deprecated function asofWordPress 2.7,which youcandefault
tofalse orjustomit—it’ snothing toworry about
■$plugin_rel_path :therelative path toyour translation keyfile.Ifyoufailtodefine thispath,
itwill default totheroot directory thatthefileisin.While thisisbydefinition anoptional
parameter ,it’sbestpractice tokeep your language translation files separate from your logic files,
soyou’ll usually want tospecify avalue here.
Inboth these instances, $domain istheunique identifier thatwereferred tointhefirst component.
Itserves only todefine arelationship between thestrings inthecode thatrequire translation, and
thethird component, thetranslation key.
A File Pr oviding a T ranslation K ey
Inthisthird component, GNU gettext offers usasystematic way ofproviding amechanism tocreate
one-to-one string translation relationships between individual default strings andtheir respective
translations, andthen feeding those various string translations toWordPress inanefficient manner .
This isdone through .POand .MO files.
A.POfileisafilethatprovides ahuman-readable andeditable translation keyforaspecific language.
Forinstance, ifyour theme orplugin waswritten inEnglish andyouhadtranslations readily
available forFrench, German, andPirate English, youwould have three corresponding .POfiles—one
foreach ofthelanguages. When aspecific string translation ismade, ithappens inthisfile.
While .POfiles arehuman friendly andeasily editable, they arenotideal forWordPress tousewhile
processing translation inpractice. Instead, WordPress willusean.MOfileforitsactual translation.
.MO files arecompiled files thatcanbeautomatically generated foryouwhen youusehelper toolsThe W ordPress Anthology 244
likePoedit (seethesection called “Introducing Poedit” ).Each .POfilehasacorresponding .MOfile
thatisupdated each time the.POfileisupdated.
Thefinal filepertinent filetype isthe.POT file,or.PO T emplate file.A.POT fileisanexact copy of
anyofthe.POfiles inalocalization instance, with theexception thatitisvoid ofanytranslations.
Making  .POT files available totranslators allows them toeasily create translations foryour themes
andplugins into their own native language using helper tools.
Putting the Pieces T ogether
Sonow thatweknow themain components inalocalization process, let’shave avisual look at
how they work together inWordPress. Consider thediagram inFigure 11.1.
Figur e 11.1. Localization in action
We’llstart with theprogram’ ssource code. When abrowser initially moves tocallaspecific page,
thetranslation process isinitiated when itrecognizes the__() and_e() functions inthesource
code wrapping textstrings. WordPress recognizes these functions because GNU gettext isbuilt into
itscore, andautomatically seeks totranslate them. Yourfunctions.php filehasalready been loaded
here, andWordPress isable tousetheload_plugin_textdomain() orload_theme_textdomain()
functions inthefunctions.php filetoidentify andconnect thestrings toalibrary location (depicted
inStep 1inFigure 11.1).load_plugin_textdomain() orload_theme_textdomain() then retrieve
thelocale information from theWPLANG constant setinwp-config.php (Step 2inFigure 11.1)and
retrieve theproper .MO fileassociated with thelocale (Step 3intheFigure 11.1).Iftheproperly245 Going Global with Themes and Plugins
named .MO fileexists, thefunctions output thetranslated strings tothebrowser (Step 4inFig-
ure11.1).Ifaproperly named .MO filedoes notexist, orforanystrings thatdonothave translated
entries within the.MO file,thedefault verbiage isinstead output tothebrowser .Finally ,the.MO
fileisacompiled version ofa.POfile,which ishuman editable. Likewise, .POfiles have template
files thatallow translators toeasily modify strings inyour program into other languages.
Now let’sdigalittle deeper andtake alook atsome realcode, shall we?
Localizing a Theme
When youarelocalizing atheme, you’ll usually only beaddressing textstrings thatappear indif-
ferent places ofyour theme. Let’shave alook atsome basic HTML code thathasafewstrings init:
chapter_11/html-unlocalized-example1.php
<!DOCTYPE HTML>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Localization Sample</title>
</head>
<body>
  <p>My name is Mick.</p>
  <p>I have a dog named Lacie.</p>
  <p>My dog's name is Lacie, but we call her Bug.</p>
  <p>Sometimes, we call her Buggers.</p>
  <p>Lacie has a black coat.</p>
</body>
</html>
Notmuch toseehere, really .Wejusthave fivedifferent strings oftextentered intoanHTML docu-
ment inapretty generic way.However ,wecanlocalize thispage bysimply wrapping each ofthe
strings with the_e() function:
chapter_11/html-localization-example1.php
<!DOCTYPE HTML>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Localization Sample</title>
</head>
<body>
  <p><?php _e( 'My name is Mick.', 'our-very-unique-domain' ); ?></p>
  <p><?php _e( 'I have a dog named Lacie.', 'our-very-unique-domain' ); ?></p>The W ordPress Anthology 246
  <p><?php _e( 'My dog\'s name is Lacie, but we call her Bug.', ➥
               'our-very-unique-domain' ); ?></p>
  <p><?php _e( 'Sometimes, we call her Buggers.', 'our-very-unique-domain' ); ➥
     ?></p>
  <p><?php _e( 'Lacie has a black coat.', 'our-very-unique-domain' ); ?></p>
</body>
</html>
This isabitmore interesting now.We’vewrapped each textstring with_e() andsetourtextdomain
constant forthelocalization. Note thatweuseaconstant calledour-very-unique-domain .Itreally
doesn’t matter what youcallthisdomain solong asit’sunique toyou, andthatyouinitialize the
relationship with thesame unique name.
Be Consistent
Youabsolutely must usethesame domain throughout thecontext ofyour theme orplugin inorder
forthelocalization process towork. Mismatched names willbreak thelink, causing thetranslation
tonotwork correctly (oratall).
How doweinitialize therelationship within functions.php ?Let's look atthecode:
chapter_11/initialize-functions-dot-php-localization.php
<?php
load_theme_textdomain( 'our-very-unique-domain', TEMPLATEPATH.'/languages' );
$locale = get_locale();
$locale_file = TEMPLATEPATH."/languages/$locale.php";
if ( is_readable($locale_file) )
     require_once($locale_file);
?>
Asyoucansee,onlineonewe’ve fired upload_theme_textdomain() andspecified thatourlanguage
translation files willliveinthelanguages folder ofourtheme. Sofar,sogood, butnow weseebunch
ofstuff thattalks about locale. Theme localization depends ontheWPLANG constant inwp-config.php
thatdefines thelocale. Thelocale isacombination ofboth acountry andalanguage code specified
bytheGNU gettext framework—you canlook upcountry andlanguage abbreviations inthegettext
manual3.Open upyour wp-config.php fileandlook toseeifyouhave acustom WordPress locale
defined; ifyoudon’t, goahead anddefine itnow.Forexample, ifyouareusing German asthemain
language foryour site, youwould see(ormanually add) alineinyour wp-config.php filelikethis:
define ( 'WPLANG', 'de_DE' );
3http://www .gnu.org/software/gettext/manual/247 Going Global with Themes and Plugins
WiththeWordPress locale set,(inthiscasede_DE ),ourcode above will now seek tofind aGerman
localization filecalled de_DE.mo inthelanguages directory ofourtheme. Therefore, thefiles inour
sample theme directory might ultimately have astructure thatlooks likeFigure 11.2.
Figur e 11.2. Theme-localized file structur e
Localizing a Plugin
Localizing aplugin issimilar tolocalizing atheme. Let’stake itfrom thetopbylooking atasimple
plugin thatisyettobelocalized:
chapter_11/plugin-unlocalized-example1.php
<?php
/*
Plugin Name: Our Sample Plugin
Plugin URI: http://www.sitepoint.com/our-sample-plugin
Description: Sample localization code demonstration
Version: 1
Author: Mick Olinik
Author URI: http://www.sitepoint.com
License: GPL2
*/ 
add_action( 'init', 'olin_osp_init' );
function olin_osp_init() {
  add_action( 'admin_menu', 'olin_osp_menu' );
}
function olin_osp_menu() {
  add_options_page( 'Our Sample Plugin Options', 'Our Sample Plugin', ➥
    'manage_options', 'our-sample-plugin', 'olin_osp_settings' );
}
function olin_osp_settings() {
?>
<div class='wrapper'>
  <h1>Our Sample Plugin Settings</h1>
  <!-- Imagine there is some really exciting functionality happening here -->The W ordPress Anthology 248
</div>
<?php
}
?>
Again, there’ slittle toseehere. We’resimply registering ourplugin with WordPress, creating an
Admin menu forourusers, andthen adding anAdmin page tomodify thesettings ofoursample
plugin. However ,when wemove tolocalize theplugin, we’ll want tomake some keychanges. Let’s
look atthesame plugin with correctly localized code:
chapter_11/plugin-localization-example1.php
<?php
/*
Plugin Name: Our Sample Plugin
Plugin URI: http://www.sitepoint.com/our-sample-plugin
Description: Sample localization code demonstration
Version: 1
Author: Mick Olinik
Author URI: http://www.sitepoint.com
License: GPL2
*/ 
add_action( 'init', 'olin_osp_init' );
function olin_osp_init() {
  add_action( 'admin_menu', 'olin_osp_init' );
  load_plugin_textdomain( 'our-very-unique-domain', false, dirname ➥
    ( plugin_basename( __FILE__ ) ) . '/languages/' );
} 
function olin_osp_menu() {
  add_options_page( sprintf( __( '%s Options', 'our-very-unique-domain' ), ➥
    'Our Sample Plugin' ), 'Our Sample Plugin', 'manage_options', ➥
     'our-sample-plugin', 'olin_osp_settings' );
} 
function olin_osp_settings() {
?>
<div class='wrapper'>
  <h1><?php _e( 'Our Sample Plugin Settings', 'our-very-unique-domain' ); ?>
  </h1>
  <!-- Imagine there is some really exciting functionality happening here -->
</div>
<?php
} 
?>
Ourfirst task istoinitialize thelocalization, andit’sconceptually thesame forplugins asitisfor
themes. Intheinit action weareusing within ourplugin, we’ll addtheload_plugin_textdomain()249 Going Global with Themes and Plugins
function. Asyoucansee,we’re identifying ouruniquetextdomain aswell asthelocation ofthe
translation files—in thiscase thelanguages folder within theplugin. Then, wecangoabout our
business asusual preparing strings tobelocalized within ourcode, justasinthecase ofthemes.
Thefiles forOur Sample Plugin might ultimately look likeFigure 11.3.
Figur e 11.3. Plugin localization file structur e
A Word on .MO File Nomenclatur e
Inlooking atFigure 11.3,youmay notice thatthenomenclature forour.MO files haschanged
within aplugin asopposed tohow welabeled itinourtheme. When looking forcompiled .MO
translation files, WordPress looks foradifferent syntax fortheme localizations than itdoes for
plugin localizations. Withtheme localizations, you’ll want toname your .MO fileintheformat of
locale.mo .Forexample, intranslating your theme toGerman, your theme translation fileinthe
languages directory within your theme should benamed de_DE.mo .Ontheother hand, ifyou’re
localizing aplugin, WordPress will seek thetranslation fileinyour specified languages directory
within your plugin intheformat ofpluginname-locale.mo .Inthisinstance, theplugin name corres-
ponds directly tothetextdomain youassigned tothelocalization inyour plugin. Keeping with the
previous examples, ourtranslation filewould thus benamed our-ver y-unique-domain-de_DE.mo if
wewere translating thatplugin into German.
Introducing P oedit
Poedit isapopular open-source toolthatyoucandownload andinstall onyour Windows, Apple,
orLinux computer tohelp youcreate andmaintain allthefiles you’ll need. Poedit willautomatically
sortthrough allthesource code youhave inyour plugin ortheme, andreturn allstrings thatyou’ve
defined tobelocalizable through the_e() or__() functions. Then, it’sjustamatter ofgoing through
each string andproviding atranslation foraspecific language. Let’sgetstarted bydownloading
andinstalling Poedit.4
4http://www .poedit.net/download.phpThe W ordPress Anthology 250
Creating a .POT File
Tolocalize ourown plugin ortheme, we’ll need tocreate a.POT file.Torefresh your memory ,a
.POT fileisjusta.POfilethatdoesn’t have anydefinitions—it merely defines thestrings thatneed
tobetranslated. Bydefault, Poedit looks for.POT files toopen andwork offofwhen atranslator
first seeks tolocalize ourcode, butsince wedon't have oneyetwe’ll need tomake itfirst. Todo
this, fireupPoedit, click Fileandthen select New catalog asinFigure 11.4.
Figur e 11.4. Cr eating a new catalog in P oedit
When creating anew catalog, thefirst place you’ll bebrought toistheProject info tab,asseen in
Figure 11.5.Youcanfillthisinascompletely asyoulike, butallthatisreally required istogive
ournew catalog aproject name. Give itaname, andthen click onthePaths tab.251 Going Global with Themes and Plugins
Figur e 11.5. Project info in Poedit
Now weneed tocreate thepath toourtranslation file.This path isrelative tothefileorfiles being
translated. Since weconsider itbest practice tocreate aseparate directory foryour language trans-
lations, weprefer adding ../forthepath aswe’ve done inFigure 11.6.Once youhave your path set,
click theKeywords tabtocontinue on.The W ordPress Anthology 252
Figur e 11.6. Defining a path in P oedit
IntheKeywords tab,weneed only todefine theGNU gettext elements thatweused toprepare our
strings forlocalization within ourcode. Again,__and_earethemost common gettext functions
thatareused, butifyouhappened touse_n,_x,oranyother gettext functions, youwill need to
define them allhere. It’sgood toremove thefunctions youdon't need, andsowe'll remove each of
thefunctions we’re notusing, asinFigure 11.7.253 Going Global with Themes and Plugins
Figur e 11.7. Configuring keywor ds in P oedit
This isastandard Keywords configuration thatwill suitthepurposes ofourdiscussion very well.
We’ve added only__and_ebecause these arethefunctions being called inourcode. Make your
additions andthen click OK,asshown inFigure 11.8.The W ordPress Anthology 254
Figur e 11.8. Adding keywor ds in P oedit
Upon clicking OK,we’ll beprompted tosave ourconfiguration asanew .POfile.Before yousave
your file,besure tonavigate tothecorrect location according towhat yousetinthePaths tabof
your catalog. Poedit willusethelocation yousave your filetoasapoint ofreference when itsearches
forthefiles towhich you’ve added your localization strings. Inourexample, we’ve added apath
of../,sowe’ll want tosave thenew .POfileinasubdirectory where ourfiles arelocated. While any
subdirectory will do,it’sbest tobedescriptive byusing labels such aslanguages orlang.Save the
.POfilewith aname appropriate toyour purpose. Justtobecreative, weused appropriate-name.po ,
asyoucanseeinFigure 11.9.255 Going Global with Themes and Plugins
Figur e 11.9. Cr eating a new .PO file in P oedit
Upon saving thefile,Poedit uses thepath parameter thatyousettofind andindex anyfiles itsees.
Atthispoint, Poedit checks allofthefiles available against thelistofgettext functions youdefined
intheKeywords tabandreturns alistoftranslatable strings toyou. Figure 11.10 shows ashort list
ofstrings revolving around me(Mick Olinik) andmydog, Lacie. Click OK,andyouhave ablank
.POfilewith afewstring definitions.The W ordPress Anthology 256
Figur e 11.10. Translatable strings in P oedit
This isthetricky part—and essential forcreating a.POT filewith Poedit .Before youdoanything
elsehere, save thefileasecond time.Thereason thisisnecessary isthatwhen Poedit initially
creates the.POfile,itsaves thefilefirst andthen imports thetranslatable strings. Ifyoufailtosave
thefileasecond time andclose it,you'll endupwith ablank .POfilethathasnotranslatable strings,
thus defeating thepurpose. Once yousave your .POfileasecond time asinFigure 11.11 (with your
translatable strings added), close thefileandquit Poedit. Don't worry—we’ll beright back.257 Going Global with Themes and Plugins
Figur e 11.11. Saving the file a second time
Now navigate toyour directory structure where you’ve saved your .POfile.You’ll notice youactually
have twofiles available: a.POfilethatyoucreated, andan.MOfilethatPoedit automatically compiled
foryouwhen yousaved the.POfile.Because wefirst want tocreate atemplate file,wedon’t need
the.MOfile—go ahead anddelete it.Then, justrename the.POfiletoa.POT file.When you’re done,
you’ll endupwith justone .POT fileinyour languages directory ashighlighted bythearrow in
Figure 11.12 .The W ordPress Anthology 258
Figur e 11.12. .POT file in P oedit
Translating Our .POT File
Ifallyouareaiming todoistosetupyour theme orplugin sothatitcanbeeasily localized by
others, congratulations! Atthispoint, youareallset,andyoucanmove onwith your life.Solong
asyouinclude your shiny new .POT fileinthecorrect directory ,anybody willbeable towork with
andtranslate your theme orplugin into aninfinite number oflanguages. That said, let’sassume
youwant toactually doafewtranslations. Getstarted byfiring Poedit back upandinstead ofselect-
ingNew catalog ,select New catalog from POT file ,asinFigure 11.13 .259 Going Global with Themes and Plugins
Figur e 11.13. Cr eating a new catalog fr om .POT  file
Goahead andfind the.POT fileyoujustcreated, open it,andthen click OKtothesubsequent catalog
settings (they aretheexact same ones yousetyourself). Poedit will then askyouwhat you’d like
tosave your new .POfileas.Give itanappropriate name andsave itasshown inFigure 11.14 .The W ordPress Anthology 260
Figur e 11.14. Saving your new .PO files
It’sclear sailing from here on.Justclick onthestring you’d liketotranslate inPoedit, andtype a
translation into theboxonthebottom ofthePoedit window asshown inFigure 11.15 .261 Going Global with Themes and Plugins
Figur e 11.15. T ranslating your strings
We’llwash, rinse, andrepeat thisprocedure until allthestrings have been translated. Editing strings
isjustaseasy…click onthestring youwant toedit, asinFigure 11.16 ,andmake your modifications.
Remember ,each time yousave a.POfile,anew .MO filewill becompiled foryou. Itisthe.MO
file—not the.POfile—that WordPress will actually usewhen doing translations.The W ordPress Anthology 262
Figur e 11.16. T ranslations for all our strings
Another W ay to Gener ate a .POT File
ToolslikePoedit arereally useful, butifyouareplanning onsubmitting your plugin totheWordpress
Plugin Directory ,there’ saneasier way tocreate a.POT file.Instead ofgoing through allthehassle
involved insaving andresaving afileinPoedit, youcanchoose tohave your .POT filecreated
automatically after your plugin hasbeen accepted into thedirectory .Simply loginasanadminis-
trator foryour plugin, andclick theGet POT button underneath Committers ,anda.POT filewill be
generated foryoutodownload. Since thisisonly useful ifyou’re submitting your plugin tothe
directory ,we’ve included ithere, asseen inFigure 11.17 ,asanextra way togetthejobdone, not
theonly way.263 Going Global with Themes and Plugins
Figur e 11.17. Plugin Admin  screen showing a Get POT  button
Is Ther e an Easier W ay Than Localization?
Funny youshould askthat. There’ sapretty cool toolthat’sbeen indevelopment forsome time now
called WPML.5It’sapremium plugin andwell worth theinvestment. WPML greatly reduces the
amount oftime andeffort ittakes tolocalize your theme orplugin, atleast within thecontext ofa
single website. Allyouneed todoisidentify your localization strings properly within your plugin
oryour theme bywrapping them in__() or_e() tags. Once youmake your string identifications,
WPML takes over,eliminating thehassle ofsetting up.PO,.MO and .POT files andsorting outhow
toaddthem toyour files andthemes.
When youinitially runWPML onyour WordPress site, WPML actslikePoedit andscans through
allyour theme andplugin files insearch oftranslatable strings. Upon creating alistofstrings,
WPML asks which languages thewebsite should betranslatable toandautomatically creates the
5http://wpml.orgThe W ordPress Anthology 264
necessary .POand.MOfiles needed tosupport each. After that, WPML provides areally slick interface
inside theWordPress backend thatgives youoptions totranslate strings aswell aswhole posts and
pages. Even better ,itcreates unique, translated permalinks sothatyour posts andpages canbein-
dexed inmultiple languages bydefault! Finally ,WPML integrates atranslator management system.
This letsyouhire professional translators todotranslation work directly onyour site. Alternately ,
youcanuseWPML ’smanagement system toassign specific members ofyour own staff todo
translation inaparticular language.
Ofcourse, WPML isn’t theonly game intown; aswith most types offunctionality inWordPress,
there areseveral other plugins thatyoucanusetoaccomplish thesame purpose. Atthetime ofthis
writing, thebiggest competitor toWPML isqTranslate,6andithasquite asolid following. While
wewon’t getinto afeature comparison ofthetwo, qTranslate isworth looking into, andisthe
translation plugin ofchoice forseveral popular plugins such asGoogle XML Sitemaps, which has
released aspecialized version towork with qTranslate, aptly named Google XML Sitemaps With
qTranslate Support.
Installing W ordPress in Y our Own Language
Sofarwe’ve discussed localizing themes andplugins indetail, butwhat ifthat’smore than you’re
looking for,andyouinstead want toknow how toinstall WordPress itself inadifferent language?
After all,it’sgood tobeable tolocalize themes andplugins, butitsure would beuseful ifwecould
make WordPress display inthelanguage ofourchoosing, right? Well,there’ sagood reason that
we’ve waited until now totalkabout this, aswe’ll beable toutilize thelocalization concepts we’ve
already covered tohelp itallmake sense.
Thanks tothewidespread useofWordPress across theglobe, WordPress hasalready been translated
into many languages foryou, soyoudon’t have tomess around with theheavy lifting. Foryour
convenience, acomplete listing ofavailable languages andlinks totheir repositories isavailable
within theWordPress Codex.7Asforinstalling thelanguage ofyour choice, youcaneither install
itmanually ,oryoucanlook toseeifthelanguage translation team hasaseparate setofinstructions
thatmay beeasier towork with (insome instances, youmay beable toinstall WordPress with your
preferred language already loaded andpreconfigured). Forourpurposes here, we’ll show youhow
todoitmanually from aregular oldEnglish installation:
1.Download the.MOfileforyour language ofchoice. Again, youcanfind links tothese files inthe
Codex.8
2.Next, open upyour wp-config.php fileinatexteditor andlocatedefine('WPLANG', ''); ,replacing
thesecond parameter with theextension defined byyour .MO file.Forinstance, ifyouwere
6http://www .qianqin.de/qtranslate/
7http://codex.W ordPress.org/W ordPress_in_Y our_Language
8http://codex.W ordPress.org/W ordPress_in_Y our_Language265 Going Global with Themes and Plugins
looking tousetheBritish variant ofEnglish anddownloaded theen-GB.mo file,you’d change
thistodefine ('WPLANG', 'en-GB'); .Conversely ,ifyouwere looking totranslate WordPress
toGerman anddownloaded thede_DE.mo translation file,you’d change thelinetoreaddefine
('WPLANG', 'de_DE'); .
3.Once youhave modified yourdefine ('WPLANG', ''); appropriately ,save wp-config.php .
4.Now navigate toeither wp-content orwp-includes andcreate anew folder called languages .So
long asyoucreate thelanguages directory inoneofthese twolocations, WordPress willrecognize
itandlook foryour translation filethere. Canyoutake awild guess atwhat comes next?
5.Ifyouguessed thatwe’ll need toaddour.MO translation filetothelanguages folder ,congratula-
tions—you winthegold star!
That’ sallthere istoit.Next time youlogintoyour WordPress admin area, you’ll find itallpretty
andnew inthelanguage you’ve enabled. Verycool stuff!
World T our Complete
WithWordPress’ scontinued increase inpopularity andrepresentation throughout theworld, you’re
fooling yourself asadeveloper ifyoudon’t consider localization ineverything youcreate forand
with WordPress. Inthischapter ,we’ve touched onseveral aspects oflocalization, including:
■why localization isnow more important than itever hasbeen, andwhy youshould care
■thedifference between internationalization andlocalization
■anexplanation ofhow theprocess works, intheory aswell asinpractice
■adescription ofthethree main types offiles you’re going todeal with intheprocess: .MO,.PO,
and .POT files
■adetailed breakdown ofhow tousePoedit tocreate .POT files
■awalk-through ofhow totranslate textstrings with Poedit andsave them asyour own .POfiles
■adescription ofplugins thatcanbeused tohelp thelocalization process inyour WordPress
sites
■anoverview oftheprocess involved inrunning WordPress inlanguages other than English
Withtheglobal market wenow have available tous,it’llbefuntodiginto marketing andsearch
engine optimization with WordPress inournext chapter .After all,wehave somany new locations
toexplore!The W ordPress Anthology 266
Chapter12
SEO, Marketing, and Goal Conversion
Since theinception oftheWorld WideWebinthemid 1990s, search engine marketing hasoften
proved tobeaconfusing, expensive, frustrating, andultimately disappointing endeavor formany
web developers, search engine marketers, andbusiness owners. While well-intentioned developers
andsearch engine marketers have done their best toprovide solid onsite andoffsite search engine
optimization (SEO) solutions tobusiness owners, results have been sporadically successful, frequently
poor,orentirely nonexistent. It’saproblem thathasperpetuated itself repeatedly over thecourse
ofthehistory oftheWeb,creating aquagmire offrustration among business owners anddevelopers
alike. Sowhy hasitbeen sodifficult tofind areliable solution?
Why SEO Is So Difficult
Aqualified search engine professional would beable totalktoyouforhours explaining why search
engine optimization andmarketing services have historically been hit-or -miss, butwe’ll boilit
down foryou.
SEO Is a Moving T arget
SEO isreally allabout gaining organic search rankings (naturally occurring, “free” rankings gained
foraspecific keyword) insearch engines likeGoogle (and henceforth inthischapter ,we’ll justrefer
toallofthese engines as“Google”.) Google uses numerical formulae called algorithms tocompute
therelevance (and hence theranking) ofanygiven web page publicly available ontheWeb.What’ s
pertinent torealize here isthatGoogle isaprivate company; while itspublic image tends tobe
rather altruistic, itsexistence ispredicated upon exactly onemotive: making money .Google does
thisbyensuring itsusers receive themost relevant results possible toanygiven query based upon
anextremely complex setofcriteria. Ifyoufollow thelogic through, themore relevant thesearch
results, themore trusted Google becomes andhence themore commercially valuable advertisement
space isonitsSERPs ,orSearch Engine Results Pages. Therefore, when Google identifies away to
hone itssearch algorithms toprovide results thataremore relevant toitsusers, it’sfinancially in-
duced tomake therelevant refinement. And Google isvery good atidentifying andimplementing
refinements. Because ofthis, SEO tactics thatworked onagiven website lastmonth orlastweek
may notnecessarily work today ,andwhat works today will almost certainly notbeaseffective in
thefuture.
The Google Sear ch Algorithm Is Private
Here’ swhere therealfunstarts. While it’stotally understandable thatGoogle would doeverything
initspower toincrease thefinancial value ofitsprimary asset insearch relevancy ,it’salsoobvious
thatranking very high inthose search results foraspecific setofkeywords isextremely valuable
forourclients aswell (after all,isn’t thatwhy youareeven reading thischapter?). Thefinancial
rewards associated with ranking onthefirst page forlucrative keywords canbeastounding and
literally make orbreak theeconomic success ofmany different types ofbusiness. It’sbecause of
thisindisputable factthatthesearch engine marketing industry exists atall,andthevolume of
money inplay within themarketplace hasdriven theindustry tobecome fiercely competitive.
Early oninthesearch engine marketing game, themethodology thatsearch engines used torank
web pages wasn’t necessarily aclosely guarded secret, even ifthey weren’t officially made public.
Engines thatlacked manual submission andranking processes bydefinition relied onaformulaic
algorithm thatcould beeasily manipulated ifyouunderstood theweighting oftheformula. This
resulted inthedevelopment ofblack-hat search engine techniques thatwere specifically designed
totrick search engines into providing higher rankings forspecific web pages byunfairly stacking
thedeck intheir own favor through continued exploitation ofvarious search engine algorithms.
Asadirect result ofthisthreat, search engines such asGoogle began toclosely guard thesecrecy
oftheir algorithms, andnow rarely provide straight answers astotheweight oftherelevancy
granted toanygiven factor oftheequation—or whether something is,indeed, afactor atall.The
search engines securing theprivacy oftheir search algorithms, combined with frequently modifying
their makeup hasbeen amassive winfortheconsumer; returning highly relevant search results
makes theWebamore useful toolforusers across theglobe. However ,it’salso introduced and
perpetuated acloudy haze concerning exactly how yougoabout achieving high rankings forany
given web page. This ever-lingering mystery istherootofmuch oftheconfusion andconsternation
associated with search engine optimization andmarketing.The W ordPress Anthology 268
Shades of Gr ay
Thenotion ofblack-hat tactics hasover time come torefer tothenegative endoftheappropriateness
andlegality ofallcommon search engine marketing techniques, with obviously clean andappropriate
techniques being labeled white-hat ,andtechniques thatfallsomewhere inthemiddle ofappropriate
andshady acquiring themoniker ofgray-hat .
Sharks P atrol These W aters
Asconsumers intheInformation Age, wehave come toexpect anddemand answers tothemost
pressing ofquestions atthedrop ofahat.After all,anybody can“google” something andinstantly
have dozens ofanswers attheir fingertips.1Sure, those answers areoften entirely wrong, butit’s
easy enough toread through theresults togain anunderstanding ofwhat something means.
Theproblem isthatbecause Google doesn’t actually publish itssearch algorithm (and forgood
reason), noconcrete answer exists tothequestion ofhow togive aweb page ahigh ranking fora
particular keyword. Because oftheambiguity inherent inthemarketplace, search engine marketers
areforced tooperate with ameasure ofconjecture when working with clients, andthisconjecture
opens thedoor tounscrupulous behavior .While notallsearch engine marketers engage inthistype
ofbehavior ,there iscertainly asubset oforganizations andindividuals within theprofession that
useblack hatandgray hattechniques toattempt togame thesystem andunfairly acquire high
rankings fortheir customers. Even more prevalent arethose who play upon theinherent ambiguity
ofthesystem tosellentirely inaccurate information tounknowing individuals fortheir own personal
gain. These unsavory types have combined todisseminate information throughout themarketplace
thatisoften inaccurate, out-of-date, andjustplain wrong.
Thegood news isthatwhile there isnospecific formula youcanjustplug into thatwill guarantee
you100% success with your search engine marketing endeavors, there arefundamental principles
youcanimplement andconsistently relyonthatwill serve youwell andprovide youwith useful,
targeted website traffic.
Websites Ar e Poorly Coded
Search engine optimization (orSEO) isdefined asthesetofactions youcanimplement structurally
within thecode ofyour website toboost your organic search engine rankings. SEO focuses onthe
on-page characteristics thataffect your organic rankings intheSERPs. Simply put, there arealot
ofpoorly coded websites outthere from anSEO perspective, andmany arewebsites thatorganizations
have paid substantial sums ofmoney for.
1Itsays something about Google’ subiquitousness thatsearching forinformation online hascome tobeaccepted assimply
“googling.”269 SEO, Marketing, and Goal Conversion
While very beautiful tolook atwith sleek, creative navigation favored bymany ,Flash-based websites
areobvious examples ofpoorly coded sites from anSEO standpoint because they almost always
have their content locked into asingle filewith nohope ofanything being indexed byengines.
However ,with Flash sites becoming lesspopular duetothelack ofFlash support onmany mobile
devices, websites thatinstead simply lack theproper coding elements implemented inasystematic
way have become themore common issue. What’ ssadisthat, aside from lack ofeducation, there’ s
really noexcuse tobedelivering websites thatarenotsuitably optimized, andyetit’smore often
therule than theexception. Luckily foryou, thebulk ofthischapter will cover these on-page op-
timization principles.
There’s a Differ ence Between SEO and SEM
Let’sbehonest here: much likegraphic design, web development isarelatively easy field toenter
foraspiring professionals. Ifyou’re looking togetstarted professionally intheindustry ,there are
many tools available (WordPress being oneofthem) tohelp youwith themore technical aspects
ofdevelopment. Clients, however ,usually can’t comprehend thedifference between those just
starting outandmore seasoned professionals with ahigher level ofexpertise; they justlook tothe
developers they’ve hired tobuild thesiteand“ensure itranks onthefirst page ofGoogle.”
This canlead toasituation where theclient isleaning onadeveloper forexpertise, andthedeveloper
simply doesn’t know what they don’t know .It’sforthisreason thattheterms search engine optim-
ization andsearch engine marketing aretypically interchanged asifthey arethesame—but guess
what …they aren’t!
While search engine optimization handles theon-page aspects thatrelate tositerankings, search
engine marketing (orSEM) canbedefined asthesetoftechniques youcanemploy outside the
context ofyour sitetoincrease theranking ofagiven web page. Search engine marketing isallabout
creating quality backlinks towebsites, andemploying Pay-Per -Click (PPC) andAdW ords campaigns,2
placing banner ads, employing remarketing services (where asitedisplays adstousers who’ve
visited previously), andutilizing ascore ofother available techniques todrive traffic toagiven
page. Aside from recognizing thatSEO andSEM aredifferent sides ofthesame coin, thedistinction
isthatwhile SEO issomething youcansimply doonetime onyour website (and quite effectively
ifyoucreate asystematic approach forsubsequent content toautomatically beproperly SEO’d
while it’sbeing added toasite), SEM isanongoing marketing process which willhave nodefinitive
endandrequires adecent budget todowell.
SEO and SEM Requir e a Team Effort
Ahealthy search engine marketing budget isallwell andgood, butmany afrustrated business
owner willtellyouthatthey’ve spent farmore money than they’d care toadmit onPPC, AdW ords,
banner ads, andanynumber oftechniques thathave been promised tobetheright solution. These
2http://www .google.com/adwordsThe W ordPress Anthology 270
business owners have probably even been patient—as many developers andmarketers preach—but
stillseeinadequate results, andfind themselves hemorrhaging time, money ,andsanity justby
trying tocoax people totheir website. Thereasons forthese types ofissues arevaried: incomplete
research, poor websites, inadequate search engine marketing campaigns, alack ofinterest inthe
product ortopic ingeneral, ormore usually acombination ofthese factors. However ,when you
initiate asearch engine marketing campaign, it’scrucial torecognize thatitssuccess orfailure de-
pends ontheoverall quality oftheon-page SEO thatyou’ve setupthroughout your website. Without
these twodistinct components coordinating toconvey thesame message, it’soflittle consequence
how well each oneisdone; your website’ srankings won’t begoing anywhere useful anytime soon.
Tohelp explain therelationship between on-page andoff-site optimization, let’sexamine aquick
analogy tohelp usillustrate theinteractions thetwoofthem have. Visualize yourself standing on
abeach with twokites, oneofwhich isabsolutely top-of-the-line, aerodynamic, light, andbuilt to
collect andutilize wind inthemost efficient way possible, maximizing itspotential forflight. The
second kite, ontheother hand, isliterally abrick attached toapaper airplane thatyoutiedastring
around andproudly decided toattempt tofly.Ifwewere tosetboth kites down onthesand and
observe, we’d likely find thatwhile wemay nothave much control astothedirection it’sheaded,
thewell-crafted kitewould naturally bepicked upbyeven alight wind andgosomewhere onits
own. Thebrick-on-a-string, however ,would sitinthesand without ahope ofmeaningful flight.
Itshould befairly obvious here thatwe’re drawing acorrelation between akite’saerodynamic ca-
pacity with thequality ofaweb page’ son-page SEO. Furthermore, aweb page with content that’s
actually indemand will beafforded abasic level oforganic search engine ranking forrelevant
keyword searches—even ifthatdoesn’t necessarily place itonthefirst page ofGoogle. Sowhere
does search engine marketing fitin?Well,ifakite’salready upandflying onthewind that’snaturally
blowing inofftheocean, search engine marketing works toartificially crank thatwind upanotch
ortwo. When harnessed andwielded byaskilled search engine marketer ,thatkitecanusetheextra
wind toflyhigher anddoallsorts ofprecise tricks toyield specific results. Inthisway,effective
search engine marketing canenhance properly set-up websites, turning them intoprofit centers for
business.
Sadly ,ourbrick-on-a-string isstilloutofluck, andnoamount ofwind short ofahurricane islikely
tomove itsomuch asaninch. Even when itdoes, it’sjustaslikely tobecome buried inthesand
asitistotake flight inanyreasonable way,andcontrol issomething thatyoucanjustforget about.
Thepoint here isthatwithout solid on-page SEO, successful search engine marketing campaigns
areinherently doomed from thestart. Inthisway,WordPress itself won’t winyourankings onthe
first page ofGoogle, butwhen properly implemented will atleast give youtheaerodynamic kite
youneed tohave afighting chance.271 SEO, Marketing, and Goal Conversion
What’ s it all about anyway?
Theurgency thatwebsite developers andbusiness owners feelindriving asmuch traffic totheir
websites aspossible badly misses thepoint. Getting traffic isnice, andreceiving alarge quantity
oftraffic istobeproud of,butregardless oftheamount oftraffic youdrive toyour website, it’sa
high goal conversion rate thatisgenuinely sexy.
Butdoesn’t everybody want millions ofunique visitors ontheir website? Yes,butwhat’ svital to
understand isthatwhen business owners saythey want traffic ,they usually mean they want money .
After all,unless youarebuilding asiteforaltruistic purposes, it’smore useful tohave only afew
hundred people visit your sitewho actually dowhat youwant them todo,than afewthousand
show upwho promptly leave without doing anything atall.This means thatevery page onyour
website hastohave aconcrete purpose, andnotjustageneralized “save-the-world” kind ofpurpose
akin tocorporate mission statements; itneeds tobespecific, measurable, andreal. We’llcallthem
goals.
Awebsite with ahigh goal conversion rateisonethatconvinces itsusers totake theaction itwant
them totake. It’sthedirty little secret thatsomany professionals miss, which ultimately creates
thedefining difference between asuccessful andunsuccessful website development project.
We’llcover goal conversion further oninthischapter ,butasthisisabook about WordPress, we’ll
focus more onSEO asitrelates toWordPress, rather than SEM andgoal conversion ingeneral. (For
those interested inthelatter ,SitePoint haspublished TheSEO Business Guide,3which gives agood
overview ofthissubject.) Search engine marketing isacomplex field whose best professionals are
often notadvanced programmers, inthesame way thatexpert coders arenottypically entirely up
tospeed with theintricacies ofthelatest Google algorithm updates andmodifications. Let’sfocus
onbeing thebest WordPress developers thatwecanbe.
The Big Thr ee Fundamental SEO Components
Now thatwehave abasic understanding astowhy generating search engine rankings andtraffic is
alittle touch-and-go, let’sseehow wecantune upWordPress andmake itaveritable search engine
optimization workhorse forus.While there arelotsoftweaks youcandotofine-tune your website’ s
performance, there arewhat we’ll refer toastheBigThree primary SEO components.
TheBigThree fundamental SEO components are:
■semantic permalinking
■proper<meta> tagand<title> taginclusion
■proper<header> tagstructure andimplementation
3http://www .sitepoint.com/kits/seo-business-guide/The W ordPress Anthology 272
Aslong asyoupayattention tothese BigThree SEO components andkeep inmind thatabsolutely
nothing isasubstitute forquality ,relevant content that’sactually ofinterest toyour visitors ,you’ll
besitting pretty regardless ofwhat SEM strategy youchoose tomove forward with. We’lldiscuss
theimportance ofrelevant content further oninthischapter ,butforthetime being understand that
itsimply makes nodifference how well youoptimize your web page content ifnobody isinterested
inreading itanyway .Therefore, it’svital thatyoumake sure there’ sanaudience who isgenuinely
interested inwhat youhave tosayonaparticular topic before youinvest anytime authoring and
optimizing it.Withthatsaid, let’snow look attheBigThree indepth.
Semantic P ermalinking
Theimportance ofsemantic permalinking cannot beoverstated, andyetitisoneofthemost over-
looked andunderutilized aspects ofbasic search engine optimization. Asweallknow ,each web
page ontheInternet hasitsown web address (orURL), andthatURL cantake alotofdifferent
forms. Thepermanent form ofthislink iscalled apermalink. When wetalkabout semantic
permalinking, wearetalking about theextent towhich thatpermalink issemantic ;thatis,theextent
towhich thepermalink describes thatcontent thatexists onthepage. Toillustrate thepoint, let’s
look atafewexamples ofpossible links toapage thatdiscusses thebiography andresume ofDr.
Marco, amember oftheantelope veterinarian team atalarge animal hospital named Esquandolas.
There arealotofways thattheURL forthislink could beconstructed, some ofwhich aremore se-
mantic than others.
Example 1:http://www .esquandolas.com/index.php?p=311
This link isnotsemantic atall.Sure, wehave thename oftheanimal hospital inthedomain name
itself, butitgives usnoindication astowhat isactually onthepage, andthedomain itself gives
noreference toananimal hospital. Thedomain issue isacommon oneandnotthatbigofadeal,
butyoucanrestassured thattaken asawhole theURL lacks meaning foreither ahuman reading
itorasearch engine spider looking toindex it.Overall, it’savery poor choice forSEO purposes,
providing almost noSEO value whatsoever .
Example 2:http://www .esquandolas.com/about.html
Although it’suncommon tousethistype ofalink with WordPress (although itispossible byusing
thepermalink rule /%postname%.html ),it’satypical format formany websites. While thislink is
atouch more semantic inthatittells usthisis“about” whatever isonesquandolas.com, both humans
andsearch engines arestillleftwondering exactly what thatmight be.After all,unless youhappen
toknow thatesquandolas.com isananimal hospital, thiswillmean little toyou, andtrust us—Google
won’t necessarily know bylooking attheURL either .
Example 3:http://www .esquandolas.com/about-dr -marco273 SEO, Marketing, and Goal Conversion
Allright, thisismore semantic, butstillhasmuch room forimprovement. While we’re yetto
comprehend what esquandolas.com isallabout, wedoknow thatthispage isdesigned tobesome
form ofbiography onadoctor named Dr.Marco. This isenough togive both humans andsearch
engines some clue astowhat’ sonthepage, butwecould stilldobetter .Let’sseehow…
Example 4:http://www .esquandolas.com/veterinary-staff/antelope-specialists/about-dr -marco
Bingo! Here wehave avery semantic link. Wenow cantellthatesquandolas.com hasveterinary
staff, ofwhich some areantelope specialists. It’seasy then todeduce thatwemust betalking about
asizeable animal hospital ofsorts, orsome type oflarge animal breeding center .Wealsoknow that
thepage inquestion willbeabout Dr.Marco, anantelope specialist ontheveterinary staff atesquan-
dolas.com. Inother words, both humans andsearch engines canreasonably infer what thecontent
ofthepage inquestion isjustbylooking atthelink. Ifyougetthisportion ofyour SEO correct, you
have agreat base towork with inyour SEO endeavors.
We’vealready discussed actually setting upyour semantic permalinking inWordPress, buttoreview ,
youcannavigate toSettings >Permalinks tocreate thebasic permalinking rules forthebuilt-in posts
andcategories system, aswell astags. Managing these options willcreate thepermalinking structures
thatyour posts will ultimately beattached to,with each post being differentiated bytheir unique
slug—which isappended totheendofthepermalink structure. Aslug istypically aURL-friendly
version ofapost’ stitle, butyoucancustomize ittobeanything youlike. Therefore, ifthepermalink
structure onthesiteprevious was/%category%/%postname%/ asinFigure 12.1,thepermalink
forapost entitled What is a band without saxophone? might look like
http://www .esquandolas.com/featured-news/what-is-a-band-without-saxophone/ ,where
featured-news isthecategory andwhat-is-a-band-without-saxophone isthepost’ sslug. Again, slugs
canbecustomized forSEO purposes onanindividual basis, soifyoudecided thatthispost would
bebetter served from anSEO perspective iftheslug wasthe-importance-of-saxophones-in-bands ,
youcould make thatmodification aswell.The W ordPress Anthology 274
Figur e 12.1. Setting your permalinks
Creating permalinks foryour pages iseasy.InWordPress, page permalinking istiedtoparent-child
relationships between pages. Forinstance, ifweassumed thatwewere using pages inourexample
forhttp://www .esquandolas.com/veterinary-staff/antelope-specialists/about-dr -marco ,there would
bethree pages tiedtothispermalink with slugs ofveterinary-staff ,antelope-specialists ,and
about-dr -marco .Thepage with theslug ofveterinary-staff would have thepage with theslug of
antelope-specialists asitschild page, which would inturn have thepage with theslug of
about-dr -marco asitschild page. Again, easy stuff once youknow how itworks.
Finally ,themere factthatWordPress includes theability tocreate custom taxonomies adds anen-
tirely new,dynamic aspect tohow youcanbend WordPress toyour SEO needs. Essentially ,there’ s
nolimitation astohow youcanutilize thesystem togenerate linking structures foryour content
thatmakes intuitive sense tohumans andsearch engines alike. Remember thattherelevancy and
consistency ofyour message iskey,andformore information onusing custom taxonomies, look
back toChapter 7.
Proper <meta>  and <title>  Tag Inclusion
Thenext component oftheBigThree isbyfartheoldest andmost widely discussed aspect ofsearch
engine optimization: <meta> and<title> tags. Webdevelopers andwebsite owners have known
about theimportance ofusing these twotools correctly since theearly days oftheWeb.Therefore,
rather than beat thedrum andgoover inpainstaking detail thebasics of<meta> and<title> tags,
we’ll saysimply thatina<meta> tag’sname attribute, “description” refers tosmall textwhich
talks about what isonthepage, and“keywords” areessentially tagsthatdescribe what thebasic
topics ofthepage are.The<title> tagisjustthat—the titlethatisapplied tothepage, andinsome275 SEO, Marketing, and Goal Conversion
browsers isactually displayed ontopofthebrowser window outside theviewable area.<meta>
tagsareimportant, cannot beoverlooked, andneed tobeunique foreach page onyour site. Luckily ,
there areapair ofexcellent WordPress plugins thatyoucandownload andusetomanage these
(and many other) aspects ofyour on-page SEO efforts inWordPress:
WordPress SEO byYoast4
WordPress SEO byYoast isprobably thegold standard inon-page search engine optimization
WordPress plugins. WordPress SEO letsyousettemplates fortitles and<meta>descriptions
andkeywords foralltypes ofpages andposts sothatthey automatically generate themselves
when youinitially post them. Italsooffers ahandy Snippet Preview feature thatshows youwhat
your page willlook likewhen itisfound inGoogle SERPs. There’ sabevy ofother features that
we’ll talkabout later oninthischapter including meta robots settings, canonical settings, and
XML sitemaps, toname afew.
AllinOne SEO Pack5
Theother trusted, time-tested favorite search engine optimization WordPress plugin isAllin
One SEO Pack. AllinOne isthemost downloaded plugin ofalltime, andwhile itlacks the
complete feature setthatWordPress SEO has, it’ssometimes better togowith atoolthatdoes
onetaskvery well. When itcomes toon-page SEO, AllinOne does onetaskextremely well—it
generates unique<meta>descriptions ,keywords ,and<title> tags.
There areother plugins outthere thatalso doagood jobofhandling <meta> and<title> tags, and
youcanfind several themes thatoffer built-in support inthisfashion aswell. Whatever method
youchoose, themost important point istomake sure youaddress thisaspect ofyour site’sSEO
efforts.
Proper Header T ag Structur e and Implementation
Thelastbutcertainly notleast component oftheBigThree isproper header tagstructure andim-
plementation within theactual context ofthepage orpost. This canonly beautomated toacertain
extent, butgetting itright iscrucial tohaving asuccessful SEO experience onanygiven page.
Header tagsaresometimes referred toas<h1> or<h2> tags, andwhen used correctly serve to
identify with more accuracy theimportant keywords andphrases within agiven post orpage. Search
engines usethese tagstosortoutwhat youasthewebsite owner believe arethecentral points of
thecontent within thepage, butthey areoften misused ornotused atallbecause bydefault,
header tagshave formatting thatmakes thetextwithin them appear bigger andbolder than regular
text. Forthisreason, inexperienced users (both web developers andsiteowners) will sometimes
useheader tagstosimply bold anygiven line, thinking ofitasavisual formatting toolmore than
acontent indexing tool. Forthesame reason, they may choose tonotusethem atall,which isa
truly tragic choice. Tobetter understand header tags, let’simagine anewspaper .
4http://wordpress.org/extend/plugins/wordpress-seo/
5http://wordpress.org/extend/plugins/all-in-one-seo-pack/The W ordPress Anthology 276
Youmight scan through aregular oldnewspaper bysimply looking attheheadlines. Ifyousee
something thatcatches your fancy ,youmight continue andwill often seeasubheadline. Themain
headline might read something like“Huge Storm Headed fortheEast Coast” with asubheadline in
asmaller font thatadds something pertinent tothebasis ofthestory ,like“Residents board up
homes andevacuate togetoutofstorm’ spath.” Following thetwoheadlines, there would typically
beaparagraph ortwooftextthatdiscusses thecentral points ofthestory ,reinforcing themain
headline andthesubheadline. Once those paragraphs arecomplete, there may beanew,smaller
headline thattalks about amore detailed aspect ofthestory with several paragraphs thatfollow ,
discussing thepoint. This pattern continues onandontotheendofthearticle, providing anorgan-
ized, concise view oftheinformation being presented. When implemented correctly ,thissame
pattern holds true forhow header tagsshould beused inthecontext ofapost orpage. Have alook
atTheMockingbird Gazette inFigure 12.2.
Figur e 12.2. The Mockingbir d Gazette
We’ve taken astandard newspaper layout with various headlines andsubheadlines, andsuperim-
posed their proper header tagequivalents. Forinstance, themain headline ofanygiven page or
post should always bean<h1> tag,denoting tosearch engines thatthisisthecentral thesis ofthe
post, andthatanything within therestofthepost willrelate toit.Theprimary subheadline isnoted
asan<h2> tag,which keys tothesearch engines thattheinformation therein isalso important, but
notnecessarily thecentral topics ofthepost. After thatweseetwosetsof<h3> tagsthatcanbeused
totipoffsearch engines about what weasthewebsite owners andauthors find pertinent about the277 SEO, Marketing, and Goal Conversion
subsequent paragraphs. Wecancontinue using<h3> tagsthroughout therestofthepost until we
finish itup.
Also important tonote here isthatwhile it’scrucial tomake useofheader tags, it’seven more so
toensure youactually make your header tagskeyword-packed andentirely relevant. Forinstance,
having an<h1> tagthatisnothing more than thewords “Home” or“Welcome toourwebsite” may
besyntactically correct, butit’snotrelevant inanyway,shape orform andwill nothelp yougain
traffic. However ,an<h1> tagthatconsists of“Huge storm headed fortheEast Coast” isextremely
relevant anddescriptive, andisaquality choice solong astherestofthepost discusses andsupports
thetopic ofthestorm thatishitting theeastcoast.
Header tagscan, tosome degree, besystematically implemented inWordPress. Often, thepost or
page title isoutput inatheme asan<h1> ,giving youaninstant search engine anchor todescribe
what thepage isabout. However ,further on-page SEO asitpertains toheader tagsreally depends
ontheuser entering incontent from thatpoint forward. Theme designers can(and should) create
custom<h2> ,<h3> ,and<h4> styles tomatch content stylings inside their themes, butitisstillup
totheusers tounderstand how tousethem. Furthermore, because most WordPress sites arecon-
stantly being updated, it’snotreally something thatyoucandoinonepass toofficially “SEO a
website,” butrather ahabit your authors andeditors need tolearn.
The Anatomy of a T ypical Sear ch Engine Spider Visit
Now thatwe’ve gone through each component oftheBigThree, let’stake alook atthedecision-
making process ofatypical search engine spider asitviews andindexes agiven post orpage on
thesite. Understand thatthisisavery simplified version ofhow your web pages areranked and
indexed; it’salso nottheentire story ,asthere areanumber ofoff-page factors thatcontribute to
anygiven page’ sultimate ranking ataspecific point intime. Withthatsaid, consider thefollowing
scenario:
Athttp://www .esquandolas.com/veterinary-staff/antelope-specialists/about-dr -marco ,asearch
engine spider arrives andimmediately logstheURL. Inside theURL, itsees thatthere arekeywords
itcanunderstand andmake associations with: veterinary staff, antelope specialists, andDr.Marco.
We’llassume thatthe<title> tagsand<meta> tagsthatarebuilt intothepage back thatinformation
up.Then when thespider begins toparse thecontent onthepage, itwill hopefully find an<h1>
tagthatsays something totheeffect of“About Dr.Marco Pisgah, Antelope Veterinarian Extraordin-
aire”. An<h2> -tagged lineoftextreading “WorldFamous Antelope Disease Researcher from Michigan
State University” provides additional pertinent information about thecentral topic—Dr .Marco
Pisgah. Assuming thatthenext fewparagraphs ofparagraph textsupport those twoinitial assump-
tions andthen build upon thetopic with subsequent header tagsandparagraph text, we’ll seethat
thispage hasahigh base ranking which canbepositively augmented byexternal search engine
marketing efforts. Inthisway,alloftheBigThree SEO components work together todrive trafficThe W ordPress Anthology 278
when traffic isthere todrive, which ofcourse comes back tothenotion ofrelevancy anddemand
forthetargeted keyword andcontent area.
While these components arewhat youmainly need topayattention toinorder tohave achance at
ranking well, there areafewcaveats. First ofall,theoperative phrase intheprevious sentence is
“tohave achance atranking well.” Asinlife,there arenever anyguarantees other than youhave
tobeinittowinit.Correctly making useoftheBigThree merely gains youentry into thesearch
engine game, giving youtheopportunity tocompete with everybody else. Inmany markets, the
mere factthatyouaresetupcorrectly isenough tograb youtraffic andrankings, butthat’saphe-
nomenon thatwill undoubtedly fade ineffectiveness over time. Secondly ,ifyouuseanyofthese
incorrectly (which istosayyoumismatch thecontent onyour sitewith your semantic permalinks
and<meta> tags, etc)youruntheriskofbeing slapped down inthesearch engines anyway .Keep
inmind thatsearch engines arenotpublic butrather private entities, andthey aimforrelevancy .
Ifyour permalink indicates thatapage isallabout children’ stoys andintruth itisactually about
trading stocks andbonds, your content mixwill beoffandyour rankings likely will betoo.The
most important thing istouseyour head, berelevant, andabove allelsedonottrytogame the
system—ultimately ,you’ll lose every time.
Other Important SEO Aspects
What elsecanyoudotoreally make thedifference between areasonably optimized siteandasite
that’sakin toarace carcruising along inhigh gear? This iswhere theintricate changes inthesearch
engine algorithms really come intoplay.Theimportance ofanyofthefollowing tools andtechniques
will likely change over time with new techniques coming into play every week, soit’snever abad
idea toconsult with areputable search engine marketing professional tofind outabout current
trends. Paying attention tothefollowing aspects ofSEO will also help youquite abit.
Image alt Attributes
Areally easy way toincrease anypage’ sSEO istoproperly optimize theimages inthecontent of
thepage orpost bysetting descriptive altattributes onyour images (within the<img> tag).altat-
tributes aredesigned toprovide atext-based alternative todescribe what animage actually represents
insituations where theimage isunable tobedisplayed. Forinstance, inasituation where asearch
button thatdisplays amagnifying glass isunable tobedisplayed, appropriate alttextmight be
search orfind .Conversely ,inasituation where animage displays aphoto ofalighthouse ina
story oncoastal North Carolina, appropriate alttextmight bea coastal lighthouse in North
Carolina .Theimportant point isthatsearch engines canseethatanimage issupposed tobeem-
bedded onthepage, butifit’swithout thebenefit ofaltattributes, they have absolutely noidea
what thatimage is.Adding the<img alt="…"> tagcangive asearch engine valuable information
tobetter understand andcreate arelevancy ranking foranygiven post orpage onyour site.279 SEO, Marketing, and Goal Conversion
Interms ofactually implementing imagealtattributes inWordPress, navigate totheMedia Library
andclick ontheEditbutton ofanygiven image tomanage itscharacteristics. Underneath theTitle
field istheAlternate T ext field. Simply fillinavalue fortheimage inthisfield andclick theUpdate
Media button—you’ve added analtattribute toyour image.
Individual P age Privacy Settings
While usually you’ll want tomake anentire website readily visible andavailable tosearch engines,
there areavariety ofsituations where it’sdesirable tohave finer control over exactly how theengines
treat your content. Fortimes likethis, thenoindex ,nofollow ,andnoarchive attribute values
within the<meta> tagareavailable. These attribute values canbeintroduced inanycombination
with oneanother ,andareused inthefollowing situations:
noindex This attribute value isused insituations where youdonotwant aparticular page
indexed byasearch engine inanyway.This essentially makes thepage invisible as
farassearch engines areconcerned.
nofollow This attribute value isused when youwant tohave acertain page indexed, butyou
donotwant search engine crawlers tofollow anypages thatmay exist onacertain
page.
noarchive This attribute value isused when youdonotwant asearch engine tostore acached
version ofyour page, andwould prefer thatusers always goback toretrieve afresh
version ofthepage instead.
Yourentire WordPress sitewill havenoindex andnofollow values applied toitwhen youchoose
tomake your website invisible tosearch engines intheWordPress administrative back endatSettings
>Privacy .There is,however ,awide variety ofplugins andthemes thatwillgive yougreater control
ofthese settings onindividual pages andposts ifyouwish.
XML Sitemaps
XML Sitemaps areXML files thatdescribe thecomplete, updated structure ofyour WordPress site
atanygiven time. Each time search engines start indexing your site, they look foranXML Sitemap
first togain theoverall layoftheland, tofind outexactly what isonthesitesothatnothing is
missed. Inthisway,XML Sitemaps aresimple butcrucial elements ofSEO, andcanbeeasily utilized
tobetter improve theeffectiveness ofanysearch engine’ sindexing efforts.
There areseveral excellent XML Sitemap tools andplugins available forWordPress, oneofwhich
istheWordPress SEO byYoast plugin wediscussed inthesection called “Proper<meta> and
<title> TagInclusion” .Quality WordPress XML Sitemap plugins generate anew copy ofthe
Sitemap every time youmake acontent change toyour site, aswell aspayattention tothenoindex ,
nofollow ,andnoarchive rules yousetonanygiven page orpost. Furthermore, quality plugins
also notify allmajor search engines every time youcreate anew post orpage.The W ordPress Anthology 280
Disclaimers , Terms and Conditions , and Privacy P ages
While thishaslittle dotowith SEO inparticular ,ithasbeen repeatedly demonstrated thatmany
search engines willtend toplace anegative mark against websites thatdonotinclude pages which
address their disclaimers, terms andconditions, andprivacy policies. Asageneral rule, ifyouare
running acommercial website thatiscollecting money ,it’sagood practice tomaintain these pages
andmake them visible onyour siteandinyour XML sitemap.
Proper Use of 30 1 Redir ects and Avoidance of 404s
Finally ,it’srather common tofind people migrating from other content management systems or
static HTML sites toWordPress. Injustabout anyinstance where youaremigrating your website
from oneplatform toanother ,your permalinks will usually change too.Since most pre-existing
websites have some form oftraction insearch engines, thequestion ofwhat todoabout these old
links often arises.
Simply put, ifaweb page hasbeen indexed inasearch engine andthen ceases toexist, theentry
inthesearch engine itself stillremains. Subsequently ,when visitors click ontheoldlink, they’ll
receive a404 page not found error ,anadverse consequence thatmay cause SEO traction issues
onyour site. While it’sactually arather hotly debated topic astowhether themere existence of
404s negatively affects search engine rankings foragiven site, almost allsearch engine marketing
professionals will recommend theimplementation of301redirects insituations where youare
migrating posts andpages from onepermalinking structure toanother .301redirects arepermanent
one-to-one relationships thatareestablished between theURL oftheoldversion ofaweb page and
thenew web page’ sURL. Inthisway,when auser clicks onasearch engine result thatyields an
older ,nonexistent page, theuser isimmediately directed tothenew version ofthepage inatrans-
parent way.Youcaneither hardcode direct linear relationships from page topage when establishing
301redirects, oryoucanuseregular expressions tocreate dynamic patterns thatautomatically push
oldlinks totheir newer counterparts.
There aretwoprimary ways toadd301redirects toyour siteinWordPress: bydirectly editing the
.htaccess filetohardcode individual 301s or301patterns, orthrough theuseofaplugin. Areally
great plugin tousethathandles allyour 301WordPress—by directly editing the.htaccess fileto
hard code individual 301s or301patterns, orthrough theuseofaplugin. Areally great plugin to
usewhich handles allofyour 301redirection needs isappropriately named Redirection6.Inaddition
tohandling 301redirects, Redirection also keeps track of404errors, soyoucanseeifandwhere
youhave recurring 404issues onyour site. Italsoallows youtohandle allyour manual 301reduc-
tions right inside theplugin without theneed toedityour .htaccess file.Overall, avery handy tool
tohave atyour disposal.
6http://wordpress.org/extend/plugins/redirection/281 SEO, Marketing, and Goal Conversion
It’s about GOAL CONVERSIONS!
Aswenoted earlier ,grabbing asmuch traffic asyoucanhandle isnice, butthebigboys will laugh
atyouwhen youassert thatsomehow generating atonoftraffic willmake your website successful.
Theneed many developers feeltogenerate asmuch traffic aspossible misses thepoint ofwhy we’ve
brought ourwebsite totheparty inthefirst place—to generate aspecific result. Aswe’ve already
described, thisconsists oftheprocess ofsetting tangible, specific goals foryour website’ sperform-
ance, andmeasuring thesuccess ofyour website against how well youmeet your goals onaconsistent
basis. Ifthere’ snogoal inmind foryour website, you’ve already wasted your time andfinancial
resources.
Let’sconsider asimple example. Twoseparate window treatment companies areeach running
websites with thesame goal: togenerate alistofpeople who areinterested inthedifferent ways
thatwindow treatments canincrease thevalue oftheir home andultimately make their lives better .
Thelistitself isextremely valuable, asitallows each company todevelop relationships with qual-
ified consumers who may beinterested inpurchasing their products; theendgoal ultimately isto
sellthese qualified consumers services onarecurring basis. Inother words, it’sessentially Permission
Marketing 101, andit’sacommon strategy employed astheprimary goal onmany authority-type
websites.
Ifthefirst window treatment company manages tosecure 50,000 visits inasingle month, butonly
hasagoal conversion success rateof0.5%, they’ll have netted just250people ontheir mailing list.
Ifthesecond company manages only 20,000 visits inthatsame period, buthasahigher goal con-
version rateof4%(which isstillavery conservative number), they’ll endupwith 800people on
their mailing list.Therefore, thesecond company hasmore than tripled thesuccess andeffectiveness
oftheir campaign compared totheir competitor ,doing itwith lessthan halfthetraffic. This isa
scenario thatplays outinbusinesses around theworld every day,with themain point being that
it’snotabout thequantity oftraffic youreceive ornot,buthow well youconvert thetraffic you
bring toyour website. Forthisreason, organic ranking isusually enough, especially inunique,
noncompetitive search keyword niches. Ifyour organization isoperating inoneofthese niches and
youthink you’re doing everything right, butseeing adiminishing margin ofresults, consider
working onyour goal conversion techniques andrates, rather than attempting todrive more traffic.
Thenext natural question is:how canweincrease ourgoal conversion rates? While thisisn’t abook
onsearch engine marketing andgoalconversion perse,it’simportant tobeasking theright questions
soyoucandigdeeper into thetopic. Therefore, let’scover afewofthemore important aspects of
goal conversion andthetools youcanusetotighten upyour results.
Metrics and Split T esting
First andforemost, ifwewant tobelooking forgoal conversion rates, weneed tokeep track ofthem
with metrics. Metrics isageneric term forusing tools totrack thenumber oftimes thatpeople visitThe W ordPress Anthology 282
anygiven page andtake certain actions. Probably themost commonly used metrics system isGoogle
Analytics, afreeservice thatyoucanintegrate intoanywebsite totrack who isvisiting agiven page,
where they arecoming from, what their path isthrough thewebsite, how long they stay onany
given web page inparticular aswell asthewebsite asawhole, andmuch more. Many other systems
exist thatassist youwith tracking, compiling, andparsing web page usage statistics inuseful ways;
thetrick isinfiguring outwhich systems work foryou, sothatyoucantrack your own website goal
conversion pages intheway you’d prefer .
However yousetupyour metrics systems, your next step istosetupmechanisms tofigure out
which methods aremore effective than others. Themost common way todothisisthrough split
testing .Also referred toasA/Btesting, split testing isaseasy ascoming upwith twodifferent versions
ofaweb page orweb page component, serving them uprandomly toasuitable number ofpeople
representing areasonable sample ofyour audience, andseeing which onedoes better overall. By
using split testing over andover again onthesame page, youcanrefine your presentation factors,
including your page’ slayout andwritten content, andoptimally increase your goal conversion
rates. It’sassimple asasking agroup ofyour potential buyers which onethey like—option Aor
option B.And best ofall,since thepages arebeing served uprandomly ,your visitors have noidea
thatthey’re being polled; they justreact genuinely .Split testing istruly anelegant solution to
finding outwhat works andwhat doesn’t.
Now thatwearenumerically tracking things andunderstand how totestdifferent concepts, what
arethevariables wecantesttoincrease ourgoal conversion rates? Intruth, there areasmany vari-
ables asyour imagination cancome upwith. After all,anything thatcould even remotely affect
your users’ experience while visiting your siteisapotential location tosplit testsomething inorder
tocreate amore favorable outcome foryourself. However ,there areafewcommon variables we
canoutline.
Keywor ds and T ext
Inmarketing, thesubstance ofanoffer israrely asimportant astheactual wording used toconvey
thatoffer.It’sforthisreason thatthesaying is“people don’t buytheproduct, they buythesalesper -
son.” Asawhole, people tend towant make anemotional connection with anitem before they are
moved totake anaction ormake apurchase. Forthisreason, marketers often choose tosplit test
different copy toseewhich performs better .Forexample, ifyouaresplit testing aweb page selling
adietpill, youmay choose totestwhether theheadline “Feel better about yourself inyour bathing
suitthissummer” performs better than“Wecanhelp yousqueeze back into your bathing suitin
time forsummer .”Both headlines sayessentially thesame thing, butoneofthem will more than
likely testoutbetter than theother insplit testing. Once youfind outwhich oneworks better ,you
cansplit testthatagainst another sample tofurther hone your presentation.283 SEO, Marketing, and Goal Conversion
Making the Right Offer
Togenerate higher goal conversions, work outwhether ornotyouaremaking theright offer toyour
target audience. Let’ssayyou’re attempting toboost membership onyour website’ smailing list.A
simple testcould betolook atwhether ornotpeople aremore likely tosubscribe tothelistifyou
offer theoption tojointhelistforfreeproduct updates andsales specials, orifconversion rates are
higher when youalso offer togive them afreedownloadable ebook. Iftheebook opt-in tends todo
better ,afollow-up testmight betoseewhether afreeebook creates higher conversion rates than a
freemp3 ofthesame content, oreven apackage deal thatcontains theebook andthemp3 inone
zipfile.Thepossibilities arelimited only byyour imagination.
Differ ent Visual Layout
Another common testthatoften yields eye-popping results istocompare individual layouts ofthe
same page with different combinations ofvisual elements. Does anopt-in convert atahigher rate
when it’sontheupper -leftorontheupper -right corner ofthescreen? Does ithelp ifthere’ savideo
thaturges visitors toclaim thatfreeebook byfilling outtheir information intheopt-in? And does
itmake anydifference ifthevideo automatically begins playing when youreach thepage, orifyou
have toactually click thePlaybutton tomake itstart? Theanswers tothese questions will almost
always differ depending onwho your target audience is,andit’safabulous topic tosplit testto
achieve better results.
Heatmaps
Finally ,there aretools andservices youcanusethatactually keep track ofwhere people click their
mouse onaweb page. This information isthen translated into heatmaps ,agraphical format that
shows where people areactually clicking totake some form ofaction onanygiven page. Heatmaps
areexcellent forgaining additional insight astohow your users understand thedifferent pages on
your website, andcanreveal problems andtrends thatyousimply can’t extrapolate bymerely
looking attherawnumbers coming infrom thesitemetrics.
Over to Y ou
We’ve only justscratched thesurface ofthevarious types oftechniques youcanusetoincrease
your goal conversion rates, butthemost important aspect tokeep inmind isthatwhile traffic gen-
eration isanexcellent topic tostudy andimplement, high goal conversion levels will ultimately
determine thesuccess orfailure ofyour website.
Search engine optimization hastraditionally been oneofthose “black magic” type topics inweb
development thatbusiness owners arefiercely concerned about andmany web developers routinely
duck orprovide fartoosimplistic asolution to.Inthischapter ,wedefined thedifference between
SEO andSEM, explained theprimary reasons why it’sallamoving target that’sreally tough to
master ,andexplained thatultimately there isabsolutely nosubstitute forquality ,relevant content.The W ordPress Anthology 284
Following ourintroductory discussion onSEO andSEM, wetackled themeat ofon-page SEO and
introduced theBigThree fundamental SEO components: semantic permalinking, proper<meta>
and<title> taginclusion, andproper header tagstructure andimplementation. Afterwards, we
putallthree components together andoffered asimplified explanation astohow they work in
tandem (oragainst oneanother) when asearch engine spider pays avisit toanygiven page orpost.
Afterwards, wefinished upourdiscussion onSEO byexamining afewadditional items thatare
worth paying attention towhen tweaking oursearch engine rankings andperformance.
Finally ,weunveiled thedirty little secret thatwhile search engine optimization isnice, it’shardly
themost important aspect increating asuccessful site—a myth that’sbeen forged byalmost two
decades ofbadinformation. Instead, therealholy grail ofwebsite success canbefound through
goal conversions, atopic thatdeals specifically with identifying concrete, tangible, measurable
goals foranygiven webpage, andseeking toincrease them through trial-and-error testing techniques.
Wethen went ontodiscuss some ofthese techniques, andoffered abasic path forward inlearning
more about creating successful websites.
Folks, it’struly been afunride, andwehope you’ve enjoyed reading thisbook asmuch aswe’ve
enjoyed putting ittogether foryou. Until next time, solong…andthanks forallthefish! Bewell.285 SEO, Marketing, and Goal Conversion

Index
Symbols
#bbpress IRC, 19
#buddypress-dev IRC, 19
#wordpress IRC, 19
#wordpress-dev IRC, 19
$_GET requests, 111, 203
$_POST requests, 111, 203
$abs_rel_path parameter ,120, 244
$after_title tag,132
$after_widget tag,132
$args array ,166–167, 209
$attr parameter ,193
$atts parameter ,197, 198
$before_title tag,132
$before_widget tag,132
$callback parameter ,134, 201
$callback_args parameter ,135
$content parameter ,197, 198
$context parameter ,135
$control_callback parameter ,201
$crop parameter ,190–191
$deps parameter ,211
$domain parameter ,120, 243, 244
$file parameter ,208
$function parameter ,208
$handle parameter ,211
$height parameter ,190, 191
$hook parameter ,209
$idparameter ,134, 193
$in_footer parameter ,211, 212
$meta_type parameter ,206
$name parameter ,191
$object_type parameter ,165
$page parameter ,134
$path parameter ,244
$plugin_rel_path parameter ,121, 244
$priority parameter ,135$recurrence parameter ,209
$size parameter ,192, 193
$src parameter ,211
$taxonomy parameter ,165
$timestamp parameter ,209
$title parameter ,134
$ver parameter ,211
$widget_id parameter ,201
$widget_name parameter ,201
$width parameter ,190, 191
$wp_query variable, 74
%link token, 66
%title token, 66
301redirects, 281
404redirects, 281
404.php template, 146
[]brackets, 135
__()function, 243, 245, 253
_e()function, 243, 245, 246, 253
A
A/B testing, 283
$abs_rel_path parameter ,120, 244
action hooks, 109–111
actions, 84
Add New Post screen, 36–38
add_action() function, 82, 110, 111, 122
add_contextual_help hook, 93–95
add_custom_background() function, 151
add_custom_image_header() function, 151
add_feed() function, 207
add_filter() function, 111
add_image_size() function, 192
add_meta_box() function, 86–87, 134–135
add_metadata() function, 206
add_new label, 168
add_new_item label, 168
add_option() function, 205
add_options_page() function, 122
add_post_type_support() function, 83
add_rewrite_endpoint() function, 207
add_rewrite_rule() function, 207
add_rewrite_tag() function, 207
add_shortcode() function, 135
Admin menu, 23–24, 223
Admin screen, 124–125
admin screen names, 93, 94
admin_head hook, 111, 125
admin_init action, 87
admin_init hook, 94, 111, 135
admin_notices hook, 93
Administrator role, 53
advanced-cache.php plugin, 106
AdW ords, 270
$after_title tag,132
$after_widget tag,132
AJAX Thumbnail Rebuild, 182
Akismet plugin, 48
alignment classes, 179, 193
AllinOne SEO Pack plugin, 276
AllSites submenu, 224
all_items label, 168
altattribute, 279–280
Apache, 218
APIKey,48
APIs
Cron, 208
Dashboard (seeDashboard API)
HTTP ,203–205
Metadata, 206
Options, 205
Plugins, 196
Rewrite, 207–208
Shortcode, 196
(seealso shortcodes )
Transients, 206
Widgets, 196
WordPress, 195–196
Appearance menu, 27apply_filters() function, 187
archive templates, 98–100
archive.php template, 146
archive-{posttype}.php, 98
archiving
noarchive attribute, 280
pages, 83
sites, 224
arguments array ($args), 166–167, 209
Atom Publishing Protocol, 41
$attr parameter ,193
attributes
HTML, 112, 113
page, 32
$atts parameter ,197, 198
audio, 30, 46–47
author field, 83
Author role, 53
author ,displaying, 60
Automattic, 3
Available Widgets area, 51
avatars, 49
B
b2/cafelog, 2–3
b2evolution, 2
backgrounds, custom, 151–152
BackPress, 212–213
backups, 27, 217
banned names, 231–232, 238
#bbpress IRC, 19
$before_title tag,132
$before_widget tag,132
black-hat SEO, 268, 269
blog networks, 7
blog-deleted.php plugin, 106
blog-inactive.php plugin, 106
blogs
about, 3
archiving/deactivating, 224
suspending/deleting, 106, 281288
inWordPress, 5
blogs.dir directory ,221
blog-suspended.php plugin, 106
brackets [],135
#buddypress-dev IRC, 19
Bulk Actions button, 34
C
caching plugins, 106, 206
calendar widget, 25
callback argument, 86
$callback parameter ,134, 201
$callback_args parameter ,135
callback_args argument, 86
capabilities array ,167
Capability Manager plugin, 54
Captcha verification, 54
captiontag option, 185
catalogs (see.POT files)
categories
about, 34–35
adding posts to,37
adding tomenu, 50
creating, 38
displaying, 62, 63
grouping (seetaxonomies )
managing, 38–39
setting default, 41
tagsvs,160
templates for,146
Categories management screen, 38–39
Categories meta box, 37
category .php template, 146
chat rooms, 19
Cimy User Extra Fields plugin, 54, 237
CMS (content management systems), 2, 3
Codex, 17
columns parameter ,183
comment_post hook, 111
comments
about, 47avatars for,49
comment_post hook, 111
disabling, 49
discussion settings, 48–49
managing, 47–48
spam, 48, 49
comments field, 83
Comments page, 47, 48
conditional tags, 64–65
content
dynamic (seeposts )
static (seepages )
content editor ,29–31
content management systems (CMS), 2, 3
$content parameter ,197, 198
content types (seepost types )
content wireframe, 161, 163, 164
context argument, 86
$context parameter ,135
Contributor role, 53
$control_callback parameter ,201
Core WordPress, 4, 153, 216
counters, 68–70
cPanel, 9, 218
CRM (customer relationship management), 8
Cron API, 208
cron.php file,208
$crop parameter ,190–191
CSS
inplugins, 124–125, 127–128
forthemes, 140–141
versions supported, 5
custom fields, 62, 64, 83, 85–87, 237
custom searching, 164
customer relationship management (CRM), 8
custom-fields field, 83
D
Dashboard
about, 22
adding widgets, 200–201289
Network Admin, 222–223
removing widgets, 202–203
Right Now widget, 27
screen options, 23
show/hide widgets, 23
SiteAdmin, 222
sizing widgets, 23
data validation, 112–113, 127
Database APIs, 205–206
database plugins, 106, 123–124
databases, 10–12, 123–124
date format, 25
date, displaying, 61
db.php plugin, 106
db-error .php plugin, 106
deactivation, site, 224
dead links, 281
delete_metadata() function, 206
delete_option() function, 205
delete_transient() function, 206
$deps parameter ,211
directory structure, 10, 16–17, 56
disclaimers, 281
Discussion Settings page, 48–49
display logic, 153–154
distraction-free writing, 30–31
DNS (Domain Name Service), 217–219
do_shortcode() function, 187, 199–200
domain mapping, 106, 237
$domain parameter ,120, 243, 244
Draft status, 31
drop-in plugins, 105–106
Drupal, 241
dynamic content (seeposts )
dynamic_sidebar function, 150
E
_e()function, 243, 245, 246, 253
echo, vsreturn, 136, 198
ecommerce sites, 6, 7
Edit Image button, 45Edit Page screen, 28–29
Edit screen, customizing, 85–87
edit_item label, 168
editor field, 83
Editor role, 53
elsestatement, 59
email address, setting, 25
email, posting via,41
enqueueing, 127, 188
escaping (data), 112, 127
event management system, 154
events, scheduling, 56
excerpt field, 83
excerpts, 61, 76
exclude option, 185
exporting content, 52
F
Facebook, 155
featured images (seepost thumbnails )
$file parameter ,208
filestructure, 4
filter hooks, 111–112, 187
Flash, 270
footer .php template, 142
foreach loop, 72
fork, 2
form, 54
form validation, 54
Format meta box, 37
formatting text, 29
forms, 85
forums, 6, 7, 18
front-page.php template, 146
fullscreen editing, 30–31
$function parameter ,208
functionality
about, 152–153
display logic vs,153–154
hardcoding, 157
low-level vshigh-level, 225290
inpage templates, 156
plugin vstheme, 81, 154–157
specialty ,157
functions.php file
about, 147–148
contextual help, 93
custom backgrounds, 151–152
custom headers, 150–151
custom menus, 148–149
enabling post thumbnails, 189
localization functions, 243–244, 247
plugins vs,81
widgetized areas, 149–150
G
gallery shortcode
about, 182–183
adding totemplates, 187
configuring, 183–185
editing with GUI, 185–187
GUI editor ,186
General Settings page, 16, 17, 25
Gershwin, 4
GET method, 204
$_GET requests, 111, 203
get_ functions, 63–64
get_metadata() function, 206
get_option() function, 205
get_post_custom() function, 64
get_posts() function, 71–72, 73
get_sidebar() function, 143–144
get_terms() function, 176
get_the_category() function, 63
get_the_modified_time() function, 63
get_the_post_thumbnail() function, 193
get_the_term_list() function, 97, 175
get_the_time() function, 63
get_transient() function, 206
gettext, 168, 242–243, 253, 254
Gnu Public License (GPL), 4
goal conversion, 272, 282Google, 267–269
Google Analytics, 283
GPL (Gnu Public License), 4
gravatar .com, 49
H
<h#> tags, 276–278
hamburger analogy ,142–143
$handle parameter ,211
has_archive argument, 83
has_post_thumbnail() function, 192
have_posts() function, 59
HEAD method, 204
header tags, 276–278
header .php file,142
headers, custom, 150–151
heatmaps, 284
$height parameter ,190, 191
help panels, 92–95
hierarchical argument, 83, 90, 167
home.php template, 146
$hook parameter ,209
hooks
about, 84, 109
action, 109–111
add_contextual_help, 93–95
Admin menu and, 24
admin_head, 111, 125
admin_init, 94, 111, 135
admin_notices, 93
comment_post, 111
deactivating, 208
fiction, 111
filter ,111–112, 187
init, 82, 111
publish_post, 111
registering, 208, 210
user_register ,111
widgets_init, 128, 133
wp_dashboard_setup, 201, 202
wp_footer ,110291
wp_head, 109–110, 151
hosting options, 3–4
.htaccess file
about, 57
enabling Multisite, 221
enabling permalinks, 40
installing, 17
HTML
forimage galleries, 184–185
scrubbing, 112–113
versions supported, 5
HTTP API, 203–205
HTTP response codes, 204
httpd.conf file,218
human_time_diff() function, 63
I
i18n, 242
icontag option, 185
id
Edit page, 86
post, 183, 184
$idparameter ,134, 193
ifstatements, 59, 64
IIS,40
image galleries (seegallery shortcode )
Image Properties settings, 44
images
adding, 182
adding topage, 30
altattribute, 279–280
attaching, 183
deleting, 43
featured (seepost thumbnails )
formatting, 179
inserting, 42–43
lightbox view ,187–188
link URL, 44
manipulating, 45–46
modifying, 43–44
setting parameters, 43, 47sizing parameters, 180–182, 184
uploading, 179, 234
user icons, 49
images directory ,119
<img> tag,279
importing content, 52
$in_footer parameter ,211, 212
include files, 57
include option, 185
index.php file
installing, 17
location of,56
template hierarchy ,95
TheLoop and, 58
theme configuration, 141–142, 143
information hierarchy ,160–161
inithook, 82, 111
install.php plugin, 106
installation, Wordpress
directory structure, 10, 16–17
inother languages, 265–266
manually ,13–15
using installers, 15–16
using web interface, 9–13
installers, 15–16
internationalization, 242
Internet Relay Chat (IRC), 19
intranets, 6
IRC(Internet Relay Chat), 19
istags, 64–65
is_front_page() function, 146
is_home() function, 146
is_page tag,65
itemtag parameter ,184
J
JavaScript, 5, 112, 188, 210–212
Joomla, 241292
K
keywords, 283
L
L10n, 242
label argument, 166
labels array ,83, 90, 166, 167–168
language translation (seelocalization )
language, specifying, 120–121
languages directory ,119, 121, 250, 266
layout wireframe, 161
license.txt, 109
licensing, 4
lightboxes, 187–188
link categories, 160
link option, 185
%link token, 66
link URL, 44
links
content type, 39
dead, 281
inposts, 29
permanent (seepermalinks )
Linux OS,8, 40, 57, 207, 218, 238
Little, Mike, 2
load_plugin_textdomain() function, 120–121, 
244, 245, 249
load_theme_textdomain() function, 243–244, 245
locale, 247
localization
about, 242–243
gettext, 242–243
internationalization vs,242
managing files (seePoedit )
ofWordPress itself, 265–266
plugin, 120–121, 126–127, 244, 248–250
reasons for,241–242
summary ,245–246
taxonomy ,167
theme, 243–244, 246–248translation files, 243–244, 250, 252, 253
translation keys, 244–245
with WPML, 264–265
loops (seeTheLoop )
M
maintenance.php plugin, 106
Manage Plugins screen, 108
Manage Themes screen, 26
marketing sites, 6
media
(seealso images )
about, 41
directory structure, 57
filetypes, 234
hosting options, 46–47
inserting, 42–43
setting parameters, 43, 47
upload settings, 234
Media Library ,41, 45–46, 179, 280
media players, 46–47
Media Settings page, 43, 47, 180–182, 190
meetups, 18
Members plugin, 53
Membership setting, 25
membership sites, 6
menu settings, 234, 235
menu_icon argument, 83
menu_name label, 168
menu_position argument, 83
menus
custom, 50–51, 148–149
pull-down, 89
Menus screen, 50–51
meta boxes
adding, 86–87, 134–135
Categories, 37
Dashboard, 202
Format, 37
page, 31–32
inplugins, 134293
post, 36–37
Post Tags,38
taxonomy ,172
meta fields, 87
<meta> tag,275–276, 280
meta_key ,75–76
$meta_type parameter ,206
meta_value, 75–76
Metadata API, 206
metadata tables, 206
metrics, 282–283
migration, site, 52
.MO files, 244, 245, 250, 258, 265–266
mobile devices, 188
more quicktag, 61
Move toTrash button, 33
Mullenweg, Matt, 2
Multisite
about, 215
adding users, 226
archiving sites, 224
banning names, 231–232, 238
creating network, 220, 221
creating sites, 223–224
creating znetwork, 219–221
deactivating sites, 224
enabling, 16, 216–219, 238
history of,216
operational settings, 230
plugins in,106, 219, 227, 234, 235, 236, 237
registration messages, 232–234
registration settings, 230–232
routing collisions, 231–232, 238
sitesettings, 225–229
spam blogs, 224
themes, 227–228, 235–236
unsupported, 238
updating sites, 236–237
upload settings, 234
viewing users, 235
widgets, 223mu-plugins directory ,104, 105
must-use plugins, 81, 104–105, 236
MySQL, 5, 112
N
name attribute, 275
name label, 167
$name parameter ,191
namespaces, 216–217
<nav> element, 96
navigation
custom menus, 148–149
customizing, 50–51
pagination, 65–66, 74, 98
nested labels array argument, 166, 167–168
Network Admin Dashboard, 222–223
network admin role, 221, 222, 224
network settings, 229–235
network, site(seeMultisite )
new_item label, 168
next_post_link() function, 65, 66, 96
next_posts_link() function, 65
noarchive attribute, 27, 280
nofollow attribute, 27, 280
noindex attribute, 27, 280
nomenclature hierarchy
.MO files, 250
themes, 144–146
not_found label, 168
not_found_in_trash label, 168
O
$object_type parameter ,165
object-cache.php plugin, 106
off-site optimization, 271
on-page optimization, 271
operating systems, 8, 40, 207, 238
operational settings, 230
Options API, 205
order option, 184294
orderby option, 184
organic search rankings, 267
P
page argument, 86
Page Attributes meta box, 32
"Page notfound" errors, 281
"Page notfound" template, 146
$page parameter ,134
page ranking (seesearch engine optimization
(SEO) )
page status, 31
page templates, 32, 146–147, 156
page titles, 275–276
page visibility ,32
page.php template, 146
page-attributes field, 83
pages
about, 28
adding, 28
archiving, 83, 98–100
attributes, 32
bulk editing, 34
deleting, 33
displaying, 154–155
editing, 28–31
formatting, 146–147
layout, 284
listing, 28, 33
<meta> tag,275–276, 280
naming, 231–232, 238
posts vs,34
previewing, 30
privacy settings, 27, 280
publishing, 31–32
quick editing, 33, 34
restoring, 33
saving, 33
<title> tag,275–276
visibility ,32
pagination, 65–66, 74, 98parent_item_colon label, 168
parent-child relationship
categories, 36, 39
pages, 32
posts, 36
taxonomies, 168
Password Protected pages, 32
passwords, 54
$path parameter ,244
Pay-Per -Click (PPC), 270
Pending Review status, 31
permalinks
about, 40
altering, 237
creating, 40
enabling, 40
idparameter ,184
inMultisite, 231–232, 238
outputting, 60
prepending, 167
pretty ,8, 17, 29, 39, 207–208
Rewrite API, 207–208
search engine optimization, 273–275
semantic, 273–275
settings, 274, 275
taxonomy and, 163–164
translating, 265
permissions, user,52–54
photo galleries, 7
photography sales sites, 7
PHP 5,5
.php files, location of,56
pinging services, 41
Ping-O-Matic, 41
plain text, vs.rich text, 30
plugin directory ,102
plugin header ,80, 108, 119–120
plugin_action_links() function, 122
$plugin_rel_path parameter ,121, 244
plugins
(seealso hooks )295
about, 52
API, 196
benefits of,102, 155–156
caching, 206
creating, 80–82, 106
CSS in,124–125
debugging, 105, 107
directory structure, 57, 102, 107
drawbacks of,102–103
drop-in, 105–106, 236
editing, 52
guidelines for,103–104
header ,108, 119–120
image resizing, 181–182
forimport/export, 52
installing, 104
licensing, 106, 108–109, 119–120
lightbox, 188
forlocalization, 264–265
localizing, 120–121, 126–127, 244, 248–250
managing, 24
media management, 46
meta boxes in,134–135
inMultisite, 106, 227, 234, 235, 236, 237
Multisite and, 219
must-use, 81, 104–105, 236
naming, 107
post types as,81
readme.txt file,137
forSEO, 276, 280
setting up,107–109
Settings page, 121–123, 125–127
sharing, 136–137
shortcodes, 135–136
spam prevention, 48
styling output, 127–128
taxonomies and, 170
themes as,27
themes vs,153, 154–157, 170
troubleshooting, 105, 155
updating, 23, 104, 120user profile, 54
user role, 53–54
version control, 120
widgets and, 128
WP_Query and, 73
Plugins API, 196
plugins directory ,57, 107
Plugins submenu, 52, 236
.POfiles
about, 244
creating with Poedit, 255–256, 261
creating with WPML, 265
templates, 246
Poedit
about, 250
creating .POT files, 251–259
creating acatalog, 251–252, 259, 260
.MO files, 258
translating .POT files, 259–263
post ID,62
POST method, 204
$_POST requests, 111, 203
Post Tagsmanagement screen, 39
Post Tagsmeta box, 38
post thumbnails
about, 188
enabling, 188–190
sizing, 190–192
inthemes, 192–193
post types
about, 79–80
archiving, 83, 98–100
arguments, 82–83
creating, 80–82, 88–89
custom fields, 85–87
custom help, 92–95
defining, 82–84
displaying, 154–155
labeling, 167–168
taxonomies for,89–92, 165, 171
templates, 95–100296
theme vsplugin, 156
post variable, 72, 74
posts
(seealso pages )
about, 34–35
adding categories, 37
adding images, 179, 182
adding tags, 38
attaching images, 183
comments (seecomments )
creating, 36–37
creating remotely ,41
customizing (seepost types )
displaying author information, 60
displaying categories, 62, 63
displaying content, 61
displaying excerpts, 61, 83
displaying tags, 62
displaying time/date, 61, 63
formatting, 145
idparameter ,183, 184
metadata for,85–87
pages vs,34
permalinking, 60, 274
previous/next, 65–66
retrieving (seequeries )
setting default format, 41
teasers, 76
thumbnails for(seepost thumbnails )
titling, 60
posts object, 58
posts_nav_link() function, 65
.POT files
about, 119, 245
creating automatically ,263–264
creating with Poedit, 251–259
translating, 259–263
PPC (Pay-Per -Click), 270
prefixes, 86
pretty permalinks, 8, 17, 29, 39, 207–208
previous_post_link() function, 65, 66, 96previous_posts_link() function, 65
priority argument, 86
$priority parameter ,135
privacy settings, 27, 280
Private pages, 32
profiles, user,54
project management, 8
public argument, 83, 166
publish action, 87
Publish meta box, 31–32
publish_post hook, 111
Published status, 31
pull-down menus, 89
Q
qTranslate plugin, 265
queries
about, 58
creating, 71–72
enabling, 90
matching afield, 75–76
matching bystatus, 76
modifying, 70–71
parameters, 71, 72
scrubbing, 112
WP_Query class, 71, 73–74
query_posts() function, 70–71, 175
query_var argument, 90, 167
query_vars object, 58
Quick Edit button, 33, 34
quicktags, 61
R
Read More link, 61
readme.txt file,137
$recurrence parameter ,209
redirects, 281
Register Plus plugin, 54
register_activation_hook() function, 208, 210
register_deactivation_hook() function, 208297
register_nav_menus() function, 148–149
register_post_type() function, 82–84, 88, 165
register_settings() function, 123, 124
register_taxonomy() function
about, 165–166
arguments array ,166–167
example of,168–173
nested labels array ,167–168
parameters, 90
register_taxonomy_for_object_type() function,
165
register_widget() function, 128, 129
registration messages, 232–234
registration settings, 230–232
remove_meta_box() function, 202
response codes, HTTP ,204
return, vsecho, 136, 198
revisions field, 83
rewind_posts() function, 70
Rewrite API, 207–208
rewrite argument, 83, 90, 167
rich text, vs.plain text, 30
Right Now widget, 27
Role Scoper plugin, 53, 237
roles, user,25, 52–54, 167, 221, 222, 224, 237
routing collisions, 231–232, 238
RSS, 41
S
SaaS (software asaservice), 47
save action, 87
scheduling events, 56, 208–210
screen options, 23
script libraries, 210–212
search algorithms, 267–269
search engine marketing (SEM), 270–271
search engine optimization (SEO)
algorithm issues, 267–269
coding issues, 269–270
dead links, 281
goal conversion, 272, 282header tags, 276–278
heatmaps, 284
image attributes, 279–280
images and, 43
keywords, 283
layout, 284
<meta> tag,275–276, 280
metrics, 282–283
on-site vsoff-page, 271
permalinks, 273–275
privacy settings, 27, 280
SEM issues, 270–271
sitemaps, 280
slugs and, 39
special offers, 284
spiders, 278–279
taxonomies, 275
terms andconditions, 281
<title> tag,275–276
traffic and, 272, 282
search_item label, 168
searching, custom, 164
self-hosting, 3
SEM (search engine marketing), 270–271
semantic permalinks, 273–275
SEO (search engine optimization) (seesearch
engine optimization (SEO) )
separator ,62
set_post_thumbnail_size() function, 190–191
set_transient() function, 206
Settings page, 121–123
Settings Page, 125–127
Settings submenu, 229–235
setup_postdata(), 72
Shortcode API, 196
shortcodes
(seealso gallery shortcode )
about, 46, 135–136
adding totemplates, 187
creating, 197
enclosing vsself-closing, 197–198298
nesting, 199–200
parameters, 197–199
show_in_nav_menus argument, 166
show_tagcloud argument, 166
show_ui argument, 166
sidebar .php template, 142, 150
sidebars, 51, 143–144, 149–150
single.php template, 95, 145
single-{post_type} template, 95
singular_name label, 168
SiteAdmin Dashboard, 222
sitefunctionality (seefunctionality )
sitesettings, 225–229
SiteTitle,25
siteURL, 217
sitemaps, 280
Sites submenu, 223–225
sizeparameter ,184
slugs
about, 40, 274
pretty permalinks and, 29
search engine optimization and, 39
social media sites, 6
software asaservice (SaaS), 47
spam blogs, 224
spam, incomments, 48, 49
special offers, 284
spiders, 278–279
split testing, 283
splogs, 224
sqlqueries, scrubbing, 112
$src parameter ,211
static content (seepages )
status, page, 31
style headers, 140
styles.css file,140–141
subcategories, 36, 39
subdirectories, inMultisite, 220, 221, 231–232, 
237, 238
subdirectory namespaces, 216
subdomain namespaces, 216subdomains, 217–219, 220, 221, 223–224, 231–
232, 237, 238
submenus, 50, 121–123
Subscriber role, 53
sunrise.php plugin, 106
super admin role, 221, 222, 224
support
chat rooms, 19
forums, 18
meetups, 18
forplugins, 137
WordPress Codex, 17
WordPress.tv ,19
supports argument, 83
system files, 56–57
T
TagCloud Widget, 166
tagclouds, 176
Tagline, 25
tags
about, 35–36
adding topost, 38
categories vs,160
comma-separated, 90
conditional, 64–65
displaying, 62
grouping (seetaxonomies )
managing, 38–39
templates, 146
taxonomies
about, 159–160
configuring, 166–167
creating, 89–92, 165–166
custom, 161–164
customizing output, 175–176
default, 160
designing, 162, 163, 164
labeling, 167–168
localization, 167
permalinking, 163–164299
registering, 168–173
SEO and, 275
templates, 95, 146, 173–175
theme vsplugin, 170
$taxonomy parameter ,165
taxonomy .php template, 96, 175
taxonomy-{taxonomy_name}.php template, 95, 
175
taxonomy-{taxonomy_name}-{taxonomy-
term}.php template, 95, 174
teasers, 76
template hierarchy
post type, 95
taxonomy ,173–175
template tags
about, 58
get_ functions, 63–64
the_ functions, 60–62
templates
adding shortcodes, 187
archive, 98–100
nomenclature hierarchy ,144–146
page, 146–147
.POfile,246
post type, 95–98
registration messages, 232–234
taxonomy ,95
terms andconditions, 281
Textwidget, 51
textdomain constant, 247, 250
TheLoop
about, 59
basic, 66–67
conditional logic, 64–65
counters, 68–69
customizing, 71–72
modifying, 70–71
pagination with, 65–66, 74
queries and, 58
taxonomies and, 175–176
template tagsand, 59using multiple, 70
the_ functions, 60–62
the_author() function, 60
the_author_meta() function, 60
the_category() function, 62
the_content() function, 61
the_date() function, 61
the_excerpt() function, 61
the_meta() function, 62
the_modified_time() function, 61
the_permalink() function, 60
the_post_thumbnail() function, 192–193
the_tags() function, 62
the_time() function, 61
the_title() function, 60
theme editor ,27
themes
about, 139–140
associating menus with, 50
configuring, 141–142
custom backgrounds, 151–152
custom headers, 150–151
custom menus, 148–149
directory structure, 57, 139, 248
editing, 27
forcustom post types, 95–98
ashamburgers, 142–143
installing, 26–27
limitations of,156
localizing, 243–244, 246–248
inMultisite, 227–228, 235–236
naming, 141
page templates, 147
asplugins, 27
plugins vs,153, 154–157, 170
post thumbnails in,192–193
styling, 140–141
taxonomies and, 170
widgetized areas, 149–150
themes directory ,57, 139, 248
Themes submenu, 235–236300
third-party applications, 155
thumbnail field, 83
thumbnails, 47, 180, 182
(seealso post thumbnails )
time format, 25
time zone, 25
time, displaying, 61, 63
$timestamp parameter ,209
title argument, 86
title field, 83
$title parameter ,134
<title> tag,275–276
%title token, 66
trackbacks field, 83
traffic, 272, 282–283
Transients API, 206
translation (seelocalization )
translation files, 243–244, 250, 252, 253
translation keys, 244–245
transports, 203
trash bin,33
troubleshooting, 105, 155
tutorials, 19
twentyeleven_content_nav() function, 98
U
Update button, 33
update_count_callback() function, 90, 167
update_metadata() function, 206
update_option() function, 205
update_post_meta() function, 87
Updates submenu, 236–237
updating
multiple sites, 236–237
plugins, 23, 104, 120
widgets, 132
WordPress, 27–28
wp-config.php and, 57
upload settings, 234
uploads directory ,57URLs
(seealso permalinks )
permanent (seepermalinks )
retrieving, 203–204
scrubbing, 112
semantic, 273–275
setting, 16
site, 217
user fields, 237
user profiles, 54
user registration, 25, 56
user roles, 25, 52–54, 167, 221, 222, 224, 237
user_register hook, 111
user-manageable files, 56, 57
users
adding, 224, 226
registration settings, 231
roles (seeuser roles )
viewing, 235
Users submenu, 235
V
Valdrini, Michel, 2
$ver parameter ,211
video, 30, 46–47
video tutorials, 19
view_item label, 168
Vimeo, 46
visibility ,page, 32
W
web crawlers, 278–279
web servers, 8, 40, 207, 238
welcome emails, 233
while loop, 59
widget class, 129
$widget_id parameter ,201
$widget_name parameter ,201
widgetized areas, 51, 149–150301
widgets
about, 51–52, 128–129
changing title, 132–133
Dashboard, 22, 23
defining, 130
displaying, 130–132
loading, 133
Multisite, 223
registering, 129–130
inthemes, 149–150
updating, 132
Widgets API, 196
widgets_init hook, 128, 133
$width parameter ,190, 191
wildcard subdomains, 217–219
Windows OS,8, 40, 57, 207, 238
wireframes, 161, 163, 164
WordPress
back endcode, 212–213
backing up,27, 217
benefits of,241–242
components of,4–5
configuring, 57
creating site, 13
development team, 3
directory structure, 55–58, 217
filestructure, 56
history of,2–3
hosting options, 3–4
inother languages, 265–266
installing (seeinstallation, Wordpress )
licensing, 4
migrating asite, 52
misuses of,7–8
resources (seesupport )
setting URLs, 217
updating, 27–28, 57
usage statistics, 241
uses for,5–7
Windows vsLinux, 8, 40, 57, 207, 238
WordPress API, 195–196(seealso APIs )
WordPress Codex, 17
WordPress Core, 4, 153, 216
#wordpress IRC, 19
WordPressµ, 216
WordPress MUDomain Mapping plugin, 237
WordPress network (seeMultisite )
WordPress Plugin Directory ,136–137, 263
WordPress SEO plugin, 276, 280
wordpress.com, 3
wordpress.org, 3
WordPress.tv ,19
#wordpress-dev IRC, 19
wp_add_dashboard_widget() function, 200–201
WP_ALLOW_MUL TISITE, 219
wp_cron function, 209
wp_dashboard_setup hook, 201, 202
wp_enqueue_script() function, 188, 211–212
wp_enqueue_style() function, 127, 212
WP_Error class, 204
wp_footer hook, 110
wp_footer() function, 142
wp_head hook, 109–110, 151
wp_head() function, 142
wp_nav_menu() function, 148, 149
WP_Query class
about, 71
matching afield, 75–76
matching status, 76
uses of,73–74
$wp_query variable, 74
wp_register_script() function, 210–211
wp_register_style() function, 127, 212
wp_remote_get() function, 204
wp_remote_head() function, 204
wp_remote_post() function, 204
wp_remote_request() function, 204
wp_remote_retrieve_body() function, 204
wp_remote_retrieve_header() function, 204
wp_remote_retrieve_headers() function, 204302
wp_remote_retrieve_response_code() function,
204
wp_remote_retrieve_response_message() func-
tion, 204
wp_reset_postdata() function, 74
WP_Rewrite class, 207
wp_schedule_event() function, 208–210
wp_tag_cloud() function, 176
wp-admin directory ,56
wp-config.php file
about, 57
enabling debugging, 107
enabling Multisite, 219, 221
installation, Wordpress, 13–15
language setting, 120
updates and, 57
WPLANG constant, 244, 245, 247–248, 265
wp-content directory ,57, 105, 266
wp-cron.php file,56
wp-includes directory ,57, 266
WPLANG constant, 244, 245, 247–248, 265
WPML plugin, 264–265
wp-register .php file,56
Writing Settings page, 41
X
XML sitemaps, 280
XML-RPC, 41
Y
Yank, Kevin, 5
YouTube, 46303
SITEPOINT BOOKS
     Advocate best practice  techniques
     Lead you through practical  examples
     Provide working code for y our websit e
     Make learning easy and fun
US $39.95 CAN $39.95WEB DEVEL OPMENT
ISBN PRINT : 978-0-9871530-0-5
ISBN EB OOK: 978-0-9871530-5-0WHA T’S CO VERED?
The WordPress Anthology offers an extensive array of solution s, 
putting you in the driver’s seat of this powerful and flexible 
open-source CMS. Jam-packed with proven tips and techniques 
for w eb developers, discover how to effectively use WordPress 
in your o wn projects. 
It’s the only WordP ress book y ou’ll ever need. 
Learn how to:
 Undertake a thorough exploration of the WordPress GUI
Conquer  WordPress  mechanics, with  structuring, custom  
 post types, and taxonomies
 Extend your projects with plugins, themes, and APIs
 Manag e a network of sites using Multisite cap abilities
 Launch yo ur application globa lly usin g internationalization and   
 localization
 Maximize your exposure through SEO best practices  
 And much more …MAKE  THE  WOR LD’S MOS T 
VERSA TILE CMS  WOR K FOR  YOU
GET UNDER THE HOOD
CUSTOMIZE AND EXTEND 
UNDERST AND THE NUTS AND BOLTS
Delve into the inner mechani cs of WordP ress with 
custom post types,  structurin g, and taxon omies.
Add extra horsepower and soup up your projects 
with plugins, themes, and APIs.Learn the b asics of installin g and  using this 
versatile and  popu lar CMS.Mick Olinik is a partner at Superfast Websites and NinjaDesk Elite 
Technical Support & Training. As a WordP ress expert who specializes 
in graphic  design, WordPress  theme skinning,  and organic  search 
engine  optim ization, he’s the go-to web developmen t guru for several 
of the top internet marketing specialists in the world. Mick is a regular 
contributor to site point.com .mickolinik.com 
Mick OLINIK 
twitter.com/#!/raena 
Raena JACKSON ARMIT AGE
Raena Jackson Armitage is a web develope r, traine r, and conte nt 
management geek. In 2010, Raena co-aut hored SitePoint’s Build Your 
Own Wicked WordPress Themes , and has cont ributed  to the SitePoint 
blogs and newsle tters. When she’s not pushing bytes around the 
gaming, or t racking dow n the perfect all-day  breakfast. 
Visit us on the Web at sitepoint.com or for sales and support, email books@sitepoint.com
