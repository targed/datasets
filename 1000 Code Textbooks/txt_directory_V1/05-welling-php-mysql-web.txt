“I’ve never purchased a better 
programming book… This book proved tobe the most informative, easiest to follow,and had the best examples of any othercomputer-related book I have ever purchased.The text is very easy to follow!”
—Nick Landman
“…the Sams book by Welling &
Thomson is the only one which I havefound to be indispensable.The writing isclear and straightforward but never wastesmy time.The book is extremely well laid
out.The chapters are the right length andchapter titles quickly take you where youwant to  go.”
—Wright Sullivan, President,A&E
Engineering, Inc., Greer South Carolina
“I just wanted to tell you that I think the
book PHP and MySQL Web Development
rocks! It’s logically structured, just the right
difficulty level for me (intermediate),interesting and easy to read, and, of course,full of valuable information!”
—CodE-E,Austria
“There are several good introductory
books on PHP , but Welling & Thomson is anexcellent handbook for those who wish tobuild up complex and reliable systems. It’s
obvious that the authors have a strong back-ground in the development of professional
applications and they teach not only the language itself, but also how to use itwith good software engineering practices.”
—Javier Garcia, senior telecom engineer,
Telefonica R&D Labs, Madrid“I picked up this book two days ago
and I am half way finished. I just can’t putit down.The layout and flow is perfect.Everything is presented in such a way sothat the information is very palatable. I amable to immediately grasp all the concepts.The examples have also been wonderful.I just had to take some time out to expressto you how pleased I have been with this book.”
—Jason B. Lancaster
“This book has proven a trusty 
companion, with an excellent crash coursein PHP and superb coverage of MySQL asused for Web applications. It also featuresseveral complete applications that are greatexamples of how to construct modular,scalable applications with PHP .Whetheryou are a PHP newbie or a veteran in
search of a better desk-side reference, thisone is sure to please!”
—WebDynamic
“The true PHP/MySQL bible, PHP
and MySQL Web Development by Luke
Welling and Laura Thomson, made me
realize that programming and databases are
now available to the commoners.Again, Iknow 1/10000th of what there is to know,and already I’m enthralled.”
—Tim Luoma,TnTLuoma.com
“Welling and Thomson’s book is a good
reference for those who want to get to
grips with practical projects straight off the
bat. It includes webmail, shopping cart,session control, and web-forum/weblogapplications as a matter of course, andbegins with a sturdy look at PHP first,moving to MySQL once the basics are covered.”
—twilight30 on Slashdot00 6728 fm  9/2/04  1:15 PM  Page i
“This book is absolutely excellent, to
say the least…. Luke Welling and LauraThomson give the best in-depth explana-tions I’ve come across on such things asregular expressions, classes and objects,
sessions etc. I really feel this book filled in alot of gaps for me with things I didn’t quite understand….This book jumps right intothe functions and features most commonlyused with PHP , and from there it continuesin describing real-world projects, MySQLintegration, and security issues from a proj-ect manager’s point of view. I found everybit of this book to be well organized andeasy to understand.”
—notepad on codewalkers.com
“A top-notch reference for 
programmers using PHP and MySQL.Highly recommended.”
—The Internet Writing Journal
“This book rocks! I am an experienced 
programmer, so I didn’t need a lot of helpwith PHP syntax; after all, it’s very close toC/C++. I don’t know a thing about databases, though, so when I wanted todevelop a book review engine (amongother projects) I wanted a solid reference to using MySQL with PHP . I haveO’Reilly’s mSQL and MySQL book, and
it’s probably a better pure-SQL reference,but this book has earned a place on my 
reference shelf…Highly recommended.”
—Paul Robichaux
“One of the best programming guides
I’ve ever read.”
—jackofsometrades from Lahti, Finland“This is a well-written book for learn-
ing how to build Internet applications withtwo of the most popular open-source Webdevelopment technologies….The projectsare the real jewel of the book. Not only arethe projects described and constructed in alogical, component-based manner, but theselection of projects represents an excellentcross-section of common components thatare built into many web sites.”
—Craig Cecil
“The book takes an easy, step-by-step
approach to introduce even the cluelessprogrammer to the language of PHP . Ontop of that, I often find myself referringback to it in my Web design efforts. I’m stilllearning new things about PHP , but thisbook gave me a solid foundation fromwhich to start and continues to help me tothis day.”
—Stephen Ward
“This book is one of few that really
touched me and made me ‘love’ it. I can’tput it in my bookshelf; I must put it in atouchable place on my working bench as Ialways like to refer from it. Its structure isgood, wordings are simple and straight for-ward,and examples are clear and step by
step. Before I read it, I knew nothing ofPHP and MySQL.After reading it, I havethe confidence and skill to develop anycomplicated Web application.”
—Power Wong
“This book is God…. I highly recom-
mend this book to anyone who wants tojump in the deep end with database drivenWeb application programming. I wish more
computer books were organized this way.”
—Sean C Schertell00 6728 fm  9/2/04  1:15 PM  Page ii
PHP and MySQL
Web Development
Sams Publishing, 800 East 96th Street, Indianapolis, Indiana 46240DEVELOPER’S 
LIBRARYLuke Welling
Laura ThomsonThird Edition00 6728 fm  9/2/04  1:15 PM  Page iii
PHP and MySQL Web Development
Third Edition
Copyright 2005 by Sams Publishing
All rights reserved. No part of this book shall be reproduced, stored in a
retrieval system, or transmitted by any means, electronic, mechanical, photo-
copying, recording, or otherwise, without written permission from the pub-lisher. No patent liability is assumed with respect to the use of the informa-tion contained herein.Although every precaution has been taken in thepreparation of this book, the publisher and authors assume no responsibilityfor errors or omissions. Neither is any liability assumed for damages resultingfrom the use of the information contained herein.
International Standard Book Number: 0-672-32672-8Library of Congress Catalog Card Number: 2003099244 Printed in the United States of AmericaFirst Printing: October 200407060504 4321
Trademarks
All terms mentioned in this book that are known to be trademarks or service
marks have been appropriately capitalized. Sams Publishing cannot attest tothe accuracy of this information. Use of a term in this book should not beregarded as affecting the validity of any trademark or service mark.
Warning and Disclaimer
Every effort has been made to make this book as complete and as accurate as
possible, but no warranty or fitness is implied.The information provided ison an “as is” basis.The authors and the publisher shall have neither liabilitynor responsibility to any person or entity with respect to any loss or damagesarising from the information contained in this book or from the use of theCD-ROM or programs accompanying it.
Bulk Sales
Sams Publishing offers excellent discounts on this book when ordered inquantity for bulk purchases or special sales. For more information, pleasecontact
U.S.Corporate and Government Sales
1-800-382-3419corpsales@pearsontechgroup.com
For sales outside the U.S., please contact
International Sales
1-317-428-3341international@pearsoned.comAcquisitions Editor
Shelley Johnston
Development Editor
Scott Meyers
Managing Editor
Charlotte Clapp
Copy Editor
Chuck Hutchinson
Indexer
Mandie Frank
Proofreader
Paula Lowell
Technical Editors
Sara GolemonChris Newman
Media Specialist
Dan Scherf
Design
Gary Adair
Page Layout
Cheryl LynchMichelle Mitchell00 6728 fm  9/2/04  1:15 PM  Page iv
❖
To our Mums and Dads
❖00 6728 fm  9/2/04  1:15 PM  Page v
Contents at a Glance
Introduction 1
IUsing PHP
1PHP Crash Course 11
2Storing and Retrieving Data 57
3Using Arrays 79
4String Manipulation and Regular Expressions 105
5Reusing Code and Writing Functions 129
6Object-Oriented PHP 157
7Exception Handling 191
II Using MySQL
8Designing Y our Web Database 205
9Creating Y our Web Database 217
10Working with Y our MySQL Database 241
11Accessing Y our MySQL Database from the Web 
with PHP 265
12Advanced MySQL Administration 285
13Advanced MySQL Programming 307
III E-commerce and Security
14Running an E-commerce Site 323
15E-commerce Security Issues 337
16Implementing Authentication with PHP and
MySQL 357
17Implementing Secure Transactions with PHP and
MySQL 37900 6728 fm  9/2/04  1:15 PM  Page vi
IV Advanced PHP Techniques
18Interacting with the File System and the Server
401
19Using Network and Protocol Functions 419
20Managing the Date and Time 439
21Generating Images 451
22Using Session Control in PHP 479
23Other Useful Features 495
VBuilding Practical PHP and MySQL Projects
24Using PHP and MySQL for Large Projects 507
25Debugging 523
26Building User Authentication and Personalization
541
27Building a Shopping Cart 579
28Building a Content Management System 625
29Building a Web-Based Email Service 657
30Building a Mailing List Manager 695
31Building Web Forums 751
32Generating Personalized Documents in Portable
Document Format (PDF) 783
33Connecting to Web Services with XML and SOAP
819
VI Appendixes
AInstalling PHP and MySQL 867
BWeb Resources 889
Index 89300 6728 fm  9/2/04  1:15 PM  Page vii
Table of Contents
Introduction 1
IUsing PHP
1PHP Crash Course 11
Using PHP 12
Creating a Sample Application: Bob’s Auto Parts 12
Creating the Order Form 12Processing the Form 14
Embedding PHP in HTML 15
Use of PHP Tags 16PHP Tag Styles 16PHP Statements 17Whitespace 18Comments 18
Adding Dynamic Content 19
Calling Functions 20Using the 
date() Function 20
Accessing Form Variables 21
Form Va riables 21
String Concatenation 24Variables and Literals 25
Understanding Identifiers 26Creating User-Declared Variables 26Assigning Values to Variables 26Examining Variable T ypes 27
PHP’s Data T ypes 27Type Strength 27
Type Casting 28
Variable Variables 28
Declaring and Using Constants 29Understanding Variable Scope 2900 6728 fm  9/2/04  1:15 PM  Page viii
Using Operators 30
Arithmetic Operators 31String Operators 32Assignment Operators 32Comparison Operators 34Logical Operators 36Bitwise Operators 36Other Operators 37
Using Operators:Working Out the Form T otals 39Understanding Precedence and Associativity:
Evaluating Expressions 40
Using Variable Functions 42
Testing and Setting Variable T ypes 42
Testing Variable Status 43
Reinterpreting Variables 44
Implementing Control Structures 44Making Decisions with Conditionals 44
ifStatements 44
Code Blocks 45else Statements 45
elseif Statements 46
switch Statements 47
Comparing the Different Conditionals 49
Repeating Actions Through Iteration 49
while Loops 51
forand foreach Loops 52
do..while Loops 53
Breaking Out of a Control Structure or Script 54Employing Alternative Control Structure Syntax 54Using 
declare 55
Next: Saving the Customer’s Order 55
2Storing and Retrieving Data 57
Saving Data for Later 57
Storing and Retrieving Bob’s Orders 58Processing Files 5900 6728 fm  9/2/04  1:15 PM  Page ix
x Contents
Opening a File 59
Choosing File Modes 59Using 
fopen() to Open a File 60
Opening Files Through FTP or HTTP 62Addressing Problems Opening Files 63
Writing to a File 65
Parameters for 
fwrite() 66
File Formats 66
Closing a File 67Reading from a File 69
Opening a File for Reading:
fopen() 70
Knowing When to Stop: feof() 71
Reading a Line at a Time: fgets() ,fgetss() ,
and fgetcsv() 71
Reading the Whole File: readfile() ,
fpassthru() ,and file() 72
Reading a Character: fgetc() 73
Reading an Arbitrary Length: fread() 73
Using Other Useful File Functions 74
Checking Whether a File Is There:
file_exists() 74
Determining How Big a File Is: filesize()
74Deleting a File:
unlink() 74
Navigating Inside a File: rewind() ,fseek() ,
and ftell() 74
Locking Files 76Doing It a Better Way: Database Management 
Systems 77
Problems with Using Flat Files 77How RDBMSs Solve These Problems 78
Further Reading 78Next 78
3Using Arrays 79
What Is an Array? 79
Numerically Indexed Arrays 80
Initializing Numerically Indexed Arrays 80Accessing Array Contents 81Using Loops to Access the Array 8200 6728 fm  9/2/04  1:15 PM  Page x
xi Contents
Arrays with Different Indices 83
Initializing an Array 83Accessing the Array Elements 83Using Loops 83
Array Operators 85Multidimensional Arrays 86Sorting Arrays 90
Using 
sort() 90
Using asort() and ksort() to Sort Arrays
91
Sorting in Reverse 91
Sorting Multidimensional Arrays 91
User-Defined Sorts 91Reverse User Sorts 93
Reordering Arrays 94
Using 
shuffle() 94
Using array_reverse() 96
Loading Arrays from Files 96Performing Other Array Manipulations 100
Navigating Within an Array:
each() ,
current() ,reset() ,end() ,next() ,pos() ,
and prev() 100
Applying Any Function to Each Element in an
Array:array_walk() 101
Counting Elements in an Array: count() ,
sizeof() ,and array_count_values() 102
Converting Arrays to Scalar Variables: extract()
103
Further Reading 104Next 104
4String Manipulation and Regular
Expressions 105
Creating a Sample Application: Smart Form Mail 105
Formatting Strings 107
Trimming Strings: chop() ,ltrim() ,and
trim() 108
Formatting Strings for Presentation 108
Formatting Strings for Storage: addslashes()
and stripslashes() 11200 6728 fm  9/2/04  1:15 PM  Page xi
xii Contents
Joining and Splitting Strings with String Functions
113
Using explode() ,implode() ,and join()
114
Using strtok() 114
Using substr() 115
Comparing Strings 116
Performing String Ordering: strcmp() ,
strcasecmp() ,and strnatcmp() 116
Testing String Length with strlen() 117
Matching and Replacing Substrings with String
Functions 117
Finding Strings in Strings: strstr() ,strchr() ,
strrchr() ,and stristr() 118
Finding the Position of a Substring: strpos()
and strrpos() 118
Replacing Substrings: str_replace() and
substr_replace() 119
Introducing Regular Expressions 121
The Basics 121Character Sets and Classes 121Repetition 123Subexpressions 123Counted Subexpressions 123Anchoring to the Beginning or End 
of a String 123
Branching 124Matching Literal Special Characters 124Reviewing the Special Characters 124Putting It All T ogether for the Smart Form 125
Finding Substrings with Regular Expressions 126Replacing Substrings with Regular Expressions 127Splitting Strings with Regular Expressions 127Comparing String Functions and Regular Expression
Functions 127
Further Reading 128Next 12800 6728 fm  9/2/04  1:15 PM  Page xii
xiii Contents
5Reusing Code and Writing Functions 129
Reusing Code 129
Cost 130Reliability 130Consistency 130
Using 
require() and include() 130
require() 131
Filename Extensions and require() 132
PHP Tags and require() 132
Using require() for Website T emplates 133
Using include() 138
Using require_once() and include_once()
138Using 
auto_prepend_file and
auto_append_file 138
Using Functions in PHP 139
Calling Functions 139Calling an Undefined Function 141Understanding Case and Function Names 142
Understanding Why Y ou Should Define Y our Own
Functions 142
Examining Basic Function Structure 142
Naming Y our Function 143
Using Parameters 144Understanding Scope 146Passing by Reference Versus Passing by Value 149
Returning from Functions 150Returning Values from Functions 151
Code Blocks 152
Implementing Recursion 153Further Reading 155Next 155
6Object-Oriented PHP 157
Understanding Object-Oriented Concepts 158
Classes and Objects 158Polymorphism 159
Inheritance 16000 6728 fm  9/2/04  1:15 PM  Page xiii
xiv Contents
Creating Classes,Attributes, and Operations 
in PHP 160
Structure of a Class 160Constructors 161Destructors 161
Instantiating Classes 162Using Class Attributes 162Controlling Access with 
private and public 164
Calling Class Operations 165Implementing Inheritance in PHP 166
Controlling Visibility Through Inheritance with
private and protected 167
Overriding 168Preventing Inheritance and Overriding with 
final 170
Understanding Multiple Inheritance 171Implementing Interfaces 171
Designing Classes 172Writing the Code for Y our Class 173Understanding Advanced and New Object-Oriented
Functionality in PHP 181
Note: PHP4 Versus PHP5 182Using Per-Class Constants 182Implementing Static Methods 182Checking Class T ype and T ype Hinting 183Cloning Objects 184Using Abstract Classes 184Overloading Methods with 
__call() 184
Using __autoload() 185
Implementing Iterators and Iteration 186Converting Y our Classes to Strings 188Using the Reflection API 188
Next 190
7Exception Handling 191
Exception Handling Concepts 191
The Exception Class 19300 6728 fm  9/2/04  1:15 PM  Page xiv
xv Contents
User-Defined Exceptions 194
Exceptions in Bob’s Auto Parts 197Exceptions and PHP’s Other Error Handling
Mechanisms 200
Further Reading 201Next 201
II Using MySQL
8Designing Your Web Database 205
Relational Database Concepts 206
Tables 206
Columns 207Rows 207Values 207
Keys 207
Schemas 208Relationships 209
How to Design Y our Web Database 209
Think About the Real-World Objects Y ou Are
Modeling 209
Avoid Storing Redundant Data 210
Use Atomic Column Values 212Choose Sensible Keys 213Think About the Questions Y ou Want to Ask the
Database 213
Avoid Designs with Many Empty 
Attributes 213
Summary of Table T ypes 214
Web Database Architecture 214
Architecture 214
Further Reading 216Next 216
9Creating Your Web Database 217
Using the MySQL Monitor 218
Logging In to MySQL 21900 6728 fm  9/2/04  1:15 PM  Page xv
xvi Contents
Creating Databases and Users 220
Creating the Database 220
Setting Up Users and Privileges 221Introducing MySQL’s Privilege System 221
Principle of Least Privilege 221User Setup:The 
GRANT Command 221
Types and Levels of Privileges 223
The REVOKE Command 225
Examples Using GRANT and REVOKE 225
Setting Up a User for the Web 226
Logging Out as root 227
Using the Right Database 227Creating Database Tables 227
Understanding What the Other Keywords Mean
229
Understanding the Column T ypes 230Looking at the Database with 
SHOW and
DESCRIBE 231
Creating Indexes 232A Note on Table T ypes 233
Understanding MySQL Identifiers 233Choosing Column Data T ypes 234
Numeric T ypes 235
Further Reading 239Next 239
10 Working with Your MySQL Database 241
What Is SQL? 241Inserting Data into the Database 242Retrieving Data from the Database 244
Retrieving Data with Specific Criteria 246Retrieving Data from Multiple Tables 247Retrieving Data in a Particular Order 253Grouping and Aggregating Data 254Choosing Which Rows to Return 256Using Subqueries 256
Updating Records in the Database 25900 6728 fm  9/2/04  1:15 PM  Page xvi
xvii Contents
Altering Tables After Creation 259
Deleting Records from the Database 262Dropping Tables 262Dropping a Whole Database 262Further Reading 263Next 263
11 Accessing Your MySQL Database from the
Web with PHP 265
How Web Database Architectures Work 266
Querying a Database from the Web 269Checking and Filtering Input Data 270Setting Up a Connection 271Choosing a Database to Use 272Querying the Database 272Retrieving the Query Results 273Disconnecting from the Database 274Putting New Information in the Database 275Using Prepared Statements 278Using Other PHP-Database Interfaces 280Using a Generic Database Interface: PEAR DB 280Further Reading 283Next 283
12 Advanced MySQL Administration 285
Understanding the Privilege System in Detail 285
The user Table286
The dband host Tables 288
The tables_priv and columns_priv Tables
289
Access Control: How MySQL Uses the Grant
Tables 290
Updating Privileges:When Do Changes Take
Effect? 290
Making Y our MySQL Database Secure 291
MySQL from the Operating System’s Point of
View 291
Passwords 29100 6728 fm  9/2/04  1:15 PM  Page xvii
xviii Contents
User Privileges 292
Web Issues 293
Getting More Information About Databases 293
Getting Information with SHOW 293
Getting Information About Columns with
DESCRIBE 296
Understanding How Queries Work with
EXPLAIN 296
Speeding Up Queries with Indexes 301Optimizing Y our Database 301
Design Optimization 301Permissions 301
Table Optimization 301
Using Indexes 302Using Default Values 302Other Tips 302
Backing Up Y our MySQL Database 302Restoring Y our MySQL Database 303Implementing Replication 303
Setting Up the Master 304Performing the Initial Data Transfer 304
Setting Up the Slave or Slaves 305
Further Reading 306Next 306
13 Advanced MySQL Programming 307
The LOAD DATA INFILE Statement 307
Storage Engines 308Transactions 309
Understanding Transaction Definitions 309Using Transactions with InnoDB 310
Foreign Keys 311
Stored Procedures 312
Basic Example 312Local Variables 315Cursors and Control Structures 31500 6728 fm  9/2/04  1:15 PM  Page xviii
xix Contents
Further Reading 319
Next 319
III E-commerce and Security
14 Running an E-commerce Site 323
Deciding What Y ou Want to Achieve 323Considering the T ypes of Commercial Websites 323
Publishing Information Using Online Brochures
324
Taking Orders for Goods or Services 327
Providing Services and Digital Goods 330Adding Value to Goods or Services 331Cutting Costs 331
Understanding Risks and Threats 332
Crackers 333Failure to Attract Sufficient Business 333Computer Hardware Failure 333Power,Communication, Network, or Shipping
Failures 334
Extensive Competition 334Software Errors 334Evolving Governmental Policies and Taxes 335System Capacity Limits 335
Deciding on a Strategy 335Next 335
15 E-commerce Security Issues 337
How Important Is Y our Information? 338Security Threats 338
Exposure of Confidential Data 339Loss or Destruction of Data 340Modification of Data 341Denial of Service 342Errors in Software 343Repudiation 344
Usability, Performance, Cost, and Security 34500 6728 fm  9/2/04  1:15 PM  Page xix
xx Contents
Security Policy Creation 345
Authentication Principles 346Authentication 347Encryption Basics 347Private Key Encryption 349Public Key Encryption 349Digital Signatures 350Digital Certificates 351Secure Web Servers 352Auditing and Logging 353Firewalls 353Data Backups 354
Backing Up General Files 354Backing Up and Restoring Y our MySQL
Database 354
Physical Security 355Next 355
16 Implementing Authentication with PHP and
MySQL 357
Identifying Visitors 357
Implementing Access Control 358
Storing Passwords 361Encrypting Passwords 364Protecting Multiple Pages 365
Using Basic Authentication 366Using Basic Authentication in PHP 367Using Basic Authentication with Apache’s 
.htaccess Files 369
Using Basic Authentication with IIS 373Using 
mod_auth_mysql Authentication 375
Installing mod_auth_mysql 375
Did It Work? 376Using 
mod_auth_mysql 376
Creating Y our Own Custom Authentication 377Further Reading 378Next 37800 6728 fm  9/2/04  1:15 PM  Page xx
xxi Contents
17 Implementing Secure Transactions with
PHP and MySQL 379
Providing Secure Transactions 379
The User’s Machine 380The Internet 381Your System 382
Using Secure Sockets Layer (SSL) 383Screening User Input 387Providing Secure Storage 387Determining Whether to Store Credit Card Numbers
389
Using Encryption in PHP 389Further Reading 397Next 398
IV Advanced PHP Techniques
18 Interacting with the File System and the
Server 401
Uploading Files 401
HTML for File Upload 402A Note on Security 403Writing the PHP to Deal with the File 403Common Problems 407
Using Directory Functions 408
Reading from Directories 408Getting Information About the Current
Directory 410
Creating and Deleting Directories 410
Interacting with the File System 411
Getting File Information 411Changing File Properties 414Creating, Deleting, and Moving Files 414
Using Program Execution Functions 415Interacting with the Environment:
getenv() and
putenv() 417
Further Reading 418Next 41800 6728 fm  9/2/04  1:15 PM  Page xxi
xxii Contents
19 Using Network and Protocol Functions 419
Examining Available Protocols 419
Sending and Reading Email 420Using Other Websites 420Using Network Lookup Functions 424Using FTP 428
Using FTP to Back Up or Mirror a File 428Uploading Files 435Avoiding Timeouts 435
Using Other FTP Functions 436
Further Reading 437Next 437
20 Managing the Date and Time 439
Getting the Date and Time from PHP 439
Using the date() Function 439
Dealing with Unix Timestamps 441Using the 
getdate() Function 442
Validating Dates 443
Converting Between PHP and MySQL Date Formats
444
Calculating Dates in PHP 445Calculating Dates in MySQL 446Using Microseconds 448Using the Calendar Functions 448Further Reading 449Next 449
21 Generating Images 451
Setting Up Image Support in PHP 452Understanding Image Formats 452
JPEG 452PNG 453WBMP 453GIF 45300 6728 fm  9/2/04  1:15 PM  Page xxii
xxiii Contents
Creating Images 454
Creating a Canvas Image 455Drawing or Printing T ext on the Image 456Outputting the Final Graphic 458Cleaning Up 459
Using Automatically Generated Images in Other 
Pages 459
Using T ext and Fonts to Create Images 460
Setting Up the Base Canvas 463Fitting the T ext onto the Button 464Positioning the T ext 467
Writing the T ext onto the Button 467Finishing Up 468
Drawing Figures and Graphing Data 468Using Other Image Functions 476Further Reading 477Next 477
22 Using Session Control in PHP 479
What Session Control Is 479Understanding Basic Session Functionality 479
What Is a Cookie? 480Setting Cookies from PHP 480Using Cookies with Sessions 481Storing the Session ID 481
Implementing Simple Sessions 482
Starting a Session 482Registering Session Variables 482Using Session Variables 483Unsetting Variables and Destroying the Session
483
Creating a Simple Session Example 484Configuring Session Control 486Implementing Authentication with Session 
Control 487
Further Reading 493Next 49400 6728 fm  9/2/04  1:15 PM  Page xxiii
xxiv Contents
23 Other Useful Features 495
Using Magic Quotes 495
Evaluating Strings: eval() 496
Terminating Execution: dieand exit 497
Serializing Variables and Objects 497Getting Information About the PHP 
Environment 499
Finding Out What Extensions Are Loaded 499Identifying the Script Owner 500Finding Out When the Script Was Modified
500
Loading Extensions Dynamically 500Temporarily Altering the Runtime Environment 500
Highlighting Source Code 501Using PHP on the Command Line 502Next 503
VBuilding Practical PHP and MySQL
Projects
24 Using PHP and MySQL for 
Large Projects 507
Applying Software Engineering to Web Develop-
ment 508
Planning and Running a Web Application Project 508Reusing Code 509Writing Maintainable Code 510
Coding Standards 510Breaking Up Code 513Using a Standard Directory Structure 514Documenting and Sharing In-House 
Functions 514
Implementing Version Control 514Choosing a Development Environment 516Documenting Y our Projects 516Prototyping 51700 6728 fm  9/2/04  1:15 PM  Page xxiv
xxv Contents
Separating Logic and Content 518
Optimizing Code 518
Using Simple Optimizations 519Using Zend Products 519
Testing 520
Further Reading 521Next 521
25 Debugging 523
Programming Errors 523
Syntax Errors 524Runtime Errors 525Logic Errors 530
Variable Debugging Aid 531
Error Reporting Levels 533Altering the Error Reporting Settings 534Triggering Y our Own Errors 536
Handling Errors Gracefully 536Next 539
26 Building User Authentication and
Personalization 541
The Problem 541
Solution Components 542
User Identification and Personalization 542Storing Bookmarks 543Recommending Bookmarks 543
Solution Overview 543Implementing the Database 545Implementing the Basic Site 546Implementing User Authentication 549
Registering 549Logging In 556Logging Out 560Changing Passwords 561Resetting Forgotten Passwords 56300 6728 fm  9/2/04  1:15 PM  Page xxv
xxvi Contents
Implementing Bookmark Storage and Retrieval 568
Adding Bookmarks 568Displaying Bookmarks 570Deleting Bookmarks 571
Implementing Recommendations 574Wrapping Up and Considering Possible Exten-
sions 578
Next 578
27 Building a Shopping Cart 579
The Problem 579Solution Components 580
Building an Online Catalog 580Tracking Users’ Purchases While They 
Shop 580
Implementing a Payment System 580Building an Administration Interface 581
Solution Overview 581Implementing the Database 585Implementing the Online Catalog 587
Listing Categories 589Listing Books in a Category 592Showing Book Details 594
Implementing the Shopping Cart 595
Using the 
show_cart.php Script 596
Viewing the Cart 599Adding Items to the Cart 602Saving the Updated Cart 604Printing a Header Bar Summary 604Checking Out 605
Implementing Payment 611Implementing an Administration Interface 613Extending the Project 622Using an Existing System 622Next 62300 6728 fm  9/2/04  1:15 PM  Page xxvi
xxvii Contents
28 Building a Content Management 
System 625
The Problem 625
Solution Requirements 626Existing Systems 626Editing Content 626
Getting Content into the System 626Databases Versus File Storage 627Document Structure 627
Using Metadata 628Formatting the Output 629
Solution Design/Overview 630Designing the Database 631Implementing the CMS 633
Front End 633Back End 640Searches 650Editor Screen 653
Extending the Project 655Next 655
29 Building a Web-Based Email Service 657
The Problem 657Solution Components 658Solution Overview 659Setting Up the Database 661Examining the Script Architecture 663Logging In and Out 669Setting Up Accounts 672
Creating a New Account 674Modifying an Existing Account 676Deleting an Account 676
Reading Mail 677
Selecting an Account 677Viewing Mailbox Contents 680Reading a Mail Message 68300 6728 fm  9/2/04  1:15 PM  Page xxvii
xxviii Contents
Viewing Message Headers 686
Deleting Mail 687
Sending Mail 688
Sending a New Message 688Replying T o or Forwarding Mail 691
Extending the Project 692Next 693
30 Building a Mailing List Manager 695
The Problem 695Solution Components 696
Setting Up a Database of Lists and 
Subscribers 696
Using File Upload 696Sending Mail with Attachments 697
Solution Overview 697Setting Up the Database 700Defining the Script Architecture 702Implementing Login 711
Creating a New Account 711Logging In 714
Implementing User Functions 717
Viewing Lists 717Viewing List Information 723Viewing List Archives 725Subscribing and Unsubscribing 726Changing Account Settings 728Changing Passwords 728Logging Out 730
Implementing Administrative Functions 731
Creating a New List 731Uploading a New Newsletter 734Handling Multiple File Upload 736Previewing the Newsletter 741Sending the Message 743
Extending the Project 749Next 75000 6728 fm  9/2/04  1:15 PM  Page xxviii
xxix Contents
31 Building Web Forums 751
The Problem 751
Solution Components 752Solution Overview 753Designing the Database 754Viewing the Tree of Articles 757
Expanding and Collapsing 759Displaying the Articles 762Using the 
treenode Class 763
Viewing Individual Articles 770Adding New Articles 773Adding Extensions 780Using an Existing System 780Next 781
32 Generating Personalized Documents in
Portable Document Format (PDF) 783
The Problem 783
Evaluating Document Formats 784
Solution Components 788
Question and Answer System 788Document Generation Software 788
Solution Overview 791
Asking the Questions 792Grading the Answers 794Generating an RTF Certificate 796Generating a PDF Certificate from a T emplate
800
Generating a PDF Document Using PDFlib
803
A Hello World Script for PDFlib 803Generating a Certificate with PDFlib 808
Handling Problems with Headers 816Extending the Project 817Further Reading 817Next 81700 6728 fm  9/2/04  1:15 PM  Page xxix
xxx Contents
33 Connecting to Web Services with XML and
SOAP 819
The Problem 819
Understanding XML 820Understanding Web Services 824
Solution Components 826
Building a Shopping Cart 826Using Amazon’s Web Services Interfaces 826Parsing XML 827
Using SOAP with PHP 827Caching 828
Solution Overview 828
Core Application 833Showing Books in a Category 839Getting an 
AmazonResultSet Class 841
Using REST/XML Over HTTP 849Using SOAP 854Caching the Data 856Building the Shopping Cart 858Checking Out to Amazon 862
Installing the Project Code 863Extending the Project 863Further Reading 864
VI Appendixes
AInstalling PHP and MySQL 867
Running PHP as a CGI Interpreter or Module 868
Installing Apache, PHP , and MySQL Under Unix 868
Binary Installation 868Source Installation 868
httpd.conf File: Snippets 875
Is PHP Support Working? 876Is SSL Working? 87700 6728 fm  9/2/04  1:15 PM  Page xxx
xxxi Contents
Installing Apache, PHP , and MySQL Under Windows
878
Installing MySQL Under Windows 879Installing Apache Under Windows 882Installing PHP for Windows 884
Installing PEAR 887Setting Up Other Configurations 888
BWeb Resources 889
PHP Resources 889
MySQL and SQL Specific Resources 891Apache Resources 891Web Development 892
Index 89300 6728 fm  9/2/04  1:15 PM  Page xxxi
About the Authors
Laura Thomson is a lecturer in the School of Computer Science and Information
Technology at RMIT University in Melbourne,Australia. She is also a partner in the
award-winning web development firm Tangled Web Design. Laura has previously worked
for T elstra and the Boston Consulting Group. She holds a Bachelor of Applied Science(Computer Science) degree and a Bachelor of Engineering (Computer SystemsEngineering) degree with honors, and is currently completing her Ph.D. in AdaptiveWeb Sites. In her spare time, she enjoys sleeping. Laura can be reached via email at
laura@tangledweb.com.au.
Luke Welling is a senior web developer at MySQL AB, the company behind the
MySQL database. He has previously taught engineering and computer science at RMITUniversity in Melbourne,Australia and worked as a computer programmer for manyyears. He holds a Bachelor of Applied Science (Computer Science) degree. In his 
spare time, he attempts to perfect his insomnia. Luke can be reached via email atluke@tangledweb.com.au.
Both authors have attained the MySQL Core Certification offered by MySQL AB and
the Zend Certified PHP Engineer offered by Zend T echnologies Ltd.
About the Contributors
Israel Denis Jr. is a freelance consultant working on e-commerce projects throughout
the world. He specializes in integrating ERP packages such as SAP and Lawson withcustom web solutions.When he is not busy designing software or writing books, Israelenjoys traveling to Italy, a place he considers home. Israel obtained a master’s degree inElectrical Engineering from Georgia T ech in Atlanta, Georgia, in 1998. He is the authorof numerous articles about Linux,Apache, PHP , and MySQL. He has worked for compa-nies such as GE and Procter & Gamble with mainly Unix-based computer systems. Israelcan be reached via email at idenis@ureach.com.
Chris Newman is a consultant programmer specializing in the development of dynam-
ic Internet applications. He has extensive commercial experience using PHP andMySQL to produce a wide range of applications for an international client base.A grad-uate of Keele University, Chris lives in Stoke-on-Trent, England, where he runsLightwood Consultancy Ltd., the company he founded in 1999 to further his interest inInternet development. Chris became fascinated with the potential of the Internet whileat the university and is thrilled to be working with cutting-edge technology. More infor-mation on Lightwood Consultancy Ltd. can be found at http://www.lightwood.net, andChris can be contacted at chris@lightwood.net.00 6728 fm  9/2/04  1:15 PM  Page xxxii
Acknowledgments
We would like to thank the team at Sams for all their hard work. In particular, we would
like to thank Shelley Johnston without whose dedication and patience this book wouldnot have been possible.We would also like to thank Israel Denis Jr. and Chris Newmanfor their valuable contributions.
We appreciate immensely the work done by the PHP and MySQL development
teams.Their work has made our lives easier for a number of years now and continues todo so on a daily basis.
We thank Adrian Close at eSec for saying “Y ou can build that in PHP” back in 1998.
He said we would like PHP , and it seems he was right.
Finally, we would like to thank our family and friends for putting up with us while
we have been repeatedly antisocial while working on books. Specifically, thank you for
your support to our family members: Julie, Robert, Martin, Lesley,Adam, Paul,Archer,
and Barton.00 6728 fm  9/2/04  1:15 PM  Page xxxiii
We Want to Hear from You!
As the reader of this book, youare our most important critic and commentator.We value
your opinion and want to know what we’re doing right, what we could do better, what
areas you’d like to see us publish in, and any other words of wisdom you’re willing topass our way.
You can email or write me directly to let me know what you did or didn’t like about
this book—as well as what we can do to make our books stronger.
Please note that I cannot help you with technical problems related to the topic of this book, and
that due to the high volume of mail I receive, I might not be able to reply to every message.
When you write, please be sure to include this book’s title and authors as well as your
name and phone or email address. I will carefully review your comments and share themwith the authors and editors who worked on the book.
Email: opensource@samspublishing.com
Mail: Mark Taber
Associate PublisherSams Publishing800 East 96th StreetIndianapolis, IN 46240 USA
Reader Services
For more information about this book or others from Sams Publishing, visit our Web site
at www.samspublishing.com.T ype the ISBN (excluding hyphens) or the title of the bookin the Search box to find the book you’re looking for.00 6728 fm  9/2/04  1:15 PM  Page xxxiv
Introduction
W ELCOME TO PHP ANDMYSQL W EBDEVELOPMENT .Within its pages, you will find
distilled knowledge from our experiences using PHP and MySQL, two of the hottestweb development tools around.
In this introduction, we cover
nWhy you should read this book
nWhat you will be able to achieve using this book
nWhat PHP and MySQL are and why they’re great
nWhat the new features of PHP 5.0 and MySQL 5.0 are
nHow this book is organized
Let’s get started.
Why You Should Read This Book
This book will teach you how to create interactive websites from the simplest order
form through to complex, secure e-commerce sites.What’s more, you’ll learn how to doit using open source technologies.
This book is aimed at readers who already know at least the basics of HTML and
have done some programming in a modern programming language before but have notnecessarily programmed for the Internet or used a relational database. If you are a begin-ning programmer, you should still find this book useful, but digesting it might take a lit-tle longer.We’ve tried not to leave out any basic concepts, but we do cover them atspeed.The typical readers of this book want to master PHP and MySQL for the purposeof building a large or commercial website.Y ou might already be working in another webdevelopment language; if so, this book should get you up to speed quickly.
We wrote the first edition of this book because we were tired of finding PHP books
that were basically function references.These books are useful, but they don’t help whenyour boss or client has said,“Go build me a shopping cart.” In this book, we have done
our best to make every example useful.Y ou can use many of the code samples directly inyour website, and you can use many others with only minor modifications.01 6728 IN  9/2/04  1:24 PM  Page 1
2 Introduction
What You Will Be Able to Achieve Using 
This Book
Reading this book will enable you to build real-world, dynamic websites. If you’ve built
websites using plain HTML, you realize the limitations of this approach. Static content
from a pure HTML website is just that—static. It stays the same unless you physicallyupdate it.Y our users can’t interact with the site in any meaningful fashion.
Using a language such as PHP and a database such as MySQL allows you to make
your sites dynamic: to have them be customizable and contain real-time information.
We have deliberately focused this book on real-world applications, even in the intro-
ductory chapters.We begin by looking at a simple online ordering system and work ourway through the various parts of PHP and MySQL.
We then discuss aspects of electronic commerce and security as they relate to building
a real-world website and show you how to implement these aspects in PHP and MySQL.
In the final part of this book, we describe how to approach real-world projects and
take you through the design, planning, and building of the following projects:
nUser authentication and personalization
nShopping carts
nContent-management systems
nWeb-based email
nMailing list managers
nWeb forums
nPDF document generation
nWeb services with XML and SOAP
You should be able to use any of these projects as is, or you can modify them to suit
your needs.We chose them because we believe they represent some the most common
web-based applications built by programmers. If your needs are different, this book
should help you along the way to achieving your goals.
What Is PHP?
PHP is a server-side scripting language designed specifically for the Web.Within anHTML page, you can embed PHP code that will be executed each time the page is vis-ited.Y our PHP code is interpreted at the web server and generates HTML or other out-put that the visitor will see.
PHP was conceived in 1994 and was originally the work of one man, Rasmus
Lerdorf. It was adopted by other talented people and has gone through four majorrewrites to bring us the broad, mature product we see today.As of August 2004, it was
installed on more than 17 million domains worldwide, and this number is growing rap-idly. Y ou can see the current number at
http://www.php.net/usage.php01 6728 IN  9/2/04  1:24 PM  Page 2
3 Introduction
PHP is an Open Source product, which means you have access to the source code
and can use, alter, and redistribute it all without charge.
PHP originally stood for Personal Home Page but was changed in line with the GNU
recursive naming convention (GNU = Gnu’s Not Unix) and now stands for PHP
Hypertext Preprocessor .
The current major version of PHP is 5.This version has seen a complete rewrite of
the underlying Zend engine and some major improvements to the language.
The home page for PHP is available athttp://www.php.net
The home page for Zend T echnologies is
http://www.zend.com
What Is MySQL?
MySQL (pronounced My-Ess-Que-Ell ) is a very fast, robust, relational database management
system (RDBMS) .A database enables you to efficiently store, search, sort, and retrieve
data.The MySQL server controls access to your data to ensure that multiple users canwork with it concurrently, to provide fast access to it, and to ensure that only authorized
users can obtain access. Hence, MySQL is a multiuser, multithreaded server. It usesStructured Query Language (SQL) ,the standard database query language worldwide.
MySQL has been publicly available since 1996 but has a development history going backto 1979. It is the world’s most popular open source database and has won the LinuxJournal Readers’ Choice Award on a number of occasions.
MySQL is available under a dual licensing scheme.Y ou can use it under an open
source license (the GPL) free as long as you are willing to meet the terms of that license.If you want to distribute a non-GPL application including MySQL, you can buy a com-mercial license instead.
Why Use PHP and MySQL?
When setting out to build an e-commerce site, you could use many different products.You need to choose the following:
nHardware for the web server
nAn operating system
nWeb server software
nA database management system
nA programming or scripting language
Some of these choices are dependent on the others. For example, not all operating 
systems run on all hardware, not all scripting languages can connect to all databases, andso on.01 6728 IN  9/2/04  1:24 PM  Page 3
4 Introduction
In this book, we do not pay much attention to hardware, operating systems, or web
server software.We don’t need to. One of the best features of both PHP and MySQL isthat they work with any major operating system and many of the minor ones.
To demonstrate this, we have written the examples in this book and tested them on
two popular setups:
nLinux using the Apache web server
nMicrosoft Windows XP using Microsoft Internet Information Server (IIS)
Whatever hardware, operating system, and web server you choose, we believe you should
seriously consider using PHP and MySQL.
Some of PHP’s Strengths
Some of PHP’s main competitors are Perl, Microsoft ASP .NET, JavaServer Pages (JSP),and ColdFusion.
In comparison to these products, PHP has many strengths, including the following:
nHigh performance
nInterfaces to many different database systems
nBuilt-in libraries for many common web tasks
nLow cost
nEase of learning and use
nStrong object-oriented support
nPortability
nAvailability of source code
nAvailability of support
A more detailed discussion of these strengths follows.
Performance
PHP is very efficient. Using a single inexpensive server, you can serve millions of hits per
day. If you use large numbers of commodity servers, your capacity is effectively unlimit-ed. Benchmarks published by Zend T echnologies (http://www.zend.com) show PHPoutperforming its competition.
Database Integration
PHP has native connections available to many database systems. In addition to MySQL,you can directly connect to PostgreSQL, mSQL, Oracle, dbm, FilePro, Hyperwave,
Informix, InterBase, and Sybase databases, among others. PHP 5 also has a built-in SQLinterface to a flat file, called SQLite.01 6728 IN  9/2/04  1:24 PM  Page 4
5 Introduction
Using the Open Database Connectivity Standard (ODBC) ,you can connect to any data-
base that provides an ODBC driver.This includes Microsoft products and many others.
Built-in Libraries
Because PHP was designed for use on the Web, it has many built-in functions for per-forming many useful web-related tasks.Y ou can generate GIF images on the fly, connectto web services and other network services, parse XML, send email, work with cookies,and generate PDF documents, all with just a few lines of code.
Cost
PHP is free.Y ou can download the latest version at any time from http://www.php.netfor no charge.
Ease of Learning PHP
The syntax of PHP is based on other programming languages, primarily C and Perl. Ifyou already know C or Perl, or a C-like language such as C++ or Java, you will be pro-
ductive using PHP almost immediately.
Object-Oriented Support
PHP version 5 has well-designed object-oriented features. If you learned to program inJava or C++, you will find the features (and generally the syntax) that you expect, such
as inheritance, private and protected attributes and methods, abstract classes and methods,interfaces, constructors, and destructors.Y ou will even find some less common featuressuch as built-in iteration behavior. Some of this functionality was available in PHP ver-sions 3 and 4, but the object-oriented support in version 5 is much more complete.
Portability
PHP is available for many different operating systems.Y ou can write PHP code on free
Unix-like operating systems such as Linux and FreeBSD, commercial Unix versions suchas Solaris and IRIX, or on different versions of Microsoft Windows.
Well-written code will usually work without modification on a different system run-
ning PHP .
Source Code
You have access to PHP’s source code.With PHP , unlike commercial, closed-source
products, if you want to modify something or add to the language, you are free to do so.
You do not need to wait for the manufacturer to release patches.Y ou also don’t need
to worry about the manufacturer going out of business or deciding to stop supporting aproduct.01 6728 IN  9/2/04  1:24 PM  Page 5
6 Introduction
Availability of Support
Zend T echnologies (www.zend.com), the company behind the engine that powers PHP ,
funds its PHP development by offering support and related software on a commercialbasis.
What Is New in PHP 5.0?
You may have recently moved to PHP 5.0 from one of the PHP 4.x versions.As you
would expect in a new major version, it has some significant changes.The Zend engine
beneath PHP has been rewritten for this version. Major new features are as follows:
nBetter object-oriented support built around a completely new object model (seeChapter 6,“Object-Oriented PHP”)
nExceptions for scalable, maintainable error handling (see Chapter 7,“ExceptionHandling”)
nSimpleXML for easy handling of XML data (see Chapter 33,“Connecting to WebServices with XML and SOAP”)
Other changes include moving some extensions out of the default PHP install and into
the PECL library, improving streams support, and adding SQLite.
Some of MySQL’s Strengths
MySQL’s main competitors are PostgreSQL, Microsoft SQL Server, and Oracle.MySQL has many strengths, including the following:
nHigh performance
nLow cost
nEase of configuration and learning
nPortability
nAvailability of source code
nAvailability of support
A more detailed discussion of these strengths follows.
Performance
MySQL is undeniably fast.Y ou can see the developers’ benchmark page at
http://web.mysql.com/benchmark.html. Many of these benchmarks show MySQL to beorders of magnitude faster than the competition. In 2002, eWeek published a benchmark
comparing five databases powering a web application.The best result was a tie betweenMySQL and the much more expensive Oracle.01 6728 IN  9/2/04  1:24 PM  Page 6
7 Introduction
Low Cost
MySQL is available at no cost under an open source license or at low cost under a com-
mercial license.Y ou need a license if you want to redistribute MySQL as part of anapplication and do not want to license your application under an Open Source license. Ifyou do not intend to distribute your application or are working on Free Software, you
do not need to buy a license.
Ease of Use
Most modern databases use SQL. If you have used another RDBMS, you should have notrouble adapting to this one. MySQL is also easier to set up than many similar products.
Portability
MySQL can be used on many different Unix systems as well as under Microsoft
Windows.
Source Code
As with PHP , you can obtain and modify the source code for MySQL.This point is not
important to most users most of the time, but it provides you with excellent peace ofmind, ensuring future continuity and giving you options in an emergency.
Availability of Support
Not all open source products have a parent company offering support, training, consult-
ing, and certification, but you can get all of these benefits from MySQL AB(www.mysql.com).
What Is New in MySQL 5.0?
Major changes introduced for MySQL 5.0 include
nStored procedures (see Chapter 13,“Advanced MySQL Programming”)
nCursor support
Other changes include more ANSI standard compliance and speed improvements.
If you are still using an early 4.x version or a 3.x version of the MySQL server, youshould know that the following features were added to various versions from 4.0:
nSubquery support
nGIS types for storing geographical data
nImproved support for internationalization
nThe transaction-safe storage engine InnoDB included as standard
nThe MySQL query cache, which greatly improves the speed of repetitive queriesas often run by web applications01 6728 IN  9/2/04  1:24 PM  Page 7
8 Introduction
How Is This Book Organized?
This book is divided into five main parts:
Part I,“Using PHP ,” provides an overview of the main parts of the PHP language
with examples. Each example is a real-world example used in building an e-commercesite rather than “toy” code.We kick off this section with Chapter 1,“PHP CrashCourse.” If you’ve already used PHP , you can whiz through this chapter. If you are newto PHP or new to programming, you might want to spend a little more time on it. Evenif you are quite familiar with PHP , you will want to read Chapter 6,“Object-OrientedPHP ,” because the object-oriented functionality has changed significantly in PHP5.
Part II,“Using MySQL,” discusses the concepts and design involved in using relational
database systems such as MySQL, using SQL, connecting your MySQL database to theworld with PHP , and employing advanced MySQL techniques, such as security and opti-
mization.
Part III,“E-commerce and Security,” covers some of the general issues involved in
developing an e-commerce site using any language.The most important of these issues issecurity.We then discuss how you can use PHP and MySQL to authenticate your usersand securely gather, transmit, and store data.
Part IV ,“Advanced PHP T echniques,” offers detailed coverage of some of the major
built-in functions in PHP .We have selected groups of functions that are likely to be use-
ful when building an e-commerce site.Y ou will learn about interaction with the server,interaction with the network, image generation, date and time manipulation, and sessionvariables.
Part V,“Building Practical PHP and MySQL Projects,” is our favorite section. It deals
with practical real-world issues such as managing large projects and debugging, and pro-vides sample projects that demonstrate the power and versatility of PHP and MySQL.
Finally
We hope you enjoy this book and enjoy learning about PHP and MySQL as much as
we did when we first began using these products.They are really a pleasure to use. Soon,
you’ll be able to join the thousands of web developers who use these robust, powerful
tools to easily build dynamic, real-time websites.01 6728 IN  9/2/04  1:24 PM  Page 8
I
Using PHP
1PHP Crash Course
2Storing and Retrieving Data
3Using Arrays
4String Manipulation and Regular Expressions
5Reusing Code and Writing Functions
6Object-Oriented PHP
7Exception Handling02 6728 Part1  9/2/04  1:15 PM  Page 9
02 6728 Part1  9/2/04  1:15 PM  Page 10
1
PHP Crash Course
THIS CHAPTER GIVES YOU A QUICK OVER VIEW of PHP syntax and language constructs.
If you are already a PHP programmer, it might fill some gaps in your knowledge. If youhave a background using C,Active Server Pages (ASP), or another programming lan-guage, it will help you get up to speed quickly.
In this book, you’ll learn how to use PHP by working through lots of real-world
examples taken from our experiences in building e-commerce sites. Often, programmingtextbooks teach basic syntax with very simple examples.We have chosen not to do that.We recognize that often what you want to do is get something up and running, to
understand how the language is used, instead of plowing through yet another syntax andfunction reference that’s no better than the online manual.
Try the examples.T ype them in or load them from the CD-ROM, change them,
break them, and learn how to fix them again.
This chapter begins with the example of an online product order form to show how
variables, operators, and expressions are used in PHP . It also covers variable types and
operator precedence.Y ou learn how to access form variables and manipulate them byworking out the total and tax on a customer order.
You then develop the online order form example by using a PHP script to validate
the input data.Y ou examine the concept of Boolean values and look at examples using
if,else,the ?:operator, and the switch statement. Finally, you explore looping by
writing some PHP to generate repetitive HTML tables.
Key topics you learn in this chapter include
nEmbedding PHP in HTML
nAdding dynamic content
nAccessing form variables03 6728 CH01  9/2/04  1:23 PM  Page 11
12 Chapter 1 PHP Crash Course
nUnderstanding identifiers
nCreating user-declared variables
nExamining variable types
nAssigning values to variables
nDeclaring and using constants
nUnderstanding variable scope
nUnderstanding operators and precedence
nEvaluating expressions
nUsing variable functions
nMaking decisions with if,else,and switch
nTaking advantage of iteration using while ,do,and forloops
Using PHP
To work through the examples in this chapter and the rest of the book, you need access
to a web server with PHP installed.T o gain the most from the examples and case studies,you should run them and try changing them.T o do this, you need a testbed where you
can experiment.
If PHP is not installed on your machine, you need to begin by installing it or having
your system administrator install it for you.Y ou can find instructions for doing so in
Appendix A,“Installing PHP5 and MySQL5.” Everything you need to install PHP underUnix or Windows can be found on the accompanying CD-ROM.
Creating a Sample Application: Bob’s Auto Parts
One of the most common applications of any server-side scripting language is processingHTML forms.Y ou’ll start learning PHP by implementing an order form for Bob’s AutoParts, a fictional spare parts company.Y ou can find all the code for the examples used in
this chapter in the directory called 
chapter01 on the CD-ROM.
Creating the Order Form
Bob’s HTML programmer has set up an order form for the parts that Bob sells.This rel-atively simple order form, shown in Figure 1.1, is similar to many you have probablyseen while surfing. Bob would like to be able to know what his customers ordered, workout the total prices of their orders, and determine how much sales tax is payable on theorders.03 6728 CH01  9/2/04  1:23 PM  Page 12
13 Creating a Sample Application: Bob’s Auto Parts
Figure 1.1 Bob’s initial order form records only products and quantities.
Part of the HTML for this form is shown in Listing 1.1.
Listing 1.1 orderform.html — HTML for Bob’s Basic Order Form
<form action= ”processorder.php ”method=”post”>
<table border= ”0”>
<tr bgcolor= ”#cccccc”>
<td width= ”150”>Item</td>
<td width= ”15”>Quantity</td>
</tr><tr>
<td>Tires</td><td align= ”center”><input type= ”text”name=”tireqty”size=”3”
maxlength= ”3”/></td>
</tr><tr>
<td>Oil</td><td align= ”center”><input type= ”text”name=”oilqty”size=”3”
maxlength= ”3”/></td>
</tr>
03 6728 CH01  9/2/04  1:23 PM  Page 13
14 Chapter 1 PHP Crash Course
<tr>
<td>Spark Plugs</td><td align= ”center”><input type= ”text”name=”sparkqty ”size=”3”
maxlength= ”3”/></td>
</tr><tr>
<td colspan= ”2”align=”center”><input type= ”submit”value=”Submit Order ”/></td>
</tr></table>
</form>
Notice that the form’s action is set to the name of the PHP script that will process the
customer’s order. (Y ou’ll write this script next.) In general, the value of the action
attribute is the URL that will be loaded when the user clicks the Submit button.Thedata the user has typed in the form will be sent to this URL via the method specified inthe 
method attribute, either get(appended to the end of the URL) or post (sent as a
separate message).
Also note the names of the form fields: tireqty ,oilqty ,and sparkqty .You’ll use
these names again in the PHP script. Because the names will be reused, it’s important togive your form fields meaningful names that you can easily remember when you begin
writing the PHP script. Some HTML editors generate field names like 
field23 by
default.They are difficult to remember.Y our life as a PHP programmer will be easier ifthe names you use reflect the data typed into the field.
You might want to consider adopting a coding standard for field names so that all
field names throughout your site use the same format.This way, you can more easilyremember whether, for example, you abbreviated a word in a field name or put in
underscores as spaces.
Processing the Form
To process the form, you need to create the script mentioned in the action attribute of
the form tag called processorder.php .Open your text editor and create this file.Then
type in the following code:
<html>
<head>
<title>Bob ’s Auto Parts - Order Results</title>
</head><body><h1>Bob’s Auto Parts</h1>
<h2>Order Results</h2></body></html>Listing 1.1 Continued03 6728 CH01  9/2/04  1:23 PM  Page 14
15 Embedding PHP in HTML
Notice how everything you’ve typed so far is just plain HTML. It’s now time to add
some simple PHP code to the script.
Embedding PHP in HTML
Under the <h2> heading in your file, add the following lines:
<?php
echo ‘<p>Order processed.</p> ’;
?>
Save the file and load it in your browser by filling out Bob’s form and clicking the
Submit Order button.Y ou should see something similar to the output shown in Figure 1.2.
Figure 1.2 Text passed to PHP’s echo construct is echoed to the browser.
Notice how the PHP code you wrote was embedded inside a normal-looking HTML
file.Try viewing the source from your browser.Y ou should see this code:
<html>
<head>
03 6728 CH01  9/2/04  1:23 PM  Page 15
16 Chapter 1 PHP Crash Course
<title>Bob ’s Auto Parts - Order Results</title>
</head><body><h1>Bob’s Auto Parts</h1>
<h2>Order Results</h2><p>Order processed.</p></body></html>
None of the raw PHP is visible because the PHP interpreter has run through the script
and replaced it with the output from the script.This means that from PHP you can pro-duce clean HTML viewable with any browser; in other words, the user’s browser doesnot need to understand PHP .
This example illustrates the concept of server-side scripting in a nutshell.The PHP
has been interpreted and executed on the web server, as distinct from JavaScript andother client-side technologies interpreted and executed within a web browser on a user’smachine.
The code that you now have in this file consists of four types of text:
nHTML
nPHP tags
nPHP statements
nWhitespace
You can also add
nComments
Most of the lines in the example are just plain HTML.
Use of PHP Tags
The PHP code in the preceding example began with <?php and ended with ?>.This is
similar to all HTML tags because they all begin with a less than ( <) symbol and end with
a greater than ( >) symbol.These symbols ( <?php and ?>) are called PHP tags .They tell
the web server where the PHP code starts and finishes.Any text between the tags isinterpreted as PHP .Any text outside these tags is treated as normal HTML.The PHPtags allow you to escape from HTML.
You can choose different tag styles. Let’s look at these tags in more detail.
PHP Tag Styles
There are actually four different styles of PHP tags. Each of the following fragments of
code is equivalent:03 6728 CH01  9/2/04  1:23 PM  Page 16
17 Embedding PHP in HTML
nXML style
<?php echo ‘<p>Order processed.</p> ’; ?>
This is the tag style that we use in this book; it is the preferred PHP tag style.The
server administrator cannot turn it off, so you can guarantee it will be available onall servers, which is especially important if you are writing applications that may beused on different installations.This tag style can be used with Extensible MarkupLanguage (XML) documents. If you plan to serve XML on your site, you shoulddefinitely use this tag style.
nShort style
<? echo ‘<p>Order processed.</p> ’; ?>
This tag style is the simplest and follows the style of a Standard Generalized
Markup Language (SGML) processing instruction.T o use this type of tag—whichis the shortest to type—you either need to enable the 
short_open_tag setting in
your config file or compile PHP with short tags enabled.Y ou can find more infor-
mation on how to use this tag style in Appendix A.The use of this style is not rec-ommended because, although this tag style is currently enabled by default, systemadministrators occasionally disable it because it interferes with XML documentdeclarations.
nSCRIPT style
<SCRIPT LANGUAGE= ’php’> echo ‘<p>Order processed.</p> ’; </SCRIPT>
This tag style is the longest and will be familiar if you’ve used JavaScript or
VBScript.Y ou might use it if you’re using an HTML editor that gives you prob-lems with the other tag styles.
nASP style
<% echo ‘<p>Order processed.</p> ’; %>
This tag style is the same as used in Active Server Pages (ASP) or ASP .NET.Y ou
can use it if you have enabled the asp_tags configuration setting.Y ou might want
to use this style of tag if you are using an editor that is geared toward ASP orASP .NET or if you already program in ASP or ASP .NET. Note that, by default,this tag style is disabled.
PHP Statements
You tell the PHP interpreter what to do by including PHP statements between your
opening and closing tags.The preceding example used only one type of statement:
echo ‘<p>Order processed.</p> ’;03 6728 CH01  9/2/04  1:23 PM  Page 17
18 Chapter 1 PHP Crash Course
As you have probably guessed, using the echo construct has a very simple result: It prints
(or echoes) the string passed to it to the browser. In Figure 1.2, you can see the result isthat the text 
Order processed. appears in the browser window.
Notice that a semicolon appears at the end of the echo statement. It separates state-
ments in PHP much like a period separates sentences in English. If you have pro-grammed in C or Java before, you will be familiar with using the semicolon in this way.
Leaving off the semicolon is a common syntax error that is easily made. However, it’s
equally easy to find and to correct.
Whitespace
Spacing characters such as newlines (carriage returns), spaces, and tabs are known aswhitespace .As you probably already know, browsers ignore whitespace in HTML. So does
the PHP engine. Consider these two HTML fragments:
<h1>Welcome to Bob ’s Auto Parts!</h1><p>What would you like to order today?</p>
and
<h1>Welcome             to Bob ’s
Auto Parts!</h1><p>What would you liketo order today?</p>
These two snippets of HTML code produce identical output because they appear the
same to the browser. However, you can and are encouraged to use whitespace in yourHTML as an aid to humans—to enhance the readability of your HTML code.The sameis true for PHP .Y ou don’t need to have any whitespace between PHP statements, but itmakes the code much easier to read if you put each statement on a separate line. Forexample,
echo ‘hello ‘;
echo ‘world’;
and
echo ‘hello ‘;echo ‘world’;
are equivalent, but the first version is easier to read.
Comments
Comments are exactly that: Comments in code act as notes to people reading the code.
Comments can be used to explain the purpose of the script, who wrote it, why theywrote it the way they did, when it was last modified, and so on.Y ou generally find com-ments in all but the simplest PHP scripts.
The PHP interpreter ignores any text in comments. Essentially, the PHP parser skips
over the comments, making them equivalent to whitespace.03 6728 CH01  9/2/04  1:23 PM  Page 18
19 Adding Dynamic Content
PHP supports C, C++, and shell script–style comments.
The following is a C-style, multiline comment that might appear at the start of a
PHP script:
/* Author: Bob Smith
Last modified: April 10This script processes the customer orders.
*/
Multiline comments should begin with a /*and end with */.As in C, multiline com-
ments cannot be nested.
You can also use single-line comments, either in the C++ style:
echo ‘<p>Order processed.</p> ’; // Start printing order
or in the shell script style:
echo ‘<p>Order processed.</p> ’; # Start printing order
With both of these styles, everything after the comment symbol ( #or //) is a comment
until you reach the end of the line or the ending PHP tag, whichever comes first.
In the following line of code, the text before the closing tag, here is a comment ,i s
part of a comment.The text after the closing tag, here is not ,will be treated as
HTML because it is outside the closing tag:
// here is a comment ?> here is not
Adding Dynamic Content
So far, you haven’t used PHP to do anything you couldn’t have done with plain HTML.
The main reason for using a server-side scripting language is to be able to provide
dynamic content to a site’s users.This is an important application because content thatchanges according to users’ needs or over time will keep visitors coming back to a site.PHP allows you to do this easily.
Let’s start with a simple example. Replace the PHP in 
processorder.php with the
following code:
<?php
echo ‘<p>Order processed at ‘;
echo date( ‘H:i, jS F ’);
echo ‘</p>’;
?>
In this code, PHP’s built-in date() function tells the customer the date and time when
his order was processed.This information will be different each time the script is run.The output of running the script on one occasion is shown in Figure 1.3.03 6728 CH01  9/2/04  1:23 PM  Page 19
20 Chapter 1 PHP Crash Course
Figure 1.3 PHP’s date() function returns a formatted date string.
Calling Functions
Look at the call to date() .This is the general form that function calls take. PHP has an
extensive library of functions you can use when developing web applications. Most ofthese functions need to have some data passed to them and return some data.
Now look at the function call again:
date(‘H:i, jS F ’)
Notice that it passes a string (text data) to the function inside a pair of parentheses.The
element within the parentheses is called the function’s argument or parameter .Such argu-
ments are the input the function uses to output some specific results.
Using the date() Function
The date() function expects the argument you pass it to be a format string, represent-
ing the style of output you would like. Each letter in the string represents one part ofthe date and time.
His the hour in a 24-hour format with leading zeros where required,
iis the minutes with a leading zero where required, jis the day of the month without a
leading zero, Srepresents the ordinal suffix (in this case th), and Fis the full name of the
month.
03 6728 CH01  9/2/04  1:23 PM  Page 20
21 Accessing Form Variables
For a full list of formats supported by date() ,see Chapter 20,“Managing the Date
and Time.”
Accessing Form Variables
The whole point of using the order form is to collect customers’ orders. Getting thedetails of what the customers typed is easy in PHP , but the exact method depends on theversion of PHP you are using and a setting in your 
php.ini file.
Form Variables
Within your PHP script, you can access each form field as a PHP variable whose name
relates to the name of the form field.Y ou can recognize variable names in PHP because
they all start with a dollar sign ( $). (Forgetting the dollar sign is a common programming
error.)
Depending on your PHP version and setup, you can access the form data via variables
in three ways.These methods do not have official names, so we have nicknamed themshort,medium ,and long style .In any case, each form field on a page submitted to a PHP
script is available in the script.
You can access the contents of the field 
tireqty in the following ways:
$tireqty                        // short style
$_POST[‘tireqty’]               // medium style
$HTTP_POST_VARS[ ‘tireqty’]      // long style
In this example and throughout this book, we have used the medium style (that is,
$_POST[‘tireqty’]) for referencing form variables, but we have created short versions
of the variables for ease of use. (This has been the recommended approach since PHPversion 4.2.0.)
For your own code, you might decide to use a different approach.T o make an
informed choice, look at the different methods:
nShort style ( $tireqty ) is convenient but requires the register_globals configu-
ration setting be turned on.Whether it is on or off by default depends on the ver-sion of PHP . In all versions since 4.2.0, it has been off by default. Previously, it wason by default, and most PHP programmers used the short tag style. This changecaused quite a lot of confusion at the time it was made.This style also allows youto make errors that could make your code insecure, which is why it is no longerthe recommended approach.
nMedium style ( $_POST[‘tireqty’]) is now the recommended approach. It is
fairly convenient but came into existence only with PHP 4.1.0, so it does not
work on older installations.03 6728 CH01  9/2/04  1:23 PM  Page 21
22 Chapter 1 PHP Crash Course
nLong style ( $HTTP_POST_VARS[ ‘tireqty’]) is the most verbose. Note, however,
that it is deprecated and is therefore likely to be removed in the long term.Thisstyle used to be the most portable but can now be disabled via the
register_long_arrays configuration directive, which improves performance.
When you use the short style, the names of the variables in the script are the same as the
names of the form fields in the HTML form.Y ou don’t need to declare the variables ortake any action to create these variables in your script.They are passed into your script,essentially as arguments are passed to a function. If you are using this style, you can use avariable such as 
$tireqty .The field tireqty in the form creates the variable $tireqty
in the processing script.
Such convenient access to variables is appealing, but before you simply turn on 
register_globals ,it is worth considering why the PHP development team set it 
to off.
Having direct access to variables like this is very convenient, but it does allow you to make
programming mistakes that could compromise your scripts’ security.With form variablesautomatically turned into global variables like this, there is no obvious distinction betweenvariables that you have created and untrusted variables that have come directly from users.
If you are not careful to give all your own variables a starting value, your scripts’ users
can pass variables and values as form variables that will be mixed with your own. If youchoose to use the convenient short style of accessing variables, you need to give all yourown variables a starting value.
Medium style involves retrieving form variables from one of the arrays 
$_POST ,
$_GET ,or $_REQUEST .One of the $_GET or $_POST arrays holds the details of all the
form variables.Which array is used depends on whether the method used to submit theform was 
GETor POST,respectively. In addition, all data submitted via GETor POST is also
available through $_REQUEST .
If the form was submitted via the POST method, the data entered in the tireqty box
will be stored in $_POST[‘tireqty’].If the form was submitted via GET,the data will
be in $_GET[‘tireqty’].In either case, the data will also be available in
$_REQUEST[ ‘tireqty’].
These arrays are some of the superglobal arrays.We will revisit the superglobals when
we discuss variable scope.
If you are using an older version of PHP , you might not have access to $_POST or
$_GET .Prior to version 4.1.0, this information was stored in arrays named
$HTTP_POST_VARS and $HTTP_GET_VARS .We call this the long style.As mentioned previ-
ously, this style has been deprecated.There is no equivalent of $_REQUEST in this style.
If you are using long style, you can access a user’s response through
$HTTP_POST_VARS[ ‘tireqty’]or $HTTP_GET_VARS[ ‘tireqty’].03 6728 CH01  9/2/04  1:23 PM  Page 22
23 Accessing Form Variables
The examples in this book were tested with PHP version 5.0 and will sometimes be
incompatible with older versions of PHP prior to version 4.1.0.We recommend that,where possible, you use the current version.
Let’s look at another example. Because the long and medium style variable names are
somewhat cumbersome and rely on a variable type known as arrays,which are not 
covered properly until Chapter 3,“Using Arrays,” you can start by creating easier-to-usecopies.
To copy the value of one variable into another, you use the assignment operator,
which in PHP is an equal sign (
=).The following statement creates a new variable named
$tireqty and copies the contents of $ POST [ ‘tireqty’]into the new variable:
$tireqty = $_POST[ ‘tireqty’];
Place the following block of code at the start of the processing script.All other scripts in
this book that handle data from a form contain a similar block at the start. Because thiscode will not produce any output, placing it above or below the 
<html> and other
HTML tags that start your page makes no difference.We generally place such blocks atthe start of the script to make them easy to find.
<?php
// create short variable names$tireqty = $_POST[ ‘tireqty’];
$oilqty = $_POST[ ‘oilqty’];
$sparkqty = $_POST[ ‘sparkqty ’];
?>
This code creates three new variables— $tireqty ,$oilqty ,and $sparkqty —and sets
them to contain the data sent via the POST method from the form.
To make the script start doing something visible, add the following lines to the bot-
tom of your PHP script:
echo ‘<p>Your order is as follows: </p> ’;
echo $tireqty. ’tires<br /> ’;
echo $oilqty. ’bottles of oil<br /> ’;
echo $sparkqty. ’spark plugs<br /> ’;
At this stage, you have not checked the variable contents to make sure sensible data has
been entered in each form field.Try entering deliberately wrong data and observe whathappens.After you have read the rest of the chapter, you might want to try adding somedata validation to this script.
If you now load this file in your browser, the script output should resemble what is
shown in Figure 1.4.The actual values shown, of course, depend on what you typed intothe form.03 6728 CH01  9/2/04  1:23 PM  Page 23
24 Chapter 1 PHP Crash Course
Figure 1.4 The form variables the user typed in are easily accessible in
processorder.php .
The following subsections describe a couple of interesting elements of this example.
String Concatenation
In the sample script, echo prints the value the user typed in each form field, followed by
some explanatory text. If you look closely at the echo statements, you can see that the
variable name and following text have a period ( .) between them, such as this:
echo $tireqty. ’tires<br /> ’;
This period is the string concatenation operator, which adds strings (pieces of text)
together.Y ou will often use it when sending output to the browser with echo.This way,
you can avoid writing multiple echo commands.
You can also place any nonarray variables inside a double-quoted string to be echoed.
(Arrays are somewhat more complicated, so we look at combining arrays and strings inChapter 4,“String Manipulation and Regular Expressions.”) Consider this example:
echo “$tireqty tires<br /> ”;
03 6728 CH01  9/2/04  1:23 PM  Page 24
25 Accessing Form Variables
This is equivalent to the first statement shown in this section. Either format is valid, and
which one you use is a matter of personal taste.This process, replacing a variable with itscontents within a string, is known as interpolation.
Note that interpolation is a feature of double-quoted strings only.Y ou cannot place
variable names inside a single-quoted string in this way. Running the following line of
code
echo ‘$tireqty tires<br /> ’;
simply sends “$tireqty tires<br /> ”to the browser.Within double quotation marks,
the variable name is replaced with its value.Within single quotation marks, the variablename or any other text is sent unaltered.
Variables and Literals
The variables and strings concatenated together in each of the echo statements in the
sample script are different types of things.Variables are symbols for data.The strings aredata themselves.When we use a piece of raw data in a program like this, we call it a liter-
alto distinguish it from a variable.
$tireqty is a variable, a symbol that represents the
data the customer typed in. On the other hand, ‘tires<br /> ’is a literal.Y ou can take
it at face value.Well, almost. Remember the second example in the preceding section?PHP replaced the variable name 
$tireqty in the string with the value stored in the
variable.
Remember the two kinds of strings mentioned already: ones with double quotation
marks and ones with single quotation marks. PHP tries to evaluate strings in doublequotation marks, resulting in the behavior shown earlier. Single-quoted strings are treat-ed as true literals.
Recently, a third way of specifying strings was added.The heredoc syntax (
<<<),
familiar to Perl users, was added to PHP4. Heredoc syntax allows you to specify long
strings tidily, by specifying an end marker that will be used to terminate the string.Thefollowing example creates a three-line string and echoes it:
echo <<<theEnd
line 1line 2line 3
theEnd
The token theEnd is entirely arbitrary. It just needs to be guaranteed not to appear in
the text.T o close a heredoc string, place a closing token at the start of a line.
Heredoc strings are interpolated, like double-quoted strings.03 6728 CH01  9/2/04  1:23 PM  Page 25
26 Chapter 1 PHP Crash Course
Understanding Identifiers
Identifiers are the names of variables. (The names of functions and classes are also identi-
fiers; we look at functions and classes in Chapters 5,“Reusing Code and WritingFunctions,” and 6,“Object-Oriented PHP .”) Y ou need to be aware of the simple rulesdefining valid identifiers:
nIdentifiers can be of any length and can consist of letters, numbers, and under-scores.
nIdentifiers cannot begin with a digit.
nIn PHP , identifiers are case sensitive. $tireqty is not the same as $TireQty .Trying
to use them interchangeably is a common programming error. Function names arean exception to this rule:Their names can be used in any case.
nA variable can have the same name as a function.This usage is confusing, however,and should be avoided.Also, you cannot create a function with the same name asanother function.
Creating User-Declared Variables
You can declare and use your own variables in addition to the variables you are passed
from the HTML form.
One of the features of PHP is that it does not require you to declare variables before
using them.A variable is created when you first assign a value to it. See the next sectionfor details.
Assigning Values to Variables
You assign values to variables using the assignment operator ( =) as you did when copying
one variable’s value to another. On Bob’s site, you want to work out the total number ofitems ordered and the total amount payable.Y ou can create two variables to store thesenumbers.T o begin with, you need to initialize each of these variables to zero.
Add these lines to the bottom of your PHP script:
$totalqty = 0;
$totalamount = 0.00;
Each of these two lines creates a variable and assigns a literal value to it.Y ou can also
assign variable values to variables, as shown in this example:
$totalqty = 0;
$totalamount = $totalqty;03 6728 CH01  9/2/04  1:23 PM  Page 26
27 Examining Variable Types
Examining Variable Types
A variable’s type refers to the kind of data stored in it. PHP provides a growing set of
data types. Different data can be stored in different data types.
PHP’s Data Types
PHP supports the following basic data types:
nInteger —Used for whole numbers
nFloat (also called double )—Used for real numbers
nString —Used for strings of characters
nBoolean —Used for true or false values
nArray —Used to store multiple data items (see Chapter 3,“Using Arrays”)
nObject —Used for storing instances of classes (see Chapter 6)
Two special types are also available: NULL and resource.Variables that have not been
given a value, have been unset, or have been given the specific value NULL are of type
NULL. Certain built-in functions (such as database functions) return variables that havethe type resource. They represent external resources (such as database connections).Y ouwill almost certainly not directly manipulate a resource variable, but frequently they arereturned by functions and must be passed as parameters to other functions.
Type Strength
PHP is a very weakly typed language. In most programming languages, variables can
hold only one type of data, and that type must be declared before the variable can beused, as in C. In PHP , the type of a variable is determined by the value assigned to it.
For example, when you created 
$totalqty and $totalamount ,their initial types were
determined as follows:
$totalqty = 0;
$totalamount = 0.00;
Because you assigned 0,an integer, to $totalqty ,this is now an integer type variable.
Similarly, $totalamount is now of type float.
Strangely enough, you could now add a line to your script as follows:
$totalamount = ‘Hello’;
The variable $totalamount would then be of type string. PHP changes the variable type
according to what is stored in it at any given time.03 6728 CH01  9/2/04  1:23 PM  Page 27
28 Chapter 1 PHP Crash Course
This ability to change types transparently on the fly can be extremely useful.
Remember PHP “automagically” knows what data type you put into your variable. Itreturns the data with the same data type when you retrieve it from the variable.
Type Casting
You can pretend that a variable or value is of a different type by using a type cast.This
feature works identically to the way it works in C.Y ou simply put the temporary type inparentheses in front of the variable you want to cast.
For example, you could have declared the two variables from the preceding section
using a cast:
$totalqty = 0;
$totalamount = (float)$totalqty;
The second line means “Take the value stored in $totalqty ,interpret it as a float, and
store it in $totalamount .”The $totalamount variable will be of type float.The cast
variable does not change types, so $totalqty remains of type integer.
Variable Variables
PHP provides one other type of variable: the variable variable.Variable variables enable
you to change the name of a variable dynamically.
As you can see, PHP allows a lot of freedom in this area.All languages enable you to
change the value of a variable, but not many allow you to change the variable’s type, andeven fewer allow you to change the variable’s name.
A variable variable works by using the value of one variable as the name of another.
For example, you could set
$varname = ‘tireqty’;
You can then use $$varname in place of $tireqty .For example, you can set the value of
$tireqty as follows:
$$varname = 5;
This is exactly equivalent to
$tireqty = 5;
This approach might seem somewhat obscure, but we’ll revisit its use later. Instead of
having to list and use each form variable separately, you can use a loop and variable toprocess them all automatically.Y ou can find an example illustrating this in the section on
forloops.03 6728 CH01  9/2/04  1:23 PM  Page 28
29 Understanding Variable Scope
Declaring and Using Constants
As you saw previously, you can readily change the value stored in a variable.Y ou can also
declare constants.A constant stores a value just like a variable, but its value is set onceand then cannot be changed elsewhere in the script.
In the sample application, you might store the prices for each item on sale as a con-
stant.Y ou can define these constants using the 
define function:
define(‘TIREPRICE ’, 100);
define(‘OILPRICE ’, 10);
define(‘SPARKPRICE ’, 4);
Now add these lines of code to your script.Y ou now have three constants that can be
used to calculate the total of the customer’s order.
Notice that the names of the constants appear in uppercase.This convention bor-
rowed from C makes it easy to distinguish between variables and constants at a glance.
Following this convention is not required but will make your code easier to read and
maintain.
One important difference between constants and variables is that when you refer to a
constant, it does not have a dollar sign in front of it. If you want to use the value of aconstant, use its name only. For example, to use one of the constants just created, youcould type
echo TIREPRICE;
As well as the constants you define, PHP sets a large number of its own.An easy way toobtain an overview of them is to run the 
phpinfo() command:
phpinfo();
This function provides a list of PHP’s predefined variables and constants, among otheruseful information.We will discuss some of them as we go along.
One other difference between variables and constants is that constants can store only
boolean, integer, float, or string data.These types are collectively known as scalar values.
Understanding Variable Scope
The term scoperefers to the places within a script where a particular variable is visi-
ble.The six basic scope rules in PHP are as follows:
nBuilt-in superglobal variables are visible everywhere within a script.
nConstants, once declared, are always visible globally; that is, they can be used inside
and outside functions.
nGlobal variables declared in a script are visible throughout that script, but not inside
functions .03 6728 CH01  9/2/04  1:23 PM  Page 29
30 Chapter 1 PHP Crash Course
nVariables used inside functions that are declared as global refer to the global vari-
ables of the same name.
nVariables created inside functions and declared as static are invisible from outside
the function but keep their value between one execution of the function and thenext. (We explain this idea fully in Chapter 5.)
nVariables created inside functions are local to the function and cease to exist when
the function terminates.
In PHP 4.1 onward, the arrays $_GET and $_POST and some other special variables have
their own scope rules.They are known as superglobals and can be seen everywhere, both
inside and outside functions.
The complete list of superglobals is as follows:
n$GLOBALS —An array of all global variables (Like the global keyword, this allows
you to access global variables inside a function—for example, as
$GLOBALS[ ‘myvariable ’].)
n$_SERVER —An array of server environment variables
n$_GET —An array of variables passed to the script via the GETmethod
n$_POST —An array of variables passed to the script via the POST method
n$_COOKIE —An array of cookie variables
n$_FILES —An array of variables related to file uploads
n$_ENV —An array of environment variables
n$_REQUEST —An array of all user input including the contents of input including
$_GET ,$_POST ,and $_COOKIE
n$_SESSION —An array of session variables
We come back to each of these types throughout the book as they become relevant.
Wecover scope in more detail when we discuss functions. For the time being, all the
variables we use are global by default.
Using Operators
Operators are symbols that you can use to manipulate values and variables by performing
an operation on them.Y ou need to use some of these operators to work out the totalsand tax on the customer’s order.
We’ve already mentioned two operators: the assignment operator (
=) and the string
concatenation operator ( .). In the following sections, we describe the complete list.03 6728 CH01  9/2/04  1:23 PM  Page 30
31 Using Operators
In general, operators can take one, two, or three arguments, with the majority taking
two. For example, the assignment operator takes two: the storage location on the left sideof the 
=symbol and an expression on the right side.These arguments are called
operands —that is, the things that are being operated upon.
Arithmetic Operators
Arithmetic operators are straightforward; they are just the normal mathematical opera-
tors. PHP’s arithmetic operators are shown in Table 1.1.
Table 1.1 PHP’s Arithmetic Operators
Operator Name Example
+ Addition $a + $b
- Subtraction $a - $b
* Multiplication $a * $b
/ Division $a / $b
% Modulus $a % $b
With each of these operators, you can store the result of the operation, as in this example:
$result = $a + $b;
Addition and subtraction work as you would expect.The result of these operators is to
add or subtract, respectively, the values stored in the $aand $bvariables.
You can also use the subtraction symbol ( -) as a unary operator—that is, an operator
that takes one argument or operand—to indicate negative numbers, as in this example:
$a = -1;
Multiplication and division also work much as you would expect. Note the use of theasterisk as the multiplication operator rather than the regular multiplication symbol, andthe forward slash as the division operator rather than the regular division symbol.
The modulus operator returns the remainder calculated by dividing the 
$avariable by
the $bvariable. Consider this code fragment:
$a = 27;
$b = 10;$result = $a%$b;
The value stored in the $result variable is the remainder when you divide 27 by 10—
that is, 7.03 6728 CH01  9/2/04  1:23 PM  Page 31
32 Chapter 1 PHP Crash Course
You should note that arithmetic operators are usually applied to integers or doubles.
If you apply them to strings, PHP will try to convert the string to a number. If it con-tains an 
eor an E,it will be read as being in scientific notation and converted to a float;
otherwise, it will be converted to an integer. PHP will look for digits at the start of thestring and use them as the value; if there are none, the value of the string will be zero.
String Operators
You’ve already seen and used the only string operator.Y ou can use the string concatena-
tion operator to add two strings and to generate and store a result much as you woulduse the addition operator to add two numbers:
$a = “Bob’s “;
$b = “Auto Parts ”;
$result = $a.$b;
The $result variable now contains the string “Bob’s Auto Parts ”.
Assignment Operators
You’ve already seen the basic assignment operator ( =).Always refer to this as the assign-
ment operator and read it as “is set to.” For example,
$totalqty = 0;
This line should be read as “ $totalqty is set to zero.”We explain why when we discuss
the comparison operators later in this chapter, but if you call it equals, you will get con-fused.
Values Returned from Assignment
Using the assignment operator returns an overall value similar to other operators. If you
write
$a + $b
the value of this expression is the result of adding the $aand $bvariables together.
Similarly, you can write
$a = 0;
The value of this whole expression is zero.
This technique enables you to form expressions such as
$b = 6 + ($a = 5);
This line sets the value of the $bvariable to 11.This behavior is generally true of assign-
ments:The value of the whole assignment statement is the value that is assigned to theleft operand.03 6728 CH01  9/2/04  1:23 PM  Page 32
33 Using Operators
When working out the value of an expression, you can use parentheses to increase
the precedence of a subexpression, as shown here.This technique works exactly the sameway as in mathematics.
Combination Assignment Operators
In addition to the simple assignment, there is a set of combined assignment operators.
Each of them is a shorthand way of performing another operation on a variable andassigning the result back to that variable. For example,
$a += 5;
This is equivalent to writing
$a = $a + 5;
Combined assignment operators exist for each of the arithmetic operators and for thestring concatenation operator.A summary of all the combined assignment operators andtheir effects is shown in Table 1.2.
Table 1.2 PHP’s Combined Assignment Operators
Operator Use Equivalent To
+= $a += $b $a = $a + $b
-= $a -= $b $a = $a - $b*= $a *= $b $a = $a * $b/= $a /= $b $a = $a / $b%= $a %= $b $a = $a % $b
.= $a .= $b $a = $a . $b
Pre- and Post-Increment and Decrement
The pre- and post-increment ( ++) and decrement ( --) operators are similar to the +=
and -=operators, but with a couple of twists.
All the increment operators have two effects:They increment and assign a value.
Consider the following:
$a=4;
echo ++$a;
The second line uses the pre-increment operator, so called because the ++appears before
the $a.This has the effect of first incrementing $aby 1 and second, returning the incre-
mented value. In this case, $ais incremented to 5, and then the value 5 is returned and
printed.The value of this whole expression is 5. (Notice that the actual value stored in
$ais changed: It is not just returning $a + 1 .)03 6728 CH01  9/2/04  1:23 PM  Page 33
34 Chapter 1 PHP Crash Course
If the ++is after the $a,however,you are using the post-increment operator. It has a
different effect. Consider the following:
$a=4;
echo $a++;
In this case, the effects are reversed.That is, first, the value of $ais returned and printed,
and second, it is incremented.The value of this whole expression is 4.This is the valuethat will be printed. However, the value of 
$aafter this statement is executed is 5.
As you can probably guess, the behavior is similar for the --operator. However, the
value of $ais decremented instead of being incremented.
References
The reference operator ( &,an ampersand) can be used in conjunction with assignment.
Normally, when one variable is assigned to another, a copy is made of the first variableand stored elsewhere in memory. For example,
$a = 5;
$b = $a;
These code lines make a second copy of the value in $aand store it in $b.If you subse-
quently change the value of $a,$bwill not change:
$a = 7; // $b will still be 5
You can avoid making a copy by using the reference operator. For example,
$a = 5;
$b = &$a;$a = 7; // $a and $b are now both 7
References can be a bit tricky. Remember that a reference is like an alias rather than like
a pointer. Both $aand $bpoint to the same piece of memory.Y ou can change this by
unsetting one of them as follows:
unset($a);
Unsetting does not change the value of $b(7) but does break the link between $aand
the value 7 stored in memory.
Comparison Operators
The comparison operators compare two values. Expressions using these operators returneither of the logical values 
true or false depending on the result of the comparison.03 6728 CH01  9/2/04  1:23 PM  Page 34
35 Using Operators
The Equals Operator
The equals comparison operator ( ==,two equal signs) enables you to test whether two
values are equal. For example, you might use the expression
$a == $b
to test whether the values stored in $aand $bare the same.The result returned by this
expression is true if they are equal or false if they are not.
You might easily confuse ==with =,the assignment operator. Using the wrong opera-
tor will work without giving an error but generally will not give you the result youwanted. In general, nonzero values evaluate to 
true and zero values to false .Say that
you have initialized two variables as follows:
$a = 5;
$b = 7;
If you then test $a = $b ,the result will be true.Why? The value of $a = $b is the
value assigned to the left side, which in this case is 7. Because 7 is a nonzero value, the
expression evaluates to true.If you intended to test $a == $b ,which evaluates to
false ,you have introduced a logic error in your code that can be extremely difficult to
find.Always check your use of these two operators and check that you have used theone you intended to use.
Using the assignment operator rather than the equals comparison operator is an easy
mistake to make, and you will probably make it many times in your programming career.
Other Comparison Operators
PHP also supports a number of other comparison operators.A summary of all the com-
parison operators is shown in Table 1.3. One to note is the identical operator (
===),
which returns true only if the two operands are both equal and of the same type. For
example, 0==’0’will be true, but 0===’0’will not because one zero is an integer and
the other zero is a string.
Table 1.3 PHP’s Comparison Operators
Operator Name Use
== Equals $a == $b
=== Identical $a === $b
!= Not equal $a != $b
!== Not identical $a !== $b
<> Not equal (comparison operator) $a <> $b
< Less than $a < $b
> Greater than (comparison operator) $a > $b
<= Less than or equal to $a <= $b
>= Greater than or equal to $a >= $b03 6728 CH01  9/2/04  1:23 PM  Page 35
36 Chapter 1 PHP Crash Course
Logical Operators
The logical operators combine the results of logical conditions. For example, you might
be interested in a case in which the value of a variable, $a,is between 0 and 100.Y ou
would need to test both the conditions $a >= 0 and $a <= 100 ,using the AND opera-
tor, as follows:
$a >= 0 && $a <=100
PHP supports logical AND, OR, XOR (exclusive or), and NOT.
The set of logical operators and their use is summarized in Table 1.4.
Table 1.4 PHP’s Logical Operators
Operator Name Use Result
! NOT !$b Returnstrue if $bis false and vice versa
&& AND $a && $b Returnstrue if both $aand $bare true ;other-
wise false
|| OR $a || $b Returnstrue if either $aor $bor both are true ;
otherwise false
and AND $a and $b Same as &&,but with lower precedence
or OR $a or $b Same as ||,but with lower precedence
Theandand oroperators have lower precedence than the &&and ||operators.We
cover precedence in more detail later in this chapter.
Bitwise Operators
The bitwise operators enable you to treat an integer as the series of bits used to repre-sent it.Y ou probably will not find a lot of use for the bitwise operators in PHP , but asummary is shown in Table 1.5.
Table 1.5 PHP’s Bitwise Operators
Operator Name Use Result
& Bitwise AND $a & $b Bits set in $aand $bare set in the result.
| Bitwise OR $a | $b Bits set in $aor $bare set in the result.
~ Bitwise NOT ~$a Bits set in $aare not set in the result and
vice versa.
^ Bitwise XOR $a ^ $b Bits set in $aor $bbut not in both are set
in the result.
<< Left shift $a << $b Shifts $aleft $bbits.
>> Right shift $a >> $b Shifts$aright $bbits.03 6728 CH01  9/2/04  1:23 PM  Page 36
37 Using Operators
Other Operators
In addition to the operators we have covered so far, you can use several others.
The comma operator ( ,) separates function arguments and other lists of items. It is
normally used incidentally.
Two special operators, newand->,are used to instantiate a class and access class
members, respectively.They are covered in detail in Chapter 6.
There are a few others that we discuss briefly here.
The Ternary Operator
The ternary operator ( ?:) works the same way as it does in C. It takes the following
form:
condition ? value if true : value if false
This operator is similar to the expression version of an if-else statement, which is cov-
ered later in this chapter.
A simple example is
($grade >= 50 ? ‘Passed’: ‘Failed’)
This expression evaluates student grades to ‘Passed’or ‘Failed’.
The Error Suppression Operator
The error suppression operator ( @) can be used in front of any expression—that is, any-
thing that generates or has a value. For example,
$a = @(57/0);
Without the @operator, this line generates a divide-by-zero warning.With the operator
included, the error is suppressed.
If you are suppressing warnings in this way, you should write some error handling
code to check when a warning has occurred. If you have PHP set up with the
track_errors feature enabled, the error message will be stored in the global variable
$php_errormsg .
The Execution Operator
The execution operator is really a pair of operators—a pair of backticks ( ``) in fact.The
backtick is not a single quotation mark; it is usually located on the same key as the ~
(tilde) symbol on your keyboard.
PHP attempts to execute whatever is contained between the backticks as a command
at the server’s command line.The value of the expression is the output of the command.
For example, under Unix-like operating systems, you can use
$out = `ls -la`;
echo ‘<pre>’.$out.’</pre>’;03 6728 CH01  9/2/04  1:23 PM  Page 37
38 Chapter 1 PHP Crash Course
Or, equivalently on a Windows server, you can use
$out = `dir c:`;
echo ‘<pre>’.$out.’</pre>’;
Either version obtains a directory listing and stores it in $out.It can then be echoed to
the browser or dealt with in any other way.
There are other ways of executing commands on the server.We cover them in
Chapter 18,“Interacting with the File System and the Server.”
Array Operators
There are a number of array operators.The array element operators ( []) enable you to
access array elements.Y ou can also use the =>operator in some array contexts.These
operators are covered in Chapter 3.
You also have access to a number of other array operators.We cover them in detail in
Chapter 3 as well, but we included them here for completeness.
Table 1.6 PHP’s Array Operators
Operator Name Use Result
+ Union $a + $b Returns an array containing everything in $a
and $b
== Equality $a == $b Returns true if $aand $bhave the same 
elements
=== Identity $a === $b Returns true if $aand $bhave the same 
elements in the same order
!= Inequality $a != $b Returns true if $aand $bare not equal
<> Inequality $a <> $b Returns true if $aand $bare not equal
!== Non-identity $a !== $b Returns true if $aand $bare not identical
You will notice that the array operators in Table 1.6 all have equivalent operators that
work on scalar variables.As long as you remember that +performs addition on scalar
types and union on arrays—even if you have no interest in the set arithmetic behind thatbehavior—the behaviors should make sense.Y ou cannot usefully compare arrays to scalartypes.
The Type Operator
There is one type operator:
instanceof .This operator is used in object-oriented pro-
gramming, but we mention it here for completeness. (Object-oriented programming is
covered in Chapter 6.)03 6728 CH01  9/2/04  1:23 PM  Page 38
39 Using Operators: Working Out the Form Totals
The instanceof operator allows you to check whether an object is an instance of a
particular class, as in this example:
class sampleClass{};
$myObject = new sampleClass();if ($myObject instanceof sampleClass)
echo “myObject is an instance of sampleClass ”;
Using Operators:Working Out the Form Totals
Now that you know how to use PHP’s operators, you are ready to work out the totals
and tax on Bob’s order form.T o do this, add the following code to the bottom of yourPHP script:
$totalqty = 0;
$totalqty = $tireqty + $oilqty + $sparkqty;echo ‘Items ordered: ‘.$totalqty. ’<br />’;
$totalamount = 0.00;define(‘TIREPRICE ’, 100);
define(‘OILPRICE ’, 10);
define(‘SPARKPRICE ’, 4);
$totalamount = $tireqty * TIREPRICE
+ $oilqty * OILPRICE+ $sparkqty * SPARKPRICE;
echo ‘Subtotal: $ ’.number_format($totalamount,2). ’<br />’;
$taxrate = 0.10;  // local sales tax is 10%
$totalamount = $totalamount * (1 + $taxrate);echo ‘Total including tax: $ ’.number_format($totalamount,2). ’<br />’;
If you refresh the page in your browser window, you should see output similar to 
Figure 1.5.
As you can see, this piece of code uses several operators. It uses the addition ( +) and
multiplication ( *) operators to work out the amounts and the string concatenation oper-
ator (.) to set up the output to the browser.03 6728 CH01  9/2/04  1:23 PM  Page 39
40 Chapter 1 PHP Crash Course
Figure 1.5 The totals of the customer’s order have been calculated,
formatted, and displayed.
It also uses the number_format() function to format the totals as strings with two 
decimal places.This is a function from PHP’s Math library.
If you look closely at the calculations, you might ask why the calculations were per-
formed in the order they were. For example, consider this statement:
$totalamount = $tireqty * TIREPRICE
+ $oilqty * OILPRICE+ $sparkqty * SPARKPRICE;
The total amount seems to be correct, but why were the multiplications performed
before the additions? The answer lies in the precedence of the operators—that is, theorder in which they are evaluated.
Understanding Precedence and Associativity:
Evaluating Expressions
In general, operators have a set precedence, or order, in which they are evaluated.
Operators also have an associativity, which is the order in which operators of the sameprecedence are evaluated.This order is generally left to right (called leftfor short), right
to left (called rightfor short), or not relevant .
03 6728 CH01  9/2/04  1:23 PM  Page 40
41 Understanding Precedence and Associativity: Evaluating Expressions
Table 1.7 shows operator precedence and associativity in PHP . In this table, operators
with the lowest precedence are at the top, and precedence increases as you go down thetable.
Table 1.7 Operator Precedence in PHP
Associativity Operators
left ,
left or
left xor
left and
right print
left = += -= *= /= .= %= &= |= ^= ~= <<= >>=
left ? :
left ||
left &&
left |
left ^
left &
n/a == != === !==
n/a < <= > >=
left << >>
left + - .
left * / %
right ! ~ ++ -- (int) (double) (string) (array) (object) @
right []
n/a new
n/a ()
Notice that we haven’t yet covered the operator with the highest precedence: plain old
parentheses.The effect of using parentheses is to raise the precedence of whatever is con-tained within them.This is how you can deliberately manipulate or work around theprecedence rules when you need to.
Remember this part of the preceding example:
$totalamount = $totalamount * (1 + $taxrate);
If you had written
$totalamount = $totalamount * 1 + $taxrate;
the multiplication operation, having higher precedence than the addition operation,would be performed first, giving an incorrect result. By using the parentheses, you can
force the subexpression 
1 + $taxrate to be evaluated first.03 6728 CH01  9/2/04  1:23 PM  Page 41
42 Chapter 1 PHP Crash Course
You can use as many sets of parentheses as you like in an expression.The innermost
set of parentheses is evaluated first.
Also note one other operator in this table we have not yet covered: the print lan-
guage construct, which is equivalent to echo.Both constructs generate output.
We generally use echo in this book, but you can use print if you find it more read-
able. Neither print nor echo is really a function, but both can be called as a function
with parameters in parentheses. Both can also be treated as an operator:Y ou simply placethe string to work with after the keyword 
echo or print .
Calling print as a function causes it to return a value ( 1).This capability might be
useful if you want to generate output inside a more complex expression but does meanthat 
print is marginally slower than echo.
Using Variable Functions
Before we leave the world of variables and operators, let’s look at PHP’s variable func-tions. PHP provides a library of functions that enable you to manipulate and test vari-ables in different ways.
Testing and Setting Variable Types
Most of the variable functions are related to testing the type of function.The two most
general are gettype() and settype() .They have the following function prototypes; that
is, this is what arguments expect and what they return:
string gettype(mixed var);
int settype(mixed var, string type);
To use gettype() ,you pass it a variable. It determines the type and returns a string con-
taining the type name: boolean ,integer ,double (for floats), string ,array ,object ,
resource ,or NULL.It returns unknown type if it is not one of the standard types.
To use settype() ,you pass it a variable for which you want to change the type and a
string containing the new type for that variable from the previous list.
Note
This book and the php.net documentation refer to the data type mixed. There is no such data type, but
because PHP is so flexible with type handling, many functions can take many (or any) data types as anargument. Arguments for which many types are permitted are shown with the pseudo-type mixed.
You can use these functions as follows:
$a = 56;
echo gettype($a). ’<br />’;
settype($a, ‘double’);
echo gettype($a). ’<br />’;03 6728 CH01  9/2/04  1:23 PM  Page 42
43 Using Variable Functions
When gettype() is called the first time, the type of $ais integer.After the call to 
settype() ,the type is changed to double .
PHP also provides some specific type-testing functions. Each takes a variable as an
argument and returns either true or false .The functions are
nis_array()
nis_double() ,is_float() ,is_real() (All the same function)
nis_long() ,is_int() ,is_integer() (All the same function)
nis_string()
nis_object()
nis_resource()
nis_null()
nis_scalar() —Checks whether the variable is a scalar, that is, an integer, boolean,
string, or float.
nis_numeric() —Checks whether the variable is any kind of number or a numeric
string.
nis_callable() —Checks whether the variable is the name of a valid function.
Testing Variable Status
PHP has several functions for testing the status of a variable.The first is isset() ,which
has the following prototype:
boolean isset(mixed var);
This function takes a variable name as an argument and returns true if it exists and
false otherwise.Y ou can also pass in a comma-separated list of variables, and isset()
will return true if all the variables are set.
You can wipe a variable out of existence by using its companion function, unset() ,
which has the following prototype:
void unset(mixed var);
This function gets rid of the variable it is passed.
The empty() function checks to see whether a variable exists and has a nonempty,
nonzero value; it returns true or false accordingly. It has the following prototype:
boolean empty(mixed var);
Let’s look at an example using these three functions.
Try adding the following code to your script temporarily:
echo ‘isset($tireqty): ‘.isset($tireqty). ’<br />’;
echo ‘isset($nothere): ‘.isset($nothere). ’<br />’;
echo ‘empty($tireqty): ‘.empty($tireqty). ’<br />’;
echo ‘empty($nothere): ‘.empty($nothere). ’<br />’;03 6728 CH01  9/2/04  1:23 PM  Page 43
44 Chapter 1 PHP Crash Course
Refresh the page to see the results.
The variable $tireqty should return 1 ( true) from isset() regardless of what value
you entered in that form field and regardless of whether you entered a value at all.
Whether it is empty() depends on what you entered in it.
The variable $nothere does not exist, so it generates a blank ( false ) result from
isset() and a 1 (true) result from empty() .
These functions can be handy when you need to make sure that the user filled out
the appropriate fields in the form.
Reinterpreting Variables
You can achieve the equivalent of casting a variable by calling a function.The following
three functions can be useful for this task:
int intval(mixed var[, int base]);
float floatval(mixed var);
string strval(mixed var);
Each accepts a variable as input and returns the variable’s value converted to the appro-
priate type.The intval() function also allows you to specify the base for conversion
when the variable to be converted is a string. (This way, you can convert, for example,hexadecimal strings to integers.)
Implementing Control Structures
Control structures are the structures within a language that allow you to control the flowof execution through a program or script.Y ou can group them into conditionals (orbranching) structures and repetition structures (or loops).We consider the specific imple-mentations of each of them in PHP next.
Making Decisions with Conditionals
If you want to sensibly respond to your users’ input, your code needs to be able to makedecisions.The constructs that tell your program to make decisions are called conditionals .
ifStatements
You can use an ifstatement to make a decision.Y ou should give the ifstatement a
condition to use. If the condition is true,the following block of code will be executed.
Conditions in ifstatements must be surrounded by parentheses ().
For example, if a visitor orders no tires, no bottles of oil, and no spark plugs from
Bob, it is probably because she accidentally clicked the Submit Order button before shehad finished filling out the form. Rather than telling the visitor “Order processed,” thepage could give her a more useful message.03 6728 CH01  9/2/04  1:23 PM  Page 44
45 Making Decisions with Conditionals
When the visitor orders no items, you might like to say,“Y ou did not order anything
on the previous page!”Y ou can do this easily by using the following ifstatement:
if( $totalqty == 0 )
echo ‘You did not order anything on the previous page!<br /> ’;
The condition you are using here is $totalqty == 0 .Remember that the equals opera-
tor (==) behaves differently from the assignment operator ( =).
The condition $totalqty == 0 will be true if $totalqty is equal to zero. If
$totalqty is not equal to zero, the condition will be false .When the condition is
true,the echo statement will be executed.
Code Blocks
Often you may have more than one statement you want executed according to the
actions of a conditional statement such as if.You can group a number of statements
together as a block.To declare a block, you enclose it in curly braces:
if( $totalqty == 0 )
{
echo ‘<font color=red> ’;
echo ‘You did not order anything on the previous page!<br /> ’;
echo ‘</font>’;
}
The three lines enclosed in curly braces are now a block of code.When the condition is
true,all three lines are executed.When the condition is false ,all three lines are
ignored.
Note
As already mentioned, PHP does not care how you lay out your code. However, you should indent your code
for readability purposes. Indenting is used to enable you to see at a glance which lines will be executed onlyif conditions are met, which statements are grouped into blocks, and which statements are parts of loops orfunctions. In the previous examples, you can see that the statement depending on the ifstatement and
the statements making up the block are indented.
else Statements
Youmay often need to decide not only whether you want an action performed, but also
which of a set of possible actions you want performed.
An else statement allows you to define an alternative action to be taken when the
condition in an ifstatement is false .Say you want to warn Bob’s customers when they
do not order anything. On the other hand, if they do make an order, instead of a warn-ing, you want to show them what they ordered.03 6728 CH01  9/2/04  1:23 PM  Page 45
46 Chapter 1 PHP Crash Course
If you rearrange the code and add an else statement, you can display either a warn-
ing or a summary:
if( $totalqty == 0 )
{
echo ‘You did not order anything on the previous page!<br /> ’;
}else{
echo $tireqty. ’tires<br /> ’;
echo $oilqty. ’bottles of oil<br /> ’;
echo $sparkqty. ’spark plugs<br /> ’;
}
You can build more complicated logical processes by nesting ifstatements within each
other. In the following code, the summary will be displayed only if the condition
$totalqty == 0 is true,and each line in the summary will be displayed only if its own
condition is met:
if( $totalqty == 0)
{
echo ‘You did not order anything on the previous page!<br /> ’;
}else{
if ( $tireqty>0 )
echo $tireqty. ’tires<br /> ’;
if ( $oilqty>0 )
echo $oilqty. ’bottles of oil<br /> ’;
if ( $sparkqty>0 )
echo $sparkqty. ’spark plugs<br /> ’;
}
elseif Statements
Formany of the decisions you make, you have more than two options.Y ou can create a
sequence of many options using the elseif statement, which is a combination of an
else and an ifstatement.When you provide a sequence of conditions, the program can
check each until it finds one that is true.
Bob provides a discount for large orders of tires.The discount scheme works like this:
nFewer than 10 tires purchased—No discount
n10–49 tires purchased—5% discount
n50–99 tires purchased—10% discount
n100 or more tires purchased—15% discount03 6728 CH01  9/2/04  1:23 PM  Page 46
47 Making Decisions with Conditionals
You can create code to calculate the discount using conditions and ifand elseif state-
ments. In this case, you need to use the AND operator ( &&) to combine two conditions
into one:
if( $tireqty < 10 )
$discount = 0;
elseif( $tireqty >= 10 && $tireqty <= 49 )
$discount = 5;
elseif( $tireqty >= 50 && $tireqty <= 99 )
$discount = 10;
elseif( $tireqty >= 100 )
$discount = 15;
Note that you are free to type elseif or else if —versions with or without a space are
both correct.
If you are going to write a cascading set of elseif statements, you should be aware
that only one of the blocks or statements will be executed. It did not matter in thisexample because all the conditions were mutually exclusive; only one can be true at atime. If you write conditions in a way that more than one could be true at the sametime, only the block or statement following the first true condition will be executed.
switch Statements
The switch statement works in a similar way to the ifstatement, but it allows the con-
dition to take more than two values. In an ifstatement, the condition can be either
true or false .In a switch statement, the condition can take any number of different
values, as long as it evaluates to a simple type (integer, string, or float).Y ou need to pro-
vide a case statement to handle each value you want to react to and, optionally, a default
case to handle any that you do not provide a specific case statement for.
Bob wants to know what forms of advertising are working for him, so you can add a
question to the order form. Insert this HTML into the order form, and the form willresemble Figure 1.6:
<tr>
<td>How did you find Bob ’s?</td>
<td><select name= ”find”>
<option value = “a”>I’m a regular customer</option>
<option value = “b”>TV advertising</option>
<option value = “c”>Phone directory</option>
<option value = “d”>Word of mouth</option>
</select>
</td>
</tr>03 6728 CH01  9/2/04  1:23 PM  Page 47
48 Chapter 1 PHP Crash Course
Figure 1.6 The order form now asks visitors how they found Bob’s Auto
Parts.
This HTML code adds a new form variable (called find) whose value will either be
‘a’,‘b’,‘c’,or ‘d’.You could handle this new variable with a series of ifand elseif
statements like this:
if($find == ‘a’)
echo ‘<p>Regular customer.</p> ’;
elseif($find == ‘b’)
echo ‘<p>Customer referred by TV advert.</p> ’;
elseif($find == ‘c’)
echo ‘<p>Customer referred by phone directory.</p> ’;
elseif($find == ‘d’)
echo ‘<p>Customer referred by word of mouth.</p> ’;
else
echo ‘<p>We do not know how this customer found us.</p> ’;
Alternatively, you could write a switch statement:
switch($find)
{
case ‘a’:
echo ‘<p>Regular customer.</p> ’;
03 6728 CH01  9/2/04  1:23 PM  Page 48
49 Repeating Actions Through Iteration
break;
case ‘b’:
echo ‘<p>Customer referred by TV advert.</p> ’;
break;
case ‘c’:
echo ‘<p>Customer referred by phone directory.</p> ’;
break;
case ‘d’:
echo ‘<p>Customer referred by word of mouth.</p> ’;
break;
default :
echo ‘<p>We do not know how this customer found us.</p> ’;
break;
}
(Note that both of these examples assume you have extracted $find from the $_POST
array.)
The switch statement behaves somewhat differently from an ifor elseif statement.
An ifstatement affects only one statement unless you deliberately use curly braces to
create a block of statements.A switch statement behaves in the opposite way.When a
case statement in a switch is activated, PHP executes statements until it reaches a break
statement.Without break statements, a switch would execute all the code following the
case that was true.When a break statement is reached, the next line of code after the
switch statement is executed.
Comparing the Different Conditionals
If you are not familiar with the statements described in the preceding sections, you
might be asking,“Which one is the best?”
That is not really a question we can answer.There is nothing that you can do with
one or more else,elseif ,or switch statements that you cannot do with a set of if
statements.Y ou should try to use whichever conditional will be most readable in your
situation.Y ou will acquire a feel for which suits different situations as you gain experi-ence.
Repeating Actions Through Iteration
One thing that computers have always been very good at is automating repetitive tasks.If you need something done the same way a number of times, you can use a loop torepeat some parts of your program.
Bob wants a table displaying the freight cost that will be added to a customer’s order.
With the courier Bob uses, the cost of freight depends on the distance the parcel is
being shipped.This cost can be worked out with a simple formula.
You want the freight table to resemble the table in Figure 1.7.03 6728 CH01  9/2/04  1:23 PM  Page 49
50 Chapter 1 PHP Crash Course
Figure 1.7 This table shows the cost of freight as distance increases.
Listing 1.2 shows the HTML that displays this table.Y ou can see that it is long and
repetitive.
Listing 1.2 freight.html — HTML for Bob’s Freight Table
<html>
<body><table border= ”0”cellpadding= ”3”>
<tr>
<td bgcolor= ”#CCCCCC”align=”center”>Distance</td>
<td bgcolor= ”#CCCCCC”align=”center”>Cost</td>
</tr><tr>
<td align= ”right”>50</td>
<td align= ”right”>5</td>
</tr><tr>
<td align= ”right”>100</td>
<td align= ”right”>10</td>
</tr>
03 6728 CH01  9/2/04  1:23 PM  Page 50
51 Repeating Actions Through Iteration
<tr>
<td align= ”right”>150</td>
<td align= ”right”>15</td>
</tr><tr>
<td align= ”right”>200</td>
<td align= ”right”>20</td>
</tr><tr>
<td align= ”right”>250</td>
<td align= ”right”>25</td>
</tr></table></body>
</html>
Rather than requiring an easily bored human—who must be paid for his time—to type
the HTML, having a cheap and tireless computer do it would be helpful.Loop statements tell PHP to execute a statement or block repeatedly.
while Loops
The simplest kind of loop in PHP is the while loop. Like an ifstatement, it relies on a
condition.The difference between a while loop and an ifstatement is that an ifstate-
ment executes the following block of code once if the condition is true.A while loop
executes the block repeatedly for as long as the condition is true.
You generally use a while loop when you don’t know how many iterations will be
required to make the condition true. If you require a fixed number of iterations, consider
using a forloop.
The basic structure of a while loop is
while( condition ) expression ;
The following while loop will display the numbers from 1 to 5:
$num = 1;
while ($num <= 5 ){
echo $num. ”<br />”;
$num++;
}
At the beginning of each iteration, the condition is tested. If the condition is false ,the
block will not be executed and the loop will end.The next statement after the loop will
then be executed.Listing 1.2 Continued03 6728 CH01  9/2/04  1:23 PM  Page 51
52 Chapter 1 PHP Crash Course
You can use a while loop to do something more useful, such as display the repetitive
freight table in Figure 1.7. Listing 1.3 uses a while loop to generate the freight table.
Listing 1.3 freight.php —Generating Bob’s Freight Table with PHP
<html>
<body><table border= ”0”cellpadding= ”3”>
<tr>
<td bgcolor= ”#CCCCCC”align=”center”>Distance</td>
<td bgcolor= ”#CCCCCC”align=”center”>Cost</td>
</tr><?php$distance = 50;while ($distance <= 250 ){
echo “<tr>\n  <td align = ‘right’>$distance</td>\n ”;
echo “<td align = ‘right’>”. $distance / 10 . ”</td>\n</tr>\n ”;
$distance += 50;
}?></table></body>
</html>
To make the HTML generated by the script readable, you need to include newlines and
spaces.As already mentioned, browsers ignore this whitespace, but it is important forhuman readers.Y ou often need to look at the HTML if your output is not what youwere seeking.
In Listing 1.3, you can see 
\ninside some of the strings.When inside a double-quot-
ed string, this character sequence represents a newline character.
forand foreach Loops
The way that you used the while loops in the preceding section is very common.Y ou
set a counter to begin with. Before each iteration, you test the counter in a condition.And at the end of each iteration, you modify the counter.
You can write this style of loop in a more compact form by using a 
forloop.The
basic structure of a forloop is
for( expression1 ; condition ; expression2 )
expression3 ;
nexpression1 is executed once at the start. Here, you usually set the initial value of
a counter.03 6728 CH01  9/2/04  1:23 PM  Page 52
53 Repeating Actions Through Iteration
nThe condition expression is tested before each iteration. If the expression returns
false ,iteration stops. Here, you usually test the counter against a limit.
nexpression2 is executed at the end of each iteration. Here, you usually adjust the
value of the counter.
nexpression3 is executed once per iteration.This expression is usually a block of
code and contains the bulk of the loop code.
You can rewrite the while loop example in Listing 1.3 as a forloop. In this case, the
PHP code becomes
<?php
for($distance = 50; $distance <= 250; $distance += 50){
echo “<tr>\n  <td align = ‘right’>$distance</td>\n ”;
echo “<td align = ‘right’>”. $distance / 10 . ”</td>\n</tr>\n ”;
}?>
Both the while and forversions are functionally identical.The forloop is somewhat
more compact, saving two lines.
Both these loop types are equivalent; neither is better or worse than the other. In a
given situation, you can use whichever you find more intuitive.
As a side note, you can combine variable variables with a forloop to iterate through
a series of repetitive form fields. If, for example, you have form fields with names such as
name1 ,name2 ,name3 ,and so on, you can process them like this:
for ($i=1; $i <= $numnames; $i++)
{
$temp= “name$i”;
echo $$temp. ’<br />’; // or whatever processing you want to do
}
By dynamically creating the names of the variables, you can access each of the fields in
turn.
As well as the forloop, there is a foreach loop, designed specifically for use with
arrays.We discuss how to use it in Chapter 3.
do..while Loops
The final loop type we describe behaves slightly differently.The general structure of a
do..while statement is
do
expression ;
while( condition );03 6728 CH01  9/2/04  1:23 PM  Page 53
54 Chapter 1 PHP Crash Course
A do..while loop differs from a while loop because the condition is tested at the end.
This means that in a do..while loop, the statement or block within the loop is always
executed at least once.
Even if you consider this example in which the condition will be false at the start
and can never become true,the loop will be executed once before checking the condi-
tion and ending:
$num = 100;
do{
echo $num. ’<br />’;
}while ($num < 1 ) ;
Breaking Out of a Control Structure or Script
If you want to stop executing a piece of code, you can choose from three approaches,
depending on the effect you are trying to achieve.
If you want to stop executing a loop, you can use the break statement as previously
discussed in the section on switch .If you use the break statement in a loop, execution
of the script will continue at the next line of the script after the loop.
If you want to jump to the next loop iteration, you can instead use the continue
statement.
If you want to finish executing the entire PHP script, you can use exit.This
approach is typically useful when you are performing error checking. For example, youcould modify the earlier example as follows:
if( $totalqty == 0)
{
echo ‘You did not order anything on the previous page!<br /> ’;
exit;
}
The call to exit stops PHP from executing the remainder of the script.
Employing Alternative Control Structure Syntax
For all the control structures we have looked at, there is an alternative form of syntax. It
consists of replacing the opening brace ( {) with a colon ( :) and the closing brace with a
new keyword, which will be endif ,endswitch ,endwhile ,endfor ,or endforeach ,
depending on which control structure is being used. No alternative syntax is available for
do...while loops.03 6728 CH01  9/2/04  1:23 PM  Page 54
55 Next: Saving the Customer’s Order
For example, the code
if( $totalqty == 0)
{
echo ‘You did not order anything on the previous page!<br /> ’;
exit;
}
could be converted to this alternative syntax using the keywords ifand endif :
if( $totalqty == 0):
echo ‘You did not order anything on the previous page!<br /> ’;
exit;
endif;
Using declare
One other control structure in PHP , the declare structure, is not used as frequently in
day-to-day coding as the other constructs.The general form of this control structure is asfollows:
declare ( directive )
{// block}
This structure is used to set execution directives for the block of code—that is, rules about
how the following code is to be run. Currently, only one execution directive, called
ticks ,has been implemented.Y ou set it by inserting the directive ticks=n.It allows
you to run a specific function every nlines of code inside the code block, which is prin-
cipally useful for profiling and debugging.
The declare control structure is mentioned here only for completeness. We consider
some examples showing how to use tick functions in Chapters 24,“Using PHP and
MySQL for Large Projects,” and 25, “Debugging.”
Next: Saving the Customer’s Order
Now you know how to receive and manipulate the customer’s order. In the next chap-ter, you learn how to store the order so that it can be retrieved and fulfilled later.03 6728 CH01  9/2/04  1:23 PM  Page 55
03 6728 CH01  9/2/04  1:23 PM  Page 56
2
Storing and Retrieving Data
N OWTHAT YOU KNOW HOW TO ACCESS AND manipulate data entered in an HTML
form, you can look at ways of storing that information for later use. In most cases,including the example from the previous chapter, you’ll want to store this data and loadit later. In this case, you need to write customer orders to storage so that they can befilled later.
In this chapter, you learn how to write the customer’s order from the previous exam-
ple to a file and read it back.Y ou also learn why this isn’t always a good solution.Whenyou have large numbers of orders, you should use a database management system such as
MySQL instead.
Key topics you learn in this chapter include
nSaving data for later
nOpening a file
nCreating and writing to a file
nClosing a file
nReading from a file
nLocking files
nDeleting files
nUsing other useful file functions
nDoing it a better way: using database management systems
Saving Data for Later
You can store data in two basic ways: in flat files or in a database.
A flat file can have many formats, but in general, when we refer to a flat file ,w e  mean
a simple text file. For this chapter’s example, you will write customer orders to a text file,one order per line.04 6728 CH02  9/2/04  1:21 PM  Page 57
58 Chapter 2 Storing and Retrieving Data
Writing orders this way is very simple, but also reasonably limiting, as you’ll see later
in this chapter. If you’re dealing with information of any reasonable volume, you’ll prob-ably want to use a database instead. However, flat files have their uses, and in some situa-tions you need to know how to use them.
The processes of writing to and reading from files in PHP are virtually identical to
the ways you write and read in C. If you’ve done any C programming or Unix shellscripting, these procedures will all seem reasonably familiar to you.
Storing and Retrieving Bob’s Orders
In this chapter, you use a slightly modified version of the order form you looked at inthe preceding chapter. Begin with this form and the PHP code you wrote to process theorder data.
Note
You can find the HTML and PHP scripts used in this chapter in the chapter02/ folder of this book’s 
CD-ROM.
We’ve modified the form to include a quick way to obtain the customer’s shipping
address.Y ou can see this modified form in Figure 2.1.
Figure 2.1 This version of the order form gets the customer’s shipping
address.
04 6728 CH02  9/2/04  1:21 PM  Page 58
59 Opening a File
The form field for the shipping address is called address .This gives you a variable you
can access as $_REQUEST[ ‘address’]or $_POST[‘address’]or $_GET[‘address’],
depending on the form submission METHOD .(See Chapter 1,“PHP Crash Course,” for
details.)
In this chapter, you write each order that comes in to the same file.Then you con-
struct a web interface for Bob’s staff to view the orders that have been received.
Processing Files
Writing data to a file requires three steps:
1. Open the file. If the file doesn’t already exist, you need to create it.2. Write the data to the file.3. Close the file.
Similarly, reading data from a file takes three steps:
1. Open the file. If you cannot open the file (for example, if it doesn’t exist), you
need to recognize this and exit gracefully.
2. Read data from the file.3. Close the file.
When you want to read data from a file, you have choices about how much of the file to
read at a time.We describe each choice in detail. For now, we start at the beginning by
opening a file.
Opening a File
Toopen a file in PHP , you use the fopen() function.When you open the file, you need
to specify how you intend to use it.This is known as the file mode .
Choosing File Modes
The operating system on the server needs to know what you want to do with a file that
you are opening. It needs to know whether the file can be opened by another script
while you have it open and whether you (or the script owner) have permission to use itin that way. Essentially, file modes give the operating system a mechanism to determinehow to handle access requests from other people or scripts and a method to check thatyou have access and permission to a particular file.
You need to make three choices when opening a file:
1. Y ou might want to open a file for reading only, for writing only, or for both read-
ing and writing.
2. If writing to a file, you might want to overwrite any existing contents of a file or
append new data to the end of the file.Y ou also might like to terminate your pro-gram gracefully instead of overwriting a file if the file already exists.04 6728 CH02  9/2/04  1:21 PM  Page 59
60 Chapter 2 Storing and Retrieving Data
3. If you are trying to write to a file on a system that differentiates between binary
and text files, you might want to specify this fact.
The fopen() function supports combinations of these three options.
Using fopen() to Open a File
Assume that you want to write a customer order to Bob’s order file.Y ou can open this
file for writing with the following:
$fp = fopen( “$DOCUMENT_ROOT/../orders/orders.txt ”, ‘w’);
When fopen() is called, it expects two, three, or four parameters. Usually, you use two,
as shown in this code line.
The first parameter should be the file you want to open.Y ou can specify a path to this
file, as in the preceding code; here, the orders.txt file is in the orders directory.We
used the PHP built-in variable $_SERVER[ ‘DOCUMENT_ROOT ’]but, as with the cumber-
some full names for form variables, we assigned a shorter name.
This variable points at the base of the document tree on your web server.This code
line uses ..to mean “the parent directory of the document root directory.”This directory
is outside the document tree, for security reasons. In this case, we do not want this file tobe web accessible except through the interface that we provide.This path is called arelative path because it describes a position in the file system relative to the document root.
As with the short names given form variables, you need the following line at the start
of your script
$DOCUMENT_ROOT = $_SERVER[ ‘DOCUMENT_ROOT ’];
to copy the contents of the long-style variable to the short-style name.
Just as there are different ways to access form data, there are different ways to access
the predefined server variables. Depending on your server setup (refer to Chapter 1 fordetails), you can get at the document root through
n$_SERVER[ ‘DOCUMENT_ROOT ’]
n$DOCUMENT_ROOT
n$HTTP_SERVER_VARS[ ‘DOCUMENT_ROOT ’]
As with form data, the first style is preferred.
You could also specify an absolute path to the file.This is the path from the root direc-
tory (/on a Unix system and typically C:\on a Windows system). On our Unix server,
this path would be /home/book/orders .The problem with using this approach is that,
particularly if you are hosting your site on somebody else’s server, the absolute pathmight change.We once learned this the hard way after having to change absolute pathsin a large number of scripts when the system administrators decided to change the direc-tory structure without notice.
If no path is specified, the file will be created or looked for in the same directory as
the script itself.The directory used will vary if you are running PHP through some kindof CGI wrapper and depends on your server configuration.04 6728 CH02  9/2/04  1:21 PM  Page 60
61 Opening a File
In a Unix environment, you use forward slashes ( /) in directory paths. If you are using
a Windows platform, you can use forward ( /) or backslashes ( \). If you use backslashes,
they must be escaped (marked as a special character) for fopen() to understand them
properly.T o escape a character, you simply add an additional backslash in front of it, asshown in the following:
$fp = fopen( “$DOCUMENT_ROOT\\..\\orders\\orders.txt ”, ‘w’);
Very few people use backslashes in paths within PHP because it means the code will
work only in Windows environments. If you use forward slashes, you can often move
your code between Windows and Unix machines without alteration.
The second fopen() parameter is the file mode, which should be a string.This string
specifies what you want to do with the file. In this case, we are passing ‘w’to fopen() ;
this means “open the file for writing.”A summary of file modes is shown in Table 2.1.
Table 2.1 Summary of File Modes for fopen()
Mode Mode Name Meaning
r Read Open the file for reading, beginning from the start of the file.
r+ Read Open the file for reading and writing, beginning from the start of
the file.
w Write Open the file for writing, beginning from the start of the file. If the
file already exists, delete the existing contents. If it does not exist, tryto create it.
w+ Write Open the file for writing and reading, beginning from the start of
the file. If the file already exists, delete the existing contents. If itdoes not exist, try to create it.
x Cautious write Open the file for writing, beginning from the start of the file. If the
file already exists, it will not be opened, fopen() will return
false ,and PHP will generate a warning.
x+ Cautious write Open the file for writing and reading, beginning from the start of
the file. If the file already exists, it will not be opened, fopen() will
return false ,and PHP will generate a warning.
a Append Open the file for appending (writing) only, starting from the end of
the existing contents, if any. If it does not exist, try to create it.
a+ Append Open the file for appending (writing) and reading, starting from the
end of the existing contents, if any. If it does not exist, try to create it.
b Binary Used in conjunction with one of the other modes.Y ou might want
to use this mode if your file system differentiates between binary andtext files.Windows systems differentiate; Unix systems do not.ThePHP developers recommend you always use this option for maxi-mum portability. It is the default mode.
t Text Used in conjunction with one of the other modes.This mode is an
option only in Windows systems. It is not recommended except
before you have ported your code to work with the boption.04 6728 CH02  9/2/04  1:21 PM  Page 61
62 Chapter 2 Storing and Retrieving Data
The file mode you use in the example depends on how the system will be used.We used
‘w’,which allows only one order to be stored in the file. Each time a new order is
taken, it overwrites the previous order.This usage is probably not very sensible, so youwould better off specifying append mode (and binary mode, as recommended):
$fp = fopen( “$DOCUMENT_ROOT/../orders/orders.txt ”, ‘ab’);
The third parameter of fopen() is optional.Y ou can use it if you want to search the
include_path (set in your PHP configuration; see Appendix A,“Installing PHP5 and
MySQL5”) for a file. If you want to do this, set this parameter to 1.If you tell PHP to
search the include_path ,you do not need to provide a directory name or path:
$fp = fopen( ‘orders.txt ’, ‘ab’, true);
The fourth parameter is also optional.The fopen() function allows filenames to be pre-
fixed with a protocol (such as http:// ) and opened at a remote location. Some proto-
cols allow for an extra parameter.We look at this use of the fopen() function in the
next section of this chapter.
If fopen() opens the file successfully, a resource that is effectively a pointer to the file
is returned and should be stored in a variable—in this case, $fp.You use this variable to
access the file when you actually want to read from or write to it.
Opening Files Through FTP or HTTP
In addition to opening local files for reading and writing, you can open files via FTP ,HTTP , and other protocols using 
fopen() .You can disable this capability by turning off
the allow_url_fopen directive in the php.ini file. If you have trouble opening remote
files with fopen() ,check your php.ini file.
If the filename you use begins with ftp:// ,a passive mode FTP connection will be
opened to the server you specify and a pointer to the start of the file will be returned.
If the filename you use begins with http:// ,an HTTP connection will be opened to
the server you specify and a pointer to the response will be returned.When using HTTPmode with older versions of PHP , you must specify trailing slashes on directory names, asshown in the following:
http://www.example.com/
not
http://www.example.com
When you specify the latter form of address (without the slash), a web server normal-
ly uses an HTTP redirect to send you to the first address (with the slash).Try it in yourbrowser.04 6728 CH02  9/2/04  1:21 PM  Page 62
63 Opening a File
Prior to PHP 4.0.5, the fopen() function did not support HTTP redirects, so you
had to specify URLs that referred to directories with a trailing slash.
As of PHP 4.3.0, you can now open files over SSL as long as you have compiled or
enabled support for OpenSSL and you begin the name of the file with https:// .
Remember that the domain names in your URL are not case sensitive, but the path
and filename might be.
Addressing Problems Opening Files
An error you might make is trying to open a file you don’t have permission to read fromor write to. (This error occurs commonly on Unix-like operating systems, but you mayalso see it occasionally under Windows.) When you do, PHP gives you a warning similarto the one shown in Figure 2.2.
Figure 2.2 PHP specifically warns you when a file can’t be opened.
If you receive this error, you need to make sure that the user under which the script
runs has permission to access the file you are trying to use. Depending on how your
server is set up, the script might be running as the web server user or as the owner ofthe directory where the script is located.
04 6728 CH02  9/2/04  1:21 PM  Page 63
64 Chapter 2 Storing and Retrieving Data
On most systems, the script runs as the web server user. If your script is on a Unix
system in the ~/public_html/chapter2/ directory, for example, you could create a
world-writeable directory in which to store the order by typing the following:
mkdir ~/orders
chmod 777 ~/orders
Bear in mind that directories and files that anybody can write to are dangerous. In par-
ticular, directories that are accessible directly from the Web should not be writeable. Forthis reason, our 
orders directory is two subdirectories back, above the public_html
directory.We discuss security more in Chapter 15,“E-commerce Security Issues.”
Incorrect permission setting is probably the most common thing that can go wrong
when opening a file, but it’s not the only thing. If you can’t open the file, you really needto know this so that you don’t try to read data from or write data to it.
If the call to 
fopen() fails, the function will return false .You can deal with the
error in a more user-friendly way by suppressing PHP’s error message and giving yourown:
@ $fp = fopen( “$DOCUMENT_ROOT/../orders/orders.txt ”, ‘ab’);
if (!$fp){
echo ‘<p><strong> Your order could not be processed at this time.  ‘
.’Please try again later.</strong></p></body></html> ’;
exit;
} 
The @symbol in front of the call to fopen() tells PHP to suppress any errors resulting
from the function call. Usually, it’s a good idea to know when things go wrong, but inthis case we’re going to deal with that problem elsewhere.
You can also write this line as follows:
$fp = @fopen( “$DOCUMENT_ROOT/../orders/orders.txt ”, ‘a’);
Using this method tends to make it less obvious that you are using the error suppression
operator, so it may make your code harder to debug.
The method described here is a simplistic way of dealing with errors.We look at a
more elegant method for error handling in Chapter 7,“Exception Handling.” But onething at a time.
The 
ifstatement tests the variable $fpto see whether a valid file pointer was
returned from the fopen call; if not, it prints an error message and ends script execution.
Because the page finishes here, notice that we have closed the HTML tags to give rea-sonably valid HTML.
The output when using this approach is shown in Figure 2.3.04 6728 CH02  9/2/04  1:21 PM  Page 64
65 Writing to a File
Figure 2.3 Using your own error messages instead of PHP’s can be more
user friendly.
Writing to a File
Writing to a file in PHP is relatively simple.Y ou can use either of the functions
fwrite() (file write) or fputs() (file put string); fputs() is an alias to fwrite() .Y ou
call fwrite() in the following way:
fwrite($fp, $outputstring);
This function call tells PHP to write the string stored in $outputstring to the file
pointed to by $fp.
One new alternative to fwrite() is the file_put_contents() function. It has the
following prototype:
int file_put_contents ( string filename , 
string data
[, int flags
[, resource context]])
This function writes the string contained in data to the file named in filename with-
out any need for an fopen() (or fclose() ) function call. This function is new in
PHP5, and is a matched pair for file_get_contents() ,which we discuss shortly.Y ou
most commonly use the flags and context optional parameters when writing to
remote files using, for example, HTTP or FTP . (We discuss these function in Chapter 19,
“Using Network and Protocol Functions.”)
04 6728 CH02  9/2/04  1:21 PM  Page 65
66 Chapter 2 Storing and Retrieving Data
Parameters for fwrite()
The function fwrite() actually takes three parameters, but the third one is optional.The
prototype for fwrite() is
int fwrite ( resource handle, string string[, int length])
The third parameter, length ,is the maximum number of bytes to write. If this parame-
ter is supplied, fwrite() will write string to the file pointed to by handle until it
reaches the end of string or has written length bytes, whichever comes first.
You can obtain the string length by using PHP’s built-in strlen() function, as follows:
fwrite($fp, $outputstring, strlen($outputstring));
You may want to use this third parameter when writing in binary mode because it helps
avoid some cross-platform compatibility issues.
File Formats
When you are creating a data file like the one in the example, the format in which you
store the data is completely up to you. (However, if you are planning to use the data filein another application, you may have to follow that application’s rules.)
Now construct a string that represents one record in the data file.Y ou can do this as
follows:
$outputstring = $date. ”\t”.$tireqty. ”tires \t ”.$oilqty. ”oil\t”
.$sparkqty. ”spark plugs\t\$ ”.$totalamount
.”\t”. $address. ”\n”;
In this simple example, you store each order record on a separate line in the file.Writing
one record per line gives you a simple record separator in the newline character. Becausenewlines are invisible, you can represent them with the control sequence 
“\n”.
Throughout the book, we write the data fields in the same order every time and sep-
arate fields with a tab character.Again, because a tab character is invisible, it is represent-ed by the control sequence 
“\t”.You may choose any sensible delimiter that is easy to
read back.
The separator or delimiter character should be something that will certainly not
occur in the input, or you should process the input to remove or escape out anyinstances of the delimiter.We look at processing the input in Chapter 4,“StringManipulation and Regular Expressions.” For now, you can assume that nobody will placea tab into the order form. It is difficult, but not impossible, for a user to put a tab ornewline into a single-line HTML input field.
Using a special field separator allows you to split the data back into separate variables
more easily when you read the data back.We cover this topic in Chapter 3,“UsingArrays,” and Chapter 4. Here, we treat each order as a single string.
After a few orders are processed, the contents of the file look something like the
example shown in Listing 2.1.04 6728 CH02  9/2/04  1:21 PM  Page 66
67 Closing a File
Listing 2.1 orders.txt —Example of What the Orders File Might Contain
20:30, 31st March  4 tires   1 oil  6 spark plugs  $434.00  22 Short St, Smalltown
20:42, 31st March  1 tires   0 oil  0 spark plugs  $100.00  33 Main Rd, Newtown20:43, 31st March  0 tires   1 oil  4 spark plugs  $26.00  127 Acacia St,
Springfield
Closing a File
After you’ve finished using a file, you need to close it.Y ou should do this by using the
fclose() function as follows:
fclose($fp);
This function returns true if the file was successfully closed or false if it wasn’t.This
process is much less likely to go wrong than opening a file in the first place, so in thiscase we’ve chosen not to test it.
The complete listing for the final version of 
processorder.php is shown in 
Listing 2.2.
Listing 2.2 processorder.php —Final Version of the Order Processing Script
<?php
// create short variable names$tireqty = $_POST[ ‘tireqty’];
$oilqty = $_POST[ ‘oilqty’];
$sparkqty = $_POST[ ‘sparkqty ’];
$address = $_POST[ ‘address’];
$DOCUMENT_ROOT = $_SERVER[ ‘DOCUMENT_ROOT ’];
?><html><head>
<title>Bob ’s Auto Parts - Order Results</title>
</head><body><h1>Bob’s Auto Parts</h1>
<h2>Order Results</h2><?php$date = date( ‘H:i, jS F ’);
echo ‘<p>Order processed at ‘;
echo $date;echo ‘</p>’;04 6728 CH02  9/2/04  1:21 PM  Page 67
68 Chapter 2 Storing and Retrieving Data
echo ‘<p>Your order is as follows: </p> ’;
$totalqty = 0;
$totalqty = $tireqty + $oilqty + $sparkqty;echo ‘Items ordered: ‘.$totalqty. ’<br />’;
if( $totalqty == 0)
{
echo ‘You did not order anything on the previous page!<br /> ’;
}else{
if ( $tireqty>0 )
echo $tireqty. ’tires<br /> ’;
if ( $oilqty>0 )
echo $oilqty. ’bottles of oil<br /> ’;
if ( $sparkqty>0 )
echo $sparkqty. ’spark plugs<br /> ’;
}
$totalamount = 0.00;define(‘TIREPRICE ’, 100);
define(‘OILPRICE ’, 10);
define(‘SPARKPRICE ’, 4);
$totalamount = $tireqty * TIREPRICE
+ $oilqty * OILPRICE+ $sparkqty * SPARKPRICE;
$totalamount=number_format($totalamount, 2, ‘.’, ‘‘);
echo ‘<p>Total of order is ‘.$totalamount. ’</p>’;
echo ‘<p>Address to ship to is ‘.$address. ’</p>’;
$outputstring = $date. ”\t”.$tireqty. ”tires \t ”.$oilqty. ”oil\t”
.$sparkqty. ”spark plugs\t\$ ”.$totalamount
.”\t”. $address. ”\n”;
// open file for appending
@ $fp = fopen( “$DOCUMENT_ROOT/../orders/orders.txt ”, ‘ab’);Listing 2.2 Continued04 6728 CH02  9/2/04  1:21 PM  Page 68
69 Reading from a File
if (!$fp)
{
echo ‘<p><strong> Your order could not be processed at this time.  ‘
.’Please try again later.</strong></p></body></html> ’;
exit;
} 
fwrite($fp, $outputstring, strlen($outputstring));
fclose($fp);
echo ‘<p>Order written.</p> ’; 
?></body>
</html>
Reading from a File
Right now, Bob’s customers can leave their orders via the Web, but if Bob’s staff mem-
bers want to look at the orders, they have to open the files themselves.
Let’s create a web interface to let Bob’s staff read the files easily.The code for this
interface is shown in Listing 2.3.
Listing 2.3 vieworders.php —Staff Interface to the Orders File
<?php
//create short variable name$DOCUMENT_ROOT = $HTTP_SERVER_VARS[ ‘DOCUMENT_ROOT ’];
?><html><head>
<title>Bob ’s Auto Parts - Customer Orders</title>
</head><body><h1>Bob’s Auto Parts</h1>
<h2>Customer Orders</h2><?php@  $fp = fopen( “$DOCUMENT_ROOT/../orders/orders.txt ”, ‘r’);
if (!$fp)
{
echo ‘<p><strong>No orders pending. ’
.’Please try again later.</strong></p></body></html> ’;
exit;
}Listing 2.2 Continued04 6728 CH02  9/2/04  1:21 PM  Page 69
70 Chapter 2 Storing and Retrieving Data
while (!feof($fp))
{
$order= fgets($fp, 999);echo $order. ’<br>’;
}
fclose($fp);
?></body>
</html>
This script follows the sequence we described earlier: open the file, read from the file,
close the file.The output from this script using the data file from Listing 2.1 is shown inFigure 2.4.Listing 2.3 Continued
Figure 2.4 The vieworders.php script displays all the orders currently in
the orders.txt file in the browser window.
Let’s look at the functions in this script in detail.
Opening a File for Reading: fopen()
Again, you open the file by using fopen() .In this case, you open the file for reading
only, so you use the file mode ‘rb’:
$fp = fopen( “$DOCUMENT_ROOT/../orders/orders.txt ”, ‘rb’);
04 6728 CH02  9/2/04  1:21 PM  Page 70
71 Reading from a File
Knowing When to Stop: feof()
In this example, you use a while loop to read from the file until the end of the file is
reached.The while loop tests for the end of the file using the feof() function:
while (!feof($fp))
The feof() function takes a file handle as its single parameter. It returns true if the file
pointer is at the end of the file.Although the name might seem strange, you can remem-ber it easily if you know that 
feof stands for File End Of File.
In this case (and generally when reading from a file), you read from the file until EOF
is reached.
Reading a Line at a Time: fgets() ,fgetss() ,and
fgetcsv()
In this example, you use the fgets() function to read from the file:
$order= fgets($fp, 999);
This function reads one line at a time from a file. In this case, it reads until it encounters
a newline character ( \n), encounters an EOF,or has read 998 bytes from the file.The
maximum length read is the length specified minus 1 byte.
You can use many different functions to read from files.The fgets() function, for
example, is useful when you’re dealing with files that contain plain text that you want todeal with in chunks.
An interesting variation on 
fgets() is fgetss() ,which has the following prototype:
string fgetss(resource fp, int length, string [ allowable_tags ]);
This function is similar to fgets() except that it strips out any PHP and HTML tags
found in the string. If you want to leave in any particular tags, you can include them inthe 
allowable_tags string.Y ou would use fgetss() for safety when reading a file writ-
ten by somebody else or one containing user input.Allowing unrestricted HTML codein the file could mess up your carefully planned formatting.Allowing unrestricted PHPcould give a malicious user almost free rein on your server.
The function 
fgetcsv() is another variation on fgets() .It has the following proto-
type:
array fgetcsv ( resource fp, int length[, string delimiter
[, string enclosure ]])
This function breaks up lines of files when you have used a delimiting character, such as
the tab character (as we suggested earlier) or a comma (as commonly used by spread-sheets and other applications). If you want to reconstruct the variables from the orderseparately rather than as a line of text,
fgetcsv() allows you to do this simply.Y ou call it
in much the same way as you would call fgets() ,but you pass it the delimiter you used
to separate fields. For example,
$order = fgetcsv($fp, 100, “\t”);04 6728 CH02  9/2/04  1:21 PM  Page 71
72 Chapter 2 Storing and Retrieving Data
This code would retrieve a line from the file and break it up wherever a tab ( \t) was
encountered.The results are returned in an array ( $order in this code example).We
cover arrays in more detail in Chapter 3.
The length parameter should be greater than the length in characters of the longest
line in the file you are trying to read.
The enclosure parameter specifies what each field in a line is surrounded by. If not
specified, it defaults to “(a double quotation mark).
Reading the Whole File: readfile() ,fpassthru() ,and
file()
Instead of reading from a file a line at a time, you can read the whole file in one go.
There are four different ways you can do this.
The first uses readfile() .You can replace the entire script you wrote previously
with one line:
readfile( “$DOCUMENT_ROOT/../orders/orders.txt ”);
A call to the readfile() function opens the file, echoes the content to standard output
(the browser), and then closes the file.The prototype for readfile() is
int readfile(string filename , [int use_include_path [, resource context]] );
The optional second parameter specifies whether PHP should look for the file in the
include_path and operates the same way as in fopen() .The optional context parame-
ter is used only when files are opened remotely via, for example, HTTP; we cover suchusage in more detail in Chapter 19.The function returns the total number of bytes readfrom the file.
Second, you can use 
fpassthru() .To do so, you need to open the file using fopen()
first.Y ou can then pass the file pointer as an argument to fpassthru() ,which dumps
the contents of the file from the pointer’s position onward to standard output. It closesthe file when it is finished.
You can replace the previous script with 
fpassthru() as follows:
$fp = fopen( “$DOCUMENT_ROOT/../orders/orders.txt ”, ‘rb’);
fpassthru($fp);
The function fpassthru() returns true if the read is successful and false otherwise.
The third option for reading the whole file is using the file() function.This func-
tion is identical to readfile() except that instead of echoing the file to standard out-
put, it turns it into an array.We cover this function in more detail when we look atarrays in Chapter 3. Just for reference, you would call it using
$filearray = file($DOCUMENT_ROOT/../orders/orders.txt ”);04 6728 CH02  9/2/04  1:21 PM  Page 72
73 Reading from a File
This line reads the entire file into the array called $filearray .Each line of the file is
stored in a separate element of the array. Note that this function is not binary safe.
Finally, as of PHP 4.3.0, you can use the file_get_contents() function.This func-
tion is identical to readfile() except that it returns the content of the file as a string
instead of outputting it to the browser.The advantage of this new function is that it isbinary safe, unlike the 
file() function.
Reading a Character: fgetc()
Another option for file processing is to read a single character at a time from a file.Y ou
can do this by using the fgetc() function. It takes a file pointer as its only parameter
and returns the next character in the file.Y ou can replace the while loop in the original
script with one that uses fgetc() ,as follows:
while (!feof($fp))
{
$char = fgetc($fp);if (!feof($fp))
echo ($char== ”\n”? ‘<br />’: $char);
}
This code reads a single character at a time from the file using fgetc() and stores it in
$char ,until the end of the file is reached. It then does a little processing to replace the
text end-of-line characters ( \n) with HTML line breaks ( <br /> ).
This is just to clean up the formatting. If you try to output the file with newlines
between records, the whole file will be printed on a single line. (Try it and see.) Webbrowsers do not render whitespace, such as newlines, so you need to replace them withHTML linebreaks (
<br /> ) instead.Y ou can use the ternary operator to do this neatly.
A minor side effect of using fgetc() instead of fgets() is that fgetc() returns the
EOFcharacter, whereas fgets() does not.Y ou need to test feof() again after you’ve read
the character because you don’t want to echo the EOFto the browser.
Reading a file character by character is not generally sensible or efficient unless for
some reason you want to process it character by character.
Reading an Arbitrary Length: fread()
The final way you can read from a file is to use the fread() function to read an arbi-
trary number of bytes from the file.This function has the following prototype:
string fread(resource fp, int length);
It reads up to length bytes,to the end of the file or network packet, whichever comes
first.04 6728 CH02  9/2/04  1:21 PM  Page 73
74 Chapter 2 Storing and Retrieving Data
Using Other Useful File Functions
Numerous other file functions are useful from time to time. Some are described next.
Checking Whether a File Is There: file_exists()
If you want to check whether a file exists without actually opening it, you can use
file_exists() ,as follows:
if (file_exists( “$DOCUMENT_ROOT/../orders/orders.txt ”))
echo ‘There are orders waiting to be processed. ’;
else
echo ‘There are currently no orders. ’;
Determining How Big a File Is: filesize()
You can check the size of a file by using the filesize() function:
echo filesize( “$DOCUMENT_ROOT/../orders/orders.txt ”);
It returns the size of a file in bytes and can be used in conjunction with fread() to read
a whole file (or some fraction of the file) at a time.Y ou can even replace the entire origi-nal script with the following:
$fp = fopen( “$DOCUMENT_ROOT/../orders/orders.txt ”, ‘rb’);
echo nl2br(fread( $fp, filesize( “$DOCUMENT_ROOT/../orders/orders.txt ”)));
fclose( $fp ); 
The nl2br() function converts the \ncharacters in the output to HTML line breaks
(<br /> ).
Deleting a File: unlink()
If you want to delete the order file after the orders have been processed, you can do so
by using unlink() .(There is no function called delete.) For example,
unlink(“$DOCUMENT_ROOT/../orders/orders.txt ”);
This function returns false if the file could not be deleted.This situation typically
occurs if the permissions on the file are insufficient or if the file does not exist.
Navigating Inside a File: rewind() ,fseek() ,and ftell()
Youcan manipulate and discover the position of the file pointer inside a file by using
rewind() ,fseek() ,and ftell() .
The rewind() function resets the file pointer to the beginning of the file.The
ftell() function reports how far into the file the pointer is in bytes. For example, you
can add the following lines to the bottom of the original script (before the fclose()
command):04 6728 CH02  9/2/04  1:21 PM  Page 74
75 Using Other Useful File Functions
echo ‘Final position of the file pointer is ‘.(ftell($fp));
echo ‘<br />’;
rewind($fp);echo ‘After rewind, the position is ‘.(ftell($fp));
echo ‘<br />’;
The output in the browser should be similar to that shown in Figure 2.5.
Figure 2.5 After reading the orders, the file pointer points to the end of the
file, an offset of 234 bytes.The call to rewind sets it back to position 0, the
start of the file.
You can use the function fseek() to set the file pointer to some point within the file.
Its prototype is
int fseek ( resource fp, int offset[, int whence])
A call to fseek() sets the file pointer fpat a point starting from whence and moving
offset bytes into the file.The optional whence parameter defaults to the value
SEEK_SET ,which is effectively the start of the file.The other possible values are
SEEK_CUR (the current location of the file pointer) and SEEK_END (the end of the file).
The rewind() function is equivalent to calling the fseek() function with an offset
of zero. For example, you can use fseek() to find the middle record in a file or to per-
form a binary search. Often, if you reach the level of complexity in a data file where youneed to do these kinds of things, your life will be much easier if you use a database.
04 6728 CH02  9/2/04  1:21 PM  Page 75
76 Chapter 2 Storing and Retrieving Data
Locking Files
Imagine a situation in which two customers are trying to order a product at the same
time. (This situation is not uncommon, especially when your website starts to get anykind of traffic volume.) What if one customer calls 
fopen() and begins writing, and then
the other customer calls fopen() and also begins writing? What will be the final con-
tents of the file? Will it be the first order followed by the second order, or vice versa?Will it be one order or the other? Or will it be something less useful, such as the two
orders interleaved somehow? The answer depends on your operating system but is oftenimpossible to know.
To avoid problems like this, you can use file locking.Y ou use this feature in PHP by
using the 
flock() function.This function should be called after a file has been opened
but before any data is read from or written to the file.
The prototype for flock() is
bool flock (resource fp, int operation [, int & wouldblock ])
You need to pass it a pointer to an open file and a constant representing the kind of lock
you require. It returns true if the lock was successfully acquired and false if it was not.
The optional third parameter will contain the value true if acquiring the lock wouldcause the current process to block (that is, have to wait).
The possible values for 
operation are shown in Table 2.2.The possible values
changed at PHP 4.0.1, so both sets of values are shown in the table.
Table 2.2flock() Operation Values
Value of Operation Meaning
LOCK_SH (formerly 1) Reading lock.The file can be shared with other readers.
LOCK_EX (formerly 2)W riting lock.This operation is exclusive; the file cannot be shared.
LOCK_UN (formerly 3) The existing lock is released.
LOCK_NB (formerly 4) Blocking is prevented while you are trying to acquire a lock.
If you are going to use flock() ,you need to add it to all the scripts that use the file;
otherwise, it is worthless.
Note that flock() does not work with NFS or other networked file systems. It also
does not work with older file systems that do not support locking, such as FAT. Onsome operating systems, it is implemented at the process level and does not work cor-rectly if you are using a multithreaded server API.
To use it with the order example, you can alter 
processorder.php as follows:
$fp = fopen( “$DOCUMENT_ROOT/../orders/orders.txt ”, ‘ab’);
flock($fp, LOCK_EX); // lock the file for writingfwrite($fp, $outputstring);flock($fp, LOCK_UN);  // release write lockfclose($fp);04 6728 CH02  9/2/04  1:21 PM  Page 76
77 Doing It a Better Way: Database Management Systems
You should also add locks to vieworders.php :
$fp = fopen( “$DOCUMENT_ROOT /../orders/orders.txt ”, ‘r’);
flock($fp, LOCK_SH);  // lock file for reading// read from the fileflock($fp, LOCK_UN);  // release read lockfclose($fp);
The code is now more robust but still not perfect.What if two scripts tried to acquire a
lock at the same time? This would result in a race condition, in which the processescompete for locks but it is uncertain which will succeed. Such a condition could causemore problems.Y ou can do better by using a database management system (DBMS).
Doing It a Better Way: Database Management
Systems
So far, all the examples we have looked at use flat files. In the next part of this book, we
look at how to use MySQL, a relational database management system (RDBMS),instead.Y ou might ask,“Why would I bother?”
Problems with Using Flat Files
There are a number of problems in working with flat files:
nWhen a file grows large, working with it can be very slow.
nSearching for a particular record or group of records in a flat file is difficult. If therecords are in order, you can use some kind of binary search in conjunction with a
fixed-width record to search on a key field. If you want to find patterns of infor-mation (for example, you want to find all the customers who live in Smalltown),you would have to read in each record and check it individually.
nDealing with concurrent access can become problematic.Y ou have seen how to
lock files, but locking can cause the race condition we discussed earlier. It can alsocause a bottleneck.With enough traffic on a site, a large group of users may bewaiting for the file to be unlocked before they can place their order. If the wait is
too long, people will go elsewhere to buy.
nAll the file processing you have seen so far deals with a file using sequential pro-cessing; that is, you start from the beginning of the file and read through to theend. Inserting records into or deleting records from the middle of the file (randomaccess) can be difficult because you end up reading the whole file into memory,making the changes, and writing the whole file out again.With a large data file,having to go through all these steps becomes a significant overhead.
nBeyond the limits offered by file permissions, there is no easy way of enforcing dif-ferent levels of access to data.04 6728 CH02  9/2/04  1:21 PM  Page 77
78 Chapter 2 Storing and Retrieving Data
How RDBMSs Solve These Problems
Relational database management systems address all these issues:
nRDBMSs can provide much faster access to data than flat files.And MySQL, the
database system we use in this book, has some of the fastest benchmarks of anyRDBMS.
nRDBMSs can be easily queried to extract sets of data that fit certain criteria.
nRDBMSs have built-in mechanisms for dealing with concurrent access so thatyou, as a programmer, don’t have to worry about it.
nRDBMSs provide random access to your data.
nRDBMSs have built-in privilege systems. MySQL has particular strengths in this
area.
Probably the main reason for using an RDBMS is that all (or at least most) of the func-
tionality that you want in a data storage system has already been implemented. Sure, youcould write your own library of PHP functions, but why reinvent the wheel?
In Part II of this book,“Using MySQL,” we discuss how relational databases work
generally, and specifically how you can set up and use MySQL to create database-backedwebsites.
If you are building a simple system and don’t feel you need a full-featured database
but want to avoid the locking and other issues associated with using a flat file, you may
want to consider using PHP’s new SQLite extension.This extension provides essentially
an SQL interface to a flat file. In this book, we focus on using MySQL, but if you wouldlike more information about SQLite, you can find it at http://sqlite.org/ andhttp://www.php.net/sqlite.
Further Reading
For more information on interacting with the file system, you can go straight to Chap-
ter 18,“Interacting with the File System and the Server.” In that part of the book, wetalk about how to change permissions, ownership, and names of files; how to work withdirectories; and how to interact with the file system environment.
You may also want to read through the file system section of the PHP online manual
at http://www.php.net/filesystem.
Next
In the next chapter, you learn what arrays are and how they can be used for processingdata in your PHP scripts.04 6728 CH02  9/2/04  1:21 PM  Page 78
3
Using Arrays
THIS CHAPTER SHOWS YOU HOW TO USE AN important programming construct: arrays.
The variables used in the previous chapters were scalar variables, which store a single
value.An arrayis a variable that stores a set or sequence of values. One array can have
many elements, and each element can hold a single value, such as text or numbers, oranother array.An array containing other arrays is known as a multidimensional array .
PHP supports both numerically indexed and associative arrays.Y ou are probably
familiar with numerically indexed arrays if you’ve used any programming language, but
unless you use PHP or Perl, you might not have seen associative arrays before.Associativearrays allow you to use more useful values as the index. Rather than each element hav-ing a numeric index, it can have words or other meaningful information.
In this chapter, you continue developing the Bob’s Auto Parts example using arrays to
work more easily with repetitive information such as customer orders. Likewise, you
write shorter, tidier code to do some of the things you did with files in the precedingchapter.
Key topics covered in this chapter include
nNumerically indexed arrays
nNon-numerically indexed arrays
nArray operators
nMultidimensional arrays
nArray sorting
nArray functions
What Is an Array?
You learned about scalar variables in Chapter 1,“PHP Crash Course.”A scalar variable is
a named location in which to store a value; similarly, an array is a named place to store asetof values, thereby allowing you to group scalars.05 6728 CH03  9/2/04  1:16 PM  Page 79
80 Chapter 3 Using Arrays
Bob’s product list is the array for the example used in this chapter. In Figure 3.1, you
can see a list of three products stored in an array format.These three products are storedin a single variable called 
$products .(We describe how to create a variable like this
shortly.)
Figure 3.1 Bob’s products can be stored in an array.
After you have the information as an array, you can do a number of useful things with it.
Using the looping constructs from Chapter 1, you can save work by performing thesame actions on each value in the array.The whole set of information can be movedaround as a single unit.This way, with a single line of code, all the values in the array canbe passed to a function. For example, you might want to sort the products alphabetically.To achieve this, you could pass the entire array to PHP’s 
sort() function.
The values stored in an array are called the array elements .Each array element has an
associated index (also called a key) that is used to access the element.Arrays in most pro-
gramming languages have numerical indices that typically start from zero or one.
PHP allows you to use numbers or strings as the array indices.Y ou can use arrays in
the traditional numerically indexed way or set the keys to be whatever you like to makethe indexing more meaningful and useful. (This approach may be familiar to you if youhave used associative arrays or maps in other programming languages.) The programmingapproach may vary a little depending on whether you are using standard numericallyindexed arrays or more interesting index values.
We begin by looking at numerically indexed arrays and then move on to using user-
defined keys.
Numerically Indexed Arrays
Numerically indexed arrays are supported in most programming languages. In PHP , theindices start at zero by default, although you can alter this value.
Initializing Numerically Indexed Arrays
To create the array shown in Figure 3.1, use the following line of PHP code:
$products = array( ‘Tires’, ‘Oil’, ‘Spark Plugs ’);productTires Oil Spark Plugs05 6728 CH03  9/2/04  1:16 PM  Page 80
81 Numerically Indexed Arrays
This code creates an array called $products containing the three values given: ‘Tires’,
‘Oil’,and ‘Spark Plugs ’.Note that, like echo,array() is actually a language con-
struct rather than a function.
Depending on the contents you need in your array, you might not need to manually
initialize them as in the preceding example. If you have the data you need in anotherarray, you can simply copy one array to another using the 
=operator.
If you want an ascending sequence of numbers stored in an array, you can use the
range() function to automatically create the array for you.The following statement cre-
ates an array called numbers with elements ranging from 1 to 10:
$numbers = range(1,10);
The range() function has an optional third parameter that allows you to set the step
size between values. For instance, if you want an array of the odd numbers between 1and 10, you could create it as follows:
$odds = range(1, 10, 2);
The range() function can also be used with characters, as in this example:
$letters = range( ‘a’, ‘z’);
If you have information stored in a file on disk, you can load the array contents directly
from the file.We look at this topic later in this chapter under the heading “LoadingArrays from Files.”
If you have the data for your array stored in a database, you can load the array con-
tents directly from the database.This process is covered in Chapter 11,“Accessing Y ourMySQL Database from the Web with PHP .”
You can also use various functions to extract part of an array or to reorder an array.
We look at some of these functions later in this chapter under the heading “Performing
Other Array Manipulations.”
Accessing Array Contents
To access the contents of a variable, you use its name. If the variable is an array, you
access the contents using the variable name and a key or index.The key or index indi-cates which of the values in the array you access.The index is placed in square bracketsafter the name.
Type 
$products[0] ,$products[1] ,and $products[2] to use the contents of the
$products array.
By default, element zero is the first element in the array.The same numbering scheme
is used in C, C++, Java, and a number of other languages, but it might take some gettingused to if you are not familiar with it.05 6728 CH03  9/2/04  1:16 PM  Page 81
82 Chapter 3 Using Arrays
As with other variables, you change array elements’ contents by using the =operator.
The following line replaces the first element in the array ‘Tires’with ‘Fuses’:
$products[0] = ‘Fuses’;
You can use the following line to add a new element— ’Fuses’—to the end of the
array, giving a total of four elements:
$products[3] = ‘Fuses’;
To display the contents, you could type this line:
echo “$products[0] $products[1] $products[2] $products[3] ”;
Note that although PHP’s string parsing is pretty clever, you can confuse it. If you are
having trouble with array or other variables not being interpreted correctly whenembedded in a double-quoted string, you can either put them outside quotes or look upcomplex syntax in Chapter 4,“String Manipulation and Regular Expressions.”The pre-ceding 
echo statement works correctly, but in many of the more complex examples later
in this chapter, you will notice that the variables are outside the quoted strings.
Like other PHP variables, arrays do not need to be initialized or created in advance.
They are automatically created the first time you use them.
The following code creates the same $products array created previously with the
array() statement:
$products[0] = ‘Tires’;
$products[1] = ‘Oil’;
$products[2] = ‘Spark Plugs ’;
If $products does not already exist, the first line will create a new array with just one
element.The subsequent lines add values to the array.The array is dynamically resized asyou add elements to it.This resizing capability is not present in most other programming
languages.
Using Loops to Access the Array
Because the array is indexed by a sequence of numbers, you can use a forloop to more
easily display its contents:
for ( $i = 0; $i<3; $i++ )
echo “$products[$i] “;
This loop provides similar output to the preceding code but requires less typing than man-
ually writing code to work with each element in a large array.The ability to use a simpleloop to access each element is a nice feature of arrays.Y ou can also use the 
foreach loop,
specially designed for use with arrays. In this example, you could use it as follows:
foreach ($products as $current)
echo $current. ’‘;
This code stores each element in turn in the variable $current and prints it out.05 6728 CH03  9/2/04  1:16 PM  Page 82
83 Arrays with Different Indices
Arrays with Different Indices
In the $products array, you allowed PHP to give each item the default index.This meant
that the first item you added became item 0; the second, item 1; and so on. PHP also sup-ports arrays in which you can associate any key or index you want with each value.
Initializing an Array
The following code creates an array with product names as keys and prices as values:
$prices = array( ‘Tires’=>100, ‘Oil’=>10, ‘Spark Plugs ’=>4 );
The symbol between the keys and values is simply an equal sign immediately followed
by a greater than symbol.
Accessing the Array Elements
Again, you access the contents using the variable name and a key, so you can access the
information stored in the prices array as $prices[ ‘Tires’],$prices[ ‘Oil’],
and $prices[ ‘Spark Plugs ’].
The following code creates the same $prices array. Instead of creating an array with
three elements, this version creates an array with only one element and then adds twomore:
$prices = array( ‘Tires’=>100 );
$prices[ ‘Oil’] = 10;
$prices[ ‘Spark Plugs ’] = 4;
Here is another slightly different but equivalent piece of code. In this version, you do not
explicitly create an array at all.The array is created for you when you add the first ele-ment to it:
$prices[ ‘Tires’] = 100;
$prices[ ‘Oil’] = 10;
$prices[ ‘Spark Plugs ’] = 4;
Using Loops
Because the indices in an array are not numbers, you cannot use a simple counter in a
forloop to work with the array. However, you can use the foreach loop or the list()
and each() constructs.
The foreach loop has a slightly different structure when using associative arrays.Y ou
can use it exactly as you did in the previous example, or you can incorporate the keys aswell:
foreach ($prices as $key => $value)
echo $key. ’=>’.$value. ’<br />’;05 6728 CH03  9/2/04  1:16 PM  Page 83
84 Chapter 3 Using Arrays
The following code lists the contents of the $prices array using the each() construct:
while( $element = each( $prices ) )
{
echo $element[ ‘key’];
echo ‘- ‘;
echo $element[ ‘value’];
echo ‘<br />’;
}
The output of this script fragment is shown in Figure 3.2.
Figure 3.2 An each() statement can be used to loop through arrays.
In Chapter 1, you looked at while loops and the echo statement.The preceding code
uses the each() function, which you have not used before.This function returns the
current element in an array and makes the next element the current one. Because youare calling 
each() within a while loop, it returns every element in the array in turn and
stops when the end of the array is reached.
In this code, the variable $element is an array.When you call each() ,it gives you 
an array with four values and the four indices to the array locations.The locations key
and 0contain the key of the current element, and the locations value and 1contain the
value of the current element.Although the one you choose makes no difference, we
chose to use the named locations rather than the numbered ones.
05 6728 CH03  9/2/04  1:16 PM  Page 84
85 Array Operators
There is a more elegant and more common way of doing the same thing.The con-
struct list() can be used to split an array into a number of values.Y ou can separate two
of the values that the each() function gives you like this:
list( $product, $price ) = each( $prices );
This line uses each() to take the current element from $prices ,return it as an array,
and make the next element current. It also uses list() to turn the 0and 1elements
from the array returned by each() into two new variables called $product and $price .
You can loop through the entire $prices array, echoing the contents using this short
script:
while ( list( $product, $price ) = each( $prices ) )
echo “$product - $price<br /> ”;
It has the same output as the previous script but is easier to read because list() allows
you to assign names to the variables.
When you are using each() ,note that the array keeps track of the current element. If
you want to use the array twice in the same script, you need to set the current element
back to the start of the array using the function reset() .To loop through the prices
array again, you type the following:
reset($prices);
while ( list( $product, $price ) = each( $prices ) )
echo “$product - $price<br /> ”;
This code sets the current element back to the start of the array and allows you to go
through again.
Array Operators
One set of special operators applies only to arrays. Most of them have an analogue in thescalar operators, as you can see by looking at Table 3.1.
Table 3.1 PHP’s Array Operators
Operator Name Example Result
+ Union $a + $b Union of $aand $b.The array $bis appended
to $a,but any key clashes are not added.
== Equality $a == $b True if $aand $b contain the same elements.
=== Identity $a === $b True if $aand $bcontain the same elements in
the same order.
!= Inequality $a != $b True if $aand $bdo not contain the same 
elements.
<> Inequality $a <> $b Same as !=.
!== Non-identity $a !== $b True if $aand $bdo not contain the same 
elements in the same order.05 6728 CH03  9/2/04  1:16 PM  Page 85
86 Chapter 3 Using Arrays
These operators are mostly fairly self-evident, but union requires some further explana-
tion.The union operator tries to add the elements of $bto the end of $a.If elements in
$bhave the same keys as some elements already in $a,they will not be added.That is, no
elements of $awill be overwritten.
You will notice that the array operators in Table 3.1 all have equivalent operators that
work on scalar variables.As long as you remember that +performs addition on scalar
types and union on arrays—even if you have no interest in the set arithmetic behind thatbehavior—the behaviors should make sense.Y ou cannot usefully compare arrays to scalartypes.
Multidimensional Arrays
Arrays do not have to be a simple list of keys and values; each location in the array canhold another array.This way, you can create a two-dimensional array.Y ou can think of atwo-dimensional array as a matrix, or grid, with width and height or rows and columns.
If you want to store more than one piece of data about each of Bob’s products, you
could use a two-dimensional array. Figure 3.3 shows Bob’s products represented as atwo-dimensional array with each row representing an individual product and each col-umn representing a stored product attribute.
Figure 3.3 You can store more information about Bob’s products in a two-
dimensional array.
Using PHP , you would write the following code to set up the data in the array shown in
Figure 3.3:
$products = array( array( ‘TIR’, ‘Tires’, 100 ),
array( ‘OIL’, ‘Oil’, 10 ),
array( ‘SPK’, ‘Spark Plugs ’, 4 ) );product attribute
productTires
Oil
Spark Plugs100
10
4TIRDescription Price Code
OIL
SPK05 6728 CH03  9/2/04  1:16 PM  Page 86
87 Multidimensional Arrays
You can see from this definition that the $products array now contains three arrays.
To access the data in a one-dimensional array, recall that you need the name of the
array and the index of the element.A two-dimensional array is similar, except that eachelement has two indices: a row and a column. (The top row is row 0, and the far-leftcolumn is column 0.)
To display the contents of this array, you could manually access each element in order
like this:
echo ‘|’.$products[0][0]. ’|’.$products[0][1]. ’|’.$products[0][2]. ’|<br />’;
echo ‘|’.$products[1][0]. ’|’.$products[1][1]. ’|’.$products[1][2]. ’|<br />’;
echo ‘|’.$products[2][0]. ’|’.$products[2][1]. ’|’.$products[2][2]. ’|<br />’;
Alternatively, you could place a forloop inside another forloop to achieve the same
result:
for ( $row = 0; $row < 3; $row++ )
{
for ( $column = 0; $column < 3; $column++ ){
echo ‘|’.$products[$row][$column];
}echo ‘|<br />’;
}
Both versions of this code produce the same output in the browser:
|TIR|Tires|100||OIL|Oil|10||SPK|Spark Plugs|4|
The only difference between the two examples is that your code will be shorter if you
use the second version with a large array.
You might prefer to create column names instead of numbers, as shown in Figure 3.3.
To store the same set of products, with the columns named as they are in Figure 3.3, you
would use the following code:
$products = array( array( ‘Code’=> ‘TIR’,
‘Description ’=> ‘Tires’,
‘Price’=> 100
),
array( ‘Code’=> ‘OIL’,
‘Description ’=> ‘Oil’,
‘Price’=> 10
),05 6728 CH03  9/2/04  1:16 PM  Page 87
88 Chapter 3 Using Arrays
array( ‘Code’=> ‘SPK’,
‘Description ’=> ‘Spark Plugs ’,
‘Price’=>4
)
);
This array is easier to work with if you want to retrieve a single value. Remembering
that the description is stored in the Description column is easier than remembering it isstored in column 1. Using descriptive indices, you do not need to remember that anitem is stored at [x][y].Y ou can easily find your data by referring to a location withmeaningful row and column names.
You do, however, lose the ability to use a simple 
forloop to step through each col-
umn in turn. Here is one way to write code to display this array:
for ( $row = 0; $row < 3; $row++ )
{
echo ‘|’.$products[$row][ ‘Code’].’|’.$products[$row][ ‘Description ’].
‘|’.$products[$row][ ‘Price’].’|<br />’;
}
Using a forloop, you can step through the outer, numerically indexed $products array.
Each row in the $products array is an array with descriptive indices. Using the each()
and list() functions in a while loop, you can step through these inner arrays.
Therefore, you need a while loop inside a forloop:
for ( $row = 0; $row < 3; $row++ )
{
while ( list( $key, $value ) = each( $products[ $row ] ) ){
echo “|$value”;
}echo ‘|<br />’;
}
You do not need to stop at two dimensions. In the same way that array elements can
hold new arrays, those new arrays, in turn, can hold more arrays.
A three-dimensional array has height, width, and depth. If you are comfortable think-
ing of a two-dimensional array as a table with rows and columns, imagine a pile or deckof those tables. Each element is referenced by its layer, row, and column.
If Bob divided his products into categories, you could use a three-dimensional array
to store them. Figure 3.4 shows Bob’s products in a three-dimensional array.05 6728 CH03  9/2/04  1:16 PM  Page 88
89 Multidimensional Arrays
Figure 3.4 This three-dimensional array allows you to divide products into
categories.
From the code that defines this array, you can see that a three-dimensional array is an
array containing arrays of arrays:
$categories = array( array ( array( ‘CAR_TIR’, ‘Tires’, 100 ),
array( ‘CAR_OIL’, ‘Oil’, 10 ),
array( ‘CAR_SPK’, ‘Spark Plugs ’, 4 )
),
array ( array( ‘VAN_TIR’, ‘Tires’, 120 ),
array( ‘VAN_OIL’, ‘Oil’, 12 ),
array( ‘VAN_SPK’, ‘Spark Plugs ’, 5 )
),
array ( array( ‘TRK_TIR’, ‘Tires’, 150 ),
array( ‘TRK_OIL’, ‘Oil’, 15 ),
array( ‘TRK_SPK’, ‘Spark Plugs ’, 6 )
)
);product attributeTires
Oil
Spark Plugs100
10
4TLRDescriptionTruck Parts
Price Code
OIL
SPK
product attributeTires
Oil
Spark Plugs100
10
4TLRDescriptionVan Parts
Price Code
OIL
SPK
product attributeproductTires
Oil
Spark Plugs100
10
4CAR_TIRDescriptionCar Parts
Price Code
CAR_OIL
CAR_SPKproduct category05 6728 CH03  9/2/04  1:16 PM  Page 89
90 Chapter 3 Using Arrays
Because this array has only numeric indices, you can use nested forloops to display its
contents:
for ( $layer = 0; $layer < 3; $layer++ )
{
echo “Layer $layer<br /> ”;
for ( $row = 0; $row < 3; $row++ ){
for ( $column = 0; $column < 3; $column++ ){
echo ‘|’.$categories[$layer][$row][$column];
}echo ‘|<br />’;
}
}
Because of the way multidimensional arrays are created, you could create four-, five-, or
even six-dimensional arrays.There is no language limit to the number of dimensions, but
it is difficult for people to visualize constructs with more than three dimensions. Mostreal-world problems match logically with constructs of three or fewer dimensions.
Sorting Arrays
Sorting related data stored in an array is often useful.Y ou can easily take a one-dimensional
array and sort it into order.
Using sort()
The following code showing the sort() function results in the array being sorted into
ascending alphabetical order:
$products = array( ‘Tires’, ‘Oil’, ‘Spark Plugs ’);
sort($products);
The array elements will now appear in the order Oil,Spark Plugs ,Tires .
You can sort values by numerical order, too. If you have an array containing the
prices of Bob’s products, you can sort it into ascending numeric order as follows:
$prices = array( 100, 10, 4 );
sort($prices);
The prices will now appear in the order 4, 10, 100.
Note that the sort() function is case sensitive.All capital letters come before all low-
ercase letters. So Ais less than Z,but Zis less than a.
The function also has an optional second parameter.Y ou may pass one of the con-
stants SORT_REGULAR (the default), SORT_NUMERIC ,or SORT_STRING .The ability to specify
the sort type is useful when you are comparing strings that might contain numbers, forexample, 2 and 12. Numerically, 2 is less than 12, but as strings 
‘12’is less than ‘2’.05 6728 CH03  9/2/04  1:16 PM  Page 90
91 Sorting Multidimensional Arrays
Using asort() and ksort() to Sort Arrays
If you are using an array with descriptive keys to store items and their prices, you need to
use different kinds of sort functions to keep keys and values together as they are sorted.
The following code creates an array containing the three products and their associated
prices and then sorts the array into ascending price order:
$prices = array( ‘Tires’=>100, ‘Oil’=>10, ‘Spark Plugs ’=>4 );
asort($prices);
The function asort() orders the array according to the value of each element. In the
array, the values are the prices, and the keys are the textual descriptions. If, instead ofsorting by price, you want to sort by description, you can use 
ksort() ,which sorts by
key rather than value.The following code results in the keys of the array being ordered
alphabetically— Oil,Spark Plugs ,Tires:
$prices = array( ‘Tires’=>100, ‘Oil’=>10, ‘Spark Plugs ’=>4 );
ksort($prices);
Sorting in Reverse
The three different sorting functions— sort() ,asort() ,and ksort() —sort an array
into ascending order. Each function has a matching reverse sort function to sort an arrayinto descending order.The reverse versions are called
rsort() ,arsort() ,and krsort() .
You use the reverse sort functions in the same way you use the ascending sort func-
tions.The rsort() function sorts a single-dimensional numerically indexed array into
descending order.The arsort() function sorts a one-dimensional array into descending
order using the value of each element.The krsort() function sorts a one-dimensional
array into descending order using the key of each element.
Sorting Multidimensional Arrays
Sorting arrays with more than one dimension, or by something other than alphabeticalor numerical order, is more complicated. PHP knows how to compare two numbers ortwo text strings, but in a multidimensional array, each element is an array. PHP does notknow how to compare two arrays, so you need to create a method to compare them.Most of the time, the order of the words or numbers is fairly obvious, but for complicat-ed objects, it becomes more problematic.
User-Defined Sorts
The following is the definition of a two-dimensional array used earlier.This array storesBob’s three products with a code, a description, and a price for each:
$products = array( array( ‘TIR’, ‘Tires’, 100 ),
array( ‘OIL’, ‘Oil’, 10 ),
array( ‘SPK’, ‘Spark Plugs ’, 4 ) );05 6728 CH03  9/2/04  1:16 PM  Page 91
92 Chapter 3 Using Arrays
If you sort this array, in what order will the values appear? Because you know what the
contents represent, there are at least two useful orders.Y ou might want the products sort-ed into alphabetical order using the description or by numeric order by the price. Eitherresult is possible, but you need to use the function 
usort() and tell PHP how to com-
pare the items.T o do this, you need to write your own comparison function.
The following code sorts this array into alphabetical order using the second column
in the array—the description:
function compare($x, $y)
{
if ( $x[1] == $y[1] )
return 0;
else if ( $x[1] < $y[1] )
return -1;
else
return 1;
}
usort($products, ‘compare’);
So far in this book, you have called a number of the built-in PHP functions.T o sort this
array, you need to define a function of your own.We examine writing functions in detailin Chapter 5,“Reusing Code and Writing Functions,” but here is a brief introduction.
You define a function by using the keyword 
function .You need to give the function
a name. Names should be meaningful, so you can call it compare() for this example.
Many functions take parameters or arguments.This compare() function takes two: one
called $xand one called $y.The purpose of this function is to take two values and deter-
mine their order.
For this example, the $xand $yparameters are two of the arrays within the main
array, each representing one product.T o access the Description of the array $x,y o u
type $x[1] because the Description is the second element in these arrays, and number-
ing starts at zero.Y ou use $x[1] and $y[1] to compare each Description from the
arrays passed into the function.
When a function ends, it can give a reply to the code that called it.This process is
called returning a value.T o return a value, you use the keyword return in the function.
For example, the line return 1; sends the value 1back to the code that called the 
function.
To be used by usort() ,the compare() function must compare $xand $y.The func-
tion must return 0if $xequals $y,a negative number if it is less, or a positive number if
it is greater.The function will return 0,1,or -1,depending on the values of $xand $y.
The final line of code calls the built-in function usort() with the array you want
sorted ($products ) and the name of the comparison function ( compare() ).05 6728 CH03  9/2/04  1:16 PM  Page 92
93 Sorting Multidimensional Arrays
If you want the array sorted into another order, you can simply write a different
comparison function.T o sort by price, you need to look at the third column in the arrayand create this comparison function:
function compare($x, $y)
{if ( $x[2] == $y[2] )
return 0;
else if ( $x[2] < $y[2] )
return -1;
else
return 1;
}
When usort($products, ‘compare’)is called, the array is placed in ascending order
by pr ice.
The uin usort() stands for userbecause this function requires a user-defined com-
parison function.The uasort() and uksort() versions of asort and ksort also require
user-defined comparison functions.
Similar to asort() ,uasort() should be used when sorting a non-numerically
indexed array by value. Use asort if your values are simple numbers or text. Define a
comparison function and use uasort() if your values are more complicated objects such
as arrays.
Similar to ksort() ,uksort() should be used when sorting a non-numerically
indexed array by key. Use ksort if your keys are simple numbers or text. Define a com-
parison function and use uksort() if your keys are more complicated objects such as
arrays.
Reverse User Sorts
The functions sort() ,asort() ,and ksort() all have a matching reverse sorts with an r
in the function name.The user-defined sorts do not have reverse variants, but you cansort a multidimensional array into reverse order. Because you provide the comparisonfunction, you can write a comparison function that returns the opposite values.T o sortinto reverse order, the function needs to return 
1if $xis less than $yand -1if $xis
greater than $y.F o r  example,
function reverse_compare($x, $y)
{if ( $x[2] == $y[2] )
return 0;
else if ( $x[2] < $y[2] )
return 1;
else
return -1;
}05 6728 CH03  9/2/04  1:16 PM  Page 93
94 Chapter 3 Using Arrays
Calling usort($products, ‘reverse_compare ’)would now result in the array being
placed in descending order by price.
Reordering Arrays
For some applications, you might want to manipulate the order of the array in other
ways.The function shuffle() randomly reorders the elements of your array.The func-
tion array_reverse() gives you a copy of your array with all the elements in reverse
order.
Using shuffle()
Bob wants to feature a small number of his products on the front page of his site. He has
a large number of products but would like three randomly selected items shown on thefront page. So that repeat visitors do not get bored, he would like the three chosen prod-ucts to be different for each visit. He can easily accomplish his goal if all his products arein an array. Listing 3.1 displays three randomly chosen pictures by shuffling the array intoa random order and then displaying the first three.
Listing 3.1 bobs_front_page.php —Using PHP to Produce a Dynamic Front Page
for Bob’s Auto Parts
<?php
$pictures = array( ‘tire.jpg ’, ‘oil.jpg’, ‘spark_plug.jpg ’,
‘door.jpg ’, ‘steering_wheel.jpg ’,
‘thermostat.jpg ’, ‘wiper_blade.jpg ’,
‘gasket.jpg ’, ‘brake_pad.jpg ’);
shuffle($pictures);
?><html><head>
<title>Bob ’s Auto Parts</title>
</head><body>
<center>
<h1>Bob’s Auto Parts</h1>
<table width = ‘100%’>
<tr>
<?php
for ( $i = 0; $i < 3; $i++ ){
echo ‘<td align= ”center”><img src= ”’;
echo $pictures[$i];echo ‘“ width=”100”height=”100”></td>’;05 6728 CH03  9/2/04  1:16 PM  Page 94
95 Reordering Arrays
}
?>
</tr>
</table>
</center>
</body>
</html>
Because the code selects random pictures, it produces a different page nearly every time
you load it, as shown in Figure 3.5.
Figure 3.5 The shuffle() function enables you to feature three randomly
chosen products.
In older versions of PHP , the shuffle() function required that you seed the random
number generator first by calling srand() .This step is no longer required.
The shuffle() function has not had a very illustrious history. In older versions of
PHP , it did not shuffle very well, giving a result that was not very random. In version4.2.x on Windows, for instance, it did not shuffle at all, giving a result that was exactlywhat you started with. In version 5, it seems to work. If this function is important toyou, test it on your server before employing it in your applications.
Because you do not really need the whole array reordered, you can achieve the same
result using the function
array_rand() .
Listing 3.1 Continued05 6728 CH03  9/2/04  1:16 PM  Page 95
96 Chapter 3 Using Arrays
Using array_reverse()
The function array_reverse() takes an array and creates a new one with the same
contents in reverse order. For example, there are a number of ways to create an arraycontaining a countdown from 10 to 1.
Using 
range() usually creates an ascending sequence, which you could place in
descending order using array _reverse() or rsort() .Alternatively, you could create the
array one element at a time by writing a forloop:
$numbers = array();
for($i=10; $i>0; $i--)
array_push( $numbers, $i );
A forloop can go in descending order like this:Y ou set the starting value high and at
the end of each loop use the --operator to decrease the counter by one.
Here, you create an empty array and then use array_push() for each element to add
one new element to the end of an array.As a side note, the opposite of array_push() is
array_pop() .This function removes and returns one element from the end of an array.
Alternatively, you can use the array_reverse() function to reverse the array created
by range() :
$numbers = range(1,10);
$numbers = array_reverse($numbers);
Note that array_reverse() returns a modified copy of the array. If you do not 
want the original array, as in this example, you can simply store the new copy over the
original.
If your data is just a range of integers, you can create it in reverse order by passing –1
as the optional step parameter to range() :
$numbers = range(10, 1, -1);
Loading Arrays from Files
In Chapter 2,“Storing and Retrieving Data,” you learned how to store customer ordersin a file. Each line in the file looked something like this:
15:42, 20th April 4 tires 1 oil 6 spark plugs $434.00 22 Short St, Smalltown
To process or fulfill this order, you could load it back into an array. Listing 3.2 displays
the current order file.
Listing 3.2 vieworders.php — Using PHP to Display Orders for Bob
<?php
//create short variable name$DOCUMENT_ROOT = $_SERVER[ ‘DOCUMENT_ROOT ’];05 6728 CH03  9/2/04  1:16 PM  Page 96
97 Loading Arrays from Files
$orders= file( “$DOCUMENT_ROOT/../orders/orders.txt ”);
$number_of_orders = count($orders);
if ($number_of_orders == 0){
echo ‘<p><strong>No orders pending.
Please try again later.</strong></p> ’;
}for ($i=0; $i<$number_of_orders; $i++){
echo $orders[$i]. ’<br />’;
}
?>
This script produces almost exactly the same output as Listing 2.3 in the preceding
chapter, which was shown in Figure 2.4.This time, the script uses the function file() ,
which loads the entire file into an array. Each line in the file becomes one element of anarray.This code also uses the 
count() function to see how many elements are in an
array.
Furthermore, you could load each section of the order lines into separate array ele-
ments to process the sections separately or to format them more attractively. Listing 3.3does exactly that.
Listing 3.3 vieworders2.php — Using PHP to Separate, Format, and Display Orders
for Bob
<?php
//create short variable name$DOCUMENT_ROOT = $_SERVER[ ‘DOCUMENT_ROOT ’];
?><html><head>
<title>Bob ’s Auto Parts - Customer Orders</title>
</head><body><h1>Bob’s Auto Parts</h1>
<h2>Customer Orders</h2><?php
//Read in the entire file.//Each order becomes an element in the array$orders= file( “$DOCUMENT_ROOT/../orders/orders.txt ”);Listing 3.2 Continued05 6728 CH03  9/2/04  1:16 PM  Page 97
98 Chapter 3 Using Arrays
// count the number of orders in the array
$number_of_orders = count($orders);if ($number_of_orders == 0){
echo ‘<p><strong>No orders pending.
Please try again later.</strong></p> ’;
}echo “<table border= ’1’>\n”;
echo ‘<tr><th bgcolor= ”#CCCCFF”>Order Date</th>
<th bgcolor= ”#CCCCFF”>Tires</th>
<th bgcolor= ”#CCCCFF”>Oil</th>
<th bgcolor= ”#CCCCFF”>Spark Plugs</th>
<th bgcolor= ”#CCCCFF”>Total</th>
<th bgcolor= ”#CCCCFF”>Address</th>
<tr>’;
for ($i=0; $i<$number_of_orders; $i++){
//split up each line$line = explode( “\t”, $orders[$i] );
// keep only the number of items ordered (discard other stored data)$line[1] = intval( $line[1] );$line[2] = intval( $line[2] );$line[3] = intval( $line[3] );// output each orderecho “<tr><td>$line[0]</td>
<td align= ’right’>$line[1]</td>
<td align= ’right’>$line[2]</td>
<td align= ’right’>$line[3]</td>
<td align= ’right’>$line[4]</td>
<td>$line[5]</td>
</tr>”;
}echo ‘</table> ’;
?></body>
</html>
The code in Listing 3.3 loads the entire file into an array, but unlike the example in
Listing 3.2, here you use the function explode() to split up each line so that you can
apply some processing and formatting before printing.The output from this script isshown in Figure 3.6.Listing 3.3 Continued05 6728 CH03  9/2/04  1:16 PM  Page 98
99 Loading Arrays from Files
Figure 3.6 After splitting order records with explode() ,you can put each
part of an order in a different table cell for better-looking output.
The explode function has the following prototype:
array explode(string separator , string string [, intlimit])
In the preceding chapter, you used the tab character as a delimiter when storing this
data, so here you call
explode( “\t”, $orders[$i] )
This code “explodes” the passed-in string into parts. Each tab character becomes a break
between two elements. For example, the string
“15:42, 20th April\t4 tires\t1 oil\t6 spark plugs\t$434.00\t
22 Short St, Smalltown ”
is exploded into the parts “15:42, 20th April ”,“4 tires”,“1 oil”,“6 spark
plugs”,“$434.00”,and “22 Short St, Smalltown ”.
Note that the optional limit parameter can be used to limit the maximum number
of parts returned.
This example doesn’t do very much processing. Rather than output tires, oil, and
spark plugs on every line, this example displays only the number of each and gives thetable a heading row to show what the numbers represent.
You could extract numbers from these strings in a number of ways. Here, you use the
function 
intval() .As mentioned in Chapter 1, intval() converts a string to an inte-
ger.The conversion is reasonably clever and ignores parts, such as the label in this exam-ple, which cannot be converted to an integer.We cover various ways of processingstrings in the next chapter.
05 6728 CH03  9/2/04  1:16 PM  Page 99
100 Chapter 3 Using Arrays
Performing Other Array Manipulations
So far, we have covered only about half the array processing functions. Many others will
be useful from time to time; we describe some of them next.
Navigating Within an Array: each() ,current() ,reset() ,
end() ,next() ,pos() ,and prev()
We mentioned previously that every array has an internal pointer that points to the cur-
rent element in the array.Y ou indirectly used this pointer earlier when using the each()
function, but you can directly use and manipulate this pointer.
If you create a new array, the current pointer is initialized to point to the first ele-
ment in the array. Calling current( $array_name ) returns the first element.
Calling either next() or each() advances the pointer forward one element. Calling
each( $array_name ) returns the current element before advancing the pointer.The
function next() behaves slightly differently: Calling next( $array_name ) advances the
pointer and then returns the new current element.
You have already seen that reset() returns the pointer to the first element in the
array. Similarly, calling end( $array_name ) sends the pointer to the end of the array.
The first and last elements in the array are returned by reset() and end() ,respectively.
Tomove through an array in reverse order, you could use end() and prev() .The
prev() function is the opposite of next() .It moves the current pointer back one and
then returns the new current element.
For example, the following code displays an array in reverse order:
$value = end ($array);
while ($value){
echo “$value<br /> ”;
$value = prev($array);
}
For example, you can declare $array like this:
$array = array(1, 2, 3);
In this case, the output would appear in a browser as follows:
3
21
Usingeach() ,current() ,reset() ,end() ,next() ,pos() ,and prev() ,you can write
your own code to navigate through an array in any order.05 6728 CH03  9/2/04  1:16 PM  Page 100
101 Performing Other Array Manipulations
Applying Any Function to Each Element in an Array:
array_walk()
Sometimes you might want to work with or modify every element in an array in the
same way.The function array_walk() allows you to do this.The prototype of
array_walk() is as follows:
bool array_walk(array arr, string func, [mixed userdata ])
Similar to the way you called usort() earlier,array_walk() expects you to declare a
function of your own.As you can see, array_walk() takes three parameters.The first,
arr,is the array to be processed.The second, func,is the name of a user-defined func-
tion that will be applied to each element in the array.The third parameter, userdata ,i s
optional. If you use it, it will be passed through to your function as a parameter.Y ou seehow this works shortly.
A handy user-defined function might be one that displays each element with some
specified formatting.The following code displays each element on a new line by callingthe user-defined function 
my_print() with each element of $array :
function my_print($value)
{
echo “$value<br /> ”;
}array_walk($array, ‘my_print ’);
The function you write needs to have a particular signature. For each element in the
array,array_walk takes the key and value stored in the array, and anything you passed as
userdata ,and calls your function like this:
yourfunction(value, key, userdata)
For most uses, your function will be using only the values in the array. For some, you
might also need to pass a parameter to your function using the parameter userdata .
Occasionally, you might be interested in the key of each element as well as the value.Your function can, as with 
MyPrint() ,choose to ignore the key and userdata
parameter.
For a slightly more complicated example, you can write a function that modifies the
values in the array and requires a parameter.Although you may not interested in the key,
you need to accept it to accept the third parameter:
function my_multiply(&$value, $key, $factor)
{
$value *= $factor;
}array_walk(&$array, ‘my_multiply ’, 3);05 6728 CH03  9/2/04  1:16 PM  Page 101
102 Chapter 3 Using Arrays
This code defines a function, my_multiply() ,that will multiply each element in the
array by a supplied factor.Y ou need to use the optional third parameter to array_walk()
to take a parameter to pass to the function and use it as the factor to multiply by.Because you need this parameter, you must define the function,
my_multiply() ,to take
three parameters: an array element’s value ( $value ), an array element’s key ( $key), and
the parameter ( $factor ).Y ou can choose to ignore the key.
A subtle point to note is the way $value is passed.The ampersand ( &) before the
variable name in the definition of my_multiply() means that $value will be passed by
reference .Passing by reference allows the function to alter the contents of the array.
We address passing by reference in more detail in Chapter 5. If you are not familiar
with the term, for now just note that to pass by reference, you place an ampersandbefore the variable name.
Counting Elements in an Array: count() ,sizeof() ,and
array_count_values()
You used the function count() in an earlier example to count the number of elements
in an array of orders.The function sizeof() serves exactly the same purpose. Both of
these functions return the number of elements in an array passed to them.Y ou get acount of one for the number of elements in a normal scalar variable and zero if you passeither an empty array or a variable that has not been set.
The
array_count_values() function is more complex. If you call
array_count_values($array) ,this function counts how many times each unique value
occurs in the array named $array .(This is the set cardinality of the array.) The function
returns an associative array containing a frequency table.This array contains all the
unique values from $array as keys. Each key has a numeric value that tells you how
many times the corresponding key occurs in $array .
For example, the code
$array = array(4, 5, 1, 2, 3, 1, 2, 1);
$ac = array_count_values($array);
creates an array called $acthat contains
Key V alue
4 1
5 1
1 3
2 2
3 1
This result indicates that 4, 5, and 3 occurred once in $array ,1 occurred three times,
and 2 occurred twice.05 6728 CH03  9/2/04  1:16 PM  Page 102
103 Performing Other Array Manipulations
Converting Arrays to Scalar Variables: extract()
If you have a non-numerically indexed array with a number of key value pairs, you can
turn them into a set of scalar variables using the function extract() .The prototype for
extract() is as follows:
extract(array var_array [, int extract_type ] [, string prefix] );
The purpose of extract() is to take an array and create scalar variables with the names
of the keys in the array.The values of these variables are set to the values in the array.
Here is a simple example:
$array = array( ‘key1’=> ‘value1’, ‘key2’=> ‘value2’, ‘key3’=> ‘value3’);
extract($array);echo “$key1 $key2 $key3 ”;
This code produces the following output:
value1 value2 value3
The array has three elements with keys: key1,key2,and key3.Using extract() ,y o u
create three scalar variables: $key1 ,$key2 ,and $key3 .You can see from the output that
the values of $key1 ,$key2 ,and $key3 are ‘value1’,‘value2’,and ‘value3’,respec-
tively.These values come from the original array.
The extract() function has two optional parameters: extract_type and prefix .
The variable extract_type tells extract() how to handle collisions.These are cases in
which a variable already exists with the same name as a key.The default response is tooverwrite the existing variable.The allowable values for 
extract_type are shown in
Table 3.2.
Table 3.2 Allowed extract_type Parameters for extract()
Type Meaning
EXTR_OVERWRITE Overwrites the existing variable when a collision occurs.
EXTR_SKIP Skips an element when a collision occurs.
EXTR_PREFIX_SAME Creates a variable named $prefix_key when a collision
occurs.Y ou must supply prefix .
EXTR_PREFIX_ALL Prefixes all variable names with prefix .You must supply 
prefix .
EXTR_PREFIX_INVALID Prefixes variable names that would otherwise be invalid (for
example, numeric variable names) with prefix .You must sup-
ply prefix .
EXTR_IF_EXISTS Extracts only variables that already exist (that is, writes existingvariables with values from the array).This parameter was added
at version 4.2.0 and is useful for converting, for example,
$_REQUEST to a set of valid variables.05 6728 CH03  9/2/04  1:16 PM  Page 103
104 Chapter 3 Using Arrays
EXTR_PREFIX_IF_EXISTS Creates a prefixed version only if the nonprefixed version
already exists.This parameter was added at version 4.2.0.
EXTR_REFS Extracts variables as references.This parameter was added at
version 4.3.0.
The two most useful options are EXTR_OVERWRITE (the default) and EXTR_PREFIX_ALL .
The other options might be useful occasionally when you know that a particular collision will occur and want that key skipped or prefixed.A simple example using
EXTR_PREFIX_ALL follows.Y ou can see that the variables created are called prefix-
underscore- keyname :
$array = array( ‘key1’=> ‘value1’, ‘key2’=> ‘value2’, ‘key3’=> ‘value3’);
extract($array, EXTR_PREFIX_ALL, ‘my_prefix ’);
echo “$my_prefix_key1 $my_prefix_key2 $my_prefix_key3 ”;
This code again produces the following output:
value1 value2 value3
Note that for extract() to extract an element, that element’s key must be a valid vari-
able name, which means that keys starting with numbers or including spaces are skipped.
Further Reading
This chapter covers what we believe to be the most useful of PHP’s array functions.Wehave chosen not to cover all the possible array functions.The online PHP manual avail-able at http://www.php.net/array provides a brief description for each of them.
Next
In the next chapter, you learn about string processing functions.We cover functions thatsearch, replace, split, and merge strings, as well as the powerful regular expression func-tions that can perform almost any action on a string.Table 3.2 Continued 
Type Meaning05 6728 CH03  9/2/04  1:16 PM  Page 104
4
String Manipulation and Regular
Expressions
INTHIS CHAPTER ,WE DISCUSS HOW YOU can use PHP’s string functions to format and
manipulate text.We also discuss using string functions or regular expression functions tosearch (and replace) words, phrases, or other patterns within a string.
These functions are useful in many contexts.Y ou often may want to clean up or
reformat user input that is going to be stored in a database. Search functions are great
when building search engine applications (among other things).Key topics covered in this chapter include
nFormatting strings
nJoining and splitting strings
nComparing strings
nMatching and replacing substrings with string functions
nUsing regular expressions
Creating a Sample Application: Smart Form
Mail
In this chapter, you use string and regular expression functions in the context of a Smart
Form Mail application.Y ou then add these scripts to the Bob’s Auto Parts site you’ve
been building in preceding chapters.
This time, you build a straightforward and commonly used customer feedback form
for Bob’s customers to enter their complaints and compliments, as shown in Figure 4.1.However, this application has one improvement over many you will find on the Web.Instead of emailing the form to a generic email address like 
feedback@example.com ,
you’ll attempt to put some intelligence into the process by searching the input for key06 6728 ch04  9/2/04  1:14 PM  Page 105
106 Chapter 4 String Manipulation and Regular Expressions
words and phrases and then sending the email to the appropriate employee at Bob’s
company. For example, if the email contains the word advertising ,you might send the
feedback to the Marketing department. If the email is from Bob’s biggest client, it can gostraight to Bob.
Figure 4.1 Bob’s feedback form asks customers for their name,
email address, and comments.
Start with the simple script shown in Listing 4.1 and add to it as you read along.
Listing 4.1 processfeedback.php —Basic Script to Email Form Contents
<?php
//create short variable names$name=$_POST[ ‘name’];
$email=$_POST[ ‘email’];
$feedback=$_POST[ ‘feedback ’];
$toaddress = ‘feedback@example.com ’;
$subject = ‘Feedback from web site ’;
$mailcontent = ‘Customer name: ‘.$name.”\n”
.’Customer email: ‘.$email. ”\n”
.”Customer comments: \n ”.$feedback. ”\n”;
$fromaddress = ‘From: webserver@example.com ’;
mail($toaddress, $subject, $mailcontent, $fromaddress);
?><html><head>
06 6728 ch04  9/2/04  1:14 PM  Page 106
107 Formatting Strings
<title>Bob ’s Auto Parts - Feedback Submitted</title>
</head><body><h1>Feedback submitted</h1><p>Your feedback has been sent.</p></body>
</html>
Generally, you should check that users have filled out all the required form fields using,
for example, isset() .We have omitted this function call from the script and other
examples for the sake of brevity.
In this script, you can see that we have concatenated the form fields together and
used PHP’s mail() function to email them to feedback@example.com .This is a sample
email address. If you want to test the code in this chapter, substitute your own emailaddress here. Because we haven’t yet used 
mail() ,we need to discuss how it works.
Unsurprisingly, this function sends email.The prototype for mail() looks like this:
bool mail(string to, string subject, string message,
string [ additional_headers [, string additional_parameters ]]);
The first three parameters are compulsory and represent the address to send email to, the
subject line, and the message contents, respectively.The fourth parameter can be used tosend any additional valid email headers.Valid email headers are described in the docu-ment RFC822, which is available online if you want more details. (RFCs, or Requestsfor Comment, are the source of many Internet standards; we discuss them in Chapter 19,“Using Network and Protocol Functions.”) Here, the fourth parameter adds a 
“From:”
address for the mail.Y ou can also use it to add “Reply-To: ”and “Cc:”fields, among
others. If you want more than one additional header, just separate them by using new-lines and carriage returns (
\n\r) within the string, as follows:
$additional_headers= ”From: webserver@example.com\r\n “
.’Reply-To: bob@example.com ’;
The optional fifth parameter can be used to pass a parameter to whatever program you
have configured to send mail.
To use themail() function, set up your PHP installation to point at your mail-
sending program. If the script doesn’t work for you in its current form, double-checkAppendix A,“Installing PHP5 and MySQL5.”
Throughout this chapter, you enhance this basic script by making use of PHP’s string
handling and regular expression functions.
Formatting Strings
You often need to tidy up user strings (typically from an HTML form interface) before
you can use them.The following sections describe some of the functions you can use.Listing 4.1 Continued06 6728 ch04  9/2/04  1:14 PM  Page 107
108 Chapter 4 String Manipulation and Regular Expressions
Trimming Strings: chop() ,ltrim() ,and trim()
The first step in tidying up is to trim any excess whitespace from the string.Although
this step is never compulsory, it can be useful if you are going to store the string in a fileor database, or if you’re going to compare it to other strings.
PHP provides three useful functions for this purpose.Y ou can use the 
trim() func-
tion to tidy up your input data as follows:
$name=trim($name);
$email=trim($email);$feedback=trim($feedback);
The trim() function strips whitespace from the start and end of a string and returns the
resulting string.The characters it strips by default are newlines and carriage returns ( \n
and \r), horizontal and vertical tabs (\tand \x0B), end-of-string characters (\0), and
spaces.Y ou can also pass it a second parameter containing a list of characters to stripinstead of this default list. Depending on your particular purpose, you might like to usethe 
ltrim() or rtrim() functions instead.They are both similar to trim() ,taking the
string in question as a parameter and returning the formatted string.The differencebetween these three is that 
trim() removes whitespace from the start and end of a
string,ltrim() removes whitespace from the start (or left) only, and rtrim() removes
whitespace from the end (or right) only.
Formatting Strings for Presentation
PHP includes a set of functions that you can use to reformat a string in different ways.
Using HTML Formatting:The nl2br() Function
Thenl2br() function takes a string as a parameter and replaces all the newlines in it
with the XHTML <br /> tag (or the HTML <br> tag in versions prior to 4.0.5).This
capability is useful for echoing a long string to the browser. For example, you can usethis function to format the customer’s feedback to echo it back:
<p>Your feedback (shown below) has been sent.</p>
<p><?php echo nl2br($mailcontent); ?> </p>
Remember that HTML disregards plain whitespace, so if you don’t filter this output
through nl2br() ,it will appear on a single line (except for newlines forced by the
browser window).The result is illustrated in Figure 4.2.
Formatting a String for Printing
So far, you have used the echo language construct to print strings to the browser. PHP
also supports a print() construct, which does the same thing as echo,but returns a
value (true or false ,denoting success).06 6728 ch04  9/2/04  1:14 PM  Page 108
109 Formatting Strings
Figure 4.2 Using PHP’s nl2br() function improves the display 
of long strings within HTML.
Both of these techniques print a string “as is.”Y ou can apply some more sophisticated
formatting using the functions printf() and sprintf() .They work basically the same
way,except that printf() prints a formatted string to the browser and sprintf()
returns a formatted string.
If you have previously programmed in C, you will find that these functions are con-
ceptually similar to the C versions. Be careful, though, because the syntax is not exactlythe same. If you haven’t, they take getting used to but are useful and powerful.
The prototypes for these functions are
string sprintf ( string format [, mixed args...] )
void printf ( string format [, mixed args...] )
The first parameter passed to both of these functions is a format string that describes the
basic shape of the output with format codes instead of variables.The other parametersare variables that will be substituted in to the format string.
For example, using 
echo,you can use the variables you want to print inline, like this:
echo “Total amount of order is $total. ”;
To get the same effect with printf() ,you would use
printf ( “Total amount of order is %s. ”, $total);
The %sin the format string is called a conversion specification .This one means “replace
with a string.” In this case, it is replaced with $total interpreted as a string. If the value
stored in $total was 12.4, both of these approaches would print it as 12.4.
06 6728 ch04  9/2/04  1:14 PM  Page 109
110 Chapter 4 String Manipulation and Regular Expressions
The advantage of printf() is that you can use a more useful conversion specification
to specify that $total is actually a floating-point number and that it should have two
decimal places after the decimal point, as follows:
printf ( “Total amount of order is %.2f ”, $total);
Given this formatting, and 12.4 stored in $total ,this statement will print as 12.40 .
You can have multiple conversion specifications in the format string. If you have n
conversion specifications, you will usually have narguments after the format string. Each
conversion specification will be replaced by a reformatted argument in the order they arelisted. For example,
printf ( “Total amount of order is %.2f (with shipping %.2f) “,
$total, $total_shipping);
Here, the first conversion specification uses the variable $total ,and the second uses the
variable $total_shipping .
Each conversion specification follows the same format, which is
%[‘padding_character ][-][width][.precision ]type
All conversion specifications start with a %symbol. If you actually want to print a %
symbol, you need to use %%.
Thepadding_character is optional. It is used to pad your variable to the width you
have specified.An example would be to add leading zeros to a number like a counter.The default padding character is a space. If you are specifying a space or zero, you do notneed to prefix it with the apostrophe (
‘). For any other padding character, you need to
prefix it with an apostrophe.
The -symbol is optional. It specifies that the data in the field will be left-justified
rather than right-justified, which is the default.
The width specifier tells printf() how much room (in characters) to leave for the
variable to be substituted in here.
The precision specifier should begin with a decimal point. It should contain the
number of places after the decimal point you would like displayed.
The final part of the specification is a type code.A summary of these codes is shown
in Table 4.1.
Table 4.1 Conversion Specification Type Codes
Type Meaning
b Interpret as an integer and print as a binary number.
c Interpret as an integer and print as a character.
d Interpret as an integer and print as a decimal number.
f Interpret as a double and print as a floating-point number.
o Interpret as an integer and print as an octal number.
s Interpret as a string and print as a string.06 6728 ch04  9/2/04  1:14 PM  Page 110
111 Formatting Strings
u Interpret as an integer and print as an unsigned decimal.
x Interpret as an integer and print as a hexadecimal number with lowercase letters for
the digits a–f.
X Interpret as an integer and print as a hexadecimal number with uppercase letters for
the digits A–F .
Since PHP version 4.0.6, you can use argument numbering, which means that the argu-
ments don’t need to be in the same order as the conversion specifications. For example,
printf ( “Total amount of order is %2\$.2f (with shipping %1\$.2f) “,
$total_shipping, $total);
Just add the argument position in the list directly after the %sign, followed by an escaped
$symbol; in this example, 2\$means “replace with the second argument in the list.”This
method can also be used to repeat arguments.
Two alternative versions of these functions are called vprintf() and vsprintf() .
These variants accept two parameters: the format string and an array of the argumentsrather than a variable number of parameters.
Changing the Case of a String
You can also reformat the case of a string.This capability is not particularly useful for the
sample application, but we’ll look at some brief examples.
If you start with the subject string,
$subject ,which you are using for email, you can
change its case by using several functions.The effect of these functions is summarized inTable 4.2.The first column shows the function name, the second describes its effect, the
third shows how it would be applied to the string 
$subject ,and the last column shows
what value would be returned from the function.
Table 4.2 String Case Functions and Their Effects
Function Description Use Value
$subject Feedback from
web site
strtoupper() Turns string to strtoupper($subject) FEEDBACK 
uppercase FROM
WEB SITE
strtolower() Turns string to strtolower($subject) feedback from
lowercase web site
ucfirst() Capitalizes first ucfirst($subject) Feedback from
character of string web siteif it’s alphabeticTable 4.1 Continued
Type Meaning06 6728 ch04  9/2/04  1:14 PM  Page 111
112 Chapter 4 String Manipulation and Regular Expressions
ucwords() Capitalizes first ucwords($subject) Feedback From
character of each Web Siteword in the string
that begins withan alphabetic
character
Formatting Strings for Storage: addslashes() and 
stripslashes()
In addition to using string functions to reformat a string visually, you can use some of
these functions to reformat strings for storage in a database.Although we don’t coveractually writing to the database until Part II,“Using MySQL,” we cover formattingstrings for database storage now.
Certain characters are perfectly valid as part of a string but can cause problems, par-
ticularly when you are inserting data into a database because the database could interpretthese characters as control characters.The problematic ones are quotation marks (singleand double), backslashes (
\), and the NULL character.
You need to find a way of marking or escaping these characters so that databases such
as MySQL can understand that you meant a literal special character rather than a controlsequence.T o escape these characters, add a backslash in front of them. For example,
“
(double quotation mark) becomes \”(backslash double quotation mark), and \(back-
slash) becomes \\(backslash backslash). (This rule applies universally to special charac-
ters, so if you have \\in your string, you need to replace it with \\\\.)
PHP provides two functions specifically designed for escaping characters. Before you
write any strings into a database, you should reformat them with addslashes() ,as 
follows:
$feedback = addslashes($feedback);
Like many of the other string functions, addslashes() takes a string as a parameter and
returns the reformatted string.
Figure 4.3 shows the actual effects of using these functions on the string.You may try these functions on your server and get a result that looks more like 
Figure 4.4.Table 4.2 Continued
Function Description Use Value06 6728 ch04  9/2/04  1:14 PM  Page 112
113 Joining and Splitting Strings with String Functions
Figure 4.3 After the addslashes() function is called, all the quotation
marks have been slashed out. stripslashes() removes the slashes.
Figure 4.4 All problematic characters have been escaped twice; this means
the magic quotes feature is switched on.
If you see this result, it means that your configuration of PHP is set up to add and strip
slashes automatically.This capability is controlled by the magic_quotes_gpc configura-
tion directive.This directive is now on by default in new versions of PHP .The letters gpc
stand for GET , POST , andcookie .This means that variables coming from these sources
are automatically quoted.Y ou can check whether this directive is switched on in yoursystem by using the 
get_magic_quotes_gpc() function, which returns true if strings
from these sources are being automatically quoted for you. If this directive is on in yoursystem, you need to call
stripslashes() before displaying user data; otherwise, the
slashes will be displayed.
Using magic quotes allows you to write more portable code.Y ou can read more
about this feature in Chapter 23, “Other Useful Features.”
Joining and Splitting Strings with String
Functions
Often, you may want to look at parts of a string individually. For example, you might
want to look at words in a sentence (say, for spellchecking) or split a domain name or
email address into its component parts. PHP provides several string functions (and oneregular expression function) that allow you to do this.
06 6728 ch04  9/2/04  1:14 PM  Page 113
114 Chapter 4 String Manipulation and Regular Expressions
In the example, Bob wants any customer feedback from bigcustomer.com to go
directly to him, so you can split the email address the customer typed into parts to findout whether he or she works for Bob’s big customer.
Using explode() ,implode() ,and join()
The first function you could use for this purpose, explode() ,has the following proto-
type:
array explode(string separator , string input[, int limit]);
This function takes a string input and splits it into pieces on a specified separator
string.The pieces are returned in an array.Y ou can limit the number of pieces with the
optional limit parameter, added in PHP 4.0.1.
To get the domain name from the customer’s email address in the script, you can use
the following code:
$email_array = explode( ‘@’, $email);
This call to explode() splits the customer’s email address into two parts: the username,
which is stored in $email_array[0] ,and the domain name, which is stored in
$email_array[1] .Now you can test the domain name to determine the customer’s 
origin and then send the feedback to the appropriate person:
if ($email_array[1]== ’bigcustomer.com ’)
$toaddress = ‘bob@example.com ’;
else
$toaddress = ‘feedback@example.com ’;
If the domain is capitalized, however, this approach will not work.Y ou could avoid this
problem by converting the domain to all uppercase or all lowercase and then checking,as follows:
$email_array[1] = strtolower ($email_array[1]);
You can reverse the effects of explode() by using either implode() or join() ,which
are identical. For example,
$new_email = implode( ‘@’, $email_array);
This statement takes the array elements from $email_array and joins them with the
string passed in the first parameter.The function call is similar to explode() ,but the
effect is the opposite.
Using strtok()
Unlike explode() ,which breaks a string into all its pieces at one time, strtok() gets
pieces (called tokens ) from a string one at a time. strtok() is a useful alternative to using
explode() for processing words from a string one at a time.06 6728 ch04  9/2/04  1:14 PM  Page 114
115 Joining and Splitting Strings with String Functions
The prototype for strtok() is
string strtok(string input, string separator );
The separator can be either a character or a string of characters, but the input string is
split on each of the characters in the separator string rather than on the whole separatorstring (as 
explode does).
Calling strtok() is not quite as simple as it seems in the prototype.T o get the first
token from a string, you call strtok() with the string you want tokenized and a separa-
tor.T o get the subsequent tokens from the string, you just pass a single parameter—theseparator.The function keeps its own internal pointer to its place in the string. If youwant to reset the pointer, you can pass the string into it again.
strtok() is typically used as follows:
$token = strtok($feedback, ‘‘);
echo $token. ’<br />’;
while ($token!= ’’)
{
$token = strtok( ‘‘);
echo $token. ’<br />’;
};
As usual, it’s a good idea to check that the customer actually typed some feedback in 
the form, using, for example, the empty() function.We have omitted these checks for
brevity.
The preceding code prints each token from the customer’s feedback on a separate
line and loops until there are no more tokens. Note that prior to version 4.1.0, PHP’s
strtok() didn’t work exactly the same as the one in C. If two instances of a separator
appeared in a row in your target string (in this example, two spaces in a row), strtok()
would return an empty string.Y ou could not differentiate this from the empty string
returned when you got to the end of the target string.Also, if one of the tokens was
zero, the empty string was returned.This made PHP’s strtok() somewhat less useful
than the one in C.The new version works correctly, skipping empty strings.
Using substr()
The substr() function enables you to access a substring between given start and end
points of a string. It’s not appropriate for the example used here but can be useful whenyou need to get at parts of fixed format strings.
The 
substr() function has the following prototype:
string substr(string string, int start[, int length] );
This function returns a substring copied from within string .
The following examples use this test string:
$test = ‘Your customer service is excellent ’;06 6728 ch04  9/2/04  1:14 PM  Page 115
116 Chapter 4 String Manipulation and Regular Expressions
If you call it with a positive number for start (only), you will get the string from the
start position to the end of the string. For example,
substr($test, 1);
returns our customer service is excellent .Note that the string position starts 
from 0, as with arrays.
If you call substr() with a negative start (only), you will get the string from the
end of the string minus start characters to the end of the string. For example,
substr($test, -9);
returns excellent .
The length parameter can be used to specify either a number of characters to return
(if it is positive) or the end character of the return sequence (if it is negative). For example,
substr($test, 0, 4);
returns the first four characters of the string—namely, Your.The code
echo substr($test, 5, -13);
returns the characters between the fourth character and the thirteenth-to-last 
character—that is, customer service .The first character is location 0. So location 5 is
the sixth character.
Comparing Strings
So far, we’ve just shown you how to use ==to compare two strings for equality.Y ou can
do some slightly more sophisticated comparisons using PHP .We’ve divided these com-parisons into two categories for you: partial matches and others.We deal with the othersfirst and then get into partial matching, which we need to further develop the SmartForm example.
Performing String Ordering: strcmp() ,strcasecmp() ,and
strnatcmp()
The strcmp() ,strcasecmp() ,and strnatcmp() functions can be used to order strings.
This capability is useful when you are sorting data.
The prototype for strcmp() is
int strcmp(string str1, string str2);
The function expects to receive two strings, which it compares. If they are equal, it will
return 0.If str1 comes after (or is greater than) str2 in lexicographic order, strcmp()
will return a number greater than zero. If str1 is less than str2,strcmp() will return a
number less than zero.This function is case sensitive.
The function strcasecmp() is identical except that it is not case sensitive.06 6728 ch04  9/2/04  1:14 PM  Page 116
117 Matching and Replacing Substrings with String Functions
The function strnatcmp() and its non–case sensitive twin, strnatcasecmp() ,w e r e
added in PHP 4.These functions compare strings according to a “natural ordering,”which is more the way a human would do it. For example,
strcmp() would order the
string “2”as greater than the string “12”because it is lexicographically greater. str-
natcmp() would order them the other way around.Y ou can read more about natural
ordering at
http://www.naturalordersort.org/
Testing String Length with strlen()
You can check the length of a string by using the strlen() function. If you pass it a
string, this function will return its length. For example, strlen(‘hello’)returns 5.
You can use this function for validating input data. Consider the email address on the
sample form, stored in $email .One basic way of validating an email address stored in
$email is to check its length. By our reasoning, the minimum length of an email address
is six characters—for example, a@a.to if you have a country code with no second-level
domains, a one-letter server name, and a one-letter email address.Therefore, an errorcould be produced if the address is not at least this length:
if (strlen($email) < 6)
{
echo ‘That email address is not valid ’;
exit;  // finish execution of PHP script
}
Clearly, this approach is a very simplistic way of validating this information.We look at
better ways in the next section.
Matching and Replacing Substrings with String
Functions
Checking whether a particular substring is present in a larger string is a common opera-
tion.This partial matching is usually more useful than testing for complete equality instrings.
In the Smart Form example, you want to look for certain key phrases in the customer
feedback and send the mail to the appropriate department. If you want to send emailsdiscussing Bob’s shops to the retail manager, for example, you want to know whether theword shopor derivatives thereof appear in the message.
Given the functions you have already looked at, you could use 
explode() or 
strtok() to retrieve the individual words in the message and then compare them using
the ==operator or strcmp() .
You could also do the same thing, however, with a single function call to one of the
string-matching or regular expression-matching functions.They search for a patterninside a string. Next, we look at each set of functions one by one.06 6728 ch04  9/2/04  1:14 PM  Page 117
118 Chapter 4 String Manipulation and Regular Expressions
Finding Strings in Strings: strstr() ,strchr() ,strrchr() ,
and stristr()
To find a string within another string, you can use any of the functions strstr() ,
strchr() ,strrchr() ,or stristr() .
The function strstr() ,which is the most generic, can be used to find a string or
character match within a longer string. In PHP , the strchr() function is exactly the
same as strstr() ,although its name implies that it is used to find a character in a string,
similar to the C version of this function. In PHP , either of these functions can be used tofind a string inside a string, including finding a string containing only a single character.
The prototype for 
strstr() is as follows:
string strstr(string haystack , string needle);
You pass the function a haystack to be searched and a needle to be found. If an exact
match of the needle is found, the function returns the haystack from the needle
onward; otherwise, it returns false .If the needle occurs more than once, the returned
string will start from the first occurrence of needle .
For example, in the Smart Form application, you can decide where to send the email
as follows:
$toaddress = ‘feedback@example.com ’;  // the default value
// Change the $toaddress if the criteria are met
if (strstr($feedback, ‘shop’))
$toaddress = ‘retail@example.com ’;
else if (strstr($feedback, ‘delivery ’))
$toaddress = ‘fulfillment@example.com ’;
else if (strstr($feedback, ‘bill’))
$toaddress = ‘accounts@example.com ’;
This code checks for certain keywords in the feedback and sends the mail to the appro-
priate person. If, for example, the customer feedback reads “I still haven’t received deliv-ery of my last order,” the string “delivery” will be detected and the feedback will be sentto 
fulfillment@example.com .
There are two variants on strstr() .The first variant is stristr() ,which is nearly
identical but is not case sensitive.This variation is useful for this application because thecustomer might type 
‘delivery ’,‘Delivery ’,or ‘DELIVERY ’.
The second variant is strrchr() ,which is again nearly identical, but returns the
haystack from the last occurrence of the needle onward.
Finding the Position of a Substring: strpos() and strrpos()
The functions strpos() and strrpos() operate in a similar fashion to strstr() ,
except, instead of returning a substring, they return the numerical position of a needle06 6728 ch04  9/2/04  1:14 PM  Page 118
119 Matching and Replacing Substrings with String Functions
within a haystack .Interestingly enough, the PHP manual now recommends using 
strpos() instead of strstr() to check for the presence of a string within a string
because it runs faster.
The strpos() function has the following prototype:
int strpos(string haystack , string needle, int [offset] );
The integer returned represents the position of the firstoccurrence of the needle within
the haystack .The first character is in position 0 as usual.
For example, the following code echoes the value 4to the browser:
$test = ‘Hello world ’;
echo strpos($test, ‘o’);
This code passes in only a single character as the needle ,but it can be a string of any
length.
The optional offset parameter specifies a point within the haystack to start search-
ing. For example,
echo strpos($test, ‘o’, 5);
This code echoes the value 7to the browser because PHP has started looking for the
character oat position 5 and therefore does not see the one at position 4.
The strrpos() function is almost identical but returns the position of the last occur-
rence of the needle in the haystack .
In any of these cases, if the needle is not in the string, strpos() or strrpos() will
return false .This result can be problematic because false in a weakly typed language
such as PHP is equivalent to 0—that is, the first character in a string.
You can avoid this problem by using the ===operator to test return values:
$result = strpos($test, ‘H’);
if ($result === false)
echo ‘Not found ’;
else
echo “Found at position $result ”;
Note that this approach works only in PHP 4 and later; in earlier versions, you could
test for false by testing the return value to see whether it was a string (that is, false ).
Replacing Substrings: str_replace() and substr_replace()
Find-and-replace functionality can be extremely useful with strings.Y ou can use find and
replace for personalizing documents generated by PHP—for example, by replacing
<<name>>with a person’s name and <<address>>with her address.Y ou can also use it
for censoring particular terms, such as in a discussion forum application, or even in theSmart Form application.Again, you can use string functions or regular expression func-tions for this purpose.06 6728 ch04  9/2/04  1:14 PM  Page 119
120 Chapter 4 String Manipulation and Regular Expressions
The most commonly used string function for replacement is str_replace() .It has
the following prototype:
mixed str_replace(mixed needle, mixed new_needle , mixed haystack [, int & count]));
This function replaces all the instances of needle in haystack with new_needle and
returns the new version of the haystack .The optional fourth parameter, count ,contains
the number of replacements made. Note that count was added in PHP5.
Note
As of PHP 4.0.5, you can pass all parameters as arrays, and the str_replace() function works remark-
ably intelligently. You can pass an array of words to be replaced, an array of words to replace them with(respectively), and an array of strings to apply these rules to. The function then returns an array of revisedstrings.
For example, because people can use the Smart Form to complain, they might use some
colorful words.As a programmer, you can easily prevent Bob’s various departments frombeing abused in that way if you have an array 
$offcolor that contains a number of
offensive words. Here is an example using str_replace() with an array:
$feedback = str_replace($offcolor, ‘%!@*’, $feedback);
The function substr_replace() finds and replaces a particular substring of a string
based on its position. It has the following prototype:
string substr_replace(string string, string replacement , 
int start, int [length] );
This function replaces part of the string string with the string replacement .Which
part is replaced depends on the values of the start and optional length parameters.
The start value represents an offset into the string where replacement should begin.
If it is zero or positive, it is an offset from the beginning of the string; if it is negative, itis an offset from the end of the string. For example, this line of code replaces the lastcharacter in 
$test with “X”:
$test = substr_replace($test, ‘X’, -1);
The length value is optional and represents the point at which PHP will stop replacing.
If you don’t supply this value, the string will be replaced from start to the end of the
string.
If length is zero, the replacement string will actually be inserted into the string with-
out overwriting the existing string.A positive length represents the number of charac-
ters that you want replaced with the new string; a negative length represents the point
at which you would like to stop replacing characters, counted from the end of the string.06 6728 ch04  9/2/04  1:14 PM  Page 120
121 Introducing Regular Expressions
Introducing Regular Expressions
PHP supports two styles of regular expression syntax: POSIX and Perl.The POSIX style
of regular expression is compiled into PHP by default, but you can use the Perl style bycompiling in the Perl-compatible regular expression (PCRE) library.We cover the sim-pler POSIX style here, but if you’re already a Perl programmer or want to learn moreabout PCRE, read the online manual at http://php.net.
Note
POSIX regular expressions are easier to learn faster, but they are not binary safe.
So far, all the pattern matching you’ve done has used the string functions.Y ou have beenlimited to exact matches or to exact substring matches. If you want to do more complexpattern matching, you should use regular expressions. Regular expressions are difficult tograsp at first but can be extremely useful.
The Basics
A regular expression is a way of describing a pattern in a piece of text.The exact (or lit-
eral) matches you’ve seen so far are a form of regular expression. For example, earlieryou searched for regular expression terms such as 
“shop”and “delivery ”.
Matching regular expressions in PHP is more like a strstr() match than an equal
comparison because you are matching a string somewhere within another string. (It canbe anywhere within that string unless you specify otherwise.) For example, the string
“shop”matches the regular expression “shop”.It also matches the regular expressions
“h”,“ho”,and so on.
You can use special characters to indicate a meta-meaning in addition to matching
characters exactly. For example, with special characters you can indicate that a patternmust occur at the start or end of a string, that part of a pattern can be repeated, or that
characters in a pattern must be of a particular type.Y ou can also match on literal occur-rences of special characters.We look at each of these variations next.
Character Sets and Classes
Using character sets immediately gives regular expressions more power than exact
matching expressions. Character sets can be used to match any character of a particulartype;they’re really a kind of wildcard.
First, you can use the 
.character as a wildcard for any other single character except a
newline ( \n). For example, the regular expression
.at
matches the strings ‘cat’,‘sat’,and ‘mat’,among others.This kind of wildcard
matching is often used for filename matching in operating systems.06 6728 ch04  9/2/04  1:14 PM  Page 121
122 Chapter 4 String Manipulation and Regular Expressions
With regular expressions, however, you can be more specific about the type of char-
acter you would like to match and can actually specify a set that a character must belongto. In the preceding example, the regular expression matches 
‘cat’and ‘mat’but also
matches ‘#at’.If you want to limit this to a character between aand z,you can specify
it as follows:
[a-z]at
Anything enclosed in the square brackets ( [and ])is a character class —a set of characters
to which a matched character must belong. Note that the expression in the squarebrackets matches only a single character.
You can list a set; for example,
[aeiou]
means any vowel.
You can also describe a range, as you just did using the special hyphen character, or a
set of ranges, as follows:
[a-zA-Z]
This set of ranges stands for any alphabetic character in upper- or lowercase.
You can also use sets to specify that a character cannot be a member of a set. For
example,
[^a-z]
matches any character that is notbetween aand z.The caret symbol ( ^) means notwhen
it is placed inside the square brackets. It has another meaning when used outside squarebrackets, which we look at shortly.
In addition to listing out sets and ranges, you can use a number of predefined character
classes in a regular expression.These classes are shown in Table 4.3.
Table 4.3 Character Classes for Use in POSIX-Style Regular Expressions
Class Matches
[[:alnum:]] Alphanumeric characters
[[:alpha:]] Alphabetic characters
[[:lower:]] Lowercase letters
[[:upper:]] Uppercase letters
[[:digit:]] Decimal digits
[[:xdigit:]] Hexadecimal digits
[[:punct:]] Punctuation
[[:blank:]] Tabs and spaces
[[:space:]] Whitespace characters
[[:cntrl:]] Control characters
[[:print:]] All printable characters
[[:graph:]] All printable characters except for space06 6728 ch04  9/2/04  1:14 PM  Page 122
123 Introducing Regular Expressions
Repetition
Often, you may want to specify that there might be multiple occurrences of a particular
string or class of character.Y ou can represent this using two special characters in yourregular expression.The 
*symbol means that the pattern can be repeated zero or more
times, and the +symbol means that the pattern can be repeated one or more times.The
symbol should appear directly after the part of the expression that it applies to. Forexample,
[[:alnum:]]+
means “at least one alphanumeric character.”
Subexpressions
Being able to split an expression into subexpressions is often useful so that you can, forexample, represent “at least one of these strings followed by exactly one of those.” Y oucan split expressions using parentheses, exactly the same way as you would in an arith-metic expression. For example,
(very )*large
matches ‘large’,‘very large ’,‘very very large ’,and so on.
Counted Subexpressions
You can specify how many times something can be repeated by using a numerical
expression in curly braces ( {}).Y ou can show an exact number of repetitions ( {3}means
exactly three repetitions), a range of repetitions ( {2, 4} means from two to four repeti-
tions), or an open-ended range of repetitions ( {2,} means at least two repetitions).
For example,
(very ){1, 3}
matches ‘very ‘,‘very very ‘and ‘very very very ‘.
Anchoring to the Beginning or End of a String
The pattern [a-z] will match any string containing a lowercase alphabetic character. It
does not matter whether the string is one character long or contains a single matchingcharacter in a longer string.
You also can specify whether a particular subexpression should appear at the start, the
end, or both.This capability is useful when you want to make sure that only your searchterm and nothing else appears in the string.
The caret symbol (
^) is used at the start of a regular expression to show that it must
appear at the beginning of a searched string, and $is used at the end of a regular expres-
sion to show that it must appear at the end.06 6728 ch04  9/2/04  1:14 PM  Page 123
124 Chapter 4 String Manipulation and Regular Expressions
For example, the following matches bobat the start of a string:
^bob
This pattern matches comat the end of a string:
com$
Finally, this pattern matches a string containing only a single character from ato z:
^[a-z]$
Branching
You can represent a choice in a regular expression with a vertical pipe. For example, if
you want to match com,edu,or net,you can use the following expression:
com|edu|net
Matching Literal Special Characters
If you want to match one of the special characters mentioned in the preceding sections,
such as .,{,or $,you must put a backslash ( \) in front of it. If you want to represent a
backslash, you must replace it with two backslashes ( \\).
Be careful to put your regular expression patterns in single-quoted strings in PHP .
Using regular expressions in double-quoted PHP strings adds unnecessary complications.PHP also uses the backslash to escape special characters—such as a backslash. If you wantto match a backslash in your pattern, you need to use two to indicate that it is a literalbackslash, not an escape code.
Similarly, if you want a literal backslash in a double-quoted PHP string, you need to
use two for the same reason.The somewhat confusing, cumulative result of these rules isthat a PHP string that represents a regular expression containing a literal backslash needsfour backslashes. The PHP interpreter will parse the four backslashes as two.Then theregular expression interpreter will parse the two as one.
The dollar sign is also a special character in double-quoted PHP strings and regular
expressions.T o get a literal 
$matched in a pattern, you would need “\\\$”.Because this
string is in double quotation marks, PHP will parse it as \$,which the regular expression
interpreter can then match against a dollar sign.
Reviewing the Special Characters
A summary of all the special characters is shown in Tables 4.4 and 4.5.Table 4.4 showsthe meaning of special characters outside square brackets, and Table 4.5 shows theirmeaning when used inside square brackets.06 6728 ch04  9/2/04  1:14 PM  Page 124
125 Introducing Regular Expressions
Table 4.4 Summary of Special Characters Used in POSIX Regular Expressions
Outside Square Brackets
Character Meaning
\ Escape character
^ Match at start of string
$ Match at end of string
. Match any character except newline ( \n)
| Start of alternative branch (read as OR)
( Start subpattern
) End subpattern
* Repeat zero or more times
+ Repeat one or more times
{ Start min/max quantifier
} End min/max quantifier
? Mark a subpattern as optional
Table 4.5 Summary of Special Characters Used in POSIX Regular Expressions Inside
Square Brackets
Character Meaning
\ Escape character
^ NOT, only if used in initial position
- Used to specify character ranges
Putting It All Together for the Smart Form
There are at least two possible uses of regular expressions in the Smart Form application.
The first use is to detect particular terms in the customer feedback.Y ou can be slightlysmarter about this using regular expressions. Using a string function, you would have toperform three different searches if you wanted to match on 
‘shop’,‘customer
service’,or ‘retail’.With a regular expression, you can match all three:
shop|customer service|retail
The second use is to validate customer email addresses in the application by encoding
the standardized format of an email address in a regular expression.The format includessome alphanumeric or punctuation characters, followed by an 
@symbol, followed by a
string of alphanumeric and hyphen characters, followed by a dot, followed by morealphanumeric and hyphen characters and possibly more dots, up until the end of thestring, which encodes as follows:
^[a-zA-Z0-9_\-.]+@[a-zA-Z0-9\-]+\.[a-zA-Z0-9\-.]+$06 6728 ch04  9/2/04  1:14 PM  Page 125
126 Chapter 4 String Manipulation and Regular Expressions
The subexpression ^[a-zA-Z0-9_\-.]+ means “start the string with at least one letter,
number, underscore, hyphen, or dot, or some combination of those.” Note that when a
dot is used at the beginning or end of a character class, it loses its special wildcard mean-ing and becomes just a literal dot.
The 
@symbol matches a literal @.
The subexpression [a-zA-Z0-9\-]+ matches the first part of the hostname including
alphanumeric characters and hyphens. Note that you slash out the hyphen because it’s aspecial character inside square brackets.
The 
\.combination matches a literal dot ( .).We are using a dot outside character
classes, so we need to escape it to match only a literal dot.
The subexpression [a-zA-Z0-9\-\.]+$ matches the rest of a domain name, including
letters, numbers, hyphens, and more dots if required, up until the end of the string.
A bit of analysis shows that you can produce invalid email addresses that will still
match this regular expression. It is almost impossible to catch them all, but this willimprove the situation a little.Y ou can refine this expression in many ways.Y ou can, forexample, list valid top-level domains (TLDs). Be careful when making things morerestrictive, though, because a validation function that rejects 1% of valid data is far more
annoying than one that allows through 10% of invalid data.
Now that you have read about regular expressions, you’re ready to look at the PHP
functions that use them.
Finding Substrings with Regular Expressions
Finding substrings is the main application of the regular expressions you just developed.The two functions available in PHP for matching POSIX-style regular expressions are
ereg() and eregi() .The ereg() function has the following prototype:
int ereg(string pattern, string search, array [ matches]);
This function searches the search string, looking for matches to the regular expression
in pattern .If matches are found for subexpressions of pattern ,they will be stored in
the array matches ,one subexpression per array element.
The eregi() function is identical except that it is not case sensitive.
You can adapt the Smart Form example to use regular expressions as follows:
if (!eregi( ‘^[a-zA-Z0-9_\-\.]+@[a-zA-Z0-9\-]+\.[a-zA-Z0-9\-\.]+$ ’, $email))
{
echo ‘That is not a valid email address.  Please return to the ’
.’previous page and try again. ’;
exit;
}
$toaddress = ‘feedback@example.com ’;  // the default value
if (eregi( ‘shop|customer service|retail ’, $feedback))
$toaddress = ‘retail@example.com ’;
else if (eregi( ‘deliver|fulfill ’, $feedback))06 6728 ch04  9/2/04  1:14 PM  Page 126
127 Comparing String Functions and Regular Expression Functions
$toaddress = ‘fulfillment@example.com ’;
else if (eregi( ‘bill|account ’, $feedback))
$toaddress = ‘accounts@example.com ’;
if (eregi( ‘bigcustomer\.com ’, $email))
$toaddress = ‘bob@example.com ’;
Replacing Substrings with Regular Expressions
You can also use regular expressions to find and replace substrings in the same way as
you used str_replace() .The two functions available for this task are ereg_replace()
and eregi_replace() .The function ereg_replace() has the following prototype:
string ereg_replace(string pattern, string replacement , string search);
This function searches for the regular expression pattern in the search string and
replaces it with the string replacement .
The function eregi_replace() is identical but, again, is not case sensitive.
Splitting Strings with Regular Expressions
Another useful regular expression function is split() ,which has the following proto-
type:
array split(string pattern, string search[, int max]);
This function splits the string search into substrings on the regular expression pattern
and returns the substrings in an array.The maxinteger limits the number of items that
can go into the array.
This function can be useful for splitting up email addresses, domain names, or dates.
For example,
$address = ‘username@example.com ’;
$arr = split ( ‘\.|@’, $address);
while (list($key, $value) = each ($arr))
echo ‘<br />’.$value;
This example splits the hostname into its five components and prints each on a separate
line.
Comparing String Functions and Regular
Expression Functions
In general, the regular expression functions run less efficiently than the string functions
with similar functionality. If your task is simple enough to use a string expression, do so.This may not be true for tasks that can be performed with a single regular expressionbut multiple string functions.06 6728 ch04  9/2/04  1:14 PM  Page 127
128 Chapter 4 String Manipulation and Regular Expressions
Further Reading
PHP has many string functions.We covered the more useful ones in this chapter, but if
you have a particular need (such as translating characters into Cyrillic), check the PHP
manual online to see whether PHP has the function for you.
The amount of material available on regular expressions is enormous.Y ou can start
with the manpage for regexp if you are using Unix, and you can also find some terrific
articles at devshed.com and phpbuilder.com.
At Zend’s website, you can look at a more complex and powerful email validation
function than the one we developed here. It is called MailVal() and is available at
http://www.zend.com/codex.php?id=88&single=1.
Regular expressions take a while to sink in; the more examples you look at and run,
the more confident you will be using them.
Next
In the next chapter, we discuss several ways you can use PHP to save programming timeand effort and prevent redundancy by reusing pre-existing code.06 6728 ch04  9/2/04  1:14 PM  Page 128
5
Reusing Code and Writing
Functions
THIS CHAPTER EXPLAINS HOW REUSING CODE leads to more consistent, reliable, main-
tainable code, with less effort.We demonstrate techniques for modularizing and reusingcode, beginning with the simple use of 
require() and include() to use the same code
on more than one page.We explain why these includes are superior to server-sideincludes.The example given here covers using include files to get a consistent look andfeel across your site.We also explain how you can write and call your own functionsusing page and form generation functions as examples.
Key topics covered in this chapter include
nReusing code
nUsing require() and include()
nIntroducing functions
nDefining functions
nUsing parameters
nUnderstanding scope
nReturning values
nCalling by reference versus calling by value
nImplementing recursion
Reusing Code
One of the goals of software engineers is to reuse code in lieu of writing new code.
The reason for this is not that software engineers are a particularly lazy group. Reusingexisting code reduces costs, increases reliability, and improves consistency. Ideally, a newproject is created by combining existing reusable components, with a minimum of development from scratch.07 6728 ch05  9/2/04  1:19 PM  Page 129
130 Chapter 5 Reusing Code and Writing Functions
Cost
Over the useful life of a piece of software, significantly more time will be spent main-
taining, modifying, testing, and documenting it than was originally spent writing it. Ifyou are writing commercial code, you should attempt to limit the number of lines in use
within the organization. One of the most practical ways to achieve this goal is to reusecode already in use instead of writing a slightly different version of the same code for anew task. Less code means lower costs. If existing software meets the requirements of thenew project, acquire it.The cost of buying existing software is almost always less than thecost of developing an equivalent product.Tread carefully, though, if existing softwarealmost meets your requirements. Modifying existing code can be more difficult than
writing new code.
Reliability
If a module of code is in use somewhere in your organization, it has presumably alreadybeen thoroughly tested. Even if this module contains only a few lines, there is a possibili-ty that, if you rewrite it, you will either overlook something that the original authorincorporated or something that was added to the original code after a defect was foundduring testing. Existing, mature code is usually more reliable than fresh,“green” code.
Consistency
The external interfaces to your system, including both user interfaces and interfaces tooutside systems, should be consistent.Writing new code consistent with the way otherparts of the system function takes a will and a deliberate effort. If you are reusing codethat runs another part of the system, your functionality should automatically be consistent.
On top of these advantages, reusing code is less work for you, as long as the original
code was modular and well written.While you work, try to recognize sections of yourcode that you might be able to call on again in the future.
Using require() and include()
PHP provides two very simple, yet very useful, statements to allow you to reuse any typeof code. Using a 
require() or include() statement, you can load a file into your PHP
script.The file can contain anything you would normally type in a script including PHPstatements, text, HTML tags, PHP functions, or PHP classes.
These statements work similarly to the server-side includes offered by many web
servers and
#include statements in C or C++.07 6728 ch05  9/2/04  1:19 PM  Page 130
131 Using require() and include()
require()
The following code is stored in a file named reusable.php :
<?php
echo ‘Here is a very simple PHP statement.<br /> ’;
?>
The following code is stored in a file named main.php:
<?php
echo ‘This is the main file.<br /> ’;
require( ‘reusable.php ’);
echo ‘The script will end now.<br /> ’;
?>
If you load reusable.php ,you probably won’t be surprised when the message Here is a
very simple PHP statement. appears in your browser. If you load main.php ,something
a little more interesting happens.The output of this script is shown in Figure 5.1.
Figure 5.1 The output of main.php shows the result of the 
require() statement.
A file is needed to use a require() statement. In the preceding example, you used the
file named reusable.php .When you run the script, the require() statement
require( ‘reusable.php ’);
07 6728 ch05  9/2/04  1:19 PM  Page 131
132 Chapter 5 Reusing Code and Writing Functions
is replaced by the contents of the requested file, and the script is then executed.This
means that when you load main.php ,it runs as though the script were written as 
follows:
<?php
echo ‘This is the main file.<br /> ’;
echo ‘Here is a very simple PHP statement.<br />’;echo ‘The script will end now.<br /> ’;
?>
When using require() ,you need to note the different ways filename extensions and
PHP tags are handled.
Filename Extensions and require()
PHP does not look at the filename extension on the required file.This means that you
can name your file whatever you choose as long as you do not plan to call it directly.When you use 
require() to load the file, it effectively becomes part of a PHP file and
is executed as such.
Normally, PHP statements would not be processed if they were in a file called, for
example, page.html .PHP is usually called upon to parse only files with defined exten-
sions such as .php.(This may be changed in your web server configuration file.)
However, if you load page.html via a require() statement, any PHP inside it will be
processed.Therefore, you can use any extension you prefer for include files, but stickingto a sensible convention such as 
.inc or .php would be a good idea.
One issue to be aware of is that if files ending in .inc or some other nonstandard
extension are stored in the web document tree and users directly load them in thebrowser, they will be able to see the code in plain text, including any passwords. It istherefore important to either store included files outside the document tree or use thestandard extensions.
PHP Tags and require()
In the example, the reusable file ( reusable.php ) was written as follows:
<?php
echo ‘Here is a very simple PHP statement.<br /> ’;
?>
The PHP code was placed within the file in PHP tags.Y ou need to follow this conven-
tion if you want PHP code within a required file treated as PHP code. If you do notopen a PHP tag, your code will just be treated as text or HTML and will not be executed.07 6728 ch05  9/2/04  1:19 PM  Page 132
133 Using require() for Website Templates
Using require() for Website Templates
If your company’s web pages have a consistent look and feel, you can use PHP to add
the template and standard elements to pages using require() .
For example, the website of fictional company TLA Consulting has a number of
pages, all with the look and feel shown in Figure 5.2.When a new page is needed, thedeveloper can open an existing page, cut out the existing text from the middle of thefile, enter new text, and save the file under a new name.
Figure 5.2 TLA Consulting has a standard look and feel for 
all its web pages.
Consider this scenario:The website has been around for a while, and the company now
has tens, hundreds, or maybe even thousands of pages all following a common style.Adecision is made to change part of the standard look; the change might be somethingminor, such as adding an email address to the footer of each page or adding a single newentry to the navigation menu. Do you want to make that minor change on tens, hun-dreds, or even thousands of pages?
Directly reusing the sections of HTML common to all pages is a much better
approach than cutting and pasting on tens, hundreds, or even thousands of pages.Thesource code for the home page (
home.html ) shown in Figure 5.2 is given in Listing 5.1.
Listing 5.1 home.html —The HTML That Produces TLA Consulting’s Home Page
<html>
<head>
<title>TLA Consulting Pty Ltd</title><style type= ”text/css ”>
h1 {color:white; font-size:24pt; text-align:center;
font-family:arial,sans-serif}
07 6728 ch05  9/2/04  1:19 PM  Page 133
134 Chapter 5 Reusing Code and Writing Functions
.menu {color:white; font-size:12pt; text-align:center;
font-family:arial,sans-serif; font-weight:bold}
td {background:black}p {color:black; font-size:12pt; text-align:justify;
font-family:arial,sans-serif}
p.foot {color:white; font-size:9pt; text-align:center;
font-family:arial,sans-serif; font-weight:bold}
a:link,a:visited,a:active {color:white}
</style>
</head><body>
<!-- page header -->
<table width= ”100%”cellpadding= ”12”cellspacing= ”0”border=”0”>
<tr bgcolor= ”black”>
<td align= ”left”><img src= ”logo.gif ”alt=”TLA logo ”height=”70”
width=”70”></td>
<td>
<h1>TLA Consulting</h1>
</td><td align= ”right”><img src= ”logo.gif ”alt=”TLA logo ”height=”70”
width=”70”></td>
</tr></table>
<!-- menu -->
<table width= ”100%”bgcolor= ”white”cellpadding= ”4”cellspacing= ”4”>
<tr >
<td width= ”25%”>
<img src= ”s-logo.gif ”alt=””height=”20”width=”20”> 
<span class= ”menu”>Home</span></td>
<td width= ”25%”>
<img src= ”s-logo.gif ”alt=””height=”20”width=”20”> 
<span class= ”menu”>Contact</span></td>
<td width= ”25%”>
<img src= ”s-logo.gif ”alt=””height=”20”width=”20”> 
<span class= ”menu”>Services</span></td>
<td width= ”25%”>
<img src= ”s-logo.gif ”alt=””height=”20”width=”20”> 
<span class= ”menu”>Site Map</span></td>
</tr></table>Listing 5.1 Continued07 6728 ch05  9/2/04  1:19 PM  Page 134
135 Using require() for Website Templates
<!-- page content -->
<p>Welcome to the home of TLA Consulting.Please take some time to get to know us.</p><p>We specialize in serving your business needsand hope to hear from you soon.</p>
<!-- page footer -->
<table width= ”100%”bgcolor= ”black”cellpadding= ”12”border=”0”>
<tr>
<td>
<p class= ”foot”>&copy; TLA Consulting Pty Ltd.</p>
<p class= ”foot”>Please see our 
<a href= ”legal.php ”>legal information page</a></p>
</td>
</tr></table>
</body>
</html>
You can see in Listing 5.1 that a number of distinct sections of code exist in this file.The
HTML head contains cascading style sheet (CSS) definitions used by the page.The sec-tion labeled “page header” displays the company name and logo,“menu” creates thepage’s navigation bar, and “page content” is text unique to this page. Below that is thepage footer.Y ou can usefully split this file and name the parts 
header.inc ,home.php ,
and footer.inc .Both header.inc and footer.inc contain code that will be reused on
other pages.
The file home.php is a replacement for home.html and contains the unique page con-
tent and two require() statements shown in Listing 5.2.
Listing 5.2 home.php —The PHP That Produces TLA’s Home Page
<?php
require( ‘header.inc ’);
?>
<!-- page content --><p>Welcome to the home of TLA Consulting.Please take some time to get to know us.</p><p>We specialize in serving your business needsand hope to hear from you soon.</p>
<?php
require( ‘footer.inc ’);
?>Listing 5.1 Continued07 6728 ch05  9/2/04  1:19 PM  Page 135
136 Chapter 5 Reusing Code and Writing Functions
The require() statements in home.php load header.inc and footer.inc .
As mentioned previously, the name given to these files does not affect how they are
processed when you call them via require() .A common, but entirely optional, conven-
tion is to call the partial files that will end up included in other files something .inc
(here,incstands for include). It is also common, and a good idea, to place your include
files in a directory that can be seen by your scripts but does not permit your include filesto be loaded individually via the web server—that is, outside the web document tree.This setup prevents these files from being loaded individually, which would either (a)probably produce some errors if the file extension is 
.php but contains only a partial
page or script, or (b) allow people to read your source code if you have used anotherextension.
The file 
header.inc contains the CSS definitions that the page uses, the tables that
display the company name, and navigation menus, as shown in Listing 5.3.
Listing 5.3 header.inc —The Reusable Header for All TLA Web Pages
<html>
<head>
<title>TLA Consulting Pty Ltd</title><style type= ”text/css ”>
h1 {color:white; font-size:24pt; text-align:center;
font-family:arial,sans-serif}
.menu {color:white; font-size:12pt; text-align:center;
font-family:arial,sans-serif; font-weight:bold}
td {background:black}p {color:black; font-size:12pt; text-align:justify;
font-family:arial,sans-serif}
p.foot {color:white; font-size:9pt; text-align:center;
font-family:arial,sans-serif; font-weight:bold}
a:link,a:visited,a:active {color:white}
</style>
</head><body>
<!-- page header -->
<table width= ”100%”cellpadding= ”12”cellspacing= ”0”border=”0”>
<tr bgcolor= ”black”>
<td align= ”left”><img src= ”logo.gif ”alt=”TLA logo ”height=”70”
width=”70”></td>
<td>
<h1>TLA Consulting</h1>
</td><td align= ”right”><img src= ”logo.gif ”alt=”TLA logo ”height=”70”
width=”70”></td>
</tr></table>07 6728 ch05  9/2/04  1:19 PM  Page 136
137 Using require() for Website Templates
<!-- menu -->
<table width= ”100%”bgcolor= ”white”cellpadding= ”4”cellspacing= ”4”>
<tr >
<td width= ”25%”>
<img src= ”s-logo.gif ”alt=””height=”20”width=”20”>
<span class= ”menu”>Home</span></td>
<td width= ”25%”>
<img src= ”s-logo.gif ”alt=””height=”20”width=”20”>
<span class= ”menu”>Contact</span></td>
<td width= ”25%”>
<img src= ”s-logo.gif ”alt=””height=”20”width=”20”>
<span class= ”menu”>Services</span></td>
<td width= ”25%”>
<img src= ”s-logo.gif ”alt=””height=”20”width=”20”>
<span class= ”menu”>Site Map</span></td>
</tr>
</table>
The file footer.inc contains the table that displays the footer at the bottom of each
page.This file is shown in Listing 5.4.
Listing 5.4 footer.inc — The Reusable Footer for All TLA Web Pages
<!-- page footer -->
<table width= ”100%”bgcolor= ”black”cellpadding= ”12”border=”0”>
<tr>
<td>
<p class= ”foot”>&copy; TLA Consulting Pty Ltd.</p>
<p class= ”foot”>Please see our <a href= ”legal.php ”>
legal information page</a></p>
</td>
</tr></table>
</body>
</html>
This approach gives you a consistent-looking website very easily, and you can make a
new page in the same style by typing something like this:
<?php require( ‘header.inc ’); ?>
Here is the content for this page<?php require( ‘footer.inc ’); ?>Listing 5.3 Continued07 6728 ch05  9/2/04  1:19 PM  Page 137
138 Chapter 5 Reusing Code and Writing Functions
Most importantly, even after you have created many pages using this header and footer,
you can easily change the header and footer files.Whether you are making a minor text
change or completely redesigning the look of the site, you need to make the changeonly once.Y ou do not need to separately alter every page in the site because each page isloading in the header and footer files.
The example shown here uses only plain HTML in the body, header, and footer.This
need not be the case.Within these files, you could use PHP statements to dynamicallygenerate parts of the page.
If you want to be sure that a file will be treated as plain text or HTML, and not have
any PHP executed, you may want to use 
readfile() instead. This function echoes the
content of a file without parsing it.This can be an important safety precaution if you areusing user-provided text.
Using include()
The statements require() and include() are almost identical.The only difference
between them is that when they fail, the require() construct gives a fatal error, whereas
the include() construct gives only a warning.
Using require_once() and include_once()
There are two variations on require() and include() ,called require_once() and
include_once() ,respectively.The purpose of these constructs is, as you might guess, to
ensure that an included file can be included only once. For the examples we have lookedat so far—headers and footers—this functionality is not particularly useful.
This functionality becomes useful when you begin using 
require() and include()
to include libraries of functions. Using these constructs protects you from accidentallyincluding the same function library twice, thus redefining functions and causing an error.
Using auto_prepend_file and auto_append_file
If you want to use require() or include() to add your header and footer to every
page, you can do it another way.T wo of the configuration options in the php.ini file are
auto_prepend_file and auto_append_file .By setting these options to point to the
header and footer files, you ensure that they will be loaded before and after every page.Files included using these directives behave as though they had been added using an
include() statement; that is, if the file is missing, a warning will be issued.
For Windows, the settings resemble the following:
auto_prepend_file = “c:/Apache/include/header.inc ”
auto_append_file = “c:/Apache/include/footer.inc ”
For Unix, they resemble the following:
auto_prepend_file = “/home/username/include/header.inc ”
auto_append_file = “/home/username/include/footer.inc ”07 6728 ch05  9/2/04  1:19 PM  Page 138
139 Using Functions in PHP
If you use these directives, you do not need to type include() statements, but the head-
ers and footers will no longer be optional on pages.
If you are using an Apache web server, you can change various configuration options
like these for individual directories.T o do this, you must have your server set up to allowits main configuration file(s) to be overridden.T o set up auto prepending and appendingfor a directory, create a file called 
.htaccess in the directory.The file needs to contain
the following two lines:
php_value auto_prepend_file “/home/username/include/header.inc ”
php_value auto_append_file “/home/username/include/footer.inc ”
Note that the syntax is slightly different from the same option in php.ini :As well as
php_value at the start of the line, there is no equal sign.A number of other php.ini
configuration settings can be altered in this way, too.
Setting options in the .htaccess file rather than in either php.ini or your web serv-
er’s configuration file gives you a lot of flexibility.Y ou can alter settings on a sharedmachine that affect only your directories.Y ou do not need to restart the web server, andyou do not need administrator access.A drawback to the 
.htaccess method is that the
files are read and parsed each time a file in that directory is requested rather than justonce at startup, so there is a performance penalty.
Using Functions in PHP
Functions exist in most programming languages; they separate code that performs a sin-gle, well-defined task.This makes the code easier to read and allows you to reuse thecode each time you need to perform the same task.
A function is a self-contained module of code that prescribes a calling interface, per-
forms some task, and optionally returns a result.
You have seen a number of functions already. In preceding chapters, we routinely
called a number of the functions built into PHP .We also wrote a few simple functionsbut glossed over the details. In the following sections, we cover calling and writing func-
tions in more detail.
Calling Functions
The following line is the simplest possible call to a function:
function_name();
This line calls a function named function_name that does not require parameters.This
line of code ignores any value that might be returned by this function.
A number of functions are called in exactly this way.The function phpinfo() is often
useful in testing because it displays the installed version of PHP , information about PHP ,the web server setup, and the values of various PHP and server variables.This functiondoes not take any parameters, and you generally ignore its return value, so a call to
phpinfo() is simply as follows:07 6728 ch05  9/2/04  1:19 PM  Page 139
140 Chapter 5 Reusing Code and Writing Functions
phpinfo();
Most functions, however, do require one or more parameters, which are the inputs to
functions.Y ou pass parameters by placing data or the name of a variable holding datainside parentheses after the function name.Y ou could call a function that accepts a singleparameter as follows:
function_name( ‘parameter ’);
In this case, the parameter used is a string containing only the word parameter ,but the
following calls may also be fine depending on what parameters the function expects:
function_name(2);
function_name(7.993);function_name($variable);
In the last line, $variable might be any type of PHP variable, including an array.
Aparameter can be any type of data, but particular functions usually require particular
data types.
You can see how many parameters a function takes, what each represents, and what
data type each needs to be from the function’s prototype .We often show the prototype
when we describe a function.
This is the prototype for the function fopen() :
resource fopen ( string filename , string mode
[, bool use_include_path [, resource zcontext ]])
The prototype tells you a number of things, and it is important that you know how to
correctly interpret these specifications. In this case, the word resource before the func-
tion name tells you that this function will return a resource (that is, an open file handle).The function parameters are inside the parentheses. In the case of 
fopen() ,four parame-
ters are shown in the prototype.The parameters filename and mode are strings, the
parameter use_include_path is a Boolean, and the parameter zcontext is a resource.
The square brackets around use_include_path and zcontext indicate that these param-
eters are optional.Y ou can provide values for optional parameters, or you can choose toignore them and the default value will be used. Note, however, that for a function withmore than one optional parameter, you can only leave out parameters from the right. Forexample, when using 
fopen() ,you can leave out zcontext or you can leave out both
use_include_path and zcontext ;however,you cannot leave out use_include_path
but provide zcontext .
After reading the prototype for this function, you know that the following code frag-
ment is a valid call to fopen() :
$name = ‘myfile.txt ’;
$openmode = ‘r’;
$fp = fopen($name, $openmode);07 6728 ch05  9/2/04  1:19 PM  Page 140
141 Using Functions in PHP
This code calls the function named fopen() .The value returned by the function will be
stored in the variable $fp.For this example, we chose to pass to the function a variable
called $name containing a string representing the file we want to open and a variable
called $openmode containing a string representing the mode in which we want to open
the file.We chose not to provide the optional third and fourth parameters.
Calling an Undefined Function
If you attempt to call a function that does not exist, you will get an error message, asshown in Figure 5.3.
Figure 5.3 This error message is the result of calling a function that 
does not exist.
The error messages that PHP gives are usually very useful.The one in the figure tells
you exactly in which file the error occurred, in which line of the script it occurred, and
the name of the function you attempted to call.This information should make it fairlyeasy to find and correct the problem.
Check these two things if you see this error message:
nIs the function name spelled correctly?
nDoes the function exist in the version of PHP you are using?
You might not always remember how a function name is spelled. For instance, some
two-word function names have an underscore between the words, and some do not.The function 
stripslashes() runs the two words together, whereas the function
strip_tags() separates the words with an underscore. Misspelling the name of a 
function in a function call results in an error, as shown in Figure 5.3.
Some functions used in this book do not exist in PHP4 because this book assumes
that you are using PHP5. In each new version, new functions are defined, and if you areusing an older version, the added functionality and performance justify an upgrade.T osee when a particular function was added, you can check the online manual.Attemptingto call a function that is not declared in the version you are running results in an errorsuch as the one shown in Figure 5.3.
07 6728 ch05  9/2/04  1:19 PM  Page 141
142 Chapter 5 Reusing Code and Writing Functions
One other reason you may see this error message is that the function you are calling
is part of a PHP extension that is not loaded. For example, if you try to use functionsfrom the gd (image manipulation) library and you have not installed gd, you will see thismessage.
Understanding Case and Function Names
Note that calls to functions are notcase sensitive, so calls to function_name() ,
Function_Name() ,or FUNCTION_NAME() are all valid and all have the same result.Y ou are
free to capitalize in any way you find easy to read, but you should aim to be consistent.The convention used in this book, and most other PHP documentation, is to use alllowercase.
It is important to note that function names behave differently to variable names.
Variable names arecase sensitive, so 
$Name and $name are two separate variables, but
Name() and name() are the same function.
Understanding Why You Should Define Your
Own Functions
In the preceding chapters, you saw many examples using some of PHP’s built-in func-
tions. However, the real power of a programming language comes from being able tocreate your own functions.
The functions built into PHP enable you to interact with files, use a database, create
graphics, and connect to other servers. However, in your career, you often may need to
do something that the language’s creators did not foresee.
Fortunately, you are not limited to using the built-in functions; you can write your
own to perform any task that you like.Y our code will probably be a mixture of existing
functions combined with your own logic to perform a task for you. If you are writing ablock of code for a task that you are likely to want to reuse in a number of places in a
script or in a number of scripts, you would be wise to declare that block as a function.
Declaring a function allows you to use your own code in the same way as the built-in
functions.Y ou simply call your function and provide it with the necessary parameters.Thismeans that you can call and reuse the same function many times throughout your script.
Examining Basic Function Structure
A function declaration creates or declares a new function.The declaration begins with the
keyword function ,provides the function name and parameters required, and contains
the code that will be executed each time this function is called.
Here is the declaration of a trivial function:
function my_function()
{
echo ‘My function was called ’;
}07 6728 ch05  9/2/04  1:19 PM  Page 142
143 Examining Basic Function Structure
This function declaration begins with function so that human readers and the PHP
parser know that what follows is a user-defined function.The function name is
my_function .You can call the new function with the following statement:
my_function();
As you probably guessed, calling this function results in the text My function was
called. appearing in the viewer’s browser.
Built-in functions are available to all PHP scripts, but if you declare your own func-
tions, they are available only to the script(s) in which they were declared. It is a goodidea to have a file or set of files containing your commonly used functions.Y ou can thenhave a 
require() statement in your scripts to make your functions available when
required.
Within a function, curly braces enclose the code that performs the task you require.
Between these braces, you can have anything that is legal elsewhere in a PHP script,including function calls, declarations of new variables, functions,
require() or
include() statements, class declarations, and plain HTML. If you want to exit PHP
within a function and type plain HTML, you do so the same way as anywhere else inthe script—with a closing PHP tag followed by the HTML.The following is a legalmodification of the preceding example and produces the same output:
<?php
function my_function(){
?>My function was called<?php
}
?>
Note that the PHP code is enclosed within matching opening and closing PHP tags. For
most of the small code fragment examples in this book, we do not show these tags.Weshow them here because they are required within the example as well as above andbelow it.
Naming Your Function
The most important point to consider when naming your functions is that the nameshould be short but descriptive. If your function creates a page header,
pageheader() or
page_header() might be good names.
A few restrictions follow:
nYour function cannot have the same name as an existing function.
nYour function name can contain only letters, digits, and underscores.
nYour function name cannot begin with a digit.07 6728 ch05  9/2/04  1:19 PM  Page 143
144 Chapter 5 Reusing Code and Writing Functions
Many languages do allow you to reuse function names.This feature is called function over-
loading .However,PHP does not support function overloading, so your function cannot
have the same name as any built-in function or an existing user-defined function. Notethat although every PHP script knows about all the built-in functions, user-definedfunctions exist only in scripts where they are declared.This means that you could reuse a function name in a different file, but this would lead to confusion and should 
be avoided.
The following function names are legal:
name()
name2()name_three()_namefour()
These names are illegal:
5name()name-six()fopen()
(The last would be legal if it didn’t already exist.)
Note that although $name is not a valid name for a function, a function call like
$name();
may well execute, depending on the value of $name.The reason is that PHP takes the
value stored in $name,looks for a function with that name, and tries to call it for you.
This type of function is referred to as a variable function and may occasionally be useful 
to you.
Using Parameters
To do their work, most functions require one or more parameters.A parameter allows
you to pass data into a function. Here is a sample function that requires a parameter; it
takes a one-dimensional array and displays it as a table:
function create_table($data)
{
echo ‘<table border = 1> ’;
reset($data); // Remember this is used to point to the beginning$value = current($data);while ($value){
echo “<tr><td>$value</td></tr>\n ”;
$value = next($data);
}echo ‘</table> ’;
}07 6728 ch05  9/2/04  1:19 PM  Page 144
145 Using Parameters
If you call the create_table() function
$my_array = array( ‘Line one. ’,’Line two. ’,’Line three. ’);
create_table($my_array);
you see output as shown in Figure 5.4.
Figure 5.4 This HTML table is the result of calling create_table() .
Passing a parameter allows you to get data created outside the function—in this case, the
array $data —into the function.
As with built-in functions, user-defined functions can have multiple parameters and
optional parameters.Y ou can improve the create_table() function in many ways, but
one way might be to allow the caller to specify the border or other attributes of thetable. Here is an improved version of the function; it is similar but allows you to option-ally set the table’s border width, cellspacing, and cellpadding.
function create_table2( $data, $border = 1, $cellpadding = 4, $cellspacing = 4 )
{
echo “<table border = $border cellpadding = $cellpadding ”
.”cellspacing = $cellspacing> ”;
reset($data);$value = current($data);while ($value){
echo “<tr><td>$value</td></tr>\n ”;
$value = next($data);
}echo ‘</table> ’;
}
The first parameter for create_table2() is still required.The next three are optional
because default values are defined for them.Y ou can create similar output to that shownin Figure 5.4 with this call to 
create_table2() :
create_table2($my_array);
07 6728 ch05  9/2/04  1:19 PM  Page 145
146 Chapter 5 Reusing Code and Writing Functions
If you want the same data displayed in a more spread-out style, you could call the new
function as follows:
create_table2($my_array, 3, 8, 8);
Optional values do not all need to be provided; you can provide some and ignore some.Parameters are assigned from left to right.
Keep in mind that you cannot leave out one optional parameter but include a later
listed one. In this example, if you want to pass a value for 
cellspacing ,you will have to
pass one for cellpadding as well.This is a common cause of programming errors. It is
also the reason that optional parameters are specified last in any list of parameters.
The function call
create_table2($my_array, 3);
is perfectly legal and results in $border being set to 3and $cellpadding and
$cellspacing being set to their defaults.
You also can declare functions that accept a variable number of parameters.Y ou can
find out how many parameters have been passed and what their values are with the aidof three helper functions:
func_num_args() ,func_get_arg() ,and func_get_args() .
For example, consider this function:
function var_args()
{
echo “Number of parameters: ”;
echo func_num_args();
echo ‘<br />’;
$args = func_get_args();foreach ($args as $arg)
echo $arg. ’<br />’;
}
This function reports the number of parameters passed to it and prints out each of them.
The func_num_args() function returns the number of arguments passed in.The
func_get_args() function returns an array of the arguments.Alternatively, you can
access the arguments one at a time using the func_get_arg() function, passing it the
argument number you want to access. (Arguments are numbered starting from zero.)
Understanding Scope
Youmight have noticed that when we needed to use variables inside a required or
included file, we simply declared them in the script before the require() or include()
statement.When using a function, we explicitly passed those variables into the functionpartly because no mechanism exists for explicitly passing variables to a required orincluded file and partly because variable scope behaves differently for functions.07 6728 ch05  9/2/04  1:19 PM  Page 146
147 Understanding Scope
A variable’s scope controls where that variable is visible and usable. Different pro-
gramming languages have different rules that set the scope of variables. PHP has fairly
simple rules:
nVariables declared inside a function are in scope from the statement in which they
are declared to the closing brace at the end of the function.This is called function
scope.These variables are called local variables .
nVariables declared outside functions are in scope from the statement in which they
are declared to the end of the file, but not inside functions .This is called global scope .
These variables are called global variables .
nThe special superglobal variables are visible both inside and outside functions. (See
Chapter 1,“PHP Crash Course,” for more information on these variables.)
nUsing require() and include() statements does not affect scope. If the statement
is used within a function, function scope applies. If it is not inside a function, glob-al scope applies.
nThe keyword global can be used to manually specify that a variable defined or
used within a function will have global scope.
nVariables can be manually deleted by calling unset($variable_name ).A v a riable
is no longer in scope if it has been unset.
The following examples might help to clarify scope further.
The following code produces no output. Here, you declare a variable called $var
inside the function fn().Because this variable is declared inside a function, it has func-
tion scope and exists only from where it is declared until the end of the function.Whenyou again refer to 
$var outside the function, a new variable called $var is created.This
new variable has global scope and will be visible until the end of the file. Unfortunately,if the only statement you use with this new 
$var variable is echo,it will never have a
value.
function fn()
{
$var = ‘contents ’;
}fn();echo $var;
The following example is the inverse. Here, you declare a variable outside the function
and then try to use it within a function:
function fn()
{
echo ‘inside the function, $var = ‘.$var.’<br />’;
$var = ‘contents 2 ’;
echo ‘inside the function, $var = ‘.$var.’<br />’;
}07 6728 ch05  9/2/04  1:19 PM  Page 147
148 Chapter 5 Reusing Code and Writing Functions
$var = ‘contents 1 ’;
fn();echo ‘outside the function, $var = ‘.$var.’<br />’;
The output from this code is as follows:
inside the function, $var =
inside the function, $var = contents 2outside the function, $var = contents 1
Functions are not executed until they are called, so the first statement executed is $var
= ‘contents 1 ’;.This statement creates a variable called $var,with global scope and
the contents “contents 1 ”.The next statement executed is a call to the function fn().
The lines inside the statement are executed in order.The first line in the function refersto a variable named 
$var.When this line is executed, it cannot see the previous $var
that was created, so it creates a new one with function scope and echoes it.This creates
the first line of output.
The next line within the function sets the contents of $var to “contents 2 ”.
Because you are inside the function, this line changes the value of the local $var,not the
global one.The second line of output verifies that this change worked.
The function is now finished, so the final line of the script is executed.This echo
statement demonstrates that the global variable’s value has not changed.
If you want a variable created within a function to be global, you can use the 
keyword global as follows:
function fn()
{
global $var;$var = ‘contents ’;
echo ‘inside the function, $var = ‘.$var.’<br />’;
}
fn();
echo ‘outside the function, $var = ‘.$var.’<br />’;
In this example, the variable $var is explicitly defined as global, meaning that after the
function is called, the variable will exist outside the function as well.The output fromthis script follows:
inside the function, $var = contents
outside the function, $var = contents
Note that the variable is in scope from the point in which the line global $var; is
executed.Y ou could declare the function above or below where you call it. (Note thatfunction scope is quite different from variable scope!) The location of the function dec-laration is inconsequential; what is important is where you call the function and there-fore execute the code within it.07 6728 ch05  9/2/04  1:19 PM  Page 148
149 Passing by Reference Versus Passing by Value
You can also use the global keyword at the top of a script when a variable is first
used to declare that it should be in scope throughout the script.This is possibly a morecommon use of the 
global keyword.
You can see from the preceding examples that it is perfectly legal to reuse a variable
name for a variable inside and outside a function without interference between the two.It is generally a bad idea, however, because without carefully reading the code and think-ing about scope, people might assume that the variables are one and the same.
Passing by Reference Versus Passing by Value
If you want to write a function called increment() that allows you to increment a
value, you might be tempted to try writing it as follows:
function increment($value, $amount = 1)
{
$value = $value +$amount;
}
This code is of no use.The output from the following test code will be 10:
$value = 10;increment ($value);echo $value;
The contents of $value have not changed because of the scope rules.This code creates a
variable called $value ,which contains 10. It then calls the function increment() .The
variable $value in the function is created when the function is called. One is added to
it, so the value of $value is 11 inside the function, until the function ends; then you
return to the code that called it. In this code, the variable $value is a different variable,
with global scope, and therefore unchanged.
One way of overcoming this problem is to declare $value in the function as global,
but this means that to use this function, the variable that you wanted to increment
would need to be named $value .A better approach would be to use pass by reference .
The normal way that function parameters are called is through an approach dubbed
pass by value .When you pass a parameter, a new variable is created containing the value
passed in. It is a copy of the original.Y ou are free to modify this value in any way, butthe value of the original variable outside the function remains unchanged.
The better approach is to use pass by reference .Here, when a parameter is passed to a
function, instead of creating a new variable, the function receives a reference to the orig-inal variable.This reference has a variable name, beginning with a dollar sign (
$), and can
be used in exactly the same way as another variable.The difference is that instead of hav-ing a value of its own, it merely refers to the original.Any modifications made to thereference also affect the original.
You specify that a parameter is to use pass by reference by placing an ampersand (
&)
before the parameter name in the function’s definition. No change is required in thefunction call.07 6728 ch05  9/2/04  1:19 PM  Page 149
150 Chapter 5 Reusing Code and Writing Functions
You can modify the preceding increment() example to have one parameter passed
by reference, and it will work correctly:
function increment(&$value, $amount = 1)
{
$value = $value +$amount;
}
You now have a working function and are free to name the variable you want to incre-
ment anything you like.As already mentioned, it is confusing to humans to use the samename inside and outside a function, so you can give the variable in the main script anew name.The following test code now echoes 10 before the call to 
increment()
and 11 afterward:
$a = 10;
echo $a. ’<br />’;
increment ($a);echo $a. ’<br />’;
Returning from Functions
The keyword return stops the execution of a function.When a function ends because
either all statements have been executed or the keyword return is used, execution
returns to the statement after the function call.
If you call the following function, only the first echo statement will be executed:
function test_return()
{
echo ‘This statement will be executed ’;
return;echo ‘This statement will never be executed ’;
}
Obviously, this is not a very useful way to use return .Normally, you want to return
from the middle of a function only in response to a condition being met.
An error condition is a common reason to use a return statement to stop execution
of a function before the end. If, for instance, you write a function to find out which oftwo numbers is greater, you might want to exit if any of the numbers are missing:
function larger( $x, $y )
{
if (!isset($x)||!isset($y)){
echo ‘This function requires two numbers ’;
return;
}if ($x>=$y)07 6728 ch05  9/2/04  1:19 PM  Page 150
151 Returning from Functions
echo $x;
else
echo $y;
}
The built-in function isset() tells you whether a variable has been created and given a
value.This code gives an error message and returns if either of the parameters has not
been set with a value.Y ou test it by using !isset() ,meaning “NOT isset() ,”so the if
statement can be read as “if x is not set or if y is not set.”The function returns if either
of these conditions is true.
If the return statement is executed, the subsequent lines of code in the function will
be ignored. Program execution returns to the point at which the function was called. Ifboth parameters are set, the function will echo the larger of the two.
The output from the code
$a = 1;
$b = 2.5;$c = 1.9;larger($a, $b);larger($c, $a);larger($d, $a);
is as follows:
2.51.9This function requires two numbers
Returning Values from Functions
Exiting from a function is not the only reason to use return .Many functions use
return statements to communicate with the code that called them. Instead of echoing
the result of the comparison in the larger() function, the function might have been
more useful if it returned the answer.This way, the code that called the function canchoose if and how to display or use it.The equivalent built-in function 
max() behaves in
this way.
You can write the larger() function as follows:
function larger ($x, $y)
{
if (!isset($x)||!isset($y))
return false;
else if ($x>=$y)
return $x;
else
return $y;
}07 6728 ch05  9/2/04  1:19 PM  Page 151
152 Chapter 5 Reusing Code and Writing Functions
Here, the function returns the larger of the two values passed in. It returns an obviously
different value in the case of an error. If one of the numbers is missing, it returns false .
(The only caveat with this approach is that programmers calling the function must testthe return type with 
===to make sure that false is not confused with 0.)
For comparison, the built-in function max() returns nothing if both variables are not
set and, if only one was set, returns that one.
The code
$a = 1; $b = 2.5; $c = 1.9;
echo larger($a, $b). ’<br />’;
echo larger($c, $a). ’<br />’;
echo larger($d, $a). ’<br />’;
produces this output because $ddoes not exist and false is not visible:
2.5
1.9
Functions that perform some task but do not need to return a value often return true
or false to indicate whether they succeeded or failed.The boolean values true and
false can be represented with integer values 1 and 0, respectively, although they are of
different types.
Code Blocks
You declare that a group of statements is a block by placing them within curly braces.
This does not affect most of the operation of your code but has specific implications,including the way control structures such as loops and conditionals execute.
The following two examples work very differently:
Example without code block:
for($i = 0; $i < 3; $i++ )
echo ‘Line 1<br /> ’;
echo ‘Line 2<br /> ’;
Example with code block:
for($i = 0; $i < 3; $i++ )
{
echo ‘Line 1<br /> ’;
echo ‘Line 2<br /> ’;
}
In both examples, the forloop is iterated through three times. In the first example, only
the single line directly below this is executed by the forloop.The output from this
example is as follows:
Line 1
Line 107 6728 ch05  9/2/04  1:19 PM  Page 152
153 Returning Values from Functions
Line 1
Line 2
The second example uses a code block to group two lines together.This means that both
lines are executed three times by the forloop.The output from this example is as fol-
lows:
Line 1
Line 2Line 1Line 2Line 1Line 2
Because the code in these examples is properly indented, you can probably see the dif-
ference between them at a glance.The indenting of the code is intended to give readersa visual interpretation of what lines are affected by the 
forloop. However, note that
spaces do not affect how PHP processes the code.
In some languages, code blocks affect variable scope.This is not the case in PHP .
Implementing Recursion
Recursive functions are supported in PHP .A recursive function is one that calls itself.These
functions are particularly useful for navigating dynamic data structures such as linked listsand trees.
Few web-based applications, however, require a data structure of this complexity, so
you have minimal use for recursion. It is possible to use recursion instead of iteration in
many cases because both of these processes allow you to do something repetitively.However, recursive functions are slower and use more memory than iteration, so youshould use iteration wherever possible.
In the interest of completeness, let’s look at the brief example shown in Listing 5.5.
Listing 5.5 recursion.php —Reversing a String Using Recursion and Iteration
function reverse_r($str)
{
if (strlen($str)>0)
reverse_r(substr($str, 1));
echo substr($str, 0, 1);return;
}
function reverse_i($str)
{07 6728 ch05  9/2/04  1:19 PM  Page 153
154 Chapter 5 Reusing Code and Writing Functions
for ($i=1; $i<=strlen($str); $i++)
{
echo substr($str, -$i, 1);
}return;
}
Listing 5.5 implements two functions. Both of them print a string in reverse.The func-
tion reverse_r() is recursive, and the function reverse_i() is iterative.
The reverse_r() function takes a string as a parameter.When you call it, it proceeds
to call itself, each time passing the second to last characters of the string. For example, ifyou call
reverse_r( ‘Hello’);
it will call itself a number of times, with the following parameters:
reverse_r( ‘ello’);
reverse_r( ‘llo’);
reverse_r( ‘lo’);
reverse_r( ‘o’);
reverse_r( ‘’);
Each call the function makes to itself makes a new copy of the function code in the
server’s memory, but with a different parameter. It is like pretending that you are actuallycalling a different function each time.This stops the instances of the function from get-ting confused.
With each call, the length of the string passed in is tested.When you reach the end of
the string (
strlen()==0 ), the condition fails.The most recent instance of the function
(reverse_r( ‘’)) then goes on and performs the next line of code, which is to echo the
first character of the string it was passed; in this case, there is no character because thestring is empty.
Next, this instance of the function returns control to the instance that called it, name-
ly 
reverse_r( ‘o’).This function then prints the first character in its string— ”o”—and
returns control to the instance that called it.
The process continues—printing a character and then returning to the instance of the
function above it in the calling order—until control is returned to the main program.
There is something very elegant and mathematical about recursive solutions. In most
cases, however, you are better off using an iterative solution.The code for such a solutionis also shown in Listing 5.5. Note that it is no longer (although this is not always the casewith iterative functions) and does exactly the same thing.The main difference is that therecursive function makes copies of itself in memory and incurs the overhead of multiple
function calls.Listing 5.5 Continued07 6728 ch05  9/2/04  1:19 PM  Page 154
155 Further Reading
You might choose to use a recursive solution when the code is much shorter and
more elegant than the iterative version, but it does not happen often in this applicationdomain.
Although recursion appears more elegant, programmers often forget to supply a ter-
mination condition for the recursion.This means that the function will recur until theserver runs out of memory, or until the maximum execution time is exceeded, whichev-er comes first.
Further Reading
The use of include() ,require() ,function ,and return are also explained in the
online manual.T o find out more details about concepts such as recursion, pass by valueor reference, and scope that affect many languages, you can look at a general computerscience textbook, such as Dietel and Dietel’s C++ How to Program .
Next
Now that you are using include files, require files, and functions to make your code
more maintainable and reusable, the next chapter addresses object-oriented software andthe support offered in PHP . Using objects allows you to achieve goals similar to the con-cepts presented in this chapter, but with even greater advantages for complex projects.07 6728 ch05  9/2/04  1:19 PM  Page 155
07 6728 ch05  9/2/04  1:19 PM  Page 156
6
Object-Oriented PHP
THIS CHAPTER EXPLAINS CONCEPTS OF OBJECT -ORIENTED (OO) development and
shows how they can be implemented in PHP . PHP5 introduces a new, more powerfulobject-oriented implementation, which makes classes and objects more useful.
Now PHP’s OO implementation has all the features you would expect in a fully
object-oriented language.We point out each of the new features as we go through thischapter for those of you who have previously used PHP4 or earlier.
Key topics covered in this chapter include
nObject-oriented concepts
nClasses, attributes, and operations
nClass attributes
nPer-class constants
nClass method invocation
nInheritance
nAccess modifiers
nStatic methods
nType hinting
nObject cloning
nAbstract classes
nClass design
nImplementation of your design
nAdvanced OO functionality
nOO functionality new to PHP508 6728 CH06  9/2/04  1:18 PM  Page 157
158 Chapter 6 Object-Oriented PHP
Understanding Object-Oriented Concepts
Modern programming languages usually support or even require an object-oriented
approach to software development. Object-oriented development attempts to use theclassifications, relationships, and properties of the objects in the system to aid in programdevelopment and code reuse.
Classes and Objects
In the context of OO software, an object can be almost any item or concept—a physicalobject such as a desk or a customer; or a conceptual object that exists only in software,such as a text input area or a file. Generally, you will be most interested in objects,including both real-world objects and conceptual objects, that need to be represented insoftware.
Object-oriented software is designed and built as a set of self-contained objects with
both attributes and operations that interact to meet your needs. Attributes are properties
or variables that relate to the object. Operations are methods, actions, or functions that the
object can perform to modify itself or perform for some external effect. (Y ou will hearthe term attribute used interchangeably with the terms member variable and property ,and
the term operation used interchangeably with method .)
Object-oriented software’s central advantage is its capability to support and encourage
encapsulation —also known as data hiding .Essentially, access to the data within an object is
available only via the object’s operations, known as the interface of the object.
An object’s functionality is bound to the data it uses.Y ou can easily alter the details
controlling how the object is implemented to improve performance, add new features, orfix bugs without having to change the interface .Changing the interface could have ripple
effects throughout the project, but encapsulation allows you to make changes and fixbugs without your actions cascading to other parts of the project.
In other areas of software development, object orientation is the norm, and 
procedural or function-oriented software is considered old fashioned. Most web scriptsare still designed and written using an ad hoc approach following a function-oriented
methodology.
A number of reasons for using this approach exist. Many web projects are relatively
small and straightforward.Y ou can get away with picking up a saw and building a wood-
en spice rack without planning your approach, and you can successfully complete themajority of web software projects in the same way because of their small size. However,if you picked up a saw and attempted to build a house without formal planning, youwouldn’t get quality results, if you got results at all.The same is true for large software
projects.
Many web projects evolve from a set of hyperlinked pages to a complex application.
Complex applications, whether presented via dialog boxes and windows or via dynami-cally generated HTML pages, need a properly thought-out development methodology.08 6728 CH06  9/2/04  1:18 PM  Page 158
159 Understanding Object-Oriented Concepts
Object orientation can help you to manage the complexity in your projects, increase
code reusability, and thereby reduce maintenance costs.
In OO software, an object is a unique and identifiable collection of stored data and
operations that operate on that data. For instance, you might have two objects that repre-sent buttons. Even if both have a label 
“OK”,a width of 60 pixels, a height of 20 pixels,
and any other attributes that are identical, you still need to be able to deal with one but-ton or the other. In software, separate variables act as handles (unique identifiers) for the
objects.
Objects can be grouped into classes. Classes represent a set of objects that might vary
from individual to individual, but must have a certain amount in common.A class con-tains objects that all have the same operations behaving in the same way and the sameattributes representing the same things, although the values of those attributes vary fromobject to object.
You can think of the noun bicycle as a class of objects describing many distinct bicy-
cles with many common features or attributes —such as two wheels, a color, and a size—
and operations, such as move.
My own bicycle can be thought of as an object that fits into the class bicycle. It has
all the common features of all bicycles, including a move operation that behaves thesame as most other bicycles’ move—even if it is used more rarely. My bicycle’s attributeshave unique values because my bicycle is green, and not all bicycles are that color.
Polymorphism
An object-oriented programming language must support polymorphism ,which means that
different classes can have different behaviors for the same operation. If, for instance, youhave a class car and a class bicycle, both can have different move operations. For real-world objects, this would rarely be a problem. Bicycles are not likely to become con-
fused and start using a car’s move operation instead. However, a programming languagedoes not possess the common sense of the real world, so the language must supportpolymorphism to know which move operation to use on a particular object.
Polymorphism is more a characteristic of behaviors than it is of objects. In PHP , only
member functions of a class can be polymorphic.A real-world comparison is that ofverbs in natural languages, which are equivalent to member functions. Consider the ways
a bicycle can be used in real life.Y ou can clean it, move it, disassemble it, repair it, orpaint it, among other things.
These verbs describe generic actions because you don’t know what kind of object is
being acted on. (This type of abstraction of objects and actions is one of the distinguish-ing characteristics of human intelligence.)
For example, moving a bicycle requires completely different actions from those
required for moving a car, even though the concepts are similar.The verb move can be
associated with a particular set of actions only after the object acted on is made known.08 6728 CH06  9/2/04  1:18 PM  Page 159
160 Chapter 6 Object-Oriented PHP
Inheritance
Inheritance allows you to create a hierarchical relationship between classes using subclasses .
A subclass inherits attributes and operations from its superclass .For example, car and bicy-
cle have some things in common.Y ou could use a class vehicle to contain the thingssuch as a color attribute and a move operation that all vehicles have, and then let the carand bicycle classes inherit from vehicle.
You will hear subclass ,derived class ,and childused interchangeably. Similarly, you will
hear superclass and parent used interchangeably.
With inheritance, you can build on and add to existing classes. From a simple base
class, you can derive more complex and specialized classes as the need arises.This capa-bility makes your code more reusable, which is one of the important advantages of anobject-oriented approach.
Using inheritance might save you work if operations can be written once in a super-
class rather than many times in separate subclasses. It might also allow you to more accu-rately model real-world relationships. If a sentence about two classes makes sense with “isa” between the classes, inheritance is probably appropriate.The sentence “a car is a vehi-cle” makes sense, but the sentence “a vehicle is a car” does not make sense because notall vehicles are cars.Therefore, car can inherit from vehicle.
Creating Classes, Attributes, and Operations 
in PHP
So far, we have discussed classes in a fairly abstract way.When creating a class in PHP ,
you must use the keyword class .
Structure of a Class
A minimal class definition looks like this:
class classname
{}
To be useful, the classes need attributes and operations.Y ou create attributes by declaring
variables within a class definition using the keyword var.The following code creates a
class called classname with two attributes, $attribute1 and $attribute2 :
class classname
{
var $attribute1;var $attribute2;
}08 6728 CH06  9/2/04  1:18 PM  Page 160
161 Creating Classes, Attributes, and Operations in PHP
You create operations by declaring functions within the class definition.The following
code creates a class named classname with two operations that do nothing.The opera-
tion operation1() takes no parameters, and operation2() takes two parameters:
class classname
{
function operation1(){}function operation2($param1, $param2){}
}
Constructors
Most classes have a special type of operation called a constructor .A constructor is called
when an object is created, and it also normally performs useful initialization tasks such assetting attributes to sensible starting values or creating other objects needed by this object.
A constructor is declared in the same way as other operations, but has the special
name 
__construct() .This is a change in PHP5. In previous versions, constructor func-
tions had the same name as the class. For backward compatibility, if no function called
__construct() is found in a class, PHP will search for a function with the same name
as the class.
Although you can manually call the constructor, its main purpose is to be called auto-
matically when an object is created.The following code declares a class with a constructor:
class classname
{
function __construct($param){
echo “Constructor called with parameter $param <br /> ”;
}
}
PHP5 now supports function overloading, which means that you can provide more than
one function with the same name and different numbers or types of parameters. (Thisfeature is supported in many OO languages.) We discuss this later in this chapter.
Destructors
The opposite of a constructor is a destructor .Destructors are new in PHP5.They allow you
to have some functionality that will be executed just before a class is destroyed, which willoccur automatically when all references to a class have been unset or fallen out of scope.08 6728 CH06  9/2/04  1:18 PM  Page 161
162 Chapter 6 Object-Oriented PHP
Similar to the way constructors are named, the destructor for a class must be named
__destruct() .Destructors cannot take parameters.
Instantiating Classes
After you have declared a class, you need to create an object—a particular individual that
is a member of the class—to work with.This is also known as creating an instance of or
instantiating a class.Y ou create an object by using the newkeyword.When you do so, you
need to specify what class your object will be an instance of and provide any parametersrequired by the constructor.
The following code declares a class called 
classname with a constructor and then
creates three objects of type classname :
class classname
{
function __construct($param){
echo “Constructor called with parameter $param <br /> ”;
}
}
$a = new classname( ‘First’);
$b = new classname( ‘Second’);
$c = new classname();
Because the constructor is called each time you create an object, this code produces the
following output:
Constructor called with parameter First
Constructor called with parameter SecondConstructor called with parameter
Using Class Attributes
Within a class, you have access to a special pointer called $this .If an attribute of your
current class is called $attribute ,you refer to it as $this->attribute when either set-
ting or accessing the variable from an operation within the class.
The following code demonstrates setting and accessing an attribute within a class:
class classname
{
var $attribute;function operation($param){08 6728 CH06  9/2/04  1:18 PM  Page 162
163 Using Class Attributes
$this->attribute = $param
echo $this->attribute;
}
}
Whether you can access an attribute from outside the class is determined by access mod-
ifiers, discussed later in this chapter.This example does not restrict access to the attrib-utes, so you can access them from outside the class as follows:
class classname
{
var $attribute;
}$a = new classname();$a->attribute = ‘value’;
echo $a->attribute;
It is not generally a good idea to directly access attributes from outside a class. One of
the advantages of an object-oriented approach is that it encourages encapsulation.Y oucan enforce this with the use of 
__get and __set functions. If, instead of accessing the
attributes of a class directly, you write accessor functions ,you can make all your accesses
through a single section of code.When you initially write your accessor functions, theymight look as follows:
class classname
{
var $attribute;function __get($name){
return $this->$name;
}function __set ($name, $value){
$this->$name = $value;
}
}
This code provides minimal functions to access the attribute named $attribute .The
function named __ get() simply returns the value of $attribute ,and the function
named __ set() assigns a new value to $attribute .
Note that __get() takes one parameter—the name of an attribute—and returns the
value of that attribute. Similarly, the __set() function takes two parameters: the name of
an attribute and the value you want to set it to.
You do not directly call these functions.The double underscore in front of the name
shows that these functions have a special meaning in PHP , just like the __construct()
and __destruct() functions.08 6728 CH06  9/2/04  1:18 PM  Page 163
164 Chapter 6 Object-Oriented PHP
How then do they work? If you instantiate the class
$a = new classname();
you can then use the __get() and __set() functions to check and set the value of any
attributes.
If you type
$a->$attribute = 5;
this statement implicitly calls the __set() function with the value of $name set to
“attribute ”,and the value of $value set to 5.You need to write the __set() function
to do any error checking you want.
The __get() function works in a similar way. If, in your code, you reference
$a->attribute
this expression implicitly calls the __get() function with the parameter $name set to
“attribute ”.It is up to you to write the __get() function to return the value.
At first glance, this code might seem to add little or no value. In its present form, this
is probably true, but the reason for providing accessor functions is simple:Y ou then haveonly one section of code that accesses that particular attribute.
With only a single access point, you can implement validity checks to make sure that
only sensible data is being stored. If it occurs to you later that the value of 
$attribute
should only be between 0 and 100, you can add a few lines of code onceand check
before allowing changes.Y ou could change the __set() function to look as follows:
function __set ($name, $value)
{
if( $name= ’attribute ’&& $value >= 0 && $value <= 100 )
$this->attribute = $value;
}
With only a single access point, you are free to change the underlying implementation.
If, for some reason, you choose to change the way $attribute is stored, accessor func-
tions allow you to do this and change the code in only one place.
You might decide that, instead of storing $attribute as a variable, you will retrieve it
from a database only when needed, calculate an up-to-date value every time it isrequested, infer a value from the values of other attributes, or encode the data as a small-
er data type.Whatever change you decide to make, you can simply modify the accessorfunctions. Other sections of code will not be affected as long as you make the accessorfunctions still accept or return the data that other parts of the program expect.
Controlling Access with private and public
PHP5 introduces access modifiers.They control the visibility of attributes and methods,and are placed in front of attribute and method declarations. PHP5 supports the follow-ing three different access modifiers:08 6728 CH06  9/2/04  1:18 PM  Page 164
165 Calling Class Operations
nThe default option is public ,meaning that if you do not specify an access modifi-
er for an attribute or method, it will be public .Items that are public can be
accessed from inside or outside the class.
nThe private access modifier means that the marked item can be accessed only
from inside the class.Y ou might use it on all attributes if you are not using
__get() and __set() .You may also choose to make some methods private, for
example, if they are utility functions for use inside the class only. Items that are pri-vate will not be inherited (more on this issue later in this chapter).
nThe protected access modifier means that the marked item can be accessed only
from inside the class. It also exists in any subclasses; again, we return to this issuewhen we discuss inheritance later in this chapter. For now, you can think of 
protected as being halfway in between private and public .
To add access modifiers to the sample class, you can alter the code as follows:
class classname
{
public $attribute;public function __get($name){
return $this->$name;
}public function __set ($name, $value){
$this->$name = $value;
}
}
Here, each class member is prefaced with an access modifier to show whether it is pri-
vate or public.Y ou could leave out the public keyword because it is the default, but the
code is easier to understand with it in if you are using the other modifiers.
Notice that we removed the varkeyword in front of the attribute; it is replaced with
the access modifier public .In this case, we made everything public.
Calling Class Operations
You can call class operations in much the same way that you call class attributes. Say you
have the class
class classname
{
function operation1(){}08 6728 CH06  9/2/04  1:18 PM  Page 165
166 Chapter 6 Object-Oriented PHP
function operation2($param1, $param2)
{}
}
and create an object of type classname called $aas follows:
$a = new classname();
You then call operations the same way that you call other functions: by using their name
and placing any parameters that they need in brackets. Because these operations belongto an object rather than normal functions, you need to specify to which object theybelong.The object name is used in the same way as an object’s attributes, as follows:
$a->operation1();
$a->operation2(12, ‘test’);
If the operations return something, you can capture that return data as follows:
$x = $a->operation1();
$y = $a->operation2(12, ‘test’);
Implementing Inheritance in PHP
If the class is to be a subclass of another, you can use the extends keyword to specify
this use.The following code creates a class named Bthat inherits from some previously
defined class named A:
class B extends A
{
var $attribute2;function operation2(){}
}
If the class Awas declared as
class A
{
var $attribute1;function operation1(){}
}08 6728 CH06  9/2/04  1:18 PM  Page 166
167 Implementing Inheritance in PHP
all the following accesses to operations and attributes of an object of type Bwould be
valid:
$b = new B();
$b->operation1();$b->attribute1 = 10;$b->operation2();$b->attribute2 = 10;
Note that because class Bextends class A,you can refer to operation1() and $attrib-
ute1,although they were declared in class A.As a subclass of A,Bhas all the same func-
tionality and data. In addition, Bhas declared an attribute and an operation of its own.
It is important to note that inheritance works in only one direction.The subclass or
child inherits features from its parent or superclass, but the parent does not take on fea-tures of the child.This means that the last two lines in this code are wrong:
$a = new A();
$a->operation1();$a->attribute1 = 10;$a->operation2();$a->attribute2 = 10;
The class Adoes not have an operation2() or an attribute2 .
Controlling Visibility Through Inheritance with private and
protected
You can use the access modifiers private and protected to control what is inherited.
If an attribute or method is specified as private ,it will not be inherited. If an attribute
or method is specified as protected ,it will not be visible outside the class (like a pri-
vate element) but will be inherited.
Consider the following example:
<?php
class A{
private function operation1(){
echo “operation1 called ”;
}protected function operation2(){
echo “operation2 called ”;
}public function operation3(){
echo “operation3 called ”;
}
}08 6728 CH06  9/2/04  1:18 PM  Page 167
168 Chapter 6 Object-Oriented PHP
class B extends A
{
function __construct(){
$this->operation1();$this->operation2();$this->operation3();
}
}
$b = new B;?>
This code creates one operation of each type in class A:public ,protected ,and
private .Binherits from A.In the constructor of B,you then try to call the operations
from the parent.
The line
$this->operation1();
produces a fatal error as follows:
Fatal error : Call to private method A::operation1() from context ‘B’
This example shows that private operations cannot be called from a child class.
If you comment out this line, the other two function calls will work.The protected
function is inherited but can be used only from inside the child class, as done here. Ifyou try adding the line
$b->operation2();
to the bottom of the file, you will get the following error:
Fatal error : Call to protected method A::operation2() from context ‘’
However, you can call operation3() from outside the class, as follows:
$b->operation3();
You can make this call because it is declared as public .
Overriding
In this chapter, we have shown a subclass declaring new attributes and operations. It is
also valid and sometimes useful to redeclare the same attributes and operations.Y oumight do this to give an attribute in the subclass a different default value to the sameattribute in its superclass or to give an operation in the subclass different functionality tothe same operation in its superclass.This action is called overriding .08 6728 CH06  9/2/04  1:18 PM  Page 168
169 Implementing Inheritance in PHP
For instance, say you have a class A:
class A
{
var $attribute = ‘default value ’;
function operation(){
echo ‘Something<br /> ’;
echo “The value of \$attribute is $this->attribute<br /> ”;
}
}
If you want to alter the default value of $attribute and provide new functionality for
operation() ,you can create the following class B,which overrides $attribute and
operation() :
class B extends A
{
var $attribute = ‘different value ’;
function operation(){
echo ‘Something else<br /> ’;
echo “The value of \$attribute is $this->attribute<br /> ”;
}
}
Declaring Bdoes not affect the original definition of A.Now consider the following two
lines of code:
$a = new A();
$a -> operation();
These lines create an object of type Aand call its operation() function.This produces
SomethingThe value of $attribute is default value
proving that creating B has not altered A. If you create an object of type B,you will get
different output.
This code
$b = new B();
$b -> operation();
produces
Something elseThe value of $attribute is different value08 6728 CH06  9/2/04  1:18 PM  Page 169
170 Chapter 6 Object-Oriented PHP
In the same way that providing new attributes or operations in a subclass does not affect
the superclass, overriding attributes or operations in a subclass does not affect the superclass.
A subclass will inherit all the attributes and operations of its superclass, unless you
provide replacements. If you provide a replacement definition, it takes precedence andoverrides the original definition.
The 
parent keyword allows you to call the original version of the operation in the
parent class. For example, to call A::operation from within class B,you would use
parent::operation();
The output produced is, however, different.Although you call the operation from the
parent class, PHP uses the attribute values from the current class. Hence, you get the fol-lowing output:
Something
The value of $attribute is different value
Inheritance can be many layers deep.Y ou can declare a class imaginatively called Cthat
extends Band therefore inherits features from Band from B’s parent,A.The class Ccan
again choose which attributes and operations from its parents to override and replace.
Preventing Inheritance and Overriding with final
PHP5 introduces the keyword final .When you use this keyword in front of a function
declaration, that function cannot be overridden in any subclasses. For example, you canadd it to class 
Ain the previous example, as follows:
class A
{
var $attribute = ‘default value ’;
final function operation(){
echo ‘Something<br /> ’;
echo “The value of \$attribute is $this->attribute<br /> ”;
}
}
Using this approach prevents you from overriding operation() in class B.If you attempt
to do so, you will get the following error:
Fatal error : Cannot override final method A::operation()
You can also use the final keyword to prevent a class from being subclassed at all.T o
prevent class Afrom being subclassed, you can add it as follows:
final class A
{...}
If you then try to inherit from A, you will get an error similar to
Fatal error : Class B may not inherit from final class (A)08 6728 CH06  9/2/04  1:18 PM  Page 170
171 Implementing Inheritance in PHP
Understanding Multiple Inheritance
A few OO languages  (most notably C++ and Smalltalk) support multiple inheritance,
but like most, PHP does not.This means that each class can inherit from only one par-
ent. No restrictions exist for how many children can share a single parent.What thismeans might not seem immediately clear. Figure 6.1 shows three different ways thatthree classes named 
A,B,and Ccan inherit.
Figure 6.1 PHP does not support multiple inheritance.
The left combination shows class Cinheriting from class B,which in turn inherits from
class A.Each class has at most one parent, so this is a perfectly valid single inheritance 
in PHP .
The center combination shows classes Band Cinheriting from class A.Each class has
at most one parent, so again this is a valid single inheritance.
The right combination shows class Cinheriting from both class Aand class B.I n  this
case, class Chas two parents, so this is multiple inheritance and is invalid in PHP .
Implementing Interfaces
PHP5 introduces interfaces .They are seen as workarounds for multiple inheritance and are
similar to the interface implementation supported by other object-oriented languages,including Java.
The idea of an interface is that it specifies a set of functions that must be implement-
ed in classes that implement that interface. For instance, you might decide that you havea set of classes that need to be able to display themselves. Instead of having a parent classwith a 
display() function that they all inherit from and override, you can implement
an interface as follows:
interface Displayable
{A
A
B
B
C
Single InheritanceC
Single InheritanceCAB
Multiple Inheritance08 6728 CH06  9/2/04  1:18 PM  Page 171
172 Chapter 6 Object-Oriented PHP
function display();
}
class webPage implements Displayable
{
function display(){
// ...
}
}
This example illustrates a roundabout kind of multiple inheritance because the webPage
class can inherit from one class and implement one or more interfaces.
If you do not implement the methods specified in the interface (in this case,
display() ), you will get a fatal error.
Designing Classes
Now that you know some of the concepts behind objects and classes and the syntax toimplement them in PHP , it is time to look at how to design useful classes.
Many classes in your code will represent classes or categories of real-world objects.
Classes you might use in Web development might include pages, user interface compo-nents, shopping carts, error handling, product categories, or customers.
Objects in your code can also represent specific instances of the previously mentioned
classes—for example, the home page, a particular button, or the shopping cart in use byFred Smith at a particular time. Fred Smith himself can be represented by an object oftype 
customer .Each item that Fred purchases can be represented as an object, belonging
to a category or class.
In the preceding chapter, you used simple include files to give the fictional company
TLA Consulting a consistent look and feel across the different pages of its website. Usingclasses and the timesaving power of inheritance, you can create a more advanced versionof the same site.
Now you want to be able to quickly create pages for TLA that look and behave in
the same way.Y ou should be able to modify those pages to suit the different parts of thesite.
For purposes of this example, you are going to create a 
Page class.The main goal of
this class is to limit the amount of HTML needed to create a new page. It should allowyou to alter the parts that change from page to page, while automatically generating the
elements that stay the same.The class should provide a flexible framework for creatingnew pages and should not compromise your freedom.
Because you are generating the page from a script rather than with static HTML, you
can add any number of clever things including functionality to08 6728 CH06  9/2/04  1:18 PM  Page 172
173 Writing the Code for Your Class
nEnable you to alter page elements in only one place. If you change the copyright
notice or add an extra button, you should need to make the change in only a sin-gle place.
nHave default content for most parts of the page but be able to modify each ele-ment where required, setting custom values for elements such as the title andmetatags.
nRecognize which page is being viewed and alter navigation elements to suit; thereis no point in having a button that takes you to the home page located on thehome page.
nAllow you to replace standard elements for particular pages. If, for instance, youwant different navigation buttons in sections of the site, you should be able to
replace the standard ones.
Writing the Code for Your Class
Having decided what you want the output from your code to look like and a few fea-
tures you would like for it, how do you implement it? Later in the book, we discussdesign and project management for large projects. For now, we concentrate on the partsspecific to writing object-oriented PHP .
The class needs a logical name. Because it represents a page, you can call it 
Page.T o
declare a class called Page,type
class Page
{}
The class needs some attributes. For this example, set elements that you might want
changed from page to page as attributes of the class.The main contents of the page,which are a combination of HTML tags and text, are called 
$content .You can declare
the content with the following line of code within the class definition:
public $content;
You can also set attributes to store the page’s title.Y ou will probably want to change this
title to clearly show what particular page the visitor is looking at. Rather than haveblank titles, you can provide a default title with the following declaration:
public $title = ‘TLA Consulting Pty Ltd ’;
Most commercial web pages include metatags to help search engines index them.T o be
useful, metatags should probably change from page to page.Again, you can provide adefault value:
public $keywords = ‘TLA Consulting, Three Letter Abbreviation,
some of my best friends are search engines ’;08 6728 CH06  9/2/04  1:18 PM  Page 173
174 Chapter 6 Object-Oriented PHP
The navigation buttons shown on the original page in Figure 5.2 (see the preceding
chapter) should probably be kept the same from page to page to avoid confusing people,but to change them easily, you can make them an attribute, too. Because the number of
buttons might be variable, you can use an array and store both the text for the button
and the URL it should point to:
public $buttons = array( ‘Home’=> ‘home.php ’,
‘Contact’=> ‘contact.php ’,
‘Services ’=> ‘services.php ’,
‘Site Map ’=> ‘map.php’
);
To provide some functionality, the class also needs operations.Y ou can start by providing
accessor functions to set and get the values of the attributes you defined:
public function __set($name, $value)
{
$this->$name = $value;
}
The __set() function does not contain error checking (for brevity), but this capability
can be easily added later, as required. Because it is unlikely that you will be requestingany of these values from outside the class, you can elect not to provide a 
__get() func-
tion, as done here.
The main purpose of this class is to display a page of HTML, so you need a function.
We called ours Display() ,and it is as follows:
public function Display()
{
echo “<html>\n<head>\n ”;
$this -> DisplayTitle();$this -> DisplayKeywords();$this -> DisplayStyles();echo “</head>\n<body>\n ”;
$this -> DisplayHeader();$this -> DisplayMenu($this->buttons);echo $this->content;$this -> DisplayFooter();echo “</body>\n</html>\n ”;
}
The function includes a few simple echo statements to display HTML but mainly con-
sists of calls to other functions in the class.As you have probably guessed from theirnames, these other functions display parts of the page.
Breaking up functions like this is not compulsory.All these separate functions might
simply have been combined into one big function.We separated them out for a numberof reasons.08 6728 CH06  9/2/04  1:18 PM  Page 174
175 Writing the Code for Your Class
Each function should have a defined task to perform.The simpler this task is, the easi-
er writing and testing the function will be. Don’t go too far; if you break up your pro-gram into too many small units, it might be hard to read.
Using inheritance, you can override operations.Y ou can replace one large 
Display( )
function, but it is unlikely that you will want to change the way the entire page is dis-played. It will be much better to break up the display functionality into a few self-contained tasks and be able to override only the parts that you want to change.
This 
Display() function calls DisplayTitle() ,DisplayKeywords() ,
DisplayStyles() ,DisplayHeader() ,DisplayMenu() ,and DisplayFooter ().This means
that you need to define these operations.Y ou can write operations or functions in thislogical order, calling the operation or function before the actual code for the function. Inmany other languages, you need to write the function or operation before it can becalled. Most of the operations are fairly simple and need to display some HTML andperhaps the contents of the attributes.
Listing 6.1 shows the complete class, saved as 
page.inc to include or require into
other files.
Listing 6.1 page.inc — The Page Class Provides an Easy and Flexible Way to Create
TLA Pages
<?php
class Page{
// class Page ’s attributes
public $content;public $title = ‘TLA Consulting Pty Ltd ’;
public $keywords = ‘TLA Consulting, Three Letter Abbreviation, 
some of my best friends are search engines ’;
public $buttons = array( ‘Home’=> ‘home.php ’, 
‘Contact’=> ‘contact.php ’, 
‘Services ’=> ‘services.php ’, 
‘Site Map ’=> ‘map.php’
);
// class Page ’s operations
public function __set($name, $value){
$this->$name = $value;
}
public function Display()
{
echo “<html>\n<head>\n ”;
$this -> DisplayTitle();$this -> DisplayKeywords();$this -> DisplayStyles();08 6728 CH06  9/2/04  1:18 PM  Page 175
176 Chapter 6 Object-Oriented PHP
echo “</head>\n<body>\n ”;
$this -> DisplayHeader();$this -> DisplayMenu($this->buttons);echo $this->content;$this -> DisplayFooter();echo “</body>\n</html>\n ”;
}
public function DisplayTitle()
{
echo ‘<title> ‘.$this->title. ’</title> ’;
}
public function DisplayKeywords()
{
echo “<meta name=\ ”keywords\ ”content=\
“”.htmlentities($this->keywords). ”\”/>”;
}
public function DisplayStyles()
{ 
?>   
<style>
<!--
h1 {color:white; font-size:24pt; text-align:center; 
font-family:arial,sans-serif}
.menu {color:white; font-size:12pt; text-align:center; 
font-family:arial,sans-serif; font-weight:bold}
td {background:black}p {color:black; font-size:12pt; text-align:justify; 
font-family:arial,sans-serif}
p.foot {color:white; font-size:9pt; text-align:center; 
font-family:arial,sans-serif; font-weight:bold}
a:link,a:visited,a:active {color:white}
-->
</style>
<?php
}
public function DisplayHeader()
{ 
?>   
<table width= ”100%”cellpadding = ”12”cellspacing = ”0”border = ”0”>
<tr bgcolor = ”black”>
<td align = ”left”><img src = “logo.gif ”/></td>Listing 6.1 Continued 08 6728 CH06  9/2/04  1:18 PM  Page 176
177 Writing the Code for Your Class
<td>
<h1>TLA Consulting Pty Ltd</h1>
</td><td align = ”right”><img src = “logo.gif ”/></td>
</tr></table>
<?php
}
public function DisplayMenu($buttons)
{
echo “<table width= ’100%’bgcolor= ’white’cellpadding= ’4’
cellspacing= ’4’>\n”;
echo “<tr>\n”;
//calculate button size
$width = 100/count($buttons);
foreach ($buttons as $name=>$url)
{
$this -> DisplayButton($width, $name, $url,
!$this->IsURLCurrentPage($url));
}echo “</tr>\n”;
echo “</table>\n ”;
}
public function IsURLCurrentPage($url)
{
if(strpos($_SERVER[ ‘PHP_SELF ’], $url )==false)
{
return false;
}else{
return true;
}
}
public function DisplayButton($width, $name, $url, $active = true)
{
if ($active){
echo “<td width = ’”.htmlentities($width). ”%’>Listing 6.1 Continued 08 6728 CH06  9/2/04  1:18 PM  Page 177
178 Chapter 6 Object-Oriented PHP
<a href = ’”.htmlentities($url). ”’>
<img src = ’s-logo.gif ’alt =’”.htmlentities($name). ”’border
=’0’/></a>
<a href = ’”.htmlentities($url). ”’><span class= ’menu’>$name</span>
</a></td> ”;
}  else{
echo “<td width = ’”.htmlentities($width). ”%’>
<img src = ’side-logo.gif ’>
<span class= ’menu’>$name</span></td> ”;
}  
}
public function DisplayFooter()
{
?>
<table width = “100%”bgcolor = ”black”cellpadding = ”12”border = ”0”>
<tr>
<td>
<p class= ”foot”>&copy; TLA Consulting Pty Ltd.</p>
<p class= ”foot”>Please see our 
<a href = ”legal.php ”>legal information page</a></p>
</td>
</tr></table>
<?php
}
}
?>
When reading this class, note that DisplayStyles() ,DisplayHeader() ,and
DisplayFooter() need to display a large block of static HTML, with no PHP process-
ing.Therefore, you simply use an end PHP tag ( ?>), type your HTML, and then re-enter
PHP with an open PHP tag ( <?php ) while inside the functions.
Two other operations are defined in this class.The operation DisplayButton() out-
puts a single menu button. If the button is to point to the page you are on, you displayan inactive button instead, which looks slightly different and does not link anywhere.This way, you can keep the page layout consistent and provide visitors with a visual location.
The operation 
IsURLCurrentPage() determines whether the URL for a buttonListing 6.1 Continued 08 6728 CH06  9/2/04  1:18 PM  Page 178
179 Writing the Code for Your Class
points to the current page.Y ou can use several techniques to discover this information.
Here, you use the string function strpos() to see whether the URL given is contained
in one of the server set variables.The statement strpos( $_SERVER[ ‘PHP_SELF ’],
$url ) returns a number if the string in $url is inside the superglobal variable 
$_SERVER[ ‘PHP_SELF ’]or false if it is not.
To use this Page class, you need to include page.inc in a script and call Display() .
The code in Listing 6.2 creates TLA Consulting’s home page and gives output similar
to that previously generated in Figure 5.2.The code in Listing 6.2 does the following:
1. Uses require to include the contents of page.inc ,which contains the definition
of the class Page.
2. Creates an instance of the class Page.The instance is called $homepage .
3. Sets the content, consisting of some text and HTML tags to appear in the page.
(This implicitly invokes the __set() method.)
4. Calls the operation Display() within the object $homepage to cause the page to
be displayed in the visitor’s browser.
Listing 6.2 home.php —This Home Page Uses the Page Class to Do Most of the Work
Involved in Generating the Page
<?php
require ( ‘page.inc ’);
$homepage = new Page();$homepage->content = ’<p>Welcome to the home of TLA Consulting.
Please take some time to get to know us.</p><p>We specialize in serving your business needsand hope to hear from you soon.</p> ’;
$homepage->Display();
?>
You can see in Listing 6.2 that you need to do very little work to generate new pages
using this Page class. Using the class in this way means that all your pages need to be
very similar.
If you want some sections of the site to use a variant of the standard page, you can
simply copy page.inc to a new file called page2.inc and make some changes.This
means that every time you update or fix parts of page.inc ,you need to remember to
make the same changes to page2.inc .
A better course of action is to use inheritance to create a new class that inherits most08 6728 CH06  9/2/04  1:18 PM  Page 179
180 Chapter 6 Object-Oriented PHP
of its functionality from Page but overrides the parts that need to be different. For the
TLA site, require that the services page include a second navigation bar.The scriptshown in Listing 6.3 does this by creating a new class called 
ServicesPage that inherits
from Page.You provide a new array called $row2buttons that contains the buttons and
links you want in the second row. Because you want this class to behave in mostly thesame ways, you override only the part you want changed: the 
Display() operation.
Listing 6.3 services.php — The Services Page Inherits from the Page Class but
Overrides Display() to Alter the Output
<?php
require ( ‘page.inc ’);
class ServicesPage extends Page
{
private $row2buttons = array( ‘Re-engineering ’=> ‘reengineering.php ’,
‘Standards Compliance ’=> ‘standards.php ’,
‘Buzzword Compliance ’=> ‘buzzword.php ’,
‘Mission Statements ’=> ‘mission.php ’
);
public function Display(){
echo “<html>\n<head>\n ”;
$this -> DisplayTitle();$this -> DisplayKeywords();$this -> DisplayStyles();echo “</head>\n<body>\n ”;
$this -> DisplayHeader();$this -> DisplayMenu($this->buttons);$this -> DisplayMenu($this->row2buttons);echo $this->content;$this -> DisplayFooter();echo “</body>\n</html>\n ”;
}
}
$services = new ServicesPage();
$services -> content = ’<p>At TLA Consulting, we offer a number of services.
Perhaps the productivity of your employees wouldimprove if we re-engineered your business.Maybe all your business needs is a fresh missionstatement, or a new batch of buzzwords.</p> ’;
$services -> Display();
?>
The overriding Display() is similar but contains one extra line:08 6728 CH06  9/2/04  1:18 PM  Page 180
181 Understanding Advanced and New Object-Oriented Functionality in PHP
$this -> DisplayMenu($this->row2buttons);
This line calls DisplayMenu() a second time and creates a second menu bar.
Outside the class definition, you create an instance of the ServicesPage class, set the
values for which you want nondefault values, and call Display() .
As you can see, Figure 6.2 shows a new variant of the standard page.Y ou needed to
write new code only for the parts that were different.
Figure 6.2 The services page is created using inheritance to reuse most of
the standard page.
Creating pages via PHP classes has obvious advantages.With a class to do most of the
work for you, you need to do less work to create a new page.Y ou can update all your
pages at once by simply updating the class. Using inheritance, you can derive differentversions of the class from the original without compromising the advantages.
As with most things in life, these advantages do not come without cost. Creating
pages from a script requires more computer processor effort than simply loading a staticHTML page from disk and sending it to a browser. On a busy site, this will be impor-tant, and you should make an effort to either use static HTML pages or cache the out-put of your scripts where possible to reduce the load on the server.
Understanding Advanced and New Object-
Oriented Functionality in PHP
In the following sections, we discuss PHP’s advanced OO features, most of which are
new in PHP5.
Note: PHP4 Versus PHP5
If you have used previous versions of PHP , you should be aware of a couple of important
08 6728 CH06  9/2/04  1:18 PM  Page 181
182 Chapter 6 Object-Oriented PHP
differences.
In PHP4, objects were passed by value, and they are now passed around by reference.
Writing your code this way should not break any old code, and in fact many program-mers wrote inefficient code without realizing it. For example, even writing
$c = new myClass;
created a new class and then copied the instance into $c(effectively creating two copies
but immediately losing the handle to one of them).This behavior can cause problems if
you assume that objects are being passed by reference, particularly when you are passing
objects to functions.
Most object-oriented languages pass objects as references by default, and PHP is now
in this category.
The other significant difference is that PHP previously had difficulty dereferencing
objects that were returned from functions, typically to call methods on those objects.Previously, you could not write, for example,
select_object()->display();
where select_object() returned an object that had a method called display() .This
statement should now work without problems.
Using Per-Class Constants
PHP5 introduces the idea of a per-class constant.This constant can be used without yourneeding to instantiate the class, as in this example:
<?php
class Math {
const pi = 3.14159;
}echo ‘Math::pi = ‘.Math::pi. ”\n”;
?>
You can access the per-class constant by using the ::operator to specify the class the
constant belongs to, as done in this example.
Implementing Static Methods
PHP5 also introduces the static keyword. It is applied to methods to allow them to be
called without instantiating the class.This is the method equivalent of the per-class constantidea. For example, consider the 
Math class created in the preceding section.Y ou could add a
squared() function to it and invoke it without instantiating the class as follows:
class Math
{08 6728 CH06  9/2/04  1:18 PM  Page 182
183 Understanding Advanced and New Object-Oriented Functionality in PHP
static function squared($input)
{
return $input*$input;
}
}echo Math::squared(8);
Note that you cannot use the this keyword inside a static method because there may be
no object instance to refer to.
Checking Class Type and Type Hinting
Also new in PHP5 are the instanceof keyword and the concept of type hinting .
The instanceof keyword allows you to check the type of an object.Y ou can check
whether an object is an instance of a particular class, whether it inherits from a class, orwhether it implements an interface.The 
instanceof keyword is effectively a conditional
operator. For instance, with the previous examples in which you implemented class Bas
a subclass of class A,then
($b instanceof B) would be true.
($b instanceof A) would be true.
($b instanceof Displayable) would be false.
All these examples assume that A,B,and Displayable are in the current scope; other-
wise, an error will be triggered.
Also new in PHP5 is the idea of class type hinting. Normally, when you pass a
parameter to a function in PHP , you do not pass the type of that parameter.With classtype hinting, you can specify the type of class that ought to be passed in, and if that isnot the type actually passed in, an error will be triggered.The type checking is equiva-lent to 
instanceof .For example, consider the following function:
function check_hint(B $someclass)
{
//...
}
This example suggests that $someclass needs to be an instance of class B.If you then
pass in an instance of class Aas
check_hint($a);
you will get the following fatal error:
Fatal error : Argument 1 must be an instance of B
Note that if you had hinted Aand passed in an instance of B,no error would have
occurred because Binherits from A.
Cloning Objects08 6728 CH06  9/2/04  1:18 PM  Page 183
184 Chapter 6 Object-Oriented PHP
PHP5 introduces the clone keyword, which allows you to copy an existing object. For
example,
$c = clone $b;
would create a copy of object $bof the same class, with the same attribute values.
You can also change this behavior. If you need nondefault behavior from clone ,y o u
need to create a method in the base class called __clone() .This method is similar to a
constructor or destructor in that you do not call it directly. It is invoked when the clone
keyword is used as shown here.Within the __clone() method, you can then define
exactly the copying behavior that you want.
The nice thing about __clone() is that it will be called after an exact copy has been
made using the default behavior, so at that stage you are able to change only the thingsyou want to change.
The most common functionality to add to 
__clone() is code to ensure that attrib-
utes of the class that are handled as references are copied correctly. If you set out toclone a class that contains a reference to an object, you are probably expecting a secondcopy of that object rather than a second reference to the same one, so it would makesense to add this to 
__clone() .
You may also choose to change nothing but perform some other action, such as
updating an underlying database record relating to the class.
Using Abstract Classes
Another new feature in PHP5 is abstract classes.These classes cannot be instantiated.
PHP5 also offers abstract methods, which provide the signature for a method but no
implementation, as in this example:
abstract operationX($param1, $param2);
Any class that contains abstract methods must itself be abstract, as shown in this example:
abstract class A
{
abstract function operationX($param1, $param2);
}
The main use of abstract methods and classes is in a complex class hierarchy where you
want to make sure each subclass contains and overrides some particular method; this can
also be done with an interface.
Overloading Methods with __call()
We previously looked at a number of class methods with special meanings whose names
begin with a double underscore ( __), such as __get() ,__set() ,__construct() ,and
__destruct() .Another example is the method __call() ,which is used in PHP to
implement method overloading.
Method overloading is common in many object-oriented languages but is not as use-08 6728 CH06  9/2/04  1:18 PM  Page 184
185 Understanding Advanced and New Object-Oriented Functionality in PHP
ful in PHP because you tend to use flexible types and the (easy-to-implement) optional
function parameters instead.
To use it, you implement a __call() method, as in this example:
public function __call($method, $p)
{
if ($method == ‘display’)
if (is_object($p[0]))
$this->displayObject($p[0]);
else if (is_array($p[0]))
$this->displayArray($p[0]);
else
$this->displayScalar($p[0]) ;
}
The __call() method should take two parameters.The first contains the name of the
method being invoked, and the second contains an array of the parameters passed to thatmethod.Y ou can then decide for yourself which underlying method to call. In this case,if an object is passed to method 
display() ,you call the underlying displayObject()
method; if an array is passed, you call displayArray() ;and if something else is passed,
you call displayScalar() .
To invoke this code, you would first instantiate the class containing this __call()
method (name it overload ) and then invoke the display() method, as in this example:
$ov = new overload;
$ov->display(array(1, 2, 3));$ov->display( ‘cat’);
The first call to display() invokes displayArray() ,and the second invokes
displayScalar() .
Note that you do not need any underlying implementation of the display() method
for this code to work.
Using __autoload()
Another of the special functions is __autoload() .It is not a class method but a standalone
function; that is, you declare it outside any class declaration. If you implement it, it will beautomatically called when you attempt to instantiate a class that has not been declared.
The main use of 
__autoload() is to try to include or require any files needed to
instantiate the required class. Consider this example:
function __autoload($name)
{
include_once $name. ’.php’;
}
This implementation tries to include a file with the same name as the class.08 6728 CH06  9/2/04  1:18 PM  Page 185
186 Chapter 6 Object-Oriented PHP
Implementing Iterators and Iteration
One clever feature of the new object-oriented engine is that you can now use a 
foreach() loop to iterate through the attributes of an object as you would an array.
Here’s an example:
class myClass
{
public $a=5;public $b=7;public $c=9;
}$x = new myClass;foreach ($x as $attribute)
echo $attribute. ’<br />’;
(At the time of writing, the PHP manual suggests that you need to implement the
empty interface Traversable for the foreach interface to work, but doing so causes a
fatal error. Not implementing it seems to work just fine, though.)
If you need more sophisticated behavior than this, you can implement an iterator .T o
do this, you make the class that you want to iterate over implement the
IteratorAggregate interface and give it a method called getIterator that returns an
instance of the iterator class.That class must implement the Iterator interface, which
has a series of methods that must be implemented.An example of a class and iterator isshown in Listing 6.4.
Listing 6.4 iterator.php — A Sample Base Class and Iterator Class
<?php
class ObjectIterator implements Iterator {
private $obj;
private $count;private $currentIndex;
function __construct($obj)
{
$this->obj = $obj;$this->count = count($this->obj->data);
}function rewind(){
$this->currentIndex = 0;
}function valid(){
return $this->currentIndex < $this->count;08 6728 CH06  9/2/04  1:18 PM  Page 186
187 Understanding Advanced and New Object-Oriented Functionality in PHP
}
function key(){
return $this->currentIndex;
}function current(){
return $this->obj->data[$this->currentIndex];
}function next(){
$this->currentIndex++;
}
}
class Object implements IteratorAggregate
{
public $data = array();
function __construct($in)
{
$this->data = $in;
}
function getIterator()
{
return new ObjectIterator($this);
}
}
$myObject = new Object(array(2, 4, 6, 8, 10));$myIterator = $myObject->getIterator();
for($myIterator->rewind(); $myIterator->valid(); $myIterator->next()){
$key = $myIterator->key();$value = $myIterator->current();echo “$key => $value <br /> ”;
}
?>
The ObjectIterator class has a set of functions as required by the Iterator interface:
nThe constructor is not required but is obviously a good place to set up values for
the number of items you plan to iterate over and a link to the current data item.Listing 6.4 Continued 08 6728 CH06  9/2/04  1:18 PM  Page 187
188 Chapter 6 Object-Oriented PHP
nThe rewind() function should set the internal data pointer back to the beginning
of the data.
nThe valid() function should tell you whether more data still exists at the current
location of the data pointer.
nThe key() function should return the value of the data pointer.
nThe value() function should return the value stored at the current data pointer.
nThe next() function should move the data pointer along in the data.
The reason for using an iterator class like this is that the interface to the data will not
change even if the underlying implementation changes. In this example, the
IteratorAggregate class is a simple array. If you decide to change it to a hash table or
linked list, you could still use a standard Iterator to traverse it, although the Iterator
code would change.
Converting Your Classes to Strings
Another of the new “magical” functions is __toString() .If you implement a function
called __toString() in your class, it will be called when you try to print the class, as in
this example:
$p = new Printable;
echo $p;
Whatever the __toString() function returns will be printed by echo.You might, for
instance, implement it as follows:
class Printable
{
var $testone;var $testtwo;public function __toString(){
return(var_export($this, TRUE));
}
}
(The var_export() function prints out all the attribute values in the class.)
Using the Reflection API
An exciting new feature in PHP5 is the reflection API .Reflection is the ability to interro-
gate existing classes and objects to find out about their structure and contents.This capa-bility can be useful when you are interfacing to unknown or undocumented classes, suchas when interfacing with encoded PHP scripts.08 6728 CH06  9/2/04  1:18 PM  Page 188
189 Understanding Advanced and New Object-Oriented Functionality in PHP
The API is extremely complex, but we will look at a simple example to give you
some idea of what it can be used for. Consider the Page class defined in this chapter, for
example.Y ou can get all the information about this class from the Reflection API, asshown in Listing 6.5.
Listing 6.5 reflection.php —Displays Information About the Page Class
<?php
require_once( ‘page.inc ’);
$class = new ReflectionClass( ‘Page’);
echo ‘<pre>’;
echo $class;echo ‘</pre>’;
?>
Here, you use the __toString() method of the Reflection class to print out this data.
Note that the <pre> tags are on separate lines so as not to confuse the __toString()
method.
The first screen of output from this code is shown in Figure 6.3.
Figure 6.3 The output from the reflection API is surprisingly detailed.
08 6728 CH06  9/2/04  1:18 PM  Page 189
190 Chapter 6 Object-Oriented PHP
Next
The next chapter explains PHP’s new exception handling capabilities. Exceptions pro-
vide an elegant mechanism for dealing with runtime errors.08 6728 CH06  9/2/04  1:18 PM  Page 190
7
Exception Handling
INTHIS CHAPTER ,WE EXPLAIN THE CONCEPT OF exception handling and the way it is
implemented in PHP . Exceptions are a new and important feature in PHP5.They pro-vide a unified mechanism for handling errors in an extensible, maintainable, and object-oriented way.
Key topics covered in this chapter include
nException handling concepts
nException control structures: try...throw...catch
nThe Exception class
nUser-defined exceptions
nExceptions in Bob’s Auto Parts
nExceptions and PHP’s other error handling mechanisms
Exception Handling Concepts
The basic idea of exception handling is that code is executed inside what is called a try
block.That’s a section of code that looks like this:
try
{
// code goes here
}
If something goes wrong inside the tryblock, you can do what is called throwing an
exception .Some languages, such as Java, throw exceptions automatically for you in certain
cases. In PHP , exceptions must be thrown manually.Y ou throw an exception as follows:
throw new Exception( ‘message’ , code);
The keyword throw triggers the exception handling mechanism. It is a language construct
rather than a function, but you need to pass it a value. It expects to receive an object. Inthe simplest case, you can instantiate the built-in 
Exception class, as done in this example.09 6728 CH07  9/2/04  1:22 PM  Page 191
192 Chapter 7 Exception Handling
The constructor for this class takes two parameters: a message and a code.They are
intended to represent an error message and an error code number. Both of these param-eters are optional.
Finally, underneath your 
tryblock, you need at least one catch block.A catch block
looks like this:
catch (typehint exception )
{
// handle exception
}
You can have more than one catch block associated with a single tryblock. Using
more than one would make sense if each catch block is waiting to catch a different type
of exception. For example, if you want to catch exceptions of the Exception class, your
catch block might look like this:
catch (Exception $e)
{
// handle exception
}
The object passed into (and caught by) the catch block is the one passed to (and
thrown by) the throw statement that raised the exception.The exception can be of any
type, but it is good form to use either instances of the Exception class or instances of
your own user-defined exceptions that inherit from the Exception class. (Y ou see how
to define your own exceptions later in the chapter.)
When an exception is raised, PHP looks for a matching catch block. If you have
more than one catch block, the objects passed in to each should be of different types so
that PHP can work out which catch block to fall through to.
One other point to note is that you can raise further exceptions within a catch block.
To make this discussion a bit clearer, let’s look at an example.A simple exception han-
dling example is shown in Listing 7.1.
Listing 7.1 basic_exception.php — Throwing and Catching an Exception
<?php
try
{
throw new Exception( ‘A terrible error has occurred ’, 42);
}catch (Exception $e){
echo ‘Exception ‘. $e->getCode(). ‘: ‘. $e->getMessage()
.’in ‘. $e->getFile(). ‘on line ‘. $e->getLine(). ‘<br />’;
}
?>09 6728 CH07  9/2/04  1:22 PM  Page 192
193 The Exception Class
In Listing 7.1, you can see that we used a number of methods of the Exception class,
which we discuss shortly.The result of running this code is shown in Figure 7.1.
Figure 7.1 This catch block reports the exception error message and notes
where it occurred.
In the sample code, you can see that we raise an exception of class Exception .This built-
in class has methods you can use in the catch block to report a useful error message.
The Exception Class
PHP5 comes with a built-in class called Exception .The constructor takes two parame-
ters, as we discussed previously: an error message and an error code.
In addition to the constructor, this class comes with the following built-in methods:
ngetCode() —Returns the code as passed to the constructor
ngetMessage() —Returns the message as passed to the constructor
ngetFile() —Returns the full path to the code file where the exception was raised
ngetLine() —Returns the line number in the code file where the exception was
raised
ngetTrace() —Returns an array containing a backtrace where the exception was
raised
ngetTraceAsString() —Returns the same information as getTrace ,formatted as a
string
n__toString() —Allows you to simply echo an Exception object, giving all the
information from the above methods
09 6728 CH07  9/2/04  1:22 PM  Page 193
194 Chapter 7 Exception Handling
You can see that we used the first four of these methods in Listing 7.1.Y ou could obtain
the same information (plus the backtrace) by executing
echo $e;
A backtrace shows which functions were executing at the time the exception was raised.
User-Defined Exceptions
Instead of instantiating and passing an instance of the base Exception class, you can pass
any other object you like. In most cases, you will extend the Exception class to create
your own exception classes.
You can pass any other object with your throw clause.Y ou may occasionally want to
do this if you are having problems with one particular object and want to pass it throughfor debugging purposes.
Most of the time, however, you will extend the base 
Exception class.The PHP man-
ual provides code that shows the skeleton of the Exception class.This code, taken from
http://www.php.net/zend-engine-2.php, is reproduced in Listing 7.2. Note that this isnot the actual code but represents what you can expect to inherit.
Listing 7.2 Exception class—This Is What You Can Expect to Inherit
<?php
class Exception {
function __construct(string $message=NULL, int $code=0) {
if (func_num_args()) {
$this->message = $message;
}$this->code = $code;$this->file = __FILE__; // of throw clause$this->line = __LINE__; // of throw clause$this->trace = debug_backtrace();$this->string = StringFormat($this);
}
protected $message = ‘Unknown exception ’;  // exception message
protected $code = 0; // user defined exception codeprotected $file;    // source filename of exceptionprotected $line;    // source line of exception
private $trace;      // backtrace of exception
private $string;    // internal only!!
final function getMessage(){
return $this->message;
}final function getCode() {09 6728 CH07  9/2/04  1:22 PM  Page 194
195 User-Defined Exceptions
return $this->code;
}final function getFile() {
return $this->file;
}final function getTrace() {
return $this->trace;
}final function getTraceAsString() {
return self::TraceFormat($this);
}function _toString() {
return $this->string;
}static private function StringFormat(Exception $exception) {
// ... a function not available in PHP scripts// that returns all relevant information as a string
}static private function TraceFormat(Exception $exception) {
// ... a function not available in PHP scripts// that returns the backtrace as a string
}
}
? >
The main reason we are looking at this class definition is to note that most of the public
methods are final:That means you cannot override them.Y ou can create your own sub-class 
Exceptions ,but you cannot change the behavior of the basic methods. Note that
you can override the __toString() function, so you can change the way the exception
is displayed. Y ou can also add your own methods.
An example of a user-defined Exception class is shown in Listing 7.3.
Listing 7.3 user_defined_exception.php —An Example of a User-Defined
Exception Class
<?php
class myException extends Exception
{
function __toString(){
return ‘<table border><tr><td><strong>Exception ‘. $this->getCode()
. ‘</strong>: ‘. $this->getMessage(). ’<br />’.’in ‘
. $this->getFile(). ‘on line ‘. $this->getLine()
. ‘</td></tr></table><br /> ’;Listing 7.2 Continued 09 6728 CH07  9/2/04  1:22 PM  Page 195
196 Chapter 7 Exception Handling
}
}
try
{
throw new myException( ‘A terrible error has occurred ’, 42);
}catch (myException $m){
echo $m;
}
?>
In this code, you declare a new exception class, called myException ,that extends the
basic Exception class.The difference between this class and the Exception class is that
you override the __toString() method to provide a “pretty” way of printing the
exception.The output from executing this code is shown in Figure 7.2.Listing 7.3 Continued 
Figure 7.2 The myException class provides exceptions with 
“pretty printing.”
This example is fairly simple. In the next section, we look at ways to create different
exceptions to deal with different categories of error.
09 6728 CH07  9/2/04  1:22 PM  Page 196
197 Exceptions in Bob’s Auto Parts
Exceptions in Bob’s Auto Parts
Chapter 2,“Storing and Retrieving Data,” described how you could store Bob’s order
data in a flat file.Y ou know that file I/O (in fact, any kind of I/O) is one area in pro-grams where errors often occur.This makes it a good place to apply exception handling.
Looking back at the original code, you can see that three things are likely to go
wrong with writing to the file: the file cannot be opened, a lock cannot be obtained, orthe file cannot be written to.We created an exception class for each of these possibilities.The code for these exceptions is shown in Listing 7.4.
Listing 7.4 file_exceptions.php —File I/O-Related Exceptions
<?php
class fileOpenException extends Exception
{
function __toString(){
return ‘fileOpenException ‘. $this->getCode()
. ‘: ‘. $this->getMessage(). ’<br />’.’in ‘
. $this->getFile(). ‘on line ‘. $this->getLine()
. ‘<br />’;
}
}
class fileWriteException extends Exception
{
function __toString(){
return ‘fileWriteException ‘. $this->getCode()
. ‘: ‘. $this->getMessage(). ’<br />’.’in ‘
. $this->getFile(). ‘on line ‘. $this->getLine()
. ‘<br />’;
}
}
class fileLockException extends Exception
{
function __toString(){
return ‘fileLockException ‘. $this->getCode()
. ‘: ‘. $this->getMessage(). ’<br />’.’in ‘
. $this->getFile(). ‘on line ‘. $this->getLine()
. ‘<br />’;
}
}
?>09 6728 CH07  9/2/04  1:22 PM  Page 197
198 Chapter 7 Exception Handling
These Exception subclasses do not do anything particularly interesting. In fact, for the
purpose of this application, you could leave them as empty subclasses or use the provided
Exception class.We have, however, provided a __toString() method for each of the
subclasses that explains what type of exception has occurred.
We rewrote the processorder.php file from Chapter 2 to incorporate the use of
exceptions.The new version is shown in Listing 7.5.
Listing 7.5 processorder.php —Bob’s Order-Processing Script with Exception
Handling Included
<?php
require_once( ‘file_exceptions.php ’);
// create short variable names
$tireqty = $_POST[ ‘tireqty’];
$oilqty = $_POST[ ‘oilqty’];
$sparkqty = $_POST[ ‘sparkqty ’];
$address = $_POST[ ‘address’];
$DOCUMENT_ROOT = $_SERVER[ ‘DOCUMENT_ROOT ’];
?><html><head>
<title>Bob ’s Auto Parts - Order Results</title>
</head><body><h1>Bob’s Auto Parts</h1>
<h2>Order Results</h2><?php$date = date( ‘H:i, jS F ’) ;
echo ‘<p>Order processed at ‘;
echo $date;echo ‘</p>’;
echo ‘<p>Your order is as follows: </p> ’;
$totalqty = 0;
$totalqty = $tireqty + $oilqty + $sparkqty;echo ‘Items ordered: ‘.$totalqty. ’<br />’;
if( $totalqty == 0)
{
echo ‘You did not order anything on the previous page!<br /> ’;
}09 6728 CH07  9/2/04  1:22 PM  Page 198
199 Exceptions in Bob’s Auto Parts
else
{
if ( $tireqty>0 )
echo $tireqty. ’tires<br /> ’;
if ( $oilqty>0 )
echo $oilqty. ’bottles of oil<br /> ’;
if ( $sparkqty>0 )
echo $sparkqty. ’spark plugs<br /> ’;
}
$totalamount = 0.00;define(‘TIREPRICE ’, 100);
define(‘OILPRICE ’, 10);
define(‘SPARKPRICE ’, 4);
$totalamount = $tireqty * TIREPRICE
+ $oilqty * OILPRICE+ $sparkqty * SPARKPRICE;
$totalamount=number_format($totalamount, 2, ‘.’, ‘‘);
echo ‘<p>Total of order is ‘.$totalamount. ’</p>’;
echo ‘<p>Address to ship to is ‘.$address. ’</p>’;
$outputstring = $date. ”\t”.$tireqty. ”tires \t ”.$oilqty. ”oil\t”
.$sparkqty. ”spark plugs\t\$ ”.$totalamount
.”\t”. $address. ”\n”;
// open file for appending
try{
if (!($fp = @fopen( “$DOCUMENT_ROOT/../orders/orders.txt ”, ‘ab’)))
throw new fileOpenException();
if (!flock($fp, LOCK_EX))
throw new fileLockException();
if (!fwrite($fp, $outputstring, strlen($outputstring)))
throw new fileWriteException();
flock($fp, LOCK_UN);fclose($fp);echo ‘<p>Order written.</p> ’;
}Listing 7.5 Continued 09 6728 CH07  9/2/04  1:22 PM  Page 199
200 Chapter 7 Exception Handling
catch (fileOpenException $foe)
{
echo ‘<p><strong>Orders file could not be opened.  ‘
.’Please contact our webmaster for help.</strong></p> ’;
}catch (Exception $e){
echo ‘<p><strong>Your order could not be processed at this time.  ‘
.’Please try again later.</strong></p> ’;
}
?>
</body>
</html>
You can see that the file I/O section of the script is wrapped in a tryblock. It is gener-
ally considered good coding practice to have small tryblocks and catch the relevant
exceptions at the end of each.This makes your exception handling code easier to writeand maintain because you can see what you are dealing with.
If you cannot open the file, you throw a 
fileOpenException ;if you cannot lock the
file, you throw a fileLockException ;and if you cannot write to the file, you throw a
fileWriteException .
Look at the catch blocks.T o illustrate a point, we have included only two: one to
handle fileOpenException s and one to handle Exception s. Because the other excep-
tions inherit from Exception ,they will be caught by the second catch block.Catch
blocks are matched on the same basis as the instanceof operator.This is a good reason
for extending your own exception classes from a single class.
One important warning: If you raise an exception for which you have not written a
matching catch block, PHP will report a fatal error.
Exceptions and PHP’s Other Error Handling
Mechanisms
In addition to the exception handling mechanism discussed in this chapter, PHP has
complex error handling support, which we consider in Chapter 25,“Debugging.” Notethat the process of raising and handling exceptions does not interfere or prevent thiserror handling mechanism from operating.
In Listing 7.5, notice how the call to 
fopen() is still prefaced with the @error sup-
pression operator. If it fails, PHP will issue a warning that may or may not be reportedor logged depending on the error reporting settings in 
php.ini .These settings are dis-
cussed at length in Chapter 25, but you need to know that this warning will still beissued regardless of whether you raise an exception.Listing 7.5 Continued 09 6728 CH07  9/2/04  1:22 PM  Page 200
201 Next
Further Reading
Because exception handling is new to PHP , not much has been written on the subject.
However, basic information about exception handling is plentiful. Sun has a good tutori-al about what exceptions are and why you might want to use them (written from a Java perspective, of course) at http://java.sun.com/docs/books/tutorial/essential/
exceptions/definition.html.
Next
The next part of the book deals with MySQL.We explain how to create and populate aMySQL database and then link what you’ve learned to PHP so that you can access yourdatabase from the Web.09 6728 CH07  9/2/04  1:22 PM  Page 201
09 6728 CH07  9/2/04  1:22 PM  Page 202
II
Using MySQL
8Designing Y our Web Database
9Creating Y our Web Database
10Working with Y our MySQL Database
11Accessing Y our MySQL Database from the Web with PHP
12Advanced MySQL Administration
13Advanced MySQL Programming10 6728 Part2  9/2/04  1:18 PM  Page 203
10 6728 Part2  9/2/04  1:18 PM  Page 204
8
Designing Your Web Database 
N OWTHAT YOU ARE FAMILIAR WITH THE BASICS of PHP , you can begin looking at
integrating a database into your scripts.As you might recall, Chapter 2,“Storing andRetrieving Data,” described the advantages of using a relational database instead of a flatfile.They include
nRDBMSs can provide faster access to data than flat files.
nRDBMSs can be easily queried to extract sets of data that fit certain criteria.
nRDBMSs have built-in mechanisms for dealing with concurrent access so thatyou, as a programmer, don’t have to worry about it.
nRDBMSs provide random access to your data.
nRDBMSs have built-in privilege systems.
For some concrete examples, using a relational database allows you to quickly and easily
answer queries about where your customers are from, which of your products is sellingthe best, or what types of customers spend the most.This information can help youimprove the site to attract and keep more users but would be very difficult to distill froma flat file.
The database that you will use in this part of the book is MySQL. Before we get into
MySQL specifics in the next chapter, we need to discuss
nRelational database concepts and terminology
nWeb database design
nWeb database architecture
You will learn the following in this part of the book:
nChapter 9,“Creating Y our Web Database,” covers the basic configuration you will
need to connect your MySQL database to the Web.Y ou will learn how to createusers, databases, tables, and indexes, and learn about MySQL’s different storageengines.11 6728 CH08  9/2/04  1:22 PM  Page 205
206 Chapter 8 Designing Your Web Database
nChapter 10,“Working with Y our MySQL Database,” explains how to query the
database and add, delete, and update records, all from the command line.
nChapter 11,“Accessing Y our MySQL Database from the Web with PHP ,” explainshow to connect PHP and MySQL together so that you can use and administeryour database from a web interface.Y ou will learn two methods of doing this:
using PHP’s MySQL library and using the PEAR:DB database abstraction layer.
nChapter 12,“Advanced MySQL Administration,” covers MySQL administration inmore detail, including details of the privilege system, security, and optimization.
nChapter 13,“Advanced MySQL Programming,” covers the storage engines inmore detail, including coverage of transactions, full text search, and stored proce-dures.
Relational Database Concepts
Relational databases are, by far, the most commonly used type of database.They dependon a sound theoretical basis in relational algebra.Y ou don’t need to understand relationaltheory to use a relational database (which is a good thing), but you do need to under-stand some basic database concepts.
Tables
Relational databases are made up of relations, more commonly called tables.A table is
exactly what it sounds like—a table of data. If you’ve used an electronic spreadsheet,you’ve already used a table.
Look at the sample table in Figure 8.1. It contains the names and addresses of the
customers of a bookstore named Book-O-Rama.
Figure 8.1 Book-O-Rama’s customer details are stored in a table.
The table has a name ( Customers ); a number of columns, each corresponding to a differ-
ent piece of data; and rows that correspond to individual customers.CUSTOMERS
CustomerID
1
23Julie Smith
Alan WongMichelle Arthur25 Oak Street
1/47 Haines Avenue357 North RoadAirport West
Box HillYarravilleName Address City11 6728 CH08  9/2/04  1:22 PM  Page 206
207 Relational Database Concepts
Columns
Each column in the table has a unique name and contains different data.Additionally,
each column has an associated data type. For instance, in the Customers table in 
Figure 8.1, you can see that CustomerID is an integer and the other three columns 
are strings. Columns are sometimes called fields or attributes .
Rows
Each row in the table represents a different customer. Because of the tabular format, each
row has the same attributes. Rows are also called records or tuples.
Values
Each row consists of a set of individual values that correspond to columns. Each value
must have the data type specified by its column.
Keys
You need to have a way of identifying each specific customer. Names usually aren’t a
very good way of doing this. If you have a common name, you probably understand
why. Consider Julie Smith from the Customers table, for example. If you open your tele-
phone directory, you may find too many listings of that name to count.
You could distinguish Julie in several ways. Chances are, she’s the only Julie Smith liv-
ing at her address.Talking about “Julie Smith, of 25 Oak Street,Airport West” is prettycumbersome and sounds too much like legalese. It also requires using more than onecolumn in the table.
What we have done in this example, and what you will likely do in your applications,
is assign a unique 
CustomerID .This is the same principle that leads to your having a
unique bank account number or club membership number. It makes storing your detailsin a database easier.An artificially assigned identification number can be guaranteed to beunique. Few pieces of real information, even if used in combination, have this property.
The identifying column in a table is called the key or the primary key .A key can also
consist of multiple columns. If, for example, you choose to refer to Julie as “Julie Smith,of 25 Oak Street,Airport West,” the key would consist of the Name,Address, and Citycolumns and could not be guaranteed to be unique.
Databases usually consist of multiple tables and use a key as a reference from one table
to another. Figure 8.2 shows a second table added to the database.This one stores ordersplaced by customers. Each row in the 
Orders table represents a single order, placed by a
single customer.Y ou know who the customer is because you store her CustomerID .Y ou
can look at the order with OrderID 2, for example, and see that the customer with
CustomerID 1 placed it. If you then look at the Customers table, you can see that
CustomerID 1 refers to Julie Smith.11 6728 CH08  9/2/04  1:22 PM  Page 207
208 Chapter 8 Designing Your Web Database
Figure 8.2 Each order in the Orders table refers to a customer from the
Customers table.
The relational database term for this relationship is foreign key .CustomerID is the primary
key in Customers ,but when it appears in another table, such as Orders ,it is referred to
as a foreign key.
You might wonder why we chose to have two separate tables.Why not just store
Julie’s address in the Orders table? We explore this issue in more detail in the next 
section.
Schemas
The complete set of table designs for a database is called the database schema .It is akin to
a blueprint for the database.A schema should show the tables along with their columns,and the primary key of each table and any foreign keys.A schema does not include anydata, but you might want to show sample data with your schema to explain what it isfor.The schema can be shown in informal diagrams as we have done, in entity relationship
diagrams (which are not covered in this book), or in a text form, such as
Customers(CustomerID , Name, Address, City)
Orders(OrderID , CustomerID , Amount, Date)
Underlined terms in the schema are primary keys in the relation in which they are
underlined. Italic terms are foreign keys in the relation in which they appear italic.CUSTOMERS
CustomerID
1
23Julie Smith
Alan WongMichelle Arthur25 Oak Street
1/47 Haines Avenue357 North RoadAirport West
Box HillYarravilleName Address City
ORDERS
OrderID
1
233
1227.50
12.9974.0002-Apr-2000
15-Apr-200019-Apr-2000
43 6.99 01-May-2000CustomerID Amount Date11 6728 CH08  9/2/04  1:22 PM  Page 208
209 How to Design Your Web Database
Relationships
Foreign keys represent a relationship between data in two tables. For example, the link
from Orders to Customers represents a relationship between a row in the Orders table
and a row in the Customers table.
Three basic kinds of relationships exist in a relational database.They are classified
according to the number of elements on each side of the relationship. Relationships canbe either one-to-one, one-to-many, or many-to-many.
A one-to-one relationship means that one of each thing is used in the relationship.
For example, if you put addresses in a separate table from 
Customers ,they would have a
one-to-one relationship between them.Y ou could have a foreign key from Addresses to
Customers or the other way around (both are not required).
In a one-to-many relationship, one row in one table is linked to many rows in anoth-
er table. In this example, one Customer might place many Orders .In these relationships,
the table that contains the many rows has a foreign key to the table with the one row.Here, we put the 
CustomerID into the Order table to show the relationship.
In a many-to-many relationship, many rows in one table are linked to many rows in
another table. For example, if you have two tables, Books and Authors ,you might find
that one book was written by two coauthors, each of whom had written other books,on their own or possibly with other authors.This type of relationship usually gets a tableall to itself, so you might have 
Books ,Authors ,and Books_Authors .This third table
would contain only the keys of the other tables as foreign keys in pairs, to show which
authors are involved with which books.
How to Design Your Web Database
Knowing when you need a new table and what the key should be can be something ofan art.Y ou can read reams of information about entity relationship diagrams and databasenormalization, which are beyond the scope of this book. Most of the time, however, youcan follow a few basic design principles. Let’s consider them in the context of Book-O-Rama.
Think About the Real-World Objects You Are Modeling
When you create a database, you are usually modeling real-world items and relationshipsand storing information about those objects and relationships.
Generally, each class of real-world objects you model needs its own table.Think about
it: Y ou want to store the same information about all your customers. If a set of data hasthe same “shape,” you can easily create a table corresponding to that data.
In the Book-O-Rama example, you want to store information about customers, the
books that you sell, and details of the orders.The customers all have names and addresses.Each order has a date, a total amount, and a set of books that were ordered. Each bookhas an International Standard Book Number (ISBN), an author, a title, and a price.11 6728 CH08  9/2/04  1:22 PM  Page 209
210 Chapter 8 Designing Your Web Database
This set of information suggests you need at least three tables in this database:
Customers ,Orders ,and Books .This initial schema is shown in Figure 8.3.
Figure 8.3 The initial schema consists of Customers ,Orders ,and Books .
At present, you can’t tell from the model which books were ordered in each order.We
will deal with this situation shortly.
Avoid Storing Redundant Data
Earlier, we asked the question:“Why not just store Julie Smith’s address in the Orders
table?”
If Julie orders from Book-O-Rama on a number of occasions, which you hope she
will, you will end up storing her data multiple times.Y ou might end up with an Orders
table that looks like the one shown in Figure 8.4.CUSTOMERS
CustomerID
1
23Julie Smith
Alan WongMichelle Arthur25 Oak Street
1/47 Haines Avenue357 North RoadAirport West
Box HillYarravilleName Address City
BOOKS
ISBN
0-672-31697-8
0-672-31745-10-672-31509-2Michael Morgan
Thomas DownPruitt, et al.Java 2 for Professional Developers
Installing GNU/LinuxTeach Y ourself GIMP in 24  Hours34.99
24.9924.99Author Title PriceORDERS
OrderID
1
233
1227.50
12.9974.0002-Apr-2000
15-Apr-200019-Apr-2000
43 6.99 01-May-2000CustomerID Amount Date11 6728 CH08  9/2/04  1:22 PM  Page 210
211 How to Design Your Web Database
Figure 8.4 A database design that stores redundant data takes up extra space
and can cause anomalies in the data.
Such a design creates two basic problems:
nIt’s a waste of space.Why store Julie’s details three times if you need to store them
only once?
nIt can lead to update anomalies —that is, situations in which you change the database
and end up with inconsistent data.The integrity of the data is violated, and you nolonger know which data is correct and which is incorrect.This scenario generallyleads to losing information.
Three kinds of update anomalies need to be avoided: modification, insertion, and dele-
tion anomalies.
If Julie moves to a new house while she has pending orders, you will need to update
her address in three places instead of one, doing three times as much work.Y ou mighteasily overlook this fact and change her address in only one place, leading to inconsistentdata in the database (a very bad thing).These problems are called modification anomalies
because they occur when you are trying to modify the database.
With this design, you need to insert Julie’s details every time you take an order, so
each time you must make sure that her details are consistent with the existing rows inthe table. If you don’t check, you might end up with two rows of conflicting informa-tion about Julie. For example, one row might indicate that Julie lives in Airport West, andanother might indicate she lives in Airport.This scenario is called an insertion anomaly
because it occurs when data is being inserted.
The third kind of anomaly is called a deletion anomaly because it occurs (surprise, sur-
prise) when you are deleting rows from the database. For example, imagine that after anorder has been shipped, you delete it from the database.After all Julie’s current ordershave been filled, they are all deleted from the 
Orders table.This means that you no
longer have a record of Julie’s address.Y ou can’t send her any special offers, and the nexttime she wants to order something from Book-O-Rama, you have to get her details allover again.
Generally, you should design your database so that none of these anomalies occur.OrderID
12
1314
151
11
1Julie Smith
Julie Smith
Julie Smith
Julie Smith25 Oak Street
25 Oak Street25 Oak Street
25 Oak StreetAirport West
Airport WestAirport West
Airport West199.50
43.0015.99
23.7525-Apr-2000
29-Apr-200030-Apr-2000
01-May-2000CustomerID Amount Date Name Address City11 6728 CH08  9/2/04  1:22 PM  Page 211
212 Chapter 8 Designing Your Web Database
Use Atomic Column Values
Using atomic column values means that in each attribute in each row, you store only
one thing. For example, you need to know what books make up each order.Y ou coulddo this in several ways.
One solution would be to add a column to the 
Orders table listing all the books that
have been ordered, as shown in Figure 8.5.
Figure 8.5 With this design, the Books Ordered attribute in each row has
multiple values.
This solution isn’t a good idea for a few reasons.What you’re really doing is nesting a
whole table inside one column—a table that relates orders to books.When you set upyour columns this way, it becomes more difficult to answer such questions as “How
many copies of Java 2 for Professional Developers have been ordered?”The system can no
longer just count the matching fields. Instead, it has to parse each attribute value to seewhether it contains a match anywhere inside it.
Because you’re really creating a table-inside-a-table, you should really just create that
new table.This new table, called 
Order_Items ,is shown in Figure 8.6.OrderIDORDERS
1
2
3
43
1
2
327.50
12.99
74.00
6.9902-Apr-2000
15-Apr-2000
19-Apr-2000
01-May-20000-672-31697-8
0-672-31745-1, 0-672-31509-2
0-672-31697-8
0-672-31745-1, 0-672-31509-2, 0-672-31697-8CustomerID Amount Date Books Ordered
Figure 8.6 This design makes it easier to search for particular books that
have been ordered.
This table provides a link between the Orders and Books tables.This type of table is
common when a many-to-many relationship exists between two objects; in this case, oneorder might consist of many books, and each book can be ordered by many people.OrderID
1
2
23
44
41
2
11
12
1ISBN Quantity
0-672-31697-8
0-672-31745-1
0-672-31509-20-672-31697-8
0-672-31745-10-672-31509-2
0-672-31697-8ORDER_ITEMS11 6728 CH08  9/2/04  1:22 PM  Page 212
213 How to Design Your Web Database
Choose Sensible Keys
Make sure that the keys you choose are unique. In this case, we created a special key for
customers ( CustomerID ) and for orders ( OrderID ) because these real-world objects might
not naturally have an identifier that can be guaranteed to be unique.Y ou don’t need tocreate a unique identifier for books; this has already been done, in the form of an ISBN.For 
Order_Item ,you can add an extra key if you want, but the combination of the two
attributes OrderID and ISBN are unique as long as more than one copy of the same book
in an order is treated as one row. For this reason, the table Order_Items has a Quantity
column.
Think About the Questions You Want to Ask the Database
Continuing from the previous section, think about what questions you want the databaseto answer. (For example, what are Book-O-Rama’s best-selling books?) Make sure thatthe database contains all the data required and that the appropriate links exist betweentables to answer the questions you have.
Avoid Designs with Many Empty Attributes
If you wanted to add book reviews to the database, you could do so in at least two ways.
These two approaches are shown in Figure 8.7.
Figure 8.7 To add reviews, you can either add a Review column to the
Books table or add a table specifically for reviews.
The first way means adding a Review column to the Books table.This way, there is a
field for the Review to be added for each book. If many books are in the database, and
the reviewer doesn’t plan to review them all, many rows won’t have a value in thisattribute.This is called having a null value .BOOKS
BOOK_REVIEWSISBN
ISBN0-672-31697-8
0-672-31745-10-672-31509-2Michael Morgan
Thomas DownPruitt, et al.Java 2 for Professional Developers
Installing Debian GNU/LinuxTeach Y ourself GIMP in 24  Hours34.99
24.9924.99Author Title Price Review
Review11 6728 CH08  9/2/04  1:22 PM  Page 213
214 Chapter 8 Designing Your Web Database
Having many null values in your database is a bad idea. It wastes storage space and
causes problems when working out totals and other functions on numerical columns.When a user sees a null in a table, he doesn’t know whether it’s because this attribute isirrelevant, whether the database contains a mistake, or whether the data just hasn’t beenentered yet.
You can generally avoid problems with many nulls by using an alternate design. In
this case, you can use the second design proposed in Figure 8.7. Here, only books with areview are listed in the 
Book_Reviews table, along with their reviews.
Note that this design is based on the idea of having a single in-house reviewer; that is,
a one-to-one relationship exists between Books and Reviews .If you want to include
many reviews of the same book, this would be a one-to-many relationship, and youwould need to go with the second design option.Also, with one review per book, you
can use the ISBN as the primary key in the 
Book_Reviews table. If you have multiple
reviews per book, you should introduce a unique identifier for each.
Summary of Table Types
Youwill usually find that your database design ends up consisting of two kinds of tables:
nSimple tables that describe a real-world object.They might also contain keys to
other simple objects with which they have a one-to-one or one-to-many relation-ship. For example, one customer might have many orders, but an order is placed bya single customer.Thus, you put a reference to the customer in the order.
nLinking tables that describe a many-to-many relationship between two real objectssuch as the relationship between 
Orders and Books .These tables are often associat-
ed with some kind of real-world transaction.
Web Database Architecture
Now that we’ve discussed the internal architecture of the database, we can look at the
external architecture of a web database system and discuss the methodology for develop-ing a web database system.
Architecture
The basic operation of a web server is shown in Figure 8.8.This system consists of twoobjects: a web browser and a web server.A communication link is required betweenthem.A web browser makes a request of the server.The server sends back a response.This architecture suits a server delivering static pages well.The architecture that deliversa database-backed website, however, is somewhat more complex.11 6728 CH08  9/2/04  1:22 PM  Page 214
215 Web Database Architecture
Figure 8.8 The client/server relationship between a web browser and web
server requires communication.
The web database applications you will build in this book follow a general web database
structure like the one shown in Figure 8.9. Most of this structure should already befamiliar to you.Browser Web ServerRequest
Response
Figure 8.9 The basic web database architecture consists of the web browser,
web server, scripting engine, and database server.
A typical web database transaction consists of the following stages, which are numbered
in Figure 8.9. Let’s examine the stages in the context of the Book-O-Rama example:
1. A user’s web browser issues an HTTP request for a particular web page. For exam-
ple, using an HTML form, she might have requested a search for all the books atBook-O-Rama written by Laura Thomson.The search results page is called
results.php .
2. The web server receives the request for results.php ,retrieves the file, and passes
it to the PHP engine for processing.
3. The PHP engine begins parsing the script. Inside the script is a command to con-
nect to the database and execute a query (perform the search for books). PHPopens a connection to the MySQL server and sends on the appropriate query.
4. The MySQL server receives the database query, processes it, and sends the results—
a list of books—back to the PHP engine.
5. The PHP engine finishes running the script, which usually involves formatting the
query results nicely in HTML. It then returns the resulting HTML to the webserver.
6. The web server passes the HTML back to the browser, where the user can see the
list of books she requested.Browser Web Server1
625
PHP Engine MySQL Server3
411 6728 CH08  9/2/04  1:22 PM  Page 215
216 Chapter 8 Designing Your Web Database
The process is basically the same regardless of which scripting engine or database server
you use. Often the web server software, PHP engine, and database server all run on the
same machine. However, it is also quite common for the database server to run on a dif-ferent machine.Y ou might do this for reasons of security, increased capacity, or loadspreading. From a development perspective, this approach is much the same to workwith, but it might offer some significant advantages in performance.
As your applications increase in size and complexity, you will begin to separate your
PHP applications into tiers—typically, a database layer that interfaces to MySQL, a busi-ness logic layer that contains the core of the application, and a presentation layer thatmanages the HTML output. However, the basic architecture shown in Figure 8.9 stillholds; you just add more structure to the PHP section.
Further Reading
In this chapter, we covered some guidelines for relational database design. If you want todelve into the theory behind relational databases, you can try reading books by some ofthe relational gurus such as C.J. Date. Be warned, however, that the material can be com-paratively theoretical and might not be immediately relevant to a commercial web devel-oper.The average web database tends not to be that complicated.
Next
In the next chapter, you start setting up your MySQL database. First, you learn how toset up a MySQL database for the web, how to query it, and then how to query it from PHP .11 6728 CH08  9/2/04  1:22 PM  Page 216
9
Creating Your Web Database
INTHIS CHAPTER ,WE EXPLAIN HOW TO set up a MySQL database for use on a website.
Key topics covered in this chapter include
nCreating a database
nSetting up users and privileges
nIntroducing the privilege system
nCreating database tables
nCreating indexes
nChoosing column types in MySQL
In this chapter, we follow through with the Book-O-Rama online bookstore application
discussed in the preceding chapter.As a reminder, here is the schema for the Book-O-Rama application:
Customers(CustomerID , Name, Address, City)
Orders(OrderID , CustomerID , Amount, Date)
Books(ISBN , Author, Title, Price)
Order_Items( OrderID, ISBN, Quantity)
Book_Reviews( ISBN, Reviews)
Remember that each primary key is underlined and each foreign key is italic.
Touse the material in this section, you must have access to MySQL.This usually
means that you
nHave completed the basic install of MySQL on your web server.This step includes
nInstalling the files
nSetting up a user for MySQL to run as12 6728 ch09  9/2/04  1:21 PM  Page 217
218 Chapter 9 Creating Your Web Database
nSetting up your path
nRunning mysql_install_db ,if required
nSetting the root password
nDeleting the anonymous user and test database
nStarting the MySQL server for the first time and setting it up to run auto-
matically
If you’ve completed all these tasks, you can go right ahead and read this chapter. If
you haven’t, you can find instructions on how to do these things in Appendix A,
“Installing PHP5 and MySQL5.”
If you have problems at any point in this chapter, your MySQL system might not
be set up correctly. If that is the case, refer to this list and Appendix A to make surethat your setup is correct.
nHave access to MySQL on a machine that you do not administer, such as a webhosting service, a machine at your workplace, and so on.
If this is the case, to work through the examples or to create your own database,
you need to have your administrator set up a user and database for you to work
with and tell you the username, password, and database name she has assigned to you.
You can either skip the sections of this chapter that explain how to set up users
and databases or read them to better explain what you need to your systemadministrator.As a typical user, you cannot execute the commands to create usersand databases.
The examples in this chapter were built and tested with the latest MySQL 5.0 version at
the time of writing. Some earlier versions of MySQL have less functionality.Y ou shouldinstall or upgrade to the most current stable release at the time of reading. Y ou candownload the current release from the MySQL site at
http://mysql.com
In this book, we interact with MySQL using a command-line client called the MySQL
monitor, which comes with every MySQL installation. However, you can use otherclients. If you are using MySQL in a hosted web environment, for example, systemadministrators will often provide the phpMyAdmin browser-based interface for you touse. Different GUI clients obviously involve slightly different procedures from what wedescribe here, but you should be able to adapt these instructions fairly easily.
Using the MySQL Monitor
In the MySQL examples in this chapter and the next, each command ends with a semi-colon (
;). It tells MySQL to execute the command. If you leave off the semicolon, noth-
ing will happen.This is a common problem for new users.12 6728 ch09  9/2/04  1:21 PM  Page 218
219 Logging In to MySQL
As a result of leaving off the semicolon, you can have new lines in the middle of a
command.We used this scheme to make the examples easier to read.Y ou can see wherewe have used this approach because MySQL provides a continuation symbol; it’s an
arrow that looks like this:
mysql> grant select
->
This symbol means MySQL expects more input. Until you type the semicolon, you get
these characters each time you press Enter.
Another point to note is that SQL statements are not case sensitive, but database and
table names can be (more on this topic later).
Logging In to MySQL
To log in to MySQL, go to a command-line interface on your machine and type the
following:
mysql -h hostname -u username -p
Themysql command invokes the MySQL monitor, which is a command-line client that
connects you to the MySQL server.
The -hswitch specifies the host to which you want to connect—that is, the machine
on which the MySQL server is running. If you’re running this command on the samemachine as the MySQL server, you can leave out this switch and the 
hostname parame-
ter. If not, you should replace the hostname parameter with the name of the machine
where the MySQL server is running.
The -uswitch specifies the username you want to connect as. If you do not specify,
the default will be the username you are logged in to the operating system as.
If you have installed MySQL on your own machine or server, you need to log in as
root and create the database we’ll use in this section.Assuming that you have a clean
install,root is the only user you’ll have to begin with. If you are using MySQL on a
machine administered by somebody else, use the username that person gave you.
The -pswitch tells the server you want to connect using a password.Y ou can leave it
out if a password has not been set for the user you are logging in as.
If you are logging in as root and have not set a password for root,we strongly rec-
ommend that you visit Appendix A right now.Without a root password, your system is
insecure.
You don’t need to include the password on this line.The MySQL server will ask you
for it. In fact, it’s better if you don’t include it here. If you enter the password on thecommand line, it will appear as plain text on the screen and will be quite simple forother users to discover.
After you enter the previous command, you should get a response something like
this:
Enter password: 12 6728 ch09  9/2/04  1:21 PM  Page 219
220 Chapter 9 Creating Your Web Database
(If this command doesn’t work, verify that the MySQL server is running and the mysql
command is somewhere in your path.)
Youshould then enter your password. If all goes well, you should see a response
something like this:
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 1 to server version: 5.0.0-alpha-max-debug
Type ‘help;’or ‘\h’for help. Type ‘\c’to clear the buffer.
mysql>
On your own machine, if you don’t get a response similar to this, make sure that you
have run mysql_install_db if required, you have set the root password, and you’ve
typed it in correctly. If it isn’t your machine, make sure that you typed in the passwordcorrectly.
You should now be at a MySQL command prompt, ready to create the database. If
you are using your own machine, follow the guidelines in the next section. If you are
using somebody else’s machine, these steps should already have been done for you.Y oucan jump ahead to the “Using the Right Database” section.Y ou might want to read theintervening sections for general background, but you cannot run the commands specifiedthere. (Or at least you shouldn’t be able to!)
Creating Databases and Users
The MySQL database system can support many different databases.Y ou will generallyhave one database per application. In the Book-o-Rama example, the database will becalled 
books .
Creating the Database
Creating the database is the easiest part.At the MySQL command prompt, type
mysql> create database dbname;
You should substitute the name of the database you want to create for dbname .T o begin
creating the Book-O-Rama example, create a database called books .
That’s it.Y ou should see a response like this:
Query OK, 1 row affected (0.06 sec)
This means everything has worked. If you don’t get this response, make sure that youtyped the semicolon at the end of the line.A semicolon tells MySQL that you are fin-ished, and it should actually execute the command.12 6728 ch09  9/2/04  1:21 PM  Page 220
221 Introducing MySQL’s Privilege System
Setting Up Users and Privileges
A MySQL system can have many users.The root user should generally be used for
administration purposes only, for security reasons. For each user who needs to use thesystem, you need to set up an account and password.They do not need to be the same asusernames and passwords outside MySQL (for example, Unix or NT usernames andpasswords).The same principle applies to 
root.Having different passwords for the system
and for MySQL is a good idea, especially when it comes to the root password.
Setting up passwords for users isn’t compulsory, but we strongly recommend that you
set up passwords for all the users you create. For the purposes of setting up a web data-base, it’s a good idea to set up at least one user per web application.Y ou might ask,“Whywould I want to do this?”The answer lies in privileges.
Introducing MySQL’s Privilege System
One of the best features of MySQL is that it supports a sophisticated privilege system.A
privilege is the right to perform a particular action on a particular object and is associated
with a particular user.The concept is similar to file permissions.When you create a userwithin MySQL, you grant her a set of privileges to specify what she can and cannot dowithin the system.
Principle of Least Privilege
The principle of least privilege can be used to improve the security of any computer system. It’s a basic but important principle that is often overlooked.The principle is asfollows:
A user (or process) should have the lowest level of privilege required to perform hisassigned task.
It applies in MySQL as it does elsewhere. For example, to run queries from the Web, a
user does not need all the privileges to which 
root has access.Y ou should therefore cre-
ate another user who has only the necessary privileges to access the database you justcreated.
User Setup:The GRANT Command
The GRANT and REVOKE commands enable you to give rights to and take them away from
MySQL users at these four levels of privilege:
nGlobal
nDatabase
nTable
nColumn12 6728 ch09  9/2/04  1:21 PM  Page 221
222 Chapter 9 Creating Your Web Database
We see shortly how each can be applied.
The GRANT command creates users and gives them privileges.The general form of the
GRANT command is
GRANT privileges [columns]
ON item
TO user_name [IDENTIFIED BY ‘password ’]
[REQUIRE ssl_options ]
[WITH [GRANT OPTION | limit_options ]  ]
The clauses in square brackets are optional.There are a number of placeholders in this
syntax.The first, privileges ,should be a comma-separated list of privileges. MySQL
has a defined set of such privileges, which are described in the next section.
The columns placeholder is optional.Y ou can use it to specify privileges on a 
column-by-column basis.Y ou can use a single column name or a comma-separated listof column names.
The 
item placeholder is the database or table to which the new privileges apply.Y ou
can grant privileges on all the databases by specifying *.*as the item.This is called
granting global privileges.Y ou can also do this by specifying *alone if you are not using
any particular database. More commonly, you can specify all tables in a database as
dbname.*,on a single table as dbname.tablename ,or on specific columns by specifying
dbname.tablename and some specific columns in the columns placeholder.These exam-
ples represent the three other levels of privilege available: database ,table,and column ,
respectively. If you are using a specific database when you issue this command,
tablename on its own will be interpreted as a table in the current database.
Theuser_name should be the name you want the user to log in as in MySQL.
Remember that it does not have to be the same as a system login name.The user_name
in MySQL can also contain a hostname.Y ou can use this to differentiate between, say,
laura (interpreted as laura@localhost ) and laura@somewhere.com .This capability is
quite useful because users from different domains often have the same name. It alsoincreases security because you can specify where users can connect from, and evenwhich tables or databases they can access from a particular location.
The 
password placeholder should be the password you want the user to log in with.
The usual rules for selecting passwords apply.We discuss security more later, but a pass-word should not be easily guessable.This means that a password should not be a diction-
ary word or the same as the username. Ideally, it should contain a mixture of upper- andlowercase and nonalphabetic characters.
The 
REQUIRE clause allows you to specify that the user must connect via Secure
Sockets Layer (SSL) and specify other SSL options. For more information on SSL con-nections to MySQL, refer to the MySQL manual.
The 
WITH GRANT OPTION option, if specified, allows the specified user to grant her
own privileges to others.
You can instead specify the WITH clause as
MAX_QUERIES_PER_HOUR n12 6728 ch09  9/2/04  1:21 PM  Page 222
223 Introducing MySQL’s Privilege System
or
MAX_UPDATES_PER_HOUR n
or
MAX_CONNECTIONS_PER_HOUR n
These clauses allow you to limit the number of queries, updates, or connections per
hour a user may make.They can be useful for limiting individual user load on sharedsystems.
Privileges are stored in five system tables, in the database called 
mysql .These five
tables are called mysql.user ,mysql.db ,mysql.host ,mysql.tables_priv ,and
mysql.columns_priv .As an alternative to GRANT ,you can alter these tables directly.
We discuss exactly how these tables work and how you can alter them directly in
Chapter 12,“Advanced MySQL Administration.”
Types and Levels of Privileges
Three basic types of privileges exist in MySQL: privileges suitable for granting to regular
users, privileges suitable for administrators, and a couple of special privileges.Any usercan be granted any of these privileges, but it’s usually sensible to restrict the administra-tor type privileges to administrators, according to the principle of least privilege.
You should grant privileges to users only for the databases and tables they need to
use.Y ou should not grant access to the 
mysql database to anyone except an administra-
tor.This is the place where all the users, passwords, and so on are stored. (We look at thisdatabase in Chapter 12.)
Privileges for regular users directly relate to specific types of SQL commands and
whether a user is allowed to run them.We discuss these SQL commands in detail in thenext chapter. For now, let’s look at a conceptual description of what they do.These priv-ileges are shown in Table 9.1.The items under the Applies T o column are the objects towhich privileges of this type can be granted.
Table 9.1 Privileges for Users
Privilege Applies To Description
SELECT tables, columns Allows users to select rows (records) from tables.
INSERT tables, columns Allows users to insert new rows into tables.
UPDATE tables, columns Allows users to modify values in existing table rows.
DELETE tables Allows users to delete existing table rows.
INDEX tables Allows users to create and drop indexes on particular tables.
ALTER tables Allows users to alter the structure of existing tables by, for
example, adding columns, renaming columns or tables, andchanging data types of columns.12 6728 ch09  9/2/04  1:21 PM  Page 223
224 Chapter 9 Creating Your Web Database
CREATE databases, tables Allows users to create new databases or tables. If a
particular database or table is specified in GRANT ,they can
only create that database or table, which means they willhave to drop it first.
DROP databases, tables Allows users to drop (delete) databases or tables.
Most of the privileges for regular users are relatively harmless in terms of system security.
The ALTER privilege can be used to work around the privilege system by renaming
tables, but it is widely needed by users. Security is always a trade-off between usabilityand safety.Y ou should make your own decision when it comes to 
ALTER ,but it is often
granted to users.
In addition to the privileges listed in Table 9.1, the REFERENCES and EXECUTE privi-
leges are currently unused, and a GRANT privilege is granted with WITH GRANT OPTION
rather than in the privileges list.
Table 9.2 shows the privileges suitable for use by administrative users.
Table 9.2 Privileges for Administrators
Privilege Description
CREATE TEMPORARY TABLES Allows an administrator to use the keyword TEMPORARY
in a CREATE TABLE statement.
FILE Allows data to be read into tables from files and vice versa.
LOCK TABLES Allows the explicit use of a LOCK TABLES statement.
PROCESS Allows an administrator to view server processes belong-
ing to all users.
RELOAD Allows an administrator to reload grant tables and flushprivileges, hosts, logs, and tables.
REPLICATION CLIENT Allows use of SHOW STATUS on replication masters and
slaves. Replication is explained in Chapter 12.
REPLICATION SLAVE Allows replication slave servers to connect to the masterserver. Replication is explained in Chapter 12.
SHOW DATABASES Allows a list of all databases to be seen with a SHOW
DATABASES statement.Without this privilege, users see
only databases on which they have other privileges.
SHUTDOWN Allows an administrator to shut down the MySQL server.
SUPER Allows an administrator to kill threads belonging to any
user.
You are able to grant these privileges to nonadministrators, but you should use extreme
caution if you are considering doing so.Table 9.1 Continued
Privilege Applies To Description12 6728 ch09  9/2/04  1:21 PM  Page 224
225 Introducing MySQL’s Privilege System
The FILE privilege is a bit different. It is useful for users because loading data from
files can save a lot of time re-entering data each time to get it into the database.However, file loading can be used to load any file that the MySQL server can see,including databases belonging to other users and, potentially, password files. Grant thisprivilege with caution or offer to load the data for the user.
Two special privileges also exist, and they are shown in Table 9.3.
Table 9.3 Special Privileges
Privilege Description
ALL Grants all the privileges listed in Tables 9.1 and 9.2.Y ou can also write ALL
PRIVILEGES instead of ALL.
USAGE Grants no privileges.This privilege creates a user and allows her to log on, but
it doesn’t allow her to do anything. Usually, you will add more privileges later.
The REVOKE Command
The opposite of GRANT is REVOKE .You use it to take privileges away from a user. It is sim-
ilar to GRANT in syntax:
REVOKE privileges [(columns)]
ON item
FROM user_name
If you have given the WITH GRANT OPTION clause, you can revoke this (along with all
other privileges) by adding
REVOKE All PRIVILEGES, GRANT
FROM user_name
Examples Using GRANT and REVOKE
Toset up an administrator, you can type
mysql> grant all
-> on *
-> to fred identified by ‘mnb123’
-> with grant option;
This command grants all privileges on all databases to a user called Fred with the pass-
word mnb123 and allows him to pass on those privileges.
Chances are you don’t want this user in your system, so go ahead and revoke him:
mysql> revoke all privileges, grant
-> from fred;12 6728 ch09  9/2/04  1:21 PM  Page 225
226 Chapter 9 Creating Your Web Database
Now you can set up a regular user with no privileges:
mysql> grant usage
-> on books.*
-> to sally identified by ‘magic123’;
After talking to Sally, you know a bit more about what she wants to do, so you can give
her the appropriate privileges:
mysql> grant select, insert, update, delete, index, alter, create, drop
-> on books.*
-> to sally;
Note that you don’t need to specify Sally’s password to  give her privileges.
If you decide that Sally has been up to something in the database, you might decide
to reduce her privileges:
mysql> revoke alter, create, drop
-> on books.*
-> from sally;
And later, when she doesn’t need to use the database any more, you can revoke her priv-
ileges altogether:
mysql> revoke all
-> on books.*
-> from sally;
Setting Up a User for the Web
You need to set up a user for your PHP scripts to connect to MySQL.Again, you can
apply the privilege of least principle:What should the scripts be able to do?
In most cases, they only need to run SELECT ,INSERT ,DELETE ,and UPDATE queries.
You can set up these privileges as follows:
mysql> grant select, insert, delete, update
-> on books.*
-> to bookorama identified by ‘bookorama123’;
Obviously, for security reasons, you should choose a better password than the one shown
here.
If you use a web hosting service, you usually get access to the other user-type privi-
leges on a database the service creates for you. It typically gives you the same user_name
and password for command-line use (setting up tables and so on) and for web script
connections (querying the database). Using the same username and password for both ismarginally less secure.Y ou can set up a user with this level of privilege as follows:12 6728 ch09  9/2/04  1:21 PM  Page 226
227 Creating Database Tables
mysql> grant select, insert, update, delete, index, alter, create, drop
-> on books.*
-> to bookorama identified by ‘bookorama123’;
Go ahead and set up this second version of the user because you need to use it in the
next section.
Logging Out as root
You can log out of the MySQL monitor by typing quit.You should log back in as your
web user to test that everything is working correctly. If the GRANT statement that you ran
was executed, but you are denied access when trying to log in, this usually means you
have not deleted the anonymous users as part of the installation process. Log back in as
root and consult Appendix A for instructions on how to delete the anonymous
accounts.Y ou should then be able to log in as the web user.
Using the Right Database
If you’ve reached this stage, you should be logged in to a user-level MySQL accountready to test the sample code, either because you’ve just set it up or because your web
server administrator has set it up for you.
The first step you need to take when you log in is to specify which database you
want to use.Y ou can do this by typing
mysql> use dbname;
where dbname is the name of your database.
Alternatively, you can avoid the usecommand by specifying the database when you
log in, as follows:
mysql -D dbname-h hostname -u username -p
In this example, you can use the books database:
mysql> use books;
When you type this command, MySQL should give you a response such as
Database changed
If you don’t select a database before starting work, MySQL will give you an error mes-
sage such as
ERROR 1046 (3D000): No Database Selected
Creating Database Tables
The next step in setting up the database is to actually create the tables.Y ou can do this using the SQL command 
CREATE TABLE .The general form of a CREATE TABLE statement is
CREATE TABLE tablename (columns)12 6728 ch09  9/2/04  1:21 PM  Page 227
228 Chapter 9 Creating Your Web Database
You should replace the tablename placeholder with the name of the table you want to
create and the columns placeholder with a comma-separated list of the columns in your
table. Each column will have a name followed by a data type.
Here’s the Book-O-Rama schema again:
Customers(CustomerID , Name, Address, City)
Orders(OrderID , CustomerID , Amount, Date)
Books(ISBN , Author, Title, Price)
Order_Items( OrderID, ISBN, Quantity)
Book_Reviews( ISBN, Reviews)
Listing 9.1 shows the SQL to create these tables, assuming you have already created the
database called books .You can find this SQL in the file chapter9/bookorama.sql on
the CD-ROM accompanying this book.
You can run an existing SQL file, such as one loaded from the CD-ROM, through
MySQL by typing
> mysql -h host-u bookorama -D books -p < bookorama.sql
(Remember to replace host with the name of your host.)
Using file redirection is handy for this task because it means that you can edit your
SQL in the text editor of your choice before executing it.
Listing 9.1 bookorama.sql —SQL to Create the Tables for Book-O-Rama
create table customers
( customerid int unsigned not null auto_increment primary key,
name char(50) not null,address char(100) not null,city char(30) not null
);
create table orders
( orderid int unsigned not null auto_increment primary key,
customerid int unsigned not null,amount float(6,2),date date not null
);
create table books
(  isbn char(13) not null primary key,
author char(50),12 6728 ch09  9/2/04  1:21 PM  Page 228
229 Creating Database Tables
title char(100),
price float(4,2)
);
create table order_items
( orderid int unsigned not null,
isbn char(13) not null,quantity tinyint unsigned,
primary key (orderid, isbn)
);
create table book_reviews(
isbn char(13) not null primary key,review text
);
Each table is created by a separate CREATE TABLE statement.Y ou can see that each table
in the schema is created with the columns designed in the preceding chapter. Each col-umn has a data type listed after its name, and some of the columns have other specifiers,too.
Understanding What the Other Keywords Mean
NOT NULL means that all the rows in the table must have a value in this attribute. If it
isn’t specified, the field can be blank ( NULL).
AUTO_INCREMENT is a special MySQL feature you can use on integer columns. It
means if you leave that field blank when inserting rows into the table, MySQL will auto-matically generate a unique identifier value.The value will be one greater than the maxi-mum value in the column already.Y ou can have only one of these in each table.
Columns that specify 
AUTO_INCREMENT must be indexed.
PRIMARY KEY after a column name specifies that this column is the primary key for
the table. Entries in this column have to be unique. MySQL automatically indexes thiscolumn.Where it is used with 
customerid in the customers table in Listing 9.1, it
appears with AUTO_INCREMENT .The automatic index on the primary key takes care of the
index required by AUTO_INCREMENT .
You can specify PRIMARY KEY after a column name only for single column primary
keys.The PRIMARY KEY clause at the end of the order_items statement is an alternative
form.We used it here because the primary key for this table consists of the two columnstogether. (This also creates an index based on the two columns together.)
UNSIGNED after an integer type means that it can have only a zero or positive value.Listing 9.1 Continued12 6728 ch09  9/2/04  1:21 PM  Page 229
230 Chapter 9 Creating Your Web Database
Understanding the Column Types
Let’s consider the first table as an example:
create table customers
( customerid int unsigned not null auto_increment primary key,
name char(50) not null,address char(100) not null,city char(30) not null
);
When creating any table, you need to make decisions about column types.
The customers table has four columns as specified in the schema.The first one,
customerid ,is the primary key, which is specified directly.We decided this will be an
integer (data type int) and that these IDs should be unsigned .We’ve also taken advan-
tage of the auto_increment facility so that MySQL can manage them for us; it’s one less
thing to worry about.
The other columns are all going to hold string type data.We chose the char type for
them.This type specifies fixed-width fields.The width is specified in the brackets, so, forexample,
name can have up to 50 characters.
This data type will always allocate 50 characters of storage for the name, even if
they’re not all used. MySQL will pad the data with spaces to make it the right size.Thealternative is 
varchar ,which uses only the amount of storage required (plus one byte).
There is a small trade-off: varchar s use less space on average, but chars are faster.
Note that all the columns are declared as NOT NULL .This is a minor optimization you
can make wherever possible that also will make things run a bit faster.We address opti-mization in more detail in Chapter 12.
Some of the other 
CREATE statements have variations in syntax. Let’s look at the
orders table:
create table orders
( orderid int unsigned not null auto_increment primary key,
customerid int unsigned not null,amount float(6,2) ,date date not null
);
The amount column is specified as a floating-point number of type float .With most
floating-point data types, you can specify the display width and the number of decimalplaces. In this case, the order amount will be in dollars, so we allowed a reasonably largeorder total (width 6) and two decimal places for the cents.
The 
date column has the data type date.
This particular table specifies that all columns bar the amount as NOT NULL .Why?
When an order is entered into the database, you need to create it in orders, add theitems to 
order_items ,and then work out the amount.Y ou might not know the amount
when the order is created, so you can allow for it to be NULL.12 6728 ch09  9/2/04  1:21 PM  Page 230
231 Creating Database Tables
The books table has some similar characteristics:
create table books
(  isbn char(13) not null primary key,
author char(50),title char(100),price float(4,2)
);
In this case, you don’t need to generate the primary key because ISBNs are generated
elsewhere.The other fields are left as NULL because a bookstore might know the ISBN of
a book before it knows the title ,author ,or price .
The order_items table demonstrates how to create multicolumn primary keys:
create table order_items
( orderid int unsigned not null,
isbn char(13) not null,quantity tinyint unsigned,
primary key (orderid, isbn)
);
This table specifies the quantity of a particular book as a TINYINT UNSIGNED ,which
holds an integer between 0 and 255.
As mentioned previously, multicolumn primary keys need to be specified with a spe-
cial primary key clause.This clause is used here.
Lastly, consider the book_reviews table:
create table book_reviews
(
isbn char(13) not null primary key,review text
);
This table uses a new data type, text,which we have not yet discussed. It is used for
longer text, such as an article.There are a few variants on this, which we discuss later inthis chapter.
To understand creating tables in more detail, let’s discuss column names and identifiers
in general and then the data types we can choose for columns. First, though, let’s look atthe database we’ve created.
Looking at the Database with SHOW and DESCRIBE
Log in to the MySQL monitor and use the books database.Y ou can view the tables in
the database by typing
mysql>show tables;12 6728 ch09  9/2/04  1:21 PM  Page 231
232 Chapter 9 Creating Your Web Database
MySQL then displays a list of all the tables in the database:
+-----------------+
| Tables in books |+-----------------+| book_reviews    || books           || customers       || order_items     || orders          |+-----------------+5 rows in set (0.06 sec)
You can also use show to see a list of databases by typing
mysql> show databases;
If you do not have the SHOW DATABASES privilege, you will see listed only the databases
on which you have privileges.
You can see more information about a particular table, for example, books ,using
DESCRIBE :
mysql>describe books;
MySQL then displays the information you supplied when creating the database:
+--------+------------+------+-----+---------+-------+
| Field  | Type       | Null | Key | Default | Extra |+--------+------------+------+-----+---------+-------+| isbn   | char(13)   |      | PRI |         |       || author | char(50)   | YES  |     | NULL    |       || title  | char(100)  | YES  |     | NULL    |       || price  | float(4,2) | YES  |     | NULL    |       |+--------+------------+------+-----+---------+-------+4 rows in set (0.00 sec)
These commands are useful to remind yourself of a column type or to navigate a data-
base that you didn’t create.
Creating Indexes
We briefly mentioned indexes already, because designating primary keys creates indexes
on those columns.
One common problem faced by new MySQL users is that they complain about poor
performance from this database they have heard is lightning fast.This performance prob-lem occurs because they have not created any indexes on their database. (It is possible tocreate tables with no primary keys or indexes.)12 6728 ch09  9/2/04  1:21 PM  Page 232
233 Understanding MySQL Identifiers
To begin with, the indexes that were created automatically for you will do. If you find
that you are running many queries on a column that is not a key, you may want to addan index on that column to improve performance.Y ou can do this with the 
CREATE
INDEX statement.The general form of this statement is
CREATE [UNIQUE|FULLTEXT] INDEX index_name
ON table_name (index_column_name [(length)] [ASC|DESC], ...])
(FULLTEXT indexes are for indexing text fields; we discuss their use in Chapter 13,
“Advanced MySQL Programming.”)
The optional length field allows you to specify that only the first length characters
of the field will be indexed.Y ou can also specify that an index should be ascending ( ASC)
or descending ( DESC); the default is ascending.
A Note on Table Types
You may be aware that MySQL offers more than one table type or storage engine,
including some transaction-safe types.We discuss the table types in Chapter 13.At pres-ent, all the tables in the database use the default storage engine, MyISAM.
Understanding MySQL Identifiers
Five kinds of identifiers are used in MySQL: databases, tables, columns, and indexes,which you’re already familiar with; and aliases, which we cover in the next chapter.
Databases in MySQL map to directories in the underlying file structure, and tables
map to files.This mapping has a direct effect on the names you can give them. It alsoaffects the case sensitivity of these names: If directory and filenames are case sensitive inyour operating system, database and table names will be case sensitive (for example, in
Unix); otherwise, they won’t (for example, under Windows). Column names and aliasnames are not case sensitive, but you can’t use versions of different cases in the sameSQL statement.
As a side note, the location of the directory and files containing the data is wherever
it was set in configuration.Y ou can check the location on your system by using the
mysqladmin facility as follows:
mysqladmin variables
Then look for the datadir variable.
A summary of possible identifiers is shown in Table 9.4.The only additional excep-
tion is that you cannot use ASCII(0),ASCII(255), or the quoting character in identifiers(and to be honest, we’re not sure why you would want to).12 6728 ch09  9/2/04  1:21 PM  Page 233
234 Chapter 9 Creating Your Web Database
Table 9.4 MySQL Identifiers
Type Max Case Characters
Length Sensitive? Allowed
Database 64 same as OS Anything allowed in a directory name in your
OS except the /,\,and .characters
Table6 4 same as OS Anything allowed in a filename in your OS
except the /and .characters
Column 64 no AnythingIndex 64 no Anything
Alias 255 no Anything
These rules are extremely open.
Since MySQL 3.23.6, you can even have reserved words and special characters of all
kinds in identifiers.The only limitation is that if you use anything unusual like this, youhave to put it in backticks (located under the tilde key on the top left of most key-boards). For example,
create database `create database`;
The rules in versions of MySQL (prior to 3.23.6) are more restrictive and don’t allowyou to do this.
Of course, you should apply common sense to all this freedom. Just because you can
call a database 
`create database` doesn’t that mean that you should .The same princi-
ple applies here as in any other kind of programming: Use meaningful identifiers.
Choosing Column Data Types
The three basic column types in MySQL are numeric, date and time, and string.Withineach of these categories are a large number of types.We summarize them here and gointo more detail about the strengths and weaknesses of each in Chapter 12.
Each of the three types comes in various storage sizes.When you are choosing a col-
umn type, the principle is generally to choose the smallest type that your data will fitinto.
For many data types, when you are creating a column of that type, you can specify
the maximum display length.This is shown in the following tables of data types as 
M.I f
it’s optional for that type, it is shown in square brackets.The maximum value you canspecify for 
Mis 255.
Optional values throughout these descriptions are shown in square brackets.12 6728 ch09  9/2/04  1:21 PM  Page 234
235 Choosing Column Data Types
Numeric Types
The numeric types are either integers or floating-point numbers. For the floating-point
numbers, you can specify the number of digits after the decimal place.This value is
shown in this book as D.The maximum value you can specify for Dis 30 or M-2(that is,
the maximum display length minus two—one character for a decimal point and one forthe integral part of the number), whichever is lower.
For integer types, you can also specify whether you want them to be 
UNSIGNED ,a s
shown in Listing 9.1.
For all numeric types, you can also specify the ZEROFILL attribute.When values from
a ZEROFILL column are displayed, they are padded with leading zeros. If you specify a
column as ZEROFILL ,it will automatically also be UNSIGNED .
The integral types are shown in Table 9.5. Note that the ranges listed in this table
show the signed range on one line and the unsigned range on the next.
Table 9.5 Integral Data Types
Type Range Storage Description
(Bytes)
TINYINT[( M)] –127..128 1 Very small integers
or 0..255
BIT Synonym for TINYINT
BOOL Synonym for TINYINT
SMALLINT[(M)] –32768..32767 2 Small integers
or 0..65535
MEDIUMINT[(M)] –8388608.. 3 Medium-sized integers8388607or 0..16777215
INT[(M)] –231..231–1 4 Regular integers
or 0..232–1
INTEGER[(M)] Synonym for INT
BIGINT[(M)] –263..263–1 8 Big integers
or 0..264–1
The floating-point types are shown in Table 9.6.
Table 9.6 Floating-Point Data Types
Type Range Storage Description
(bytes)
FLOAT(precision ) Depends on Varies Can be used to specify
precision single or double precision
floating-point numbers.12 6728 ch09  9/2/04  1:21 PM  Page 235
236 Chapter 9 Creating Your Web Database
FLOAT[(M,D)] ±1.175494351E-38 4 Single precision floating-
±3.402823466E+38 point number.These 
numbers are equivalent to
FLOAT(4) but with a 
specified display width and number of decimal places.
DOUBLE[(M,D)] ±1. 8 Double precision floating-
7976931348623157E point number.These +308 numbers are equivalent ±2.2250738585072014E to 
FLOAT(8) but with a 
-308 specified display width 
and number of decimal places.
DOUBLE Synonym for
PRECISION[(M,D)] As above DOUBLE[(M, D)] .
REAL[(M,D)] As above Synonym for 
DOUBLE[(M, D)] .
DECIMAL[(M[,D])] Varies M+2 Floating-point number
stored as char .The range
depends on M,the display
width.
NUMERIC[(M,D)] As above Synonym for DECIMAL .
DEC[(M,D)] As above Synonym for DECIMAL .
FIXED[(M,D)] As above Synonym for DECIMAL .
Date and Time Types
MySQL supports a number of date and time types; they are shown in Table 9.7.With all
these types, you can input data in either a string or numerical format. It is worth notingthat a 
TIMESTAMP column in a particular row will be set to the date and time of the most
recent operation on that row if you don’t set it manually.This feature is useful for trans-
action recording.Table 9.6 Continued
Type Range Storage Description
(bytes)12 6728 ch09  9/2/04  1:21 PM  Page 236
237 Choosing Column Data Types
Table 9.7 Date and Time Data Types
Type Range Description
DATE 1000-01-01 A date.Will be displayed as YYYY-MM-DD .
9999-12-31
TIME -838:59:59 A time.Will be displayed as HH:MM:SS .Note 
838:59:59 that the range is much wider than you will
probably ever want to use.
DATETIME 1000-01-01 A date and time. Will be displayed as 00:00:00
YYYY-MM-DD HH:MM:SS .
9999-12-3123:59:59
TIMESTAMP[( M)] 1970-01-01 A timestamp, useful for transaction reporting.
00:00:00 The display format depends on the value of M
(see Table 9.8, which follows).
Sometime The top of the range depends on the limit 
in 2037 on Unix.timestamps.
YEAR[(2|4)] 70–69 A year.Y ou can specify two- or four-digit 
(1970–2069) format. Each has a different range, as shown.
1901–2155
Table 9.8 shows the possible different display types for TIMESTAMP .
Table 9.8TIMESTAMP Display Types
Type Specified Display
TIMESTAMP YYYYMMDDHHMMSS
TIMESTAMP(14) YYYYMMDDHHMMSS
TIMESTAMP(12) YYMMDDHHMMSS
TIMESTAMP(10) YYMMDDHHMM
TIMESTAMP(8) YYYYMMDD
TIMESTAMP(6) YYMMDD
TIMESTAMP(4)  YYMM
TIMESTAMP(2)  YY
String Types
String types fall into three groups. First, there are plain old strings—that is, short pieces
of text.These are the CHAR (fixed-length character) and VARCHAR (variable-length charac-
ter) types.Y ou can specify the width of each. Columns of type CHAR are padded with12 6728 ch09  9/2/04  1:21 PM  Page 237
238 Chapter 9 Creating Your Web Database
spaces to the maximum width regardless of the size of the data, whereas VARCHAR
columns vary in width with the data. (Note that MySQL strips the trailing spaces from
CHARs when they are retrieved and from VARCHAR s when they are stored.) There is a space
versus speed trade-off with these two types, which we discuss in more detail in 
Chapter 12.
Second, there are TEXT and BLOB types.These types, which come in various sizes, are
for longer text or binary data, respectively. BLOBs, or binary large objects, can hold anything
you like—for example, image or sound data.
In practice, BLOB and TEXT columns are the same except that BLOB is case sensitive
and TEXT is not. Because these column types can hold large amounts of data, they
require some special considerations.We discuss this issue in Chapter 12.
The third group has two special types: SETand ENUM.The SETtype specifies that val-
ues in this column must come from a particular set of specified values. Column valuescan contain more than one value from the set.Y ou can have a maximum of 64 things inthe specified set.
ENUM is an enumeration. It is very similar to SET,except that columns of this type can
have only one of the specified values or NULL,and you can have a maximum of 65,535
things in the enumeration.
We summarized the string data types in Tables 9.9, 9.10, and 9.11.Table 9.9 shows the
plain string types.
Table 9.9 Regular String Types
Type Range Description
[NATIONAL] 0 to 255 Fixed-length string of length
CHAR(M) characters M,where Mis between 0 and
[BINARY | ASCII | UNICODE] 255.The NATIONAL keyword
specifies that the defaultcharacter set should be used.This is the default in MySQLanyway, but is included because itis part of the ANSI SQL standard.The 
BINARY keyword specifies that 
the data should be treated as case sensitive. (The default is case sensitive.) The 
ASCII keyword 
specifies that the latin1 character set will be used for this column.The
UNICODE keyword specifies that
the ucs character set will be used.
CHAR Synonym for CHAR(1) .
[NATIONAL] VARCHAR( M) 1 to 255 Same as above, except they are
[BINARY] characters variable length.12 6728 ch09  9/2/04  1:21 PM  Page 238
239 Next
Table 9.10 shows the TEXT and BLOB types.The maximum length of a TEXT field in char-
acters is the maximum size in bytes of files that could be stored in that field.
Table 9.10TEXT and BLOB Types
Type Maximum Length (Characters) Description
TINYBLOB 28–1 (that is, 255) A tiny binary large object
(BLOB ) field
TINYTEXT 28 –1 (that is, 255) A tiny TEXT field
BLOB 216 –1 (that is, 65,535) A normal-sized BLOB field
TEXT 216–1 (that is, 65,535) A normal-sized TEXT field
MEDIUMBLOB 224 –1 (that is, 16,777,215) A medium-sized BLOB field
MEDIUMTEXT 224 –1 (that is, 16,777,215) A medium-sized TEXT field
LONGBLOB 232 –1 (that is, 4,294,967,295) A long BLOB field
LONGTEXT 232 –1 (that is, 4,294,967,295) A long TEXT field
Table 9.11 shows the ENUM and SETtypes.
Table 9.11ENUM and SETTypes
Type Maximum Description
Values in Set
ENUM(‘value1’, 65,535 Columns of this type can hold only one
‘value2’,...) of the values listed or NULL .
SET(‘value1’, 64 Columns of this type can hold a set of the 
‘value2’,...) specified values or NULL .
Further Reading
For more information, you can read about setting up a database in the MySQL online
manual at http://www.mysql.com/.
Next
Now that you know how to create users, databases, and tables, you can concentrate oninteracting with the database. In the next chapter, we look at how to put data in thetables, how to update and delete it, and how to query the database.12 6728 ch09  9/2/04  1:21 PM  Page 239
12 6728 ch09  9/2/04  1:21 PM  Page 240
10
Working with Your MySQL
Database
INTHIS CHAPTER ,WE DISCUSS STRUCTURED QUERY LANGUAGE (SQL) and its use in
querying databases.Y ou continue developing the Book-O-Rama database by learninghow to insert, delete, and update data, and how to ask the database questions.
Key topics covered in this chapter include
nWhat is SQL?
nInserting data into the database
nRetrieving data from the database
nJoining tables
nUsing subqueries
nUpdating records from the database
nAltering tables after creation
nDeleting records from the database
nDropping tables
We begin by describing what SQL is and why it’s a useful thing to understand.
If you haven’t set up the Book-O-Rama database, you need to do that before you can
run the SQL queries in this chapter. Instructions for doing this are in Chapter 9,
“Creating Y our Web Database.”
What Is SQL?
SQL stands for Structured Query Language .It’s the most standard language for accessing
relational database management systems (RDBMSs) .SQL is used to store data to and retrieve
it from a database. It is used in database systems such as MySQL, Oracle, PostgreSQL,Sybase, and Microsoft SQL Server, among others.13 6728 CH10  9/2/04  1:21 PM  Page 241
242 Chapter 10 Working with Your MySQL Database
There’s an ANSI standard for SQL, and database systems such as MySQL generally
strive to implement this standard.There are some subtle differences between standardSQL and MySQL’s SQL. Some of these differences are planned to become standard infuture versions of MySQL, and some are deliberate differences.We point out the moreimportant ones as we go.A complete list of the differences between MySQL’s SQL andANSI SQL in any given version can be found in the MySQL online manual.Y ou canfind this page at this URL and in many other locations:
http://www.mysql.com/doc/en/Compatibility.html
You might have heard the terms Data Definition Language (DDL) ,used for defining data-
bases, and Data Manipulation Language (DML) ,used for querying databases. SQL covers
both of these bases. In Chapter 9, we looked at data definition (DDL) in SQL, so we’vealready been using it a little.Y ou use DDL when you’re initially setting up a database.
You will use the DML aspects of SQL far more frequently because these are the parts
that you use to store and retrieve real data in a database.
Inserting Data into the Database
Before you can do a lot with a database, you need to store some data in it.The way youmost commonly do this is to use the SQL 
INSERT statement.
Recall that RDBMSs contain tables, which in turn contain rows of data organized
into columns. Each row in a table normally describes some real-world object or relation-ship, and the column values for that row store information about the real-world object.You can use the 
INSERT statement to put rows of data into the database.
The usual form of an INSERT statement is
INSERT [INTO] table [(column1, column2, column3,...)] VALUES
(value1, value2, value3,...);
For example, to insert a record into Book-O-Rama’s customers table, you could type
insert into customers values
(NULL, ‘Julie Smith ’, ‘25 Oak Street ’, ‘Airport West ’);
You can see that we’ve replaced table with the name of the actual table where we want
to put the data and the values with specific values.The values in this example are all
enclosed in quotation marks. Strings should always be enclosed in pairs of single or dou-ble quotation marks in MySQL. (We use both in this book.) Numbers and dates do not
need quotes.
There are a few interesting things to note about the 
INSERT statement.The values
specified here will be used to fill in the table columns in order. If you want to fill in onlysome of the columns, or if you want to specify them in a different order, you can list thespecific columns in the columns part of the statement. For example,
insert into customers (name, city) values
(‘Melissa Jones ’, ‘Nar Nar Goon North ’);13 6728 CH10  9/2/04  1:21 PM  Page 242
243 Inserting Data into the Database
This approach is useful if you have only partial data about a particular record or if some
fields in the record are optional.Y ou can also achieve the same effect with the followingsyntax:
insert into customers
set name= ’Michael Archer ’,
address= ’12 Adderley Avenue ’,
city=’Leeton’;
Also notice that we specified a NULL value for the customerid column when adding
Julie Smith and ignored that column when adding the other customers.Y ou might recall
that when you set up the database, you created customerid as the primary key for the
customers table, so this might seem strange. However, you specified the field as
AUTO_INCREMENT .This means that, if you insert a row with a NULL value or no value in
this field, MySQL will generate the next number in the auto increment sequence andinsert it for you automatically.This behavior is pretty useful.
You can also insert multiple rows into a table at once. Each row should be in its own
set of parentheses, and each set of parentheses should be separated by a comma.
Only a few other variants are possible with 
INSERT .After the word INSERT ,you can
add LOW_PRIORITY or DELAYED .The LOW_PRIORITY keyword means the system may wait
and insert later when data is not being read from the table.The DELAYED keyword means
that your inserted data will be buffered. If the server is busy, you can continue runningqueries rather than having to wait for this 
INSERT operation to complete.
Immediately after this, you can optionally specify IGNORE .This means that if you try
to insert any rows that would cause a duplicate unique key, they will be silently ignored.Another alternative is to specify 
ON DUPLICATE KEY UPDATE expression at the end of
the INSERT statement.This can be used to change the duplicate value using a normal
UPDATE statement (covered later in this chapter).
We’ve put together some simple sample data to populate the database.This is just a
series of simple INSERT statements that use the multirow insertion approach.Y ou can find
the script that does this in the file \chapter10\book_insert.sql on the CD accompa-
nying this book. It is also shown in Listing 10.1.
Listing 10.1 book_insert.sql —SQL to Populate the Tables for Book-O-Rama
use books;
insert into customers values
(3, ‘Julie Smith ’, ‘25 Oak Street ’, ‘Airport West ’),
(4, ‘Alan Wong ’, ‘1/47 Haines Avenue ’, ‘Box Hill ’),
(5, ‘Michelle Arthur ’, ‘357 North Road ’, ‘Yarraville ’);
insert into orders values
(NULL, 5, 69.98, ‘2000-04-02 ’),
(NULL, 3, 49.99, ‘2000-04-15 ’),13 6728 CH10  9/2/04  1:21 PM  Page 243
244 Chapter 10 Working with Your MySQL Database
(NULL, 4, 74.98, ‘2000-04-19 ’),
(NULL, 5, 24.99, ‘2000-05-01 ’);
insert into books values
(‘0-672-31697-8 ’, ‘Michael Morgan ’, 
‘Java 2 for Professional Developers ’, 34.99),
(‘0-672-31745-1 ’, ‘Thomas Down ’, ‘Installing Debian GNU/Linux ’, 24.99),
(‘0-672-31509-2 ’, ‘Pruitt, et al. ’, ‘Teach Yourself GIMP in 24 Hours ’, 24.99),
(‘0-672-31769-9 ’, ‘Thomas Schenk ’, 
‘Caldera OpenLinux System Administration Unleashed ’, 49.99);
insert into order_items values
(1, ‘0-672-31697-8 ’, 2),
(2, ‘0-672-31769-9 ’, 1),
(3, ‘0-672-31769-9 ’, 1),
(3, ‘0-672-31509-2 ’, 1),
(4, ‘0-672-31745-1 ’, 3);
insert into book_reviews values
(‘0-672-31697-8 ’, ‘The Morgan book is clearly written and goes well beyond
most of the basic Java books out there. ’);
You can run this script from the command line by piping it through MySQL as follows:
> mysql -h host-u bookorama -p < book_insert.sql
Retrieving Data from the Database
The workhorse of SQL is the SELECT statement. It’s used to retrieve data from a database
by selecting rows that match specified criteria from a table.There are a lot of options and
different ways to use the SELECT statement.
The basic form of a SELECT is
SELECT [ options] items
[INTO file_details ]
FROM tables
[ WHERE conditions ]
[ GROUP BY group_type ]
[ HAVING where_definition ]
[ ORDER BY order_type ]
[LIMIT limit_criteria ]
[PROCEDURE proc_name(arguments) ]
[lock_options ]
;Listing 10.1 Continued13 6728 CH10  9/2/04  1:21 PM  Page 244
245 Retrieving Data from the Database
In the following sections, we describe each of the clauses of the statement. First, though,
let’s look at a query without any of the optional clauses, one that selects some itemsfrom a particular table.T ypically, these items are columns from the table. (They can alsobe the results of any MySQL expressions.We discuss some of the more useful ones in alater section.) This query lists the contents of the 
name and city columns from the cus-
tomers table:
select name, city
from customers;
This query has the following output, assuming that you’ve entered the sample data from
Listing 10.1 and the other two sample INSERT statements from earlier in this chapter:
+-----------------+--------------------+
| name            | city               |+-----------------+--------------------+| Julie Smith     | Airport West       || Alan Wong       | Box Hill           || Michelle Arthur | Yarraville         || Melissa Jones   | Nar Nar Goon North || Michael Archer  | Leeton             |+-----------------+--------------------+
As you can see, this table contains the items selected— name and city—from the table
specified— customers .This data is shown for all the rows in the customers table.
You can specify as many columns as you like from a table by listing them after the
SELECT keyword.Y ou can also specify some other items. One useful item is the wildcard
operator, *,which matches all the columns in the specified table or tables. For example,
to retrieve all columns and all rows from the order_items table, you would use
select *
from order_items;
which gives the following output:
+---------+---------------+----------+| orderid | isbn          | quantity |+---------+---------------+----------+|       1 | 0-672-31697-8 |        2 ||       2 | 0-672-31769-9 |        1 ||       3 | 0-672-31769-9 |        1 ||       3 | 0-672-31509-2 |        1 ||       4 | 0-672-31745-1 |        3 |+---------+---------------+----------+13 6728 CH10  9/2/04  1:21 PM  Page 245
246 Chapter 10 Working with Your MySQL Database
Retrieving Data with Specific Criteria
To access a subset of the rows in a table, you need to specify some selection criteria.Y ou
can do this with a WHERE clause. For example,
select *
from orderswhere customerid = 5;
selects all the columns from the orders table, but only the rows with a customerid of 3.
Here’s the output:
+---------+------------+--------+------------+
| orderid | customerid | amount | date       |+---------+------------+--------+------------+|       1 |          5 |  69.98 | 2000-04-02 ||       4 |          5 |  24.99 | 2000-05-01 |+---------+------------+--------+------------+
The WHERE clause specifies the criteria used to select particular rows. In this case, we
selected rows with a customerid of 5.The single equal sign is used to test equality; note
that this is different from PHP , and you can easily become confused when you’re usingthem together.
In addition to equality, MySQL supports a full set of operators and regular expres-
sions.The ones you will most commonly use in 
WHERE clauses are listed in Table 10.1.
Note that this list is not complete; if you need something not listed here, check theMySQL manual.
Table 10.1 Useful Comparison Operators for WHERE Clauses
Name
Operator (If Applicable) Example Description
= Equality customerid = 3 Tests whether two values are
equal
> Greater than amount > 60.00 Tests whether one value is
greater than another
< Less than amount < 60.00 Tests whether one value is less
than another
>= Greater than or amount >= 60.00 Tests whether one value is
equal greater than or equal to
another
<= Less than or equal amount <= 60.00 Tests whether one value is less
than or equal to another
!=or <> Not equal quantity != 0 Tests whether two values are
not equal
IS NOT n/a address is not null Tests whether a field actually 
NULL contains a value13 6728 CH10  9/2/04  1:21 PM  Page 246
247 Retrieving Data from the Database
IS NULL n/a address is null Tests whether a field does not
contain a value
BETWEEN n/a amount between Tests whether a value is 
0 and 60.00 greater than or equal to a
minimum value and less thanor equal to a maximum value
IN n/a city in ( “Carlton”,T ests whether a value is in a
“Moe”) particular set
NOT IN n/a city not in Tests whether a value is not
(“Carlton”,”Moe”) in a set
LIKE Pattern match name like ( “Fred %”)Checks whether a value
matches a pattern using sim-ple SQL pattern matching
NOT LIKE Pattern match name not like Checks whether a value 
(“Fred %”) doesn’t match a pattern
REGEXP Regular expression name regexp Checks whether a value
matches a regular expression
The last three rows in the table refer to LIKE and REGEXP .They are both forms of pat-
tern matching.
LIKE uses simple SQL pattern matching. Patterns can consist of regular text plus the %
(percent) character to indicate a wildcard match to any number of characters and the _
(underscore) character to wildcard-match a single character.
The REGEXP keyword is used for regular expression matching. MySQL uses POSIX
regular expressions. Instead of the keyword REGEXP ,you can also use RLIKE ,which is a
synonym. POSIX regular expressions are also used in PHP .Y ou can read more aboutthem in Chapter 4,“String Manipulation and Regular Expressions.”
You can test multiple criteria using the simple operators and the pattern matching
syntax and combine them into more complex criteria with 
ANDand OR.F o r  example,
select *
from orderswhere customerid = 3 or customerid = 4;
Retrieving Data from Multiple Tables
Often, to answer a question from the database, you need to use data from more than one
table. For example, if you wanted to know which customers placed orders this month,you would need to look at the 
customers table and the orders table. If you also wanted
to know what, specifically, they ordered, you would also need to look at the
order_items table.Name
Operator (If Applicable) Example DescriptionTable 10.1 Continued13 6728 CH10  9/2/04  1:21 PM  Page 247
248 Chapter 10 Working with Your MySQL Database
These items are in separate tables because they relate to separate real-world objects.
This is one of the principles of good database design that we described in Chapter 8,“Designing Y our Web Database.”
To put this information together in SQL, you must perform an operation called a
join.This simply means joining two or more tables together to follow the relationships
between the data. For example, if you want to see the orders that customer Julie Smithhas placed, you will need to look at the 
customers table to find Julie’s customerid and
then at the orders table for orders with that customerid.
Although joins are conceptually simple, they are one of the more subtle and complex
parts of SQL. Several different types of joins are implemented in MySQL, and each isused for a different purpose.
Simple Two-Table Joins
Let’s begin by looking at some SQL for the query about Julie Smith we just discussed:
select orders.orderid, orders.amount, orders.date
from customers, orderswhere customers.name = ‘Julie Smith ’
and customers.customerid = orders.customerid;
The output of this query is
+---------+--------+------------+| orderid | amount | date       |+---------+--------+------------+|       2 |  49.99 | 2000-04-15 |+---------+--------+------------+
There are a few things to notice here. First, because information from two tables is 
needed to answer this query, you must list both tables.
By listing two tables, you also specify a type of join, possibly without knowing it.The
comma between the names of the tables is equivalent to typing INNER JOIN or CROSS
JOIN.This is a type of join sometimes also referred to as a full join ,or the Cartesian prod-
uctof the tables. It means,“Take the tables listed, and make one big table.The big table
should have a row for each possible combination of rows from each of the tables listed,whether that makes sense or not.” In other words, you get a table, which has every rowfrom the 
customers table matched up with every row from the orders table, regardless
of whether a particular customer placed a particular order.
That brute-force approach doesn’t make a lot of sense in most cases. Often what you
want is to see the rows that really do match—that is, the orders placed by a particular
customer matched up with that customer.
You achieve this result by placing a join condition in the WHERE clause.This special type
of conditional statement explains which attributes show the relationship between thetwo tables. In this case, the join condition is
customers.customerid = orders.customerid13 6728 CH10  9/2/04  1:21 PM  Page 248
249 Retrieving Data from the Database
which tells MySQL to put rows in the result table only if the customerid from the 
customers table matches the customerid from the orders table.
By adding this join condition to the query, you actually convert the join to a different
type, called an equi-join .
Also notice the dot notation used to make it clear which table a particular column
comes from; that is, customers.customerid refers to the customerid column from the
customers table, and orders.customerid refers to the customerid column from the
orders table.
This dot notation is required if the name of a column is ambiguous—that is, if it
occurs in more than one table.As an extension, it can also be used to disambiguate col-umn names from different databases.This example uses a 
table.column notation, but
you can specify the database with a database.table.column notation, for example, to
test a condition such as
books.orders.customerid = other_db.orders.customerid
You can, however, use the dot notation for all column references in a query. Using this
notation can be a good idea, particularly when your queries begin to become complex.MySQL doesn’t require it, but it does make your queries much more humanly readableand maintainable. Notice that we followed this convention in the rest of the previousquery, for example, with the use of the condition
customers.name = ‘Julie Smith ’
The column name occurs only in the table customers ,so we do not really need to spec-
ify what table it is from. MySQL will not be confused. For humans, though, the name on
its own is vague, so it does make the meaning of the query clearer when you specify it as
customer.name .
Joining More Than Two Tables
Joining more than two tables is no more difficult than a two-table join.As a general rule,
you need to join tables in pairs with join conditions.Think of it as following the rela-
tionships between the data from table to table to table.
For example, if you want to know which customers have ordered books on Java (per-
haps so you can send them information about a new Java book), you need to trace theserelationships through quite a few tables.
You need to find customers who have placed at least one order that included an
order_item that is a book about Java.T o get from the customers table to the orders
table, you can use the customerid as shown previously.T o get from the orders table to
the order_items table, you can use the orderid .To get from the order_items table to
the specific book in the Books table, you can use the ISBN.After making all those links,
you can test for books with Javain the title and return the names of customers who
bought any of those books.13 6728 CH10  9/2/04  1:21 PM  Page 249
250 Chapter 10 Working with Your MySQL Database
Let’s look at a query that does all those things:
select customers.name
from customers, orders, order_items, bookswhere customers.customerid = orders.customeridand orders.orderid = order_items.orderidand order_items.isbn = books.isbnand books.title like ‘%Java%’;
This query returns the following output:
+-----------------+
| name            |+-----------------+| Michelle Arthur |+-----------------+
Notice that this example traces the data through four different tables, and to do this with
an equi-join, you need three different join conditions. It is generally true that you needone join condition for each pair of tables that you want to join, and therefore a total ofjoin conditions one less than the total number of tables you want to join.This rule ofthumb can be useful for debugging queries that don’t quite work. Check off your joinconditions and make sure you’ve followed the path all the way from what you know towhat you want to know.
Finding Rows That Don’t Match
The other main type of join that you will use in MySQL is the left join.
In the previous examples, notice that only the rows where a match was found
between the tables were included. Sometimes you may specifically want the rows wherethere’s no match—for example, customers who have never placed an order or books thathave never been ordered.
One way to answer this type of question in MySQL is to use a left join.This type of
join matches up rows on a specified join condition between two tables. If no matchingrow exists in the right table, a row will be added to the result that contains 
NULL values
in the right columns.
Let’s look at an example:
select customers.customerid, customers.name, orders.orderid
from customers left join orderson customers.customerid = orders.customerid;
This SQL query uses a left join to join customers with orders. Notice that the left join
uses a slightly different syntax for the join condition; in this case, the join condition goesin a special 
ONclause of the SQL statement.13 6728 CH10  9/2/04  1:21 PM  Page 250
251 Retrieving Data from the Database
The result of this query is
+------------+-----------------+---------+
| customerid | name            | orderid |+------------+-----------------+---------+|          1 | Melissa Jones   |    NULL ||          2 | Michael Archer  |    NULL ||          3 | Julie Smith     |       2 ||          4 | Alan Wong       |       3 ||          5 | Michelle Arthur |       1 ||          5 | Michelle Arthur |       4 |+------------+-----------------+---------+
This output shows that customers Melissa Jones and Michael Archer do not have match-
ing orderid s because the orderid s for those customers are NULLs.
If you want to see only the customers who haven’t ordered anything, you can check
for those NULLs in the primary key field of the right table (in this case, orderid ) because
that should not be NULL in any real rows:
select customers.customerid, customers.name
from customers left join ordersusing (customerid)where orders.orderid is null;
The result is
+------------+----------------+| customerid | name           |+------------+----------------+|          1 | Melissa Jones  ||          2 | Michael Archer |+------------+----------------+
Also notice that this example uses a different syntax for the join condition. Left joins
support either the ONsyntax used in the first example or the USING syntax in the second
example. Notice that the USING syntax doesn’t specify the table from which the join
attribute comes; for this reason, the columns in the two tables must have the same nameif you want to use 
USING .
You can also answer this type of question by using subqueries.We look at subqueries
later in this chapter.
Using Other Names for Tables: Aliases
Being able to refer to tables by other names is often handy and occasionally essential.
Other names for tables are called aliases .You can create them at the start of a query and
then use them throughout.They are often handy as shorthand. Consider the huge queryyou saw earlier, rewritten with aliases:13 6728 CH10  9/2/04  1:21 PM  Page 251
252 Chapter 10 Working with Your MySQL Database
select c.name
from customers as c, orders as o, order_items as oi, books as bwhere c.customerid = o.customeridand o.orderid = oi.orderidand oi.isbn = b.isbnand b.title like ‘%Java%’;
As you declare the tables you are going to use, you add an ASclause to declare the alias
for that table.Y ou can also use aliases for columns; we return to this approach when welook at aggregate functions shortly.
You need to use table aliases when you want to join a table to itself.This task sounds
more difficult and esoteric than it is. It is useful, if, for example, you want to find rows inthe same table that have values in common. If you want to find customers who live inthe same city—perhaps to set up a reading group—you can give the same table (
cus-
tomers ) two different aliases:
select c1.name, c2.name, c1.city
from customers as c1, customers as c2where c1.city = c2.cityand c1.name != c2.name;
What you are basically doing here is pretending that the table customers is two different
tables,c1and c2,and performing a join on the City column. Notice that you also need
the second condition, c1.name != c2.name ;this is to avoid each customer coming up as
a match to herself.
Summary of Joins
The different types of joins we have described are summarized in Table 10.2.There are a
few others, but these are the main ones you will use.
Table 10.2 Join Types in MySQL
Name Description
Cartesian product All combinations of all the rows in all the tables in the join. Used by
specifying a comma between table names, and not specifying a WHERE
clause.
Full join Same as preceding.Cross join Same as above. Can also be used by specifying the 
CROSS JOIN key-
words between the names of the tables being joined.
Inner join Semantically equivalent to the comma. Can also be specified using the
INNER JOIN keywords.Without a WHERE condition, equivalent to a
full join. Usually, you specify a WHERE condition as well to make this a
true inner join.
Equi-join Uses a conditional expression with =to match rows from the different
tables in the join. In SQL, this is a join with a WHERE clause.13 6728 CH10  9/2/04  1:21 PM  Page 252
253 Retrieving Data from the Database
Left join Tries to match rows across tables and fills in nonmatching rows with
NULL s. Use in SQL with the LEFT JOIN keywords. Used for finding
missing values.Y ou can equivalently use RIGHT JOIN .
Retrieving Data in a Particular Order
If you want to display rows retrieved by a query in a particular order, you can use the
ORDER BY clause of the SELECT statement.This feature is handy for presenting output in
a good human-readable format.
The ORDER BY clause sorts the rows on one or more of the columns listed in the
SELECT clause. For example,
select name, address
from customersorder by name;
This query returns customer names and addresses in alphabetical order by name, like
this:
+-----------------+--------------------+
| name            | address            |+-----------------+--------------------+| Alan Wong       | 1/47 Haines Avenue || Julie Smith     | 25 Oak Street      || Melissa Jones   |                    || Michael Archer  | 12 Adderley Avenue || Michelle Arthur | 357 North Road     |+-----------------+--------------------+
Notice that in this case, because the names are in firstname, lastname format, they are
alphabetically sorted on the first name. If you wanted to sort on last names, you wouldneed to have them as two different fields.
The default ordering is ascending ( ato zor numerically upward).Y ou can specify this
if you like by using the 
ASCkeyword:
select name, address
from customersorder by name asc;
You can also do it in the opposite order by using the DESC (descending) keyword:
select name, address
from customersorder by name desc;Table 10.2 Continued
Name Description13 6728 CH10  9/2/04  1:21 PM  Page 253
254 Chapter 10 Working with Your MySQL Database
In addition, you can sort on more than one column.Y ou can also use column aliases or
even their position numbers (for example, 3 is the third column in the table) instead of
names.
Grouping and Aggregating Data
You may often want to know how many rows fall into a particular set or the average
value of some column—say, the average dollar value per order. MySQL has a set of
aggregate functions that are useful for answering this type of query.
These aggregate functions can be applied to a table as a whole or to groups of data
within a table.The most commonly used ones are listed in Table 10.3.
Table 10.3 Aggregate Functions in MySQL
Name Description
AVG(column) Average of values in the specified column.
COUNT(items) If you specify a column, this will give you the number of non- NULL
values in that column. If you add the word DISTINCT in front of the
column name, you will get a count of the distinct values in that col-umn only. If you specify 
COUNT(*) ,you will get a row count regard-
less of NULL values.
MIN(column ) Minimum of values in the specified column.
MAX(column) Maximum of values in the specified column.
STD(column) Standard deviation of values in the specified column.
STDDEV(column) Same as STD(column).
SUM(column) Sum of values in the specified column.
Let’s look at some examples, beginning with the one mentioned earlier.Y ou can calcu-
late the average total of an order like this:
select avg(amount)
from orders;
The output is something like this:
+-------------+| avg(amount) |+-------------+|   54.985002 |+-------------+
To get more detailed information, you can use the GROUP BY clause. It enables you to
view the average order total by group—for example, by customer number.This informa-tion tells you which of your customers place the biggest orders:13 6728 CH10  9/2/04  1:21 PM  Page 254
255 Retrieving Data from the Database
select customerid, avg(amount)
from ordersgroup by customerid;
When you use a GROUP BY clause with an aggregate function, it actually changes the
behavior of the function. Instead of giving an average of the order amounts across thetable, this query gives the average order amount for each customer (or, more specifically,for each 
customerid ):
+------------+-------------+
| customerid | avg(amount) |+------------+-------------+|          1 |   49.990002 ||          2 |   74.980003 ||          3 |   47.485002 |+------------+-------------+
Here’s one point to note when using grouping and aggregate functions: In ANSI SQL, if
you use an aggregate function or GROUP BY clause, the only things that can appear in
your SELECT clause are the aggregate function(s) and the columns named in the GROUP
BYclause.Also, if you want to use a column in a GROUP BY clause, it must be listed in the
SELECT clause.
MySQL actually gives you a bit more leeway here. It supports an extended syntax ,
which enables you to leave items out of the SELECT clause if you don’t actually want
them.
In addition to grouping and aggregating data, you can actually test the result of an
aggregate by using a HAVING clause. It comes straight after the GROUP BY clause and is
like a WHERE that applies only to groups and aggregates.
To extend the previous example, if you want to know which customers have an aver-
age order total of more than $50, you can use the following query:
select customerid, avg(amount)
from ordersgroup by customeridhaving avg(amount) > 50;
Note that the HAVING clause applies to the groups.This query returns the following
output:
+------------+-------------+
| customerid | avg(amount) |+------------+-------------+|          2 |   74.980003 |+------------+-------------+13 6728 CH10  9/2/04  1:21 PM  Page 255
256 Chapter 10 Working with Your MySQL Database
Choosing Which Rows to Return
One clause of the SELECT statement that can be particularly useful in Web applications is
LIMIT .It is used to specify which rows from the output should be returned.This clause
takes two parameters: the row number from which to start and the number of rows toreturn.
This query illustrates the use of 
LIMIT :
select name
from customerslimit 2, 3;
This query can be read as,“Select name from customers, and then return 3 rows, starting
from row 2 in the output.” Note that row numbers are zero indexed; that is, the first rowin the output is row number zero.
This feature is very useful for Web applications, such as when the customer is brows-
ing through products in a catalog, and you want to show 10 items on each page. Note,however, that 
LIMIT is not part of ANSI SQL. It is a MySQL extension, so using it
makes your SQL incompatible with most other RDBMSs.
Using Subqueries
A subquery is a query that is nested inside another query.This feature is new in MySQL 4.1.While most subquery functionality can be obtained with careful use ofjoins and temporary tables, subqueries are often easier to read and write.
Basic Subqueries
The most common use of subqueries is to use the result of one query in a comparison
in another query. For example, if you wanted to find the order in which the amountordered was the largest of any of the orders, you could use the following query:
select customerid, amount
from orderswhere amount = (select max(amount) from orders);
This query gives the following results:
+------------+--------+| customerid | amount |+------------+--------+|          4 |  74.98 |+------------+--------+
In this case, a single value is returned from the subquery (the maximum amount) and
then used for comparison in the outer query.This is a good example of subquery usebecause this particular query cannot be elegantly reproduced using joins in ANSI SQL.13 6728 CH10  9/2/04  1:21 PM  Page 256
257 Retrieving Data from the Database
The same output, however, produced by this join query:
select customerid, amount
from ordersorder by amount desclimit 1;
Because it relies on LIMIT ,this query is not compatible with most RDBMSs, but it exe-
cutes more efficiently on MySQL than the subquery version.
One of the main reasons that MySQL did not get subqueries for so long was that
there is very little that you cannot do without them.T echnically, you can create a single,legal ANSI SQL query that has the same effect but relies on an inefficient, hackapproach called the MAX-CONCAT trick.
You can use subquery values in this way with all the normal comparison operators.
Some special subquery comparison operators are also available, detailed in the next section.
Subqueries and Operators
There are five special subquery operators. Four are used with regular subqueries, and one
(
EXISTS ) is usually used only with correlated subqueries and is covered in the next sec-
tion.The four regular subquery operators are shown in Table 10.4.
Table 10.4 Subquery Operators
Name Sample Syntax Description
ANY SELECT c1 FROM t1 Returns true if the comparison is 
WHERE c1 > true for any of the rows in the subquery.
ANY (SELECT c1 FROM t2);
IN SELECT c1 FROM t1 Equivalent to =ANY .
WHERE c1 IN
(SELECT c1 from t2);
SOME SELECT c1 FROM t1 Alias for ANY;sometimes reads better 
WHERE c1 > to the human ear
SOME (SELECT c1 FROM t2) ;!
ALL SELECT c1 FROM t1 Returns true if the comparison is 
WHERE c1 > true for all of the rows in the subquery.
ALL (SELECT c1 from t2);
Each of these operators can appear only after a comparison operator, except for IN,
which has its comparison operator ( =) “rolled in,” so to speak.13 6728 CH10  9/2/04  1:21 PM  Page 257
258 Chapter 10 Working with Your MySQL Database
Correlated Subqueries
In correlated subqueries, things become a little more complicated. In correlated sub-
queries, you can use items from the outer query in the inner query. For example,
select isbn, title
from bookswhere not exists
(select * from order_items where order_items.isbn=books.isbn);
This query illustrates both the use of correlated subqueries and the use of the last special
subquery operator, EXISTS .It retrieves any books that have never been ordered. (This is
the same information you found from doing a left join earlier.) Note that the innerquery includes the 
order_items table only in the FROM list but refers to books.isbn. In
other words, the inner query refers to data in the outer query.This is the definition of acorrelated subquery:Y ou are looking for inner rows that match (or in this case don’tmatch) the outer rows.
The 
EXISTS operator returns true if there are any matching rows in the subquery.
Conversely, NOT EXISTS returns true if there are no matching rows in the subquery.
Row Subqueries
All the subqueries so far have returned a single value, although in many cases this value
is true or false (as with the preceding example using EXISTS ). Row subqueries return
an entire row, which can then be compared to entire rows in the outer query.Thisapproach is generally used to look for rows in one table that also exist in another table.There is not a good example of this in the books database, but a generalized example ofthe syntax could be something like the following:
select c1, c2, c3
from t1where (c1, c2, c3) in (select c1, c2, c3 from t2);
Using a Subquery as a Temporary Table
You can use a subquery in the FROM clause of an outer query.This approach effectively
allows you to query the output of the subquery, treating it as a temporary table.
In its simplest form, this is something like:
select * from
(select customerid, name from customers where city= ’Box Hill ’)
as box_hill_customers;
Note that we put the subquery in the FROM clause here. Immediately after the subquery’s
closing parenthesis, you must give the results of the subquery an alias.Y ou can then treatit like any other table in the outer query.13 6728 CH10  9/2/04  1:21 PM  Page 258
259 Altering Tables After Creation
Updating Records in the Database
In addition to retrieving data from the database, you often want to change it. For exam-
ple, you might want to increase the prices of books in the database.Y ou can do this usingan 
UPDATE statement.
The usual form of an UPDATE statement is
UPDATE [LOW_PRIORITY] [IGNORE] tablename
SET column1=expression1 ,column2=expression2 ,...
[WHERE condition ]
[ORDER BY order_criteria ]
[LIMIT number]
The basic idea is to update the table called tablename ,setting each of the columns
named to the appropriate expression.Y ou can limit an UPDATE to particular rows with a
WHERE clause and limit the total number of rows to affect with a LIMIT clause.ORDER BY
is usually used only in conjunction with a LIMIT clause; for example, if you are going to
update only the first 10 rows, you want to put them in some kind of order first.
LOW_PRIORITY and IGNORE ,if specified, work the same way as they do in an INSERT
statement.
Let’s look at some examples. If you want to increase all the book prices by 10%, you
can use an UPDATE statement without a WHERE clause:
update books
set price=price*1.1;
If, on the other hand, you want to change a single row—say, to update a customer’s
address—you can do it like this:
update customers
set address = ‘250 Olsens Road ’
where customerid = 4;
Altering Tables After Creation
In addition to updating rows, you might want to alter the structure of the tables within
your database. For this purpose, you can use the flexible ALTER TABLE statement.The
basic form of this statement is
ALTER TABLE [IGNORE] tablename alteration [, alteration ...]
Note that in ANSI SQL you can make only one alteration per ALTER TABLE statement,
but MySQL allows you to make as many as you like. Each of the alteration clauses can
be used to change different aspects of the table.
If the IGNORE clause is specified and you are trying to make an alteration that causes
duplicate primary keys, the first one will go into the altered table and the rest will bedeleted. If it is not specified (the default), the alteration will fail and be rolled back.13 6728 CH10  9/2/04  1:21 PM  Page 259
260 Chapter 10 Working with Your MySQL Database
The different types of alterations you can make with this statement are shown in
Table 10.5.
Table 10.5 Possible Changes with the ALTER TABLE Statement
Syntax Description
ADD [COLUMN] column_description Adds a new column in the specified location
[FIRST | AFTER column] (if not specified, then the column goes at the
end). Note that column_descriptions
need a name and a type, just as in a CREATE
statement.
ADD [COLUMN] ( column_description , Adds one or more new columns at the end 
column_description ,...) of the table.
ADD INDEX [ index] (column,...) Adds an index to the table on the specified
column or columns.
ADD [CONSTRAINT [ symbol]] Makes the specified column or columns the 
PRIMARY KEY ( column,...) primary key of the table.The CONSTRAINT
notation is for tables using foreign keys. See
Chapter 13”Advanced MySQL program-ming,”for more details.
ADD UNIQUE [CONSTRAINT [ symbol]] Adds a unique index to the table on the 
[index] (column,...) specified column or columns.The 
CONSTRAINT notation is for InnoDB tables
using foreign keys. See Chapter 13 for moredetails.
ADD [CONSTRAINT [ symbol]] Adds a foreign key to an InnoDB table.
FOREIGN KEY [ index] (index_col ,...) See Chapter 13 for more details.
[reference_definition ]
ALTER [COLUMN] column{SET DEFAULT Adds or removes a default value for a 
value| DROP DEFAULT} particular column.
CHANGE [COLUMN] column new_column Changes the column called column so that it 
description has the description listed. Note that this syn-
tax can be used to change the name of a col-umn because a
column_description
includes a name.
MODIFY [COLUMN] column_description Similar to CHANGE .Can be used to change
column types, not names.
DROP [COLUMN] column Deletes the named column.
DROP PRIMARY KEY Deletes the primary index (but not the column).
DROP INDEX index Deletes the named index.
DROP FOREIGN KEY key Deletes the foreign key (but not the column).13 6728 CH10  9/2/04  1:21 PM  Page 260
261 Altering Tables After Creation
DISABLE KEYS Turns off index updating.
ENABLE KEYS Turns on index updating.
RENAME [AS] new_table_name Renames a table.
ORDER BY col_name Re-creates the table with the rows in a par-
ticular order. (Note that after you beginchanging the table, the rows will no longerbe in order.)
CONVERT TO CHARACTER SET cs Converts all text-based columns to the 
COLLATE c specified character set and collation.
[DEFAULT] CHARACTER SET cs Sets the default character set and collation.
COLLATE c
DISCARD TABLESPACE Deletes the underlying tablespace file for an
InnoDB table. (See Chapter 13 for moredetails on InnoDB.)
IMPORT TABLESPACE Re-creates the underlying tablespace file foran InnoDB table. (See Chapter 13 for moredetails on InnoDB.)
table_options Allows you to reset the table options. Uses
the same syntax as CREATE TABLE .
Let’s look at a few of the more common uses of ALTER TABLE .
You may frequently realize that you haven’t made a particular column “big enough”
for the data it has to hold. For example, previously in the customers table, you allowed
names to be 50 characters long.After you start getting some data, you might notice thatsome of the names are too long and are being truncated.Y ou can fix this problem bychanging the data type of the column so that it is 70 characters long instead:
alter table customers
modify name char(70) not null;
Another common occurrence is the need to add a column. Imagine that a sales tax on
books is introduced locally and that Book-O-Rama needs to add the amount of tax tothe total order but keep track of it separately.Y ou can add a 
taxcolumn to the orders
table as follows:
alter table orders
add tax float(6,2) after amount;
Getting rid of a column is another case that comes up frequently.Y ou can delete the col-
umn you just added as follows:
alter table orders
drop tax;Table 10.5 Possible Changes with the ALTER TABLE Statement
Syntax Description13 6728 CH10  9/2/04  1:21 PM  Page 261
262 Chapter 10 Working with Your MySQL Database
Deleting Records from the Database
Deleting rows from the database is simple.Y ou can do this using the DELETE statement,
which generally looks like this:
DELETE [LOW_PRIORITY] [QUICK] [IGNORE] FROM table
[WHERE condition ]
[ORDER BY order_cols ]
[LIMIT number]
If you write
delete from table;
on its own, all the rows in a table will be deleted, so be careful! Usually, you want to
delete specific rows, and you can specify the ones you want to delete with a WHERE
clause.Y ou might do this, if, for example, a particular book were no longer available or ifa particular customer hadn’t placed any orders for a long time and you wanted to dosome housekeeping:
delete from customers
where customerid=5;
The LIMIT clause can be used to limit the maximum number of rows that are actually
deleted.ORDER BY is usually used in conjunction with LIMIT .
LOW_PRIORITY and IGNORE work as they do elsewhere. QUICK may be faster on
MyISAM tables.
Dropping Tables
At times, you may want to get rid of an entire table.Y ou can do this with the DROP
TABLE statement.This process is very simple, and it looks like this:
DROP TABLE table;
This query deletes all the rows in the table and the table itself, so be careful using it.
Dropping a Whole Database
You can go even further and eliminate an entire database with the DROP DATABASE
statement, which looks like this:
DROP DATABASE database ;
This query deletes all the rows, all the tables, all the indexes, and the database itself, so it
goes without saying that you should be somewhat careful using this statement.13 6728 CH10  9/2/04  1:21 PM  Page 262
263 Next
Further Reading
In this chapter, we provided an overview of the day-to-day SQL you will use when
interacting with a MySQL database. In the next two chapters, we describe how to con-nect MySQL and PHP so that you can access your database from the Web.We alsoexplore some advanced MySQL techniques.
If you want to know more about SQL, you can always fall back on the ANSI SQL
standard for a little light reading. It’s available from
http://www.ansi.org/
For more details on the MySQL extensions to ANSI SQL, you can look at the MySQL
website:
http://www.mysql.com
Next
In Chapter 11,“Accessing Y our MySQL Database from the Web with PHP ,” we coverhow to make the Book-O-Rama database available over the Web.13 6728 CH10  9/2/04  1:21 PM  Page 263
13 6728 CH10  9/2/04  1:21 PM  Page 264
11
Accessing Your MySQL Database
from the Web with PHP
PREVIOUSLY ,IN OUR WORK WITH PHP , WEused a flat file to store and retrieve data.
When we looked at this file in Chapter 2,“Storing and Retrieving Data,” we mentionedthat relational database systems make a lot of these storage and retrieval tasks easier, safer,and more efficient in a web application. Now, having worked with MySQL to create adatabase, we can begin connecting this database to a web-based front end.
In this chapter, we explain how to access the Book-O-Rama database from the Web
using PHP .Y ou learn how to read from and write to the database and how to filterpotentially troublesome input data.
Key topics covered in this chapter include
nHow web database architectures work
nQuerying a database from the Web using the basic steps
nSetting up a connection
nGetting information about available databases
nChoosing a database to use
nQuerying the database
nRetrieving the query results
nDisconnecting from the database
nPutting new information in the database
nUsing prepared statements
nUsing other PHP-database interfaces
nUsing a generic database interface: PEAR DB14 6728 ch11  9/2/04  1:20 PM  Page 265
266 Chapter 11 Accessing Your MySQL Database from the Web with PHP
How Web Database Architectures Work
In Chapter 8,“Designing Y our Web Database,” we outlined how web database architec-
tures work. Just to remind you, here are the steps again:
1. A user’s web browser issues an HTTP request for a particular web page. For exam-
ple, the user might have requested a search for all the books written by MichaelMorgan at Book-O-Rama, using an HTML form.The search results page is called
results.php .
2. The web server receives the request for results.php ,retrieves the file, and passes
it to the PHP engine for processing.
3. The PHP engine begins parsing the script. Inside the script is a command to con-
nect to the database and execute a query (perform the search for books). PHPopens a connection to the MySQL server and sends on the appropriate query.
4. The MySQL server receives the database query, processes it, and sends the results—
a list of books—back to the PHP engine.
5. The PHP engine finishes running the script.This usually involves formatting the
query results nicely in HTML. It then returns the resulting HTML to the webserver.
6. The web server passes the HTML back to the browser, where the user can see the
list of books she requested.
Now you have an existing MySQL database, so you can write the PHP code to perform
the preceding steps. Begin with the search form.The code for this plain HTML form isshown in Listing 11.1.
Listing 11.1 search.html — Book-O-Rama’s Database Search Page
<html>
<head>
<title>Book-O-Rama Catalog Search</title>
</head>
<body>
<h1>Book-O-Rama Catalog Search</h1>
<form action= ”results.php ”method=”post”>
Choose Search Type:<br /><select name= ”searchtype ”>
<option value= ”author”>Author</option>
<option value= ”title”>Title</option>
<option value= ”isbn”>ISBN</option>
</select><br />Enter Search Term:<br />14 6728 ch11  9/2/04  1:20 PM  Page 266
267 How Web Database Architectures Work
<input name= ”searchterm ”type=”text”>
<br /><input type= ”submit”value=”Search”>
</form>
</body>
</html>
This HTML form is reasonably straightforward.The output of this HTML is shown in
Figure 11.1.Listing 11.1 Continued
Figure 11.1 The search form is quite general, so you can search for a book
on its title, author, or ISBN.
The script that will be called when the Search button is clicked is results.php .It is
listed in full in Listing 11.2.Through the course of this chapter, we will discuss what thisscript does and how it works.
Listing 11.2 results.php —This Script Retrieves Search Results from the MySQL
Database and Formats Them for Display
<html>
<head>
<title>Book-O-Rama Search Results</title>
</head><body><h1>Book-O-Rama Search Results</h1><?php
// create short variable names$searchtype=$_POST[ ‘searchtype ’];
$searchterm=$_POST[ ‘searchterm ’];
14 6728 ch11  9/2/04  1:20 PM  Page 267
268 Chapter 11 Accessing Your MySQL Database from the Web with PHP
$searchterm= trim($searchterm);
if (!$searchtype || !$searchterm)
{
echo ‘You have not entered search details.  Please go back and try again. ’;
exit;
}
if (!get_magic_quotes_gpc())
{
$searchtype = addslashes($searchtype);$searchterm = addslashes($searchterm);
}
@ $db = new mysqli( ‘localhost ’, ‘bookorama ’, ‘bookorama123 ’, ‘books’);
if (mysqli_connect_errno())
{
echo ‘Error: Could not connect to database.  Please try again later. ’;
exit;
}
$query = “select * from books where “.$searchtype. ”like ‘%”.$searchterm. ”%’”;
$result = $db->query($query);
$num_results = $result->num_rows;echo ‘<p>Number of books found: ‘.$num_results. ’</p>’;
for ($i=0; $i <$num_results; $i++)
{
$row = $result->fetch_assoc();echo ‘<p><strong> ’.($i+1). ’. Title: ‘;
echo htmlspecialchars(stripslashes($row[ ‘title’]));
echo ‘</strong><br />Author: ‘;
echo stripslashes($row[ ‘author’]);
echo ‘<br />ISBN: ‘;
echo stripslashes($row[ ‘isbn’]);
echo ‘<br />Price: ‘;
echo stripslashes($row[ ‘price’]);
echo ‘</p>’;
}Listing 11.2 Continued14 6728 ch11  9/2/04  1:20 PM  Page 268
269 Querying a Database from the Web
$result->free();
$db->close();
?>
</body>
</html>
Note that this script allows you to enter the MySQL wildcard characters %and _
(underscore).This capability can actually be useful for the user.Y ou can escape thesecharacters if it will cause a problem for your application.
Figure 11.2 illustrates the results of using this script to perform a search.Listing 11.2 Continued
Figure 11.2 The results of searching the database for books about Java are
presented in a web page using the results.php script.
Querying a Database from the Web
In any script used to access a database from the Web, you follow some basic steps:
1. Check and filter data coming from the user.2. Set up a connection to the appropriate database.3. Query the database.4. Retrieve the results.5. Present the results back to the user.
These are the steps we followed in the script 
results.php ,so now let’s go through each
of them in turn.
14 6728 ch11  9/2/04  1:20 PM  Page 269
270 Chapter 11 Accessing Your MySQL Database from the Web with PHP
Checking and Filtering Input Data
You begin the script by stripping any whitespace that the user might have inadvertently
entered at the beginning or end of his search term.Y ou do this by applying the function
trim() to $searchterm :
$searchterm=trim($searchterm);
The next step is to verify that the user has entered a search term and search type. Notethat you check whether he entered a search term after trimming whitespace from theends of 
$searchterm .If you arrange these lines in the opposite order, you could
encounter situations in which a user’s search term is not empty and therefore does notcreate an error message; instead, it is all whitespace, so it is deleted by 
trim() :
if (!$searchtype || !$searchterm)
{
echo ‘You have not entered search details.  Please go back and try again. ’;
exit;
}
You check the $searchtype variable even though in this case it’s coming from an
HTML SELECT .You might ask why you should bother checking data that has to be filled
in. It’s important to remember that there might be more than one interface to your data-base. For example,Amazon has many affiliates who use its search interface.Also, it’s sensi-ble to screen data in case of any security problems that can arise because of users coming
from different points of entry.
Also, when you plan to use any data input by a user, you need to filter it appropriate-
ly for any control characters.As you might remember, in Chapter 4,“StringManipulation and Regular Expressions,” we described the functions 
addslashes() ,
stripslashes() ,and get_magic_quotes_gpc() .You need to escape data when submit-
ting any user input to a database such as MySQL.
In this case, you check the value of the get_magic_quotes_gpc() function. It tells
you whether quoting is being done automatically. If it is not, you use addslashes() to
escape the data:
if (!get_magic_quotes_gpc())
{
$searchtype = addslashes($searchtype);$searchterm = addslashes($searchterm);
}
You also use stripslashes() on the data coming back from the database. If the magic
quotes feature is turned on, the data will have slashes in it when it comes back from thedatabase, so you need to take them out.14 6728 ch11  9/2/04  1:20 PM  Page 270
271 Setting Up a Connection
Here, you use the function htmlspecialchars() to encode characters that have spe-
cial meanings in HTML.The current test data does not include any ampersands ( &), less
than (<), greater than ( >), or double quotation mark ( “) symbols, but many fine book
titles contain an ampersand. By using this function, you can eliminate future errors.
Setting Up a Connection
PHP5 has a new library for connecting to MySQL.This library is called mysqli (the i
stands for improved).The mysqli library is suitable for use with MySQL version 4 andlater.At version 4, a new connection protocol that is much faster was added to MySQL,and mysqli allows you to take advantage of it.The mysqli library allows you to use eitheran object-oriented or procedural syntax.
You use the following line in the script to connect to the MySQL server:
@ $db = new mysqli( ‘localhost ’, ‘bookorama ’, ‘bookorama123 ’, ‘books’);
This line instantiates the mysqli class and creates a connection to host ‘localhost ’
with username ‘bookorama ’,and password ‘bookorama123 ’.The connection is set up
to use the database called books.
Using this object-oriented approach, you can now invoke methods on this object to
access the database. If you prefer a procedural approach, mysqli allows for this, too.T oconnect in a procedural fashion, you would use
@ $db = mysqli_connect( ‘localhost ’, ‘bookorama ’, ‘bookorama123 ’, ‘books’);
This function returns a resource rather than an object.This resource represents the con-
nection to the database, and if you are using the procedural approach, you will need topass this resource in to all the other mysqli functions.This is very similar to the way thefile-handling functions, such as 
fopen() ,work.
Most of the mysqli functions have an object-oriented interface and a procedural
interface. Generally, the differences are that the procedural version function names startwith 
mysqli_ and require you to pass in the resource handle you obtained from
mysqli_connect() .Database connections are an exception to this rule because they can
be made by the mysqli object’s constructor.
The result of your attempt at connection is worth checking because none of the rest of
code will work without a valid database connection.Y ou do this using the following code:
if (mysqli_connect_errno())
{
echo ‘Error: Could not connect to database.  Please try again later. ’;
exit;
}
(This code is the same for the object-oriented and procedural versions.) The
mysqli_connect_errno() function returns an error number on error, or zero on success.14 6728 ch11  9/2/04  1:20 PM  Page 271
272 Chapter 11 Accessing Your MySQL Database from the Web with PHP
Note that when you connect to the database, you begin the line of code with the
error suppression operator, @.This way, you can handle any errors gracefully. (This could
also be done with exceptions, which we have not used in this simple example.)
Bear in mind that there is a limit to the number of MySQL connections that can
exist at the same time.The MySQL parameter max_connections determines what this
limit is.The purpose of this parameter and the related Apache parameter MaxClients is
to tell the server to reject new connection requests instead of allowing machineresources to be completely used up at busy times or when software has crashed.
You can alter both of these parameters from their default values by editing the con-
figuration files.T o set 
MaxClients in Apache, edit the httpd.conf file on your system.
To set max_connections for MySQL, edit the file my.conf .
Choosing a Database to Use
Remember that when you are using MySQL from a command-line interface, you need
to tell it which database you plan to use with a command such as
use books;
You also need to do this when connecting from the Web.The database to use is specified
as a parameter to the mysqli constructor or the mysqli_connect() function. If you
want to change the default database, you can do so with the mysqli_select_db() func-
tion. It can be accessed as either
$db->select_db( dbname)
or as
mysqli_select_db( db_resource, db_name )
Here, you can see the similarity between the functions that we described before:The
procedural version begins with mysqli_ and requires the extra database handle
parameter.
Querying the Database
To actually perform the query, you can use the mysqli_query() function. Before doing
this, however, it’s a good idea to set up the query you want to run:
$query = “select * from books where $searchtype like ‘%$searchterm% ’”;
In this case, you search for the user-input value ( $searchterm ) in the field the user spec-
ified ($searchtype ). Notice the use of like for matching rather than equal :it’s usually
a good idea to be more tolerant in a database search.
Tip
Remember that the query you send to MySQL does not need a semicolon at the end of it , unlike a query you
type into the MySQL monitor.14 6728 ch11  9/2/04  1:20 PM  Page 272
273 Retrieving the Query Results
You can now run the query:
$result = $db->query($query);
Or, if you wanted to use the procedural interface, you would use
$result = mysqli_query($db, $query);
You pass in the query you want to run and, in the procedural interface, the database link
(again, in this case $db).
The object-oriented version returns a result object; the procedural version returns a
result resource. (This is similar to the way the connection functions work.) Either way,
you store the result in a variable ( $result ) for later use.This function returns false on
failure.
Retrieving the Query Results
Alarge variety of functions is available to break the results out of the result object or
identifier in different ways.The result object or identifier is the key to accessing the rowsreturned by the query.
In this example, you counted the number of rows returned and also used the
mysqli_fetch_assoc() function.
When you use the object-oriented approach, the number of rows returned is stored
in the num_rows member of the result object, and you can access it as follows:
$num_results = $result->num_rows;
When you use a procedural approach, the function mysqli_num_rows() gives you the
number of rows returned by the query.Y ou should pass it the result identifier, like this:
$num_results = mysqli_num_rows($result);
It’s useful to know this—if you plan to process or display the results, as you now know
how many there are and can loop through them:
for ($i=0; $i <$num_results; $i++)
{
// process results
}
In each iteration of this loop, you call $result->fetch_assoc() (or
mysqli_fetch_assoc() ).The loop does not execute if no rows are returned.This is a
function that takes each row from the resultset and returns the row as an array, with eachkey an attribute name and each value the corresponding value in the array:
$row = $result->fetch_assoc();
Or you can use a procedural approach:
$row = mysqli_fetch_assoc($result);14 6728 ch11  9/2/04  1:20 PM  Page 273
274 Chapter 11 Accessing Your MySQL Database from the Web with PHP
Given the array $row,you can go through each field and display it appropriately, as
shown in this example:
echo ‘<br />ISBN: ‘;
echo stripslashes($row[ ‘isbn’]);
As previously mentioned, you call stripslashes() to tidy up the value before display-
ing it.
Several variations can be used to get results from a result identifier. Instead of an array
with named keys, you can retrieve the results in an enumerated array with
mysqli_fetch_row() ,as follows:
$row = $result->fetch_row($result);
or
$row = mysqli_fetch_row($result);
Here, the attribute values are listed in each of the array values $row[0] ,$row[1] ,and so
on. (The mysqli_fetch_array() function allows you to fetch a row as either or both
kinds of array.)
You could also fetch a row into an object with the mysqli_fetch_object() func-
tion:
$row = $result->fetch_object();
or
$row = mysqli_fetch_object($result);
You can then access each of the attributes via $row->title ,$row->author ,and so on.
Disconnecting from the Database
Youcan free up your resultset by calling either
$result->free();
or
mysqli_free_result($result);
You can then use
$db->close();
or
mysqli_close( $db);
to close a database connection. Using this command isn’t strictly necessary because the
connection will be closed when a script finishes execution anyway.14 6728 ch11  9/2/04  1:20 PM  Page 274
275 Putting New Information in the Database
Putting New Information in the Database
Inserting new items into the database is remarkably similar to getting items out of the
database.Y ou follow the same basic steps: make a connection, send a query, and check theresults. In this case, the query you send is an 
INSERT rather than a SELECT .
Although this process is similar, looking at an example can sometimes be useful. In
Figure 11.3, you can see a basic HTML form for putting new books into the database.
Figure 11.3 This interface for putting new books into the database could be
used by Book-O-Rama’s staff.
The HTML for this page is shown in Listing 11.3.
Listing 11.3 newbook.html — HTML for the Book Entry Page
<html>
<head>
<title>Book-O-Rama - New Book Entry</title>
</head>
<body>
<h1>Book-O-Rama - New Book Entry</h1>
<form action= ”insert_book.php ”method=”post”>
<table border= ”0”>
<tr>
<td>ISBN</td>
<td><input type= ”text”name=”isbn”maxlength= ”13”size=”13”></td>
</tr><tr>
<td>Author</td><td> <input type= ”text”name=”author”maxlength= ”30”size=”30”></td>
</tr>
14 6728 ch11  9/2/04  1:20 PM  Page 275
276 Chapter 11 Accessing Your MySQL Database from the Web with PHP
<tr>
<td>Title</td><td> <input type= ”text”name=”title”maxlength= ”60”size=”30”></td>
</tr><tr>
<td>Price $</td><td><input type= ”text”name=”price”maxlength= ”7”size=”7”></td>
</tr><tr>
<td colspan= ”2”><input type= ”submit”value=”Register ”></td>
</tr>
</table>
</form>
</body>
</html>
The results of this form are passed along to insert_book.php ,a  script that takes the
details, performs some minor validations, and attempts to write the data into the data-base.The code for this script is shown in Listing 11.4.
Listing 11.4 insert_book.php — This Script Writes New Books into the Database
<html>
<head>
<title>Book-O-Rama Book Entry Results</title>
</head><body><h1>Book-O-Rama Book Entry Results</h1><?php
// create short variable names$isbn=$_POST[ ‘isbn’];
$author=$_POST[ ‘author’];
$title=$_POST[ ‘title’];
$price=$_POST[ ‘price’];
if (!$isbn || !$author || !$title || !$price)
{
echo ‘You have not entered all the required details.<br /> ’
.’Please go back and try again. ’;
exit;
}if (!get_magic_quotes_gpc()){Listing 11.3 Continued14 6728 ch11  9/2/04  1:20 PM  Page 276
277 Putting New Information in the Database
$isbn = addslashes($isbn);
$author = addslashes($author);$title = addslashes($title);$price = doubleval($price);
}
@ $db = new mysqli( ‘localhost ’, ‘bookorama ’, ‘bookorama123 ’, ‘books’);
if (mysqli_connect_errno())
{
echo ‘Error: Could not connect to database.  Please try again later. ’;
exit;
}
$query = “insert into books values
(‘“.$isbn.”’, ‘“.$author. ”’, ‘“.$title. ”’, ‘“.$price. ”’)”;
$result = $db->query($query);if ($result)
echo  $db->affected_rows. ’book inserted into database. ’;
$db->close();
?></body>
</html>
The results of successfully inserting a book are shown in Figure 11.4.Listing 11.4 Continued
Figure 11.4 The script completes successfully and reports that the book has
been added to the database.
14 6728 ch11  9/2/04  1:20 PM  Page 277
278 Chapter 11 Accessing Your MySQL Database from the Web with PHP
If you look at the code for insert_book.php ,you can see that much of it is similar to
the script you wrote to retrieve data from the database. Here, you check that all the formfields were filled in, and you format them correctly for insertion into the database (ifrequired) with 
addslashes() :
if (!get_magic_quotes_gpc())
{
$isbn = addslashes($isbn);$author = addslashes($author);$title = addslashes($title);$price = doubleval($price);
}
Because the price is stored in the database as a float, you don’t want to put slashes into
it.Y ou can achieve the same effect of filtering out any odd characters on this numericalfield by calling 
doubleval() ,which we discussed in Chapter 1,“PHP Crash Course.”
This also takes care of any currency symbols that the user might have typed in the form.
Again, you connect to the database by instantiating the mysqli object and setting up
a query to send to the database. In this case, the query is an SQL INSERT :
$query = “insert into books values
(‘$isbn’, ‘$author’, ‘$title’, ‘$price’)”;
$result = $db->query($query);
This query is executed on the database in the usual way by calling $db->query() (or
mysqli_query() if you want to do things procedurally).
One significant difference between using INSERT and SELECT is in the use of
mysqli_affected_rows() .This is a function in the procedural version or a class mem-
ber variable in the object-oriented version:
echo  $db->affected_rows. ’book(s) inserted into database. ’;
In the previous script, you used mysqli_num_rows() to determine how many rows were
returned by a SELECT .When you write queries that change the database such as INSERT s,
DELETE s, and UPDATE s, you should use mysqli_affected_rows() instead.
We’ve now covered the basics of using MySQL databases from PHP .
Using Prepared Statements
The mysqli library supports the use of prepared statements.They are useful for speeding
up execution when you are performing large numbers of the same query with differentdata.They also protect against SQL injection-style attacks.
The basic concept of a prepared statement is that you send a template of the query
you want to execute to MySQL and then send the data separately.Y ou can send multiple
lots of the same data to the same prepared statement; this capability is particularly usefulfor bulk inserts.14 6728 ch11  9/2/04  1:20 PM  Page 278
279 Using Prepared Statements
You could use prepared statements in the insert_book.php script, as follows:
$query = “insert into books values(?, ?, ?, ?) ”;
$stmt = $db->prepare($query);$stmt->bind_param( “sssd”, $isbn, $author, $title, $price);
$stmt->execute();echo  $stmt->affected_rows. ’book inserted into database. ’;
$stmt->close();
Let’s consider this code line by line.
When you set up the query, instead of substituting in the variables as done previously,
you put in question marks for each piece of data.Y ou should not put any quotation
marks or other delimiters around these question marks.
The second line is a call to $db->prepare() ,which is called mysqli_stmt_
prepare() in the procedural version.This line constructs a statement object or resource
that you will then use to do the actual processing.
The statement object has a method called bind_param() .(In the procedural version,
it is called mysqli_stmt_bind_param() .) The purpose of bind_param() is to tell PHP
which variables should be substituted for the question marks.The first parameter is a for-mat string, not unlike the format string used in 
printf() .The value you are passing
here (“sssd”) means that the four parameters are a string, a string, a string, and a double,
respectively. Other possible characters in the format string are ifor integer and bfor
blob.After this parameter, you should list the same number of variables as you have ques-
tion marks in your statement.They will be substituted in this order.
The call to $stmt->execute() (mysqli_stmt_execute() in the procedural version)
actually runs the query.Y ou can then access the number of affected rows and close thestatement.
So how is this prepared statement useful? The clever thing is that you can change the
values of the four bound variables and re-execute the statement without having to repre-
pare.This capability is useful for looping through bulk inserts.
As well as binding parameters, you can bind results. For 
SELECT type queries, you can
use $stmt->bind_result() (or mysqli_stmt_bind_result() ) to provide a list of vari-
ables that you would like the result columns to be filled in to. Each time you call $stmt-
>fetch() (or mysqli_stmt_fetch() ), column values from the next row in the resultset
are filled into these bound variables. For example, in the book search script you lookedat earlier, you could use
$stmt->bind_result($isbn, $author, $title, $price);
to bind these four variables to the four columns that will be returned from the query.After calling
$stmt->execute();
you can call
$stmt->fetch();14 6728 ch11  9/2/04  1:20 PM  Page 279
280 Chapter 11 Accessing Your MySQL Database from the Web with PHP
in the loop. Each time this is called, it fetches the next result row into the four bound
variables.
You can also use mysqli_stmt_bind_param() and mysqli_stmt_bind_result() in
the same script.
Note that at the time of writing (PHP5RC2), prepared statements caused an Apache-
crashing bug under Windows but worked fine on the Unix platforms.
Using Other PHP-Database Interfaces
PHP supports libraries for connecting to a large number of databases, including Oracle,Microsoft SQL Server, and PostgreSQL.
In general, the principles of connecting to and querying any of these databases are
much the same.The individual function names vary, and different databases have slightly
different functionality, but if you can connect to MySQL, you should be able to easilyadapt your knowledge to any of the others.
If you want to use a database that doesn’t have a specific library available in PHP , you
can use the generic ODBC functions. ODBC, which stands for Open Database
Connectivity, is a standard for connections to databases. It has the most limited functional-
ity of any of the function sets, for fairly obvious reasons. If you have to be compatiblewith everything, you can’t exploit the special features of anything.
In addition to the libraries that come with PHP , available database abstraction classes
such as 
PEAR::DB allow you to use the same function names for each different type of
database.
Using a Generic Database Interface: PEAR DB
Let’s look at a brief example using the PEAR DB abstraction layer.This is one of thecore components of PEAR and probably the most widely used of all the PEAR compo-nents. If you have PEAR installed, you should already have DB. If not, refer to the“PEAR Installation” section in Appendix A,“Installing PHP and MySQL.”
For comparative purposes, let’s look at how you could write the search results script
differently using DB.
Listing 11.5 results_generic.php —Retrieves Search Results from the MySQL
Database and Formats Them for Display
<html>
<head>
<title>Book-O-Rama Search Results</title>
</head><body><h1>Book-O-Rama Search Results</h1><?php
// create short variable names14 6728 ch11  9/2/04  1:20 PM  Page 280
281 Using a Generic Database Interface: PEAR DB
$searchtype=$_POST[ ‘searchtype ’];
$searchterm=$_POST[ ‘searchterm ’];
$searchterm= trim($searchterm);if (!$searchtype || !$searchterm)
{
echo ‘You have not entered search details.  Please go back and try again. ’;
exit;
}
if (!get_magic_quotes_gpc())
{
$searchtype = addslashes($searchtype);$searchterm = addslashes($searchterm);
}
// set up for using PEAR DB
require_once( ‘DB.php’);
$user = ‘bookorama ’;
$pass = ‘bookorama123 ’;
$host = ‘localhost ’;
$db_name = ‘books’;
// set up universal connection string or DSN
$dsn = “mysqli://$user:$pass@$host/$db_name ”;
// connect to database
$db = &DB::connect($dsn) ;
// check if connection worked
if (DB::isError($db)){
echo $db->getMessage();exit;
}
// perform query
$query = “select * from books where “.$searchtype. ”like ‘%”.$searchterm. ”%’”;
$result = $db->query($query);
// check that result was okif (DB::isError($result)){
echo $db->getMessage();Listing 11.5 Continued14 6728 ch11  9/2/04  1:20 PM  Page 281
282 Chapter 11 Accessing Your MySQL Database from the Web with PHP
exit;
}
// get number of returned rows
$num_results = $result->numRows();
// display each returned row
for ($i=0; $i <$num_results; $i++){
$row = $result->fetchRow(DB_FETCHMODE_ASSOC);echo ‘<p><strong> ’.($i+1). ’. Title: ‘;
echo htmlspecialchars(stripslashes($row[ ‘title’]));
echo ‘</strong><br />Author: ‘;
echo stripslashes($row[ ‘author’]);
echo ‘<br />ISBN: ‘;
echo stripslashes($row[ ‘isbn’]);
echo ‘<br />Price: ‘;
echo stripslashes($row[ ‘price’]);
echo ‘</p>’;
}
// disconnect from database
$db->disconnect();
?></body>
</html>
Let’s examine what you do differently in this script.
To connect to the database, you use the line
$db = DB::connect($dsn);
This function accepts a universal connection string that contains all the parameters nec-
essary to connect to the database.Y ou can see this if you look at the format of the con-nection string:
$dsn = “mysqli://$user:$pass@$host/$db_name ”;
After this, you check to see whether the connection was unsuccessful using the
isError() method and, if so, print the error message and exit:
if (DB::isError($db))
{
echo $db->getMessage();exit;
}Listing 11.5 Continued14 6728 ch11  9/2/04  1:20 PM  Page 282
283 Next
Assuming everything has gone well, you then set up a query and execute it as follows:
$result = $db->query($query);
You can check the number of rows returned:
$num_results = $result->numRows();
You retrieve each row as follows:
$row = $result->fetchRow(DB_FETCHMODE_ASSOC);
The generic method fetchRow() can fetch a row in many different formats; the 
parameter DB_FETCHMODE_ASSOC tells it that you would like the row returned as an 
associative array.
After outputting the returned rows, you finish by closing the database connection:
$db->disconnect();
As you can see, this generic example is similar to the first script.
The advantages of using DB are that you need to remember only one set of database
functions and that the code will require minimal changes if you decide to change thedatabase software.
Because this is a MySQL book, we use the MySQL native libraries for extra speed
and flexibility.Y ou might want to use the DB package in your projects because some-times the use of an abstraction layer can be extremely helpful.
Further Reading
For more information on connecting MySQL and PHP together, you can read the
appropriate sections of the PHP and MySQL manuals.
For more information on ODBC, visit
http://www.webopedia.com/TERM/O/ODBC.html
Next
In the next chapter, we go into more detail about MySQL administration and discusshow to optimize databases.14 6728 ch11  9/2/04  1:20 PM  Page 283
14 6728 ch11  9/2/04  1:20 PM  Page 284
12
Advanced MySQL Administration
INTHIS CHAPTER ,WE COVER SOME MORE ADVANCED MySQL topics, including
advanced privileges, security, and optimization.
Key topics covered in this chapter include
nUnderstanding the privilege system in detail
nMaking your MySQL database secure
nGetting more information about databases
nSpeeding things up with indexes
nOptimizing your database
nBacking up and recovering
nImplementing replication
Understanding the Privilege System in Detail
Chapter 9,“Creating Y our Web Database,” described the process of setting up users and
granting them privileges.Y ou saw how to do this with the GRANT command. If you’re
going to administer a MySQL database, understanding exactly what GRANT does and how
it works can be useful.
When you issue a GRANT statement, it affects tables in the special database called
mysql .Privilege information is stored in five tables in this database. Given this fact, when
granting privileges on databases, you should be cautious about granting access to the
mysql database.
One side note is that the GRANT command is available only from MySQL version
3.22.11 onward.
You can look at what’s in the mysql database by logging in as an administrator and
typing
use mysql;15 6728 CH12  9/2/04  1:24 PM  Page 285
286 Chapter 12 Advanced MySQL Administration
If you do this, you can then view the tables in this database as usual by typing
show tables;
Your results look something like this:
+-----------------+
| Tables_in_mysql |+-----------------+| columns_priv    || db              || func            || help_category   || help_keyword    || help_relation   || help_topic      || host            || proc            || tables_priv     || user            |+-----------------+
Each of these tables stores system information. Five of them— user,host,db,
tables_priv ,and columns_priv —store privilege information.They are sometimes
called grant tables .These tables vary in their specific function but all serve the same gen-
eral function, which is to determine what users are and are not allowed to do. Each ofthem contains two types of fields: scope fields, which identify the user, host, and part of adatabase that the privilege refers to; and privilege fields, which identify which actionscan be performed by that user in that scope.
The 
user and host tables are used to decide whether a user can connect to the
MySQL server at all and whether she has any administrator privileges.The dband host
tables determine which databases the user can access.The tables_priv table determines
which tables within a database a user can use, and the columns_priv table determines
which columns within tables she has access to.
The user Table
The user table contains details of global user privileges. It determines whether a user is
allowed to connect to the MySQL server at all and whether she has any global-levelprivileges—that is, privileges that apply to every database in the system.
You can see the structure of this table by issuing a 
describe user; statement.The
schema for the user table is shown in Table 12.1.15 6728 CH12  9/2/04  1:24 PM  Page 286
287 Understanding the Privilege System in Detail
Table 12.1 Schema of the user Table in the mysql Database
Field Type
Host varchar(60)
User varchar(16)Password varchar(41)Select_priv enum( ‘N’,’Y’)
Insert_priv enum( ‘N’,’Y’)
Update_priv enum( ‘N’,’Y’)
Delete_priv enum( ‘N’,’Y’)
Create_priv enum( ‘N’,’Y’)
Drop_priv enum( ‘N’,’Y’)
Reload_priv enum( ‘N’,’Y’)
Shutdown_priv enum( ‘N’,’Y’)
Process_priv enum( ‘N’,’Y’)
File_priv enum( ‘N’,’Y’)
Grant_priv enum( ‘N’,’Y’)
References_priv enum( ‘N’,’Y’)
Index_priv enum( ‘N’,’Y’)
Alter_priv enum(’N ’,’Y’)
Show_db_priv enum( ‘N’,’Y’)
Super_priv enum( ‘N’,’Y’)
Create_tmp_table_priv enum( ‘N’,’Y’)
Lock_tables_priv enum( ‘N’,’Y’)
Execute_priv enum( ‘N’,’Y’)
Repl_slave_priv enum( ‘N’,’Y’)
Repl_client_priv enum( ‘N’,’Y’)
ssl_type enum( ‘N’,’Y’)
ssl_cipher enum( ‘N’,’Y’)
x509_issuer enum( ‘N’,’Y’)
x509_subject enum( ‘N’,’Y’)
max_questions enum( ‘N’,’Y’)
max_updates enum( ‘N’,’Y’)
max_connections enum( ‘N’,’Y’)
Each row in this table corresponds to a set of privileges for a User coming from a Host
and logging in with the password Password .These are the scope fields for this table
because they describe the scope of the other fields, called privilege fields .15 6728 CH12  9/2/04  1:24 PM  Page 287
288 Chapter 12 Advanced MySQL Administration
The privileges listed in this table (and the others to follow) correspond to the privi-
leges granted using GRANT in Chapter 9. For example, Select_priv corresponds to the
privilege to run a SELECT command.
If a user has a particular privilege, the value in that column will be Y.Conversely, if a
user has not been granted that privilege, the value will be N.
All the privileges listed in the user table are global; that is, they apply to all the 
databases in the system (including the mysql database).Administrators will therefore have
some Ys in there, but the majority of users should have all Ns. Normal users should have
rights to appropriate databases, not all tables.
The dband host Tables
Most of your average users’ privileges are stored in the tables dband host.
The dbtable determines which users can access which databases from which hosts.
The privileges listed in this table apply to whichever database is named in a particularrow.
The 
host table supplements the user and dbtables. If a user is to connect from mul-
tiple hosts, no host will be listed for that user in the user or dbtable. Instead, he will
have a set of entries in the host table, one to specify the privileges for each user-host
combination.
The schemas of these two tables are shown in Tables 12.2 and 12.3, respectively.
Table 12.2 Schema of the dbTable in the mysql Database
Field Type
Host char(60)
Db char(64)User char(16)Select_priv enum( ‘N’,’Y’)
Insert_priv enum( ‘N’,’Y’)
Update_priv enum( ‘N’,’Y’)
Delete_priv enum( ‘N’,’Y’)
Create_priv enum( ‘N’,’Y’)
Drop_priv enum( ‘N’,’Y’)
Grant_priv enum( ‘N’,’Y’)
References_priv enum( ‘N’,’Y’)
Index_priv enum( ‘N’,’Y’)
Alter_priv enum(’N ’,’Y’)
Create_tmp_tables_priv enum( ‘N’,’Y’)
Lock_tables_priv enum( ’N’,’Y’)15 6728 CH12  9/2/04  1:24 PM  Page 288
289 Understanding the Privilege System in Detail
Table 12.3 Schema of the host Table in the mysql Database
Field Type
Host char(60)
Db char(64)Select_priv enum( ‘N’,’Y’)
Insert_priv enum( ‘N’,’Y’)
Update_priv enum( ‘N’,’Y’)
Delete_priv enum( ‘N’,’Y’)
Create_priv enum( ‘N’,’Y’)
Drop_priv enum( ‘N’,’Y’)
Grant_priv enum( ‘N’,’Y’)
References_priv enum( ‘N’,’Y’)
Index_priv enum( ‘N’,’Y’)
Alter_priv enum ( ‘N’,’Y’)
Create_tmp_tables_priv enum( ‘N’,’Y’)
Lock_tables_priv enum(’N ’,’Y’)
The tables_priv and columns_priv Tables
The tables_priv and columns_priv tables are used to store table-level privileges and
column-level privileges, respectively.They work like the dbtable, except that they pro-
vide privileges for tables within a specific database and columns within a specific table,respectively.
These tables have a slightly different structure than the 
user,db,and host tables 
have.The schemas for the tables_priv table and columns_priv table are shown in
Tables 12.4 and 12.5, respectively.
Table 12.4 Schema of the tables_priv Table in the mysql Database
Field Type
Host char(60)
Db char(64)User char(16)Table_name char(60)Grantor char(77)Timestamp timestamp(14)Table_priv set( ‘Select’, ‘Insert’, ‘Update’, ‘Delete’, ‘Create’,
‘Drop’, ‘Grant’, ‘References ’, ‘Index’, ‘Alter’)
Column_priv set ( ‘Select’, ‘Insert’, ‘Update’, ‘References ’)15 6728 CH12  9/2/04  1:24 PM  Page 289
290 Chapter 12 Advanced MySQL Administration
Table 12.5 Schema of the columns_priv Table in the mysql Database
Field Type
Host char(60)
Db char(64)User char(16)Table_name char(64)Column_name char(64)Timestamp timestamp(14)
Column_priv set( ‘Select’, ‘Insert’, ‘Update’, ‘References ’)
The Grantor column in the tables_priv table stores the name of the user who granted
this privilege to this user.The Timestamp column in both of these tables stores the date
and time when the privilege was granted.
Access Control: How MySQL Uses the Grant Tables
MySQL uses the grant tables to determine what a user is allowed to do in a two-stageprocess:
1. Connection verification. Here, MySQL checks whether you are allowed to 
connect at all, based on information from the 
user table, as shown previously.This
authentication is based on username, hostname, and password. If a username isblank, it matches all users. Hostnames can be specified with a wildcard character 
(
%).This character can be used as the entire field (that is, %matches all hosts) or as
part of a hostname (for example, %.tangledweb.com.au matches all hosts ending
in .tangledweb.com.au) .If the password field is blank, no password is required.
Your system is more secure if you avoid having blank users, wildcards in hosts, and
users without passwords. If the hostname is blank, MySQL refers to the host table
for a matching user and host entry.
2. Request verification. Each time you enter a request, after you have established a
connection, MySQL checks whether you have the appropriate level of privilegesto perform that request.The system begins by checking your global privileges (inthe 
user table) and, if they are not sufficient, checks the dband host tables. If you
still don’t have sufficient privileges, MySQL will check the tables_priv table,
and, if this is not enough, finally it will check the columns_priv table.
Updating Privileges:When Do Changes Take Effect?
The MySQL server automatically reads the grant tables when it is started and when youissue 
GRANT and REVOKE statements. However, now that you know where and how those
privileges are stored, you can alter them manually.When you update them manually, theMySQL server will not notice that they have changed .15 6728 CH12  9/2/04  1:24 PM  Page 290
291 Making Your MySQL Database Secure
You need to point out to the server that a change has occurred, and you can do this
in three ways.Y ou can type
flush privileges;
at the MySQL prompt (you need to be logged in as an administrator to use this com-mand).This is the most commonly used way of updating the privileges.
Alternatively, you can run either
mysqladmin flush-privileges
or
mysqladmin reload
from your operating system.
After this, global-level privileges will be checked the next time a user connects; data-
base privileges will be checked when the next usestatement is issued; and table- and
column-level privileges will be checked on a user’s next request.
Making Your MySQL Database Secure
Security is important, especially when you begin connecting your MySQL database toyour website.The following sections explain the precautions you ought to take to pro-
tect your database.
MySQL from the Operating System’s Point of View
Running the MySQL server ( mysqld ) as root is a bad idea if you are running a Unix-like
operating system. Doing this gives a MySQL user with a full set of privileges the right toread and write files anywhere in the operating system.This is an important point, easily
overlooked, which was famously used to hack Apache’s website. (Fortunately, the crackers
were “white hats” [good guys], and their only action was to tighten up security.)
Setting up a MySQL user specifically for the purpose of running 
mysqld is a good
idea. In addition, you can then make the directories (where the physical data is stored)accessible only by the MySQL user. In many installations, the server is set up to run asuserid mysql, in the mysql group.
You should also ideally set up your MySQL server behind your firewall.This way, you
can stop connections from unauthorized machines. Check to see whether you can con-nect from outside to your server on port number 3306.This is the default port MySQLruns on and should be closed on your firewall.
Passwords
Make sure that all your users have passwords (especially root!) and that they are well
chosen and regularly changed, as with operating system passwords.The basic rule toremember here is that passwords that are or contain words from a dictionary are a bad
idea. Combinations of letters and numbers are best.15 6728 CH12  9/2/04  1:24 PM  Page 291
292 Chapter 12 Advanced MySQL Administration
If you are going to store passwords in script files, make sure only the user whose pass-
word is stored can see that script.
PHP scripts that are used to connect to the database need access to the password for
that user.This can be done reasonably securely by putting the login and password in afile called, for example,
dbconnect.php ,that you then include when required.This script
can be carefully stored outside the web document tree and made accessible only to theappropriate user.
Remember that if you put these details in a file with 
.inc or some other extension
in the web tree, you must be careful to check that your web server knows these filesmust be interpreted as PHP so that the details cannot be viewed in a web browser.
Don’t store passwords in plain text in your database. MySQL passwords are not stored
that way, but commonly in web applications, you additionally want to store websitemembers’ login names and passwords.Y ou can encrypt passwords (one way) usingMySQL’s 
SHA1() function. Remember that if you insert a password in this format when
you run SELECT (to log in a user), you will need to use the same function again to check
the password a user has typed.
You will use this functionality when you implement the projects in Part V ,“Building
Practical PHP and MySQL Projects.”
User Privileges
Knowledge is power. Make sure that you understand MySQL’s privilege system and theconsequences of granting particular privileges. Don’t grant more privileges to any userthan she needs.Y ou should check them by looking at the grant tables.
In particular, don’t grant the 
PROCESS ,FILE,SHUTDOWN ,and RELOAD privileges to any
user other than an administrator unless absolutely necessary.The PROCESS privilege can
be used to see what other users are doing and typing, including their passwords.The
FILE privilege can be used to read and write files to and from the operating system
(including, say, /etc/password on a Unix system).
The GRANT privilege should also be granted with caution because it allows users to
share their privileges with others.
Make sure that when you set up users, you grant them access only from the hosts that
they will be connecting from. If you have jane@localhost as a user, that’s fine, but plain
jane is pretty common and could log in from anywhere—and she might not be the
jane you think she is.Avoid using wildcards in hostnames for similar reasons.
You can further increase security by using IPs rather than domain names in your
host table.This way, you can avoid problems with errors or crackers at your DNS.Y ou
can enforce this by starting the MySQL daemon with the --skip-name-resolve
option, which means that all host column values must be either IP addresses or localhost.15 6728 CH12  9/2/04  1:24 PM  Page 292
293 Getting More Information About Databases
You should also prevent nonadministrative users from having access to the mysqlad-
minprogram on your web server. Because this program runs from the command line,
access to it is an issue of operating system privilege.
Web Issues
Connecting your MySQL database to the Web raises some special security issues.
It’s not a bad idea to start by setting up a special user just for the purpose of web
connections.This way, you can give him the minimum privilege necessary and not grant,for example,
DROP,ALTER ,or CREATE privileges to that user.Y ou might grant SELECT only
on catalog tables and INSERT only on order tables.Again, this is an illustration of how
to use the principle of least privilege.
Caution
In the preceding chapter, we described using PHP’s addslashes() and stripslashes() functions
to get rid of any problematic characters in strings. It’s important to remember to do this and to do a generaldata cleanup before sending anything to MySQL. You might remember using the doubleval() function
to check that the numeric data was really numeric. Forgetting this is a common error; people remember touse addslashes() but not to check numeric data.
You should always check all data coming in from a user. Even if your HTML form con-
sists of select boxes and radio buttons, someone might alter the URL to try to crackyour script. Checking the size of the incoming data is also worthwhile.
If users are typing in passwords or confidential data to be stored in your database,
remember that it will be transmitted from the browser to the server in plain text unless
you use Secure Sockets Layer (SSL).We discuss using SSL in more detail later in this
book.
Getting More Information About Databases
So far, we’ve used SHOW and DESCRIBE to find out what tables are in the database and
what columns are in them. In the following sections, we briefly look at other ways theycan be used and at the use of the 
EXPLAIN statement to get more information about how
a SELECT operation is performed.
Getting Information with SHOW
Previously, you used
show tables;
to get a list of tables in the database.15 6728 CH12  9/2/04  1:24 PM  Page 293
294 Chapter 12 Advanced MySQL Administration
The statement
show databases;
displays a list of available databases.Y ou can then use the SHOW TABLES statement to see a
list of tables in one of those databases:
show tables from books;
When you use SHOW TABLES without specifying a database, it defaults to the one in use.
When you know what the tables are, you can get a list of the columns:
show columns from orders from books;
If you leave off the database name, the SHOW COLUMNS statement will default to the data-
base currently in use.Y ou can also use the table.column notation:
show columns from books.orders;
One other useful variation of the SHOW statement can be used to see what privileges a
user has. For example, if you run
show grants for bookorama;
you get the following output:
+-----------------------------------------------------------------------+
| Grants for bookorama@%                                                |+-----------------------------------------------------------------------+| GRANT USAGE ON *.* TO ‘bookorama ’@’%’ |
| IDENTIFIED BY PASSWORD ‘*1ECE648641438A28E1910D0D7403C5EE9E8B0A85 ’|
| GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER      || ON `books`.* TO ‘bookorama ’@’%’ |
+-----------------------------------------------------------------------+
The GRANT statements shown are not necessarily the ones that were executed to give
privileges to a particular user, but rather summary equivalent statements that would produce the user’s current level of privilege.
Note
The SHOW GRANTS statement was added in MySQL version 3.23.4. If you have an earlier version, this
statement won’t work.
Many other variations of the SHOW statement can be used as well.A summary of all
the variations is shown in Table 12.6.15 6728 CH12  9/2/04  1:24 PM  Page 294
295 Getting More Information About DatabasesTable 12.6SHOW Statement Syntax
Variation Description
SHOW DATABASES [LIKE database ] Lists available databases, optionally with names like database .
SHOW [OPEN] TABLES [FROM database ] Lists tables from the database currently in use, or from the database called database if specified, optionally with table names 
[LIKE table] like table .
SHOW COLUMNS FROM table[FROM database ] Lists all the columns in a particular table from the database currently in use, or from the database specified, optionally with 
[LIKE column] column names like column .You might use SHOW FIELDS instead of SHOW COLUMNS .
SHOW INDEX FROM table[FROM database ] Shows details of all the indexes on a particular table from the database currently in use, or from the database called database if
specified.Y ou might use SHOW KEYS instead.
SHOW STATUS [LIKE status_item ] Gives information about a number of system items, such as the number of threads running.The LIKE clause is used to match
against the names of these items, so, for example, ‘Thread%’matches the items ‘Threads_cached ’,
‘Threads_connected ’,and ‘Threads_running ’.
SHOW [GLOBAL|SESSION] VARIABLES Displays the names and values of the MySQL system variables, such as the version number.The LIKE clause can be used to
[LIKE variable_name ] match against them in a fashion similar to SHOW STATUS .
SHOW [FULL] PROCESSLIST Displays all the running processes in the system—that is, the queries that are currently being executed. Most users will see thei r
own threads, but if they have the PROCESS privilege, they can see everybody’s processes—including passwords if they are in
queries.The queries are truncated to 100 characters by default. Using the optional keyword FULL displays the full queries.
SHOW TABLE STATUS [FROM database ] Displays information about each of the tables in the database currently being used, or the database called database if it is 
[LIKE database ] specified, optionally with a wildcard match.This information includes the table type and the time each table was last updated.
SHOW GRANTS FOR user Shows the GRANT statements required to give the user specified in user his current level of privilege.
SHOW PRIVILEGES Shows the different privileges that the server supports.
SHOW CREATE DATABASE db Shows a CREATE DATABASE statement that would create the specified database.
SHOW CREATE TABLE tablename Shows a CREATE TABLE statement that would create the specified table.
SHOW [STORAGE] ENGINES Shows the storage engines that are available in this installation and which is the default. (We discuss storage engines further in
Chapter 13,“Advanced MySQL Programming.”)
SHOW INNODB STATUS Shows data about the current state of the InnoDB storage engine.
SHOW [BDB] LOGS Shows information about log files for the BDB storage engine.
SHOW WARNINGS [LIMIT [ offset,] row_count ] Shows any errors, warnings, or notices generated by the last statement that was executed.
SHOW ERRORS [LIMIT [ offset,] row_count ] Shows only the errors generated by the last statement that was executed.15 6728 CH12  9/2/04  1:24 PM  Page 295
296 Chapter 12 Advanced MySQL Administration
Getting Information About Columns with DESCRIBE
As an alternative to the SHOW COLUMNS statement, you can use the DESCRIBE statement,
which is similar to the DESCRIBE statement in Oracle (another RDBMS).The basic syn-
tax for it is
DESCRIBE table[column];
This command gives information about all the columns in the table or a specific column
if column is specified.Y ou can use wildcards in the column name if you like.
Understanding How Queries Work with EXPLAIN
The EXPLAIN statement can be used in two ways. First, you can use
EXPLAIN table;
This command gives similar output to DESCRIBE table or SHOW COLUMNS FROM table .
The second and more interesting way you can use EXPLAIN allows you to see exactly
how MySQL evaluates a SELECT query.T o use it this way, just put the word EXPLAIN in
front of a SELECT statement.
You can use the EXPLAIN statement when you are trying to get a complex query to
work and clearly haven’t got it quite right, or when a query is taking a lot longer to
process than it should. If you are writing a complex query, you can check this in advanceby running the 
EXPLAIN command before you actually run the query.With the output
from this statement, you can rework your SQL to optimize it if necessary. It’s also ahandy learning tool.
For example, try running the following query on the Book-O-Rama database:
explain
select customers.namefrom customers, orders, order_items, bookswhere customers.customerid = orders.customeridand orders.orderid = order_items.orderidand order_items.isbn = books.isbnand books.title like ‘%Java%’;
This query produces the following output. (Note that we are displaying this output ver-
tically because the table rows are too wide to fit in this book.Y ou can get this format byending your query with 
\Ginstead of the semicolon.)
*************************** 1. row ***************************
id: 1
select_type: SIMPLE
table: books
type: ALL15 6728 CH12  9/2/04  1:24 PM  Page 296
297 Getting More Information About Databases
possible_keys: PRIMARY
key: NULL
key_len: NULL
ref: NULL
rows: 4
Extra: Using where
*************************** 2. row ***************************
id: 1
select_type: SIMPLE
table: order_items
type: index
possible_keys: PRIMARY
key: PRIMARY
key_len: 17
ref: NULL
rows: 4
Extra: Using where; Using index
*************************** 3. row ***************************
id: 1
select_type: SIMPLE
table: orders
type: eq_ref
possible_keys: PRIMARY
key: PRIMARY
key_len: 4
ref: books.order_items.orderid
rows: 1
Extra:
*************************** 4. row ***************************
id: 1
select_type: SIMPLE
table: customers
type: eq_ref
possible_keys: PRIMARY
key: PRIMARY
key_len: 4
ref: books.orders.customerid
rows: 1
Extra:
This output might look confusing at first, but it can be very useful. Let’s look at the
columns in this table one by one.
The first column, id,gives the ID number of the SELECT statement within the query
that this row refers to.15 6728 CH12  9/2/04  1:24 PM  Page 297
298 Chapter 12 Advanced MySQL Administration
The column select_type explains the type of query being used.The set of values
this column can have is shown in Table 12.7.
Table 12.7 Possible Select Types as Shown in Output from EXPLAIN
Type Description
SIMPLE Plain old SELECT ,as in this example
PRIMARY Outer (first) query where subqueries and unions are used
UNION Second or later query in a union
DEPENDENT UNION Second or later query in a union, dependent on the primary query
SUBQUERY Inner subquery
DEPENDENT SUBQUERY Inner subquery, dependent on the primary query (that is, a correlat-
ed subquery)
DERIVED Subquery used in FROM clause
The column table just lists the tables used to answer the query. Each row in the result
gives more information about how that particular table is used in this query. In this case,
you can see that the tables used are orders ,order_items ,customers ,and books .( Y o u
know this already by looking at the query.)
The type column explains how the table is being used in joins in the query.The set
of values this column can have is shown in Table 12.8.These values are listed in orderfrom fastest to slowest in terms of query execution.The table gives you an idea of howmany rows need to be read from each table to execute a query.
Table 12.8 Possible Join Types as Shown in Output from EXPLAIN
Type Description
const or system The table is read from only once.This happens when the table has
exactly one row.The type system is used when it is a system table, and
the type const otherwise.
eq_ref For every set of rows from the other tables in the join, you read one
row from this table.This type is used when the join uses all the parts of
the index on the table, and the index is UNIQUE or is the primary key.
ref For every set of rows from the other tables in the join, you read a set of
table rows that all match.This type is used when the join cannot choosea single row based on the join condition—that is, when only part of thekey is used in the join, or if it is not 
UNIQUE or a primary key.
ref_or_null This is like a refquery, but MySQL also looks for rows that are NULL .
(This type is used mostly in subqueries.)15 6728 CH12  9/2/04  1:24 PM  Page 298
299 Getting More Information About Databases
index_merge A specific optimization, the Index Merge, has been used.
unique_subquery This join type is used to replace reffor some INsubqueries where
one unique row is returned.
index_subquery This join type is similar to unique_subquery but is used for indexed
nonunique subqueries.
range For every set of rows from the other tables in the join, you read a set of
table rows that fall into a particular range.
index The entire index is scanned.
ALL Every row in the table is scanned.
In the previous example, you can see that two of the tables are joined using eq_ref
(orders and customers ), one is joined using index (order_items ), and the other one
(books ) is joined using ALL—that is, by looking at every single row in the table.
The rows column backs this up: It lists (roughly) the number of rows of each table
that has to be scanned to perform the join.Y ou can multiply these numbers together toget the total number of rows examined when a query is performed.Y ou multiply thesenumbers because a join is like a product of rows in different tables. Check out Chap-
ter 10,“Working with Y our MySQL Database,” for details. Remember that this is thenumber of rows examined, not the number of rows returned, and that it is only an esti-
mate; MySQL can’t know the exact number without performing the query.
Obviously, the smaller you can make this number, the better.At present, you have a
negligible amount of data in the database, but when the database starts to increase in size,this query would increase in execution time.We return to this matter shortly.
The 
possible_keys column lists, as you might expect, the keys that MySQL might
use to join the table. In this case, you can see that the possible keys are all PRIMARY keys.
The keycolumn is either the key from the table MySQL actually used or NULL if no
key was used. Notice that, although there is a possible PRIMARY key for the books table, it
was not used in this query.
The key_len column indicates the length of the key used.Y ou can use this number
to tell whether only part of a key was used.The key length is relevant when you havekeys that consist of more than one column. In this case, where the keys were used, the
full key was used.
The 
refcolumn shows the columns used with the key to select rows from the table.
Finally, the Extra column tells you any other information about the way the join was
performed.The possible values you might see in this column are shown in Table 12.9.Table 12.8 Possible Join Types as Shown in Output from EXPLAIN
Type Description15 6728 CH12  9/2/04  1:24 PM  Page 299
300 Chapter 12 Advanced MySQL Administration
Table 12.9 Possible Values for Extra Column as Shown in Output from EXPLAIN
Value Meaning
Distinct After the first matching row is found, MySQL stops trying to 
find rows.
Not exists The query has been optimized to use LEFT JOIN .
Range checked for For each row in the set of rows from the other tables in the
each record join, MySQL tries to find the best index to use, if any.
Using filesort Two passes are required to sort the data. (This operation obviously
takes twice as long.)
Using index All information from the table comes from the index; that is, therows are not actually looked up.
Using temporary A temporary table needs to be created to execute this query.
Using where A WHERE clause is being used to select rows.
You can fix problems you spot in the output from EXPLAIN in several ways. First, you
can check column types and make sure they are the same.This applies particularly tocolumn widths. Indexes can’t be used to match columns if they have different widths.You can fix this problem by changing the types of columns to match or by building this
in to your design from the start.
Second, you can tell the join optimizer to examine key distributions and therefore
optimize joins more efficiently using the 
myisamchk utility or the ANALYZE TABLE state-
ment, which are equivalent.Y ou can invoke this utility by typing
myisamchk --analyze pathtomysqldatabase /table
You can check multiple tables by listing them all on the command line or by using
myisamchk --analyze pathtomysqldatabase /*.MYI
You can check all tables in all databases by running the following:
myisamchk --analyze pathtomysqldatadirectory /*/*.MYI
Alternatively, you can list the tables in an ANALYZE TABLE statement within the MySQL
monitor:
analyze table customers, orders, order_items, books;
Third, you might want to consider adding a new index to the table. If this query is a)slow and b) common, you should seriously consider this fix. If it’s a one-off query thatyou’ll never use again, such as an obscure report requested once, this technique won’t be
worth the effort because it will slow down other things.We look at how to use this
technique in the next section.15 6728 CH12  9/2/04  1:24 PM  Page 300
301 Optimizing Your Database
Speeding Up Queries with Indexes
If the possible_keys column from an EXPLAIN contains some NULL values, you might
be able to improve the performance of your query by adding an index to the table inquestion. If the column you are using in your 
WHERE clause is suitable for indexing, you
can create a new index for it using ALTER TABLE like this:
ALTER TABLE tableADD INDEX ( column);
Optimizing Your Database
In addition to using the previous query optimization tips, you can do quite a few things
to generally increase the performance of your MySQL database.
Design Optimization
Basically, you want everything in your database to be as small as possible.Y ou can achievethis result, in part, with a decent design that minimizes redundancy.Y ou can also achieveit by using the smallest possible data type for columns.Y ou should also minimize 
NULLs
wherever possible and make your primary key as short as possible.
Avoid variable length columns if at all possible (such as VARCHAR ,TEXT,and BLOB). If
your tables have fixed-length fields, they will be faster to use but might take up a little
more space.
Permi ssions
In addition to using the suggestions mentioned in the previous section on EXPLAIN ,y o u
can improve the speed of queries by simplifying your permissions. Earlier, we discussedthe way that queries are checked with the permission system before being executed.Thesimpler this process is, the faster your query will run.
Table Optimization
If a table has been in use for a period of time, data can become fragmented as updates
and deletions are processed.This fragmentation increases the time taken to find things inthis table.Y ou can fix this problem by using the statement
OPTIMIZE TABLE tablename ;
or by typing
myisamchk -r table
at the command prompt.
You can also use the myisamchk utility to sort a table index and the data according to
that index, like this:
myisamchk --sort-index --sort-records=1 pathtomysqldatadirectory /*/*.MYI15 6728 CH12  9/2/04  1:24 PM  Page 301
302 Chapter 12 Advanced MySQL Administration
Using Indexes
You should use indexes where required to speed up your queries. Keep them simple and
don’t create indexes that are not being used by your queries.Y ou can check whichindexes are being used by running 
EXPLAIN ,as shown previously.
Using Default Values
Wherever possible, you should use default values for columns and insert data only if it
differs from the default.This way, you reduce the time taken to execute the INSERT state-
ment.
Other Tips
You can make many other minor tweaks to improve performance in particular situations
and address particular needs.The MySQL website offers a good set of additional tips.Y oucan find it at http://www.mysql.com.
Backing Up Your MySQL Database
In MySQL, there are several ways to do a backup.The first way is to lock the tableswhile you copy the physical files, using a 
LOCK TABLES command with the following
syntax:
LOCK TABLES table lock_type [, table lock_type ...]
Each table should be the name of a table, and the lock type should be either READ or
WRITE .For a backup, you only need a read lock.Y ou need to execute a FLUSH TABLES;
command to make sure any changes to your indexes have been written to disk before
performing a backup.
Users and scripts can still run read-only queries while you make your backup. If you
have a reasonable volume of queries that alter the database, such as customer orders, thissolution is not practical.
The second, and superior, method is using the 
mysql_dump command. Usage is from
the operating system command line, and is typically something such as
mysqldump --opt --all-databases > all.sql
This command dumps a set of all the SQL required to reconstruct the database to thefile called 
all.sql .
You should then stop the mysqld process for a moment and restart it with the 
--log-bin[= logfile]option.The updates stored in the log file give you the changes
made since your dump. (Obviously, you should back up the log files in any normal filebackup.)
A third method is using the 
mysqlhotcopy script.Y ou can invoke it with
mysqlhotcopy database /path/for/backup15 6728 CH12  9/2/04  1:24 PM  Page 302
303 Implementing Replication
You should then follow the process of starting and stopping the database as described
earlier.
A final method of backup (and failover) is to maintain a replicated copy of the data-
base. Replication is discussed later in this chapter.
Restoring Your MySQL Database
If you need to restore your MySQL database, there are, again, a couple of approaches. Ifthe problem is a corrupted table, you can run
myisamchk with the -r(repair) option.
If you used the first method from the preceding section for backup, you can copy the
data files back into the same locations in a new MySQL installation.
If you used the second method for backup, there are a couple of steps. First, you need
to run the queries in your dump file.This step reconstructs the database up to the pointwhere you dumped that file. Second, you need to update the database to the point storedin the binary log.Y ou can do this by running the command
mysqlbinlog hostname -bin.[0-9]* | mysql
More information about the process of MySQL backup and recovery can be found at
the MySQL website at http://www.mysql.com.
Implementing Replication
Replication is a technology that allows you to have multiple database servers serving the same data.This way, you can load share and improve system reliability; if one servergoes down, the others can still be queried. Once set up, it can also be used for makingbackups.
The basic idea is to have a master server and add to it a number of slaves.Each of the
slaves mirrors the master.When you initially set up the slaves, you copy over a snapshotof all the data on the master at that time.After that, slaves request updates from the mas-ter.The master transmits details of the queries that have been executed from its binarylog, and the slaves reapply them to the data.
The usual way of using this setup is to apply write queries to the master and read
queries to the slaves.This is enforced by your application logic. More complex architec-tures are possible, such as having multiple masters, but we will only consider the setupfor the typical example.
You need to realize that slaves usually do not have data that is as up to date as on the
master.This occurs in any distributed database.
To begin setting up a master and slave architecture, you need to make sure binary
logging is enabled on the master. Enabling binary logging is discussed in Appendix A,“Installing PHP and MySQL.”15 6728 CH12  9/2/04  1:24 PM  Page 303
304 Chapter 12 Advanced MySQL Administration
You need to edit your my.ini or my.cnf file on both the master and slave servers.
On the master, you need the following settings:
[mysqld]
log-binserver-id=1
The first setting turns on binary logging (so you should already have this one; if not, add
it in now).The second setting gives your master server a unique ID. Each of the slavesalso needs an ID, so you need to add a similar line to the 
my.ini /my.cnf files on each of
the slaves. Make sure the numbers are unique! For example, your first slave could have
server-id=2 ;the next,server-id=3 ;and so on.
Setting Up the Master
On the master, you need to create a user for slaves to connect as.There is a special privi-
lege level for slaves called replication slave .Depending on how you plan to do the initial
data transfer, you may need to temporarily grant some additional privileges.
In most cases, you will use a database snapshot to transfer the data, and in this case,
only the special replication slave privilege is needed. If you decide to use the LOAD DATA
FROM MASTER command to transfer data (you learn about it in the next section), this user
will also need the RELOAD ,SUPER ,and SELECT privileges, but only for initial setup.As per
the principle of least privilege, discussed in Chapter 9, you should revoke these otherprivileges after the system is up and running.
Create a user on the master.Y ou can call it anything you like and give it any password
you like, but you should make a note of the username and password you choose. In our
example, we call this user 
rep_slave :
grant replication slave
on *.*to ‘rep_slave ’@’%’identified by ‘password ’;
Obviously, you should change the password to something else.
Performing the Initial Data Transfer
You can transfer the data from master to slave in several ways.The simplest is to set up
the slaves (described in the next section) and then run a LOAD DATA FROM MASTER state-
ment.The problem with this approach is that it will lock the tables on the master whilethe data is being transferred, and this can take some time, so we do not recommend it.(Y ou can use this option only if you are using MyISAM tables.)
Generally, it is better to take a snapshot of the database at the current time.Y ou can
do this by using the procedures described for taking backups elsewhere in this chapter.You should first flush the tables with the following statement:
flush tables with read lock;15 6728 CH12  9/2/04  1:24 PM  Page 304
305 Implementing Replication
The reason for the read lock is that you need to record the place the server is up to in
its binary log when the snapshot was taken.Y ou can do this by executing this statement:
show master status;
You should see output similar to the following from this statement:
+----------------------+----------+--------------+------------------+
| File                 | Position | Binlog_Do_DB | Binlog_Ignore_DB |+----------------------+----------+--------------+------------------+| laura-ltc-bin.000001 |       95 |              |                  |+----------------------+----------+--------------+------------------+
Note the File and Position; you will need this information to set up the slaves.
Now take your snapshot and unlock the tables with the following statement:
unlock tables;
If you are using InnoDB tables, the easiest way is to use the InnoDB Hot Backup tool,available from Innobase Oy at http://www.innodb.com.This is not Free Software, so
there is a license cost involved.Alternatively, you can follow the procedure describedhere and, before unlocking the tables, shut down the MySQL server and copy the entiredirectory for the database you want to replicate before restarting the server and unlock-ing the tables.
Setting Up the Slave or Slaves
You have two optionsfor setting up the slave or slaves. If you have taken a snapshot of
your database, begin by installing it on the slave server.
Next, run the following queries on your slave:
change master to
master-host= ’server’,
master-user= ’user’,
master-password= ’password ’,
master-log-file= ’logfile’,
master-log-pos= logpos;
start slave;
You need to fill in the data shown in italics.The server is the name of the master server.
The user and password come from the GRANT statement you ran on the master server.
The logfile and logpos come from the output of the SHOW MASTER STATUS statement
you ran on the master server.
You should now be up and running.
If you did not take a snapshot, you can load the data from the master after running
the preceding query by executing the following statement:
load data from master;15 6728 CH12  9/2/04  1:24 PM  Page 305
306 Chapter 12 Advanced MySQL Administration
Further Reading
In these chapters on MySQL, we have focused on the uses and parts of the system most
relevant to web development and to linking MySQL with PHP . If you want to know
more about MySQL administration, you can visit the MySQL website athttp://www.mysql.com.
You might also want to consult the MySQL Press book MySQL Administrator’s Guide ,
or Paul Dubois’ book MySQL,Third Edition ,available from Developer’s Library.
Next
In the next chapter,“Advanced MySQL Programming,” we look at some advanced fea-
tures of MySQL that are useful when writing web applications, such as how to use thedifferent storage engines, transactions, and stored procedures.15 6728 CH12  9/2/04  1:24 PM  Page 306
13
Advanced MySQL Programming
INTHIS CHAPTER ,YOULEARN ABOUT SOME more advanced MySQL topics, including
table types, transactions, and stored procedures.Key topics covered in this chapter include
nThe LOAD DATA INFILE statement
nStorage engines
nTransactions
nForeign keys
nStored procedures
The LOAD DATA INFILE Statement
One useful feature of MySQL that we have not yet discussed is the LOAD DATA INFILE
statement.Y ou can use it to load table data in from a file. It executes very quickly.
This flexible command has many options, but typical usage is something like the following:
LOAD DATA INFILE “newbooks.txt ”INTO TABLE books;
This line reads row data from the file newbooks.txt into the table books .By default,
data fields in the file must be separated by tabs and enclosed in single quotation marks,and each row must be separated by a newline (
\n). Special characters must be escaped
out with a slash ( \).All these characteristics are configurable with the various options of
the LOAD statement; see the MySQL manual for more details.
To use the LOAD DATA INFILE statement, a user must have the FILE privilege dis-
cussed in Chapter 9,“Creating Y our Web Database.”16 6728 ch13  9/2/04  1:23 PM  Page 307
308 Chapter 13 Advanced MySQL Programming
Storage Engines
MySQL supports a number of different storage engines, sometimes also called table types .
This means that you have a choice about the underlying implementation of the tables.Each table in your database can use a different storage engine, and you can easily convertbetween them.
You can choose a table type when you create a table by using
CREATE TABLE tableTYPE=type....
The possible table types are
nMyISAM —This type is the default and what we have used so far in the book. It
is based on the traditional ISAM type, which stands for Indexed Sequential Access
Method ,a standard method for storing records and files. MyISAM adds a number
of advantages over the ISAM type. Compared to the other storage engines,MyISAM has the most tools for checking and repairing tables. MyISAM tables canbe compressed, and they support full text searching.They are not transaction safeand do not support foreign keys.
nISAM —As described in the preceding bullet.The use of ISAM tables is depre-
cated.
nMEMORY (previously known as HEAP )—Tables of this type are stored in mem-
ory, and their indexes are hashed.This makes MEMORY tables extremely fast, but,in the event of a crash, your data will be lost.These characteristics make MEMO-RY tables ideal for storing temporary or derived data.Y ou should specify 
MAX_ROWS
in the CREATE TABLE statement; otherwise, these tables can hog all your memory.
Also, they cannot have BLOB,TEXT,or AUTO INCREMENT columns.
nMERGE —These tables allow you to treat a collection of MyISAM tables as a sin-
gle table for the purpose of querying.This way, you can work around maximumfile size limitations on some operating systems.
nBDB —These tables are transaction safe; that is, they provide COMMIT and 
ROLLBACK capabilities.They are slower to use than the MyISAM tables, but they
obviously give all the advantages of using transactions.These tables are based onthe Berkeley DB.
nInnoDB —These tables are also transaction safe, and the same riders apply as for
BDB.They also support foreign keys. InnoDB tables are faster and have more fea-tures than BDB tables, so if you need a transaction-safe storage engine, this is theone that we recommend.
In most web applications, you will generally use either MyISAM or InnoDB tables or a
mix of the two.
You should use MyISAM when you are using a large number of 
SELECT s or INSERT s
on a table (not both mixed together) because it is the fastest at doing this. For many webapplications such as catalogs, MyISAM is the best choice.Y ou should also use MyISAM if16 6728 ch13  9/2/04  1:23 PM  Page 308
309 Transactions
you need full text-searching capabilities.Y ou should use InnoDB when transactions are
important, such as for tables storing financial data or for situations in which INSERT s and
SELECT s are being interleaved, such as online message boards or forums.
You can use MEMORY tables for temporary tables or to implement views, and
MERGE tables if you need to deal with very large MyISAM tables.
You can change the type of a table after creation with an ALTER TABLE statement, as 
follows:
alter table orders type=innodb;
alter table order_items type=innodb;
We used MyISAM tables through most of this part of the book.We will now spend
some time focusing on the use of transactions and ways they are implemented inInnoDB tables.
Transactions
Transactions are mechanisms for ensuring database consistency, especially in the event of
error or server crash. In the following sections, you learn what transactions are and howto implement them with InnoDB.
Understanding Transaction Definitions
First, let’s define the term transaction .A transaction is a query or set of queries guaranteed
either to be completely executed on the database or not executed at all.The database istherefore left in a consistent state whether or not the transaction completed.
To see why this capability might be important, consider a banking database. Imagine
the situation in which you want to transfer money from one account to another.Thisaction involves removing the money from one account and placing it in another, whichwould involve at least two queries. It is vitally important that either these two queries
are both executed or neither is executed. If you take the money out of one account andthe power goes out before you put it into another account, what happens? Does themoney just disappear?
You may have heard the expression ACID compliance .ACID is a way of describing
four requirements that transactions should satisfy:
nAtomicity —A transaction should be atomic; that is, it should either be complete-
ly executed or not executed.
nConsistency —A transaction should leave the database in a consistent state.
nIsolation —Uncompleted transactions should not be visible to other users of the
database; that is, until transactions are complete, they should remain isolated.
nDurability —Once written to the database, a transaction should be permanent or
durable.16 6728 ch13  9/2/04  1:23 PM  Page 309
310 Chapter 13 Advanced MySQL Programming
A transaction that has been permanently written to the database is said to be committed .A
transaction that is not written to the database—so that the database is reset to the state itwas in before the transaction began—is said to be rolled back .
Using Transactions with InnoDB
By default, MySQL runs in autocommit mode .This means that each statement you exe-
cute is immediately written to the database (committed). If you are using a transaction-safe table type, more than likely you don’t want this behavior.
To turn autocommit off in the current session, type
set autocommit=0;
If autocommit is on, you need to begin a transaction with the statement
start transaction;
If it is off, you do not need this command because a transaction will be started automati-
cally for you when you enter an SQL statement.
After you have finished entering the statements that make up a transaction, you can
commit it to the database by simply typing
commit;
If you have changed your mind, you can revert to the previous state of the database bytyping
rollback;
Until you have committed a transaction, it will not be visible to other users or in othersessions.
Let’s look at an example. Execute the 
ALTER TABLE statements in the previous section
of the chapter on your books database, as follows, if you have not already done so:
alter table orders type=innodb;
alter table order_items type=innodb;
These statements convert two of the tables to InnoDB tables. (Y ou can convert them
back later if you want by running the same statement but with type=MyISAM .)
Now open two connections to the books database. In one connection, add a new
order record to the database:
insert into orders values
(5, 2, 69.98, ‘2004-06-18 ’);
insert into order_items values(5, ‘0-672-31697-8 ’, 1);
Now check that you can see the new order:
select * from orders where orderid=5;16 6728 ch13  9/2/04  1:23 PM  Page 310
311 Foreign Keys
You should see the order displayed:
+---------+------------+--------+------------+
| orderid | customerid | amount | date       |+---------+------------+--------+------------+|       5 |          2 |  69.98 | 2004-06-18 |+---------+------------+--------+------------+
Leaving this connection open, go to your other connection and run the same select
query.Y ou should not be able to see the order:
Empty set (0.00 sec)
(If you can see it, most likely you forgot to turn off autocommitting. Check this and that
you converted the table in question to the InnoDB format.) The reason is that the trans-
action has not yet been committed. (This is a good illustration of transaction isolation inaction.)
Now go back to the first connection and commit the transaction:
commit;
You should now be able to retrieve the row in your other connection.
Foreign Keys
InnoDB also supports foreign keys.Y ou may recall that we discussed the concept of for-
eign keys in Chapter 8,“Designing Y our Web Database.”When you use MyISAM tables,you have no way to enforce foreign keys.
Consider, for example, inserting a row into the order_items table.Y ou need to include
a valid 
orderid .Using MyISAM, you need to ensure the validity of the orderid you
insert somewhere in your application logic. Using foreign keys in InnoDB, you can letthe database do the checking for you.
How do you set this up? T o create the table initially using a foreign key, you could
change the table DDL statement as follows:
create table order_items
( orderid int unsigned not null references orders(orderid),
isbn char(13) not null,quantity tinyint unsigned,primary key (orderid, isbn)
) type=InnoDB;
We added the words references orders(orderid) after orderid .This means this col-
umn is a foreign key that must contain a value from the orderid column in the orders
table.
Finally, we added the table type type=InnoDB at the end of the declaration.This is
required for the foreign keys to work.16 6728 ch13  9/2/04  1:23 PM  Page 311
312 Chapter 13 Advanced MySQL Programming
You can also make these changes to the existing table using ALTER TABLE statements,
as follows:
alter table order_items type=InnoDB;
alter table order_itemsadd foreign key (orderid) references orders(orderid);
To see that this change has worked, you can try to insert a row with an orderid for
which there is no matching row in the orders table:
insert into order_items values
(77, ‘0-672-31697-8 ’, 7);
You should receive an error similar to
ERROR 1216 (23000): Cannot add or update a child row: 
a foreign key constraint fails
Stored Procedures
MySQL5, currently in alpha at the time of writing, introduces stored procedures .This ver-
sion should be the production version in 2005. In the following sections, we preview thestored procedures feature, which will be the major new feature in version 5.0.
A stored procedure is a programmatic function that is created and stored within
MySQL. It can consist of SQL statements and a number of special control structures. Itcan be useful when you want to perform the same function from different applicationsor platforms, or as a way of encapsulating functionality. Stored procedures in a databasecan be seen as analogous to an object-oriented approach in programming.They allowyou to control the way data is accessed.
Let’s begin by looking at a simple example.
Basic Example
Listing 13.1 shows the declaration of a stored procedure.
Listing 13.1 basic_stored_procedure.sql — Declaring a Stored Procedure
# Basic stored procedure example
delimiter //
create procedure total_orders (out total float)
BEGIN
select sum(amount) into total from orders;
END//
delimiter ;16 6728 ch13  9/2/04  1:23 PM  Page 312
313 Stored Procedures
Let’s go through this code line by line.
The first statement
delimiter //
changes the end-of-statement delimiter from the current value—typically a semicolonunless you have changed it previously—to a double forward slash.Y ou do this so that youcan use the semicolon delimiter within the stored procedure as you are entering thecode for it without MySQL trying to execute the code as you go.
The next line
create procedure total_orders (out total float)
creates the actual procedure.The name of this procedure is total_orders .It has a single
parameter called total ,which is the value you are going to calculate.The word OUT
indicates that this parameter is being passed out or returned.
Parameters can also be declared IN,meaning that a value is being passed into the pro-
cedure, or INOUT ,meaning that a value is being passed in but can be changed by the pro-
cedure.
The word float indicates the type of the parameter. In this case, you return a total of
all the orders in the orders table.The type of the orders column is float ,so the type
returned is also float .The acceptable data types map to the available column types.
If you want more than one parameter, you can provide a comma-separated list of
parameters as you would in PHP .
The body of the procedure is enclosed within the BEGIN and ENDstatements.They are
analogous to the curly braces within PHP ( {})because they delimit a statement block.
In the body, you simply run a SELECT statement.The only difference from normal is
that you include the clause into total to load the result of the query into the total
parameter.
After you have declared the procedure, you return the delimiter back to being a semi-
colon with the line
delimiter ;
After the procedure has been declared, you can call it using the call keywor d, as 
follows:
call total_orders(@t);
This statement calls the total orders and passes in a variable to store the result.T o see theresult, you need to then look at the variable:
select @t;
The result should be similar to
+-----------------+
| @t              |+-----------------+| 289.92001152039 |+-----------------+16 6728 ch13  9/2/04  1:23 PM  Page 313
314 Chapter 13 Advanced MySQL Programming
In a way similar to creating a procedure, you can create a function.A function accepts
input parameters (only) and returns a single value. (At the time of writing, functionscould not reference tables, but this limitation should change before version 5.0 becomesthe production version.)
The basic syntax for this task is almost the same.A sample function is shown in
Listing 13.2.
Listing 13.2 basic_function.sql — Declaring a Stored Function
# Basic syntax to create a function
delimiter //create function add_tax (price float) returns float
return price*1.1;//
delimiter ;
As you can see, this example uses the keyword function instead of procedure .There are
a couple of other differences.
Parameters do not need to be specified as INor OUTbecause they are all IN,or input
parameters.After the parameter list, you can see the clause returns float .It specifies
the type of the return value.Again, this value can be any of the valid MySQL types.
You return a value using the return statement, much as you would in PHP .
Notice that this example does not use the BEGIN and ENDstatements.Y ou could use
them, but they are not required. Just as in PHP , if a statement block contains only onestatement, you do not need to mark the beginning and end of it.
Calling a function is somewhat different from calling a procedure.Y ou can call a
stored function in the same way you would call a built-in function. For example,
select add_tax(100);
This statement should return the following output:
+-------------+
| add_tax(100) |+-------------+|         110 |+-------------+
After you have defined procedures and functions, you can view the code used to define
them by using, for example,
show create procedure total_orders;
or
show create function addtax;16 6728 ch13  9/2/04  1:23 PM  Page 314
315 Stored Procedures
You can delete them with
drop procedure total_orders;
or
drop function add_tax;
Stored procedures come with the ability to use control structures, variables, DECLARE
handlers (like exceptions), and an important concept called cursors .We briefly look at
each of these in the following sections.
Local Variables
You can declare local variables within a begin...end block by using a declare state-
ment. For example, you could alter the add_tax function to use a local variable to store
the tax rate, as shown in Listing 13.3.
Listing 13.3 basic_function.sql — Declaring a Stored Function with Variables
# Basic syntax to create a function
delimiter //create function add_tax (price float) returns float
begin
declare tax float default 0.10;return price*(1+tax);
end//
delimiter ;
As you can see, you declare the variable using declare ,followed by the name of the
variable, followed by the type.The default clause is optional and specifies an initial value
for the variable. Y ou then use the variable as you would expect.
Cursors and Control Structures
Let’s consider a more complex example. For this example, you’ll write a stored proce-dure that works out which order was for the largest amount and returns the 
orderid .
(Obviously, you could calculate this amount easily enough with a single query, but thissimple example illustrates how to use cursors and control structures.) The code for thisstored procedure is shown in Listing 13.4.
Listing 13.4 control_structures_cursors.sql — Using Cursors and Loops to
Process a Resultset
# Procedure to find the orderid with the largest amount
# could be done with max, but just to illustrate stored procedure principles16 6728 ch13  9/2/04  1:23 PM  Page 315
316 Chapter 13 Advanced MySQL Programming
delimiter //
create procedure largest_order(out largest_id int)
begin
declare this_id int;declare this_amount float;declare l_amount float default 0.0;declare l_id int;
declare done int default 0;
declare continue handler for sqlstate ‘02000’set done = 1;
declare c1 cursor for select orderid, amount from orders;
open c1;
repeat
fetch c1 into this_id, this_amount;if not done then
if this_amount > l_amount then
set l_amount=this_amount;set l_id=this_id;
end if;
end if;
until done end repeat;
close c1;
set largest_id=l_id;
end
//
delimiter ;
This code uses control structures (both conditional and looping), cursors, and declare
handlers. Let’s consider it line by line.
At the start of the procedure, you declare a number of local variables for use within
the procedure.The variables this_id and this_amount store the values of orderid and
amount in the current row.The variables l_amount and l_id are for storing the largest
order amount and the corresponding ID. Because you will work out the largest amountby comparing each value to the current largest value, you initialize this variable to zero.
The next variable declared is 
done,initialized to zero ( false ).This variable is your
loop flag.When you run out of rows to look at, you set this variable to 1 ( true):
The line
declare continue handler for sqlstate ‘02000’set done = 1;Listing 13.4 Continued16 6728 ch13  9/2/04  1:23 PM  Page 316
317 Stored Procedures
is called a declare handler .It is similar to an exception in stored procedures.At the time of
writing, you could implement continue handlers and exit handlers. Continue handlers,like the one shown, take the action specified and then continue execution of the proce-dure. Exit handlers exit from the nearest 
begin...end block.
The next part of the declare handler specifies when the handler will be called. In this
case, it will be called when sqlstate ‘02000’is reached.Y ou may wonder what that
means because it seems very cryptic! This means it will be called when no rows arefound.Y ou process a resultset row by row, and when you run out of rows to process, thishandler will be called.Y ou could also specify 
FOR NOT FOUND equivalently. Other options
are SQLWARNING and SQLEXCEPTION .
The next thing is a cursor.A cursor is not dissimilar to an array; it retrieves a resultset
for a query (such as returned by mysqli_query() ) and allows you to process it a single
line at a time (as you would with, for example, mysqli_fetch_row() ). Consider this
cursor:
declare c1 cursor for select orderid, amount from orders;
This cursor is called c1.This is just a definition of what it will hold.The query will not
be executed yet.
The next line
open c1;
actually runs the query.T o obtain each row of data, you must run a fetch statement.Y ou
do this in a repeat loop. In this case, the loop looks like this:
repeat
...until done end repeat;
Note that the condition (until done) is not checked until the end. Stored procedures also
support while loops, of the form
while condition do
...end while;
There are also loop loops, of the form
loop...end loop
These loops have no built-in conditions but can be exited by means of a leave; state-
ment.
Note that there are no forloops.
Continuing with the example, the next line of code fetches a row of data:
fetch c1 into this_id, this_amount;16 6728 ch13  9/2/04  1:23 PM  Page 317
318 Chapter 13 Advanced MySQL Programming
This line retrieves a row from the cursor query.The two attributes retrieved by the
query are stored in the two specified local variables.
You check whether a row was retrieved and then compare the current loop amount
with the largest stored amount, by means of two IFstatements:
if not done then
if this_amount > l_amount then
set l_amount=this_amount;set l_id=this_id;
end if;
end if;
Note that variable values are set by means of the setstatement.
In addition to if...then ,stored procedures also support an if...then...else con-
struct with the following form:
if condition then
...[elseif condition then]
...[else]...
end if
There is also a case statement, which has the following form:
case value
when valuethen statement
[when valuethen statement ... ]
[else statement ]
end case
Back to the example, after the loop has terminated, you have a little cleaning up to do:
close c1;set largest_id=l_id;
The close statement closes the cursor.
Finally, you set the OUTparameter to the value you have calculated.Y ou cannot use
the parameter as a temporary variable, only to store the final value. (This usage is similarto some other programming languages, such as Ada.)
If you create this procedure as described here, you can call it as you did the other
procedure:
call largest_order(@l);
select @l;16 6728 ch13  9/2/04  1:23 PM  Page 318
319 Next
You should get output similar to the following:
+------+
| @l   |+------+| 3    |+------+
You can check for yourself that the calculation is correct.
Further Reading
In this chapter, we took a cook’s tour of the stored procedure functionality.Y ou can find
out more about stored procedures from the MySQL manual.Although not much is thereat the time of writing, no doubt the documentation will become more fleshed outbefore this version of MySQL becomes the production version.
For more information on 
LOAD DATA INFILE ,the different storage engines, and
stored procedures, consult the MySQL manual.
If you want to find out more about transactions and database consistency, we recom-
mend a good basic relational database text such as An Introduction to Database Systems by
C.J.Date.
Next
We have now covered the fundamentals of PHP and MySQL. In Chapter 14,“Running
an E-commerce Site,” we look at the e-commerce and security aspects of setting updatabase-backed websites.16 6728 ch13  9/2/04  1:23 PM  Page 319
16 6728 ch13  9/2/04  1:23 PM  Page 320
III
E-commerce and Security
14Running an E-commerce Site
15E-commerce Security Issues
16Implementing Authentication with PHP and MySQL
17Implementing Secure Transactions with PHP and MySQL17 6728 Part3  9/2/04  1:16 PM  Page 321
17 6728 Part3  9/2/04  1:16 PM  Page 322
14
Running an E-commerce Site
THIS CHAPTER INTRODUCES SOME OF THE ISSUES involved in specifying, designing,
building, and maintaining an e-commerce site effectively.We examine the plan, possible
risks, and some ways to make a website pay its own way.
Key topics you learn in this chapter include
nDeciding what you want to achieve with your e-commerce site
nConsidering the types of commercial websites
nUnderstanding risks and threats
nDeciding on a strategy
Deciding What You Want to Achieve
Before spending too much time worrying about the implementation details of your
website, you should have firm goals in mind and a reasonably detailed plan leading to
those goals.
In this book, we make the assumption that you are building a commercial website.
Presumably, then, making money is one of your goals.
There are many ways to take a commercial approach to the Internet. Perhaps you
want to advertise your offline services or sell a real-world product online. Maybe you
have a product that can be sold and provided online. Perhaps your site is not directlyintended to generate revenue but instead supports offline activities or acts as a cheaperalternative to present activities.
Considering the Types of Commercial Websites
Commercial websites generally perform one or more of the following activities:
nPublish company information through online brochures
nTake orders for goods or services18 6728 CH14  9/2/04  1:19 PM  Page 323
324 Chapter 14 Running an E-commerce Site
nProvide services or digital goods
nAdd value to goods or services
nCut costs
Sections of many websites fit more than one of these categories.What follows is a
description of each category and the usual way of making each generate revenue orother benefits for your organization.
The goal of this part of the book is to help you formulate your goals.Why do you
want a website? How is each feature built in to your website going to contribute to your
business?
Publishing Information Using Online Brochures
Nearly every commercial website in the early 1990s was simply an online brochure or
sales tool.This type of site is still the most common form of commercial website. Eitheras an initial foray onto the Web or as a low-cost advertising exercise, this type of sitemakes sense for many businesses.
A brochureware site can be anything from a business card rendered as a web page to an
extensive collection of marketing information. In any case, the purpose of the site, and itsfinancial reason for existing, is to entice customers to make contact with your business.This type of site does not generate any income directly but can add to the revenue yourbusiness receives via traditional means.
Developing a site like this presents few technical challenges.The issues faced are simi-
lar to those in other marketing exercises.A few of the more common pitfalls with thistype of site include
nFailing to provide important information
nPoor presentation
nFailing to answer feedback generated by the site
nAllowing the site to age
nFailing to track the success of the site
Failing to Provide Important Information
What are visitors likely to be seeking when they visit your site? Depending on how
much they already know, they might want detailed product specifications, or they might
just want very basic information such as contact details.
Many websites provide no useful information, or they miss crucial information.At the
very least, your site needs to tell visitors what you do, what geographical areas your busi-
ness services, and how to make contact.18 6728 CH14  9/2/04  1:19 PM  Page 324
325 Considering the Types of Commercial Websites
Poor Presentation
“On the Internet, nobody knows you are a dog,” or so goes the old saying.1In the same
way that small businesses, or dogs, can look larger and more impressive when they are
using the Internet, large businesses can look small, unprofessional, and unimpressive witha poor website.
Regardless of the size of your company, make sure that your website is of a high stan-
dard.T ext should be written and proofread by somebody who has a very good grasp ofthe language being used. Graphics should be clean, clear, and fast to download. On abusiness site, you should carefully consider your use of graphics and color and make sure
that they fit the image you want to present. Use animation carefully, if at all. Never playa sound without the user requesting it.
Although you cannot make your site look the same on all machines, operating sys-
tems, and browsers, you can make sure that it uses standard HTML so that the vastmajority of users can view it without errors. Make sure that you test it with a wide vari-ety of screen resolutions and the major browser/operating system combinations.
Failing to Answer Feedback Generated by the Website
Good customer service is just as vital in attracting and retaining customers on the Web as
it is in the outside world. Large and small companies are guilty of putting an emailaddress on a web page and then neglecting to check or answer that mail promptly.
People have different expectations of response times to email than to postal mail. If
you do not check and respond to email daily, people will believe that their inquiry is not
important to you.
Email addresses on web pages should usually be generic, addressed to job title or
department rather than a specific person.What will happen to email sent to
fred.smith@example.com when Fred leaves? Email addressed to sales@example.com is
more likely to be passed to his successor. It could also be delivered to a group of people,which might help ensure that it is answered promptly.
You will probably receive a lot of spam sent to addresses that you put on web pages.
Bear this fact in mind when deciding how to forward or handle emails sent to theseaddresses.Y ou should consider using form-based feedback rather than directly giving outemail addresses as this greatly reduces the incidence of spam.
Allowing the Site to Age
You need to be careful to keep your website fresh. Content needs to be changed period-
ically. Likewise, changes in the organization need to be reflected on the site.A “cobwebsite” discourages repeat visits and leads people to suspect that much of the informationmight now be incorrect.
1Of course, an “old saying” about the Internet cannot really be very old.This is the caption from a
cartoon by Peter Steiner originally published in the July 5, 1993, issue of The New Yorker .18 6728 CH14  9/2/04  1:19 PM  Page 325
326 Chapter 14 Running an E-commerce Site
One way to avoid a stale site is to update pages manually.Another is to use a scripting
language such as PHP to create dynamic pages. If your scripts have access to up-to-dateinformation, they can constantly generate up-to-date pages.
Failing to Track the Success of the Site
Creating a website is all well and good, but how do you justify the effort and expense?
Particularly if the site is for a large company, you will be asked to demonstrate or quantify
its value to the organization at some time.
For traditional marketing campaigns, large organizations spend tens of thousands of
dollars on market research, both before launching a campaign and after the campaign tomeasure its effectiveness. Depending on the scale and budget of your web venture, thesemeasures might be equally appropriate to aid in the design and measurement of yoursite.
Simpler or cheaper options include
nExamining server logs —Web servers store a lot of data about every request
from your server. Much of this data is useless, and its sheer bulk makes it useless inits raw form.T o distill your log files into a meaningful summary, you need a logfile analyzer.T wo of the better-known free programs are Analog, which is available from http://www.analog.cx/, and Webalizer, available from
http://www.mrunix.net/webalizer/. Commercial programs such as Summary,available from http://summary.net, might be more comprehensive.A log file ana-
lyzer shows you how traffic to your site changes over time and what pages arebeing viewed.
nMonitoring sales —Y our online brochure is supposed to generate sales.Y ou
should be able to estimate its effect on sales by comparing sales levels before andafter the site launch.Y our ability to monitor sales obviously becomes difficult ifother kinds of marketing cause fluctuations in the same period.
nSoliciting user feedback —If you ask your users, they will tell you what they
think of your site. By providing a feedback form, you can gather some useful opin-ions.T o increase the quantity of feedback, you might like to offer a small induce-ment, such as entry into a prize drawing for all respondents.
nSurveying representative users —Holding focus groups can be an effective tech-
nique for evaluating your site or even a prototype of your intended site.T o conducta focus group, you simply need to gather some volunteers, encourage them to eval-uate the site, and then interview them to gauge and record their opinions.
Focus groups can be expensive affairs, conducted by professional facilitators, who
evaluate and screen potential participants to try to ensure that they accurately rep-
resent the spread of demographics and personalities in the wider community and
then skillfully interview participants. Focus groups can also cost nothing, be run byan amateur, and be populated by a sample of people whose relevance to the targetmarket is unknown.18 6728 CH14  9/2/04  1:19 PM  Page 326
327 Considering the Types of Commercial Websites
Paying a specialist market research company is one way to get a well-run focus
group and useful results, but it is not the only way. If you are running your own
focus groups, choose a skillful moderator.The moderator should have excellent peo-ple skills and not have a bias or stake in the result of the research. Limit group sizesto 6 to 10 people.A recorder or secretary should assist the moderator to leave herfree to facilitate discussion.The result that you get from your groups is only as rele-vant as the sample of people you use. If you evaluate your product only with friends
and family of your staff, they are unlikely to represent the general community.
Taking Orders for Goods or Services
If your online advertising is compelling, the next logical step is to allow your customers
to order while still online.Traditional salespeople know that it is important to get cus-tomers to make a decision now.The more time you give people to reconsider a purchas-ing decision, the more likely they are to shop around or change their mind. If customerswant your product, it is in your best interest to make the purchase process as quick and
easy as possible. Forcing people to step away from their computer and call a phone num-
ber or visit a store places obstacles in their way. If you have online advertising that hasconvinced viewers to buy, let them buy now, without leaving your website.
Taking orders on a website makes sense for many businesses. Every business wants
orders.Allowing people to place orders online can either provide additional sales orreduce your salespeople’s workload. Providing facilities for online orders obviously
involves costs. Building a dynamic site, organizing payment facilities, and providing cus-tomer service all cost money.
Much of the appeal of online sales is that many of these costs stay the same regardless
of whether you take 1,000 orders or 1,000,000 orders.T o make the costs worthwhilethough, you need to have products or services that will sell in reasonable numbers.Before you get too attached to the idea of online commerce, try to determine whetheryour products are suitable for an e-commerce site.
Products and services commonly bought using the Internet include books and maga-
zines, computer software and equipment, music, clothing, travel, and tickets to entertain-ment events.
Just because your product is not in one of these categories, do not despair.These cate-
gories are already crowded with established brands. However, you would be wise to con-sider some of the factors that make these products big online sellers.
Ideally, an e-commerce product is nonperishable and easily shipped, expensive enough
to make shipping costs seem reasonable, yet not so expensive that the purchaser feelscompelled to physically examine the item before purchase.
The best e-commerce products are commodities. If a consumer buys an avocado, he will
probably want to look at the particular avocado and perhaps feel it.All avocados are not thesame. One copy of a book, CD, or computer program is usually identical to other copies ofthe same title. Purchasers do not need to see the particular item they will purchase.18 6728 CH14  9/2/04  1:19 PM  Page 327
328 Chapter 14 Running an E-commerce Site
In addition, e-commerce products should appeal to people who use the Internet.At
the time of writing, this audience consists primarily of employed, younger adults, withabove-average incomes, living in metropolitan areas.With time, though, the online popu-lation is beginning to look more like the whole population.
Some products are never going to be reflected in surveys of e-commerce purchases
but are still a success. If you have a product that appeals only to a niche market, the
Internet might be the ideal way to reach buyers. Even if only 10 people in your home-town collect 1980s action figures, a site selling them might work if 10 people in everyother town collect them as well.
Some products are unlikely to succeed as e-commerce categories. Cheap, perishable
items, such as groceries, seem a poor choice, although this has not deterred companiesfrom trying, mostly unsuccessfully. Other categories suit brochureware sites very well butnot online ordering. Big, expensive items fall into this category—items such as vehiclesand real estate that require a lot of research before purchasing but that are too expensiveto order without seeing and generally impractical to deliver.
Convincing prospective purchasers to complete an order presents a number of 
obstacles.They include
nUnanswered questions
nTrust
nEase of use
nCompatibility
If users are frustrated by any of these obstacles, they are likely to leave without buying.
Unanswered Questions
If a prospective customer cannot find an immediate answer to one of her questions, she
is likely to leave.This scenario has a number of implications. Make sure your site is wellorganized. Can a first-time visitor find what she wants easily? Also, make sure your site iscomprehensive, without overloading visitors. On the Web, people are more likely to skimthan to read carefully, so be concise. For most advertising media, there are practical limitson how much information you can provide.This is not true for a website. For a website,the two main limits are the cost of creating and updating information and limits imposedby how well you can organize, layer, and connect information so as not to overwhelm
visitors.
Thinking of a website as an unpaid, never-sleeping, automatic salesperson is tempting,
but customer service is still important. Encourage visitors to ask questions.Try to provide
immediate or nearly immediate answers via phone, email, online chat, or some otherconvenient means.18 6728 CH14  9/2/04  1:19 PM  Page 328
329 Considering the Types of Commercial Websites
Trust
If a visitor is not familiar with your brand name, why should he trust you? Anybody can
put together a website. People do not need to trust you to read your brochureware site,but placing an order requires a certain amount of faith. How is a visitor to know
whether you are a reputable organization or the aforementioned dog?
People are concerned about a number of issues when shopping online:
nWhat are you going to do with their personal information? Are you going
to sell it to others, use it to send them huge amounts of advertising, or store itsomewhere insecurely so that others can gain access to it? T elling people what youwill and will not do with their data is important. Such information is called a pri-
vacy policy and should be easily accessible on your site.
nAre you a reputable business? If your business is registered with the relevant
authority in a particular place; has a physical office, warehouse, and a phone num-ber; and has been in business for a number of years, it is less likely to be a scamthan a business that consists solely of a website and perhaps a post office box. Makesure that you display these details.
nWhat happens if a purchaser is not satisfied with a purchase? Under what
circumstances will you give a refund? Who pays for shipping? Mail order retailershave traditionally had more liberal refund and return policies than traditionalshops. Many offer an unconditional satisfaction guarantee. Consider the cost ofreturns against the increase in sales that a liberal return policy will create.Whatever
your policy is, make sure that it is displayed on your site.
nShould customers entrust their credit card information to you? The single
greatest trust issue for Internet shoppers is fear of transmitting their credit card
details over the Internet. For this reason, you need to both handle credit cardssecurely and be seen as security conscious.At the very least, this means usingSecure Sockets Layer (SSL) to transmit the details from the users’ browser to yourweb server and ensuring that your web server is competently and securely admin-
istered. We discuss this topic in more detail later.
Ease of Use
Consumers vary greatly in their computer experience, language, general literacy, memory,
and vision.Therefore, your site needs to be as easy as possible to use. Usability and userinterface design principles fill many books on their own, but here are a few guidelines:
nKeep your site as simple as possible. The more options, advertisements, and
distractions on each screen, the more likely a user is to get confused.18 6728 CH14  9/2/04  1:19 PM  Page 329
330 Chapter 14 Running an E-commerce Site
nKeep text clear. Use clear, uncomplicated fonts. Do not make text too small and
bear in mind that it will be different sizes on different types of machines.
nMake your ordering process as simple as possible. Intuition and available
evidence both support the idea that the more mouse clicks users have to make to
place an order, the less likely they are to complete the process. Keep the number ofsteps to a minimum, but note that Amazon.com has a U.S. patent
2on a process
using only one click, which it calls 1-Click.This patent is strongly challenged bymany website owners.
nTry not to let users get lost. Provide landmarks and navigational cues to tell
users where they are. For example, if a user is within a subsection of the site, high-light the navigation for that subsection.
If you are using a shopping cart metaphor in which you provide a virtual container for
customers to accumulate purchases prior to finalizing the sale, keep a link to the cart vis-ible on the screen at all times.
Compatibility
Be sure to test your site in a number of browsers and operating systems. If the site does
not work for a popular browser or operating system, you will look unprofessional andlose a section of your potential market.
If your site is already operating, your web server logs can tell you what browsers your
visitors are using.As a rule of thumb, if you test your site in the last two versions ofMicrosoft Internet Explorer, a recent version of Internet Explorer and Safari on an AppleMac, the current version of Mozilla on Linux, and a text-only browser such as Lynx, youwill be visible to the vast majority of users. Remember to look at your site using a vari-ety of screen resolutions. Some users have very large resolutions, but some use phones orPDAs. It is hard to make the same site look good on a screen that is 2,048 pixels wideand one that is 240 pixels wide.
Try to avoid features and facilities that are brand new, unless you are willing to write
and maintain multiple versions of the site. Standards-compliant HTML or XHTMLshould work everywhere, but older features are more likely to be correctly supported onevery browser and device.
Providing Services and Digital Goods
Many products or services can be sold over the Web and delivered to the customer via a
courier.A smaller range can be delivered immediately online. If a service or good can betransmitted over a network, it can be ordered, paid for, and delivered instantly, withouthuman interaction.The most obvious service provided this way is information.
2U.S.Patent and Trademark Office Patent Number 5,960,411. Method and system for placing a
purchase order via a communications network.18 6728 CH14  9/2/04  1:19 PM  Page 330
331 Considering the Types of Commercial Websites
Sometimes the information is entirely free or supported by advertising. Some informa-
tion is provided via subscription or paid for on an individual basis.
Digital goods include e-books and music in electronic formats such as MP3. Stock
library images also can be digitized and downloaded. Computer software does not alwaysneed to be on a CD, inside shrink-wrap. It can be downloaded directly. Services that canbe sold this way include Internet access or web hosting and some professional servicesthat can be replaced by an expert system.
If you are going to physically ship an item that was ordered from your website, you
have both advantages and disadvantages over digital goods and services. Shipping a physi-cal item costs money. Digital downloads are nearly free.This means that if you havesomething that can be duplicated and sold digitally, the cost to you is similar whetheryou sell 1 item or 1,000 items. Of course, there are limits; if you have a sufficient level of
sales and traffic, you will need to invest in more hardware or bandwidth.
Digital products or services can be easy to sell as impulse purchases. If a person orders
a physical item, delivery will take a day or more. In contrast, downloads are usually meas-ured in seconds or minutes.As a result, immediacy can be a burden on merchants. If youare delivering a purchase digitally, you need to do it immediately.Y ou cannot manuallyoversee the process or spread peaks of activity through the day. Immediate delivery sys-
tems are therefore more open to fraud and are more of a burden on computer resources.
Digital goods and services are ideal for e-commerce, but obviously only a limited
range of goods and services can be delivered this way.
Adding Value to Goods or Services
Some successful areas of commercial websites do not actually sell any goods or services.Services such as courier companies’ (UPS at www.ups.com or Fedex at www.fedex.com)tracking services are not generally designed to directly make a profit.They add value tothe existing services offered by the organization. Providing a facility for customers totrack their parcels or bank balances can give your company a competitive advantage ifyou do it early or can become an expected service in your industry.
Support forums also fall into this category.There are sound commercial reasons for
giving customers a discussion area to share troubleshooting tips about your company’s
products. Customers might be able to solve their problems by looking at solutions givento others, international customers can get support without paying for long-distancephone calls, and customers might be able to answer one another’s questions outside youroffice hours. Providing support in this way can increase your customers’ satisfaction at alow cost.
Cutting Costs
One popular use of the Internet is to cut costs. Savings could result from distributinginformation online, facilitating communication, replacing services, or centralizing opera-tions.18 6728 CH14  9/2/04  1:19 PM  Page 331
332 Chapter 14 Running an E-commerce Site
If you currently provide information to a large number of people, you could possibly
do the same thing more economically via a website.Whether you are providing pricelists, a catalog, documented procedures, specifications, or something else, making thesame information available on the Web could be cheaper than printing and deliveringpaper copies.This is particularly true for information that changes regularly.The Internetcan save you money by facilitating communication.Whether this means that tenders canbe widely distributed and rapidly replied to, or whether it means that customers cancommunicate directly with a wholesaler or manufacturer, eliminating middlemen, theresult is the same. Prices can come down, or profits can go up.
Replacing services that cost money to run with an electronic version can cut costs.A
brave example was Egghead.com.The company chose to close its chain of computerstores and concentrate on its e-commerce activities.Although building a significant e-commerce site obviously costs money, a chain of 80 retail stores has much higherongoing costs. Replacing an existing service also comes with risks.At the very least, youlose customers who do not use the Internet.
Egghead.com’s new venture did not work out.The company closed its physical stores
during the dot-com boom in 1998 and filed for Chapter 11 bankruptcy protection dur-ing the dot-com bust in 2001.
Centralization also can cut costs. If you have numerous physical sites, you need to pay
numerous rents and overheads, staff at all of them, and the costs of maintaining inventory
at each.An Internet business can be in one location but be accessible all over the world.
Understanding Risks and Threats
Every business faces risks, competitors, theft, fickle public preferences, and natural disas-ters, among other risks.The list is endless. However, many risks that e-commerce compa-nies face are either less of a danger, or not relevant, to other ventures.These risks include
nCrackers
nFailure to attract sufficient business
nComputer hardware failure
nPower,communication, or network failures
nReliance on shipping services
nExtensive competition
nSoftware errors
nEvolving governmental policies and taxes
nSystem-capacity limits18 6728 CH14  9/2/04  1:19 PM  Page 332
333 Understanding Risks and Threats
Crackers
The best-publicized threat to e-commerce comes from malicious computer users known
as crackers .All businesses run the risk of becoming targets of criminals, but high-profile 
e-commerce businesses are bound to attract the attention of crackers with varying inten-tions and abilities.
Crackers might attack for the challenge, for notoriety, to sabotage your site, to steal
money, or to gain free goods or services.
Securing your site involves a combination of
nKeeping backups of important information
nHaving hiring policies that attract honest staff and keep them loyal because the
most dangerous attacks can come from within
nTaking software-based precautions, such as choosing secure software and keeping it
up to date
nTraining staff to identify targets and weaknesses
nAuditing and logging to detect break-ins or attempted break-ins
Most successful attacks on computer systems take advantage of well-known weaknesses
such as easily guessed passwords, common misconfigurations, and old versions of soft-ware.A few commonsense precautions can turn away nonexpert attacks and ensure that
you have a backup if the worst happens.
Failure to Attract Sufficient Business
Although attacks by crackers are widely feared, most e-commerce failures relate to tradi-
tional economic factors.The effort of building and marketing a major e-commerce sitecosts a lot of money. Companies often are willing to lose money in the short term, how-ever, based on assumptions that after the brand is established in the market place, cus-
tomer numbers and revenue will increase.
The dot-com crash brought many companies crashing down as venture capital need-
ed to support loss-making retailers dried up.The string of high-profile failures includedEuropean boo.com, which ran out of money and changed hands after burning $120 mil-lion in six months.The problem was not that Boo did not make sales; it was just that thecompany spent far, far more than it made.
Computer Hardware Failure
If your business relies on a website, obviously, the failure of a critical part of one of yourcomputers will have an impact.18 6728 CH14  9/2/04  1:19 PM  Page 333
334 Chapter 14 Running an E-commerce Site
Busy or crucial websites justify having multiple redundant systems so that the failure
of one does not affect the operation of the whole system.As with all threats, you need todetermine whether the chance of losing your website for a day while waiting for partsor repairs justifies the expense of redundant equipment.
Multiple machines running Apache, PHP , and MySQL are reasonably easy to set up
and, using MySQL’s replication, easy to keep in sync, but they do significantly increaseyour hardware, network infrastructure, and hosting costs.
Power,Communication, Network, or Shipping Failures
If you rely on the Internet, you are relying on a complex mesh of service providers. If
your connection to the rest of the world fails, you can do little other than wait for your
supplier to reinstate service.The same goes for interruptions to power service and strikesor other stoppages by your delivery company.
Depending on your budget, you might choose to maintain multiple services from dif-
ferent providers. Doing so costs you more but means that, if one of your providers fails,you will still have another. Brief power failures can be overcome by investing in an unin-
terruptible power supply.
Extensive Competition
If you are opening a retail outlet on a street corner, you will probably be able to make areasonably accurate survey of the competitive landscape.Y our competitors will primarily
be businesses that sell similar things in surrounding areas. New competitors will openoccasionally.With e-commerce, the terrain is less certain.
Depending on shipping costs, your competitors could be anywhere in the world and
subject to different currency fluctuations and labor costs.The Internet is fiercely compet-itive and evolving rapidly. If you are competing in a popular category, new competitorscan appear every day.
You can do little to eliminate the risk of competition, but, by staying abreast of devel-
opments, you can try to ensure that your venture remains competitive.
Software Errors
When your business relies on software, you are vulnerable to errors in that software.
You can reduce the likelihood of critical errors by selecting software that is reliable,
allowing sufficient time to test after changing parts of your system, having a formal test-ing process, and not allowing changes to be made on your live system without testingelsewhere first.
You can reduce the severity of outcomes by having up-to-date backups of all your
data, keeping known working software configurations when making a change, and moni-toring system operation to quickly detect problems.18 6728 CH14  9/2/04  1:19 PM  Page 334
335 Next
Evolving Governmental Policies and Taxes
Depending on where you live, legislation relating to Internet-based businesses might be
nonexistent, in the pipeline, or immature.This situation is unlikely to last. Some businessmodels might be threatened, regulated, or eliminated by future legislation.Taxes mightbe added.
You cannot avoid these issues.The only way to deal with them is to keep up to date
with what is happening and keep your site in line with the legislation.Y ou might wantto consider joining any appropriate lobby groups as issues arise.
System Capacity Limits
One issue to bear in mind when designing your system is growth.Y ou certainly hopeyour system will get busier and busier.Y ou should therefore design it in such a way that
it can scale to cope with demand.
For limited growth, you can increase capacity by simply buying faster hardware, but
there is a limit to how fast a computer you can buy. Is your software written so that afteryou reach this point, you can separate parts of it to share the load on multiple systems?
Can your database handle multiple concurrent requests from different machines? Is yourdatabase connection code written so that you can later change it to write to a MySQLreplication master and read from a variety of slaves?
Few systems cope with massive growth effortlessly, but if you design it with scalability
in mind, you should be able to identify and eliminate bottlenecks as your customer basegrows.
Deciding on a Strategy
Some people believe that the Internet changes too fast to allow effective planning.Wewould argue that this very changeability makes planning crucial. If you do not set goals
and decide on a strategy, you will be left reacting to changes as they occur rather thanbeing able to act in anticipation of change.
Now that you have examined some of the typical goals for a commercial website and
some of the main threats, we hope you have some strategies for your own.
Your strategy will need to identify a business model.The model is usually something
that has been shown to work elsewhere but is sometimes a new idea that you have faithin.Will you adapt your existing business model to the Web, mimic an existing competi-tor, or aggressively create a pioneering service?
Next
In the next chapter, we look specifically at security for e-commerce, providing anoverview of security terms, threats, and techniques.18 6728 CH14  9/2/04  1:19 PM  Page 335
18 6728 CH14  9/2/04  1:19 PM  Page 336
15
E-commerce Security Issues
THIS CHAPTER DISCUSSES THE ROLE OF SECURITY in e-commerce.We discuss who
might be interested in your information and how they might try to obtain it, the principles involved in creating a policy to avoid these kinds of problems, and some of thetechnologies available for safeguarding the security of a website including encryption,authentication, and tracking.
Key topics covered in this chapter include
nThe importance of your information
nSecurity threats
nSecurity policy creation
nUsability, performance, cost, and security
nAuthentication principles
nAuthentication on your site
nEncryption basics
nPrivate key encryption
nPublic key encryption
nDigital signatures
nDigital certificates
nSecure web servers
nAuditing and logging
nFirewalls
nData backups
nPhysical security19 6728 ch15  9/2/04  1:24 PM  Page 337
338 Chapter 15 E-commerce Security Issues
How Important Is Your Information?
When considering security, you first need to evaluate the importance of what you are
protecting.Y ou need to consider its importance both to you and to potential crackers.
You might be tempted to believe that the highest possible level of security is required
for all sites at all times, but protection comes at a cost. Before deciding how much effortor expense your security warrants, you need to decide how much your information isworth.
The value of the information stored on the computer of a hobby user, a business, a
bank, and a military organization obviously varies.The lengths to which an attackerwould be likely to go to obtain access to that information vary similarly. How attractive
would the contents of your machines be to a malicious visitor?
Hobby users probably have limited time to learn about or work toward securing their
systems. Given that information stored on their machines is likely to be of limited valueto anyone other than the owners, attacks are likely to be infrequent and involve limitedeffort. However, all network computer users should take sensible precautions. Even thecomputer with the least interesting data still has significant appeal as an anonymouslaunching pad for attacks on other systems or as a vehicle for reproducing viruses andworms.
Military computers are obvious targets for both individuals and foreign governments.
Because attacking governments might have extensive resources, it would be wise toinvest in sufficient personnel and other resources to ensure that all practical precautionsare taken in this domain.
If you are responsible for an e-commerce site, its attractiveness to crackers presumably
falls somewhere between these two extremes, so the resources and efforts you devote
should logically lie between the extremes, too.
Security Threats
What is at risk on your site? What threats are out there? We discussed some of the threatsto an e-commerce business in Chapter 14,“Running an E-commerce Site.” Many ofthem relate to security.
Depending on your website, security threats might include
nExposure of confidential data
nLoss or destruction of data
nModification of data
nDenial of Service
nErrors in software
nRepudiation
Let’s run through each of these threats.19 6728 ch15  9/2/04  1:24 PM  Page 338
339 Security Threats
Exposure of Confidential Data
Data stored on your computers, or being transmitted to or from your computers, might
be confidential. It might be information that only certain people are intended to see,such as wholesale price lists. It might be confidential information provided by a cus-tomer, such as his password, contact details, and credit card number.
We hope you are not storing information on your web server that you do not intend
anyone to see.A web server is the wrong place for secret information. If you were stor-ing your payroll records or your top secret plan for beating racing ferrets on a computer,you would be wise to use a computer other than your web server.The web server is
inherently a publicly accessible machine and should contain only information that eitherneeds to be provided to the public or has recently been collected from the public.
To reduce the risk of exposure, you need to limit the methods by which information
can be accessed and limit the people who can access it.This process involves designingwith security in mind, configuring your server and software properly, programming care-fully, testing thoroughly, removing unnecessary services from the web server, and requir-ing authentication.
You need to design, configure, code, and test carefully to reduce the risk of a success-
ful criminal attack and, equally important, to reduce the chance that an error will leaveyour information open to accidental exposure.
You also need to remove unnecessary services from your web server to decrease the
number of potential weak points. Each service you are running might have vulnerabili-
ties. Each one needs to be kept up to date to ensure that known vulnerabilities are notpresent.The services that you do not use might be more dangerous. If you never use thecommand 
rcp,for example, why have the service installed?1If you tell the installer that
your machine is a network host, the major Linux distributions and Windows will install a
large number of services that you do not need and should remove.
Authentication means asking people to prove their identity.When the system knows
who is making a request, it can decide whether that person is allowed access.A numberof possible methods of authentication can be employed, but only two forms are com-monly used on public websites: passwords and digital signatures.We talk a little moreabout both later.
CD Universe offers a good example of the cost both in dollars and reputation of
allowing confidential information to be exposed. In late 1999, a cracker calling himselfMaxus reportedly contacted CD Universe, claiming to have 300,000 credit card numbersstolen from the company’s site. He wanted a $100,000 (U.S.) ransom from the site todestroy the numbers.The company refused and found itself in embarrassing coverage onthe front pages of major newspapers as Maxus doled out numbers for others to abuse.
Data is also at risk of exposure while it traverses a network.Although TCP/IP net-
works have many fine features that have made them the de facto standard for connecting
1Even if you do currently use rcp,you should probably remove it and use scp(secure copy)
instead.19 6728 ch15  9/2/04  1:24 PM  Page 339
340 Chapter 15 E-commerce Security Issues
diverse networks together as the Internet, security is not one of them.TCP/IP works by
chopping your data into packets and then forwarding those packets from machine tomachine until they reach their destination.This means that your data is passing throughnumerous machines on the way, as illustrated in Figure 15.1.Any one of those machines
could view your data as it passes by.
Figure 15.1 Transmitting information via the Internet sends your informa-
tion via a number of potentially untrustworthy hosts.
To see the path that data takes from you to a particular machine, you can use the com-
mand traceroute (on a Unix machine).This command gives you the addresses of the
machines that your data passes through to reach that host. For a host in your own country, data is likely to pass through 10 different machines. For an internationalmachine, it may pass through more than 20 intermediaries. If your organization has alarge and complex network, your data might pass through 5 machines before it evenleaves the building.
To protect confidential information, you can encrypt it before it is sent across a net-
work and decrypt it at the other end.Web servers often use Secure Sockets Layer (SSL),
developed by Netscape, to accomplish this as data travels between web servers andbrowsers.This is a fairly low-cost, low-effort way of securing transmissions, but becauseyour server needs to encrypt and decrypt data rather than simply send and receive it, the
number of visitors per second that a machine can serve drops dramatically.
Loss or Destruction of Data
Losing data can be more costly for you than having it revealed. If you have spent months
building up your site, gathering user data and orders, how much would it cost you in
time, reputation, and dollars to lose all that information? If you had no backups of any ofyour data, you would need to rewrite the website in a hurry and start from scratch.Y ou
would also have dissatisfied customers and fraudsters claiming that they ordered some-
thing that never arrived.The InternetSource Destination19 6728 ch15  9/2/04  1:24 PM  Page 340
341 Security Threats
It is possible that crackers willbreak into your system and format your hard drive. It 
is fairly likely that a careless programmer or administrator willdelete something by acci-
dent, but it is almost certain that you willoccasionally lose a hard disk drive. Hard disk
drives rotate thousands of times per minute, and, occasionally, they fail. Murphy’s Lawwould tell you that the one that fails will be the most important one, long after you last
made a backup.
You can take various measures to reduce the chance of data loss. Secure your servers
against crackers. Keep the number of staff with access to your machine to a minimum.Hire only competent, careful people. Buy good quality drives. Use Redundant Array ofInexpensive Disks (RAID) so that multiple drives can act like one faster, more reliabledrive.
Regardless of its cause, you have only one real protection against data loss: backups.
Backing up data is not rocket science. On the contrary, it is tedious, dull, and—youhope—useless, but it is vital. Make sure that your data is regularly backed up and makesure that you have tested your backup procedure to be certain that you can recover.Make sure that your backups are stored away from y our computers.Although the
chances that your premises will burn down or suffer some other catastrophic fate areunlikely, storing a backup offsite is a fairly cheap insurance policy.
Modification of Data
Although the loss of data could be damaging, modification could be worse.What ifsomebody obtained access to your system and modified files? Although wholesale dele-tion will probably be noticed and can be remedied from your backup, how long will ittake you to notice modification?
Modifications to files could include changes to data files or executable files.A 
cracker’s motivation for altering a data file might be to graffiti your site or to obtainfraudulent benefits. Replacing executable files with sabotaged versions might give acracker who has gained access once a secret backdoor for future visits or a mechanismto gain higher privileges on the system.
You can protect data from modification as it travels over the network by computing a
signature.This approach does not stop somebody from modifying the data, but if therecipient checks that the signature still matches when the file arrives, she will know
whether the file has been modified. If the data is being encrypted to protect it fromunauthorized viewing, using the signature will also make it very difficult to modify enroute without detection.
Protecting files stored on your server from modification requires that you use the file
permission facilities your operating system provides and protect the system from unau-thorized access. Using file permissions, users can be authorized to use the system but notbe given free rein to modify system files and other users’ files.The lack of a proper per-missions system is one of the reasons that Windows 95, 98, and ME were never suitableas server operating systems.19 6728 ch15  9/2/04  1:24 PM  Page 341
342 Chapter 15 E-commerce Security Issues
Detecting modification can be difficult. If, at some point, you realize that your sys-
tem’s security has been breached, how will you know whether important files have beenmodified? Some files, such as the data files that store your databases, are intended tochange over time. Many others are intended to stay the same from the time you installthem, unless you deliberately upgrade them. Modification of both programs and data canbe insidious, but although programs can be reinstalled if you suspect modification, youcannot know which version of your data was “clean.”
File integrity assessment software, such as Tripwire, records information about impor-
tant files in a known safe state, probably immediately after installation, and can be used ata later time to verify that files are unchanged.Y ou can download commercial or condi-tional free versions from the following address:
http://www.tripwire.com
Denial of Service
One of the most difficult threats to guard against is Denial of Service. Denial of Service
(DoS) occurs when somebody’s actions make it difficult or impossible for users to access
a service, or delay their access to a time-critical service.
Early in 2000, an infamous spate of Distributed Denial of Service (DDoS) attacks was
made against high-profile websites.Targets included Yahoo!, eBay,Amazon, E-Trade, andBuy.com.These sites are accustomed to traffic levels that most of us can only dream of,but they are still vulnerable to being shut down for hours by a DoS attack.Although
crackers generally have little to gain from shutting down a website, the proprietor mightbe losing money, time, and reputation.
Some sites have specific times when they expect to do most of their business. Online
bookmaking sites experience huge demand just before major sporting events. One waythat crackers attempted to profit from DDoS attacks in 2004 was by extorting moneyfrom online bookmakers with the threat of attacking during these peak demand times.
One of the reasons that these attacks are so difficult to guard against is that they can
be carried out in a huge number of ways. Methods could include installing a programon a target machine that uses most of the system’s processor time, reverse spamming, orusing one of the automated tools.A reverse spam involves somebody sending out spam
with the target listed as the sender.This way, the target will have thousands of angryreplies to deal with.
Automated tools exist to launch distributed DoS attacks on a target.Without needing
much knowledge, somebody can scan a large number of machines for known vulnerabil-
ities, compromise a machine, and install the tool. Because the process is automated, anattacker can install the tool on a single host in less than five seconds.When enoughmachines have been co-opted, all are instructed to flood the target with network traffic.
Guarding against DoS attacks is difficult in general.With a little research, you can find
the default ports used by the common DDoS tools and close them.Y our router mightprovide mechanisms to limit the percentage of traffic that uses particular protocols such19 6728 ch15  9/2/04  1:24 PM  Page 342
343 Security Threats
as ICMP . Detecting hosts on your network being used to attack others is easier than 
protecting your machines from attack. If every network administrator could be relied onto vigilantly monitor his own network, DDoS would not be such a problem.
Because there are so many possible methods of attack, the only really effective defense
is to monitor normal traffic behavior and have a pool of experts available to take coun-termeasures when abnormal situations occur.
Errors in Software
Any software you have bought, obtained, or written may have serious errors in it. Giventhe short development times normally allowed to web projects, the likelihood is highthat this software has some errors.Any business that is highly reliant on computerizedprocesses is vulnerable to buggy software.
Errors in software can lead to all sorts of unpredictable behavior including service
unavailability, security breaches, financial losses, and poor service to customers.
Common causes of errors that you can look for include poor specifications, faulty
assumptions made by developers, and inadequate testing.
Poor Specifications
The more sparse or ambiguous your design documentation is, the more likely you are 
to end up with errors in the final product.Although it might seem superfluous to you tospecify that when a customer’s credit card is declined, the order should not be sent tothe customer, at least one big-budget site had this bug.The less experience your devel-opers have with the type of system they are working on, the more precise your specifica-tion needs to be.
Assumptions Made by Developers
A system’s designers and programmers need to make many assumptions. Of course, you
hope that they will document their assumptions and usually be right. Sometimes,though, people make poor assumptions. For example, they might assume that input datawill be valid, will not include unusual characters, or will be less than a particular size.They might also make assumptions about timing, such as the likelihood of two conflict-ing actions occurring at the same time or that a complex processing task will always takemore time than a simple task.
Assumptions like these can slip through because they are usually true.A cracker could
take advantage of a buffer overrun because a programmer assumed a maximum lengthfor input data, or a legitimate user could get confusing error messages and leave becauseyour developers did not consider that a person’s name might have an apostrophe in it.
These sorts of errors can be found and fixed with a combination of good testing anddetailed code review.
Historically, operating system or application-level weaknesses exploited by crackers
have usually related either to buffer overflows or race conditions.19 6728 ch15  9/2/04  1:24 PM  Page 343
344 Chapter 15 E-commerce Security Issues
Poor Testing
Testing for all possible input conditions, on all possible types of hardware, running all
possible operating systems with all possible user settings is rarely achievable.This situationis even more true than usual with web-based systems.
What is needed is a well-designed test plan that tests all the functions of your software
on a representative sample of common machine types.A well-planned set of tests shouldaim to test every line of code in your project at least once. Ideally, this test suite shouldbe automated so that it can be run on your selected test machines with little effort.
The greatest problem with testing is that it is unglamorous and repetitive.Although
some people enjoy breaking things, few people enjoy breaking the same thing over andover again. It is important that people other than the original developers are involved in
testing. One of the major goals of testing is to uncover faulty assumptions made by thedevelopers.A person who can approach the project with fresh ideas is much more likelyto have different assumptions. In addition, professionals are rarely keen to find flaws intheir own work.
Repudiation
The final risk we will consider is repudiation. Repudiation occurs when a party involved
in a transaction denies having taken part. E-commerce examples might include a personordering goods off a website and then denying having authorized the charge on hiscredit card, or a person agreeing to something in email and then claiming that somebodyelse forged the email.
Ideally, financial transactions should provide the peace of mind of nonrepudiation to
both parties. Neither party could deny their part in a transaction, or, more precisely, bothparties could conclusively prove the actions of the other to a third party, such as a court.In practice, this rarely happens.
Authentication provides some surety about whom you are dealing with. If issued by a
trusted organization, digital certificates of authentication can provide greater confidence.
Messages sent by each party also need to be tamperproof.There is not much value in
being able to demonstrate that Corp Pty Ltd sent you a message if you cannot alsodemonstrate that what you received was exactly what the company sent.As mentionedpreviously, signing or encrypting messages makes them difficult to surreptitiously alter.
For transactions between parties with an ongoing relationship, digital certificates
together with either encrypted or signed communications are an effective way of limiting repudiation. For one-off transactions, such as the initial contact between ane-commerce website and a stranger bearing a credit card, they are not so practical.
An e-commerce company should be willing to hand over proof of its identity and 
a few hundred dollars to a certifying authority such as VeriSign (http://www.verisign.com/) or Thawte (http://www.thawte.com/) to assure visitors of the company’s
bona fides.Would that same company be willing to turn away every customer who was
not willing to do the same to prove her identity? For small transactions, merchants are19 6728 ch15  9/2/04  1:24 PM  Page 344
345 Security Policy Creation
generally willing to accept a certain level of fraud or repudiation risk rather than turn
away b usiness.
Usability, Performance, Cost, and Security
By its very nature, the Web is risky. It is designed to allow numerous anonymous users to
request services from your machines. Most of those requests are perfectly legitimate
requests for web pages, but connecting your machines to the Internet allows people to
attempt other types of connections.
Although you might be tempted to assume that the highest possible level of security
is appropriate, this is rarely the case. If you wanted to be really secure, you would keep allyour computers turned off, disconnected from all networks, in a locked safe.T o make
your computers available and usable, some relaxation of security is required.
A trade-off needs to be made between security, usability, cost, and performance.
Making a service more secure can reduce usability by, for instance, limiting what peoplecan do or requiring them to identify themselves. Increasing security can also reduce thelevel of performance of your machines. Running software to make your system moresecure—such as encryption, intrusion detection systems, virus scanners, and extensivelogging—uses resources. Providing an encrypted session, such as an SSL connection to awebsite, takes more processing power than providing a normal one.These performance
losses can be countered by spending more money on faster machines or hardware specif-ically designed for encryption.
You can view performance, usability, cost, and security as competing goals.Y ou need
to examine the trade-offs required and make sensible decisions to come up with a compromise. Depending on the value of your information, your budget, the number ofvisitors you expect to serve, and the obstacles you think legitimate users will be willingto put up with, you can come up with a compromise position.
Security Policy Creation
A security policy is a document that describes
nThe general philosophy toward security in your organization
nThe items to be protected—software, hardware, data
nThe people responsible for protecting these items
nStandards for security and metrics, which measure how well those standards arebeing met
A good guideline for writing your security policy is that it’s like writing a set of func-
tional requirements for software.The policy shouldn’t address specific implementations orsolutions but instead should describe the goals and security requirements in your envi-ronment. It shouldn’t need to be updated very often.19 6728 ch15  9/2/04  1:24 PM  Page 345
346 Chapter 15 E-commerce Security Issues
You should keep a separate document that sets out guidelines for how the require-
ments of the security policy are met in a particular environment. In this document, youcan have different guidelines for different parts of your organization.This is more alongthe lines of a design document or a procedure manual that details what is actually doneto ensure the level of security that you require.
Authentication Principles
Authentication attempts to prove that somebody is actually who she claims to be.Y ou can
provide authentication in many ways, but as with many security measures, the moresecure methods are more troublesome to use.
Authentication techniques include passwords, digital signatures, biometric measures
such as fingerprint scans, and measures involving hardware such as smart cards. Only twoare in common use on the Web: passwords and digital signatures.
Biometric measures and most hardware solutions involve special input devices and
would limit authorized users to specific machines with these features attached. Such
measures might be acceptable, or even desirable, for access to an organization’s internalsystems, but they take away m uch of the advantage of making a system available over 
the Web.
Passwords are simple to implement, simple to use, and require no special input
devices.They provide some level of authentication but might not be appropriate on theirown for high-security systems.
A password is a simple concept.Y ou and the system know your password. If a visitor
claims to be you and knows your password, the system has reason to believe he is you.Aslong as nobody else knows or can guess the password, this system is secure. Passwords ontheir own have a number of potential weaknesses and do not provide strong authentica-tion.
Many passwords are easily guessed. If left to choose their own passwords, around 50%
of users will choose an easily guessed password. Common passwords that fit this descrip-tion include dictionary words or the username for the account.At the expense of usabil-ity, you can force users to include numbers or punctuation in their passwords.
Educating users to choose better passwords can help, but even when educated,
around 25% of users will still choose an easily guessed password.Y ou could enforce pass-word policies that stop users from choosing easily guessed combinations by checking
new passwords against a dictionary, or requiring some numbers or punctuation symbolsor a mixture of uppercase and lowercase letters. One danger is that strict password ruleswill lead to passwords that many legitimate users will not be able to remember, especiallyif different systems force them to follow different rules when creating passwords.
Hard-to-remember passwords increase the likelihood that users will do something
unsecure such as write “username fred password rover” on a note taped to their moni-tors. Users need to be educated not to write down their passwords or to do other sillythings such as give them over the phone to people who claim to be working on the system.19 6728 ch15  9/2/04  1:24 PM  Page 346
347 Encryption Basics
Passwords can also be captured electronically. By running a program to capture 
keystrokes at a terminal or using a packet sniffer to capture network traffic, crackers
can—and do—capture usable pairs of login names and passwords.Y ou can limit theopportunities to capture passwords by encrypting network traffic.
For all their potential flaws, passwords are a simple and relatively effective way of
authenticating your users.They provide a level of secrecy that might not be appropriatefor national security but is ideal for checking on the delivery status of a customer’s order.
Authentication
Authentication mechanisms are built in to the most popular web browsers and web
servers.A web server might require a username and password for people requesting filesfrom particular directories on the server.
When challenged for a login name and password, your browser presents a dialog box
similar to the one shown in Figure 15.2.
Figure 15.2 Web browsers prompt users for authentication when they
attempt to visit a restricted directory on a web server.
Both the Apache web server and Microsoft’s IIS enable you to very easily protect all or
part of a site in this way. Using PHP or MySQL, you can achieve the same effect. UsingMySQL is faster than the built-in authentication. Using PHP , you can provide moreflexible authentication or present the request in a more attractive way.
We look at some authentication examples in Chapter 16,“Implementing Authen-
tication with PHP and MySQL.”
Encryption Basics
Anencryption algorithm is a mathematical process to transform information into a seem-
ingly random string of data.
19 6728 ch15  9/2/04  1:24 PM  Page 347
348 Chapter 15 E-commerce Security Issues
The data that you start with is often called plain text ,although it is not important to
the process what the information represents—whether it is actually text or some othersort of data. Similarly, the encrypted information is called ciphertext but rarely looks any-
thing like text. Figure 15.3 shows the encryption process as a simple flowchart.The plaintext is fed to an encryption engine, which might have been a mechanical device, such asa World War II Engima machine, once upon a time but is now nearly always a computerprogram.The engine produces the ciphertext.
Figure 15.3 Encryption takes plain text and transforms it into seemingly
random ciphertext.
To create the protected directory whose authentication prompt is shown in Figure 15.2,
we used Apache’s most basic type of authentication. (Y ou see how to use it in the next
chapter.) This encrypts passwords before storing them.We created a user with the pass-word 
password ;it was then encrypted and stored as aWDuA3X3H.mc2 .You can see that
the plain text and ciphertext bear no obvious resemblance to each other.
This particular encryption method is not reversible. Many passwords are stored using
a one-way encryption algorithm.T o see whether an attempt at entering a password iscorrect, you do not need to decrypt the stored password.Y ou can instead encrypt theattempt and compare that to the stored version.
Many, but not all, encryption processes can be reversed.The reverse process is called
decryption .Figure 15.4 shows a two-way encryption process.Plain
TextEncryption
AlgorithmCipher
Text
Figure 15.4 Encryption takes plain text and transforms it into seemingly
random ciphertext. Decryption takes the ciphertext and transforms it back
into plain text.
Cryptography is nearly 4,000 years old but came of age in World War II. Its growth since
then has followed a similar pattern to the adoption of computer networks, initially beingused only by military and finance corporations, being more widely used by companiesstarting in the 1970s, and becoming ubiquitous in the 1990s. In the past few years,encryption has gone from a concept that ordinary people saw only in World War IIPlain
TextEncryption
AlgorithmPlain
TextCipher
TextKey
Decryption
Algorithm19 6728 ch15  9/2/04  1:24 PM  Page 348
349 Public Key Encryption
movies and spy thrillers to something that they read about in newspapers and use every
time they purchase something with their web browsers.
Many different encryption algorithms are available. Some, like DES, use a secret or
private key; some, like RSA, use a public key and a separate private key.
Private Key Encryption
Private key encryption, also called secret key encryption, relies on authorized peopleknowing or having access to a key.This key must be kept secret. If the key falls into thewrong hands, unauthorized people can also read your encrypted messages.As shown inFigure 15.4, both the sender (who encrypts the message) and the recipient (whodecrypts the message) have the same key.
The most widely used secret key algorithm is the Data Encryption Standard (DES).
This scheme was developed by IBM in the 1970s and adopted as the American standardfor commercial and unclassified government communications. Computing speeds areorders of magnitudes faster now than in 1970, and DES has been obsolete since at least 1998.
Other well-known secret key systems include RC2, RC4, RC5, triple DES, and
IDEA.Triple DES is fairly secure.
2It uses the same algorithm as DES, applied three
times with up to three different keys.A plain text message is encrypted with key one,decrypted with key two, and then encrypted with key three.
One obvious flaw of secret key encryption is that, to send somebody a secure mes-
sage, you need a secure way to get the secret key to him. If you have a secure way todeliver a key, why not just deliver the message that way?
Fortunately, there was a breakthrough in 1976, when Diffie and Hellman published
the first public key scheme.
Public Key Encryption
Public key encryption relies on two different keys: a public key and a private key.Asshown in Figure 15.5, the public key is used to encrypt messages and the private key todecrypt them.
The advantage to this system is that the public key, as its name suggests, can be dis-
tributed publicly.Anybody to whom you give your public key can send you a securemessage.As long as only you have your private key, then only you can decrypt the mes-sage.
The most common public key algorithm is RSA, developed by Rivest, Shamir, and
Adelman at MIT and published in 1978. RSA was a proprietary system, but the patentexpired in September 2000.
2Somewhat paradoxically, triple DES is twice as secure as DES. If you needed something three
times as strong, you could write a program to implement a quintuple DES algorithm.19 6728 ch15  9/2/04  1:24 PM  Page 349
350 Chapter 15 E-commerce Security Issues
Figure 15.5 Public key encryption uses separate keys for encryption and
decryption.
The capability to transmit a public key in the clear and not need to worry about it
being seen by a third party is a huge advantage, but secret key systems are still in com-mon use. Often, a hybrid system is used.A public key system is used to transmit the keyfor a secret key system that will be used for the remainder of a session’s communication.This added complexity is tolerated because secret key systems are around 1,000 timesfaster than public key systems.
Digital Signatures
Digital signatures are related to public key cryptography but reverse the role of public
and private keys.A sender can encrypt and digitally sign a message with her secret key.When the message is received, the recipient can decrypt it with the sender’s public key.Because the sender is the only person with access to the secret key, the recipient can befairly certain from whom the message came and that it has not been altered.
Digital signatures can be really useful.The recipient can be sure that the message has
not been tampered with, and the signatures make it difficult for the sender to repudiate,or deny sending, the message.
It is important to note that although the message has been encrypted, it can be read
by anybody who has the public key.Although the same techniques and keys are used,
the purpose of encryption here is to prevent tampering and repudiation, not to preventreading.
Because public key encryption is fairly slow for large messages, another type of algo-
rithm, called a hash function ,is usually used to improve efficiency.The hash function 
calculates a message digest or hash value for any message it is given. It is not importantwhat value the algorithm produces. It is important that the output is deterministic—thatis, that the output is the same each time a particular input is used, that the output issmall, and that the algorithm is fast.
The most common hash functions are MD5 and SHA.A hash function generates a message digest that matches a particular message. If you
have a message and a message digest, you can verify that the message has not been tam-pered with, as long as you are sure that the digest has not been tampered with.T o thisPlain
TextEncryption
AlgorithmPublic
Key
Plain
TextCipher
TextPrivate
Key
Decryption
Algorithm19 6728 ch15  9/2/04  1:24 PM  Page 350
351 Digital Certificates
end, the usual way of creating a digital signature is to create a message digest for the
whole message using a fast hash function and then encrypt only the brief digest using aslow public key encryption algorithm.The signature can now be sent with the messagevia any normal unsecure method.
When a signed message is received, it can be checked.The signature is decrypted
using the sender’s public key.A hash value is then generated for the message using thesame method that the sender used. If the decrypted hash value matches the hash valueyou generated, the message is from the sender and has not been altered.
Digital Certificates
Being able to verify that a message has not been altered and that a series of messages all
come from a particular user or machine is good. For commercial interactions, being ableto tie that user or server to a real legal entity such as a person or company would beeven better.
A digital certificate combines a public key and an individual’s or organization’s details
in a signed digital format. Given a certificate, you have the other party’s public key, incase you want to send an encrypted message, and you have that party’s details, which youknow have not been altered.
The problem here is that the information is only as trustworthy as the person who
signed it.Anybody can generate and sign a certificate claiming to be anybody he likes.For commercial transactions, it would be useful to have a trusted third party verify the
identity of participants and the details recorded in their certificates.
These third parties are called certifying authorities (CAs) .They issue digital certificates
to individuals and companies subject to identity checks.The two best known CAs areVeriSign (http://www.verisign.com/)and Thawte (http://www.thawte.com/), but you
can use a number of other authorities.VeriSign and Thawte are both owned by the samecompany, and there is little practical difference between them. Some of the lesser-knownauthorities, such as Equifax Secure (www.equifaxsecure.com), are significantly cheaper.
The authorities sign a certificate to verify that they have seen proof of the person’s or
company’s identity. It is worth noting that the certificate is not a reference or statementof creditworthiness.The certificate does not guarantee that you are dealing with some-body reputable.What it does mean is that if you are ripped off, you have a relativelygood chance of having a real physical address and somebody to sue.
Certificates provide a network of trust.Assuming you choose to trust the CA, you can
then choose to trust the people they choose to trust and then trust the people the certi-fied party chooses to trust.
The most common use for digital certificates is to provide an air of respectability to
an e-commerce site.With a certificate issued by a well-known CA, web browsers canmake SSL connections to your site without bringing up warning dialogs.Web serversthat enable SSL connections are often called secure web servers .19 6728 ch15  9/2/04  1:24 PM  Page 351
352 Chapter 15 E-commerce Security Issues
Secure Web Servers
You can use the Apache web server, Microsoft IIS, or any number of other free or com-
mercial web servers for secure communication with browsers via Secure Sockets Layer.Using Apache enables you to use a Unix-like operating system, which is almost certainlymore reliable but harder to set up than IIS.Y ou can also, of course, choose to use Apacheon a Windows platform.
Using SSL on IIS simply involves installing IIS, generating a key pair, and installing
your certificate. Using SSL on Apache requires installing three different packages:
Apache, Mod_SSL, and OpenSSL.
You can have your cake and eat it too by purchasing Stronghold. Stronghold is a
commercial product available from http://stronghold.redhat.com/ for around $1,000(U.S.). Based on Apache, it comes as a self-installing binary preconfigured with SSL.Thisway,you get the reliability of Unix and an easy-to-install product with technical support
from the vendor.
Installation instructions for the two most popular web servers,Apache and IIS, are in
Appendix A,“Installing PHP5 and MySQL5.” Y ou can begin using SSL immediately bygenerating your own digital certificate, but visitors to your site will be warned by theirweb browsers that you have signed your own certificate.T o use SSL effectively, you also
need a certificate issued by a certifying authority.
The exact process to get this certificate varies between CAs, but in general, you need
to prove to a CA that you are some sort of legally recognized business with a physicaladdress and that the business in question owns the relevant domain name.
You also need to generate a certificate signing request (CSR).The process for this
varies from server to server.Y ou can find instructions on the CAs’ websites. Stronghold
and IIS provide a dialog box–driven process, whereas Apache requires you to type com-mands. However, the process is essentially the same for all servers.The result is anencrypted CSR.Y our CSR should look something like this:
---BEGIN NEW CERTIFICATE REQUEST---
MIIBuwIBAAKBgQCLn1XX8faMHhtzStp9wY6BVTPuEU9bpMmhrb6vgaNZy4dTe6VS84p7wGepq5CQjfOL4Hjda+g12xzto8uxBkCDO98Xg9q86CY45HZk+q6GyGOLZSOD8cQHwh1oUP65s5Tz018OFBzpI3bHxfO6aYelWYziDiFKp1BrUdua+pK4SQIVAPLHSV9FSz8Z7IHOg1Zr5H82oQOlAoGAWSPWyfVXPAF8h2GDb+cf97k44VkHZ+Rxpe8GghlfBn9L3ESWUZNOJMfDLlny7dStYU98VTVNekidYuaBsvyEkFrny7NCUmiuaSnX4UjtFDkNhX9j5YbCRGLmsc865AT54KRu31O2/dKHLo6NgFPirijHy99HJ4LRY9Z9HkXVzswCgYBwBFH2QfK88C6JKW3ah+6cHQ4Deoiltxi627WN5HcQLwkPGn+WtYSZjG5tw4tqqogmJ+IP2F/5G6FI2DQP7QDvKNeAU8jXcuijuWo27S2sbhQtXgZRTZvOjGn89BC0mIHgHQMkI7vz35mx1Skk3VNq3ehwhGCvJlvoeiv2J8X2IQIVAOTRp7zpEn7QlXnXw1s7xXbbuKP0---END NEW CERTIFICATE REQUEST---
Armed with a CSR, the appropriate fee, and documentation to prove that you exist, and
having verified that the domain name you are using is in the same name as in the busi-ness documentation, you can sign up for a certificate with a CA.19 6728 ch15  9/2/04  1:24 PM  Page 352
353 Firewalls
When the CA issues your certificate, you need to store it on your system and tell
your web server where to find it.The final certificate is a text file that looks a lot like
the CSR shown here.
Auditing and Logging
Your operating system enables you to log all sorts of events. Events that you might be
interested in from a security point of view include network errors, access to particulardata files such as configuration files or the NT Registry, and calls to programs such as 
su(used to become another user, typically root, on a Unix system).
Log files can help you detect erroneous or malicious behavior as it occurs.They can
also tell you how a problem or break-in occurred if you check them after noticing prob-lems.The two main problems with log files are their size and veracity.
If you set the criteria for detecting and logging problems at their most paranoid lev-
els, you will end up with massive logs that are very difficult to examine.T o help withlarge log files, you really need to either use an existing tool or derive some audit scriptsfrom your security policy to search the logs for “interesting” events.The auditing processcould occur in real-time or could be done periodically.
In particular, log files are vulnerable to attack. If an intruder has root or administrator
access to your system, she is free to alter log files to cover her tracks. Unix provides facil-ities to log events to a separate machine.This would mean that a cracker would need tocompromise at least two machines to cover her tracks. Similar functionality is possible inWindows, but not as easy as in Unix.
Your system administrator might do regular audits, but you might like to have an
external audit periodically to check the behavior of administrators.
Firewalls
Firewalls are designed to separate your network from the wider world. In the same waythat firewalls in a building or a car stop fire from spreading into other compartments,network firewalls stop chaos from spreading into your network.
A firewall is designed to protect machines on your network from outside attack. It fil-
ters and denies traffic that does not meet its rules. It also restricts the activities of peopleand machines outside the firewall.
Sometimes, a firewall is also used to restrict the activities of those within it.A firewall
can restrict the network protocols people can use, restrict the hosts they can connect to,or force them to use a proxy server to keep bandwidth costs down.
A firewall can either be a hardware device, such as a router with filtering rules, or a
software program running on a machine. In any case, the firewall needs interfaces to twonetworks and a set of rules. It monitors all traffic attempting to pass from one networkto the other. If the traffic meets the rules, it is routed across to the other network; other-wise, it is stopped or rejected.19 6728 ch15  9/2/04  1:24 PM  Page 353
354 Chapter 15 E-commerce Security Issues
Packets can be filtered by their type, source address, destination address, or port infor-
mation. Some packets are merely discarded; other events can be set to trigger log entriesor alarms.
Data Backups
You cannot underestimate the importance of backups in any disaster recovery plan.
Hardware and buildings can be insured and replaced, or sites hosted elsewhere, but ifyour custom-developed web software is gone, no insurance company can replace it 
for you.
You need to back up all the components of your website—static pages, scripts, and
databases—on a regular basis. Just how often you back up depends on how dynamicyour site is. If it is all static, you can get away with backing it up when it has changed.
However, the kinds of sites we talk about in this book are likely to change frequently,particularly if you are taking orders online.
Most sites of a reasonable size need to be hosted on a server with RAID, which can
support mirroring.This covers situations in which you might have a hard disk failure.Consider, however, what might happen in situations in which something happens to theentire array, machine, or building.
You should run separate backups at a frequency corresponding to your update vol-
ume.These backups should be stored on separate media and preferably in a safe, separatelocation, in case of fire, theft, or natural disasters.
Many resources are available for backup and recovery.We concentrate on how you
can back up a site built with PHP and a MySQL database.
Backing Up General Files
You can back up your HTML, PHP , images, and other nondatabase files fairly simply on
most systems by using backup software.
The most widely used of the freely available utilities is AMANDA, the Advanced
Maryland Automated Network Disk Archiver, developed by the University of Maryland.It ships with many Unix distributions and can also be used to back up Windowsmachines via SAMBA.Y ou can read more about AMANDA at
http://www.amanda.org/
Backing Up and Restoring Your MySQL Database
Backing up a live database is more complicated than backing up general files.Y ou needto avoid copying any table data while the database is in the middle of being changed.
Instructions on how to back up and restore a MySQL database can be found in
Chapter 12,“Advanced MySQL Administration.”19 6728 ch15  9/2/04  1:24 PM  Page 354
355 Next
Physical Security
The security threats we have considered so far relate to intangibles such as software, but
you should not neglect the physical security of your system.Y ou need air conditioning
and protection against fire, people (both the clumsy and the criminal), power failure, andnetwork failure.
Your system should be locked up securely. Depending on the scale of your operation,
your approach could be a room, a cage, or a cupboard. Personnel who do not need
access to this machine room should not have it. Unauthorized people might deliberatelyor accidentally unplug cables or attempt to bypass security mechanisms using a bootabledisk.
Water sprinklers can do as much damage to electronics as a fire. In the past, halon fire
suppression systems were used to avoid this problem.The production of halon is nowbanned under the Montreal Protocol on Substances That Deplete the Ozone Layer, sonew fire suppression systems must use other, less harmful, alternatives such as argon orcarbon dioxide.Y ou can read more about this issue at
http://www.epa.gov/Ozone/snap/fire/qa.html
Occasional brief power failures are a fact of life in most places. In locations with harsh
weather and above-ground wires, long failures occur regularly. If the continuous opera-
tion of your systems is important to you, you should invest in an uninterruptible powersupply (UPS).A UPS that can power a single machine for 10 minutes costs less than$300 (U.S.).Allowing for longer failures, or more equipment, can become expensive.Long power failures really require a generator to run air conditioning as well as computers.
Like power failures, network outages of minutes or hours are out of your control and
bound to occur occasionally. If your network is vital, it makes sense to have connectionsto more than one Internet service provider. Having two connections costs more butshould mean that, in case of failure, you have reduced capacity rather than becominginvisible.
These sorts of issues are some of the reasons you might like to consider co-locating
your machines at a dedicated facility.Although one medium-sized business might not be
able to justify a UPS that will run for more than a few minutes, multiple redundant net-work connections, and fire suppression systems, a quality facility housing the machines of
a hundred similar businesses can.
Next
In Chapter 16, we look specifically at authentication—allowing users to prove theiridentity.We look at a few different methods, including using PHP and MySQL toauthenticate site visitors.19 6728 ch15  9/2/04  1:24 PM  Page 355
19 6728 ch15  9/2/04  1:24 PM  Page 356
16
Implementing Authentication with
PHP and MySQL
INTHIS CHAPTER ,WE DISCUSS HOW TO IMPLEMENT various PHP and MySQL tech-
niques for authenticating users.
Key topics covered in this chapter include
nIdentifying visitors
nImplementing access control
nUsing basic authentication
nUsing basic authentication in PHP
nUsing Apache’s .htaccess basic authentication
nUsing basic authentication with IIS
nUsing mod_auth_mysql authentication
nCreating your own custom authentication
Identifying Visitors
The Web is a fairly anonymous medium, but it is often useful to know who is visiting
your site. Fortunately for visitors’ privacy, you can find out very little about them with-
out their assistance.With a little work, servers can find out quite a lot about the comput-ers and networks that connect to them, however.A web browser usually identifies itself,telling the server what browser, browser version, and operating system a user is running.You can often determine what resolution and color depth visitors’ screens are set to and
how large their web browser windows are by using JavaScript.20 6728 CH16  9/2/04  1:16 PM  Page 357
358 Chapter 16 Implementing Authentication with PHP and MySQL
Each computer connected to the Internet has a unique IP address. From a visitor’s 
IP address, you might be able to deduce a little about her.Y ou can find out who owns an IP and sometimes make a reasonable guess as to a visitor’s geographic location.Some addresses are more useful than others. Generally, people with permanent Internetconnections have a permanent address. Customers dialing into an ISP usually get onlythe temporary use of one of the ISP’s addresses.The next time you see that address, itmight be used by a different computer, and the next time you see that visitor, she willlikely be using a different IP address. IP addresses are not as useful for identifying peopleas they might at first glance seem.
Fortunately for web users, none of the information that their browsers give out 
identifies them. If you want to know a visitor’s name or other details, you will have toask her.
Many websites provide compelling reasons to get users to provide their details.The
New York Times newspaper (http://www.nytimes.com) provides its content free, but only
to people willing to provide details such as name, sex, and total household income. Nerdnews and discussion site Slashdot (http://www.slashdot.org) allows registered users toparticipate in discussions under a nickname and customize the interface they see. Moste-commerce sites record their customers’ details when they make their first order.Thismeans that a customer is not required to type her details every time.
Having asked for and received information from your visitor, you need a way to asso-
ciate the information with the same user the next time she visits. If you are willing tomake the assumption that only one person visits your site from a particular account on aparticular machine and that each visitor uses only one machine, you could store a cookieon the user’s machine to identify the user.
This arrangement is certainly not true for all users. Many people share a computer,
and many people use more than one computer.At least some of the time, you need toask a visitor who she is again. In addition to asking who a user is, you also need to askher to provide some level of proof that she is who she claims to be.
As discussed in Chapter 15,“E-commerce Security Issues,” asking a user to prove her
identity is called authentication .The usual method of authentication used on websites is
asking visitors to provide a unique login name and a password.Authentication is usuallyused to allow or disallow access to particular pages or resources, but can be optional, orused for other purposes such as personalization.
Implementing Access Control
Simple access control is not difficult to implement.The code shown in Listing 16.1delivers one of three possible outputs. If the file is loaded without parameters, it will dis-play an HTML form requesting a username and password.This type of form is shown inFigure 16.1.20 6728 CH16  9/2/04  1:16 PM  Page 358
359 Implementing Access Control
Figure 16.2 When users enter incorrect details, you need to give them an
error message. On a real site, you might want to give a somewhat friendlier
message.Figure 16.1 This HTML form requests that visitors enter a username and
password for access.
If the parameters are present but not correct, it will display an error message.A sample
error message is shown in Figure 16.2.
20 6728 CH16  9/2/04  1:16 PM  Page 359
360 Chapter 16 Implementing Authentication with PHP and MySQL
If these parameters are present and correct, it will display the secret content.The sample
test content is shown in Figure 16.3.
Figure 16.3 When provided with correct details, the script displays content.
The code to create the functionality shown in Figures 16.1, 16.2, and 16.3 is shown in
Listing 16.1.
Listing 16.1 secret.php —PHP and HTML to Provide a Simple Authentication
Mechanism
<?php
//create short names for variables
@ $name = $_POST[ ‘name’];
@ $password = $_POST[ ‘password ’];
if(empty($name)||empty($password))
{
//Visitor needs to enter a name and password
?>
<h1>Please Log In</h1>This page is secret.<form method= ”post”action=”secret.php ”>
<table border= ”1”>
<tr>
<th> Username </th><td> <input type= ”text”name=”name”> </td>
</tr>
20 6728 CH16  9/2/04  1:16 PM  Page 360
361 Implementing Access Control
<tr>
<th> Password </th><td> <input type= ”password ”name=”password ”> </td>
</tr><tr>
<td colspan= ”2”align=”center”>
<input type= ”submit”value=”Log In”>
</td>
</tr></table></form>
<?php
}else if($name== ’user’&&$password== ’pass’)
{
// visitor ’s name and password combination are correct
echo ‘<h1>Here it is!</h1> ’;
echo ‘I bet you are glad you can see this secret page. ’;
}else{
// visitor ’s name and password combination are not correct
echo ‘<h1>Go Away!</h1> ’;
echo ‘You are not authorized to view this resource. ’;
}
?>
The code from Listing 16.1 provides a simple authentication mechanism to allow
authorized users to see a page, but it has some significant problems.
This script
nHas one username and password hard-coded into the script
nStores the password as plain text
nProtects only one page
nTransmits the password as plain text
These issues can all be addressed with varying degrees of effort and success.
Storing Passwords
There are many better places to store usernames and passwords than inside the script.
Inside the script, modifying the data is difficult. It is possible, but a bad idea, to write ascript to modify itself. Doing so would mean having a script on your server that is exe-cuted on your server but that can be written or modified by others. Storing the data inanother file on the server lets you more easily write a program to add and remove usersand to alter passwords.Listing 16.1 Continued20 6728 CH16  9/2/04  1:16 PM  Page 361
362 Chapter 16 Implementing Authentication with PHP and MySQL
Inside a script or another data file, you are limited to the number of users you can
have without seriously affecting the speed of the script. If you are considering storingand searching through a large number of items in a file, you should consider using adatabase instead, as previously discussed.As a rule of thumb, if you want to store andsearch through a list of more than 100 items, they should be in a database rather than aflat file.
Using a database to store usernames and passwords would not make the script much
more complex but would allow you to authenticate many different users quickly. Itwould also allow you to easily write a script to add new users, delete users, and allow
users to change their passwords.
A script to authenticate visitors to a page against a database is shown in Listing 16.2.
Listing 16.2 secretdb.php —Using MySQL to Improve the Simple Authentication
Mechanism
<?php
$name = $_POST[ ‘name’];
$password = $_POST[ ‘password ’]; 
if(!isset($_POST[ ‘name’])&&!isset($_POST[ ‘password ’]))
{
//Visitor needs to enter a name and password
?>
<h1>Please Log In</h1>This page is secret.<form method= ”post”action=”secretdb.php ”>
<table border= ”1”>
<tr>
<th> Username </th><td> <input type= ”text”name=”name”> </td>
</tr><tr>
<th> Password </th><td> <input type= ”password ”name=”password ”> </td>
</tr><tr>
<td colspan= ”2”align=”center”>
<input type= ”submit”value=”Log In”>
</td>
</tr></table></form>
<?php
}else{20 6728 CH16  9/2/04  1:16 PM  Page 362
363 Implementing Access Control
// connect to mysql
$mysql = mysqli_connect( ‘localhost ’, ‘webauth’, ‘webauth’);
if(!$mysql){
echo ‘Cannot connect to database. ’;
exit;
}// select the appropriate database$selected = mysqli_select_db( $mysql, ‘auth’);
if(!$selected){
echo ‘Cannot select database. ’;
exit;
}
// query the database to see if there is a record which matches
$query = “select count(*) from authorized_users where
name = ‘$name’and
password = ‘$password ’”;
$result = mysqli_query( $mysql, $query );
if(!$result){
echo ‘Cannot run query. ’;
exit;
}$row = mysqli_fetch_row( $result );$count = $row[0];
if ( $count > 0 )
{
// visitor ’s name and password combination are correct
echo ‘<h1>Here it is!</h1> ’;
echo ‘I bet you are glad you can see this secret page. ’;
}else{
// visitor ’s name and password combination are not correct
echo ‘<h1>Go Away!</h1> ’;
echo ‘You are not authorized to view this resource. ’;
}
}
?>
You can create the database used here by connecting to MySQL as the MySQL root
user and running the contents of Listing 16.3.Listing 16.2 Continued20 6728 CH16  9/2/04  1:16 PM  Page 363
364 Chapter 16 Implementing Authentication with PHP and MySQL
Listing 16.3 createauthdb.sql — These MySQL Queries Create the auth Database,
the auth Table, and Two Sample Users
create database auth;
use auth;create table authorized_users ( name varchar(20), 
password varchar(40),
primary key     (name)
);
insert into authorized_users values ( ‘username ’, 
‘password ’);
insert into authorized_users values ( ‘testuser ’, 
sha1(‘password ’) );
grant select on auth.* 
to ‘webauth’
identified by ‘webauth’;
flush privileges;
Encrypting Passwords
Regardless of whether you store your data in a database or a file, storing the passwords as
plain text is an unnecessary risk.A one-way hashing algorithm can provide better securi-ty with very little extra effort.
PHP provides a number of one-way hash functions.The oldest and least secure is the
Unix Crypt algorithm, provided by the function
crypt() .The Message Digest 5 (MD5)
algorithm, implemented in the function md5() ,is stronger and available in most versions
of PHP . If you do not require compatibility with old PHP versions, use Secure HashAlgorithm 1 (SHA-1).
The PHP function
sha1() provides a strong, one-way cryptographic hash function.
The prototype for this function is
string sha1 ( string str [, bool raw_output])
Given the string str,the function will return a pseudo-random 40-character string. If
you set raw_output to be true,you will instead get a 20-character string of binary data.
For example, given the string “password ”,sha1() returns
“5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8 ”.This string cannot be decrypted and
turned back into “password ”even by its creator, so it might not seem very useful at first
glance.The property that makes sha1() useful is that the output is deterministic. Given
the same string, sha1() will return the same result every time it is run.
Rather than having PHP code like
if( $name == ‘username ’&& 
$password == ‘password ’)
{20 6728 CH16  9/2/04  1:16 PM  Page 364
365 Implementing Access Control
//OK passwords match
}
you can have code like
if( $name == ‘username ’&& 
sha1($password) == ‘5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8 ’) )
{
//OK passwords match
}
You do not need to know what the password looked like before you used sha1() on it.
You need to know only if the password typed in is the same as the one that was origi-
nally run through sha1() .
As already mentioned, hard-coding acceptable usernames and passwords into a script
is a bad idea.Y ou should use a separate file or a database to store them.
If you are using a MySQL database to store your authentication data, you could either
use the PHP function sha1() or the MySQL function SHA1() .MySQL provides an
even wider range of hashing algorithms than PHP , but they are all intended for the same
purpose.
To use SHA1() ,you could rewrite the SQL query in Listing 16.2 as
select count(*) from authorized_users where
name = ‘$username ’and
password = sha1( ‘$password ’)
This query counts the number of rows in the table named authorized_users that have
a name value equal to the contents of $name and a pass value equal to the output given
by SHA1() applied to the contents of $password .Assuming that you force people to
have unique usernames, the result of this query is either 0or 1.
Keep in mind that the hash functions generally return data of a fixed size. In the case
of SHA1, it is 40 characters when represented as a string. Make sure that your databasecolumn is this width.
Looking back at Listing 16.3, you can see that we created one user (
‘username ’)
with an unencrypted password and another user with an encrypted one ( ‘testuser ’) to
illustrate the two possible approaches.
Protecting Multiple Pages
Making a script like the ones in Listings 16.1 and 16.2 protect more than one page is alittle harder. Because HTTP is stateless, there is no automatic link or association betweensubsequent requests from the same person.This makes it harder to have data, such asauthentication information that a user has entered, carry across from page to page.
The easiest way to protect multiple pages is to use the access control mechanisms
provided by your web server.We look at these mechanisms shortly.20 6728 CH16  9/2/04  1:16 PM  Page 365
366 Chapter 16 Implementing Authentication with PHP and MySQL
To create this functionality yourself, you could include parts of the script shown in
Listing 16.1 in every page that you want to protect. Using auto_prepend_file and
auto_append_file ,you can automatically prepend and append the code required to
every file in particular directories.The use of these directives was discussed in Chapter 5,
“Reusing Code and Writing Functions.”
If you use this approach, what happens when your visitors go to multiple pages with-
in your site? Requiring them to re-enter their names and passwords for every page theywant to view would not be acceptable.
You could append the details the users entered to every hyperlink on the page.
Because they might have spaces or other characters that are not allowed in URLs, youshould use the function
urlencode() to safely encode these characters.
This approach still has a few problems, though. Because the data would be included
in web pages sent to the users and the URLs they visit, the protected pages they visitwill be visible to anybody who uses the same computer and steps back through cachedpages or looks at the browser’s history list. Because you are sending the password backand forth to the browser with every page requested or delivered, this sensitive informa-tion is being transmitted more often than necessary.
There are two good ways to tackle these problems: HTTP basic authentication and
sessions. Basic authentication overcomes the caching problem, but the browser still sendsthe password to the server with every request. Session control overcomes both of theseproblems.We look at HTTP basic authentication now and examine session control inChapter 22,“Using Session Control in PHP ,” and in more detail in Chapter 26,“Building User Authentication and Personalization.”
Using Basic Authentication
Fortunately, authenticating users is a common task, so authentication facilities are built
into HTTP . Scripts or web servers can request authentication from a web browser.Theweb browser is then responsible for displaying a dialog box or similar device to obtain
required information from the user.
Although the web server requests new authentication details for every user request,
the web browser does not need to request the user’s details for every page.The browsergenerally stores these details for as long as the user has a browser window open andautomatically resends them to the web server as required without user interaction.
This feature of HTTP is called basic authentication .You can trigger basic authentication
using PHP or using mechanisms built into your web server.We look first at the PHPmethod, then the Apache method, and finally the IIS method.
Basic authentication transmits a user’s name and password in plain text, so it is not
very secure. HTTP 1.1 contains a more secure method known as digest authentication ,
which uses a hashing algorithm (usually MD5) to disguise the details of the transaction.Digest authentication is supported by many web servers and most current-version webbrowsers. Unfortunately, as with many recently implemented features, there are manyolder browsers still in use that do not support digest authentication and a version of thestandard included in Microsoft IE and IIS that is not compatible with non-Microsoftproducts.20 6728 CH16  9/2/04  1:16 PM  Page 366
367 Using Basic Authentication in PHP
In addition to being poorly supported by installed web browsers, digest authentication
is still not very secure. Both basic and digest authentication provide a low level of securi-ty. Neither gives the user any assurance that he is dealing with the machine he intendedto access. Both might permit a cracker to replay the same request to the server. Becausebasic authentication transmits the user’s password as plain text, it allows any cracker capa-ble of capturing packets to impersonate the user for making any request.
Basic authentication provides a (low) level of security similar to that commonly used
to connect to machines via T elnet or FTP , transmitting passwords in plaintext. Digestauthentication is somewhat more secure, encrypting passwords before transmitting them.
When you combine basic authentication with SSL and digital certificates, all parts of
a web transaction can be protected by strong security. If you want strong security, youshould read Chapter 17,“Implementing Secure Transactions with PHP and MySQL.”However, for many situations, a fast, but relatively insecure, method such as basic authen-tication is appropriate.
Basic authentication protects a named realm and requires users to provide a valid
username and password. Realms are named so that more than one realm can be on thesame server. Different files or directories on the same server can be part of differentrealms, each protected by a different set of names and passwords. Named realms also let
you group multiple directories on the one host or virtual host as a realm and protect
them all with one password.
Using Basic Authentication in PHP
PHP scripts are generally cross-platform, but using basic authentication relies on envi-ronment variables set by the server. For an HTTP authentication script to run on
Apache using PHP as an Apache module or on IIS using PHP as an ISAPI module, itneeds to detect the server type and behave slightly differently.The script in Listing 16.4will run on both servers.
Listing 16.4 http.php —PHP Can Trigger HTTP Basic Authentication
<?php
// if we are using IIS, we need to set $PHP_AUTH_USER and $PHP_AUTH_PW
if (substr($_SERVER[ ‘SERVER_SOFTWARE ’], 0, 9) == ‘Microsoft ’&&
!isset($_SERVER[ ‘PHP_AUTH_USER ’]) &&
!isset($_SERVER[ ‘PHP_AUTH_PW ’]) &&
substr($_SERVER[ ‘HTTP_AUTHORIZATION ’], 0, 6) == ‘Basic ‘
)
{
list($_SERVER[ ‘PHP_AUTH_USER ’], $_SERVER[ ‘PHP_AUTH_PW ’]) =
explode( ‘:’, base64_decode(substr($_SERVER[ ‘HTTP_AUTHORIZATION ’], 6)));
}20 6728 CH16  9/2/04  1:16 PM  Page 367
368 Chapter 16 Implementing Authentication with PHP and MySQL
// Replace this if statement with a database query or similar
if ($_SERVER[ ‘PHP_AUTH_USER ’] != ‘user’|| $_SERVER[ ‘PHP_AUTH_PW ’] != ‘pass’)
{
// visitor has not yet given details, or their// name and password combination are not correct
header(‘WWW-Authenticate: Basic realm= ”Realm-Name ”’);
if (substr($_SERVER[ ‘SERVER_SOFTWARE ’], 0, 9) == ‘Microsoft ’)
header(‘Status: 401 Unauthorized ’);
else
header(‘HTTP/1.0 401 Unauthorized ’);
echo ‘<h1>Go Away!</h1> ’;
echo ‘You are not authorized to view this resource. ’;
}else{
// visitor has provided correct detailsecho ‘<h1>Here it is!</h1> ’;
echo ‘<p>I bet you are glad you can see this secret page.</p> ’;
}
?>
The code in Listing 16.4 acts similarly to the previous listings in this chapter. If the user
has not yet provided authentication information, it will be requested. If she has providedincorrect information, she is given a rejection message. If she provides a matching name-password pair, she is presented with the contents of the page.
In this case, the user will see an interface somewhat different from the previous list-
ings.This script does not provide an HTML form for login information.The user’sbrowser presents her with a dialog box. Some people see this as an improvement; otherswould prefer to have complete control over the visual aspects of the interface.The login
dialog box that Internet Explorer provides is shown in Figure 16.4.
Because the authentication is being assisted by features built into the browser, the
browser chooses to exercise some discretion in how failed authorization attempts arehandled. Internet Explorer lets the user try to authenticate three times before displayingthe rejection page. Netscape Navigator lets the user try an unlimited number of times,popping up a dialog box to ask,“Authorization failed. Retry?” between attempts.Netscape displays the rejection page only if the user clicks Cancel.
As with the code given in Listings 16.1 and 16.2, you could include this code in
pages you wanted to protect or automatically prepend it to every file in a directory.Listing 16.4 Continued20 6728 CH16  9/2/04  1:16 PM  Page 368
369 Using Basic Authentication with Apache’s .htaccess Files
Figure 16.4 The user’s browser is responsible for the appearance of the dia-
log box when using HTTP authentication.
Using Basic Authentication with Apache’s 
.htaccess Files
You can achieve similar results to the script in Listing 16.4 without writing a PHP
script.
The Apache web server contains a number of different authentication modules that
can be used to decide the validity of data entered by a user.The easiest to use is
mod_auth ,which compares name-password pairs to lines in a text file on the server.
To get the same output as the preceding script, you need to create two separate
HTML files: one for the content and one for the rejection page.We skipped someHTML elements in the previous examples but really should include 
<html> and <body>
tags when generating HTML.
Listing 16.5, named content.html ,contains the content that authorized users see.
Listing 16.6, called rejection.html ,contains the rejection page. Having a page to show
in case of errors is optional, but it is a nice, professional touch if you put something use-ful on it. Given that this page will be shown when a user attempts to enter a protectedarea but is rejected, useful content might include instructions on how to register for apassword, or how to get a password reset and emailed if it has been forgotten.
20 6728 CH16  9/2/04  1:17 PM  Page 369
370 Chapter 16 Implementing Authentication with PHP and MySQL
Listing 16.5 content.html — Sample Content
<html><body>
<h1>Here it is!</h1><p>I bet you are glad you can see this secret page.</p>
</body></html>
Listing 16.6 rejection.html —Sample 401 Error Page
<html><body>
<h1>Go Away!</h1><p>You are not authorized to view this resource.</p>
</body></html>
There is nothing new in these files.The interesting file for this example is Listing 16.7.
This file needs to be called .htaccess and will control accesses to files and any subdi-
rectories in its directory.
Listing 16.7 .htaccess — An .htaccess File Can Set Many Apache Configuration
Settings, Including Activating Authentication
ErrorDocument 401 /chapter16/rejection.html
AuthUserFile /home/book/.htpassAuthGroupFile /dev/nullAuthName “Realm-Name ”
AuthType Basic
require valid-user
Listing 16.7 is an .htaccess file to turn on basic authentication in a directory. Many
settings can be made in an .htaccess file, but the six lines in this example all relate to
authentication.
The first line
ErrorDocument 401 /chapter16/rejection.html
tells Apache what document to display for visitors who fail to authenticate (HTTP errornumber 401).Y ou can use other 
ErrorDocument directives to provide your own pages
for other HTTP errors such as 404.The syntax is
ErrorDocument error_number URL
For a page to handle error 401, it is important that the URL given is publicly available.
It would not be very useful in providing a customized error page to tell people that theirauthorization failed if the page is locked in a directory in which they need to successful-ly authenticate to see.20 6728 CH16  9/2/04  1:17 PM  Page 370
371 Using Basic Authentication with Apache’s .htaccess Files
The line
AuthUserFile /home/book/.htpass
tells Apache where to find the file that contains authorized users’ passwords.This file is
often named .htpass ,but you can give it any name you prefer. It is not important what
you call this file, but it is important where you store it. It should not be stored within
the web tree—somewhere that people can download it via the web server.The sample
.htpass file is shown in Listing 16.8.
As well as specifying individual users who are authorized, it is possible to specify that
only authorized users who fall into specific groups may access resources.We chose notto, so the line
AuthGroupFile /dev/null
sets the AuthGroupFile to point to /dev/null ,a special file on Unix systems that is
guaranteed to be null.
Like the PHP example, to use HTTP authentication, you need to name the realm as
follows:
AuthName “Realm-Name ”
You can choose any realm name you prefer, but bear in mind that the name will be
shown to your visitors.T o make it obvious that the name in the example should bechanged, we named ours 
“Realm-Name ”.
Because a number of different authentication methods are supported, you need to
specify which authentication method you are using. Here, you use Basic authentication,
as specified by this directive:
AuthType Basic
You also need to specify who is allowed access.Y ou could specify particular users, partic-
ular groups, or as we have done, simply allow any authenticated user access.The line
require valid-user
specifies that any valid user is to be allowed access.
Listing 16.8 .htpass — The Password File Stores Usernames and Each User’s
Encrypted Password
user1:0nRp9M80GS7zM
user2:nC13sOTOhp.owuser3:yjQMCPWjXFTzU
user4:LOmlMEi/hAme2
Each line in the .htpass file contains a username, a colon, and that user’s encrypted
password.20 6728 CH16  9/2/04  1:17 PM  Page 371
372 Chapter 16 Implementing Authentication with PHP and MySQL
The exact contents of your .htpass file will vary.T o create it, you use a small pro-
gram called htpasswd that comes in the Apache distribution.
The htpasswd program is used in one of the following ways:
htpasswd [-cmdps] passwordfile username
or
htpasswd -b[cmdps] passwordfile username password
The only switch that you need to use is -c.Using -ctells htpasswd to create the file.
You must use this for the first user you add. Be careful not to use it for other users
because, if the file exists, htpasswd will delete it and create a new one.
The optional m,d,p,or sswitches can be used if you want to specify which encryp-
tion algorithm (including no encryption) you would like to use.
The bswitch tells the program to expect the password as a parameter rather than
prompt for it.This feature is useful if you want to call htpasswd noninteractively as part
of a batch process, but you should not use it if you are calling htpasswd from the com-
mand line.
The following commands created the file shown in Listing 16.8:
htpasswd -bc /home/book/.htpass user1 pass1
htpasswd -b /home/book/.htpass user2 pass2htpasswd -b /home/book/.htpass user4 pass3htpasswd -b /home/book/.htpass user4 pass4
Note that htpasswd may not be in your path: If it is not, you may need to supply the
full path to it. On many systems, you will find it in the /usr/local/apache/bin
directory.
This sort of authentication is easy to set up, but there are a few problems with using
an .htaccess file this way.
Users and passwords are stored in a text file. Each time a browser requests a file that is
protected by the .htaccess file, the server must parse the .htaccess file and then parse
the password file, attempting to match the username and password. Instead of using an
.htaccess file, you could specify the same things in your httpd.conf file—the main
configuration file for the web server.An .htaccess file is parsed every time a file is
requested.The httpd.conf file is parsed only when the server is initially started.This
approach is faster, but means that if you want to make changes, you need to stop andrestart the server.
Regardless of where you store the server directives, the password file still needs to be
searched for every request.This means that, like other techniques we have looked at thatuse a flat file, this would not be appropriate for hundreds or thousands of users.20 6728 CH16  9/2/04  1:17 PM  Page 372
373 Using Basic Authentication with IIS
Using Basic Authentication with IIS
Like Apache, IIS supports HTTP authentication.Apache uses the Unix approach and is
controlled by editing text files, and as you might expect, selecting options in dialog boxescontrols the IIS setup.
Using Windows XP , you change the configuration of Internet Information Server 5
(IIS5) using the Internet Information Services.Y ou can find this utility by choosingAdministrative T ools in the Control Panel.
The Internet Information Services application looks something like the window
shown in Figure 16.5.The tree control on the left side shows that on the machinenamed W2, a number of services are running.The one of interest here is the defaultwebsite.Within this website is a directory called 
protected .Inside this directory is a file
called content.html .
Figure 16.5 The Internet Information Services application allows you to
configure Internet Information Server 5.
To add basic authentication to the protected directory, right-click on it and select
Properties from the context menu. Using the Properties dialog, you can change manysettings for this directory.The two tabs of interest here are Directory Security andCustom Errors. One of the options on the Directory Security tab is Anonymous Accessand Authentication Control. Clicking this Edit button brings up the dialog box shown inFigure 16.6.
Within this dialog, you can disable anonymous access and turn on basic authentica-
tion.With the settings shown in Figure 16.6, only people who provide an appropriatename and password can view files in this directory.
To duplicate the behavior of the previous examples, you can also provide a page to
tell users that their authentication details were not correct. Closing the AuthenticationMethods dialog box allows you to choose the Custom Errors tab.
20 6728 CH16  9/2/04  1:17 PM  Page 373
Figure 16.6 IIS5 allows anonymous access by default but allows you to turn
on authentication.
The Custom Errors tab, shown in Figure 16.7, associates errors with error messages.
Here, you store the same rejection file used earlier, rejection.html ,shown in 
Listing 16.6. IIS enables you to easily provide a more specific error message than Apachedoes, providing the HTTP error code that occurred and a reason why it occurred. Forerror 401, which represents failed authentication, IIS provides five different reasons.Y oucould provide different messages for each.
That is all you need to do to require authentication for this directory using IIS5. Like
a lot of Windows software, it is easier to set up than similar Unix software but harder tocopy from machine to machine or directory to directory.Accidentally setting it up in away that makes your machine insecure is also easy.
The major flaw with IIS’s approach is that it authenticates web users by comparing
their login details to accounts on the machine. If you want to allow a user 
“john”to log
in with the password “password ”,you need to create a user account on the machine, or
on a domain, with this name and password.Y ou need to be very careful when you arecreating accounts for web authentication so that the users have only the account rightsthey need to view web pages and do not have other rights such as T elnet access.374 Chapter 16 Implementing Authentication with PHP and MySQL
20 6728 CH16  9/2/04  1:17 PM  Page 374
375 Using mod_auth_mysql Authentication
Figure 16.7 The Custom Errors tab lets you associate custom error pages
with error events.
Using mod_auth_mysql Authentication
As already mentioned, mod_auth is easy to set up with Apache and is effective. Because it
stores users in a text file, it is not really practical for busy sites with large numbers ofusers.
Fortunately, you can have most of the ease of 
mod_auth ,combined with the speed of
a database by using mod_auth_mysql .This module works in much the same way as
mod_auth ,but because it uses a MySQL database instead of a text file, it can search large
user lists quickly.
To use it, you need to compile and install the module on your system or ask your sys-
tem administrator to install it.
Installing mod_auth_mysql
To use mod_auth_mysql ,you need to set up Apache and MySQL according to the
instructions in Appendix A,“Installing PHP and MySQL,” but add a few extra steps.Y ou
20 6728 CH16  9/2/04  1:17 PM  Page 375
376 Chapter 16 Implementing Authentication with PHP and MySQL
can find reasonable instructions in the files README and USAGE ,which are in the 
distribution, but they refer to previous versions’ behavior in some places. Here is a summary:
1. Obtain the distribution archive for the module. It is on the CD-ROM that came
with this book, but you can always get the latest version fromhttp://sourceforge.net/projects/mod-auth-mysql/.
2. Unzip and untar the source code.3. Change to the 
mod_auth_mysql directory, run make,and then make install .Y ou
may need to change the install locations for MySQL in the make file ( MakeFile ).
4. Add this line to httpd.conf
LoadModule mysql_auth_module libexec/mod_auth_mysql.so
to dynamically load the module into Apache.
5. Create a database and table in MySQL to contain authentication information. It
does not need to be a separate database or table; you can use an existing table suchas the auth database from the example earlier in this chapter.
6. Add a line to your 
httpd.conf file to give mod_auth_mysql the parameters it
needs to connect to MySQL.The directive will look like
Auth_MySQL_Info hostname user password
Did It Work?
The easiest way to check whether your compilation worked is to see whether Apachewill start.T o start Apache, if you have SSL support, type
/usr/local/apache/bin/apachectl startssl
If you don’t have SSL support, you can type
/usr/local/apache/bin/apachectl start
If it starts with the 
Auth_MySQL_Info directive in the httpd.conf file,
mod_auth_mysql was successfully added.
Using mod_auth_mysql
After you have successfully installed the mod_auth_mysql module, using it is no harder
than using mod_auth .Listing 16.9 shows a sample .htaccess file that will authenticate
users with encrypted passwords stored in the database created earlier in this chapter.20 6728 CH16  9/2/04  1:17 PM  Page 376
377 Creating Your Own Custom Authentication
Listing 16.9 .htaccess — This .htaccess File Authenticates Users Against a
MySQL Database
ErrorDocument 401 /chapter16/rejection.html
AuthName “Realm Name ”
AuthType Basic
Auth_MySQL_DB auth
Auth_MySQL_Encryption_Types MySQLAuth_MySQL_Password_Table authorized_usersAuth_MySQL_Username_Field nameAuth_MySQL_Password_Field password
require valid-user
You can see that much of Listing 16.9 is the same as Listing 16.7.Y ou still specify an
error document to display in the case of error 401 (when authentication fails).Y ou againspecify basic authentication and give a realm name.As in Listing 16.7, you allow anyvalid, authenticated user access.
Because we are using 
mod_auth_mysql and did not want to use all the default set-
tings, we used some directives to specify how this should work. Auth_MySQL_DB ,
Auth_MySQL_Password_Table ,Auth_MySQL_Username_Field ,and
Auth_MySQL_Password_Field specify the name of the database, the table, the username
field, and the password field, respectively.
We included the directive Auth_MySQL_Encryption_Types to specify that we want to
use MySQL password encryption.Acceptable values are Plaintext ,Crypt_DES ,o r
MySQL .Crypt_DES is the default and uses standard Unix DES-encrypted passwords.
From the user perspective, this mod_auth_mysql example will work in exactly the
same way as the mod_auth example. She will be presented with a dialog box by her web
browser. If she successfully authenticates, she will be shown the content. If she fails, shewill be given the error page.
Formany websites,
mod_auth_mysql is ideal. It is fast and relatively easy to imple-
ment, and it allows you to use any convenient mechanism to add database entries fornew users. For more flexibility and the ability to apply fine-grained control to parts ofpages, you might want to implement your own authentication using PHP and MySQL.
Creating Your Own Custom Authentication
In this chapter, you looked at creating your own authentication methods including someflaws and compromises and using built-in authentication methods, which are less flexiblethan writing your own code. Later in the book, after you learn about session control,you will be able to write your own custom authentication with fewer compromises than
in this chapter.20 6728 CH16  9/2/04  1:17 PM  Page 377
378 Chapter 16 Implementing Authentication with PHP and MySQL
In Chapter 22, we develop a simple user authentication system that avoids some of
the problems we faced here by using sessions to track variables between pages.
In Chapter 26, we apply this approach to a real-world project and see how it can be
used to implement a fine-grained authentication system.
Further Reading
The details of HTTP authentication are specified by RFC 2617, which is available at
http://www.rfc-editor.org/rfc/rfc2617.txt
The documentation for mod_auth ,which controls basic authentication in Apache, can be
found at
http://www.apache.org/docs/mod/mod_auth.html
The documentation for mod_auth_mysql is inside the download archive. It is a tiny
download, so even if you just want to find out more about it, downloading the archiveto look at the 
readme file is not silly.
Next
The next chapter explains how to safeguard data at all stages of processing from input,through transmission, and in storage. It includes the use of SSL, digital certificates, andencryption.20 6728 CH16  9/2/04  1:17 PM  Page 378
17
Implementing Secure Transactions
with PHP and MySQL
INTHIS CHAPTER ,WE EXPLAIN HOW TO DEAL with user data securely from input,
through transmission, and in storage.This way, you can implement a transaction betweenyour site and a user securely from end to end.
Key topics covered in this chapter include
nProviding secure transactions
nUsing Secure Sockets Layer (SSL)
nProviding secure storage
nDetermining whether to store credit card numbers
nUsing encryption in PHP
Providing Secure Transactions
Providing secure transactions using the Internet is a matter of examining the flow of
information in your system and ensuring that, at each point, your information is secure.In the context of network security, there are no absolutes. No system is ever going to beimpenetrable. By secure,we mean that the level of effort required to compromise a sys-
tem or transmission is high compared to the value of the information involved.
If you are to direct your security efforts effectively, you need to examine the flow of
information through all parts of your system.The flow of user information in a typicalapplication, written using PHP and MySQL, is shown in Figure 17.1.21 6728 CH17  9/2/04  1:20 PM  Page 379
380 Chapter 17 Implementing Secure Transactions with PHP and MySQL
Figure 17.1 User information is stored or processed by these elements of a
typical web application environment.
The details of each transaction occurring in your system will vary, depending both on
your system design and on the user data and actions that triggered the transaction.Y ou
can examine all of them in a similar way. Each transaction between a web applicationand a user begins with the user’s browser sending a request through the Internet to theweb server. If the page is a PHP script, the web server will delegate processing of the
page to the PHP engine.
The PHP script might read or write data to disk. It might also use the 
include() or
require() constructs to include other PHP or HTML files. It also sends SQL queries to
the MySQL daemon and receives responses.The MySQL engine is responsible for read-ing and writing its own data on disk.
This system has three main parts:
nThe user’s machine
nThe Internet
nYour system
The following sections describe security considerations for each separately, but obviously
the user’s machine and the Internet are largely out of your control.
The User’s Machine
From your point of view, the user’s machine is running a web browser.Y ou have no con-trol over other factors such as how securely the machine is set up.Y ou need to bear inmind that the machine might be very insecure or even a shared terminal at a library,school, or café.
Many different browsers are available, each having slightly different capabilities. If you
consider only recent versions of the most popular two browsers, most of the differencesbetween them affect only how HTML will be rendered and displayed, but you also needto consider security or functionality issues.User’s
Browser
Stored
Pages &
ScriptsWeb
Server
Data
FilesPHP
Engine
MySQL
DataMySQL
EngineInternet21 6728 CH17  9/2/04  1:20 PM  Page 380
381 Providing Secure Transactions
Note that some people disable features that they consider a security or privacy risk,
such as Java, cookies, or JavaScript. If you use these features, you should either test thatyour application degrades gracefully for people without these features or consider pro-
viding a less feature-rich interface that allows these people to use your site.
Users outside the United States and Canada might have web browsers that support
only 40-bit encryption.Although the U.S. Government changed the law in January 2000to allow export of strong encryption (to nonembargoed countries) and 128-bit versionsare now available to most users, some of them will not have upgraded. Unless you aremaking guarantees of security to users in the text of your site, this issue need not overlyconcern you as a web developer. SSL automatically negotiates for you to enable yourserver and the user’s browser to communicate at the most secure level they both under-stand.
You cannot be sure that you are dealing with a web browser connecting to your site
through your intended interface. Requests to your site might be coming from anothersite stealing images or content, or from a person using software such as cURL to bypasssafety measures.
We look at the cURL library, which can be used to simulate connections from a
browser, in Chapter 19,“Using Network and Protocol Functions.”This tool is useful toyou, as a developer, but can also be used maliciously.
Although you cannot change or control the way users’ machines are set up, you do
need to bear these issues in mind.The variability of user machines might be a factor inhow much functionality you provide via server-side scripting (such as PHP) and howmuch you provide via client-side scripting (such as JavaScript).
Functionality provided by PHP can be compatible with every user’s browser because
the result is merely an HTML page. Using anything but very basic JavaScript involvestaking into account the different capabilities of individual browser versions.
From a security perspective, you are better off using server-side scripting for such
things as data validation because, that way, your source code is not visible to the user. Ifyou validate data only in JavaScript, users can see the code and perhaps circumvent it.
Data that needs to be retained can be stored on your own machines, as files or data-
base records, or on your users’ machines as cookies.We look at using cookies for storingsome limited data (a session key) in Chapter 22,“Using Session Control in PHP .”
The majority of data you store should reside on the web server or in your database.
There are a number of good reasons to store as little information as possible on a user’smachine. If the information is outside your system, you have no control over howsecurely it is stored, you cannot be sure that the user will not delete it, and you cannotstop the user from modifying it in an attempt to confuse your system.
The Internet
As with the user’s machine, you have very little control over the characteristics of theInternet, but this does not mean you can ignore these characteristics when designingyour system.21 6728 CH17  9/2/04  1:20 PM  Page 381
382 Chapter 17 Implementing Secure Transactions with PHP and MySQL
The Internet has many fine features, but it is an inherently insecure network.When
sending information from one point to another, you need to bear in mind that otherscould view or alter the information you are transmitting, as discussed in Chapter 15,“E-commerce Security Issues.”With this point in mind, you can decide what action to take.
Your response might be to
nTransmit the information anyway, knowing that it might not be private and might
not arrive unaltered.
nDigitally sign the information before transmitting it to protect it from tampering.
nEncrypt the information before transmitting it to keep it private and protect itfrom tampering.
nDecide that your information is too sensitive to risk any chance of interceptionand find another way to distribute your information.
The Internet is also a fairly anonymous medium. It is difficult to be certain whether the
person you are dealing with is who he claims to be. Even if you can assure yourselfabout a user to your own satisfaction, proving this beyond a sufficient level of doubt in aforum such as a court might be difficult.This causes problems with repudiation, whichwe discussed in Chapter 15.
In summary, privacy and repudiation are important issues when conducting transac-
tions over the Internet.
You can secure information flowing to and from your web server through the
Internet in at least two different ways:
nSecure Sockets Layer (SSL)
nSecure Hypertext Transfer Protocol (S-HTTP)
Both these technologies offer private, tamper-resistant messages and authentication, but
SSL is readily available and widely used, whereas S-HTTP has not really taken off.Welook at SSL in detail later in this chapter.
Your System
The part of the universe that you do have control over is your system.Y our system is
represented by the components within the rectangular box shown previously in Fig-
ure 17.1.These components might be physically separated on a network or all exist onthe one physical machine.
You are fairly safe in not worrying about the security of information while the vari-
ous third-party products that you use to deliver your web content are handling it.Theauthors of those particular pieces of software have probably given them more thoughtthan you have time to give them.As long as you are using an up-to-date version of awell-known product, you can find any well-known problems by judicious application of
Google or your favorite web search engine.Y ou should make it a priority to keep up todate with this information.21 6728 CH17  9/2/04  1:20 PM  Page 382
383 Using Secure Sockets Layer (SSL)
If installation and configuration are part of your role, you do need to worry about the
way software is installed and configured. Many mistakes made in security are a result of
not following the warnings in the documentation or involve general system administra-tion issues that are topics for another book.We suggest you buy a good book on admin-istering the operating system you intend to use or hire an expert system administrator.
One specific issue to consider when installing PHP is that installing PHP as a SAPI
module for your web server is generally more secure, as well as much more efficient,than running it via the CGI interface.
The primary point you need to worry about as a web application developer is what
your own scripts do or not do.What potentially sensitive data does your application
transmit to the user over the Internet? What sensitive data do you ask users to transmitto you? If you are transmitting information that should be a private transaction betweenyou and your users or that should be difficult for an intermediary to modify, you should
consider using SSL.
We already discussed using SSL between the user’s computer and the server.Y ou
should also think about the situation in which you are transmitting data from one com-ponent of your system to another over a network.A typical example arises when yourMySQL database resides on a different machine from your web server. PHP connects toyour MySQL server via TCP/IP , and this connection is unencrypted. If these machines
are both on a private local area network, you need to ensure that the network is secure.If the machines are communicating via the Internet, your system will probably run slow-ly, and you need to treat this connection in the same way as other connections over theInternet.
It is important that when your users think they are dealing with you, they are, in fact,
dealing with you. Registering for a digital certificate protects your visitors from spoofing(someone else impersonating your site), allows you to use SSL without users seeing awarning message, and provides an air of respectability to your online venture.
Do your scripts carefully check the data that users enter? Are you careful about stor-
ing information securely? We answer these questions in the next few sections of thischapter.
Using Secure Sockets Layer (SSL)
The Secure Sockets Layer protocol suite was originally designed by Netscape to facilitatesecure communication between web servers and web browsers. It has since been adopted asthe unofficial standard method for browsers and servers to exchange sensitive information.
Both SSL versions 2 and 3 are well supported. Most web servers either include SSL
functionality or can accept it as an add-on module. Internet Explorer and NetscapeNavigator have both supported SSL from version 3.
Networking protocols and the software that implements them are usually arranged as
a stack of layers. Each layer can pass data to the layer above or below and request servicesof the layer above or below. Figure 17.2 shows such a protocol stack.21 6728 CH17  9/2/04  1:20 PM  Page 383
384 Chapter 17 Implementing Secure Transactions with PHP and MySQL
Figure 17.2 The protocol stack used by an application layer protocol such as
Hypertext Transfer Protocol.
When you use HTTP to transfer information, the HTTP protocol calls on the
Transmission Control Protocol (TCP) ,which in turn relies on the Internet Protocol (IP) .This
protocol in turn needs an appropriate protocol for the network hardware being used totake packets of data and send them as an electrical signal to the destination.
HTTP is called an application layer protocol .There are many other application layer pro-
tocols such as FTP , SMTP , and T elnet (as shown in Figure 17.2), and others such as POPand IMAP .TCP is one of two transport layer protocols used in TCP/IP networks. IP isthe protocol at the network layer.The host to network layer is responsible for connectingthe host (computer) to a network.The TCP/IP protocol stack does not specify the pro-tocols used for this layer because you need different protocols for different types of net-works.
When you send data, the data is sent down through the stack from an application to
the physical network media.When you receive data, it travels up from the physical net-work, through the stack, to the application.
Using SSL adds an additional transparent layer to this model.The SSL exists between
the transport layer and the application layer.This configuration is shown in Figure 17.3.The SSL modifies the data from the HTTP application before giving it to the transportlayer to send it to its destination.HTTP FTP SMTP …
TCP/UDP
IP
VariousApplication Layer
Transport Layer
Network LayerHost to Network Layer
Figure 17.3 SSL adds an additional layer to the protocol stack as well as
application layer protocols for controlling its own operation.
SSL is capable of providing a secure transmission environment for protocols other than
HTTP . Other protocols can be used because SSL is essentially transparent.The SSL pro-vides the same interface to protocols above it as the underlying transport layer. It thentransparently deals with handshaking, encryption, and decryption.SSL
Handshake
ProtocolSSL
Change
CipherHTTPSSL
Alert
Protocol…
SSL Record Protocol
TCP
IPApplication Layer
SSL Layer
Transport Layer
Network Layer
Host to Network Layer Host to Network21 6728 CH17  9/2/04  1:20 PM  Page 384
385 Using Secure Sockets Layer (SSL)
When a web browser connects to a secure web server via HTTP , the two need to fol-
low a handshaking protocol to agree on what they will use for items such as authentica-tion and encryption.
The handshake sequence involves the following steps:
1. The browser connects to an SSL-enabled server and asks the server to authenticate
itself.
2. The server sends its digital certificate.3. The server might optionally (and rarely) request that the browser authenticate
itself.
4. The browser presents a list of the encryption algorithms and hash functions it sup-
ports.The server selects the strongest encryption that it also supports.
5. The browser and server generate session keys:
a. The browser obtains the server’s public key from its digital certificate and
uses it to encrypt a randomly generated number.
b.The server responds with more random data sent in plaintext (unless the
browser has provided a digital certificate at the server’s request, in whichcase the server will use the browser’s public key).
c.The encryption keys for the session are generated from this random data
using hash functions.
Generating good quality random data, decrypting digital certificates, generating keys, and
using public key cryptography take time, so this handshake procedure takes time.Fortunately, the results are cached, so if the same browser and server want to exchange
multiple secure messages, the handshake process and the required processing time occur
only once.
When data is sent over an SSL connection, the following steps occur:
1. It is broken into manageable packets.2. Each packet is (optionally) compressed.3. Each packet has a message authentication code (MAC) calculated using a hashing
algorithm.
4. The MAC and compressed data are combined and encrypted.5. The encrypted packets are combined with header information and sent to the net-
work.
The entire process is shown in Figure 17.4.21 6728 CH17  9/2/04  1:20 PM  Page 385
386 Chapter 17 Implementing Secure Transactions with PHP and MySQL
Figure 17.4 SSL breaks up, compresses, hashes, and encrypts data before
sending it.
One thing you might notice from the diagram is that the TCP header is added after the
data is encrypted.This means that routing information could still potentially be tamperedwith, and although snoopers cannot tell what information you are exchanging, they cansee who is exchanging it.
The reason that SSL includes compression before encryption is that although most
network traffic can be (and often is) compressed before being transmitted across a net-work, encrypted data does not compress well. Compression schemes rely on identifying
repetition or patterns within data.Trying to apply a compression algorithm after data has
been turned into an effectively random arrangement of bits via encryption is usuallypointless. It would be unfortunate if SSL, which was designed to increase network secu-rity, had the side effect of dramatically increasing network traffic.
Although SSL is relatively complex, users and developers are shielded from most of
what occurs because its external interfaces mimic existing protocols.
In the future, SSL 3.0 may be replaced by Transport Layer Security (TLS) 1.0, but at
the time of writing,TLS is a draft standard and not supported by any servers orbrowsers.TLS is intended to be a truly open standard, rather than a standard defined byone organization but made available for others. It is based directly on SSL 3.0 but con-tains improvements intended to overcome weaknesses of SSL and offer further flexibility.Compress
Calculate MAC
EncryptPacketize<html><head><title><My Page</title>… Our data
d><title> M <html><hea y Page</ti Data Packets
Compressed data
Message Authentication Code
Encrypted Packets
TCP PacketsTCP
header21 6728 CH17  9/2/04  1:20 PM  Page 386
387 Providing Secure Storage
Screening User Input
One of the principles of building a safe web application is that you should never trust
user input.Always screen user data before putting it in a file or database or passing itthrough a system execution command.
In several places throughout this book, we have described techniques you can use to
screen user input.We’ve listed them briefly here as a reference:
nYou should use the addslashes() function to filter user data before it is passed to
a database.This function escapes out characters that might be troublesome to adatabase.Y ou can use the 
stripslashes() function to return the data to its origi-
nal form.
nYou can switch on the magic_quotes_gpc and magic_quotes_runtime directives
in your php.ini file.These directives automatically add and strip slashes for you.
The magic_quotes_gpc applies this formatting to incoming GET,POST,and cookie
variables, and the magic_quote_runtime applies it to data going to and from data-
bases.
nYou should use the escapeshellcmd() function when you are passing user data to
a system() or exec() call or to backticks.This function escapes out any
metacharacters that can be used to force your system to run arbitrary commandsentered by a malicious user.
nYou can use the strip_tags() function to strip out HTML and PHP tags from a
string.This function prevents users from planting malicious scripts in user data thatyou might echo back to the browser.
nYou can use the htmlspecialchars() function, which converts characters to their
HTML entity equivalents. For example, <is converted to &lt;.This function con-
verts any script tags to harmless characters.
Providing Secure Storage
The three different types of stored data (HTML or PHP files, script-related data, and
MySQL data) are often stored in different areas of the same disk but are shown separate-ly in Figure 17.1. Each type of storage requires different precautions and is examinedseparately.
The most dangerous type of data you store is executable content. On a website, this
usually means scripts.Y ou need to be very careful that your file permissions are set cor-rectly within your web hierarchy. By this, we mean the directory tree starting from
htdocs on an Apache server or inetpub on an IIS server. Others need to have permis-
sion to read your scripts to see their output, but they should not be able to write over oredit them.21 6728 CH17  9/2/04  1:20 PM  Page 387
388 Chapter 17 Implementing Secure Transactions with PHP and MySQL
The same proviso applies to directories within the web hierarchy. Only you should be
able to write to these directories. Other users, including the user who the web serverruns as, should not have permission to write or create new files in directories that can be
loaded from the web server. If you allow others to write files here, they could write amalicious script and execute it by loading it through the web server.
If your scripts need permission to write to files, make a directory outside the web
tree for this purpose.This is particularly true for file upload scripts. Scripts and the datathat they write should not mix.
When writing sensitive data, you might be tempted to encrypt it first.This approach,
however, usually provides little value. Let’s put it this way: If you have a file called 
creditcardnumbers.txt on your web server and a cracker obtains access to your server
and can read the file, what else can he read? T o encrypt and decrypt data, you need aprogram to encrypt data, a program to decrypt data, and one or more key files. If thecracker can read your data, there is probably nothing stopping him from reading yourkey and other files.
Encrypting data could be valuable on a web server, but only if the software and key
to decrypt the data were not stored on the web server, but were stored on anothermachine instead. One way of securely dealing with sensitive data would be to encrypt iton the server and then transmit it to another machine, perhaps via email.
Database data is similar to data files. If you set up MySQL correctly, only MySQL can
write to its data files.This means that you need to worry only about accesses from userswithin MySQL.We already discussed MySQL’s own permission system, which assignsparticular rights to particular usernames at particular hosts.
One issue that needs special mention is that you will often need to write a MySQL
password in a PHP script.Y our PHP scripts are generally publicly loadable.This issue isnot as much of a disaster as it might seem at first. Unless your web server configurationis broken, your PHP source is not visible from outside.
If your web server is configured to parse files with the extension 
.php using the PHP
interpreter, outsiders will not be able to view the uninterpreted source. However, youshould be careful when using other extensions. If you place 
.inc files in your web direc-
tories, anybody requesting them will receive the unparsed source.Y ou either need toplace include files outside the web tree, configure your server not to deliver files withthis extension, or use 
.php as the extension on these files as well.
If you are sharing a web server with others, your MySQL password might be visible
to other users on the same machine who can also run scripts via the same web server.Depending on how your system is set up, this situation might be unavoidable.Y ou canavoid this problem by having a web server set up to run scripts as individual users or by
having each user run her own instance of the web server. If you are not the administra-tor for your web server (as is likely the case if you are sharing a server), discussing thisissue with your administrator and exploring security options might be worthwhile.21 6728 CH17  9/2/04  1:20 PM  Page 388
389 Using Encryption in PHP
Determining Whether to Store Credit Card
Numbers
Now that we’ve discussed secure storage for sensitive data, one type of sensitive data
deserves special mention. Internet users are paranoid about their credit card numbers. Ifyou are going to store them, you need to be very careful.Y ou also need to ask yourself
why you are storing them and whether it is really necessary.
What are you going to do with a card number? If you have a one-off transaction to
process real-time card processing, you will be better off accepting the card number fromyour customer and sending it straight to your transaction processing gateway without
storing it at all.
If you have periodic charges to make, such as the authority to charge a monthly fee
to the same card for an ongoing subscription, this approach might not be an option. Inthis case, you should think about storing the numbers somewhere other than the webserver.
If you are going to store large numbers of your customers’ card details, make sure that
you have a skilled and somewhat paranoid system administrator who has enough time to
check up-to-date sources of security information for the operating system and otherproducts you use.
Using Encryption in PHP
A simple, but useful, task you can use to demonstrate encryption is sending encryptedemail. For many years, the de facto standard for encrypted email has been PGP , whichstands for Pretty Good Privacy. Philip R. Zimmermann wrote PGP specifically to addprivacy to email.
Freeware versions of PGP are available, but you should note that it is not Free
Software.The freeware version can legally be used only for noncommercial use.
If you are a U.S. citizen residing in the United States or a Canadian citizen residing in
Canada, you can obtain the freeware version from
http://web.mit.edu/network/pgp.html
If you want to use PGP for commercial use, you can get a commercial license from PGP
Corporation. For details, see
http://www.pgp.com
To obtain the freeware version of PGP for use outside the United States and Canada, see
the list of international download sites at the international PGP page:
http://www.pgpi.org
An open source alternative to PGP has more recently become available. Gnu Privacy
Guard, known as GPG, is a free(as in beer) and Free(as in speech) replacement for PGP .
It contains no patented algorithms and can be used commercially without restriction.21 6728 CH17  9/2/04  1:20 PM  Page 389
390 Chapter 17 Implementing Secure Transactions with PHP and MySQL
The two products perform the same task in fairly similar ways. If you intend to use
the command-line tools, the differences might not matter, but each has different inter-faces such as plug-ins for email programs that automatically decrypt email when it is
received.
GPG is available fromhttp://www.gnupg.org
You can use the two products together, creating an encrypted message using GPG for
somebody using PGP (as long as it is a recent version) to decrypt. Because we are inter-ested in the creation of messages at the web server, we provide an example here usingGPG. Using PGP instead does not require many changes.
As well as the usual requirements for examples in this book, you need to have GPG
available for this code to work. GPG might already be installed on your system. If it is
not, don’t be concerned—the installation procedure is straightforward, but the setup canbe a bit tricky.
Installing GPG
To add GPG to your Linux machine, you can download the appropriate archive file
from www.gnupg.org. Depending on whether you choose the 
.tar.gz or .tar.bz2
archive, you need to use gunzip or tarto extract the files from the archive.
To compile and install the program, use the same commands as for most Linux programs:
configure (or ./configure depending on your system)
make
make install
If you are not the root user, you need to run the configure script with the --prefix
option as follows:
./configure --prefix=/path/to/your/directory
You use this option because a nonroot user will not have access to the default directory
for GPG.
If all goes well, GPG will be compiled and the executable copied to
/usr/local/bin/gpg or the directory that you specified.Y ou can change many options.
See the GPG documentation for details.
For a Windows server, the process is even easier. Download the zip file, unzip it, and
place gpg.exe somewhere in your PATH. ( C:\Windows\ or similar will be fine). Create
a directory at C:\gnupg .Then open a command prompt and type gpg.
You also need to install GPG or PGP and generate a key pair on the system where
you plan to check mail.
On the web server, you’ll find very few differences between the command-line ver-
sions of GPG and PGP , so you might as well use GPG because it is free. On the machinewhere you read mail, you might prefer to buy a commercial version of PGP to have anicer graphical user interface plug-in to your mail reader.21 6728 CH17  9/2/04  1:20 PM  Page 390
391 Using Encryption in PHP
If you do not already have a key pair, generate one on your mail reading machine.
Recall that a key pair consists of a public key, which other people (and your PHP script)use to encrypt mail before sending it to you, and a private key, which you use to eitherdecrypt received messages or sign outgoing mail. It is important that you generate thekey on your mail-reading machine rather than on your web server because your private
key should not be stored on the web server.
If you are using the command-line version of GPG to generate your keys, enter the
following command:
gpg –-gen-key
You are prompted with a number of questions. Most of them have a default answer that
you can accept. On separate lines, you are asked for your real name, your email address,
and a comment, which will be used to name the key. (My key is named ‘Luke Welling
<luke@tangledweb.com.au> ’.I am sure that you can see the pattern. Had I provided a
comment, too, it would be between the name and address.)
Toexport the public key from your new key pair, you can use the following 
command:
gpg --export > filename
This command gives you a binary file suitable for importing into the GPG or PGP key
ring on another machine. If you want to email this key to people so that they can
import it into their key rings, you can instead create an ASCII version like this:
gpg --export –a > filename
Having extracted the public key, you can upload the file to your account on the web
server by using FTP .
The following commands assume that you are using Unix.The steps are the same for
Windows, but directory names and system commands are different. First, log in to your
account on the web server and change the permissions on the file so that other userswill be able to read it.T ype
chmod 644 filename
You need to create a key ring so that the user who your PHP scripts get executed as can
use GPG.Which user this is depends on how your server is set up. It is often the user
nobody but could be something else.
Change so that you are the web server user.Y ou need to have root access to the serv-
er to do this. On many systems, the web server runs as nobody .The following examples
assume this user. (Y ou can change it to the appropriate user on your system.) If this isthe case on your system, type
su root
su nobody
Create a directory where nobody can store his key ring and other GPG configuration
information. It needs to be in nobody ’s home directory.21 6728 CH17  9/2/04  1:20 PM  Page 391
392 Chapter 17 Implementing Secure Transactions with PHP and MySQL
The home directory for each user is specified in /etc/passwd .On many Linux sys-
tems,nobody ’s home directory defaults to /,which nobody does not have permission to
write to. On many BSD systems, nobody ’s home directory defaults to /nonexistent ,
which, because it doesn’t exist, cannot be written to. On our system, nobody has been
assigned the home directory /tmp.You need to make sure your web server user has a
home directory that he can write to.
Type
cd ~
mkdir .gnupg
The user nobody needs a signing key of her own.T o create this key, run this command
again:
gpg --gen-key
Because your nobody user probably receives very little personal email, you can create a
signing-only key for her.This key’s only purpose is to allow you to trust the public keyyou extracted earlier.
Toimport the pubic key exported earlier, use the following command:
gpg --import filename
To tell GPG that you want to trust this key, you need to edit the key’s properties using
this command:
gpg --edit-key ‘Luke Welling <luke@tangledweb.com.au> ’
On this line, the text in single quotation marks is the name of the key. Obviously, the
name of your key will not be ‘Luke Welling <luke@tangledweb.com.au> ’,b u t  a
combination of the name, comment, and email address you provided when generating it.
Options within this program include help,which describes the available commands:
trust ,sign,and save.
Type trust and tell GPG that you trust your key fully.T ype sign to sign this public
key using nobody ’s private key. Finally, type save to exit this program, keeping your
changes.
Testing GPG
GPG should now be set up and ready to use. Creating a file containing some text and
saving it as test.txt will allow you to test it.
Typing the following command (modified to use the name of your key)
gpg -a --recipient ‘Luke Welling <luke@tangledweb.com.au> ’--encrypt test.txt
should give you the warning
gpg: Warning: using insecure memory!
and create a file named test.txt.asc .If you open test.txt.asc ,you should see an
encrypted message like this:21 6728 CH17  9/2/04  1:20 PM  Page 392
393 Using Encryption in PHP
-----BEGIN PGP MESSAGE-----
Version: GnuPG v1.0.3 (GNU/Linux)Comment: For info see http://www.gnupg.org
hQEOA0DU7hVGgdtnEAQAhr4HgR7xpIBsK9CiELQw85+k1QdQ+p/FzqL8tICrQ+B3
0GJTEehPUDErwqUw/uQLTds0r1oPSrIAZ7c6GVkh0YEVBj2MskT81IIBvdo95OyHK9PUCvg/rLxJ1kxe4Vp8QFET5E3FdII/ly8VP5gSTE7gAgm0SbFf3S91PqwMyTkD/2oJEvL6e3cP384s0i8lrBbDbOUAAhCjjXt2DX/uX9q6P18QW56UICUOn4DPaW1G/gnNZCkcVDgLcKfBjbkB/TCWWhpA7o7kX4CIcIh7KlIMHY4RKdnCWQf271oE+8i9cJRSCMsFIoI6MMNRCQHY6p9bfxL2uE39IRJrQbe6xoEe0nkB0uTYxiL0TG+FrNrEtvBVMS0nsHu7HJey+oY4Z833pk5+MeVwYumJwlvHjdZxZmV6wz46GO2XGT17b28VwSBnWOoBHSZsPvkQXHTOq65EixP8y+YJvBN3z4pzdH0Xa+NpqbH7q3+xXmd30hDR+u7t6MxTLDbgC+NR=gfQu-----END PGP MESSAGE-----
You should be able to transfer this file to the system where you generated the key initial-
ly and run
gpg test.txt.asc
to retrieve your original text.The text will be written to a file with the same name as ithad before—in this case,
test.txt .
To have the text echoed to the screen, use the -dflag:
gpg -d test.txt.asc
To place the text in a file of your choice rather than the default name, you can use the -
oflag as well and specify an output file like this:
gpg –do test.out test.txt.asc
Note that the output file is named first.
If you have GPG set up so that the user your PHP scripts run as can use it from the
command line, you are most of the way there. If this setup is not working, see your sys-tem administrator or the GPG documentation.
Listings 17.1 and 17.2 enable people to send encrypted email by using PHP to call
GPG.
Listing 17.1 private_mail.php — The HTML Form to Send Encrypted Email
<html>
<body><h1>Send Me Private Mail</h1>
<?php
// you might need to change this line, if you do not use// the default ports, 80 for normal traffic and 443 for SSLif($_SERVER[ ‘SERVER_PORT ’]!=443)21 6728 CH17  9/2/04  1:20 PM  Page 393
394 Chapter 17 Implementing Secure Transactions with PHP and MySQL
echo ‘<p><font color = red>
WARNING: you have not connected to this page using SSL.Your message could be read by others.</font></p> ’;
?>
<form method = post action = “send_private_mail.php ”><br>
Your email address:<br><input type = text name = from size = 38><br>Subject:<br><input type = text name = title size = 38><br>Your message:<br><textarea name = body cols = 30 rows = 10></textarea><br><input type = submit value = “Send!”>
</form></body>
</html>
Listing 17.2 send_private_mail.php — The PHP Script to Call GPG and Send
Encrypted Email
<?php
//create short variable names$from = $_POST[ ‘from’];
$title = $_POST[ ‘title’];
$body = $_POST[ ‘body’];
$to_email = ‘luke@localhost ’;
// Tell gpg where to find the key ring
// On this system, user nobody ’s home directory is /tmp/
putenv(‘GNUPGHOME=/tmp/.gnupg ’);
//create a unique file name
$infile = tempnam( ‘’, ‘pgp’);
$outfile = $infile. ’.asc’;
//write the user ’s text to the file
$fp = fopen($infile, ‘w’);
fwrite($fp, $body);fclose($fp);
//set up our command
$command =  “/usr/local/bin/gpg -a \\Listing 17.1 Continued21 6728 CH17  9/2/04  1:20 PM  Page 394
395 Using Encryption in PHP
--recipient ‘Luke Welling <luke@tangledweb.com.au> ’\\
--encrypt -o $outfile $infile ”;
// execute our gpg command
system($command, $result);
//delete the unencrypted temp file
unlink($infile);
if($result==0)
{
$fp = fopen($outfile, ‘r’);
if(!$fp||filesize ($outfile)==0){
$result = -1;
}else{
//read the encrypted file$contents = fread ($fp, filesize ($outfile)) ;//delete the encrypted temp fileunlink($outfile);
mail($to_email, $title, $contents, “From: $from ”);
echo ‘<h1>Message Sent</h1>
<p>Your message was encrypted and sent.<p>Thank you. ’;
}
}
if($result!=0)
{
echo ‘<h1>Error:</h1>
<p>Your message could not be encrypted, so has not been sent.<p>Sorry. ’;
}
?>
To make this code work for you, you need to change a few things. Email will be sent to
the address in $to_email .
In Listing 17.2, you need to change the line
putenv(‘GNUPGHOME=/tmp/.gnupg ’);
to reflect the location of your GPG key ring. On our system, the web server runs as the
user nobody and has the home directory /tmp/ .Listing 17.2 Continued21 6728 CH17  9/2/04  1:20 PM  Page 395
396 Chapter 17 Implementing Secure Transactions with PHP and MySQL
We used the function tempnam() to create a unique temporary filename.Y ou can
specify both the directory and a filename prefix.Y ou are going to create and delete thesefiles in around 1 second, so it’s not very important what you call them as long as they areunique.We specified a prefix of 
‘pgp’but let PHP use the system temporary directory.
The statement
$command =  ‘/usr/local/bin/gpg -a ‘.
‘--recipient ‘Luke Welling <luke@tangledweb.com.au> ’‘.
‘--encrypt -o $outfile $infile ’;
sets up the command and parameters that will be used to call GPG.Y ou need to modify
this statement to suit your situation.As when you used it on the command line, youneed to tell GPG which key to use to encrypt the message.
The statement
system($command, $result);
executes the instructions stored in $command and stores the return value in $result .Y ou
could ignore the return value, but it lets you have an ifstatement and tells the user that
something went wrong.
After you finish with the temporary files you use, you delete them using the
unlink() function.This means that your user’s unencrypted email is stored on the server
for a short time. If the server fails during execution, it is even possible that the file couldbe left on the server.
While you are thinking about the security of your script, it is important to consider
all flows of information within your system. GPG encrypts your email and allows yourrecipient to decrypt it, but how does the information originally come from the sender?
If you are providing a web interface to send GPG-encrypted mail, the flow of informa-tion will look something like Figure 17.5.
Figure 17.5 In the encrypted email application, the message is sent via the
Internet three times.
In this figure, each arrow represents the message being sent from one machine to anoth-
er. Each time the message is sent, it travels through the Internet and might pass througha number of intermediary networks and machines.3Recipient’s
Mail
Server2
Sender’s
BrowserRecipient’s
Mail
ClientWeb
Server121 6728 CH17  9/2/04  1:20 PM  Page 396
397 Further Reading
The script you are looking at here exists on the machine labeled Web Server in the
diagram.At the web server, the message is encrypted using the recipient’s public key. It isthen sent via SMTP to the recipient’s mail server.The recipient connects to his mailserver, probably using POP or IMAP , and downloads the message using a mail reader.Here, he decrypts the message using his private key.
The data transfers in Figure 17.5 are labeled 1, 2, and 3. For stages 2 and 3, the infor-
mation being transmitted is a GPG-encrypted message and is of little value to anybodywho does not have the private key. For transfer 1, the message being transmitted is thetext that the sender entered in the form.
If the information is important enough that you need to encrypt it for the second
and third leg of its journey, sending it unencrypted for the first leg is a bit silly.Therefore, this script belongs on a server that uses SSL.
If you attempt connection to this script without SSL, it will provide a warning.Y ou
check this by checking the value of 
$_SERVER[ ‘SERVER_PORT ’].SSL connections come
in on port 443.Any other connection will cause an error.
Instead of providing an error message, you could deal with this situation in other
ways.Y ou could redirect the user to the same URL via an SSL connection.Y ou could
also choose to ignore it because it is not important if the form was delivered using asecure connection.What is usually important is that the details the user typed into theform are sent to you securely.Y ou could simply have given a complete URL as theaction of your form.
Currently, the open form tag looks like this:
<form method = post action = “send_private_mail.php ”>
You could alter it to send data via SSL even if the user connected without SSL, like this:
<form method = post action = “https://webserver/send_private_mail.php ”>
If you hard-code the complete URL like this, you can be assured that visitors’ data will
be sent using SSL, but you will need to modify the code every time you use it onanother server or even in another directory.
Although in this case, and many others, it is not important that the empty form is
sent to the user via SSL, sending it this way is usually a good idea. Seeing the little pad-lock symbol in the status bar of their browsers reassures people that their informationwill be sent securely.They should not need to look at your HTML source and see theaction attribute of the form to know whether their data will be safe.
Further Reading
The specification for SSL version 3.0 is available from Netscape:
http://home.netscape.com/eng/ssl3/21 6728 CH17  9/2/04  1:20 PM  Page 397
398 Chapter 17 Implementing Secure Transactions with PHP and MySQL
If you would like to know more about how networks and networking protocols work, a
classic introductory text is Andrew S.Tanenbaum’s Computer Networks .
Next
We’ve wrapped up our discussion of e-commerce and security issues. In the next part of
the book, we look at some more advanced PHP techniques, including interacting withother machines on the Internet, generating images on the fly, and using session control.21 6728 CH17  9/2/04  1:20 PM  Page 398
IV
Advanced PHP Techniques
18Interacting with the File System and the Server
19Using Network and Protocol Functions
20Managing the Date and Time
21Generating Images
22Using Session Control in PHP
23Other Userful Features22 6728 Part4  9/2/04  1:22 PM  Page 399
22 6728 Part4  9/2/04  1:22 PM  Page 400
18
Interacting with the File System
and the Server
INCHAPTER 2,“S TORING AND RETRIEVING DATA,”you saw how to read data from and
write data to files on the web server.This chapter covers other PHP functions thatenable you to interact with the file system on the web server.
Key topics covered in this chapter include
nUploading files with PHP
nUsing directory functions
nInteracting with files on the server
nExecuting programs on the server
nUsing server environment variables
To discuss the uses of these functions, we look at an example. Consider a situation in
which you would like your client to be able to update some of a website’s content—forinstance, the current news about his company. (Or maybe you want a friendlier interfacethan FTP or SCP for yourself.) One approach is to let the client upload the content filesas plain text.These files are then available on the site, through a template you havedesigned with PHP , as you did in Chapter 6,“Object-Oriented PHP .”
Before we dive into the file system functions, let’s briefly look at how file upload
works.
Uploading Files
One useful piece of PHP functionality is support for HTTP upload. Instead of files
coming from the server to the browser using HTTP , they go in the opposite direction—that is, from the browser to the server. Usually, you implement this configuration with anHTML form interface.The one used in this example is shown in Figure 18.1.23 6728 CH18  9/2/04  1:17 PM  Page 401
402 Chapter 18 Interacting with the File System and the Server
Figure 18.1 The HTML form used for this file upload has different fields
and field types from those of a normal HTML form.
As you can see, the form has a box where the user can enter a filename or click the
Browse button to browse files available to him locally.Y ou might not have seen a fileupload form before.We look at how to implement this form shortly.
After entering a filename, the user can click Send File, and the file will be uploaded
to the server, where a PHP script is waiting for it.
HTML for File Upload
To implement file upload, you need to use some HTML syntax that exists specially for
this purpose.The HTML for this form is shown in Listing 18.1.
Listing 18.1 upload.html —HTML Form for File Upload
<html>
<head>
<title>Administration - upload new files</title>
</head><body><h1>Upload new news files</h1><form enctype= ”multipart/form-data ”action=”upload.php ”method=”post”>
<input type= ”hidden”name=”MAX_FILE_SIZE ”value=”1000000”>
Upload this file: <input name= ”userfile ”type=”file”>
<input type= ”submit”value=”Send File ”>
</form></body>
</html>
Note that this form uses POST.File uploads also work with the PUTmethod supported
by Netscape Composer and Amaya although you would need to make significant
changes to the code.They do not work with GET.
23 6728 CH18  9/2/04  1:17 PM  Page 402
403 Uploading Files
The extra features in this form are as follows:
nIn the <form> tag, you must set the attribute enctype= ”multipart/form-data ”to
let the server know that a file is coming along with the regular form information.
nYou must have a form field that sets the maximum size file that can be uploaded.
This is a hidden field and is shown here as
<input type= ”hidden”name=”MAX_FILE_SIZE ”value=”1000000”>
The name of this form field must be MAX_FILE_SIZE .The value is the maximum
size (in bytes) of files you will allow people to upload. Here, we set this field to1,000,000 bytes (roughly one megabyte).Y ou may like to make it bigger or smallerfor your application.
nYou need an input of type file,shown here as
<input name= ”userfile ”type=”file”>
You can choose whatever name you like for the file, but you should keep it in mind
because you will use this name to access your file from the receiving PHP script.
A Note on Security
Before we go any further, it’s worth noting that some versions of PHP have had securityvulnerabilities in the file upload code. If you decide to use file upload on your produc-tion server, you should make sure you are using a recent version of PHP and keep youreyes open for patches.
This issue shouldn’t deter you from using such a useful technology, but you should be
careful about how you write your code and consider restricting access to file upload to,for example, site administrators and content managers.
Writing the PHP to Deal with the File
Writing the PHP to catch the file is reasonably straightforward but does depend on thePHP version and configuration settings.The function and variable names have changedover different versions and depend on whether you have 
register_globals turned on.
The code here does not require register_globals ,but it does require a PHP version
of at least 4.1.
When the file is uploaded, it briefly goes into a temporary location on the web serv-
er. By default, this is the web server’s main temporary directory. If you do not move,copy, or rename the file before your script finishes execution, it will be deleted when thescript ends.
The data you need to handle in your PHP script is stored in the superglobal array
$_FILES .If you have register_globals turned on, you can also access the information
through direct variable names. However, this is probably the area in which it is mostimportant to have 
register_globals turned off, or at least to act as though it is and use
the superglobal array and ignore the globals.23 6728 CH18  9/2/04  1:17 PM  Page 403
404 Chapter 18 Interacting with the File System and the Server
The entries in $_FILES will be stored with the name of the <file> tag from your
HTML form.Y our form element is named userfile ,so the array will have the follow-
ing contents:
nThe value stored in $_FILES[ ‘userfile ’][‘tmp_name ’]is the place where the
file has been temporarily stored on the web server.
nThe value stored in $_FILES[ ‘userfile ’][‘name’]is the file’s name on the
user’s system.
nThe value stored in $_FILES[ ‘userfile ’][‘size’]is the size of the file in bytes.
nThe value stored in $_FILES[ ‘userfile ’][‘type’]is the MIME type of the
file—for example, text/plain or image/gif .
nThe value stored in $_FILES[ ‘userfile ’][‘error’]will give you any error
codes associated with the file upload.This functionality was added at PHP 4.2.0.
Given that you know where the file is and what it’s called, you can now copy it to
somewhere useful.At the end of your script’s execution, the temporary file will be deleted. Hence, you must move or rename the file if you want to keep it.
For the example, you will use the uploaded files as recent news articles, so you’ll strip
out any tags that might be in them and move them to a more useful directory.A scriptthat performs this task is shown in Listing 18.2.
Listing 18.2 upload.php —PHP to Catch the Files from the HTML Form
<html>
<head>
<title>Uploading...</title>
</head><body><h1>Uploading file...</h1><?php
if ($_FILES[ ‘userfile ’][‘error’] > 0)
{
echo ‘Problem: ‘;
switch ($_FILES[ ‘userfile ’][‘error’])
{
case 1:  echo ‘File exceeded upload_max_filesize ’;  break;
case 2:  echo ‘File exceeded max_file_size ’;  break;
case 3:  echo ‘File only partially uploaded ’;  break;
case 4:  echo ‘No file uploaded ’;  break;
}exit;
}23 6728 CH18  9/2/04  1:17 PM  Page 404
405 Uploading Files
// Does the file have the right MIME type?
if ($_FILES[ ‘userfile ’][‘type’] != ‘text/plain ’)
{
echo ‘Problem: file is not plain text ’;
exit;
}
// put the file where we ’d like it
$upfile = ‘/uploads/ ’.$_FILES[ ‘userfile ’][‘name’] ;
if (is_uploaded_file($_FILES[ ‘userfile ’][‘tmp_name ’]))
{
if (!move_uploaded_file($_FILES[ ‘userfile ’][‘tmp_name ’], $upfile))
{
echo ‘Problem: Could not move file to destination directory ’;
exit;
}
}else{
echo ‘Problem: Possible file upload attack. Filename: ‘;
echo $_FILES[ ‘userfile ’][‘name’];
exit;
}
echo ‘File uploaded successfully<br><br> ’;
// reformat the file contents
$fp = fopen($upfile, ‘r’);
$contents = fread ($fp, filesize ($upfile));fclose ($fp);
$contents = strip_tags($contents);
$fp = fopen($upfile, ‘w’);
fwrite($fp, $contents);fclose($fp);
// show what was uploaded
echo ‘Preview of uploaded file contents:<br><hr> ’;
echo $contents;echo ‘<br><hr> ’;
?></body>
</html>Listing 18.2 Continued23 6728 CH18  9/2/04  1:17 PM  Page 405
406 Chapter 18 Interacting with the File System and the Server
Interestingly enough, most of this script is error checking. File upload involves potential
security risks, and you need to mitigate these risks where possible.Y ou need to validatethe uploaded file as carefully as possible to make sure it is safe to echo to your visitors.
Let’s go through the main parts of the script.Y ou begin by checking the error code
returned in 
$_FILES[ ‘userfile ’][‘error’].This error code was introduced at 
PHP 4.2.0. Since PHP 4.3, a constant is also associated with each of the codes.Thepossible constants and values are as follows:
nUPLOAD_ERROR_OK ,value 0, means no error occurred.
nUPLOAD_ERR_INI_SIZE ,value 1, means that the size of the uploaded file exceeds
the maximum value specified in your php.ini file with the upload_max_file-
size directive.
nUPLOAD_ERR_FORM_SIZE ,value 2, means that the size of the uploaded file exceeds
the maximum value specified in the HTML form in the MAX_FILE_SIZE element.
nUPLOAD_ERR_PARTIAL ,value 3, means that the file was only partially uploaded.
nUPLOAD_ERR_NO_FILE ,value 4, means that no file was uploaded.
If you want to use an older version of PHP , you can perform a manual version of some
of these checks using sample code in the PHP manual or in older editions of this book.
You also check the MIME type. In this case, we want you to upload text files only, so
test the MIME type by making sure that $_FILES[ ‘userfile ’][‘type’]contains
text/plain .This is really only error checking. It is not security checking.The MIME
type is inferred by the user’s browser from the file extension and passed to your server. Ifthere were some advantage to be obtained by passing a false one, it would not be hardfor a malicious user to do so.
You then check that the file you are trying to open has actually been uploaded and is
not a local file such as 
/etc/passwd .We come back to this topic in a moment.
If that all works out okay, you then copy the file into the include directory.We used
/uploads/ in this example; it’s outside the web document tree and therefore a good
place to put files that are to be included elsewhere.
You then open up the file, clean out any stray HTML or PHP tags that might be in
the file using the strip_tags() function, and write the file back. Finally, you display the
contents of the file so the user can see that her file uploaded successfully.
The results of one (successful) run of this script are shown in Figure 18.2.
In September 2000, an exploit was announced that could allow a cracker to fool PHPfile upload scripts into processing a local file as if it had been uploaded.This exploit wasdocumented on the BUGTRAQ mailing list.Y ou can read the official security advisoryat one of the many BUGTRAQ archives, such as http://lists.insecure.org/bugtraq/2000/Sep/0237.html.23 6728 CH18  9/2/04  1:17 PM  Page 406
407 Uploading Files
Figure 18.2 After the file is copied and reformatted, the uploaded file is dis-
played as confirmation to the user that the upload was successful.
To ensure that you are not vulnerable, this script uses the is_uploaded_file() and
move_uploaded_file() functions to make sure that the file you are processing has actu-
ally been uploaded and is not a local file such as /etc/passwd .This function is available
from PHP version 4.0.3 onward.
Unless you write your upload handling script carefully, a malicious visitor could pro-
vide his own temporary filename and convince your script to handle that file as thoughit were the uploaded file. Because many file upload scripts echo the uploaded data backto the user or store it somewhere that it can be loaded, this could lead to people beingable to access any file that the web server can read.This could include sensitive files suchas 
/etc/passwd and PHP source code including your database passwords.
Common Problems
Keep the following points in mind when performing file uploads:
nThe previous example assumes that users have been authenticated elsewhere.Y ou
shouldn’t allow just anybody to upload files to your site.
nIf you are allowing untrusted or unauthenticated users to upload files, it’s a goodidea to be paranoid about the contents of the files.The last thing you want is amalicious script being uploaded and run.Y ou should be careful, not just of the typeand contents of the file as we are here, but of the filename itself. It’s a good idea torename uploaded files to something you know to be “safe.”
nIf you are using a Windows-based machine, be sure to use \\or /instead of \in
file paths as per usual.
23 6728 CH18  9/2/04  1:17 PM  Page 407
408 Chapter 18 Interacting with the File System and the Server
nUsing the user-provided filename as we did in this script can cause a variety of
problems.The most obvious one is that you run the risk of accidentally overwrit-ing existing files if somebody uploads a file with a name that has already beenused.A less obvious risk is that different operating systems and even different locallanguage settings allow different sets of legal characters in filenames.A file beinguploaded may have a filename that has illegal characters for your system.
nIf you are having problems getting your file upload to work, check out your
php.ini file.Y ou need to have the upload_tmp_dir directive set to point to some
directory that you have access to.Y ou might also need to adjust the memory_limit
directive if you want to upload large files; this determines the maximum file size inbytes that you can upload.Apache also has some configurable timeouts and trans-
action size limits that might need attention if you are having difficulties with largeuploads.
Using Directory Functions
After the users have uploaded some files, it will be useful for them to be able to seewhat’s been uploaded and manipulate the content files. PHP has a set of directory andfile system functions that are useful for this purpose.
Reading from Directories
First, let’s implement a script to allow directory browsing of the uploaded content.Browsing directories is actually straightforward in PHP . Listing 18.3 shows a simple scriptthat can be used for this purpose.
Listing 18.3 browsedir.php —A Directory Listing of the Uploaded Files
<html>
<head>
<title>Browse Directories</title>
</head><body><h1>Browsing</h1><?php
$current_dir = ‘/uploads/ ’;
$dir = opendir($current_dir);
echo “<p>Upload directory is $current_dir</p> ”;
echo ‘<p>Directory Listing:</p><ul> ’;
while ($file = readdir($dir)){
echo “<li>$file</li> ”;
}23 6728 CH18  9/2/04  1:17 PM  Page 408
409 Using Directory Functions
echo ‘</ul>’;
closedir($dir);
?></body>
</html>
This script makes use of the opendir() ,closedir() ,and readdir() functions.
The function opendir() opens a directory for reading. Its use is similar to the use of
fopen() for reading from files. Instead of passing it a filename, you should pass it a direc-
tory name:
$dir = opendir($current_dir);
The function returns a directory handle, again in much the same way as fopen() returns
a file handle.
When the directory is open, you can read a filename from it by calling
readdir($dir) ,as shown in the example.This function returns false when there are
no more files to be read. (Note that it will also return false if it reads a file called “0”;
you could, of course, test for this if it is likely to occur in your application.) Files aren’t
sorted in any particular order, so if you require a sorted list, you should read them intoan array and sort that before displaying it.
When you are finished reading from a directory, you call 
closedir($dir) to finish.
This is again similar to calling fclose() for a file.
Sample output of the directory browsing script is shown in Figure 18.3.Listing 18.3 Continued
Figure 18.3 The directory listing shows all the files in the chosen directory,
including the .(the current directory) and ..(one level up) directories.
You can choose to filter them out.
23 6728 CH18  9/2/04  1:17 PM  Page 409
410 Chapter 18 Interacting with the File System and the Server
If you are making directory browsing available via this mechanism, it is sensible to limit
the directories that can be browsed so that a user cannot browse directory listings inareas not normally available to him.
An associated and sometimes useful function is 
rewinddir( $dir),which resets the
reading of filenames to the beginning of the directory.
As an alternative to these functions, you can use the dirclass provided by PHP . It has
the properties handle and path,and the methods read() ,close() ,and rewind() ,
which perform identically to the nonclass alternatives.
Getting Information About the Current Directory
You can obtain some additional information given a path to a file.
The dirname( $path)and basename( $path)functions return the directory part of
the path and filename part of the path, respectively.This information could be useful forthe directory browser, particularly if you begin to build up a complex directory structureof content based on meaningful directory names and filenames.
You could also add to your directory listing an indication of how much space is left
for uploads by using the 
disk_free_space( $path)function. If you pass this function a
path to a directory, it will return the number of bytes free on the disk (Windows) or thefile system (Unix) on which the directory is located.
Creating and Deleting Directories
In addition to passively reading information about directories, you can use the PHPfunctions 
mkdir() and rmdir() to create and delete directories.Y ou can create or delete
directories only in paths that the user the script runs as has access to.
Using mkdir() is more complicated than you might think. It takes two parameters:
the path to the desired directory (including the new directory name) and the permis-sions you would like that directory to have. Here’s an example:
mkdir(“/tmp/testing ”, 0777);
However, the permissions you list are not necessarily the permissions you are going to
get.The inverse of the current umask will be combined with this value using ANDto get
the actual permissions. For example, if the umask is 022, you will get permissions of0755.
You might like to reset the umask before creating a directory to counter this effect,
by entering
$oldumask = umask(0);
mkdir(“/tmp/testing ”, 0777);
umask($oldumask);
This code uses the umask() function, which can be used to check and change the cur-
rent umask. It changes the current umask to whatever it is passed and returns the old
umask, or, if called without parameters, it just returns the current umask.23 6728 CH18  9/2/04  1:17 PM  Page 410
411 Interacting with the File System
Note that the umask() function has no effect on Windows systems.
The rmdir() function deletes a directory, as follows:
rmdir(“/tmp/testing ”);
or
rmdir(“c:\\tmp\\testing ”);
The directory you are trying to delete must be empty.
Interacting with the File System
In addition to viewing and getting information about directories, you can interact with
and get information about files on the web server.Y ou previously looked at writing toand reading from files.A large number of other file functions are available.
Getting File Information
You can alter the part of the directory browsing script that reads files as follows:
while ($file = readdir($dir)){
echo ‘<a href= ”filedetails.php?file= ’.$file.’”>’.$file.’</a><br> ’;
}
You can then create the script filedetails.php to provide further information about a
file.The contents of this file are shown in Listing 18.4.
One warning about this script: Some of the functions used here are not supported
under Windows, including posix_getpwuid() ,fileowner() ,and filegroup() ,o ra r e
not supported reliably.
Listing 18.4 filedetails.php —File Status Functions and Their Results
<html>
<head>
<title>File Details</title>
</head><body><?php
$current_dir = ‘/uploads/ ’;
$file = basename($file);  // strip off directory information for security
echo ‘<h1>Details of file: ‘.$file.’</h1>’;
$file = $current_dir.$file;
echo ‘<h2>File data</h2> ’;
echo ‘File last accessed: ‘.date(‘j F Y H:i ’, fileatime($file)). ’<br>’;
echo ‘File last modified: ‘.date(‘j F Y H:i ’, filemtime($file)). ’<br>’;23 6728 CH18  9/2/04  1:17 PM  Page 411
412 Chapter 18 Interacting with the File System and the Server
$user = posix_getpwuid(fileowner($file));
echo ‘File owner: ‘.$user[‘name’].’<br>’;
$group = posix_getgrgid(filegroup($file));
echo ‘File group: ‘.$group[ ‘name’].’<br>’;
echo ‘File permissions: ‘.decoct(fileperms($file)). ’<br>’;
echo ‘File type: ‘.filetype($file). ’<br>’;
echo ‘File size: ‘.filesize($file). ’bytes<br> ’;
echo ‘<h2>File tests</h2> ’;
echo ‘is_dir: ‘.(is_dir($file)? ‘true’: ‘false’).’<br>’;
echo ‘is_executable: ‘.(is_executable($file)? ‘true’: ‘false’).’<br>’;
echo ‘is_file: ‘.(is_file($file)? ‘true’: ‘false’).’<br>’;
echo ‘is_link: ‘.(is_link($file)? ‘true’: ‘false’).’<br>’;
echo ‘is_readable: ‘.(is_readable($file)? ‘true’: ‘false’).’<br>’;
echo ‘is_writable: ‘.(is_writable($file)? ‘true’: ‘false’).’<br>’;
?>
</body>
</html>
The results of one sample run of Listing 18.4 are shown in Figure 18.4.
Let’s examine what each of the functions used in Listing 18.4 does.As mentioned previ-ously, the 
basename() function gets the name of the file without the directory. (Y ou can
also use the dirname() function to get the directory name without the filename.)
The fileatime() and filemtime() functions return the timestamp of the time the
file was last accessed and last modified, respectively.We reformatted the timestamp hereusing the 
date() function to make it more human readable.These functions return the
same value on some operating systems (as in the example) depending on what informa-tion the system stores.
The 
fileowner() and filegroup() functions return the user ID ( uid) and group ID
(gid) of the file.These IDs can be converted to names using the functions posix_
getpwuid() and posix_getgrgid() ,respectively, which makes them a bit easier to read.
These functions take the uidor gidas a parameter and return an associative array of
information about the user or group, including the name of the user or group, as wehave used in this script.Listing 18.4 Continued23 6728 CH18  9/2/04  1:17 PM  Page 412
413 Interacting with the File System
Figure 18.4 The File Details view shows file system information about a file.
Note that permissions are shown in an octal format.
The fileperms() function returns the permissions on the file.We reformatted them
as an octal number using the decoct() function to put them into a format more famil-
iar to Unix users.
The filetype() function returns some information about the type of file being
examined.The possible results are fifo,char,dir,block ,link,file,and unknown .
The filesize() function returns the size of the file in bytes.
The second set of functions— is_dir() ,is_executable() ,is_file() ,is_link() ,
is_readable() ,and is_writable() —all test the named attribute of a file and return
true or false .
Alternatively, you could use the function stat() to gather a lot of the same informa-
tion.When passed a file, this function returns an array containing similar data to thesefunctions.The 
lstat() function is similar, but for use with symbolic links.
All the file status functions are quite expensive to run in terms of time.Their results
are therefore cached. If you want to check some file information before and after achange, you need to call
clearstatcache();
to clear the previous results. If you want to use the previous script before and afterchanging some of the file data, you should begin by calling this function to make surethe data produced is up to date.
23 6728 CH18  9/2/04  1:17 PM  Page 413
414 Chapter 18 Interacting with the File System and the Server
Changing File Properties
In addition to viewing file properties, you can alter them.
Each of the chgrp(file, group ),chmod(file, permissions ),and chown(file,
user)functions behaves similarly to its Unix equivalent. None of these functions will
work in Windows-based systems, although chown() will execute and always return true.
The chgrp() function changes the group of a file. It can be used to change the group
only to groups of which the user is a member unless the user is root.
The chmod() function changes the permissions on a file.The permissions you pass to
it are in the usual Unix chmod form.Y ou should prefix them with a 0 (a zero) to show
that they are in octal, as in this example:
chmod(‘somefile.txt ’, 0777);
The chown() function changes the owner of a file. It can be used only if the script is
running as root, which should never happen, unless you are specifically running the
script from the command line to perform an administrative task.
Creating, Deleting, and Moving Files
You can use the file system functions to create, move, and delete files.
First, and most simply, you can create a file, or change the time it was last modified,
using the touch() function.This function works similarly to the Unix command touch .
The function has the following prototype:
int touch ( string file, [int time [, int atime]] )
If the file already exists, its modification time will be changed either to the current time
or the time given in the second parameter if it is specified. If you want to specify thistime, you should give it in timestamp format. If the file doesn’t exist, it will be created.The access time of the file will also change: by default to the current system time oralternatively to the timestamp you specify in the optional 
atime parameter.
You can delete files using the unlink() function. (Note that this function is not
called delete —there is no delete .) Y ou use it like this:
unlink($ filename );
This is one of the functions that doesn’t work with some older Windows versions.
However, if it doesn’t work on your setup, you can delete a file in Windows with
system(“del filename .ext”);
You can copy and move files with the copy() and rename() functions, as follows:
copy($source_path, $destination _path);
rename($ oldfile, $newfile);
You might have noticed that we used copy() in Listing 18.2.23 6728 CH18  9/2/04  1:17 PM  Page 414
415 Using Program Execution Functions
The rename() function does double duty as a function to move files from place to place
because PHP doesn’t have a move function.Whether you can move files from file system tofile system and whether files are overwritten when 
rename() is used are operating system
dependent, so check the effects on your server.Also, be careful about the path you use tothe filename. If relative, this will be relative to the location of the script, not the original file.
Using Program Execution Functions
Let’s move away from the file system functions now and look at the functions available
for running commands on the server.
These functions are useful when you want to provide a web-based front end to an
existing command-line–based system. For example, you previously used these commandsto set up a front end for the mailing list manager 
ezmlm .You will use them again when
you come to the case studies later in this book.
You can use four main techniques to execute a command on the web server.They are
all relatively similar, but there are some minor differences:
1.exec() —The exec() function has the following prototype:
string exec (string command [, array &result [, int&return_value ]])
You pass in the command that you would like executed, as in this example:
exec(“ls -la”);
The exec() function has no direct output. It returns the last line of the result of
the command.
If you pass in a variable as result ,you will get back an array of strings represent-
ing each line of the output. If you pass in a variable as return_value ,you will get
the return code.
2.passthru() —The passthru() function has the following prototype:
void passthru (string command [, intreturn_value ])
The passthru() function directly echoes its output through to the browser. (This
functionality is useful if the output is binary—for example, some kind of imagedata.) It returns nothing.
The parameters work the same way as 
exec() ’s parameters do.
3.system() —The system() function has the following prototype:
string system (string command [, int return_value ])
The function echoes the output of the command to the browser. It tries to flush
the output after each line (assuming you are running PHP as a server module),which distinguishes it from 
passthru() .It returns the last line of the output
(upon success) or false (upon failure).
The parameters work the same way as in the other functions.23 6728 CH18  9/2/04  1:17 PM  Page 415
416 Chapter 18 Interacting with the File System and the Server
4. Backticks—We mentioned backticks briefly in Chapter 1,“PHP Crash Course.”
They are actually execution operators.
They have no direct output.The result of executing the command is returned as a
string, which can then be echoed or whatever you like.
If you have more complicated needs, you can also use popen() ,proc_open() ,and
proc_close() ,which fork external processes and pipe data to and from them.The last
two of these functions were added at PHP 4.3.
The script shown in Listing 18.5 illustrates how to use each of the four techniques in
an equivalent fashion.
Listing 18.5 progex.php —File Status Functions and Their Results
<?php
chdir(‘/uploads/ ’);
///// exec version
echo ‘<pre>’;
// unix
exec(‘ls -la’, $result);
// windows// exec( ‘dir’, $result);
foreach ($result as $line)
echo “$line\n”;
echo ‘</pre>’;
echo ‘<br><hr><br> ’;
///// passthru version
echo ‘<pre>’;
// unix
passthru( ‘ls -la’) ;
// windows// passthru( ‘dir’);
echo ‘</pre>’;
echo ‘<br><hr><br> ’;
///// system version
echo ‘<pre>’;
// unix$result = system( ‘ls -la’);23 6728 CH18  9/2/04  1:17 PM  Page 416
417 Interacting with the Environment: getenv() and putenv()
// windows
// $result = system( ‘dir’);
echo ‘</pre>’;
echo ‘<br><hr><br> ’;
/////backticks version
echo ‘<pre>’;
// unix$result = `ls -al`;// windows0// $result = `dir`;echo $result;echo ‘</pre>’;
? >
You could use one of these approaches as an alternative to the directory-browsing script
you saw earlier. Note that one of the side effects of using external functions is amply
demonstrated by this code:Y our code is no longer portable.This script uses Unix com-mands, and the code will clearly not run on Windows.
If you plan to include user-submitted data as part of the command you’re going to
execute, you should always run it through the 
escapeshellcmd() function first.This
way,you stop users from maliciously (or otherwise) executing commands on your sys-
tem.Y ou can call it like this:
system(escapeshellcmd($command));
You should also use the escapeshellarg() function to escape any arguments you plan
to pass to your shell command.
Interacting with the Environment: getenv() and
putenv()
Before we leave this discussion, let’s look at how to use environment variables fromwithin PHP .T wo functions serve this purpose:
getenv() ,which enables you to retrieve
environment variables, and putenv() ,which enables you to set environment variables.
Note that the environment we are talking about here is the environment in which PHPruns on the server.
You can get a list of all PHP’s environment variables by running 
phpinfo() .Some
are more useful than others; for example,
getenv(“HTTP_REFERER ”);
returns the URL of the page from which the user came to the current page.Listing 18.5 Continued23 6728 CH18  9/2/04  1:17 PM  Page 417
418 Chapter 18 Interacting with the File System and the Server
You can also set environment variables as required with putenv() ,as in this example:
$home = “/home/nobody ”;
putenv ( “HOME=$home “);
If you are a system administrator and would like to limit which environment variables
programmers can set, you can use the safe_mode_allowed_env_vars directive in
php.ini .When PHP runs in safe mode, users can set only environment variables whose
prefixes are listed in this directive.
If you would like more information about what some of the environment variablesrepresent, you can look at the CGI specification at http://hoohoo.ncsa.uiuc.edu/
cgi/env.html.
Further Reading
Most of the file system functions in PHP map to underlying operating system functionsof the same name.Try reading the 
manpages for more information if you’re using Unix.
Next
In Chapter 19,“Using Network and Protocol Functions,” you learn to use PHP’s net-work and protocol functions to interact with systems other than your own web server.
This again expands the horizons of what you can do with your scripts.23 6728 CH18  9/2/04  1:17 PM  Page 418
19
Using Network and Protocol
Functions
INTHIS CHAPTER ,WE LOOK AT THE NETWORK -ORIENTED functions in PHP that enable
your scripts to interact with the rest of the Internet.A world of resources is available out
there, and a wide variety of protocols is available for using them.
Key topics covered in this chapter include
nExamining available protocols
nSending and reading email
nUsing other websites via HTTP
nUsing network lookup functions
nUsing FTP
Examining Available Protocols
Protocols are the rules of communication for a given situation. For example, you know
the protocol when meeting another person:Y ou say hello, shake hands, communicate fora while, and then say goodbye. Different situations require different protocols.Also, peo-ple from other cultures may expect different protocols, which may make interaction dif-ficult. Computer networking protocols are similar.
Like human protocols, different computer protocols are used for different situations
and applications.Y ou use the Hypertext Transfer Protocol (HTTP) to send and receiveweb pages.Y ou probably also have used the File Transfer Protocol (FTP) for transferring
files between machines on a network. Many others are available.
Protocols and other Internet standards are described in documents called Requests For
Comments (RFCs) .These protocols are defined by the Internet Engineering Task Force
(IETF).The RFCs are widely available on the Internet.The base source is the RFCEditor at http://www.rfc-editor.org/.24 6728 CH19  9/2/04  1:16 PM  Page 419
420 Chapter 19 Using Network and Protocol Functions
If you have problems when working with a given protocol, RFCs are the authorita-
tive sources and are often useful for troubleshooting your code.They are, however, verydetailed and often run to hundreds of pages.
Some examples of well-known RFCs are RFC2616, which describes the HTTP/1.1
protocol, and RFC822, which describes the format of Internet email messages.
In this chapter, we look at aspects of PHP that use some of these protocols.
Specifically, we discuss sending mail with SMTP , reading mail with POP and IMAP , con-necting to other web servers via HTTP , and transferring files with FTP .
Sending and Reading Email
The main way to send mail in PHP is to use the simple mail() function.We discussed
the use of this function in Chapter 4,“String Manipulation and Regular Expressions,” sowe won’t visit it again here.This function uses the Simple Mail Transfer Protocol
(SMTP) to send mail.
You can use a variety of freely available classes to add to the functionality of 
mail() .
In Chapter 30,“Building a Mailing List Manager,” you use an add-on class to sendHTML attachments with a piece of mail. SMTP is only for sending mail.The InternetMessage Access Protocol (IMAP), described in RFC2060, and Post Office Protocol(POP), described in RFC1939 or STD0053, are used to read mail from a mail server.These protocols cannot send mail.
IMAP is used to read and manipulate mail messages stored on a server and is more
sophisticated than POP , which is generally used simply to download mail messages to aclient and delete them from the server.
PHP comes with an IMAP library. It can also be used to make POP and Network
News Transfer Protocol (NNTP) as well as IMAP connections.
We look extensively at the use of the IMAP library in the project described in
Chapter 29,“Building a Web-Based Email Service.”
Using Other Websites
One of the great things you can do with the Web is use, modify, and embed existingservices and information into your own pages. PHP makes this very easy. Let’s look at anexample to illustrate this use.
Imagine that the company you work for wants the company’s stock quote displayed
on its home page.This information is available on some stock exchange site somewhere,but how do you get at it?
Start by finding an original source URL for the information.When you know the
URL, every time someone goes to your home page, you can open a connection to thatURL, retrieve the page, and pull out the information you require.24 6728 CH19  9/2/04  1:16 PM  Page 420
421 Using Other Websites
As an example, we put together a script that retrieves and reformats a stock quote
from the AMEX website. For the purpose of the example, we retrieved the current stockprice of Amazon.com. (The information you want to include on your page might differ,but the principles are the same.)
This technique is known as screen scraping because you take information that is intend-
ed to be displayed on a screen and extract the parts that you need for presentation with anew interface. The script is shown in Listing 19.1.
Listing 19.1 lookup.php —Script Retrieves a Stock Quote from the NASDAQ for the
Stock with the Ticker Symbol Listed in $symbol
<html>
<head>
<title>Stock Quote from NASDAQ</title>
</head><body><?php
// choose stock to look at$symbol= ’AMZN’;
echo “<h1>Stock Quote for $symbol</h1> ”;
$theurl= ”http://www.amex.com/equities/listCmp ”
.”/EqLCDetQuote.jsp?Product_Symbol=$symbol ”;
if (!($contents = file_get_contents($theurl)))
{
echo ‘Could not open URL ’;
exit;
}
// find the part of the page we want and output it
$pattern = ‘(\\$[0-9 ]+\\.[0-9]+) ’;
if (eregi($pattern, $contents, $quote))
{
echo “<p>$symbol was last sold at: “;
echo $quote[1];echo ‘</p>’;
}else{
echo ‘<p>No quote available</p> ’;
};24 6728 CH19  9/2/04  1:16 PM  Page 421
422 Chapter 19 Using Network and Protocol Functions
// acknowledge source
echo ‘<p>’
.’This information retrieved from <br /> ’
.”<a href=\ ”$theurl\ ”>$theurl</a><br /> ”
.’on ‘.(date(‘l jS F Y g:i a T ’)).’</p>’;
?></body>
</html>
The output from one sample run of Listing 19.1 is shown in Figure 19.1.Listing 19.1 Continued
Figure 19.1 The lookup.php script uses a regular expression to pull out
the stock quote from information retrieved from the stock exchange.
The script itself is reasonably straightforward; in fact, it doesn’t use any functions you
haven’t seen before, just new applications of those functions.
You might recall that when we discussed reading from files in Chapter 2,“Storing
and Retrieving Data,” we mentioned that you could use the file functions to read froman URL.That’s what we have done in this case.The call to 
file_get_contents()
$contents = file_get_contents($theurl)
returns the entire text of the web page at that URL stored in $contents .
The file functions can do a lot in PHP .The example here simply loads a web page via
HTTP , but you could interact with other servers via HTTPS, FTP , or other protocols inexactly the same way. For some tasks, you might need to take a more specialized approach.Some FTP functionality is available in the specific FTP functions, and not available via
fopen() and other file functions.There is an example using the FTP functions later in this
chapter. For some HTTP or HTTPS tasks, you may need to use the cURL library.WithcURL, you can log in to a website and mimic a user’s progress through a few pages.
24 6728 CH19  9/2/04  1:16 PM  Page 422
423 Using Other Websites
Having obtained the text of the page from file_get_contents() ,you can then use a
regular expression and the eregi() function to find the part of the page that you want:
$pattern = ‘(\\$[0-9 ]+\\.[0-9]+) ’;
if (eregi($pattern, $contents, $quote))
{
echo “<p>$symbol was last sold at: “;
echo $quote[1];echo ‘</p>’;
}
That’s it!
You can use this approach for a variety of purposes.Another good example is retriev-
ing local weather information and embedding it in your page.
The best use of this approach is to combine information from different sources to add
some value.Y ou can see one good example of this approach in Philip Greenspun’s infa-mous script that produces the Bill Gates Wealth Clock at http://philip.greenspun.com/WealthClock.
This page takes information from two sources. It obtains the current U.S. population
from the U.S. Census Bureau’s site. It also looks up the current value of a Microsoft shareand combines these two pieces of information, adds a healthy dose of the author’s opin-ion, and produces new information—an estimate of Bill Gates’ current worth.
One side note: If you’re using an outside information source such as this for a com-
mercial purpose, it’s a good idea to check with the source or take legal advice first.Y oumight need to consider intellectual property issues in some cases.
If you’re building a script like this, you might want to pass through some data. For
example, if you’re connecting to an outside URL, you might like to pass some parame-ters that would normally be typed in by the user. If you’re doing this, it’s a good idea touse the 
urlencode() function.This function takes a string and converts it to the proper
format for an URL, for example, transforming spaces into plus signs.Y ou can call it likethis:
$encodedparameter = urlencode($parameter);
One problem with this overall approach is that the site you’re getting the informationfrom may change its data format, which will stop your script from working.
A better way of doing the same thing is to use Web Services.These services are like
remote objects that you can connect to in order to retrieve data such as stock quotes.
PHP’s support for Web Services is growing.As well as technical advantages, using WebServices means that you are using an interface and a facility that the provider has implic-itly or explicitly given you permission to access with a program.24 6728 CH19  9/2/04  1:16 PM  Page 423
424 Chapter 19 Using Network and Protocol Functions
Using Network Lookup Functions
PHP offers a set of “lookup” functions that can be used to check information about
hostnames, IP addresses, and mail exchanges. For example, if you were setting up a direc-tory site such as Yahoo! when new URLs were submitted, you might like to automati-cally check that the host of an URL and the contact information for that site are valid.This way, you can save some overhead further down the track when a reviewer comes tolook at a site and finds that it doesn’t exist or that the email address isn’t valid.
Listing 19.2 shows the HTML for a submission form for a directory like this.
Listing 19.2 directory_submit.html —HTML for the Submission Form
<html>
<head>
<title>Submit your site</title>
</head><body><h1>Submit site</h1><form method=post action= ”directory_submit.php ”>
URL: <input type=text name= ”url”size=30 value= ”http://”><br />
Email contact: <input type=text name= ”email”size=23><br />
<input type= ”submit”name=”Submit site ”>
</form></body>
</html>
This is a simple form; the rendered version, with some sample data entered, is shown in
Figure 19.2.
Figure 19.2 Directory submissions typically require your URL and some
contact details so directory administrators can notify you when 
your site is added to the directory.
24 6728 CH19  9/2/04  1:16 PM  Page 424
425 Using Network Lookup Functions
When the submit button is clicked, you want to check, first, that the URL is hosted on a
real machine, and, second, that the host part of the email address is also on a real machine.
We wrote a script to check these things, and the output is shown in Figure 19.3.
Figure 19.3 This version of the script displays the results of checking the
hostnames for the URL and email address; a production version 
might not display these results, but it is interesting to see the 
information returned from the checks.
The script that performs these checks uses two functions from the PHP network func-
tions suite: gethostbyname() and dns_get_mx() .The full script is shown in Listing 19.3.
Listing 19.3 directory_submit.php —Script to Verify URL and Email Address
<html>
<head>
<title>Site submission results</title>
</head><body><h1>Site submission results</h1><?php
// Extract form fields$url = $_REQUEST[ ‘url’];
$email = $_REQUEST[ ‘email’];
// Check the URL$url = parse_url($url);
$host = $url[ ‘host’];
if(!($ip = gethostbyname($host)) ){
24 6728 CH19  9/2/04  1:16 PM  Page 425
426 Chapter 19 Using Network and Protocol Functions
echo ‘Host for URL does not have valid IP ’;
exit;
}
echo “Host is at IP $ip <br> ”;
// Check the email address$email = explode( ‘@’, $email);
$emailhost = $email[1];
// note that the dns_get_mx() function is *not implemented* in
// Windows versions of PHPif (!dns_get_mx($emailhost, $mxhostsarr)){
echo ‘Email address is not at valid host ’;
exit;
}
echo ‘Email is delivered via: ‘;
foreach ($mxhostsarr as $mx)
echo “$mx “;
// If reached here, all okecho ‘<br>All submitted details are ok.<br> ’;
echo ‘Thank you for submitting your site.<br> ’
.’It will be visited by one of our staff members soon. ’
// In real case, add to db of waiting sites...
?></body>
</html>
Let’s go through the interesting parts of this script.
First, you take the URL and apply the parse_url() function to it.This function
returns an associative array of the different parts of an URL.The available pieces of
information are the scheme, user, pass, host, port, path, query, and fragment.T ypically, youdon’t need all these pieces, but here’s an example of how they make up an URL.
Consider the following URL at http://nobody:secret@example.com:80/
script.php?variable=value#anchor.Listing 19.3 Continued24 6728 CH19  9/2/04  1:16 PM  Page 426
427 Using Network Lookup Functions
The values of each of the parts of the array are
nscheme: http
nuser: nobody
npass: secret
nhost: example.com
nport: 80
npath: /script.php
nquery: variable=value
nfragment: anchor
In the directory_submit.php script, you want only the host information, so you pull it
out of the array as follows:
$url = parse_url($url);
$host = $url[ ‘host’];
After you’ve done this, you can get the IP address of that host, if it is in the domain
name service (DNS).Y ou can do this by using the gethostbyname() function, which
returns the IP if there is one or false if not:
$ip = gethostbyname($host);
You can also go the other way by using the gethostbyaddr() function, which takes an
IP as a parameter and returns the hostname. If you call these functions in succession, youmight well end up with a different hostname from the one you began with.This canmean that a site is using a virtual hosting service where one physical machine and IPaddress host more than one domain name.
If the URL is valid, you then go on to check the email address. First, you split it into
username and hostname with a call to 
explode() :
$email = explode( ‘@’, $email);
$emailhost = $email[1];
When you have the host part of the address, you can check to see whether there is a
place for that mail to go by using the dns_get_mx() function:
dns_get_mx($emailhost, $mxhostsarr);
This function returns the set of Mail Exchange (MX) records for an address in the arrayyou supply at 
$mxhostarr .
An MX record is stored at the DNS and is looked up like a hostname.The machine
listed in the MX record isn’t necessarily the machine where the email will eventuallyend up. Instead, it’s a machine that knows where to route that email. (There can be morethan one; hence, this function returns an array rather than a hostname string.) If youdon’t have an MX record in the DNS, there’s nowhere for the mail to go.24 6728 CH19  9/2/04  1:16 PM  Page 427
428 Chapter 19 Using Network and Protocol Functions
Note that the dns_get_mx() function is not implemented in Windows versions of
PHP . If you are using Windows, you should look into the PEAR::Net_DNS package,which will work for you.
If all these checks are okay, you can put this form data in a database for later review
by a staff member.
In addition to the functions you just used, you can use the more generic function
checkdnsrr() ,which takes a hostname and returns true if any record of it appears in
the DNS.
Using FTP
File Transfer Protocol, or FTP , is used to transfer files between hosts on a network. UsingPHP , you can use 
fopen() and the various file functions with FTP as you can with
HTTP connections, to connect to and transfer files to and from an FTP server.However, a set of FTP-specific functions also comes with the standard PHP install.
These functions are not built into the standard install by default.T o use them under
Unix, you need to run the PHP 
configure program with the --enable-ftp option and
then rerun make.If you are using the standard Windows install, FTP functions are
enabled automatically.
(For more details on configuring PHP , see Appendix A,“Installing PHP and MySQL.”)
Using FTP to Back Up or Mirror a File
The FTP functions are useful for moving and copying files from and to other hosts. Onecommon use you might make of this capability is to back up your website or mirror filesat another location. Let’s look at a simple example using the FTP functions to mirror afile.This script is shown in Listing 19.4.
Listing 19.4 ftp_mirror.php —Script to Download New Versions of a File from an
FTP Server
<html>
<head>
<title>Mirror update</title>
</head><body><h1>Mirror update</h1><?php// set up variables - change these to suit application$host = ‘ftp.cs.rmit.edu.au ’;
$user = ‘anonymous ’;
$password = ‘me@example.com ’;
$remotefile = ‘/pub/tsg/teraterm/ttssh14.zip ’;
$localfile = ‘/tmp/writable/ttssh14.zip ’;24 6728 CH19  9/2/04  1:16 PM  Page 428
429 Using FTP
// connect to host
$conn = ftp_connect($host);if (!$conn){
echo ‘Error: Could not connect to ftp server<br /> ’;
exit;
}echo “Connected to $host.<br /> ”;
// log in to host
@ $result = ftp_login($conn, $user, $pass);if (!$result){
echo “Error: Could not log on as $user<br /> ”;
ftp_quit($conn);exit;
}echo “Logged in as $user<br /> ”;
// check file times to see if an update is required
echo ‘Checking file time...<br /> ’;
if (file_exists($localfile)){
$localtime = filemtime($localfile);echo ‘Local file last updated ‘;
echo date( ‘G:i j-M-Y ’, $localtime);
echo ‘<br />’;
}else
$localtime=0;
$remotetime = ftp_mdtm($conn, $remotefile);if (!($remotetime >= 0)){
// This doesn ’t mean the file ’s not there, server may not support mod time
echo ‘Can\’t access remote file time.<br /> ’;
$remotetime=$localtime+1;  // make sure of an update
}else{
echo ‘Remote file last updated ‘;
echo date( ‘G:i j-M-Y ’, $remotetime);
echo ‘<br />’;
}Listing 19.4 Continued24 6728 CH19  9/2/04  1:16 PM  Page 429
430 Chapter 19 Using Network and Protocol Functions
if (!($remotetime > $localtime))
{
echo ‘Local copy is up to date.<br /> ’;
exit;
}
// download file
echo ‘Getting file from server...<br /> ’;
$fp = fopen ($localfile, ‘w’);
if (!$success = ftp_fget($conn, $fp, $remotefile, FTP_BINARY)){
echo ‘Error: Could not download file ’;
ftp_quit($conn);exit;
}fclose($fp);echo ‘File downloaded successfully ’;
// close connection to host
ftp_quit($conn);
?>
</body>
</html>
The output from running this script on one occasion is shown in Figure 19.4.Listing 19.4 Continued
Figure 19.4 The FTP mirroring script checks whether the local version of a
file is up to date and downloads a new version if not.
24 6728 CH19  9/2/04  1:16 PM  Page 430
431 Using FTP
The ftp_mirror.php script is quite generic.Y ou can see that it begins by setting up
some variables:
$host = ‘ftp.cs.rmit.edu.au ’;
$user = ‘anonymous ’;
$password = ‘me@example.com ’;
$remotefile = ‘/pub/tsg/teraterm/ttssh14.zip ’;
$localfile = ‘/tmp/writable/ttssh14.zip ’;
The $host variable should contain the name of the FTP server you want to connect to,
and the $user and $password correspond to the username and password you would like
to log in with.
Many FTP sites support what is called anonymous login —that is, a freely available user-
name that anybody can use to connect. No password is required, but it is a commoncourtesy to supply your email address as a password so that the system’s administratorscan see where their users are coming from.We followed this convention here.
The 
$remotefile variable contains the path to the file you would like to download.
In this case, you are downloading and mirroring a local copy of T era T erm SSH, an SSHclient for Windows. (SSH stands for secure shell.This is an encrypted form of T elnet.)
The 
$localfile variable contains the path to the location where you are going to
store the downloaded file on your machine. In this case, you create a directory called
/tmp/writable with permissions set up so that PHP can write a file there. Regardless of
your operating system, you need to create this directory for the script to work. If your
operating system has strong permissions, you will need to make sure that they allow yourscript to write.Y ou should be able to change these variables to adapt this script for yourpurposes.
The basic steps you follow in this script are the same as if you wanted to manually
transfer the file via FTP from a command-line interface:
1. Connect to the remote FTP server.2. Log in (either as a user or anonymous).3. Check whether the remote file has been updated.4. If it has, download it.5. Close the FTP connection.
Let’s consider each of these steps in turn.
Connecting to the Remote FTP Server
The first step is equivalent to typing
ftp hostname24 6728 CH19  9/2/04  1:16 PM  Page 431
432 Chapter 19 Using Network and Protocol Functions
at a command prompt on either a Windows or Unix platform.Y ou accomplish this step
in PHP with the following code:
$conn = ftp_connect($host);
if (!$conn){
echo ‘Error: Could not connect to ftp server<br /> ’;
exit;
}echo “Connected to $host.<br /> ”;
The function call here is to ftp_connect() .This function takes a hostname as a parame-
ter and returns either a handle to a connection or false if a connection could not be
established.The function can also take the port number on the host to connect to as anoptional second parameter. (We did not use this parameter here.) If you don’t specify aport number, it will default to port 21, the default for FTP .
Logging In to the FTP Server
The next step is to log in as a particular user with a particular password.Y ou can achieve
this by using the 
ftp_login() function:
@ $result = ftp_login($conn, $user, $password);
if (!$result){
echo “Error: Could not log on as $user<br /> ”;
ftp_quit($conn);exit;
}echo “Logged in as $user<br /> ”;
The function takes three parameters: an FTP connection (obtained from
ftp_connect() ), a username, and a password. It returns true if the user can be logged in
and false if she can’t. Notice that we put an @symbol at the start of the line to suppress
errors.We did this because, if the user cannot be logged in, a PHP warning appears inthe browser window.Y ou can catch the error as we have done here by testing 
$result
and supplying your own, more user-friendly error message.
Notice that if the login attempt fails, you actually close the FTP connection by using
ftp_quit() .We discuss this function more later.
Checking File Update Times
Given that you are updating a local copy of a file, checking whether the file needs
updating first is sensible because you don’t want to have to redownload a file, particularlya large one, if it’s up to date.This way, you can avoid unnecessary network traffic. Let’slook at the code that checks file update times.24 6728 CH19  9/2/04  1:16 PM  Page 432
433 Using FTP
File times are the reason that you use the FTP functions rather than a much simpler
call to a file function.The file functions can easily read and, in some cases, write filesover network interfaces, but most of the status functions such as 
filemtime() do not
work remotely.This will change in the future.The file system status functions are
planned to support ftp:// in PHP5.1.At that stage, you could reimplement this script
using a simple copy($remoteurl, $localurl) .
To begin deciding whether you need to download a file, you check that you have a
local copy of the file by using the file_exists() function. If you don’t, obviously you
need to download the file. If it does exist, you get the last modified time of the file byusing the 
filemtime() function and store it in the $localtime variable. If it doesn’t
exist, you set the $localtime variable to 0so that it will be “older” than any possible
remote file modification time:
echo ‘Checking file time...<br /> ’;
if (file_exists($localfile)){
$localtime = filemtime($localfile);echo ‘Local file last updated ‘;
echo date( ‘G:i j-M-Y ’, $localtime);
echo ‘<br />’;
}else
$localtime=0;
(Y ou can read more about the file_exists() and filemtime() functions in Chapters 2,
“Storing and Retrieving Data” and 18,“Interacting with the File System and the Server,”respectively.)
After you have sorted out the local time, you need to get the modification time of
the remote file.Y ou can get this time by using the 
ftp_mdtm() function:
$remotetime = ftp_mdtm($conn, $remotefile);
This function takes two parameters—the FTP connection handle and the path to theremote file—and returns either the Unix timestamp of the time the file was last modi-
fied or –1 if there is an error of some kind. Not all FTP servers support this feature, soyou might not get a useful result from the function. In this case, you can choose to artifi-
cially set the 
$remotetime variable to be “newer” than the $localtime variable by
adding 1 to it.This way, you ensure that an attempt is made to download the file:
if (!($remotetime >= 0))
{
// This doesn ’t mean the file ’s not there, server may not support mod time
echo ‘Can’t access remote file time.<br> ’;
$remotetime=$localtime+1;  // make sure of an update
}24 6728 CH19  9/2/04  1:16 PM  Page 433
434 Chapter 19 Using Network and Protocol Functions
else
{
echo ‘Remote file last updated ‘;
echo date( ‘G:i j-M-Y ’, $remotetime);
echo ‘<br>’;
}
When you have both times, you can compare them to see whether you need to down-
load the file:
if (!($remotetime > $localtime))
{
echo ‘Local copy is up to date.<br> ’;
exit;
}
Downloading the File
At this stage, you try to download the file from the server:
echo ‘Getting file from server...<br> ’;
$fp = fopen ($localfile, ‘w’);
if (!$success = ftp_fget($conn, $fp, $remotefile, FTP_BINARY)){
echo ‘Error: Could not download file ’;
fclose($fp);ftp_quit($conn);exit;
}fclose($fp);echo ‘File downloaded successfully ’;
You open a local file by using fopen() ,as you learned previously.After you have done
this, you call the function ftp_fget() ,which attempts to download the file and store it
in a local file.This function takes four parameters.The first three are straightforward: theFTP connection, the local file handle, and the path to the remote file.The fourth param-eter is the FTP mode.
The two modes for an FTP transfer are ASCII and binary.The ASCII mode is used
for transferring text files (that is, files that consist solely of ASCII characters), and thebinary mode is used for transferring everything else. Binary mode transfers a file unmod-ified, whereas ASCII mode translates carriage returns and line feeds into the appropriatecharacters for your system (
\nfor Unix, \r\n for Windows, and \rfor Macintosh).
PHP’s FTP library comes with two predefined constants, FTP_ASCII and FTP_BINARY ,
that represent these two modes.Y ou need to decide which mode fits your file type andpass the corresponding constant to 
ftp_fget() as the fourth parameter. In this case, you
are transferring a ZIP file, so you use the FTP_BINARY mode.24 6728 CH19  9/2/04  1:16 PM  Page 434
435 Using FTP
The ftp_fget() function returns true if all goes well or false if an error is
encountered.Y ou store the result in $success and let the user know how it went.
After the download has been attempted, you close the local file by using the
fclose() function.
As an alternative to ftp_fget() ,you could use ftp_get() ,which has the following
prototype:
int ftp_get ( int ftp_connection, string localfile_path,
string remotefile_path , int mode)
This function works in much the same way as ftp_fget() but does not require the
local file to be open.Y ou pass it the system filename of the local file you would like towrite to rather than a file handle.
Note that there is no equivalent to the FTP command 
mget,which can be used to
download multiple files at a time.Y ou must instead make multiple calls to ftp_fget() or
ftp_get() .
Closing the Connection
After you have finished with the FTP connection, you should close it using the
ftp_quit() function:
ftp_quit($conn);
You should pass this function the handle for the FTP connection.
Uploading Files
If you want to go the other way—that is, copy files from your server to a remote
machine—you can use two functions that are basically the opposite of ftp_fget() and
ftp_get() .These functions are called ftp_fput() and ftp_put() .They have the fol-
lowing prototypes:
int ftp_fput ( int ftp_connection, string remotefile_path, int fp, int mode )
int ftp_put ( int ftp_connection, string remotefile_path,
string localfile_path , int mode )
The parameters are the same as for the _get equivalents.
Avoiding Timeouts
One problem you might face when transferring files via FTP is exceeding the maximum
execution time.Y ou know when this happens because PHP gives you an error message.This error is especially likely to occur if your server is running over a slow or congestednetwork, or if you are downloading a large file, such as a movie clip.24 6728 CH19  9/2/04  1:16 PM  Page 435
436 Chapter 19 Using Network and Protocol Functions
The default value of the maximum execution time for all PHP scripts is defined in
the php.ini file. By default, it’s set to 30 seconds.This is designed to catch scripts that
are running out of control. However, when you are transferring files via FTP , if your linkto the rest of the world is slow or if the file is large, the file transfer could well takelonger than this.
Fortunately, you can modify the maximum execution time for a particular script by
using the 
set_time_limit() function. Calling this function resets the maximum num-
ber of seconds the script is allowed to run, starting from the time the function is called.For example, if you call
set_time_limit(90);
the script will be able to run for another 90 seconds from the time the function is called.
Using Other FTP Functions
A number of other FTP functions are useful in PHP .The function ftp_size() can tell
you the size of a file on a remote server. It has the following prototype:
int ftp_size( int ftp_connection, string remotefile_path )
This function returns the size of the remote file in bytes or –1 if an error occurs. It is
not supported by all FTP servers.
One handy use of ftp_size() is to work out the maximum execution time to set for
a particular transfer. Given the file size and speed of your connection, you can take aguess as to how long the transfer ought to take and use the 
set_time_limit() function
accordingly.
You can get and display a list of files in a directory on a remote FTP server by using
the following code:
$listing = ftp_nlist($conn, dirname($remotefile));
foreach ($listing as $filename)
echo “$filename <br> ”;
This code uses the ftp_nlist() function to get a list of names of files in a particular
directory.
In terms of other FTP functions, almost anything that you can do from an FTP com-
mand line, you can do with the FTP functions.Y ou can find the specific functions corre-sponding to each FTP command in the PHP online manual at http://php.net/manual/en/ref.ftp.php.
The exception is 
mget (multiple get), but you can use ftp_nlist() to get a list of
files and then fetch them as required.24 6728 CH19  9/2/04  1:16 PM  Page 436
437 Next
Further Reading
We covered a lot of ground in this chapter, and as you might expect, a lot of material is
out there on these topics. For information on the individual protocols and how theywork, you can consult the RFCs at http://www.rfc-editor.org/.
You might also find some of the protocol information at the World Wide Web
Consortium interesting; go to http://www.w3.org/Protocols/.
You can also try consulting a book on TCP/IP such as Computer Networks by Andrew
Tanenbaum.
Next
We ready to move on to Chapter 20,“Managing the Date and Time,” and look at PHP’s
libraries of date and calendar functions.There, you see how to convert from user-enteredformats to PHP formats to MySQL formats, and back again.24 6728 CH19  9/2/04  1:16 PM  Page 437
24 6728 CH19  9/2/04  1:16 PM  Page 438
20
Managing the Date and Time
INTHIS CHAPTER ,WE DISCUSS CHECKING AND FORMATTING the date and time and con-
verting between date formats.These capabilities are especially important when you are
converting between MySQL and PHP date formats, Unix and PHP date formats, anddates entered by the user in an HTML form.
Key topics covered in this chapter include
nGetting the date and time in PHP
nConverting between PHP and MySQL date formats
nCalculating dates
nUsing the calendar functions
Getting the Date and Time from PHP
Way back in Chapter 1,“PHP Crash Course,” we described using the date() function
to get and format the date and time from PHP . Here, we discuss this function and someof PHP’s other date and time functions in a little more detail.
Using the date() Function
As you might recall, the date() function takes two parameters, one of them optional.
The first one is a format string, and the second, optional one is a Unix timestamp. If youdon’t specify a timestamp,
date() will default to the current date and time. It returns a
formatted string representing the appropriate date.
A typical call to the date() function could be
echo date( ‘jS F Y’);
This call produces a date in the format 29th October 2000 .The format codes accepted
by date() are listed in Table 20.1.25 6728 CH20  9/2/04  1:16 PM  Page 439
440 Chapter 20 Managing the Date and Time
Table 20.1 Format Codes for PHP’s date() Function
Code Description
a Morning or afternoon, represented as two lowercase characters, either amor pm..
A Morning or afternoon, represented as two uppercase characters, either AMor PM.
B Swatch Internet time, a universal time scheme. More information is available at
http://www.swatch.com/.
c ISO 8601 date.A date is represented as YYYY -MM-DD.An uppercase Tseparates
the date from the time.The time is represented as HH:MM:SS. Finally, the time zoneis represented as an offset from Greenwich mean time (GMT)—for example,
2004-
03-26T21:04:42+11:00 .(This format code was added in PHP5.)
d Day of the month as a two-digit number with a leading zero.The range is from 01
to 31.
D Day of the week in three-character abbreviated text format.The range is from Mon
to Sun.
F Month of the year in full text format.The range is from January to December .
g Hour of the day in 12-hour format without leading zeros.The range is from 1to 12.
G Hour of the day in 24-hour format without leading zeros.The range is from 0to 23.
h Hour of the day in 12-hour format with leading zeros.The range is from 01to 12.
H Hour of the day in 24-hour format with leading zeros.The range is from 00to 23.
i Minutes past the hour with leading zeros.The range is from 00to 59.
I Daylight savings time, represented as a Boolean value.This format code returns 1if
the date is in daylight savings and 0if it is not.
j Day of the month as a number without leading zeros.The range is from 1to 31.
l Day of the week in full-text format.The range is from Monday to Sunday .
L Leap year, represented as a Boolean value.This format code returns 1if the date is in
a leap year and 0if it is not.
m Month of the year as a two-digit number with leading zeros.The range is from 01
to 12.
M Month of the year in three-character abbreviated text format.The range is from Jan
to Dec.
n Month of the year as a number without leading zeros.The range is from 1to 12.
O Difference between the current time zone and GMT in hours—for example, +1600 .
r RFC822-formatted date and time—for example, Wed, 9 Oct 2002 18:45:30
+1600 .(This code was added in PHP 4.0.4.)
s Seconds past the minute with leading zeros.The range is from 00to 59.
S Ordinal suffix for dates in two-character format. It can be st,nd,rd,or th,depend-
ing on the number it follows.
t Total number of days in the date’s month.The range is from 28to 31.
T Time zone setting of the server in three-character format—for example, EST.
U Total number of seconds from January 1, 1970, to this time; also known as a Unix
timestamp for this date.25 6728 CH20  9/2/04  1:16 PM  Page 440
441 Getting the Date and Time from PHP
w Day of the week as a single digit.The range is from 0(Sunday) to 6(Saturday).
W Week number in the year; ISO-8601 compliant. (This format code was added at
PHP 4.1.0.)
y Year in two-digit format—for example, 05.
Y Year in four-digit format—for example, 2005 .
z Day of the year as a number.The range is 0to 365.
Z Offset for the current time zone in seconds.The range is -43200 to 43200 .
Dealing with Unix Timestamps
The second parameter to the date() function is a Unix timestamp. In case you are won-
dering exactly what this means, most Unix systems store the current time and date as a32-bit integer containing the number of seconds since midnight, January 1, 1970, GMT,also known as the Unix Epoch .This concept can seem a bit esoteric if you are not famil-
iar with it, but it’s a standard and integers are easy for computers to deal with.
Unix timestamps are a compact way of storing dates and times, but it is worth noting
that they do not suffer from the year 2000 (Y2K) problem that affects some other com-pact or abbreviated date formats.They do have similar problems, though, because theycan represent only a limited span of time using a 32-bit integer. If your software needs todeal with events before 1902 or after 2038, you will be in trouble.
On some systems including Windows, the range is more limited.A timestamp cannot
be negative, so timestamps before 1970 cannot be used.T o keep your code portable, youshould bear this fact in mind.
You probably don’t need to worry about your software still being used in 2038.
Timestamps do not have a fixed size; they are tied to the size of a C long, which is atleast 32 bits. If your software still happens to be in use in 2038, it is exceedingly likelythat your compiler will be using a larger type.
Although this is a standard Unix convention, this format is still used by 
date() and a
number of other PHP functions even if you are running PHP under Windows.The only
difference is that, for Windows, the timestamp must be positive.
If you want to convert a date and time toa Unix timestamp, you can use the
mktime() function. It has the following prototype:
int mktime ([int hour[, int minute[, int second[, int month[,
int day[, int year[, int is_dst]]]]]]])
The parameters are fairly self-explanatory, with the exception of the last one, is_dst ,
which represents whether the date was in daylight savings time.Y ou can set this parame-ter to 
1if it was,0if it wasn’t, or -1(the default value) if you don’t know.This parameter
is optional, so you will rarely use it anyway.Table 20.1 Continued
Code Description25 6728 CH20  9/2/04  1:16 PM  Page 441
442 Chapter 20 Managing the Date and Time
The main trap to avoid with this function is that the parameters are in a fairly unin-
tuitive order.The ordering doesn’t lend itself to leaving out the time. If you are not wor-ried about the time, you can pass in 
0s to the hour,minute ,and second parameters.Y ou
can, however, leave out values from the right side of the parameter list. If you don’t pro-vide parameters, they will be set to the current values. Hence, a call such as
$timestamp = mktime();
returns the Unix timestamp for the current date and time.Y ou could also get this result
by calling
$timestamp = time();
The time() function does not take any parameters and always returns the Unix time-
stamp for the current date and time.
Another option is the date() function, as already discussed.The format string “U”
requests a timestamp.The following statement is equivalent to the two previous ones:
$timestamp = date( “U”);
You can pass in a two- or four-digit year to mktime() .Two-digit values from 0 to 69 are
interpreted as the years 2000 to 2069, and values from 70 to 99 are interpreted as 1970to 1999.
Here are some other examples to illustrate the use of 
mktime() :
$time = mktime(12, 0, 0);
gives noon on today’s date.
$time = mktime(0,0,0,1,1);
gives the 1st of January in the current year.
You can also use mktime() for simple date arithmetic. For example,
$time = mktime(12,0,0,$mon,$day+30,$year);
adds 30 days to the date specified in the components, even though ($day+30) will 
usually be bigger than the number of days in that month.
To eliminate some problems with daylight savings time, use hour 12 rather than 
hour 0. If you add (24 * 60 * 60) to midnight on a 25-hour day, you’ll stay on the sameday.Add the same number to midday, and it’ll give 
11am but will at least be the right day.
Using the getdate() Function
Another date-determining function you might find useful is getdate() .This function
has the following prototype:
array getdate ([int timestamp ])25 6728 CH20  9/2/04  1:16 PM  Page 442
443 Getting the Date and Time from PHP
It takes an optional timestamp as a parameter and returns an array representing the parts
of that date and time, as shown in Table 20.2.
Table 20.2 Array Key-Value Pairs from getdate() Function
Key V alue
seconds Seconds, numeric
minutes Minutes, numeric
hours Hours, numeric
mday Day of the month, numeric
wday Day of the week, numeric
mon Month, numeric
year Year, numeric
yday Day of the year, numeric
weekday Day of the week, full-text format
month Month, full-text format
0 Timestamp, numeric
After you have these parts in an array, you can easily process them into any required 
format.The 0element in the array (the timestamp) might seem useless, but if you call
getdate() without a parameter, it will give you the current timestamp.
Validating Dates
You can use the checkdate() function to check whether a date is valid.This capability
is especially useful for checking user input dates.The checkdate() function has the fol-
lowing prototype:
int checkdate (int month, int day, int year)
It checks whether the year is a valid integer between 0 and 32,767, whether the month
is an integer between 1 and 12, and whether the daygiven exists in that particular
month.The function also takes leap years into consideration when working out whethera day is valid.
For example,
checkdate(9, 18, 1972)
returns true,whereas
checkdate(9, 31, 2000)
does not.25 6728 CH20  9/2/04  1:16 PM  Page 443
444 Chapter 20 Managing the Date and Time
Converting Between PHP and MySQL Date
Formats
Dates and times in MySQL are handled in ISO 8601 format.Times work relatively intu-
itively, but ISO 8601 requires you to enter dates with the year first. For example, youcould enter August 29, 2005, either as 2005-08-29 or as 05-08-29. Dates retrieved fromMySQL are also in this format by default.
Depending on your intended audience, you might not find this function very user
friendly.T o communicate between PHP and MySQL, then, you usually need to performsome date conversion.This operation can be performed at either end.
When putting dates into MySQL from PHP , you can easily put them into the correct
format by using the 
date() function, as shown previously. One minor caution if you are
creating them from your own code is that you should store the day and month withleading zeros to avoid confusing MySQL.Y ou can use a two-digit year, but using a four-digit year is usually a good idea. If you want to convert dates or times in MySQL, twouseful functions are 
DATE_FORMAT() and UNIX_TIMESTAMP() .
The DATE_FORMAT() function works similarly to the PHP function but uses different
formatting codes.The most common thing you want to do is format a date in normalAmerican format (MM-DD-YYYY) rather than in the ISO format (YYYY -MM-DD)native to MySQL.Y ou can do this by writing your query as follows:
SELECT DATE_FORMAT( date_column , ‘%m %d %Y ’)
FROM tablename ;
The format code %mrepresents the month as a two-digit number; %d,the day as a two-
digit number; and %Y,the year as a four-digit number.A summary of the more useful
MySQL format codes for this purpose is shown in Table 20.3.
Table 20.3 Format Codes for MySQL’s DATE_FORMAT() Function
Code Description
%M Month, full text
%W Weekday name, full text
%D Day of month, numeric, with text suffix (for example, 1st)
%Y Year, numeric, four digits
%y Year, numeric, two digits
%a Weekday name, three characters
%d Day of month, numeric, leading zeros
%e Day of month, numeric, no leading zeros
%m Month, numeric, leading zeros
%c Month, numeric, no leading zeros25 6728 CH20  9/2/04  1:16 PM  Page 444
445 Calculating Dates in PHP
%b Month, text, three characters
%j Day of year, numeric
%H Hour, 24-hour clock, leading zeros
%k Hour, 24-hour clock, no leading zeros
%hor %I Hour, 12-hour clock, leading zeros
%l Hour, 12-hour clock, no leading zeros
%i Minutes, numeric, leading zeros
%r Time, 12-hour (hh:mm:ss [AM|PM])
%T Time, 24-hour (hh:mm:ss)
%Sor %s Seconds, numeric, leading zeros
%p AM or PM
%w Day of the week, numeric, from 0 (Sunday) to 6 (Saturday)
The UNIX_TIMESTAMP function works similarly but converts a column into a Unix time-
stamp. For example,
SELECT UNIX_TIMESTAMP( date_column )
FROM tablename ;
returns the date formatted as a Unix timestamp.Y ou can then do as you want with it in
PHP .
You can easily perform date calculations and comparisons with the Unix timestamp.
Bear in mind, however, that a timestamp can usually represent dates only between 1902and 2038, whereas the MySQL date type has a much wider range.
As a rule of thumb, use a Unix timestamp for date calculations and the standard date
format when you are just storing or showing dates.
Calculating Dates in PHP
A simple way to work out the length of time between two dates in PHP is to use thedifference between Unix timestamps.We used this approach in the script shown inListing 20.1.
Listing 20.1 calc_age.php —Working Out a Person’s Age Based on Birthdate
<?php
// set date for calculation$day = 18;$month = 9;$year = 1972;Table 20.3 Continued
Code Description25 6728 CH20  9/2/04  1:16 PM  Page 445
446 Chapter 20 Managing the Date and Time
// remember you need bday as day month and year
$bdayunix = mktime (0, 0, 0, $month, $day, $year); // get ts for then$nowunix = time(); // get unix ts for today$ageunix = $nowunix - $bdayunix; // work out the difference$age = floor($ageunix / (365 * 24 * 60 * 60)); // convert from seconds to years
echo “Age is $age ”;
?>
This script sets the date for calculating the age. In a real application, it is likely that this
information might come from an HTML form.The script begins by calling mktime() to
work out the timestamp for the birthday and for the current time:
$bdayunix = mktime (0, 0, 0, $month, $day, $year);
$nowunix = mktime(); // get unix ts for today
Now that these dates are in the same format, you can simply subtract them:
$ageunix = $nowunix - $bdayunix;
Now, the slightly tricky part: converting this time period back to a more human-friendly
unit of measure.This is not a timestamp but instead the age of the person measured inseconds.Y ou can convert it back to years by dividing by the number of seconds in a year.You then round it down by using the 
floor() function because a person is not said to
be, for example, 20, until the end of his twentieth year:
$age = floor($ageunix / (365 * 24 * 60 * 60)); // convert from seconds to years
Note, however, that this approach is somewhat flawed because it is limited by the rangeof Unix timestamps (generally 32-bit integers). Birthdates are not an ideal application for timestamps.This example works on all platforms only for people born from 1970onward.Windows cannot manage timestamps prior to 1970. Even then, this calculationis not always accurate because it does not allow for leap years and might fail if midnighton the person’s birthday is the daylight savings switchover time in the local time zone.
Calculating Dates in MySQL
PHP does not have many date manipulation functions built in. Obviously, you can writeyour own, but ensuring that you correctly account for leap years and daylight savings
time can be tricky.Another option is to download other people’s functions.Y ou can findmany as user-contributed notes in the PHP manual, but only some of them are wellthought out.
An option that may not seem immediately obvious is using MySQL. MySQL pro-
vides an extensive range of date manipulation functions that work for times outside thereliable range of Unix timestamps.Y ou need to connect to a MySQL server to run a
MySQL query, but you do not have to use data from the database.Listing 20.1 Continued25 6728 CH20  9/2/04  1:16 PM  Page 446
447 Calculating Dates in MySQL
The following query adds one day to the date February 28, 1700, and returns the
resulting date:
select adddate( ‘1700-02-28 ’, interval 1 day)
The year 1700 is not a leap year, so the result is 1700-03-01.
You can find an extensive syntax for describing and modifying dates and times
described in the MySQL manual; it is located at
http://www.mysql.com/doc/en/Date_and_time_functions.html
Unfortunately, there is not a simple way to get the number of years between two dates,
so the birthday example is still a little flaky.Y ou can get a person’s age in days very easily,and Listing 20.2 converts that age to years imprecisely.
Listing 20.2 mysql_calc_age.php —Using MySQL to Work Out a Person’s Age
Based on Birthdate
<?php
// set date for calculation$day = 18;$month = 9;$year = 1972;
// format birthday as an ISO 8601 date
$bdayISO = date(“c”, mktime (0, 0, 0, $month, $day, $year));
// use mysql query to calculate an age in days
$db = mysqli_connect(‘localhost’, ‘user’, ‘pass’);$res = mysqli_query($db, “select datediff(now(), ‘$bdayISO’)”);$age = mysqli_fetch_array($res);
// convert age in days to age in years (approximately)
echo “Age is “.floor($age[0]/365.25);
?>
After formatting the birthday as an ISO timestamp, you pass the following query to
MySQL:
select datediff(now(), ‘1972-09-18T00:00:00+10:00 ’)
The MySQL function now() always returns the current date and time.The MySQL
function datediff() (added at version 4.1.1) subtracts one date from another and
returns the difference in days.
It is worth noting that you are not selecting data from a table or even choosing a
database to use for this script, but you do need to log in to the MySQL server with avalid username and password.25 6728 CH20  9/2/04  1:16 PM  Page 447
448 Chapter 20 Managing the Date and Time
Because no specific built-in function is available for such calculations, an SQL query
to calculate the exact number of years is fairly complex. Here, we took a shortcut anddivided the age in days by 365.25 to give the age in years.This calculation can be oneyear out if run on somebody’s birthday, depending on how many leap years there have
been in that person’s lifetime.
Using Microseconds
For some applications, measuring time in seconds is not precise enough to be useful. If
you want to measure very short periods, such as the time taken to run some or all of a
PHP script, you need to use the function microtime() .
If you are using PHP5, call microtime() with the parameter get_as_float set to
true.This call returns a timestamp as a floating-point number ready for whatever use
you have in mind.The timestamp is the same one returned by mktime() ,time() ,o r
date() but has a fractional component.
The statement
echo number_format(microtime(true), 10, ‘.’, ‘’);
produces something like 1080303003.1321949959.
On older versions, you cannot request the result as a float. It is provided as a string.A
call to microtime() without a parameter returns a string of this form “0.02149300
1080302326 ”.The first number is the fractional part, and the second number is the num-
ber of whole seconds elapsed since January 1, 1970.
Dealing with numbers rather than strings is more useful, so if you don’t mind your
code requiring PHP 5.0 to run, it is easiest to call microtime() with the parameter
true.
Using the Calendar Functions
PHP has a set of functions that enable you to convert between different calendar sys-tems.The main calendars you will work with are the Gregorian, Julian, and Julian DayCount.
Most Western countries currently use the Gregorian calendar.The Gregorian date
October 15, 1582, is equivalent to October 5, 1582, in the Julian calendar. Prior to thatdate, the Julian calendar was commonly used. Different countries converted to theGregorian calendar at different times and some not until early in the twentieth century.
Although you may have heard of these two calendars, you might not have heard of
the Julian Day Count (JD). It is similar in many ways to a Unix timestamp. It is a countof the number of days since a date around 4000 BC. In itself, it is not particularly useful,but it is useful for converting between formats.T o convert from one format to another,
you first convert to a Julian Day Count and then to the desired output calendar.25 6728 CH20  9/2/04  1:16 PM  Page 448
449 Next
To use these functions under Unix, you first need to compile the calendar extension
into PHP with --enable-calendar .These functions are built into the standard
Windows install.
To give you a taste for these functions, consider the prototypes for the functions you
would use to convert from the Gregorian calendar to the Julian calendar:
int gregoriantojd (int month, int day, int year)
string jdtojulian(int julianday )
To convert a date, you would need to call both of these functions:
$jd = gregoriantojd (9, 18, 1582);
echo jdtojulian($jd);
This call echoes the Julian date in a MM/DD/YYYY format.
Variations of these functions exist for converting between the Gregorian, Julian,
French, and Jewish calendars and Unix timestamps.
Further Reading
If you would like to read more about date and time functions in PHP and MySQL, youcan consult the relevant sections of the manuals at
http://php.net/manual/en/ref.datetime.php
http://www.mysql.com/doc/en/Date_and_time_functions.html
If you are converting between calendars, try the manual page for PHP’s calendar func-
tions:
http://php.net/manual/en/ref.calendar.php
Next
One of the unique and useful things you can do with PHP is create images on the fly.Chapter 21,“Generating Images,” discusses how to use the image library functions toachieve some interesting and useful effects.25 6728 CH20  9/2/04  1:16 PM  Page 449
25 6728 CH20  9/2/04  1:16 PM  Page 450
21
Generating Images
O NE OF THE USEFUL THINGS YOU CAN DO WITH PHP is create images on the fly. PHP
has some built-in image information functions, and you can also use the GD2 library tocreate new images or manipulate existing ones.This chapter discusses how to use theseimage functions to achieve some interesting and useful effects.
Key topics covered in this chapter include
nSetting up image support in PHP
nUnderstanding image formats
nCreating images
nUsing automatically generated images in other pages
nUsing text and fonts to create images
nDrawing figures and graphing data
Specifically, we look at two examples: generating website buttons on the fly and drawing
a bar chart using figures from a MySQL database.
We use the GD2 library here, but there is one other popular PHP image library.The
ImageMagick library is not part of the standard PHP build but is easily installable fromthe PHP Extension Class Library (PECL). ImageMagick and GD2 have a lot of fairlysimilar features, but in some areas ImageMagick goes further. If you want to create GIFs(even animated GIFS), you should look at ImageMagick. If you want to work with truecolor images or render transparent effects, you should compare the offerings in bothlibraries.
See PECL for the PHP download of ImageMagick at http://pecl.php.net/package/
imagick.
See the main ImageMagick site for demonstrations of its capabilities and detailed
documentation at http://www.imagemagick.org.26 6728 CH21  9/2/04  1:14 PM  Page 451
452 Chapter 21 Generating Images
Setting Up Image Support in PHP
Some of the image functions in PHP are always available, but most of them require the
GD2 library. Detailed information about GD2 is available athttp://www.boutell.com/gd/.
Since PHP 4.3, PHP comes with its own forked version of the GD2 library,
supported by the PHP team.This version is easier to install with PHP and is usuallymore stable, so it’s advisable to use this version.Under Windows, PNGs and JPEGs areautomatically supported.
If you have Unix and want to work with PNGs, you need to install 
libpng from
http://www.libpng.org/pub/png/ and zlib from http://www.gzip.org/zlib/.
You then need to configure PHP with the following options:
--with-png-dir=/path/to/libpng
--with-zlib-dir=/path/to/zlib
If you have Unix and want to work with JPEGs, you need to download jpeg-6b and
recompile GD with JPEG support included.Y ou can download it from ftp://ftp.uu.net/
graphics/jpeg/.
You then need to reconfigure PHP with the following option and recompile it:
--with-jpeg-dir=/path/to/jpeg-6b
If you want to use TrueT ype fonts in your images, you also need the FreeT ype library. It
also comes with PHP4.Alternatively, you can download it fromhttp://www.freetype.org/.
If you want to use PostScript T ype 1 fonts instead, you need to download 
t1lib ,
available from ftp://sunsite.unc.edu/pub/Linux/libs/graphics/.
You then need to run PHP’s configure program with
--with-t1lib[= path/to/t1lib ]
Finally, you will, of course, need to configure PHP using --with-gd .
Understanding Image Formats
The GD library supports JPEG, PNG, and WBMP formats. It no longer supports the
GIF format. Let’s briefly look at each of these formats.
JPEG
JPEG (pronounced “jay-peg”) stands for Joint Photographic Experts Group and is really the
name of a standards body, not a specific format.The file format we mean when we referto JPEGs is officially called JFIF , which corresponds to one of the standards issued byJPEG.26 6728 CH21  9/2/04  1:14 PM  Page 452
453 Understanding Image Formats
In case you are not familiar with them, JPEGs are usually used to store photographic
or other images with many colors or gradations of color.This format uses lossy compres-sion; that is, to squeeze a photograph into a smaller file, some image quality is lost.Because JPEGs should contain what are essentially analog images, with gradations ofcolor, the human eye can tolerate some loss of quality.This format is not suitable for linedrawings, text, or solid blocks of color.
You can read more about JPEG/JFIF at the official JPEG site at http://www.jpeg.org/.
PNG
PNG (pronounced “ping”) stands for Portable Network Graphics .This file format is the
replacement for GIF (Graphics Interchange Format) for reasons we discuss shortly.The
PNG website describes it as “a turbo-studly image format with lossless compression.”Because it is lossless, this image format is suitable for images that contain text, straightlines, and blocks of color such as headings and website buttons—all the same purposesfor which you previously might have used GIFs.A PNG-compressed version of the sameimage is generally similar in size to a GIF-compressed version. PNG also offers variabletransparency, gamma correction, and two-dimensional interlacing. It does not, however,support animations; for this, you must use the extension format MNG, which is still indevelopment.
Lossless compression schemes are good for illustrations but not generally a good way
to store large photos because they tend to give large file sizes.
You can read more about PNG at the official PNG site at http://www.libpng.org/
pub/png/.
WBMP
WBMP , which stands for Wireless Bitmap ,is a file format designed specifically for wireless
devices. It is not in wide use.
GIF
GIF stands for Graphics Interchange Format. It is a compressed lossless format widelyused on the Web for storing images containing text, straight lines, and blocks of singlecolor.
The question you are likely asking is,“Why doesn’t GD support GIFs?”The answer is
that it used to, up to version 1.3. For some older PHP versions, you could choose todownload and install GD version 1.3. If you want this version, you can get it fromhttp://www.linuxguruz.org/downloads/gd1.3.tar.gz.
Note, however, that the makers of GD discourage you from using this version and no
longer support it, and it forces you to use an old version of PHP . Note also that thisURL for the GIF version might not be available forever.26 6728 CH21  9/2/04  1:14 PM  Page 453
454 Chapter 21 Generating Images
There is a good reason that GD no longer supports writing GIFs (although it does read
GIFs). Standard GIFs use a form of compression known as LZW (Lempel Ziv Welch) ,which
was subject to a patent owned by UNISYS.After allowing the format to establish itself as a
de facto standard for many years, UNISYS decided that providers of programs that read andwrite GIFs must pay licensing fees to UNISYS. For example,Adobe has paid a licensing feefor products such as Photoshop that are used to create GIFs. Code libraries appeared to bein the situation in which the writers of the code library must pay a fee, and, in addition, theusers of the library must also pay a fee.Thus, if you used a GIF version of the GD library onyour website, you might have owed UNISYS some fairly hefty licensing fees.The GIF read-
ing functionality falls outside the license and is therefore still available.
This situation was unfortunate because GIFs were in use for many years before
UNISYS chose to enforce licensing.Thus, the format became one of the standards forthe Web.A lot of ill feeling exists about the patent in the web development community.You can read about this (and form your own opinion) at UNISYS’s site at
http://www.unisys.com/about__unisys/lzw/.
You can also read about it at Burn All Gifs, the opposition at http://burnallgifs.org/.
The U.S. version of the LZW patent expired on June 21, 2003, and the European and
Asian ones at various times in 2004.We are not lawyers, and none of this should be interpret-ed as legal advice, but we think it is easier to use PNGs, regardless of the politics. Browser sup-port for PNGs was variable a few years ago but is pretty good in all recent browsers.AdvancedPNG feature support is still a bit patchy, but simple images should work everywhere.
It is expected (at this point in time) that GIF write support will be restored in 
PHP 5.0.1 and PHP 4.3.8 (which are each scheduled for release after the expiration dateof the LZW patent).
Creating Images
The four basic steps to creating an image in PHP are as follows:
1. Creating a canvas image on which to work.2. Drawing shapes or printing text on that canvas.3. Outputting the final graphic.4. Cleaning up resources.
Let’s begin by looking at the simple image creation script shown in Listing 21.1.
Listing 21.1 simplegraph.php —Outputs a Simple Line Graph with the Label Sales
<?php
// set up image
$height = 200;$width = 200;$im = ImageCreateTrueColor($width, $height);$white = ImageColorAllocate ($im, 255, 255, 255);$blue = ImageColorAllocate ($im, 0, 0, 64);26 6728 CH21  9/2/04  1:14 PM  Page 454
455 Creating Images
// draw on image
ImageFill($im, 0, 0, $blue);ImageLine($im, 0, 0, $width, $height, $white);ImageString($im, 4, 50, 150, ‘Sales’, $white);
// output image
Header ( ‘Content-type: image/png ’);
ImagePng ($im);
// clean up
ImageDestroy($im);
?>
The output from running this script is shown in Figure 21.1.Listing 21.1 Continued 
Figure 21.1 The script draws a blue background and then adds a line and a
text label for the image.
Now let’s walk through the steps of creating this image one by one.
Creating a Canvas Image
To begin building or changing an image in PHP , you need to create an image identifier.
There are two basic ways to do this. One is to create a blank canvas, which you can do witha call to the 
ImageCreateTrueColor() function, as done in this script with the following:
$im = ImageCreateTrueColor($width, $height);
26 6728 CH21  9/2/04  1:14 PM  Page 455
456 Chapter 21 Generating Images
You need to pass two parameters to ImageCreateTrueColor() .The first is the width of
the new image, and the second is the height of the new image.The function will returnan identifier for the new image.These identifiers work a lot like file handles.
An alternative way is to read in an existing image file that you can then filter, resize, or
add to.Y ou can do this with one of the functions 
ImageCreateFromPNG() ,
ImageCreateFromJPEG() ,or ImageCreateFromGIF() ,depending on the file format you
are reading in. Each of these functions takes the filename as a parameter, as in this example:
$im = ImageCreateFromPNG( ‘baseimage.png ’);
An example is shown later in this chapter using existing images to create buttons on 
the fly.
Drawing or Printing Text on the Image
Drawing or printing text on the image really involves two stages. First, you must selectthe colors in which you want to draw.As you probably already know, colors to be dis-played on a computer monitor are made up of different amounts of red, green, and bluelight. Image formats use a color palette that consists of a specified subset of all the possi-ble combinations of the three colors.T o use a color to draw in an image, you need to
add this color to the image’s palette.Y ou must do this for every color you want to use,even black and white.
You can select colors for your image by calling the 
ImageColorAllocate() function.
You need to pass your image identifier and the red, green, and blue (RGB) values of the
color you want to draw into the function.
Listing 21.1 uses two colors: blue and white.Y ou allocate them by calling
$white = ImageColorAllocate ($im, 255, 255, 255);
$blue = ImageColorAllocate ($im, 0, 0, 64);
The function returns a color identifier that you can use to access the color later.
Second, to actually draw into the image, you can use a number of different functions,
depending on what you want to draw—lines, arcs, polygons, or text.
The drawing functions generally require the following as parameters:
nThe image identifier
nThe start and sometimes the end coordinates of what you want to draw
nThe color you want to draw in
nFor text, the font information
In this case, you use three of the drawing functions. Let’s look at each one in turn.
First, you paint a blue background on which to draw using the ImageFill() function:
ImageFill($im, 0, 0, $blue);
This function takes the image identifier, the start coordinates of the area to paint (x and y), and the color to fill in as parameters.26 6728 CH21  9/2/04  1:14 PM  Page 456
457 Creating Images
Note
The coordinates of the image start from the top-left corner, which is x=0, y=0. The bottom-right corner of
the image is x=$width , y=$height . This is normal for computer graphics, but the opposite of typical
math graphing conventions, so beware!
Next, you draw a line from the top-left corner ( 0, 0) to the bottom-right corner
($width, $height ) of the image:
ImageLine($im, 0, 0, $width, $height, $white);
This function takes the image identifier, the start point x and y for the line, the endpoint, and then the color as parameters.
Finally, you add a label to the graph:
ImageString($im, 4, 50, 150, ‘Sales’, $white);
The ImageString() function takes some slightly different parameters.The prototype for
this function is
int imagestring (resource im, intfont, intx, inty, strings, intcol)
It takes as parameters the image identifier, the font, the x and y coordinates to start writ-
ing the text, the text to write, and the color.
The font is a number between 1 and 5.These numbers represent a set of built-in
fonts.As an alternative to these fonts, you can use TrueT ype fonts or PostScript T ype 1fonts. Each of these font sets has a corresponding function set.We use the TrueT ypefunctions in the next example.
A good reason for using one of the alternative font function sets is that the text writ-
ten by 
ImageString() and associated functions, such as ImageChar() (write a character
to the image) is aliased.The TrueT ype and PostScript functions produce antialiased text.
If you’re not sure what the difference is, look at Figure 21.2.Where curves or angled
lines appear in the letters, the aliased text appears jagged.The curve or angle is achievedby using a “staircase” effect. In the antialiased image, when curves or angles appear in the
text, pixels in colors between the background and the text color are used to smooth thetext’s appearance.
Figure 21.2 Normal text appears jagged, especially in a large font size.
Antialiasing smoothes the curves and corners of the letters.
26 6728 CH21  9/2/04  1:14 PM  Page 457
458 Chapter 21 Generating Images
Outputting the Final Graphic
You can output an image either directly to the browser or to a file.
In this example, you output the image to the browser.This is a two-stage process.
First, you need to tell the web browser that you are outputting an image rather than textor HTML.Y ou do this by using the 
Header() function to specify the MIME type of the
image:
Header ( ‘Content-type: image/png ’);
Normally, when you retrieve a file in your browser, the MIME type is the first thing the
web server sends. For an HTML or PHP page (post execution), the first thing sent is
Content-type:  text/html
This tells the browser how to interpret the data that follows.
In this case, you want to tell the browser that you are sending an image instead of the
usual HTML output.Y ou can do this by using the Header() function, which we have
not yet discussed.
This function sends raw HTTP header strings.Another typical application of this
function is to do HTTP redirects.They tell the browser to load a different page insteadof the one requested.They are typically used when a page has been moved. For example,
Header ( ‘Location: http://www.domain.com/new_home_page.html ‘);
An important point to note when using the Header() function is that it cannot be exe-
cuted if content has already been sent for the page. PHP will send an HTTP headerautomatically for you as soon as you output anything to the browser. Hence, if you haveany 
echo statements, or even any whitespace before your opening PHP tag, the headers
will be sent, and you will get a warning message from PHP when you try to call
Header() .However,you can send multiple HTTP headers with multiple calls to the
Header() function in the same script, although they must all appear before any output is
sent to the browser.
After you have sent the header data, you output the image data with a call to
ImagePng ($im);
This call sends the output to the browser in PNG format. If you wanted it sent in a dif-ferent format, you could call 
ImageJPEG() —if JPEG support is enabled.Y ou would also
need to send the corresponding header first, as shown here:
Header ( ‘Content-type: image/jpeg ’);
The second option you can use, as an alternative to all the previous ones, is to write the
image to a file instead of to the browser.Y ou can do this by adding the optional secondparameter to 
ImagePNG() (or a similar function for the other supported formats):
ImagePNG($im, $filename);
Remember that all the usual rules about writing to a file from PHP apply (for example,having permissions set up correctly).26 6728 CH21  9/2/04  1:14 PM  Page 458
459 Using Automatically Generated Images in Other Pages
Cleaning Up
When you’re done with an image, you should return the resources you have been using
to the server by destroying the image identifier.Y ou can do this with a call to
ImageDestroy() :
ImageDestroy($im);
Using Automatically Generated Images in Other
Pages
Because a header can be sent only once, and this is the only way to tell the browser that
you are sending image data, it is slightly tricky to embed any images you create on the
fly in a regular page.Three ways you can do it are as follows:
1. Y ou can have an entire page consist of the image output, as we did in the previous
example.
2. Y ou can write the image out to a file, as previously mentioned, and then refer to it
with a normal <IMG> tag.
3. Y ou can put the image production script in an image tag.
We have covered methods 1 and 2 already. Let’s briefly look at method 3 now.T o use
this method, you include the image inline in HTML by having an image tag along thelines of the following:
<img src= ”simplegraph.php ”height=”200”width=”200”alt=”Sales going down ”/>
Instead of putting in a PNG, JPEG, or GIF directly, put in the PHP script that generates
the image in the SRC tag. It will be retrieved and the output added inline, as shown inFigure 21.3.
Figure 21.3 The dynamically produced inline image appears the same as a
regular image to the end user.
26 6728 CH21  9/2/04  1:14 PM  Page 459
460 Chapter 21 Generating Images
Using Text and Fonts to Create Images
Let’s look at a more complicated example. It is useful to be able to create buttons or
other images for your website automatically.Y ou can easily build simple buttons based ona rectangle of background color using the techniques we’ve already discussed.Y ou cangenerate more complicated effects programmatically, too, but you can generally do itmore easily in a paint program.This also makes it easier to get an artist to do the art-work and leave programmers programming.
In this example, you generate buttons using a blank button template.This allows you
to have features such as beveled edges and so on, which are a good deal easier to gener-ate using Photoshop, the GIMP , or some other graphics tool.With the image library inPHP , you can begin with a base image and draw on top of that.
You also use TrueT ype fonts in this example so that you can use antialiased text.The
TrueT ype font functions have their own quirks, which we discuss.
The basic process is to take some text and generate a button with that text on it.The
text will be centered both horizontally and vertically on the button, and will be ren-dered in the largest font size that will fit on the button.
We built a front end to the button generator for testing and experimenting.This
interface is shown in Figure 21.4. (We did not include the HTML for this form herebecause it is very simple, but you can find it on the CD in 
design_button.html .)
Figure 21.4 The front end lets a user choose the button color and type in
the required text.
You could use this type of interface for a program to automatically generate websites.
You could also call the script in an inline fashion, to generate all a website’s buttons on
the fly, but this would require caching to stop it becoming time consuming.
Typical output from the script is shown in Figure 21.5.
26 6728 CH21  9/2/04  1:14 PM  Page 460
461 Using Text and Fonts to Create Images
Figure 21.5 This button is generated by the make_button.php script.
The button is generated by the make_button.php script shown in Listing 21.2.
Listing 21.2 make_button.php —Enables Calls from the Form in
design_button.html or from Within an HTML Image Tag
<?php
// check we have the appropriate variable data// variables are button-text and color
$button_text = $_REQUEST[ ‘button_text ’];
$color = $_REQUEST[ ‘color’];
if ((empty($button_text) || empty($color)) || (!($color== ’red’
|| $color== ’blue’|| $color== ’green’)))
{
echo ‘Could not create image - form not filled out correctly ’;
exit;
}
// create an image of the right background and check size
$im = ImageCreateFromPNG ($color. ’-button.png ’);
if (!$im){
echo ‘Could not create image ’;
exit;
}
$width_image = ImageSX($im);
$height_image = ImageSY($im);
// Our images need an 18 pixel margin in from the edge of the image
$width_image_wo_margins = $width_image - (2 * 18);$height_image_wo_margins = $height_image - (2 * 18);
26 6728 CH21  9/2/04  1:14 PM  Page 461
462 Chapter 21 Generating Images
// Work out if the font size will fit and make it smaller until it does
// Start out with the biggest size that will reasonably fit on our buttons$font_size = 33;
// you need to tell GD2 where your fonts reside
putenv(‘GDFONTPATH=C:\WINDOWS\Fonts ’);
$fontname = ‘arial’;
do
{
$font_size--;
// find out the size of the text at that font size
$bbox=ImageTTFBBox ($font_size, 0, $fontname, $button_text);
$right_text = $bbox[2];   // right co-ordinate
$left_text = $bbox[0];    // left co-ordinate$width_text = $right_text - $left_text;  // how wide is it?$height_text = abs($bbox[7] - $bbox[1]);  // how tall is it?
} 
while ( $font_size>8 &&
( $height_text>$height_image_wo_margins ||
$width_text>$width_image_wo_margins )
);
if ( $height_text>$height_image_wo_margins ||
$width_text>$width_image_wo_margins )
{
// no readable font size will fit on buttonecho ‘Text given will not fit on button.<br /> ’;
}else{
// We have found a font size that will fit// Now work out where to put it
$text_x = $width_image/2.0 - $width_text/2.0;
$text_y = $height_image/2.0 - $height_text/2.0 ;
if ($left_text < 0)
$text_x += abs($left_text);    // add factor for left overhangListing 21.2 Continued 26 6728 CH21  9/2/04  1:14 PM  Page 462
463 Using Text and Fonts to Create Images
$above_line_text = abs($bbox[7]);   // how far above the baseline?
$text_y += $above_line_text;        // add baseline factor
$text_y -= 2;  // adjustment factor for shape of our template$white = ImageColorAllocate ($im, 255, 255, 255);ImageTTFText ($im, $font_size, 0, $text_x, $text_y, $white, $fontname,
$button_text);
Header ( ‘Content-type: image/png ’);
ImagePNG ($im);
}
ImageDestroy ($im);
?>
This is one of the longest scripts we’ve looked at so far. Let’s step through it section by
section.The script begins with some basic error checking and then sets up the canvas onwhich you’re going to work.
Setting Up the Base Canvas
In Listing 21.2, instead of starting from scratch, you start with an existing image for thebutton.Y ou provide a choice of three colors in the basic button: red (
red-button.png ),
green (green-button.png ), and blue ( blue-button.png ).
The user’s chosen color is stored in the color variable from the form.
You begin by extracting the color from the superglobal $_REQUEST and setting up a
new image identifier based on the appropriate button:
$color = $_REQUEST[ ‘color’];
...$im = ImageCreateFromPNG ($color. ’-button.png ’);
The function ImageCreateFromPNG() takes the filename of a PNG as a parameter and
returns a new image identifier for an image containing a copy of that PNG. Note that
this does not modify the base PNG in any way.Y ou can use the
ImageCreateFromJPEG() and ImageCreateFromGIF() functions in the same way if the
appropriate support is installed.
Note
The call to ImageCreateFromPNG() creates the image in memory only. To save the image to a file or
output it to the browser, you must call the ImagePNG() function. You’ll come to that discussion shortly,
but you have other work to do with the image first.Listing 21.2 Continued 26 6728 CH21  9/2/04  1:14 PM  Page 463
464 Chapter 21 Generating Images
Fitting the Text onto the Button
Some text typed in by the user is stored in the $button_text variable.What you need
to do is print that text on the button in the largest font size that will fit.Y ou do this byiteration, or strictly speaking, by iterative trial and error.
You start by setting up some relevant variables.The first two are the height and width
of the button image:
$width_image = ImageSX($im);
$height_image = ImageSY($im);
The second two represent a margin in from the edge of the button.The button images
are beveled, so you need to leave room for that around the edges of the text. If you areusing different images, this number will be different! In this case, the margin on eachside is around 18 pixels:
$width_image_wo_margins = $width_image - (2 * 18);
$height_image_wo_margins = $height_image - (2 * 18);
You also need to set up the initial font size.Y ou start with 32 (actually 33, but you decre-
ment that in a minute) because this is about the biggest font that will fit on the buttonat all:
$font_size = 33;
With GD2, you need to tell it where your fonts live by setting the environment variable
GDFONTPATH as follows:
putenv(‘GDFONTPATH=C:\WINDOWS\Fonts ’);
You also set up the name of the font you want to use.Y ou’re going to use this font with
the TrueT ype functions, which will look for the font file in the preceding location andwill append the filename with 
.ttf (TrueT ype Font):
$fontname = ‘arial’;
Note that depending on your operating system, you may have to add .ttf to the end of
the font name.
If you don’t have Arial (the font we used here) on your system, you can easily change
it to another TrueT ype font.
Now you loop, decrementing the font size at each iteration, until the submitted text
will fit on the button reasonably:
do
{
$font_size--;26 6728 CH21  9/2/04  1:15 PM  Page 464
465 Using Text and Fonts to Create Images
// find out the size of the text at that font size
$bbox=ImageTTFBBox ($font_size, 0, $fontname, $button_text);
$right_text = $bbox[2];   // right co-ordinate
$left_text = $bbox[0];    // left co-ordinate$width_text = $right_text - $left_text;  // how wide is it?$height_text = abs($bbox[7] - $bbox[1]);  // how tall is it?
}
while ( $font_size>8 &&
( $height_text>$height_image_wo_margins ||
$width_text>$width_image_wo_margins )
);
This code tests the size of the text by looking at what is called the bounding box of the
text.Y ou do this by using the ImageGetTTFBBox() function, which is one of the
TrueT ype font functions.Y ou will, after you have figured out the size, print on the but-
ton using a TrueT ype font (we used Arial, but you can use whatever you like) and the
ImageTTFText() function.
The bounding box of a piece of text is the smallest box you could draw around the
text.An example of a bounding box is shown in Figure 21.6.
Figure 21.6 Coordinates of the bounding box are given relative to the 
baseline.The origin of the coordinates is shown here as (0,0).
To get the dimensions of the box, you call
$bbox=ImageTTFBBox ($font_size, 0, $fontname, $button_text);
This call says,“For given font size $font_size ,with text slanted on an angle of zero
degrees, using the TrueT ype font Arial, tell me the dimensions of the text in
$button_text .”
Note that you actually need to pass the path to the file containing the font into the
function. In this case, it’s in the same directory as the script (the default), so we didn’tspecify a longer path.
The function returns an array containing the coordinates of the corners of the
bounding box.The contents of the array are shown in Table 21.1.
26 6728 CH21  9/2/04  1:15 PM  Page 465
466 Chapter 21 Generating Images
Table 21.1 Contents of the Bounding Box Array
Array Index Contents
0x  coordinate, lower-left corner
1y  coordinate, lower-left corner
2x  coordinate, lower-right corner
3y  coordinate, lower-right corner
4x  coordinate, upper-right corner
5y  coordinate, upper-right corner
6x  coordinate, upper-left corner
7y  coordinate, upper-left corner
To remember what the contents of the array are, just remember that the numbering
starts at the bottom-left corner of the bounding box and works its way around counter-clockwise.
There is one tricky thing about the values returned from the 
ImageTTFBBox() func-
tion.They are coordinate values, specified from an origin. However, unlike coordinatesfor images, which are specified relative to the top-left corner, they are specified relativeto a baseline.
Look at Figure 21.6 again.Y ou will see that we have drawn a line along the bottom
of most of the text.This is known as the baseline .Some letters hang below the baseline,
such as yin this example.These parts of the letters are called descenders .
The left side of the baseline is specified as the origin of measurements—that is, x
coordinate 0 and y coordinate 0. Coordinates above the baseline have a positive x coor-dinate, and coordinates below the baseline have a negative x coordinate.
In addition, text might actually have coordinate values that sit outside the bounding
box. For example, the text might actually start at an x coordinate of –1.
What this all adds up to is the fact that care is required when you’re performing cal-
culations with these numbers.
You work out the width and height of the text as follows:
$right_text = $bbox[2];   // right co-ordinate
$left_text = $bbox[0];    // left co-ordinate$width_text = $right_text - $left_text;  // how wide is it?$height_text = abs($bbox[7] - $bbox[1]);  // how tall is it?
After you have this information, you test the loop condition:
} while ( $font_size>8 &&
( $height_text>$height_image_wo_margins ||
$width_text>$width_image_wo_margins )
);26 6728 CH21  9/2/04  1:15 PM  Page 466
467 Using Text and Fonts to Create Images
You test two sets of conditions here.The first is that the font is still readable; there’s
no point in making it much smaller than 8-point type because the button becomes toodifficult to read.The second set of conditions tests whether the text will fit inside thedrawing space you have available for it.
Next, you check to see whether the iterative calculations found an acceptable font
size and report an error if not:
if ( $height_text>$height_image_wo_margins ||
$width_text>$width_image_wo_margins )
{
// no readable font size will fit on buttonecho ‘Text given will not fit on button.<br /> ’;
}
Positioning the Text
If all was okay, you next work out a base position for the start of the text.This is the
midpoint of the available space.
$text_x = $width_image/2.0 - $width_text/2.0;
$text_y = $height_image/2.0 - $height_text/2.0 ;
Because of the complications with the baseline relative coordinate system, you need to
add some correction factors:
if ($left_text < 0)
$text_x += abs($left_text);    // add factor for left overhang
$above_line_text = abs($bbox[7]);   // how far above the baseline?
$text_y += $above_line_text;        // add baseline factor
$text_y -= 2;  // adjustment factor for shape of our template
These correction factors allow for the baseline and a little adjustment because the image
is a bit “top heavy.”
Writing the Text onto the Button
After that, it’s all smooth sailing.Y ou set up the text color, which will be white:
$white = ImageColorAllocate ($im, 255, 255, 255);
You can then use the ImageTTFText() function to actually draw the text onto the 
button:
ImageTTFText ($im, $font_size, 0, $text_x, $text_y, $white, $fontname,
$button_text);26 6728 CH21  9/2/04  1:15 PM  Page 467
468 Chapter 21 Generating Images
This function takes quite a lot of parameters. In order, they are the image identifier, the
font size in points, the angle you want to draw the text at, the starting x and y coordi-nates of the text, the text color, the font file, and, finally, the actual text to go on the button.
Note
The font file needs to be available on the server and is not required on the client’s machine because she will
see it as an image.
Finishing Up
Finally, you can output the button to the browser:
Header ( ‘Content-type: image/png ’);
ImagePNG ($im);
Then it’s time to clean up resources and end the script:
ImageDestroy ($im);
That’s it! If all went well, you should now have a button in the browser window that
looks similar to the one you saw in Figure 21.5.
Drawing Figures and Graphing Data
In the preceding application, we looked at existing images and text.We haven’t yetlooked at an example with drawing, so let’s do that now.
In this example, you run a poll on your website to test whom users will vote for in a
fictitious election.Y ou store the results of the poll in a MySQL database and draw a barchart of the results using the image functions.
Graphing is the other thing these functions are primarily used for.Y ou can chart any
data you want—sales, web hits, or whatever takes your fancy.
For this example, we spent a few minutes setting up a MySQL database called 
poll.
It contains one table called poll_results ,which holds the candidates’ names in the
candidate column and the number of votes they received in the num_votes column.
We also created a user for this database called poll,with password poll.This table is
straightforward to set up, and you can create it by running the SQL script shown inListing 21.3.Y ou can do this piping the script through a root login using
mysql -u root -p < pollsetup.sql
Of course, you could also use the login of any user with the appropriate MySQLprivileges.26 6728 CH21  9/2/04  1:15 PM  Page 468
469 Drawing Figures and Graphing Data
Listing 21.3 pollsetup.sql —Sets Up the Poll Database
create database poll;
use poll;create table poll_results (
candidate varchar(30),num_votes int
);insert into poll_results values
(‘John Smith ’, 0),
(‘Mary Jones ’, 0),
(‘Fred Bloggs ’, 0)
;grant all privilegeson poll.*to poll@localhost
identified by ‘poll’;
This database contains three candidates.Y ou provide a voting interface via a page called
vote.html .The code for this page is shown in Listing21.4.
Listing 21.4 vote.html —Allows Users to Cast Their Votes Here
<html>
<head>
<title>Polling</title>
<head><body><h1>Pop Poll</h1><p>Who will you vote for in the election?</p><form method= ”post”action=”show_poll.php ”>
<input type= ”radio”name=”vote”value=”John Smith ”>John Smith<br />
<input type= ”radio”name=”vote”value=”Mary Jones ”>Mary Jones<br />
<input type= ”radio”name=”vote”value=”Fred Bloggs ”>Fred Bloggs<br /><br />
<input type= ”submit”value=”Show results ”>
</form></body>
</html>
The output from this page is shown in Figure 21.7.
The general idea is that, when users click the button, you will add their vote to the
database, get all the votes out of the database, and draw the bar chart of the currentresults.
Typical output after some votes have been cast is shown in Figure 21.8.26 6728 CH21  9/2/04  1:15 PM  Page 469
470 Chapter 21 Generating Images
Figure 21.7 Users can cast their votes here, and clicking the submit button
will show them the current poll results.
Figure 21.8 Vote results are created by drawing a series of lines, rectangles,
and text items onto a canvas.
The script that generates this image is quite long.We split it into four parts, and we dis-
cuss each part separately. Most of the script is familiar; you have seen many MySQLexamples similar to this one.Y ou looked at how to paint a background canvas in a solidcolor and how to print text labels on it.
The new parts of this script relate to drawing lines and rectangles.We focus our
attention on these sections. Part 1 (of this four-part script) is shown in Listing 21.5.1.
26 6728 CH21  9/2/04  1:15 PM  Page 470
471 Drawing Figures and Graphing Data
Listing 21.5.1 show_poll.php —Part 1 Updates the Vote Database and Retrieves the
New Results
<?php
/*******************************************
Database query to get poll info
*******************************************/
// get vote from form
$vote=$_REQUEST[ ‘vote’];
// log in to database
if (!$db_conn = new mysqli( ‘localhost ’, ‘poll’, ‘poll’, ‘poll’))
{
echo ‘Could not connect to db<br /> ’;
exit;
}
if (!empty($vote))  // if they filled the form out, add their vote
{
$vote = addslashes($vote);$query = “update poll_results
set num_votes = num_votes + 1where candidate = ‘$vote’”;
if(!($result = @$db_conn->query($query))){
echo ‘Could not connect to db<br /> ’;
exit;
}
}
// get current results of poll, regardless of whether they voted
$query = ‘select * from poll_results ’;
if(!($result = @$db_conn->query($query))){
echo ‘Could not connect to db<br /> ’;
exit;
}$num_candidates = $result->num_rows;
// calculate total number of votes so far
$total_votes=0;while ($row = $result->fetch_object()){
$total_votes +=  $row->num_votes;
}
$result->data_seek(0);  // reset result pointer26 6728 CH21  9/2/04  1:15 PM  Page 471
472 Chapter 21 Generating Images
Part 1, shown in Listing 21.5.1, connects to the MySQL database, updates the votes
according to the user’s selection, and gets the stored votes.After you have that information,you can begin making calculations to draw the graph. Part 2 is shown in Listing 21.5.2.
Listing 21.5.2 show_poll.php —Part 2 Sets Up All the Variables for Drawing
/*******************************************
Initial calculations for graph
*******************************************/// set up constantsputenv(‘GDFONTPATH=C:\WINDOWS\Fonts ’);
$width=500;        // width of image in pixels - this will fit in 640x480$left_margin = 50; // space to leave on left of graph$right_margin= 50; // ditto right$bar_height = 40;$bar_spacing = $bar_height/2;$font = ‘arial’;
$title_size= 16; // point$main_size= 12; // point$small_size= 12; // point$text_indent = 10; // position for text labels from edge of image
// set up initial point to draw from
$x = $left_margin + 60;  // place to draw baseline of the graph$y = 50;                 // ditto$bar_unit = ($width-($x+$right_margin)) / 100;   // one “point”on the graph
// calculate height of graph - bars plus gaps plus some margin
$height = $num_candidates * ($bar_height + $bar_spacing) + 50;
Part 2 sets up some variables that you will use to actually draw the graph.
Working out the values for these sorts of variables can be tedious, but a bit of fore-
thought about how you want the finished image to look will make the drawing processmuch easier.We arrived at the values used here by sketching the desired effect on a piece
of paper and estimating the required proportions.
The 
$width variable is the total width of the canvas you will use.Y ou also set up the
left and right margins (with $left_margin and $right_margin ,respectively); the “fat-
ness” and spacing between the bars ( $bar_height and $bar_spacing ); and the font, font
sizes, and label position ( $font ,$title_size ,$main_size ,$small_size ,and
$text_indent ).26 6728 CH21  9/2/04  1:15 PM  Page 472
473 Drawing Figures and Graphing Data
Given these base values, you can then make a few calculations.Y ou want to draw a
baseline that all the bars stretch out from.Y ou can work out the position for this baselineby using the left margin plus an allowance for the text labels for the x coordinate and
again an estimate from the sketch for the y coordinate.Y ou could get the exact width ofthe longest name instead if flexibility is important.
You also work out two important values: first, the distance on the graph that repre-
sents one unit:
$bar_unit = ($width-($x+$right_margin)) / 100;   // one “point”on the graph
This is the maximum length of the bars—from the baseline to the right margin—divid-
ed by 100 because the graph is going to show percentage values.
The second value is the total height that you need for the canvas:
$height = $num_candidates * ($bar_height + $bar_spacing) + 50;
This value is basically the height per bar times the number of bars, plus an extra amountfor the title. Part 3 is shown in Listing 21.5.3.
Listing 21.5.3 show_poll.php —Part 3 Sets Up the Graph, Ready for the Data to Be
Added
/*******************************************
Set up base image
*******************************************/// create a blank canvas$im = ImageCreateTrueColor($width,$height);
// Allocate colors
$white=ImageColorAllocate($im,255,255,255);$blue=ImageColorAllocate($im,0,64,128);$black=ImageColorAllocate($im,0,0,0);$pink = ImageColorAllocate($im,255,78,243);
$text_color = $black;
$percent_color = $black;$bg_color = $white;$line_color = $black;$bar_color = $blue;$number_color = $pink;
// Create “canvas”to draw on
ImageFilledRectangle($im,0,0,$width,$height,$bg_color);
// Draw outline around canvas
ImageRectangle($im,0,0,$width-1,$height-1,$line_color);26 6728 CH21  9/2/04  1:15 PM  Page 473
474 Chapter 21 Generating Images
// Add title
$title = ‘Poll Results ’;
$title_dimensions = ImageTTFBBox($title_size, 0, $font, $title);$title_length = $title_dimensions[2] - $title_dimensions[0];$title_height = abs($title_dimensions[7] - $title_dimensions[1]);$title_above_line = abs($title_dimensions[7]);$title_x = ($width-$title_length)/2;  // center it in x$title_y = ($y - $title_height)/2 + $title_above_line; // center in y gapImageTTFText($im, $title_size, 0, $title_x, $title_y,
$text_color, $font, $title);
// Draw a base line from a little above first bar location
// to a little below last
ImageLine($im, $x, $y-5, $x, $height-15, $line_color) ;
In Part 3, you set up the basic image, allocate the colors, and then begin to draw the
graph.
You fill in the background for the graph this time using
ImageFilledRectangle($im,0,0,$width,$height,$bg_color);
The ImageFilledRectangle() function, as you might imagine, draws a filled-in rectan-
gle.The first parameter is, as usual, the image identifier.Then you must pass it the x andy coordinates of the start point and the end point of the rectangle.These points corre-spond to the upper-left corner and lower-right corner, respectively. In this case, you fillthe entire canvas with the background color, which is the last parameter, and it’s white.
You then call
ImageRectangle($im,0,0,$width-1,$height-1,$line_color);
to draw a black outline around the edge of the canvas.This function draws an outlined
rectangle instead of a filled one.The parameters are the same. Notice that the rectangle is
drawn to $width-1 and $height-1 —a canvas of width by height goes from (0, 0) to
these values. If you drew it to $width and $height ,the rectangle would be outside the
canvas area.
You use the same logic and functions as in the preceding script to center and write
the title on the graph.
Finally, you draw the baseline for the bars with
ImageLine($im, $x, $y-5, $x, $height-15, $line_color);
The ImageLine() function draws a line on the image you specify ( $im) from one set of
coordinates ( $x,$y-5) to another ( $x,$height-15 ), in the color specified by
$line_color .Listing 21.5.3 Continued 26 6728 CH21  9/2/04  1:15 PM  Page 474
475 Drawing Figures and Graphing Data
In this case, you draw the baseline from a little above where you want to draw the
first bar, to a little above the bottom of the canvas.
You are now ready to fill in the data on the graph. Part 4 is shown in Listing 21.5.4.
Listing 21.5.4 showpoll.php —Part 4 Draws the Actual Data onto the Graph and
Finishes Up
/*******************************************
Draw data into graph
*******************************************/// Get each line of db data and draw corresponding barswhile ($row = $result->fetch_object()){
if ($total_votes > 0)
$percent = intval(($row->num_votes/$total_votes)*100);
else
$percent = 0;
// display percent for this value
$percent_dimensions = ImageTTFBBox($main_size, 0, $font, $percent. ’%’);
$percent_length = $percent_dimensions[2] - $percent_dimensions[0];ImageTTFText($im, $main_size, 0, $width-$percent_length-$text_indent,
$y+($bar_height/2), $percent_color, $font, $percent. ’%’);
// length of bar for this value
$bar_length = $x + ($percent * $bar_unit);
// draw bar for this value
ImageFilledRectangle($im, $x, $y-2, $bar_length, $y+$bar_height, $bar_color);
// draw title for this value
ImageTTFText($im, $main_size, 0, $text_indent, $y+($bar_height/2),
$text_color, $font, “$row->candidate ”);
// draw outline showing 100%
ImageRectangle($im, $bar_length+1, $y-2,
($x+(100*$bar_unit)), $y+$bar_height, $line_color);
// display numbers
ImageTTFText($im, $small_size, 0, $x+(100*$bar_unit)-50, $y+($bar_height/2),
$number_color, $font, $row->num_votes. ’/’.$total_votes);
// move down to next bar
$y=$y+($bar_height+$bar_spacing);
}26 6728 CH21  9/2/04  1:15 PM  Page 475
476 Chapter 21 Generating Images
/*******************************************
Display image
*******************************************/Header(‘Content-type:  image/png ’);
ImagePNG($im);
/*******************************************
Clean up
*******************************************/ImageDestroy($im);
?>
Part 4 goes through the candidates from the database one by one, works out the percent-
age of votes, and draws the bars and labels for each candidate.
Again, you add labels using ImageTTFText() and draw the bars as filled rectangles
using ImageFilledRectangle() :
ImageFilledRectangle($im, $x, $y-2, $bar_length, $y+$bar_height, $bar_color);
You add outlines for the 100% mark using ImageRectangle() :
ImageRectangle($im, $bar_length+1, $y-2,
($x+(100*$bar_unit)), $y+$bar_height, $line_color);
After you have drawn all the bars, you again output the image using ImagePNG() and
clean up after yourself using ImageDestroy() .
This long-ish script can be easily adapted to suit your needs or to autogenerate polls
via an interface. One important feature that this script is missing is any sort of anticheat-ing mechanism. Users would quickly discover that they can vote repeatedly and makethe result meaningless.
You can use a similar approach to draw line graphs, and even pie charts, if you are
good at mathematics.
Using Other Image Functions
In addition to the image functions used in this chapter, many others are available.Drawing with a programming language takes a long time and some trial and error to getright.Always begin by sketching what you want to draw, and then you can hit the man-
ual for any extra functions you might need.Listing 21.5.4 Continued 26 6728 CH21  9/2/04  1:15 PM  Page 476
477 Next
Further Reading
A lot of reading material is available online. If you’re having trouble with the image
functions, it sometimes helps to look at the source documentation for GD because thePHP functions are wrappers for this library.The GD documentation is available athttp://www.boutell.com/gd/.
Remember, though, the PHP version of GD2 is a fork of the main library, so some
details will vary.
You can also find some excellent tutorials on particular types of graph applications,
particularly at Zend and Devshed at http://www.zend.com and http://devshed.com,respectively.
The bar chart application in this chapter was inspired by the dynamic bar graph script
written by Steve Maranda, available from Devshed.
Next
In the next chapter, we tackle PHP’s handy session control functionality.26 6728 CH21  9/2/04  1:15 PM  Page 477
26 6728 CH21  9/2/04  1:15 PM  Page 478
22
Using Session Control in PHP
INTHIS CHAPTER ,WE DISCUSS THE SESSION control functionality in PHP .
Key topics covered in this chapter include
nWhat session control is
nCookies
nSteps in setting up a session
nSession variables
nSessions and authentication
What Session Control Is
You might have heard people say that “HTTP is a stateless protocol.”This means that the
protocol has no built-in way of maintaining state between two transactions.When a userrequests one page, followed by another, HTTP does not provide a way for you to tell
that both requests came from the same user.
The idea of session control is to be able to track a user during a single session on a
website. If you can do this, you can easily support logging in a user and showing content
according to her authorization level or personal preferences.Y ou can track the user’sbehavior, and you can implement shopping carts.
Since version 4, PHP has included native session control functions.The approach to
session control has changed slightly with the introduction of the superglobal variables;the 
$_SESSION superglobal is now available for use.
Understanding Basic Session Functionality
Sessions in PHP are driven by a unique session ID, a cryptographically random number.This session ID is generated by PHP and stored on the client side for the lifetime of asession. It can be either stored on a user’s computer in a cookie or passed along throughURLs.27 6728 ch22  9/2/04  1:19 PM  Page 479
480 Chapter 22 Using Session Control in PHP
The session ID acts as a key that allows you to register particular variables as so-called
session variables .The contents of these variables are stored at the server.The session ID is
the only information visible at the client side. If, at the time of a particular connectionto your site, the session ID is visible either through a cookie or the URL, you can accessthe session variables stored on the server for that session. By default, the session variablesare stored in flat files on the server. (Y ou can change this to use a database if you arewilling to write your own functions; you’ll learn more on this topic in the section“Configuring Session Control.”)
You have probably used websites that store a session ID in the URL. If your URL
contains a string of random-looking data, it is likely to be some form of session control.
Cookies are a different solution to the problem of preserving state across a number of
transactions while still having a clean-looking URL.
What Is a Cookie?
A cookie is a small piece of information that scripts can store on a client-side machine.
You can set a cookie on a user’s machine by sending an HTTP header containing data
in the following format:
Set-Cookie: NAME=VALUE; [expires= DATE;] [path= PATH;]
[domain= DOMAIN_NAME ;] [secure]
This creates a cookie called NAME with the value VALUE .The other parameters are all
optional.The expires field sets a date beyond which the cookie is no longer relevant.
(Note that if no expiry date is set, the cookie is effectively permanent unless you or theuser manually delete it.) T ogether, the 
path and domain can be used to specify the URL
or URLs for which the cookie is relevant.The secure keyword means that the cookie
will not be sent over a plain HTTP connection.
When a browser connects to an URL, it first searches the cookies stored locally. If
any of them are relevant to the URL being connected to, they will be transmitted backto the server.
Setting Cookies from PHP
You can manually set cookies in PHP using the setcookie() function. It has the 
following prototype:
bool setcookie ( string name [, string value [, int expire [, string path
[, string domain [, int secure ]]]]])
The parameters correspond exactly to the ones in the Set-Cookie header mentioned
previously.
If you set a cookie as
setcookie ( ‘mycookie ’, ‘value’);27 6728 ch22  9/2/04  1:19 PM  Page 480
481 Understanding Basic Session Functionality
when the user visits the next page in your site (or reloads the current page), you will
have access to the cookie via either $_COOKIE[ ‘mycookie ’]or
$HTTP_COOKIE_VARS[ “mycookie ”].(Or, if you have register_globals turned on, you
will have access directly as $mycookie .)
You can delete a cookie by calling setcookie() again with the same cookie name
and an expiry time in the past.Y ou can also set a cookie manually via the header()
function and the cookie syntax given previously. One tip is that cookie headers must besent before any other headers ;otherwise, they will not work. (This is a cookie limitation
rather than a PHP limitation.)
Using Cookies with Sessions
Cookies have some associated problems: Some browsers do not accept cookies, and someusers might have disabled cookies in their browsers.This is one of the reasons PHP ses-sions use a dual cookie/URL method. (We discuss this method shortly.)
When you are using PHP sessions, you do not have to manually set cookies.The ses-
sion functions take care of this task for you.
You can use the function 
session_get_cookie_params() to see the contents of the
cookie set by session control. It returns an array containing the elements lifetime ,
path,domain ,and secure .
You can also use
session_set_cookie_params( $lifetime , $path, $domain [, $secure] );
to set the session cookie parameters.
If you want to read more about cookies, you can consult the cookie specification on
Netscape’s site:
http://wp.netscape.com/newsref/std/cookie_spec.html
(Y ou can ignore the fact that this document calls itself a “preliminary specification”; it’s
been that way since 1995 and is as close to a standard as a document could be withoutactually being called a standard!)
Storing the Session ID
PHP uses cookies by default with sessions. If possible, a cookie will be set to store the
session ID.
The other method it can use is adding the session ID to the URL.Y ou can set this to
happen automatically if you set the session.use_trans_sid directive in the php.ini
file. It is off by default.
Alternatively, you can manually embed the session ID in links so that it is passed
along.The session ID is stored in the constant SID.T o pass it along manually, you add itto the end of a link similar to a 
GETparameter:
<A HREF= ”link.php?<?php echo strip_tags(SID); ?> ”>27 6728 ch22  9/2/04  1:19 PM  Page 481
482 Chapter 22 Using Session Control in PHP
(The strip_tags() function is used here to avoid cross-site scripting attacks.)
Compiling with --enable-trans-sid is generally easier, however.
Implementing Simple Sessions
The basic steps of using sessions are
nStarting a session
nRegistering session variables
nUsing session variables
nDeregistering variables and destroying the session
Note that these steps don’t necessarily all happen in the same script, and some of them
happen in multiple scripts. Let’s examine each of these steps in turn.
Starting a Session
Before you can use session functionality, you need to actually begin a session.There aretwo ways you can do this.
The first, and simplest, is to begin a script with a call to the 
session_start() function:
session_start();
This function checks to see whether there is already a current session. If not, it willessentially create one, providing access to the superglobal 
$_SESSION array. If a session
already exists, session_start() loads the registered session variables so that you can use
them.
It’s a good idea to call session_start() at the start of all your scripts that use sessions.
The second way you can begin a session is to set PHP to start one automatically
when someone comes to your site.Y ou can do this by using the session.auto_start
option in your php.ini file; we look at this approach when we discuss configuration.
This method has one big disadvantage:With auto_start enabled, you cannot use
objects as session variables.
Registering Session Variables
The way you register session variables has recently changed in PHP . Session variableshave been stored in the superglobal array 
$_SESSION since PHP 4.1, and also in the
older $HTTP_SESSION_VARS .We recommend you use $_SESSION .To create a session vari-
able, you simply set an element in this array, as follows:
$_SESSION[ ‘myvar’] = 5;
If you are using an older version of PHP , for a variable to be tracked from one script to
another, you would have registered it with a call to session_register() .This use is
now deprecated.27 6728 ch22  9/2/04  1:19 PM  Page 482
483 Creating a Simple Session Example
The session variable you have just created will be tracked until the session ends or
until you manually unset it.
Using Session Variables
To bring session variables into scope so that they can be used, you must first start a ses-
sion using session_start() .You can then access the variable via the $_SESSION super-
global array—for example, as $_SESSION[ ‘myvar’].
When you are using an object as a session variable, it is important that you include
the class definition before calling session_start() to reload the session variables.This
way,PHP knows how to reconstruct the session object.
If you have register_globals turned on, you can access session variables via their
short form names—for example, $myvar —but this approach is not recommended. If you
do have register_globals on, bear in mind that a session variable cannot be overrid-
den by GETor POST data, which is a good security feature, but something to bear in
mind when you’re coding.
On the other hand, you need to be careful when checking whether session variables
have been set (via, say, isset() or empty() ). Remember that variables can be set by the
user via GETor POST.You can check a variable to see whether it is a registered session
variable by checking in $_SESSION .
You can check this directly using the following, for example:
if (isset($_SESSION[ ‘myvar’])) ...
Unsetting Variables and Destroying the Session
When you are finished with a session variable, you can unset it.Y ou can do this directly
by unsetting the appropriate element of the $_SESSION array, as in this example:
unset($_SESSION[ ‘myvar’]);
Note that the use of session_unregister() and session_unset() is no longer
required and is not recommended.These functions were used prior to the introduction
of $_SESSION .
You should not try to unset the whole $_SESSION array because doing so will effec-
tively disable sessions.T o unset all the session variables at once, use
$_SESSION = array();
When you are finished with a session, you should first unset all the variables and then call
session_destroy();
to clean up the session ID.27 6728 ch22  9/2/04  1:19 PM  Page 483
484 Chapter 22 Using Session Control in PHP
Creating a Simple Session Example
Some of this discussion might seem abstract, so let’s look at an example. Here, you’ll
implement a set of three pages.
On the first page, start a session and create the variable $_SESSION[ ‘sess_var ’].The
code to do this is shown in Listing 22.1.
Listing 22.1 page1.php —Starting a Session and Creating a Session Variable
<?php
session_start();
$_SESSION[ ‘sess_var ’] = “Hello world! ”;
echo ‘The content of $_SESSION[\ ’sess_var\ ’] is ‘
.$_SESSION[ ‘sess_var ’].’<br />’;
?>
<a href= ”page2.php ”>Next page</a>
This script creates the variable and sets its value.The output of this script is shown in
Figure 22.1.
Figure 22.1 Initial value of the session variable shown by page1.php .
The finalvalue of the variable on the page is the one that will be available on subsequent
pages.At the end of the script, the session variable is serialized ,or frozen, until it is
reloaded via the next call to session_start() .
You can therefore begin the next script by calling session_start() .This script is
shown in Listing 22.2.
27 6728 ch22  9/2/04  1:19 PM  Page 484
485 Creating a Simple Session Example
Listing 22.2 page2.php —Accessing a Session Variable and Unsetting It
<?php
session_start();
echo ‘The content of $_SESSION[\ ’sess_var\ ’] is ‘
.$_SESSION[ ‘sess_var ’].’<br />’;
unset($_SESSION[ ‘sess_var ’]);
?>
<a href= ”page3.php ”>Next page</a>
After you call session_start() ,the variable $_SESSION [ ‘sess_var ’]is available with
its previously stored value, as you can see in Figure 22.2.
Figure 22.2 The value of the session variable is passed along via the session
ID to page2.php .
After you have used the variable, you unset it.The session still exists, but the variable 
$_SESSIONx[ ‘sess_var ’]no longer exists.
Finally, you pass along to page3.php ,the final script in the example.The code for this
script is shown in Listing 22.3.
Listing 22.3 page3.php —Ending the Session
<?php
session_start();echo ‘The content of $_SESSION[\ ’sess_var\ ’] is ‘
.$_SESSION[ ‘sess_var ’].’<br />’;
session_destroy();
?>
27 6728 ch22  9/2/04  1:19 PM  Page 485
486 Chapter 22 Using Session Control in PHP
Figure 22.3 The session variable is no longer available.
With some PHP versions prior to 4.3, you might encounter a bug when trying to unset
elements of $HTTP_SESSION_VARS or $_SESSION .If you find that you are unable to unset
elements (that is, they stay set), you can revert to using session_unregister() to clear
these variables.
You finish by calling session_destroy() to dispose of the session ID.
Configuring Session Control
There is a set of configuration options for sessions that you can set in your php.ini file.
Some of the more useful options, and a description of each, are shown in Table 22.1.
Table 22.1 Session Configuration Options
Option Name Default Effect
session.auto_start 0 (disabled) Automatically starts sessions.
session.cache_expire 180 Sets time-to-live for cached session pages, in
minutes.
session.cookie_domain none Specifies the domain to set in the session
cookie.
session.cookie_lifetime 0 Sets how long the session ID cookie willlast on the user’s machine.The default,
0,
will last until the browser is closed.
session.cookie_path / Specifies the path to set in the session cookie.
session.name PHPSESSID Sets the name of the session that is used asthe cookie name on a user’s system.
As you can see in Figure 22.3, you no longer have access to the persistent value of
$_SESSION[ ‘sess_var ’].27 6728 ch22  9/2/04  1:19 PM  Page 486
487 Implementing Authentication with Session Control
session.save_handler files Defines where session data is stored.Y ou can
set this option to point to a database, butyou have to write your own functions.
session.save_path /tmp Sets the path where session data is stored.
More generally, sets the argument passed to the save handled and defined by 
session.save_handler .
session.use_cookies 1 (enabled) Configures sessions to use cookies on the
client side.
Implementing Authentication with Session
Control
Finally, we look at a more substantial example using session control.
Possibly the most common use of session control is to keep track of users after they
have been authenticated via a login mechanism. In this example, you combine authenti-cation from a MySQL database with use of sessions to provide this functionality.Thisfunctionality forms the basis of the project in Chapter 26,“Building User Authenticationand Personalization,” and will be reused in the other projects.Y ou will reuse the authen-tication database you set up in Chapter 16,“Implementing Authentication with PHP andMySQL.”Y ou can check Listing 16.3 in that chapter for details of the database.
The example consists of three simple scripts.The first,
authmain.php ,provides a login
form and authentication for members of the website.The second, members_only.php ,
displays information only to members who have logged in successfully.The third,
logout.php ,logs out a member.
Tounderstand how this example works, look at Figure 22.4, which shows the initial
page displayed by authmain.php .Table 22.1 Continued
Option Name Default Effect
Figure 22.4 Because the user has not yet logged in, show her a login page.
27 6728 ch22  9/2/04  1:19 PM  Page 487
488 Chapter 22 Using Session Control in PHP
This page gives the user a place to log in. If she attempts to access the Members section
without logging in first, she will get the message shown in Figure 22.5.
Figure 22.5 Users who haven’t logged in can’t see the site content; they will
be shown this message instead.
If the user logs in first (with username: testuser and password: password ,as set up in
Chapter 16), however, and then attempts to see the Members page, she will get the out-put shown in Figure 22.6.
Figure 22.6 After the user has logged in, she can access the Members’ areas.
First, let’s look at the code for this application. Most of the code is in authmain.php ,
shown in Listing 22.4.Then we’ll go through it bit by bit.
27 6728 ch22  9/2/04  1:19 PM  Page 488
489 Implementing Authentication with Session Control
Listing 22.4 authmain.php —The Main Part of the Authentication Application
<?php
session_start();
if (isset($_POST[ ‘userid’]) && isset($_POST[ ‘password ’]))
{
// if the user has just tried to log in$userid = $_POST[ ‘userid’];
$password = $_POST[ ‘password ’];
$db_conn = new mysqli( ‘localhost ’, ‘webauth’, ‘webauth’, ‘auth’);
if (mysqli_connect_errno()) {
echo ‘Connection to database failed: ’.mysqli_connect_error();
exit();
}
$query = ‘select * from authorized_users ‘
.”where name= ’$userid’“
.”and password=sha1( ‘$password ’)”;
$result = $db_conn->query($query);
if ($result->num_rows >0 ){
// if they are in the database register the user id$_SESSION[ ‘valid_user ’] = $userid;
}$db_conn->close();
}?><html><body><h1>Home page</h1><?
if (isset($_SESSION[ ‘valid_user ’]))
{
echo ‘You are logged in as: ‘.$_SESSION[ ‘valid_user ’].’<br />’;
echo ‘<a href= ”logout.php ”>Log out</a><br /> ’;
}else{
if (isset($userid)){27 6728 ch22  9/2/04  1:19 PM  Page 489
490 Chapter 22 Using Session Control in PHP
// if they ’ve tried and failed to log in
echo ‘Could not log you in.<br /> ’;
}else{
// they have not tried to log in yet or have logged outecho ‘You are not logged in.<br /> ’;
}
// provide form to log in
echo ‘<form method= ”post”action=”authmain.php ”>’;
echo ‘<table>’;
echo ‘<tr><td>Userid:</td> ’;
echo ‘<td><input type= ”text”name=”userid”></td></tr> ’;
echo ‘<tr><td>Password:</td> ’;
echo ‘<td><input type= ”password ”name=”password ”></td></tr> ’;
echo ‘<tr><td colspan= ”2”align=”center”>’;
echo ‘<input type= ”submit”value=”Log in”></td></tr> ’;
echo ‘</table></form> ’;
}
?><br /><a href= ”members_only.php ”>Members section</a>
</body>
</html>
Some reasonably complicated logic is included in this script because it displays the login
form, is also the action of the form, and contains HTML for a successful and failed loginattempt.
The script’s activities revolve around the 
valid_user session variable.The basic idea 
is that if someone logs in successfully, you will register a session variable called 
$_SESSION[ ‘valid_user ’]that contains her userid.
The first thing you do in the script is call session_start() .This call loads in the
session variable valid_user if it has been created.
In the first pass through the script, none of the ifconditions apply, so the user falls
through to the end of the script, where you tell her that she is not logged in and provideher with a form to do so:
echo ‘<form method= ”post”action=”authmain.php ”>’;
echo ‘<table>’;
echo ‘<tr><td>Userid:</td> ’;
echo ‘<td><input type= ”text”name=”userid”></td></tr> ’;
echo ‘<tr><td>Password:</td> ’;
echo ‘<td><input type= ”password ”name=”password ”></td></tr> ’;Listing 22.4 Continued27 6728 ch22  9/2/04  1:19 PM  Page 490
491 Implementing Authentication with Session Control
echo ‘<tr><td colspan= ”2”align=”center”>’;
echo ‘<input type= ”submit”value=”Log in”></td></tr> ’;
echo ‘</table></form> ’;
When the user clicks the submit button on the form, this script is reinvoked, and you
start again from the top.This time, you will have a userid and password to authenticate,stored as 
$_POST[‘userid’]and $_POST[‘password ’].If these variables are set, you go
into the authentication block:
if (isset($_POST[ ‘userid’]) && isset($_POST[ ‘password ’]))
{
// if the user has just tried to log in$userid = $_POST[ ‘userid’];
$password = $_POST[ ‘password ’];
$db_conn = new mysqli( ‘localhost ’, ‘webauth’, ‘webauth’, ‘auth’);
if (mysqli_connect_errno()) {
echo ‘Connection to database failed: ’.mysqli_connect_error();
exit();
}
$query = ‘select * from authorized_users ‘
.”where name= ’$userid’“
.”and password=sha1( ‘$password ’)”;
$result = $db_conn->query($query);
You connect to a MySQL database and check the userid and password. If they are a
matching pair in the database, you create the variable $_SESSION[ ‘valid_user ’],which
contains the userid for this particular user, so you know who is logged in further downthe track:
if ($result->num_rows >0 )
{
// if they are in the database register the user id$_SESSION[ ‘valid_user ’] = $userid;
}$db_conn->close();
}
Because you now know who the user is, you don’t need to show her the login form
again. Instead, you can tell her you know who she is and give her the option to log out:
if (isset($_SESSION[ ‘valid_user ’]))
{
echo ‘You are logged in as: ‘.$_SESSION[ ‘valid_user ’].’<br />’;
echo ‘<a href= ”logout.php ”>Log out</a><br /> ’;
}27 6728 ch22  9/2/04  1:19 PM  Page 491
492 Chapter 22 Using Session Control in PHP
If you tried to log her in and failed for some reason, you’ll have a userid but not a
$_SESSION[ ‘valid_user ’]variable, so you can give her an error message:
if (isset($userid))
{
// if they ’ve tried and failed to log in
echo ‘Could not log you in.<br /> ’;
}
That’s it for the main script. Now, let’s look at the Members page.The code for this
script is shown in Listing 22.5.
Listing 22.5 members_only.php —The Code for the Members’ Section of the Website
Checks for Valid Users
<?php
session_start();
echo ‘<h1>Members only</h1> ’;
// check session variableif (isset($_SESSION[ ‘valid_user ’]))
{
echo ‘<p>You are logged in as ‘.$_SESSION[ ‘valid_user ’].’</p>’;
echo ‘<p>Members only content goes here</p> ’;
}else{
echo ‘<p>You are not logged in.</p> ’;
echo ‘<p>Only logged in members may see this page.</p> ’;
}
echo ‘<a href= ”authmain.php ”>Back to main page</a> ’;
?>
This code simply starts a session and checks whether the current session contains a regis-
tered user by checking whether the value of $_SESSION[ ‘valid_user ’]is set. If the
user is logged in, you show her the members’ content; otherwise, you tell her that she isnot authorized.
Finally, the 
logout.php script signs a user out of the system.The code for this script
is shown in Listing 22.6.27 6728 ch22  9/2/04  1:19 PM  Page 492
493 Further Reading
Listing 22.6 logout.php — This Script Deregisters the Session Variable and Destroys
the Session
<?php
session_start();
// store to test if they *were* logged in
$old_user = $_SESSION[ ‘valid_user ’];
unset($_SESSION[ ‘valid_user ’]);
session_destroy();
?><html><body><h1>Log out</h1><?php
if (!empty($old_user)){
echo ‘Logged out.<br /> ’;
}else{
// if they weren ’t logged in but came to this page somehow
echo ‘You were not logged in, and so have not been logged out.<br /> ’;
}
?><a href= ”authmain.php ”>Back to main page</a>
</body>
</html>
This code is simple, but you need to do a little fancy footwork.Y ou start a session, store
the user’s old username, unset the valid_user variable, and destroy the session.Y ou then
give the user a message that will be different if she was logged out or was not logged in
to begin with.
This simple set of scripts forms the basis for a lot of the work we’ll do in later 
chapters.
Further Reading
You can read more about cookies here:
http://home.netscape.com/newsref/std/cookie_spec.html27 6728 ch22  9/2/04  1:19 PM  Page 493
494 Chapter 22 Using Session Control in PHP
Next
We’re almost finished with this part of the book. Before we move on to the projects, we
briefly discuss some of the useful odds and ends of PHP that we haven’t covered else-where.27 6728 ch22  9/2/04  1:19 PM  Page 494
23
Other Useful Features
SOME USEFUL PHP FUNCTIONS AND FEATURES do not fit into any particular category.
This chapter explains these features.
Key topics covered in this chapter include
nUsing magic quotes
nEvaluating strings with eval()
nTerminating execution with dieand exit
nSerializing variables and objects
nGetting information about the PHP environment
nTemporarily altering the runtime environment
nLoading PHP extensions
nHighlighting source code
nUsing PHP on the command line
Using Magic Quotes
You have probably noticed that you need to be careful when using quotation marks ( ‘
and “) and back slashes ( \) within strings. PHP gets confused by an attempted string
statement like
echo “color = “#FFFFFF””;
and gives a parse error.T o include quotation marks inside a string, use the quote type
that is different from the quotes enclosing the string. For example, both
echo “color = ‘#FFFFFF’”;
and
echo ‘color = “#FFFFFF”’;
are valid.28 6728 CH23  9/2/04  1:18 PM  Page 495
496 Chapter 23 Other Useful Features
The same problem occurs with user input, as well as input and output to or from
other programs.
Trying to run a mysql query like
insert into company values ( ‘Bob’s Auto Parts ’);
produces similar confusion in MySQL’s parser.
We have already looked at the use of addslashes() and stripslashes() that escape
out any single quotation mark, double quotation mark, backslash, and NULL characters.
PHP has a useful capability to automatically or magically add and strip slashes for
you.With two settings in your php.ini file, you can turn on or off magic quoting for
GET,POST,cookie data, and other sources.
The value of the magic_quotes_gpc directive controls whether magic quoting is used
for GET,POST,and cookie operations.
With magic_quotes_gpc on, if somebody typed “Bob’s Auto Parts ”into a form
on your site, your script would receive “Bob\’s Auto Parts ”because the quote is
escaped for you.This behavior can be very handy, but you need to know that it is hap-pening so you can remember to remove the slashes before echoing the data back to yourusers.This is easy if your code runs on one server, but if you are writing code to distrib-ute, you might want to make it work with or without magic quotes.
The function
get_magic_quotes_gpc() returns either 1or 0,t elling you the 
current value of magic_quotes_gpc .This is most useful for testing if you need to use
stripslashes() on data received from the user.
The value of magic_quotes_runtime controls whether magic quoting is 
used by functions that get data from databases and files.T o get the value of
magic_quotes_runtime ,use the function get_magic_quotes_runtime() .This function
returns either 1or 0.Magic quoting can be turned on for a particular script using the
function set_magic_quotes_runtime() .
By default, magic_quotes_gpc is on and magic_quotes_runtime is off.
Evaluating Strings: eval()
The function eval() evaluates a string as PHP code. For example,
eval ( “echo ‘Hello World ’;”);
takes the contents of the string and executes it.This line produces the same output as
echo ‘Hello World ’;
The function eval() can be useful in a variety of cases.Y ou might want to store blocks
of code in a database, retrieve them, and then evaluate them at a later point.Y ou alsomight want to generate code in a loop and then use 
eval() to execute it.
The most common use for eval() is as part of a templating system.Y ou can load a
mixture of HTML, PHP , and plain text from a database.Y our templating system can applyformatting to this content and then run it through 
eval() to execute any PHP code.28 6728 CH23  9/2/04  1:18 PM  Page 496
497 Serializing Variables and Objects
You can usefully use eval() to update or correct existing code. If you had a large
collection of scripts that needed a predictable change, it would be possible (but ineffi-cient) to write a script that loads an old script into a string, runs 
regexp to make
changes, and then uses eval() to execute the modified script.
It is even conceivable that a very trusting person somewhere might want to allow
PHP code to be entered in a browser and executed on her server.
Terminating Execution: dieand exit
So far in this book, we have used the language construct exit to stop execution of a
script.As you probably recall, it appears on a line by itself, like this:
exit;
It does not return anything.Y ou can alternatively use its alias die() .
For a slightly more useful termination, you can pass a parameter to exit() .You can
use this approach to output an error message or execute a function before terminating ascript.This will be familiar to Perl programmers. For example,
exit(‘Script ending now ’);
More commonly, it is combined with ORwith a statement that might fail, such as open-
ing a file or connecting to a database:
mysql_query($query) or die( ‘Could not execute query ’);
Instead of just printing an error message, you can run one last function before the script
terminates:
function err_msg()
{
return ‘MySQL error was: ‘.mysql_error();
}
mysql_query($query) or die(err_msg());
This approach can be useful as a way of giving the user some reason why the script
failed or as a way of closing HTML elements or clearing a half-completed page from the
output buffer.
Alternatively, you could email yourself so that you know whether a major error has
occurred, or you could add errors to a log file or throw an exception.
Serializing Variables and Objects
Serialization is the process of turning anything you can store in a PHP variable or objectinto a bytestream that can be stored in a database or passed along via a URL from pageto page.Without this process, it is difficult to store or pass the entire contents of an arrayor object.28 6728 CH23  9/2/04  1:18 PM  Page 497
498 Chapter 23 Other Useful Features
Serialization has decreased in usefulness since the introduction of session control.
Serializing data is principally used for the types of things you would now use sessioncontrol for. In fact, the session control functions serialize session variables to store thembetween HTTP requests.
However, you might still want to store a PHP array or object in a file or database.
If you do, you need to know how to use these two functions:
serialize() and 
unserialize() .
You can call the serialize() function as follows:
$serial_object = serialize($my_object);
If you want to know what the serialization actually does, look at what is returned from
serialize() .This line turns the contents of an object or array into a string.
For example, you can look at the output of running serialize() on a simple
employee object, defined and instantiated thus:
class employee
{
var $name;var $employee_id;
}
$this_emp = new employee;
$this_emp->name = ‘Fred’;
$this_emp->employee_id = 5324;
If you serialize this and echo it to the browser, the output is
O:8:”employee ”:2:{s:4: ”name”;s:4:”Fred”;s:11:”employee_id ”;i:5324;}
You can easily see the relationship between the original object data here and the serial-
ized data.
Because the serialized data is just text, you can write it to a database or whatever you
like. Be aware that you should use addslashes() on any data before writing it to a data-
base, as per usual.Y ou can see the need for this by noting the quotation marks in theprevious serialized string.
Toget the object back, call 
unserialize() :
$new_object = unserialize($serial_object);
Obviously, if you called addslashes() before putting the object into a database, you will
need to call stripslashes() before unserializing the string.
Another point to note when serializing classes or using them as session variables:
PHP needs to know the structure of a class before it can reinstantiate the class.Therefore, you need to include the class definition file before calling 
session_start()
orunserialize() .28 6728 CH23  9/2/04  1:18 PM  Page 498
499 Getting Information About the PHP Environment
Getting Information About the PHP
Environment
A number of functions can be used to find out information about how PHP is config-
ured.
Finding Out What Extensions Are Loaded
You can easily see what function sets are available and what functions are available in
each of those sets by using the get_loaded_extensions() and
get_extension_funcs() functions.
The get_loaded_extensions() function returns an array of all the function sets cur-
rently available to PHP . Given the name of a particular function set or extension,
get_extension_funcs() returns an array of the functions in that set.
The script in Listing 23.1 lists all the extension functions available to your PHP
installation by using these two functions.
Listing 23.1 list_functions.php — Lists All the Extensions Available to PHP and,
with Each Extension, Provides a Bulleted List of Functions in That Extension
<?php
echo ‘Function sets supported in this install are:<br /> ’;
$extensions = get_loaded_extensions();foreach ($extensions as $each_ext){
echo “$each_ext <br /> ”;
echo ‘<ul>’;
$ext_funcs = get_extension_funcs($each_ext);foreach($ext_funcs as $func){
echo “<li> $func </li> ”;
}echo ‘</ul>’;
}
?>
Note that the get_loaded_extensions() function doesn’t take any parameters, and the
get_extension_funcs() function takes the name of the extension as its only parameter.
This information can be helpful if you are trying to tell whether you have successful-
ly installed an extension or if you are trying to write portable code that generates usefuldiagnostic messages when installing.28 6728 CH23  9/2/04  1:18 PM  Page 499
500 Chapter 23 Other Useful Features
Identifying the Script Owner
You can find out the user who owns the script being run with a call to the 
get_current_user() function, as follows:
echo get_current_user();
This information can sometimes be useful for solving permissions issues.
Finding Out When the Script Was Modified
Adding a last modification date to each page in a site is a fairly popular thing to do.
You can check the last modification date of a script with the getlastmod() (note the
lack of underscores in the function name) function, as follows:
echo date( ‘g:i a, j M Y ’,getlastmod());
The function getlastmod() returns a Unix timestamp, which you can feed to date() ,
as done here, to produce a human-readable date.
Loading Extensions Dynamically
You can actually load extension libraries at runtime, if they are not compiled in, by using
the dl() function.This function expects as a parameter the name of the file containing
the library. Under Unix, these are filenames ending in .so;under Windows, they end 
in .dll.
An example of a call to dl() is
dl(‘php_gd2.dll ’);
This call dynamically loads the gd2 (image generation) extension (on a Windows
machine).
You shouldn’t specify the directory where the file lives. Instead, you should configure
this in the php.ini file.A directive called extension_dir specifies the directory where
PHP will look for libraries to dynamically load.
If you find you are having trouble dynamically loading extensions, also check your
php.ini file for the enable_dl directive. If it’s off, you won’t be able to dynamically
load extensions. Particularly if the machine you work on is not your own, this directivemight be disabled for security reasons.Y ou also cannot use 
dl() if PHP is running in
safe mode.
Temporarily Altering the Runtime Environment
You can view the directives set in the php.ini file or change them for the life of a sin-
gle script.This capability can be particularly useful, for example, in conjunction with the
max_execution_time directive if you know your script will take some time to run.
You can access and change the directives using the twin functions ini_get() and
ini_set() .Listing 23.2 shows a simple script that uses these functions.28 6728 CH23  9/2/04  1:18 PM  Page 500
501 Highlighting Source Code
Listing 23.2 iniset.php — Resets Variables from the php.ini File
<?php
$old_max_execution_time = ini_set( ‘max_execution_time ’, 120);
echo “old timeout is $old_max_execution_time <br /> ”;
$max_execution_time = ini_get( ‘max_execution_time ’);
echo “new timeout is $max_execution_time <br /> ”;
?>
The ini_set() function takes two parameters.The first is the name of the configuration
directive from php.ini that you would like to change, and the second is the value you
would like to change it to. It returns the previous value of the directive.
In this case, you reset the value from the default 30-second (or whatever is set in your
php.ini file) maximum time for a script to run to 120 seconds.
The ini_get() function simply checks the value of a particular configuration direc-
tive.The directive name should be passed to it as a string. Here, it just checks that thevalue really did change.
Not all INI options can be set this way. Each option has a level at which it can be set.
The possible levels are
nPHP_INI_USER —Y ou can change these values in your scripts with ini_set() .
nPHP_INI_PERDIR —Y ou can change these values in php.ini or in .htaccess or
httpd.conf files if using Apache.The fact that you can change them in .htaccess
files means that you can change these values on a per-directory basis—hence thename.
nPHP_INI_SYSTEM —Y ou can change these values in the php.ini or httpd.conf
files.
nPHP_INI_ALL —Y ou can change these values in any of the preceding ways—that is,
in a script, in an .htaccess file, or in your httpd.conf or php.ini files.
The full set of inioptions and the levels at which they can be set is in the PHP manual
at http://www.php.net/ini_set.
Highlighting Source Code
PHP comes with a built-in syntax highlighter, similar to many IDEs. In particular, it isuseful for sharing code with others or presenting it for discussion on a web page.
The functions 
show_source() and highlight_file() are the same. (The
show_source() function is actually an alias for highlight_file() .) Both of these func-
tions accept a filename as the parameter. (This file should be a PHP file; otherwise, youwon’t get a very meaningful result.) Consider this example:
show_source( ‘list_functions.php ’);28 6728 CH23  9/2/04  1:18 PM  Page 501
502 Chapter 23 Other Useful Features
The file is echoed to the browser with the text highlighted in various colors depending
on whether it is a string, a comment, a keyword, or HTML.The output is printed on abackground color. Content that doesn’t fit into any of these categories is printed in adefault color.
The 
highlight_string() function works similarly, but it takes a string as parameter
and prints it to the browser in a syntax-highlighted format.
You can set the colors for syntax highlighting in your php.ini file.The section you
want to change looks like this:
; Colors for Syntax Highlighting mode
highlight.string    =    #DD0000highlight.comment   =    #FF9900highlight.keyword   =    #007700highlight.bg        =    #FFFFFFhighlight.default   =    #0000BBhighlight.html      =    #000000
The colors are in standard HTML RGB format.
Using PHP on the Command Line
You can usefully write or download many small programs and run them on the com-
mand line. If you are on a Unix system, these programs are usually written in a shellscripting language or Perl. If you are on a Windows system, they are usually written as abatch file.
You probably first came to PHP for a web project, but the same text processing facili-
ties that make it a strong web language make it a strong command-line utility program.
There are three ways to execute a PHP script at the command line: from a file,
through a pipe, or directly on the command line.
To execute a PHP script in a file, make sure that the PHP executable (
phpor
php.exe depending on your operating system) is in your path and call it with the name
of script as an argument. Here’s an example:
php myscript.php
The file myscript.php is just a normal PHP file, so it contains any normal PHP syntax
within PHP tags.
To pass code through a pipe, you can run any program that generates a valid PHP
script as output and pipe that to the phpexecutable.The following example uses the
program echo to give a one-line program:
echo ‘<?php for($i=1; $i<10; $i++) echo $i; ?> ’| php
Again, the PHP code here is enclosed in PHP tags ( <?php and ?>).Also note that this is
the command-line program echo,not the PHP language construct.28 6728 CH23  9/2/04  1:18 PM  Page 502
503 Next
A one-line program of this nature would be easier to pass directly from the command
line, as in this example:
php -r ‘for($i=1; $i<10; $i++) echo $i; ’
The situation is slightly different here.The PHP code passed in this string is not enclosed
in PHP tags. If you do enclose the string in PHP tags, you will get a syntax error.
The useful PHP programs that you can write for command-line use are unlimited.
You can write installers for your PHP applications.Y ou can knock together a quick
script to reformat a text file before importing it to your database.Y ou can even make ascript do any repetitive tasks that you might need to do at the command line; a goodcandidate would be a script to copy all your PHP files, images, and MySQL table struc-tures from your staging web server to your production one.
Next
Part V,“Building Practical PHP and MySQL Projects,” covers a number of relatively
complicated practical projects using PHP and MySQL.These projects provide usefulexamples for similar tasks you might have and demonstrate the use of PHP and MySQLon larger projects.
Chapter 24,“Using PHP and MySQL for Large Projects,” addresses some of the issues
you face when coding larger projects using PHP .They include software engineering
principles such as design, documentation, and change management.28 6728 CH23  9/2/04  1:18 PM  Page 503
28 6728 CH23  9/2/04  1:18 PM  Page 504
V
Building Practical PHP and
MySQL Projects
24Using PHP and MySQL for Large Projects
25Debugging
26Building User Authentication and Personalization
27Building a Shopping Cart
28Building a Content Management System
29Building a Web-based Email Service
30Building a Mailing List Manager
31Building Web Forums
32Generating Personalized Documents in Portable Document 
Format (PDF)
33Connecting to Web Services with XML and SOAP29 6728 Part5  9/2/04  1:19 PM  Page 505
29 6728 Part5  9/2/04  1:19 PM  Page 506
24
Using PHP and MySQL for 
Large Projects
INTHE EARLIER PARTS OF THIS BOOK ,WE DISCUSSED various components of and uses for
PHP and MySQL.Although we tried to make all the examples interesting and relevant,they were reasonably simple, consisting of one or two scripts of up to 100 or so lines ofcode.
When you are building real-world web applications, writing code is rarely this simple.
A few years ago, an “interactive” website had form mail and that was it. However, thesedays, websites have become web applications—that is, regular pieces of software deliveredover the Web.This change in focus means a change in scale.Websites grow from a hand-
ful of scripts to thousands and thousands of lines of code. Projects of this size requireplanning and management just like any other software development.
Before we look at the projects in this part of the book, let’s look at some of the tech-
niques that can be used to manage sizable web projects.This is an emerging art, and get-ting it right is obviously difficult:Y ou can see this by observation in the marketplace.
Key topics covered in this chapter include
nApplying software engineering to web development
nPlanning and running a web application project
nReusing code
nWriting maintainable code
nImplementing version control
nChoosing a development environment
nDocumenting your project
nPrototyping
nSeparating logic, content, and presentation: PHP , HTML, and CSS
nOptimizing code30 6728 CH24  9/2/04  1:18 PM  Page 507
508 Chapter 24 Using PHP and MySQL for Large Projects
Applying Software Engineering to Web
Development
As you probably already know, software engineering is the application of a systematic,
quantifiable approach to software development.That is, it is the application of engineer-ing principles to software development.
Software engineering is also an approach that is noticeably lacking in many web proj-
ects for two main reasons.The first reason is that web development is often managed inthe same way as the development of written reports. It is an exercise in document struc-ture, graphic design, and production.This is a document-oriented paradigm.Thisapproach is all well and good for static sites of small to medium size, but as the amountof dynamic content in websites is increased to the level in which the websites offer serv-ices rather than documents, this paradigm no longer fits. Many people do not think touse software engineering practices for a web project at all.
The second reason software engineering practices are not used is that web application
development is different from normal application development in many ways.Developers deal with much shorter lead times, a constant pressure to have the site builtnow.Software engineering is all about performing tasks in an orderly, planned manner
and spending time on planning.With web projects, often the perception is that you don’thave the time to plan.
When you fail to plan web projects, you end up with the same problems you do
when you fail to plan any software project: buggy applications, missed deadlines, andunreadable code.
The trick, then, is in finding the parts of software engineering that work in this new
discipline of web application development and discarding the parts that don’t.
Planning and Running a Web Application
Project
There is no best methodology or project life cycle for web projects.There are, however,
a number of things you should consider doing for your project.We list them here anddiscuss some of them in more detail in the following sections.These considerations arein a specific order, but you don’t have to follow this order if it doesn’t suit your project.The emphasis here is on being aware of the issues and choosing techniques that willwork for you.
nBefore you begin, think about what you are trying to build.Think about the goal.
Think about who is going to use your web application—that is, your targetedaudience. Many technically perfect web projects fail because nobody checkedwhether users were interested in such an application.
nTry to break down your application into components.What parts or process steps
does your application have? How will each of those components work? How willthey fit together? Drawing up scenarios, storyboards, or even use cases can be use-ful for figuring out this step.30 6728 CH24  9/2/04  1:18 PM  Page 508
509 Reusing Code
nAfter you have a list of components, see which of them already exist. If a prewrit-
ten module has that functionality, look at using it. Don’t forget to look inside andoutside your organization for existing code. Particularly in the open source com-munity, many preexisting code components are freely available for use. Decide
what code you have to write from scratch and roughly how big that job is.
nMake decisions about process issues.This step is ignored too often in web projects.By process issues, we mean, for example, coding standards, directory structures,management of version control, development environment, documentation leveland standards, and task allocations to team members.
nBuild a prototype based on all the previous information. Show it to users. Iterate.
nRemember that, throughout this process, it is important and useful to separatecontent and logic in your application.We explain this idea in more detail shortly.
nMake any optimizations you think are necessary.
nAs you go, test as thoroughly as you would with any software development project.
Reusing Code
Programmers often make the mistake of rewriting code that already exists.When youknow what application components you need or—on a smaller scale—what functionsyou need, check what’s available before beginning development.
One of the strengths of PHP as a language is its large built-in function library.Always
check to see whether an existing function does what you are trying to do. Finding theone you want usually isn’t too hard.A good way to do this is to browse the manual byfunction group.
Sometimes programmers rewrite functions accidentally because they haven’t looked
in the manual to see whether an existing function supplies the functionality they need.Always keep the manual bookmarked.Take note, however, that the online manual isupdated quite frequently.The annotated manual is a fantastic resource because it containscomments, suggestions, and sample code from other users that often answer the samequestions you might have after reading the basic manual page. It often contains bugreports and workarounds before they are fixed or documented in the documentation
body.
You can reach the English language version at
http://www.php.net/manual/en/
Some programmers who come from a different language background might be tempted
to write wrapper functions to essentially rename PHP’s functions to match the languagewith which they are familiar.This practice is sometimes called syntactic sugar .It’s a bad
idea; it makes your code harder for others to read and maintain. If you’re learning a newlanguage, you should learn how to use it properly. In addition, adding a level of functioncall in this manner slows down your code.All things considered, you should avoid thisapproach.30 6728 CH24  9/2/04  1:18 PM  Page 509
510 Chapter 24 Using PHP and MySQL for Large Projects
If you find that the functionality you require is not in the main PHP library, you have
two choices. If you need something relatively simple, you can choose to write your ownfunction or object. However, if you’re looking at building a fairly complex piece of func-tionality—such as a shopping cart, web email system, or web forums—you should not besurprised to find that somebody else has probably already built it. One of the strengths ofworking in the open source community is that code for application components such as
these is often freely available. If you find a component similar to the one you want tobuild, even if it isn’t exactly right, you can look at the source code as a starting point for
modification or for building your own.
If you end up developing your own functions or components, you should seriously
consider making them available to the PHP community after you have finished.Thisprinciple keeps the PHP developer community such a helpful, active, and knowledgeablegroup.
Writing Maintainable Code
The issue of maintainability is often overlooked in web applications, particularly because
programmers often write them in a hurry. Getting started on the code and getting it fin-ished quickly sometimes seem more important than planning it first. However, a littletime invested up front can save you a lot of time further down the road when you’reready to build the next iteration of an application.
Coding Standards
Most large IT organizations have coding standards—guidelines to the house style for
choosing file and variable names, guidelines for commenting code, guidelines for indent-ing code, and so on.
Because of the document paradigm often previously applied to web development,
coding standards have sometimes been overlooked in this area. If you are coding on yourown or in a small team, you can easily underestimate the importance of coding stan-
dards. Don’t overlook such standards because your team and project might grow.Thenyou will end up not only with a mess on your hands, but also a bunch of programmers
who can’t make heads or tails of any of the existing code.
Defining Naming Conventions
The goals of defining a naming convention are
nTo make the code easy to read. If you define variables and function names sensibly,
you should be able to virtually read code as you would an English sentence, or at
least pseudocode.
nTo make identifier names easy to remember. If your identifiers are consistently 
formatted, remembering what you called a particular variable or function will beeasier.30 6728 CH24  9/2/04  1:18 PM  Page 510
511 Writing Maintainable Code
Variable names should describe the data they contain. If you are storing somebody’s sur-
name, call it $surname .You need to find a balance between length and readability. For
example, storing the name in $nmakes it easy to type, but the code is difficult to under-
stand. Storing the name in $surname_of_the_current_user is more informative, but it’s
a lot to type (and therefore easier to make a typing error) and doesn’t really add thatmuch value.
You need to make a decision on capitalization.Variable names are case sensitive in
PHP , as we’ve mentioned previously.Y ou need to decide whether your variable names willbe all lowercase, all uppercase, or a mix—for example, capitalizing the first letters ofwords.We tend to use all lowercase because this scheme is the easiest to remember for us.
Distinguishing between variables and constants with case is also a good idea.A com-
mon scheme is to use all lowercase for variables (for example,
$result ) and all uppercase
for constants (for example, PI).
One bad practice some programmers use is to have two variables with the same name
but different capitalization just because they can, such as $name and $Name .We hope it is
obvious why this practice is a terrible idea.
It is also best to avoid amusing capitalization schemes such as $WaReZ because no one
will be able to remember how it works.
You should also think about what scheme to use for multiword variable names. For
example, we’ve seen all the following schemes:
$username
$user_name$userName
It doesn’t matter which you opt for, but you should try to be consistent about usage.Y ou
might also want to set a sensible maximum limit of two to three words in a variablename.
Function names have many of the same considerations, with a couple of extras.
Function names should generally be verb oriented. Consider built-in PHP functionssuch as 
addslashes() or mysql_connect() ,which describe what they are going to do
to or with the parameters they are passed.This naming scheme greatly enhances codereadability. Notice that these two functions have a different naming scheme for dealing
with multiword function names. PHP’s functions are inconsistent in this regard, partly asa result of having been written by a large group of people, but mostly because manyfunction names have been adopted unchanged from various different languages andAPIs.
Also remember that function names are not case sensitive in PHP .Y ou should proba-
bly stick to a particular format anyway, just to avoid confusion.
You might want to consider using the module-naming scheme used in many PHP
modules—that is, prefixing the name of functions with the module name. For example,all the improved MySQL functions begin with 
mysqli_ ,and all the IMAP functions
begin with imap_ .If,for example, you have a shopping cart module in your code, you
could prefix the function in that module with cart_ .30 6728 CH24  9/2/04  1:18 PM  Page 511
512 Chapter 24 Using PHP and MySQL for Large Projects
Note, however, that when PHP5 provides both a procedural and an object-oriented
interface, the function names are different. Usually, the procedural ones use underlines(
my_function() ) and the object-oriented ones use what are called studlyCaps
(myFunction() ).
In the end, the conventions and standards you use when writing code don’t really
matter, as long as you apply some consistent guidelines.
Commenting Your Code
All programs should be commented to a sensible level.Y ou might ask what level of com-
menting is sensible. Generally, you should consider adding a comment to each of the fol-lowing items:
nFiles, whether complete scripts or include files —Each file should have a
comment stating what this file is, what it’s for, who wrote it, and when it wasupdated.
nFunctions —Function comments should specify what the function does, what
input it expects, and what it returns.
nClasses —Comments should describe the purpose of the class. Class methods
should have the same types and levels of comments as any other functions.
nChunks of code within a script or function —We often find it useful to write
a script by beginning with a set of pseudocode-style comments and then filling inthe code for each section. So an initial script might resemble this:
<?
// validate input data// send to database// report results?>
This commenting scheme is quite handy because after you’ve filled in all the sec-
tions with function calls or whatever, your code is already commented.
nComplex code or hacks —When performing some task takes you all day, or you
have to do it in a weird way, write a comment explaining why you used thatapproach.This way, when you next look at the code, you won’t be scratching yourhead and thinking,“What on earth was thatsupposed to do?”
Here’s another general guideline to follow: Comment as you go.Y ou might think you will
come back and comment your code when you are finished with a project.We guaranteeyou this will not happen, unless you have far less punishing development timetables and
more self-discipline than we do.
Indenting
As in any programming language, you should indent your code in a sensible and consis-
tent fashion.Writing code is like laying out a resumé or business letter. Indenting makesyour code easier to read and faster to understand.30 6728 CH24  9/2/04  1:18 PM  Page 512
513 Writing Maintainable Code
In general, any program block that belongs inside a control structure should be
indented from the surrounding code.The degree of indenting should be noticeable (thatis, more than one space) but not excessive.We generally think the use of tabs should beavoided.Although easy to type, they consume a lot of screen space on many people’s
monitors.We use an indent level of two to three spaces for all projects.
The way you lay out your curly braces is also an issue.The two most common
schemes follow:Scheme 1:
if (condition) {
// do something
}
Scheme 2:
if (condition){
// do something else
}
Which one you use is up to you.The scheme you choose should, again, be used consis-
tently throughout a project to avoid confusion.
Breaking Up Code
Giant monolithic code is awful. Some people create one huge script that does every-thing in one giant switch statement. It is far better to break up the code into functionsand/or classes and put related items into include files.Y ou can, for example, put all yourdatabase-related functions in a file called 
dbfunctions.php .
Reasons for breaking up your code into sensible chunks include the following:
nIt makes your code easier to read and understand.
nIt makes your code more reusable and minimizes redundancy. For example, withthe previous 
dbfunctions.php file, you could reuse it in every script in which
you need to connect to your database. If you need to change the way this works,
you have to change it in only one place.
nIt facilitates teamwork. If the code is broken into components, you can then assign
responsibility for the components to team members. It also means that you can
avoid the situation in which one programmer is waiting for another to finish
working on GiantScript.php so that she can go ahead with her own work.
At the start of a project, you should spend some time thinking about how you are going
to break up a project into planned components.This process requires drawing linesbetween areas of functionality, but you should not get bogged down in this because itmight change after you start working on a project.Y ou also need to decide which com-ponents need to be built first, which components depend on other components, andwhat your timeline will be for developing all of them.30 6728 CH24  9/2/04  1:18 PM  Page 513
514 Chapter 24 Using PHP and MySQL for Large Projects
Even if all team members will be working on all pieces of the code, it’s generally a good
idea to assign primary responsibility for each component to a specific person. Ultimately,this person would be responsible if something goes wrong with her component. Someoneshould also take on the job of build manager—that is, the person who makes sure that allthe components are on track and working with the rest of the components.This personusually also manages version control; we discuss this task more later in the chapter.Thisperson can be the project manager, or this task can be allocated as a separate responsibility.
Using a Standard Directory Structure
When starting a project, you need to think about how your component structure will bereflected in your website’s directory structure. Just as it is a bad idea to have one giant
script containing all functionality, it’s also usually a bad idea to have one giant directorycontaining everything. Decide how you are going to split up your directory structurebetween components, logic, content, and shared code libraries. Document your structureand make sure that all the people working on the project have a copy so that they canfind what they need.
Documenting and Sharing In-House Functions
As you develop function libraries, you need to make them available to other program-mers on your team. Commonly, every programmer on a team writes his own set of database, date, or debugging functions.This scheme is a time waster.Y ou should makefunctions and classes available to others.
Remember that even if code is stored in an area or directory commonly available to
your team members, they won’t know it’s there unless you tell them. Develop a system
for documenting in-house function libraries and make it available to programmers onyour team.
Implementing Version Control
Version control is the art of concurrent change management as applied to software devel-
opment.Version control systems generally act as a central repository or archive and supply
a controlled interface for accessing and sharing your code (and possibly documentation).
Imagine a situation in which you try to improve some code but instead accidentally
break it and can’t roll it back to the way it was, no matter how hard you try. Or you or aclient decides that an earlier version of the site was better. Or you need to go back to aprevious version for legal reasons.
Imagine another situation in which two members of your programming team want to
work on the same file.They both might open and edit the file at the same time, over-
writing each other’s changes.They both might have a copy that they work on locallyand change in different ways. If you have thought about these things happening, oneprogrammer might be sitting around doing nothing while she waits for another to finishediting a file.30 6728 CH24  9/2/04  1:18 PM  Page 514
515 Implementing Version Control
You can solve all these problems with a version control system. Such systems can
track changes to each file in the repository so that you can see not only the current stateof a file, but also the way it looked at any given time in the past.This feature allows youto roll back broken code to a known working version.Y ou can tag a particular set of fileinstances as a release version, meaning that you can continue development on the codebut get access to a copy of the currently released version at any time.
Version control systems also assist multiple programmers in working on code togeth-
er. Each programmer can get a copy of the code in the repository (called checking it out )
and when he makes changes, these changes can be merged back into the repository(checked in or committed ).Version control systems can therefore track who made each
change to a system.
These systems usually have a facility for managing concurrent updates.This means
that two programmers can actually modify the same file at the same time. For example,imagine that John and Mary have both checked out a copy of the most recent release oftheir project. John finishes his changes to a particular file and checks it in. Mary alsochanges that file and tries to check it in as well. If the changes they have made are not inthe same part of the file, the version control system will merge the two versions of thefile. If the changes conflict with each other, Mary will be notified and shown the twodifferent versions. She can then adjust her version of the code to avoid the conflicts.
The version control system used by the majority of Unix and/or open source devel-
opers is the Concurrent Versions System (CVS). CVS, which is open source, comes bun-dled with virtually every version of Unix, and you can also get it for PCs running DOSor Windows and Macs. It supports a client/server model so that you can check code inor out from any machine with an Internet connection, assuming that the CVS server isvisible on the Internet. It is used for the development of PHP ,Apache, and Mozilla,among other high-profile projects, at least in part for this reason.
You can download CVS for your system from the CVS home page at
http://www.cvshome.org/
Although the base CVS system is a command-line tool, various add-ons give it a more
attractive front end, including Java-based and Windows front ends.Y ou can also accessthem from the CVS home page.
Bitkeeper is a rival version control product, used by a few high-profile open source
projects including MySQL and the Linux kernel. It is available free to open source projects.
Commercial alternatives are also available. One of them is perforce, which runs on
most common platforms and has PHP support.Although it is commercial, free licensesare offered for open source projects from the website at
http://www.perforce.com/30 6728 CH24  9/2/04  1:18 PM  Page 515
516 Chapter 24 Using PHP and MySQL for Large Projects
Choosing a Development Environment
This discussion of version control brings up the more general topic of development
environments.All you really need are a text editor and browser for testing, but program-mers are often more productive in an Integrated Development Environment (IDE).
You can find a number of emerging free projects to build a dedicated PHP IDE,
including KPHPDevelop, for the KDE desktop environment under Linux, available from
http://kphpdev.sourceforge.net/
Currently, though, the best PHP IDEs are all commercial. Zend Studio from zend.com,
Komodo from activestate.com, and PHPEd from nusphere.com provide 
feature-rich IDEs.All have a trial download but require payment for ongoing use.Komodo offers a cheap noncommercial use license.
Documenting Your Projects
You can produce many different kinds of documentation for your programming projects,
including, but not limited to, the following:
nDesign documentation
nTechnical documentation/developer’s guide
nData dictionary (including class documentation)
nUser’s guide (although most web applications have to be self-explanatory)
Our goal here is not to teach you how to write technical documentation but to suggest
that you make your life easier by automating part of the process.
Some languages enable you to automatically generate some of these documents—par-
ticularly technical documentation and data dictionaries. For example, javadoc generates atree of HTML files containing prototypes and descriptions of class members for Javaprograms.
Quite a few utilities of this type are available for PHP , including
nphpdoc, available from http://www.phpdoc.de/
This system is used by PEAR for documenting code. Note that the term phpDoc is
used to describe several projects of this type, of which this is one.
nPHPDocumentor, available from http://phpdocu.sourceforge.net
PHPDocumentor gives similar output to javadoc and seems to work quite robust-
ly. It also seems to have a more active developer team than the other two listedhere.30 6728 CH24  9/2/04  1:18 PM  Page 516
517 Prototyping
nphpautodoc, available from http://sourceforge.net/projects/phpautodoc/
Again, phpautodoc produces output similar to javadoc.
A good place to look for more applications of this type (and PHP components in gener-
al) is SourceForge:
http://sourceforge.net
SourceForge is primarily used by the Unix/Linux community, but many projects are
available for other platforms.
Prototyping
Prototyping is a development life cycle commonly used for developing web applications.
A prototype is a useful tool for working out customer requirements. Usually, it is a sim-plified, partially working version of an application that can be used in discussions withclients and as the basis of the final system. Often, multiple iterations over a prototypeproduce the final application.The advantage of this approach is that it lets you workclosely with clients or end users to produce a system that they will be pleased with andhave some ownership of.
To be able to “knock together” a prototype quickly, you need some particular skills
and tools.A component-based approach works well in such situations. If you have accessto a set of preexisting components, both in-house and publicly available, you will be ableto do this much more quickly.Another useful tool for rapid development of prototypesis templates.We look at these tools in the next section.
You will encounter two main problems using a prototyping approach.Y ou need to be
aware of what these problems are so that you can avoid them and use this approach to its
maximum potential.
The first problem is that programmers often find it difficult to throw away the code
that they have written for one reason or another. Prototypes are often written quickly,and with the benefit of hindsight, you can see that you have not built a prototype in theoptimal, or even in a near optimal, way. Clunky sections of code can be fixed, but if theoverall structure is wrong, you are in trouble.The problem is that web applications are
often built under enormous time pressure, and you might not have time to fix it.Y ou arethen stuck with a poorly designed system that is difficult to maintain.
You can avoid this problem by doing a little planning, as we discussed earlier in this
chapter. Remember, too, that sometimes it is easier to scrap something and start againthan to try to fix the problem.Although starting over might seem like something youdon’t have time for, it will often save you a lot of pain later.
The second problem with prototyping is that a system can end up being an eternal
prototype. Every time you think you’re finished, your client suggests some moreimprovements or additional functionality or updates to the site.This feature creep canstop you from ever signing off on a project.30 6728 CH24  9/2/04  1:18 PM  Page 517
518 Chapter 24 Using PHP and MySQL for Large Projects
To avoid this problem, draw up a project plan with a fixed number of iterations and a
date after which no new functionality can be added without replanning, budgeting, andscheduling.
Separating Logic and Content
You are probably familiar with the idea of using HTML to describe a web document’s
structure and cascading style sheets (CSS) to describe its appearance.This idea of separating
presentation from content can be extended to scripting. In general, sites will be easier touse and maintain in the long run if you can separate logic from content from presenta-tion.This process boils down to separating your PHP and HTML.
For simple projects with a small number of lines of code or scripts, separating content
and logic can be more trouble than it’s worth.As your projects become bigger, it isessential to find a way to separate logic and content. If you don’t do this, your code willbecome increasingly difficult to maintain. If you or the powers that be decide to apply anew design to your website and a lot of HTML is embedded in your code, changing thedesign will be a nightmare.
Three basic approaches to separating logic and content follow:
nUse include files to store different parts of the content.This approach is simplistic,but if your site is mostly static, it can work quite well.This type of approach was
explained in the TLA Consulting example in Chapter 5,“Reusing Code andWriting Functions.”
nUse a function or class API with a set of member functions to plug dynamic con-tent into static page templates.We looked at this approach in Chapter 6,“Object-Oriented PHP .”
nUse a template system. Such systems parse static templates and use regular expres-sions to replace placeholder tags with dynamic data.The main advantage of thisapproach is that if somebody else designs your templates, such as a graphics design-er, she doesn’t have to know anything about PHP code at all.Y ou should be ableto use supplied templates with minimum modification.
A number of template systems are available. Probably the most popular one is Smarty,
available from
http://smarty.php.net/
Optimizing Code
If you come from a non-web programming background, optimization can seem reallyimportant.When PHP is used, most of a user’s wait for a web application comes fromconnection and download times. Optimization of your code has little effect on thesetimes.30 6728 CH24  9/2/04  1:18 PM  Page 518
519 Optimizing Code
Using Simple Optimizations
You can introduce a few simple optimizations that will make a difference in connection
and download times. Many of these changes, described here, relate to applications thatintegrate a database such as MySQL with your PHP code:
nReduce database connections. Connecting to a database is often the slowest part ofany script.
nSpeed up database queries. Reduce the number of queries that you make andmake sure that they are optimized.With a complex (and therefore slow) query,there is usually more than one way to solve your problem. Run your queries fromthe database’s command-line interface and experiment with different approaches tospeed up things. In MySQL, you can use the 
EXPLAIN statement to see where a
query might be going astray. (Use of this statement is discussed in Chapter 12,“Advanced MySQL Administration.”) In general, the principle is to minimize joinsand maximize use of indexes.
nMinimize generation of static content from PHP . If every piece of HTML youproduce comes from 
echo or print() ,page generation will take a good deal
longer. (This is one of the arguments for shifting toward separate logic and con-tent, as described previously.) This tip also applies to generating image buttonsdynamically:Y ou might want to use PHP to generate the buttons once and thenreuse them as required. If you are generating purely static pages from functions or
templates every time a page loads, consider running the functions or using thetemplates once and saving the result.
nUse string functions instead of regular expressions where possible.They are faster.
nUse single-quoted strings instead of double-quoted strings where possible. PHPevaluates double-quoted strings, looking for variables to replace. Single-quoted
strings are not evaluated. On the other hand, if something is in single quotes, it’sprobably static content. Review what you are doing and see whether you can getrid of the string altogether by turning it into static HTML.
Using Zend Products
Zend T echnologies owns the (open source) PHP scripting engine for use in PHP4
onward. In addition to the basic engine, you can also download the Zend Optimizer.This multi-pass optimizer can optimize your code for you and can increase the speed atwhich your scripts run from 40% to 100%.Y ou need PHP 4.0.2 or higher to run theoptimizer.Although closed source, it is free for download from Zend’s site:
http://www.zend.com
This add-on works by optimizing the code produced by the runtime compilation of
your script. Other Zend products include the Zend Studio, Zend Accelerator, Zend
Encoder, and commercial support agreements.30 6728 CH24  9/2/04  1:18 PM  Page 519
520 Chapter 24 Using PHP and MySQL for Large Projects
Testing
Reviewing and testing code is another basic point of software engineering that is often
overlooked in web development. It’s easy enough to try running the system with two or
three test cases and then say,“Y up, it works fine.”This mistake is commonly made. Ensurethat you have extensively tested and reviewed several scenarios before making the projectproduction ready.
We suggest two approaches you can use to reduce the bug level of your code. (Y ou
can never eliminate bugs altogether, but you can certainly eliminate or minimize most ofthem.)
First, adopt a practice of code review.This is the process in which another program-
mer or team of programmers looks at your code and suggests improvements.This type ofanalysis often suggests
nErrors you have missed
nTest cases you have not considered
nOptimization
nImprovements in security
nExisting components you could use to improve a piece of code
nAdditional functionality
Even if you work alone, finding a “code buddy” who is in the same situation and
reviewing code for each other can be a good thing.
Second, we suggest you find testers for your web applications who represent the end
users of the product.The primary difference between web applications and desktopapplications is that anyone and everyone will use web applications.Y ou shouldn’t makeassumptions that users will be familiar with computers.Y ou can’t supply them with athick manual or quick reference card.Y ou have to instead make web applications self-documenting and self-evident.Y ou must think about the ways in which users will wantto use your application. Usability is absolutely paramount.
Understanding the problems that naive end users will encounter can be really difficult
if you are an experienced programmer or web surfer. One way to address this problem isto find testers who represent the typical user.
One way we have done this in the past is to release web applications on a beta-only
basis.When you think you have the majority of the bugs out, publicize the application toa small group of test users and get a low volume of traffic through the site. Offer freeservices to the first 100 users in return for feedback about the site.We guarantee youthat they will come up with some combination of data or usage you have not consid-ered. If you are building a website for a client company, it can often supply a good set ofnaive users by getting staff at the company to work through the site. (This approach hasthe intrinsic benefit of increasing the client’s sense of ownership in the site.) 30 6728 CH24  9/2/04  1:18 PM  Page 520
521 Next
Further Reading
There is a great deal of material to cover in this area; basically, we are talking about the
science of software engineering, about which many, many books have been written.
A great book that explains the website-as-document versus website-as-application
dichotomy is Web Site Engineering: Beyond Web Page Design by Thomas A. Powell.Any
software engineering book you like will do as a backup.
For information on version control, visit the CVS website:
http://www.cvshome.org
You won’t find many books on version control (this is surprising given how important it
is!), but you can try either Open Source Development with CVS by Karl Franz Fogel or the
CVS Pocket Reference by Gregor N. Purdy.
If you are looking for PHP components, IDEs, or documentation systems, try
SourceForge:
http://sourceforge.net
Many of the topics we covered in this chapter are discussed in articles on Zend’s site.Y ou
might consider going there for more information on the subject.Y ou might also considerdownloading the optimizer from the site when you are there:
http://www.zend.com
If you found this chapter interesting, you might want to look at Extreme Programming,
which is a software development methodology aimed at domains where requirementschange frequently, such as web development.Y ou can access the website for ExtremeProgramming at
http://www.extremeprogramming.org
Next
In Chapter 25,“Debugging,” we look at different types of programming errors, PHPerror messages, and techniques for finding errors.30 6728 CH24  9/2/04  1:18 PM  Page 521
30 6728 CH24  9/2/04  1:18 PM  Page 522
25
Debugging
THIS CHAPTER DEALS WITH DEBUGGING PHP scripts. If you have worked through some
of the examples in the book or used PHP before, you will probably already have devel-oped some debugging skills and techniques of your own.As your projects get morecomplex, debugging can become more difficult.Although your skills improve, the errorsare more likely to involve multiple files or interactions between code written by multiplepeople.
Key topics covered in this chapter include
nProgramming error types
nSyntax errors
nRuntime errors
nLogic errors
nError messages
nError levels
nTriggering your own errors
nHandling errors gracefully
Programming Errors
Regardless of which language you are using, there are three general types of program
errors:
nSyntax errors
nRuntime errors
nLogic errors
We look briefly at each before discussing some tactics for detecting, handling, avoiding,
and solving errors.31 6728 CH25  9/2/04  1:22 PM  Page 523
524 Chapter 25 Debugging
Syntax Errors
Languages have a set of rules called the syntax ,which statements must follow to be valid.
This applies to both natural languages, such as English, and programming languages, suchas PHP . If a statement does not follow the rules of a language, it is said to have a syntax
error.Syntax errors are often also called parser errors when discussing interpreted lan-
guages, such as PHP , or compiler errors when discussing compiled languages, such as C or
Java.
If you break the English language’s syntax rules, there is a pretty good chance that 
people will still know what you intended to say.This usually is not the case with pro-gramming languages, however. If a script does not follow the rules of PHP’s syntax—if it
contains syntax errors—the PHP parser will not be able to process some or all of it.People are good at inferring information from partial or conflicting data. Computers are
not.
Among many other rules, the syntax of PHP requires that statements end with semi-
colons, that strings are enclosed in quotation marks, and that parameters passed to func-tions be separated with commas and enclosed in parentheses. If you break these rules,your PHP script is unlikely to work and likely to generate an error message the first
time you try to execute it.
One of PHP’s great strengths is the useful error messages that it provides when things
go wrong.A PHP error message usually tells you what went wrong, which file the erroroccurred in, and which line the error was found at.
An error message resembles the following:
Parse error: parse error, unexpected ‘’’in
/home/book/public_html/chapter25/error.php on line 2
This error was produced by the following script:
<?php
$date = date(m.d.y ’);
?>
You can see that we attempted to pass a string to the date() function but accidentally
missed the opening quotation mark that would mark the beginning of the string.
Simple syntax errors such as this one are usually the easiest to find.Y ou might make a
similar but harder-to-find error by forgetting to terminate the string, as shown in thisexample:
<?php
$date = date( ‘m.d.y);
?>
This script generates the following error message:
Parse error : parse error, unexpected $end in 
/home/book/public_html/chapter25/error.php on line 431 6728 CH25  9/2/04  1:22 PM  Page 524
525 Programming Errors
Obviously, because the script has only three lines, the error is not really on line four.
Errors in which you open something but fail to close it often show up like this.Y ou canrun into this problem with single and double quotation marks and also with the various
forms of brackets and parentheses.
The following script generates a similar syntax error:
<?php
if (true){
echo ‘error here ’;
?>
These errors can be hard to find if they result from a combination of multiple files.They
can also be difficult to find if they occur in a large file. Seeing parse error on 
line 1001 of a 1000-line file can be enough to spoil your day, but it should provide a
subtle hint that you should try to write more modular code.
In general, though, syntax errors are the easiest type of error to find. If you make a
syntax error and try to execute that block of code, PHP will give you a message tellingyou where to find your mistake.
Runtime Errors
Runtime errors can be harder to detect and fix.A script either contains a syntax error, or
it does not. If the script contains a syntax error, the parser will detect it when that codeis executed. Runtime errors are not caused solely by the contents of your script.Theycan rely on interactions between your scripts and other events or conditions.
The statement
require ( ‘filename.php ’);
is a perfectly valid PHP statement. It contains no syntax errors.
This statement might, however, generate a runtime error. If you execute this state-
ment and filename.php does not exist or the user who the script runs as is denied read
permission, you will get an error resembling this one:
Fatal error : main() [function.require]: Failed opening required ‘filename.php ’
(include_path= ’.:/usr/local/lib/php ’) in
/home/book/public_html/chapter25/error.php on line 1
Although nothing is wrong with the code here, because it relies on a file that might or
might not exist at different times when the code is run, it can generate a runtime error.
The following three statements are all valid PHP . Unfortunately, in combination, they
attempt to do the impossible—divide by zero:
$i = 10;
$j = 0;$k = $i/$j;31 6728 CH25  9/2/04  1:22 PM  Page 525
526 Chapter 25 Debugging
This code snippet generates the following warning:
Warning: Division by zero in
/home/book/public_html/chapter25/div0.php on line 3
This warning makes it very easy to correct. Few people would try to write code that
attempted to divide by zero on purpose, but neglecting to check user input often resultsin this type of error.
The following code sometimes generates the same error but might be much harder to
isolate and correct because it happens only some of the time:
$i = 10;
$k = $i/$_REQUEST[ ‘input’];
This is one of many different runtime errors that you might see while testing your code.
Common causes of runtime errors include the following:
nCalls to functions that do not exist
nReading or writing files
nInteraction with MySQL or other databases
nConnections to network services
nFailure to check input data
We briefly discuss each of these causes in the following sections.
Calls to Functions That Do Not Exist
Accidentally calling functions that do not exist is easy.The built-in functions are 
often inconsistently named.Why does strip_tags() have an underscore, whereas
stripslashes() does not?
It is also easy to call one of your own functions that does not exist in the current
script but might exist elsewhere. If your code contains a call to a nonexistent function,such as
nonexistent_function();
or
mispeled_function();
you will see an error message similar to this:
Fatal error : Call to undefined function: nonexistent_function()
in /home/book/public_html/chapter25/error.php on line 1
Similarly, if you call a function that exists but call it with an incorrect number of param-
eters, you will receive a warning.
The function strstr() requires two strings: a haystack to search and a needle to find.
If instead you call it using
strstr();31 6728 CH25  9/2/04  1:22 PM  Page 526
527 Programming Errors
you will get the following warning:
Warning: Wrong parameter count for strstr() in
/home/book/public_html/chapter25/error.php on line 1
That same statement within the following script is equally wrong:
<?php
if($var == 4){
strstr();
}
?>
Except in the possibly rare case in which the variable $var has the value 4,the call to
strstr() will not occur, and no warning will be issued.The PHP interpreter does not
waste time parsing sections of your code that are not needed for the current execution
of the script.Y ou need to be sure that you test carefully!
Calling functions incorrectly is easy to do, but because the resulting error messages
identify the exact line and function call that are causing the problem, they are equallyeasy to fix.They are difficult to find only if your testing process is poor and does not testall conditionally executed code.When you test, one of the goals is to execute every lineof code at least once.Another goal is to test all the boundary conditions and classes ofinput.
Reading or Writing Files
Although anything can go wrong at some point during your program’s useful life, some
problems are more likely than others. Because errors accessing files are likely enough tooccur, you need to handle them gracefully. Hard drives fail or fill up, and human errorresults in directory permissions changing.
Functions such as 
fopen() that are likely to fail occasionally generally have a return
value to signal that an error occurred. For fopen() ,a return value of false indicates
failure.
For functions that provide failure notification, you need to carefully check the return
value of every call and act on failures.
Interaction with MySQL or Other Databases
Connecting to and using MySQL can generate many errors.The function mysqli_
connect() alone can generate at least the following errors:
nWarning: mysqli_connect() [function.mysqli-connect]: Can ’t connect
to MySQL server on ‘localhost ’(10061)
nWarning: mysqli_connect() [function.mysqli-connect]: Unknown MySQL
Server Host ‘hostname ’(11001)
nWarning: mysqli_connect() [function.mysqli-connect]: Access denied
for user: ‘username ’@’localhost ’(Using password: YES)31 6728 CH25  9/2/04  1:22 PM  Page 527
528 Chapter 25 Debugging
As you would probably expect, mysqli_connect() provides a return value of false
when an error occurs.This means that you can easily trap and handle these types of
common errors.
If you do not stop the regular execution of your script and handle these errors, your
script will attempt to continue interacting with the database.Trying to run queries andget results without a valid MySQL connection results in your visitors seeing an unpro-fessional-looking screen full of error messages.
Many other commonly used MySQL-related PHP functions such as 
mysqli_query()
also return false to indicate that an error occurred.
If an error occurs, you can access the text of the error message using the function
mysqli_error() ,or an error code using the function mysqli_errno() .If the last
MySQL function did not generate an error, mysqli_error() returns an empty string
and mysqli_errno() returns 0.
For example, assuming that you have connected to the server and selected a database
for use, the code snippet
$result = mysqli_query($db, ‘select * from does_not_exist ’);
echo mysqli_errno($db);echo ‘<br />’;
echo mysqli_error($db);
might output
1146Table ‘dbname.does_not_exist ’doesn’t exist
Note that the output of these functions refers to the last MySQL function executed
(other than mysqli_error() or mysqli_errno() ). If you want to know the result of a
command, make sure to check it before running others.
Like file interaction failures, database interaction failures will occur. Even after com-
pleting development and testing of a service, you will occasionally find that the MySQLdaemon (
mysqld ) has crashed or run out of available connections. If your database runs
on another physical machine, you are relying on another set of hardware and softwarecomponents that could fail—another network connection, network card, routers, and soon between your Web server and the database machine.
You need to remember to check whether your database requests succeed before
attempting to use the result.There is no point in attempting to run a query after failingto connect to the database and no point in trying to extract and process the results afterrunning a query that failed.
It is important to note at this point that there is a difference between a query failing
and a query that merely fails to return any data or affect any rows.
An SQL query that contains SQL syntax errors or refers to databases, tables, or
columns that do not exist will fail.The query
select * from does_not_exist;31 6728 CH25  9/2/04  1:22 PM  Page 528
529 Programming Errors
will fail because the table name does not exist, and it will generate an error number and
message retrievable with mysqli_errno() and mysqli_error() .
A SQL query that is syntactically valid and refers only to databases, tables, and
columns that exist generally does not fail.The query might, however, return no results ifit is querying an empty table or searching for data that does not exist.Assuming that youhave connected to a database successfully and have a table called 
t1and a column called
c1,the query
select * from t1 where c1 = ‘not in database ’;
will succeed but not return any results.
Before you use the result of the query, you need to check for both failure and no
results.
Connections to Network Services
Although devices and other programs on your system will occasionally fail, they should
fail rarely unless they are of poor quality.When using a network to connect to other
machines and the software on those machines, you need to accept that some part of thesystem will fail often.T o connect from one machine to another, you rely on numerousdevices and services that are not under your control.
At the risk of our being repetitive, you really need to carefully check the return value
of functions that attempt to interact with a network service.
A function call such as
$sp = fsockopen ( ‘localhost ’, 5000 );
will provide a warning if it fails in its attempt to connect to port 5000 on the machine
localhost ,but it will display it in the default format and not give your script the option
to handle it gracefully.
Rewriting the call as
$sp = @fsockopen ( ‘localhost ’, 5000, &$errorno, &$errorstr );
if(!$sp)
echo “ERROR: $errorno: $errorstr ”;
will suppress the built-in error message, check the return value to see whether an error
occurred, and use your own code to handle the error message.As the code is written, itwill display an error message that might help you solve the problem. In this case, itwould produce the following output:
ERROR: 10035: A non-blocking socket operation could not be completed immediately.
Runtime errors are harder to eliminate than syntax errors because the parser cannot sig-
nal the error the first time the code is executed. Because runtime errors occur inresponse to a combination of events, they can be hard to detect and solve.The parser
cannot automatically tell you that a particular line will generate an error.Y our testingneeds to provide one of the situations that create the error.31 6728 CH25  9/2/04  1:22 PM  Page 529
530 Chapter 25 Debugging
Handling runtime errors requires a certain amount of forethought—to check for dif-
ferent types of failure that might occur and then take appropriate action. Simulating eachclass of runtime error that might occur also takes careful testing.
We do not mean that you need to attempt to simulate every different error that
might occur. MySQL, for example, can provide one of around 200 different error num-bers and messages.Y ou do need to simulate an error in each function call that is likely toresult in an error and an error of each type that is handled by a different block of code.
Failure to Check Input Data
Often you make assumptions about the input data that will be entered by users. If this
data does not fit your expectations, it might cause an error, either a runtime error or alogic error (detailed in the following section).
A classic example of a runtime error occurs when you are dealing with user input
data and you forget to apply 
addslashes() to it.This means if you have a user with a
name such as O’Grady that contains an apostrophe, you will get an error from the data-base function if you use the input in an insert statement inside single quotation marks.
We discuss errors because of assumptions about input data in more detail in the next
section.
Logic Errors
Logic errors can be the hardest type of error to find and eliminate.This type of erroroccurs when perfectly valid code does exactly what it is instructed to do, but that wasnot what the writer intended.
Logic errors can be caused by a simple typing error, such as
for ( $i = 0; $i < 10; $i++ );
{
echo ‘doing something<br /> ’;
}
This snippet of code is perfectly valid. It follows valid PHP syntax. It does not rely on
any external services, so it is unlikely to fail at runtime. Unless you looked at it verycarefully, it probably will not do what you think it will or what the programmer intended it to do.
At a glance, it looks as if it will iterate through the 
forloop 10 times, echoing
“doing something ”each time.The addition of an extraneous semicolon at the end of
the first line means that the loop has no effect on the following lines.The forloop will
iterate 10 times with no result, and then the echo statement will be executed once.
Because this snippet is a perfectly valid, but inefficient, way to write code to achieve
this result, the parser will not complain. Computers are very good at some things, butthey do not have any common sense or intelligence.A computer will do exactly as it istold.Y ou need to make sure that what you tell it is exactly what you want.31 6728 CH25  9/2/04  1:22 PM  Page 530
531 Variable Debugging Aid
Logic errors are not caused by any sort of failure of the code, but merely a failure of
the programmer to write code that instructs the computer to do exactly what she want-ed.As a result, errors cannot be detected automatically.Y ou are not told that an error hasoccurred, and you are not given a line number where you can look for the problem.Logic errors are detected only by proper testing.
A logic error such as the previous trivial example is fairly easy to make, but also easy
to correct because the first time your code runs, you will see output other than whatyou expected. Most logic errors are a little more insidious.
Troublesome logic errors usually result from developers’ assumptions being wrong.
Chapter 24,“Using PHP and MySQL for Large Projects,” recommended using otherdevelopers to review code to suggest additional test cases and using people from the tar-get audience rather than developers for testing.Assuming that people will enter only cer-tain types of data is very easy to do and an error that is very easy to leave undetected ifyou do your own testing.
Let’s say that you have an Order Quantity text box on a commerce site. Have you
assumed that people will enter only positive numbers? If a visitor enters –10, will yoursoftware refund his credit card with 10 times the price of the item?
Suppose that you have a box to enter a dollar amount. Do you allow people to enter
the amount with or without a dollar sign? Do you allow people to enter numbers withthousands separated by commas? Some of these things can be checked at the client side(using, for example, JavaScript) to take a little load off your server.
If you are passing information to another page, has it occurred to you that some charac-
ters might have special significance in a URL, such as spaces in the string you are passing?
An infinite number of logic errors is possible.There is no automated way to check for
these errors.The only solution is, first, to try to eliminate assumptions that you haveimplicitly coded into the script and, second, test thoroughly with every type of valid andinvalid input possible, ensuring that you get the anticipated result for all.
Variable Debugging Aid
As projects become more complex, having some utility code to help you identify the
cause of errors can be useful.A piece of code that you might find useful is contained inListing 25.1.This code echoes the contents of variables passed to your page.
Listing 25.1 dump_variables.php —This Code Can Be Included in Pages to Dump
the Contents of Variables for Debugging
<?php
// these lines format the output as HTML comments// and call dump_array repeatedly
echo “\n<!-- BEGIN VARIABLE DUMP -->\n\n ”;
echo “<!-- BEGIN GET VARS -->\n ”;31 6728 CH25  9/2/04  1:22 PM  Page 531
532 Chapter 25 Debugging
echo ‘<!-- ‘.dump_array($_GET). ”-->\n”;
echo “<!-- BEGIN POST VARS -->\n ”;
echo ‘<!-- ‘.dump_array($_POST). ”-->\n”;
echo “<!-- BEGIN SESSION VARS -->\n ”;
echo ‘<!-- ‘.dump_array($_SESSION). ”-->\n”;
echo “<!-- BEGIN COOKIE VARS -->\n ”;
echo ‘<!-- ‘.dump_array($_COOKIE). ”-->\n”;
echo “\n<!-- END VARIABLE DUMP -->\n ”;
// dump_array() uses the builtin print_r
// and escapes out any HTML end comments
function dump_array($array)
{
$output = print_r($array, true);$output = str_replace( ‘-->’, ‘-- >’, $output);  
return $output;
}
?> 
This code outputs four arrays of variables that a page receives. If a page was called with
GETvariables,POST variables, cookies, or it has session variables, they will be output.
Here, we put the output within an HTML comment so that it is viewable but does
not interfere with the way the browser renders visible page elements.This is a good wayto generate debugging information. Hiding the debug information in comments, as inListing 25.1, allows you to leave in your debug code until the last minute.We used the
dump_array() function as a wrapper to print_r() .The dump_array() function just
escapes out any HTML end comment characters.
The exact output depends on the variables passed to the page, but when added to
Listing 22.4, one of the authentication examples from Chapter 22,“Using SessionControl in PHP ,” it adds the following lines to the HTML generated by the script:
<!-- BEGIN VARIABLE DUMP -->
<!-- BEGIN GET VARS -->
<!-- Array()
-->Listing 25.1 Continued 31 6728 CH25  9/2/04  1:22 PM  Page 532
533 Error Reporting Levels
<!-- BEGIN POST VARS -->
<!-- Array(
[userid] => testuser[password] => password
)
-->
<!-- BEGIN SESSION VARS --><!-- Array()
-->
<!-- BEGIN COOKIE VARS --><!-- Array(
[PHPSESSID] => b2b5f56fad986dd73af33f470f3c1865
)
-->
<!-- END VARIABLE DUMP -->
You can see that it displays the POST variables sent from the login form on the previous
page:userid and password .It also shows the session variable used to keep the user’s
name in: valid_user .As discussed in Chapter 22, PHP uses a cookie to link session
variables to particular users.The script echoes the pseudo-random number, PHPSESSID ,
which is stored in that cookie to identify a particular user.
Error Reporting Levels
PHP allows you to set how fussy it should be with errors.Y ou can modify what types ofevents generate messages. By default, PHP reports all errors other than notices.
The error reporting level is assigned using a set of predefined constants, shown in
Table 25.1.
Table 25.1 Error Reporting Constants
Value Name Meaning
1 E_ERROR Report fatal errors at runtime
2E_WARNING Report nonfatal errors at runtime
4E_PARSE Report parse errors
8E_NOTICE Report notices, notifications that something you have done
might be an error
16E_CORE_ERROR Report failures in the startup of the PHP engine
32E_CORE_WARNING Report nonfatal failures during the startup of the PHP
engine31 6728 CH25  9/2/04  1:22 PM  Page 533
534 Chapter 25 Debugging
64 E_COMPILE_ERROR Report errors in compilation
128E_COMPILE_WARNING Report nonfatal errors in compilation
256E_USER_ERROR Report user-triggered errors
512E_USER_WARNING Report user-triggered warnings
1024E_USER_NOTICE Report user-triggered notices
2047E_ALL Report all errors and warnings
2048E_STRICT Reports use of deprecated and unrecommended behavior;
not included in E_ALL but very useful for code refactoring
Each constant represents a type of error that can be reported or ignored. If, for instance,
you specify the error level as E_ERROR ,only fatal errors will be reported.These constants
can be combined using binary arithmetic, to produce different error levels.
The default error level—report all errors other than notices—is specified as follows:
E_ALL & ~E_NOTICE
This expression consists of two of the predefined constants combined using bitwisearithmetic operators.The ampersand (
&) is the bitwise AND operator and the tilde ( ~) is
the bitwise NOT operator.This expression can be read as E_ALL AND NOT E_NOTICE .
E_ALL itself is effectively a combination of all the other error types except for
E_STRICT .It could be replaced by the other levels combined together using the bitwise
OR operator ( |):
E_ERROR | E_WARNING | E_PARSE | E_NOTICE | E_CORE_ERROR | E_CORE_WARNING |
E_COMPILE_ERROR |E_COMPILE_WARNING | E_USER_ERROR | E_USER_WARNING |E_USER_NOTICE
Similarly, the default error reporting level could be specified by all error levels except
E_NOTICE combined with OR:
E_ERROR | E_WARNING | E_PARSE | E_CORE_ERROR | E_CORE_WARNING | E_COMPILE_ERROR |E_COMPILE_WARNING | E_USER_ERROR | E_USER_WARNING | E_USER_NOTICE
Altering the Error Reporting Settings
You can set the error reporting settings globally, in your php.ini file or on a per-script
basis.
To alter the error reporting for all scripts, you can modify these four lines in the
default php.ini file:
error_reporting =       E_ALL & ~E_NOTICE
display_errors  =       Onlog_errors      =       Offtrack_errors    =       OffTable 25.1 Continued 
Value Name Meaning31 6728 CH25  9/2/04  1:22 PM  Page 534
535 Altering the Error Reporting Settings
The default global settings are to
nReport all errors except notices
nOutput error messages as HTML to standard output
nNot log error messages to disk
nNot track errors, storing the error in the variable $php_errormsg
The most likely change you will make is to turn the error reporting level up to 
E_ALL | E_STRICT .This change results in many notices being reported, for incidents
that might indicate an error, or might just result from the programmer taking advantageof PHP’s weakly typed nature and the fact that it automatically initializes variables to 
0.
While debugging, you might find it useful to set the error_reporting level higher. If
you are providing useful error messages of your own, the production code would be
more professional looking if you turn display_errors off and turn log_errors on,
while leaving the error_reporting level high.Y ou then can refer to detailed errors in
the logs if problems are reported.
Turning track_errors on might help you to deal with errors in your own code,
rather than letting PHP provide its default functionality.Although PHP provides usefulerror messages, its default behavior looks ugly when things go wrong.
By default, when a fatal error occurs, PHP outputs
<br>
<b>Error Type </b>: error message in <b>path/file.php </b>
on line <b> lineNumber </b><br>
and stops executing the script. For nonfatal errors, the same text is output, but execution
is allowed to continue.
This HTML output makes the error stand out but looks poor.The style of the error
message is unlikely to fit the rest of the site’s look. It might also result in some users see-ing no output at all if the page’s content is being displayed within a table and theirbrowser is fussy about valid HTML. HTML that opens but does not close table ele-ments, such as
<table>
<tr><td><br><b>Error Type </b>:  error message in <b>path/file.php </b>
on line <b> lineNumber </b><br>
is rendered as a blank screen by some browsers.
You do not have to keep PHP’s default error handling behavior or even use the same
settings for all files.T o change the error reporting level for the current script, you can callthe function 
error_reporting() .31 6728 CH25  9/2/04  1:22 PM  Page 535
536 Chapter 25 Debugging
Passing an error report constant, or a combination of them, sets the level in the same
way that the similar directive in php.ini does.The function returns the previous error
reporting level.A common way to use the function is like this:
// turn off error reporting
$old_level = error_reporting(0);// here, put code that will generate warnings// turn error reporting back onerror_reporting($old_level);
This code snippet turns off error reporting, allowing you to execute some code that is
likely to generate warnings that you do not want to see.
Turning off error reporting permanently is a bad idea because it makes finding your
coding errors and fixing them more difficult.
Triggering Your Own Errors
The function trigger_error() can be used to trigger your own errors. Errors created
in this way are handled in the same way as regular PHP errors.
The function requires an error message and can optionally be given an error type.
The error type needs to be one of E_USER_ERROR ,E_USER_WARNING ,or E_USER_NOTICE .
If you do not specify a type, the default is E_USER_NOTICE .
You use trigger_error() as follows:
trigger_error( ‘This computer will self destruct in 15 seconds ’, E_USER_WARNING);
Handling Errors Gracefully
If you come from a C++ or Java background, you are probably comfortable using
exceptions. Exceptions allow functions to signal that an error has occurred and leavedealing with the error to an exception handler. Exceptions were added to PHP only inversion 5 but are an excellent way to handle errors in large projects.They were ade-
quately covered in Chapter 7,“Exception Handling,” so they will not be revisited here.
If you need your code to work on PHP4, you can simulate similar behavior with
user-triggered errors and user-defined error handlers, but this behavior will become lessimportant now that PHP supports exceptions.Y ou have already seen how you can trig-ger your own errors.Y ou can also provide your own error handlers to catch errors.
The function 
set_error_handler() lets you provide a function to be called when
user-level errors, warnings, and notices occur.Y ou call set_error_handler() with the
name of the function you want to use as your error handler.
Your error handling function must take two parameters: an error type and an error
message. Based on these two variables, your function can decide how to handle theerror.The error type must be one of the defined error type constants.The error messageis a descriptive string.31 6728 CH25  9/2/04  1:22 PM  Page 536
537 Handling Errors Gracefully
A call to set_error_handler() looks like this:
set_error_handler( ‘my_error_handler ’);
Having told PHP to use a function called my_error_handler() ,you must then provide
a function with that name.This function must have the following prototype:
My_error_handler(int error_type, string error_msg
[, string errfile [, int errline [, array errcontext ]]]))
What it actually does, however, is up to you.
The parameters passed to your handler function are
nThe error type
nThe error message
nThe file the error occurred in
nThe line the error occurred on
nThe symbol table—that is, a set of all the variables and their values at the time theerror occurred
Logical actions might include
nDisplaying the error message provided
nStoring information in a log file
nEmailing the error to an address
nTerminating the script with a call to exit
Listing 25.2 contains a script that declares an error handler, sets the error handler using
set_error_handler() ,and then generates some errors.
Listing 25.2 handle.php —This Script Declares a Custom Error Handler and
Generates Different Errors
<?php
// The error handler functionfunction my_error_handler ($errno, $errstr, $errfile, $errline){
echo “<br /><table bgcolor= ’#cccccc’><tr><td>
<p><strong>ERROR:</strong> $errstr</p><p>Please try again, or contact us and tell us thatthe error occurred in line $errline of file ‘$errfile ’</p>”;
if ($errno == E_USER_ERROR){
echo ‘<p>This error was fatal, program ending</p> ’;
echo ‘</td></tr></table> ’;
// close open resources, include page footer, etcexit;31 6728 CH25  9/2/04  1:22 PM  Page 537
538 Chapter 25 Debugging
}
echo ‘</td></tr></table> ’;
}// Set the error handlerset_error_handler( ‘my_error_handler ’);
//trigger different levels of error
trigger_error( ‘Trigger function called ’, E_USER_NOTICE);
fopen(‘nofile’, ‘r’);
trigger_error( ‘This computer is beige ’, E_USER_WARNING); 
include ( ‘nofile’);
trigger_error( ‘This computer will self destruct in 15 seconds ’, E_USER_ERROR);
?>
The output from this script is shown in Figure 25.1.Listing 25.2 Continued 
Figure 25.1 You can give friendlier error messages than PHP if you use your
own error handler.
This custom error handler does not do any more than the default behavior. Because you
write this code, you can make it do anything.Y ou have a choice about what to tell yourvisitors when something goes wrong and how to present that information so that it fitsthe rest of the site. More importantly, you have the flexibility to decide what happens.
31 6728 CH25  9/2/04  1:22 PM  Page 538
539 Next
Should the script continue? Should a message be logged or displayed? Should tech 
support be alerted automatically?
It is important to note that your error handler will not have the responsibility for
dealing with all error types. Some errors, such as parse errors and fatal runtime errors,still trigger the default behavior. If this behavior concerns you, make sure that you checkparameters carefully before passing them to a function that can generate fatal errors andtrigger your own 
E_USER_ERROR level error if your parameters are going to cause failure.
Here’s a new feature in PHP5: If your error handler returns an explicit false value,
PHP’s built-in error handler will be invoked.This way, you can handle the E_USER_*
errors yourself and let the built-in handler deal with the regular errors.
Next
In Chapter 26,“Building User Authentication and Personalization,” you begin your firstproject. In this project, you look at how to recognize users who are coming back to yoursite and tailor your content appropriately.31 6728 CH25  9/2/04  1:22 PM  Page 539
31 6728 CH25  9/2/04  1:22 PM  Page 540
26
Building User Authentication and
Personalization
INTHIS PROJECT ,YOUGET USERS TO REGISTER at your website.After they’ve done that,
you can track what they’re interested in and show them appropriate content.This behav-
ior is called user personalization .
This particular project enables users to build a set of bookmarks on the Web and sug-
gests other links they might find interesting based on their past behavior. More generally,user personalization can be used in almost any web-based application to show users thecontent they want in the format in which they want it.
In this project and the others to follow, you start by looking at a set of requirements
similar to those you might get from a client.Y ou develop those requirements into a set ofsolution components, build a design to connect those components together, and thenimplement each of the components.
In this project, you implement the following functionality:
nLogging in and authenticating users
nManaging passwords
nRecording user preferences
nPersonalizing content
nRecommending content based on existing knowledge about a user
The Problem
For this project, your job is to build a prototype for an online bookmarking system, to
be called PHPbookmark, similar (but more limited in functionality) to that available atBackflip at http://backflip.com.32 6728 CH26  9/2/04  1:21 PM  Page 541
542 Chapter 26 Building User Authentication and Personalization
This system should enable users to log in and store their personal bookmarks and to
get recommendations for other sites that they might like to visit based on their personalpreferences.
These solution requirements fall into three main categories:
nYou need to be able to identify individual users.Y ou should also have some way of
authenticating them.
nYou need to be able to store bookmarks for an individual user. Users should be
able to add and delete bookmarks.
nYou need to be able to recommend to users sites that might appeal to them, based
on what you know about them already.
Solution Components
Now that you know the system requirements, you can begin designing the solution andits components. Let’s look at possible solutions to each of the three main requirementslisted in the preceding section.
User Identification and Personalization
Several alternatives can be used for user authentication, as you have seen elsewhere inthis book. Because you want to tie users to some personalization information, you canstore the users’ logins and passwords in a MySQL database and authenticate against it.
If you are going to let users log in with usernames and passwords, you will need the
following components:
nUsers should be able to register their usernames and passwords.Y ou need somerestrictions on the length and format of each username and password.Y ou should
store passwords in an encrypted format for security reasons.
nUsers should be able to log in with the details they supplied in the registrationprocess.
nUsers should be able to log out after they have finished using a site.This capabilityis not particularly important if people use the site from their home PC but is veryimportant for security if they use the site from a shared PC.
nThe site needs to be able to check whether a particular user is logged in andaccess data for a logged-in user.
nUsers should be able to change their passwords as an aid to security.
nUsers will occasionally forget their passwords.They should be able to reset their pass-words without needing personal assistance from you.A common way of doing this is
to send a user’s password to him in an email address he has nominated at registration.This means you need to store his email address at registration. Because you store thepasswords in an encrypted form and cannot decrypt the user’s original password, youactually need to generate a new password, set it, and mail it to the user.32 6728 CH26  9/2/04  1:21 PM  Page 542
543 Solution Overview
For purposes of this project, you will write functions for all these pieces of functionality.
Most of them will be reusable, or reusable with minor modifications, in other projects.
Storing Bookmarks
To store a user’s bookmarks, you need to set up some space in your MySQL database.
You need the following functionality:
nUsers should be able to retrieve and view their bookmarks.
nUsers should be able to add new bookmarks.Y ou should check that these are valid
URLs.
nUsers should be able to delete bookmarks.
Again, you can write functions for each of these pieces of functionality.
Recommending Bookmarks
You could take a number of different approaches to recommending bookmarks to a user.
You could recommend the most popular overall or the most popular within a topic. For
this project, you will implement a “like minds” suggestion system that looks for userswho have a bookmark the same as your logged-in user and suggests their other book-marks to your user.T o avoid recommending any personal bookmarks, you will recom-mend only bookmarks stored by more than one other user.
You can again write a function to implement this functionality.
Solution Overview
After some doodling on napkins, we came up with a system flowchart you can use, as
shown in Figure 26.1.
Figure 26.1 This diagram shows the possible paths through the
PHPbookmark system.Login
page
RegistrationForgot
Password?
View
BMs
Add BMDelete
BMRecommendChange
passwordLogout32 6728 CH26  9/2/04  1:21 PM  Page 543
544 Chapter 26 Building User Authentication and Personalization
You can build a module for each box on this diagram; some will need one script and
others, two.Y ou can also set up function libraries for
nUser authentication
nBookmark storage and retrieval
nData validation
nDatabase connections
nOutput to the browser.Y ou can confine all the HTML production to this functionlibrary, ensuring that visual presentation is consistent throughout the site. (This isthe function API approach to separating logic and content.)
You also need to build a back-end database for the system.
We describe the solution in some detail, but all the code for this application can be
found on the CD-ROM in the 
chapter26 directory.A summary of included files is
shown in Table 26.1.
Table 26.1 Files in the PHPbookmark Application
Filename Description
bookmarks.sql SQL statements to create the PHPbookmark database
login.php Front page with login form for the system
register_form.php Form for users to register in the system
register_new.php Script to process new registrations
forgot_form.php Formfor users to fill out if they’ve forgotten their passwords
forgot_passwd.php Script to reset forgotten passwords
member.php Auser’s main page, with a view of all his current bookmarks
add_bm_form.php Formfor adding new bookmarks
add_bms.php Script to actually add new bookmarks to the database
delete_bms.php Script to delete selected bookmarks from a user’s list
recommend.php Script to suggest recommendations to a user, based on users
with similar interests
change_passwd_form.php Form for members to fill out if they want to change their 
passwords
change_passwd.php Script to change a user’s password in the database
logout.php Script to log a user out of the application
bookmark_fns.php A collection of includes for the application
data_valid_fns.php Functions to validate user-input data
db_fns.php Functions to connect to the database
user_auth_fns.php Functions for user authentication
url_fns.php Functions for adding and deleting bookmarks and for makingrecommendations
output_fns.php Functions that format output as HTML
bookmark.gif Logo for PHPbookmark32 6728 CH26  9/2/04  1:21 PM  Page 544
545 Implementing the Database
You begin by implementing the MySQL database for this application because it is
required for virtually all the other functionality to work.
Then you work through the code in the order it was written, starting from the front
page, going through the user authentication, to bookmark storage and retrieval, andfinally to recommendations.This order is fairly logical; it’s just a question of working outthe dependencies and building first the things that will be required for later modules.
Note
For the code in this project to work as written, you need to have switched on magic quotes. If you have not
done this, you will need to use addslashes() on data being inserted to the MySQL database and
stripslashes() on data retrieved from the database. We used this technique as a useful shortcut. You
will also require a JavaScript-capable browser to view the application correctly.
Implementing the Database
The PHPbookmark database requires only a fairly simple schema.Y ou need to store
users and their email addresses and passwords.Y ou also need to store the URL of abookmark. One user can have many bookmarks, and many users can register the samebookmark.Y ou therefore need two tables,
user and bookmark ,as shown in Figure 26.2.
Figure 26.2 Database schema for the PHPbookmark system.
The user table stores each user’s username (which is the primary key), password, and
email address.The bookmark table stores username and bookmark (bm_URL) pairs.The
username in this table refers to a username from the user table.
The SQL to create this database, and to create a user for connecting to the database
from the Web, is shown in Listing 26.1.Y ou should edit this file if you plan to use it onyour system. Be sure to change the user’s password to something more secure!usernameuser
passwd email
laura
luke7cbf26201e73c9b
1fef10690eeb2e59laura@tangledweb.com.au
luke@tangledweb.com.au
usernamebookmark
bm_URL
laura
laurahttp://slashdot.org
http://php.net32 6728 CH26  9/2/04  1:21 PM  Page 545
546 Chapter 26 Building User Authentication and Personalization
Listing 26.1 bookmarks.sql —SQL File to Set Up the Bookmark Database
create database bookmarks;
use bookmarks;
create table user  (
username varchar(16) not null primary key,passwd char(40) not null,email varchar(100) not null
);
create table bookmark (
username varchar(16) not null,bm_URL varchar(255) not null,index (username),index (bm_URL),primary key(username, bm_URL)
);
grant select, insert, update, delete
on bookmarks.*
to bm_user@localhost identified by ‘password ’;
You can set up this database on your system by running this set of commands as the root
MySQL user.Y ou can do this with the following command on your system’s command line:
mysql -u root -p < bookmarks.sql
You are then prompted to type in your password.
With the database set up, you’re ready to go on and implement the basic site.
Implementing the Basic Site
The first page you’ll build is called login.php because it provides users with the oppor-
tunity to log in to the system.The code for this first page is shown in Listing 26.2.
Listing 26.2 login.php —Front Page of the PHPbookmark System
<?php
require_once( ‘bookmark_fns.php ’);
do_html_header( ‘’);
display_site_info();
display_login_form();
do_html_footer();
?>32 6728 CH26  9/2/04  1:21 PM  Page 546
547 Implementing the Basic Site
This code looks very simple because it mostly calls functions from the function API that
you will construct for this application.We look at the details of these functions shortly.
Just looking at this file, you can see that it includes a file (containing the functions) and
then calls some functions to render an HTML header, display some content, and renderan HTML footer.
The output from this script is shown in Figure 26.3.
Figure 26.3 The front page of the PHPbookmark system is produced by the
HTML rendering functions in login.php .
The functions for the system are all included in the file bookmark_fns.php ,shown in
Listing 26.3.
Listing 26.3 bookmark_fns.php —Include File of Functions for the Bookmark
Application
<?php
// We can include this file in all our files// this way, every file will contain all our functions and exceptionsrequire_once( ‘data_valid_fns.php ’);
require_once( ‘db_fns.php ’);
require_once( ‘user_auth_fns.php ’);
require_once( ‘output_fns.php ’);
require_once( ‘url_fns.php ’);
?>
32 6728 CH26  9/2/04  1:21 PM  Page 547
548 Chapter 26 Building User Authentication and Personalization
As you can see, this file is just a container for the five other include files you will use in
this application.We structured the project like this because the functions fall into logicalgroups. Some of these groups might be useful for other projects, so we put each function
group into a different file so you will know where to find it when you want it again.We
constructed the 
bookmark_fns.php file because you will use most of the five function
files in most of the scripts. Including this one file in each script is easier than having five
require statements.
In this particular case, you use functions from the file output_fns.php .They are all
straightforward functions that output fairly plain HTML.This file includes the four functions used in 
login.php —that is, do_html_header() ,display_site_info() ,
display_login_form() ,and do_html_footer() ,among others.
Although we will not go through all these functions in detail, let’s look at one as an
example.The code for do_html_header() is shown in Listing 26.4.
Listing 26.4 do_html_header() Function from output_fns.php —This Function
Outputs the Standard Header That Will Appear on Each Page in the Application
function do_html_header($title)
{
// print an HTML header
?>
<html><head>
<title><?php echo $title;?></title><style>
body { font-family: Arial, Helvetica, sans-serif; font-size: 13px }li, td { font-family: Arial, Helvetica, sans-serif; font-size: 13px }hr { color: #3333cc; width=300; text-align=left}a { color: #000000 }
</style>
</head><body><img src= ’bookmark.gif ’alt=’PHPbookmark logo ’border=0
align=’left’valign=’bottom’height = 55 width = 57 />
<h1>&nbsp;PHPbookmark</h1><hr />
<?php
if($title)
do_html_heading($title);
}32 6728 CH26  9/2/04  1:21 PM  Page 548
549 Implementing User Authentication
As you can see, the only logic in the do_html_header() function is to add the 
appropriate title and heading to the page.The other functions used in login.php are
similar.The function display_site_info() adds some general text about the site,
display_login_form() displays the gray form shown in Figure 26.3, and
do_html_footer() adds a standard HTML footer to the page.
The advantages to isolating or removing HTML from your main logic stream are dis-
cussed in Chapter 24,“Using PHP and MySQL for Large Projects.”We use the functionAPI approach here.
Looking at Figure 26.3, you can see that this page has three options:A user can regis-
ter, log in if she has already registered, or reset her password if she has forgotten it.T oimplement these modules, we move on to the next section, user authentication.
Implementing User Authentication
There are four main elements to the user authentication module: registering users, log-ging in and logging out, changing passwords, and resetting passwords. In the following
sections, we look at each of these elements in turn.
Registering
To register a user, you need to get his details via a form and enter him in the database.
When a user clicks on the Not a member? link on the login.php page, he is taken to
a registration form produced by register_form.php .This script is shown in Listing 26.5.
Listing 26.5 register_form.php —This Form Gives Users the Opportunity to
Register with PHPbookmark
<?php
require_once( ‘bookmark_fns.php ’);
do_html_header( ‘User Registration ’);
display_registration_form();do_html_footer();
?>
Again, you can see that this page is fairly simple and just calls functions from the output
library in output_fns.php .The output of this script is shown in Figure 26.4.
The gray form on this page is output by the function
display_registration_form() ,contained in output_fns.php .When the user clicks on
the Register button, he is taken to the script register_new.php ,shown in Listing 26.6.32 6728 CH26  9/2/04  1:21 PM  Page 549
550 Chapter 26 Building User Authentication and Personalization
Figure 26.4 The registration form retrieves the details needed for 
the database.This form requires users to type their passwords twice, in case
they make a mistake.
Listing 26.6 register_new.php — This Script Validates the New User’s Data and
Puts It in the Database
<?php
// include function files for this applicationrequire_once( ‘bookmark_fns.php ’);
//create short variable names
$email=$_POST[ ‘email’];
$username=$_POST[ ‘username ’];
$passwd=$_POST[ ‘passwd’];
$passwd2=$_POST[ ‘passwd2’];
// start session which may be needed later// start it now because it must go before headerssession_start();try{
// check forms filled inif (!filled_out($_POST)){
throw new Exception( ‘You have not filled the form out correctly ‘
.’- please go back and try again. ’);
}
32 6728 CH26  9/2/04  1:21 PM  Page 550
551 Implementing User Authentication
// email address not valid
if (!valid_email($email)){
throw new Exception( ‘That is not a valid email address.  Please go back ‘
.’and try again. ’);
}
// passwords not the same
if ($passwd != $passwd2){
throw new Exception( ‘The passwords you entered do not match 
.’- please go back and try again. ’);
}
// check password length is ok
if (strlen($passwd)<6){
throw new Exception( ‘Your password must be at least 6 characters long. ’
.’Please go back and try again. ’);
}
// check username length is ok
if (strlen($username)>16){
throw new Exception( ‘Your username must be less than 17 characters long. ’
.’Please go back and try again. ’);
}
// attempt to register
// this function can also throw an exceptionregister($username, $email, $passwd);// register session variable$_SESSION[ ‘valid_user ’] = $username;
// provide link to members page
do_html_header( ‘Registration successful ’);
echo ‘Your registration was successful.  Go to the members page ‘
.’to start setting up your bookmarks! ’;
do_html_url( ‘member.php ’, ‘Go to members page ’);
// end page
do_html_footer();
}catch (Exception $e){Listing 26.6 Continued 32 6728 CH26  9/2/04  1:21 PM  Page 551
552 Chapter 26 Building User Authentication and Personalization
do_html_header( ‘Problem: ’);
echo $e->getMessage();do_html_footer();exit;
}
?>
This is the first script with any complexity to it that we have looked at in this applica-
tion. It begins by including the application’s function files and starting a session. (Whenthe user is registered, you create his username as a session variable, as you did in Chapter 22,“Using Session Control in PHP .”)
The body of the script takes place in a 
tryblock because you check a number of
conditions. If any of them fail, execution will fall through to the catch block, which we
look at shortly.
Next, you validate the input data from the user. Here, you must test for the following
conditions:
nCheck that the form is filled out.Y ou test this with a call to the function
filled_out() ,as follows:
if (!filled_out($_POST))
We wrote this function ourselves. It is in the function library in the file
data_valid_fns.php .We look at this function shortly.
nCheck that the email address supplied is valid.Y ou test this as follows:
if (valid_email($email))
Again, this is a function we wrote; it’s in the data_valid_fns.php library.
nCheck that the two passwords the user has suggested are the same, as follows:
if ($passwd != $passwd2)
nCheck that the username and password are the appropriate length, as follows:
if (strlen($passwd)<6)
and
if (strlen($username)>16)
In the example, the password should be at least 6 characters long to make it harder
to guess, and the username should be fewer than 17 characters so that it will fit inthe database. Note that the maximum length of the password is not restricted inthis way because it is stored as an SHA1 hash, which will always be 40 characterslong no matter the length of the password.Listing 26.6 Continued 32 6728 CH26  9/2/04  1:21 PM  Page 552
553 Implementing User Authentication
The data validation functions used here, filled_out() and valid_email() ,a r eshown
in Listings 26.7 and 26.8, respectively.
Listing 26.7 filled_out() Function from data_valid_fns.php —This Function
Checks That the Form Has Been Filled Out
function filled_out($form_vars)
{
// test that each variable has a valueforeach ($form_vars as $key => $value){
if (!isset($key) || ($value == ‘’))
return false;
}return true;
}
Listing 26.8 valid_email() Function from data_valid_fns.php —This Function
Checks Whether an Email Address Is Valid
function valid_email($address)
{
// check an email address is possibly validif (ereg( ‘^[a-zA-Z0-9 \._\-]+@([a-zA-Z0-9][a-zA-Z0-9\-]*\.)+
[a-zA-Z]+$ ’, $address))
return true;
else 
return false;
}
The function filled_out() expects to be passed an array of variables; in general, this is
the $_POST or $_GET array. It checks whether the form fields are all filled out, and
returns true if they are and false if they are not.
The valid_email() function uses a slightly more complex regular expression than the
one developed in Chapter 4,“String Manipulation and Regular Expressions,” for validat-ing email addresses. It returns 
true if an address appears valid and false if it does not.
After you’ve validated the input data, you can actually try to register the user. If you
look back at Listing 26.6, you can see that you do this as follows:
register($username, $email, $passwd);
// register session variable$_SESSION[ ‘valid_user ’] = $username;32 6728 CH26  9/2/04  1:21 PM  Page 553
554 Chapter 26 Building User Authentication and Personalization
// provide link to members page
do_html_header( ‘Registration successful ’);
echo ‘Your registration was successful.  Go to the members page ‘
.’to start setting up your bookmarks! ’;
do_html_url( ‘member.php ’, ‘Go to members page ’);
// end page
do_html_footer();
As you can see, you call the register() function with the username, email address, and
password that were entered. If this call succeeds, you register the username as a sessionvariable and provide the user with a link to the main members page. (If it fails, this func-
tion will throw an exception that will be caught in the 
catch block.) The output is
shown in Figure 26.5.
Figure 26.5 Registration was successful; the user can now go 
to the members page.
The register() function is in the included library called user_auth_fns.php .This
function is shown in Listing 26.9.
32 6728 CH26  9/2/04  1:21 PM  Page 554
555 Implementing User Authentication
Listing 26.9 register() Function from user_auth_fns.php —This Function
Attempts to Put the New User’s Information in the Database
function register($username, $email, $password)
// register new person with db// return true or error message{
// connect to db$conn = db_connect();
// check if username is unique
$result = $conn->query( “select * from user where username= ’$username ’”);
if (!$result)
throw new Exception( ‘Could not execute query ’);
if ($result->num_rows>0)
throw new Exception( ‘That username is taken ‘
.’- go back and choose another one. ’) ;
// if ok, put in db
$result = $conn->query( “insert into user values
(‘$username ’, sha1(‘$password ’), ‘$email’)”);
if (!$result)
throw new Exception( ‘Could not register you in database ‘
.’- please try again later. ’);
return true;
}
There is nothing particularly new in this function; it connects to the database you set up
earlier. If the username selected is taken or the database cannot be updated, it will throwan exception. Otherwise, it will update the database and return 
true.
Note that you are performing the actual database connection with a function called
db_connect() ,which we wrote.This function simply provides a single location that con-
tains the username and password to connect to the database.That way, if you change thedatabase password, you need to change only one file in the application.The 
db_connect()
function is shown in Listing 26.10.
Listing 26.10 db_connect() Function from db_fns.php —This Function Connects to
the MySQL Database
function db_connect()
{
$result = new mysqli( ‘localhost ’, ‘bm_user’, ‘password ’, ‘bookmarks ’);
if (!$result)
throw new Exception( ‘Could not connect to database server ’);
else
return $result;
}32 6728 CH26  9/2/04  1:21 PM  Page 555
556 Chapter 26 Building User Authentication and Personalization
When users are registered, they can log in and out using the regular login and logout
pages.Y ou build them next.
Logging In
If users type their details into the form at login.php (see Figure 26.3) and submit it,
they will be taken to the script called member.php .This script logs them in if they have
come from this form. It also displays any relevant bookmarks to users who are logged in.It is the center of the rest of the application.This script is shown in Listing 26.11.
Listing 26.11 member.php — This Script Is the Main Hub of the Application
<?php
// include function files for this application
require_once( ‘bookmark_fns.php ’);
session_start();
//create short variable names
$username = $_POST[ ‘username ’];
$passwd = $_POST[ ‘passwd’];
if ($username && $passwd)
// they have just tried logging in{
try{
login($username, $passwd);// if they are in the database register the user id$_SESSION[ ‘valid_user ’] = $username;
}catch(Exception $e){
// unsuccessful logindo_html_header( ‘Problem: ’);
echo ‘You could not be logged in.
You must be logged in to view this page. ’;
do_html_url( ‘login.php ’, ‘Login’);
do_html_footer();exit;
}
}
do_html_header( ‘Home’);
check_valid_user();32 6728 CH26  9/2/04  1:21 PM  Page 556
557 Implementing User Authentication
// get the bookmarks this user has saved
if ($url_array = get_user_urls($_SESSION[ ‘valid_user ’]))
display_user_urls($url_array);
// give menu of options
display_user_menu();
do_html_footer();
?>
You might recognize the logic in the member.php script: It reuses some of the ideas from
Chapter 22.
First, you check whether the user has come from the front page—that is, whether he
has just filled in the login form—and try to log him in as follows:
if ($username && $passwd)
// they have just tried logging in{
try{
login($username, $passwd);// if they are in the database register the user id$_SESSION[ ‘valid_user ’] = $username;
}
You try to log the user in by using a function called login() .It is defined in the
user_auth_fns.php library, and we look at the code for it shortly.
If the user is logged in successfully, you register his session as you did before, storing
the username in the session variable valid_user .
If all goes well, you then show the user the members page:
do_html_header( ‘Home’);
check_valid_user();// get the bookmarks this user has savedif ($url_array = get_user_urls($_SESSION[ ‘valid_user ’]))
display_user_urls($url_array);
// give menu of options
display_user_menu();
do_html_footer();
This page is again formed using the output functions. Notice that the page uses several
other new functions: check_valid_user() from user_auth_fns.php ,get_user_urls()
from url_fns.php ,and display_user_urls() from output_fns.php .The
check_valid_user() function checks that the current user has a registered session.Listing 26.11 Continued32 6728 CH26  9/2/04  1:21 PM  Page 557
558 Chapter 26 Building User Authentication and Personalization
This is aimed at users who have notjust logged in, but are mid-session.The
get_user_urls() function gets a user’s bookmarks from the database, and
display_user_urls() outputs the bookmarks to the browser in a table.We look at
check_valid_user() in a moment and at the other two in the section on bookmark
storage and retrieval.
The member.php script ends the page by displaying a menu with the
display_user_menu() function. Some sample output as displayed by member.php is
shown in Figure 26.6.
Figure 26.6 The member.php script checks that a user is logged in, retrieves
and displays his bookmarks, and gives him a menu of options.
Let’s look at the login() and check_valid_user() functions a little more closely now.
The login() function is shown in Listing 26.12.
Listing 26.12 login() Function from user_auth_fns.php —This Function Checks a
User’s Details Against the Database
function login($username, $password)
// check username and password with db// if yes, return true// else throw exception{
// connect to db$conn = db_connect();
32 6728 CH26  9/2/04  1:21 PM  Page 558
559 Implementing User Authentication
// check if username is unique
$result = $conn->query( “select * from user
where username= ’$username ’
and passwd = sha1( ‘$password ’)”);
if (!$result)
throw new Exception( ‘Could not log you in. ’);
if ($result->num_rows>0)
return true;
else
throw new Exception( ‘Could not log you in. ’);
}
As you can see, the login() function connects to the database and checks that there is a
user with the username and password combination supplied. It returns true if there is or
throws an exception if there is not or if the user’s credentials could not be checked.
The check_valid_user() function does not connect to the database again, but
instead just checks that the user has a registered session—that is, that he has alreadylogged in.This function is shown in Listing 26.13.
Listing 26.13 check_valid_user() Function from user_auth_fns.php —This
Function Checks That the User Has a Valid Session
function check_valid_user()
// see if somebody is logged in and notify them if not{
if (isset($_SESSION[ ‘valid_user ’]))
{
echo ‘Logged in as ‘.stripslashes($_SESSION[ ‘valid_user ’]).’.’;
echo ‘<br />’;
}else{
// they are not logged in do_html_heading( ‘Problem: ’);
echo ‘You are not logged in.<br /> ’;
do_html_url( ‘login.php ’, ‘Login’);
do_html_footer();exit;
}  
}
If the user is not logged in, the function will tell him he has to be logged in to see this
page, and give him a link to the login page.Listing 26.12 Continued 32 6728 CH26  9/2/04  1:21 PM  Page 559
560 Chapter 26 Building User Authentication and Personalization
Logging Out
You might have noticed the link marked Logout on the menu in Figure 26.6.This is a
link to the logout.php script; the code for this script is shown in Listing 26.14.
Listing 26.14 logout.php —This Script Ends a User Session
<?php
// include function files for this application
require_once( ‘bookmark_fns.php ’);
session_start();$old_user = $_SESSION[ ‘valid_user ’];
// store  to test if they *were* logged inunset($_SESSION[ ‘valid_user ’]);
$result_dest = session_destroy();
// start output html
do_html_header( ‘Logging Out ’);
if (!empty($old_user))
{
if ($result_dest){
// if they were logged in and are now logged outecho ‘Logged out.<br /> ’;
do_html_url( ‘login.php ’, ‘Login’);
}else{
// they were logged in and could not be logged out
echo ‘Could not log you out.<br /> ’;
}
}else{
// if they weren ’t logged in but came to this page somehow
echo ‘You were not logged in, and so have not been logged out.<br /> ’;
do_html_url( ‘login.php ’, ‘Login’);
}
do_html_footer();
?>
Again, you might find that this code looks familiar.That’s because it is based on the code
you wrote in Chapter 22.32 6728 CH26  9/2/04  1:21 PM  Page 560
561 Implementing User Authentication
Changing Passwords
If a user follows the Change Password menu option, she will be presented with the
form shown in Figure 26.7.
Figure 26.7 The change_passwd_form.php script supplies a form where
users can change their passwords.
This form is generated by the script change_passwd_form.php .This simple script just
uses the functions from the output library, so we did not include the source for it here.
When this form is submitted, it triggers the change_passwd.php script, which is
shown in Listing 26.15.
Listing 26.15 change_passwd.php — This Script Attempts to Change a User
Password
<?php
require_once( ‘bookmark_fns.php ’);
session_start();do_html_header( ‘Changing password ’);
// create short variable names
$old_passwd = $_POST[ ‘old_passwd ’];
$new_passwd = $_POST[ ‘new_passwd ’];
$new_passwd2 = $_POST[ ‘new_passwd2 ’];
32 6728 CH26  9/2/04  1:21 PM  Page 561
562 Chapter 26 Building User Authentication and Personalization
try
{
check_valid_user();if (!filled_out($_POST))
throw new Exception( ‘You have not filled out the form completely. ’
.’Please try again. ’);
if ($new_passwd!=$new_passwd2)
throw new Exception( ‘Passwords entered were not the same.  Not changed. ’);
if (strlen($new_passwd)<6)
throw new Exception( ‘New password must be at least 6 characters. ’
.’Try again. ’);
// attempt updatechange_password($_SESSION[ ‘valid_user ’], $old_passwd, $new_passwd);
echo ‘Password changed. ’;
}catch (Exception $e){
echo $e->getMessage();
}display_user_menu();do_html_footer();
?>
This script checks that the user is logged in (using check_valid_user() ), that she’s filled
out the password form (using filled_out() ), and that the new passwords are the same
and the right length. None of this is new. If all that goes well, the script will call the
change_password() function as follows:
change_password($_SESSION[ ‘valid_user ’], $old_passwd, $new_passwd);
echo ‘Password changed. ’;
This function is from the user_auth_fns.php library, and the code for it is shown in
Listing 26.16.
Listing 26.16 change_password() Function from user_auth_fns.php —This
Function Attempts to Update a User Password in the Database
function change_password($username, $old_password, $new_password)
// change password for username/old_password to new_password// return true or false{
// if the old password is right// change their password to new_password and return true// else throw an exceptionlogin($username, $old_password);Listing 26.15 Continued 32 6728 CH26  9/2/04  1:21 PM  Page 562
563 Implementing User Authentication
$conn = db_connect();
$result = $conn->query( “update user
set passwd = sha1( ‘$new_password ’)
where username = ‘$username ’”);
if (!$result)
throw new Exception( ‘Password could not be changed. ’);
else
return true;  // changed successfully
}
This function checks that the old password supplied was correct, using the login()
function that you have already looked at. If it’s correct, the function will connect to the
database and update the password to the new value.
Resetting Forgotten Passwords
In addition to changing passwords, you need to deal with the common situation inwhich a user has forgotten her password. On the front page,
login.php ,you provide a
link, marked Forgotten your password? ,for users in this situation.This link takes users
to the script called forgot_form.php ,which uses the output functions to display a form,
as shown in Figure 26.8.Listing 26.16 Continued 
Figure 26.8 The forgot_form.php script supplies a form in which users
can ask to have their passwords reset and sent to them.
32 6728 CH26  9/2/04  1:21 PM  Page 563
564 Chapter 26 Building User Authentication and Personalization
The forgot_form.php script is very simple—just using the output functions—so we did
not include it here.When the form is submitted, it calls the forgot_passwd.php script,
which is more interesting.This script is shown in Listing 26.17.
Listing 26.17 forgot_passwd.php —This Script Resets a User’s Password to a
Random Value and Emails Her the New One
<?php
require_once( ‘bookmark_fns.php ’);
do_html_header( ‘Resetting password ’);
// creating short variable name
$username = $_POST[ ‘username ’];
try
{
$password = reset_password($username);notify_password($username, $password);echo ‘Your new password has been emailed to you.<br /> ’;
}catch (Exception $e){
echo ‘Your password could not be reset - please try again later. ’;
}do_html_url( ‘login.php ’, ‘Login’);
do_html_footer();
?>
As you can see, this script uses two main functions to do its job: reset_password() and
notify_password() .Let’s look at each of these in turn.
The reset_password() function generates a random password for the user and puts
it into the database.The code for this function is shown in Listing 26.18.
Listing 26.18 reset_password() Function from user_auth_fns.php —This
Function Resets a User’s Password to a Random Value and Emails Her the New One
function reset_password($username)
// set password for username to a random value// return the new password or false on failure{
// get a random dictionary word b/w 6 and 13 chars in length$new_password = get_random_word(6, 13);
if($new_password==false)
throw new Exception( ‘Could not generate new password. ’);
// add a number  between 0 and 999 to it// to make it a slightly better password32 6728 CH26  9/2/04  1:21 PM  Page 564
565 Implementing User Authentication
srand ((double) microtime() * 1000000);
$rand_number = rand(0, 999);$new_password .= $rand_number;
// set user ’s password to this in database or return false
$conn = db_connect();$result = $conn->query( “update user
set passwd = sha1( ‘$new_password ’)
where username = ‘$username ’”);
if (!$result)
throw new Exception( ‘Could not change password. ’);  // not changed
else
return $new_password;  // changed successfully
}
The reset_password() function generates its random password by getting a random
word from a dictionary, using the get_random_word() function and suffixing it with a
random number between 0 and 999.The get_random_word() function, shown in
Listing 26.19, is also in the user_auth_fns.php library.
Listing 26.19 get_random_word() Function from user_auth_fns.php —This
Function Gets a Random Word from the Dictionary for Use in Generating Passwords
function get_random_word($min_length, $max_length)
// grab a random word from dictionary between the two lengths// and return it{
// generate a random word
$word = ‘’;
// remember to change this path to suit your system$dictionary = ‘/usr/dict/words ’;  // the ispell dictionary
$fp = @fopen($dictionary, ‘r’);
if(!$fp)
return false;
$size = filesize($dictionary);
// go to a random location in dictionary
srand ((double) microtime() * 1000000);$rand_location = rand(0, $size);fseek($fp, $rand_location);
// get the next whole word of the right length in the file
while (strlen($word)< $min_length || 
strlen($word)>$max_length || strstr($word, “‘“))
{Listing 26.18 Continued 32 6728 CH26  9/2/04  1:21 PM  Page 565
566 Chapter 26 Building User Authentication and Personalization
if (feof($fp))
fseek($fp, 0);        // if at end, go to start
$word = fgets($fp, 80);  // skip first word as it could be partial$word = fgets($fp, 80);  // the potential password
};$word=trim($word); // trim the trailing \n from fgetsreturn $word;
}
To  wo rk, the get_random_word() function needs a dictionary. If you are using a Unix
system, the built-in spell checker ispell comes with a dictionary of words, typically locat-ed at 
/usr/dict/words ,as it is here, or at /usr/share/dict/words .If you don’t find it
in one of these places, on most systems you can find yours by typing
$ locate dict/words
If you are using some other system or do not want to install ispell, don’t worry! Y ou candownload word lists as used by ispell from http://wordlist.sourceforge.net/.
This site also has dictionaries in many other languages, so if you would like a random,
say, Norwegian or Esperanto word, you can download one of those dictionaries instead.These files are formatted with each word on a separate line, separated by newlines.
To get a random word from this file, you pick a random location between 0 and the
filesize, and read from the file there. If you read from the random location to the nextnewline, you will most likely get only a partial word, so you skip the line you open thefile to and take the next word as your word by calling 
fgets() twice.
The function has two clever bits.The first is that, if you reach the end of the file
while looking for a word, you go back to the beginning:
if (feof($fp))
fseek($fp, 0);        // if at end, go to start
The second is that you can seek for a word of a particular length:Y ou check each word
that you pull from the dictionary, and, if it is not between $min_length and
$max_length ,you keep searching.At the same time, you also dump words with apostro-
phes (single quotation marks) in them.Y ou could escape them out when using the word,butjust getting the next word is easier.
Back in 
reset_password() ,after you have generated a new password, you update the
database to reflect this and return the new password to the main script.This is thenpassed on to 
notify_password() ,which emails it to the user.The notify_password()
function is shown in Listing 26.20.Listing 26.19 Continued 32 6728 CH26  9/2/04  1:21 PM  Page 566
567 Implementing User Authentication
Listing 26.20 notify_password() Function from user_auth_fns.php —This
Function Emails a Reset Password to a User
function notify_password($username, $password)
// notify the user that password has been changed{
$conn = db_connect();$result = $conn->query( “select email from user
where username= ’$username ’”);
if (!$result){
throw new Exception( ‘Could not find email address. ’);
}else if ($result->num_rows==0){
throw new Exception( ‘Could not find ‘
.’email address. ’);   // username not in db
}else{
$row = $result->fetch_object();$email = $row->email;$from = “From: support@phpbookmark \r\n ”;
$mesg = “Your PHPbookmark password has been changed to $password \r\n ”
.”Please change it next time you log in. \r\n ”;
if (mail($email, ‘PHPbookmark login information ’, $mesg, $from))
return true;
else
throw new Exception( ‘Could not send email. ’);
}
}
In the notify_password() function, given a username and new password, you simply
look up the email address for that user in the database and use PHP’s mail() function to
send it to her.
It would be more secure to give users a truly random password—made from any
combination of upper and lowercase letters, numbers, and punctuation—rather than therandom word and number. However, a password like 
zigzag487 will be easier for users
to read and type than a truly random one. It is often confusing for users to work outwhether a character in a random string is 0 or O (zero or capital O), or 1 or l (one or alowercase L)32 6728 CH26  9/2/04  1:21 PM  Page 567
568 Chapter 26 Building User Authentication and Personalization
On our system, the dictionary file contains about 45,000 words. If a cracker knew
how we were creating passwords and knew a user’s name, he would still have to try22,500,000 passwords on average to guess one.This level of security seems adequate forthis type of application even if our users disregard our emailed advice to change theirpassword.
Implementing Bookmark Storage and Retrieval
Now let’s move on and look at how users’ bookmarks are stored, retrieved, and deleted.
Adding Bookmarks
Users can add bookmarks by clicking on the Add BM link in the user menu. This action
takes them to the form shown in Figure 26.9.
Figure 26.9 The add_bm_form.php script supplies a form where users can
add bookmarks to their bookmark pages.
Again, because the add_bm_form.php script is simple and uses just the output functions,
we did not include it here.When the form is submitted, it calls the add_bms.php script,
which is shown in Listing 26.21.
32 6728 CH26  9/2/04  1:21 PM  Page 568
569 Implementing Bookmark Storage and Retrieval
Listing 26.21 add_bms.php —This Script Adds New Bookmarks to a User’s Personal
Page
<?php
require_once( ‘bookmark_fns.php ’);
session_start();
//create short variable name
$new_url = $_POST[ ‘new_url’];
do_html_header( ‘Adding bookmarks ’);
try
{
check_valid_user();if (!filled_out($_POST)){
throw new Exception( ‘Form not completely filled out. ’);
}// check URL formatif (strstr($new_url, ‘http://’)===false)
$new_url = ‘http://’.$new_url;
// check URL is valid
if (!(@fopen($new_url, ‘r’)))
throw new Exception( ‘Not a valid URL. ’);
// try to add bmadd_bm($new_url) ;echo ‘Bookmark added. ’;
// get the bookmarks this user has saved
if ($url_array = get_user_urls($_SESSION[ ‘valid_user ’]))
display_user_urls($url_array);
}catch (Exception $e){
echo $e->getMessage();
}display_user_menu();do_html_footer();
?>
Again, this script follows the pattern of validation, database entry, and output.32 6728 CH26  9/2/04  1:21 PM  Page 569
570 Chapter 26 Building User Authentication and Personalization
To validate, you first check whether the user has filled out the form using
filled_out() .You then perform two URL checks. First, using strstr() ,you see
whether the URL begins with http:// .If it doesn’t, you add this to the start of the
URL.After you’ve done this, you can actually check that the URL really exists.As youmight recall from Chapter 19,“Using Network and Protocol Functions,” you can use
fopen() to open an URL that starts with http:// .If you can open this file, you can
assume the URL is valid and call the function add_bm() to add it to the database.
This function and the others relating to bookmarks are all in the function library
url_fns.php .You can see the code for the add_bm() function in Listing 26.22.
Listing 26.22 add_bm() Function from url_fns.php —This Function Adds New
Bookmarks to the Database
function add_bm($new_url)
{
// Add new bookmark to the database
echo “Attempting to add “.htmlspecialchars($new_url). ’<br />’;
$valid_user = $_SESSION[ ‘valid_user ’];
$conn = db_connect();// insert the new bookmark
if (!$conn->query( “insert into bookmark values
(‘$valid_user ’, ‘$new_url ’)”))
throw new Exception( ‘Bookmark could not be inserted. ’);
return true;
}
The add_bm() function is fairly simple. It checks that a user does not already have this
bookmark listed in the database. (Although it is unlikely that users would enter a book-mark twice, it is possible and even likely that they might refresh the page.) If the book-mark is new, it is entered into the database.
Looking back at 
add_bm.php ,you can see that the last thing it does is call
get_user_urls() and display_user_urls() ,the same as member.php .We look at
these functions next.
Displaying Bookmarks
The member.php script and add_bm() function use the functions get_user_urls() and
display_user_urls() .These functions get a user’s bookmarks from the database and
display them, respectively.The get_user_urls() function is in the url_fns.php library,
and the display_user_urls() function is in the output_fns.php library.
The get_user_urls() function is shown in Listing 26.23.32 6728 CH26  9/2/04  1:21 PM  Page 570
571 Implementing Bookmark Storage and Retrieval
Listing 26.23 get_user_urls() Function from url_fns.php —This Function
Retrieves a User’s Bookmarks from the Database
function get_user_urls($username)
{
//extract from the database all the URLs this user has stored$conn = db_connect();$result = $conn->query( “select bm_URL
from bookmarkwhere username = ‘$username ’”);
if (!$result)
return false;
//create an array of the URLs
$url_array = array();for ($count = 0; $row = $result->fetch_row(); ++$count){
$url_array[$count] = $row[0];
}return $url_array;
}
Let’s briefly step through the get_user_urls() function. It takes a username as a param-
eter and retrieves the bookmarks for that user from the database. It returns an array ofthese URLs or 
false if the bookmarks could not be retrieved.
The array from get_user_urls() can be passed to display_user_urls() .This is
again a simple HTML output function to print the user’s URLs in a nice table format,so we didn’t include it here. Refer to Figure 26.6 to see what the output looks like.Thefunction actually puts the URLs into a form. Next to each URL is a check box thatenables the user to mark bookmarks for deletion.We look at this capability next.
Deleting Bookmarks
When a user marks some bookmarks for deletion and clicks on the Delete BM link on
the menu, the form containing the URLs is submitted. Each one of the check boxes isproduced by the following code in the 
display_user_urls() function:
echo “<td><input type= ’checkbox ’name=’del_me[] ’
value=’$url’></td>”;
The name of each input is del_me[] .This means that, in the PHP script activated by
this form, you have access to an array called $del_me that contains all the bookmarks to
be deleted.
Clicking on the Delete BM option activates the delete_bms.php script, which is
shown in Listing 26.24.32 6728 CH26  9/2/04  1:21 PM  Page 571
572 Chapter 26 Building User Authentication and Personalization
Listing 26.24 delete_bms.php — This Script Deletes Bookmarks from the Database
<?php
require_once( ‘bookmark_fns.php ’);
session_start();
//create short variable names
$del_me = $HTTP_POST_VARS[ ‘del_me’];
$valid_user = $HTTP_SESSION_VARS[ ‘valid_user ’];
do_html_header( ‘Deleting bookmarks ’);
check_valid_user();if (!filled_out($HTTP_POST_VARS)){
echo ‘You have not chosen any bookmarks to delete.
Please try again. ’;
display_user_menu();do_html_footer();exit;
}else{
if (count($del_me) >0){
foreach($del_me as $url){
if (delete_bm($valid_user, $url))
echo ‘Deleted ‘.htmlspecialchars($url). ’.<br />’;
else
echo ‘Could not delete ‘.htmlspecialchars($url). ’.<br />’;
}
}else
echo ‘No bookmarks selected for deletion ’;
}// get the bookmarks this user has savedif ($url_array = get_user_urls($valid_user))
display_user_urls($url_array);32 6728 CH26  9/2/04  1:21 PM  Page 572
573 Implementing Bookmark Storage and Retrieval
display_user_menu();
do_html_footer();
?>
You begin this script by performing the usual validations.When you know that the user
has selected some bookmarks for deletion, you delete them in the following loop:
foreach($del_me as $url)
{
if (delete_bm($valid_user, $url))
echo ‘Deleted ‘.htmlspecialchars($url). ’.<br />’;
else
echo ‘Could not delete ‘.htmlspecialchars($url). ’.<br />’;
}
As you can see, the delete_bm() function does the actual work of deleting the book-
mark from the database.This function is shown in Listing 26.25.
Listing 26.25 delete_bm() Function in url_fns.php —This Function Deletes a
Single Bookmark from a User’s List
function delete_bm($user, $url)
{
// delete one URL from the database$conn = db_connect();// delete the bookmarkif (!$conn->query( “delete from bookmark
where username= ’$user’and bm_url= ’$url’”))
throw new Exception( ‘Bookmark could not be deleted ’);
return true;
}
As you can see, delete_bm() is also a pretty simple function. It attempts to delete the
bookmark for a particular user from the database. Note that you want to remove a par-ticular username-bookmark pair in this case. Other users might still have this URLbookmarked.
Some sample output from running the deletion script on the system is shown in
Figure 26.10.Listing 26.24 Continued 32 6728 CH26  9/2/04  1:21 PM  Page 573
574 Chapter 26 Building User Authentication and Personalization
Figure 26.10 The deletion script notifies the user of deleted bookmarks and
then displays the remaining bookmarks.
As in the add_bms.php script, after the changes to the database have been made, you dis-
play the new bookmark list using get_user_urls() and display_user_urls() .
Implementing Recommendations
Finally, you’re ready for the link recommender script, recommend.php .There are many
different ways you could approach recommendations.Y ou should perform what we call a“like minds” recommendation.That is, look for other users who have at least one book-mark the same as your given user.The other bookmarks of those other users mightappeal to your given user as well.
The easiest way to implement this as an SQL query is to use subqueries.The first
subquery looks like this:
select distinct(b2.username)
from bookmark b1, bookmark b2where b1.username= ’$valid_user ’
and b1.username != b2.usernameand b1.bm_URL = b2.bm_URL
32 6728 CH26  9/2/04  1:21 PM  Page 574
575 Implementing Recommendations
This query uses aliases to join the database table bookmark to itself—a strange but some-
times useful concept. Imagine that you actually have two bookmark tables, one called b1
and one called b2.In b1,you look at the current user and his bookmarks. In the other
table, you look at the bookmarks of all the other users.Y ou are looking for other users(
b2.username ) who have an URL the same as the current user ( b1.bm_URL =
b2.bm_URL ) and are not the current user ( b1.username != b2.username ).
This query gives you a list of like-minded people to your current user.Armed with
this list, you can search for their other bookmarks with the outer query:
select bm_URL
from bookmarkwhere username in
(select distinct(b2.username)
from bookmark b1, bookmark b2
where b1.username= ’$valid_user ’
and b1.username != b2.usernameand b1.bm_URL = b2.bm_URL)
You add a second subquery to filter out the current user’s bookmarks; if the user already
has a bookmark, there’s no point in recommending it to him. Finally, you add some fil-tering with the 
$popularity variable.Y ou don’t want to recommend any URLs that are
too personal, so you suggest only URLs that a certain number of other users in the listof like-minded users have bookmarked.The final query looks like this:
select bm_URL
from bookmarkwhere username in
(select distinct(b2.username)
from bookmark b1, bookmark b2
where b1.username= ’$valid_user ’
and b1.username != b2.usernameand b1.bm_URL = b2.bm_URL)
and bm_URL not in
(select bm_URL
from bookmarkwhere username= ’$valid_user ’)
group by bm_urlhaving count(bm_url)>$popularity
If you were anticipating many users using your system, you could adjust $popularity
upward to suggest only URLs that have been bookmarked by a large number of users.
URLs bookmarked by many people might be higher quality and certainly have moregeneral appeal than an average web page.32 6728 CH26  9/2/04  1:21 PM  Page 575
576 Chapter 26 Building User Authentication and Personalization
The full script for making recommendations is shown in Listings 26.26 and 26.27.
The main script for making recommendations is called recommend.php (see List-
ing 26.26). It calls the recommender function recommend_urls() from url_fns.php
(see Listing 26.27).
Listing 26.26 recommend.php — This Script Suggests Some Bookmarks That a User
Might Like
<?php
require_once( ‘bookmark_fns.php ’);
session_start();do_html_header( ‘Recommending URLs ’);
try{
check_valid_user();$urls = recommend_urls($_SESSION[ ‘valid_user ’]);
display_recommended_urls($urls);
}catch(Exception $e){
echo $e->getMessage();
}display_user_menu();do_html_footer();
?>
Listing 26.27 recommend_urls() Function from url_fns.php —This Function
Works Out the Actual Recommendations
function recommend_urls($valid_user, $popularity = 1)
{
// We will provide semi intelligent recommendations to people// If they have an URL in common with other users, they may like// other URLs that these people like$conn = db_connect();32 6728 CH26  9/2/04  1:21 PM  Page 576
577 Implementing Recommendations
// find other matching users
// with an url the same as you// as a simple way of excluding people ’s private pages, and
// increasing the chance of recommending appealing URLs, we// specify a minimum popularity level// if $popularity = 1, then more than one person must have// an URL before we will recommend it$query = “select bm_URL
from bookmarkwhere username in
(select distinct(b2.username)
from bookmark b1, bookmark b2
where b1.username= ’$valid_user ’
and b1.username != b2.usernameand b1.bm_URL = b2.bm_URL)
and bm_URL not in
(select bm_URLfrom bookmarkwhere username= ’$valid_user ’)
group by bm_urlhaving count(bm_url)>$popularity ”;
if (!($result = $conn->query($query)))
throw new Exception( ‘Could not find any bookmarks to recommend. ’);
if ($result->num_rows==0)
throw new Exception( ‘Could not find any bookmarks to recommend. ’);
$urls = array();
// build an array of the relevant urlsfor ($count=0; $row = $result->fetch_object(); $count++){
$urls[$count] = $row->bm_URL;
}
return $urls;
}
Some sample output from recommend.php is shown in Figure 26.11.Listing 26.27 Continued 32 6728 CH26  9/2/04  1:21 PM  Page 577
578 Chapter 26 Building User Authentication and Personalization
Figure 26.11 The recommend.php script has recommended that 
this user might like amazon.com.At least two other users in the database who
both like amazon.com have this site bookmarked.
Wrapping Up and Considering Possible
Extensions
In the preceding sections, we described the basic functionality of the PHPbookmark
application.There are many possible extensions. For example, you might consider adding
nA grouping of bookmarks by topic
nAn “Add this to my bookmarks” link for recommendations
nRecommendations based on the most popular URLs in the database or on a par-ticular topic
nAn administrative interface to set up and administer users and topics
nWays to make recommended bookmarks more intelligent or faster
nAdditional error checking of user input
Experiment! It’s the best way to learn.
Next
In the next project, you build a shopping cart that will enable users to browse your site,
adding purchases as they go, before finally checking out and making an electronic payment.
32 6728 CH26  9/2/04  1:21 PM  Page 578
27
Building a Shopping Cart
INTHIS CHAPTER ,YOULEARN HOW TO BUILD a basic shopping cart.Y ou add this on top
of the Book-O-Rama database implemented in Part II,“Using MySQL.”Y ou alsoexplore another option: setting up and using an existing open source PHP shopping cart.
In case you have not heard it before, the term shopping cart (sometimes also called a
shopping basket ) is used to describe a specific online shopping mechanism.As you browse
an online catalog, you can add items to your shopping cart.After you’ve finished brows-ing, you check out of the online store—that is, purchase the items in your cart.
To implement the shopping cart for this project, you need to implement the follow-
ing functionality:
nA database of the products you want to sell online
nAn online catalog of products, listed by category
nA shopping cart to track the items a user wants to buy
nA checkout script that processes payment and shipping details
nAn administration interface
The Problem
You probably remember the Book-O-Rama database developed in Part II. In this proj-
ect, you get Book-O-Rama’s online store up and going.The following are requirementsfor this system:
nYou need to find a way of connecting the database to users’ browsers. Users should
be able to browse items by category.
nUsers should also be able to select items from the catalog for later purchase.Y ouneed to be able to track which items they have selected.
nAfter users have finished shopping, you need to be able to total their order, taketheir delivery details, and process their payment.
nYou should also build an administration interface to Book-O-Rama’s site so that
the administrator can add and edit books and categories on the site.33 6728 CH27  9/2/04  1:15 PM  Page 579
580 Chapter 27 Building a Shopping Cart
Solution Components
Let’s look at the solutions to meeting each of the requirements listed in the preceding
section.
Building an Online Catalog
You already have a database for the Book-O-Rama catalog. However, it probably needs
some alterations and additions for this application. One of these is to add categories ofbooks, as stated in the requirements.
You also need to add some information to the existing database about shipping
addresses, payment details, and so on.Y ou already know how to build an interface to aMySQL database using PHP , so this part of the solution should be pretty easy.
You should also use transactions while completing customers’ orders.T o do this, you
need to convert your Book-O-Rama tables to use the InnoDB storage engine.Thisprocess is also reasonably straightforward.
Tracking Users’ Purchases While They Shop
There are two basic ways you can track users’ purchases while they shop. One is to put
their selections into the database, and the other is to use a session variable.
Using a session variable to track selections from page to page is easier to write
because it does not require you to constantly query the database for this information. Byusing this approach, you also avoid the situation in which you end up with a lot of junkdata in the database from users who are just browsing and change their minds.
You need, therefore, to design a session variable or set of variables to store a user’s
selections.When a user finishes shopping and pays for her purchases, you will put thisinformation in the database as a record of the transaction.
You can also use this data to give a summary of the current state of the cart in one cor-
ner of the page so that a user knows at any given time how much she is planning to spend.
Implementing a Payment System
In this project, you add the user’s order and take the delivery details but do not actuallyprocess payments. Many, many payment systems are available, and the implementation foreach one is different. For this project, you write a dummy function that can be replaced
with an interface to your chosen system.
Payment systems are generally sold in more specific geographic areas than this book
is.The way the different real-time processing interfaces work is generally similar.Y ouneed to organize a merchant account with a bank for the cards you want to accept.Y ourpayment system provider will specify what parameters you need to pass to its system.
The payment system transmits your data to a bank and returns a success code or one
of many different types of error codes. In exchange for passing on your data, the pay-ment gateway charges you a setup or annual fee, as well as a fee based on the number orvalue of your transactions. Some providers even charge for declined transactions.33 6728 CH27  9/2/04  1:15 PM  Page 580
581 Solution Overview
Your chosen payment system needs information from the customer (such as a credit
card number), identifying information from you (to specify which merchant account isto be credited), and the total amount of the transaction.
You can work out the total of an order from a user’s shopping cart session variable.
You then record the final order details in the database and get rid of the session variable
at that time.
Building an Administration Interface
In addition to the payment system and so on, you also need to build an administrationinterface that lets you add, delete, and edit books and categories from the database.
One common edit that you might make is to alter the price of an item (for example,
for a special offer or sale).This means that when you store a customer’s order, you shouldalso store the price she paid for an item. It would make for an accounting nightmare ifthe only records you had were the items each customer ordered and the current price ofeach one.This also means that if the customer has to return or exchange the item, youwill give her the right amount of credit.
You are not going to build a fulfillment and order tracking interface for this example.
However, you can add one onto this base system to suit your needs.
Solution Overview
Let’s put all the pieces together now.There are two basic views of the system: the userview and the administrator view.After considering the functionality required, we cameup with two system flow designs you can use, one for each view.They are shown inFigures 27.1 and 27.2, respectively.
Figure 27.1 The user view of the Book-O-Rama system lets users 
browse books by category, view book details, add books to 
their cart, and purchase them.Category
List
Category
 Book List
Book
DetailsView
Cart
Process
PaymentCheckout
Get
Payment
DetailsAdd
book
to cart33 6728 CH27  9/2/04  1:15 PM  Page 581
582 Chapter 27 Building a Shopping Cart
Figure 27.2 The administrator view of the Book-O-Rama system allows
insertion, editing, and deletion of books and categories.
Figure 27.1 shows the main links between scripts in the user part of the site.A customer
comes first to the main page, which lists all the categories of books in the site. Fromthere, she can go to a particular category of books, and from there to an individualbook’s details.
You give the user a link to add a particular book to her cart. From the cart, she can
check out of the online store.
Figure 27.2 shows the administration interface, which has more scripts but not much
new code.These scripts let an administrator log in and insert books and categories.
The easiest way to implement editing and deletion of books and categories is to 
show the administrator a slightly different version of the user interface to the site.Theadministrator can still browse categories and books, but instead of having access to theshopping cart, he can go to a particular book or category and edit or delete that book orcategory. By making the same scripts suit both normal and administrator users, you cansave yourself time and effort.
The three main code modules for this application are as follows:
nCatalog
nShopping cart and order processing (We bundled them together because they arestrongly related.)
nAdministration
As in the project from Chapter 26,“Building User Authentication and Personalization,”
you also need to build and use a set of function libraries. For this project, you use a
function API similar to the one in the previous project.Try to confine the parts of thecode that output HTML to a single library to support the principle of separating logicand content and, more importantly, to make the code easier to read and maintain.Admin
Menu
Insert
BookInsert
CategoryChange
PasswordLogoutCategory
Book
ListEdit
Category
Delete
Category
Book
DetailsCategory
Book
List
Edit
Book
Delete
Book33 6728 CH27  9/2/04  1:15 PM  Page 582
583 Solution Overview
You also need to make some minor changes to the Book-O-Rama database for this
project.We renamed the database book_sc (Shopping Cart) to distinguish the shopping
cart database from the one built in Part II.
All the code for this project can be found on the CD-ROM.A summary of the files
in the application is shown in Table 27.1.
Table 27.1 Files in the Shopping Cart Application
Name Module Description
index.php Catalog Main front page of site for users. Shows
the users a list of categories in the system.
show_cat.php Catalog Page that shows the users all the books in
a particular category.
show_book.php Catalog Page that shows the users details of a par-
ticular book.
show_cart.php Shopping cart Page that shows the users the contents of
their shopping carts.Also used to additems to the cart.
checkout.php Shopping cart Page that presents the users with com-
plete order details. Gets shipping details.
purchase.php Shopping cart Page that gets payment details from users.
process.php Shopping cart Script that processes payment details and
adds the order to the database.
login.php Administration Script that allows the administrator to log
in to make changes.
logout.php Administration Script that logs out the admin user.
admin.php Administration Main administration menu.
change_password_form.php Administration Form to let administrators change their
log passwords.
change_password.php Administration Script that changes the administrator
password.
insert_category_form.php Administration Form to let administrators add a new cat-
egory to the database.
insert_category.php Administration Script that inserts a new category into the
database.
insert_book_form.php Administration Form to let administrators add a new
book to the system.
insert_book.php Administration Script that inserts a new book into the
database.
edit_category_form.php Administration Form to let administrators edit a category.
edit_category.php Administration Script that updates a category in the 
database.33 6728 CH27  9/2/04  1:15 PM  Page 583
584 Chapter 27 Building a Shopping Cart
edit_book_form.php Administration Form to let administrators edit a book’s
details.
edit_book.php Administration Script that updates a book in the data-
base.
delete_category.php Administration Script that deletes a category from the
database.
delete_book.php Administration Script that deletes a book from the data-
base.
book_sc_fns.php Functions Collection of include files for this appli-
cation.
admin_fns.php Functions Collection of functions used by adminis-
trative scripts.
book_fns.php Functions Collection of functions for storing and
retrieving book data.
order_fns.php Functions Collection of functions for storing and
retrieving order data.
output_fns.php Functions Collection of functions for outputting
HTML.
data_valid_fns.php Functions Collection of functions for validating
input data.
db_fns.php Functions Collection of functions for connecting to
the book_sc database.
user_auth_fns.php Functions Collection of functions for authenticating
administrative users.
book_sc.sql SQL SQL to set up the book_sc database.
populate.sql SQL SQL to insert some sample data into the
book_sc database.
Now, let’s look at the implementation of each of the modules.
Note
This application contains a lot of code. Much of it implements functionality you have looked at already (par-
ticularly in Chapter 26), such as storing data to and retrieving it from the database, and authenticating theadministrative user. We look briefly at this code but spend most of our time on the shopping cart functions.
For the code in this project to work as written, you need to have magic_quotes_gpc switched on. If
you have not done this, you will need to use addslashes() on data going to the MySQL database. We
used this technique as a useful shortcut.
You can enable magic quotes on a per-directory basis in an .htaccess file with the following directive:
php_value magic_quotes_gpc onTable 27.1 Continued 
Name Module Description33 6728 CH27  9/2/04  1:15 PM  Page 584
585 Implementing the Database
Implementing the Database
As we mentioned earlier, we made some minor modifications to the Book-O-Rama
database presented in Part II.The SQL to create the book_sc database is shown in
Listing 27.1.
Listing 27.1 book_sc.sql —SQL to Create the book_sc Database
create database book_sc;
use book_sc;create table customers
(
customerid int unsigned not null auto_increment primary key,name char(60) not null,address char(80) not null,city char(30) not null,state char(20),zip char(10),country char(20) not null
) type=InnoDB;
create table orders
(
orderid int unsigned not null auto_increment primary key,customerid int unsigned not null references customers(customerid),amount float(6,2),date date not null,order_status char(10),ship_name char(60) not null,ship_address char(80) not null,ship_city char(30) not null,ship_state char(20),ship_zip char(10),ship_country char(20) not null
) type=InnoDB;
create table books
(
isbn char(13) not null primary key,author char(100),title char(100),catid int unsigned,price float(4,2) not null,description varchar(255)
) type=InnoDB;33 6728 CH27  9/2/04  1:15 PM  Page 585
586 Chapter 27 Building a Shopping Cart
create table categories
(
catid int unsigned not null auto_increment primary key,catname char(60) not null
) type=InnoDB;
create table order_items
(
orderid int unsigned not null references orders(orderid),isbn char(13) not null references books(isbn),item_price float(4,2) not null,quantity tinyint unsigned not null,primary key (orderid, isbn)
) type=InnoDB;
create table admin
(
username char(16) not null primary key,password char(40) not null
);
grant select, insert, update, delete
on book_sc.*
to book_sc@localhost identified by ‘password ’;
Although nothing was wrong with the original Book-O-Rama interface, you must
address a few other requirements now that you are going to make it available online.
The changes made to the original database are as follows:
nThe addition of more address fields for customers. Having additional fields is moreimportant now that you are building a more realistic application.
nThe addition of a shipping address to an order.A customer’s contact address mightnot be the same as the shipping address, particularly if she is using the site to buy agift.
nThe addition of a categories table and a catid to books table. Sorting books
into categories makes the site easier to browse.
nThe addition of item_price to the order_items table to recognize the fact that
an item’s price might change.Y ou want to know how much the item cost whenthe customer ordered it.
nThe addition of an admin table to store administrator login and password details.
nThe removal of the reviews table.Y ou could add reviews as an extension to thisproject. Instead, each book has a description field containing a brief blurb aboutthe book.Listing 27.1 Continued 33 6728 CH27  9/2/04  1:15 PM  Page 586
587 Implementing the Online Catalog
nThe change in storage engines to InnoDB.Y ou do this so that you can use 
foreign keys and also so you can use transactions when entering customer orderinformation.
To set up this database on your system, run the 
book_sc.sql script through MySQL as
the root user, as follows:
mysql -u root -p < book_sc.sql
(Y ou need to supply your root password.)
Beforehand, you should change the password for the book_sc user to something bet-
ter than ‘password ’.Note that if you change the password in book_sc.sql ,you will
also need to change it in db_fns.php .(You’ll see where shortly.)
We also included a file of sample data called populate.sql .You can put the sample
data into the database by running it through MySQL in this same way.
Implementing the Online Catalog
Three catalog scripts are used in this application: the main page, category page, and bookdetails page.
The front page of the site is produced by the script called 
index.php .The output of
this script is shown in Figure 27.3.
Figure 27.3 The front page of the site lists the categories of books available
for purchase.
33 6728 CH27  9/2/04  1:15 PM  Page 587
588 Chapter 27 Building a Shopping Cart
Notice that, in addition to the list of categories on the site, it has a link to the shopping
cart in the top-right corner of the screen and some summary information about what’sin the cart.These elements appear on every page while a user browses and shops.
If a user clicks one of the categories, she’ll be taken to the category page, produced
by the script 
show_cat.php .The category page for the Internet books section is shown
in Figure 27.4.
Figure 27.4 Each book in the category is listed with a photo.
All the books in the Internet category are listed as links. If a user clicks one of these
links, she will be taken to the book details page.The book details page for one book isshown in Figure 27.5.
On this page, as well as the View Cart link, an Add to Cart link enables the user to
select an item for purchase.We return to this feature when we look at how to build theshopping cart later.
Let’s look at each of these three scripts.
33 6728 CH27  9/2/04  1:15 PM  Page 588
589 Implementing the Online Catalog
Figure 27.5 Each book has a details page that shows more information,
including a long description.
Listing Categories
The first script used in this project, index.php ,lists all the categories in the database. It is
shown in Listing 27.2.
Listing 27.2 index.php —Script to Produce the Front Page of the Site
<?php
require ( ‘book_sc_fns.php ’);
// The shopping cart needs sessions, so start onesession_start();do_html_header( ‘Welcome to Book-O-Rama ’);
echo ‘<p>Please choose a category:</p> ’;
33 6728 CH27  9/2/04  1:15 PM  Page 589
590 Chapter 27 Building a Shopping Cart
// get categories out of database
$cat_array = get_categories();
// display as links to cat pages
display_categories($cat_array);
// if logged in as admin, show add, delete, edit cat links
if(isset($_SESSION[ ‘admin_user ’]))
{
display_button( ‘admin.php ’, ‘admin-menu ’, ‘Admin Menu ’);
}do_html_footer();
?>
This script begins by including book_sc_fns.php ,the file that includes all the function
libraries for this application.
After that, you must begin a session.This is required for the shopping cart functionality
to work. Every page in the site will use the session.
The index.php script also contains some calls to HTML output functions such as
do_html_header() and do_html_footer() (both contained in output_fns.php ). It also
contains some code that checks whether the user is logged in as an administrator andgives her some different navigation options if she is; we return to this feature in the sec-
tion on the administration functions.
The most important part of this script is
// get categories out of database
$cat_array = get_categories();
// display as links to cat pages
display_categories($cat_array);
The functions get_categories() and display_categories() are in the 
function libraries book_fns.php and output_fns.php ,respectively.The function
get_categories() returns an array of the categories in the system, which you then pass
to display_categories() .Let’s look at the code for get_categories() ,shown in
Listing 27.3.
Listing 27.3 get_categories() Function from book_fns.php —Function That
Retrieves a Category List from the Database
function get_categories()
{
// query database for a list of categories$conn = db_connect();Listing 27.2 Continued 33 6728 CH27  9/2/04  1:15 PM  Page 590
591 Implementing the Online Catalog
$query = ‘select catid, catname
from categories ’;
$result = @$conn->query($query);if (!$result)
return false;
$num_cats = @$result->num_rows;if ($num_cats ==0)
return false;
$result = db_result_to_array($result);return $result;
}
As you can see, the get_categories() function connects to the database and retrieves a
list of all the category IDs and names.We wrote and used a function called
db_result_to_array() ,located in db_fns.php .This function is shown in Listing 27.4.
It takes a MySQL result identifier and returns a numerically indexed array of rows,where each row is an associative array.
Listing 27.4 db_result_to_array() Function from db_fns.php —Function That
Converts a MySQL Result Identifier into an Array of Results
function db_result_to_array($result)
{
$res_array = array();
for ($count=0; $row = $result->fetch_assoc(); $count++)
$res_array[$count] = $row;
return $res_array;
}
In this case, you return this array back all the way to index.php ,where you pass it to the
display_categories() function from output_fns.php .This function displays each cat-
egory as a link to the page containing the books in that category.The code for this func-tion is shown in Listing 27.5.
Listing 27.5 display_categories() Function from output_fns.php —Function
That Displays an Array of Categories as a List of Links to Those Categories
function display_categories($cat_array)
{
if (!is_array($cat_array)){
echo ‘No categories currently available<br /> ’;
return;
}Listing 27.3 Continued 33 6728 CH27  9/2/04  1:15 PM  Page 591
592 Chapter 27 Building a Shopping Cart
echo ‘<ul>’;
foreach ($cat_array as $row){
$url = ‘show_cat.php?catid= ’.($row[‘catid’]);
$title = $row[ ‘catname’];
echo ‘<li>’;
do_html_url($url, $title);echo ‘</li>’;
}echo ‘</ul>’;
echo ‘<hr />’;
}
The display_categories() function converts each category from the database into a
link. Each link goes to the next script— show_cat.php —but each has a different param-
eter, the category ID or catid .(This unique number, generated by MySQL, is used to
identify the category.)
This parameter to the next script determines which category you end up looking at.
Listing Books in a Category
The process for listing books in a category is similar.The script that does this, called
show_cat.php ,is shown in Listing 27.6.
Listing 27.6 show_cat.php —Script That Shows the Books in a Particular Category
<?php
require ( ‘book_sc_fns.php ’);
// The shopping cart needs sessions, so start onesession_start();
$catid = $_GET[ ‘catid’];
$name = get_category_name($catid);
do_html_header($name);// get the book info out from db
$book_array = get_books($catid);
display_books($book_array);
// if logged in as admin, show add, delete book links
if(isset($_SESSION[ ‘admin_user ’]))
{Listing 27.5 Continued 33 6728 CH27  9/2/04  1:15 PM  Page 592
593 Implementing the Online Catalog
display_button( ‘index.php ’, ‘continue ’, ‘Continue Shopping ’);
display_button( ‘admin.php ’, ‘admin-menu ’, ‘Admin Menu ’);
display_button( “edit_category_form.php?catid=$catid ”,
‘edit-category ’, ‘Edit Category ’);
}else
display_button( ‘index.php ’, ‘continue-shopping ’, ‘Continue Shopping ’);
do_html_footer();
?>
This script is similar in structure to the index page, except that you retrieve books
instead of categories.
You start with session_start() as usual and then convert the category ID you have
been passed into a category name by using the get_category_name() function as follows:
$name = get_category_name($catid);
This function, shown in Listing 27.7, looks up the category name in the database.
Listing 27.7 get_category_name() Function from book_fns.php —Function That
Converts a Category ID to a Category Name
function get_category_name($catid)
{
// query database for the name for a category id$catid = intval($catid);$conn = db_connect();$query = “select catname
from categorieswhere catid = $catid ”;
$result = @$conn->query($query);if (!$result)
return false;
$num_cats = @$result->num_rows;if ($num_cats ==0)
return false;
$row = $result->fetch_object();return $row->catname;
}
After you have retrieved the category name, you can render an HTML header and pro-
ceed to retrieve and list the books from the database that fall into your chosen category,as follows:
$book_array = get_books($catid);
display_books($book_array);Listing 27.6 Continued 33 6728 CH27  9/2/04  1:15 PM  Page 593
594 Chapter 27 Building a Shopping Cart
The functions get_books() and display_books() are extremely similar to the
get_categories() and display_categories() functions, so we do not go into them
here.The only difference is that you retrieve information from the books table rather
than the categories table.
The display_books() function provides a link to each book in the category via the
show_book.php script.Again, each link is suffixed with a parameter.This time around, it’s
the ISBN for the book in question.
At the bottom of the show_cat.php script, there is some code to display additional
functions if an administrator is logged in.We look at these functions in the section onadministrative functions.
Showing Book Details
The show_book.php script takes an ISBN as a parameter and retrieves and displays the
details of that book.The code for this script is shown in Listing 27.8.
Listing 27.8 show_book.php — Script That Shows the Details of a Particular Book
<?php
require ( ‘book_sc_fns.php ’);
// The shopping cart needs sessions, so start onesession_start();
$isbn = $_GET[ ‘isbn’];
// get this book out of database
$book = get_book_details($isbn);do_html_header($book[ ‘title’]);
display_book_details($book);
// set url for “continue button ”
$target = ‘index.php ’;
if($book[ ‘catid’])
{
$target = ‘show_cat.php?catid= ’.$book[‘catid’];
}// if logged in as admin, show edit book linksif( check_admin_user() ){
display_button( “edit_book_form.php?isbn=$isbn ”, ‘edit-item ’, ‘Edit Item ’);
display_button( ‘admin.php ’, ‘admin-menu ’, ‘Admin Menu ’);
display_button($target, ‘continue ’, ‘Continue ’);
}else{33 6728 CH27  9/2/04  1:15 PM  Page 594
595 Implementing the Shopping Cart
display_button( “show_cart.php?new=$isbn ”, ‘add-to-cart ’, ‘Add ‘
.$book[‘title’].’To My Shopping Cart ’);
display_button($target, ‘continue-shopping ’, ‘Continue Shopping ’);
}
do_html_footer();
?>
Again with this script, you do similar things as in the previous two pages.Y ou begin by
starting the session and then use
$book = get_book_details($isbn);
to get the book information out of the database. Next, you use
display_book_details($book);
to output the data in HTML.
Note that display_book_details() looks for an image file for the book as
images/$isbn.jpg.If this file does not exist, no image will be displayed.
The remainder of the show_book.php script sets up navigation.A normal user has the
choices Continue Shopping, which takes her back to the category page, and Add toCart, which adds the book to her shopping cart. If a user is logged in as an administra-tor, she will get some different options, which we look at in the section on administra-tion.
We’ve completed the basics of the catalog system. Now let’s look at the code for the
shopping cart functionality.
Implementing the Shopping Cart
The shopping cart functionality all revolves around a session variable called cart.It is an
associative array that has ISBNs as keys and quantities as values. For example, if you add asingle copy of this book to your shopping cart, the array would contain
0672317842 => 1
That is, the array would contain one copy of the book with the ISBN 0672317842.When you add items to the cart, they are added to the array.When you view the cart,you use the 
cart array to look up the full details of the items in the database.
You also use two other session variables to control the display in the header that
shows T otal Items and T otal Price.These variables are called items and total_price ,
respectively.Listing 27.8 Continued 33 6728 CH27  9/2/04  1:15 PM  Page 595
596 Chapter 27 Building a Shopping Cart
Using the show_cart.php Script
Let’s examine how the shopping cart code is implemented by looking at the
show_cart.php script.This script displays the page you will visit if you click on any
View Cart or Add to Cart links. If you call show_cart.php without any parameters, you
will get to see the contents of it. If you call it with an ISBN as a parameter, the itemwith that ISBN will be added to the cart.
To understand fully how this script operates, look first at Figure 27.6.
Figure 27.6 The show_cart.php script with no parameters just shows the
contents of the cart.
In this case, we clicked the View Cart link when our cart was empty; that is, we had not
yet selected any items to purchase.
Figure 27.7 shows the cart a bit further down the track after we selected two books
to buy. In this case, we got to this page by clicking the Add to Cart link on the
show_book.php page for this book, PHP and MySQL Web Development .If you look
closely at the URL bar, you will see that we called the script with a parameter this time.The parameter is called 
newand has the value 0672317842 —that is, the ISBN for the
book just added to the cart.
From this page, you can see that you have two other options.The Save Changes but-
ton can be used to change the quantity of items in the cart.T o do this, the user can alterthe quantities directly and click Save Changes.This is actually a submit button that takesthe user back to the 
show_cart.php script again to update the cart.
33 6728 CH27  9/2/04  1:15 PM  Page 596
597 Implementing the Shopping Cart
Figure 27.7 The show_cart.php script with the new parameter adds a
new item to the cart.
In addition, the user can click the Go to Checkout button when she is ready to leave.
We come back to that shortly.
For now, let’s look at the code for the show_cart.php script.This code is shown in
Listing 27.9.
Listing 27.9 show_cart.php — Script That Controls the Shopping Cart
<?php
require ( ‘book_sc_fns.php ’);
// The shopping cart needs sessions, so start onesession_start();
@ $new = $_GET[ ‘new’];
if($new)
{
//new item selectedif(!isset($_SESSION[ ‘cart’]))
{
$_SESSION[ ‘cart’] = array();
$_SESSION[ ‘items’] = 0;
$_SESSION[ ‘total_price ’] =’0.00’;
}
33 6728 CH27  9/2/04  1:15 PM  Page 597
598 Chapter 27 Building a Shopping Cart
if(isset($_SESSION[ ‘cart’][$new]))
$_SESSION[ ‘cart’][$new]++;
else
$_SESSION[ ‘cart’][$new] = 1;
$_SESSION[ ‘total_price ’] = calculate_price($_SESSION[ ‘cart’]);
$_SESSION[ ‘items’] = calculate_items($_SESSION[ ‘cart’]);
}
if(isset($_POST[ ‘save’]))
{
foreach ($_SESSION[ ‘cart’] as $isbn => $qty)
{
if($_POST[$isbn]== ’0’)
unset($_SESSION[ ‘cart’][$isbn]);
else
$_SESSION[ ‘cart’][$isbn] = $_POST[$isbn];
}$_SESSION[ ‘total_price ’] = calculate_price($_SESSION[ ‘cart’]);
$_SESSION[ ‘items’] = calculate_items($_SESSION[ ‘cart’]);
}
do_html_header( ‘Your shopping cart ’) ;
if($_SESSION[ ‘cart’]&&array_count_values($_SESSION[ ‘cart’]))
display_cart($_SESSION[ ‘cart’]);
else{
echo ‘<p>There are no items in your cart</p> ’;
echo ‘<hr />’;
}$target = ‘index.php ’;
// if we have just added an item to the cart
// continue shopping in that categoryif($new){
$details =  get_book_details($new);if($details[ ‘catid’])
$target = ‘show_cat.php?catid= ’.$details[ ‘catid’];
}Listing 27.9 Continued 33 6728 CH27  9/2/04  1:15 PM  Page 598
599 Implementing the Shopping Cart
display_button($target, ‘continue-shopping ’, ‘Continue Shopping ’);
// use this if SSL is set up
// $path = $_SERVER[ ‘PHP_SELF ’];
// $server = $_SERVER[ ‘SERVER_NAME ’];
// $path = str_replace( ‘show_cart.php ’, ‘’, $path);
// display_button( ‘https:// ’.$server.$path. ’checkout.php ’,
//                  ‘go-to-checkout ’, ‘Go To Checkout ’);
// if no SSL use below code
display_button( ‘checkout.php ’, ‘go-to-checkout ’, ‘Go To Checkout ’);
do_html_footer();
?>
This script has three main parts: displaying the cart, adding items to the cart, and saving
changes to the cart.We cover these parts in the next three sections.
Viewing the Cart
No matter which page you come from, you display the contents of the cart. In the basecase, when a user has just clicked View Cart, the only part of the code that will be exe-cuted follows:
if($_SESSION[ ‘cart’]&&array_count_values($_SESSION[ ‘cart’]))
display_cart($_SESSION[ ‘cart’]);
else{
echo ‘<p>There are no items in your cart</p> ’;
echo ‘<hr />’;
}
As you can see from this code, if you have a cart with some contents, you will call the
display_cart() function. If the cart is empty, you’ll give the user a message to that
effect.
The display_cart() function just prints the contents of the cart as a readable
HTML format, as you can see in Figures 27.6 and 27.7.The code for this function canbe found in 
output_fns.php ,which is included here as Listing 27.10.Although it is a
display function, it is reasonably complex, so we chose to include it here.Listing 27.9 Continued 33 6728 CH27  9/2/04  1:15 PM  Page 599
600 Chapter 27 Building a Shopping Cart
Listing 27.10 display_cart() Function from output_fns.php —Function That
Formats and Prints the Contents of the Shopping Cart
function display_cart($cart, $change = true, $images = 1)
{
// display items in shopping cart// optionally allow changes (true or false)// optionally include images (1 - yes, 0 - no)
echo ‘<table border = “0”width = “100%”cellspacing = “0”>
<form action = “show_cart.php ”method = “post”>
<tr><th colspan = ‘. (1+$images) . ’bgcolor= ”#cccccc”>Item</th>
<th bgcolor= ”#cccccc”>Price</th><th bgcolor= ”#cccccc”>Quantity</th>
<th bgcolor= ”#cccccc”>Total</th></tr> ’;
//display each item as a table row
foreach ($cart as $isbn => $qty){
$book = get_book_details($isbn);echo ‘<tr>’;
if($images ==true){
echo ‘<td align = left> ’;
if (file_exists( “images/$isbn.jpg ”))
{
$size = GetImageSize( ‘images/’.$isbn.’.jpg’);  
if($size[0]>0 && $size[1]>0){
echo ‘<img src= ”images/’.$isbn.’.jpg”border=”0”‘;
echo ‘width = ‘. $size[0]/3 . ’height = ‘.$size[1]/3 . ‘/>’;
}
}else
echo ‘&nbsp;’;
echo ‘</td>’;
}echo ‘<td align = “left”>’;
echo ‘<a href = “show_book.php?isbn= ’.$isbn.’”>’
.$book[‘title’].’</a> by ‘.$book[‘author’];
echo ‘</td><td align = “center”>$’.number_format($book[ ‘price’], 2);
echo ‘</td><td align = “center”>’;
// if we allow changes, quantities are in text boxesif ($change == true)
echo “<input type = ‘text’name = \ ”$isbn\”value = \ ”$qty\”
size = \ ”3\”/>”;
else33 6728 CH27  9/2/04  1:15 PM  Page 600
601 Implementing the Shopping Cart
echo $qty;
echo ‘</td><td align = “center”>$’.number_format($book[ ‘price’]*$qty,2)
.”</td></tr>\n ”;
}// display total rowecho “<tr>
<th colspan = “. (2+$images) . ”bgcolor=\ ”#cccccc\ ”>&nbsp;</td>
<th align = \ ”center\”bgcolor=\ ”#cccccc\ ”> 
“.$_SESSION[ ‘items’].”
</th><th align = \ ”center\”bgcolor=\ ”#cccccc\ ”>
\$”.number_format($_SESSION[ ‘total_price ’], 2).
‘</th>
</tr>’;
// display save change buttonif($change == true){
echo ‘<tr>
<td colspan = ‘. (2+$images) . ’>&nbsp;</td>
<td align = “center”>
<input type = “hidden”name = “save”value = “true”/>  
<input type = “image”src = “images/save-changes.gif ”
border = “0”alt = “Save Changes ”/>
</td><td>&nbsp;</td>
</tr>’;
}echo ‘</form></table> ’;
}
The basic flow of this function is as follows:
1. Loop through each item in the cart and pass the ISBN of each item to
get_book_details() so that you can summarize the details of each book.
2. Provide an image for each book, if one exists. Use the HTML image height and
width tags to resize the image a little smaller here.This means that the images willbe a little distorted, but they are small enough that this isn’t much of a problem. (Ifthe distortion bothers you, you can always resize the images using the gd librarydiscussed in Chapter 21,“Generating Images,” or manually generate different-sizeimages for each product.)
3. Make each cart entry a link to the appropriate book—that is, to 
show_book.php
with the ISBN as a parameter.Listing 27.10 Continued 33 6728 CH27  9/2/04  1:15 PM  Page 601
602 Chapter 27 Building a Shopping Cart
4. If you are calling the function with the change parameter set to true (or not set—
it defaults to true), show the boxes with the quantities in them as a form with the
Save Changes button at the end. (When you reuse this function after checkingout, you don’t want the user to be able to change her order.)
Nothing is terribly complicated in this function, but it does quite a lot of work, so you
might find reading it through carefully to be useful.
Adding Items to the Cart
If a user has come to the show_cart.php page by clicking an Add to Cart button, you
have to do some work before you can show her the contents of her cart. Specifically, youneed to add the appropriate item to the cart, as follows.
First, if the user has not put any items in her cart before, she will not have a cart, so
you need to create one:
if(!isset($_SESSION[ ‘cart’]))
{
$_SESSION[ ‘cart’] = array();
$_SESSION[ ‘items’] = 0;
$_SESSION[ ‘total_price ’] =’0.00’;
}
To begin with, the cart is empty.
Second, after you know that a cart is set up, you can add the item to it:
if(isset($_SESSION[ ‘cart’][$new]))
$_SESSION[ ‘cart’][$new]++;
else
$_SESSION[ ‘cart’][$new] = 1;
Here, you check whether the item is already in the cart. If it is, you increment the quan-
tity of that item in the cart by one. If not, you add the new item to the cart.
Third, you need to work out the total price and number of items in the cart. For this,
you use the calculate_price() and calculate_items() functions, as follows:
$_SESSION[ ‘total_price ’] = calculate_price($_SESSION[ ‘cart’]);
$_SESSION[ ‘items’] = calculate_items($_SESSION[ ‘cart’]);
These functions are located in the book_fns.php function library.The code for them is
shown in Listings 27.11 and 27.12, respectively.
Listing 27.11 calculate_price() Function from book_fns.php — Function That
Calculates and Returns the Total Price of the Contents of the Shopping Cart
function calculate_price($cart)
{33 6728 CH27  9/2/04  1:15 PM  Page 602
603 Implementing the Shopping Cart
// sum total price for all items in shopping cart
$price = 0.0;if(is_array($cart)){
$conn = db_connect();foreach($cart as $isbn => $qty){
$query = “select price from books where isbn= ’$isbn’”;
$result = $conn->query($query);if ($result){
$item = $result->fetch_object();$item_price = $item->price;$price +=$item_price*$qty;
}
}
}return $price;
}
As you can see, the calculate_price() function works by looking up the price of each
item in the cart in the database.This process is somewhat slow, so to avoid doing thismore often than you need to, you store the price (and the total number of items, as well)as session variables and recalculate only when the cart changes.
Listing 27.12 calculate_items() Function from book_fns.php —Function That
Calculates and Returns the Total Number of Items in the Shopping Cart
function calculate_items($cart)
{
// sum total items in shopping cart$items = 0;if(is_array($cart)){
$items=array_sum($cart);
}return $items;
}
The calculate_items() function is simpler; it just goes through the cart and adds the
quantities of each item to get the total number of items using the array_sum() func-
tion. If there’s not yet an array (if the cart is empty), it just returns 0 (zero).Listing 27.11 Continued 33 6728 CH27  9/2/04  1:15 PM  Page 603
604 Chapter 27 Building a Shopping Cart
Saving the Updated Cart
If the user comes to the show_cart.php script by clicking the Save Changes button, the
process is a little different. In this case, the user has arrived via a form submission. If youlook closely at the code, you will see that the Save Changes button is the submit buttonfor a form.This form contains the hidden variable 
save.If this variable is set, you know
that you have come to this script from the Save Changes button.This means that theuser has presumably edited the quantity values in the cart, and you need to update them.
If you look back at the text boxes in the Save Changes form part of the script, you
will see that they are named after the ISBN of the item that they represent, as follows:
echo ‘<input type= ”text”name=”$isbn”value=”$qty”size=”3”>’;
Now look at the part of the script that saves the changes:
if(isset($_POST[ ‘save’]))
{
foreach ($_SESSION[ ‘cart’] as $isbn => $qty)
{
if($_POST[$isbn]== ’0’)
unset($_SESSION[ ‘cart’][$isbn]);
else
$_SESSION[ ‘cart’][$isbn] = $_POST[$isbn];
}$_SESSION[ ‘total_price ’] = calculate_price($_SESSION[ ‘cart’]);
$_SESSION[ ‘items’] = calculate_items($_SESSION[ ‘cart’]);
}
Here, you work your way through the shopping cart, and for each isbn in the cart, you
check the POST variable with that name.These variables are the form fields from the
Save Changes form.
If any of the fields are set to zero, you remove that item from the shopping cart alto-
gether, using unset() .Otherwise, you update the cart to match the form fields, as fol-
lows:
if($_POST[$isbn]== ’0’)
unset($_SESSION[ ‘cart’][$isbn]);
else
$_SESSION[ ‘cart’][$isbn] = $_POST[$isbn];
After these updates, you again use calculate_price() and calculate_items() to
work out the new values of the total_price and items session variables.
Printing a Header Bar Summary
In the header bar of each page in the site, a summary of what’s in the shopping cart is
presented.This summary is obtained by printing out the values of the session variables
total_price and items .This is done in the do_html_header() function.33 6728 CH27  9/2/04  1:15 PM  Page 604
605 Implementing the Shopping Cart
These variables are registered when the user first visits the show_cart.php page.Y ou
also need some logic to deal with the cases in which a user has not yet visited that page.This logic is also included in the d
o_html_heaader() function:
if(!$_SESSION[ ‘items’]) $_SESSION[ ‘items’] = ‘0’;
if(!$_SESSION[ ‘total_price ’]) $_SESSION[ ‘total_price ’] = ‘0.00’;
Checking Out
When the user clicks the Go to Checkout button from the shopping cart, this action
activates the checkout.php script.The checkout page and the pages behind it should be
accessed via the Secure Sockets Layer (SSL), but the sample application does not forceyou to do this. (T o read more about SSL, review Chapter 17,“Implementing Secure
Transactions with PHP and MySQL.”)
The checkout page is shown in Figure 27.8.
Figure 27.8 The checkout.php script gets the customer’s details.
This script requires the customer to enter her address (and shipping address if it is differ-
ent). It is quite a simple script, which you can see by looking at the code in Listing 27.13.
Listing 27.13 checkout.php — Script That Gets the Customer Details
<?php
//include our function setrequire ( ‘book_sc_fns.php ’);
33 6728 CH27  9/2/04  1:15 PM  Page 605
606 Chapter 27 Building a Shopping Cart
// The shopping cart needs sessions, so start one
session_start();
do_html_header( ‘Checkout ’);
if($_SESSION[ ‘cart’]&&count($_SESSION[ ‘cart’]))
{
display_cart($_SESSION[ ‘cart’], false, 0);
display_checkout_form();
}else
echo ‘<p>There are no items in your cart</p> ’;
display_button( ‘show_cart.php ’, ‘continue-shopping ’, ‘Continue Shopping ’);
do_html_footer();
?>
There are no great surprises in this script. If the cart is empty, the script will notify the
customer; otherwise, it will display the form shown in Figure 27.8.
If a user continues by clicking the Purchase button at the bottom of the form, she will
be taken to the purchase.php script.Y ou can see the output of this script in Figure 27.9.
Figure 27.9 The purchase.php script calculates shipping and the final
order total and gets the customer’s payment details.
Listing 27.13 Continued 33 6728 CH27  9/2/04  1:15 PM  Page 606
607 Implementing the Shopping Cart
The code for the purchase.php script is slightly more complicated than the code for
checkout.php .It is shown in Listing 27.14.
Listing 27.14 purchase.php —Script That Stores the Order Details in the Database
and Gets the Payment Details
<?php
include ( ‘book_sc_fns.php ’);
// The shopping cart needs sessions, so start onesession_start();
do_html_header( “Checkout ”);
// create short variable names$name = $_POST[ ‘name’];
$address = $_POST[ ‘address’];
$city = $_POST[ ‘city’];
$zip = $_POST[ ‘zip’];
$country = $_POST[ ‘country’];
// if filled out
if($_SESSION[ ‘cart’]&&$name&&$address&&$city&&$zip&&$country)
{
// able to insert into databaseif( insert_order($_POST)!=false ){
//display cart, not allowing changes and without picturesdisplay_cart($_SESSION[ ‘cart’], false, 0);
display_shipping(calculate_shipping_cost());//get credit card details
display_card_form($name);
display_button( ‘show_cart.php ’, ‘continue-shopping ’, ‘Continue Shopping ’);
}else{
echo ‘Could not store data, please try again. ’;
display_button( ‘checkout.php ’, ‘back’, ‘Back’);
}
}else{
echo ‘You did not fill in all the fields, please try again.<hr /> ’;
display_button( ‘checkout.php ’, ‘back’, ‘Back’);
}33 6728 CH27  9/2/04  1:15 PM  Page 607
608 Chapter 27 Building a Shopping Cart
do_html_footer();
?>
The logic here is straightforward:Y ou check that the user filled out the form and inserted
details into the database using a function called insert_order() .This simple function
pops the customer details into the database.The code for it is shown in Listing 27.15.
Listing 27.15 insert_order() Function from order_fns.php —Function That
Inserts All the Details of the Customer’s Order into the Database
function insert_order($order_details)
{
// extract order_details out as variablesextract($order_details);
// set shipping address same as address
if(!$ship_name&&!$ship_address&&!$ship_city&&!$ship_state&&
!$ship_zip&&!$ship_country)
{
$ship_name = $name;$ship_address = $address;$ship_city = $city;$ship_state = $state;$ship_zip = $zip;$ship_country = $country;
}
$conn = db_connect();// we want to insert the order as a transaction 
// start one by turning off autocommit$conn->autocommit(FALSE);
// insert customer address
$query = “select customerid from customers where  
name = ‘$name’and address = ‘$address ’
and city = ‘$city’and state = ‘$state’
and zip = ‘$zip’and country = ‘$country ’”;
$result = $conn->query($query);if($result->num_rows>0){
$customer = $result->fetch_object();$customerid = $customer->customerid;
}elseListing 27.14 Continued 33 6728 CH27  9/2/04  1:15 PM  Page 608
609 Implementing the Shopping Cart
{
$query = “insert into customers values
(‘’, ‘$name’,’$address ’,’$city’,’$state’,’$zip’,’$country ’)”;
$result = $conn->query($query);if (!$result)
return false;
}$customerid = $conn->insert_id;
$date = date( ‘Y-m-d’);
$query = “insert into orders values
(‘’, $customerid, “.$_SESSION[ ‘total_price ’].”, ‘$date’, 
‘PARTIAL’, ‘$ship_name ’,
‘$ship_address ’,’$ship_city ’,’$ship_state ’,’$ship_zip ’,
‘$ship_country ’)”;
$result = $conn->query($query) ;
if (!$result)
return false;
$query = “select orderid from orders where 
customerid = $customerid and amount > “.$_SESSION[ ‘total_price ’].”-.001 and
amount < “.$_SESSION[ ‘total_price ’].”+.001 and
date = ‘$date’and
order_status = ‘PARTIAL’and
ship_name = ‘$ship_name ’and
ship_address = ‘$ship_address ’and
ship_city = ‘$ship_city ’and
ship_state = ‘$ship_state ’and
ship_zip = ‘$ship_zip ’and
ship_country = ‘$ship_country ’”;
$result = $conn->query($query);if($result->num_rows>0){
$order = $result->fetch_object();$orderid = $order->orderid;
}else
return false; 
// insert each book
foreach($_SESSION[ ‘cart’] as $isbn => $quantity)
{Listing 27.15 Continued 33 6728 CH27  9/2/04  1:15 PM  Page 609
610 Chapter 27 Building a Shopping Cart
$detail = get_book_details($isbn);
$query = “delete from order_items where  
orderid = ‘$orderid ’and isbn =  ‘$isbn’”;
$result = $conn->query($query);$query = “insert into order_items values
(‘$orderid ’, ‘$isbn’, “.$detail[ ‘price’].”, $quantity) ”;
$result = $conn->query($query);if(!$result)
return false;
}
// end transaction
$conn->commit();$conn->autocommit(TRUE);
return $orderid;
}
The insert_order() function is rather long because you need to insert the customer’s
details, order details, and details of each book she wants to buy.
You will note that the different parts of the insert are enclosed in a transaction, begin-
ning with
$conn->autocommit(FALSE);
and ending with
$conn->commit();
$conn->autocommit(TRUE);
This is the only place in this application where you need to use a transaction. How do
you avoid having to do it elsewhere? Look at the code in the db_connect() function:
function db_connect()
{
$result = new mysqli( ‘localhost ’, ‘book_sc’, ‘password ’, ‘book_sc’);
if (!$result)
return false;
$result->autocommit(TRUE);return $result;
}
Obviously, this is slightly different from the code used for this function in other 
chapters.After creating the connection to MySQL, you should turn on autocommit mode.Listing 27.15 Continued 33 6728 CH27  9/2/04  1:15 PM  Page 610
611 Implementing Payment
This ensures that each SQL statement is automatically committed, as we have previously
discussed.When you actually want to use a multistatement transaction, you turn off auto-commit, perform a series of inserts, commit the data, and then re-enable autocommitmode.
You then work out the shipping costs to the customer’s address and tell her how
much it will be with the following line of code:
display_shipping(calculate_shipping_cost());
The code used here for calculate_shipping_cost() always returns $20.When you
actually set up a shopping site, you must choose a delivery method, find out how muchshipping costs for different destinations, and calculate those costs accordingly.
You then display a form for the user to fill in her credit card details by using the 
display_card_form() function from the output_fns.php library.
Implementing Payment
When the user clicks the Purchase button, you process her payment details using the
process.php script.Y ou can see the results of a successful payment in Figure 27.10.
Figure 27.10 This transaction was successful, and the items will now be
shipped.
The code for process.php can be found in Listing 27.16.
33 6728 CH27  9/2/04  1:15 PM  Page 611
612 Chapter 27 Building a Shopping Cart
Listing 27.16 process.php — Script That Processes the Customer’s Payment and Tells
Her the Result
<?php
require ( ‘book_sc_fns.php ’);
// The shopping cart needs sessions, so start onesession_start();
do_html_header( ‘Checkout ’);
$card_type = $_POST[ ‘card_type ’];
$card_number = $_POST[ ‘card_number ’];
$card_month = $_POST[ ‘card_month ’];
$card_year = $_POST[ ‘card_year ’];
$card_name = $_POST[ ‘card_name ’];
if($_SESSION[ ‘cart’]&&$card_type&&$card_number&&
$card_month&&$card_year&&$card_name )
{
//display cart, not allowing changes and without pictures display_cart($_SESSION[ ‘cart’], false, 0);
display_shipping(calculate_shipping_cost());  if(process_card($_POST))
{
//empty shopping cartsession_destroy();echo ‘Thank you for shopping with us.  Your order has been placed. ’;
display_button( ‘index.php ’, ‘continue-shopping ’, ‘Continue Shopping ’);
}else{echo ‘Could not process your card. ‘;
echo ‘Please contact the card issuer or try again. ’;
display_button( ‘purchase.php ’, ‘back’, ‘Back’);
}
}else{
echo ‘You did not fill in all the fields, please try again.<hr /> ’;
display_button( ‘purchase.php ’, ‘back’, ‘Back’);
} 33 6728 CH27  9/2/04  1:15 PM  Page 612
613 Implementing an Administration Interface
do_html_footer();
?>
You process the user’s card and, if all is successful, destroy her session.
The card processing function as it is written simply returns true.If you were actually
implementing it, you would need to perform some validation (checking that the expirydate was valid and the card number well formed) and then process the actual payment.
When you set up a live site, you need to make a decision about what transaction
clearing mechanism you want to use.Y ou can
nSign up with a transaction clearing provider.There are many, many alternativeshere depending on the area you live in. Some of them offer real-time clearing, andothers don’t.Whether you need live clearing depends on the service you are offer-ing. If you are providing a service online, you will most likely want it; if you areshipping goods, it’s less crucial. Either way, these providers relieve you of theresponsibility of storing credit card numbers.
nSend a credit card number to yourself via encrypted email, for example, by 
using Pretty Good Privacy (PGP) or Gnu Privacy Guard (GPG), as covered inChapter 17.When you receive and decrypt the email, you can process these trans-actions manually.
nStore the credit card numbers in your database.We do not recommend this optionunless you really, seriously know what you’re doing with system security. ReadChapter 17 for more details about why this is a bad idea.
That’s it for the shopping cart and payment modules.
Implementing an Administration Interface
The administration interface we implemented is very simple.We just built a Web inter-
face to the database with some front-end authentication.This interface uses much of the
same code as used in Chapter 26.We included it here for completeness, but with littlediscussion.
The administration interface requires a user to log in via the 
login.php file, which
then takes him to the administration menu, admin.php .The login page is shown in
Figure 27.11. (We omitted the login.php file here for brevity; it’s almost exactly the
same as the one in Chapter 26. If you want to look at it, it’s on the CD-ROM.) Theadministration menu is shown in Figure 27.12.Listing 27.16 Continued 33 6728 CH27  9/2/04  1:15 PM  Page 613
614 Chapter 27 Building a Shopping Cart
Figure 27.12 The administration menu allows access to the 
administration functions.Figure 27.11 Users must pass through the login page to access the 
administration functions.
33 6728 CH27  9/2/04  1:15 PM  Page 614
615 Implementing an Administration Interface
The code for the admin menu is shown in Listing 27.17.
Listing 27.17 admin.php —Script That Authenticates the Administrator and Lets Him
Access the Administration Functions
<?php
// include function files for this application
require_once( ‘book_sc_fns.php ’);
session_start();
if ($_POST[ ‘username ’] && $_POST[ ‘passwd’])
// they have just tried logging in{
$username = $_POST[ ‘username ’];
$passwd = $_POST[ ‘passwd’];
if (login($username, $passwd))
{
// if they are in the database register the user id$_SESSION[ ‘admin_user ’] = $username;
}else{
// unsuccessful logindo_html_header( ‘Problem: ’);
echo ‘You could not be logged in.
You must be logged in to view this page.<br /> ’;
do_html_url( ‘login.php ’, ‘Login’);
do_html_footer();exit;
}
}
do_html_header( ‘Administration ’);
if (check_admin_user())
display_admin_menu();
else
echo ‘You are not authorized to enter the administration area. ’;
do_html_footer();
?>33 6728 CH27  9/2/04  1:15 PM  Page 615
616 Chapter 27 Building a Shopping Cart
This code probably looks familiar; it is similar to a script from Chapter 26.After the
administrator reaches this point, he can change his password or log out; this code is iden-tical to the code in Chapter 26, so we did not include it here.
You identify the administration user after login by means of the 
admin_user session
variable and the check_admin_user() function.This function and the others used by
the administrative scripts can be found in the function library admin_fns.php .
If the administrator chooses to add a new category or book, he will go to either
insert_category_form.php or insert_book_form.php ,as appropriate. Each of these
scripts presents the administrator with a form to fill in. Each is processed by a correspon-ding script (
insert_category.php and insert_book.php ), which verifies that the form
is filled out and inserts the new data into the database. Here, we look at the book ver-sions of the scripts only because they are similar to one another.
The output of 
insert_book_form.php is shown in Figure 27.13.
Figure 27.13 This form allows the administrator to enter new books into
the online catalog.
Notice that the Category field for books is an HTML SELECT element.The options for
this SELECT come from a call to the get_categories() function you looked at previ-
ously.
When the Add Book button is clicked, the insert_book.php script is activated.The
code for this script is shown in Listing 27.18.
33 6728 CH27  9/2/04  1:15 PM  Page 616
617 Implementing an Administration Interface
Listing 27.18 insert_book.php —Script That Validates the New Book Data and Puts
It into the Database
<?php
// include function files for this application
require_once( ‘book_sc_fns.php ’);
session_start();
do_html_header( ‘Adding a book ’);
if (check_admin_user()){
if (filled_out($_POST)){
$isbn = $_POST[ ‘isbn’];
$title = $_POST[ ‘title’];
$author = $_POST[ ‘author’];
$catid = $_POST[ ‘catid’];
$price = $_POST[ ‘price’];
$description = $_POST[ ‘description ’];
if(insert_book($isbn, $title, $author, $catid, $price, $description))
echo “Book ‘“.stripslashes($title). ”’was added to the database.<br /> ”;
else
echo “Book ‘“.stripslashes($title).
“‘could not be added to the database.<br /> ”;
}else
echo ‘You have not filled out the form.  Please try again. ’;
do_html_url( ‘admin.php ’, ‘Back to administration menu ’);
}else
echo ‘You are not authorized to view this page. ’;
do_html_footer();
?>
You can see that this script calls the function insert_book() .This function and the oth-
ers used by the administrative scripts can be found in the function library
admin_fns.php .
In addition to adding new categories and books, the administrative user can edit and
delete these items.We implemented this capability by reusing as much code as possible.When the administrator clicks the Go to Main site link in the administration menu, hegoes to the category index at 
index.php and can navigate the site in the same way as a
regular user, using the same scripts.33 6728 CH27  9/2/04  1:15 PM  Page 617
618 Chapter 27 Building a Shopping Cart
There is a difference in the administrative navigation, however:Administrators see dif-
ferent options based on the fact that they have the registered session variable admin_user .
For example, if you look at the show_book.php page that you looked at previously in the
chapter, you will see the different menu options shown in Figure 27.14.
Figure 27.14 The show_book.php script produces different output for an
administrative user.
The administrator has access to two new options on this page: Edit Item and Admin
Menu. Notice that the shopping cart does not appear in the upper-right corner; instead,this page has a Log Out button.
The code for this page is all there, back in Listing 27.8, as follows:
if( check_admin_user() )
{
display_button( “edit_book_form.php?isbn=$isbn ”, ‘edit-item ’, ‘Edit Item ’);
display_button( ‘admin.php ’, ‘admin-menu ’, ‘Admin Menu ’);
display_button($target, ‘continue ’, ‘Continue ’);
}
If you look back at the show_cat.php script, you will see that it also has these options
built into it.
If the administrator clicks the Edit Item button, he will go to the
edit_book_form.php script.The output of this script is shown in Figure 27.15.
33 6728 CH27  9/2/04  1:15 PM  Page 618
619 Implementing an Administration Interface
Figure 27.15 The edit_book_form.php script gives the administrator
access to edit book details or delete a book.
This form is, in fact, the same one used to get the book’s details in the first place.We
built an option into that form to pass in and display existing book data.We did the same
thing with the category form.T o see what we mean, look at Listing 27.19.
Listing 27.19 display_book_form() Function from admin_fns.php —Form That
Does Double Duty as an Insertion and Editing Form
function display_book_form($book = ‘’)
// This displays the book form.// It is very similar to the category form.// This form can be used for inserting or editing books.// To insert, don ’t pass any parameters.  This will set $edit
// to false, and the form will go to insert_book.php.// To update, pass an array containing a book.  The// form will be displayed with the old data and point to update_book.php.// It will also add a “Delete book ”button.
{
// if passed an existing book, proceed in “edit mode ”
$edit = is_array($book);
33 6728 CH27  9/2/04  1:15 PM  Page 619
620 Chapter 27 Building a Shopping Cart
// most of the form is in plain HTML with some
// optional PHP bits throughout
?>
<form method= ’post’
action=”<?php echo $edit? ’edit_book.php ’:’insert_book.php ’;?>”>
<table border= ’0’>
<tr>
<td>ISBN:</td><td><input type= ’text’name=’isbn’
value=”<?php echo $edit?$book[ ‘isbn’]:’’; ?>”/></td>
</tr><tr>
<td>Book Title:</td><td><input type= ’text’name=’title’
value=”<?php echo $edit?$book[ ‘title’]:’’; ?>”/></td>
</tr><tr>
<td>Book Author:</td><td><input type= ’text’name=’author’
value=”<?php echo $edit?$book[ ‘author’]:’’; ?>”/></td>
</tr><tr>
<td>Category:</td><td><select name= ’catid’>
<?php
// list of possible categories comes from database$cat_array=get_categories();foreach ($cat_array as $thiscat){
echo ‘<option value= ”’;
echo $thiscat[ ‘catid’];
echo ‘“‘;
// if existing book, put in current catgoryif ($edit && $thiscat[ ‘catid’] == $book[ ‘catid’])
echo ‘selected ’;
echo ‘>’; 
echo $thiscat[ ‘catname’];
echo “</option>\n ”; 
}?></select>
</td>
</tr><tr>
<td>Price:</td>Listing 27.19 Continued 33 6728 CH27  9/2/04  1:15 PM  Page 620
621 Implementing an Administration Interface
<td><input type= ’text’name=’price’
value=”<?php echo $edit?$book[ ‘price’]:’’; ?>”/></td>
</tr><tr>
<td>Description:</td><td><textarea rows= ’3’cols=’50’
name=’description ’><?php 
echo $edit?$book[ ‘description ’]:’’; ?></textarea></td>
</tr><tr>
<td <?php if (!$edit) echo ‘colspan=\ ’2\’’; ?> align= ’center’>
<?php 
if ($edit)
// we need the old isbn to find book in database// if the isbn is being updatedecho ‘<input type= ”hidden”name=”oldisbn”
value=”’.$book[‘isbn’].’”/>’;
?>
<input type= ’submit’
value=”<?php echo $edit? ’Update’:’Add’; ?> Book ”/>
</form></td><?php 
if ($edit){  
echo ‘<td>’;
echo ‘<form method= ”post”action=”delete_book.php ”>’;
echo ‘<input type= ”hidden”name=”isbn”
value=”’.$book[‘isbn’].’”/>’;
echo ‘<input type= ”submit”
value=”Delete book ”/>’;
echo ‘</form></td> ’;
}
?>
</td>
</tr>
</table></form>
<?php
}
If you pass in an array containing the book data, the form will be rendered in edit mode
and will fill in the fields with the existing data:
<input type= ”text”name=”price”
value=”<?php echo $edit?$book[ ‘price’]:’’; ?>”/>Listing 27.19 Continued 33 6728 CH27  9/2/04  1:15 PM  Page 621
622 Chapter 27 Building a Shopping Cart
You even get a different submit button. In fact, for the edit form, you get two—one to
update the book and one to delete it.These buttons call the scripts edit_book.php and
delete_book.php ,which update the database accordingly.
The category versions of these scripts work in much the same way, except for one
thing.When an administrator tries to delete a category, it will not be deleted if anybooks are still in it. (This is checked with a database query.) This approach prevents anyproblems you might get with deletion anomalies.We discussed these anomalies inChapter 8,“Designing Y our Web Database.” In this case, if a category that still had booksin it was deleted, these books would become orphans.Y ou wouldn’t know what categorythey were in, and you would have no way of navigating to them!
That’s the overview of the administration interface. For more details, refer to the
code; it’s all on the CD-ROM.
Extending the Project
If you followed along with this project, you have built a fairly simple shopping cart sys-tem.There are many additions and enhancements you could make:
nIn a real online store, you would need to build some kind of order tracking andfulfillment system.At the moment, you have no way of seeing the orders that havebeen placed.
nCustomers want to be able to check the progress of their orders without having tocontact you.We feel that it is important that a customer does not have to log in tobrowse. However, providing existing customers a way to authenticate themselvesenables them to see past orders and enables you to tie behaviors together into aprofile.
nAt present, the images for books have to be transferred via FTP to the imagedirectory and given the correct name.Y ou could add file upload to the book inser-tion page to make this process easier.
nYou could add user login, personalization, and book recommendations; online
reviews; affiliate programs; stock level checking; and so on.The possibilities are
endless.
Using an Existing System
If you want to get a highly featured shopping cart up and running quickly, you mightwant to try using an existing shopping cart system. One well known open source cart
implemented in PHP is FishCartSQL, available from
http://www.fishcart.org/33 6728 CH27  9/2/04  1:15 PM  Page 622
623 Next
It has a lot of advanced features such as customer tracking, timed sales, multiple lan-
guages, credit card processing, and support for multiple online shops on one server. Ofcourse, when you use an existing system, you always find there are things that it does nothave that you want, and vice versa.The advantage of an open source product is that youcan go in and change the things you don’t like.
Next
In the next chapter, you learn how to build an online content management system suit-able for managing digital assets.This system can be useful if you are running a content-based site.33 6728 CH27  9/2/04  1:15 PM  Page 623
33 6728 CH27  9/2/04  1:15 PM  Page 624
28
Building a Content 
Management System
INTHIS CHAPTER ,YOULOOK AT A CONTENT management system (CMS) for storing,
indexing, and searching text and multimedia content. Content management systems areextremely useful on websites where the site content is maintained by more than oneauthor, where maintenance is performed by nontechnical staff, or where the content andgraphic design are developed by different people or departments.
In this chapter, you build an application that helps authorized users to manage an
organization’s digital assets.
This chapter covers the following:
nPresenting web pages using a series of templates
nBuilding a search engine that indexes documents according to metadata
The Problem
Imagine that the busy web development team for SuperFastOnlineNews consists ofexcellent graphic designers and some award-winning writers.The site contains regularlyupdated news, sports, and weather pages.The main page shows the latest headline fromeach of the three category pages.
At SuperFastOnlineNews, the designers ensure that the website content looks great.
This is what they do best.The writers, on the other hand, write excellent articles butcan’t draw well or build websites.
You need to allow all team members to concentrate on what they do best and bring
their output together to provide the super-fast news service that the name implies.34 6728 CH28  9/2/04  1:14 PM  Page 625
626 Chapter 28 Building a Content Management System
Solution Requirements
For this project, you need to produce a system that
nIncreases productivity by having the writers concentrate on writing and the
designers on designing
nAllows the editor to review stories and decide which ones should be published
nPresents a consistent look and feel throughout the site using page templates
nAllows writers access only to their designated areas of the site
nEnables the look and feel to be easily changed for a section or throughout the site
nPrevents live content from being changed
Existing Systems
There are many existing CMSs—both free and commercial. Before writing your own,you would be well advised to evaluate some existing ones.The trade-off between using
somebody else’s and writing your own is similar to other projects.
Writing your own CMS gives you complete flexibility but requires a lot more work.
You can decide exactly how the CMS output will integrate into the website and how
dynamic content is handled.
Existing systems might give you very advanced features with very little work.They usu-
ally have very flexible output because that is one of the primary purposes of a CMS, butthey often tie you to a particular workflow and may not handle dynamic content well.
Writing a simple CMS—with the types of features you will build in this chapter—
does not take long, but the more features you require, the more difficult the taskbecomes and the more appealing adopting an existing system becomes.
Editing Content
First, you need to think about how you will get content into the system and how youwill store and edit that content.
Getting Content into the System
You need to decide on the way that stories and design components will be submitted.
There are many possibilities, but we describe three in the following sections.
FTP/SCP
The writers and designers could be given FTP or SCP access to areas on the web server,
and they could then upload files from their local machine to the server.Y ou would needto have a rigid naming standard for the uploaded files (to identify which picturesbelonged to which stories) or a web-based system to deal with this separately from theFTP upload.34 6728 CH28  9/2/04  1:14 PM  Page 626
627 Editing Content
Unfortunately, giving detailed rights and permissions to different users via these
methods would be difficult, so we do not use it in this example.
File Upload Method
As we discussed in Chapter 18,“Interacting with the File System and the Server,” the
HTTP protocol provides a method for files to be uploaded via the web browser. PHP isable to deal with these uploads very easily.
The file upload method also gives you the opportunity to handle the content in any
way you like.Y ou could store text in a database or in a file.The upload mechanism cre-
ates a temporary file.T o store the data in a file, you copy it to a permanent location.T ostore it in a database, you read in the temporary file created by the upload mechanismand store its contents in the database.Y ou will optionally use file upload for stories in thisproject but will need it for pictures.
Editing Online
You can let users create and edit documents without using FTP , SCP , or file upload.
Instead, you can give the contributors a large text area input box on the screen in whichtheir story content can be edited.
This method is simple but often effective.The web browser does not provide any
text-editing facilities beyond the cut-and-paste functionality of the operating system.However, when you just need to make a small change—for instance, to correct a spellingmistake—you can quickly bring up the content and amend it. Unfortunately, because anHTML 
textarea cannot provide any advanced features such as real-time spell checking,
you will more likely need to correct spelling mistakes.
Similar to file upload, the form data could either be written to a file or stored in a
database.
Databases Versus File Storage
An important decision to make at an early stage is how the content will be stored after ithas been uploaded into the system.
Because you will be storing metadata alongside the story text, you can put the text
parts of the content into the database for this project.Although MySQL is capable ofstoring multimedia data, you are generally better off to store uploaded images on the filesystem, as we’ve done here.As discussed in Part II,“Using MySQL,” using BLOB data inyour MySQL database can reduce performance.
You can just store the image filename in the database. Using the file system, the 
<IMG>
tag can reference the image file directly as usual.
Document Structure
The sample stories used in this project are short one- or two-paragraph news stories with
a single optional image, designed for people in a hurry.They are structured documents inas much as they contain a headline and one or two paragraphs of text with an image.34 6728 CH28  9/2/04  1:14 PM  Page 627
628 Chapter 28 Building a Content Management System
The more structured a document is, the more easily it can be split up for storage in a
database.The advantage of this technique is that all the documents can be presented in aconsistent, structured manner.The corresponding disadvantage is that more structureleads to less flexibility.
Consider the news story example.Y ou will store the headline in a field separate from
the story text, and by its nature, the image is a separate component of the document.
With the headline as a separate item, you can define a standard typeface and style for
it to be displayed in and can easily separate it from the rest of the story to form the mainheadlines page.
Another approach for large documents would be to have a one-to-many relationship
with document components—that is, to store each paragraph, heading, or image as aseparate row in the database, each linked to a master document ID.That kind of dynamicdocument structure would allow you much more flexibility in document structure andrendering.
Using Metadata
For this project, you already know that each story record comprises a headline, story
text, and an image. However, there’s no reason you can’t store other data in the samerecord.
The system will automatically insert values for who created the story and when it was
last modified.These values can be automatically displayed at the bottom of a story to signand timestamp it without the author needing to worry about adding the information.
It might also be useful to add other data that is not displayed, known as metadata .A
good example is storing keywords that would be used for the search engine index.
Rather than scan the entire text of every story, the search engine looks at the key-
word metadata for each story and determines relevance solely from that.This way, the
site administrator can have total control over which search words and phrases matchwhich documents.
In the example, you will allow any number of keywords to be associated with a story
and assign each keyword a weight value to indicate how relevant that keyword is on ascale from 1 to 10.
You can then develop a search engine algorithm that ranks matches according to this
human-specified relevance for stories, rather than a complex algorithm that has to inter-pret English prose and make decisions based on its limited understanding and governedby fixed rules.
If your data is solely text stored in a database, MySQL’s full text indexing and search-
ing will be a better solution than rolling your own system, but the system developedhere could be used for a simple search engine across multiple document types and multi-media files.34 6728 CH28  9/2/04  1:14 PM  Page 628
629 Formatting the Output
We aren’t saying that you have to store metadata in the database.There’s nothing to
stop you from using the <META> tag in HTML or even using XML to build your docu-
ments. However, taking advantage of the database is worthwhile if you intend to searchyour metadata.
Formatting the Output
The news site example follows a simple but structured format when displaying a page.
Each page contains several stories that are all formatted the same way. First, the headlineis displayed in a large type, followed by the photograph underneath on the left, and thenthe story text on the right.The whole page is contained in a standard page template topreserve the site branding and consistency throughout.
Figure 28.1 shows the logical page structure you will be using.
Figure 28.1 The logical page structure for the public pages of SFON follows
common conventions and is easy to produce in HTML.
Implementing a simple templated structure such as this from a page design is not diffi-
cult.Y ou simply split the page into three parts: a header, side menu, and footer that donot change and the content of the page that varies from page to page and day to day.Whenever you display a page for this site, you show the header and side menu first, thepage content, and finally the footer.
The header and side menu are in one file (
header.php ), and the footer is in another
(footer.php ).The main content for each page is generated by an appropriate script.
Implementing the site with a header and footer template allows these template files to
be easily changed if the site design is updated.Header
FooterSide
MenuMain Content Cell34 6728 CH28  9/2/04  1:14 PM  Page 629
630 Chapter 28 Building a Content Management System
Solution Design/Overview
A summary of the files in this application is shown in Table 28.1.
Table 28.1 Files in the Content Management Application
Name Type Description
create_database.sql SQL SQL to set up the content database and some sample
data
include_fns.php Functions Collection of include files for the admin section of
this application
db_fns.php Functions Collection of functions for connecting to content
database
select_fns.php Functions Collection of functions to aid creation of <select>
drop-down lists from the database
user_auth_fns.php Functions Collection of functions for authenticating admin
users
header.php Template Header shown at the top of every content page
footer.php Template Footer shown at the bottom of every content page
logo.gif Image Logo file displayed in header.php
index.php Application Summary that shows the most recent headline from
each page of the site
admin/index.php Application Menu to the administrative functions for the site
page.php Application List of the headlines and story text for a particular
page
resize_image.php Application Script that resizes an image on the fly for
index.php
search_form.php Application Form to enter keywords for searching the site con-
tent
search.php Application Page that displays headlines of content matching
keywor d criteria
login.php Application Script that authenticates a user’s password and logs
her in to the system
logout.php Application Script that logs a user out of the system
writer.php Application List of stories that the logged-in user has written
with an option to add, modify, or delete stories
story.php Application Story detail screen for editing or adding a new story
story_submit.php Application Script that adds a new story or commits changes
from data entered in story.php
delete_story.php Application Script that processes a story delete request from
stories.php
keywords.php Application List of keywords for a story with the option to add
or delete keywords34 6728 CH28  9/2/04  1:14 PM  Page 630
631 Designing the Database
keyword_add.php Application Script that processes a keyword add request from
keywords.php
keyword_delete.php Application Script that processes a keyword delete request from
keywords.php
publish.php Application Editor’s list of stories showing which ones are pub-
lished with an option to toggle each one’s status
publish_story.php Application Script that processes a publish request from 
publish.php
unpublish_story.php Application Script that processes an unpublish request from
publish.php
Designing the Database
Listing 28.1 shows the SQL queries used to create the database for the content system.
This listing is part of the file create_database.sql .The file on the CD-ROM also
contains queries to populate the database with some sample users and stories.
Listing 28.1 Excerpt from create_database.sql —SQL File to Set Up the Content
Database
drop database if exists content;
create database content;use content;drop table if exists writers;create table writers (
username    varchar(16) not null primary key,password    char(40) not null,full_name   text
);
drop table if exists stories;create table stories (
id          int not null primary key auto_increment,writer      varchar(16) not null,            # foreign key writers.usernamepage        varchar(16) not null,            # foreign key pages.codeTable 28.1 Files in the Content Management Application
Name Type Description34 6728 CH28  9/2/04  1:14 PM  Page 631
632 Chapter 28 Building a Content Management System
headline    text,
story_text  text,picture     text,created     int,modified    int,published   int
);
drop table if exists pages;create table pages (
code        varchar(16) primary key,description text
);
drop table if exists writer_permissions;create table writer_permissions (
writer      varchar(16) not null,            # foreign key writers.usernamepage        varchar(16) not null,            # foreign key pages.codeprimary key(writer, page)
);
drop table if exists keywords;create table keywords (
story       int not null,                    # foreign key stories.idkeyword     varchar(32) not null,weight      int not null,primary key(story, keyword)
);
grant select, insert, update, delete
on content.*
to content@localhost identified by ‘password ’;
You need to store a little information about each writer, including a login name and
password, in the writers table.Y ou store their full names for displaying after each article
and for greeting them when they log in.
The pages table contains the page heading for each page on which stories can be
displayed.The writer_permissions table implements a many-to-many relationship
indicating for which pages a writer can submit stories.Listing 28.1 Continued 34 6728 CH28  9/2/04  1:14 PM  Page 632
633 Implementing the CMS
The stories table contains separate fields for headline ,story_text ,and picture ,a s
discussed previously.The created ,modified ,and published fields are integer fields and
store the Unix timestamp values of the relevant times.
To create the database, run the following command:
mysql –u root < create_database.sql
Make sure that you do not already have a database called content that this will drop and
replace.
Implementing the CMS
Now that you have a database, you can go about building the main part of the system.
Front End
Start by looking at index.php ,shown in Listing 28.2, which will be the first page that a
visitor to the site would see.Y ou want to show her the headlines of the latest story fromeach page.
Listing 28.2 index.php —Script That Shows the Most Recent Headline from Each
Page
<?php
include_once( ‘db_fns.php ’);
include_once( ‘header.php ’);
$handle = db_connect();$pages_sql = ‘select * from pages order by code ’;
$pages_result = $handle->query($pages_sql);
echo ‘<table border= ”0”width=”400”>’;
while ($pages = $pages_result->fetch_assoc())
{
$story_sql = “select * from stories
where page = ‘{$pages[ ‘code’]}’
and published is not nullorder by published desc ”;
$story_result = $handle->query($story_sql);if ($story_result->num_rows)
{34 6728 CH28  9/2/04  1:14 PM  Page 633
634 Chapter 28 Building a Content Management System
$story = $story_result->fetch_assoc();
echo “<tr>
<td>
<h2>{$pages[ ‘description ’]}</h2>
<p>{$story[ ‘headline ’]}</p>
<p align= ’right’class=’morelink ’>
<a href= ’page.php?page={$pages[ ‘code’]}’>
Read more {$pages[ ‘code’]} ...
</a>
</p>
</td><td width= ’100’>”;
if ($story[ ‘picture’])
{
echo ‘<img src= ”resize_image.php?image= ’;
echo urlencode($story[ ‘picture’]);
echo ‘&max_width=80&max_height=60 ”/>’;
}echo ‘</td></tr> ’;
}
}echo ‘</table> ’;
include_once( ‘footer.php ’);
?>
The index.php script, as with all the public scripts, includes header.php at the start and
footer.php at the end.Any output generated by the script is therefore displayed within
the main content cell in the formatted page.
The hard work is done by two database queries. First,
select * from pages order by code
retrieves the list of pages in the database. Next inside the loop, the query
select * from stories
where page = ‘{$pages[ ‘code’]}’
and published is not nullorder by published desc
is executed to find the stories on that page in reverse order of the date published.
Because this string is in double quotation marks, {$pages[ ‘code’]}will be replaced by
elements from the $page array.
Figure 28.2 shows the output from headline.php using the sample application data.Listing 28.2 Continued 34 6728 CH28  9/2/04  1:14 PM  Page 634
635 Implementing the CMS
Figure 28.2 The headline.php script shows the headlines from each page
within the site.
Next to each headline, a link is generated in the following form:
<p align= ’right’class=’morelink ’>
<a href= ’page.php?page=news ’>
Read more news ...</a>
</p>
The link is generated within the previous loop so that the query string value of page
and the page name are printed next to the relevant headline. Clicking this link takes the
visitor to page.php —the full list of stories for the particular page.The source for
page.php can be found in Listing 28.3.
Listing 28.3 page.php —Script That Displays One Story or All Published Stories for a
Page
<?php
if (!isset($_REQUEST[ ‘page’])&&!isset($_REQUEST[ ‘story’]))
{
header(‘Location: index.php ’);
exit;
}
34 6728 CH28  9/2/04  1:14 PM  Page 635
636 Chapter 28 Building a Content Management System
$page = $_REQUEST[ ‘page’];
$story = intval($_REQUEST[ ‘story’]);
include_once( ‘db_fns.php ’);
include_once( ‘header.php ’);
$handle = db_connect();
if($story){
$query = “select * from stories
where id = ‘$story’and
published is not null ”;
}else{
$query = “select * from stories
where page = ‘$page’and
published is not null
order by published desc ”;
}$result = $handle->query($query);
while ($story = $result->fetch_assoc())
{
// headlineecho “<h2>{$story[ ‘headline ’]}</h2>”;
//pictureif ($story[ ‘picture’])
{
echo ‘<div style= ”float:right; margin:0px 0px 6px 6px; ”>’;
echo ‘<img src= ”resize_image.php?image= ’;
echo urlencode($story[picture]);echo ‘&max_width=200&max_height=120 ”align = right/></div> ’;
}// byline$w = get_writer_record($story[ ‘writer’]);
echo ‘<br /><p class= ”byline”>’;
echo $w[full_name]. ’, ‘;
echo date( ‘M d, H:i ’, $story[ ‘modified ’]);
echo ‘</p>’;
// main textecho $story[ ‘story_text ’];
}include_once( ‘footer.php ’);
?>Listing 28.3 Continued 34 6728 CH28  9/2/04  1:14 PM  Page 636
637 Implementing the CMS
Note that page.php requires either a value for page or a value for story .In case
page.php is ever called directly without the query string, the first condition
if (!isset($_REQUEST[ ‘page’])&&!isset($_REQUEST[ ‘story’]))
{
header(‘Location: index.php ’);
exit;
}
will send the visitor back to the headline page so that the omission of page will not
cause an error.
The first query is used if you are calling this page to display a single story:
select * from stories
where id = ‘$story’and
published is not null
The second query is used to retrieve all stories for a particular page:
select * from storieswhere page = ‘$page’and
published is not null
order by published desc
The most recently published is retrieved first.Within each loop, the uploaded image and
story text are printed to the screen, along with the writer’s name and date of last change.
Figure 28.3 shows page.php in action, displaying all the news page items for the sample
application.
Figure 28.3 The page.php script shows all published stories on the news page.
34 6728 CH28  9/2/04  1:14 PM  Page 637
638 Chapter 28 Building a Content Management System
Image Manipulation
The writers who contribute stories will probably supply their own photographs to com-
plement their stories.Y ou want consistency, but what happens when one writer uploads alarge, high-quality image and another writer uploads a small thumbnail?
Assuming that the pictures in question will primarily be photographs, you can insist
on JPEG images only and take advantage of functions in PHP to manipulate the images.This topic was covered in detail in Chapter 21,“Generating Images.”
We created a simple script called 
resize_image.php ,shown in Listing 28.4, that you
can use to resize an image on the fly so that it can be displayed with an <img> tag in a
consistent size. Resizing images on the fly may not be appropriate for a busy site becauseit will be an expensive operation. Using it in this application allows you the flexibility todisplay the same image in different sizes on different pages—in this case, smaller imageson the headline page and larger images on the specific pages. It also means that you canchange the size of the images to suit a new layout if you change your template.
Listing 28.4 resize_image.php —Script That Resizes a JPEG Image On the Fly
<?php
$image = $_REQUEST[ ‘image’];
$max_width = $_REQUEST[ ‘max_width ’];
$max_height = $_REQUEST[ ‘max_height ’];
if (!$max_width)
$max_width = 80;
if (!$max_height)
$max_height = 60;
$size = GetImageSize($image);
$width = $size[0];$height = $size[1];
$x_ratio = $max_width / $width;
$y_ratio = $max_height / $height;
if ( ($width <= $max_width) && ($height <= $max_height) ) {
$tn_width = $width;$tn_height = $height;
}else if (($x_ratio * $height) < $max_height) {
$tn_height = ceil($x_ratio * $height);$tn_width = $max_width;
}else {
$tn_width = ceil($y_ratio * $width);$tn_height = $max_height;
}34 6728 CH28  9/2/04  1:14 PM  Page 638
639 Implementing the CMS
$src = ImageCreateFromJpeg($image);
$dst = ImageCreate($tn_width,$tn_height);ImageCopyResized($dst, $src, 0, 0, 0, 0,
$tn_width,$tn_height,$width,$height);
header(‘Content-type: image/jpeg ’);
ImageJpeg($dst, null, -1);ImageDestroy($src);ImageDestroy($dst);
?>
This script takes three parameters: the filename of the image to display, the maximum
width, and the maximum height in pixels.This is not to say that if the maximum sizespecified is 200 ×200, the image will be scaled to 200 ×200. Rather, it will be scaled down
in proportion so that the larger of the width or height is 200 pixels and the otherdimension is 200 pixels or smaller. For instance, a 400 ×300 image would be reduced to
200×150.This way, the proportions of the image will be maintained.
Resizing on the server is a better option than just specifying 
height and width
attributes to the <img> tag. The large, high-resolution image that a writer submitted
might be several megabytes in size; but when scaled to a reasonable size, it could be lessthan 100KB.There is then no need to download the huge file and ask the browser toresize it, but you would need to cache the resized images for a moderately busy site.
The image manipulation functions are covered in detail in Chapter 21. Here, you use
the 
ImageCopyResized() function to scale the image on the fly to the required size.
The key to the resize operation is the calculation of the new width and height
parameters.Y ou find the ratio between the actual and maximum dimensions. $max_width
and $max_height can be passed in on the query string; otherwise, the default values
specified at the top of the listing will be used:
$x_ratio = $max_width / $width;
$y_ratio = $max_height / $height;
If the image is already smaller than the specified maximum dimensions, the width and
height are left unchanged. Otherwise, either the X or Y ratio is then used to scale bothdimensions equally so that the reduced size image is not stretched or squashed, as follows:
if ( ($width <= $max_width) && ($height <= $max_height) ) {
$tn_width = $width;$tn_height = $height;
}else if (($x_ratio * $height) < $max_height) {
$tn_height = ceil($x_ratio * $height);$tn_width = $max_width;
}Listing 28.4 Continued 34 6728 CH28  9/2/04  1:14 PM  Page 639
640 Chapter 28 Building a Content Management System
else {
$tn_width = ceil($y_ratio * $width);$tn_height = $max_height;
}
After you have calculated the desired size, the image is resized and output to the brows-
er.T o function, this script is called from within <img> tags on a page, and it sends its out-
put directly to the browser with an appropriate header directive.
A potential advantage of this approach that we did not make use of here is that the
images do not need to be inside the web directory tree at all.This could have significantsecurity advantages in this application in which you allow an administrative script towrite to the image directories. Because the script passes the image out, only the scriptneeds to be inside the web tree.
Back End
Let’s look next at how stories can be added to the system.The admin menu(
/admin/index.php ) sends writers to writer.php .This script, after a writer is authenti-
cated, displays a list of the stories the author has written. It displays the published datefor live articles and offers the option to add a new story, edit or delete an existing one,and set the search keywords.An example is shown in Figure 28.4.
Figure 28.4 The writer.php script shows the story management 
page for writers.
34 6728 CH28  9/2/04  1:14 PM  Page 640
641 Implementing the CMS
These screens are not formatted inside the header and footer files, although they could
be if desired. Because only the writers and editor will use these scripts, in the examplewe chose to format only as much as needed to create a usable system.The code for
writer.php is shown in Listing 28.5.
Listing 28.5 writer.php — The Interface for Writers to Manage Their Stories
<?php
// writer.php Is the Interface for Writers to Manage Their Stories
include_once( ‘include_fns.php ’);
if (!check_auth_user())
{
login_form();
}else{
$handle = db_connect();
$writer = get_writer_record($_SESSION[ ‘auth_user ’]);
echo ‘<p>Welcome, ‘.$writer[ ‘full_name ’];
echo ‘(<a href= ”logout.php ”>Logout</a>)
(<a href= ”index.php ”>Menu</a>)
(<a href= ”../”>Public Site</a>) </p> ’;
echo ‘<p>’;
$query = ‘select * from stories where writer = \ ’’.
$_SESSION[ ‘auth_user ’].’\’order by created desc ’;
$result = $handle->query($query);
echo ‘Your stories: ‘;
echo $result->num_rows;echo ‘(<a href= ”story.php ”>Add new</a>) ’;
echo ‘</p><br /><br /> ’;
if ($result->num_rows)
{
echo ‘<table>’;
echo ‘<tr><th>Headline</th><th>Page</th> ’;
echo ‘<th>Created</th><th>Last modified</th></tr> ’;
while ($stories = $result->fetch_assoc()){34 6728 CH28  9/2/04  1:14 PM  Page 641
642 Chapter 28 Building a Content Management System
echo ‘<tr><td> ’;
echo $stories[ ‘headline ’];
echo ‘</td><td> ’;
echo $stories[ ‘page’];
echo ‘</td><td> ’;
echo date( ‘M d, H:i ’, $stories[ ‘created’]);
echo ‘</td><td> ’;
echo date( ‘M d, H:i ’, $stories[ ‘modified ’]);
echo ‘</td><td> ’;
if ($stories[ ‘published ’])
{
echo ‘[Published ‘.date(‘M d, H:i ’, $stories[ ‘published ’]).’]’;
}else{
echo ‘[<a href= ”story.php?story= ’.$stories[ ‘id’].’”>edit</a>] ‘;
echo ‘[<a href= ”delete_story.php?story= ’.$stories[ ‘id’].
‘“>delete</a>] ‘;
}echo ‘[<a href= ”keywords.php?story= ’.$stories[ ‘id’].’”>keywords</a>] ’;
echo ‘</td></tr> ’;
}echo ‘</table> ’;
}
}
?>
The first step is to check whether a user has been authenticated and, if not, to display
only a login form.
The session variable auth_user will be set after a writer has logged in.The authentica-
tion here isn’t particularly secure, and in reality you would take more care to ensure thatthe writers are properly authenticated.This topic is dealt with in detail in Chapter 16,“Implementing Authentication with PHP and MySQL.”
The login form submits to 
login.php ,which checks the username and password
against database values. If the login is successful, the user is returned to the page shecame from, using the 
HTTP_REFERER value.This means that the login script can be
invoked from any calling page within the system.
Next, you welcome the writer by name and give her the opportunity to log out.This
link will always appear at the top of stories.php so she can easily log out when she is
done:Listing 28.5 Continued 34 6728 CH28  9/2/04  1:14 PM  Page 642
643 Implementing the CMS
$writer = get_writer_record($_SESSION[ ‘auth_user ’]);
echo ‘<p>Welcome, ‘.$writer[ ‘full_name ’];
echo ‘(<a href= ”logout.php ”>Logout</a>)
(<a href= ”index.php ”>Menu</a>)
(<a href= ”../”>Public Site</a>) </p> ’;
The function get_writer_record() is defined in db_fns.php and returns an array of
all the fields in the writer table for the passed-in username.The script logout.php sim-
ply unsets the value of auth_user .
The following SQL in writer.php finds all a writer’s stories, starting with the most
recently added:
$query = ‘select * from stories where writer = \ ’’.
$_SESSION[ ‘auth_user ’].’\’order by created desc ’;
You store created, modified, and published timestamps against each story record.When a
new story is added, both the created and modified timestamps are set to the system time.Each subsequent change updates only the modified field.Y ou will not set the publishedtimestamp until an editor publishes the story to make it part of the live site.
All this information is shown on the stories screen, first with
echo date( ‘M d, H:i ’, $stories[ ‘created’]);
and then
echo date( ‘M d, H:i ’, $stories[ ‘modified ’]);
and finally
if ($stories[ ‘published ’])
{
echo ‘[Published ‘.date(‘M d, H:i ’, $stories[ ‘published ’]).’]’;
}else{
echo ‘[<a href= ”story.php?story= ’.$stories[ ‘id’].’”>edit</a>] ‘;
echo ‘[<a href= ”delete_story.php?story= ’.$stories[ ‘id’].’”>delete</a>] ‘;
}echo ‘[<a href= ”keywords.php?story= ’.$stories[ ‘id’].’”>keywords</a>] ’;
This code shows the published date if appropriate; otherwise, it shows links to edit or
delete that story. Search keywords can be added to published and unpublished stories.
The script for entering a new story or editing an existing one is story.php .F i g -
ure 28.5 shows one of the stories being edited in the sample application database.34 6728 CH28  9/2/04  1:14 PM  Page 643
644 Chapter 28 Building a Content Management System
Figure 28.5 The story.php script enables you to edit a story.
The complete listing for story.php is shown in Listing 28.6.
Listing 28.6 story.php —Script Used to Create or Edit a Story
<?php
include ( ‘include_fns.php ’);
if (isset($_REQUEST[ ‘story’]))
{
$story = get_story_record($_REQUEST[ ‘story’]);
}
?>
<form action= ”story_submit.php ”method=”post”enctype= ”multipart/form-data ”>
<input type= ”hidden”name=”story”value=”<?php echo $_REQUEST[ ‘story’];?>”>
<input type= ”hidden”name=”destination ”
value=”<?php echo $_SERVER[ ‘HTTP_REFERER ’];?>”>
<table>
<tr>
<td>Headline<td>
</tr>
34 6728 CH28  9/2/04  1:14 PM  Page 644
645 Implementing the CMS
<tr>
<td><input size= ”80”name=”headline ”
value=”<?php echo $story[ ‘headline ’];?>”></td>
</tr>
<tr>
<td>Page</td>
</tr><tr>
<td>
<?php
if(isset($_REQUEST[ ‘story’]))
{
$query = “select p.code, p.description
from pages p, writer_permissions wp, stories swhere p.code = wp.page
and wp.writer = s.writerand s.id = ”.$_REQUEST[ ‘story’];
}else{
$query = “select p.code, p.description
from pages p, writer_permissions wpwhere p.code = wp.page
and wp.writer = ‘{$_SESSION[ ‘auth_user ’]}’”;
}echo query_select( ‘page’, $query, $story[ ‘page’]);
?>
</td>
</tr>
<tr>
<td>Story text (can contain HTML tags)</td>
</tr><tr>
<td><textarea cols= ”80”rows=”7”name=”story_text ”
wrap=”virtual”><?php echo $story[ ‘story_text ’];?></textarea>
</td>
</tr>
<tr>
<td>Or upload HTML file</td>
</tr>Listing 28.6 Continued 34 6728 CH28  9/2/04  1:14 PM  Page 645
646 Chapter 28 Building a Content Management System
<tr>
<td><input type= ”file”name=”html”size=”40”></td>
</tr>
<tr>
<td>Picture</td>
</tr><tr>
<td><input type= ”file”name=”picture”size=”40”></td>
</tr>
<?php
if ($story[picture]){
$size   = getImageSize( ‘../’.$story[ ‘picture’]);
$width  = $size[0];$height = $size[1];
?>
<tr>
<td>
<img src= ”<?php echo ‘../’.$story[ ‘picture’];?>”
width=”<?php echo $width;?> ”height=”<?php echo $height;?> ”>
</td>
</tr>
<?php
}
?>
<tr>
<td align= ”center”><input type= ”submit”value=”Submit”></td>
</tr></table>
</form>
The same script can be used whether adding or editing, and the action depends on
whether story is set when the script is called:
if (isset($_REQUEST[ ‘story’]))
{
$story = get_story_record($_REQUEST[ ‘story’]);
}Listing 28.6 Continued 34 6728 CH28  9/2/04  1:14 PM  Page 646
647 Implementing the CMS
The function get_story_record() is defined in db_fns.php and returns an array of all
the fields in the stories table for the specified story ID. If no story ID is passed in,
$story will be null and $story will not contain the array elements:
<input size= ”80”name=”headline ”
value=”<?php echo $story[ ‘headline ’];?>”></td>
If story is not set, the preceding code will produce no value from the PHP statement,
so the headline input box will be blank. If story is set, it will contain the headline text
for the story being edited.
The function query_select() is defined in select_fns.php and returns the HTML
code to produce a select list from a given SQL query.The first parameter is the name
attribute for the select.The SQL query in the second parameter selects two columns,where the first is the 
value part of each option ,and the second appears after the
option tag and is the text actually displayed in the list.The third parameter is optional. It
adds a selected attribute to the option whose value matches the specified value.Y ou use
this function to generate a select that contains the pages this writer has permission to
contribute to.
To store an edited article with the same ID as it had previously, you need to record
this ID.Y ou do it as a hidden variable:
<input type= ”hidden”name=”story”value=”<?php print $_REQUEST[ ‘story’];?>”>
This line sets up a placeholder variable, setting the new value for story from the passed-
in story .When the form is submitted, story_submit.php checks whether there is a
value for story and generates an SQL UPDATE or INSERT statement accordingly.
The code for story_submit.php is shown in Listing 28.7.
Listing 28.7 story_submit.php —Script Used to Insert or Update a Story in the
Database
<?php
// story_submit.php// add / modify story record
include_once( ‘include_fns.php ’);
$handle = db_connect();$headline = $_REQUEST[ ‘headline ’];
$page = $_REQUEST[ ‘page’];
$time = time();
if ( (isset($_FILES[ ‘html’][‘name’]) &&
(dirname($_FILES[ ‘html’][‘type’]) == ‘text’) &&
is_uploaded_file($_FILES[ ‘html’][‘tmp_name ’])))
{34 6728 CH28  9/2/04  1:14 PM  Page 647
648 Chapter 28 Building a Content Management System
$story_text = file_get_contents($_FILES[ ‘html’][‘tmp_name ’]);
}else{
$story_text = $_REQUEST[ ‘story_text ’];
}
$story_text = addslashes($story_text);if (isset($_REQUEST[ ‘story’]) && $_REQUEST[ ‘story’]!=’’)
{   // It ’s an update
$story = $_REQUEST[ ‘story’];
$query = “update stories
set headline = ‘$headline ’,
story_text = ‘$story_text ’,
page = ‘$page’,
modified = $time
where id = $story ”;
}else{         // It ’s a new story
$query = “insert into stories
(headline, story_text, page, writer, created, modified)
values
(‘$headline ’, ‘$story_text ’, ‘$page’, ‘“.
$_SESSION[ ‘auth_user ’].”’, $time, $time) ”;
}
$result = $handle->query($query);if (!$result)
{
echo “There was a database error when executing <pre>$query</pre> ”;
echo mysqli_error();exit;
}
if ( (isset($_FILES[ ‘picture’][‘name’]) &&
is_uploaded_file($_FILES[ ‘picture’][‘tmp_name ’])))
{Listing 28.7 Continued 34 6728 CH28  9/2/04  1:14 PM  Page 648
649 Implementing the CMS
if (!isset($_REQUEST[ ‘story’]) || $_REQUEST[ ‘story’]==’’)
{
$story = mysqli_insert_id($handle);
}$type = basename($_FILES[ ‘picture’][‘type’]);
switch ($type) {
case ‘jpeg’:
case ‘pjpeg’:   $filename = “images/$story.jpg ”;
move_uploaded_file($_FILES[ ‘picture’][‘tmp_name ’],
‘../’.$filename);
$query = “update stories
set picture = ‘$filename ’
where id = $story ”;
$result = $handle->query($query);break;
default:        echo ‘Invalid picture format: ‘.
$_FILES[ ‘picture’][‘type’];
}
}
header(‘Location: ‘.$_REQUEST[ ‘destination ’]);
?>
The delete story link calls delete_story.php ,which executes a simple SQL delete
statement and returns the writer to the calling page.The code for delete_story.php is
shown in Listing 28.8.
Listing 28.8 delete_story.php — Script Used to Delete a Story from the Database
<?php
// delete_story.php
include_once( ‘include_fns.php ’);
$handle = db_connect();$story = $_REQUEST[ ‘story’];
if(check_permission($_SESSION[ ‘auth_user ’], $story))
{
$query = “delete from stories where id = $story ”;
$result = $handle->query($query);
}header(‘Location: ‘.$_SERVER[ ‘HTTP_REFERER ’]);
?>Listing 28.7 Continued 34 6728 CH28  9/2/04  1:14 PM  Page 649
650 Chapter 28 Building a Content Management System
Note that the function check_permission() refers to the database to see that the
logged-in user has permission to delete stories from this page.Y ou use this function onmany pages in the admin section. Even though unauthorized users will not be shownlinks to delete articles, it would not be very good if users could circumvent security bysimply guessing an obvious URL.
Searches
Clicking the keywords link on the stories list brings up a new form for entering key-
words against the story.There is no limit to the number of keywords that can be entered,
and each keyword is given a weight value, with a higher value indicating that it is morerelevant.
Figure 28.6 shows the screen used to set keywords against a particular story.
Figure 28.6 This screen enables you to set keywords for a story.
The script keywords.php ,which is included on the CD-ROM, is fairly straightforward,
so we don’t describe it in any detail.This script triggers the keyword_add.php and 
keyword_delete.php scripts, which are also straightforward and are therefore not
included here.
The script keyword_add.php uses the following query to add new keywords to the
database:
insert into keywords (story, keyword, weight)
values ($story, ‘$keyword ’, $weight)
In a similar vein, keyword_delete.php uses the following query to remove a keyword:
delete from keywords where story = $story and keyword = ‘$keyword ’
34 6728 CH28  9/2/04  1:14 PM  Page 650
651 Implementing the CMS
What is interesting is the way in which the weight values are used to calculate a percent-
age relevance figure when searching.
The search form in search_form.php contains a single field for keywords and sub-
mits to search.php ,which queries the database of live stories to find matching content.
The source for search.php is shown in Listing 28.9.
Listing 28.9 search.php —Script That Finds Matching Stories and Calculates a
Percentage Match Score
<?php
include_once( ‘db_fns.php ’);
include_once( ‘header.php ’);
$handle = db_connect();if ($_REQUEST[ ‘keyword’])
{
$keywords = explode( ‘‘, $_REQUEST[ ‘keyword’]);
$num_keywords = count($keywords);for ($i=0; $i<$num_keywords; $i++){
if ($i){
$keywords_string .= “or k.keyword = ‘“.$keywords[$i]. ”’ “;
}else{
$keywords_string .= “k.keyword = ‘“.$keywords[$i]. ”’ “;
}
}
$query = “select s.id,
s.headline,10 * sum(k.weight) / $num_keywords as score
from stories s, keywords kwhere s.id = k.story
and ($keywords_string)and published is not null
group by s.id, s.headlineorder by score desc, s.id desc ”;
$result = $handle->query($query);
}echo ‘<h2>Search results</h2> ’;34 6728 CH28  9/2/04  1:14 PM  Page 651
652 Chapter 28 Building a Content Management System
if ($result  && $result->num_rows)
{
echo ‘<table>’;
while ($matches = $result->fetch_assoc()){
echo “<tr><td><a href= ’page.php?story={$matches[ ‘id’]}’>
{$matches[ ‘headline ’]}
</td><td> ”;
echo floor($matches[ ‘score’]).’%’;
echo ‘</td></tr> ’;
}echo ‘</table> ’;
}else{
echo ‘No matching stories found ’;
}include_once( ‘footer.php ’);
?>
First, the keyword string passed into the search.php script is exploded into individual
search words.There is no facility for advanced search techniques in this example, such asallowing the searcher to use 
ANDor ORkeywords or group words together into a phrase,
so all words in the string will be keywords.
if ($_REQUEST[ ‘keyword’])
{
$keywords = split( ‘‘, $_REQUEST[ ‘keyword’]);
$num_keywords = count($keywords);for ($i=0; $i<$num_keywords; $i++){
if ($i){
$keywords_string .= “or k.keyword = ‘“.$keywords[$i]. ”’ “;
}else{
$keywords_string .= “k.keyword = ‘“.$keywords[$i]. ”’ “;
}
}
This code uses the PHP function explode() to create an array containing each word in
the keyword string separated by a space character. If only one word is specified, it stillreturns a single element array and the subsequent loop is executed once. Ultimately, the
condition stored in 
$keywords_string looks similar to
k.keyword = ‘keyword1 ’or k.keyword = ‘keyword2 ’or k.keyword = ‘keyword3 ’Listing 28.9 Continued 34 6728 CH28  9/2/04  1:14 PM  Page 652
653 Implementing the CMS
The search query built based on the previous code would be
select s.id,
s.headline,10 * sum(k.weight) / $num_keywords as score
from stories s, keywords kwhere s.id = k.storyand (k.keyword = ‘keyword1 ’
or k.keyword = ‘keyword2 ’
or k.keyword = ‘keyword3 ’)
group by s.id, s.headlineorder by score desc, s.id desc
The calculation for the score is the sum of the weights from all matching keywords
divided by the number of keywords searched for and then multiplied by 10.This weight-ing favors searches in which all the keywords entered match the keywords in the data-base.
Because the weights range from 1 to 10, the maximum value for the score is 100.A
search for three keywords would be a 100% match with a story only if all three werefound for that story and each had a weight of 10.
Editor Screen
The only part of the system we haven’t covered is how a story actually is published afterit has been written.The script
publish.php ,shown in Listing 28.10, makes a story live.
Listing 28.10 publish.php —Script That Lists All Documents So the Editor Can
Choose Which Ones Are Shown on the Live Site
<?php
include_once( ‘include_fns.php ’);
if (!check_auth_user())
{
login_form();
}else{
$handle = db_connect();
$writer = get_writer_record($_SESSION[ ‘auth_user ’]);
echo ‘<p>Welcome, ‘.$writer[ ‘full_name ’];
echo ‘(<a href= ”logout.php ”>Logout</a>) (<a href= ”index.php ”>Menu</a>) 
(<a href= ”../”>Public Site</a>) </p> ’;34 6728 CH28  9/2/04  1:14 PM  Page 653
654 Chapter 28 Building a Content Management System
$query = “select * from stories s, writer_permissions wp
where wp.writer = ‘{$_SESSION[ ‘auth_user ’]}’and
s.page = wp.page
order by modified desc ”;
$result = $handle->query($query);
echo ‘<h1>Editor admin</h1> ’;
echo ‘<table>’;
echo ‘<tr><th>Headline</th><th>Last modified</th></tr> ’;
while ($story = $result->fetch_assoc()){
echo ‘<tr><td> ’;
echo $story[ ‘headline ’];
echo ‘</td><td> ’;
echo date( ‘M d, H:i ’, $story[ ‘modified ’]);
echo ‘</td><td> ’;
if ($story[published]){
echo ‘[<a href= ”unpublish_story.php?story= ’.$story[ ‘id’].
‘“>unpublish</a>] ‘;
}else{
echo ‘[<a href= ”publish_story.php?story= ’.$story[ ‘id’].’”>publish</a>] ‘;
echo ‘[<a href= ”delete_story.php?story= ’.$story[ ‘id’].’”>delete</a>] ‘;
}echo ‘[<a href= ”story.php?story= ’.$story[ ‘id’].’”>edit</a>] ‘;
echo ‘</td></tr> ’;
}echo ‘</table> ’;
}
?>
This script should be made available only to the people who are authorized to publish
stories to the live site. In the sample application, this is anybody who has permission tosubmit stories to a page. In a real system, it is quite likely to require a higher level ofpermission, or at least require somebody other than the original author to proofread andapprove the material.
The 
publish.php script is similar to stories.php except that the editor is given a
screen showing the stories for every writer, not just her own.The ifstatement ensures
that appropriate options are presented for each story. Published stories can be unpub-lished, and unpublished stories can be published or deleted.Listing 28.10 Continued 34 6728 CH28  9/2/04  1:14 PM  Page 654
655 Next
These three links submit to unpublish_story.php ,publish_story.php ,and
delete_story.php ,respectively.
The script publish_story.php uses the following SQL query:
update stories set published = $now
where id = $story
This query marks a story as published and authorizes it for public viewing.
Similarly, unpublish_story.php uses the following query to mark a story as unpub-
lished and stop it from being displayed to the public:
update stories set published = null
where id = $story
The edit link appears regardless of whether a story is published, so the editor can always
make changes.This is different to the writers’ level of access, where they can modify astory only before it has been published.
Extending the Project
This project could be extended in several ways to make a more comprehensive contentmanagement system:
nYou could allow groups of users to work on stories together (collaboration).
nYou could implement a more flexible page layout so that editors can position text
and images on the page.
nYou could build an image library so that frequently used pictures are not duplicat-
ed and assign search keywords to images as well as story text.
nYou could also add spell-checking functionality to the content editor.A check
could be implemented using, for example, the Ispell or Aspell libraries.
Next
In the next project, you build a web-based interface that allows you to check and sendemail from the Web using IMAP .34 6728 CH28  9/2/04  1:14 PM  Page 655
34 6728 CH28  9/2/04  1:14 PM  Page 656
29
Building a Web-Based 
Email Service
M ORE AND MORE OFTEN THESE DAYS ,SITES WANT to offer web-based email to their
users.This chapter explains how to implement a web interface to an existing mail serverusing the PHP IMAP library.Y ou can use it to check your own existing mailbox througha web page or perhaps extend it to support many users for mass web-based email such asHotmail.
In this project, you build an email client,Warm Mail, that will enable users to
nConnect to their accounts on POP3 or IMAP mail servers
nRead mail
nSend mail
nReply to mail messages
nForward mail messages
nDelete mail from their accounts
The Problem
For a user to be able to read his mail, you need to find a way to connect to his mail
server.This generally isn’t the same machine as the web server.Y ou need a way to inter-act with the user’s mailbox to see what messages have been received and to deal witheach message individually.
Two main protocols are supported by mail servers for reading user mailboxes: Post
Office Protocol version 3 (POP3) and Internet Message Access Protocol (IMAP). If pos-sible, you should support both of them.35 6728 CH29  9/2/04  1:19 PM  Page 657
658 Chapter 29 Building a Web-Based Email Service
The main difference between these two is that POP3 is intended for, and usually used
by,people who connect to a network for a short time to download and delete their mail
from a server. IMAP is intended for online use, to interact with mail permanently kepton the remote server. IMAP has some more advanced features that we won’t use here.
If you are interested in the differences between these protocols, you can consult the
RFCs for them (RFC 1939 for POP version 3 and RFC 3501 for IMAP version 4rev1).An excellent article comparing the two can be found at http://www.imap.org/
papers/imap.vs.pop.brief.html.
Neither of these protocols is designed for sending mail; for that, you must use the
Simple Mail Transfer Protocol (SMTP), which you used previously from PHP via the
mail() function.This protocol is described in RFC 821.
Solution Components
PHP has excellent IMAP and POP3 support, but it is provided via the IMAP functionlibrary.T o use the code presented in this chapter, you need to have installed the IMAPlibrary.Y ou can tell whether you already have it installed by looking at the output of the
phpinfo() function.
If you are using Linux or Unix and do not have the IMAP library installed, you will
need to download the required libraries.Y ou can get the latest version via FTP fromftp://ftp.cac.washington.edu/imap/.
Under Unix, download the source and compile it for your operating system. Some
users have reported difficulties with compiling newer versions of the IMAP library withPHP . If you experience difficulties, the solution seems to be to revert to using IMAP-2001, an older, stable version.
You should then create a directory for the IMAP files inside your system include
directory, called, say 
imap.(Do notjust copy the files across into the basic include direc-
tory because doing so may cause conflicts.) Inside your new directory, create two subdi-rectories called 
imap/lib/ and imap/include/ .Copy all the *.hfiles from your install
to imap/include/ .When you performed the compilation, a file called c-client.a was
created. Rename it libc-client.a and copy it into your imap/lib/ directory.
You then need to run PHP’s configure script, adding the --with-imap= dirname
directive (where dirname is the name of the directory you created) to any other param-
eters you use, and recompile PHP .
To use the IMAP extension with Windows, open your php.ini file and uncomment
this line:
extension=php_imap.dll
Then restart the web server.
You can confirm that the IMAP extension is installed by running the phpinfo()
function.A section for IMAP should be shown.35 6728 CH29  9/2/04  1:19 PM  Page 658
659 Solution Overview
One interesting point to note is that, although they are called IMAP functions, they
also work equally well with Post Office Protocol version 3 (POP3) and Network NewsTransfer Protocol (NNTP). For this example, you use them for IMAP and POP3, but
you could easily extend the Warm Mail application  to use NNTP and to be a news-
reader as well as a mail client.
This library has several functions, but to implement the functionality in this applica-
tion, you need to use only a few.We explain these functions as we use them, but youneed to be aware that many more are available. See the documentation if your needs aredifferent from ours or if you want to add extra features to the application.
You can build a fairly useful mail application with only a fraction of the built-in
functions.This means that you need to plow through only a fraction of the documenta-tion.The IMAP functions used in this chapter are
nimap_open()
nimap_close()
nimap_headers()
nimap_header()
nimap_fetchheader()
nimap_body()
nimap_delete()
nimap_expunge()
For a user to read his mail, you need to get his server and account details. Instead of get-
ting these details from the user every time, you can set up a username and passworddatabase for the user so that you can store his details.
Often people have more than one email account (one for home and another for
work, for example), and you should allow them to connect to any of their accounts.Y ou
should therefore allow them to have multiple sets of account information in the data-base.
You should enable users to read, reply to, forward, and delete existing emails, as well
as send new ones.Y ou can do all the reading parts using IMAP or POP3 and all thesending parts using SMTP with 
mail() .
Now let’s look at how to put all the pieces together.
Solution Overview
The general flow through this web-based system isn’t much different from other emailclients. Figure 29.1 shows a diagram illustrating the system flow and modules.35 6728 CH29  9/2/04  1:19 PM  Page 659
660 Chapter 29 Building a Web-Based Email Service
Figure 29.1 The interface for Warm Mail gives the user mailbox-level func-
tionality and message-level functionality.
As you can see, you first require a user to log in and then give him a choice of options.
He can set up a new mail account or select one of his existing accounts for use. He alsocan view his incoming mail—responding to, forwarding, or deleting it—and send newmail.
You also give the user the option of viewing detailed headers for a particular message.
Viewing the complete headers can tell you a lot about a message.Y ou can see whichmachine the mail came from—a useful tool for tracking down spam.Y ou can see whichmachine forwarded it and at what time it reached each host—useful for assigning blamefor delayed messages.Y ou might also be able to see which email client the sender used ifthe application adds optional information to the headers.
This project uses a slightly different application architecture. Instead of having a set of
scripts, one for each module, this project has a slightly longer script,
index.php ,that
works like the event loop of a GUI-driven program. Each action taken on the site by
clicking a button brings you back to index.php ,but with a different parameter.
Depending on the parameter, different functions are called to show the appropriate out-put to the user.The functions are in function libraries, as usual.
This architecture is suitable for small applications such as this. It suits applications that
are very event driven, where user actions trigger functionality. Using a single event han-dler is not suitable for larger architectures or projects being worked on by a team.
A summary of the files in the Warm Mail project is shown in Table 29.1.Login
Set up
accountSelect
AccountView
mailboxNew
mailLogout
View
message
ReplyReply
allForward DeleteShow/hide
headers35 6728 CH29  9/2/04  1:19 PM  Page 660
661 Setting Up the Database
Table 29.1 Files in the Warm Mail Application
Name Type Description
index.php Application The main script that runs the entire application
include_fns.php Functions Collection of include files for this application
data_valid_fns.php Functions Collection of functions for validating input data
db_fns.php Functions Collection of functions for connecting to the mail
database
mail_fns.php Functions Collection of email-related functions for opening
mailboxes, reading mail, and so on
output_fns.php Functions Collection of functions for outputting HTML
user_auth_fns.php Functions Collection of functions for authenticating users
create_database.sql SQL SQL to set up the book_sc database and set up a
user
Let’s look at the application now.
Setting Up the Database
The database for Warm Mail is fairly simple because it doesn’t actually store any of the
emails.
You need to store users of the system. For each user, you need to store the following
fields:
nusername —The user’s preferred username for Warm Mail
npassword —The user’s preferred password for Warm Mail
naddress —The user’s preferred email address, which will appear in the From field
of emails he sends from the system
ndisplayname —The “human-readable” name that the user would like displayed in
emails from him to others
You also need to store each account that users would like to check with the system. For
each account, you need to store the following information:
nusername —The Warm Mail user who this account belongs to.
nserver —The machine on which the account resides; for example, localhost or
mail.tangledweb.com.au.
nport—The port to connect to when using this account. Usually, it is 110 for
POP3 servers and 143 for IMAP servers.
ntype—The protocol used to connect to this server, either POP3 or IMAP.
nremoteuser —The username for connecting to the mail server.
nremotepassword —The password for connecting to the mail server.
naccountid —A unique key for identifying accounts.35 6728 CH29  9/2/04  1:19 PM  Page 661
662 Chapter 29 Building a Web-Based Email Service
You can set up the database for this application by running the SQL shown in 
Listing 29.1.
Listing 29.1 create_database.sql —SQL to Create the Mail Database
create database mail;
use mail;create table users
(
username char(16) not null primary key,password char(40) not null,address char(100) not null,displayname char(100) not null
);
create table accounts
(
username char(16) not null,server char(100) not null,port int not null,type char(4) not null,remoteuser char(50) not null,remotepassword char(50) not null,accountid int unsigned not null auto_increment primary key
);
grant select, insert, update, delete
on mail.*
to mail@localhost identified by ‘password ’;
Remember that you can execute this SQL by typing
mysql -u root -p < create_database.sql
You need to supply your root password.Y ou also should change the password for the
mail user in create_database.sql and in db_fns.php before running it.
On the CD-ROM, we provided an SQL file called populate.sql .In this application,
we do not create a user registration or administration process.Y ou can add one yourself if
you want to use this software on a larger scale, but if you want it for personal use, you
will just need to insert yourself into the database.The populate.sql script provides a
template for doing this, so you can insert your details into it and run it to set yourself upas a user.35 6728 CH29  9/2/04  1:19 PM  Page 662
663 Examining the Script Architecture
Examining the Script Architecture
As mentioned previously, the Warm Mail application uses one script to control every-
thing.This script, called index.php ,is shown in Listing 29.2.Although this script is quite
long, we go through it section by section.
Listing 29.2 index.php —The Backbone of the Warm Mail System
<?php
// This file is the main body of the Warm Mail application.// It works basically as a state machine and shows users the// output for the action they have chosen.  
//*****************************************************************************
// Stage 1: pre-processing// Do any required processing before page header is sent// and decide what details to show on page headers//*****************************************************************************
include ( ‘include_fns.php ’);
session_start();//create short variable names$username = $_POST[ ‘username ’];
$passwd = $_POST[ ‘passwd’];
$action = $_REQUEST[ ‘action’];
$account = $_REQUEST[ ‘account’];
$messageid = $_GET[ ‘messageid ’];
$to =  $_POST[ ‘to’];
$cc =  $_POST[ ‘cc’];
$subject =  $_POST[ ‘subject’];
$message =  $_POST[ ‘message’];
$buttons = array();//append to this string if anything processed before header has output 
$status = ‘’;
// need to process log in or out requests before anything else
if($username||$password){
if(login($username, $passwd)){35 6728 CH29  9/2/04  1:19 PM  Page 663
664 Chapter 29 Building a Web-Based Email Service
$status .= ‘<p>Logged in successfully.</p><br /><br /><br /><br />
<br /><br /> ’;
$_SESSION[ ‘auth_user ’] = $username;
if(number_of_accounts($_SESSION[ ‘auth_user ’])==1)
{
$accounts = get_account_list($_SESSION[ ‘auth_user ’]); 
$_SESSION[ ‘selected_account ’] = $accounts[0]; 
}
}else
{
$status .= ‘<p>Sorry, we could not log you in with that 
username and password.</p><br /><br /><br /><br /><br /><br /> ’;
}
}if($action == ‘log-out’)
{
session_destroy();unset($action);$_SESSION=array();
}
//need to process choose, delete or store account before drawing header
switch ( $action ){
case ‘delete-account ’:
{
delete_account($_SESSION[ ‘auth_user ’], $account);
break;
}case ‘store-settings ’:
{
store_account_settings($_SESSION[ ‘auth_user ’], $_POST);
break;
}case ‘select-account ’:
{ 
// if have chosen a valid account, store it as a session variableif($account&&account_exists($_SESSION[ ‘auth_user ’], $account))
{
$_SESSION[ ‘selected_account ’] = $account;
}
}
}Listing 29.2 Continued 35 6728 CH29  9/2/04  1:19 PM  Page 664
665 Examining the Script Architecture
// set the buttons that will be on the tool bar
$buttons[0] = ‘view-mailbox ’; 
$buttons[1] = ‘new-message ’;
$buttons[2] = ‘account-setup ’;  
//only offer a log out button if logged inif(check_auth_user()){
$buttons[4] = ‘log-out’; 
}
//*****************************************************************************
// Stage 2: headers // Send the HTML headers and menu bar appropriate to current action //*****************************************************************************  
if($action){
// display header with application name and description of page or actiondo_html_header($_SESSION[ ‘auth_user ’], “Warm Mail - “.
format_action($action), $_SESSION[ ‘selected_account ’]);
}else{
// display header with just application namedo_html_header($_SESSION[ ‘auth_user ’], “Warm Mail ”, 
$_SESSION[ ‘selected_account ’]) ;
}
display_toolbar($buttons);
//*****************************************************************************
// Stage 3: body // Depending on action, show appropriate main body content //*****************************************************************************  
//display any text generated by functions called before headerecho $status;
if(!check_auth_user())
{
echo ‘<p>You need to log in ’;
if($action&&$action!= ’log-out’)
echo ‘to go to ‘.format_action($action);
echo ‘.</p><br /><br /> ’;
display_login_form($action);
}Listing 29.2 Continued 35 6728 CH29  9/2/04  1:19 PM  Page 665
666 Chapter 29 Building a Web-Based Email Service
else
{
switch ( $action ){
// if we have chosen to setup a new account, or have just added or // deleted an account, show account setup pagecase ‘store-settings ’:
case ‘account-setup ’:
case ‘delete-account ’:
{
display_account_setup($_SESSION[ ‘auth_user ’]);
break;
}case ‘send-message ’:
{
if(send_message($to, $cc, $subject, $message))
echo ‘<p>Message sent.</p><br /><br /><br /><br /><br /><br /> ’;
else 
echo ‘<p>Could not send message.</p><br /><br /><br /><br />
<br /><br /> ’;
break;
}case ‘delete’:
{
delete_message($_SESSION[ ‘auth_user ’], 
$_SESSION[ ‘selected_account ’], $messageid);
//note deliberately no ‘break’- we will continue to the next case
}case ‘select-account ’:
case ‘view-mailbox ’:
{
// if mailbox just chosen, or view mailbox chosen, show mailboxdisplay_list($_SESSION[ ‘auth_user ’], 
$_SESSION[ ‘selected_account ’]);
break;
}case ‘show-headers ’:
case ‘hide-headers ’:
case ‘view-message ’:
{Listing 29.2 Continued 35 6728 CH29  9/2/04  1:19 PM  Page 666
667 Examining the Script Architecture
// if we have just picked a message from the list, or were looking at 
// a message and chose to hide or view headers, load a message $fullheaders = ($action== ’show-headers ’); 
display_message($_SESSION[ ‘auth_user ’], 
$_SESSION[ ‘selected_account ’], 
$messageid, $fullheaders) ;
break;
}case ‘reply-all ’:
{ 
//set cc as old cc line if(!$imap)
$imap = open_mailbox($_SESSION[ ‘auth_user ’], 
$_SESSION[ ‘selected_account ’]);
if($imap){
$header = imap_header($imap, $messageid);if($header->reply_toaddress)
$to = $header->reply_toaddress;
else
$to = $header->fromaddress;
$cc = $header->ccaddress;$subject = ‘Re: ‘.$header->subject;
$body = add_quoting(imap_body($imap, $messageid));imap_close($imap);
display_new_message_form($_SESSION[ ‘auth_user ’], 
$to, $cc, $subject, $body);
}break;
}case ‘reply’:
{
//set to address as reply-to or from of the current messageif(!$imap)
$imap = open_mailbox($_SESSION[ ‘auth_user ’], 
$_SESSION[ ‘selected_account ’]);
if($imap){Listing 29.2 Continued 35 6728 CH29  9/2/04  1:19 PM  Page 667
668 Chapter 29 Building a Web-Based Email Service
$header = imap_header($imap, $messageid);
if($header->reply_toaddress)
$to = $header->reply_toaddress;
else
$to = $header->fromaddress;
$subject = ‘Re: ‘.$header->subject;
$body = add_quoting(stripslashes(imap_body($imap, $messageid)));imap_close($imap);
display_new_message_form($_SESSION[ ‘auth_user ’], 
$to, $cc, $subject, $body);
}       
break;        
}case ‘forward’:
{
//set message as quoted body of current messageif(!$imap)
$imap = open_mailbox($_SESSION[ ‘auth_user ’], 
$_SESSION[ ‘selected_account ’]);
if($imap){
$header = imap_header($imap, $messageid) ;$body = add_quoting(stripslashes(imap_body($imap, $messageid)));$subject = ‘Fwd: ‘.$header->subject;
imap_close($imap);
display_new_message_form($_SESSION[ ‘auth_user ’], 
$to, $cc, $subject, $body);
}break;
}case ‘new-message ’:
{               
display_new_message_form($_SESSION[ ‘auth_user ’], 
$to, $cc, $subject, $body);
break;
}
}
} 
//*****************************************************************************// Stage 4: footer //*****************************************************************************
do_html_footer();
?>Listing 29.2 Continued 35 6728 CH29  9/2/04  1:19 PM  Page 668
669 Logging In and Out
The index.php script uses an event handling approach. It contains the knowledge or
logic about which function needs to be called for each event.The events in this case aretriggered by the user clicking the various buttons in the site, each of which selects anaction. Most buttons are produced by the 
display_button() function, but the 
display_form_button() function is used if it’s a submit button.These functions are
both in output_fns.php .They all jump to URLs of the form
index.php?action=log-out
The value of the action variable when index.php is called determines which event
handler to activate.
The four main sections of the script are as follows:
1. Y ou do some processing that must take place before you send the page header to
the browser, such as starting the session, executing any preprocessing for the actionthe user has selected, and deciding what the headers will look like.
2. Y ou process and send the appropriate headers and menu bar for the action the user
has selected.
3. Y ou choose which body of the script to execute, depending on the selected action.
The different actions trigger different function calls.
4. Y ou send the page footers.
If you look briefly through the code for the script, you will see that these four sections
are marked with comments.
To understand this script fully, let’s walk through actually using the site action by action.
Logging In and Out
When a user loads the page index.php ,he will see the output shown in Figure 29.2.
Figure 29.2 The login screen for Warm Mail asks for a username and password.
35 6728 CH29  9/2/04  1:19 PM  Page 669
670 Chapter 29 Building a Web-Based Email Service
Showing the login screen is the default behavior for the application.With no $action
chosen yet, and no login details supplied, PHP will then execute the following parts of
the code.
In the preprocessing stage, PHP first executes the following code:
include ( ‘include_fns.php ’);
session_start();
These lines start the session that will be used to keep track of the $auth_user and
$selected_account session variables, which we come to later.
As in the other applications, you create short variable names.Y ou have done this in
every form-related script since Chapter 1,“PHP Crash Course,” so it barely needs men-
tion except for the variable action .Depending on where in the application this variable
comes from, it might be either a GETor POST variable.Y ou therefore extract it from the
$_REQUEST array.Y ou have to do the same thing with the account variable because it is
usually accessed via GETbut is accessed via POST when deleting an account.
To save work when customizing the user interface, you use an array to control the
buttons that appear on the toolbar.Y ou declare an empty array as follows:
$buttons = array();
Then you set the buttons that you want on the page:
$buttons[0] = ‘view-mailbox ’;
$buttons[1] = ‘new-message ’;
$buttons[2] = ‘account-setup ’;
If the user later logs in as an administrator, you will add more buttons to this array.
For the header stage, you print a plain vanilla header:
do_html_header($_SESSION[ ‘auth_user ’], “Warm Mail ”, 
$_SESSION[ ‘selected_account ’]); 
... display_toolbar($buttons);
This code prints the title and header bar and then the toolbar of buttons you can see in
Figure 29.2.These functions are located in the output_fns.php function library, but
because you can easily see their effect in the figure, we don’t go through them here.
Next comes the body of the code:
if(!check_auth_user())
{
echo ‘<p>You need to log in</p> ’;
if($action&&$action!= ’log-out’)
echo ‘to go to ‘.format_action($action);
echo ‘.<br /><br /> ’;
display_login_form($action);
}35 6728 CH29  9/2/04  1:19 PM  Page 670
671 Logging In and Out
The check_auth_user() function is from the user_auth_fns.php library.Y ou used
similar code in some of the previous projects; it checks whether the user is logged in. Ifhe is not, which is the case here, you show him a login form, which you can see inFigure 29.2.Y ou draw this form in the 
display_login_form() function from
output_fns.php .
If the user fills in the form correctly and clicks the Log In button, he will see the
output shown in Figure 29.3.
Figure 29.3 After successful login, the user can begin using the application.
On this execution of the script, you activate different sections of code.The login form
has two fields: $username and $password .If they have been filled in, the following seg-
ment of preprocessing code will be activated:
if($username||$password)
{
if(login($username, $passwd)){
$status .= ‘<p>Logged in successfully.</p><br /><br /><br /><br />
<br /><br /> ’;
$_SESSION[ ‘auth_user ’] = $username;
if(number_of_accounts($_SESSION[ ‘auth_user ’])==1)
{
$accounts = get_account_list($_SESSION[ ‘auth_user ’]); 
$_SESSION[ ‘selected_account ’] = $accounts[0]; 
}
}else{
35 6728 CH29  9/2/04  1:19 PM  Page 671
672 Chapter 29 Building a Web-Based Email Service
$status .= ‘<p>Sorry, we could not log you in with that 
username and password.</p><br /><br /><br /><br /><br /><br /> ’;
}
}
As you can see, the code calls the login() function, which is similar to the one used in
Chapters 26,“Building User Authentication and Personalization,” and 27,“Building aShopping Cart.” If all goes well, you register the username in the session variable
auth_user .
In addition to setting up the buttons you saw while not logged in, you add another
button to allow the user to log out again, as follows:
if(check_auth_user())
{
$buttons[4] = ‘log-out’;
}
You can see this Log Out button in Figure 29.3.
In the header stage, you again display the header and the buttons. In the body, you
display the status message you set up earlier:
echo $status;
After that, you just need to print the footer and wait to see what the user will do next.
Setting Up Accounts
When a user first starts using the Warm Mail system, he will need to set up some emailaccounts. If the user clicks on the Account Setup button, this will set the 
action variable
to account-setup and recall the index.php script.The user will then see the output
shown in Figure 29.4.
Figure 29.4 A user needs to set up his email account details 
before he can read his email.
35 6728 CH29  9/2/04  1:19 PM  Page 672
673 Setting Up Accounts
Look back at the script in Listing 29.2.This time around because of the value of
$action ,you get different behavior.Y ou get a slightly different header, as follows:
do_html_header($_SESSION[ ‘auth_user ’], ‘Warm Mail - ‘.
format_action($action), $_SESSION[ ‘selected_account ’]);
More importantly, you get a different body, as follows:
case ‘store-settings ’:
case ‘account-setup ’:
case ‘delete-account ’:
{
display_account_setup($_SESSION[ ‘auth_user ’]);
break;
}
This is the typical pattern: Each command calls a function. In this case, you call the 
display_account_setup() function.The code for this function is shown in Listing
29.3.
Listing 29.3 display_account_setup() Function from output_fns.php —
Function to Get and Display Account Details
function display_account_setup($auth_user)
{
//display empty ‘new account ’form
display_account_form($auth_user);
$list = get_accounts($auth_user);$accounts = sizeof($list);
// display each stored account  
foreach($list as $key => $account){
// display form for each accounts details.// note that we are going to send the password for all accounts in the HTML// this is not really a very good ideadisplay_account_form($auth_user, $account[ ‘accountid ’], 
$account[ ‘server’], $account[ ‘remoteuser ’], 
$account[ ‘remotepassword ’], $account[ ‘type’], 
$account[ ‘port’]);
}  
}
When you call the display_account_setup() function, it displays a blank form to add
a new account, followed by editable forms containing each of the user’s current emailaccounts.The 
display_account_form() function displays the form shown in Figure
29.4.Y ou use it in two different ways here:Y ou use it with no parameters to display anempty form, and you use it with a full set of parameters to display an existing record.35 6728 CH29  9/2/04  1:19 PM  Page 673
674 Chapter 29 Building a Web-Based Email Service
This function is in the output_fns.php library; it simply outputs HTML, so we do not
go through it here.
The function that retrieves any existing accounts is get_accounts() ,f r om the
mail_fns.php library.This function is shown in Listing 29.4.
Listing 29.4 get_accounts() Function from mail_fns.php —Function to Retrieve
All the Account Details for a Particular User
function get_accounts($auth_user)
{
$list = array();if($conn=db_connect()){
$query = “select * from accounts where username = ‘$auth_user ’”;
$result = $conn->query($query);if($result){
while($settings = $result->fetch_assoc())
array_push($list, $settings);
}else
return false;
}return $list;
}
As you can see, the get_accounts() function connects to the database, retrieves all the
accounts for a particular user, and returns them as an array.
Creating a New Account
If a user fills out the account form and clicks the Save Changes button, the store-
settings action will be activated. Let’s look at the event handling code for this from
index.php .In the preprocessing stage, you execute the following code:
case ‘store-settings ’:
{
store_account_settings($_SESSION[ ‘auth_user ’], $_POST);
break;
}
The store_account_settings() function writes the new account details into the data-
base.The code for this function is shown in Listing 29.5.35 6728 CH29  9/2/04  1:19 PM  Page 674
675 Setting Up Accounts
Listing 29.5 store_account_settings() Function from mail_fns.php —
Function to Save New Account Details for a User
function store_account_settings($auth_user, $settings)
{
if(!filled_out($settings)){
echo ‘All fields must be filled in.  Try again.<br /><br /> ’;
return false;
}else{
if($settings[ ‘account’]>0)
$query = “update accounts  set server = ‘$settings[server] ’,
port = $settings[port], type = ‘$settings[type] ’,
remoteuser = ‘$settings[remoteuser] ’, 
remotepassword = ‘$settings[remotepassword] ’
where accountid = $settings[account] 
and username = ‘$auth_user ’”;
else
$query = “insert into accounts values ( ‘$auth_user ’, 
‘$settings[server] ’, $settings[port], 
‘$settings[type] ’, ‘$settings[remoteuser] ’, 
‘$settings[remotepassword] ’, NULL)”;
if($conn=db_connect()){
$result=$conn->query($query);if ($result)
return true;
else
return false;
}else{
echo ‘could not store changes.<br /><br /><br /><br /><br /><br /> ’;
return false;
}
}
}
As you can see, two choices within the store_account_settings() function corre-
spond to inserting a new account or updating an existing account.The function executesthe appropriate query to save the account details.35 6728 CH29  9/2/04  1:19 PM  Page 675
676 Chapter 29 Building a Web-Based Email Service
After storing the account details, you go back to index.php ,to the main body stage:
case ‘store-settings ’:
case ‘account-setup ’:
case ‘delete-account ’:
{
display_account_setup($_SESSION[ ‘auth_user ’]);
break;
}
As you can see, you then execute the display_account_setup() function as before to
list the user’s account details.The newly added account will now be included.
Modifying an Existing Account
The process for modifying an existing account is similar.The user can change theaccount details and click the Save Changes button.Again, this activity triggers the
store-settings action, but this time it updates the account details instead of inserting
them.
Deleting an Account
To delete an account, the user can click the Delete Account button shown under each
account listing. Doing so activates the delete-account action.
In the preprocessing section of the index.php script, you execute the following code:
case ‘delete-account ’:
{
delete_account($_SESSION[ ‘auth_user ’], $account);
break;
}
This code calls the delete_account() function.The code for this function is shown in
Listing 29.6.Account deletion needs to be handled before the header because a choiceof which account to use is located inside the header.The account list needs to be updat-ed before it can be correctly drawn.
Listing 29.6 delete_account() Function from mail_fns.php —Function to Delete
a Single Account’s Details
function delete_account($auth_user, $accountid)
{
//delete one of this user ’s accounts from the DB
$query = “delete from accounts where accountid= ’$accountid ’”
.”and username = ‘$auth_user ’”;
if($conn=db_connect()){35 6728 CH29  9/2/04  1:19 PM  Page 676
677 Reading Mail
$result = $conn->query($query);
}return $result;
}
After execution returns to index.php ,the body stage runs the following code:
case ‘store-settings ’:
case ‘account-setup ’:
case ‘delete-account ’:
{
display_account_setup($_SESSION[ ‘auth_user ’]);
break;
} 
Notice that this is the same code you ran before; it just displays the list of the user’s
accounts.
Reading Mail
After the user has set up some accounts, you can move on to the main game: connectingto these accounts and reading mail.
Selecting an Account
You need to select one of the user’s accounts to read mail from.The currently selected
account is stored in the $selected_account session variable.
If the user has a single account registered in the system, it will be automatically
selected when he logs in, as follows:
if(number_of_accounts($_SESSION[ ‘auth_user ’])==1)
{
$accounts = get_account_list($_SESSION[ ‘auth_user ’]); 
$_SESSION[ ‘selected_account ’] = $accounts[0]; 
} 
Thenumber_of_accounts() function, from mail_fns.php ,works out whether the user
has more than one account; this function is shown in Listing 29.7.The
get_account_list() function retrieves an array of the user’s account IDs. In this case,
there is exactly one, so you can access it as the array’s 0value.Listing 29.6 Continued 35 6728 CH29  9/2/04  1:19 PM  Page 677
678 Chapter 29 Building a Web-Based Email Service
Listing 29.7 number_of_accounts() Function from mail_fns.php —Function to
Work Out How Many Accounts a User Has Registered
function number_of_accounts($auth_user)
{
// get the number of accounts that belong to this user
$query = “select count(*) from accounts where username = ‘$auth_user ’”;
if($conn=db_connect())
{
$result = $conn->query($query);
if($result){
$row = $result->fetch_array();return $row[0];
}
}return 0;
}
The get_account_list() function is similar to the get_accounts() function you
looked at before except that it retrieves only the account names.
If a user has multiple accounts registered, he will need to select one to use. In this
case, the headers contain a SELECT option that lists the available mailboxes. Choosing the
appropriate one automatically displays the mailbox for that account.Y ou can see this inFigure 29.5.
Figure 29.5 After the account is selected from the SELECT box, the mail
from that account is downloaded and displayed.
35 6728 CH29  9/2/04  1:19 PM  Page 678
679 Reading Mail
This SELECT option is generated in the do_html_header() function from
output_fns.php ,as shown in the following code fragment:
// include the account select box only if the user has more than one account
if(number_of_accounts($auth_user)>1){
echo ‘<form target= ”index.php?action=open-mailbox ”method=”post”>’;
echo ‘<td bgcolor= ”#ff6600”align=”right”valign=”middle”>’;
display_account_select($auth_user, $selected_account);echo ‘</td>’;
echo ‘</form>’;
}
We have generally avoided discussing the HTML used in the examples in this book, but
the HTML generated by the function display_account_select() bears a visit.
Depending on the accounts the current user has, display_account_select() gener-
ates HTML like this:
<select onchange= ”window.location=this.options[selectedIndex].value ”
name=”account”>
<option value= ”0”selected>
Choose Account</a>
<option value= ”index.php?action=select-account&account=10 ”>
mail.domain.com
</option><option value= ”index.php?action=select-account&account=11 ”>
mail.server.com
</option><option value= ”index.php?action=select-account&account=9 ”>
localhost
</option>
</select>
Most of this code is just an HTML select element, but it also includes a little
JavaScript. In the same way that PHP can generate HTML, it can also be used to gener-
ate client-side scripts.
Whenever a change event happens to this element, JavaScript sets window.location
to the value of the option. If your user selects the first option in the select ,
window.location will be set to ‘index.php?action=select-account&account=10 ’.
This results in this URL being loaded. Obviously, if the user has a browser that does notsupport JavaScript or has JavaScript disabled, this code will have no effect.
The 
display_account_select() function, from output_fns.php ,gets the available
account list and displays the SELECT .It also uses the get_account_list() function dis-
cussed previously.35 6728 CH29  9/2/04  1:19 PM  Page 679
680 Chapter 29 Building a Web-Based Email Service
Choosing one of the options in the SELECT activates the select_account event. If
you look at the URL in Figure 29.5, you can see this event appended to the end of the
URL, along with the account ID of the chosen account.
Appending these GETvariables has two effects. First, in the preprocessing stage of
index.php ,the chosen account is stored in the session variable $selected_account ,a s
follows:
case ‘select-account ’:
{ 
// if have chosen a valid account, store it as a session variableif($account&&account_exists($_SESSION[ ‘auth_user ’], $account))
{
$_SESSION[ ‘selected_account ’] = $account;
}
}
Second, when the body stage of the script is executed, the following code is executed:
case ‘select-account ’:
case ‘view-mailbox ’:
{
// if mailbox just chosen, or view mailbox chosen, show mailboxdisplay_list($_SESSION[ ‘auth_user ’], $_SESSION[ ‘selected_account ’]);
break;
} 
As you can see, you take the same action here as if the user had chosen the View
Mailbox option.We look at that action next.
Viewing Mailbox Contents
Mailbox contents can be viewed with the display_list() function.This function dis-
plays a list of all the messages in the mailbox.The code for this function is shown inListing 29.8.
Listing 29.8 display_list() Function from output_fns.php —Function to
Display All Mailbox Messages
function display_list($auth_user, $accountid)
{
// show the list of messages in this mailbox
global $table_width;if(!$accountid)
{35 6728 CH29  9/2/04  1:19 PM  Page 680
681 Reading Mail
echo ‘No mailbox selected<br /><br /><br /><br /><br /><br />. ’;
}else{
$imap = open_mailbox($auth_user, $accountid);if($imap)
{
echo “<table width = $table_width cellspacing = 0 
cellpadding = 6  border = 0> ”;
$headers = imap_headers($imap);
// we could reformat this data, or get other details using // imap_fetchheaders, but this is not a bad summary so we just echo each
$messages = sizeof($headers);
for($i = 0; $i<$messages; $i++){
echo ‘<tr><td bgcolor = “‘;
if($i%2)
echo ‘#ffffff’;
else 
echo ‘#ffffcc’;
echo ‘“><a href = ”index.php?action=view-message&messageid= ’.($i+1). ’”>’;
echo $headers[$i];echo “</a></td></tr>\n ”;
}echo ‘</table> ’;
} else {
$account = get_account_settings($auth_user, $accountid);echo ‘could not open mail box ‘.$account[ ‘server’].
‘.<br /><br /><br /><br /> ’;
}  
}
}
In the display_list() function, you actually begin to use PHP’s IMAP functions.The
two key parts of this function are opening the mailbox and reading the message headers.
You open the mailbox for a user account with a call to the open_mailbox() function
written in mail_fns.php .This function is shown in Listing 29.9.Listing 29.8 Continued 35 6728 CH29  9/2/04  1:19 PM  Page 681
682 Chapter 29 Building a Web-Based Email Service
Listing 29.9 open_mailbox() Function from mail_fns.php —This Function
Connects to a User Mailbox
function open_mailbox($auth_user, $accountid)
{
// select mailbox if there is only one
if(number_of_accounts($auth_user)==1){
$accounts = get_account_list($auth_user); $_SESSION[ ‘selected_account ’] = $accounts[0]; 
$accountid = $accounts[0];
}
// connect to the POP3 or IMAP server the user has selected
$settings = get_account_settings($auth_user, $accountid);if(!sizeof($settings)) return 0;$mailbox = ‘{‘.$settings[server];
if($settings[type]== ’POP3’)
$mailbox .= ‘/pop3’;
$mailbox .= ‘:’.$settings[port]. ’}INBOX’;
// suppress warning, remember to check return value  
@ $imap = imap_open($mailbox, $settings[ ‘remoteuser ’], 
$settings[ ‘remotepassword ’]);
return  $imap;
}
You actually open the mailbox with the imap_open() function, which has the following
prototype:
int imap_open (string mailbox, string username , string password [, int options])
The parameters you need to pass to it are as follows:
nmailbox —This string should contain the server name and mailbox name, and
optionally a port number and protocol.The format of this string is
{hostname/protocol:port}boxname
If the protocol is not specified, it defaults to IMAP . In the code we wrote, you cansee that we specify POP3 if the user has specified that protocol for a particularaccount.35 6728 CH29  9/2/04  1:19 PM  Page 682
683 Reading Mail
For example, to read mail from the local machine using the default ports, you
would use the following mailbox name for IMAP:
{localhost:143}INBOX
And you would use this one for POP3:
{localhost/pop3:110}INBOX
nusername —The username for the account.
npassword —The password for the account.
You can also pass it optional flags to specify options such as “open mailbox in read-
only mode ”.
Note that we constructed the mailbox string piece by piece with the concatenation
operator before passing it to imap_open() .You need to be careful how you construct
this string because strings containing {$can cause problems in PHP .
This function call returns an IMAP stream if the mailbox can be opened and false if
it cannot.
When you are finished with an IMAP stream, you can close it by using
imap_close( imap_stream ).Inthis function, the IMAP stream is passed back to the
main program.Y ou then use the imap_headers() function to get the email headers for
display:
$headers = imap_headers($imap);
This function returns header information for all mail messages in the mailbox you haveconnected to.The information is returned as an array, one line per message.This infor-mation has not been formatted.The function just outputs one line per message, so youcan see from looking at Figure 29.5 what the output looks like.
You can get more information about email headers using the confusing, similarly
named 
imap_header() function. In this case, though, the imap_headers() function
gives you enough detail for the purposes of this project.
Reading a Mail Message
Each message in the previous display_list() function is set up to link to specific
email messages. Each link is of the form
index.php?action=view-message&messageid=6
The messageid is the sequence number used in the headers retrieved earlier. Note that
IMAP messages are numbered from 1, not 0.
If the user clicks one of these links, he will see output like that shown in Figure 29.6.35 6728 CH29  9/2/04  1:19 PM  Page 683
684 Chapter 29 Building a Web-Based Email Service
Figure 29.6 Using the view-message action shows a particular message; in
this case, it’s spam.
When you enter these parameters into the index.php script, you execute the following
code:
case ‘show-headers ’:
case ‘hide-headers ’:
case ‘view-message ’:
{
// if we have just picked a message from the list, or were looking at // a message and chose to hide or view headers, load a message $fullheaders = ($action== ’show-headers ’); 
display_message($_SESSION[ ‘auth_user ’], 
$_SESSION[ ‘selected_account ’], 
$messageid, $fullheaders);
break;
}
Here, you check the value of the $action being equal to ‘show-headers ’.In this case,
it is false ,and $fullheaders is set equal to false .We look at the ‘show-headers ’
action in a moment.
The line
$fullheaders = ($action== ’show-headers ’);
could have been more verbosely—but perhaps more clearly—written as
if($action== ’show-headers ’)
$fullheaders = true;
else
$fullheaders = false;
35 6728 CH29  9/2/04  1:19 PM  Page 684
685 Reading Mail
Next, you call the display_message() function. Most of this function outputs plain
HTML, so we do not go through it here. It calls the retrieve_message() function to
get the appropriate message from the mailbox:
$message = retrieve_message($auth_user, $accountid, $messageid, $fullheaders);
The retrieve_message() function is in the mail_fns.php library.Y ou can see the code
for it in Listing 29.10.
Listing 29.10 retrieve_message() Function from mail_fns.php —This Function
Retrieves One Specific Message from a Mailbox
function retrieve_message($auth_user, $accountid, $messageid, $fullheaders)
{
$message = array();
if(!($auth_user && $messageid && $accountid))
return false;
$imap = open_mailbox($auth_user, $accountid);
if(!$imap) 
return false;      
$header = imap_header($imap, $messageid);if(!$header) 
return false;
$message[ ‘body’] = imap_body($imap, $messageid);
if(!$message[ ‘body’]) 
$message[ ‘body’] = “[This message has no body]\n\n\n\n\n\n ”;
if($fullheaders)
$message[ ‘fullheaders ’] = imap_fetchheader($imap, $messageid);
else
$message[ ‘fullheaders ’] = ‘’;
$message[ ‘subject’] = $header->subject;
$message[ ‘fromaddress ’] =   $header->fromaddress;
$message[ ‘toaddress ’] =   $header->toaddress;
$message[ ‘ccaddress ’] =   $header->ccaddress;
$message[ ‘date’] =   $header->date;
// note we can get more detailed information by using from and to 
// rather than fromaddress and toaddress, but these are easier
imap_close($imap); 
return $message;
}35 6728 CH29  9/2/04  1:19 PM  Page 685
686 Chapter 29 Building a Web-Based Email Service
Again, you use open_mailbox() to open the user’s mailbox.This time, however, you are
after a specific message. Using this function library, you download the message headersand message body separately.
The three IMAP functions used here are 
imap_header() ,imap_fetchheader() ,and
imap_body() .Note that the two header functions are distinct from imap_headers() ,the
one used previously.They are somewhat confusingly named.T o summarize
nimap_headers() —Returns a summary of the headers for all the messages in a
mailbox. It returns them as an array with one element per message.
nimap_header() —Returns the headers for one specific message in the form of an
object.
nimap_fetchheader() —Returns the headers for one specific message in the form
of a string.
In this case, you use imap_header() to fill out specific header fields and imap_
fetchheader() to show the user the full headers if requested. (We come back to this
topic later.)
You use imap_header() and imap_body() to build an array containing all the ele-
ments of a message that you are interested in.Y ou call imap_header() as follows:
$header = imap_header($imap, $messageid);
You can then extract each of the fields you require from the object:
$message[ ‘subject’] = $header->subject;
You call imap_body() to add the message body to the array as follows:
$message[ ‘body’] = imap_body($imap, $messageid);
Finally, you close the mailbox with imap_close() and return the array you have built.
The display_message() function can then display the message’s fields in the form
shown in Figure 29.6.
Viewing Message Headers
As you can see in Figure 29.6, the message contains a Show Headers button. It activatesthe 
show-headers option, which adds the full message headers to the message display. If
the user clicks this button, he will see output similar to that shown in Figure 29.7.35 6728 CH29  9/2/04  1:19 PM  Page 686
687 Reading Mail
Figure 29.7 Using show-headers to see the full headers for this message
will help a user track down the source of the spam.
As you probably noticed, the event handling for view-message covers show-headers
(and its counterpart hide-headers ), too. If this option is selected, you do the same
things as before. But in retrieve_message() ,you also grab the full text of the headers,
as follows:
if($fullheaders)
$message[ ‘fullheaders ’] = imap_fetchheader($imap, $messageid);
You can then display these headers for the user.
Deleting Mail
If a user clicks the Delete button on a particular email, he will activate the ‘delete’
action. Doing so executes the following code from index.php :
case ‘delete’:
{
delete_message($_SESSION[ ‘auth_user ’], 
$_SESSION[ ‘selected_account ’], $messageid);
//note deliberately no ‘break’- we will continue to the next case
}case ‘select-account ’:
case ‘view-mailbox ’:
{
35 6728 CH29  9/2/04  1:19 PM  Page 687
688 Chapter 29 Building a Web-Based Email Service
// if mailbox just chosen, or view mailbox chosen, show mailbox
display_list($_SESSION[ ‘auth_user ’], 
$_SESSION[ ‘selected_account ’]);
break;
}
As you can see, the message is deleted using the delete_message() function, and then
the resulting mailbox is displayed as discussed previously.The code for the delete_
message() function is shown in Listing 29.11.
Listing 29.11 delete_message() Function from mail_fns.php —This Function
Deletes One Specific Message from a Mailbox
function delete_message($auth_user, $accountid, $message_id)
{
// delete a single message from the server
$imap = open_mailbox($auth_user, $accountid);
if($imap){
imap_delete($imap, $message_id);imap_expunge($imap);imap_close($imap);return true;
}return false;
}
As you can see, this function uses a number of the IMAP functions.The new ones are
imap_delete() and imap_expunge() .Note that imap_delete() only marks messages
for deletion.Y ou can mark as many messages as you like.The call to imap_expunge()
actually deletes the messages.
Sending Mail
Finally, we come to sending mail.Y ou can do this in a few ways from this script:The usercan send a new message, reply to, or forward mail. Let’s see how these actions work.
Sending a New Message
The user can choose to send a new message by clicking the New Message button.Doing so activates the 
‘new-message ’action, which executes the following code in
index.php :
case ‘new-message ’:
{               35 6728 CH29  9/2/04  1:19 PM  Page 688
689 Sending Mail
display_new_message_form($_SESSION[ ‘auth_user ’],
$to, $cc, $subject, $body);
break;
}
The new message form is just a form for sending mail.Y ou can see what it looks like in
Figure 29.8.This figure actually shows mail forwarding rather than new mail, but theform is the same.We look at forwarding and replies next.
Figure 29.8 Using mail forwarding, you can report the spammer.
Clicking the Send Message button invokes the ‘send-message ’action, which executes
the following code:
case ‘send-message ’:
{
if(send_message($to, $cc, $subject, $message))
echo “<p>Message sent.</p><br /><br /><br /><br /><br /><br /> ”;
else
echo “<p>Could not send message.</p><br /><br /><br /><br /><br /><br /> ”;
break;
}
This code calls the send_message() function, which actually sends the mail.This func-
tion is shown in Listing 29.12.
35 6728 CH29  9/2/04  1:19 PM  Page 689
690 Chapter 29 Building a Web-Based Email Service
Listing 29.12 send_message() Function from mail_fns.php —This Function Sends
the Message That the User Has Typed In
function send_message($to, $cc, $subject, $message)
{
// send one email via PHP
if (!$conn=db_connect())
{ 
return false;
}$query = ‘select address from users where ‘
.’username=\ ’’.$_SESSION[ ‘auth_user ’].”’”;
$result = $conn->query($query);
if (!$result){
return false;  
}else if ($result->num_rows==0){
return false; 
}else{
$row = $result->fetch_object();$other = ‘From: ‘.$row->address;
if (!empty($cc))
$other.= ”\r\nCc: $cc ”;
if (mail($to, $subject, $message, $other)){
return true;
}else{
return false;
}
}
}
As you can see, this function uses mail() to send the email. First, however, it loads the
user’s email address out of the database to use in the From field of the email.35 6728 CH29  9/2/04  1:19 PM  Page 690
691 Sending Mail
Replying To or Forwarding Mail
The Reply, Reply All, and Forward functions all send mail in the same way that New
Message does.The difference in how they work is that they fill in parts of the new mes-sage form before showing it to the user. Look back at Figure 29.8.The message beingforwarded has been indented with the 
>symbol, and the Subject line prefaced with T o.
Similarly, the Reply and Reply All options fill in the recipients, subject line, and indent-ed message.
The code to reply to or forward mail is activated in the body section of 
index.php ,
as follows:
case ‘reply-all ’:
{ 
//set cc as old cc line 
if(!$imap)
$imap = open_mailbox($_SESSION[ ‘auth_user ’], 
$_SESSION[ ‘selected_account ’]);
if($imap){
$header = imap_header($imap, $messageid);if($header->reply_toaddress)
$to = $header->reply_toaddress;
else
$to = $header->fromaddress;
$cc = $header->ccaddress;$subject = ‘Re: ‘.$header->subject;
$body = add_quoting(stripslashes(imap_body($imap, $messageid)));imap_close($imap);
display_new_message_form($_SESSION[ ‘auth_user ’], 
$to, $cc, $subject, $body);
}break;
}case ‘reply’:
{
//set to address as reply-to or from of the current messageif(!$imap)
$imap = open_mailbox($_SESSION[ ‘auth_user ’], 
$_SESSION[ ‘selected_account ’]);
if($imap){35 6728 CH29  9/2/04  1:19 PM  Page 691
692 Chapter 29 Building a Web-Based Email Service
$header = imap_header($imap, $messageid);
if($header->reply_toaddress)
$to = $header->reply_toaddress;
else
$to = $header->fromaddress;
$subject = ‘Re: ‘.$header->subject;
$body = add_quoting(stripslashes(imap_body($imap, $messageid)));imap_close($imap);
display_new_message_form($_SESSION[ ‘auth_user ’], 
$to, $cc, $subject, $body) ;
}       
break;        
}case ‘forward’:
{
//set message as quoted body of current messageif(!$imap)
$imap = open_mailbox($_SESSION[ ‘auth_user ’], 
$_SESSION[ ‘selected_account ’]);
if($imap){
$header = imap_header($imap, $messageid);$body = add_quoting(stripslashes(imap_body($imap, $messageid)));$subject = ‘Fwd: ‘.$header->subject;
imap_close($imap);
display_new_message_form($_SESSION[ ‘auth_user ’], 
$to, $cc, $subject, $body);
}break;
}
You can see that each of these options sets up the appropriate headers, applies formatting
as necessary, and calls the display_new_message_form() function to set up the form.
Now you’ve seen the full set of functionality for the web mail reader.
Extending the Project
There are many extensions or improvements you could make to this project.Y ou canlook to the mail reader you normally use for inspiration, but some useful additions arethe following:
nAdd the ability for users to register with this site. (Y ou could reuse some of thecode from Chapter 26,“Building User Authentication and Personalization,” for thispurpose.)35 6728 CH29  9/2/04  1:19 PM  Page 692
693 Next
nAdd the ability for users to have many addresses. Many users have more than one
email address—perhaps a personal address and a work address. By moving theirstored email address from the users table to the accounts table, you could allowthem to use many addresses.Y ou would need to change a limited amount of othercode, too.The send mail form would need a drop-down box to select whichaddress to use.
nAdd the ability to send, receive, and view mail with attachments. If users are to beable to send attachments, you will need to build in file upload capabilities as dis-cussed in Chapter 18,“Interacting with the File System and the Server.” Sendingmail with attachments is covered in Chapter 30,“Building a Mailing ListManager.”
nAdd address book capabilities.
nAdd network newsreading capabilities. Reading from an NNTP server using theIMAP functions is almost identical to reading from a mailbox.Y ou just need tospecify a different port number and protocol in the 
imap_open() call. Instead of
naming a mailbox such as INBOX, you name a newsgroup to read from instead.You could combine this with the thread-building capabilities from the project in
Chapter 31,“Building Web Forums,” to build a threaded web-based newsreader.
Next
In the next chapter, you build another email-related project. In this one, you build anapplication to support sending newsletters on multiple topics to people who subscribethrough your site.35 6728 CH29  9/2/04  1:19 PM  Page 693
35 6728 CH29  9/2/04  1:19 PM  Page 694
30
Building a Mailing List Manager
A FTER YOU ’VE BUILT UP A BASE OF SUBSCRIBERS to your website, it’s nice to be able to
keep in touch with them by sending out a newsletter. In this chapter, you implement a
front end for a mailing list manager (MLM). Some MLMs allow each subscriber to sendmessages to other subscribers.The program you create in this chapter is a newsletter sys-tem, in which only the list administrator can send messages.The system is namedPyramid-MLM.
This system is similar to others already in the marketplace.T o get some idea of what
we are aiming for, look at http://www.topica.com
Your application lets an administrator create multiple mailing lists and send newslet-
ters to each of those lists separately.This application uses file upload to enable adminis-trators to upload text and HTML versions of newsletters that they have created offline.This means administrators can use whatever software they prefer to create newsletters.
Users can subscribe to any of the lists at the site and select whether to receive
newsletters in text or HTML.
We discuss the following topics:
nFile upload with multiple files
nMime-encoded email attachments
nHTML-formatted email
nWays to manage user passwords without human interaction
The Problem
You want to build an online newsletter composition and sending system.This system
should allow various newsletters to be created and sent to users, and allow users to sub-scribe to one or many of the newsletters.36 6728 CH30  9/2/04  1:23 PM  Page 695
696 Chapter 30 Building a Mailing List Manager
Specifically, the requirements for this system are
nAdministrators should be able to set up and modify mailing lists.
nAdministrators should be able to send text and HTML newsletters to all the sub-
scribers of a single mailing list.
nUsers should be able to register to use the site, and enter and modify their details.
nUsers should be able to subscribe to any of the lists on the site.
nUsers should be able to unsubscribe from lists they are subscribed to.
nUsers should be able to store their preference for either HTML-formatted orplain-text newsletters.
nFor security reasons, users should not be able to send mail to the lists or to see
each other’s email addresses.
nUsers and administrators should be able to view information about mailing lists.
nUsers and administrators should be able to view past newsletters that have beensent to a list (the archive).
Solution Components
A number of components are needed to fulfill the requirements.The main ones are set-ting up a database of lists, subscribers, and archived newsletters; uploading newslettersthat have been created offline; and sending mail with attachments.
Setting Up a Database of Lists and Subscribers
In this project, you track the usernames and passwords of all system users, as well as a listof the lists they have subscribed to.Y ou also store each user’s preference for receiving textor HTML email so that you can send a user the appropriate version of the newsletter.
An administrator is a specialized user with the ability to create new mailing lists and
send newsletters to those lists.
A nice piece of functionality to have for a system like this is an archive of previous
newsletters. Subscribers might not keep previous postings but might want to look upsomething.An archive can also act as a marketing tool for the newsletter because poten-tial subscribers can see what the newsletters are like.
You will find nothing new or difficult in setting up this database in MySQL and an
interface to it in PHP .
Using File Upload
You need an interface to allow the administrator to send newsletters, as mentioned pre-
viously.What we haven’t discussed is how the administrator will create that newsletter.36 6728 CH30  9/2/04  1:23 PM  Page 696
697 Solution Overview
You could provide him with a form where he could type or paste the newsletter
content. However, it increases the user-friendliness of the system to let the administratorcreate a newsletter in his favorite editor and then upload the file to the web server.Thisalso makes it easy for the administrator to add images to an HTML newsletter. For this,you can use the file upload capability discussed in Chapter 18,“Interacting with the File
System and the Server.”
You need to use a slightly more complicated form than you used in previous projects.
For this project, you require the administrator to upload both text and HTML versions
of the newsletter, along with any inline images that go into the HTML.
After the newsletter has been uploaded, you need to create an interface so that the
administrator can preview the newsletter before sending it.This way, he can confirm thatall the files were uploaded correctly.
Note that you also store all these files in an archive directory so that users can read
back issues of newsletters.This directory needs to be writable by the user your web serv-er runs as.The upload script will try to write the newsletters into 
./archive/ ,so you
need to make sure you create that directory and set permissions on it appropriately.
Sending Mail with Attachments
For this project, you want to be able to send users either a plain-text newsletter or a
“fancy” HTML version, according to their preference.
To send an HTML file with embedded images, you need to find a way to send
attachments. PHP’s simple mail() function doesn’t easily support sending attachments.
Instead, you can use the excellent Mail_Mime package from PEAR, originally created by
Richard Heyes. It can deal with HTML attachments and can also be used to attach anyimages that are contained in the HTML file.
Installation instructions for this package are included under “Installing PEAR” in
Appendix A,“Installing PHP and MySQL.”
Solution Overview
For this project, you again use an event-driven approach to writing the code, as in
Chapter 29,“Building a Web-Based Email Service.”
To help you get started, we again began by drawing a set of system flow diagrams to
show the paths users might take through the system. In this case, we drew three diagramsto represent the three different sets of interactions users can have with the system. Usershave different allowable actions when they are not logged in, when they are logged in asregular users, and when they are logged in as administrators.These actions are shown in
Figures 30.1, 30.2, and 30.3, respectively.
In Figure 30.1, you can see the actions that can be taken by a user who is not logged
in.As you can see, he can log in (if he already has an account), create an account (if hedoesn’t already have one), or view the mailing lists available for signup (as a marketingtactic).36 6728 CH30  9/2/04  1:23 PM  Page 697
698 Chapter 30 Building a Mailing List Manager
Figure 30.2 After logging in, users can change their preferences through a
variety of options.
Figure 30.3 shows the actions available if an administrator has logged in.As you can see,
an administrator has most of the functionality available to a user and some additionaloptions. She can also create new mailing lists, create new messages for a mailing list byuploading files, and preview messages before sending them.
Because this application uses an event-driven approach again, the backbone of the
application is contained in one file,
index.php ,which calls on a set of function libraries.
An overview of the files in this application is shown in Table 30.1.Figure 30.1 Users can choose only a limited number of actions when they
are not logged in.
Figure 30.2 shows the actions a user can take after logging in. He can change his
account setup (email address and preferences), change his password, and change whichlists he is subscribed to.Show
all listsNot
logged in
LoginNew
Account
Logged in
Change
Pass word
SubscribeShow
other lists
ArchiveShow
my lists
InfoAccount
Settings
Unsub36 6728 CH30  9/2/04  1:23 PM  Page 698
699 Solution Overview
Figure 30.3 Administrators have additional actions available to them.
Table 30.1 Files in the Mailing List Manager Application
Filename Type Description
index.php Application The main script that runs the entire application
include_fns.php Functions Collection of include files for this application
data_valid_fns.php Functions Collection of functions for validating input data
db_fns.php Functions Collection of functions for connecting to the mlm
database
mlm_fns.php Functions Collection of functions specific to this application
output_fns.php Functions Collection of functions for outputting HTML
upload.php Component Script that manages the file upload component of
the administrator role; separated out to make security easier
user_auth_fns.php Functions Collection of functions for authenticating users
create_database.sql SQL SQL to set up the mlmdatabase and set up a web
user and an administrative user
Now let’s work through the project implementation, beginning with the database in
which you will store subscriber and list information.Admin
logged in
Change
Pass wordShow
other listsShow
all listsShow
my lists
Subscribe Archive Info UnsubCreate
listsView
Mail
Send
MailCreate
Mail36 6728 CH30  9/2/04  1:23 PM  Page 699
700 Chapter 30 Building a Mailing List Manager
Setting Up the Database
For this application, you need to store the following details:
nLists—Mailing lists available for subscription
nSubscribers —Users of the system and their preferences
nSublists —A record of which users have subscribed to which lists (a many-to-
many relationship)
nMail—A record of email messages that have been sent
nImages —Y ou need to track the text, HTML, and images that go with each email
because you want to be able to send email messages that consist of multiple files.
The SQL used to create this database is shown in Listing 30.1.
Listing 30.1 create_database.sql —SQL to Create the mlmDatabase
create database mlm;
use mlm;create table lists
(
listid int auto_increment not null primary key,listname char(20) not null,blurb varchar(255)
);
create table subscribers
(
email char(100) not null primary key,realname char(100) not null,mimetype char(1) not null,password char(40) not null,admin tinyint not null
);
# stores a relationship between a subscriber and a list 
create table sub_lists(
email char(100) not null,listid int not null
);
create table mail
(36 6728 CH30  9/2/04  1:23 PM  Page 700
701 Setting Up the Database
mailid int auto_increment not null primary key, 
email char(100) not null,subject char(100) not null,listid int not null,status char(10) not null,sent datetime,modified timestamp
);
#stores the images that go with a particular mail
create table images(
mailid int  not null,path char(100) not null,mimetype char(100) not null
);
grant select, insert, update, delete
on mlm.*to mlm@localhost identified by ‘password ’;
insert into subscribers values
(‘admin@localhost ’, ‘Administrative User ’, ‘H’, sha1(‘admin’), 1);
Remember that you can execute this SQL by typing
mysql -u root -p < create_database.sql
You need to supply your root password. (Y ou could, of course, execute this script via any
MySQL user with the appropriate privileges; we just used root here for simplicity.) Y oushould change the password for the 
mlmuser and the administrator in your script before
running it.
Some of the fields in this database require a little further explanation, so let’s briefly
run through them.The lists table contains a listid and listname .It also contains a
blurb ,which is a description of what the list is about.
The subscribers table contains email addresses ( email ) and names ( realname ) of
the subscribers. It also stores their password and a flag ( admin ) to indicate whether a
user is an administrator.Y ou also store the type of mail they prefer to receive in 
mimetype .This can be either Hfor HTML or Tfor text.
The sublists table contains email addresses ( email ) from the subscribers table and
listid s from the lists table.Listing 30.1 Continued 36 6728 CH30  9/2/04  1:23 PM  Page 701
702 Chapter 30 Building a Mailing List Manager
The mail table contains information about each email message that is sent through
the system. It stores a unique ID ( mailid ), the address the mail is sent from ( email ), the
subject line of the email ( subject ), and the listid of the list it has been sent to or will
be sent to.The actual text or HTML of the message could be a large file, so you need tostore the archive of the actual messages outside the database.Y ou also track some generalstatus information: whether the message has been sent (
status ), when it was sent ( sent),
and a timestamp to show when this record was last modified ( modified ).
Finally, you use the images table to track any images associated with HTML mes-
sages.Again, these images can be large, so you store them outside the database for effi-ciency.Y ou need to keep track of the 
mailid they are associated with, the path to the
location where the image is actually stored, and the MIME type of the image(
mimetype )—for example, image/gif .
The SQL shown in Listing 30.1 also sets up a user for PHP to connect as and an
administrative user for the system.
Defining the Script Architecture
As in the preceding project, this project uses an event-driven approach.The backbone ofthe application is in the file 
index.php .This script has the following four main seg-
ments:
1. Perform preprocessing. Do any processing that must be done before headers can be
sent.
2. Set up and send headers. Create and send the start of the HTML page.3. Perform an action. Respond to the event that has been passed in.As in the pre-
ceding example, the event is contained in the 
$action variable.
4. Send footers.
Almost all the application’s processing is done in this file.The application also uses the
function libraries listed in Table 30.1, as mentioned previously.
The full listing of the index.php script is shown in Listing 30.2.
Listing 30.2 index.php —Main Application File for Pyramid-MLM
<?php
/**********************************************************************
* Section 1 : pre-processing *********************************************************************/
require_once ( ‘include_fns.php ’);
session_start();36 6728 CH30  9/2/04  1:23 PM  Page 702
703 Defining the Script Architecture
$action = $_GET[ ‘action’];
$buttons = array();
//append to this string if anything processed before header has output 
$status = ‘’;
// need to process log in or out requests before anything else
if($_POST[ ‘email’]&&$_POST[ ‘password ’])
{
$login = login($_POST[ ‘email’], $_POST[ ‘password ’]);
if($login == ‘admin’)
{
$status .= “<p><b>”.get_real_name($_POST[ ‘email’]).
“</b> logged in”.” successfully as <b>Administrator</b></p>
<br /><br /><br /><br /><br />”;
$_SESSION[ ‘admin_user ’] = $_POST[ ‘email’] ;
}else if($login == ‘normal’)
{
$status .= “<p><b>”.get_real_name($_POST[ ‘email’]).”</b> logged in”
.” successfully.</p><br /><br />”;
$_SESSION[ ‘normal_user ’] = $_POST[ ‘email’];
}else{
$status .= “<p>Sorry, we could not log you in with that 
email address and password.</p><br />”;
}
}
if($action == ‘log-out’)
{
unset($action);unset($_SESSION);session_destroy();
}
/**********************************************************************
* Section 2: set up and display headers *********************************************************************/Listing 30.2 Continued 36 6728 CH30  9/2/04  1:23 PM  Page 703
704 Chapter 30 Building a Mailing List Manager
// set the buttons that will be on the tool bar
if(check_normal_user()){
// if a normal user$buttons[0] = ‘change-password ’;
$buttons[1] = ‘account-settings ’;
$buttons[2] = ‘show-my-lists ’;
$buttons[3] = ‘show-other-lists ’;
$buttons[4] = ‘log-out’; 
}else if(check_admin_user()){
// if an administrator$buttons[0] = ‘change-password ’;
$buttons[1] = ‘create-list ’;
$buttons[2] = ‘create-mail ’;
$buttons[3] = ‘view-mail ’;
$buttons[4] = ‘log-out’;
$buttons[5] = ‘show-all-lists ’;
$buttons[6] = ‘show-my-lists ’;
$buttons[7] = ‘show-other-lists ’;
}else{
// if not logged in at all$buttons[0] = ‘new-account ’; 
$buttons[1] = ‘show-all-lists ’;
$buttons[4] = ‘log-in’;
}
if($action)
{
// display header with application name and description of page or actiondo_html_header( ‘Pyramid-MLM - ‘.format_action($action));
}else{
// display header with just application namedo_html_header( ‘Pyramid-MLM ’);
}
display_toolbar($buttons);Listing 30.2 Continued 36 6728 CH30  9/2/04  1:23 PM  Page 704
705 Defining the Script Architecture
//display any text generated by functions called before header
echo $status;
/**********************************************************************
* Section 3: perform action*********************************************************************/
// only these actions can be done if not logged in
switch ( $action ){
case ‘new-account ’:
{
// get rid of session variablessession_destroy();display_account_form();   break;
}case ‘store-account ’:
{
if (store_account($_SESSION[ ‘normal_user ’], 
$_SESSION[ ‘admin_user ’], $_POST))
$action = ‘’;
if(!check_logged_in())
display_login_form($action);
break;
}case ‘show-all-lists ’:
{
display_items( ‘All Lists ’, get_all_lists(), ‘information ’,
‘show-archive ’,’’);
break;
}case ‘show-archive ’:
{
display_items( ‘Archive For ‘.get_list_name($_GET[ ‘id’]), 
get_archive($_GET[ ‘id’]), ‘view-html ’, 
‘view-text ’, ‘’);
break;
}case ‘information ’:
{
display_information($_GET[ ‘id’]);
break;
}Listing 30.2 Continued 36 6728 CH30  9/2/04  1:23 PM  Page 705
706 Chapter 30 Building a Mailing List Manager
default :
{
if(!check_logged_in())
display_login_form($action);
break;
}
}
//all other actions require user to be logged in
if(check_logged_in()){
switch ( $action ){
case ‘account-settings ’:
{
display_account_form(get_email(), 
get_real_name(get_email()), get_mimetype(get_email()));   
break;
}case ‘show-other-lists ’:
{
display_items( ‘Unsubscribed Lists ’, 
get_unsubscribed_lists(get_email()), ‘information ’, 
‘show-archive ’, ‘subscribe ’);
break;
}case ‘subscribe ’:
{
subscribe(get_email(), $_GET[ ‘id’]);
display_items( ‘Subscribed Lists ’, get_subscribed_lists(get_email()),
‘information ’, ‘show-archive ’, ‘unsubscribe ’);
break;
}case ‘unsubscribe ’:
{
unsubscribe(get_email(), $_GET[ ‘id’]);
display_items( ‘Subscribed Lists ’, get_subscribed_lists(get_email()),
‘information ’, ‘show-archive ’, ‘unsubscribe ’);
break;
}case ‘’:
case ‘show-my-lists ’:
{               Listing 30.2 Continued 36 6728 CH30  9/2/04  1:23 PM  Page 706
707 Defining the Script Architecture
display_items( ‘Subscribed Lists ’, get_subscribed_lists(get_email()), 
‘information ’, ‘show-archive ’, ‘unsubscribe ’);
break;
}case ‘change-password ’:
{               
display_password_form();break;
}case ‘store-change-password ’:
{               
if(change_password(get_email(), $_POST[ ‘old_passwd ’], 
$_POST[‘new_passwd ’], $_POST[ ‘new_passwd2 ’]))
{
echo ‘<p>OK: Password changed.</p>
<br /><br /><br /><br /><br /><br /> ’;
}else{
echo ‘<p>Sorry, your password could not be changed.</p> ’;
display_password_form();
} break;
}
}
}// The following actions may only be performed by an admin userif(check_admin_user()){
switch ( $action ){
case ‘create-mail ’:
{
display_mail_form(get_email());   break;
}case ‘create-list ’:
{
display_list_form(get_email());   break;
}case ‘store-list ’:
{Listing 30.2 Continued 36 6728 CH30  9/2/04  1:23 PM  Page 707
708 Chapter 30 Building a Mailing List Manager
if(store_list($_SESSION[ ‘admin_user ’], $_POST))
{
echo ‘<p>New list added</p><br /> ’;
display_items( ‘All Lists ’, get_all_lists(), ‘information ’, 
‘show-archive ’,’’);
}else     
echo ‘<p>List could not be stored, please try ‘
.’again.</p><br /><br /><br /><br /><br /> ’;  
break;
}case ‘send’:
{
send($_GET[ ‘id’], $_SESSION[ ‘admin_user ’]);   
break;
}case ‘view-mail ’:
{
display_items( ‘Unsent Mail ’, get_unsent_mail(get_email()), 
‘preview-html ’, ‘preview-text ’, ‘send’);
break;
}
}
} 
/**********************************************************************
* Section 4: display footer *********************************************************************/
do_html_footer();
?>
You can see the four segments of the code clearly marked in this listing. In the prepro-
cessing stage, you set up the session and process any actions that need to be done beforeheaders can be sent. In this case, they include logging in and out.
In the header stage, you set up the menu buttons that the user will see and display the
appropriate headers using the 
do_html_header() function from output_fns.php .This
function just displays the header bar and menus, so we don’t discuss it in detail here.Listing 30.2 Continued 36 6728 CH30  9/2/04  1:23 PM  Page 708
709 Defining the Script Architecture
In the main section of the script, you respond to the action the user has chosen.
These actions are divided into three subsets: actions that can be taken if not logged in,actions that can be taken by normal users, and actions that can be taken by administra-tive users.Y ou check to see whether access to the latter two sets of actions is allowed byusing the 
check_logged_in() and check_admin_user() functions.These functions are
located in the user_auth_fns.php function library.The code for these functions and the
check_normal_user() function are shown in Listing 30.3.
Listing 30.3 Functions from user_auth_fns.php —These Functions Check Whether
a User Is Logged In and at What Level
function check_normal_user()
// see if somebody is logged in and notify them if not{
if (isset($_SESSION[ ‘normal_user ’]))
return true;
else
return false;
}
function check_admin_user()
// see if somebody is logged in and notify them if not{
if (isset($_SESSION[ ‘admin_user ’]))
return true;
else
return false;
}
function check_logged_in()
{
return ( check_normal_user() || check_admin_user() );
}
As you can see, these functions use the session variables normal_user and admin_user
to check whether a user has logged in.We explain how to set up these session variables
shortly.
In the final section of the index.php script, you send an HTML footer using the
do_html_footer() function from output_fns.php .
Let’s look briefly at an overview of the possible actions in the system.These actions
are shown in Table 30.2.36 6728 CH30  9/2/04  1:23 PM  Page 709
710 Chapter 30 Building a Mailing List Manager
Table 30.2 Possible Actions in the Mailing List Manager Application
Action Usable By Description
log-in Anyone Gives a user a login form
log-out Anyone Ends a session
new-account Anyone Creates a new account for a user
store-account Anyone Stores account details
show-all-lists Anyone Shows a list of available mailing lists
show-archive Anyone Displays archived newsletters for a particular list
information Anyone Shows basic information about a particular list
account-settings Logged-in users Displays user account settings
show-other-lists Logged-in users Displays mailing lists to which the user is not sub-
scribed
show-my-lists Logged-in users Displays mailing lists to which the user is sub-
scribed
subscribe Logged-in users Subscribes a user to a particular list
unsubscribe Logged-in users Unsubscribes a user from a particular list
change-password Logged-in users Displays the change of password form
store-change- Logged-in users Updates a user’s password in the database
password
create-mail Administrators Displays a form to allow upload of newsletters
create-list Administrators Displays a form to allow new mailing lists to be
created
store-list Administrators Stores mailing list details in the database
view-mail Administrators Displays newsletters that have been uploaded but
not yet sent
send Administrators Sends newsletters to subscribers
One noticeable omission from Table 30.2 is an option along the lines of store-mail —
that is, an action that actually uploads the newsletters entered via create-mail by
administrators.This single piece of functionality is actually in a different file, upload.php .
We put this functionality in a separate file because it makes keeping track of security
issues a little easier on us, the programmers.
Next, we discuss the implementation of the actions in the three groups listed 
in Table 30.2—that is, actions for people who are not logged in, actions for logged-inusers, and actions for administrators.36 6728 CH30  9/2/04  1:23 PM  Page 710
711 Implementing Login
Implementing Login
When a brand-new user comes to your site, you would like him to do three things. First,
you want the user to look at what you have to offer; second, to sign up with you; and
third, to log in.We look at each of these tasks in turn.
Figure 30.4 shows the screen presented to users when they first come to the site.
Figure 30.4 On arrival, users can create a new account, view available lists,
or just log in.
We look at creating a new account and logging in now and then return to viewing list
details in the “Implementing User Functions” and “Implementing AdministrativeFunctions” sections.
Creating a New Account
If a user selects the New Account menu option, this selection activates the new-account
action.This action, in turn, activates the following code in index.php :
case ‘new-account ’:
{
// get rid of session variablessession_destroy();display_account_form();break;
}
This code effectively logs out a user if she is currently logged in and displays the account
details form, as shown in Figure 30.5.
36 6728 CH30  9/2/04  1:23 PM  Page 711
712 Chapter 30 Building a Mailing List Manager
Figure 30.5 The new account creation form enables users to 
enter their details.
This form is generated by the display_account_form() function from the
output_fns.php library.This function is used both here and in the account-settings
action to display a form to enable the user to set up an account. If the function is
invoked from the account-settings action, the form will be filled with the user’s exist-
ing account data. Here, the form is blank, ready for new account details. Because thisfunction outputs only HTML, we do not go through the details here.
The submit button on this form invokes the 
store-account action.The code for this
action is as follows:
case ‘store-account ’:
{
if (store_account($_SESSION[ ‘normal_user ’],
$_SESSION[ ‘admin_user ’], $_POST))
$action = ‘’;
if(!check_logged_in())
display_login_form($action);
break;
}
The store_account() function, shown in Listing 30.4, writes the account details to the
database.
36 6728 CH30  9/2/04  1:23 PM  Page 712
713 Implementing Login
Listing 30.4 store_account() Function from mlm_fns.php —This Function Adds a
New User to the Database or Stores Modified Details About an Existing User
function store_account($normal_user, $admin_user, $details)
{
if(!filled_out($details)){
echo ‘All fields must be filled in.  Try again.<br /><br /> ’;
return false;
}else{
if(subscriber_exists($details[ ‘email’]))
{
//check logged in as the user they are trying to changeif(get_email()==$details[ ‘email’])
{
$query = “update subscribers set realname = ‘{$details[ ‘realname ’]}’,
mimetype = ‘{$details[ ‘mimetype ’]}’
where email = ‘{$details[ ‘email’]}’”;
if($conn=db_connect()){
if ($conn->query($query))
return true;
else
return false;
}else{
echo ‘Could not store changes.<br /><br /><br /><br /><br /><br /> ’;
return false;
}
}else{
echo ‘<p>Sorry, that email address is already registered here.</p> ’.
‘<p>You will need to log in with that address to change ‘.
‘its settings.</p> ’;
return false; 
}
}else // new account{36 6728 CH30  9/2/04  1:23 PM  Page 713
714 Chapter 30 Building a Mailing List Manager
$query = “insert into subscribers 
values ( ‘{$details[ ‘email’]}’,
‘{$details[ ‘realname ’]}’,
‘{$details[ ‘mimetype ’]}’,
sha1(‘{$details[ ‘new_password ’]}’),
0)”; 
if($conn=db_connect()){
if ($conn->query($query))
return true;
else
return false;
}else{
echo ‘Could not store new account.
<br /><br /><br /><br /><br /><br /> ’;
return false;
}
}
}
}
This function first checks that the user has filled in the required details. If this is okay, the
function will then either create a new user or update the account details if the useralready exists.A user can update only the account details of the user he is logged in as.
The logged-in user’s identity is checked using the 
get_email() function, which
retrieves the email address of the user who is currently logged in.We return to this func-
tion later because it uses session variables that are set up when the user logs in.
Logging In
If a user fills in the login form you saw in Figure 30.4 and clicks on the Log In button,she will enter the 
index.php script with the email and password variables set.This acti-
vates the login code, which is in the preprocessing stage of the script, as follows:
// need to process log in or out requests before anything else
if($_POST[ ‘email’]&&$_POST[ ‘password ’])
{
$login = login($_POST[ ‘email’], $_POST[ ‘password ’]);
if($login == ‘admin’)
{Listing 30.4 Continued 36 6728 CH30  9/2/04  1:23 PM  Page 714
715 Implementing Login
$status .= “<p><b>”.get_real_name($_POST[ ‘email’]).
“</b> logged in”.” successfully as <b>Administrator</b></p>
<br /><br /><br /><br /><br />”;
$_SESSION[ ‘admin_user ’] = $_POST[ ‘email’];
}else if($login == ‘normal’)
{
$status .= “<p><b>”.get_real_name($_POST[ ‘email’]).”</b> logged in”
.” successfully.</p><br /><br />”;
$_SESSION[ ‘normal_user ’] = $_POST[ ‘email’];
}else{
$status .= “<p>Sorry, we could not log you in with that 
email address and password.</p><br />”;
}
}
if($action == ‘log-out’)
{
unset($action);unset($_SESSION);session_destroy();
}
As you can see, you first try to log the user in by using the login() function from the
user_auth_fns.php library.This function is slightly different from the login functions
used elsewhere, so let’s look at it more closely.The code for this function is shown inListing 30.5.
Listing 30.5 login() Function from user_auth_fns.php —This Function Checks a
User’s Login Details
function login($email, $password)
// check username and password with db// if yes, return login type // else return false{
// connect to db$conn = db_connect();if (!$conn)
return 0;
$query = “select admin from subscribers 
where email= ’$email’
and password = sha1( ‘$password ’)”;36 6728 CH30  9/2/04  1:23 PM  Page 715
716 Chapter 30 Building a Mailing List Manager
$result = $conn->query($query);
if (!$result)
return false;
if ($result->num_rows<1)
return false;
$row = $result->fetch_array();  if($row[0] == 1)
return ‘admin’;
else
return ‘normal’;
}
In previous login functions, you returned true if the login was successful and false if
it was not. In this case, you still return false if the login failed, but if it was successful,
you return the user type, either ‘admin’or ‘normal’.You check the user type by
retrieving the value stored in the admin column in the subscribers table, for a particu-
lar combination of email address and password. If no results are returned, you return
false .If a user is an administrator, this value will be 1 ( true), so you return ‘admin’.
Otherwise, you return ‘normal’.
Returning to the main line of execution, you register a session variable to keep track
of who the user is. She is either admin_user if she is an administrator or normal_user if
she is a regular user.Whichever one of these variables you set will contain the emailaddress of the user.T o simplify checking for the email address of a user, you use the
get_email() function mentioned earlier.This function is shown in Listing 30.6.
Listing 30.6 get_email() function from user_auth_fns.php — This Function
Returns the Email Address of the Logged-In User
function get_email()
{
if (isset($_SESSION[ ‘normal_user ’]))
return $_SESSION[ ‘normal_user ’];
if (isset($_SESSION[ ‘admin_user ’]))
return $_SESSION[ ‘admin_user ’];
return false;
}
Back in the main program, you report to the user whether she was logged in and at
what level.
The output from one login attempt is shown in Figure 30.6.Listing 30.5 Continued 36 6728 CH30  9/2/04  1:23 PM  Page 716
717 Implementing User Functions
Figure 30.6 The system reports to the user that login was successful.
Now that you have logged in a user, you can proceed to the user functions.
Implementing User Functions
There are five things you want your users to be able to do after they have logged in:
nLook at the lists available for subscription
nSubscribe and unsubscribe from lists
nChange the way their accounts are set up
nChange their passwords
nLog out
You can see most of these options in Figure 30.6. Next, let’s look at the implementation
of each of these options.
Viewing Lists
In this project, you implement a number of options for viewing available lists and listdetails. In Figure 30.6, you can see two of these options: Show My Lists, which retrievesthe lists this user is subscribed to, and Show Other Lists, which retrieves the lists the useris not subscribed to.
If you look back at Figure 30.4, you will see another option, Show All Lists, which
retrieves all the available mailing lists on the system. For the system to be truly scalable,
you should add paging functionality (to display, say, 10 results per page).We did not do
this here for brevity.
36 6728 CH30  9/2/04  1:23 PM  Page 717
718 Chapter 30 Building a Mailing List Manager
These three menu options activate the show-all-lists ,show-other-lists ,and
show-my-lists actions, respectively.As you have probably realized, all these actions
work quite similarly.The code for these three actions is as follows:
case ‘show-all-lists ’:
{
display_items( ‘All Lists ’, get_all_lists(), ‘information ’,
‘show-archive ’,’’);
break;
}
case ‘show-other-lists ’:
{
display_items( ‘Unsubscribed Lists ’,
get_unsubscribed_lists(get_email()), ‘information ’,
‘show-archive ’, ‘subscribe ’);
break;
}
case ‘’:
case ‘show-my-lists ’:
{               
display_items( ‘Subscribed Lists ’, get_subscribed_lists(get_email()), 
‘information ’, ‘show-archive ’, ‘unsubscribe ’);
break;
}
As you can see, all these actions call the display_items() function from the
output_fns.php library, but they each call it with different parameters.They all also use
the get_email() function mentioned earlier to get the appropriate email address for this
user.
To see what the display_items() function does, look at Figure 30.7, the Show
Other Lists page.36 6728 CH30  9/2/04  1:23 PM  Page 718
719 Implementing User Functions
Figure 30.7 The display_items() function lays out a list of the lists that
the user is not subscribed to.
Let’s look at the code for the display_items() function, shown in Listing 30.7.
Listing 30.7 display_items() Function from output_fns.php —This Function
Displays a List of Items with Associated Actions
function display_items($title, $list, $action1= ’’, $action2= ’’, $action3= ’’)
{
global $table_width;echo “<table width = ‘$table_width ’cellspacing = ‘0’cellpadding = ‘0’
border = ‘0’>”;
// count number of actions
$actions = (($action1!= ’’) + ($action2!= ’’) + ($action3!= ’’)); 
echo ‘<tr>
<th colspan = \ ’’. (1+$actions) .” ’bgcolor= ’#5B69A6’> $title </th>
</tr>”; 
// count number of items
$items = sizeof($list);
36 6728 CH30  9/2/04  1:23 PM  Page 719
720 Chapter 30 Building a Mailing List Manager
if($items == 0)
echo ‘<tr>
<td colspan = “ ‘.(1+$actions). ’” align = “center”>
No Items to Display</td>
</tr>’;
else{ 
// print each row for($i = 0; $items; $i++){
if($i%2) // background colors alternate
$bgcolor = “ ‘#ffffff’”;
else 
$bgcolor = “ ‘#ccccff’”;
echo “<tr
<td bgcolor = $bgcolor 
width = ‘“. ($table_width - ($actions*149)) . ’\’>’;
echo $list[$i][1];if($list[$i][2])
echo ‘- ‘.$list[$i][2];
echo ‘</td>’;
// create buttons for up to three actions per line
for($j = 1; $j<=3; $j++){ 
$var = ‘action’.$j; 
if($$var){
echo “<td bgcolor = $bgcolor width = ‘149’>”;
// view/preview buttons are a special case as they link to a fileif($$var == ‘preview-html ’||$$var == ‘view-html ’||
$$var == ‘preview-text ’||$$var == ‘view-text ’)
display_preview_button($list[$i][3], $list[$i][0], $$var);
else        
display_button( $$var, ‘&id=’. $list[$i][0] );
echo ‘</td>’;
}
}echo “</tr>\n”;
}echo ‘</table> ’;
}
}Listing 30.7 Continued 36 6728 CH30  9/2/04  1:23 PM  Page 720
721 Implementing User Functions
This function outputs a table of items, with each item having up to three associated
action buttons.The function expects the following five parameters, in order:
n$title is the title that appears at the top of the table. In the case shown in Figure
30.7, the title Unsubscribed Lists is passed in, as shown in the previously discussedcode snippet for the action “Show Other Lists.”
n$list is an array of items to display in each row of the table. In this case, it is an
array of the lists the user is not currently subscribed to.Y ou build this array (in thiscase) in the function 
get_unsubscribed_lists() ,which we discuss shortly.This
is a multidimensional array, with each row in the array containing up to fourpieces of data about each row. In order, again:
n$list[n][0] should contain the item ID, which is usually a row number.
This gives the action buttons the ID of the row they are to operate on. Inthis case, you use IDs from the database; more on this later.
n$list[n][1] should contain the item name.This is the text displayed for a
particular item. For example, in the case shown in Figure 30.7, the itemname in the first row of the table is PHP Tipsheet.
n$list[n][2] and $list[n][3] are optional.Y ou use them to convey that
there is more information.They correspond to the more information textand the more information ID, respectively.We look at an example usingthese two parameters when we come to the View Mail action in the“Implementing Administrative Functions” section.
nThe optional third, fourth, and fifth parameters to the function are used to pass inthree actions that will be displayed on buttons corresponding to each item. InFigure 30.7, they are the three action buttons shown as Information, ShowArchive, and Subscribe.
You get these three buttons for the Show All Lists page by passing in the action names
information ,show-archive ,and subscribe .When you use the display_button()
function, these actions are turned into buttons with those words on them and the appro-
priate action assigned to them.
Each of the Show actions calls the display_items() function in a different way, as
you can see by looking back at their actions. In addition to having different titles and
action buttons, each of the three uses a different function to build the array of items todisplay. Show All Lists uses the function 
get_all_lists() ,Show Other Lists uses 
the function get_unsubscribed_lists() ,and Show My Lists uses the function
get_subscribed_lists() .All these functions work in a similar fashion and are all 
from the mlm_fns.php function library.
Let’s look at get_unsubscribed_lists() because that’s the example we’ve followed
so far.The code for the get_unsubscribed_lists() function is shown in Listing 30.8.36 6728 CH30  9/2/04  1:23 PM  Page 721
722 Chapter 30 Building a Mailing List Manager
Listing 30.8 get_unsubscribed_lists() Function from mlm_fns.php —This
Function Builds an Array of Mailing Lists That a User Is Not Subscribed To
//get the lists that this user is *not* subscribed to 
function get_unsubscribed_lists($email){
$list = array();  
$query = “select lists.listid, listname, email 
from lists left join sub_lists 
on lists.listid = sub_lists.listid and
email=’$email’where email is NULL order by listname”;
if($conn=db_connect()){
$result = $conn->query($query);if(!$result){
echo ‘<p>Unable to get list from database.</p> ’;
return false;
}$num = $result->num_rows;for($i = 0; $i<$num; $i++){
$row = $result->fetch_array();array_push($list, array($row[0], $row[1]));
}
}return $list;
}
As you can see, this function requires an email address passed into it.This should be the
email address of the subscriber that you are working with.The
get_subscribed_lists() function also requires an email address as a parameter, but the
get_all_lists() function does not for obvious reasons.
Given a subscriber’s email address, you connect to the database and fetch all the lists
the subscriber is not subscribed to.Y ou use a LEFT JOIN to find unmatched items, and
you loop through the result and build the array row by row using the array_push()
built-in function.
Now that you know how this list is produced, let’s look at the action buttons associat-
ed with these displays.36 6728 CH30  9/2/04  1:23 PM  Page 722
723 Implementing User Functions
Viewing List Information
The Information button shown in Figure 30.7 triggers the information action, which is
as follows:
case ‘information ’:
{
display_information($_GET[ ‘id’]);
break;
}
To see what the display_information() function does, look at Figure 30.8.
Figure 30.8 The display_information() function shows a blurb about a
mailing list.
This function displays some general information about a particular mailing list and lists
the number of subscribers and number of newsletters sent out to that list and available inthe archive (more on that shortly).The code for this function is shown in Listing 30.9.
Listing 30.9 display_information() Function from output_fns.php —This
Function Displays List Information
function display_information($listid)
{
if(!$listid)
return false;
$info = load_list_info($listid);
36 6728 CH30  9/2/04  1:23 PM  Page 723
724 Chapter 30 Building a Mailing List Manager
if($info)
{
echo ‘<h2>’.pretty($info[ ‘listname ’]).’</h2>’;
echo ‘<p>’.pretty($info[ ‘blurb’]);
echo ‘</p><p>Number of subscribers: ’. $info[ ‘subscribers ’];
echo ‘</p><p>Number of messages in archive: ’. $info[ ‘archive’].’</p>’;
}
}
The display_information() function uses two other functions to help it achieve its
web task:load_list_info() and pretty() .The load_list_info() function actually
retrieves the data from the database.The pretty() function simply formats the data from
the database by stripping out slashes, turning newlines into HTML line breaks, and so on.
Let’s look briefly at the load_list_info() function, which is in the mlm_fns.php
function library.The code for it is shown in Listing 30.10.
Listing 30.10 load_list_info() Function from mlm_fns.php —This Function
Builds an Array of List Information
function load_list_info($listid)
{
if(!$listid)
return false;
if(!($conn=db_connect()))
return false;
$query = “select listname, blurb from lists where listid = $listid”;
$result = $conn->query($query);if(!$result){
echo ‘Cannot retrieve this list ’;
return false;
}$info =  $result->fetch_assoc();
$query = “select count(*) from sub_lists where listid = $listid”;
$result = $conn->query($query);if($result){
$row = $result->fetch_array();$info[‘subscribers ’] = $row[0];
}Listing 30.9 Continued 36 6728 CH30  9/2/04  1:23 PM  Page 724
725 Implementing User Functions
$query = “select count(*) from mail where listid = $listid
and status = ‘SENT’”;
$result = $conn->query($query);if($result){
$row = $result->fetch_array();$info[‘archive’] = $row[0];
}return $info;
}
This function runs three database queries to collect the name and blurb for a list from
the lists table, the number of subscribers from the sub_lists table, and the number of
newsletters sent from the mail table.
Viewing List Archives
In addition to viewing the list blurb, users can look at all the mail that has been sent to amailing list by clicking on the Show Archive button.This activates the 
show-archive
action, which triggers the following code:
case ‘show-archive ’:
{
display_items( ‘Archive For ‘.get_list_name($_GET[ ‘id’]),
get_archive($_GET[ ‘id’]), ‘view-html ’,
‘view-text ’, ‘’);
break;
}
Again, this function uses the display_items() function to list the various items of mail
that have been sent to the list.These items are retrieved using the get_archive() func-
tion from mlm_fns.php .This function is shown in Listing 30.11.
Listing 30.11 get_archive() Function from mlm_fns.php —This Function Builds an
Array of Archived Newsletters for a Given List
function get_archive($listid)
{
//returns an array of the archived mail for this list//array has rows like (mailid, subject)
$list = array();  
$listname = get_list_name($listid);Listing 30.10 Continued 36 6728 CH30  9/2/04  1:23 PM  Page 725
726 Chapter 30 Building a Mailing List Manager
$query = “select mailid, subject, listid 
from mail where listid = $listid and status = ‘SENT’order by sent”; 
if($conn=db_connect())
{
$result = $conn->query($query);if(!$result){
echo ‘<p>Unable to get list from database.</p> ’;
return false;
}$num = $result->num_rows;
for($i = 0; $i<$num; $i++)
{
$row = $result->fetch_array();$arr_row = array($row[0], $row[1], 
$listname, $listid); 
array_push($list, $arr_row);
}
}return $list;
}
Again, this function gets the required information—in this case, the details of mail 
that has been sent—from the database and builds an array suitable for passing to the 
display_items() function.
Subscribing and Unsubscribing
On the list of mailing lists shown in Figure 30.7, each list has a button that enables usersto subscribe to it. Similarly, if users use the Show My Lists option to see the lists towhich they are already subscribed, they will see an Unsubscribe button next to each list.
These buttons activate the 
subscribe and unsubscribe actions, which trigger the
following two pieces of code, respectively:
case ‘subscribe ’:
{
subscribe(get_email(), $_GET[ ‘id’]);
display_items( ‘Subscribed Lists ’, get_subscribed_lists(get_email()),
‘information ’, ‘show-archive ’, ‘unsubscribe ’);
break;
}case ‘unsubscribe ’:
{
unsubscribe(get_email(), $_GET[ ‘id’]);Listing 30.11 Continued 36 6728 CH30  9/2/04  1:23 PM  Page 726
727 Implementing User Functions
display_items( ‘Subscribed Lists ’, get_subscribed_lists(get_email()),
‘information ’, ‘show-archive ’, ‘unsubscribe ’);
break;
}
In each case, you call a function ( subscribe() or unsubscribe() ) and then redisplay a
list of mailing lists the user is now subscribed to by using the display_items() function
again.
The subscribe() and unsubscribe() functions are shown in Listing 30.12.
Listing 30.12 subscribe() and unsubscribe() Functions from mlm_fns.php —
These Functions Add and Remove Subscriptions for a User
function subscribe($email, $listid)
{
if(!$email||!$listid||!list_exists($listid)||!subscriber_exists($email))
return false;
//if already subscribed exit
if(subscribed($email, $listid))
return false;
if(!($conn=db_connect()))
return false;
$query = “insert into sub_lists values ( ‘$email’, $listid)”;
$result = $conn->query($query);
return $result;
}
function unsubscribe($email, $listid)
{
if(!$email||!$listid)
return false;
if(!($conn=db_connect()))
return false;
$query = “delete from sub_lists where email = ‘$email’and listid = $listid”;
$result = $conn->query($query);
return $result;
}
The subscribe() function adds a row to the sub_lists table corresponding to the
subscription; the unsubscribe() function deletes this row.36 6728 CH30  9/2/04  1:23 PM  Page 727
728 Chapter 30 Building a Mailing List Manager
Changing Account Settings
The Account Settings button, when clicked, activates the account-settings action.The
code for this action is as follows:
case ‘account-settings ’:
{
display_account_form(get_email(),
get_real_name(get_email()), get_mimetype(get_email()));
break;
}
As you can see, you reuse the display_account_form() function used to create the
account in the first place. However, this time you pass in the user’s current details, whichwill be displayed in the form for easy editing.When the user clicks on the submit buttonin this form, the 
store-account action is activated as discussed previously.
Changing Passwords
Clicking on the Change Password button activates the change-password action, which
triggers the following code:
case ‘change-password ’:
{
display_password_form();break;
}
The display_password_form() function (from the output_fns.php library) simply dis-
plays a form for the user to change his password.This form is shown in Figure 30.9.
Figure 30.9 The display_password_form() function enables users to
change their passwords.
36 6728 CH30  9/2/04  1:23 PM  Page 728
729 Implementing User Functions
When a user clicks on the Change Password button at the bottom of this form, the
store-change-password action is activated.The code for this action is as follows:
case ‘store-change-password ’:
{
if(change_password(get_email(), $_POST[ ‘old_passwd ’],
$_POST[‘new_passwd ’], $_POST[ ‘new_passwd2 ’]))
{
echo ‘<p>OK: Password changed.</p>
<br /><br /><br /><br /><br /><br /> ’;
}else{
echo ‘<p>Sorry, your password could not be changed.</p> ’;
display_password_form();
}break;
}
As you can see, this code tries to change the password using the change_password()
function and reports success or failure to the user.The change_password() function,
shown in Listing 30.13, can be found in the user_auth_fns.php function library.
Listing 30.13 change_password() Function from user_auth_fns.php —This
Function Validates and Updates a User’s Password
function change_password($email, $old_password, $new_password,
$new_password_conf)
// change password for email/old_password to new_password// return true or false{
// if the old password is right 
// change their password to new_password and return true// else return falseif (login($email, $old_password)){
if($new_password==$new_password_conf){ 
if (!($conn = db_connect()))
return false;
$query = “update subscribers
set password = sha1( ‘$new_password ’)
where email = ‘$email’”;
$result = $conn->query($query);return $result;
}36 6728 CH30  9/2/04  1:23 PM  Page 729
730 Chapter 30 Building a Mailing List Manager
else
echo ‘<p> Your passwords do not match. </p> ’;
}else
echo ‘<p> Your old password is incorrect. </p> ’;
return false; // old password was wrong
}
This function is similar to other password setting and changing functions we have looked
at. It compares the two new passwords entered by the user to make sure they are thesame and, if they are, tries to update the user’s password in the database.
Logging Out
When a user clicks on the Log Out button, the log-out action is triggered.The code
executed by this action in the main script is actually in the preprocessing section of thescript, as follows:
if($action == ‘log-out’)
{
unset($action);unset($_SESSION);session_destroy();
}
This snippet of code disposes of the session variables and destroys the session. Notice that
it also unsets the action variable; this means that you enter the main case statement
without an action, triggering the following code:
default :
{
if(!check_logged_in())
display_login_form($action);
break;
}
This code allows another user to log in or allows the user to log in as someone else.Listing 30.13 Continued 36 6728 CH30  9/2/04  1:23 PM  Page 730
731 Implementing Administrative Functions
Figure 30.10 The administrator menu allows for mailing list creation and
maintenance.
The extra options are Create List (create a new mailing list), Create Mail (create a new
newsletter), and View Mail (view and send created newsletters that have not yet beensent). Now let’s look at each of these options in turn.
Creating a New List
If the administrator chooses to set up a new list by clicking on the Create List button,she will activate the 
create-list action, which is associated with the following code:
case ‘create-list ’:
{
display_list_form(get_email());break;
}
The display_list_form() function, found in the output_fns.php library, displays a 
form that enables the administrator to enter the details of a new list. It just outputs HTML,so we did not include it here.The output of this function is shown in Figure 30.11.
Implementing Administrative Functions
If someone logs in as an administrator, she will get some additional menu options, whichcan be seen in Figure 30.10.36 6728 CH30  9/2/04  1:23 PM  Page 731
732 Chapter 30 Building a Mailing List Manager
Figure 30.11 The Create List option requires the administrator to enter a
name and description (or blurb) for the new list.
When the administrator clicks on the Save List button, this activates the store-list
action, which triggers the following code in index.php :
case ‘store-list ’:
{
if(store_list($_SESSION[ ‘admin_user ’], $_POST))
{
echo ‘<p>New list added</p><br /> ’;
display_items( ‘All Lists ’, get_all_lists(), ‘information ’, 
‘show-archive ’,’’);
}else     
echo ‘<p>List could not be stored, please try ‘
.’again.</p><br /><br /><br /><br /><br /> ’;  
break;
}
As you can see, the code tries to store the new list details and then displays the new list
of lists.The list details are stored with the store_list() function, which is shown in
Listing 30.14.
36 6728 CH30  9/2/04  1:23 PM  Page 732
733 Implementing Administrative Functions
Listing 30.14 store_list() Function from mlm_fns.php —This Function Inserts a
New Mailing List into the Database
function store_list($admin_user, $details)
{
if(!filled_out($details)){
echo ‘All fields must be filled in.  Try again.<br /><br /> ’;
return false;
}else{
if(!check_admin_user($admin_user))
return false;  // how did this function get called by somebody not logged in as admin?
if(!($conn=db_connect()))
{ 
return false;
}
$query = “select count(*) 
from lists where listname = ‘{$details[ ‘name’]}’”;
$result = $conn->query($query);$row = $result->fetch_array();if($row[0] > 0){
echo ‘Sorry, there is already a list with this name. ’;
return false;
}
$query = “insert into lists values (NULL, 
‘{$details[ ‘name’]}’,
‘{$details[ ‘blurb’]}’)”;
$result = $conn->query($query);
return $result; 
}
}
This function performs a few validation checks before writing to the database: It checks
that all the details were supplied, that the current user is an administrator, and that thelist name is unique. If all goes well, the list is added to the 
lists table in the database.36 6728 CH30  9/2/04  1:23 PM  Page 733
734 Chapter 30 Building a Mailing List Manager
Uploading a New Newsletter
Finally, we come to the main thrust of this application: uploading and sending newslet-
ters to mailing lists.
When an administrator clicks on the Create Mail button, the create-mail action is
activated, as follows:
case ‘create-mail ’:
{
display_mail_form(get_email());break;
}
The administrator then sees the form shown in Figure 30.12.
Figure 30.12 The Create Mail option gives the administrator an interface for
uploading newsletter files.
Remember that for this application you are assuming that the administrator has created a
newsletter offline in both HTML and text formats and will upload both versions beforesending.We chose to implement the application this way so that administrators can usetheir favorite software to create the newsletters.This makes the application more accessible.
This form has a number of fields for an administrator to fill out.At the top is a drop-
down box of mailing lists to choose from.The administrator must also fill in a subject forthe newsletter; this is the Subject line for the eventual email.
All the other form fields are file upload fields, which you can see from the Browse
buttons next to them.T o send a newsletter, an administrator must list both the text and
HTML versions of this newsletter (although, obviously, you could change this to suityour needs).There are also a number of optional image fields where an administrator can
upload any images that she has embedded in her HTML. Each of these files must bespecified and uploaded separately.
36 6728 CH30  9/2/04  1:23 PM  Page 734
735 Implementing Administrative Functions
The form you see is similar to a regular file upload form except that, in this case, you
use it to upload multiple files.This use necessitates some minor differences in the formsyntax and in the way you deal with the uploaded files at the other end.
The code for the 
display_mail_form() function is shown in Listing 30.15.
Listing 30.15 display_mail_form() Function from output_fns.php —This
Function Displays the File Upload Form
function display_mail_form($email, $listid=0)
{
// display html form for uploading a new messageglobal $table_width;$list = get_all_lists();$lists = sizeof($list);
?>
<table cellpadding = ‘4’cellspacing = ‘0’border = ‘0’
width = ‘<?php echo $table_width?> ’>
<form enctype= ’multipart/form-data ’action=’upload.php ’method=’post’>
<tr>
<td bgcolor = “#cccccc”>
List:
</td><td bgcolor = “#cccccc”> 
<select name = “list”><?phpfor($i = 0; $i<$lists; $i++){
echo ‘<option value = ‘.$list[$i][0];
if ($listid== $list[$i][0]) echo ‘selected ’;
echo ‘>’.$list[$i][1].”</option>\n”;
}?></select>
</td>
</tr><tr>
<td bgcolor = “#cccccc”>
Subject:
</td><td bgcolor = “#cccccc”>
<input type = “text” name = “subject” value = “<?php echo $subject?>” 
size = “60” ></td>
</tr><tr><td bgcolor = “#cccccc”>
Text Version:  
</td><td bgcolor = “#cccccc”>36 6728 CH30  9/2/04  1:23 PM  Page 735
736 Chapter 30 Building a Mailing List Manager
<input type=”file” name= ’userfile[0] ’size = ‘60’>
</td></tr><tr><td bgcolor = “#cccccc”>
HTML Version:  
</td><td bgcolor = “#cccccc”>
<input type=”file” name= ’userfile[1] ’size = ‘60’>
</td></tr><tr><td bgcolor = ‘#cccccc’colspan = ’2’>Images: (optional)
<?php
$max_images = 10;for($i = 0; $i<10; $i++){
echo “<tr><td bgcolor = ‘#cccccc’>Image “. ($i+1) . ’</td>’;
echo “<td bgcolor = ‘#cccccc’>”;
echo “<input type=\”file\” name= ’userfile[“.($i+2).”] ’
size = ‘60’></td></tr>”;
}
?>   
<tr><td colspan = ‘2’bgcolor = ‘#cccccc’align = ‘center’>
<input type = “hidden” name = “max_images”  value = <?php echo $max_images?>><input type = “hidden” name = “listid”  value = <?php echo $listid?>><?php display_form_button( ‘upload-files ’); ?>
</td></form></tr></table>
<?php
}
Note that the files you want to upload will have their names entered in a series of
inputs, each of type file,and with names that range from userfile[0] to
userfile[ n].In essence, you treat these form fields in the same way that you would
treat check boxes and name them using an array convention.
If you want to upload an arbitrary number of files through a PHP script and easily
handle them as an array, you need to follow this convention.
In the script that processes this form, you actually end up with three arrays .Let’s look
at that script next.
Handling Multiple File Upload
You might remember that the file upload code is in a separate file.The complete listing
of that file, upload.php ,is shown in Listing 30.16.Listing 30.15 Continued 36 6728 CH30  9/2/04  1:23 PM  Page 736
737 Implementing Administrative Functions
Listing 30.16 upload.php —This Script Uploads All the Files Needed for a Newsletter
<?php
// this functionality is in a separate file to allow us to be// more paranoid with it
// if anything goes wrong, we will exit $max_size = 50000;include ( ‘include_fns.php ’);
session_start();
// only admin users can upload files
if(!check_admin_user()){
echo ‘You do not seem to be authorized to use this page. ’;
exit;
}
// set up the admin toolbar buttons
$buttons = array();$buttons[0] = ‘change-password ’;
$buttons[1] = ‘create-list ’;
$buttons[2] = ‘create-mail ’;
$buttons[3] = ‘view-mail ’;
$buttons[4] = ‘log-out’;
$buttons[5] = ‘show-all-lists ’;
$buttons[6] = ‘show-my-lists ’;
$buttons[7] = ‘show-other-lists ’;
do_html_header( ‘Pyramid-MLM - Upload Files ’);
display_toolbar($buttons);// check that the page is being called with the required data
if(!$_FILES[ ‘userfile ’][‘name’][0] 
||!$_FILES[ ‘userfile ’][‘name’][1]
||!$_POST[ ‘subject’]||!$_POST[ ‘list’])
{
echo ‘Problem: You did not fill out the form fully. The images are the 
only optional fields.  Each message needs a subject, text version and an HTML version. ’;
do_html_footer();exit;
}36 6728 CH30  9/2/04  1:23 PM  Page 737
738 Chapter 30 Building a Mailing List Manager
$list = $_POST[ ‘list’];
$subject = $_POST[ ‘subject’];
if(!($conn=db_connect()))
{
echo ‘<p>Could not connect to db</p> ’; 
do_html_footer();exit;
}
// add mail details to the DB  
$query = “insert into mail values (NULL, 
‘{$_SESSION[ ‘admin_user ’]}’,
‘$subject ’,
‘$list’,
‘STORED’, NULL, NULL)”;
$result = $conn->query($query);if(!$result)   {   
do_html_footer();  exit; 
}
//get the id MySQL assigned to this mail
$mailid = $conn->insert_id;
if(!$mailid)   
{   
do_html_footer();  exit; 
}
// creating directory will fail if this is not the first message archived
// that’s ok
@ mkdir( ‘archive/ ’.$list, 0700);
// it is a problem if creating the specific directory for this mail fails
if(!mkdir( ‘archive/ ’.$list.”/$mailid”, 0700))
{   
do_html_footer();  exit; 
}Listing 30.16 Continued 36 6728 CH30  9/2/04  1:23 PM  Page 738
739 Implementing Administrative Functions
// iterate through the array of uploaded files
$i = 0;while ($_FILES[ ‘userfile ’][‘name’][$i]&&
$_FILES[ ‘userfile ’][‘tmp_name ’][$i]!=’none’)
{
echo ‘<p>Uploading ‘.$_FILES[ ‘userfile ’][‘name’][$i].’- ‘;
echo $_FILES[ ‘userfile ’][‘size’][$i].’bytes.</p> ’;
if ($_FILES[ ‘userfile ’][‘size’][$i]==0)
{
echo ‘Problem: ‘.$_FILES[ ‘userfile ’][‘name’][$i].
‘is zero length ’;
$i++;continue;  
}
if ($_FILES[ ‘userfile ’][‘size’][$i]>$max_size)
{
echo ‘Problem: ‘.$_FILES[ ‘userfile ’][‘name’][$i].’is over ‘
.$max_size. ’bytes’;
$i++;continue;  
}
// we would like to check that the uploaded image is an image
// if getimagesize() can work out its size, it probably is.if($i>1&&!getimagesize($_FILES[ ‘userfile ’][‘tmp_name ’][$i]))
{
echo ‘Problem: ‘.$_FILES[ ‘userfile ’][‘name’][$i].
‘is corrupt, or not a gif, jpeg or png ’;
$i++;continue;  
}
// file 0 (text message) and file 1 (html message) are special cases
if($i==0) 
$destination = “archive/$list/$mailid/text.txt”;
else if($i == 1)
$destination = “archive/$list/$mailid/index.html”;
else{
$destination = “archive/$list/$mailid/”Listing 30.16 Continued 36 6728 CH30  9/2/04  1:23 PM  Page 739
740 Chapter 30 Building a Mailing List Manager
.$_FILES[ ‘userfile ’][‘name’][$i];
$query = “insert into images 
values ($mailid, 
‘“.addslashes($_FILES[ ‘userfile ’][‘name’][$i]).” ’,
‘“.addslashes($_FILES[ ‘userfile ’][‘type’][$i]).” ’
)”;
$result = $conn->query($query);
}//if we are using PHP version >= 4.03
if (!is_uploaded_file($_FILES[ ‘userfile ’][‘tmp_name ’][$i]))
{ 
// possible file upload attack detectedecho ‘Something funny happening with ‘
.$_FILES[ ‘userfile ’][‘name’].’, not uploading. ’;
do_html_footer();exit;
}
move_uploaded_file($_FILES[ ‘userfile ’][‘tmp_name ’][$i], 
$destination);
/*
// if version <= 4.02copy ($userfile[$i], $destination);
unlink($userfile[$i]);
*/
$i++;
}
display_preview_button($list, $mailid, ‘preview-html ’);
display_preview_button($list, $mailid, ‘preview-text ’);
display_button( ‘send’, “&id=$mailid”);
echo ‘<br /><br /><br /><br /><br /> ’;
do_html_footer();
?>
Let’s walk through the steps in Listing 30.16. First, you start a session and check that the
user is logged in as an administrator; you don’t want to let anybody else upload files.
Strictly speaking, you should probably also check the list and mailid variables forListing 30.16 Continued 36 6728 CH30  9/2/04  1:23 PM  Page 740
741 Implementing Administrative Functions
unwanted characters, but we ignored this for the sake of brevity.
Next, you set up and send the headers for the page and validate that the form was
filled in correctly.This step is important here because it’s quite a complex form for theuser to fill out.
Then you create an entry for this mail in the database and set up a directory in the
archive for the mail to be stored in.
Next comes the main part of the script, which checks and moves each of the
uploaded files.This is the part that is different when uploading multiple files.Y ou nowhave four arrays to deal with; these arrays are called 
$_FILES[ ‘userfile ’][‘name’],
$_FILES[ ‘userfile ’][‘tmp_name ’],$_FILES[ ‘userfile ’][‘size’],and
$_FILES[ ‘userfile ’][‘type’].They correspond to their similarly named 
equivalents in a single file upload, except that each of them is an array.The first file in the form is detailed in 
$_FILES[ ‘userfile ’][‘tmp_name ’][0],
$_FILES[ ‘userfile ’][‘name’][0],$_FILES[ ‘userfile ’][‘size’][0],and
$_FILES[ ‘userfile ’][‘type’][0].
Given these three arrays, you perform the usual safety checks and move the files into
the archive.
Finally, you give the administrator some buttons that she can use to preview the
newsletter she has uploaded before she sends it and a button to send it.Y ou can see the
output from upload.php in Figure 30.13.
Figure 30.13 The upload script reports the files uploaded and their sizes.
Previewing the Newsletter
The administrator can preview a newsletter in two ways before sending it. She can 
access the preview functions from the upload screen if she wants to preview immediatelyafter upload.The alternative is to click on the View Mail button, which will show her 
36 6728 CH30  9/2/04  1:23 PM  Page 741
742 Chapter 30 Building a Mailing List Manager
all the unsent newsletters in the system, if she wants to preview and send mail later.
The View Mail button activates the view-mail action, which triggers the following
code:
case ‘view-mail ’:
{
display_items( ‘Unsent Mail ’, get_unsent_mail(get_email()),
‘preview-html ’, ‘preview-text ’, ‘send’);
break;
}
As you can see, this code again uses the display_items() function with buttons for the
preview-html ,preview-text ,and send actions.
Note that the Preview buttons do not actually trigger an action but instead link
directly to the newsletter in the archive. If you look back at Listings 30.7 and 30.16, youwill see that the 
display_preview_button() function creates these buttons instead of
the usual display_button() function.
The display_button() function creates an image link to a script with GETparame-
ters where required; the display_preview_button() function gives a plain link into the
archive.This link pops up in a new window, achieved using the target=new attribute of
the HTML anchor tag.Y ou can see the result of previewing the HTML version of a
newsletter in Figure 30.14.
Figure 30.14 This preview of an HTML newsletter is shown complete 
36 6728 CH30  9/2/04  1:23 PM  Page 742
743 Implementing Administrative Functions
with images.
Sending the Message
Clicking on the Send button for a newsletter activates the send action, which triggers
the following code:
case ‘send’:
{
send($_GET[ ‘id’], $_SESSION[ ‘admin_user ’]);
break;
}
This code calls the send() function, which you can find in the mlm_fns.php library.
This long function, shown in Listing 30.17, is also the point at which you use the
Mail_mime class.
Listing 30.17 send() Function from mlm_fns.php —This Function Finally Sends Out
a Newsletter
function send($mailid, $admin_user)
{
if(!check_admin_user($admin_user))
return false;
if(!($info = load_mail_info($mailid)))
{ 
echo “Cannot load list information for message $mailid”;return false;
}$subject = $info[ ‘subject’];
$listid = $info[ ‘listid’];
$status = $info[ ‘status’];
$sent = $info[ ‘sent’];
$from_name = ‘Pyramid MLM ’;
$from_address = ‘return@address ’;
$query = “select email from sub_lists where listid = $listid”;
$conn = db_connect();
$result = $conn->query($query);if (!$result){
echo $query;return false;  36 6728 CH30  9/2/04  1:23 PM  Page 743
744 Chapter 30 Building a Mailing List Manager
}
else if ($result->num_rows==0){
echo “There is nobody subscribed to list number $listid”;return false; 
}
// include PEAR mail classes
require( ‘Mail.php ’);
require( ‘Mail/mime.php ’);
// instantiate MIME class and pass it the carriage return/line feed 
// character used on this system$message = new Mail_mime(“\r\n”);
// read in the text version of the newsletter
$textfilename = “archive/$listid/$mailid/text.txt”;$tfp = fopen($textfilename, “r”);$text = fread($tfp, filesize($textfilename));fclose($tfp);
// read in the HTML version of the newsletter
$htmlfilename = “archive/$listid/$mailid/index.html”;$hfp = fopen($htmlfilename, “r”);$html = fread($hfp, filesize($htmlfilename));fclose($hfp);
// add HTML and text to the mimemail object
$message->setTXTBody($text);$message->setHTMLBody($html);
// get the list of images that relate to this message
$query = “select path, mimetype from images where mailid = $mailid”;$result = $conn->query($query);if(!$result){
echo ‘<p>Unable to get image list from database.</p> ’;
return false;
}$num = $result->num_rows;for($i = 0; $i<$num; $i++){  
//load each image from diskListing 30.17 Continued 36 6728 CH30  9/2/04  1:23 PM  Page 744
745 Implementing Administrative Functions
$row = $result->fetch_array();
$imgfilename = “archive/$listid/$mailid/”.$row[0];$imgtype = $row[1];
// add each image to the object
$message->addHTMLImage($imgfilename, $imgtype, $imgfilename, true);
}
// create message body
$body = $message->get();  
// create message headers
$from = ‘“‘.get_real_name($admin_user). ’” <’.$admin_user. ’>’;
$hdrarray = array( ‘From’=> $from,
‘Subject’=> $subject);
$hdrs = $message->headers($hdrarray);// create the actual sending object
$sender =& Mail::factory( ‘mail’);
if($status == ‘STORED’)
{
// send the HTML message to the administrator
$sender->send($admin_user, $hdrs, $body);
// send the plain text version of the message to administrator
mail($admin_user, $subject, $text, ‘From: “‘.
get_real_name($admin_user).‘“ <’.$admin_user.”>”);
echo “Mail sent to $admin_user”; // mark newsletter as tested
$query = “update mail set status = ‘TESTED’where mailid = $mailid”;
$result = $conn->query($query);
echo ‘<p>Press send again to send mail to whole list.<center> ’;
display_button( ‘send’, “&id=$mailid”);
echo ‘</center></p> ’;
}    else if($status == ‘TESTED’)Listing 30.17 Continued 36 6728 CH30  9/2/04  1:23 PM  Page 745
746 Chapter 30 Building a Mailing List Manager
{
//send to whole list
$query = “select subscribers.realname, sub_lists.email, 
subscribers.mimetype  
from sub_lists, subscribers where listid = $listid and 
sub_lists.email = subscribers.email”;
$result = $conn->query($query);
if(!$result)
echo ‘<p>Error getting subscriber list</p> ’;
$count = 0;      
// for each subscriberwhile( $subscriber = $result->fetch_row()){
if($subscriber[2]== ’H’)
{
//send HTML version to people who want it$sender->send($subscriber[1], $hdrs, $body);
}else{
//send text version to people who don ’t want HTML mail
mail($subscriber[1], $subject, $text, 
‘From: “‘.get_real_name($admin_user). ’” <’.$admin_user.”>”);
}$count++; 
}
$query = “update mail set status = ‘SENT’, sent = now()
where mailid = $mailid”;
$result = $conn->query($query);echo “<p>A total of $count messages were sent.</p>”; 
}else if($status == ‘SENT’)
{
echo ‘<p>This mail has already been sent.</p> ’;
}
}
This function does several different things. It test-mails the newsletter to the administra-Listing 30.17 Continued 36 6728 CH30  9/2/04  1:23 PM  Page 746
747 Implementing Administrative Functions
tor before sending it, and it keeps track of this test by tracking the status of a piece of
mail in the database.When the upload script uploads a piece of mail, it sets the initialstatus of that mail to 
“STORED” .
If the send() function finds that a mail has the status “STORED” ,it will update this
status to “TESTED” and send it to the administrator.The status “TESTED” means the
newsletter has been test-mailed to the administrator. If the status is “TESTED” ,it will be
changed to “SENT” and sent to the whole list.This means each piece of mail must
essentially be sent twice: once in test mode and once in real mode.
The function also sends two different kinds of email: the text version, which it sends
using PHP’s mail() function; and the HTML kind, which it sends using the Mail_mime
class.We’ve used mail() many times in this book, so let’s look at how to use the
Mail_mime class.We do not cover this class comprehensively but instead explain how we
used it in this fairly typical application.
You begin by including the class files and creating an instance of the Mail_mime class:
// include PEAR mail classes
include( ‘Mail.php ’);
include( ‘Mail/mime.php ’);
// instantiate MIME class and pass it the carriage return/line feed
// character used on this system$message = new Mail_mime(“\r\n”);
Note that two class files are included here.Y ou use the generic Mail class from PEAR
later in this script to actually send the mail.This class comes with your PEAR installa-tion.
The 
Mail_mime class is used to create the MIME format message that will be sent.
You next read in the text and HTML versions of the mail and add them to the
Mail_mime class:
// read in the text version of the newsletter
$textfilename = “archive/$listid/$mailid/text.txt”;$tfp = fopen($textfilename, “r”);$text = fread($tfp, filesize($textfilename));fclose($tfp);
// read in the HTML version of the newsletter
$htmlfilename = “archive/$listid/$mailid/index.html”;$hfp = fopen($htmlfilename, “r”);$html = fread($hfp, filesize($htmlfilename));fclose($hfp);36 6728 CH30  9/2/04  1:23 PM  Page 747
748 Chapter 30 Building a Mailing List Manager
// add HTML and text to the mimemail object
$message->setTXTBody($text);$message->setHTMLBody($html);
You then load the image details from the database and loop through them, adding each
image to the piece of mail you want to send:
$num = $result->num_rows;
for($i = 0; $i<$num; $i++){
//load each image from disk$row = $result->fetch_array();$imgfilename = “archive/$listid/$mailid/”.$row[0];$imgtype = $row[1];
// add each image to the object
$message->addHTMLImage($imgfilename, $imgtype, $imgfilename, true);
}
The parameters you pass to addHTMLImage() are the name of the image file (or you
could also pass the image data), the MIME type of the image, the filename again, and true
to signify that the first parameter is a filename rather than file data. (If you wanted topass raw image data, you would pass the data, the 
MIME type, an empty parameter, and
false .) These parameters are a little cumbersome.
At this stage, you need to create the message body before you can set up the message
headers.Y ou create the body as follows:
// create message body
$body = $message->get();
You can then create the message headers with a call to the Mail_mime class ’s head-
ers() function:
// create message headers
$from = ‘“‘.get_real_name($admin_user). ’” <’.$admin_user. ’>’;
$hdrarray = array(
‘From’=> $from,
‘Subject’=> $subject);
$hdrs = $message->headers($hdrarray);
Finally, having set up the message, you can send it.T o do this, you need to instantiate the
PEAR Mail class and pass to it the message you have created.Y ou begin by instantiating
the class, as follows:
// create the actual sending object
$sender =& Mail::factory( ‘mail’);36 6728 CH30  9/2/04  1:23 PM  Page 748
749 Extending the Project
(The parameter ‘mail’here just tells the Mail class to use PHP’s mail() function to
send messages.Y ou could also use ‘sendmail ’or ‘smtp’as the value for this parameter
for the obvious results.)
Next, you send the mail to each of your subscribers.Y ou do this by retrieving and
looping through each of the users subscribed to this list and using either the Mail
send() or regular mail() depending on the user’s MIME type preference:
if($subscriber[2]== ’H’)
{
//send HTML version to people who want it$sender->send($subscriber[1], $hdrs, $body);
}else{
//send text version to people who don ’t want HTML mail
mail($subscriber[1], $subject, $text,
‘From: “‘.get_real_name($admin_user). ’” <’.$admin_user.”>”);
}
The first parameter of $sender->send() should be the user’s email address; the second,
the headers; and the third, the message body.
That’s it! Y ou have now completed building the mailing list application.
Extending the Project
As usual with these projects, there are many ways you could extend the functionality.You might like to
nConfirm membership with subscribers so that people can’t be subscribed without
their permission.Y ou typically do this by sending email to their accounts anddeleting those who do not reply.This approach also cleans out any incorrect emailaddresses from the database.
nGive the administrator powers to approve or reject users who want to subscribe totheir lists.
nAdd open list functionality that allows any member to send email to the list.
nLet only registered members see the archive for a particular mailing list.
nAllow users to search for lists that match specific criteria. For example, users mightbe interested in golf newsletters.When the number of newsletters grows past aparticular size, a search would be useful to find specific ones.
nMake the program more efficient to handle a large mailing list.T o do this, use apurpose-built mailing list manager such as exmlm that can queue and send mes-sages in a multithreaded way. Calling 
mail() many times in PHP is not very effi-
cient, making a PHP back end unsuitable for large subscriber lists. Of course, youcould still build the front end in PHP but have ezmlm handle the grunt work.36 6728 CH30  9/2/04  1:23 PM  Page 749
750 Chapter 30 Building a Mailing List Manager
Next
In the next chapter, you implement a web forum application that will enable users to
have online discussions structured by topic and conversational threads.36 6728 CH30  9/2/04  1:23 PM  Page 750
31
Building Web Forums
O NE GOOD WAY TO GET USERS TO RETURN TO your site is to offer web forums.They
can be used for purposes as varied as philosophical discussion groups and product tech-nical support. In this chapter, you implement a web forum in PHP .An alternative is touse an existing package, such as Phorum, to set up your forums.
Web forums are sometimes also called discussion boards or threaded discussion groups .The
idea of a forum is that people can post articles or questions to it, and others can read andreply to their questions. Each topic of discussion in a forum is called a thread .
For this project, you implement a web forum called blah-blah. Users will be able to
nStart new threads of discussion by posting articles
nPost articles in reply to existing articles
nView articles that have been posted
nView the threads of conversation in the forum
nView the relationship between articles—that is, see which articles are replies to
other articles
The Problem
Setting up a forum is actually quite an interesting problem.Y ou need some way of stor-ing the articles in a database with author, title, date, and content information.At firstglance, this database might not seem much different from the Book-O-Rama database.
The way most threaded discussion software works, however, is that, along with show-
ing you the available articles, it shows you the relationship between articles.That is, youare able to see which articles are replies to other articles (and which article they’re fol-lowing up) and which articles are new topics of discussion.
You can see examples of discussion boards that implement this format in many places,
including Slashdot:
http://slashdot.org37 6728 CH31  9/2/04  1:17 PM  Page 751
752 Chapter 31 Building Web Forums
Deciding how to display these relationships requires some careful thought. For this sys-
tem, users should be able to view an individual message, a thread of conversation withthe relationships shown, or all the threads on the system.
Users must also be able to post new topics or replies.This is the easy part.
Solution Components
As we mentioned previously, the process of storing and retrieving the author and text of amessage is easy.The most difficult part of this application is finding a database structurethat will store the information you want and a way of navigating that structure efficiently.
The structure of articles in a discussion might look like the one shown in Figure 31.1.
Figure 31.1 An article in a threaded discussion might be the first article in a
new topic, but more commonly it is a response to another article.
In this diagram, you can see that the initial posting starts off a topic, with three replies.
Some of the replies have replies.These replies could also have replies, and so on.
Looking at the diagram gives you a clue as to how you can store and retrieve the
article data and the links between articles.This diagram shows a tree structure .If you’ve
done much programming, you’ll know that this is one of the staple data structures used. In the diagram, there are nodes—or articles—and links—or relationships between
articles—just as in any tree structure. (If you are not familiar with trees as a data struc-ture, don’t worry; we cover the basics as we go.)
The tricks to getting this all to work are
1. Finding a way to map this tree structure into storage—in this case, into a MySQL
database
2. Finding a way to reconstruct the data as requiredInitial posting Reply 1 to Reply 1 Reply 1 
Reply 1 to Reply 3 Reply 3 Reply 2 Reply 2 to Reply 137 6728 CH31  9/2/04  1:17 PM  Page 752
753 Solution Overview
For this project, you begin by implementing a MySQL database that enables you to store
articles between use.Y ou then build simple interfaces to enable saving of articles.
When you load the list of articles for viewing, you will load the headers of each arti-
cle into a tree_node PHP class. Each tree_node will contain an article’s headers and a
set of the replies to that article.
The replies will be stored in an array. Each reply will itself be a tree_node that can
contain an array of replies to that article, which are themselves tree_node s, and so on.This
process continues until you reach the so-called leaf nodes of the tree, the nodes that do not
have any replies.Y ou then have a tree structure that looks like the one in Figure 31.1.
Some terminology:The message that you are replying to can be called the parent node
of the current node.Any replies to the message can be called the children of the current
node. If you imagine that this tree structure is like a family tree, this terminology will beeasy to remember.
The first article in this tree structure—the one with no parent—is sometimes called
the root node.
Note
Calling the first article the root can be unintuitive because you usually draw the root node at the top of
diagrams, unlike the roots of real trees.
To build and display the tree structure for this project, you will write recursive func-
tions. (We discussed recursion in Chapter 5,“Reusing Code and Writing Functions.”)
We decided to use a class for this structure because it’s the easiest way to build a com-
plex, dynamically expanding data structure for this application. It also means you havequite simple, elegant code to do something quite complex.
Solution Overview
Toreally understand this project, it’s probably a good idea to work through the code,
which we do in a moment.This application has less bulk than some of the others, butthe code is a bit more complex.
This application contains only three real pages. It has a main index page that shows all
the articles in the forum as links to the articles. From here, you can add a new article,view a listed article, or change the way the articles are viewed by expanding and collaps-ing branches of the tree. (More on this shortly.) From the article view, you can post areply to that article or view the existing replies to that article.The new article page
enables you to enter a new post, either a reply to an existing message or a new, unrelatedmessage.
The system flow diagram is shown in Figure 31.2.37 6728 CH31  9/2/04  1:17 PM  Page 753
754 Chapter 31 Building Web Forums
Figure 31.2 The blah-blah forum system has three main parts.
A summary of the files in this application is shown in Table 31.1.
Table 31.1 Files in the Web Forum Application
Name Type Description
index.php Application Main page the users see when they enter the site.
Contains an expandable and collapsible list of all thearticles on the site.
new_post.php Application Form used for posting new articles.
store_new_post.php Application StorPage where articles from the new_post.php
form are stored.
view_post.php Application Page that displays an individual post and a list of the
replies to that post.
treenode_class.php Library File that contains the treenode class, which you
use to display the hierarchy of posts.
include_fns.php Library List of all the other function libraries for this appli-
cation (the other Library-type files listed here).
data_valid_fns.php Library Collection of data validation functions.
db_fns.php Library Collection of database connectivity functions.
discussion_fns.php Library Collection of functions for dealing with storing and
retrieving postings.
output_fns.php Library Collection of functions for outputting HTML.
create_database.sql SQL SQL to set up the database required for this 
application.
Now let’s look at the implementation.
Designing the Database
There are a few attributes you need to store about each article posted to the forum: the
name of the person who wrote it, called the poster;the title of the article; the time it was
posted; and the article body.Y ou therefore need a table of articles, and you need to createa unique ID for each article, called the 
postid .Article list
(different views)
View an article
replyAdd a new article37 6728 CH31  9/2/04  1:17 PM  Page 754
755 Designing the Database
Each article needs to have some information about where it belongs in the hierarchy.
You could store information about an article’s children with the article. However, each
article can have many replies, so storing all this information can lead to some problems indatabase construction. Because each article can be a reply to only one other, it is easier tostore a reference to the parent article—that is, the article that this article is replying to.
You therefore need to store the following data for each article:
npostid —A unique ID for each article
nparent —The postid of the parent article
nposter —The author of this article
ntitle —The title of this article
nposted —The date and time that the article was posted
nmessage —The body of the article
You will also add a couple of optimizations to this information.
When you are trying to determine whether an article has any replies, you have to run
a query to see whether any other articles have this article as a parent.Y ou need thisinformation for every post that you list.The fewer queries you have to run, the faster thecode will run.Y ou can remove the need for these queries by adding a field to showwhether there are any replies.Y ou can call this field 
children and make it effectively
Boolean:The value will be 1 if the node has children and 0 (zero) if it does not.
There is always a price to pay for optimizations. Here, you store redundant data.
Because you are storing the data in two ways, you must be careful to make sure that thetwo representations agree with each other.When you add children, you must update theparent. If you allow the deletion of children, you need to update the parent node tomake sure the database is consistent. In this project, you are not going to build a facilityfor deleting articles, so you avoid half of this problem. If you decide to extend this code,bear this issue in mind.
You will make one other optimization in this project:Y ou will separate the message
bodies from the other data and store them in a separate table.The reason for this is thatthis attribute will have the MySQL type 
text.Having this type in a table can slow down
queries on that table. Because you will do many small queries to build the tree structure,using this type would slow it down quite a lot.With the message bodies in a separatetable, you can just retrieve them when a user wants to look at a particular message.
MySQL can search fixed-size records faster than variable-sized records. If you need to
use variable-sized data, you can help by creating indexes on the fields that will be usedto search the database. For some projects, you would be best served by leaving the textfield in the same record as everything else and specifying indexes on all the columns thatyou will search on. Indexes take time to generate, though, and the data in the forums is
likely to be changing all the time, so you would need to regenerate your indexes fre-quently.37 6728 CH31  9/2/04  1:17 PM  Page 755
756 Chapter 31 Building Web Forums
You will also add an area attribute in case you later decide to implement multiple
forums with the one application.Y ou won’t implement this capability here, but this wayit is reserved for future use.
Given all these considerations, the SQL to create the database for the forum database
is shown in Listing 31.1.
Listing 31.1 create_database.sql —SQL to Create the Discussion Database
create database discussion;
use discussion;create table header
(
parent int not null,poster char(20) not null,title char(20) not null,children int default 0 not null,area int default 1 not null,posted datetime not null,postid int unsigned not null auto_increment primary key
);
create table body
(
postid int unsigned not null primary key,message text
);
grant select, insert, update, delete
on discussion.*
to discussion@localhost identified by ‘password’;
You can create this database structure by running this script through MySQL as follows:
mysql -u root -p < create_database.sql
You need to supply your root password.Y ou should probably also change the password
we set up for the discussion user to something better.
To understand how this structure will hold articles and their relationship to each
other, look at Figure 31.3.37 6728 CH31  9/2/04  1:17 PM  Page 756
757 Viewing the Tree of Articles
Figure 31.3 The database holds the tree structure in a flattened 
relational form.
As you can see in the figure, the parent field for each article in the database holds the
postid of the article above it in the tree.The parent article is the article that is being
replied to.
You can also see that the root node, postid 1 ,has no parent.All new topics of dis-
cussion will be in this position. For articles of this type, you store their parent as a 0(zero) in the database.
Viewing the Tree of Articles
Next, you need a way of getting information out of the database and representing itback in the tree structure.Y ou do this with the main page,
index.php .For the purposes
of this explanation, we input some sample posts via the article posting scripts
new_post.php and store_new_post.php .We look at them in the next section.
We cover the article list first because it is the backbone of the site.After this, every-
thing else will be easy.
Figure 31.4 shows the initial view of the articles in the site that a user would see.This figure shows all the initiating articles. None of them are replies; each one is the
first article on a particular topic.
In this case, you have a number of options.The menu bar lets you add a new post and
expand or collapse your view of the articles.
Tounderstand what these options mean, look at the posts. Some of them have plus
symbols next to them.This means that these articles have been replied to.T o see thereplies to a particular article, you can click the plus symbol.The result of clicking one of
these symbols is shown in Figure 31.5.Database representation
postid: 1 parent: 0
postid: 2 parent: 1
postid: 3 parent: 1
postid: 4 parent: 2
postid: 5 parent: 2Tree representation
postid: 1
postid: 2 postid: 3
postid: 4 postid: 537 6728 CH31  9/2/04  1:17 PM  Page 757
758 Chapter 31 Building Web Forums
Figure 31.4 The initial view of the article list shows the articles in 
“collapsed” form.
Figure 31.5 The thread of discussion about persistence has been expanded.
As you can see, clicking the plus symbol displays the replies to that first article.The plus
symbol then turns into a minus symbol. If you click this symbol, all the articles in thisthread will be collapsed, returning you to the initial view.
37 6728 CH31  9/2/04  1:17 PM  Page 758
759 Viewing the Tree of Articles
You might also notice that one of the replies in Figure 31.5 has a plus symbol next to
it.This means that there are replies to this reply.The level of replies can continue to anarbitrary depth, and you can view each reply set by clicking on the appropriate plussymbol.
The two menu bar options Expand and Collapse expand all possible threads and col-
lapse all possible threads, respectively.The result of clicking the Expand button is shownin Figure 31.6.
Figure 31.6 All the threads have now been expanded.
If you look closely at Figures 31.5 and 31.6, you can see that some parameters are passed
back to index.php in the command line. In Figure 31.5, the URL looks as follows:
http://localhost/phpmysql3e/chapter31/index.php?expand=10#10
The script reads this line as “Expand the item with postid 10.”The #is just an HTML
anchor that scrolls the page down to the part that has just been expanded.
In Figure 31.6, the URL reads
http://localhost/phpmysql3e/chapter31/index.php?expand=all
Clicking the Expand button passes the parameter expand with the value all.
Expanding and Collapsing
To see how to create the article view, look at the index.php script, shown in Listing 31.2.
37 6728 CH31  9/2/04  1:17 PM  Page 759
760 Chapter 31 Building Web Forums
Listing 31.2 index.php —Script to Create the Article View on the Main Page of the
Application
<?php
include (‘include_fns.php’);session_start();
// check if we have created our session variable
if(!isset($_SESSION[‘expanded’])){
$_SESSION[‘expanded’] = array();
}
// check if an expand button was pressed
// expand might equal ‘all’ or a postid or not be setif(isset($_GET[‘expand’])){
if($_GET[‘expand’] == ‘all’)
expand_all($_SESSION[‘expanded’]);
else
$_SESSION[‘expanded’][$_GET[‘expand’]] = true;
}
// check if a collapse button was pressed
// collapse might equal all or a postid or not be setif(isset($_GET[‘collapse’])){
if($_GET[‘collapse’]==’all’)
$_SESSION[‘expanded’] = array();
else
unset($_SESSION[‘expanded’][$_GET[‘collapse’]]);
}
do_html_header(‘Discussion Posts’);display_index_toolbar();// display the tree view of conversations
display_tree($_SESSION[‘expanded’]);
do_html_footer();
?>37 6728 CH31  9/2/04  1:17 PM  Page 760
761 Viewing the Tree of Articles
This script uses the following three variables to do its job:
nThe session variable expanded ,which keeps track of which threads are expanded.
This variable can be maintained from view to view, so you can have multiplethreads expanded.The 
expanded variable is an associative array that contains the
postid of articles that will have their replies expanded.
nThe parameter expand ,which tells the script which new threads to expand.
nThe parameter collapse ,which tells the script which threads to collapse.
When you click a plus or minus symbol or the Expand or Collapse button, this action
recalls the index.php script with new parameters for expand or collapse .You use
expanded from page to page to track which threads should be expanded in any given view.
The index.php script begins by starting a session and adding the expanded variable
as a session variable if this has not already been done.After that, the script checkswhether it has been passed an 
expand or collapse parameter and modifies the 
expanded array accordingly. Look at the code for the expand parameter:
if(isset($_GET[‘expand’]))
{
if($_GET[‘expand’] == ‘all’)
expand_all($_SESSION[‘expanded’]);
else
$_SESSION[‘expanded’][$_GET[‘expand’]] = true;
}
If you click on the Expand button, the function expand_all() is called to add all the
threads that have replies into the expanded array. (We look at this in a moment.)
If you try to expand a particular thread, you will be passed a postid via expand .Y ou
therefore add a new entry to the expanded array to reflect this.
The expand_all() function is shown in Listing 31.3.
Listing 31.3 expand_all() Function from discussion_fns.php —Processes the
$expanded Array to Expand All the Threads in the Forum
function expand_all(&$expanded)
{
// mark all threads with children as to be shown expanded$conn = db_connect();$query = ‘select postid from header where children = 1’;$result = $conn->query($query);$num = $result->num_rows;for($i = 0; $i<$num; $i++){
$this_row = $result->fetch_row();$expanded[$this_row[0]]=true;
}
}37 6728 CH31  9/2/04  1:17 PM  Page 761
762 Chapter 31 Building Web Forums
This function runs a database query to work out which of the threads in the forum have
replies, as follows:
select postid from header where children = 1
Each of the articles returned is then added to the expanded array.Y ou run this query to
save time later.Y ou could simply add all articles to the expanded list, but it would bewasteful to try processing replies that do not exist.
Collapsing the articles works in the opposite way, as follows:
if(isset($_GET[‘collapse’]))
{
if($_GET[‘collapse’]==’all’)
$_SESSION[‘expanded’] = array();
else
unset($_SESSION[‘expanded’][$_GET[‘collapse’]]);
}
You can remove items from the expanded array by unsetting them.Y ou remove the thread
that is to be collapsed or unset the entire array if the entire page is to be collapsed.
All this is preprocessing, so you know which articles should be displayed and which
should not.The key part of the script is the call to display_tree($_SESSION
[‘expanded’]); which actually generates the tree of displayed articles.
Displaying the Articles
Let’s look at the display_tree() function, shown in Listing 31.4.
Listing 31.4 display_tree() Function from output_fns.php —Creates the Root
Node of the Tree Structure
function display_tree($expanded, $row = 0, $start = 0)
{
// display the tree view of conversations
global $table_width;
echo “<table width = ‘$table_width’>”;
// see if we are displaying the whole list or a sublist
if($start>0)
$sublist = true;
else
$sublist = false;
// construct tree structure to represent conversation summary
$tree = new treenode($start, ‘’, ‘’, ‘’, 1, true, -1, $expanded, $sublist);37 6728 CH31  9/2/04  1:17 PM  Page 762
763 Viewing the Tree of Articles
// tell tree to display itself
$tree->display($row, $sublist);
echo ‘</table>’;
}
The main role of the display_tree() function is to create the root node of the tree
structure.Y ou use it to display the whole index and to create subtrees of replies on the
view_post.php page.As you can see, it takes three parameters.The first, $expanded ,i s
the list of article postid s to display in an expanded fashion.The second, $row,is an indi-
cator of the row number that will be used to work out the alternating colors of the rowsin the list.
The third parameter,
$start ,tells the function where to start displaying articles.This
is the postid of the root node for the tree to be created and displayed. If you are dis-
playing the whole thing, as you are on the main page, this will be 0 (zero), meaning dis-play all the articles with no parent. If this parameter is 0, you set 
$sublist to false and
display the whole tree.
If the parameter is greater than 0, you use it as the root node of the tree to display, set
$sublist to true,and build and display only part of the tree. (Y ou use sublists in the
view_post.php script.)
The most important task this function performs is instantiating an instance of the
treenode class that represents the root of the tree.This is not actually an article, but it
acts as the parent of all the first-level articles, which have no parent.After the tree hasbeen constructed, you simply call its display function to actually display the list of articles.
Using the treenode Class
The code for the treenode class is shown in Listing 31.5. (Y ou might find it useful at
this stage to look over Chapter 6,“Object-Oriented PHP ,” to remind yourself how class-es work.)
Listing 31.5 treenode Class from treenode_class.php — The Backbone of the
Application
<?php
// functions for loading, contructing and // displaying the tree are in this file 
class treenode
{ Listing 31.4 Continued37 6728 CH31  9/2/04  1:17 PM  Page 763
764 Chapter 31 Building Web Forums
// each node in the tree has member variables containing 
// all the data for a post except the body of the messagepublic $m_postid;public $m_title;public $m_poster;public $m_posted;public $m_children;public $m_childlist;public $m_depth;
public function __construct($postid, $title, $poster, $posted, $children,
$expand, $depth, $expanded, $sublist)
{ 
// the constructor sets up the member variables, but more // importantly recursively creates lower parts of the tree$this->m_postid = $postid;$this->m_title = $title;$this->m_poster = $poster;$this->m_posted = $posted;$this->m_children =$children;$this->m_childlist = array();$this->m_depth = $depth;
// we only care what is below this node if it 
// has children and is marked to be expanded// sublists are always expandedif(($sublist||$expand) && $children){
$conn = db_connect();
$query = “select * from header where parent = $postid order by posted”;
$result = $conn->query($query);
for ($count=0; $row = @$result->fetch_assoc(); $count++)
{
if($sublist||$expanded[ $row[‘postid’] ] == true)
$expand = true;
else
$expand = false;
$this->m_childlist[$count]= new treenode($row[‘postid’],$row[‘title’],
$row[‘poster’],$row[‘posted’],$row[‘children’], $expand,$depth+1, $expanded, $sublist);
}
}
}  Listing 31.5 Continued 37 6728 CH31  9/2/04  1:17 PM  Page 764
765 Viewing the Tree of Articles
function display($row, $sublist = false)
{
// as this is an object, it is responsible for displaying itself
// $row tells us what row of the display we are up to 
// so we know what color it should be
// $sublist tells us whether we are on the main page
// or the message page.  Message pages should have // $sublist = true.  // On a sublist, all messages are expanded and there are// no “+” or “-” symbols.
// if this is the empty root node skip displaying
if($this->m_depth > -1)  {
//color alternate rowsecho ‘<tr><td bgcolor = ‘;if ($row%2) 
echo “‘#cccccc’>”;
else
echo “‘#ffffff’>”;
// indent replies to the depth of nesting
for($i = 0; $i < $this->m_depth; $i++){
echo “<img src = ‘images/spacer.gif’ height = ‘22’
width = ‘22’ alt = ‘’ valign = ‘bottom’ />”;
}
// display + or - or a spacer 
if ( !$sublist && $this->m_children && sizeof($this->m_childlist))// we’re on the main page, have some children, and they’re expanded{
// we are expanded - offer button to collapseecho “<a href = ‘index.php?collapse=”.
$this->m_postid.”#$this->m_postid’
><img src = ‘images/minus.gif’ valign = ‘bottom’ height = ‘22’ width = ‘22’ alt = ‘Collapse Thread’ border = ‘0’/></a>”;
}Listing 31.5 Continued 37 6728 CH31  9/2/04  1:17 PM  Page 765
766 Chapter 31 Building Web Forums
else if(!$sublist && $this->m_children)
{
// we are collapsed - offer button to expandecho “<a href = ‘index.php?expand=”.
$this->m_postid.”#$this->m_postid’><img src = ‘images/plus.gif’height = ‘22’ width = ‘22’ alt = ‘Expand Thread’ border = ‘0’/></a>”;
}else{
// we have no children, or are in a sublist, do not give buttonecho “<img src = ‘images/spacer.gif’ height = ‘22’ width = ‘22’ 
alt = ‘’ valign = ‘bottom’ />”;
}
echo “ <a name = $this->m_postid ><a href = 
‘view_post.php?postid=$this->m_postid’>$this->m_title - 
$this->m_poster - “.reformat_date($this->m_posted).’</a>’;
echo ‘</td></tr>’;
// increment row counter to alternate colors
$row++;
}// call display on each of this node’s children// note a node will only have children in its list if expanded$num_children = sizeof($this->m_childlist);for($i = 0; $i < $num_children; $i++){
$row = $this->m_childlist[$i]->display($row, $sublist);
}return $row;
}
}
?>
This class contains the functionality that drives the tree view in this application.
One instance of the treenode class contains details about a single posting and links
to all the reply postings of that class.This gives you the following member variables:Listing 31.5 Continued 37 6728 CH31  9/2/04  1:17 PM  Page 766
767 Viewing the Tree of Articles
public $m_postid;
public $m_title;public $m_poster;public $m_posted;public $m_children;public $m_childlist;public $m_depth;
Notice that the treenode does not contain the body of the article.There is no need to
load the body until a user goes to the view_post.php script.Y ou need to try to make
this process relatively fast because you are doing a lot of data manipulation to display thetree list and need to recalculate when the page is refreshed or a button is pressed.
These variables follow a naming scheme commonly used in object-oriented applica-
tions—starting variables with 
m_to indicate that they are member variables of the class.
Most of these variables correspond directly to rows from the header table in the
database.The exceptions are $m_childlist and $m_depth .You use the variable
$m_childlist to hold the replies to this article.The variable $m_depth will hold the
number of tree levels that you are down; this information will be used for creating the
display.
The constructor function sets up the values of all the variables, as follows:
public function __construct($postid, $title, $poster, $posted, $children,
$expand, $depth, $expanded, $sublist)
{
// the constructor sets up the member variables, but more// importantly recursively creates lower parts of the tree$this->m_postid = $postid;$this->m_title = $title;$this->m_poster = $poster;$this->m_posted = $posted;$this->m_children =$children;$this->m_childlist = array();$this->m_depth = $depth;
When you construct the root treenode from display_tree() from the main page, you
actually create a dummy node with no article associated with it.Y ou pass in some initial
values as follows:
$tree = new treenode($start, ‘’, ‘’, ‘’, 1, true, -1, $expanded, $sublist);
This line creates a root node with a $postid of 0 (zero). It can be used to find all the
first-level postings because they have a parent of 0.Y ou set the depth to -1because this
node isn’t actually part of the display.All the first-level postings have a depth of 0 and arelocated at the far left of the screen. Subsequent depths step toward the right.37 6728 CH31  9/2/04  1:17 PM  Page 767
768 Chapter 31 Building Web Forums
The most important thing that happens in this constructor is that the child nodes of
this node are instantiated.Y ou begin this process by checking whether you need toexpand the child nodes.Y ou perform this process only if a node has some children, andyou have elected to display them:
if(($sublist||$expand) && $children)
{
$conn = db_connect();
You then connect to the database and retrieve all the child posts, as follows:
$query = “select * from header where parent = $postid order by posted”;
$result = $conn->query($query);
Next, you fill the array $m_childlist with instances of the treenode class, containing
the replies to the post stored in this treenode ,as follows:
for ($count=0; $row = @$result->fetch_assoc(); $count++)
{
if($sublist||$expanded[ $row[‘postid’] ] == true)
$expand = true;
else
$expand = false;
$this->m_childlist[$count]= new treenode($row[‘postid’],$row[‘title’],
$row[‘poster’],$row[‘posted’],$row[‘children’], $expand,$depth+1, $expanded, $sublist);
}
This last line creates the new treenode s, following exactly the same process we just
walked through, but for the next level down the tree.This is the recursive part:A parent
tree node calls the treenode constructor, passes its own postid as parent, and adds one
to its own depth before passing it.
Each treenode ,in turn, is created and then creates its own children until you run out
of replies or levels that you want to expand to.
After all that’s done, you call the root treenode ’s display function (back in
display_tree() ), as follows:
$tree->display($row, $sublist);
The display() function begins by checking whether this is the dummy root node:
if($this->m_depth > -1)
In this way, the dummy can be left out of the display.Y ou don’t want to completely skip
the root node, though.Y ou do not want it to appear, but it needs to notify its childrenthat they need to display themselves.37 6728 CH31  9/2/04  1:17 PM  Page 768
769 Viewing the Tree of Articles
The display() function then starts drawing the table containing the articles. It uses
the modulus operator ( %) to decide what color background this row should have (hence
they alternate):
//color alternate rows
echo ‘<tr><td bgcolor = ‘;if ($row%2)
echo “‘#cccccc’>”;
else
echo “‘#ffffff’>”;
It then uses the $m_depth member variable to work out how much to indent the cur-
rent item. If you look back at the figures, you will see that the deeper the level a reply is
on, the further it is indented.Y ou code this as follows:
// indent replies to the depth of nesting
for($i = 0; $i < $this->m_depth; $i++){
echo “<img src = ‘images/spacer.gif’ height = ‘22’
width = ‘22’ alt = ‘’ valign = ‘bottom’ />”;
}
The next part of the function works out whether to supply a plus or minus button or
nothing at all:
// display + or - or a spacer 
if ( !$sublist && $this->m_children && sizeof($this->m_childlist))// we’re on the main page, have some children, and they’re expanded {
// we are expanded - offer button to collapseecho “<a href = ‘index.php?collapse=”.
$this->m_postid.”#$this->m_postid’
><img src = ‘images/minus.gif’ valign = ‘bottom’ height = ‘22’ width = ‘22’ alt = ‘Collapse Thread’ border = ‘0’/></a>”;
}else if(!$sublist && $this->m_children){
// we are collapsed - offer button to expandecho “<a href = ‘index.php?expand=”.
$this->m_postid.”#$this->m_postid’><img src = ‘images/plus.gif’  height = ‘22’ width = ‘22’ alt = ‘Expand Thread’ border = ‘0’/></a>”;
}else{37 6728 CH31  9/2/04  1:17 PM  Page 769
770 Chapter 31 Building Web Forums
// we have no children, or are in a sublist, do not give button
echo “<img src = ‘images/spacer.gif’ height = ‘22’ width = ‘22’ 
alt = ‘’ valign = ‘bottom’ />”;
Next, you display the actual details of this node:
echo “ <a name = $this->m_postid ><a href =
‘view_post.php?postid=$this->m_postid’>$this->m_title -
$this->m_poster - “.reformat_date($this->m_posted).’</a>’;
echo ‘</td></tr>’;
You then change the color for the next row:
// increment row counter to alternate colors
$row++;
After that, you add some code that will be executed by all treenode s, including the root
one, as follows:
// call display on each of this node’s children
// note a node will only have children in its list if expanded$num_children = sizeof($this->m_childlist);for($i = 0; $i<$num_children; $i++){
$row = $this->m_childlist[$i]->display($row, $sublist);
}return $row;
Again, this is a recursive function call, which calls on each of this node’s children to dis-
play themselves.Y ou pass them the current row color and get them to pass it back whenthey are finished with it so that you can keep track of the alternating color.
That’s it for this class.The code is fairly complex.Y ou might like to experiment with
running the application and then come back to look at it again when you are comfort-
able with what it does.
Viewing Individual Articles
The display_tree() call gives you links to a set of articles. If you click one of these
articles, you will go to the view_post.php script, with a parameter of the postid of the
article to be viewed. Sample output from this script is shown in Figure 31.7.
The view_post.php script, shown in Listing 31.6, shows the message body, as well as
the replies to this message.The replies are again displayed as a tree but completelyexpanded this time, and without any plus or minus buttons.This is the effect of the
$sublist switch coming into action.37 6728 CH31  9/2/04  1:17 PM  Page 770
771 Viewing Individual Articles
Figure 31.7 You can now see the message body for this posting.
Listing 31.6 view_post.php —Displays a Single Message Body
<?php
// include function librariesinclude (‘include_fns.php’);$postid = $_GET[‘postid’];// get post details$post = get_post($postid);
do_html_header($post[‘title’]);// display post
display_post($post);
// if post has any replies, show the tree view of them
if($post[‘children’]){
echo ‘<br /><br />’;display_replies_line();display_tree($_SESSION[‘expanded’], 0, $postid);
}
do_html_footer();
?>
37 6728 CH31  9/2/04  1:17 PM  Page 771
772 Chapter 31 Building Web Forums
This script uses three main function calls to do its job: get_post() ,display_post() ,
and display_tree() .The get_post() function, shown in Listing 31.7, pulls the func-
tion details out of the database.
Listing 31.7 get_post() Function from discussion_fns.php —Retrieves a
Message from the Database
function get_post($postid)
{
// extract one post from the database and return as an array
if(!$postid) return false;$conn = db_connect();//get all header information from ‘header’
$query = “select * from header where postid = $postid”;$result = $conn->query($query);if($result->num_rows!=1)
return false;
$post = $result->fetch_assoc();
// get message from body and add it to the previous result
$query = “select * from body where postid = $postid”;$result2 = $conn->query($query);if($result2->num_rows>0){
$body = $result2->fetch_assoc();if($body){
$post[‘message’] = $body[‘message’];
}
}return $post;
}
This function, given a postid ,performs the two queries required to retrieve the message
header and body for that posting and puts them together into a single array, which itthen returns.
The results of the 
get_post() function are then passed to the display_post() func-
tion from output_fns.php .This function just prints out the array with some HTML
formatting, so we did not include it here.
Finally, the view_post.php script checks whether there are any replies to this article
and calls display_tree() to show them in the sublist format—that is, fully expanded
with no plusses or minuses.37 6728 CH31  9/2/04  1:17 PM  Page 772
773 Adding New Articles
Adding New Articles
After all that, we can now look at how a new post is added to the forum.A user can add
a post in two ways: first, by clicking on the New Post button in the index page, and sec-ond, by clicking on the Reply button on the 
view_post.php page.
These actions both activate the same script, new_post.php ,just with different param-
eters. Figure 31.8 shows the output from new_post.php after it is reached by clicking
the Reply button.
Figure 31.8 In replies, the text of the original message is automatically
inserted and marked.
First, look at the URL shown in the figure:
http://localhost/phpmysql3e/chapter31/new_post.php?parent=18
The parameter passed in as parent will be the parent postid of the new posting. If you
click New Post instead of Reply, you will get parent=0 in the URL.
Second, you can see that, in a reply, the text of the original message is inserted and
marked with a >character, as is the case in most mail and news-reading programs.
Third, you can see that the title of this message defaults to the title of the original
message prefixed with Re:.
Let’s look at the code that produces this output; it is shown in Listing 31.8.
37 6728 CH31  9/2/04  1:17 PM  Page 773
774 Chapter 31 Building Web Forums
Listing 31.8 new_post.php —Allows a User to Type a New Post or Reply to an
Existing Post
<?php
include (‘include_fns.php’);
$title = $_POST[‘title’];
$poster = $_POST[‘poster’];$message = $_POST[‘message’];
if(isset($_GET[‘parent’]))
$parent = $_GET[‘parent’];
else
$parent = $_POST[‘parent’];
if(!$area)
$area = 1;
if(!$error)
{
if(!$parent){
$parent = 0;if(!$title)
$title = ‘New Post’;
}else{
// get post name$title = get_post_title($parent);
// append Re:
if(strstr($title, ‘Re: ‘) == false )
$title = ‘Re: ‘.$title;
//make sure title will still fit in db
$title = substr($title, 0, 20);
//prepend a quoting pattern to the post you are replying to
$message = add_quoting(get_post_message($parent));
}
}do_html_header($title);
display_new_post_form($parent, $area, $title, $message, $poster);37 6728 CH31  9/2/04  1:17 PM  Page 774
775 Adding New Articles
if($error)
{
echo ‘Your message was not stored.
Make sure you have filled in all fields and try again.’;
}
do_html_footer();
?>
After some initial setup, the new_post.php script checks whether the parent is 0 (zero)
or otherwise. If it is 0, this topic is new, and little further work is needed.
If this message is a reply ( $parent is the postid of an existing article), the script goes
ahead and sets up the title and text of the original message, as follows:
// get post name
$title = get_post_title($parent);
// append Re:
if(strstr($title, ‘Re: ‘) == false )
$title = ‘Re: ‘.$title;
//make sure title will still fit in db
$title = substr($title, 0, 20);
//prepend a quoting pattern to the post you are replying to
$message = add_quoting(get_post_message($parent));
The functions used here are get_post_title() ,get_post_message() ,and add_
quoting() .These functions, all from the discussion_fns.php library, are shown in
Listings 31.9, 31.10, and 31.11, respectively.
Listing 31.9 get_post_title() Function from discussion_fns.php —Retrieves a
Message’s Title from the Database
function get_post_title($postid)
{
// extract one post’s name from the database
if(!$postid) return ‘’;$conn = db_connect();Listing 31.8 Continued 37 6728 CH31  9/2/04  1:17 PM  Page 775
776 Chapter 31 Building Web Forums
//get all header information from ‘header’
$query = “select title from header where postid = $postid”;$result = $conn->query($query);if($result->num_rows!=1)
return ‘’;
$this_row = $result->fetch_array();return  $this_row[0];
}
Listing 31.10 get_post_message() Function from discussion_fns.php —
Retrieves a Message’s Body from the Database
function get_post_message($postid)
{
// extract one post’s message from the database
if(!$postid) return ‘’;$conn = db_connect();$query = “select message from body where postid = $postid”;
$result = $conn->query($query);if($result->num_rows>0){
$this_row = $result->fetch_array();return $this_row[0];
}
}
These first two functions retrieve an article’s header and body, respectively, from the
database.
Listing 31.11 add_quoting() Function from discussion_fns.php —Indents a
Message Text with >Symbols
function add_quoting($string, $pattern = ‘> ‘)
{
// add a quoting pattern to mark text quoted in your replyreturn $pattern.str_replace(“\n”, “\n$pattern”, $string);
}Listing 31.9 Continued 37 6728 CH31  9/2/04  1:17 PM  Page 776
777 Adding New Articles
Theadd_quoting() function reformats the string to begin each line of the original text
with a symbol, which defaults to >.
After the user types in his reply and clicks the Post button, he is taken to the
store_new_post.php script. Sample output from this script is shown in Figure 31.9.
Figure 31.9 The new post is now visible in the tree.
The new post is shown in the figure, under Re: using gd? - Laura - 01:09
07/07/2004 .Other than that, this page looks like the regular index.php page.
Let’s look at the code for store_new_post.php ,shown in Listing 31.12.
Listing 31.12 store_new_post.php —Puts the New Post in the Database
<?php
include (‘include_fns.php’);if($id = store_new_post($_POST)){
include (‘index.php’);
}else{
$error = true;include (‘new_post.php’);
}
?>
37 6728 CH31  9/2/04  1:17 PM  Page 777
778 Chapter 31 Building Web Forums
As you can see, this script is short. Its main task is to call the store_new_post() func-
tion, which is shown in Listing 31.13.This page has no visual content of its own. If stor-ing succeeds, you see the index page. Otherwise, you go back to the 
new_post.php page
so that the user can try again.
Listing 31.13 store_new_post() Function from discussion_fns.php —Validates
and Stores the New Post in the Database
function store_new_post($post)
{
// validate clean and store a new post
$conn = db_connect();
// check no fields are blankif(!filled_out($post)){
return false;
}$post = clean_all($post);
//check parent exists
if($post[‘parent’]!=0){
$query = “select postid from header where postid = ‘“.$post[‘parent’].”’”;$result = $conn->query($query);if($result->num_rows!=1){
return false;
}
}
// check not a duplicate
$query = “select header.postid from header, body where
header.postid = body.postid andheader.parent = “.$post[‘parent’].” andheader.poster = ‘“.$post[‘poster’].”’ andheader.title = ‘“.$post[‘title’].”’ andheader.area = “.$post[‘area’].” andbody.message = ‘“.$post[‘message’].”’”;
$result = $conn->query($query);if (!$result){
return false;
}if($result->num_rows>0){37 6728 CH31  9/2/04  1:17 PM  Page 778
779 Adding New Articles
$this_row = $result->fetch_array();
return $this_row[0];
}$query = “insert into header values
(‘“.$post[‘parent’].”’,
‘“.$post[‘poster’].”’,‘“.$post[‘title’].”’,0,‘“.$post[‘area’].”’,now(),NULL
)”;
$result = $conn->query($query);if (!$result){
return false;
}
// note that our parent now has a child
$query = ‘update header set children = 1 where postid = ‘.$post[‘parent’];$result = $conn->query($query);if (!$result){
return false;
}
// find our post id, note that there could be multiple headers
// that are the same except for id and probably posted time$query = “select header.postid from header left join body 
on header.postid = body.postidwhere parent = ‘“.$post[‘parent’].”’and poster = ‘“.$post[‘poster’].”’and title = ‘“.$post[‘title’].”’and body.postid is NULL”;
$result = $conn->query($query);if (!$result){
return false;
}if($result->num_rows>0){
$this_row = $result->fetch_array();$id = $this_row[0];
}if($id)Listing 31.13 Continued 37 6728 CH31  9/2/04  1:17 PM  Page 779
780 Chapter 31 Building Web Forums
{
$query = “insert into body values ($id, ‘“.$post[‘message’].”’)”;$result = $conn->query($query);if (!$result){
return false;
}
return $id;
}
}
This function is long but not overly complex. It is only long because inserting a posting
means inserting entries in the header and body tables and updating the parent article’srow in the header table to show that it now has children.
That is the end of the code for the web forum application.
Adding Extensions
There are many extensions you could add to this project:
nYou could add navigation to the view options so that from a post, you could navi-
gate to the next message, the previous message, the next-in-thread message, or theprevious-in-thread message.
nYou could add an administration interface for setting up new forums and deleting
old posts.
nYou could add user authentication so that only registered users could post.
nYou could add some kind of moderation or censorship mechanism.
Look at existing systems for ideas.
Using an Existing System
One noteworthy existing system is Phorum, an open source web forums project. It has
different navigation and semantics from the one we created here, but its structure is rela-tively easily customized to fit into your own site.A notable feature of Phorum is that itcan be configured by the actual user to display in either a threaded or flat view.Y ou canfind out more about it at
http://www.phorum.orgListing 31.13 Continued 37 6728 CH31  9/2/04  1:17 PM  Page 780
781 Next
Next
In Chapter 32,“Generating Personalized Documents in Portable Document Format
(PDF),” you use the PDF format to deliver documents that are attractive, print consistently, and are somewhat tamperproof.This capability is useful for a range of service-based applications, such as generating contracts online.37 6728 CH31  9/2/04  1:17 PM  Page 781
37 6728 CH31  9/2/04  1:17 PM  Page 782
32
Generating Personalized
Documents in Portable
Document Format (PDF)
O NSER VICE -DRIVEN SITES ,YOUSOMETIMES NEED TO deliver personalized documents,
generated in response to input from your visitors.This input can be used to provide anautomatically filled-in form or to generate personalized documents, such as legal docu-ments, letters, or certificates.
The example in this chapter presents a user with an online skill assessment page and
generates a certificate.We explain how to
nUse PHP string processing to integrate a template with a user’s data to create aRich T ext Format (RTF) document
nUse a similar approach to generate a Portable Document Format (PDF) document
nUse PHP’s PDFlib functions to generate a similar PDF document
The Problem
For this project, you give your visitors an exam consisting of a number of questions. If
they answer enough of the questions correctly, you will generate a certificate for them toshow that they have passed the exam.
So that a computer can mark the questions easily, they are multiple choice, consisting
of a question and a number of potential answers. Only one of the potential answers foreach question is correct.
If a user achieves a passing grade on the questions, he will be presented with a 
certificate.38 6728 CH32  9/2/04  1:17 PM  Page 783
784 Chapter 32 Generating Personalized Documents in Portable Document Format (PDF)
Ideally, the file format for the certificate should
1. Be easy to design2. Be able to contain a variety of different elements such as bitmap and vector images3. Result in a high-quality printout4. Require only a small file to be downloaded5. Be generated almost instantly6. Be at a low cost to produce7. Work on many operating systems8. Be difficult to fraudulently duplicate or modify9. Not require any special software to view or print
10. Display and print consistently for all recipients
Like many decisions you need to make from time to time, you will probably need to
compromise when choosing a delivery format to meet as many of these 10 attributes aspossible.
Evaluating Document Formats
The most important decision you need to make is what format to deliver the certificatein. Options include paper,ASCII text, HTML, Microsoft Word or another word proces-sor’s format, Rich T ext Format, PostScript, and Portable Document Format. Given the 10attributes listed previously, you can consider and compare some of the options.
Paper
Delivering the certificate on paper has some obvious advantages.Y ou retain complete
control over the process.Y ou can see exactly what each certificate output looks likebefore sending it to the recipient. Plus, you don’t need to worry about software or band-width, and the certificate can be printed with anticounterfeiting measures.
Paper would meet all of your needs except for attributes 5 and 6:The certificate
could not be created and delivered quickly. Postal delivery could take days or weeksdepending on your and the recipient’s location.
Each certificate would also cost a few cents to a few dollars in printing and postage
costs and probably more in handling.Automatic electronic delivery would be cheaper.
ASCII
Delivering documents as ASCII or plain text comes with some advantages. Compatibility
is no problem. Bandwidth required would be small, so cost would be very low.The sim-plicity of the result makes it easy to design and quick for a script to generate.38 6728 CH32  9/2/04  1:17 PM  Page 784
785 The Problem
If you present your visitors with an ASCII file, however, you have very little control
over the appearance of their certificates.Y ou cannot control fonts or page breaks.Y ou can
only include text and have very little control over formatting.Y ou have no control over arecipient’s duplication or modification of the document.This is the method that makes it
easiest for the recipient to fraudulently alter her certificate.
HTML
An obvious choice for delivering a document on the Web is HTML. Hypertext Markup
Language is specifically designed for this purpose.As you are no doubt already aware, itincludes formatting control, syntax to include objects such as images, and is compatible(with some variation) with a variety of operating systems and software. It is fairly simple,so it is both easy to design and quick for a script to generate and deliver.
Drawbacks to using HTML for this application include limited support for print-
related formatting such as page breaks, little consistency in the output on different plat-
forms and programs, and variable quality printing. In addition, although HTML caninclude any type of external element, the capability of the browser to display or usethese elements cannot be guaranteed for unusual types.
Word Processor Formats
Particularly for intranet projects, providing documents as word processor documents
makes some sense. However, for an Internet project, using a proprietary word processorformat will exclude some visitors, but given its market dominance, Microsoft Wordwould make sense. Most users will either have access to Word or to a word processor
that will try to read Word files such as OpenOffice Writer.
Windows users without Word can download the freeware Word Viewer from
http://www.microsoft.com/office/000/viewers.asp
Generating a document as a Microsoft Word document has some advantages.As long as
you have a copy of Word, designing a document is easy.Y ou have very good control over
the printed appearance of your documents and a lot of flexibility with its contents.Y oucan also make it relatively difficult for the recipient to modify by telling Word to ask fora password.
Unfortunately,Word files can be large, particularly if they contain images or other
complex elements.There is also no easy way to generate them dynamically with PHP .The format is documented but is a binary format, and the format documentation comeswith license conditions. It is possible to generate Word documents with a COM object,but it’s definitely not simple.
Another new possibility you may now consider is OpenOffice Writer, which has the
dual advantages of not being proprietary software and using an XML-based file format.38 6728 CH32  9/2/04  1:17 PM  Page 785
786 Chapter 32 Generating Personalized Documents in Portable Document Format (PDF)
Word 2003 now also supports an XML file format natively.The Document T ype
Definition (DTD) for Word and other Office products can be downloaded fromMicrosoft.com. Look for “Office 2003 XML Reference Schemas.”This would be a validoption, but not a simple one.
Rich Text Format
Rich T ext Format (or RTF) gives you most of the power of Word, but the files are easier
to generate.Y ou still have flexibility over layout and formatting of the printed page.Y oucan still include elements such as vector or bitmap images. Plus, you can still be fairly surethat the users will see a similar result to yours when they view or print the document.
RTF is Microsoft Word’s text format. It is intended as an interchange format to trans-
fer documents between different programs. In some ways, it is similar to HTML. It usessyntax and key words rather than binary data to convey formatting information. It istherefore relatively human readable.
The format is well documented.The specification is freely available and can be found
here:
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnrtfspec/html/rtfspec.asp
The easiest way to generate an RTF document is to choose a Save As RTF option in
your word processor. Because RTF files contain only text, it is possible to generate them
directly, and existing ones can easily be modified.
Because the format is documented and freely available, RTF is readable by more soft-
ware than Word’s binary format. Be aware, though, that users opening a complex RTF
file in older versions of Word or different word processors will often see somewhat dif-ferent results. Each new version of Word introduces new keywords to RTF , so olderimplementations usually ignore controls they do not understand or have chosen not toimplement.
From the original list, an RTF certificate would be easy to design using Word or
another word processor; is able to contain a variety of different elements such as vectorand bitmap images; gives a high-quality printout; can be generated easily and quickly;and can be delivered electronically at low cost.
This format works with a variety of applications and operating systems, although with
somewhat variable results. On the downside, an RTF document can be easily and freelymodified by anybody, which is a problem for a certificate and some other types of docu-ments.The file size might be moderately large for complex documents.
RTF is a good option for many document delivery applications, so you can use it as
one option here.
PostScript
PostScript, from Adobe, is a page description language. It is a powerful and complex pro-
gramming language intended to represent documents in a device-independent way—that38 6728 CH32  9/2/04  1:17 PM  Page 786
787 The Problem
is, a description that will produce consistent results across different devices such as print-
ers and screens. It is very well documented.At least three full-length books are available,as well as countless Web sites.
A PostScript document can contain very precise formatting, text, images, embedded
fonts, and other elements.Y ou can easily generate a PostScript document from an appli-cation by printing it to a PostScript printer driver. If you are interested, you can evenlearn to program in it directly.
PostScript documents are quite portable.They give consistent high-quality printouts
from different devices and different operating systems.
There are a couple of significant downsides to using PostScript to distribute documents:
nThe files can be huge.
nMany people will need to download additional software to use them.
Most Unix users can deal with PostScript files, but Windows users usually need to
download a viewer such as GSview, which uses the Ghostscript PostScript interpreter.This software is available for a wide variety of platforms.Although it is available free, wedo not really want to force people to download more software.
You can read more about Ghostscript at
http://www.ghostscript.com/
and download it from
http://www.cs.wisc.edu/~ghost/
For the current application, PostScript scores very well for consistent high-quality out-
put but falls short on most of the other needs.
Portable Document Format
Fortunately, there is a format with most of the power of PostScript, but with significant
advantages.The Portable Document Format (also from Adobe) was designed as a way todistribute documents that would behave consistently on different platforms and deliverpredictable high-quality output onscreen or on paper.
Adobe describes PDF as “the open de facto standard for electronic document distri-
bution worldwide.Adobe PDF is a universal file format that preserves all of the fonts,
formatting, colors, and graphics of any source document, regardless of the applicationand platform used to create it. PDF files are compact and can be shared, viewed, navigat-ed, and printed exactly as intended by anyone with a free Adobe Acrobat Reader.”
PDF is an open format, and documentation is available from this site:http://partners.adobe.com/asn/tech/pdf/specifications.jsp
It is also available from many other Web sites and an official book.
Judged against the desired attributes, PDF looks very good: PDF documents give con-
sistent, high-quality output; are capable of containing elements such as bitmap and vectorimages; can use compression to create a small file; can be delivered electronically andcheaply; are usable on the major operating systems; and can include security controls.38 6728 CH32  9/2/04  1:17 PM  Page 787
788 Chapter 32 Generating Personalized Documents in Portable Document Format (PDF)
Working against PDF is the fact that most of the software used to create PDF docu-
ments is commercial.A reader is required to view PDF files, but the Acrobat Reader isavailable free for Windows, Unix, and Macintosh from Adobe. Many visitors to your site
will already be familiar with the 
.pdf extension and will most likely already have the
reader installed.
PDF files are a good way to distribute attractive, printable documents, particularly
ones that you do not want recipients to be able to easily modify.
Next, we look at two different ways to generate a PDF certificate.
Solution Components
To get the system working, you need to be able to examine users’ knowledge and
(assuming that they pass your test) generate a certificate reporting their performance. Forthis project, you experiment with generating this certificate in three different ways: twousing PDF and one using RTF .
Let’s look at the requirements of each of these components in some detail.
Question and Answer System
Providing a flexible system for online assessment that allows a variety of different ques-tion types, various media types for supporting information, useful feedback on wronganswers, and clever statistic gathering and reporting would be a complex task on its own.
In this chapter, we are mainly interested in the challenge of generating customized
documents for delivery over the Web, so we explain how to build only a very simplequiz system.The quiz does not rely on any special software. It uses an HTML form toask questions and a PHP script to process the answers.Y ou have been doing this sinceChapter 1,“PHP Crash Course.”
Document Generation Software
No additional softwareis needed on the Web server to generate RTF or PDF documentsfrom templates, but you need software to create the templates.T o use the PHP PDF cre-ation functions, you need to have compiled PDF support into PHP . (We discuss thistopic shortly.)
Software to Create RTF Template
You can use the word processor of your choice to generate RTF files.We used Microsoft
Word to create our certificate template, which is included on the CD-ROM in the
Chapter 32 directory.
If you prefer another word processor, it would still be a good idea to test the output
in Word because the majority of your visitors will be using this software.38 6728 CH32  9/2/04  1:17 PM  Page 788
789 Solution Components
Software to Create PDF Template
PDF documents are a little more difficult to generate.The easiest way is to purchase
Adobe Acrobat.This software allows you to create high-quality PDFs from various appli-cations.We used Acrobat to create the template file for this project.
To create the file, we used Microsoft Word to design a document. One of the tools in
the Acrobat package is Adobe Distiller.Within Distiller, we needed to select a few non-default options.The file must be stored in ASCII format, and compression needs to beturned off.After these options are set, creating a PDF file is as easy as printing.
You can find out more about Acrobat here:
http://www.adobe.com/products/acrobat/
You can either buy it online or from a regular software retailer.
Another option to create PDFs is the conversion program 
ps2pdf ,which, as the name
suggests, converts PostScript files into PDF files.This option has the advantage of beingfree but does not always produce good output for documents with images or nonstandardfonts.The 
ps2pdf converter comes with the Ghostscript package mentioned previously.
Obviously, if you are going to create a PDF file this way, you will need to create a
PostScript file first. Unix users typically use either the a2ps or dvips utilities for this
purpose.
If you are working in a Windows environment, you can also create PostScript files
without Adobe Distiller, albeit via a slightly more complicated process.Y ou need to installa PostScript printer driver. For example, you can use the Apple LaserWriter IINT driver.If you don’t have a PostScript driver installed, you can download one from Adobe at
http://www.adobe.com/support/downloads/product.jsp?product=44&platform=Windows
To create your PostScript file, you need to select this printer and the Print to File
option, typically found on the Print dialog box.
Most Windows applications then produce a file with a 
.prn extension.This should
be a PostScript file.Y ou should probably rename it to be a .psfile.Y ou should then be
able to view it using GSview or another PostScript viewer, or create a PDF file using the
ps2pdf utility.
Be aware that different printer drivers produce PostScript output of varying quality.
You might find that some of the PostScript files you produce give errors when run
through the ps2pdf utility.We suggest using a different printer driver.
If you intend to create only a small number of PDF files,Adobe’s online service
might suit you. For $9.99 a month, you can upload files in a number of formats anddownload a PDF file.The service worked well for our certificate, but it does not let youselect options that are important for this project.The PDF created will be stored as abinary file and compressed.This makes it very difficult to modify.
This service can be found athttps://createpdf.adobe.com/38 6728 CH32  9/2/04  1:17 PM  Page 789
790 Chapter 32 Generating Personalized Documents in Portable Document Format (PDF)
A free trial option is available for this service if you want to test it.
You can also check out a free FTP-based interface to ps2pdf at the Net Distillery:
http://www.babinszki.com/distiller/
A final option would be to encode the certificate in XML and use XML Style Sheet
Transformations (XSLT) to convert it to PDF and any other desired formats.This
method requires a good understanding of XSLT and is not covered here.
Software to Create PDF Programmatically
Support for creating PDF documents is available from within PHP . Several different
function libraries are available, with similar intentions.
PHP’s PDFlib functions use the PDFlib library, available fromhttp://www.pdflib.com
The ClibPDF functions use the ClibPDF library, available from
http://www.fastio.com/
Both of these libraries are similar.They provide an API of functions to generate a PDF
document.We elected to use PDFlib for this project because it seems to be updated andmaintained more regularly.
It is worth noting that neither library is Free Software. Both permit some noncom-
mercial use without charge but require a license fee if you intend to provide a commer-cial service using them.
Some free libraries, such as FPDF , are starting to become available. FPDF is not yet as
feature rich as the commercial libraries.Also, because FPDF is written in PHP (ratherthan in C as a PHP extension), it is a little slower than the other two.Y ou can downloadFPDF from
http://www.fpdf.org/
In this chapter, we use PDFlib because it is probably the most commonly used exten-
sion.
You can see whether PDFlib is already installed on your system by checking the out-
put of the function 
phpinfo() .Under the heading pdf,you can find out whether
PDFlib support is enabled, as well as the version of PDFlib used.
If you intend to use TIFF or JPEG images in your PDF documents, you will also
need to install the TIFF library, available from
http://www.libtiff.org/
and the JPEG library, available from
ftp://ftp.uu.net/graphics/jpeg/
On a Unix system, PDFlib now also contains prebuilt shared object libraries for PHP 4.3
and 5.0.They can be loaded from php.ini or with dl(),so there is no need to recom-
pile to add this functionality.
On a Windows server, the PDFlib DLL is bundled in the PHP ZIP file, so you just
need to uncomment the extension in your php.ini file.38 6728 CH32  9/2/04  1:17 PM  Page 790
791 Solution Overview
Solution Overview
In this project, you produce a system with three possible outcomes.As you can see in
Figure 32.1, you ask quiz questions, assess the answers, and then generate a certificate inone of three ways:
nYou generate an RTF document from a blank template.
nYou generate a PDF document from a blank template.
nYou generate a PDF document programmatically via PDFlib.
Figure 32.1 The certification system generates one of three different certificates.
A summary of the files in the certification project is shown in Table 32.1.
Table 32.1 Files in the Certification Application
Name Type Description
index.html HTML page HTML form that contains the quiz questions
score.php Application Script to assess users’ answers
rtf.php Application Script to generate an RTF certificate from the
template
pdf.php Application Script to generate a PDF certificate from the 
template
pdflib.php Application Script to generate a PDF certificate using PDFlib
signature.png Image Bitmap image of the signature to be included on
the PDFlib certificate
PHPCertification.rtf RTFR TF certificate template
PHPCertification.pdf PDF PDF certificate templateAsk
Quiz
QuestionsAssess
Quiz
AnswersGenerate
PDF file
from blank
templateGenerate
RTF file
from blank
template
Generate
PDF via
PDFlib38 6728 CH32  9/2/04  1:17 PM  Page 791
792 Chapter 32 Generating Personalized Documents in Portable Document Format (PDF)
Now let’s look at the application.
Asking the Questions
The file index.html is straightforward. It needs to contain an HTML form asking the
user for his name and the answers to a number of questions. In a real assessment applica-tion, you would most likely retrieve these questions from a database. Here, you focus onproducing the certificate, so you just hard-code some questions into the HTML.
The 
name field is a text input. Each question has three radio buttons to allow the user
to indicate his preferred answer.The form has an image button as a submit button.
The code for this page is shown in Listing 32.1.
Listing 32.1 index.html —HTML Page Containing Quiz Questions
<html>
<body>
<h1><p align= ”center”>
<img src= ”rosette.gif ”alt=””>
Certification<img src= ”rosette.gif ”alt=””></p></h1>
<p>You too can earn your highly respected PHP certification
from the world famous Fictional Institute of PHP Certification.</p>
<p>Simply answer the questions below:</p>
<form action= ”score.php ”method=”post”>
<p>Your Name <input type= ”text”name=”name”/></p>
<p>What does the PHP statement echo do?</p>
<ol>
<li><input type= ”radio”name=”q1”value=”1”/>
Outputs strings.</li>
<li><input type= ”radio”name=”q1”value=”2”/>
Adds two numbers together.</li>
<li><input type= ”radio”name=”q1”value=”3”/>
Creates a magical elf to finish writing your code.</li>
</ol>
<p>What does the PHP function cos() do?</p>
<ol>
<li><input type= ”radio”name=”q2”value=”1”/>
Calculates a cosine in radians.</li>
<li><input type= ”radio”name=”q2”value=”2”/>
Calculates a tangent in radians. </li>
<li><input type= ”radio”name=”q2”value=”3”/>
It is not a PHP function. It is a lettuce. </li>
</ol>38 6728 CH32  9/2/04  1:17 PM  Page 792
793 Solution Overview
<p>What does the PHP function mail() do?</p>
<ol>
<li><input type= ”radio”name=”q3”value=”1”/>
Sends a mail message.
<li><input type= ”radio”name=”q3”value=”2”/>
Checks for new mail.
<li><input type= ”radio”name=”q3”value=”3”/>
Toggles PHP between male and female mode.
</ol>
<p align= ”center”><input type= ”image”src=”certify-me.gif ”border=”0”></p>
</form>
</body>
</html>
The result of loading index.html in a Web browser is shown in Figure 32.2.Listing 32.1 Continued 
Figure 32.2 The index.html page asks the user to answer quiz questions.
38 6728 CH32  9/2/04  1:17 PM  Page 793
794 Chapter 32 Generating Personalized Documents in Portable Document Format (PDF)
Grading the Answers
When the user submits his answers to the questions in index.html ,you need to 
grade him and calculate a score.This is done by the script called score.php ,shown in
Listing 32.2.
Listing 32.2 score.php —Script to Mark Exams
<?php
//create short variable names$q1 = $_POST[ ‘q1’];
$q2 = $_POST[ ‘q2’];
$q3 = $_POST[ ‘q3’];
$name = $_POST[ ‘name’];
// check that all the data was received
if($q1== ’’||$q2==’’||$q3==’’||$name== ’’)
{
echo ‘<h1><p align = “center”><img src= ”rosette.gif ”alt=””>
Sorry:<img src= ”rosette.gif ”alt=””></p></h1> ’;
echo ‘<p>You need to fill in your name and answer all questions</p> ’;
}else{
//add up the scores$score = 0;if($q1 == 1) // the correct answer for q1 is 1
$score++;
if($q2 == 1) // the correct answer for q2 is 1
$score++;
if($q3 == 1) // the correct answer for q3 is 1
$score++;
//convert score to a percentage
$score = $score / 3 * 100;
if($score < 50)
{
// this person failedecho ‘<h1 align= ”center”><img src= ”rosette.gif ”alt=””/>
Sorry:<img src= ”rosette.gif ”alt=””/></h1>’;
echo ‘<p>You need to score at least 50% to pass the exam</p> ’;
}else{38 6728 CH32  9/2/04  1:17 PM  Page 794
795 Solution Overview
// create a string containing the score to one decimal place
$score = number_format($score, 1);
echo ‘<h1 align= ”center”><img src= ”rosette.gif ”alt=””/>
Congratulations<img src= ”rosette.gif ”alt=””/></h1>’;
echo “<p>Well done $name, with a score of $score%,
you have passed the exam.</p> ”;
// provide links to scripts that generate the certificates
echo ‘<p>Please click here to download your certificate as
a Microsoft Word (RTF) file.</p> ’;
echo ‘<form action= ”rtf.php”method=”post”>’;
echo ‘<center>
<input type= ”image”src=”certificate.gif ”border=”0”>
</center> ’;
echo ‘<input type= ”hidden”name=”score”value=”’.$score. ’”>’;
echo ‘<input type= ”hidden”name=”name”value=”’.$name.’”>’;
echo ‘</form>’;
echo ‘<p>Please click here to download your certificate as
a Portable Document Format (PDF) file.</p> ’;
echo ‘<form action= ”pdf.php”method=”post”>’;
echo ‘<center>
<input type= ”image”src=”certificate.gif ”border=”0”>
</center> ’;
echo ‘<input type= ”hidden”name=”score”value=”’.$score. ’”>’;
echo ‘<input type= ”hidden”name=”name”value=”’.$name.’”>’;
echo ‘</form>’;
echo ‘<p>Please click here to download your certificate as
a Portable Document Format (PDF) file generated with PDFLib.</p> ’;
echo ‘<form action= ”pdflib.php ”method=”post”>’;
echo ‘<center>
<input type= ”image”src=”certificate.gif ”border=”0”>
</center> ’;
echo ‘<input type= ”hidden”name=”score”value=”’.$score. ’”>’;
echo ‘<input type= ”hidden”name=”name”value=”’.$name.’”>’;
echo ‘</form>’;
}
}
?>Listing 32.2 Continued 38 6728 CH32  9/2/04  1:17 PM  Page 795
796 Chapter 32 Generating Personalized Documents in Portable Document Format (PDF)
This script displays a message if the user did not answer all questions or scored less than
the chosen pass mark.
If the user successfully answered the questions, he will be allowed to generate a 
certificate.The output of a successful visit is shown in Figure 32.3.
Figure 32.3 The score.php script presents successful visitors with the
option to generate a certificate in one of three ways.
From here, the user has three options: He can have an RTF certificate or one of two
PDF certificates. Next, we look at the script responsible for each.
Generating an RTF Certificate
There is nothing to stop you from generating an RTF document by writing ASCII textto a file or a string variable, but doing so would mean learning yet another set of syntax.
Here is a simple RTF document:
{\rtf1
{\fonttbl {\f0 Arial;}{\f1 Times New Roman;}}\f0\fs28 Heading\par\f1\fs20 This is an rtf document.\par}
38 6728 CH32  9/2/04  1:17 PM  Page 796
797 Solution Overview
This document sets up a font table with two fonts:Arial, to be referred to as f0,and
Times New Roman, to be referred to as f1.It then writes Heading using f0(Arial) in
size 28 (14 point).The control \par indicates a paragraph break. It then writes This is
an rtf document using f1(Times New Roman) at size 20 (10 point).
You could generate a document like this manually, but no labor-saving functions are
built into PHP to make the hard parts, such as incorporating graphics, easier. Fortunately,
in many documents, the structure, style, and much of the text are static, and only smallparts change from person to person.A more efficient way to generate a document is touse a template.
You can build a complex document, such as the one shown in Figure 32.4, easily
using a word processor.
Figure 32.4 Using a word processor, you can create a complex, attractive
template easily.
The template includes placeholders such as <<NAME>> to mark the places where dynamic
data will be inserted. It is not important what these placeholders look like.Y ou use ameaningful description between two sets of angled braces. It is important that youchoose placeholders that are highly unlikely to accidentally appear in the rest of the doc-ument. It will help you to lay out your template if the placeholders are roughly the samelength as the data they will be replaced with.
38 6728 CH32  9/2/04  1:17 PM  Page 797
798 Chapter 32 Generating Personalized Documents in Portable Document Format (PDF)
The placeholders in this document are <<NAME>> ,<<Name>> ,<<score>> ,and
<<mm/dd/yyyy>> .Note that you use both NAME and Name because you will use a
case-sensitive method to replace them.
Now that you have a template, you need a script to personalize it.This script, called
rtf.php ,is shown in Listing 32.3.
Listing 32.3 rtf.php —Script to Produce a Personalized RTF Certificate
<?php
//create short variable names$name = $_POST[ ‘name’];
$score = $_POST[ ‘score’];
// check we have the parameters we needif( !$name || !$score ){
echo ‘<h1>Error:</h1><p>This page was called incorrectly</p> ’;
}else{
//generate the headers to help a browser choose the correct applicationheader( ‘Content-Type: application/msword ’);
header( ‘Content-Disposition: inline, filename=cert.rtf ’);
$date = date( ‘F d, Y’);
// open our template file
$filename = ‘PHPCertification.rtf ’;
$output = file_get_contents($filename);
// replace the place holders in the template with our data
$output = str_replace( ‘<<NAME>> ’, strtoupper( $name ), $output );
$output = str_replace( ‘<<Name>> ’, $name, $output );
$output = str_replace( ‘<<score>> ’, $score, $output );
$output = str_replace( ‘<<mm/dd/yyyy>> ’, $date, $output );
// send the generated document to the browser
echo $output;
}
?>
This script performs some basic error checking to make sure that all the user details have
been passed in and then moves to the business of creating the certificate.
The output of this script will be an RTF file rather than an HTML file, so you need
to alert the user’s browser to this fact.This is important so that the browser can attemptto open the file with the correct application or give a Save As… type dialog box if itdoesn’t recognize the 
.rtf extension.38 6728 CH32  9/2/04  1:17 PM  Page 798
799 Solution Overview
You specify the MIME type of the file you are outputting by using PHP’s header()
function to send the appropriate HTTP header as follows:
header(‘Content-Type: application/msword ’);
header(‘Content-Disposition: inline, filename=cert.rtf ’);
The first header tells the browser that you are sending a Microsoft Word file (not strictly
true, but the most likely helper application for opening the RTF file).
The second header tells the browser to automatically display the contents of the file
and that its suggested filename is cert.rtf .This is the default filename the user will see
if he tries to save the file from within his browser.
After the headers are sent, you open and read the template RTF file into the $output
variable and use the str_replace() function to replace the placeholders with the actual
data that you want to appear in the file.The line
$output = str_replace( ‘<<Name>> ’, $name, $output );
replaces any occurrences of the placeholder <<Name>> with the contents of the variable
$name .
Having made your substitutions, it’s just a matter of echoing the output to the browser.
A sample result from the rtf.php script is shown in Figure 32.5.
Figure 32.5 The rtf.php script generates a certificate from an RTF template.
38 6728 CH32  9/2/04  1:17 PM  Page 799
800 Chapter 32 Generating Personalized Documents in Portable Document Format (PDF)
This approach works very well. The calls to str_replace() run very quickly, even
though the template and therefore the contents of $output are fairly long.The main
problem from the point of view of this application is that the user will load the certifi-cate in his word processor to print it.This is probably an invitation for people to modifythe output. RTF does not allow you to make a read-only document.
Generating a PDF Certificate from a Template
The process of generating a PDF certificate from a template is similar.The main differ-ence is that when you create the PDF file, some of the placeholders might be interspersedwith formatting codes, depending on the version of Acrobat you are using. For example, ifyou look in the certificate template file you have created (using a text editor), you can see
that the placeholders now look like this:
<<N)-13(AME)-10(>)-6(>
<<Na)-9(m)0(e)-18(>><)-11(<)1(sc)-17(or)-6(e)-6(>)-11(><)-11(<)1(m)-12(m)0(/d)-6(d)-19(/)1(yy)-13(yy)-13(>>
If you look through the file, you will see that, unlike RTF , this is not a format that
humans can easily read through.
Note
The format of the PDF template file may vary depending on the version of Acrobat or other PDF generation
tool you are using. The code supplied in this example may not work as written when you generate your owntemplates. Check your template and alter the code to suit. If you still have problems, use the PDFlib examplegiven later in the chapter.
There are a few different ways you can deal with this situation.Y ou could go through
each of these placeholders and delete the formatting codes. Deleting them actually makeslittle difference to how the document looks in the end because the codes embedded in theprevious template indicate how much space should be left between the letters of the place-holders that you are going to replace anyhow. However, if you take this approach, you mustgo through and hand-edit the PDF file and repeat this each time you change or update thefile. Doing all this work is not a big deal when you’re dealing with only four placeholders,but it becomes a nightmare when, for example, you have multiple documents with many
placeholders, and you decide to change the letterhead on all the documents.
You can avoid this problem by using a different technique.Y ou can use Adobe
Acrobat to create a PDF form—similar to an HTML form with blank, named fields.Y oucan then use a PHP script to create what is called an FDF (Forms Data Format) file,which is basically a set of data to be merged with a template.Y ou can create FDFs usingPHP’s FDF function library: specifically, the 
fdf_create() function to create a file, the
fdf_set_value() function to set the field values, and the fdf_set_file() function to
set the associated template form file.Y ou can then pass this file back to the browser withthe appropriate MIME type—in this case,
vnd.fdf —and the browser’s Acrobat Reader
plug-in should substitute the data into the form.38 6728 CH32  9/2/04  1:17 PM  Page 800
801 Solution Overview
This way of doing things is neat, but it has two limitations. First, it assumes that you
own a copy of Acrobat Professional (the full version, not the free reader, or even the
Standard edition). Second, it is difficult to substitute in text that is inline rather than textthat looks like a form field.This might or might not be a problem, depending on whatyou are trying to do.We largely use PDF generation for generating letters where many
things must be substituted inline. FDFs do not work well for this purpose. If you areauto-filling, for example, a tax form online, this will not be a problem.
You can read more about the FDF format at Adobe’s site:
http://partners.adobe.com/asn/developer/acrosdk/forms.html
You should also look at the FDF documentation in the PHP manual if you decide to
use this approach:
http://www.php.net/manual/en/ref.fdf.php
We turn now to the PDF solution to the previous problem.
You can still find and replace the placeholders in the PDF file if you recognize that
the additional format codes consist solely of hyphens, digits, and parentheses and cantherefore be matched via a regular expression.We wrote a function,
pdf_replace() ,t o
automatically generate a matching regular expression for a placeholder and replace thatplaceholder with the appropriate text.
Note that with some versions of Acrobat, the placeholders are in plain text, and you
can replace them with 
str_replace() ,as you did before.
Other than this addition, the code for generating the certificate via a PDF template is
similar to the RTF version.This script is shown in Listing 32.4.
Listing 32.4 pdf.php —Script to Produce Personalized PDF Certificate via a Template
<?php
set_time_limit( 180 ); // this script can be slow
//create short variable names
$name = $_POST[ ‘name’];
$score = $_POST[ ‘score’];
function pdf_replace( $pattern, $replacement, $string )
{
$len = strlen( $pattern ) ;$regex = ‘’;
for ( $i = 0; $i<$len; $i++ ){
$regex .= $pattern[$i];if ($i<$len-1)
$regex .= ‘(\)-?[0-9]+\()? ’;
}38 6728 CH32  9/2/04  1:17 PM  Page 801
802 Chapter 32 Generating Personalized Documents in Portable Document Format (PDF)
return ereg_replace ( $regex, $replacement, $string );
}
if(!$name||!$score)
{
echo ‘<h1>Error:</h1><p>This page was called incorrectly</p> ’;
}else{
//generate the headers to help a browser choose the correct applicationheader( ‘Content-Disposition:  filename=cert.pdf ’);
header( ‘Content-Type: application/pdf ’);
$date = date( ‘F d, Y’);
// open our template file
$filename = ‘PHPCertification.pdf ’;
$output = file_get_contents($filename);
// replace the place holders in the template with our data
$output = pdf_replace( ‘<<NAME>> ’, strtoupper( $name ), $output );
$output = pdf_replace( ‘<<Name>> ’, $name, $output );
$output = pdf_replace( ‘<<score>> ’, $score, $output );
$output = pdf_replace( ‘<<mm/dd/yyyy>> ’, $date, $output );
// send the generated document to the browserecho $output;
}
?>
This script produces a customized version of the PDF document.The document, shown
in Figure 32.6, will print reliably on numerous systems, and is harder for the recipient tomodify or edit.Y ou can see that the PDF document in Figure 32.6 looks almost exactlylike the RTF document in Figure 32.5.
One problem with this approach is that the code runs quite slowly because of the
regular expression matching required. Regular expressions run much more slowly than
str_replace() that you could use for the RTF version.
If you are going to match a large number of placeholders or try to generate many of
these documents on the same server, you might want to look at other approaches.Thisissue would be less of a problem for a simpler template. Much of the bulk in this file isdata representing the images.Listing 32.4 Continued 38 6728 CH32  9/2/04  1:17 PM  Page 802
803 Solution Overview
Figure 32.6 The pdf.php script generates a certificate from a 
PDF template.
Generating a PDF Document Using PDFlib
PDFlib is intended for generating dynamic PDF documents via the Web. It is not strictly
part of PHP , but rather a separate library, with a large number of functions intended tobe called from a wide variety of programming languages. Language bindings are availablefor C, C++, Java, Perl, Python,Tcl, and ActiveX/COM.
Since PHP 4.0.5, PDFlib has been officially supported by PDFlib GmbH.This means
that you can refer to either the PHP documentation at
http://www.php.net/en/manual/ref.pdf.php
or download the official documentation from pdflib.com.
A Hello World Script for PDFlib
After you have PHP and have installed it with PDFlib enabled, you can test it with a
simple program such as the Hello World example in Listing 32.5.
38 6728 CH32  9/2/04  1:17 PM  Page 803
804 Chapter 32 Generating Personalized Documents in Portable Document Format (PDF)
Listing 32.5 testpdf.php —Classic Hello World Example Using PDFlib via PHP
<?php
// create a pdf document in memory
$pdf = pdf_new();pdf_open_file($pdf, ‘’);
pdf_set_info($pdf, “Creator”, “pdftest.php ”);
pdf_set_info($pdf, “Author”, “Luke Welling and Laura Thomson ”);
pdf_set_info($pdf, “Title”, “Hello World (PHP) ”);
// US letter is 11 ”x 8.5”and there are 72 points per inch
pdf_begin_page($pdf, 8.5*72, 11*72);
// add a bookmark
pdf_add_bookmark($pdf, ‘Page 1’, 0, 0);
$font = pdf_findfont($pdf, ‘Times-Roman ’, ‘host’, 0);
pdf_setfont($pdf, $font, 24);pdf_set_text_pos($pdf, 50, 700);
// write text
pdf_show($pdf, ’Hello,world! ’);
pdf_continue_text($pdf, ’(says PHP) ’);
// end the document
pdf_end_page($pdf);pdf_close($pdf);
$data = pdf_get_buffer($pdf);// generate the headers to help a browser choose the correct application
header(‘Content-Type: application/pdf ’) ;
header(‘Content-Disposition: inline; filename=test.pdf ’);
header(‘Content-Length: ‘. strlen($data));
// output PDF
echo $data;
?>
The most likely error you will see if this script fails is the following:
Fatal error: Call to undefined function pdf_new()in c:\program files\apache group\Apache\htdocs\phpmysql3e\chapter32\testpdf.phpon line 438 6728 CH32  9/2/04  1:17 PM  Page 804
805 Solution Overview
This message means that you do not have the PDFlib extension compiled or enabled
into PHP .
The installation is fairly straightforward, but some details change depending on the
exact versions of PHP and PDFlib that you are using.A good place to check for detailedsuggestions is the user-contributed notes on the PDFlib page in the annotated PHPmanual.
When you have this script up and running on your system, it is time to look at how
it works.The lines
$pdf = pdf_new();
pdf_open_file($pdf, ‘’);
initialize a PDF document in memory.
The function pdf_set_info() enables you to tag the document with a subject; title;
creator; author; list of keywords; and one custom, user-defined field.
Here, you set a creator, author, and title. Note that all six info fields are optional:
pdf_set_info($pdf, ‘Creator’, ‘pdftest.php ’);
pdf_set_info($pdf, ‘Author’, ‘Luke Welling and Laura Thomson ’);
pdf_set_info($pdf, ‘Title’, ‘Hello World (PHP) ’);
A PDF document consists of a number of pages.T o start a new page, you need to call
pdf_begin_page() .As well as the identifier returned by pdf_open() ,
pdf_begin_page() requires the dimensions of the page. Each page in a document can
be a different size, but unless you have a good reason not to, you should use a commonpaper size.
PDFlib works in points, both for page size, and for locating coordinate locations on
each page. For reference,A4 is approximately 595 by 842 points, and U.S. letter paper is 612 by 792 points.This means that the line
pdf_begin_page($pdf, 8.5*72, 11*72);
creates a page in the document, sized for U.S. letter paper.
A PDF document does not need to be just a printable document. Many PDF features
can be included in the document, such as hyperlinks and bookmarks.The function
pdf_add_outline() adds a bookmark to the document outline.The bookmarks in a
document appear in a separate pane in Acrobat Reader, allowing you to skip straight toimportant sections.
The line
pdf_add_bookmark($pdf, ‘Page 1’, 0, 0);
adds a bookmark labeled Page 1, which refers to the current page.38 6728 CH32  9/2/04  1:17 PM  Page 805
806 Chapter 32 Generating Personalized Documents in Portable Document Format (PDF)
Fonts available on systems vary from operating system to operating system and even
from individual machine to machine.T o guarantee consistent results, a set of core fontsworks with every PDF reader.The 14 core fonts are
nCourier
nCourier-Bold
nCourier-Oblique
nCourier-BoldOblique
nHelvetica
nHelvetica-Bold
nHelvetica-Oblique
nHelvetica-BoldOblique
nTimes-Roman
nTimes-Bold
nTimes-Italic
nTimes-BoldItalic
nSymbol
nZapfDingbats
Fonts outside this set can be embedded in documents, but this increases the file size and
might not be acceptable under whatever license you own that particular font under.Y oucan choose a font, its size, and character encoding as follows:
$font = pdf_findfont($pdf, ‘Times-Roman ’, ‘host’, 0);
pdf_setfont($pdf, $font, 24);
Font sizes are specified in points. In this case, we chose host character encoding.The
allowable values are winansi ,builtin ,macroman ,ebcdic ,or host.The meanings of the
different values are as follows:
nwinansi —Uses ISO 8859-1 plus special characters added by Microsoft, such as a
Euro symbol.
nbuiltin —Uses the encoding built into the font. Normally used with non-Latin
fonts and symbols.
nmacroman —Uses Mac Roman encoding.The default Macintosh character set.
nebcdic —Uses EBCDIC as used on IBM AS/400 systems.
nhost—Automatically selects macroman on a Macintosh, ebcdic on an EBCDIC-
based system, and winansi on all other systems.
If you do not need to include special characters, the choice of encoding is not important.38 6728 CH32  9/2/04  1:17 PM  Page 806
807 Solution Overview
A PDF document is not like an HTML document or a word processor document.
Text does not by default start at the top left and flow onto other lines as required.Y ou
need to choose where to place each line of text.As already mentioned, PDF uses pointsto specify locations.The origin (the x,y coordinate [0, 0]) is at the bottom-left corner ofthe page.
Given that the page is 612 by 792 points, the point (50, 700) is about two-thirds of an
inch from the left of the page and about one-and-one-third inches from the top.T o setthe text position at this point, you use
pdf_set_text_pos($pdf, 50, 700);
Finally, having set up the page, you can write some text on it.T o add text at the currentposition using the current font, you use 
pdf_show() .
The line
pdf_show($pdf, ’Hello,world! ’);
adds the text “Hello World! ”to the document.
To move to the next line and write more text, you use pdf_continue_text() .T o
add the string “(says PHP) ”,you use
pdf_continue_text($pdf, ’(says PHP) ’);
The exact location where this text will appear depends on the font and size selected.
If, rather than lines or phrases, you are using contiguous paragraphs, you might find
the function pdf_show_boxed() more useful. It allows you to declare a text box and
flow text into it.
After you have finished adding elements to a page, you need to call pdf_end_page()
as follows:
pdf_end_page($pdf);
After you have finished the whole PDF document, you need to close it by using
pdf_close() .When you are generating a file, you also need to close the file.
The line
pdf_close($pdf);
completes the generation of the Hello World document.
Now you can send the completed PDF to the browser:
$data = pdf_get_buffer($pdf);
// generate the headers to help a browser choose the correct application
header(‘Content-Type: application/pdf ’);
header(‘Content-Disposition: inline; filename=test.pdf ’);
header(‘Content-Length: ‘. strlen($data));
// output PDF
echo $data;38 6728 CH32  9/2/04  1:17 PM  Page 807
808 Chapter 32 Generating Personalized Documents in Portable Document Format (PDF)
You could also write this data to disk if you preferred. PDFlib allows you to do this by
passing a filename as the second parameter to pdf_open_file() .At the time of writing,
this feature was buggy under Windows (PHP 5.0.0). If you need to write the data todisk, you can do it manually.
This example was derived from the C language example in the PDFlib documenta-
tion and should provide a starting point.
Note that some PDFlib function parameters that are documented in the PHP manual
as being optional are required in some versions of PDFlib.The document for the certifi-cate is more complicated, including a border, a vector image, and a bitmap image.Withthe other two techniques, you can add these features using a word processor.WithPDFlib, you must add them manually.
Generating a Certificate with PDFlib
To use PDFlib, we chose to make some compromises for this project.Although it is
almost certainly possible to exactly duplicate the certificate used previously, a lot moreeffort would be required to generate and position each element manually rather than usea tool such as Microsoft Word to help lay out the document.
We want to use the same text as before, including the red rosette and the bitmap sig-
nature, but we are not going to try to duplicate the complex border.The complete codefor this script is shown in Listing 32.6.
Listing 32.6 pdflib.php — Generating a Certificate Using PDFlib
<?php
// create short variable names
$name = $_POST[ ‘name’];
$score = $_POST[ ‘score’];
if(!$name||!$score)
{
echo ‘<h1>Error:</h1><p>This page was called incorrectly</p> ’;
exit;
}else{
$date = date( ‘F d, Y’);
// create a pdf document in memory
$pdf = pdf_new();pdf_open_file($pdf, ‘’);
// set up name of font for later use
$fontname = ‘Times-Roman ’;38 6728 CH32  9/2/04  1:17 PM  Page 808
809 Solution Overview
// set up the page size in points and create page
// US letter is 11 ”x 8.5”and there are approximately 72 points per inch
$width = 11*72;$height = 8.5*72;pdf_begin_page($pdf, $width, $height);
// draw our borders
$inset = 20; // space between border and page edge$border = 10; // width of main border line$inner = 2; // gap within the border
//draw outer border
pdf_rect($pdf, $inset-$inner,
$inset-$inner,$width-2*($inset-$inner),$height-2*($inset-$inner)) ;
pdf_stroke($pdf);
//draw main border $border points wide
pdf_setlinewidth($pdf, $border);pdf_rect($pdf, $inset+$border/2,
$inset+$border/2,$width-2*($inset+$border/2),$height-2*($inset+$border/2));
pdf_stroke($pdf);pdf_setlinewidth($pdf, 1.0);
// draw inner border
pdf_rect($pdf, $inset+$border+$inner,
$inset+$border+$inner,$width-2*($inset+$border+$inner),$height-2*($inset+$border+$inner));
pdf_stroke($pdf);
// add heading
$font = pdf_findfont($pdf, $fontname, ‘host’, 0);
if ($font)
pdf_setfont($pdf, $font, 48);
$startx = ($width - pdf_stringwidth($pdf, ‘PHP Certification ’,
$font, 48))/2;
pdf_show_xy($pdf, ‘PHP Certification ’, $startx, 490);Listing 32.6 Continued 38 6728 CH32  9/2/04  1:17 PM  Page 809
810 Chapter 32 Generating Personalized Documents in Portable Document Format (PDF)
// add text
$font = pdf_findfont($pdf, $fontname, ‘host’, 0);
if ($font)
pdf_setfont($pdf, $font, 26);
$startx = 70;pdf_show_xy($pdf, ‘This is to certify that: ’, $startx, 430);
pdf_show_xy($pdf, strtoupper($name), $startx+90, 391);
$font = pdf_findfont($pdf, $fontname, ‘host’, 0);
if ($font)
pdf_setfont($pdf, $font, 20);
pdf_show_xy($pdf, ‘has demonstrated that they are certifiable ‘.
‘by passing a rigorous exam ’, $startx, 340);
pdf_show_xy($pdf, ‘consisting of three multiple choice questions. ’,
$startx, 310) ;
pdf_show_xy($pdf, “$name obtained a score of $score ”.’%.’, $startx, 260);
pdf_show_xy($pdf, ‘The test was set and overseen by the ‘, $startx, 210);
pdf_show_xy($pdf, ‘Fictional Institute of PHP Certification ’,
$startx, 180);
pdf_show_xy($pdf, “on $date. ”, $startx, 150);
pdf_show_xy($pdf, ‘Authorized by: ’, $startx, 100);
// add bitmap signature image
// you may need to change the path to the signature file here$path = ‘C:/Program Files/Apache Group/Apache/htdocs/phpmysql3e/chapter32/ ’;
// using gif version as PDFLib for Windows appears to have problems with GIFs
$signature = pdf_open_image_file($pdf, ‘gif’, $path. ’signature.gif ’,
‘mask’, 0);
pdf_place_image($pdf, $signature, 200, 75, 1);pdf_close_image($pdf, $signature);
// set up colors for rosette
pdf_setcolor($pdf, ‘fill’, ‘rgb’, 0, 0, .4, 0);  // dark blue
pdf_setcolor($pdf, ‘stroke’, ‘rgb’, 0, 0, 0, 0); // blackListing 32.6 Continued 38 6728 CH32  9/2/04  1:17 PM  Page 810
811 Solution Overview
// draw ribbon 1
pdf_moveto($pdf, 630, 150);pdf_lineto($pdf, 610, 55);pdf_lineto($pdf, 632, 69);pdf_lineto($pdf, 646, 49);pdf_lineto($pdf, 666, 150);pdf_closepath($pdf);pdf_fill($pdf);
// outline ribbon 1
pdf_moveto($pdf, 630, 150);pdf_lineto($pdf, 610, 55);pdf_lineto($pdf, 632, 69);pdf_lineto($pdf, 646, 49);pdf_lineto($pdf, 666, 150);pdf_closepath($pdf);pdf_stroke($pdf);
// draw ribbon 2
pdf_moveto($pdf, 660, 150);pdf_lineto($pdf, 680, 49);pdf_lineto($pdf, 695, 69);pdf_lineto($pdf, 716, 55);pdf_lineto($pdf, 696, 150);pdf_closepath($pdf);pdf_fill($pdf);
// outline ribbon 2
pdf_moveto($pdf, 660, 150);pdf_lineto($pdf, 680, 49);pdf_lineto($pdf, 695, 69);pdf_lineto($pdf, 716, 55);pdf_lineto($pdf, 696, 150) ;pdf_closepath($pdf);pdf_stroke($pdf);pdf_setcolor($pdf, ‘fill’, ‘rgb’, .8, 0, 0, 0); // red
//draw rosette
draw_star(665, 175, 32, 57, 10, $pdf, true);Listing 32.6 Continued 38 6728 CH32  9/2/04  1:17 PM  Page 811
812 Chapter 32 Generating Personalized Documents in Portable Document Format (PDF)
//outline rosette
draw_star(665, 175, 32, 57, 10, $pdf, false);
// finish up the page and prepare to output
pdf_end_page($pdf);pdf_close($pdf);$data = pdf_get_buffer($pdf);
// generate the headers to help a browser choose the correct application
header(‘Content-Type: application/pdf ’);
header(‘Content-Disposition: inline; filename=certificate.pdf ’);
header(‘Content-Length: ‘. strlen($data));
// output PDF
echo $data;
}
function draw_star($centerx, $centery, $points, $radius, 
$point_size, $pdf, $filled)
{
$inner_radius = $radius-$point_size;
for ($i = 0; $i<=$points*2; $i++ )
{
$angle= ($i*2*pi())/($points*2);
if($i%2)
{
$x = $radius*cos($angle) + $centerx;$y = $radius*sin($angle) + $centery;
}else{
$x = $inner_radius*cos($angle) + $centerx;$y = $inner_radius*sin($angle) + $centery;
}if($i==0)
pdf_moveto($pdf, $x, $y) ;
else if($i==$points*2)
pdf_closepath($pdf);
else
pdf_lineto($pdf, $x, $y);
}Listing 32.6 Continued 38 6728 CH32  9/2/04  1:17 PM  Page 812
813 Solution Overview
Figure 32.7 The pdflib.php script draws the certificate into 
a PDF document.
Now let’s look at some of the parts of this script that are different from the previous
examples.
Visitors need to get their own details on a certificate, so you create the document in
memory rather than in a file. If you wrote it to a file, you would need to worry aboutmechanisms to create unique filenames, stop people from snooping into others’ certificates,and determine a way to delete older certificate files to free hard drive space on the server.
if($filled)
pdf_fill_stroke($pdf);
else
pdf_stroke($pdf);
}
?>
The certificate produced using this script is shown in Figure 32.7.As you can see, it is
quite similar to the others, except that the border is simpler and the star looks a little dif-ferent.The reason is that they are drawn into the document rather than taken from anexisting clip art file.Listing 32.6 Continued 38 6728 CH32  9/2/04  1:17 PM  Page 813
814 Chapter 32 Generating Personalized Documents in Portable Document Format (PDF)
To create a document in memory, you call pdf_new() without parameters followed by a
call to pdf_open_file() ,a s  follows:
$pdf = pdf_new();
pdf_open_file($pdf, ‘’);
The simplified border consists of three stripes: a fat border and two thin borders, one
inside the main border and one outside.Y ou draw all of them as rectangles.
To position the borders in such a way that you can easily alter the page size or the
appearance of the borders, you base all the border positions on the variables that youalready have,
$width and $height and a few new ones: $inset ,$border ,and $inner .
You use $inset to specify how many points wide the border at the edge of the page is,
$border to specify the thickness of the main border, and $inner to specify how wide
the gap between the main border and the thin borders is.
If you have drawn with another graphics API, drawing with PDFlib will present few
surprises. If you haven’t read Chapter 21,“Generating Images,” you might find it helpfulto do so, because drawing images with the gd library is similar to drawing them withPDFlib.
The thin borders are easy.T o create a rectangle, you use 
pdf_rect() ,which requires
as parameters the PDF document identifier, the x and y coordinates of the rectangle’slower-left corner, and the width and height of the rectangle. Because you want the lay-out to be flexible, you calculate these from the variables you have set:
pdf_rect($pdf, $inset-$inner,
$inset-$inner,$width-2*($inset-$inner),$height-2*($inset-$inner));
The call to pdf_rect() sets up a path in the shape of a rectangle.T o draw that shape,
you need to call the pdf_stroke() function as follows:
pdf_stroke($pdf);
To draw the main border, you need to specify the line width.The default line width is 1
point.The following call to pdf_setlinewidth() sets it to $border (in this case, 10)
points:
pdf_setlinewidth($pdf, $border);
With the width set, you again create a rectangle with pdf_rect() and call
pdf_stroke() to draw it:
pdf_rect($pdf, $inset+$border/2,
$inset+$border/2,$width-2*($inset+$border/2),$height-2*($inset+$border/2));
pdf_stroke($pdf);38 6728 CH32  9/2/04  1:17 PM  Page 814
815 Solution Overview
After you have drawn the one wide line, you need to remember to set the line width
back to 1 with this code:
pdf_setlinewidth($pdf, 1.0);
You usepdf_show_xy() to position each line of text on the certificate. For most lines of
text, you use a configurable left margin ( $startx ) as the x coordinate and a value chosen
by eye as the y coordinate. Because you want the heading centered on the page, you
need to know its width so that you can position the left side of it.Y ou can get the widthby using 
pdf_stringwidth() .The call
pdf_stringwidth($pdf, ‘PHP Certification ’, $font, 48);
returns the width of the string ‘PHP Certification ’in the current font and font size.
As with the other versions of the certificate, you include a signature as a scanned
bitmap.The three statements
$signature = pdf_open_image_file($pdf, ‘gif’, $path. ’signature.gif ’,
‘mask’, 0);
pdf_place_image($pdf, $signature, 200, 75, 1);pdf_close_image($pdf, $signature);
open a GIF file containing the signature, add the image to the page at the specified loca-
tion, and close the GIF file. Other file types can also be used. (We reverted to using GIFhere because PNG support under Windows was buggy at the time of writing.) The onlyparameter that might not be self-explanatory is the fifth parameter to 
pdf_place_image() .
This function is not limited to inserting the image at its original size.The fifth parameter isa scale factor.We chose to display the image at full size and used 1 as the scale factor, butyou could use a larger number to enlarge the image or a fraction to shrink it.
The hardest item to add to the certificate using PDFlib is the rosette.Y ou cannot
automatically open and include a Windows meta file containing the rosette used previ-ously, but you are free to draw any shapes you like.
To draw a filled shape such as one of the ribbons, you can write the following code.
Here, you set the stroke or line color to be black and the fill or interior color to be navyblue:
pdf_setcolor($pdf, ‘fill’, ‘rgb’, 0, 0, .4, 0);  // dark blue
pdf_setcolor($pdf, ‘stroke’, ‘rgb’, 0, 0, 0, 0); // black
Here, you set up a five-sided polygon to be one of the ribbons and then fill it:
pdf_moveto($pdf, 630, 150);
pdf_lineto($pdf, 610, 55);pdf_lineto($pdf, 632, 69);pdf_lineto($pdf, 646, 49);pdf_lineto($pdf, 666, 150);pdf_closepath($pdf);pdf_fill($pdf);38 6728 CH32  9/2/04  1:17 PM  Page 815
816 Chapter 32 Generating Personalized Documents in Portable Document Format (PDF)
Because you want the polygon outlined as well, you need to set up the same path a sec-
ond time but call pdf_stroke() instead of pdf_fill() .
Because the multipointed star is a complex repetitive shape, we wrote a function to
calculate the locations in the path. Our function is called draw_star() and requires x
and y coordinates for the center, the number of points required, the radius, the length ofthe points, a PDF document identifier, and a Boolean value to indicate whether the starshape should be filled in or just an outline.
The 
draw_star() function uses some basic trigonometry to calculate locations for a
series of points to lay out a star. For each point you request your star to have, you find apoint on the radius of the star and a point on a smaller circle 
$point_size within the
outer circle and draw a line between them. One point worth noting is that PHP’strigonometric functions such as 
cos() andsin() work in radians rather than degrees.
Using a function and some mathematics, you can accurately generate a complex
repetitive shape. Had you wanted a complicated pattern for the page border, you could
have used a similar approach.
When all your page elements are generated, you need to end the page and the docu-
ment.
Handling Problems with Headers
One minor issue to note in all these scripts is that you need to tell the browser whattype of data you are going to send it.Y ou do this by sending a content-type HTTPheader, as in these examples:
header( ‘Content-Type: application/msword ’);
or
header( ‘Content-Type: application/pdf ’);
One point to be aware of is that browsers deal with these headers inconsistently. In par-
ticular, Internet Explorer often chooses to ignore the MIME type and attempt to auto-matically detect the type of file. (This particular problem seems to have improved inrecent versions of Internet Explorer, so if you experience this issue, the easiest solution
may be to upgrade your browser.)
Some of the headers seem to cause problems with session control headers.There are a
few ways around this problem.We found that using 
GETparameters rather than POST or
session variable parameters avoids the problem.
Another solution is not to use an inline PDF but to get the user to download it
instead, as shown in the Hello World PDFlib example.
You can also avoid problems if you are willing to write two slightly different versions
of your code, one for Netscape and one for Internet Explorer.38 6728 CH32  9/2/04  1:17 PM  Page 816
817 Next
Extending the Project
Adding some more realistic assessment tasks to the examination obviously could extend
this chapter’s project, but we really intended it as an example of ways to deliver yourown documents.
Customized documents that you might want to deliver online could include legal
documents, partially filled-in order or application forms, or forms needed by governmentdepartments.
Further Reading
We suggest you visit Adobe’s site if you want to know more about the PDF (and FDF)
formats:
http://www.adobe.com
Next
In the next chapter, we examine PHP 5’s new XML capabilities and use PHP to con-nect to Amazon’s Web Services API using REST and SOAP .38 6728 CH32  9/2/04  1:17 PM  Page 817
38 6728 CH32  9/2/04  1:17 PM  Page 818
33
Connecting to Web Services with
XML and SOAP
INTHE PAST FEW YEARS ,EXTENSIBLE MARKUP LANGUAGE (XML) has become an
important means of communication. In this chapter, you use Amazon’s Web Servicesinterface to build a shopping cart on your website that uses Amazon as a back end. (Thisapplication is named Tahuayo, which is the name of an Amazonian tributary.) Y ou usetwo different methods to do this: SOAP and REST. REST is also known as XML overHTTP .Y ou use PHP’s built-in SimpleXML library and the external NuSOAP library toimplement these two methods.
In this chapter, we discuss the following topics:
nUnderstanding XML and SOAP basics
nUsing XML to communicate with Amazon
nParsing XML with PHP’s SimpleXML library
nCaching responses
nTalking to Amazon with NuSOAP
The Problem
We have two goals with this project:The first is to help you gain an understanding of
what XML and SOAP are and how to use them in PHP .The second is to put thesetechnologies to use to communicate with the outside world.We chose the Amazon WebServices program as an interesting example that you might find useful for your ownwebsite.
Amazon has long offered an associate program that allows you to advertise Amazon’s
products on your website. Users can then follow a link to each product’s page onAmazon’s site. If someone clicks through from your site and then buys that product, youreceive a small commission.39 6728 CH33  9/2/04  1:20 PM  Page 819
820 Chapter 33 Connecting to Web Services with XML and SOAP
The Web Services program enables you to use Amazon more as an engine:Y ou can
search it and display the results via your own site, or fill a user’s shopping cart directly withthe contents of items he has selected while browsing your site. In other words, the cus-tomer uses your site until it is time to check out, which he then has to do via Amazon.
Communications between you and Amazon can take place in two possible ways.The
first way is by using XML over HTTP , which is also known as Representational StateTransfer (REST). If, for example, you want to perform a search using this method, you
send a normal HTTP request for the information you require, and Amazon will respondwith an XML document containing the information you requested.Y ou can then parsethis XML document and display the search results to the end user using an interface ofyour choice.The process of sending and receiving data via HTTP is very simple, but how
easy it is to parse the resulting document depends on the complexity of the document.
The second way to communicate with Amazon is to use SOAP , which is one of the
standard Web Services protocols. It used to stand for Simple Object Access Protocol, butit was decided that the protocol wasn’t that simple and that the name was a bit mislead-ing.The result is that the protocol is still called SOAP , but it is no longer an acronym.
In this project, you build a SOAP client that can send requests to and receive respons-
es from the Amazon SOAP server.They contain the same information as the responsesyou get using the XML over HTTP method, but you will use a different approach to
extract the data, namely the NuSOAP library.
Our final goal in this project is for you to build your own book-selling website that
uses Amazon as a back end.Y ou build two alternative versions: one using REST and oneusing SOAP .
Understanding XML
Let’s spend a few moments examining XML and Web Services, in case you are notfamiliar with these concepts.
As mentioned previously, XML is the Extensible Markup Language.The specification
is available from the W3C. Lots of information about XML can be found at the W3C’sXML site at http://www.w3.org/XML/.
XML is derived from the Standard Generalized Markup Language, or SGML. If you
already know Hypertext Markup Language, or HTML (and if you don’t, you have started reading this book at the wrong end), you will have little difficulty with the con-cepts of XML.
XML is a tag-based text format for documents.As an example of an XML document,
Listing 33.1 shows a response Amazon sends to an XML over HTTP request.
Listing 33.1 XML Document Describing the First Edition of This Book
<?xml version= ”1.0”encoding= ”UTF-8”?>
<ProductInfo xmlns:xsi= ”http://www.w3.org/2001/XMLSchema-instance ”
xsi:noNamespaceSchemaLocation= ”http://xml.amazon.com/schemas2/ dev-heavy.xsd ”>39 6728 CH33  9/2/04  1:20 PM  Page 820
821 The Problem
<Details
url=”http://www.amazon.com/exec/obidos/redirect?tag=tangledwebdesign%
26creative=XXXXXXXXXXXXXX%26camp=2025%26link_code=xm2%26path=ASIN/0672317842 ”>
<Asin>0672317842</Asin><ProductName>PHP and MySQL Web Development</ProductName><Catalog>Book</Catalog><Authors>
<Author>Luke Welling</Author><Author>Laura Thomson</Author>
</Authors><ReleaseDate>30 March, 2001</ReleaseDate><Manufacturer>Sams</Manufacturer><ImageUrlSmall>http://images.amazon.com/images/P/0672317842.01.
THUMBZZZ.jpg</ImageUrlSmall>
<ImageUrlMedium>http://images.amazon.com/images/P/0672317842.01.
MZZZZZZZ.jpg</ImageUrlMedium>
<ImageUrlLarge>http://images.amazon.com/images/P/0672317842.01.
LZZZZZZZ.jpg</ImageUrlLarge>
<ListPrice>$49.99</ListPrice><OurPrice>$34.99</OurPrice><UsedPrice>$31.95</UsedPrice><ThirdPartyNewPrice>$31.75</ThirdPartyNewPrice><SalesRank>312</SalesRank><Lists>
<ListId>3KZW1EV9QMB5F</ListId><ListId>22YCO1IGPIZJ3</ListId><ListId>Y2I9B362QXVX</ListId>
</Lists><BrowseList>
<BrowseNode>
<BrowseName>PHP (Computer program language</BrowseName>
</BrowseNode><BrowseNode>
<BrowseName>SQL (Computer program language</BrowseName>
</BrowseNode><BrowseNode>
<BrowseName>Web sites</BrowseName>
</BrowseNode><BrowseNode>
<BrowseName>Design</BrowseName>
</BrowseNode><BrowseNode>
<BrowseName>SQL (Computer language)</BrowseName>
</BrowseNode>Listing 33.1 Continued 39 6728 CH33  9/2/04  1:20 PM  Page 821
822 Chapter 33 Connecting to Web Services with XML and SOAP
<BrowseNode>
<BrowseName>Sql (Programming Language)</BrowseName>
</BrowseNode><BrowseNode>
<BrowseName>Computer Networks</BrowseName>
</BrowseNode><BrowseNode>
<BrowseName>Computer Bks - Languages / Programming</BrowseName>
</BrowseNode><BrowseNode>
<BrowseName>Computers</BrowseName>
</BrowseNode><BrowseNode>
<BrowseName>Programming Languages - General</BrowseName>
</BrowseNode><BrowseNode>
<BrowseName>Internet - Web Site Design</BrowseName>
</BrowseNode><BrowseNode>
<BrowseName>Database Management - SQL Server</BrowseName>
</BrowseNode><BrowseNode>
<BrowseName>Programming Languages - SQL</BrowseName>
</BrowseNode>
</BrowseList><Media>Paperback</Media><NumMedia>1</NumMedia><Isbn>0672317842</Isbn><Availability>Usually ships within 24 hours</Availability><SimilarProducts>
<Product>0735709211</Product><Product>1861003730</Product><Product>073570970X</Product><Product>1861006918</Product><Product>0596000413</Product>
</SimilarProducts>
</Details>
</ProductInfo>
The document begins with the following line:
<?xml version= ”1.0”encoding= ”UTF-8”?>
This standard declaration tells you the following document will be XML using UTF-8
character encoding.Listing 33.1 Continued 39 6728 CH33  9/2/04  1:20 PM  Page 822
823 The Problem
Now look at the body of the document.The whole document consists of pairs of
opening and closing tags, such as
<ProductName>PHP and MySQL Web Development</ProductName>
ProductName is an element, just as it would be in HTML.And, just as in HTML, you
can nest elements:
<Authors>
<Author>Luke Welling</Author><Author>Laura Thomson</Author>
</Authors>
Also like HTML, elements can have attributes, as in this example:
<Details url= ”http://www.amazon.com/exec/obidos/redirect?tag=
➥tangledwebdesign%26creative=XXXXXXXXXXXXXX%26camp=2025%26link_code
➥=xm2%26path=ASIN/0672317842 ”>
This Details element has a single attribute: url.Because the URL is very long, it has
been broken over three lines here.
There are also some differences from HTML.The first is that each opening tag must
have a closing tag.The exception to this rule is empty elements that open and close in asingle tag because they do not enclose any text. If you are familiar with XHTML, youhave seen the 
<br /> tag used in place of <br> for this exact reason. In addition, all ele-
ments must be properly nested.Y ou would probably get away with <b><i>Text</b></i>
using an HTML parser, but to be valid XML or XHTML, the tags would need to be
properly nested as <b><i>Text</i></b> .
The main difference you will notice between XML and HTML is that we seem to be
making up our own tags as we go along! This is the flexibility of XML.Y ou can struc-ture your documents to match the data that you want to store.Y ou can formalize thestructure of XML documents by writing either a Document T ype Definition (DTD) oran XML Schema. Both of these documents are used to describe the structure of a givenXML document. If you like, you can think of the DTD or Schema as being like a classdeclaration and the XML document as being like an instance of that class. In this partic-ular example, you do not use a DTD or Schema.
You can read Amazon’s DTD for this document here:
http://xml.amazon.com/schemas2/dev-heavy.dtd
You can read the XML Schema for it here:
http://xml.amazon.com/schemas2/dev-heavy.xsd
You cannot open the DTD file in some browsers because they will try to parse the
DTD as XML and get confused.Y ou can, however, download it and read it in the editorof your choice.Y ou should be able to open the XML Schema directly in your browser.39 6728 CH33  9/2/04  1:20 PM  Page 823
824 Chapter 33 Connecting to Web Services with XML and SOAP
Notice that, other than the initial XML declaration, the entire body of the document
is contained inside the ProductInfo element.This is called the root element of the docu-
ment. Let’s take a closer look:
<ProductInfo xmlns:xsi= ”http://www.w3.org/2001/XMLSchema-instance ”
xsi:noNamespaceSchemaLocation= ”http://xml.amazon.com/schemas2/
dev-heavy.xsd ”>
This element has some slightly unusual attributes.They are XML namespaces .You do not
need to understand namespaces for what you will do in this project, but they can bevery useful.The basic idea is to qualify element and attribute names with a namespace so
that common names do not clash when dealing with documents from different sources.
If you would like to know more about namespaces, you can read the document
“Namespaces in XML Recommendation” at http://www.w3.org/TR/REC-xml-names/.
If you would like to know more about XML in general, a huge variety of resources is
available.The W3C site is an excellent place to start, and there are also hundreds of
excellent books and web tutorials. ZVON.org is one of the best web-based ones.
Understanding Web Services
WebServices are application interfaces made available via the World Wide Web. If you
like to think in object-oriented terms, a Web Service can be seen as a class that exposesits public methods via the Web.Web Services are now becoming widespread, and someof the biggest names in the business are making some of their functionality available viaWeb Services.
For example, Google,Amazon, eBay, and PayPal all offer a range of Web Services.
After you go through the process of setting up a client to the Amazon interface in thischapter, you should find it very straightforward to build a client interface to Google.Y oucan find more information at http://www.google.com/apis/.
An ever-growing list of public Web Services is available at http://www.xmethods.net.Several core protocols are involved in this remote function call methodology.T wo of
the most important ones are SOAP and WSDL.
SOAP
SOAP is a request-and-response–driven messaging protocol that allows clients to invoke
Web Services and allows servers to respond. Each SOAP message, whether a request or
response, is a simple XML document.A sample SOAP request you might send to
Amazon is shown in Listing 33.2.
Listing 33.2 SOAP Request for a Search Based on the ASIN
<?xml version= ”1.0”encoding= ”UTF-8”?>
<SOAP-ENV:Envelope xmlns:SOAP-ENV= ”http://schemas.xmlsoap.org/soap/
➥envelope/ ”
xmlns:SOAP-ENC= ”http://schemas.xmlsoap.org/soap/
➥encoding/ ”39 6728 CH33  9/2/04  1:20 PM  Page 824
825 The Problem
xmlns:xsi= ”http://www.w3.org/2001/XMLSchema-instance ”
xmlns:xsd= ”http://www.w3.org/2001/XMLSchema ”
SOAP-ENV:encodingStyle= ”http://schemas.xmlsoap.org/soap/encoding/ ”>
<SOAP-ENV:Body>
<namesp1:AsinSearchRequest xmlns:namesp1= ”urn:PI/DevCentral/
➥SoapService ”>
<AsinSearchRequest xsi:type= ”m:AsinRequest ”>
<asin >0060518057</asin><tag >your-associate-id</tag><type >heavy</type><dev-tag >your-dev-tag</dev-tag>
</AsinSearchRequest>
</namesp1:AsinSearchRequest>
</SOAP-ENV:Body>
</SOAP-ENV:Envelope>
The SOAP message begins with the declaration that this is an XML document.The root
element of all SOAP messages is the SOAP envelope.Within it, you find the Body ele-
ment that contains the actual request.
This request is an AsinSearchRequest ,which asks the Amazon server to look up a
particular item in its database based on the ASIN, which stands for Amazon.comStandard Item Number.This is a unique identifier given to every product in theAmazon.com database.
Think of 
AsinSearchRequest as a function call on a remote machine and the ele-
ments contained within this element as the parameters you are passing to that function.In this case, you pass an ASIN for the Dilbert book Way of the Weasel .You also need to
pass in the tag, which is your Associate ID; the type of search to perform (
heavy or
lite); and the dev-tag ,which is a developer token value Amazon will give you.The
element type tells the service whether you want limited detail ( lite) or all available
information ( heavy ).
The response to this request is similar to the XML document you looked at in 
Listing 33.1, but it is enclosed in a SOAP envelope.
When dealing with SOAP , you usually generate SOAP requests and interpret respons-
es programmatically using a SOAP library, regardless of the programming language youare using.This is a good thing because it saves on the effort of having to build the SOAPrequest and interpret the response manually.
WSDL
WSDL stands for Web Services Description Language .(It is often pronounced “wiz-dul.”) This
language is used to describe the interface to available services at a particular website. If youwould like to see the WSDL document describing the Amazon Web Services used in this
chapter, it is located at http://soap.amazon.com/schemas2/AmazonWebServices.wsdl.Listing 33.2 Continued 39 6728 CH33  9/2/04  1:20 PM  Page 825
826 Chapter 33 Connecting to Web Services with XML and SOAP
As you will see if you follow this link,WSDL documents are significantly more com-
plex than SOAP messages.Y ou will always generate and interpret them programmatically,if given a choice.
If you would like to know more about WSDL, you can consult the W3C Draft at
http://www.w3.org/TR/wsdl20/.
At the time of writing,WSDL is not yet a W3C Recommendation, so it is still sub-
ject to change.This has not stopped developers everywhere from using it enthusiastically.However, like all pieces of the Web Services puzzle, it is subject to change because thewhole area is developing quickly.
Solution Components
There are a few parts you need to build your solution.As well as the most obviousparts—a shopping cart interface to show to customers and code to connect to Amazonvia REST or SOAP—you need some ancillary parts. Having retieved an XML docu-ment, your code needs to parse it to extract the information your cart will display.T omeet Amazon’s requirements and to improve performance, you need to consider caching.Finally, as the checkout activity needs to be done at Amazon, you need some functionali-ty to hand over the contents of the user’s cart to Amazon and pass the user over to thatservice.
Building a Shopping Cart
You obviously need to build a shopping cart as the front end for the system.Y ou’ve done
this before, in Chapter 27,“Building a Shopping Cart.” Because shopping carts are notthe main focus in this project, this chapter contains a simplified application.Y ou just needto provide a basic cart so that you can track what the customer would like to buy andreport it to Amazon upon checkout.
Using Amazon’s Web Services Interfaces
To use the Amazon Web Services interface, you need to download the Amazon Web
Services Developers’ Kit.We got it from http://www.amazon.com/gp/aws/landing.html.This URL is subject to change, however.
You also need to sign up for a developer token.Y ou can do this at the same site.This
token is used to identify you to Amazon when your requests come in.
You might also like to sign up for an Amazon Associate ID. It enables you to collect
commission if people buy any products via your interface.
When you download the developers’ kit, read through it. It comes with documenta-
tion describing how the interface works and code samples in a variety of languages,including PHP .39 6728 CH33  9/2/04  1:20 PM  Page 826
827 Solution Components
Before you can download it, you need to agree to the license agreement.This is
worth reading because it is not the usual yada-yada software license. Some of the license
conditions that are important during implementation are the following:
nYou must not make more than one request per second.
nYou must cache data coming from Amazon.
nYou may cache most data for 24 hours and some stable attributes for up to three
months.
nIf you cache prices and availability for more than an hour, you must display a dis-claimer.
nYou must link back to a page on Amazon.com and must not link text or graphics
downloaded from Amazon to another commercial website.
With a hard-to-spell domain name, no promotion, and no obvious reason to use
Tahuayo.com instead of going straight to Amazon.com, you do not need to take any fur-
ther steps to keep requests below one per second.
In this project, you implement caching to meet the conditions at points 2 to 4.The
application caches images for 24 hours and product data (which contains prices andavailability) for 1 hour.
Your application also follows the fifth point.Y ou want items on the main page to link
to detailed pages on your site, but you link to Amazon when an order is complete.
Parsing XML
The first interface Amazon offers to its Web Services is via REST.This interface accepts
a normal HTTP request and returns an XML document.T o use this interface, you needto be able to parse the XML response Amazon sends back to you.Y ou can do this byusing PHP’s SimpleXML library.This library requires at least PHP version 5.0.0 but isenabled by default.
Using SOAP with PHP
The other interface offering the same Web Services is SOAP .T o access these servicesusing SOAP , you need to use one of the various PHP SOAP libraries.There is a built-inSOAP library, but because it will not always be available, you can use the NuSOAPlibrary. Because NuSOAP is written in PHP , it does not need compiling. It is just a single file to be called via 
require_once() .
NuSOAP is available from http://dietrich.ganx4.com/nusoap/. NuSOAP is available
under the Lesser GPL; that is, you may use it in any application, including nonfree applications.39 6728 CH33  9/2/04  1:20 PM  Page 827
828 Chapter 33 Connecting to Web Services with XML and SOAP
Caching
As we mentioned previously, one of the terms and conditions imposed upon developers
by Amazon is that data downloaded from Amazon via Web Services must be cached. In
this solution, you will need to find a way to store and reuse the data that you downloaduntil it has passed its use-by date.
Solution Overview
This project again uses an event-driven approach to run the code, as in Chapters 29,“Building a Web-Based Email Service,” and 30,“Building a Mailing List Manager.”Wedid not draw a system flow diagram for you in this example because there are only a fewscreens in the system, and the links between them are simple.
Users will begin at the main Tahuayo screen, shown in Figure 33.1.
Figure 33.1 The first screen for Tahuayo shows all the main features of the
site: category navigation, searching, and the shopping cart.
As you can see, the main features of the site are the Selected Categories display and the
items in those categories. By default, you display the current best-sellers in the nonfic-tion category on the front page. If a user clicks on another category, she will see a similardisplay for that category.
39 6728 CH33  9/2/04  1:20 PM  Page 828
829 Solution Overview
A brief piece of terminology before we go further:Amazon refers to categories as
browse nodes .You will see this expression used throughout our code and the official docu-
mentation.
The documentation provides a partial list of popular browse nodes. In addition, if you
want a particular one, you can browse the normal Amazon.com site and read it from the
URL, but there is no way to get a complete list. Frustratingly, some important cate-gories, such as best-selling books, cannot be accessed as browse nodes.
More books and links to additional pages are available at the bottom of this page, but
you can’t see them in the screenshot.Y ou will display 10 books on each page, along with
links to up to 30 other pages.This 10-per page value is set by Amazon.The 30-pagelimit was our own arbitrary choice.
From here, users can click through to detailed information on individual books. This
screen is shown in Figure 33.2.
Figure 33.2 The details page shows more information about a particular
book, including similar products and reviews.
Although it does not all fit in a screenshot, the script shows most, but not all, of the
information that Amazon sends with a heavy request on this page.We chose to ignoreparts aimed at products other than books and the list of categories the book fits in.
39 6728 CH33  9/2/04  1:20 PM  Page 829
830 Chapter 33 Connecting to Web Services with XML and SOAP
If users click through the cover image, they will be able to see a larger version of the
image.
You might have noticed the search box at the top of the screen in these figures.This
feature runs a keyword search through the site and searches Amazon’s catalog via its WebServices interface.An example of the output of a search is shown in Figure 33.3.
Figure 33.3 This screen shows the results of searching for aardman .
Although this project lists only a few categories, customers can get to any book by using
the search facility and navigating to particular books.
Each individual book has an Add to Cart link with it. Clicking on this or the Details
link in the cart summary takes the customer to a display of the cart contents.This page isshown in Figure 33.4.
39 6728 CH33  9/2/04  1:20 PM  Page 830
831 Solution Overview
Figure 33.4 From the shopping cart page, the customer can delete items,
clear the cart, or check out.
Finally, when a customer checks out by clicking on one of the Checkout links, you send
the details of her shopping cart to Amazon and take her there. She will see a page similarto the one in Figure 33.5.
You should now understand what we mean by building your own front end and
using Amazon as the back end.
Because this project also uses the event-driven approach, most of the core decision-
making logic of the application is in one file,
index.php .A summary of the files in the
application is shown in Table 33.1.
39 6728 CH33  9/2/04  1:20 PM  Page 831
832 Chapter 33 Connecting to Web Services with XML and SOAP
Figure 33.5 The items that were in the customer’s Tahuayo cart are now in
her Amazon cart.
Table 33.1 Files in the Tahuayo Application
Filename Type Description
index.php Application Contains the main application file
about.php Application Shows the About page
constants.php Include file Sets up some global constants and variables
topbar.php Include file Generates the info bar across  the top of each
page and the CSS
bottom.php Include file Generates the footer at the bottom of each
page
AmazonResultSet.php Class file Contains the PHP class that stores the result
of each Amazon query 
Product.php Class file Contains the PHP class that stores informa-
tion on one particular book
bookdisplayfunctions.p Functions Contains functions that help display a book
and lists of books
39 6728 CH33  9/2/04  1:20 PM  Page 832
833 Solution Overview
cachefunctions.php Functions Contains functions to carry out the caching
required by Amazon
cartfunctions.php Functions Contains shopping cart–related functions
categoryfunctions.php Functions Contains functions that help retrieve and dis-
play a category
utilityfunctions.php Functions Contains a few utility functions used
throughout the application
You also need the nusoap.php file we mentioned previously because it is required in
these files. NuSOAP is in the chapter33 directory on the CD-ROM at the back of the
book, but if the author keeps maintaining it, you might like to replace it with a newerversion from http://dietrich.ganx4.com/nusoap/index.php.
Let’s begin this project by looking at the core application file 
index.php .
Core Application
The application file index.php is shown in Listing 33.3.
Listing 33.3 index.php —The Core Application File
<?php
//we are only using one session variable ‘cart’to store the cart contents
session_start();
require_once( ‘constants.php ’);
require_once( ‘Product.php ’);
require_once( ‘AmazonResultSet.php ’);
require_once( ‘utilityfunctions.php ’);
require_once( ‘bookdisplayfunctions.php ’);
require_once( ‘cartfunctions.php ’); 
require_once( ‘categoryfunctions.php ’);
// These are the variables we are expecting from outside.
// They will be validated and converted to globals$external = array( ‘action’, ‘ASIN’, ‘mode’, ‘browseNode ’, ‘page’, ‘search’);
// the variables may come via Get or Post
// convert all our expected external variables to short global namesforeach ($external as $e){
if(@$_REQUEST[$e])
$$e = $_REQUEST[$e];
else
$$e = ‘’;Table 33.1 Continued
Filename Type Description39 6728 CH33  9/2/04  1:20 PM  Page 833
834 Chapter 33 Connecting to Web Services with XML and SOAP
$$e = trim($$e);
}
// default values for global variables
if($mode== ’’)
$mode = ‘books’; // No other modes have been tested
if($browseNode== ’’)
$browseNode = 53; //53 is bestselling non-fiction books
if($page== ’’)
$page = 1;  // First Page - there are 10 items per page
//validate/strip input
if(!eregi( ‘^[A-Z0-9]+$ ’, $ASIN)) // ASINS must be alpha-numeric
$ASIN =’’;
if(!eregi( ‘^[a-z]+$ ’, $mode)) // mode must be alphabetic
$mode = ‘books’;
$page=intval($page); // pages and browseNodes must be integers$browseNode = intval($browseNode);// it may cause some confusion, but we are stripping characters out from // $search it seems only fair to modify it now so it will be displayed // in the heading$search = safeString($search);
if(!isset($_SESSION[ ‘cart’]))
{
session_register( ‘cart’);
$_SESSION[ ‘cart’] = array();
}
// tasks that need to be done before the top bar is shown
if($action == ‘addtocart ’)
addToCart($_SESSION[ ‘cart’], $ASIN, $mode) ;
if($action == ‘deletefromcart ’)
deleteFromCart($_SESSION[ ‘cart’], $ASIN) ;
if($action == ‘emptycart ’)
$_SESSION[ ‘cart’] = array();
// show top barrequire_once ( ‘topbar.php ’);
// main event loop.  Reacts to user action on the calling page
switch ($action){
case ‘detail’:
showCategories($mode);showDetail($ASIN, $mode);
break;Listing 33.3 Continued 39 6728 CH33  9/2/04  1:20 PM  Page 834
835 Solution Overview
case ‘addtocart ’:
case ‘deletefromcart ’:
case ‘emptycart ’:
case ‘showcart ’:
echo ‘<hr /><h1>Your Shopping Cart</h1> ’;
showCart($_SESSION[ ‘cart’], $mode);
break;
case ‘image’:
showCategories($mode);echo ‘<h1>Large Product Image</h1> ’;
showImage($ASIN, $mode);
break;
case ‘search’:
showCategories($mode);echo “<h1>Search Results For ‘$search’</h1>”;
showSearch($search, $page, $mode);  
break;
case ‘browsenode ’:
default:
showCategories($mode);$category = getCategoryName($browseNode);if(!$category||$category== ’Best Selling Books ’)
{
echo ‘<h1>Current Best Sellers</h1> ’;
}else{
echo “<h1>Current Best Sellers in $category</h1> ”;
}showBrowseNode($browseNode, $page, $mode) ;
break;
}require ( ‘bottom.php ’);
?>
Let’s work our way through this file.Y ou begin by creating a session.Y ou store the cus-
tomer’s shopping cart as a session variable as you have done before.
You then include several files. Most of them are functions that we discuss later, but we
need to address the first included file now.This file, constants.php ,defines some
important constants and variables that will be used throughout the application.The con-tents of 
constants.php can be found in Listing 33.4.Listing 33.3 Continued 39 6728 CH33  9/2/04  1:20 PM  Page 835
836 Chapter 33 Connecting to Web Services with XML and SOAP
Listing 33.4 constants.php —Declaring Key Global Constants and Variables
<?php
// this application can connect via REST (XML over HTTP) or SOAP// define one version of METHOD to choose.// define( ‘METHOD’, ‘SOAP’);
define(‘METHOD’, ‘REST’);
// make sure to create a cache directory and make it writable
define(‘CACHE’, ‘cache’); // path to cached files
define(‘ASSOCIATEID ’, ‘webservices-20 ’); //put your associate id here
define(‘DEVTAG’, ‘XXXXXXXXXXXXXX ’); // put your developer tag here
//give an error if software is run with the dummy devtag
if(DEVTAG== ’XXXXXXXXXXXXXX ’)
{
die (‘You need to sign up for an Amazon.com developer tag at<a href =
“https://associates.amazon.com/exec/panama/associates/join/
➥developer/application.html/ref=sc_bb_l_0/002 ”>Amazon</a>
when you install this software.  You should probably sign up for an associate ID at the same time. Edit the file constants.php. ’);
}
// (partial) list of Amazon browseNodes.
$categoryList = array(5=> ’Computers & Internet ’, 3510=> ’Web Development ’, 
295223=> ’PHP’, 17=>’Literature and Fiction ’, 
3=>’Business & Investing ’, 53=>’Non Fiction ’,
23=>’Romance’, 75=>’Science’, 21=>’Reference ’,
6 =>’Food & Wine ’, 27=>’Travel’, 
16272=>’Science Fiction ’
);
?>
This application has been developed to use either REST or SOAP .Y ou can set which
one it should use by changing the value of the METHOD constant.
The CACHE constant holds the path to the cache for the data you download from
Amazon. Change this to the path you would like used on your system.
The ASSOCIATEID constant holds the value of your Associate ID. If you send this
value to Amazon with transactions, you get a commission. Be sure to change it to your
own Associate ID.
The DEVTAG constant holds the value of the developer token Amazon gives you when
you sign up.Y ou need to change this value to your own developer token; otherwise, the
application will not work.Y ou can sign up for a tag at 
http://www.amazon.com/gp/aws/landing.html39 6728 CH33  9/2/04  1:20 PM  Page 836
837 Solution Overview
Now let’s look back at index.php .It contains some preliminaries and then the main
event loop.Y ou begin by extracting any incoming variables from the $_REQUEST super-
global that came via GETor POST.You then set up some default values for some standard
global variables that determine what will be displayed later, as follows:
// default values for global variables
if($mode== ’’)
$mode = ‘books’; // No other modes have been tested
if($browseNode== ’’)
$browseNode = 53; //53 is bestselling non-fiction books
if($page== ’’)
$page = 1;  // First Page - there are 10 items per page
You set the mode variable to books .Amazon supports many other modes (types of prod-
ucts), but for this application, you just need to worry about books. Modifying the codein this chapter to deal with other categories should not be too hard.The first step in thisexpansion would be to reset 
$mode .You would need to check the Amazon documenta-
tion to see what other attributes are returned for nonbook products and remove book-specific language from the user interface.
The 
browseNode variable specifies what category of books you would like displayed.
This variable may be set if the user has clicked through one of the Selected Categorieslinks. If it is not set—for example, when the user first enters the site—you will set it to
53.Amazon’s browse nodes are simply integers that identify a category.The value 53rep-
resents the category Non-Fiction Books, which seems as good a node as any other to
display on the initial front page given that some of the best generic categories are notavailable as browse nodes.
The 
page variable tells Amazon which subset of the results you would like displayed
within a given category. Page 1 contains results 1–10, page 2 has results 11–20, and soon.Amazon sets the number of items on a page, so you do not have control over thisnumber.Y ou could, of course, display two or more Amazon “pages” of data on one of
your pages, but 10 is both a reasonable figure and the path of least resistance.
Next, you need to tidy up any input data you have received, whether through the
search box or via 
GETor POST parameters:
//validate/strip input
if(!eregi( ‘^[A-Z0-9]+$ ’, $ASIN)) // ASINS must be alpha-numeric
$ASIN =’’;
if(!eregi( ‘^[a-z]+$ ’, $mode)) // mode must be alphabetic
$mode = ‘books’;
$page=intval($page); // pages and browseNodes must be integers$browseNode = intval($browseNode);// it may cause some confusion, but we are stripping characters out from // $search it seems only fair to modify it now so it will be displayed // in the heading$search = safeString($search) ;39 6728 CH33  9/2/04  1:20 PM  Page 837
838 Chapter 33 Connecting to Web Services with XML and SOAP
This is nothing new.The safeString() function is in the utilityfunctions.php file.
It simply removes any nonalphanumeric characters from the input string via a regularexpression replacement. Because we have covered this topic before, we did not include ithere in the text.
The main reason that you need to validate input in this application is that you use the
customer’s input to create filenames in the cache.Y ou could run into serious problems ifyou allow customers to include 
..or /in their input.
Next, you set up the customer’s shopping cart, if she does not already have one:
if(!isset($_SESSION[ ‘cart’]))
{
session_register( ‘cart’);
$_SESSION[ ‘cart’] = array();
}
You still have a few tasks to perform before you can display the information in the top
information bar on the page (see Figure 33.1 for a reminder of what this looks like).Aglimpse of the shopping cart is shown in the top bar of every page. It is therefore impor-tant that the cart variable is up to date before this information is displayed:
// tasks that need to be done before the top bar is shown
if($action == ‘addtocart ’)
addToCart($_SESSION[ ‘cart’], $ASIN, $mode);
if($action == ‘deletefromcart ’)
deleteFromCart($_SESSION[ ‘cart’], $ASIN) ;
if($action == ‘emptycart ’)
$_SESSION[ ‘cart’] = array();
Here, you add or delete items from the cart as necessary before displaying the cart.We
come back to these functions when we discuss the shopping cart and checking out. Ifyou want to look at them now, they are in the file 
cartfunctions.php .W e are leaving
them aside for a minute because you need to understand the interface to Amazon first.
Next, you include the file topbar.php .This file simply contains HTML and 
a style sheet and a single function call to the ShowSmallCart() function (from 
cartfunctions.php ). It displays the small shopping cart summary in the top-right 
corner of the figures.We come back to this when we discuss the cart functions.
Finally, we come to the main event-handling loop.A summary of the possible actions
is shown in Table 33.2.
Table 33.2 Possible Actions in the Main Event Loop
Action Description
browsenode Shows books in the specified category.This is the default action.
detail Shows the details of one particular book.
image Shows a large version of the book’s cover.
search Shows the results of a user search.39 6728 CH33  9/2/04  1:20 PM  Page 838
839 Solution Overview
addtocart Adds an item to the user’s shopping cart.
deletefromcart Deletes an item from the shopping cart.
emptycart Empties the shopping cart altogether.
showcart Shows the contents of the cart.
As you can see, the first four actions in this table relate to retrieving and displaying infor-
mation from Amazon.The second group of four deals with managing the shopping cart.
The actions that retrieve data from Amazon all work in a similar way. Let’s consider
retrieving data about books in a particular browsenode (category) as an example.
Showing Books in a Category
The code executed when the action is browsenode (view a category) is as follows:
showCategories($mode);
$category = getCategoryName($browseNode);if(!$category||$category== ’Best Selling Books ’)
{
echo ‘<h1>Current Best Sellers</h1> ’;
}else{
echo “<h1>Current Best Sellers in $category</h1> ”;
}showBrowseNode($browseNode, $page, $mode);
The showCategories() function displays the list of selected categories you see near the
top of most of the pages.The getCategoryName() function returns the name of the cur-
rent category given its browsenode number.The showBrowseNode() function displays a
page of books in that category.
Let’s begin by considering the showCategories() function.The code for this func-
tion is shown in Listing 33.5.
Listing 33.5 showCategories() Function from categoryfunctions.php —A List
of Categories
//display a starting list of popular categories
function showCategories($mode){
global $categoryList;echo ‘<hr><h2>Selected Categories</h2> ’;  
if($mode == ‘books’)
{Table 33.2 Continued 
Action Description39 6728 CH33  9/2/04  1:20 PM  Page 839
840 Chapter 33 Connecting to Web Services with XML and SOAP
asort($categoryList);
$categories = count($categoryList);
$columns = 4;$rows = ceil($categories/$columns);
echo ‘<table border = 0 cellpadding = 0 cellspacing=0 width = “100%”><tr>’;
reset($categoryList);for($col = 0; $col<$columns; $col++)
{
echo ‘<td width = “‘.(100/$columns). ’%”valign = top><ul> ’;
for($row = 0; $row<$rows; $row++){
$category = each($categoryList);if($category){
$browseNode = $category[ ‘key’];
$name = $category[ ‘value’];
echo “<li><span class = ‘category ’><a href =
‘index.php?action=browsenode&browseNode=$browseNode ’>$name</a>
</span></li> ”;
}
}echo ‘</ul></td> ’;
}echo ‘</tr></table><hr> ’;
}
}
This function uses an array called categoryList ,declared in the file constants.php ,t o
map browsenode numbers to names.The desired browsenode s are simply hard-coded
into this array.This function sorts the array and displays the various categories.
The getCategoryName() function called next in the main event loop looks up the
name of the browsenode that you are currently looking at so you can display a heading
on the screen such as Current Best Sellers in Business & Investing. It looks up this head-ing in the 
categoryList array mentioned previously.
The fun really starts when you get to the showBrowseNode() function, shown in
Listing 33.6.Listing 33.5 Continued 39 6728 CH33  9/2/04  1:20 PM  Page 840
841 Solution Overview
Listing 33.6 showBrowseNode() Function from bookdisplayfunctions.php —A
List of Categories
// For a particular browsenode, display a page of products
function showBrowseNode($browseNode, $page, $mode){
$ars = getARS( ‘browse’, array( ‘browsenode ’=>$browseNode, 
‘page’=> $page, 
‘mode’=>$mode));
showSummary($ars->products(), $page, $ars->totalResults(), 
$mode, $browseNode);
}
The showBrowseNode() function does exactly two things. First, it calls the getARS()
function from cachefunctions.php .This function gets and returns an
AmazonResultSet object (more on this in a moment).Then it calls the showSummary()
function from bookdisplayfunctions.php to display the retrieved information.
The getARS() function is absolutely key to driving the whole application. If you
work your way through the code for the other actions—viewing details, images, and
searching—you will find that it all comes back to this.
Getting an AmazonResultSet Class
Let’s look at that getARS() function in more detail. It is shown in Listing 33.7.
Listing 33.7 getARS() Function from cachefunctions.php —A Resultset for a
Query
// Get an AmazonResultSet either from cache or a live query
// If a live query add it to the cachefunction getARS($type, $parameters){
$cache = cached($type, $parameters);if($cache)  // if found in cache{
return  $cache;
}else{
$ars = new AmazonResultSet;if($type == ‘asin’)
$ars->ASINSearch(padASIN($parameters[ ‘asin’]), $parameters[ ‘mode’]);
if($type == ‘browse’)                   
$ars->browseNodeSearch($parameters[ ‘browsenode ’], $parameters[ ‘page’], 
$parameters[ ‘mode’]);39 6728 CH33  9/2/04  1:20 PM  Page 841
842 Chapter 33 Connecting to Web Services with XML and SOAP
if($type == ‘search’)
$ars->keywordSearch($parameters[ ‘search’], $parameters[ ‘page’], 
$parameters[ ‘mode’]);
cache($type, $parameters, $ars);
}return $ars;
}
This function is designed to drive the process of getting data from Amazon. It can do
this in two ways: either from the cache or live from Amazon. Because Amazon requiresdevelopers to cache downloaded data, the function first looks for data in the cache.Wediscuss the cache shortly.
If you have not already performed this particular query, the data must be fetched live
from Amazon.Y ou do this by creating an instance of the 
AmazonResultSet class and call-
ing the method on it that corresponds to the particular query you want to run.The typeof query is determined by the 
$type parameter. In the category (or browse node) search
example, you pass in browse as the value for this parameter (refer to Listing 33.6). If you
want to perform a query about one particular book, you should pass in the value asin,
and if you want to perform a keyword search, you should set the parameter to search .
Each of these parameters invokes a different method on the AmazonResultSet class.
The individual item search calls the ASINSearch() method.The category search calls the
browseNodeSearch() method.The keyword search calls the keywordSearch() method.
Let’s take a closer look at the AmazonResultSet class.The full code for this class is
shown in Listing 33.8.
Listing 33.8 AmazonResultSet.php —A Class for Handling Amazon Connections
<?php
// you can switch between REST and SOAP using this constant set in // constants.phpif(METHOD== ’SOAP’)
{
include_once( ‘nusoap/nusoap.php ’);
}
// This class stores the result of queries
// Usually this is 1 or 10 instances of the Product classclass AmazonResultSet{
private $browseNode;private $page;private $mode;private $url;private $type;Listing 33.7 Continued 39 6728 CH33  9/2/04  1:20 PM  Page 842
843 Solution Overview
private $totalResults;
private $currentProduct = null;private $products = array(); // array of Product objects
function products()
{
return $this->products;
}
function totalResults()
{
return $this->totalResults;
}
function getProduct($i)
{
if(isset($this->products[$i]))
return $this->products[$i] ;
else
return false;
}
// Perform a query to get a page full of products from a browse node
// Switch between XML/HTTP and SOAP in constants.php// Returns an array of Productsfunction browseNodeSearch($browseNode, $page, $mode){
if(METHOD== ’SOAP’)
{
$soapclient = new soapclient (
‘http://soap.amazon.com/schemas2/AmazonWebServices.wsdl ’,
‘wsdl’);
$soap_proxy = $soapclient->getProxy();$parameters[ ‘mode’]=$mode;
$parameters[ ‘page’]=$page;      
$parameters[ ‘type’]=’heavy’;
$parameters[ ‘tag’]=$this->assocID;
$parameters[ ‘devtag’]=$this->devTag;
$parameters[ ‘sort’]=’+salesrank ’;
$parameters[ ‘browse_node ’] = $browseNode;Listing 33.8 Continued 39 6728 CH33  9/2/04  1:20 PM  Page 843
844 Chapter 33 Connecting to Web Services with XML and SOAP
// perform actual soap query
$result = $soap_proxy->BrowseNodeSearchRequest($parameters);if(isSOAPError($result))
return false;
$this->totalResults = $result[ ‘TotalResults ’];
foreach($result[ ‘Details’] as $product)
{
$this->products[] = new Product($product);
}unset($soapclient);unset($soap_proxy);
}    else{
// form URL and call parseXML to download and parse it$this->type = ‘browse’;
$this->browseNode = $browseNode;$this->page = $page;$this->mode = $mode;$this->url = ‘http://xml.amazon.com/onca/xml2?t= ’.ASSOCIATEID
.’&dev-t=’.DEVTAG. ’&BrowseNodeSearch= ’
.$this->browseNode. ’&mode=’.$this->mode
.’&type=heavy&page= ’.$this->page
.’&sort=+salesrank&f=xml ’;
$this->parseXML();
}
return $this->products;
}
// Given an ASIN, get the URL of the large image
// Returns a stringfunction getImageUrlLarge($ASIN, $mode){
foreach($this->products as $product){
if( $product->ASIN()== $ASIN)
return  $product->imageURLLarge();
}// if not found$this->ASINSearch($ASIN, $mode);
return $this->products(0)->imageURLLarge();
}Listing 33.8 Continued 39 6728 CH33  9/2/04  1:20 PM  Page 844
845 Solution Overview
// Perform a query to get a products with specified ASIN
// Switch between XML/HTTP and SOAP in constants.php// Returns a Products objectfunction ASINSearch($ASIN, $mode = ‘books’)
{
$this->type = ‘ASIN’;
$this->ASIN=$ASIN;$this->mode = $mode;$ASIN = padASIN($ASIN);
if(METHOD== ’SOAP’)
{
error_reporting(E_ALL & ~E_NOTICE);$soapclient = new soapclient (
‘http://soap.amazon.com/schemas2/AmazonWebServices.wsdl ’,
‘wsdl’) ;
$soap_proxy = $soapclient->getProxy();$parameters[ ‘asin’]=$ASIN;
$parameters[ ‘mode’]=$mode;
$parameters[ ‘type’]=”heavy”;
$parameters[ ‘tag’]=$this->assocID;
$parameters[ ‘devtag’]=$this->devTag;
// perform actual soap query$result = $soap_proxy->AsinSearchRequest($parameters);
if(isSOAPError($result)){
print_r($result);return false;
}$this->products[0] = new Product($result[ ‘Details’][0]);
$this->totalResults=1;unset($soapclient);unset($soap_proxy);
}else{
// form URL and call parseXML to download and parse it$this->url = ‘http://xml.amazon.com/onca/xml2?t= ’.ASSOCIATEID
.’&dev-t=’.DEVTAG. ’&AsinSearch= ’
.$this->ASIN.’&type=heavy&f=xml ’;
$this->parseXML();
}return $this->products[0];
}Listing 33.8 Continued 39 6728 CH33  9/2/04  1:20 PM  Page 845
846 Chapter 33 Connecting to Web Services with XML and SOAP
// Perform a query to get a page full of products with a keyword search
// Switch between XML/HTTP and SOAP in index.php// Returns an array of Productsfunction keywordSearch($search, $page, $mode = ‘books’)
{
if(METHOD== ’SOAP’)
{
error_reporting(E_ALL & ~E_NOTICE);   $soapclient = new soapclient(
‘http://soap.amazon.com/schemas2/AmazonWebServices.wsdl ’,’wsdl’);
$soap_proxy = $soapclient->getProxy();$parameters[ ‘mode’]=$mode;
$parameters[ ‘page’]=$page;      
$parameters[ ‘type’]=”heavy”;
$parameters[ ‘tag’]=$this->assocID;
$parameters[ ‘devtag’]=$this->devTag;
$parameters[ ‘sort’]=’+salesrank ’;
$parameters[ ‘keyword’] = $search;
// perform actual soap request
$result = $soap_proxy->KeywordSearchRequest($parameters);
if(isSOAPError($result) )
return false;
foreach($result[ ‘Details’] as $product)
{
$this->products[] = new Product($product);
}$this->totalResults = $result[ ‘TotalResults ’] ;
unset($soapclient);unset($soap_proxy);
}    else{
$this->type = ‘search’;
$this->search=$search;$this->page = $page;    $search = urlencode($search);$this->mode = $mode;Listing 33.8 Continued 39 6728 CH33  9/2/04  1:20 PM  Page 846
847 Solution Overview
$this->url = ‘http://xml.amazon.com/onca/xml2?t= ’.ASSOCIATEID
.’&dev-t=’.DEVTAG. ’&KeywordSearch= ’
.$search. ’&mode=’.$this->mode
.’&type=heavy&page= ’
.$this->page.’&sort=+salesrank&f=xml ’;
$this->parseXML();
}return $this->products;
}
// Parse the XML into Product object(s)
function parseXML(){
// suppress errors because this will fail sometimes$xml = @simplexml_load_file($this->url);if(!$xml){
//try a second time in case just server busy$xml = @simplexml_load_file($this->url);if(!$xml){
return false; 
}
}
$this->totalResults = (integer)$xml->TotalResults;foreach($xml->Details as $productXML){
$this->products[] = new Product($productXML);
}
}
}
?>
This useful class does exactly the sort of thing classes are good for. It encapsulates the
interface to Amazon in a nice black box.Within the class, the connection to Amazon canbe made either via the REST method or the SOAP method.The method it uses isdetermined by the global 
METHOD constant you set in constants.php .
Let’s begin by going back to the Category Search example.Y ou use the
AmazonResultSet class as follows:
$ars = new AmazonResultSet;
$ars->browseNodeSearch($parameters[ ‘browsenode ’], 
$parameters[ ‘page’], 
$parameters[ ‘mode’]);Listing 33.8 Continued 39 6728 CH33  9/2/04  1:20 PM  Page 847
848 Chapter 33 Connecting to Web Services with XML and SOAP
This class has no constructor, so you go straight to that browseNodeSearch() method. Here,
you pass it three parameters: the browsenode number you are interested in (corresponding to,
say, Business & Investing or Computers & Internet); the page number, representing therecords you would like retrieved; and the mode, representing the type of merchandise you are
interested in.An excerpt of the code for this method is shown in Listing 33.9.
Listing 33.9 browseNodeSearch() Method—Performing a Category Search
function browseNodeSearch($browseNode, $page, $mode)
{
if(METHOD== ’SOAP’)
{
$soapclient = new soapclient(
‘http://soap.amazon.com/schemas2/AmazonWebServices.wsdl ’,
‘wsdl’);
$soap_proxy = $soapclient->getProxy();$parameters[ ‘mode’]=$mode;
$parameters[ ‘page’]=$page;      
$parameters[ ‘type’]=’heavy’;
$parameters[ ‘tag’]=$this->assocID;
$parameters[ ‘devtag’]=$this->devTag;
$parameters[ ‘sort’]=’+salesrank ’;
$parameters[ ‘browse_node ’] = $browseNode;
// perform actual soap query
$result = $soap_proxy->BrowseNodeSearchRequest($parameters);if(isSOAPError($result))
return false;
$this->totalResults = $result[ ‘TotalResults ’];
foreach($result[ ‘Details’] as $product)
{
$this->products[] = new Product($product);
}unset($soapclient);unset($soap_proxy);
}    else{
// form URL and call parseXML to download and parse it$this->type = ‘browse’;
$this->browseNode = $browseNode;$this->page = $page;$this->mode = $mode;39 6728 CH33  9/2/04  1:20 PM  Page 848
849 Solution Overview
$this->url = ‘http://xml.amazon.com/onca/xml2?t= ’.ASSOCIATEID
.’&dev-t=’.DEVTAG. ’&BrowseNodeSearch= ’
.$this->browseNode. ’&mode=’.$this->mode
.’&type=heavy&page= ’.$this->page
.’&sort=+salesrank&f=xml ’;
$this->parseXML();
}
return $this->products;
}
Depending on the value of the METHOD constant, this method performs the query via
REST or via SOAP . Next, we look at each of these methods separately.
Using REST/XML Over HTTP
To use REST/XML over HTTP , you begin by setting a few important class member
variables:
ntype—The type of search required.Y ou are searching for books within a particular
browsenode ,so you set the value to browse .
nbrowse —The value of the particular browsenode you have been passed as a
parameter.
npage—The page number that you have been passed as a parameter.
nmode—The type of item you are searching for (for example, books ) that you have
been passed as a parameter.
nurl—The URL at Amazon that you need to connect to in order to perform this
type of search.
The URLs that you make your HTTP connections to for different types of searches and
the parameters they expect can be found in the Amazon.com Web Services API andIntegration Guide in your developer’s kit. Look closely at the 
GETparameters passed in
here:
$this->_url = ‘http://xml.amazon.com/onca/xml2?t= ’.ASSOCIATEID
.’&dev-t=’.DEVTAG. ’&BrowseNodeSearch= ’
.$this->_browseNode. ’&mode=’.$this->_mode
.’&type=heavy&page= ’.$this->_page
.’&sort=+salesrank&f=xml ’;Listing 33.9 Continued 39 6728 CH33  9/2/04  1:20 PM  Page 849
850 Chapter 33 Connecting to Web Services with XML and SOAP
The parameters you need to pass to this URL are as follows:
nt—Y our Associate ID.
ndev-t —Y our developer token.
nBrowseNodeSearch —The browsenode number you want to search.
nmode—books ,or another valid product type.
ntype—Heavy or lite (note spelling!). Heavy gives more information.
npage—Group of 10 results.
nsort—The order you would like the results returned in.This parameter is option-
al. In this case, we set it to +salesrank because we wanted results in sales rank
order.
nf—The format.This parameter should always contain the value ‘xml’.
Valid sort types are as follows:
nFeatured Items: +pmrank
nBestselling: +salesrank
nAverage Customer Review: +reviewrank
nPrice (Low to High): +pricerank
nPrice (High to Low): +inverse-pricerank
nPublication Date: +daterank
nAlphabetical (A-Z): +titlerank
nAlphabetical (Z-A): -titlerank
After you set all these parameters, you call
$this->parseXML();
to actually do the work.The parseXML() method is shown in Listing 33.10.
Listing 33.10 parseXML() Method—Parsing the XML Returned from a Query
// Parse the XML into Product object(s)
function parseXML(){
// suppress errors because this will fail sometimes$xml = @simplexml_load_file($this->url);if(!$xml){
//try a second time in case just server busy$xml = @simplexml_load_file($this->url);if(!$xml){
return false; 
}39 6728 CH33  9/2/04  1:20 PM  Page 850
851 Solution Overview
}
$this->totalResults = (integer)$xml->TotalResults;foreach($xml->Details as $productXML){
$this->products[] = new Product($productXML);
}
}
The function simplexml_load_file() does most of the work for you. It reads in the
XML content from a file or, in this case, an URL. It provides an object-oriented inter-face to the data and the structure in the XML document.This is a useful interface to the
data, but because you want one set of interface functions to work with data that hascome in via REST or SOAP , you can build your own object-oriented interface to thesame data in instances of the 
Product class. Note that you cast the attributes from the
XML into PHP variable types in the REST version.Y ou do not use the cast operator
in PHP , but without it here, you would receive object representations of each piece ofdata that will not be very useful to you.
The 
Product class contains mostly accessor functions to access the data stored in its
private members, so printing the entire file here is not worthwhile.The stucture of theclass and constructor is worth visiting, though. Listing 33.11 contains part of the defini-tion of 
Product .
Listing 33.11 The Product Class Encapsulates the Information You Have About an
Amazon Product
class Product
{
private $ASIN;private $productName;private $releaseDate;private $manufacturer;private $imageUrlMedium;private $imageUrlLarge;private $listPrice;private $ourPrice;private $salesRank;private $availability;private $avgCustomerRating;private $authors = array();private $reviews = array();private $similarProducts = array();Listing 33.10 Continued 39 6728 CH33  9/2/04  1:20 PM  Page 851
852 Chapter 33 Connecting to Web Services with XML and SOAP
function __construct($xml)
{
if(METHOD== ’SOAP’)
{
$this->ASIN = $xml[ ‘Asin’];
$this->productName = $xml[ ‘ProductName ’];
if($xml[ ‘Authors’])
{
foreach($xml[ ‘Authors’] as $author)
{
$this->authors[] = $author;
}
}$this->releaseDate = $xml[ ‘ReleaseDate ’];
$this->manufacturer = $xml[ ‘Manufacturer ’];
$this->imageUrlMedium = $xml[ ‘ImageUrlMedium ’];
$this->imageUrlLarge = $xml[ ‘ImageUrlLarge ’];
$this->listPrice = $xml[ ‘ListPrice ’];
$this->listPrice = str_replace( ‘$’, ‘’, $this->listPrice);
$this->listPrice = str_replace( ‘,’, ‘’, $this->listPrice);
$this->listPrice = floatval($this->listPrice);
$this->ourPrice = $xml[ ‘OurPrice ’];
$this->ourPrice = str_replace( ‘$’, ‘’, $this->ourPrice);
$this->ourPrice = str_replace( ‘,’, ‘’, $this->ourPrice);
$this->ourPrice = floatval($this->ourPrice);
$this->salesRank = $xml[ ‘SalesRank ’];
$this->availability = $xml[ ‘Availability ’];
$this->avgCustomerRating = $xml[ ‘Reviews’][‘AvgCustomerRating ’];
$reviewCount = 0;if($xml[ ‘Reviews’][‘CustomerReviews ’])
{
foreach ($xml[ ‘Reviews’][‘CustomerReviews ’] as $review)
{
$this->reviews[$reviewCount][ ‘rating’] = $review[ ‘Rating’];
$this->reviews[$reviewCount][ ‘summary’] = $review[ ‘Summary’];
$this->reviews[$reviewCount][ ‘comment’] = $review[ ‘Comment’];
$reviewCount++;
}
}Listing 33.11 Continued 39 6728 CH33  9/2/04  1:20 PM  Page 852
853 Solution Overview
if($xml[ ‘SimilarProducts ’])
{
foreach ($xml[ ‘SimilarProducts ’] as $similar)
{
$this->similarProducts[] = $similar;
}
}
}else // using REST{
$this->ASIN = (string)$xml->Asin;$this->productName = (string)$xml->ProductName;if($xml->Authors->Author){
foreach($xml->Authors->Author as $author){
$this->authors[] = (string)$author;
}
}$this->releaseDate = (string)$xml->ReleaseDate;$this->manufacturer = (string)$xml->Manufacturer;$this->imageUrlMedium = (string)$xml->ImageUrlMedium;$this->imageUrlLarge = (string)$xml->ImageUrlLarge;
$this->listPrice = (string)$xml->ListPrice;
$this->listPrice = str_replace( ‘$’, ‘’, $this->listPrice);
$this->listPrice = str_replace( ‘,’, ‘’, $this->listPrice);
$this->listPrice = floatval($this->listPrice);
$this->ourPrice = (string)$xml->OurPrice;
$this->ourPrice = str_replace( ‘$’, ‘’, $this->ourPrice);
$this->ourPrice = str_replace( ‘,’, ‘’, $this->ourPrice);
$this->ourPrice = floatval($this->ourPrice);
$this->salesRank = (string)$xml->SalesRank;
$this->availability = (string)$xml->Availability;$this->avgCustomerRating = (float)$xml->Reviews->AvgCustomerRating;$reviewCount = 0;if($xml->Reviews->CustomerReview){
foreach ($xml->Reviews->CustomerReview as $review)Listing 33.11 Continued 39 6728 CH33  9/2/04  1:20 PM  Page 853
854 Chapter 33 Connecting to Web Services with XML and SOAP
{
$this->reviews[$reviewCount][ ‘rating’] = (float)$review->Rating;
$this->reviews[$reviewCount][ ‘summary’] = (string)$review->Summary;
$this->reviews[$reviewCount][ ‘comment’] = (string)$review->Comment;
$reviewCount++;
}
}if($xml->SimilarProducts->Product){
foreach ($xml->SimilarProducts->Product as $similar){
$this->similarProducts[] = (string)$similar;
}
}
}
}
Again, this constructor takes two different forms of input data and creates one applica-
tion interface. Note that while some of the handling code could be made more generic,some tricky attributes such as reviews have different names depending on the method.
Having gone through all this processing to retrieve the data, you now return control
back to the 
getARS() function and hence back to showBrowseNode() .The next step is
showSummary($ars->products(), $page, 
$ars->totalResults(), $mode, $browseNode);
The showSummary() function simply displays the data in the AmazonResultSet ,as you
can see it all the way back in Figure 33.1.We therefore did not include the functionhere.
Using SOAP
Let’s go back and look at the SOAP version of the browseNodeSearch() function.This
section of the code is repeated here:
$soapclient = new soapclient(
‘http://soap.amazon.com/schemas2/AmazonWebServices.wsdl ’,
‘wsdl’);
$soap_proxy = $soapclient->getProxy();$parameters[ ‘mode’]=$mode;
$parameters[ ‘page’]=$page;      
$parameters[ ‘type’]=’heavy’;
$parameters[ ‘tag’]=$this->assocID;
$parameters[ ‘devtag’]=$this->devTag;
$parameters[ ‘sort’]=’+salesrank ’;
$parameters[ ‘browse_node ’] = $browseNode;Listing 33.11 Continued 39 6728 CH33  9/2/04  1:20 PM  Page 854
855 Solution Overview
// perform actual soap query
$result = $soap_proxy->BrowseNodeSearchRequest($parameters);if(isSOAPError($result))
return false;
$this->totalResults = $result[ ‘TotalResults ’];
foreach($result[ ‘Details’] as $product)
{
$this->products[] = new Product($product);
}unset($soapclient);unset($soap_proxy) ;
There are no extra functions to go through here; the SOAP client does everything for
you.
You begin by creating an instance of the SOAP client:
$soapclient = new soapclient(
‘http://soap.amazon.com/schemas2/AmazonWebServices.wsdl ’,
‘wsdl’);
Here, you provide the client with two parameters.The first is the WSDL description of
the service, and the second parameter tells the SOAP client that this is a WSDL URL.Alternatively, you could just provide one parameter: the endpoint of the service, which isthe direct URL of the SOAP Server.
We chose to do it this way for a good reason, which you can see right there in the
next line of code:
$soap_proxy = $soapclient->getProxy();
This line creates a class according to the information in the WSDL document.This class,the SOAP proxy, will have methods that correspond to the methods of the Web Service.This makes life much easier.Y ou can interact with the Web Service as though it were alocal PHP class.
Next, you set up an array of the parameters you need to pass to the 
browsenode
query:
$parameters[ ‘mode’]=$mode;
$parameters[ ‘page’]=$page;
$parameters[ ‘type’]=’heavy’;
$parameters[ ‘tag’]=$this->_assocID;
$parameters[ ‘devtag’]=$this->_devTag;
$parameters[ ‘sort’]=’+salesrank ’;
$parameters[ ‘browse_node ’] = $browseNode;
Using the proxy class, you can then just call the Web Service methods, passing in the
array of parameters:39 6728 CH33  9/2/04  1:20 PM  Page 855
856 Chapter 33 Connecting to Web Services with XML and SOAP
$result = $soap_proxy->BrowseNodeSearchRequest($parameters);
The data stored in $result is an array that you can directly store as a Product object in
the products array in the AmazonResultSet class.
Caching the Data
Let’s go back to the getARS() function and address caching.As you might recall, the
function looks like this:
// Get an AmazonResultSet either from cache or a live query
// If a live query add it to the cachefunction getARS($type, $parameters){
$cache = cached($type, $parameters);if($cache)  // if found in cache{
return  $cache;
}else{
$ars = new AmazonResultSet;if($type == ‘asin’)
$ars->ASINSearch(padASIN($parameters[ ‘asin’]), $parameters[ ‘mode’]);
if($type == ‘browse’)                   
$ars->browseNodeSearch($parameters[ ‘browsenode ’], $parameters[ ‘page’], 
$parameters[ ‘mode’]);
if($type == ‘search’)
$ars->keywordSearch($parameters[ ‘search’], $parameters[ ‘page’], 
$parameters[ ‘mode’]);
cache($type, $parameters, $ars);
}return $ars;
}
All the application’s SOAP or XML caching is done via this function.Y ou also use
another function to cache images.Y ou begin by calling the cached() function to see
whether the required AmazonResultSet is already cached. If it is, you return that data
instead of making a new request to Amazon:
$cache = cached($type, $parameters);
if($cache)  // if found in cache{
return  $cache;
}
If not, when you get the data back from Amazon, you add it to the cache:39 6728 CH33  9/2/04  1:20 PM  Page 856
857 Solution Overview
cache($type, $parameters, $ars);
Let’s look more closely at these two functions: cached() and cache() .These functions,
shown in Listing 33.12, implement the caching Amazon requires as part of its terms andconditions.
Listing 33.12 cached() and cache() Functions—Caching Functions from 
cachefunctions.php
// check if Amazon data is in the cache
// if it is, return it// if not, return falsefunction cached($type, $parameters){
if($type == ‘browse’)
{
$filename =
➥CACHE.’/browse. ’.$parameters[ ‘browsenode ’].’.’.$parameters[ ‘page’].
‘.’.$parameters[ ‘mode’].’.dat’;
}if($type == ‘search’)
{
$filename = CACHE. ’/search. ’.$parameters[ ‘search’].’.’.$parameters[ ‘page’].
‘.’.$parameters[ ‘mode’].’.dat’;
}if($type == ‘asin’)
{  
$filename = CACHE. ’/asin.’.$parameters[ ‘asin’].’.’.$parameters[ ‘mode’].
‘.dat’;
}
// is cached data missing or > 1 hour old?
if(!file_exists($filename) ||
((mktime() - filemtime($filename)) > 60*60))
{
return false;
}$data = file_get_contents($filename);return unserialize($data);
}
// add Amazon data to the cache
function cache($type, $parameters, $data){
if($type == ‘browse’)39 6728 CH33  9/2/04  1:20 PM  Page 857
858 Chapter 33 Connecting to Web Services with XML and SOAP
{
$filename = CACHE. ’/browse. ’.$parameters[ ‘browsenode ’].
‘.’.$parameters[ ‘page’].’.’.$parameters[ ‘mode’].’.dat’;
}if($type == ‘search’)
{
$filename = CACHE. ’/search. ’.$parameters[ ‘search’].’.’.$parameters[ ‘page’].
‘.’.$parameters[ ‘mode’].’.dat’;
}if($type == ‘asin’)
{
$filename = CACHE. ’/asin.’.$parameters[ ‘asin’].’.’.$parameters[ ‘mode’].
‘.dat’;
}$data = serialize($data);
$fp = fopen($filename, ‘wb’);
if(!$fp||(fwrite($fp, $data)==-1)){
echo  (‘<p>Error, could not store cache file ’);
}fclose($fp);
}
Looking through this code, you can see that cache files are stored under a filename that
consists of the type of query followed by the query parameters.The cache() function
stores results by serializing them, and the cached() function deserializes them.The
cached() function will also overwrite any data more than an hour old, as per the terms
and conditions.
The function serialize() turns stored program data into a string that can be stored.
In this case, you create a storable representation of an AmazonResultSet object. Calling
unserialize() does the opposite, turning the stored version back into a data structure
in memory. Note that unserializing an object like this means you need to have the classdefinition in the file so that the class is comprehendible and usable once reloaded.
In this application, retrieving a resultset from the cache takes a fraction of a second.
Making a new live query takes up to 10 seconds.
Building the Shopping Cart
So, given all these amazing Amazon querying abilities, what can you do with them? Themost obvious thing you can build is a shopping cart. Because we already covered thistopic extensively in Chapter 27, we do not go into deep detail here.
The shopping cart functions are shown in Listing 33.13.Listing 33.12 Continued 39 6728 CH33  9/2/04  1:20 PM  Page 858
859 Solution Overview
Listing 33.13 cartfunctions.php —Implementing the Shopping Cart
<?php
require_once( ‘AmazonResultSet.php ’);
// Using the function showSummary() in the file bookdisplay.php display
// the current contents of the shopping cartfunction showCart($cart, $mode){
// build an array to pass$products = array();foreach($cart as $ASIN=>$product){
$ars = getARS( ‘asin’, array( ‘asin’=>$ASIN, ‘mode’=>$mode));
if($ars)
$products[] = $ars->getProduct(0);
}// build the form to link to an Amazon.com shopping cartecho ‘<form method= ”POST”
action=”http://www.amazon.com/o/dt/assoc/handle-buy-box ”>’;
foreach($cart as $ASIN=>$product){
$quantity = $cart[$ASIN][ ‘quantity ’];
echo “<input type= ’hidden’name=’asin.$ASIN ’value=’$quantity ’>”;
}echo ‘<input type= ”hidden”name=”tag-value ”value=”ASSOCIATEID ”>’;
echo ‘<input type= ”hidden”name=”tag_value ”value=”ASSOCIATEID ”>’;
echo ‘<input type= ”image”src=”images/checkout.gif ”
name=”submit.add-to-cart ”
value=”Buy From Amazon.com ”>’;
echo ‘When you have finished shopping press checkout to add all the 
items in your Tahuayo cart to your Amazon cart and complete your purchase.<br /> ’;
echo ‘</form>’;
echo ‘<a href = “index.php?action=emptycart ”><img 
src = “images/emptycart.gif ”alt = “Empty Cart ”border = 0></a> 
If you have finished with this cart, you can empty it of all items.<br />’;
echo ‘<h1>Cart Contents</h1> ’;
showSummary($products, 1, count($products), $mode,  0, true);
}39 6728 CH33  9/2/04  1:20 PM  Page 859
860 Chapter 33 Connecting to Web Services with XML and SOAP
// show the small overview cart that is always on the screen
// only shows the last three items added function showSmallCart(){
global $_SESSION;
echo ‘<table border = 1 cellpadding = 1 cellspacing = 0> ’;
echo ‘<tr><td class = cartheading>Your Cart $ ’.
number_format(cartPrice(), 2).‘</td></tr> ’;
echo ‘<tr><td class = cart> ’.cartContents(). ’</td></tr> ’;
// form to link to an Amazon.com shopping cart
echo ‘<form method= ”POST”
action=”http://www.amazon.com/o/dt/assoc/handle-buy-box ”>’;
echo ‘<tr><td class = cartheading><a href = 
“index.php?action=showcart ”><img 
src=”images/details.gif ”border=0></a> ’;
foreach($_SESSION[ ‘cart’] as $ASIN=>$product)
{
$quantity = $_SESSION[ ‘cart’][$ASIN][ ‘quantity ’];
echo “<input type= ’hidden’name=’asin.$ASIN ’value=’$quantity ’>”;
}echo ‘<input type= ”hidden”name=”tag-value ”value=”ASSOCIATEID ”>’;
echo ‘<input type= ”hidden”name=”tag_value ”value=”ASSOCIATEID ”>’;
echo ‘<input type= ”image”src=”images/checkout.gif ”
name=”submit.add-to-cart ”value=”Buy From Amazon.com ”>’;
echo ‘</td></tr> ’;
echo ‘</form>’;
echo ‘</table> ’;
}
// show last three items added to cart
function cartContents(){
global $_SESSION;
$display = array_slice($_SESSION[ ‘cart’], -3, 3);
// we want them in reverse chronological order$display = array_reverse($display, true);
$result = ‘’;
$counter = 0;Listing 33.13 Continued 39 6728 CH33  9/2/04  1:20 PM  Page 860
861 Solution Overview
// abbreviate the names if they are long
foreach($display as $product){
if(strlen($product[ ‘name’])<=40)
$result .= $product[ ‘name’].’<br />’;
else
$result .= substr($product[ ‘name’], 0, 37). ’...<br /> ’;
$counter++;
}  
// add blank lines if the cart is nearly empty to keep the 
// display the samefor(;$counter<3; $counter++)  {
$result .= ‘<br />’;
}return $result;
}
// calculate total price of items in cart
function cartPrice(){
global $_SESSION;$total = 0.0;foreach($_SESSION[ ‘cart’] as $product)
{
$price = str_replace( ‘$’, ‘’, $product[ ‘price’]);
$total += $price*$product[ ‘quantity ’];
}
return $total;
}
// add a single item to cart
// there is currently no facility to add more than one at a timefunction addToCart(&$cart, $ASIN, $mode){
if(isset($cart[$ASIN] )){
$cart[$ASIN][ ‘quantity ’] +=1;
}else{Listing 33.13 Continued 39 6728 CH33  9/2/04  1:20 PM  Page 861
862 Chapter 33 Connecting to Web Services with XML and SOAP
// check that the ASIN is valid and look up the price
$ars = new AmazonResultSet;$product = $ars->ASINSearch($ASIN, $mode);
if($product->valid())
$cart[$ASIN] = array( ‘price’=>$product->ourPrice(), 
‘name’=> $product->productName(), ‘quantity ’=> 1) ;
}    
}// delete all of a particular item from cart
function deleteFromCart(&$cart, $ASIN){
unset ($cart[$ASIN]);
}   
?>
There are some differences about the way you do things with this cart. For example,
look at the addToCart() function.When you try to add an item to the cart, you can
check that it has a valid ASIN and look up the current (or at least, cached) price.
The really interesting issue here is this question:When customers check out, how do
you get their data to Amazon?
Checking Out to Amazon
Look closely at the showCart() function in Listing 33.13. Here’s the relevant part:
// build the form to link to an Amazon.com shopping cart
echo ‘<form method= ”POST”
action=”http://www.amazon.com/o/dt/assoc/handle-buy-box ”>’;
foreach($cart as $ASIN=>$product){
$quantity = $cart[$ASIN][ ‘quantity ’];
echo “<input type= ’hidden’name=’asin.$ASIN ’value=’$quantity ’>”;
}echo ‘<input type= ”hidden”name=”tag-value ”value=”ASSOCIATEID ”>’;
echo ‘<input type= ”hidden”name=”tag_value ”value=”ASSOCIATEID ”>’;
echo ‘<input type= ”image”src=”images/checkout.gif ”
name=”submit.add-to-cart ”value=”Buy From Amazon.com ”>’;
echo ‘When you have finished shopping press checkout to add all the items 
in your Tahuayo cart to your Amazon cart and complete your purchase.<br />’;
echo ‘</form>’;Listing 33.13 Continued 39 6728 CH33  9/2/04  1:20 PM  Page 862
863 Extending the Project
The checkout button is a form button that connects the cart to a customer’s shopping
cart on Amazon.Y ou send ASINs, quantities, and your Associate ID through as POST vari-
ables.And hey, presto! Y ou can see the result of clicking this button in Figure 33.5, earlierin this chapter.
One difficulty with this interface is that it is a one-way interaction.Y ou can add items
to the Amazon cart but cannot remove them.This means that people cannot browseback and forth between the sites easily without ending up with duplicate items in theircarts.
Installing the Project Code
If you want to install the project code from this chapter, you will need to take a few stepsbeyond the norm.After you have the code in an appropriate location on your server, youneed to do the following:
nCreate a cache directory.
nSet the permissions on the cache directory so that the scripts will be able to writein it.
nEdit constants.php to provide the location of the cache.
nSign up for an Amazon developer token.
nEdit constants.php to include your developer token and, optionally, your
Associate ID.
nMake sure NuSOAP is installed.We included it inside the Tahuayo directory, butyou could move it and change the code.
nCheck that you have PHP5 compiled with simpleXML support.
Extending the Project
There are lots of fun things you could do to extend this project:
nYou could expand the types of searches that are available via Tahuayo.
nYou might like to experiment with Amazon’s XSLT Web Service.
nYou could check out the links to innovative sample applications in Amazon’s Web
Services How-T o. Look at these applications for more ideas:
http://associates.amazon.com/exec/panama/associates/ntg/browse/-/567634/
Shopping carts are the most obvious thing to build with this data, but they are not the
only thing.39 6728 CH33  9/2/04  1:20 PM  Page 863
864 Chapter 33 Connecting to Web Services with XML and SOAP
Further Reading
A million books and online resources are available on the topics of XML and Web
Services.A great place to start is always at the W3C.Y ou can look at the XML WorkingGroup page at
http://www.w3.org/XML/Core/
and the Web Services Activity page at
http://www.w3.org/2002/ws/
just as a beginning.39 6728 CH33  9/2/04  1:20 PM  Page 864
VI
Appendixes
AInstalling PHP and MySQL
BWeb Resources40 6728 Part6  9/2/04  1:18 PM  Page 865
40 6728 Part6  9/2/04  1:18 PM  Page 866
A
Installing PHP and MySQL
A PACHE,PHP , ANDMYSQL ARE AVAILABLE FOR MANY combinations of operating sys-
tems and web servers. In this appendix, we explain how to set up Apache, PHP , andMySQL on a few server platforms.We cover the most common options available forUnix and Windows XP .
Key topics covered in this appendix include
nRunning PHP as a CGI interpreter or as a module
nInstalling Apache, SSL, PHP , and MySQL under Unix
nInstalling Apache, PHP , and MySQL under Windows
nTesting that it’s working using phpinfo()
nAdding PHP to Microsoft Internet Information Server
nInstalling PEAR
nConsidering other configurations
Our goal in this appendix is to provide you with an installation guide for a web server
that will enable you to host multiple websites. Some sites, like those in the examples,require Secure Sockets Layer (SSL) for e-commerce solutions.And most are driven via
scripts to connect to a database (DB) server and extract and process data.
Many PHP users never need to install PHP on a machine, which is why this material
is in an appendix rather than Chapter 1,“PHP Crash Course.”The easiest way to getaccess to a reliable server with a fast connection to the Internet and PHP alreadyinstalled is to simply sign up for an account at one of the thousands of hosting servicesor hosting service resellers around the globe.
Depending on why you are installing PHP on a machine, you might make different
decisions. If you have a machine permanently connected to the network that you intendto use as a live server, performance will be important to you. If you are building a devel-opment server where you can build and test your code, having a similar configuration tothe live server will be the most important consideration. If you intend to run ASP andPHP on the same machine, different limitations will apply.41 6728 AppA  9/2/04  1:15 PM  Page 867
868 Appendix A Installing PHP and MySQL
Running PHP as a CGI Interpreter or Module
The PHP interpreter can be run as either a module or as a separate common gateway
interface (CGI) binary. Generally, the module version is used for performance reasons.However, the CGI version is sometimes used for servers where a module version is notavailable or because it enables Apache users to run different PHP-enabled pages under
different user IDs.
In this appendix, we primarily cover the module option as the method to run PHP .
Installing Apache, PHP , and MySQL Under Unix
Depending on your needs and your level of experience with Unix systems, you mightchoose to do a binary install or compile the programs directly from their source. Bothapproaches have their advantages.
A binary install will take an expert minutes and a beginner not much longer, but it
will result in a system that is probably a version or two behind the current releases andone that is configured with somebody else’s choices of options.
A source install will take some time to download, install, and configure, and such an
approach is intimidating the first few times you do it. It does, however, give you com-plete control.Y ou choose what to install, what versions to use, and what configurationdirectives to set.
Binary Installation
Most Linux distributions include a preconfigured Apache Web Server with PHP built in.The details of what is provided depend on your chosen distribution and version.
One disadvantage of binary installs is that you rarely get the latest version of a pro-
gram. Depending on how important the last few bug fix releases are, getting an older
version might not be a problem for you.The biggest issue is that you do not get to
choose what options are compiled into your programs.
The most flexible and reliable path to take is to compile all the programs you need
from their sources.This path will take a little more time than installing RPMs, so youmight choose to use RPMs or other binary packages when available. Even if binary filesare not available from official sources with the configuration you need, you might beable to find unofficial ones with a search engine.
Source Installation
Let’s install Apache, PHP , and MySQL under a Unix environment. First, you need todecide which extra modules you will load under the trio. Because some of the examplescovered in this book use a secure server for web transactions, you should install an SSL-enabled server.41 6728 AppA  9/2/04  1:15 PM  Page 868
869 Installing Apache, PHP, and MySQL Under Unix
For purposes of this book, the PHP configuration is more or less the default setup but
also covers ways to enable the following two libraries under PHP:
ngd2
nPDFlib
These are just two of the many libraries available for PHP .We included them so that you
can get an idea of what is required to enable extra libraries within PHP . Compiling mostUnix programs follows a similar process.
You usually need to recompile PHP after installing a new library, so if you know
what you need in advance, you can install all required libraries on your machine andthen begin to compile the PHP module.
Here, we describe installation on an SuSE Linux server, but the description is generic
enough to apply to other Unix servers.
Start by gathering the required files for the installation.Y ou need these items:
nApache (http://httpd.apache.org/)—The web server
nOpenSSL (http://www.openssl.org/)—Open source toolkit that implements theSecure Sockets Layer
nMod_SSL (http://www.modssl.org/)—An Apache module interface to OpenSSL
nMySQL (http://www.mysql.com/)—The relational database
nPHP (http://www.php.net/)—The server-side scripting language
nhttp://www.pdflib.com/products/pdflib/download/index.html—Library forgenerating PDF documents on the fly
nftp://ftp.uu.net/graphics/jpeg/—The JPEG library, needed for PDFlib and gd
nhttp://www.libpng.org/pub/png/libpng.html—The PNG library, needed for gd
nhttp://www.gzip.org/zlib/—The zlib library, needed for the PNG library, above
nhttp://www.libtiff.org/—The TIFF library, needed for PDFlib
nftp://ftp.cac.washington.edu/imap/—The IMAP c client, needed for IMAP
If you want to use the mail() function, you will need to have an MTA (mail transfer
agent) installed, although we do not go through this here.
We assume that you have root access to the server and the following tools installed on
your system:
ngzip or gunzip
ngccand GNU make
When you are ready to begin the installation process, you should start by downloading
all tarfile sources to a temporary directory. Make sure you put them somewhere with
plenty of space. In our case, we chose /usr/src for the temporary directory .You should
download them as root to avoid permissions problems.41 6728 AppA  9/2/04  1:15 PM  Page 869
870 Appendix A Installing PHP and MySQL
Installing MySQL
In this section, we show you how to do a binary install of MySQL.This type of install
automatically places files in various locations.We chose the following directories for theremainder of our trio:
n/usr/local/apache
n/usr/local/ssl
You can install the applications in different directories by changing the prefix option
before installing.
Let’s begin! Become root by using su:
$ su root
Then enter the user root’s password. Next, change to the directory where you havestored the source files. For example, use
# cd /usr/src
MySQL recommends that you download a binary of MySQL instead of compiling fromscratch.Which version to use depends on what you want to do.At the time of writing,the production version of MySQL was 4.0.Y ou need 4.1 if you want to use subqueriesand 5.0 if you want to use stored procedures. By the time you read this book, one ofthese versions may have become the production version.Although MySQL prereleaseversions are generally very stable, you may choose not to use them on a production site.
If you are learning and experimenting on your own machine, you may choose to useone of these versions.
You should download the following packages:
MySQL-server- VERSION.i386.rpm
MySQL-Max- VERSION.i386.rpm
MySQL-client- VERSION.i386.rpm
(The word VERSION is a placeholder for the version number. For whichever version you
choose, make sure that you choose a matching set.) If you intend to run the MySQLclient and server on this machine and to compile MySQL support into other programssuch as PHP , you need all these packages.
Enter the following commands to install the MySQL servers and client:
rpm -i MySQL-server- VERSION.i386.rpm
rpm -i MySQL-Max- VERSION.i386.rpm 
rpm -I MySQL-client- VERSION.i386.rpm
The MySQL server should now be up and running.41 6728 AppA  9/2/04  1:15 PM  Page 870
871 Installing Apache, PHP, and MySQL Under Unix
Now it’s time to give the root user a password. Make sure you replace new-password
in the following command with a password of your choice; otherwise, new-password
will be your root password:
mysqladmin -u root password ‘new-password ’
When you install MySQL, it automatically creates two databases. One is the mysql table,
which controls users, hosts, and DB permissions in the actual server.The other is a test DB.You can check your database via the command line like this:
# mysql -u root –p
Enter password:mysql> show databases;+--------------------+|  Database          |+--------------------+|  mysql             ||  test              |+--------------------+2 rows in set (0.00 sec)
Type quit or \qto quit the MySQL client.
The default MySQL configuration allows any user access to the system without pro-
viding a username or password.This is obviously undesirable.
The final compulsory piece of MySQL housekeeping is deleting the anonymous
accounts. Opening a command prompt and typing the following lines accomplish that task:
# mysql -u root –p
mysql> use mysqlmysql> delete from user where User= ’’;
mysql> quit
You then need to type
mysqladmin -u root -p reload
for these changes to take effect.
You should also enable binary logging on your MySQL server because you will need
it if you plan to use replication.T o do this, first stop the server:
mysqladmin -u root -p shutdown
Create a file called /etc/my.cnf to be used as your MySQL options file.At the
moment, you need only one option, but you can set several here. Consult the MySQLmanual for a full list.
Open the file and type
[mysqld]
log-bin
Save the file and exit. Then restart the server by running mysqld_safe .41 6728 AppA  9/2/04  1:15 PM  Page 871
872 Appendix A Installing PHP and MySQL
Installing PDFlib
If you do not want to use PDFlib to create PDF files, as discussed in Chapter 32,
“Generating Personalized Documents in Portable Document Format (PDF),” you canskip this section.
Download PDFlib from http://www.pdflib.com/products/pdflib/download/
index.html.
To extract the contents of the PDFlib archive, type
# gunzip -c PDFlib-6.0.0p1-Linux.tar.gz | tar xvf -
We do not use PDFlib directly, so we come back to it after PHP is running.
Installing PHP
You should still be acting as root; if not, use suto change back to root.
Before you can install PHP , you need to have Apache preconfigured so that it knows
where everything is. (We come back to this topic later when setting up the Apache serv-er.) Change back to the directory where you have the source code:
# cd /usr/src
# gunzip -c apache_1.3.31.tar.gz | tar xvf -# cd apache_1.3.31# ./configure --prefix=/usr/local/apache
Now you can start setting up PHP . Extract the source files and change to its directory:
# cd /usr/src# gunzip -c php-5.0.0.tar.gz | tar xvf -#  cd php-5.0.0
Again, many options are available with PHP’s configure command. Use ./configure 
--help | less to determine what you want to add. In this case, add support for
MySQL,Apache, PDFlib, and gd.
Note that the following is all one command.Y ou can put it all on one line or, as
shown here, use the continuation character, the backslash ( \).This character allows you
to type one command across multiple lines to improve readability:
# ./configure --with-mysqli=mysql_config_path/mysql_config \
--with-apache=../apache_1.3.31 \--with-jpeg-dir=/path/to/jpeglib \--with-tiff-dir=/path/to.tiffdir \--with-zlib-dir=/path/to/zlib \--with-imap=/path/to/imapcclient \--with-gd41 6728 AppA  9/2/04  1:15 PM  Page 872
873 Installing Apache, PHP, and MySQL Under Unix
Next, make and install the binaries:
# make
# make install
Copy an INI file to the libdirectory:
#  cp php.ini-dist /usr/local/lib/php.ini
or
# cp php.ini-recommended /usr/local/lib/php.ini
The two versions of php.ini in the suggested commands have different options set.
The first, php.ini-dist ,is intended for development machines. For instance, it has 
display_errors set to On.This makes development easier, but it is not really appropri-
ate on a production machine.When we refer to a php.ini setting’s default value in this
book, we mean its setting in this version of php.ini .The second version, php.ini-
recommended ,is intended for production machines.
You can edit the php.ini file to set PHP options.There are any number of options
that you might choose to set, but a few in particular are worth noting.Y ou might needto set the value of 
sendmail_path if you want to send email from scripts.
Now it’s time to set up OpenSSL. It is what you will use to create temporary certifi-
cates and CSR files.The --prefix option specifies the main installation directory:
# gunzip -c openssl-0.9.7d.tar.gz | tar xvf -
# cd openssl-0.9.7d# ./config --prefix=/usr/local/ssl
Now make it, test it, and install it:
# make# make test# make install
Next, configure the mod_SSL module and specify it to be a loadable module with the
Apache configuration:
# cd /usr/src/
# gunzip -c mod_ssl-2.8.18-1.3.31.tar.gz |tar xvf -# cd mod_ssl-2.8.18-1.3.31# ./configure --with-apache=../apache_1.3.31
Note that you can add more Apache modules to the Apache source tree.The optional 
--enable-shared=ssl option enables the building of mod_SSL as a dynamic shared
object (DSO) libssl.so .Read the INSTALL and htdocs/manual/dso.html documents
in the Apache source tree for more information about DSO support in Apache. It isstrongly advised that ISPs and package maintainers use the DSO facility for maximumflexibility with mod_SSL. Notice, however, that Apache does not support DSO on allplatforms.41 6728 AppA  9/2/04  1:15 PM  Page 873
874 Appendix A Installing PHP and MySQL
# cd ../apache_1.3.31
#  SSL_BASE=../openssl-0.9.7d \
./configure \--enable-module=ssl \--activate-module=src/modules/php5/libphp5.a \--prefix=/usr/local/apache \
--enable-shared=ssl
Finally, you can make Apache and the certificates and then install them:
# make
If you have done everything right, you will get a message similar to the following:
+---------------------------------------------------------------------+| Before you install the package you now should prepare the SSL       || certificate system by running the ‘make certificate ’command.       |
| For different situations the following variants are provided:       ||                                                                     || % make certificate TYPE=dummy    (dummy self-signed Snake Oil cert) || % make certificate TYPE=test     (test cert signed by Snake Oil CA) || % make certificate TYPE=custom   (custom cert signed by own CA)     || % make certificate TYPE=existing (existing cert)                    ||        CRT=/path/to/your.crt [KEY=/path/to/your.key]                ||                                                                     || Use TYPE=dummy    when you ’re a  vendor package maintainer,         |
| the TYPE=test     when you ’re an admin but want to do tests only,   |
| the TYPE=custom   when you ’re an admin willing to run a real server |
| and TYPE=existing when you ’re an admin who upgrades a server.       |
| (The default is TYPE=test)                                          ||                                                                     || Additionally add ALGO=RSA (default) or ALGO=DSA to select           || the signature algorithm used for the generated certificate.         ||                                                                     || Use ‘make certificate VIEW=1 ’to display the generated data.        |
|                                                                     || Thanks for using Apache & mod_ssl.       Ralf S. Engelschall        ||                                          rse@engelschall.com        ||                                          www.engelschall.com        |+---------------------------------------------------------------------+
Now you can create a custom certificate.This option prompts you for location, compa-
ny,and a couple of other things. For contact information, it makes sense to use real data.
For other questions during the process, the default answer is fine:
# make certificate TYPE=custom
Now install Apache:
# make install41 6728 AppA  9/2/04  1:15 PM  Page 874
875 Installing Apache, PHP, and MySQL Under Unix
If everything goes well, you should see a message similar to this:
+--------------------------------------------------------+
| You now have successfully built and installed the      || Apache 1.3 HTTP server. To verify that Apache actually || works correctly you now should first check the         || (initially created or preserved) configuration files   ||                                                        ||   /usr/local/apache/conf/httpd.conf|                                                        || and then you should be able to immediately fire up     || Apache the first time by running:                      ||                                                        ||   /usr/local/apache/bin/apachectl start|                                                        || Or when you want to run it with SSL enabled use:       ||                                                        ||   /usr/local/apache/bin/apachectl startssl|                                                        || Thanks for using Apache.       The Apache Group        ||                                http://www.apache.org/  |+--------------------------------------------------------+
Now it’s time to see whether Apache and PHP are working. However, you need to edit
the httpd.conf file to add the PHP type to the configuration.
httpd.conf File: Snippets
Look at the httpd.conf file. If you have followed the previous instructions, your
httpd.conf file will be located in the /usr/local/apache/conf directory.The file has
the addtype for PHP commented out.Y ou should uncomment it at this time, so it looks
like this:
AddType application/x-httpd-php .php
AddType application/x-httpd-php-source .phps
Now you are ready to start the Apache server to see whether it worked. First, start the
server without the SSL support to see whether it comes up.Then check for PHP sup-port and stop and start the server with the SSL support enabled to see whether every-thing is working.
Use 
configtest to check whether the configuration is set up properly:
# cd /usr/local/apache/bin
# ./apachectl configtestSyntax OK# ./apachectl start
./apachectl start: httpd started41 6728 AppA  9/2/04  1:15 PM  Page 875
876 Appendix A Installing PHP and MySQL
If it worked correctly, you will see something similar to Figure A.1 when you connect to
the server with a web browser.
Note
You can connect to the server by using a domain name or the actual IP address of the computer. Check both
cases to ensure that everything is working properly.
Figure A.1 The default test page provided by Apache.
Is PHP Support Working?
Now you can test for PHP support. Create a file named test.php with the following
code in it.The file needs to be located in document root path, which should be set up,by default, to 
/usr/local/apache/htdocs .Note that this path depends on the directory
prefix that you chose initially. However, you could change this in the httpd.conf file :
<?php phpinfo(); ?>
The output screen should look like Figure A.2.
41 6728 AppA  9/2/04  1:15 PM  Page 876
877 Installing Apache, PHP, and MySQL Under Unix
Figure A.2 The function phpinfo() provides useful 
configuration information.
Is SSL Working?
Now you are ready to test for SSL. First, stop the server and then restart with the SSL
option enabled:
# /usr/local/apache/bin/apachectl stop
# /usr/local/apache/bin/apachectl startssl
Test to see whether it works by connecting to the server with a web browser and select-
ing the https protocol, like this:
https:// yourserver .yourdomain .com
Try your server’s IP address also, like this:
https:// xxx.xxx.xxx.xxx
or
http://xxx.xxx.xxx.xxx :443
41 6728 AppA  9/2/04  1:15 PM  Page 877
878 Appendix A Installing PHP and MySQL
If it worked, the server will send the certificate to the browser to establish a secure con-
nection.This makes the browser prompt you to accept the self-signed certificate. If itwere a certificate from a certification authority your browser already trusts, the browser
would not prompt you. In this case, we created and signed our own certificates.We
didn’t want to purchase one right away because we wanted to ensure that we could get
everything working properly first.
If you are using Internet Explorer or Mozilla, you will see a padlock symbol in the
status bar.This symbol tells you that a secure connection has been established.The iconused by Netscape is shown in Figure A.3.
Figure A.3 Web browsers display an icon to indicate the page you are view-
ing came via an SSL connection.
Final Steps
To use the PDFlib shared object and any other modules you installed in this way, you
need to complete a few more steps.
First, copy the libpdf_php file (in bind/php/php-50x from wherever you extracted
PDFLib) to the PHP extensions directory, which is probably
/usr/local/lib/php/extensions
Then add the following line to your php.ini file:
extension = libpdf_php.so
Installing Apache, PHP , and MySQL Under
Windows
With Windows, the installation process is a little bit different because PHP is set up
either as a CGI ( php.exe ) script or as an ISAPI module ( php5isapi.dll ). However,
Apache and MySQL are installed in a similar fashion to the way they are installed underUnix. Make sure you have the latest operating system service patches applied to themachine before you begin the Windows installation.
You should start by downloading all the latest source files to a temporary directory
with ample space. For our installation, we used 
c:\temp\download as the temporary
directory.
If you have a slow network connection, you may prefer to use the versions from the
CD, but they are likely to be a version or more out of date.
41 6728 AppA  9/2/04  1:15 PM  Page 878
879 Installing Apache, PHP, and MySQL Under Windows
Installing MySQL Under Windows
The following instructions were written using Windows XP .
Begin by setting up MySQL.Y ou can download the required ZIP file from
http://www.mysql.com.
Unzip the MySQL ZIP file to the temporary directory and run the Setup.exe pro-
gram.The installer is a standard InstallShield Wizard and should look like many other
installers you have seen.
If you choose T ypical Install, the wizard will not ask any questions other than where
you would like MySQL installed.The directory where MySQL installs itself is, by default,
C:\mysql .You can move it to a different directory if needed, after it’s fully installed, but if
you do, you will need to take some extra steps to keep everything working.
If you move MySQL and intend to run the MySQL executable, mysqld ,you must 
tell it where everything is located by supplying command-line options.T o display alloptions, use
C:\mysql\bin\mysqld --help
For example, if you moved the MySQL distribution to D:\programs\mysql ,you must
start mysqld with
D:\programs\mysql\bin\mysqld --basedir D:\programs\mysql
If you move the installation and are running it as a Windows service, you need to cre-
ate an INI file called my.ini and place it in your main Windows directory.Y our INI file
will have content similar to the following:
[mysqld]
basedir=D:/programs/mysql/bin/datadir= D:/programs/mysql/data/
In the NT/2000/XP setup, the name of the MySQL server is mysqld-nt ,and it is nor-
mally installed as a service.A service is a program that runs constantly in the backgroundto do work for other programs. Services usually run automatically when you start themachine, which saves you the effort of having to start them each time.
You can install the MySQL server as a service by going to the Windows command
prompt and typing
cd c:\mysql\bin
mysqld-nt –install
The response you should get is
Service successfully installed.
Now you can start and stop the MySQL service from the command line using
NET START mysqlNET STOP mysql41 6728 AppA  9/2/04  1:15 PM  Page 879
880 Appendix A Installing PHP and MySQL
Note that the executable’s name is mysqld-nt ,but the service’s name is just mysql .I f
you run NET START mysql ,you should see the following message:
The MySQL service was started successfully.
After the server has been installed, it can be stopped, started, or set to start automatically
using the Services utility (found in Control Panel).T o open Services, click Start and thenselect Control Panel. Double-click Administrative T ools and then double-click Services.
The Services utility is shown in Figure A.4. If you want to set any MySQL options,
you must first stop the service and then specify them as startup parameters in the Services
utility before restarting the MySQL service.The MySQL service can be stopped usingthe Services utility or using the commands 
NET STOP MySQL or mysqladmin shutdown .
Figure A.4 The Services utility allows you to configure the services running
on your machine.
To test whether MySQL is working, you can execute the following command:
C:\mysql\bin\mysqlshow
The default configuration is not really ideal, so you need to attend to a few loose ends:
nSetting your PATH
nDeleting the anonymous accounts
nSetting the root password
41 6728 AppA  9/2/04  1:15 PM  Page 880
881 Installing Apache, PHP, and MySQL Under Windows
Setting Your PATH
MySQL comes with lots of command-line utilities. None of them are easy to get at
unless the MySQL binary directory is in your PATH.The purpose of this environment
variable is to tell Windows where to look for executable programs.
Many of the common commands you use at the Windows command prompt, such as
dirand cd,are internal and built into cmd.exe .Others, such as format and ipconfig ,
have their own executables. Having to type C:\WINNT\system32\format would not be
convenient if you wanted to format a disk. Having to type C:\mysql\bin\mysql to run
the MySQL monitor also would not be convenient.
The directory where the executables for your basic Windows commands, such as 
format.exe ,reside is automatically in your PATH,so you can simply type format .T o
have the same convenience with the MySQL command-line tools, you need to add it.
Click Start and choose Control Panel. Double-click System and go to the Advanced
tab. If you click the Environment Variables button, you will be presented with a dialogbox that allows you to view the environment variables for your system. Double-clickingPATH allows you to edit it.
Add a semicolon to the end of your current path to separate your new entry from
the previous one; then add 
c:\mysql\bin .When you click OK, your addition will be
stored in the machine’s registry.The next time you restart your machine, you will be ableto type 
mysql rather than C:\mysql\bin\mysql .
Deleting the Anonymous User
The default MySQL configuration allows any user access to the system without provid-
ing a username or password.This is obviously undesirable.
The first thing you should do is delete the anonymous user. By opening a command
prompt and typing the following lines, you can accomplish that goal:
c:\mysql\bin\mysql -u root
use mysqldelete from user where User= ’’;
quitc:\mysql\bin\mysqladmin -u root reload
The anonymous user is now gone.
Setting the root Password
Even the superuser account, root, has no password yet.T o set this user’s password, type
these lines:
c:\mysql\bin\mysqladmin -u root password your_password
c:\mysql\bin\mysqladmin -u root -h your_host_name password your_password41 6728 AppA  9/2/04  1:15 PM  Page 881
882 Appendix A Installing PHP and MySQL
You should find that tasks that previously required no username or password will now
fail without this information.Attempting to run
c:\mysql\bin\mysqladmin reload
or
c:\mysql\bin\mysqladmin shutdown
will now fail.
From now on, you will need to use the -uflag, provide a username, and add the -p
flag to tell MySQL that you have a password, as in this example:
c:\mysql\bin\mysqladmin -u root -p reload
If you type this command, MySQL should now prompt you for the root password thatyou just set.
If you need more information, refer to the MySQL website at http://www.
mysql.com.
You are now ready to install Apache under Windows. Let’s begin!
Installing Apache Under Windows
Apache 1.3 and later versions are designed to run on Windows NT, 2000, and XP .The
installer works only with the x86 family of processors, such as Intel’s.Apache also runson Windows 95 and 98. In all cases,TCP/IP networking must be installed. Make sureyou use the Winsock 2 library if you decide to install it under either Windows 95 or 98.
Go to http://httpd.apache.org and download the Windows binary of the current ver-
sion of Apache 1.3. (Apache 2.0 is threaded, and some PHP external libraries are notthread safe, so we recommend you use 1.3.)
We downloaded the 
apache_1.3.31-win32-x86-no_src.msi file. It contains the cur-
rent version (within the 1.3 hierarchy) for Windows, without source code, packaged as
an MSI file. MSI files are the package format used by the Windows installer.
Unless you have a really elusive bug or want to contribute to the development effort,
it is unlikely that you will want to compile the source code yourself.This single file con-tains the Apache server ready to be installed.
Double-click the file you downloaded to start the process.The installation process
should look familiar to you.As shown in Figure A.5, the installer looks similar to manyother Windows installers.41 6728 AppA  9/2/04  1:15 PM  Page 882
883 Installing Apache, PHP, and MySQL Under Windows
Figure A.5 The Apache installer is easy to use.
The install program prompts you for the following:
nThe network name, server name, and administrator’s email address. If you are
building a server for real use, you should know the answers to these questions. If
you are building a server for your own personal use, the answers are not particular-
ly important.
nWhether you want Apache to run as a service.As with MySQL, setting it up thisway is usually easier.
nThe installation type.We recommend the Complete option, but you can choose
Custom if you want to leave out some components such as the documentation.
nThe directory in which to install Apache. (The default is C:\Program
Files\Apache Group\Apache .)
After you choose all these options, the Apache server will be installed and started.
Apache listens to port 80 (unless you changed the Port, Listen, or BindAddress direc-
tives in the configuration files) after it starts.T o connect to the server and access thedefault page, launch a browser and enter this URL:
http://localhost /
41 6728 AppA  9/2/04  1:15 PM  Page 883
884 Appendix A Installing PHP and MySQL
This should respond with a welcome page similar to the one shown in Figure A.1 and a
link to the Apache manual. If nothing happens or you get an error, look in the
error.log file in the logs directory. If your host isn’t connected to the Internet, you
might have to use this URL instead:
http://127.0.0.1/
This is the IP address that means localhost.
If you have changed the port number from 80, you will need to append :port_
number on the end of the URL.
Note that Apache cannot share the same port with another TCP/IP application.
You can start and stop the Apache service from your Start menu:Apache adds itself as
Apache HTTP Server under the Programs submenu. Under the Control Apache Serverheading, you can start, stop, and restart the server.
After installing Apache, you might need to edit the configuration files in the 
conf
directory.We look at editing the configuration file httpd.conf when we install PHP .
If you need to enable Apache with SSL in Windows, you should follow the excellent
FAQ at http://tud.at/programm/apache-ssl-win32-howto.php3, but be aware that it is
not for the fainthearted.
Installing PHP for Windows
To install PHP for Windows, begin by downloading the files for PHP5 from
http://www.php.net.
Two files should be downloaded for a Windows installation. One is the ZIP file con-
taining PHP (called something similar to php-5.0.0-Win32.zip ) and one is a collection
of libraries ( pecl-5.0.0-Win32.zip or similar).
Begin by unzipping the ZIP file to the directory of your choice.The usual location is
c:\PHP ,and we use this location in the following explanation.
You can install the PECL libraries by unzipping the PECL file to your extensions
directory. Using C:\PHP as your base directory, this will be C:\PHP\ext\ .
Now follow these steps:
1. In the main directory, you will see a file called php.exe and one called
php5ts.dll .You need these files to run PHP as a CGI. If you want to run it as a
SAPI module instead, you can use the relevant DLL file for your web server. If youare using Apache, the file is called 
php5apache.dll ,for example.
The SAPI modules are faster and easier to secure; the CGI version allows you to
run PHP from the command line.Again, the choice is up to you.
2. Copy all the DLLs to your Windows system directory, which is C:\winnt\
system32 on Windows NT or 2000 or C:\windows\system32 on Windows XP .41 6728 AppA  9/2/04  1:15 PM  Page 884
885 Installing Apache, PHP, and MySQL Under Windows
3. Set up a php.ini configuration file. PHP comes with two prepared files:
php.ini-dist and php.ini-recommended .We suggest you use php.ini-dist
while you are learning PHP or on development servers and use php.ini-recom-
mended on production servers. Make a copy of this file and rename it php.ini .
Place your php.ini file in the %SYSTEMROOT% directory, which is usually c:\winnt
or c:\winnt40 on Windows NT or 2000 or c:\windows on Windows XP .
4. Edit your php.ini file. It contains many settings, most of which you can ignore
for the time being.The settings you need to change now are as follows:
nChange the extension_dir directive to point to the directory where your
extension DLLs reside. In the normal install, this is C:\PHP\ext .Your
php.ini will therefore contain
extension_dir = c:/php/ext
nSet the doc_root directive to point at the root directory from which your
web server serves.This is likely to be
doc_root = “c:/Program Files/Apache Group/Apache/htdocs ”
if you are using Apache or
doc_root = “c:/Inetpub/wwwroot ”
if you are using IIS.
nChoose some extensions to run.We suggest at this stage that you just get
PHP working; you can add extensions as needed.T o add an extension, lookat the list under “Windows Extensions.”Y ou will see a lot of lines such as
;extension=php_pdf.dll
To turn on this extension, you can simply remove the semicolon at the start
of the line (and do the opposite to turn it off). Note that if you want to addmore extensions later, you should restart your web server after you havechanged 
php.ini for the changes to take effect.
In this book, you will use php_pdf.dll ,php_gd2.dll ,php_imap.dll ,and
php_mysqli.dll .You should uncomment these lines.Y ou may find that
php_mysqli.dll is missing. If so, add it as follows:
extension=php_mysqli.dll
Close and save your php.ini file.
5. If you are using NTFS, make sure the user that the web server runs as has permis-
sion to read your php.ini file.41 6728 AppA  9/2/04  1:15 PM  Page 885
886 Appendix A Installing PHP and MySQL
Adding PHP to Your Apache Configuration
You may need to edit one of Apache’s configuration files. Open the httpd.conf file in
your favorite editor.This file is typically located in the c:\Program Files\Apache
Group\Apache\conf\ directory. Look for the following lines:
LoadModule php5_module c:/php/php5apache.dll
AddModule mod_php5.cAddType application/x-httpd-php .phpAction application/x-httpd-php “/php/php.exe “
If you don’t see these lines, add them to the file, save it, and restart your Apache server.
Adding PHP and MySQL to Microsoft IIS and PWS
This section covers how to add PHP and MySQL support to IIS with the ISAPI
(php5isapi.dll ) module. (Y ou can also install it as a CGI, but we strongly recommend
you use the ISAPI module because it is faster.) This section assumes that you have fol-
lowed the steps in the preceding sections.The main difference is that the doc_root con-
figuration directive is likely to be c:/Inetpub/wwwroot .
Next, you need to open Internet Information Services. If you have Windows 2000 or
XP , you can find it in the Control Panel under Administrative T ools. If you don’t see thisoption, you may need to install IIS from your original Windows CDs before continuing.
When IIS is open, you should see a tree view of services on the left side. Right-click
the web server (usually called Default Web Server) and select Properties.
The resulting Properties dialog box contains quite a lot of information, but you need
to change only a few things. Under Home Directory, click the Configuration button.Under Application Mappings, select Add to add PHP .Y ou must then supply an exe-cutable. Supply the full path to the location of 
php5isapi.dll (probably
c:\php\php5isapi.dll ). In the Extension box, you should type .php.You also need to
check the Script Engine box if it isn’t already checked. Click OK.
If you want to be able to do HTTP Authentication (which we cover in this book),
you should also look under ISAPI Filters. Select Add.Y ou need to supply a filter name
(in this case, type PHP) and an executable (here, supply the full path to the
php5isapi.dll file as just shown). Click OK. Finally, close the Properties dialog box by
clicking Apply.
You should now stop the web server (or check that it is stopped) and then restart it.
You can do this from the Internet Information Services window by right-clicking on
the web server and choosing Stop.Y ou can restart in the same way by selecting Start.
Testing Your Work
The next step is to start your web server and test to ensure that you have PHP working.
Create a test.php file and add the following line to it:
<? phpinfo(); ?>41 6728 AppA  9/2/04  1:15 PM  Page 886
887 Installing PEAR
Make sure the file is in the document root directory (typically c:\Program
File\Apache Group\Apache\htdocs under Apache or c:\Inetpub\wwwroot under IIS);
then pull it up on the browser, as follows:
http://localhost/test.php
or
http://your-ip-number-here /test.php
If you see a page similar to the one shown in Figure A.2, you know that PHP is working.
Installing PEAR
PHP5 comes with the PHP Extension and Application Repository (PEAR) package
installer. If you are using Windows, go to the command line and type
c:\php\go-pear
The go-pear script asks you a few straightforward questions about where you would
like the package installer and the standard PEAR classes installed and then downloadsand installs them for you. (This first step is not required under Linux, but the rest of theinstallation is the same.)
At this stage, you should have an installed version of the PEAR package installer and
the basic PEAR libraries.Y ou can then simply install packages by typing
pear install package
where package is the name of the package you want to install.
To get a list of available packages, type
pear list-all
To see what you have installed currently, try
pear list
To install the MIME mail package used in Chapter 30,“Building a Mailing List
Manager,” type
pear install Mail_Mime
The DB package mentioned in Chapter 11,“Accessing Y our MySQL Database from theWeb with PHP ,” is installed automatically, but to make sure you have the newest version,
you can type
pear list-upgrades
If a newer version is available, type
pear upgrade DB41 6728 AppA  9/2/04  1:15 PM  Page 887
888 Appendix A Installing PHP and MySQL
If the preceding procedure does not work for you for whatever reason, we suggest you
try downloading PEAR packages directly.T o do this, go to http://pear.php.net/packages.php.
From here you can navigate through the various packages available. For example, in
this book, we use Mail_Mime. Click through to the page for this package and clickDownload Latest to get a copy.Y ou need to unzip the file you have downloaded and putit somewhere in your 
include_path .
You should have a c:\php\pear or similar directory. If you are downloading packages
manually, we suggest you put the packages in the PEAR directory tree. PEAR has astandard structure, so we suggest you put things in the standard location; this is the placewhere the installer would put them. For example, the Mail_Mime package belongs inthe Mail section, so in this example, we would place it in the 
c:\php\pear\Mail
directory.
Setting Up Other Configurations
You can set up PHP and MySQL with other web servers such as Omni, HTTPD, and
Netscape Enterprise Server.They are not covered in this appendix, but you can findinformation on how to set them up at the MySQL and PHP websites,http://www.mysql.com and http://www.php.net, respectively.41 6728 AppA  9/2/04  1:15 PM  Page 888
B
Web Resources
THIS APPENDIX LISTS SOME OF THE MANY resources available on the Web that you can
use to find tutorials, articles, news, and sample PHP code.These resources are just someof the many out there. Obviously, there are far more than we could possibly list in oneappendix, and many more are popping up daily as the usage of and familiarity with PHPand MySQL continue to increase among web developers.
Some of these resources are in different languages such as German or French or
something other than your native language.We suggest using a translator likehttp://www.systransoft.com to browse the web resource in your native language.
PHP Resources
PHP .Net—http://www.php.net—The original site for PHP . Go to this site to downloadbinary and source versions of PHP and the manual, to browse the mailing list archives,and to keep up to date with PHP news.
Zend.Com—http://www.zend.com—The source for the Zend engine that powers
PHP .This portal site contains forums, articles, tutorials, and a database of sample classesand code that you can use.
PEAR—http://pear.php.net—The PHP Extension and Application Repository.This
is the official PHP extension site.
PECL—http://pecl.php.net—The sister-site to PEAR. PEAR carries classes written
in PHP; PECL (pronounced “pickle”) carries extensions written in C. PECL classes aresometimes more difficult to install but perform a wider range of functionality and arealmost always more powerful than their PHP-based counterparts.
PHPCommunity—http://www.phpcommunity.org/—A new community-based site.php|architect—http://www.phparch.com—A PHP magazine.This website provides
free articles, or you can subscribe to receive the magazine in either PDF or printed format.
PHP Magazine—http://www.phpmag.net/—Another PHP magazine, also available
in electronic or printed format.42 6728 AppB  9/2/04  1:14 PM  Page 889
890 Appendix B Web Resources
PHPWizard.net—http://www.phpwizard.net—The source of many cool PHP appli-
cations such as phpChat and phpIRC.
PHPMyAdmin.Net—http://www.phpmyadmin.net/—The home of the popular
PHP-based web front end for MySQL.
PHPBuilder.com—http://www.phpbuilder.com—A portal for PHP tutorials.At this
site, you can find tutorials on just about anything you can think of.The site also has aforum for people to post questions.
DevShed.com—http://www.devshed.com—Portal-type site that offers excellent
tutorials on PHP , MySQL, Perl, and other development languages.
PX-PHP Code Exchange—http://px.sklar.com—A great place to start. Here, you
can find many sample scripts and useful functions.
The PHP Resource—http://www.php-resource.de—A very nice source for tutorials,
articles, and scripts.The only “problem” is that the site is in German.We recommendusing a translator service site to view it.Y ou can still read the sample code either way.
WeberDev.com—http://www.WeberDev.com—Formerly known as Berber’s PHP
sample page, this site grew and is now a place for tutorials and sample code. It targetsPHP and MySQL users and covers security and general databases.
HotScripts.com—http://www.hotscripts.com—A great categorized selection of
scripts.This site offers scripts in various languages such as PHP ,ASP .NET, and Perl. It hasan excellent collection of PHP scripts and is updated frequently.This site is a must-see ifyou are looking for scripts.
PHP Base Library—http://phplib.sourceforge.net—A site used by developers for
large-scale PHP projects. It offers a library with numerous tools for an alternative sessionmanagement approach, as well as templating and database abstraction.
PHP Center—http://www.php-center.de—Another German portal site used for
tutorials, scripts, tips, tricks, advertising, and more.
PHP Homepage—http://www.php-homepage.de—Another German site about PHP
with scripts, articles, news, and much more. It also has a quick reference section.
PHPIndex.com—http://www.phpindex.com—A nice French PHP portal with tons
of PHP-related content.This site contains news, FAQs, articles, job listings, and muchmore.
WebMonkey.com—http://www.webmonkey.com—A portal with lots of web
resources, real-world tutorials, sample code, and so on.The site covers design, program-
ming, back end, multimedia stuff, and much more.
The PHP Club—http://www.phpclub.net—A site that offers many resources for
PHP beginners. It has news, book reviews, sample code, forums, FAQs, and many tutorials for beginners.
PHP Classes Repository—http://phpclasses.org—A site that targets the distribution
of freely available classes written in PHP .A must-see if you are developing code or yourproject will be composed of classes. It provides a nice search functionality, so you canfind stuff easily.42 6728 AppB  9/2/04  1:14 PM  Page 890
891 Apache Resources
The PHP Resource Index—http://php.resourceindex.com—Portal site for scripts,
classes, and documentation.The cool thing about this site is that everything is nicely cat-egorized, which can save you some time.
PHP Developer—http://www.phpdeveloper.org—Y et another PHP portal that pro-
vides PHP news, articles, and tutorials.
Evil Walrus—http://www.evilwalrus.com—A cool-looking portal for PHP scripts.SourceForge—http://sourceforge.net—Extensive open source resources. SourceForge
not only helps you find code that can be useful, but it also provides access to CVS, mail-ing lists, and machines for open source developers.
Codewalkers—http://codewalkers.com/—A site that contains articles, book reviews,
tutorials, and the amazing PHP Contest through which you can win stuff with your newskills.The site offers a new code contest every two weeks.
PHP Developer’s Network Unified Forums— http://forums.devnetwork.net/
index.php—Discussion of all things PHP related.
PHP Kitchen—http://www.phpkitchen.com/—Articles, news, and PHP advocacy.Postnuke—http://www.postnuke.com/—A frequently used PHP content-
management system.
PHP Application T ools—http://www.php-tools.de/—A set of useful PHP classes.
MySQL and SQL Specific Resources
The MySQL site—http://www.mysql.com—The official MySQL website. It providesexcellent documentation, support, and information.This site is a must-see if you areusing MySQL, especially for the developer zone and mailing list archives.
The SQL Course—http://sqlcourse.com—A site that provides an introductory SQL
tutorial with easy-to-understand instructions. It allows you to practice what you learn onan online SQL interpreter.An advanced version is provided at http://www.sqlcourse2.com.
SearchDatabase.com—http://searchdatabase.techtarget.com/—Nice portal with lots
of useful information on DBs. It provides excellent tutorials, tips, white papers, FAQs,reviews, and so on.A must-see!
Apache Resources
Apache Software—http://www.apache.org—The place to start if you need to download
the source or binaries for the Apache web server.The site provides online documenta-tion.
Apache Week—http://www.apacheweek.com—Online weekly magazine that pro-
vides essential information for anyone running an Apache Server or anyone runningApache services.
Apache T oday—http://www.apachetoday.com—A daily source of news and informa-
tion about Apache. Users must subscribe to post questions.42 6728 AppB  9/2/04  1:14 PM  Page 891
892 Appendix B Web Resources
Web Development
Philip and Alex’s Guide to Web Publishing—http://philip.greenspun.com/panda/—A
witty, irreverent guide to software engineering as it applies to the Web. One of the fewbooks on the topic coauthored by a Samoyed.42 6728 AppB  9/2/04  1:14 PM  Page 892
Symbols
+ (addition operator), 31
[ ] (array operator), 38= (assignment operator), 32\ (back slashes), 307, 495-496& (bitwise operator), 36>> (bitwise operator), 36<< (bitwise operator), 36^ (bitwise operator), 36| (bitwise operator), 36%= (combined assignment operator), 33*= (combined assignment operator), 33+= (combined assignment operator), 33-= (combined assignment operator), 33.= (combined assignment operator), 33/= (combined assignment operator), 33,(comma operator), 37
!= (comparison operator), 35!== (comparison operator), 35>= (comparison operator), 35< (comparison operator), 35<= (comparison operator), 35== (comparison operator), 35=== (comparison operator), 35— (decrement operator), 33-34/ (division operator), 31== (equality operator), 38, 85== (equals comparison operator), 35@ (error suppression operator), 37`` (execution operator), 37-38++ (increment operator), 33-34=== (identity operator), 38, 85!= (inequality operator), 38, 85< > (inequality operator), 38, 85! (logical operator), 36&& (logical operator), 36|| (logical operator), 36“ ” (magic quotes), 495-496% (modulus operator), 31
* (multiplication operator), 31\n (newline) control sequence, 66!== (non-identity operator), 38, 85-> operator, 37+ (plus symbol)
regular expressions, 123
Web forum articles, 757
{} (regular expressions), 123^ (regular expressions), 123-124& (reference operator), 34$result->fetch_assoc() function, 273;(semicolon), 218, 272
.(string concatenation operator), 24-25
- (subtraction operator), 31* symbol (regular expressions), 123\t (tab) control sequence, 66?: (ternary operator), 37$type parameter, 842+ (union operator), 38, 85% (wildcard character), 290
Numbers
401 errors (HTTP), 370
A
a file mode, 61a+ file mode, 61about.php files (Tahuayo application), 832
absolute paths, 60
abstract classes, 184
access control (authentication)
implementing, 358-361multiple pages, protecting, 365-366
passwords
encrypting, 364-365storing, 361-364
access modifiers, OO (object-oriented) devel-
opment, 164-165Index43 6728 index  9/2/04  1:22 PM  Page 893
894 accessing
accessing
associative array contents, 83MySQL, 217-218numerically indexed array contents, accessing,
81-82
substrings, substr() function, 115-116
accessor functions, 163account settings, online newsletters, 728accounts (Warm Mail application)
creating, 674-676deleting, 676-677modifying, 676selecting, 677-680setting up, 672-674
accounts, creating (online newsletters),
711-714
ACID compliance, transactions, 309
Acrobat website, 789actions
Amazon, 838-839MLM, 709-710script architecture, 702
ad hoc scripts, 158Add to Cart link, 830add_bm() function, 570addition operator, 31addslashes() function, 112, 270, 293, 387addToCart() function, 862add_bms.php files (PHPBookmark 
application), 544
add_bm_form.php files (PHPBookmark
application), 544
add_quoting() function, 776-777admin.php files (Shopping Cart application),
583
admin.php script (Shopping Cart 
application), 613, 616
admin/index.php files (content management
systems), 630
administration interface (Shopping Cart
application), 615, 619-622
administration menu (admin.php), 613, 616edit_book_form.php script, 618insert_book.php script, 616-617insert_book_form.php script, 616show_book.php script, 618
administrative functions, online newsletters,
731
administrative users, privileges, 224-225administrator interface (Shopping Cart 
application), 581
administrator view (Shopping Cart 
application), 581-582
admin_fns.php files (Shopping Cart 
application), 584
Adobe, FDF website, 801Adobe Acrobat website, 789Adobe PostScript, 786-787Advanced Maryland Automated Network
Disk Archiver (AMANDA), 354
aggregate functions, MySQL, 254aggregating data, 254-255aliases, tables, 251-252ALL privilege, 225ALTER privilege, 223ALTER TABLE statement, 259-261AMANDA (Advanced Maryland Automated
Network Disk Archiver), 354
Amazon
actions, 838-839books, showing in categories, 839-841browse nodes, 829caching, 827-828, 856-858checking out, 862-863connecting, 819-820constants.php file, 835-836developer token, 826extensions, 863index.php file, 833-839PHP SOAP libraries, 827project codes, installing, 863REST/XML, 849-854sessions, creating, 835shopping carts, building, 826, 858-862SOAP (Simple Object Access Protocol),
854-856
solution overview, 828-833Web Services interfaces, 826-827
XML, parsing, 827
Amazon Associate ID, 826Amazon Web Services Developers’ Kit, 826AmazonResultSet class, 841-849AmazonResultSet.php class, 842-847AmazonResultSet.php files (Tahuayo 
application), 832
Analog website, 326anchoring strings, 123-124and operator, 3643 6728 index  9/2/04  1:22 PM  Page 894
895 arrays
anomalies, avoiding (Web databases), 211
anonymous login (FTP), 431anonymous users, deleting, 881ANSI website, 263anti-aliasing text, 457Apache Software website, 891Apache Today website, 891Apache Web server
basic authentication (HTTP)
in PHP , 367-368with .htaccess files, 369-372
configurations, PHP installations, 886htpasswd program, 372install program, 883installation
binary installations, 868source installations, 868-869Windows, 882-884
mod_auth module, 369mod_auth_mysql module, 377
documentation websites, 378installing, 375-376testing, 376
parameters, MaxClients, 272resources, 891
running, 875
starting, 376website, 869
Apache Week website, 891APIs, reflection API (object-oriented 
development), 188-189
application layer protocols, 384application projects
content, separating from logic, 518development environment, 516documentation, 516-517logic, separating from content, 518optimizations, 518-519planning, 508-509prototypes, 517-518rewriting code, 509-510
running, 508-509
software engineering, 508testing code, 520version control, 514-515
writing maintainable code
breaking up, 513-514code standards, 510commenting, 512
directory structures, 514function libraries, 514indenting, 512-513naming conventions, 510-512
applications. See also Shopping Cart 
application;Web forum application
Bob’s Auto Parts application, 12, 15, 197-200Book-O-Rama application
Database Search page, 266schema, 217, 228
content management systems, files, 630-631PHPBookmark
creating, 541extensions, 578files, 544
Smart Form Mail application
creating, 105-107regular expressions, 125-126
Tahuayo (Amazon), 828-833
tiers, 216
architecture,Web databases, 214-216archives, BUGTRAQ, 406arguments, 20arithmetic operators, 31-32Array data type (variables), 27array key-value pairs, getdate() function, 443array operator, 38array() language construct, 80arrays
associative arrays, 83-85bounding boxes, contents, 465-466categoryList, 840converting to scalar variables, 103-104elements, 80, 101-102functions, passing by reference, 102indexes, 80loading from files, 96-99long style form variable, 22medium style form variable, 22multidimensional arrays, 79
sorting, 91-93three-dimensional arrays, 88-90two-dimensional arrays, 86-88
navigating within an array, 100numerically indexed arrays, 80-82
operators, 85-86
How can we make this index more useful? Email us at indexes@samspublishing.com43 6728 index  9/2/04  1:22 PM  Page 895
896 arrays
reordering, 94-96
set cardinality, 102sorting, 90-91superglobal, 22
array_count_values() function, 102array_push() function, 722array_reverse() function, 96array_walk() function, 101-102arsort() function, 91article list (Web forum application)
adding new articles, 773-780displaying articles, 762-763plus symbols, 757threads, 759-762treenode class, 763-770viewing individual articles, 770-772
ASCII, 784ASINSearch() method, 842asort() function, 91ASP style (PHP tags), 17assignment operators, 26
combination assignment operators, 33decrement operators, 33-34equal sign (=), 23increment operators, 33-34reference operator, 34
returning values, 32-33
Associate ID (Amazon), 826associative arrays, 83-85associativity, operators, 40-42asterisk symbol (*), regular expressions, 123atomic column values (databases), 212attachments (email), online newsletters, 697attributes
OO (object-oriented) development, 158,
162-164, 174
XML elements, 823
auditing, 353authentication, 339, 370-372
access control
encrypting passwords, 364-365implementing, 358-361multiple pages, protecting, 365-366
storing passwords, 361-364basic authentication (HTTP), 366
in PHP , 367-368with Apache .htaccess files, 369-372with IIS, 373-374
custom, creating, 377digest authentication (HTTP), 366identifying users, 357-358mod_auth_mysql module, 377
documentation websites, 378installing, 375-376testing, 376
passwords, 346-347session control
authmain.php script, 487-492logout.php script, 492-493members_only.php script, 492
user
input data, validating, 552-553logging in, 556-559logging out, 560passwords, 561-568registering, 549-556
websites, 378
authmain.php script (authentication), 487-492autocommit mode, 310__autoload() function, 185automatic generation of images, 459auto_append_file (php.ini file), 138-139AUTO_INCREMENT keyword, 229
auto_prepend_file (php.ini file), 138-139AVG(column) function, 254
B
b file mode, 61
back slashes (\), magic quotes, 495-496backing up
data, 354databases, 302-303files, FTP functions, 428-430
checking update times, 432-434
closing connections, 435
downloads, 434-435logins, 432remote connections, 431
backticks, 416backtrace (functions), 19443 6728 index  9/2/04  1:22 PM  Page 896
897 calendars
base canvas, setting up, 463
baselines, descenders, 466basename() function, 410-412basic authentication (HTTP), 366
in PHP , 367-368with Apache .htaccess files, 369-372with IIS, 373-374
BDB tables, 308binary installations, 868-871binary large objects (BLOB types), 238-239bind_param() method, 279bitwise operators, 36BLOB types (binary large objects), 238-239blocks
code blocks, 45, 152-153exception handling, 191-192
Bob’s Auto Parts application, 12, 15, 197-200book details page (Shopping Cart 
application), 588, 594-595, 618
Book-O-Rama application
Database Search page, 266schema, 217, 228setting up, 241Shopping Cart application. SeeShopping Cart
application
tables, SQL code, 243
bookdisplayfunctions.php files (Tahuayo
application), 832
bookmark.gif files (PHPBookmark 
application), 544
bookmarks
adding, 568-570deleting, 571-574displaying, 570-571recommending, 543
storing, 543
bookmarks.sql files (PHPBookmark 
application), 544
bookmark_fns.php files (PHPBookmark
application), 544
books, Amazon categories, 839-841book_fns.php files (Shopping Cart 
application), 584
book_sc database (Shopping Cart 
application), 585-587
book_sc.sql files (Shopping Cart application),
584
book_sc_fns.php files (Shopping Cart 
application), 584Boolean data type (variables), 27
bottom.php files (Tahuayo application), 832bounding boxes, 465-466Boutell website, 477boxes, bounding boxes, 465-466branching (regular expressions), 124break statement, 54breaking up code, 513-514brochureware sites
common pitfalls, 326limitations, 324-327
browse nodes (Amazon), 829browsedir.php file, 408-409browseNode variable, 837browseNodeSearch() method, 842, 848-849,
854-855
browsers
authentication, 347secure transactions, 380-381Web database architecture, 214
browsing directories, 408BUGTRAQ archives, 406
building
content management systems, 626MLM (mailing list manager), 695
Burn All Gifs websites, 454buttons
colors, 463generating, make_button.php script, 460scripts, calling, 461-463text
colors/fonts, 460fitting onto, 464-467positioning, 467writing, 467-468
C
cache() function, 857-858cached() function, 856-858cachefunctions.php files (Tahuayo 
application), 833
caching, Amazon, 827-828, 856-858calculate_items() function, 602-603calculate_price() function, 602-603calculating dates, 445-448calendars, 448-449
How can we make this index more useful? Email us at indexes@samspublishing.com43 6728 index  9/2/04  1:22 PM  Page 897
898 __call() method
__call() method, 184-185
calling
button scripts, 461-463
class operations, 165-166functions, 20, 139
case sensitivity, 142errors, 64parameters, 140prototypes, 140-141undefined functions, 141-142
canvas images, creating, 455-456canvas, base, 463caret symbol (^), regular expressions, 123-124Cartesian product, 248, 252cartfunctions.php files (Tahuayo application),
833
CAs (Certifying Authorities), 351
cascading style sheets (CSS), 518case, strings, 111-112case sensitivity
calling functions, 142MySQL statements, 219
casts (variable types), 28catalog scripts (Shopping Cart application)
index.php, 587-592show_book.php, 588, 594-595, 618show_cat.php, 588, 592-594
catch blocks (exception handling), 192categories, Amazon books, 829, 839-841category page (Shopping Cart application),
588, 592-594
categoryfunctions.php files (Tahuayo 
application), 833
categoryList array, 840Certificate Signing Request (CSR), 352-353certification project, personalized documents
files, 791-792index.html file, 792-793PDF , 800-802PDFlib, 803-816RTF,796-800
score.php file, 794-796
Certifying Authorities (CAs), 351CGI Interpreter, running PHP , 868CGI specification website, 418change_passwd.php files (PHPBookmark
application), 544change_passwd_form.php files
(PHPBookmark application), 544
change_password() function, 562, 729-730change_password.php files (Shopping Cart
application), 583
change_password_form.php files (Shopping
Cart application), 583
character classes (regular expressions), 122character sets (regular expressions), 121-122characters
escaping, 112padding, 110reading, 73
check_valid_user() function, 557checkdate() function, 443Checkout links, 831checkout.php files (Shopping Cart 
application), 583
checkout.php script (Shopping Cart 
application), 605, 608-610
check_admin_user() function, 709check_auth_user() function, 671check_logged_in() function, 709check_normal_user() function, 709chgrp() function, 414child nodes (Web forum tree structure), 753chmod() function, 414chown() function, 414ciphertext (encryption), 348classes
AmazonResultSet, 841-849AmazonResultSet.php, 842-847attributes, 162-164character (regular expressions), 122constructors, 161converting, strings, 188creating, 160designing, 172-173destructors, 161Exception, 193-195exceptions, creating, 194inheritance, 160, 166
controlling visibility, 167-168multiple, 171
overriding, 168-170preventing, 170
instantiation, 162ObjectIterator, 187-18843 6728 index  9/2/04  1:22 PM  Page 898
899 commercial websites
OO (object-oriented) development, 159, 184
operations, 161, 165-166Product, 851-853subclasses, 160, 168-170superclasses, 160, 168-170tree_node class, 753, 763-770type hinting, 183writing code
attributes, 174functions, 174-175meta tags, 173operations, 175Page class, 175-178
ServicesPage class, 180-181TLA Consulting home page, generating, 179
clauses
GROUP BY , 254-255HAVING, 255LIMIT, SELECT statement, 256ORDER BY , SELECT statement, 253SELECT, 255throw, 194WHERE, 246-248
ClibPDF library website, 790clone keyword, 184cloning objects, 184closedir($dir) function, 409closing tags (XML), 823CMSs. Seecontent management systems
code
content, separating from content, 518indenting, 45logic, separating from content, 518naming conventions, 511optimizations, 518-519prototypes, 517-518reusing
benefits, 129-130include() statement, 130, 138-139require() statement, 131-132, 138-139
rewriting, 509-510
testing, 520version control, 514-515
writing, classes
attributes, 174functions, 174-175meta tags, 173operations, 175
Page class, 175-178
ServicesPage class, 180-181TLA Consulting home page, 179
writing, maintainability, 510-514
code blocks, 45, 55, 152-153code modules, Shopping Cart application,
582
Codewalkers website, 891collapsing threads (Web forum application),
759, 762
colors
button text, 460
buttons, 463
RGB (red, green, and blue), 456
column types (tables), 230-231, 234
date and time types, 236-237numeric types, 235-236
string, 237-239
columns
DESCRIBE statement, 296tables
keys, 207-208, 213values, atomic column values, 212
values, EXPLAIN statement, 299-300
columns_priv table, 286, 289-290combination assignment operators, 33comma operator, 37command line, 502-503commands
DESCRIBE command, 231-232GRANT command, 221-226, 285LOCK TABLES command, 302mysql command, 219
mysql_dump, database backup, 302
phpinfo() command, 29REVOKE command, 225-226SHOW command, 231-232SQL commands, CREATE TABLE command,
227-229
traceroute (UNIX), 340Web servers, functions, 415-417
commenting code, 512comments, 18-19commercial websites
adding value to goods or services, 331authentication, 339
How can we make this index more useful? Email us at indexes@samspublishing.com43 6728 index  9/2/04  1:22 PM  Page 899
900 commercial websites
cutting costs, 331-332
firewalls, 353-354importance of stored information, 338online brochures, limitations, 324-327orders for goods or services, customer obstacles,
327-330
privacy policies, 329providing services and digital goods, 330-331return policies, 329
risks, 332-335
security
auditing, 353authentication, 346-347backing up data, 354Certificate Signing Request (CSR), 352-353Certifying Authorities (CAs), 351compromises, 345digital certificates, 351digital signatures, 350-351encryption, 347-350hash function, 350log files, 353passwords, 346-347physical security, 355Secure Web servers, 352-353security policies, creating, 345-346threats, 338-345
SSL (Secure Sockets Layer), 329strategies, selecting, 335types, 323-324
committed transactions, 310comparing strings, 116-117comparison operators, 34
equals operator, 35WHERE clauses, 246-247
compatibility, commercial websites, 330components, user personalization, 542compression
GIF (Graphics Interchange Format), 454SSL (Secure Sockets Layer), 386
Concurrent Versions System (CVS), 515conditionals
code blocks, 45comparing, 49else statements, 45-46elseif statements, 46-47if statements, 44-45indenting code, 45
switch statements, 47-49
conditions, join, 248configuring
IIS (Internet Information Server), 373-374mod_SSL module, 873PHP , 872sessions, 486-487
connecting networks, runtime errors, 529-530connection verification, MySQL database, 290connections
Amazon, 819-820FTP servers closing, 435remote FTP servers, 431
Web databases, 271-272
constants, 29, 533-534constants.php file
Amazon, 835-836Tahuayo application, 832
constructors, OO (object-oriented) develop-
ment, 161
constructs, per-class (object-oriented) 
development, 182
content (code), separating from logic, 518content management systems (CMSs), 625
building, 626
content editing, 626-627databases, 627, 631-633document structure, 627-628existing, 626extensions, 655files, 630-631front page, 633-637images, manipulating, 638-640implementing
editor screen, 653-655front page, 633-637keywords, 650-653stories, adding, 640-650
metadata, 628-629output, formatting, 629stories, adding, 640-650writing, 626
continuation symbol (MySQL), 219continue handlers, 317continue statement, 5443 6728 index  9/2/04  1:22 PM  Page 900
901 data types
control, version (code)
CVS (Concurrent Versions System), 515multiple programmers, 515
repository, 514-515
control characters, 66control structures
alternate syntax, 54-55breaking out of, 54conditionals, 44-49declare, 55loops, 49-50
break statement, 54do..while loops, 53-54for loops, 52-53foreach loops, 52-53while loops, 51-52
stored procedures, 315-319
controlling visibility, 167-168conversion specifications, 109-111converting
arrays to scalar variables, 103-104calendars, 449classes to strings, 188
cookies, 480-482coordinates, bounding boxes, 465copy() function, 414correlated subqueries, 258cos() function, 816count() function, 102COUNT(items) function, 254counting array elements, 102crackers, 333CREATE privilege, 224CREATE TABLE command (SQL), 227-229CREATE TEMORARY TABLES privilege,
224
create_database.php files (Warm Mail 
application), 661
create_database.sql file, 631-633, 756
content management systems, 630MLM application, 699Web forum application, 754
credit card numbers, storing, 389criteria, retrieving specific data from 
databases, 246-247
cross join, 252crypt() function, 364-365cryptography, 348
CSR (Certificate Signing Request), 352-353CSS (cascading style sheets), 518curly braces ({}), regular expressions, 123current() function, 100cursors (stored procedures), 315-319custom authentication, creating, 377cutting costs (commercial websites), 331-332CVS (Concurrent Versions System), 515, 521
D
data
aggregating, 254-255encrypting, 388graphing, 468-476
grouping, 254-255
input, 530, 552-553inserting into databases, 242-244joins, 252-253loading, from files, 307metadata, content management systems,
628-629
redundant data, avoiding (Web databases),
210-211
retrieving
from databases, 244-245from multiple tables, 247-248in a particular order, 253-254with specific criteria, 246-247
rows, returning, 256
sensitive data, 387-389tables
aliases, 251-252joining, 249-250rows unmatched, 250-251two-table joins, 248-249
Data Definition Languages (DDL), 242Data Encryption Standard (DES), 349data hiding, OO (object-oriented) develop-
ment, 158
Data Manipulation Languages (DML), 242data transfer, database replication, 303-305data types
BLOB types (binary large objects), 238date and time data types, 236-237floating point data types (numeric column
types), 235-236
How can we make this index more useful? Email us at indexes@samspublishing.com43 6728 index  9/2/04  1:22 PM  Page 901
902 data types
integral data types (numeric column types), 235
TEXT types, 238variables, 27
database schema (PHPBookmark applica-
tion), 545-549
databases. See also relational databases;Web
databases
backing up, 302-303benefits, 78, 205Book-O-Rama, 241-243book_sc database (Shopping Cart application),
585-587
content management systems, 627, 631-633creating with MySQL, 220data
aggregating, 254-255grouping, 254-255inserting, 242-244joins, 252-253loading from files, 307retrieving, 244-245retrieving from multiple tables, 247-248retrieving in a particular order, 253-254retrieving with specific criteria, 246-247rows unmatched, 250-251tables, 249-252two-table joins, 248-249
DDL (Data Definition Languages), 242DML (Data Manipulation Languages), 242dropping, 262information gathering
columns, DESCRIBE statement, 296queries, EXPLAIN statement, 296-300SHOW statement, 293-295
keys, 207-208
lists, 696MySQL, 254, 285, 354
columns_priv table, 290connection verification, 290db table, 288host table, 289join types, 252request verification, 290results.php script, 267-269tables_priv table, 289user table, 286Web database architecture, 266-269optimizing, 301-302
passwords, 292PEAR, 280-283privilege system, 285
columns_priv table, 289-290db table, 288-289grant table, 290host table, 288-289privileges, updating, 290-291tables_priv table, 289-290user table, 286-288
queries, indexes, 301records, 259, 262
relationships
many-to-many relationships, 209one-to-many relationships, 209one-to-one relationships, 209, 214
replication, 303-305
restoring, 303
rows, returning, 256
runtime errors, 527-529
schemas, 208security, 291-293selecting in MySQL, 227setting up (online newsletters), 700-702Shopping Cart application, 587SQL (Structured Query Language), 241-242subqueries, 256-258subscribers, 696tables, 206
altering, 259-261Cartesian product, 248column types, 230-231, 234-239columns, 207creating in MySQL, 227-229dropping, 262equi-joins, 249indexes, creating, 232-233joins, 248keywords, 229left joins, 250-251rows, 207types, 214, 233values, 207
viewing, 231-232
viewing in MySQL, 231-23243 6728 index  9/2/04  1:22 PM  Page 902
903 design_button.html file
Warm Mail application (email client), setting
up, 661-662
Web forum application, 754-757
data_valid_fns.php files
MLM application, 699PHPBookmark application, 544Shopping Cart application, 584Warm Mail application, 661
Web forum application, 754
date and time
calendars, converting, 449converting between PHP and MySQL formats,
444-445
MySQL
date calculations, 446-448DATE_FORMAT() function, 444-445
MySQL website, 449UNIX_TIMESTAMP() function, 444-445
PHP
calendar functions, 448-449checkdate() function, 443
date calculations, 445-446date() function, 439-442floor() function, 446getdate() function, 442-443microseconds, 448mktime() function, 441-442PHP website, 449
date and time column types, 236-237date and time data types, 236-237date() function, 19-20, 412
format codes, 439-441Unix timestamps, 441-442
DATE_FORMAT() function, 444-445
db table, 286-289db_connect() function, 555db_fns.php files, 643
content management systems, 630MLM application, 699PHPBookmark application, 544Shopping Cart application, 584Warm Mail application, 661
Web forum application, 754
db_result_to_array() function, 591DDL (Data Definition Languages), 242DDoS (Distributed Denial of Service), 342debugging variables, 531-533declare control structure, 55
declare handlers, 317declaring
functions, 142-143stored functions, 314-315stored procedures, 312-313
decoct() function, 413decrement operators, 33-34decryption, 348default values, database optimization, 302DELETE privilege, 223DELETE statement, 262delete_account() function, 676delete_bm() function, 573delete_bms.php files (PHPBookmark 
application), 544
delete_book.php files (Shopping Cart 
application), 584
delete_category.php files (Shopping Cart
application), 584
delete_message() function, 688delete_story.php files, 630, 649deletion anomalies, avoiding (Web databases),
211
Denial of Service (DoS), 342-343deregistering variables, 483DES (Data Encryption Standard), 349DESC keyword, 253descenders (letters), 466DESCRIBE command, 231-232DESCRIBE statement, syntax, 296describe user; statement, 286designing
classes, 172-173databases, content management systems,
631-633
Web databases
anomalies, avoiding, 211atomic column values, 212keys, creating, 213null values, avoiding, 213questions, formulating, 213real-world objects, modeling, 209-210redundant data, avoiding, 210-211table types, 214
designs, database optimization, 301design_button.html file, 460-463
How can we make this index more useful? Email us at indexes@samspublishing.com43 6728 index  9/2/04  1:22 PM  Page 903
904 destroying sessions
destroying sessions, 483
destructors, OO (object-oriented) 
development, 161
Details link, 830developer token (Amazon), 826development environments, 516Devshed website, 477, 890diagrams
entity relationship, 208online newsletters, 697-699
die() language construct, 497digest authentication (HTTP), 366digital certificates, 351digital goods (commercial websites),
providing, 330-331
digital signatures, 350-351directives
execution, 55magic_quotes_gpc, 387magic_quotes_runtime, 387php.ini file, editing, 500-501
directories
browsing, 408extensions, copying libpdf_file, 878files, write permissions, 388functions, 408-411
directory structures, 514dirname() function, 410-412disconnecting Web databases, 274discussion board application, 751
article list
collapsing threads, 759, 762displaying articles, 762-763expanding threads, 759-761individual articles, viewing, 770-772new articles, adding, 773-780plus symbols, 757treenode class, 763-770
database design, 754-757extensions, 780files, 754posters, 754solutions, 752-754tree structure, 752-753tree_node class, 753
discussion boards, 751discussion_fns.php files (Web forum 
application), 754disk_free_space($path) function, 410
display() function, 768displaying articles (Web forum application),
762-763
display_account_form() function, 673, 712,
728
display_account_select() function, 679display_account_setup() function, 673, 676display_book_form() function, 619-621display_button() function, 742display_cart() function, 599-602display_categories() function, 590-591display_information() function, 723-724display_items() function, 718-720display_list() function, 680display_list_form() function, 731display_mail_form() function, 735-736display_message() function, 685display_password_form() function, 728display_post() function, 772display_preview_button() function, 742display_registration_form() function, 549display_tree() function, 762-763display_user_menu() function, 557display_user_urls() function, 570-571Distributed Denial of Service (DDoS), 342division operator, 31dl() function, 500DML (Data Manipulation Languages), 242dns_get_mx() function, 427do..while loops, 53-54Document Type Definition (DTD), XML, 823documentation
gd, website, 477Web application projects, 516-517
documents
headers, 791, 816RTF,797-798
certification project, 791-796, 800-816creating, 783-784extensions, 817formats, 784requirements, 788-790
personalized, 783structure, content management systems,
627-628
DoS (Denial of Service), 342-343 43 6728 index  9/2/04  1:22 PM  Page 904
905 email client application (Warm Mail)
double data type (variables), 27
doubleval() function, 293downloading
Amazon Web Services Developers’ Kit, 826files, FTP servers, 434-435FreeT ype library, 452GIF (Graphics Interchange Format), 453jpeg-6b, 452PostScript T ype 1 fonts, 452
t1lib, 452
do_html_header() function, 604, 679, 708drawing
figures, 468-476images, scripts, 455text, images, 456-457
drawing functions, parameters, 456draw_star() function, 816DROP DATABASE statement, 262DROP privilege, 224DROP TABLE statement, 262dropping databases/tables, 262DTD (Document Type Definition), XML, 823dump variables.php file, 531-532dynamic content, 19-20dynamically loading extensions, 500
E
e-commerce websites
adding value to goods or services, 331authentication, 339cutting costs, 331-332online brochures, limitations, 324-327orders for goods or services, customer obstacles,
327-330
privacy policies, 329providing services and digital goods, 330-331return policies, 329
risks, 332-335
security
auditing, 353authentication, 346-347backing up data, 354Certificate Signing Request (CSR), 352-353Certifying Authorities (CAs), 351compromises, 345digital certificates, 351digital signatures, 350-351
encryption, 347-350firewalls, 353-354hash function, 350importance of stored information, 338log files, 353passwords, 346-347physical security, 355Secure Web servers, 352-353security policies, creating, 345-346threats, 338-345
SSL (Secure Sockets Layer), 329strategies, selecting, 335types, 323-324
each() function, 83-85, 100echo statements, 24-25editor screens, content management systems,
653-655
edit_book.php files (Shopping Cart 
application), 584
edit_book_form.php files (Shopping Cart
application), 584
edit_book_form.php script (Shopping Cart
application), 618
edit_category.php files (Shopping Cart 
application), 583
edit_category_form.php files (Shopping Cart
application), 583
elements
arrays, 80, 101-102XML, 823-824
else statements, 45-46elseif statements, 46-47email
encryption
GPG (Gnu Privacy Guard), 389-397PGP (Pretty Good Privacy), 389
reading, 420
sending, 420Warm Mail application
deleting email, 687-688forwarding/replying, 691-692sending, 688-690
email attachments, online newsletters, 697email client application (Warm Mail)
accounts
creating, 674-676deleting, 676-677
How can we make this index more useful? Email us at indexes@samspublishing.com43 6728 index  9/2/04  1:22 PM  Page 905
906 email client application (Warm Mail)
modifying, 676
selecting, 677-680setting up, 672-674
database, setting up, 661-662email, deleting, 687-688extensions, 692-693files, 660-661IMAP function library, 658-659interface, 659-660logging in, 669-672logging out, 672reading mail
mailbox contents, viewing, 680-683message headers, viewing, 686-687messages, 683-686selecting accounts, 677-680
script architecture, 663-669sending mail, 688-692solution components, 658-659solution overview, 659-661
embedding PHP in HTML, 15
comments, 18-19statements, 17-18tags, 16-17whitespace, 18
empty() function, 43encapsulation, OO (object-oriented) 
development, 158
encryption
ciphertext, 348cryptography, 348data, 388Data Encryption Standard (DES), 349decryption, 348digital certificates, 351digital signatures, 350-351encryption algorithm, 347GPG (Gnu Privacy Guard), 389
installing, 390-392key pairs, 390-391testing, 392-397
hash functions, 350passwords, 292, 364-365PGP (Pretty Good Privacy), 389plain text, 348private keys, 349public keys, 349-350RSA, 349end() function, 100
engineering software, 508entity relationship diagrams, 208ENUM type, 239envelopes, SOAP envelopes, 825environment variables, PHP functions,
417-418
environments, development, 516EPA website, 355equal sign (=) assignment operator, 23equality operator, 85equals operator, 35equi-joins, 249, 252Equifax Secure, 351ereg() function, 126-127eregi() function, 126, 423eregi_replace() function, 127ereg_replace() function, 127error checking, exit statement, 54error handling, 200error reporting levels, 533-536error suppression operator, 37errors
401 errors (HTTP), 370calling undefined functions, 141-142exception handling, 536-539function calling, 64logic, 530-531programming, 523
logic errors, 530-531runtime errors, 525-527syntax errors, 524-525
runtime, 525
database interaction, 527-529functions that don’t exist, 526-527input data, checking, 530network connections, 529-530reading/writing files, 527
software, 343-344syntax, 524-525triggering, 536
escapeshellcmd() function, 387, 417escaping characters, 112eval() function, 496-497
evaluating strings, 496-497
Evil Walrus website, 891Exception class, 193-195
43 6728 index  9/2/04  1:22 PM  Page 906
907 FILE privilege
exception handling, 536-539
Bob’s Auto Parts application, 197-200catch blocks, 192classes, creating, 194Exception class, 193-195I/O (input/output) files, 197throwing exceptions, 191try blocks, 191tutorials, 201user-defined exceptions, 194-196
exceptions, throwing, 191exec() function, 415executable content (stored data), 387executing scripts, command line, 502execution directives, 55execution operator, 37-38exit handlers, 317exit language construct, 497exit statement, 54expanding threads (Web forum application),
759-761
expand_all() function, 761-762EXPLAIN statement, 296-297
column values, 299-300join types, 298-299select types, 298
explode() function, 98-99, 114, 427, 652exporting public keys (Gnu Privacy Guard),
391
expressions
finding, 126-128regular
* symbol, 123+ symbol, 123branching, 124caret symbol (^), 123-124character classes, 122
character sets, 121-122
curly braces ({}), 123functions, versus string functions, 127Perl, 121slash (\), 124Smart Form Mail application, 125-126special characters, 124-125splitting strings, 127string anchoring, 123-124subexpressions, 123substringsextended syntax, 255
extending Exception class, 194-195extends keyword, 166Extensible Markup Language. SeeXML
extensions
Amazon, 863content management systems, 655filename extensions, require() statement, 132loading, 499-500online newsletters, 749personalized documents, 817PHPBookmark application, 578Shopping Cart application, 622Warm Mail application, 692-693
Web forum application, 780
extensions directory, copying libpdf_file, 878extract() function, extract_type parameter,
103-104
extract_type parameter (extract() function),
103-104
Extreme Programming website, 521
F
f file mode, 61FastTemplate website, 518
fclose() function, 67, 409FDF website, 801fdf_create() function, 800fdf_set_file() function, 800fdf_set_value() function, 800Fedex website, 331
feof() function, 71fetchRow() method, 283fgetc() function, 73fgetcsv() function, 71-72fgets() function, 71fgetss() function, 71fields
scope, 287tables, 207
figures, drawing, 468-476File Details view, 413file formats, 66-67file modes, 59-60file paths, directories, 410FILE privilege, 224-225, 292
How can we make this index more useful? Email us at indexes@samspublishing.com43 6728 index  9/2/04  1:22 PM  Page 907
908 File Transfer Protocol (FTP)
File Transfer Protocol (FTP)
anonymous login, 431backing up files, 428-430
checking update times, 432-434
closing connections, 435
downloads, 434-435logins, 432remote connections, 431
ftp_get() function, 435ftp_mdtm() function, 433ftp_nlist() function, 436ftp_size() function, 436mirroring files, 428-430
checking update times, 432-434
closing connections, 435
downloads, 434-435logins, 432remote connections, 431
opening files, 62-63set_time_limit() function, 436timeouts, avoiding, 435-436transfer modes, 434uploading files, 435
file upload
displaying, 406HTML, 401-403online newsletters, 696-697PHP , writing, 403-407security, 403, 407troubleshooting, 407-408
file upload method, content management
systems, 627
file() function, 72fileatime() function, 412filedetails.php file, 411-412filegroup() function, 411-412filemtime() function, 412filename extensions, require() statement, 132fileowner() function, 411-412fileperms() function, 413files, 57-58
backing up, FTP functions, 428-430
checking update times, 432-434
closing connections, 435
downloads, 434-435logins, 432remote connections, 431browsedir.php, 408-409
checking existence of, 74checking size of, 74closing, 67-69constants.php (Amazon), 835-836content management systems, 630-631create_database.sql, 631-633, 756creating, 414-415data, loading from, 307db_fns.php, 643delete_story.php, 649deleting, 74, 414-415design_button.html, 460-463dump variables.php, 531-532filedetails.php, 411-412footer.php, 629handle.php, 537-538header.php, 629headline.php, 634htaccess files (Apache Web server), 369-372httpd.conf, 875-876I/O (input/output), exception handling, 197index.html (certification application), 792-793index.php, 633-634
MLM online newsletters, 702-708Tahuayo application, 833-839
Warm Mail application, 663-669
keywords.php, 650
libpdf_php, copying, 878limitations, 77loading arrays from, 96-99locking, 76-77log files, 353login.php, 642logout.php, 643lookup.php, 421-422make_button.php, 461-463mirroring, FTP functions, 428-430
checking update times, 432-434
closing connections, 435
downloads, 434-435logins, 432remote connections, 431
MLM (mailing list manager), 698moving, 414-415multiple, uploading (online newsletters),
736-74143 6728 index  9/2/04  1:22 PM  Page 908
909 flat files
navigating, 74-75
newbooks.txt, 307new_post.php, 773-775opening
file modes, 59-60fopen() function, 60-62FTP (File Transfer Protocol), 62-63HTTP (Hypertext Transfer Protocol), 62-63potential problems, 63-64
page.php, 635-637pdflib.php, 808-812personalized documents, certification project,
791
php.ini file
auto_append_file, 138-139auto_prepend_file, 138-139directives, editing, 500-501
PHPBookmark application, 544pollsetup.sql, 468progex.php, 416-417properties, changing, 414publish.php, 653-654reading, 59, 69, 411-413
feof() function, 71fgetc() function, 73fgetcsv() function, 71-72fgets() function, 71fgetss() function, 71file() function, 72fopen() function, 70fpassthru() function, 72fread() function, 73readfile() function, 72
reading/writing, runtime errors, 527
rtf.php, 798
score.php (certification project), 794-796search.php, 651-652select_fns.php, 647Shopping Cart application, 583-584showpoll.php, 470-476simplegraph.php, 454-455status function results, 416-417storage, content management systems, 627story.php, 644-646story_submit.php, 647-649Tahuayo application, 832-833
topbar.php, 838uploading, FTP (File Transfer Protocol), 435
utilityfunctions.php, 838vote.html, 469
Warm Mail application (email client), 660-661
Web forum application, 754
write permissions, 388writer.php, 640-642writing, 59writing to, 65-67ZIP , 879
filesize() function, 74, 413filetype() function, 413file_exists() function, 74filled out() function, 552-553filtering input data (Web databases), 270-271find and replace, substrings, 119-120finding substrings
numerical position, 118-119
regular expressions, 126-127
strchr() function, 118stristr() function, 118strpos() function, 118-119strrchr() function, 118strrpos() function, 119strstr() function, 118
firewalls, 353-354FishCartSQL, 622fitting text onto buttons, 464-467flat files, 57-58
checking existence of, 74checking size of, 74closing, 67-69deleting, 74formats, 66-67limitations, 77locking, 76-77navigating, 74-75opening
file modes, 59-60fopen() function, 60-62FTP (File Transfer Protocol), 62-63HTTP (Hypertext Transfer Protocol), 62-63potential problems, 63-64
reading, 59, 69
feof() function, 71fgetc() function, 73
How can we make this index more useful? Email us at indexes@samspublishing.com43 6728 index  9/2/04  1:22 PM  Page 909
910 flat files
fgetcsv() function, 71-72
fgets() function, 71fgetss() function, 71file() function, 72fopen() function, 70fpassthru() function, 72fread() function, 73readfile() function, 72
writing, 59writing to
file formats, 66-67fputs() function, 65fwrite() function, 65-66
Float data type (variables), 27floating point data types (numeric column
types), 235-236
flock() function, 76floor() function, 446focus groups, 326-327fonts
button text, 460
descenders, 466FreeT ype library, downloading, 452images, creating, 460-463, 468PDF readers, 806PostScript T ype 1 fonts, downloading, 452
TrueT ype, 460
footer.php file, 629-630footers, script architecture, 702fopen() function, 59-62, 70, 409, 422for loops, 52-53foreach loops, 52-53foreign keys
databases, 208InnoDB tables, 311-312
forgot_form.php files (PHPBookmark 
application), 544
forgot_passwd.php files (PHPBookmark
application), 544
format codes, date() function, 439-441formats
file formats, 66-67images
GIF (Graphics Interchange Format), 453-454JPEG (Joint Photographic Experts Group),
452-453
PNG (Portable Network Graphics), 453WBMP (Wireless Bitmap), 453personalized documents
ASCII, 784HTML, 785paper, 784PDF , 787-788PostScript, 786-787RTF, 786
word processors, 785-786
formatting
output, content management systems, 629strings, 107
case, changing, 111-112conversion specifications, 109-111HTML formatting, 108-109ltrim() function, 108nl2br() function, 108-109printing, 108-111rtrim() function, 108
storage, 112-113trim() function, 108trimming whitespace, 108
forms
HTML forms, 266-267, 401
order, 12-14processing, 12, 15
totaling with operators, 39-40variables, accessing, 21-25
forum application. SeeWeb forum application
forwarding to email,Warm Mail application,
691-692
fpassthru() function, 72FPDF function library, 790fputs() function, 65fread() function, 73FreeType library, downloading, 452front page, content management systems,
633-637
fseek() function, 75ftell() function, 74FTP (File Transfer Protocol)
anonymous login, 431backing up files, 428-430
checking update times, 432-434
closing connections, 435
downloads, 434-435logins, 432remote connections, 43143 6728 index  9/2/04  1:22 PM  Page 910
911 functions
content management systems, 626
FTP transfer modes, 434ftp_get() function, 435ftp_mdtm() function, 433ftp_nlist() function, 436ftp_size() function, 436mirroring files, 428-430
checking update times, 432-434
closing connections, 435
downloads, 434-435logins, 432remote connections, 431
opening files, 62-63set_time_limit() function, 436timeouts, avoiding, 435-436uploading files, 435
ftp_connect() function, 432ftp_get() function, 435ftp_mdtm() function, 433ftp_nlist() function, 436ftp_size() function, 436full joins, 248, 252function libraries, 514
FPDF , 790mail_fns.php, get_accounts() function, 674output_fns.php, 670PDF , 790PHPBookmark application, 544
function names, code, 511function overloading, 144function scope, 147functions
accessor, 163addslashes(), 112, 270, 293, 387addT oCart(), 862add_bm(), 570add_quoting(), 776-777aggregate, MySQL, 254applying to array elements, 101-102arguments, 20array_count_values() function, 102array_push(), 722array_reverse() function, 96array_walk() function, 101-102arsort() function, 91asort() function, 91__autoload(), 185AVG(column), 254
backtrace, 194basename(), 410-412browseNodeSearch(), 854-855cache(), 857-858cached(), 856-858calculate_items(), 602-603calculate_price(), 602-603calendar functions, 448-449calling, 20, 139
case sensitivity, 142errors, 64parameters, 140prototypes, 140-141undefined functions, 141-142
change_password(), 562, 729-730checkdate(), 443check_admin_user(), 709check_auth_user(), 671check_logged_in(), 709check_normal_user(), 709check_valid_user(), 557chgrp(), 414chmod(), 414chown(), 414closedir($dir), 409commands,Web servers, 415-417copy(), 414cos(), 816count(), 102COUNT(items), 254creating, 142, 174-175crypt(), 364-365current() function, 100date(), 19-20, 412, 439-442DATE_FORMAT(), 444-445
db_connect(), 555db_result_to_array(), 591declaring, 142-143decoct(), 413delete_account(), 676delete_bm(), 573delete_message(), 688directories, 408-411dirname(), 410-412disk_free_space($path), 410display() function, 768
How can we make this index more useful? Email us at indexes@samspublishing.com43 6728 index  9/2/04  1:22 PM  Page 911
912 functions
display_account_form(), 673, 712, 728
display_account_select(), 679display_account_setup(), 673, 676display_book_form(), 619-621display_button(), 742display_cart(), 599-602display_categories(), 590-591display_information(), 723-724display_items(), 718-720display_list(), 680display_list_form(), 731display_mail_form(), 735-736display_message(), 685display_password_form(), 728display_post(), 772display_preview_button(), 742display_registration_form(), 549display_tree(), 762-763display_user_menu(), 557display_user_urls(), 570-571dl(), 500doubleval(), 293do_html_header(), 604, 679, 708drawing, parameters, 456draw_star(), 816each() function, 83-85, 100empty(), 43end() function, 100ereg() function, 126-127eregi(), 126, 423eregi_replace() function, 127ereg_replace() function, 127escapeshellcmd(), 387, 417eval(), 496-497
exec(), 415expand_all(), 761-762explode(), 98-99, 114, 652extract() function, extract_type parameter,
103-104
fclose(), 67, 409fdf_create(), 800fdf_set_file(), 800fdf_set_value(), 800feof(), 71fgetc(), 73fgetcsv(), 71-72fgets(), 71fgetss(), 71
file status results, 416-417file(), 72fileatime(), 412filegroup(), 411-412filemtime(), 412fileowner(), 411-412fileperms(), 413files, 411-415filesize(), 74, 413filetype(), 413file_exists(), 74filled out(), 552-553flock(), 76floor(), 446fopen(), 59-62, 70, 409, 422fpassthru(), 72fputs(), 65fread(), 73fseek(), 75ftell(), 74FTP functions, 428
backing up files, 428-435ftp_get() function, 435ftp_mdtm() function, 433ftp_nlist() function, 436ftp_size() function, 436mirroring files, 428-435set_time_limit() function, 436timeouts, avoiding, 435-436uploading files, 435
ftp_connect(), 432fwrite(), 65-66getARS(), 841-842, 854, 856getCategoryName(), 839-840getdate(), 442-443getenv(), 417-418getlastmod(), 500gettype() function, 42-43get_accounts(), 674get_account_list(), 677-678get_archive(), 725-726get_categories(), 590get_category_name(), 593get_current_user(), 500get_email(), 716get_extension_funcs(), 499
43 6728 index  9/2/04  1:22 PM  Page 912
913 functions
get_loaded_extensions(), 499
get_magic_quotes_gpc(), 270, 496get_magic_quotes_runtime(), 496get_post(), 772get_random_word(), 565-566get_post_title(), 775get_unsubscribed_lists(), 721-722get_user_urls(), 570-571, 557get_writer_record(), 643Header(), 458, 799highlight_file(), 501-502htmlspecialchars(), 271, 387ImageColorAllocate(), 456ImageCopyResized(), 639ImageCreate(), 455ImageCreateFromGIF(), 456, 463ImageCreateFromJPEG(), 456, 463ImageCreateFromPNG(), 456, 463ImageDestroy(), 459ImageFill(), 456ImageFilledRectangle(), 474-476ImageGetTTFBBox(), 465ImageJPEG(), 458ImageLine(), 474ImagePNG(), 458, 463ImageRectangle(), 476images, 476ImageString(), 457ImageTTFBBox(), 466ImageTTFT ext(), 465, 476IMAP function library, 658-659imap_body(), 686imap_delete(), 688imap_expunge(), 688imap_fetchheader(), 686imap_header(), 686imap_headers(), 683, 686imap_open(), 682-683implode() function, 114ini_get(), 500-501ini_set(), 500-501insert_order(), 608intval(), 99isset() function, 43, 151is_uploaded_file(), 407join() function, 114krsort() function, 91ksort() function, 91
list() function, 83-85load_list_info(), 724-725login(), 557, 715-716lstat(), 413ltrim() function, 108mail(), 107, 420, 567, 697max() function, 151-152MAX(column), 254microtime(), 448MIN(column), 254mkdir(), 410mktime(), 441-442mysqli_errno(), 528
mysqli_error(), 528
mysqli_fetch_assoc() function, 273
mysql_connect(), 272, 528
mysqli_query(), 528
mysql_affected_rows() function, 278
mysql_query() function, 272-273
mysql_select_db() function, 272
my_error_handler () function, 537
naming, 143-144network lookup functions, 424-428next() function, 100nl2br() function, 108-109notify_password(), 564-567number_of_accounts(), 677
ODBC (Open Database connectivity), 280opendir(), 409open_mailbox(), 681parameters, 20, 144-146
pass by reference, 149-150pass by value, 149-150
passing by reference, 102passthru(), 415pdf_add_outline(), 805pdf_begin_page(), 805pdf_close(), 807pdf_fill(), 816pdf_rect(), 814pdf_replace(), 801pdf_setlinewidth(), 814pdf_set_info(), 805pdf_show(), 807pdf_show_xy(), 815pdf_stringwidth(), 815
How can we make this index more useful? Email us at indexes@samspublishing.com43 6728 index  9/2/04  1:22 PM  Page 913
914 functions
pdf_stroke(), 814
PHP environment variables, 417-418phpinfo(), 417, 790posix_getgrgid(), 412posix_getpwuid(), 411-412pretty(), 724prev() function, 100print() function, 108printf() function, 109-110prototypes, 140-141putenv(), 417-418query_select(), 647range() function, 81readdir($dir), 409
readfile(), 72
recommend_urls(), 576-577
recursive functions, 153-155
register(), 554
rename(), 415
reset() function, 100
reset_password(), 564-565
$result-fetch_assoc(), 273retrieve_message(), 685
returning from, 150-151
rewind(), 74
rewinddir($dir), 410
rmdir(), 410-411
rsort() function, 91
rtrim() function, 108
runtime errors, 526-527
safeString(), 838send(), 743-746send_message(), 689-690serialize(), 497-498, 858session_get_cookie_params(), 481session_register(), 482-483session_start(), 482-485session_unregister(), 483setcookie(), 480-481settype() function, 42-43set_error_handler() function, 536set_magic_quotes_runtime(), 496shal1(), 364-365shopping carts (Amazon), 859, 862showBrowseNode(), 839-840showCart(), 862showCategories(), 839-840ShowSmallCart(), 838
showSummary(), 841, 854show_source(), 501-502shuffle() function, 94-95sin(), 816sizeof(), 102sort() function, 90split() function, 127sprintf() function, 109stat(), 413STD(column), 254STDDEV(column), 254stored, declaring, 314-315store_account(), 712-714store_account_settings(), 674-675store_list(), 732-733store_new_post(), 778-780strcasecmp() function, 116strchr() function, 118strcmp() function, 116string case functions, 111-112string versus regular expression, 127stripslashes(), 113, 270, 293strip_tags(), 387stristr() function, 118strlen() function, 117strnatcmp() function, 117strpos() function, 118-119strrchr() function, 118strrpos() function, 119strstr(), 118, 570strtok() function, 114-115strtolower() function, 111strtoupper() function, 111str_replace(), 120, 799subscribe(), 727substr() function, 115-116substr_replace() function, 120SUM(column), 254system(), 415__toString(), 188touch(), 414trim() function, 108, 270uasort() function, 93ucfirst() function, 111ucwords() function, 112uksort() function, 93
43 6728 index  9/2/04  1:22 PM  Page 914
915 handling exceptions
umask(), 410
undefined functions, calling, 141-142UNIX_TIMESTAMP(), 444-445unlink(), 74, 414unserialize(), 498, 858unset() function, 43unsubscribe(), 727urlencode(), 366, 423usort() function, 92valid email(), 553
values, 151-153
variable functions, 42-44, 144
variable scope, 146-149
fwrite() function, 65-66
G
gd documentation, website, 477generating images, automatically, 459
GET parameters, 849getARS() function, 841-842, 854-856
getCategoryName() function, 839-840
getdate() function, 442-443
getenv() function, 417-418
gethostbyaddr() function, 427
gethostbyname() function, 425-427
getlastmod() function, 500
getmxrr() function, 425
gettype() function, 42-43
get_accounts() function, 674
get_account_list() function, 677-678
get_archive() function, 725-726
get_categories() function, 590
get_category_name() function, 593
get_current_user() function, 500
get_email() function, 716
get_extension_funcs() function, 499
get_loaded_extensions() function, 499
get_magic_quotes_gpc() function, 496
get_magic_quotes_runtime() function, 270,
496
get_post() function, 772
get_random_word() function, 565-566
get_post_title() function, 775
get_unsubscribed_lists() function, 721-722
get_user_urls() function, 570-571, 557
get_writer_record() function, 643
Ghostscript website, 787GIF (Graphics Interchange Format), 453-454
global privileges, 222global scope, 147global variables, 147GMT (Unix Epoch), 441Gnu Privacy Guard (GPG), 389
installing, 390-392key pairs, 390-391
testing, 392-397website, 390
goods (commercial websites)
adding value to, 331digital goods, providing, 330-331taking orders for, customer obstacles, 327-330
Google website, 824GPG (Gnu Privacy Guard), 389
installing, 390-392key pairs, 390-391
testing, 392-397website, 390
GRANT command, 221-226, 285GRANT privilege, 292GRANT statements, 285, 294grant tables, 286, 290
Graphics Interchange Format (GIF), 453-454graphing data, 468-476
graphs, tutorials, 477
Gregorian calendar, 448-449GROUP BY clause, 254-255grouping data, 254-255
H
-h switch (mysql command), 219
handle.php file, 537-538handlers, 317handles, OO (object-oriented) development,
159
handling errors, 200handling exceptions, 536-539
Bob’s Auto Parts application, 197-200catch blocks, 192classes, creating, 194Exception class, 193-195I/O (input/output) files, 197throwing exceptions, 191try blocks, 191
How can we make this index more useful? Email us at indexes@samspublishing.com43 6728 index  9/2/04  1:22 PM  Page 915
916 handling exceptions
tutorials, 201
user-defined exceptions, 194-196
handshaking, 384-385hardware failure (commercial websites), 333hash function, 350HAVING clause, 255header bar summaries, printing (Shopping
Cart application), 604
Header() function, 458, 799header.php file, 629-630headers
generating certificates, 816message headers (Warm Mail application),
viewing, 686-687
script architecture, 702
headline.php file, 630, 634HEAP tables, 308Hello World scripts, PDFlib, 803-808heredoc syntax, 25highlighting syntax, 501-502highlight_file() function, 501-502host table, 286-289HotScripts.com website, 890htaccess files (Apache Web server), 369-372HTML (Hypertext Markup Language), 785
embedding PHP , 15
comments, 18-19PHP statements, 17-18PHP tags, 16-17whitespace, 18
file upload, 402-403formatting (strings), 108-109tags, meta tags, 173
HTML forms, 266-267
file upload, 401order, creating, 12-14order, processing, 14processing, Bob’s Auto Parts application, 12, 15
htmlspecialchars() function, 271, 387htpasswd program (Apache Web server), 372HTTP (Hypertext Transfer Protocol)
authentication websites, 378basic authentication, 366
401 errors, 370in PHP , 367-368with Apache .htaccess files, 369-372with IIS, 373-374
digest authentication, 366handshaking, 384-385
opening files, 62-63Secure Sockets Layer (SSL), 384XML,Amazon connections, 820
httpd.conf, 875-876Hypertext Markup Language. SeeHTML
Hypertext Transfer Protocol. SeeHTTP
I
I/O (input/output) files, exception handling,
197
IDE (Integrated Development Environment),
516
identifiers, 26
images, destroying, 459MySQL identifiers, 233-234results identifiers, retrieving query results (Web
databases), 273-274
identity operator, 85if statements, 44-45IIS (Internet Information Services)
basic authentication, 373-374configuring with Internet Services Manager,
373-374
MySQL, adding, 886PHP , adding, 886
ImageColorAllocate() function, 456ImageCopyResized() function, 639ImageCreate() function, 455ImageCreateFromGIF() function, 456, 463ImageCreateFromJPEG() function, 456, 463ImageCreateFromPNG() function, 456, 463ImageDestroy() function, 459ImageFill() function, 456ImageFilledRectangle() function, 474-476ImageGetTTFBBox() function, 465ImageJPEG() function, 458ImageLine() function, 474ImageMagick library, 451ImagePNG() function, 458, 463ImageRectangle() function, 476images
canvas, creating, 455-456colors, RGB (red, green, and blue), 456creating, 454-455
fonts, 460-463, 468text, 460-463, 468
data, graphing, 468-47643 6728 index  9/2/04  1:22 PM  Page 916
917 input data (Web databases)
drawing, scripts, 455
figures, drawing, 468-476formats
GIF (Graphics Interchange Format), 453-454JPEG (Joint Photographic Experts Group), 452-
453
PNG (Portable Network Graphics), 453WBMP (Wireless Bitmap), 453
functions, 476generating automatically, 459identifiers, destroying, 459inline, dynamically produced, 459manipulating, 638-640outputting, 458supporting, PHP , 452text
drawing/printing, 456-457fitting onto buttons, 464-467positioning, 467writing onto buttons, 467-468
ImageString() function, 457ImageTTFBBox() function, 466ImageTTFText() function, 465, 476IMAP (Internet Message Access Protocol),
420, 657
client website, 869function library, 658-659
imap_body() function, 686imap_delete() function, 688imap_expunge() function, 688imap_fetchheader() function, 686imap_header() function, 686imap_headers() function, 683, 686imap_open() function, 682-683<img> tag, 639implementing
content management systems
editor screen, 653-655front page, 633-637keywords, 650-653stories, adding, 640-650
login (online newsletters), 711PHPBookmark database, 545-549recommendations, 574-577
implode() function, 114importing public keys (Gnu Privacy Guard),
392include() statement, 130, 138-139
include_fns.php files
content management systems, 630MLM application, 699Warm Mail application, 661
Web forum application, 754
include_once() statement, 138increment operators, 33-34indenting code, 45, 512-513INDEX privilege, 223index.php file, 633-634
certification application, 791-793MLM application, 699MLM online newsletters, 702-708Shopping Cart application, 583Tahuayo application, 832-839
Warm Mail application, 661-669
Web forum application, 754
index.php script (Shopping Cart application),
587-592
Indexed Sequential Access Method (ISAM),
308
indexes
arrays, 80creating (MySQL), 232-233database optimization, 302queries, 301
inequality operator, 85inheritance, OO (object-oriented) develop-
ment, 160, 166
controlling visibility, 167-168interfaces, implementing, 171-172multiple, 171
overriding, 168-170
preventing, 170
initializing arrays, 80-83ini_get() function, 500-501ini_set() function, 500-501inline images, dynamically produced, 459inner join, 252InnoDB tables, 308
foreign keys, 311-312transactions, 310-311
input data
checking, 530validating, 552-553
input data (Web databases), 270-271
How can we make this index more useful? Email us at indexes@samspublishing.com43 6728 index  9/2/04  1:22 PM  Page 917
918 input/output (I/O) files, exception handling
input/output (I/O) files, exception handling,
197
insert book.php script, prepared statements,
279
INSERT privilege, 223INSERT queries, 275-278INSERT statement, 242inserting data into databases, 244insertion anomalies, avoiding (Web data-
bases), 211
insert_book.php files (Shopping Cart applica-
tion), 583
insert_book.php script, 276-277, 616-617insert_book_form.php files (Shopping Cart
application), 583
insert_book_form.php script (Shopping Cart
application), 616
insert_category.php files (Shopping Cart
application), 583
insert_category_form.php files (Shopping
Cart application), 583
insert_order() function, 608install program (Apache), 883installations
Apache,Windows, 882-884binary installations, 868-871GPG (Gnu Privacy Guard), 390-392MIME mail package, 887mod_auth_mysql module, 375-376MySQL,Windows, 879-882PEAR (PHP Extension and Application
Repository), 887-888
PHP ,Windows, 884-887project codes,Amazon, 863source installations, 868-869
PDFlib, 872PHP , 872-875
InstallShield Wizard, 879instanceof keyword, 183instanceof type operator, 38instances, SOAP (Simple Object Access
Protocol), 855
instantiation (classes), 162integral data types, 27, 235Integrated Development Environment (IDE),
516
interfaces
administrator, Shopping Cart application, 581,
615-622
OO (object-oriented development), 158,
171-172PHP database interfaces, 280
Warm Mail application (email client), 659-660
Web Services (Amazon), 826-827
International PGP Home Page website, 389Internet, secure transactions, 381-382Internet Information Services (IIS)
basic authentication, 373-374configuring with Internet Services Manager,
373-374
MySQL, adding, 886PHP , adding, 886
Internet Message Access Protocol (IMAP),
420, 657
client website, 869function library, 658-659
Internet Protocol (IP), 384Internet Services Manager, configuring IIS
(Internet Information Services), 373-374
intval() function, 99IP (Internet Protocol), 384ISAM (Indexed Sequential Access Method),
308
isset() function, 43, 151is_uploaded_file() function, 407iteration. Seeloops
J
JD (Julian Day) Count calendar, 448-449
join condition,WHERE clause, 248join types, MySQL, 252join() function, 114joining strings, 114joining tables, 249-250joins
Cartesian product, 252cross, 252equi-joins, 249, 252EXPLAIN statement, 298-299full, 248, 252inner, 252left, 250-253tables, 248two-table, 248-249
JPEG (Joint Photographic Experts Group),
452-453
JPEG library website, 790, 869jpeg-6b, downloading, 452Julian Day Count (JD) calendar, 448-44943 6728 index  9/2/04  1:22 PM  Page 918
919 logging in
K
key pairs, installing GPG (Gnu Privacy
Guard), 390-391
key-value pairs, arrays, getdate() function, 443
keys
arrays, 80databases, 207-208, 213private keys, Gnu Privacy Guard (GPG), 391public keys, Gnu Privacy Guard (GPG),
391-392
keywords
AUTO_INCREMENT keyword, 229
clone keyword, 184DESC, 253extends keyword, 166instanceof keyword, 183LIKE, 247NOT NULL keyword, 229PRIMARY KEY keyword, 229REGEXP , 247return keyword, 150-151
searches, content management systems, 650-653static keyword, 182UNSIGNED keyword, 229
keywords.php file, 630, 650
keyword_add.php files (content management
systems), 631
keyword_delete.php files (content manage-
ment systems), 631
krsort() function, 91ksort() function, 91
L
language constructs
array(), 80die(), 497exit, 497
languages
DDL (Data Definition Languages), 242DML (Data Manipulation Languages), 242
leaf nodes (Web forum tree structure), 753left joins, 250-253Lempel Ziv Welch (LZW), 454length of strings, testing, 117letters, descenders, 466libpdf_php file, copying, 878libraries. See also function libraries
FreeT ype, downloading, 452function, 514, 544ImageMagick, 451mysqli, 271, 278-280
PDFlib
generating certificates, 808-816generating PDF documents, 803-808
PECL (PHP Extension Class Library), 451PHP , 869PHP database interfaces, 280PHP SOAP libraries (Amazon), 827SOAP , 825
LIKE keyword, 247LIMIT clause, SELECT statement, 256links
Add to Cart, 830Checkout, 831Details, 830Web forum tree structure, 752
list archives, viewing (online newsletters),
725-726
list() function, 83-85lists
creating (online newsletters), 731-733databases, 696viewing (online newsletters), 717-725
literal special characters (regular expressions),
124
literals, 25loading
arrays from files, 96-99data, from files, 307extensions, 499-500
LOAD_DATA_INFILE statement, 307load_list_info() function, 724-725local variables, 147, 315LOCK TABLES command, 302LOCK TABLES privilege, 224locking files, 76-77log files, 353logging in
MySQL, 219-220online newsletters, 714-716user authentication, 556-559Warm Mail application (email client), 669-672
How can we make this index more useful? Email us at indexes@samspublishing.com43 6728 index  9/2/04  1:22 PM  Page 919
920 logging out
logging out
MySQL, 227online newsletters, 730user authentication, 560Warm Mail application (email client), 672
logic (code), separating from content, 518logic errors, 530-531logical operators, 36login
anonymous login (FTP), 431FTP servers, 432implementing (online newsletters), 711
login() function, 557, 715-716login.php files, 642
content management systems, 630PHPBookmark application, 544-549Shopping Cart application, 583
logo.gif files (content management systems),
630
logout.php files, 643
content management systems, 630PHPBookmark application, 544Shopping Cart application, 583
logout.php script (authentication), 492-493long style form variable, 22-24lookup functions (networks), 424, 428
gethostbyaddr(), 427gethostbyname(), 425-427getmxrr(), 425parse_url(), 426
lookup.php file, 421-422looping through associative arrays, 83-85loops, 49-50
accessing numerically indexed arrays, 82break statement, 54do..while loops, 53-54for loops, 52-53foreach loops, 52-53OO (object-oriented) development, 186-188while loops, 51-52
lstat() function, 413ltrim() function, 108LZW (Lempel Ziv Welch), 454
M
magic quotes, 113, 495-496, 584magic_quotes_gpc directive, 387magic_quotes_runtime directive, 387
Mail Exchange (MX) records, 427mail() function, 107, 420, 567, 697mailbox (Warm Mail application), viewing
contents of, 680-683
mailing list manager. SeeMLM
mail_fns.php files (Warm Mail application),
661
mail_fns.php function library, get_accounts()
function, 674
main page (Shopping Cart application),
587-592
maintainability, code
breaking up, 513-514code standards, 510commenting, 512directory structures, 514function libraries, 514indenting, 512-513naming conventions, 510-512
make_button.php file, 461-463make_button.php script, generating buttons,
460
management systems. Seecontent 
management systems (CMSs)
many-to-many relationships (databases), 209master servers, database replication, 303-304matching
regular expressions
* symbol, 123+ symbol, 123branching, 124caret symbol (^), 123-124character classes, 122
character sets, 121-122
curly braces ({}), 123finding substrings, 126-127literal special characters, 124replacing substrings, 127slash (\), 124special characters, 124-125splitting strings, 127string anchoring, 123-124subexpressions, 123Web references, 128
substrings
find and replace, 119-120numerical position, 118-11943 6728 index  9/2/04  1:22 PM  Page 920
921 modulus operator
regular expressions, 126-127
strchr() function, 118stristr() function, 118strpos() function, 118-119strrchr() function, 118strrpos() function, 119strstr() function, 118
max() function, 151-152MAX(column) function, 254MaxClients parameter (Apache), 272max_connections parameter, 272medium style form variable, 21-22member.php files (PHPBookmark 
application), 544
members_only.php script (authentication),
492
MEMORY tables, 308MERGE tables, 308message headers (Warm Mail application),
viewing, 686-687
messages. Seeemail
meta tags (HTML), 173metadata, content management systems,
628-629
methods
ASINSearch(), 842bind_param(), 279browseNodeSearch(), 842, 848-849__call(), 184-185Exception class, 193fetchRow(), 283overloading, __call() method, 184-185
parseXML(), 850-851static, implementing, 182-183
microseconds, measuring, 448Microsoft Word
RTF (Rich T ext Format), 786
website, 785
microtime() function, 448MIME mail package, installing, 887MIN(column) function, 254mirroring, RAID (Redundant Array of
Inexpensive Disks), 354
mirroring files, FTP functions, 428-430
checking update times, 432-434closing connections, 435downloads, 434-435logins, 432
remote connections, 431
MIT Distribution Center for PGP website,
389
mktime() function, 441-442MLM (mailing list manager)
actions, 709-710building, 695
files, 698online newsletters, 695
accounts, 711-714, 728administrative functions, 731databases, 696, 700-702diagrams, 697-699email attachments, 697extensions, 749file upload, 696-697list archives, viewing, 725-726lists, 717-725, 731-733logging in, 711, 714-716logging out, 730passwords, 728-730previewing, 741-742requirements, 696script architecture, 702-710sending messages, 743-749solution overview, 697-699subscribing, 726-727unsubscribing, 726-727uploading, 734-741
mlm_fns.php files (MLM application), 699mode variable, 837modeling, real-world objects (Web databases),
209-210
modes
autocommit, 310file modes, 59-60
modification anomalies, avoiding (Web data-
bases), 211
modification dates (scripts), 500modular names, code, 511modules
code, Shopping Cart application, 582mod_auth (Apache Web server), 369mod_auth_mysql, 375-377PHP , running, 868
modulus operator, 31
How can we make this index more useful? Email us at indexes@samspublishing.com43 6728 index  9/2/04  1:22 PM  Page 921
922 mod_auth module (Apache Web server)
mod_auth module (Apache Web server), 369
mod_auth_mysql module, 377
documentation websites, 378installing, 375-376testing, 376
mod_SSL module, configuring, 873Mod_SSL website, 869monitors, MySQL, 218-219moving files, 414-415multidimensional arrays, 79
sorting, 91-93three-dimensional arrays, 88-90two-dimensional arrays, 86-88
multiline comments, 19
multiple files, uploading (online newsletters),
736-741
multiple inheritance, OO (object-oriented)
development, 171
multiple programmers version control
(code), 515
multiplication operator, 31
MX (Mail Exchange) records, 427MyISAM table, 308myisamchk utility, 300, 303
MySQL, 285
access, 217-218adding, IIS (Internet Information Services), 886aggregate functions, 254backing up, 354connection verification, 290continuation symbol, 219creating, 220date and time
converting between PHP and MySQL formats,
444-445
date calculations, 446-448DATE_FORMAT() function, 444-445
MySQL website, 449UNIX_TIMESTAMP() function, 444-445
db table, 288GRANT command, 221-226host table, 289identifiers, 233-234installation
binary installations, 868-871source installations, 868-869Windows, 879-882
join types, 252logging in, 219-220
logging out, 227max_connections parameter, 272mod_auth_mysql module, 377
documentation websites, 378installing, 375-376testing, 376
mysql command, 219
online manual, website, 239passwords, PHP scripts, 388privileges
global privileges, 222GRANT command, 221-226principle of least privilege, 221REVOKE command, 225-226types, 223-225
request verification, 290
resources, 891
results.php script, 267-269
REVOKE command, 225-226runtime errors, 527-529
selecting, 227semicolon (;), 218statements, case-sensitivity, 219syntax, extended, 255tables, creating, 227-229tables_priv table, 289user table, 286users
GRANT command, 222-226REVOKE command, 225-226setting up, 221, 225-227
viewing, 231-232Web database architecture, 266-269
website, 218
ZIP files, 879
mysql command, 219
MySQL monitor, 218-219mysqladmin facility, 233
mysqlhotcopy script, database backup, 302
mysqli library, 271, 278-280
mysqli_connect() function, 272, 528
mysqli_errno() function, 528
mysqli_error() function, 528
mysqli_fetch_assoc() function, 273
mysqli_query() function, 528
mysql_affected_rows() function, 27843 6728 index  9/2/04  1:22 PM  Page 922
923 object-oriented (OO) development
mysql_dump command, database backup, 302
mysql_query() function, 272-273
mysql_select_db() function, 272
my_error_handler() function, 537
N
namespaces, XML, 824
naming conventions, code, 510-512naming functions, 143-144Natural Order String Comparison website,
117
navigating files, 74-75navigating within an array, 100nesting XML elements, 823Netscape website
cookie specification, 481SSL 3.0 Specification, 397
network lookup functions, 424, 428
dns_get_mx(), 427explode(), 427gethostbyaddr(), 427gethostbyname(), 425-427getmxrr(), 425parse_url(), 426
Network News Transfer Protocol (NNTP),
420
networks
connecting, runtime errors, 529-530TCP/IP , security, 339
new operator, 37New York Times website, 358newbooks.txt file, 307newline control sequence (\n), 66newsletters, online, 695
accounts, 711-714, 728administrative functions, 731databases, 696, 700-702diagrams, 697-699email attachments, 697extensions, 749file upload, 696-697list archives, viewing, 725-726lists, 717-725, 731-733logging in, 711, 714-716logging out, 730passwords, 728-730previewing, 741-742requirements, 696
script architecture, 702-710sending messages, 743-749solution overview, 697-699subscribing, 726-727unsubscribing, 726-727uploading, 734-741
new_post.php files, 754, 773-775next() function, 100nl2br() function, 108-109NNTP (Network News Transfer Protocol),
420
nodes
browse nodes (Amazon), 829Web forum tree structure, 752-753
non-identity operator, 85NOT NULL keyword, 229notify_password() function, 564-567NULL data type (variables), 27null values, avoiding (Web databases), 213
number_of_accounts() function, 677
numeric column types
date and time, 236-237floating point data types, 235-236integral data types, 235string, 237-239
numerical position of substrings, finding,
118-119
numerically indexed arrays, 80-82
O
Object data type (variables), 27
object-oriented (OO) development
abstract classes, 184access modifiers, 164-165ad scripts, 158attributes, 158__autoload() function, 185classes, 159
attributes, 162-164converting to strings, 188creating, 160designing, 172-173instantiation, 162
cloning objects, 184constructors, 161destructors, 161
How can we make this index more useful? Email us at indexes@samspublishing.com43 6728 index  9/2/04  1:22 PM  Page 923
924 object-oriented (OO) development
encapsulation, 158
handles, 159inheritance, 160, 166
controlling visibility, 167-168interfaces, implementing, 171-172multiple, 171
overriding, 168-170preventing, 170
interfaces, 158iteration, 186-188method overloading, 184-185operations, 158
calling class operations, 165-166creating, 161
per-class constructs, 182PHP4 versus PHP5, 182polymorphism, 159reflection API, 188-189
static methods, implementing, 182-183type hinting, 183writing code
attributes, 174functions, 174-175meta tags, 173operations, 175Page class, 175-178
ServicesPage class, 180-181TLA Consulting home page, generating, 179
ObjectIterator class, 187-188objects
cloning, 184real-world, modeling (Web databases), 209-210
throwing, throw clause, 194
ODBC (Open Database Connectivity)
functions, 280website, 283
one-to-many relationships (databases), 209one-to-one relationships (databases), 209, 214online brochures (commercial websites)
common pitfalls, 326limitations, 324-327
online catalogs, building (Shopping Cart
application), 580
online editing, content management systems,
627
online newsletters, 695
accounts, 711-714, 728administrative functions, 731databases, setting up, 696, 700-702
diagrams, 697-699email attachments, 697extensions, 749file upload, 696-697list archives, viewing, 725-726lists, viewing, 717-725, 731-733logging in, 711, 714-716logging out, 730passwords, 728-730previewing, 741-742requirements, 696
script architecture, 702-710sending messages, 743-749solution overview, 697-699subscribing, 726-727unsubscribing, 726-727uploading, 734-741
OO (object-oriented) development
abstract classes, 184access modifiers, 164-165ad hoc scripts, 158attributes, 158__autoload() function, 185classes, 159
attributes, 162-164converting to strings, 188creating, 160designing, 172-173instantiation, 162
cloning objects, 184constructors, 161destructors, 161encapsulation, 158handles, 159inheritance, 160, 166
controlling visibility, 167-168interfaces, implementing, 171-172multiple, 171
overriding, 168-170preventing, 170
interfaces, 158iteration, 186-188method overloading, 184-185operations, 158
calling class operations, 165-166creating, 16143 6728 index  9/2/04  1:22 PM  Page 924
925 padding characters
per-class constructs, 182
PHP4 versus PHP5, 182polymorphism, 159reflection API, 188-189
static methods, implementing, 182-183type hinting, 183writing code
attributes, 174functions, 174-175meta tags, 173operations, 175Page class, 175-178
ServicesPage class, 180-181TLA Consulting home page, generating, 179
Open Database Connectivity (ODBC)
functions, 280website, 283
opendir() function, 409opening files
file modes, 59-60fopen() function, 60-62FTP (File Transfer Protocol), 62-63HTTP (Hypertext Transfer Protocol), 62-63potential problems, 63-64
opening tags (XML), 823OpenSSL
setting up, 873website, 869
open_mailbox() function, 681operating systems, database security, 291operations, OO (object-oriented) develop-
ment, 158, 175
calling class operations, 165-166creating, 161
operators, 30
-> operator, 37arithmetic operators, 31-32arrays, 38, 85-86assignment operators, 23, 26
combination assignment operators, 33decrement operators, 33-34increment operators, 33-34reference operator, 34returning values, 32-33
associativity, 40-42bitwise operators, 36comma operator, 37comparison operators, 34-35, 246-247
error suppression operator, 37execution operator, 37-38logical operators, 36new operator, 37precedence, 40-42string concatenation operator, 24-25string operators, 32subqueries, 257ternary operator, 37totaling forms, 39-40type operator, 38unary operators, 31
optimizing code, 518-519optimizing databases, 301-302or operator, 36ORDER BY clause, SELECT statement, 253order forms, HTML, 12-14order.fns.php files (Shopping Cart
application), 584
ordered data, retrieving, 253-254ordering strings, 116-117orders for goods or services (commercial
websites), customer obstacles, 327
compatibility, 330trust, 329unanswered questions, 328user interfaces, 329-330
output, formatting (content management 
systems), 629
outputting images, 458output_fns.php files
MLM application, 699PHPBookmark application, 544Shopping Cart application, 584Warm Mail application, 661
Web forum application, 754
output_fns.php function library, 670overloading methods, __call() method,
184-185
overloading functions, 144
overriding (inheritance), 168-170
owners (scripts), identifying, 500
P
-p switch (mysql command), 219
padding characters, 110
How can we make this index more useful? Email us at indexes@samspublishing.com43 6728 index  9/2/04  1:22 PM  Page 925
926 Page class, OO (object-oriented)
Page class, OO (object-oriented) 
development, 175-179
page variable, 837page.php file, 630, 635-637pages (Web pages)
authentication, protecting multiple pages,
365-366
services, adding, 420-423
parameters, 20
Apache, MaxClients, 272drawing functions, 456extract() function, 103-104function parameters, 144-146
calling functions, 140pass by reference, 149-150pass by value, 149-150
GET, 849max_connections parameter, 272startup, 880$type, 842
parent nodes (Web forum tree structure), 753parseXML() method, 850-851parse_url() function, 426parsing XML (Amazon), 827pass by reference (function parameters),
149-150
pass by value (function parameters), 149-150passing by reference, 102passthru() function, 415passwords, 346-347, 542
database security, 291-292encrypting, 292, 364-365logging in to MySQL, 219-220MySQL, PHP scripts, 388online newsletters, 728-730root, setting, 881-882
storing, 292, 361-364user authentication, 561-568
PATH setting, MySQL installations, 881
paths
absolute, 60file, 410relative, 60
payment module (Shopping Cart 
application), 611-613
payment systems (Shopping Cart 
application), 580-581PDF (Portable Document Format), 783, 788
function libraries, 790generating certificates, 800-802
headers, 816PDFlib, 803-816
personalized documents, formats, paper, 784templates, creating, 789-790website, 787
PDF library website, 869PDF readers, fonts, 806pdf.php files (certification application), 791PDFlib
certificates, generating, 808-816installing, 872PDF documents, generating, 803-808website, 790
pdflib.php files, 791, 808-812pdf_add_outline() function, 805pdf_begin_page() function, 805pdf_close() function, 807pdf_fill() function, 816pdf_rect() function, 814pdf_replace() function, 801pdf_setlinewidth() function, 814pdf_set_info() function, 805pdf_show() function, 807pdf_show_xy() function, 815pdf_stringwidth() function, 815pdf_stroke() function, 814PEAR (PHP Extension and Application
Repository)
databases, 280-283installing, 887-889website, 889
PECL (PHP Extension Class Library), 451,
889
per-class constructs, OO (object-oriented)
development, 182
Perl regular expressions, 121
permissions
database optimization, 301write, files, 388
personalization, user
bookmarks
adding, 568-570deleting, 571-574displaying, 570-57143 6728 index  9/2/04  1:22 PM  Page 926
927 PHP
recommending, 543
storing, 543
defined, 541passwords, 542recommendations, implementing, 574-577
solution, 542-545system requirements, 542usernames, 542
personalized documents
certification project
files, 791-792index.html file, 792-793PDF , 800-802PDFlib, 803-816RTF,796-800
score.php file, 794-796
creating, 783-784extensions, 817formats
ASCII, 784HTML, 785paper, 784PDF , 787-788PostScript, 786-787RTF (Rich Text Format), 786
word processors, 785-786
headers, 816requirements, 788-790
PGP (Pretty Good Privacy), 389PGP Security website, 389Philip and Alex’s Guide to Web Publishing
website, 892
Phorum web forums project, 780PHP
basic authentication (HTTP), 367-368calling functions, 20command line, 502-503configuring, 872constants, 29control structures, 47
alternate syntax, 54-55breaking out of, 54conditionals, 44-49declare, 55loops, 49-54
database interfaces, 280date and time
calendar functions, 448-449checkdate() function, 443
converting between PHP and MySQL formats,
444-445
date calculations, 445-446date() function, 439-442floor() function, 446getdate() function, 442-443microseconds, 448mktime() function, 441-442PHP website, 449
date() function, 19-20development environments, IDE (Integrated
Development Environments), 516
embedding in HTML, 15
comments, 18-19PHP statements, 17-18PHP tags, 16-17whitespace, 18
environment variables, functions, 417-418evaluating strings, 496-497
extensions, loading dynamically, 500extensions directory, copying libpdf_file, 878function names in code, 511functions
dl() function, 500eval() function, 496-497getlastmod() function, 500get_current_user() function, 500get_extension_funcs(), 499get_loaded_extensions() function, 499get_magic_quotes_gpc() function, 496highlight_file(), 501-502ini_get() function, 500-501ini_set() function, 500-501mysql_connect() function, 528
mysqli_errno() function, 528
mysqli_error() function, 528
mysqli_query() function, 528
my_error_handler() function, 537
serialize() function, 497-498set_error_handler() function, 536set_magic_quotes_runtime() function, 496show_source() functions, 501-502unserialize() function, 498variable, 42-44
How can we make this index more useful? Email us at indexes@samspublishing.com43 6728 index  9/2/04  1:22 PM  Page 927
928 PHP
gd documentation, website, 477
highlighting syntax, 501-502images
canvas, creating, 455-456creating, 454-455, 460-463, 468formats, 452generating automatically, 459GIF (Graphics Interchange Format), 453-454identifiers, destroying, 459JPEG (Joint Photographic Experts Group),
452-453
outputting, 458PNG (Portable Network Graphics), 453supporting, 452text, drawing/printing, 456-457, 464-468WBMP (Wireless Bitmap), 453
installation, 12, 873
binary installations, 868source installations, 868-869, 872-875Windows, 884-887
jpeg-6b, downloading, 452language constructs, 497libraries, 869magic quotes, 495-496modular names in code, 511network lookup functions, 424, 428
dns_get_mx(), 427explode(), 427gethostbyaddr(), 427gethostbyname(), 425-427getmxrr(), 425parse_url(), 426
online manual, 78operators, 30
-> operator, 37arithmetic operators, 31-32array operator, 38assignment operators, 26, 32-34associativity, 40-42bitwise operators, 36comma operator, 37comparison operators, 34-35error suppression operator, 37execution operator, 37-38logical operators, 36new operator, 37precedence, 40-42string operators, 32
ternary operator, 37totaling forms, 39-40type operator, 38unary operators, 31
optimizations, 518-519resources, 889-891
running, 868
scripts
debugging variables, 531-533error reporting levels, 533-536errors, 536-539modification dates, 500MySQL passwords, 388owners, identifying, 500programming errors, 523-531terminating execution, 497
serialization, 497-498session control. Seesession control
sessions. Seesessions
statements, 17-18support, testing, 876tags, 16-17, 132variable names in code, 511
variables
form variables, accessing, 21-25identifiers, 26scope, 29-30superglobal, 30types, 27-28user-declared variables, 26values, assigning, 26
writing, file upload, 403-407website, 449, 509, 869
PHP Application Tools website, 891PHP Base Library website, 890PHP Center website, 890PHP Classes Repository website, 890PHP Club website, 890PHP Developer website, 891PHP Developer’s Network Unified Forums
website, 891
PHP Extension and Application Repository
(PEAR)
databases, 280-283installing, 887-888website, 889
PHP Extension Class Library (PECL), 45143 6728 index  9/2/04  1:22 PM  Page 928
929 privilege system
PHP Homepage website, 890
PHP Kitchen website, 891PHP Magazine website, 889PHP Resource website, 890-891PHP SOAP libraries (Amazon), 827PHP:Hypertext Preprocessor website, 104php|architect website, 889php.ini file
auto_append_file, 138-139auto_prepend_file, 138-139directives, editing, 500-501
PHP4 versus PHP5, 182phpautodoc website, 517PHPBookmark application
creating, 541
database schema, 545-546front page, 546-549function libraries, 544
extensions, 578files, 544
PHPBuilder.com website, 890PHPCertifcation.pdf files (certification 
application), 791
PHPCertification.rtf files (certification 
application), 791
PHPCommunity website, 889phpdoc website, 516PHPDocumentor website, 516PHPIndex.com website, 890phpinfo() command, 29, 417, 790PHPMyAdmin.Net website, 890PHPWizard.net website, 890physical security, 355plain text (encryption), 348plus symbol (+)
regular expressions, 123
Web forum articles, 757
PNG (Portable Network Graphics), 453PNG library website, 869pollsetup.sql file, 468polymorphism, OO (object-oriented) 
development, 159
POP (Post Office Protocol), 420POP3 (Post Office Protocol version 3),
657-658
populate.sql files (Shopping Cart 
application), 584Portable Document Format. SeePDF
Portable Network Graphics (PNG), 453
positioning text, buttons, 467POSIX regular expressions. Seeregular
expressions
posix_getgrgid() function, 412posix_getpwuid() function, 412posix_getpwuid() functions, 411Post Office Protocol (POP), 420
Post Office Protocol version 3 (POP3),
657-658
post-decrement operator, 33-34post-increment operator, 33-34posters (Web forum application), 754Postnuke website, 891
PostScript, 786-787
PostScript Type 1 fonts, downloading, 452
power failures, 355pre-decrement operator, 33-34pre-increment operator, 33-34precedence, operators, 40-42prepared statements, 278-280preprocessing script architecture, 702Pretty Good Privacy (PGP), 389pretty() function, 724prev() function, 100previewing online newsletters, 741-742PRIMARY KEY keyword, 229primary keys (databases), 207-208principle of least privilege, 221print() function, 108printf() function, 109-110printing
header bar summaries (Shopping Cart 
application), 604
strings, 108-111text, images, 456-457
privacy policies, 329private access modifier, OO (object-oriented)
development, 168
private key encryption, 349private keys, Gnu Privacy Guard (GPG), 391privilege levels, slaves, 304privilege system, 285
columns_priv table, 289-290db table, 288-289grant table, 290
How can we make this index more useful? Email us at indexes@samspublishing.com43 6728 index  9/2/04  1:22 PM  Page 929
930 privilege system
host table, 288-289
privileges, updating, 290-291tables_priv table, 289-290user table, 286-288
privileges
FILE, 292GRANT, 292MySQL
global privileges, 222GRANT command, 221-226principle of least privilege, 221REVOKE command, 225-226types, 223-225
PROCESS, 292updating, 290-291user, database security, 292-293
PROCESS privilege, 224, 292process.php files (Shopping Cart application),
583
process.php script (Shopping Cart 
application), 611
processing HTML forms, Bob’s Auto Parts
application, 12, 15
Product class, 851-853Product.php files (Tahuayo application), 832progex.php file, 416-417programming errors, 523, 526
logic errors, 530-531runtime errors, 525-530
syntax errors, 524-525
programs
install (Apache), 883running, command line, 502-503
project codes, installing (Amazon), 863properties (files), changing, 414protected access modifier, OO (object-
oriented) development, 165-168
protocol stacks, 383-384protocols. See also SOAP
application layer protocols, 384FTP (File Transfer Protocol)
anonymous login, 431backing up files, 428-435ftp_get() function, 435ftp_mdtm() function, 433ftp_nlist() function, 436ftp_size() function, 436mirroring files, 428-435opening files, 62-63
set_time_limit() function, 436timeouts, avoiding, 435-436uploading files, 435
HTTP (Hypertext Transfer Protocol), 62-63,
384-385
IMAP (Internet Message Access Protocol), 420,
657-658
IP (Internet Protocol), 384NNTP (Network News Transfer Protocol), 420POP (Post Office Protocol), 420POP3 (Post Office Protocol version 3), 657-658RFCs (Requests for Comments), 419-420SMTP (Simple Mail Transfer Protocol), 420,
658
TCP (Transmission Control Protocol), 384Web Services, 824-826
prototypes
code, 517-518functions, 140-141
public access modifier, OO (object-oriented)
development, 165
public keys
encryption, 349-350Gnu Privacy Guard (GPG), 391-392
publish.php files, 631, 653-654publish_story.php files (content management
systems), 631
purchase.php files (Shopping Cart 
application), 583
purchase.php script (Shopping Cart 
application), 606, 611
putenv() function, 417-418PX-PHP Code Exchange website, 890
Q
queries
EXPLAIN statement, 296-300indexes, 301INSERT, 275-278subqueries, 256-258
querying Web databases, 269
adding data, 275-278connections, setting up, 271-272disconnecting from databases, 274input data, 270-271mysql_query() function, 272-273
prepared statements, 278-28043 6728 index  9/2/04  1:22 PM  Page 930
931 remote FTP connections
retrieving results, 273-274
selecting databases, 272
query_select() function, 647quotes, magic quotes, 113, 495-496, 584
R
r+ file mode, 61RAID (Redundant Array of Inexpensive
Disks), 354
range() function, 81RDBMS (relational database management
systems), 78, 241
readdir($dir) function, 409
readers, PDF , fonts, 806
readfile() function, 72
reading files, 59, 69, 411-413
feof() function, 71fgetc() function, 73fgetcsv() function, 71-72fgets() function, 71fgetss() function, 71file() function, 72fopen() function, 70fpassthru() function, 72fread() function, 73readfile() function, 72
runtime errors, 527
reading email,Warm Mail application
mailbox contents, viewing, 680-683message headers, viewing, 686-687messages, 683-686selecting accounts, 677-680
reading from directories, 408-410
real-world objects, modeling (Web databases),
209-210
recommend.php files (PHPBookmark 
application), 544
recommendations
bookmarks, 543implementing, 574-577
recommend_urls() function, 576-577
records
deleting, 262updating, 259
records (tables), 207
recursive functions, 153-155
red, green, and blue (RGB), 456Redundant Array of Inexpensive Disks
(RAID), 354
redundant data, avoiding (Web databases),
210-211
reference operator, 34
reflection API, OO (object-oriented) 
development, 188-189
REGEXP keyword, 247register() function, 554
registering
session variables, 482-483user authentication, 549-556
register_form.php files (PHPBookmark 
application), 544
register_new.php files (PHPBookmark 
application), 544
regular expressions
* symbol, 123+ symbol, 123branching, 124caret symbol (^), 123-124character classes, 122character sets, 121-122curly braces ({}), 123functions, versus string functions, 127Perl, 121
slash (\), 124Smart Form Mail application, 125-126special characters, 124-125splitting strings, 127string anchoring, 123-124subexpressions, 123substrings, 126-127Web references, 128
reinterpreting variables, 44
relational database management systems
(RDBMS), 78, 241
relational databases
benefits, 205keys, 207-208
relationships, 209, 214
schemas, 208tables, 206-207
relationships (databases), 209, 214
relative paths, 60
RELOAD privilege, 224remote FTP connections, 431
How can we make this index more useful? Email us at indexes@samspublishing.com43 6728 index  9/2/04  1:22 PM  Page 931
932 rename() functio
rename() function, 415
reordering arrays, 94-96
repetitive tasks. Seeloops
replacing substrings, 119-120, 127
replication, databases, 303-305
REPLICATION CLIENT privilege, 224REPLICATION SLAVE privilege, 224replication slaves, 304
replying to email,Warm Mail application,
691-692
repository (version control, code), 514
repudiation, 344-345
request verification, MySQL database, 290
Requests for Comments (RFCs), 419-420require() statement, 131
auto_append_file (php.ini file), 138-139auto_prepend_file (php.ini file), 138-139filename extensions, 132PHP tags, 132require_once() statement, 138
website templates, 133-138
require_once() statement, 138
reset() function, 100
reset_password() function, 564-565
resetting passwords, user authentication, 565
resize_image.php files (content management
systems), 630
resource data type (variables), 27
resources
Apache, 891MySQL and SQL, 891PHP , 889-891Web development, 892
REST/XML (Amazon), 849-854restoring databases, 303
result identifier, retrieving query results (Web
databases), 273-274
results.php script, 267-269
retrieve_message() function, 685
return keyword, 150-151
return policies, commercial websites, 329
return statement, 150
returning values, functions, 151-153
returning from functions, 150-151
returning rows, 256
returning values, 32-33, 92reusing code
benefits, 129-130include() statement, 130, 138-139require() statement, 131-132, 138-139
reverse sorts, 91-93
reverse spam, 342
REVOKE command, 225-226rewind() function, 74
rewinddir($dir) function, 410
rewriting code, 509-510
RFC Editor website, 419, 437RFCs (Requests for Comments), 419-420RGB (red, green, and blue), 456Rich Text Format (RTF), 783, 786
generating certificates, 796-798, 800templates, creating, 788
risks for commercial websites, 332-335
rmdir() function, 410-411
rolled-back transactions, 310
root elements (XML), 824
root nodes (Web forum tree structure), 753
root passwords, setting, 881-882
row subqueries, 258
rows
returning, 256
tables, values, 207unmatched, 250-251
RSA, 349rsort() function, 91
RTF (Rich Text Format), 783, 786
generating certificates, 796-798, 800templates, creating, 788
rtf.php files, 791, 798
rtrim() function, 108
running
Apache, 875PHP , 686programs, command line, 502-503
runtime errors, 525
database interaction, 527-529functions that don’t exist, 526-527input data, checking, 530network connections, 529-530reading/writing files, 52743 6728 index  9/2/04  1:22 PM  Page 932
933 searching
S
S-HTTP (Secure Hypertext Transfer
Protocol), 382
safeString() function, 838scalar variables, 79, 103-104schemas
Book-O-Rama application, 217, 228database (PHPBookmark application), 545-549
scope
fields, 287function scope, 147global scope, 147variable scope, 29-30, 146-149
score.php files (certification application), 791score.php files (certification project), 794-796SCP , content management systems, 626screen scraping, 421screening user input, 387screens, editor (content management 
systems), 653-655
script architecture
footers, 702headers, 702online newsletters, 702-710performing actions, 702preprocessing, 702
SCRIPT style (PHP tags), 17scripting engines,Web database architecture,
215
scripts
ad hoc, 158admin.php script (Shopping Cart application),
613, 616
authmain.php (authentication), 487-492breaking out of, 54buttons, calling, 461-463
catalog scripts (Shopping Cart application)
index.php, 587-592show_book.php, 588, 594-595, 618show_cat.php, 588, 592-594
checkout.php script (Shopping Cart 
application), 605-610
edit_book_form.php (Shopping Cart 
application), 618
executing, command line, 502Hello World, PDFlib, 803-808images, drawing, 455insert_book.php, 276-279, 616-617
insert_book_form.php script (Shopping Cart
application), 616
logout.php (authentication), 492-493make_button.php, buttons, generating, 460members_only.php (authentication), 492modification dates, 500mysqlhotcopy, database backup, 302
owners, identifying, 500
PHP , MySQL passwords, 388process.php script (Shopping Cart application),
611
purchase.php script (Shopping Cart 
application), 606, 611
querying Web databases, 269
adding data, 275-278connections, setting up, 271-272disconnecting from databases, 274input data, 270-271mysql_query() function, 272-273
prepared statements, 278-280retrieving results, 273-274selecting databases, 272
results.php, 267-269
show_book.php (Shopping Cart application),
618
show_cart.php script (Shopping Cart 
application), 596-598
adding items to cart, 602-603header bar summary, printing, 604updated carts, saving, 604viewing contents of cart, 599-602
terminating execution, 497Warm Mail application (email client), 663-669
search.php files, 630, 651-652SearchDatabase.com website, 891searching
keywords, content management systems,
650-653
substrings
find and replace, 119-120numerical position, 118-119regular expressions, 126-127strchr() function, 118stristr() function, 118strpos() function, 118-119strrchr() function, 118
How can we make this index more useful? Email us at indexes@samspublishing.com43 6728 index  9/2/04  1:22 PM  Page 933
934 searching
strrpos() function, 119
strstr() function, 118
search_form.php files (content management
systems), 630
Secure Hypertext Transfer Protocol 
(S-HTTP), 382
Secure Sockets Layer (SSL), 340, 382
commercial websites, 329compression, 386handshaking, 384-385protocol stacks, 383-384sending data, 385-386testing, 877-878
secure storage, 387-389secure transactions, 379
Internet, 381-382screening user input, 387Secure Sockets Layer (SSL)
compression, 386handshaking, 384-385protocol stacks, 383-384sending data, 385-386
secure storage, 387-389systems, 382-383user machines, 380-381Web browsers, 380-381
Secure Web servers, 351-353security
authentication, 339, 368-372
access control, implementing, 358-361basic authentication. See basic authenticationcustom, creating, 377digest authentication, 366encrypting passwords, 364-365identifying users, 357-358mod_auth_mysql module, 375-378multiple pages, protecting, 365-366
passwords, 346-347storing passwords, 361-364websites, 378
Certifying Authorities (CAs), 351commercial websites
auditing, 353authentication, 346-347backing up data, 354Certificate Signing Request (CSR), 352-353compromises, 345crackers, 333digital certificates, 351
digital signatures, 350-351encryption, 347-350firewalls, 353-354hash function, 350importance of stored information, 338log files, 353passwords, 346-347physical security, 355Secure Web servers, 352-353security policies, creating, 345-346threats, 338-345
commerical websites, 338databases, 291-293encryption, 348, 390
Data Encryption Standard (DES), 349GPG (Gnu Privacy Guard), 389-397PGP (Pretty Good Privacy), 389RSA (Rivest-Shamir-Adleman), 349
file upload, 403, 407Secure Socket Layer (SSL), 340TCP/IP networks, 339transactions, 379
Internet, 381-382screening user input, 387Secure Sockets Layer (SSL), 383-386secure storage, 387-389systems, 382-383user machines, 380-381Web browsers, 380-381
SELECT clause, 255SELECT privilege, 223SELECT statement, 244
LIMIT clause, 256ORDER BY clause, 253
select types, EXPLAIN statement, 298selecting
databases in MySQL, 227Web databases, 272
select_fns.php file, 630, 647semicolon (;), MySQL, 218, 272send() function, 743-746sending messages, online newsletters, 743-749sending email,Warm Mail application
forwarding/replying, 691-692new messages, 688-690
send_message() function, 689-69043 6728 index  9/2/04  1:22 PM  Page 934
935 shopping carts
sensitive data, storing, 387-389
serialization, 497-498serialize() function, 497-498, 858serializing session variables, 484servers. See also Web servers
Apache. SeeApache Web server
authentication, 347, 373-374database servers,Web database architecture, 215IIS (Internet Information Server), 373-374master, database replication, 303-304secure storage, 387-389Secure Web servers, 351-353
services, adding to Web pages, 420-423services (commercial websites). See also Web
Services
adding value to, 331providing, 330-331taking orders for, customer obstacles, 327
compatibility, 330trust, 329unanswered questions, 328user interfaces, 329-330
ServicesPage class, OO (object-oriented)
development, 180-181
session control
authentication
authmain.php script, 487-492logout.php script, 492-493members_only.php script, 492
cookies, setting, 480-481session IDs, 479-482
session IDs, 479-482session variables, Shopping Cart application,
580, 595
sessions
configuring, 486-487creating (Amazon), 835destroying, 483example session, 484-486starting, 482variables, 480-484
session_get_cookie_params() function, 481session_register() function, 482-483session_start() function, 482-485session_unregister() function, 483set cardinality (arrays), 102SET type, 239setcookie() function, 480-481
setting up
Book-O-Rama, 241databases of lists, 696
settype() function, 42-43set_error_handler() function, 536set_magic_quotes_runtime() function, 496set_time_limit() function, 436SGML (Standard Generalized Markup
Language), 820
shal1() function, 364-365shell script-style comments, 19Shopping Cart application, 579
administration interface, 581, 615, 619-622
administration menu (admin.php), 613, 616edit_book_form.php script, 618insert_book.php script, 616-617insert_book_form.php script, 616show_book.php script, 618
administrator view, 581-582book_sc database, 585-587catalog scripts
index.php, 587-592show_book.php, 588, 594-595, 618show_cat.php, 588, 592-594
code modules, 582database, 587extensions, 622files, 583-584online catalogs, building, 580payment module, 611-613payment systems, 580-581session variables, 580, 595shopping cart module
adding items, 602-603checkout.php script, 605, 608-610
header bar summary, printing, 604purchase.php script, 606, 611show_cart.php script, 596-599updates, saving, 604viewing contents of, 599-602
solution components, 580solution overview, 581-584tracking user’s purchases, 580user view, 581-582
shopping carts, 579, 826, 858-862
How can we make this index more useful? Email us at indexes@samspublishing.com43 6728 index  9/2/04  1:22 PM  Page 935
936 Short style (PHP tags)
Short style (PHP tags), 17
short style form variable, 21-22SHOW COLUMNS statement, 294SHOW command, 231-232, 293-295SHOW DATABASES privilege, 224SHOW GRANTS statement, 294SHOW TABLES statement, 294showBrowseNode() function, 839-840showCart() function, 862showCategories() function, 839-840showpoll.php file, 470-476ShowSmallCart() function, 838showSummary() function, 841, 854show_book.php files (Shopping Cart 
application), 583
show_book.php script (Shopping Cart 
application), 588, 594-595, 618
show_cart.php files (Shopping Cart 
application), 583
show_cart.php script (Shopping Cart 
application), 596-598
adding items to cart, 602-603header bar summary, printing, 604updated carts, saving, 604viewing contents of cart, 599-602
show_cat.php files (Shopping Cart 
application), 583
show_cat.php script (Shopping Cart 
application), 588, 592-594
show_source() function, 501-502shuffle() function, 94-95SHUTDOWN privilege, 224signature.png files (certification application),
791
Simple Mail Transfer Protocol (SMTP), 420,
658
Simple Object Access Protocol. SeeSOAP
simplegraph.php file, 454-455sin() function, 816single-line comments, 19sites, brochureware, 324. See also commercial
websites; websites
sizeof() function, 102slash (\), 124, 307Slashdot website, 358, 751slaves, 303-305Smart Form Mail application
creating, 105-107regular expressions, 125-126SMTP (Simple Mail Transfer Protocol), 420,
658
SOAP (Simple Object Access Protocol)
Amazon, 854-856Amazon connections, 819-820envelopes, 825example, 824instances, 855libraries, 825PHP SOAP libraries (Amazon), 827
software
errors (security threats), 343-344personalized documents, 788-790
software engineering, 508software errors (commercial websites), 334sort() function, 90sorting arrays, 90-93source installations, 868-869, 872-875SourceForge website, 517, 891spam, reverse spam, 342special characters, 124-125special privileges, 225specifications, CGI, 418speed, queries, 301split() function, 127splitting strings
explode() function, 114regular expressions, 127
strtok() function, 114-115substr() function, 115-116
sprintf() function, 109SQL (Structured Query Language)
ANSI standard website, 263Book-O-Rama database, 241-243commands, CREATE TABLE command,
227-229
databases
defined, 241-242dropping, 262joins, 252-253records, 259, 262rows unmatched, 250-251, 256subqueries, 256-257tables, 249-252, 259-262two-table joins, 248-249
databases, data
aggregating, 254-255grouping, 254-25543 6728 index  9/2/04  1:22 PM  Page 936
937 strategies, commercial websites
inserting, 242-244
retrieving, 244-248, 253-254
DDL (Data Definition Languages), 242DML (Data Manipulation Languages), 242MySQL, 252-254RDBMS (relational database management sys-
tems), 241
resources, 891
SQL Course website, 891SSL (Secure Sockets Layer), 340, 867
commercial websites, 329compression, 386handshaking, 384-385protocol stacks, 383-384sending data, 385-386testing, 877-878
Standard Generalized Markup Language. See
SGML
starting sessions, 482startup parameters, 880stat() function, 413statements
ALTER TABLE, 259-261break statement, 54continue statement, 54DELETE, 262DESCRIBE, syntax, 296describe user;, 286DROP DATABASE, 262DROP TABLE, 262echo statements, 24-25else statements, 45-46elseif statements, 46-47exit statement, 54EXPLAIN, 296-300GRANT, 285, 294if statements, 44-45include() statement, 130, 138-139include_once(), 138INSERT, 242LOAD_DATA_INFILE, 307MySQL, case-sensitivity, 219PHP statements, 17-18prepared, 278-280require() statement, 131
auto_append_file (php.ini file), 138-139auto_prepend_file (php.ini file), 138-139filename extensions, 132
PHP tags, 132require_once() statement, 138website templates, 133-138
require_once(), 138
return statement, 150
SELECT, 244
LIMIT clause, 256ORDER BY clause, 253
SHOW , 293-295SHOW COLUMNS, 294SHOW GRANTS, 294SHOW TABLES, 294switch statements, 47-49
UPDATE, 259
static keyword, 182static methods, implementing, 182-183STD(column) function, 254STDDEV(column) function, 254storage, files, 627storage engines, 308-312stored functions, declaring, 314-315stored procedures
control structures, 315-319cursors, 315-319declaring, 312-313local variables, 315stored functions, declaring, 314-315
store_account() function, 712-714store_account_settings() function, 674-675store_list() function, 732-733store_new_post() function, 778-780store_new_post.php files (Web forum 
application), 754
stories, adding (content management 
systems), 640-650
storing
bookmarks, 543passwords, 292passwords (authentication), 361-364redundant data (Web databases), 210-211
sensitive data, secure storage, 387-389session IDs, cookies, 481-482strings, 112-113
story.php files, 630, 644-646story_submit.php files, 630, 647-649strategies, commercial websites, 335
How can we make this index more useful? Email us at indexes@samspublishing.com43 6728 index  9/2/04  1:22 PM  Page 937
938 strcasecmp() function
strcasecmp() function, 116
strchr() function, 118strcmp() function, 116string case functions, 111-112string column types, 237-239string concatenation operator, 24-25String data type (variables), 27string operators, 32strings
anchoring, 123-124classes, converting to, 188comparing
length of strings, testing, 117strcasecmp() function, 116strcmp() function, 116strnatcmp() function, 117
evaluating, 496-497
formatting, 107
case, changing, 111-112conversion specifications, 109-111HTML formatting, 108-109ltrim() function, 108nl2br() function, 108-109printing, 108-111rtrim() function, 108
storage, 112-113trim() function, 108trimming whitespace, 108
functions, versus regular expression functions,
127
joining, 114length, testing, 117ordering, 116-117printing, 108-111specifying, 25splitting
explode() function, 114regular expressions, 127strtok() function, 114-115substr() function, 115-116
substrings
accessing, substr() function, 115-116finding, 118-119, 126-127numerical position of, finding, 118-119replacing, 119-120, 127
tokens, 114
stripslashes() function, 113, 270, 293strip_tags() function, 387
stristr() function, 118strlen() function, 117strnatcmp() function, 117Stronghold website, 352strpos() function, 118-119strrchr() function, 118strrpos() function, 119strstr() function, 118, 570strtok() function, 114-115strtolower() function, 111strtoupper() function, 111Structured Query Language. SeeSQL
structures, directory, 514str_replace() function, 120, 799subclasses, OO (object-oriented) 
development, 160, 168-170
subexpressions, 123subqueries, 256-258subscribe() function, 727subscribers, databases, 696subscribing, online newsletters, 726-727substr() function, 115-116substrings
accessing, substr() function, 115-116finding
numerical position, 118-119regular expressions, 126-127strchr() function, 118stristr() function, 118strpos() function, 118-119strrchr() function, 118strrpos() function, 119strstr() function, 118
replacing, 119-120, 127
substr_replace() function, 120subtraction operator, 31SUM(column) function, 254Summary website, 326SUPER privilege, 224superclasses, OO (object-oriented) 
development, 160, 168-170
superglobal arrays, 22superglobal variables, 30switch statements, 47-49
switches, 219
syntactic sugar, 50943 6728 index  9/2/04  1:22 PM  Page 938
939 text
syntax, 524
ALTER TABLE statement, 260-261control structures, 54-55DESCRIBE statement, 296extended, 255heredoc, 25highlighting, 501-502SHOW statement, 295
syntax errors, 524-525system capacity limits (commercial websites),
335
system requirements, user personalization,
542
system() function, 415systems
operating, database security, 291secure transactions, 382-383
T
t file mode, 61t1lib, downloading, 452tab control sequence (\t), 66table types. Seestorage engines
tables, 206, 214
aliases, 251-252altering, 259-261BDB, 308Book-O-Rama database, SQL code, 243Cartesian product, 248columns, 207
atomic column values, 212DESCRIBE statement, 296types, 230-231
columns_priv, 286, 289-290creating in MySQL, 227-228
indexes, creating, 232-233keywords, 229table types, 233viewing tables, 231-232
data, retrieving, 247-248databases, 301-302db, 286-289dropping, 262equi-joins, 249grant, 286, 290
host, 286-289InnoDB, 308-312joins, 248-253
keys, 207-208, 213
left joins, 250-251MEMORY , 308MERGE, 308MyISAM, 308rows
returning, 256unmatched, 250-251values, 207
schemas, 208scope fields, 287tables_priv, 286, 289-290temporary, subqueries, 258two-table joins, 248-249user, 286-288
tables_priv table, 286, 289-290tags
closing/opening (XML), 823HTML tags, meta tags, 173<img>, 639PHP tags, 16-17, 132
Tahuayo application (Amazon), 828-833
TCP (Transmission Control Protocol), 339,
384
templates
PDF , creating, 789-790RTF (Rich T ext Format), creating, 788
websites, require() statement, 133-138
temporary tables, subqueries, 258terminating execution (scripts), 497ternary operator, 37testing
code, 520GPG (Gnu Privacy Guard), 392-397mod_auth_mysql module, 376PHP
installations, 886-887support, 876
SSL (Secure Sockets Layer), 877-878string length, 117variable status, 43-44
text
anti-aliasing, 457baseline, 466buttons, colors/fonts, 460
ciphertext (encryption), 348
How can we make this index more useful? Email us at indexes@samspublishing.com43 6728 index  9/2/04  1:22 PM  Page 939
940 text
fitting onto buttons, 464-467
images
creating, 460-463, 468drawing or printing on, 456-457
plain text (encryption), 348positioning, 467writing onto buttons, 467-468
text files, 57-58
checking existence of, 74checking size of, 74closing, 67-69deleting, 74formats, 66-67limitations, 77locking, 76-77navigating, 74-75opening
file modes, 59-60fopen() function, 60-62FTP (File Transfer Protocol), 62-63HTTP (Hypertext Transfer Protocol), 62-63potential problems, 63-64
reading, 59, 69
feof() function, 71fgetc() function, 73fgetcsv() function, 71-72fgets() function, 71fgetss() function, 71file() function, 72fopen() function, 70fpassthru() function, 72fread() function, 73readfile() function, 72
writing, 59writing to, 65-67
TEXT type, 238-239Thawte, 344, 351threaded discussion group application, 751
article list
collapsing threads, 759, 762displaying articles, 762-763expanding threads, 759-761individual articles, viewing, 770-772new articles, adding, 773-780plus symbols, 757treenode class, 763-770
database design, 754-757extensions, 780
files, 754posters, 754solutions, 752-754tree structure, 752-753tree_node class, 753
threaded discussion groups, 751threads, 751
collapsing, 759, 762expanding, 759-763
threats to security, commercial websites, 338
DDoS (Distributed Denial of Service), 342DoS (Denial of Service), 342-343exposure of confidential data, 339-340loss of data, 340-341modification of data, 341-342repudiation, 344-345
software errors, 343-344
three-dimensional arrays, 88-90throw clause, 194throwing exceptions, 191throwing objects, throw clause, 194tiers (applications), 216TIFF library website, 790, 869time and date
converting between PHP and MySQL formats,
444-445
MySQL
date calculations, 446-448DATE_FORMAT() function, 444-445
MySQL website, 449UNIX_TIMESTAMP() function, 444-445
PHP
calendar functions, 448-449checkdate() function, 443
date calculations, 445-446date() function, 439-442floor() function, 446getdate() function, 442-443microseconds, 448mktime() function, 441-442PHP website, 449
timeouts, avoiding, 435-436timestamps, Unix, 441-442TLS (Transport Layer Security), 386tokens (strings), 114topbar.php file, 832, 83843 6728 index  9/2/04  1:22 PM  Page 940
941 updating
__toString() function, 188
totaling forms with operators, 39-40touch() function, 414traceroute command (UNIX), 340tracking user’s purchases (Shopping Cart
application), 580
Transmission Control Protocol (TCP), 384
transactions
ACID compliance, 309
autocommit mode, 310committed, 310defined, 309InnoDB tables, 310-311rolled back, 310
secure transactions, 379
Internet, 381-382screening user input, 387Secure Sockets Layer (SSL), 383-386secure storage, 387-389systems, 382-383user machines, 380-381Web browsers, 380-381
transfer modes, FTP , 434transferring data, database replication,
303-305
Transport Layer Security (TLS), 386
tree structure (Web forum application),
752-753
treenode class (Web forum application),
763-770
treenode_class.php files (Web forum 
application), 754
tree_node class, 753triggering errors, 536trim() function, 108, 270Tripwire website, 342
troubleshooting
errors, function calling, 64file uploads, 407-408opening files, 63-64
TrueType fonts, 460
try blocks (exception handling), 191tuples (tables), 207tutorials
exception handling, 201graphs, 477
two-dimensional arrays, 86-88two-table joins, 248-249type codes, conversion specification type
codes, 110-111
type hinting, 183type operator, 38
U
-u switch (mysql command), 219uasort() function, 93ucfirst() function, 111ucwords() function, 112uksort() function, 93umask() function, 410unary operators, 31undefined functions, calling, 141-142uninterruptible power supply (UPS), 355union operator, 85UNISYS, LZW (Lempel Ziv Welch), 454UNISYS website, 454Unix
binary installations, 868-871httpd.conf file, 875-876libpdf_php file, copying, 878PHP , testing, 876source installations, 868-869, 872-875SSL, testing, 877-878timestamps, date() function, 441-442traceroute command, 340
Unix Epoch (GMT), 441UNIX_TIMESTAMP() function, 444-445unlink() function, 74, 414unmatched rows, 250-251unpublish_story.php files (content manage-
ment systems), 631
unserialize() function, 498, 858unset() function, 43UNSIGNED keyword, 229unsubscribe() function, 727unsubscribing online newsletters, 726-727update anomalies (Web databases), avoiding,
211
UPDATE privilege, 223UPDATE statement, 259update times, FTP servers, 432-434updates, Shopping Cart application, 604updating
privileges, 290-291records, 259
How can we make this index more useful? Email us at indexes@samspublishing.com43 6728 index  9/2/04  1:22 PM  Page 941
942 upload.php files (MLM application)
upload.php files (MLM application), 699
uploading
files
displaying, 406FTP (File Transfer Protocol), 435HTML, 401-403PHP , writing, 403-407security, 403, 407troubleshooting, 407-408
online newsletters, 734-741
UPS (uninterruptible power supply), 331, 355urlencode() function, 366, 423url_fns.php files (PHPBookmark application),
544
USAGE privilege, 225user authentication
input data, validating, 552-553logging in, 556-559logging out, 560passwords, 561-568registering, 549-556
user input, screening, 387user interfaces, commercial websites, 329-330user personalization
bookmarks
adding, 568-570deleting, 571-574displaying, 570-571recommending, 543storing, 543
defined, 541passwords, 542recommendations, implementing, 574-577
solutions, 542-545system requirements, 542usernames, 542
user privileges, database security, 292-293user table, 286-288user view (Shopping Cart application),
581-582
user-declared variables, 26user-defined exceptions, 194-196user-defined sorts, multidimensional arrays,
91-93
usernames, 542users
administrative users, privileges, 224-225authentication, 368, 370-372
access control, implementing, 358, 360-361basic authentication. See basic authenticationdigest authentication, 366encrypting passwords, 364-365identifying users, 357-358mod_auth_mysql module, 375-378multiple pages, protecting, 365-366
storing passwords, 361-364websites, 378
MySQL, setting up, 221privileges
global privileges, 222GRANT command, 221-226principle of least privilege, 221REVOKE command, 225-226types, 223-225
secure transactions, 380-381setting up in MySQL, 221-227
user_auth_fns.php files
content management systems, 630MLM application, 699PHPBookmark application, 544Shopping Cart application, 584Warm Mail application, 661
user_auth_fns.php library, check_auth_user()
function, 671
Using mkdir() function, 410usort() function, 92utilityfunctions.php file, 833, 838
V
valid email() function, 553
validating user authentication input data,
552-553
values
array elements, 80assigning to variables, 26atomic column values (databases), 212columns, EXPLAIN statement, 299-300default, database optimization, 302null values, avoiding (Web databases), 213
returning, 92
assignment operator, 32-33functions, 151-153
tables, 20743 6728 index  9/2/04  1:22 PM  Page 942
943 Web, database security
variables, 25
arrays, 79
applying functions to elements, 101-102associative arrays, 83converting to scalar variables, 103-104counting elements, 102elements, 80functions, passing by reference, 102indexes, 80loading from files, 96-99multidimensional arrays, 86-93
navigating within an array, 100numerically indexed arrays, accessing contents,
81-82
operators, 85-86reordering, 94-96set cardinality, 102sorting, 90-91
browseNode, 837debugging, 531-533environment, functions, 417-418form variables, accessing, 21-25functions, 42-44, 144global variables, 147identifiers, 26local, stored procedures, 315local variables, 147mode, 837names, code, 511page, 837scalar variables, 79, 103-104scope, 29-30, 146-149session variables, 480
deregistering, 483implementing, 483registering, 482-483serializing, 484Shopping Cart application, 595
superglobal, 30types, 27-28user_declared variables, 26values, assigning, 26
verifications, MySQL database, 290
VeriSign, 344, 351
version control (code), 514-515viewing
databases in MySQL, 231-232individual articles (Web forum application),
770-772
list archives (online newsletters), 725-726lists (online newsletters), 717-725message headers (Warm Mail application),
686-687
tables in MySQL, 231-232
views, File Details, 413view_post.php files (Web forum application),
754
visibility, controlling, 167-168vote.html file, 469
W
w file mode, 61
w+ file mode, 61W3C (World Wide Web Consortium) website,
437, 820
Warm Mail application (email client)
accounts
creating, 674-676deleting, 676-677modifying, 676selecting, 677-680setting up, 672-674
database, setting up, 661-662email, deleting, 687-688extensions, 692-693files, 660-661IMAP function library, 658-659interface, 659-660logging in, 669-672logging out, 672reading mail
mailbox contents, viewing, 680-683message headers, viewing, 686-687messages, 683-686selecting accounts, 677-680
script architecture, 663-669sending mail
forwarding/replying, 691-692new messages, 688-690
solutions, 658-661
WBMP (Wireless Bitmap), 453Web,database security, 293
How can we make this index more useful? Email us at indexes@samspublishing.com43 6728 index  9/2/04  1:22 PM  Page 943
944 Web application projects
Web application projects
content, separating from logic, 518development environment, 516documentation, 516-517logic, separating from content, 518optimizations, 518-519planning, 508-509prototypes, 517-518rewriting code, 509-510
running, 508-509
software engineering, 508testing code, 520version control, 514-515
writing maintainable code, 510-514
Web browsers
authentication, 347secure transactions, 380-381Web database architecture, 214
Web databases
architecture, 214-216, 266-269designing
anomalies, avoiding, 211atomic column values, 212keys, creating, 213null values, avoiding, 213questions, formulating, 213real-world objects, modeling, 209-210redundant data, avoiding, 210-211table types, 214update anomalies, avoiding, 211
querying, 269
adding data, 275-278connections, setting up, 271-272disconnecting from databases, 274input data, 270-271mysql_query() function, 272-273
prepared statements, 278-280retrieving results, 273-274selecting databases, 272
selecting in MySQL, 227tables
column types, 230-231, 234-239creating, 227-229indexes, creating, 232-233keywords, 229types, 233viewing, 231-232transaction process, 215
users, setting up, 226-227viewing in MySQL, 231-232
Web development, Philip and Alex’s Guide to
Web Publishing website, 892
Web forum application, 751
article list
collapsing threads, 759, 762displaying articles, 762-763expanding threads, 759-761individual articles, viewing, 770-772new articles, adding, 773-780plus symbols, 757treenode class, 763-770
database design, 754-757extensions, 780files, 754posters, 754solutions, 752-754tree structure, 752-753tree_node class, 753
Web forums
Phorum, 780threads, 751
Web pages
authentication, protecting multiple pages,
365-366
services, adding, 420-423
Web servers
Apache. SeeApache Web server
authentication, 347commands, functions, 415-417file upload, PHP , writing, 403-407IIS (Internet Information Server), 373-374secure storage, 387-389Secure Web servers, 351-353Web database architecture, 214
Web Services. See also SOAP
adding to Web pages, 420-423defined, 824interfaces (Amazon), 826-827protocols, 824-826
Web Services Description Language (WSDL),
825-826
websites. See also commercial websites
Adobe Acrobat, 789Adobe, FDF , 80143 6728 index  9/2/04  1:22 PM  Page 944
945 websites
AMANDA (Advanced Maryland Automated
Network Disk Archiver), 354
Analog, 326ANSI, 263Apache, 869Apache Software, 891Apache T oday, 891Apache Week, 891authentication documentation, 378Boutell, 477BUGTRAQ archives, 406
Burn All Gifs, 454CGI specification, 418ClibPDF library, 790Codewalkers, 891CVS (Concurrent Versions System), 515, 521Devshed, 477, 890EPA, 355Equifax Secure, 351Evil Walrus, 891Extreme Programming, 521FastT emplate, 518FDF , 801Fedex, 331
FishCartSQL, 622FPDF function library, 790gd documentation, 477Ghostscript, 787GNU Privacy Guard, 390Google, 824HotScripts.com, 890IMAP c client, 869International PGP Home Page, 389JPEG (Joint Photographic Experts Group), 453JPEG library, 790, 869Microsoft Word, 785MIT Distribution Center for PGP , 389Mod_SSL, 869MySQL, 218, 306, 449, 869, 891MySQL online manual, 239MySQL Web, 263Natural Order String Comparison, 117Netscape, 397, 481New Y ork Times, 358ODBC (Open Database Connectivity), 283OpenSSL, 869PDF , 787PDF library, 790, 869
PEAR (PHP Extension and Application
Repository), 889
PECL, 889PGP Security, 389Philip and Alex’s Guide to Web Publishing, 892PHP , 449, 509, 869PHP Application T ools, 891PHP Base Library, 890PHP Center, 890PHP Classes Repository, 890PHP Club, 890PHP Developer, 891PHP Developer’s Network Unified Forums,
891
PHP Homepage, 890PHP Kitchen, 891PHP Magazine, 889PHP online manual, 78PHP Resource, 890-891PHP:Hypertext Preprocessor, 104php|architect, 889phpautodoc, 517PHPBuilder.com, 890PHPCommunity, 889phpdoc, 516PHPDocumentor, 516PHPIndex.com, 890PHPMyAdmin.Net, 890PHPWizard.net, 890PNG (Portable Network Graphics), 453PNG library, 869Postnuke, 891
PX-PHP Code Exchange, 890RFC Editor, 419, 437SearchDatabase.com, 891Slashdot, 358, 751SourceForge, 517, 891SQL Course, 891Stronghold, 352Summary, 326templates, require() statement, 133-138Thawte, 344, 351TIFF library, 790, 869Tripwire, 342
UNISYS, 454UPS, 331
How can we make this index more useful? Email us at indexes@samspublishing.com43 6728 index  9/2/04  1:22 PM  Page 945
946 websites
VeriSign, 344, 351
W3C, 820Webalizer, 326
WeberDev.com, 890
WebMonkey.com, 890
World Wide Web Consortium (W3C), 437
Zend, 128, 477, 519, 889zlib library, 869
Webalizer website, 326
WeberDev.com website, 890
WebMonkey.com website, 890
WHERE clause, 246-248while loops, 51-52whitespace, 18, 108wildcard character (%), 290Windows
Apache, installing, 882-884MySQL, installing, 879-882PHP , installing, 884-887
Wireless Bitmap (WBMP), 453
wizards, InstallShield, 879word processor formats, 785-786
World Wide Web Consortium (W3C) website,
437
write permissions, files, 388writer.php file, 630, 640-642writing
code, classes, 179
attributes, 174functions, 174-175meta tags, 173operations, 175Page class, 175-178
ServicesPage class, 180-181TLA Consulting home page, generating, 179
content management systems, 626files, 59, 527maintainable code
breaking up, 513-514code standards, 510commenting, 512directory structures, 514function libraries, 514indenting, 512-513naming conventions, 510-512
PHP , file uploads, 403-407text, buttons, 467-468writing to files, 65-67
WSDL (Web Services Description Language),
825-826
X-Y
x file mode, 61
x+ file mode, 61XML (Extensible Markup Language)
Amazon connections, 819-820defined, 820, 822-824DTD (Document T ype Definition), 823elements, 823example, 820-822namespaces, 824parsing (Amazon), 827REST/XML (Amazon), 849-854root elements, 824
SGML (Standard Generalized Markup
Language), 820
tags (closing and opening), 823
XML style (PHP tags), 17
Z
Zend Optimizer, 519Zend website, 128, 477, 519ZIP files, 879zlib library website, 86943 6728 index  9/2/04  1:22 PM  Page 946
43 6728 index  9/2/04  1:22 PM  Page 947
43 6728 index  9/2/04  1:22 PM  Page 948
What’s on the CD?
The book’s companion CD-ROM contains full versions of PHP , MySQL,Apache, several
graphics libraries, files containing the code listings in the book, and the entire book in PDF
format.
Windows
Appendix A,“Installing PHP and MySQL,” describes setting up Apache, MySQL, and 
PHP on a Windows platform.We have included Windows versions of these products on theCD-ROM.
Apache 1.3.31 is located in the 
Software\Apache\Windows\Binary directory.
Double-click on apache_1.3.31-win32-x86-no_src.exe to launch the Apache installer.
Both the current production version of MySQL (4.0— mysql-4.0.20c-win.zip ) and the
alpha version (5.0— mysql-5.0.0a-alpha-win.zip ) are located in the
Software\MySQL\Windows\Binary directory. Unzip and double-click on SETUP.EXE to start
the MySQL installation program.Then follow the instructions in Appendix A to prepare yourMySQL installation so that you can follow along with this book.
PHP5 is located in the 
Software\PHP\Binary directory. Follow the instructions in
Appendix A to configure PHP for your particular system.
A collection of PECL modules for PHP5 is available for your use in the Libraries
directory.
Linux/Unix
Many Linux distributions and some Unix workstations are already configured with Apache,MySQL, and PHP .They may not be the latest versions described in this book, however.Appendix A also describes setting up Apache, MySQL, and PHP on a Linux or Unix work-station if you need to install them. Source code for Apache, MySQL, and PHP and binaryinstallers for MySQL on Linux are included on the CD-ROM.
The source code for Apache 1.3.31 is available in 
Software/Apache/Unix/Source .If you
have GNU taravailable, use httpd-1.3.31.tar.gz .Otherwise, use httpd-1.3.31.tar.Z .
Binary installers for MySQL Max4.0 and 5.0 for Linux are located in
Software\MySQL\Unix\Binary .If your Linux system uses the RPM manager to install 
software, use MySQL-Max-4.0.20-0.i386.rpm or MySQL-Max-5.0.0-0.i386.rpm to install
the server portion of MySQL and use MySQL-client-4.0.20-0.i386.rpm or MySQL-
client-5.0.0-0.i386.rpm to install the client portion of MySQL. If your Linux system
does not use the RPM manager to install software, use mysql-max-4.0.20-pc-linux-
i686.tar.gz or mysql-standard-5.0.0-alpha-pc-linux-i686.tar.gz to install the client
and server portions of MySQL.
The source code for MySQL 4.0.20 for Unix is located at mysql-4.0.20.tar.gz ,and for
5.0, it is located at mysql-5.0.0-alpha.tar.gz .Solaris users should download GNU tarto
extract these files because of a bug within the Solaris version of the tarprogram.
The source code for PHP 5.0 is included in Software/PHP/Unix/Source/ .
A collection of PECL modules for PHP5 is available for your use in the Libraries 
directory.44 6728 whatsoncd  9/2/04  1:18 PM  Page 949
License Agreement
By opening this package, you are agreeing to be bound by the following agreement:
You may not copy or redistribute the entire media as a whole. Copying and 
redistribution of individual software programs on the media is governed by terms set 
by individual copyright holders.
The installer and code from the author(s) are copyrighted by the publisher and
author(s). Individual programs and other items on the media are copyrighted by theirvarious authors or other copyright holders. Some of the programs included with this
product may be governed by an Open Source license, which allows redistribution; seethe license information for each product for more information.
Other programs are included on the media by special permission from their authors.This software is provided as is without warranty of any kind, either expressed or
implied, including but not limited to the implied warranties of merchantability and fitness for a particular purpose. Neither the publisher nor its dealers or distributorsassume any liability for any alleged or actual damages arising from the use of this program. (Some states do not allow for the exclusion of implied warranties, so the exclusion may not apply to you.)45 6728 license agreement  9/2/04  1:18 PM  Page 950
