
Laravel 4 Docs (Updated for 4.1.x)
Up-to-date Offline Documentation
MNIslamShihan
Thisbookisforsaleat http://leanpub.com/l4-offline-doc
Thisversionwaspublishedon2014-01-30
ThisisaLeanpubbook.LeanpubempowersauthorsandpublisherswiththeLeanPublishing
process.LeanPublishing istheactofpublishinganin-progressebookusinglightweighttoolsand
manyiterationstogetreaderfeedback,pivotuntilyouhavetherightbookandbuildtractiononce
youdo.
Thisworkislicensedundera CreativeCommonsAttribution-NonCommercial-ShareAlike3.0
UnportedLicense
Tweet This Book!
PleasehelpMNIslamShihanbyspreadingthewordaboutthisbookon Twitter!
Thesuggestedtweetforthisbookis:
@laravelphpIjustboughtofflineversionofLaravelDocsfrom@leanpubwhichiscompletelyfree
&insyncwithlatestofficialdocs
Thesuggestedhashtagforthisbookis #laravel.
Findoutwhatotherpeoplearesayingaboutthebookbyclickingonthislinktosearchforthis
hashtagonTwitter:
https://twitter.com/search?q=#laravel
Taylor Otwell along with entire Laravel community
Contents
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1
WhereToStart . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1
LaravelPhilosophy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1
AdditionalResources . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2
DevelopmentTeam . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2
Laravel Quickstart . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3
Installation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3
Routing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4
CreatingAView . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4
CreatingAMigration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6
EloquentORM . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7
DisplayingData . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8
Release Notes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9
Laravel4.1{#releases-laravel-4.1} . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9
Upgrade Guide . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12
UpgradingTo4.2From4.1{#upgrade-upgrade-4.2} . . . . . . . . . . . . . . . . . . . . . . 12
UpgradingTo4.1From4.0{#upgrade-upgrade-4.1} . . . . . . . . . . . . . . . . . . . . . . 12
Installation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15
InstallComposer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15
InstallLaravel . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15
ServerRequirements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16
Configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16
PrettyURLs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17
Configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18
EnvironmentConfiguration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19
MaintenanceMode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21
Request Lifecycle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23
Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23
CONTENTS
RequestLifecycle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23
StartFiles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24
ApplicationEvents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25
Routing. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26
BasicRouting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26
RouteParameters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28
RouteFilters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30
NamedRoutes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33
RouteGroups . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 34
Sub-DomainRouting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35
RoutePrefixing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35
RouteModelBinding . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 36
Throwing404Errors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37
RoutingToControllers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38
Requests & Input . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39
BasicInput . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39
Cookies . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40
OldInput . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41
Files. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42
RequestInformation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 44
Views & Responses . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48
BasicResponses . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48
Redirects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 49
Views. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51
ViewComposers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53
SpecialResponses . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 55
ResponseMacros . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56
Controllers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 57
BasicControllers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 57
ControllerFilters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59
RESTfulControllers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61
ResourceControllers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 62
HandlingMissingMethods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 63
Errors & Logging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 65
ErrorDetail . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 65
HandlingErrors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 65
HTTPExceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 67
Handling404Errors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 67
Logging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 67
CONTENTS
Security. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 69
Configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 69
StoringPasswords . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 69
AuthenticatingUsers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 70
ManuallyLoggingInUsers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 73
ProtectingRoutes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 73
HTTPBasicAuthentication . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74
PasswordReminders&Reset . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 76
Encryption . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 78
Cache. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80
Configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80
CacheUsage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80
Increments&Decrements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83
CacheTags . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83
DatabaseCache . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 85
Extending The Framework . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 86
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 86
Managers&Factories . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 86
WhereToExtend . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87
Cache. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87
Session. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 89
Authentication . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91
IoCBasedExtension . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 92
RequestExtension . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 94
Events. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 96
BasicUsage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 96
WildcardListeners . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97
UsingClassesAsListeners . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 98
QueuedEvents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99
EventSubscribers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 100
Facades. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102
Explanation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102
PracticalUsage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 103
CreatingFacades . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104
MockingFacades . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 105
FacadeClassReference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 105
Forms & HTML . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 108
OpeningAForm . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 108
CONTENTS
CSRFProtection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 109
FormModelBinding . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 110
Labels. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111
Text,TextArea,Password&HiddenFields . . . . . . . . . . . . . . . . . . . . . . . . . . 111
CheckboxesandRadioButtons . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 112
FileInput . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 112
Drop-DownLists . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 113
Buttons . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114
CustomMacros . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114
GeneratingURLs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115
Helper Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 116
Arrays. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 116
Paths. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 121
Strings. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 122
URLs. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 126
Miscellaneous . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 128
IoC Container . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 130
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 130
BasicUsage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 130
WhereToRegisterBindings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 131
AutomaticResolution . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 132
PracticalUsage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 133
ServiceProviders . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 134
ContainerEvents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 135
Localization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 137
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 137
LanguageFiles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 137
BasicUsage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 138
Pluralization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 139
Validation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 140
OverridingPackageLanguageFiles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 140
Mail. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 141
Configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 141
BasicUsage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 141
EmbeddingInlineAttachments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 143
QueueingMail . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 143
Mail&LocalDevelopment . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 144
Package Development . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 146
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 146
CONTENTS
CreatingAPackage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 147
PackageStructure . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 147
ServiceProviders . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 148
PackageConventions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 149
DevelopmentWorkflow . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 150
PackageRouting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 150
PackageConfiguration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 151
PackageViews . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 152
PackageMigrations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 153
PackageAssets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 154
PublishingPackages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 154
Pagination . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 156
Configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 156
Usage. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 156
AppendingToPaginationLinks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 158
ConvertingToJSON . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 159
Queues. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 160
Configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 160
BasicUsage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 160
QueueingClosures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 164
RunningTheQueueListener . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 165
PushQueues . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 166
FailedJobs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 167
Security. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 170
Configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 170
StoringPasswords . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 170
AuthenticatingUsers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 171
ManuallyLoggingInUsers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 174
ProtectingRoutes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 174
HTTPBasicAuthentication . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 175
PasswordReminders&Reset . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 177
Encryption . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 179
Session. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 181
Configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 181
SessionUsage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 181
FlashData . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 183
DatabaseSessions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 184
SessionDrivers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 184
SSH. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 186
CONTENTS
Configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 186
BasicUsage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 186
Tasks. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 187
SFTPUploads . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 188
TailingRemoteLogs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 188
Templates . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 189
ControllerLayouts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 189
BladeTemplating . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 189
OtherBladeControlStructures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 191
Unit Testing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 195
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 195
Defining&RunningTests . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 195
TestEnvironment . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 196
CallingRoutesFromTests . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 196
MockingFacades . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 198
FrameworkAssertions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 199
HelperMethods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 201
RefreshingTheApplication . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 201
Validation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 202
BasicUsage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 202
WorkingWithErrorMessages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 204
ErrorMessages&Views . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 206
AvailableValidationRules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 207
ConditionallyAddingRules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 213
CustomErrorMessages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 214
CustomValidationRules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 216
Basic Database Usage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 218
Configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 218
Read/WriteConnections . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 218
RunningQueries . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 219
DatabaseTransactions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 220
AccessingConnections . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 221
QueryLogging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 222
Query Builder . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 224
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 224
Selects. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 224
Joins. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 228
AdvancedWheres . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 229
Aggregates . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 231
CONTENTS
RawExpressions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 231
Inserts. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 232
Updates . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 233
Deletes. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 233
Unions. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 234
PessimisticLocking . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 234
CachingQueries . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 235
Eloquent ORM . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 236
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 236
BasicUsage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 236
MassAssignment . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 240
Insert,Update,Delete . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 241
SoftDeleting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 244
Timestamps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 246
QueryScopes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 247
Relationships . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 249
QueryingRelations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 257
EagerLoading . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 259
InsertingRelatedModels . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 262
TouchingParentTimestamps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 264
WorkingWithPivotTables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 265
Collections . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 267
Accessors&Mutators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 269
DateMutators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 270
ModelEvents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 271
ModelObservers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 272
ConvertingToArrays/JSON . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 273
Schema Builder . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 276
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 276
Creating&DroppingTables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 276
AddingColumns . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 277
RenamingColumns . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 278
DroppingColumns . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 279
CheckingExistence . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 279
AddingIndexes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 280
ForeignKeys . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 281
DroppingIndexes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 281
StorageEngines . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 282
Migrations & Seeding . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 283
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 283
CONTENTS
CreatingMigrations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 283
RunningMigrations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 284
RollingBackMigrations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 284
DatabaseSeeding . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 285
Redis. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 288
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 288
Configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 288
Usage. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 289
Pipelining . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 290
Artisan CLI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 291
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 291
Usage. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 291
Artisan Development . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 293
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 293
BuildingACommand . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 293
RegisteringCommands . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 297
CallingOtherCommands . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 298
Introduction
•WhereToStart
•LaravelPhilosophy
•AdditionalResources
•DevelopmentTeam
Where To Start
Learninganewframeworkcanbedaunting,butit’salsoexciting.Tosmoothyourtransition,we’ve
attemptedtocreateveryclear,concisedocumentationforLaravel.Herearesomerecommendations
forwhattoreadfirst:
•Installation andConfiguration
•Routing
•Requests&Input
•Views&Responses
•Controllers
After reading through these documents, you should have a good grasp on basic request / response
handlinginLaravel.Next,youmaywishtoreadabout configuringyourdatabase ,thefluentquery
builder,andtheEloquentORM .Or,youmaywishtoreadabout authenticationandsecurity soyou
canstartsigningpeopleintoyourapplication.
Laravel Philosophy
Laravel is a web application framework with expressive, elegant syntax. We believe development
mustbeanenjoyable,creativeexperiencetobetrulyfulfilling.Laravelattemptstotakethepainout
ofdevelopmentbyeasingcommontasksusedinthemajorityofwebprojects,suchasauthentication,
routing,sessions,andcaching.
Laravelaimstomakethedevelopmentprocessapleasingoneforthedeveloperwithoutsacrificing
application functionality. Happy developers make the best code. To this end, we’ve attempted to
combine the very best of what we have seen in other web frameworks, including frameworks
implementedinotherlanguages,suchasRubyonRails,ASP.NETMVC,andSinatra.
Laravel is accessible, yet powerful, providing powerful tools needed for large, robust applications.
A superb inversion of control container, expressive migration system, and tightly integrated unit
testingsupportgiveyouthetoolsyouneedtobuildanyapplicationwithwhichyouaretasked.
Introduction 2
Additional Resources
OneofthebestwaystolearnLaravelistoreadthroughtheentiretyofitsdocumentation.Thisguide
detailsallaspectsoftheframeworkandhowtoapplythemtoyourapplication.
Inadditiontothisguide,youmaywishtocheckoutsome Laravelbooks ¹.Thesecommunitywritten
booksserveasagoodsupplementalresourceforlearningabouttheframework:
•CodeBright ²byDayleRees
•LaravelTestingDecoded ³byJeffreyWay
•Laravel:FromApprenticeToArtisan ⁴byTaylorOtwell
•ImplementingLaravel ⁵byChrisFidao
•GettingStuffDoneWithLaravel4 ⁶byChuckHeintzelman
•Laravel4Cookbook ⁷byChristopherPitt
•LaravelinAction ⁸byMaksSurguy
Development Team
Laravelwascreatedby TaylorOtwell ⁹,whocontinuestoleaddevelopmentoftheframework.Other
prominent community members and contributors include Dayle Rees ¹⁰,Shawn McCool ¹¹,Jeffrey
Way¹²,JasonLewis ¹³,BenCorlett ¹⁴,FranzLiedke ¹⁵,DriesVints ¹⁶,MiorMuhammadZaki ¹⁷,andPhil
Sturgeon¹⁸.
¹http://wiki.laravel.io/Books
²https://leanpub.com/codebright
³https://leanpub.com/laravel-testing-decoded
⁴https://leanpub.com/laravel
⁵https://leanpub.com/implementinglaravel
⁶https://leanpub.com/gettingstuffdonelaravel
⁷https://leanpub.com/laravel4cookbook
⁸http://www.manning.com/surguy/
⁹https://github.com/taylorotwell
¹⁰https://github.com/daylerees
¹¹https://github.com/ShawnMcCool
¹²https://github.com/JeffreyWay
¹³https://github.com/jasonlewis
¹⁴https://github.com/bencorlett
¹⁵https://github.com/franzliedke
¹⁶https://github.com/driesvints
¹⁷https://github.com/crynobone
¹⁸https://github.com/philsturgeon
Laravel Quickstart
•Installation
•Routing
•CreatingAView
•CreatingAMigration
•EloquentORM
•DisplayingData
Installation
The Laravel framework utilizes Composer ¹⁹for installation and dependency management. If you
haven’talready,startby installingComposer ²⁰.
NowyoucaninstallLaravelbyissuingthefollowingcommandfromyourterminal:
..composer create -project laravel /laravel your -project -name --prefer -dist
ThiscommandwilldownloadandinstallafreshcopyofLaravelinanew your-project-name folder
withinyourcurrentdirectory.
If you prefer, you can alternatively download a copy of the Laravel repository from Github ²¹
manually. Next run the composer install command in the root of your manually created project
directory.Thiscommandwilldownloadandinstalltheframework’sdependencies.
Permissions
AfterinstallingLaravel,youmayneedtograntthewebserverwritepermissionstothe app/storage
directories.Seethe Installation documentationformoredetailsonconfiguration.
¹⁹http://getcomposer.org
²⁰http://getcomposer.org/doc/00-intro.md
²¹https://github.com/laravel/laravel/archive/master.zip
LaravelQuickstart 4
Directory Structure
After installing the framework, take a glance around the project to familiarize yourself with the
directorystructure.The appdirectorycontainsfolderssuchas views,controllers ,and models.Most
ofyourapplication’scodewillresidesomewhereinthisdirectory.Youmayalsowishtoexplorethe
app/config directoryandtheconfigurationoptionsthatareavailabletoyou.
Routing
To get started, let’s create our first route. In Laravel, the simplest route is a route to a Closure. Pop
openthe app/routes.php fileandaddthefollowingroutetothebottomofthefile:
..Route ::get('users' ,function ()
{
return 'Users!' ;
});
Now, if you hit the /usersroute in your web browser, you should see Users!displayed as the
response.Great!You’vejustcreatedyourfirstroute.
Routescanalsobeattachedtocontrollerclasses.Forexample:
..Route ::get('users' ,'UserController@getIndex' );
Thisrouteinformstheframeworkthatrequeststothe /usersrouteshouldcallthe getIndexmethod
on the UserController class. For more information on controller routing, check out the controller
documentation .
Creating A View
Next, we’ll create a simple view to display our user data. Views live in the app/views directory
and contain the HTML of your application. We’re going to place two new views in this directory:
layout.blade.php andusers.blade.php .First,let’screateour layout.blade.php file:
LaravelQuickstart 5
..<html >
<body >
<h1>Laravel Quickstart </h1>
@yield( 'content' )
</body >
</html >
Next,we’llcreateour users.blade.php view:
..@extends ('layout' )
@section( 'content' )
Users !
@stop
Some of this syntax probably looks quite strange to you. That’s because we’re using Laravel’s
templatingsystem:Blade.Bladeisveryfast,becauseitissimplyahandfulofregularexpressionsthat
arerunagainstyourtemplatestocompilethemtopurePHP.Bladeprovidespowerfulfunctionality
liketemplateinheritance,aswellassomesyntaxsugarontypicalPHPcontrolstructuressuchas if
andfor.Checkoutthe Bladedocumentation formoredetails.
Nowthatwehaveourviews,let’sreturnitfromour /usersroute.Insteadofreturning Users!from
theroute,returntheviewinstead:
..Route ::get('users' ,function ()
{
return View ::make ('users' );
});
Wonderful! Now you have setup a simple view that extends a layout. Next, let’s start working on
ourdatabaselayer.
LaravelQuickstart 6
Creating A Migration
To create a table to hold our data, we’ll use the Laravel migration system. Migrations let you
expressively define modifications to your database, and easily share them with the rest of your
team.
First,let’sconfigureadatabaseconnection.Youmayconfigureallofyourdatabaseconnectionsfrom
theapp/config/database.php file. By default, Laravel is configured to use MySQL, and you will
needtosupplyconnectioncredentialswithinthedatabaseconfigurationfile.Ifyouwish,youmay
changethe driveroptionto sqliteanditwillusetheSQLitedatabaseincludedinthe app/database
directory.
Next, to create the migration, we’ll use the Artisan CLI . From the root of your project, run the
followingfromyourterminal:
..php artisan migrate :make create_users_table
Next, find the generated migration file in the app/database/migrations folder. This file contains
a class with two methods: upand down. In the upmethod, you should make the desired changes to
yourdatabasetables,andinthe downmethodyousimplyreversethem.
Let’sdefineamigrationthatlookslikethis:
..public function up()
{
Schema ::create ('users' ,function ($table )
{
$table ->increments ('id' );
$table ->string ('email' )->unique ();
$table ->string ('name' );
$table ->timestamps ();
});
}
public function down ()
{
Schema ::drop ('users' );
}
LaravelQuickstart 7
Next, we can run our migrations from our terminal using the migratecommand. Simply execute
thiscommandfromtherootofyourproject:
..php artisan migrate
If youwish to rollbacka migration, youmay issue the migrate:rollback command.Nowthat we
haveadatabasetable,let’sstartpullingsomedata!
Eloquent ORM
Laravel ships with a superb ORM: Eloquent. If you have used the Ruby on Rails framework, you
willfindEloquentfamiliar,asitfollowstheActiveRecordORMstyleofdatabaseinteraction.
First,let’sdefineamodel.AnEloquentmodelcanbeusedtoqueryanassociateddatabasetable,as
wellasrepresentagivenrowwithinthattable.Don’tworry,itwillallmakesensesoon!Modelsare
typicallystoredinthe app/models directory.Let’sdefinea User.phpmodelinthatdirectorylikeso:
..class User extends Eloquent {}
NotethatwedonothavetotellEloquentwhichtabletouse.Eloquenthasavarietyofconventions,
oneofwhichistousethepluralformofthemodelnameasthemodel’sdatabasetable.Convenient!
Usingyourpreferreddatabaseadministrationtool,insertafewrowsintoyour userstable,andwe’ll
useEloquenttoretrievethemandpassthemtoourview.
Nowlet’smodifyour /usersroutetolooklikethis:
..Route ::get('users' ,function ()
{
$users =User ::all();
return View ::make ('users' )->with ('users' ,$users );
});
LaravelQuickstart 8
Let’swalkthroughthisroute.First,the allmethodonthe Usermodelwillretrievealloftherows
in the userstable. Next, we’re passing these records to the view via the withmethod. The with
methodacceptsakeyandavalue,andisusedtomakeapieceofdataavailabletoaview.
Awesome.Nowwe’rereadytodisplaytheusersinourview!
Displaying Data
Nowthatwehavemadethe usersavailabletoourview.Wecandisplaythemlikeso:
..@extends ('layout' )
@section( 'content' )
@foreach ($users as$user )
<p>{{$user ->name }}</p>
@endforeach
@stop
You may be wondering where to find our echostatements. When using Blade, you may echo data
bysurroundingitwithdoublecurlybraces.It’sacinch.Now,youshouldbeabletohitthe /users
routeandseethenamesofyourusersdisplayedintheresponse.
This is just the beginning. In this tutorial, you’ve seen the very basics of Laravel, but there are so
many more exciting things to learn. Keep reading through the documentation and dig deeper into
thepowerfulfeaturesavailabletoyouin EloquentandBlade.Or,maybeyou’remoreinterestedin
QueuesandUnit Testing . Then again, maybe you want to flex your architecture muscles with the
IoCContainer .Thechoiceisyours!
Release Notes
•Laravel4.1
Laravel 4.1 {#releases-laravel-4.1}
Full Change List
The full change list for this release by running the php artisan changes command from a
4.1 installation, or by viewing the change file on Github ²². These notes only cover the major
enhancementsandchangesfortherelease.
New SSH Component
An entirely new SSHcomponent has been introduced with this release. This feature allows you
to easily SSH into remote servers and run commands. To learn more, consult the SSH component
documentation .
The new php artisan tail command utilizes the new SSH component. For more information,
consultthe tailcommanddocumentation ²³.
Boris In Tinker
The php artisan tinker command now utilizes the Boris REPL ²⁴if your system supports it. The
readline and pcntlPHP extensions must be installed to use this feature. If you do not have these
extensions,theshellfrom4.0willbeused.
Eloquent Improvements
Anew hasManyThrough relationshiphasbeenaddedtoEloquent.Tolearnhowtouseit,consultthe
Eloquentdocumentation .
Anew whereHasmethodhasalsobeenintroducedtoallow retrievingmodelsbasedonrelationship
constraints .
²²https://github.com/laravel/framework/blob/4.1/src/Illuminate/Foundation/changes.json
²³http://laravel.com/docs/ssh#tailing-remote-logs
²⁴https://github.com/d11wtq/boris
ReleaseNotes 10
Database Read / Write Connections
Automatic handling of separate read / write connections is nowavailable throughoutthe database
layer,includingthequerybuilderandEloquent.Formoreinformation,consult thedocumentation .
Queue Priority
Queue priorities are now supported by passing a comma-delimited list to the queue:listen
command.
Failed Queue Job Handling
The queue facilities now include automatic handling of failed jobs when using the new --tries
switch on queue:listen . More information on handling failed jobs can be found in the queue
documentation .
Cache Tags
Cache“sections”havebeensupersededby“tags”.Cachetagsallowyoutoassignmultiple“tags”to
acacheitem,andflushallitemsassignedtoasingletag.Moreinformationonusingcachetagsmay
befoundinthe cachedocumentation .
Flexible Password Reminders
The password reminder engine has been changed to provide greater developer flexibility when
validating passwords, flashing status messages to the session, etc. For more information on using
theenhancedpasswordreminderengine, consultthedocumentation .
Improved Routing Engine
Laravel 4.1 features a totally re-written routing layer. The API is the same; however, registering
routes is a full 100% faster compared to 4.0. The entire engine has been greatly simplified, and the
dependencyonSymfonyRoutinghasbeenminimizedtothecompilingofrouteexpressions.
Improved Session Engine
With this release, we’re also introducing an entirely new session engine. Similar to the routing
improvements, the new session layer is leaner and faster. We are no longer using Symfony’s (and
thereforePHP’s)sessionhandlingfacilites,andareusingacustomsolutionthatissimplerandeasier
tomaintain.
ReleaseNotes 11
Doctrine DBAL
Ifyouareusingthe renameColumn functioninyourmigrations,youwillneedtoaddthe doctrine/dbal
dependencytoyour composer.json file.ThispackageisnolongerincludedinLaravelbydefault.
Upgrade Guide
•UpgradingTo4.2From4.1
•UpgradingTo4.1From4.0
Upgrading To 4.2 From 4.1 {#upgrade-upgrade-4.2}
PHP 5.4+
Laravel4.2requiresPHP5.4.0orgreater.
View / Pagination Environment Renamed
Ifyouaredirectlyreferencingthe Illuminate\View\Environment classor Illuminate\Pagination\Environment
class,updateyourcodetoreference Illuminate\View\Factory andIlluminate\Pagination\Factory
instead.Thesetwoclasseshavebeenrenamedtobetterreflecttheirfunction.
Upgrading To 4.1 From 4.0 {#upgrade-upgrade-4.1}
Upgrading Your Composer Dependency
To upgrade your application to Laravel 4.1, change your laravel/framework version to 4.1.*in
your composer.json file.
Replacing Files
Replaceyour public/index.php filewiththisfreshcopyfromtherepository ²⁵.
Replaceyour artisanfilewiththisfreshcopyfromtherepository ²⁶.
²⁵https://github.com/laravel/laravel/blob/master/public/index.php
²⁶https://github.com/laravel/laravel/blob/master/artisan
UpgradeGuide 13
Adding Configuration Files & Options
Update your aliasesand providers arrays in your app/config/app.php configuration file. The
updatedvaluesforthesearrayscanbefound inthisfile ²⁷.Besuretoaddyourcustomandpackage
serviceproviders/aliasesbacktothearrays.
Addthenew app/config/remote.php filefromtherepository ²⁸.
Add the new expire_on_close configuration option to your app/config/session.php file. The
defaultvalueshouldbe false.
Addthenew failedconfigurationsectiontoyour app/config/queue.php file.Herearethedefault
valuesforthesection:
..'failed' =>array (
'database' =>'mysql' ,'table' =>'failed_jobs' ,
),
(Optional) Update the pagination configuration option in your app/config/view.php file to
pagination::slider-3 .
Controller Updates
Ifapp/controllers/BaseController.php hasa usestatementatthetop,change use Illuminate\Routing\Controllers\Controller;
touse Illuminate\Routing\Controller; .
Password Reminders Updates
Password reminders have been overhauled for greater flexibility. You may examine the new stub
controller by running the php artisan auth:reminders-controller Artisan command. You may
alsobrowsethe updateddocumentation andupdateyourapplicationaccordingly.
Updateyour app/lang/en/reminders.php languagefiletomatch thisupdatedfile ²⁹.
Environment Detection Updates
Forsecurityreasons,URLdomainsmaynolongerbeusedtodetectyourapplicationenvironment.
Thesevaluesareeasilyspoofableandallowattackerstomodifytheenvironmentforarequest.You
shouldconvertyourenvironmentdetectiontousemachinehostnames( hostnamecommandonMac
&Ubuntu).
²⁷https://github.com/laravel/laravel/blob/master/app/config/app.php
²⁸https://github.com/laravel/laravel/blob/master/app/config/remote.php
²⁹https://github.com/laravel/laravel/blob/master/app/lang/en/reminders.php
UpgradeGuide 14
Simpler Log Files
Laravel now generates a single log file: app/storage/logs/laravel.log . However, you may still
configurethisbehaviorinyour app/start/global.php file.
Removing Redirect Trailing Slash
In your bootstrap/start.php file, remove the call to $app->redirectIfTrailingSlash() . This
method is no longer needed as this functionality is now handled by the .htaccess file included
withtheframework.
Next,replaceyourApache .htaccess filewiththisnewone ³⁰thathandlestrailingslashes.
Current Route Access
Thecurrentrouteisnowaccessedvia Route::current() insteadof Route::getCurrentRoute() .
Composer Update
Onceyouhavecompletedthechangesabove,youcanrunthe composer update functiontoupdate
your core application files! If you receive class load errors, try running the updatecommand with
the--no-scripts optionenabledlikeso: composer update --no-scripts .
³⁰https://github.com/laravel/laravel/blob/master/public/.htaccess
Installation
•InstallComposer
•InstallLaravel
•ServerRequirements
•Configuration
•PrettyURLs
Install Composer
Laravelutilizes Composer ³¹tomanageitsdependencies.First,downloadacopyofthe composer.phar .
OnceyouhavethePHARarchive,youcaneitherkeepitinyourlocalprojectdirectoryormoveto
usr/local/bin touseitgloballyonyoursystem.OnWindows,youcanusetheComposer Windows
installer³².
Install Laravel
Via Laravel Installer
First, download the Laravel installer PHAR archive ³³. For convenience, rename the file to laravel
and move it to /usr/local/bin . Once installed, the simple laravel new command will create a
freshLaravelinstallationinthedirectoryyouspecify.Forinstance, laravel new blog wouldcreate
adirectorynamed blogcontainingafreshLaravelinstallationwithalldependenciesinstalled.This
methodofinstallationismuchfasterthaninstallingviaComposer.
Via Composer Create-Project
YoumayalsoinstallLaravelbyissuingtheComposer create-project commandinyourterminal:
..composer create -project laravel /laravel --prefer -dist
³¹http://getcomposer.org
³²https://getcomposer.org/Composer-Setup.exe
³³http://laravel.com/laravel.phar
Installation 16
Via Download
Once Composer is installed, download the latest version ³⁴of the Laravel framework and extract
its contents into a directory on your server. Next, in the root of your Laravel application, run the
php composer.phar install (orcomposer install ) command to install all of the framework’s
dependencies. This process requires Git to be installed on the server to successfully complete the
installation.
If you want to update the Laravel framework, you may issue the php composer.phar update
command.
Server Requirements
TheLaravelframeworkhasafewsystemrequirements:
•PHP>=5.3.7
•MCryptPHPExtension
AsofPHP5.5,someOSdistributionsmayrequireyoutomanuallyinstallthePHPJSONextension.
WhenusingUbuntu,thiscanbedonevia apt-get install php5-json .
Configuration
Laravel needs almost no configuration out of the box. You are free to get started developing!
However,youmaywishtoreviewthe app/config/app.php fileanditsdocumentation.Itcontains
several options such as timezone and localethat you may wish to change according to your
application.
Permissions
Laravelmayrequireonesetofpermissionstobeconfigured:folderswithinapp/storagerequirewrite
accessbythewebserver.
Paths
Several of the framework directory paths are configurable. To change the location of these
directories,checkoutthe bootstrap/paths.php file.
³⁴https://github.com/laravel/laravel/archive/master.zip
Installation 17
Pretty URLs
Theframeworkshipswitha public/.htaccess filethatisusedtoallowURLswithout index.php .
IfyouuseApachetoserveyourLaravelapplication,besuretoenablethe mod_rewrite module.
If the .htaccess file that ships with Laravel does not work with your Apache installation, try this
one:
..Options +FollowSymLinks
RewriteEngine On
RewriteCond %{REQUEST_FILENAME} !-d
RewriteCond %{REQUEST_FILENAME} !-f
RewriteRule ^index .php [L]
Configuration
•Introduction
•EnvironmentConfiguration
•MaintenanceMode
Introduction
AlloftheconfigurationfilesfortheLaravelframeworkarestoredinthe app/config directory.Each
option in every file is documented, so feel free to look through the files and get familiar with the
optionsavailabletoyou.
Sometimesyoumayneedtoaccessconfigurationvaluesatrun-time.Youmaydosousingthe Config
class:
Accessing A Configuration Value
..Config ::get('app.timezone' );
Youmayalsospecifyadefaultvaluetoreturniftheconfigurationoptiondoesnotexist:
..$timezone =Config ::get('app.timezone' ,'UTC' );
Notice that “dot” style syntax may be used to access values in the various files. You may also set
configurationvaluesatrun-time:
Setting A Configuration Value
Configuration 19
..Config ::set('database.default' ,'sqlite' );
Configuration values that are set at run-time are only set for the current request, and will not be
carriedovertosubsequentrequests.
Environment Configuration
It is often helpful to have different configuration values based on the environment the application
isrunningin.Forexample,youmaywishtouseadifferentcachedriveronyourlocaldevelopment
machine than on the production server. It is easy to accomplish this using environment based
configuration.
Simply create a folder within the configdirectory that matches your environment name, such as
local. Next, create the configuration files you wish to override and specify the options for that
environment.Forexample,tooverridethecachedriverforthelocalenvironment,youwouldcreate
acache.php filein app/config/local withthefollowingcontent:
..<?php
return array (
'driver' =>'file' ,
);
Note:Donotuse‘testing’asanenvironmentname.Thisisreservedforunittesting.
Notice that you do not have to specify everyoption that is in the base configuration file, but only
the options you wish to override. The environment configuration files will “cascade” over the base
files.
Next, we need to instruct the framework how to determine which environment it is running
in. The default environment is always production . However, you may setup other environments
within the bootstrap/start.php file at the root of your installation. In this file you will find an
$app->detectEnvironment call. The array passed to this method is used to determine the current
environment.Youmayaddotherenvironmentsandmachinenamestothearrayasneeded.
Configuration 20
..<?php
$env =$app ->detectEnvironment (array (
'local' =>array ('your-machine-name' ),
));
In this example, ‘local’ is the name of the environment and ‘your-machine-name’ is the hostname
ofyourserver.OnLinuxandMac,youmaydetermineyourhostnameusingthe hostnameterminal
command.
Ifyouneedmoreflexibleenvironmentdetection,youmaypassa Closuretothe detectEnvironment
method,allowingyoutoimplementenvironmentdetectionhoweveryouwish:
..$env =$app ->detectEnvironment (function ()
{
return $_SERVER ['MY_LARAVEL_ENV' ];
});
Youmayaccessthecurrentapplicationenvironmentviathe environment method:
Accessing The Current Application Environment
..$environment =App::environment ();
You may also pass arguments to the environment method to check if the environment matches a
givenvalue:
Configuration 21
..if(App ::environment ('local' ))
{
// The environment is local
}
if(App ::environment ('local' ,'staging' ))
{
// The environment is either local OR staging...
}
Maintenance Mode
When your application is in maintenance mode, a custom view will be displayed for all routes
into your application. This makes it easy to “disable” your application while it is updating or
when you are performing maintenance. A call to the App::down method is already present in
your app/start/global.php file. The response from this method will be sent to users when your
applicationisinmaintenancemode.
Toenablemaintenancemode,simplyexecutethe downArtisancommand:
..php artisan down
Todisablemaintenancemode,usethe upcommand:
..php artisan up
To show a custom view when your application is in maintenance mode, you may add something
likethefollowingtoyourapplication’s app/start/global.php file:
Configuration 22
..App::down (function ()
{
return Response ::view ('maintenance' ,array (), 503);
});
If the Closure passed to the downmethod returns NULL, maintenace mode will be ignored for that
request.
Maintenance Mode & Queues
While your application is in maintenance mode, no queue jobs will be handled. The jobs will
continuetobehandledasnormaloncetheapplicationisoutofmaintenancemode.
Request Lifecycle
•Overview
•RequestLifecycle
•StartFiles
•ApplicationEvents
Overview
Whenusinganytoolinthe“realworld”,youfeelmoreconfidenceifyouunderstandhowthattool
works.Applicationdevelopmentisnodifferent.Whenyouunderstandhowyourdevelopmenttools
function,youfeelmorecomfortableandconfidentusingthem.Thegoalofthisdocumentistogive
you a good, high-level overview of how the Laravel framework “works”. By getting to know the
overall framework better, everything feels less “magical” and you will be more confident building
your applications. In addition to a high-level overview of the request lifecycle, we’ll cover “start”
filesandapplicationevents.
Ifyoudon’tunderstandallofthetermsrightaway,don’tloseheart!Justtrytogetabasicgraspof
whatisgoingon,andyourknowledgewillgrowasyouexploreothersectionsofthedocumentation.
Request Lifecycle
All requests into your application are directed through the public/index.php script. When using
Apache,the .htaccess filethatshipswithLaravelhandlesthepassingofallrequeststo index.php .
Fromhere,Laravelbeginstheprocessofhandlingtherequestsandreturningaresponsetotheclient.
GettingageneralideafortheLaravelbootstrapprocesswillbeuseful,sowe’llcoverthatnow!
By far, the most important concept to grasp when learning about Laravel’s bootstrap process is
Service Providers . You can find a list of service providers by opening your app/config/app.php
configurationfileandfindingthe providers array.Theseprovidersserveastheprimarybootstrap-
ping mechanism for Laravel. But, before we dig into service providers, let’s go back to index.php .
After a request enters your index.php file, the bootstrap/start.php file will be loaded. This file
createsthenewLaravel Application object,whichalsoservesasan IoCcontainer .
Aftercreatingthe Application object,afewprojectpathswillbesetand environmentdetection will
be performed. Then, an internal Laravel bootstrap script will be called. This file lives deep within
theLaravelsource,andsetsafewmoresettingsbasedonyourconfigurationfiles,suchastimezone,
errorreporting,etc.But,inadditiontosettingtheserathertrivialconfigurationoptions,italsodoes
somethingveryimportant:registersalloftheserviceprovidersconfiguredforyourapplication.
RequestLifecycle 24
Simple service providers only have one method: register. This register method is called when
the service provider is registered with the application object via the application’s own register
method. Within this method, service providers register things with the IoC container . Essentially,
each service provider binds one or more closures³⁵into the container, which allows you to access
thoseboundserviceswithinyourapplication.So,forexample,the QueueServiceProvider registers
closuresthatresolvethevarious Queuerelatedclasses.Ofcourse,serviceprovidersmaybeusedfor
any bootstrapping task, not just registering things with the IoC container. A service provider may
registereventlisteners,viewcomposers,Artisancommands,andmore.
After all of the service providers have been registered, your app/start files will be loaded. Lastly,
your app/routes.php file will be loaded. Once your routes.php file has been loaded, the Request
objectissenttotheapplicationsothatitmaybedispatchedtoaroute.
So,let’ssummarize:
1.Requestenters public/index.php file.
2.bootstrap/start.php filecreatesApplicationanddetectsenvironment.
3.Internal framework/start.php fileconfiguressettingsandloadsserviceproviders.
4.Application app/start filesareloaded.
5.Application app/routes.php fileisloaded.
6.RequestobjectsenttoApplication,whichreturnsResponseobject.
7.Responseobjectsentbacktoclient.
Now that you have a good idea of how a request to a Laravel application is handled, let’s take a
closerlookat“start”files!
Start Files
Your application’s start files are stored at app/start . By default, three are included with your
application: global.php ,local.php , and artisan.php . For more information about artisan.php ,
refertothedocumentationonthe Artisancommandline .
Theglobal.php startfilecontainsafewbasicitemsbydefault,suchastheregistrationofthe Logger
and the inclusion of your app/filters.php file. However, you are free to add anything to this file
that you wish. It will be automatically included on everyrequest to your application, regardless of
environment.The local.php file,ontheotherhand,isonlycalledwhentheapplicationisexecuting
in the localenvironment. For more information on environments, check out the configuration
documentation.
Of course, if you have other environments in addition to local, you may create start files for
thoseenvironmentsaswell.Theywillbeautomaticallyincludedwhenyourapplicationisrunning
in that environment. So, for example, if you have a development environment configured in
your bootstrap/start.php file, you may create a app/start/development.php file, which will be
includedwhenanyrequestsentertheapplicationinthatenvironment.
³⁵http://us3.php.net/manual/en/functions.anonymous.php
RequestLifecycle 25
What To Place In Start Files
Startfilesserveasasimpleplacetoplaceany“bootstrapping”code.Forexample,youcouldregister
a View composer, configure your logging preferences, set some PHP settings, etc. It’s totally up to
you.Ofcourse,throwingallofyourbootstrappingcodeintoyourstartfilescangetmessy.Forlarge
applications, or if you feel your start files are getting messy, consider moving some bootstrapping
codeintoserviceproviders .
Application Events
Youmayalsodopreandpostrequestprocessingbyregistering before,after,finish,and shutdown
applicationevents:
Registering Application Events
..App::before (function ($request )
{
//
});
App::after (function ($request ,$response )
{
//
});
Listenerstotheseeventswillberun beforeandaftereachrequesttoyourapplication.Theseevents
canbehelpfulforglobalfilteringorglobalmodificationofresponses.Youmayregistertheminone
ofyour startfilesorina serviceprovider .
The finisheventiscalledaftertheresponsefromyourapplicationhasbeensentbacktotheclient.
Thisisagoodplacetodoanylastminuteprocessingyourapplicationrequires.The shutdowneventis
calledimmediatelyafterallofthe finisheventhandlersfinishprocessing,andisthelastopportunity
to do any work before the script terminates. Most likely, you will not have a need to use either of
theseevents.
Routing
•BasicRouting
•RouteParameters
•RouteFilters
•NamedRoutes
•RouteGroups
•Sub-DomainRouting
•RoutePrefixing
•RouteModelBinding
•Throwing404Errors
•RoutingToControllers
Basic Routing
Most of the routes for your application will be defined in the app/routes.php file. The simplest
LaravelroutesconsistofaURIandaClosurecallback.
Basic GET Route
..Route ::get('/',function ()
{
return 'Hello World' ;
});
Basic POST Route
..Route ::post ('foo/bar' ,function ()
{
return 'Hello World' ;
});
Routing 27
..
Registering A Route For Multiple Verbs
..Route ::match (array ('GET' ,'POST' ),'/',function ()
{
return 'Hello World' ;
});
Registering A Route Responding To Any HTTP Verb
..Route ::any('foo' ,function ()
{
return 'Hello World' ;
});
Forcing A Route To Be Served Over HTTPS
..Route ::get('foo' ,array ('https' ,function ()
{
return 'Must be over HTTPS' ;
}));
Often,youwillneedtogenerateURLstoyourroutes,youmaydosousingthe URL::tomethod:
..$url =URL::to('foo' );
Routing 28
Route Parameters
..Route ::get('user/{id}' ,function ($id)
{
return 'User ' .$id;
});
Optional Route Parameters
..Route ::get('user/{name?}' ,function ($name =null )
{
return $name ;
});
Optional Route Parameters With Defaults
..Route ::get('user/{name?}' ,function ($name ='John' )
{
return $name ;
});
Regular Expression Route Constraints
Routing 29
..Route ::get('user/{name}' ,function ($name )
{
//
})
->where ('name' ,'[A-Za-z]+' );
Route ::get('user/{id}' ,function ($id)
{
//
})
->where ('id' ,'[0-9]+' );
Passing An Array Of Wheres
Ofcourse,youmaypassanarrayofconstraintswhennecessary:
..Route ::get('user/{id}/{name}' ,function ($id,$name )
{
//
})
->where (array ('id' =>'[0-9]+' ,'name' =>'[a-z]+' ))
Defining Global Patterns
If you would like a route parameter to always be constrained by a given regular expression, you
mayusethe patternmethod:
..Route ::pattern ('id' ,'[0-9]+' );
Route ::get('user/{id}' ,function ($id)
{
// Only called if {id} is numeric.
Routing 30
..});
Accessing A Route Parameter Value
If you need to access a route parameter value outside of a route, you may use the Route::input
method:
..Route ::filter ('foo' ,function ()
{
if(Route ::input ('id' )==1)
{
//
}
});
Route Filters
Routefiltersprovideaconvenientwayoflimitingaccesstoagivenroute,whichisusefulforcreating
areas of your site which require authentication. There are several filters included in the Laravel
framework,including an authfilter,an auth.basic filter, a guestfilter, and a csrffilter. These are
locatedinthe app/filters.php file.
Defining A Route Filter
..Route ::filter ('old' ,function ()
{
if(Input ::get('age' )<200)
{
return Redirect ::to('home' );
}
});
If a response is returned from a filter, that response will be considered the response to the request
andtheroutewillnotbeexecuted,andany afterfiltersontheroutewillalsobecancelled.
Routing 31
Attaching A Filter To A Route
..Route ::get('user' ,array ('before' =>'old' ,function ()
{
return 'You are over 200 years old!' ;
}));
Attaching A Filter To A Controller Action
..Route ::get('user' ,array ('before' =>'old' ,'uses' =>'UserController@showProfile\
'));
Attaching Multiple Filters To A Route
..Route ::get('user' ,array ('before' =>'auth|old' ,function ()
{
return 'You are authenticated and over 200 years old!' ;
}));
Specifying Filter Parameters
..Route ::filter ('age' ,function ($route ,$request ,$value )
{
//
});
Route ::get('user' ,array ('before' =>'age:200' ,function ()
{
return 'Hello World' ;
Routing 32
..}));
Afterfiltersreceivea $response asthethirdargumentpassedtothefilter:
..Route ::filter ('log' ,function ($route ,$request ,$response ,$value )
{
//
});
Pattern Based Filters
YoumayalsospecifythatafilterappliestoanentiresetofroutesbasedontheirURI.
..Route ::filter ('admin' ,function ()
{
//
});
Route ::when ('admin/*' ,'admin' );
In the example above, the adminfilter would be applied to all routes beginning with admin/. The
asteriskisusedasawildcard,andwillmatchanycombinationofcharacters.
YoumayalsoconstrainpatternfiltersbyHTTPverbs:
..Route ::when ('admin/*' ,'admin' ,array ('post' ));
Filter Classes
For advanced filtering, you may wish to use a class instead of a Closure. Since filter classes are
resolved out of the application IoC Container , you will be able to utilize dependency injection in
thesefiltersforgreatertestability.
Routing 33
Defining A Filter Class
..class FooFilter {
public function filter ()
{
// Filter logic...
}
}
Registering A Class Based Filter
..Route ::filter ('foo' ,'FooFilter' );
Named Routes
Named routes make referring to routes when generating redirects or URLs more convenient. You
mayspecifyanameforaroutelikeso:
..Route ::get('user/profile' ,array ('as' =>'profile' ,function ()
{
//
}));
Youmayalsospecifyroutenamesforcontrolleractions:
Routing 34
..Route ::get('user/profile' ,array ('as' =>'profile' ,'uses' =>'UserController@sho\
wProfile' ));
Now,youmayusetheroute’snamewhengeneratingURLsorredirects:
..$url =URL::route ('profile' );
$redirect =Redirect ::route ('profile' );
Youmayaccessthenameofaroutethatisrunningviathe currentRouteName method:
..$name =Route ::currentRouteName ();
Route Groups
Sometimesyoumayneedtoapplyfilterstoagroupofroutes.Insteadofspecifyingthefilteroneach
route,youmayusearoutegroup:
..Route ::group (array ('before' =>'auth' ),function ()
{
Route ::get('/',function ()
{
// Has Auth Filter
});
Route ::get('user/profile' ,function ()
{
// Has Auth Filter
Routing 35
..});
});
Sub-Domain Routing
Laravelroutesarealsoabletohandlewildcardsub-domains,andpassyouwildcardparametersfrom
thedomain:
Registering Sub-Domain Routes
..Route ::group (array ('domain' =>'{account}.myapp.com' ),function ()
{
Route ::get('user/{id}' ,function ($account ,$id)
{
//
});
});
Route Prefixing
Agroupofroutesmaybeprefixedbyusingthe prefixoptionintheattributesarrayofagroup:
Prefixing Grouped Routes
Routing 36
..Route ::group (array ('prefix' =>'admin' ),function ()
{
Route ::get('user' ,function ()
{
//
});
});
Route Model Binding
Modelbindingprovidesaconvenientwaytoinjectmodelinstancesintoyourroutes.Forexample,
instead of injecting a user’s ID, you can inject the entire User model instance that matches the
given ID. First, use the Route::model method to specify the model that should be used for a given
parameter:
Binding A Parameter To A Model
..Route ::model ('user' ,'User' );
Next,definearoutethatcontainsa {user}parameter:
..Route ::get('profile/{user}' ,function (User $user )
{
//
});
Sincewehaveboundthe {user}parametertothe Usermodel,a Userinstancewillbeinjectedinto
the route. So, for example, a request to profile/1 will inject the Userinstance which has an ID of
1.
Routing 37
Note:Ifamatchingmodelinstanceisnotfoundinthedatabase,a404errorwillbethrown.
Ifyouwishtospecifyyourown“notfound”behavior,youmaypassaClosureasthethirdargument
tothe modelmethod:
..Route ::model ('user' ,'User' ,function ()
{
throw new NotFoundException;
});
Sometimesyoumaywishtouseyourownresolverforrouteparameters.Simplyusethe Route::bind
method:
..Route ::bind ('user' ,function ($value ,$route )
{
return User ::where ('name' ,$value )->first ();
});
Throwing 404 Errors
Therearetwowaystomanuallytriggera404errorfromaroute.First,youmayusethe App::abort
method:
..App::abort (404);
Second,youmaythrowaninstanceof Symfony\Component\HttpKernel\Exception\NotFoundHttpException .
More information on handling 404 exceptions and using custom responses for these errors may be
foundinthe errorssectionofthedocumentation.
Routing 38
Routing To Controllers
LaravelallowsyoutonotonlyroutetoClosures,butalsotocontrollerclasses,andevenallowsthe
creationof resourcecontrollers .
Seethedocumentationon Controllers formoredetails.
Requests & Input
•BasicInput
•Cookies
•OldInput
•Files
•RequestInformation
Basic Input
Youmayaccessalluserinputwithafewsimplemethods.YoudonotneedtoworryabouttheHTTP
verbusedfortherequest,asinputisaccessedinthesamewayforallverbs.
Retrieving An Input Value
..$name =Input ::get('name' );
Retrieving A Default Value If The Input Value Is Absent
..$name =Input ::get('name' ,'Sally' );
Determining If An Input Value Is Present
..if(Input ::has('name' ))
{
//
}
Requests&Input 40
..
Getting All Input For The Request
..$input =Input ::all();
Getting Only Some Of The Request Input
..$input =Input ::only ('username' ,'password' );
$input =Input ::except ('credit_card' );
Whenworkingonformswith“array”inputs,youmayusedotnotationtoaccessthearrays:
..$input =Input ::get('products.0.name' );
Note:SomeJavaScriptlibrariessuchasBackbonemaysendinputtotheapplicationas
JSON.Youmayaccessthisdatavia Input::get likenormal.
Cookies
AllcookiescreatedbytheLaravelframeworkareencryptedandsignedwithanauthenticationcode,
meaningtheywillbeconsideredinvalidiftheyhavebeenchangedbytheclient.
Retrieving A Cookie Value
Requests&Input 41
..$value =Cookie ::get('name' );
Attaching A New Cookie To A Response
..$response =Response ::make ('Hello World' );
$response ->withCookie (Cookie ::make ('name' ,'value' ,$minutes ));
Queueing A Cookie For The Next Response
If you would like to set a cookie before a response has been created, use the Cookie::queue()
method.Thecookiewillautomaticallybeattachedtothefinalresponsefromyourapplication.
..Cookie ::queue ($name ,$value ,$minutes );
Creating A Cookie That Lasts Forever
..$cookie =Cookie ::forever ('name' ,'value' );
Old Input
Youmayneedtokeepinputfromonerequestuntilthenextrequest.Forexample,youmayneedto
re-populateaformaftercheckingitforvalidationerrors.
Flashing Input To The Session
Requests&Input 42
..Input ::flash ();
Flashing Only Some Input To The Session
..Input ::flashOnly ('username' ,'email' );
Input ::flashExcept ('password' );
Sinceyouoftenwillwanttoflashinputinassociationwitharedirecttothepreviouspage,youmay
easilychaininputflashingontoaredirect.
..return Redirect ::to('form' )->withInput ();
return Redirect ::to('form' )->withInput (Input ::except ('password' ));
Note:Youmayflashotherdataacrossrequestsusingthe Sessionclass.
Retrieving Old Data
..Input ::old('username' );
Files
Retrieving An Uploaded File
Requests&Input 43
..$file =Input ::file ('photo' );
Determining If A File Was Uploaded
..if(Input ::hasFile ('photo' ))
{
//
}
Theobjectreturnedbythe filemethodisaninstanceofthe Symfony\Component\HttpFoundation\File\UploadedFile
class, which extends the PHP SplFileInfo class and provides a variety of methods for interacting
withthefile.
Moving An Uploaded File
..Input ::file ('photo' )->move ($destinationPath );
Input ::file ('photo' )->move ($destinationPath ,$fileName );
Retrieving The Path To An Uploaded File
..$path =Input ::file ('photo' )->getRealPath ();
Retrieving The Original Name Of An Uploaded File
Requests&Input 44
..$name =Input ::file ('photo' )->getClientOriginalName ();
Retrieving The Extension Of An Uploaded File
..$extension =Input ::file ('photo' )->getClientOriginalExtension ();
Retrieving The Size Of An Uploaded File
..$size =Input ::file ('photo' )->getSize ();
Retrieving The MIME Type Of An Uploaded File
..$mime =Input ::file ('photo' )->getMimeType ();
Request Information
TheRequestclassprovidesmanymethodsforexaminingtheHTTPrequestforyourapplicationand
extendsthe Symfony\Component\HttpFoundation\Request class.Herearesomeofthehighlights.
Retrieving The Request URI
..$uri =Request ::path ();
Requests&Input 45
Determining If The Request Path Matches A Pattern
..if(Request ::is('admin/*' ))
{
//
}
Get The Request URL
..$url =Request ::url();
Retrieve A Request URI Segment
..$segment =Request ::segment (1);
Retrieving A Request Header
..$value =Request ::header ('Content-Type' );
Retrieving Values From $_SERVER
..$value =Request ::server ('PATH_INFO' );
Requests&Input 46
Determining If The Request Is Over HTTPS
..if(Request ::secure ())
{
//
}
Determine If The Request Is Using AJAX
..if(Request ::ajax ())
{
//
}
Determine If The Request Has JSON Content Type
..if(Request ::isJson ())
{
//
}
Determine If The Request Is Asking For JSON
..if(Request ::wantsJson ())
{
//
}
Requests&Input 47
Checking The Requested Response Format
TheRequest::format methodwillreturntherequestedresponseformatbasedontheHTTPAccept
header:
..if(Request ::format ()=='json' )
{
//
}
Views & Responses
•BasicResponses
•Redirects
•Views
•ViewComposers
•SpecialResponses
•ResponseMacros
Basic Responses
Returning Strings From Routes
..Route ::get('/',function ()
{
return 'Hello World' ;
});
Creating Custom Responses
AResponse instance inherits from the Symfony\Component\HttpFoundation\Response class, pro-
vidingavarietyofmethodsforbuildingHTTPresponses.
..$response =Response ::make ($contents ,$statusCode );
$response ->header ('Content-Type' ,$value );
return $response ;
Ifyouneedaccesstothe Responseclassmethods,butwanttoreturnaviewastheresponsecontent,
youmayusethe Response::view methodforconvenience:
Views&Responses 49
..return Response ::view ('hello' )->header ('Content-Type' ,$type );
Attaching Cookies To Responses
..$cookie =Cookie ::make ('name' ,'value' );
return Response ::make ($content )->withCookie ($cookie );
Redirects
Returning A Redirect
..return Redirect ::to('user/login' );
Returning A Redirect With Flash Data
..return Redirect ::to('user/login' )->with ('message' ,'Login Failed' );
Note:Sincethe withmethodflashesdatatothesession,youmayretrievethedatausing
thetypical Session::get method.
Returning A Redirect To A Named Route
Views&Responses 50
..return Redirect ::route ('login' );
Returning A Redirect To A Named Route With Parameters
..return Redirect ::route ('profile' ,array (1));
Returning A Redirect To A Named Route Using Named Parameters
..return Redirect ::route ('profile' ,array ('user' =>1));
Returning A Redirect To A Controller Action
..return Redirect ::action ('HomeController@index' );
Returning A Redirect To A Controller Action With Parameters
..return Redirect ::action ('UserController@profile' ,array (1));
Returning A Redirect To A Controller Action Using Named Parameters
Views&Responses 51
..return Redirect ::action ('UserController@profile' ,array ('user' =>1));
Views
ViewstypicallycontaintheHTMLofyourapplicationandprovideaconvenientwayofseparating
your controller and domain logic from your presentation logic. Views are stored in the app/views
directory.
Asimpleviewcouldlooksomethinglikethis:
..<!-- View stored in app /views /greeting .php -->
<html >
<body >
<h1>Hello, <?php echo $name ;?></h1>
</body>
</html>
Thisviewmaybereturnedtothebrowserlikeso:
..Route ::get('/',function ()
{
return View ::make ('greeting' ,array ('name' =>'Taylor' ));
});
Thesecondargumentpassedto View::make isanarrayofdatathatshouldbemadeavailabletothe
view.
Passing Data To Views
Views&Responses 52
..// Using conventional approach
$view =View ::make ('greeting' )->with ('name' ,'Steve' );
// Using Magic Methods
$view =View ::make ('greeting' )->withName ('steve' );
In the example above the variable $namewould be accessible from the view, and would contain
Steve.
Ifyouwish,youmaypassanarrayofdataasthesecondparametergiventothe makemethod:
..$view =View ::make ('greetings' ,$data );
Youmayalsoshareapieceofdataacrossallviews:
..View ::share ('name' ,'Steve' );
Passing A Sub-View To A View
Sometimesyoumaywishtopassaviewintoanotherview.Forexample,givenasub-viewstoredat
app/views/child/view.php ,wecouldpassittoanotherviewlikeso:
..$view =View ::make ('greeting' )->nest ('child' ,'child.view' );
$view =View ::make ('greeting' )->nest ('child' ,'child.view' ,$data );
Thesub-viewcanthenberenderedfromtheparentview:
Views&Responses 53
..<html >
<body >
<h1>Hello !</h1>
<?php echo $child ;?>
</body>
</html>
View Composers
View composers are callbacks or class methods that are called when a view is rendered. If you
have data that you want bound to a given view each time that view is rendered throughout
your application, a view composer can organize that code into a single location. Therefore, view
composersmayfunctionlike“viewmodels”or“presenters”.
Defining A View Composer
..View ::composer ('profile' ,function ($view )
{
$view ->with ('count' , User ::count ());
});
Noweachtimethe profileviewisrendered,the countdatawillbeboundtotheview.
Youmayalsoattachaviewcomposertomultipleviewsatonce:
..View ::composer (array ('profile' ,'dashboard' ),function ($view )
{
$view ->with ('count' , User ::count ());
});
If you would rather use a class based composer, which will provide the benefits of being resolved
throughtheapplication IoCContainer ,youmaydoso:
Views&Responses 54
..View ::composer ('profile' ,'ProfileComposer' );
Aviewcomposerclassshouldbedefinedlikeso:
..class ProfileComposer {
public function compose ($view )
{
$view ->with ('count' , User ::count ());
}
}
Defining Multiple Composers
Youmayusethe composers methodtoregisterangroupofcomposersatthesametime:
..View ::composers (array (
'AdminComposer' =>array ('admin.index' ,'admin.profile' ),
'UserComposer' =>'user' ,
));
Note:There is no convention on where composer classes may be stored. You are free
tostorethemanywhereaslongastheycanbeautoloadedusingthedirectivesinyour
composer.json file.
View Creators
View creatorsworkalmostexactlylikeviewcomposers;however,theyarefiredimmediatelywhen
theviewisinstantiated.Toregisteraviewcreator,simpleusethe creatormethod:
Views&Responses 55
..View ::creator ('profile' ,function ($view )
{
$view ->with ('count' , User ::count ());
});
Special Responses
Creating A JSON Response
..return Response ::json (array ('name' =>'Steve' ,'state' =>'CA' ));
Creating A JSONP Response
..return Response ::json (array ('name' =>'Steve' ,'state' =>'CA' ))->setCallback (Inp\
ut::get('callback' ));
Creating A File Download Response
..return Response ::download ($pathToFile );
return Response ::download ($pathToFile ,$name ,$headers );
Note:SymfonyHttpFoundation,whichmanagesfiledownloads,requiresthefilebeing
downloadedtohaveanASCIIfilename.
Views&Responses 56
Response Macros
If you would like to define a custom response that you can re-use in a variety of your routes and
controllers,youmayusethe Response::macro method:
..Response ::macro ('caps' ,function ($value )
{
return Response ::make (strtoupper( $value ));
});
The macrofunction accepts a name as its first argument, and a Closure as its second. The macro’s
Closurewillbeexecutedwhencallingthemacronameonthe Response class:
..return Response ::caps ('foo' );
Youmaydefineyourmacrosinoneofyour app/start files.Alternatively,youmayorganizeyour
macrosintoaseparatefilewhichisincludedfromoneofyour startfiles.
Controllers
•BasicControllers
•ControllerFilters
•RESTfulControllers
•ResourceControllers
•HandlingMissingMethods
Basic Controllers
Insteadofdefiningallofyourroute-levellogicinasingle routes.php file,youmaywishtoorganize
thisbehaviorusingControllerclasses.Controllerscangrouprelatedroutelogicintoaclass,aswell
astakeadvantageofmoreadvancedframeworkfeaturessuchasautomatic dependencyinjection .
Controllersaretypicallystoredinthe app/controllers directory,andthisdirectoryisregisteredin
theclassmap optionofyour composer.json filebydefault.
Hereisanexampleofabasiccontrollerclass:
..class UserController extends BaseController {
/**
* Show the profile for the given user.
*/
public function showProfile ($id)
{
$user =User ::find ($id);
return View ::make ('user.profile' ,array ('user' =>$user ));
}
}
All controllers should extend the BaseController class. The BaseController is also stored in
theapp/controllers directory, and may be used as a place to put shared controller logic. The
BaseController extends the framework’s Controller class. Now, We can route to this controller
actionlikeso:
Controllers 58
..Route ::get('user/{id}' ,'UserController@showProfile' );
If you choose to nest or organize your controller using PHP namespaces, simply use the fully
qualifiedclassnamewhendefiningtheroute:
..Route ::get('foo' ,'Namespace\FooController@method' );
Note:Since we’re using Composer ³⁶to auto-load our PHP classes, controllers may
live anywhere on the file system, as long as composer knows how to load them. The
controllerdirectorydoesnotenforceanyfolderstructureforyourapplication.Routing
tocontrollersisentirelyde-coupledfromthefilesystem.
Youmayalsospecifynamesoncontrollerroutes:
..Route ::get('foo' ,array ('uses' =>'FooController@method' ,
'as' =>'name' ));
TogenerateaURLtoacontrolleraction,youmayusethe URL::action methodorthe actionhelper
method:
..$url =URL::action ('FooController@method' );
$url =action( 'FooController@method' );
Youmayaccessthenameofthecontrolleractionbeingrunusingthe currentRouteAction method:
³⁶http://getcomposer.org
Controllers 59
..$action =Route ::currentRouteAction ();
Controller Filters
Filtersmaybespecifiedoncontrollerroutessimilarto“regular”routes:
..Route ::get('profile' ,array ('before' =>'auth' ,
'uses' =>'UserController@showProfile' ));
However,youmayalsospecifyfiltersfromwithinyourcontroller:
..class UserController extends BaseController {
/**
* Instantiate a new UserController instance.
*/
public function __construct ()
{
$this ->beforeFilter ('auth' ,array ('except' =>'getLogin' ));
$this ->beforeFilter ('csrf' ,array ('on' =>'post' ));
$this ->afterFilter ('log' ,array ('only' =>
array ('fooAction' ,'barAction' )));
}
}
YoumayalsospecifycontrollerfiltersinlineusingaClosure:
Controllers 60
..class UserController extends BaseController {
/**
* Instantiate a new UserController instance.
*/
public function __construct ()
{
$this ->beforeFilter (function ()
{
//
});
}
}
Ifyouwouldliketouseanothermethodonthecontrollerasafilter,youmayuse @syntaxtodefine
thefilter:
..class UserController extends BaseController {
/**
* Instantiate a new UserController instance.
*/
public function __construct ()
{
$this ->beforeFilter ('@filterRequests' );
}
/**
* Filter the incoming requests.
*/
public function filterRequests ($route ,$request )
{
//
}
}
Controllers 61
RESTful Controllers
Laravelallowsyoutoeasilydefineasingleroutetohandleeveryactioninacontrollerusingsimple,
RESTnamingconventions.First,definetherouteusingthe Route::controller method:
Defining A RESTful Controller
..Route ::controller ('users' ,'UserController' );
The controller method accepts two arguments. The first is the base URI the controller handles,
while the second is the class name of the controller. Next, just add methods to your controller,
prefixedwiththeHTTPverbtheyrespondto:
..class UserController extends BaseController {
public function getIndex ()
{
//
}
public function postProfile ()
{
//
}
}
The indexmethods will respond to the root URI handled by the controller, which, in this case, is
users.
Ifyourcontrolleractioncontainsmultiplewords,youmayaccesstheactionusing“dash”syntaxin
theURI.Forexample,thefollowingcontrolleractiononour UserController wouldrespondtothe
users/admin-profile URI:
Controllers 62
..public function getAdminProfile () {}
Resource Controllers
Resource controllers make it easier to build RESTful controllers around resources. For example,
you may wish to create a controller that manages “photos” stored by your application. Using the
controller:make commandviatheArtisanCLIandthe Route::resource method,wecanquickly
createsuchacontroller.
Tocreatethecontrollerviathecommandline,executethefollowingcommand:
..php artisan controller :make PhotoController
Nowwecanregisteraresourcefulroutetothecontroller:
..Route ::resource ('photo' ,'PhotoController' );
This single route declaration creates multiple routes to handle a variety of RESTful actions on the
photo resource. Likewise, the generated controller will already have stubbed methods for each of
theseactionswithnotesinformingyouwhichURIsandverbstheyhandle.
Actions Handled By Resource Controller
Verb Path Action Route Name
GET /resource index resource.index
GET /resource/create create resource.create
POST /resource store resource.store
GET /resource/{resource} show resource.show
GET /resource/{resource}/edit edit resource.edit
PUT/PATCH /resource/{resource} update resource.update
DELETE /resource/{resource} destroy resource.destroy
Controllers 63
Sometimesyoumayonlyneedtohandleasubsetoftheresourceactions:
..php artisan controller :make PhotoController --only =index,show
php artisan controller :make PhotoController --except =index
And,youmayalsospecifyasubsetofactionstohandleontheroute:
..Route ::resource ('photo' ,'PhotoController' ,
array ('only' =>array ('index' ,'show' )));
Route ::resource ('photo' ,'PhotoController' ,
array ('except' =>array ('create' ,'store' ,'update' ,'delete' )));
Bydefault,allresourcecontrolleractionshavearoutename;however,youcanoverridethesenames
bypassinga namesarraywithyouroptions:
..Route ::resource ('photo' ,'PhotoController' ,
array ('names' =>array ('create' =>'photo.build' ));
Handling Missing Methods
Acatch-allmethodmaybedefinedwhichwillbecalledwhennoothermatchingmethodisfound
on a given controller. The method should be named missingMethod , and receives the method and
parameterarrayfortherequest:
Defining A Catch-All Method
Controllers 64
..public function missingMethod ($parameters =array ())
{
//
}
Errors & Logging
•ErrorDetail
•HandlingErrors
•HTTPExceptions
•Handling404Errors
•Logging
Error Detail
By default, error detail is enabled for your application. This means that when an error occurs you
will be shown an error page with a detailed stack trace and error message. You may turn off error
detailsbysettingthe debugoptioninyour app/config/app.php fileto false.
Note:It is strongly recommended that you turn off error detail in a production environ-
ment.
Handling Errors
Bydefault,the app/start/global.php filecontainsanerrorhandlerforallexceptions:
..App::error (function (Exception $exception )
{
Log::error ($exception );
});
Thisisthemostbasicerrorhandler.However,youmayspecifymorehandlersifneeded.Handlersare
calledbasedonthetype-hintoftheExceptiontheyhandle.Forexample,youmaycreateahandler
thatonlyhandles RuntimeException instances:
Errors&Logging 66
..App::error (function (RuntimeException $exception )
{
// Handle the exception...
});
If an exception handler returns a response, that response will be sent to the browser and no other
errorhandlerswillbecalled:
..App::error (function (InvalidUserException $exception )
{
Log::error ($exception );
return 'Sorry! Something is wrong with this account!' ;
});
TolistenforPHPfatalerrors,youmayusethe App::fatal method:
..App::fatal (function ($exception )
{
//
});
If you have several exception handlers, they should be defined from most generic to most specific.
So,forexample,ahandlerthathandlesallexceptionsoftype Exception shouldbedefinedbeforea
customexceptiontypesuchas Illuminate\Encryption\DecryptException .
Where To Place Error Handlers
There is no default “home” for error handler registrations. Laravel offers you freedom in this area.
Oneoptionistodefinethehandlersinyour start/global.php file.Ingeneral,thisisaconvenient
location to place any “bootstrapping” code. If that file is getting crowded, you could create an
app/errors.php file, and requirethat file from your start/global.php script. A third option is
to create a service provider that registers the handlers. Again, there is no single “correct” answer.
Choosealocationthatyouarecomfortablewith.
Errors&Logging 67
HTTP Exceptions
Some exceptions describe HTTP error codes from the server. For example, this may be a “page not
found” error (404), an “unauthorized error” (401) or even a developer generated 500 error. In order
toreturnsucharesponse,usethefollowing:
..App::abort (404);
Optionally,youmayprovidearesponse:
..App::abort (403,'Unauthorized action.' );
Thismethodmaybeusedatanytimeduringtherequest’slifecycle.
Handling 404 Errors
You may register an error handler that handles all “404 Not Found” errors in your application,
allowingyoutoeasilyreturncustom404errorpages:
..App::missing (function ($exception )
{
return Response ::view ('errors.missing' ,array (), 404);
});
Logging
The Laravel logging facilities provide a simple layer on top of the powerful Monolog³⁷library. By
default,Laravelisconfiguredtocreateasinglelogfileforyourapplication,andthisfileisstoredin
app/storage/laravel.log .Youmaywriteinformationtotheloglikeso:
³⁷http://github.com/seldaek/monolog
Errors&Logging 68
..Log::info ('This is some useful information.' );
Log::warning ('Something could be going wrong.' );
Log::error ('Something is really going wrong.' );
The logger provides the seven logging levels defined in RFC 5424³⁸:debug,info,notice,warning,
error,critical,and alert.
Anarrayofcontextualdatamayalsobepassedtothelogmethods:
..Log::info ('Log message' ,array ('context' =>'Other helpful information' ));
Monolog has a variety of additional handlers you may use for logging. If needed, you may access
theunderlyingMonologinstancebeingusedbyLaravel:
..$monolog =Log::getMonolog ();
Youmayalsoregisteraneventtocatchallmessagespassedtothelog:
Registering A Log Listener
..Log::listen (function ($level ,$message ,$context )
{
//
});
³⁸http://tools.ietf.org/html/rfc5424
Security
•Configuration
•StoringPasswords
•AuthenticatingUsers
•ManuallyLoggingInUsers
•ProtectingRoutes
•HTTPBasicAuthentication
•PasswordReminders&Reset
•Encryption
Configuration
Laravelaimstomakeimplementingauthenticationverysimple.Infact,almosteverythingisconfig-
uredforyououtofthebox.Theauthenticationconfigurationfileislocatedat app/config/auth.php ,
which contains several well documented options for tweaking the behavior of the authentication
facilities.
Bydefault,Laravelincludesa Usermodelinyour app/models directorywhichmaybeusedwiththe
defaultEloquentauthenticationdriver.PleaserememberwhenbuildingtheSchemaforthisModel
toensurethatthepasswordfieldisaminimumof60characters.
If your application is not using Eloquent, you may use the database authentication driver which
usestheLaravelquerybuilder.
Storing Passwords
TheLaravel HashclassprovidessecureBcrypthashing:
Hashing A Password Using Bcrypt
..$password =Hash ::make ('secret' );
Verifying A Password Against A Hash
Security 70
..if(Hash ::check ('secret' ,$hashedPassword ))
{
// The passwords match...
}
Checking If A Password Needs To Be Rehashed
..if(Hash ::needsRehash ($hashed ))
{
$hashed =Hash ::make ('secret' );
}
Authenticating Users
Tologauserintoyourapplication,youmayusethe Auth::attempt method.
..if(Auth ::attempt (array ('email' =>$email ,'password' =>$password )))
{
return Redirect ::intended ('dashboard' );
}
Takenotethat emailisnotarequiredoption,itismerelyusedforexample.Youshouldusewhatever
columnnamecorrespondstoa“username”inyourdatabase.The Redirect::intended functionwill
redirect the user to the URL they were trying to access before being caught by the authentication
filter.AfallbackURImaybegiventothismethodincasetheintendeddestinationisnotavailable.
When the attemptmethod is called, the auth.attempt eventwill be fired. If the authentication
attemptissuccessfulandtheuserisloggedin,the auth.login eventwillbefiredaswell.
Todetermineiftheuserisalreadyloggedintoyourapplication,youmayusethe checkmethod:
Security 71
Determining If A User Is Authenticated
..if(Auth ::check ())
{
// The user is logged in...
}
If you would like to provide “remember me” functionality in your application, you may pass true
asthesecondargumenttothe attemptmethod,whichwillkeeptheuserauthenticatedindefinitely
(oruntiltheymanuallylogout):
Authenticating A User And “Remembering” Them
..if(Auth ::attempt (array ('email' =>$email ,'password' =>$password ),true ))
{
// The user is being remembered...
}
Note:Ifthe attemptmethodreturns true,theuserisconsideredloggedintotheapplication.
Determining If User Authed Via Remember
Ifyouare“remembering”userlogins,youmayusethe viaRemember methodtodetermineiftheuser
wasauthenticatedusingthe“rememberme”cookie:
..if(Auth ::viaRemember ())
{
//
}
Youalsomayaddextraconditionstotheauthenticatingquery:
Security 72
Authenticating A User With Conditions
..if(Auth ::attempt (array ('email' =>$email ,'password' =>$password ,'active' =>1\
)))
{
// The user is active, not suspended, and exists.
}
Note:Foraddedprotectionagainstsessionfixation,theuser’ssessionIDwillautomat-
icallyberegeneratedafterauthenticating.
Onceauserisauthenticated,youmayaccesstheUsermodel/record:
Accessing The Logged In User
..$email =Auth ::user ()->email ;
TosimplylogauserintotheapplicationbytheirID,usethe loginUsingId method:
..Auth ::loginUsingId (1);
Thevalidatemethodallowsyoutovalidateauser’scredentialswithoutactuallyloggingtheminto
theapplication:
Validating User Credentials Without Login
..if(Auth ::validate ($credentials ))
{
//
}
Security 73
..
Youmayalsousethe oncemethodtologauserintotheapplicationforasinglerequest.Nosessions
orcookieswillbeutilized.
Logging A User In For A Single Request
..if(Auth ::once ($credentials ))
{
//
}
Logging A User Out Of The Application
..Auth ::logout ();
Manually Logging In Users
If you need to log an existing user instance into your application, you may simply call the login
methodwiththeinstance:
..$user =User ::find (1);
Auth ::login ($user );
Thisisequivalenttologginginauserviacredentialsusingthe attemptmethod.
Protecting Routes
Routefiltersmaybeusedtoallowonlyauthenticateduserstoaccessagivenroute.Laravelprovides
theauthfilterbydefault,anditisdefinedin app/filters.php .
Security 74
Protecting A Route
..Route ::get('profile' ,array ('before' =>'auth' ,function ()
{
// Only authenticated users may enter...
}));
CSRF Protection
Laravelprovidesaneasymethodofprotectingyourapplicationfromcross-siterequestforgeries.
Inserting CSRF Token Into Form
..<input type ="hidden "name ="_token "value ="<?php echo csrf_token(); ?> ">
Validate The Submitted CSRF Token
..Route ::post ('register' ,array ('before' =>'csrf' ,function ()
{
return 'You gave a valid CSRF token!' ;
}));
HTTP Basic Authentication
HTTPBasicAuthenticationprovidesaquickwaytoauthenticateusersofyourapplicationwithout
settingupadedicated“login”page.Togetstarted,attachthe auth.basic filtertoyourroute:
Protecting A Route With HTTP Basic
Security 75
..Route ::get('profile' ,array ('before' =>'auth.basic' ,function ()
{
// Only authenticated users may enter...
}));
By default, the basicfilter will use the emailcolumn on the user record when authenticating. If
youwishtouseanothercolumnyoumaypassthecolumnnameasthefirstparametertothe basic
method:
..return Auth ::basic ('username' );
YoumayalsouseHTTPBasicAuthenticationwithoutsettingauseridentifiercookieinthesession,
whichisparticularlyusefulforAPIauthentication.Todoso,defineafilterthatreturnsthe onceBasic
method:
Setting Up A Stateless HTTP Basic Filter
..Route ::filter ('basic.once' ,function ()
{
return Auth ::onceBasic ();
});
If you are using PHP FastCGI, HTTP Basic authentication will not work correctly by default. The
followinglinesshouldbeaddedtoyour .htaccess file:
..RewriteCond %{HTTP :Authorization} ^(.+)$
RewriteRule .*-[E=HTTP_AUTHORIZATION :%{HTTP :Authorization}]
Security 76
Password Reminders & Reset
Model & Table
Mostwebapplicationsprovideawayforuserstoresettheirforgottenpasswords.Ratherthanforcing
you to re-implement this on each application, Laravel provides convenient methods for sending
password reminders and performing password resets. To get started, verify that your Usermodel
implements the Illuminate\Auth\Reminders\RemindableInterface contract. Of course, the User
modelincludedwiththeframeworkalreadyimplementsthisinterface.
Implementing The RemindableInterface
..class User extends Eloquent implements RemindableInterface {
public function getReminderEmail ()
{
return $this ->email ;
}
}
Next, a table must be created to store the password reset tokens. To generate a migration for this
table,simplyexecutethe auth:reminders Artisancommand:
Generating The Reminder Table Migration
..php artisan auth :reminders -table
php artisan migrate
Password Reminder Controller
Now we’re ready to generate the password reminder controller. To automatically generate a
controller, you may use the auth:reminders-controller Artisan command, which will create a
RemindersController.php fileinyour app/controllers directory.
Security 77
..php artisan auth :reminders -controller
Thegeneratedcontrollerwillalreadyhavea getRemind methodthathandlesshowingyourpassword
reminderform.Allyouneedtodoiscreatea password.remind view.Thisviewshouldhaveabasic
formwithan emailfield.TheformshouldPOSTtothe RemindersController@postRemind action.
Asimpleformonthe password.remind viewmightlooklikethis:
..<form action ="{{action('RemindersController@postRemind') }} "method ="POST ">
<input type ="email "name ="email ">
<input type ="submit "value ="Send Reminder ">
</form >
In addition to getRemind , the generated controller will already have a postRemind method that
handlessendingthepasswordremindere-mailstoyourusers.Thismethodexpectsthe emailfield
to be present in the POSTvariables. If the reminder e-mail is successfully sent to the user, a status
messagewillbeflashedtothesession.Ifthereminderfails,an errormessagewillbeflashedinstead.
Youruserwillreceiveane-mailwithalinkthatpointstothe getResetmethodofthecontroller.The
password reminder token, which is used to identify a given password reminder attempt, will also
be passed to the controller method. The action is already configured to return a password.reset
view which you should build. The tokenwill be passed to the view, and you should place this
token in a hidden form field named token. In addition to the token, your password reset form
shouldcontain email,password,and password_confirmation fields.TheformshouldPOSTtothe
RemindersController@postReset method.
Asimpleformonthe password.reset viewmightlooklikethis:
..<form action ="{{action('RemindersController@postReset') }} "method ="POST ">
<input type ="hidden "name ="token "value ="{{$token }}">
<input type ="email "name ="email ">
<input type ="password "name ="password ">
<input type ="password "name ="password_confirmation ">
<input type ="submit "value ="Reset Password ">
</form >
Security 78
Finally,the postReset methodisresponsibleforactuallychangingthepasswordinstorage.Inthis
controller action, the Closure passed to the Password::reset method sets the password attribute
on the Userand calls the savemethod. Of course, this Closure is assuming your Usermodel is an
Eloquentmodel ;however,youarefreetochangethisClosureasneededtobecompatiblewithyour
application’sdatabasestoragesystem.
Ifthepasswordissuccessfullyreset,theuserwillberedirectedtotherootofyourapplication.Again,
youarefreetochangethisredirectURL.Ifthepasswordresetfails,theuserwillberedirectbackto
theresetform,andan errormessagewillbeflashedtothesession.
Password Validation
By default, the Password::reset method will verify that the passwords match and are >= six
characters.Youmaycustomizetheserulesusingthe Password::validator method,whichacceptsa
Closure.WithinthisClosure,youmaydoanypasswordvalidationyouwish.Notethatyouarenot
requiredtoverifythatthepasswordsmatch,asthiswillbedoneautomaticallybytheframework.
..Password ::validator (function ($credentials )
{
return strlen ($credentials ['password' ])>=8;
});
Note:Bydefault,passwordresettokensexpireafteronehour.Youmaychangethisvia
thereminder.expire optionofyour app/config/auth.php file.
Encryption
LaravelprovidesfacilitiesforstrongAES-256encryptionviathemcryptPHPextension:
Encrypting A Value
..$encrypted =Crypt ::encrypt ('secret' );
Note:Besuretoseta32character,randomstringinthe keyoptionofthe app/config/app.php
file.Otherwise,encryptedvalueswillnotbesecure.
Security 79
Decrypting A Value
..$decrypted =Crypt ::decrypt ($encryptedValue );
Youmayalsosetthecipherandmodeusedbytheencrypter:
Setting The Cipher & Mode
..Crypt ::setMode ('ctr' );
Crypt ::setCipher ($cipher );
Cache
•Configuration
•CacheUsage
•Increments&Decrements
•CacheTags
•DatabaseCache
Configuration
Laravel provides a unified API for various caching systems. The cache configuration is located at
app/config/cache.php . In this file you may specify which cache driver you would like used by
defaultthroughoutyourapplication.Laravelsupportspopularcachingbackendslike Memcached ³⁹
andRedis⁴⁰outofthebox.
Thecacheconfigurationfilealsocontainsvariousotheroptions,whicharedocumentedwithinthe
file,somakesuretoreadovertheseoptions.Bydefault,Laravelisconfiguredtousethe filecache
driver, which stores the serialized, cached objects in the filesystem. For larger applications, it is
recommendedthatyouuseanin-memorycachesuchasMemcachedorAPC.
Cache Usage
Storing An Item In The Cache
..Cache ::put('key' ,'value' ,$minutes );
Using Carbon Objects To Set Expire Time
³⁹http://memcached.org
⁴⁰http://redis.io
Cache 81
..$expiresAt =Carbon ::now()->addMinutes (10);
Cache ::put('key' ,'value' ,$expiresAt );
Storing An Item In The Cache If It Doesn’t Exist
..Cache ::add('key' ,'value' ,$minutes );
The addmethodwillreturn trueiftheitemisactually addedtothecache.Otherwise,themethod
willreturn false.
Checking For Existence In Cache
..if(Cache ::has('key' ))
{
//
}
Retrieving An Item From The Cache
..$value =Cache ::get('key' );
Retrieving An Item Or Returning A Default Value
Cache 82
..$value =Cache ::get('key' ,'default' );
$value =Cache ::get('key' ,function () { return 'default' ; });
Storing An Item In The Cache Permanently
..Cache ::forever ('key' ,'value' );
Sometimes you may wish to retrieve an item from the cache, but also store a default value if the
requesteditemdoesn’texist.Youmaydothisusingthe Cache::remember method:
..$value =Cache ::remember ('users' ,$minutes ,function ()
{
return DB::table ('users' )->get();
});
Youmayalsocombinethe remember andforevermethods:
..$value =Cache ::rememberForever ('users' ,function ()
{
return DB::table ('users' )->get();
});
Notethatallitemsstoredinthecacheareserialized,soyouarefreetostoreanytypeofdata.
Removing An Item From The Cache
Cache 83
..Cache ::forget ('key' );
Increments & Decrements
Alldriversexcept fileanddatabase supportthe increment anddecrement operations:
Incrementing A Value
..Cache ::increment ('key' );
Cache ::increment ('key' ,$amount );
Decrementing A Value
..Cache ::decrement ('key' );
Cache ::decrement ('key' ,$amount );
Cache Tags
Note:Cache tags are not supported when using the fileordatabase cache drivers.
Furthermore,whenusingmultipletagswithcachesthatarestored“forever”,performance
willbebestwithadriversuchas memcached ,whichautomaticallypurgesstalerecords.
Cachetagsallowyoutotagrelateditemsinthecache,andthenflushallcachestaggedwithagiven
name.Toaccessataggedcache,usethe tagsmethod:
Cache 84
Accessing A Tagged Cache
You may store a tagged cache by passing in an ordered list of tag names as arguments, or as an
orderedarrayoftagnames.
..Cache ::tags ('people' ,'authors' )->put('John' ,$john ,$minutes );
Cache ::tags (array ('people' ,'artists' ))->put('Anne' ,$anne ,$minutes );
Youmayuseanycachestoragemethodincombinationwithtags,including remember,forever,and
rememberForever .Youmayalsoaccesscacheditemsfromthetaggedcache,aswellasusetheother
cachemethodssuchas increment anddecrement :
Accessing Items In A Tagged Cache
Toaccessataggedcache,passthesameorderedlistoftagsusedtosaveit.
..$anne =Cache ::tags ('people' ,'artists' )->get('Anne' );
$john =Cache ::tags (array ('people' ,'authors' ))->get('John' );
You may flush all items tagged with a name or list of names. For example, this statement would
remove all caches tagged with either people,authors, or both. So, both “Anne” and “John” would
beremovedfromthecache:
..Cache ::tags ('people' ,'authors' )->flush ();
In contrast, this statement would remove only caches tagged with authors, so “John” would be
removed,butnot“Anne”.
Cache 85
..Cache ::tags ('authors' )->flush ();
Database Cache
When using the database cache driver, you will need to setup a table to contain the cache items.
You’llfindanexample Schemadeclarationforthetablebelow:
..Schema ::create ('cache' ,function ($table )
{
$table ->string ('key' )->unique ();
$table ->text ('value' );
$table ->integer ('expiration' );
});
Extending The Framework
•Introduction
•Managers&Factories
•WhereToExtend
•Cache
•Session
•Authentication
•IoCBasedExtension
•RequestExtension
Introduction
Laravel offers many extension points for you to customize the behavior of the framework’s core
components, or even replace them entirely. For example, the hashing facilities are defined by a
HasherInterface contract, which you may implement based on your application’s requirements.
Youmayalsoextendthe Requestobject,allowingyoutoaddyourownconvenient“helper”methods.
Youmayevenaddentirelynewauthentication,cache,andsessiondrivers!
Laravel components are generally extended in two ways: binding new implementations in the
IoC container, or registering an extension with a Managerclass, which are implementations of
the “Factory” design pattern. In this chapter we’ll explore the various methods of extending the
frameworkandexaminethenecessarycode.
Note:Remember, Laravel components are typically extended in one of two ways: IoC
bindings and the Managerclasses. The manager classes serve as an implementation of the
“factory” design pattern, and are responsible for instantiating driver based facilities such
ascacheandsession.
Managers & Factories
Laravelhasseveral Managerclassesthatmanagethecreationofdriver-basedcomponents.Thesein-
cludethecache,session,authentication,andqueuecomponents.Themanagerclassisresponsiblefor
creating a particular driver implementation based on the application’s configuration. For example,
theCacheManager classcancreateAPC,Memcached,Native,andvariousotherimplementationsof
cachedrivers.
ExtendingTheFramework 87
Each of these managers includes an extendmethod which may be used to easily inject new driver
resolutionfunctionalityintothemanager.We’llcovereachofthesemanagersbelow,withexamples
ofhowtoinjectcustomdriversupportintoeachofthem.
Note:Take a moment to explore the various Managerclasses that ship with Laravel,
such as the CacheManager and SessionManager . Reading through these classes will give
you a more thorough understanding of how Laravel works under the hood. All manager
classesextendthe Illuminate\Support\Manager baseclass,whichprovidessomehelpful,
commonfunctionalityforeachmanager.
Where To Extend
This documentation covers how to extend a variety of Laravel’s components, but you may be
wondering where to place your extension code. Like most other bootstrapping code, you are free
to place some extensions in your startfiles. Cache and Auth extensions are good candidates for
this approach. Other extensions, like Session, must be placed in the register method of a service
providersincetheyareneededveryearlyintherequestlife-cycle.
Cache
ToextendtheLaravelcachefacility,wewillusethe extendmethodonthe CacheManager ,whichis
usedtobindacustomdriverresolvertothemanager,andiscommonacrossallmanagerclasses.For
example,toregisteranewcachedrivernamed“mongo”,wewoulddothefollowing:
..Cache ::extend ('mongo' ,function ($app )
{
// Return Illuminate\Cache\Repository instance...
});
The first argument passed to the extendmethod is the name of the driver. This will correspond
to your driveroption in the app/config/cache.php configuration file. The second argument
is a Closure that should return an Illuminate\Cache\Repository instance. The Closure will be
passedan $appinstance,whichisaninstanceof Illuminate\Foundation\Application andanIoC
container.
Tocreateourcustomcachedriver,wefirstneedtoimplementthe Illuminate\Cache\StoreInterface
contract.So,ourMongoDBcacheimplementationwouldlooksomethinglikethis:
ExtendingTheFramework 88
..class MongoStore implements Illuminate\Cache\StoreInterface {
public function get($key ) {}
public function put($key ,$value ,$minutes ) {}
public function increment ($key ,$value =1) {}
public function decrement ($key ,$value =1) {}
public function forever ($key ,$value ) {}
public function forget ($key ) {}
public function flush () {}
}
We just need to implement each of these methods using a MongoDB connection. Once our
implementationiscomplete,wecanfinishourcustomdriverregistration:
..use Illuminate\Cache\Repository;
Cache ::extend ('mongo' ,function ($app )
{
return new Repository( new MongoStore);
});
As you can see in the example above, you may use the base Illuminate\Cache\Repository when
creatingcustomcachedrivers.Thereistypicallynoneedtocreateyourownrepositoryclass.
If you’re wondering where to put your custom cache driver code, consider making it available
on Packagist! Or, you could create an Extensions namespace within your application’s primary
folder. For example, if the application is named Snappy, you could place the cache extension in
app/Snappy/Extensions/MongoStore.php .However,keepinmindthatLaraveldoesnothavearigid
applicationstructureandyouarefreetoorganizeyourapplicationaccordingtoyourpreferences.
Note:If you’re ever wondering where to put a piece of code, always consider a service
provider. As we’ve discussed, using a service provider to organize framework extensions
isagreatwaytoorganizeyourcode.
ExtendingTheFramework 89
Session
ExtendingLaravelwithacustomsessiondriverisjustaseasyasextendingthecachesystem.Again,
wewillusethe extendmethodtoregisterourcustomcode:
..Session ::extend ('mongo' ,function ($app )
{
// Return implementation of SessionHandlerInterface
});
Where To Extend The Session
Session extensions need to be registered differently than other extensions like Cache and Auth.
Since sessions are started very early in the request-lifecycle, registering the extensions in a start
filewillhappenbetoolate.Instead,a serviceprovider willbeneeded.Youshouldplaceyoursession
extensioncodeinthe register methodofyourserviceprovider,andtheprovidershouldbeplaced
belowthe default Illuminate\Session\SessionServiceProvider in the providers configuration
array.
Writing The Session Extension
Notethatourcustomcachedrivershouldimplementthe SessionHandlerInterface .Thisinterface
is included in the PHP 5.4+ core. If you are using PHP 5.3, the interface will be defined for you by
Laravel so you have forward-compatibility. This interface contains just a few simple methods we
needtoimplement.AstubbedMongoDBimplementationwouldlooksomethinglikethis:
..class MongoHandler implements SessionHandlerInterface {
public function open ($savePath ,$sessionName ) {}
public function close () {}
public function read ($sessionId ) {}
public function write ($sessionId ,$data ) {}
public function destroy ($sessionId ) {}
public function gc($lifetime ) {}
ExtendingTheFramework 90
..}
Since these methods are not as readily understandable as the cache StoreInterface , let’s quickly
coverwhateachofthemethodsdo:
•The openmethod would typically be used in file based session store systems. Since Laravel
ships with a nativesession driver that uses PHP’s native file storage for sessions, you will
almostneverneedtoputanythinginthismethod.Youcanleaveitasanemptystub.Itissimply
a fact of poor interface design (which we’ll discuss later) that PHP requires us to implement
thismethod.
•The closemethod,likethe openmethod,canalsousuallybedisregarded.Formostdrivers,it
isnotneeded.
•The readmethod should return the string version of the session data associated with the
given $sessionId .Thereisnoneedtodoanyserializationorotherencodingwhenretrieving
orstoringsessiondatainyourdriver,asLaravelwillperformtheserializationforyou.
•The writemethod should write the given $datastring associated with the $sessionId to
somepersistentstoragesystem,suchasMongoDB,Dynamo,etc.
•The destroymethodshouldremovethedataassociatedwiththe $sessionId frompersistent
storage.
•The gcmethodshoulddestroyallsessiondatathatisolderthanthegiven $lifetime ,which
isaUNIXtimestamp.Forself-expiringsystemslikeMemcachedandRedis,thismethodmay
beleftempty.
Once the SessionHandlerInterface has been implemented, we are ready to register it with the
Sessionmanager:
..Session ::extend ('mongo' ,function ($app )
{
return new MongoHandler;
});
Oncethesessiondriverhasbeenregistered,wemayusethe mongodriverinour app/config/session.php
configurationfile.
Note:Remember,ifyouwriteacustomsessionhandler,shareitonPackagist!
ExtendingTheFramework 91
Authentication
Authentication may be extended the same way as the cache and session facilities. Again, we will
usethe extendmethodwehavebecomefamiliarwith:
..Auth ::extend ('riak' ,function ($app )
{
// Return implementation of Illuminate\Auth\UserProviderInterface
});
The UserProviderInterface implementations are only responsible for fetching a UserInterface
implementation out of a persistent storage system, such as MySQL, Riak, etc. These two interfaces
allow the Laravel authentication mechanisms to continue functioning regardless of how the user
dataisstoredorwhattypeofclassisusedtorepresentit.
Let’stakealookatthe UserProviderInterface :
..interface UserProviderInterface {
public function retrieveById ($identifier );
public function retrieveByCredentials (array $credentials );
public function validateCredentials (UserInterface $user ,array $credentials );
}
The retrieveById functiontypicallyreceivesanumerickeyrepresentingtheuser,suchasanauto-
incrementing ID from a MySQL database. The UserInterface implementation matching the ID
shouldberetrievedandreturnedbythemethod.
The retrieveByCredentials methodreceivesthearrayofcredentialspassedtothe Auth::attempt
methodwhenattemptingtosignintoanapplication.Themethodshouldthen“query”theunderlying
persistent storage for the user matching those credentials. Typically, this method will run a query
witha“where”conditionon $credentials['username'] .This method should not attempt to do
any password validation or authentication.
The validateCredentials method should compare the given $userwith the $credentials to
authenticate the user. For example, this method might compare the $user->getAuthPassword()
stringtoa Hash::make of$credentials['password'] .
ExtendingTheFramework 92
Nowthatwehaveexploredeachofthemethodsonthe UserProviderInterface ,let’stakealookat
theUserInterface . Remember, the provider should return implementations of this interface from
theretrieveById andretrieveByCredentials methods:
..interface UserInterface {
public function getAuthIdentifier ();
public function getAuthPassword ();
}
This interface is simple. The getAuthIdentifier method should return the “primary key” of
the user. In a MySQL back-end, again, this would be the auto-incrementing primary key. The
getAuthPassword shouldreturntheuser’shashedpassword.Thisinterfaceallowstheauthentication
system to work with any User class, regardless of what ORM or storage abstraction layer you are
using.Bydefault,Laravelincludesa Userclassinthe app/models directorywhichimplementsthis
interface,soyoumayconsultthisclassforanimplementationexample.
Finally, once we have implemented the UserProviderInterface , we are ready to register our
extensionwiththe Authfacade:
..Auth ::extend ('riak' ,function ($app )
{
return new RiakUserProvider( $app ['riak.connection' ]);
});
Afteryouhaveregisteredthedriverwiththe extendmethod,youswitchtothenewdriverinyour
app/config/auth.php configurationfile.
IoC Based Extension
Almost every service provider included with the Laravel framework binds objects into the IoC
container. You can find a list of your application’s service providers in the app/config/app.php
configurationfile.Asyouhavetime,youshouldskimthrougheachoftheseprovider’ssourcecode.
Bydoingso,youwillgainamuchbetterunderstandingofwhateachprovideraddstotheframework,
aswellaswhatkeysareusedtobindvariousservicesintotheIoCcontainer.
ExtendingTheFramework 93
Forexample,the PaginationServiceProvider bindsa paginator keyintotheIoCcontainer,which
resolvesintoa Illuminate\Pagination\Environment instance.Youcaneasilyextendandoverride
thisclasswithinyourownapplicationbyoverridingthisIoCbinding.Forexample,youcouldcreate
aclassthatextendthebase Environment :
..namespace Snappy\Extensions\Pagination;
class Environment extends \Illuminate\Pagination\Environment {
//
}
Once you have created your class extension, you may create a new SnappyPaginationProvider
serviceproviderclasswhichoverridesthepaginatorinits bootmethod:
..class SnappyPaginationProvider extends PaginationServiceProvider {
public function boot ()
{
App::bind ('paginator' ,function ()
{
return new Snappy\Extensions\Pagination\Environment;
});
parent ::boot ();
}
}
Notethatthisclassextendsthe PaginationServiceProvider ,notthedefault ServiceProvider base
class. Once you have extended the service provider, swap out the PaginationServiceProvider in
your app/config/app.php configurationfilewiththenameofyourextendedprovider.
This is the general method of extending any core class that is bound in the container. Essentially
every core class is bound in the container in this fashion, and can be overridden. Again, reading
through the included framework service providers will familiarize you with where various classes
are bound into the container, and what keys they are bound by. This is a great way to learn more
ExtendingTheFramework 94
abouthowLaravelisputtogether.
Request Extension
Becauseitissuchafoundationalpieceoftheframeworkandisinstantiatedveryearlyintherequest
cycle,extendingthe Requestclassworksalittledifferentlythanthepreviousexamples.
First,extendtheclasslikenormal:
..<?php namespace QuickBill\Extensions;
class Request extends \Illuminate\Http\Request {
// Custom, helpful methods here...
}
Once you have extended the class, open the bootstrap/start.php file. This file is one of the very
firstfilestobeincludedoneachrequesttoyourapplication.Notethatthefirstactionperformedis
thecreationoftheLaravel $appinstance:
..$app =new \Illuminate\Foundation\Application;
Whenanewapplicationinstanceiscreated,itwillcreateanew Illuminate\Http\Request instance
and bind it to the IoC container using the requestkey. So, we need a way to specify a custom
class that should be used as the “default” request type, right? And, thankfully, the requestClass
method on the application instance does just this! So, we can add this line at the very top of our
bootstrap/start.php file:
..use Illuminate\Foundation\Application;
Application ::requestClass ('QuickBill\Extensions\Request' );
ExtendingTheFramework 95
Once you have specified the custom request class, Laravel will use this class anytime it creates a
Requestinstance, conveniently allowing you to always have an instance of your custom request
classavailable,eveninunittests!
Events
•BasicUsage
•WildcardListeners
•UsingClassesAsListeners
•QueuedEvents
•EventSubscribers
Basic Usage
TheLaravel Eventclassprovidesasimpleobserverimplementation,allowingyoutosubscribeand
listenforeventsinyourapplication.
Subscribing To An Event
..Event ::listen ('user.login' ,function ($user )
{
$user ->last_login =new DateTime;
$user ->save ();
});
Firing An Event
..$event =Event ::fire ('user.login' ,array ($user ));
You may also specify a priority when subscribing to events. Listeners with higher priority will be
runfirst,whilelistenersthathavethesameprioritywillberuninorderofsubscription.
Subscribing To Events With Priority
Events 97
..Event ::listen ('user.login' ,'LoginHandler' ,10);
Event ::listen ('user.login' ,'OtherHandler' ,5);
Sometimes, you may wish to stop the propagation of an event to other listeners. You may do so
usingbyreturning falsefromyourlistener:
Stopping The Propagation Of An Event
..Event ::listen ('user.login' ,function ($event )
{
// Handle the event...
return false ;
});
Where To Register Events
So, you know how to register events, but you may be wondering whereto register them. Don’t
worry, this is a common question. Unfortunately, it’s a hard question to answer because you can
register an event almost anywhere! But, here are some tips. Again, like most other bootstrapping
code,youmayregistereventsinoneofyour startfilessuchas app/start/global.php .
If your startfiles are getting too crowded, you could create a separate app/events.php file that
is included from a startfile. This is a simple solution that keeps your event registration cleanly
separatedfromtherestofyourbootstrapping.Ifyoupreferaclassbasedapproach,youmayregister
youreventsina serviceprovider .Sincenoneoftheseapproachesisinherently“correct”,choosean
approachyoufeelcomfortablewithbasedonthesizeofyourapplication.
Wildcard Listeners
Whenregisteringaneventlistener,youmayuseasteriskstospecifywildcardlisteners:
Registering Wildcard Event Listeners
Events 98
..Event ::listen ('foo.*' ,function ($param )
{
// Handle the event...
});
Thislistenerwillhandlealleventsthatbeginwith foo..
Youmayusethe Event::firing methodtodetermineexactlywhicheventwasfired:
..Event ::listen ('foo.*' ,function ($param )
{
if(Event ::firing ()=='foo.bar' )
{
//
}
});
Using Classes As Listeners
In some cases, you may wish to use a class to handle an event rather than a Closure. Class
event listeners will be resolved out of the Laravel IoC container , providing you the full power of
dependencyinjectiononyourlisteners.
Registering A Class Listener
..Event ::listen ('user.login' ,'LoginHandler' );
Bydefault,the handlemethodonthe LoginHandler classwillbecalled:
Defining An Event Listener Class
Events 99
..class LoginHandler {
public function handle ($data )
{
//
}
}
If you do not wish to use the default handlemethod, you may specify the method that should be
subscribed:
Specifying Which Method To Subscribe
..Event ::listen ('user.login' ,'LoginHandler@onLogin' );
Queued Events
Usingthe queueandflushmethods,youmay“queue”aneventforfiring,butnotfireitimmediately:
Registering A Queued Event
..Event ::queue ('foo' ,array ($user ));
Registering An Event Flusher
Events 100
..Event ::flusher ('foo' ,function ($user )
{
//
});
Finally,youmayrunthe“flusher”andflushallqueuedeventsusingthe flushmethod:
..Event ::flush ('foo' );
Event Subscribers
Event subscribers are classes that may subscribe to multiple events from within the class itself.
Subscribersshoulddefinea subscribe method,whichwillbepassedaneventdispatcherinstance:
Defining An Event Subscriber
..class UserEventHandler {
/**
* Handle user login events.
*/
public function onUserLogin ($event )
{
//
}
/**
* Handle user logout events.
*/
public function onUserLogout ($event )
{
//
}
Events 101
../**
* Register the listeners for the subscriber.
*
* @param Illuminate\Events\Dispatcher $events
* @return array
*/
public function subscribe ($events )
{
$events ->listen ('user.login' ,'UserEventHandler@onUserLogin' );
$events ->listen ('user.logout' ,'UserEventHandler@onUserLogout' );
}
}
Oncethesubscriberhasbeendefined,itmayberegisteredwiththe Eventclass.
Registering An Event Subscriber
..$subscriber =new UserEventHandler;
Event ::subscribe ($subscriber );
Facades
•Introduction
•Explanation
•PracticalUsage
•CreatingFacades
•MockingFacades
•FacadeClassReference
Introduction
Facades provide a “static” interface to classes that are available in the application’s IoC container .
Laravelshipswithmanyfacades,andyouhaveprobablybeenusingthemwithoutevenknowingit!
Occasionally,Youmaywishtocreateyourownfacadesforyourapplicationsandpackages,solet’s
exploretheconcept,developmentandusageoftheseclasses.
Note:Before digging into facades, it is strongly recommended that you become very
familiarwiththeLaravel IoCcontainer .
Explanation
InthecontextofaLaravelapplication,afacadeisaclassthatprovidesaccesstoanobjectfromthe
container. The machinery that makes this work is in the Facadeclass. Laravel’s facades, and any
customfacadesyoucreate,willextendthebase Facadeclass.
Yourfacadeclassonlyneedstoimplementasinglemethod: getFacadeAccessor .It’sthe getFacadeAccessor
method’s job to define what to resolve from the container. The Facadebase class makes use of the
__callStatic() magic-methodtodefercallsfromyourfacadetotheresolvedobject.
So, when you make a facade call like Cache::get , Laravel resolves the Cache manager class out of
the IoC container and calls the getmethod on the class. In technical terms, Laravel Facades are a
convenientsyntaxforusingtheLaravelIoCcontainerasaservicelocator.
Facades 103
Practical Usage
Intheexamplebelow,acallismadetotheLaravelcachesystem.Byglancingatthiscode,onemight
assumethatthestaticmethod getisbeingcalledonthe Cacheclass.
..$value =Cache ::get('key' );
However, if we look at that Illuminate\Support\Facades\Cache class, you’ll see that there is no
staticmethod get:
..class Cache extends Facade {
/**
* Get the registered name of the component.
*
* @return string
*/
protected static function getFacadeAccessor () { return 'cache' ; }
}
The Cache class extends the base Facadeclass and defines a method getFacadeAccessor() .
Remember,thismethod’sjobistoreturnthenameofanIoCbinding.
Whenauser referencesanystatic methodon the Cachefacade,Laravelresolvesthe cachebinding
fromtheIoCcontainerandrunstherequestedmethod(inthiscase, get)againstthatobject.
So,our Cache::get callcouldbere-writtenlikeso:
..$value =$app ->make ('cache' )->get('key' );
Facades 104
Creating Facades
Creatingafacadeforyourownapplicationorpackageissimple.Youonlyneed3things:
•AnIoCbinding
•Afacadeclass.
•Afacadealiasconfiguration.
Let’slookatanexample.Here,wehaveaclassdefinedas PaymentGateway\Payment .
..namespace PaymentGateway;
class Payment {
public function process ()
{
//
}
}
This class might live in your app/models directory, or any other directory that Composer knows
howtoauto-load.
WeneedtobeabletoresolvethisclassfromtheIoCcontainer.So,let’saddabinding:
..App::bind ('payment' ,function ()
{
return new \PaymentGateway\Payment;
});
Agreatplacetoregisterthisbindingwouldbetocreateanew serviceprovider named PaymentServiceProvider ,
and add this binding to the register method. Youcan then configureLaravelto load yourservice
providerfromthe app/config/app.php configurationfile.
Next,wecancreateourownfacadeclass:
Facades 105
..use Illuminate\Support\Facades\Facade;
class Payment extends Facade {
protected static function getFacadeAccessor () { return 'payment' ; }
}
Finally,ifwewish,wecanaddanaliasforourfacadetothe aliasesarrayinthe app/config/app.php
configurationfile.Now,wecancallthe processmethodonaninstanceofthe Paymentclass.
..Payment ::process ();
A Note On Auto-Loading Aliases
Classes in the aliasesarray are not available in some instances because PHP will not at-
tempt to autoload undefined type-hinted classes ⁴¹. If\ServiceWrapper\ApiTimeoutException is
aliased to ApiTimeoutException , acatch(ApiTimeoutException $e) outside of the namespace
\ServiceWrapper willnevercatchtheexception,evenifoneisthrown.Asimilarproblemisfound
in Models which have type hints to aliased classes. The only workaround is to forego aliasing and
usetheclassesyouwishtotypehintatthetopofeachfilewhichrequiresthem.
Mocking Facades
Unittestingisanimportantaspectofwhyfacadesworkthewaythattheydo.Infact,testabilityis
theprimaryreasonforfacadestoevenexist.Formoreinformation,checkoutthe mockingfacades
sectionofthedocumentation.
Facade Class Reference
Below you will find every facade and its underlying class. This is a useful tool for quickly digging
into the API documentation for a given facade root. The IoC binding key is also included where
applicable.
⁴¹https://bugs.php.net/bug.php?id=39003
Facades 106
Facade Class IoC Binding
App IlluminateFoundationApplication ⁴² app
Artisan IlluminateConsoleApplication ⁴³ artisan
Auth IlluminateAuthAuthManager ⁴⁴ auth
Auth(Instance) IlluminateAuthGuard ⁴⁵
Blade IlluminateViewCompilersBladeCompiler ⁴⁶ blade.compiler
Cache IlluminateCacheRepository ⁴⁷ cache
Config IlluminateConfigRepository ⁴⁸ config
Cookie IlluminateCookieCookieJar ⁴⁹ cookie
Crypt IlluminateEncryptionEncrypter ⁵⁰ encrypter
DB IlluminateDatabaseDatabaseManager ⁵¹ db
DB(Instance) IlluminateDatabaseConnection ⁵²
Event IlluminateEventsDispatcher ⁵³ events
File IlluminateFilesystemFilesystem ⁵⁴ files
Form IlluminateHtmlFormBuilder ⁵⁵ form
Hash IlluminateHashingHasherInterface ⁵⁶ hash
HTML IlluminateHtmlHtmlBuilder ⁵⁷ html
Input IlluminateHttpRequest ⁵⁸ request
Lang IlluminateTranslationTranslator ⁵⁹ translator
Log IlluminateLogWriter ⁶⁰ log
Mail IlluminateMailMailer ⁶¹ mailer
Paginator IlluminatePaginationFactory ⁶² paginator
Paginator(Instance) IlluminatePaginationPaginator ⁶³
Password IlluminateAuthRemindersPasswordBroker ⁶⁴ auth.reminder
Queue IlluminateQueueQueueManager ⁶⁵ queue
⁴²http://laravel.com/api/4.1/Illuminate/Foundation/Application.html
⁴³http://laravel.com/api/4.1/Illuminate/Console/Application.html
⁴⁴http://laravel.com/api/4.1/Illuminate/Auth/AuthManager.html
⁴⁵http://laravel.com/api/4.1/Illuminate/Auth/Guard.html
⁴⁶http://laravel.com/api/4.1/Illuminate/View/Compilers/BladeCompiler.html
⁴⁷http://laravel.com/api/4.1/Illuminate/Cache/Repository.html
⁴⁸http://laravel.com/api/4.1/Illuminate/Config/Repository.html
⁴⁹http://laravel.com/api/4.1/Illuminate/Cookie/CookieJar.html
⁵⁰http://laravel.com/api/4.1/Illuminate/Encryption/Encrypter.html
⁵¹http://laravel.com/api/4.1/Illuminate/Database/DatabaseManager.html
⁵²http://laravel.com/api/4.1/Illuminate/Database/Connection.html
⁵³http://laravel.com/api/4.1/Illuminate/Events/Dispatcher.html
⁵⁴http://laravel.com/api/4.1/Illuminate/Filesystem/Filesystem.html
⁵⁵http://laravel.com/api/4.1/Illuminate/Html/FormBuilder.html
⁵⁶http://laravel.com/api/4.1/Illuminate/Hashing/HasherInterface.html
⁵⁷http://laravel.com/api/4.1/Illuminate/Html/HtmlBuilder.html
⁵⁸http://laravel.com/api/4.1/Illuminate/Http/Request.html
⁵⁹http://laravel.com/api/4.1/Illuminate/Translation/Translator.html
⁶⁰http://laravel.com/api/4.1/Illuminate/Log/Writer.html
⁶¹http://laravel.com/api/4.1/Illuminate/Mail/Mailer.html
⁶²http://laravel.com/api/4.1/Illuminate/Pagination/Factory.html
⁶³http://laravel.com/api/4.1/Illuminate/Pagination/Paginator.html
⁶⁴http://laravel.com/api/4.1/Illuminate/Auth/Reminders/PasswordBroker.html
⁶⁵http://laravel.com/api/4.1/Illuminate/Queue/QueueManager.html
Facades 107
Facade Class IoC Binding
Queue(Instance) IlluminateQueueQueueInterface ⁶⁶
Queue(BaseClass) IlluminateQueueQueue ⁶⁷
Redirect IlluminateRoutingRedirector ⁶⁸ redirect
Redis IlluminateRedisDatabase ⁶⁹ redis
Request IlluminateHttpRequest ⁷⁰ request
Response IlluminateSupportFacadesResponse ⁷¹
Route IlluminateRoutingRouter ⁷² router
Schema IlluminateDatabaseSchemaBlueprint ⁷³
Session IlluminateSessionSessionManager ⁷⁴ session
Session(Instance) IlluminateSessionStore ⁷⁵
SSH IlluminateRemoteRemoteManager ⁷⁶ remote
SSH(Instance) IlluminateRemoteConnection ⁷⁷
URL IlluminateRoutingUrlGenerator ⁷⁸ url
Validator IlluminateValidationFactory ⁷⁹ validator
Validator(Instance) IlluminateValidationValidator ⁸⁰
View IlluminateViewFactory ⁸¹ view
View(Instance) IlluminateViewView ⁸²
⁶⁶http://laravel.com/api/4.1/Illuminate/Queue/QueueInterface.html
⁶⁷http://laravel.com/api/4.1/Illuminate/Queue/Queue.html
⁶⁸http://laravel.com/api/4.1/Illuminate/Routing/Redirector.html
⁶⁹http://laravel.com/api/4.1/Illuminate/Redis/Database.html
⁷⁰http://laravel.com/api/4.1/Illuminate/Http/Request.html
⁷¹http://laravel.com/api/4.1/Illuminate/Support/Facades/Response.html
⁷²http://laravel.com/api/4.1/Illuminate/Routing/Router.html
⁷³http://laravel.com/api/4.1/Illuminate/Database/Schema/Blueprint.html
⁷⁴http://laravel.com/api/4.1/Illuminate/Session/SessionManager.html
⁷⁵http://laravel.com/api/4.1/Illuminate/Session/Store.html
⁷⁶http://laravel.com/api/4.1/Illuminate/Remote/RemoteManager.html
⁷⁷http://laravel.com/api/4.1/Illuminate/Remote/Connection.html
⁷⁸http://laravel.com/api/4.1/Illuminate/Routing/UrlGenerator.html
⁷⁹http://laravel.com/api/4.1/Illuminate/Validation/Factory.html
⁸⁰http://laravel.com/api/4.1/Illuminate/Validation/Validator.html
⁸¹http://laravel.com/api/4.1/Illuminate/View/Factory.html
⁸²http://laravel.com/api/4.1/Illuminate/View/View.html
Forms & HTML
•OpeningAForm
•CSRFProtection
•FormModelBinding
•Labels
•Text,TextArea,Password&HiddenFields
•CheckboxesandRadioButtons
•FileInput
•Drop-DownLists
•Buttons
•CustomMacros
•GeneratingURLs
Opening A Form
Opening A Form
..{{ Form ::open (array ('url' =>'foo/bar' )) }}
//
{{ Form ::close () }}
Bydefault,a POSTmethodwillbeassumed;however,youarefreetospecifyanothermethod:
..echo Form ::open (array ('url' =>'foo/bar' ,'method' =>'put' ))
Note:Since HTML forms only support POSTand GET,PUTand DELETEmethods will be
spoofedbyautomaticallyaddinga _methodhiddenfieldtoyourform.
Youmayalsoopenformsthatpointtonamedroutesorcontrolleractions:
Forms&HTML 109
..echo Form ::open (array ('route' =>'route.name' ))
echo Form ::open (array ('action' =>'Controller@method' ))
Youmaypassinrouteparametersaswell:
..echo Form ::open (array ('route' =>array ('route.name' ,$user ->id)))
echo Form ::open (array ('action' =>array ('Controller@method' ,$user ->id)))
Ifyourformisgoingtoacceptfileuploads,adda filesoptiontoyourarray:
..echo Form ::open (array ('url' =>'foo/bar' ,'files' =>true ))
CSRF Protection
Laravel provides an easy method of protecting your application from cross-site request forgeries.
First,arandomtokenisplacedinyouruser’ssession.Don’tsweatit,thisisdoneautomatically.The
CSRF token will be added to your forms as a hidden field automatically. However, if you wish to
generatetheHTMLforthehiddenfield,youmayusethe tokenmethod:
Adding The CSRF Token To A Form
..echo Form ::token ();
Attaching The CSRF Filter To A Route
Forms&HTML 110
..Route ::post ('profile' ,array ('before' =>'csrf' ,function ()
{
//
}));
Form Model Binding
Often, you will want to populate a form based on the contents of a model. To do so, use the
Form::model method:
Opening A Model Form
..echo Form ::model ($user ,array ('route' =>array ('user.update' ,$user ->id)))
Now, when you generate a form element, like a text input, the model’s value matching the field’s
namewillautomaticallybesetasthefieldvalue.So,forexample,foratextinputnamed email,the
usermodel’s emailattributewouldbesetasthevalue.However,there’smore!Ifthereisanitemin
the Session flash data matching the input name, that will take precedence over the model’s value.
So,theprioritylookslikethis:
1.SessionFlashData(OldInput)
2.ExplicitlyPassedValue
3.ModelAttributeData
Thisallowsyoutoquicklybuildformsthatnotonlybindtomodelvalues,buteasilyre-populateif
thereisavalidationerrorontheserver!
Note:Whenusing Form::model ,besuretocloseyourformwith Form::close !
Forms&HTML 111
Labels
Generating A Label Element
..echo Form ::label ('email' ,'E-Mail Address' );
Specifying Extra HTML Attributes
..echo Form ::label ('email' ,'E-Mail Address' ,array ('class' =>'awesome' ));
Note:After creating a label, any form element you create with a name matching the
labelnamewillautomaticallyreceiveanIDmatchingthelabelnameaswell.
Text, Text Area, Password & Hidden Fields
Generating A Text Input
..echo Form ::text ('username' );
Specifying A Default Value
..echo Form ::text ('email' ,'example@gmail.com' );
Note:Thehiddenandtextareamethodshavethesamesignatureasthe textmethod.
Forms&HTML 112
Generating A Password Input
..echo Form ::password ('password' );
Generating Other Inputs
..echo Form ::email ($name ,$value =null ,$attributes =array ());
echo Form ::file ($name ,$attributes =array ());
Checkboxes and Radio Buttons
Generating A Checkbox Or Radio Input
..echo Form ::checkbox ('name' ,'value' );
echo Form ::radio ('name' ,'value' );
Generating A Checkbox Or Radio Input That Is Checked
..echo Form ::checkbox ('name' ,'value' ,true );
echo Form ::radio ('name' ,'value' ,true );
File Input
Generating A File Input
Forms&HTML 113
..echo Form ::file ('image' );
Drop-Down Lists
Generating A Drop-Down List
..echo Form ::select ('size' ,array ('L' =>'Large' ,'S' =>'Small' ));
Generating A Drop-Down List With Selected Default
..echo Form ::select ('size' ,array ('L' =>'Large' ,'S' =>'Small' ),'S');
Generating A Grouped List
..echo Form ::select ('animal' ,array (
'Cats' =>array ('leopard' =>'Leopard' ),
'Dogs' =>array ('spaniel' =>'Spaniel' ),
));
Generating A Drop-Down List With A Range
..echo Form ::selectRange ('number' ,10,20);
Forms&HTML 114
Generating A List With Month Names
..echo Form ::selectMonth ('month' );
Buttons
Generating A Submit Button
..echo Form ::submit ('Click Me!' );
Note:Needtocreateabuttonelement?Trythe buttonmethod.Ithasthesamesignature
assubmit.
Custom Macros
It’seasytodefineyourowncustomFormclasshelperscalled“macros”.Here’showitworks.First,
simplyregisterthemacrowithagivennameandaClosure:
Registering A Form Macro
..Form ::macro ('myField' ,function ()
{
return '<input type="awesome">' ;
});
Nowyoucancallyourmacrousingitsname:
Calling A Custom Form Macro
Forms&HTML 115
..echo Form ::myField ();
Generating URLs
FormoreinformationongeneratingURL’s,checkoutthedocumentationon helpers.
Helper Functions
•Arrays
•Paths
•Strings
•URLs
•Miscellaneous
Arrays
array_add
The array_add function adds a given key / value pair to the array if the given key doesn’t already
existinthearray.
..$array =array ('foo' =>'bar' );
$array =array_add( $array ,'key' ,'value' );
array_divide
The array_divide function returns two arrays, one containing the keys, and the other containing
thevaluesoftheoriginalarray.
..$array =array ('foo' =>'bar' );
list ($keys ,$values )=array_divide( $array );
HelperFunctions 117
array_dot
The array_dot functionflattensamulti-dimensionalarrayintoasinglelevelarraythatuses“dot”
notationtoindicatedepth.
..$array =array ('foo' =>array ('bar' =>'baz' ));
$array =array_dot( $array );
// array('foo.bar' => 'baz');
array_except
The array_except methodremovesthegivenkey/valuepairsfromthearray.
..$array =array_except( $array ,array ('keys' ,'to' ,'remove' ));
array_fetch
The array_fetch methodreturnsaflattenedarraycontainingtheselectednestedelement.
..$array =array (
array ('developer' =>array ('name' =>'Taylor' )),
array ('developer' =>array ('name' =>'Dayle' )),
);
$array =array_fetch( $array ,'developer.name' );
// array('Taylor', 'Dayle');
HelperFunctions 118
array_first
The array_first methodreturnsthefirstelementofanarraypassingagiventruthtest.
..$array =array (100,200,300);
$value =array_first( $array ,function ($key ,$value )
{
return $value >=150;
});
Adefaultvaluemayalsobepassedasthethirdparameter:
..$value =array_first( $array ,$callback ,$default );
array_flatten
The array_flatten methodwillflattenamulti-dimensionalarrayintoasinglelevel.
..$array =array ('name' =>'Joe' ,'languages' =>array ('PHP' ,'Ruby' ));
$array =array_flatten( $array );
// array('Joe', 'PHP', 'Ruby');
array_forget
The array_forget method will remove a given key / value pair from a deeply nested array using
“dot”notation.
HelperFunctions 119
..$array =array ('names' =>array ('joe' =>array ('programmer' )));
$array =array_forget( $array ,'names.joe' );
array_get
The array_get methodwillretrieveagivenvaluefromadeeplynestedarrayusing“dot”notation.
..$array =array ('names' =>array ('joe' =>array ('programmer' )));
$value =array_get( $array ,'names.joe' );
array_only
The array_only methodwillreturnonlythespecifiedkey/valuepairsfromthearray.
..$array =array ('name' =>'Joe' ,'age' =>27,'votes' =>1);
$array =array_only( $array ,array ('name' ,'votes' ));
array_pluck
The array_pluck methodwillpluckalistofthegivenkey/valuepairsfromthearray.
..$array =array (array ('name' =>'Taylor' ),array ('name' =>'Dayle' ));
$array =array_pluck( $array ,'name' );
HelperFunctions 120
..// array('Taylor', 'Dayle');
array_pull
The array_pull methodwillreturnagivenkey/valuepairfromthearray,aswellasremoveit.
..$array =array ('name' =>'Taylor' ,'age' =>27);
$name =array_pull( $array ,'name' );
array_set
The array_set methodwillsetavaluewithinadeeplynestedarrayusing“dot”notation.
..$array =array ('names' =>array ('programmer' =>'Joe' ));
array_set( $array ,'names.editor' ,'Taylor' );
array_sort
The array_sort methodsortsthearraybytheresultsofthegivenClosure.
..$array =array (
array ('name' =>'Jill' ),
array ('name' =>'Barry' ),
);
$array =array_values (array_sort( $array ,function ($value )
{
HelperFunctions 121
..return $value ['name' ];
}));
head
Returnthefirstelementinthearray.UsefulformethodchaininginPHP5.3.x.
..$first =head( $this ->returnsArray ('foo' ));
last
Returnthelastelementinthearray.Usefulformethodchaining.
..$last =last( $this ->returnsArray ('foo' ));
Paths
app_path
Getthefullyqualifiedpathtothe appdirectory.
base_path
Getthefullyqualifiedpathtotherootoftheapplicationinstall.
public_path
Getthefullyqualifiedpathtothe publicdirectory.
HelperFunctions 122
storage_path
Getthefullyqualifiedpathtothe app/storage directory.
Strings
camel_case
Convertthegivenstringto camelCase .
..$camel =camel_case( 'foo_bar' );
// fooBar
class_basename
Gettheclassnameofthegivenclass,withoutanynamespacenames.
..$class =class_basename( 'Foo\Bar\Baz' );
// Baz
e
Run htmlentities overthegivenstring,withUTF-8support.
..$entities =e('<html>foo</html>' );
HelperFunctions 123
ends_with
Determineifthegivenhaystackendswithagivenneedle.
..$value =ends_with( 'This is my name' ,'name' );
snake_case
Convertthegivenstringto snake_case .
..$snake =snake_case( 'fooBar' );
// foo_bar
starts_with
Determineifthegivenhaystackbeginswiththegivenneedle.
..$value =starts_with( 'This is my name' ,'This' );
str_contains
Determineifthegivenhaystackcontainsthegivenneedle.
..$value =str_contains( 'This is my name' ,'my' );
HelperFunctions 124
str_finish
Addasingleinstanceofthegivenneedletothehaystack.Removeanyextrainstances.
..$string =str_finish( 'this/string' ,'/');
// this/string/
str_is
Determineifagivenstringmatchesagivenpattern.Asterisksmaybeusedtoindicatewildcards.
..$value =str_is( 'foo*' ,'foobar' );
str_plural
Convertastringtoitspluralform(Englishonly).
..$plural =str_plural( 'car' );
str_random
Generatearandomstringofthegivenlength.
..$string =str_random( 40);
HelperFunctions 125
str_singular
Convertastringtoitssingularform(Englishonly).
..$singular =str_singular( 'cars' );
studly_case
Convertthegivenstringto StudlyCase .
..$value =studly_case( 'foo_bar' );
// FooBar
trans
Translateagivenlanguageline.Aliasof Lang::get .
..$value =trans( 'validation.required' ):
trans_choice
Translateagivenlanguagelinewithinflection.Aliasof Lang::choice .
..$value =trans_choice( 'foo.bar' ,$count );
HelperFunctions 126
URLs
action
GenerateaURLforagivencontrolleraction.
..$url =action( 'HomeController@getIndex' ,$params );
route
GenerateaURLforagivennamedroute.
..$url =route( 'routeName' ,$params );
asset
GenerateaURLforanasset.
..$url =asset( 'img/photo.jpg' );
link_to
GenerateaHTMLlinktothegivenURL.
..echo link_to( 'foo/bar' ,$title ,$attributes =array (), $secure =null );
HelperFunctions 127
link_to_asset
GenerateaHTMLlinktothegivenasset.
..echo link_to_asset( 'foo/bar.zip' ,$title ,$attributes =array (), $secure =null );
link_to_route
GenerateaHTMLlinktothegivenroute.
..echo link_to_route( 'route.name' ,$title ,$parameters =array (), $attributes =arr\
ay());
link_to_action
GenerateaHTMLlinktothegivencontrolleraction.
..echo link_to_action( 'HomeController@getIndex' ,$title ,$parameters =array (), $at\
tributes =array ());
secure_asset
GenerateaHTMLlinktothegivenassetusingHTTPS.
..echo secure_asset( 'foo/bar.zip' ,$title ,$attributes =array ());
HelperFunctions 128
secure_url
GenerateafullyqualifiedURLtoagivenpathusingHTTPS.
..echo secure_url( 'foo/bar' ,$parameters =array ());
url
GenerateafullyqualifiedURLtothegivenpath.
..echo url( 'foo/bar' ,$parameters =array (), $secure =null );
Miscellaneous
csrf_token
GetthevalueofthecurrentCSRFtoken.
..$token =csrf_token();
dd
Dumpthegivenvariableandendexecutionofthescript.
..dd($value );
HelperFunctions 129
value
If the given value is a Closure, return the value returned by the Closure. Otherwise, return the
value.
..$value =value( function () { return 'bar' ; });
with
Returnthegivenobject.UsefulformethodchainingconstructorsinPHP5.3.x.
..$value =with( new Foo) ->doWork ();
IoC Container
•Introduction
•BasicUsage
•WhereToRegisterBindings
•AutomaticResolution
•PracticalUsage
•ServiceProviders
•ContainerEvents
Introduction
The Laravel inversion of control container is a powerful tool for managing class dependencies.
Dependencyinjectionisamethodofremovinghard-codedclassdependencies.Instead,thedepen-
dencies are injected at run-time, allowing for greater flexibility as dependency implementations
maybeswappedeasily.
Understanding the Laravel IoC container is essential to building a powerful, large application, as
wellasforcontributingtotheLaravelcoreitself.
Basic Usage
TherearetwowaystheIoCcontainercanresolvedependencies:viaClosurecallbacksorautomatic
resolution.First,we’llexploreClosurecallbacks.First,a“type”maybeboundintothecontainer:
Binding A Type Into The Container
..App::bind ('foo' ,function ($app )
{
return new FooBar;
});
Resolving A Type From The Container
IoCContainer 131
..$value =App::make ('foo' );
Whenthe App::make methodiscalled,theClosurecallbackisexecutedandtheresultisreturned.
Sometimes,youmaywishtobindsomethingintothecontainerthatshouldonlyberesolvedonce,
andthesameinstanceshouldbereturnedonsubsequentcallsintothecontainer:
Binding A “Shared” Type Into The Container
..App::singleton ('foo' ,function ()
{
return new FooBar;
});
Youmayalsobindanexistingobjectinstanceintothecontainerusingthe instance method:
Binding An Existing Instance Into The Container
..$foo =new Foo;
App::instance ('foo' ,$foo );
Where To Register Bindings
IoC bindings, like event handlers or route filters, generally fall under the title of “bootstrap code”.
In other words, they prepare your application to actually handle requests, and usually need to be
executedbeforearouteorcontrollerisactuallycalled.Likemostotherbootstrapcode,the startfiles
are always an option for registering IoC bindings. Alternatively, you could create an app/ioc.php
(filenamedoesnotmatter)fileandrequirethatfilefromyour startfile.
If your application has a very large number of IoC bindings, or you simply wish to organize your
IoCbindingsinseparatefilesbycategory,youmayregisteryourbindingsina serviceprovider .
IoCContainer 132
Automatic Resolution
The IoC container is powerful enough to resolve classes without any configuration at all in many
scenarios.Forexample:
Resolving A Class
..class FooBar {
public function __construct (Baz $baz )
{
$this ->baz =$baz ;
}
}
$fooBar =App::make ('FooBar' );
NotethateventhoughwedidnotregistertheFooBarclassinthecontainer,thecontainerwillstill
beabletoresolvetheclass,eveninjectingthe Bazdependencyautomatically!
Whenatypeisnotboundinthecontainer,itwillusePHP’sReflectionfacilitiestoinspecttheclass
andreadtheconstructor’stype-hints.Usingthisinformation,thecontainercanautomaticallybuild
aninstanceoftheclass.
However,insomecases,aclassmaydependonaninterfaceimplementation,nota“concretetype”.
Whenthisisthecase,the App::bind methodmustbeusedtoinformthecontainerwhichinterface
implementationtoinject:
Binding An Interface To An Implementation
..App::bind ('UserRepositoryInterface' ,'DbUserRepository' );
Nowconsiderthefollowingcontroller:
IoCContainer 133
..class UserController extends BaseController {
public function __construct (UserRepositoryInterface $users )
{
$this ->users =$users ;
}
}
Sincewehaveboundthe UserRepositoryInterface toaconcretetype,the DbUserRepository will
automaticallybeinjectedintothiscontrollerwhenitiscreated.
Practical Usage
Laravel provides several opportunities to use the IoC container to increase the flexibility and
testability of your application. One primary example is when resolving controllers. All controllers
are resolved through the IoC container, meaning you can type-hint dependencies in a controller
constructor,andtheywillautomaticallybeinjected.
Type-Hinting Controller Dependencies
..class OrderController extends BaseController {
public function __construct (OrderRepository $orders )
{
$this ->orders =$orders ;
}
public function getIndex ()
{
$all =$this ->orders ->all();
return View ::make ('orders' ,compact ('all' ));
}
}
IoCContainer 134
In this example, the OrderRepository class will automatically be injected into the controller. This
means that when unit testing a “mock” OrderRepository may be bound into the container and
injectedintothecontroller,allowingforpainlessstubbingofdatabaselayerinteraction.
Filters,composers , andevent handlers may also be resolved out of the IoC container. When
registeringthem,simplygivethenameoftheclassthatshouldbeused:
Other Examples Of IoC Usage
..Route ::filter ('foo' ,'FooFilter' );
View ::composer ('foo' ,'FooComposer' );
Event ::listen ('foo' ,'FooHandler' );
Service Providers
Service providers are a great way to group related IoC registrations in a single location. Think of
them as a way to bootstrap components in your application. Within a service provider, you might
register a custom authentication driver, register your application’s repository classes with the IoC
container,orevensetupacustomArtisancommand.
In fact, most of the core Laravel components include service providers. All of the registered
serviceprovidersforyourapplicationarelistedinthe providers arrayofthe app/config/app.php
configurationfile.
To create a service provider, simply extend the Illuminate\Support\ServiceProvider class and
definea register method:
Defining A Service Provider
IoCContainer 135
..use Illuminate\Support\ServiceProvider;
class FooServiceProvider extends ServiceProvider {
public function register ()
{
$this ->app->bind ('foo' ,function ()
{
return new Foo;
});
}
}
Note that in the register method, the application IoC container is available to you via the
$this->app property. Once you have created a provider and are ready to register it with your
application,simplyaddittothe providers arrayinyour appconfigurationfile.
Youmayalsoregisteraserviceprovideratrun-timeusingthe App::register method:
Registering A Service Provider At Run-Time
..App::register ('FooServiceProvider' );
Container Events
The container fires an event each time it resolves an object. You may listen to this event using the
resolving method:
Registering A Resolving Listener
IoCContainer 136
..App::resolvingAny (function ($object )
{
//
});
App::resolving ('foo' ,function ($foo )
{
//
});
Notethattheobjectthatwasresolvedwillbepassedtothecallback.
Localization
•Introduction
•LanguageFiles
•BasicUsage
•Pluralization
•ValidationLocalization
•OverridingPackageLanguageFiles
Introduction
TheLaravel Langclassprovidesaconvenientwayofretrievingstringsinvariouslanguages,allowing
youtoeasilysupportmultiplelanguageswithinyourapplication.
Language Files
Languagestringsarestoredinfileswithinthe app/langdirectory.Withinthisdirectorythereshould
beasubdirectoryforeachlanguagesupportedbytheapplication.
../app
/lang
/en
messages .php
/es
messages .php
Languagefilessimplyreturnanarrayofkeyedstrings.Forexample:
Example Language File
Localization 138
..<?php
return array (
'welcome' =>'Welcome to our application'
);
The default language for your application is stored in the app/config/app.php configuration file.
Youmaychangetheactivelanguageatanytimeusingthe App::setLocale method:
Changing The Default Language At Runtime
..App::setLocale ('es' );
Basic Usage
Retrieving Lines From A Language File
..echo Lang ::get('messages.welcome' );
The first segment of the string passed to the getmethod is the name of the language file, and the
secondisthenameofthelinethatshouldberetrieved.
Note:Ifalanguagelinedoesnotexist,thekeywillbereturnedbythe getmethod.
Youmayalsousethe transhelperfunction,whichisanaliasforthe Lang::get method.
..echo trans( 'messages.welcome' );
Localization 139
Making Replacements In Lines
Youmayalsodefineplace-holdersinyourlanguagelines:
..'welcome' =>'Welcome, :name' ,
Then,passasecondargumentofreplacementstothe Lang::get method:
..echo Lang ::get('messages.welcome' ,array ('name' =>'Dayle' ));
Determine If A Language File Contains A Line
..if(Lang ::has('messages.welcome' ))
{
//
}
Pluralization
Pluralization is a complex problem, as different languages have a variety of complex rules for
pluralization. You may easily manage this in your language files. By using a “pipe” character, you
mayseparatethesingularandpluralformsofastring:
..'apples' =>'There is one apple|There are many apples' ,
Youmaythenusethe Lang::choice methodtoretrievetheline:
Localization 140
..echo Lang ::choice ('messages.apples' ,10);
SincetheLaraveltranslatorispoweredbytheSymfonyTranslationcomponent,youmayalsocreate
moreexplicitpluralizationruleseasily:
..'apples' =>'{0} There are none|[1,19] There are some|[20,Inf] There are many' ,
Validation
Forlocalizationforvalidationerrorsandmessages,takealookatthe.
Overriding Package Language Files
Many packages ship with their own language lines. Instead of hacking the package’s core files to
tweaktheselines,youmayoverridethembyplacingfilesinthe app/lang/packages/{locale}/{package}
directory.So,forexample,ifyouneedtooverridetheEnglishlanguagelinesin messages.php fora
packagenamed skyrim/hearthfire ,youwouldplacealanguagefileat: app/lang/packages/en/hearthfire/messages.php .
Inthisfileyouwoulddefineonlythelanguagelinesyouwishtooverride.Anylanguagelinesyou
don’toverridewillstillbeloadedfromthepackage’slanguagefiles.
Mail
•Configuration
•BasicUsage
•EmbeddingInlineAttachments
•QueueingMail
•Mail&LocalDevelopment
Configuration
Laravelprovidesaclean,simpleAPIoverthepopular SwiftMailer ⁸³library.Themailconfiguration
file is app/config/mail.php , and contains options allowing you to change your SMTP host, port,
and credentials, as well as set a global fromaddress for all messages delivered by the library. You
may use any SMTP server you wish. If you wish to use the PHP mailfunction to send mail, you
maychangethe drivertomailintheconfigurationfile.A sendmail driverisalsoavailable.
Basic Usage
The Mail::send methodmaybeusedtosendane-mailmessage:
..Mail ::send ('emails.welcome' ,$data ,function ($message )
{
$message ->to('foo@example.com' ,'John Smith' )->subject ('Welcome!' );
});
The first argument passed to the sendmethod is the name of the view that should be used as the
e-mail body. The second is the $datathat should be passed to the view, and the third is a Closure
allowingyoutospecifyvariousoptionsonthee-mailmessage.
Note:A$message variable is always passed to e-mail views, and allows the inline
embeddingofattachments. So,itisbesttoavoidpassinga messagevariableinyourview
payload.
⁸³http://swiftmailer.org
Mail 142
YoumayalsospecifyaplaintextviewtouseinadditiontoanHTMLview:
..Mail ::send (array ('html.view' ,'text.view' ),$data ,$callback );
Or,youmayspecifyonlyonetypeofviewusingthe htmlortextkeys:
..Mail ::send (array ('text' =>'view' ),$data ,$callback );
You may specify other options on the e-mail message such as any carbon copies or attachments as
well:
..Mail ::send ('emails.welcome' ,$data ,function ($message )
{
$message ->from ('us@example.com' ,'Laravel' );
$message ->to('foo@example.com' )->cc('bar@example.com' );
$message ->attach ($pathToFile );
});
Whenattachingfilestoamessage,youmayalsospecifyaMIMEtypeand/oradisplayname:
..$message ->attach ($pathToFile ,array ('as' =>$display ,'mime' =>$mime ));
Note:The message instance passed to a Mail::send Closure extends the SwiftMailer
message class, allowing you to call any method on that class to build your e-mail
messages.
Mail 143
Embedding Inline Attachments
Embedding inline images into your e-mails is typically cumbersome; however, Laravel provides a
convenientwaytoattachimagestoyoure-mailsandretrievingtheappropriateCID.
Embedding An Image In An E-Mail View
..<body >
Here is an image :
<img src ="<?php echo $message->embed ($pathToFile ); ?> ">
</body >
Embedding Raw Data In An E-Mail View
..<body >
Here is an image from raw data :
<img src ="<?php echo $message->embedData ($data ,$name ); ?> ">
</body >
Notethatthe $message variableisalwayspassedtoe-mailviewsbythe Mailclass.
Queueing Mail
Sincesendinge-mailmessagescandrasticallylengthentheresponsetimeofyourapplication,many
developerschoosetoqueuee-mailmessagesforbackgroundsending.Laravelmakesthiseasyusing
its built-in unified queue API . To queue a mail message, simply use the queuemethod on the Mail
class:
Queueing A Mail Message
Mail 144
..Mail ::queue ('emails.welcome' ,$data ,function ($message )
{
$message ->to('foo@example.com' ,'John Smith' )->subject ('Welcome!' );
});
You may also specify the number of seconds you wish to delay the sending of the mail message
usingthe latermethod:
..Mail ::later (5,'emails.welcome' ,$data ,function ($message )
{
$message ->to('foo@example.com' ,'John Smith' )->subject ('Welcome!' );
});
Ifyouwishtospecifyaspecificqueueor“tube”onwhichtopushthemessage,youmaydosousing
thequeueOnandlaterOnmethods:
..Mail ::queueOn ('queue-name' ,'emails.welcome' ,$data ,function ($message )
{
$message ->to('foo@example.com' ,'John Smith' )->subject ('Welcome!' );
});
Mail & Local Development
When developing an application that sends e-mail, it’s usually desirable to disable the sending
of messages from your local or development environment. To do so, you may either call the
Mail::pretend method,orsetthe pretendoptioninthe app/config/mail.php configurationfileto
true. When the mailer is in pretendmode, messages will be written to your application’s log files
insteadofbeingsenttotherecipient.
Enabling Pretend Mail Mode
Mail 145
..Mail ::pretend ();
Package Development
•Introduction
•CreatingAPackage
•PackageStructure
•ServiceProviders
•PackageConventions
•DevelopmentWorkflow
•PackageRouting
•PackageConfiguration
•PackageViews
•PackageMigrations
•PackageAssets
•PublishingPackages
Introduction
PackagesaretheprimarywayofaddingfunctionalitytoLaravel.Packagesmightbeanythingfrom
agreatwaytoworkwithdateslike Carbon⁸⁴,oranentireBDDtestingframeworklike Behat⁸⁵.
Ofcourse,therearedifferenttypesofpackages.Somepackagesarestand-alone,meaningtheywork
withanyframework,notjustLaravel.BothCarbonandBehatareexamplesofstand-alonepackages.
AnyofthesepackagesmaybeusedwithLaravelbysimplyrequestingtheminyour composer.json
file.
On the other hand, other packages are specifically intended for use with Laravel. In previous
versions of Laravel, these types of packages were called “bundles”. These packages may have
routes,controllers,views,configuration,andmigrationsspecificallyintendedtoenhanceaLaravel
application. As no special process is needed to develop stand-alone packages, this guide primarily
coversthedevelopmentofthosethatareLaravelspecific.
All Laravel packages are distributed via Packagist⁸⁶andComposer ⁸⁷, so learning about these
wonderfulPHPpackagedistributiontoolsisessential.
⁸⁴https://github.com/briannesbitt/Carbon
⁸⁵https://github.com/Behat/Behat
⁸⁶http://packagist.org
⁸⁷http://getcomposer.org
PackageDevelopment 147
Creating A Package
The easiest way to create a new package for use with Laravel is the workbench Artisan command.
First,youwillneedtosetafewoptionsinthe app/config/workbench.php file.Inthatfile,youwill
find a nameand emailoption. These values will be used to generate a composer.json file for your
newpackage.Onceyouhavesuppliedthosevalues,youarereadytobuildaworkbenchpackage!
Issuing The Workbench Artisan Command
..php artisan workbench vendor /package --resources
Thevendornameisawaytodistinguishyourpackagefromotherpackagesofthesamenamefrom
differentauthors.Forexample,ifI(TaylorOtwell)weretocreateanewpackagenamed“Zapper”,the
vendornamecouldbe Taylorwhilethepackagenamewouldbe Zapper.Bydefault,theworkbench
willcreateframeworkagnosticpackages;however,the resources commandtellstheworkbenchto
generatethepackagewithLaravelspecificdirectoriessuchas migrations ,views,config,etc.
Once the workbench command has been executed, your package will be available within the
workbench directory of your Laravel installation. Next, you should register the ServiceProvider
that was created for your package. You may register the provider by adding it to the providers
array in the app/config/app.php file. This will instruct Laravel to load your package when your
applicationstarts.Serviceprovidersusea [Package]ServiceProvider namingconvention.So,using
theexampleabove,youwouldadd Taylor\Zapper\ZapperServiceProvider tothe providers array.
Once the provider has been registered, you are ready to start developing your package! However,
beforedivingin,youmaywishtoreviewthesectionsbelowtogetmorefamiliarwiththepackage
structureanddevelopmentworkflow.
Note:If your service provider cannot be found, run the php artisan dump-autoload
commandfromyourapplication’srootdirectory
Package Structure
When using the workbench command, your package will be setup with conventions that allow the
packagetointegratewellwithotherpartsoftheLaravelframework:
Basic Package Directory Structure
PackageDevelopment 148
../src
/Vendor
/Package
PackageServiceProvider .php
/config
/lang
/migrations
/views
/tests
/public
Let’s explore this structure further. The src/Vendor/Package directory is the home of all of
your package’s classes, including the ServiceProvider . The config,lang,migrations , and views
directories,asyoumightguess,containthecorrespondingresourcesforyourpackage.Packagesmay
haveanyoftheseresources,justlike“regular”applications.
Service Providers
Service providers are simply bootstrap classes for packages. By default, they contain two methods:
bootand register. Within these methods you may do anything you like: include a routes file,
registerbindingsintheIoCcontainer,attachtoevents,oranythingelseyouwishtodo.
The registermethodiscalledimmediatelywhentheserviceproviderisregistered,whilethe boot
commandisonlycalledrightbeforearequestisrouted.So,ifactionsinyourserviceproviderrelyon
anotherserviceprovideralreadybeingregistered,oryouareoverridingservicesboundbyanother
provider,youshouldusethe bootmethod.
Whencreatingapackageusingthe workbench ,the bootcommandwillalreadycontainoneaction:
..$this ->package ('vendor/package' );
This method allows Laravel to know how to properly load the views, configuration, and other
resources for your application. In general, there should be no need for you to change this line of
code,asitwillsetupthepackageusingtheworkbenchconventions.
By default, after registering a package, its resources will be available using the “package” half of
vendor/package . However, you may pass a second argument into the packagemethod to override
thisbehavior.Forexample:
PackageDevelopment 149
..// Passing custom namespace to package method
$this ->package ('vendor/package' ,'custom-namespace' );
// Package resources now accessed via custom-namespace
$view =View ::make ('custom-namespace::foo' );
Thereisnota“defaultlocation”forserviceproviderclasses.Youmayputthemanywhereyoulike,
perhaps organizing them in a Providers namespace within your appdirectory. The file may be
placedanywhere,aslongasComposer’s auto-loadingfacilities ⁸⁸knowhowtoloadtheclass.
Package Conventions
When utilizing resources from a package, such as configuration items or views, a double-colon
syntaxwillgenerallybeused:
Loading A View From A Package
..return View ::make ('package::view.name' );
Retrieving A Package Configuration Item
..return Config ::get('package::group.option' );
Note:Ifyourpackagecontainsmigrations,considerprefixingthemigrationnamewith
yourpackagenametoavoidpotentialclassnameconflictswithotherpackages.
⁸⁸http://getcomposer.org/doc/01-basic-usage.md#autoloading
PackageDevelopment 150
Development Workflow
When developing a package, it is useful to be able to develop within the context of an application,
allowingyoutoeasilyviewandexperimentwithyourtemplates,etc.So,togetstarted,installafresh
copyoftheLaravelframework,thenusethe workbench commandtocreateyourpackagestructure.
Afterthe workbench commandhascreatedyourpackage.Youmay git initfromthe workbench/[vendor]/[package]
directory and git push your package straight from the workbench! This will allow you to
convenientlydevelopthepackageinanapplicationcontextwithoutbeingboggeddownbyconstant
composer update commands.
Sinceyourpackagesareinthe workbench directory,youmaybewonderinghowComposerknows
toautoloadyourpackage’sfiles.Whenthe workbench directoryexists,Laravelwillintelligentlyscan
itforpackages,loadingtheirComposerautoloadfileswhentheapplicationstarts!
Ifyouneedtoregenerateyourpackage’sautoloadfiles,youmayusethe php artisan dump-autoload
command. This command will regenerate the autoload files for your root project, as well as any
workbenchesyouhavecreated.
Running The Artisan Autoload Command
..php artisan dump -autoload
Package Routing
In prior versions of Laravel, a handlesclause was used to specify which URIs a package could
respondto.However,inLaravel4,apackagemayrespondtoanyURI.Toloadaroutesfileforyour
package,simply includeitfromwithinyourserviceprovider’s bootmethod.
Including A Routes File From A Service Provider
..public function boot ()
{
$this ->package ('vendor/package' );
include __DIR__ .'/../../routes.php' ;
}
PackageDevelopment 151
..
Note:Ifyourpackageisusingcontrollers,youwillneedtomakesuretheyareproperly
configuredinyour composer.json file’sauto-loadsection.
Package Configuration
Some packages may require configuration files. These files should be defined in the same way
as typical application configuration files. And, when using the default $this->package method
of registering resources in your service provider, may be accessed using the usual “double-colon”
syntax:
Accessing Package Configuration Files
..Config ::get('package::file.option' );
However, if your package contains a single configuration file, you may simply name the file
config.php . When this is done, you may access the options directly, without specifying the file
name:
Accessing Single File Package Configuration
..Config ::get('package::option' );
Sometimes, you may wish to register package resources such as views outside of the typical
$this->package method. Typically, this would only be done if the resources were not in a
conventional location. To register the resources manually, you may use the addNamespace method
ofthe View,Lang,and Configclasses:
Registering A Resource Namespace Manually
PackageDevelopment 152
..View ::addNamespace ('package' , __DIR__ .'/path/to/views' );
Oncethenamespacehasbeenregistered,youmayusethenamespacenameandthe“doublecolon”
syntaxtoaccesstheresources:
..return View ::make ('package::view.name' );
Themethodsignaturefor addNamespace isidenticalonthe View,Lang,and Configclasses.
Cascading Configuration Files
When other developers install your package, they may wish to override some of the configuration
options. However, if they change the values in your package source code, they will be overwritten
thenexttimeComposerupdatesthepackage.Instead,the config:publish artisancommandshould
beused:
Executing The Config Publish Command
..php artisan config :publish vendor /package
When this command is executed, the configuration files for your application will be copied to
app/config/packages/vendor/package wheretheycanbesafelymodifiedbythedeveloper!
Note:The developer may also create environment specific configuration files for your
packagebyplacingthemin app/config/packages/vendor/package/environment .
Package Views
If you are using a package in your application, you may occasionally wish to customize the
package’s views. You can easily export the package views to your own app/views directory using
theview:publish Artisancommand:
PackageDevelopment 153
..php artisan view :publish vendor /package
This command will move the package’s views into the app/views/packages directory. If this
directorydoesn’talreadyexist,itwillbecreatedwhenyourunthecommand.Oncetheviewshave
been published, you may tweak them to your liking! The exported views will automatically take
precendenceoverthepackage’sownviewfiles.
Package Migrations
You may easily create and run migrations for any of your packages. To create a migration for a
packageintheworkbench,usethe --benchoption:
Creating Migrations For Workbench Packages
..php artisan migrate :make create_users_table --bench ="vendor/package "
Running Migrations For Workbench Packages
..php artisan migrate --bench ="vendor/package "
TorunmigrationsforafinishedpackagethatwasinstalledviaComposerintothe vendordirectory,
youmayusethe --package directive:
Running Migrations For An Installed Package
..php artisan migrate --package ="vendor/package "
PackageDevelopment 154
Package Assets
Some packages may have assets such as JavaScript, CSS, and images. However, we are unable to
linktoassetsinthe vendororworkbench directories,soweneedawaytomovetheseassetsintothe
publicdirectoryofourapplication.The asset:publish commandwilltakecareofthisforyou:
Moving Package Assets To Public
..php artisan asset :publish
php artisan asset :publish vendor /package
Ifthepackageisstillinthe workbench ,usethe --benchdirective:
..php artisan asset :publish --bench ="vendor/package "
This command will move the assets into the public/packages directory according to the vendor
and package name. So, a package named userscape/kudos would have its assets moved to
public/packages/userscape/kudos . Using this asset publishing convention allows you to safely
codeassetpathsinyourpackage’sviews.
Publishing Packages
Whenyourpackageisreadytopublish,youshouldsubmitthepackagetothe Packagist⁸⁹repository.
IfthepackageisspecifictoLaravel,consideraddinga laraveltagtoyourpackage’s composer.json
file.
Also,itiscourteousandhelpfultotagyourreleasessothatdeveloperscandependonstableversions
whenrequestingyourpackageintheir composer.json files.Ifastableversionisnotready,consider
usingthe branch-alias Composerdirective.
Once your package has been published, feel free to continue developing it within the application
contextcreatedby workbench .Thisisagreatwaytocontinuetoconvenientlydevelopthepackage
evenafterithasbeenpublished.
⁸⁹http://packagist.org
PackageDevelopment 155
Someorganizationschoosetohosttheirownprivaterepositoryofpackagesfortheirowndevelopers.
Ifyouareinterestedindoingthis,reviewthedocumentationforthe Satis⁹⁰projectprovidedbythe
Composerteam.
⁹⁰http://github.com/composer/satis
Pagination
•Configuration
•Usage
•AppendingToPaginationLinks
•ConvertingToJSON
Configuration
In other frameworks, pagination can be very painful. Laravel makes it a breeze. There is a single
configurationoptioninthe app/config/view.php file.The pagination optionspecifieswhichview
shouldbeusedtocreatepaginationlinks.Bydefault,Laravelincludestwoviews.
The pagination::slider viewwill show an intelligent“range”of links based on the currentpage,
while the pagination::simple view will simply show “previous” and “next” buttons. Both views
are compatible with Twitter Bootstrap out of the box.
Usage
There are several ways to paginate items. The simplest is by using the paginate method on the
querybuilderoranEloquentmodel.
Paginating Database Results
..$users =DB::table ('users' )->paginate (15);
Youmayalsopaginate Eloquentmodels:
Paginating An Eloquent Model
Pagination 157
..$allUsers =User ::paginate (15);
$someUsers =User ::where ('votes' ,'>',100)->paginate (15);
Theargumentpassedtothe paginate methodisthenumberofitemsyouwishtodisplayperpage.
Onceyouhaveretrievedtheresults,youmaydisplaythemonyourview,andcreatethepagination
linksusingthe linksmethod:
..<div class ="container ">
<?php foreach ($users as$user ):?>
<?php echo $user ->name ;?>
<?php endforeach ;?>
</div>
<?php echo $users ->links (); ?>
Thisisallittakestocreateapaginationsystem!Notethatwedidnothavetoinformtheframework
ofthecurrentpage.Laravelwilldeterminethisforyouautomatically.
Ifyouwouldliketospecifyacustomviewtouseforpagination,youmaypassaviewtothe links
method:
..<?php echo $users ->links ('view.name' );?>
Youmayalsoaccessadditionalpaginationinformationviathefollowingmethods:
•getCurrentPage
•getLastPage
•getPerPage
•getTotal
•getFrom
•getTo
•count
Pagination 158
Sometimesyoumaywishtocreateapaginationinstancemanually,passingitanarrayofitems.You
maydosousingthe Paginator::make method:
Creating A Paginator Manually
..$paginator =Paginator ::make ($items ,$totalItems ,$perPage );
Customizing The Paginator URI
YoumayalsocustomizetheURIusedbythepaginatorviathe setBaseUrl method:
..$users =User ::paginate ();
$users ->setBaseUrl ('custom/url' );
TheexampleabovewillcreateURLslikethefollowing:http://example.com/custom/url?page=2
Appending To Pagination Links
Youcanaddtothequerystringofpaginationlinksusingthe appendsmethodonthePaginator:
..<?php echo $users ->appends (array ('sort' =>'votes' ))->links (); ?>
ThiswillgenerateURLsthatlooksomethinglikethis:
..http ://example .com/something ?page =2&sort =votes
Ifyouwishtoappenda“hashfragment”tothepaginator’sURLs,youmayusethe fragmentmethod:
Pagination 159
..<?php echo $users ->fragment ('foo' )->links (); ?>
ThismethodcallwillgenerateURLsthatlooksomethinglikethis:
..http ://example .com/something ?page =2#foo
Converting To JSON
ThePaginator classimplementsthe Illuminate\Support\Contracts\JsonableInterface contract
and exposes the toJsonmethod. You can may also convert a Paginator instance to JSON by
returning it from a route. The JSON’d form of the instance will include some “meta” information
suchas total,current_page ,last_page ,from,and to.Theinstance’sdatawillbeavailableviathe
datakeyintheJSONarray.
Queues
•Configuration
•BasicUsage
•QueueingClosures
•RunningTheQueueListener
•PushQueues
•FailedJobs
Configuration
The Laravel Queue component provides a unified API across a variety of different queue services.
Queuesallowyoutodefertheprocessingofatimeconsumingtask,suchassendingane-mail,until
alatertime,thusdrasticallyspeedingupthewebrequeststoyourapplication.
Thequeueconfigurationfileisstoredin app/config/queue.php .Inthisfileyouwillfindconnection
configurationsforeachofthequeuedriversthatareincludedwiththeframework,whichincludes
aBeanstalkd ⁹¹,IronMQ⁹²,AmazonSQS ⁹³,Redis⁹⁴,andsynchronous(forlocaluse)driver.
Thefollowingdependenciesareneededforthelistedqueuedrivers:
•Beanstalkd: pda/pheanstalk
•AmazonSQS: aws/aws-sdk-php
•IronMQ: iron-io/iron_mq
Basic Usage
Topushanewjobontothequeue,usethe Queue::push method:
Pushing A Job Onto The Queue
⁹¹http://kr.github.com/beanstalkd
⁹²http://iron.io
⁹³http://aws.amazon.com/sqs
⁹⁴http://redis.io
Queues 161
..Queue ::push ('SendEmail' ,array ('message' =>$message ));
Thefirstargumentgiventothe pushmethodisthenameoftheclassthatshouldbeusedtoprocess
thejob.Thesecondargumentisanarrayofdatathatshouldbepassedtothehandler.Ajobhandler
shouldbedefinedlikeso:
Defining A Job Handler
..class SendEmail {
public function fire ($job ,$data )
{
//
}
}
Notice the only method that is required is fire, which receives a Jobinstance as well as the array
ofdatathatwaspushedontothequeue.
If you want the job to use a method other than fire, you may specify the method when you push
thejob:
Specifying A Custom Handler Method
..Queue ::push ('SendEmail@send' ,array ('message' =>$message ));
Specifying The Queue / Tube For A Job
Youmayalsospecifythequeue/tubeajobshouldbesentto:
Queues 162
..Queue ::push ('SendEmail@send' ,array ('message' =>$message ),'emails' );
Passing The Same Payload To Multiple Jobs
Ifyouneedtopassthesamedatatoseveralqueuejobs,youmayusethe Queue::bulk method:
..Queue ::bulk (array ('SendEmail' ,'NotifyUser' ),$payload );
Sometimesyoumaywishtodelaytheexecuteofaqueuedjob.Forinstance,youmaywishtoqueue
a job that sends a customer an e-mail 15 minutes after sign-up. You can accomplish this using the
Queue::later method:
Delaying The Execution Of A Job
..$date =Carbon ::now()->addMinutes (15);
Queue ::later ($date ,'SendEmail@send' ,array ('message' =>$message ));
Inthisexample,we’reusingthe Carbon⁹⁵datelibrarytospecifythedelaywewishtoassigntothe
job.Alternatively,youmaypassthenumberofsecondsyouwishtodelayasaninteger.
Onceyouhaveprocessedajob,itmustbedeletedfromthequeue,whichcanbedoneviathe delete
methodonthe Jobinstance:
Deleting A Processed Job
⁹⁵https://github.com/briannesbitt/Carbon
Queues 163
..public function fire ($job ,$data )
{
// Process the job...
$job ->delete ();
}
Ifyouwishtoreleaseajobbackontothequeue,youmaydosoviathe releasemethod:
Releasing A Job Back Onto The Queue
..public function fire ($job ,$data )
{
// Process the job...
$job ->release ();
}
Youmayalsospecifythenumberofsecondstowaitbeforethejobisreleased:
..$job ->release (5);
If an exception occurs while the job is being processed, it will automatically be released back onto
the queue. You may check the number of attempts that have been made to run the job using the
attempts method:
Checking The Number Of Run Attempts
Queues 164
..if($job ->attempts ()>3)
{
//
}
Youmayalsoaccessthejobidentifier:
Accessing The Job ID
..$job ->getJobId ();
Queueing Closures
You may also push a Closure onto the queue. This is very convenient for quick, simple tasks that
needtobequeued:
Pushing A Closure Onto The Queue
..Queue ::push (function ($job )use ($id)
{
Account ::delete ($id);
$job ->delete ();
});
Note:When pushing Closures onto the queue, the __DIR__and __FILE__ constants
shouldnotbeused.
When using Iron.io push queues , you should take extra precaution queueing Closures. The end-
point that receives your queue messages should check for a token to verify that the request
is actually from Iron.io. For example, your push queue end-point should be something like:
https://yourapp.com/queue/receive?token=SecretToken . You may then check the value of the
secrettokeninyourapplicationbeforemarshalingthequeuerequest.
Queues 165
Running The Queue Listener
LaravelincludesanArtisantaskthatwillrunnewjobsastheyarepushedontothequeue.Youmay
runthistaskusingthe queue:listen command:
Starting The Queue Listener
..php artisan queue :listen
Youmayalsospecifywhichqueueconnectionthelistenershouldutilize:
..php artisan queue :listen connection
Notethatoncethistaskhasstarted,itwillcontinuetorununtilitismanuallystopped.Youmayuse
aprocessmonitorsuchas Supervisor ⁹⁶toensurethatthequeuelistenerdoesnotstoprunning.
You may pass a comma-delimited list of queue connections to the listencommand to set queue
priorities:
..php artisan queue :listen high -connection,low -connection
In this example, jobs on the high-connection will always be processed before moving onto jobs
fromthe low-connection .
Specifying The Job Timeout Parameter
Youmayalsosetthelengthoftime(inseconds)eachjobshouldbeallowedtorun:
⁹⁶http://supervisord.org/
Queues 166
..php artisan queue :listen --timeout =60
Specifying Queue Sleep Duration
Inaddition,youmayspecifythenumberofsecondstowaitbeforepollingfornewjobs:
..php artisan queue :listen --sleep =5
Note that the queue only “sleeps” if no jobs are on the queue. If more jobs are available, the queue
willcontinuetoworkthemwithoutsleeping.
Processing The First Job On The Queue
Toprocessonlythefirstjobonthequeue,youmayusethe queue:work command:
..php artisan queue :work
Push Queues
Push queues allow you to utilize the powerful Laravel 4 queue facilities without running any
daemons or background listeners. Currently, push queues are only supported by the Iron.io⁹⁷
driver. Before getting started, create an Iron.io account, and add your Iron credentials to the
app/config/queue.php configurationfile.
Next, you may use the queue:subscribe Artisan command to register a URL end-point that will
receivenewlypushedqueuejobs:
Registering A Push Queue Subscriber
⁹⁷http://iron.io
Queues 167
..php artisan queue :subscribe queue_name http ://foo.com/queue /receive
Now, when you login to your Iron dashboard, you will see your new push queue, as well as the
subscribed URL. You may subscribe as many URLs as you wish to a given queue. Next, create a
routeforyour queue/receive end-pointandreturntheresponsefromthe Queue::marshal method:
..Route ::post ('queue/receive' ,function ()
{
return Queue ::marshal ();
});
The marshalmethodwilltakecareoffiringthecorrectjobhandlerclass.Tofirejobsontothepush
queue,justusethesame Queue::push methodusedforconventionalqueues.
Failed Jobs
Since things don’t always go as planned, sometimes your queued jobs will fail. Don’t worry, it
happens to the best of us! Laravel includes a convenient way to specify the maximum number
of times a job should be attempted. After a job has exceeded this amount of attempts, it will
be inserted into a failed_jobs table. The failed jobs table name can be configured via the
app/config/queue.php configurationfile.
Tocreateamigrationforthe failed_jobs table,youmayusethe queue:failed-table command:
..php artisan queue :failed -table
Youcanspecifythemaximumnumberoftimesajobshouldbeattemptedusingthe --triesswitch
onthe queue:listen command:
..php artisan queue :listen connection -name --tries =3
Queues 168
If you would like to register an event that will be called when a queue job fails, you may use
theQueue::failing method. This event is a great opportunity to notify your team via e-mail or
HipChat⁹⁸.
..Queue ::failing (function ($job ,$data )
{
//
});
Toviewallofyourfailedjobs,youmayusethe queue:failed Artisancommand:
..php artisan queue :failed
Thequeue:failed commandwilllistthejobID,connection,queue,andfailuretime.ThejobIDmay
be used to retry the failed job. For instance, to retry a failed job that has an ID of 5, the following
commandshouldbeissued:
..php artisan queue :retry 5
Ifyouwouldliketodeleteafailedjob,youmayusethe queue:forget command:
..php artisan queue :forget 5
Todeleteallofyourfailedjobs,youmayusethe queue:flush command:
⁹⁸https://www.hipchat.com
Queues 169
..php artisan queue :flush
Security
•Configuration
•StoringPasswords
•AuthenticatingUsers
•ManuallyLoggingInUsers
•ProtectingRoutes
•HTTPBasicAuthentication
•PasswordReminders&Reset
•Encryption
Configuration
Laravelaimstomakeimplementingauthenticationverysimple.Infact,almosteverythingisconfig-
uredforyououtofthebox.Theauthenticationconfigurationfileislocatedat app/config/auth.php ,
which contains several well documented options for tweaking the behavior of the authentication
facilities.
Bydefault,Laravelincludesa Usermodelinyour app/models directorywhichmaybeusedwiththe
defaultEloquentauthenticationdriver.PleaserememberwhenbuildingtheSchemaforthisModel
toensurethatthepasswordfieldisaminimumof60characters.
If your application is not using Eloquent, you may use the database authentication driver which
usestheLaravelquerybuilder.
Storing Passwords
TheLaravel HashclassprovidessecureBcrypthashing:
Hashing A Password Using Bcrypt
..$password =Hash ::make ('secret' );
Verifying A Password Against A Hash
Security 171
..if(Hash ::check ('secret' ,$hashedPassword ))
{
// The passwords match...
}
Checking If A Password Needs To Be Rehashed
..if(Hash ::needsRehash ($hashed ))
{
$hashed =Hash ::make ('secret' );
}
Authenticating Users
Tologauserintoyourapplication,youmayusethe Auth::attempt method.
..if(Auth ::attempt (array ('email' =>$email ,'password' =>$password )))
{
return Redirect ::intended ('dashboard' );
}
Takenotethat emailisnotarequiredoption,itismerelyusedforexample.Youshouldusewhatever
columnnamecorrespondstoa“username”inyourdatabase.The Redirect::intended functionwill
redirect the user to the URL they were trying to access before being caught by the authentication
filter.AfallbackURImaybegiventothismethodincasetheintendeddestinationisnotavailable.
When the attemptmethod is called, the auth.attempt eventwill be fired. If the authentication
attemptissuccessfulandtheuserisloggedin,the auth.login eventwillbefiredaswell.
Todetermineiftheuserisalreadyloggedintoyourapplication,youmayusethe checkmethod:
Security 172
Determining If A User Is Authenticated
..if(Auth ::check ())
{
// The user is logged in...
}
If you would like to provide “remember me” functionality in your application, you may pass true
asthesecondargumenttothe attemptmethod,whichwillkeeptheuserauthenticatedindefinitely
(oruntiltheymanuallylogout):
Authenticating A User And “Remembering” Them
..if(Auth ::attempt (array ('email' =>$email ,'password' =>$password ),true ))
{
// The user is being remembered...
}
Note:Ifthe attemptmethodreturns true,theuserisconsideredloggedintotheapplication.
Determining If User Authed Via Remember
Ifyouare“remembering”userlogins,youmayusethe viaRemember methodtodetermineiftheuser
wasauthenticatedusingthe“rememberme”cookie:
..if(Auth ::viaRemember ())
{
//
}
Youalsomayaddextraconditionstotheauthenticatingquery:
Security 173
Authenticating A User With Conditions
..if(Auth ::attempt (array ('email' =>$email ,'password' =>$password ,'active' =>1\
)))
{
// The user is active, not suspended, and exists.
}
Note:Foraddedprotectionagainstsessionfixation,theuser’ssessionIDwillautomat-
icallyberegeneratedafterauthenticating.
Onceauserisauthenticated,youmayaccesstheUsermodel/record:
Accessing The Logged In User
..$email =Auth ::user ()->email ;
TosimplylogauserintotheapplicationbytheirID,usethe loginUsingId method:
..Auth ::loginUsingId (1);
Thevalidatemethodallowsyoutovalidateauser’scredentialswithoutactuallyloggingtheminto
theapplication:
Validating User Credentials Without Login
..if(Auth ::validate ($credentials ))
{
//
}
Security 174
..
Youmayalsousethe oncemethodtologauserintotheapplicationforasinglerequest.Nosessions
orcookieswillbeutilized.
Logging A User In For A Single Request
..if(Auth ::once ($credentials ))
{
//
}
Logging A User Out Of The Application
..Auth ::logout ();
Manually Logging In Users
If you need to log an existing user instance into your application, you may simply call the login
methodwiththeinstance:
..$user =User ::find (1);
Auth ::login ($user );
Thisisequivalenttologginginauserviacredentialsusingthe attemptmethod.
Protecting Routes
Routefiltersmaybeusedtoallowonlyauthenticateduserstoaccessagivenroute.Laravelprovides
theauthfilterbydefault,anditisdefinedin app/filters.php .
Security 175
Protecting A Route
..Route ::get('profile' ,array ('before' =>'auth' ,function ()
{
// Only authenticated users may enter...
}));
CSRF Protection
Laravelprovidesaneasymethodofprotectingyourapplicationfromcross-siterequestforgeries.
Inserting CSRF Token Into Form
..<input type ="hidden "name ="_token "value ="<?php echo csrf_token(); ?> ">
Validate The Submitted CSRF Token
..Route ::post ('register' ,array ('before' =>'csrf' ,function ()
{
return 'You gave a valid CSRF token!' ;
}));
HTTP Basic Authentication
HTTPBasicAuthenticationprovidesaquickwaytoauthenticateusersofyourapplicationwithout
settingupadedicated“login”page.Togetstarted,attachthe auth.basic filtertoyourroute:
Protecting A Route With HTTP Basic
Security 176
..Route ::get('profile' ,array ('before' =>'auth.basic' ,function ()
{
// Only authenticated users may enter...
}));
By default, the basicfilter will use the emailcolumn on the user record when authenticating. If
youwishtouseanothercolumnyoumaypassthecolumnnameasthefirstparametertothe basic
method:
..return Auth ::basic ('username' );
YoumayalsouseHTTPBasicAuthenticationwithoutsettingauseridentifiercookieinthesession,
whichisparticularlyusefulforAPIauthentication.Todoso,defineafilterthatreturnsthe onceBasic
method:
Setting Up A Stateless HTTP Basic Filter
..Route ::filter ('basic.once' ,function ()
{
return Auth ::onceBasic ();
});
If you are using PHP FastCGI, HTTP Basic authentication will not work correctly by default. The
followinglinesshouldbeaddedtoyour .htaccess file:
..RewriteCond %{HTTP :Authorization} ^(.+)$
RewriteRule .*-[E=HTTP_AUTHORIZATION :%{HTTP :Authorization}]
Security 177
Password Reminders & Reset
Model & Table
Mostwebapplicationsprovideawayforuserstoresettheirforgottenpasswords.Ratherthanforcing
you to re-implement this on each application, Laravel provides convenient methods for sending
password reminders and performing password resets. To get started, verify that your Usermodel
implements the Illuminate\Auth\Reminders\RemindableInterface contract. Of course, the User
modelincludedwiththeframeworkalreadyimplementsthisinterface.
Implementing The RemindableInterface
..class User extends Eloquent implements RemindableInterface {
public function getReminderEmail ()
{
return $this ->email ;
}
}
Next, a table must be created to store the password reset tokens. To generate a migration for this
table,simplyexecutethe auth:reminders Artisancommand:
Generating The Reminder Table Migration
..php artisan auth :reminders -table
php artisan migrate
Password Reminder Controller
Now we’re ready to generate the password reminder controller. To automatically generate a
controller, you may use the auth:reminders-controller Artisan command, which will create a
RemindersController.php fileinyour app/controllers directory.
Security 178
..php artisan auth :reminders -controller
Thegeneratedcontrollerwillalreadyhavea getRemind methodthathandlesshowingyourpassword
reminderform.Allyouneedtodoiscreatea password.remind view.Thisviewshouldhaveabasic
formwithan emailfield.TheformshouldPOSTtothe RemindersController@postRemind action.
Asimpleformonthe password.remind viewmightlooklikethis:
..<form action ="{{action('RemindersController@postRemind') }} "method ="POST ">
<input type ="email "name ="email ">
<input type ="submit "value ="Send Reminder ">
</form >
In addition to getRemind , the generated controller will already have a postRemind method that
handlessendingthepasswordremindere-mailstoyourusers.Thismethodexpectsthe emailfield
to be present in the POSTvariables. If the reminder e-mail is successfully sent to the user, a status
messagewillbeflashedtothesession.Ifthereminderfails,an errormessagewillbeflashedinstead.
Youruserwillreceiveane-mailwithalinkthatpointstothe getResetmethodofthecontroller.The
password reminder token, which is used to identify a given password reminder attempt, will also
be passed to the controller method. The action is already configured to return a password.reset
view which you should build. The tokenwill be passed to the view, and you should place this
token in a hidden form field named token. In addition to the token, your password reset form
shouldcontain email,password,and password_confirmation fields.TheformshouldPOSTtothe
RemindersController@postReset method.
Asimpleformonthe password.reset viewmightlooklikethis:
..<form action ="{{action('RemindersController@postReset') }} "method ="POST ">
<input type ="hidden "name ="token "value ="{{$token }}">
<input type ="email "name ="email ">
<input type ="password "name ="password ">
<input type ="password "name ="password_confirmation ">
<input type ="submit "value ="Reset Password ">
</form >
Security 179
Finally,the postReset methodisresponsibleforactuallychangingthepasswordinstorage.Inthis
controller action, the Closure passed to the Password::reset method sets the password attribute
on the Userand calls the savemethod. Of course, this Closure is assuming your Usermodel is an
Eloquentmodel ;however,youarefreetochangethisClosureasneededtobecompatiblewithyour
application’sdatabasestoragesystem.
Ifthepasswordissuccessfullyreset,theuserwillberedirectedtotherootofyourapplication.Again,
youarefreetochangethisredirectURL.Ifthepasswordresetfails,theuserwillberedirectbackto
theresetform,andan errormessagewillbeflashedtothesession.
Password Validation
By default, the Password::reset method will verify that the passwords match and are >= six
characters.Youmaycustomizetheserulesusingthe Password::validator method,whichacceptsa
Closure.WithinthisClosure,youmaydoanypasswordvalidationyouwish.Notethatyouarenot
requiredtoverifythatthepasswordsmatch,asthiswillbedoneautomaticallybytheframework.
..Password ::validator (function ($credentials )
{
return strlen ($credentials ['password' ])>=8;
});
Note:Bydefault,passwordresettokensexpireafteronehour.Youmaychangethisvia
thereminder.expire optionofyour app/config/auth.php file.
Encryption
LaravelprovidesfacilitiesforstrongAES-256encryptionviathemcryptPHPextension:
Encrypting A Value
..$encrypted =Crypt ::encrypt ('secret' );
Note:Besuretoseta32character,randomstringinthe keyoptionofthe app/config/app.php
file.Otherwise,encryptedvalueswillnotbesecure.
Security 180
Decrypting A Value
..$decrypted =Crypt ::decrypt ($encryptedValue );
Youmayalsosetthecipherandmodeusedbytheencrypter:
Setting The Cipher & Mode
..Crypt ::setMode ('ctr' );
Crypt ::setCipher ($cipher );
Session
•Configuration
•SessionUsage
•FlashData
•DatabaseSessions
•SessionDrivers
Configuration
SinceHTTPdrivenapplicationsarestateless,sessionsprovideawaytostoreinformationaboutthe
user across requests. Laravel ships with a variety of session back-ends available for use through a
clean, unified API. Support for popular back-ends such as Memcached ⁹⁹,Redis¹⁰⁰, and databases is
includedoutofthebox.
The session configuration is stored in app/config/session.php . Be sure to review the well
documented options available to you in this file. By default, Laravel is configured to use the file
sessiondriver,whichwillworkwellforthemajorityofapplications.
Session Usage
Storing An Item In The Session
..Session ::put('key' ,'value' );
Push A Value Onto An Array Session Value
..Session ::push ('user.teams' ,'developers' );
⁹⁹http://memcached.org
¹⁰⁰http://redis.io
Session 182
Retrieving An Item From The Session
..$value =Session ::get('key' );
Retrieving An Item Or Returning A Default Value
..$value =Session ::get('key' ,'default' );
$value =Session ::get('key' ,function () { return 'default' ; });
Retrieving All Data From The Session
..$data =Session ::all();
Determining If An Item Exists In The Session
..if(Session ::has('users' ))
{
//
}
Removing An Item From The Session
..Session ::forget ('key' );
Session 183
..
Removing All Items From The Session
..Session ::flush ();
Regenerating The Session ID
..Session ::regenerate ();
Flash Data
Sometimesyoumaywishtostoreitemsinthesessiononlyforthenextrequest.Youmaydosousing
theSession::flash method:
..Session ::flash ('key' ,'value' );
Reflashing The Current Flash Data For Another Request
..Session ::reflash ();
Reflashing Only A Subset Of Flash Data
Session 184
..Session ::keep (array ('username' ,'email' ));
Database Sessions
Whenusingthe databasesessiondriver,youwillneedtosetupatabletocontainthesessionitems.
Belowisanexample Schemadeclarationforthetable:
..Schema ::create ('sessions' ,function ($table )
{
$table ->string ('id' )->unique ();
$table ->text ('payload' );
$table ->integer ('last_activity' );
});
Ofcourse,youmayusethe session:table Artisancommandtogeneratethismigrationforyou!
..php artisan session :table
composer dump -autoload
php artisan migrate
Session Drivers
The session “driver” defines where session data will be stored for each request. Laravel ships with
severalgreatdriversoutofthebox:
•file-sessionswillbestoredin app/storage/sessions .
•cookie-sessionswillbestoredinsecure,encryptedcookies.
•database -sessionswillbestoredinadatabaseusedbyyourapplication.
Session 185
•memcached /redis-sessionswillbestoredinoneofthesefast,cachedbasedstores.
•array-sessionswillbestoredinasimplePHParrayandwillnotbepersistedacrossrequests.
Note:The array driver is typically used for running unit tests, so no session data will be
persisted.
SSH
•Configuration
•BasicUsage
•Tasks
•SFTPUploads
•TailingRemoteLogs
Configuration
Laravel includes a simple way to SSH into remote servers and run commands, allowing you to
easilybuildArtisantasksthatworkonremoteservers.The SSHfacadeprovidestheaccesspointto
connectingtoyourremoteserversandrunningcommands.
Theconfigurationfileislocatedat app/config/remote.php ,andcontainsalloftheoptionsyouneed
toconfigureyourremoteconnections.The connections arraycontainsalistofyourserverskeyed
by name. Simple populate the credentials in the connections array and you will be ready to start
runningremotetasks.Notethatthe SSHcanauthenticateusingeitherapasswordoranSSHkey.
Basic Usage
Running Commands On The Default Server
Toruncommandsonyour defaultremoteconnection,usethe SSH::run method:
..SSH::run(array (
'cd /var/www' ,
'git pull origin master' ,
));
Running Commands On A Specific Connection
Alternatively,youmayruncommandsonaspecificconnectionusingthe intomethod:
SSH 187
..SSH::into ('staging' )->run(array (
'cd /var/www' ,
'git pull origin master' ,
));
Catching Output From Commands
Youmaycatchthe“live”outputofyourremotecommandsbypassingaClosureintothe runmethod:
..SSH::run($commands ,function ($line )
{
echo $line .PHP_EOL;
});
Tasks
If you need to define a group of commands that should always be run together, you may use the
definemethodtodefinea task:
..SSH::into ('staging' )->define ('deploy' ,array (
'cd /var/www' ,
'git pull origin master' ,
'php artisan migrate' ,
));
Oncethetaskhasbeendefined,youmayusethe taskmethodtorunit:
SSH 188
..SSH::into ('staging' )->task ('deploy' ,function ($line )
{
echo $line .PHP_EOL;
});
SFTP Uploads
The SSHclassalsoincludesasimplewaytouploadfiles,orevenstrings,totheserverusingthe put
andputString methods:
..SSH::into ('staging' )->put($localFile ,$remotePath );
SSH::into ('staging' )->putString ('Foo' ,$remotePath );
Tailing Remote Logs
Laravel includes a helpful command for tailing the laravel.log files on any of your remote
connections.Simpleusethe tailArtisancommandandspecifythenameoftheremoteconnection
youwouldliketotail:
..php artisan tail staging
php artisan tail staging --path =/path /to/log.file
Templates
•ControllerLayouts
•BladeTemplating
•OtherBladeControlStructures
Controller Layouts
OnemethodofusingtemplatesinLaravelisviacontrollerlayouts.Byspecifyingthe layoutproperty
on the controller, the view specified will be created for you and will be the assumed response that
shouldbereturnedfromactions.
Defining A Layout On A Controller
..class UserController extends BaseController {
/**
* The layout that should be used for responses.
*/
protected $layout ='layouts.master' ;
/**
* Show the user profile.
*/
public function showProfile ()
{
$this ->layout ->content =View ::make ('user.profile' );
}
}
Blade Templating
Bladeisasimple,yetpowerfultemplatingengineprovidedwithLaravel.Unlikecontrollerlayouts,
Bladeisdrivenby template inheritance andsections.AllBladetemplatesshouldusethe .blade.php
extension.
Templates 190
Defining A Blade Layout
..<!-- Stored in app /views /layouts /master .blade .php -->
<html >
<body >
@section( 'sidebar' )
This is the master sidebar .
@show
<div class ="container ">
@yield( 'content' )
</div>
</body >
</html >
Using A Blade Layout
..@extends ('layouts.master' )
@section( 'sidebar' )
@parent
<p>This is appended to the master sidebar .</p>
@stop
@section( 'content' )
<p>This is my body content .</p>
@stop
Notethatviewswhich extendaBladelayoutsimplyoverridesectionsfromthelayout.Contentof
thelayoutcanbeincludedinachildviewusingthe @parentdirectiveinasection,allowingyouto
appendtothecontentsofalayoutsectionsuchasasidebarorfooter.
Sometimes, such as when you are not sure if a section has been defined, you may wish to pass a
defaultvaluetothe @yielddirective.Youmaypassthedefaultvalueasthesecondargument:
Templates 191
..@yield( 'section' ,'Default Content' );
Other Blade Control Structures
Echoing Data
..Hello, {{{ $name }}}.
The current UNIX timestamp is {{{ time () }}} .
Echoing Data After Checking For Existence
Sometimesyoumaywishtoechoavariable,butyouaren’tsureifthevariablehasbeenset.Basically,
youwanttodothis:
..{{{ isset ($name )?$name :'Default' }}}
However,insteadofwritingaternarystatement,Bladeallowsyoutousethefollowingconvenient
short-cut:
..{{{ $name or'Default' }}}
Displaying Raw Text With Curly Braces
If you need to display a string that is wrapped in curly braces, you may escape the Blade behavior
byprefixingyourtextwithan @symbol:
Templates 192
..@{{This will not be processed by Blade }}
Of course, all user supplied data should be escaped or purified. To escape the output, you may use
thetriplecurlybracesyntax:
..Hello, {{{ $name }}}.
Ifyoudon’twantthedatatobeescaped,youmayusedoublecurly-braces:
..Hello, {{ $name }}.
Note:Beverycarefulwhenechoingcontentthatissuppliedbyusersofyourapplication.
AlwaysusethetriplecurlybracesyntaxtoescapeanyHTMLentitiesinthecontent.
If Statements
..@if(count ($records )=== 1)
I have one record !
@elseif (count ($records )>1)
I have multiple records !
@else
I don 't have any records !
@endif
@unless (Auth ::check ())
You are not signed in .
@endunless
Templates 193
Loops
..@for ($i=0;$i<10;$i++)
The current value is {{ $i}}
@endfor
@foreach ($users as$user )
<p>This is user {{ $user ->id}}</p>
@endforeach
@while (true )
<p>I'm looping forever .</p>
@endwhile
Including Sub-Views
..@include ('view.name' )
Youmayalsopassanarrayofdatatotheincludedview:
..@include ('view.name' ,array ('some' =>'data' ))
Overwriting Sections
Bydefault,sectionsareappendedtoanypreviouscontentthatexistsinthesection.Tooverwritea
sectionentirely,youmayusethe overwrite statement:
Templates 194
..@extends ('list.item.container' )
@section( 'list.item.content' )
<p>This is an item of type {{ $item ->type }}</p>
@overwrite
Displaying Language Lines
..@lang( 'language.line' )
@choice( 'language.line' ,1);
Comments
..{{--This comment will not be in the rendered HTML --}}
Unit Testing
•Introduction
•Defining&RunningTests
•TestEnvironment
•CallingRoutesFromTests
•MockingFacades
•FrameworkAssertions
•HelperMethods
•RefreshingTheApplication
Introduction
Laravelisbuiltwithunittestinginmind.Infact,supportfortestingwithPHPUnitisincludedout
of the box, and a phpunit.xml file is already setup for your application. In addition to PHPUnit,
Laravel also utilizes the Symfony HttpKernel, DomCrawler, and BrowserKit components to allow
youtoinspectandmanipulateyourviewswhiletesting,allowingtosimulateawebbrowser.
An example test file is provided in the app/tests directory. After installing a new Laravel
application,simplyrun phpunitonthecommandlinetorunyourtests.
Defining & Running Tests
To create a test case, simply create a new test file in the app/tests directory. The test class should
extend TestCase.YoumaythendefinetestmethodsasyounormallywouldwhenusingPHPUnit.
An Example Test Class
UnitTesting 196
..class FooTest extends TestCase {
public function testSomethingIsTrue ()
{
$this ->assertTrue (true );
}
}
You may run all of the tests for your application by executing the phpunitcommand from your
terminal.
Note:Ifyoudefineyourown setUpmethod,besuretocall parent::setUp .
Test Environment
Whenrunningunittests,Laravelwillautomaticallysettheconfigurationenvironmentto testing.
Also, Laravel includes configuration files for sessionand cachein the test environment. Both of
thesedriversaresetto arraywhileinthetestenvironment,meaningnosessionorcachedatawillbe
persistedwhiletesting.Youarefreetocreateothertestingenvironmentconfigurationsasnecessary.
Calling Routes From Tests
Youmayeasilycalloneofyourroutesforatestusingthe callmethod:
Calling A Route From A Test
..$response =$this ->call ('GET' ,'user/profile' );
$response =$this ->call ($method ,$uri ,$parameters ,$files ,$server ,$content );
Youmaytheninspectthe Illuminate\Http\Response object:
UnitTesting 197
..$this ->assertEquals ('Hello World' ,$response ->getContent ());
Youmayalsocallacontrollerfromatest:
Calling A Controller From A Test
..$response =$this ->action ('GET' ,'HomeController@index' );
$response =$this ->action ('GET' ,'UserController@profile' ,array ('user' =>1));
The getContent method will return the evaluated string contents of the response. If your route
returnsa View,youmayaccessitusingthe original property:
..$view =$response ->original ;
$this ->assertEquals ('John' ,$view ['name' ]);
TocallaHTTPSroute,youmayusethe callSecure method:
..$response =$this ->callSecure ('GET' ,'foo/bar' );
Note:Route filters aredisabled when in the testing environment.To enable them, add
Route::enableFilters() toyourtest.
DOM Crawler
You may also call a route and receive a DOM Crawler instance that you may use to inspect the
content:
UnitTesting 198
..$crawler =$this ->client ->request ('GET' ,'/');
$this ->assertTrue ($this ->client ->getResponse ()->isOk ());
$this ->assertCount (1,$crawler ->filter ('h1:contains("Hello World!")' ));
Formoreinformationonhowtousethecrawler,refertoits officialdocumentation ¹⁰¹.
Mocking Facades
When testing, you may often want to mock a call to a Laravel static facade. For example, consider
thefollowingcontrolleraction:
..public function getIndex ()
{
Event ::fire ('foo' ,array ('name' =>'Dayle' ));
return 'All done!' ;
}
We can mock the call to the Eventclass by using the shouldReceive method on the facade, which
willreturnaninstanceofa Mockery¹⁰²mock.
Mocking A Facade
..public function testGetIndex ()
{
Event ::shouldReceive ('fire' )->once ()->with ('foo' ,array ('name' =>'Dayle' ));
$this ->call ('GET' ,'/');
¹⁰¹http://symfony.com/doc/master/components/dom_crawler.html
¹⁰²https://github.com/padraic/mockery
UnitTesting 199
..}
Note:Youshouldnotmockthe Requestfacade.Instead,passtheinputyoudesireinto
thecallmethodwhenrunningyourtest.
Framework Assertions
Laravelshipswithseveral assertmethodstomaketestingalittleeasier:
Asserting Responses Are OK
..public function testMethod ()
{
$this ->call ('GET' ,'/');
$this ->assertResponseOk ();
}
Asserting Response Statuses
..$this ->assertResponseStatus (403);
Asserting Responses Are Redirects
..$this ->assertRedirectedTo ('foo' );
$this ->assertRedirectedToRoute ('route.name' );
$this ->assertRedirectedToAction ('Controller@method' );
UnitTesting 200
..
Asserting A View Has Some Data
..public function testMethod ()
{
$this ->call ('GET' ,'/');
$this ->assertViewHas ('name' );
$this ->assertViewHas ('age' ,$value );
}
Asserting The Session Has Some Data
..public function testMethod ()
{
$this ->call ('GET' ,'/');
$this ->assertSessionHas ('name' );
$this ->assertSessionHas ('age' ,$value );
}
Asserting Old Input Has Some Data
..public function testMethod ()
{
$this ->call ('GET' ,'/');
$this ->assertHasOldInput ();
}
UnitTesting 201
Helper Methods
The TestCase classcontainsseveralhelpermethodstomaketestingyourapplicationeasier.
Youmaysetthecurrentlyauthenticateduserusingthe bemethod:
Setting The Currently Authenticated User
..$user =new User( array ('name' =>'John' ));
$this ->be($user );
Youmayre-seedyourdatabasefromatestusingthe seedmethod:
Re-Seeding Database From Tests
..$this ->seed ();
$this ->seed ($connection );
More information on creating seeds may be found in the migrations and seeding section of the
documentation.
Refreshing The Application
Asyoumayalreadyknow,youcanaccessyourLaravel Application /IoCContainervia $this->app
fromanytestmethod.ThisApplicationinstanceisrefreshedforeachtestclass.Ifyouwishtomanu-
allyforcetheApplicationtoberefreshedforagivenmethod,youmayusethe refreshApplication
method from your test method. This will reset any extra bindings, such as mocks, that have been
placedintheIoCcontainersincethetestcasestartedrunning.
Validation
•BasicUsage
•WorkingWithErrorMessages
•ErrorMessages&Views
•AvailableValidationRules
•ConditionallyAddingRules
•CustomErrorMessages
•CustomValidationRules
Basic Usage
Laravel ships with a simple, convenient facility for validating data and retrieving validation error
messagesviathe Validation class.
Basic Validation Example
..$validator =Validator ::make (
array ('name' =>'Dayle' ),
array ('name' =>'required|min:5' )
);
Thefirstargumentpassedtothe makemethodisthedataundervalidation.Thesecondargumentis
thevalidationrulesthatshouldbeappliedtothedata.
Multiplerulesmaybedelimitedusingeithera“pipe”character,orasseparateelementsofanarray.
Using Arrays To Specify Rules
..$validator =Validator ::make (
array ('name' =>'Dayle' ),
array ('name' =>array ('required' ,'min:5' ))
);
Validation 203
..
Validating Multiple Fields
..$validator =Validator ::make (
array (
'name' =>'Dayle' ,
'password' =>'lamepassword' ,
'email' =>'email@example.com'
),
array (
'name' =>'required' ,
'password' =>'required|min:8' ,
'email' =>'required|email|unique:users'
)
);
Oncea Validator instancehasbeencreated,the fails(orpasses)methodmaybeusedtoperform
thevalidation.
..if($validator ->fails ())
{
// The given data did not pass validation
}
Ifvalidationhasfailed,youmayretrievetheerrormessagesfromthevalidator.
..$messages =$validator ->messages ();
You may also access an array of the failed validation rules, without messages. To do so, use the
failedmethod:
Validation 204
..$failed =$validator ->failed ();
Validating Files
TheValidator classprovidesseveralrulesforvalidatingfiles,suchas size,mimes,andothers.When
validatingfiles,youmaysimplypassthemintothevalidatorwithyourotherdata.
Working With Error Messages
Aftercallingthe messagesmethodona Validator instance,youwillreceivea MessageBag instance,
whichhasavarietyofconvenientmethodsforworkingwitherrormessages.
Retrieving The First Error Message For A Field
..echo $messages ->first ('email' );
Retrieving All Error Messages For A Field
..foreach ($messages ->get('email' )as$message )
{
//
}
Retrieving All Error Messages For All Fields
Validation 205
..foreach ($messages ->all()as$message )
{
//
}
Determining If Messages Exist For A Field
..if($messages ->has('email' ))
{
//
}
Retrieving An Error Message With A Format
..echo $messages ->first ('email' ,'<p>:message</p>' );
Note:Bydefault,messagesareformattedusingBootstrapcompatiblesyntax.
Retrieving All Error Messages With A Format
..foreach ($messages ->all('<li>:message</li>' )as$message )
{
//
}
Validation 206
Error Messages & Views
Once you have performed validation, you will need an easy way to get the error messages back to
yourviews.ThisisconvenientlyhandledbyLaravel.Considerthefollowingroutesasanexample:
..Route ::get('register' ,function ()
{
return View ::make ('user.register' );
});
Route ::post ('register' ,function ()
{
$rules =array (...);
$validator =Validator ::make (Input ::all(), $rules );
if($validator ->fails ())
{
return Redirect ::to('register' )->withErrors ($validator );
}
});
Notethatwhenvalidationfails,wepassthe Validator instancetotheRedirectusingthe withErrors
method. This method will flash the error messages to the session so that they are available on the
nextrequest.
However, notice that we do not have to explicitly bind the error messages to the view in our GET
route. This is because Laravel will always check for errors in the session data, and automatically
bind them to the view if they are available. So, it is important to note that an $errors variable
will always be available in all of your views, on every request , allowing you to conveniently
assumethe $errorsvariableisalwaysdefinedandcanbesafelyused.The $errorsvariablewillbe
aninstanceof MessageBag .
So,afterredirection,youmayutilizetheautomaticallybound $errorsvariableinyourview:
..<?php echo $errors ->first ('email' );?>
Validation 207
Available Validation Rules
Belowisalistofallavailablevalidationrulesandtheirfunction:
•Accepted
•ActiveURL
•After(Date)
•Alpha
•AlphaDash
•AlphaNumeric
•Before(Date)
•Between
•Confirmed
•Date
•DateFormat
•Different
•Digits
•DigitsBetween
•E-Mail
•Exists(Database)
•Image(File)
•In
•Integer
•IPAddress
•Max
•MIMETypes
•Min
•NotIn
•Numeric
•RegularExpression
•Required
•RequiredIf
•RequiredWith
•RequiredWithout
•RequiredWithoutAll
•Same
•Size
•Unique(Database)
•URL
Validation 208
accepted
The field under validation must be yes,on, or1. This is useful for validating “Terms of Service”
acceptance.
active_url
ThefieldundervalidationmustbeavalidURLaccordingtothe checkdnsrr PHPfunction.
after: date
Thefieldundervalidationmustbeavalueafteragivendate.ThedateswillbepassedintothePHP
strtotime function.
alpha
Thefieldundervalidationmustbeentirelyalphabeticcharacters.
alpha_dash
Thefieldundervalidationmayhavealpha-numericcharacters,aswellasdashesandunderscores.
alpha_num
Thefieldundervalidationmustbeentirelyalpha-numericcharacters.
before: date
The field under validation must be a value preceding the given date. The dates will be passed into
thePHP strtotime function.
between: min,max
Thefieldundervalidationmusthaveasizebetweenthegiven minandmax.Strings,numerics,and
filesareevaluatedinthesamefashionasthe sizerule.
confirmed
The field under validation must have a matching field of foo_confirmation . For example, if the
fieldundervalidationis password,amatching password_confirmation fieldmustbepresentinthe
input.
Validation 209
date
Thefieldundervalidationmustbeavaliddateaccordingtothe strtotime PHPfunction.
date_format: format
Thefieldundervalidationmustmatchthe formatdefinedaccordingtothe date_parse_from_format
PHPfunction.
different: field
Thegiven fieldmustbedifferentthanthefieldundervalidation.
digits: value
Thefieldundervalidationmustbe numericandmusthaveanexactlengthof value.
digits_between: min,max
Thefieldundervalidationmusthavealengthbetweenthegiven minandmax.
email
Thefieldundervalidationmustbeformattedasane-mailaddress.
exists: table ,column
Thefieldundervalidationmustexistonagivendatabasetable.
Basic Usage Of Exists Rule
..'state' =>'exists:states'
Specifying A Custom Column Name
..'state' =>'exists:states,abbreviation'
Validation 210
..
Youmayalsospecifymoreconditionsthatwillbeaddedas“where”clausestothequery:
..'email' =>'exists:staff,email,account_id,1'
Passing NULLasa“where”clausevaluewilladdacheckfora NULLdatabasevalue:
..'email' =>'exists:staff,email,deleted_at,NULL'
image
Thefileundervalidationmustbeanimage(jpeg,png,bmp,orgif)
in: foo,bar,…
Thefieldundervalidationmustbeincludedinthegivenlistofvalues.
integer
Thefieldundervalidationmusthaveanintegervalue.
ip
ThefieldundervalidationmustbeformattedasanIPaddress.
max: value
The field under validation must be less than a maximum value. Strings, numerics, and files are
evaluatedinthesamefashionasthe sizerule.
mimes: foo,bar,…
ThefileundervalidationmusthaveaMIMEtypecorrespondingtooneofthelistedextensions.
Basic Usage Of MIME Rule
Validation 211
..'photo' =>'mimes:jpeg,bmp,png'
min: value
The field under validation must have a minimum value. Strings, numerics, and files are evaluated
inthesamefashionasthe sizerule.
not_in: foo,bar,…
Thefieldundervalidationmustnotbeincludedinthegivenlistofvalues.
numeric
Thefieldundervalidationmusthaveanumericvalue.
regex: pattern
Thefieldundervalidationmustmatchthegivenregularexpression.
Note:When using the regexpattern, it may be necessary to specify rules in an array instead of
usingpipedelimiters,especiallyiftheregularexpressioncontainsapipecharacter.
required
Thefieldundervalidationmustbepresentintheinputdata.
required_if: field,value
Thefieldundervalidationmustbepresentifthe fieldfieldisequalto value.
required_with: foo,bar,…
Thefieldundervalidationmustbepresent only iftheotherspecifiedfieldsarepresent.
required_without: foo,bar,…
Thefieldundervalidationmustbepresent only when anyoftheotherspecifiedfieldsarenotpresent.
Validation 212
required_without_all: foo,bar,…
The field under validation must be present only when the all of the other specified fields are not
present.
same: field
Thegiven fieldmustmatchthefieldundervalidation.
size: value
The field under validation must have a size matching the given value. For string data, value
corresponds to the number of characters. For numeric data, valuecorresponds to a given integer
value.Forfiles, sizecorrespondstothefilesizeinkilobytes.
unique: table ,column ,except ,idColumn
The field under validation must be unique on a given database table. If the columnoption is not
specified,thefieldnamewillbeused.
Basic Usage Of Unique Rule
..'email' =>'unique:users'
Specifying A Custom Column Name
..'email' =>'unique:users,email_address'
Forcing A Unique Rule To Ignore A Given ID
..'email' =>'unique:users,email_address,10'
Validation 213
Adding Additional Where Clauses
Youmayalsospecifymoreconditionsthatwillbeaddedas“where”clausestothequery:
..'email' =>'unique:users,email_address,NULL,id,account_id,1'
Intheruleabove,onlyrowswithan account_id of1wouldbeincludedintheuniquecheck.
url
ThefieldundervalidationmustbeformattedasanURL.
Note:ThisfunctionusesPHP’s filter_var method.
Conditionally Adding Rules
Insomesituations,youmaywishtorunvalidationchecksagainstafield onlyifthatfieldispresent
intheinputarray.Toquicklyaccomplishthis,addthe sometimes ruletoyourrulelist:
..$v=Validator ::make ($data ,array (
'email' =>'sometimes|required|email' ,
));
Intheexampleabove,the emailfieldwillonlybevalidatedifitispresentinthe $dataarray.
Complex Conditional Validation
Sometimesyoumaywishtorequireagivenfieldonlyifanotherfieldhasagreatervaluethan100.
Oryoumayneedtwofieldstohaveagivenvalueonlywhenanotherfieldispresent.Addingthese
validation rules doens’t have to be a pain. First, create a Validator instance with your static rules
thatneverchange:
Validation 214
..$v=Validator ::make ($data ,array (
'email' =>'required|email' ,
'games' =>'required|numeric' ,
));
Let’s assume our web application is for game collectors. If a game collector registers with our
application and they own more than 100 games, we want them to explain why they own so many
games. For example, perhaps they run a game re-sell shop, or maybe they just enjoy collecting. To
conditionallyaddthisrequirement,wecanusethe sometimes methodonthe Validator instance.
..$v->sometimes ('reason' ,'required|max:500' ,function ($input )
{
return $input ->games >=100;
});
The first argument passed to the sometimes method is the name of the field we are conditionally
validating. The second argument is the rules we want to add. If the Closurepassed as the third
argument returns true, the rules will be added. This method makes it a breeze to build complex
conditionalvalidations.Youmayevenaddconditionalvalidationsforseveralfieldsatonce:
..$v->sometimes (array ('reason' ,'cost' ),'required' ,function ($input )
{
return $input ->games >=100;
});
Note:The$inputparameterpassedtoyour Closurewillbeaninstanceof Illuminate\Support\Fluent
andmaybeusedasanobjecttoaccessyourinputandfiles.
Custom Error Messages
Ifneeded,youmayusecustomerrormessagesforvalidationinsteadofthedefaults.Thereareseveral
waystospecifycustommessages.
Validation 215
Passing Custom Messages Into Validator
..$messages =array (
'required' =>'The :attribute field is required.' ,
);
$validator =Validator ::make ($input ,$rules ,$messages );
Note:The:attribute place-holderwillbereplacedbytheactualnameofthefieldundervalidation.
Youmayalsoutilizeotherplace-holdersinvalidationmessages.
Other Validation Place-Holders
..$messages =array (
'same' =>'The :attribute and :other must match.' ,
'size' =>'The :attribute must be exactly :size.' ,
'between' =>'The :attribute must be between :min - :max.' ,
'in' =>'The :attribute must be one of the following types: :values' ,
);
Sometimesyoumaywishtospecifyacustomerrormessagesonlyforaspecificfield:
Specifying A Custom Message For A Given Attribute
..$messages =array (
'email.required' =>'We need to know your e-mail address!' ,
);
In some cases, you may wish to specify your custom messages in a language file instead of
passing them directly to the Validator . To do so, add your messages to customarray in the
app/lang/xx/validation.php languagefile.
Validation 216
Specifying Custom Messages In Language Files
..'custom' =>array (
'email' =>array (
'required' =>'We need to know your e-mail address!' ,
),
),
Custom Validation Rules
Laravelprovidesavarietyofhelpfulvalidationrules;however,youmaywishtospecifysomeofyour
own.Onemethodofregisteringcustomvalidationrulesisusingthe Validator::extend method:
Registering A Custom Validation Rule
..Validator ::extend ('foo' ,function ($attribute ,$value ,$parameters )
{
return $value =='foo' ;
});
ThecustomvalidatorClosurereceivesthreearguments:thenameofthe $attribute beingvalidated,
the$valueoftheattribute,andanarrayof $parameters passedtotherule.
Youmayalsopassaclassandmethodtothe extendmethodinsteadofaClosure:
..Validator ::extend ('foo' ,'FooValidator@validate' );
Notethatyouwillalsoneedtodefineanerrormessageforyourcustomrules.Youcandosoeither
usinganinlinecustommessagearrayorbyaddinganentryinthevalidationlanguagefile.
Instead of using Closure callbacks to extend the Validator, you may also extend the Validator class
itself. To do so, write a Validator class that extends Illuminate\Validation\Validator . You may
addvalidationmethodstotheclassbyprefixingthemwith validate:
Validation 217
Extending The Validator Class
..<?php
class CustomValidator extends Illuminate\Validation\Validator {
public function validateFoo ($attribute ,$value ,$parameters )
{
return $value =='foo' ;
}
}
Next,youneedtoregisteryourcustomValidatorextension:
Registering A Custom Validator Resolver
..Validator ::resolver (function ($translator ,$data ,$rules ,$messages )
{
return new CustomValidator( $translator ,$data ,$rules ,$messages );
});
When creating a custom validation rule, you may sometimes need to define custom place-holder
replacementsforerrormessages.YoumaydosobycreatingacustomValidatorasdescribedabove,
andaddinga replaceXXX functiontothevalidator.
..protected function replaceFoo ($message ,$attribute ,$rule ,$parameters )
{
return str_replace (':foo' ,$parameters [0],$message );
}
Basic Database Usage
•Configuration
•Read/WriteConnections
•RunningQueries
•DatabaseTransactions
•AccessingConnections
•QueryLogging
Configuration
Laravel makes connecting with databases and running queries extremely simple. The database
configuration file is app/config/database.php . In this file you may define all of your database
connections,aswellasspecifywhichconnectionshouldbeusedbydefault.Examplesforallofthe
supporteddatabasesystemsareprovidedinthisfile.
CurrentlyLaravelsupportsfourdatabasesystems:MySQL,Postgres,SQLite,andSQLServer.
Read / Write Connections
Sometimes you may wish to use one database connection for SELECT statements, and another for
INSERT,UPDATE,andDELETEstatements.Laravelmakesthisabreeze,andtheproperconnections
willalwaysbeusedwhetheryouareusingrawqueries,thequerybuilder,ortheEloquentORM.
Toseehowread/writeconnectionsshouldbeconfigured,let’slookatthisexample:
..'mysql' =>array (
'read' =>array (
'host' =>'192.168.1.1' ,
),
'write' =>array (
'host' =>'196.168.1.2'
),
'driver' =>'mysql' ,
'database' =>'database' ,
'username' =>'root' ,
'password' =>'',
'charset' =>'utf8' ,
BasicDatabaseUsage 219
..'collation' =>'utf8_unicode_ci' ,
'prefix' =>'',
),
Notethattwokeyshavebeenaddedtotheconfigurationarray: readandwrite.Bothofthesekeys
have array values containing a single key: host. The rest of the database options for the readand
writeconnections will be merged from the main mysqlarray. So, we only need to place items in
thereadand writearrays if we wish to override the values in the main array. So, in this case,
192.168.1.1 will be used as the “read” connection, while 192.168.1.2 will be used as the “write”
connection. The database credentials, prefix, character set, and all other options in the main mysql
arraywillbesharedacrossbothconnections.
Running Queries
Onceyouhaveconfiguredyourdatabaseconnection,youmayrunqueriesusingthe DBclass.
Running A Select Query
..$results =DB::select ('select * from users where id = ?' ,array (1));
The selectmethodwillalwaysreturnan arrayofresults.
Running An Insert Statement
..DB::insert ('insert into users (id, name) values (?, ?)' ,array (1,'Dayle' ));
Running An Update Statement
..DB::update ('update users set votes = 100 where name = ?' ,array ('John' ));
BasicDatabaseUsage 220
Running A Delete Statement
..DB::delete ('delete from users' );
Note:The updateand deletestatements return the number of rows affected by the
operation.
Running A General Statement
..DB::statement ('drop table users' );
Youmaylistenforqueryeventsusingthe DB::listen method:
Listening For Query Events
..DB::listen (function ($sql ,$bindings ,$time )
{
//
});
Database Transactions
Torunasetofoperationswithinadatabasetransaction,youmayusethe transaction method:
BasicDatabaseUsage 221
..DB::transaction (function ()
{
DB::table ('users' )->update (array ('votes' =>1));
DB::table ('posts' )->delete ();
});
Note:Anyexceptionthrownwithinthe transaction closurewillcausethetransaction
toberolledbackautomatically.
Sometimesyoumayneedtobeginatransactionyourself:
..DB::beginTransaction ();
Youcanrollbackatransactionviathe rollback method:
..DB::rollback ();
Lastly,youcancommitatransactionviathe commitmethod:
..DB::commit ();
Accessing Connections
Whenusingmultipleconnections,youmayaccessthemviathe DB::connection method:
BasicDatabaseUsage 222
..$users =DB::connection ('foo' )->select (...);
Youmayalsoaccesstheraw,underlyingPDOinstance:
..$pdo =DB::connection ()->getPdo ();
Sometimesyoumayneedtoreconnecttoagivendatabase:
..DB::reconnect ('foo' );
IfyouneedtodisconnectfromthegivendatabaseduetoexceedingtheunderylingPDOinstance’s
max_connections limit,usethe disconnect method:
..DB::disconnect ('foo' );
Query Logging
Bydefault,Laravelkeepsaloginmemoryofallqueriesthathavebeenrunforthecurrentrequest.
However,insomecases,suchaswheninsertingalargenumberofrows,thiscancausetheapplication
touseexcessmemory.Todisablethelog,youmayusethe disableQueryLog method:
..DB::connection ()->disableQueryLog ();
Togetanarrayoftheexecutedqueries,youmayusethe getQueryLog method:
BasicDatabaseUsage 223
..$queries =DB::getQueryLog ();
Query Builder
•Introduction
•Selects
•Joins
•AdvancedWheres
•Aggregates
•RawExpressions
•Inserts
•Updates
•Deletes
•Unions
•PessimisticLocking
•CachingQueries
Introduction
Thedatabasequerybuilderprovidesaconvenient,fluentinterfacetocreatingandrunningdatabase
queries. It can be used to perform most database operations in your application, and works on all
supporteddatabasesystems.
Note:TheLaravelquerybuilderusesPDOparameterbindingthroughouttoprotectyour
applicationagainstSQLinjectionattacks.Thereisnoneedtocleanstringsbeingpassedas
bindings.
Selects
Retrieving All Rows From A Table
QueryBuilder 225
..$users =DB::table ('users' )->get();
foreach ($users as$user )
{
var_dump ($user ->name );
}
Retrieving A Single Row From A Table
..$user =DB::table ('users' )->where ('name' ,'John' )->first ();
var_dump ($user ->name );
Retrieving A Single Column From A Row
..$name =DB::table ('users' )->where ('name' ,'John' )->pluck ('name' );
Retrieving A List Of Column Values
..$roles =DB::table ('roles' )->lists ('title' );
This method will return an array of role titles. You may also specify a custom key column for the
returnedarray:
QueryBuilder 226
..$roles =DB::table ('roles' )->lists ('title' ,'name' );
Specifying A Select Clause
..$users =DB::table ('users' )->select ('name' ,'email' )->get();
$users =DB::table ('users' )->distinct ()->get();
$users =DB::table ('users' )->select ('name as user_name' )->get();
Adding A Select Clause To An Existing Query
..$query =DB::table ('users' )->select ('name' );
$users =$query ->addSelect ('age' )->get();
Using Where Operators
..$users =DB::table ('users' )->where ('votes' ,'>',100)->get();
Or Statements
QueryBuilder 227
..$users =DB::table ('users' )
->where ('votes' ,'>',100)
->orWhere ('name' ,'John' )
->get();
Using Where Between
..$users =DB::table ('users' )
->whereBetween ('votes' ,array (1,100))->get();
Using Where Not Between
..$users =DB::table ('users' )
->whereNotBetween ('votes' ,array (1,100))->get();
Using Where In With An Array
..$users =DB::table ('users' )
->whereIn ('id' ,array (1,2,3))->get();
$users =DB::table ('users' )
->whereNotIn ('id' ,array (1,2,3))->get();
Using Where Null To Find Records With Unset Values
QueryBuilder 228
..$users =DB::table ('users' )
->whereNull ('updated_at' )->get();
Order By, Group By, And Having
..$users =DB::table ('users' )
->orderBy ('name' ,'desc' )
->groupBy ('count' )
->having ('count' ,'>',100)
->get();
Offset & Limit
..$users =DB::table ('users' )->skip (10)->take (5)->get();
Joins
Thequerybuildermayalsobeusedtowritejoinstatements.Takealookatthefollowingexamples:
Basic Join Statement
..DB::table ('users' )
->join ('contacts' ,'users.id' ,'=','contacts.user_id' )
->join ('orders' ,'users.id' ,'=','orders.user_id' )
->select ('users.id' ,'contacts.phone' ,'orders.price' );
QueryBuilder 229
Left Join Statement
..DB::table ('users' )
->leftJoin ('posts' ,'users.id' ,'=','posts.user_id' )
->get();
Youmayalsospecifymoreadvancedjoinclauses:
..DB::table ('users' )
->join ('contacts' ,function ($join )
{
$join ->on('users.id' ,'=','contacts.user_id' )->orOn (...);
})
->get();
If you would like to use a “where” style clause on your joins, you may use the whereand orWhere
methods on a join. Instead of comparing two columns, these methods will compare the column
againstavalue:
..DB::table ('users' )
->join ('contacts' ,function ($join )
{
$join ->on('users.id' ,'=','contacts.user_id' )
->where ('contacts.user_id' ,'>',5);
})
->get();
Advanced Wheres
Sometimes you may need to create more advanced where clauses such as “where exists” or nested
parametergroupings.TheLaravelquerybuildercanhandletheseaswell:
QueryBuilder 230
Parameter Grouping
..DB::table ('users' )
->where ('name' ,'=','John' )
->orWhere (function ($query )
{
$query ->where ('votes' ,'>',100)
->where ('title' ,'<>' ,'Admin' );
})
->get();
ThequeryabovewillproducethefollowingSQL:
..select *from users where name ='John' or(votes >100 and title <>'Admin' )
Exists Statements
..DB::table ('users' )
->whereExists (function ($query )
{
$query ->select (DB::raw(1))
->from ('orders' )
->whereRaw ('orders.user_id = users.id' );
})
->get();
ThequeryabovewillproducethefollowingSQL:
..select *from users
where exists (
select 1from orders where orders .user_id =users .id
QueryBuilder 231
..)
Aggregates
The query builder also provides a variety of aggregate methods, such as count,max,min,avg, and
sum.
Using Aggregate Methods
..$users =DB::table ('users' )->count ();
$price =DB::table ('orders' )->max('price' );
$price =DB::table ('orders' )->min('price' );
$price =DB::table ('orders' )->avg('price' );
$total =DB::table ('users' )->sum('votes' );
Raw Expressions
Sometimesyoumayneedtousearawexpressioninaquery.Theseexpressionswillbeinjectedinto
thequeryasstrings,sobecarefulnottocreateanySQLinjectionpoints!Tocreatearawexpression,
youmayusethe DB::rawmethod:
Using A Raw Expression
..$users =DB::table ('users' )
->select (DB::raw('count(*) as user_count, status' ))
->where ('status' ,'<>' ,1)
->groupBy ('status' )
->get();
QueryBuilder 232
..
Incrementing or decrementing a value of a column
..DB::table ('users' )->increment ('votes' );
DB::table ('users' )->increment ('votes' ,5);
DB::table ('users' )->decrement ('votes' );
DB::table ('users' )->decrement ('votes' ,5);
Youmayalsospecifyadditionalcolumnstoupdate:
..DB::table ('users' )->increment ('votes' ,1,array ('name' =>'John' ));
Inserts
Inserting Records Into A Table
..DB::table ('users' )->insert (
array ('email' =>'john@example.com' ,'votes' =>0)
);
Ifthetablehasanauto-incrementingid,use insertGetId toinsertarecordandretrievetheid:
Inserting Records Into A Table With An Auto-Incrementing ID
QueryBuilder 233
..$id =DB::table ('users' )->insertGetId (
array ('email' =>'john@example.com' ,'votes' =>0)
);
Note:When using PostgreSQL the insertGetId method expects the auto-incrementing
columntobenamed“id”.
Inserting Multiple Records Into A Table
..DB::table ('users' )->insert (array (
array ('email' =>'taylor@example.com' ,'votes' =>0),
array ('email' =>'dayle@example.com' ,'votes' =>0),
));
Updates
Updating Records In A Table
..DB::table ('users' )
->where ('id' ,1)
->update (array ('votes' =>1));
Deletes
Deleting Records In A Table
QueryBuilder 234
..DB::table ('users' )->where ('votes' ,'<',100)->delete ();
Deleting All Records From A Table
..DB::table ('users' )->delete ();
Truncating A Table
..DB::table ('users' )->truncate ();
Unions
Thequerybuilderalsoprovidesaquickwayto“union”twoqueriestogether:
Performing A Query Union
..$first =DB::table ('users' )->whereNull ('first_name' );
$users =DB::table ('users' )->whereNull ('last_name' )->union ($first )->get();
The unionAll methodisalsoavailable,andhasthesamemethodsignatureas union.
Pessimistic Locking
The query builder includes a few functions to help you do “pessimistic locking” on your SELECT
statements.
ToruntheSELECTstatementwitha“sharedlock”,youmayusethe sharedLock methodonaquery:
QueryBuilder 235
..DB::table ('users' )->where ('votes' ,'>',100)->sharedLock ()->get();
To“lockforupdate”onaSELECTstatement,youmayusethe lockForUpdate methodonaquery:
..DB::table ('users' )->where ('votes' ,'>',100)->lockForUpdate ()->get();
Caching Queries
Youmayeasilycachetheresultsofaqueryusingthe remember method:
Caching A Query Result
..$users =DB::table ('users' )->remember (10)->get();
Inthisexample,theresultsofthequerywillbecachedfortenminutes.Whiletheresultsarecached,
thequerywillnotberunagainstthedatabase,andtheresultswillbeloadedfromthedefaultcache
driverspecifiedforyourapplication.
Eloquent ORM
•Introduction
•BasicUsage
•MassAssignment
•Insert,Update,Delete
•SoftDeleting
•Timestamps
•QueryScopes
•Relationships
•QueryingRelations
•EagerLoading
•InsertingRelatedModels
•TouchingParentTimestamps
•WorkingWithPivotTables
•Collections
•Accessors&Mutators
•DateMutators
•ModelEvents
•ModelObservers
•ConvertingToArrays/JSON
Introduction
TheEloquentORMincludedwithLaravelprovidesabeautiful,simpleActiveRecordimplementation
forworkingwithyourdatabase.Eachdatabasetablehasacorresponding“Model”whichisusedto
interactwiththattable.
Beforegettingstarted,besuretoconfigureadatabaseconnectionin app/config/database.php .
Basic Usage
Togetstarted,createanEloquentmodel.Modelstypicallyliveinthe app/models directory,butyou
arefreetoplacethemanywherethatcanbeauto-loadedaccordingtoyour composer.json file.
Defining An Eloquent Model
EloquentORM 237
..class User extends Eloquent {}
Note that we did not tell Eloquent which table to use for our Usermodel. The lower-case, plural
name of the class will be used as the table name unless another name is explicitly specified. So, in
thiscase,Eloquentwillassumethe Usermodelstoresrecordsinthe userstable.Youmayspecifya
customtablebydefininga tablepropertyonyourmodel:
..class User extends Eloquent {
protected $table ='my_users' ;
}
Note:Eloquent will also assume that each table has a primary key column named id.
Youmaydefinea primaryKey propertytooverridethisconvention.Likewise,youmay
define a connection property to override the name of the database connection that
shouldbeusedwhenutilizingthemodel.
Once a model is defined, you are ready to start retrieving and creating records in your table. Note
thatyouwillneedtoplace updated_at andcreated_at columnsonyourtablebydefault.Ifyoudo
not wish to have these columns automatically maintained, set the $timestamps property on your
modelto false.
Retrieving All Models
..$users =User ::all();
Retrieving A Record By Primary Key
EloquentORM 238
..$user =User ::find (1);
var_dump ($user ->name );
Note:All methods available on the query builder are also available when querying
Eloquentmodels.
Retrieving A Model By Primary Key Or Throw An Exception
Sometimesyoumaywishtothrowanexceptionifamodelisnotfound,allowingyoutocatchthe
exceptionsusingan App::error handleranddisplaya404page.
..$model =User ::findOrFail (1);
$model =User ::where ('votes' ,'>',100)->firstOrFail ();
Toregistertheerrorhandler,listenforthe ModelNotFoundException
..use Illuminate\Database\Eloquent\ModelNotFoundException;
App::error (function (ModelNotFoundException $e)
{
return Response ::make ('Not Found' ,404);
});
Querying Using Eloquent Models
EloquentORM 239
..$users =User ::where ('votes' ,'>',100)->take (10)->get();
foreach ($users as$user )
{
var_dump ($user ->name );
}
Ofcourse,youmayalsousethequerybuilderaggregatefunctions.
Eloquent Aggregates
..$count =User ::where ('votes' ,'>',100)->count ();
Ifyouareunabletogeneratethequeryyouneedviathefluentinterface,feelfreetouse whereRaw:
..$users =User ::whereRaw ('age > ? and votes = 100' ,array (25))->get();
Chunking Results
If you need to process a lot (thousands) of Eloquent records, using the chunkcommand will allow
youtodowithouteatingallofyourRAM:
..User ::chunk (200,function ($users )
{
foreach ($users as$user )
{
//
}
});
EloquentORM 240
Thefirstargumentpassedtothemethodisthenumberofrecordsyouwishtoreceiveper“chunk”.
The Closure passed as the second argument will be called for each chunk that is pulled from the
database.
Specifying The Query Connection
YoumayalsospecifywhichdatabaseconnectionshouldbeusedwhenrunninganEloquentquery.
Simplyusethe onmethod:
..$user =User ::on('connection-name' )->find (1);
Mass Assignment
When creating a new model, you pass an array of attributes to the model constructor. These
attributes are then assigned to the model via mass-assignment. This is convenient; however, can
bea serioussecurityconcernwhenblindlypassinguserinputintoamodel.Ifuserinputisblindly
passedintoamodel,theuserisfreetomodify anyandallofthemodel’sattributes.Forthisreason,
allEloquentmodelsprotectagainstmass-assignmentbydefault.
Togetstarted,setthe fillable orguardedpropertiesonyourmodel.
The fillable propertyspecifieswhichattributesshouldbemass-assignable.Thiscanbesetatthe
classorinstancelevel.
Defining Fillable Attributes On A Model
..class User extends Eloquent {
protected $fillable =array ('first_name' ,'last_name' ,'email' );
}
Inthisexample,onlythethreelistedattributeswillbemass-assignable.
Theinverseof fillable isguarded,andservesasa“black-list”insteadofa“white-list”:
EloquentORM 241
Defining Guarded Attributes On A Model
..class User extends Eloquent {
protected $guarded =array ('id' ,'password' );
}
Intheexampleabove,the idandpasswordattributesmay notbemassassigned.Allotherattributes
will be mass assignable. You may also block allattributes from mass assignment using the guard
method:
Blocking All Attributes From Mass Assignment
..protected $guarded =array ('*');
Insert, Update, Delete
To create a new record in the database from a model, simply create a new model instance and call
thesavemethod.
Saving A New Model
..$user =new User;
$user ->name ='John' ;
$user ->save ();
Note:Typically, your Eloquent models will have auto-incrementing keys. However, if
you wish to specify your own keys, set the incrementing property on your model to
false.
EloquentORM 242
Youmayalsousethe createmethodtosaveanewmodelinasingleline.Theinsertedmodelinstance
willbereturnedtoyoufromthemethod.However,beforedoingso,youwillneedtospecifyeithera
fillableorguardedattributeonthemodel,asallEloquentmodelsprotectagainstmass-assignment.
Aftersavingorcreatinganewmodelthatusesauto-incrementingIDs,youmayretrievetheIDby
accessingtheobject’s idattribute:
..$insertedId =$user ->id;
Setting The Guarded Attributes On The Model
..class User extends Eloquent {
protected $guarded =array ('id' ,'account_id' );
}
Using The Model Create Method
..// Create a new user in the database...
$user =User ::create (array ('name' =>'John' ));
// Retrieve the user by the attributes, or create it if it doesn't exist...
$user =User ::firstOrCreate (array ('name' =>'John' ));
// Retrieve the user by the attributes, or instantiate a new instance...
$user =User ::firstOrNew (array ('name' =>'John' ));
Toupdateamodel,youmayretrieveit,changeanattribute,andusethe savemethod:
Updating A Retrieved Model
EloquentORM 243
..$user =User ::find (1);
$user ->email ='john@foo.com' ;
$user ->save ();
Sometimes you may wish to save not only a model, but also all of its relationships. To do so, you
mayusethe pushmethod:
Saving A Model And Relationships
..$user ->push ();
Youmayalsorunupdatesasqueriesagainstasetofmodels:
..$affectedRows =User ::where ('votes' ,'>',100)->update (array ('status' =>2));
Todeleteamodel,simplycallthe deletemethodontheinstance:
Deleting An Existing Model
..$user =User ::find (1);
$user ->delete ();
Deleting An Existing Model By Key
EloquentORM 244
..User ::destroy (1);
User ::destroy (array (1,2,3));
User ::destroy (1,2,3);
Ofcourse,youmayalsorunadeletequeryonasetofmodels:
..$affectedRows =User ::where ('votes' ,'>',100)->delete ();
Ifyouwishtosimplyupdatethetimestampsonamodel,youmayusethe touchmethod:
Updating Only The Model’s Timestamps
..$user ->touch ();
Soft Deleting
When soft deleting a model, it is not actually removed from your database. Instead, a deleted_at
timestampissetontherecord.Toenablesoftdeletesforamodel,specifythe softDelete property
onthemodel:
..class User extends Eloquent {
protected $softDelete =true ;
}
Toadda deleted_at columntoyourtable,youmayusethe softDeletes methodfromamigration:
EloquentORM 245
..$table ->softDeletes ();
Now, when you call the deletemethod on the model, the deleted_at column will be set to the
currenttimestamp.Whenqueryingamodelthatusessoftdeletes,the“deleted”modelswillnotbe
includedinqueryresults.Toforcesoftdeletedmodelstoappearinaresultset,usethe withTrashed
methodonthequery:
Forcing Soft Deleted Models Into Results
..$users =User ::withTrashed ()->where ('account_id' ,1)->get();
Ifyouwishto onlyreceivesoftdeletedmodelsinyourresults,youmayusethe onlyTrashed method:
..$users =User ::onlyTrashed ()->where ('account_id' ,1)->get();
Torestoreasoftdeletedmodelintoanactivestate,usethe restoremethod:
..$user ->restore ();
Youmayalsousethe restoremethodonaquery:
..User ::withTrashed ()->where ('account_id' ,1)->restore ();
The restoremethodmayalsobeusedonrelationships:
EloquentORM 246
..$user ->posts ()->restore ();
Ifyouwishtotrulyremoveamodelfromthedatabase,youmayusethe forceDelete method:
..$user ->forceDelete ();
The forceDelete methodalsoworksonrelationships:
..$user ->posts ()->forceDelete ();
Todetermineifagivenmodelinstancehasbeensoftdeleted,youmayusethe trashedmethod:
..if($user ->trashed ())
{
//
}
Timestamps
Bydefault,Eloquentwillmaintainthe created_at andupdated_at columnsonyourdatabasetable
automatically.Simplyaddthese timestamp columnstoyourtableandEloquentwilltakecareofthe
rest.IfyoudonotwishforEloquenttomaintainthesecolumns,addthefollowingpropertytoyour
model:
Disabling Auto Timestamps
EloquentORM 247
..class User extends Eloquent {
protected $table ='users' ;
public $timestamps =false ;
}
If you wish to customize the format of your timestamps, you may override the getDateFormat
methodinyourmodel:
Providing A Custom Timestamp Format
..class User extends Eloquent {
protected function getDateFormat ()
{
return 'U';
}
}
Query Scopes
Scopes allow you to easily re-use query logic in your models. To define a scope, simply prefix a
modelmethodwith scope:
Defining A Query Scope
EloquentORM 248
..class User extends Eloquent {
public function scopePopular ($query )
{
return $query ->where ('votes' ,'>',100);
}
public function scopeWomen ($query )
{
return $query ->whereGender ('W');
}
}
Utilizing A Query Scope
..$users =User ::popular ()->women ()->orderBy ('created_at' )->get();
Dynamic Scopes
Sometimes You may wish to define a scope that accepts parameters. Just add your parameters to
yourscopefunction:
..class User extends Eloquent {
public function scopeOfType ($query ,$type )
{
return $query ->whereType ($type );
}
}
Thenpasstheparameterintothescopecall:
EloquentORM 249
..$users =User ::ofType ('member' )->get();
Relationships
Of course, your database tables are probably related to one another. For example, a blog post may
have many comments, or an order could be related to the user who placed it. Eloquent makes
managingandworkingwiththeserelationshipseasy.Laravelsupportsfourtypesofrelationships:
•OneToOne
•OneToMany
•ManyToMany
•HasManyThrough
•PolymorphicRelations
One To One
Aone-to-onerelationshipisaverybasicrelation.Forexample,a Usermodelmighthaveone Phone.
WecandefinethisrelationinEloquent:
Defining A One To One Relation
..class User extends Eloquent {
public function phone ()
{
return $this ->hasOne ('Phone' );
}
}
The first argument passed to the hasOnemethod is the name of the related model. Once the
relationshipisdefined,wemayretrieveitusingEloquent’s dynamicproperties :
EloquentORM 250
..$phone =User ::find (1)->phone ;
TheSQLperformedbythisstatementwillbeasfollows:
..select *from users where id =1
select *from phones where user_id =1
TakenotethatEloquentassumestheforeignkeyoftherelationshipbasedonthemodelname.Inthis
case, Phonemodelisassumedtousea user_idforeignkey.Ifyouwishtooverridethisconvention,
youmaypassasecondargumenttothe hasOnemethod.Furthermore,youmaypassathirdargument
tothemethodtospecifywhichlocalcolumnthatshouldbeusedfortheassociation:
..return $this ->hasOne ('Phone' ,'foreign_key' );
return $this ->hasOne ('Phone' ,'foreign_key' ,'local_key' );
Defining The Inverse Of A Relation
Todefinetheinverseoftherelationshiponthe Phonemodel,weusethe belongsTo method:
..class Phone extends Eloquent {
public function user ()
{
return $this ->belongsTo ('User' );
}
}
EloquentORM 251
Intheexampleabove,Eloquentwilllookfora user_idcolumnonthe phonestable.Ifyouwouldlike
todefineadifferentforeignkeycolumn,youmaypassitasthesecondargumenttothe belongsTo
method:
..class Phone extends Eloquent {
public function user ()
{
return $this ->belongsTo ('User' ,'local_key' );
}
}
Additionally,youpassathirdparameterwhichspecifiesthenameoftheassociatedcolumnonthe
parenttable:
..class Phone extends Eloquent {
public function user ()
{
return $this ->belongsTo ('User' ,'local_key' ,'parent_key' );
}
}
One To Many
Anexampleofaone-to-manyrelationisablogpostthat“hasmany”comments.Wecanmodelthis
relationlikeso:
EloquentORM 252
..class Post extends Eloquent {
public function comments ()
{
return $this ->hasMany ('Comment' );
}
}
Nowwecanaccessthepost’scommentsthroughthe dynamicproperty :
..$comments =Post ::find (1)->comments ;
Ifyouneedtoaddfurtherconstraintstowhichcommentsareretrieved,youmaycallthe comments
methodandcontinuechainingconditions:
..$comments =Post ::find (1)->comments ()->where ('title' ,'=','foo' )->first ();
Again,youmayoverridetheconventionalforeignkeybypassingasecondargumenttothe hasMany
method.And,likethe hasOnerelation,thelocalcolumnmayalsobespecified:
..return $this ->hasMany ('Comment' ,'foreign_key' );
return $this ->hasMany ('Comment' ,'foreign_key' ,'local_key' );
Todefinetheinverseoftherelationshiponthe Commentmodel,weusethe belongsTo method:
Defining The Inverse Of A Relation
EloquentORM 253
..class Comment extends Eloquent {
public function post ()
{
return $this ->belongsTo ('Post' );
}
}
Many To Many
Many-to-manyrelationsareamorecomplicatedrelationshiptype.Anexampleofsucharelationship
isa user with many roles,wherethe rolesarealso shared byother users. For example,many users
mayhavetheroleof“Admin”.Threedatabasetablesareneededforthisrelationship: users,roles,
and role_user . The role_user table is derived from the alphabetical order of the related model
names,andshouldhave user_idandrole_idcolumns.
Wecandefineamany-to-manyrelationusingthe belongsToMany method:
..class User extends Eloquent {
public function roles ()
{
return $this ->belongsToMany ('Role' );
}
}
Now,wecanretrievetherolesthroughthe Usermodel:
..$roles =User ::find (1)->roles ;
If you would like to use an unconventional table name for your pivot table, you may pass it as the
secondargumenttothe belongsToMany method:
EloquentORM 254
..return $this ->belongsToMany ('Role' ,'user_roles' );
Youmayalsooverridetheconventionalassociatedkeys:
..return $this ->belongsToMany ('Role' ,'user_roles' ,'user_id' ,'foo_id' );
Ofcourse,youmayalsodefinetheinverseoftherelationshiponthe Rolemodel:
..class Role extends Eloquent {
public function users ()
{
return $this ->belongsToMany ('User' );
}
}
Has Many Through
The“hasmanythrough”relationprovidesaconvenientshort-cutforaccessingdistantrelationsvia
an intermediate relation. For example, a Countrymodel might have many Poststhrough a Users
model.Thetablesforthisrelationshipwouldlooklikethis:
..countries
id-integer
name -string
users
id-integer
country_id -integer
name -string
EloquentORM 255
..posts
id-integer
user_id -integer
title -string
Even though the poststable does not contain a country_id column, the hasManyThrough relation
willallowustoaccessacountry’spostsvia $country->posts .Let’sdefinetherelationship:
..class Country extends Eloquent {
public function posts ()
{
return $this ->hasManyThrough ('Post' ,'User' );
}
}
If you would like to manually specify the keys of the relationship, you may pass them as the third
andfourthargumentstothemethod:
..class Country extends Eloquent {
public function posts ()
{
return $this ->hasManyThrough ('Post' ,'User' ,'country_id' ,'user_id' );
}
}
Polymorphic Relations
Polymorphicrelationsallowamodeltobelongtomorethanoneothermodel,onasingleassociation.
Forexample,youmighthaveaphotomodelthatbelongstoeitherastaffmodeloranordermodel.
Wewoulddefinethisrelationlikeso:
EloquentORM 256
..class Photo extends Eloquent {
public function imageable ()
{
return $this ->morphTo ();
}
}
class Staff extends Eloquent {
public function photos ()
{
return $this ->morphMany ('Photo' ,'imageable' );
}
}
class Order extends Eloquent {
public function photos ()
{
return $this ->morphMany ('Photo' ,'imageable' );
}
}
Now,wecanretrievethephotosforeitherastaffmemberoranorder:
Retrieving A Polymorphic Relation
..$staff =Staff ::find (1);
foreach ($staff ->photos as$photo )
{
//
}
EloquentORM 257
Retrieving The Owner Of A Polymorphic Relation
However,thetrue“polymorphic”magiciswhenyouaccessthestaffororderfromthe Photomodel:
..$photo =Photo ::find (1);
$imageable =$photo ->imageable ;
The imageable relationonthe Photomodelwillreturneithera StafforOrderinstance,depending
onwhichtypeofmodelownsthephoto.
Tohelpunderstandhowthisworks,let’sexplorethedatabasestructureforapolymorphicrelation:
Polymorphic Relation Table Structure
..staff
id-integer
name -string
orders
id-integer
price -integer
photos
id-integer
path -string
imageable_id -integer
imageable_type -string
Thekeyfieldstonoticeherearethe imageable_id andimageable_type onthe photostable.TheID
willcontaintheIDvalueof,inthisexample,theowningstaffororder,whilethetypewillcontainthe
classnameoftheowningmodel.ThisiswhatallowstheORMtodeterminewhichtypeofowning
modeltoreturnwhenaccessingthe imageable relation.
Querying Relations
Whenaccessingtherecordsforamodel,youmaywishtolimityourresultsbasedontheexistence
ofarelationship.Forexample,youwishtopullallblogpoststhathaveatleastonecomment.Todo
EloquentORM 258
so,youmayusethe hasmethod:
Querying Relations When Selecting
..$posts =Post ::has('comments' )->get();
Youmayalsospecifyanoperatorandacount:
..$posts =Post ::has('comments' ,'>=' ,3)->get();
If you need even more power, you may use the whereHas and orWhereHas methods to put “where”
conditionsonyour hasqueries:
..$posts =Post ::whereHas ('comments' ,function ($q)
{
$q->where ('content' ,'like' ,'foo%' );
})->get();
Dynamic Properties
Eloquent allows you to access your relations via dynamic properties. Eloquent will automatically
loadtherelationshipforyou,andisevensmartenoughtoknowwhethertocallthe get(forone-to-
manyrelationships)or first(forone-to-onerelationships)method.Itwillthenbeaccessibleviaa
dynamicpropertybythesamenameastherelation.Forexample,withthefollowingmodel $phone:
EloquentORM 259
..class Phone extends Eloquent {
public function user ()
{
return $this ->belongsTo ('User' );
}
}
$phone =Phone ::find (1);
Insteadofechoingtheuser’semaillikethis:
..echo $phone ->user ()->first ()->email ;
Itmaybeshortenedtosimply:
..echo $phone ->user ->email ;
Note:Relationshipsthatreturnmanyresultswillreturnaninstanceofthe Illuminate\Database\Eloquent\Collection
class.
Eager Loading
EagerloadingexiststoalleviatetheN+1queryproblem.Forexample,considera Bookmodelthat
isrelatedto Author.Therelationshipisdefinedlikeso:
EloquentORM 260
..class Book extends Eloquent {
public function author ()
{
return $this ->belongsTo ('Author' );
}
}
Now,considerthefollowingcode:
..foreach (Book ::all()as$book )
{
echo $book ->author ->name ;
}
Thisloopwillexecute1querytoretrieveallofthebooksonthetable,thenanotherqueryforeach
booktoretrievetheauthor.So,ifwehave25books,thisloopwouldrun26queries.
Thankfully,wecanuseeagerloadingtodrasticallyreducethenumberofqueries.Therelationships
thatshouldbeeagerloadedmaybespecifiedviathe withmethod:
..foreach (Book ::with ('author' )->get()as$book )
{
echo $book ->author ->name ;
}
Intheloopabove,onlytwoquerieswillbeexecuted:
EloquentORM 261
..select *from books
select *from authors where id in ( 1,2,3,4,5,...)
Wiseuseofeagerloadingcandrasticallyincreasetheperformanceofyourapplication.
Ofcourse,youmayeagerloadmultiplerelationshipsatonetime:
..$books =Book ::with ('author' ,'publisher' )->get();
Youmayeveneagerloadnestedrelationships:
..$books =Book ::with ('author.contacts' )->get();
In the example above, the authorrelationship will be eager loaded, and the author’s contacts
relationwillalsobeloaded.
Eager Load Constraints
Sometimesyoumaywishtoeagerloadarelationship,butalsospecifyaconditionfortheeagerload.
Here’sanexample:
..$users =User ::with (array ('posts' =>function ($query )
{
$query ->where ('title' ,'like' ,'%first%' );
}))->get();
Inthisexample,we’reeagerloadingtheuser’sposts,butonlyifthepost’stitlecolumncontainsthe
word“first”.
EloquentORM 262
Lazy Eager Loading
Itisalsopossibletoeagerlyloadrelatedmodelsdirectlyfromanalreadyexistingmodelcollection.
This may be useful when dynamically deciding whether to load related models or not, or in
combinationwithcaching.
..$books =Book ::all();
$books ->load ('author' ,'publisher' );
Inserting Related Models
You will often need to insert new related models. For example, you may wish to insert a new
comment for a post. Instead of manually setting the post_idforeign key on the model, you may
insertthenewcommentfromitsparent Postmodeldirectly:
Attaching A Related Model
..$comment =new Comment( array ('message' =>'A new comment.' ));
$post =Post ::find (1);
$comment =$post ->comments ()->save ($comment );
Inthisexample,the post_idfieldwillautomaticallybesetontheinsertedcomment.
Associating Models (Belongs To)
Whenupdatinga belongsTo relationship,youmayusethe associate method.Thismethodwillset
theforeignkeyonthechildmodel:
EloquentORM 263
..$account =Account ::find (10);
$user ->account ()->associate ($account );
$user ->save ();
Inserting Related Models (Many To Many)
You may also insert related models when working with many-to-many relations. Let’s continue
using our Userand Rolemodels as examples. We can easily attach new roles to a user using the
attachmethod:
Attaching Many To Many Models
..$user =User ::find (1);
$user ->roles ()->attach (1);
Youmayalsopassanarrayofattributesthatshouldbestoredonthepivottablefortherelation:
..$user ->roles ()->attach (1,array ('expires' =>$expires ));
Ofcourse,theoppositeof attachisdetach:
..$user ->roles ()->detach (1);
You may also use the syncmethod to attach related models. The syncmethod accepts an array of
IDstoplaceonthepivottable.Afterthisoperationiscomplete,onlytheIDsinthearraywillbeon
theintermediatetableforthemodel:
EloquentORM 264
Using Sync To Attach Many To Many Models
..$user ->roles ()->sync (array (1,2,3));
YoumayalsoassociateotherpivottablevalueswiththegivenIDs:
Adding Pivot Data When Syncing
..$user ->roles ()->sync (array (1=>array ('expires' =>true )));
Sometimesyoumaywishtocreateanewrelatedmodelandattachitinasinglecommand.Forthis
operation,youmayusethe savemethod:
..$role =new Role( array ('name' =>'Editor' ));
User ::find (1)->roles ()->save ($role );
In this example, the new Rolemodel will be saved and attached to the user model. You may also
passanarrayofattributestoplaceonthejoiningtableforthisoperation:
..User ::find (1)->roles ()->save ($role ,array ('expires' =>$expires ));
Touching Parent Timestamps
When a model belongsTo another model, such as a Commentwhich belongs to a Post, it is often
helpful to update the parent’s timestamp when the child model is updated. For example, when a
Commentmodelisupdated,youmaywanttoautomaticallytouchthe updated_at timestampofthe
owning Post. Eloquent makes it easy. Just add a touchesproperty containing the names of the
relationshipstothechildmodel:
EloquentORM 265
..class Comment extends Eloquent {
protected $touches =array ('post' );
public function post ()
{
return $this ->belongsTo ('Post' );
}
}
Now,whenyouupdatea Comment,theowning Postwillhaveits updated_at columnupdated:
..$comment =Comment ::find (1);
$comment ->text ='Edit to this comment!' ;
$comment ->save ();
Working With Pivot Tables
As you have already learned, working with many-to-many relations requires the presence of an
intermediate table. Eloquent provides some very helpful ways of interacting with this table. For
example, let’s assume our Userobject has many Roleobjects that it is related to. After accessing
thisrelationship,wemayaccessthe pivottableonthemodels:
..$user =User ::find (1);
foreach ($user ->roles as$role )
{
echo $role ->pivot ->created_at ;
}
EloquentORM 266
Noticethateach Rolemodelweretrieveisautomatically assigneda pivotattribute.This attribute
containsamodelrepresentingtheintermediatetable,andmaybeusedasanyotherEloquentmodel.
By default, only the keys will be present on the pivotobject. If your pivot table contains extra
attributes,youmustspecifythemwhendefiningtherelationship:
..return $this ->belongsToMany ('Role' )->withPivot ('foo' ,'bar' );
Nowthe fooandbarattributeswillbeaccessibleonour pivotobjectforthe Rolemodel.
If you want your pivot table to have automatically maintained created_at and updated_at
timestamps,usethe withTimestamps methodontherelationshipdefinition:
..return $this ->belongsToMany ('Role' )->withTimestamps ();
Todeleteallrecordsonthepivottableforamodel,youmayusethe detachmethod:
Deleting Records On A Pivot Table
..User ::find (1)->roles ()->detach ();
Notethatthisoperationdoesnotdeleterecordsfromthe rolestable,butonlyfromthepivottable.
Defining A Custom Pivot Model
LaravelalsoallowsyoutodefineacustomPivotmodel.Todefineacustommodel,firstcreateyour
own“Base”modelclassthatextends Eloquent.InyourotherEloquentmodels,extendthiscustom
base model instead of the default Eloquent base. In your base model, add the following function
thatreturnsaninstanceofyourcustomPivotmodel:
EloquentORM 267
..public function newPivot (Model $parent ,array $attributes ,$table ,$exists )
{
return new YourCustomPivot( $parent ,$attributes ,$table ,$exists );
}
Collections
Allmulti-resultsetsreturnedbyEloquent,eitherviathe getmethodora relationship ,willreturna
collectionobject.Thisobjectimplementsthe IteratorAggregate PHPinterfacesoitcanbeiterated
overlikeanarray.However,thisobjectalsohasavarietyofotherhelpfulmethodsforworkingwith
resultsets.
For example, we may determine if a result set contains a given primary key using the contains
method:
Checking If A Collection Contains A Key
..$roles =User ::find (1)->roles ;
if($roles ->contains (2))
{
//
}
CollectionsmayalsobeconvertedtoanarrayorJSON:
..$roles =User ::find (1)->roles ->toArray ();
$roles =User ::find (1)->roles ->toJson ();
Ifacollectioniscasttoastring,itwillbereturnedasJSON:
EloquentORM 268
..$roles =(string) User ::find (1)->roles ;
Eloquent collections also contain a few helpful methods for looping and filtering the items they
contain:
Iterating Collections
..$roles =$user ->roles ->each (function ($role )
{
//
});
Filtering Collections
Whenfilteringcollections,thecallbackprovidedwillbeusedascallbackfor array_filter ¹⁰³.
..$users =$users ->filter (function ($user )
{
if($user ->isAdmin ())
{
return $user ;
}
});
Note:When filtering a collection and converting it to JSON, try calling the values
functionfirsttoresetthearray’skeys.
Applying A Callback To Each Collection Object
¹⁰³http://php.net/manual/en/function.array-filter.php
EloquentORM 269
..$roles =User ::find (1)->roles ;
$roles ->each (function ($role )
{
//
});
Sorting A Collection By A Value
..$roles =$roles ->sortBy (function ($role )
{
return $role ->created_at ;
});
Sometimes,youmaywishtoreturnacustomCollectionobjectwithyourownaddedmethods.You
mayspecifythisonyourEloquentmodelbyoverridingthe newCollection method:
Returning A Custom Collection Type
..class User extends Eloquent {
public function newCollection (array $models =array ())
{
return new CustomCollection( $models );
}
}
Accessors & Mutators
Eloquent provides a convenient way to transform your model attributes when getting or setting
them.Simplydefinea getFooAttribute methodonyourmodeltodeclareanaccessor.Keepinmind
thatthemethodsshouldfollowcamel-casing,eventhoughyourdatabasecolumnsaresnake-case:
EloquentORM 270
Defining An Accessor
..class User extends Eloquent {
public function getFirstNameAttribute ($value )
{
return ucfirst( $value );
}
}
In the example above, the first_name column has an accessor. Note that the value of the attribute
ispassedtotheaccessor.
Mutatorsaredeclaredinasimilarfashion:
Defining A Mutator
..class User extends Eloquent {
public function setFirstNameAttribute ($value )
{
$this ->attributes ['first_name' ]=strtolower( $value );
}
}
Date Mutators
Bydefault,Eloquentwillconvertthe created_at ,updated_at ,and deleted_at columnstoinstances
ofCarbon¹⁰⁴, which provides an assortment of helpful methods, and extends the native PHP
DateTime class.
You may customize which fields are automatically mutated, and even completely disable this
mutation,byoverridingthe getDates methodofthemodel:
¹⁰⁴https://github.com/briannesbitt/Carbon
EloquentORM 271
..public function getDates ()
{
return array ('created_at' );
}
Whenacolumnisconsideredadate,youmaysetitsvaluetoaUNIXtimetamp,datestring( Y-m-d),
date-timestring,andofcoursea DateTime /Carboninstance.
Tototallydisabledatemutations,simplyreturnanemptyarrayfromthe getDates method:
..public function getDates ()
{
return array ();
}
Model Events
Eloquentmodelsfireseveralevents,allowingyoutohookintovariouspointsinthemodel’slifecycle
using the following methods: creating,created,updating,updated,saving,saved,deleting,
deleted,restoring ,restored.
Whenever a new item is saved for the first time, the creating and createdevents will fire. If an
itemisnotnewandthe savemethodiscalled,the updating/updatedeventswillfire.Inbothcases,
thesaving/savedeventswillfire.
Iffalseis returned from the creating,updating,saving, ordeleting events, the action will be
cancelled:
Cancelling Save Operations Via Events
..User ::creating (function ($user )
{
if(!$user ->isValid ()) return false ;
});
EloquentORM 272
..
Eloquentmodelsalsocontainastatic bootmethod,whichmayprovideaconvenientplacetoregister
youreventbindings.
Setting A Model Boot Method
..class User extends Eloquent {
public static function boot ()
{
parent ::boot ();
// Setup event bindings...
}
}
Model Observers
Toconsolidatethehandlingofmodelevents,youmayregisteramodelobserver.Anobserverclass
mayhavemethodsthatcorrespondtothevariousmodelevents.Forexample, creating,updating,
savingmethodsmaybeonanobserver,inadditiontoanyothermodeleventname.
So,forexample,amodelobservermightlooklikethis:
..class UserObserver {
public function saving ($model )
{
//
}
public function saved ($model )
{
//
}
EloquentORM 273
..}
Youmayregisteranobserverinstanceusingthe observemethod:
..User ::observe (new UserObserver);
Converting To Arrays / JSON
WhenbuildingJSONAPIs,youmayoftenneedtoconvertyourmodelsandrelationshipstoarrays
orJSON.So,Eloquentincludesmethodsfordoingso.Toconvertamodelanditsloadedrelationship
toanarray,youmayusethe toArraymethod:
Converting A Model To An Array
..$user =User ::with ('roles' )->first ();
return $user ->toArray ();
Notethatentirecollectionsofmodelsmayalsobeconvertedtoarrays:
..return User ::all()->toArray ();
ToconvertamodeltoJSON,youmayusethe toJsonmethod:
Converting A Model To JSON
EloquentORM 274
..return User ::find (1)->toJson ();
Notethatwhenamodelorcollectioniscasttoastring,itwillbeconvertedtoJSON,meaningyou
canreturnEloquentobjectsdirectlyfromyourapplication’sroutes!
Returning A Model From A Route
..Route ::get('users' ,function ()
{
return User ::all();
});
Sometimes you may wish to limit the attributes that are included in your model’s array or JSON
form,suchaspasswords.Todoso,adda hiddenpropertydefinitiontoyourmodel:
Hiding Attributes From Array Or JSON Conversion
..class User extends Eloquent {
protected $hidden =array ('password' );
}
Note:Whenhidingrelationships,usetherelationship’s methodname,notthedynamic
accessorname.
Alternatively,youmayusethe visiblepropertytodefineawhite-list:
..protected $visible =array ('first_name' ,'last_name' );
EloquentORM 275
..
Occasionally,youmayneedtoaddarrayattributesthatdonothaveacorrespondingcolumninyour
database.Todoso,simplydefineanaccessorforthevalue:{#eloquent-array-appends}
..public function getIsAdminAttribute ()
{
return $this ->attributes ['admin' ]=='yes' ;
}
Onceyouhavecreatedtheaccessor,justaddthevaluetothe appendspropertyonthemodel:
..protected $appends =array ('is_admin' );
Oncetheattributehasbeenaddedtothe appendslist,itwillbeincludedinboththemodel’sarray
andJSONforms.
Schema Builder
•Introduction
•Creating&DroppingTables
•AddingColumns
•RenamingColumns
•DroppingColumns
•CheckingExistence
•AddingIndexes
•ForeignKeys
•DroppingIndexes
•StorageEngines
Introduction
The Laravel Schemaclass provides a database agnostic way of manipulating tables. It works well
withallofthedatabasessupportedbyLaravel,andhasaunifiedAPIacrossallofthesesystems.
Creating & Dropping Tables
Tocreateanewdatabasetable,the Schema::create methodisused:
..Schema ::create ('users' ,function ($table )
{
$table ->increments ('id' );
});
Thefirstargumentpassedtothe createmethodisthenameofthetable,andthesecondisa Closure
whichwillreceivea Blueprint objectwhichmaybeusedtodefinethenewtable.
Torenameanexistingdatabasetable,the renamemethodmaybeused:
SchemaBuilder 277
..Schema ::rename ($from ,$to);
Tospecifywhichconnectiontheschemaoperationshouldtakeplaceon,usethe Schema::connection
method:
..Schema ::connection ('foo' )->create ('users' ,function ($table )
{
$table ->increments ('id' );
});
Todropatable,youmayusethe Schema::drop method:
..Schema ::drop ('users' );
Schema ::dropIfExists ('users' );
Adding Columns
Toupdateanexistingtable,wewillusethe Schema::table method:
..Schema ::table ('users' ,function ($table )
{
$table ->string ('email' );
});
Thetablebuildercontainsavarietyofcolumntypesthatyoumayusewhenbuildingyourtables:
SchemaBuilder 278
Command Description
$table->bigIncrements('id'); IncrementingIDusinga“biginteger”equivalent.
$table->bigInteger('votes'); BIGINTequivalenttothetable
$table->binary('data'); BLOBequivalenttothetable
$table->boolean('confirmed'); BOOLEANequivalenttothetable
$table->date('created_at'); DATEequivalenttothetable
$table->dateTime('created_at'); DATETIMEequivalenttothetable
$table->decimal('amount', 5, 2); DECIMALequivalentwithaprecisionandscale
$table->double('column', 15, 8); DOUBLEequivalentwithprecision
$table->enum('choices', array('foo',
'bar'));ENUMequivalenttothetable
$table->float('amount'); FLOATequivalenttothetable
$table->increments('id'); IncrementingIDtothetable(primarykey).
$table->integer('votes'); INTEGERequivalenttothetable
$table->longText('description'); LONGTEXTequivalenttothetable
$table->mediumText('description'); MEDIUMTEXTequivalenttothetable
$table->morphs('taggable'); AddsINTEGER taggable_id andSTRING
taggable_type
$table->smallInteger('votes'); SMALLINTequivalenttothetable
$table->softDeletes(); Adds deleted_at columnforsoftdeletes
$table->string('email'); VARCHARequivalentcolumn
$table->string('name', 100); VARCHARequivalentwithalength
$table->text('description'); TEXTequivalenttothetable
$table->time('sunrise'); TIMEequivalenttothetable
$table->timestamp('added_on'); TIMESTAMPequivalenttothetable
$table->timestamps(); Adds created_at andupdated_at columns
->nullable() DesignatethatthecolumnallowsNULLvalues
->default($value) Declareadefaultvalueforacolumn
->unsigned() SetINTEGERtoUNSIGNED
IfyouareusingtheMySQLdatabase,youmayusethe aftermethodtospecifytheorderofcolumns:
Using After On MySQL
..$table ->string ('name' )->after ('email' );
Renaming Columns
To rename a column, you may use the renameColumn method on the Schema builder. Before
renamingacolumn,besuretoaddthe doctrine/dbal dependencytoyour composer.json file.
SchemaBuilder 279
Renaming A Column
..Schema ::table ('users' ,function ($table )
{
$table ->renameColumn ('from' ,'to' );
});
Note:Renaming enumcolumntypesisnotsupported.
Dropping Columns
Dropping A Column From A Database Table
..Schema ::table ('users' ,function ($table )
{
$table ->dropColumn ('votes' );
});
Dropping Multiple Columns From A Database Table
..Schema ::table ('users' ,function ($table )
{
$table ->dropColumn ('votes' ,'avatar' ,'location' );
});
Checking Existence
You may easily check for the existence of a table or column using the hasTable and hasColumn
methods:
SchemaBuilder 280
Checking For Existence Of Table
..if(Schema ::hasTable ('users' ))
{
//
}
Checking For Existence Of Columns
..if(Schema ::hasColumn ('users' ,'email' ))
{
//
}
Adding Indexes
The schema builder supports several types of indexes. There are two ways to add them. First, you
mayfluentlydefinethemonacolumndefinition,oryoumayaddthemseparately:
Fluently Creating A Column And Index
..$table ->string ('email' )->unique ();
Or,youmaychoosetoaddtheindexesonseparatelines.Belowisalistofallavailableindextypes:
Command Description
$table->primary('id'); Addingaprimarykey
$table->primary(array('first', 'last')); Addingcompositekeys
$table->unique('email'); Addingauniqueindex
$table->index('state'); Addingabasicindex
SchemaBuilder 281
Foreign Keys
Laravelalsoprovidessupportforaddingforeignkeyconstraintstoyourtables:
Adding A Foreign Key To A Table
..$table ->foreign ('user_id' )->references ('id' )->on('users' );
Inthisexample,wearestatingthatthe user_idcolumnreferencesthe idcolumnonthe userstable.
Youmayalsospecifyoptionsforthe“ondelete”and“onupdate”actionsoftheconstraint:
..$table ->foreign ('user_id' )
->references ('id' )->on('users' )
->onDelete ('cascade' );
Todropaforeignkey,youmayusethe dropForeign method.Asimilarnamingconventionisused
forforeignkeysasisusedforotherindexes:
..$table ->dropForeign ('posts_user_id_foreign' );
Note:When creating a foreign key that references an incrementing integer, remember
toalwaysmaketheforeignkeycolumn unsigned.
Dropping Indexes
To drop an index you must specify the index’s name. Laravel assigns a reasonable name to the
indexes by default. Simply concatenate the table name, the names of the column in the index, and
theindextype.Herearesomeexamples:
SchemaBuilder 282
Command Description
$table->dropPrimary('users_id_primary'); Droppingaprimarykeyfromthe“users”table
$table->dropUnique('users_email_unique'); Droppingauniqueindexfromthe“users”table
$table->dropIndex('geo_state_index'); Droppingabasicindexfromthe“geo”table
Storage Engines
Tosetthestorageengineforatable,setthe enginepropertyontheschemabuilder:
..Schema ::create ('users' ,function ($table )
{
$table ->engine ='InnoDB' ;
$table ->string ('email' );
});
Migrations & Seeding
•Introduction
•CreatingMigrations
•RunningMigrations
•RollingBackMigrations
•DatabaseSeeding
Introduction
Migrationsareatypeofversioncontrolforyourdatabase.Theyallowateamtomodifythedatabase
schema and stay up to date on the current schema state. Migrations are typically paired with the
SchemaBuilder toeasilymanageyourapplication’sscheme.
Creating Migrations
Tocreateamigration,youmayusethe migrate:make commandontheArtisanCLI:
Creating A Migration
..php artisan migrate :make create_users_table
Themigrationwillbeplacedinyour app/database/migrations folder,andwillcontainatimestamp
whichallowstheframeworktodeterminetheorderofthemigrations.
You may also specify a --pathoption when creating the migration. The path should be relative to
therootdirectoryofyourinstallation:
..php artisan migrate :make foo --path =app/migrations
The --tableand--createoptionsmayalsobeusedtoindicatethenameofthetable,andwhether
themigrationwillbecreatinganewtable:
Migrations&Seeding 284
..php artisan migrate :make add_votes_to_user_table --table =users
php artisan migrate :make create_users_table --create =users
Running Migrations
Running All Outstanding Migrations
..php artisan migrate
Running All Outstanding Migrations For A Path
..php artisan migrate --path =app/foo/migrations
Running All Outstanding Migrations For A Package
..php artisan migrate --package =vendor /package
Note:Ifyoureceivea“classnotfound”errorwhenrunningmigrations,tryrunningthe
composer dump-autoload command.
Rolling Back Migrations
Rollback The Last Migration Operation
Migrations&Seeding 285
..php artisan migrate :rollback
Rollback all migrations
..php artisan migrate :reset
Rollback all migrations and run them all again
..php artisan migrate :refresh
php artisan migrate :refresh --seed
Database Seeding
Laravel also includes a simple way to seed your database with test data using seed classes. All
seed classes are stored in app/database/seeds . Seed classes may have any name you wish, but
probably should follow some sensible convention, such as UserTableSeeder , etc. By default, a
DatabaseSeeder class is defined for you. From this class, you may use the callmethod to run
otherseedclasses,allowingyoutocontroltheseedingorder.
Example Database Seed Class
Migrations&Seeding 286
..class DatabaseSeeder extends Seeder {
public function run()
{
$this ->call ('UserTableSeeder' );
$this ->command ->info ('User table seeded!' );
}
}
class UserTableSeeder extends Seeder {
public function run()
{
DB::table ('users' )->delete ();
User ::create (array ('email' =>'foo@bar.com' ));
}
}
Toseedyourdatabase,youmayusethe db:seedcommandontheArtisanCLI:
..php artisan db :seed
Bydefault,the db:seedcommandrunsthe DatabaseSeeder class,whichmaybeusedtocallother
seed classes. However, you may use the --classoption to specify a specific seeder class to run
individually:
..php artisan db :seed --class =UserTableSeeder
You may also seed your database using the migrate:refresh command, which will also rollback
andre-runallofyourmigrations:
Migrations&Seeding 287
..php artisan migrate :refresh --seed
Redis
•Introduction
•Configuration
•Usage
•Pipelining
Introduction
Redis¹⁰⁵isanopensource,advancedkey-valuestore.Itisoftenreferredtoasadatastructureserver
sincekeyscancontain strings¹⁰⁶,hashes¹⁰⁷,lists¹⁰⁸,sets¹⁰⁹,andsortedsets ¹¹⁰.
Note:If you have the Redis PHP extension installed via PECL, you will need to rename
thealiasforRedisinyour app/config/app.php file.
Configuration
TheRedisconfigurationforyourapplicationisstoredinthe app/config/database.php file.Within
thisfile,youwillseea redisarraycontainingtheRedisserversusedbyyourapplication:
..'redis' =>array (
'cluster' =>true ,
'default' =>array ('host' =>'127.0.0.1' ,'port' =>6379 ),
),
¹⁰⁵http://redis.io
¹⁰⁶http://redis.io/topics/data-types#strings
¹⁰⁷http://redis.io/topics/data-types#hashes
¹⁰⁸http://redis.io/topics/data-types#lists
¹⁰⁹http://redis.io/topics/data-types#sets
¹¹⁰http://redis.io/topics/data-types#sorted-sets
Redis 289
The default server configuration should suffice for development. However, you are free to modify
this array based on your environment. Simply give each Redis server a name, and specify the host
andportusedbytheserver.
The clusteroption will tell the Laravel Redis client to perform client-side sharding across your
Redis nodes, allowing you to pool nodes and create a large amount of available RAM. However,
notethatclient-sideshardingdoesnothandlefailover;therefore,isprimarilysuitedforcacheddata
thatisavailablefromanotherprimarydatastore.
IfyourRedisserverrequiresauthentication,youmaysupplyapasswordbyaddinga password key
/valuepairtoyourRedisserverconfigurationarray.
Usage
YoumaygetaRedisinstancebycallingthe Redis::connection method:
..$redis =Redis ::connection ();
ThiswillgiveyouaninstanceofthedefaultRedisserver.Ifyouarenotusingserverclustering,you
maypasstheservernametothe connection methodtogetaspecificserverasdefinedinyourRedis
configuration:
..$redis =Redis ::connection ('other' );
Once you have an instance of the Redis client, we may issue any of the Redis commands ¹¹¹to the
instance.LaravelusesmagicmethodstopassthecommandstotheRedisserver:
..$redis ->set('name' ,'Taylor' );
$name =$redis ->get('name' );
$values =$redis ->lrange ('names' ,5,10);
¹¹¹http://redis.io/commands
Redis 290
Notice the arguments to the command are simply passed into the magic method. Of course, you
are not required to use the magic methods, you may also pass commands to the server using the
commandmethod:
..$values =$redis ->command ('lrange' ,array (5,10));
When you are simply executing commands against the default connection, just use static magic
methodsonthe Redisclass:
..Redis ::set('name' ,'Taylor' );
$name =Redis ::get('name' );
$values =Redis ::lrange ('names' ,5,10);
Note:RediscacheandsessiondriversareincludedwithLaravel.
Pipelining
Pipelining should be used when you need to send many commands to the server in one operation.
Togetstarted,usethe pipeline command:
Piping Many Commands To Your Servers
..Redis ::pipeline (function ($pipe )
{
for ($i=0;$i<1000 ;$i++)
{
$pipe ->set("key: $i",$i);
}
});
Artisan CLI
•Introduction
•Usage
Introduction
Artisan is the name of the command-line interface included with Laravel. It provides a number
of helpful commands for your use while developing your application. It is driven by the powerful
SymfonyConsolecomponent.
Usage
ToviewalistofallavailableArtisancommands,youmayusethe listcommand:
Listing All Available Commands
..php artisan list
Everycommandalsoincludesa“help”screenwhichdisplaysanddescribesthecommand’savailable
argumentsandoptions.Toviewahelpscreen,simplyprecedethenameofthecommandwith help:
Viewing The Help Screen For A Command
..php artisan help migrate
Youmayspecifytheconfigurationenvironmentthatshouldbeusedwhilerunningacommandusing
the--envswitch:
Specifying The Configuration Environment
ArtisanCLI 292
..php artisan migrate --env=local
YoumayalsoviewthecurrentversionofyourLaravelinstallationusingthe --version option:
Displaying Your Current Laravel Version
..php artisan --version
Artisan Development
•Introduction
•BuildingACommand
•RegisteringCommands
•CallingOtherCommands
Introduction
InadditiontothecommandsprovidedwithArtisan,youmayalsobuildyourowncustomcommands
for working with your application. You may store your custom commands in the app/commands
directory;however,youarefreetochooseyourownstoragelocationaslongasyourcommandscan
beautoloadedbasedonyour composer.json settings.
Building A Command
Generating The Class
Tocreateanewcommand,youmayusethe command:make Artisancommand,whichwillgenerate
acommandstubtohelpyougetstarted:
Generate A New Command Class
..php artisan command :make FooCommand
By default, generated commands will be stored in the app/commands directory; however, you may
specifycustompathornamespace:
..php artisan command :make FooCommand --path =app/classes --namespace =Classes
ArtisanDevelopment 294
When creating the command, the --command option may be used to assign the terminal command
name:
..php artisan command :make AssignUsers --command =users :assign
Ifyouneedtocreateacommandfora workbenchpackage ,usethe --benchswitch:
..php artisan command :make AssignUsers --bench ="vendor/package "
Writing The Command
Once your command is generated, you should fill out the nameand description properties of the
class,whichwillbeusedwhendisplayingyourcommandonthe listscreen.
The firemethod will be called when your command is executed. You may place any command
logicinthismethod.
Arguments & Options
The getArguments and getOptions methods are where you may define any arguments or options
yourcommandreceives.Bothofthesemethodsreturnanarrayofcommands,whicharedescribed
byalistofarrayoptions.
Whendefining arguments ,thearraydefinitionvaluesrepresentthefollowing:
..array ($name ,$mode ,$description ,$defaultValue )
Theargument modemaybeanyofthefollowing: InputArgument::REQUIRED orInputArgument::OPTIONAL .
Whendefining options,thearraydefinitionvaluesrepresentthefollowing:
ArtisanDevelopment 295
..array ($name ,$shortcut ,$mode ,$description ,$defaultValue )
For options, the argument modemay be: InputOption::VALUE_REQUIRED ,InputOption::VALUE_-
OPTIONAL,InputOption::VALUE_IS_ARRAY ,InputOption::VALUE_NONE .
The VALUE_IS_ARRAY mode indicates that the switch may be used multiple times when calling the
command:
..php artisan foo --option =bar --option =baz
The VALUE_NONE optionindicatesthattheoptionissimplyusedasa“switch”:
..php artisan foo --option
Retrieving Input
Whileyourcommandisexecuting,youwillobviouslyneedtoaccessthevaluesforthearguments
andoptionsacceptedbyyourapplication.Todoso,youmayusethe argumentandoptionmethods:
Retrieving The Value Of A Command Argument
..$value =$this ->argument ('name' );
Retrieving All Arguments
ArtisanDevelopment 296
..$arguments =$this ->argument ();
Retrieving The Value Of A Command Option
..$value =$this ->option ('name' );
Retrieving All Options
..$options =$this ->option ();
Writing Output
Tosendoutputtotheconsole,youmayusethe info,comment,question anderrormethods.Each
ofthesemethodswillusetheappropriateANSIcolorsfortheirpurpose.
Sending Information To The Console
..$this ->info ('Display this on the screen' );
Sending An Error Message To The Console
..$this ->error ('Something went wrong!' );
ArtisanDevelopment 297
Asking Questions
Youmayalsousethe askandconfirmmethodstoprompttheuserforinput:
Asking The User For Input
..$name =$this ->ask('What is your name?' );
Asking The User For Secret Input
..$password =$this ->secret ('What is the password?' );
Asking The User For Confirmation
..if($this ->confirm ('Do you wish to continue? [yes|no]' ))
{
//
}
Youmayalsospecifyadefaultvaluetothe confirmmethod,whichshouldbe trueorfalse:
..$this ->confirm ($question ,true );
Registering Commands
Once your command is finished, you need to register it with Artisan so it will be available for
use. This is typically done in the app/start/artisan.php file. Within this file, you may use the
Artisan::add methodtoregisterthecommand:
ArtisanDevelopment 298
Registering An Artisan Command
..Artisan ::add(new CustomCommand);
Ifyourcommandisregisteredintheapplication IoCcontainer ,youmayusethe Artisan::resolve
methodtomakeitavailabletoArtisan:
Registering A Command That Is In The IoC Container
..Artisan ::resolve ('binding.name' );
Calling Other Commands
Sometimes you may wish to call other commands from your command. You may do so using the
callmethod:
Calling Another Command
..$this ->call ('command:name' ,array ('argument' =>'foo' ,'--option' =>'bar' ));
