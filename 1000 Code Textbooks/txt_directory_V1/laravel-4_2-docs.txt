
Laravel 4.2.x Docs
Most up-to-date offline documentation
MNIslamShihan
Thisbookisforsaleat http://leanpub.com/laravel-4_2-docs
Thisversionwaspublishedon2015-02-26
ThisisaLeanpubbook.LeanpubempowersauthorsandpublisherswiththeLeanPublishing
process.LeanPublishing istheactofpublishinganin-progressebookusinglightweighttoolsand
manyiterationstogetreaderfeedback,pivotuntilyouhavetherightbookandbuildtractiononce
youdo.
Thisworkislicensedundera CreativeCommonsAttribution-NonCommercial-ShareAlike3.0
UnportedLicense
Tweet This Book!
PleasehelpMNIslamShihanbyspreadingthewordaboutthisbookon Twitter!
Thesuggestedtweetforthisbookis:
@laravelphpIjustboughtofflineversionofLaravelDocsfrom@leanpubwhichiscompletelyfree
&insyncwithlatestofficialdocs
Thesuggestedhashtagforthisbookis #laravel.
Findoutwhatotherpeoplearesayingaboutthebookbyclickingonthislinktosearchforthis
hashtagonTwitter:
https://twitter.com/search?q=#laravel
Also By M N Islam Shihan
Laravel3.xDocs
Laravel5.0.xDocs
Laravel4.1.xDocs
Laravel4.0.xDocs
MakoFramework4.4
MakoFramework(masterbranch)
Taylor Otwell along with entire Laravel community
Contents
Preface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2
WhereToStart . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2
LaravelPhilosophy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2
Laravel Quickstart . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3
Installation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3
LocalDevelopmentEnvironment . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5
Routing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5
CreatingAView . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6
CreatingAMigration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7
EloquentORM . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8
DisplayingData . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9
DeployingYourApplication . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10
Release Notes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11
Laravel4.2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11
Laravel4.1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13
Upgrade Guide . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16
UpgradingTo4.2From4.1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16
UpgradingTo4.1.29From<=4.1.x . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18
UpgradingTo4.1.26From<=4.1.25 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18
UpgradingTo4.1From4.0 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19
Contribution Guide . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22
CoreDevelopmentDiscussion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23
NewFeatures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23
Bugs. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23
CreatingLiferaftApplications . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24
GrabbingLiferaftApplications . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25
WhichBranch? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26
SecurityVulnerabilities . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27
CONTENTS
CodingStyle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27
Getting Started . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28
Installation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29
InstallComposer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29
InstallLaravel . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29
ServerRequirements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30
Configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30
PrettyURLs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31
Configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33
EnvironmentConfiguration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 34
ProtectingSensitiveConfiguration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 36
MaintenanceMode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37
Laravel Homestead . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38
IncludedSoftware . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38
Installation&Setup . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39
DailyUsage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43
Ports. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 44
Request Lifecycle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 45
Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 45
RequestLifecycle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 45
StartFiles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46
ApplicationEvents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47
Routing. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 49
BasicRouting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 49
RouteParameters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 50
RouteFilters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53
NamedRoutes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56
RouteGroups . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 57
Sub-DomainRouting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 57
RoutePrefixing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58
RouteModelBinding . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58
Throwing404Errors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59
RoutingToControllers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60
Requests & Input . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61
BasicInput . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61
CONTENTS
Cookies . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 62
OldInput . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 63
Files. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64
RequestInformation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 66
Views & Responses . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 70
BasicResponses . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 70
Redirects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71
Views. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72
ViewComposers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74
SpecialResponses . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 76
ResponseMacros . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77
Controllers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 78
BasicControllers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 78
ControllerFilters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80
ImplicitControllers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81
RESTfulResourceControllers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 82
HandlingMissingMethods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 85
Errors & Logging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 86
Configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 86
HandlingErrors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87
HTTPExceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 88
Handling404Errors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 88
Logging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 89
Security. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91
Configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91
StoringPasswords . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91
AuthenticatingUsers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 92
ManuallyLoggingInUsers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95
ProtectingRoutes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 96
HTTPBasicAuthentication . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 96
PasswordReminders&Reset . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 98
Encryption . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 100
AuthenticationDrivers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101
Laravel Cashier . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102
Configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102
SubscribingToAPlan . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 103
NoCardUpFront . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104
SwappingSubscriptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 105
CONTENTS
SubscriptionQuantity . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 105
CancellingASubscription . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 106
ResumingASubscription . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 106
CheckingSubscriptionStatus . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 106
HandlingFailedPayments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 108
HandlingOtherStripeWebhooks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 109
Invoices . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 109
Cache. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111
Configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111
CacheUsage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111
Increments&Decrements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114
CacheTags . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114
DatabaseCache . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115
Extending The Framework . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 117
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 117
Managers&Factories . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 117
WhereToExtend . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 118
Cache. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 118
Session. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 120
Authentication . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 121
IoCBasedExtension . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123
RequestExtension . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 124
Events. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 126
BasicUsage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 126
WildcardListeners . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 127
UsingClassesAsListeners . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 128
QueuedEvents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 129
EventSubscribers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 130
Facades. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 132
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 132
Explanation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 132
PracticalUsage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 133
CreatingFacades . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 133
MockingFacades . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 135
FacadeClassReference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 135
Forms & HTML . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 138
OpeningAForm . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 138
CSRFProtection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 139
FormModelBinding . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 140
CONTENTS
Labels. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 140
Text,TextArea,Password&HiddenFields . . . . . . . . . . . . . . . . . . . . . . . . . . 141
CheckboxesandRadioButtons . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 142
Number . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 142
FileInput . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 142
Drop-DownLists . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 143
Buttons . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 144
CustomMacros . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 144
GeneratingURLs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 144
Helper Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 145
Arrays. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 145
Paths. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 151
Strings. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 151
URLs. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 155
Miscellaneous . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 157
IoC Container . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 159
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 159
BasicUsage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 159
WhereToRegisterBindings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 160
AutomaticResolution . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 161
PracticalUsage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 162
ServiceProviders . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 163
ContainerEvents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 164
Localization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 165
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 165
LanguageFiles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 165
BasicUsage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 166
Pluralization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 167
Validation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 168
OverridingPackageLanguageFiles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 168
Mail. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 169
Configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 169
BasicUsage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 170
EmbeddingInlineAttachments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 172
QueueingMail . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 172
Mail&LocalDevelopment . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 173
Package Development . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 174
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 174
CreatingAPackage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 175
CONTENTS
PackageStructure . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 175
ServiceProviders . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 176
DeferredProviders . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 177
PackageConventions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 178
DevelopmentWorkflow . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 178
PackageRouting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 179
PackageConfiguration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 179
PackageViews . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 181
PackageMigrations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 181
PackageAssets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 182
PublishingPackages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 183
Pagination . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 184
Configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 184
Usage. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 184
AppendingToPaginationLinks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 186
ConvertingToJSON . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 187
CustomPresenters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 187
Queues. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 189
Configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 189
BasicUsage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 189
QueueingClosures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 193
RunningTheQueueListener . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 193
DaemonQueueWorker . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 195
PushQueues . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 196
FailedJobs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 197
Security. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 199
Configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 199
StoringPasswords . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 199
AuthenticatingUsers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 200
ManuallyLoggingInUsers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 203
ProtectingRoutes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 204
HTTPBasicAuthentication . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 204
PasswordReminders&Reset . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 206
Encryption . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 208
AuthenticationDrivers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 209
Session. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 210
Configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 210
SessionUsage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 210
FlashData . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 212
DatabaseSessions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 213
CONTENTS
SessionDrivers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 213
SSH. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 215
Configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 215
BasicUsage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 215
Tasks. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 216
SFTPDownloads . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 217
SFTPUploads . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 217
TailingRemoteLogs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 217
EnvoyTaskRunner . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 218
Templates . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 224
ControllerLayouts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 224
BladeTemplating . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 224
OtherBladeControlStructures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 226
ExtendingBlade . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 229
Testing. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 230
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 230
Defining&RunningTests . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 230
TestEnvironment . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 231
CallingRoutesFromTests . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 231
MockingFacades . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 233
FrameworkAssertions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 234
HelperMethods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 236
RefreshingTheApplication . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 237
Validation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 238
BasicUsage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 238
WorkingWithErrorMessages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 240
ErrorMessages&Views . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 241
AvailableValidationRules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 243
ConditionallyAddingRules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 249
CustomErrorMessages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 251
CustomValidationRules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 252
Database . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 255
Basic Database Usage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 256
Configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 256
Read/WriteConnections . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 256
RunningQueries . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 257
DatabaseTransactions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 258
CONTENTS
AccessingConnections . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 259
QueryLogging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 260
Query Builder . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 261
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 261
Selects. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 261
Joins. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 265
AdvancedWheres . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 266
Aggregates . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 267
RawExpressions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 268
Inserts. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 268
Updates . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 269
Deletes. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 269
Unions. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 270
PessimisticLocking . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 270
CachingQueries . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 271
Eloquent ORM . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 272
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 272
BasicUsage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 272
MassAssignment . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 276
Insert,Update,Delete . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 277
SoftDeleting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 280
Timestamps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 282
QueryScopes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 283
GlobalScopes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 284
Relationships . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 286
QueryingRelations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 296
EagerLoading . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 297
InsertingRelatedModels . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 300
TouchingParentTimestamps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 303
WorkingWithPivotTables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 303
Collections . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 305
Accessors&Mutators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 308
DateMutators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 308
ModelEvents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 309
ModelObservers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 310
ConvertingToArrays/JSON . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 311
Schema Builder . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 314
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 314
Creating&DroppingTables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 314
AddingColumns . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 315
CONTENTS
RenamingColumns . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 317
DroppingColumns . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 317
CheckingExistence . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 318
AddingIndexes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 318
ForeignKeys . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 319
DroppingIndexes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 319
DroppingTimestamps&SoftDeletes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 320
StorageEngines . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 320
Migrations & Seeding . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 321
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 321
CreatingMigrations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 321
RunningMigrations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 322
RollingBackMigrations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 323
DatabaseSeeding . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 323
Redis. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 326
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 326
Configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 326
Usage. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 327
Pipelining . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 328
Artisan CLI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 329
Artisan CLI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 330
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 330
Usage. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 330
Artisan Development . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 332
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 332
BuildingACommand . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 332
RegisteringCommands . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 336
CallingOtherCommands . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 337
Preface
Introduction
•WhereToStart
•LaravelPhilosophy
Where To Start
Learninganewframeworkcanbedaunting,butit’salsoexciting.Tosmoothyourtransition,we’ve
attemptedtocreateveryclear,concisedocumentationforLaravel.Herearesomerecommendations
forwhattoreadfirst:
•Installation andConfiguration
•Routing
•Requests&Input
•Views&Responses
•Controllers
After reading through these documents, you should have a good grasp on basic request / response
handlinginLaravel.Next,youmaywishtoreadabout configuringyourdatabase ,thefluentquery
builder,andtheEloquentORM .Or,youmaywishtoreadabout authenticationandsecurity soyou
canstartsigningpeopleintoyourapplication.
Laravel Philosophy
Laravel is a web application framework with expressive, elegant syntax. We believe development
mustbeanenjoyable,creativeexperiencetobetrulyfulfilling.Laravelattemptstotakethepainout
ofdevelopmentbyeasingcommontasksusedinthemajorityofwebprojects,suchasauthentication,
routing,sessions,andcaching.
Laravelaimstomakethedevelopmentprocessapleasingoneforthedeveloperwithoutsacrificing
application functionality. Happy developers make the best code. To this end, we’ve attempted to
combine the very best of what we have seen in other web frameworks, including frameworks
implementedinotherlanguages,suchasRubyonRails,ASP.NETMVC,andSinatra.
Laravel is accessible, yet powerful, providing powerful tools needed for large, robust applications.
A superb inversion of control container, expressive migration system, and tightly integrated unit
testingsupportgiveyouthetoolsyouneedtobuildanyapplicationwithwhichyouaretasked.
Laravel Quickstart
•Installation
•LocalDevelopmentEnvironment
•Routing
•CreatingAView
•CreatingAMigration
•EloquentORM
•DisplayingData
•DeployingYourApplication
Installation
Via Laravel Installer
First,downloadtheLaravelinstallerusingComposer.
..composer global require "laravel/installer=~1.1 "
Makesuretoplacethe /.composer/vendor/bin directoryinyourPATH(or C:\%HOMEPATH%\AppData\Roaming\Composer\vendor\bin
ifworkingwithWindows)sothe laravelexecutableisfoundwhenyourunthe laravelcommand
inyourterminal.
Once installed, the simple laravel new command will create a fresh Laravel installation in the
directory you specify. For instance, laravel new blog would create a directory named blog
containing a fresh Laravel installation with all dependencies installed. This method of installation
ismuchfasterthaninstallingviaComposer.
Via Composer
The Laravel framework utilizes Composer ¹for installation and dependency management. If you
haven’talready,startby installingComposer ².
NowyoucaninstallLaravelbyissuingthefollowingcommandfromyourterminal:
¹http://getcomposer.org
²http://getcomposer.org/doc/00-intro.md
LaravelQuickstart 4
..composer create -project laravel /laravel your -project -name --prefer -dist
ThiscommandwilldownloadandinstallafreshcopyofLaravelinanew your-project-name folder
withinyourcurrentdirectory.
If you prefer, you can alternatively download a copy of the Laravel repository from GitHub ³
manually. Next run the composer install command in the root of your manually created project
directory.Thiscommandwilldownloadandinstalltheframework’sdependencies.
Permissions
AfterinstallingLaravel,youmayneedtograntthewebserverwritepermissionstothe app/storage
directories.Seethe Installation documentationformoredetailsonconfiguration.
Serving Laravel
Typically, you may use a web server such as Apache or Nginx to serve your Laravel applications.
If you are on PHP 5.4+ and would like to use PHP’s built-in development server, you may use the
serveArtisancommand:
..php artisan serve
By default the HTTP-server will listen to port 8000. However if that port is already in use or you
wish to serve multiple applications this way, you might want to specify what port to use. Just add
the–portargument:
..php artisan serve --port =8080
Directory Structure
After installing the framework, take a glance around the project to familiarize yourself with the
directorystructure.The appdirectorycontainsfolderssuchas views,controllers ,and models.Most
ofyourapplication’scodewillresidesomewhereinthisdirectory.Youmayalsowishtoexplorethe
app/config directoryandtheconfigurationoptionsthatareavailabletoyou.
³https://github.com/laravel/laravel/archive/master.zip
LaravelQuickstart 5
Local Development Environment
In the past, configuring a local PHP development environment on your machine was a headache.
Installing the proper version of PHP, required extensions, and other needed components is time
consumingandconfusing.Instead,considerusing LaravelHomestead .Homesteadisasimplevirtual
machinedesignedforLaraveland Vagrant⁴.SincetheHomesteadVagrantboxispre-packagedwith
allofthesoftwareyouneedtobuildrobustPHPapplications,youcancreateavirtualized,isolated
developmentenvironmentinseconds.HereisalistofsomeofthegoodiesincludedwithHomestead:
•Nginx
•PHP5.6
•MySQL
•Redis
•Memcached
•Beanstalk
Don’t worry, even though “virtualized” sounds complicated, it’s painless. VirtualBox and Vagrant,
which are Homestead’s two dependencies, both include simple, graphical installers for all popular
operatingsystems.Checkoutthe Homesteaddocumentation togetstarted.
Routing
To get started, let’s create our first route. In Laravel, the simplest route is a route to a Closure. Pop
openthe app/routes.php fileandaddthefollowingroutetothebottomofthefile:
..Route ::get('users' ,function ()
{
return 'Users!' ;
});
Now, if you hit the /usersroute in your web browser, you should see Users!displayed as the
response.Great!You’vejustcreatedyourfirstroute.
Routescanalsobeattachedtocontrollerclasses.Forexample:
⁴http://vagrantup.com
LaravelQuickstart 6
..Route ::get('users' ,'UserController@getIndex' );
Thisrouteinformstheframeworkthatrequeststothe /usersrouteshouldcallthe getIndexmethod
on the UserController class. For more information on controller routing, check out the controller
documentation .
Creating A View
Next, we’ll create a simple view to display our user data. Views live in the app/views directory
and contain the HTML of your application. We’re going to place two new views in this directory:
layout.blade.php andusers.blade.php .First,let’screateour layout.blade.php file:
..<html >
<body >
<h1>Laravel Quickstart </h1>
@yield( 'content' )
</body >
</html >
Next,we’llcreateour users.blade.php view:
..@extends ('layout' )
@section( 'content' )
Users !
@stop
Some of this syntax probably looks quite strange to you. That’s because we’re using Laravel’s
templatingsystem:Blade.Bladeisveryfast,becauseitissimplyahandfulofregularexpressionsthat
arerunagainstyourtemplatestocompilethemtopurePHP.Bladeprovidespowerfulfunctionality
liketemplateinheritance,aswellassomesyntaxsugarontypicalPHPcontrolstructuressuchas if
andfor.Checkoutthe Bladedocumentation formoredetails.
Nowthatwehaveourviews,let’sreturnitfromour /usersroute.Insteadofreturning Users!from
theroute,returntheviewinstead:
LaravelQuickstart 7
..Route ::get('users' ,function ()
{
return View ::make ('users' );
});
Wonderful! Now you have setup a simple view that extends a layout. Next, let’s start working on
ourdatabaselayer.
Creating A Migration
To create a table to hold our data, we’ll use the Laravel migration system. Migrations let you
expressively define modifications to your database, and easily share them with the rest of your
team.
First,let’sconfigureadatabaseconnection.Youmayconfigureallofyourdatabaseconnectionsfrom
theapp/config/database.php file. By default, Laravel is configured to use MySQL, and you will
needtosupplyconnectioncredentialswithinthedatabaseconfigurationfile.Ifyouwish,youmay
changethe driveroptionto sqliteanditwillusetheSQLitedatabaseincludedinthe app/database
directory.
Next, to create the migration, we’ll use the Artisan CLI . From the root of your project, run the
followingfromyourterminal:
..php artisan migrate :make create_users_table
Next, find the generated migration file in the app/database/migrations folder. This file contains
a class with two methods: upand down. In the upmethod, you should make the desired changes to
yourdatabasetables,andinthe downmethodyousimplyreversethem.
Let’sdefineamigrationthatlookslikethis:
..
LaravelQuickstart 8
..public function up()
{
Schema ::create ('users' ,function ($table )
{
$table ->increments ('id' );
$table ->string ('email' )->unique ();
$table ->string ('name' );
$table ->timestamps ();
});
}
public function down ()
{
Schema ::drop ('users' );
}
Next, we can run our migrations from our terminal using the migratecommand. Simply execute
thiscommandfromtherootofyourproject:
..php artisan migrate
If youwish to rollbacka migration, youmay issue the migrate:rollback command.Nowthat we
haveadatabasetable,let’sstartpullingsomedata!
Eloquent ORM
Laravel ships with a superb ORM: Eloquent. If you have used the Ruby on Rails framework, you
willfindEloquentfamiliar,asitfollowstheActiveRecordORMstyleofdatabaseinteraction.
First,let’sdefineamodel.AnEloquentmodelcanbeusedtoqueryanassociateddatabasetable,as
wellasrepresentagivenrowwithinthattable.Don’tworry,itwillallmakesensesoon!Modelsare
typicallystoredinthe app/models directory.Let’sdefinea User.phpmodelinthatdirectorylikeso:
..class User extends Eloquent {}
NotethatwedonothavetotellEloquentwhichtabletouse.Eloquenthasavarietyofconventions,
oneofwhichistousethepluralformofthemodelnameasthemodel’sdatabasetable.Convenient!
LaravelQuickstart 9
Usingyourpreferreddatabaseadministrationtool,insertafewrowsintoyour userstable,andwe’ll
useEloquenttoretrievethemandpassthemtoourview.
Nowlet’smodifyour /usersroutetolooklikethis:
..Route ::get('users' ,function ()
{
$users =User ::all();
return View ::make ('users' )->with ('users' ,$users );
});
Let’swalkthroughthisroute.First,the allmethodonthe Usermodelwillretrievealloftherows
in the userstable. Next, we’re passing these records to the view via the withmethod. The with
methodacceptsakeyandavalue,andisusedtomakeapieceofdataavailabletoaview.
Awesome.Nowwe’rereadytodisplaytheusersinourview!
Displaying Data
Nowthatwehavemadethe usersavailabletoourview,wecandisplaythemlikeso:
..@extends ('layout' )
@section( 'content' )
@foreach ($users as$user )
<p>{{$user ->name }}</p>
@endforeach
@stop
You may be wondering where to find our echostatements. When using Blade, you may echo data
bysurroundingitwithdoublecurlybraces.It’sacinch.Now,youshouldbeabletohitthe /users
routeandseethenamesofyourusersdisplayedintheresponse.
This is just the beginning. In this tutorial, you’ve seen the very basics of Laravel, but there are so
many more exciting things to learn. Keep reading through the documentation and dig deeper into
thepowerfulfeaturesavailabletoyouin EloquentandBlade.Or,maybeyou’remoreinterestedin
QueuesandUnit Testing . Then again, maybe you want to flex your architecture muscles with the
IoCContainer .Thechoiceisyours!
LaravelQuickstart 10
Deploying Your Application
OneofLaravel’sgoalsistomakePHPapplicationdevelopmentenjoyablefromdownloadtodeploy,
andLaravel Forge ⁵provides a simple way to deploy your Laravel applications onto blazing fast
servers.ForgecanconfigureandprovisionserversonDigitalOcean,Linode,Rackspace,andAmazon
EC2.LikeHomestead,allofthelatestgoodiesareincluded:Nginx,PHP5.6,MySQL,Postgres,Redis,
Memcached,andmore.Forge“QuickDeploy”canevendeployyourcodeforyoueachtimeyoupush
changesouttoGitHuborBitbucket!
Ontopofthat,Forgecanhelpyouconfigurequeueworkers,SSL,Cronjobs,sub-domains,andmore.
Formoreinformation,visitthe Forgewebsite ⁶.
⁵https://forge.laravel.com
⁶https://forge.laravel.com
Release Notes
•Laravel4.2
•Laravel4.1
Laravel 4.2
The full change list for this release by running the php artisan changes command from a
4.2 installation, or by viewing the change file on Github ⁷. These notes only cover the major
enhancementsandchangesfortherelease.
Note:During the 4.2 release cycle, many small bug fixes and enhancements were incor-
poratedintothevariousLaravel4.1pointreleases.So,besuretocheckthechangelistfor
Laravel4.1aswell!
PHP 5.4 Requirement
Laravel4.2requiresPHP5.4orgreater.ThisupgradedPHPrequirementallowsustousenewPHP
features such as traits to provide more expressive interfaces for tools like Laravel Cashier . PHP 5.4
alsobringssignificantspeedandperformanceimprovementsoverPHP5.3.
Laravel Forge
Laravel Forge, a new web based application, provides a simple way to create and manage PHP
serversonthecloudofyourchoice,includingLinode,DigitalOcean,Rackspace,andAmazonEC2.
SupportingautomatedNginxconfiguration,SSHkeyaccess,Cronjobautomation,servermonitoring
viaNewRelic&Papertrail,“PushToDeploy”,Laravelqueueworkerconfiguration,andmore,Forge
providesthesimplestandmostaffordablewaytolaunchallofyourLaravelapplications.
ThedefaultLaravel4.2installation’s app/config/database.php configurationfileisnowconfigured
forForgeusagebydefault,allowingformoreconvenientdeploymentoffreshapplicationsontothe
platform.
MoreinformationaboutLaravelForgecanbefoundonthe officialForgewebsite ⁸.
⁷https://github.com/laravel/framework/blob/4.2/src/Illuminate/Foundation/changes.json
⁸https://forge.laravel.com
ReleaseNotes 12
Laravel Homestead
Laravel Homestead is an official Vagrant environment for developing robust Laravel and PHP
applications. The vast majority of the boxes’ provisioning needs are handled before the box
is packaged for distribution, allowing the box to boot extremely quickly. Homestead includes
Nginx 1.6, PHP 5.6, MySQL, Postgres, Redis, Memcached, Beanstalk, Node, Gulp, Grunt, & Bower.
Homestead includes a simple Homestead.yaml configuration file for managing multiple Laravel
applicationsonasinglebox.
ThedefaultLaravel4.2installationnowincludesan app/config/local/database.php configuration
file that is configured to use the Homestead database out of the box, making Laravel initial
installationandconfigurationmoreconvenient.
Theofficialdocumentationhasalsobeenupdatedtoinclude Homesteaddocumentation .
Laravel Cashier
Laravel Cashier is a simple, expressive library for managing subscription billing with Stripe. With
theintroductionofLaravel4.2,weareincludingCashierdocumentationalongwiththemainLaravel
documentation, though installation of the component itself is still optional. This release of Cashier
bringsnumerousbugfixes,multi-currencysupport,andcompatibilitywiththelatestStripeAPI.
Daemon Queue Workers
The Artisan queue:work command now supports a --daemon option to start a worker in “daemon
mode”, meaning the worker will continue to process jobs without ever re-booting the framework.
ThisresultsinasignificantreductioninCPUusageatthecostofaslightlymorecomplexapplication
deploymentprocess.
Moreinformationaboutdaemonqueueworkerscanbefoundinthe queuedocumentation .
Mail API Drivers
Laravel 4.2 introduces new Mailgun and Mandrill API drivers for the Mailfunctions. For many
applications, this provides a faster and more reliable method of sending e-mails than the SMTP
options.ThenewdriversutilizetheGuzzle4HTTPlibrary.
Soft Deleting Traits
A much cleaner architecture for “soft deletes” and other “global scopes” has been introduced via
PHP 5.4 traits. This newarchitectureallows for the easier construction of similar global traits, and
acleanerseparationofconcernswithintheframeworkitself.
Moreinformationonthenew SoftDeletingTrait maybefoundinthe Eloquentdocumentation .
ReleaseNotes 13
Convenient Auth & Remindable Traits
ThedefaultLaravel4.2installationnowusessimpletraitsforincludingtheneededpropertiesforthe
authentication and password reminder user interfaces. This provides a much cleaner default User
modelfileoutofthebox.
“Simple Paginate”
Anew simplePaginate methodwasaddedtothequeryandEloquentbuilderwhichallowsformore
efficientquerieswhenusingsimple“Next”and“Previous”linksinyourpaginationview.
Migration Confirmation
Inproduction,destructivemigrationoperationswillnowaskforconfirmation.Commandsmaybe
forcedtorunwithoutanypromptsusingthe --forcecommand.
Laravel 4.1
Full Change List
The full change list for this release by running the php artisan changes command from a
4.1 installation, or by viewing the change file on Github ⁹. These notes only cover the major
enhancementsandchangesfortherelease.
New SSH Component
An entirely new SSHcomponent has been introduced with this release. This feature allows you
to easily SSH into remote servers and run commands. To learn more, consult the SSH component
documentation .
The new php artisan tail command utilizes the new SSH component. For more information,
consultthe tailcommanddocumentation .
Boris In Tinker
The php artisan tinker command now utilizes the Boris REPL ¹⁰if your system supports it. The
readline and pcntlPHP extensions must be installed to use this feature. If you do not have these
extensions,theshellfrom4.0willbeused.
⁹https://github.com/laravel/framework/blob/4.1/src/Illuminate/Foundation/changes.json
¹⁰https://github.com/d11wtq/boris
ReleaseNotes 14
Eloquent Improvements
Anew hasManyThrough relationshiphasbeenaddedtoEloquent.Tolearnhowtouseit,consultthe
Eloquentdocumentation .
Anew whereHasmethodhasalsobeenintroducedtoallow retrievingmodelsbasedonrelationship
constraints .
Database Read / Write Connections
Automatic handling of separate read / write connections is nowavailable throughoutthe database
layer,includingthequerybuilderandEloquent.Formoreinformation,consult thedocumentation .
Queue Priority
Queue priorities are now supported by passing a comma-delimited list to the queue:listen
command.
Failed Queue Job Handling
The queue facilities now include automatic handling of failed jobs when using the new --tries
switch on queue:listen . More information on handling failed jobs can be found in the queue
documentation .
Cache Tags
Cache“sections”havebeensupersededby“tags”.Cachetagsallowyoutoassignmultiple“tags”to
acacheitem,andflushallitemsassignedtoasingletag.Moreinformationonusingcachetagsmay
befoundinthe cachedocumentation .
Flexible Password Reminders
The password reminder engine has been changed to provide greater developer flexibility when
validating passwords, flashing status messages to the session, etc. For more information on using
theenhancedpasswordreminderengine, consultthedocumentation .
Improved Routing Engine
Laravel 4.1 features a totally re-written routing layer. The API is the same; however, registering
routes is a full 100% faster compared to 4.0. The entire engine has been greatly simplified, and the
dependencyonSymfonyRoutinghasbeenminimizedtothecompilingofrouteexpressions.
ReleaseNotes 15
Improved Session Engine
With this release, we’re also introducing an entirely new session engine. Similar to the routing
improvements, the new session layer is leaner and faster. We are no longer using Symfony’s (and
therefore PHP’s) session handling facilities, and are using a custom solution that is simpler and
easiertomaintain.
Doctrine DBAL
Ifyouareusingthe renameColumn functioninyourmigrations,youwillneedtoaddthe doctrine/dbal
dependencytoyour composer.json file.ThispackageisnolongerincludedinLaravelbydefault.
Upgrade Guide
•UpgradingTo4.2From4.1
•UpgradingTo4.1.29From<=4.1.x
•UpgradingTo4.1.26From<=4.1.25
•UpgradingTo4.1From4.0
Upgrading To 4.2 From 4.1
PHP 5.4+
Laravel4.2requiresPHP5.4.0orgreater.
Encryption Defaults
Add a new cipheroption in your app/config/app.php configuration file. The value of this option
shouldbe MCRYPT_RIJNDAEL_256 .
..'cipher' =>MCRYPT_RIJNDAEL_256
ThissettingmaybeusedtocontrolthedefaultcipherusedbytheLaravelencryptionfacilities.
Note:InLaravel4.2,thedefaultcipheris MCRYPT_RIJNDAEL_128 (AES),whichisconsidered
tobethemostsecurecipher.Changingthecipherbackto MCRYPT_RIJNDAEL_256 isrequired
todecryptcookies/valuesthatwereencryptedinLaravel<=4.1
Soft Deleting Models Now Use Traits
If you are using soft deleting models, the softDeletes property has been removed. You must now
usethe SoftDeletingTrait likeso:
UpgradeGuide 17
..use Illuminate\Database\Eloquent\SoftDeletingTrait;
class User extends Eloquent {
use SoftDeletingTrait;
}
Youmustalsomanuallyaddthe deleted_at columntoyour datesproperty:
..class User extends Eloquent {
use SoftDeletingTrait;
protected $dates =['deleted_at' ];
}
TheAPIforallsoftdeleteoperationsremainsthesame.
Note:The SoftDeletingTrait cannot beapplied on abase model. Itmust be used on an
actualmodelclass.
View / Pagination Environment Renamed
Ifyouaredirectlyreferencingthe Illuminate\View\Environment classor Illuminate\Pagination\Environment
class,updateyourcodetoreference Illuminate\View\Factory andIlluminate\Pagination\Factory
instead.Thesetwoclasseshavebeenrenamedtobetterreflecttheirfunction.
Additional Parameter On Pagination Presenter
Ifyouareextendingthe Illuminate\Pagination\Presenter class,theabstractmethod getPageLinkWrapper
signaturehaschangedtoaddthe relargument:
..abstract public function getPageLinkWrapper ($url ,$page ,$rel =null );
UpgradeGuide 18
Iron.Io Queue Encryption
IfyouareusingtheIron.ioqueuedriver,youwillneedtoaddanew encryptoptiontoyourqueue
configurationfile:
..'encrypt' =>true
Upgrading To 4.1.29 From <= 4.1.x
Laravel4.1.29improvesthecolumnquotingforalldatabasedrivers.Thisprotectsyourapplication
fromsomemassassignmentvulnerabilitieswhen notusingthe fillablepropertyonmodels.Ifyou
areusingthe fillablepropertyonyourmodelstoprotectagainstmassassignment,yourapplication
is not vulnerable. However, if you are using guardedand are passing a user controlled array into
an“update”or“save”typefunction,youshouldupgradeto 4.1.29immediatelyasyourapplication
maybeatriskofmassassignment.
ToupgradetoLaravel4.1.29,simply composer update .Nobreakingchangesareintroducedinthis
release.
Upgrading To 4.1.26 From <= 4.1.25
Laravel4.1.26introducessecurityimprovementsfor“rememberme”cookies.Beforethisupdate,ifa
remembercookiewashijackedbyanothermalicioususer,thecookiewouldremainvalidforalong
periodoftime,evenafterthetrueowneroftheaccountresettheirpassword,loggedout,etc.
This change requires the addition of a new remember_token column to your users(or equivalent)
databasetable.After this change,a freshtokenwill be assignedto the user eachtime theylogin to
your application. The token will also be refreshed when the user logs out of the application. The
implications of this change are: if a “remember me” cookie is hijacked, simply logging out of the
applicationwillinvalidatethecookie.
Upgrade Path
First, add a new, nullable remember_token of VARCHAR(100), TEXT, or equivalent to your users
table.
Next,ifyouareusingtheEloquentauthenticationdriver,updateyour Userclasswiththefollowing
threemethods:
UpgradeGuide 19
..public function getRememberToken ()
{
return $this ->remember_token ;
}
public function setRememberToken ($value )
{
$this ->remember_token =$value ;
}
public function getRememberTokenName ()
{
return 'remember_token' ;
}
Note:All existing “remember me” sessions will be invalidated by this change, so all
userswillbeforcedtore-authenticatewithyourapplication.
Package Maintainers
Twonewmethodswereaddedtothe Illuminate\Auth\UserProviderInterface interface.Sample
implementationsmaybefoundinthedefaultdrivers:
..public function retrieveByToken ($identifier ,$token );
public function updateRememberToken (UserInterface $user ,$token );
The Illuminate\Auth\UserInterface also received the three new methods described in the
“UpgradePath”.
Upgrading To 4.1 From 4.0
Upgrading Your Composer Dependency
To upgrade your application to Laravel 4.1, change your laravel/framework version to 4.1.*in
your composer.json file.
UpgradeGuide 20
Replacing Files
Replaceyour public/index.php filewiththisfreshcopyfromtherepository ¹¹.
Replaceyour artisanfilewiththisfreshcopyfromtherepository ¹².
Adding Configuration Files & Options
Update your aliasesand providers arrays in your app/config/app.php configuration file. The
updatedvaluesforthesearrayscanbefound inthisfile ¹³.Besuretoaddyourcustomandpackage
serviceproviders/aliasesbacktothearrays.
Addthenew app/config/remote.php filefromtherepository ¹⁴.
Add the new expire_on_close configuration option to your app/config/session.php file. The
defaultvalueshouldbe false.
Addthenew failedconfigurationsectiontoyour app/config/queue.php file.Herearethedefault
valuesforthesection:
..'failed' =>array (
'database' =>'mysql' ,'table' =>'failed_jobs' ,
),
(Optional) Update the pagination configuration option in your app/config/view.php file to
pagination::slider-3 .
Controller Updates
Ifapp/controllers/BaseController.php hasa usestatementatthetop,change use Illuminate\Routing\Controllers\Controller;
touse Illuminate\Routing\Controller; .
Password Reminders Updates
Password reminders have been overhauled for greater flexibility. You may examine the new stub
controller by running the php artisan auth:reminders-controller Artisan command. You may
alsobrowsethe updateddocumentation andupdateyourapplicationaccordingly.
Updateyour app/lang/en/reminders.php languagefiletomatch thisupdatedfile ¹⁵.
¹¹https://github.com/laravel/laravel/blob/master/public/index.php
¹²https://github.com/laravel/laravel/blob/master/artisan
¹³https://github.com/laravel/laravel/blob/master/app/config/app.php
¹⁴https://github.com/laravel/laravel/blob/master/app/config/remote.php
¹⁵https://github.com/laravel/laravel/blob/master/app/lang/en/reminders.php
UpgradeGuide 21
Environment Detection Updates
Forsecurityreasons,URLdomainsmaynolongerbeusedtodetectyourapplicationenvironment.
Thesevaluesareeasilyspoofableandallowattackerstomodifytheenvironmentforarequest.You
should convert your environment detection to use machine host names ( hostname command on
Mac,Linux,andWindows).
Simpler Log Files
Laravel now generates a single log file: app/storage/logs/laravel.log . However, you may still
configurethisbehaviorinyour app/start/global.php file.
Removing Redirect Trailing Slash
In your bootstrap/start.php file, remove the call to $app->redirectIfTrailingSlash() . This
method is no longer needed as this functionality is now handled by the .htaccess file included
withtheframework.
Next,replaceyourApache .htaccess filewiththisnewone ¹⁶thathandlestrailingslashes.
Current Route Access
Thecurrentrouteisnowaccessedvia Route::current() insteadof Route::getCurrentRoute() .
Composer Update
Onceyouhavecompletedthechangesabove,youcanrunthe composer update functiontoupdate
your core application files! If you receive class load errors, try running the updatecommand with
the--no-scripts optionenabledlikeso: composer update --no-scripts .
Wildcard Event Listeners
The wildcard event listeners no longer append the event to your handler functions parameters. If
yourequirefindingtheeventthatwasfiredyoushoulduse Event::firing() .
¹⁶https://github.com/laravel/laravel/blob/master/public/.htaccess
Contribution Guide
•Introduction
•CoreDevelopmentDiscussion
•NewFeatures
•Bugs
•CreatingLiferaftApplications
•GrabbingLiferaftApplications
•WhichBranch?
•SecurityVulnerabilities
•CodingStyle
Introduction
Laravel is an open-source project and anyone may contribute to Laravel for its improvement. We
welcomecontributors,regardlessofskilllevel,gender,race,religion,ornationality.Havingadiverse,
vibrantcommunityisoneofthecorevaluesoftheframework!
To encourage active collaboration, Laravel currently only accepts pull requests, not bug reports.
“Bugreports”maybesentintheformofapullrequestcontainingafailingunittest.Alternatively,a
demonstrationofthebugwithinasandboxLaravelapplicationmaybesentasapullrequesttothe
mainLaravelrepository ¹⁷.Afailingunittestorsandboxapplicationprovidesthedevelopmentteam
“proof” that the bug exists, and, after the development team addresses the bug, serves as a reliable
indicatorthatthebugremainsfixed.
The Laravel source code is managed on Github, and there are repositories for each of the Laravel
projects:
•LaravelFramework ¹⁸
•LaravelApplication ¹⁹
•LaravelDocumentation ²⁰
•LaravelCashier ²¹
•LaravelEnvoy ²²
¹⁷https://github.com/laravel/laravel
¹⁸https://github.com/laravel/framework
¹⁹https://github.com/laravel/laravel
²⁰https://github.com/laravel/docs
²¹https://github.com/laravel/cashier
²²https://github.com/laravel/envoy
ContributionGuide 23
•LaravelHomestead ²³
•LaravelHomesteadBuildScripts ²⁴
•LaravelWebsite ²⁵
•LaravelArt ²⁶
Core Development Discussion
Discussionregardingbugs,newfeatures,andimplementationofexistingfeaturestakesplaceinthe
#laravel-dev IRCchannel(Freenode).TaylorOtwell,themaintainerofLaravel,istypicallypresent
in the channel on weekdays from 8am-5pm (UTC-06:00 or America/Chicago), and sporadically
presentinthechannelatothertimes.
The#laravel-dev IRCchannelisopentoall.Allarewelcometojointhechanneleithertoparticipate
orsimplyobservethediscussions!
New Features
Before sending pull requests for new features, please contact Taylor Otwell via the #laravel-dev
IRC channel (Freenode). If the feature is found to be a good fit for the framework, you are free to
make a pull request. If the feature is rejected, don’t give up! You are still free to turn your feature
intoapackagewhichcanbereleasedtotheworldvia Packagist²⁷.
When adding new features, don’t forget to add unit tests! Unit tests help ensure the stability and
reliabilityoftheframeworkasnewfeaturesareadded.
Bugs
Via Unit Test
Pull requests for bugs may be sent without prior discussion with the Laravel development team.
Whensubmittingabugfix,trytoincludeaunittestthatensuresthebugneverappearsagain!
If you believe you have found a bug in the framework, but are unsure how to fix it, please send a
pullrequestcontainingafailingunittest.Afailingunittestprovidesthedevelopmentteam“proof”
thatthebugexists,and,afterthedevelopmentteamaddressesthebug,servesasareliableindicator
thatthebugremainsfixed.
Ifareunsurehowtowriteafailingunittestforabug,reviewtheotherunittestsincludedwiththe
framework.Ifyou’restilllost,youmayaskforhelpinthe #laravel IRCchannel(Freenode).
²³https://github.com/laravel/homestead
²⁴https://github.com/laravel/settler
²⁵https://github.com/laravel/laravel.com
²⁶https://github.com/laravel/art
²⁷https://packagist.org/
ContributionGuide 24
Via Laravel Liferaft
If you aren’t able to write a unit test for your issue, Laravel Liferaft allows you to create a demo
application that recreates the issue. Liferaft can even automate the forking and sending of pull
requeststotheLaravelrepository.OnceyourLiferaftapplicationissubmitted,aLaravelmaintainer
canrunyourapplicationon Homestead andreviewyourissue.
Creating Liferaft Applications
Laravel Liferaft provides a fresh, innovative way to contribute to Laravel. First, you will need to
installtheLiferaftCLItoolviaComposer:
Installing Liferaft
..composer global require "laravel/liferaft=~1.0 "
Make sure to place the /.composer/vendor/bin directory in your PATH so the liferaft exe-
cutableisfoundwhenyourunthe liferaft commandinyourterminal.
Authenticating With GitHub
Before getting started with Liferaft, you need to register a GitHub personal access token. You can
generateapersonalaccesstokenfromyour GitHubsettingspanel ²⁸.Thedefaultscopesselectedby
GitHub will be sufficient; however, if you wish, you may grant the delete_repo scope so Liferaft
candeleteyouroldsandboxapplications.
..liferaft auth my -github -token
Create A New Liferaft Application
TocreateanewLiferaftapplication,justusethe newcommand:
²⁸https://github.com/settings/applications
ContributionGuide 25
..liferaft new my-bug-fix
This command will do several things. First, it will fork the Laravel GitHub repository ²⁹to your
GitHubaccount.Next,itwillclonetheforkedrepositorytoyourmachineandinstalltheComposer
dependencies. Once the repository has been installed, you can begin recreating your issue within
theLiferaftapplication!
Recreating Your Issue
AftercreatingaLiferaftapplication,simplyrecreateyourissue.Youarefreetodefineroutes,create
Eloquentmodels,andevencreatedatabasemigrations!Theonlyrequirementisthatyourapplication
is able to run on a fresh Laravel Homestead virtual machine. This allows Laravel maintainers to
easilyrunyourapplicationontheirownmachines.
Once you have recreated your issue within the Liferaft application, you’re ready to send it back to
theLaravelrepositoryforreview!
Send Your Application For Review
Onceyouhaverecreatedyourissue,it’salmosttimetosenditforreview!However,youshouldfirst
completethe liferaft.md filethatwasgeneratedinyourLiferaftapplication.Thefirstlineofthis
filewillbethetitleofyourpullrequest.Theremainingcontentwillbeincludedinthepullrequest
body.Ofcourse,GitHubFlavoredMarkdownissupported.
After completing the liferaft.md file, push all of your changes to your GitHub repository. Next,
justruntheLiferaft throwcommandfromyourapplication’sdirectory:
..liferaft throw
ThiscommandwillcreateapullrequestagainsttheLaravelGitHubrepository.ALaravelmaintainer
caneasilygrabyourapplicationandrunitintheirownHomesteadenvironment!
Grabbing Liferaft Applications
Intrested in contributing to Laravel? Liferaft makes it painless to install Liferaft applications and
viewthemonyourown Homesteadenvironment .
First,forconvenience,clonethe laravel/laravel ³⁰intoa liferaft directoryonyourmachine:
²⁹https://github.com/laravel/laravel
³⁰https://github.com/laravel/laravel
ContributionGuide 26
..git clone https ://github .com/laravel /laravel .git liferaft
Next, check out the developbranch so you will be able to install Liferaft applications that target
bothstableandupcomingLaravelreleases:
..git checkout -b develop origin /develop
Next, you can run the Liferaft grabcommand from your repository directory. For example, if
you want to install the Liferaft application associated with pull request #3000, you should run the
followingcommand:
..liferaft grab 3000
The grabcommand will create a new branch on your Liferaft directory, and pull in the changes
for the specified pull request. Once the Liferaft application is installed, simply serve the directory
through your Homestead virtual machine! Once you debug the issue, don’t forget to send a pull
requesttothe laravel/framework ³¹repositorywiththeproperfix!
Haveanextrahourandwanttosolvearandomissue?Justrun grabwithoutapullrequestID:
..liferaft grab
Which Branch?
Note:This section primarly applies to those sending pull requests to the laravel/frame-
work³²repository,notLiferaftapplications.
Allbugfixesshouldbesenttothelateststablebranch.Bugfixesshould neverbesenttothe master
branchunlesstheyfixfeaturesthatexistonlyintheupcomingrelease.
³¹https://github.com/laravel/framework
³²https://github.com/laravel/framework
ContributionGuide 27
Minorfeaturesthatare fully backwards compatible withthecurrentLaravelreleasemaybesent
tothelateststablebranch.
Majornew features should always be sent to the masterbranch, which contains the upcoming
Laravelrelease.
If you are unsure if your feature qualifies as a major or minor, please ask Taylor Otwell in the
#laravel-dev IRCchannel(Freenode).
Security Vulnerabilities
If you discover a security vulnerability within Laravel, please send an e-mail to Taylor Otwell at .
Allsecurityvulnerabilitieswillbepromptlyaddressed.
Coding Style
Laravel follows the PSR-0³³andPSR-1³⁴coding standards. In addition to these standards, the
followingcodingstandardsshouldbefollowed:
•Theclassnamespacedeclarationmustbeonthesamelineas <?php.
•Aclass’opening {mustbeonthesamelineastheclassname.
•FunctionsandcontrolstructuresmustuseAllmanstylebraces.
•Indentwithtabs,alignwithspaces.
³³https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md
³⁴https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-1-basic-coding-standard.md
Getting Started
Installation
•InstallComposer
•InstallLaravel
•ServerRequirements
•Configuration
•PrettyURLs
Install Composer
Laravelutilizes Composer ³⁵tomanageitsdependencies.First,downloadacopyofthe composer.phar .
OnceyouhavethePHARarchive,youcaneitherkeepitinyourlocalprojectdirectoryormoveto
usr/local/bin touseitgloballyonyoursystem.OnWindows,youcanusetheComposer Windows
installer³⁶.
Install Laravel
Via Laravel Installer
First,downloadtheLaravelinstallerusingComposer.
..composer global require "laravel/installer=~1.1 "
Makesuretoplacethe /.composer/vendor/bin directoryinyourPATHsothe laravelexecutable
isfoundwhenyourunthe laravelcommandinyourterminal.
Once installed, the simple laravel new command will create a fresh Laravel installation in the
directory you specify. For instance, laravel new blog would create a directory named blog
containing a fresh Laravel installation with all dependencies installed. This method of installation
ismuchfasterthaninstallingviaComposer.
³⁵http://getcomposer.org
³⁶https://getcomposer.org/Composer-Setup.exe
Installation 30
Via Composer Create-Project
YoumayalsoinstallLaravelbyissuingtheComposer create-project commandinyourterminal:
..composer create -project laravel /laravel {directory} --prefer -dist 4.2
Via Download
Once Composer is installed, download the 4.2 version ³⁷of the Laravel framework and extract its
contents into a directory on your server. Next, in the root of your Laravel application, run the
php composer.phar install (orcomposer install ) command to install all of the framework’s
dependencies. This process requires Git to be installed on the server to successfully complete the
installation.
If you want to update the Laravel framework, you may issue the php composer.phar update
command.
Server Requirements
TheLaravelframeworkhasafewsystemrequirements:
•PHP>=5.4
•MCryptPHPExtension
AsofPHP5.5,someOSdistributionsmayrequireyoutomanuallyinstallthePHPJSONextension.
WhenusingUbuntu,thiscanbedonevia apt-get install php5-json .
Configuration
The first thing you should do after installing Laravel is set your application key to a random
string. If you installed Laravel via Composer, this key has probably already been set for you by
thekey:generate command.Typically,thisstringshouldbe32characterslong.Thekeycanbeset
inthe app.phpconfigurationfile. If the application key is not set, your user sessions and other
encrypted data will not be secure.
Laravel needs almost no other configuration out of the box. You are free to get started developing!
However,youmaywishtoreviewthe app/config/app.php fileanditsdocumentation.Itcontains
³⁷https://github.com/laravel/laravel/archive/v4.2.11.zip
Installation 31
several options such as timezone and localethat you may wish to change according to your
application.
OnceLaravelisinstalled,youshouldalso configureyourlocalenvironment .Thiswillallowyouto
receive detailed error messages when developing on your local machine. By default, detailed error
reportingisdisabledinyourproductionconfigurationfile.
Note:You should never have app.debug set to truefor a production application. Never,
everdoit.
Permissions
Laravel may require one set of permissions to be configured: folders within app/storage require
writeaccessbythewebserver.
Paths
Several of the framework directory paths are configurable. To change the location of these
directories,checkoutthe bootstrap/paths.php file.
Pretty URLs
Apache
Theframeworkshipswitha public/.htaccess filethatisusedtoallowURLswithout index.php .
IfyouuseApachetoserveyourLaravelapplication,besuretoenablethe mod_rewrite module.
If the .htaccess file that ships with Laravel does not work with your Apache installation, try this
one:
..Options +FollowSymLinks
RewriteEngine On
RewriteCond %{REQUEST_FILENAME} !-d
RewriteCond %{REQUEST_FILENAME} !-f
RewriteRule ^index .php [L]
Installation 32
Nginx
OnNginx,thefollowingdirectiveinyoursiteconfigurationwillallow“pretty”URLs:
..location /{
try_files $uri $uri //index .php?$query_string ;
}
Configuration
•Introduction
•EnvironmentConfiguration
•ProviderConfiguration
•ProtectingSensitiveConfiguration
•MaintenanceMode
Introduction
AlloftheconfigurationfilesfortheLaravelframeworkarestoredinthe app/config directory.Each
option in every file is documented, so feel free to look through the files and get familiar with the
optionsavailabletoyou.
Sometimesyoumayneedtoaccessconfigurationvaluesatrun-time.Youmaydosousingthe Config
class:
Accessing A Configuration Value
..Config ::get('app.timezone' );
Youmayalsospecifyadefaultvaluetoreturniftheconfigurationoptiondoesnotexist:
..$timezone =Config ::get('app.timezone' ,'UTC' );
Setting A Configuration Value
Notice that “dot” style syntax may be used to access values in the various files. You may also set
configurationvaluesatrun-time:
..Config ::set('database.default' ,'sqlite' );
Configuration values that are set at run-time are only set for the current request, and will not be
carriedovertosubsequentrequests.
Configuration 34
Environment Configuration
It is often helpful to have different configuration values based on the environment the application
isrunningin.Forexample,youmaywishtouseadifferentcachedriveronyourlocaldevelopment
machine than on the production server. It is easy to accomplish this using environment based
configuration.
Simply create a folder within the configdirectory that matches your environment name, such as
local. Next, create the configuration files you wish to override and specify the options for that
environment.Forexample,tooverridethecachedriverforthelocalenvironment,youwouldcreate
acache.php filein app/config/local withthefollowingcontent:
..<?php
return array (
'driver' =>'file' ,
);
Note:Donotuse‘testing’asanenvironmentname.Thisisreservedforunittesting.
Notice that you do not have to specify everyoption that is in the base configuration file, but only
the options you wish to override. The environment configuration files will “cascade” over the base
files.
Next, we need to instruct the framework how to determine which environment it is running
in. The default environment is always production . However, you may setup other environments
within the bootstrap/start.php file at the root of your installation. In this file you will find an
$app->detectEnvironment call. The array passed to this method is used to determine the current
environment.Youmayaddotherenvironmentsandmachinenamestothearrayasneeded.
..<?php
$env =$app ->detectEnvironment (array (
'local' =>array ('your-machine-name' ),
));
Configuration 35
In this example, ‘local’ is the name of the environment and ‘your-machine-name’ is the hostname
ofyourserver.OnLinuxandMac,youmaydetermineyourhostnameusingthe hostnameterminal
command.
Ifyouneedmoreflexibleenvironmentdetection,youmaypassa Closuretothe detectEnvironment
method,allowingyoutoimplementenvironmentdetectionhoweveryouwish:
..$env =$app ->detectEnvironment (function ()
{
return $_SERVER ['MY_LARAVEL_ENV' ];
});
Accessing The Current Application Environment
Youmayaccessthecurrentapplicationenvironmentviathe environment method:
..$environment =App::environment ();
You may also pass arguments to the environment method to check if the environment matches a
givenvalue:
..if(App ::environment ('local' ))
{
// The environment is local
}
if(App ::environment ('local' ,'staging' ))
{
// The environment is either local OR staging...
}
Provider Configuration
Whenusingenvironmentconfiguration,youmaywantto“append”environment serviceproviders
toyourprimary appconfigurationfile.However,ifyoutrythis,youwillnoticetheenvironment app
providersareoverridingtheprovidersinyourprimary appconfigurationfile.Toforcetheproviders
tobeappended,usethe append_config helpermethodinyourenvironment appconfigurationfile:
Configuration 36
..'providers' =>append_config( array (
'LocalOnlyServiceProvider' ,
))
Protecting Sensitive Configuration
For “real” applications, it is advisable to keep all of your sensitive configuration out of your
configuration files. Things such as database passwords, Stripe API keys, and encryption keys
shouldbekeptoutofyourconfigurationfileswheneverpossible.So,whereshouldweplacethem?
Thankfully,Laravelprovidesaverysimplesolutiontoprotectingthesetypesofconfigurationitems
using“dot”files.
First,configureyourapplication torecognizeyourmachineasbeinginthe localenvironment.Next,
create a .env.local.php file within the root of your project, which is usually the same directory
that contains your composer.json file. The .env.local.php should return an array of key-value
pairs,muchlikeatypicalLaravelconfigurationfile:
..<?php
return array (
'TEST_STRIPE_KEY' =>'super-secret-sauce' ,
);
All of the key-value pairs returned by this file will automatically be available via the $_ENVand
$_SERVERPHP“superglobals”.Youmaynowreferencetheseglobalsfromwithinyourconfiguration
files:
..'key' =>$_ENV ['TEST_STRIPE_KEY' ]
Be sure to add the .env.local.php file to your .gitignore file. This will allow other developers
on your team to create their own local environment configuration, as well as hide your sensitive
configurationitemsfromsourcecontrol.
Now, on your production server, create a .env.php file in your project root that contains the cor-
responding values for your production environment. Like the .env.local.php file, the production
Configuration 37
.env.php fileshouldneverbeincludedinsourcecontrol.
Note:You may create a file for each environment supported by your application. For
example,the development environmentwillloadthe .env.development.php fileifitexists.
However,the production environmentalwaysusesthe .env.php file.
Maintenance Mode
When your application is in maintenance mode, a custom view will be displayed for all routes
into your application. This makes it easy to “disable” your application while it is updating or
when you are performing maintenance. A call to the App::down method is already present in
your app/start/global.php file. The response from this method will be sent to users when your
applicationisinmaintenancemode.
Toenablemaintenancemode,simplyexecutethe downArtisancommand:
..php artisan down
Todisablemaintenancemode,usethe upcommand:
..php artisan up
To show a custom view when your application is in maintenance mode, you may add something
likethefollowingtoyourapplication’s app/start/global.php file:
..App::down (function ()
{
return Response ::view ('maintenance' ,array (), 503);
});
If the Closure passed to the downmethod returns NULL, maintenance mode will be ignored for that
request.
Maintenance Mode & Queues
While your application is in maintenance mode, no queue jobs will be handled. The jobs will
continuetobehandledasnormaloncetheapplicationisoutofmaintenancemode.
Laravel Homestead
•Introduction
•IncludedSoftware
•Installation&Setup
•DailyUsage
•Ports
Introduction
Laravel strives to make the entire PHP development experience delightful, including your local
development environment. Vagrant³⁸provides a simple, elegant way to manage and provision
VirtualMachines.
Laravel Homestead is an official, pre-packaged Vagrant “box” that provides you a wonderful
development environment without requiring you to install PHP, HHVM, a web server, and any
other server software on your local machine. No more worrying about messing up your operating
system! Vagrant boxes are completely disposable. If something goes wrong, you can destroy and
re-createtheboxinminutes!
HomesteadrunsonanyWindows,Mac,orLinuxsystem,andincludestheNginxwebserver,PHP
5.6,MySQL,Postgres,Redis,Memcached,andalloftheothergoodiesyouneedtodevelopamazing
Laravelapplications.
Note:IfyouareusingWindows,youmayneedtoenablehardwarevirtualization(VT-x).
ItcanusuallybeenabledviayourBIOS.
HomesteadiscurrentlybuiltandtestedusingVagrant1.6.
Included Software
•Ubuntu14.04
•PHP5.6
•HHVM
•Nginx
³⁸http://vagrantup.com
LaravelHomestead 39
•MySQL
•Postgres
•Node(WithBower,Grunt,andGulp)
•Redis
•Memcached
•Beanstalkd
•LaravelEnvoy
•Fabric+HipChatExtension
Installation & Setup
Installing VirtualBox & Vagrant
BeforelaunchingyourHomesteadenvironment,youmustinstall VirtualBox ³⁹andVagrant⁴⁰.Both
ofthesesoftwarepackagesprovideeasy-to-usevisualinstallersforallpopularoperatingsystems.
Adding The Vagrant Box
Once VirtualBox and Vagrant have been installed, you should add the laravel/homestead box to
yourVagrantinstallationusingthefollowingcommandinyourterminal.Itwilltakeafewminutes
todownloadthebox,dependingonyourInternetconnectionspeed:
..vagrant box add laravel /homestead
Ifthisfails,youmayhaveanolderversionofvagrantthatrequirestheurlofthebox.Thefollowing
shouldwork:
..vagrant box add laravel /homestead
https ://atlas .hashicorp .com/laravel /boxes /homestead
³⁹https://www.virtualbox.org/wiki/Downloads
⁴⁰http://www.vagrantup.com/downloads.html
LaravelHomestead 40
Installing Homestead
With Composer + PHP Tool
Once the box has been added to your Vagrant installation, you are ready to install the Homestead
CLItoolusingtheComposer globalcommand:
..composer global require "laravel/homestead=~2.0 "
Make sure to place the /.composer/vendor/bin directory in your PATH so the homestead
executableisfoundwhenyourunthe homestead commandinyourterminal.
OnceyouhaveinstalledtheHomesteadCLItool,runthe initcommandtocreatethe Homestead.yaml
configurationfile:
..homestead init
The Homestead.yaml file will be placed in the /.homestead directory. If you’re using a Mac or
Linuxsystem,youmayedit Homestead.yaml filebyrunningthe homestead edit commandinyour
terminal:
..homestead edit
Manually Via Git (No Local PHP)
Alternatively,ifyoudonotwanttoinstallPHPonyourlocalmachine,youmayinstallHomestead
manuallybysimplycloningtherepository.Considercloningtherepositoryintoacentral Homestead
directory where you keep all of your Laravel projects, as the Homestead box will serve as the host
toallofyourLaravel(andPHP)projects:
..git clone https ://github .com/laravel /homestead .git Homestead
Once you have installed the Homestead CLI tool, run the bash init.sh command to create the
Homestead.yaml configurationfile:
LaravelHomestead 41
..bash init .sh
The Homestead.yaml filewillbeplacedinthe /.homestead directory.
Set Your SSH Key
Next,youshouldeditthe Homestead.yaml file.Inthisfile,youcanconfigurethepathtoyourpublic
SSHkey,aswellasthefoldersyouwishtobesharedbetweenyourmainmachineandtheHomestead
virtualmachine.
Don’t have an SSH key? On Mac and Linux, you can generally create an SSH key pair using the
followingcommand:
..ssh-keygen -t rsa -C"you@homestead "
On Windows, you may install Git⁴¹and use the Git Bash shell included with Git to issue the
commandabove.Alternatively,youmayuse PuTTY⁴²andPuTTYgen ⁴³.
Once you have created a SSH key, specify the key’s path in the authorize property of your
Homestead.yaml file.
Configure Your Shared Folders
The folderspropertyofthe Homestead.yaml filelistsallofthefoldersyouwishtosharewithyour
Homesteadenvironment.Asfileswithinthesefoldersarechanged,theywillbekeptinsyncbetween
yourlocalmachineandtheHomesteadenvironment.Youmayconfigureasmanysharedfoldersas
necessary!
Configure Your Nginx Sites
Not familiar with Nginx? No problem. The sitesproperty allows you to easily map a “domain”
to a folder on your Homestead environment. A sample site configuration is included in the
Homestead.yaml file. Again, you may add as many sites to your Homestead environment as
necessary.Homesteadcanserveasaconvenient,virtualizedenvironmentforeveryLaravelproject
youareworkingon!
YoucanmakeanyHomesteadsiteuse HHVM⁴⁴bysettingthe hhvmoptionto true:
⁴¹http://git-scm.com/
⁴²http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html
⁴³http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html
⁴⁴http://hhvm.com
LaravelHomestead 42
..sites :
-map:homestead .app
to:/home /vagrant /Code /Laravel /public
hhvm :true
Bash Aliases
To add Bash aliases to your Homestead box, simply add to the aliasesfile in the root of the
/.homestead directory.
Launch The Vagrant Box
Onceyouhaveeditedthe Homestead.yaml toyourliking,runthe homestead up commandinyour
terminal. If you installed Homestead manually and are not using the PHP homestead tool, run
vagrant up fromthedirectorythatcontainsyourclonedHomesteadGitrepository.
Vagrantwillbootthevirtualmachine,andconfigureyoursharedfoldersandNginxsitesautomat-
ically!Todestroythemachine,youmayusethe homestead destroy command.Foracompletelist
ofavailableHomesteadcommands,run homestead list .
Don’t forget to add the “domains” for your Nginx sites to the hostsfile on your machine!
The hostsfile will redirect your requests for the local domains into your Homestead envi-
ronment. On Mac and Linux, this file is located at /etc/hosts . On Windows, it is located at
C:\Windows\System32\drivers\etc\hosts .Thelinesyouaddtothisfilewilllooklikethefollowing:
..192.168 .10.10 homestead .app
MakesuretheIPaddresslistedistheoneyousetinyour Homestead.yaml file.Onceyouhaveadded
thedomaintoyour hostsfile,youcanaccessthesiteviayourwebbrowser!
..http ://homestead .app
Tolearnhowtoconnecttoyourdatabases,readon!
LaravelHomestead 43
Daily Usage
Connecting Via SSH
To connect to your Homestead environment via SSH, issue the homestead ssh command in your
terminal.
Connecting To Your Databases
Ahomestead database is configured for both MySQL and Postgres out of the box. For even more
convenience,Laravel’s localdatabaseconfigurationissettousethisdatabasebydefault.
ToconnecttoyourMySQLorPostgresdatabasefromyourmainmachineviaNavicatorSequelPro,
you should connect to 127.0.0.1 and port 33060 (MySQL) or 54320 (Postgres). The username and
passwordforbothdatabasesis homestead /secret.
Note:Youshouldonlyusethesenon-standardportswhenconnectingtothedatabasesfrom
yourmainmachine.Youwillusethedefault3306and5432portsinyourLaraveldatabase
configurationfilesinceLaravelisrunning withintheVirtualMachine.
Adding Additional Sites
Once your Homestead environment is provisioned and running, you may want to add additional
NginxsitesforyourLaravelapplications.YoucanrunasmanyLaravelinstallationsasyouwishon
asingleHomesteadenvironment.Therearetwowaystodothis:First,youmaysimplyaddthesites
toyour Homestead.yaml fileandthenrun vagrant provision .
Alternatively, you may use the servescript that is available on your Homestead environment. To
usethe servescript,SSHintoyourHomesteadenvironmentandrunthefollowingcommand:
..serve domain .app /home /vagrant /Code /path /to/public /directory
Note:Afterrunningthe servecommand,donotforgettoaddthenewsitetothe hosts
fileonyourmainmachine!
LaravelHomestead 44
Ports
ThefollowingportsareforwardedtoyourHomesteadenvironment:
•SSH:2222->ForwardsTo22
•HTTP:8000->ForwardsTo80
•MySQL:33060->ForwardsTo3306
•Postgres: 54320->ForwardsTo5432
Request Lifecycle
•Overview
•RequestLifecycle
•StartFiles
•ApplicationEvents
Overview
When using any tool in the “real world”, you feel more confident if you understand how that tool
works.Applicationdevelopmentisnodifferent.Whenyouunderstandhowyourdevelopmenttools
function,youfeelmorecomfortableandconfidentusingthem.Thegoalofthisdocumentistogive
you a good, high-level overview of how the Laravel framework “works”. By getting to know the
overall framework better, everything feels less “magical” and you will be more confident building
your applications. In addition to a high-level overview of the request lifecycle, we’ll cover “start”
filesandapplicationevents.
Ifyoudon’tunderstandallofthetermsrightaway,don’tloseheart!Justtrytogetabasicgraspof
whatisgoingon,andyourknowledgewillgrowasyouexploreothersectionsofthedocumentation.
Request Lifecycle
All requests into your application are directed through the public/index.php script. When using
Apache,the .htaccess filethatshipswithLaravelhandlesthepassingofallrequeststo index.php .
Fromhere,Laravelbeginstheprocessofhandlingtherequestsandreturningaresponsetotheclient.
GettingageneralideafortheLaravelbootstrapprocesswillbeuseful,sowe’llcoverthatnow!
By far, the most important concept to grasp when learning about Laravel’s bootstrap process is
Service Providers . You can find a list of service providers by opening your app/config/app.php
configurationfileandfindingthe providers array.Theseprovidersserveastheprimarybootstrap-
ping mechanism for Laravel. But, before we dig into service providers, let’s go back to index.php .
After a request enters your index.php file, the bootstrap/start.php file will be loaded. This file
createsthenewLaravel Application object,whichalsoservesasan IoCcontainer .
Aftercreatingthe Application object,afewprojectpathswillbesetand environmentdetection will
be performed. Then, an internal Laravel bootstrap script will be called. This file lives deep within
theLaravelsource,andsetsafewmoresettingsbasedonyourconfigurationfiles,suchastimezone,
errorreporting,etc.But,inadditiontosettingtheserathertrivialconfigurationoptions,italsodoes
somethingveryimportant:registersalloftheserviceprovidersconfiguredforyourapplication.
RequestLifecycle 46
Simple service providers only have one method: register. This register method is called when
the service provider is registered with the application object via the application’s own register
method. Within this method, service providers register things with the IoC container . Essentially,
each service provider binds one or more closures⁴⁵into the container, which allows you to access
thoseboundserviceswithinyourapplication.So,forexample,the QueueServiceProvider registers
closuresthatresolvethevarious Queuerelatedclasses.Ofcourse,serviceprovidersmaybeusedfor
any bootstrapping task, not just registering things with the IoC container. A service provider may
registereventlisteners,viewcomposers,Artisancommands,andmore.
After all of the service providers have been registered, your app/start files will be loaded. Lastly,
your app/routes.php file will be loaded. Once your routes.php file has been loaded, the Request
objectissenttotheapplicationsothatitmaybedispatchedtoaroute.
So,let’ssummarize:
1.Requestenters public/index.php file.
2.bootstrap/start.php filecreatesApplicationanddetectsenvironment.
3.Internal framework/start.php fileconfiguressettingsandloadsserviceproviders.
4.Application app/start filesareloaded.
5.Application app/routes.php fileisloaded.
6.RequestobjectsenttoApplication,whichreturnsResponseobject.
7.Responseobjectsentbacktoclient.
Now that you have a good idea of how a request to a Laravel application is handled, let’s take a
closerlookat“start”files!
Start Files
Your application’s start files are stored at app/start . By default, three are included with your
application: global.php ,local.php , and artisan.php . For more information about artisan.php ,
refertothedocumentationonthe Artisancommandline .
Theglobal.php startfilecontainsafewbasicitemsbydefault,suchastheregistrationofthe Logger
and the inclusion of your app/filters.php file. However, you are free to add anything to this file
that you wish. It will be automatically included on everyrequest to your application, regardless of
environment.The local.php file,ontheotherhand,isonlycalledwhentheapplicationisexecuting
in the localenvironment. For more information on environments, check out the configuration
documentation.
Of course, if you have other environments in addition to local, you may create start files for
thoseenvironmentsaswell.Theywillbeautomaticallyincludedwhenyourapplicationisrunning
in that environment. So, for example, if you have a development environment configured in
your bootstrap/start.php file, you may create a app/start/development.php file, which will be
includedwhenanyrequestsentertheapplicationinthatenvironment.
⁴⁵http://us3.php.net/manual/en/functions.anonymous.php
RequestLifecycle 47
What To Place In Start Files
Startfilesserveasasimpleplacetoplaceany“bootstrapping”code.Forexample,youcouldregister
a View composer, configure your logging preferences, set some PHP settings, etc. It’s totally up to
you.Ofcourse,throwingallofyourbootstrappingcodeintoyourstartfilescangetmessy.Forlarge
applications, or if you feel your start files are getting messy, consider moving some bootstrapping
codeintoserviceproviders .
Application Events
Registering Application Events
Youmayalsodopreandpostrequestprocessingbyregistering before,after,finish,and shutdown
applicationevents:
..App::before (function ($request )
{
//
});
App::after (function ($request ,$response )
{
//
});
Listenerstotheseeventswillberun beforeandaftereachrequesttoyourapplication.Theseevents
canbehelpfulforglobalfilteringorglobalmodificationofresponses.Youmayregistertheminone
ofyour startfilesorina serviceprovider .
Youmayalsoregisteralisteneronthe matchedevent,whichisfiredwhenanincomingrequesthas
beenmatchedtoaroutebutthatroutehasnotyetbeenexecuted:
..Route ::matched (function ($route ,$request )
{
//
});
The finisheventiscalledaftertheresponsefromyourapplicationhasbeensentbacktotheclient.
Thisisagoodplacetodoanylastminuteprocessingyourapplicationrequires.The shutdowneventis
RequestLifecycle 48
calledimmediatelyafterallofthe finisheventhandlersfinishprocessing,andisthelastopportunity
to do any work before the script terminates. Most likely, you will not have a need to use either of
theseevents.
Routing
•BasicRouting
•RouteParameters
•RouteFilters
•NamedRoutes
•RouteGroups
•Sub-DomainRouting
•RoutePrefixing
•RouteModelBinding
•Throwing404Errors
•RoutingToControllers
Basic Routing
Most of the routes for your application will be defined in the app/routes.php file. The simplest
LaravelroutesconsistofaURIandaClosurecallback.
Basic GET Route
..Route ::get('/',function ()
{
return 'Hello World' ;
});
Basic POST Route
..Route ::post ('foo/bar' ,function ()
{
return 'Hello World' ;
});
Routing 50
Registering A Route For Multiple Verbs
..Route ::match (array ('GET' ,'POST' ),'/',function ()
{
return 'Hello World' ;
});
Registering A Route Responding To Any HTTP Verb
..Route ::any('foo' ,function ()
{
return 'Hello World' ;
});
Forcing A Route To Be Served Over HTTPS
..Route ::get('foo' ,array ('https' ,function ()
{
return 'Must be over HTTPS' ;
}));
Often,youwillneedtogenerateURLstoyourroutes,youmaydosousingthe URL::tomethod:
..$url =URL::to('foo' );
Route Parameters
..
Routing 51
..Route ::get('user/{id}' ,function ($id)
{
return 'User ' .$id;
});
Optional Route Parameters
..Route ::get('user/{name?}' ,function ($name =null )
{
return $name ;
});
Optional Route Parameters With Defaults
..Route ::get('user/{name?}' ,function ($name ='John' )
{
return $name ;
});
Regular Expression Route Constraints
..Route ::get('user/{name}' ,function ($name )
{
//
})
->where ('name' ,'[A-Za-z]+' );
Route ::get('user/{id}' ,function ($id)
{
//
})
->where ('id' ,'[0-9]+' );
Routing 52
Passing An Array Of Wheres
Ofcourse,youmaypassanarrayofconstraintswhennecessary:
..Route ::get('user/{id}/{name}' ,function ($id,$name )
{
//
})
->where (array ('id' =>'[0-9]+' ,'name' =>'[a-z]+' ))
Defining Global Patterns
If you would like a route parameter to always be constrained by a given regular expression, you
mayusethe patternmethod:
..Route ::pattern ('id' ,'[0-9]+' );
Route ::get('user/{id}' ,function ($id)
{
// Only called if {id} is numeric.
});
Accessing A Route Parameter Value
If you need to access a route parameter value outside of a route, you may use the Route::input
method:
..Route ::filter ('foo' ,function ()
{
if(Route ::input ('id' )==1)
{
//
}
});
Routing 53
Route Filters
Routefiltersprovideaconvenientwayoflimitingaccesstoagivenroute,whichisusefulforcreating
areas of your site which require authentication. There are several filters included in the Laravel
framework,includingan authfilter,an auth.basic filter,a guestfilter,anda csrffilter.Theseare
locatedinthe app/filters.php file.
Defining A Route Filter
..Route ::filter ('old' ,function ()
{
if(Input ::get('age' )<200)
{
return Redirect ::to('home' );
}
});
Ifthefilterreturnsaresponse,thatresponseisconsideredtheresponsetotherequestandtheroute
willnotexecute.Any afterfiltersontheroutearealsocancelled.
Attaching A Filter To A Route
..Route ::get('user' ,array ('before' =>'old' ,function ()
{
return 'You are over 200 years old!' ;
}));
Attaching A Filter To A Controller Action
..Route ::get('user' ,array ('before' =>'old' ,'uses' =>
'UserController@showProfile' ));
Attaching Multiple Filters To A Route
Routing 54
..Route ::get('user' ,array ('before' =>'auth|old' ,function ()
{
return 'You are authenticated and over 200 years old!' ;
}));
Attaching Multiple Filters Via Array
..Route ::get('user' ,array ('before' =>array ('auth' ,'old' ),function ()
{
return 'You are authenticated and over 200 years old!' ;
}));
Specifying Filter Parameters
..Route ::filter ('age' ,function ($route ,$request ,$value )
{
//
});
Route ::get('user' ,array ('before' =>'age:200' ,function ()
{
return 'Hello World' ;
}));
Afterfiltersreceivea $response asthethirdargumentpassedtothefilter:
..Route ::filter ('log' ,function ($route ,$request ,$response )
{
//
});
Pattern Based Filters
YoumayalsospecifythatafilterappliestoanentiresetofroutesbasedontheirURI.
Routing 55
..Route ::filter ('admin' ,function ()
{
//
});
Route ::when ('admin/*' ,'admin' );
In the example above, the adminfilter would be applied to all routes beginning with admin/. The
asteriskisusedasawildcard,andwillmatchanycombinationofcharacters.
YoumayalsoconstrainpatternfiltersbyHTTPverbs:
..Route ::when ('admin/*' ,'admin' ,array ('post' ));
Filter Classes
For advanced filtering, you may wish to use a class instead of a Closure. Since filter classes are
resolved out of the application IoC Container , you will be able to utilize dependency injection in
thesefiltersforgreatertestability.
Registering A Class Based Filter
..Route ::filter ('foo' ,'FooFilter' );
Bydefault,the filtermethodonthe FooFilter classwillbecalled:
..class FooFilter {
public function filter ()
{
// Filter logic...
}
}
Routing 56
Ifyoudonotwishtousethe filtermethod,justspecifyanothermethod:
..Route ::filter ('foo' ,'FooFilter@foo' );
Named Routes
Named routes make referring to routes when generating redirects or URLs more convenient. You
mayspecifyanameforaroutelikeso:
..Route ::get('user/profile' ,array ('as' =>'profile' ,function ()
{
//
}));
Youmayalsospecifyroutenamesforcontrolleractions:
..Route ::get('user/profile' ,array ('as' =>'profile' ,'uses' =>
'UserController@showProfile' ));
Now,youmayusetheroute’snamewhengeneratingURLsorredirects:
..$url =URL::route ('profile' );
$redirect =Redirect ::route ('profile' );
Youmayaccessthenameofaroutethatisrunningviathe currentRouteName method:
..$name =Route ::currentRouteName ();
Routing 57
Route Groups
Sometimesyoumayneedtoapplyfilterstoagroupofroutes.Insteadofspecifyingthefilteroneach
route,youmayusearoutegroup:
..Route ::group (array ('before' =>'auth' ),function ()
{
Route ::get('/',function ()
{
// Has Auth Filter
});
Route ::get('user/profile' ,function ()
{
// Has Auth Filter
});
});
Youmayalsousethe namespace parameterwithinyour grouparraytospecifyallcontrollerswithin
thatgroupasbeinginagivennamespace:
..Route ::group (array ('namespace' =>'Admin' ),function ()
{
//
});
Sub-Domain Routing
Laravelroutesarealsoabletohandlewildcardsub-domains,andwillpassyourwildcardparameters
fromthedomain:
Registering Sub-Domain Routes
..
Routing 58
..Route ::group (array ('domain' =>'{account}.myapp.com' ),function ()
{
Route ::get('user/{id}' ,function ($account ,$id)
{
//
});
});
Route Prefixing
Agroupofroutesmaybeprefixedbyusingthe prefixoptionintheattributesarrayofagroup:
..Route ::group (array ('prefix' =>'admin' ),function ()
{
Route ::get('user' ,function ()
{
//
});
});
Route Model Binding
Modelbindingprovidesaconvenientwaytoinjectmodelinstancesintoyourroutes.Forexample,
instead of injecting a user’s ID, you can inject the entire User model instance that matches the
given ID. First, use the Route::model method to specify the model that should be used for a given
parameter:
Binding A Parameter To A Model
..Route ::model ('user' ,'User' );
Routing 59
Next,definearoutethatcontainsa {user}parameter:
..Route ::get('profile/{user}' ,function (User $user )
{
//
});
Sincewehaveboundthe {user}parametertothe Usermodel,a Userinstancewillbeinjectedinto
the route. So, for example, a request to profile/1 will inject the Userinstance which has an ID of
1.
Note:Ifamatchingmodelinstanceisnotfoundinthedatabase,a404errorwillbethrown.
Ifyouwishtospecifyyourown“notfound”behavior,youmaypassaClosureasthethirdargument
tothe modelmethod:
..Route ::model ('user' ,'User' ,function ()
{
throw new NotFoundHttpException;
});
Sometimesyoumaywishtouseyourownresolverforrouteparameters.Simplyusethe Route::bind
method:
..Route ::bind ('user' ,function ($value ,$route )
{
return User ::where ('name' ,$value )->first ();
});
Throwing 404 Errors
Therearetwowaystomanuallytriggera404errorfromaroute.First,youmayusethe App::abort
method:
Routing 60
..App::abort (404);
Second,youmaythrowaninstanceof Symfony\Component\HttpKernel\Exception\NotFoundHttpException .
More information on handling 404 exceptions and using custom responses for these errors may be
foundinthe errorssectionofthedocumentation.
Routing To Controllers
LaravelallowsyoutonotonlyroutetoClosures,butalsotocontrollerclasses,andevenallowsthe
creationof resourcecontrollers .
Seethedocumentationon Controllers formoredetails.
Requests & Input
•BasicInput
•Cookies
•OldInput
•Files
•RequestInformation
Basic Input
Youmayaccessalluserinputwithafewsimplemethods.YoudonotneedtoworryabouttheHTTP
verbusedfortherequest,asinputisaccessedinthesamewayforallverbs.
Retrieving An Input Value
..$name =Input ::get('name' );
Retrieving A Default Value If The Input Value Is Absent
..$name =Input ::get('name' ,'Sally' );
Determining If An Input Value Is Present
..if(Input ::has('name' ))
{
//
}
Getting All Input For The Request
Requests&Input 62
..$input =Input ::all();
Getting Only Some Of The Request Input
..$input =Input ::only ('username' ,'password' );
$input =Input ::except ('credit_card' );
Whenworkingonformswith“array”inputs,youmayusedotnotationtoaccessthearrays:
..$input =Input ::get('products.0.name' );
Note:SomeJavaScriptlibrariessuchasBackbonemaysendinputtotheapplicationas
JSON.Youmayaccessthisdatavia Input::get likenormal.
Cookies
AllcookiescreatedbytheLaravelframeworkareencryptedandsignedwithanauthenticationcode,
meaningtheywillbeconsideredinvalidiftheyhavebeenchangedbytheclient.
Retrieving A Cookie Value
..$value =Cookie ::get('name' );
Attaching A New Cookie To A Response
..
Requests&Input 63
..$response =Response ::make ('Hello World' );
$response ->withCookie (Cookie ::make ('name' ,'value' ,$minutes ));
Queueing A Cookie For The Next Response
If you would like to set a cookie before a response has been created, use the Cookie::queue()
method.Thecookiewillautomaticallybeattachedtothefinalresponsefromyourapplication.
..Cookie ::queue ($name ,$value ,$minutes );
Creating A Cookie That Lasts Forever
..$cookie =Cookie ::forever ('name' ,'value' );
Old Input
Youmayneedtokeepinputfromonerequestuntilthenextrequest.Forexample,youmayneedto
re-populateaformaftercheckingitforvalidationerrors.
Flashing Input To The Session
..Input ::flash ();
Flashing Only Some Input To The Session
..
Requests&Input 64
..Input ::flashOnly ('username' ,'email' );
Input ::flashExcept ('password' );
Sinceyouoftenwillwanttoflashinputinassociationwitharedirecttothepreviouspage,youmay
easilychaininputflashingontoaredirect.
..return Redirect ::to('form' )->withInput ();
return Redirect ::to('form' )->withInput (Input ::except ('password' ));
Note:Youmayflashotherdataacrossrequestsusingthe Sessionclass.
Retrieving Old Data
..Input ::old('username' );
Files
Retrieving An Uploaded File
..$file =Input ::file ('photo' );
Determining If A File Was Uploaded
..if(Input ::hasFile ('photo' ))
{
//
}
Requests&Input 65
Theobjectreturnedbythe filemethodisaninstanceofthe Symfony\Component\HttpFoundation\File\UploadedFile
class, which extends the PHP SplFileInfo class and provides a variety of methods for interacting
withthefile.
Determining If An Uploaded File Is Valid
..if(Input ::file ('photo' )->isValid ())
{
//
}
Moving An Uploaded File
..Input ::file ('photo' )->move ($destinationPath );
Input ::file ('photo' )->move ($destinationPath ,$fileName );
Retrieving The Path To An Uploaded File
..$path =Input ::file ('photo' )->getRealPath ();
Retrieving The Original Name Of An Uploaded File
..$name =Input ::file ('photo' )->getClientOriginalName ();
Retrieving The Extension Of An Uploaded File
..$extension =Input ::file ('photo' )->getClientOriginalExtension ();
Requests&Input 66
Retrieving The Size Of An Uploaded File
..$size =Input ::file ('photo' )->getSize ();
Retrieving The MIME Type Of An Uploaded File
..$mime =Input ::file ('photo' )->getMimeType ();
Request Information
TheRequestclassprovidesmanymethodsforexaminingtheHTTPrequestforyourapplicationand
extendsthe Symfony\Component\HttpFoundation\Request class.Herearesomeofthehighlights.
Retrieving The Request URI
..$uri =Request ::path ();
Retrieving The Request Method
..$method =Request ::method ();
if(Request ::isMethod ('post' ))
{
//
}
Determining If The Request Path Matches A Pattern
Requests&Input 67
..if(Request ::is('admin/*' ))
{
//
}
Get The Request URL
..$url =Request ::url();
Retrieve A Request URI Segment
..$segment =Request ::segment (1);
Retrieving A Request Header
..$value =Request ::header ('Content-Type' );
Retrieving Values From $_SERVER
..$value =Request ::server ('PATH_INFO' );
Determining If The Request Is Over HTTPS
..
Requests&Input 68
..if(Request ::secure ())
{
//
}
Determine If The Request Is Using AJAX
..if(Request ::ajax ())
{
//
}
Determine If The Request Has JSON Content Type
..if(Request ::isJson ())
{
//
}
Determine If The Request Is Asking For JSON
..if(Request ::wantsJson ())
{
//
}
Checking The Requested Response Format
TheRequest::format methodwillreturntherequestedresponseformatbasedontheHTTPAccept
header:
Requests&Input 69
..if(Request ::format ()=='json' )
{
//
}
Views & Responses
•BasicResponses
•Redirects
•Views
•ViewComposers
•SpecialResponses
•ResponseMacros
Basic Responses
Returning Strings From Routes
..Route ::get('/',function ()
{
return 'Hello World' ;
});
Creating Custom Responses
AResponse instance inherits from the Symfony\Component\HttpFoundation\Response class, pro-
vidingavarietyofmethodsforbuildingHTTPresponses.
..$response =Response ::make ($contents ,$statusCode );
$response ->header ('Content-Type' ,$value );
return $response ;
Ifyouneedaccesstothe Responseclassmethods,butwanttoreturnaviewastheresponsecontent,
youmayusethe Response::view methodforconvenience:
Views&Responses 71
..return Response ::view ('hello' )->header ('Content-Type' ,$type );
Attaching Cookies To Responses
..$cookie =Cookie ::make ('name' ,'value' );
return Response ::make ($content )->withCookie ($cookie );
Redirects
Returning A Redirect
..return Redirect ::to('user/login' );
Returning A Redirect With Flash Data
..return Redirect ::to('user/login' )->with ('message' ,'Login Failed' );
Note:Sincethe withmethodflashesdatatothesession,youmayretrievethedatausing
thetypical Session::get method.
Returning A Redirect To A Named Route
..return Redirect ::route ('login' );
Returning A Redirect To A Named Route With Parameters
Views&Responses 72
..return Redirect ::route ('profile' ,array (1));
Returning A Redirect To A Named Route Using Named Parameters
..return Redirect ::route ('profile' ,array ('user' =>1));
Returning A Redirect To A Controller Action
..return Redirect ::action ('HomeController@index' );
Returning A Redirect To A Controller Action With Parameters
..return Redirect ::action ('UserController@profile' ,array (1));
Returning A Redirect To A Controller Action Using Named Parameters
..return Redirect ::action ('UserController@profile' ,array ('user' =>1));
Views
ViewstypicallycontaintheHTMLofyourapplicationandprovideaconvenientwayofseparating
your controller and domain logic from your presentation logic. Views are stored in the app/views
directory.
Asimpleviewcouldlooksomethinglikethis:
Views&Responses 73
..<!-- View stored in app /views /greeting .php -->
<html >
<body >
<h1>Hello, <?php echo $name ;?></h1>
</body>
</html>
Thisviewmaybereturnedtothebrowserlikeso:
..Route ::get('/',function ()
{
return View ::make ('greeting' ,array ('name' =>'Taylor' ));
});
Thesecondargumentpassedto View::make isanarrayofdatathatshouldbemadeavailabletothe
view.
Passing Data To Views
..// Using conventional approach
$view =View ::make ('greeting' )->with ('name' ,'Steve' );
// Using Magic Methods
$view =View ::make ('greeting' )->withName ('steve' );
In the example above the variable $namewould be accessible from the view, and would contain
Steve.
Ifyouwish,youmaypassanarrayofdataasthesecondparametergiventothe makemethod:
..$view =View ::make ('greetings' ,$data );
Youmayalsoshareapieceofdataacrossallviews:
Views&Responses 74
..View ::share ('name' ,'Steve' );
Passing A Sub-View To A View
Sometimesyoumaywishtopassaviewintoanotherview.Forexample,givenasub-viewstoredat
app/views/child/view.php ,wecouldpassittoanotherviewlikeso:
..$view =View ::make ('greeting' )->nest ('child' ,'child.view' );
$view =View ::make ('greeting' )->nest ('child' ,'child.view' ,$data );
Thesub-viewcanthenberenderedfromtheparentview:
..<html >
<body >
<h1>Hello !</h1>
<?php echo $child ;?>
</body>
</html>
Determining If A View Exists
Ifyouneedtocheckifaviewexists,usethe View::exists method:
..if(View ::exists ('emails.customer' ))
{
//
}
View Composers
View composers are callbacks or class methods that are called when a view is rendered. If you
have data that you want bound to a given view each time that view is rendered throughout
Views&Responses 75
your application, a view composer can organize that code into a single location. Therefore, view
composersmayfunctionlike“viewmodels”or“presenters”.
Defining A View Composer
..View ::composer ('profile' ,function ($view )
{
$view ->with ('count' , User ::count ());
});
Noweachtimethe profileviewisrendered,the countdatawillbeboundtotheview.
Youmayalsoattachaviewcomposertomultipleviewsatonce:
..View ::composer (array ('profile' ,'dashboard' ),function ($view )
{
$view ->with ('count' , User ::count ());
});
If you would rather use a class based composer, which will provide the benefits of being resolved
throughtheapplication IoCContainer ,youmaydoso:
..View ::composer ('profile' ,'ProfileComposer' );
Aviewcomposerclassshouldbedefinedlikeso:
..class ProfileComposer {
public function compose ($view )
{
$view ->with ('count' , User ::count ());
}
}
Views&Responses 76
Defining Multiple Composers
Youmayusethe composers methodtoregisteragroupofcomposersatthesametime:
..View ::composers (array (
'AdminComposer' =>array ('admin.index' ,'admin.profile' ),
'UserComposer' =>'user' ,
'ProductComposer@create' =>'product'
));
Note:There is no convention on where composer classes may be stored. You are free
tostorethemanywhereaslongastheycanbeautoloadedusingthedirectivesinyour
composer.json file.
View Creators
View creatorsworkalmostexactlylikeviewcomposers;however,theyarefiredimmediatelywhen
theviewisinstantiated.Toregisteraviewcreator,simplyusethe creatormethod:
..View ::creator ('profile' ,function ($view )
{
$view ->with ('count' , User ::count ());
});
Special Responses
Creating A JSON Response
..return Response ::json (array ('name' =>'Steve' ,'state' =>'CA' ));
Creating A JSONP Response
Views&Responses 77
..return Response ::json (array ('name' =>'Steve' ,'state' =>
'CA' ))->setCallback (Input ::get('callback' ));
Creating A File Download Response
..return Response ::download ($pathToFile );
return Response ::download ($pathToFile ,$name ,$headers );
Note:SymfonyHttpFoundation,whichmanagesfiledownloads,requiresthefilebeing
downloadedtohaveanASCIIfilename.
Response Macros
If you would like to define a custom response that you can re-use in a variety of your routes and
controllers,youmayusethe Response::macro method:
..Response ::macro ('caps' ,function ($value )
{
return Response ::make (strtoupper( $value ));
});
The macrofunction accepts a name as its first argument, and a Closure as its second. The macro’s
Closurewillbeexecutedwhencallingthemacronameonthe Response class:
..return Response ::caps ('foo' );
Youmaydefineyourmacrosinoneofyour app/start files.Alternatively,youmayorganizeyour
macrosintoaseparatefilewhichisincludedfromoneofyour startfiles.
Controllers
•BasicControllers
•ControllerFilters
•ImplicitControllers
•RESTfulResourceControllers
•HandlingMissingMethods
Basic Controllers
Insteadofdefiningallofyourroute-levellogicinasingle routes.php file,youmaywishtoorganize
thisbehaviorusingControllerclasses.Controllerscangrouprelatedroutelogicintoaclass,aswell
astakeadvantageofmoreadvancedframeworkfeaturessuchasautomatic dependencyinjection .
Controllers are typically stored in the app/controllers directory, and this directory is registered
inthe classmap optionofyour composer.json filebydefault.However,controllerscantechnically
live in any directory or any sub-directory. Route declarations are not dependent on the location of
thecontrollerclassfileondisk.So,aslongasComposerknowshowtoautoloadthecontrollerclass,
itmaybeplacedanywhereyouwish.
Hereisanexampleofabasiccontrollerclass:
..class UserController extends BaseController {
/**
* Show the profile for the given user.
*/
public function showProfile ($id)
{
$user =User ::find ($id);
return View ::make ('user.profile' ,array ('user' =>$user ));
}
}
All controllers should extend the BaseController class. The BaseController is also stored in
theapp/controllers directory, and may be used as a place to put shared controller logic. The
Controllers 79
BaseController extends the framework’s Controller class. Now, we can route to this controller
actionlikeso:
..Route ::get('user/{id}' ,'UserController@showProfile' );
If you choose to nest or organize your controller using PHP namespaces, simply use the fully
qualifiedclassnamewhendefiningtheroute:
..Route ::get('foo' ,'Namespace\FooController@method' );
Note:Since we’re using Composer ⁴⁶to auto-load our PHP classes, controllers may
live anywhere on the file system, as long as composer knows how to load them. The
controllerdirectorydoesnotenforceanyfolderstructureforyourapplication.Routing
tocontrollersisentirelyde-coupledfromthefilesystem.
Youmayalsospecifynamesoncontrollerroutes:
..Route ::get('foo' ,array ('uses' =>'FooController@method' ,
'as' =>'name' ));
TogenerateaURLtoacontrolleraction,youmayusethe URL::action methodorthe actionhelper
method:
..$url =URL::action ('FooController@method' );
$url =action( 'FooController@method' );
Youmayaccessthenameofthecontrolleractionbeingrunusingthe currentRouteAction method:
..$action =Route ::currentRouteAction ();
⁴⁶http://getcomposer.org
Controllers 80
Controller Filters
Filtersmaybespecifiedoncontrollerroutessimilarto“regular”routes:
..Route ::get('profile' ,array ('before' =>'auth' ,
'uses' =>'UserController@showProfile' ));
However,youmayalsospecifyfiltersfromwithinyourcontroller:
..class UserController extends BaseController {
/**
* Instantiate a new UserController instance.
*/
public function __construct ()
{
$this ->beforeFilter ('auth' ,array ('except' =>'getLogin' ));
$this ->beforeFilter ('csrf' ,array ('on' =>'post' ));
$this ->afterFilter ('log' ,array ('only' =>
array ('fooAction' ,'barAction' )));
}
}
YoumayalsospecifycontrollerfiltersinlineusingaClosure:
..class UserController extends BaseController {
/**
* Instantiate a new UserController instance.
*/
public function __construct ()
{
$this ->beforeFilter (function ()
{
//
Controllers 81
..});
}
}
Ifyouwouldliketouseanothermethodonthecontrollerasafilter,youmayuse @syntaxtodefine
thefilter:
..class UserController extends BaseController {
/**
* Instantiate a new UserController instance.
*/
public function __construct ()
{
$this ->beforeFilter ('@filterRequests' );
}
/**
* Filter the incoming requests.
*/
public function filterRequests ($route ,$request )
{
//
}
}
Implicit Controllers
Laravelallowsyoutoeasilydefineasingleroutetohandleeveryactioninacontroller.First,define
therouteusingthe Route::controller method:
..Route ::controller ('users' ,'UserController' );
The controller method accepts two arguments. The first is the base URI the controller handles,
while the second is the class name of the controller. Next, just add methods to your controller,
Controllers 82
prefixedwiththeHTTPverbtheyrespondto:
..class UserController extends BaseController {
public function getIndex ()
{
//
}
public function postProfile ()
{
//
}
public function anyLogin ()
{
//
}
}
The indexmethods will respond to the root URI handled by the controller, which, in this case, is
users.
Ifyourcontrolleractioncontainsmultiplewords,youmayaccesstheactionusing“dash”syntaxin
theURI.Forexample,thefollowingcontrolleractiononour UserController wouldrespondtothe
users/admin-profile URI:
..public function getAdminProfile () {}
RESTful Resource Controllers
Resource controllers make it easier to build RESTful controllers around resources. For example,
you may wish to create a controller that manages “photos” stored by your application. Using the
controller:make commandviatheArtisanCLIandthe Route::resource method,wecanquickly
createsuchacontroller.
Tocreatethecontrollerviathecommandline,executethefollowingcommand:
Controllers 83
..php artisan controller :make PhotoController
Nowwecanregisteraresourcefulroutetothecontroller:
..Route ::resource ('photo' ,'PhotoController' );
This single route declaration creates multiple routes to handle a variety of RESTful actions on the
photo resource. Likewise, the generated controller will already have stubbed methods for each of
theseactionswithnotesinformingyouwhichURIsandverbstheyhandle.
Actions Handled By Resource Controller
Verb Path Action Route Name
GET /resource index resource.index
GET /resource/create create resource.create
POST /resource store resource.store
GET /resource/{resource} show resource.show
GET /resource/{resource}/edit edit resource.edit
PUT/PATCH /resource/{resource} update resource.update
DELETE /resource/{resource} destroy resource.destroy
Sometimesyoumayonlyneedtohandleasubsetoftheresourceactions:
..php artisan controller :make PhotoController --only =index,show
php artisan controller :make PhotoController --except =index
And,youmayalsospecifyasubsetofactionstohandleontheroute:
..Route ::resource ('photo' ,'PhotoController' ,
array ('only' =>array ('index' ,'show' )));
Route ::resource ('photo' ,'PhotoController' ,
Controllers 84
..array ('except' =>array ('create' ,'store' ,'update' ,
'destroy' )));
Bydefault,allresourcecontrolleractionshavearoutename;however,youcanoverridethesenames
bypassinga namesarraywithyouroptions:
..Route ::resource ('photo' ,'PhotoController' ,
array ('names' =>array ('create' =>'photo.build' )));
Handling Nested Resource Controllers
To“nest”resourcecontrollers,use“dot”notationinyourroutedeclaration:
..Route ::resource ('photos.comments' ,'PhotoCommentController' );
This route will register a “nested” resource that may be accessed with URLs like the following:
photos/{photoResource}/comments/{commentResource} .
..class PhotoCommentController extends BaseController {
public function show ($photoId ,$commentId )
{
//
}
}
Adding Additional Routes To Resource Controllers
Ifitbecomesnecessaryforyoutoaddadditionalroutestoaresourcecontrollerbeyondthedefault
resourceroutes,youshoulddefinethoseroutesbeforeyourcallto Route::resource :
Controllers 85
..Route ::get('photos/popular' );
Route ::resource ('photos' ,'PhotoController' );
Handling Missing Methods
Whenusing Route::controller ,acatch-allmethodmaybedefinedwhichwillbecalledwhenno
othermatchingmethodisfoundonagivencontroller.Themethodshouldbenamed missingMethod ,
andreceivesthemethodandparameterarrayfortherequest:
Defining A Catch-All Method
..public function missingMethod ($parameters =array ())
{
//
}
Ifyouareusingresourcecontrollers,youshoulddefinea __callmagicmethodonthecontrollerto
handleanymissingmethods.
Errors & Logging
•Configuration
•HandlingErrors
•HTTPExceptions
•Handling404Errors
•Logging
Configuration
The logging handler for your application is registered in the app/start/global.php start file. By
default, the logger is configured to use a single log file; however, you may customize this behavior
asneeded.SinceLaravelusesthepopular Monolog⁴⁷logginglibrary,youcantakeadvantageofthe
varietyofhandlersthatMonologoffers.
For example, if you wish to use daily log files instead of a single, large file, you can make the
followingchangetoyourstartfile:
..$logFile ='laravel.log' ;
Log::useDailyFiles (storage_path() .'/logs/' .$logFile );
Error Detail
By default, error detail is enabled for your application. This means that when an error occurs you
will be shown an error page with a detailed stack trace and error message. You may turn off error
detailsbysettingthe debugoptioninyour app/config/app.php fileto false.
Note:It is strongly recommended that you turn off error detail in a production environ-
ment.
⁴⁷https://github.com/Seldaek/monolog
Errors&Logging 87
Handling Errors
Bydefault,the app/start/global.php filecontainsanerrorhandlerforallexceptions:
..App::error (function (Exception $exception )
{
Log::error ($exception );
});
Thisisthemostbasicerrorhandler.However,youmayspecifymorehandlersifneeded.Handlersare
calledbasedonthetype-hintoftheExceptiontheyhandle.Forexample,youmaycreateahandler
thatonlyhandles RuntimeException instances:
..App::error (function (RuntimeException $exception )
{
// Handle the exception...
});
If an exception handler returns a response, that response will be sent to the browser and no other
errorhandlerswillbecalled:
..App::error (function (InvalidUserException $exception )
{
Log::error ($exception );
return 'Sorry! Something is wrong with this account!' ;
});
TolistenforPHPfatalerrors,youmayusethe App::fatal method:
..App::fatal (function ($exception )
{
//
});
Errors&Logging 88
If you have several exception handlers, they should be defined from most generic to most specific.
So,forexample,ahandlerthathandlesallexceptionsoftype Exception shouldbedefinedbeforea
customexceptiontypesuchas Illuminate\Encryption\DecryptException .
Where To Place Error Handlers
There is no default “home” for error handler registrations. Laravel offers you freedom in this area.
Oneoptionistodefinethehandlersinyour start/global.php file.Ingeneral,thisisaconvenient
location to place any “bootstrapping” code. If that file is getting crowded, you could create an
app/errors.php file, and requirethat file from your start/global.php script. A third option is
to create a service provider that registers the handlers. Again, there is no single “correct” answer.
Choosealocationthatyouarecomfortablewith.
HTTP Exceptions
Some exceptions describe HTTP error codes from the server. For example, this may be a “page not
found” error (404), an “unauthorized error” (401) or even a developer generated 500 error. In order
toreturnsucharesponse,usethefollowing:
..App::abort (404);
Optionally,youmayprovidearesponse:
..App::abort (403,'Unauthorized action.' );
Thismethodmaybeusedatanytimeduringtherequest’slifecycle.
Handling 404 Errors
You may register an error handler that handles all “404 Not Found” errors in your application,
allowingyoutoeasilyreturncustom404errorpages:
..
Errors&Logging 89
..App::missing (function ($exception )
{
return Response ::view ('errors.missing' ,array (), 404);
});
Logging
The Laravel logging facilities provide a simple layer on top of the powerful Monolog⁴⁸library. By
default,Laravelisconfiguredtocreateasinglelogfileforyourapplication,andthisfileisstoredin
app/storage/logs/laravel.log .Youmaywriteinformationtotheloglikeso:
..Log::info ('This is some useful information.' );
Log::warning ('Something could be going wrong.' );
Log::error ('Something is really going wrong.' );
The logger provides the seven logging levels defined in RFC 5424⁴⁹:debug,info,notice,warning,
error,critical,and alert.
Anarrayofcontextualdatamayalsobepassedtothelogmethods:
..Log::info ('Log message' ,array ('context' =>'Other helpful information' ));
Monolog has a variety of additional handlers you may use for logging. If needed, you may access
theunderlyingMonologinstancebeingusedbyLaravel:
..$monolog =Log::getMonolog ();
Youmayalsoregisteraneventtocatchallmessagespassedtothelog:
⁴⁸http://github.com/seldaek/monolog
⁴⁹http://tools.ietf.org/html/rfc5424
Errors&Logging 90
Registering A Log Listener
..Log::listen (function ($level ,$message ,$context )
{
//
});
Security
•Configuration
•StoringPasswords
•AuthenticatingUsers
•ManuallyLoggingInUsers
•ProtectingRoutes
•HTTPBasicAuthentication
•PasswordReminders&Reset
•Encryption
•AuthenticationDrivers
Configuration
Laravelaimstomakeimplementingauthenticationverysimple.Infact,almosteverythingisconfig-
uredforyououtofthebox.Theauthenticationconfigurationfileislocatedat app/config/auth.php ,
which contains several well documented options for tweaking the behavior of the authentication
facilities.
Bydefault,Laravelincludesa Usermodelinyour app/models directorywhichmaybeusedwiththe
defaultEloquentauthenticationdriver.PleaserememberwhenbuildingtheSchemaforthisModel
toensurethatthepasswordfieldisaminimumof60characters.
If your application is not using Eloquent, you may use the database authentication driver which
usestheLaravelquerybuilder.
Note:Before getting started, make sure that your users(or equivalent) table contains a
nullable, string remember_token column of 100 characters. This column will be used to
storeatokenfor“rememberme”sessionsbeingmaintainedbyyourapplication.Thiscan
bedonebyusing $table->rememberToken(); inamigration.
Storing Passwords
TheLaravel HashclassprovidessecureBcrypthashing:
Hashing A Password Using Bcrypt
Security 92
..$password =Hash ::make ('secret' );
Verifying A Password Against A Hash
..if(Hash ::check ('secret' ,$hashedPassword ))
{
// The passwords match...
}
Checking If A Password Needs To Be Rehashed
..if(Hash ::needsRehash ($hashed ))
{
$hashed =Hash ::make ('secret' );
}
Authenticating Users
Tologauserintoyourapplication,youmayusethe Auth::attempt method.
..if(Auth ::attempt (array ('email' =>$email ,'password' =>$password )))
{
return Redirect ::intended ('dashboard' );
}
Takenotethat emailisnotarequiredoption,itismerelyusedforexample.Youshouldusewhatever
columnnamecorrespondstoa“username”inyourdatabase.The Redirect::intended functionwill
redirect the user to the URL they were trying to access before being caught by the authentication
filter.AfallbackURImaybegiventothismethodincasetheintendeddestinationisnotavailable.
When the attemptmethod is called, the auth.attempt eventwill be fired. If the authentication
attemptissuccessfulandtheuserisloggedin,the auth.login eventwillbefiredaswell.
Security 93
Determining If A User Is Authenticated
Todetermineiftheuserisalreadyloggedintoyourapplication,youmayusethe checkmethod:
..if(Auth ::check ())
{
// The user is logged in...
}
Authenticating A User And “Remembering” Them
If you would like to provide “remember me” functionality in your application, you may pass true
asthesecondargumenttothe attemptmethod,whichwillkeeptheuserauthenticatedindefinitely
(oruntiltheymanuallylogout).Ofcourse,your userstablemustincludethestring remember_token
column,whichwillbeusedtostorethe“rememberme”token.
..if(Auth ::attempt (array ('email' =>$email ,'password' =>$password ),true ))
{
// The user is being remembered...
}
Note:Ifthe attemptmethodreturns true,theuserisconsideredloggedintotheapplication.
Determining If User Authed Via Remember
Ifyouare“remembering”userlogins,youmayusethe viaRemember methodtodetermineiftheuser
wasauthenticatedusingthe“rememberme”cookie:
..if(Auth ::viaRemember ())
{
//
}
Authenticating A User With Conditions
Youalsomayaddextraconditionstotheauthenticatingquery:
Security 94
..if(Auth ::attempt (array ('email' =>$email ,'password' =>$password ,'active'
=>1)))
{
// The user is active, not suspended, and exists.
}
Note:Foraddedprotectionagainstsessionfixation,theuser’ssessionIDwillautomat-
icallyberegeneratedafterauthenticating.
Accessing The Logged In User
Onceauserisauthenticated,youmayaccesstheUsermodel/record:
..$email =Auth ::user ()->email ;
Toretrievetheauthenticateduser’sID,youmayusethe idmethod:
..$id =Auth ::id();
TosimplylogauserintotheapplicationbytheirID,usethe loginUsingId method:
..Auth ::loginUsingId (1);
Validating User Credentials Without Login
Thevalidatemethodallowsyoutovalidateauser’scredentialswithoutactuallyloggingtheminto
theapplication:
..
Security 95
..if(Auth ::validate ($credentials ))
{
//
}
Logging A User In For A Single Request
Youmayalsousethe oncemethodtologauserintotheapplicationforasinglerequest.Nosessions
orcookieswillbeutilized.
..if(Auth ::once ($credentials ))
{
//
}
Logging A User Out Of The Application
..Auth ::logout ();
Manually Logging In Users
If you need to log an existing user instance into your application, you may simply call the login
methodwiththeinstance:
..$user =User ::find (1);
Auth ::login ($user );
Thisisequivalenttologginginauserviacredentialsusingthe attemptmethod.
Security 96
Protecting Routes
Routefiltersmaybeusedtoallowonlyauthenticateduserstoaccessagivenroute.Laravelprovides
theauthfilterbydefault,anditisdefinedin app/filters.php .
Protecting A Route
..Route ::get('profile' ,array ('before' =>'auth' ,function ()
{
// Only authenticated users may enter...
}));
CSRF Protection
Laravelprovidesaneasymethodofprotectingyourapplicationfromcross-siterequestforgeries.
Inserting CSRF Token Into Form
..<input type ="hidden "name ="_token "value ="<?php echo csrf_token(); ?> ">
Validate The Submitted CSRF Token
..Route ::post ('register' ,array ('before' =>'csrf' ,function ()
{
return 'You gave a valid CSRF token!' ;
}));
HTTP Basic Authentication
HTTPBasicAuthenticationprovidesaquickwaytoauthenticateusersofyourapplicationwithout
settingupadedicated“login”page.Togetstarted,attachthe auth.basic filtertoyourroute:
Protecting A Route With HTTP Basic
Security 97
..Route ::get('profile' ,array ('before' =>'auth.basic' ,function ()
{
// Only authenticated users may enter...
}));
By default, the basicfilter will use the emailcolumn on the user record when authenticating. If
youwishtouseanothercolumnyoumaypassthecolumnnameasthefirstparametertothe basic
methodinyour app/filters.php file:
..Route ::filter ('auth.basic' ,function ()
{
return Auth ::basic ('username' );
});
Setting Up A Stateless HTTP Basic Filter
YoumayalsouseHTTPBasicAuthenticationwithoutsettingauseridentifiercookieinthesession,
whichisparticularlyusefulforAPIauthentication.Todoso,defineafilterthatreturnsthe onceBasic
method:
..Route ::filter ('basic.once' ,function ()
{
return Auth ::onceBasic ();
});
If you are using PHP FastCGI, HTTP Basic authentication will not work correctly by default. The
followinglinesshouldbeaddedtoyour .htaccess file:
..RewriteCond %{HTTP :Authorization} ^(.+)$
RewriteRule .*-[E=HTTP_AUTHORIZATION :%{HTTP :Authorization}]
Security 98
Password Reminders & Reset
Model & Table
Most web applications provide a way for users to reset their forgotten passwords. Rather than
forcing you to re-implement this on each application, Laravel provides convenient methods for
sendingpasswordremindersandperformingpasswordresets.Togetstarted,verifythatyour User
model implements the Illuminate\Auth\Reminders\RemindableInterface contract. Of course,
theUsermodel included with the framework already implements this interface, and uses the
Illuminate\Auth\Reminders\RemindableTrait to include the methods needed to implement the
interface.
Implementing The RemindableInterface
..use Illuminate\Auth\Reminders\RemindableTrait;
use Illuminate\Auth\Reminders\RemindableInterface;
class User extends Eloquent implements RemindableInterface {
use RemindableTrait;
}
Generating The Reminder Table Migration
Next, a table must be created to store the password reset tokens. To generate a migration for this
table,simplyexecutethe auth:reminders-table Artisancommand:
..php artisan auth :reminders -table
php artisan migrate
Password Reminder Controller
Now we’re ready to generate the password reminder controller. To automatically generate a
controller, you may use the auth:reminders-controller Artisan command, which will create a
RemindersController.php fileinyour app/controllers directory.
Security 99
..php artisan auth :reminders -controller
Thegeneratedcontrollerwillalreadyhavea getRemind methodthathandlesshowingyourpassword
reminderform.Allyouneedtodoiscreatea password.remind view.Thisviewshouldhaveabasic
formwithan emailfield.TheformshouldPOSTtothe RemindersController@postRemind action.
Asimpleformonthe password.remind viewmightlooklikethis:
..<form action ="{{action('RemindersController@postRemind') }} "
method ="POST ">
<input type ="email "name ="email ">
<input type ="submit "value ="Send Reminder ">
</form >
In addition to getRemind , the generated controller will already have a postRemind method that
handlessendingthepasswordremindere-mailstoyourusers.Thismethodexpectsthe emailfield
to be present in the POSTvariables. If the reminder e-mail is successfully sent to the user, a status
messagewillbeflashedtothesession.Ifthereminderfails,an errormessagewillbeflashedinstead.
Withinthe postRemind controllermethodyoumaymodifythemessageinstancebeforeitissentto
theuser:
..Password ::remind (Input ::only ('email' ),function ($message )
{
$message ->subject ('Password Reminder' );
});
Youruserwillreceiveane-mailwithalinkthatpointstothe getResetmethodofthecontroller.The
password reminder token, which is used to identify a given password reminder attempt, will also
be passed to the controller method. The action is already configured to return a password.reset
view which you should build. The tokenwill be passed to the view, and you should place this
token in a hidden form field named token. In addition to the token, your password reset form
shouldcontain email,password,and password_confirmation fields.TheformshouldPOSTtothe
RemindersController@postReset method.
Asimpleformonthe password.reset viewmightlooklikethis:
Security 100
..<form action ="{{action('RemindersController@postReset') }} "method ="POST ">
<input type ="hidden "name ="token "value ="{{$token }}">
<input type ="email "name ="email ">
<input type ="password "name ="password ">
<input type ="password "name ="password_confirmation ">
<input type ="submit "value ="Reset Password ">
</form >
Finally,the postReset methodisresponsibleforactuallychangingthepasswordinstorage.Inthis
controller action, the Closure passed to the Password::reset method sets the password attribute
on the Userand calls the savemethod. Of course, this Closure is assuming your Usermodel is an
Eloquentmodel ;however,youarefreetochangethisClosureasneededtobecompatiblewithyour
application’sdatabasestoragesystem.
Ifthepasswordissuccessfullyreset,theuserwillberedirectedtotherootofyourapplication.Again,
youarefreetochangethisredirectURL.Ifthepasswordresetfails,theuserwillberedirectbackto
theresetform,andan errormessagewillbeflashedtothesession.
Password Validation
By default, the Password::reset method will verify that the passwords match and are >= six
characters.Youmaycustomizetheserulesusingthe Password::validator method,whichacceptsa
Closure.WithinthisClosure,youmaydoanypasswordvalidationyouwish.Notethatyouarenot
requiredtoverifythatthepasswordsmatch,asthiswillbedoneautomaticallybytheframework.
..Password ::validator (function ($credentials )
{
return strlen ($credentials ['password' ])>=6;
});
Note:Bydefault,passwordresettokensexpireafteronehour.Youmaychangethisvia
thereminder.expire optionofyour app/config/auth.php file.
Encryption
LaravelprovidesfacilitiesforstrongAESencryptionviathemcryptPHPextension:
Security 101
Encrypting A Value
..$encrypted =Crypt ::encrypt ('secret' );
Note:Be sure to set a 16, 24, or 32 character random string in the keyoption of the
app/config/app.php file.Otherwise,encryptedvalueswillnotbesecure.
Decrypting A Value
..$decrypted =Crypt ::decrypt ($encryptedValue );
Setting The Cipher & Mode
Youmayalsosetthecipherandmodeusedbytheencrypter:
..Crypt ::setMode ('ctr' );
Crypt ::setCipher ($cipher );
Authentication Drivers
Laravel offers the database and eloquent authentication drivers out of the box. For more infor-
mation about adding additional authentication drivers, check out the Authentication extension
documentation .
Laravel Cashier
•Introduction
•Configuration
•SubscribingToAPlan
•NoCardUpFront
•SwappingSubscriptions
•SubscriptionQuantity
•CancellingASubscription
•ResumingASubscription
•CheckingSubscriptionStatus
•HandlingFailedPayments
•HandlingOtherStripeWebhooks
•Invoices
Introduction
LaravelCashierprovidesanexpressive,fluentinterfaceto Stripe’s⁵⁰subscriptionbillingservices.It
handlesalmostalloftheboilerplatesubscriptionbillingcodeyouaredreadingwriting.Inaddition
tobasicsubscriptionmanagement,Cashiercanhandlecoupons,swappingsubscription,subscription
“quantities”,cancellationgraceperiods,andevengenerateinvoicePDFs.
Configuration
Composer
First,addtheCashierpackagetoyour composer.json file:
.."laravel/cashier ":"~2.0 "
Service Provider
Next,registerthe Laravel\Cashier\CashierServiceProvider inyour appconfigurationfile.
⁵⁰https://stripe.com
LaravelCashier 103
Migration
Before using Cashier, we’ll need to add several columns to your database. Don’t worry, you can
use the cashier:table Artisan command to create a migration to add the necessary column. For
example, to add the column to the users table use php artisan cashier:table users . Once the
migrationhasbeencreated,simplyrunthe migratecommand.
Model Setup
Next,addtheBillableTraitandappropriatedatemutatorstoyourmodeldefinition:
..use Laravel\Cashier\BillableTrait;
use Laravel\Cashier\BillableInterface;
class User extends Eloquent implements BillableInterface {
use BillableTrait;
protected $dates =['trial_ends_at' ,'subscription_ends_at' ];
}
Stripe Key
Finally,setyourStripekeyinoneofyourbootstrapfiles:
..User ::setStripeKey ('stripe-key' );
Subscribing To A Plan
Onceyouhaveamodelinstance,youcaneasilysubscribethatusertoagivenStripeplan:
..$user =User ::find (1);
$user ->subscription ('monthly' )->create ($creditCardToken );
LaravelCashier 104
If you would like to apply a coupon when creating the subscription, you may use the withCoupon
method:
..$user ->subscription ('monthly' )
->withCoupon ('code' )
->create ($creditCardToken );
The subscription methodwillautomaticallycreatetheStripesubscription,aswellasupdateyour
database with Stripe customer ID and other relevant billing information. If your plan has a trial
configuredinStripe,thetrialenddatewillalsoautomaticallybesetontheuserrecord.
Ifyourplanhasatrialperiodthatis notconfiguredinStripe,youmustsetthetrialenddatemanually
aftersubscribing:
..$user ->trial_ends_at =Carbon ::now()->addDays (14);
$user ->save ();
Specifying Additional User Details
If you would like to specify additional customer details, you may do so by passing them as second
argumenttothe createmethod:
..$user ->subscription ('monthly' )->create ($creditCardToken , [
'email' =>$email ,'description' =>'Our First Customer'
]);
TolearnmoreabouttheadditionalfieldssupportedbyStripe,checkoutStripe’s documentationon
customercreation ⁵¹.
No Card Up Front
Ifyourapplicationoffersafree-trialwithnocredit-cardupfront,setthe cardUpFront propertyon
yourmodelto false:
⁵¹https://stripe.com/docs/api#create_customer
LaravelCashier 105
..protected $cardUpFront =false ;
Onaccountcreation,besuretosetthetrialenddateonthemodel:
..$user ->trial_ends_at =Carbon ::now()->addDays (14);
$user ->save ();
Swapping Subscriptions
Toswapausertoanewsubscription,usethe swapmethod:
..$user ->subscription ('premium' )->swap ();
If the user is on trial, the trial will be maintained as normal. Also, if a “quantity” exists for the
subscription,thatquantitywillalsobemaintained.
Subscription Quantity
Sometimessubscriptionsareaffectedby“quantity”.Forexample,yourapplicationmightcharge$10
permonthperuseronanaccount.Toeasilyincrementordecrementyoursubscriptionquantity,use
theincrement anddecrement methods:
..$user =User ::find (1);
$user ->subscription ()->increment ();
// Add five to the subscription's current quantity...
$user ->subscription ()->increment (5);
$user ->subscription ->decrement ();
LaravelCashier 106
..// Subtract five to the subscription's current quantity...
$user ->subscription ()->decrement (5);
Cancelling A Subscription
Cancellingasubscriptionisawalkinthepark:
..$user ->subscription ()->cancel ();
Whenasubscriptioniscancelled,Cashierwillautomaticallysetthe subscription_ends_at column
onyourdatabase.Thiscolumnisusedtoknowwhenthe subscribed methodshouldbeginreturning
false.Forexample,ifacustomercancelsasubscriptiononMarch1st,butthesubscriptionwasnot
scheduledtoenduntilMarch5th,the subscribed methodwillcontinuetoreturn trueuntilMarch
5th.
Resuming A Subscription
Ifauserhascancelledtheirsubscriptionandyouwishtoresumeit,usethe resumemethod:
..$user ->subscription ('monthly' )->resume ($creditCardToken );
If the user cancels a subscription and then resumes that subscription before the subscription has
fully expired, they will not be billed immediately. Their subscription will simply be re-activated,
andtheywillbebilledontheoriginalbillingcycle.
Checking Subscription Status
Toverifythatauserissubscribedtoyourapplication,usethe subscribed command:
..
LaravelCashier 107
..if($user ->subscribed ())
{
//
}
The subscribed methodmakesagreatcandidateforaroutefilter:
..Route ::filter ('subscribed' ,function ()
{
if(Auth ::user ()&&!Auth ::user ()->subscribed ())
{
return Redirect ::to('billing' );
}
});
Youmayalsodetermineiftheuserisstillwithintheirtrialperiod(ifapplicable)usingthe onTrial
method:
..if($user ->onTrial ())
{
//
}
Todetermineiftheuserwasonceanactivesubscriber,buthascancelledtheirsubscription,youmay
usethe cancelled method:
..if($user ->cancelled ())
{
//
}
Youmayalsodetermineifauserhascancelledtheirsubscription,butarestillontheir“graceperiod”
until the subscription fully expires.For example,if a user cancels a subscription on March5th that
wasscheduledtoendonMarch10th,theuserisontheir“graceperiod”untilMarch10th.Notethat
thesubscribed methodstillreturns trueduringthistime.
LaravelCashier 108
..if($user ->onGracePeriod ())
{
//
}
The everSubscribed methodmaybeusedtodetermineiftheuserhaseversubscribedtoaplanin
yourapplication:
..if($user ->everSubscribed ())
{
//
}
The onPlanmethodmaybeusedtodetermineiftheuserissubscribedtoagivenplanbasedonits
ID:
..if($user ->onPlan ('monthly' ))
{
//
}
Handling Failed Payments
What if a customer’s credit card expires? No worries - Cashier includes a Webhook controller that
caneasilycancelthecustomer’ssubscriptionforyou.Justpointaroutetothecontroller:
..Route ::post ('stripe/webhook' ,
'Laravel\Cashier\WebhookController@handleWebhook' );
That’sit!Failedpaymentswillbecapturedandhandledbythecontroller.Thecontrollerwillcancel
the customer’s subscription after three failed payment attempts. The stripe/webhook URI in this
exampleisjustforexample.YouwillneedtoconfiguretheURIinyourStripesettings.
LaravelCashier 109
Handling Other Stripe Webhooks
IfyouhaveadditionalStripewebhookeventsyouwouldliketohandle,simplyextendtheWebhook
controller. Your method names should correspond to Cashier’s expected convention, specifically,
methods should be prefixed with handleand the name of the Stripe webhook you wish to handle.
For example, if you wish to handle the invoice.payment_succeeded webhook, you should add a
handleInvoicePaymentSucceeded methodtothecontroller.
..class WebhookController extends Laravel\Cashier\WebhookController {
public function handleInvoicePaymentSucceeded ($payload )
{
// Handle The Event
}
}
Note:In addition to updating the subscription information in your database, the
WebhookcontrollerwillalsocancelthesubscriptionviatheStripeAPI.
Invoices
Youcaneasilyretrieveanarrayofauser’sinvoicesusingthe invoices method:
..$invoices =$user ->invoices ();
Whenlistingtheinvoicesforthecustomer,youmayusethesehelpermethodstodisplaytherelevant
invoiceinformation:
..{{$invoice ->id}}
{{$invoice ->dateString () }}
{{$invoice ->dollars () }}
LaravelCashier 110
Use the downloadInvoice method to generate a PDF download of the invoice. Yes, it’s really this
easy:
..return $user ->downloadInvoice ($invoice ->id, [
'vendor' =>'Your Company' ,
'product' =>'Your Product' ,
]);
Cache
•Configuration
•CacheUsage
•Increments&Decrements
•CacheTags
•DatabaseCache
Configuration
Laravel provides a unified API for various caching systems. The cache configuration is located at
app/config/cache.php . In this file you may specify which cache driver you would like used by
defaultthroughoutyourapplication.Laravelsupportspopularcachingbackendslike Memcached ⁵²
andRedis⁵³outofthebox.
Thecacheconfigurationfilealsocontainsvariousotheroptions,whicharedocumentedwithinthe
file,somakesuretoreadovertheseoptions.Bydefault,Laravelisconfiguredtousethe filecache
driver, which stores the serialized, cached objects in the filesystem. For larger applications, it is
recommendedthatyouuseanin-memorycachesuchasMemcachedorAPC.
Cache Usage
Storing An Item In The Cache
..Cache ::put('key' ,'value' ,$minutes );
Using Carbon Objects To Set Expire Time
..
⁵²http://memcached.org
⁵³http://redis.io
Cache 112
..$expiresAt =Carbon ::now()->addMinutes (10);
Cache ::put('key' ,'value' ,$expiresAt );
Storing An Item In The Cache If It Doesn’t Exist
..Cache ::add('key' ,'value' ,$minutes );
The addmethodwillreturn trueiftheitemisactually addedtothecache.Otherwise,themethod
willreturn false.
Checking For Existence In Cache
..if(Cache ::has('key' ))
{
//
}
Retrieving An Item From The Cache
..$value =Cache ::get('key' );
Retrieving An Item Or Returning A Default Value
..$value =Cache ::get('key' ,'default' );
$value =Cache ::get('key' ,function () { return 'default' ; });
Storing An Item In The Cache Permanently
Cache 113
..Cache ::forever ('key' ,'value' );
Sometimes you may wish to retrieve an item from the cache, but also store a default value if the
requesteditemdoesn’texist.Youmaydothisusingthe Cache::remember method:
..$value =Cache ::remember ('users' ,$minutes ,function ()
{
return DB::table ('users' )->get();
});
Youmayalsocombinethe remember andforevermethods:
..$value =Cache ::rememberForever ('users' ,function ()
{
return DB::table ('users' )->get();
});
Notethatallitemsstoredinthecacheareserialized,soyouarefreetostoreanytypeofdata.
Pulling An Item From The Cache
Ifyouneedtoretrieveanitemfromthecacheandthendeleteit,youmayusethe pullmethod:
..$value =Cache ::pull ('key' );
Removing An Item From The Cache
..Cache ::forget ('key' );
Cache 114
Increments & Decrements
Alldriversexcept fileanddatabase supportthe increment anddecrement operations:
Incrementing A Value
..Cache ::increment ('key' );
Cache ::increment ('key' ,$amount );
Decrementing A Value
..Cache ::decrement ('key' );
Cache ::decrement ('key' ,$amount );
Cache Tags
Note:Cache tags are not supported when using the fileordatabase cache drivers.
Furthermore,whenusingmultipletagswithcachesthatarestored“forever”,performance
willbebestwithadriversuchas memcached ,whichautomaticallypurgesstalerecords.
Accessing A Tagged Cache
Cachetagsallowyoutotagrelateditemsinthecache,andthenflushallcachestaggedwithagiven
name.Toaccessataggedcache,usethe tagsmethod.
You may store a tagged cache by passing in an ordered list of tag names as arguments, or as an
orderedarrayoftagnames:
..Cache ::tags ('people' ,'authors' )->put('John' ,$john ,$minutes );
Cache ::tags (array ('people' ,'artists' ))->put('Anne' ,$anne ,$minutes );
Cache 115
..
Youmayuseanycachestoragemethodincombinationwithtags,including remember,forever,and
rememberForever .Youmayalsoaccesscacheditemsfromthetaggedcache,aswellasusetheother
cachemethodssuchas increment anddecrement .
Accessing Items In A Tagged Cache
Toaccessataggedcache,passthesameorderedlistoftagsusedtosaveit.
..$anne =Cache ::tags ('people' ,'artists' )->get('Anne' );
$john =Cache ::tags (array ('people' ,'authors' ))->get('John' );
You may flush all items tagged with a name or list of names. For example, this statement would
remove all caches tagged with either people,authors, or both. So, both “Anne” and “John” would
beremovedfromthecache:
..Cache ::tags ('people' ,'authors' )->flush ();
In contrast, this statement would remove only caches tagged with authors, so “John” would be
removed,butnot“Anne”.
..Cache ::tags ('authors' )->flush ();
Database Cache
When using the database cache driver, you will need to setup a table to contain the cache items.
You’llfindanexample Schemadeclarationforthetablebelow:
..
Cache 116
..Schema ::create ('cache' ,function ($table )
{
$table ->string ('key' )->unique ();
$table ->text ('value' );
$table ->integer ('expiration' );
});
Extending The Framework
•Introduction
•Managers&Factories
•WhereToExtend
•Cache
•Session
•Authentication
•IoCBasedExtension
•RequestExtension
Introduction
Laravel offers many extension points for you to customize the behavior of the framework’s core
components, or even replace them entirely. For example, the hashing facilities are defined by a
HasherInterface contract, which you may implement based on your application’s requirements.
Youmayalsoextendthe Requestobject,allowingyoutoaddyourownconvenient“helper”methods.
Youmayevenaddentirelynewauthentication,cache,andsessiondrivers!
Laravel components are generally extended in two ways: binding new implementations in the
IoC container, or registering an extension with a Managerclass, which are implementations of
the “Factory” design pattern. In this chapter we’ll explore the various methods of extending the
frameworkandexaminethenecessarycode.
Note:Remember, Laravel components are typically extended in one of two ways: IoC
bindings and the Managerclasses. The manager classes serve as an implementation of the
“factory” design pattern, and are responsible for instantiating driver based facilities such
ascacheandsession.
Managers & Factories
Laravel has several Managerclasses that manage the creation of driver-based components. These
includethecache,session,authentication,andqueuecomponents.Themanagerclassisresponsible
forcreatingaparticulardriverimplementationbasedontheapplication’sconfiguration.Forexam-
ple, the CacheManager class can create APC, Memcached, File, and various other implementations
ofcachedrivers.
ExtendingTheFramework 118
Each of these managers includes an extendmethod which may be used to easily inject new driver
resolutionfunctionalityintothemanager.We’llcovereachofthesemanagersbelow,withexamples
ofhowtoinjectcustomdriversupportintoeachofthem.
Note:Take a moment to explore the various Managerclasses that ship with Laravel,
such as the CacheManager and SessionManager . Reading through these classes will give
you a more thorough understanding of how Laravel works under the hood. All manager
classesextendthe Illuminate\Support\Manager baseclass,whichprovidessomehelpful,
commonfunctionalityforeachmanager.
Where To Extend
This documentation covers how to extend a variety of Laravel’s components, but you may be
wondering where to place your extension code. Like most other bootstrapping code, you are free
to place some extensions in your startfiles. Cache and Auth extensions are good candidates for
this approach. Other extensions, like Session, must be placed in the register method of a service
providersincetheyareneededveryearlyintherequestlife-cycle.
Cache
ToextendtheLaravelcachefacility,wewillusethe extendmethodonthe CacheManager ,whichis
usedtobindacustomdriverresolvertothemanager,andiscommonacrossallmanagerclasses.For
example,toregisteranewcachedrivernamed“mongo”,wewoulddothefollowing:
..Cache ::extend ('mongo' ,function ($app )
{
// Return Illuminate\Cache\Repository instance...
});
The first argument passed to the extendmethod is the name of the driver. This will correspond
to your driveroption in the app/config/cache.php configuration file. The second argument
is a Closure that should return an Illuminate\Cache\Repository instance. The Closure will be
passedan $appinstance,whichisaninstanceof Illuminate\Foundation\Application andanIoC
container.
Tocreateourcustomcachedriver,wefirstneedtoimplementthe Illuminate\Cache\StoreInterface
contract.So,ourMongoDBcacheimplementationwouldlooksomethinglikethis:
ExtendingTheFramework 119
..class MongoStore implements Illuminate\Cache\StoreInterface {
public function get($key ) {}
public function put($key ,$value ,$minutes ) {}
public function increment ($key ,$value =1) {}
public function decrement ($key ,$value =1) {}
public function forever ($key ,$value ) {}
public function forget ($key ) {}
public function flush () {}
}
We just need to implement each of these methods using a MongoDB connection. Once our
implementationiscomplete,wecanfinishourcustomdriverregistration:
..use Illuminate\Cache\Repository;
Cache ::extend ('mongo' ,function ($app )
{
return new Repository( new MongoStore);
});
As you can see in the example above, you may use the base Illuminate\Cache\Repository when
creatingcustomcachedrivers.Thereistypicallynoneedtocreateyourownrepositoryclass.
If you’re wondering where to put your custom cache driver code, consider making it available
on Packagist! Or, you could create an Extensions namespace within your application’s primary
folder. For example, if the application is named Snappy, you could place the cache extension in
app/Snappy/Extensions/MongoStore.php .However,keepinmindthatLaraveldoesnothavearigid
applicationstructureandyouarefreetoorganizeyourapplicationaccordingtoyourpreferences.
Note:If you’re ever wondering where to put a piece of code, always consider a service
provider. As we’ve discussed, using a service provider to organize framework extensions
isagreatwaytoorganizeyourcode.
ExtendingTheFramework 120
Session
ExtendingLaravelwithacustomsessiondriverisjustaseasyasextendingthecachesystem.Again,
wewillusethe extendmethodtoregisterourcustomcode:
..Session ::extend ('mongo' ,function ($app )
{
// Return implementation of SessionHandlerInterface
});
Where To Extend The Session
SessionextensionsneedtoberegistereddifferentlythanotherextensionslikeCacheandAuth.Since
sessionsarestartedveryearlyintherequest-lifecycle,registeringtheextensionsina startfilewill
happentoolate.Instead,a serviceprovider willbeneeded.Youshouldplaceyoursessionextension
codeinthe registermethodofyourserviceprovider,andtheprovidershouldbeplaced belowthe
default Illuminate\Session\SessionServiceProvider inthe providers configurationarray.
Writing The Session Extension
Notethatourcustomsessiondrivershouldimplementthe SessionHandlerInterface .Thisinterface
is included in the PHP 5.4+ core. If you are using PHP 5.3, the interface will be defined for you by
Laravel so you have forward-compatibility. This interface contains just a few simple methods we
needtoimplement.AstubbedMongoDBimplementationwouldlooksomethinglikethis:
..class MongoHandler implements SessionHandlerInterface {
public function open ($savePath ,$sessionName ) {}
public function close () {}
public function read ($sessionId ) {}
public function write ($sessionId ,$data ) {}
public function destroy ($sessionId ) {}
public function gc($lifetime ) {}
}
Since these methods are not as readily understandable as the cache StoreInterface , let’s quickly
coverwhateachofthemethodsdo:
ExtendingTheFramework 121
•The openmethod would typically be used in file based session store systems. Since Laravel
ships with a filesession driver, you will almost never need to put anything in this method.
You can leave it as an empty stub. It is simply a fact of poor interface design (which we’ll
discusslater)thatPHPrequiresustoimplementthismethod.
•The closemethod,likethe openmethod,canalsousuallybedisregarded.Formostdrivers,it
isnotneeded.
•The readmethod should return the string version of the session data associated with the
given $sessionId .Thereisnoneedtodoanyserializationorotherencodingwhenretrieving
orstoringsessiondatainyourdriver,asLaravelwillperformtheserializationforyou.
•The writemethod should write the given $datastring associated with the $sessionId to
somepersistentstoragesystem,suchasMongoDB,Dynamo,etc.
•The destroymethodshouldremovethedataassociatedwiththe $sessionId frompersistent
storage.
•The gcmethodshoulddestroyallsessiondatathatisolderthanthegiven $lifetime ,which
isaUNIXtimestamp.Forself-expiringsystemslikeMemcachedandRedis,thismethodmay
beleftempty.
Once the SessionHandlerInterface has been implemented, we are ready to register it with the
Sessionmanager:
..Session ::extend ('mongo' ,function ($app )
{
return new MongoHandler;
});
Oncethesessiondriverhasbeenregistered,wemayusethe mongodriverinour app/config/session.php
configurationfile.
Note:Remember,ifyouwriteacustomsessionhandler,shareitonPackagist!
Authentication
Authentication may be extended the same way as the cache and session facilities. Again, we will
usethe extendmethodwehavebecomefamiliarwith:
ExtendingTheFramework 122
..Auth ::extend ('riak' ,function ($app )
{
// Return implementation of Illuminate\Auth\UserProviderInterface
});
The UserProviderInterface implementations are only responsible for fetching a UserInterface
implementation out of a persistent storage system, such as MySQL, Riak, etc. These two interfaces
allow the Laravel authentication mechanisms to continue functioning regardless of how the user
dataisstoredorwhattypeofclassisusedtorepresentit.
Let’stakealookatthe UserProviderInterface :
..interface UserProviderInterface {
public function retrieveById ($identifier );
public function retrieveByToken ($identifier ,$token );
public function updateRememberToken (UserInterface $user ,$token );
public function retrieveByCredentials (array $credentials );
public function validateCredentials (UserInterface $user ,array
$credentials );
}
The retrieveById functiontypicallyreceivesanumerickeyrepresentingtheuser,suchasanauto-
incrementing ID from a MySQL database. The UserInterface implementation matching the ID
shouldberetrievedandreturnedbythemethod.
The retrieveByToken function retrieves a user by their unique $identifier and “remember me”
$token, stored in a field remember_token . As with with previous method, the UserInterface
implementationshouldbereturned.
The updateRememberToken method updates the $userfield remember_token with the new $token.
Thenewtokencanbeeitherafreshtoken,assignedonsuccessfull“rememberme”loginattempt,or
anullwhenuserisloggedout.
The retrieveByCredentials methodreceivesthearrayofcredentialspassedtothe Auth::attempt
methodwhenattemptingtosignintoanapplication.Themethodshouldthen“query”theunderlying
persistent storage for the user matching those credentials. Typically, this method will run a query
witha“where”conditionon $credentials['username'] .This method should not attempt to do
any password validation or authentication.
ExtendingTheFramework 123
The validateCredentials method should compare the given $userwith the $credentials to
authenticate the user. For example, this method might compare the $user->getAuthPassword()
stringtoa Hash::make of$credentials['password'] .
Nowthatwehaveexploredeachofthemethodsonthe UserProviderInterface ,let’stakealookat
theUserInterface . Remember, the provider should return implementations of this interface from
theretrieveById andretrieveByCredentials methods:
..interface UserInterface {
public function getAuthIdentifier ();
public function getAuthPassword ();
}
This interface is simple. The getAuthIdentifier method should return the “primary key” of
the user. In a MySQL back-end, again, this would be the auto-incrementing primary key. The
getAuthPassword shouldreturntheuser’shashedpassword.Thisinterfaceallowstheauthentication
system to work with any User class, regardless of what ORM or storage abstraction layer you are
using.Bydefault,Laravelincludesa Userclassinthe app/models directorywhichimplementsthis
interface,soyoumayconsultthisclassforanimplementationexample.
Finally, once we have implemented the UserProviderInterface , we are ready to register our
extensionwiththe Authfacade:
..Auth ::extend ('riak' ,function ($app )
{
return new RiakUserProvider( $app ['riak.connection' ]);
});
Afteryouhaveregisteredthedriverwiththe extendmethod,youswitchtothenewdriverinyour
app/config/auth.php configurationfile.
IoC Based Extension
Almost every service provider included with the Laravel framework binds objects into the IoC
container. You can find a list of your application’s service providers in the app/config/app.php
configurationfile.Asyouhavetime,youshouldskimthrougheachoftheseprovider’ssourcecode.
Bydoingso,youwillgainamuchbetterunderstandingofwhateachprovideraddstotheframework,
aswellaswhatkeysareusedtobindvariousservicesintotheIoCcontainer.
ExtendingTheFramework 124
Forexample,the HashServiceProvider bindsa hashkeyintotheIoCcontainer,whichresolvesinto
aIlluminate\Hashing\BcryptHasher instance.Youcaneasilyextendandoverridethisclasswithin
yourownapplicationbyoverridingthisIoCbinding.Forexample:
..class SnappyHashProvider extends Illuminate\Hashing\HashServiceProvider {
public function boot ()
{
App::bindShared ('hash' ,function ()
{
return new Snappy\Hashing\ScryptHasher;
});
parent ::boot ();
}
}
Note that this class extends the HashServiceProvider , not the default ServiceProvider base
class. Once you have extended the service provider, swap out the HashServiceProvider in your
app/config/app.php configurationfilewiththenameofyourextendedprovider.
This is the general method of extending any core class that is bound in the container. Essentially
every core class is bound in the container in this fashion, and can be overridden. Again, reading
through the included framework service providers will familiarize you with where various classes
are bound into the container, and what keys they are bound by. This is a great way to learn more
abouthowLaravelisputtogether.
Request Extension
Becauseitissuchafoundationalpieceoftheframeworkandisinstantiatedveryearlyintherequest
cycle,extendingthe Requestclassworksalittledifferentlythanthepreviousexamples.
First,extendtheclasslikenormal:
..
ExtendingTheFramework 125
..<?php namespace QuickBill\Extensions;
class Request extends \Illuminate\Http\Request {
// Custom, helpful methods here...
}
Once you have extended the class, open the bootstrap/start.php file. This file is one of the very
firstfilestobeincludedoneachrequesttoyourapplication.Notethatthefirstactionperformedis
thecreationoftheLaravel $appinstance:
..$app =new \Illuminate\Foundation\Application;
Whenanewapplicationinstanceiscreated,itwillcreateanew Illuminate\Http\Request instance
and bind it to the IoC container using the requestkey. So, we need a way to specify a custom
class that should be used as the “default” request type, right? And, thankfully, the requestClass
method on the application instance does just this! So, we can add this line at the very top of our
bootstrap/start.php file:
..use Illuminate\Foundation\Application;
Application ::requestClass ('QuickBill\Extensions\Request' );
Once you have specified the custom request class, Laravel will use this class anytime it creates a
Requestinstance, conveniently allowing you to always have an instance of your custom request
classavailable,eveninunittests!
Events
•BasicUsage
•WildcardListeners
•UsingClassesAsListeners
•QueuedEvents
•EventSubscribers
Basic Usage
TheLaravel Eventclassprovidesasimpleobserverimplementation,allowingyoutosubscribeand
listenforeventsinyourapplication.
Subscribing To An Event
..Event ::listen ('auth.login' ,function ($user )
{
$user ->last_login =new DateTime;
$user ->save ();
});
Firing An Event
..$response =Event ::fire ('auth.login' ,array ($user ));
The firemethod returns an array of responses that you can use to control what happens next in
yourapplication.
Subscribing To Events With Priority
You may also specify a priority when subscribing to events. Listeners with higher priority will be
runfirst,whilelistenersthathavethesameprioritywillberuninorderofsubscription.
Events 127
..Event ::listen ('auth.login' ,'LoginHandler' ,10);
Event ::listen ('auth.login' ,'OtherHandler' ,5);
Stopping The Propagation Of An Event
Sometimes, you may wish to stop the propagation of an event to other listeners. You may do so
usingbyreturning falsefromyourlistener:
..Event ::listen ('auth.login' ,function ($event )
{
// Handle the event...
return false ;
});
Where To Register Events
So, you know how to register events, but you may be wondering whereto register them. Don’t
worry, this is a common question. Unfortunately, it’s a hard question to answer because you can
register an event almost anywhere! But, here are some tips. Again, like most other bootstrapping
code,youmayregistereventsinoneofyour startfilessuchas app/start/global.php .
If your startfiles are getting too crowded, you could create a separate app/events.php file that
is included from a startfile. This is a simple solution that keeps your event registration cleanly
separatedfromtherestofyourbootstrapping.
Ifyoupreferaclassbasedapproach,youmayregisteryoureventsina serviceprovider .Sincenone
oftheseapproachesisinherently“correct”,chooseanapproachyoufeelcomfortablewithbasedon
thesizeofyourapplication.
Wildcard Listeners
Registering Wildcard Event Listeners
Whenregisteringaneventlistener,youmayuseasteriskstospecifywildcardlisteners:
Events 128
..Event ::listen ('foo.*' ,function ($param )
{
// Handle the event...
});
Thislistenerwillhandlealleventsthatbeginwith foo..
Youmayusethe Event::firing methodtodetermineexactlywhicheventwasfired:
..Event ::listen ('foo.*' ,function ($param )
{
if(Event ::firing ()=='foo.bar' )
{
//
}
});
Using Classes As Listeners
In some cases, you may wish to use a class to handle an event rather than a Closure. Class
event listeners will be resolved out of the Laravel IoC container , providing you the full power of
dependencyinjectiononyourlisteners.
Registering A Class Listener
..Event ::listen ('auth.login' ,'LoginHandler' );
Defining An Event Listener Class
Bydefault,the handlemethodonthe LoginHandler classwillbecalled:
..
Events 129
..class LoginHandler {
public function handle ($data )
{
//
}
}
Specifying Which Method To Subscribe
If you do not wish to use the default handlemethod, you may specify the method that should be
subscribed:
..Event ::listen ('auth.login' ,'LoginHandler@onLogin' );
Queued Events
Registering A Queued Event
Usingthe queueandflushmethods,youmay“queue”aneventforfiring,butnotfireitimmediately:
..Event ::queue ('foo' ,array ($user ));
Youmayrunthe“flusher”andflushallqueuedeventsusingthe flushmethod:
..Event ::flush ('foo' );
Events 130
Event Subscribers
Defining An Event Subscriber
Event subscribers are classes that may subscribe to multiple events from within the class itself.
Subscribersshoulddefinea subscribe method,whichwillbepassedaneventdispatcherinstance:
..class UserEventHandler {
/**
* Handle user login events.
*/
public function onUserLogin ($event )
{
//
}
/**
* Handle user logout events.
*/
public function onUserLogout ($event )
{
//
}
/**
* Register the listeners for the subscriber.
*
* @param Illuminate\Events\Dispatcher $events
* @return array
*/
public function subscribe ($events )
{
$events ->listen ('auth.login' ,'UserEventHandler@onUserLogin' );
$events ->listen ('auth.logout' ,'UserEventHandler@onUserLogout' );
}
}
Events 131
Registering An Event Subscriber
Oncethesubscriberhasbeendefined,itmayberegisteredwiththe Eventclass.
..$subscriber =new UserEventHandler;
Event ::subscribe ($subscriber );
You may also use the Laravel IoC container to resolve your subscriber. To do so, simply pass the
nameofyoursubscribertothe subscribe method:
..Event ::subscribe ('UserEventHandler' );
Facades
•Introduction
•Explanation
•PracticalUsage
•CreatingFacades
•MockingFacades
•FacadeClassReference
Introduction
Facades provide a “static” interface to classes that are available in the application’s IoC container .
Laravel ships with many facades, and you have probably been using them without even knowing
it! Laravel “facades” serve as “static proxies” to underlying classes in the IoC container, providing
the benefit of a terse, expressive syntax while maintaining more testability and flexibility than
traditionalstaticmethods.
Occasionally,Youmaywishtocreateyourownfacadesforyourapplicationsandpackages,solet’s
exploretheconcept,developmentandusageoftheseclasses.
Note:Before digging into facades, it is strongly recommended that you become very
familiarwiththeLaravel IoCcontainer .
Explanation
InthecontextofaLaravelapplication,afacadeisaclassthatprovidesaccesstoanobjectfromthe
container. The machinery that makes this work is in the Facadeclass. Laravel’s facades, and any
customfacadesyoucreate,willextendthebase Facadeclass.
Yourfacadeclassonlyneedstoimplementasinglemethod: getFacadeAccessor .It’sthe getFacadeAccessor
method’s job to define what to resolve from the container. The Facadebase class makes use of the
__callStatic() magic-methodtodefercallsfromyourfacadetotheresolvedobject.
So, when you make a facade call like Cache::get , Laravel resolves the Cache manager class out of
the IoC container and calls the getmethod on the class. In technical terms, Laravel Facades are a
convenientsyntaxforusingtheLaravelIoCcontainerasaservicelocator.
Facades 133
Practical Usage
Intheexamplebelow,acallismadetotheLaravelcachesystem.Byglancingatthiscode,onemight
assumethatthestaticmethod getisbeingcalledonthe Cacheclass.
..$value =Cache ::get('key' );
However, if we look at that Illuminate\Support\Facades\Cache class, you’ll see that there is no
staticmethod get:
..class Cache extends Facade {
/**
* Get the registered name of the component.
*
* @return string
*/
protected static function getFacadeAccessor () { return 'cache' ; }
}
The Cache class extends the base Facadeclass and defines a method getFacadeAccessor() .
Remember,thismethod’sjobistoreturnthenameofanIoCbinding.
Whenauser referencesanystatic methodon the Cachefacade,Laravelresolvesthe cachebinding
fromtheIoCcontainerandrunstherequestedmethod(inthiscase, get)againstthatobject.
So,our Cache::get callcouldbere-writtenlikeso:
..$value =$app ->make ('cache' )->get('key' );
Creating Facades
Creatingafacadeforyourownapplicationorpackageissimple.Youonlyneed3things:
•AnIoCbinding.
Facades 134
•Afacadeclass.
•Afacadealiasconfiguration.
Let’slookatanexample.Here,wehaveaclassdefinedas PaymentGateway\Payment .
..namespace PaymentGateway;
class Payment {
public function process ()
{
//
}
}
This class might live in your app/models directory, or any other directory that Composer knows
howtoauto-load.
WeneedtobeabletoresolvethisclassfromtheIoCcontainer.So,let’saddabinding:
..App::bind ('payment' ,function ()
{
return new \PaymentGateway\Payment;
});
Agreatplacetoregisterthisbindingwouldbetocreateanew serviceprovider named PaymentServiceProvider ,
and add this binding to the register method. Youcan then configureLaravelto load yourservice
providerfromthe app/config/app.php configurationfile.
Next,wecancreateourownfacadeclass:
..use Illuminate\Support\Facades\Facade;
class Payment extends Facade {
protected static function getFacadeAccessor () { return 'payment' ; }
Facades 135
..}
Finally,ifwewish,wecanaddanaliasforourfacadetothe aliasesarrayinthe app/config/app.php
configurationfile.Now,wecancallthe processmethodonaninstanceofthe Paymentclass.
..Payment ::process ();
A Note On Auto-Loading Aliases
Classes in the aliasesarray are not available in some instances because PHP will not at-
tempt to autoload undefined type-hinted classes ⁵⁴. If\ServiceWrapper\ApiTimeoutException is
aliased to ApiTimeoutException , acatch(ApiTimeoutException $e) outside of the namespace
\ServiceWrapper willnevercatchtheexception,evenifoneisthrown.Asimilarproblemisfound
in Models which have type hints to aliased classes. The only workaround is to forego aliasing and
usetheclassesyouwishtotypehintatthetopofeachfilewhichrequiresthem.
Mocking Facades
Unittestingisanimportantaspectofwhyfacadesworkthewaythattheydo.Infact,testabilityis
theprimaryreasonforfacadestoevenexist.Formoreinformation,checkoutthe mockingfacades
sectionofthedocumentation.
Facade Class Reference
Below you will find every facade and its underlying class. This is a useful tool for quickly digging
into the API documentation for a given facade root. The IoC binding key is also included where
applicable.
⁵⁴https://bugs.php.net/bug.php?id=39003
Facades 136
Facade Class IoC Binding
App Illuminate\Foundation\Application ⁵⁵ app
Artisan Illuminate\Console\Application ⁵⁶ artisan
Auth Illuminate\Auth\AuthManager ⁵⁷ auth
Auth(Instance) Illuminate\Auth\Guard ⁵⁸
Blade Illuminate\View\Compilers\BladeCompiler ⁵⁹blade.compiler
Cache Illuminate\Cache\Repository ⁶⁰ cache
Config Illuminate\Config\Repository ⁶¹ config
Cookie Illuminate\Cookie\CookieJar ⁶² cookie
Crypt Illuminate\Encryption\Encrypter ⁶³ encrypter
DB Illuminate\Database\DatabaseManager ⁶⁴ db
DB(Instance) Illuminate\Database\Connection ⁶⁵
Event Illuminate\Events\Dispatcher ⁶⁶ events
File Illuminate\Filesystem\Filesystem ⁶⁷ files
Form Illuminate\Html\FormBuilder ⁶⁸ form
Hash Illuminate\Hashing\HasherInterface ⁶⁹ hash
HTML Illuminate\Html\HtmlBuilder ⁷⁰ html
Input Illuminate\Http\Request ⁷¹ request
Lang Illuminate\Translation\Translator ⁷² translator
Log Illuminate\Log\Writer ⁷³ log
Mail Illuminate\Mail\Mailer ⁷⁴ mailer
Paginator Illuminate\Pagination\Factory ⁷⁵ paginator
Paginator(Instance) Illuminate\Pagination\Paginator ⁷⁶
Password Illuminate\Auth\Reminders\PasswordBroker ⁷⁷auth.reminder
Queue Illuminate\Queue\QueueManager ⁷⁸ queue
⁵⁵http://laravel.com/api/4.2/Illuminate/Foundation/Application.html
⁵⁶http://laravel.com/api/4.2/Illuminate/Console/Application.html
⁵⁷http://laravel.com/api/4.2/Illuminate/Auth/AuthManager.html
⁵⁸http://laravel.com/api/4.2/Illuminate/Auth/Guard.html
⁵⁹http://laravel.com/api/4.2/Illuminate/View/Compilers/BladeCompiler.html
⁶⁰http://laravel.com/api/4.2/Illuminate/Cache/Repository.html
⁶¹http://laravel.com/api/4.2/Illuminate/Config/Repository.html
⁶²http://laravel.com/api/4.2/Illuminate/Cookie/CookieJar.html
⁶³http://laravel.com/api/4.2/Illuminate/Encryption/Encrypter.html
⁶⁴http://laravel.com/api/4.2/Illuminate/Database/DatabaseManager.html
⁶⁵http://laravel.com/api/4.2/Illuminate/Database/Connection.html
⁶⁶http://laravel.com/api/4.2/Illuminate/Events/Dispatcher.html
⁶⁷http://laravel.com/api/4.2/Illuminate/Filesystem/Filesystem.html
⁶⁸http://laravel.com/api/4.2/Illuminate/Html/FormBuilder.html
⁶⁹http://laravel.com/api/4.2/Illuminate/Hashing/HasherInterface.html
⁷⁰http://laravel.com/api/4.2/Illuminate/Html/HtmlBuilder.html
⁷¹http://laravel.com/api/4.2/Illuminate/Http/Request.html
⁷²http://laravel.com/api/4.2/Illuminate/Translation/Translator.html
⁷³http://laravel.com/api/4.2/Illuminate/Log/Writer.html
⁷⁴http://laravel.com/api/4.2/Illuminate/Mail/Mailer.html
⁷⁵http://laravel.com/api/4.2/Illuminate/Pagination/Factory.html
⁷⁶http://laravel.com/api/4.2/Illuminate/Pagination/Paginator.html
⁷⁷http://laravel.com/api/4.2/Illuminate/Auth/Reminders/PasswordBroker.html
⁷⁸http://laravel.com/api/4.2/Illuminate/Queue/QueueManager.html
Facades 137
Facade Class IoC Binding
Queue(Instance) Illuminate\Queue\QueueInterface ⁷⁹
Queue(BaseClass) Illuminate\Queue\Queue ⁸⁰
Redirect Illuminate\Routing\Redirector ⁸¹ redirect
Redis Illuminate\Redis\Database ⁸² redis
Request Illuminate\Http\Request ⁸³ request
Response Illuminate\Support\Facades\Response ⁸⁴
Route Illuminate\Routing\Router ⁸⁵ router
Schema Illuminate\Database\Schema\Blueprint ⁸⁶
Session Illuminate\Session\SessionManager ⁸⁷ session
Session(Instance) Illuminate\Session\Store ⁸⁸
SSH Illuminate\Remote\RemoteManager ⁸⁹ remote
SSH(Instance) Illuminate\Remote\Connection ⁹⁰
URL Illuminate\Routing\UrlGenerator ⁹¹ url
Validator Illuminate\Validation\Factory ⁹² validator
Validator(Instance) Illuminate\Validation\Validator ⁹³
View Illuminate\View\Factory ⁹⁴ view
View(Instance) Illuminate\View\View ⁹⁵
⁷⁹http://laravel.com/api/4.2/Illuminate/Queue/QueueInterface.html
⁸⁰http://laravel.com/api/4.2/Illuminate/Queue/Queue.html
⁸¹http://laravel.com/api/4.2/Illuminate/Routing/Redirector.html
⁸²http://laravel.com/api/4.2/Illuminate/Redis/Database.html
⁸³http://laravel.com/api/4.2/Illuminate/Http/Request.html
⁸⁴http://laravel.com/api/4.2/Illuminate/Support/Facades/Response.html
⁸⁵http://laravel.com/api/4.2/Illuminate/Routing/Router.html
⁸⁶http://laravel.com/api/4.2/Illuminate/Database/Schema/Blueprint.html
⁸⁷http://laravel.com/api/4.2/Illuminate/Session/SessionManager.html
⁸⁸http://laravel.com/api/4.2/Illuminate/Session/Store.html
⁸⁹http://laravel.com/api/4.2/Illuminate/Remote/RemoteManager.html
⁹⁰http://laravel.com/api/4.2/Illuminate/Remote/Connection.html
⁹¹http://laravel.com/api/4.2/Illuminate/Routing/UrlGenerator.html
⁹²http://laravel.com/api/4.2/Illuminate/Validation/Factory.html
⁹³http://laravel.com/api/4.2/Illuminate/Validation/Validator.html
⁹⁴http://laravel.com/api/4.2/Illuminate/View/Factory.html
⁹⁵http://laravel.com/api/4.2/Illuminate/View/View.html
Forms & HTML
•OpeningAForm
•CSRFProtection
•FormModelBinding
•Labels
•Text,TextArea,Password&HiddenFields
•CheckboxesandRadioButtons
•FileInput
•NumberInput
•Drop-DownLists
•Buttons
•CustomMacros
•GeneratingURLs
Opening A Form
Opening A Form
..{{ Form ::open (array ('url' =>'foo/bar' )) }}
//
{{ Form ::close () }}
Bydefault,a POSTmethodwillbeassumed;however,youarefreetospecifyanothermethod:
..echo Form ::open (array ('url' =>'foo/bar' ,'method' =>'put' ))
Note:Since HTML forms only support POSTand GET,PUTand DELETEmethods will be
spoofedbyautomaticallyaddinga _methodhiddenfieldtoyourform.
Youmayalsoopenformsthatpointtonamedroutesorcontrolleractions:
Forms&HTML 139
..echo Form ::open (array ('route' =>'route.name' ))
echo Form ::open (array ('action' =>'Controller@method' ))
Youmaypassinrouteparametersaswell:
..echo Form ::open (array ('route' =>array ('route.name' ,$user ->id)))
echo Form ::open (array ('action' =>array ('Controller@method' ,$user ->id)))
Ifyourformisgoingtoacceptfileuploads,adda filesoptiontoyourarray:
..echo Form ::open (array ('url' =>'foo/bar' ,'files' =>true ))
CSRF Protection
Adding The CSRF Token To A Form
Laravel provides an easy method of protecting your application from cross-site request forgeries.
First, a random token is placed in your user’s session. If you use the Form::open method with
POST,PUTorDELETEthe CSRF token will be added to your forms as a hidden field automatically.
Alternatively,ifyouwishtogeneratetheHTMLforthehiddenCSRFfield,youmayusethe token
method:
..echo Form ::token ();
Attaching The CSRF Filter To A Route
..
Forms&HTML 140
..Route ::post ('profile' ,array ('before' =>'csrf' ,function ()
{
//
}));
Form Model Binding
Opening A Model Form
Often, you will want to populate a form based on the contents of a model. To do so, use the
Form::model method:
..echo Form ::model ($user ,array ('route' =>array ('user.update' ,$user ->id)))
Now, when you generate a form element, like a text input, the model’s value matching the field’s
namewillautomaticallybesetasthefieldvalue.So,forexample,foratextinputnamed email,the
usermodel’s emailattributewouldbesetasthevalue.However,there’smore!Ifthereisanitemin
the Session flash data matching the input name, that will take precedence over the model’s value.
So,theprioritylookslikethis:
1.SessionFlashData(OldInput)
2.ExplicitlyPassedValue
3.ModelAttributeData
Thisallowsyoutoquicklybuildformsthatnotonlybindtomodelvalues,buteasilyre-populateif
thereisavalidationerrorontheserver!
Note:Whenusing Form::model ,besuretocloseyourformwith Form::close !
Labels
Generating A Label Element
Forms&HTML 141
..echo Form ::label ('email' ,'E-Mail Address' );
Specifying Extra HTML Attributes
..echo Form ::label ('email' ,'E-Mail Address' ,array ('class' =>'awesome' ));
Note:After creating a label, any form element you create with a name matching the
labelnamewillautomaticallyreceiveanIDmatchingthelabelnameaswell.
Text, Text Area, Password & Hidden Fields
Generating A Text Input
..echo Form ::text ('username' );
Specifying A Default Value
..echo Form ::text ('email' ,'example@gmail.com' );
Note:Thehiddenandtextareamethodshavethesamesignatureasthe textmethod.
Generating A Password Input
..echo Form ::password ('password' );
Generating Other Inputs
Forms&HTML 142
..echo Form ::email ($name ,$value =null ,$attributes =array ());
echo Form ::file ($name ,$attributes =array ());
Checkboxes and Radio Buttons
Generating A Checkbox Or Radio Input
..echo Form ::checkbox ('name' ,'value' );
echo Form ::radio ('name' ,'value' );
Generating A Checkbox Or Radio Input That Is Checked
..echo Form ::checkbox ('name' ,'value' ,true );
echo Form ::radio ('name' ,'value' ,true );
Number
Generating A Number Input
..echo Form ::number ('name' ,'value' );
File Input
Generating A File Input
Forms&HTML 143
..echo Form ::file ('image' );
Note:Theformmusthavebeenopenedwiththe filesoptionsetto true.
Drop-Down Lists
Generating A Drop-Down List
..echo Form ::select ('size' ,array ('L' =>'Large' ,'S' =>'Small' ));
Generating A Drop-Down List With Selected Default
..echo Form ::select ('size' ,array ('L' =>'Large' ,'S' =>'Small' ),'S');
Generating A Grouped List
..echo Form ::select ('animal' ,array (
'Cats' =>array ('leopard' =>'Leopard' ),
'Dogs' =>array ('spaniel' =>'Spaniel' ),
));
Generating A Drop-Down List With A Range
..echo Form ::selectRange ('number' ,10,20);
Generating A List With Month Names
Forms&HTML 144
..echo Form ::selectMonth ('month' );
Buttons
Generating A Submit Button
..echo Form ::submit ('Click Me!' );
Note:Needtocreateabuttonelement?Trythe buttonmethod.Ithasthesamesignature
assubmit.
Custom Macros
Registering A Form Macro
It’seasytodefineyourowncustomFormclasshelperscalled“macros”.Here’showitworks.First,
simplyregisterthemacrowithagivennameandaClosure:
..Form ::macro ('myField' ,function ()
{
return '<input type="awesome">' ;
});
Nowyoucancallyourmacrousingitsname:
Calling A Custom Form Macro
..echo Form ::myField ();
Generating URLs
FormoreinformationongeneratingURL’s,checkoutthedocumentationon helpers.
Helper Functions
•Arrays
•Paths
•Strings
•URLs
•Miscellaneous
Arrays
array_add
The array_add function adds a given key / value pair to the array if the given key doesn’t already
existinthearray.
..$array =array ('foo' =>'bar' );
$array =array_add( $array ,'key' ,'value' );
array_divide
The array_divide function returns two arrays, one containing the keys, and the other containing
thevaluesoftheoriginalarray.
..$array =array ('foo' =>'bar' );
list ($keys ,$values )=array_divide( $array );
array_dot
The array_dot functionflattensamulti-dimensionalarrayintoasinglelevelarraythatuses“dot”
notationtoindicatedepth.
HelperFunctions 146
..$array =array ('foo' =>array ('bar' =>'baz' ));
$array =array_dot( $array );
// array('foo.bar' => 'baz');
array_except
The array_except methodremovesthegivenkey/valuepairsfromthearray.
..$array =array_except( $array ,array ('keys' ,'to' ,'remove' ));
array_fetch
The array_fetch methodreturnsaflattenedarraycontainingtheselectednestedelement.
..$array =array (
array ('developer' =>array ('name' =>'Taylor' )),
array ('developer' =>array ('name' =>'Dayle' )),
);
$array =array_fetch( $array ,'developer.name' );
// array('Taylor', 'Dayle');
array_first
The array_first methodreturnsthefirstelementofanarraypassingagiventruthtest.
..
HelperFunctions 147
..$array =array (100,200,300);
$value =array_first( $array ,function ($key ,$value )
{
return $value >=150;
});
Adefaultvaluemayalsobepassedasthethirdparameter:
..$value =array_first( $array ,$callback ,$default );
array_last
The array_last methodreturnsthelastelementofanarraypassingagiventruthtest.
..$array =array (350,400,500,300,200,100);
$value =array_last( $array ,function ($key ,$value )
{
return $value >350;
});
// 500
Adefaultvaluemayalsobepassedasthethirdparameter:
..$value =array_last( $array ,$callback ,$default );
array_flatten
The array_flatten methodwillflattenamulti-dimensionalarrayintoasinglelevel.
HelperFunctions 148
..$array =array ('name' =>'Joe' ,'languages' =>array ('PHP' ,'Ruby' ));
$array =array_flatten( $array );
// array('Joe', 'PHP', 'Ruby');
array_forget
The array_forget method will remove a given key / value pair from a deeply nested array using
“dot”notation.
..$array =array ('names' =>array ('joe' =>array ('programmer' )));
array_forget( $array ,'names.joe' );
array_get
The array_get methodwillretrieveagivenvaluefromadeeplynestedarrayusing“dot”notation.
..$array =array ('names' =>array ('joe' =>array ('programmer' )));
$value =array_get( $array ,'names.joe' );
$value =array_get( $array ,'names.john' ,'default' );
Note:Wantsomethinglike array_get butforobjectsinstead?Use object_get .
array_only
The array_only methodwillreturnonlythespecifiedkey/valuepairsfromthearray.
HelperFunctions 149
..$array =array ('name' =>'Joe' ,'age' =>27,'votes' =>1);
$array =array_only( $array ,array ('name' ,'votes' ));
array_pluck
The array_pluck methodwillpluckalistofthegivenkey/valuepairsfromthearray.
..$array =array (array ('name' =>'Taylor' ),array ('name' =>'Dayle' ));
$array =array_pluck( $array ,'name' );
// array('Taylor', 'Dayle');
array_pull
The array_pull methodwillreturnagivenkey/valuepairfromthearray,aswellasremoveit.
..$array =array ('name' =>'Taylor' ,'age' =>27);
$name =array_pull( $array ,'name' );
array_set
The array_set methodwillsetavaluewithinadeeplynestedarrayusing“dot”notation.
..$array =array ('names' =>array ('programmer' =>'Joe' ));
array_set( $array ,'names.editor' ,'Taylor' );
HelperFunctions 150
array_sort
The array_sort methodsortsthearraybytheresultsofthegivenClosure.
..$array =array (
array ('name' =>'Jill' ),
array ('name' =>'Barry' ),
);
$array =array_values (array_sort( $array ,function ($value )
{
return $value ['name' ];
}));
array_where
FilterthearrayusingthegivenClosure.
..$array =array (100,'200' ,300,'400' ,500);
$array =array_where( $array ,function ($key ,$value )
{
return is_string ($value );
});
// Array ( [1] => 200 [3] => 400 )
head
Returnthefirstelementinthearray.UsefulformethodchaininginPHP5.3.x.
..$first =head( $this ->returnsArray ('foo' ));
last
Returnthelastelementinthearray.Usefulformethodchaining.
HelperFunctions 151
..$last =last( $this ->returnsArray ('foo' ));
Paths
app_path
Getthefullyqualifiedpathtothe appdirectory.
..$path =app_path();
base_path
Getthefullyqualifiedpathtotherootoftheapplicationinstall.
public_path
Getthefullyqualifiedpathtothe publicdirectory.
storage_path
Getthefullyqualifiedpathtothe app/storage directory.
Strings
camel_case
Convertthegivenstringto camelCase .
..$camel =camel_case( 'foo_bar' );
// fooBar
HelperFunctions 152
class_basename
Gettheclassnameofthegivenclass,withoutanynamespacenames.
..$class =class_basename( 'Foo\Bar\Baz' );
// Baz
e
Run htmlentities overthegivenstring,withUTF-8support.
..$entities =e('<html>foo</html>' );
ends_with
Determineifthegivenhaystackendswithagivenneedle.
..$value =ends_with( 'This is my name' ,'name' );
snake_case
Convertthegivenstringto snake_case .
..$snake =snake_case( 'fooBar' );
// foo_bar
str_limit
Limitthenumberofcharactersinastring.
HelperFunctions 153
..str_limit( $value ,$limit =100,$end ='...' )
Example:
..$value =str_limit( 'The PHP framework for web artisans.' ,7);
// The PHP...
starts_with
Determineifthegivenhaystackbeginswiththegivenneedle.
..$value =starts_with( 'This is my name' ,'This' );
str_contains
Determineifthegivenhaystackcontainsthegivenneedle.
..$value =str_contains( 'This is my name' ,'my' );
str_finish
Addasingleinstanceofthegivenneedletothehaystack.Removeanyextrainstances.
..$string =str_finish( 'this/string' ,'/');
// this/string/
HelperFunctions 154
str_is
Determineifagivenstringmatchesagivenpattern.Asterisksmaybeusedtoindicatewildcards.
..$value =str_is( 'foo*' ,'foobar' );
str_plural
Convertastringtoitspluralform(Englishonly).
..$plural =str_plural( 'car' );
str_random
Generatearandomstringofthegivenlength.
..$string =str_random( 40);
str_singular
Convertastringtoitssingularform(Englishonly).
..$singular =str_singular( 'cars' );
studly_case
Convertthegivenstringto StudlyCase .
HelperFunctions 155
..$value =studly_case( 'foo_bar' );
// FooBar
trans
Translateagivenlanguageline.Aliasof Lang::get .
..$value =trans( 'validation.required' ):
trans_choice
Translateagivenlanguagelinewithinflection.Aliasof Lang::choice .
..$value =trans_choice( 'foo.bar' ,$count );
URLs
action
GenerateaURLforagivencontrolleraction.
..$url =action( 'HomeController@getIndex' ,$params );
route
GenerateaURLforagivennamedroute.
HelperFunctions 156
..$url =route( 'routeName' ,$params );
asset
GenerateaURLforanasset.
..$url =asset( 'img/photo.jpg' );
link_to
GenerateaHTMLlinktothegivenURL.
..echo link_to( 'foo/bar' ,$title ,$attributes =array (), $secure =null );
link_to_asset
GenerateaHTMLlinktothegivenasset.
..echo link_to_asset( 'foo/bar.zip' ,$title ,$attributes =array (), $secure =
null );
link_to_route
GenerateaHTMLlinktothegivenroute.
..echo link_to_route( 'route.name' ,$title ,$parameters =array (), $attributes
=array ());
HelperFunctions 157
link_to_action
GenerateaHTMLlinktothegivencontrolleraction.
..echo link_to_action( 'HomeController@getIndex' ,$title ,$parameters =
array (), $attributes =array ());
secure_asset
GenerateaHTMLlinktothegivenassetusingHTTPS.
..echo secure_asset( 'foo/bar.zip' ,$title ,$attributes =array ());
secure_url
GenerateafullyqualifiedURLtoagivenpathusingHTTPS.
..echo secure_url( 'foo/bar' ,$parameters =array ());
url
GenerateafullyqualifiedURLtothegivenpath.
..echo url( 'foo/bar' ,$parameters =array (), $secure =null );
Miscellaneous
csrf_token
GetthevalueofthecurrentCSRFtoken.
HelperFunctions 158
..$token =csrf_token();
dd
Dumpthegivenvariableandendexecutionofthescript.
..dd($value );
value
If the given value is a Closure, return the value returned by the Closure. Otherwise, return the
value.
..$value =value( function () { return 'bar' ; });
with
Returnthegivenobject.UsefulformethodchainingconstructorsinPHP5.3.x.
..$value =with( new Foo) ->doWork ();
IoC Container
•Introduction
•BasicUsage
•WhereToRegisterBindings
•AutomaticResolution
•PracticalUsage
•ServiceProviders
•ContainerEvents
Introduction
The Laravel inversion of control container is a powerful tool for managing class dependencies.
Dependencyinjectionisamethodofremovinghard-codedclassdependencies.Instead,thedepen-
dencies are injected at run-time, allowing for greater flexibility as dependency implementations
maybeswappedeasily.
Understanding the Laravel IoC container is essential to building a powerful, large application, as
wellasforcontributingtotheLaravelcoreitself.
Basic Usage
Binding A Type Into The Container
TherearetwowaystheIoCcontainercanresolvedependencies:viaClosurecallbacksorautomatic
resolution.First,we’llexploreClosurecallbacks.First,a“type”maybeboundintothecontainer:
..App::bind ('foo' ,function ($app )
{
return new FooBar;
});
Resolving A Type From The Container
IoCContainer 160
..$value =App::make ('foo' );
Whenthe App::make methodiscalled,theClosurecallbackisexecutedandtheresultisreturned.
Binding A “Shared” Type Into The Container
Sometimes,youmaywishtobindsomethingintothecontainerthatshouldonlyberesolvedonce,
andthesameinstanceshouldbereturnedonsubsequentcallsintothecontainer:
..App::singleton ('foo' ,function ()
{
return new FooBar;
});
Binding An Existing Instance Into The Container
Youmayalsobindanexistingobjectinstanceintothecontainerusingthe instance method:
..$foo =new Foo;
App::instance ('foo' ,$foo );
Where To Register Bindings
IoC bindings, like event handlers or route filters, generally fall under the title of “bootstrap code”.
In other words, they prepare your application to actually handle requests, and usually need to be
executedbeforearouteorcontrollerisactuallycalled.Likemostotherbootstrapcode,the startfiles
are always an option for registering IoC bindings. Alternatively, you could create an app/ioc.php
(filenamedoesnotmatter)fileandrequirethatfilefromyour startfile.
If your application has a very large number of IoC bindings, or you simply wish to organize your
IoCbindingsinseparatefilesbycategory,youmayregisteryourbindingsina serviceprovider .
IoCContainer 161
Automatic Resolution
Resolving A Class
The IoC container is powerful enough to resolve classes without any configuration at all in many
scenarios.Forexample:
..class FooBar {
public function __construct (Baz $baz )
{
$this ->baz =$baz ;
}
}
$fooBar =App::make ('FooBar' );
NotethateventhoughwedidnotregistertheFooBarclassinthecontainer,thecontainerwillstill
beabletoresolvetheclass,eveninjectingthe Bazdependencyautomatically!
Whenatypeisnotboundinthecontainer,itwillusePHP’sReflectionfacilitiestoinspecttheclass
andreadtheconstructor’stype-hints.Usingthisinformation,thecontainercanautomaticallybuild
aninstanceoftheclass.
Binding An Interface To An Implementation
However,insomecases,aclassmaydependonaninterfaceimplementation,nota“concretetype”.
Whenthisisthecase,the App::bind methodmustbeusedtoinformthecontainerwhichinterface
implementationtoinject:
..App::bind ('UserRepositoryInterface' ,'DbUserRepository' );
Nowconsiderthefollowingcontroller:
..
IoCContainer 162
..class UserController extends BaseController {
public function __construct (UserRepositoryInterface $users )
{
$this ->users =$users ;
}
}
Sincewehaveboundthe UserRepositoryInterface toaconcretetype,the DbUserRepository will
automaticallybeinjectedintothiscontrollerwhenitiscreated.
Practical Usage
Laravel provides several opportunities to use the IoC container to increase the flexibility and
testability of your application. One primary example is when resolving controllers. All controllers
are resolved through the IoC container, meaning you can type-hint dependencies in a controller
constructor,andtheywillautomaticallybeinjected.
Type-Hinting Controller Dependencies
..class OrderController extends BaseController {
public function __construct (OrderRepository $orders )
{
$this ->orders =$orders ;
}
public function getIndex ()
{
$all =$this ->orders ->all();
return View ::make ('orders' ,compact ('all' ));
}
}
In this example, the OrderRepository class will automatically be injected into the controller. This
means that when unit testing a “mock” OrderRepository may be bound into the container and
injectedintothecontroller,allowingforpainlessstubbingofdatabaselayerinteraction.
IoCContainer 163
Other Examples Of IoC Usage
Filters,composers , andevent handlers may also be resolved out of the IoC container. When
registeringthem,simplygivethenameoftheclassthatshouldbeused:
..Route ::filter ('foo' ,'FooFilter' );
View ::composer ('foo' ,'FooComposer' );
Event ::listen ('foo' ,'FooHandler' );
Service Providers
Service providers are a great way to group related IoC registrations in a single location. Think of
them as a way to bootstrap components in your application. Within a service provider, you might
register a custom authentication driver, register your application’s repository classes with the IoC
container,orevensetupacustomArtisancommand.
In fact, most of the core Laravel components include service providers. All of the registered
serviceprovidersforyourapplicationarelistedinthe providers arrayofthe app/config/app.php
configurationfile.
Defining A Service Provider
To create a service provider, simply extend the Illuminate\Support\ServiceProvider class and
definea register method:
..use Illuminate\Support\ServiceProvider;
class FooServiceProvider extends ServiceProvider {
public function register ()
{
$this ->app->bind ('foo' ,function ()
{
return new Foo;
});
}
IoCContainer 164
..}
Note that in the register method, the application IoC container is available to you via the
$this->app property. Once you have created a provider and are ready to register it with your
application,simplyaddittothe providers arrayinyour appconfigurationfile.
Registering A Service Provider At Run-Time
Youmayalsoregisteraserviceprovideratrun-timeusingthe App::register method:
..App::register ('FooServiceProvider' );
Container Events
Registering A Resolving Listener
The container fires an event each time it resolves an object. You may listen to this event using the
resolving method:
..App::resolvingAny (function ($object )
{
//
});
App::resolving ('foo' ,function ($foo )
{
//
});
Notethattheobjectthatwasresolvedwillbepassedtothecallback.
Localization
•Introduction
•LanguageFiles
•BasicUsage
•Pluralization
•ValidationLocalization
•OverridingPackageLanguageFiles
Introduction
TheLaravel Langclassprovidesaconvenientwayofretrievingstringsinvariouslanguages,allowing
youtoeasilysupportmultiplelanguageswithinyourapplication.
Language Files
Languagestringsarestoredinfileswithinthe app/langdirectory.Withinthisdirectorythereshould
beasubdirectoryforeachlanguagesupportedbytheapplication.
../app
/lang
/en
messages .php
/es
messages .php
Example Language File
Languagefilessimplyreturnanarrayofkeyedstrings.Forexample:
..
Localization 166
..<?php
return array (
'welcome' =>'Welcome to our application'
);
Changing The Default Language At Runtime
The default language for your application is stored in the app/config/app.php configuration file.
Youmaychangetheactivelanguageatanytimeusingthe App::setLocale method:
..App::setLocale ('es' );
Setting The Fallback Language
Youmayalsoconfigurea“fallbacklanguage”,whichwillbeusedwhentheactivelanguagedoesnot
containagivenlanguageline.Likethedefaultlanguage,thefallbacklanguageisalsoconfiguredin
theapp/config/app.php configurationfile:
..'fallback_locale' =>'en' ,
Basic Usage
Retrieving Lines From A Language File
..echo Lang ::get('messages.welcome' );
The first segment of the string passed to the getmethod is the name of the language file, and the
secondisthenameofthelinethatshouldberetrieved.
Note:Ifalanguagelinedoesnotexist,thekeywillbereturnedbythe getmethod.
Localization 167
Youmayalsousethe transhelperfunction,whichisanaliasforthe Lang::get method.
..echo trans( 'messages.welcome' );
Making Replacements In Lines
Youmayalsodefineplace-holdersinyourlanguagelines:
..'welcome' =>'Welcome, :name' ,
Then,passasecondargumentofreplacementstothe Lang::get method:
..echo Lang ::get('messages.welcome' ,array ('name' =>'Dayle' ));
Determine If A Language File Contains A Line
..if(Lang ::has('messages.welcome' ))
{
//
}
Pluralization
Pluralization is a complex problem, as different languages have a variety of complex rules for
pluralization. You may easily manage this in your language files. By using a “pipe” character, you
mayseparatethesingularandpluralformsofastring:
..'apples' =>'There is one apple|There are many apples' ,
Youmaythenusethe Lang::choice methodtoretrievetheline:
Localization 168
..echo Lang ::choice ('messages.apples' ,10);
Youmayalsosupplyalocaleargumenttospecifythelanguage.Forexample,ifyouwanttousethe
Russian(ru)language:
..echo Lang ::choice ('товар|товара|товаров' ,$count ,array (),
'ru' );
SincetheLaraveltranslatorispoweredbytheSymfonyTranslationcomponent,youmayalsocreate
moreexplicitpluralizationruleseasily:
..'apples' =>'{0} There are none|[1,19] There are some|[20,Inf] There are
many' ,
Validation
Forlocalizationforvalidationerrorsandmessages,takealookatthe.
Overriding Package Language Files
Many packages ship with their own language lines. Instead of hacking the package’s core files to
tweaktheselines,youmayoverridethembyplacingfilesinthe app/lang/packages/{locale}/{package}
directory.So,forexample,ifyouneedtooverridetheEnglishlanguagelinesin messages.php fora
packagenamed skyrim/hearthfire ,youwouldplacealanguagefileat: app/lang/packages/en/hearthfire/messages.php .
Inthisfileyouwoulddefineonlythelanguagelinesyouwishtooverride.Anylanguagelinesyou
don’toverridewillstillbeloadedfromthepackage’slanguagefiles.
Mail
•Configuration
•BasicUsage
•EmbeddingInlineAttachments
•QueueingMail
•Mail&LocalDevelopment
Configuration
Laravelprovidesaclean,simpleAPIoverthepopular SwiftMailer ⁹⁶library.Themailconfiguration
file is app/config/mail.php , and contains options allowing you to change your SMTP host, port,
and credentials, as well as set a global fromaddress for all messages delivered by the library. You
may use any SMTP server you wish. If you wish to use the PHP mailfunction to send mail, you
maychangethe drivertomailintheconfigurationfile.A sendmail driverisalsoavailable.
API Drivers
LaravelalsoincludesdriversfortheMailgunandMandrillHTTPAPIs.TheseAPIsareoftensimpler
andquickerthantheSMTPservers.BothofthesedriversrequirethattheGuzzle4HTTPlibrarybe
installedintoyourapplication.YoucanaddGuzzle4toyourprojectbyaddingthefollowinglineto
your composer.json file:
.."guzzlehttp/guzzle ":"~4.0 "
Mailgun Driver
To use the Mailgun driver, set the driveroption to mailgunin your app/config/mail.php
configuration file. Next, create an app/config/services.php configuration file if one does not
alreadyexistforyourproject.Verifythatitcontainsthefollowingoptions:
⁹⁶http://swiftmailer.org
Mail 170
..'mailgun' =>array (
'domain' =>'your-mailgun-domain' ,
'secret' =>'your-mailgun-key' ,
),
Mandrill Driver
To use the Mandrill driver, set the driveroption to mandrill in your app/config/mail.php
configuration file. Next, create an app/config/services.php configuration file if one does not
alreadyexistforyourproject.Verifythatitcontainsthefollowingoptions:
..'mandrill' =>array (
'secret' =>'your-mandrill-key' ,
),
Log Driver
If the driveroption of your app/config/mail.php configuration file is set to log, all e-mails will
be written to your log files, and will not actually be sent to any of the recipients. This is primarily
usefulforquick,localdebuggingandcontentverification.
Basic Usage
The Mail::send methodmaybeusedtosendane-mailmessage:
..Mail ::send ('emails.welcome' ,array ('key' =>'value' ),function ($message )
{
$message ->to('foo@example.com' ,'John Smith' )->subject ('Welcome!' );
});
The first argument passed to the sendmethod is the name of the view that should be used as the
e-mailbody.Thesecondisthedatatobepassedtotheview,oftenasanassociativearraywherethe
dataitemsareavailabletotheviewby $key.ThethirdisaClosureallowingyoutospecifyvarious
optionsonthee-mailmessage.
Mail 171
Note:A$message variable is always passed to e-mail views, and allows the inline
embeddingofattachments. So,itisbesttoavoidpassinga messagevariableinyourview
payload.
YoumayalsospecifyaplaintextviewtouseinadditiontoanHTMLview:
..Mail ::send (array ('html.view' ,'text.view' ),$data ,$callback );
Or,youmayspecifyonlyonetypeofviewusingthe htmlortextkeys:
..Mail ::send (array ('text' =>'view' ),$data ,$callback );
You may specify other options on the e-mail message such as any carbon copies or attachments as
well:
..Mail ::send ('emails.welcome' ,$data ,function ($message )
{
$message ->from ('us@example.com' ,'Laravel' );
$message ->to('foo@example.com' )->cc('bar@example.com' );
$message ->attach ($pathToFile );
});
Whenattachingfilestoamessage,youmayalsospecifyaMIMEtypeand/oradisplayname:
..$message ->attach ($pathToFile ,array ('as' =>$display ,'mime' =>$mime ));
Note:The message instance passed to a Mail::send Closure extends the SwiftMailer
message class, allowing you to call any method on that class to build your e-mail
messages.
Mail 172
Embedding Inline Attachments
Embedding inline images into your e-mails is typically cumbersome; however, Laravel provides a
convenientwaytoattachimagestoyoure-mailsandretrievingtheappropriateCID.
Embedding An Image In An E-Mail View
..<body >
Here is an image :
<img src ="<?php echo $message->embed ($pathToFile ); ?> ">
</body >
Embedding Raw Data In An E-Mail View
..<body >
Here is an image from raw data :
<img src ="<?php echo $message->embedData ($data ,$name ); ?> ">
</body >
Notethatthe $message variableisalwayspassedtoe-mailviewsbythe Mailclass.
Queueing Mail
Queueing A Mail Message
Sincesendinge-mailmessagescandrasticallylengthentheresponsetimeofyourapplication,many
developerschoosetoqueuee-mailmessagesforbackgroundsending.Laravelmakesthiseasyusing
its built-in unified queue API . To queue a mail message, simply use the queuemethod on the Mail
class:
..Mail ::queue ('emails.welcome' ,$data ,function ($message )
{
$message ->to('foo@example.com' ,'John Smith' )->subject ('Welcome!' );
Mail 173
..});
You may also specify the number of seconds you wish to delay the sending of the mail message
usingthe latermethod:
..Mail ::later (5,'emails.welcome' ,$data ,function ($message )
{
$message ->to('foo@example.com' ,'John Smith' )->subject ('Welcome!' );
});
Ifyouwishtospecifyaspecificqueueor“tube”onwhichtopushthemessage,youmaydosousing
thequeueOnandlaterOnmethods:
..Mail ::queueOn ('queue-name' ,'emails.welcome' ,$data ,function ($message )
{
$message ->to('foo@example.com' ,'John Smith' )->subject ('Welcome!' );
});
Mail & Local Development
When developing an application that sends e-mail, it’s usually desirable to disable the sending
of messages from your local or development environment. To do so, you may either call the
Mail::pretend method,orsetthe pretendoptioninthe app/config/mail.php configurationfileto
true. When the mailer is in pretendmode, messages will be written to your application’s log files
insteadofbeingsenttotherecipient.
Enabling Pretend Mail Mode
..Mail ::pretend ();
Package Development
•Introduction
•CreatingAPackage
•PackageStructure
•ServiceProviders
•DeferredProviders
•PackageConventions
•DevelopmentWorkflow
•PackageRouting
•PackageConfiguration
•PackageViews
•PackageMigrations
•PackageAssets
•PublishingPackages
Introduction
PackagesaretheprimarywayofaddingfunctionalitytoLaravel.Packagesmightbeanythingfrom
agreatwaytoworkwithdateslike Carbon⁹⁷,oranentireBDDtestingframeworklike Behat⁹⁸.
Ofcourse,therearedifferenttypesofpackages.Somepackagesarestand-alone,meaningtheywork
withanyframework,notjustLaravel.BothCarbonandBehatareexamplesofstand-alonepackages.
AnyofthesepackagesmaybeusedwithLaravelbysimplyrequestingtheminyour composer.json
file.
On the other hand, other packages are specifically intended for use with Laravel. In previous
versions of Laravel, these types of packages were called “bundles”. These packages may have
routes,controllers,views,configuration,andmigrationsspecificallyintendedtoenhanceaLaravel
application. As no special process is needed to develop stand-alone packages, this guide primarily
coversthedevelopmentofthosethatareLaravelspecific.
All Laravel packages are distributed via Packagist⁹⁹andComposer ¹⁰⁰, so learning about these
wonderfulPHPpackagedistributiontoolsisessential.
⁹⁷https://github.com/briannesbitt/Carbon
⁹⁸https://github.com/Behat/Behat
⁹⁹http://packagist.org
¹⁰⁰http://getcomposer.org
PackageDevelopment 175
Creating A Package
The easiest way to create a new package for use with Laravel is the workbench Artisan command.
First,youwillneedtosetafewoptionsinthe app/config/workbench.php file.Inthatfile,youwill
find a nameand emailoption. These values will be used to generate a composer.json file for your
newpackage.Onceyouhavesuppliedthosevalues,youarereadytobuildaworkbenchpackage!
Issuing The Workbench Artisan Command
..php artisan workbench vendor /package --resources
Thevendornameisawaytodistinguishyourpackagefromotherpackagesofthesamenamefrom
differentauthors.Forexample,ifI(TaylorOtwell)weretocreateanewpackagenamed“Zapper”,the
vendornamecouldbe Taylorwhilethepackagenamewouldbe Zapper.Bydefault,theworkbench
willcreateframeworkagnosticpackages;however,the resources commandtellstheworkbenchto
generatethepackagewithLaravelspecificdirectoriessuchas migrations ,views,config,etc.
Once the workbench command has been executed, your package will be available within the
workbench directory of your Laravel installation. Next, you should register the ServiceProvider
that was created for your package. You may register the provider by adding it to the providers
array in the app/config/app.php file. This will instruct Laravel to load your package when your
applicationstarts.Serviceprovidersusea [Package]ServiceProvider namingconvention.So,using
theexampleabove,youwouldadd Taylor\Zapper\ZapperServiceProvider tothe providers array.
Once the provider has been registered, you are ready to start developing your package! However,
beforedivingin,youmaywishtoreviewthesectionsbelowtogetmorefamiliarwiththepackage
structureanddevelopmentworkflow.
Note:If your service provider cannot be found, run the php artisan dump-autoload
commandfromyourapplication’srootdirectory
Package Structure
When using the workbench command, your package will be setup with conventions that allow the
packagetointegratewellwithotherpartsoftheLaravelframework:
Basic Package Directory Structure
PackageDevelopment 176
../src
/Vendor
/Package
PackageServiceProvider .php
/config
/lang
/migrations
/views
/tests
/public
Let’s explore this structure further. The src/Vendor/Package directory is the home of all of
your package’s classes, including the ServiceProvider . The config,lang,migrations , and views
directories,asyoumightguess,containthecorrespondingresourcesforyourpackage.Packagesmay
haveanyoftheseresources,justlike“regular”applications.
Service Providers
Service providers are simply bootstrap classes for packages. By default, they contain two methods:
bootand register. Within these methods you may do anything you like: include a routes file,
registerbindingsintheIoCcontainer,attachtoevents,oranythingelseyouwishtodo.
The registermethodiscalledimmediatelywhentheserviceproviderisregistered,whilethe boot
commandisonlycalledrightbeforearequestisrouted.So,ifactionsinyourserviceproviderrelyon
anotherserviceprovideralreadybeingregistered,oryouareoverridingservicesboundbyanother
provider,youshouldusethe bootmethod.
Whencreatingapackageusingthe workbench ,the bootcommandwillalreadycontainoneaction:
..$this ->package ('vendor/package' );
This method allows Laravel to know how to properly load the views, configuration, and other
resources for your application. In general, there should be no need for you to change this line of
code,asitwillsetupthepackageusingtheworkbenchconventions.
By default, after registering a package, its resources will be available using the “package” half of
vendor/package . However, you may pass a second argument into the packagemethod to override
thisbehavior.Forexample:
PackageDevelopment 177
..// Passing custom namespace to package method
$this ->package ('vendor/package' ,'custom-namespace' );
// Package resources now accessed via custom-namespace
$view =View ::make ('custom-namespace::foo' );
Thereisnota“defaultlocation”forserviceproviderclasses.Youmayputthemanywhereyoulike,
perhaps organizing them in a Providers namespace within your appdirectory. The file may be
placedanywhere,aslongasComposer’s auto-loadingfacilities ¹⁰¹knowhowtoloadtheclass.
If you have changed the location of your package’s resources, such as configuration files or views,
you should pass a third argument to the packagemethod which specifies the location of your
resources:
..$this ->package ('vendor/package' ,null ,'/path/to/resources' );
Deferred Providers
If you are writing a service provider that does not register any resources such as configuration
or views, you may choose to make your provider “deferred”. A deferred service provider is only
loadedandregisteredwhenoneoftheservicesitprovidesisactuallyneededbytheapplicationIoC
container. If none of the provider’s services are needed for a given request cycle, the provider is
neverloaded.
Todefertheexecutionofyourserviceprovider,setthe deferpropertyontheproviderto true:
..protected $defer =true ;
Nextyoushouldoverridethe providesmethodfromthebase Illuminate\Support\ServiceProvider
class and return an array of all of the bindings that your provider adds to the IoC container. For
example, if your provider registers package.service and package.another-service in the IoC
container,your provides methodshouldlooklikethis:
¹⁰¹http://getcomposer.org/doc/01-basic-usage.md#autoloading
PackageDevelopment 178
..public function provides ()
{
return array ('package.service' ,'package.another-service' );
}
Package Conventions
When utilizing resources from a package, such as configuration items or views, a double-colon
syntaxwillgenerallybeused:
Loading A View From A Package
..return View ::make ('package::view.name' );
Retrieving A Package Configuration Item
..return Config ::get('package::group.option' );
Note:Ifyourpackagecontainsmigrations,considerprefixingthemigrationnamewith
yourpackagenametoavoidpotentialclassnameconflictswithotherpackages.
Development Workflow
When developing a package, it is useful to be able to develop within the context of an application,
allowingyoutoeasilyviewandexperimentwithyourtemplates,etc.So,togetstarted,installafresh
copyoftheLaravelframework,thenusethe workbench commandtocreateyourpackagestructure.
Afterthe workbench commandhascreatedyourpackage.Youmay git initfromthe workbench/[vendor]/[package]
directory and git push your package straight from the workbench! This will allow you to
convenientlydevelopthepackageinanapplicationcontextwithoutbeingboggeddownbyconstant
composer update commands.
PackageDevelopment 179
Sinceyourpackagesareinthe workbench directory,youmaybewonderinghowComposerknows
toautoloadyourpackage’sfiles.Whenthe workbench directoryexists,Laravelwillintelligentlyscan
itforpackages,loadingtheirComposerautoloadfileswhentheapplicationstarts!
Ifyouneedtoregenerateyourpackage’sautoloadfiles,youmayusethe php artisan dump-autoload
command. This command will regenerate the autoload files for your root project, as well as any
workbenchesyouhavecreated.
Running The Artisan Autoload Command
..php artisan dump -autoload
Package Routing
In prior versions of Laravel, a handlesclause was used to specify which URIs a package could
respondto.However,inLaravel4,apackagemayrespondtoanyURI.Toloadaroutesfileforyour
package,simply includeitfromwithinyourserviceprovider’s bootmethod.
Including A Routes File From A Service Provider
..public function boot ()
{
$this ->package ('vendor/package' );
include __DIR__ .'/../../routes.php' ;
}
Note:Ifyourpackageisusingcontrollers,youwillneedtomakesuretheyareproperly
configuredinyour composer.json file’sauto-loadsection.
Package Configuration
Accessing Package Configuration Files
Some packages may require configuration files. These files should be defined in the same way
as typical application configuration files. And, when using the default $this->package method
of registering resources in your service provider, may be accessed using the usual “double-colon”
syntax:
PackageDevelopment 180
..Config ::get('package::file.option' );
Accessing Single File Package Configuration
However, if your package contains a single configuration file, you may simply name the file
config.php . When this is done, you may access the options directly, without specifying the file
name:
..Config ::get('package::option' );
Registering A Resource Namespace Manually
Sometimes, you may wish to register package resources such as views outside of the typical
$this->package method. Typically, this would only be done if the resources were not in a
conventional location. To register the resources manually, you may use the addNamespace method
ofthe View,Lang,and Configclasses:
..View ::addNamespace ('package' , __DIR__ .'/path/to/views' );
Oncethenamespacehasbeenregistered,youmayusethenamespacenameandthe“doublecolon”
syntaxtoaccesstheresources:
..return View ::make ('package::view.name' );
Themethodsignaturefor addNamespace isidenticalonthe View,Lang,and Configclasses.
Cascading Configuration Files
When other developers install your package, they may wish to override some of the configuration
options. However, if they change the values in your package source code, they will be overwritten
thenexttimeComposerupdatesthepackage.Instead,the config:publish artisancommandshould
beused:
PackageDevelopment 181
..php artisan config :publish vendor /package
When this command is executed, the configuration files for your application will be copied to
app/config/packages/vendor/package wheretheycanbesafelymodifiedbythedeveloper!
Note:The developer may also create environment specific configuration files for your
packagebyplacingthemin app/config/packages/vendor/package/environment .
Package Views
If you are using a package in your application, you may occasionally wish to customize the
package’s views. You can easily export the package views to your own app/views directory using
theview:publish Artisancommand:
..php artisan view :publish vendor /package
This command will move the package’s views into the app/views/packages directory. If this
directorydoesn’talreadyexist,itwillbecreatedwhenyourunthecommand.Oncetheviewshave
been published, you may tweak them to your liking! The exported views will automatically take
precedenceoverthepackage’sownviewfiles.
Package Migrations
Creating Migrations For Workbench Packages
You may easily create and run migrations for any of your packages. To create a migration for a
packageintheworkbench,usethe --benchoption:
..php artisan migrate :make create_users_table --bench ="vendor/package "
Running Migrations For Workbench Packages
PackageDevelopment 182
..php artisan migrate --bench ="vendor/package "
Running Migrations For An Installed Package
TorunmigrationsforafinishedpackagethatwasinstalledviaComposerintothe vendordirectory,
youmayusethe --package directive:
..php artisan migrate --package ="vendor/package "
Package Assets
Moving Package Assets To Public
Some packages may have assets such as JavaScript, CSS, and images. However, we are unable to
linktoassetsinthe vendororworkbench directories,soweneedawaytomovetheseassetsintothe
publicdirectoryofourapplication.The asset:publish commandwilltakecareofthisforyou:
..php artisan asset :publish
php artisan asset :publish vendor /package
Ifthepackageisstillinthe workbench ,usethe --benchdirective:
..php artisan asset :publish --bench ="vendor/package "
This command will move the assets into the public/packages directory according to the vendor
and package name. So, a package named userscape/kudos would have its assets moved to
public/packages/userscape/kudos . Using this asset publishing convention allows you to safely
codeassetpathsinyourpackage’sviews.
PackageDevelopment 183
Publishing Packages
Whenyourpackageisreadytopublish,youshouldsubmitthepackagetothe Packagist¹⁰²repository.
IfthepackageisspecifictoLaravel,consideraddinga laraveltagtoyourpackage’s composer.json
file.
Also,itiscourteousandhelpfultotagyourreleasessothatdeveloperscandependonstableversions
whenrequestingyourpackageintheir composer.json files.Ifastableversionisnotready,consider
usingthe branch-alias Composerdirective.
Once your package has been published, feel free to continue developing it within the application
contextcreatedby workbench .Thisisagreatwaytocontinuetoconvenientlydevelopthepackage
evenafterithasbeenpublished.
Someorganizationschoosetohosttheirownprivaterepositoryofpackagesfortheirowndevelopers.
Ifyouareinterestedindoingthis,reviewthedocumentationforthe Satis¹⁰³projectprovidedbythe
Composerteam.
¹⁰²http://packagist.org
¹⁰³http://github.com/composer/satis
Pagination
•Configuration
•Usage
•AppendingToPaginationLinks
•ConvertingToJSON
•CustomPresenters
Configuration
In other frameworks, pagination can be very painful. Laravel makes it a breeze. There is a single
configurationoptioninthe app/config/view.php file.The pagination optionspecifieswhichview
shouldbeusedtocreatepaginationlinks.Bydefault,Laravelincludestwoviews.
The pagination::slider viewwill show an intelligent“range”of links based on the currentpage,
while the pagination::simple view will simply show “previous” and “next” buttons. Both views
are compatible with Twitter Bootstrap out of the box.
Usage
There are several ways to paginate items. The simplest is by using the paginate method on the
querybuilderoranEloquentmodel.
Paginating Database Results
..$users =DB::table ('users' )->paginate (15);
Note:Currently,paginationoperationsthatusea groupBystatementcannotbeexecuted
efficiently by Laravel. If you need to use a groupBywith a paginated result set, it is
recommendedthatyouquerythedatabasemanuallyanduse Paginator::make .
Paginating An Eloquent Model
Youmayalsopaginate Eloquentmodels:
Pagination 185
..$allUsers =User ::paginate (15);
$someUsers =User ::where ('votes' ,'>',100)->paginate (15);
Theargumentpassedtothe paginate methodisthenumberofitemsyouwishtodisplayperpage.
Onceyouhaveretrievedtheresults,youmaydisplaythemonyourview,andcreatethepagination
linksusingthe linksmethod:
..<div class ="container ">
<?php foreach ($users as$user ):?>
<?php echo $user ->name ;?>
<?php endforeach ;?>
</div>
<?php echo $users ->links (); ?>
Thisisallittakestocreateapaginationsystem!Notethatwedidnothavetoinformtheframework
ofthecurrentpage.Laravelwilldeterminethisforyouautomatically.
Ifyouwouldliketospecifyacustomviewtouseforpagination,youmaypassaviewtothe links
method:
..<?php echo $users ->links ('view.name' );?>
Youmayalsoaccessadditionalpaginationinformationviathefollowingmethods:
•getCurrentPage
•getLastPage
•getPerPage
•getTotal
•getFrom
•getTo
•count
Pagination 186
“Simple Pagination”
If you are only showing “Next” and “Previous” links in your pagination view, you have the option
of using the simplePaginate method to perform a more efficient query. This is useful for larger
datasetswhenyoudonotrequirethedisplayofexactpagenumbersonyourview:
..$someUsers =User ::where ('votes' ,'>',100)->simplePaginate (15);
Creating A Paginator Manually
Sometimesyoumaywishtocreateapaginationinstancemanually,passingitanarrayofitems.You
maydosousingthe Paginator::make method:
..$paginator =Paginator ::make ($items ,$totalItems ,$perPage );
Customizing The Paginator URI
YoumayalsocustomizetheURIusedbythepaginatorviathe setBaseUrl method:
..$users =User ::paginate ();
$users ->setBaseUrl ('custom/url' );
TheexampleabovewillcreateURLslikethefollowing:http://example.com/custom/url?page=2
Appending To Pagination Links
Youcanaddtothequerystringofpaginationlinksusingthe appendsmethodonthePaginator:
..<?php echo $users ->appends (array ('sort' =>'votes' ))->links (); ?>
ThiswillgenerateURLsthatlooksomethinglikethis:
Pagination 187
..http ://example .com/something ?page =2&sort =votes
Ifyouwishtoappenda“hashfragment”tothepaginator’sURLs,youmayusethe fragmentmethod:
..<?php echo $users ->fragment ('foo' )->links (); ?>
ThismethodcallwillgenerateURLsthatlooksomethinglikethis:
..http ://example .com/something ?page =2#foo
Converting To JSON
ThePaginator classimplementsthe Illuminate\Support\Contracts\JsonableInterface contract
andexposesthe toJsonmethod.Youmayalsoconverta Paginator instancetoJSONbyreturningit
fromaroute.TheJSON’dformoftheinstancewillincludesome“meta”informationsuchas total,
current_page ,last_page ,from,and to.Theinstance’sdatawillbeavailableviathe datakeyinthe
JSONarray.
Custom Presenters
ThedefaultpaginationpresenterisBootstrapcompatibleoutofthebox;however,youmaycustomize
thiswithapresenterofyourchoice.
Extending The Abstract Presenter
Extend the Illuminate\Pagination\Presenter class and implement its abstract methods. An
examplepresenterforZurbFoundationmightlooklikethis:
..
Pagination 188
..class ZurbPresenter extends Illuminate\Pagination\Presenter {
public function getActivePageWrapper ($text )
{
return '<li class="current"><a href="">' .$text .'</a></li>' ;
}
public function getDisabledTextWrapper ($text )
{
return '<li class="unavailable"><a href="">' .$text .'</a></li>' ;
}
public function getPageLinkWrapper ($url ,$page ,$rel =null )
{
return '<li><a href="' .$url .'">' .$page .'</a></li>' ;
}
}
Using The Custom Presenter
First, create a view in your app/views directory that will serve as your custom presenter. Then,
replace pagination option in the app/config/view.php configuration file with the new view’s
name.Finally,thefollowingcodewouldbeplacedinyourcustompresenterview:
..<ul class ="pagination ">
<?php echo with( new ZurbPresenter( $paginator ))->render (); ?>
</ul>
Queues
•Configuration
•BasicUsage
•QueueingClosures
•RunningTheQueueListener
•DaemonQueueWorker
•PushQueues
•FailedJobs
Configuration
The Laravel Queue component provides a unified API across a variety of different queue services.
Queuesallowyoutodefertheprocessingofatimeconsumingtask,suchassendingane-mail,until
alatertime,thusdrasticallyspeedingupthewebrequeststoyourapplication.
Thequeueconfigurationfileisstoredin app/config/queue.php .Inthisfileyouwillfindconnection
configurationsforeachofthequeuedriversthatareincludedwiththeframework,whichincludes
aBeanstalkd ¹⁰⁴,IronMQ¹⁰⁵,AmazonSQS ¹⁰⁶,Redis¹⁰⁷,andsynchronous(forlocaluse)driver.
Thefollowingdependenciesareneededforthelistedqueuedrivers:
•Beanstalkd: pda/pheanstalk 2.0
•AmazonSQS: aws/aws-sdk-php
•IronMQ: iron-io/iron_mq
Basic Usage
Pushing A Job Onto The Queue
Topushanewjobontothequeue,usethe Queue::push method:
¹⁰⁴http://kr.github.com/beanstalkd
¹⁰⁵http://iron.io
¹⁰⁶http://aws.amazon.com/sqs
¹⁰⁷http://redis.io
Queues 190
..Queue ::push ('SendEmail' ,array ('message' =>$message ));
Defining A Job Handler
Thefirstargumentgiventothe pushmethodisthenameoftheclassthatshouldbeusedtoprocess
thejob.Thesecondargumentisanarrayofdatathatshouldbepassedtothehandler.Ajobhandler
shouldbedefinedlikeso:
..class SendEmail {
public function fire ($job ,$data )
{
//
}
}
Notice the only method that is required is fire, which receives a Jobinstance as well as the array
ofdatathatwaspushedontothequeue.
Specifying A Custom Handler Method
If you want the job to use a method other than fire, you may specify the method when you push
thejob:
..Queue ::push ('SendEmail@send' ,array ('message' =>$message ));
Specifying The Queue / Tube For A Job
Youmayalsospecifythequeue/tubeajobshouldbesentto:
..Queue ::push ('SendEmail@send' ,array ('message' =>$message ),'emails' );
Queues 191
Passing The Same Payload To Multiple Jobs
Ifyouneedtopassthesamedatatoseveralqueuejobs,youmayusethe Queue::bulk method:
..Queue ::bulk (array ('SendEmail' ,'NotifyUser' ),$payload );
Delaying The Execution Of A Job
Sometimes you may wish to delay the execution of a queued job. For instance, you may wish to
queueajobthatsendsacustomerane-mail15minutesaftersign-up.Youcanaccomplishthisusing
theQueue::later method:
..$date =Carbon ::now()->addMinutes (15);
Queue ::later ($date ,'SendEmail@send' ,array ('message' =>$message ));
Inthisexample,we’reusingthe Carbon¹⁰⁸datelibrarytospecifythedelaywewishtoassigntothe
job.Alternatively,youmaypassthenumberofsecondsyouwishtodelayasaninteger.
Note:TheAmazonSQSservicehasadelaylimitof900seconds(15minutes).
Deleting A Processed Job
Onceyouhaveprocessedajob,itmustbedeletedfromthequeue,whichcanbedoneviathe delete
methodonthe Jobinstance:
..public function fire ($job ,$data )
{
// Process the job...
$job ->delete ();
}
¹⁰⁸https://github.com/briannesbitt/Carbon
Queues 192
Releasing A Job Back Onto The Queue
Ifyouwishtoreleaseajobbackontothequeue,youmaydosoviathe releasemethod:
..public function fire ($job ,$data )
{
// Process the job...
$job ->release ();
}
Youmayalsospecifythenumberofsecondstowaitbeforethejobisreleased:
..$job ->release (5);
Checking The Number Of Run Attempts
If an exception occurs while the job is being processed, it will automatically be released back onto
the queue. You may check the number of attempts that have been made to run the job using the
attempts method:
..if($job ->attempts ()>3)
{
//
}
Accessing The Job ID
Youmayalsoaccessthejobidentifier:
..$job ->getJobId ();
Queues 193
Queueing Closures
You may also push a Closure onto the queue. This is very convenient for quick, simple tasks that
needtobequeued:
Pushing A Closure Onto The Queue
..Queue ::push (function ($job )use ($id)
{
Account ::delete ($id);
$job ->delete ();
});
Note:Instead of making objects available to queued Closures via the usedirective,
consider passing primary keys and re-pulling the associated models from within your
queuejob.Thisoftenavoidsunexpectedserializationbehavior.
When using Iron.io push queues , you should take extra precaution queueing Closures. The end-
point that receives your queue messages should check for a token to verify that the request
is actually from Iron.io. For example, your push queue end-point should be something like:
https://yourapp.com/queue/receive?token=SecretToken . You may then check the value of the
secrettokeninyourapplicationbeforemarshallingthequeuerequest.
Running The Queue Listener
LaravelincludesanArtisantaskthatwillrunnewjobsastheyarepushedontothequeue.Youmay
runthistaskusingthe queue:listen command:
Starting The Queue Listener
..php artisan queue :listen
Youmayalsospecifywhichqueueconnectionthelistenershouldutilize:
Queues 194
..php artisan queue :listen connection
Notethatoncethistaskhasstarted,itwillcontinuetorununtilitismanuallystopped.Youmayuse
aprocessmonitorsuchas Supervisor ¹⁰⁹toensurethatthequeuelistenerdoesnotstoprunning.
You may pass a comma-delimited list of queue connections to the listencommand to set queue
priorities:
..php artisan queue :listen --queue =high,low
In this example, jobs on the high-connection will always be processed before moving onto jobs
fromthe low-connection .
Specifying The Job Timeout Parameter
Youmayalsosetthelengthoftime(inseconds)eachjobshouldbeallowedtorun:
..php artisan queue :listen --timeout =60
Specifying Queue Sleep Duration
Inaddition,youmayspecifythenumberofsecondstowaitbeforepollingfornewjobs:
..php artisan queue :listen --sleep =5
Note that the queue only “sleeps” if no jobs are on the queue. If more jobs are available, the queue
willcontinuetoworkthemwithoutsleeping.
Processing The First Job On The Queue
Toprocessonlythefirstjobonthequeue,youmayusethe queue:work command:
¹⁰⁹http://supervisord.org/
Queues 195
..php artisan queue :work
Daemon Queue Worker
Thequeue:work alsoincludesa --daemonoptionforforcingthequeueworkertocontinueprocessing
jobs without ever re-booting the framework. This results in a significant reduction of CPU usage
when compared to the queue:listen command, but at the added complexity of needing to drain
thequeuesofcurrentlyexecutingjobsduringyourdeployments.
Tostartaqueueworkerindaemonmode,usethe --daemon flag:
..php artisan queue :work connection --daemon
php artisan queue :work connection --daemon --sleep =3
php artisan queue :work connection --daemon --sleep =3--tries =3
Asyoucansee,the queue:work commandsupportsmostofthesameoptionsavailableto queue:listen .
Youmayusethe php artisan help queue:work commandtoviewalloftheavailableoptions.
Deploying With Daemon Queue Workers
Thesimplestwaytodeployanapplicationusingdaemonqueueworkersistoputtheapplicationin
maintenance mode at the beginning of your deployment. This can be done using the php artisan
downcommand.Oncetheapplicationisinmaintenancemode,Laravelwillnotacceptanynewjobs
offofthequeue,butwillcontinuetoprocessexistingjobs.
The easiest way to restart your workers is to include the following command in your deployment
script:
..php artisan queue :restart
This command will instruct all queue workers to restart after they finish processing their current
job.
Queues 196
Note:Thiscommandreliesonthecachesystemtoscheduletherestart.Bydefault,APCu
doesnotworkforCLIcommands.IfyouareusingAPCu,add apc.enable_cli=1 toyour
APCuconfiguration.
Coding For Daemon Queue Workers
Daemon queue workers do not restart the framework before processing each job. Therefore, you
shouldbecarefultofreeanyheavyresourcesbeforeyourjobfinishes.Forexample,ifyouaredoing
imagemanipulationwiththeGDlibrary,youshouldfreethememorywith imagedestroy whenyou
aredone.
Similarly,yourdatabaseconnectionmaydisconnectwhenbeingusedbylong-runningdaemon.You
mayusethe DB::reconnect methodtoensureyouhaveafreshconnection.
Push Queues
Push queues allow you to utilize the powerful Laravel 4 queue facilities without running any
daemons or background listeners. Currently, push queues are only supported by the Iron.io¹¹⁰
driver. Before getting started, create an Iron.io account, and add your Iron credentials to the
app/config/queue.php configurationfile.
Registering A Push Queue Subscriber
Next, you may use the queue:subscribe Artisan command to register a URL end-point that will
receivenewlypushedqueuejobs:
..php artisan queue :subscribe queue_name http ://foo.com/queue /receive
Now, when you login to your Iron dashboard, you will see your new push queue, as well as the
subscribed URL. You may subscribe as many URLs as you wish to a given queue. Next, create a
routeforyour queue/receive end-pointandreturntheresponsefromthe Queue::marshal method:
..Route ::post ('queue/receive' ,function ()
{
return Queue ::marshal ();
});
¹¹⁰http://iron.io
Queues 197
..
The marshalmethodwilltakecareoffiringthecorrectjobhandlerclass.Tofirejobsontothepush
queue,justusethesame Queue::push methodusedforconventionalqueues.
Failed Jobs
Since things don’t always go as planned, sometimes your queued jobs will fail. Don’t worry, it
happens to the best of us! Laravel includes a convenient way to specify the maximum number
of times a job should be attempted. After a job has exceeded this amount of attempts, it will
be inserted into a failed_jobs table. The failed jobs table name can be configured via the
app/config/queue.php configurationfile.
Tocreateamigrationforthe failed_jobs table,youmayusethe queue:failed-table command:
..php artisan queue :failed -table
Youcanspecifythemaximumnumberoftimesajobshouldbeattemptedusingthe --triesswitch
onthe queue:listen command:
..php artisan queue :listen connection -name --tries =3
If you would like to register an event that will be called when a queue job fails, you may use
theQueue::failing method. This event is a great opportunity to notify your team via e-mail or
HipChat¹¹¹.
..Queue ::failing (function ($connection ,$job ,$data )
{
//
});
Toviewallofyourfailedjobs,youmayusethe queue:failed Artisancommand:
¹¹¹https://www.hipchat.com
Queues 198
..php artisan queue :failed
Thequeue:failed commandwilllistthejobID,connection,queue,andfailuretime.ThejobIDmay
be used to retry the failed job. For instance, to retry a failed job that has an ID of 5, the following
commandshouldbeissued:
..php artisan queue :retry 5
Ifyouwouldliketodeleteafailedjob,youmayusethe queue:forget command:
..php artisan queue :forget 5
Todeleteallofyourfailedjobs,youmayusethe queue:flush command:
..php artisan queue :flush
Security
•Configuration
•StoringPasswords
•AuthenticatingUsers
•ManuallyLoggingInUsers
•ProtectingRoutes
•HTTPBasicAuthentication
•PasswordReminders&Reset
•Encryption
•AuthenticationDrivers
Configuration
Laravelaimstomakeimplementingauthenticationverysimple.Infact,almosteverythingisconfig-
uredforyououtofthebox.Theauthenticationconfigurationfileislocatedat app/config/auth.php ,
which contains several well documented options for tweaking the behavior of the authentication
facilities.
Bydefault,Laravelincludesa Usermodelinyour app/models directorywhichmaybeusedwiththe
defaultEloquentauthenticationdriver.PleaserememberwhenbuildingtheSchemaforthisModel
toensurethatthepasswordfieldisaminimumof60characters.
If your application is not using Eloquent, you may use the database authentication driver which
usestheLaravelquerybuilder.
Note:Before getting started, make sure that your users(or equivalent) table contains a
nullable, string remember_token column of 100 characters. This column will be used to
storeatokenfor“rememberme”sessionsbeingmaintainedbyyourapplication.Thiscan
bedonebyusing $table->rememberToken(); inamigration.
Storing Passwords
TheLaravel HashclassprovidessecureBcrypthashing:
Hashing A Password Using Bcrypt
Security 200
..$password =Hash ::make ('secret' );
Verifying A Password Against A Hash
..if(Hash ::check ('secret' ,$hashedPassword ))
{
// The passwords match...
}
Checking If A Password Needs To Be Rehashed
..if(Hash ::needsRehash ($hashed ))
{
$hashed =Hash ::make ('secret' );
}
Authenticating Users
Tologauserintoyourapplication,youmayusethe Auth::attempt method.
..if(Auth ::attempt (array ('email' =>$email ,'password' =>$password )))
{
return Redirect ::intended ('dashboard' );
}
Takenotethat emailisnotarequiredoption,itismerelyusedforexample.Youshouldusewhatever
columnnamecorrespondstoa“username”inyourdatabase.The Redirect::intended functionwill
redirect the user to the URL they were trying to access before being caught by the authentication
filter.AfallbackURImaybegiventothismethodincasetheintendeddestinationisnotavailable.
When the attemptmethod is called, the auth.attempt eventwill be fired. If the authentication
attemptissuccessfulandtheuserisloggedin,the auth.login eventwillbefiredaswell.
Security 201
Determining If A User Is Authenticated
Todetermineiftheuserisalreadyloggedintoyourapplication,youmayusethe checkmethod:
..if(Auth ::check ())
{
// The user is logged in...
}
Authenticating A User And “Remembering” Them
If you would like to provide “remember me” functionality in your application, you may pass true
asthesecondargumenttothe attemptmethod,whichwillkeeptheuserauthenticatedindefinitely
(oruntiltheymanuallylogout).Ofcourse,your userstablemustincludethestring remember_token
column,whichwillbeusedtostorethe“rememberme”token.
..if(Auth ::attempt (array ('email' =>$email ,'password' =>$password ),true ))
{
// The user is being remembered...
}
Note:Ifthe attemptmethodreturns true,theuserisconsideredloggedintotheapplication.
Determining If User Authed Via Remember
Ifyouare“remembering”userlogins,youmayusethe viaRemember methodtodetermineiftheuser
wasauthenticatedusingthe“rememberme”cookie:
..if(Auth ::viaRemember ())
{
//
}
Authenticating A User With Conditions
Youalsomayaddextraconditionstotheauthenticatingquery:
Security 202
..if(Auth ::attempt (array ('email' =>$email ,'password' =>$password ,'active'
=>1)))
{
// The user is active, not suspended, and exists.
}
Note:Foraddedprotectionagainstsessionfixation,theuser’ssessionIDwillautomat-
icallyberegeneratedafterauthenticating.
Accessing The Logged In User
Onceauserisauthenticated,youmayaccesstheUsermodel/record:
..$email =Auth ::user ()->email ;
Toretrievetheauthenticateduser’sID,youmayusethe idmethod:
..$id =Auth ::id();
TosimplylogauserintotheapplicationbytheirID,usethe loginUsingId method:
..Auth ::loginUsingId (1);
Validating User Credentials Without Login
Thevalidatemethodallowsyoutovalidateauser’scredentialswithoutactuallyloggingtheminto
theapplication:
..
Security 203
..if(Auth ::validate ($credentials ))
{
//
}
Logging A User In For A Single Request
Youmayalsousethe oncemethodtologauserintotheapplicationforasinglerequest.Nosessions
orcookieswillbeutilized.
..if(Auth ::once ($credentials ))
{
//
}
Logging A User Out Of The Application
..Auth ::logout ();
Manually Logging In Users
If you need to log an existing user instance into your application, you may simply call the login
methodwiththeinstance:
..$user =User ::find (1);
Auth ::login ($user );
Thisisequivalenttologginginauserviacredentialsusingthe attemptmethod.
Security 204
Protecting Routes
Routefiltersmaybeusedtoallowonlyauthenticateduserstoaccessagivenroute.Laravelprovides
theauthfilterbydefault,anditisdefinedin app/filters.php .
Protecting A Route
..Route ::get('profile' ,array ('before' =>'auth' ,function ()
{
// Only authenticated users may enter...
}));
CSRF Protection
Laravelprovidesaneasymethodofprotectingyourapplicationfromcross-siterequestforgeries.
Inserting CSRF Token Into Form
..<input type ="hidden "name ="_token "value ="<?php echo csrf_token(); ?> ">
Validate The Submitted CSRF Token
..Route ::post ('register' ,array ('before' =>'csrf' ,function ()
{
return 'You gave a valid CSRF token!' ;
}));
HTTP Basic Authentication
HTTPBasicAuthenticationprovidesaquickwaytoauthenticateusersofyourapplicationwithout
settingupadedicated“login”page.Togetstarted,attachthe auth.basic filtertoyourroute:
Protecting A Route With HTTP Basic
Security 205
..Route ::get('profile' ,array ('before' =>'auth.basic' ,function ()
{
// Only authenticated users may enter...
}));
By default, the basicfilter will use the emailcolumn on the user record when authenticating. If
youwishtouseanothercolumnyoumaypassthecolumnnameasthefirstparametertothe basic
methodinyour app/filters.php file:
..Route ::filter ('auth.basic' ,function ()
{
return Auth ::basic ('username' );
});
Setting Up A Stateless HTTP Basic Filter
YoumayalsouseHTTPBasicAuthenticationwithoutsettingauseridentifiercookieinthesession,
whichisparticularlyusefulforAPIauthentication.Todoso,defineafilterthatreturnsthe onceBasic
method:
..Route ::filter ('basic.once' ,function ()
{
return Auth ::onceBasic ();
});
If you are using PHP FastCGI, HTTP Basic authentication will not work correctly by default. The
followinglinesshouldbeaddedtoyour .htaccess file:
..RewriteCond %{HTTP :Authorization} ^(.+)$
RewriteRule .*-[E=HTTP_AUTHORIZATION :%{HTTP :Authorization}]
Security 206
Password Reminders & Reset
Model & Table
Most web applications provide a way for users to reset their forgotten passwords. Rather than
forcing you to re-implement this on each application, Laravel provides convenient methods for
sendingpasswordremindersandperformingpasswordresets.Togetstarted,verifythatyour User
model implements the Illuminate\Auth\Reminders\RemindableInterface contract. Of course,
theUsermodel included with the framework already implements this interface, and uses the
Illuminate\Auth\Reminders\RemindableTrait to include the methods needed to implement the
interface.
Implementing The RemindableInterface
..use Illuminate\Auth\Reminders\RemindableTrait;
use Illuminate\Auth\Reminders\RemindableInterface;
class User extends Eloquent implements RemindableInterface {
use RemindableTrait;
}
Generating The Reminder Table Migration
Next, a table must be created to store the password reset tokens. To generate a migration for this
table,simplyexecutethe auth:reminders-table Artisancommand:
..php artisan auth :reminders -table
php artisan migrate
Password Reminder Controller
Now we’re ready to generate the password reminder controller. To automatically generate a
controller, you may use the auth:reminders-controller Artisan command, which will create a
RemindersController.php fileinyour app/controllers directory.
Security 207
..php artisan auth :reminders -controller
Thegeneratedcontrollerwillalreadyhavea getRemind methodthathandlesshowingyourpassword
reminderform.Allyouneedtodoiscreatea password.remind view.Thisviewshouldhaveabasic
formwithan emailfield.TheformshouldPOSTtothe RemindersController@postRemind action.
Asimpleformonthe password.remind viewmightlooklikethis:
..<form action ="{{action('RemindersController@postRemind') }} "
method ="POST ">
<input type ="email "name ="email ">
<input type ="submit "value ="Send Reminder ">
</form >
In addition to getRemind , the generated controller will already have a postRemind method that
handlessendingthepasswordremindere-mailstoyourusers.Thismethodexpectsthe emailfield
to be present in the POSTvariables. If the reminder e-mail is successfully sent to the user, a status
messagewillbeflashedtothesession.Ifthereminderfails,an errormessagewillbeflashedinstead.
Withinthe postRemind controllermethodyoumaymodifythemessageinstancebeforeitissentto
theuser:
..Password ::remind (Input ::only ('email' ),function ($message )
{
$message ->subject ('Password Reminder' );
});
Youruserwillreceiveane-mailwithalinkthatpointstothe getResetmethodofthecontroller.The
password reminder token, which is used to identify a given password reminder attempt, will also
be passed to the controller method. The action is already configured to return a password.reset
view which you should build. The tokenwill be passed to the view, and you should place this
token in a hidden form field named token. In addition to the token, your password reset form
shouldcontain email,password,and password_confirmation fields.TheformshouldPOSTtothe
RemindersController@postReset method.
Asimpleformonthe password.reset viewmightlooklikethis:
Security 208
..<form action ="{{action('RemindersController@postReset') }} "method ="POST ">
<input type ="hidden "name ="token "value ="{{$token }}">
<input type ="email "name ="email ">
<input type ="password "name ="password ">
<input type ="password "name ="password_confirmation ">
<input type ="submit "value ="Reset Password ">
</form >
Finally,the postReset methodisresponsibleforactuallychangingthepasswordinstorage.Inthis
controller action, the Closure passed to the Password::reset method sets the password attribute
on the Userand calls the savemethod. Of course, this Closure is assuming your Usermodel is an
Eloquentmodel ;however,youarefreetochangethisClosureasneededtobecompatiblewithyour
application’sdatabasestoragesystem.
Ifthepasswordissuccessfullyreset,theuserwillberedirectedtotherootofyourapplication.Again,
youarefreetochangethisredirectURL.Ifthepasswordresetfails,theuserwillberedirectbackto
theresetform,andan errormessagewillbeflashedtothesession.
Password Validation
By default, the Password::reset method will verify that the passwords match and are >= six
characters.Youmaycustomizetheserulesusingthe Password::validator method,whichacceptsa
Closure.WithinthisClosure,youmaydoanypasswordvalidationyouwish.Notethatyouarenot
requiredtoverifythatthepasswordsmatch,asthiswillbedoneautomaticallybytheframework.
..Password ::validator (function ($credentials )
{
return strlen ($credentials ['password' ])>=6;
});
Note:Bydefault,passwordresettokensexpireafteronehour.Youmaychangethisvia
thereminder.expire optionofyour app/config/auth.php file.
Encryption
LaravelprovidesfacilitiesforstrongAESencryptionviathemcryptPHPextension:
Security 209
Encrypting A Value
..$encrypted =Crypt ::encrypt ('secret' );
Note:Be sure to set a 16, 24, or 32 character random string in the keyoption of the
app/config/app.php file.Otherwise,encryptedvalueswillnotbesecure.
Decrypting A Value
..$decrypted =Crypt ::decrypt ($encryptedValue );
Setting The Cipher & Mode
Youmayalsosetthecipherandmodeusedbytheencrypter:
..Crypt ::setMode ('ctr' );
Crypt ::setCipher ($cipher );
Authentication Drivers
Laravel offers the database and eloquent authentication drivers out of the box. For more infor-
mation about adding additional authentication drivers, check out the Authentication extension
documentation .
Session
•Configuration
•SessionUsage
•FlashData
•DatabaseSessions
•SessionDrivers
Configuration
SinceHTTPdrivenapplicationsarestateless,sessionsprovideawaytostoreinformationaboutthe
user across requests. Laravel ships with a variety of session back-ends available for use through a
clean,unifiedAPI.Supportforpopularback-endssuchas Memcached ¹¹²,Redis¹¹³,anddatabasesis
includedoutofthebox.
The session configuration is stored in app/config/session.php . Be sure to review the well
documented options available to you in this file. By default, Laravel is configured to use the file
sessiondriver,whichwillworkwellforthemajorityofapplications.
Reserved Keys
TheLaravelframeworkusesthe flashsessionkeyinternally,soyoushouldnotaddanitemtothe
sessionbythatname.
Session Usage
Storing An Item In The Session
..Session ::put('key' ,'value' );
Push A Value Onto An Array Session Value
¹¹²http://memcached.org
¹¹³http://redis.io
Session 211
..Session ::push ('user.teams' ,'developers' );
Retrieving An Item From The Session
..$value =Session ::get('key' );
Retrieving An Item Or Returning A Default Value
..$value =Session ::get('key' ,'default' );
$value =Session ::get('key' ,function () { return 'default' ; });
Retrieving An Item And Forgetting It
..$value =Session ::pull ('key' ,'default' );
Retrieving All Data From The Session
..$data =Session ::all();
Determining If An Item Exists In The Session
..if(Session ::has('users' ))
{
//
}
Session 212
..
Removing An Item From The Session
..Session ::forget ('key' );
Removing All Items From The Session
..Session ::flush ();
Regenerating The Session ID
..Session ::regenerate ();
Flash Data
Sometimesyoumaywishtostoreitemsinthesessiononlyforthenextrequest.Youmaydosousing
theSession::flash method:
..Session ::flash ('key' ,'value' );
Reflashing The Current Flash Data For Another Request
..Session ::reflash ();
Reflashing Only A Subset Of Flash Data
Session 213
..Session ::keep (array ('username' ,'email' ));
Database Sessions
Whenusingthe databasesessiondriver,youwillneedtosetupatabletocontainthesessionitems.
Belowisanexample Schemadeclarationforthetable:
..Schema ::create ('sessions' ,function ($table )
{
$table ->string ('id' )->unique ();
$table ->text ('payload' );
$table ->integer ('last_activity' );
});
Ofcourse,youmayusethe session:table Artisancommandtogeneratethismigrationforyou!
..php artisan session :table
composer dump -autoload
php artisan migrate
Session Drivers
The session “driver” defines where session data will be stored for each request. Laravel ships with
severalgreatdriversoutofthebox:
•file-sessionswillbestoredin app/storage/sessions .
•cookie-sessionswillbestoredinsecure,encryptedcookies.
•database -sessionswillbestoredinadatabaseusedbyyourapplication.
•memcached /redis-sessionswillbestoredinoneofthesefast,cachedbasedstores.
•array-sessionswillbestoredinasimplePHParrayandwillnotbepersistedacrossrequests.
Session 214
Note:The array driver is typically used for running unit tests, so no session data will be
persisted.
SSH
•Configuration
•BasicUsage
•Tasks
•SFTPDownloads
•SFTPUploads
•TailingRemoteLogs
•EnvoyTaskRunner
Configuration
Laravel includes a simple way to SSH into remote servers and run commands, allowing you to
easilybuildArtisantasksthatworkonremoteservers.The SSHfacadeprovidestheaccesspointto
connectingtoyourremoteserversandrunningcommands.
Theconfigurationfileislocatedat app/config/remote.php ,andcontainsalloftheoptionsyouneed
toconfigureyourremoteconnections.The connections arraycontainsalistofyourserverskeyed
by name. Simply populate the credentials in the connections array and you will be ready to start
runningremotetasks.Notethatthe SSHcanauthenticateusingeitherapasswordoranSSHkey.
Note:Need to easily run a variety of tasks on your remote server? Check out the Envoy
taskrunner !
Basic Usage
Running Commands On The Default Server
Toruncommandsonyour defaultremoteconnection,usethe SSH::run method:
..SSH::run(array (
'cd /var/www' ,
'git pull origin master' ,
));
SSH 216
Running Commands On A Specific Connection
Alternatively,youmayruncommandsonaspecificconnectionusingthe intomethod:
..SSH::into ('staging' )->run(array (
'cd /var/www' ,
'git pull origin master' ,
));
Catching Output From Commands
Youmaycatchthe“live”outputofyourremotecommandsbypassingaClosureintothe runmethod:
..SSH::run($commands ,function ($line )
{
echo $line .PHP_EOL;
});
Tasks
If you need to define a group of commands that should always be run together, you may use the
definemethodtodefinea task:
..SSH::into ('staging' )->define ('deploy' ,array (
'cd /var/www' ,
'git pull origin master' ,
'php artisan migrate' ,
));
Oncethetaskhasbeendefined,youmayusethe taskmethodtorunit:
..
SSH 217
..SSH::into ('staging' )->task ('deploy' ,function ($line )
{
echo $line .PHP_EOL;
});
SFTP Downloads
The SSHclassincludesasimplewaytodownloadfilesusingthe getandgetString methods:
..SSH::into ('staging' )->get($remotePath ,$localPath );
$contents =SSH::into ('staging' )->getString ($remotePath );
SFTP Uploads
The SSHclassalsoincludesasimplewaytouploadfiles,orevenstrings,totheserverusingthe put
andputString methods:
..SSH::into ('staging' )->put($localFile ,$remotePath );
SSH::into ('staging' )->putString ($remotePath ,'Foo' );
Tailing Remote Logs
Laravel includes a helpful command for tailing the laravel.log files on any of your remote
connections.Simplyusethe tailArtisancommandandspecifythenameoftheremoteconnection
youwouldliketotail:
..php artisan tail staging
php artisan tail staging --path =/path /to/log.file
SSH 218
..
Envoy Task Runner
•Installation
•RunningTasks
•MultipleServers
•ParallelExecution
•TaskMacros
•Notifications
•UpdatingEnvoy
LaravelEnvoyprovidesaclean,minimalsyntaxfordefiningcommontasksyourunonyourremote
servers.Usinga Bladestylesyntax,youcaneasilysetuptasksfordeployment,Artisancommands,
andmore.
Note:EnvoyrequiresPHPversion5.4orgreater,andonlyrunsonMac/Linuxoperating
systems.
Installation
First,installEnvoyusingtheComposer globalcommand:
..composer global require "laravel/envoy=~1.0 "
Make sure to place the /.composer/vendor/bin directory in your PATH so the envoyexecutable
isfoundwhenyourunthe envoycommandinyourterminal.
Next,createan Envoy.blade.php fileintherootofyourproject.Here’sanexampletogetyoustarted:
..@servers([ 'web' =>'192.168.1.1' ])
@task( 'foo' , ['on' =>'web' ])
ls-la
@endtask
SSH 219
..
Asyoucansee,anarrayof @serversisdefinedatthetopofthefile.Youcanreferencetheseservers
inthe onoptionofyourtaskdeclarations.Withinyour @taskdeclarationsyoushouldplacetheBash
codethatwillberunonyourserverwhenthetaskisexecuted.
The initcommandmaybeusedtoeasilycreateastubEnvoyfile:
..envoy init user @192.168 .1.1
Running Tasks
Torunatask,usethe runcommandofyourEnvoyinstallation:
..envoy run foo
Ifneeded,youmaypassvariablesintotheEnvoyfileusingcommandlineswitches:
..envoy run deploy --branch =master
YoumayusetheoptionsviatheBladesyntaxyouareusedto:
..@servers([ 'web' =>'192.168.1.1' ])
@task( 'deploy' , ['on' =>'web' ])
cd site
git pull origin {{ $branch }}
php artisan migrate
@endtask
Bootstrapping
You may use the @setupdirective to declare variables and do general PHP work inside the Envoy
file:
SSH 220
..@setup
$now =new DateTime();
$environment =isset ($env )?$env :"testing ";
@endsetup
Youmayalsouse @include toincludeanyPHPfiles:
..@include ('vendor/autoload.php' );
Multiple Servers
Youmayeasilyrunataskacrossmultipleservers.Simplylisttheserversinthetaskdeclaration:
..@servers([ 'web-1' =>'192.168.1.1' ,'web-2' =>'192.168.1.2' ])
@task( 'deploy' , ['on' =>['web-1' ,'web-2' ]])
cd site
git pull origin {{ $branch }}
php artisan migrate
@endtask
By default, the task will be executed on each server serially. Meaning, the task will finish running
onthefirstserverbeforeproceedingtoexecuteonthenextserver.
Parallel Execution
If you would like to run a task across multiple servers in parallel, simply add the parallel option
toyourtaskdeclaration:
..
SSH 221
..@servers([ 'web-1' =>'192.168.1.1' ,'web-2' =>'192.168.1.2' ])
@task( 'deploy' , ['on' =>['web-1' ,'web-2' ],'parallel' =>true ])
cd site
git pull origin {{ $branch }}
php artisan migrate
@endtask
Task Macros
Macrosallowyoutodefineasetoftaskstoberuninsequenceusingasinglecommand.Forinstance:
..@servers([ 'web' =>'192.168.1.1' ])
@macro( 'deploy' )
foo
bar
@endmacro
@task( 'foo' )
echo "HELLO "
@endtask
@task( 'bar' )
echo "WORLD "
@endtask
The deploymacrocannowberunviaasingle,simplecommand:
..envoy run deploy
Notifications
HipChat
After running a task, you may send a notification to your team’s HipChat room using the simple
@hipchat directive:
SSH 222
..@servers([ 'web' =>'192.168.1.1' ])
@task( 'foo' , ['on' =>'web' ])
ls-la
@endtask
@after
@hipchat( 'token' ,'room' ,'Envoy' )
@endafter
You can also specify a custom message to the hipchat room. Any variables declared in @setupor
includedwith @include willbeavailableforuseinthemessage:
..@after
@hipchat( 'token' ,'room' ,'Envoy' ,"$task ran on [ $environment ]")
@endafter
Thisisanamazinglysimplewaytokeepyourteamnotifiedofthetasksbeingrunontheserver.
Slack
Thefollowingsyntaxmaybeusedtosendanotificationto Slack¹¹⁴:
..@after
@slack( 'team' ,'token' ,'channel' )
@endafter
Updating Envoy
ToupdateEnvoy,simplyrunthe self-update command:
..envoy self -update
¹¹⁴https://slack.com
SSH 223
IfyourEnvoyinstallationisin /usr/local/bin ,youmayneedtouse sudo:
..composer global update
Templates
•ControllerLayouts
•BladeTemplating
•OtherBladeControlStructures
•ExtendingBlade
Controller Layouts
OnemethodofusingtemplatesinLaravelisviacontrollerlayouts.Byspecifyingthe layoutproperty
on the controller, the view specified will be created for you and will be the assumed response that
shouldbereturnedfromactions.
Defining A Layout On A Controller
..class UserController extends BaseController {
/**
* The layout that should be used for responses.
*/
protected $layout ='layouts.master' ;
/**
* Show the user profile.
*/
public function showProfile ()
{
$this ->layout ->content =View ::make ('user.profile' );
}
}
Blade Templating
Bladeisasimple,yetpowerfultemplatingengineprovidedwithLaravel.Unlikecontrollerlayouts,
Bladeisdrivenby template inheritance andsections.AllBladetemplatesshouldusethe .blade.php
extension.
Templates 225
Defining A Blade Layout
..<!-- Stored in app /views /layouts /master .blade .php -->
<html >
<body >
@section( 'sidebar' )
This is the master sidebar .
@show
<div class ="container ">
@yield( 'content' )
</div>
</body >
</html >
Using A Blade Layout
..@extends ('layouts.master' )
@section( 'sidebar' )
@parent
<p>This is appended to the master sidebar .</p>
@stop
@section( 'content' )
<p>This is my body content .</p>
@stop
Notethatviewswhich extendaBladelayoutsimplyoverridesectionsfromthelayout.Contentof
thelayoutcanbeincludedinachildviewusingthe @parentdirectiveinasection,allowingyouto
appendtothecontentsofalayoutsectionsuchasasidebarorfooter.
Sometimes, such as when you are not sure if a section has been defined, you may wish to pass a
defaultvaluetothe @yielddirective.Youmaypassthedefaultvalueasthesecondargument:
Templates 226
..@yield( 'section' ,'Default Content' )
Other Blade Control Structures
Echoing Data
..Hello, {{{ $name }}}.
The current UNIX timestamp is {{{ time () }}} .
Echoing Data After Checking For Existence
Sometimesyoumaywishtoechoavariable,butyouaren’tsureifthevariablehasbeenset.Basically,
youwanttodothis:
..{{{ isset ($name )?$name :'Default' }}}
However,insteadofwritingaternarystatement,Bladeallowsyoutousethefollowingconvenient
short-cut:
..{{{ $name or'Default' }}}
Displaying Raw Text With Curly Braces
If you need to display a string that is wrapped in curly braces, you may escape the Blade behavior
byprefixingyourtextwithan @symbol:
..@{{This will not be processed by Blade }}
Templates 227
Of course, all user supplied data should be escaped or purified. To escape the output, you may use
thetriplecurlybracesyntax:
..Hello, {{{ $name }}}.
Ifyoudon’twantthedatatobeescaped,youmayusedoublecurly-braces:
..Hello, {{ $name }}.
Note:Beverycarefulwhenechoingcontentthatissuppliedbyusersofyourapplication.
AlwaysusethetriplecurlybracesyntaxtoescapeanyHTMLentitiesinthecontent.
If Statements
..@if(count ($records )=== 1)
I have one record !
@elseif (count ($records )>1)
I have multiple records !
@else
I don 't have any records !
@endif
@unless (Auth ::check ())
You are not signed in .
@endunless
Loops
..
Templates 228
..@for ($i=0;$i<10;$i++)
The current value is {{ $i}}
@endfor
@foreach ($users as$user )
<p>This is user {{ $user ->id}}</p>
@endforeach
@forelse( $users as$user )
<li>{{$user ->name }}</li>
@empty
<p>No users </p>
@endforelse
@while (true )
<p>I'm looping forever .</p>
@endwhile
Including Sub-Views
..@include ('view.name' )
Youmayalsopassanarrayofdatatotheincludedview:
..@include ('view.name' ,array ('some' =>'data' ))
Overwriting Sections
Tooverwriteasectionentirely,youmayusethe overwrite statement:
..@extends ('list.item.container' )
@section( 'list.item.content' )
<p>This is an item of type {{ $item ->type }}</p>
Templates 229
..@overwrite
Displaying Language Lines
..@lang( 'language.line' )
@choice( 'language.line' ,1)
Comments
..{{--This comment will not be in the rendered HTML --}}
Extending Blade
Bladeevenallowsyoutodefineyourowncustomcontrolstructures.WhenaBladefileiscompiled,
each custom extension is called with the view contents, allowing you to do anything from simple
str_replace manipulationstomorecomplexregularexpressions.
TheBladecompilercomeswiththehelpermethods createMatcher andcreatePlainMatcher ,which
generatetheexpressionyouneedtobuildyourowncustomdirectives.
The createPlainMatcher method is used for directives with no arguments like @endifand @stop,
while createMatcher isusedfordirectiveswitharguments.
Thefollowingexamplecreatesa @datetime($var) directivewhichsimplycalls ->format() on$var:
..Blade ::extend (function ($view ,$compiler )
{
$pattern =$compiler ->createMatcher ('datetime' );
return preg_replace ($pattern ,'$1<?php echo $2->format(\'m/d/Y H:i\');
?>',$view );
});
Testing
•Introduction
•Defining&RunningTests
•TestEnvironment
•CallingRoutesFromTests
•MockingFacades
•FrameworkAssertions
•HelperMethods
•RefreshingTheApplication
Introduction
Laravelisbuiltwithunittestinginmind.Infact,supportfortestingwithPHPUnitisincludedout
of the box, and a phpunit.xml file is already setup for your application. In addition to PHPUnit,
Laravel also utilizes the Symfony HttpKernel, DomCrawler, and BrowserKit components to allow
youtoinspectandmanipulateyourviewswhiletesting,allowingtosimulateawebbrowser.
An example test file is provided in the app/tests directory. After installing a new Laravel
application,simplyrun phpunitonthecommandlinetorunyourtests.
Defining & Running Tests
To create a test case, simply create a new test file in the app/tests directory. The test class should
extend TestCase.YoumaythendefinetestmethodsasyounormallywouldwhenusingPHPUnit.
An Example Test Class
..
Testing 231
..class FooTest extends TestCase {
public function testSomethingIsTrue ()
{
$this ->assertTrue (true );
}
}
You may run all of the tests for your application by executing the phpunitcommand from your
terminal.
Note:Ifyoudefineyourown setUpmethod,besuretocall parent::setUp .
Test Environment
Whenrunningunittests,Laravelwillautomaticallysettheconfigurationenvironmentto testing.
Also, Laravel includes configuration files for sessionand cachein the test environment. Both of
thesedriversaresetto arraywhileinthetestenvironment,meaningnosessionorcachedatawillbe
persistedwhiletesting.Youarefreetocreateothertestingenvironmentconfigurationsasnecessary.
Calling Routes From Tests
Calling A Route From A Test
Youmayeasilycalloneofyourroutesforatestusingthe callmethod:
..$response =$this ->call ('GET' ,'user/profile' );
$response =$this ->call ($method ,$uri ,$parameters ,$files ,$server ,
$content );
Youmaytheninspectthe Illuminate\Http\Response object:
Testing 232
..$this ->assertEquals ('Hello World' ,$response ->getContent ());
Calling A Controller From A Test
Youmayalsocallacontrollerfromatest:
..$response =$this ->action ('GET' ,'HomeController@index' );
$response =$this ->action ('GET' ,'UserController@profile' ,array ('user' =>
1));
The getContent method will return the evaluated string contents of the response. If your route
returnsa View,youmayaccessitusingthe original property:
..$view =$response ->original ;
$this ->assertEquals ('John' ,$view ['name' ]);
TocallaHTTPSroute,youmayusethe callSecure method:
..$response =$this ->callSecure ('GET' ,'foo/bar' );
Note:Route filters aredisabled when in the testing environment.To enable them, add
Route::enableFilters() toyourtest.
DOM Crawler
You may also call a route and receive a DOM Crawler instance that you may use to inspect the
content:
Testing 233
..$crawler =$this ->client ->request ('GET' ,'/');
$this ->assertTrue ($this ->client ->getResponse ()->isOk ());
$this ->assertCount (1,$crawler ->filter ('h1:contains("Hello World!")' ));
Formoreinformationonhowtousethecrawler,refertoits officialdocumentation ¹¹⁵.
Mocking Facades
When testing, you may often want to mock a call to a Laravel static facade. For example, consider
thefollowingcontrolleraction:
..public function getIndex ()
{
Event ::fire ('foo' ,array ('name' =>'Dayle' ));
return 'All done!' ;
}
We can mock the call to the Eventclass by using the shouldReceive method on the facade, which
willreturnaninstanceofa Mockery¹¹⁶mock.
Mocking A Facade
..public function testGetIndex ()
{
Event ::shouldReceive ('fire' )->once ()->with ('foo' ,array ('name' =>
'Dayle' ));
$this ->call ('GET' ,'/');
}
¹¹⁵http://symfony.com/doc/master/components/dom_crawler.html
¹¹⁶https://github.com/padraic/mockery
Testing 234
Note:Youshouldnotmockthe Requestfacade.Instead,passtheinputyoudesireinto
thecallmethodwhenrunningyourtest.
Framework Assertions
Laravelshipswithseveral assertmethodstomaketestingalittleeasier:
Asserting Responses Are OK
..public function testMethod ()
{
$this ->call ('GET' ,'/');
$this ->assertResponseOk ();
}
Asserting Response Statuses
..$this ->assertResponseStatus (403);
Asserting Responses Are Redirects
..$this ->assertRedirectedTo ('foo' );
$this ->assertRedirectedToRoute ('route.name' );
$this ->assertRedirectedToAction ('Controller@method' );
Asserting A View Has Some Data
..
Testing 235
..public function testMethod ()
{
$this ->call ('GET' ,'/');
$this ->assertViewHas ('name' );
$this ->assertViewHas ('age' ,$value );
}
Asserting The Session Has Some Data
..public function testMethod ()
{
$this ->call ('GET' ,'/');
$this ->assertSessionHas ('name' );
$this ->assertSessionHas ('age' ,$value );
}
Asserting The Session Has Errors
..public function testMethod ()
{
$this ->call ('GET' ,'/');
$this ->assertSessionHasErrors ();
// Asserting the session has errors for a given key...
$this ->assertSessionHasErrors ('name' );
// Asserting the session has errors for several keys...
$this ->assertSessionHasErrors (array ('name' ,'age' ));
}
Asserting Old Input Has Some Data
Testing 236
..public function testMethod ()
{
$this ->call ('GET' ,'/');
$this ->assertHasOldInput ();
}
Helper Methods
The TestCase classcontainsseveralhelpermethodstomaketestingyourapplicationeasier.
Setting And Flushing Sessions From Tests
..$this ->session (['foo' =>'bar' ]);
$this ->flushSession ();
Setting The Currently Authenticated User
Youmaysetthecurrentlyauthenticateduserusingthe bemethod:
..$user =new User( array ('name' =>'John' ));
$this ->be($user );
Youmayre-seedyourdatabasefromatestusingthe seedmethod:
Re-Seeding Database From Tests
..$this ->seed ();
$this ->seed ($connection );
Testing 237
More information on creating seeds may be found in the migrations and seeding section of the
documentation.
Refreshing The Application
Asyoumayalreadyknow,youcanaccessyourLaravel Application /IoCContainervia $this->app
fromanytestmethod.ThisApplicationinstanceisrefreshedforeachtestclass.Ifyouwishtomanu-
allyforcetheApplicationtoberefreshedforagivenmethod,youmayusethe refreshApplication
method from your test method. This will reset any extra bindings, such as mocks, that have been
placedintheIoCcontainersincethetestcasestartedrunning.
Validation
•BasicUsage
•WorkingWithErrorMessages
•ErrorMessages&Views
•AvailableValidationRules
•ConditionallyAddingRules
•CustomErrorMessages
•CustomValidationRules
Basic Usage
Laravel ships with a simple, convenient facility for validating data and retrieving validation error
messagesviathe Validation class.
Basic Validation Example
..$validator =Validator ::make (
array ('name' =>'Dayle' ),
array ('name' =>'required|min:5' )
);
Thefirstargumentpassedtothe makemethodisthedataundervalidation.Thesecondargumentis
thevalidationrulesthatshouldbeappliedtothedata.
Using Arrays To Specify Rules
Multiplerulesmaybedelimitedusingeithera“pipe”character,orasseparateelementsofanarray.
..$validator =Validator ::make (
array ('name' =>'Dayle' ),
array ('name' =>array ('required' ,'min:5' ))
);
Validation 239
Validating Multiple Fields
..$validator =Validator ::make (
array (
'name' =>'Dayle' ,
'password' =>'lamepassword' ,
'email' =>'email@example.com'
),
array (
'name' =>'required' ,
'password' =>'required|min:8' ,
'email' =>'required|email|unique:users'
)
);
Oncea Validator instancehasbeencreated,the fails(orpasses)methodmaybeusedtoperform
thevalidation.
..if($validator ->fails ())
{
// The given data did not pass validation
}
Ifvalidationhasfailed,youmayretrievetheerrormessagesfromthevalidator.
..$messages =$validator ->messages ();
You may also access an array of the failed validation rules, without messages. To do so, use the
failedmethod:
..$failed =$validator ->failed ();
Validation 240
Validating Files
TheValidator classprovidesseveralrulesforvalidatingfiles,suchas size,mimes,andothers.When
validatingfiles,youmaysimplypassthemintothevalidatorwithyourotherdata.
Working With Error Messages
Aftercallingthe messagesmethodona Validator instance,youwillreceivea MessageBag instance,
whichhasavarietyofconvenientmethodsforworkingwitherrormessages.
Retrieving The First Error Message For A Field
..echo $messages ->first ('email' );
Retrieving All Error Messages For A Field
..foreach ($messages ->get('email' )as$message )
{
//
}
Retrieving All Error Messages For All Fields
..foreach ($messages ->all()as$message )
{
//
}
Determining If Messages Exist For A Field
..
Validation 241
..if($messages ->has('email' ))
{
//
}
Retrieving An Error Message With A Format
..echo $messages ->first ('email' ,'<p>:message</p>' );
Note:Bydefault,messagesareformattedusingBootstrapcompatiblesyntax.
Retrieving All Error Messages With A Format
..foreach ($messages ->all('<li>:message</li>' )as$message )
{
//
}
Error Messages & Views
Once you have performed validation, you will need an easy way to get the error messages back to
yourviews.ThisisconvenientlyhandledbyLaravel.Considerthefollowingroutesasanexample:
..Route ::get('register' ,function ()
{
return View ::make ('user.register' );
});
Route ::post ('register' ,function ()
{
$rules =array (...);
$validator =Validator ::make (Input ::all(), $rules );
Validation 242
..if($validator ->fails ())
{
return Redirect ::to('register' )->withErrors ($validator );
}
});
Notethatwhenvalidationfails,wepassthe Validator instancetotheRedirectusingthe withErrors
method. This method will flash the error messages to the session so that they are available on the
nextrequest.
However, notice that we do not have to explicitly bind the error messages to the view in our GET
route. This is because Laravel will always check for errors in the session data, and automatically
bind them to the view if they are available. So, it is important to note that an $errors variable
will always be available in all of your views, on every request , allowing you to conveniently
assumethe $errorsvariableisalwaysdefinedandcanbesafelyused.The $errorsvariablewillbe
aninstanceof MessageBag .
So,afterredirection,youmayutilizetheautomaticallybound $errorsvariableinyourview:
..<?php echo $errors ->first ('email' );?>
Named Error Bags
Ifyouhavemultipleformsonasinglepage,youmaywishtonamethe MessageBag oferrors.This
willallowyoutoretrievetheerrormessagesforaspecificform.Simplypassanameasthesecond
argumentto withErrors :
..return Redirect ::to('register' )->withErrors ($validator ,'login' );
Youmaythenaccessthenamed MessageBag instancefromthe $errorsvariable:
..<?php echo $errors ->login ->first ('email' );?>
Validation 243
Available Validation Rules
Belowisalistofallavailablevalidationrulesandtheirfunction:
•Accepted
•ActiveURL
•After(Date)
•Alpha
•AlphaDash
•AlphaNumeric
•Array
•Before(Date)
•Between
•Boolean
•Confirmed
•Date
•DateFormat
•Different
•Digits
•DigitsBetween
•E-Mail
•Exists(Database)
•Image(File)
•In
•Integer
•IPAddress
•Max
•MIMETypes
•Min
•NotIn
•Numeric
•RegularExpression
•Required
•RequiredIf
•RequiredWith
•RequiredWithAll
•RequiredWithout
•RequiredWithoutAll
•Same
Validation 244
•Size
•String
•Timezone
•Unique(Database)
•URL
accepted
The field under validation must be yes,on, or1. This is useful for validating “Terms of Service”
acceptance.
active_url
ThefieldundervalidationmustbeavalidURLaccordingtothe checkdnsrr PHPfunction.
after: date
Thefieldundervalidationmustbeavalueafteragivendate.ThedateswillbepassedintothePHP
strtotime function.
alpha
Thefieldundervalidationmustbeentirelyalphabeticcharacters.
alpha_dash
Thefieldundervalidationmayhavealpha-numericcharacters,aswellasdashesandunderscores.
alpha_num
Thefieldundervalidationmustbeentirelyalpha-numericcharacters.
array
Thefieldundervalidationmustbeoftypearray.
before: date
The field under validation must be a value preceding the given date. The dates will be passed into
thePHP strtotime function.
Validation 245
between: min,max
Thefieldundervalidationmusthaveasizebetweenthegiven minandmax.Strings,numerics,and
filesareevaluatedinthesamefashionasthe sizerule.
boolean
The field under validation must be able to be cast as a boolean. Accepted input are true,false,1,
0,"1"and"0".
confirmed
The field under validation must have a matching field of foo_confirmation . For example, if the
fieldundervalidationis password,amatching password_confirmation fieldmustbepresentinthe
input.
date
Thefieldundervalidationmustbeavaliddateaccordingtothe strtotime PHPfunction.
date_format: format
Thefieldundervalidationmustmatchthe formatdefinedaccordingtothe date_parse_from_format
PHPfunction.
different: field
Thegiven fieldmustbedifferentthanthefieldundervalidation.
digits: value
Thefieldundervalidationmustbe numericandmusthaveanexactlengthof value.
digits_between: min,max
Thefieldundervalidationmusthavealengthbetweenthegiven minandmax.
email
Thefieldundervalidationmustbeformattedasane-mailaddress.
exists: table ,column
Thefieldundervalidationmustexistonagivendatabasetable.
Basic Usage Of Exists Rule
Validation 246
..'state' =>'exists:states'
Specifying A Custom Column Name
..'state' =>'exists:states,abbreviation'
Youmayalsospecifymoreconditionsthatwillbeaddedas“where”clausestothequery:
..'email' =>'exists:staff,email,account_id,1'
Passing NULLasa“where”clausevaluewilladdacheckfora NULLdatabasevalue:
..'email' =>'exists:staff,email,deleted_at,NULL'
image
Thefileundervalidationmustbeanimage(jpeg,png,bmp,orgif)
in: foo,bar,…
Thefieldundervalidationmustbeincludedinthegivenlistofvalues.
integer
Thefieldundervalidationmusthaveanintegervalue.
ip
ThefieldundervalidationmustbeformattedasanIPaddress.
max: value
The field under validation must be less than or equal to a maximum value. Strings, numerics, and
filesareevaluatedinthesamefashionasthe sizerule.
Validation 247
mimes: foo,bar,…
ThefileundervalidationmusthaveaMIMEtypecorrespondingtooneofthelistedextensions.
Basic Usage Of MIME Rule
..'photo' =>'mimes:jpeg,bmp,png'
min: value
The field under validation must have a minimum value. Strings, numerics, and files are evaluated
inthesamefashionasthe sizerule.
not_in: foo,bar,…
Thefieldundervalidationmustnotbeincludedinthegivenlistofvalues.
numeric
Thefieldundervalidationmusthaveanumericvalue.
regex: pattern
Thefieldundervalidationmustmatchthegivenregularexpression.
Note:When using the regexpattern, it may be necessary to specify rules in an array instead of
usingpipedelimiters,especiallyiftheregularexpressioncontainsapipecharacter.
required
Thefieldundervalidationmustbepresentintheinputdata.
required_if: field,value ,…
Thefieldundervalidationmustbepresentifthe fieldfieldisequaltoany value.
required_with: foo,bar,…
Thefieldundervalidationmustbepresent only ifanyoftheotherspecifiedfieldsarepresent.
Validation 248
required_with_all: foo,bar,…
Thefieldundervalidationmustbepresent only ifalloftheotherspecifiedfieldsarepresent.
required_without: foo,bar,…
Thefieldundervalidationmustbepresent only when anyoftheotherspecifiedfieldsarenotpresent.
required_without_all: foo,bar,…
The field under validation must be present only when the all of the other specified fields are not
present.
same: field
Thegiven fieldmustmatchthefieldundervalidation.
size: value
The field under validation must have a size matching the given value. For string data, value
corresponds to the number of characters. For numeric data, valuecorresponds to a given integer
value.Forfiles, sizecorrespondstothefilesizeinkilobytes.
string: value
Thefieldundervalidationmustbeastringtype.
timezone
The field under validation must be a valid timezone identifier according to the timezone_-
identifiers_list PHPfunction.
unique: table ,column ,except ,idColumn
The field under validation must be unique on a given database table. If the columnoption is not
specified,thefieldnamewillbeused.
Basic Usage Of Unique Rule
..'email' =>'unique:users'
Specifying A Custom Column Name
Validation 249
..'email' =>'unique:users,email_address'
Forcing A Unique Rule To Ignore A Given ID
..'email' =>'unique:users,email_address,10'
Adding Additional Where Clauses
Youmayalsospecifymoreconditionsthatwillbeaddedas“where”clausestothequery:
..'email' =>'unique:users,email_address,NULL,id,account_id,1'
Intheruleabove,onlyrowswithan account_id of1wouldbeincludedintheuniquecheck.
url
ThefieldundervalidationmustbeformattedasanURL.
Note:ThisfunctionusesPHP’s filter_var method.
Conditionally Adding Rules
Insomesituations,youmaywishtorunvalidationchecksagainstafield onlyifthatfieldispresent
intheinputarray.Toquicklyaccomplishthis,addthe sometimes ruletoyourrulelist:
..$v=Validator ::make ($data ,array (
'email' =>'sometimes|required|email' ,
));
Intheexampleabove,the emailfieldwillonlybevalidatedifitispresentinthe $dataarray.
Validation 250
Complex Conditional Validation
Sometimesyoumaywishtorequireagivenfieldonlyifanotherfieldhasagreatervaluethan100.
Oryoumayneedtwofieldstohaveagivenvalueonlywhenanotherfieldispresent.Addingthese
validation rules doesn’t have to be a pain. First, create a Validator instance with your static rules
thatneverchange:
..$v=Validator ::make ($data ,array (
'email' =>'required|email' ,
'games' =>'required|numeric' ,
));
Let’s assume our web application is for game collectors. If a game collector registers with our
application and they own more than 100 games, we want them to explain why they own so many
games. For example, perhaps they run a game re-sell shop, or maybe they just enjoy collecting. To
conditionallyaddthisrequirement,wecanusethe sometimes methodonthe Validator instance.
..$v->sometimes ('reason' ,'required|max:500' ,function ($input )
{
return $input ->games >=100;
});
The first argument passed to the sometimes method is the name of the field we are conditionally
validating. The second argument is the rules we want to add. If the Closurepassed as the third
argument returns true, the rules will be added. This method makes it a breeze to build complex
conditionalvalidations.Youmayevenaddconditionalvalidationsforseveralfieldsatonce:
..$v->sometimes (array ('reason' ,'cost' ),'required' ,function ($input )
{
return $input ->games >=100;
});
Note:The$inputparameterpassedtoyour Closurewillbeaninstanceof Illuminate\Support\Fluent
andmaybeusedasanobjecttoaccessyourinputandfiles.
Validation 251
Custom Error Messages
Ifneeded,youmayusecustomerrormessagesforvalidationinsteadofthedefaults.Thereareseveral
waystospecifycustommessages.
Passing Custom Messages Into Validator
..$messages =array (
'required' =>'The :attribute field is required.' ,
);
$validator =Validator ::make ($input ,$rules ,$messages );
Note:The :attribute place-holder will be replaced by the actual name of the field
undervalidation.Youmayalsoutilizeotherplace-holdersinvalidationmessages.
Other Validation Place-Holders
..$messages =array (
'same' =>'The :attribute and :other must match.' ,
'size' =>'The :attribute must be exactly :size.' ,
'between' =>'The :attribute must be between :min - :max.' ,
'in' =>'The :attribute must be one of the following types:
:values' ,
);
Specifying A Custom Message For A Given Attribute
Sometimesyoumaywishtospecifyacustomerrormessagesonlyforaspecificfield:
..$messages =array (
'email.required' =>'We need to know your e-mail address!' ,
);
Validation 252
Specifying Custom Messages In Language Files
In some cases, you may wish to specify your custom messages in a language file instead of
passing them directly to the Validator . To do so, add your messages to customarray in the
app/lang/xx/validation.php languagefile.
..'custom' =>array (
'email' =>array (
'required' =>'We need to know your e-mail address!' ,
),
),
Custom Validation Rules
Registering A Custom Validation Rule
Laravelprovidesavarietyofhelpfulvalidationrules;however,youmaywishtospecifysomeofyour
own.Onemethodofregisteringcustomvalidationrulesisusingthe Validator::extend method:
..Validator ::extend ('foo' ,function ($attribute ,$value ,$parameters )
{
return $value =='foo' ;
});
ThecustomvalidatorClosurereceivesthreearguments:thenameofthe $attribute beingvalidated,
the$valueoftheattribute,andanarrayof $parameters passedtotherule.
Youmayalsopassaclassandmethodtothe extendmethodinsteadofaClosure:
..Validator ::extend ('foo' ,'FooValidator@validate' );
Notethatyouwillalsoneedtodefineanerrormessageforyourcustomrules.Youcandosoeither
usinganinlinecustommessagearrayorbyaddinganentryinthevalidationlanguagefile.
Validation 253
Extending The Validator Class
Instead of using Closure callbacks to extend the Validator, you may also extend the Validator class
itself. To do so, write a Validator class that extends Illuminate\Validation\Validator . You may
addvalidationmethodstotheclassbyprefixingthemwith validate:
..<?php
class CustomValidator extends Illuminate\Validation\Validator {
public function validateFoo ($attribute ,$value ,$parameters )
{
return $value =='foo' ;
}
}
Registering A Custom Validator Resolver
Next,youneedtoregisteryourcustomValidatorextension:
..Validator ::resolver (function ($translator ,$data ,$rules ,$messages )
{
return new CustomValidator( $translator ,$data ,$rules ,$messages );
});
When creating a custom validation rule, you may sometimes need to define custom place-holder
replacementsforerrormessages.YoumaydosobycreatingacustomValidatorasdescribedabove,
andaddinga replaceXXX functiontothevalidator.
..protected function replaceFoo ($message ,$attribute ,$rule ,$parameters )
{
return str_replace (':foo' ,$parameters [0],$message );
}
If you would like to add a custom message “replacer” without extending the Validator class, you
mayusethe Validator::replacer method:
Validation 254
..Validator ::replacer ('rule' ,function ($message ,$attribute ,$rule ,
$parameters )
{
//
});
Database
Basic Database Usage
•Configuration
•Read/WriteConnections
•RunningQueries
•DatabaseTransactions
•AccessingConnections
•QueryLogging
Configuration
Laravel makes connecting with databases and running queries extremely simple. The database
configuration file is app/config/database.php . In this file you may define all of your database
connections,aswellasspecifywhichconnectionshouldbeusedbydefault.Examplesforallofthe
supporteddatabasesystemsareprovidedinthisfile.
CurrentlyLaravelsupportsfourdatabasesystems:MySQL,Postgres,SQLite,andSQLServer.
Read / Write Connections
Sometimes you may wish to use one database connection for SELECT statements, and another for
INSERT,UPDATE,andDELETEstatements.Laravelmakesthisabreeze,andtheproperconnections
willalwaysbeusedwhetheryouareusingrawqueries,thequerybuilder,ortheEloquentORM.
Toseehowread/writeconnectionsshouldbeconfigured,let’slookatthisexample:
..'mysql' =>array (
'read' =>array (
'host' =>'192.168.1.1' ,
),
'write' =>array (
'host' =>'196.168.1.2'
),
'driver' =>'mysql' ,
'database' =>'database' ,
'username' =>'root' ,
'password' =>'',
'charset' =>'utf8' ,
'collation' =>'utf8_unicode_ci' ,
BasicDatabaseUsage 257
..'prefix' =>'',
),
Notethattwokeyshavebeenaddedtotheconfigurationarray: readandwrite.Bothofthesekeys
have array values containing a single key: host. The rest of the database options for the readand
writeconnections will be merged from the main mysqlarray. So, we only need to place items in
thereadand writearrays if we wish to override the values in the main array. So, in this case,
192.168.1.1 will be used as the “read” connection, while 192.168.1.2 will be used as the “write”
connection. The database credentials, prefix, character set, and all other options in the main mysql
arraywillbesharedacrossbothconnections.
Running Queries
Onceyouhaveconfiguredyourdatabaseconnection,youmayrunqueriesusingthe DBclass.
Running A Select Query
..$results =DB::select ('select * from users where id = ?' ,array (1));
The selectmethodwillalwaysreturnan arrayofresults.
Running An Insert Statement
..DB::insert ('insert into users (id, name) values (?, ?)' ,array (1,
'Dayle' ));
Running An Update Statement
..DB::update ('update users set votes = 100 where name = ?' ,array ('John' ));
Running A Delete Statement
BasicDatabaseUsage 258
..DB::delete ('delete from users' );
Note:The updateand deletestatements return the number of rows affected by the
operation.
Running A General Statement
..DB::statement ('drop table users' );
Listening For Query Events
Youmaylistenforqueryeventsusingthe DB::listen method:
..DB::listen (function ($sql ,$bindings ,$time )
{
//
});
Database Transactions
Torunasetofoperationswithinadatabasetransaction,youmayusethe transaction method:
..DB::transaction (function ()
{
DB::table ('users' )->update (array ('votes' =>1));
DB::table ('posts' )->delete ();
});
Note:Anyexceptionthrownwithinthe transaction closurewillcausethetransaction
toberolledbackautomatically.
BasicDatabaseUsage 259
Sometimesyoumayneedtobeginatransactionyourself:
..DB::beginTransaction ();
Youcanrollbackatransactionviathe rollback method:
..DB::rollback ();
Lastly,youcancommitatransactionviathe commitmethod:
..DB::commit ();
Accessing Connections
Whenusingmultipleconnections,youmayaccessthemviathe DB::connection method:
..$users =DB::connection ('foo' )->select (...);
Youmayalsoaccesstheraw,underlyingPDOinstance:
..$pdo =DB::connection ()->getPdo ();
Sometimesyoumayneedtoreconnecttoagivendatabase:
..DB::reconnect ('foo' );
IfyouneedtodisconnectfromthegivendatabaseduetoexceedingtheunderlyingPDOinstance’s
max_connections limit,usethe disconnect method:
BasicDatabaseUsage 260
..DB::disconnect ('foo' );
Query Logging
Bydefault,Laravelkeepsaloginmemoryofallqueriesthathavebeenrunforthecurrentrequest.
However,insomecases,suchaswheninsertingalargenumberofrows,thiscancausetheapplication
touseexcessmemory.Todisablethelog,youmayusethe disableQueryLog method:
..DB::connection ()->disableQueryLog ();
Togetanarrayoftheexecutedqueries,youmayusethe getQueryLog method:
..$queries =DB::getQueryLog ();
Query Builder
•Introduction
•Selects
•Joins
•AdvancedWheres
•Aggregates
•RawExpressions
•Inserts
•Updates
•Deletes
•Unions
•PessimisticLocking
•CachingQueries
Introduction
Thedatabasequerybuilderprovidesaconvenient,fluentinterfacetocreatingandrunningdatabase
queries. It can be used to perform most database operations in your application, and works on all
supporteddatabasesystems.
Note:TheLaravelquerybuilderusesPDOparameterbindingthroughouttoprotectyour
applicationagainstSQLinjectionattacks.Thereisnoneedtocleanstringsbeingpassedas
bindings.
Selects
Retrieving All Rows From A Table
..
QueryBuilder 262
..$users =DB::table ('users' )->get();
foreach ($users as$user )
{
var_dump ($user ->name );
}
Retrieving A Single Row From A Table
..$user =DB::table ('users' )->where ('name' ,'John' )->first ();
var_dump ($user ->name );
Retrieving A Single Column From A Row
..$name =DB::table ('users' )->where ('name' ,'John' )->pluck ('name' );
Retrieving A List Of Column Values
..$roles =DB::table ('roles' )->lists ('title' );
This method will return an array of role titles. You may also specify a custom key column for the
returnedarray:
..$roles =DB::table ('roles' )->lists ('title' ,'name' );
Specifying A Select Clause
QueryBuilder 263
..$users =DB::table ('users' )->select ('name' ,'email' )->get();
$users =DB::table ('users' )->distinct ()->get();
$users =DB::table ('users' )->select ('name as user_name' )->get();
Adding A Select Clause To An Existing Query
..$query =DB::table ('users' )->select ('name' );
$users =$query ->addSelect ('age' )->get();
Using Where Operators
..$users =DB::table ('users' )->where ('votes' ,'>',100)->get();
Or Statements
..$users =DB::table ('users' )
->where ('votes' ,'>',100)
->orWhere ('name' ,'John' )
->get();
Using Where Between
..$users =DB::table ('users' )
->whereBetween ('votes' ,array (1,100))->get();
QueryBuilder 264
Using Where Not Between
..$users =DB::table ('users' )
->whereNotBetween ('votes' ,array (1,100))->get();
Using Where In With An Array
..$users =DB::table ('users' )
->whereIn ('id' ,array (1,2,3))->get();
$users =DB::table ('users' )
->whereNotIn ('id' ,array (1,2,3))->get();
Using Where Null To Find Records With Unset Values
..$users =DB::table ('users' )
->whereNull ('updated_at' )->get();
Order By, Group By, And Having
..$users =DB::table ('users' )
->orderBy ('name' ,'desc' )
->groupBy ('count' )
->having ('count' ,'>',100)
->get();
Offset & Limit
..$users =DB::table ('users' )->skip (10)->take (5)->get();
QueryBuilder 265
Joins
Thequerybuildermayalsobeusedtowritejoinstatements.Takealookatthefollowingexamples:
Basic Join Statement
..DB::table ('users' )
->join ('contacts' ,'users.id' ,'=','contacts.user_id' )
->join ('orders' ,'users.id' ,'=','orders.user_id' )
->select ('users.id' ,'contacts.phone' ,'orders.price' )
->get();
Left Join Statement
..DB::table ('users' )
->leftJoin ('posts' ,'users.id' ,'=','posts.user_id' )
->get();
Youmayalsospecifymoreadvancedjoinclauses:
..DB::table ('users' )
->join ('contacts' ,function ($join )
{
$join ->on('users.id' ,'=','contacts.user_id' )->orOn (...);
})
->get();
If you would like to use a “where” style clause on your joins, you may use the whereand orWhere
methods on a join. Instead of comparing two columns, these methods will compare the column
againstavalue:
..
QueryBuilder 266
..DB::table ('users' )
->join ('contacts' ,function ($join )
{
$join ->on('users.id' ,'=','contacts.user_id' )
->where ('contacts.user_id' ,'>',5);
})
->get();
Advanced Wheres
Parameter Grouping
Sometimes you may need to create more advanced where clauses such as “where exists” or nested
parametergroupings.TheLaravelquerybuildercanhandletheseaswell:
..DB::table ('users' )
->where ('name' ,'=','John' )
->orWhere (function ($query )
{
$query ->where ('votes' ,'>',100)
->where ('title' ,'<>' ,'Admin' );
})
->get();
ThequeryabovewillproducethefollowingSQL:
..select *from users where name ='John' or(votes >100 and title <>
'Admin' )
Exists Statements
..
QueryBuilder 267
..DB::table ('users' )
->whereExists (function ($query )
{
$query ->select (DB::raw(1))
->from ('orders' )
->whereRaw ('orders.user_id = users.id' );
})
->get();
ThequeryabovewillproducethefollowingSQL:
..select *from users
where exists (
select 1from orders where orders .user_id =users .id
)
Aggregates
The query builder also provides a variety of aggregate methods, such as count,max,min,avg, and
sum.
Using Aggregate Methods
..$users =DB::table ('users' )->count ();
$price =DB::table ('orders' )->max('price' );
$price =DB::table ('orders' )->min('price' );
$price =DB::table ('orders' )->avg('price' );
$total =DB::table ('users' )->sum('votes' );
QueryBuilder 268
Raw Expressions
Sometimesyoumayneedtousearawexpressioninaquery.Theseexpressionswillbeinjectedinto
thequeryasstrings,sobecarefulnottocreateanySQLinjectionpoints!Tocreatearawexpression,
youmayusethe DB::rawmethod:
Using A Raw Expression
..$users =DB::table ('users' )
->select (DB::raw('count(*) as user_count, status' ))
->where ('status' ,'<>' ,1)
->groupBy ('status' )
->get();
Inserts
Inserting Records Into A Table
..DB::table ('users' )->insert (
array ('email' =>'john@example.com' ,'votes' =>0)
);
Inserting Records Into A Table With An Auto-Incrementing ID
Ifthetablehasanauto-incrementingid,use insertGetId toinsertarecordandretrievetheid:
..$id =DB::table ('users' )->insertGetId (
array ('email' =>'john@example.com' ,'votes' =>0)
);
Note:When using PostgreSQL the insertGetId method expects the auto-incrementing
columntobenamed“id”.
QueryBuilder 269
Inserting Multiple Records Into A Table
..DB::table ('users' )->insert (array (
array ('email' =>'taylor@example.com' ,'votes' =>0),
array ('email' =>'dayle@example.com' ,'votes' =>0),
));
Updates
Updating Records In A Table
..DB::table ('users' )
->where ('id' ,1)
->update (array ('votes' =>1));
Incrementing or decrementing a value of a column
..DB::table ('users' )->increment ('votes' );
DB::table ('users' )->increment ('votes' ,5);
DB::table ('users' )->decrement ('votes' );
DB::table ('users' )->decrement ('votes' ,5);
Youmayalsospecifyadditionalcolumnstoupdate:
..DB::table ('users' )->increment ('votes' ,1,array ('name' =>'John' ));
Deletes
Deleting Records In A Table
QueryBuilder 270
..DB::table ('users' )->where ('votes' ,'<',100)->delete ();
Deleting All Records From A Table
..DB::table ('users' )->delete ();
Truncating A Table
..DB::table ('users' )->truncate ();
Unions
Thequerybuilderalsoprovidesaquickwayto“union”twoqueriestogether:
..$first =DB::table ('users' )->whereNull ('first_name' );
$users =DB::table ('users' )->whereNull ('last_name' )->union ($first )->get();
The unionAll methodisalsoavailable,andhasthesamemethodsignatureas union.
Pessimistic Locking
The query builder includes a few functions to help you do “pessimistic locking” on your SELECT
statements.
ToruntheSELECTstatementwitha“sharedlock”,youmayusethe sharedLock methodonaquery:
..DB::table ('users' )->where ('votes' ,'>',100)->sharedLock ()->get();
To“lockforupdate”onaSELECTstatement,youmayusethe lockForUpdate methodonaquery:
QueryBuilder 271
..DB::table ('users' )->where ('votes' ,'>',100)->lockForUpdate ()->get();
Caching Queries
Youmayeasilycachetheresultsofaqueryusingthe remember orrememberForever method:
..$users =DB::table ('users' )->remember (10)->get();
Inthisexample,theresultsofthequerywillbecachedfortenminutes.Whiletheresultsarecached,
thequerywillnotberunagainstthedatabase,andtheresultswillbeloadedfromthedefaultcache
driverspecifiedforyourapplication.
Ifyouareusinga supportedcachedriver ,youcanalsoaddtagstothecaches:
..$users =DB::table ('users' )->cacheTags (array ('people' ,
'authors' ))->remember (10)->get();
Eloquent ORM
•Introduction
•BasicUsage
•MassAssignment
•Insert,Update,Delete
•SoftDeleting
•Timestamps
•QueryScopes
•GlobalScopes
•Relationships
•QueryingRelations
•EagerLoading
•InsertingRelatedModels
•TouchingParentTimestamps
•WorkingWithPivotTables
•Collections
•Accessors&Mutators
•DateMutators
•ModelEvents
•ModelObservers
•ConvertingToArrays/JSON
Introduction
TheEloquentORMincludedwithLaravelprovidesabeautiful,simpleActiveRecordimplementation
forworkingwithyourdatabase.Eachdatabasetablehasacorresponding“Model”whichisusedto
interactwiththattable.
Beforegettingstarted,besuretoconfigureadatabaseconnectionin app/config/database.php .
Basic Usage
Togetstarted,createanEloquentmodel.Modelstypicallyliveinthe app/models directory,butyou
arefreetoplacethemanywherethatcanbeauto-loadedaccordingtoyour composer.json file.
EloquentORM 273
Defining An Eloquent Model
..class User extends Eloquent {}
Note that we did not tell Eloquent which table to use for our Usermodel. The lower-case, plural
name of the class will be used as the table name unless another name is explicitly specified. So, in
thiscase,Eloquentwillassumethe Usermodelstoresrecordsinthe userstable.Youmayspecifya
customtablebydefininga tablepropertyonyourmodel:
..class User extends Eloquent {
protected $table ='my_users' ;
}
Note:Eloquent will also assume that each table has a primary key column named id.
Youmaydefinea primaryKey propertytooverridethisconvention.Likewise,youmay
define a connection property to override the name of the database connection that
shouldbeusedwhenutilizingthemodel.
Once a model is defined, you are ready to start retrieving and creating records in your table. Note
thatyouwillneedtoplace updated_at andcreated_at columnsonyourtablebydefault.Ifyoudo
not wish to have these columns automatically maintained, set the $timestamps property on your
modelto false.
Retrieving All Models
..$users =User ::all();
Retrieving A Record By Primary Key
..
EloquentORM 274
..$user =User ::find (1);
var_dump ($user ->name );
Note:All methods available on the query builder are also available when querying
Eloquentmodels.
Retrieving A Model By Primary Key Or Throw An Exception
Sometimesyoumaywishtothrowanexceptionifamodelisnotfound,allowingyoutocatchthe
exceptionsusingan App::error handleranddisplaya404page.
..$model =User ::findOrFail (1);
$model =User ::where ('votes' ,'>',100)->firstOrFail ();
Toregistertheerrorhandler,listenforthe ModelNotFoundException
..use Illuminate\Database\Eloquent\ModelNotFoundException;
App::error (function (ModelNotFoundException $e)
{
return Response ::make ('Not Found' ,404);
});
Querying Using Eloquent Models
..$users =User ::where ('votes' ,'>',100)->take (10)->get();
foreach ($users as$user )
{
var_dump ($user ->name );
}
EloquentORM 275
Eloquent Aggregates
Ofcourse,youmayalsousethequerybuilderaggregatefunctions.
..$count =User ::where ('votes' ,'>',100)->count ();
Ifyouareunabletogeneratethequeryyouneedviathefluentinterface,feelfreetouse whereRaw:
..$users =User ::whereRaw ('age > ? and votes = 100' ,array (25))->get();
Chunking Results
If you need to process a lot (thousands) of Eloquent records, using the chunkcommand will allow
youtodowithouteatingallofyourRAM:
..User ::chunk (200,function ($users )
{
foreach ($users as$user )
{
//
}
});
Thefirstargumentpassedtothemethodisthenumberofrecordsyouwishtoreceiveper“chunk”.
The Closure passed as the second argument will be called for each chunk that is pulled from the
database.
Specifying The Query Connection
YoumayalsospecifywhichdatabaseconnectionshouldbeusedwhenrunninganEloquentquery.
Simplyusethe onmethod:
..$user =User ::on('connection-name' )->find (1);
EloquentORM 276
Mass Assignment
When creating a new model, you pass an array of attributes to the model constructor. These
attributes are then assigned to the model via mass-assignment. This is convenient; however, can
bea serioussecurityconcernwhenblindlypassinguserinputintoamodel.Ifuserinputisblindly
passedintoamodel,theuserisfreetomodify anyandallofthemodel’sattributes.Forthisreason,
allEloquentmodelsprotectagainstmass-assignmentbydefault.
Togetstarted,setthe fillable orguardedpropertiesonyourmodel.
Defining Fillable Attributes On A Model
The fillable propertyspecifieswhichattributesshouldbemass-assignable.Thiscanbesetatthe
classorinstancelevel.
..class User extends Eloquent {
protected $fillable =array ('first_name' ,'last_name' ,'email' );
}
Inthisexample,onlythethreelistedattributeswillbemass-assignable.
Defining Guarded Attributes On A Model
Theinverseof fillable isguarded,andservesasa“black-list”insteadofa“white-list”:
..class User extends Eloquent {
protected $guarded =array ('id' ,'password' );
}
Note:Whenusing guarded,youshouldstillneverpass Input::get() oranyrawarray
ofusercontrolledinputintoa saveorupdatemethod,asanycolumnthatisnotguarded
maybeupdated.
EloquentORM 277
Blocking All Attributes From Mass Assignment
Intheexampleabove,the idandpasswordattributesmay notbemassassigned.Allotherattributes
will be mass assignable. You may also block allattributes from mass assignment using the guard
property:
..protected $guarded =array ('*');
Insert, Update, Delete
To create a new record in the database from a model, simply create a new model instance and call
thesavemethod.
Saving A New Model
..$user =new User;
$user ->name ='John' ;
$user ->save ();
Note:Typically, your Eloquent models will have auto-incrementing keys. However, if
you wish to specify your own keys, set the incrementing property on your model to
false.
Youmayalsousethe createmethodtosaveanewmodelinasingleline.Theinsertedmodelinstance
willbereturnedtoyoufromthemethod.However,beforedoingso,youwillneedtospecifyeithera
fillableorguardedattributeonthemodel,asallEloquentmodelsprotectagainstmass-assignment.
Aftersavingorcreatinganewmodelthatusesauto-incrementingIDs,youmayretrievetheIDby
accessingtheobject’s idattribute:
..$insertedId =$user ->id;
EloquentORM 278
Setting The Guarded Attributes On The Model
..class User extends Eloquent {
protected $guarded =array ('id' ,'account_id' );
}
Using The Model Create Method
..// Create a new user in the database...
$user =User ::create (array ('name' =>'John' ));
// Retrieve the user by the attributes, or create it if it doesn't exist...
$user =User ::firstOrCreate (array ('name' =>'John' ));
// Retrieve the user by the attributes, or instantiate a new instance...
$user =User ::firstOrNew (array ('name' =>'John' ));
Updating A Retrieved Model
Toupdateamodel,youmayretrieveit,changeanattribute,andusethe savemethod:
..$user =User ::find (1);
$user ->email ='john@foo.com' ;
$user ->save ();
Saving A Model And Relationships
Sometimes you may wish to save not only a model, but also all of its relationships. To do so, you
mayusethe pushmethod:
EloquentORM 279
..$user ->push ();
Youmayalsorunupdatesasqueriesagainstasetofmodels:
..$affectedRows =User ::where ('votes' ,'>',100)->update (array ('status' =>
2));
Note:NomodeleventsarefiredwhenupdatingasetofmodelsviatheEloquentquery
builder.
Deleting An Existing Model
Todeleteamodel,simplycallthe deletemethodontheinstance:
..$user =User ::find (1);
$user ->delete ();
Deleting An Existing Model By Key
..User ::destroy (1);
User ::destroy (array (1,2,3));
User ::destroy (1,2,3);
Ofcourse,youmayalsorunadeletequeryonasetofmodels:
..$affectedRows =User ::where ('votes' ,'>',100)->delete ();
EloquentORM 280
Updating Only The Model’s Timestamps
Ifyouwishtosimplyupdatethetimestampsonamodel,youmayusethe touchmethod:
..$user ->touch ();
Soft Deleting
When soft deleting a model, it is not actually removed from your database. Instead, a deleted_at
timestampissetontherecord.Toenablesoftdeletesforamodel,applythe SoftDeletingTrait to
themodel:
..use Illuminate\Database\Eloquent\SoftDeletingTrait;
class User extends Eloquent {
use SoftDeletingTrait;
protected $dates =['deleted_at' ];
}
Toadda deleted_at columntoyourtable,youmayusethe softDeletes methodfromamigration:
..$table ->softDeletes ();
Now, when you call the deletemethod on the model, the deleted_at column will be set to the
currenttimestamp.Whenqueryingamodelthatusessoftdeletes,the“deleted”modelswillnotbe
includedinqueryresults.
Forcing Soft Deleted Models Into Results
Toforcesoftdeletedmodelstoappearinaresultset,usethe withTrashed methodonthequery:
EloquentORM 281
..$users =User ::withTrashed ()->where ('account_id' ,1)->get();
The withTrashed methodmaybeusedonadefinedrelationship:
..$user ->posts ()->withTrashed ()->get();
Ifyouwishto onlyreceivesoftdeletedmodelsinyourresults,youmayusethe onlyTrashed method:
..$users =User ::onlyTrashed ()->where ('account_id' ,1)->get();
Torestoreasoftdeletedmodelintoanactivestate,usethe restoremethod:
..$user ->restore ();
Youmayalsousethe restoremethodonaquery:
..User ::withTrashed ()->where ('account_id' ,1)->restore ();
Likewith withTrashed ,the restoremethodmayalsobeusedonrelationships:
..$user ->posts ()->restore ();
Ifyouwishtotrulyremoveamodelfromthedatabase,youmayusethe forceDelete method:
..$user ->forceDelete ();
The forceDelete methodalsoworksonrelationships:
EloquentORM 282
..$user ->posts ()->forceDelete ();
Todetermineifagivenmodelinstancehasbeensoftdeleted,youmayusethe trashedmethod:
..if($user ->trashed ())
{
//
}
Timestamps
Bydefault,Eloquentwillmaintainthe created_at andupdated_at columnsonyourdatabasetable
automatically.Simplyaddthese timestamp columnstoyourtableandEloquentwilltakecareofthe
rest.IfyoudonotwishforEloquenttomaintainthesecolumns,addthefollowingpropertytoyour
model:
Disabling Auto Timestamps
..class User extends Eloquent {
protected $table ='users' ;
public $timestamps =false ;
}
Providing A Custom Timestamp Format
If you wish to customize the format of your timestamps, you may override the getDateFormat
methodinyourmodel:
..
EloquentORM 283
..class User extends Eloquent {
protected function getDateFormat ()
{
return 'U';
}
}
Query Scopes
Defining A Query Scope
Scopes allow you to easily re-use query logic in your models. To define a scope, simply prefix a
modelmethodwith scope:
..class User extends Eloquent {
public function scopePopular ($query )
{
return $query ->where ('votes' ,'>',100);
}
public function scopeWomen ($query )
{
return $query ->whereGender ('W');
}
}
Utilizing A Query Scope
..$users =User ::popular ()->women ()->orderBy ('created_at' )->get();
EloquentORM 284
Dynamic Scopes
Sometimes you may wish to define a scope that accepts parameters. Just add your parameters to
yourscopefunction:
..class User extends Eloquent {
public function scopeOfType ($query ,$type )
{
return $query ->whereType ($type );
}
}
Thenpasstheparameterintothescopecall:
..$users =User ::ofType ('member' )->get();
Global Scopes
Sometimes you may wish to define a scope that applies to all queries performed on a model. In
essence, this is how Eloquent’s own “soft delete” feature works. Global scopes are defined using a
combinationofPHPtraitsandanimplementationof Illuminate\Database\Eloquent\ScopeInterface .
First,let’sdefineatrait.Forthisexample,we’llusethe SoftDeletingTrait thatshipswithLaravel:
..trait SoftDeletingTrait {
/**
* Boot the soft deleting trait for a model.
*
* @return void
*/
public static function bootSoftDeletingTrait ()
{
static ::addGlobalScope (new SoftDeletingScope);
}
EloquentORM 285
..}
If an Eloquent model uses a trait that has a method matching the bootNameOfTrait naming
convention, that trait method will be called when the Eloquent model is booted, giving you an
opportunity to register a global scope, or do anything else you want. A scope must implement
ScopeInterface ,whichspecifiestwomethods: applyandremove.
The applymethodreceivesan Illuminate\Database\Eloquent\Builder querybuilderobject,and
is responsible for adding any additional whereclauses that the scope wishes to add. The remove
methodalsoreceivesa Builderobjectandisresponsibleforreversingtheactiontakenby apply.In
other words, removeshould remove the whereclause (or any other clause) that was added. So, for
ourSoftDeletingScope ,themethodslooksomethinglikethis:
../**
* Apply the scope to a given Eloquent query builder.
*
* @param \Illuminate\Database\Eloquent\Builder $builder
* @return void
*/
public function apply (Builder $builder )
{
$model =$builder ->getModel ();
$builder ->whereNull ($model ->getQualifiedDeletedAtColumn ());
}
/**
* Remove the scope from the given Eloquent query builder.
*
* @param \Illuminate\Database\Eloquent\Builder $builder
* @return void
*/
public function remove (Builder $builder )
{
$column =$builder ->getModel ()->getQualifiedDeletedAtColumn ();
$query =$builder ->getQuery ();
foreach ((array )$query ->wheres as$key =>$where )
{
// If the where clause is a soft delete date constraint, we will
remove it from
EloquentORM 286
..// the query and reset the keys on the wheres. This allows this
developer to
// include deleted model in a relationship result set that is lazy
loaded .
if($this ->isSoftDeleteConstraint ($where ,$column ))
{
unset ($query ->wheres [$key ]);
$query ->wheres =array_values ($query ->wheres );
}
}
}
Relationships
Of course, your database tables are probably related to one another. For example, a blog post may
have many comments, or an order could be related to the user who placed it. Eloquent makes
managingandworkingwiththeserelationshipseasy.Laravelsupportsmanytypesofrelationships:
•OneToOne
•OneToMany
•ManyToMany
•HasManyThrough
•PolymorphicRelations
•ManyToManyPolymorphicRelations
One To One
Defining A One To One Relation
Aone-to-onerelationshipisaverybasicrelation.Forexample,a Usermodelmighthaveone Phone.
WecandefinethisrelationinEloquent:
..
EloquentORM 287
..class User extends Eloquent {
public function phone ()
{
return $this ->hasOne ('Phone' );
}
}
The first argument passed to the hasOnemethod is the name of the related model. Once the
relationshipisdefined,wemayretrieveitusingEloquent’s dynamicproperties :
..$phone =User ::find (1)->phone ;
TheSQLperformedbythisstatementwillbeasfollows:
..select *from users where id =1
select *from phones where user_id =1
TakenotethatEloquentassumestheforeignkeyoftherelationshipbasedonthemodelname.Inthis
case, Phonemodelisassumedtousea user_idforeignkey.Ifyouwishtooverridethisconvention,
youmaypassasecondargumenttothe hasOnemethod.Furthermore,youmaypassathirdargument
tothemethodtospecifywhichlocalcolumnthatshouldbeusedfortheassociation:
..return $this ->hasOne ('Phone' ,'foreign_key' );
return $this ->hasOne ('Phone' ,'foreign_key' ,'local_key' );
Defining The Inverse Of A Relation
Todefinetheinverseoftherelationshiponthe Phonemodel,weusethe belongsTo method:
EloquentORM 288
..class Phone extends Eloquent {
public function user ()
{
return $this ->belongsTo ('User' );
}
}
Intheexampleabove,Eloquentwilllookfora user_idcolumnonthe phonestable.Ifyouwouldlike
todefineadifferentforeignkeycolumn,youmaypassitasthesecondargumenttothe belongsTo
method:
..class Phone extends Eloquent {
public function user ()
{
return $this ->belongsTo ('User' ,'local_key' );
}
}
Additionally,youpassathirdparameterwhichspecifiesthenameoftheassociatedcolumnonthe
parenttable:
..class Phone extends Eloquent {
public function user ()
{
return $this ->belongsTo ('User' ,'local_key' ,'parent_key' );
}
}
EloquentORM 289
One To Many
Anexampleofaone-to-manyrelationisablogpostthat“hasmany”comments.Wecanmodelthis
relationlikeso:
..class Post extends Eloquent {
public function comments ()
{
return $this ->hasMany ('Comment' );
}
}
Nowwecanaccessthepost’scommentsthroughthe dynamicproperty :
..$comments =Post ::find (1)->comments ;
Ifyouneedtoaddfurtherconstraintstowhichcommentsareretrieved,youmaycallthe comments
methodandcontinuechainingconditions:
..$comments =Post ::find (1)->comments ()->where ('title' ,'=','foo' )->first ();
Again,youmayoverridetheconventionalforeignkeybypassingasecondargumenttothe hasMany
method.And,likethe hasOnerelation,thelocalcolumnmayalsobespecified:
..return $this ->hasMany ('Comment' ,'foreign_key' );
return $this ->hasMany ('Comment' ,'foreign_key' ,'local_key' );
Defining The Inverse Of A Relation
Todefinetheinverseoftherelationshiponthe Commentmodel,weusethe belongsTo method:
EloquentORM 290
..class Comment extends Eloquent {
public function post ()
{
return $this ->belongsTo ('Post' );
}
}
Many To Many
Many-to-manyrelationsareamorecomplicatedrelationshiptype.Anexampleofsucharelationship
isa user with many roles,wherethe rolesarealso shared byother users. For example,many users
mayhavetheroleof“Admin”.Threedatabasetablesareneededforthisrelationship: users,roles,
and role_user . The role_user table is derived from the alphabetical order of the related model
names,andshouldhave user_idandrole_idcolumns.
Wecandefineamany-to-manyrelationusingthe belongsToMany method:
..class User extends Eloquent {
public function roles ()
{
return $this ->belongsToMany ('Role' );
}
}
Now,wecanretrievetherolesthroughthe Usermodel:
..$roles =User ::find (1)->roles ;
If you would like to use an unconventional table name for your pivot table, you may pass it as the
secondargumenttothe belongsToMany method:
EloquentORM 291
..return $this ->belongsToMany ('Role' ,'user_roles' );
Youmayalsooverridetheconventionalassociatedkeys:
..return $this ->belongsToMany ('Role' ,'user_roles' ,'user_id' ,'foo_id' );
Ofcourse,youmayalsodefinetheinverseoftherelationshiponthe Rolemodel:
..class Role extends Eloquent {
public function users ()
{
return $this ->belongsToMany ('User' );
}
}
Has Many Through
The “has many through” relation provides a convenient short-cut for accessing distant relations
viaanintermediaterelation.Forexample,a Countrymodelmighthavemany Postthrougha User
model.Thetablesforthisrelationshipwouldlooklikethis:
..countries
id-integer
name -string
users
id-integer
country_id -integer
name -string
posts
id-integer
user_id -integer
EloquentORM 292
..title -string
Even though the poststable does not contain a country_id column, the hasManyThrough relation
willallowustoaccessacountry’spostsvia $country->posts .Let’sdefinetherelationship:
..class Country extends Eloquent {
public function posts ()
{
return $this ->hasManyThrough ('Post' ,'User' );
}
}
If you would like to manually specify the keys of the relationship, you may pass them as the third
andfourthargumentstothemethod:
..class Country extends Eloquent {
public function posts ()
{
return $this ->hasManyThrough ('Post' ,'User' ,'country_id' ,
'user_id' );
}
}
Polymorphic Relations
Polymorphicrelationsallowamodeltobelongtomorethanoneothermodel,onasingleassociation.
Forexample,youmighthaveaphotomodelthatbelongstoeitherastaffmodeloranordermodel.
Wewoulddefinethisrelationlikeso:
..
EloquentORM 293
..class Photo extends Eloquent {
public function imageable ()
{
return $this ->morphTo ();
}
}
class Staff extends Eloquent {
public function photos ()
{
return $this ->morphMany ('Photo' ,'imageable' );
}
}
class Order extends Eloquent {
public function photos ()
{
return $this ->morphMany ('Photo' ,'imageable' );
}
}
Retrieving A Polymorphic Relation
Now,wecanretrievethephotosforeitherastaffmemberoranorder:
..$staff =Staff ::find (1);
foreach ($staff ->photos as$photo )
{
//
}
EloquentORM 294
Retrieving The Owner Of A Polymorphic Relation
However,thetrue“polymorphic”magiciswhenyouaccessthestaffororderfromthe Photomodel:
..$photo =Photo ::find (1);
$imageable =$photo ->imageable ;
The imageable relationonthe Photomodelwillreturneithera StafforOrderinstance,depending
onwhichtypeofmodelownsthephoto.
Polymorphic Relation Table Structure
Tohelpunderstandhowthisworks,let’sexplorethedatabasestructureforapolymorphicrelation:
..staff
id-integer
name -string
orders
id-integer
price -integer
photos
id-integer
path -string
imageable_id -integer
imageable_type -string
Thekeyfieldstonoticeherearethe imageable_id andimageable_type onthe photostable.TheID
willcontaintheIDvalueof,inthisexample,theowningstaffororder,whilethetypewillcontainthe
classnameoftheowningmodel.ThisiswhatallowstheORMtodeterminewhichtypeofowning
modeltoreturnwhenaccessingthe imageable relation.
Many To Many Polymorphic Relations
Polymorphic Many To Many Relation Table Structure
Inadditiontotraditionalpolymorphicrelations,youmayalsospecifymany-to-manypolymorphic
relations. For example, a blog Postand Videomodel could share a polymorphic relation to a Tag
model.First,let’sexaminethetablestructure:
EloquentORM 295
..posts
id-integer
name -string
videos
id-integer
name -string
tags
id-integer
name -string
taggables
tag_id -integer
taggable_id -integer
taggable_type -string
Next,we’rereadytosetuptherelationshipsonthemodel.The PostandVideomodelwillbothhave
amorphToMany relationshipviaa tagsmethod:
..class Post extends Eloquent {
public function tags ()
{
return $this ->morphToMany ('Tag' ,'taggable' );
}
}
The Tagmodelmaydefineamethodforeachofitsrelationships:
..class Tag extends Eloquent {
public function posts ()
{
return $this ->morphedByMany ('Post' ,'taggable' );
}
EloquentORM 296
..public function videos ()
{
return $this ->morphedByMany ('Video' ,'taggable' );
}
}
Querying Relations
Querying Relations When Selecting
Whenaccessingtherecordsforamodel,youmaywishtolimityourresultsbasedontheexistence
ofarelationship.Forexample,youwishtopullallblogpoststhathaveatleastonecomment.Todo
so,youmayusethe hasmethod:
..$posts =Post ::has('comments' )->get();
Youmayalsospecifyanoperatorandacount:
..$posts =Post ::has('comments' ,'>=' ,3)->get();
If you need even more power, you may use the whereHas and orWhereHas methods to put “where”
conditionsonyour hasqueries:
..$posts =Post ::whereHas ('comments' ,function ($q)
{
$q->where ('content' ,'like' ,'foo%' );
})->get();
Dynamic Properties
Eloquent allows you to access your relations via dynamic properties. Eloquent will automatically
loadtherelationshipforyou,andisevensmartenoughtoknowwhethertocallthe get(forone-to-
EloquentORM 297
manyrelationships)or first(forone-to-onerelationships)method.Itwillthenbeaccessibleviaa
dynamicpropertybythesamenameastherelation.Forexample,withthefollowingmodel $phone:
..class Phone extends Eloquent {
public function user ()
{
return $this ->belongsTo ('User' );
}
}
$phone =Phone ::find (1);
Insteadofechoingtheuser’semaillikethis:
..echo $phone ->user ()->first ()->email ;
Itmaybeshortenedtosimply:
..echo $phone ->user ->email ;
Note:Relationshipsthatreturnmanyresultswillreturnaninstanceofthe Illuminate\Database\Eloquent\Collection
class.
Eager Loading
EagerloadingexiststoalleviatetheN+1queryproblem.Forexample,considera Bookmodelthat
isrelatedto Author.Therelationshipisdefinedlikeso:
..
EloquentORM 298
..class Book extends Eloquent {
public function author ()
{
return $this ->belongsTo ('Author' );
}
}
Now,considerthefollowingcode:
..foreach (Book ::all()as$book )
{
echo $book ->author ->name ;
}
Thisloopwillexecute1querytoretrieveallofthebooksonthetable,thenanotherqueryforeach
booktoretrievetheauthor.So,ifwehave25books,thisloopwouldrun26queries.
Thankfully,wecanuseeagerloadingtodrasticallyreducethenumberofqueries.Therelationships
thatshouldbeeagerloadedmaybespecifiedviathe withmethod:
..foreach (Book ::with ('author' )->get()as$book )
{
echo $book ->author ->name ;
}
Intheloopabove,onlytwoquerieswillbeexecuted:
..select *from books
select *from authors where id in ( 1,2,3,4,5,...)
Wiseuseofeagerloadingcandrasticallyincreasetheperformanceofyourapplication.
Ofcourse,youmayeagerloadmultiplerelationshipsatonetime:
EloquentORM 299
..$books =Book ::with ('author' ,'publisher' )->get();
Youmayeveneagerloadnestedrelationships:
..$books =Book ::with ('author.contacts' )->get();
In the example above, the authorrelationship will be eager loaded, and the author’s contacts
relationwillalsobeloaded.
Eager Load Constraints
Sometimesyoumaywishtoeagerloadarelationship,butalsospecifyaconditionfortheeagerload.
Here’sanexample:
..$users =User ::with (array ('posts' =>function ($query )
{
$query ->where ('title' ,'like' ,'%first%' );
}))->get();
Inthisexample,we’reeagerloadingtheuser’sposts,butonlyifthepost’stitlecolumncontainsthe
word“first”.
Ofcourse,eagerloadingClosuresaren’tlimitedto“constraints”.Youmayalsoapplyorders:
..$users =User ::with (array ('posts' =>function ($query )
{
$query ->orderBy ('created_at' ,'desc' );
}))->get();
Lazy Eager Loading
Itisalsopossibletoeagerlyloadrelatedmodelsdirectlyfromanalreadyexistingmodelcollection.
This may be useful when dynamically deciding whether to load related models or not, or in
EloquentORM 300
combinationwithcaching.
..$books =Book ::all();
$books ->load ('author' ,'publisher' );
Inserting Related Models
Attaching A Related Model
You will often need to insert new related models. For example, you may wish to insert a new
comment for a post. Instead of manually setting the post_idforeign key on the model, you may
insertthenewcommentfromitsparent Postmodeldirectly:
..$comment =new Comment( array ('message' =>'A new comment.' ));
$post =Post ::find (1);
$comment =$post ->comments ()->save ($comment );
Inthisexample,the post_idfieldwillautomaticallybesetontheinsertedcomment.
Ifyouneedtosavemultiplerelatedmodels:
..$comments =array (
new Comment( array ('message' =>'A new comment.' )),
new Comment( array ('message' =>'Another comment.' )),
new Comment( array ('message' =>'The latest comment.' ))
);
$post =Post ::find (1);
$post ->comments ()->saveMany ($comments );
EloquentORM 301
Associating Models (Belongs To)
Whenupdatinga belongsTo relationship,youmayusethe associate method.Thismethodwillset
theforeignkeyonthechildmodel:
..$account =Account ::find (10);
$user ->account ()->associate ($account );
$user ->save ();
Inserting Related Models (Many To Many)
You may also insert related models when working with many-to-many relations. Let’s continue
using our Userand Rolemodels as examples. We can easily attach new roles to a user using the
attachmethod:
Attaching Many To Many Models
..$user =User ::find (1);
$user ->roles ()->attach (1);
Youmayalsopassanarrayofattributesthatshouldbestoredonthepivottablefortherelation:
..$user ->roles ()->attach (1,array ('expires' =>$expires ));
Ofcourse,theoppositeof attachisdetach:
..$user ->roles ()->detach (1);
Both attachanddetachalsotakearraysofIDsasinput:
EloquentORM 302
..$user =User ::find (1);
$user ->roles ()->detach ([1,2,3]);
$user ->roles ()->attach ([1=>['attribute1' =>'value1' ],2,3]);
Using Sync To Attach Many To Many Models
You may also use the syncmethod to attach related models. The syncmethod accepts an array of
IDstoplaceonthepivottable.Afterthisoperationiscomplete,onlytheIDsinthearraywillbeon
theintermediatetableforthemodel:
..$user ->roles ()->sync (array (1,2,3));
Adding Pivot Data When Syncing
YoumayalsoassociateotherpivottablevalueswiththegivenIDs:
..$user ->roles ()->sync (array (1=>array ('expires' =>true )));
Sometimesyoumaywishtocreateanewrelatedmodelandattachitinasinglecommand.Forthis
operation,youmayusethe savemethod:
..$role =new Role( array ('name' =>'Editor' ));
User ::find (1)->roles ()->save ($role );
In this example, the new Rolemodel will be saved and attached to the user model. You may also
passanarrayofattributestoplaceonthejoiningtableforthisoperation:
..User ::find (1)->roles ()->save ($role ,array ('expires' =>$expires ));
EloquentORM 303
Touching Parent Timestamps
When a model belongsTo another model, such as a Commentwhich belongs to a Post, it is often
helpful to update the parent’s timestamp when the child model is updated. For example, when a
Commentmodelisupdated,youmaywanttoautomaticallytouchthe updated_at timestampofthe
owning Post. Eloquent makes it easy. Just add a touchesproperty containing the names of the
relationshipstothechildmodel:
..class Comment extends Eloquent {
protected $touches =array ('post' );
public function post ()
{
return $this ->belongsTo ('Post' );
}
}
Now,whenyouupdatea Comment,theowning Postwillhaveits updated_at columnupdated:
..$comment =Comment ::find (1);
$comment ->text ='Edit to this comment!' ;
$comment ->save ();
Working With Pivot Tables
As you have already learned, working with many-to-many relations requires the presence of an
intermediate table. Eloquent provides some very helpful ways of interacting with this table. For
example, let’s assume our Userobject has many Roleobjects that it is related to. After accessing
thisrelationship,wemayaccessthe pivottableonthemodels:
..
EloquentORM 304
..$user =User ::find (1);
foreach ($user ->roles as$role )
{
echo $role ->pivot ->created_at ;
}
Noticethateach Rolemodelweretrieveisautomatically assigneda pivotattribute.This attribute
containsamodelrepresentingtheintermediatetable,andmaybeusedasanyotherEloquentmodel.
By default, only the keys will be present on the pivotobject. If your pivot table contains extra
attributes,youmustspecifythemwhendefiningtherelationship:
..return $this ->belongsToMany ('Role' )->withPivot ('foo' ,'bar' );
Nowthe fooandbarattributeswillbeaccessibleonour pivotobjectforthe Rolemodel.
If you want your pivot table to have automatically maintained created_at and updated_at
timestamps,usethe withTimestamps methodontherelationshipdefinition:
..return $this ->belongsToMany ('Role' )->withTimestamps ();
Deleting Records On A Pivot Table
Todeleteallrecordsonthepivottableforamodel,youmayusethe detachmethod:
..User ::find (1)->roles ()->detach ();
Notethatthisoperationdoesnotdeleterecordsfromthe rolestable,butonlyfromthepivottable.
Updating A Record On A Pivot Table
Sometimes you may need to update your pivot table, but not detach it. If you wish to update your
pivottableinplaceyoumayuse updateExistingPivot methodlikeso:
EloquentORM 305
..User ::find (1)->roles ()->updateExistingPivot ($roleId ,$attributes );
Defining A Custom Pivot Model
LaravelalsoallowsyoutodefineacustomPivotmodel.Todefineacustommodel,firstcreateyour
own“Base”modelclassthatextends Eloquent.InyourotherEloquentmodels,extendthiscustom
base model instead of the default Eloquent base. In your base model, add the following function
thatreturnsaninstanceofyourcustomPivotmodel:
..public function newPivot (Model $parent ,array $attributes ,$table ,$exists )
{
return new YourCustomPivot( $parent ,$attributes ,$table ,$exists );
}
Collections
Allmulti-resultsetsreturnedbyEloquent,eitherviathe getmethodora relationship ,willreturna
collectionobject.Thisobjectimplementsthe IteratorAggregate PHPinterfacesoitcanbeiterated
overlikeanarray.However,thisobjectalsohasavarietyofotherhelpfulmethodsforworkingwith
resultsets.
Checking If A Collection Contains A Key
For example, we may determine if a result set contains a given primary key using the contains
method:
..$roles =User ::find (1)->roles ;
if($roles ->contains (2))
{
//
}
CollectionsmayalsobeconvertedtoanarrayorJSON:
EloquentORM 306
..$roles =User ::find (1)->roles ->toArray ();
$roles =User ::find (1)->roles ->toJson ();
Ifacollectioniscasttoastring,itwillbereturnedasJSON:
..$roles =(string) User ::find (1)->roles ;
Iterating Collections
Eloquent collections also contain a few helpful methods for looping and filtering the items they
contain:
..$roles =$user ->roles ->each (function ($role )
{
//
});
Filtering Collections
Whenfilteringcollections,thecallbackprovidedwillbeusedascallbackfor array_filter ¹¹⁷.
..$users =$users ->filter (function ($user )
{
return $user ->isAdmin ();
});
Note:When filtering a collection and converting it to JSON, try calling the values
functionfirsttoresetthearray’skeys.
¹¹⁷http://php.net/manual/en/function.array-filter.php
EloquentORM 307
Applying A Callback To Each Collection Object
..$roles =User ::find (1)->roles ;
$roles ->each (function ($role )
{
//
});
Sorting A Collection By A Value
..$roles =$roles ->sortBy (function ($role )
{
return $role ->created_at ;
});
Sorting A Collection By A Value
..$roles =$roles ->sortBy ('created_at' );
Returning A Custom Collection Type
Sometimes,youmaywishtoreturnacustomCollectionobjectwithyourownaddedmethods.You
mayspecifythisonyourEloquentmodelbyoverridingthe newCollection method:
..class User extends Eloquent {
public function newCollection (array $models =array ())
{
return new CustomCollection( $models );
}
}
EloquentORM 308
Accessors & Mutators
Defining An Accessor
Eloquent provides a convenient way to transform your model attributes when getting or setting
them.Simplydefinea getFooAttribute methodonyourmodeltodeclareanaccessor.Keepinmind
thatthemethodsshouldfollowcamel-casing,eventhoughyourdatabasecolumnsaresnake-case:
..class User extends Eloquent {
public function getFirstNameAttribute ($value )
{
return ucfirst( $value );
}
}
In the example above, the first_name column has an accessor. Note that the value of the attribute
ispassedtotheaccessor.
Defining A Mutator
Mutatorsaredeclaredinasimilarfashion:
..class User extends Eloquent {
public function setFirstNameAttribute ($value )
{
$this ->attributes ['first_name' ]=strtolower( $value );
}
}
Date Mutators
Bydefault,Eloquentwillconvertthe created_at andupdated_at columnstoinstancesof Carbon¹¹⁸,
whichprovidesanassortmentofhelpfulmethods,andextendsthenativePHP DateTime class.
¹¹⁸https://github.com/briannesbitt/Carbon
EloquentORM 309
You may customize which fields are automatically mutated, and even completely disable this
mutation,byoverridingthe getDates methodofthemodel:
..public function getDates ()
{
return array ('created_at' );
}
Whenacolumnisconsideredadate,youmaysetitsvaluetoaUNIXtimestamp,datestring( Y-m-d),
date-timestring,andofcoursea DateTime /Carboninstance.
Tototallydisabledatemutations,simplyreturnanemptyarrayfromthe getDates method:
..public function getDates ()
{
return array ();
}
Model Events
Eloquentmodelsfireseveralevents,allowingyoutohookintovariouspointsinthemodel’slifecycle
using the following methods: creating,created,updating,updated,saving,saved,deleting,
deleted,restoring ,restored.
Whenever a new item is saved for the first time, the creating and createdevents will fire. If an
itemisnotnewandthe savemethodiscalled,the updating/updatedeventswillfire.Inbothcases,
thesaving/savedeventswillfire.
Cancelling Save Operations Via Events
Iffalseis returned from the creating,updating,saving, ordeleting events, the action will be
cancelled:
..User ::creating (function ($user )
{
if(!$user ->isValid ()) return false ;
});
EloquentORM 310
Setting A Model Boot Method
Eloquentmodelsalsocontainastatic bootmethod,whichmayprovideaconvenientplacetoregister
youreventbindings.
..class User extends Eloquent {
public static function boot ()
{
parent ::boot ();
// Setup event bindings...
}
}
Model Observers
Toconsolidatethehandlingofmodelevents,youmayregisteramodelobserver.Anobserverclass
mayhavemethodsthatcorrespondtothevariousmodelevents.Forexample, creating,updating,
savingmethodsmaybeonanobserver,inadditiontoanyothermodeleventname.
So,forexample,amodelobservermightlooklikethis:
..class UserObserver {
public function saving ($model )
{
//
}
public function saved ($model )
{
//
}
}
Youmayregisteranobserverinstanceusingthe observemethod:
EloquentORM 311
..User ::observe (new UserObserver);
Converting To Arrays / JSON
Converting A Model To An Array
WhenbuildingJSONAPIs,youmayoftenneedtoconvertyourmodelsandrelationshipstoarrays
orJSON.So,Eloquentincludesmethodsfordoingso.Toconvertamodelanditsloadedrelationship
toanarray,youmayusethe toArraymethod:
..$user =User ::with ('roles' )->first ();
return $user ->toArray ();
Notethatentirecollectionsofmodelsmayalsobeconvertedtoarrays:
..return User ::all()->toArray ();
Converting A Model To JSON
ToconvertamodeltoJSON,youmayusethe toJsonmethod:
..return User ::find (1)->toJson ();
Returning A Model From A Route
Notethatwhenamodelorcollectioniscasttoastring,itwillbeconvertedtoJSON,meaningyou
canreturnEloquentobjectsdirectlyfromyourapplication’sroutes!
EloquentORM 312
..Route ::get('users' ,function ()
{
return User ::all();
});
Hiding Attributes From Array Or JSON Conversion
Sometimes you may wish to limit the attributes that are included in your model’s array or JSON
form,suchaspasswords.Todoso,adda hiddenpropertydefinitiontoyourmodel:
..class User extends Eloquent {
protected $hidden =array ('password' );
}
Note:Whenhidingrelationships,usetherelationship’s methodname,notthedynamic
accessorname.
Alternatively,youmayusethe visiblepropertytodefineawhite-list:
..protected $visible =array ('first_name' ,'last_name' );
Occasionally,youmayneedtoaddarrayattributesthatdonothaveacorrespondingcolumninyour
database.Todoso,simplydefineanaccessorforthevalue:{#eloquent-array-appends}
..public function getIsAdminAttribute ()
{
return $this ->attributes ['admin' ]=='yes' ;
}
Onceyouhavecreatedtheaccessor,justaddthevaluetothe appendspropertyonthemodel:
EloquentORM 313
..protected $appends =array ('is_admin' );
Oncetheattributehasbeenaddedtothe appendslist,itwillbeincludedinboththemodel’sarray
andJSONforms.Attributesinthe appendsarrayrespectthe visibleandhiddenconfigurationon
themodel.
Schema Builder
•Introduction
•Creating&DroppingTables
•AddingColumns
•RenamingColumns
•DroppingColumns
•CheckingExistence
•AddingIndexes
•ForeignKeys
•DroppingIndexes
•DroppingTimestamps&SoftDeletes
•StorageEngines
Introduction
The Laravel Schemaclass provides a database agnostic way of manipulating tables. It works well
withallofthedatabasessupportedbyLaravel,andhasaunifiedAPIacrossallofthesesystems.
Creating & Dropping Tables
Tocreateanewdatabasetable,the Schema::create methodisused:
..Schema ::create ('users' ,function ($table )
{
$table ->increments ('id' );
});
Thefirstargumentpassedtothe createmethodisthenameofthetable,andthesecondisa Closure
whichwillreceivea Blueprint objectwhichmaybeusedtodefinethenewtable.
Torenameanexistingdatabasetable,the renamemethodmaybeused:
SchemaBuilder 315
..Schema ::rename ($from ,$to);
Tospecifywhichconnectiontheschemaoperationshouldtakeplaceon,usethe Schema::connection
method:
..Schema ::connection ('foo' )->create ('users' ,function ($table )
{
$table ->increments ('id' );
});
Todropatable,youmayusethe Schema::drop method:
..Schema ::drop ('users' );
Schema ::dropIfExists ('users' );
Adding Columns
Toupdateanexistingtable,wewillusethe Schema::table method:
..Schema ::table ('users' ,function ($table )
{
$table ->string ('email' );
});
Thetablebuildercontainsavarietyofcolumntypesthatyoumayusewhenbuildingyourtables:
SchemaBuilder 316
Command Description
$table->bigIncrements('id'); IncrementingIDusinga“biginteger”
equivalent.
$table->bigInteger('votes'); BIGINTequivalenttothetable
$table->binary('data'); BLOBequivalenttothetable
$table->boolean('confirmed'); BOOLEANequivalenttothetable
$table->char('name', 4); CHARequivalentwithalength
$table->date('created_at'); DATEequivalenttothetable
$table->dateTime('created_at'); DATETIMEequivalenttothetable
$table->decimal('amount', 5, 2); DECIMALequivalentwithaprecision
andscale
$table->double('column', 15, 8); DOUBLEequivalentwithprecision,15
digitsintotaland8afterthedecimal
point
$table->enum('choices',
array('foo', 'bar'));ENUMequivalenttothetable
$table->float('amount'); FLOATequivalenttothetable
$table->increments('id'); IncrementingIDtothetable(primary
key).
$table->integer('votes'); INTEGERequivalenttothetable
$table->longText('description'); LONGTEXTequivalenttothetable
$table->mediumInteger('numbers'); MEDIUMINTequivalenttothetable
$table->mediumText('description'); MEDIUMTEXTequivalenttothetable
$table->morphs('taggable'); AddsINTEGER taggable_id and
STRING taggable_type
$table->nullableTimestamps(); Sameas timestamps() ,exceptallows
NULLs
$table->smallInteger('votes'); SMALLINTequivalenttothetable
$table->tinyInteger('numbers'); TINYINTequivalenttothetable
$table->softDeletes(); Adds deleted\_at columnforsoft
deletes
$table->string('email'); VARCHARequivalentcolumn
$table->string('name', 100); VARCHARequivalentwithalength
$table->text('description'); TEXTequivalenttothetable
$table->time('sunrise'); TIMEequivalenttothetable
$table->timestamp('added_on'); TIMESTAMPequivalenttothetable
$table->timestamps(); Adds created\_at andupdated\_at
columns
$table->rememberToken(); Adds remember_token as
VARCHAR(100)NULL
->nullable() DesignatethatthecolumnallowsNULL
values
->default($value) Declareadefaultvalueforacolumn
->unsigned() SetINTEGERtoUNSIGNED
SchemaBuilder 317
Using After On MySQL
IfyouareusingtheMySQLdatabase,youmayusethe aftermethodtospecifytheorderofcolumns:
..$table ->string ('name' )->after ('email' );
Renaming Columns
To rename a column, you may use the renameColumn method on the Schema builder. Before
renamingacolumn,besuretoaddthe doctrine/dbal dependencytoyour composer.json file.
..Schema ::table ('users' ,function ($table )
{
$table ->renameColumn ('from' ,'to' );
});
Note:Renaming enumcolumntypesisnotsupported.
Dropping Columns
To drop a column, you may use the dropColumn method on the Schema builder. Before dropping a
column,besuretoaddthe doctrine/dbal dependencytoyour composer.json file.
Dropping A Column From A Database Table
..Schema ::table ('users' ,function ($table )
{
$table ->dropColumn ('votes' );
});
Dropping Multiple Columns From A Database Table
SchemaBuilder 318
..Schema ::table ('users' ,function ($table )
{
$table ->dropColumn (array ('votes' ,'avatar' ,'location' ));
});
Checking Existence
Checking For Existence Of Table
You may easily check for the existence of a table or column using the hasTable and hasColumn
methods:
..if(Schema ::hasTable ('users' ))
{
//
}
Checking For Existence Of Columns
..if(Schema ::hasColumn ('users' ,'email' ))
{
//
}
Adding Indexes
The schema builder supports several types of indexes. There are two ways to add them. First, you
mayfluentlydefinethemonacolumndefinition,oryoumayaddthemseparately:
..$table ->string ('email' )->unique ();
Or,youmaychoosetoaddtheindexesonseparatelines.Belowisalistofallavailableindextypes:
SchemaBuilder 319
Command Description
$table->primary('id'); Addingaprimarykey
$table->primary(array('first', 'last')); Addingcompositekeys
$table->unique('email'); Addingauniqueindex
$table->index('state'); Addingabasicindex
Foreign Keys
Laravelalsoprovidessupportforaddingforeignkeyconstraintstoyourtables:
..$table ->integer ('user_id' )->unsigned ();
$table ->foreign ('user_id' )->references ('id' )->on('users' );
Inthisexample,wearestatingthatthe user_idcolumnreferencesthe idcolumnonthe userstable.
Makesuretocreatetheforeignkeycolumnfirst!
Youmayalsospecifyoptionsforthe“ondelete”and“onupdate”actionsoftheconstraint:
..$table ->foreign ('user_id' )
->references ('id' )->on('users' )
->onDelete ('cascade' );
Todropaforeignkey,youmayusethe dropForeign method.Asimilarnamingconventionisused
forforeignkeysasisusedforotherindexes:
..$table ->dropForeign ('posts_user_id_foreign' );
Note:When creating a foreign key that references an incrementing integer, remember
toalwaysmaketheforeignkeycolumn unsigned.
Dropping Indexes
To drop an index you must specify the index’s name. Laravel assigns a reasonable name to the
indexes by default. Simply concatenate the table name, the names of the column in the index, and
theindextype.Herearesomeexamples:
SchemaBuilder 320
Command Description
$table->dropPrimary('users_id_-
primary');Droppingaprimarykeyfromthe
“users”table
$table->dropUnique('users_email_-
unique');Droppingauniqueindexfromthe
“users”table
$table->dropIndex('geo_state_-
index');Droppingabasicindexfromthe“geo”
table
Dropping Timestamps & SoftDeletes
To drop the timestamps ,nullableTimestamps orsoftDeletes column types, you may use the
followingmethods:
Command Description
$table->dropTimestamps(); Droppingthe created\_at andupdated\_at
columnsfromthetable
$table->dropSoftDeletes(); Dropping deleted\_at columnfromthetable
Storage Engines
Tosetthestorageengineforatable,setthe enginepropertyontheschemabuilder:
..Schema ::create ('users' ,function ($table )
{
$table ->engine ='InnoDB' ;
$table ->string ('email' );
});
Migrations & Seeding
•Introduction
•CreatingMigrations
•RunningMigrations
•RollingBackMigrations
•DatabaseSeeding
Introduction
Migrationsareatypeofversioncontrolforyourdatabase.Theyallowateamtomodifythedatabase
schema and stay up to date on the current schema state. Migrations are typically paired with the
SchemaBuilder toeasilymanageyourapplication’sschema.
Creating Migrations
Tocreateamigration,youmayusethe migrate:make commandontheArtisanCLI:
..php artisan migrate :make create_users_table
Themigrationwillbeplacedinyour app/database/migrations folder,andwillcontainatimestamp
whichallowstheframeworktodeterminetheorderofthemigrations.
You may also specify a --pathoption when creating the migration. The path should be relative to
therootdirectoryofyourinstallation:
..php artisan migrate :make foo --path =app/migrations
The --tableand--createoptionsmayalsobeusedtoindicatethenameofthetable,andwhether
themigrationwillbecreatinganewtable:
Migrations&Seeding 322
..php artisan migrate :make add_votes_to_user_table --table =users
php artisan migrate :make create_users_table --create =users
Running Migrations
Running All Outstanding Migrations
..php artisan migrate
Running All Outstanding Migrations For A Path
..php artisan migrate --path =app/foo/migrations
Running All Outstanding Migrations For A Package
..php artisan migrate --package =vendor /package
Note:Ifyoureceivea“classnotfound”errorwhenrunningmigrations,tryrunningthe
composer dump-autoload command.
Forcing Migrations In Production
Some migration operations are destructive, meaning they may cause you to lose data. In order to
protectyoufromrunningthesecommandsagainstyourproductiondatabase,youwillpromptedfor
confirmationbeforethesecommandsareexecuted.Toforcethecommandstorunwithoutaprompt,
usethe --forceflag:
Migrations&Seeding 323
..php artisan migrate --force
Rolling Back Migrations
Rollback The Last Migration Operation
..php artisan migrate :rollback
Rollback all migrations
..php artisan migrate :reset
Rollback all migrations and run them all again
..php artisan migrate :refresh
php artisan migrate :refresh --seed
Database Seeding
Laravel also includes a simple way to seed your database with test data using seed classes. All
seed classes are stored in app/database/seeds . Seed classes may have any name you wish, but
probably should follow some sensible convention, such as UserTableSeeder , etc. By default, a
DatabaseSeeder class is defined for you. From this class, you may use the callmethod to run
otherseedclasses,allowingyoutocontroltheseedingorder.
Example Database Seed Class
Migrations&Seeding 324
..class DatabaseSeeder extends Seeder {
public function run()
{
$this ->call ('UserTableSeeder' );
$this ->command ->info ('User table seeded!' );
}
}
class UserTableSeeder extends Seeder {
public function run()
{
DB::table ('users' )->delete ();
User ::create (array ('email' =>'foo@bar.com' ));
}
}
Toseedyourdatabase,youmayusethe db:seedcommandontheArtisanCLI:
..php artisan db :seed
Bydefault,the db:seedcommandrunsthe DatabaseSeeder class,whichmaybeusedtocallother
seed classes. However, you may use the --classoption to specify a specific seeder class to run
individually:
..php artisan db :seed --class =UserTableSeeder
You may also seed your database using the migrate:refresh command, which will also rollback
andre-runallofyourmigrations:
Migrations&Seeding 325
..php artisan migrate :refresh --seed
Redis
•Introduction
•Configuration
•Usage
•Pipelining
Introduction
Redis¹¹⁹isanopensource,advancedkey-valuestore.Itisoftenreferredtoasadatastructureserver
sincekeyscancontain strings¹²⁰,hashes¹²¹,lists¹²²,sets¹²³,andsortedsets ¹²⁴.
Note:If you have the Redis PHP extension installed via PECL, you will need to rename
thealiasforRedisinyour app/config/app.php file.
Configuration
TheRedisconfigurationforyourapplicationisstoredinthe app/config/database.php file.Within
thisfile,youwillseea redisarraycontainingtheRedisserversusedbyyourapplication:
..'redis' =>array (
'cluster' =>true ,
'default' =>array ('host' =>'127.0.0.1' ,'port' =>6379 ),
),
¹¹⁹http://redis.io
¹²⁰http://redis.io/topics/data-types#strings
¹²¹http://redis.io/topics/data-types#hashes
¹²²http://redis.io/topics/data-types#lists
¹²³http://redis.io/topics/data-types#sets
¹²⁴http://redis.io/topics/data-types#sorted-sets
Redis 327
The default server configuration should suffice for development. However, you are free to modify
this array based on your environment. Simply give each Redis server a name, and specify the host
andportusedbytheserver.
The clusteroption will tell the Laravel Redis client to perform client-side sharding across your
Redis nodes, allowing you to pool nodes and create a large amount of available RAM. However,
notethatclient-sideshardingdoesnothandlefailover;therefore,isprimarilysuitedforcacheddata
thatisavailablefromanotherprimarydatastore.
IfyourRedisserverrequiresauthentication,youmaysupplyapasswordbyaddinga password key
/valuepairtoyourRedisserverconfigurationarray.
Usage
YoumaygetaRedisinstancebycallingthe Redis::connection method:
..$redis =Redis ::connection ();
ThiswillgiveyouaninstanceofthedefaultRedisserver.Ifyouarenotusingserverclustering,you
maypasstheservernametothe connection methodtogetaspecificserverasdefinedinyourRedis
configuration:
..$redis =Redis ::connection ('other' );
Once you have an instance of the Redis client, we may issue any of the Redis commands ¹²⁵to the
instance.LaravelusesmagicmethodstopassthecommandstotheRedisserver:
..$redis ->set('name' ,'Taylor' );
$name =$redis ->get('name' );
$values =$redis ->lrange ('names' ,5,10);
Notice the arguments to the command are simply passed into the magic method. Of course, you
are not required to use the magic methods, you may also pass commands to the server using the
commandmethod:
¹²⁵http://redis.io/commands
Redis 328
..$values =$redis ->command ('lrange' ,array (5,10));
When you are simply executing commands against the default connection, just use static magic
methodsonthe Redisclass:
..Redis ::set('name' ,'Taylor' );
$name =Redis ::get('name' );
$values =Redis ::lrange ('names' ,5,10);
Note:RediscacheandsessiondriversareincludedwithLaravel.
Pipelining
Pipelining should be used when you need to send many commands to the server in one operation.
Togetstarted,usethe pipeline command:
Piping Many Commands To Your Servers
..Redis ::pipeline (function ($pipe )
{
for ($i=0;$i<1000 ;$i++)
{
$pipe ->set("key: $i",$i);
}
});
Artisan CLI
Artisan CLI
•Introduction
•Usage
Introduction
Artisan is the name of the command-line interface included with Laravel. It provides a number
of helpful commands for your use while developing your application. It is driven by the powerful
SymfonyConsolecomponent.
Usage
Listing All Available Commands
ToviewalistofallavailableArtisancommands,youmayusethe listcommand:
..php artisan list
Viewing The Help Screen For A Command
Everycommandalsoincludesa“help”screenwhichdisplaysanddescribesthecommand’savailable
argumentsandoptions.Toviewahelpscreen,simplyprecedethenameofthecommandwith help:
..php artisan help migrate
Specifying The Configuration Environment
Youmayspecifytheconfigurationenvironmentthatshouldbeusedwhilerunningacommandusing
the--envswitch:
ArtisanCLI 331
..php artisan migrate --env=local
Displaying Your Current Laravel Version
YoumayalsoviewthecurrentversionofyourLaravelinstallationusingthe --version option:
..php artisan --version
Artisan Development
•Introduction
•BuildingACommand
•RegisteringCommands
•CallingOtherCommands
Introduction
InadditiontothecommandsprovidedwithArtisan,youmayalsobuildyourowncustomcommands
for working with your application. You may store your custom commands in the app/commands
directory;however,youarefreetochooseyourownstoragelocationaslongasyourcommandscan
beautoloadedbasedonyour composer.json settings.
Building A Command
Generating The Class
Tocreateanewcommand,youmayusethe command:make Artisancommand,whichwillgenerate
acommandstubtohelpyougetstarted:
Generate A New Command Class
..php artisan command :make FooCommand
By default, generated commands will be stored in the app/commands directory; however, you may
specifycustompathornamespace:
..php artisan command :make FooCommand --path =app/classes --namespace =Classes
When creating the command, the --command option may be used to assign the terminal command
name:
ArtisanDevelopment 333
..php artisan command :make AssignUsers --command =users :assign
Writing The Command
Once your command is generated, you should fill out the nameand description properties of the
class,whichwillbeusedwhendisplayingyourcommandonthe listscreen.
The firemethod will be called when your command is executed. You may place any command
logicinthismethod.
Arguments & Options
The getArguments and getOptions methods are where you may define any arguments or options
yourcommandreceives.Bothofthesemethodsreturnanarrayofcommands,whicharedescribed
byalistofarrayoptions.
Whendefining arguments ,thearraydefinitionvaluesrepresentthefollowing:
..array ($name ,$mode ,$description ,$defaultValue )
Theargument modemaybeanyofthefollowing: InputArgument::REQUIRED orInputArgument::OPTIONAL .
Whendefining options,thearraydefinitionvaluesrepresentthefollowing:
..array ($name ,$shortcut ,$mode ,$description ,$defaultValue )
For options, the argument modemay be: InputOption::VALUE_REQUIRED ,InputOption::VALUE_-
OPTIONAL,InputOption::VALUE_IS_ARRAY ,InputOption::VALUE_NONE .
The VALUE_IS_ARRAY mode indicates that the switch may be used multiple times when calling the
command:
..php artisan foo --option =bar --option =baz
The VALUE_NONE optionindicatesthattheoptionissimplyusedasa“switch”:
ArtisanDevelopment 334
..php artisan foo --option
Retrieving Input
Whileyourcommandisexecuting,youwillobviouslyneedtoaccessthevaluesforthearguments
andoptionsacceptedbyyourapplication.Todoso,youmayusethe argumentandoptionmethods:
Retrieving The Value Of A Command Argument
..$value =$this ->argument ('name' );
Retrieving All Arguments
..$arguments =$this ->argument ();
Retrieving The Value Of A Command Option
..$value =$this ->option ('name' );
Retrieving All Options
..$options =$this ->option ();
Writing Output
Tosendoutputtotheconsole,youmayusethe info,comment,question anderrormethods.Each
ofthesemethodswillusetheappropriateANSIcolorsfortheirpurpose.
ArtisanDevelopment 335
Sending Information To The Console
..$this ->info ('Display this on the screen' );
Sending An Error Message To The Console
..$this ->error ('Something went wrong!' );
Asking Questions
Youmayalsousethe askandconfirmmethodstoprompttheuserforinput:
Asking The User For Input
..$name =$this ->ask('What is your name?' );
Asking The User For Secret Input
..$password =$this ->secret ('What is the password?' );
Asking The User For Confirmation
..if($this ->confirm ('Do you wish to continue? [yes|no]' ))
{
//
}
Youmayalsospecifyadefaultvaluetothe confirmmethod,whichshouldbe trueorfalse:
ArtisanDevelopment 336
..$this ->confirm ($question ,true );
Registering Commands
Registering An Artisan Command
Once your command is finished, you need to register it with Artisan so it will be available for
use. This is typically done in the app/start/artisan.php file. Within this file, you may use the
Artisan::add methodtoregisterthecommand:
..Artisan ::add(new CustomCommand);
Registering A Command That Is In The IoC Container
Ifyourcommandisregisteredintheapplication IoCcontainer ,youmayusethe Artisan::resolve
methodtomakeitavailabletoArtisan:
..Artisan ::resolve ('binding.name' );
Registering Commands In A Service Provider
If you need to register commands from within a service provider, you should call the commands
methodfromtheprovider’s bootmethod,passingthe IoCcontainer bindingforthecommand:
..public function boot ()
{
$this ->commands ('command.binding' );
}
ArtisanDevelopment 337
Calling Other Commands
Sometimes you may wish to call other commands from your command. You may do so using the
callmethod:
..$this ->call ('command:name' ,array ('argument' =>'foo' ,'--option' =>
'bar' ));
