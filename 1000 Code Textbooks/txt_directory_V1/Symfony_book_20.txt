The Bookfor Symfony 2.0
generated on November 25, 2013
The Book (2.0)
This work islicensed under the“Attribution-Share Alike 3.0Unported” license (http://creativecommons.org/
licenses/by-sa/3.0/ ).
You arefreetoshare (tocopy, distribute andtransmit thework), andtoremix (toadapt thework) under the
following conditions:
•Attribution :You must attribute thework inthemanner specified bytheauthor orlicensor (but
not in any way that suggests that they endorse you or your use of the work).
•Share Alike :Ifyoualter, transform, orbuild upon thiswork, youmay distribute theresulting work
only under thesame, similar oracompatible license. Foranyreuse ordistribution, youmust make
clear to others the license terms of this work.
The information inthisbook isdistributed onan“asis”basis, without warranty. Although every precaution
hasbeen taken inthepreparation ofthiswork, neither theauthor(s) norSensioLabs shall have anyliability to
anyperson orentity with respect toanylossordamage caused oralleged tobecaused directly orindirectly by
the information contained in this work.
Ifyou find typos orerrors, feel free toreport them bycreating aticket ontheSymfony ticketing system
(http://github.com/ symfony/ symfony-docs/ issues ).Based on tickets and users feedback, this book is
continuously updated.
Contents at a Glance
Symfony2 and HTTP Fundamentals .................................................................................................... 4
Symfony2 versus Flat PHP ................................................................................................................. 14
Installing and Configuring Symfony ................................................................................................... 27
Creating Pages in Symfony2 .............................................................................................................. 33
Controller ......................................................................................................................................... 46
Routing ............................................................................................................................................ 58
Creating and using Templates ........................................................................................................... 70
Databases and Doctrine .................................................................................................................... 87
Databases and Propel ...................................................................................................................... 111
Testing ........................................................................................................................................... 119
Validation ....................................................................................................................................... 133
Forms ............................................................................................................................................. 142
Security .......................................................................................................................................... 163
HTTP Cache ................................................................................................................................... 186
Translations .................................................................................................................................... 201
Service Container ............................................................................................................................ 213
Performance ................................................................................................................................... 224
Internals ......................................................................................................................................... 227
The Symfony2 Stable API ................................................................................................................ 236
PDF brought to you by
generated on November 25, 2013Contents at a Glance | iii
Chapter 1
Symfony2 and HTTP Fundamentals
Congratulations! Bylearning about Symfony2, you're well onyour way towards being amore productive ,
well-rounded and popular web developer (actually, you're onyour own forthelastpart). Symfony2 is
built togetback tobasics: todevelop tools that letyoudevelop faster andbuild more robust applications,
while staying outofyour way. Symfony isbuilt onthebest ideas from many technologies: thetools and
concepts you're about tolearn represent theefforts ofthousands ofpeople, over many years. Inother
words, you're notjust learning "Symfony", you're learning thefundamentals oftheweb, development
best practices, and how tousemany amazing new PHP libraries, inside orindependently ofSymfony2.
So, get ready.
True totheSymfony2 philosophy, thischapter begins byexplaining thefundamental concept common
toweb development: HTTP. Regardless ofyour background orpreferred programming language, this
chapter is a must-read for everyone.
HTTP is Simple
HTTP (Hypertext Transfer Protocol tothegeeks) isatext language that allows two machines to
communicate with each other. That's it!Forexample, when checking forthelatest xkcd1comic, the
following (approximate) conversation takes place:
1.http://xkcd.com/
PDF brought to you by
generated on November 25, 2013Chapter 1: Symfony2 and HTTP Fundamentals | 4
Listing 1-1
And while theactual language used isabitmore formal, it'sstilldead-simple. HTTP istheterm used to
describe thissimple text-based language. And nomatter how you develop ontheweb, thegoal ofyour
server is always to understand simple text requests, and return simple text responses.
Symfony2 isbuilt from theground-up around that reality. Whether you realize itornot, HTTP is
something you use everyday. With Symfony2, you'll learn how to master it.
Step1: The Client sends a Request
Every conversation ontheweb starts with arequest .The request isatext message created byaclient (e.g.
abrowser, aniPhone app, etc) inaspecial format known asHTTP. The client sends that request toa
server, and then waits for the response.
Take a look at the first part of the interaction (the request) between a browser and the xkcd web server:
In HTTP-speak, this HTTP request would actually look something like this:
1
2
3
4GET / HTTP/1.1
Host: xkcd.com
Accept: text/html
User-Agent: Mozilla/5.0 (Macintosh)
This simple message communicates everything necessary about exactly which resource theclient is
requesting. The first lineofanHTTP request isthemost important andcontains twothings: theURI and
the HTTP method.
The URI (e.g. /,/contact ,etc) istheunique address orlocation that identifies theresource theclient
wants. The HTTP method (e.g. GET)defines what youwant todowith theresource. The HTTP methods
are the verbs of the request and define the few common ways that you can act upon the resource:
PDF brought to you by
generated on November 25, 2013Chapter 1: Symfony2 and HTTP Fundamentals | 5
Listing 1-2
Listing 1-3GET Retrieve the resource from the server
POST Create a resource on the server
PUT Update the resource on the server
DELETE Delete the resource from the server
With thisinmind, youcanimagine what anHTTP request might look liketodelete aspecific blog entry,
for example:
1DELETE /blog/15 HTTP/1.1
There areactually nine HTTP methods defined bytheHTTP specification, butmany ofthem are
notwidely used orsupported. Inreality, many modern browsers don't support thePUTandDELETE
methods.
Inaddition tothefirst line, anHTTP request invariably contains other lines ofinformation called request
headers. The headers cansupply awide range ofinformation such astherequested Host,theresponse
formats theclient accepts (Accept)and theapplication theclient isusing tomake therequest (User-
Agent). Many other headers exist and can be found on Wikipedia's List of HTTP header fields2article.
Step 2: The Server returns a Response
Once aserver hasreceived therequest, itknows exactly which resource theclient needs (via theURI)
and what theclient wants todowith that resource (viathemethod). Forexample, inthecase ofaGET
request, theserver prepares theresource andreturns itinanHTTP response. Consider theresponse from
the xkcd web server:
Translated into HTTP, the response sent back to the browser will look something like this:
1
2
3
4
5
6HTTP/1.1 200 OK
Date: Sat, 02 Apr 2011 21:05:05 GMT
Server: lighttpd/1.4.19
Content-Type: text/html
<html>
2.http://en.wikipedia.org/wiki/List_of_HTTP_header_fields
PDF brought to you by
generated on November 25, 2013Chapter 1: Symfony2 and HTTP Fundamentals | 6
Listing 1-47
8<!-- ... HTML for the xkcd comic -->
</html>
The HTTP response contains therequested resource (the HTML content inthis case), aswell asother
information about theresponse. The first line isespecially important and contains theHTTP response
status code (200 inthis case). The status code communicates theoverall outcome oftherequest back
totheclient. Was therequest successful? Was there anerror? Different status codes exist that indicate
success, anerror, orthat theclient needs todosomething (e.g. redirect toanother page). Afulllistcan
be found on Wikipedia's List of HTTP status codes3article.
Like therequest, anHTTP response contains additional pieces ofinformation known asHTTP headers.
Forexample, one important HTTP response header isContent-Type .The body ofthesame resource
could bereturned inmultiple different formats likeHTML, XML, orJSON andtheContent-Type header
uses Internet Media Types like text/htmltotelltheclient which format isbeing returned. Alistof
common media types can be found on Wikipedia's List of common media types4article.
Many other headers exist, some ofwhich arevery powerful. Forexample, certain headers canbeused to
create a powerful caching system.
Requests, Responses and Web Development
This request-response conversation isthefundamental process that drives allcommunication ontheweb.
And as important and powerful as this process is, it's inescapably simple.
The most important fact isthis: regardless ofthelanguage you use, thetype ofapplication you build
(web, mobile, JSON API), orthedevelopment philosophy you follow, theend goal ofanapplication is
always to understand each request and create and return the appropriate response.
Symfony is architected to match this reality.
Tolearn more about theHTTP specification, read theoriginal HTTP 1.1RFC5ortheHTTP Bis6,
which isanactive effort toclarify theoriginal specification. Agreat tool tocheck both therequest
and response headers while browsing is the Live HTTP Headers7extension for Firefox.
Requests and Responses in PHP
Sohow doyou interact with the"request" and create a"response" when using PHP? Inreality, PHP
abstracts you a bit from the whole process:
1
2
3
4
5
6$uri=$_SERVER ['REQUEST_URI' ];
$foo=$_GET['foo'];
header('Content-type: text/html' );
echo'The URI requested is: ' .$uri;
echo'The value of the "foo" parameter is: ' .$foo;
Asstrange asitsounds, thissmall application isinfacttaking information from theHTTP request and
using ittocreate anHTTP response. Instead ofparsing theraw HTTP request message, PHP prepares
superglobal variables such as$_SERVER and $_GETthat contain alltheinformation from therequest.
3.http://en.wikipedia.org/wiki/List_of_HTTP_status_codes
4.http://en.wikipedia.org/wiki/Internet_media_type#List_of_common_media_types
5.http://www.w3.org/Protocols/rfc2616/rfc2616.html
6.http://datatracker.ietf.org/wg/httpbis/
7.https://addons.mozilla.org/en-US/firefox/addon/live-http-headers/
PDF brought to you by
generated on November 25, 2013Chapter 1: Symfony2 and HTTP Fundamentals | 7
Listing 1-5
Listing 1-6Similarly, instead ofreturning theHTTP-formatted text response, youcanusetheheader() function to
create response headers and simply print outtheactual content that will bethecontent portion ofthe
response message. PHP will create a true HTTP response and return it to the client:
1
2
3
4
5
6
7HTTP/1.1 200 OK
Date: Sat, 03 Apr 2011 02:14:33 GMT
Server: Apache/2.2.17 (Unix)
Content-Type: text/html
The URI requested is: /testing?foo=symfony
The value of the "foo" parameter is: symfony
Requests and Responses in Symfony
Symfony provides analternative totheraw PHP approach viatwo classes that allow you tointeract
with theHTTP request and response inaneasier way. The Request8class isasimple object-oriented
representation oftheHTTP request message. With it,you have alltherequest information atyour
fingertips:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26useSymfony\Component\HttpFoundation\Request ;
$request =Request::createFromGlobals ();
// the URI being requested (e.g. /about) minus any query parameters
$request ->getPathInfo ();
// retrieve GET and POST variables respectively
$request ->query->get('foo');
$request ->request->get('bar','default value if bar does not exist' );
// retrieve SERVER variables
$request ->server->get('HTTP_HOST' );
// retrieves an instance of UploadedFile identified by foo
$request ->files->get('foo');
// retrieve a COOKIE value
$request ->cookies->get('PHPSESSID' );
// retrieve an HTTP request header, with normalized, lowercase keys
$request ->headers->get('host');
$request ->headers->get('content_type' );
$request ->getMethod (); // GET, POST, PUT, DELETE, HEAD
$request ->getLanguages (); // an array of languages the client accepts
Asabonus, theRequestclass does alotofwork inthebackground that you'll never need toworry about.
Forexample, theisSecure() method checks thethree different values inPHP that canindicate whether
or not the user is connecting via a secured connection (i.e. https).
8.http://api.symfony.com/2.0/Symfony/Component/HttpFoundation/Request.html
PDF brought to you by
generated on November 25, 2013Chapter 1: Symfony2 and HTTP Fundamentals | 8
Listing 1-7ParameterBags and Request attributes
Asseen above, the$_GETand $_POSTvariables areaccessible viathepublic queryand request
properties respectively. Each ofthese objects isaParameterBag9object, which hasmethods like
get()10,has()11,all()12andmore. Infact, every public property used intheprevious example is
some instance of the ParameterBag.
The Request class also hasapublic attributes property, which holds special data related tohow
theapplication works internally. FortheSymfony2 framework, theattributes holds thevalues
returned bythematched route, like_controller ,id(ifyouhave an{id}wildcard), andeven the
name ofthematched route (_route).The attributes property exists entirely tobeaplace where
you can prepare and store context-specific information about the request.
Symfony also provides aResponse class: asimple PHP representation ofanHTTP response message.
This allows your application touseanobject-oriented interface toconstruct theresponse that needs to
be returned to the client:
1
2
3
4
5
6
7
8
9useSymfony\Component\HttpFoundation\Response ;
$response =newResponse ();
$response ->setContent ('<html><body><h1>Hello world!</h1></body></html>' );
$response ->setStatusCode (200);
$response ->headers->set('Content-Type' ,'text/html' );
// prints the HTTP headers followed by the content
$response ->send();
IfSymfony offered nothing else, youwould already have atoolkit foreasily accessing request information
andanobject-oriented interface forcreating theresponse. Even asyoulearn themany powerful features
inSymfony, keep inmind that thegoal ofyour application isalways tointerpret arequest andcreate the
appropriate response based on your application logic .
The Request and Response classes arepart ofastandalone component included with Symfony
called HttpFoundation .This component canbeused entirely independently ofSymfony and also
provides classes for handling sessions and file uploads.
The Journey from the Request to the Response
Like HTTP itself, theRequest and Response objects arepretty simple. The hard part ofbuilding an
application iswriting what comes inbetween. Inother words, thereal work comes inwriting thecode
that interprets the request information and creates the response.
Your application probably does many things, like sending emails, handling form submissions, saving
things toadatabase, rendering HTML pages andprotecting content with security. How canyoumanage
all of this and still keep your code organized and maintainable?
Symfony was created to solve these problems so that you don't have to.
9.http://api.symfony.com/2.0/Symfony/Component/HttpFoundation/ParameterBag.html
10.http://api.symfony.com/2.0/Symfony/Component/HttpFoundation/ParameterBag.html#get()
11.http://api.symfony.com/2.0/Symfony/Component/HttpFoundation/ParameterBag.html#has()
12.http://api.symfony.com/2.0/Symfony/Component/HttpFoundation/ParameterBag.html#all()
PDF brought to you by
generated on November 25, 2013Chapter 1: Symfony2 and HTTP Fundamentals | 9
Listing 1-8
Listing 1-9The Front Controller
Traditionally, applications were built so that each "page" of a site was its own physical file:
1
2
3index.php
contact.php
blog.php
There areseveral problems with this approach, including theinflexibility oftheURLs (what ifyou
wanted tochange blog.php tonews.php without breaking allofyour links?) and thefactthat each file
must manually include some setofcore files sothat security, database connections andthe"look" ofthe
site can remain consistent.
Amuch better solution istouseafront controller :asingle PHP filethat handles every request coming
into your application. For example:
/index.php executes index.php
/index.php/contact executes index.php
/index.php/blog executes index.php
Using Apache's mod_rewrite (orequivalent with other web servers), theURLs can easily be
cleaned up to be just /,/contact and/blog.
Now, every request ishandled exactly thesame way. Instead ofindividual URLs executing different PHP
files, thefront controller isalways executed, and therouting ofdifferent URLs todifferent parts ofyour
application isdone internally. This solves both problems with theoriginal approach. Almost allmodern
web apps do this - including apps like WordPress.
Stay Organized
Inside your front controller, youhave tofigure outwhich code should beexecuted andwhat thecontent
toreturn should be.Tofigure thisout, you'll need tocheck theincoming URI andexecute different parts
of your code depending on that value. This can get ugly quickly:
1
2
3
4
5
6
7
8
9
10
11
12
13
14// index.php
useSymfony\Component\HttpFoundation\Request ;
useSymfony\Component\HttpFoundation\Response ;
$request =Request::createFromGlobals ();
$path=$request ->getPathInfo ();// the URI path being requested
if(in_array ($path,array('','/'))){
$response =newResponse ('Welcome to the homepage.' );
}elseif($path=='/contact' ){
$response =newResponse ('Contact us' );
}else{
$response =newResponse ('Page not found.' ,404);
}
$response ->send();
Solving this problem can be difficult. Fortunately it's exactly what Symfony is designed to do.
PDF brought to you by
generated on November 25, 2013Chapter 1: Symfony2 and HTTP Fundamentals | 10
Listing 1-10
Listing 1-11The Symfony Application Flow
When youletSymfony handle each request, lifeismuch easier. Symfony follows thesame simple pattern
for every request:
Incoming requests areinterpreted bytherouting andpassed tocontroller functions that return Response
objects.
Each "page" ofyour siteisdefined inarouting configuration filethat maps different URLs todifferent
PHP functions. The jobofeach PHP function, called acontroller ,istouseinformation from therequest -
along with many other tools Symfony makes available -tocreate and return aResponse object. Inother
words, the controller is where your code goes: it's where you interpret the request and create a response.
It's that easy! To review:
•Each request executes a front controller file;
•The routing system determines which PHP function should beexecuted based oninformation
from the request and routing configuration you've created;
•The correct PHP function isexecuted, where your code creates and returns theappropriate
Response object.
A Symfony Request in Action
Without diving into toomuch detail, here isthisprocess inaction. Suppose youwant toadda/contact
page toyour Symfony application. First, start byadding anentry for/contact toyour routing
configuration file:
1
2
3
4# app/config/routing.yml
contact:
pattern:/contact
defaults :{_controller :AcmeDemoBundle :Main:contact }
This example uses YAML todefine therouting configuration. Routing configuration canalso be
written in other formats such as XML or PHP.
When someone visits the/contact page, thisroute ismatched, andthespecified controller isexecuted.
Asyou'll learn intherouting chapter ,theAcmeDemoBundle:Main:contact string isashort syntax that
points to a specific PHP method contactAction inside a class called MainController :
PDF brought to you by
generated on November 25, 2013Chapter 1: Symfony2 and HTTP Fundamentals | 11
1
2
3
4
5
6
7
8
9
10// src/Acme/DemoBundle/Controller/MainController.php
useSymfony\Component\HttpFoundation\Response ;
classMainController
{
publicfunction contactAction ()
{
returnnewResponse ('<h1>Contact us!</h1>' );
}
}
Inthis very simple example, the controller simply creates aResponse13object with the HTML
"<h1>Contact us!</h1>" .Inthecontroller chapter ,you'll learn how acontroller canrender templates,
allowing your "presentation" code (i.e. anything that actually writes outHTML) toliveinaseparate
template file. This frees upthecontroller toworry only about thehard stuff: interacting with the
database, handling submitted data, or sending email messages.
Symfony2: Build your App, not your Tools.
You now know that thegoal ofanyapp istointerpret each incoming request and create anappropriate
response. Asanapplication grows, itbecomes more difficult tokeep your code organized and
maintainable. Invariably, thesame complex tasks keep coming upover andover again: persisting things
tothedatabase, rendering andreusing templates, handling form submissions, sending emails, validating
user input and handling security.
The good news isthat none ofthese problems isunique. Symfony provides aframework fulloftools that
allow you tobuild your application, notyour tools. With Symfony2, nothing isimposed onyou: you're
free to use the full Symfony framework, or just one piece of Symfony all by itself.
Standalone Tools: The Symfony2 Components
Sowhat isSymfony2? First, Symfony2 isacollection ofover twenty independent libraries that canbe
used inside anyPHP project. These libraries, called theSymfony2 Components ,contain something useful
for almost any situation, regardless of how your project is developed. To name a few:
•HttpFoundation -Contains theRequest and Response classes, aswell asother classes for
handling sessions and file uploads;
•Routing -Powerful and fast routing system that allows you tomap aspecific URI (e.g.
/contact )tosome information about how that request should behandled (e.g. execute the
contactAction() method);
•Form14-Afull-featured and flexible framework forcreating forms and handling form
submissions;
•Validator15Asystem forcreating rules about data and then validating whether ornotuser-
submitted data follows those rules;
•ClassLoader Anautoloading library that allows PHP classes tobeused without needing to
manually requirethe files containing those classes;
•Templating Atoolkit forrendering templates, handling template inheritance (i.e. atemplate is
decorated with a layout) and performing other common template tasks;
•Security16- A powerful library for handling all types of security inside an application;
•Translation17A framework for translating strings in your application.
13.http://api.symfony.com/2.0/Symfony/Component/HttpFoundation/Response.html
14. https://github.com/symfony/Form
15. https://github.com/symfony/Validator
16. https://github.com/symfony/Security
PDF brought to you by
generated on November 25, 2013Chapter 1: Symfony2 and HTTP Fundamentals | 12
Each andevery oneofthese components isdecoupled andcanbeused inanyPHP project, regardless of
whether ornotyou usetheSymfony2 framework. Every part ismade tobeused ifneeded and replaced
when necessary.
The Full Solution: The Symfony2 Framework
Sothen, what istheSymfony2 Framework ?The Symfony2 Framework isaPHP library that accomplishes
two distinct tasks:
1.Provides aselection ofcomponents (i.e. theSymfony2 Components) and third-party libraries
(e.g. Swiftmailer18for sending emails);
2.Provides sensible configuration and a "glue" library that ties all of these pieces together.
The goal oftheframework istointegrate many independent tools inorder toprovide aconsistent
experience forthedeveloper. Even theframework itself isaSymfony2 bundle (i.e. aplugin) that canbe
configured or replaced entirely.
Symfony2 provides apowerful setoftools forrapidly developing web applications without imposing on
your application. Normal users canquickly start development byusing aSymfony2 distribution, which
provides a project skeleton with sensible defaults. For more advanced users, the sky is the limit.
17. https://github.com/symfony/Translation
18. http://swiftmailer.org/
PDF brought to you by
generated on November 25, 2013Chapter 1: Symfony2 and HTTP Fundamentals | 13
Listing 2-1Chapter 2
Symfony2 versus Flat PHP
Why is Symfony2 better than just opening up a file and writing flat PHP?
Ifyou've never used aPHP framework, aren't familiar with theMVC philosophy, orjustwonder what all
thehype isaround Symfony2, thischapter isforyou. Instead oftelling youthat Symfony2 allows youto
develop faster and better software than with flat PHP, you'll see for yourself.
Inthischapter, you'll write asimple application inflatPHP, and then refactor ittobemore organized.
You'll travel through time, seeing thedecisions behind why web development hasevolved over thepast
several years to where it is now.
Bytheend, you'll seehow Symfony2 canrescue you from mundane tasks and letyou take back control
of your code.
A simple Blog in flat PHP
Inthischapter, you'll build thetoken blog application using only flatPHP. Tobegin, create asingle page
that displays blog entries that have been persisted tothedatabase. Writing inflatPHP isquick anddirty:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17<?php
// index.php
$link=mysql_connect ('localhost' ,'myuser' ,'mypassword' );
mysql_select_db ('blog_db' ,$link);
$result =mysql_query ('SELECT id, title FROM post' ,$link);
?>
<!DOCTYPE html>
<html>
<head>
<title>List of Posts </title>
</head>
<body>
<h1>List of Posts </h1>
<ul>
<?phpwhile($row=mysql_fetch_assoc ($result)):?>
PDF brought to you by
generated on November 25, 2013Chapter 2: Symfony2 versus Flat PHP | 14
Listing 2-218
19
20
21
22
23
24
25
26
27
28
29
30<li>
<ahref="/show.php?id= <?phpecho$row['id']?>">
<?phpecho$row['title']?>
</a>
</li>
<?phpendwhile ;?>
</ul>
</body>
</html>
<?php
mysql_close ($link);
?>
That's quick towrite, fasttoexecute, and, asyour app grows, impossible tomaintain. There areseveral
problems that need to be addressed:
•No error-checking : What if the connection to the database fails?
•Poor organization :Ifthe application grows, this single file will become increasingly
unmaintainable. Where should you put code tohandle aform submission? How can you
validate data? Where should code go for sending emails?
•Difficult toreuse code :Since everything isinonefile,there's noway toreuse anypart ofthe
application for other "pages" of the blog.
Another problem notmentioned here isthefactthat thedatabase istied toMySQL. Though not
covered here, Symfony2 fully integrates Doctrine1,alibrary dedicated todatabase abstraction and
mapping.
Let's get to work on solving these problems and more.
Isolating the Presentation
The code canimmediately gain from separating theapplication "logic" from thecode that prepares the
HTML "presentation":
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16<?php
// index.php
$link=mysql_connect ('localhost' ,'myuser' ,'mypassword' );
mysql_select_db ('blog_db' ,$link);
$result =mysql_query ('SELECT id, title FROM post' ,$link);
$posts=array();
while($row=mysql_fetch_assoc ($result)){
$posts[]=$row;
}
mysql_close ($link);
// include the HTML presentation code
require 'templates/list.php' ;
The HTML code isnow stored inaseparate file(templates/ list.php ),which isprimarily anHTML file
that uses a template-like PHP syntax:
1.http://www.doctrine-project.org
PDF brought to you by
generated on November 25, 2013Chapter 2: Symfony2 versus Flat PHP | 15
Listing 2-3
Listing 2-41
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18<!DOCTYPE html>
<html>
<head>
<title>List of Posts </title>
</head>
<body>
<h1>List of Posts </h1>
<ul>
<?phpforeach ($postsas$post):?>
<li>
<ahref="/read?id= <?phpecho$post['id']?>">
<?phpecho$post['title']?>
</a>
</li>
<?phpendforeach ;?>
</ul>
</body>
</html>
Byconvention, thefilethat contains alloftheapplication logic -index.php -isknown asa"controller".
The term controller isaword you'll hear alot,regardless ofthelanguage orframework youuse. Itrefers
simply to the area of your code that processes user input and prepares the response.
Inthiscase, thecontroller prepares data from thedatabase and then includes atemplate topresent that
data. With thecontroller isolated, you could easily change justthetemplate fileifyou needed torender
the blog entries in some other format (e.g. list.json.php for JSON format).
Isolating the Application (Domain) Logic
Sofartheapplication contains only onepage. Butwhat ifasecond page needed tousethesame database
connection, oreven thesame array ofblog posts? Refactor thecode sothat thecore behavior and data-
access functions of the application are isolated in a new file called model.php :
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24<?php
// model.php
function open_database_connection ()
{
$link=mysql_connect ('localhost' ,'myuser' ,'mypassword' );
mysql_select_db ('blog_db' ,$link);
return$link;
}
function close_database_connection ($link)
{
mysql_close ($link);
}
function get_all_posts ()
{
$link=open_database_connection ();
$result =mysql_query ('SELECT id, title FROM post' ,$link);
$posts=array();
while($row=mysql_fetch_assoc ($result)){
$posts[]=$row;
}
PDF brought to you by
generated on November 25, 2013Chapter 2: Symfony2 versus Flat PHP | 16
Listing 2-5
Listing 2-6
Listing 2-725
26
27
28close_database_connection ($link);
return$posts;
}
The filename model.php isused because thelogic anddata access ofanapplication istraditionally
known asthe"model" layer. Inawell-organized application, themajority ofthecode representing
your "business logic" should liveinthemodel (asopposed toliving inacontroller). And unlike in
thisexample, only aportion (ornone) ofthemodel isactually concerned with accessing adatabase.
The controller ( index.php ) is now very simple:
1
2
3
4
5
6<?php
require_once 'model.php' ;
$posts=get_all_posts ();
require 'templates/list.php' ;
Now, thesole task ofthecontroller istogetdata from themodel layer oftheapplication (the model) and
tocallatemplate torender that data. This isavery simple example ofthemodel-view-controller pattern.
Isolating the Layout
Atthis point, theapplication hasbeen refactored into three distinct pieces offering various advantages
and the opportunity to reuse almost everything on different pages.
The only part ofthecode that can't bereused isthepage layout. Fixthat bycreating anew layout.php
file:
1
2
3
4
5
6
7
8
9
10<!-- templates/layout.php -->
<!DOCTYPE html>
<html>
<head>
<title><?phpecho$title?></title>
</head>
<body>
<?phpecho$content ?>
</body>
</html>
The template ( templates/list.php ) can now be simplified to "extend" the layout:
1
2
3
4
5
6
7
8
9
10
11<?php$title='List of Posts' ?>
<?phpob_start ()?>
<h1>List of Posts </h1>
<ul>
<?phpforeach ($postsas$post):?>
<li>
<ahref="/read?id= <?phpecho$post['id']?>">
<?phpecho$post['title']?>
</a>
</li>
PDF brought to you by
generated on November 25, 2013Chapter 2: Symfony2 versus Flat PHP | 17
Listing 2-8
Listing 2-9
Listing 2-1012
13
14
15
16<?phpendforeach ;?>
</ul>
<?php$content =ob_get_clean ()?>
<?phpinclude 'layout.php' ?>
You've now introduced amethodology that allows forthereuse ofthelayout. Unfortunately, to
accomplish this, you're forced touseafewugly PHP functions (ob_start() ,ob_get_clean() )inthe
template. Symfony2 uses aTemplating component that allows this tobeaccomplished cleanly and
easily. You'll see it in action shortly.
Adding a Blog "show" Page
The blog "list" page hasnow been refactored sothat thecode isbetter-organized andreusable. Toprove
it, add a blog "show" page, which displays an individual blog post identified by an idquery parameter.
Tobegin, create anew function inthemodel.php filethat retrieves anindividual blog result based ona
given id:
1
2
3
4
5
6
7
8
9
10
11
12
13
14// model.php
function get_post_by_id ($id)
{
$link=open_database_connection ();
$id=intval($id);
$query='SELECT date, title, body FROM post WHERE id = ' .$id;
$result =mysql_query ($query);
$row=mysql_fetch_assoc ($result);
close_database_connection ($link);
return$row;
}
Next, create a new file called show.php - the controller for this new page:
1
2
3
4
5
6<?php
require_once 'model.php' ;
$post=get_post_by_id ($_GET['id']);
require 'templates/show.php' ;
Finally, create the new template file - templates/show.php - to render the individual blog post:
1
2
3
4
5
6
7
8
9
10<?php$title=$post['title']?>
<?phpob_start ()?>
<h1><?phpecho$post['title']?></h1>
<divclass="date"><?phpecho$post['date']?></div>
<divclass="body">
<?phpecho$post['body']?>
</div>
<?php$content =ob_get_clean ()?>
PDF brought to you by
generated on November 25, 2013Chapter 2: Symfony2 versus Flat PHP | 18
Listing 2-11
Listing 2-1211
12<?phpinclude 'layout.php' ?>
Creating thesecond page isnow very easy and nocode isduplicated. Still, this page introduces even
more lingering problems that aframework cansolve foryou. Forexample, amissing orinvalid idquery
parameter will cause thepage tocrash. Itwould bebetter ifthiscaused a404 page toberendered, but
thiscan't really bedone easily yet.Worse, hadyouforgotten toclean theidparameter viatheintval()
function, your entire database would be at risk for an SQL injection attack.
Another major problem isthat each individual controller filemust include themodel.php file. What if
each controller filesuddenly needed toinclude anadditional fileorperform some other global task (e.g.
enforce security)? Asitstands now, that code would need tobeadded toevery controller file.Ifyouforget
to include something in one file, hopefully it doesn't relate to security...
A "Front Controller" to the Rescue
The solution istouseafront controller :asingle PHP filethrough which allrequests areprocessed. With
a front controller, the URIs for the application change slightly, but start to become more flexible:
1
2
3
4
5
6
7Without a front controller
/index.php          => Blog post list page (index.php executed)
/show.php           => Blog post show page (show.php executed)
With index.php as the front controller
/index.php          => Blog post list page (index.php executed)
/index.php/show     => Blog post show page (index.php executed)
The index.php portion oftheURI canberemoved ifusing Apache rewrite rules (orequivalent). In
that case, the resulting URI of the blog show page would be simply /show.
When using afront controller, asingle PHP file(index.php inthis case) renders every request. For
theblog post show page, /index.php/ showwill actually execute theindex.php file, which isnow
responsible forrouting requests internally based onthefullURI. Asyou'll see,afront controller isavery
powerful tool.
Creating the Front Controller
You're about totake abig step with theapplication. With one filehandling allrequests, you can
centralize things such assecurity handling, configuration loading, and routing. Inthis application,
index.php must now besmart enough torender theblog post listpage ortheblog post show page based
on the requested URI:
1
2
3
4
5
6
7
8
9<?php
// index.php
// load and initialize any global libraries
require_once 'model.php' ;
require_once 'controllers.php' ;
// route the request internally
$uri=$_SERVER ['REQUEST_URI' ];
PDF brought to you by
generated on November 25, 2013Chapter 2: Symfony2 versus Flat PHP | 19
Listing 2-13
Listing 2-1410
11
12
13
14
15
16
17if('/index.php' ==$uri){
list_action ();
}elseif('/index.php/show' ==$uri&&isset($_GET['id'])){
show_action ($_GET['id']);
}else{
header('Status: 404 Not Found' );
echo'<html><body><h1>Page Not Found</h1></body></html>' ;
}
Fororganization, both controllers (formerly index.php andshow.php )arenow PHP functions andeach
has been moved into a separate file, controllers.php :
1
2
3
4
5
6
7
8
9
10
11function list_action ()
{
$posts=get_all_posts ();
require 'templates/list.php' ;
}
function show_action ($id)
{
$post=get_post_by_id ($id);
require 'templates/show.php' ;
}
Asafront controller, index.php has taken onanentirely new role, one that includes loading the
core libraries and routing theapplication sothat one ofthetwo controllers (the list_action() and
show_action() functions) iscalled. Inreality, thefront controller isbeginning tolook and actalotlike
Symfony2's mechanism for handling and routing requests.
Another advantage ofafront controller isflexible URLs. Notice that theURL totheblog post show
page could bechanged from /showto/readbychanging code inonly one location. Before, an
entire file needed to be renamed. In Symfony2, URLs are even more flexible.
Bynow, theapplication hasevolved from asingle PHP fileinto astructure that isorganized and allows
forcode reuse. You should behappier, but farfrom satisfied. For example, the"routing" system is
fickle, and wouldn't recognize that thelistpage (/index.php )should beaccessible also via/(ifApache
rewrite rules were added). Also, instead ofdeveloping theblog, alotoftime isbeing spent working on
the"architecture" ofthecode (e.g. routing, calling controllers, templates, etc.). More time will need to
bespent tohandle form submissions, input validation, logging and security. Why should you have to
reinvent solutions to all these routine problems?
Add a Touch of Symfony2
Symfony2 totherescue. Before actually using Symfony2, youneed tomake sure PHP knows how tofind
theSymfony2 classes. This isaccomplished viaanautoloader that Symfony provides. Anautoloader isa
tool that makes itpossible tostart using PHP classes without explicitly including thefilecontaining the
class.
First, download Symfony2and place itinto avendor/symfony/ directory. Next, create anapp/
bootstrap.php file. Use it to requirethe two files in the application and to configure the autoloader:
2.http://symfony.com/download
PDF brought to you by
generated on November 25, 2013Chapter 2: Symfony2 versus Flat PHP | 20
Listing 2-15
Listing 2-161
2
3
4
5
6
7
8
9
10
11
12<?php
// bootstrap.php
require_once 'model.php' ;
require_once 'controllers.php' ;
require_once 'vendor/symfony/src/Symfony/Component/ClassLoader/UniversalClassLoader.php' ;
$loader =newSymfony\Component\ClassLoader\UniversalClassLoader ();
$loader->registerNamespaces (array(
'Symfony' =>__DIR__.'/../vendor/symfony/src' ,
));
$loader->register ();
This tells theautoloader where theSymfony classes are. With this, you canstart using Symfony classes
without using the requirestatement for the files that contain them.
Core toSymfony's philosophy istheidea that anapplication's main jobistointerpret each request and
return aresponse. Tothisend, Symfony2 provides both aRequest3andaResponse4class. These classes
areobject-oriented representations oftheraw HTTP request being processed and theHTTP response
being returned. Use them to improve the blog:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21<?php
// index.php
require_once 'app/bootstrap.php' ;
useSymfony\Component\HttpFoundation\Request ;
useSymfony\Component\HttpFoundation\Response ;
$request =Request::createFromGlobals ();
$uri=$request ->getPathInfo ();
if('/'==$uri){
$response =list_action ();
}elseif('/show' ==$uri&&$request ->query->has('id')){
$response =show_action ($request ->query->get('id'));
}else{
$html='<html><body><h1>Page Not Found</h1></body></html>' ;
$response =newResponse ($html,404);
}
// echo the headers and send the response
$response ->send();
The controllers arenow responsible forreturning aResponse object. Tomake this easier, you canadd
anew render_template() function, which, incidentally, acts quite abitliketheSymfony2 templating
engine:
1
2
3
4
5
6
7// controllers.php
useSymfony\Component\HttpFoundation\Response ;
function list_action ()
{
$posts=get_all_posts ();
$html=render_template ('templates/list.php' ,array('posts' =>$posts));
3.http://api.symfony.com/2.0/Symfony/Component/HttpFoundation/Request.html
4.http://api.symfony.com/2.0/Symfony/Component/HttpFoundation/Response.html
PDF brought to you by
generated on November 25, 2013Chapter 2: Symfony2 versus Flat PHP | 21
Listing 2-178
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29returnnewResponse ($html);
}
function show_action ($id)
{
$post=get_post_by_id ($id);
$html=render_template ('templates/show.php' ,array('post'=>$post));
returnnewResponse ($html);
}
// helper function to render templates
function render_template ($path,array$args)
{
extract($args);
ob_start ();
require $path;
$html=ob_get_clean ();
return$html;
}
Bybringing inasmall part ofSymfony2, theapplication ismore flexible and reliable. The Request
provides adependable way toaccess information about the HTTP request. Specifically, the
getPathInfo() method returns acleaned URI (always returning /showand never /index.php/ show).
So,even iftheuser goes to/index.php/ show,theapplication isintelligent enough toroute therequest
through show_action() .
The Response object gives flexibility when constructing theHTTP response, allowing HTTP headers
andcontent tobeadded viaanobject-oriented interface. And while theresponses inthisapplication are
simple, this flexibility will pay dividends as your application grows.
The Sample Application in Symfony2
The blog hascome along way, butitstill contains alotofcode forsuch asimple application. Along
theway, you've made asimple routing system and amethod using ob_start() and ob_get_clean() to
render templates. If,forsome reason, you needed tocontinue building this "framework" from scratch,
youcould atleast useSymfony's standalone Routing5and Templating6components, which already solve
these problems.
Instead ofre-solving common problems, youcanletSymfony2 take care ofthem foryou. Here's thesame
sample application, now built in Symfony2:
1
2
3
4
5
6
7
8
9
10// src/Acme/BlogBundle/Controller/BlogController.php
namespace Acme\BlogBundle\Controller ;
useSymfony\Bundle\FrameworkBundle\Controller\Controller ;
classBlogController extends Controller
{
publicfunction listAction ()
{
$posts=$this->get('doctrine' )->getEntityManager ()
5.https://github.com/symfony/Routing
6.https://github.com/symfony/Templating
PDF brought to you by
generated on November 25, 2013Chapter 2: Symfony2 versus Flat PHP | 22
Listing 2-18
Listing 2-1911
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38->createQuery ('SELECT p FROM AcmeBlogBundle:Post p' )
->execute();
return$this->render(
'AcmeBlogBundle:Blog:list.html.php' ,
array('posts' =>$posts)
);
}
publicfunction showAction ($id)
{
$post=$this->get('doctrine' )
->getEntityManager ()
->getRepository ('AcmeBlogBundle:Post' )
->find($id)
;
if(!$post){
// cause the 404 page not found to be displayed
throw$this->createNotFoundException ();
}
return$this->render(
'AcmeBlogBundle:Blog:show.html.php' ,
array('post'=>$post)
);
}
}
The two controllers arestilllightweight. Each uses theDoctrine ORM library toretrieve objects from the
database and theTemplating component torender atemplate and return aResponse object. The list
template is now quite a bit simpler:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18<!-- src/Acme/BlogBundle/Resources/views/Blog/list.html.php -->
<?php$view->extend('::layout.html.php' )?>
<?php$view['slots']->set('title','List of Posts' )?>
<h1>List of Posts </h1>
<ul>
<?phpforeach ($postsas$post):?>
<li>
<ahref="<?phpecho$view['router' ]->generate (
'blog_show' ,
array('id'=>$post->getId())
)?>">
<?phpecho$post->getTitle ()?>
</a>
</li>
<?phpendforeach ;?>
</ul>
The layout is nearly identical:
1
2
3<!-- app/Resources/views/layout.html.php -->
<!DOCTYPE html>
<html>
PDF brought to you by
generated on November 25, 2013Chapter 2: Symfony2 versus Flat PHP | 23
Listing 2-20
Listing 2-214
5
6
7
8
9
10
11
12
13<head>
<title><?phpecho$view['slots']->output(
'title',
'Default title'
)?></title>
</head>
<body>
<?phpecho$view['slots']->output('_content' )?>
</body>
</html>
The show template is left as an exercise, as it should be trivial to create based on the list template.
When Symfony2's engine (called theKernel)boots up,itneeds amap sothat itknows which controllers
toexecute based ontherequest information. Arouting configuration map provides thisinformation ina
readable format:
1
2
3
4
5
6
7
8# app/config/routing.yml
blog_list :
pattern:/blog
defaults :{_controller :AcmeBlogBundle :Blog:list}
blog_show :
pattern:/blog/show/{id}
defaults :{_controller :AcmeBlogBundle :Blog:show}
Now that Symfony2 ishandling allthemundane tasks, thefront controller isdead simple. And since it
does solittle, you'll never have totouch itonce it'screated (and ifyouuseaSymfony2 distribution, you
won't even need to create it!):
1
2
3
4
5
6
7
8// web/app.php
require_once __DIR__.'/../app/bootstrap.php' ;
require_once __DIR__.'/../app/AppKernel.php' ;
useSymfony\Component\HttpFoundation\Request ;
$kernel =newAppKernel ('prod',false);
$kernel->handle(Request::createFromGlobals ())->send();
The front controller's only jobistoinitialize Symfony2's engine (Kernel)andpass itaRequest object to
handle. Symfony2's core then uses therouting map todetermine which controller tocall. Just likebefore,
thecontroller method isresponsible forreturning thefinal Response object. There's really notmuch else
to it.
For a visual representation of how Symfony2 handles each request, see the request flow diagram .
Where Symfony2 Delivers
Inthe upcoming chapters, you'll learn more about how each piece ofSymfony works and the
recommended organization ofaproject. Fornow, let's seehow migrating theblog from flatPHP to
Symfony2 has improved life:
PDF brought to you by
generated on November 25, 2013Chapter 2: Symfony2 versus Flat PHP | 24
Listing 2-22
Listing 2-23•Your application now hasclear and consistently organized code (though Symfony doesn't
force youinto this). This promotes reusability andallows fornew developers tobeproductive
in your project more quickly;
•100% ofthecode you write isforyour application. You don't need todevelop ormaintain
low-level utilities such as autoloading ,routing , or rendering controllers ;
•Symfony2 gives you access toopen source tools such asDoctrine and theTemplating,
Security, Form, Validation and Translation components (to name a few);
•The application now enjoys fully-flexible URLs thanks to the Routingcomponent;
•Symfony2's HTTP-centric architecture gives you access topowerful tools such asHTTP
caching powered bySymfony2's internal HTTP cache ormore powerful tools such as
Varnish7. This is covered in a later chapter all about caching .
And perhaps best ofall,byusing Symfony2, you now have access toawhole setofhigh-quality open
source tools developed bytheSymfony2 community !Agood selection ofSymfony2 community tools
can be found on KnpBundles.com8.
Better templates
Ifyou choose touseit,Symfony2 comes standard with atemplating engine called Twig9that makes
templates faster towrite andeasier toread. Itmeans that thesample application could contain even less
code! Take, for example, the list template written in Twig:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17{# src/Acme/BlogBundle/Resources/views/Blog/list.html.twig #}
{%extends "::layout.html.twig" %}
{%blocktitle%}List of Posts {%endblock %}
{%blockbody%}
<h1>List of Posts </h1>
<ul>
{%forpostinposts%}
<li>
<ahref="{{path('blog_show' ,{'id':post.id})}}">
{{post.title }}
</a>
</li>
{%endfor%}
</ul>
{%endblock %}
The corresponding layout.html.twig template is also easier to write:
1
2
3
4
5
6
7
8
9
10{# app/Resources/views/layout.html.twig #}
<!DOCTYPE html>
<html>
<head>
<title>{%blocktitle%}Default title {%endblock %}</title>
</head>
<body>
{%blockbody%}{%endblock %}
</body>
</html>
7.https://www.varnish-cache.org/
8.http://knpbundles.com/
9.http://twig.sensiolabs.org
PDF brought to you by
generated on November 25, 2013Chapter 2: Symfony2 versus Flat PHP | 25
Twig iswell-supported inSymfony2. And while PHP templates will always besupported inSymfony2,
themany advantages ofTwig will continue tobediscussed. Formore information, seethetemplating
chapter .
Learn more from the Cookbook
•How to use PHP instead of Twig for Templates
•How to define Controllers as Services
PDF brought to you by
generated on November 25, 2013Chapter 2: Symfony2 versus Flat PHP | 26
Chapter 3
Installing and Configuring Symfony
The goal ofthischapter istogetyouupandrunning with aworking application built ontopofSymfony.
Fortunately, Symfony offers "distributions", which arefunctional Symfony "starter" projects that youcan
download and begin developing in immediately.
Ifyou're looking forinstructions onhow best tocreate anew project andstore itviasource control,
seeUsing Source Control .
Downloading a Symfony2 Distribution
First, check that youhave installed andconfigured aWeb server (such asApache) with PHP 5.3.2
or higher. For more information on Symfony2 requirements, see the requirements reference .
Symfony2 packages "distributions", which arefully-functional applications that include theSymfony2
core libraries, aselection ofuseful bundles, asensible directory structure andsome default configuration.
When youdownload aSymfony2 distribution, you're downloading afunctional application skeleton that
can be used immediately to begin developing your application.
Start byvisiting theSymfony2 download page athttp://symfony.com/ download1.Onthispage, you'll see
theSymfony Standard Edition ,which isthemain Symfony2 distribution. Here, you'll need tomake two
choices:
•Download either a.tgzor.ziparchive -both areequivalent, download whatever you're more
comfortable using;
•Download thedistribution with orwithout vendors. Ifyou have Git2installed onyour
computer, youshould download Symfony2 "without vendors", asitadds abitmore flexibility
when including third-party/vendor libraries.
1.http://symfony.com/download
2.http://git-scm.com/
PDF brought to you by
generated on November 25, 2013Chapter 3: Installing and Configuring Symfony | 27
Listing 3-1
Listing 3-2
Listing 3-3Download one ofthearchives somewhere under your local web server's root directory and unpack it.
From aUNIX command line, thiscanbedone with oneofthefollowing commands (replacing ###with
your actual filename):
1
2
3
4
5# for .tgz file
$tar zxvf Symfony_Standard_Vendors_2.0.###.tgz
# for a .zip file
$unzip Symfony_Standard_Vendors_2.0.###.zip
When you're finished, you should have a Symfony/ directory that looks something like this:
1
2
3
4
5
6
7
8
9
10
11
12
13www/ <- your web server directory (sometimes named htdocs or public)
Symfony/ <- the unpacked archive
app/
cache/
config/
logs/
src/
...
vendor/
...
web/
app.php
...
You can easily override thedefault directory structure. SeeHow tooverride Symfony's Default
Directory Structure for more information.
Allpublic files and thefront controller that handles incoming requests inaSymfony2 application live
intheSymfony/ web/directory. So,assuming youunpacked thearchive into your web server's orvirtual
host's document root, your application's URLs will start with http://localhost/ Symfony/ web/.To
getnice and short URLs you should point thedocument root ofyour web server orvirtual host tothe
Symfony/ web/directory. Though this isnotrequired fordevelopment itisrecommended when your
application goes into production asallsystem andconfiguration files become inaccessible toclients. For
information onconfiguring your specific web server document root, seethefollowing documentation:
Apache3|Nginx4.
The following examples assume youdon't touch thedocument root settings soallURLs start with
http://localhost/Symfony/web/
Updating Vendors
Finally, ifyou downloaded thearchive "without vendors", install thevendors byrunning thefollowing
command from the command line:
1$php bin/vendors install
3.http://httpd.apache.org/docs/current/mod/core.html#documentroot
4.http://wiki.nginx.org/Symfony
PDF brought to you by
generated on November 25, 2013Chapter 3: Installing and Configuring Symfony | 28
Listing 3-4This command downloads allofthenecessary vendor libraries -including Symfony itself -into the
vendor/ directory. For more information onhow third-party vendor libraries aremanaged inside
Symfony2, see " Managing Vendor Libraries with bin/vendors and deps ".
Configuration and Setup
Atthis point, alloftheneeded third-party libraries now liveinthevendor/ directory. You also have a
default application setup in app/and some sample code inside the src/directory.
Symfony2 comes with avisual server configuration tester tohelp make sure your Web server and PHP
are configured to use Symfony. Use the following URL to check your configuration:
1http://localhost/Symfony/web/config.php
If there are any issues, correct them now before moving on.
PDF brought to you by
generated on November 25, 2013Chapter 3: Installing and Configuring Symfony | 29
Listing 3-5
Listing 3-6
Listing 3-7
Listing 3-8
Listing 3-9Setting up Permissions
One common issue isthat theapp/cacheand app/logsdirectories must bewritable both bythe
web server andthecommand lineuser. OnaUNIX system, ifyour web server user isdifferent from
your command lineuser, youcanrunthefollowing commands justonce inyour project toensure
that permissions will be setup properly.
Note that notallweb servers run astheuser www-data asintheexamples below. Instead, check
which user your web server is being run as and use it in place of www-data .
On a UNIX system, this can be done with one of the following commands:
1$ps aux | grep httpd
or
1$ps aux | grep apache
1. Using ACL on a system that supports chmod +a
Many systems allow you tousethechmod+acommand. Trythis first, and ifyou getanerror -
trythenext method. Besure toreplace www-data with your web server user onthefirst chmod
command:
1
2
3
4
5$rm -rf app/cache/*
$rm -rf app/logs/*
$sudo chmod +a "www-data allow delete,write,append,file_inherit,directory_inherit"
app/cache app/logs
$sudo chmod +a "`whoami` allow delete,write,append,file_inherit,directory_inherit"
app/cache app/logs
2. Using Acl on a system that does not support chmod +a
Some systems don't support chmod+a,butdosupport another utility called setfacl.You may
need toenable ACL support5onyour partition andinstall setfacl before using it(asisthecase with
Ubuntu), like so:
1
2$sudo setfacl -R -m u:www-data:rwX -m u: `whoami`:rwX app/cache app/logs
$sudo setfacl -dR -m u:www-data:rwx -m u: `whoami`:rwx app/cache app/logs
3. Without using ACL
Ifyoudon't have access tochanging theACL ofthedirectories, youwillneed tochange theumask
sothat thecache and logdirectories will begroup-writable orworld-writable (depending ifthe
web server user andthecommand lineuser areinthesame group ornot). Toachieve this, putthe
following line at the beginning of the app/console ,web/app.php andweb/app_dev.php files:
1
2
3
4
5umask(0002);// This will let the permissions be 0775
// or
umask(0000);// This will let the permissions be 0777
Note that using theACL isrecommended when you have access tothem onyour server because
changing the umask is not thread-safe.
5.https://help.ubuntu.com/community/FilePermissionsACLs
PDF brought to you by
generated on November 25, 2013Chapter 3: Installing and Configuring Symfony | 30
Listing 3-10When everything isfine, click on"Go totheWelcome page" torequest your first "real" Symfony2
webpage:
1http://localhost/Symfony/web/app_dev.php/
Symfony2 should welcome and congratulate you for your hard work so far!
Togetnice and short urls you should point thedocument root ofyour webserver orvirtual host
totheSymfony/ web/directory. Though this isnotrequired fordevelopment itisrecommended
atthetime your application goes into production asallsystem and configuration files become
inaccessible toclients then. Forinformation onconfiguring your specific web server document
root, read Configuring aweb server orconsult theofficial documentation ofyour webserver:
Apache6|Nginx7.
Beginning Development
Now that you have afully-functional Symfony2 application, you can begin development! Your
distribution may contain some sample code -check theREADME.md fileincluded with thedistribution
(open it as a text file) to learn about what sample code was included with your distribution.
Ifyou're new toSymfony, check out"Creating Pages inSymfony2 ",where you'll learn how tocreate pages,
change configuration, and do everything else you'll need in your new application.
Ifyouwant toremove thesample code from your distribution, take alook atthiscookbook article:
"How to remove the AcmeDemoBundle "
6.http://httpd.apache.org/docs/current/mod/core.html#documentroot
7.http://wiki.nginx.org/Symfony
PDF brought to you by
generated on November 25, 2013Chapter 3: Installing and Configuring Symfony | 31
Listing 3-11Using Source Control
Ifyou're using aversion control system like GitorSubversion ,you can setup your version control
system and begin committing your project toitasnormal. The Symfony Standard edition isthestarting
point for your new project.
Forspecific instructions onhow best tosetup your project tobestored ingit,seeHow toCreate andstore
a Symfony2 Project in git .
Ignoring the vendor/Directory
Ifyou've downloaded thearchive without vendors ,you cansafely ignore theentire vendor/ directory
and notcommit ittosource control. With Git,this isdone bycreating and adding thefollowing toa
.gitignore file:
1vendor/
Now, thevendor directory won't becommitted tosource control. This isfine(actually, it'sgreat!) because
when someone else clones orchecks out theproject, he/shecan simply run thephpbin/vendors
installscript to download all the necessary vendor libraries.
PDF brought to you by
generated on November 25, 2013Chapter 3: Installing and Configuring Symfony | 32
Listing 4-1Chapter 4
Creating Pages in Symfony2
Creating a new page in Symfony2 is a simple two-step process:
•Create aroute :Aroute defines theURL (e.g. /about)toyour page and specifies acontroller
(which isaPHP function) that Symfony2 should execute when theURL ofanincoming request
matches the route pattern;
•Create acontroller :Acontroller isaPHP function that takes theincoming request and
transforms it into the Symfony2 Response object that's returned to the user.
This simple approach isbeautiful because itmatches theway that theWeb works. Every interaction on
theWeb isinitiated byanHTTP request. The jobofyour application issimply tointerpret therequest
and return the appropriate HTTP response.
Symfony2 follows thisphilosophy andprovides youwith tools andconventions tokeep your application
organized as it grows in users and complexity.
The "Hello Symfony!" Page
Start bybuilding aspin-off oftheclassic "Hello World!" application. When you're finished, theuser will
be able to get a personal greeting (e.g. "Hello Symfony") by going to the following URL:
1http://localhost/app_dev.php/hello/Symfony
Actually, you'll beable toreplace Symfonywith anyother name tobegreeted. Tocreate thepage, follow
the simple two-step process.
The tutorial assumes that you've already downloaded Symfony2 and configured your webserver.
The above URL assumes that localhost points tothewebdirectory ofyour new Symfony2 project.
Fordetailed information onthisprocess, seethedocumentation ontheweb server you areusing.
Here's the relevant documentation page for some web server you might be using:
•For Apache HTTP Server, refer to Apache's DirectoryIndex documentation1
•For Nginx, refer to Nginx HttpCoreModule location documentation2
PDF brought to you by
generated on November 25, 2013Chapter 4: Creating Pages in Symfony2 | 33
Listing 4-2
Listing 4-3
Listing 4-4
Listing 4-5Before you begin: Create the Bundle
Before youbegin, you'll need tocreate abundle .InSymfony2, abundle islikeaplugin, except that allof
the code in your application will live inside a bundle.
Abundle isnothing more than adirectory that houses everything related toaspecific feature, including
PHP classes, configuration, and even stylesheets and Javascript files (see The Bundle System ).
Tocreate abundle called AcmeHelloBundle (aplay bundle that you'll build inthis chapter), run the
following command and follow the on-screen instructions (use all of the default options):
1$php app/console generate:bundle --namespace =Acme/HelloBundle --format =yml
Behind thescenes, adirectory iscreated forthebundle atsrc/Acme/HelloBundle .Aline isalso
automatically added to the app/AppKernel.php file so that the bundle is registered with the kernel:
1
2
3
4
5
6
7
8
9
10
11// app/AppKernel.php
publicfunction registerBundles ()
{
$bundles =array(
...,
newAcme\HelloBundle\AcmeHelloBundle (),
);
// ...
return$bundles ;
}
Now that you have a bundle setup, you can begin building your application inside the bundle.
Step 1: Create the Route
Bydefault, the routing configuration file inaSymfony2 application islocated atapp/config/
routing.yml .Like allconfiguration inSymfony2, youcanalso choose touseXML orPHP outofthebox
to configure routes.
Ifyou look atthemain routing file, you'll seethat Symfony already added anentry when you generated
theAcmeHelloBundle :
1
2
3
4# app/config/routing.yml
AcmeHelloBundle :
resource :"@AcmeHelloBundle/Resources/config/routing.yml"
prefix:/
This entry ispretty basic: ittells Symfony toload routing configuration from theResources/ config/
routing.yml filethat lives inside theAcmeHelloBundle .This means that youplace routing configuration
directly inapp/config/routing.yml ororganize your routes throughout your application, and import
them from here.
Now that therouting.yml filefrom thebundle isbeing imported, add thenew route that defines the
URL of the page that you're about to create:
1
2# src/Acme/HelloBundle/Resources/config/routing.yml
hello:
1.http://httpd.apache.org/docs/2.0/mod/mod_dir.html
2.http://wiki.nginx.org/HttpCoreModule#location
PDF brought to you by
generated on November 25, 2013Chapter 4: Creating Pages in Symfony2 | 34
Listing 4-6
Listing 4-73
4pattern:/hello/{name}
defaults :{_controller :AcmeHelloBundle :Hello:index}
The routing consists oftwo basic pieces: thepattern,which istheURL that thisroute willmatch, and
adefaults array, which specifies thecontroller that should beexecuted. The placeholder syntax inthe
pattern ({name})isawildcard. Itmeans that /hello/Ryan,/hello/Fabienoranyother similar URL will
match thisroute. The {name}placeholder parameter willalso bepassed tothecontroller sothat youcan
use its value to personally greet the user.
The routing system hasmany more great features forcreating flexible andpowerful URL structures
in your application. For more details, see the chapter all about Routing .
Step 2: Create the Controller
When aURL such as/hello/Ryanishandled bytheapplication, thehelloroute ismatched and the
AcmeHelloBundle:Hello:index controller isexecuted bytheframework. The second step ofthepage-
creation process is to create that controller.
The controller -AcmeHelloBundle:Hello:index isthelogical name ofthecontroller, anditmaps tothe
indexAction method ofaPHP class called Acme\HelloBundle\Controller\HelloController .Start by
creating this file inside your AcmeHelloBundle :
1
2
3
4
5
6// src/Acme/HelloBundle/Controller/HelloController.php
namespace Acme\HelloBundle\Controller ;
classHelloController
{
}
Inreality, thecontroller isnothing more than aPHP method that youcreate andSymfony executes. This
iswhere your code uses information from therequest tobuild andprepare theresource being requested.
Except insome advanced cases, theendproduct ofacontroller isalways thesame: aSymfony2 Response
object.
Create the indexAction method that Symfony will execute when the helloroute is matched:
1
2
3
4
5
6
7
8
9
10
11
12// src/Acme/HelloBundle/Controller/HelloController.php
namespace Acme\HelloBundle\Controller ;
useSymfony\Component\HttpFoundation\Response ;
classHelloController
{
publicfunction indexAction ($name)
{
returnnewResponse ('<html><body>Hello ' .$name.'!</body></html>' );
}
}
The controller issimple: itcreates anew Response object, whose first argument isthecontent that should
be used in the response (a small HTML page in this example).
Congratulations! After creating only aroute andacontroller, youalready have afully-functional page! If
you've setup everything correctly, your application should greet you:
PDF brought to you by
generated on November 25, 2013Chapter 4: Creating Pages in Symfony2 | 35
Listing 4-8
Listing 4-9
Listing 4-10
Listing 4-111http://localhost/app_dev.php/hello/Ryan
You can also view your app in the "prod" environment by visiting:
1http://localhost/app.php/hello/Ryan
If you get an error, it's likely because you need to clear your cache by running:
1$php app/console cache:clear --env =prod --no-debug
An optional, but common, third step in the process is to create a template.
Controllers arethemain entry point foryour code andakeyingredient when creating pages. Much
more information can be found in the Controller Chapter .
Optional Step 3: Create the Template
Templates allow you tomove allofthepresentation (e.g. HTML code) into aseparate fileand reuse
different portions ofthepage layout. Instead ofwriting theHTML inside thecontroller, render atemplate
instead:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21// src/Acme/HelloBundle/Controller/HelloController.php
namespace Acme\HelloBundle\Controller ;
useSymfony\Bundle\FrameworkBundle\Controller\Controller ;
classHelloController extends Controller
{
publicfunction indexAction ($name)
{
return$this->render(
'AcmeHelloBundle:Hello:index.html.twig' ,
array('name'=>$name)
);
// render a PHP template instead
// return $this->render(
//     'AcmeHelloBundle:Hello:index.html.php',
//     array('name' => $name)
// );
}
}
Inorder tousetherender()3method, your controller must extend theController4class, which
adds shortcuts fortasks that arecommon inside controllers. This isdone intheabove example by
adding the usestatement on line 4 and then extending Controller on line 6.
3.http://api.symfony.com/2.0/Symfony/Bundle/FrameworkBundle/Controller/Controller.html#render()
4.http://api.symfony.com/2.0/Symfony/Bundle/FrameworkBundle/Controller/Controller.html
PDF brought to you by
generated on November 25, 2013Chapter 4: Creating Pages in Symfony2 | 36
Listing 4-12
Listing 4-13The render() method creates aResponse object filled with thecontent ofthegiven, rendered template.
Like any other controller, you will ultimately return that Response object.
Notice that there aretwo different examples forrendering thetemplate. Bydefault, Symfony2 supports
twodifferent templating languages: classic PHP templates andthesuccinct butpowerful Twig5templates.
Don't be alarmed - you're free to choose either or even both in the same project.
The controller renders the AcmeHelloBundle:Hello:index.html.twig template, which uses the
following naming convention:
BundleName :ControllerName :TemplateName
This isthelogical name ofthetemplate, which ismapped toaphysical location using thefollowing
convention.
/path/to/BundleName /Resources/views/ ControllerName /TemplateName
Inthis case, AcmeHelloBundle isthebundle name, Helloisthecontroller, and index.html.twig the
template:
1
2
3
4
5
6{# src/Acme/HelloBundle/Resources/views/Hello/index.html.twig #}
{%extends '::base.html.twig' %}
{%blockbody%}
Hello{{name}}!
{%endblock %}
Step through the Twig template line-by-line:
•line2:The extends token defines aparent template. The template explicitly defines alayout
file inside of which it will be placed.
•line4:The blocktoken says that everything inside should beplaced inside ablock called body.
Asyou'll see, it'stheresponsibility oftheparent template (base.html.twig )toultimately
render the block called body.
The parent template, ::base.html.twig ,ismissing both theBundleName and ControllerName
portions ofitsname (hence thedouble colon (::)atthebeginning). This means that thetemplate lives
outside of the bundles and in the appdirectory:
1
2
3
4
5
6
7
8
9
10
11
12
13
14{# app/Resources/views/base.html.twig #}
<!DOCTYPE html>
<html>
<head>
<metahttp-equiv= "Content-Type" content= "text/html; charset=utf-8" />
<title>{%blocktitle%}Welcome! {%endblock %}</title>
{%blockstylesheets %}{%endblock %}
<linkrel="shortcut icon" href="{{asset('favicon.ico' )}}"/>
</head>
<body>
{%blockbody%}{%endblock %}
{%blockjavascripts %}{%endblock %}
</body>
</html>
The base template filedefines theHTML layout and renders thebodyblock that you defined inthe
index.html.twig template. Italso renders atitleblock, which you could choose todefine inthe
5.http://twig.sensiolabs.org
PDF brought to you by
generated on November 25, 2013Chapter 4: Creating Pages in Symfony2 | 37
Listing 4-14
Listing 4-15
Listing 4-16index.html.twig template. Since youdidnotdefine thetitleblock inthechild template, itdefaults to
"Welcome!".
Templates areapowerful way torender and organize thecontent foryour page. Atemplate canrender
anything, from HTML markup, to CSS code, or anything else that the controller may need to return.
Inthelifecycle ofhandling arequest, thetemplating engine issimply anoptional tool. Recall that the
goal ofeach controller istoreturn aResponse object. Templates areapowerful, butoptional, tool for
creating the content for that Response object.
The Directory Structure
After just afew short sections, you already understand thephilosophy behind creating and rendering
pages inSymfony2. You've also already begun toseehow Symfony2 projects arestructured and
organized. By the end of this section, you'll know where to find and put different types of files and why.
Though entirely flexible, bydefault, each Symfony application hasthesame basic and recommended
directory structure:
•app/: This directory contains the application configuration;
•src/: All the project PHP code is stored under this directory;
•vendor/: Any vendor libraries are placed here by convention;
•web/: This is the web root directory and contains any publicly accessible files;
The Web Directory
The web root directory isthehome ofallpublic and static files including images, stylesheets, and
JavaScript files. It is also where each front controller lives:
1
2
3
4
5
6
7
8
9// web/app.php
require_once __DIR__.'/../app/bootstrap.php.cache' ;
require_once __DIR__.'/../app/AppKernel.php' ;
useSymfony\Component\HttpFoundation\Request ;
$kernel =newAppKernel ('prod',false);
$kernel->loadClassCache ();
$kernel->handle(Request::createFromGlobals ())->send();
The front controller file(app.php inthis example) istheactual PHP filethat's executed when using a
Symfony2 application and its job is to use a Kernel class, AppKernel , to bootstrap the application.
Having afront controller means different and more flexible URLs than areused inatypical flat
PHP application. When using a front controller, URLs are formatted in the following way:
1http://localhost/app.php/hello/Ryan
The front controller, app.php,isexecuted and the "internal:" URL /hello/Ryanisrouted
internally using therouting configuration. Byusing Apache mod_rewrite rules, you canforce the
app.phpfile to be executed without needing to specify it in the URL:
1http://localhost/hello/Ryan
PDF brought to you by
generated on November 25, 2013Chapter 4: Creating Pages in Symfony2 | 38
Listing 4-17Though front controllers areessential inhandling every request, you'll rarely need tomodify oreven think
about them. They'll be mentioned again briefly in the Environments section.
The Application ( app) Directory
Asyou saw inthefront controller, theAppKernel class isthemain entry point oftheapplication and is
responsible for all configuration. As such, it is stored in the app/directory.
This class must implement two methods that define everything that Symfony needs toknow about your
application. You don't even need toworry about these methods when starting -Symfony fillsthem infor
you with sensible defaults.
•registerBundles() :Returns anarray ofallbundles needed toruntheapplication (see The
Bundle System );
•registerContainerConfiguration() :Loads themain application configuration resource file
(see the Application Configuration section).
Inday-to-day development, you'll mostly usetheapp/directory tomodify configuration and routing
files intheapp/config/directory (see Application Configuration ).Italso contains theapplication cache
directory (app/cache),alogdirectory (app/logs)andadirectory forapplication-level resource files, such
as templates ( app/Resources ). You'll learn more about each of these directories in later chapters.
Autoloading
When Symfony isloading, aspecial file-app/autoload.php -isincluded. This fileisresponsible
forconfiguring theautoloader, which willautoload your application files from thesrc/directory
and third-party libraries from the vendor/directory.
Because oftheautoloader, you never need toworry about using include orrequire statements.
Instead, Symfony2 uses thenamespace ofaclass todetermine itslocation and automatically
includes the file on your behalf the instant you need a class.
The autoloader isalready configured tolook inthesrc/directory foranyofyour PHP classes. For
autoloading to work, the class name and path to the file have to follow the same pattern:
1
2
3
4Class Name:
Acme\HelloBundle\Controller\HelloController
Path:
src/Acme/HelloBundle/Controller/HelloController.php
Typically, theonly time you'll need toworry about theapp/autoload.php fileiswhen you're
including anew third-party library inthevendor/directory. Formore information onautoloading,
seeHow to autoload Classes .
The Source ( src) Directory
Putsimply, thesrc/directory contains alloftheactual code (PHP code, templates, configuration files,
stylesheets, etc) that drives your application. When developing, thevast majority ofyour work will be
done inside one or more bundles that you create in this directory.
But what exactly is a bundle ?
The Bundle System
Abundle issimilar toaplugin inother software, buteven better. The keydifference isthat everything
isabundle inSymfony2, including both thecore framework functionality and thecode written foryour
PDF brought to you by
generated on November 25, 2013Chapter 4: Creating Pages in Symfony2 | 39
Listing 4-18application. Bundles arefirst-class citizens inSymfony2. This gives you theflexibility tousepre-built
features packaged inthird-party bundles6ortodistribute your own bundles. Itmakes iteasy topick and
choose which features to enable in your application and to optimize them the way you want.
While you'll learn thebasics here, anentire cookbook entry isdevoted totheorganization andbest
practices of bundles .
Abundle issimply astructured setoffiles within adirectory that implement asingle feature. You might
create aBlogBundle ,aForumBundle orabundle foruser management (many ofthese exist already as
open source bundles). Each directory contains everything related tothat feature, including PHP files,
templates, stylesheets, JavaScripts, tests and anything else. Every aspect ofafeature exists inabundle
and every feature lives in a bundle.
Anapplication ismade upofbundles asdefined intheregisterBundles() method oftheAppKernel
class:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24// app/AppKernel.php
publicfunction registerBundles ()
{
$bundles =array(
newSymfony\Bundle\FrameworkBundle\FrameworkBundle (),
newSymfony\Bundle\SecurityBundle\SecurityBundle (),
newSymfony\Bundle\TwigBundle\TwigBundle (),
newSymfony\Bundle\MonologBundle\MonologBundle (),
newSymfony\Bundle\SwiftmailerBundle\SwiftmailerBundle (),
newSymfony\Bundle\DoctrineBundle\DoctrineBundle (),
newSymfony\Bundle\AsseticBundle\AsseticBundle (),
newSensio\Bundle\FrameworkExtraBundle\SensioFrameworkExtraBundle (),
newJMS\SecurityExtraBundle\JMSSecurityExtraBundle (),
);
if(in_array ($this->getEnvironment (),array('dev','test'))){
$bundles []=newAcme\DemoBundle\AcmeDemoBundle ();
$bundles []=newSymfony\Bundle\WebProfilerBundle\WebProfilerBundle ();
$bundles []=newSensio\Bundle\DistributionBundle\SensioDistributionBundle ();
$bundles []=newSensio\Bundle\GeneratorBundle\SensioGeneratorBundle ();
}
return$bundles ;
}
With theregisterBundles() method, you have total control over which bundles areused byyour
application (including the core Symfony bundles).
Abundle canliveanywhere aslong asitcanbeautoloaded (viatheautoloader configured atapp/
autoload.php ).
Creating a Bundle
The Symfony Standard Edition comes with ahandy task that creates afully-functional bundle foryou.
Of course, creating a bundle by hand is pretty easy as well.
6.http://knpbundles.com
PDF brought to you by
generated on November 25, 2013Chapter 4: Creating Pages in Symfony2 | 40
Listing 4-19
Listing 4-20
Listing 4-21Toshow you how simple thebundle system is,create anew bundle called AcmeTestBundle and enable
it.
The Acmeportion isjust adummy name that should bereplaced bysome "vendor" name that
represents you or your organization (e.g. ABCTestBundle for some company named ABC).
Start by creating a src/Acme/TestBundle/ directory and adding a new file called AcmeTestBundle.php :
1
2
3
4
5
6
7
8// src/Acme/TestBundle/AcmeTestBundle.php
namespace Acme\TestBundle ;
useSymfony\Component\HttpKernel\Bundle\Bundle ;
classAcmeTestBundle extends Bundle
{
}
The name AcmeTestBundle follows thestandard Bundle naming conventions .You could also
choose toshorten thename ofthebundle tosimply TestBundle bynaming thisclass TestBundle
(and naming the file TestBundle.php ).
This empty class istheonly piece you need tocreate thenew bundle. Though commonly empty, this
class is powerful and can be used to customize the behavior of the bundle.
Now that you've created the bundle, enable it via the AppKernel class:
1
2
3
4
5
6
7
8
9
10
11
12// app/AppKernel.php
publicfunction registerBundles ()
{
$bundles =array(
...,
// register your bundles
newAcme\TestBundle\AcmeTestBundle (),
);
// ...
return$bundles ;
}
And while it doesn't do anything yet, AcmeTestBundle is now ready to be used.
And aseasy asthis is,Symfony also provides acommand-line interface forgenerating abasic bundle
skeleton:
1$php app/console generate:bundle --namespace =Acme/TestBundle
The bundle skeleton generates with abasic controller, template and routing resource that can be
customized. You'll learn more about Symfony2's command-line tools later.
Whenever creating anew bundle orusing athird-party bundle, always make sure thebundle has
been enabled inregisterBundles() .When using thegenerate:bundle command, this isdone
for you.
PDF brought to you by
generated on November 25, 2013Chapter 4: Creating Pages in Symfony2 | 41
Listing 4-22Bundle Directory Structure
The directory structure ofabundle issimple and flexible. Bydefault, thebundle system follows a
setofconventions that help tokeep code consistent between allSymfony2 bundles. Take alook at
AcmeHelloBundle , as it contains some of the most common elements of a bundle:
•Controller/ contains the controllers of the bundle (e.g. HelloController.php );
•DependencyInjection/ holds certain dependency injection extension classes, which may
import service configuration, register compiler passes ormore (this directory isnotnecessary);
•Resources/ config/ houses configuration, including routing configuration (e.g.
routing.yml );
•Resources/ views/ holds templates organized by controller name (e.g. Hello/
index.html.twig );
•Resources/ public/ contains web assets (images, stylesheets, etc) and iscopied or
symbolically linked into theproject web/directory viatheassets:install console command;
•Tests/holds all tests for the bundle.
Abundle canbeassmall orlarge asthefeature itimplements. Itcontains only thefiles you need and
nothing else.
Asyou move through thebook, you'll learn how topersist objects toadatabase, create and validate
forms, create translations foryour application, write tests and much more. Each ofthese hastheir own
place and role within the bundle.
Application Configuration
Anapplication consists ofacollection ofbundles representing allofthefeatures andcapabilities ofyour
application. Each bundle canbecustomized viaconfiguration files written inYAML, XML orPHP. By
default, themain configuration filelives intheapp/config/ directory and iscalled either config.yml ,
config.xml orconfig.php depending on which format you prefer:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23# app/config/config.yml
imports:
-{resource :parameters.ini }
-{resource :security.yml }
framework :
secret: "%secret%"
charset: UTF-8
router: {resource :"%kernel.root_dir%/config/routing.yml" }
form: true
csrf_protection :true
validation :{enable_annotations :true}
templating :{engines:['twig']}#assets_version: SomeVersionScheme
session:
default_locale :"%locale%"
auto_start :true
# Twig Configuration
twig:
debug: "%kernel.debug%"
strict_variables :"%kernel.debug%"
# ...
PDF brought to you by
generated on November 25, 2013Chapter 4: Creating Pages in Symfony2 | 42
Listing 4-23
Listing 4-24
Listing 4-25You'll learn exactly how to load each file/format in the next section Environments .
Each top-level entry like framework ortwigdefines theconfiguration foraparticular bundle. For
example, theframework key defines theconfiguration forthecore Symfony FrameworkBundle and
includes configuration for the routing, templating, and other core systems.
Fornow, don't worry about thespecific configuration options ineach section. The configuration file
ships with sensible defaults. Asyouread more andexplore each part ofSymfony2, you'll learn about the
specific configuration options of each feature.
Configuration Formats
Throughout thechapters, allconfiguration examples will beshown inallthree formats (YAML,
XML andPHP). Each hasitsown advantages anddisadvantages. The choice ofwhich touseisup
to you:
•YAML : Simple, clean and readable (learn more about yaml in " The YAML Format ");
•XML : More powerful than YAML at times and supports IDE autocompletion;
•PHP : Very powerful but less readable than standard configuration formats.
Environments
Anapplication canruninvarious environments. The different environments share thesame PHP code
(apart from thefront controller), butusedifferent configuration. Forinstance, adevenvironment will
logwarnings and errors, while aprodenvironment will only logerrors. Some files arerebuilt oneach
request inthedevenvironment (forthedeveloper's convenience), butcached intheprodenvironment.
All environments live together on the same machine and execute the same application.
ASymfony2 project generally begins with three environments (dev,testandprod),though creating new
environments iseasy. You canview your application indifferent environments simply bychanging the
front controller inyour browser. Toseetheapplication inthedevenvironment, access theapplication
via the development front controller:
1http://localhost/app_dev.php/hello/Ryan
Ifyou'd liketoseehow your application willbehave intheproduction environment, calltheprodfront
controller instead:
1http://localhost/app.php/hello/Ryan
Since theprodenvironment isoptimized forspeed; theconfiguration, routing and Twig templates are
compiled into flatPHP classes and cached. When viewing changes intheprodenvironment, you'll need
to clear these cached files and allow them to rebuild:
1$php app/console cache:clear --env =prod --no-debug
PDF brought to you by
generated on November 25, 2013Chapter 4: Creating Pages in Symfony2 | 43
Listing 4-26
Listing 4-27
Listing 4-28Ifyou open theweb/app.php file, you'll find that it'sconfigured explicitly touse theprod
environment:
1$kernel =newAppKernel ('prod',false);
You cancreate anew front controller foranew environment bycopying thisfileandchanging prod
to some other value.
The testenvironment isused when running automated tests and cannot beaccessed directly
through the browser. See the testing chapter for more details.
Environment Configuration
The AppKernel class is responsible for actually loading the configuration file of your choice:
1
2
3
4
5
6
7// app/AppKernel.php
publicfunction registerContainerConfiguration (LoaderInterface $loader)
{
$loader->load(
__DIR__.'/config/config_' .$this->getEnvironment ().'.yml'
);
}
You already know that the.ymlextension canbechanged to.xmlor.phpifyou prefer touseeither
XML orPHP towrite your configuration. Notice also that each environment loads itsown configuration
file. Consider the configuration file for the devenvironment.
1
2
3
4
5
6
7
8
9# app/config/config_dev.yml
imports:
-{resource :config.yml }
framework :
router:{resource :"%kernel.root_dir%/config/routing_dev.yml" }
profiler :{only_exceptions :false}
# ...
The imports keyissimilar toaPHP include statement and guarantees that themain configuration file
(config.yml )isloaded first. The rest ofthefiletweaks thedefault configuration forincreased logging
and other settings conducive to a development environment.
Both theprodand testenvironments follow thesame model: each environment imports thebase
configuration fileand then modifies itsconfiguration values tofittheneeds ofthespecific environment.
This isjustaconvention, butonethat allows youtoreuse most ofyour configuration andcustomize just
pieces of it between environments.
Summary
Congratulations! You've now seen every fundamental aspect ofSymfony2 andhave hopefully discovered
how easy and flexible itcanbe.And while there arealotoffeatures stilltocome, besure tokeep the
following basic points in mind:
PDF brought to you by
generated on November 25, 2013Chapter 4: Creating Pages in Symfony2 | 44
•Creating apage isathree-step process involving aroute ,acontroller and (optionally) a
template ;
•Each project contains justafewmain directories: web/(web assets and thefront controllers),
app/(configuration), src/(your bundles), andvendor/(third-party code) (there's also abin/
directory that's used to help updated vendor libraries);
•Each feature inSymfony2 (including theSymfony2 framework core) isorganized into abundle ,
which is a structured set of files for that feature;
•The configuration foreach bundle lives intheResources/ configdirectory ofthebundle and
can be specified in YAML, XML or PHP;
•The global application configuration lives in the app/config directory;
•Each environment isaccessible via adifferent front controller (e.g. app.php and
app_dev.php ) and loads a different configuration file.
From here, each chapter will introduce you tomore and more powerful tools and advanced concepts.
The more youknow about Symfony2, themore you'll appreciate theflexibility ofitsarchitecture andthe
power it gives you to rapidly develop applications.
PDF brought to you by
generated on November 25, 2013Chapter 4: Creating Pages in Symfony2 | 45
Listing 5-1Chapter 5
Controller
Acontroller isaPHP function you create that takes information from theHTTP request and constructs
andreturns anHTTP response (asaSymfony2 Response object). The response could beanHTML page,
anXML document, aserialized JSON array, animage, aredirect, a404 error oranything else you can
dream up.The controller contains whatever arbitrary logic your application needs torender thecontent
of a page.
Seehow simple this isbylooking ataSymfony2 controller inaction. The following controller would
render a page that simply prints Hello world! :
1
2
3
4
5
6useSymfony\Component\HttpFoundation\Response ;
publicfunction helloAction ()
{
returnnewResponse ('Hello world!' );
}
The goal ofacontroller isalways thesame: create andreturn aResponse object. Along theway, itmight
read information from therequest, load adatabase resource, send anemail, orsetinformation onthe
user's session. But inallcases, thecontroller will eventually return theResponse object that will be
delivered back to the client.
There's no magic and no other requirements to worry about! Here are a few common examples:
•Controller Aprepares aResponse object representing thecontent forthehomepage ofthesite.
•Controller Breads theslugparameter from therequest toload ablog entry from thedatabase
and create aResponse object displaying that blog. Iftheslugcan't befound inthedatabase,
it creates and returns a Response object with a 404 status code.
•Controller Chandles theform submission ofacontact form. Itreads theform information
from therequest, saves thecontact information tothedatabase and emails thecontact
information tothewebmaster. Finally, itcreates aResponse object that redirects theclient's
browser to the contact form "thank you" page.
PDF brought to you by
generated on November 25, 2013Chapter 5: Controller | 46
Listing 5-2Requests, Controller, Response Lifecycle
Every request handled byaSymfony2 project goes through thesame simple lifecycle. The framework
takes care oftherepetitive tasks and ultimately executes acontroller, which houses your custom
application code:
1.Each request ishandled byasingle front controller file(e.g. app.php orapp_dev.php )that
bootstraps the application;
2.The Routerreads information from therequest (e.g. theURI), finds aroute that matches that
information, and reads the _controller parameter from the route;
3.The controller from thematched route isexecuted and thecode inside thecontroller creates
and returns a Response object;
4.The HTTP headers and content of the Response object are sent back to the client.
Creating apage isaseasy ascreating acontroller (#3) and making aroute that maps aURL tothat
controller (#2).
Though similarly named, a"front controller" isdifferent from the"controllers" talked about inthis
chapter. Afront controller isashort PHP filethat lives inyour web directory andthrough which all
requests aredirected. Atypical application will have aproduction front controller (e.g. app.php)
and adevelopment front controller (e.g. app_dev.php ).You'll likely never need toedit, view or
worry about the front controllers in your application.
A Simple Controller
While acontroller canbeanyPHP callable (afunction, method onanobject, oraClosure),inSymfony2,
a controller is usually a single method inside a controller object. Controllers are also called actions .
1
2
3
4
5
6
7
8
9
10
11
12// src/Acme/HelloBundle/Controller/HelloController.php
namespace Acme\HelloBundle\Controller ;
useSymfony\Component\HttpFoundation\Response ;
classHelloController
{
publicfunction indexAction ($name)
{
returnnewResponse ('<html><body>Hello ' .$name.'!</body></html>' );
}
}
Note that the controller isthe indexAction method, which lives inside acontroller class
(HelloController ).Don't beconfused bythenaming: acontroller class issimply aconvenient
way togroup several controllers/ actions together. Typically, thecontroller class willhouse several
controllers/actions (e.g. updateAction ,deleteAction , etc).
This controller is pretty straightforward:
•line4:Symfony2 takes advantage ofPHP 5.3namespace functionality tonamespace theentire
controller class. The usekeyword imports theResponse class, which thecontroller must
return.
•line 6:The class name istheconcatenation ofaname forthecontroller class (i.e. Hello)
and theword Controller .This isaconvention that provides consistency tocontrollers and
PDF brought to you by
generated on November 25, 2013Chapter 5: Controller | 47
Listing 5-3
Listing 5-4allows them tobereferenced only bythefirst part ofthename (i.e. Hello)intherouting
configuration.
•line8:Each action inacontroller class issuffixed with Actionandisreferenced intherouting
configuration bytheaction's name (index).Inthenext section, you'll create aroute that maps
aURI tothisaction. You'll learn how theroute's placeholders ({name})become arguments to
the action method ( $name).
•line 10 : The controller creates and returns a Response object.
Mapping a URL to a Controller
The new controller returns asimple HTML page. Toactually view thispage inyour browser, you need
to create a route, which maps a specific URL pattern to the controller:
1
2
3
4# app/config/routing.yml
hello:
pattern:/hello/{name}
defaults :{_controller :AcmeHelloBundle :Hello:index}
Going to/hello/ryannow executes theHelloController::indexAction() controller and passes in
ryanforthe$namevariable. Creating a"page" means simply creating acontroller method andassociated
route.
Notice thesyntax used torefer tothecontroller: AcmeHelloBundle:Hello:index .Symfony2 uses a
flexible string notation torefer todifferent controllers. This isthemost common syntax and tells
Symfony2 tolook for acontroller class called HelloController inside abundle named
AcmeHelloBundle . The method indexAction() is then executed.
For more details onthestring format used toreference different controllers, seeController Naming
Pattern .
This example places therouting configuration directly intheapp/config/directory. Abetter way
toorganize your routes istoplace each route inthebundle itbelongs to.Formore information on
this, see Including External Routing Resources .
You can learn much more about the routing system in the Routing chapter .
Route Parameters as Controller Arguments
You already know that the _controller parameter AcmeHelloBundle:Hello:index refers toa
HelloController::indexAction() method that lives inside theAcmeHelloBundle bundle. What's more
interesting is the arguments that are passed to that method:
1
2
3
4
5
6
7
8// src/Acme/HelloBundle/Controller/HelloController.php
namespace Acme\HelloBundle\Controller ;
useSymfony\Bundle\FrameworkBundle\Controller\Controller ;
classHelloController extends Controller
{
publicfunction indexAction ($name)
PDF brought to you by
generated on November 25, 2013Chapter 5: Controller | 48
Listing 5-5
Listing 5-6
Listing 5-7
Listing 5-8
Listing 5-99
10
11
12{
// ...
}
}
The controller hasasingle argument, $name,which corresponds tothe{name}parameter from the
matched route (ryanintheexample). Infact, when executing your controller, Symfony2 matches each
argument of the controller with a parameter from the matched route. Take the following example:
1
2
3
4# app/config/routing.yml
hello:
pattern:/hello/{first_name}/{last_name}
defaults :{_controller :AcmeHelloBundle :Hello:index,color:green}
The controller for this can take several arguments:
1
2
3
4publicfunction indexAction ($first_name ,$last_name ,$color)
{
// ...
}
Notice that both placeholder variables ({first_name} ,{last_name} )aswell asthedefault color
variable areavailable asarguments inthecontroller. When aroute ismatched, theplaceholder variables
are merged with the defaults to make one array that's available to your controller.
Mapping route parameters tocontroller arguments iseasy and flexible. Keep thefollowing guidelines in
mind while you develop.
•The order of the controller arguments does not matter
Symfony isable tomatch theparameter names from theroute tothevariable
names inthecontroller method's signature. Inother words, itrealizes that the
{last_name} parameter matches upwith the$last_name argument. The arguments
of the controller could be totally reordered and still work perfectly:
1
2
3
4publicfunction indexAction ($last_name ,$color,$first_name )
{
// ...
}
•Each required controller argument must match up with a routing parameter
The following would throw aRuntimeException because there isnofooparameter
defined in the route:
1
2
3
4publicfunction indexAction ($first_name ,$last_name ,$color,$foo)
{
// ...
}
Making theargument optional, however, isperfectly ok.The following example
would not throw an exception:
PDF brought to you by
generated on November 25, 2013Chapter 5: Controller | 49
Listing 5-10
Listing 5-11
Listing 5-121
2
3
4publicfunction indexAction ($first_name ,$last_name ,$color,$foo=
'bar')
{
// ...
}
•Not all routing parameters need to be arguments on your controller
If,forexample, thelast_name weren't important foryour controller, youcould omit
it entirely:
1
2
3
4publicfunction indexAction ($first_name ,$color)
{
// ...
}
Every route also hasaspecial _routeparameter, which isequal tothename oftheroute that was
matched (e.g. hello).Though notusually useful, thisisequally available asacontroller argument.
The Requestas a Controller Argument
For convenience, you can also have Symfony pass you theRequest object asanargument toyour
controller. This is especially convenient when you're working with forms, for example:
1
2
3
4
5
6
7
8
9useSymfony\Component\HttpFoundation\Request ;
publicfunction updateAction (Request $request )
{
$form=$this->createForm (...);
$form->bindRequest ($request );
// ...
}
Creating Static Pages
You can create a static page without even creating a controller (only a route and template are needed).
Use it! See How to render a Template without a custom Controller .
The Base Controller Class
For convenience, Symfony2 comes with abase Controller class that assists with some ofthemost
common controller tasks and gives your controller class access toany resource itmight need. By
extending this Controller class, you can take advantage of several helper methods.
Add the usestatement atop the Controller class and then modify the HelloController to extend it:
PDF brought to you by
generated on November 25, 2013Chapter 5: Controller | 50
Listing 5-13
Listing 5-141
2
3
4
5
6
7
8
9
10
11
12
13// src/Acme/HelloBundle/Controller/HelloController.php
namespace Acme\HelloBundle\Controller ;
useSymfony\Bundle\FrameworkBundle\Controller\Controller ;
useSymfony\Component\HttpFoundation\Response ;
classHelloController extends Controller
{
publicfunction indexAction ($name)
{
returnnewResponse ('<html><body>Hello ' .$name.'!</body></html>' );
}
}
This doesn't actually change anything about how your controller works. Inthenext section, you'll
learn about thehelper methods that thebase controller class makes available. These methods arejust
shortcuts tousing core Symfony2 functionality that's available toyouwith orwithout theuseofthebase
Controller class. Agreat way toseethecore functionality inaction istolook intheController1class
itself.
Extending the base class isoptional inSymfony; itcontains useful shortcuts but nothing
mandatory. You can also extend ContainerAware2.The service container object will then be
accessible via the container property.
You can also define your Controllers as Services .
Common Controller Tasks
Though acontroller candovirtually anything, most controllers will perform thesame basic tasks over
and over again. These tasks, such asredirecting, forwarding, rendering templates and accessing core
services, are very easy to manage in Symfony2.
Redirecting
If you want to redirect the user to another page, use the redirect() method:
1
2
3
4publicfunction indexAction ()
{
return$this->redirect ($this->generateUrl ('homepage' ));
}
The generateUrl() method isjustahelper function that generates theURL foragiven route. Formore
information, see the Routing chapter.
Bydefault, theredirect() method performs a302(temporary) redirect. Toperform a301(permanent)
redirect, modify the second argument:
1.http://api.symfony.com/2.0/Symfony/Bundle/FrameworkBundle/Controller/Controller.html
2.http://api.symfony.com/2.0/Symfony/Component/DependencyInjection/ContainerAware.html
PDF brought to you by
generated on November 25, 2013Chapter 5: Controller | 51
Listing 5-15
Listing 5-16
Listing 5-171
2
3
4publicfunction indexAction ()
{
return$this->redirect ($this->generateUrl ('homepage' ),301);
}
The redirect() method issimply ashortcut that creates aResponse object that specializes in
redirecting the user. It's equivalent to:
1
2
3useSymfony\Component\HttpFoundation\RedirectResponse ;
returnnewRedirectResponse ($this->generateUrl ('homepage' ));
Forwarding
You can also easily forward toanother controller internally with theforward() method. Instead of
redirecting theuser's browser, itmakes aninternal sub-request, and calls thespecified controller. The
forward() method returns the Response object that's returned from that controller:
1
2
3
4
5
6
7
8
9
10
11publicfunction indexAction ($name)
{
$response =$this->forward('AcmeHelloBundle:Hello:fancy' ,array(
'name' =>$name,
'color' =>'green',
));
// ... further modify the response or return it directly
return$response ;
}
Notice that theforward() method uses thesame string representation ofthecontroller used inthe
routing configuration. Inthis case, thetarget controller class will beHelloController inside some
AcmeHelloBundle .The array passed tothemethod becomes thearguments ontheresulting controller.
This same interface isused when embedding controllers into templates (see Embedding Controllers ).The
target controller method should look something like the following:
1
2
3
4publicfunction fancyAction ($name,$color)
{
// ... create and return a Response object
}
And justlikewhen creating acontroller foraroute, theorder ofthearguments tofancyAction doesn't
matter. Symfony2 matches theindex key names (e.g. name)with themethod argument names (e.g.
$name).Ifyou change theorder ofthearguments, Symfony2 will still pass thecorrect value toeach
variable.
PDF brought to you by
generated on November 25, 2013Chapter 5: Controller | 52
Listing 5-18
Listing 5-19
Listing 5-20Like other base Controller methods, theforward method isjust ashortcut forcore Symfony2
functionality. Aforward can beaccomplished directly viathehttp_kernel service. Aforward
returns a Response object:
1
2
3
4
5
6
7
8$httpKernel =$this->container ->get('http_kernel' );
$response =$httpKernel ->forward(
'AcmeHelloBundle:Hello:fancy' ,
array(
'name' =>$name,
'color' =>'green',
)
);
Rendering Templates
Though not arequirement, most controllers will ultimately render atemplate that's responsible for
generating theHTML (orother format) forthecontroller. The renderView() method renders atemplate
and returns its content. The content from the template can be used to create a Response object:
1
2
3
4
5
6
7
8useSymfony\Component\HttpFoundation\Response ;
$content =$this->renderView (
'AcmeHelloBundle:Hello:index.html.twig' ,
array('name'=>$name)
);
returnnewResponse ($content );
This caneven bedone injust one step with therender() method, which returns aResponse object
containing the content from the template:
1
2
3
4return$this->render(
'AcmeHelloBundle:Hello:index.html.twig' ,
array('name'=>$name)
);
Inboth cases, theResources/ views/Hello/index.html.twig template inside theAcmeHelloBundle
will be rendered.
The Symfony templating engine is explained in great detail in the Templating chapter.
You can even avoid calling therendermethod byusing the@Template annotation. See the
FrameworkExtraBundle documentation more details.
PDF brought to you by
generated on November 25, 2013Chapter 5: Controller | 53
Listing 5-21
Listing 5-22
Listing 5-23
Listing 5-24
Listing 5-25The renderView method isashortcut todirect useofthetemplating service. The templating
service can also be used directly:
1
2
3
4
5$templating =$this->get('templating' );
$content =$templating ->render(
'AcmeHelloBundle:Hello:index.html.twig' ,
array('name'=>$name)
);
Itispossible torender templates indeeper subdirectories aswell, however becareful toavoid the
pitfall of making your directory structure unduly elaborate:
1
2
3
4
5$templating ->render(
'AcmeHelloBundle:Hello/Greetings:index.html.twig' ,
array('name'=>$name)
);
// index.html.twig found in Resources/views/Hello/Greetings is rendered.
Accessing other Services
When extending thebase controller class, you canaccess anySymfony2 service viatheget()method.
Here are several common services you might need:
1
2
3
4
5
6
7$request =$this->getRequest ();
$templating =$this->get('templating' );
$router =$this->get('router' );
$mailer =$this->get('mailer' );
There arecountless other services available and you areencouraged todefine your own. Tolistall
available services, use the container:debug console command:
1$php app/console container:debug
For more information, see the Service Container chapter.
Managing Errors and 404 Pages
When things arenotfound, you should play well with theHTTP protocol and return a404 response.
Todothis, you'll throw aspecial type ofexception. Ifyou're extending thebase controller class, dothe
following:
1
2
3
4
5
6publicfunction indexAction ()
{
// retrieve the object from database
$product =...;
if(!$product ){
throw$this->createNotFoundException ('The product does not exist' );
PDF brought to you by
generated on November 25, 2013Chapter 5: Controller | 54
Listing 5-26
Listing 5-27
Listing 5-287
8
9
10}
return$this->render(...);
}
The createNotFoundException() method creates aspecial NotFoundHttpException object, which
ultimately triggers a 404 HTTP response inside Symfony.
Ofcourse, you're free tothrow any Exception class inyour controller -Symfony2 will automatically
return a 500 HTTP response code.
1thrownew\Exception ('Something went wrong!' );
Inevery case, astyled error page isshown totheend user and afulldebug error page isshown tothe
developer (when viewing thepage indebug mode). Both ofthese error pages canbecustomized. For
details, read the " How to customize Error Pages " cookbook recipe.
Managing the Session
Symfony2 provides anice session object that you canusetostore information about theuser (beita
realperson using abrowser, abot, oraweb service) between requests. Bydefault, Symfony2 stores the
attributes in a cookie by using the native PHP sessions.
Storing and retrieving information from the session can be easily achieved from any controller:
1
2
3
4
5
6
7
8
9
10$session =$this->getRequest ()->getSession ();
// store an attribute for reuse during a later user request
$session ->set('foo','bar');
// in another controller for another request
$foo=$session ->get('foo');
// set the user locale
$session ->setLocale ('fr');
These attributes will remain on the user for the remainder of that user's session.
Flash Messages
You canalso store small messages that will bestored ontheuser's session forexactly one additional
request. This isuseful when processing aform: you want toredirect and have aspecial message shown
on the next request. These types of messages are called "flash" messages.
For example, imagine you're processing a form submit:
1
2
3
4
5
6
7
8
9publicfunction updateAction ()
{
$form=$this->createForm (...);
$form->bindRequest ($this->getRequest ());
if($form->isValid()){
// do some sort of processing
$this->get('session' )->setFlash (
PDF brought to you by
generated on November 25, 2013Chapter 5: Controller | 55
Listing 5-29
Listing 5-30
Listing 5-3110
11
12
13
14
15
16
17
18'notice' ,
'Your changes were saved!'
);
return$this->redirect ($this->generateUrl (...));
}
return$this->render(...);
}
After processing therequest, thecontroller sets anoticeflash message and then redirects. The name
(notice) isn't significant - it's just what you're using to identify the type of the message.
In the template of the next action, the following code could be used to render the noticemessage:
1
2
3
4
5{%ifapp.session.hasFlash ('notice' )%}
<divclass="flash-notice" >
{{app.session.flash ('notice' )}}
</div>
{%endif%}
Bydesign, flash messages aremeant toliveforexactly one request (they're "gone inaflash"). They're
designed to be used across redirects exactly as you've done in this example.
The Response Object
The only requirement foracontroller istoreturn aResponse object. The Response3class isaPHP
abstraction around theHTTP response -thetext-based message filled with HTTP headers and content
that's sent back to the client:
1
2
3
4
5
6
7
8useSymfony\Component\HttpFoundation\Response ;
// create a simple Response with a 200 status code (the default)
$response =newResponse ('Hello ' .$name,200);
// create a JSON-response with a 200 status code
$response =newResponse (json_encode (array('name'=>$name)));
$response ->headers->set('Content-Type' ,'application/json' );
The headersproperty isaHeaderBag4object with several useful methods forreading andmutating
theResponse headers. The header names arenormalized sothat using Content-Type isequivalent
tocontent-type or even content_type .
The Request Object
Besides thevalues oftherouting placeholders, thecontroller also hasaccess totheRequest object when
extending the base Controller class:
3.http://api.symfony.com/2.0/Symfony/Component/HttpFoundation/Response.html
4.http://api.symfony.com/2.0/Symfony/Component/HttpFoundation/HeaderBag.html
PDF brought to you by
generated on November 25, 2013Chapter 5: Controller | 56
1
2
3
4
5
6
7
8
9$request =$this->getRequest ();
$request ->isXmlHttpRequest ();// is it an Ajax request?
$request ->getPreferredLanguage (array('en','fr'));
$request ->query->get('page');// get a $_GET parameter
$request ->request->get('page');// get a $_POST parameter
Like the Response object, the request headers are stored in a HeaderBag object and are easily accessible.
Final Thoughts
Whenever you create apage, you'll ultimately need towrite some code that contains thelogic forthat
page. InSymfony, thisiscalled acontroller, andit'saPHP function that candoanything itneeds inorder
to return the final Response object that will be returned to the user.
Tomake lifeeasier, youcanchoose toextend abase Controller class, which contains shortcut methods
formany common controller tasks. For example, since you don't want toput HTML code inyour
controller, you can use the render() method to render and return the content from a template.
Inother chapters, you'll seehow thecontroller canbeused topersist and fetch objects from adatabase,
process form submissions, handle caching and more.
Learn more from the Cookbook
•How to customize Error Pages
•How to define Controllers as Services
PDF brought to you by
generated on November 25, 2013Chapter 5: Controller | 57
Listing 6-1
Listing 6-2Chapter 6
Routing
Beautiful URLs areanabsolute must foranyserious web application. This means leaving behind ugly
URLs like index.php?article_id=57 in favor of something like /read/intro-to-symfony .
Having flexibility iseven more important. What ifyouneed tochange theURL ofapage from /blogto
/news?How many links should you need tohunt down and update tomake thechange? Ifyou're using
Symfony's router, the change is simple.
The Symfony2 router letsyou define creative URLs that you map todifferent areas ofyour application.
By the end of this chapter, you'll be able to:
•Create complex routes that map to controllers
•Generate URLs inside templates and controllers
•Load routing resources from bundles (or anywhere else)
•Debug your routes
Routing in Action
Aroute isamap from aURL pattern toacontroller. Forexample, suppose youwant tomatch anyURL
like/blog/my-postor/blog/all-about-symfony andsend ittoacontroller that canlook upandrender
that blog entry. The route is simple:
1
2
3
4# app/config/routing.yml
blog_show :
pattern:/blog/{slug}
defaults :{_controller :AcmeBlogBundle :Blog:show}
The pattern defined bytheblog_show route acts like/blog/*where thewildcard isgiven thename slug.
FortheURL /blog/my-blog-post ,theslugvariable gets avalue ofmy-blog-post ,which isavailable
for you to use in your controller (keep reading).
The _controller parameter isaspecial keythat tells Symfony which controller should beexecuted when
aURL matches this route. The _controller string iscalled thelogical name .Itfollows apattern that
points to a specific PHP class and method:
PDF brought to you by
generated on November 25, 2013Chapter 6: Routing | 58
Listing 6-31
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17// src/Acme/BlogBundle/Controller/BlogController.php
namespace Acme\BlogBundle\Controller ;
useSymfony\Bundle\FrameworkBundle\Controller\Controller ;
classBlogController extends Controller
{
publicfunction showAction ($slug)
{
// use the $slug variable to query the database
$blog=...;
return$this->render('AcmeBlogBundle:Blog:show.html.twig' ,array(
'blog'=>$blog,
));
}
}
Congratulations! You've just created your first route and connected ittoacontroller. Now, when you
visit /blog/my-post,theshowAction controller willbeexecuted andthe$slugvariable willbeequal to
my-post.
This isthegoal oftheSymfony2 router: tomap theURL ofarequest toacontroller. Along theway, you'll
learn all sorts of tricks that make mapping even the most complex URLs easy.
Routing: Under the Hood
When arequest ismade toyour application, itcontains anaddress totheexact "resource" that the
client isrequesting. This address iscalled theURL, (orURI), andcould be/contact ,/blog/read-me,or
anything else. Take the following HTTP request for example:
1GET /blog/my-blog-post
The goal oftheSymfony2 routing system istoparse thisURL anddetermine which controller should be
executed. The whole process looks like this:
1.The request is handled by the Symfony2 front controller (e.g. app.php);
2.The Symfony2 core (i.e. Kernel) asks the router to inspect the request;
3.The router matches theincoming URL toaspecific route and returns information about the
route, including the controller that should be executed;
4.The Symfony2 Kernel executes the controller, which ultimately returns a Response object.
PDF brought to you by
generated on November 25, 2013Chapter 6: Routing | 59
Listing 6-4
Listing 6-5
Listing 6-6The routing layer is a tool that translates the incoming URL into a specific controller to execute.
Creating Routes
Symfony loads alltheroutes foryour application from asingle routing configuration file. The fileis
usually app/config/routing.yml ,butcanbeconfigured tobeanything (including anXML orPHP file)
via the application configuration file:
1
2
3
4# app/config/config.yml
framework :
# ...
router: {resource :"%kernel.root_dir%/config/routing.yml" }
Even though allroutes areloaded from asingle file, it'scommon practice toinclude additional
routing resources. Todoso,just point outinthemain routing configuration filewhich external
files should beincluded. See the Including External Routing Resources section for more
information.
Basic Route Configuration
Defining aroute iseasy, and atypical application will have lotsofroutes. Abasic route consists ofjust
two parts: the patternto match and a defaults array:
1
2
3_welcome :
pattern:/
defaults :{_controller :AcmeDemoBundle :Main:homepage }
This route matches thehomepage (/)and maps ittotheAcmeDemoBundle:Main:homepage controller.
The _controller string istranslated bySymfony2 into anactual PHP function and executed. That
process will be explained shortly in the Controller Naming Pattern section.
Routing with Placeholders
Ofcourse therouting system supports much more interesting routes. Many routes will contain one or
more named "wildcard" placeholders:
1
2
3blog_show :
pattern:/blog/{slug}
defaults :{_controller :AcmeBlogBundle :Blog:show}
The pattern will match anything that looks like /blog/*.Even better, thevalue matching the{slug}
placeholder will beavailable inside your controller. Inother words, iftheURL is/blog/hello-world ,
a$slugvariable, with avalue ofhello-world ,will beavailable inthecontroller. This canbeused, for
example, to load the blog post matching that string.
The pattern will not,however, match simply /blog.That's because, bydefault, allplaceholders are
required. This can be changed by adding a placeholder value to the defaults array.
Required and Optional Placeholders
Tomake things more exciting, add anew route that displays alistofalltheavailable blog posts forthis
imaginary blog application:
PDF brought to you by
generated on November 25, 2013Chapter 6: Routing | 60
Listing 6-7
Listing 6-8
Listing 6-9
Listing 6-101
2
3blog:
pattern:/blog
defaults :{_controller :AcmeBlogBundle :Blog:index}
Sofar,thisroute isassimple aspossible -itcontains noplaceholders andwillonly match theexact URL
/blog.Butwhat ifyouneed thisroute tosupport pagination, where /blog/2displays thesecond page of
blog entries? Update the route to have a new {page}placeholder:
1
2
3blog:
pattern:/blog/{page}
defaults :{_controller :AcmeBlogBundle :Blog:index}
Like the{slug}placeholder before, thevalue matching {page}will beavailable inside your controller.
Its value can be used to determine which set of blog posts to display for the given page.
Buthold on!Since placeholders arerequired bydefault, thisroute willnolonger match onsimply /blog.
Instead, toseepage 1oftheblog, you'd need tousetheURL /blog/1!Since that's noway forarich web
app tobehave, modify theroute tomake the{page}parameter optional. This isdone byincluding itin
thedefaults collection:
1
2
3blog:
pattern:/blog/{page}
defaults :{_controller :AcmeBlogBundle :Blog:index,page:1}
Byadding pagetothedefaults key, the{page}placeholder isnolonger required. The URL /blogwill
match thisroute andthevalue ofthepageparameter willbesetto1.The URL /blog/2 willalso match,
giving the pageparameter a value of 2. Perfect.
/blog {page} = 1
/blog/1 {page} = 1
/blog/2 {page} = 2
Routes with optional parameters attheend will notmatch onrequests with atrailing slash (i.e.
/blog/will not match, /blogwill match).
Adding Requirements
Take a quick look at the routes that have been created so far:
1
2
3
4
5
6
7blog:
pattern:/blog/{page}
defaults :{_controller :AcmeBlogBundle :Blog:index,page:1}
blog_show :
pattern:/blog/{slug}
defaults :{_controller :AcmeBlogBundle :Blog:show}
Can you spot theproblem? Notice that both routes have patterns that match URLs that look like
/blog/*.The Symfony router will always choose thefirst matching route itfinds. Inother words, the
blog_show route will never bematched. Instead, aURL like /blog/my-blog-post will match thefirst
route ( blog) and return a nonsense value of my-blog-post to the {page}parameter.
PDF brought to you by
generated on November 25, 2013Chapter 6: Routing | 61
Listing 6-11
Listing 6-12URL route parameters
/blog/2 blog {page} = 2
/blog/my-blog-post blog {page} = my-blog-post
The answer totheproblem istoaddroute requirements .The routes inthisexample would work perfectly
ifthe/blog/{page}pattern only matched URLs where the{page}portion isaninteger. Fortunately,
regular expression requirements can easily be added for each parameter. For example:
1
2
3
4
5blog:
pattern:/blog/{page}
defaults :{_controller :AcmeBlogBundle :Blog:index,page:1}
requirements :
page:\d+
The \d+requirement isaregular expression that says that thevalue ofthe{page}parameter must bea
digit (i.e. anumber). The blogroute willstillmatch onaURL like/blog/2(because 2isanumber), but
it will no longer match a URL like /blog/my-blog-post (because my-blog-post isnota number).
As a result, a URL like /blog/my-blog-post will now properly match the blog_show route.
URL route parameters
/blog/2 blog {page} = 2
/blog/my-blog-post blog_show {slug} = my-blog-post
Earlier Routes always Win
What thisallmeans isthat theorder oftheroutes isvery important. Iftheblog_show route were
placed above theblogroute, theURL /blog/2 would match blog_show instead ofblogsince
the{slug}parameter ofblog_show hasnorequirements. Byusing proper ordering and clever
requirements, you can accomplish just about anything.
Since the parameter requirements areregular expressions, the complexity and flexibility ofeach
requirement isentirely uptoyou. Suppose thehomepage ofyour application isavailable intwo different
languages, based on the URL:
1
2
3
4
5homepage :
pattern:/{culture}
defaults :{_controller :AcmeDemoBundle :Main:homepage ,culture:en}
requirements :
culture:en|fr
Forincoming requests, the{culture} portion oftheURL ismatched against theregular expression
(en|fr).
/ {culture} = en
/en {culture} = en
/fr {culture} = fr
/es won't match this route
PDF brought to you by
generated on November 25, 2013Chapter 6: Routing | 62
Listing 6-13
Listing 6-14Adding HTTP Method Requirements
Inaddition totheURL, you canalso match onthemethod oftheincoming request (i.e. GET, HEAD,
POST, PUT, DELETE). Suppose you have acontact form with two controllers -one fordisplaying the
form (onaGET request) andoneforprocessing theform when it'ssubmitted (onaPOST request). This
can be accomplished with the following route configuration:
1
2
3
4
5
6
7
8
9
10
11contact:
pattern:/contact
defaults :{_controller :AcmeDemoBundle :Main:contact }
requirements :
_method:GET
contact_process :
pattern:/contact
defaults :{_controller :AcmeDemoBundle :Main:contactProcess }
requirements :
_method:POST
Despite thefactthat these two routes have identical patterns (/contact ),thefirst route willmatch only
GET requests andthesecond route willmatch only POST requests. This means that youcandisplay the
form and submit the form via the same URL, while using distinct controllers for the two actions.
If no _methodrequirement is specified, the route will match on allmethods.
Like theother requirements, the_methodrequirement isparsed asaregular expression. Tomatch GETor
POSTrequests, you can use GET|POST .
Advanced Routing Example
Atthis point, you have everything you need tocreate apowerful routing structure inSymfony. The
following is an example of just how flexible the routing system can be:
1
2
3
4
5
6
7article_show :
pattern:/articles/{culture}/{year}/{title}.{_format}
defaults :{_controller :AcmeDemoBundle :Article:show,_format:html}
requirements :
culture:en|fr
_format:html|rss
year:\d+
Asyou've seen, thisroute willonly match ifthe{culture} portion oftheURL iseither enorfrand if
the{year}isanumber. This route also shows how youcanuseadotbetween placeholders instead ofa
slash. URLs matching this route might look like:
•/articles/en/2010/my-post
•/articles/fr/2010/my-post.rss
•/articles/en/2013/my-latest-post.html
PDF brought to you by
generated on November 25, 2013Chapter 6: Routing | 63
Listing 6-15The Special _formatRouting Parameter
This example also highlights thespecial _format routing parameter. When using thisparameter,
thematched value becomes the"request format" oftheRequest object. Ultimately, therequest
format isused forsuch things such assetting theContent-Type oftheresponse (e.g. ajsonrequest
format translates into aContent-Type ofapplication/ json).Itcanalso beused inthecontroller
torender adifferent template foreach value of_format.The _formatparameter isavery powerful
way to render the same content in different formats.
Special Routing Parameters
Asyou've seen, each routing parameter ordefault value iseventually available asanargument inthe
controller method. Additionally, there arethree parameters that arespecial: each adds aunique piece of
functionality inside your application:
•_controller :Asyou've seen, thisparameter isused todetermine which controller isexecuted
when the route is matched;
•_format: Used to set the request format ( read more );
•_locale: Used to set the locale on the session ( read more );
Controller Naming Pattern
Every route must have a_controller parameter, which dictates which controller should beexecuted
when that route ismatched. This parameter uses asimple string pattern called thelogical controller name ,
which Symfony maps toaspecific PHP method andclass. The pattern hasthree parts, each separated by
a colon:
bundle :controller :action
For example, a _controller value of AcmeBlogBundle:Blog:show means:
Bundle Controller Class Method Name
AcmeBlogBundle BlogController showAction
The controller might look like this:
1
2
3
4
5
6
7
8
9
10
11
12// src/Acme/BlogBundle/Controller/BlogController.php
namespace Acme\BlogBundle\Controller ;
useSymfony\Bundle\FrameworkBundle\Controller\Controller ;
classBlogController extends Controller
{
publicfunction showAction ($slug)
{
// ...
}
}
Notice that Symfony adds thestring Controller totheclass name (Blog=>BlogController )and
Actionto the method name ( show=>showAction ).
PDF brought to you by
generated on November 25, 2013Chapter 6: Routing | 64
Listing 6-16
Listing 6-17You could also refer tothis controller using itsfully-qualified class name and method:
Acme\BlogBundle\Controller\BlogController::showAction .But ifyou follow some simple
conventions, the logical name is more concise and allows more flexibility.
Inaddition tousing thelogical name orthefully-qualified class name, Symfony supports a
third way ofreferring toacontroller. This method uses just one colon separator (e.g.
service_name:indexAction )andrefers tothecontroller asaservice (seeHow todefine Controllers
as Services ).
Route Parameters and Controller Arguments
The route parameters (e.g. {slug})areespecially important because each ismade available asan
argument to the controller method:
1
2
3
4publicfunction showAction ($slug)
{
// ...
}
Inreality, theentire defaults collection ismerged with theparameter values toform asingle array. Each
key of that array is available as an argument on the controller.
Inother words, foreach argument ofyour controller method, Symfony looks foraroute parameter of
that name and assigns itsvalue tothat argument. Intheadvanced example above, anycombination (in
any order) of the following variables could be used as arguments to the showAction() method:
•$culture
•$year
•$title
•$_format
•$_controller
Since theplaceholders and defaults collection aremerged together, even the$_controller variable is
available. For a more detailed discussion, see Route Parameters as Controller Arguments .
You canalso useaspecial $_routevariable, which issettothename oftheroute that wasmatched.
Including External Routing Resources
Allroutes areloaded viaasingle configuration file-usually app/config/routing.yml (see Creating
Routes above). Commonly, however, you'll want toload routes from other places, likearouting filethat
lives inside a bundle. This can be done by "importing" that file:
1
2
3# app/config/routing.yml
acme_hello :
resource :"@AcmeHelloBundle/Resources/config/routing.yml"
PDF brought to you by
generated on November 25, 2013Chapter 6: Routing | 65
Listing 6-18
Listing 6-19
Listing 6-20
Listing 6-21When importing resources from YAML, thekey(e.g. acme_hello )ismeaningless. Just besure that
it's unique so no other lines override it.
The resource keyloads thegiven routing resource. Inthis example theresource isthefullpath toa
file,where the@AcmeHelloBundle shortcut syntax resolves tothepath ofthat bundle. The imported file
might look like this:
1
2
3
4# src/Acme/HelloBundle/Resources/config/routing.yml
acme_hello :
pattern:/hello/{name}
defaults :{_controller :AcmeHelloBundle :Hello:index}
The routes from this file are parsed and loaded in the same way as the main routing file.
Prefixing Imported Routes
You canalso choose toprovide a"prefix" fortheimported routes. Forexample, suppose you want the
acme_hello route to have a final pattern of /admin/hello/{name} instead of simply /hello/{name} :
1
2
3
4# app/config/routing.yml
acme_hello :
resource :"@AcmeHelloBundle/Resources/config/routing.yml"
prefix:/admin
The string /adminwill now beprepended tothepattern ofeach route loaded from thenew routing
resource.
You canalso define routes using annotations. SeetheFrameworkExtraBundle documentation tosee
how.
Visualizing & Debugging Routes
While adding and customizing routes, it'shelpful tobeable tovisualize and getdetailed information
about your routes. Agreat way toseeevery route inyour application isviatherouter:debug console
command. Execute the command by running the following from the root of your project.
1$php app/console router:debug
This command will print a helpful list of allthe configured routes in your application:
1
2
3
4
5
6homepage              ANY       /
contact               GET       /contact
contact_process       POST      /contact
article_show          ANY       /articles/{culture}/{year}/{title}.{_format}
blog                  ANY       /blog/{page}
blog_show             ANY       /blog/{slug}
You can also getvery specific information onasingle route byincluding theroute name after the
command:
PDF brought to you by
generated on November 25, 2013Chapter 6: Routing | 66
Listing 6-22
Listing 6-23
Listing 6-241$php app/console router:debug article_show
Generating URLs
The routing system should also beused togenerate URLs. Inreality, routing isabi-directional system:
mapping theURL toacontroller+parameters andaroute+parameters back toaURL. The match()1and
generate()2methods form this bi-directional system. Take the blog_show example route from earlier:
1
2
3
4
5
6
7
8$params =$this->get('router' )->match('/blog/my-blog-post' );
// array(
//     'slug'        => 'my-blog-post',
//     '_controller' => 'AcmeBlogBundle:Blog:show',
// )
$uri=$this->get('router' )->generate ('blog_show' ,array('slug'=>'my-blog-post' ));
// /blog/my-blog-post
Togenerate aURL, you need tospecify thename oftheroute (e.g. blog_show )and anywildcards (e.g.
slug=my-blog-post )used inthepattern forthat route. With thisinformation, anyURL caneasily be
generated:
1
2
3
4
5
6
7
8
9
10
11
12classMainController extends Controller
{
publicfunction showAction ($slug)
{
// ...
$url=$this->generateUrl (
'blog_show' ,
array('slug'=>'my-blog-post' )
);
}
}
Incontrollers that extend Symfony's base Controller3,youcanusethegenerateUrl()4method,
which call's the router service's generate()5method.
In an upcoming section, you'll learn how to generate URLs from inside templates.
1.http://api.symfony.com/2.0/Symfony/Component/Routing/Router.html#match()
2.http://api.symfony.com/2.0/Symfony/Component/Routing/Router.html#generate()
3.http://api.symfony.com/2.0/Symfony/Bundle/FrameworkBundle/Controller/Controller.html
4.http://api.symfony.com/2.0/Symfony/Bundle/FrameworkBundle/Controller/Controller.html#generateUrl()
5.http://api.symfony.com/2.0/Symfony/Component/Routing/Router.html#generate()
PDF brought to you by
generated on November 25, 2013Chapter 6: Routing | 67
Listing 6-25
Listing 6-26
Listing 6-27
Listing 6-28
Listing 6-29
Listing 6-30Ifthefrontend ofyour application uses AJAX requests, youmight want tobeable togenerate URLs
inJavaScript based onyour routing configuration. Byusing theFOSJsRoutingBundle6,youcando
exactly that:
1
2
3
4varurl=Routing.generate (
'blog_show' ,
{"slug":'my-blog-post' }
);
For more information, see the documentation for that bundle.
Generating Absolute URLs
Bydefault, therouter willgenerate relative URLs (e.g. /blog).Togenerate anabsolute URL, simply pass
trueto the third argument of the generate() method:
1
2$router->generate ('blog_show' ,array('slug'=>'my-blog-post' ),true);
// http://www.example.com/blog/my-blog-post
The host that's used when generating anabsolute URL isthehost ofthecurrent Request object.
This isdetected automatically based onserver information supplied byPHP. When generating
absolute URLs forscripts runfrom thecommand line, you'll need tomanually setthedesired host
on the RequestContext object:
1$router->getContext ()->setHost('www.example.com' );
Generating URLs with Query Strings
The generate method takes anarray ofwildcard values togenerate theURI. Butifyoupass extra ones,
they will be added to the URI as a query string:
1
2$router->generate ('blog',array('page'=>2,'category' =>'Symfony' ));
// /blog/2?category=Symfony
Generating URLs from a template
The most common place togenerate aURL isfrom within atemplate when linking between pages in
your application. This is done just as before, but using a template helper function:
1
2
3<ahref="{{path('blog_show' ,{'slug':'my-blog-post' })}}">
Read this blog post.
</a>
Absolute URLs can also be generated.
6.https://github.com/FriendsOfSymfony/FOSJsRoutingBundle
PDF brought to you by
generated on November 25, 2013Chapter 6: Routing | 68
1
2
3<ahref="{{url('blog_show' ,{'slug':'my-blog-post' })}}">
Read this blog post.
</a>
Summary
Routing isasystem formapping theURL ofincoming requests tothecontroller function that should be
called toprocess therequest. Itboth allows youtospecify beautiful URLs andkeeps thefunctionality of
your application decoupled from those URLs. Routing isatwo-way mechanism, meaning that itshould
also be used to generate URLs.
Learn more from the Cookbook
•How to force routes to always use HTTPS or HTTP
PDF brought to you by
generated on November 25, 2013Chapter 6: Routing | 69
Listing 7-1Chapter 7
Creating and using Templates
Asyou know, thecontroller isresponsible forhandling each request that comes into aSymfony2
application. Inreality, thecontroller delegates themost oftheheavy work toother places sothat code
canbetested andreused. When acontroller needs togenerate HTML, CSS oranyother content, ithands
thework offtothetemplating engine. Inthischapter, you'll learn how towrite powerful templates that
canbeused toreturn content totheuser, populate email bodies, andmore. You'll learn shortcuts, clever
ways to extend templates and how to reuse template code.
How to render templates is covered in the controller page of the book.
Templates
Atemplate issimply atext filethat cangenerate anytext-based format (HTML, XML, CSV, LaTeX ...).
The most familiar type oftemplate isaPHP template -atext fileparsed byPHP that contains amix of
text and PHP code:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15<!DOCTYPE html>
<html>
<head>
<title>Welcome to Symfony! </title>
</head>
<body>
<h1><?phpecho$page_title ?></h1>
<ulid="navigation" >
<?phpforeach ($navigation as$item):?>
<li>
<ahref="<?phpecho$item->getHref()?>">
<?phpecho$item->getCaption ()?>
</a>
</li>
PDF brought to you by
generated on November 25, 2013Chapter 7: Creating and using Templates | 70
Listing 7-2
Listing 7-316
17
18
19<?phpendforeach ;?>
</ul>
</body>
</html>
ButSymfony2 packages aneven more powerful templating language called Twig1.Twig allows you to
write concise, readable templates that aremore friendly toweb designers and, inseveral ways, more
powerful than PHP templates:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15<!DOCTYPE html>
<html>
<head>
<title>Welcome to Symfony! </title>
</head>
<body>
<h1>{{page_title }}</h1>
<ulid="navigation" >
{%foriteminnavigation %}
<li><ahref="{{item.href }}">{{item.caption }}</a></li>
{%endfor%}
</ul>
</body>
</html>
Twig defines two types of special syntax:
•{{ ... }} : "Says something": prints a variable or the result of an expression to the template;
•{%...%}:"Does something": atagthat controls thelogic ofthetemplate; itisused toexecute
statements such as for-loops for example.
There isathird syntax used forcreating comments: {#thisisacomment #}.This syntax can
be used across multiple lines like the PHP-equivalent /* comment */ syntax.
Twig also contains filters ,which modify content before being rendered. The following makes thetitle
variable all uppercase before rendering it:
1{{title|upper}}
Twig comes with along listoftags2andfilters3that areavailable bydefault. You caneven addyour own
extensions4to Twig as needed.
Registering aTwig extension isaseasy ascreating anew service and tagging itwith
twig.extension tag.
1.http://twig.sensiolabs.org
2.http://twig.sensiolabs.org/doc/tags/index.html
3.http://twig.sensiolabs.org/doc/filters/index.html
4.http://twig.sensiolabs.org/doc/advanced.html#creating-an-extension
PDF brought to you by
generated on November 25, 2013Chapter 7: Creating and using Templates | 71
Listing 7-4
Listing 7-5Asyou'll seethroughout thedocumentation, Twig also supports functions and new functions canbe
easily added. Forexample, thefollowing uses astandard fortagandthecyclefunction toprint tendiv
tags, with alternating odd,evenclasses:
1
2
3
4
5{%foriin0..10%}
<divclass="{{cycle(['odd','even'],i)}}">
<!-- some HTML here -->
</div>
{%endfor%}
Throughout this chapter, template examples will be shown in both Twig and PHP.
Ifyoudochoose tonotuseTwig andyoudisable it,you'll need toimplement your own exception
handler via the kernel.exception event.
Why Twig?
Twig templates aremeant tobesimple and won't process PHP tags. This isbydesign: theTwig
template system ismeant toexpress presentation, notprogram logic. The more youuseTwig, the
more you'll appreciate and benefit from this distinction. And ofcourse, you'll beloved byweb
designers everywhere.
Twig canalso dothings that PHP can't, such aswhitespace control, sandboxing, automatic and
contextual output escaping, and theinclusion ofcustom functions and filters that only affect
templates. Twig contains little features that make writing templates easier andmore concise. Take
the following example, which combines a loop with a logical ifstatement:
1
2
3
4
5
6
7<ul>
{%foruserinusersifuser.active %}
<li>{{user.username }}</li>
{%else%}
<li>No users found </li>
{%endfor%}
</ul>
Twig Template Caching
Twig isfast. Each Twig template iscompiled down toanative PHP class that isrendered atruntime. The
compiled classes arelocated intheapp/cache/{environment}/ twigdirectory (where {environment}
istheenvironment, such asdevorprod)and insome cases can beuseful while debugging. See
Environments for more information on environments.
When debugmode isenabled (common inthedevenvironment), aTwig template willbeautomatically
recompiled when changes aremade toit.This means that during development you canhappily make
changes toaTwig template and instantly seethechanges without needing toworry about clearing any
cache.
When debugmode isdisabled (common intheprodenvironment), however, you must clear theTwig
cache directory sothat theTwig templates will regenerate. Remember todothis when deploying your
application.
PDF brought to you by
generated on November 25, 2013Chapter 7: Creating and using Templates | 72
Listing 7-6
Listing 7-7Template Inheritance and Layouts
More often than not, templates inaproject share common elements, liketheheader, footer, sidebar or
more. InSymfony2, this problem isthought about differently: atemplate canbedecorated byanother
one. This works exactly thesame asPHP classes: template inheritance allows youtobuild abase "layout"
template that contains allthecommon elements ofyour sitedefined asblocks (think "PHP class with
base methods"). Achild template canextend thebase layout and override anyofitsblocks (think "PHP
subclass that overrides certain methods of its parent class").
First, build a base layout file:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22{# app/Resources/views/base.html.twig #}
<!DOCTYPE html>
<html>
<head>
<metahttp-equiv= "Content-Type" content= "text/html; charset=utf-8" />
<title>{%blocktitle%}Test Application {%endblock %}</title>
</head>
<body>
<divid="sidebar" >
{%blocksidebar %}
<ul>
<li><ahref="/">Home</a></li>
<li><ahref="/blog">Blog</a></li>
</ul>
{%endblock %}
</div>
<divid="content" >
{%blockbody%}{%endblock %}
</div>
</body>
</html>
Though thediscussion about template inheritance willbeinterms ofTwig, thephilosophy isthe
same between Twig and PHP templates.
This template defines thebase HTML skeleton document ofasimple two-column page. Inthisexample,
three {%block%}areas aredefined (title,sidebarandbody).Each block may beoverridden byachild
template orleftwith itsdefault implementation. This template could also berendered directly. Inthat
case the title,sidebarandbodyblocks would simply retain the default values used in this template.
A child template might look like this:
1
2
3
4
5
6
7
8
9
10
11{# src/Acme/BlogBundle/Resources/views/Blog/index.html.twig #}
{%extends '::base.html.twig' %}
{%blocktitle%}My cool blog posts {%endblock %}
{%blockbody%}
{%forentryinblog_entries %}
<h2>{{entry.title }}</h2>
<p>{{entry.body }}</p>
{%endfor%}
{%endblock %}
PDF brought to you by
generated on November 25, 2013Chapter 7: Creating and using Templates | 73
Listing 7-8
Listing 7-9The parent template isidentified byaspecial string syntax (::base.html.twig )that indicates that
thetemplate lives intheapp/Resources/ viewsdirectory oftheproject. This naming convention
is explained fully in Template Naming and Locations .
The key totemplate inheritance isthe{%extends %}tag. This tells thetemplating engine tofirst
evaluate thebase template, which sets upthelayout and defines several blocks. The child template is
then rendered, atwhich point thetitleand bodyblocks oftheparent arereplaced bythose from the
child. Depending on the value of blog_entries , the output might look like this:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23<!DOCTYPE html>
<html>
<head>
<metahttp-equiv= "Content-Type" content= "text/html; charset=utf-8" />
<title>My cool blog posts </title>
</head>
<body>
<divid="sidebar" >
<ul>
<li><ahref="/">Home</a></li>
<li><ahref="/blog">Blog</a></li>
</ul>
</div>
<divid="content" >
<h2>My first post </h2>
<p>The body of the first post. </p>
<h2>Another post </h2>
<p>The body of the second post. </p>
</div>
</body>
</html>
Notice that since thechild template didn't define asidebar block, thevalue from theparent template is
used instead. Content within a {% block %} tag in a parent template is always used by default.
You can useasmany levels ofinheritance asyou want. Inthenext section, acommon three-level
inheritance model will be explained along with how templates are organized inside a Symfony2 project.
When working with template inheritance, here are some tips to keep in mind:
•If you use {% extends %} in a template, it must be the first tag in that template;
•The more {%block%}tags you have inyour base templates, thebetter. Remember, child
templates don't have todefine allparent blocks, socreate asmany blocks inyour base
templates asyou want and give each asensible default. The more blocks your base templates
have, the more flexible your layout will be;
•Ifyou find yourself duplicating content inanumber oftemplates, itprobably means you
should move that content toa{%block%}inaparent template. Insome cases, abetter
solution may betomove thecontent toanew template and include it(see Including other
Templates );
•Ifyou need togetthecontent ofablock from theparent template, you can usethe{{
parent() }}function. This isuseful ifyou want toadd tothecontents ofaparent block
instead of completely overriding it:
PDF brought to you by
generated on November 25, 2013Chapter 7: Creating and using Templates | 74
1
2
3
4
5
6
7{%blocksidebar %}
<h3>Table of Contents </h3>
{# ... #}
{{parent()}}
{%endblock %}
Template Naming and Locations
By default, templates can live in two different locations:
•app/Resources/ views/:The applications viewsdirectory cancontain application-wide base
templates (i.e. your application's layouts) aswell astemplates that override bundle templates
(see Overriding Bundle Templates );
•path/to/bundle/Resources/ views/:Each bundle houses itstemplates initsResources/
viewsdirectory (and subdirectories). The majority of templates will live inside a bundle.
Symfony2 uses abundle :controller :template string syntax fortemplates. This allows forseveral
different types of templates, each which lives in a specific location:
•AcmeBlogBundle:Blog:index.html.twig :This syntax isused tospecify atemplate fora
specific page. The three parts of the string, each separated by a colon ( :), mean the following:
•AcmeBlogBundle :(bundle )thetemplate lives inside theAcmeBlogBundle
(e.g. src/Acme/BlogBundle );
•Blog:(controller )indicates that the template lives inside the Blog
subdirectory of Resources/views ;
•index.html.twig :(template )the actual name of the file is
index.html.twig .
Assuming that theAcmeBlogBundle lives atsrc/Acme/BlogBundle ,thefinal path tothelayout
would be src/Acme/BlogBundle/Resources/views/Blog/index.html.twig .
•AcmeBlogBundle::layout.html.twig :This syntax refers toabase template that's specific
totheAcmeBlogBundle .Since themiddle, "controller", portion ismissing (e.g. Blog),the
template lives at Resources/views/layout.html.twig inside AcmeBlogBundle .
•::base.html.twig :This syntax refers toanapplication-wide base template orlayout. Notice
that thestring begins with two colons (::),meaning that both thebundle and controller
portions aremissing. This means that thetemplate isnotlocated inanybundle, butinstead in
the root app/Resources/views/ directory.
Inthe Overriding Bundle Templates section, you'll find out how each template living inside the
AcmeBlogBundle ,forexample, canbeoverridden byplacing atemplate ofthesame name intheapp/
Resources/ AcmeBlogBundle/ views/directory. This gives thepower tooverride templates from any
vendor bundle.
Hopefully thetemplate naming syntax looks familiar -it'sthesame naming convention used to
refer to Controller Naming Pattern .
PDF brought to you by
generated on November 25, 2013Chapter 7: Creating and using Templates | 75
Listing 7-10
Listing 7-11Template Suffix
The bundle :controller :template format ofeach template specifies where thetemplate fileislocated.
Every template name also has two extensions that specify the format andengine for that template.
•AcmeBlogBundle:Blog:index.html.twig - HTML format, Twig engine
•AcmeBlogBundle:Blog:index.html.php - HTML format, PHP engine
•AcmeBlogBundle:Blog:index.css.twig - CSS format, Twig engine
Bydefault, any Symfony2 template can bewritten ineither Twig orPHP, and thelast part ofthe
extension (e.g. .twigor.php)specifies which ofthese two engines should beused. The first part ofthe
extension, (e.g. .html,.css,etc) isthefinal format that thetemplate will generate. Unlike theengine,
which determines how Symfony2 parses thetemplate, thisissimply anorganizational tactic used incase
thesame resource needs toberendered asHTML (index.html.twig ),XML (index.xml.twig ),orany
other format. For more information, read the Debugging section.
The available "engines" can beconfigured and even new engines added. See Templating
Configuration for more details.
Tags and Helpers
You already understand thebasics oftemplates, how they're named andhow tousetemplate inheritance.
The hardest parts arealready behind you. Inthissection, you'll learn about alarge group oftools available
tohelp perform themost common template tasks such asincluding other templates, linking topages and
including images.
Symfony2 comes bundled with several specialized Twig tags and functions that ease thework ofthe
template designer. InPHP, thetemplating system provides anextensible helper system that provides
useful features in a template context.
You've already seen afewbuilt-in Twig tags ({%block%}&{%extends %})aswell asanexample ofa
PHP helper ( $view['slots'] ). Here you will learn a few more.
Including other Templates
You'll often want toinclude thesame template orcode fragment onseveral different pages. Forexample,
inanapplication with "news articles", thetemplate code displaying anarticle might beused onthearticle
detail page, on a page displaying the most popular articles, or in a list of the latest articles.
When you need toreuse achunk ofPHP code, you typically move thecode toanew PHP class or
function. The same istrue fortemplates. Bymoving thereused template code into itsown template, it
can be included from any other template. First, create the template that you'll need to reuse.
1
2
3
4
5
6
7{# src/Acme/ArticleBundle/Resources/views/Article/articleDetails.html.twig #}
<h2>{{article.title }}</h2>
<h3class="byline" >by{{article.authorName }}</h3>
<p>
{{article.body }}
</p>
Including this template from any other template is simple:
PDF brought to you by
generated on November 25, 2013Chapter 7: Creating and using Templates | 76
Listing 7-12
Listing 7-131
2
3
4
5
6
7
8
9
10
11
12{# src/Acme/ArticleBundle/Resources/views/Article/list.html.twig #}
{%extends 'AcmeArticleBundle::layout.html.twig' %}
{%blockbody%}
<h1>Recent Articles <h1>
{%forarticle inarticles %}
{%include 'AcmeArticleBundle:Article:articleDetails.html.twig'
with{'article' :article}
%}
{%endfor%}
{%endblock %}
The template isincluded using the{%include %}tag.Notice that thetemplate name follows thesame
typical convention. The articleDetails.html.twig template uses anarticle variable. This ispassed
in by the list.html.twig template using the withcommand.
The {'article': article} syntax isthestandard Twig syntax forhash maps (i.e. anarray with
named keys). Ifyou needed topass inmultiple elements, itwould look likethis: {'foo': foo,
'bar': bar} .
Embedding Controllers
Insome cases, youneed todomore than include asimple template. Suppose youhave asidebar inyour
layout that contains thethree most recent articles. Retrieving thethree articles may include querying the
database or performing other heavy logic that can't be done from within a template.
The solution istosimply embed theresult ofanentire controller from your template. First, create a
controller that renders a certain number of recent articles:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15// src/Acme/ArticleBundle/Controller/ArticleController.php
classArticleController extends Controller
{
publicfunction recentArticlesAction ($max=3)
{
// make a database call or other logic
// to get the "$max" most recent articles
$articles =...;
return$this->render(
'AcmeArticleBundle:Article:recentList.html.twig' ,
array('articles' =>$articles )
);
}
}
The recentList template is perfectly straightforward:
1
2
3
4
5
6{# src/Acme/ArticleBundle/Resources/views/Article/recentList.html.twig #}
{%forarticle inarticles %}
<ahref="/article/ {{article.slug }}">
{{article.title }}
</a>
{%endfor%}
PDF brought to you by
generated on November 25, 2013Chapter 7: Creating and using Templates | 77
Listing 7-14
Listing 7-15
Listing 7-16
Listing 7-17
Listing 7-18Notice that thearticle URL ishardcoded inthis example (e.g. /article/ *slug*).This isabad
practice. In the next section, you'll learn how to do this correctly.
Even though this controller will only beused internally, you'll need tocreate aroute that points tothe
controller:
1
2
3latest_articles :
pattern:/articles/latest/{max}
defaults :{_controller :AcmeArticleBundle :Article:recentArticles }
To include the controller, you'll need to refer to it using an absolute url:
1
2
3
4
5
6{# app/Resources/views/base.html.twig #}
{# ... #}
<divid="sidebar" >
{%renderurl('latest_articles' ,{'max':3})%}
</div>
Since Symfony 2.0.20/ 2.1.5, theTwig rendertagnow takes anabsolute urlinstead ofacontroller
logical path. This fixes animportant security issue (CVE-2012-64315)reported ontheofficial blog.
Ifyour application uses anolder version ofSymfony orstilluses theprevious rendertagsyntax,
you should upgrade as soon as possible.
Whenever you find that you need avariable orapiece ofinformation that you don't have access to
inatemplate, consider rendering acontroller. Controllers arefasttoexecute and promote good code
organization and reuse.
Linking to Pages
Creating links toother pages inyour application isoneofthemost common jobs foratemplate. Instead
ofhardcoding URLs intemplates, usethepathTwig function (ortherouterhelper inPHP) togenerate
URLs based ontherouting configuration. Later, ifyou want tomodify theURL ofaparticular page, all
you'll need todoischange therouting configuration; thetemplates willautomatically generate thenew
URL.
First, link to the "_welcome" page, which is accessible via the following routing configuration:
1
2
3_welcome :
pattern:/
defaults :{_controller :AcmeDemoBundle :Welcome:index}
To link to the page, just use the pathTwig function and refer to the route:
1<ahref="{{path('_welcome' )}}">Home</a>
As expected, this will generate the URL /. Now for a more complicated route:
5.http://symfony.com/blog/security-release-symfony-2-0-20-and-2-1-5-released
PDF brought to you by
generated on November 25, 2013Chapter 7: Creating and using Templates | 78
Listing 7-19
Listing 7-20
Listing 7-21
Listing 7-221
2
3article_show :
pattern:/article/{slug}
defaults :{_controller :AcmeArticleBundle :Article:show}
Inthis case, you need tospecify both theroute name (article_show )and avalue forthe{slug}
parameter. Using this route, revisit therecentList template from theprevious section and link tothe
articles correctly:
1
2
3
4
5
6{# src/Acme/ArticleBundle/Resources/views/Article/recentList.html.twig #}
{%forarticle inarticles %}
<ahref="{{path('article_show' ,{'slug':article.slug })}}">
{{article.title }}
</a>
{%endfor%}
You can also generate an absolute URL by using the urlTwig function:
1<ahref="{{url('_welcome' )}}">Home</a>
The same can be done in PHP templates by passing a third argument to the generate() method:
1
2
3
4
5<ahref="<?phpecho$view['router' ]->generate (
'_welcome' ,
array(),
true
)?>">Home</a>
Linking to Assets
Templates also commonly refer toimages, Javascript, stylesheets and other assets. Ofcourse you could
hard-code thepath tothese assets (e.g. /images/ logo.png ),butSymfony2 provides amore dynamic
option via the assetTwig function:
1
2
3<imgsrc="{{asset('images/logo.png' )}}"alt="Symfony!" />
<linkhref="{{asset('css/blog.css' )}}"rel="stylesheet" type="text/css" />
The assetfunction's main purpose istomake your application more portable. Ifyour application lives
attheroot ofyour host (e.g. http://example.com6),then therendered paths should be/images/ logo.png .
Butifyour application lives inasubdirectory (e.g. http://example.com/ my_app7),each asset path should
render with thesubdirectory (e.g. /my_app/ images/logo.png ).The assetfunction takes care ofthisby
determining how your application is being used and generating the correct paths accordingly.
Additionally, ifyou usetheassetfunction, Symfony canautomatically append aquery string toyour
asset, inorder toguarantee that updated static assets won't becached when deployed. Forexample,
/images/ logo.png might look like/images/ logo.png?v2 .Formore information, seetheassets_version
configuration option.
6.http://example.com
7.http://example.com/my_app
PDF brought to you by
generated on November 25, 2013Chapter 7: Creating and using Templates | 79
Listing 7-23
Listing 7-24Including Stylesheets and Javascripts in Twig
Nositewould becomplete without including Javascript files and stylesheets. InSymfony, theinclusion
of these assets is handled elegantly by taking advantage of Symfony's template inheritance.
This section will teach you thephilosophy behind including stylesheet and Javascript assets in
Symfony. Symfony also packages another library, called Assetic, which follows thisphilosophy but
allows you todomuch more interesting things with those assets. Formore information onusing
Assetic see How to Use Assetic for Asset Management .
Start byadding two blocks toyour base template that will hold your assets: one called stylesheets
inside theheadtagand another called javascripts just above theclosing bodytag. These blocks will
contain all of the stylesheets and Javascripts that you'll need throughout your site:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17{# app/Resources/views/base.html.twig #}
<html>
<head>
{# ... #}
{%blockstylesheets %}
<linkhref="{{asset('/css/main.css' )}}"type="text/css" rel="stylesheet" />
{%endblock %}
</head>
<body>
{# ... #}
{%blockjavascripts %}
<script src="{{asset('/js/main.js' )}}"type="text/javascript" ></script>
{%endblock %}
</body>
</html>
That's easy enough! But what ifyou need toinclude anextra stylesheet orJavascript from achild
template? For example, suppose you have acontact page and you need toinclude acontact.css
stylesheet juston that page. From inside that contact page's template, do the following:
1
2
3
4
5
6
7
8
9
10{# src/Acme/DemoBundle/Resources/views/Contact/contact.html.twig #}
{%extends '::base.html.twig' %}
{%blockstylesheets %}
{{parent()}}
<linkhref="{{asset('/css/contact.css' )}}"type="text/css" rel="stylesheet" />
{%endblock %}
{# ... #}
Inthechild template, yousimply override thestylesheets block andputyour new stylesheet taginside
ofthat block. Ofcourse, since you want toadd totheparent block's content (and notactually replace
it),youshould usetheparent() Twig function toinclude everything from thestylesheets block ofthe
base template.
You canalso include assets located inyour bundles' Resources/ publicfolder. You willneed torunthe
phpapp/console assets:install target[--symlink] command, which moves (orsymlinks) files
into the correct location. (target is by default "web").
PDF brought to you by
generated on November 25, 2013Chapter 7: Creating and using Templates | 80
Listing 7-25
Listing 7-26
Listing 7-27
Listing 7-281<linkhref="{{asset('bundles/acmedemo/css/contact.css' )}}"type="text/css"
rel="stylesheet" />
The end result is a page that includes both the main.css andcontact.css stylesheets.
Global Template Variables
During each request, Symfony2 will setaglobal template variable appinboth Twig and PHP template
engines bydefault. The appvariable isaGlobalVariables8instance which willgive youaccess tosome
application specific variables automatically:
•app.security - The security context.
•app.user - The current user object.
•app.request - The request object.
•app.session - The session object.
•app.environment - The current environment (dev, prod, etc).
•app.debug - True if in debug mode. False otherwise.
1
2
3
4
5<p>Username: {{app.user.username }}</p>
{%ifapp.debug %}
<p>Request method: {{app.request.method }}</p>
<p>Application Environment: {{app.environment }}</p>
{%endif%}
You can add your own global template variables. See the cookbook example on Global Variables .
Configuring and using the templating Service
The heart ofthetemplate system inSymfony2 isthetemplating Engine.This special object isresponsible
forrendering templates and returning their content. When you render atemplate inacontroller, for
example, you're actually using the templating engine service. For example:
1return$this->render('AcmeArticleBundle:Article:index.html.twig' );
is equivalent to:
1
2
3
4
5
6useSymfony\Component\HttpFoundation\Response ;
$engine =$this->container ->get('templating' );
$content =$engine->render('AcmeArticleBundle:Article:index.html.twig' );
return$response =newResponse ($content );
The templating engine (or"service") ispreconfigured towork automatically inside Symfony2. Itcan, of
course, be configured further in the application configuration file:
8.http://api.symfony.com/2.0/Symfony/Bundle/FrameworkBundle/Templating/GlobalVariables.html
PDF brought to you by
generated on November 25, 2013Chapter 7: Creating and using Templates | 81
Listing 7-29
Listing 7-301
2
3
4# app/config/config.yml
framework :
# ...
templating :{engines:['twig']}
Several configuration options are available and are covered in the Configuration Appendix .
The twigengine is mandatory to use the webprofiler (as well as many third-party bundles).
Overriding Bundle Templates
The Symfony2 community prides itself oncreating and maintaining high quality bundles (see
KnpBundles.com9)foralarge number ofdifferent features. Once youuseathird-party bundle, you'll likely
need to override and customize one or more of its templates.
Suppose you've included theimaginary open-source AcmeBlogBundle inyour project (e.g. inthesrc/
Acme/BlogBundle directory). And while you're really happy with everything, you want tooverride the
blog "list" page tocustomize themarkup specifically foryour application. Bydigging into theBlog
controller of the AcmeBlogBundle , you find the following:
1
2
3
4
5
6
7
8
9
10publicfunction indexAction ()
{
// some logic to retrieve the blogs
$blogs=...;
$this->render(
'AcmeBlogBundle:Blog:index.html.twig' ,
array('blogs' =>$blogs)
);
}
When the AcmeBlogBundle:Blog:index.html.twig isrendered, Symfony2 actually looks intwo
different locations for the template:
1.app/Resources/AcmeBlogBundle/views/Blog/index.html.twig
2.src/Acme/BlogBundle/Resources/views/Blog/index.html.twig
Tooverride thebundle template, just copy theindex.html.twig template from thebundle toapp/
Resources/ AcmeBlogBundle/ views/Blog/index.html.twig (the app/Resources/ AcmeBlogBundle
directory won't exist, so you'll need to create it). You're now free to customize the template.
Ifyou add atemplate inanew location, you may need toclear your cache (phpapp/console
cache:clear ), even if you are in debug mode.
This logic also applies tobase bundle templates. Suppose also that each template inAcmeBlogBundle
inherits from abase template called AcmeBlogBundle::layout.html.twig .Just asbefore, Symfony2 will
look in the following two places for the template:
1.app/Resources/AcmeBlogBundle/views/layout.html.twig
2.src/Acme/BlogBundle/Resources/views/layout.html.twig
9.http://knpbundles.com
PDF brought to you by
generated on November 25, 2013Chapter 7: Creating and using Templates | 82
Listing 7-31
Listing 7-32Once again, tooverride thetemplate, justcopy itfrom thebundle toapp/Resources/ AcmeBlogBundle/
views/layout.html.twig . You're now free to customize this copy as you see fit.
Ifyou take astep back, you'll seethat Symfony2 always starts bylooking intheapp/Resources/
{BUNDLE_NAME}/ views/directory foratemplate. Ifthetemplate doesn't exist there, itcontinues by
checking inside theResources/ viewsdirectory ofthebundle itself. This means that allbundle templates
can be overridden by placing them in the correct app/Resources subdirectory.
You can also override templates from within abundle byusing bundle inheritance. For more
information, see How to use Bundle Inheritance to Override parts of a Bundle .
Overriding Core Templates
Since theSymfony2 framework itself isjustabundle, core templates canbeoverridden inthesame way.
Forexample, thecore TwigBundle contains anumber ofdifferent "exception" and"error" templates that
canbeoverridden bycopying each from theResources/ views/Exception directory oftheTwigBundle
to, you guessed it, the app/Resources/TwigBundle/views/Exception directory.
Three-level Inheritance
One common way touseinheritance istouseathree-level approach. This method works perfectly with
the three different types of templates that were just covered:
•Create aapp/Resources/ views/base.html.twig filethat contains themain layout foryour
application (like in the previous example). Internally, this template iscalled
::base.html.twig ;
•Create atemplate foreach "section" ofyour site. Forexample, anAcmeBlogBundle ,would
have atemplate called AcmeBlogBundle::layout.html.twig that contains only blog section-
specific elements;
1
2
3
4
5
6
7
8{# src/Acme/BlogBundle/Resources/views/layout.html.twig #}
{%extends '::base.html.twig' %}
{%blockbody%}
<h1>Blog Application </h1>
{%blockcontent %}{%endblock %}
{%endblock %}
•Create individual templates foreach page and make each extend theappropriate section
template. For example, the "index" page would be called something close to
AcmeBlogBundle:Blog:index.html.twig and list the actual blog posts.
1
2
3
4
5
6
7
8
9{# src/Acme/BlogBundle/Resources/views/Blog/index.html.twig #}
{%extends 'AcmeBlogBundle::layout.html.twig' %}
{%blockcontent %}
{%forentryinblog_entries %}
<h2>{{entry.title }}</h2>
<p>{{entry.body }}</p>
{%endfor%}
{%endblock %}
PDF brought to you by
generated on November 25, 2013Chapter 7: Creating and using Templates | 83
Listing 7-33
Listing 7-34
Listing 7-35
Listing 7-36Notice that this template extends thesection template -(AcmeBlogBundle::layout.html.twig )which
in-turn extends the base application layout (::base.html.twig ).This isthe common three-level
inheritance model.
When building your application, you may choose tofollow this method orsimply make each page
template extend thebase application template directly (e.g. {%extends '::base.html.twig' %}).The
three-template model isabest-practice method used byvendor bundles sothat thebase template fora
bundle can be easily overridden to properly extend your application's base layout.
Output Escaping
When generating HTML from atemplate, there isalways arisk that atemplate variable may output
unintended HTML ordangerous client-side code. The result isthat dynamic content could break the
HTML oftheresulting page orallow amalicious user toperform aCross SiteScripting10(XSS) attack.
Consider this classic example:
1Hello{{name}}
Imagine that the user enters the following code as his/her name:
1<script>alert('hello!')</script>
Without any output escaping, the resulting template will cause a JavaScript alert box to pop up:
1Hello<script> alert('hello!' )</script>
And while this seems harmless, ifauser cangetthis far,that same user should also beable towrite
JavaScript that performs malicious actions inside the secure area of an unknowing, legitimate user.
The answer totheproblem isoutput escaping. With output escaping on,thesame template willrender
harmlessly, and literally print the scripttag to the screen:
1Hello&lt;script&gt;alert(&#39;helloe&#39;)&lt;/script&gt;
The Twig and PHP templating systems approach theproblem indifferent ways. Ifyou're using Twig,
output escaping isonbydefault andyou're protected. InPHP, output escaping isnotautomatic, meaning
you'll need to manually escape where necessary.
Output Escaping in Twig
Ifyou're using Twig templates, then output escaping isonbydefault. This means that you're protected
out-of-the-box from theunintentional consequences ofuser-submitted code. Bydefault, theoutput
escaping assumes that content is being escaped for HTML output.
Insome cases, you'll need todisable output escaping when you're rendering avariable that istrusted and
contains markup that should notbeescaped. Suppose that administrative users areable towrite articles
that contain HTML code. Bydefault, Twig will escape thearticle body. Torender itnormally, add the
rawfilter: {{ article.body|raw }} .
You canalso disable output escaping inside a{%block%}area orforanentire template. Formore
information, see Output Escaping11in the Twig documentation.
10. http://en.wikipedia.org/wiki/Cross-site_scripting
11. http://twig.sensiolabs.org/doc/api.html#escaper-extension
PDF brought to you by
generated on November 25, 2013Chapter 7: Creating and using Templates | 84
Listing 7-37
Listing 7-38
Listing 7-39
Listing 7-40Output Escaping in PHP
Output escaping isnotautomatic when using PHP templates. This means that unless you explicitly
choose toescape avariable, you're notprotected. Touseoutput escaping, usethespecial escape() view
method:
1Hello<?phpecho$view->escape($name)?>
Bydefault, theescape() method assumes that thevariable isbeing rendered within anHTML context
(and thus thevariable isescaped tobesafeforHTML). The second argument letsyouchange thecontext.
For example, to output something in a JavaScript string, use the jscontext:
1var myMsg = 'Hello <?phpecho$view->escape($name,'js')?>';
Debugging
New inversion 2.0.9: This feature isavailable asofTwig 1.5.x,which was first shipped with Symfony
2.0.9.
When using PHP, youcanusevar_dump() ifyouneed toquickly find thevalue ofavariable passed. This
isuseful, forexample, inside your controller. The same canbeachieved when using Twig byusing the
debug extension. This needs to be enabled in the config:
1
2
3
4
5
6# app/config/config.yml
services :
acme_hello.twig.extension.debug :
class: Twig_Extension_Debug
tags:
-{name:'twig.extension' }
Template parameters can then be dumped using the dumpfunction:
1
2
3
4
5
6
7
8{# src/Acme/ArticleBundle/Resources/views/Article/recentList.html.twig #}
{{dump(articles )}}
{%forarticle inarticles %}
<ahref="/article/ {{article.slug }}">
{{article.title }}
</a>
{%endfor%}
The variables willonly bedumped ifTwig's debugsetting (inconfig.yml )istrue.Bydefault thismeans
that the variables will be dumped in the devenvironment but not the prodenvironment.
Template Formats
Templates areageneric way torender content inanyformat. And while inmost cases you'll usetemplates
torender HTML content, atemplate canjustaseasily generate JavaScript, CSS, XML oranyother format
you can dream of.
Forexample, thesame "resource" isoften rendered inseveral different formats. Torender anarticle index
page in XML, simply include the format in the template name:
PDF brought to you by
generated on November 25, 2013Chapter 7: Creating and using Templates | 85
Listing 7-41
Listing 7-42
Listing 7-43•XML template name :AcmeArticleBundle:Article:index.xml.twig
•XML template filename :index.xml.twig
Inreality, this isnothing more than anaming convention and thetemplate isn't actually rendered
differently based on its format.
Inmany cases, you may want toallow asingle controller torender multiple different formats based on
the "request format". For that reason, a common pattern is to do the following:
1
2
3
4
5
6publicfunction indexAction ()
{
$format =$this->getRequest ()->getRequestFormat ();
return$this->render('AcmeBlogBundle:Blog:index.' .$format.'.twig');
}
The getRequestFormat ontheRequest object defaults tohtml,butcanreturn anyother format based
ontheformat requested bytheuser. The request format ismost often managed bytherouting, where a
route canbeconfigured sothat /contact sets therequest format tohtmlwhile /contact.xml sets the
format to xml. For more information, see the Advanced Example in the Routing chapter .
To create links that include the format parameter, include a _formatkey in the parameter hash:
1
2
3<ahref="{{path('article_show' ,{'id':123,'_format' :'pdf'})}}">
PDF Version
</a>
Final Thoughts
The templating engine inSymfony isapowerful tool that canbeused each time you need togenerate
presentational content inHTML, XML oranyother format. And though templates areacommon way to
generate content inacontroller, their useisnotmandatory. The Response object returned byacontroller
can be created with or without the use of a template:
1
2
3
4
5// creates a Response object whose content is the rendered template
$response =$this->render('AcmeArticleBundle:Article:index.html.twig' );
// creates a Response object whose content is simple text
$response =newResponse ('response content' );
Symfony's templating engine isvery flexible andtwodifferent template renderers areavailable bydefault:
thetraditional PHP templates and thesleek and powerful Twig templates. Both support atemplate
hierarchy andcome packaged with arich setofhelper functions capable ofperforming themost common
tasks.
Overall, thetopic oftemplating should bethought ofasapowerful tool that's atyour disposal. Insome
cases, you may not need to render a template, and in Symfony2, that's absolutely fine.
Learn more from the Cookbook
•How to use PHP instead of Twig for Templates
•How to customize Error Pages
•How to write a custom Twig Extension
PDF brought to you by
generated on November 25, 2013Chapter 7: Creating and using Templates | 86
Listing 8-1Chapter 8
Databases and Doctrine
One ofthemost common and challenging tasks forany application involves persisting and reading
information toand from adatabase. Fortunately, Symfony comes integrated with Doctrine1,alibrary
whose sole goal istogive you powerful tools tomake this easy. Inthis chapter, you'll learn thebasic
philosophy behind Doctrine and see how easy working with a database can be.
Doctrine istotally decoupled from Symfony and using itisoptional. This chapter isallabout
theDoctrine ORM, which aims toletyou map objects toarelational database (such asMySQL ,
PostgreSQL orMicrosoft SQL ).Ifyouprefer touserawdatabase queries, thisiseasy, andexplained
in the " How to use Doctrine's DBAL Layer " cookbook entry.
You canalso persist data toMongoDB2using Doctrine ODM library. Formore information, read
the " DoctrineMongoDBBundle " documentation.
A Simple Example: A Product
The easiest way tounderstand how Doctrine works istoseeitinaction. Inthissection, you'll configure
your database, create a Productobject, persist it to the database and fetch it back out.
Code along with the example
If you want to follow along with the example in this chapter, create an AcmeStoreBundle via:
1$php app/console generate:bundle --namespace =Acme/StoreBundle
1.http://www.doctrine-project.org/
2.http://www.mongodb.org/
PDF brought to you by
generated on November 25, 2013Chapter 8: Databases and Doctrine | 87
Listing 8-2
Listing 8-3
Listing 8-4Configuring the Database
Before you really begin, you'll need toconfigure your database connection information. Byconvention,
this information is usually configured in an app/config/parameters.ini file:
1
2
3
4
5
6
7; app/config/parameters.ini
[parameters]
database_driver =pdo_mysql
database_host =localhost
database_name =test_project
database_user =root
database_password =password
Defining theconfiguration viaparameters.ini isjust aconvention. The parameters defined in
that file are referenced by the main configuration file when setting up Doctrine:
1
2
3
4
5
6
7
8# app/config/config.yml
doctrine :
dbal:
driver:"%database_driver%"
host:"%database_host%"
dbname:"%database_name%"
user:"%database_user%"
password :"%database_password%"
Byseparating thedatabase information into aseparate file, you caneasily keep different versions
ofthefileoneach server. You can also easily store database configuration (orany sensitive
information) outside ofyour project, likeinside your Apache configuration, forexample. Formore
information, see How to Set External Parameters in the Service Container .
Now that Doctrine knows about your database, you can have it create the database for you:
1$php app/console doctrine:database:create
PDF brought to you by
generated on November 25, 2013Chapter 8: Databases and Doctrine | 88
Listing 8-5
Listing 8-6
Listing 8-7
Listing 8-8Setting Up The Database to be UTF8
One mistake even seasoned developers make when starting aSymfony2 project isforgetting to
setup default charset and collation ontheir database, ending upwith latin type collations, which
aredefault formost databases. They might even remember todoitthevery first time, butforget
that it's all gone after running a relatively common command during development:
1
2$php app/console doctrine:database:drop --force
$php app/console doctrine:database:create
There's noway toconfigure these defaults inside Doctrine, asittries tobeasagnostic aspossible
interms ofenvironment configuration. One way tosolve thisproblem istoconfigure server-level
defaults.
Setting UTF8 defaults forMySQL isassimple asadding afew lines toyour configuration file
(typically my.cnf):
1
2
3[mysqld]
collation-server =utf8_general_ci
character-set-server =utf8
Ifyou want touseSQLite asyour database, you need tosetthepath where your database file
should be stored:
1
2
3
4
5
6# app/config/config.yml
doctrine :
dbal:
driver:pdo_sqlite
path:"%kernel.root_dir%/sqlite.db"
charset:UTF8
Creating an Entity Class
Suppose you're building anapplication where products need tobedisplayed. Without even thinking
about Doctrine ordatabases, you already know that you need aProduct object torepresent those
products. Create this class inside the Entitydirectory of your AcmeStoreBundle :
1
2
3
4
5
6
7
8
9
10
11// src/Acme/StoreBundle/Entity/Product.php
namespace Acme\StoreBundle\Entity ;
classProduct
{
protected $name;
protected $price;
protected $description ;
}
The class -often called an"entity", meaning abasic class that holds data -issimple and helps fulfill the
business requirement ofneeding products inyour application. This class can't bepersisted toadatabase
yet - it's just a simple PHP class.
PDF brought to you by
generated on November 25, 2013Chapter 8: Databases and Doctrine | 89
Listing 8-9
Listing 8-10Once you learn theconcepts behind Doctrine, you canhave Doctrine create simple entity classes
for you:
1$php app/console doctrine:generate:entity --entity ="AcmeStoreBundle:Product"
--fields ="name:string(255) price:float description:text"
Add Mapping Information
Doctrine allows you towork with databases inamuch more interesting way than justfetching rows of
acolumn-based table into anarray. Instead, Doctrine allows youtopersist entire objects tothedatabase
andfetch entire objects outofthedatabase. This works bymapping aPHP class toadatabase table, and
the properties of that PHP class to columns on the table:
ForDoctrine tobeable todothis, youjusthave tocreate "metadata", orconfiguration that tells Doctrine
exactly how theProduct class and itsproperties should bemapped tothedatabase. This metadata can
bespecified inanumber ofdifferent formats including YAML, XML ordirectly inside theProduct class
via annotations:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25// src/Acme/StoreBundle/Entity/Product.php
namespace Acme\StoreBundle\Entity ;
useDoctrine\ORM\Mapping asORM;
/**
* @ORM\Entity
* @ORM\Table(name="product")
*/
classProduct
{
/**
* @ORM\Id
* @ORM\Column(type="integer")
* @ORM\GeneratedValue(strategy="AUTO")
*/
protected $id;
/**
* @ORM\Column(type="string", length=100)
*/
protected $name;
/**
* @ORM\Column(type="decimal", scale=2)
PDF brought to you by
generated on November 25, 2013Chapter 8: Databases and Doctrine | 90
Listing 8-1126
27
28
29
30
31
32
33*/
protected $price;
/**
* @ORM\Column(type="text")
*/
protected $description ;
}
Abundle canaccept only one metadata definition format. Forexample, it'snotpossible tomix
YAML metadata definitions with annotated PHP entity class definitions.
The table name isoptional andifomitted, willbedetermined automatically based onthename of
the entity class.
Doctrine allows you tochoose from awide variety ofdifferent field types, each with their own options.
For information on the available field types, see the Doctrine Field Types Reference section.
You canalso check outDoctrine's Basic Mapping Documentation3foralldetails about mapping information.
Ifyouuseannotations, you'll need toprepend allannotations with ORM\(e.g. ORM\Column(..) ),which isnot
shown inDoctrine's documentation. You'll also need toinclude theuseDoctrine\ORM\Mapping asORM;
statement, which imports theORMannotations prefix.
Becareful that your class name and properties aren't mapped toaprotected SQL keyword (such
asgrouporuser).Forexample, ifyour entity class name isGroup,then, bydefault, your table
name will begroup,which will cause anSQL error insome engines. SeeDoctrine's Reserved
SQL keywords documentation4onhow toproperly escape these names. Alternatively, ifyou're
free tochoose your database schema, simply map toadifferent table name orcolumn name. See
Doctrine's Persistent classes5andProperty Mapping6documentation.
When using another library orprogram (ie.Doxygen) that uses annotations, youshould place the
@IgnoreAnnotation annotation ontheclass toindicate which annotations Symfony should ignore.
For example, to prevent the @fnannotation from throwing an exception, add the following:
1
2
3
4
5/**
* @IgnoreAnnotation("fn")
*/
classProduct
// ...
3.http://docs.doctrine-project.org/projects/doctrine-orm/en/2.1/reference/basic-mapping.html
4.http://docs.doctrine-project.org/projects/doctrine-orm/en/2.1/reference/basic-mapping.html#quoting-reserved-words
5.http://docs.doctrine-project.org/projects/doctrine-orm/en/2.1/reference/basic-mapping.html#persistent-classes
6.http://docs.doctrine-project.org/projects/doctrine-orm/en/2.1/reference/basic-mapping.html#property-mapping
PDF brought to you by
generated on November 25, 2013Chapter 8: Databases and Doctrine | 91
Listing 8-12
Listing 8-13Generating Getters and Setters
Even though Doctrine now knows how topersist aProduct object tothedatabase, theclass itself isn't
really useful yet.Since Product isjustaregular PHP class, you need tocreate getter and setter methods
(e.g. getName() ,setName() )inorder toaccess itsproperties (since theproperties areprotected ).
Fortunately, Doctrine can do this for you by running:
1$php app/console doctrine:generate:entities Acme/StoreBundle/Entity/Product
This command makes sure that allofthegetters and setters aregenerated fortheProduct class. This is
asafe command -youcanrunitover andover again: itonly generates getters andsetters that don't exist
(i.e. it doesn't replace your existing methods).
Keep inmind that Doctrine's entity generator produces simple getters/ setters. You should check
generated entities and adjust getter/setter logic to your own needs.
More about doctrine:generate:entities
With the doctrine:generate:entities command you can:
•generate getters and setters;
•generate repository classes configured with the
@ORM\Entity(repositoryClass="...") annotation;
•generate the appropriate constructor for 1:n and n:m relations.
The doctrine:generate:entities command saves abackup oftheoriginal Product.php named
Product.php~ .Insome cases, thepresence ofthisfilecancause a"Cannot redeclare class" error.
It can be safely removed.
Note that youdon't need tousethiscommand. Doctrine doesn't relyoncode generation. Like with
normal PHP classes, youjustneed tomake sure that your protected/ private properties have getter
and setter methods. Since thisisacommon thing todowhen using Doctrine, thiscommand was
created.
You canalso generate allknown entities (i.e. anyPHP class with Doctrine mapping information) ofa
bundle or an entire namespace:
1
2$php app/console doctrine:generate:entities AcmeStoreBundle
$php app/console doctrine:generate:entities Acme
Doctrine doesn't care whether your properties areprotected orprivate,orwhether ornotyou
have agetter orsetter function foraproperty. The getters and setters aregenerated here only
because you'll need them to interact with your PHP object.
Creating the Database Tables/Schema
You now have ausable Product class with mapping information sothat Doctrine knows exactly how to
persist it.Ofcourse, you don't yethave thecorresponding product table inyour database. Fortunately,
Doctrine can automatically create allthe database tables needed forevery known entity inyour
application. To do this, run:
PDF brought to you by
generated on November 25, 2013Chapter 8: Databases and Doctrine | 92
Listing 8-14
Listing 8-151$php app/console doctrine:schema:update --force
Actually, this command isincredibly powerful. Itcompares what your database should look like
(based onthemapping information ofyour entities) with how itactually looks, and generates the
SQL statements needed toupdate thedatabase towhere itshould be.Inother words, ifyouadda
new property with mapping metadata toProductandrunthistask again, itwillgenerate the"alter
table" statement needed to add that new column to the existing producttable.
Aneven better way totake advantage ofthis functionality isviamigrations ,which allow you to
generate these SQL statements and store them inmigration classes that canberunsystematically
on your production server in order to track and migrate your database schema safely and reliably.
Your database now hasafully-functional product table with columns that match themetadata you've
specified.
Persisting Objects to the Database
Now that you have amapped Product entity and corresponding product table, you're ready topersist
data tothedatabase. From inside acontroller, this ispretty easy. Add thefollowing method tothe
DefaultController of the bundle:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19// src/Acme/StoreBundle/Controller/DefaultController.php
// ...
useAcme\StoreBundle\Entity\Product ;
useSymfony\Component\HttpFoundation\Response ;
publicfunction createAction ()
{
$product =newProduct();
$product ->setName('A Foo Bar' );
$product ->setPrice ('19.99');
$product ->setDescription ('Lorem ipsum dolor' );
$em=$this->getDoctrine ()->getEntityManager ();
$em->persist($product );
$em->flush();
returnnewResponse ('Created product id ' .$product ->getId());
}
Ifyou're following along with thisexample, you'll need tocreate aroute that points tothisaction
to see it work.
Take a look at the previous example in more detail:
•lines 9-12 Inthissection, you instantiate and work with the$product object likeanyother,
normal PHP object.
•line 14This line fetches Doctrine's entity manager object, which isresponsible forhandling
the process of persisting and fetching objects to and from the database.
•line 15The persist() method tells Doctrine to"manage" the$product object. This does not
actually cause a query to be made to the database (yet).
PDF brought to you by
generated on November 25, 2013Chapter 8: Databases and Doctrine | 93
Listing 8-16
Listing 8-17•line 16When theflush() method iscalled, Doctrine looks through alloftheobjects that it's
managing toseeifthey need tobepersisted tothedatabase. Inthis example, the$product
object hasnotbeen persisted yet,sotheentity manager executes anINSERTquery andarow is
created in the producttable.
Infact, since Doctrine isaware ofallyour managed entities, when you calltheflush() method,
itcalculates anoverall changeset and executes themost efficient query/ queries possible. For
example, ifyoupersist atotal of100Productobjects andthen subsequently callflush(),Doctrine
will create asingle prepared statement and re-use itforeach insert. This pattern iscalled Unit of
Work , and it's used because it's fast and efficient.
When creating orupdating objects, theworkflow isalways thesame. Inthenext section, you'll see
how Doctrine issmart enough toautomatically issue anUPDATEquery iftherecord already exists inthe
database.
Doctrine provides alibrary that allows youtoprogrammatically load testing data into your project
(i.e. "fixture data"). For information, see DoctrineFixturesBundle .
Fetching Objects from the Database
Fetching anobject back outofthedatabase iseven easier. Forexample, suppose you've configured a
route to display a specific Productbased on its idvalue:
1
2
3
4
5
6
7
8
9
10
11
12
13
14publicfunction showAction ($id)
{
$product =$this->getDoctrine ()
->getRepository ('AcmeStoreBundle:Product' )
->find($id);
if(!$product ){
throw$this->createNotFoundException (
'No product found for id ' .$id
);
}
// ... do something, like pass the $product object into a template
}
You canachieve theequivalent ofthis without writing anycode byusing the@ParamConverter
shortcut. See the FrameworkExtraBundle documentation for more details.
When youquery foraparticular type ofobject, youalways usewhat's known asits"repository". You can
think ofarepository asaPHP class whose only jobistohelp youfetch entities ofacertain class. You can
access the repository object for an entity class via:
1
2$repository =$this->getDoctrine ()
->getRepository ('AcmeStoreBundle:Product' );
PDF brought to you by
generated on November 25, 2013Chapter 8: Databases and Doctrine | 94
Listing 8-18
Listing 8-19The AcmeStoreBundle:Product string isashortcut you canuseanywhere inDoctrine instead of
thefullclass name oftheentity (i.e. Acme\StoreBundle\Entity\Product ).Aslong asyour entity
lives under the Entitynamespace of your bundle, this will work.
Once you have your repository, you have access to all sorts of helpful methods:
1
2
3
4
5
6
7
8
9
10
11
12// query by the primary key (usually "id")
$product =$repository ->find($id);
// dynamic method names to find based on a column value
$product =$repository ->findOneById ($id);
$product =$repository ->findOneByName ('foo');
// find *all* products
$products =$repository ->findAll();
// find a group of products based on an arbitrary column value
$products =$repository ->findByPrice (19.99);
Ofcourse, you canalso issue complex queries, which you'll learn more about intheQuerying for
Objects section.
You canalso take advantage oftheuseful findByand findOneBy methods toeasily fetch objects based
on multiple conditions:
1
2
3
4
5
6
7
8// query for one product matching be name and price
$product =$repository ->findOneBy (array('name'=>'foo','price' =>19.99));
// query for all products matching the name, ordered by price
$products =$repository ->findBy(
array('name'=>'foo'),
array('price' =>'ASC')
);
PDF brought to you by
generated on November 25, 2013Chapter 8: Databases and Doctrine | 95
Listing 8-20When you render anypage, you canseehow many queries were made inthebottom right corner
of the web debug toolbar.
If you click the icon, the profiler will open, showing you the exact queries that were made.
Updating an Object
Once you've fetched anobject from Doctrine, updating itiseasy. Suppose youhave aroute that maps a
product id to an update action in a controller:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16publicfunction updateAction ($id)
{
$em=$this->getDoctrine ()->getEntityManager ();
$product =$em->getRepository ('AcmeStoreBundle:Product' )->find($id);
if(!$product ){
throw$this->createNotFoundException (
'No product found for id ' .$id
);
}
$product ->setName('New product name!' );
$em->flush();
return$this->redirect ($this->generateUrl ('homepage' ));
}
Updating an object involves just three steps:
1.fetching the object from Doctrine;
2.modifying the object;
3.calling flush()on the entity manager
Notice that calling $em->persist($product) isn't necessary. Recall that this method simply tells
Doctrine tomanage or"watch" the$product object. Inthiscase, since youfetched the$product object
from Doctrine, it's already managed.
PDF brought to you by
generated on November 25, 2013Chapter 8: Databases and Doctrine | 96
Listing 8-21
Listing 8-22
Listing 8-23
Listing 8-24Deleting an Object
Deleting an object is very similar, but requires a call to the remove() method of the entity manager:
1
2$em->remove($product );
$em->flush();
Asyou might expect, theremove() method notifies Doctrine that you'd liketoremove thegiven entity
from thedatabase. The actual DELETEquery, however, isn't actually executed until theflush() method
is called.
Querying for Objects
You've already seen how the repository object allows you to run basic queries without any work:
1
2
3$repository ->find($id);
$repository ->findOneByName ('Foo');
Ofcourse, Doctrine also allows you towrite more complex queries using theDoctrine Query Language
(DQL). DQL issimilar toSQL except that you should imagine that you're querying forone ormore
objects of an entity class (e.g. Product) instead of querying for rows on a table (e.g. product).
When querying inDoctrine, you have two options: writing pure Doctrine queries orusing Doctrine's
Query Builder.
Querying for Objects with DQL
Imagine that you want toquery forproducts, but only return products that cost more than 19.99,
ordered from cheapest to most expensive. From inside a controller, do the following:
1
2
3
4
5
6$em=$this->getDoctrine ()->getEntityManager ();
$query=$em->createQuery (
'SELECT p FROM AcmeStoreBundle:Product p WHERE p.price > :price ORDER BY p.price ASC'
)->setParameter ('price','19.99');
$products =$query->getResult ();
Ifyou're comfortable with SQL, then DQL should feelvery natural. The biggest difference isthat you
need tothink interms of"objects" instead ofrows inadatabase. For this reason, you select from
AcmeStoreBundle:Product and then alias it as p.
The getResult() method returns anarray ofresults. Ifyou're querying forjustoneobject, you canuse
thegetSingleResult() method instead:
1$product =$query->getSingleResult ();
PDF brought to you by
generated on November 25, 2013Chapter 8: Databases and Doctrine | 97
Listing 8-25
Listing 8-26
Listing 8-27
Listing 8-28
Listing 8-29The getSingleResult() method throws aDoctrine\ORM\NoResultException exception ifno
results arereturned and aDoctrine\ORM\NonUniqueResultException ifmore than one result is
returned. Ifyouusethismethod, youmay need towrap itinatry-catch block andensure that only
one result isreturned (ifyou're querying onsomething that could feasibly return more than one
result):
1
2
3
4
5
6
7
8
9$query=$em->createQuery ('SELECT ...' )
->setMaxResults (1);
try{
$product =$query->getSingleResult ();
}catch(\Doctrine\Orm\NoResultException $e){
$product =null;
}
// ...
The DQL syntax isincredibly powerful, allowing you toeasily join between entities (the topic of
relations willbecovered later), group, etc.Formore information, seetheofficial Doctrine Doctrine Query
Language7documentation.
Setting Parameters
Take note ofthesetParameter() method. When working with Doctrine, it'salways agood idea
to set any external values as "placeholders", which was done in the above query:
1... WHERE p.price > :price ...
You can then set the value of the priceplaceholder by calling the setParameter() method:
1->setParameter ('price','19.99')
Using parameters instead ofplacing values directly inthequery string isdone toprevent SQL
injection attacks andshould always bedone. Ifyou're using multiple parameters, youcansettheir
values at once using the setParameters() method:
1
2
3
4->setParameters (array(
'price' =>'19.99',
'name' =>'Foo',
))
Using Doctrine's Query Builder
Instead ofwriting thequeries directly, youcanalternatively useDoctrine's QueryBuilder todothesame
jobusing anice, object-oriented interface. Ifyou useanIDE, you can also take advantage ofauto-
completion as you type the method names. From inside a controller:
1
2
3
4$repository =$this->getDoctrine ()
->getRepository ('AcmeStoreBundle:Product' );
$query=$repository ->createQueryBuilder ('p')
7.http://docs.doctrine-project.org/projects/doctrine-orm/en/2.1/reference/dql-doctrine-query-language.html
PDF brought to you by
generated on November 25, 2013Chapter 8: Databases and Doctrine | 98
Listing 8-30
Listing 8-31
Listing 8-325
6
7
8
9
10->where('p.price > :price' )
->setParameter ('price','19.99')
->orderBy('p.price' ,'ASC')
->getQuery ();
$products =$query->getResult ();
The QueryBuilder object contains every method necessary tobuild your query. Bycalling the
getQuery() method, thequery builder returns anormal Queryobject, which isthesame object youbuilt
directly in the previous section.
For more information on Doctrine's Query Builder, consult Doctrine's Query Builder8documentation.
Custom Repository Classes
Inthe previous sections, you began constructing and using more complex queries from inside a
controller. Inorder toisolate, testand reuse these queries, it'sagood idea tocreate acustom repository
class for your entity and add methods with your query logic there.
To do this, add the name of the repository class to your mapping definition.
1
2
3
4
5
6
7
8
9
10
11
12// src/Acme/StoreBundle/Entity/Product.php
namespace Acme\StoreBundle\Entity ;
useDoctrine\ORM\Mapping asORM;
/**
* @ORM\Entity(repositoryClass="Acme\StoreBundle\Entity\ProductRepository")
*/
classProduct
{
//...
}
Doctrine cangenerate therepository class foryoubyrunning thesame command used earlier togenerate
the missing getter and setter methods:
1$php app/console doctrine:generate:entities Acme
Next, add anew method -findAllOrderedByName() -tothenewly generated repository class. This
method will query for all of the Productentities, ordered alphabetically.
1
2
3
4
5
6
7
8
9
10
11
12// src/Acme/StoreBundle/Entity/ProductRepository.php
namespace Acme\StoreBundle\Entity ;
useDoctrine\ORM\EntityRepository ;
classProductRepository extends EntityRepository
{
publicfunction findAllOrderedByName ()
{
return$this->getEntityManager ()
->createQuery ('SELECT p FROM AcmeStoreBundle:Product p ORDER BY p.name ASC' )
->getResult ();
8.http://docs.doctrine-project.org/projects/doctrine-orm/en/2.1/reference/query-builder.html
PDF brought to you by
generated on November 25, 2013Chapter 8: Databases and Doctrine | 99
Listing 8-33
Listing 8-34
Listing 8-3513
14}
}
The entity manager can be accessed via $this->getEntityManager() from inside the repository.
You can use this new method just like the default finder methods of the repository:
1
2
3$em=$this->getDoctrine ()->getEntityManager ();
$products =$em->getRepository ('AcmeStoreBundle:Product' )
->findAllOrderedByName ();
When using acustom repository class, you stillhave access tothedefault finder methods such as
find()andfindAll() .
Entity Relationships/Associations
Suppose that theproducts inyour application allbelong toexactly one "category". Inthis case, you'll
need aCategory object and away torelate aProduct object toaCategory object. Start bycreating the
Category entity. Since you know that you'll eventually need topersist theclass through Doctrine, you
can let Doctrine create the class for you.
1$php app/console doctrine:generate:entity --entity ="AcmeStoreBundle:Category"
--fields ="name:string(255)"
This task generates theCategory entity foryou, with anidfield, anamefield and theassociated getter
and setter functions.
Relationship Mapping Metadata
Torelate theCategory andProductentities, start bycreating aproducts property ontheCategory class:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16// src/Acme/StoreBundle/Entity/Category.php
// ...
useDoctrine\Common\Collections\ArrayCollection ;
classCategory
{
// ...
/**
* @ORM\OneToMany(targetEntity="Product", mappedBy="category")
*/
protected $products ;
publicfunction __construct ()
{
PDF brought to you by
generated on November 25, 2013Chapter 8: Databases and Doctrine | 100
Listing 8-36
Listing 8-3717
18
19$this->products =newArrayCollection ();
}
}
First, since aCategory object will relate tomany Product objects, aproducts array property isadded
tohold those Product objects. Again, this isn't done because Doctrine needs it,butinstead because it
makes sense in the application for each Category to hold an array of Productobjects.
The code inthe__construct() method isimportant because Doctrine requires the$products
property tobeanArrayCollection object. This object looks andacts almost exactly likeanarray,
buthassome added flexibility. Ifthismakes youuncomfortable, don't worry. Just imagine that it's
anarrayand you'll be in good shape.
The targetEntity value inthedecorator used above canreference anyentity with avalid namespace,
notjust entities defined inthesame class. Torelate toanentity defined inadifferent class or
bundle, enter a full namespace as the targetEntity.
Next, since each Productclass canrelate toexactly oneCategory object, you'll want toadda$category
property to the Productclass:
1
2
3
4
5
6
7
8
9
10
11
12
13// src/Acme/StoreBundle/Entity/Product.php
// ...
classProduct
{
// ...
/**
* @ORM\ManyToOne(targetEntity="Category", inversedBy="products")
* @ORM\JoinColumn(name="category_id", referencedColumnName="id")
*/
protected $category ;
}
Finally, now that you've added anew property toboth theCategory and Product classes, tellDoctrine
to generate the missing getter and setter methods for you:
1$php app/console doctrine:generate:entities Acme
Ignore theDoctrine metadata foramoment. You now have two classes -Category and Product with a
natural one-to-many relationship. The Category class holds anarray ofProductobjects andtheProduct
object canhold oneCategory object. Inother words -you've built your classes inaway that makes sense
for your needs. The fact that the data needs to be persisted to a database is always secondary.
Now, look atthemetadata above the$category property ontheProduct class. The information here
tells doctrine that therelated class isCategory and that itshould store theidofthecategory record on
acategory_id field that lives ontheproduct table. Inother words, therelated Category object willbe
stored onthe$category property, butbehind thescenes, Doctrine willpersist thisrelationship bystoring
the category's id value on a category_id column of the producttable.
PDF brought to you by
generated on November 25, 2013Chapter 8: Databases and Doctrine | 101
Listing 8-38
Listing 8-39
The metadata above the$products property oftheCategory object islessimportant, and simply tells
Doctrine to look at the Product.category property to figure out how the relationship is mapped.
Before youcontinue, besure totellDoctrine toaddthenew category table, andproduct.category_id
column, and new foreign key:
1$php app/console doctrine:schema:update --force
This task should only bereally used during development. For amore robust method of
systematically updating your production database, read about Doctrine migrations .
Saving Related Entities
Now you can see this new code in action! Imagine you're inside a controller:
PDF brought to you by
generated on November 25, 2013Chapter 8: Databases and Doctrine | 102
Listing 8-401
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29// ...
useAcme\StoreBundle\Entity\Category ;
useAcme\StoreBundle\Entity\Product ;
useSymfony\Component\HttpFoundation\Response ;
classDefaultController extends Controller
{
publicfunction createProductAction ()
{
$category =newCategory ();
$category ->setName('Main Products' );
$product =newProduct();
$product ->setName('Foo');
$product ->setPrice (19.99);
// relate this product to the category
$product ->setCategory ($category );
$em=$this->getDoctrine ()->getEntityManager ();
$em->persist($category );
$em->persist($product );
$em->flush();
returnnewResponse (
'Created product id: ' .$product ->getId().' and category id:
'.$category ->getId()
);
}
}
Now, asingle row isadded toboth thecategory andproducttables. The product.category_id column
forthenew product issettowhatever theidisofthenew category. Doctrine manages thepersistence of
this relationship for you.
Fetching Related Objects
When you need tofetch associated objects, your workflow looks just like itdidbefore. First, fetch a
$product object and then access its related Category :
1
2
3
4
5
6
7
8
9
10publicfunction showAction ($id)
{
$product =$this->getDoctrine ()
->getRepository ('AcmeStoreBundle:Product' )
->find($id);
$categoryName =$product ->getCategory ()->getName();
// ...
}
Inthisexample, you first query foraProduct object based ontheproduct's id.This issues aquery for
justtheproduct data and hydrates the$product object with that data. Later, when you call$product-
>getCategory()->getName() ,Doctrine silently makes asecond query tofind theCategory that's related
to this Product. It prepares the $category object and returns it to you.
PDF brought to you by
generated on November 25, 2013Chapter 8: Databases and Doctrine | 103
Listing 8-41
What's important isthefactthat youhave easy access totheproduct's related category, butthecategory
data isn't actually retrieved until you ask for the category (i.e. it's "lazily loaded").
You can also query in the other direction:
1
2
3
4
5
6
7
8
9
10publicfunction showProductAction ($id)
{
$category =$this->getDoctrine ()
->getRepository ('AcmeStoreBundle:Category' )
->find($id);
$products =$category ->getProducts ();
// ...
}
Inthiscase, thesame things occurs: you first query outforasingle Category object, and then Doctrine
makes asecond query toretrieve therelated Productobjects, butonly once/ ifyouaskforthem (i.e.when
you call->getProducts() ).The $products variable isanarray ofallProduct objects that relate tothe
given Category object via their category_id value.
PDF brought to you by
generated on November 25, 2013Chapter 8: Databases and Doctrine | 104
Listing 8-42
Listing 8-43Relationships and Proxy Classes
This "lazy loading" ispossible because, when necessary, Doctrine returns a"proxy" object inplace
of the true object. Look again at the above example:
1
2
3
4
5
6
7
8$product =$this->getDoctrine ()
->getRepository ('AcmeStoreBundle:Product' )
->find($id);
$category =$product ->getCategory ();
// prints "Proxies\AcmeStoreBundleEntityCategoryProxy"
echoget_class ($category );
This proxy object extends thetrue Category object, and looks and acts exactly like it.The
difference isthat, byusing aproxy object, Doctrine candelay querying fortherealCategory data
until you actually need that data (e.g. until you call $category->getName() ).
The proxy classes aregenerated byDoctrine and stored inthecache directory. And though you'll
probably never even notice that your $category object isactually aproxy object, it'simportant to
keep in mind.
Inthenext section, when you retrieve theproduct and category data allatonce (via ajoin),
Doctrine will return the true Category object, since nothing needs to be lazily loaded.
Joining to Related Records
Intheabove examples, two queries were made -onefortheoriginal object (e.g. aCategory )andonefor
the related object(s) (e.g. the Productobjects).
Remember that you can see all of the queries made during a request via the web debug toolbar.
Ofcourse, ifyou know upfront that you'll need toaccess both objects, you canavoid thesecond query
by issuing a join in the original query. Add the following method to the ProductRepository class:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16// src/Acme/StoreBundle/Entity/ProductRepository.php
publicfunction findOneByIdJoinedToCategory ($id)
{
$query=$this->getEntityManager ()
->createQuery ('
SELECT p, c FROM AcmeStoreBundle:Product p
JOIN p.category c
WHERE p.id = :id'
)->setParameter ('id',$id);
try{
return$query->getSingleResult ();
}catch(\Doctrine\ORM\NoResultException $e){
returnnull;
}
}
Now, youcanusethismethod inyour controller toquery foraProduct object anditsrelated Category
with just one query:
PDF brought to you by
generated on November 25, 2013Chapter 8: Databases and Doctrine | 105
Listing 8-44
Listing 8-451
2
3
4
5
6
7
8
9
10publicfunction showAction ($id)
{
$product =$this->getDoctrine ()
->getRepository ('AcmeStoreBundle:Product' )
->findOneByIdJoinedToCategory ($id);
$category =$product ->getCategory ();
// ...
}
More Information on Associations
This section hasbeen anintroduction toone common type ofentity relationship, theone-to-many
relationship. Formore advanced details and examples ofhow touseother types ofrelations (e.g. one-
to-one,many-to-many ), see Doctrine's Association Mapping Documentation9.
Ifyou're using annotations, you'll need toprepend allannotations with ORM\(e.g. ORM\OneToMany ),
which isnot reflected inDoctrine's documentation. You'll also need toinclude the use
Doctrine\ORM\Mapping as ORM; statement, which imports theORMannotations prefix.
Configuration
Doctrine ishighly configurable, though youprobably won't ever need toworry about most ofitsoptions.
To find out more about configuring Doctrine, see the Doctrine section of the reference manual .
Lifecycle Callbacks
Sometimes, youneed toperform anaction right before orafter anentity isinserted, updated, ordeleted.
These types ofactions areknown as"lifecycle" callbacks, asthey're callback methods that you need to
execute during different stages ofthelifecycle ofanentity (e.g. theentity isinserted, updated, deleted,
etc).
Ifyou're using annotations foryour metadata, start byenabling thelifecycle callbacks. This isnot
necessary if you're using YAML or XML for your mapping:
1
2
3
4
5
6
7
8/**
* @ORM\Entity()
* @ORM\HasLifecycleCallbacks()
*/
classProduct
{
// ...
}
Now, you cantellDoctrine toexecute amethod onanyoftheavailable lifecycle events. Forexample,
suppose youwant tosetacreateddate column tothecurrent date, only when theentity isfirst persisted
(i.e. inserted):
9.http://docs.doctrine-project.org/projects/doctrine-orm/en/2.1/reference/association-mapping.html
PDF brought to you by
generated on November 25, 2013Chapter 8: Databases and Doctrine | 106
Listing 8-46 1
2
3
4
5
6
7/**
* @ORM\PrePersist
*/
publicfunction setCreatedValue ()
{
$this->created =new\DateTime ();
}
The above example assumes that you've created andmapped acreatedproperty (not shown here).
Now, right before theentity isfirst persisted, Doctrine will automatically call this method and the
createdfield will be set to the current date.
This can be repeated for any of the other lifecycle events, which include:
•preRemove
•postRemove
•prePersist
•postPersist
•preUpdate
•postUpdate
•postLoad
•loadClassMetadata
For more information onwhat these lifecycle events mean and lifecycle callbacks ingeneral, see
Doctrine's Lifecycle Events documentation10
Lifecycle Callbacks and Event Listeners
Notice that thesetCreatedValue() method receives noarguments. This isalways thecase
forlifecycle callbacks and isintentional: lifecycle callbacks should besimple methods that are
concerned with internally transforming data intheentity (e.g. setting acreated/ updated field,
generating a slug value).
Ifyouneed todosome heavier lifting -likeperform logging orsend anemail -youshould register
anexternal class asanevent listener orsubscriber and give itaccess towhatever resources you
need. For more information, see How to Register Event Listeners and Subscribers .
Doctrine Extensions: Timestampable, Sluggable, etc.
Doctrine isquite flexible, and anumber ofthird-party extensions areavailable that allow you to
easily perform repeated and common tasks onyour entities. These include thing such asSluggable ,
Timestampable ,Loggable ,Translatable , and Tree .
Formore information onhow tofind and usethese extensions, seethecookbook article about using
common Doctrine extensions .
10. http://docs.doctrine-project.org/projects/doctrine-orm/en/2.1/reference/events.html#lifecycle-events
PDF brought to you by
generated on November 25, 2013Chapter 8: Databases and Doctrine | 107
Listing 8-47Doctrine Field Types Reference
Doctrine comes with alarge number offield types available. Each ofthese maps aPHP data type toa
specific column type in whatever database you're using. The following types are supported in Doctrine:
•Strings
•string(used for shorter strings)
•text(used for larger strings)
•Numbers
•integer
•smallint
•bigint
•decimal
•float
•Dates and Times (use a DateTime11object for these fields in PHP)
•date
•time
•datetime
•Other Types
•boolean
•object(serialized and stored in a CLOBfield)
•array(serialized and stored in a CLOBfield)
For more information, see Doctrine's Mapping Types documentation12.
Field Options
Each field canhave asetofoptions applied toit.The available options include type(defaults tostring),
name,length,uniqueandnullable . Take a few examples:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16/**
* A string field with length 255 that cannot be null
* (reflecting the default values for the "type", "length"
* and *nullable* options)
*
* @ORM\Column()
*/
protected $name;
/**
* A string field of length 150 that persists to an "email_address" column
* and has a unique index.
*
* @ORM\Column(name="email_address", unique=true, length=150)
*/
protected $email;
11. http://php.net/manual/en/class.datetime.php
12. http://docs.doctrine-project.org/projects/doctrine-orm/en/2.1/reference/basic-mapping.html#doctrine-mapping-types
PDF brought to you by
generated on November 25, 2013Chapter 8: Databases and Doctrine | 108
Listing 8-48
Listing 8-49
Listing 8-50There areafewmore options notlisted here. Formore details, seeDoctrine's Property Mapping
documentation13
Console Commands
The Doctrine2 ORM integration offers several console commands under thedoctrine namespace. To
view the command list you can run the console without any arguments:
1$php app/console
Alistofavailable commands willprint out, many ofwhich start with thedoctrine: prefix. You canfind
outmore information about anyofthese commands (oranySymfony command) byrunning thehelp
command. For example, to get details about the doctrine:database:create task, run:
1$php app/console helpdoctrine:database:create
Some notable or interesting tasks include:
•doctrine:ensure-production-settings -checks tosee ifthe current environment is
configured efficiently for production. This should always be run in the prodenvironment:
1$php app/console doctrine:ensure-production-settings --no-debug --env =prod
Don't forget toaddthe--no-debug switch, because thedebug flagisalways settotrue,
even if the environment is set to prod.
•doctrine:mapping:import -allows Doctrine tointrospect anexisting database and create
mapping information. Formore information, seeHow togenerate Entities from anExisting
Database .
•doctrine:mapping:info -tells youalloftheentities that Doctrine isaware ofandwhether or
not there are any basic errors with the mapping.
•doctrine:query:dql and doctrine:query:sql -allow you toexecute DQL orSQL queries
directly from the command line.
To be able toload data fixtures toyour database, you will need tohave the
DoctrineFixturesBundle bundle installed. To learn how to do it, read the
"DoctrineFixturesBundle " entry of the documentation.
This page shows working with Doctrine within acontroller. You may also want towork with
Doctrine elsewhere inyour application. The getDoctrine()14method ofthecontroller returns the
doctrine service, you canwork with this inthesame way elsewhere byinjecting this into your
own services. See Service Container for more on creating your own services.
13. http://docs.doctrine-project.org/projects/doctrine-orm/en/2.1/reference/basic-mapping.html#property-mapping
14.http://api.symfony.com/2.0/Symfony/Bundle/FrameworkBundle/Controller/Controller.html#getDoctrine()
PDF brought to you by
generated on November 25, 2013Chapter 8: Databases and Doctrine | 109
Summary
With Doctrine, youcanfocus onyour objects andhow they're useful inyour application andworry about
database persistence second. This isbecause Doctrine allows youtouseanyPHP object tohold your data
and relies on mapping metadata information to map an object's data to a particular database table.
And even though Doctrine revolves around asimple concept, it'sincredibly powerful, allowing you to
create complex queries and subscribe toevents that allow you totake different actions asobjects go
through their persistence lifecycle.
For more information about Doctrine, seetheDoctrine section ofthecookbook ,which includes the
following articles:
•DoctrineFixturesBundle
•How to use Doctrine Extensions: Timestampable, Sluggable, Translatable, etc.
PDF brought to you by
generated on November 25, 2013Chapter 8: Databases and Doctrine | 110
Listing 9-1
Listing 9-2Chapter 9
Databases and Propel
One ofthemost common and challenging tasks forany application involves persisting and reading
information toandfrom adatabase. Symfony2 does notcome integrated with anyORMs butthePropel
integration is easy. To install Propel, read Working With Symfony21on the Propel documentation.
A Simple Example: A Product
Inthissection, you'll configure your database, create aProductobject, persist ittothedatabase andfetch
it back out.
Code along with the example
If you want to follow along with the example in this chapter, create an AcmeStoreBundle via:
1$php app/console generate:bundle --namespace =Acme/StoreBundle
Configuring the Database
Before youcanstart, you'll need toconfigure your database connection information. Byconvention, this
information is usually configured in an app/config/parameters.ini file:
1
2
3
4
5
6
7
8; app/config/parameters.ini
[parameters]
database_driver =mysql
database_host =localhost
database_name =test_project
database_user =root
database_password =password
database_charset =UTF8
1.http://propelorm.org/cookbook/symfony2/working-with-symfony2.html#installation
PDF brought to you by
generated on November 25, 2013Chapter 9: Databases and Propel | 111
Listing 9-3
Listing 9-4
Listing 9-5These parameters defined inparameters.ini can now beincluded inthe configuration file
(config.yml ):
1
2
3
4
5
6propel:
dbal:
driver:"%database_driver%"
user: "%database_user%"
password :"%database_password%"
dsn:
"%database_driver%:host=%database_host%;dbname=%database_name%;charset=%database_charset%"
Now that Propel knows about your database, Symfony2 can create the database for you:
1$php app/console propel:database:create
Inthis example, you have one configured connection, named default.Ifyou want toconfigure
more than one connection, read the PropelBundle configuration section .
Creating a Model Class
InthePropel world, ActiveRecord classes areknown asmodels because classes generated byPropel
contain some business logic.
For people who use Symfony2 with Doctrine2, models are equivalent to entities .
Suppose you're building anapplication where products need tobedisplayed. First, create aschema.xml
file inside the Resources/config directory of your AcmeStoreBundle :
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23<?xml version="1.0" encoding="UTF-8"?>
<database name="default"
namespace= "Acme\StoreBundle\Model"
defaultIdMethod= "native"
>
<tablename="product" >
<column name="id"
type="integer"
required= "true"
primaryKey= "true"
autoIncrement= "true"
/>
<column name="name"
type="varchar"
primaryString= "true"
size="100"
/>
<column name="price"
type="decimal"
/>
<column name="description"
type="longvarchar"
/>
PDF brought to you by
generated on November 25, 2013Chapter 9: Databases and Propel | 112
Listing 9-6
Listing 9-7
Listing 9-824
25</table>
</database>
Building the Model
After creating your schema.xml , generate your model from it by running:
1$php app/console propel:model:build
This generates each model class toquickly develop your application intheModel/directory the
AcmeStoreBundle bundle.
Creating the Database Tables/Schema
Now you have ausable Product class and allyou need topersist it.Ofcourse, you don't yethave
thecorresponding product table inyour database. Fortunately, Propel canautomatically create allthe
database tables needed for every known model in your application. To do this, run:
1
2$php app/console propel:sql:build
$php app/console propel:sql:insert --force
Your database now hasafully-functional product table with columns that match theschema you've
specified.
You can run thelast three commands combined byusing thefollowing command: phpapp/
console propel:build --insert-sql .
Persisting Objects to the Database
Now that you have aProduct object and corresponding product table, you're ready topersist data
tothe database. From inside acontroller, this ispretty easy. Add the following method tothe
DefaultController of the bundle:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17// src/Acme/StoreBundle/Controller/DefaultController.php
// ...
useAcme\StoreBundle\Model\Product ;
useSymfony\Component\HttpFoundation\Response ;
publicfunction createAction ()
{
$product =newProduct();
$product ->setName('A Foo Bar' );
$product ->setPrice (19.99);
$product ->setDescription ('Lorem ipsum dolor' );
$product ->save();
returnnewResponse ('Created product id ' .$product ->getId());
}
PDF brought to you by
generated on November 25, 2013Chapter 9: Databases and Propel | 113
Listing 9-9
Listing 9-10Inthis piece ofcode, you instantiate and work with the$product object. When you callthesave()
method onit,you persist ittothedatabase. Noneed touseother services, theobject knows how to
persist itself.
Ifyou're following along with thisexample, you'll need tocreate aroute that points tothisaction
to see it in action.
Fetching Objects from the Database
Fetching anobject back from thedatabase iseven easier. Forexample, suppose you've configured aroute
to display a specific Productbased on its idvalue:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16// ...
useAcme\StoreBundle\Model\ProductQuery ;
publicfunction showAction ($id)
{
$product =ProductQuery ::create()
->findPk($id);
if(!$product ){
throw$this->createNotFoundException (
'No product found for id ' .$id
);
}
// ... do something, like pass the $product object into a template
}
Updating an Object
Once you've fetched anobject from Propel, updating itiseasy. Suppose you have aroute that maps a
product id to an update action in a controller:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19// ...
useAcme\StoreBundle\Model\ProductQuery ;
publicfunction updateAction ($id)
{
$product =ProductQuery ::create()
->findPk($id);
if(!$product ){
throw$this->createNotFoundException (
'No product found for id ' .$id
);
}
$product ->setName('New product name!' );
$product ->save();
return$this->redirect ($this->generateUrl ('homepage' ));
}
Updating an object involves just three steps:
PDF brought to you by
generated on November 25, 2013Chapter 9: Databases and Propel | 114
Listing 9-11
Listing 9-12
Listing 9-13
Listing 9-14
Listing 9-151.fetching the object from Propel (line 6 - 13);
2.modifying the object (line 15);
3.saving it (line 16).
Deleting an Object
Deleting an object is very similar to updating, but requires a call to the delete() method on the object:
1$product ->delete();
Querying for Objects
Propel provides generated Queryclasses to run both basic and complex queries without any work:
1
2
3
4
5\Acme\StoreBundle\Model\ProductQuery ::create()->findPk($id);
\Acme\StoreBundle\Model\ProductQuery ::create()
->filterByName ('Foo')
->findOne();
Imagine that youwant toquery forproducts which cost more than 19.99, ordered from cheapest tomost
expensive. From inside a controller, do the following:
1
2
3
4$products =\Acme\StoreBundle\Model\ProductQuery ::create()
->filterByPrice (array('min'=>19.99))
->orderByPrice ()
->find();
Inone line, you getyour products inapowerful oriented object way. Noneed towaste your time
with SQL orwhatever, Symfony2 offers fully object oriented programming andPropel respects thesame
philosophy by providing an awesome abstraction layer.
If you want to reuse some queries, you can add your own methods to the ProductQuery class:
1
2
3
4
5
6
7
8
9// src/Acme/StoreBundle/Model/ProductQuery.php
classProductQuery extends BaseProductQuery
{
publicfunction filterByExpensivePrice ()
{
return$this
->filterByPrice (array('min'=>1000));
}
}
Butnote that Propel generates alotofmethods foryou and asimple findAllOrderedByName() canbe
written without any effort:
1
2
3\Acme\StoreBundle\Model\ProductQuery ::create()
->orderByName ()
->find();
PDF brought to you by
generated on November 25, 2013Chapter 9: Databases and Propel | 115
Listing 9-16
Listing 9-17
Listing 9-18
Listing 9-19Relationships/Associations
Suppose that theproducts inyour application allbelong toexactly one "category". Inthis case, you'll
need a Category object and a way to relate a Productobject to a Category object.
Start by adding the category definition in your schema.xml :
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18<database name="default" namespace= "Acme\StoreBundle\Model" defaultIdMethod= "native" >
<tablename="product" >
<column name="id"type="integer" required= "true"primaryKey= "true"
autoIncrement= "true"/>
<column name="name"type="varchar" primaryString= "true"size="100"/>
<column name="price" type="decimal" />
<column name="description" type="longvarchar" />
<column name="category_id" type="integer" />
<foreign-key foreignTable= "category" >
<reference local="category_id" foreign= "id"/>
</foreign-key>
</table>
<tablename="category" >
<column name="id"type="integer" required= "true"primaryKey= "true"
autoIncrement= "true"/>
<column name="name"type="varchar" primaryString= "true"size="100"/>
</table>
</database>
Create the classes:
1$php app/console propel:model:build
Assuming you have products inyour database, you don't want lose them. Thanks tomigrations, Propel
will be able to update your database without losing existing data.
1
2$php app/console propel:migration:generate-diff
$php app/console propel:migration:migrate
Your database has been updated, you can continue to write your application.
Saving Related Objects
Now, try the code in action. Imagine you're inside a controller:
1
2
3
4
5
6
7
8
9
10
11
12// ...
useAcme\StoreBundle\Model\Category ;
useAcme\StoreBundle\Model\Product ;
useSymfony\Component\HttpFoundation\Response ;
classDefaultController extends Controller
{
publicfunction createProductAction ()
{
$category =newCategory ();
$category ->setName('Main Products' );
PDF brought to you by
generated on November 25, 2013Chapter 9: Databases and Propel | 116
Listing 9-2013
14
15
16
17
18
19
20
21
22
23
24
25
26$product =newProduct();
$product ->setName('Foo');
$product ->setPrice (19.99);
// relate this product to the category
$product ->setCategory ($category );
// save the whole
$product ->save();
returnnewResponse (
'Created product id: ' .$product ->getId().' and category id:
'.$category ->getId()
);
}
}
Now, asingle row isadded toboth thecategory andproduct tables. The product.category_id column
forthenew product issettowhatever theidisofthenew category. Propel manages thepersistence of
this relationship for you.
Fetching Related Objects
When you need tofetch associated objects, your workflow looks just like itdidbefore. First, fetch a
$product object and then access its related Category :
1
2
3
4
5
6
7
8
9
10
11
12
13// ...
useAcme\StoreBundle\Model\ProductQuery ;
publicfunction showAction ($id)
{
$product =ProductQuery ::create()
->joinWithCategory ()
->findPk($id);
$categoryName =$product ->getCategory ()->getName();
// ...
}
Note, in the above example, only one query was made.
More information on Associations
You will find more information on relations by reading the dedicated chapter on Relationships2.
Lifecycle Callbacks
Sometimes, youneed toperform anaction right before orafter anobject isinserted, updated, ordeleted.
These types ofactions areknown as"lifecycle" callbacks or"hooks", asthey're callback methods that you
need toexecute during different stages ofthelifecycle ofanobject (e.g. theobject isinserted, updated,
deleted, etc).
To add a hook, just add a new method to the object class:
2.http://propelorm.org/documentation/04-relationships.html
PDF brought to you by
generated on November 25, 2013Chapter 9: Databases and Propel | 117
Listing 9-21 1
2
3
4
5
6
7
8
9
10// src/Acme/StoreBundle/Model/Product.php
// ...
classProduct extends BaseProduct
{
publicfunction preInsert (\PropelPDO $con=null)
{
// do something before the object is inserted
}
}
Propel provides the following hooks:
•preInsert() code executed before insertion of a new object
•postInsert() code executed after insertion of a new object
•preUpdate() code executed before update of an existing object
•postUpdate() code executed after update of an existing object
•preSave() code executed before saving an object (new or existing)
•postSave() code executed after saving an object (new or existing)
•preDelete() code executed before deleting an object
•postDelete() code executed after deleting an object
Behaviors
Allbundled behaviors inPropel areworking with Symfony2. Togetmore information about how touse
Propel behaviors, look at the Behaviors reference section .
Commands
You should read the dedicated section for Propel commands in Symfony23.
3.http://propelorm.org/cookbook/symfony2/working-with-symfony2#the_commands
PDF brought to you by
generated on November 25, 2013Chapter 9: Databases and Propel | 118
Listing 10-1Chapter 10
Testing
Whenever you write anew line ofcode, you also potentially add new bugs. Tobuild better and more
reliable applications, you should test your code using both functional and unit tests.
The PHPUnit Testing Framework
Symfony2 integrates with anindependent library -called PHPUnit -togive youarich testing framework.
This chapter won't cover PHPUnit itself, but it has its own excellent documentation1.
Symfony2 works with PHPUnit 3.5.11 or later.
Each test -whether it'saunit test orafunctional test -isaPHP class that should live intheTests/
subdirectory ofyour bundles. Ifyoufollow thisrule, then youcanrunallofyour application's tests with
the following command:
1
2# specify the configuration directory on the command line
$phpunit -c app/
The -coption tells PHPUnit tolook intheapp/directory foraconfiguration file.Ifyou're curious about
the PHPUnit options, check out the app/phpunit.xml.dist file.
Code coverage can be generated with the --coverage-html option.
1.http://www.phpunit.de/manual/3.5/en/
PDF brought to you by
generated on November 25, 2013Chapter 10: Testing | 119
Listing 10-2
Listing 10-3
Listing 10-4Unit Tests
Aunit testisusually atestagainst aspecific PHP class. Ifyou want totesttheoverall behavior ofyour
application, see the section about Functional Tests .
Writing Symfony2 unit tests isnodifferent than writing standard PHPUnit unit tests. Suppose, for
example, that you have anincredibly simple class called Calculator intheUtility/ directory ofyour
bundle:
1
2
3
4
5
6
7
8
9
10// src/Acme/DemoBundle/Utility/Calculator.php
namespace Acme\DemoBundle\Utility ;
classCalculator
{
publicfunction add($a,$b)
{
return$a+$b;
}
}
To test this, create a CalculatorTest file in the Tests/Utility directory of your bundle:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16// src/Acme/DemoBundle/Tests/Utility/CalculatorTest.php
namespace Acme\DemoBundle\Tests\Utility ;
useAcme\DemoBundle\Utility\Calculator ;
classCalculatorTest extends \PHPUnit_Framework_TestCase
{
publicfunction testAdd()
{
$calc=newCalculator ();
$result =$calc->add(30,12);
// assert that your calculator added the numbers correctly!
$this->assertEquals (42,$result);
}
}
Byconvention, theTests/sub-directory should replicate thedirectory ofyour bundle. So,ifyou're
testing a class in your bundle's Utility/ directory, put the test in the Tests/Utility/ directory.
Just likeinyour realapplication -autoloading isautomatically enabled viathebootstrap.php.cache file
(as configured by default in the phpunit.xml.dist file).
Running tests for a given file or directory is also very easy:
1
2
3
4
5
6
7
8# run all tests in the Utility directory
$phpunit -c app src/Acme/DemoBundle/Tests/Utility/
# run tests for the Calculator class
$phpunit -c app src/Acme/DemoBundle/Tests/Utility/CalculatorTest.php
# run all tests for the entire Bundle
$phpunit -c app src/Acme/DemoBundle/
PDF brought to you by
generated on November 25, 2013Chapter 10: Testing | 120
Listing 10-5
Listing 10-6Functional Tests
Functional tests check theintegration ofthedifferent layers ofanapplication (from therouting tothe
views). They arenodifferent from unit tests asfarasPHPUnit isconcerned, butthey have avery specific
workflow:
•Make a request;
•Test the response;
•Click on a link or submit a form;
•Test the response;
•Rinse and repeat.
Your First Functional Test
Functional tests aresimple PHP files that typically live intheTests/Controller directory ofyour
bundle. Ifyou want totest thepages handled byyour DemoController class, start bycreating anew
DemoControllerTest.php file that extends a special WebTestCase class.
Forexample, theSymfony2 Standard Edition provides asimple functional testforitsDemoController
(DemoControllerTest2) that reads as follows:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19// src/Acme/DemoBundle/Tests/Controller/DemoControllerTest.php
namespace Acme\DemoBundle\Tests\Controller ;
useSymfony\Bundle\FrameworkBundle\Test\WebTestCase ;
classDemoControllerTest extends WebTestCase
{
publicfunction testIndex ()
{
$client =static::createClient ();
$crawler =$client->request('GET','/demo/hello/Fabien' );
$this->assertGreaterThan (
0,
$crawler ->filter('html:contains("Hello Fabien")' )->count()
);
}
}
Torunyour functional tests, theWebTestCase class bootstraps thekernel ofyour application. In
most cases, this happens automatically. However, ifyour kernel isinanon-standard directory,
you'll need tomodify your phpunit.xml.dist filetosettheKERNEL_DIR environment variable to
the directory of your kernel:
1
2
3
4
5
6
7<phpunit>
<!-- ... -->
<php>
<server name="KERNEL_DIR" value="/path/to/your/app/" />
</php>
<!-- ... -->
</phpunit>
2.https://github.com/symfony/symfony-standard/blob/master/src/Acme/DemoBundle/Tests/Controller/DemoControllerTest.php
PDF brought to you by
generated on November 25, 2013Chapter 10: Testing | 121
Listing 10-7
Listing 10-8
Listing 10-9
Listing 10-10
Listing 10-11The createClient() method returns a client, which is like a browser that you'll use to crawl your site:
1$crawler =$client->request('GET','/demo/hello/Fabien' );
The request() method (see more about therequest method )returns aCrawler3object which canbeused
to select elements in the Response, click on links, and submit forms.
The Crawler only works when theresponse isanXML oranHTML document. Togettheraw
content response, call $client->getResponse()->getContent() .
Click onalink byfirst selecting itwith theCrawler using either anXPath expression oraCSS selector,
then usetheClient toclick onit.Forexample, thefollowing code finds alllinks with thetext Greet,then
selects the second one, and ultimately clicks on it:
1
2
3$link=$crawler ->filter('a:contains("Greet")' )->eq(1)->link();
$crawler =$client->click($link);
Submitting aform isvery similar; select aform button, optionally override some form values, andsubmit
the corresponding form:
1
2
3
4
5
6
7
8$form=$crawler ->selectButton ('submit' )->form();
// set some values
$form['name']='Lucas';
$form['form_name[subject]' ]='Hey there!' ;
// submit the form
$crawler =$client->submit($form);
The form canalso handle uploads andcontains methods tofillindifferent types ofform fields (e.g.
select() andtick()). For details, see the Forms section below.
Now that youcaneasily navigate through anapplication, useassertions totestthat itactually does what
you expect it to. Use the Crawler to make assertions on the DOM:
1
2// Assert that the response matches a given CSS selector.
$this->assertGreaterThan (0,$crawler ->filter('h1')->count());
Or,testagainst theResponse content directly ifyou justwant toassert that thecontent contains some
text, or if the Response is not an XML/HTML document:
1
2
3
4$this->assertRegExp (
'/Hello Fabien/' ,
$client->getResponse ()->getContent ()
);
3.http://api.symfony.com/2.0/Symfony/Component/DomCrawler/Crawler.html
PDF brought to you by
generated on November 25, 2013Chapter 10: Testing | 122
Listing 10-12
Listing 10-13More about the request() method:
The full signature of the request() method is:
1
2
3
4
5
6
7
8
9request(
$method,
$uri,
array$parameters =array(),
array$files=array(),
array$server =array(),
$content =null,
$changeHistory =true
)
The serverarray istheraw values that you'd expect tonormally find inthePHP $_SERVER4
superglobal. Forexample, tosettheContent-Type ,Referer and X-Requested-With' HTTP headers,
you'd pass the following (mind the `HTTP_ prefix for non standard headers):
1
2
3
4
5
6
7
8
9
10
11$client->request(
'GET',
'/demo/hello/Fabien' ,
array(),
array(),
array(
'CONTENT_TYPE' =>'application/json' ,
'HTTP_REFERER' =>'/foo/bar' ,
'HTTP_X-Requested-With' =>'XMLHttpRequest' ,
)
);
4.http://php.net/manual/en/reserved.variables.server.php
PDF brought to you by
generated on November 25, 2013Chapter 10: Testing | 123
Listing 10-14
Listing 10-15
Listing 10-16Useful Assertions
To get you started faster, here is a list of the most common and useful test assertions:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37// Assert that there is at least one h2 tag
// with the class "subtitle"
$this->assertGreaterThan (
0,
$crawler ->filter('h2.subtitle' )->count()
);
// Assert that there are exactly 4 h2 tags on the page
$this->assertCount (4,$crawler ->filter('h2'));
// Assert that the "Content-Type" header is "application/json"
$this->assertTrue (
$client->getResponse ()->headers->contains (
'Content-Type' ,
'application/json'
)
);
// Assert that the response content matches a regexp.
$this->assertRegExp ('/foo/',$client->getResponse ()->getContent ());
// Assert that the response status code is 2xx
$this->assertTrue ($client->getResponse ()->isSuccessful ());
// Assert that the response status code is 404
$this->assertTrue ($client->getResponse ()->isNotFound ());
// Assert a specific 200 status code
$this->assertEquals (
200,
$client->getResponse ()->getStatusCode ()
);
// Assert that the response is a redirect to /demo/contact
$this->assertTrue (
$client->getResponse ()->isRedirect ('/demo/contact' )
);
// or simply check that the response is a redirect to any URL
$this->assertTrue ($client->getResponse ()->isRedirect ());
Working with the Test Client
The Test Client simulates anHTTP client like abrowser and makes requests into your Symfony2
application:
1$crawler =$client->request('GET','/hello/Fabien' );
The request() method takes theHTTP method and aURL asarguments and returns aCrawler
instance.
Use theCrawler tofind DOM elements intheResponse. These elements canthen beused toclick on
links and submit forms:
PDF brought to you by
generated on November 25, 2013Chapter 10: Testing | 124
Listing 10-171
2
3
4
5$link=$crawler ->selectLink ('Go elsewhere...' )->link();
$crawler =$client->click($link);
$form=$crawler ->selectButton ('validate' )->form();
$crawler =$client->submit($form,array('name'=>'Fabien' ));
The click() and submit() methods both return aCrawler object. These methods arethebest way to
browse your application asittakes care ofalotofthings foryou, likedetecting theHTTP method from
a form and giving you a nice API for uploading files.
You will learn more about the LinkandFormobjects in the Crawler section below.
The request method canalso beused tosimulate form submissions directly orperform more complex
requests:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37// Directly submit a form (but using the Crawler is easier!)
$client->request('POST','/submit' ,array('name'=>'Fabien' ));
// Submit a raw JSON string in the request body
$client->request(
'POST',
'/submit' ,
array(),
array(),
array('CONTENT_TYPE' =>'application/json' ),
'{"name":"Fabien"}'
);
// Form submission with a file upload
useSymfony\Component\HttpFoundation\File\UploadedFile ;
$photo=newUploadedFile (
'/path/to/photo.jpg' ,
'photo.jpg' ,
'image/jpeg' ,
123
);
$client->request(
'POST',
'/submit' ,
array('name'=>'Fabien' ),
array('photo' =>$photo)
);
// Perform a DELETE requests, and pass HTTP headers
$client->request(
'DELETE' ,
'/post/12' ,
array(),
array(),
array('PHP_AUTH_USER' =>'username' ,'PHP_AUTH_PW' =>'pa$$word' )
);
Last butnotleast, you canforce each request tobeexecuted initsown PHP process toavoid anyside-
effects when working with several clients in the same script:
PDF brought to you by
generated on November 25, 2013Chapter 10: Testing | 125
Listing 10-18
Listing 10-19
Listing 10-20
Listing 10-21
Listing 10-22
Listing 10-231$client->insulate ();
Browsing
The Client supports many operations that can be done in a real browser:
1
2
3
4
5
6$client->back();
$client->forward();
$client->reload();
// Clears all cookies and the history
$client->restart();
Accessing Internal Objects
If you use the client to test your application, you might want to access the client's internal objects:
1
2$history =$client->getHistory ();
$cookieJar =$client->getCookieJar ();
You can also get the objects related to the latest request:
1
2
3$request =$client->getRequest ();
$response =$client->getResponse ();
$crawler =$client->getCrawler ();
If your requests are not insulated, you can also access the Container and the Kernel:
1
2$container =$client->getContainer ();
$kernel =$client->getKernel ();
Accessing the Container
It'shighly recommended that afunctional test only tests theResponse. But under certain very rare
circumstances, youmight want toaccess some internal objects towrite assertions. Insuch cases, youcan
access the dependency injection container:
1$container =$client->getContainer ();
Bewarned that this does notwork ifyou insulate theclient orifyou useanHTTP layer. Foralistof
services available in your application, use the container:debug console task.
If the information you need to check is available from the profiler, use it instead.
PDF brought to you by
generated on November 25, 2013Chapter 10: Testing | 126
Listing 10-24
Listing 10-25
Listing 10-26
Listing 10-27Accessing the Profiler Data
Oneach request, theSymfony profiler collects andstores alotofdata about theinternal handling ofthat
request. Forexample, theprofiler could beused toverify that agiven page executes lessthan acertain
number of database queries when loading.
To get the Profiler for the last request, do the following:
1$profile =$client->getProfile ();
Forspecific details onusing theprofiler inside atest, seetheHow tousetheProfiler inaFunctional Test
cookbook entry.
Redirecting
When arequest returns aredirect response, theclient does notfollow itautomatically. You canexamine
the response and force a redirection afterwards with the followRedirect() method:
1$crawler =$client->followRedirect ();
Ifyou want the client toautomatically follow allredirects, you can force him with the
followRedirects() method:
1$client->followRedirects ();
The Crawler
ACrawler instance isreturned each time you make arequest with theClient. Itallows you totraverse
HTML documents, select nodes, find links and forms.
Traversing
Like jQuery, theCrawler hasmethods totraverse theDOM ofanHTML/ XML document. Forexample,
thefollowing finds allinput[type=submit] elements, selects thelastoneonthepage, and then selects
its immediate parent element:
1
2
3
4
5$newCrawler =$crawler ->filter('input[type=submit]' )
->last()
->parents()
->first()
;
Many other methods are also available:
Method Description
filter('h1.title') Nodes that match the CSS selector
filterXpath('h1') Nodes that match the XPath expression
eq(1) Node for the specified index
first() First node
last() Last node
PDF brought to you by
generated on November 25, 2013Chapter 10: Testing | 127
Listing 10-28
Listing 10-29Method Description
siblings() Siblings
nextAll() All following siblings
previousAll() All preceding siblings
parents() Returns the parent nodes
children() Returns children nodes
reduce($lambda) Nodes for which the callable does not return false
Since each ofthese methods returns anew Crawler instance, youcannarrow down your node selection
by chaining the method calls:
1
2
3
4
5
6
7
8
9$crawler
->filter('h1')
->reduce(function ($node,$i)
{
if(!$node->getAttribute ('class')){
returnfalse;
}
})
->first();
Use the count()function to get the number of nodes stored in a Crawler: count($crawler)
Extracting Information
The Crawler can extract information from the nodes:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17// Returns the attribute value for the first node
$crawler ->attr('class');
// Returns the node value for the first node
$crawler ->text();
// Extracts an array of attributes for all nodes
// (_text returns the node value)
// returns an array for each element in crawler,
// each with the value and href
$info=$crawler ->extract(array('_text','href'));
// Executes a lambda for each node and return an array of results
$data=$crawler ->each(function ($node,$i)
{
return$node->attr('href');
});
Links
To select links, you can use the traversing methods above or the convenient selectLink() shortcut:
PDF brought to you by
generated on November 25, 2013Chapter 10: Testing | 128
Listing 10-30
Listing 10-31
Listing 10-32
Listing 10-33
Listing 10-34
Listing 10-35
Listing 10-361$crawler ->selectLink ('Click here' );
This selects alllinks that contain thegiven text, orclickable images forwhich thealtattribute contains
the given text. Like the other filtering methods, this returns another Crawlerobject.
Once you've selected alink, youhave access toaspecial Linkobject, which hashelpful methods specific
tolinks (such asgetMethod() andgetUri() ).Toclick onthelink, usetheClient's click()method and
pass it a Linkobject:
1
2
3$link=$crawler ->selectLink ('Click here' )->link();
$client->click($link);
Forms
Just like links, you select forms with the selectButton() method:
1$buttonCrawlerNode =$crawler ->selectButton ('submit' );
Notice that you select form buttons and notforms asaform canhave several buttons; ifyou use
the traversing API, keep in mind that you must look for a button.
The selectButton() method canselect buttontags andsubmit inputtags. Ituses several different parts
of the buttons to find them:
•The valueattribute value;
•The idoraltattribute value for images;
•The idornameattribute value for buttontags.
Once you have aCrawler representing abutton, calltheform()method togetaForminstance forthe
form wrapping the button node:
1$form=$buttonCrawlerNode ->form();
When calling theform()method, you canalso pass anarray offield values that overrides thedefault
ones:
1
2
3
4$form=$buttonCrawlerNode ->form(array(
'name' =>'Fabien' ,
'my_form[subject]' =>'Symfony rocks!' ,
));
And if you want to simulate a specific HTTP method for the form, pass it as a second argument:
1$form=$buttonCrawlerNode ->form(array(),'DELETE' );
The Client can submit Forminstances:
1$client->submit($form);
PDF brought to you by
generated on November 25, 2013Chapter 10: Testing | 129
Listing 10-37
Listing 10-38
Listing 10-39
Listing 10-40
Listing 10-41The field values can also be passed as a second argument of the submit() method:
1
2
3
4$client->submit($form,array(
'name' =>'Fabien' ,
'my_form[subject]' =>'Symfony rocks!' ,
));
For more complex situations, use the Forminstance as an array to set the value of each field individually:
1
2
3// Change the value of a field
$form['name']='Fabien' ;
$form['my_form[subject]' ]='Symfony rocks!' ;
There is also a nice API to manipulate the values of the fields according to their type:
1
2
3
4
5
6
7
8// Select an option or a radio
$form['country' ]->select('France' );
// Tick a checkbox
$form['like_symfony' ]->tick();
// Upload a file
$form['photo']->upload('/path/to/lucas.jpg' );
You cangetthevalues that will besubmitted bycalling thegetValues() method ontheForm
object. The uploaded files are available inaseparate array returned bygetFiles() .The
getPhpValues() and getPhpFiles() methods also return thesubmitted values, butinthePHP
format (itconverts thekeys with square brackets notation -e.g. my_form[subject] -toPHP
arrays).
Testing Configuration
The Client used byfunctional tests creates aKernel that runs inaspecial testenvironment. Since
Symfony loads theapp/config/config_test.yml inthetestenvironment, you cantweak anyofyour
application's settings specifically for testing.
For example, bydefault, the swiftmailer isconfigured tonot actually deliver emails inthe test
environment. You can see this under the swiftmailer configuration option:
1
2
3
4
5# app/config/config_test.yml
# ...
swiftmailer :
disable_delivery :true
You canalso useadifferent environment entirely, oroverride thedefault debug mode (true)bypassing
each as options to the createClient() method:
1
2
3
4$client =static::createClient (array(
'environment' =>'my_test_env' ,
'debug' =>false,
));
PDF brought to you by
generated on November 25, 2013Chapter 10: Testing | 130
Listing 10-42
Listing 10-43
Listing 10-44
Listing 10-45Ifyour application behaves according tosome HTTP headers, pass them asthesecond argument of
createClient() :
1
2
3
4$client =static::createClient (array(),array(
'HTTP_HOST' =>'en.example.com' ,
'HTTP_USER_AGENT' =>'MySuperBrowser/1.0' ,
));
You can also override HTTP headers on a per request basis:
1
2
3
4$client->request('GET','/',array(),array(),array(
'HTTP_HOST' =>'en.example.com' ,
'HTTP_USER_AGENT' =>'MySuperBrowser/1.0' ,
));
The testclient isavailable asaservice inthecontainer inthetestenvironment (orwherever the
framework.test option is enabled). This means you can override the service entirely if you need to.
PHPUnit Configuration
Each application hasitsown PHPUnit configuration, stored inthephpunit.xml.dist file.You canedit
this filetochange thedefaults orcreate aphpunit.xml filetotweak theconfiguration foryour local
machine.
Store the phpunit.xml.dist file in your code repository, and ignore the phpunit.xml file.
Bydefault, only thetests stored in"standard" bundles arerunbythephpunitcommand (standard being
tests inthesrc/*/Bundle/Testsorsrc/*/Bundle/*Bundle/ Testsdirectories) Butyou caneasily add
more directories. Forinstance, thefollowing configuration adds thetests from theinstalled third-party
bundles:
1
2
3
4
5
6
7<!-- hello/phpunit.xml.dist -->
<testsuites>
<testsuite name="Project Test Suite" >
<directory> ../src/*/*Bundle/Tests </directory>
<directory> ../src/Acme/Bundle/*Bundle/Tests </directory>
</testsuite>
</testsuites>
To include other directories in the code coverage, also edit the <filter> section:
1
2
3
4
5
6
7
8
9<!-- ... -->
<filter>
<whitelist>
<directory> ../src</directory>
<exclude>
<directory> ../src/*/*Bundle/Resources </directory>
<directory> ../src/*/*Bundle/Tests </directory>
<directory> ../src/Acme/Bundle/*Bundle/Resources </directory>
<directory> ../src/Acme/Bundle/*Bundle/Tests </directory>
PDF brought to you by
generated on November 25, 2013Chapter 10: Testing | 131
10
11
12</exclude>
</whitelist>
</filter>
Learn more
•The DomCrawler Component
•The CssSelector Component
•How to simulate HTTP Authentication in a Functional Test
•How to test the Interaction of several Clients
•How to use the Profiler in a Functional Test
•How to customize the Bootstrap Process before running Tests
PDF brought to you by
generated on November 25, 2013Chapter 10: Testing | 132
Listing 11-1
Listing 11-2Chapter 11
Validation
Validation isavery common task inweb applications. Data entered informs needs tobevalidated. Data
also needs to be validated before it is written into a database or passed to a web service.
Symfony2 ships with aValidator1component that makes thistask easy andtransparent. This component
is based on the JSR303 Bean Validation specification2.
The Basics of Validation
The best way tounderstand validation istoseeitinaction. Tostart, suppose you've created aplain-old-
PHP object that you need to use somewhere in your application:
1
2
3
4
5
6
7// src/Acme/BlogBundle/Entity/Author.php
namespace Acme\BlogBundle\Entity ;
classAuthor
{
public$name;
}
Sofar, this isjust anordinary class that serves some purpose inside your application. The goal of
validation istotellyouwhether ornotthedata ofanobject isvalid. Forthistowork, you'll configure alist
ofrules (called constraints )that theobject must follow inorder tobevalid. These rules canbespecified
via a number of different formats (YAML, XML, annotations, or PHP).
For example, to guarantee that the $nameproperty is not empty, add the following:
1
2
3
4
5# src/Acme/BlogBundle/Resources/config/validation.yml
Acme\BlogBundle\Entity\Author :
properties :
name:
-NotBlank :~
1.https://github.com/symfony/Validator
2.http://jcp.org/en/jsr/detail?id=303
PDF brought to you by
generated on November 25, 2013Chapter 11: Validation | 133
Listing 11-3
Listing 11-4
Listing 11-5Protected and private properties canalso bevalidated, aswell as"getter" methods (see validator-
constraint-targets ).
Using the validator Service
Next, toactually validate anAuthorobject, usethevalidate method onthevalidator service (class
Validator3).The jobofthevalidator iseasy: toread theconstraints (i.e. rules) ofaclass and verify
whether ornotthedata ontheobject satisfies those constraints. Ifvalidation fails, anarray oferrors is
returned. Take this simple example from inside a controller:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18// ...
useSymfony\Component\HttpFoundation\Response ;
useAcme\BlogBundle\Entity\Author ;
publicfunction indexAction ()
{
$author =newAuthor();
// ... do something to the $author object
$validator =$this->get('validator' );
$errors =$validator ->validate ($author);
if(count($errors)>0){
returnnewResponse (print_r($errors,true));
}else{
returnnewResponse ('The author is valid! Yes!' );
}
}
If the $nameproperty is empty, you will see the following error message:
1
2Acme\BlogBundle\Author.name:
This value should not be blank
If you insert a value into the nameproperty, the happy success message will appear.
Most ofthetime, you won't interact directly with thevalidator service orneed toworry about
printing outtheerrors. Most ofthetime, you'll usevalidation indirectly when handling submitted
form data. For more information, see the Validation and Forms .
You could also pass the collection of errors into a template.
1
2
3
4
5
6
7if(count($errors)>0){
return$this->render('AcmeBlogBundle:Author:validate.html.twig' ,array(
'errors' =>$errors,
));
}else{
// ...
}
Inside the template, you can output the list of errors exactly as needed:
3.http://api.symfony.com/2.0/Symfony/Component/Validator/Validator.html
PDF brought to you by
generated on November 25, 2013Chapter 11: Validation | 134
Listing 11-6
Listing 11-71
2
3
4
5
6
7{# src/Acme/BlogBundle/Resources/views/Author/validate.html.twig #}
<h3>The author has the following errors </h3>
<ul>
{%forerrorinerrors%}
<li>{{error.message }}</li>
{%endfor%}
</ul>
Each validation error (called a"constraint violation"), isrepresented byaConstraintViolation4
object.
Validation and Forms
The validator service can beused atany time tovalidate any object. Inreality, however, you'll
usually work with thevalidator indirectly when working with forms. Symfony's form library uses the
validator service internally tovalidate theunderlying object after values have been submitted and
bound. The constraint violations ontheobject areconverted into FieldError objects that caneasily be
displayed with your form. The typical form submission workflow looks likethefollowing from inside a
controller:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24// ...
useAcme\BlogBundle\Entity\Author ;
useAcme\BlogBundle\Form\AuthorType ;
useSymfony\Component\HttpFoundation\Request ;
publicfunction updateAction (Request $request )
{
$author =newAuthor();
$form=$this->createForm (newAuthorType (),$author);
if($request ->getMethod ()=='POST'){
$form->bindRequest ($request );
if($form->isValid()){
// the validation passed, do something with the $author object
return$this->redirect ($this->generateUrl (...));
}
}
return$this->render('BlogBundle:Author:form.html.twig' ,array(
'form'=>$form->createView (),
));
}
This example uses an AuthorType form class, which is not shown here.
For more information, see the Forms chapter.
4.http://api.symfony.com/2.0/Symfony/Component/Validator/ConstraintViolation.html
PDF brought to you by
generated on November 25, 2013Chapter 11: Validation | 135
Listing 11-8Configuration
The Symfony2 validator isenabled bydefault, butyoumust explicitly enable annotations ifyou're using
the annotation method to specify your constraints:
1
2
3# app/config/config.yml
framework :
validation :{enable_annotations :true}
Constraints
The validator isdesigned tovalidate objects against constraints (i.e. rules). Inorder tovalidate an
object, simply map one or more constraints to its class and then pass it to the validator service.
Behind thescenes, aconstraint issimply aPHP object that makes anassertive statement. Inreal life,
aconstraint could be:"The cake must notbeburned". InSymfony2, constraints aresimilar: they are
assertions that acondition istrue. Given avalue, aconstraint will tellyou whether ornotthat value
adheres to the rules of the constraint.
Supported Constraints
Symfony2 packages a large number of the most commonly-needed constraints:
Basic Constraints
These arethebasic constraints: usethem toassert very basic things about thevalue ofproperties orthe
return value of methods on your object.
•NotBlank
•Blank
•NotNull
•Null
•True
•False
•Type
String Constraints
•Email
•MinLength
•MaxLength
•Url
•Regex
•Ip
Number Constraints
•Max
•Min
PDF brought to you by
generated on November 25, 2013Chapter 11: Validation | 136
Listing 11-9
Listing 11-10Date Constraints
•Date
•DateTime
•Time
Collection Constraints
•Choice
•Collection
•UniqueEntity
•Language
•Locale
•Country
File Constraints
•File
•Image
Other Constraints
•Callback
•All
•Valid
You canalso create your own custom constraints. This topic iscovered inthe"How tocreate aCustom
Validation Constraint " article of the cookbook.
Constraint Configuration
Some constraints, like NotBlank ,aresimple whereas others, like theChoice constraint, have several
configuration options available. Suppose that theAuthorclass hasanother property, genderthat canbe
set to either "male" or "female":
1
2
3
4
5# src/Acme/BlogBundle/Resources/config/validation.yml
Acme\BlogBundle\Entity\Author :
properties :
gender:
-Choice:{choices:[male,female],message:Choose a valid gender. }
The options ofaconstraint canalways bepassed inasanarray. Some constraints, however, also allow
youtopass thevalue ofone, "default ",option inplace ofthearray. Inthecase oftheChoiceconstraint,
thechoicesoptions can be specified in this way.
1
2
3
4
5# src/Acme/BlogBundle/Resources/config/validation.yml
Acme\BlogBundle\Entity\Author :
properties :
gender:
-Choice:[male,female]
This ispurely meant tomake theconfiguration ofthemost common option ofaconstraint shorter and
quicker.
PDF brought to you by
generated on November 25, 2013Chapter 11: Validation | 137
Listing 11-11
Listing 11-12
Listing 11-13Ifyou're ever unsure ofhow tospecify anoption, either check theAPIdocumentation fortheconstraint
or play it safe by always passing in an array of options (the first method shown above).
Translation Constraint Messages
For information on translating the constraint messages, see Translating Constraint Messages .
Constraint Targets
Constraints canbeapplied toaclass property (e.g. name)orapublic getter method (e.g. getFullName ).
The first isthemost common and easy touse, butthesecond allows you tospecify more complex
validation rules.
Properties
Validating class properties isthemost basic validation technique. Symfony2 allows you tovalidate
private, protected orpublic properties. The next listing shows you how toconfigure the$firstName
property of an Authorclass to have at least 3 characters.
1
2
3
4
5
6# src/Acme/BlogBundle/Resources/config/validation.yml
Acme\BlogBundle\Entity\Author :
properties :
firstName :
-NotBlank :~
-MinLength :3
Getters
Constraints canalso beapplied tothereturn value ofamethod. Symfony2 allows youtoaddaconstraint
toanypublic method whose name starts with "get" or"is". Inthisguide, both ofthese types ofmethods
are referred to as "getters".
The benefit ofthis technique isthat itallows you tovalidate your object dynamically. Forexample,
suppose youwant tomake sure that apassword field doesn't match thefirst name oftheuser (forsecurity
reasons). You candothisbycreating anisPasswordLegal method, andthen asserting that thismethod
must return true:
1
2
3
4
5# src/Acme/BlogBundle/Resources/config/validation.yml
Acme\BlogBundle\Entity\Author :
getters:
passwordLegal :
-"True":{message:"Thepassword cannotmatchyourfirstname"}
Now, create the isPasswordLegal() method, and include the logic you need:
1
2
3
4publicfunction isPasswordLegal ()
{
return($this->firstName !=$this->password );
}
PDF brought to you by
generated on November 25, 2013Chapter 11: Validation | 138
Listing 11-14
Listing 11-15The keen-eyed among you will have noticed that theprefix ofthegetter ("get" or"is") isomitted
inthemapping. This allows youtomove theconstraint toaproperty with thesame name later (or
vice versa) without changing your validation logic.
Classes
Some constraints apply totheentire class being validated. For example, theCallback constraint isa
generic constraint that's applied totheclass itself. When that class isvalidated, methods specified bythat
constraint are simply executed so that each can provide more custom validation.
Validation Groups
Sofar,you've been able toadd constraints toaclass and askwhether ornotthat class passes allof
thedefined constraints. Insome cases, however, you'll need tovalidate anobject against only some of
theconstraints onthat class. Todothis, you canorganize each constraint into oneormore "validation
groups", and then apply validation against just one group of constraints.
Forexample, suppose you have aUserclass, which isused both when auser registers and when auser
updates his/her contact information later:
1
2
3
4
5
6
7
8
9
10# src/Acme/BlogBundle/Resources/config/validation.yml
Acme\BlogBundle\Entity\User :
properties :
email:
-Email:{groups:[registration ]}
password :
-NotBlank :{groups:[registration ]}
-MinLength :{limit:7,groups:[registration ]}
city:
-MinLength :2
With this configuration, there are two validation groups:
•Default- contains the constraints not assigned to any other group;
•User-contains theconstraints that belongs togroup Default (this group isuseful forGroup
Sequence );
•registration - contains the constraints on the emailandpassword fields only.
Totellthevalidator touseaspecific group, pass oneormore group names asthesecond argument tothe
validate() method:
1$errors =$validator ->validate ($author,array('registration' ));
If no groups are specified, all constraints that belong in group Defaultwill be applied.
Ofcourse, you'll usually work with validation indirectly through theform library. Forinformation on
how to use validation groups inside forms, see Validation Groups .
Group Sequence
Insome cases, you want tovalidate your groups bysteps. Todothis, you canusetheGroupSequence
feature. Inthecase, anobject defines agroup sequence, and then thegroups inthegroup sequence are
validated in order.
PDF brought to you by
generated on November 25, 2013Chapter 11: Validation | 139
Listing 11-16
Listing 11-17Group sequences cannot contain thegroup Default,asthiswould create aloop. Instead, usethe
group {ClassName} (e.g. User) instead.
Forexample, suppose you have aUserclass and want tovalidate that theusername and thepassword
are different only if all other validation passes (in order to avoid multiple error messages).
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15# src/Acme/BlogBundle/Resources/config/validation.yml
Acme\BlogBundle\Entity\User :
group_sequence :
-User
-Strict
getters:
passwordLegal :
-"True":
message:"Thepassword cannotmatchyourusername"
groups:[Strict]
properties :
username :
-NotBlank :~
password :
-NotBlank :~
Inthisexample, itwillfirst validate allconstraints inthegroup User(which isthesame astheDefault
group). Only if all constraints in that group are valid, the second group, Strict, will be validated.
Validating Values and Arrays
Sofar,you've seen how youcanvalidate entire objects. Butsometimes, youjustwant tovalidate asimple
value -liketoverify that astring isavalid email address. This isactually pretty easy todo.From inside a
controller, it looks like this:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23useSymfony\Component\Validator\Constraints\Email ;
// ...
publicfunction addEmailAction ($email)
{
$emailConstraint =newEmail();
// all constraint "options" can be set this way
$emailConstraint ->message ='Invalid email address' ;
// use the validator to validate the value
$errorList =$this->get('validator' )->validateValue (
$email,
$emailConstraint
);
if(count($errorList )==0){
// this IS a valid email address, do something
}else{
// this is *not* a valid email address
$errorMessage =$errorList [0]->getMessage ();
// ... do something with the error
}
PDF brought to you by
generated on November 25, 2013Chapter 11: Validation | 140
24
25
26// ...
}
Bycalling validateValue onthevalidator, youcanpass inarawvalue andtheconstraint object that you
want tovalidate that value against. Afulllistoftheavailable constraints -aswell asthefullclass name
for each constraint - is available in the constraints reference section .
The validateValue method returns aConstraintViolationList5object, which acts justlikeanarray
oferrors. Each error inthecollection isaConstraintViolation6object, which holds theerror message
on its getMessage method.
Final Thoughts
The Symfony2 validator isapowerful tool that can beleveraged toguarantee that thedata ofany
object is"valid". The power behind validation liesin"constraints", which arerules that you canapply
toproperties orgetter methods ofyour object. And while you'll most commonly usethevalidation
framework indirectly when using forms, remember that it can be used anywhere to validate any object.
Learn more from the Cookbook
•How to create a Custom Validation Constraint
5.http://api.symfony.com/2.0/Symfony/Component/Validator/ConstraintViolationList.html
6.http://api.symfony.com/2.0/Symfony/Component/Validator/ConstraintViolation.html
PDF brought to you by
generated on November 25, 2013Chapter 11: Validation | 141
Listing 12-1Chapter 12
Forms
Dealing with HTML forms isone ofthemost common -and challenging -tasks foraweb developer.
Symfony2 integrates aForm component that makes dealing with forms easy. Inthischapter, you'll build
acomplex form from theground-up, learning themost important features oftheform library along the
way.
The Symfony form component isastandalone library that can beused outside ofSymfony2
projects. For more information, see the Symfony2 Form Component1on Github.
Creating a Simple Form
Suppose you're building asimple todo listapplication that willneed todisplay "tasks". Because your users
willneed toedit and create tasks, you're going toneed tobuild aform. Butbefore youbegin, first focus
on the generic Taskclass that represents and stores the data for a single task:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15// src/Acme/TaskBundle/Entity/Task.php
namespace Acme\TaskBundle\Entity ;
classTask
{
protected $task;
protected $dueDate ;
publicfunction getTask()
{
return$this->task;
}
publicfunction setTask($task)
{
1.https://github.com/symfony/Form
PDF brought to you by
generated on November 25, 2013Chapter 12: Forms | 142
Listing 12-2
Listing 12-316
17
18
19
20
21
22
23
24
25
26
27$this->task=$task;
}
publicfunction getDueDate ()
{
return$this->dueDate;
}
publicfunction setDueDate (\DateTime $dueDate =null)
{
$this->dueDate =$dueDate ;
}
}
Ifyou're coding along with thisexample, create theAcmeTaskBundle first byrunning thefollowing
command (and accepting all of the default options):
1$php app/console generate:bundle --namespace =Acme/TaskBundle
This class isa"plain-old-PHP-object" because, sofar,ithasnothing todowith Symfony oranyother
library. It'squite simply anormal PHP object that directly solves aproblem inside your application (i.e.
theneed torepresent atask inyour application). Ofcourse, bytheendofthischapter, you'll beable to
submit data to a Taskinstance (via an HTML form), validate its data, and persist it to the database.
Building the Form
Now that you've created aTaskclass, thenext step istocreate and render theactual HTML form. In
Symfony2, thisisdone bybuilding aform object and then rendering itinatemplate. Fornow, thiscan
all be done from inside a controller:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24// src/Acme/TaskBundle/Controller/DefaultController.php
namespace Acme\TaskBundle\Controller ;
useSymfony\Bundle\FrameworkBundle\Controller\Controller ;
useAcme\TaskBundle\Entity\Task ;
useSymfony\Component\HttpFoundation\Request ;
classDefaultController extends Controller
{
publicfunction newAction (Request $request )
{
// create a task and give it some dummy data for this example
$task=newTask();
$task->setTask('Write a blog post' );
$task->setDueDate (new\DateTime ('tomorrow' ));
$form=$this->createFormBuilder ($task)
->add('task','text')
->add('dueDate' ,'date')
->getForm();
return$this->render('AcmeTaskBundle:Default:new.html.twig' ,array(
'form'=>$form->createView (),
));
PDF brought to you by
generated on November 25, 2013Chapter 12: Forms | 143
Listing 12-425
26}
}
This example shows youhow tobuild your form directly inthecontroller. Later, inthe"Creating
Form Classes "section, you'll learn how tobuild your form inastandalone class, which is
recommended as your form becomes reusable.
Creating aform requires relatively little code because Symfony2 form objects arebuilt with a"form
builder". The form builder's purpose istoallow youtowrite simple form "recipes", andhave itdoallthe
heavy-lifting of actually building the form.
Inthis example, you've added two fields toyour form -taskand dueDate -corresponding tothetask
and dueDate properties oftheTaskclass. You've also assigned each a"type" (e.g. text,date),which,
among other things, determines which HTML form tag(s) is rendered for that field.
Symfony2 comes with many built-in types that will be discussed shortly (see Built-in Field Types ).
Rendering the Form
Now that theform hasbeen created, thenext step istorender it.This isdone bypassing aspecial form
"view" object toyour template (notice the$form->createView() inthecontroller above) andusing aset
of form helper functions:
1
2
3
4
5
6{# src/Acme/TaskBundle/Resources/views/Default/new.html.twig #}
<formaction="{{path('task_new' )}}"method="post"{{form_enctype (form)}}>
{{form_widget (form)}}
<inputtype="submit" />
</form>
This example assumes that you've created aroute called task_new that points tothe
AcmeTaskBundle:Default:new controller that was created earlier.
That's it!Byprinting form_widget(form) ,each field intheform isrendered, along with alabel anderror
message (ifthere isone). Aseasy asthis is,it'snotvery flexible (yet). Usually, you'll want torender
each form field individually soyou cancontrol how theform looks. You'll learn how todothat inthe
"Rendering a Form in a Template " section.
Before moving on,notice how therendered taskinput field hasthevalue ofthetaskproperty from the
$taskobject (i.e. "Write ablog post"). This isthefirst jobofaform: totake data from anobject and
translate it into a format that's suitable for being rendered in an HTML form.
PDF brought to you by
generated on November 25, 2013Chapter 12: Forms | 144
Listing 12-5The form system issmart enough toaccess thevalue oftheprotected taskproperty viathe
getTask() and setTask() methods ontheTaskclass. Unless aproperty ispublic, itmust have a
"getter" and "setter" method sothat theform component cangetand putdata onto theproperty.
ForaBoolean property, you canusean"isser" method (e.g. isPublished() )instead ofagetter
(e.g. getPublished() ).
Handling Form Submissions
The second jobofaform istotranslate user-submitted data back totheproperties ofanobject. To
make this happen, thesubmitted data from theuser must bebound totheform. Add thefollowing
functionality to your controller:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25// ...
useSymfony\Component\HttpFoundation\Request ;
publicfunction newAction (Request $request )
{
// just setup a fresh $task object (remove the dummy data)
$task=newTask();
$form=$this->createFormBuilder ($task)
->add('task','text')
->add('dueDate' ,'date')
->getForm();
if($request ->getMethod ()=='POST'){
$form->bindRequest ($request );
if($form->isValid()){
// perform some action, such as saving the task to the database
return$this->redirect ($this->generateUrl ('task_success' ));
}
}
// ...
}
Now, when submitting theform, thecontroller binds thesubmitted data totheform, which translates
that data back tothetaskand dueDate properties ofthe$taskobject. This allhappens viathe
bindRequest() method.
Assoon asbindRequest() iscalled, thesubmitted data istransferred totheunderlying object
immediately. This happens regardless of whether or not the underlying data is actually valid.
This controller follows a common pattern for handling forms, and has three possible paths:
1.When initially loading thepage inabrowser, therequest method isGETandtheform issimply
created and rendered;
2.When theuser submits theform (i.e.themethod isPOST)with invalid data (validation iscovered
inthenext section), theform isbound and then rendered, this time displaying allvalidation
errors;
3.When the user submits the form with valid data, the form isbound and you have the
opportunity toperform some actions using the$taskobject (e.g. persisting ittothedatabase)
before redirecting the user to some other page (e.g. a "thank you" or "success" page).
PDF brought to you by
generated on November 25, 2013Chapter 12: Forms | 145
Listing 12-6
Listing 12-7Redirecting auser after asuccessful form submission prevents theuser from being able tohit
"refresh" and re-post the data.
Form Validation
Intheprevious section, youlearned how aform canbesubmitted with valid orinvalid data. InSymfony2,
validation isapplied totheunderlying object (e.g. Task).Inother words, thequestion isn't whether the
"form" isvalid, butwhether ornotthe$taskobject isvalid after theform hasapplied thesubmitted data
to it. Calling $form->isValid() is a shortcut that asks the $taskobject whether or not it has valid data.
Validation isdone byadding asetofrules (called constraints) toaclass. Toseethis inaction, add
validation constraints sothat thetaskfield cannot beempty andthedueDatefield cannot beempty and
must be a valid DateTime object.
1
2
3
4
5
6
7
8# Acme/TaskBundle/Resources/config/validation.yml
Acme\TaskBundle\Entity\Task :
properties :
task:
-NotBlank :~
dueDate:
-NotBlank :~
-Type:\DateTime
That's it!Ifyoure-submit theform with invalid data, you'll seethecorresponding errors printed outwith
the form.
HTML5 Validation
AsofHTML5, many browsers can natively enforce certain validation constraints ontheclient
side. The most common validation isactivated byrendering arequired attribute onfields that
arerequired. Forbrowsers that support HTML5, thiswillresult inanative browser message being
displayed if the user tries to submit the form with that field blank.
Generated forms take fulladvantage ofthis new feature byadding sensible HTML attributes
that trigger thevalidation. The client-side validation, however, can bedisabled byadding the
novalidate attribute totheformtagorformnovalidate tothesubmit tag.This isespecially useful
when you want totest your server-side validation constraints, butarebeing prevented byyour
browser from, for example, submitting blank fields.
Validation is a very powerful feature of Symfony2 and has its own dedicated chapter .
Validation Groups
Ifyour object takes advantage ofvalidation groups ,you'll need tospecify which validation group(s) your
form should use:
1
2
3$form=$this->createFormBuilder ($users,array(
'validation_groups' =>array('registration' ),
))->add(...);
Ifyou're creating form classes (agood practice), then you'll need toadd the following tothe
getDefaultOptions() method:
PDF brought to you by
generated on November 25, 2013Chapter 12: Forms | 146
Listing 12-8 1
2
3
4
5
6publicfunction getDefaultOptions (array$options )
{
returnarray(
'validation_groups' =>array('registration' ),
);
}
Inboth ofthese cases, only theregistration validation group will beused tovalidate theunderlying
object.
Built-in Field Types
Symfony comes standard with alarge group offield types that cover allofthecommon form fields and
data types you'll encounter:
Text Fields
•text
•textarea
•email
•integer
•money
•number
•password
•percent
•search
•url
Choice Fields
•choice
•entity
•country
•language
•locale
•timezone
Date and Time Fields
•date
•datetime
•time
•birthday
Other Fields
•checkbox
•file
•radio
PDF brought to you by
generated on November 25, 2013Chapter 12: Forms | 147
Listing 12-9Field Groups
•collection
•repeated
Hidden Fields
•hidden
•csrf
Base Fields
•field
•form
You canalso create your own custom field types. This topic iscovered inthe"How toCreate aCustom
Form Field Type " article of the cookbook.
Field Type Options
Each field type hasanumber ofoptions that canbeused toconfigure it.Forexample, thedueDate field
iscurrently being rendered as3select boxes. However, thedate field canbeconfigured toberendered as
a single text box (where the user would enter the date as a string in the box):
1->add('dueDate' ,'date',array('widget' =>'single_text' ))
Each field type hasanumber ofdifferent options that canbepassed toit.Many ofthese arespecific to
the field type and details can be found in the documentation for each type.
The required option
The most common option istherequired option, which canbeapplied toanyfield. Bydefault,
therequired option issettotrue,meaning that HTML5-ready browsers will apply client-side
validation ifthefield isleftblank. Ifyou don't want thisbehavior, either settherequired option
on your field to falseordisable HTML5 validation .
Also note that setting therequired option totruewill not result inserver-side validation tobe
applied. Inother words, ifauser submits ablank value forthefield (either with anoldbrowser or
web service, forexample), itwillbeaccepted asavalid value unless you useSymfony's NotBlank
orNotNullvalidation constraint.
Inother words, therequired option is"nice", buttrue server-side validation should always be
used.
PDF brought to you by
generated on November 25, 2013Chapter 12: Forms | 148
Listing 12-10
Listing 12-11The labeloption
The label for the form field can be set using the labeloption, which can be applied to any field:
1
2
3
4->add('dueDate' ,'date',array(
'widget' =>'single_text' ,
'label' =>'Due Date' ,
))
The label for a field can also be set in the template rendering the form, see below.
Field Type Guessing
Now that you've added validation metadata totheTaskclass, Symfony already knows abitabout your
fields. Ifyou allow it,Symfony can"guess" thetype ofyour field and setitupforyou. Inthisexample,
Symfony can guess from thevalidation rules that both thetaskfield isanormal textfield and the
dueDatefield is a datefield:
1
2
3
4
5
6
7
8
9publicfunction newAction ()
{
$task=newTask();
$form=$this->createFormBuilder ($task)
->add('task')
->add('dueDate' ,null,array('widget' =>'single_text' ))
->getForm();
}
The "guessing" isactivated when youomit thesecond argument totheadd()method (orifyoupass null
toit).Ifyou pass anoptions array asthethird argument (done fordueDate above), these options are
applied to the guessed field.
Ifyour form uses aspecific validation group, thefield type guesser willstillconsider allvalidation
constraints when guessing your field types (including constraints that arenotpart ofthevalidation
group(s) being used).
Field Type Options Guessing
Inaddition toguessing the"type" forafield, Symfony canalso trytoguess thecorrect values ofanumber
of field options.
When these options areset,thefield willberendered with special HTML attributes that provide
forHTML5 client-side validation. However, itdoesn't generate the equivalent server-side
constraints (e.g. Assert\MaxLength ).And though you'll need tomanually add your server-side
validation, these field type options can then be guessed from that information.
•required :The required option canbeguessed based onthevalidation rules (i.e. isthefield
NotBlank orNotNull)ortheDoctrine metadata (i.e.isthefield nullable ).This isvery useful,
as your client-side validation will automatically match your validation rules.
PDF brought to you by
generated on November 25, 2013Chapter 12: Forms | 149
Listing 12-12
Listing 12-13
Listing 12-14•max_length :Ifthefield issome sort oftext field, then themax_length option canbeguessed
from thevalidation constraints (ifMaxLength orMaxisused) orfrom theDoctrine metadata
(via the field's length).
These field options areonly guessed ifyou're using Symfony toguess thefield type (i.e. omit or
pass nullas the second argument to add()).
Ifyou'd liketochange oneoftheguessed values, youcanoverride itbypassing theoption intheoptions
field array:
1->add('task',null,array('max_length' =>4))
Rendering a Form in a Template
Sofar,you've seen how anentire form canberendered with justonelineofcode. Ofcourse, you'll usually
need much more flexibility when rendering:
1
2
3
4
5
6
7
8
9
10
11{# src/Acme/TaskBundle/Resources/views/Default/new.html.twig #}
<formaction="{{path('task_new' )}}"method="post"{{form_enctype (form)}}>
{{form_errors (form)}}
{{form_row (form.task )}}
{{form_row (form.dueDate )}}
{{form_rest (form)}}
<inputtype="submit" />
</form>
Take a look at each part:
•form_enctype(form) -Ifatleast one field isafileupload field, this renders theobligatory
enctype="multipart/form-data" ;
•form_errors(form) -Renders any errors global tothewhole form (field-specific errors are
displayed next to each field);
•form_row(form.dueDate) -Renders thelabel, anyerrors, andtheHTML form widget forthe
given field (e.g. dueDate) inside, by default, a divelement;
•form_rest(form) -Renders anyfields that have notyetbeen rendered. It'susually agood idea
toplace acalltothis helper atthebottom ofeach form (incase you forgot tooutput afield
ordon't want tobother manually rendering hidden fields). This helper isalso useful fortaking
advantage of the automatic CSRF Protection .
The majority ofthework isdone bytheform_row helper, which renders thelabel, errors and HTML
form widget ofeach field inside adivtagbydefault. IntheForm Theming section, you'll learn how the
form_row output can be customized on many different levels.
You can access the current data of your form via form.vars.value :
1{{form.vars.value.task }}
PDF brought to you by
generated on November 25, 2013Chapter 12: Forms | 150
Listing 12-15
Listing 12-16
Listing 12-17
Listing 12-18
Listing 12-19Rendering each Field by Hand
The form_row helper isgreat because you can very quickly render each field ofyour form (and the
markup used forthe"row" canbecustomized aswell). Butsince lifeisn't always sosimple, youcanalso
render each field entirely byhand. The end-product ofthefollowing isthesame aswhen you used the
form_row helper:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15{{form_errors (form)}}
<div>
{{form_label (form.task )}}
{{form_errors (form.task )}}
{{form_widget (form.task )}}
</div>
<div>
{{form_label (form.dueDate )}}
{{form_errors (form.dueDate )}}
{{form_widget (form.dueDate )}}
</div>
{{form_rest (form)}}
If the auto-generated label for a field isn't quite right, you can explicitly specify it:
1{{form_label (form.task ,'Task Description' )}}
Some field types have additional rendering options that canbepassed tothewidget. These options are
documented with each type, butonecommon options isattr,which allows youtomodify attributes on
the form element. The following would add the task_field class to the rendered input text field:
1{{form_widget (form.task ,{'attr':{'class':'task_field' }})}}
Ifyou need torender form fields "byhand" then you canaccess individual values forfields such asthe
id,nameandlabel. For example to get the id:
1{{form.task.vars.id }}
To get the value used for the form field's name attribute you need to use the full_name value:
1{{form.task.vars.full_name }}
Twig Template Function Reference
Ifyou're using Twig, afullreference oftheform rendering functions isavailable inthereference manual .
Read this to know everything about the helpers available and the options that can be used with each.
Creating Form Classes
Asyou've seen, aform canbecreated and used directly inacontroller. However, abetter practice is
tobuild theform inaseparate, standalone PHP class, which can then bereused anywhere inyour
application. Create a new class that will house the logic for building the task form:
PDF brought to you by
generated on November 25, 2013Chapter 12: Forms | 151
Listing 12-20
Listing 12-21
Listing 12-221
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19// src/Acme/TaskBundle/Form/Type/TaskType.php
namespace Acme\TaskBundle\Form\Type ;
useSymfony\Component\Form\AbstractType ;
useSymfony\Component\Form\FormBuilder ;
classTaskType extends AbstractType
{
publicfunction buildForm (FormBuilder $builder ,array$options )
{
$builder ->add('task');
$builder ->add('dueDate' ,null,array('widget' =>'single_text' ));
}
publicfunction getName()
{
return'task';
}
}
This new class contains allthedirections needed tocreate thetask form (note that thegetName() method
should return aunique identifier forthisform "type"). Itcanbeused toquickly build aform object inthe
controller:
1
2
3
4
5
6
7
8
9
10
11
12// src/Acme/TaskBundle/Controller/DefaultController.php
// add this new use statement at the top of the class
useAcme\TaskBundle\Form\Type\TaskType ;
publicfunction newAction ()
{
$task=...;
$form=$this->createForm (newTaskType (),$task);
// ...
}
Placing theform logic into itsown class means that theform canbeeasily reused elsewhere inyour
project. This is the best way to create forms, but the choice is ultimately up to you.
Setting the data_class
Every form needs toknow the name ofthe class that holds the underlying data (e.g.
Acme\TaskBundle\Entity\Task ).Usually, thisisjustguessed based offoftheobject passed tothe
second argument tocreateForm (i.e.$task).Later, when youbegin embedding forms, thiswillno
longer besufficient. So,while notalways necessary, it'sgenerally agood idea toexplicitly specify
thedata_class option by adding the following to your form type class:
1
2
3
4
5
6publicfunction getDefaultOptions (array$options )
{
returnarray(
'data_class' =>'Acme\TaskBundle\Entity\Task' ,
);
}
PDF brought to you by
generated on November 25, 2013Chapter 12: Forms | 152
Listing 12-23
Listing 12-24
Listing 12-25
Listing 12-26When mapping forms toobjects, allfields aremapped. Any fields ontheform that donotexist on
the mapped object will cause an exception to be thrown.
Incases where you need extra fields intheform (for example: a"doyou agree with these terms"
checkbox) that will notbemapped totheunderlying object, you need tosettheproperty_path
option to false:
1
2
3
4
5publicfunction buildForm (FormBuilder $builder ,array$options )
{
$builder ->add('task');
$builder ->add('dueDate' ,null,array('property_path' =>false));
}
Additionally, ifthere areanyfields ontheform that aren't included inthesubmitted data, those
fields will be explicitly set to null.
The field data can be accessed in a controller with:
1$form->get('dueDate' )->getData();
Forms and Doctrine
The goal ofaform istotranslate data from anobject (e.g. Task)toanHTML form and then translate
user-submitted data back totheoriginal object. Assuch, thetopic ofpersisting theTaskobject tothe
database isentirely unrelated tothetopic offorms. But, ifyou've configured theTaskclass tobepersisted
viaDoctrine (i.e. you've added mapping metadata forit),then persisting itafter aform submission canbe
done when the form is valid:
1
2
3
4
5
6
7if($form->isValid()){
$em=$this->getDoctrine ()->getEntityManager ();
$em->persist($task);
$em->flush();
return$this->redirect ($this->generateUrl ('task_success' ));
}
If, for some reason, you don't have access to your original $taskobject, you can fetch it from the form:
1$task=$form->getData();
For more information, see the Doctrine ORM chapter .
The keything tounderstand isthat when theform isbound, thesubmitted data istransferred tothe
underlying object immediately. Ifyouwant topersist that data, yousimply need topersist theobject itself
(which already contains the submitted data).
Embedded Forms
Often, you'll want tobuild aform that will include fields from many different objects. Forexample,
aregistration form may contain data belonging toaUserobject aswell asmany Address objects.
Fortunately, this is easy and natural with the form component.
PDF brought to you by
generated on November 25, 2013Chapter 12: Forms | 153
Listing 12-27
Listing 12-28
Listing 12-29Embedding a Single Object
Suppose that each Taskbelongs toasimple Category object. Start, ofcourse, bycreating theCategory
object:
1
2
3
4
5
6
7
8
9
10
11
12// src/Acme/TaskBundle/Entity/Category.php
namespace Acme\TaskBundle\Entity ;
useSymfony\Component\Validator\Constraints asAssert;
classCategory
{
/**
* @Assert\NotBlank()
*/
public$name;
}
Next, add a new category property to the Taskclass:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23// ...
classTask
{
// ...
/**
* @Assert\Type(type="Acme\TaskBundle\Entity\Category")
*/
protected $category ;
// ...
publicfunction getCategory ()
{
return$this->category ;
}
publicfunction setCategory (Category $category =null)
{
$this->category =$category ;
}
}
Now that your application hasbeen updated toreflect thenew requirements, create aform class sothat
aCategory object can be modified by the user:
1
2
3
4
5
6
7
8
9
10
11// src/Acme/TaskBundle/Form/Type/CategoryType.php
namespace Acme\TaskBundle\Form\Type ;
useSymfony\Component\Form\AbstractType ;
useSymfony\Component\Form\FormBuilder ;
classCategoryType extends AbstractType
{
publicfunction buildForm (FormBuilder $builder ,array$options )
{
$builder ->add('name');
PDF brought to you by
generated on November 25, 2013Chapter 12: Forms | 154
Listing 12-30
Listing 12-3112
13
14
15
16
17
18
19
20
21
22
23
24
25}
publicfunction getDefaultOptions (array$options )
{
returnarray(
'data_class' =>'Acme\TaskBundle\Entity\Category' ,
);
}
publicfunction getName()
{
return'category' ;
}
}
The end goal istoallow theCategory ofaTasktobemodified right inside thetask form itself. To
accomplish this, add acategory field totheTaskType object whose type isaninstance ofthenew
CategoryType class:
1
2
3
4
5
6publicfunction buildForm (FormBuilder $builder ,array$options )
{
// ...
$builder ->add('category' ,newCategoryType ());
}
The fields from CategoryType cannow berendered alongside those from theTaskType class. Render the
Category fields in the same way as the original Taskfields:
1
2
3
4
5
6
7
8
9{# ... #}
<h3>Category </h3>
<divclass="category" >
{{form_row (form.category.name )}}
</div>
{{form_rest (form)}}
{# ... #}
When theuser submits theform, thesubmitted data fortheCategory fields areused toconstruct an
instance of Category , which is then set on the category field of the Taskinstance.
The Category instance isaccessible naturally via$task->getCategory() and canbepersisted tothe
database or used however you need.
Embedding a Collection of Forms
You canalso embed acollection offorms into oneform (imagine aCategory form with many Product
sub-forms). This is done by using the collection field type.
Formore information seethe"How toEmbed aCollection ofForms "cookbook entry and thecollection
field type reference.
PDF brought to you by
generated on November 25, 2013Chapter 12: Forms | 155
Listing 12-32
Listing 12-33Form Theming
Every part ofhow aform isrendered canbecustomized. You're free tochange how each form "row"
renders, change themarkup used torender errors, oreven customize how atextarea tagshould be
rendered. Nothing is off-limits, and different customizations can be used in different places.
Symfony uses templates torender each and every part ofaform, such aslabeltags, inputtags, error
messages and everything else.
InTwig, each form "fragment" isrepresented byaTwig block. Tocustomize any part ofhow aform
renders, you just need to override the appropriate block.
InPHP, each form "fragment" isrendered viaanindividual template file.Tocustomize anypart ofhow a
form renders, you just need to override the existing template by creating a new one.
Tounderstand how this works, customize theform_row fragment and add aclass attribute tothediv
element that surrounds each row. To do this, create a new template file that will store the new markup:
1
2
3
4
5
6
7
8
9
10{# src/Acme/TaskBundle/Resources/views/Form/fields.html.twig #}
{%blockfield_row %}
{%spaceless %}
<divclass="form_row" >
{{form_label (form)}}
{{form_errors (form)}}
{{form_widget (form)}}
</div>
{%endspaceless %}
{%endblock field_row %}
The field_row form fragment isused when rendering most fields viatheform_row function. Totellthe
form component touseyour new field_row fragment defined above, addthefollowing tothetopofthe
template that renders the form:
{# src/Acme/TaskBundle/Resources/views/Default/new.html.twig #}
{% form_theme form 'AcmeTaskBundle:Form:fields.html.twig' %}
{% form_theme form 'AcmeTaskBundle:Form:fields.html.twig'
'AcmeTaskBundle:Form:fields2.html.twig' %}
<form ...>
The form_theme tag(inTwig) "imports" thefragments defined inthegiven template anduses them when
rendering theform. Inother words, when theform_row function iscalled later inthistemplate, itwilluse
thefield_row block from your custom theme (instead ofthedefault field_row block that ships with
Symfony).
Your custom theme does nothave tooverride alltheblocks. When rendering ablock which isnot
overridden inyour custom theme, thetheming engine will fallback totheglobal theme (defined atthe
bundle level).
Ifseveral custom themes areprovided they willbesearched inthelisted order before falling back tothe
global theme.
Tocustomize anyportion ofaform, youjustneed tooverride theappropriate fragment. Knowing exactly
which block or file to override is the subject of the next section.
For a more extensive discussion, see How to customize Form Rendering .
PDF brought to you by
generated on November 25, 2013Chapter 12: Forms | 156
Form Fragment Naming
InSymfony, every part ofaform that isrendered -HTML form elements, errors, labels, etc-isdefined in
a base theme, which is a collection of blocks in Twig and a collection of template files in PHP.
InTwig, every block needed isdefined inasingle template file(form_div_layout.html.twig2)that lives
inside theTwig Bridge3.Inside thisfile,youcanseeevery block needed torender aform andevery default
field type.
InPHP, thefragments areindividual template files. Bydefault they arelocated intheResources/ views/
Form directory of the framework bundle ( view on GitHub4).
Each fragment name follows thesame basic pattern and isbroken upinto two pieces, separated bya
single underscore character ( _). A few examples are:
•field_row - used by form_row to render most fields;
•textarea_widget - used by form_widget to render a textarea field type;
•field_errors - used by form_errors to render errors for a field;
Each fragment follows thesame basic pattern: type_part .The typeportion corresponds tothefield type
being rendered (e.g. textarea ,checkbox ,date,etc) whereas thepartportion corresponds towhat is
being rendered (e.g. label,widget,errors,etc). Bydefault, there are4possible parts ofaform that can
be rendered:
label (e.g. field_label ) renders the field's label
widget (e.g. field_widget ) renders the field's HTML representation
errors (e.g. field_errors ) renders the field's errors
row (e.g. field_row ) renders the field's entire row (label, widget & errors)
There areactually 3other parts -rows,rest,and enctype -butyou should rarely ifever need to
worry about overriding them.
Byknowing thefield type (e.g. textarea )and which part youwant tocustomize (e.g. widget),youcan
construct the fragment name that needs to be overridden (e.g. textarea_widget ).
Template Fragment Inheritance
Insome cases, thefragment you want tocustomize will appear tobemissing. Forexample, there isno
textarea_errors fragment inthedefault themes provided with Symfony. Sohow aretheerrors fora
textarea field rendered?
The answer is:viathefield_errors fragment. When Symfony renders theerrors foratextarea type, it
looks first foratextarea_errors fragment before falling back tothefield_errors fragment. Each field
type hasaparent type (the parent type oftextarea isfield),and Symfony uses thefragment forthe
parent type if the base fragment doesn't exist.
So,tooverride theerrors foronly textarea fields, copy thefield_errors fragment, rename itto
textarea_errors and customize it.Tooverride thedefault error rendering forallfields, copy and
customize the field_errors fragment directly.
2.https://github.com/symfony/symfony/blob/2.0/src/Symfony/Bridge/Twig/Resources/views/Form/form_div_layout.html.twig
3.https://github.com/symfony/symfony/tree/master/src/Symfony/Bridge/Twig
4.https://github.com/symfony/symfony/tree/master/src/Symfony/Bundle/FrameworkBundle/Resources/views/Form
PDF brought to you by
generated on November 25, 2013Chapter 12: Forms | 157
Listing 12-34
Listing 12-35The "parent" type of each field type is available in the form type reference for each field type.
Global Form Theming
Intheabove example, youused theform_theme helper (inTwig) to"import" thecustom form fragments
into justthat form. You can also tell Symfony to import form customizations across your entire project.
Twig
Toautomatically include thecustomized blocks from thefields.html.twig template created earlier in
alltemplates, modify your application configuration file:
1
2
3
4
5
6# app/config/config.yml
twig:
form:
resources :
-'AcmeTaskBundle:Form:fields.html.twig'
# ...
Any blocks inside the fields.html.twig template are now used globally to define form output.
Customizing Form Output all in a Single File with Twig
InTwig, you canalso customize aform block right inside thetemplate where that customization
is needed:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15{%extends '::base.html.twig' %}
{# import "_self" as the form theme #}
{%form_theme form_self%}
{# make the form fragment customization #}
{%blockfield_row %}
{# custom field row output #}
{%endblock field_row %}
{%blockcontent %}
{# ... #}
{{form_row (form.task )}}
{%endblock %}
The {%form_theme form_self%}tagallows form blocks tobecustomized directly inside
thetemplate that will usethose customizations. Use this method toquickly make form output
customizations that will only ever be needed in a single template.
This {%form_theme form_self%}functionality willonly work ifyour template extends
another. If your template does not, you must point form_theme to a separate template.
PDF brought to you by
generated on November 25, 2013Chapter 12: Forms | 158
Listing 12-36
Listing 12-37PHP
Toautomatically include thecustomized templates from theAcme/TaskBundle/ Resources/ views/Form
directory created earlier in alltemplates, modify your application configuration file:
1
2
3
4
5
6
7# app/config/config.yml
framework :
templating :
form:
resources :
-'AcmeTaskBundle:Form'
# ...
Any fragments inside theAcme/TaskBundle/ Resources/ views/Formdirectory arenow used globally to
define form output.
CSRF Protection
CSRF -orCross-site request forgery5-isamethod bywhich amalicious user attempts tomake your
legitimate users unknowingly submit data that they don't intend tosubmit. Fortunately, CSRF attacks
can be prevented by using a CSRF token inside your forms.
The good news isthat, bydefault, Symfony embeds and validates CSRF tokens automatically foryou.
This means that you cantake advantage oftheCSRF protection without doing anything. Infact, every
form in this chapter has taken advantage of the CSRF protection!
CSRF protection works byadding ahidden field toyour form -called _tokenbydefault -that contains a
value that only youandyour user knows. This ensures that theuser -notsome other entity -issubmitting
the given data. Symfony automatically validates the presence and accuracy of this token.
The _tokenfield isahidden field and will beautomatically rendered ifyou include theform_rest()
function in your template, which ensures that all un-rendered fields are output.
The CSRF token can be customized on a form-by-form basis. For example:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17classTaskType extends AbstractType
{
// ...
publicfunction getDefaultOptions (array$options )
{
returnarray(
'data_class' =>'Acme\TaskBundle\Entity\Task' ,
'csrf_protection' =>true,
'csrf_field_name' =>'_token' ,
// a unique key to help generate the secret token
'intention' =>'task_item' ,
);
}
// ...
}
Todisable CSRF protection, setthecsrf_protection option tofalse. Customizations canalso bemade
globally in your project. For more information, see the form configuration reference section.
5.http://en.wikipedia.org/wiki/Cross-site_request_forgery
PDF brought to you by
generated on November 25, 2013Chapter 12: Forms | 159
Listing 12-38
Listing 12-39The intention option isoptional butgreatly enhances thesecurity ofthegenerated token by
making it different for each form.
Using a Form without a Class
Inmost cases, aform istied toanobject, and thefields oftheform getand store their data onthe
properties of that object. This is exactly what you've seen so far in this chapter with the Task class.
Butsometimes, youmay justwant touseaform without aclass, and getback anarray ofthesubmitted
data. This is actually really easy:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22// make sure you've imported the Request namespace above the class
useSymfony\Component\HttpFoundation\Request ;
// ...
publicfunction contactAction (Request $request )
{
$defaultData =array('message' =>'Type your message here' );
$form=$this->createFormBuilder ($defaultData )
->add('name','text')
->add('email','email')
->add('message' ,'textarea' )
->getForm();
if($request ->getMethod ()=='POST'){
$form->bindRequest ($request );
// data is an array with "name", "email", and "message" keys
$data=$form->getData();
}
// ... render the form
}
Bydefault, aform actually assumes that youwant towork with arrays ofdata, instead ofanobject. There
are exactly two ways that you can change this behavior and tie the form to an object instead:
1.Pass anobject when creating theform (asthefirst argument tocreateFormBuilder orthe
second argument to createForm );
2.Declare the data_class option on your form.
Ifyou don't doeither ofthese, then theform will return thedata asanarray. Inthis example, since
$defaultData isnotanobject (and nodata_class option isset), $form->getData() ultimately returns
an array.
You can also access POST values (in this case "name") directly through the request object, like so:
1$this->get('request' )->request->get('name');
Beadvised, however, that inmost cases using thegetData() method isabetter choice, since it
returns the data (usually an object) after it's been transformed by the form framework.
PDF brought to you by
generated on November 25, 2013Chapter 12: Forms | 160
Listing 12-40
Listing 12-41Adding Validation
The only missing piece isvalidation. Usually, when you call$form->isValid() ,theobject isvalidated
byreading theconstraints that youapplied tothat class. Butwithout aclass, how canyouaddconstraints
to the data of your form?
The answer istosetup theconstraints yourself, and pass them into your form. The overall approach is
covered a bit more in the validation chapter , but here's a short example:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16// import the namespaces above your controller class
useSymfony\Component\Validator\Constraints\Email ;
useSymfony\Component\Validator\Constraints\MinLength ;
useSymfony\Component\Validator\Constraints\Collection ;
$collectionConstraint =newCollection (array(
'name'=>newMinLength (5),
'email' =>newEmail(array('message' =>'Invalid email address' )),
));
// create a form, no default values, pass in the constraint option
$form=$this->createFormBuilder (null,array(
'validation_constraint' =>$collectionConstraint ,
))->add('email','email')
// ...
;
Now, when youcall$form->bindRequest($request) ,theconstraints setup here arerunagainst your form's
data. If you're using a form class, override the getDefaultOptions method to specify the option:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24namespace Acme\TaskBundle\Form\Type ;
useSymfony\Component\Form\AbstractType ;
useSymfony\Component\Form\FormBuilder ;
useSymfony\Component\Validator\Constraints\Email ;
useSymfony\Component\Validator\Constraints\MinLength ;
useSymfony\Component\Validator\Constraints\Collection ;
classContactType extends AbstractType
{
// ...
publicfunction getDefaultOptions (array$options )
{
$collectionConstraint =newCollection (array(
'name'=>newMinLength (5),
'email' =>newEmail(
array('message' =>'Invalid email address' )
),
));
returnarray('validation_constraint' =>$collectionConstraint );
}
}
Now, you have theflexibility tocreate forms -with validation -that return anarray ofdata, instead of
anobject. Inmost cases, it'sbetter -and certainly more robust -tobind your form toanobject. Butfor
simple forms, this is a great approach.
PDF brought to you by
generated on November 25, 2013Chapter 12: Forms | 161
Final Thoughts
You now know allofthebuilding blocks necessary tobuild complex and functional forms foryour
application. When building forms, keep inmind that thefirst goal ofaform istotranslate data from an
object (Task)toanHTML form sothat theuser canmodify that data. The second goal ofaform isto
take the data submitted by the user and to re-apply it to the object.
There's stillmuch more tolearn about thepowerful world offorms, such ashow tohandle fileuploads
with Doctrine orhow tocreate aform where adynamic number ofsub-forms canbeadded (e.g. atodo
listwhere youcankeep adding more fields viaJavascript before submitting). Seethecookbook forthese
topics. Also, besure tolean onthefield type reference documentation ,which includes examples ofhow to
use each field type and its options.
Learn more from the Cookbook
•How to handle File Uploads with Doctrine
•File Field Reference
•Creating Custom Field Types
•How to customize Form Rendering
•How to Dynamically Modify Forms Using Form Events
•How to use Data Transformers
PDF brought to you by
generated on November 25, 2013Chapter 12: Forms | 162
Chapter 13
Security
Security isatwo-step process whose goal istoprevent auser from accessing aresource that he/sheshould
not have access to.
Inthefirst step oftheprocess, thesecurity system identifies who theuser isbyrequiring theuser to
submit some sort ofidentification. This iscalled authentication ,and itmeans that thesystem istrying
to find out who you are.
Once thesystem knows who you are,thenext step istodetermine ifyou should have access toagiven
resource. This part oftheprocess iscalled authorization ,anditmeans that thesystem ischecking tosee
if you have privileges to perform a certain action.
Since thebest way tolearn istoseeanexample, start bysecuring your application with HTTP Basic
authentication.
PDF brought to you by
generated on November 25, 2013Chapter 13: Security | 163
Listing 13-1Symfony's security component1isavailable asastandalone PHP library foruseinside any PHP
project.
Basic Example: HTTP Authentication
The security component canbeconfigured viayour application configuration. Infact, most standard
security setups arejust amatter ofusing theright configuration. The following configuration tells
Symfony tosecure anyURL matching /admin/* and toasktheuser forcredentials using basic HTTP
authentication (i.e. the old-school username/password box):
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20# app/config/security.yml
security :
firewalls :
secured_area :
pattern:^/
anonymous :~
http_basic :
realm:"Secured DemoArea"
access_control :
-{path:^/admin,roles:ROLE_ADMIN }
providers :
in_memory :
users:
ryan:{password :ryanpass ,roles:'ROLE_USER' }
admin:{password :kitten,roles:'ROLE_ADMIN' }
encoders :
Symfony\Component\Security\Core\User\User :plaintext
Astandard Symfony distribution separates thesecurity configuration into aseparate file(e.g. app/
config/security.yml ).Ifyou don't have aseparate security file, you canputtheconfiguration
directly into your main config file (e.g. app/config/config.yml ).
The end result of this configuration is a fully-functional security system that looks like the following:
•There are two users in the system ( ryanandadmin);
•Users authenticate themselves via the basic HTTP authentication prompt;
•Any URL matching /admin/* is secured, and only the adminuser can access it;
•AllURLs notmatching /admin/* areaccessible byallusers (and theuser isnever prompted to
login).
Let's look briefly at how security works and how each part of the configuration comes into play.
How Security Works: Authentication and Authorization
Symfony's security system works bydetermining who auser is(i.e. authentication) andthen checking to
see if that user should have access to a specific resource or URL.
1.https://github.com/symfony/Security
PDF brought to you by
generated on November 25, 2013Chapter 13: Security | 164
Firewalls (Authentication)
When auser makes arequest toaURL that's protected byafirewall, thesecurity system isactivated. The
jobofthefirewall istodetermine whether ornottheuser needs tobeauthenticated, and ifhedoes, to
send a response back to the user initiating the authentication process.
Afirewall isactivated when theURL ofanincoming request matches theconfigured firewall's regular
expression pattern config value. Inthisexample, thepattern (^/)will match every incoming request.
The factthat thefirewall isactivated does notmean, however, that theHTTP authentication username
and password box isdisplayed forevery URL. Forexample, any user can access /foowithout being
prompted to authenticate.
This works first because thefirewall allows anonymous users viatheanonymous configuration parameter.
Inother words, thefirewall doesn't require theuser tofully authenticate immediately. And because no
special roleisneeded toaccess /foo(under theaccess_control section), therequest canbefulfilled
without ever asking the user to authenticate.
If you remove the anonymous key, the firewall will always make a user fully authenticate immediately.
Access Controls (Authorization)
Ifauser requests /admin/foo,however, the process behaves differently. This isbecause ofthe
access_control configuration section that says that anyURL matching theregular expression pattern
^/admin (i.e. /adminoranything matching /admin/* )requires theROLE_ADMIN role. Roles arethebasis
for most authorization: a user can access /admin/foo only if it has the ROLE_ADMIN role.
PDF brought to you by
generated on November 25, 2013Chapter 13: Security | 165
Like before, when theuser originally makes therequest, thefirewall doesn't askforanyidentification.
However, assoon astheaccess control layer denies theuser access (because theanonymous user doesn't
have theROLE_ADMIN role), thefirewall jumps into action and initiates theauthentication process. The
authentication process depends ontheauthentication mechanism you're using. Forexample, ifyou're
using theform login authentication method, theuser willberedirected tothelogin page. Ifyou're using
HTTP authentication, theuser willbesent anHTTP 401response sothat theuser sees theusername and
password box.
The user now hastheopportunity tosubmit itscredentials back totheapplication. Ifthecredentials are
valid, the original request can be re-tried.
PDF brought to you by
generated on November 25, 2013Chapter 13: Security | 166
Inthis example, theuser ryansuccessfully authenticates with thefirewall. Butsince ryandoesn't have
theROLE_ADMIN role, he'sstilldenied access to/admin/foo.Ultimately, thismeans that theuser willsee
some sort of message indicating that access has been denied.
When Symfony denies theuser access, theuser sees anerror screen andreceives a403HTTP status
code (Forbidden ).You cancustomize theaccess denied error screen byfollowing thedirections in
theError Pages cookbook entry to customize the 403 error page.
Finally, iftheadminuser requests /admin/foo,asimilar process takes place, except now, after being
authenticated, the access control layer will let the request pass through:
PDF brought to you by
generated on November 25, 2013Chapter 13: Security | 167
The request flow when auser requests aprotected resource isstraightforward, butincredibly flexible. As
you'll seelater, authentication canbehandled inanynumber ofways, including viaaform login, X.509
certificate, orbyauthenticating theuser viaTwitter. Regardless oftheauthentication method, therequest
flow is always the same:
1.A user accesses a protected resource;
2.The application redirects the user to the login form;
3.The user submits its credentials (e.g. username/password);
4.The firewall authenticates the user;
5.The authenticated user re-tries the original request.
The exact process actually depends alittle bitonwhich authentication mechanism you're using.
Forexample, when using form login, theuser submits itscredentials tooneURL that processes the
form (e.g. /login_check )andthen isredirected back totheoriginally requested URL (e.g. /admin/
foo).Butwith HTTP authentication, theuser submits itscredentials directly totheoriginal URL
(e.g. /admin/foo ) and then the page is returned to the user in that same request (i.e. no redirect).
These types of idiosyncrasies shouldn't cause you any problems, but they're good to keep in mind.
You'll also learn later how anything canbesecured inSymfony2, including specific controllers,
objects, or even PHP methods.
Using a Traditional Login Form
PDF brought to you by
generated on November 25, 2013Chapter 13: Security | 168
Listing 13-2
Listing 13-3
Listing 13-4Inthissection, you'll learn how tocreate abasic login form that continues tousethehard-coded
users that are defined in the security.yml file.
Toload users from thedatabase, please read How toload Security Users from theDatabase (the
Entity Provider) .Byreading that article and this section, you cancreate afulllogin form system
that loads users from the database.
Sofar,you've seen how toblanket your application beneath afirewall and then protect access tocertain
areas with roles. Byusing HTTP Authentication, you can effortlessly tapinto thenative username/
password boxoffered byallbrowsers. However, Symfony supports many authentication mechanisms out
of the box. For details on all of them, see the Security Configuration Reference .
Inthissection, you'll enhance thisprocess byallowing theuser toauthenticate viaatraditional HTML
login form.
First, enable form login under your firewall:
1
2
3
4
5
6
7
8
9# app/config/security.yml
security :
firewalls :
secured_area :
pattern:^/
anonymous :~
form_login :
login_path :/login
check_path :/login_check
Ifyou don't need tocustomize your login_path orcheck_path values (the values used here are
the default values), you can shorten your configuration:
1form_login :~
Now, when thesecurity system initiates theauthentication process, itwillredirect theuser tothelogin
form (/loginbydefault). Implementing thislogin form visually isyour job. First, create two routes: one
that will display thelogin form (i.e. /login)and one that will handle thelogin form submission (i.e.
/login_check ):
1
2
3
4
5
6# app/config/routing.yml
login:
pattern:/login
defaults :{_controller :AcmeSecurityBundle :Security :login}
login_check :
pattern:/login_check
You will notneed toimplement acontroller forthe/login_check URL asthefirewall will
automatically catch and process any form submitted tothis URL. It'soptional, buthelpful, to
create aroute sothat you canuseittogenerate theform submission URL inthelogin template
below.
Notice that thename oftheloginroute isn't important. What's important isthat theURL oftheroute
(/login)matches thelogin_path config value, asthat's where thesecurity system willredirect users that
need to login.
PDF brought to you by
generated on November 25, 2013Chapter 13: Security | 169
Listing 13-5
Listing 13-6Next, create the controller that will display the login form:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33// src/Acme/SecurityBundle/Controller/SecurityController.php;
namespace Acme\SecurityBundle\Controller ;
useSymfony\Bundle\FrameworkBundle\Controller\Controller ;
useSymfony\Component\Security\Core\SecurityContext ;
classSecurityController extends Controller
{
publicfunction loginAction ()
{
$request =$this->getRequest ();
$session =$request ->getSession ();
// get the login error if there is one
if($request ->attributes ->has(SecurityContext ::AUTHENTICATION_ERROR )){
$error=$request ->attributes ->get(
SecurityContext ::AUTHENTICATION_ERROR
);
}else{
$error=$session ->get(SecurityContext ::AUTHENTICATION_ERROR );
$session ->remove(SecurityContext ::AUTHENTICATION_ERROR );
}
return$this->render(
'AcmeSecurityBundle:Security:login.html.twig' ,
array(
// last username entered by the user
'last_username' =>$session ->get(SecurityContext ::LAST_USERNAME ),
'error' =>$error,
)
);
}
}
Don't letthis controller confuse you. Asyou'll seeinamoment, when theuser submits theform, the
security system automatically handles theform submission foryou. Iftheuser had submitted aninvalid
username orpassword, thiscontroller reads theform submission error from thesecurity system sothat it
can be displayed back to the user.
Inother words, your jobistodisplay thelogin form andanylogin errors that may have occurred, butthe
security system itself takes care ofchecking thesubmitted username and password and authenticating
the user.
Finally, create the corresponding template:
1
2
3
4
5
6
7
8
9
10
11
12
13{# src/Acme/SecurityBundle/Resources/views/Security/login.html.twig #}
{%iferror%}
<div>{{error.message }}</div>
{%endif%}
<formaction="{{path('login_check' )}}"method="post">
<labelfor="username" >Username: </label>
<inputtype="text"id="username" name="_username" value="{{last_username }}"/>
<labelfor="password" >Password: </label>
<inputtype="password" id="password" name="_password" />
{#
PDF brought to you by
generated on November 25, 2013Chapter 13: Security | 170
14
15
16
17
18
19If you want to control the URL the user is redirected to on success (more details
below)
<input type="hidden" name="_target_path" value="/account" />
#}
<button type="submit" >login</button>
</form>
The errorvariable passed into thetemplate isaninstance ofAuthenticationException2.Itmay
contain more information -oreven sensitive information -about theauthentication failure, souse
it wisely!
The form has very few requirements. First, bysubmitting the form to/login_check (via the
login_check route), thesecurity system will intercept theform submission and process theform for
you automatically. Second, thesecurity system expects thesubmitted fields tobecalled _username and
_password (these field names can be configured ).
And that's it!When you submit theform, thesecurity system will automatically check theuser's
credentials and either authenticate theuser orsend theuser back tothelogin form where theerror can
be displayed.
Let's review the whole process:
1.The user tries to access a resource that is protected;
2.The firewall initiates theauthentication process byredirecting theuser tothelogin form
(/login);
3.The /loginpage renders login form via the route and controller created in this example;
4.The user submits the login form to /login_check ;
5.The security system intercepts the request, checks the user's submitted credentials,
authenticates theuser ifthey arecorrect, and sends theuser back tothelogin form ifthey are
not.
Bydefault, ifthesubmitted credentials arecorrect, theuser will beredirected totheoriginal page that
was requested (e.g. /admin/foo).Iftheuser originally went straight tothelogin page, he'll beredirected
tothehomepage. This canbehighly customized, allowing you to,forexample, redirect theuser toa
specific URL.
Formore details onthisand how tocustomize theform login process ingeneral, seeHow tocustomize
your Form Login .
2.http://api.symfony.com/2.0/Symfony/Component/Security/Core/Exception/AuthenticationException.html
PDF brought to you by
generated on November 25, 2013Chapter 13: Security | 171
Listing 13-7
Listing 13-8
Listing 13-9Avoid Common Pitfalls
When setting up your login form, watch out for a few common pitfalls.
1. Create the correct routes
First, besure that you've defined the/loginand /login_check routes correctly and that they
correspond tothelogin_path and check_path config values. Amisconfiguration here canmean
that you're redirected toa404 page instead ofthelogin page, orthat submitting thelogin form
does nothing (you just see the login form over and over again).
2. Be sure the login page isn't secure
Also, besure that thelogin page does notrequire anyroles tobeviewed. Forexample, thefollowing
configuration -which requires theROLE_ADMIN role forallURLs (including the/loginURL), will
cause a redirect loop:
1
2access_control :
-{path:^/,roles:ROLE_ADMIN }
Removing the access control on the /loginURL fixes the problem:
1
2
3access_control :
-{path:^/login,roles:IS_AUTHENTICATED_ANONYMOUSLY }
-{path:^/,roles:ROLE_ADMIN }
Also, ifyour firewall does notallow foranonymous users, you'll need tocreate aspecial firewall
that allows anonymous users for the login page:
1
2
3
4
5
6
7firewalls :
login_firewall :
pattern:^/login$
anonymous :~
secured_area :
pattern:^/
form_login :~
3. Be sure ``/login_check`` is behind a firewall
Next, make sure that your check_path URL (e.g. /login_check )isbehind thefirewall you're
using foryour form login (inthis example, thesingle firewall matches allURLs, including
/login_check ).If/login_check doesn't match anyfirewall, you'll receive aUnabletofindthe
controller for path "/login_check" exception.
4. Multiple firewalls don't share security context
Ifyou're using multiple firewalls and you authenticate against one firewall, you will notbe
authenticated against any other firewalls automatically. Different firewalls arelike different
security systems. Todothisyou have toexplicitly specify thesame Firewall Context fordifferent
firewalls. But usually for most applications, having one main firewall is enough.
Authorization
The first step insecurity isalways authentication: theprocess ofverifying who theuser is.With Symfony,
authentication can bedone inany way -viaaform login, basic HTTP Authentication, oreven via
Facebook.
PDF brought to you by
generated on November 25, 2013Chapter 13: Security | 172
Listing 13-10Once theuser hasbeen authenticated, authorization begins. Authorization provides astandard and
powerful way todecide ifauser canaccess anyresource (aURL, amodel object, amethod call, ...).This
works by assigning specific roles to each user, and then requiring different roles for different resources.
The process of authorization has two different sides:
1.The user has a specific set of roles;
2.A resource requires a specific role in order to be accessed.
Inthis section, you'll focus onhow tosecure different resources (e.g. URLs, method calls, etc) with
different roles. Later, you'll learn more about how roles are created and assigned to users.
Securing Specific URL Patterns
The most basic way tosecure part ofyour application istosecure anentire URL pattern. You've seen
thisalready inthefirst example ofthischapter, where anything matching theregular expression pattern
^/adminrequires the ROLE_ADMIN role.
Understanding exactly how access_control works isvery important tomake sure your
application isproperly secured. SeeUnderstanding how access_control works below fordetailed
information.
You can define as many URL patterns as you need - each is a regular expression.
1
2
3
4
5
6# app/config/security.yml
security :
# ...
access_control :
-{path:^/admin/users ,roles:ROLE_SUPER_ADMIN }
-{path:^/admin,roles:ROLE_ADMIN }
Prepending thepath with ^ensures that only URLs beginning with thepattern arematched. For
example, apath ofsimply /admin(without the^)would correctly match /admin/foobutwould
also match URLs like /foo/admin .
Understanding how access_control works
Foreach incoming request, Symfony2 checks each access_control entry tofind onethat matches the
current request. Assoon asitfinds amatching access_control entry, itstops -only thefirst matching
access_control is used to enforce access.
Each access_control hasseveral options that configure two different things: (a)should theincoming
request match thisaccess control entry and (b)once itmatches, should some sort ofaccess restriction be
enforced :
(a) Matching Options
Symfony2 creates aninstance ofRequestMatcher3foreach access_control entry, which determines
whether ornotagiven access control should beused onthis request. The following access_control
options are used for matching:
•path
•ip
•host
•methods
3.http://api.symfony.com/2.0/Symfony/Component/HttpFoundation/RequestMatcher.html
PDF brought to you by
generated on November 25, 2013Chapter 13: Security | 173
Listing 13-11Take the following access_control entries as an example:
1
2
3
4
5
6
7
8# app/config/security.yml
security :
# ...
access_control :
-{path:^/admin,roles:ROLE_USER_IP ,ip:127.0.0.1 }
-{path:^/admin,roles:ROLE_USER_HOST ,host:symfony.com }
-{path:^/admin,roles:ROLE_USER_METHOD ,methods:[POST,PUT]}
-{path:^/admin,roles:ROLE_USER }
Foreach incoming request, Symfony will decide which access_control tousebased ontheURI, the
client's IPaddress, theincoming host name, and therequest method. Remember, thefirst rule that
matches isused, andifip,hostormethodarenotspecified foranentry, that access_control willmatch
anyip,hostormethod:
URI IP HOST METHOD access_control Why?
/admin/
user127.0.0.1 example.com GET rule #1
(ROLE_USER_IP )The URI matches path
and the IP matches ip.
/admin/
user127.0.0.1 symfony.com GET rule #1
(ROLE_USER_IP )The pathandipstill
match. This would also
match the
ROLE_USER_HOST entry,
butonly thefirst
access_control match is
used.
/admin/
user168.0.0.1 symfony.com GET rule #2
(ROLE_USER_HOST )The ipdoesn't match the
first rule, so the second
rule (which matches) is
used.
/admin/
user168.0.0.1 symfony.com POST rule #2
(ROLE_USER_HOST )The second rule still
matches. This would also
match the third rule
(ROLE_USER_METHOD ), but
only the first matched
access_control is used.
/admin/
user168.0.0.1 example.com POST rule #3
(ROLE_USER_METHOD )The ipandhostdon't
match the first two entries,
but the third -
ROLE_USER_METHOD -
matches and is used.
/admin/
user168.0.0.1 example.com GET rule #4 ( ROLE_USER )The ip,hostandmethod
prevent the first three
entries from matching. But
since the URI matches the
pathpattern of the
ROLE_USER entry, it is
used.
/foo 127.0.0.1 symfony.com POST matches no entries This doesn't match any
access_control rules,
since its URI doesn't
PDF brought to you by
generated on November 25, 2013Chapter 13: Security | 174
Listing 13-12match any of the path
values.
(b) Access Enforcement
Once Symfony2 has decided which access_control entry matches (ifany), itthen enforces access
restrictions based on the rolesandrequires_channel options:
•roleIfthe user does not have the given role(s), then access isdenied (internally, an
AccessDeniedException4is thrown);
•requires_channel Iftheincoming request's channel (e.g. http)does notmatch this value
(e.g. https), the user will be redirected (e.g. redirected from httptohttps, or vice versa).
Ifaccess isdenied, thesystem willtrytoauthenticate theuser ifnotalready (e.g. redirect theuser
tothelogin page). Iftheuser isalready logged in,the403"access denied" error page willbeshown.
SeeHow to customize Error Pages for more information.
Securing by IP
Certain situations may arise when you may need torestrict access toagiven path based onIP.This
isparticularly relevant inthecase ofEdge Side Includes (ESI), forexample. When ESIisenabled, it's
recommended tosecure access toESIURLs. Indeed, some ESImay contain some private content likethe
current logged inuser's information. Toprevent anydirect access tothese resources from aweb browser
(byguessing theESIURL pattern), theESIroute must besecured tobeonly visible from thetrusted
reverse proxy cache.
Here isanexample ofhow you might secure allESIroutes that start with agiven prefix, /esi,from
outside access:
1
2
3
4
5
6# app/config/security.yml
security :
# ...
access_control :
-{path:^/esi,roles:IS_AUTHENTICATED_ANONYMOUSLY ,ip:127.0.0.1 }
-{path:^/esi,roles:ROLE_NO_ACCESS }
Here is how it works when the path is /esi/something coming from the 10.0.0.1 IP:
•The first access control rule is ignored as the pathmatches but the ipdoes not;
•The second access control rule isenabled (the only restriction being thepathanditmatches):
astheuser cannot have theROLE_NO_ACCESS role asit'snotdefined, access isdenied (the
ROLE_NO_ACCESS role canbeanything that does notmatch anexisting role, itjustserves asa
trick to always deny access).
Now, if the same request comes from 127.0.0.1 :
•Now, thefirst access control rule isenabled asboth thepathand theipmatch: access is
allowed as the user always has the IS_AUTHENTICATED_ANONYMOUSLY role.
•The second access rule is not examined as the first rule matched.
4.http://api.symfony.com/2.0/Symfony/Component/Security/Core/Exception/AccessDeniedException.html
PDF brought to you by
generated on November 25, 2013Chapter 13: Security | 175
Listing 13-13
Listing 13-14
Listing 13-15Since Symfony 2.0.20/ 2.1.5, theTwig rendertagnow takes anabsolute urlinstead ofacontroller
logical path. This fixes animportant security issue (CVE-2012-64315)reported ontheofficial blog.
Ifyour application uses anolder version ofSymfony orstilluses theprevious rendertagsyntax,
you should upgrade as soon as possible.
Securing by Channel
You canalso require auser toaccess aURL viaSSL; just usetherequires_channel argument inany
access_control entries:
1
2
3
4
5# app/config/security.yml
security :
# ...
access_control :
-{path:^/cart/checkout ,roles:IS_AUTHENTICATED_ANONYMOUSLY ,requires_channel :
https}
Securing a Controller
Protecting your application based onURL patterns iseasy, butmay notbefine-grained enough incertain
cases. When necessary, you can easily force authorization from inside a controller:
1
2
3
4
5
6
7
8
9
10
11// ...
useSymfony\Component\Security\Core\Exception\AccessDeniedException ;
publicfunction helloAction ($name)
{
if(false===$this->get('security.context' )->isGranted ('ROLE_ADMIN' )){
thrownewAccessDeniedException ();
}
// ...
}
You canalso choose toinstall and usetheoptional JMSSecurityExtraBundle ,which cansecure your
controller using annotations:
1
2
3
4
5
6
7
8
9
10// ...
useJMS\SecurityExtraBundle\Annotation\Secure ;
/**
* @Secure(roles="ROLE_ADMIN")
*/
publicfunction helloAction ($name)
{
// ...
}
For more information, seethe JMSSecurityExtraBundle6documentation. Ifyou're using Symfony's
Standard Distribution, this bundle is available by default. If not, you can easily download and install it.
5.http://symfony.com/blog/security-release-symfony-2-0-20-and-2-1-5-released
6.http://jmsyst.com/bundles/JMSSecurityExtraBundle/1.0
PDF brought to you by
generated on November 25, 2013Chapter 13: Security | 176
Listing 13-16Securing other Services
Infact, anything inSymfony canbeprotected using astrategy similar totheone seen intheprevious
section. Forexample, suppose youhave aservice (i.e. aPHP class) whose jobistosend emails from one
user toanother. You canrestrict useofthis class -nomatter where it'sbeing used from -tousers that
have a specific role.
For more information onhow you can usethesecurity component tosecure different services and
methods in your application, see How to secure any Service or Method in your Application .
Access Control Lists (ACLs): Securing Individual Database Objects
Imagine you aredesigning ablog system where your users cancomment onyour posts. Now, you want
auser tobeable toedit hisown comments, butnotthose ofother users. Also, astheadmin user, you
yourself want to be able to edit allcomments.
The security component comes with anoptional access control list(ACL) system that youcanusewhen
you need tocontrol access toindividual instances ofanobject inyour system. Without ACL, you can
secure your system sothat only certain users canedit blog comments ingeneral. Butwith ACL, youcan
restrict or allow access on a comment-by-comment basis.
For more information, see the cookbook article: How to use Access Control Lists (ACLs) .
Users
Intheprevious sections, you learned how you canprotect different resources byrequiring asetofroles
for a resource. This section explores the other side of authorization: users.
Where do Users come from? ( User Providers )
During authentication, theuser submits asetofcredentials (usually ausername andpassword). The job
oftheauthentication system istomatch those credentials against some pool ofusers. Sowhere does this
list of users come from?
InSymfony2, users cancome from anywhere -aconfiguration file, adatabase table, aweb service, or
anything elseyoucandream up.Anything that provides oneormore users totheauthentication system
isknown asa"user provider". Symfony2 comes standard with thetwomost common user providers: one
that loads users from a configuration file and one that loads users from a database table.
Specifying Users in a Configuration File
The easiest way tospecify your users isdirectly inaconfiguration file.Infact, you've seen thisalready in
the example in this chapter.
1
2
3
4
5
6
7
8# app/config/security.yml
security :
# ...
providers :
default_provider :
users:
ryan:{password :ryanpass ,roles:'ROLE_USER' }
admin:{password :kitten,roles:'ROLE_ADMIN' }
This user provider iscalled the"in-memory" user provider, since theusers aren't stored anywhere ina
database. The actual user object is provided by Symfony ( User7).
7.http://api.symfony.com/2.0/Symfony/Component/Security/Core/User/User.html
PDF brought to you by
generated on November 25, 2013Chapter 13: Security | 177
Listing 13-17
Listing 13-18Any user provider canload users directly from configuration byspecifying theusersconfiguration
parameter and listing the users beneath it.
Ifyour username iscompletely numeric (e.g. 77)orcontains adash (e.g. user-name ),you should
use that alternative syntax when specifying users in YAML:
1
2
3users:
-{name:77,password :pass,roles:'ROLE_USER' }
-{name:user-name ,password :pass,roles:'ROLE_USER' }
Forsmaller sites, thismethod isquick andeasy tosetup. Formore complex systems, you'll want toload
your users from the database.
Loading Users from the Database
Ifyou'd liketoload your users viatheDoctrine ORM, youcaneasily dothisbycreating aUserclass and
configuring the entityprovider.
Ahigh-quality open source bundle isavailable that allows your users tobestored viatheDoctrine
ORM or ODM. Read more about the FOSUserBundle8on GitHub.
With this approach, you'll first create your own Userclass, which will be stored in the database.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18// src/Acme/UserBundle/Entity/User.php
namespace Acme\UserBundle\Entity ;
useSymfony\Component\Security\Core\User\UserInterface ;
useDoctrine\ORM\Mapping asORM;
/**
* @ORM\Entity
*/
classUserimplements UserInterface
{
/**
* @ORM\Column(type="string", length=255)
*/
protected $username ;
// ...
}
Asfarasthesecurity system isconcerned, theonly requirement foryour custom user class isthat it
implements theUserInterface9interface. This means that your concept ofa"user" canbeanything, as
long as it implements this interface.
8.https://github.com/FriendsOfSymfony/FOSUserBundle
9.http://api.symfony.com/2.0/Symfony/Component/Security/Core/User/UserInterface.html
PDF brought to you by
generated on November 25, 2013Chapter 13: Security | 178
Listing 13-19
Listing 13-20The user object will beserialized and saved inthe session during requests, therefore itis
recommended that youimplement theSerializable interface10inyour user object. This isespecially
important if your Userclass has a parent class with private properties.
Next, configure an entityuser provider, and point it to your Userclass:
1
2
3
4
5# app/config/security.yml
security :
providers :
main:
entity:{class:Acme\UserBundle\Entity\User ,property :username }
With theintroduction ofthisnew provider, theauthentication system willattempt toload aUserobject
from the database by using the username field of that class.
This example isjust meant toshow you thebasic idea behind theentityprovider. Forafull
working example, see How to load Security Users from the Database (the Entity Provider) .
Formore information oncreating your own custom provider (e.g. ifyou needed toload users viaaweb
service), see How to create a custom User Provider .
Encoding the User's Password
Sofar,forsimplicity, alltheexamples have stored theusers' passwords inplain text (whether those users
arestored inaconfiguration fileorinadatabase somewhere). Ofcourse, inarealapplication, you'll want
toencode your users' passwords forsecurity reasons. This iseasily accomplished bymapping your User
class tooneofseveral built-in "encoders". Forexample, tostore your users inmemory, butobscure their
passwords via sha1, do the following:
1
2
3
4
5
6
7
8
9
10
11
12
13
14# app/config/security.yml
security :
# ...
providers :
in_memory :
users:
ryan:{password :bb87a29949f3a1ee0559f8a57357487151281386 ,roles:
'ROLE_USER' }
admin:{password :74913f5cd5f61ec0bcfdb775414c2fb3d161b620 ,roles:
'ROLE_ADMIN' }
encoders :
Symfony\Component\Security\Core\User\User :
algorithm :sha1
iterations :1
encode_as_base64 :false
Bysetting theiterations to1and theencode_as_base64 tofalse, thepassword issimply runthrough
thesha1algorithm one time and without any extra encoding. You can now calculate thehashed
password either programmatically (e.g. hash('sha1', 'ryanpass') )orviasome online tool like
functions-online.com11
10. http://php.net/manual/en/class.serializable.php
11. http://www.functions-online.com/sha1.html
PDF brought to you by
generated on November 25, 2013Chapter 13: Security | 179
Listing 13-21
Listing 13-22
Listing 13-23
Listing 13-24Ifyou're creating your users dynamically (and storing them inadatabase), you canuseeven tougher
hashing algorithms and then rely onanactual password encoder object tohelp you encode passwords.
Forexample, suppose your User object isAcme\UserBundle\Entity\User (like intheabove example).
First, configure the encoder for that user:
1
2
3
4
5
6# app/config/security.yml
security :
# ...
encoders :
Acme\UserBundle\Entity\User :sha512
Inthiscase, you're using thestronger sha512algorithm. Also, since you've simply specified thealgorithm
(sha512)asastring, thesystem will default tohashing your password 5000 times inarow and then
encoding itasbase64. Inother words, thepassword hasbeen greatly obfuscated sothat thehashed
password can't be decoded (i.e. you can't determine the password from the hashed password).
Ifyou have some sort ofregistration form forusers, you'll need tobeable todetermine thehashed
password sothat you cansetitonyour user. Nomatter what algorithm you configure foryour user
object, the hashed password can always be determined in the following way from a controller:
1
2
3
4
5
6$factory =$this->get('security.encoder_factory' );
$user=newAcme\UserBundle\Entity\User ();
$encoder =$factory ->getEncoder ($user);
$password =$encoder ->encodePassword ('ryanpass' ,$user->getSalt());
$user->setPassword ($password );
Retrieving the User Object
After authentication, theUserobject ofthecurrent user can beaccessed viathesecurity.context
service. From inside a controller, this will look like:
1
2
3
4publicfunction indexAction ()
{
$user=$this->get('security.context' )->getToken ()->getUser();
}
Anonymous users aretechnically authenticated, meaning that theisAuthenticated() method of
ananonymous user object willreturn true. Tocheck ifyour user isactually authenticated, check
for the IS_AUTHENTICATED_FULLY role.
InaTwig Template this object can beaccessed via the app.user key, which calls the
GlobalVariables::getUser()12method:
1<p>Username: {{app.user.username }}</p>
Using Multiple User Providers
Each authentication mechanism (e.g. HTTP Authentication, form login, etc) uses exactly one user
provider, and will usethefirst declared user provider bydefault. Butwhat ifyou want tospecify afew
12.http://api.symfony.com/2.0/Symfony/Bundle/FrameworkBundle/Templating/GlobalVariables.html#getUser()
PDF brought to you by
generated on November 25, 2013Chapter 13: Security | 180
Listing 13-25
Listing 13-26
Listing 13-27users viaconfiguration and therest ofyour users inthedatabase? This ispossible bycreating anew
provider that chains the two together:
1
2
3
4
5
6
7
8
9
10# app/config/security.yml
security :
providers :
chain_provider :
providers :[in_memory ,user_db]
in_memory :
users:
foo:{password :test}
user_db:
entity:{class:Acme\UserBundle\Entity\User ,property :username }
Now, allauthentication mechanisms will usethechain_provider ,since it'sthefirst specified. The
chain_provider will, in turn, try to load the user from both the in_memory anduser_dbproviders.
Ifyou have noreasons toseparate your in_memory users from your user_db users, you can
accomplish this even more easily by combining the two sources into a single provider:
1
2
3
4
5
6
7# app/config/security.yml
security :
providers :
main_provider :
users:
foo:{password :test}
entity:{class:Acme\UserBundle\Entity\User ,property :username }
You canalso configure thefirewall orindividual authentication mechanisms touseaspecific provider.
Again, unless a provider is specified explicitly, the first provider is always used:
1
2
3
4
5
6
7
8
9
10# app/config/security.yml
security :
firewalls :
secured_area :
# ...
provider :user_db
http_basic :
realm:"Secured DemoArea"
provider :in_memory
form_login :~
Inthisexample, ifauser tries tologin viaHTTP authentication, theauthentication system will usethe
in_memory user provider. Butiftheuser tries tologin viatheform login, theuser_db provider will be
used (since it's the default for the firewall as a whole).
For more information about user provider and firewall configuration, seetheSecurity Configuration
Reference .
Roles
The idea ofa"role" iskeytotheauthorization process. Each user isassigned asetofroles andthen each
resource requires oneormore roles. Iftheuser hastherequired roles, access isgranted. Otherwise access
is denied.
PDF brought to you by
generated on November 25, 2013Chapter 13: Security | 181
Listing 13-28
Listing 13-29
Listing 13-30
Listing 13-31Roles arepretty simple, and arebasically strings that you caninvent and useasneeded (though roles
areobjects internally). Forexample, ifyou need tostart limiting access totheblog admin section of
your website, youcould protect that section using aROLE_BLOG_ADMIN role. This role doesn't need tobe
defined anywhere - you can just start using it.
Allroles must begin with theROLE_prefix tobemanaged bySymfony2. Ifyou define your own
roles with a dedicated Roleclass (more advanced), don't use the ROLE_prefix.
Hierarchical Roles
Instead ofassociating many roles tousers, you can define role inheritance rules bycreating arole
hierarchy:
1
2
3
4
5# app/config/security.yml
security :
role_hierarchy :
ROLE_ADMIN : ROLE_USER
ROLE_SUPER_ADMIN :[ROLE_ADMIN ,ROLE_ALLOWED_TO_SWITCH ]
Inthe above configuration, users with ROLE_ADMIN role will also have the ROLE_USER role. The
ROLE_SUPER_ADMIN role has ROLE_ADMIN ,ROLE_ALLOWED_TO_SWITCH and ROLE_USER (inherited from
ROLE_ADMIN ).
Logging Out
Usually, you'll also want your users tobeable tologout. Fortunately, thefirewall can handle this
automatically for you when you activate the logoutconfig parameter:
1
2
3
4
5
6
7
8
9# app/config/security.yml
security :
firewalls :
secured_area :
# ...
logout:
path:/logout
target:/
# ...
Once this isconfigured under your firewall, sending auser to/logout (orwhatever you configure the
pathtobe), will un-authenticate thecurrent user. The user will then besent tothehomepage (the
value defined bythetargetparameter). Both thepathand targetconfig parameters default towhat's
specified here. Inother words, unless you need tocustomize them, you can omit them entirely and
shorten your configuration:
1logout:~
Note that you willnotneed toimplement acontroller forthe/logout URL asthefirewall takes care of
everything. You may, however, want to create a route so that you can use it to generate the URL:
PDF brought to you by
generated on November 25, 2013Chapter 13: Security | 182
Listing 13-32
Listing 13-331
2
3# app/config/routing.yml
logout:
pattern:/logout
Once theuser hasbeen logged out, hewill beredirected towhatever path isdefined bythetarget
parameter above (e.g. thehomepage ).Formore information onconfiguring thelogout, seetheSecurity
Configuration Reference .
Access Control in Templates
If you want to check if the current user has a role inside a template, use the built-in helper function:
1
2
3{%ifis_granted ('ROLE_ADMIN' )%}
<ahref="...">Delete</a>
{%endif%}
Ifyou usethisfunction and arenotataURL where there isafirewall active, anexception willbe
thrown. Again, it'salmost always agood idea tohave amain firewall that covers allURLs (ashas
been shown in this chapter).
Access Control in Controllers
Ifyou want tocheck ifthecurrent user hasarole inyour controller, usetheisGranted()13method of
the security context:
1
2
3
4
5
6
7
8
9publicfunction indexAction ()
{
// show different content to admin users
if($this->get('security.context' )->isGranted ('ROLE_ADMIN' )){
// ... load admin content here
}
// ... load other regular content here
}
Afirewall must beactive oranexception willbethrown when theisGranted method iscalled. See
the note above about templates for more details.
Impersonating a User
Sometimes, it'suseful tobeable toswitch from oneuser toanother without having tologout and login
again (for instance when you aredebugging ortrying tounderstand abug auser sees that you can't
reproduce). This can be easily done by activating the switch_user firewall listener:
13.http://api.symfony.com/2.0/Symfony/Component/Security/Core/SecurityContext.html#isGranted()
PDF brought to you by
generated on November 25, 2013Chapter 13: Security | 183
Listing 13-34
Listing 13-35
Listing 13-36
Listing 13-37
Listing 13-38
Listing 13-391
2
3
4
5
6# app/config/security.yml
security :
firewalls :
main:
# ...
switch_user :true
Toswitch toanother user, justaddaquery string with the_switch_user parameter andtheusername as
the value to the current URL:
1http://example.com/somewhere?_switch_user=thomas
To switch back to the original user, use the special _exitusername:
1http://example.com/somewhere?_switch_user=_exit
During impersonation, theuser isprovided with aspecial role called ROLE_PREVIOUS_ADMIN .Ina
template, for instance, this role can be used to show a link to exit impersonation:
{% if is_granted('ROLE_PREVIOUS_ADMIN') %}
<a href="#book-{{ path('homepage', {_switch_user: '_exit'}) }}">Exit impersonation</a>
{% endif %}
Ofcourse, thisfeature needs tobemade available toasmall group ofusers. Bydefault, access isrestricted
tousers having theROLE_ALLOWED_TO_SWITCH role. The name ofthisrole canbemodified viatherole
setting. For extra security, you can also change the query parameter name via the parameter setting:
1
2
3
4
5
6# app/config/security.yml
security :
firewalls :
main:
# ...
switch_user :{role:ROLE_ADMIN ,parameter :_want_to_be_this_user }
Stateless Authentication
Bydefault, Symfony2 relies onacookie (the Session) topersist thesecurity context oftheuser. Butifyou
usecertificates orHTTP authentication forinstance, persistence isnotneeded ascredentials areavailable
foreach request. Inthat case, and ifyou don't need tostore anything else between requests, you can
activate the stateless authentication (which means that no cookie will be ever created by Symfony2):
1
2
3
4
5
6# app/config/security.yml
security :
firewalls :
main:
http_basic :~
stateless :true
If you use a form login, Symfony2 will create a cookie even if you set stateless totrue.
PDF brought to you by
generated on November 25, 2013Chapter 13: Security | 184
Final Words
Security canbeadeep and complex issue tosolve correctly inyour application. Fortunately, Symfony's
security component follows awell-proven security model based around authentication andauthorization .
Authentication, which always happens first, ishandled byafirewall whose jobistodetermine the
identity oftheuser through several different methods (e.g. HTTP authentication, login form, etc). In
thecookbook, you'll find examples ofother methods forhandling authentication, including how to
implement a "remember me" cookie functionality.
Once auser isauthenticated, theauthorization layer candetermine whether ornottheuser should have
access toaspecific resource. Most commonly, roles areapplied toURLs, classes ormethods and ifthe
current user doesn't have that role, access isdenied. The authorization layer, however, ismuch deeper,
and follows asystem of"voting" sothat multiple parties candetermine ifthecurrent user should have
access to a given resource. Find out more about this and other topics in the cookbook.
Learn more from the Cookbook
•Forcing HTTP/HTTPS
•Blacklist users by IP address with a custom voter
•Access Control Lists (ACLs)
•How to add "Remember Me" Login Functionality
PDF brought to you by
generated on November 25, 2013Chapter 13: Security | 185
Chapter 14
HTTP Cache
The nature ofrich web applications means that they're dynamic. No matter how efficient your
application, each request will always contain more overhead than serving a static file.
And formost Web applications, that's fine. Symfony2 islightning fast, and unless you're doing some
serious heavy-lifting, each request willcome back quickly without putting toomuch stress onyour server.
Butasyour sitegrows, that overhead canbecome aproblem. The processing that's normally performed
on every request should be done only once. This is exactly what caching aims to accomplish.
Caching on the Shoulders of Giants
The most effective way toimprove performance ofanapplication istocache thefulloutput ofapage and
then bypass theapplication entirely oneach subsequent request. Ofcourse, thisisn't always possible for
highly dynamic websites, orisit?Inthischapter, you'll seehow theSymfony2 cache system works and
why this is the best possible approach.
The Symfony2 cache system isdifferent because itrelies onthesimplicity andpower oftheHTTP cache
asdefined intheHTTP specification .Instead ofreinventing acaching methodology, Symfony2 embraces
thestandard that defines basic communication ontheWeb. Once you understand thefundamental
HTTP validation and expiration caching models, you'll be ready to master the Symfony2 cache system.
For the purposes of learning how to cache with Symfony2, the subject is covered in four steps:
1.Agateway cache ,orreverse proxy, isanindependent layer that sitsinfront ofyour application.
The reverse proxy caches responses asthey're returned from your application and answers
requests with cached responses before they hityour application. Symfony2 provides itsown
reverse proxy, but any reverse proxy can be used.
2.HTTP cache headers areused tocommunicate with thegateway cache and any other caches
between your application and theclient. Symfony2 provides sensible defaults and apowerful
interface for interacting with the cache headers.
3.HTTP expiration and validation arethetwo models used fordetermining whether cached
content isfresh (can bereused from the cache) orstale (should beregenerated bythe
application).
4.Edge Side Includes (ESI) allow HTTP cache tobeused tocache page fragments (even nested
fragments) independently. With ESI, you caneven cache anentire page for60minutes, butan
embedded sidebar for only 5 minutes.
PDF brought to you by
generated on November 25, 2013Chapter 14: HTTP Cache | 186
Since caching with HTTP isn't unique toSymfony, many articles already exist onthetopic. Ifyou're new
toHTTP caching, Ryan Tomayko's article Things Caches Do1ishighly recommended .Another in-depth
resource is Mark Nottingham's Cache Tutorial2.
Caching with a Gateway Cache
When caching with HTTP, thecache isseparated from your application entirely and sitsbetween your
application and the client making the request.
The jobofthecache istoaccept requests from theclient and pass them back toyour application. The
cache willalso receive responses back from your application andforward them ontotheclient. The cache
is the "middle-man" of the request-response communication between the client and your application.
Along theway, thecache willstore each response that isdeemed "cacheable" (See Introduction toHTTP
Caching ).Ifthesame resource isrequested again, thecache sends thecached response totheclient,
ignoring your application entirely.
This type ofcache isknown asaHTTP gateway cache andmany exist such asVarnish3,Squid inreverse
proxy mode4, and the Symfony2 reverse proxy.
Types of Caches
Butagateway cache isn't theonly type ofcache. Infact, theHTTP cache headers sent byyour application
are consumed and interpreted by up to three different types of caches:
•Browser caches :Every browser comes with itsown local cache that ismainly useful forwhen
you hit"back" orforimages and other assets. The browser cache isaprivate cache ascached
resources aren't shared with anyone else;
•Proxy caches :Aproxy isashared cache asmany people canbebehind asingle one. It'susually
installed by large corporations and ISPs to reduce latency and network traffic;
•Gateway caches :Like aproxy, it'salso ashared cache butontheserver side. Installed by
network administrators, it makes websites more scalable, reliable and performant.
Gateway caches aresometimes referred toasreverse proxy caches, surrogate caches, oreven HTTP
accelerators.
The significance ofprivate versus shared caches willbecome more obvious when caching responses
containing content that is specific to exactly one user (e.g. account information) is discussed.
Each response from your application willlikely gothrough oneorboth ofthefirst twocache types. These
caches are outside of your control but follow the HTTP cache directions set in the response.
Symfony2 Reverse Proxy
Symfony2 comes with areverse proxy (also called agateway cache) written inPHP. Enable itand
cacheable responses from your application willstart tobecached right away. Installing itisjustaseasy.
Each new Symfony2 application comes with apre-configured caching kernel (AppCache )that wraps the
default one ( AppKernel ). The caching Kernel isthe reverse proxy.
1.http://tomayko.com/writings/things-caches-do
2.http://www.mnot.net/cache_docs/
3.https://www.varnish-cache.org/
4.http://wiki.squid-cache.org/SquidFaq/ReverseProxy
PDF brought to you by
generated on November 25, 2013Chapter 14: HTTP Cache | 187
Listing 14-1
Listing 14-2
Listing 14-3To enable caching, modify the code of a front controller to use the caching kernel:
1
2
3
4
5
6
7
8
9
10
11
12// web/app.php
require_once __DIR__.'/../app/bootstrap.php.cache' ;
require_once __DIR__.'/../app/AppKernel.php' ;
require_once __DIR__.'/../app/AppCache.php' ;
useSymfony\Component\HttpFoundation\Request ;
$kernel =newAppKernel ('prod',false);
$kernel->loadClassCache ();
// wrap the default AppKernel with the AppCache one
$kernel =newAppCache ($kernel);
$kernel->handle(Request::createFromGlobals ())->send();
The caching kernel willimmediately actasareverse proxy -caching responses from your application and
returning them to the client.
The cache kernel hasaspecial getLog() method that returns astring representation ofwhat
happened inthecache layer. Inthedevelopment environment, useittodebug and validate your
cache strategy:
1error_log ($kernel->getLog());
The AppCache object hasasensible default configuration, butitcanbefinely tuned viaasetofoptions
you can set by overriding the getOptions()5method:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18// app/AppCache.php
useSymfony\Bundle\FrameworkBundle\HttpCache\HttpCache ;
classAppCache extends HttpCache
{
protected function getOptions ()
{
returnarray(
'debug' =>false,
'default_ttl' =>0,
'private_headers' =>array('Authorization' ,'Cookie' ),
'allow_reload' =>false,
'allow_revalidate' =>false,
'stale_while_revalidate' =>2,
'stale_if_error' =>60,
);
}
}
Unless overridden ingetOptions() ,thedebugoption will besettoautomatically bethedebug
value of the wrapped AppKernel .
Here is a list of the main options:
5.http://api.symfony.com/2.0/Symfony/Bundle/FrameworkBundle/HttpCache/HttpCache.html#getOptions()
PDF brought to you by
generated on November 25, 2013Chapter 14: HTTP Cache | 188
•default_ttl :The number ofseconds that acache entry should beconsidered fresh when no
explicit freshness information isprovided inaresponse. Explicit Cache-Control orExpires
headers override this value (default: 0);
•private_headers :Setofrequest headers that trigger "private" Cache-Control behavior on
responses that don't explicitly state whether theresponse ispublicorprivate viaaCache-
Controldirective. (default: Authorization andCookie);
•allow_reload :Specifies whether theclient canforce acache reload byincluding aCache-
Control "no-cache" directive intherequest. Setittotrueforcompliance with RFC 2616
(default: false);
•allow_revalidate :Specifies whether theclient canforce acache revalidate byincluding a
Cache-Control "max-age=0" directive intherequest. Setittotrueforcompliance with RFC
2616 (default: false);
•stale_while_revalidate :Specifies thedefault number ofseconds (the granularity isthe
second astheResponse TTL precision isasecond) during which thecache canimmediately
return astale response while itrevalidates itinthebackground (default: 2);this setting
isoverridden bythestale-while-revalidate HTTP Cache-Control extension (see RFC
5861);
•stale_if_error :Specifies thedefault number ofseconds (the granularity isthesecond)
during which thecache canserve astale response when anerror isencountered (default: 60).
This setting isoverridden bythestale-if-error HTTP Cache-Control extension (see RFC
5861).
Ifdebugistrue,Symfony2 automatically adds aX-Symfony-Cache header totheresponse containing
useful information about cache hits and misses.
Changing from one Reverse Proxy to Another
The Symfony2 reverse proxy isagreat tool tousewhen developing your website orwhen you
deploy your website toashared host where you cannot install anything beyond PHP code. But
being written inPHP, itcannot beasfast asaproxy written inC.That's why itishighly
recommended youuseVarnish orSquid onyour production servers ifpossible. The good news is
that theswitch from oneproxy server toanother iseasy and transparent asnocode modification
isneeded inyour application. Start easy with theSymfony2 reverse proxy and upgrade later to
Varnish when your traffic increases.
Formore information onusing Varnish with Symfony2, seetheHow touseVarnish cookbook
chapter.
The performance ofthe Symfony2 reverse proxy isindependent ofthe complexity ofthe
application. That's because theapplication kernel isonly booted when therequest needs tobe
forwarded to it.
Introduction to HTTP Caching
Totake advantage oftheavailable cache layers, your application must beable tocommunicate which
responses arecacheable andtherules that govern when/ how that cache should become stale. This isdone
by setting HTTP cache headers on the response.
Keep inmind that "HTTP" isnothing more than thelanguage (asimple text language) that web
clients (e.g. browsers) and web servers usetocommunicate with each other. HTTP caching isthe
part of that language that allows clients and servers to exchange information related to caching.
PDF brought to you by
generated on November 25, 2013Chapter 14: HTTP Cache | 189
Listing 14-4HTTP specifies four response cache headers that are looked at here:
•Cache-Control
•Expires
•ETag
•Last-Modified
The most important and versatile header istheCache-Control header, which isactually acollection of
various cache information.
Each of the headers will be explained in full detail in the HTTP Expiration and Validation section.
The Cache-Control Header
The Cache-Control header isunique inthat itcontains notone, butvarious pieces ofinformation about
the cacheability of a response. Each piece of information is separated by a comma:
Cache-Control: private, max-age=0, must-revalidate
Cache-Control: max-age=3600, must-revalidate
Symfony provides anabstraction around the Cache-Control header tomake itscreation more
manageable:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16// ...
useSymfony\Component\HttpFoundation\Response ;
$response =newResponse ();
// mark the response as either public or private
$response ->setPublic ();
$response ->setPrivate ();
// set the private or shared max age
$response ->setMaxAge (600);
$response ->setSharedMaxAge (600);
// set a custom Cache-Control directive
$response ->headers->addCacheControlDirective ('must-revalidate' ,true);
Public vs Private Responses
Both gateway and proxy caches areconsidered "shared" caches asthecached content isshared bymore
than one user. Ifauser-specific response were ever mistakenly stored byashared cache, itmight be
returned later toanynumber ofdifferent users. Imagine ifyour account information were cached and
then returned to every subsequent user who asked for their account page!
To handle this situation, every response may be set to be public or private:
•public : Indicates that the response may be cached by both private and shared caches;
•private :Indicates that allorpart oftheresponse message isintended forasingle user andmust
not be cached by a shared cache.
PDF brought to you by
generated on November 25, 2013Chapter 14: HTTP Cache | 190
Symfony conservatively defaults each response tobeprivate. Totake advantage ofshared caches (like the
Symfony2 reverse proxy), the response will need to be explicitly set as public.
Safe Methods
HTTP caching only works for"safe" HTTP methods (like GET and HEAD). Being safe means that
you never change theapplication's state ontheserver when serving therequest (you canofcourse log
information, cache data, etc). This has two very reasonable consequences:
•You should never change thestate ofyour application when responding toaGET orHEAD
request. Even ifyou don't useagateway cache, thepresence ofproxy caches mean that any
GET or HEAD request may or may not actually hit your server;
•Don't expect PUT, POST orDELETE methods tocache. These methods aremeant tobeused
when mutating thestate ofyour application (e.g. deleting ablog post). Caching them would
prevent certain requests from hitting and mutating your application.
Caching Rules and Defaults
HTTP 1.1allows caching anything bydefault unless there isanexplicit Cache-Control header. In
practice, most caches donothing when requests have acookie, anauthorization header, useanon-safe
method (i.e. PUT, POST, DELETE), or when responses have a redirect status code.
Symfony2 automatically setsasensible andconservative Cache-Control header when none issetbythe
developer by following these rules:
•Ifnocache header isdefined (Cache-Control ,Expires,ETagorLast-Modified ),Cache-
Controlis set to no-cache , meaning that the response will not be cached;
•IfCache-Control isempty (but one oftheother cache headers ispresent), itsvalue issetto
private, must-revalidate ;
•Butifatleast one Cache-Control directive isset,and no'public' orprivate directives have
been explicitly added, Symfony2 adds theprivate directive automatically (except when s-
maxageis set).
HTTP Expiration and Validation
The HTTP specification defines two caching models:
•With theexpiration model6,you simply specify how long aresponse should beconsidered
"fresh" byincluding aCache-Control and/ oranExpires header. Caches that understand
expiration willnotmake thesame request until thecached version reaches itsexpiration time
and becomes "stale";
•When pages arereally dynamic (i.e. their representation changes often), thevalidation model7
isoften necessary. With this model, thecache stores theresponse, butasks theserver on
each request whether ornotthecached response isstillvalid. The application uses aunique
response identifier (the Etagheader) and/ oratimestamp (the Last-Modified header) tocheck
if the page has changed since being cached.
The goal ofboth models istonever generate thesame response twice byrelying onacache tostore and
return "fresh" responses.
6.http://tools.ietf.org/html/rfc2616#section-13.2
7.http://tools.ietf.org/html/rfc2616#section-13.3
PDF brought to you by
generated on November 25, 2013Chapter 14: HTTP Cache | 191
Listing 14-5
Listing 14-6Reading the HTTP Specification
The HTTP specification defines asimple butpowerful language inwhich clients and servers can
communicate. Asaweb developer, therequest-response model ofthespecification dominates your
work. Unfortunately, the actual specification document - RFC 26168- can be difficult to read.
There isanon-going effort (HTTP Bis9)torewrite theRFC 2616. Itdoes notdescribe anew version
ofHTTP, butmostly clarifies theoriginal HTTP specification. The organization isalso improved as
thespecification issplit into seven parts; everything related toHTTP caching canbefound intwo
dedicated parts ( P4 - Conditional Requests10andP6 - Caching: Browser and intermediary caches ).
Asaweb developer, you arestrongly urged toread thespecification. Itsclarity and power -even
more than tenyears after itscreation -isinvaluable. Don't beput-off bytheappearance ofthespec
- its contents are much more beautiful than its cover.
Expiration
The expiration model isthemore efficient andstraightforward ofthetwo caching models andshould be
used whenever possible. When aresponse iscached with anexpiration, thecache willstore theresponse
and return it directly without hitting the application until it expires.
The expiration model canbeaccomplished using oneoftwo, nearly identical, HTTP headers: Expires
orCache-Control .
Expiration with the ExpiresHeader
According totheHTTP specification, "the Expires header field gives thedate/ time after which the
response isconsidered stale." The Expires header canbesetwith thesetExpires() Response method.
It takes a DateTime instance as an argument:
1
2
3
4$date=newDateTime ();
$date->modify('+600 seconds' );
$response ->setExpires ($date);
The resulting HTTP header will look like this:
1Expires: Thu, 01 Mar 2011 16:00:00 GMT
The setExpires() method automatically converts thedate totheGMT timezone asrequired by
the specification.
Note that inHTTP versions before 1.1theorigin server wasn't required tosend theDateheader.
Consequently thecache (e.g. thebrowser) might need torelyonto hislocal clock toevaluate theExpires
header making thelifetime calculation vulnerable toclock skew. Another limitation oftheExpires
header isthat thespecification states that "HTTP/ 1.1servers should notsend Expires dates more than
one year in the future."
8.http://tools.ietf.org/html/rfc2616
9.http://tools.ietf.org/wg/httpbis/
10. http://tools.ietf.org/html/draft-ietf-httpbis-p4-conditional-12
PDF brought to you by
generated on November 25, 2013Chapter 14: HTTP Cache | 192
Listing 14-7
Listing 14-8
Listing 14-9Expiration with the Cache-Control Header
Because oftheExpires header limitations, most ofthetime, youshould usetheCache-Control header
instead. Recall that theCache-Control header isused tospecify many different cache directives. For
expiration, there aretwo directives, max-age and s-maxage .The first oneisused byallcaches, whereas
the second one is only taken into account by shared caches:
1
2
3
4
5
6// Sets the number of seconds after which the response
// should no longer be considered fresh
$response ->setMaxAge (600);
// Same as above but only for shared caches
$response ->setSharedMaxAge (600);
The Cache-Control header would take on the following format (it may have additional directives):
1Cache-Control: max-age=600, s-maxage=600
Validation
When aresource needs tobeupdated assoon asachange ismade totheunderlying data, theexpiration
model falls short. With theexpiration model, theapplication won't beasked toreturn theupdated
response until the cache finally becomes stale.
The validation model addresses thisissue. Under thismodel, thecache continues tostore responses. The
difference isthat, foreach request, thecache asks theapplication whether ornotthecached response is
stillvalid. Ifthecache isstillvalid, your application should return a304status code andnocontent. This
tells the cache that it's ok to return the cached response.
Under thismodel, you mainly save bandwidth astherepresentation isnotsent twice tothesame client
(a304response issent instead). Butifyoudesign your application carefully, youmight beable togetthe
bare minimum data needed tosend a304response andsave CPU also (see below foranimplementation
example).
The 304 status code means "Not Modified". It'simportant because with this status code the
response does notcontain theactual content being requested. Instead, theresponse issimply a
light-weight set of directions that tell cache that it should use its stored version.
Like with expiration, there aretwo different HTTP headers that canbeused toimplement thevalidation
model: ETagandLast-Modified .
Validation with the ETagHeader
The ETagheader isastring header (called the"entity-tag") that uniquely identifies onerepresentation of
thetarget resource. It'sentirely generated and setbyyour application sothat you cantell, forexample,
ifthe/aboutresource that's stored bythecache isup-to-date with what your application would return.
AnETagislikeafingerprint and isused toquickly compare iftwo different versions ofaresource are
equivalent. Like fingerprints, each ETagmust be unique across all representations of the same resource.
To see a simple implementation, generate the ETag as the md5 of the content:
1
2
3publicfunction indexAction ()
{
$response =$this->render('MyBundle:Main:index.html.twig' );
PDF brought to you by
generated on November 25, 2013Chapter 14: HTTP Cache | 193
Listing 14-104
5
6
7
8
9$response ->setETag(md5($response ->getContent ()));
$response ->setPublic ();// make sure the response is public/cacheable
$response ->isNotModified ($this->getRequest ());
return$response ;
}
The isNotModified()11method compares theETagsent with theRequest with theone setonthe
Response . If the two match, the method automatically sets the Response status code to 304.
This algorithm issimple enough and very generic, butyou need tocreate thewhole Response before
being able tocompute theETag, which issub-optimal. Inother words, itsaves onbandwidth, butnot
CPU cycles.
IntheOptimizing your Code with Validation section, you'll seehow validation can beused more
intelligently to determine the validity of a cache without doing so much work.
Symfony2 also supports weak ETags bypassing trueasthesecond argument tothesetETag()12
method.
Validation with the Last-Modified Header
The Last-Modified header isthesecond form ofvalidation. According totheHTTP specification,
"The Last-Modified header field indicates thedate and time atwhich theorigin server believes the
representation was lastmodified." Inother words, theapplication decides whether ornotthecached
content has been updated based on whether or not it's been updated since the response was cached.
For instance, you can usethelatest update date foralltheobjects needed tocompute theresource
representation as the value for the Last-Modified header value:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21publicfunction showAction ($articleSlug )
{
// ...
$articleDate =new\DateTime ($article ->getUpdatedAt ());
$authorDate =new\DateTime ($author->getUpdatedAt ());
$date=$authorDate >$articleDate ?$authorDate :$articleDate ;
$response ->setLastModified ($date);
// Set response as public. Otherwise it will be private by default.
$response ->setPublic ();
if($response ->isNotModified ($this->getRequest ())){
return$response ;
}
// ... do more work to populate the response with the full content
return$response ;
}
11.http://api.symfony.com/2.0/Symfony/Component/HttpFoundation/Response.html#isNotModified()
12.http://api.symfony.com/2.0/Symfony/Component/HttpFoundation/Response.html#setETag()
PDF brought to you by
generated on November 25, 2013Chapter 14: HTTP Cache | 194
Listing 14-11The isNotModified()13method compares theIf-Modified-Since header sent bytherequest with the
Last-Modified header setontheresponse. Ifthey areequivalent, theResponse willbesettoa304status
code.
The If-Modified-Since request header equals theLast-Modified header ofthelastresponse sent
totheclient fortheparticular resource. This ishow theclient and server communicate with each
other and decide whether or not the resource has been updated since it was cached.
Optimizing your Code with Validation
The main goal ofany caching strategy istolighten theload ontheapplication. Putanother way, the
lessyou doinyour application toreturn a304 response, thebetter. The Response::isNotModified()
method does exactly that by exposing a simple and efficient pattern:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34useSymfony\Component\HttpFoundation\Response ;
publicfunction showAction ($articleSlug )
{
// Get the minimum information to compute
// the ETag or the Last-Modified value
// (based on the Request, data is retrieved from
// a database or a key-value store for instance)
$article =...;
// create a Response with a ETag and/or a Last-Modified header
$response =newResponse ();
$response ->setETag($article ->computeETag ());
$response ->setLastModified ($article ->getPublishedAt ());
// Set response as public. Otherwise it will be private by default.
$response ->setPublic ();
// Check that the Response is not modified for the given Request
if($response ->isNotModified ($this->getRequest ())){
// return the 304 Response immediately
return$response ;
}else{
// do more work here - like retrieving more data
$comments =...;
// or render a template with the $response you've already started
return$this->render(
'MyBundle:MyController:article.html.twig' ,
array('article' =>$article ,'comments' =>$comments ),
$response
);
}
}
When theResponse isnotmodified, theisNotModified() automatically sets theresponse status code
to304,removes thecontent, and removes some headers that must notbepresent for304responses (see
setNotModified()14).
13.http://api.symfony.com/2.0/Symfony/Component/HttpFoundation/Response.html#isNotModified()
14.http://api.symfony.com/2.0/Symfony/Component/HttpFoundation/Response.html#setNotModified()
PDF brought to you by
generated on November 25, 2013Chapter 14: HTTP Cache | 195
Listing 14-12
Listing 14-13
Listing 14-14
Listing 14-15Varying the Response
Sofar,it'sbeen assumed that each URI hasexactly onerepresentation ofthetarget resource. Bydefault,
HTTP caching isdone byusing theURI oftheresource asthecache key. Iftwo people request thesame
URI of a cacheable resource, the second person will receive the cached version.
Sometimes thisisn't enough and different versions ofthesame URI need tobecached based ononeor
more request header values. Forinstance, ifyou compress pages when theclient supports it,anygiven
URI hastwo representations: onewhen theclient supports compression, andonewhen itdoes not. This
determination is done by the value of the Accept-Encoding request header.
Inthiscase, you need thecache tostore both acompressed and uncompressed version oftheresponse
fortheparticular URI and return them based ontherequest's Accept-Encoding value. This isdone by
using theVaryresponse header, which isacomma-separated listofdifferent headers whose values trigger
a different representation of the requested resource:
1Vary: Accept-Encoding, User-Agent
This particular Varyheader would cache different versions ofeach resource based ontheURI and
the value of the Accept-Encoding andUser-Agent request header.
The Response object offers a clean interface for managing the Varyheader:
1
2
3
4
5// set one vary header
$response ->setVary('Accept-Encoding' );
// set multiple vary headers
$response ->setVary(array('Accept-Encoding' ,'User-Agent' ));
The setVary() method takes a header name or an array of header names for which the response varies.
Expiration and Validation
You canofcourse useboth validation andexpiration within thesame Response .Asexpiration wins over
validation, youcaneasily benefit from thebest ofboth worlds. Inother words, byusing both expiration
and validation, you can instruct thecache toserve thecached content, while checking back atsome
interval (the expiration) to verify that the content is still valid.
More Response Methods
The Response class provides many more methods related to the cache. Here are the most useful ones:
1
2
3
4
5// Marks the Response stale
$response ->expire();
// Force the response to return a proper 304 response with no content
$response ->setNotModified ();
Additionally, most cache-related HTTP headers can be set via the single setCache()15method:
15.http://api.symfony.com/2.0/Symfony/Component/HttpFoundation/Response.html#setCache()
PDF brought to you by
generated on November 25, 2013Chapter 14: HTTP Cache | 196
Listing 14-161
2
3
4
5
6
7
8
9// Set cache settings in one call
$response ->setCache (array(
'etag' =>$etag,
'last_modified' =>$date,
'max_age' =>10,
's_maxage' =>10,
'public' =>true,
// 'private'    => true,
));
Using Edge Side Includes
Gateway caches areagreat way tomake your website perform better. Butthey have onelimitation: they
canonly cache whole pages. Ifyoucan't cache whole pages orifparts ofapage has"more" dynamic parts,
you areoutofluck. Fortunately, Symfony2 provides asolution forthese cases, based onatechnology
called ESI16,orEdge Side Includes. Akamaï wrote this specification almost 10years ago, and itallows
specific parts of a page to have a different caching strategy than the main page.
The ESIspecification describes tags you can embed inyour pages tocommunicate with thegateway
cache. Only one tagisimplemented inSymfony2, include,asthis istheonly useful one outside of
Akamaï context:
1
2
3
4
5
6
7
8
9
10
11<!DOCTYPE html>
<html>
<body>
<!-- ... some content -->
<!-- Embed the content of another page here -->
<esi:include src="http://..." />
<!-- ... more content -->
</body>
</html>
Notice from theexample that each ESItaghasafully-qualified URL. AnESItagrepresents apage
fragment that can be fetched via the given URL.
When arequest ishandled, thegateway cache fetches theentire page from itscache orrequests itfrom
thebackend application. Iftheresponse contains oneormore ESItags, these areprocessed inthesame
way. Inother words, thegateway cache either retrieves theincluded page fragment from itscache or
requests thepage fragment from thebackend application again. When alltheESItags have been resolved,
the gateway cache merges each into the main page and sends the final content to the client.
Allofthis happens transparently atthegateway cache level (i.e. outside ofyour application). Asyou'll
see, ifyou choose totake advantage ofESItags, Symfony2 makes theprocess ofincluding them almost
effortless.
Using ESI in Symfony2
First, to use ESI, be sure to enable it in your application configuration:
16. http://www.w3.org/TR/esi-lang
PDF brought to you by
generated on November 25, 2013Chapter 14: HTTP Cache | 197
Listing 14-17
Listing 14-18
Listing 14-19
Listing 14-201
2
3
4# app/config/config.yml
framework :
# ...
esi:{enabled:true}
Now, suppose you have apage that isrelatively static, except foranews ticker atthebottom ofthe
content. With ESI, you can cache the news ticker independent of the rest of the page.
1
2
3
4
5
6
7
8publicfunction indexAction ()
{
$response =$this->render('MyBundle:MyController:index.html.twig' );
// set the shared max age - which also marks the response as public
$response ->setSharedMaxAge (600);
return$response ;
}
Inthis example, thefull-page cache hasalifetime oftenminutes. Next, include thenews ticker inthe
template byembedding anaction. This isdone viatherenderhelper (See Embedding Controllers formore
details).
Astheembedded content comes from another page (orcontroller forthat matter), Symfony2 uses the
standard renderhelper to configure ESI tags:
1{%renderurl('latest_news' ,{'max':5})with{},{'standalone' :true}%}
Since Symfony 2.0.20/ 2.1.5, theTwig rendertagnow takes anabsolute urlinstead ofacontroller
logical path. This fixes animportant security issue (CVE-2012-643117)reported ontheofficial
blog. Ifyour application uses anolder version ofSymfony orstill uses theprevious rendertag
syntax, you should upgrade as soon as possible.
The rendertagtakes theabsolute urltotheembedded action. This means that youneed todefine anew
route to the controller that you're embedding:
1
2
3
4
5# app/config/routing.yml
latest_news :
pattern:/esi/latest-news/{max}
defaults :{_controller :AcmeNewsBundle :News:news}
requirements :{max:\d+}
Unless youwant thisURL tobeaccessible totheoutside world, youshould useSymfony's firewall
tosecure it(byallowing access toyour reverse proxy's IPrange). SeetheSecuring byIPsection of
theSecurity Chapter for more information on how to do this.
The best practice istomount allyour ESIurlsonasingle prefix (e.g. /esi)ofyour choice. This has
twomain advantages. First, iteases themanagement ofESIurlsasyoucaneasily identify theroutes
used forESI. Second, iteases security management since securing allurls starting with thesame
prefix iseasier than securing each individual url.Seetheabove note formore details onsecuring
ESI URLs.
17. http://symfony.com/blog/security-release-symfony-2-0-20-and-2-1-5-released
PDF brought to you by
generated on November 25, 2013Chapter 14: HTTP Cache | 198
Listing 14-21Bysetting standalone totrueintherenderTwig tag, you tellSymfony2 that theaction should be
rendered asanESItag. You might bewondering why you would want touseahelper instead ofjust
writing theESItagyourself. That's because using ahelper makes your application work even ifthere is
no gateway cache installed.
When standalone isfalse(the default), Symfony2 merges theincluded page content within themain
onebefore sending theresponse totheclient. Butwhen standalone istrue,andifSymfony2 detects that
it'stalking toagateway cache that supports ESI, itgenerates anESIinclude tag.Butifthere isnogateway
cache orifitdoes notsupport ESI, Symfony2 willjustmerge theincluded page content within themain
one as it would have done were standalone set to false.
Symfony2 detects ifagateway cache supports ESI viaanother Akamaï specification that is
supported out of the box by the Symfony2 reverse proxy.
The embedded action can now specify its own caching rules, entirely independent of the master page.
1
2
3
4
5
6publicfunction newsAction ($max)
{
// ...
$response ->setSharedMaxAge (60);
}
With ESI, thefullpage cache willbevalid for600seconds, butthenews component cache willonly last
for 60 seconds.
One great advantage ofthiscaching strategy isthat youcanmake your application asdynamic asneeded
and at the same time, hit the application as little as possible.
Once you start using ESI, remember toalways usethes-maxage directive instead ofmax-age.As
thebrowser only ever receives theaggregated resource, itisnotaware ofthesub-components, and
so it will obey the max-agedirective and cache the entire page. And you don't want that.
The renderhelper supports two other useful options:
•alt:used asthealtattribute ontheESItag,which allows you tospecify analternative URL
to be used if the srccannot be found;
•ignore_errors :ifsettotrue, anonerror attribute will beadded totheESIwith avalue of
continue indicating that, intheevent ofafailure, thegateway cache will simply remove the
ESI tag silently.
Cache Invalidation
"There areonly two hard things inComputer Science: cache invalidation andnaming things."
--Phil Karlton
You should never need toinvalidate cached data because invalidation isalready taken into account
natively intheHTTP cache models. Ifyou usevalidation, you never need toinvalidate anything by
definition; and ifyou useexpiration and need toinvalidate aresource, itmeans that you settheexpires
date too far away in the future.
PDF brought to you by
generated on November 25, 2013Chapter 14: HTTP Cache | 199
Listing 14-22Since invalidation isatopic specific toeach type ofreverse proxy, ifyou don't worry about
invalidation, you can switch between reverse proxies without changing anything inyour
application code.
Actually, allreverse proxies provide ways topurge cached data, butyou should avoid them asmuch as
possible. The most standard way istopurge thecache foragiven URL byrequesting itwith thespecial
PURGEHTTP method.
Here is how you can configure the Symfony2 reverse proxy to support the PURGEHTTP method:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25// app/AppCache.php
// ...
useSymfony\Bundle\FrameworkBundle\HttpCache\HttpCache ;
useSymfony\Component\HttpFoundation\Request ;
useSymfony\Component\HttpFoundation\Response ;
classAppCache extends HttpCache
{
protected function invalidate (Request $request ,$catch=false)
{
if('PURGE' !==$request ->getMethod ()){
returnparent::invalidate ($request ,$catch);
}
$response =newResponse ();
if(!$this->getStore ()->purge($request ->getUri())){
$response ->setStatusCode (404,'Not purged' );
}else{
$response ->setStatusCode (200,'Purged' );
}
return$response ;
}
}
You must protect thePURGEHTTP method somehow toavoid random people purging your cached
data.
Summary
Symfony2 was designed tofollow theproven rules oftheroad: HTTP. Caching isnoexception.
Mastering theSymfony2 cache system means becoming familiar with theHTTP cache models and
using them effectively. This means that, instead ofrelying only onSymfony2 documentation and code
examples, youhave access toaworld ofknowledge related toHTTP caching andgateway caches such as
Varnish.
Learn more from the Cookbook
•How to use Varnish to speed up my Website
PDF brought to you by
generated on November 25, 2013Chapter 14: HTTP Cache | 200
Listing 15-1Chapter 15
Translations
The term "internationalization" (often abbreviated i18n1)refers totheprocess ofabstracting strings and
other locale-specific pieces outofyour application and into alayer where they canbetranslated and
converted based ontheuser's locale (i.e. language andcountry). Fortext, thismeans wrapping each with
a function capable of translating the text (or "message") into the language of the user:
1
2
3
4
5
6// text will *always* print out in English
echo'Hello World' ;
// text can be translated into the end-user's language or
// default to English
echo$translator ->trans('Hello World' );
The term locale refers roughly totheuser's language and country. Itcanbeanystring that your
application uses tomanage translations and other format differences (e.g. currency format). The
ISO639-12language code, anunderscore (_),then theISO3166 Alpha-23country code (e.g. fr_FR
for French/France) is recommended.
Inthis chapter, you'll learn how toprepare anapplication tosupport multiple locales and then how to
create translations for multiple locales. Overall, the process has several common steps:
1.Enable and configure Symfony's Translation component;
2.Abstract strings (i.e. "messages") by wrapping them in calls to the Translator ;
3.Create translation resources foreach supported locale that translate each message inthe
application;
4.Determine, set and manage the user's locale in the session.
1.http://en.wikipedia.org/wiki/Internationalization_and_localization
2.http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes
3.http://en.wikipedia.org/wiki/ISO_3166-1#Current_codes
PDF brought to you by
generated on November 25, 2013Chapter 15: Translations | 201
Listing 15-2
Listing 15-3
Listing 15-4Configuration
Translations arehandled byaTranslator service that uses theuser's locale tolookup and return
translated messages. Before using it, enable the Translator in your configuration:
1
2
3# app/config/config.yml
framework :
translator :{fallback :en}
The fallback option defines the fallback locale when a translation does not exist in the user's locale.
When atranslation does notexist foralocale, thetranslator first tries tofind thetranslation forthe
language (frifthelocale isfr_FRforinstance). Ifthisalso fails, itlooks foratranslation using the
fallback locale.
The locale used in translations is the one stored in the user session.
Basic Translation
Translation oftext isdone through thetranslator service (Translator4).Totranslate ablock oftext
(called amessage ),usethetrans()5method. Suppose, forexample, that you're translating asimple
message from inside a controller:
1
2
3
4
5
6
7
8
9// ...
useSymfony\Component\HttpFoundation\Response ;
publicfunction indexAction ()
{
$translated =$this->get('translator' )->trans('Symfony2 is great' );
returnnewResponse ($translated );
}
When thiscode isexecuted, Symfony2 will attempt totranslate themessage "Symfony2 isgreat" based
onthelocaleoftheuser. Forthistowork, youneed totellSymfony2 how totranslate themessage via
a"translation resource", which isacollection ofmessage translations foragiven locale. This "dictionary"
of translations can be created in several different formats, XLIFF being the recommended format:
1
2
3
4
5
6
7
8
9
10
11
12<!-- messages.fr.xliff -->
<?xml version="1.0"?>
<xliffversion= "1.2"xmlns="urn:oasis:names:tc:xliff:document:1.2" >
<filesource-language= "en"datatype= "plaintext" original= "file.ext" >
<body>
<trans-unit id="1">
<source> Symfony2 is great </source>
<target> J'aime Symfony2 </target>
</trans-unit>
</body>
</file>
</xliff>
4.http://api.symfony.com/2.0/Symfony/Component/Translation/Translator.html
5.http://api.symfony.com/2.0/Symfony/Component/Translation/Translator.html#trans()
PDF brought to you by
generated on November 25, 2013Chapter 15: Translations | 202
Listing 15-5
Listing 15-6
Listing 15-7Now, ifthelanguage oftheuser's locale isFrench (e.g. fr_FRorfr_BE),themessage willbetranslated
into J'aime Symfony2 .
The Translation Process
To actually translate the message, Symfony2 uses a simple process:
•The localeof the current user, which is stored in the session, is determined;
•Acatalog oftranslated messages isloaded from translation resources defined forthelocale
(e.g. fr_FR).Messages from thefallback locale arealso loaded and added tothecatalog if
they don't already exist. The end result isalarge "dictionary" oftranslations. SeeMessage
Catalogues for more details;
•Ifthemessage islocated inthecatalog, thetranslation isreturned. Ifnot, thetranslator returns
the original message.
When using thetrans() method, Symfony2 looks fortheexact string inside theappropriate message
catalog and returns it (if it exists).
Message Placeholders
Sometimes, a message containing a variable needs to be translated:
1
2
3
4
5
6
7
8
9// ...
useSymfony\Component\HttpFoundation\Response ;
publicfunction indexAction ($name)
{
$translated =$this->get('translator' )->trans('Hello ' .$name);
returnnewResponse ($translated );
}
However, creating atranslation forthis string isimpossible since thetranslator will trytolook upthe
exact message, including thevariable portions (e.g. "Hello Ryan" or"Hello Fabien"). Instead ofwriting
atranslation forevery possible iteration ofthe$namevariable, you can replace thevariable with a
"placeholder":
1
2
3
4
5
6
7
8
9
10
11
12// ...
useSymfony\Component\HttpFoundation\Response ;
publicfunction indexAction ($name)
{
$translated =$this->get('translator' )->trans(
'Hello %name%' ,
array('%name%' =>$name)
);
returnnewResponse ($translated );
}
Symfony2 will now look foratranslation oftheraw message (Hello%name%)and then replace the
placeholders with their values. Creating a translation is done just as before:
1
2
3<!-- messages.fr.xliff -->
<?xml version="1.0"?>
<xliffversion= "1.2"xmlns="urn:oasis:names:tc:xliff:document:1.2" >
PDF brought to you by
generated on November 25, 2013Chapter 15: Translations | 203
Listing 15-8
Listing 15-94
5
6
7
8
9
10
11
12<filesource-language= "en"datatype= "plaintext" original= "file.ext" >
<body>
<trans-unit id="1">
<source> Hello %name% </source>
<target> Bonjour %name% </target>
</trans-unit>
</body>
</file>
</xliff>
The placeholders cantake onany form asthefullmessage isreconstructed using thePHP strtr
function6.However, the%var%notation isrequired when translating inTwig templates, and is
overall a sensible convention to follow.
As you've seen, creating a translation is a two-step process:
1.Abstract the message that needs to be translated by processing it through the Translator .
2.Create a translation for the message in each locale that you choose to support.
The second step isdone bycreating message catalogues that define thetranslations foranynumber of
different locales.
Message Catalogues
When amessage istranslated, Symfony2 compiles amessage catalogue fortheuser's locale and looks in
itforatranslation ofthemessage. Amessage catalogue islikeadictionary oftranslations foraspecific
locale. For example, the catalogue for the fr_FRlocale might contain the following translation:
1Symfony2 is Great => J'aime Symfony2
It'stheresponsibility ofthedeveloper (ortranslator) ofaninternationalized application tocreate these
translations. Translations arestored onthefilesystem and discovered bySymfony, thanks tosome
conventions.
Each time you create anew translation resource (orinstall abundle that includes atranslation
resource), be sure to clear your cache so that Symfony can discover the new translation resource:
1$php app/console cache:clear
Translation Locations and Naming Conventions
Symfony2 looks for message files (i.e. translations) in two locations:
•Formessages found inabundle, thecorresponding message files should liveintheResources/
translations/ directory of the bundle;
•Tooverride anybundle translations, place message files intheapp/Resources/ translations
directory.
6.http://www.php.net/manual/en/function.strtr.php
PDF brought to you by
generated on November 25, 2013Chapter 15: Translations | 204
Listing 15-10The filename ofthetranslations isalso important asSymfony2 uses aconvention todetermine details
about the translations. Each message file must benamed according tothe following pattern:
domain.locale.loader :
•domain :Anoptional way toorganize messages into groups (e.g. admin,navigation orthe
default messages ) - see Using Message Domains ;
•locale : The locale that the translations are for (e.g. en_GB,en, etc);
•loader : How Symfony2 should load and parse the file (e.g. xliff,phporyml).
The loader canbethename ofanyregistered loader. Bydefault, Symfony provides thefollowing loaders:
•xliff: XLIFF file;
•php: PHP file;
•yml: YAML file.
The choice of which loader to use is entirely up to you and is a matter of taste.
You canalso store translations inadatabase, orany other storage byproviding acustom class
implementing the LoaderInterface7interface.
Creating Translations
The actofcreating translation files isanimportant part of"localization" (often abbreviated L10n8).
Translation files consist ofaseries ofid-translation pairs forthegiven domain and locale. The source is
theidentifier fortheindividual translation, and canbethemessage inthemain locale (e.g. "Symfony is
great") of your application or a unique identifier (e.g. "symfony2.great" - see the sidebar below):
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16<!-- src/Acme/DemoBundle/Resources/translations/messages.fr.xliff -->
<?xml version="1.0"?>
<xliffversion= "1.2"xmlns="urn:oasis:names:tc:xliff:document:1.2" >
<filesource-language= "en"datatype= "plaintext" original= "file.ext" >
<body>
<trans-unit id="1">
<source> Symfony2 is great </source>
<target> J'aime Symfony2 </target>
</trans-unit>
<trans-unit id="2">
<source> symfony2.great </source>
<target> J'aime Symfony2 </target>
</trans-unit>
</body>
</file>
</xliff>
Symfony2 will discover these files and use them when translating either "Symfony2 isgreat" or
"symfony2.great" into a French language locale (e.g. fr_FRorfr_BE).
7.http://api.symfony.com/2.0/Symfony/Component/Translation/Loader/LoaderInterface.html
8.http://en.wikipedia.org/wiki/Internationalization_and_localization
PDF brought to you by
generated on November 25, 2013Chapter 15: Translations | 205
Listing 15-11
Listing 15-12
Listing 15-13Using Real or Keyword Messages
This example illustrates the two different philosophies when creating messages to be translated:
1
2
3$translated =$translator ->trans('Symfony2 is great' );
$translated =$translator ->trans('symfony2.great' );
Inthefirst method, messages arewritten inthelanguage ofthedefault locale (English inthiscase).
That message is then used as the "id" when creating translations.
Inthesecond method, messages areactually "keywords" that convey theidea ofthemessage. The
keyword message isthen used asthe"id" foranytranslations. Inthis case, translations must be
made for the default locale (i.e. to translate symfony2.great toSymfony2 is great ).
The second method ishandy because themessage key won't need tobechanged inevery
translation fileifyoudecide that themessage should actually read "Symfony2 isreally great" inthe
default locale.
The choice ofwhich method touseisentirely uptoyou, but the"keyword" format isoften
recommended.
Additionally, thephpand yamlfileformats support nested idstoavoid repeating yourself ifyou
use keywords instead of real text for your ids:
1
2
3
4
5
6
7
8symfony2 :
is:
great:Symfony2 is great
amazing:Symfony2 is amazing
has:
bundles:Symfony2 has bundles
user:
login:Login
The multiple levels areflattened into single id/translation pairs byadding adot(.)between every
level, therefore the above examples are equivalent to the following:
1
2
3
4symfony2.is.great :Symfony2 is great
symfony2.is.amazing :Symfony2 is amazing
symfony2.has.bundles :Symfony2 has bundles
user.login :Login
Using Message Domains
Asyou've seen, message files areorganized into thedifferent locales that they translate. The message
files canalso beorganized further into "domains". When creating message files, thedomain isthefirst
portion ofthefilename. The default domain ismessages .Forexample, suppose that, fororganization,
translations were split into three different domains: messages ,adminand navigation .The French
translation would have the following message files:
•messages.fr.xliff
•admin.fr.xliff
•navigation.fr.xliff
When translating strings that arenotinthedefault domain (messages ),youmust specify thedomain as
the third argument of trans():
PDF brought to you by
generated on November 25, 2013Chapter 15: Translations | 206
Listing 15-14
Listing 15-15
Listing 15-16
Listing 15-171$this->get('translator' )->trans('Symfony2 is great' ,array(),'admin');
Symfony2 will now look for the message in the admindomain of the user's locale.
Handling the User's Locale
The locale of the current user is stored in the session and is accessible via the sessionservice:
1
2
3$locale =$this->get('session' )->getLocale ();
$this->get('session' )->setLocale ('en_US');
Fallback and Default Locale
Ifthelocale hasn't been setexplicitly inthesession, thefallback_locale configuration parameter will
be used by the Translator . The parameter defaults to en(see Configuration ).
Alternatively, you canguarantee that alocale issetontheuser's session bydefining adefault_locale
for the session service:
1
2
3# app/config/config.yml
framework :
session:{default_locale :en}
The Locale and the URL
Since thelocale oftheuser isstored inthesession, itmay betempting tousethesame URL todisplay a
resource inmany different languages based ontheuser's locale. Forexample, http://www.example.com/
contact could show content inEnglish forone user and French foranother user. Unfortunately, this
violates afundamental rule oftheWeb: that aparticular URL returns thesame resource regardless ofthe
user. To further muddy the problem, which version of the content would be indexed by search engines?
Abetter policy istoinclude thelocale intheURL. This isfully-supported bytherouting system using the
special _localeparameter:
1
2
3
4
5contact:
pattern:/{_locale}/contact
defaults :{_controller :AcmeDemoBundle :Contact:index,_locale:en}
requirements :
_locale:en|fr|de
When using thespecial _locale parameter inaroute, thematched locale willautomatically besetonthe
user's session .Inother words, ifauser visits theURI /fr/contact,thelocale frwillautomatically beset
as the locale for the user's session.
You can now use the user's locale to create routes to other translated pages in your application.
Pluralization
Message pluralization isatough topic astherules can bequite complex. For instance, here isthe
mathematic representation of the Russian pluralization rules:
PDF brought to you by
generated on November 25, 2013Chapter 15: Translations | 207
Listing 15-18
Listing 15-19
Listing 15-20
Listing 15-21
Listing 15-221
2
3
4
5
6
7
8
9(($number %10==1)&&($number %100!=11))
?0
:((($number %10>=2)
&&($number %10<=4)
&&(($number %100<10)
||($number %100>=20)))
?1
:2
);
Asyou cansee, inRussian, you canhave three different plural forms, each given anindex of0,1or2.
For each form, the plural is different, and so the translation is also different.
When atranslation hasdifferent forms due topluralization, you canprovide alltheforms asastring
separated by a pipe ( |):
1'There is one apple|There are %count% apples'
To translate pluralized messages, use the transChoice()9method:
1
2
3
4
5$translated =$this->get('translator' )->transChoice (
'There is one apple|There are %count% apples' ,
10,
array('%count%' =>10)
);
The second argument (10inthis example), isthenumber ofobjects being described and isused to
determine which translation to use and also to populate the %count%placeholder.
Based onthegiven number, thetranslator chooses theright plural form. InEnglish, most words have a
singular form when there isexactly oneobject and aplural form forallother numbers (0,2,3...). So,if
countis1,thetranslator willusethefirst string (Thereisoneapple)asthetranslation. Otherwise it
will use There are %count% apples .
Here is the French translation:
1'Il y a %count% pomme|Il y a %count% pommes'
Even ifthestring looks similar (itismade oftwo sub-strings separated byapipe), theFrench rules are
different: thefirst form (noplural) isused when countis0or1.So,thetranslator willautomatically use
the first string ( Il y a %count% pomme ) when countis0or1.
Each locale hasitsown setofrules, with some having asmany assixdifferent plural forms with complex
rules behind which numbers map towhich plural form. The rules arequite simple forEnglish and
French, butforRussian, you'd may want ahint toknow which rule matches which string. Tohelp
translators, you can optionally "tag" each string:
1
2
3'one: There is one apple|some: There are %count% apples'
'none_or_one: Il y a %count% pomme|some: Il y a %count% pommes'
The tags arereally only hints fortranslators and don't affect thelogic used todetermine which plural
form touse. The tags canbeanydescriptive string that ends with acolon (:).The tags also donotneed
to be the same in the original message as in the translated one.
9.http://api.symfony.com/2.0/Symfony/Component/Translation/Translator.html#transChoice()
PDF brought to you by
generated on November 25, 2013Chapter 15: Translations | 208
Listing 15-23
Listing 15-24
Listing 15-25
Listing 15-26
Listing 15-27Astags areoptional, thetranslator doesn't usethem (the translator willonly getastring based on
its position in the string).
Explicit Interval Pluralization
The easiest way topluralize amessage istoletSymfony2 useinternal logic tochoose which string to
usebased onagiven number. Sometimes, you'll need more control orwant adifferent translation for
specific cases (for 0,orwhen thecount isnegative, forexample). Forsuch cases, you canuseexplicit
math intervals:
1'{0} There are no apples|{1} There is one apple|]1,19] There are %count% apples|[20,Inf]
There are many apples'
The intervals follow theISO 31-1110notation. The above string specifies four different intervals: exactly
0, exactly 1,2-19, and 20and higher.
You canalso mix explicit math rules and standard rules. Inthis case, ifthecount isnotmatched bya
specific interval, the standard rules take effect after removing the explicit rules:
1'{0} There are no apples|[20,Inf] There are many apples|There is one apple|a_few: There are
%count% apples'
Forexample, for1apple, thestandard rule Thereisoneapplewill beused. For2-19apples, the
second standard rule There are %count% apples will be selected.
AnInterval11can represent a finite set of numbers:
1{1,2,3,4}
Or numbers between two other numbers:
1
2[1,+Inf[
]-1,2[
The leftdelimiter can be[(inclusive) or](exclusive). The right delimiter can be[(exclusive) or]
(inclusive). Beside numbers, you can use -Infand+Inffor the infinite.
Translations in Templates
Most ofthetime, translation occurs intemplates. Symfony2 provides native support forboth Twig and
PHP templates.
Twig Templates
Symfony2 provides specialized Twig tags (transand transchoice )tohelp with message translation of
static blocks of text :
10. http://en.wikipedia.org/wiki/Interval_(mathematics)#Notations_for_intervals
11.http://api.symfony.com/2.0/Symfony/Component/Translation/Interval.html
PDF brought to you by
generated on November 25, 2013Chapter 15: Translations | 209
Listing 15-28
Listing 15-29
Listing 15-301
2
3
4
5{%trans%}Hello %name% {%endtrans %}
{%transchoice count%}
{0} There are no apples|{1} There is one apple|]1,Inf] There are %count% apples
{%endtranschoice %}
The transchoice tagautomatically gets the%count% variable from thecurrent context and passes itto
the translator. This mechanism only works when you use a placeholder following the %var%pattern.
Ifyou need tousethepercent character (%)inastring, escape itbydoubling it:{%trans
%}Percent: %percent%%%{% endtrans %}
You can also specify the message domain and pass some additional variables:
1
2
3
4
5
6
7{%transwith{'%name%' :'Fabien' }from"app"%}Hello %name% {%endtrans %}
{%transwith{'%name%' :'Fabien' }from"app"into"fr"%}Hello %name% {%endtrans %}
{%transchoice countwith{'%name%' :'Fabien' }from"app"%}
{0} %name%, there are no apples|{1} %name%, there is one apple|]1,Inf] %name%, there
are %count% apples
{%endtranschoice %}
The transandtranschoice filters can be used to translate variable texts and complex expressions:
1
2
3
4
5
6
7{{message|trans}}
{{message|transchoice (5)}}
{{message|trans({'%name%' :'Fabien' },"app")}}
{{message|transchoice (5,{'%name%' :'Fabien' },'app')}}
Using thetranslation tags orfilters have thesame effect, butwith onesubtle difference: automatic
output escaping isonly applied totranslations using afilter. Inother words, ifyouneed tobesure
that your translated is notoutput escaped, you must apply the rawfilter after the translation filter:
1
2
3
4
5
6
7
8
9
10{# text translated between tags is never escaped #}
{%trans%}
<h3>foo</h3>
{%endtrans %}
{%setmessage ='<h3>foo</h3>' %}
{# strings and variables translated via a filter is escaped by default #}
{{message|trans|raw}}
{{'<h3>bar</h3>' |trans|raw}}
PHP Templates
The translator service is accessible in PHP templates through the translator helper:
PDF brought to you by
generated on November 25, 2013Chapter 15: Translations | 210
Listing 15-31
Listing 15-32
Listing 15-331
2
3
4
5
6
7<?phpecho$view['translator' ]->trans('Symfony2 is great' )?>
<?phpecho$view['translator' ]->transChoice (
'{0} There is no apples|{1} There is one apple|]1,Inf[ There are %count% apples' ,
10,
array('%count%' =>10)
)?>
Forcing the Translator Locale
When translating amessage, Symfony2 uses thelocale from theuser's session orthefallback locale if
necessary. You can also manually specify the locale to use for translation:
1
2
3
4
5
6
7
8
9
10
11
12
13
14$this->get('translator' )->trans(
'Symfony2 is great' ,
array(),
'messages' ,
'fr_FR'
);
$this->get('translator' )->transChoice (
'{0} There are no apples|{1} There is one apple|]1,Inf[ There are %count% apples' ,
10,
array('%count%' =>10),
'messages' ,
'fr_FR'
);
Translating Database Content
The translation ofdatabase content should behandled byDoctrine through theTranslatable Extension12.
For more information, see the documentation for that library.
Translating Constraint Messages
The best way tounderstand constraint translation istoseeitinaction. Tostart, suppose you've created
a plain-old-PHP object that you need to use somewhere in your application:
1
2
3
4
5
6
7// src/Acme/BlogBundle/Entity/Author.php
namespace Acme\BlogBundle\Entity ;
classAuthor
{
public$name;
}
Add constraints though anyofthesupported methods. Setthemessage option tothetranslation source
text. For example, to guarantee that the $name property is not empty, add the following:
12. https://github.com/l3pp4rd/DoctrineExtensions
PDF brought to you by
generated on November 25, 2013Chapter 15: Translations | 211
Listing 15-34
Listing 15-351
2
3
4
5# src/Acme/BlogBundle/Resources/config/validation.yml
Acme\BlogBundle\Entity\Author :
properties :
name:
-NotBlank :{message:"author.name.not_blank" }
Create atranslation fileunder thevalidators catalog fortheconstraint messages, typically inthe
Resources/translations/ directory of the bundle. See Message Catalogues for more details.
1
2
3
4
5
6
7
8
9
10
11
12<!-- validators.en.xliff -->
<?xml version="1.0"?>
<xliffversion= "1.2"xmlns="urn:oasis:names:tc:xliff:document:1.2" >
<filesource-language= "en"datatype= "plaintext" original= "file.ext" >
<body>
<trans-unit id="1">
<source> author.name.not_blank </source>
<target> Please enter an author name. </target>
</trans-unit>
</body>
</file>
</xliff>
Summary
With theSymfony2 Translation component, creating aninternationalized application nolonger needs to
be a painful process and boils down to just a few basic steps:
•Abstract messages inyour application bywrapping each ineither the trans()13or
transChoice()14methods;
•Translate each message into multiple locales bycreating translation message files. Symfony2
discovers and processes each file because its name follows a specific convention;
•Manage the user's locale, which is stored in the session.
13.http://api.symfony.com/2.0/Symfony/Component/Translation/Translator.html#trans()
14.http://api.symfony.com/2.0/Symfony/Component/Translation/Translator.html#transChoice()
PDF brought to you by
generated on November 25, 2013Chapter 15: Translations | 212
Chapter 16
Service Container
Amodern PHP application isfullofobjects. One object may facilitate thedelivery ofemail messages
while another may allow youtopersist information into adatabase. Inyour application, youmay create
anobject that manages your product inventory, oranother object that processes data from athird-party
API. The point isthat amodern application does many things and isorganized into many objects that
handle each task.
This chapter isabout aspecial PHP object inSymfony2 that helps youinstantiate, organize and retrieve
themany objects ofyour application. This object, called aservice container, willallow youtostandardize
and centralize theway objects areconstructed inyour application. The container makes your lifeeasier,
issuper fast, and emphasizes anarchitecture that promotes reusable and decoupled code. Since all
core Symfony2 classes usethecontainer, you'll learn how toextend, configure and useany object in
Symfony2. Inlarge part, theservice container isthebiggest contributor tothespeed and extensibility of
Symfony2.
Finally, configuring and using theservice container iseasy. Bytheend ofthis chapter, you'll be
comfortable creating your own objects viathecontainer and customizing objects from anythird-party
bundle. You'll begin writing code that ismore reusable, testable and decoupled, simply because the
service container makes writing good code so easy.
Ifyou want toknow alotmore after reading this chapter, check outtheDependency Injection
Component Documentation .
What is a Service?
Putsimply, aService isanyPHP object that performs some sortof"global" task. It'sapurposefully-generic
name used incomputer science todescribe anobject that's created foraspecific purpose (e.g. delivering
emails). Each service isused throughout your application whenever youneed thespecific functionality it
provides. You don't have todoanything special tomake aservice: simply write aPHP class with some
code that accomplishes a specific task. Congratulations, you've just created a service!
PDF brought to you by
generated on November 25, 2013Chapter 16: Service Container | 213
Listing 16-1
Listing 16-2Asarule, aPHP object isaservice ifitisused globally inyour application. Asingle Mailerservice
isused globally tosend email messages whereas themany Message objects that itdelivers arenot
services. Similarly, aProduct object isnotaservice, butanobject that persists Product objects to
a database isa service.
Sowhat's thebigdeal then? The advantage ofthinking about "services" isthat youbegin tothink about
separating each piece offunctionality inyour application into aseries ofservices. Since each service does
justonejob,youcaneasily access each service anduseitsfunctionality wherever youneed it.Each service
canalso bemore easily tested and configured since it'sseparated from theother functionality inyour
application. This idea iscalled service-oriented architecture1andisnotunique toSymfony2 oreven PHP.
Structuring your application around asetofindependent service classes isawell-known and trusted
object-oriented best-practice. These skills are key to being a good developer in almost any language.
What is a Service Container?
AService Container (ordependency injection container )issimply aPHP object that manages the
instantiation of services (i.e. objects).
For example, suppose you have asimple PHP class that delivers email messages. Without aservice
container, you must manually create the object whenever you need it:
1
2
3
4useAcme\HelloBundle\Mailer ;
$mailer =newMailer('sendmail' );
$mailer->send('ryan@foobar.net' ,...);
This iseasy enough. The imaginary Mailerclass allows youtoconfigure themethod used todeliver the
email messages (e.g. sendmail ,smtp,etc). Butwhat ifyou wanted tousethemailer service somewhere
else? You certainly don't want torepeat themailer configuration every time you need tousetheMailer
object. What ifyou needed tochange the transport from sendmail tosmtpeverywhere inthe
application? You'd need to hunt down every place you create a Mailerservice and change it.
Creating/Configuring Services in the Container
Abetter answer istolettheservice container create theMailerobject foryou. Inorder forthistowork,
youmust teach thecontainer how tocreate theMailerservice. This isdone viaconfiguration, which can
be specified in YAML, XML or PHP:
1
2
3
4
5# app/config/config.yml
services :
my_mailer :
class: Acme\HelloBundle\Mailer
arguments :[sendmail ]
When Symfony2 initializes, itbuilds theservice container using theapplication configuration
(app/config/config.yml bydefault). The exact file that's loaded isdictated bythe
AppKernel::registerContainerConfiguration() method, which loads anenvironment-specific
configuration file (e.g. config_dev.yml for the devenvironment or config_prod.yml forprod).
1.http://wikipedia.org/wiki/Service-oriented_architecture
PDF brought to you by
generated on November 25, 2013Chapter 16: Service Container | 214
Listing 16-3
Listing 16-4
Listing 16-5Aninstance oftheAcme\HelloBundle\Mailer object isnow available viatheservice container. The
container isavailable inany traditional Symfony2 controller where you canaccess theservices ofthe
container via the get()shortcut method:
1
2
3
4
5
6
7
8
9
10
11classHelloController extends Controller
{
// ...
publicfunction sendEmailAction ()
{
// ...
$mailer =$this->get('my_mailer' );
$mailer->send('ryan@foobar.net' ,...);
}
}
When you askforthemy_mailer service from thecontainer, thecontainer constructs theobject and
returns it.This isanother major advantage ofusing theservice container. Namely, aservice isnever
constructed until it'sneeded. Ifyou define aservice and never useitonarequest, theservice isnever
created. This saves memory andincreases thespeed ofyour application. This also means that there's very
little ornoperformance hitfordefining lotsofservices. Services that arenever used arenever constructed.
Asanadded bonus, theMailerservice isonly created once and thesame instance isreturned each time
you askfortheservice. This isalmost always thebehavior you'll need (it'smore flexible and powerful),
butyou'll learn later how youcanconfigure aservice that hasmultiple instances inthe"How towork with
Scopes " cookbook article.
Service Parameters
The creation ofnew services (i.e. objects) viathecontainer ispretty straightforward. Parameters make
defining services more organized and flexible:
1
2
3
4
5
6
7
8
9# app/config/config.yml
parameters :
my_mailer.class :Acme\HelloBundle\Mailer
my_mailer.transport :sendmail
services :
my_mailer :
class: "%my_mailer.class%"
arguments :["%my_mailer.transport%" ]
The end result isexactly thesame asbefore -thedifference isonly inhow you defined theservice. By
surrounding themy_mailer.class andmy_mailer.transport strings inpercent (%)signs, thecontainer
knows tolook forparameters with those names. When thecontainer isbuilt, itlooks upthevalue ofeach
parameter and uses it in the service definition.
The percent sign inside aparameter orargument, aspart ofthestring, must beescaped with
another percent sign:
<argument type="string">http://symfony.com/?foo=%%s&bar=%%d</argument>
PDF brought to you by
generated on November 25, 2013Chapter 16: Service Container | 215
Listing 16-6You may receive aScopeWideningInjectionException2when passing therequest service asan
argument. Tounderstand this problem better and learn how tosolve it,refer tothecookbook
article How to work with Scopes .
The purpose ofparameters istofeed information into services. Ofcourse there was nothing wrong with
defining the service without using any parameters. Parameters, however, have several advantages:
•separation and organization of all service "options" under a single parameters key;
•parameter values can be used in multiple service definitions;
•when creating aservice inabundle (this follows shortly), using parameters allows theservice
to be easily customized in your application.
The choice ofusing ornotusing parameters isuptoyou. High-quality third-party bundles will always
useparameters asthey make theservice stored inthecontainer more configurable. Fortheservices in
your application, however, you may not need the flexibility of parameters.
Array Parameters
Parameters can also contain array values. See Array Parameters .
Importing other Container Configuration Resources
Inthissection, service configuration files arereferred toasresources .This istohighlight thefact
that, while most configuration resources will befiles (e.g. YAML, XML, PHP), Symfony2 isso
flexible that configuration could beloaded from anywhere (e.g. adatabase oreven viaanexternal
web service).
The service container isbuilt using asingle configuration resource (app/config/config.yml bydefault).
Allother service configuration (including thecore Symfony2 andthird-party bundle configuration) must
beimported from inside this fileinone way oranother. This gives you absolute flexibility over the
services in your application.
External service configuration can beimported intwo different ways. The first -and most common
method -isviatheimports directive. Later, you'll learn about thesecond method, which istheflexible
and preferred method for importing service configuration from third-party bundles.
Importing Configuration with imports
Sofar,you've placed your my_mailer service container definition directly intheapplication configuration
file (e.g. app/config/config.yml ).Of course, since the Mailer class itself lives inside the
AcmeHelloBundle ,itmakes more sense toputthemy_mailer container definition inside thebundle as
well.
First, move the my_mailer container definition into anew container resource file inside
AcmeHelloBundle . If the Resources orResources/config directories don't exist, create them.
1
2
3
4# src/Acme/HelloBundle/Resources/config/services.yml
parameters :
my_mailer.class :Acme\HelloBundle\Mailer
my_mailer.transport :sendmail
2.http://api.symfony.com/2.0/Symfony/Component/DependencyInjection/Exception/ScopeWideningInjectionException.html
PDF brought to you by
generated on November 25, 2013Chapter 16: Service Container | 216
Listing 16-7
Listing 16-85
6
7
8
9services :
my_mailer :
class: "%my_mailer.class%"
arguments :["%my_mailer.transport%" ]
The definition itself hasn't changed, only itslocation. Ofcourse theservice container doesn't know about
thenew resource file. Fortunately, you caneasily import theresource fileusing theimports keyinthe
application configuration.
1
2
3# app/config/config.yml
imports:
-{resource :"@AcmeHelloBundle/Resources/config/services.yml" }
The imports directive allows your application toinclude service container configuration resources from
anyother location (most commonly from bundles). The resource location, forfiles, istheabsolute path
totheresource file. The special @AcmeHello syntax resolves thedirectory path oftheAcmeHelloBundle
bundle. This helps you specify the path tothe resource without worrying later ifyou move the
AcmeHelloBundle to a different directory.
Importing Configuration via Container Extensions
When developing inSymfony2, you'll most commonly usetheimports directive toimport container
configuration from thebundles you've created specifically foryour application. Third-party bundle
container configuration, including Symfony2 core services, areusually loaded using another method
that's more flexible and easy to configure in your application.
Here's how itworks. Internally, each bundle defines itsservices very much like you've seen sofar.
Namely, abundle uses oneormore configuration resource files (usually XML) tospecify theparameters
and services forthat bundle. However, instead ofimporting each ofthese resources directly from your
application configuration using theimportsdirective, youcansimply invoke aservice container extension
inside thebundle that does thework foryou. Aservice container extension isaPHP class created bythe
bundle author to accomplish two things:
•import all service container resources needed to configure the services for the bundle;
•provide semantic, straightforward configuration sothat thebundle canbeconfigured without
interacting with the flat parameters of the bundle's service container configuration.
Inother words, aservice container extension configures theservices forabundle onyour behalf. And as
you'll see in a moment, the extension provides a sensible, high-level interface for configuring the bundle.
Take theFrameworkBundle -thecore Symfony2 framework bundle -asanexample. The presence of
thefollowing code inyour application configuration invokes theservice container extension inside the
FrameworkBundle :
1
2
3
4
5
6
7
8# app/config/config.yml
framework :
secret: xxxxxxxxxx
charset: UTF-8
form: true
csrf_protection :true
router: {resource :"%kernel.root_dir%/config/routing.yml" }
# ...
When theconfiguration isparsed, thecontainer looks foranextension that canhandle theframework
configuration directive. The extension inquestion, which lives intheFrameworkBundle ,isinvoked and
PDF brought to you by
generated on November 25, 2013Chapter 16: Service Container | 217
Listing 16-9theservice configuration fortheFrameworkBundle isloaded. Ifyou remove theframework keyfrom
your application configuration fileentirely, thecore Symfony2 services won't beloaded. The point isthat
you're incontrol: theSymfony2 framework doesn't contain anymagic orperform anyactions that you
don't have control over.
Ofcourse you can domuch more than simply "activate" the service container extension ofthe
FrameworkBundle .Each extension allows you toeasily customize thebundle, without worrying about
how the internal services are defined.
Inthis case, theextension allows you tocustomize thecharset,error_handler ,csrf_protection ,
routerconfiguration and much more. Internally, theFrameworkBundle uses theoptions specified here
todefine and configure theservices specific toit.The bundle takes care ofcreating allthenecessary
parameters and services fortheservice container, while still allowing much oftheconfiguration to
beeasily customized. Asanadded bonus, most service container extensions arealso smart enough to
perform validation - notifying you of options that are missing or the wrong data type.
When installing orconfiguring abundle, seethebundle's documentation forhow theservices forthe
bundle should beinstalled andconfigured. The options available forthecore bundles canbefound inside
theReference Guide .
Natively, theservice container only recognizes theparameters ,services ,andimportsdirectives.
Any other directives are handled by a service container extension.
Ifyou want toexpose user friendly configuration inyour own bundles, read the"How toexpose a
Semantic Configuration for a Bundle " cookbook recipe.
Referencing (Injecting) Services
Sofar,theoriginal my_mailer service issimple: ittakes just one argument initsconstructor, which is
easily configurable. Asyou'll see, thereal power ofthecontainer isrealized when you need tocreate a
service that depends on one or more other services in the container.
Asanexample, suppose you have anew service, NewsletterManager ,that helps tomanage the
preparation and delivery ofanemail message toacollection ofaddresses. Ofcourse themy_mailer
service isalready really good atdelivering email messages, soyou'll useitinside NewsletterManager to
handle the actual delivery of the messages. This pretend class might look something like this:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16// src/Acme/HelloBundle/Newsletter/NewsletterManager.php
namespace Acme\HelloBundle\Newsletter ;
useAcme\HelloBundle\Mailer ;
classNewsletterManager
{
protected $mailer;
publicfunction __construct (Mailer$mailer)
{
$this->mailer=$mailer;
}
// ...
}
Without using theservice container, youcancreate anew NewsletterManager fairly easily from inside a
controller:
PDF brought to you by
generated on November 25, 2013Chapter 16: Service Container | 218
Listing 16-10
Listing 16-11
Listing 16-121
2
3
4
5
6
7
8
9
10useAcme\HelloBundle\Newsletter\NewsletterManager ;
// ...
publicfunction sendNewsletterAction ()
{
$mailer =$this->get('my_mailer' );
$newsletter =newNewsletterManager ($mailer);
// ...
}
This approach isfine, butwhat ifyou decide later that theNewsletterManager class needs asecond or
third constructor argument? What ifyoudecide torefactor your code andrename theclass? Inboth cases,
you'd need tofind every place where theNewsletterManager isinstantiated and modify it.Ofcourse,
the service container gives you a much more appealing option:
1
2
3
4
5
6
7
8
9
10
11# src/Acme/HelloBundle/Resources/config/services.yml
parameters :
# ...
newsletter_manager.class :Acme\HelloBundle\Newsletter\NewsletterManager
services :
my_mailer :
# ...
newsletter_manager :
class:"%newsletter_manager.class%"
arguments :["@my_mailer" ]
InYAML, thespecial @my_mailer syntax tells thecontainer tolook foraservice named my_mailer andto
pass that object into theconstructor ofNewsletterManager .Inthiscase, however, thespecified service
my_mailer must exist. Ifitdoes not, anexception will bethrown. You canmark your dependencies as
optional - this will be discussed in the next section.
Using references isavery powerful tool that allows you tocreate independent service classes with well-
defined dependencies. Inthisexample, thenewsletter_manager service needs themy_mailer service in
order tofunction. When youdefine thisdependency intheservice container, thecontainer takes care of
all the work of instantiating the objects.
Optional Dependencies: Setter Injection
Injecting dependencies into theconstructor inthis manner isanexcellent way ofensuring that the
dependency isavailable touse. Ifyouhave optional dependencies foraclass, then "setter injection" may
beabetter option. This means injecting thedependency using amethod callrather than through the
constructor. The class would look like this:
1
2
3
4
5
6
7
8
9
10
11namespace Acme\HelloBundle\Newsletter ;
useAcme\HelloBundle\Mailer ;
classNewsletterManager
{
protected $mailer;
publicfunction setMailer (Mailer$mailer)
{
$this->mailer=$mailer;
PDF brought to you by
generated on November 25, 2013Chapter 16: Service Container | 219
Listing 16-13
Listing 16-14
Listing 16-1512
13
14
15}
// ...
}
Injecting the dependency by the setter method just needs a change of syntax:
1
2
3
4
5
6
7
8
9
10
11
12# src/Acme/HelloBundle/Resources/config/services.yml
parameters :
# ...
newsletter_manager.class :Acme\HelloBundle\Newsletter\NewsletterManager
services :
my_mailer :
# ...
newsletter_manager :
class:"%newsletter_manager.class%"
calls:
-[setMailer ,["@my_mailer" ]]
The approaches presented inthissection arecalled "constructor injection" and "setter injection".
The Symfony2 service container also supports "property injection".
Making References Optional
Sometimes, one ofyour services may have anoptional dependency, meaning that thedependency is
notrequired foryour service towork properly. Intheexample above, themy_mailer service must exist,
otherwise anexception will bethrown. Bymodifying thenewsletter_manager service definition, you
can make this reference optional. The container will then inject it if it exists and do nothing if it doesn't:
1
2
3
4
5
6
7
8# src/Acme/HelloBundle/Resources/config/services.yml
parameters :
# ...
services :
newsletter_manager :
class:"%newsletter_manager.class%"
arguments :["@?my_mailer" ]
InYAML, thespecial @?syntax tells theservice container that thedependency isoptional. Ofcourse, the
NewsletterManager must also be written to allow for an optional dependency:
1
2
3
4publicfunction __construct (Mailer$mailer =null)
{
// ...
}
PDF brought to you by
generated on November 25, 2013Chapter 16: Service Container | 220
Listing 16-16
Listing 16-17
Listing 16-18Core Symfony and Third-Party Bundle Services
Since Symfony2 andallthird-party bundles configure andretrieve their services viathecontainer, youcan
easily access them oreven usethem inyour own services. Tokeep things simple, Symfony2 bydefault
does notrequire that controllers bedefined asservices. Furthermore Symfony2 injects theentire service
container into your controller. Forexample, tohandle thestorage ofinformation onauser's session,
Symfony2 provides a sessionservice, which you can access inside a standard controller as follows:
1
2
3
4
5
6
7publicfunction indexAction ($bar)
{
$session =$this->get('session' );
$session ->set('foo',$bar);
// ...
}
InSymfony2, you'll constantly useservices provided bytheSymfony core orother third-party bundles
toperform tasks such asrendering templates (templating ),sending emails (mailer),oraccessing
information on the request ( request).
You can take this astep further byusing these services inside services that you've created foryour
application. Beginning bymodifying theNewsletterManager tousethereal Symfony2 mailerservice
(instead ofthepretend my_mailer ).Also pass thetemplating engine service totheNewsletterManager
so that it can generate the email content via a template:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18namespace Acme\HelloBundle\Newsletter ;
useSymfony\Component\Templating\EngineInterface ;
classNewsletterManager
{
protected $mailer;
protected $templating ;
publicfunction __construct (\Swift_Mailer $mailer,EngineInterface $templating )
{
$this->mailer=$mailer;
$this->templating =$templating ;
}
// ...
}
Configuring the service container is easy:
1
2
3
4services :
newsletter_manager :
class:"%newsletter_manager.class%"
arguments :["@mailer" ,"@templating" ]
The newsletter_manager service now hasaccess tothecore mailerand templating services. This isa
common way tocreate services specific toyour application that leverage thepower ofdifferent services
within the framework.
PDF brought to you by
generated on November 25, 2013Chapter 16: Service Container | 221
Listing 16-19
Listing 16-20
Listing 16-21
Listing 16-22Besure that theswiftmailer entry appears inyour application configuration. Aswas mentioned
inImporting Configuration viaContainer Extensions ,theswiftmailer key invokes theservice
extension from the SwiftmailerBundle , which registers the mailerservice.
Tags
Inthesame way that ablog post ontheWeb might betagged with things such as"Symfony" or"PHP",
services configured inyour container canalso betagged. Intheservice container, atagimplies that the
service is meant to be used for a specific purpose. Take the following example:
1
2
3
4
5services :
foo.twig.extension :
class:Acme\HelloBundle\Extension\FooExtension
tags:
-{name:twig.extension }
The twig.extension tagisaspecial tagthat theTwigBundle uses during configuration. Bygiving
theservice this twig.extension tag, thebundle knows that thefoo.twig.extension service should
beregistered asaTwig extension with Twig. Inother words, Twig finds allservices tagged with
twig.extension and automatically registers them as extensions.
Tags, then, areaway totellSymfony2 orother third-party bundles that your service should beregistered
or used in some special way by the bundle.
The following isalistoftags available with thecore Symfony2 bundles. Each ofthese hasadifferent
effect on your service and many tags require additional arguments (beyond just the nameparameter).
Foralistofallthetags available inthecore Symfony Framework, check outThe Dependency Injection
Tags .
Debugging Services
You canfind outwhat services areregistered with thecontainer using theconsole. Toshow allservices
and the class for each service, run:
1$php app/console container:debug
By default only public services are shown, but you can also view private services:
1$php app/console container:debug --show-private
You can get more detailed information about a particular service by specifying its id:
1$php app/console container:debug my_mailer
Learn more
•Introduction to Parameters
•Compiling the Container
•Working with Container Service Definitions
PDF brought to you by
generated on November 25, 2013Chapter 16: Service Container | 222
•Using a Factory to Create Services
•Managing Common Dependencies with Parent Services
•Working with Tagged Services
•How to define Controllers as Services
•How to work with Scopes
•How to work with Compiler Passes in Bundles
•Advanced Container Configuration
PDF brought to you by
generated on November 25, 2013Chapter 16: Service Container | 223
Chapter 17
Performance
Symfony2 isfast, right outofthebox. Ofcourse, ifyoureally need speed, there aremany ways that you
canmake Symfony even faster. Inthischapter, you'll explore many ofthemost common and powerful
ways to make your Symfony application even faster.
Use a Byte Code Cache (e.g. APC)
One ofthebest (and easiest) things that you should dotoimprove your performance istousea"byte
code cache". The idea ofabyte code cache istoremove theneed toconstantly recompile thePHP source
code. There areanumber ofbyte code caches1available, some ofwhich areopen source. The most widely
used byte code cache is probably APC2
Using abyte code cache really hasnodownside, and Symfony2 hasbeen architected toperform really
well in this type of environment.
Further Optimizations
Byte code caches usually monitor thesource files forchanges. This ensures that ifthesource ofa
filechanges, thebyte code isrecompiled automatically. This isreally convenient, butobviously adds
overhead.
Forthisreason, some byte code caches offer anoption todisable these checks. Obviously, when disabling
these checks, itwill beuptotheserver admin toensure that thecache iscleared whenever anysource
files change. Otherwise, the updates you've made won't be seen.
For example, to disable these checks in APC, simply add apc.stat=0 to your php.ini configuration.
1.http://en.wikipedia.org/wiki/List_of_PHP_accelerators
2.http://php.net/manual/en/book.apc.php
PDF brought to you by
generated on November 25, 2013Chapter 17: Performance | 224
Listing 17-1
Listing 17-2Use an Autoloader that caches (e.g. ApcUniversalClassLoader )
Bydefault, theSymfony2 standard edition uses theUniversalClassLoader intheautoloader.php3file.
This autoloader iseasy touse, asitwill automatically find any new classes that you've placed inthe
registered directories.
Unfortunately, this comes atacost, astheloader iterates over allconfigured namespaces tofind a
particular file, making file_exists calls until it finally finds the file it's looking for.
The simplest solution istocache thelocation ofeach class after it'slocated thefirst time. Symfony comes
with aclass -ApcUniversalClassLoader -loader that extends theUniversalClassLoader and stores
the class locations in APC.
To use this class loader, simply adapt your autoloader.php as follows:
1
2
3
4
5
6
7// app/autoload.php
require __DIR__.'/../vendor/symfony/src/Symfony/Component/ClassLoader/
ApcUniversalClassLoader.php' ;
useSymfony\Component\ClassLoader\ApcUniversalClassLoader ;
$loader =newApcUniversalClassLoader ('some caching unique prefix' );
// ...
When using theAPC autoloader, ifyou add new classes, they will befound automatically and
everything will work thesame asbefore (i.e. noreason to"clear" thecache). However, ifyou
change thelocation ofaparticular namespace orprefix, you'll need toflush your APC cache.
Otherwise, theautoloader will still belooking attheold location forallclasses inside that
namespace.
Use Bootstrap Files
Toensure optimal flexibility andcode reuse, Symfony2 applications leverage avariety ofclasses and3rd
party components. Butloading allofthese classes from separate files oneach request canresult insome
overhead. Toreduce this overhead, theSymfony2 Standard Edition provides ascript togenerate aso-
called bootstrap file4,consisting ofmultiple classes definitions inasingle file.Byincluding thisfile(which
contains acopy ofmany ofthecore classes), Symfony nolonger needs toinclude anyofthesource files
containing those classes. This will reduce disc IO quite a bit.
Ifyou're using theSymfony2 Standard Edition, then you're probably already using thebootstrap file.To
besure, open your front controller (usually app.php)and check tomake sure that thefollowing line
exists:
1require_once __DIR__.'/../app/bootstrap.php.cache' ;
Note that there are two disadvantages when using a bootstrap file:
•thefileneeds toberegenerated whenever anyoftheoriginal sources change (i.e. when you
update the Symfony2 source or vendor libraries);
•when debugging, one will need to place break points inside the bootstrap file.
3.https://github.com/symfony/symfony-standard/blob/2.0/app/autoload.php
4.https://github.com/sensio/SensioDistributionBundle/blob/2.0/Resources/bin/build_bootstrap.php
PDF brought to you by
generated on November 25, 2013Chapter 17: Performance | 225
Ifyou're using Symfony2 Standard Edition, thebootstrap fileisautomatically rebuilt after updating the
vendor libraries via the php bin/vendors install command.
Bootstrap Files and Byte Code Caches
Even when using abyte code cache, performance will improve when using abootstrap filesince there
willbefewer files tomonitor forchanges. Ofcourse ifthisfeature isdisabled inthebyte code cache (e.g.
apc.stat=0 in APC), there is no longer a reason to use a bootstrap file.
PDF brought to you by
generated on November 25, 2013Chapter 17: Performance | 226
Chapter 18
Internals
Looks like you want tounderstand how Symfony2 works and how toextend it.That makes mevery
happy! This section is an in-depth explanation of the Symfony2 internals.
You need toread this section only ifyou want tounderstand how Symfony2 works behind the
scene, or if you want to extend Symfony2.
Overview
The Symfony2 code is made of several independent layers. Each layer is built on top of the previous one.
Autoloading isnotmanaged bytheframework directly; it'sdone independently with thehelp of
theUniversalClassLoader1class and thesrc/autoload.php file. Read thededicated chapter for
more information.
HttpFoundation Component
The deepest level istheHttpFoundation2component. HttpFoundation provides themain objects needed
to deal with HTTP. It is an Object-Oriented abstraction of some native PHP functions and variables:
•The Request3class abstracts themain PHP global variables like $_GET,$_POST,$_COOKIE ,
$_FILES, and $_SERVER ;
•The Response4class abstracts some PHP functions like header() ,setcookie() , and echo;
1.http://api.symfony.com/2.0/Symfony/Component/ClassLoader/UniversalClassLoader.html
2.http://api.symfony.com/2.0/Symfony/Component/HttpFoundation.html
3.http://api.symfony.com/2.0/Symfony/Component/HttpFoundation/Request.html
4.http://api.symfony.com/2.0/Symfony/Component/HttpFoundation/Response.html
PDF brought to you by
generated on November 25, 2013Chapter 18: Internals | 227
Listing 18-1
Listing 18-2•The Session5class and SessionStorageInterface6interface abstract session management
session_*() functions.
Read more about the HttpFoundation Component .
HttpKernel Component
OntopofHttpFoundation istheHttpKernel7component. HttpKernel handles thedynamic part of
HTTP; itisathin wrapper ontopoftheRequest and Response classes tostandardize theway requests
arehandled. Italso provides extension points and tools that makes ittheideal starting point tocreate a
Web framework without too much overhead.
Italso optionally adds configurability and extensibility, thanks totheDependency Injection component
and a powerful plugin system (bundles).
Read more about the HttpKernel Component ,Dependency Injection andBundles .
FrameworkBundle Bundle
The FrameworkBundle8bundle isthebundle that ties themain components and libraries together
tomake alightweight and fast MVC framework. Itcomes with asensible default configuration and
conventions to ease the learning curve.
Kernel
The HttpKernel9class isthecentral class ofSymfony2 andisresponsible forhandling client requests. Its
main goal is to "convert" a Request10object to a Response11object.
Every Symfony2 Kernel implements HttpKernelInterface12:
1function handle(Request $request ,$type=self::MASTER_REQUEST ,$catch=true)
Controllers
Toconvert aRequest toaResponse, theKernel relies ona"Controller". AController canbeanyvalid
PHP callable.
The Kernel delegates theselection ofwhat Controller should beexecuted toanimplementation of
ControllerResolverInterface13:
5.http://api.symfony.com/2.0/Symfony/Component/HttpFoundation/Session.html
6.http://api.symfony.com/2.0/Symfony/Component/HttpFoundation/SessionStorage/SessionStorageInterface.html
7.http://api.symfony.com/2.0/Symfony/Component/HttpKernel.html
8.http://api.symfony.com/2.0/Symfony/Bundle/FrameworkBundle.html
9.http://api.symfony.com/2.0/Symfony/Component/HttpKernel/HttpKernel.html
10.http://api.symfony.com/2.0/Symfony/Component/HttpFoundation/Request.html
11.http://api.symfony.com/2.0/Symfony/Component/HttpFoundation/Response.html
12.http://api.symfony.com/2.0/Symfony/Component/HttpKernel/HttpKernelInterface.html
13.http://api.symfony.com/2.0/Symfony/Component/HttpKernel/Controller/ControllerResolverInterface.html
PDF brought to you by
generated on November 25, 2013Chapter 18: Internals | 228
Listing 18-31
2
3publicfunction getController (Request $request );
publicfunction getArguments (Request $request ,$controller );
The getController()14method returns theController (aPHP callable) associated with thegiven
Request. The default implementation (ControllerResolver15)looks fora_controller request attribute
that represents the controller name (a "class::method" string, like
Bundle\BlogBundle\PostController:indexAction ).
The default implementation uses the RouterListener16todefine the _controller Request
attribute (see kernel.request Event ).
The getArguments()17method returns anarray ofarguments topass totheController callable. The
default implementation automatically resolves the method arguments, based on the Request attributes.
Matching Controller method arguments from Request attributes
Foreach method argument, Symfony2 tries togetthevalue ofaRequest attribute with thesame
name. If it is not defined, the argument default value is used if defined:
1
2
3
4
5
6// Symfony2 will look for an 'id' attribute (mandatory)
// and an 'admin' one (optional)
publicfunction showAction ($id,$admin=true)
{
// ...
}
Handling Requests
The handle()18method takes aRequest and always returns aResponse .Toconvert theRequest,
handle() relies ontheResolver andanordered chain ofEvent notifications (seethenext section formore
information about each Event):
1.Before doing anything else, thekernel.request event isnotified --ifoneofthelisteners returns
aResponse , it jumps to step 8 directly;
2.The Resolver is called to determine the Controller to execute;
3.Listeners ofthekernel.controller event cannow manipulate theController callable theway
they want (change it, wrap it, ...);
4.The Kernel checks that the Controller is actually a valid PHP callable;
5.The Resolver is called to determine the arguments to pass to the Controller;
6.The Kernel calls the Controller;
7.IftheController does notreturn aResponse ,listeners ofthekernel.view event canconvert the
Controller return value to a Response ;
8.Listeners of the kernel.response event can manipulate the Response (content and headers);
9.The Response is returned.
14.http://api.symfony.com/2.0/Symfony/Component/HttpKernel/Controller/ControllerResolverInterface.html#getController()
15.http://api.symfony.com/2.0/Symfony/Component/HttpKernel/Controller/ControllerResolver.html
16.http://api.symfony.com/2.0/Symfony/Bundle/FrameworkBundle/EventListener/RouterListener.html
17.http://api.symfony.com/2.0/Symfony/Component/HttpKernel/Controller/ControllerResolverInterface.html#getArguments()
18.http://api.symfony.com/2.0/Symfony/Component/HttpKernel/HttpKernel.html#handle()
PDF brought to you by
generated on November 25, 2013Chapter 18: Internals | 229
Listing 18-4IfanException isthrown during processing, thekernel.exception isnotified and listeners aregiven a
chance toconvert theException toaResponse. Ifthat works, thekernel.response event isnotified; if
not, the Exception is re-thrown.
Ifyou don't want Exceptions tobecaught (for embedded requests for instance), disable the
kernel.exception event by passing falseas the third argument to the handle() method.
Internal Requests
Atanytime during thehandling ofarequest (the 'master' one), asub-request canbehandled. You can
pass the request type to the handle() method (its second argument):
•HttpKernelInterface::MASTER_REQUEST ;
•HttpKernelInterface::SUB_REQUEST .
The type ispassed toallevents and listeners canactaccordingly (some processing must only occur on
the master request).
Events
Each event thrown bytheKernel isasubclass ofKernelEvent19.This means that each event hasaccess
to the same basic information:
•getRequestType()20- returns the type of the request
(HttpKernelInterface::MASTER_REQUEST orHttpKernelInterface::SUB_REQUEST );
•getKernel()21- returns the Kernel handling the request;
•getRequest()22- returns the current Requestbeing handled.
getRequestType()
The getRequestType() method allows listeners toknow thetype oftherequest. Forinstance, ifalistener
must only beactive formaster requests, addthefollowing code atthebeginning ofyour listener method:
1
2
3
4
5
6useSymfony\Component\HttpKernel\HttpKernelInterface ;
if(HttpKernelInterface ::MASTER_REQUEST !==$event->getRequestType ()){
// return immediately
return;
}
Ifyou arenot yetfamiliar with theSymfony2 Event Dispatcher, read theEvent Dispatcher
Component Documentation section first.
kernel.request Event
Event Class :GetResponseEvent23
The goal ofthis event istoeither return aResponse object immediately orsetup variables sothat a
Controller canbecalled after theevent. Any listener canreturn aResponse object viathesetResponse()
method on the event. In this case, all other listeners won't be called.
19.http://api.symfony.com/2.0/Symfony/Component/HttpKernel/Event/KernelEvent.html
20.http://api.symfony.com/2.0/Symfony/Component/HttpKernel/Event/KernelEvent.html#getRequestType()
21.http://api.symfony.com/2.0/Symfony/Component/HttpKernel/Event/KernelEvent.html#getKernel()
22.http://api.symfony.com/2.0/Symfony/Component/HttpKernel/Event/KernelEvent.html#getRequest()
23.http://api.symfony.com/2.0/Symfony/Component/HttpKernel/Event/GetResponseEvent.html
PDF brought to you by
generated on November 25, 2013Chapter 18: Internals | 230
Listing 18-5
Listing 18-6This event isused byFrameworkBundle topopulate the _controller Request attribute, viathe
RouterListener24.RequestListener uses aRouterInterface25object tomatch the Request and
determine the Controller name (stored in the _controller Requestattribute).
Read more on the kernel.request event .
kernel.controller Event
Event Class :FilterControllerEvent26
This event isnotused byFrameworkBundle ,butcanbeanentry point used tomodify thecontroller that
should be executed:
1
2
3
4
5
6
7
8
9
10useSymfony\Component\HttpKernel\Event\FilterControllerEvent ;
publicfunction onKernelController (FilterControllerEvent $event)
{
$controller =$event->getController ();
// ...
// the controller can be changed to any PHP callable
$event->setController ($controller );
}
Read more on the kernel.controller event .
kernel.view Event
Event Class :GetResponseForControllerResultEvent27
This event isnotused byFrameworkBundle ,butitcanbeused toimplement aview sub-system. This
event iscalled only iftheController does notreturn aResponse object. The purpose oftheevent isto
allow some other return value to be converted into a Response .
The value returned by the Controller is accessible via the getControllerResult method:
1
2
3
4
5
6
7
8
9
10
11
12useSymfony\Component\HttpKernel\Event\GetResponseForControllerResultEvent ;
useSymfony\Component\HttpFoundation\Response ;
publicfunction onKernelView (GetResponseForControllerResultEvent $event)
{
$val=$event->getControllerResult ();
$response =newResponse ();
// ... some how customize the Response from the return value
$event->setResponse ($response );
}
Read more on the kernel.view event .
24.http://api.symfony.com/2.0/Symfony/Bundle/FrameworkBundle/EventListener/RouterListener.html
25.http://api.symfony.com/2.0/Symfony/Component/Routing/RouterInterface.html
26.http://api.symfony.com/2.0/Symfony/Component/HttpKernel/Event/FilterControllerEvent.html
27.http://api.symfony.com/2.0/Symfony/Component/HttpKernel/Event/GetResponseForControllerResultEvent.html
PDF brought to you by
generated on November 25, 2013Chapter 18: Internals | 231
Listing 18-7
Listing 18-8kernel.response Event
Event Class :FilterResponseEvent28
The purpose ofthis event istoallow other systems tomodify orreplace theResponse object after its
creation:
1
2
3
4
5
6publicfunction onKernelResponse (FilterResponseEvent $event)
{
$response =$event->getResponse ();
// ... modify the response object
}
The FrameworkBundle registers several listeners:
•ProfilerListener29: collects data for the current request;
•WebDebugToolbarListener30: injects the Web Debug Toolbar;
•ResponseListener31: fixes the Response Content-Type based on the request format;
•EsiListener32:adds aSurrogate-Control HTTP header when theResponse needs tobe
parsed for ESI tags.
Read more on the kernel.response event .
kernel.exception Event
Event Class :GetResponseForExceptionEvent33
FrameworkBundle registers anExceptionListener34that forwards theRequesttoagiven Controller (the
value of the exception_listener.controller parameter -- must be in the class::method notation).
Alistener onthisevent cancreate and setaResponse object, create and setanew Exception object, or
do nothing:
1
2
3
4
5
6
7
8
9
10
11
12
13
14useSymfony\Component\HttpKernel\Event\GetResponseForExceptionEvent ;
useSymfony\Component\HttpFoundation\Response ;
publicfunction onKernelException (GetResponseForExceptionEvent $event)
{
$exception =$event->getException ();
$response =newResponse ();
// setup the Response object based on the caught exception
$event->setResponse ($response );
// you can alternatively set a new Exception
// $exception = new \Exception('Some special exception');
// $event->setException($exception);
}
28.http://api.symfony.com/2.0/Symfony/Component/HttpKernel/Event/FilterResponseEvent.html
29.http://api.symfony.com/2.0/Symfony/Component/HttpKernel/EventListener/ProfilerListener.html
30.http://api.symfony.com/2.0/Symfony/Bundle/WebProfilerBundle/EventListener/WebDebugToolbarListener.html
31.http://api.symfony.com/2.0/Symfony/Component/HttpKernel/EventListener/ResponseListener.html
32.http://api.symfony.com/2.0/Symfony/Component/HttpKernel/EventListener/EsiListener.html
33.http://api.symfony.com/2.0/Symfony/Component/HttpKernel/Event/GetResponseForExceptionEvent.html
34.http://api.symfony.com/2.0/Symfony/Component/HttpKernel/EventListener/ExceptionListener.html
PDF brought to you by
generated on November 25, 2013Chapter 18: Internals | 232
Listing 18-9The Event Dispatcher
The event dispatcher isastandalone component that isresponsible formuch oftheunderlying logic
and flow behind aSymfony request. For more information, seethe Event Dispatcher Component
Documentation .
Read more on the kernel.exception event .
Profiler
When enabled, theSymfony2 profiler collects useful information about each request made toyour
application andstore them forlater analysis. Usetheprofiler inthedevelopment environment tohelp you
todebug your code andenhance performance; useitintheproduction environment toexplore problems
after the fact.
You rarely have todeal with theprofiler directly asSymfony2 provides visualizer tools like theWeb
Debug Toolbar and theWeb Profiler. Ifyou usetheSymfony2 Standard Edition, theprofiler, theweb
debug toolbar, and the web profiler are all already configured with sensible settings.
The profiler collects information forallrequests (simple requests, redirects, exceptions, Ajax
requests, ESIrequests; andforallHTTP methods andallformats). Itmeans that forasingle URL,
you can have several associated profiling data (one per external request/response pair).
Visualizing Profiling Data
Using the Web Debug Toolbar
Inthedevelopment environment, theweb debug toolbar isavailable atthebottom ofallpages. Itdisplays
agood summary oftheprofiling data that gives you instant access toalotofuseful information when
something does not work as expected.
Ifthesummary provided bytheWeb Debug Toolbar isnotenough, click onthetoken link(astring made
of 13 random characters) to access the Web Profiler.
Ifthetoken isnotclickable, itmeans that theprofiler routes arenotregistered (see below for
configuration information).
Analyzing Profiling data with the Web Profiler
The Web Profiler isavisualization tool forprofiling data that youcanuseindevelopment todebug your
code and enhance performance; butitcanalso beused toexplore problems that occur inproduction. It
exposes all information collected by the profiler in a web interface.
Accessing the Profiling information
You don't need tousethedefault visualizer toaccess theprofiling information. Buthow canyouretrieve
profiling information foraspecific request after thefact? When theprofiler stores data about aRequest,
italso associates atoken with it;this token isavailable intheX-Debug-Token HTTP header ofthe
Response:
PDF brought to you by
generated on November 25, 2013Chapter 18: Internals | 233
Listing 18-10
Listing 18-11
Listing 18-121
2
3$profile =$container ->get('profiler' )->loadProfileFromResponse ($response );
$profile =$container ->get('profiler' )->loadProfile ($token);
When theprofiler isenabled butnottheweb debug toolbar, orwhen youwant togetthetoken for
an Ajax request, use a tool like Firebug to get the value of the X-Debug-Token HTTP header.
Use the find()35method to access tokens based on some criteria:
1
2
3
4
5
6
7
8// get the latest 10 tokens
$tokens =$container ->get('profiler' )->find('','',10);
// get the latest 10 tokens for all URL containing /admin/
$tokens =$container ->get('profiler' )->find('','/admin/' ,10);
// get the latest 10 tokens for local requests
$tokens =$container ->get('profiler' )->find('127.0.0.1' ,'',10);
Ifyouwant tomanipulate profiling data onadifferent machine than theonewhere theinformation were
generated, use the export()36andimport()37methods:
1
2
3
4
5
6// on the production machine
$profile =$container ->get('profiler' )->loadProfile ($token);
$data=$profiler ->export($profile );
// on the development machine
$profiler ->import($data);
Configuration
The default Symfony2 configuration comes with sensible settings fortheprofiler, theweb debug toolbar,
and the web profiler. Here is for instance the configuration for the development environment:
1
2
3
4
5
6
7
8
9# load the profiler
framework :
profiler :{only_exceptions :false}
# enable the web profiler
web_profiler :
toolbar:true
intercept_redirects :true
verbose:true
When only-exceptions issettotrue,theprofiler only collects data when anexception isthrown bythe
application.
When intercept-redirects issettotrue,theweb profiler intercepts theredirects and gives you the
opportunity to look at the collected data before following the redirect.
35.http://api.symfony.com/2.0/Symfony/Component/HttpKernel/Profiler/Profiler.html#find()
36.http://api.symfony.com/2.0/Symfony/Component/HttpKernel/Profiler/Profiler.html#export()
37.http://api.symfony.com/2.0/Symfony/Component/HttpKernel/Profiler/Profiler.html#import()
PDF brought to you by
generated on November 25, 2013Chapter 18: Internals | 234
Listing 18-13
Listing 18-14When verbose issettotrue,theWeb Debug Toolbar displays alotofinformation. Setting verbose to
falsehides some secondary information to make the toolbar shorter.
If you enable the web profiler, you also need to mount the profiler routes:
_profiler:
resource: @WebProfilerBundle/Resources/config/routing/profiler.xml
prefix:   /_profiler
Astheprofiler adds some overhead, youmight want toenable itonly under certain circumstances inthe
production environment. The only-exceptions settings limits profiling to500 pages, butwhat ifyou
want togetinformation when theclient IPcomes from aspecific address, orforalimited portion ofthe
website? You can use a request matcher:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19# enables the profiler only for request coming for the 192.168.0.0 network
framework :
profiler :
matcher:{ip:192.168.0.0/24 }
# enables the profiler only for the /admin URLs
framework :
profiler :
matcher:{path:"^/admin/" }
# combine rules
framework :
profiler :
matcher:{ip:192.168.0.0/24 ,path:"^/admin/" }
# use a custom matcher instance defined in the "custom_matcher" service
framework :
profiler :
matcher:{service:custom_matcher }
Learn more from the Cookbook
•How to use the Profiler in a Functional Test
•How to create a custom Data Collector
•How to extend a Class without using Inheritance
•How to customize a Method Behavior without using Inheritance
PDF brought to you by
generated on November 25, 2013Chapter 18: Internals | 235
Chapter 19
The Symfony2 Stable API
The Symfony2 stable API isasubset ofallSymfony2 published public methods (components and core
bundles) that share the following properties:
•The namespace and class name won't change;
•The method name won't change;
•The method signature (arguments and return value type) won't change;
•The semantic of what the method does won't change.
The implementation itself canchange though. The only valid case forachange inthestable API isin
order to fix a security issue.
The stable API isbased onawhitelist, tagged with @api .Therefore, everything nottagged explicitly is
not part of the stable API.
Any third party bundle should also publish its own stable API.
As of Symfony 2.0, the following components have a public tagged API:
•BrowserKit
•ClassLoader
•Console
•CssSelector
•DependencyInjection
•DomCrawler
•EventDispatcher
•Finder
•HttpFoundation
•HttpKernel
•Locale
•Process
•Routing
•Templating
•Translation
PDF brought to you by
generated on November 25, 2013Chapter 19: The Symfony2 Stable API | 236
•Validator
•Yaml
PDF brought to you by
generated on November 25, 2013Chapter 19: The Symfony2 Stable API | 237


