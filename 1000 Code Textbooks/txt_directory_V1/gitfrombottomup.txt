Gi from the bottom upW ed,  Dec by John WiegleyInmypursuittounderstandGit,it’sbeenhelpfulformetounderstanditfromthebottomup—ratherthanlookatitonlyintermsofitshigh-levelcommands.AndsinceGitissobeauti-fullysimplewhenviewedthisway,IthoughtothersmightbeinterestedtoreadwhatI’vefound,and perhaps avoid the pain I went through ﬁnding it.I used Git version 1.5.4.5 for each of the examples found in this document.Contents1. License22. Introduction33. Repository: Directory content tracking5Introducing the blob6Blobs are stored in trees7How trees are made8e beauty of commits10A commit by any other name…12Branching and the power of rebase154. e Index: Meet the middle man20T aking the index farther225. T o reset, or not to reset24Doing a mixed reset24Doing a so reset24Doing a hard reset256. Last links in the chain: Stashing and the reﬂog277. Conclusion308. Further reading31
LicenseisdocumentisprovidedunderthetermsoftheCreativeCommonsAttribution-ShareAlike3.0 United States License, which may be viewed at the following URL:http://creativecommons.org/licenses/by-sa/3.0/us/Inbrief,youmayusethecontentsofthisdocumentforanypurpose,personal,commercialorotherwise,solongasattributiontotheauthorismaintained.Likewise,thedocumentmaybemodiﬁed,andderivativeworksandtranslationsmadeavailable,solongassuchmodiﬁcationsand derivations are oﬀered to the public on equal terms as the original document.http://www.newartisans.com///git-from-the-bottom-up.html© , John Wiegley
-  -
IntroductionW elcometotheworldofGit.Ihopethisdocumentwillhelptoadvanceyourunderstandingofthispowerfulcontenttrackingsystem,andrevealabitofthesimplicityunderlyingit—howev-er dizzying its array of options may seem from the outside.Beforewedivein,thereareafewtermswhichshouldbementionedﬁrst,sincethey’llappearrepeatedly throughout this text:repositoryA repository is a collection of commits, each of which is an archive of what the project's working tree looked like at a past date, whether on your machine or someone else's.  It also deﬁnes  (see below), which identiﬁes the branch or commit the current working tree stemmed from.Lastly, it contains a set of branches and tags, to identify certain commits by name.the indexUnlike other, similar tools you may have used, Git does not commit changes directly from the working tree into the repository.  Instead, changes are ﬁrst registered in something called the index.  ink of it as a way of “conﬁrming” your changes, one by one, before doing a commit (which records all your approved changes at once).  Some ﬁnd it helpful to call it instead as the “staging area” , instead of the index.working treeA working tree is any directory on your ﬁlesystem which has a repository associated with it (typically indicated by the presence of a sub-directory within it named .git.).  It includes all the ﬁles and sub-directories in that directory.commitA commit is a snapshot of your working tree at some point in time.  e state of  (see below) at the time your commit is made becomes that commit’s parent.  is is what creates the notion of  a “revision history” .branchA branch is just a name for a commit (and much more will be said aboutcommits in a moment), also called a reference.  It’s the parentage of a commit which deﬁnes its history, and thus the typical notion of a “branch of development” .tagA tag is also a name for a commit, similar to a branch, except that it al-ways names the same commit, and can have its own description text.http://www.newartisans.com///git-from-the-bottom-up.html© , John Wiegley
-  -
mastere mainline of development in most repositories is done on a branch called “master” .  Although this is a typical default, it is in no way special. is used by your repository to deﬁne what is currently checked out:•If you checkout a branch,  symbolically refers to that branch, indicating that the branch name should be updated aer the next commit operation.•If you checkout a speciﬁc commit,  refers to that commit only. is is referred to as a detached , and occurs, for example, if youcheck out a tag name.eusualﬂowofeventsisthis:Aercreatingarepository,yourworkisdoneintheworkingtree.Onceyourworkreachesasigniﬁcantpoint—thecompletionofabug,theendoftheworkingday,amomentwheneverythingcompiles—youaddyourchangessuccessivelytotheindex.Oncetheindexcontainseverythingyouintendtocommit,yourecorditscontentintherepository.  Here’s a simple diagram that shows a typical project’s life-cycle:
IndexRepositoryWorking TreeChanges to the working tree are registered in the index using git-addChanges are committed to the repository from the state of the index using git-commitEarlier states of the working tree may be checked out from the repository at any time using git-checkout
Withthisbasicpictureinmind1,thefollowingsectionsshallattempttodescribehoweachof these diﬀerent entities is important to the operation of Git.1.Inreality,acheckoutcausescontentsfromtherepositorytobecopiedintotheindex,whichisthenwrittenouttotheworkingtree.Butsincetheuserneverseesthisusageoftheindexduringacheckoutoperation, I felt it would make more sense not to depict it in the diagram.http://www.newartisans.com///git-from-the-bottom-up.html© , John Wiegley
-  -
Repository: Directory content trackingAsmentionedabove,whatGitdoesisquiterudimentary:itmaintainssnapshotsofadirectory’scontents.  Much of its internal design can be understood in terms of this basic task.edesignofaGitrepositoryinmanywaysmirrorsthestructureofaﬁlesystem:Aﬁlesystembeginswitharootdirectory,whichtypicallyconsistsofotherdirectories,mostofwhichhaveleafnodes,orﬁles,thatcontaindata.Meta-dataabouttheseﬁles’contentsisstoredbothinthedirectory(thenames),andinthei-nodesthatreferencethecontentsofthoseﬁle(theirsize,type,permissions,etc).Eachi-nodehasauniquenumberthatidentiﬁesthecontentsofitsrelatedﬁle.Andwhileyoumayhavemanydirectoryentriespointingtoaparticulari-node(i.e., hard-links), it’s the i-node which “owns” the contents stored on your ﬁlesystem.Internally,Gitsharesastrikinglysimilarstructure,albeitwithoneortwokeydiﬀerences.First,itrepresentsyourﬁle’scontentsinblobs,whicharealsoleafnodesinsomethingawfullyclosetoadirectory,calledatree.Justasani-nodeisuniquelyidentiﬁedbyasystem-assignednumber,ablobisnamedbycomputingthehashidofitssizeandcontents.Forallintentsandpurposesthisisjustanarbitrarynumber,likeani-node,exceptthatithastwoadditionalproperties:ﬁrst,itveriﬁestheblob’scontentswillneverchange;andsecond,thesamecontentsshallalwaysberepresentedbythesameblob,nomatterwhereitappears:acrosscommits,acrossrepositories—evenacrossthewholeInternet.Ifmultipletreesreferencethesameblob,thisisjustlikehard-linking:theblobwillnotdisappearfromyourrepositoryaslongasthereisatleastone link remaining to it.ediﬀerencebetweenaGitblobandaﬁlesystem’sﬁleisthatablobstoresnometadataaboutitscontent.Allsuchinformationiskeptinthetreethatholdstheblob.Onetreemayknowthosecontentsasaﬁlenamed“foo”thatwascreatedinAugust2004,whileanothertreemayknowthesamecontentsasaﬁlenamed“bar”thatwascreatedﬁveyearslater.Inanormalﬁlesystem,twoﬁleswiththesamecontentsbutwithsuchdiﬀerentmetadatawouldalwaysberepresentedastwoindependentﬁles.Whythisdiﬀerence?Mainly,it’sbecauseaﬁlesystemisdesignedtosupportﬁlesthatchange,whereasGitisnot.efactthatdataisimmutableintheGitrepositoryiswhatmakesallofthisworkandsoadiﬀerentdesignwasneeded.Andasitturnsout,thisdesignallowsformuchmorecompactstorage,sinceallobjectshavingidenticalcontent can be shared, no matter where they are.http://www.newartisans.com///git-from-the-bottom-up.html© , John Wiegley
-  -
Introducing the blobNowthatthebasicpicturehasbeenpainted,let’sgetintosomepracticalexamples.I’mgoingtostartbycreatingasampleGitrepository,andshowinghowGitworksfromthebottomupinthat repository.  Feel free to follow along as you read:$ mkdir sample; cd sample$ echo 'Hello, world!' > greetingHereI’vecreatedanewﬁlesystemdirectorynamed“sample”whichcontainsaﬁlewhosecontentsareprosaicallypredictable.Ihaven’tevencreatedarepositoryyet,butalreadyIcanstartusingsomeofGit’scommandstounderstandwhatit’sgoingtodo.Firstofall,I’ dliketoknow which hash id Git is going to store my greeting text under:$ git hash-object greetingaf5626b4a114abcb82d63db7c8082c3c4756e51bIfyourunthiscommandonyoursystem,you’llgetthesamehashid.Eventhoughwe’recre-atingtwodiﬀerentrepositories(possiblyaworldapart,even)ourgreetingblobinthosetworepositorieswillhavethesamehashid.Icouldevenpullcommitsfromyourrepositoryintomine,andGitwouldrealizethatwe’retrackingthesamecontent—andsowouldonlystoreonecopy of it!  Pretty cool.enextstepistoinitializeanewrepositoryandcommittheﬁleintoit.I’mgoingtodothisallinonesteprightnow,butthencomebackanddoitagaininstagessoyoucanseewhat’sgoing on underneath:$ git init$ git add greeting$ git commit -m "Added my greeting"Atthispointourblobshouldbeinthesystemexactlyasweexpected,usingthehashidde-terminedabove.Asaconvenience,Gitrequiresonlyasmanydigitsofthehashidasareneces-sary to uniquely identify it within the repository.  Usually just six or seven digits is enough:$ git cat-file -t af5626bblob$ git cat-file blob af5626bHello, world!ereitis!Ihaven’tevenlookedatwhichcommitholdsit,orwhattreeit’sin,butbasedsolelyonthecontentsIwasabletoassumeit’sthere,andthereitis.Itwillalwayshavethissamehttp://www.newartisans.com///git-from-the-bottom-up.html© , John Wiegley
-  -
identiﬁer,nomatterhowlongtherepositorylivesorwheretheﬁlewithinitisstored.eseparticular contents are now veriﬁably preserved, forever.Inthisway,aGitblobrepresentsthefundamentaldataunitinGit.Really,thewholesystemis about blob management.Blobs are stored in treesecontentsofyourﬁlesarestoredinblobs,butthoseblobsareprettyfeatureless.eyhaveno name, no structure — they’re just “blobs” , aer all.InorderforGittorepresentthestructureandnamingofyourﬁles,itattachesblobsasleafnodeswithinatree.Now,Ican’tdiscoverwhichtree(s)abloblivesinjustbylookingatit,sinceitmayhavemany,manyowners.ButIknowitmustlivesomewherewithinthetreeheldbythecommit I just made:$ git ls-tree HEAD100644 blob af5626b4a114abcb82d63db7c8082c3c4756e51b greetingereitis!isﬁrstcommitaddedmygreetingﬁletotherepository.iscommitcon-tains one Git tree, which has a single leaf: the greeting content’s blob.AlthoughIcanlookatthetreecontainingmyblobbypassingtols-tree,Ihaven’tyetseentheunderlyingtreeobjectreferencedbythatcommit.Hereareafewothercommandsto highlight that diﬀerence and thus discover my tree:$ git rev-parse HEAD588483b99a46342501d99e3f10630cfc1219ea32   # different on your system$ git cat-file -t HEADcommit$ git cat-file commit HEADtree 0563f77d884e4f79ce95117e2d686d7d6e282887author John Wiegley <johnw@newartisans.com> 1209512110 -0400committer John Wiegley <johnw@newartisans.com> 1209512110 -0400Added my greetingeﬁrstcommanddecodesthealiasintothecommititreferences,thesecondveriﬁesitstype,whilethethirdcommandshowsthehashidofthetreeheldbythatcommit,aswellastheotherinformationstoredinthecommitobject.ehashidforthecommitisuniquetomyrepository—becauseitincludesmynameandthedatewhenImadethecommit—butthehashidforthetreeshouldbecommonbetweenyourexampleandmine,containingasitdoesthe same blob under the same name.http://www.newartisans.com///git-from-the-bottom-up.html© , John Wiegley
-  -
Let’s verify that this is indeed the same tree object:$ git ls-tree 0563f77100644 blob af5626b4a114abcb82d63db7c8082c3c4756e51b greetingereyouhaveit:myrepositorycontainsasinglecommit,whichreferencesatreethatholdsablob—theblobcontainingthecontentsIwanttorecord.ere’sonemorecommandIcanrun to verify that this is indeed the case:$ find .git/objects -type f | sort.git/objects/05/63f77d884e4f79ce95117e2d686d7d6e282887.git/objects/58/8483b99a46342501d99e3f10630cfc1219ea32.git/objects/af/5626b4a114abcb82d63db7c8082c3c4756e51bFromthisoutputIseethatthewholeofmyrepocontainsthreeobjects,eachofwhosehashidhasappearedintheprecedingexamples.Let’stakeonelastlookatthetypesoftheseobjects,just to satisfy curiosity:$ git cat-file -t 588483b99a46342501d99e3f10630cfc1219ea32commit$ git cat-file -t 0563f77d884e4f79ce95117e2d686d7d6e282887tree$ git cat-file -t af5626b4a114abcb82d63db7c8082c3c4756e51bblobIcouldhaveusedtheshowcommandatthispointtoviewtheconcisecontentsofeachofthese objects, but I’ll leave that as an exercise to the reader.How trees are madeEverycommitholdsasingletree,buthowaretreesmade?Weknowthatblobsarecreatedbystuﬃngthecontentsofyourﬁlesintoblobs—andthattreesownblobs—butwehaven’tyetseen how the tree that holds the blob is made, or how that tree gets linked to its parent commit.Let’sstartwithanewsamplerepositoryagain,butthistimebydoingthingsmanually,soyou can get a feeling for exactly what’s happening under the hood:$ rm -fr greeting .git$ echo 'Hello, world!' > greeting$ git init$ git add greetingItallstartswhenyouﬁrstaddaﬁletotheindex.Fornow,let’sjustsaythattheindexiswhatyouusetoinitiallycreateblobsoutofﬁles.WhenIaddedtheﬁlegreeting,achangeoccurredhttp://www.newartisans.com///git-from-the-bottom-up.html© , John Wiegley
-  -
inmyrepository.Ican’tseethischangeasacommityet,buthereisonewayIcantellwhathappened:$ git log# this will fail, there are no commits!fatal: bad default revision 'HEAD'$ git ls-files --stage# list blob referenced by the index100644 af5626b4a114abcb82d63db7c8082c3c4756e51b 0 greetingWhat’sthis?Ihaven’tcommittedanythingtotherepositoryyet,butalreadyanobjecthascomeintobeing.IthasthesamehashidIstartedthiswholebusinesswith,soIknowitrepre-sentsthecontentsofmygreetingﬁle.Icouldusecat-file-tatthispointonthehashid,andI’ dseethatitwasablob.Itis,infact,thesameblobIgottheﬁrsttimeIcreatedthissamplerepository.esameﬁlewillalwaysresultinthesameblob(justincaseIhaven’tstressedthatenough).isblobisn’treferencedbyatreeyet,norarethereanycommits.Atthemomentitisonlyreferencedfromaﬁlenamed.git/index,whichreferencestheblobsandtreesthatmakeupthecurrent index.  So now let’s make a tree in the repo for our blob to hang oﬀ of:$ git write-tree# record the contents of the index in a tree0563f77d884e4f79ce95117e2d686d7d6e282887isnumbershouldlookfamiliaraswell:atreecontainingthesameblobs(andsub-trees)willalwayshavethesamehashid.Idon’thaveacommitobjectyet,butnowthereisatreeob-jectinthatrepositorywhichholdstheblob.epurposeofthelow-levelwrite-treecom-mandistotakewhateverthecontentsoftheindexareandtuckthemintoanewtreeforthepurpose of creating a commit.Icanmanuallymakeanewcommitobjectbyusingthistreedirectly,whichisjustwhatthecommit-tree command does:$ echo "Initial commit" | git commit-tree 0563f775f1bc85745dcccce6121494fdd37658cb4ad441ferawcommit-treecommandtakesatree’shashidandmakesacommitobjecttoholdit.IfIhadwantedthecommittohaveaparent,Iwouldhavehadtospecifytheparentcommit’shashidexplicitlyusingthe-poption.Also,noteherethatthehashiddiﬀersfromwhatwillap-pearonyoursystem:isisbecausemycommitobjectreferstobothmyname,andthedateatwhich I created the commit, and these two details will always be diﬀerent from yours.Ourworkisnotdoneyet,though,sinceIhaven’tregisteredthecommitasthenewheadofthe current branch:$ echo 5f1bc85745dcccce6121494fdd37658cb4ad441f > .git/refs/heads/masterhttp://www.newartisans.com///git-from-the-bottom-up.html© , John Wiegley
-  -
iscommandtellsGitthatthebranchname“master”shouldnowrefertoourrecentcom-mit.  Another, much safer way to do this is by using the command update-ref:$ git update-ref refs/heads/master 5f1bc857Aercreatingmaster,wemustassociateourworkingtreewithit.Normallythishappensfor you whenever you check out a branch:$ git symbolic-ref HEAD refs/heads/masteriscommandassociatessymbolicallywiththemasterbranch.isissigniﬁcantbe-causeanyfuturecommitsfromtheworkingtreewillnowautomaticallyupdatethevalueofrefs/heads/master.It’shardtobelieveit’sthissimple,butyes,Icannowuselogtoviewmynewlymintedcommit:$ git logcommit 5f1bc85745dcccce6121494fdd37658cb4ad441fAuthor: John Wiegley <johnw@newartisans.com>Date:   Mon Apr 14 11:14:58 2008 -0400    Initial commitAsidenote:ifIhadn’tsetrefs/heads/mastertopointtothenewcommit,itwouldhavebeenconsidered“unreachable” ,sincenothingcurrentlyreferstoitnorisittheparentofareach-ablecommit.Whenthisisthecase,thecommitobjectwillatsomepointberemovedfromtherepository,alongwithitstreeandallitsblobs.(ishappensautomaticallybyacommandcalledgc,whichyourarelyneedtousemanually).Bylinkingthecommittoanamewithinrefs/heads,aswedidabove,itbecomesareachablecommit,whichensuresthatit’skeptaroundfromnow on.The beauty of commitsSomeversioncontrolsystemsmake“branches”intomagicalthings,oendistinguishingthemfromthe“mainline”or“trunk” ,whileothersdiscusstheconceptasthoughitwereverydiﬀerentfromcommits.ButinGittherearenobranchesasseparateentities:thereareonlyblobs,treesandcommits2.Sinceacommitcanhaveoneormoreparents,andthosecommitscanhavepar-ents,thisiswhatallowsasinglecommittobetreatedlikeabranch:becauseitknowsthewholehistory that led up to it.2.W ell, and tags, but these are just fancy references to commits and can be ignored for the time being.http://www.newartisans.com///git-from-the-bottom-up.html© , John Wiegley
-  -
Y oucanexamineallthetop-level,referencedcommitsatanytimeusingthebranchcommand:$ git branch -v* master 5f1bc85 Initial commitSayitwithme:Abranchisnothingmorethananamedreferencetoacommit.Inthisway,branchesandtagsareidentical,withthesoleexceptionthattagscanhavetheirowndescrip-tions,justlikethecommitstheyreference.Branchesarejustnames,buttagsaredescriptive,well, “tags” .Butthefactis,wedon’treallyneedtousealiasesatall.Forexample,ifIwantedto,Icouldreferenceeverythingintherepositoryusingonlythehashidsofitscommits.Here’smebeingstraight up loco and resetting the head of my working tree to a particular commit:$ git reset --hard 5f1bc85e--hardoptionsaystoeraseallchangescurrentlyinmyworkingtree,whetherthey’vebeenregisteredforacheckinornot(morewillbesaidaboutthiscommandlater).Asaferwayto do the same thing is by using checkout:$ git checkout 5f1bc85ediﬀerencehereisthatchangedﬁlesinmyworkingtreearepreserved.IfIpassthe-foptiontocheckout,itactsthesameinthiscasetoreset--hard,exceptthatcheckoutonlyeverchangestheworkingtree,whereasreset--hardchangesthecurrentbranch'storef-erence the speciﬁed version of the tree.Anotherjoyofthecommit-basedsystemisthatyoucanrephraseeventhemostcomplicatedversioncontrolterminologyusingasinglevocabulary.Forexample,ifacommithasmultipleparents,it’sa“mergecommit”—sinceitmergedmultiplecommitsintoone.Or,ifacommithasmultiplechildren,itrepresentstheancestorofa“branch” ,etc.Butreallythereisnodiﬀer-encebetweenthesethingstoGit:toit,theworldissimplyacollectionofcommitobjects,eachofwhichholdsatreethatreferencesothertreesandblobs,whichstoreyourdata.Anythingmore complicated than this is simply a device of nomenclature.Here is a picture of how all these pieces ﬁt together:http://www.newartisans.com///git-from-the-bottom-up.html© , John Wiegley
-  -
A commit by any other name…UnderstandingcommitsisthekeytogrokkingGit.Y ou’llknowyouhavereachedtheZenplateauofbranchingwisdomwhenyourmindcontainsonlycommittopologies,leavingbehindtheconfusionofbranches,tags,localandremoterepositories,etc.Hopefullysuchunderstand-ingwillnotrequireloppingoﬀyourarm3—althoughIcanappreciateifyou’veconsidereditbynow.Ifcommitsarethekey,howyounamecommitsisthedoorwaytomastery.erearemany,manywaystonamecommits,rangesofcommits,andevensomeoftheobjectsheldbycommits,whichareacceptedbymostoftheGitcommands.Here’sasummaryofsomeofthemorebasicusages:branchnameAshasbeensaidbefore,thenameofanybranchissimplyanaliasforthemostrecentcommitonthat“branch” .isisthesameasusing the word  whenever that branch is checked out.
HEADcircles are commit objects, which link to one or more parent commits — back to their original ancestor(s) — thus forming a "history"triangles are tree objects, held by commits and other trees
squares are blob objects, which are why the whole system exists
every commit holds a tree, and every tree may contain any number of other trees and blobs in its leaves3.Cf. the example of the second Zen patriarch, Hui-k’o.http://www.newartisans.com///git-from-the-bottom-up.html© , John Wiegley
-  -
tagnameAtag-namealiasisidenticaltoabranchaliasintermsofnamingacommit.emajordiﬀerencebetweenthetwoisthattagalias-esneverchange,whereasbranchaliaseschangeeachtimeanewcommit is checked in to that branch.HEADecurrentlycheckedoutcommitisalwayscalled.Ifyoucheckoutaspeciﬁccommit—insteadofabranchname—thenreferstothatcommitonlyandnottoanybranch.Notethatthiscaseissomewhatspecial,andiscalled“usingadetached” (I’m sure there’s a joke to be told here…).c82a22c39cbc32…Acommitmayalwaysbereferencedusingitsfull,40-characterhashid.Usuallythishappensduringcut-and-pasting,sincetherearetypicallyother,moreconvenientwaystorefertothesame commit.c82a22cY ouonlyneeduseasmanydigitsofahashidasareneededforauniquereferencewithintherepository.Mostofthetime,sixorseven digits is enough.name^eparentofanycommitisreferencedusingthecaretsymbol.Ifa commit has more than one parent, the ﬁrst is used.name^^Caretsmaybeappliedsuccessively.isaliasrefersto“thepar-ent of the parent” of the given commit name.name^2Ifacommithasmultipleparents(suchasamergecommit),youcan refer to the nth parent using name^n.name~10Acommit’snthancestormaybereferencedusingatilde(~)fol-lowedbytheordinalnumber.istypeofusageiscommonwithrebase-i,forexample,tomean“showmeabunchofrecentcommits” .  is is the same as name^^^^^^^^^^.name:pathToreferenceacertainﬁlewithinacommit’scontenttree,specifythatﬁle’snameaeracolon.isishelpfulwithshow,ortoshow the diﬀerence between two versions of a committed ﬁle:$ git diff HEAD^1:Makefile HEAD^2:Makefilename^{tree}Y oucanreferencejustthetreeheldbyacommit,ratherthanthecommit itself.http://www.newartisans.com///git-from-the-bottom-up.html© , John Wiegley
-  -
name1..name2isandthefollowingaliasesindicatecommitranges,whicharesupremelyusefulwithcommandslikelogforseeingwhat’shap-pened during a particular span of time.esyntaxtothelereferstoallthecommitsreachablefromname2backto,butnotincluding,name1.Ifeithername1orname2 is omitted,  is used in its place.name1...name2A“triple-dot”rangeisquitediﬀerentfromthetwo-dotversionabove.Forcommandslikelog,itreferstoallthecommitsrefer-encedbyname1orname2,butnotbyboth.eresultisthenalist of all the unique commits in both branches.Forcommandslikediff,therangeexpressedisbetweenname2andthecommonancestorofname1andname2.isdiﬀersfromthelogcaseinthatchangesintroducedbyname1arenotshown.master..isusageisequivalentto“master..HEAD”.I’maddingithere,eventhoughit’sbeenimpliedabove,becauseIusethiskindofaliasconstantlywhenreviewingchangesmadetothecurrentbranch...masteris,too,isespeciallyusefulaeryou’vedoneafetchandyouwanttoseewhatchangeshaveoccurredsinceyourlastrebaseormerge.--since="2 weeks ago"Refers to all commits since a certain date.--until=”1 week ago”Refers to all commits up to a certain date.--grep=patternReferstoallcommitswhosecommitmessagematchestheregularexpression pattern.--committer=patternRefers to all commits whose committer matches the pattern.--author=patternReferstoallcommitswhoseauthormatchesthepattern.eau-thorofacommitistheonewhocreatedthechangesitrepresents.Forlocaldevelopmentthisisalwaysthesameasthecommitter,butwhenpatchesarebeingsentbye-mail,theauthorandthecommitter usually diﬀer.http://www.newartisans.com///git-from-the-bottom-up.html© , John Wiegley
-  -
--no-mergesReferstoallcommitsintherangethathaveonlyoneparent—that is, it ignores all merge commits.Mostoftheseoptionscanbemixed-and-matched.Hereisanexamplewhichshowsthefol-lowinglogentries:changesmadetothecurrentbranch(branchedfrommaster),bymyself,within the last month, which contain the text “foo”:$ git log --grep='foo' --author='johnw' --since="1 month ago" master..Branching and the power of rebaseOneofGit’smostcapablecommandsformanipulatingcommitsistheinnocently-namedre-basecommand.Basically,everybranchyouworkfromhasoneormore“basecommits”:thecommitsthatbranchwasbornfrom.Ta kethefollowingtypicalscenario,forexample.Notethatthearrowspointbackintimebecauseeachcommitreferencesitsparent(s),butnotitschil-dren.  erefore, the D and Z commits represent the heads of their respective branches:
ABCDWXYZ
Inthiscase,runningbranchwouldshowtwo“heads”:DandZ,withthecommonparentofboth branches being A.  e output of show-branch shows us just this information:$ git branch  Z* D$ git show-branch! [Z] Z * [D] D-- * [D] D * [D^] C * [D~2] B+  [Z] Z+  [Z^] Y+  [Z~2] X+  [Z~3] W+* [D~3] AReadingthisoutputtakesalittlegettingusedto,butessentiallyit’snodiﬀerentfromthedi-agram above.  Here’s what it tells us:http://www.newartisans.com///git-from-the-bottom-up.html© , John Wiegley
-  -
•ebranchwe’reonexperienceditsﬁrstdivergenceatcommitA(alsoknownascom-mitD~3,andevenZ~4ifyoufeelsoinclined).esyntaxcommit^isusedtorefertotheparentofacommit,whilecommit~3referstoitsthirdparent,orgreat-grandparent.•Readingfrombottomtotop,theﬁrstcolumn(theplussigns)showsadivergentbranch named Z with four commits: W, X, Y and Z.•esecondcolumn(theasterisks)showthecommitswhichhappenedonthecurrentbranch, namely three commits: B, C and D.•etopoftheoutput,separatedfromthebottombyadividingline,identiﬁesthebranchesdisplayed,whichcolumntheircommitsarelabelledby,andthecharacterused for the labeling.eactionwe’dliketoperformistobringtheworkingbranchZbackuptospeedwiththemain branch, D.  In other words, we want to incorporate the work from B, C, and D into Z.Inotherversioncontrolsystemsthissortofthingcanonlybedoneusinga“branchmerge” .Infact,abranchmergecanstillbedoneinGit,usingmerge,andremainsneedfulinthecasewhereZisapublishedbranchandwedon’twanttoalteritscommithistory.Herearethecom-mands to run:$ git checkout Z# switch to the Z branch$ git merge D# merge commits B, C and D into Zis is what the repository looks like aerward:
Z' (Z+D)ABCDWXYZ
IfwecheckedouttheZbranchnow,itwouldcontainthecontentsofthepreviousZ(nowreferenceableasZ^),mergedwiththecontentsofD.(oughnote:arealmergeoperationwould have required resolving any conﬂicts between the states of D and Z).AlthoughthenewZnowcontainsthechangesfromD,italsoincludesanewcommittorep-resentthemergingofZwithD:thecommitnowshownasZ’.iscommitdoesn’taddanythingnew,butrepresentstheworkdonetobringDandZtogether.Inasenseit’sa“meta-commit” ,be-causeitscontentsarerelatedtoworkdonesolelyintherepository,andnottonewworkdoneinthe working tree.http://www.newartisans.com///git-from-the-bottom-up.html© , John Wiegley
-  -
ereisaway,however,totransplanttheZbranchstraightontoD,eﬀectivelymovingitfor-ward in time: by using the powerful rebase command.  Here’s the graph we’re aiming for:
ABCDW'X'Y'Z'
isstateofaﬀairsmostdirectlyrepresentswhatwe’dlikedone:forourlocal,developmentbranchZtobebasedonthelatestworkinthemainbranchD.at’swhythecommandiscalled“rebase” ,becauseitchangesthebasecommitofthebranchit’srunfrom.Ifyourunitrepeatedly,youcancarryforwardasetofpatchesindeﬁnitely,alwaysstayingup-to-datewiththemainbranch,butwithoutaddingunnecessarymergecommitstoyourdevelopmentbranch4.Herearethe commands to run, compared to the merge operation performed above:$ git checkout Z# switch to the Z branch$ git rebase D# change Z’s base commit to point to DWhyisthisonlyforlocalbranches?Becauseeverytimeyourebase,you’repotentiallychangingeverycommitinthebranch.Earlier,whenWwasbasedonA,itcontainedonlythechangesneededtotransformAintoW.Aerrunningrebase,however,WwillberewrittentocontainthechangesnecessarytotransformDintoW’.EventhetransformationfromWtoXischanged,becauseA+W+XisnowD+W’+X’—andsoon.Ifthiswereabranchwhosechangesareseenbyotherpeople,andanyofyourdownstreamconsumershadcreatedtheirownlocalbranches oﬀ of Z, their branches would now point to the old Z, not the new Z’.Generally,thefollowingruleofthumbcanbeused:Userebaseifyouhavealocalbranchwithnootherbranchesthathavebranchedoﬀfromit,andusemergeforallothercases.mergeis also useful when you’re ready to pull your local branch’s changes back into the main branch.Interactive rebasingWhenrebasewasrunabove,itautomaticallyrewroteallthecommitsfromWtoZinordertorebasetheZbranchontotheDcommit(i.e.,theheadcommitoftheDbranch).Y oucan,how-ever,takecompletecontroloverhowthisrewritingisdone.Ifyousupplythe-ioptiontore-4.Notethattherearevalidreasonsfornotdoingthis,andusingmergeinstead.echoicedependsonyoursituation.Onedownsidetorebasingisthateveniftherebasedworkingtreecompiles,thereisnoguaranteethattheintermediatecommitscompileanymoresincetheywerenevercompiledintheirnewlyrebased state.  If historical validity matters to you, prefer merging.http://www.newartisans.com///git-from-the-bottom-up.html© , John Wiegley
-  -
base,itwillpopyouintoaneditingbuﬀerwhereyoucanchoosewhatshouldbedoneforeverycommit in the local Z branch:pickis is the default behavior chosen for every commit in the branch if you don’t use interactive mode.  It means that the commit in question should be applied to its (now rewritten) parent commit.  For every commit that involves conﬂicts, the rebase command gives you an opportunity to re-solve them.squashA squashed commit will have its contents “folded” into the contents of the commit preceding it.  is can be done any number of times.  If you took the example branch above and squashed all of its commits (except the ﬁrst, which must be a pick in order to squash), you would end up with a new Z branch containing only one commit on top of D.  Useful if you have changes spread over multiple commits, but you’d like the history rewritten to show them all as a single commit.editIf you mark a commit as edit, the rebasing process will stop at that commit and leave you at the shell with the current working tree set to reﬂect that commit.  e index will have all the commit’s changes registered for inclu-sion when you run commit.  Y ou can thus make whatever changes you like: amend a change, undo a change, etc.; and aer committing, and running rebase --continue, the commit will be rewritten as if those changes had been made originally.(drop)If you remove a commit from the interactive rebase ﬁle, or if you comment it out, the commit will simply disappear as if it had never been checked in.  Note that this can cause merge conﬂicts if any of the later commits in the branch depended on those changes.epowerofthiscommandishardtoappreciateatﬁrst,butitgrantsyouvirtuallyunlimit-ed control over the shape of any branch.  Y ou can use it to:•Collapse multiple commits into single ones.•Re-order commits.•Remove incorrect changes you now regret.•Move the base of your branch onto any other commit in the repository.•Modify a single commit, to amend a change long aer the fact.http://www.newartisans.com///git-from-the-bottom-up.html© , John Wiegley
-  -
Irecommendreadingthemanpageforrebaseatthispoint,asitcontainsseveralgoodexampleshowthetruepowerofthisbeastmaybeunleashed.Togiveyouonelasttasteofhowpotentatoolthisis,considerthefollowingscenarioandwhatyou’ddoifonedayyouwantedtomigrate the secondary branch L to become the new head of Z:
ABCDWXYZIJKL
epicturereads:wehaveourmain-lineofdevelopment,D,whichthreecommitsagowasbranchedtobeginspeculativedevelopmentonZ.Atsomepointinthemiddleofallthis,backwhenCandXweretheheadsoftheirrespectivebranches,wedecidedtobeginanotherspecula-tionwhichﬁnallyproducedL.Nowwe’vefoundthatL’scodeisgood,butnotquitegoodenoughtomergebackovertothemain-line,sowedecidetomovethosechangesovertothede-velopmentbranchZ,makingitlookasthoughwe’ddonethemallononebranchaerall.Oh,andwhilewe’reatit,wewanttoeditJrealquicktochangethecopyrightdate,sinceweforgotitwas  when we made the change!  Here are the commands needed to untangle this knot:$ git checkout L$ git rebase -i ZAer resolving whatever conﬂicts emerge, I now have this repository:
ABCDWXYZI'J'K'L'(B + C +)
Asyoucansee,whenitcomestolocaldevelopment,rebasinggivesyouunlimitedcontrolover how your commits appear in the repository.http://www.newartisans.com///git-from-the-bottom-up.html© , John Wiegley
-  -
The Index: Meet the middle manBetweenyourdataﬁles,whicharestoredontheﬁlesystem,andyourGitblobs,whicharestoredintherepository,therestandsasomewhatstrangeentity:theGitindex.Partofwhatmakesthisbeasthardtounderstandisthatit’sgotaratherunfortunatename.It’sanindexinthesensethatitreferstothesetofnewlycreatedtreesandblobswhichyoucreatedbyrunningadd.esenewobjectswillsoongetboundintoanewtreeforthepurposeofcommittingtoyourreposito-ry—butuntilthen,theyareonlyreferencedbytheindex.atmeansthatifyouunregisterachangefromtheindexwithreset,you’llendupwithanorphanedblobthatwillgetdeletedatsome point at the future.eindexisreallyjustastagingareaforyournextcommit,andthere’sagoodreasonwhyitexists:itsupportsamodelofdevelopmentthatmaybeforeigntousersoforSubversion,but which is all too familiar to Darcs users: the ability to build up your next commit in stages.
HEADIndexWorking treeThe state of the index becomes the tree of the next commit
Files, directories and "hunks" (individual changes within a /f_ile) are added to the index using git-add and git-add --patchNEW HEAD
First,letmesaythatthereisawaytoignoretheindexalmostentirely:bypassingthe-aﬂagtocommit.LookatthewaySubversionworks,forexample.Whenyoutypesvnstatus,whatyou’llseeisalistofactionstobeappliedtoyourrepositoryonthenextcalltosvncommit.Inaway,this“listofnextactions”isakindofinformalindex,determinedbycomparingthestateofyourworkingtreewiththestateof.Iftheﬁlefoo.chasbeenchanged,onyournextcom-http://www.newartisans.com///git-from-the-bottom-up.html© , John Wiegley
-  -
mitthosechangeswillbesaved.Ifanunknownﬁlehasaquestionmarknexttoit,itwillbeig-nored; but a new ﬁle which has been added with svn add will get added to the repository.isisnodiﬀerentfromwhathappensifyouusecommit-a:new,unknownﬁlesareig-nored,butnewﬁleswhichhavebeenaddedwithaddareaddedtotherepository,asareanychangestoexistingﬁles.isinteractionisnearlyidenticalwiththeSubversionwayofdoingthings.erealdiﬀerenceisthatintheSubversioncase,your“listofnextactions”isalwaysdeter-minedbylookingatthecurrentworkingtree.InGit,the“listofnextactions”isthecontentsoftheindex,whichrepresentswhatwillbecomethenextstateof,andthatyoucanmanipu-latedirectlybeforeexecutingcommit.isgivesyouanextralayerofcontroloverwhat’sgoingto happen, by allowing you to stage those changes in advance.Ifthisisn’tclearyet,considerthefollowingexample:youhaveatrustysourceﬁle,foo.c,andyou’vemadetwosetsofunrelatedchangestoit.Whatyou’dliketodoistoteaseapartthesechangesintotwodiﬀerentcommits,eachwithitsowndescription.Here’showyou’ddothisinSubversion:$ svn diff foo.c > foo.patch$ vi foo.patch<edit foo.patch, keeping the changes I want to commit later>$ patch -p1 -R < foo.patch    # remove the second set of changes$ svn commit -m "First commit message"$ patch -p1 < foo.patch       # re-apply the remaining changes$ svn commit -m "Second commit message"Soundslikefun?Nowrepeatthatmanytimesoverforacomplex,dynamicsetofchanges.Here’s the Git version, making use of the index:$ git add --patch foo.c<select the hunks I want to commit first>$ git commit -m "First commit message"$ git add foo.c               # add the remaining changes$ git commit -m "Second commit message"What’smore,itgetseveneasier!IfyoulikeEmacs,thesuperlativetoolgitsum.el5,byChristianNeukirchan,putsabeautifulfaceonthispotentiallytediousprocess.Irecentlyuseditto tease apart 11 separate commits from a set of conﬂated changes.  ank you, Christian!5.http://chneukirchen.org/blog/archive/2008/02/introducing-gitsum.htmlhttp://www.newartisans.com///git-from-the-bottom-up.html© , John Wiegley
-  -
Taking the index fartherLet’ssee,theindex…Withityoucanpre-stageasetofchanges,thusiterativelybuildingupapatch before committing it to the repository.  Now, where have I heard that concept before…Ifyou’rethinking“Quilt!” ,you’reexactlyright.Infact,theindexislittlediﬀerentfromQuilt6, it just adds the restriction of allowing only one patch to be constructed at a time.Butwhatif,insteadoftwosetsofchangeswithinfoo.c,Ihadfour?WithplainGit,I’ dhavetoteaseeachoneout,commitit,andthenteaseoutthenext.isismademucheasierus-ingtheindex,butwhatifIwantedtotestthosechangesinvariouscombinationwitheachotherbeforecheckingthemin?atis,ifIlabelledthepatchesA,B,CandD,whatifIwantedtotestA+B,thenA+C,thenA+D,etc.,beforedecidingifanyofthechangesweretrulycomplete?ereisnomechanisminGititselfthatallowsyoutomixandmatchparallelsetsofchangesontheﬂy.Sure,multiplebranchescanletyoudoparalleldevelopment,andtheindexletsyoustagemultiplechangesintoaseriesofcommits,butyoucan’tdobothatonce:stagingaseriesofpatcheswhileatthesametimeselectivelyenablinganddisablingsomeofthem,toverifythein-tegrity of the patches in concert before ﬁnally committing them.Whatyou’dneedtodosomethinglikethisisanindexwhichallowsforgreaterdepththanone commit at a time.  is is exactly what Stacked Git7 provides.Here’s how I’d commit two diﬀerent patches into my working tree using plain Git:$ git add -i# select first set of changes$ git commit -m "First commit message"$ git add -i# select second set of changes$ git commit -m "Second commit message"isworksgreat,butIcan’tselectivelydisabletheﬁrstcommitinordertotestthesecondone alone.  T o do that, I’d have to do the following:
6.http://savannah.nongnu.org/projects/quilt7.http://procode.org/stgithttp://www.newartisans.com///git-from-the-bottom-up.html© , John Wiegley
-  -
$ git log# find the hash id of the first commit$ git checkout -b work <first commit’s hash id>^$ git cherry-pick <second commit’s hash id><...  run tests ...>$ git checkout master# go back to the master "branch"$ git branch -D work# remove my temporary branchSurelytherehastobeabetterway!WithstgIcanqueueupbothpatchesandthenre-ap-plytheminwhateverorderIlike,forindependentorcombinedtesting,etc.Here’showI’ dqueue the same two patches from the previous example, using stg:$ stg new patch1$ git add -i# select first set of changes$ stg refresh --index$ stg new patch2$ git add -i# select second set of changes$ stg refresh --indexNowifIwanttoselectivelydisabletheﬁrstpatchtotestonlythesecond,it’sverystraightforward:$ stg appliedpatch1patch2<...  do tests using both patches ...>$ stg pop patch1<...  do tests using only patch2 ...>$ stg pop patch2$ stg push patch1<...  do tests using only patch1 ...>$ stg push -a$ stg commit -a# commit all the patchesisisdeﬁnitelyeasierthancreatingtemporarybranchesandusingcherry-picktoapplyspeciﬁc commit ids, followed by deleting the temporary branch.http://www.newartisans.com///git-from-the-bottom-up.html© , John Wiegley
-  -
To reset, or not to resetOneofthemorediﬃcultcommandstomasterinGitisreset,whichseemstobitepeoplemoreoenthanothercommands.Whichisunderstandable,givingthatithasthepotentialtochangebothyourworkingtreeandyourcurrentreference.SoIthoughtaquickreviewofthiscommand would be useful.Basically,resetisareferenceeditor,anindexeditor,andaworkingtreeeditor.isispart-lywhatmakesitsoconfusing,becauseit’scapableofdoingsomanyjobs.Let’sexaminethediﬀerence between these three modes, and how they ﬁt into the Git commit model.Doing a mixed resetIfyouusethe--mixedoption(ornooptionatall,asthisisthedefault),resetwillrevertpartsofyourindexalongwithyourreferencetomatchthegivencommit.emaindiﬀerencefrom --soft is that --soft only changes the meaning of  and doesn’t touch the index. $ git add foo.c    # add changes to the index as a new blob$ git reset HEAD    # delete any changes staged in the index$ git add foo.c    # made a mistake, add it backDoing a soft resetIfyouusethe--softoptiontoreset,thisisthesameassimplychangingyourreferencetoadiﬀerentcommit.Y ourworkingtreechangesareleuntouched.ismeansthefollowingtwo commands are equivalent:$ git reset --soft HEAD^     # backup HEAD to its parent,                             # effectively ignoring the last commit$ git update-ref HEAD HEAD^  # does the same thing, albeit manuallyInbothcases,yourworkingtreenowsitsontopofanolder,soyoushouldseemorechangesifyourunstatus.It’snotthatyourﬁlehavebeenchanged,simplythattheyarenowbeingcomparedagainstanolderversion.Itcangiveyouachancetocreateanewcommitinplaceoftheoldone.Infact,ifthecommityouwanttochangeisthemostrecentonecheckedin,youcanusecommit--amendtoaddyourlatestchangestothelastcommitasifyou’ddonethem together.Butpleasenote:ifyouhavedownstreamconsumers,andthey’vedoneworkontopofyourprevioushead—theoneyouthrewaway—changinglikethiswillforceamergetohap-http://www.newartisans.com///git-from-the-bottom-up.html© , John Wiegley
-  -
penautomaticallyaertheirnextpull.Belowiswhatyourtreewouldlooklikeaerasoresetand a new commit:
Andhere’swhatyourconsumer’sHEADwouldlooklikeaertheypulledagain,withcolorsto show how the various commits match up:
Doing a hard resetAhardreset(the--hardoption)hasthepotentialofbeingverydangerous,asit’sabletodotwodiﬀerentthingsatonce:First,ifyoudoahardresetagainstyourcurrent,itwilleraseallchanges in your working tree, so that your current ﬁles match the contents of .ereisalsoanothercommand,checkout,whichoperatesjustlikereset--hardifthein-dex is empty.  Otherwise, it forces your working tree to match the index.Now,ifyoudoahardresetagainstanearliercommit,it’sthesameasﬁrstdoingasoresetandthenusingreset--hardtoresetyourworkingtree.us,thefollowingcommandsareequivalent:$ git reset --hard HEAD~3   # Go back in time, throwing away changes$ git reset --soft HEAD~3   # Set HEAD to point to an earlier commit$ git reset --hard          # Wipe out differences in the working treeAsyoucansee,doingahardresetcanbeverydestructive.Fortunately,thereisasaferwaytoachieve the same eﬀect, using the Git stash (see the next section):$ git stash$ git checkout -b new-branch HEAD~3   # head back in time!
new HEADHEAD^
old HEAD (in reﬂog for 30 more days)
their previous HEADnew merged HEADhttp://www.newartisans.com///git-from-the-bottom-up.html© , John Wiegley
-  -
isapproachhastwodistinctadvantagesifyou’renotsurewhetheryoureallywanttomodify the current branch just now:1.Itsavesyourworkinthestash,whichyoucancomebacktoatanytime.Notethatthestashisnotbranchspeciﬁc,soyoucouldpotentiallystashthestateofyourtreewhile on one branch, and later apply the diﬀerences to another.2.Itrevertsyourworkingtreebacktoapaststate,butonanewbranch,soifyoude-cidetocommityourchangesagainstthepaststate,youwon’thavealteredyourorig-inal branch.Ifyoudomakechangestonew-branchandthendecideyouwantittobecomeyournewmaster branch, run the following commands:$ git branch -D master             # goodbye old master (still in reflog)$ git branch -m new-branch master  # the new-branch is now my masteremoralofthisstoryis:althoughyoucandomajorsurgeryonyourcurrentbranchusingreset--softandreset--hard(whichchangestheworkingtreetoo),whywouldyouwantto?Gitmakesworkingwithbranchessoeasyandcheap,it’salmostalwaysworthittodoyourdestructivemodiﬁcationsonabranch,andthenmovethatbranchovertotaketheplaceofyourold master.  It has an almost Sith-like appeal to it…Andwhatifyoudoaccidentallyrunreset--hard,losingnotonlyyourcurrentchangesbutalsoremovingcommitsfromyourmasterbranch?W ell,unlessyou’vegottenintothehabitofusingstashtotakesnapshots(seenextsection),there’snothingyoucandotorecoveryourlostworkingtree.Butyoucanrestoreyourbranchtoitspreviousstatebyagainusingreset--hard with the reﬂog (this will also be explained in the next section):$ git reset --hard HEAD@{1}   # restore from reflog before the changeTobeonthesafeside,neverusereset--hardwithoutﬁrstrunningstash.Itwillsaveyoumanywhitehairslateron.Ifyoudidrunstash,youcannowuseittorecoveryourworkingtreechanges as well:$ git stash                   # because it's always a good thing to do$ git reset --hard HEAD~3     # go back in time$ git reset --hard HEAD@{1}   # oops, that was a mistake, undo it!$ git stash apply             # and bring back my working tree changeshttp://www.newartisans.com///git-from-the-bottom-up.html© , John Wiegley
-  -
Last links in the chain: Stashing and the reﬂogUntilnowwe’vedescribedtwowaysinwhichblobsﬁndtheirwayintoGit:ﬁrstthey’recreatedinyourindex,bothwithoutaparenttreeandwithoutanowningcommit;andthenthey’recommittedintotherepository,wheretheyliveasleaveshangingoﬀofthetreeheldbythatcom-mit.  But there are two other ways a blob can dwell in your repository.eﬁrstoftheseistheGitreﬂog,akindofmeta-repositorythatrecords—intheformofcommits—everychangeyoumaketoyourrepository.ismeansthatwhenyoucreateatreefromyourindexandstoreitunderacommit(allofwhichisdonebycommit),youarealsoinad-vertently adding that commit to the reﬂog, which can be viewed using the following command:$ git reflog5f1bc85...  HEAD@{0}: commit (initial): Initial commitebeautyofthereﬂogisthatitpersistsindependentlyofotherchangesinyourrepository.ismeansIcouldunlinktheabovecommitfrommyrepository(usingreset),yetitwouldstillbereferencedbythereﬂogforanother30days,protectingitfromgarbagecollection.isgivesme a month’s chance to recover the commit should I discover I really need it.eotherplaceblobscanexist,albeitindirectly,isinyourworkingtreeitself.WhatImeanis,sayyou’vechangedaﬁlefoo.cbutyouhaven’taddedthosechangestotheindexyet.Gitmaynothavecreatedablobforyou,butthosechangesdoexist,meaningthecontentexists—itjustlivesinyourﬁlesysteminsteadofGit’srepository.eﬁleevenhasitsownhashid,de-spite the fact no real blob exists.  Y ou can view it with this command:$ git hash-object foo.c<some hash id>Whatdoesthisdoforyou?W ell,ifyouﬁndyourselfhackingawayonyourworkingtreeand you reach the end of a long day, a good habit to get into is to stash away your changes:$ git stashistakesallyourdirectory’scontents—includingbothyourworkingtree,andthestateoftheindex—andcreatesblobsfortheminthegitrepository,atreetoholdthoseblobs,andapairofstashcommitstoholdtheworkingtreeandindexandrecordthetimewhenyoudidthestash.isisagoodpracticebecause,althoughthenextdayyou’lljustpullyourchangesbackoutofthestashwithstashapply,you’llhaveareﬂogofallyourstashedchangesattheendofeveryhttp://www.newartisans.com///git-from-the-bottom-up.html© , John Wiegley
-  -
day.Here’swhatyou’ddoaercomingbacktoworkthenextmorning(herestandsfor“W ork in progress”):$ git stash liststash@{0}: WIP on master: 5f1bc85...  Initial commit$ git reflog show stash# same output, plus the stash commit's hash id2add13e...  stash@{0}: WIP on master: 5f1bc85...  Initial commit$ git stash applyBecauseyourstashedworkingtreeisstoredunderacommit,youcanworkwithitlikeanyotherbranch—atanytime!ismeansyoucanviewthelog,seewhenyoustashedit,andcheckout any of your past working trees from the moment when you stashed them:$ git stash liststash@{0}: WIP on master: 73ab4c1...  Initial commit...stash@{32}: WIP on master: 5f1bc85...  Initial commit$ git log stash@{32}                # when did I do it?$ git show stash@{32}               # show me what I was working on$ git checkout -b temp stash@{32}   # let’s see that old working tree!islastcommandisparticularlypowerful:behold,I’mnowplayingaroundinanuncom-mittedworkingtreefromoveramonthago.Ineverevenaddedthoseﬁlestotheindex;Ijustusedthesimpleexpedientofcallingstashbeforeloggingouteachday(providedyouactuallyhad changes in your working tree to stash), and used stash apply when I logged back in.Ifyoueverwanttocleanupyourstashlist—saytokeeponlythelast30daysofactivity—don’t use stash clear; use the reflog expire command instead:$ git stash clear# DON'T!  You'll lose all that history$ git reflog expire --expire=30.days refs/stash<outputs the stash bundles that've been kept>ebeautyofstashisthatitletsyouapplyunobtrusiveversioncontroltoyourworkingprocessitself:namely,thevariousstagesofyourworkingtreefromdaytoday.Y oucanevenusestash on a regular basis if you like, with something like the following snapshot script:http://www.newartisans.com///git-from-the-bottom-up.html© , John Wiegley
-  -
$ cat <<EOF > /usr/local/bin/git-snapshot#!/bin/shgit stash && git stash applyEOF$ chmod +x $_$ git snapshotere’snoreasonyoucouldn’trunthisfromacronjobeveryhour,alongwithrunningthereflog expire command every week or month.http://www.newartisans.com///git-from-the-bottom-up.html© , John Wiegley
-  -
ConclusionOvertheyearsI’veusedmanyversioncontrolsystems,andmanybackupschemes.eyallhavefacilitiesforretrievingthepastcontentsofaﬁle.Mostofthemhavewaystoshowhowaﬁlehasdiﬀeredovertime.Manypermityoutogobackintime,beginadivergentlineofreasoning,andthenlaterbringthesenewthoughtsbacktothepresent.Stillfeweroﬀerﬁne-grainedcontroloverthatprocess,allowingyoutocollectyourthoughtshoweveryoufeelbesttopresentyourideastothepublic.Gitletsyoudoallthesethings,andwithrelativeease—onceyouunder-stand its fundamentals.It’snottheonlysystemwiththiskindofpower,nordoesitalwaysemploythebestinterfacetoitsconcepts.Whatitdoeshave,however,isasolidbasetoworkfrom.Inthefuture,Iimag-inemanynewmethodswillbedevisedtotakeadvantageoftheﬂexibilitiesGitallows.Mostothersystemshaveledmetobelievethey’vereachedtheirconceptualplateau—thatallelsefromnowwillbeonlyaslowreﬁnementofwhatI’veseenbefore.Gitgivesmetheoppositeim-pression,however.Ifeelwe’veonlybeguntoseethepotentialitsdeceptivelysimpledesignpromises.THE ENDhttp://www.newartisans.com///git-from-the-bottom-up.html© , John Wiegley
-  -
Further readingIf your interest to learn Git more has been piqued, please check out the following articles:•A tour of Git: the basicshttp://cworth.org/hgbook-git/tour/•Manage source code using Githttp://www.ibm.com/developerworks/linux/library/l-git/•A tutorial introduction to githttp://www.kernel.org/pub/soware/scm/git/docs/tutorial.html•GitFaq — GitWikihttp://git.or.cz/gitwiki/GitFaq•A git core tutorial for developershttp://www.kernel.org/pub/soware/scm/git/docs/gitcore-tutorial.html•git for the confusedhttp://www.gelato.unsw.edu.au/archives/git/0512/13748.html•e ing About Githttp://tomayko.com/writings/the-thing-about-githttp://www.newartisans.com///git-from-the-bottom-up.html© , John Wiegley
-  -
