Python for Everybody
Exploring Data Using Python 3
Charles R. Severance
Credits
Editorial Support: Elliott Hauser, Sue Blumenberg
Cover Design: Aimee Andrion
Printing History
• 2016-Jul-05 First Complete Python 3.0 version
• 2015-Dec-20 Initial Python 3.0 rough conversion
Copyright Details
Copyright ~2009- Charles Severance.
This work is licensed under a Creative Commons Attribution-NonCommercial-
ShareAlike 3.0 Unported License. This license is available at
http://creativecommons.org/licenses/by-nc-sa/3.0/
You can see what the author considers commercial and non-commercial uses of this
material as well as license exemptions in the Appendix titled “Copyright Detai l”.
iii
Preface
Remixing an Open Book
It is quite natural for academics who are continuously told to “publish or peri sh”
to want to always create something from scratch that is their own fresh crea tion.
This book is an experiment in not starting from scratch, but instead “remixi ng”
the book titled Think Python: How to Think Like a Computer Scientist written
by Allen B. Downey, Jeﬀ Elkner, and others.
In December of 2009, I was preparing to teach SI502 - Networked Programming at
the University of Michigan for the ﬁfth semester in a row and decided it was time to
write a Python textbook that focused on exploring data instead of understanding
algorithms and abstractions. My goal in SI502 is to teach people lifelong data
handling skills using Python. Few of my students were planning to be professional
computer programmers. Instead, they planned to be librarians, managers, lawyers,
biologists, economists, etc., who happened to want to skillfully use technolog y in
their chosen ﬁeld.
I never seemed to ﬁnd the perfect data-oriented Python book for my course, so I
set out to write just such a book. Luckily at a faculty meeting three weeks befor e
I was about to start my new book from scratch over the holiday break, Dr. At ul
Prakash showed me the Think Python book which he had used to teach his Python
course that semester. It is a well-written Computer Science text with a focus on
short, direct explanations and ease of learning.
The overall book structure has been changed to get to doing data analysis problems
as quickly as possible and have a series of running examples and exercises about
data analysis from the very beginning.
Chapters 2–10 are similar to the Think Python book, but there have been major
changes. Number-oriented examples and exercises have been replaced with data-
oriented exercises. Topics are presented in the order needed to build increasingly
sophisticated data analysis solutions. Some topics like tryandexcept are pulled
forward and presented as part of the chapter on conditionals. Functions are given
very light treatment until they are needed to handle program complexity rather
than introduced as an early lesson in abstraction. Nearly all user-deﬁned functions
have been removed from the example code and exercises outside of Chapter 4. The
word “recursion”1does not appear in the book at all.
In chapters 1 and 11–16, all of the material is brand new, focusing on real-worl d
uses and simple examples of Python for data analysis including regular expressions
for searching and parsing, automating tasks on your computer, retrieving data
across the network, scraping web pages for data, object-oriented programming,
using web services, parsing XML and JSON data, creating and using databases
using Structured Query Language, and visualizing data.
The ultimate goal of all of these changes is to shift from a Computer Science to an
Informatics focus and to only include topics into a ﬁrst technology class that can
be useful even if one chooses not to become a professional programmer.
1Except, of course, for this line.
iv
Students who ﬁnd this book interesting and want to further explore should look
at Allen B. Downey’s Think Python book. Because there is a lot of overlap be-
tween the two books, students will quickly pick up skills in the additional a reas of
technical programming and algorithmic thinking that are covered in Think Python .
And given that the books have a similar writing style, they should be able to move
quickly through Think Python with a minimum of eﬀort.
As the copyright holder of Think Python , Allen has given me permission to change
the book’s license on the material from his book that remains in this book f rom the
GNU Free Documentation License to the more recent Creative Commons Attribu-
tion — Share Alike license. This follows a general shift in open documentation
licenses moving from the GFDL to the CC-BY-SA (e.g., Wikipedia). Using the
CC-BY-SA license maintains the book’s strong copyleft tradition while mak ing it
even more straightforward for new authors to reuse this material as they see ﬁt.
I feel that this book serves as an example of why open materials are so impo rtant
to the future of education, and I want to thank Allen B. Downey and Cambridge
University Press for their forward-looking decision to make the book avai lable
under an open copyright. I hope they are pleased with the results of my eﬀorts
and I hope that you, the reader, are pleased with ourcollective eﬀorts.
I would like to thank Allen B. Downey and Lauren Cowles for their help, patience,
and guidance in dealing with and resolving the copyright issues around this book.
Charles Severance
www.dr-chuck.com
Ann Arbor, MI, USA
September 9, 2013
Charles Severance is a Clinical Associate Professor at the University of Mic higan
School of Information.
Contents
1 Why should you learn to write programs? 1
1.1 Creativity and motivation . . . . . . . . . . . . . . . . . . . . . . . 2
1.2 Computer hardware architecture . . . . . . . . . . . . . . . . . . . 3
1.3 Understanding programming . . . . . . . . . . . . . . . . . . . . . 4
1.4 Words and sentences . . . . . . . . . . . . . . . . . . . . . . . . . . 5
1.5 Conversing with Python . . . . . . . . . . . . . . . . . . . . . . . . 6
1.6 Terminology: Interpreter and compiler . . . . . . . . . . . . . . . . 8
1.7 Writing a program . . . . . . . . . . . . . . . . . . . . . . . . . . . 10
1.8 What is a program? . . . . . . . . . . . . . . . . . . . . . . . . . . 10
1.9 The building blocks of programs . . . . . . . . . . . . . . . . . . . . 11
1.10 What could possibly go wrong? . . . . . . . . . . . . . . . . . . . . 12
1.11 Debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14
1.12 The learning journey . . . . . . . . . . . . . . . . . . . . . . . . . . 15
1.13 Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15
1.14 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16
2 Variables, expressions, and statements 19
2.1 Values and types . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19
2.2 Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20
2.3 Variable names and keywords . . . . . . . . . . . . . . . . . . . . . . 21
2.4 Statements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21
2.5 Operators and operands . . . . . . . . . . . . . . . . . . . . . . . . 22
2.6 Expressions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23
2.7 Order of operations . . . . . . . . . . . . . . . . . . . . . . . . . . 23
2.8 Modulus operator . . . . . . . . . . . . . . . . . . . . . . . . . . . 24
2.9 String operations . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24
v
vi CONTENTS
2.10 Asking the user for input . . . . . . . . . . . . . . . . . . . . . . . 25
2.11 Comments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26
2.12 Choosing mnemonic variable names . . . . . . . . . . . . . . . . . 27
2.13 Debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28
2.14 Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29
2.15 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30
3 Conditional execution 31
3.1 Boolean expressions . . . . . . . . . . . . . . . . . . . . . . . . . . . 31
3.2 Logical operators . . . . . . . . . . . . . . . . . . . . . . . . . . . . 32
3.3 Conditional execution . . . . . . . . . . . . . . . . . . . . . . . . . 32
3.4 Alternative execution . . . . . . . . . . . . . . . . . . . . . . . . . 33
3.5 Chained conditionals . . . . . . . . . . . . . . . . . . . . . . . . . . 34
3.6 Nested conditionals . . . . . . . . . . . . . . . . . . . . . . . . . . 35
3.7 Catching exceptions using try and except . . . . . . . . . . . . . . 36
3.8 Short-circuit evaluation of logical expressions . . . . . . . . . . . . 38
3.9 Debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39
3.10 Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39
3.11 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40
4 Functions 43
4.1 Function calls . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43
4.2 Built-in functions . . . . . . . . . . . . . . . . . . . . . . . . . . . 43
4.3 Type conversion functions . . . . . . . . . . . . . . . . . . . . . . . 44
4.4 Math functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 45
4.5 Random numbers . . . . . . . . . . . . . . . . . . . . . . . . . . . 46
4.6 Adding new functions . . . . . . . . . . . . . . . . . . . . . . . . . 47
4.7 Deﬁnitions and uses . . . . . . . . . . . . . . . . . . . . . . . . . . 48
4.8 Flow of execution . . . . . . . . . . . . . . . . . . . . . . . . . . . 49
4.9 Parameters and arguments . . . . . . . . . . . . . . . . . . . . . . 49
4.10 Fruitful functions and void functions . . . . . . . . . . . . . . . . . . 51
4.11 Why functions? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52
4.12 Debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52
4.13 Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53
4.14 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54
CONTENTS vii
5 Iteration 57
5.1 Updating variables . . . . . . . . . . . . . . . . . . . . . . . . . . . 57
5.2 The while statement . . . . . . . . . . . . . . . . . . . . . . . . . 57
5.3 Inﬁnite loops . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58
5.4 Finishing iterations with continue . . . . . . . . . . . . . . . . . . 59
5.5 Deﬁnite loops using for. . . . . . . . . . . . . . . . . . . . . . . . 60
5.6 Loop patterns . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61
5.6.1 Counting and summing loops . . . . . . . . . . . . . . . . . . 61
5.6.2 Maximum and minimum loops . . . . . . . . . . . . . . . . 62
5.7 Debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64
5.8 Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64
5.9 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64
6 Strings 67
6.1 A string is a sequence . . . . . . . . . . . . . . . . . . . . . . . . . 67
6.2 Getting the length of a string using len . . . . . . . . . . . . . . . 68
6.3 Traversal through a string with a loop . . . . . . . . . . . . . . . . 68
6.4 String slices . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 69
6.5 Strings are immutable . . . . . . . . . . . . . . . . . . . . . . . . . 70
6.6 Looping and counting . . . . . . . . . . . . . . . . . . . . . . . . . 70
6.7 The inoperator . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71
6.8 String comparison . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71
6.9 String methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71
6.10 Parsing strings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74
6.11 Format operator . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74
6.12 Debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75
6.13 Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 76
6.14 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77
7 Files 79
7.1 Persistence . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79
7.2 Opening ﬁles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80
7.3 Text ﬁles and lines . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81
7.4 Reading ﬁles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 82
7.5 Searching through a ﬁle . . . . . . . . . . . . . . . . . . . . . . . . 83
viii CONTENTS
7.6 Letting the user choose the ﬁle name . . . . . . . . . . . . . . . . . 85
7.7 Using try, except, andopen . . . . . . . . . . . . . . . . . . . . 86
7.8 Writing ﬁles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87
7.9 Debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 88
7.10 Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 89
7.11 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 89
8 Lists 91
8.1 A list is a sequence . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91
8.2 Lists are mutable . . . . . . . . . . . . . . . . . . . . . . . . . . . . 92
8.3 Traversing a list . . . . . . . . . . . . . . . . . . . . . . . . . . . . 92
8.4 List operations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 93
8.5 List slices . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 94
8.6 List methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 94
8.7 Deleting elements . . . . . . . . . . . . . . . . . . . . . . . . . . . 95
8.8 Lists and functions . . . . . . . . . . . . . . . . . . . . . . . . . . . 96
8.9 Lists and strings . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97
8.10 Parsing lines . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 98
8.11 Objects and values . . . . . . . . . . . . . . . . . . . . . . . . . . . 99
8.12 Aliasing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 100
8.13 List arguments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 100
8.14 Debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102
8.15 Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 105
8.16 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 105
9 Dictionaries 107
9.1 Dictionary as a set of counters . . . . . . . . . . . . . . . . . . . . 109
9.2 Dictionaries and ﬁles . . . . . . . . . . . . . . . . . . . . . . . . . . 110
9.3 Looping and dictionaries . . . . . . . . . . . . . . . . . . . . . . . . 111
9.4 Advanced text parsing . . . . . . . . . . . . . . . . . . . . . . . . . 113
9.5 Debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114
9.6 Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115
9.7 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115
CONTENTS ix
10 Tuples 117
10.1 Tuples are immutable . . . . . . . . . . . . . . . . . . . . . . . . . 117
10.2 Comparing tuples . . . . . . . . . . . . . . . . . . . . . . . . . . . 118
10.3 Tuple assignment . . . . . . . . . . . . . . . . . . . . . . . . . . . . 120
10.4 Dictionaries and tuples . . . . . . . . . . . . . . . . . . . . . . . . . 121
10.5 Multiple assignment with dictionaries . . . . . . . . . . . . . . . . 122
10.6 The most common words . . . . . . . . . . . . . . . . . . . . . . . 123
10.7 Using tuples as keys in dictionaries . . . . . . . . . . . . . . . . . . 124
10.8 Sequences: strings, lists, and tuples - Oh My! . . . . . . . . . . . . 124
10.9 Debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 125
10.10 Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 125
10.11 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 126
11 Regular expressions 127
11.1 Character matching in regular expressions . . . . . . . . . . . . . . 128
11.2 Extracting data using regular expressions . . . . . . . . . . . . . . 129
11.3 Combining searching and extracting . . . . . . . . . . . . . . . . . 132
11.4 Escape character . . . . . . . . . . . . . . . . . . . . . . . . . . . . 136
11.5 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 136
11.6 Bonus section for Unix / Linux users . . . . . . . . . . . . . . . . . 137
11.7 Debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 138
11.8 Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 138
11.9 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 139
12 Networked programs 141
12.1 HyperText Transfer Protocol - HTTP . . . . . . . . . . . . . . . . . 141
12.2 The world’s simplest web browser . . . . . . . . . . . . . . . . . . 142
12.3 Retrieving an image over HTTP . . . . . . . . . . . . . . . . . . . 144
12.4 Retrieving web pages with urllib . . . . . . . . . . . . . . . . . . 146
12.5 Reading binary ﬁles using urllib . . . . . . . . . . . . . . . . . . 147
12.6 Parsing HTML and scraping the web . . . . . . . . . . . . . . . . 148
12.7 Parsing HTML using regular expressions . . . . . . . . . . . . . . 148
12.8 Parsing HTML using BeautifulSoup . . . . . . . . . . . . . . . . . 150
12.9 Bonus section for Unix / Linux users . . . . . . . . . . . . . . . . . 153
12.10 Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 153
12.11 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 154
x CONTENTS
13 Using Web Services 155
13.1 eXtensible Markup Language - XML . . . . . . . . . . . . . . . . . 155
13.2 Parsing XML . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 156
13.3 Looping through nodes . . . . . . . . . . . . . . . . . . . . . . . . 157
13.4 JavaScript Object Notation - JSON . . . . . . . . . . . . . . . . . 158
13.5 Parsing JSON . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 159
13.6 Application Programming Interfaces . . . . . . . . . . . . . . . . . 160
13.7 Security and API usage . . . . . . . . . . . . . . . . . . . . . . . . . 161
13.8 Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 162
13.9 Application 1: Google geocoding web service . . . . . . . . . . . . 162
13.10 Application 2: Twitter . . . . . . . . . . . . . . . . . . . . . . . . . 165
14 Object-oriented programming 171
14.1 Managing larger programs . . . . . . . . . . . . . . . . . . . . . . . . 171
14.2 Getting started . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 172
14.3 Using objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 172
14.4 Starting with programs . . . . . . . . . . . . . . . . . . . . . . . . 173
14.5 Subdividing a problem . . . . . . . . . . . . . . . . . . . . . . . . . 175
14.6 Our ﬁrst Python object . . . . . . . . . . . . . . . . . . . . . . . . 176
14.7 Classes as types . . . . . . . . . . . . . . . . . . . . . . . . . . . . 178
14.8 Object lifecycle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 179
14.9 Multiple instances . . . . . . . . . . . . . . . . . . . . . . . . . . . 180
14.10 Inheritance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 181
14.11 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 182
14.12 Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 183
15 Using Databases and SQL 185
15.1 What is a database? . . . . . . . . . . . . . . . . . . . . . . . . . . 185
15.2 Database concepts . . . . . . . . . . . . . . . . . . . . . . . . . . . 185
15.3 Database Browser for SQLite . . . . . . . . . . . . . . . . . . . . . 186
15.4 Creating a database table . . . . . . . . . . . . . . . . . . . . . . . 186
15.5 Structured Query Language summary . . . . . . . . . . . . . . . . 189
15.6 Spidering Twitter using a database . . . . . . . . . . . . . . . . . . . 191
15.7 Basic data modeling . . . . . . . . . . . . . . . . . . . . . . . . . . 196
15.8 Programming with multiple tables . . . . . . . . . . . . . . . . . . 197
CONTENTS xi
15.8.1 Constraints in database tables . . . . . . . . . . . . . . . . 200
15.8.2 Retrieve and/or insert a record . . . . . . . . . . . . . . . . . 201
15.8.3 Storing the friend relationship . . . . . . . . . . . . . . . . . 202
15.9 Three kinds of keys . . . . . . . . . . . . . . . . . . . . . . . . . . 203
15.10 Using JOIN to retrieve data . . . . . . . . . . . . . . . . . . . . . . 204
15.11 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 206
15.12 Debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 207
15.13 Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 207
16 Visualizing data 209
16.1 Building a Google map from geocoded data . . . . . . . . . . . . . 209
16.2 Visualizing networks and interconnections . . . . . . . . . . . . . . . 211
16.3 Visualizing mail data . . . . . . . . . . . . . . . . . . . . . . . . . 214
A Contributions 221
A.1 Contributor List for Python for Everybody . . . . . . . . . . . . . . 221
A.2 Contributor List for Python for Informatics . . . . . . . . . . . . . . 221
A.3 Preface for “Think Python” . . . . . . . . . . . . . . . . . . . . . . . 221
A.3.1 The strange history of “Think Python” . . . . . . . . . . . . 221
A.3.2 Acknowledgements for “Think Python” . . . . . . . . . . . 223
A.4 Contributor List for “Think Python” . . . . . . . . . . . . . . . . . 223
B Copyright Detail 225
xii CONTENTS
Chapter 1
Why should you learn to
write programs?
Writing programs (or programming) is a very creative and rewarding activi ty. You
can write programs for many reasons, ranging from making your living to solving
a diﬃcult data analysis problem to having fun to helping someone else solve a
problem. This book assumes that everyone needs to know how to program, and
that once you know how to program you will ﬁgure out what you want to do with
your newfound skills.
We are surrounded in our daily lives with computers ranging from laptops to cell
phones. We can think of these computers as our “personal assistants” who can take
care of many things on our behalf. The hardware in our current-day computers is
essentially built to continuously ask us the question, “What would you like m e to
do next?”
What
Next? 
What
Next? What
Next? 
What
Next? What
Next? 
What
Next? 
Figure 1.1: Personal Digital Assistant
Programmers add an operating system and a set of applications to the hardware
and we end up with a Personal Digital Assistant that is quite helpful and capable
of helping us do many diﬀerent things.
Our computers are fast and have vast amounts of memory and could be very helpful
to us if we only knew the language to speak to explain to the computer what we
would like it to “do next”. If we knew this language, we could tell the computer
to do tasks on our behalf that were repetitive. Interestingly, the kinds of thing s
computers can do best are often the kinds of things that we humans ﬁnd boring
and mind-numbing.
1
2 CHAPTER 1. WHY SHOULD YOU LEARN TO WRITE PROGRAMS?
For example, look at the ﬁrst three paragraphs of this chapter and tell me the
most commonly used word and how many times the word is used. While you were
able to read and understand the words in a few seconds, counting them is almost
painful because it is not the kind of problem that human minds are designed to
solve. For a computer the opposite is true, reading and understanding text from
a piece of paper is hard for a computer to do but counting the words and telling
you how many times the most used word was used is very easy for the computer:
python words.py
Enter file:words.txt
to16
Our “personal information analysis assistant” quickly told us that the word “to”
was used sixteen times in the ﬁrst three paragraphs of this chapter.
This very fact that computers are good at things that humans are not is why you
need to become skilled at talking “computer language”. Once you learn this new
language, you can delegate mundane tasks to your partner (the computer), leaving
more time for you to do the things that you are uniquely suited for. You bring
creativity, intuition, and inventiveness to this partnership.
1.1 Creativity and motivation
While this book is not intended for professional programmers, professional pr o-
gramming can be a very rewarding job both ﬁnancially and personally. Building
useful, elegant, and clever programs for others to use is a very creative activit y.
Your computer or Personal Digital Assistant (PDA) usually contains many dif-
ferent programs from many diﬀerent groups of programmers, each competing fo r
your attention and interest. They try their best to meet your needs and give you a
great user experience in the process. In some situations, when you choose a piece
of software, the programmers are directly compensated because of your choice.
If we think of programs as the creative output of groups of programmers, perhaps
the following ﬁgure is a more sensible version of our PDA:
Pick 
Me! 
Pick 
Me! Pick 
Me! 
Pick 
Me! Pick 
Me! 
Buy 
Me :) 
Figure 1.2: Programmers Talking to You
For now, our primary motivation is not to make money or please end users, but
instead for us to be more productive in handling the data and information that we
will encounter in our lives. When you ﬁrst start, you will be both the progra mmer
and the end user of your programs. As you gain skill as a programmer and pro-
gramming feels more creative to you, your thoughts may turn toward developing
programs for others.
1.2. COMPUTER HARDWARE ARCHITECTURE 3
1.2 Computer hardware architecture
Before we start learning the language we speak to give instructions to computer s
to develop software, we need to learn a small amount about how computers are
built. If you were to take apart your computer or cell phone and look deep inside,
you would ﬁnd the following parts:
Input and 
Output 
Devices Software 
Main 
Memory Central 
Processing 
Unit What 
Next? 
Network 
Secondary 
Memory 
Figure 1.3: Hardware Architecture
The high-level deﬁnitions of these parts are as follows:
• The Central Processing Unit (or CPU) is the part of the computer that is
built to be obsessed with “what is next?” If your computer is rated at 3.0
Gigahertz, it means that the CPU will ask “What next?” three billion times
per second. You are going to have to learn how to talk fast to keep up with
the CPU.
• The Main Memory is used to store information that the CPU needs in a
hurry. The main memory is nearly as fast as the CPU. But the information
stored in the main memory vanishes when the computer is turned oﬀ.
• The Secondary Memory is also used to store information, but it is much
slower than the main memory. The advantage of the secondary memory is
that it can store information even when there is no power to the computer.
Examples of secondary memory are disk drives or ﬂash memory (typically
found in USB sticks and portable music players).
• The Input and Output Devices are simply our screen, keyboard, mouse, mi-
crophone, speaker, touchpad, etc. They are all of the ways we interact with
the computer.
• These days, most computers also have a Network Connection to retrieve
information over a network. We can think of the network as a very slow
place to store and retrieve data that might not always be “up”. So in a sense,
the network is a slower and at times unreliable form of Secondary Memory .
While most of the detail of how these components work is best left to computer
builders, it helps to have some terminology so we can talk about these diﬀerent
parts as we write our programs.
4 CHAPTER 1. WHY SHOULD YOU LEARN TO WRITE PROGRAMS?
As a programmer, your job is to use and orchestrate each of these resources to
solve the problem that you need to solve and analyze the data you get from the
solution. As a programmer you will mostly be “talking” to the CPU and t elling
it what to do next. Sometimes you will tell the CPU to use the main memory,
secondary memory, network, or the input/output devices.
Input and 
Output 
Devices Software 
Main 
Memory Central 
Processing 
Unit What 
Next? 
Network 
Secondary 
Memory 
Figure 1.4: Where Are You?
You need to be the person who answers the CPU’s “What next?” question. But it
would be very uncomfortable to shrink you down to 5mm tall and insert you int o
the computer just so you could issue a command three billion times per second. So
instead, you must write down your instructions in advance. We call these stored
instructions a program and the act of writing these instructions down and getting
the instructions to be correct programming .
1.3 Understanding programming
In the rest of this book, we will try to turn you into a person who is ski lled in the art
of programming. In the end you will be a programmer - perhaps not a professional
programmer, but at least you will have the skills to look at a data/infor mation
analysis problem and develop a program to solve the problem.
In a sense, you need two skills to be a programmer:
• First, you need to know the programming language (Python) - you need to
know the vocabulary and the grammar. You need to be able to spell the
words in this new language properly and know how to construct well-formed
“sentences” in this new language.
• Second, you need to “tell a story”. In writing a story, you combine words
and sentences to convey an idea to the reader. There is a skill and art in
constructing the story, and skill in story writing is improved by doing som e
writing and getting some feedback. In programming, our program is the
“story” and the problem you are trying to solve is the “idea”.
Once you learn one programming language such as Python, you will ﬁnd it much
easier to learn a second programming language such as JavaScript or C++. The
1.4. WORDS AND SENTENCES 5
new programming language has very diﬀerent vocabulary and grammar but the
problem-solving skills will be the same across all programming languages .
You will learn the “vocabulary” and “sentences” of Python pretty quickly. It w ill
take longer for you to be able to write a coherent program to solve a brand-new
problem. We teach programming much like we teach writing. We start reading
and explaining programs, then we write simple programs, and then we write in-
creasingly complex programs over time. At some point you “get your muse” and
see the patterns on your own and can see more naturally how to take a problem
and write a program that solves that problem. And once you get to that point,
programming becomes a very pleasant and creative process.
We start with the vocabulary and structure of Python programs. Be patient a s
the simple examples remind you of when you started reading for the ﬁrst time.
1.4 Words and sentences
Unlike human languages, the Python vocabulary is actually pretty small. We ca ll
this “vocabulary” the “reserved words”. These are words that have very special
meaning to Python. When Python sees these words in a Python program, they
have one and only one meaning to Python. Later as you write programs you will
make up your own words that have meaning to you called variables . You will have
great latitude in choosing your names for your variables, but you cannot use any
of Python’s reserved words as a name for a variable.
When we train a dog, we use special words like “sit”, “stay”, and “fetch”. When
you talk to a dog and don’t use any of the reserved words, they just look at you
with a quizzical look on their face until you say a reserved word. For example, i f
you say, “I wish more people would walk to improve their overall health”, what
most dogs likely hear is, “blah blah blah walk blah blah blah blah.” That is because
“walk” is a reserved word in dog language. Many might suggest that the langua ge
between humans and cats has no reserved words1.
The reserved words in the language where humans talk to Python include the
following:
and del global not with
as elif if or yield
assert else import pass
break except in raise
class finally is return
continue for lambda try
def from nonlocal while
That is it, and unlike a dog, Python is already completely trained. When you say
“try”, Python will try every time you say it without fail.
We will learn these reserved words and how they are used in good time, but for
now we will focus on the Python equivalent of “speak” (in human-to-dog language) .
The nice thing about telling Python to speak is that we can even tell it what to
say by giving it a message in quotes:
1http://xkcd.com/231/
6 CHAPTER 1. WHY SHOULD YOU LEARN TO WRITE PROGRAMS?
print( /quotesingle.ts1Hello world!/quotesingle.ts1 )
And we have even written our ﬁrst syntactically correct Python sentence. Our
sentence starts with the function print followed by a string of text of our choosing
enclosed in single quotes. The strings in the print statements are enclosed in quo tes.
Single quotes and double quotes do the same thing; most people use single quotes
except in cases like this where a single quote (which is also an apostrophe) appea rs
in the string.
1.5 Conversing with Python
Now that we have a word and a simple sentence that we know in Python, we need
to know how to start a conversation with Python to test our new language ski lls.
Before you can converse with Python, you must ﬁrst install the Python soft ware
on your computer and learn how to start Python on your computer. That is too
much detail for this chapter so I suggest that you consult www.py4e.com where
I have detailed instructions and screencasts of setting up and starting Python on
Macintosh and Windows systems. At some point, you will be in a termina l or
command window and you will type python and the Python interpreter will start
executing in interactive mode and appear somewhat as follows:
Python 3.5.1 (v3.5.1:37a07cee5969, Dec 6 2015 ,01:54:25)
[MSC v .1900 64 bit (AMD64)] on win32
Type "help" ,"copyright" ,"credits" or"license" for more
information.
>>>
The>>>prompt is the Python interpreter’s way of asking you, “What do you want
me to do next?” Python is ready to have a conversation with you. All you have
to know is how to speak the Python language.
Let’s say for example that you did not know even the simplest Python language
words or sentences. You might want to use the standard line that astronauts use
when they land on a faraway planet and try to speak with the inhabitants of the
planet:
>>> I come inpeace, please take me to your leader
File "<stdin>" , line 1
I come inpeace, please take me to your leader
^
SyntaxError : invalid syntax
>>>
This is not going so well. Unless you think of something quickly, the inhabitant s
of the planet are likely to stab you with their spears, put you on a spit, roa st you
over a ﬁre, and eat you for dinner.
Luckily you brought a copy of this book on your travels, and you thumb to t his
very page and try again:
1.5. CONVERSING WITH PYTHON 7
>>> print( /quotesingle.ts1Hello world!/quotesingle.ts1 )
Hello world !
This is looking much better, so you try to communicate some more:
>>> print( /quotesingle.ts1You must be the legendary god that comes from the sky/quotesingle.ts1 )
You must be the legendary god that comes from the sky
>>> print( /quotesingle.ts1We have been waiting for you for a long time/quotesingle.ts1 )
We have been waiting for youfor a long time
>>> print( /quotesingle.ts1Our legend says you will be very tasty with mustard/quotesingle.ts1 )
Our legend says you will be very tasty with mustard
>>> print /quotesingle.ts1We will have a feast tonight unless you say
File "<stdin>", line 1
print /quotesingle.ts1 We will have a feast tonight unless you say
^
SyntaxError : Missing parentheses incall to /quotesingle.ts1print/quotesingle.ts1
>>>
The conversation was going so well for a while and then you made the tiniest
mistake using the Python language and Python brought the spears back out.
At this point, you should also realize that while Python is amazingly compl ex and
powerful and very picky about the syntax you use to communicate with it, Pyt hon
isnotintelligent. You are really just having a conversation with yourself, but using
proper syntax.
In a sense, when you use a program written by someone else the conversation is
between you and those other programmers with Python acting as an intermediary .
Python is a way for the creators of programs to express how the conversation is
supposed to proceed. And in just a few more chapters, you will be one of those
programmers using Python to talk to the users of your program.
Before we leave our ﬁrst conversation with the Python interpreter, you shoul d prob-
ably know the proper way to say “good-bye” when interacting with the inhabitants
of Planet Python:
>>> good-bye
Traceback (most recent call last):
File "<stdin>" , line 1,in <module >
NameError : name /quotesingle.ts1good/quotesingle.ts1 is not defined
>>> ifyou don /quotesingle.ts1t mind, I need to leave
File "<stdin>", line 1
if you don/quotesingle.ts1 t mind, I need to leave
^
SyntaxError : invalid syntax
>>> quit()
You will notice that the error is diﬀerent for the ﬁrst two incorrect attempts. T he
second error is diﬀerent because ifis a reserved word and Python saw the reserved
word and thought we were trying to say something but got the syntax of the
sentence wrong.
8 CHAPTER 1. WHY SHOULD YOU LEARN TO WRITE PROGRAMS?
The proper way to say “good-bye” to Python is to enter quit() at the interactive
chevron >>>prompt. It would have probably taken you quite a while to guess that
one, so having a book handy probably will turn out to be helpful.
1.6 Terminology: Interpreter and compiler
Python is a high-level language intended to be relatively straightforward for hu-
mans to read and write and for computers to read and process. Other high-level
languages include Java, C++, PHP, Ruby, Basic, Perl, JavaScript, and many more.
The actual hardware inside the Central Processing Unit (CPU) does not under-
stand any of these high-level languages.
The CPU understands a language we call machine language . Machine language is
very simple and frankly very tiresome to write because it is represented all i n zeros
and ones:
001010001110100100101010000001111
11100110000011101010010101101101
...
Machine language seems quite simple on the surface, given that there are only zeros
and ones, but its syntax is even more complex and far more intricate than Pytho n.
So very few programmers ever write machine language. Instead we build various
translators to allow programmers to write in high-level languages like P ython or
JavaScript and these translators convert the programs to machine language fo r
actual execution by the CPU.
Since machine language is tied to the computer hardware, machine language is not
portable across diﬀerent types of hardware. Programs written in high-level lan-
guages can be moved between diﬀerent computers by using a diﬀerent interpreter
on the new machine or recompiling the code to create a machine language version
of the program for the new machine.
These programming language translators fall into two general categories: (1) inter-
preters and (2) compilers.
Aninterpreter reads the source code of the program as written by the programmer,
parses the source code, and interprets the instructions on the ﬂy. Python is an
interpreter and when we are running Python interactively, we can type a line of
Python (a sentence) and Python processes it immediately and is ready for us to
type another line of Python.
Some of the lines of Python tell Python that you want it to remember some val ue
for later. We need to pick a name for that value to be remembered and we can use
that symbolic name to retrieve the value later. We use the term variable to refer
to the labels we use to refer to this stored data.
>>> x=6
>>> print(x)
6
>>> y=x*7
1.6. TERMINOLOGY: INTERPRETER AND COMPILER 9
>>> print(y)
42
>>>
In this example, we ask Python to remember the value six and use the label xso
we can retrieve the value later. We verify that Python has actually remembered
the value using print . Then we ask Python to retrieve xand multiply it by seven
and put the newly computed value in y. Then we ask Python to print out the
value currently in y.
Even though we are typing these commands into Python one line at a time, Python
is treating them as an ordered sequence of statements with later statements able
to retrieve data created in earlier statements. We are writing our ﬁrst simpl e
paragraph with four sentences in a logical and meaningful order.
It is the nature of an interpreter to be able to have an interactive conversation
as shown above. A compiler needs to be handed the entire program in a ﬁle,
and then it runs a process to translate the high-level source code into machine
language and then the compiler puts the resulting machine language into a ﬁle for
later execution.
If you have a Windows system, often these executable machine language programs
have a suﬃx of “.exe” or “.dll” which stand for “executable” and “dynamic link
library” respectively. In Linux and Macintosh, there is no suﬃx that uniquely
marks a ﬁle as executable.
If you were to open an executable ﬁle in a text editor, it would look completely
crazy and be unreadable:
^?ELF^A^A^A^@^@^@^@^@^@^@^@^@^B^@^C^@^A^@^@^@\xa0\x82
^D^H4^@^@^@\x90^]^@^@^@^@^@^@4^@ ^@^G^@(^@$^@!^@^F^@
^@^@4^@^@^@4\x80^D^H4\x80^D^H\xe0^@^@^@\xe0^@^@^@^E
^@^@^@^D^@^@^@^C^@^@^@^T^A^@^@^T\x81^D^H^T\x81^D^H^S
^@^@^@^S^@^@^@^D^@^@^@^A^@^@^@^A\^D^HQVhT\x83^D^H\xe8
....
It is not easy to read or write machine language, so it is nice that we have inter-
preters andcompilers that allow us to write in high-level languages like Python or
C.
Now at this point in our discussion of compilers and interpreters, you should b e
wondering a bit about the Python interpreter itself. What language is it written
in? Is it written in a compiled language? When we type “python”, what exactly
is happening?
The Python interpreter is written in a high-level language called “C”. You can lo ok
at the actual source code for the Python interpreter by going to www.python.org
and working your way to their source code. So Python is a program itself and it
is compiled into machine code. When you installed Python on your computer (or
the vendor installed it), you copied a machine-code copy of the translated Python
program onto your system. In Windows, the executable machine code for Python
itself is likely in a ﬁle with a name like:
C:\Python35\python.exe
10 CHAPTER 1. WHY SHOULD YOU LEARN TO WRITE PROGRAMS?
That is more than you really need to know to be a Python programmer, but
sometimes it pays to answer those little nagging questions right at the begi nning.
1.7 Writing a program
Typing commands into the Python interpreter is a great way to experiment with
Python’s features, but it is not recommended for solving more complex problems.
When we want to write a program, we use a text editor to write the Python
instructions into a ﬁle, which is called a script . By convention, Python scripts
have names that end with .py.
To execute the script, you have to tell the Python interpreter the name of the ﬁle.
In a command window, you would type python hello.py as follows:
$cat hello.py
print (/quotesingle.ts1Hello world!/quotesingle.ts1 )
$python hello.py
Hello world!
The “$” is the operating system prompt, and the “cat hello.py” is showing us that
the ﬁle “hello.py” has a one-line Python program to print a string.
We call the Python interpreter and tell it to read its source code from the ﬁle
“hello.py” instead of prompting us for lines of Python code interactively.
You will notice that there was no need to have quit() at the end of the Python
program in the ﬁle. When Python is reading your source code from a ﬁle, it knows
to stop when it reaches the end of the ﬁle.
1.8 What is a program?
The deﬁnition of a program at its most basic is a sequence of Python statements
that have been crafted to do something. Even our simple hello.py script is a
program. It is a one-line program and is not particularly useful, but in the strict est
deﬁnition, it is a Python program.
It might be easiest to understand what a program is by thinking about a problem
that a program might be built to solve, and then looking at a program that wo uld
solve that problem.
Lets say you are doing Social Computing research on Facebook posts and you ar e
interested in the most frequently used word in a series of posts. You could pri nt out
the stream of Facebook posts and pore over the text looking for the most com mon
word, but that would take a long time and be very mistake prone. You would be
smart to write a Python program to handle the task quickly and accurately so you
can spend the weekend doing something fun.
For example, look at the following text about a clown and a car. Look at the t ext
and ﬁgure out the most common word and how many times it occurs.
1.9. THE BUILDING BLOCKS OF PROGRAMS 11
the clown ran after the car and the car ran into the tent
and the tent fell down on the clown and the car
Then imagine that you are doing this task looking at millions of lines of tex t.
Frankly it would be quicker for you to learn Python and write a Python pro gram
to count the words than it would be to manually scan the words.
The even better news is that I already came up with a simple program to ﬁnd the
most common word in a text ﬁle. I wrote it, tested it, and now I am giving it to
you to use so you can save some time.
name =input( /quotesingle.ts1Enter file:/quotesingle.ts1 )
handle =open(name, /quotesingle.ts1r/quotesingle.ts1)
counts =dict()
for line inhandle:
words =line.split()
forword inwords:
counts[word] =counts.get(word, 0)+1
bigcount =None
bigword =None
for word, count inlist(counts.items()):
ifbigcount isNone orcount >bigcount:
bigword =word
bigcount =count
print(bigword, bigcount)
# Code: http://www.py4e.com/code3/words.py
You don’t even need to know Python to use this program. You will need to
get through Chapter 10 of this book to fully understand the awesome Python
techniques that were used to make the program. You are the end user, you simply
use the program and marvel at its cleverness and how it saved you so much manual
eﬀort. You simply type the code into a ﬁle called words.py and run it or you
download the source code from http://www.py4e.com/code3/ and run it.
This is a good example of how Python and the Python language are acting as an
intermediary between you (the end user) and me (the programmer). Python is a
way for us to exchange useful instruction sequences (i.e., programs) in a common
language that can be used by anyone who installs Python on their computer. So
neither of us are talking to Python , instead we are communicating with each other
through Python.
1.9 The building blocks of programs
In the next few chapters, we will learn more about the vocabulary, sentence struc-
ture, paragraph structure, and story structure of Python. We will learn about t he
12 CHAPTER 1. WHY SHOULD YOU LEARN TO WRITE PROGRAMS?
powerful capabilities of Python and how to compose those capabilities together t o
create useful programs.
There are some low-level conceptual patterns that we use to construct programs.
These constructs are not just for Python programs, they are part of every progra m-
ming language from machine language up to the high-level languages.
input Get data from the “outside world”. This might be reading data from a
ﬁle, or even some kind of sensor like a microphone or GPS. In our initial
programs, our input will come from the user typing data on the keyboard.
output Display the results of the program on a screen or store them in a ﬁle or
perhaps write them to a device like a speaker to play music or speak text.
sequential execution Perform statements one after another in the order they
are encountered in the script.
conditional execution Check for certain conditions and then execute or skip a
sequence of statements.
repeated execution Perform some set of statements repeatedly, usually with
some variation.
reuse Write a set of instructions once and give them a name and then reuse those
instructions as needed throughout your program.
It sounds almost too simple to be true, and of course it is never so simple. It is like
saying that walking is simply “putting one foot in front of the other”. The “ art” of
writing a program is composing and weaving these basic elements together many
times over to produce something that is useful to its users.
The word counting program above directly uses all of these patterns except for
one.
1.10 What could possibly go wrong?
As we saw in our earliest conversations with Python, we must communicate very
precisely when we write Python code. The smallest deviation or mistake will ca use
Python to give up looking at your program.
Beginning programmers often take the fact that Python leaves no room for error s
as evidence that Python is mean, hateful, and cruel. While Python seems to like
everyone else, Python knows them personally and holds a grudge against them.
Because of this grudge, Python takes our perfectly written programs and rejects
them as “unﬁt” just to torment us.
>>> primt /quotesingle.ts1Hello world!/quotesingle.ts1
File "<stdin>" , line 1
primt /quotesingle.ts1Hello world!/quotesingle.ts1
^
SyntaxError : invalid syntax
>>> primt ( /quotesingle.ts1Hello world/quotesingle.ts1 )
Traceback (most recent call last):
File "<stdin>" , line 1,in <module >
NameError : name /quotesingle.ts1primt/quotesingle.ts1 is not defined
1.10. WHAT COULD POSSIBLY GO WRONG? 13
>>> I hate you Python !
File "<stdin>" , line 1
I hate you Python !
^
SyntaxError : invalid syntax
>>> ifyou come out of there, I would teach you a lesson
File "<stdin>" , line 1
ifyou come out of there, I would teach you a lesson
^
SyntaxError : invalid syntax
>>>
There is little to be gained by arguing with Python. It is just a tool. It ha s no
emotions and it is happy and ready to serve you whenever you need it. Its error
messages sound harsh, but they are just Python’s call for help. It has looked at
what you typed, and it simply cannot understand what you have entered.
Python is much more like a dog, loving you unconditionally, having a few key wo rds
that it understands, looking you with a sweet look on its face ( >>>), and waiting
for you to say something it understands. When Python says “SyntaxError: inv alid
syntax”, it is simply wagging its tail and saying, “You seemed to say s omething
but I just don’t understand what you meant, but please keep talking to me ( >>>).”
As your programs become increasingly sophisticated, you will encounter three gen-
eral types of errors:
Syntax errors These are the ﬁrst errors you will make and the easiest to ﬁx. A
syntax error means that you have violated the “grammar” rules of Python.
Python does its best to point right at the line and character where it noticed
it was confused. The only tricky bit of syntax errors is that sometimes the
mistake that needs ﬁxing is actually earlier in the program than where Python
noticed it was confused. So the line and character that Python indicates in
a syntax error may just be a starting point for your investigation.
Logic errors A logic error is when your program has good syntax but there is
a mistake in the order of the statements or perhaps a mistake in how the
statements relate to one another. A good example of a logic error might be,
“take a drink from your water bottle, put it in your backpack, walk to the
library, and then put the top back on the bottle.”
Semantic errors A semantic error is when your description of the steps to take
is syntactically perfect and in the right order, but there is simply a mistake
in the program. The program is perfectly correct but it does not do what you
intended for it to do. A simple example would be if you were giving a person
directions to a restaurant and said, “. . . when you reach the intersection with
the gas station, turn left and go one mile and the restaurant is a red building
on your left.” Your friend is very late and calls you to tell you that they are
on a farm and walking around behind a barn, with no sign of a restaurant.
Then you say “did you turn left or right at the gas station?” and they say, “ I
followed your directions perfectly, I have them written down, it says turn left
and go one mile at the gas station.” Then you say, “I am very sorry, because
while my instructions were syntactically correct, they sadly contained a small
but undetected semantic error.”.
14 CHAPTER 1. WHY SHOULD YOU LEARN TO WRITE PROGRAMS?
Again in all three types of errors, Python is merely trying its hardest to do exactly
what you have asked.
1.11 Debugging
When you Python spits out an error or even when it gives you a result that is
diﬀerent from what you had intended, then begins the hunt for the cause of the
error. Debugging is the process of ﬁnding the cause of the error in your code.
When you are debugging a program, and especially if you are working on a hard
bug, there are four things to try:
reading Examine your code, read it back to yourself, and check that it says what
you meant to say.
running Experiment by making changes and running diﬀerent versions. Often
if you display the right thing at the right place in the program, the prob-
lem becomes obvious, but sometimes you have to spend some time to build
scaﬀolding.
ruminating Take some time to think! What kind of error is it: syntax, runtime,
semantic? What information can you get from the error messages, or from
the output of the program? What kind of error could cause the problem
you’re seeing? What did you change last, before the problem appeared?
retreating At some point, the best thing to do is back oﬀ, undoing recent changes,
until you get back to a program that works and that you understand. Then
you can start rebuilding.
Beginning programmers sometimes get stuck on one of these activities and forget
the others. Finding a hard bug requires reading, running, ruminating, and some-
times retreating. If you get stuck on one of these activities, try the others. Each
activity comes with its own failure mode.
For example, reading your code might help if the problem is a typographical error,
but not if the problem is a conceptual misunderstanding. If you don’t understand
what your program does, you can read it 100 times and never see the error, because
the error is in your head.
Running experiments can help, especially if you run small, simple tests. But if
you run experiments without thinking or reading your code, you might fall into
a pattern I call “random walk programming”, which is the process of making
random changes until the program does the right thing. Needless to say, random
walk programming can take a long time.
You have to take time to think. Debugging is like an experimental science. You
should have at least one hypothesis about what the problem is. If there are two o r
more possibilities, try to think of a test that would eliminate one of them.
Taking a break helps with the thinking. So does talking. If you explain the problem
to someone else (or even to yourself), you will sometimes ﬁnd the answer before
you ﬁnish asking the question.
But even the best debugging techniques will fail if there are too many errors, or
if the code you are trying to ﬁx is too big and complicated. Sometimes the best
1.12. THE LEARNING JOURNEY 15
option is to retreat, simplifying the program until you get to something tha t works
and that you understand.
Beginning programmers are often reluctant to retreat because they can’t stand to
delete a line of code (even if it’s wrong). If it makes you feel better, copy your
program into another ﬁle before you start stripping it down. Then you can paste
the pieces back in a little bit at a time.
1.12 The learning journey
As you progress through the rest of the book, don’t be afraid if the concepts don’t
seem to ﬁt together well the ﬁrst time. When you were learning to speak, it was
not a problem for your ﬁrst few years that you just made cute gurgling noises.
And it was OK if it took six months for you to move from simple vocabular y to
simple sentences and took 5-6 more years to move from sentences to paragraphs,
and a few more years to be able to write an interesting complete short story on
your own.
We want you to learn Python much more rapidly, so we teach it all at the s ame time
over the next few chapters. But it is like learning a new language that takes time to
absorb and understand before it feels natural. That leads to some confusion as we
visit and revisit topics to try to get you to see the big picture while we are deﬁni ng
the tiny fragments that make up that big picture. While the book is written
linearly, and if you are taking a course it will progress in a linear fashio n, don’t
hesitate to be very nonlinear in how you approach the material. Look forwar ds
and backwards and read with a light touch. By skimming more advanced materia l
without fully understanding the details, you can get a better understanding of the
“why?” of programming. By reviewing previous material and even redoing earlier
exercises, you will realize that you actually learned a lot of material even if the
material you are currently staring at seems a bit impenetrable.
Usually when you are learning your ﬁrst programming language, there are a few
wonderful “Ah Hah!” moments where you can look up from pounding away at
some rock with a hammer and chisel and step away and see that you are indeed
building a beautiful sculpture.
If something seems particularly hard, there is usually no value in staying up all
night and staring at it. Take a break, take a nap, have a snack, explain what y ou
are having a problem with to someone (or perhaps your dog), and then come back
to it with fresh eyes. I assure you that once you learn the programming concepts
in the book you will look back and see that it was all really easy and elegan t and
it simply took you a bit of time to absorb it.
1.13 Glossary
bug An error in a program.
central processing unit The heart of any computer. It is what runs the software
that we write; also called “CPU” or “the processor”.
compile To translate a program written in a high-level language into a low-level
language all at once, in preparation for later execution.
16 CHAPTER 1. WHY SHOULD YOU LEARN TO WRITE PROGRAMS?
high-level language A programming language like Python that is designed to
be easy for humans to read and write.
interactive mode A way of using the Python interpreter by typing commands
and expressions at the prompt.
interpret To execute a program in a high-level language by translating it one line
at a time.
low-level language A programming language that is designed to be easy for a
computer to execute; also called “machine code” or “assembly language”.
machine code The lowest-level language for software, which is the language that
is directly executed by the central processing unit (CPU).
main memory Stores programs and data. Main memory loses its information
when the power is turned oﬀ.
parse To examine a program and analyze the syntactic structure.
portability A property of a program that can run on more than one kind of
computer.
print function An instruction that causes the Python interpreter to display a
value on the screen.
problem solving The process of formulating a problem, ﬁnding a solution, and
expressing the solution.
program A set of instructions that speciﬁes a computation.
prompt When a program displays a message and pauses for the user to type some
input to the program.
secondary memory Stores programs and data and retains its information even
when the power is turned oﬀ. Generally slower than main memory. Examples
of secondary memory include disk drives and ﬂash memory in USB sticks.
semantics The meaning of a program.
semantic error An error in a program that makes it do something other than
what the programmer intended.
source code A program in a high-level language.
1.14 Exercises
Exercise 1: What is the function of the secondary memory in a com-
puter?
a) Execute all of the computation and logic of the program
b) Retrieve web pages over the Internet
c) Store information for the long term, even beyond a power cycle
d) Take input from the user
Exercise 2: What is a program?
Exercise 3: What is the diﬀerence between a compiler and an inter -
preter?
Exercise 4: Which of the following contains “machine code”?
a) The Python interpreter
b) The keyboard
c) Python source ﬁle
d) A word processing document
Exercise 5: What is wrong with the following code:
1.14. EXERCISES 17
>>> primt /quotesingle.ts1Hello world!/quotesingle.ts1
File "<stdin>" , line 1
primt /quotesingle.ts1Hello world!/quotesingle.ts1
^
SyntaxError : invalid syntax
>>>
Exercise 6: Where in the computer is a variable such as “x” stored a fter
the following Python line ﬁnishes?
x=123
a) Central processing unit
b) Main Memory
c) Secondary Memory
d) Input Devices
e) Output Devices
Exercise 7: What will the following program print out:
x=43
x=x+1
print(x)
a) 43
b) 44
c) x + 1
d) Error because x = x + 1 is not possible mathematically
Exercise 8: Explain each of the following using an example of a h u-
man capability: (1) Central processing unit, (2) Main Memory, (3)
Secondary Memory, (4) Input Device, and (5) Output Device. For e x-
ample, “What is the human equivalent to a Central Processing Unit” ?
Exercise 9: How do you ﬁx a “Syntax Error”?
18 CHAPTER 1. WHY SHOULD YOU LEARN TO WRITE PROGRAMS?
Chapter 2
Variables, expressions, and
statements
2.1 Values and types
Avalue is one of the basic things a program works with, like a letter or a number.
The values we have seen so far are 1, 2, and “Hello, World!”
These values belong to diﬀerent types : 2 is an integer, and “Hello, World!” is a
string , so called because it contains a “string” of letters. You (and the interpreter)
can identify strings because they are enclosed in quotation marks.
Theprint statement also works for integers. We use the python command to start
the interpreter.
python
>>> print( 4)
4
If you are not sure what type a value has, the interpreter can tell you.
>>> type( /quotesingle.ts1Hello, World!/quotesingle.ts1 )
<class /quotesingle.ts1str/quotesingle.ts1 >
>>> type( 17)
<class /quotesingle.ts1int/quotesingle.ts1 >
Not surprisingly, strings belong to the type strand integers belong to the type
int. Less obviously, numbers with a decimal point belong to a type called float ,
because these numbers are represented in a format called ﬂoating point .
>>> type( 3.2)
<class /quotesingle.ts1float/quotesingle.ts1 >
What about values like “17” and “3.2”? They look like numbers, but they are in
quotation marks like strings.
19
20 CHAPTER 2. VARIABLES, EXPRESSIONS, AND STATEMENTS
>>> type( /quotesingle.ts117/quotesingle.ts1)
<class /quotesingle.ts1str/quotesingle.ts1 >
>>> type( /quotesingle.ts13.2/quotesingle.ts1 )
<class /quotesingle.ts1str/quotesingle.ts1 >
They’re strings.
When you type a large integer, you might be tempted to use commas between
groups of three digits, as in 1,000,000. This is not a legal integer in Pyt hon, but it
is legal:
>>> print( 1,000,000)
1 0 0
Well, that’s not what we expected at all! Python interprets 1,000,000 as a co mma-
separated sequence of integers, which it prints with spaces between.
This is the ﬁrst example we have seen of a semantic error: the code runs without
producing an error message, but it doesn’t do the “right” thing.
2.2 Variables
One of the most powerful features of a programming language is the ability to
manipulate variables . A variable is a name that refers to a value.
Anassignment statement creates new variables and gives them values:
>>> message =/quotesingle.ts1And now for something completely different/quotesingle.ts1
>>> n=17
>>> pi=3.1415926535897931
This example makes three assignments. The ﬁrst assigns a string to a new varia ble
named message ; the second assigns the integer 17 to n; the third assigns the
(approximate) value of πtopi.
To display the value of a variable, you can use a print statement:
>>> print(n)
17
>>> print(pi)
3.141592653589793
The type of a variable is the type of the value it refers to.
>>> type(message)
<class /quotesingle.ts1str/quotesingle.ts1 >
>>> type(n)
<class /quotesingle.ts1int/quotesingle.ts1 >
>>> type(pi)
<class /quotesingle.ts1float/quotesingle.ts1 >
2.3. VARIABLE NAMES AND KEYWORDS 21
2.3 Variable names and keywords
Programmers generally choose names for their variables that are meaningful and
document what the variable is used for.
Variable names can be arbitrarily long. They can contain both letters and num bers,
but they cannot start with a number. It is legal to use uppercase letters, but it is
a good idea to begin variable names with a lowercase letter (you’ll see why l ater).
The underscore character ( _ ) can appear in a name. It is often used in names with
multiple words, such as my_name orairspeed_of_unladen_swallow . Variable
names can start with an underscore character, but we generally avoid doing this
unless we are writing library code for others to use.
If you give a variable an illegal name, you get a syntax error:
>>> 76trombones =/quotesingle.ts1big parade/quotesingle.ts1
SyntaxError : invalid syntax
>>> more@ =1000000
SyntaxError : invalid syntax
>>> class =/quotesingle.ts1Advanced Theoretical Zymurgy/quotesingle.ts1
SyntaxError : invalid syntax
76trombones is illegal because it begins with a number. more@ is illegal because
it contains an illegal character, @. But what’s wrong with class ?
It turns out that class is one of Python’s keywords . The interpreter uses keywords
to recognize the structure of the program, and they cannot be used as variable
names.
Python reserves 33 keywords:
and del from None True
as elif global nonlocal try
assert else if not while
break except import or with
class False in pass yield
continue finally is raise
def for lambda return
You might want to keep this list handy. If the interpreter complains about one of
your variable names and you don’t know why, see if it is on this list.
2.4 Statements
Astatement is a unit of code that the Python interpreter can execute. We have
seen two kinds of statements: print being an expression statement and assignmen t.
When you type a statement in interactive mode, the interpreter executes it and
displays the result, if there is one.
22 CHAPTER 2. VARIABLES, EXPRESSIONS, AND STATEMENTS
A script usually contains a sequence of statements. If there is more than one
statement, the results appear one at a time as the statements execute.
For example, the script
print( 1)
x=2
print(x)
produces the output
1
2
The assignment statement produces no output.
2.5 Operators and operands
Operators are special symbols that represent computations like addition and mul-
tiplication. The values the operator is applied to are called operands .
The operators +,-,*,/, and **perform addition, subtraction, multiplication,
division, and exponentiation, as in the following examples:
20+32
hour-1
hour*60+minute
minute /60
5**2
(5+9)*(15-7)
There has been a change in the division operator between Python 2.x and Python
3.x. In Python 3.x, the result of this division is a ﬂoating point result:
>>> minute =59
>>> minute /60
0.9833333333333333
The division operator in Python 2.0 would divide two integers and truncate t he
result to an integer:
>>> minute =59
>>> minute /60
0
To obtain the same answer in Python 3.0 use ﬂoored ( //integer) division.
2.6. EXPRESSIONS 23
>>> minute =59
>>> minute //60
0
In Python 3.0 integer division functions much more as you would expect if you
entered the expression on a calculator.
2.6 Expressions
Anexpression is a combination of values, variables, and operators. A value all by
itself is considered an expression, and so is a variable, so the following are a ll legal
expressions (assuming that the variable xhas been assigned a value):
17
x
x+17
If you type an expression in interactive mode, the interpreter evaluates it and
displays the result:
>>> 1+1
2
But in a script, an expression all by itself doesn’t do anything! This is a commo n
source of confusion for beginners.
Exercise 1: Type the following statements in the Python interpreter to
see what they do:
5
x=5
x+1
2.7 Order of operations
When more than one operator appears in an expression, the order of evaluation
depends on the rules of precedence . For mathematical operators, Python follows
mathematical convention. The acronym PEMDAS is a useful way to remember
the rules:
•Parentheses have the highest precedence and can be used to force an expres-
sion to evaluate in the order you want. Since expressions in parentheses are
evaluated ﬁrst, 2 * (3-1) is 4, and (1+1)**(5-2) is 8. You can also use
parentheses to make an expression easier to read, as in (minute * 100) /
60, even if it doesn’t change the result.
24 CHAPTER 2. VARIABLES, EXPRESSIONS, AND STATEMENTS
•Exponentiation has the next highest precedence, so 2**1+1 is 3, not 4, and
3*1**3 is 3, not 27.
•Multiplication and Division have the same precedence, which is higher than
Addition and Subtraction, which also have the same precedence. So 2*3-1
is 5, not 4, and 6+4/2 is 8, not 5.
• Operators with the same precedence are evaluated from left to right. So the
expression 5-3-1 is 1, not 3, because the 5-3happens ﬁrst and then 1is
subtracted from 2.
When in doubt, always put parentheses in your expressions to make sure the com-
putations are performed in the order you intend.
2.8 Modulus operator
The modulus operator works on integers and yields the remainder when the ﬁrst
operand is divided by the second. In Python, the modulus operator is a percent
sign ( %). The syntax is the same as for other operators:
>>> quotient =7//3
>>> print(quotient)
2
>>> remainder =7%3
>>> print(remainder)
1
So 7 divided by 3 is 2 with 1 left over.
The modulus operator turns out to be surprisingly useful. For example, you can
check whether one number is divisible by another: if x % y is zero, then xis
divisible by y.
You can also extract the right-most digit or digits from a number. For exa mple,
x % 10 yields the right-most digit of x(in base 10). Similarly, x % 100 yields the
last two digits.
2.9 String operations
The+operator works with strings, but it is not addition in the mathematical sens e.
Instead it performs concatenation , which means joining the strings by linking them
end to end. For example:
>>> first =10
>>> second =15
>>> print(first +second)
25
>>> first =/quotesingle.ts1100/quotesingle.ts1
2.10. ASKING THE USER FOR INPUT 25
>>> second =/quotesingle.ts1150/quotesingle.ts1
>>> print(first +second)
100150
The*operator also works with strings by multiplying the content of a string by
an integer. For example:
>>> first =/quotesingle.ts1Test /quotesingle.ts1
>>> second =3
>>> print(first *second)
Test Test Test
2.10 Asking the user for input
Sometimes we would like to take the value for a variable from the user via t heir
keyboard. Python provides a built-in function called input that gets input from
the keyboard1. When this function is called, the program stops and waits for the
user to type something. When the user presses Return orEnter , the program
resumes and input returns what the user typed as a string.
>>> inp=input()
Some silly stuff
>>> print(inp)
Some silly stuff
Before getting input from the user, it is a good idea to print a prompt telling the
user what to input. You can pass a string to input to be displayed to the user
before pausing for input:
>>> name =input( /quotesingle.ts1What is your name?\n/quotesingle.ts1 )
What isyour name?
Chuck
>>> print(name)
Chuck
The sequence \nat the end of the prompt represents a newline , which is a special
character that causes a line break. That’s why the user’s input appears below the
prompt.
If you expect the user to type an integer, you can try to convert the return value
tointusing the int() function:
>>> prompt =/quotesingle.ts1What...is the airspeed velocity of an unladen swallow?\n/quotesingle.ts1
>>> speed =input(prompt)
What... isthe airspeed velocity of an unladen swallow?
17
1In Python 2.0, this function was named raw_input .
26 CHAPTER 2. VARIABLES, EXPRESSIONS, AND STATEMENTS
>>> int(speed)
17
>>> int(speed) +5
22
But if the user types something other than a string of digits, you get an error:
>>> speed =input(prompt)
What... isthe airspeed velocity of an unladen swallow?
What do you mean, an African ora European swallow?
>>> int(speed)
ValueError : invalid literal for int() with base 10:
We will see how to handle this kind of error later.
2.11 Comments
As programs get bigger and more complicated, they get more diﬃcult to read.
Formal languages are dense, and it is often diﬃcult to look at a piece of code and
ﬁgure out what it is doing, or why.
For this reason, it is a good idea to add notes to your programs to explain in
natural language what the program is doing. These notes are called comments ,
and in Python they start with the #symbol:
# compute the percentage of the hour that has elapsed
percentage =(minute *100)/60
In this case, the comment appears on a line by itself. You can also put comments
at the end of a line:
percentage =(minute *100)/60 # percentage of an hour
Everything from the #to the end of the line is ignored; it has no eﬀect on the
program.
Comments are most useful when they document non-obvious features of the code.
It is reasonable to assume that the reader can ﬁgure out what the code does; it is
much more useful to explain why.
This comment is redundant with the code and useless:
v=5 # assign 5 to v
This comment contains useful information that is not in the code:
v=5 # velocity in meters/second.
Good variable names can reduce the need for comments, but long names can make
complex expressions hard to read, so there is a trade-oﬀ.
2.12. CHOOSING MNEMONIC VARIABLE NAMES 27
2.12 Choosing mnemonic variable names
As long as you follow the simple rules of variable naming, and avoid reserv ed
words, you have a lot of choice when you name your variables. In the beginning,
this choice can be confusing both when you read a program and when you write
your own programs. For example, the following three programs are identical in
terms of what they accomplish, but very diﬀerent when you read them and try to
understand them.
a=35.0
b=12.50
c=a*b
print(c)
hours =35.0
rate =12.50
pay =hours *rate
print(pay)
x1q3z9ahd =35.0
x1q3z9afd =12.50
x1q3p9afd =x1q3z9ahd *x1q3z9afd
print(x1q3p9afd)
The Python interpreter sees all three of these programs as exactly the same but
humans see and understand these programs quite diﬀerently. Humans will most
quickly understand the intent of the second program because the programmer has
chosen variable names that reﬂect their intent regarding what data will be stored
in each variable.
We call these wisely chosen variable names “mnemonic variable names”. The word
mnemonic2means “memory aid”. We choose mnemonic variable names to help us
remember why we created the variable in the ﬁrst place.
While this all sounds great, and it is a very good idea to use mnemonic variable
names, mnemonic variable names can get in the way of a beginning programmer’s
ability to parse and understand code. This is because beginning programmers have
not yet memorized the reserved words (there are only 33 of them) and sometimes
variables with names that are too descriptive start to look like part of t he language
and not just well-chosen variable names.
Take a quick look at the following Python sample code which loops through s ome
data. We will cover loops soon, but for now try to just puzzle through what this
means:
for word inwords:
print(word)
2See https://en.wikipedia.org/wiki/Mnemonic for an extended description of the word
“mnemonic” .
28 CHAPTER 2. VARIABLES, EXPRESSIONS, AND STATEMENTS
What is happening here? Which of the tokens (for, word, in, etc.) are reserved
words and which are just variable names? Does Python understand at a funda-
mental level the notion of words? Beginning programmers have trouble separating
what parts of the code must be the same as this example and what parts of the
code are simply choices made by the programmer.
The following code is equivalent to the above code:
for slice inpizza:
print(slice)
It is easier for the beginning programmer to look at this code and know which part s
are reserved words deﬁned by Python and which parts are simply variable names
chosen by the programmer. It is pretty clear that Python has no fundamental
understanding of pizza and slices and the fact that a pizza consists of a set of one
or more slices.
But if our program is truly about reading data and looking for words in the data ,
pizza andslice are very un-mnemonic variable names. Choosing them as variable
names distracts from the meaning of the program.
After a pretty short period of time, you will know the most common reserved w ords
and you will start to see the reserved words jumping out at you:
The parts of the code that are deﬁned by Python ( for,in,print , and :) are in
bold and the programmer-chosen variables ( word andwords ) are not in bold. Many
text editors are aware of Python syntax and will color reserved words diﬀer ently
to give you clues to keep your variables and reserved words separate. After a while
you will begin to read Python and quickly determine what is a variable and wha t
is a reserved word.
2.13 Debugging
At this point, the syntax error you are most likely to make is an ill egal variable
name, like class andyield , which are keywords, or odd~job andUS$, which
contain illegal characters.
If you put a space in a variable name, Python thinks it is two operands without
an operator:
>>> bad name =5
SyntaxError : invalid syntax
>>> month =09
File "<stdin>" , line 1
month =09
^
SyntaxError : invalid token
2.14. GLOSSARY 29
For syntax errors, the error messages don’t help much. The most common messag es
areSyntaxError: invalid syntax andSyntaxError: invalid token , neither
of which is very informative.
The runtime error you are most likely to make is a “use before def;” that i s, trying
to use a variable before you have assigned a value. This can happen if you spell a
variable name wrong:
>>> principal =327.68
>>> interest =principle *rate
NameError : name /quotesingle.ts1principle/quotesingle.ts1 is not defined
Variables names are case sensitive, so LaTeX is not the same as latex .
At this point, the most likely cause of a semantic error is the order of oper ations.
For example, to evaluate 1 /2π, you might be tempted to write
>>> 1.0/2.0*pi
But the division happens ﬁrst, so you would get π/2, which is not the same thing!
There is no way for Python to know what you meant to write, so in this case yo u
don’t get an error message; you just get the wrong answer.
2.14 Glossary
assignment A statement that assigns a value to a variable.
concatenate To join two operands end to end.
comment Information in a program that is meant for other programmers (or
anyone reading the source code) and has no eﬀect on the execution of the
program.
evaluate To simplify an expression by performing the operations in order to yield
a single value.
expression A combination of variables, operators, and values that represents a
single result value.
ﬂoating point A type that represents numbers with fractional parts.
integer A type that represents whole numbers.
keyword A reserved word that is used by the compiler to parse a program; you
cannot use keywords like if,def, and while as variable names.
mnemonic A memory aid. We often give variables mnemonic names to help us
remember what is stored in the variable.
modulus operator An operator, denoted with a percent sign ( %), that works on
integers and yields the remainder when one number is divided by another.
operand One of the values on which an operator operates.
operator A special symbol that represents a simple computation like addition,
multiplication, or string concatenation.
rules of precedence The set of rules governing the order in which expressions
involving multiple operators and operands are evaluated.
statement A section of code that represents a command or action. So far, the
statements we have seen are assignments and print expression statement.
30 CHAPTER 2. VARIABLES, EXPRESSIONS, AND STATEMENTS
string A type that represents sequences of characters.
type A category of values. The types we have seen so far are integers (type int),
ﬂoating-point numbers (type float ), and strings (type str).
value One of the basic units of data, like a number or string, that a program
manipulates.
variable A name that refers to a value.
2.15 Exercises
Exercise 2: Write a program that uses input to prompt a user for their
name and then welcomes them.
Enter your name: Chuck
Hello Chuck
Exercise 3: Write a program to prompt the user for hours and rate per
hour to compute gross pay.
Enter Hours: 35
Enter Rate: 2.75
Pay: 96.25
We won’t worry about making sure our pay has exactly two digits after the decima l
place for now. If you want, you can play with the built-in Python round function
to properly round the resulting pay to two decimal places.
Exercise 4: Assume that we execute the following assignment state-
ments:
width = 17
height = 12.0
For each of the following expressions, write the value of the expression and t he
type (of the value of the expression).
1.width//2
2.width/2.0
3.height/3
4.1 + 2 * 5
Use the Python interpreter to check your answers.
Exercise 5: Write a program which prompts the user for a Celsius tem -
perature, convert the temperature to Fahrenheit, and print out the
converted temperature.
Chapter 3
Conditional execution
3.1 Boolean expressions
Aboolean expression is an expression that is either true or false. The following
examples use the operator ==, which compares two operands and produces True if
they are equal and False otherwise:
>>> 5==5
True
>>> 5==6
False
{}
True andFalse are special values that belong to the class bool; they are not
strings:
>>> type( True)
<class /quotesingle.ts1bool/quotesingle.ts1 >
>>> type( False )
<class /quotesingle.ts1bool/quotesingle.ts1 >
The==operator is one of the comparison operators ; the others are:
x!=y # x is not equal to y
x>y # x is greater than y
x<y # x is less than y
x>=y # x is greater than or equal to y
x<=y # x is less than or equal to y
xisy # x is the same as y
xis not y # x is not the same as y
Although these operations are probably familiar to you, the Python symbol s are
diﬀerent from the mathematical symbols for the same operations. A common error
is to use a single equal sign ( =) instead of a double equal sign ( ==). Remember
that =is an assignment operator and ==is a comparison operator. There is no
such thing as =<or=>.
31
32 CHAPTER 3. CONDITIONAL EXECUTION
3.2 Logical operators
There are three logical operators :and,or, and not. The semantics (meaning) of
these operators is similar to their meaning in English. For example,
x > 0 and x < 10
is true only if xis greater than 0 andless than 10.
n%2 == 0 or n%3 == 0 is true if either of the conditions is true, that is, if the
number is divisible by 2 or3.
Finally, the notoperator negates a boolean expression, so not (x > y) is true if
x > y is false; that is, if xis less than or equal to y.
Strictly speaking, the operands of the logical operators should be boolean ex pres-
sions, but Python is not very strict. Any nonzero number is interpreted as “true.”
>>> 17and True
True
This ﬂexibility can be useful, but there are some subtleties to it that might be
confusing. You might want to avoid it until you are sure you know what yo u are
doing.
3.3 Conditional execution
In order to write useful programs, we almost always need the ability to check condi-
tions and change the behavior of the program accordingly. Conditional statements
give us this ability. The simplest form is the ifstatement:
ifx>0:
print( /quotesingle.ts1x is positive/quotesingle.ts1 )
The boolean expression after the ifstatement is called the condition . We end the
ifstatement with a colon character (:) and the line(s) after the if statement ar e
indented.
x > 0 
print(‘x is postitive’) Yes 
Figure 3.1: If Logic
3.4. ALTERNATIVE EXECUTION 33
If the logical condition is true, then the indented statement gets executed. If the
logical condition is false, the indented statement is skipped.
ifstatements have the same structure as function deﬁnitions or forloops1. The
statement consists of a header line that ends with the colon character (:) followed
by an indented block. Statements like this are called compound statements because
they stretch across more than one line.
There is no limit on the number of statements that can appear in the body, but
there must be at least one. Occasionally, it is useful to have a body with no
statements (usually as a place holder for code you haven’t written yet). In that
case, you can use the pass statement, which does nothing.
ifx<0:
pass # need to handle negative values!
If you enter an ifstatement in the Python interpreter, the prompt will change
from three chevrons to three dots to indicate you are in the middle of a block of
statements, as shown below:
>>> x=3
>>> ifx<10:
... print( /quotesingle.ts1Small/quotesingle.ts1 )
...
Small
>>>
When using the Python interpreter, you must leave a blank line at the end of a
block, otherwise Python will return an error:
>>> x=3
>>> ifx<10:
... print( /quotesingle.ts1Small/quotesingle.ts1 )
... print( /quotesingle.ts1Done/quotesingle.ts1 )
File "<stdin>" , line 3
print( /quotesingle.ts1Done/quotesingle.ts1 )
^
SyntaxError : invalid syntax
A blank line at the end of a block of statements is not necessary when writing and
executing a script, but it may improve readability of your code.
3.4 Alternative execution
A second form of the ifstatement is alternative execution , in which there are two
possibilities and the condition determines which one gets executed. The syntax
looks like this:
1We will learn about functions in Chapter 4 and loops in Chapte r 5.
34 CHAPTER 3. CONDITIONAL EXECUTION
ifx%2==0:
print( /quotesingle.ts1x is even/quotesingle.ts1 )
else :
print( /quotesingle.ts1x is odd/quotesingle.ts1 )
If the remainder when xis divided by 2 is 0, then we know that xis even, and the
program displays a message to that eﬀect. If the condition is false, the second set
of statements is executed.
x%2 == 0 
print(‘x is even’) Yes 
print(‘x is odd’) No 
Figure 3.2: If-Then-Else Logic
Since the condition must either be true or false, exactly one of the alternatives wil l
be executed. The alternatives are called branches , because they are branches in
the ﬂow of execution.
3.5 Chained conditionals
Sometimes there are more than two possibilities and we need more than two
branches. One way to express a computation like that is a chained conditional :
ifx<y:
print( /quotesingle.ts1x is less than y/quotesingle.ts1 )
elif x>y:
print( /quotesingle.ts1x is greater than y/quotesingle.ts1 )
else:
print( /quotesingle.ts1x and y are equal/quotesingle.ts1 )
elif is an abbreviation of “else if.” Again, exactly one branch will be executed.
There is no limit on the number of elif statements. If there is an else clause, it
has to be at the end, but there doesn’t have to be one.
ifchoice ==/quotesingle.ts1a/quotesingle.ts1:
print( /quotesingle.ts1Bad guess/quotesingle.ts1 )
elif choice ==/quotesingle.ts1b/quotesingle.ts1:
print( /quotesingle.ts1Good guess/quotesingle.ts1 )
elif choice ==/quotesingle.ts1c/quotesingle.ts1:
print( /quotesingle.ts1Close, but not correct/quotesingle.ts1 )
3.6. NESTED CONDITIONALS 35
x < y print(‘less’) 
!   
x > y print (‘greater’) 
!   
print(‘equal’) 
Figure 3.3: If-Then-ElseIf Logic
Each condition is checked in order. If the ﬁrst is false, the next is checked, and so
on. If one of them is true, the corresponding branch executes, and the statement
ends. Even if more than one condition is true, only the ﬁrst true branch executes.
3.6 Nested conditionals
One conditional can also be nested within another. We could have written the
three-branch example like this:
ifx==y:
print( /quotesingle.ts1x and y are equal/quotesingle.ts1 )
else:
ifx<y:
print( /quotesingle.ts1x is less than y/quotesingle.ts1 )
else:
print( /quotesingle.ts1x is greater than y/quotesingle.ts1 )
The outer conditional contains two branches. The ﬁrst branch contains a simple
statement. The second branch contains another ifstatement, which has two
branches of its own. Those two branches are both simple statements, although
they could have been conditional statements as well.
Although the indentation of the statements makes the structure apparent, nested
conditionals become diﬃcult to read very quickly. In general, it is a good idea to
avoid them when you can.
Logical operators often provide a way to simplify nested conditional statem ents.
For example, we can rewrite the following code using a single conditional:
if0<x:
ifx<10:
print( /quotesingle.ts1x is a positive single-digit number./quotesingle.ts1 )
Theprint statement is executed only if we make it past both conditionals, so we
can get the same eﬀect with the andoperator:
36 CHAPTER 3. CONDITIONAL EXECUTION
x == y No 
print(‘equal’) Yes 
x < y 
print’‘greater’) No 
print(‘less’) Yes 
Figure 3.4: Nested If Statements
if0<xand x<10:
print( /quotesingle.ts1x is a positive single-digit number./quotesingle.ts1 )
3.7 Catching exceptions using try and except
Earlier we saw a code segment where we used the input andintfunctions to read
and parse an integer number entered by the user. We also saw how treacherous
doing this could be:
>>> prompt ="What is the air velocity of an unladen swallow?\n"
>>> speed =input(prompt)
What isthe air velocity of an unladen swallow?
What do you mean, an African ora European swallow?
>>> int(speed)
ValueError : invalid literal for int() with base 10:
>>>
When we are executing these statements in the Python interpreter, we get a new
prompt from the interpreter, think “oops”, and move on to our next statement.
However if you place this code in a Python script and this error occurs, your script
immediately stops in its tracks with a traceback. It does not execute the follo wing
statement.
Here is a sample program to convert a Fahrenheit temperature to a Celsius tem-
perature:
inp =input( /quotesingle.ts1Enter Fahrenheit Temperature: /quotesingle.ts1 )
fahr =float(inp)
cel =(fahr -32.0)*5.0 /9.0
print(cel)
# Code: http://www.py4e.com/code3/fahren.py
3.7. CATCHING EXCEPTIONS USING TRY AND EXCEPT 37
If we execute this code and give it invalid input, it simply fails with an unfri endly
error message:
python fahren.py
Enter Fahrenheit Temperature:72
22.22222222222222
python fahren.py
Enter Fahrenheit Temperature:fred
Traceback (most recent call last):
File "fahren.py", line 2, in <module>
fahr = float(inp)
ValueError: could not convert string to float: /quotesingle.ts1fred/quotesingle.ts1
There is a conditional execution structure built into Python to handle these types
of expected and unexpected errors called “try / except”. The idea of tryand
except is that you know that some sequence of instruction(s) may have a problem
and you want to add some statements to be executed if an error occurs. These
extra statements (the except block) are ignored if there is no error.
You can think of the tryandexcept feature in Python as an “insurance policy”
on a sequence of statements.
We can rewrite our temperature converter as follows:
inp =input( /quotesingle.ts1Enter Fahrenheit Temperature:/quotesingle.ts1 )
try:
fahr =float(inp)
cel=(fahr -32.0)*5.0 /9.0
print(cel)
except :
print( /quotesingle.ts1Please enter a number/quotesingle.ts1 )
# Code: http://www.py4e.com/code3/fahren2.py
Python starts by executing the sequence of statements in the tryblock. If all goes
well, it skips the except block and proceeds. If an exception occurs in the try
block, Python jumps out of the tryblock and executes the sequence of statements
in the except block.
python fahren2.py
Enter Fahrenheit Temperature:72
22.22222222222222
python fahren2.py
Enter Fahrenheit Temperature:fred
Please enter a number
Handling an exception with a trystatement is called catching an exception. In
this example, the except clause prints an error message. In general, catching an
exception gives you a chance to ﬁx the problem, or try again, or at least end the
program gracefully.
38 CHAPTER 3. CONDITIONAL EXECUTION
3.8 Short-circuit evaluation of logical expressions
When Python is processing a logical expression such as x >= 2 and (x/y) > 2 , it
evaluates the expression from left to right. Because of the deﬁnition of and, ifxis
less than 2, the expression x >= 2 isFalse and so the whole expression is False
regardless of whether (x/y) > 2 evaluates to True orFalse .
When Python detects that there is nothing to be gained by evaluating the rest
of a logical expression, it stops its evaluation and does not do the computations
in the rest of the logical expression. When the evaluation of a logical expressio n
stops because the overall value is already known, it is called short-circuiting the
evaluation.
While this may seem like a ﬁne point, the short-circuit behavior leads to a clever
technique called the guardian pattern . Consider the following code sequence in the
Python interpreter:
>>> x=6
>>> y=2
>>> x>=2and(x/y)>2
True
>>> x=1
>>> y=0
>>> x>=2and(x/y)>2
False
>>> x=6
>>> y=0
>>> x>=2and(x/y)>2
Traceback (most recent call last):
File "<stdin>" , line 1,in <module >
ZeroDivisionError : division by zero
>>>
The third calculation failed because Python was evaluating (x/y) andywas zero,
which causes a runtime error. But the second example did notfail because the
ﬁrst part of the expression x >= 2 evaluated to False so the (x/y) was not ever
executed due to the short-circuit rule and there was no error.
We can construct the logical expression to strategically place a guard evaluation
just before the evaluation that might cause an error as follows:
>>> x=1
>>> y=0
>>> x>=2andy!=0and (x/y)>2
False
>>> x=6
>>> y=0
>>> x>=2andy!=0and (x/y)>2
False
>>> x>=2and(x/y)>2andy!=0
Traceback (most recent call last):
3.9. DEBUGGING 39
File "<stdin>" , line 1,in <module >
ZeroDivisionError : division by zero
>>>
In the ﬁrst logical expression, x >= 2 isFalse so the evaluation stops at the and.
In the second logical expression, x >= 2 isTrue buty != 0 isFalse so we never
reach (x/y) .
In the third logical expression, the y != 0 isafter the(x/y) calculation so the
expression fails with an error.
In the second expression, we say that y != 0 acts as a guard to insure that we
only execute (x/y) ifyis non-zero.
3.9 Debugging
The traceback Python displays when an error occurs contains a lot of informatio n,
but it can be overwhelming. The most useful parts are usually:
• What kind of error it was, and
• Where it occurred.
Syntax errors are usually easy to ﬁnd, but there are a few gotchas. Whitespace
errors can be tricky because spaces and tabs are invisible and we are used to
ignoring them.
>>> x=5
>>> y=6
File "<stdin>" , line 1
y=6
^
IndentationError : unexpected indent
In this example, the problem is that the second line is indented by one space. But
the error message points to y, which is misleading. In general, error messages
indicate where the problem was discovered, but the actual error might be earlier
in the code, sometimes on a previous line.
In general, error messages tell you where the problem was discovered, but that is
often not where it was caused.
3.10 Glossary
body The sequence of statements within a compound statement.
boolean expression An expression whose value is either True orFalse .
branch One of the alternative sequences of statements in a conditional statement.
40 CHAPTER 3. CONDITIONAL EXECUTION
chained conditional A conditional statement with a series of alternative
branches.
comparison operator One of the operators that compares its operands: ==,!=,
>,<,>=, and <=.
conditional statement A statement that controls the ﬂow of execution depend-
ing on some condition.
condition The boolean expression in a conditional statement that determines
which branch is executed.
compound statement A statement that consists of a header and a body. The
header ends with a colon (:). The body is indented relative to the header.
guardian pattern Where we construct a logical expression with additional com-
parisons to take advantage of the short-circuit behavior.
logical operator One of the operators that combines boolean expressions: and,
or, and not.
nested conditional A conditional statement that appears in one of the branches
of another conditional statement.
traceback A list of the functions that are executing, printed when an exception
occurs.
short circuit When Python is part-way through evaluating a logical expression
and stops the evaluation because Python knows the ﬁnal value for the ex-
pression without needing to evaluate the rest of the expression.
3.11 Exercises
Exercise 1: Rewrite your pay computation to give the employee 1.5
times the hourly rate for hours worked above 40 hours.
Enter Hours: 45
Enter Rate: 10
Pay: 475.0
Exercise 2: Rewrite your pay program using tryand except so that your
program handles non-numeric input gracefully by printing a me ssage
and exiting the program. The following shows two executions of the
program:
Enter Hours: 20
Enter Rate: nine
Error, please enter numeric input
Enter Hours: forty
Error, please enter numeric input
Exercise 3: Write a program to prompt for a score between 0.0 and
1.0. If the score is out of range, print an error message. If the s core is
between 0.0 and 1.0, print a grade using the following table:
Score Grade
3.11. EXERCISES 41
>= 0.9 A
>= 0.8 B
>= 0.7 C
>= 0.6 D
< 0.6 F
Enter score: 0.95
A
Enter score: perfect
Bad score
Enter score: 10.0
Bad score
Enter score: 0.75
C
Enter score: 0.5
F
Run the program repeatedly as shown above to test the various diﬀerent values fo r
input.
42 CHAPTER 3. CONDITIONAL EXECUTION
Chapter 4
Functions
4.1 Function calls
In the context of programming, a function is a named sequence of statements that
performs a computation. When you deﬁne a function, you specify the name and
the sequence of statements. Later, you can “call” the function by name. We have
already seen one example of a function call :
>>> type( 32)
<class /quotesingle.ts1int/quotesingle.ts1 >
The name of the function is type. The expression in parentheses is called the
argument of the function. The argument is a value or variable that we are passing
into the function as input to the function. The result, for the type function, is the
type of the argument.
It is common to say that a function “takes” an argument and “returns” a result.
The result is called the return value .
4.2 Built-in functions
Python provides a number of important built-in functions that we can use without
needing to provide the function deﬁnition. The creators of Python wrote a set of
functions to solve common problems and included them in Python for us to use.
Themaxandminfunctions give us the largest and smallest values in a list, respec-
tively:
>>> max(/quotesingle.ts1Hello world/quotesingle.ts1 )
/quotesingle.ts1w/quotesingle.ts1
>>> min(/quotesingle.ts1Hello world/quotesingle.ts1 )
/quotesingle.ts1 /quotesingle.ts1
>>>
43
44 CHAPTER 4. FUNCTIONS
Themaxfunction tells us the “largest character” in the string (which turns out to
be the letter “w”) and the minfunction shows us the smallest character (which
turns out to be a space).
Another very common built-in function is the lenfunction which tells us how many
items are in its argument. If the argument to lenis a string, it returns the number
of characters in the string.
>>> len(/quotesingle.ts1Hello world/quotesingle.ts1 )
11
>>>
These functions are not limited to looking at strings. They can operate on any set
of values, as we will see in later chapters.
You should treat the names of built-in functions as reserved words (i.e., avoid usi ng
“max” as a variable name).
4.3 Type conversion functions
Python also provides built-in functions that convert values from one type to an-
other. The intfunction takes any value and converts it to an integer, if it can, or
complains otherwise:
>>> int(/quotesingle.ts132/quotesingle.ts1)
32
>>> int(/quotesingle.ts1Hello/quotesingle.ts1 )
ValueError : invalid literal for int() with base 10:/quotesingle.ts1Hello/quotesingle.ts1
intcan convert ﬂoating-point values to integers, but it doesn’t round oﬀ; it chops
oﬀ the fraction part:
>>> int(3.99999 )
3
>>> int(-2.3)
-2
float converts integers and strings to ﬂoating-point numbers:
>>> float( 32)
32.0
>>> float( /quotesingle.ts13.14159/quotesingle.ts1 )
3.14159
Finally, strconverts its argument to a string:
>>> str(32)
/quotesingle.ts132/quotesingle.ts1
>>> str(3.14159 )
/quotesingle.ts13.14159/quotesingle.ts1
4.4. MATH FUNCTIONS 45
4.4 Math functions
Python has a math module that provides most of the familiar mathematical func-
tions. Before we can use the module, we have to import it:
>>> import math
This statement creates a module object named math. If you print the module
object, you get some information about it:
>>> print(math)
<module /quotesingle.ts1math/quotesingle.ts1 (built -in)>
The module object contains the functions and variables deﬁned in the module. To
access one of the functions, you have to specify the name of the module and the
name of the function, separated by a dot (also known as a period). This format i s
called dot notation .
>>> ratio =signal_power /noise_power
>>> decibels =10*math.log10(ratio)
>>> radians =0.7
>>> height =math.sin(radians)
The ﬁrst example computes the logarithm base 10 of the signal-to-noise ratio. T he
math module also provides a function called logthat computes logarithms base e.
The second example ﬁnds the sine of radians . The name of the variable is a hint
that sinand the other trigonometric functions ( cos,tan, etc.) take arguments in
radians. To convert from degrees to radians, divide by 360 and multiply by 2 π:
>>> degrees =45
>>> radians =degrees /360.0 *2*math.pi
>>> math.sin(radians)
0.7071067811865476
The expression math.pi gets the variable pifrom the math module. The value of
this variable is an approximation of π, accurate to about 15 digits.
If you know your trigonometry, you can check the previous result by comparing it
to the square root of two divided by two:
>>> math.sqrt( 2)/2.0
0.7071067811865476
46 CHAPTER 4. FUNCTIONS
4.5 Random numbers
Given the same inputs, most computer programs generate the same outputs every
time, so they are said to be deterministic . Determinism is usually a good thing,
since we expect the same calculation to yield the same result. For some applica-
tions, though, we want the computer to be unpredictable. Games are an obvious
example, but there are more.
Making a program truly nondeterministic turns out to be not so easy, but there
are ways to make it at least seem nondeterministic. One of them is to use al-
gorithms that generate pseudorandom numbers. Pseudorandom numbers are not
truly random because they are generated by a deterministic computation, but just
by looking at the numbers it is all but impossible to distinguish them from r andom.
The random module provides functions that generate pseudorandom numbers
(which I will simply call “random” from here on).
The function random returns a random ﬂoat between 0.0 and 1.0 (including 0.0
but not 1.0). Each time you call random , you get the next number in a long series.
To see a sample, run this loop:
import random
for iinrange( 10):
x=random.random()
print(x)
This program produces the following list of 10 random numbers between 0.0 and
up to but not including 1.0.
0.11132867921152356
0.5950949227890241
0.04820265884996877
0.841003109276478
0.997914947094958
0.04842330803368111
0.7416295948208405
0.510535245390327
0.27447040171978143
0.028511805472785867
Exercise 1: Run the program on your system and see what numbers
you get. Run the program more than once and see what numbers you
get.
Therandom function is only one of many functions that handle random numbers.
The function randint takes the parameters lowandhigh, and returns an integer
between lowandhigh (including both).
>>> random.randint( 5,10)
5
>>> random.randint( 5,10)
9
4.6. ADDING NEW FUNCTIONS 47
To choose an element from a sequence at random, you can use choice :
>>> t=[1,2,3]
>>> random.choice(t)
2
>>> random.choice(t)
3
The random module also provides functions to generate random values from con-
tinuous distributions including Gaussian, exponential, gamma, and a few more.
4.6 Adding new functions
So far, we have only been using the functions that come with Python, but it is also
possible to add new functions. A function deﬁnition speciﬁes the name of a new
function and the sequence of statements that execute when the function is called.
Once we deﬁne a function, we can reuse the function over and over throughout our
program.
Here is an example:
def print_lyrics():
print( "I/quotesingle.ts1m a lumberjack, and I/quotesingle.ts1m okay." )
print( /quotesingle.ts1I sleep all night and I work all day./quotesingle.ts1 )
defis a keyword that indicates that this is a function deﬁnition. The name of
the function is print_lyrics . The rules for function names are the same as for
variable names: letters, numbers and some punctuation marks are legal, but the
ﬁrst character can’t be a number. You can’t use a keyword as the name of a
function, and you should avoid having a variable and a function with the same
name.
The empty parentheses after the name indicate that this function doesn’t take any
arguments. Later we will build functions that take arguments as their inputs.
The ﬁrst line of the function deﬁnition is called the header ; the rest is called
thebody. The header has to end with a colon and the body has to be indented.
By convention, the indentation is always four spaces. The body can contain any
number of statements.
If you type a function deﬁnition in interactive mode, the interpreter prints elli pses
(. . .) to let you know that the deﬁnition isn’t complete:
>>> defprint_lyrics():
... print( "I/quotesingle.ts1m a lumberjack, and I/quotesingle.ts1m okay." )
... print( /quotesingle.ts1I sleep all night and I work all day./quotesingle.ts1 )
...
To end the function, you have to enter an empty line (this is not necessary in a
script).
Deﬁning a function creates a variable with the same name.
48 CHAPTER 4. FUNCTIONS
>>> print(print_lyrics)
<function print_lyrics at 0xb7e99e9c >
>>> print(type(print_lyrics))
<class /quotesingle.ts1function/quotesingle.ts1 >
The value of print_lyrics is afunction object , which has type “function”.
The syntax for calling the new function is the same as for built-in functions:
>>> print_lyrics()
I/quotesingle.ts1m a lumberjack, and I/quotesingle.ts1 m okay.
I sleep all night andI work all day.
Once you have deﬁned a function, you can use it inside another function. For exam-
ple, to repeat the previous refrain, we could write a function called repeat_lyrics :
def repeat_lyrics():
print_lyrics()
print_lyrics()
And then call repeat_lyrics :
>>> repeat_lyrics()
I/quotesingle.ts1m a lumberjack, and I/quotesingle.ts1 m okay.
I sleep all night andI work all day.
I/quotesingle.ts1m a lumberjack, and I/quotesingle.ts1 m okay.
I sleep all night andI work all day.
But that’s not really how the song goes.
4.7 Deﬁnitions and uses
Pulling together the code fragments from the previous section, the whole program
looks like this:
def print_lyrics():
print( "I/quotesingle.ts1m a lumberjack, and I/quotesingle.ts1m okay." )
print( /quotesingle.ts1I sleep all night and I work all day./quotesingle.ts1 )
def repeat_lyrics():
print_lyrics()
print_lyrics()
repeat_lyrics()
# Code: http://www.py4e.com/code3/lyrics.py
4.8. FLOW OF EXECUTION 49
This program contains two function deﬁnitions: print_lyrics andrepeat_lyrics .
Function deﬁnitions get executed just like other statements, but the eﬀect is to
create function objects. The statements inside the function do not get executed
until the function is called, and the function deﬁnition generates no output.
As you might expect, you have to create a function before you can execute it. In
other words, the function deﬁnition has to be executed before the ﬁrst time it is
called.
Exercise 2: Move the last line of this program to the top, so the functio n
call appears before the deﬁnitions. Run the program and see what e rror
message you get.
Exercise 3: Move the function call back to the bottom and move the
deﬁnition of print_lyrics after the deﬁnition of repeat_lyrics . What
happens when you run this program?
4.8 Flow of execution
In order to ensure that a function is deﬁned before its ﬁrst use, you have to know
the order in which statements are executed, which is called the ﬂow of execution .
Execution always begins at the ﬁrst statement of the program. Statements are
executed one at a time, in order from top to bottom.
Function deﬁnitions do not alter the ﬂow of execution of the program, but re-
member that statements inside the function are not executed until the function is
called.
A function call is like a detour in the ﬂow of execution. Instead of going to the next
statement, the ﬂow jumps to the body of the function, executes all the statements
there, and then comes back to pick up where it left oﬀ.
That sounds simple enough, until you remember that one function can call another.
While in the middle of one function, the program might have to execute the state-
ments in another function. But while executing that new function, the program
might have to execute yet another function!
Fortunately, Python is good at keeping track of where it is, so each time a f unction
completes, the program picks up where it left oﬀ in the function that called it.
When it gets to the end of the program, it terminates.
What’s the moral of this sordid tale? When you read a program, you don’t alw ays
want to read from top to bottom. Sometimes it makes more sense if you fo llow the
ﬂow of execution.
4.9 Parameters and arguments
Some of the built-in functions we have seen require arguments. For example, when
you call math.sin you pass a number as an argument. Some functions take more
than one argument: math.pow takes two, the base and the exponent.
50 CHAPTER 4. FUNCTIONS
Inside the function, the arguments are assigned to variables called parameters .
Here is an example of a user-deﬁned function that takes an argument:
def print_twice(bruce):
print(bruce)
print(bruce)
This function assigns the argument to a parameter named bruce . When the func-
tion is called, it prints the value of the parameter (whatever it is) twice.
This function works with any value that can be printed.
>>> print_twice( /quotesingle.ts1Spam/quotesingle.ts1 )
Spam
Spam
>>> print_twice( 17)
17
17
>>> import math
>>> print_twice(math.pi)
3.141592653589793
3.141592653589793
The same rules of composition that apply to built-in functions also apply to
user-deﬁned functions, so we can use any kind of expression as an argument for
print_twice :
>>> print_twice( /quotesingle.ts1Spam /quotesingle.ts1 *4)
Spam Spam Spam Spam
Spam Spam Spam Spam
>>> print_twice(math.cos(math.pi))
-1.0
-1.0
The argument is evaluated before the function is called, so in the examples the
expressions /quotesingle.ts1Spam /quotesingle.ts1*4 andmath.cos(math.pi) are only evaluated once.
You can also use a variable as an argument:
>>> michael =/quotesingle.ts1Eric, the half a bee./quotesingle.ts1
>>> print_twice(michael)
Eric, the half a bee.
Eric, the half a bee.
The name of the variable we pass as an argument ( michael ) has nothing to do
with the name of the parameter ( bruce ). It doesn’t matter what the value was
called back home (in the caller); here in print_twice , we call everybody bruce .
4.10. FRUITFUL FUNCTIONS AND VOID FUNCTIONS 51
4.10 Fruitful functions and void functions
Some of the functions we are using, such as the math functions, yield results;
for lack of a better name, I call them fruitful functions . Other functions, like
print_twice , perform an action but don’t return a value. They are called void
functions .
When you call a fruitful function, you almost always want to do something wit h
the result; for example, you might assign it to a variable or use it as par t of an
expression:
x=math.cos(radians)
golden =(math.sqrt( 5)+1)/2
When you call a function in interactive mode, Python displays the result:
>>> math.sqrt( 5)
2.23606797749979
But in a script, if you call a fruitful function and do not store the result of the
function in a variable, the return value vanishes into the mist!
math.sqrt( 5)
This script computes the square root of 5, but since it doesn’t store the result in
a variable or display the result, it is not very useful.
Void functions might display something on the screen or have some other eﬀect,
but they don’t have a return value. If you try to assign the result to a variable,
you get a special value called None.
>>> result =print_twice( /quotesingle.ts1Bing/quotesingle.ts1 )
Bing
Bing
>>> print(result)
None
The value None is not the same as the string “None”. It is a special value that has
its own type:
>>> print(type( None))
<class /quotesingle.ts1NoneType/quotesingle.ts1 >
To return a result from a function, we use the return statement in our function.
For example, we could make a very simple function called addtwo that adds two
numbers together and returns a result.
52 CHAPTER 4. FUNCTIONS
def addtwo(a, b):
added =a+b
return added
x=addtwo( 3,5)
print(x)
# Code: http://www.py4e.com/code3/addtwo.py
When this script executes, the print statement will print out “8” because the
addtwo function was called with 3 and 5 as arguments. Within the function, the
parameters aandbwere 3 and 5 respectively. The function computed the sum of
the two numbers and placed it in the local function variable named added . Then
it used the return statement to send the computed value back to the calling code
as the function result, which was assigned to the variable xand printed out.
4.11 Why functions?
It may not be clear why it is worth the trouble to divide a program into functi ons.
There are several reasons:
• Creating a new function gives you an opportunity to name a group of state-
ments, which makes your program easier to read, understand, and debug.
• Functions can make a program smaller by eliminating repetitive code. Later,
if you make a change, you only have to make it in one place.
• Dividing a long program into functions allows you to debug the parts one at
a time and then assemble them into a working whole.
• Well-designed functions are often useful for many programs. Once you write
and debug one, you can reuse it.
Throughout the rest of the book, often we will use a function deﬁnition to explain
a concept. Part of the skill of creating and using functions is to have a function
properly capture an idea such as “ﬁnd the smallest value in a list of values”. La ter
we will show you code that ﬁnds the smallest in a list of values and we will presen t
it to you as a function named minwhich takes a list of values as its argument and
returns the smallest value in the list.
4.12 Debugging
If you are using a text editor to write your scripts, you might run into pro blems with
spaces and tabs. The best way to avoid these problems is to use spaces exclusively
(no tabs). Most text editors that know about Python do this by default, but some
don’t.
Tabs and spaces are usually invisible, which makes them hard to debug, so try to
ﬁnd an editor that manages indentation for you.
4.13. GLOSSARY 53
Also, don’t forget to save your program before you run it. Some development
environments do this automatically, but some don’t. In that case, the program
you are looking at in the text editor is not the same as the program you are
running.
Debugging can take a long time if you keep running the same incorrect program
over and over!
Make sure that the code you are looking at is the code you are running. If you’re
not sure, put something like print("hello") at the beginning of the program and
run it again. If you don’t see hello , you’re not running the right program!
4.13 Glossary
algorithm A general process for solving a category of problems.
argument A value provided to a function when the function is called. This value
is assigned to the corresponding parameter in the function.
body The sequence of statements inside a function deﬁnition.
composition Using an expression as part of a larger expression, or a statement
as part of a larger statement.
deterministic Pertaining to a program that does the same thing each time it
runs, given the same inputs.
dot notation The syntax for calling a function in another module by specifying
the module name followed by a dot (period) and the function name.
ﬂow of execution The order in which statements are executed during a program
run.
fruitful function A function that returns a value.
function A named sequence of statements that performs some useful operation.
Functions may or may not take arguments and may or may not produce a
result.
function call A statement that executes a function. It consists of the function
name followed by an argument list.
function deﬁnition A statement that creates a new function, specifying its name,
parameters, and the statements it executes.
function object A value created by a function deﬁnition. The name of the func-
tion is a variable that refers to a function object.
header The ﬁrst line of a function deﬁnition.
import statement A statement that reads a module ﬁle and creates a module
object.
module object A value created by an import statement that provides access to
the data and code deﬁned in a module.
parameter A name used inside a function to refer to the value passed as an
argument.
pseudorandom Pertaining to a sequence of numbers that appear to be random,
but are generated by a deterministic program.
return value The result of a function. If a function call is used as an expression,
the return value is the value of the expression.
void function A function that does not return a value.
54 CHAPTER 4. FUNCTIONS
4.14 Exercises
Exercise 4: What is the purpose of the “def” keyword in Python?
a) It is slang that means “the following code is really cool”
b) It indicates the start of a function
c) It indicates that the following indented section of code is to be stored for lat er
d) b and c are both true
e) None of the above
Exercise 5: What will the following Python program print out?
def fred():
print( "Zap" )
def jane():
print( "ABC" )
jane()
fred()
jane()
a) Zap ABC jane fred jane
b) Zap ABC Zap
c) ABC Zap jane
d) ABC Zap ABC
e) Zap Zap Zap
Exercise 6: Rewrite your pay computation with time-and-a-half for over-
time and create a function called computepay which takes two parameters
(hours and rate).
Enter Hours: 45
Enter Rate: 10
Pay: 475.0
Exercise 7: Rewrite the grade program from the previous chapter us ing
a function called computegrade that takes a score as its parameter and
returns a grade as a string.
Score Grade
>= 0.9 A
>= 0.8 B
>= 0.7 C
>= 0.6 D
< 0.6 F
Enter score: 0.95
A
Enter score: perfect
Bad score
4.14. EXERCISES 55
Enter score: 10.0
Bad score
Enter score: 0.75
C
Enter score: 0.5
F
Run the program repeatedly to test the various diﬀerent values for input.
56 CHAPTER 4. FUNCTIONS
Chapter 5
Iteration
5.1 Updating variables
A common pattern in assignment statements is an assignment statement that up-
dates a variable, where the new value of the variable depends on the old.
x=x+1
This means “get the current value of x, add 1, and then update xwith the new
value.”
If you try to update a variable that doesn’t exist, you get an error, because P ython
evaluates the right side before it assigns a value to x:
>>> x=x+1
NameError : name /quotesingle.ts1x/quotesingle.ts1 is not defined
Before you can update a variable, you have to initialize it, usually with a simple
assignment:
>>> x=0
>>> x=x+1
Updating a variable by adding 1 is called an increment ; subtracting 1 is called a
decrement .
5.2 The while statement
Computers are often used to automate repetitive tasks. Repeating identical o r
similar tasks without making errors is something that computers do well and peo ple
do poorly. Because iteration is so common, Python provides several language
features to make it easier.
One form of iteration in Python is the while statement. Here is a simple program
that counts down from ﬁve and then says “Blastoﬀ!”.
57
58 CHAPTER 5. ITERATION
n=5
while n>0:
print(n)
n=n-1
print( /quotesingle.ts1Blastoff!/quotesingle.ts1 )
You can almost read the while statement as if it were English. It means, “While
nis greater than 0, display the value of nand then reduce the value of nby 1.
When you get to 0, exit the while statement and display the word Blastoff! ”
More formally, here is the ﬂow of execution for a while statement:
1. Evaluate the condition, yielding True orFalse .
2. If the condition is false, exit the while statement and continue execution at
the next statement.
3. If the condition is true, execute the body and then go back to step 1.
This type of ﬂow is called a loop because the third step loops back around to the
top. We call each time we execute the body of the loop an iteration . For the above
loop, we would say, “It had ﬁve iterations”, which means that the body of the l oop
was executed ﬁve times.
The body of the loop should change the value of one or more variables so that
eventually the condition becomes false and the loop terminates. We call the vari -
able that changes each time the loop executes and controls when the loop ﬁnishes
theiteration variable . If there is no iteration variable, the loop will repeat forever,
resulting in an inﬁnite loop .
5.3 Inﬁnite loops
An endless source of amusement for programmers is the observation that the di-
rections on shampoo, “Lather, rinse, repeat,” are an inﬁnite loop because there i s
noiteration variable telling you how many times to execute the loop.
In the case of countdown , we can prove that the loop terminates because we know
that the value of nis ﬁnite, and we can see that the value of ngets smaller each
time through the loop, so eventually we have to get to 0. Other times a loop is
obviously inﬁnite because it has no iteration variable at all.
Sometimes you don’t know it’s time to end a loop until you get half way through
the body. In that case you can write an inﬁnite loop on purpose and then use the
break statement to jump out of the loop.
This loop is obviously an inﬁnite loop because the logical expression on the while
statement is simply the logical constant True:
n=10
while True:
print(n, end =/quotesingle.ts1 /quotesingle.ts1)
n=n-1
print( /quotesingle.ts1Done!/quotesingle.ts1 )
5.4. FINISHING ITERATIONS WITH CONTINUE 59
If you make the mistake and run this code, you will learn quickly how to sto p
a runaway Python process on your system or ﬁnd where the power-oﬀ button is
on your computer. This program will run forever or until your battery runs out
because the logical expression at the top of the loop is always true by virt ue of the
fact that the expression is the constant value True.
While this is a dysfunctional inﬁnite loop, we can still use this pattern to build
useful loops as long as we carefully add code to the body of the loop to explicitly
exit the loop using break when we have reached the exit condition.
For example, suppose you want to take input from the user until they type done.
You could write:
while True:
line =input( /quotesingle.ts1> /quotesingle.ts1 )
ifline ==/quotesingle.ts1done/quotesingle.ts1 :
break
print(line)
print( /quotesingle.ts1Done!/quotesingle.ts1 )
# Code: http://www.py4e.com/code3/copytildone1.py
The loop condition is True, which is always true, so the loop runs repeatedly until
it hits the break statement.
Each time through, it prompts the user with an angle bracket. If the user types
done, the break statement exits the loop. Otherwise the program echoes whatever
the user types and goes back to the top of the loop. Here’s a sample run:
> hello there
hello there
> finished
finished
> done
Done!
This way of writing while loops is common because you can check the condition
anywhere in the loop (not just at the top) and you can express the stop condition
aﬃrmatively (“stop when this happens”) rather than negatively (“keep going unti l
that happens.”).
5.4 Finishing iterations with continue
Sometimes you are in an iteration of a loop and want to ﬁnish the current iter ation
and immediately jump to the next iteration. In that case you can use the continue
statement to skip to the next iteration without ﬁnishing the body of the loop fo r
the current iteration.
Here is an example of a loop that copies its input until the user types “done”, but
treats lines that start with the hash character as lines not to be printed (kind of
like Python comments).
60 CHAPTER 5. ITERATION
while True:
line =input( /quotesingle.ts1> /quotesingle.ts1 )
ifline[ 0]==/quotesingle.ts1#/quotesingle.ts1:
continue
ifline ==/quotesingle.ts1done/quotesingle.ts1 :
break
print(line)
print( /quotesingle.ts1Done!/quotesingle.ts1 )
# Code: http://www.py4e.com/code3/copytildone2.py
Here is a sample run of this new program with continue added.
> hello there
hello there
> # don/quotesingle.ts1t print this
> print this!
print this!
> done
Done!
All the lines are printed except the one that starts with the hash sign because
when the continue is executed, it ends the current iteration and jumps back to
thewhile statement to start the next iteration, thus skipping the print statement.
5.5 Deﬁnite loops using for
Sometimes we want to loop through a setof things such as a list of words, the lines
in a ﬁle, or a list of numbers. When we have a list of things to loop through, we
can construct a deﬁnite loop using a forstatement. We call the while statement
anindeﬁnite loop because it simply loops until some condition becomes False ,
whereas the forloop is looping through a known set of items so it runs through
as many iterations as there are items in the set.
The syntax of a forloop is similar to the while loop in that there is a for
statement and a loop body:
friends =[/quotesingle.ts1Joseph/quotesingle.ts1 ,/quotesingle.ts1Glenn/quotesingle.ts1 ,/quotesingle.ts1Sally/quotesingle.ts1 ]
for friend infriends:
print( /quotesingle.ts1Happy New Year:/quotesingle.ts1 , friend)
print( /quotesingle.ts1Done!/quotesingle.ts1 )
In Python terms, the variable friends is a list1of three strings and the forloop
goes through the list and executes the body once for each of the three strings in
the list resulting in this output:
1We will examine lists in more detail in a later chapter.
5.6. LOOP PATTERNS 61
Happy New Year: Joseph
Happy New Year: Glenn
Happy New Year: Sally
Done!
Translating this forloop to English is not as direct as the while , but if you think
of friends as a set, it goes like this: “Run the statements in the body of the for
loop once for each friend inthe set named friends.”
Looking at the forloop, forandinare reserved Python keywords, and friend
andfriends are variables.
for friend infriends:
print( /quotesingle.ts1Happy New Year:/quotesingle.ts1 , friend)
In particular, friend is the iteration variable for the for loop. The variable friend
changes for each iteration of the loop and controls when the forloop completes.
The iteration variable steps successively through the three strings stored in the
friends variable.
5.6 Loop patterns
Often we use a fororwhile loop to go through a list of items or the contents of
a ﬁle and we are looking for something such as the largest or smallest value of the
data we scan through.
These loops are generally constructed by:
• Initializing one or more variables before the loop starts
• Performing some computation on each item in the loop body, possibly chang -
ing the variables in the body of the loop
• Looking at the resulting variables when the loop completes
We will use a list of numbers to demonstrate the concepts and construction of these
loop patterns.
5.6.1 Counting and summing loops
For example, to count the number of items in a list, we would write the follo wing
forloop:
count =0
for itervar in[3,41,12,9,74,15]:
count =count +1
print( /quotesingle.ts1Count: /quotesingle.ts1 , count)
62 CHAPTER 5. ITERATION
We set the variable count to zero before the loop starts, then we write a forloop
to run through the list of numbers. Our iteration variable is named itervar and
while we do not use itervar in the loop, it does control the loop and cause the
loop body to be executed once for each of the values in the list.
In the body of the loop, we add 1 to the current value of count for each of the
values in the list. While the loop is executing, the value of count is the number
of values we have seen “so far”.
Once the loop completes, the value of count is the total number of items. The
total number “falls in our lap” at the end of the loop. We construct the loop so
that we have what we want when the loop ﬁnishes.
Another similar loop that computes the total of a set of numbers is as follow s:
total =0
for itervar in[3,41,12,9,74,15]:
total =total +itervar
print( /quotesingle.ts1Total: /quotesingle.ts1 , total)
In this loop we douse the iteration variable . Instead of simply adding one to the
count as in the previous loop, we add the actual number (3, 41, 12, etc.) to the
running total during each loop iteration. If you think about the variable total , it
contains the “running total of the values so far”. So before the loop starts total is
zero because we have not yet seen any values, during the loop total is the running
total, and at the end of the loop total is the overall total of all the values in the
list.
As the loop executes, total accumulates the sum of the elements; a variable used
this way is sometimes called an accumulator .
Neither the counting loop nor the summing loop are particularly useful in practice
because there are built-in functions len() andsum() that compute the number of
items in a list and the total of the items in the list respectively.
5.6.2 Maximum and minimum loops
To ﬁnd the largest value in a list or sequence, we construct the following loop:
largest =None
print( /quotesingle.ts1Before:/quotesingle.ts1 , largest)
for itervar in[3,41,12,9,74,15]:
iflargest isNone oritervar >largest :
largest =itervar
print( /quotesingle.ts1Loop:/quotesingle.ts1 , itervar, largest)
print( /quotesingle.ts1Largest:/quotesingle.ts1 , largest)
When the program executes, the output is as follows:
Before: None
Loop: 3 3
5.6. LOOP PATTERNS 63
Loop: 41 41
Loop: 12 41
Loop: 9 41
Loop: 74 74
Loop: 15 74
Largest: 74
The variable largest is best thought of as the “largest value we have seen so far”.
Before the loop, we set largest to the constant None.None is a special constant
value which we can store in a variable to mark the variable as “empty”.
Before the loop starts, the largest value we have seen so far is None since we have
not yet seen any values. While the loop is executing, if largest isNone then we
take the ﬁrst value we see as the largest so far. You can see in the ﬁrst itera tion
when the value of itervar is 3, since largest isNone, we immediately set largest
to be 3.
After the ﬁrst iteration, largest is no longer None, so the second part of the
compound logical expression that checks itervar > largest triggers only when
we see a value that is larger than the “largest so far”. When we see a new “even
larger” value we take that new value for largest . You can see in the program
output that largest progresses from 3 to 41 to 74.
At the end of the loop, we have scanned all of the values and the variable largest
now does contain the largest value in the list.
To compute the smallest number, the code is very similar with one small change:
smallest =None
print( /quotesingle.ts1Before:/quotesingle.ts1 , smallest)
for itervar in[3,41,12,9,74,15]:
ifsmallest isNone oritervar <smallest:
smallest =itervar
print( /quotesingle.ts1Loop:/quotesingle.ts1 , itervar, smallest)
print( /quotesingle.ts1Smallest:/quotesingle.ts1 , smallest)
Again, smallest is the “smallest so far” before, during, and after the loop executes.
When the loop has completed, smallest contains the minimum value in the list.
Again as in counting and summing, the built-in functions max() andmin() make
writing these exact loops unnecessary.
The following is a simple version of the Python built-in min() function:
def min(values):
smallest =None
forvalue invalues:
ifsmallest isNone orvalue <smallest:
smallest =value
return smallest
In the function version of the smallest code, we removed all of the print statements
so as to be equivalent to the minfunction which is already built in to Python.
64 CHAPTER 5. ITERATION
5.7 Debugging
As you start writing bigger programs, you might ﬁnd yourself spending more time
debugging. More code means more chances to make an error and more places for
bugs to hide.
One way to cut your debugging time is “debugging by bisection.” For example, if
there are 100 lines in your program and you check them one at a time, it would
take 100 steps.
Instead, try to break the problem in half. Look at the middle of the program,
or near it, for an intermediate value you can check. Add a print statement (or
something else that has a veriﬁable eﬀect) and run the program.
If the mid-point check is incorrect, the problem must be in the ﬁrst half of the
program. If it is correct, the problem is in the second half.
Every time you perform a check like this, you halve the number of lines you ha ve
to search. After six steps (which is much less than 100), you would be down t o
one or two lines of code, at least in theory.
In practice it is not always clear what the “middle of the program” is and not
always possible to check it. It doesn’t make sense to count lines and ﬁnd the exact
midpoint. Instead, think about places in the program where there might be errors
and places where it is easy to put a check. Then choose a spot where you think
the chances are about the same that the bug is before or after the check.
5.8 Glossary
accumulator A variable used in a loop to add up or accumulate a result.
counter A variable used in a loop to count the number of times something hap-
pened. We initialize a counter to zero and then increment the counter each
time we want to “count” something.
decrement An update that decreases the value of a variable.
initialize An assignment that gives an initial value to a variable that will be
updated.
increment An update that increases the value of a variable (often by one).
inﬁnite loop A loop in which the terminating condition is never satisﬁed or for
which there is no terminating condition.
iteration Repeated execution of a set of statements using either a function that
calls itself or a loop.
5.9 Exercises
Exercise 1: Write a program which repeatedly reads numbers unti l the
user enters “done” . Once “done” is entered, print out the total, co unt,
and average of the numbers. If the user enters anything other than a
number, detect their mistake using tryand except and print an error
message and skip to the next number.
5.9. EXERCISES 65
Enter a number: 4
Enter a number: 5
Enter a number: bad data
Invalid input
Enter a number: 7
Enter a number: done
16 3 5.333333333333333
Exercise 2: Write another program that prompts for a list of number s
as above and at the end prints out both the maximum and minimum of
the numbers instead of the average.
66 CHAPTER 5. ITERATION
Chapter 6
Strings
6.1 A string is a sequence
A string is a sequence of characters. You can access the characters one at a time
with the bracket operator:
>>> fruit =/quotesingle.ts1banana/quotesingle.ts1
>>> letter =fruit[ 1]
The second statement extracts the character at index position 1 from the fruit
variable and assigns it to the letter variable.
The expression in brackets is called an index . The index indicates which character
in the sequence you want (hence the name).
But you might not get what you expect:
>>> print(letter)
a
For most people, the ﬁrst letter of “banana” is “b”, not “a”. But in Python, the
index is an oﬀset from the beginning of the string, and the oﬀset of the ﬁrst letter
is zero.
>>> letter =fruit[ 0]
>>> print(letter)
b
So “b” is the 0th letter (“zero-th”) of “banana”, “a” is the 1th letter (“one-th”),
and “n” is the 2th (“two-th”) letter.
You can use any expression, including variables and operators, as an index, but
the value of the index has to be an integer. Otherwise you get:
>>> letter =fruit[ 1.5]
TypeError : string indices must be integers
67
68 CHAPTER 6. STRINGS
b
[0] a
[1] n
[2] a
[3] n
[4] a
[5] 
Figure 6.1: String Indexes
6.2 Getting the length of a string using len
lenis a built-in function that returns the number of characters in a string:
>>> fruit =/quotesingle.ts1banana/quotesingle.ts1
>>> len(fruit)
6
To get the last letter of a string, you might be tempted to try something lik e this:
>>> length =len(fruit)
>>> last =fruit[length]
IndexError : string index out of range
The reason for the IndexError is that there is no letter in “banana” with the index
6. Since we started counting at zero, the six letters are numbered 0 to 5. To get
the last character, you have to subtract 1 from length :
>>> last =fruit[length -1]
>>> print(last)
a
Alternatively, you can use negative indices, which count backward from the end of
the string. The expression fruit[-1] yields the last letter, fruit[-2] yields the
second to last, and so on.
6.3 Traversal through a string with a loop
A lot of computations involve processing a string one character at a time. Often
they start at the beginning, select each character in turn, do something to it, and
continue until the end. This pattern of processing is called a traversal . One way
to write a traversal is with a while loop:
index =0
while index <len(fruit):
letter =fruit[index]
print(letter)
index =index +1
6.4. STRING SLICES 69
This loop traverses the string and displays each letter on a line by itself. T he
loop condition is index < len(fruit) , so when index is equal to the length of
the string, the condition is false, and the body of the loop is not executed. The
last character accessed is the one with the index len(fruit)-1 , which is the last
character in the string.
Exercise 1: Write a while loop that starts at the last character in the
string and works its way backwards to the ﬁrst character in the string ,
printing each letter on a separate line, except backwards.
Another way to write a traversal is with a forloop:
for char infruit:
print(char)
Each time through the loop, the next character in the string is assigned to the
variable char. The loop continues until no characters are left.
6.4 String slices
A segment of a string is called a slice. Selecting a slice is similar to selecting a
character:
>>> s=/quotesingle.ts1Monty Python/quotesingle.ts1
>>> print(s[ 0:5])
Monty
>>> print(s[ 6:12])
Python
The operator returns the part of the string from the “n-th” character to the “m-th”
character, including the ﬁrst but excluding the last.
If you omit the ﬁrst index (before the colon), the slice starts at the beginning o f
the string. If you omit the second index, the slice goes to the end of the string:
>>> fruit =/quotesingle.ts1banana/quotesingle.ts1
>>> fruit[: 3]
/quotesingle.ts1ban/quotesingle.ts1
>>> fruit[ 3:]
/quotesingle.ts1ana/quotesingle.ts1
If the ﬁrst index is greater than or equal to the second the result is an empty string ,
represented by two quotation marks:
>>> fruit =/quotesingle.ts1banana/quotesingle.ts1
>>> fruit[ 3:3]
/quotesingle.ts1/quotesingle.ts1
An empty string contains no characters and has length 0, but other than that, it
is the same as any other string.
Exercise 2: Given that fruit is a string, what does fruit[:] mean?
70 CHAPTER 6. STRINGS
6.5 Strings are immutable
It is tempting to use the operator on the left side of an assignment, with the
intention of changing a character in a string. For example:
>>> greeting =/quotesingle.ts1Hello, world!/quotesingle.ts1
>>> greeting[ 0]=/quotesingle.ts1J/quotesingle.ts1
TypeError :/quotesingle.ts1str/quotesingle.ts1 object does not support item assignment
The “object” in this case is the string and the “item” is the character you tried
to assign. For now, an object is the same thing as a value, but we will reﬁne that
deﬁnition later. An item is one of the values in a sequence.
The reason for the error is that strings are immutable , which means you can’t
change an existing string. The best you can do is create a new string that is a
variation on the original:
>>> greeting =/quotesingle.ts1Hello, world!/quotesingle.ts1
>>> new_greeting =/quotesingle.ts1J/quotesingle.ts1 +greeting[ 1:]
>>> print(new_greeting)
Jello, world !
This example concatenates a new ﬁrst letter onto a slice of greeting . It has no
eﬀect on the original string.
6.6 Looping and counting
The following program counts the number of times the letter “a” appears in a
string:
word =/quotesingle.ts1banana/quotesingle.ts1
count =0
for letter inword:
ifletter ==/quotesingle.ts1a/quotesingle.ts1:
count =count +1
print(count)
This program demonstrates another pattern of computation called a counter . The
variable count is initialized to 0 and then incremented each time an “a” is found.
When the loop exits, count contains the result: the total number of a’s.
Exercise 3: Encapsulate this code in a function named count , and gen-
eralize it so that it accepts the string and the letter as arguments.
6.7. THE INOPERATOR 71
6.7 The inoperator
The word inis a boolean operator that takes two strings and returns True if the
ﬁrst appears as a substring in the second:
>>> /quotesingle.ts1a/quotesingle.ts1in/quotesingle.ts1banana/quotesingle.ts1
True
>>> /quotesingle.ts1seed/quotesingle.ts1 in/quotesingle.ts1banana/quotesingle.ts1
False
6.8 String comparison
The comparison operators work on strings. To see if two strings are equa l:
ifword ==/quotesingle.ts1banana/quotesingle.ts1 :
print( /quotesingle.ts1All right, bananas./quotesingle.ts1 )
Other comparison operations are useful for putting words in alphabetical order:
ifword </quotesingle.ts1banana/quotesingle.ts1 :
print( /quotesingle.ts1Your word,/quotesingle.ts1 +word +/quotesingle.ts1, comes before banana./quotesingle.ts1 )
elif word >/quotesingle.ts1banana/quotesingle.ts1 :
print( /quotesingle.ts1Your word,/quotesingle.ts1 +word +/quotesingle.ts1, comes after banana./quotesingle.ts1 )
else:
print( /quotesingle.ts1All right, bananas./quotesingle.ts1 )
Python does not handle uppercase and lowercase letters the same way that people
do. All the uppercase letters come before all the lowercase letters, so:
Your word, Pineapple, comes before banana.
A common way to address this problem is to convert strings to a standard forma t,
such as all lowercase, before performing the comparison. Keep that in mind in cas e
you have to defend yourself against a man armed with a Pineapple.
6.9 String methods
Strings are an example of Python objects . An object contains both data (the actual
string itself) and methods , which are eﬀectively functions that are built into the
object and are available to any instance of the object.
Python has a function called dirwhich lists the methods available for an object.
The type function shows the type of an object and the dirfunction shows the
available methods.
72 CHAPTER 6. STRINGS
>>> stuff =/quotesingle.ts1Hello world/quotesingle.ts1
>>> type(stuff)
<class /quotesingle.ts1str/quotesingle.ts1 >
>>> dir(stuff)
[/quotesingle.ts1capitalize/quotesingle.ts1 ,/quotesingle.ts1casefold/quotesingle.ts1 ,/quotesingle.ts1center/quotesingle.ts1 ,/quotesingle.ts1count/quotesingle.ts1 ,/quotesingle.ts1encode/quotesingle.ts1 ,
/quotesingle.ts1endswith/quotesingle.ts1 ,/quotesingle.ts1expandtabs/quotesingle.ts1 ,/quotesingle.ts1find/quotesingle.ts1 ,/quotesingle.ts1format/quotesingle.ts1 ,/quotesingle.ts1format_map/quotesingle.ts1 ,
/quotesingle.ts1index/quotesingle.ts1 ,/quotesingle.ts1isalnum/quotesingle.ts1 ,/quotesingle.ts1isalpha/quotesingle.ts1 ,/quotesingle.ts1isdecimal/quotesingle.ts1 ,/quotesingle.ts1isdigit/quotesingle.ts1 ,
/quotesingle.ts1isidentifier/quotesingle.ts1 ,/quotesingle.ts1islower/quotesingle.ts1 ,/quotesingle.ts1isnumeric/quotesingle.ts1 ,/quotesingle.ts1isprintable/quotesingle.ts1 ,
/quotesingle.ts1isspace/quotesingle.ts1 ,/quotesingle.ts1istitle/quotesingle.ts1 ,/quotesingle.ts1isupper/quotesingle.ts1 ,/quotesingle.ts1join/quotesingle.ts1 ,/quotesingle.ts1ljust/quotesingle.ts1 ,/quotesingle.ts1lower/quotesingle.ts1 ,
/quotesingle.ts1lstrip/quotesingle.ts1 ,/quotesingle.ts1maketrans/quotesingle.ts1 ,/quotesingle.ts1partition/quotesingle.ts1 ,/quotesingle.ts1replace/quotesingle.ts1 ,/quotesingle.ts1rfind/quotesingle.ts1 ,
/quotesingle.ts1rindex/quotesingle.ts1 ,/quotesingle.ts1rjust/quotesingle.ts1 ,/quotesingle.ts1rpartition/quotesingle.ts1 ,/quotesingle.ts1rsplit/quotesingle.ts1 ,/quotesingle.ts1rstrip/quotesingle.ts1 ,
/quotesingle.ts1split/quotesingle.ts1 ,/quotesingle.ts1splitlines/quotesingle.ts1 ,/quotesingle.ts1startswith/quotesingle.ts1 ,/quotesingle.ts1strip/quotesingle.ts1 ,/quotesingle.ts1swapcase/quotesingle.ts1 ,
/quotesingle.ts1title/quotesingle.ts1 ,/quotesingle.ts1translate/quotesingle.ts1 ,/quotesingle.ts1upper/quotesingle.ts1 ,/quotesingle.ts1zfill/quotesingle.ts1 ]
>>> help(str.capitalize)
Help on method_descriptor:
capitalize(...)
S.capitalize() ->str
Return a capitalized version of S, i.e. make the first charac ter
have upper case and the rest lower case.
>>>
While the dirfunction lists the methods, and you can use help to get some simple
documentation on a method, a better source of documentation for string methods
would be https://docs.python.org/library/stdtypes.html#string-methods .
Calling a method is similar to calling a function (it takes arguments and returns
a value) but the syntax is diﬀerent. We call a method by appending the method
name to the variable name using the period as a delimiter.
For example, the method upper takes a string and returns a new string with all
uppercase letters:
Instead of the function syntax upper(word) , it uses the method syntax
word.upper() .
>>> word =/quotesingle.ts1banana/quotesingle.ts1
>>> new_word =word.upper()
>>> print(new_word)
BANANA
This form of dot notation speciﬁes the name of the method, upper , and the name
of the string to apply the method to, word. The empty parentheses indicate that
this method takes no argument.
A method call is called an invocation ; in this case, we would say that we are
invoking upper on the word.
For example, there is a string method named find that searches for the position
of one string within another:
6.9. STRING METHODS 73
>>> word =/quotesingle.ts1banana/quotesingle.ts1
>>> index =word.find( /quotesingle.ts1a/quotesingle.ts1)
>>> print(index)
1
In this example, we invoke find onword and pass the letter we are looking for as
a parameter.
Thefind method can ﬁnd substrings as well as characters:
>>> word.find( /quotesingle.ts1na/quotesingle.ts1)
2
It can take as a second argument the index where it should start:
>>> word.find( /quotesingle.ts1na/quotesingle.ts1,3)
4
One common task is to remove white space (spaces, tabs, or newlines) from the
beginning and end of a string using the strip method:
>>> line =/quotesingle.ts1 Here we go /quotesingle.ts1
>>> line.strip()
/quotesingle.ts1Here we go/quotesingle.ts1
Some methods such as startswith return boolean values.
>>> line =/quotesingle.ts1Have a nice day/quotesingle.ts1
>>> line.startswith( /quotesingle.ts1Have/quotesingle.ts1 )
True
>>> line.startswith( /quotesingle.ts1h/quotesingle.ts1)
False
You will note that startswith requires case to match, so sometimes we take a line
and map it all to lowercase before we do any checking using the lower method.
>>> line =/quotesingle.ts1Have a nice day/quotesingle.ts1
>>> line.startswith( /quotesingle.ts1h/quotesingle.ts1)
False
>>> line.lower()
/quotesingle.ts1have a nice day/quotesingle.ts1
>>> line.lower().startswith( /quotesingle.ts1h/quotesingle.ts1)
True
In the last example, the method lower is called and then we use startswith to
see if the resulting lowercase string starts with the letter “h”. As long as w e are
careful with the order, we can make multiple method calls in a single expression.
**Exercise 4: There is a string method called count that is similar to the function
in the previous exercise. Read the documentation of this method at:
https://docs.python.org/library/stdtypes.html#string-methods
Write an invocation that counts the number of times the letter a occurs in “ba-
nana”.**
74 CHAPTER 6. STRINGS
6.10 Parsing strings
Often, we want to look into a string and ﬁnd a substring. For example if we were
presented a series of lines formatted as follows:
From stephen.marquard@ uct.ac.za Sat Jan 5 09:14:16 2008
and we wanted to pull out only the second half of the address (i.e., uct.ac.za )
from each line, we can do this by using the find method and string slicing.
First, we will ﬁnd the position of the at-sign in the string. Then we will ﬁnd the
position of the ﬁrst space after the at-sign. And then we will use string slicing to
extract the portion of the string which we are looking for.
>>> data =/quotesingle.ts1From stephen.marquard@uct.ac.za Sat Jan 5 09:14:16 2008/quotesingle.ts1
>>> atpos =data.find( /quotesingle.ts1@/quotesingle.ts1)
>>> print(atpos)
21
>>> sppos =data.find( /quotesingle.ts1 /quotesingle.ts1,atpos)
>>> print(sppos)
31
>>> host =data[atpos +1:sppos]
>>> print(host)
uct.ac.za
>>>
We use a version of the find method which allows us to specify a position in
the string where we want find to start looking. When we slice, we extract the
characters from “one beyond the at-sign through up to but not including the space
character”.
The documentation for the find method is available at
https://docs.python.org/library/stdtypes.html#string-methods .
6.11 Format operator
Theformat operator ,%allows us to construct strings, replacing parts of the strings
with the data stored in variables. When applied to integers, %is the modulus
operator. But when the ﬁrst operand is a string, %is the format operator.
The ﬁrst operand is the format string , which contains one or more format sequences
that specify how the second operand is formatted. The result is a string.
For example, the format sequence %dmeans that the second operand should be
formatted as an integer (“d” stands for “decimal”):
>>> camels =42
>>> /quotesingle.ts1%d/quotesingle.ts1 %camels
/quotesingle.ts142/quotesingle.ts1
6.12. DEBUGGING 75
The result is the string ‘42’, which is not to be confused with the integer value 42.
A format sequence can appear anywhere in the string, so you can embed a value
in a sentence:
>>> camels =42
>>> /quotesingle.ts1I have spotted %d camels./quotesingle.ts1 %camels
/quotesingle.ts1I have spotted 42 camels./quotesingle.ts1
If there is more than one format sequence in the string, the second argument has
to be a tuple1. Each format sequence is matched with an element of the tuple, in
order.
The following example uses %dto format an integer, %gto format a ﬂoating-point
number (don’t ask why), and %sto format a string:
>>> /quotesingle.ts1In %d years I have spotted %g %s./quotesingle.ts1 %(3,0.1,/quotesingle.ts1camels/quotesingle.ts1 )
/quotesingle.ts1In 3 years I have spotted 0.1 camels./quotesingle.ts1
The number of elements in the tuple must match the number of format sequences
in the string. The types of the elements also must match the format sequences:
>>> /quotesingle.ts1%d %d %d/quotesingle.ts1 %(1,2)
TypeError :notenough arguments forformat string
>>> /quotesingle.ts1%d/quotesingle.ts1 %/quotesingle.ts1dollars/quotesingle.ts1
TypeError :%d format: a number isrequired, notstr
In the ﬁrst example, there aren’t enough elements; in the second, the element is
the wrong type.
The format operator is powerful, but it can be diﬃcult to use. You can read more
about it at
https://docs.python.org/library/stdtypes.html#printf-style-st ring-formatting .
6.12 Debugging
A skill that you should cultivate as you program is always asking yours elf, “What
could go wrong here?” or alternatively, “What crazy thing might our user do to
crash our (seemingly) perfect program?”
For example, look at the program which we used to demonstrate the while loop
in the chapter on iteration:
while True:
line =input( /quotesingle.ts1> /quotesingle.ts1 )
ifline[ 0]==/quotesingle.ts1#/quotesingle.ts1:
1A tuple is a sequence of comma-separated values inside a pair of parenthesis. We will cover
tuples in Chapter 10
76 CHAPTER 6. STRINGS
continue
ifline ==/quotesingle.ts1done/quotesingle.ts1 :
break
print(line)
print( /quotesingle.ts1Done!/quotesingle.ts1 )
# Code: http://www.py4e.com/code3/copytildone2.py
Look what happens when the user enters an empty line of input:
>hello there
hello there
># don/quotesingle.ts1t print this
>print this !
print this !
>
Traceback (most recent call last):
File "copytildone.py" , line 3,in <module >
ifline[ 0]==/quotesingle.ts1#/quotesingle.ts1:
IndexError : string index out of range
The code works ﬁne until it is presented an empty line. Then there is no zero-th
character, so we get a traceback. There are two solutions to this to make line three
“safe” even if the line is empty.
One possibility is to simply use the startswith method which returns False if
the string is empty.
ifline.startswith( /quotesingle.ts1#/quotesingle.ts1):
Another way is to safely write the ifstatement using the guardian pattern and
make sure the second logical expression is evaluated only where there is at least
one character in the string.:
iflen(line) >0andline[ 0]==/quotesingle.ts1#/quotesingle.ts1:
6.13 Glossary
counter A variable used to count something, usually initialized to zero and then
incremented.
empty string A string with no characters and length 0, represented by two quo-
tation marks.
format operator An operator, %, that takes a format string and a tuple and gen-
erates a string that includes the elements of the tuple formatted as speciﬁed
by the format string.
format sequence A sequence of characters in a format string, like %d, that spec-
iﬁes how a value should be formatted.
6.14. EXERCISES 77
format string A string, used with the format operator, that contains format
sequences.
ﬂag A boolean variable used to indicate whether a condition is true or false.
invocation A statement that calls a method.
immutable The property of a sequence whose items cannot be assigned.
index An integer value used to select an item in a sequence, such as a character
in a string.
item One of the values in a sequence.
method A function that is associated with an object and called using dot notation.
object Something a variable can refer to. For now, you can use “object” and
“value” interchangeably.
search A pattern of traversal that stops when it ﬁnds what it is looking for.
sequence An ordered set; that is, a set of values where each value is identiﬁed by
an integer index.
slice A part of a string speciﬁed by a range of indices.
traverse To iterate through the items in a sequence, performing a similar opera-
tion on each.
6.14 Exercises
Exercise 5: Take the following Python code that stores a string:
str = /quotesingle.ts1X-DSPAM-Confidence: 0.8475 /quotesingle.ts1
Use find and string slicing to extract the portion of the string after the
colon character and then use the float function to convert the extracted
string into a ﬂoating point number.
Exercise 6: Read the documentation of the string methods at
https://docs.python.org/library/stdtypes.html#string-metho ds You
might want to experiment with some of them to make sure you
understand how they work. strip and replace are particularly useful.
The documentation uses a syntax that might be confusing. For examp le,
infind(sub[, start[, end]]) , the brackets indicate optional arguments.
Sosubis required, but start is optional, and if you include start , then
endis optional.
78 CHAPTER 6. STRINGS
Chapter 7
Files
7.1 Persistence
So far, we have learned how to write programs and communicate our intentions to
theCentral Processing Unit using conditional execution, functions, and iterations.
We have learned how to create and use data structures in the Main Memory . The
CPU and memory are where our software works and runs. It is where all of the
“thinking” happens.
But if you recall from our hardware architecture discussions, once the power is
turned oﬀ, anything stored in either the CPU or main memory is erased. So up to
now, our programs have just been transient fun exercises to learn Python.
Input and 
Output 
Devices Software 
Main 
Memory Central 
Processing 
Unit What 
Next? 
Network 
Secondary 
Memory 
Figure 7.1: Secondary Memory
In this chapter, we start to work with Secondary Memory (or ﬁles). Secondary
memory is not erased when the power is turned oﬀ. Or in the case of a USB ﬂash
drive, the data we write from our programs can be removed from the system and
transported to another system.
79
80 CHAPTER 7. FILES
We will primarily focus on reading and writing text ﬁles such as those we create in
a text editor. Later we will see how to work with database ﬁles which are binar y
ﬁles, speciﬁcally designed to be read and written through database software.
7.2 Opening ﬁles
When we want to read or write a ﬁle (say on your hard drive), we ﬁrst must
open the ﬁle. Opening the ﬁle communicates with your operating system, which
knows where the data for each ﬁle is stored. When you open a ﬁle, you are
asking the operating system to ﬁnd the ﬁle by name and make sure the ﬁle exists.
In this example, we open the ﬁle mbox.txt , which should be stored in the same
folder that you are in when you start Python. You can download this ﬁle from
www.py4e.com/code3/mbox.txt
>>> fhand =open( /quotesingle.ts1mbox.txt/quotesingle.ts1 )
>>> print(fhand)
<_io.TextIOWrapper name =/quotesingle.ts1mbox.txt/quotesingle.ts1 mode=/quotesingle.ts1r/quotesingle.ts1 encoding =/quotesingle.ts1cp1252/quotesingle.ts1 >
If the open is successful, the operating system returns us a ﬁle handle . The ﬁle
handle is not the actual data contained in the ﬁle, but instead it is a “handle” that
we can use to read the data. You are given a handle if the requested ﬁle exists and
you have the proper permissions to read the ﬁle.
From stephen.m.. 
Return-Path: <p.. 
Date: Sat, 5 Jan .. 
To: source@coll.. 
From: stephen... 
Subject: [sakai]... 
Details: http:/... 
… Your 
Program H
A
N
D
L
Eopen 
close 
read 
write 
Figure 7.2: A File Handle
If the ﬁle does not exist, open will fail with a traceback and you will not get a
handle to access the contents of the ﬁle:
>>> fhand =open( /quotesingle.ts1stuff.txt/quotesingle.ts1 )
Traceback (most recent call last):
File "<stdin>" , line 1,in <module >
FileNotFoundError : [Errno 2] No such file ordirectory: /quotesingle.ts1stuff.txt/quotesingle.ts1
Later we will use tryandexcept to deal more gracefully with the situation where
we attempt to open a ﬁle that does not exist.
7.3. TEXT FILES AND LINES 81
7.3 Text ﬁles and lines
A text ﬁle can be thought of as a sequence of lines, much like a Python string can
be thought of as a sequence of characters. For example, this is a sample of a text
ﬁle which records mail activity from various individuals in an open source pro ject
development team:
From stephen.marquard@uct.ac.za Sat Jan 5 09:14:16 2008
Return-Path: <postmaster@collab.sakaiproject.org>
Date: Sat, 5 Jan 2008 09:12:18 -0500
To: source@collab.sakaiproject.org
From: stephen.marquard@uct.ac.za
Subject: [sakai] svn commit: r39772 - content/branches/
Details: http://source.sakaiproject.org/viewsvn/?view=rev&rev=39772
...
The entire ﬁle of mail interactions is available from
www.py4e.com/code3/mbox.txt
and a shortened version of the ﬁle is available from
www.py4e.com/code3/mbox-short.txt
These ﬁles are in a standard format for a ﬁle containing multiple mail messag es.
The lines which start with “From” separate the messages and the lines which st art
with “From:” are part of the messages. For more information about the mbox
format, see https://en.wikipedia.org/wiki/Mbox .
To break the ﬁle into lines, there is a special character that represents the “end of
the line” called the newline character.
In Python, we represent the newline character as a backslash-n in string constants.
Even though this looks like two characters, it is actually a single charact er. When
we look at the variable by entering “stuﬀ” in the interpreter, it shows us the \n
in the string, but when we use print to show the string, we see the string broken
into two lines by the newline character.
>>> stuff =/quotesingle.ts1Hello\nWorld!/quotesingle.ts1
>>> stuff
/quotesingle.ts1Hello\nWorld!/quotesingle.ts1
>>> print(stuff)
Hello
World !
>>> stuff =/quotesingle.ts1X\nY/quotesingle.ts1
>>> print(stuff)
X
Y
>>> len(stuff)
3
You can also see that the length of the string X\nY isthree characters because the
newline character is a single character.
82 CHAPTER 7. FILES
So when we look at the lines in a ﬁle, we need to imagine that there is a special
invisible character called the newline at the end of each line that marks the end of
the line.
So the newline character separates the characters in the ﬁle into lines.
7.4 Reading ﬁles
While the ﬁle handle does not contain the data for the ﬁle, it is quite easy to
construct a forloop to read through and count each of the lines in a ﬁle:
fhand =open( /quotesingle.ts1mbox-short.txt/quotesingle.ts1 )
count =0
for line infhand:
count =count +1
print( /quotesingle.ts1Line Count:/quotesingle.ts1 , count)
# Code: http://www.py4e.com/code3/open.py
We can use the ﬁle handle as the sequence in our forloop. Our forloop simply
counts the number of lines in the ﬁle and prints them out. The rough translation
of the forloop into English is, “for each line in the ﬁle represented by the ﬁle
handle, add one to the count variable.”
The reason that the open function does not read the entire ﬁle is that the ﬁle might
be quite large with many gigabytes of data. The open statement takes the same
amount of time regardless of the size of the ﬁle. The forloop actually causes the
data to be read from the ﬁle.
When the ﬁle is read using a forloop in this manner, Python takes care of splitting
the data in the ﬁle into separate lines using the newline character. Python reads
each line through the newline and includes the newline as the last character in the
line variable for each iteration of the forloop.
Because the forloop reads the data one line at a time, it can eﬃciently read and
count the lines in very large ﬁles without running out of main memory to store
the data. The above program can count the lines in any size ﬁle using very little
memory since each line is read, counted, and then discarded.
If you know the ﬁle is relatively small compared to the size of your main memo ry,
you can read the whole ﬁle into one string using the read method on the ﬁle handle.
>>> fhand =open( /quotesingle.ts1mbox-short.txt/quotesingle.ts1 )
>>> inp=fhand.read()
>>> print(len(inp))
94626
>>> print(inp[: 20])
From stephen.marquar
In this example, the entire contents (all 94,626 characters) of the ﬁle mbox-short.txt
are read directly into the variable inp. We use string slicing to print out the ﬁrst
20 characters of the string data stored in inp.
7.5. SEARCHING THROUGH A FILE 83
When the ﬁle is read in this manner, all the characters including all of the lines
and newline characters are one big string in the variable inp. It is a good idea
to store the output of read as a variable because each call to read exhausts the
resource:
>>> fhand =open( /quotesingle.ts1mbox-short.txt/quotesingle.ts1 )
>>> print(len(fhand.read()))
94626
>>> print(len(fhand.read()))
0
Remember that this form of the open function should only be used if the ﬁle data
will ﬁt comfortably in the main memory of your computer. If the ﬁle is too lar ge
to ﬁt in main memory, you should write your program to read the ﬁle in chunks
using a fororwhile loop.
7.5 Searching through a ﬁle
When you are searching through data in a ﬁle, it is a very common pattern to read
through a ﬁle, ignoring most of the lines and only processing lines which meet a
particular condition. We can combine the pattern for reading a ﬁle with string
methods to build simple search mechanisms.
For example, if we wanted to read a ﬁle and only print out lines which started wi th
the preﬁx “From:”, we could use the string method startswith to select only those
lines with the desired preﬁx:
fhand =open( /quotesingle.ts1mbox-short.txt/quotesingle.ts1 )
count =0
for line infhand:
ifline.startswith( /quotesingle.ts1From:/quotesingle.ts1 ):
print(line)
# Code: http://www.py4e.com/code3/search1.py
When this program runs, we get the following output:
From: stephen.marquard@uct.ac.za
From: louis@media.berkeley.edu
From: zqian@umich.edu
From: rjlowe@iupui.edu
...
The output looks great since the only lines we are seeing are those which start wi th
“From:”, but why are we seeing the extra blank lines? This is due to that invisibl e
newline character. Each of the lines ends with a newline, so the print statement
84 CHAPTER 7. FILES
prints the string in the variable linewhich includes a newline and then print adds
another newline, resulting in the double spacing eﬀect we see.
We could use line slicing to print all but the last character, but a simpler approach
is to use the rstrip method which strips whitespace from the right side of a string
as follows:
fhand =open( /quotesingle.ts1mbox-short.txt/quotesingle.ts1 )
for line infhand:
line =line.rstrip()
ifline.startswith( /quotesingle.ts1From:/quotesingle.ts1 ):
print(line)
# Code: http://www.py4e.com/code3/search2.py
When this program runs, we get the following output:
From: stephen.marquard@uct.ac.za
From: louis@media.berkeley.edu
From: zqian@umich.edu
From: rjlowe@iupui.edu
From: zqian@umich.edu
From: rjlowe@iupui.edu
From: cwen@iupui.edu
...
As your ﬁle processing programs get more complicated, you may want to structure
your search loops using continue . The basic idea of the search loop is that you are
looking for “interesting” lines and eﬀectively skipping “uninteresting” lines. And
then when we ﬁnd an interesting line, we do something with that line.
We can structure the loop to follow the pattern of skipping uninteresting lines as
follows:
fhand =open( /quotesingle.ts1mbox-short.txt/quotesingle.ts1 )
for line infhand:
line =line.rstrip()
# Skip /quotesingle.ts1uninteresting lines/quotesingle.ts1
ifnot line.startswith( /quotesingle.ts1From:/quotesingle.ts1 ):
continue
# Process our /quotesingle.ts1interesting/quotesingle.ts1 line
print(line)
# Code: http://www.py4e.com/code3/search3.py
The output of the program is the same. In English, the uninteresting lines are
those which do not start with “From:”, which we skip using continue . For the
“interesting” lines (i.e., those that start with “From:”) we perform t he processing
on those lines.
We can use the find string method to simulate a text editor search that ﬁnds lines
where the search string is anywhere in the line. Since find looks for an occurrence
7.6. LETTING THE USER CHOOSE THE FILE NAME 85
of a string within another string and either returns the position of the string o r -1
if the string was not found, we can write the following loop to show lines whic h
contain the string “@uct.ac.za” (i.e., they come from the University of Cape T own
in South Africa):
fhand =open( /quotesingle.ts1mbox-short.txt/quotesingle.ts1 )
for line infhand:
line =line.rstrip()
ifline.find( /quotesingle.ts1@uct.ac.za/quotesingle.ts1 )== -1:continue
print(line)
# Code: http://www.py4e.com/code3/search4.py
Which produces the following output:
From stephen.marquard@uct.ac.za Sat Jan 5 09:14:16 2008
X-Authentication-Warning: set sender to stephen.marquard@uct.ac.za using -f
From: stephen.marquard@uct.ac.za
Author: stephen.marquard@uct.ac.za
From david.horwitz@uct.ac.za Fri Jan 4 07:02:32 2008
X-Authentication-Warning: set sender to david.horwitz@uct.ac.za using -f
From: david.horwitz@uct.ac.za
Author: david.horwitz@uct.ac.za
...
Here we also use the contracted form of the ifstatement where we put the
continue on the same line as the if. This contracted form of the iffunctions the
same as if the continue were on the next line and indented.
7.6 Letting the user choose the ﬁle name
We really do not want to have to edit our Python code every time we want to
process a diﬀerent ﬁle. It would be more usable to ask the user to enter the ﬁle
name string each time the program runs so they can use our program on diﬀerent
ﬁles without changing the Python code.
This is quite simple to do by reading the ﬁle name from the user using input as
follows:
fname =input( /quotesingle.ts1Enter the file name: /quotesingle.ts1 )
fhand =open(fname)
count =0
for line infhand:
ifline.startswith( /quotesingle.ts1Subject:/quotesingle.ts1 ):
count =count +1
print( /quotesingle.ts1There were/quotesingle.ts1 , count, /quotesingle.ts1subject lines in/quotesingle.ts1 , fname)
# Code: http://www.py4e.com/code3/search6.py
86 CHAPTER 7. FILES
We read the ﬁle name from the user and place it in a variable named fname and
open that ﬁle. Now we can run the program repeatedly on diﬀerent ﬁles.
python search6.py
Enter the file name: mbox.txt
There were 1797 subject lines in mbox.txt
python search6.py
Enter the file name: mbox-short.txt
There were 27 subject lines in mbox-short.txt
Before peeking at the next section, take a look at the above program and ask
yourself, “What could go possibly wrong here?” or “What might our friendly user
do that would cause our nice little program to ungracefully exit with a traceback,
making us look not-so-cool in the eyes of our users?”
7.7 Using try, except, and open
I told you not to peek. This is your last chance.
What if our user types something that is not a ﬁle name?
python search6.py
Enter the file name: missing.txt
Traceback (most recent call last):
File "search6.py", line 2, in <module>
fhand = open(fname)
FileNotFoundError: [Errno 2] No such file or directory: /quotesingle.ts1missing.txt/quotesingle.ts1
python search6.py
Enter the file name: na na boo boo
Traceback (most recent call last):
File "search6.py", line 2, in <module>
fhand = open(fname)
FileNotFoundError: [Errno 2] No such file or directory: /quotesingle.ts1na na boo boo/quotesingle.ts1
Do not laugh. Users will eventually do every possible thing they can do to break
your programs, either on purpose or with malicious intent. As a matter of f act,
an important part of any software development team is a person or group ca lled
Quality Assurance (or QA for short) whose very job it is to do the craziest things
possible in an attempt to break the software that the programmer has created.
The QA team is responsible for ﬁnding the ﬂaws in programs before we have
delivered the program to the end users who may be purchasing the software or
paying our salary to write the software. So the QA team is the programmer’s b est
friend.
So now that we see the ﬂaw in the program, we can elegantly ﬁx it using the
try/except structure. We need to assume that the open call might fail and add
recovery code when the open fails as follows:
7.8. WRITING FILES 87
fname =input( /quotesingle.ts1Enter the file name: /quotesingle.ts1 )
try:
fhand =open(fname)
except :
print( /quotesingle.ts1File cannot be opened:/quotesingle.ts1 , fname)
exit()
count =0
for line infhand:
ifline.startswith( /quotesingle.ts1Subject:/quotesingle.ts1 ):
count =count +1
print( /quotesingle.ts1There were/quotesingle.ts1 , count, /quotesingle.ts1subject lines in/quotesingle.ts1 , fname)
# Code: http://www.py4e.com/code3/search7.py
Theexit function terminates the program. It is a function that we call that never
returns. Now when our user (or QA team) types in silliness or bad ﬁle names, we
“catch” them and recover gracefully:
python search7.py
Enter the file name: mbox.txt
There were 1797 subject lines in mbox.txt
python search7.py
Enter the file name: na na boo boo
File cannot be opened: na na boo boo
Protecting the open call is a good example of the proper use of tryandexcept
in a Python program. We use the term “Pythonic” when we are doing something
the “Python way”. We might say that the above example is the Pythonic way to
open a ﬁle.
Once you become more skilled in Python, you can engage in repartee with other
Python programmers to decide which of two equivalent solutions to a problem
is “more Pythonic”. The goal to be “more Pythonic” captures the notion that
programming is part engineering and part art. We are not always interested in
just making something work, we also want our solution to be elegant and to be
appreciated as elegant by our peers.
7.8 Writing ﬁles
To write a ﬁle, you have to open it with mode “w” as a second parameter:
>>> fout =open( /quotesingle.ts1output.txt/quotesingle.ts1 ,/quotesingle.ts1w/quotesingle.ts1)
>>> print(fout)
<_io.TextIOWrapper name =/quotesingle.ts1output.txt/quotesingle.ts1 mode=/quotesingle.ts1w/quotesingle.ts1 encoding =/quotesingle.ts1cp1252/quotesingle.ts1 >
If the ﬁle already exists, opening it in write mode clears out the old data and st arts
fresh, so be careful! If the ﬁle doesn’t exist, a new one is created.
88 CHAPTER 7. FILES
Thewrite method of the ﬁle handle object puts data into the ﬁle, returning the
number of characters written. The default write mode is text for writing (and
reading) strings.
>>> line1 ="This here/quotesingle.ts1s the wattle,\n"
>>> fout.write(line1)
24
Again, the ﬁle object keeps track of where it is, so if you call write again, it adds
the new data to the end.
We must make sure to manage the ends of lines as we write to the ﬁle by explicitly
inserting the newline character when we want to end a line. The print statement
automatically appends a newline, but the write method does not add the newline
automatically.
>>> line2 =/quotesingle.ts1the emblem of our land.\n/quotesingle.ts1
>>> fout.write(line2)
24
When you are done writing, you have to close the ﬁle to make sure that the last
bit of data is physically written to the disk so it will not be lost if the p ower goes
oﬀ.
>>> fout.close()
We could close the ﬁles which we open for read as well, but we can be a little slo ppy
if we are only opening a few ﬁles since Python makes sure that all open ﬁles are
closed when the program ends. When we are writing ﬁles, we want to explicitly
close the ﬁles so as to leave nothing to chance.
7.9 Debugging
When you are reading and writing ﬁles, you might run into problems with whites-
pace. These errors can be hard to debug because spaces, tabs, and newlines are
normally invisible:
>>> s=/quotesingle.ts11 2\t 3\n 4/quotesingle.ts1
>>> print(s)
1 2 3
4
The built-in function repr can help. It takes any object as an argument and
returns a string representation of the object. For strings, it represents whites pace
characters with backslash sequences:
>>> print(repr(s))
/quotesingle.ts11 2\t 3\n 4/quotesingle.ts1
7.10. GLOSSARY 89
This can be helpful for debugging.
One other problem you might run into is that diﬀerent systems use diﬀerent char-
acters to indicate the end of a line. Some systems use a newline, represented \n.
Others use a return character, represented \r. Some use both. If you move ﬁles
between diﬀerent systems, these inconsistencies might cause problems.
For most systems, there are applications to convert from one format to ano ther.
You can ﬁnd them (and read more about this issue) at wikipedia.org/wiki/Newline .
Or, of course, you could write one yourself.
7.10 Glossary
catch To prevent an exception from terminating a program using the tryand
except statements.
newline A special character used in ﬁles and strings to indicate the end of a line.
Pythonic A technique that works elegantly in Python. “Using try and except is
thePythonic way to recover from missing ﬁles”.
Quality Assurance A person or team focused on insuring the overall quality of
a software product. QA is often involved in testing a product and identifying
problems before the product is released.
text ﬁle A sequence of characters stored in permanent storage like a hard drive.
7.11 Exercises
Exercise 1: Write a program to read through a ﬁle and print the conte nts
of the ﬁle (line by line) all in upper case. Executing the program w ill
look as follows:
python shout.py
Enter a file name: mbox-short.txt
FROM STEPHEN.MARQUARD@UCT.AC.ZA SAT JAN 5 09:14:16 2008
RETURN-PATH: <POSTMASTER@COLLAB.SAKAIPROJECT.ORG>
RECEIVED: FROM MURDER (MAIL.UMICH.EDU [141.211.14.90])
BY FRANKENSTEIN.MAIL.UMICH.EDU (CYRUS V2.3.8) WITH LMTPA;
SAT, 05 JAN 2008 09:14:16 -0500
You can download the ﬁle from www.py4e.com/code3/mbox-short.txt
Exercise 2: Write a program to prompt for a ﬁle name, and then read
through the ﬁle and look for lines of the form:
X-DSPAM-Confidence: 0.8475
When you encounter a line that starts with “X-DSPAM-Conﬁdence:”
pull apart the line to extract the ﬂoating-point number on the line.
Count these lines and then compute the total of the spam conﬁdence
values from these lines. When you reach the end of the ﬁle, print out
the average spam conﬁdence.
90 CHAPTER 7. FILES
Enter the file name: mbox.txt
Average spam confidence: 0.894128046745
Enter the file name: mbox-short.txt
Average spam confidence: 0.750718518519
Test your ﬁle on the mbox.txt and mbox-short.txt ﬁles.
Exercise 3: Sometimes when programmers get bored or want to hav e
a bit of fun, they add a harmless Easter Egg to their program Modify
the program that prompts the user for the ﬁle name so that it prints a
funny message when the user types in the exact ﬁle name “na na boo
boo” . The program should behave normally for all other ﬁles whi ch
exist and don’t exist. Here is a sample execution of the program:
python egg.py
Enter the file name: mbox.txt
There were 1797 subject lines in mbox.txt
python egg.py
Enter the file name: missing.tyxt
File cannot be opened: missing.tyxt
python egg.py
Enter the file name: na na boo boo
NA NA BOO BOO TO YOU - You have been punk/quotesingle.ts1d!
We are not encouraging you to put Easter Eggs in your programs; th is
is just an exercise.
Chapter 8
Lists
8.1 A list is a sequence
Like a string, a listis a sequence of values. In a string, the values are characters;
in a list, they can be any type. The values in list are called elements or sometimes
items .
There are several ways to create a new list; the simplest is to enclose the elements
in square brackets (“[" and “]”):
[10,20,30,40]
[/quotesingle.ts1crunchy frog/quotesingle.ts1 ,/quotesingle.ts1ram bladder/quotesingle.ts1 ,/quotesingle.ts1lark vomit/quotesingle.ts1 ]
The ﬁrst example is a list of four integers. The second is a list of three string s.
The elements of a list don’t have to be the same type. The following list cont ains
a string, a ﬂoat, an integer, and (lo!) another list:
[/quotesingle.ts1spam/quotesingle.ts1 ,2.0,5, [10,20]]
A list within another list is nested .
A list that contains no elements is called an empty list; you can create one with
empty brackets, [].
As you might expect, you can assign list values to variables:
>>> cheeses =[/quotesingle.ts1Cheddar/quotesingle.ts1 ,/quotesingle.ts1Edam/quotesingle.ts1 ,/quotesingle.ts1Gouda/quotesingle.ts1 ]
>>> numbers =[17,123]
>>> empty =[]
>>> print(cheeses, numbers, empty)
[/quotesingle.ts1Cheddar/quotesingle.ts1 ,/quotesingle.ts1Edam/quotesingle.ts1 ,/quotesingle.ts1Gouda/quotesingle.ts1 ] [17,123] []
91
92 CHAPTER 8. LISTS
8.2 Lists are mutable
The syntax for accessing the elements of a list is the same as for accessing the
characters of a string: the bracket operator. The expression inside the bracket s
speciﬁes the index. Remember that the indices start at 0:
>>> print(cheeses[ 0])
Cheddar
Unlike strings, lists are mutable because you can change the order of items in a
list or reassign an item in a list. When the bracket operator appears on the left
side of an assignment, it identiﬁes the element of the list that will be assig ned.
>>> numbers =[17,123]
>>> numbers[ 1]=5
>>> print(numbers)
[17,5]
The one-th element of numbers , which used to be 123, is now 5.
You can think of a list as a relationship between indices and elements. This rela-
tionship is called a mapping ; each index “maps to” one of the elements.
List indices work the same way as string indices:
• Any integer expression can be used as an index.
• If you try to read or write an element that does not exist, you get an
IndexError .
• If an index has a negative value, it counts backward from the end of the list.
Theinoperator also works on lists.
>>> cheeses =[/quotesingle.ts1Cheddar/quotesingle.ts1 ,/quotesingle.ts1Edam/quotesingle.ts1 ,/quotesingle.ts1Gouda/quotesingle.ts1 ]
>>> /quotesingle.ts1Edam/quotesingle.ts1 incheeses
True
>>> /quotesingle.ts1Brie/quotesingle.ts1 incheeses
False
8.3 Traversing a list
The most common way to traverse the elements of a list is with a forloop. The
syntax is the same as for strings:
for cheese incheeses:
print(cheese)
8.4. LIST OPERATIONS 93
This works well if you only need to read the elements of the list. But if you wan t
to write or update the elements, you need the indices. A common way to do that
is to combine the functions range andlen:
for iinrange(len(numbers)):
numbers[i] =numbers[i] *2
This loop traverses the list and updates each element. lenreturns the number of
elements in the list. range returns a list of indices from 0 to n−1, where nis
the length of the list. Each time through the loop, igets the index of the next
element. The assignment statement in the body uses ito read the old value of the
element and to assign the new value.
Aforloop over an empty list never executes the body:
for xinempty:
print( /quotesingle.ts1This never happens./quotesingle.ts1 )
Although a list can contain another list, the nested list still counts as a si ngle
element. The length of this list is four:
[/quotesingle.ts1spam/quotesingle.ts1 ,1, [/quotesingle.ts1Brie/quotesingle.ts1 ,/quotesingle.ts1Roquefort/quotesingle.ts1 ,/quotesingle.ts1Pol le Veq/quotesingle.ts1 ], [ 1,2,3]]
8.4 List operations
The+operator concatenates lists:
>>> a=[1,2,3]
>>> b=[4,5,6]
>>> c=a+b
>>> print(c)
[1,2,3,4,5,6]
Similarly, the *operator repeats a list a given number of times:
>>> [0]*4
[0,0,0,0]
>>> [1,2,3]*3
[1,2,3,1,2,3,1,2,3]
The ﬁrst example repeats four times. The second example repeats the list three
times.
94 CHAPTER 8. LISTS
8.5 List slices
The slice operator also works on lists:
>>> t=[/quotesingle.ts1a/quotesingle.ts1,/quotesingle.ts1b/quotesingle.ts1,/quotesingle.ts1c/quotesingle.ts1,/quotesingle.ts1d/quotesingle.ts1,/quotesingle.ts1e/quotesingle.ts1,/quotesingle.ts1f/quotesingle.ts1]
>>> t[1:3]
[/quotesingle.ts1b/quotesingle.ts1,/quotesingle.ts1c/quotesingle.ts1]
>>> t[:4]
[/quotesingle.ts1a/quotesingle.ts1,/quotesingle.ts1b/quotesingle.ts1,/quotesingle.ts1c/quotesingle.ts1,/quotesingle.ts1d/quotesingle.ts1]
>>> t[3:]
[/quotesingle.ts1d/quotesingle.ts1,/quotesingle.ts1e/quotesingle.ts1,/quotesingle.ts1f/quotesingle.ts1]
If you omit the ﬁrst index, the slice starts at the beginning. If you omit the s econd,
the slice goes to the end. So if you omit both, the slice is a copy of the whole lis t.
>>> t[:]
[/quotesingle.ts1a/quotesingle.ts1,/quotesingle.ts1b/quotesingle.ts1,/quotesingle.ts1c/quotesingle.ts1,/quotesingle.ts1d/quotesingle.ts1,/quotesingle.ts1e/quotesingle.ts1,/quotesingle.ts1f/quotesingle.ts1]
Since lists are mutable, it is often useful to make a copy before performing op era-
tions that fold, spindle, or mutilate lists.
A slice operator on the left side of an assignment can update multiple elements :
>>> t=[/quotesingle.ts1a/quotesingle.ts1,/quotesingle.ts1b/quotesingle.ts1,/quotesingle.ts1c/quotesingle.ts1,/quotesingle.ts1d/quotesingle.ts1,/quotesingle.ts1e/quotesingle.ts1,/quotesingle.ts1f/quotesingle.ts1]
>>> t[1:3]=[/quotesingle.ts1x/quotesingle.ts1,/quotesingle.ts1y/quotesingle.ts1]
>>> print(t)
[/quotesingle.ts1a/quotesingle.ts1,/quotesingle.ts1x/quotesingle.ts1,/quotesingle.ts1y/quotesingle.ts1,/quotesingle.ts1d/quotesingle.ts1,/quotesingle.ts1e/quotesingle.ts1,/quotesingle.ts1f/quotesingle.ts1]
8.6 List methods
Python provides methods that operate on lists. For example, append adds a new
element to the end of a list:
>>> t=[/quotesingle.ts1a/quotesingle.ts1,/quotesingle.ts1b/quotesingle.ts1,/quotesingle.ts1c/quotesingle.ts1]
>>> t.append( /quotesingle.ts1d/quotesingle.ts1)
>>> print(t)
[/quotesingle.ts1a/quotesingle.ts1,/quotesingle.ts1b/quotesingle.ts1,/quotesingle.ts1c/quotesingle.ts1,/quotesingle.ts1d/quotesingle.ts1]
extend takes a list as an argument and appends all of the elements:
>>> t1=[/quotesingle.ts1a/quotesingle.ts1,/quotesingle.ts1b/quotesingle.ts1,/quotesingle.ts1c/quotesingle.ts1]
>>> t2=[/quotesingle.ts1d/quotesingle.ts1,/quotesingle.ts1e/quotesingle.ts1]
>>> t1.extend(t2)
>>> print(t1)
[/quotesingle.ts1a/quotesingle.ts1,/quotesingle.ts1b/quotesingle.ts1,/quotesingle.ts1c/quotesingle.ts1,/quotesingle.ts1d/quotesingle.ts1,/quotesingle.ts1e/quotesingle.ts1]
This example leaves t2unmodiﬁed.
sort arranges the elements of the list from low to high:
8.7. DELETING ELEMENTS 95
>>> t=[/quotesingle.ts1d/quotesingle.ts1,/quotesingle.ts1c/quotesingle.ts1,/quotesingle.ts1e/quotesingle.ts1,/quotesingle.ts1b/quotesingle.ts1,/quotesingle.ts1a/quotesingle.ts1]
>>> t.sort()
>>> print(t)
[/quotesingle.ts1a/quotesingle.ts1,/quotesingle.ts1b/quotesingle.ts1,/quotesingle.ts1c/quotesingle.ts1,/quotesingle.ts1d/quotesingle.ts1,/quotesingle.ts1e/quotesingle.ts1]
Most list methods are void; they modify the list and return None. If you acciden-
tally write t = t.sort() , you will be disappointed with the result.
8.7 Deleting elements
There are several ways to delete elements from a list. If you know the index of the
element you want, you can use pop:
>>> t=[/quotesingle.ts1a/quotesingle.ts1,/quotesingle.ts1b/quotesingle.ts1,/quotesingle.ts1c/quotesingle.ts1]
>>> x=t.pop( 1)
>>> print(t)
[/quotesingle.ts1a/quotesingle.ts1,/quotesingle.ts1c/quotesingle.ts1]
>>> print(x)
b
popmodiﬁes the list and returns the element that was removed. If you don’t
provide an index, it deletes and returns the last element.
If you don’t need the removed value, you can use the deloperator:
>>> t=[/quotesingle.ts1a/quotesingle.ts1,/quotesingle.ts1b/quotesingle.ts1,/quotesingle.ts1c/quotesingle.ts1]
>>> delt[1]
>>> print(t)
[/quotesingle.ts1a/quotesingle.ts1,/quotesingle.ts1c/quotesingle.ts1]
If you know the element you want to remove (but not the index), you can use
remove :
>>> t=[/quotesingle.ts1a/quotesingle.ts1,/quotesingle.ts1b/quotesingle.ts1,/quotesingle.ts1c/quotesingle.ts1]
>>> t.remove( /quotesingle.ts1b/quotesingle.ts1)
>>> print(t)
[/quotesingle.ts1a/quotesingle.ts1,/quotesingle.ts1c/quotesingle.ts1]
The return value from remove isNone.
To remove more than one element, you can use delwith a slice index:
>>> t=[/quotesingle.ts1a/quotesingle.ts1,/quotesingle.ts1b/quotesingle.ts1,/quotesingle.ts1c/quotesingle.ts1,/quotesingle.ts1d/quotesingle.ts1,/quotesingle.ts1e/quotesingle.ts1,/quotesingle.ts1f/quotesingle.ts1]
>>> delt[1:5]
>>> print(t)
[/quotesingle.ts1a/quotesingle.ts1,/quotesingle.ts1f/quotesingle.ts1]
As usual, the slice selects all the elements up to, but not including, the second
index.
96 CHAPTER 8. LISTS
8.8 Lists and functions
There are a number of built-in functions that can be used on lists that allow you
to quickly look through a list without writing your own loops:
>>> nums =[3,41,12,9,74,15]
>>> print(len(nums))
6
>>> print(max(nums))
74
>>> print(min(nums))
3
>>> print(sum(nums))
154
>>> print(sum(nums) /len(nums))
25
The sum() function only works when the list elements are numbers. The other
functions ( max() ,len() , etc.) work with lists of strings and other types that can
be comparable.
We could rewrite an earlier program that computed the average of a list of numb ers
entered by the user using a list.
First, the program to compute an average without a list:
total =0
count =0
while (True):
inp=input( /quotesingle.ts1Enter a number: /quotesingle.ts1 )
ifinp ==/quotesingle.ts1done/quotesingle.ts1 :break
value =float(inp)
total =total +value
count =count +1
average =total /count
print( /quotesingle.ts1Average:/quotesingle.ts1 , average)
# Code: http://www.py4e.com/code3/avenum.py
In this program, we have count andtotal variables to keep the number and
running total of the user’s numbers as we repeatedly prompt the user for a number.
We could simply remember each number as the user entered it and use built-in
functions to compute the sum and count at the end.
numlist =list()
while (True):
inp=input( /quotesingle.ts1Enter a number: /quotesingle.ts1 )
ifinp ==/quotesingle.ts1done/quotesingle.ts1 :break
value =float(inp)
8.9. LISTS AND STRINGS 97
numlist.append(value)
average =sum(numlist) /len(numlist)
print( /quotesingle.ts1Average:/quotesingle.ts1 , average)
# Code: http://www.py4e.com/code3/avelist.py
We make an empty list before the loop starts, and then each time we have a n umber,
we append it to the list. At the end of the program, we simply compute the sum
of the numbers in the list and divide it by the count of the numbers in the list to
come up with the average.
8.9 Lists and strings
A string is a sequence of characters and a list is a sequence of values, but a list
of characters is not the same as a string. To convert from a string to a lis t of
characters, you can use list:
>>> s=/quotesingle.ts1spam/quotesingle.ts1
>>> t=list(s)
>>> print(t)
[/quotesingle.ts1s/quotesingle.ts1,/quotesingle.ts1p/quotesingle.ts1,/quotesingle.ts1a/quotesingle.ts1,/quotesingle.ts1m/quotesingle.ts1]
Because list is the name of a built-in function, you should avoid using it as
a variable name. I also avoid the letter “l” because it looks too much like the
number “1”. So that’s why I use “t”.
Thelist function breaks a string into individual letters. If you want to break a
string into words, you can use the split method:
>>> s=/quotesingle.ts1pining for the fjords/quotesingle.ts1
>>> t=s.split()
>>> print(t)
[/quotesingle.ts1pining/quotesingle.ts1 ,/quotesingle.ts1for/quotesingle.ts1 ,/quotesingle.ts1the/quotesingle.ts1 ,/quotesingle.ts1fjords/quotesingle.ts1 ]
>>> print(t[ 2])
the
Once you have used split to break the string into a list of words, you can use the
index operator (square bracket) to look at a particular word in the list.
You can call split with an optional argument called a delimiter that speciﬁes
which characters to use as word boundaries. The following example uses a hyphen
as a delimiter:
>>> s=/quotesingle.ts1spam-spam-spam/quotesingle.ts1
>>> delimiter =/quotesingle.ts1-/quotesingle.ts1
>>> s.split(delimiter)
[/quotesingle.ts1spam/quotesingle.ts1 ,/quotesingle.ts1spam/quotesingle.ts1 ,/quotesingle.ts1spam/quotesingle.ts1 ]
98 CHAPTER 8. LISTS
join is the inverse of split . It takes a list of strings and concatenates the elements.
join is a string method, so you have to invoke it on the delimiter and pass the list
as a parameter:
>>> t=[/quotesingle.ts1pining/quotesingle.ts1 ,/quotesingle.ts1for/quotesingle.ts1 ,/quotesingle.ts1the/quotesingle.ts1 ,/quotesingle.ts1fjords/quotesingle.ts1 ]
>>> delimiter =/quotesingle.ts1 /quotesingle.ts1
>>> delimiter.join(t)
/quotesingle.ts1pining for the fjords/quotesingle.ts1
In this case the delimiter is a space character, so join puts a space between words.
To concatenate strings without spaces, you can use the empty string, “”, as a
delimiter.
8.10 Parsing lines
Usually when we are reading a ﬁle we want to do something to the lines other than
just printing the whole line. Often we want to ﬁnd the “interesting lines” and then
parse the line to ﬁnd some interesting partof the line. What if we wanted to print
out the day of the week from those lines that start with “From”?
From stephen.marquard@uct.ac.za Sat Jan 5 09:14:16 2008
Thesplit method is very eﬀective when faced with this kind of problem. We can
write a small program that looks for lines where the line starts with “F rom”, split
those lines, and then print out the third word in the line:
fhand =open( /quotesingle.ts1mbox-short.txt/quotesingle.ts1 )
for line infhand:
line =line.rstrip()
ifnot line.startswith( /quotesingle.ts1From /quotesingle.ts1 ):continue
words =line.split()
print(words[ 2])
# Code: http://www.py4e.com/code3/search5.py
The program produces the following output:
Sat
Fri
Fri
Fri
...
Later, we will learn increasingly sophisticated techniques for picking the lines t o
work on and how we pull those lines apart to ﬁnd the exact bit of information we
are looking for.
8.11. OBJECTS AND VALUES 99
8.11 Objects and values
If we execute these assignment statements:
a=/quotesingle.ts1banana/quotesingle.ts1
b=/quotesingle.ts1banana/quotesingle.ts1
we know that aandbboth refer to a string, but we don’t know whether they refer
to the same string. There are two possible states:
a
b‘banana’ 
‘banana’ a
b‘banana’ 
Figure 8.1: Variables and Objects
In one case, aandbrefer to two diﬀerent objects that have the same value. In the
second case, they refer to the same object.
To check whether two variables refer to the same object, you can use the isoper-
ator.
>>> a=/quotesingle.ts1banana/quotesingle.ts1
>>> b=/quotesingle.ts1banana/quotesingle.ts1
>>> aisb
True
In this example, Python only created one string object, and both aandbrefer to
it.
But when you create two lists, you get two objects:
>>> a=[1,2,3]
>>> b=[1,2,3]
>>> aisb
False
In this case we would say that the two lists are equivalent , because they have the
same elements, but not identical , because they are not the same object. If two
objects are identical, they are also equivalent, but if they are equivalent, they a re
not necessarily identical.
Until now, we have been using “object” and “value” interchangeably, but it is more
precise to say that an object has a value. If you execute a = [1,2,3] ,arefers to
a list object whose value is a particular sequence of elements. If another list has
the same elements, we would say it has the same value.
100 CHAPTER 8. LISTS
8.12 Aliasing
Ifarefers to an object and you assign b = a , then both variables refer to the same
object:
>>> a=[1,2,3]
>>> b=a
>>> bisa
True
The association of a variable with an object is called a reference . In this example,
there are two references to the same object.
An object with more than one reference has more than one name, so we say that
the object is aliased .
If the aliased object is mutable, changes made with one alias aﬀect the other:
>>> b[0]=17
>>> print(a)
[17,2,3]
Although this behavior can be useful, it is error-prone. In general, it is safer to
avoid aliasing when you are working with mutable objects.
For immutable objects like strings, aliasing is not as much of a problem. I n this
example:
a=/quotesingle.ts1banana/quotesingle.ts1
b=/quotesingle.ts1banana/quotesingle.ts1
it almost never makes a diﬀerence whether aandbrefer to the same string or not.
8.13 List arguments
When you pass a list to a function, the function gets a reference to the list. If
the function modiﬁes a list parameter, the caller sees the change. For example,
delete_head removes the ﬁrst element from a list:
def delete_head(t):
delt[0]
Here’s how it is used:
>>> letters =[/quotesingle.ts1a/quotesingle.ts1,/quotesingle.ts1b/quotesingle.ts1,/quotesingle.ts1c/quotesingle.ts1]
>>> delete_head(letters)
>>> print(letters)
[/quotesingle.ts1b/quotesingle.ts1,/quotesingle.ts1c/quotesingle.ts1]
8.13. LIST ARGUMENTS 101
The parameter tand the variable letters are aliases for the same object.
It is important to distinguish between operations that modify lists and o perations
that create new lists. For example, the append method modiﬁes a list, but the +
operator creates a new list:
>>> t1=[1,2]
>>> t2=t1.append( 3)
>>> print(t1)
[1,2,3]
>>> print(t2)
None
>>> t3=t1+[3]
>>> print(t3)
[1,2,3]
>>> t2ist3
False
This diﬀerence is important when you write functions that are supposed to modify
lists. For example, this function does not delete the head of a list:
def bad_delete_head(t):
t=t[1:] # WRONG!
The slice operator creates a new list and the assignment makes trefer to it, but
none of that has any eﬀect on the list that was passed as an argument.
An alternative is to write a function that creates and returns a new list. For
example, tail returns all but the ﬁrst element of a list:
def tail(t):
return t[1:]
This function leaves the original list unmodiﬁed. Here’s how it is used:
>>> letters =[/quotesingle.ts1a/quotesingle.ts1,/quotesingle.ts1b/quotesingle.ts1,/quotesingle.ts1c/quotesingle.ts1]
>>> rest =tail(letters)
>>> print(rest)
[/quotesingle.ts1b/quotesingle.ts1,/quotesingle.ts1c/quotesingle.ts1]
Exercise 1: Write a function called chop that takes a list and modiﬁes
it, removing the ﬁrst and last elements, and returns None. Then write
a function called middle that takes a list and returns a new list that
contains all but the ﬁrst and last elements.
102 CHAPTER 8. LISTS
8.14 Debugging
Careless use of lists (and other mutable objects) can lead to long hours of debugging .
Here are some common pitfalls and ways to avoid them:
1. Don’t forget that most list methods modify the argument and return None.
This is the opposite of the string methods, which return a new string and
leave the original alone.
If you are used to writing string code like this:
word =word.strip()
It is tempting to write list code like this:
t=t.sort() # WRONG!
Because sort returns None, the next operation you perform with tis likely
to fail.
Before using list methods and operators, you should read the documentation
carefully and then test them in interactive mode. The methods and operators
that lists share with other sequences (like strings) are documented at:
docs.python.org/library/stdtypes.html#common-sequence-operations
The methods and operators that only apply to mutable sequences are docu-
mented at:
docs.python.org/library/stdtypes.html#mutable-sequence-types
2. Pick an idiom and stick with it.
Part of the problem with lists is that there are too many ways to do things.
For example, to remove an element from a list, you can use pop,remove ,del,
or even a slice assignment.
To add an element, you can use the append method or the +operator. But
don’t forget that these are right:
t.append(x)
t=t+[x]
And these are wrong:
t.append([x]) # WRONG!
t=t.append(x) # WRONG!
t+[x] # WRONG!
t=t+x # WRONG!
Try out each of these examples in interactive mode to make sure you under-
stand what they do. Notice that only the last one causes a runtime error;
the other three are legal, but they do the wrong thing.
3. Make copies to avoid aliasing.
If you want to use a method like sort that modiﬁes the argument, but you
need to keep the original list as well, you can make a copy.
8.14. DEBUGGING 103
orig =t[:]
t.sort()
In this example you could also use the built-in function sorted , which returns
a new, sorted list and leaves the original alone. But in that case you should
avoid using sorted as a variable name!
4. Lists, split , and ﬁles
When we read and parse ﬁles, there are many opportunities to encounter
input that can crash our program so it is a good idea to revisit the guardian
pattern when it comes writing programs that read through a ﬁle and look
for a “needle in the haystack”.
Let’s revisit our program that is looking for the day of the week on the from
lines of our ﬁle:
From stephen.marquard@uct.ac.za Sat Jan 5 09:14:16 2008
Since we are breaking this line into words, we could dispense with the use
ofstartswith and simply look at the ﬁrst word of the line to determine if
we are interested in the line at all. We can use continue to skip lines that
don’t have “From” as the ﬁrst word as follows:
fhand =open( /quotesingle.ts1mbox-short.txt/quotesingle.ts1 )
for line infhand:
words =line.split()
ifwords[ 0]!=/quotesingle.ts1From/quotesingle.ts1 :continue
print(words[ 2])
This looks much simpler and we don’t even need to do the rstrip to remove
the newline at the end of the ﬁle. But is it better?
python search8.py
Sat
Traceback (most recent call last):
File "search8.py", line 5, in <module>
if words[0] != /quotesingle.ts1From/quotesingle.ts1 : continue
IndexError: list index out of range
It kind of works and we see the day from the ﬁrst line (Sat), but then the
program fails with a traceback error. What went wrong? What messed-up
data caused our elegant, clever, and very Pythonic program to fail?
You could stare at it for a long time and puzzle through it or ask someone
for help, but the quicker and smarter approach is to add a print statement.
The best place to add the print statement is right before the line where the
program failed and print out the data that seems to be causing the failure.
Now this approach may generate a lot of lines of output, but at least you will
immediately have some clue as to the problem at hand. So we add a print of
the variable words right before line ﬁve. We even add a preﬁx “Debug:” to
the line so we can keep our regular output separate from our debug output.
104 CHAPTER 8. LISTS
for line infhand:
words =line.split()
print( /quotesingle.ts1Debug:/quotesingle.ts1 , words)
ifwords[ 0]!=/quotesingle.ts1From/quotesingle.ts1 :continue
print(words[ 2])
When we run the program, a lot of output scrolls oﬀ the screen but at the
end, we see our debug output and the traceback so we know what happened
just before the traceback.
Debug: [/quotesingle.ts1X-DSPAM-Confidence:/quotesingle.ts1, /quotesingle.ts10.8475/quotesingle.ts1]
Debug: [/quotesingle.ts1X-DSPAM-Probability:/quotesingle.ts1, /quotesingle.ts10.0000/quotesingle.ts1]
Debug: []
Traceback (most recent call last):
File "search9.py", line 6, in <module>
if words[0] != /quotesingle.ts1From/quotesingle.ts1 : continue
IndexError: list index out of range
Each debug line is printing the list of words which we get when we split
the line into words. When the program fails, the list of words is empty [].
If we open the ﬁle in a text editor and look at the ﬁle, at that point it looks
as follows:
X-DSPAM-Result: Innocent
X-DSPAM-Processed: Sat Jan 5 09:14:16 2008
X-DSPAM-Confidence: 0.8475
X-DSPAM-Probability: 0.0000
Details: http://source.sakaiproject.org/viewsvn/?view=rev&rev=39772
The error occurs when our program encounters a blank line! Of course there
are “zero words” on a blank line. Why didn’t we think of that when we were
writing the code? When the code looks for the ﬁrst word ( word[0] ) to check
to see if it matches “From”, we get an “index out of range” error.
This of course is the perfect place to add some guardian code to avoid check-
ing the ﬁrst word if the ﬁrst word is not there. There are many ways to
protect this code; we will choose to check the number of words we have
before we look at the ﬁrst word:
fhand =open( /quotesingle.ts1mbox-short.txt/quotesingle.ts1 )
count =0
for line infhand:
words =line.split()
# print /quotesingle.ts1Debug:/quotesingle.ts1, words
iflen(words) ==0:continue
ifwords[ 0]!=/quotesingle.ts1From/quotesingle.ts1 :continue
print(words[ 2])
First we commented out the debug print statement instead of removing it,
in case our modiﬁcation fails and we need to debug again. Then we added
a guardian statement that checks to see if we have zero words, and if so, we
usecontinue to skip to the next line in the ﬁle.
8.15. GLOSSARY 105
We can think of the two continue statements as helping us reﬁne the set of
lines which are “interesting” to us and which we want to process some more.
A line which has no words is “uninteresting” to us so we skip to the next line.
A line which does not have “From” as its ﬁrst word is uninteresting to us so
we skip it.
The program as modiﬁed runs successfully, so perhaps it is correct. Our
guardian statement does make sure that the words[0] will never fail, but
perhaps it is not enough. When we are programming, we must always be
thinking, “What might go wrong?”
Exercise 2: Figure out which line of the above program is still no t
properly guarded. See if you can construct a text ﬁle which caus es the
program to fail and then modify the program so that the line is properl y
guarded and test it to make sure it handles your new text ﬁle.
Exercise 3: Rewrite the guardian code in the above example withou t
two ifstatements. Instead, use a compound logical expression using
theandlogical operator with a single ifstatement.
8.15 Glossary
aliasing A circumstance where two or more variables refer to the same object.
delimiter A character or string used to indicate where a string should be split.
element One of the values in a list (or other sequence); also called items.
equivalent Having the same value.
index An integer value that indicates an element in a list.
identical Being the same object (which implies equivalence).
listA sequence of values.
list traversal The sequential accessing of each element in a list.
nested list A list that is an element of another list.
object Something a variable can refer to. An object has a type and a value.
reference The association between a variable and its value.
8.16 Exercises
Exercise 4: Download a copy of the ﬁle www.py4e.com/code3/romeo.txt .
Write a program to open the ﬁle romeo.txt and read it line by line. For
each line, split the line into a list of words using the split function.
For each word, check to see if the word is already in a list. If the wo rd
is not in the list, add it to the list. When the program completes, sort
and print the resulting words in alphabetical order.
Enter file: romeo.txt
[/quotesingle.ts1Arise/quotesingle.ts1, /quotesingle.ts1But/quotesingle.ts1, /quotesingle.ts1It/quotesingle.ts1, /quotesingle.ts1Juliet/quotesingle.ts1, /quotesingle.ts1Who/quotesingle.ts1, /quotesingle.ts1already/quotesingle.ts1,
/quotesingle.ts1and/quotesingle.ts1, /quotesingle.ts1breaks/quotesingle.ts1, /quotesingle.ts1east/quotesingle.ts1, /quotesingle.ts1envious/quotesingle.ts1, /quotesingle.ts1fair/quotesingle.ts1, /quotesingle.ts1grief/quotesingle.ts1,
/quotesingle.ts1is/quotesingle.ts1, /quotesingle.ts1kill/quotesingle.ts1, /quotesingle.ts1light/quotesingle.ts1, /quotesingle.ts1moon/quotesingle.ts1, /quotesingle.ts1pale/quotesingle.ts1, /quotesingle.ts1sick/quotesingle.ts1, /quotesingle.ts1soft/quotesingle.ts1,
/quotesingle.ts1sun/quotesingle.ts1, /quotesingle.ts1the/quotesingle.ts1, /quotesingle.ts1through/quotesingle.ts1, /quotesingle.ts1what/quotesingle.ts1, /quotesingle.ts1window/quotesingle.ts1,
/quotesingle.ts1with/quotesingle.ts1, /quotesingle.ts1yonder/quotesingle.ts1]
106 CHAPTER 8. LISTS
Exercise 5: Write a program to read through the mail box data and
when you ﬁnd line that starts with “From”, you will split the line in to
words using the split function. We are interested in who sent the
message, which is the second word on the From line.
From stephen.marquard@uct.ac.za Sat Jan 5 09:14:16 2008
You will parse the From line and print out the second word for each
From line, then you will also count the number of From (not From:)
lines and print out a count at the end. This is a good sample outpu t
with a few lines removed:
python fromcount.py
Enter a file name: mbox-short.txt
stephen.marquard@uct.ac.za
louis@media.berkeley.edu
zqian@umich.edu
[...some output removed...]
ray@media.berkeley.edu
cwen@iupui.edu
cwen@iupui.edu
cwen@iupui.edu
There were 27 lines in the file with From as the first word
Exercise 6: Rewrite the program that prompts the user for a list of
numbers and prints out the maximum and minimum of the numbers at
the end when the user enters “done” . Write the program to store the
numbers the user enters in a list and use the max() and min() functions to
compute the maximum and minimum numbers after the loop completes.
Enter a number: 6
Enter a number: 2
Enter a number: 9
Enter a number: 3
Enter a number: 5
Enter a number: done
Maximum: 9.0
Minimum: 2.0
Chapter 9
Dictionaries
Adictionary is like a list, but more general. In a list, the index positions have to
be integers; in a dictionary, the indices can be (almost) any type.
You can think of a dictionary as a mapping between a set of indices (which are
called keys) and a set of values. Each key maps to a value. The association of a
key and a value is called a key-value pair or sometimes an item.
As an example, we’ll build a dictionary that maps from English to Spanish words,
so the keys and the values are all strings.
The function dict creates a new dictionary with no items. Because dict is the
name of a built-in function, you should avoid using it as a variable name.
>>> eng2sp =dict()
>>> print(eng2sp)
{}
The curly brackets, {}, represent an empty dictionary. To add items to the dictio-
nary, you can use square brackets:
>>> eng2sp[ /quotesingle.ts1one/quotesingle.ts1 ]=/quotesingle.ts1uno/quotesingle.ts1
This line creates an item that maps from the key /quotesingle.ts1one/quotesingle.ts1 to the value “uno”. If we
print the dictionary again, we see a key-value pair with a colon between the key
and value:
>>> print(eng2sp)
{/quotesingle.ts1one/quotesingle.ts1 :/quotesingle.ts1uno/quotesingle.ts1 }
This output format is also an input format. For example, you can create a new
dictionary with three items. But if you print eng2sp , you might be surprised:
>>> eng2sp ={/quotesingle.ts1one/quotesingle.ts1 :/quotesingle.ts1uno/quotesingle.ts1 ,/quotesingle.ts1two/quotesingle.ts1 :/quotesingle.ts1dos/quotesingle.ts1 ,/quotesingle.ts1three/quotesingle.ts1 :/quotesingle.ts1tres/quotesingle.ts1 }
>>> print(eng2sp)
{/quotesingle.ts1one/quotesingle.ts1 :/quotesingle.ts1uno/quotesingle.ts1 ,/quotesingle.ts1three/quotesingle.ts1 :/quotesingle.ts1tres/quotesingle.ts1 ,/quotesingle.ts1two/quotesingle.ts1 :/quotesingle.ts1dos/quotesingle.ts1 }
107
108 CHAPTER 9. DICTIONARIES
The order of the key-value pairs is not the same. In fact, if you type the same
example on your computer, you might get a diﬀerent result. In general, the order
of items in a dictionary is unpredictable.
But that’s not a problem because the elements of a dictionary are never indexed
with integer indices. Instead, you use the keys to look up the corresponding values:
>>> print(eng2sp[ /quotesingle.ts1two/quotesingle.ts1 ])
/quotesingle.ts1dos/quotesingle.ts1
The key /quotesingle.ts1two/quotesingle.ts1 always maps to the value “dos” so the order of the items doesn’t
matter.
If the key isn’t in the dictionary, you get an exception:
>>> print(eng2sp[ /quotesingle.ts1four/quotesingle.ts1 ])
KeyError :/quotesingle.ts1four/quotesingle.ts1
Thelenfunction works on dictionaries; it returns the number of key-value pairs:
>>> len(eng2sp)
3
Theinoperator works on dictionaries; it tells you whether something appears as
akeyin the dictionary (appearing as a value is not good enough).
>>> /quotesingle.ts1one/quotesingle.ts1 ineng2sp
True
>>> /quotesingle.ts1uno/quotesingle.ts1 ineng2sp
False
To see whether something appears as a value in a dictionary, you can use the
method values , which returns the values as a list, and then use the inoperator:
>>> vals =list(eng2sp.values())
>>> /quotesingle.ts1uno/quotesingle.ts1 invals
True
The inoperator uses diﬀerent algorithms for lists and dictionaries. For lists, it
uses a linear search algorithm. As the list gets longer, the search time gets longer
in direct proportion to the length of the list. For dictionaries, Python uses a n
algorithm called a hash table that has a remarkable property: the inoperator
takes about the same amount of time no matter how many items there are in a
dictionary. I won’t explain why hash functions are so magical, but you can read
more about it at wikipedia.org/wiki/Hash_table .
Exercise 1: Download a copy of the ﬁle www.py4e.com/code3/words.txt
Write a program that reads the words in words.txt and stores them as
keys in a dictionary. It doesn’t matter what the values are. Then y ou
can use the inoperator as a fast way to check whether a string is in the
dictionary.
9.1. DICTIONARY AS A SET OF COUNTERS 109
9.1 Dictionary as a set of counters
Suppose you are given a string and you want to count how many times each letter
appears. There are several ways you could do it:
1. You could create 26 variables, one for each letter of the alphabet. Then you
could traverse the string and, for each character, increment the corresponding
counter, probably using a chained conditional.
2. You could create a list with 26 elements. Then you could convert each
character to a number (using the built-in function ord), use the number as
an index into the list, and increment the appropriate counter.
3. You could create a dictionary with characters as keys and counters as the
corresponding values. The ﬁrst time you see a character, you would add
an item to the dictionary. After that you would increment the value of an
existing item.
Each of these options performs the same computation, but each of them implements
that computation in a diﬀerent way.
Animplementation is a way of performing a computation; some implementations
are better than others. For example, an advantage of the dictionary implementa -
tion is that we don’t have to know ahead of time which letters appear in the str ing
and we only have to make room for the letters that do appear.
Here is what the code might look like:
word =/quotesingle.ts1brontosaurus/quotesingle.ts1
d=dict()
for cinword:
ifcnot in d:
d[c] =1
else:
d[c] =d[c] +1
print(d)
We are eﬀectively computing a histogram , which is a statistical term for a set of
counters (or frequencies).
Theforloop traverses the string. Each time through the loop, if the character c
is not in the dictionary, we create a new item with key cand the initial value 1
(since we have seen this letter once). If cis already in the dictionary we increment
d[c].
Here’s the output of the program:
{/quotesingle.ts1a/quotesingle.ts1: 1, /quotesingle.ts1b/quotesingle.ts1: 1, /quotesingle.ts1o/quotesingle.ts1: 2, /quotesingle.ts1n/quotesingle.ts1: 1, /quotesingle.ts1s/quotesingle.ts1: 2, /quotesingle.ts1r/quotesingle.ts1: 2, /quotesingle.ts1u/quotesingle.ts1: 2, /quotesingle.ts1t/quotesingle.ts1: 1}
The histogram indicates that the letters “a” and “b” appear once; “o” appears
twice, and so on.
Dictionaries have a method called getthat takes a key and a default value. If the
key appears in the dictionary, getreturns the corresponding value; otherwise it
returns the default value. For example:
110 CHAPTER 9. DICTIONARIES
>>> counts ={/quotesingle.ts1chuck/quotesingle.ts1 :1,/quotesingle.ts1annie/quotesingle.ts1 :42,/quotesingle.ts1jan/quotesingle.ts1 :100}
>>> print(counts.get( /quotesingle.ts1jan/quotesingle.ts1 ,0))
100
>>> print(counts.get( /quotesingle.ts1tim/quotesingle.ts1 ,0))
0
We can use getto write our histogram loop more concisely. Because the get
method automatically handles the case where a key is not in a dictionary, we can
reduce four lines down to one and eliminate the ifstatement.
word =/quotesingle.ts1brontosaurus/quotesingle.ts1
d=dict()
for cinword:
d[c] =d.get(c, 0)+1
print(d)
The use of the getmethod to simplify this counting loop ends up being a very
commonly used “idiom” in Python and we will use it many times in the rest of t he
book. So you should take a moment and compare the loop using the ifstatement
andinoperator with the loop using the getmethod. They do exactly the same
thing, but one is more succinct.
9.2 Dictionaries and ﬁles
One of the common uses of a dictionary is to count the occurrence of words in a
ﬁle with some written text. Let’s start with a very simple ﬁle of words t aken from
the text of Romeo and Juliet .
For the ﬁrst set of examples, we will use a shortened and simpliﬁed version of
the text with no punctuation. Later we will work with the text of the scene with
punctuation included.
But soft what light through yonder window breaks
It is the east and Juliet is the sun
Arise fair sun and kill the envious moon
Who is already sick and pale with grief
We will write a Python program to read through the lines of the ﬁle, break each
line into a list of words, and then loop through each of the words in the line a nd
count each word using a dictionary.
You will see that we have two forloops. The outer loop is reading the lines of the
ﬁle and the inner loop is iterating through each of the words on that particular
line. This is an example of a pattern called nested loops because one of the loops
is the outer loop and the other loop is the inner loop.
Because the inner loop executes all of its iterations each time the outer loop makes
a single iteration, we think of the inner loop as iterating “more quickly” a nd the
outer loop as iterating more slowly.
The combination of the two nested loops ensures that we will count every word on
every line of the input ﬁle.
9.3. LOOPING AND DICTIONARIES 111
fname =input( /quotesingle.ts1Enter the file name: /quotesingle.ts1 )
try:
fhand =open(fname)
except :
print( /quotesingle.ts1File cannot be opened:/quotesingle.ts1 , fname)
exit()
counts =dict()
for line infhand:
words =line.split()
forword inwords:
ifword not in counts:
counts[word] =1
else:
counts[word] +=1
print(counts)
# Code: http://www.py4e.com/code3/count1.py
In our else statement, we use the more compact alternative for incrementing a
variable. counts[word] += 1 is equivalent to counts[word] = counts[word] +
1. Either method can be used to change the value of a variable by any desired
amount. Similar alternatives exist for -=,*=, and /=.
When we run the program, we see a raw dump of all of the counts in unsorted
hash order. (the romeo.txt ﬁle is available at www.py4e.com/code3/romeo.txt )
python count1.py
Enter the file name: romeo.txt
{/quotesingle.ts1and/quotesingle.ts1: 3, /quotesingle.ts1envious/quotesingle.ts1: 1, /quotesingle.ts1already/quotesingle.ts1: 1, /quotesingle.ts1fair/quotesingle.ts1: 1,
/quotesingle.ts1is/quotesingle.ts1: 3, /quotesingle.ts1through/quotesingle.ts1: 1, /quotesingle.ts1pale/quotesingle.ts1: 1, /quotesingle.ts1yonder/quotesingle.ts1: 1,
/quotesingle.ts1what/quotesingle.ts1: 1, /quotesingle.ts1sun/quotesingle.ts1: 2, /quotesingle.ts1Who/quotesingle.ts1: 1, /quotesingle.ts1But/quotesingle.ts1: 1, /quotesingle.ts1moon/quotesingle.ts1: 1,
/quotesingle.ts1window/quotesingle.ts1: 1, /quotesingle.ts1sick/quotesingle.ts1: 1, /quotesingle.ts1east/quotesingle.ts1: 1, /quotesingle.ts1breaks/quotesingle.ts1: 1,
/quotesingle.ts1grief/quotesingle.ts1: 1, /quotesingle.ts1with/quotesingle.ts1: 1, /quotesingle.ts1light/quotesingle.ts1: 1, /quotesingle.ts1It/quotesingle.ts1: 1, /quotesingle.ts1Arise/quotesingle.ts1: 1,
/quotesingle.ts1kill/quotesingle.ts1: 1, /quotesingle.ts1the/quotesingle.ts1: 3, /quotesingle.ts1soft/quotesingle.ts1: 1, /quotesingle.ts1Juliet/quotesingle.ts1: 1}
It is a bit inconvenient to look through the dictionary to ﬁnd the most common
words and their counts, so we need to add some more Python code to get us the
output that will be more helpful.
9.3 Looping and dictionaries
If you use a dictionary as the sequence in a forstatement, it traverses the keys of
the dictionary. This loop prints each key and the corresponding value:
counts ={/quotesingle.ts1chuck/quotesingle.ts1 :1,/quotesingle.ts1annie/quotesingle.ts1 :42,/quotesingle.ts1jan/quotesingle.ts1 :100}
for keyincounts:
print(key, counts[key])
112 CHAPTER 9. DICTIONARIES
Here’s what the output looks like:
jan 100
chuck 1
annie 42
Again, the keys are in no particular order.
We can use this pattern to implement the various loop idioms that we have de-
scribed earlier. For example if we wanted to ﬁnd all the entries in a dictionary
with a value above ten, we could write the following code:
counts ={/quotesingle.ts1chuck/quotesingle.ts1 :1,/quotesingle.ts1annie/quotesingle.ts1 :42,/quotesingle.ts1jan/quotesingle.ts1 :100}
for keyincounts:
ifcounts[key] >10:
print(key, counts[key])
Theforloop iterates through the keys of the dictionary, so we must use the index
operator to retrieve the corresponding value for each key. Here’s what the output
looks like:
jan 100
annie 42
We see only the entries with a value above 10.
If you want to print the keys in alphabetical order, you ﬁrst make a list of the keys
in the dictionary using the keys method available in dictionary objects, and then
sort that list and loop through the sorted list, looking up each key and prin ting
out key-value pairs in sorted order as follows:
counts ={/quotesingle.ts1chuck/quotesingle.ts1 :1,/quotesingle.ts1annie/quotesingle.ts1 :42,/quotesingle.ts1jan/quotesingle.ts1 :100}
lst =list(counts.keys())
print(lst)
lst.sort()
for keyinlst:
print(key, counts[key])
Here’s what the output looks like:
[/quotesingle.ts1jan/quotesingle.ts1, /quotesingle.ts1chuck/quotesingle.ts1, /quotesingle.ts1annie/quotesingle.ts1]
annie 42
chuck 1
jan 100
First you see the list of keys in unsorted order that we get from the keys method.
Then we see the key-value pairs in order from the forloop.
9.4. ADVANCED TEXT PARSING 113
9.4 Advanced text parsing
In the above example using the ﬁle romeo.txt , we made the ﬁle as simple as possible
by removing all punctuation by hand. The actual text has lots of punctuation, as
shown below.
But, soft! what light through yonder window breaks?
It is the east, and Juliet is the sun.
Arise, fair sun, and kill the envious moon,
Who is already sick and pale with grief,
Since the Python split function looks for spaces and treats words as tokens sep-
arated by spaces, we would treat the words “soft!” and “soft” as diﬀerent words
and create a separate dictionary entry for each word.
Also since the ﬁle has capitalization, we would treat “who” and “Who” as diﬀerent
words with diﬀerent counts.
We can solve both these problems by using the string methods lower ,punctuation ,
andtranslate . The translate is the most subtle of the methods. Here is the
documentation for translate :
line.translate(str.maketrans(fromstr, tostr, deletest r))
Replace the characters in fromstr with the character in the same position in tostr
and delete all characters that are in deletestr . The fromstr andtostr can be
empty strings and the deletestr parameter can be omitted.
We will not specify the tostr but we will use the deletestr parameter to delete
all of the punctuation. We will even let Python tell us the list of characters that
it considers “punctuation”:
>>> import string
>>> string.punctuation
/quotesingle.ts1!"#$%&\/quotesingle.ts1()*+,-./:;<=>?@[\\]^_/grave.ts1{|}~/quotesingle.ts1
The parameters used by translate were diﬀerent in Python 2.0.
We make the following modiﬁcations to our program:
import string
fname =input( /quotesingle.ts1Enter the file name: /quotesingle.ts1 )
try:
fhand =open(fname)
except :
print( /quotesingle.ts1File cannot be opened:/quotesingle.ts1 , fname)
exit()
counts =dict()
for line infhand:
line =line.rstrip()
114 CHAPTER 9. DICTIONARIES
line =line.translate(line.maketrans( /quotesingle.ts1/quotesingle.ts1,/quotesingle.ts1/quotesingle.ts1, string.punctuation))
line =line.lower()
words =line.split()
forword inwords:
ifword not in counts:
counts[word] =1
else:
counts[word] +=1
print(counts)
# Code: http://www.py4e.com/code3/count2.py
Part of learning the “Art of Python” or “Thinking Pythonically” is realizing t hat
Python often has built-in capabilities for many common data analysis problems .
Over time, you will see enough example code and read enough of the documentation
to know where to look to see if someone has already written something that makes
your job much easier.
The following is an abbreviated version of the output:
Enter the file name: romeo-full.txt
{/quotesingle.ts1swearst/quotesingle.ts1: 1, /quotesingle.ts1all/quotesingle.ts1: 6, /quotesingle.ts1afeard/quotesingle.ts1: 1, /quotesingle.ts1leave/quotesingle.ts1: 2, /quotesingle.ts1these/quotesingle.ts1: 2,
/quotesingle.ts1kinsmen/quotesingle.ts1: 2, /quotesingle.ts1what/quotesingle.ts1: 11, /quotesingle.ts1thinkst/quotesingle.ts1: 1, /quotesingle.ts1love/quotesingle.ts1: 24, /quotesingle.ts1cloak/quotesingle.ts1: 1,
a/quotesingle.ts1: 24, /quotesingle.ts1orchard/quotesingle.ts1: 2, /quotesingle.ts1light/quotesingle.ts1: 5, /quotesingle.ts1lovers/quotesingle.ts1: 2, /quotesingle.ts1romeo/quotesingle.ts1: 40,
/quotesingle.ts1maiden/quotesingle.ts1: 1, /quotesingle.ts1whiteupturned/quotesingle.ts1: 1, /quotesingle.ts1juliet/quotesingle.ts1: 32, /quotesingle.ts1gentleman/quotesingle.ts1: 1,
/quotesingle.ts1it/quotesingle.ts1: 22, /quotesingle.ts1leans/quotesingle.ts1: 1, /quotesingle.ts1canst/quotesingle.ts1: 1, /quotesingle.ts1having/quotesingle.ts1: 1, ...}
Looking through this output is still unwieldy and we can use Python to give us
exactly what we are looking for, but to do so, we need to learn about Python tuples .
We will pick up this example once we learn about tuples.
9.5 Debugging
As you work with bigger datasets it can become unwieldy to debug by printing and
checking data by hand. Here are some suggestions for debugging large datasets:
Scale down the input If possible, reduce the size of the dataset. For example
if the program reads a text ﬁle, start with just the ﬁrst 10 lines, or with the
smallest example you can ﬁnd. You can either edit the ﬁles themselves, or
(better) modify the program so it reads only the ﬁrst nlines.
If there is an error, you can reduce nto the smallest value that manifests the
error, and then increase it gradually as you ﬁnd and correct errors.
Check summaries and types Instead of printing and checking the entire
dataset, consider printing summaries of the data: for example, the number
of items in a dictionary or the total of a list of numbers.
A common cause of runtime errors is a value that is not the right type. For
debugging this kind of error, it is often enough to print the type of a value.
9.6. GLOSSARY 115
Write self-checks Sometimes you can write code to check for errors automati-
cally. For example, if you are computing the average of a list of numbers, yo u
could check that the result is not greater than the largest element in the list
or less than the smallest. This is called a “sanity check” because it detects
results that are “completely illogical”.
Another kind of check compares the results of two diﬀerent computations to
see if they are consistent. This is called a “consistency check”.
Pretty print the output Formatting debugging output can make it easier to
spot an error.
Again, time you spend building scaﬀolding can reduce the time you spend debug-
ging.
9.6 Glossary
dictionary A mapping from a set of keys to their corresponding values.
hashtable The algorithm used to implement Python dictionaries.
hash function A function used by a hashtable to compute the location for a key.
histogram A set of counters.
implementation A way of performing a computation.
item Another name for a key-value pair.
key An object that appears in a dictionary as the ﬁrst part of a key-value pair.
key-value pair The representation of the mapping from a key to a value.
lookup A dictionary operation that takes a key and ﬁnds the corresponding value.
nested loops When there are one or more loops “inside” of another loop. The
inner loop runs to completion each time the outer loop runs once.
value An object that appears in a dictionary as the second part of a key-value
pair. This is more speciﬁc than our previous use of the word “value”.
9.7 Exercises
Exercise 2: Write a program that categorizes each mail message b y
which day of the week the commit was done. To do this look for lines
that start with “From”, then look for the third word and keep a running
count of each of the days of the week. At the end of the program print
out the contents of your dictionary (order does not matter).
Sample Line:
From stephen.marquard@uct.ac.za Sat Jan 5 09:14:16 2008
Sample Execution:
python dow.py
Enter a file name: mbox-short.txt
{/quotesingle.ts1Fri/quotesingle.ts1: 20, /quotesingle.ts1Thu/quotesingle.ts1: 6, /quotesingle.ts1Sat/quotesingle.ts1: 1}
116 CHAPTER 9. DICTIONARIES
Exercise 3: Write a program to read through a mail log, build a his -
togram using a dictionary to count how many messages have come fro m
each email address, and print the dictionary.
Enter file name: mbox-short.txt
{/quotesingle.ts1gopal.ramasammycook@gmail.com/quotesingle.ts1: 1, /quotesingle.ts1louis@media.berkeley.edu/quotesingle.ts1: 3,
/quotesingle.ts1cwen@iupui.edu/quotesingle.ts1: 5, /quotesingle.ts1antranig@caret.cam.ac.uk/quotesingle.ts1: 1,
/quotesingle.ts1rjlowe@iupui.edu/quotesingle.ts1: 2, /quotesingle.ts1gsilver@umich.edu/quotesingle.ts1: 3,
/quotesingle.ts1david.horwitz@uct.ac.za/quotesingle.ts1: 4, /quotesingle.ts1wagnermr@iupui.edu/quotesingle.ts1: 1,
/quotesingle.ts1zqian@umich.edu/quotesingle.ts1: 4, /quotesingle.ts1stephen.marquard@uct.ac.za/quotesingle.ts1: 2,
/quotesingle.ts1ray@media.berkeley.edu/quotesingle.ts1: 1}
Exercise 4: Add code to the above program to ﬁgure out who has the
most messages in the ﬁle. After all the data has been read and the dic-
tionary has been created, look through the dictionary using a maxi mum
loop (see Chapter 5: Maximum and minimum loops) to ﬁnd who has
the most messages and print how many messages the person has.
Enter a file name: mbox-short.txt
cwen@iupui.edu 5
Enter a file name: mbox.txt
zqian@umich.edu 195
Exercise 5: This program records the domain name (instead of the
address) where the message was sent from instead of who the mail ca me
from (i.e., the whole email address). At the end of the program, prin t
out the contents of your dictionary.
python schoolcount.py
Enter a file name: mbox-short.txt
{/quotesingle.ts1media.berkeley.edu/quotesingle.ts1: 4, /quotesingle.ts1uct.ac.za/quotesingle.ts1: 6, /quotesingle.ts1umich.edu/quotesingle.ts1: 7,
/quotesingle.ts1gmail.com/quotesingle.ts1: 1, /quotesingle.ts1caret.cam.ac.uk/quotesingle.ts1: 1, /quotesingle.ts1iupui.edu/quotesingle.ts1: 8}
Chapter 10
Tuples
10.1 Tuples are immutable
A tuple1is a sequence of values much like a list. The values stored in a tuple can
be any type, and they are indexed by integers. The important diﬀerence is that
tuples are immutable . Tuples are also comparable andhashable so we can sort lists
of them and use tuples as key values in Python dictionaries.
Syntactically, a tuple is a comma-separated list of values:
>>> t=/quotesingle.ts1a/quotesingle.ts1,/quotesingle.ts1b/quotesingle.ts1,/quotesingle.ts1c/quotesingle.ts1,/quotesingle.ts1d/quotesingle.ts1,/quotesingle.ts1e/quotesingle.ts1
Although it is not necessary, it is common to enclose tuples in parentheses to help
us quickly identify tuples when we look at Python code:
>>> t=(/quotesingle.ts1a/quotesingle.ts1,/quotesingle.ts1b/quotesingle.ts1,/quotesingle.ts1c/quotesingle.ts1,/quotesingle.ts1d/quotesingle.ts1,/quotesingle.ts1e/quotesingle.ts1)
To create a tuple with a single element, you have to include the ﬁnal comma:
>>> t1=(/quotesingle.ts1a/quotesingle.ts1,)
>>> type(t1)
<type /quotesingle.ts1tuple/quotesingle.ts1 >
Without the comma Python treats (/quotesingle.ts1a/quotesingle.ts1) as an expression with a string in paren-
theses that evaluates to a string:
>>> t2=(/quotesingle.ts1a/quotesingle.ts1)
>>> type(t2)
<type /quotesingle.ts1str/quotesingle.ts1 >
Another way to construct a tuple is the built-in function tuple . With no argument,
it creates an empty tuple:
1Fun fact: The word “tuple” comes from the names given to seque nces of numbers of varying
lengths: single, double, triple, quadruple, quintuple, se xtuple, septuple, etc.
117
118 CHAPTER 10. TUPLES
>>> t=tuple()
>>> print(t)
()
If the argument is a sequence (string, list, or tuple), the result of the call to tuple
is a tuple with the elements of the sequence:
>>> t=tuple( /quotesingle.ts1lupins/quotesingle.ts1 )
>>> print(t)
(/quotesingle.ts1l/quotesingle.ts1,/quotesingle.ts1u/quotesingle.ts1,/quotesingle.ts1p/quotesingle.ts1,/quotesingle.ts1i/quotesingle.ts1,/quotesingle.ts1n/quotesingle.ts1,/quotesingle.ts1s/quotesingle.ts1)
Because tuple is the name of a constructor, you should avoid using it as a variable
name.
Most list operators also work on tuples. The bracket operator indexes an elem ent:
>>> t=(/quotesingle.ts1a/quotesingle.ts1,/quotesingle.ts1b/quotesingle.ts1,/quotesingle.ts1c/quotesingle.ts1,/quotesingle.ts1d/quotesingle.ts1,/quotesingle.ts1e/quotesingle.ts1)
>>> print(t[ 0])
/quotesingle.ts1a/quotesingle.ts1
And the slice operator selects a range of elements.
>>> print(t[ 1:3])
(/quotesingle.ts1b/quotesingle.ts1,/quotesingle.ts1c/quotesingle.ts1)
But if you try to modify one of the elements of the tuple, you get an error:
>>> t[0]=/quotesingle.ts1A/quotesingle.ts1
TypeError : object doesn /quotesingle.ts1t support item assignment
You can’t modify the elements of a tuple, but you can replace one tuple with
another:
>>> t=(/quotesingle.ts1A/quotesingle.ts1,)+t[1:]
>>> print(t)
(/quotesingle.ts1A/quotesingle.ts1,/quotesingle.ts1b/quotesingle.ts1,/quotesingle.ts1c/quotesingle.ts1,/quotesingle.ts1d/quotesingle.ts1,/quotesingle.ts1e/quotesingle.ts1)
10.2 Comparing tuples
The comparison operators work with tuples and other sequences. Python starts by
comparing the ﬁrst element from each sequence. If they are equal, it goes on to the
next element, and so on, until it ﬁnds elements that diﬀer. Subsequent elements
are not considered (even if they are really big).
>>> (0,1,2)<(0,3,4)
True
>>> (0,1,2000000 )<(0,3,4)
True
10.2. COMPARING TUPLES 119
Thesort function works the same way. It sorts primarily by ﬁrst element, but in
the case of a tie, it sorts by second element, and so on.
This feature lends itself to a pattern called DSU for
Decorate a sequence by building a list of tuples with one or more sort keys
preceding the elements from the sequence,
Sort the list of tuples using the Python built-in sort, and
Undecorate by extracting the sorted elements of the sequence.
For example, suppose you have a list of words and you want to sort them from
longest to shortest:
txt =/quotesingle.ts1but soft what light in yonder window breaks/quotesingle.ts1
words =txt.split()
t=list()
for word inwords:
t.append((len(word), word))
t.sort(reverse =True)
res =list()
for length, word int:
res.append(word)
print(res)
# Code: http://www.py4e.com/code3/soft.py
The ﬁrst loop builds a list of tuples, where each tuple is a word preceded by its
length.
sort compares the ﬁrst element, length, ﬁrst, and only considers the second el-
ement to break ties. The keyword argument reverse=True tells sort to go in
decreasing order.
The second loop traverses the list of tuples and builds a list of words in descending
order of length. The four-character words are sorted in reverse alphabetical order,
so “what” appears before “soft” in the following list.
The output of the program is as follows:
[/quotesingle.ts1yonder/quotesingle.ts1, /quotesingle.ts1window/quotesingle.ts1, /quotesingle.ts1breaks/quotesingle.ts1, /quotesingle.ts1light/quotesingle.ts1, /quotesingle.ts1what/quotesingle.ts1,
/quotesingle.ts1soft/quotesingle.ts1, /quotesingle.ts1but/quotesingle.ts1, /quotesingle.ts1in/quotesingle.ts1]
Of course the line loses much of its poetic impact when turned into a Python list
and sorted in descending word length order.
120 CHAPTER 10. TUPLES
10.3 Tuple assignment
One of the unique syntactic features of the Python language is the ability to have
a tuple on the left side of an assignment statement. This allows you to ass ign more
than one variable at a time when the left side is a sequence.
In this example we have a two-element list (which is a sequence) and assign the ﬁrst
and second elements of the sequence to the variables xandyin a single statement.
>>> m=[/quotesingle.ts1have/quotesingle.ts1 ,/quotesingle.ts1fun/quotesingle.ts1 ]
>>> x, y =m
>>> x
/quotesingle.ts1have/quotesingle.ts1
>>> y
/quotesingle.ts1fun/quotesingle.ts1
>>>
It is not magic, Python roughly translates the tuple assignment syntax to be the
following:2
>>> m=[/quotesingle.ts1have/quotesingle.ts1 ,/quotesingle.ts1fun/quotesingle.ts1 ]
>>> x=m[0]
>>> y=m[1]
>>> x
/quotesingle.ts1have/quotesingle.ts1
>>> y
/quotesingle.ts1fun/quotesingle.ts1
>>>
Stylistically when we use a tuple on the left side of the assignment statement, we
omit the parentheses, but the following is an equally valid syntax:
>>> m=[/quotesingle.ts1have/quotesingle.ts1 ,/quotesingle.ts1fun/quotesingle.ts1 ]
>>> (x, y) =m
>>> x
/quotesingle.ts1have/quotesingle.ts1
>>> y
/quotesingle.ts1fun/quotesingle.ts1
>>>
A particularly clever application of tuple assignment allows us to swap the values
of two variables in a single statement:
>>> a, b =b, a
2Python does not translate the syntax literally. For example , if you try this with a dictionary,
it will not work as might expect.
10.4. DICTIONARIES AND TUPLES 121
Both sides of this statement are tuples, but the left side is a tuple of variables;
the right side is a tuple of expressions. Each value on the right side is ass igned
to its respective variable on the left side. All the expressions on the right s ide are
evaluated before any of the assignments.
The number of variables on the left and the number of values on the right must be
the same:
>>> a, b =1,2,3
ValueError : too many values to unpack
More generally, the right side can be any kind of sequence (string, list, or t uple).
For example, to split an email address into a user name and a domain, you could
write:
>>> addr =/quotesingle.ts1monty@python.org/quotesingle.ts1
>>> uname, domain =addr.split( /quotesingle.ts1@/quotesingle.ts1)
The return value from split is a list with two elements; the ﬁrst element is assigned
touname , the second to domain .
>>> print(uname)
monty
>>> print(domain)
python.org
10.4 Dictionaries and tuples
Dictionaries have a method called items that returns a list of tuples, where each
tuple is a key-value pair:
>>> d={/quotesingle.ts1a/quotesingle.ts1:10,/quotesingle.ts1b/quotesingle.ts1:1,/quotesingle.ts1c/quotesingle.ts1:22}
>>> t=list(d.items())
>>> print(t)
[(/quotesingle.ts1b/quotesingle.ts1,1), ( /quotesingle.ts1a/quotesingle.ts1,10), (/quotesingle.ts1c/quotesingle.ts1,22)]
As you should expect from a dictionary, the items are in no particular order.
However, since the list of tuples is a list, and tuples are comparable, we can now
sort the list of tuples. Converting a dictionary to a list of tuples is a way f or us to
output the contents of a dictionary sorted by key:
>>> d={/quotesingle.ts1a/quotesingle.ts1:10,/quotesingle.ts1b/quotesingle.ts1:1,/quotesingle.ts1c/quotesingle.ts1:22}
>>> t=list(d.items())
>>> t
[(/quotesingle.ts1b/quotesingle.ts1,1), ( /quotesingle.ts1a/quotesingle.ts1,10), (/quotesingle.ts1c/quotesingle.ts1,22)]
>>> t.sort()
>>> t
[(/quotesingle.ts1a/quotesingle.ts1,10), ( /quotesingle.ts1b/quotesingle.ts1,1), (/quotesingle.ts1c/quotesingle.ts1,22)]
The new list is sorted in ascending alphabetical order by the key value.
122 CHAPTER 10. TUPLES
10.5 Multiple assignment with dictionaries
Combining items , tuple assignment, and for, you can see a nice code pattern for
traversing the keys and values of a dictionary in a single loop:
for key, val inlist(d.items()):
print(val, key)
This loop has two iteration variables because items returns a list of tuples and key,
valis a tuple assignment that successively iterates through each of the key-value
pairs in the dictionary.
For each iteration through the loop, both keyandvalue are advanced to the next
key-value pair in the dictionary (still in hash order).
The output of this loop is:
10 a
22 c
1 b
Again, it is in hash key order (i.e., no particular order).
If we combine these two techniques, we can print out the contents of a dictionary
sorted by the value stored in each key-value pair.
To do this, we ﬁrst make a list of tuples where each tuple is (value, key) . The
items method would give us a list of (key, value) tuples, but this time we want
to sort by value, not key. Once we have constructed the list with the value-key
tuples, it is a simple matter to sort the list in reverse order and print out the new,
sorted list.
>>> d={/quotesingle.ts1a/quotesingle.ts1:10,/quotesingle.ts1b/quotesingle.ts1:1,/quotesingle.ts1c/quotesingle.ts1:22}
>>> l=list()
>>> forkey, val ind.items() :
... l.append( (val, key) )
...
>>> l
[(10,/quotesingle.ts1a/quotesingle.ts1), ( 22,/quotesingle.ts1c/quotesingle.ts1), ( 1,/quotesingle.ts1b/quotesingle.ts1)]
>>> l.sort(reverse =True)
>>> l
[(22,/quotesingle.ts1c/quotesingle.ts1), ( 10,/quotesingle.ts1a/quotesingle.ts1), ( 1,/quotesingle.ts1b/quotesingle.ts1)]
>>>
By carefully constructing the list of tuples to have the value as the ﬁrst element
of each tuple, we can sort the list of tuples and get our dictionary contents sorted
by value.
10.6. THE MOST COMMON WORDS 123
10.6 The most common words
Coming back to our running example of the text from Romeo and Juliet Act 2,
Scene 2, we can augment our program to use this technique to print the ten most
common words in the text as follows:
import string
fhand =open( /quotesingle.ts1romeo-full.txt/quotesingle.ts1 )
counts =dict()
for line infhand:
line =line.translate(str.maketrans( /quotesingle.ts1/quotesingle.ts1,/quotesingle.ts1/quotesingle.ts1, string.punctuation))
line =line.lower()
words =line.split()
forword inwords:
ifword not in counts:
counts[word] =1
else:
counts[word] +=1
# Sort the dictionary by value
lst =list()
for key, val inlist(counts.items()):
lst.append((val, key))
lst.sort(reverse =True)
for key, val inlst[: 10]:
print(key, val)
# Code: http://www.py4e.com/code3/count3.py
The ﬁrst part of the program which reads the ﬁle and computes the dictionary
that maps each word to the count of words in the document is unchanged. But
instead of simply printing out counts and ending the program, we construct a list
of(val, key) tuples and then sort the list in reverse order.
Since the value is ﬁrst, it will be used for the comparisons. If there is more tha n
one tuple with the same value, it will look at the second element (the key), so
tuples where the value is the same will be further sorted by the alphabetical order
of the key.
At the end we write a nice forloop which does a multiple assignment iteration
and prints out the ten most common words by iterating through a slice of the li st
(lst[:10] ).
So now the output ﬁnally looks like what we want for our word frequency analysis.
61 i
42 and
40 romeo
34 to
34 the
124 CHAPTER 10. TUPLES
32 thou
32 juliet
30 that
29 my
24 thee
The fact that this complex data parsing and analysis can be done with an easy-to-
understand 19-line Python program is one reason why Python is a good choice as
a language for exploring information.
10.7 Using tuples as keys in dictionaries
Because tuples are hashable and lists are not, if we want to create a composite key
to use in a dictionary we must use a tuple as the key.
We would encounter a composite key if we wanted to create a telephone directory
that maps from last-name, ﬁrst-name pairs to telephone numbers. Assuming that
we have deﬁned the variables last,first , and number , we could write a dictionary
assignment statement as follows:
directory[last,first] =number
The expression in brackets is a tuple. We could use tuple assignment in a forloop
to traverse this dictionary.
for last, first indirectory:
print(first, last, directory[last,first])
This loop traverses the keys in directory , which are tuples. It assigns the elements
of each tuple to last andfirst , then prints the name and corresponding telephone
number.
10.8 Sequences: strings, lists, and tuples - Oh
My!
I have focused on lists of tuples, but almost all of the examples in this chapter
also work with lists of lists, tuples of tuples, and tuples of lists. To av oid enumer-
ating the possible combinations, it is sometimes easier to talk about sequences o f
sequences.
In many contexts, the diﬀerent kinds of sequences (strings, lists, and tuples) can
be used interchangeably. So how and why do you choose one over the others?
To start with the obvious, strings are more limited than other sequences becaus e
the elements have to be characters. They are also immutable. If you need the
ability to change the characters in a string (as opposed to creating a new string ),
you might want to use a list of characters instead.
Lists are more common than tuples, mostly because they are mutable. But there
are a few cases where you might prefer tuples:
10.9. DEBUGGING 125
1. In some contexts, like a return statement, it is syntactically simpler to create
a tuple than a list. In other contexts, you might prefer a list.
2. If you want to use a sequence as a dictionary key, you have to use an im-
mutable type like a tuple or string.
3. If you are passing a sequence as an argument to a function, using tuples
reduces the potential for unexpected behavior due to aliasing.
Because tuples are immutable, they don’t provide methods like sort andreverse ,
which modify existing lists. However Python provides the built-in functions sorted
andreversed , which take any sequence as a parameter and return a new sequence
with the same elements in a diﬀerent order.
10.9 Debugging
Lists, dictionaries and tuples are known generically as data structures ; in this
chapter we are starting to see compound data structures, like lists of tuples, a nd
dictionaries that contain tuples as keys and lists as values. Compound data str uc-
tures are useful, but they are prone to what I call shape errors ; that is, errors
caused when a data structure has the wrong type, size, or composition, or perhaps
you write some code and forget the shape of your data and introduce an error. F or
example, if you are expecting a list with one integer and I give you a plain ol d
integer (not in a list), it won’t work.
10.10 Glossary
comparable A type where one value can be checked to see if it is greater than,
less than, or equal to another value of the same type. Types which are
comparable can be put in a list and sorted.
data structure A collection of related values, often organized in lists, dictionaries,
tuples, etc.
DSU Abbreviation of “decorate-sort-undecorate”, a pattern that involves building
a list of tuples, sorting, and extracting part of the result.
gather The operation of assembling a variable-length argument tuple.
hashable A type that has a hash function. Immutable types like integers, ﬂoats,
and strings are hashable; mutable types like lists and dictionaries are not.
scatter The operation of treating a sequence as a list of arguments.
shape (of a data structure) A summary of the type, size, and composition of
a data structure.
singleton A list (or other sequence) with a single element.
tuple An immutable sequence of elements.
tuple assignment An assignment with a sequence on the right side and a tuple
of variables on the left. The right side is evaluated and then its elements are
assigned to the variables on the left.
126 CHAPTER 10. TUPLES
10.11 Exercises
Exercise 1: Revise a previous program as follows: Read and par se the
“From” lines and pull out the addresses from the line. Count the nu m-
ber of messages from each person using a dictionary.
After all the data has been read, print the person with the most commits
by creating a list of (count, email) tuples from the dictionary. Then
sort the list in reverse order and print out the person who has the most
commits.
Sample Line:
From stephen.marquard@uct.ac.za Sat Jan 5 09:14:16 2008
Enter a file name: mbox-short.txt
cwen@iupui.edu 5
Enter a file name: mbox.txt
zqian@umich.edu 195
Exercise 2: This program counts the distribution of the hour of the d ay
for each of the messages. You can pull the hour from the “From” line
by ﬁnding the time string and then splitting that string into parts using
the colon character. Once you have accumulated the counts for each
hour, print out the counts, one per line, sorted by hour as shown b elow.
python timeofday.py
Enter a file name: mbox-short.txt
04 3
06 1
07 1
09 2
10 3
11 6
14 1
15 2
16 4
17 2
18 1
19 1
Exercise 3: Write a program that reads a ﬁle and prints the letters
in decreasing order of frequency. Your program should conver t all the
input to lower case and only count the letters a-z. Your program sh ould
not count spaces, digits, punctuation, or anything other than the le tters
a-z. Find text samples from several diﬀerent languages and see h ow
letter frequency varies between languages. Compare your resul ts with
the tables at https://wikipedia.org/wiki/Letter_frequencies .
Chapter 11
Regular expressions
So far we have been reading through ﬁles, looking for patterns and extracting
various bits of lines that we ﬁnd interesting. We have been
using string methods like split andfind and using lists and string slicing to
extract portions of the lines.
This task of searching and extracting is so common that Python has a very power ful
library called regular expressions that handles many of these tasks quite elegantly.
The reason we have not introduced regular expressions earlier in the book is because
while they are very powerful, they are a little complicated and their syntax ta kes
some getting used to.
Regular expressions are almost their own little programming language for searching
and parsing strings. As a matter of fact, entire books have been written on the
topic of regular expressions. In this chapter, we will only cover the basics of reg ular
expressions. For more detail on regular expressions, see:
https://en.wikipedia.org/wiki/Regular_expression
https://docs.python.org/library/re.html
The regular expression library remust be imported into your program before you
can use it. The simplest use of the regular expression library is the search()
function. The following program demonstrates a trivial use of the search functi on.
# Search for lines that contain /quotesingle.ts1From/quotesingle.ts1
import re
hand =open( /quotesingle.ts1mbox-short.txt/quotesingle.ts1 )
for line inhand:
line =line.rstrip()
ifre.search( /quotesingle.ts1From:/quotesingle.ts1 , line):
print(line)
# Code: http://www.py4e.com/code3/re01.py
We open the ﬁle, loop through each line, and use the regular expression search()
to only print out lines that contain the string “From:”. This program does not
127
128 CHAPTER 11. REGULAR EXPRESSIONS
use the real power of regular expressions, since we could have just as easily used
line.find() to accomplish the same result.
The power of the regular expressions comes when we add special characters to
the search string that allow us to more precisely control which lines match t he
string. Adding these special characters to our regular expression allow us to do
sophisticated matching and extraction while writing very little code.
For example, the caret character is used in regular expressions to match “the
beginning” of a line. We could change our program to only match lines where
“From:” was at the beginning of the line as follows:
# Search for lines that start with /quotesingle.ts1From/quotesingle.ts1
import re
hand =open( /quotesingle.ts1mbox-short.txt/quotesingle.ts1 )
for line inhand:
line =line.rstrip()
ifre.search( /quotesingle.ts1^From:/quotesingle.ts1 , line):
print(line)
# Code: http://www.py4e.com/code3/re02.py
Now we will only match lines that start with the string “From:”. This is still a
very simple example that we could have done equivalently with the startswith()
method from the string library. But it serves to introduce the notion that regul ar
expressions contain special action characters that give us more control as t o what
will match the regular expression.
11.1 Character matching in regular expressions
There are a number of other special characters that let us build even more powerful
regular expressions. The most commonly used special character is the period or
full stop, which matches any character.
In the following example, the regular expression F..m: would match any of the
strings “From:”, “Fxxm:”, “F12m:”, or “F!@m:” since the period char acters in the
regular expression match any character.
# Search for lines that start with /quotesingle.ts1F/quotesingle.ts1, followed by
# 2 characters, followed by /quotesingle.ts1m:/quotesingle.ts1
import re
hand =open( /quotesingle.ts1mbox-short.txt/quotesingle.ts1 )
for line inhand:
line =line.rstrip()
ifre.search( /quotesingle.ts1^F..m:/quotesingle.ts1 , line):
print(line)
# Code: http://www.py4e.com/code3/re03.py
11.2. EXTRACTING DATA USING REGULAR EXPRESSIONS 129
This is particularly powerful when combined with the ability to indicate that a
character can be repeated any number of times using the *or+characters in your
regular expression. These special characters mean that instead of matching a singl e
character in the search string, they match zero-or-more characters (in the case of
the asterisk) or one-or-more of the characters (in the case of the plus sign).
We can further narrow down the lines that we match using a repeated wild card
character in the following example:
# Search for lines that start with From and have an at sign
import re
hand =open( /quotesingle.ts1mbox-short.txt/quotesingle.ts1 )
for line inhand:
line =line.rstrip()
ifre.search( /quotesingle.ts1^From:.+@/quotesingle.ts1 , line):
print(line)
# Code: http://www.py4e.com/code3/re04.py
The search string ˆFrom:.+@ will successfully match lines that start with “From:”,
followed by one or more characters ( .+), followed by an at-sign. So this will match
the following line:
From: stephen.marquard@uct.ac.za
You can think of the .+wildcard as expanding to match all the characters between
the colon character and the at-sign.
From:.+@
It is good to think of the plus and asterisk characters as “pushy”. For example,
the following string would match the last at-sign in the string as the .+pushes
outwards, as shown below:
From: stephen.marquard@uct.ac.za, csev@umich.edu, and cwen @iupui.edu
It is possible to tell an asterisk or plus sign not to be so “greedy” by adding
another character. See the detailed documentation for information on turning oﬀ
the greedy behavior.
11.2 Extracting data using regular expressions
If we want to extract data from a string in Python we can use the findall()
method to extract all of the substrings which match a regular expression. Let’s use
the example of wanting to extract anything that looks like an email address f rom
any line regardless of format. For example, we want to pull the email addresses
from each of the following lines:
130 CHAPTER 11. REGULAR EXPRESSIONS
From stephen.marquard@uct.ac.za Sat Jan 5 09:14:16 2008
Return-Path: <postmaster@collab.sakaiproject.org>
for <source@collab.sakaiproject.org>;
Received: (from apache@localhost)
Author: stephen.marquard@uct.ac.za
We don’t want to write code for each of the types of lines, splitting and slici ng
diﬀerently for each line. This following program uses findall() to ﬁnd the lines
with email addresses in them and extract one or more addresses from each of those
lines.
import re
s=/quotesingle.ts1A message from csev@umich.edu to cwen@iupui.edu about mee ting @2PM/quotesingle.ts1
lst =re.findall( /quotesingle.ts1\S+@\S+/quotesingle.ts1 , s)
print(lst)
# Code: http://www.py4e.com/code3/re05.py
Thefindall() method searches the string in the second argument and returns a
list of all of the strings that look like email addresses. We are using a tw o-character
sequence that matches a non-whitespace character ( \S).
The output of the program would be:
[/quotesingle.ts1csev@umich.edu/quotesingle.ts1, /quotesingle.ts1cwen@iupui.edu/quotesingle.ts1]
Translating the regular expression, we are looking for substrings that have a t least
one non-whitespace character, followed by an at-sign, followed by at least one m ore
non-whitespace character. The \S+matches as many non-whitespace characters
as possible.
The regular expression would match twice (csev@umich.edu and cwen@iupui.edu),
but it would not match the string “@2PM” because there are no non-blank char-
acters before the at-sign. We can use this regular expression in a program to read
all the lines in a ﬁle and print out anything that looks like an email address as
follows:
# Search for lines that have an at sign between characters
import re
hand =open( /quotesingle.ts1mbox-short.txt/quotesingle.ts1 )
for line inhand:
line =line.rstrip()
x=re.findall( /quotesingle.ts1\S+@\S+/quotesingle.ts1 , line)
iflen(x) >0:
print(x)
# Code: http://www.py4e.com/code3/re06.py
We read each line and then extract all the substrings that match our regular
expression. Since findall() returns a list, we simply check if the number of
11.2. EXTRACTING DATA USING REGULAR EXPRESSIONS 131
elements in our returned list is more than zero to print only lines where we found
at least one substring that looks like an email address.
If we run the program on mbox.txt we get the following output:
[/quotesingle.ts1wagnermr@iupui.edu/quotesingle.ts1]
[/quotesingle.ts1cwen@iupui.edu/quotesingle.ts1]
[/quotesingle.ts1<postmaster@collab.sakaiproject.org>/quotesingle.ts1]
[/quotesingle.ts1<200801032122.m03LMFo4005148@nakamura.uits.iupui.edu>/quotesingle.ts1]
[/quotesingle.ts1<source@collab.sakaiproject.org>;/quotesingle.ts1]
[/quotesingle.ts1<source@collab.sakaiproject.org>;/quotesingle.ts1]
[/quotesingle.ts1<source@collab.sakaiproject.org>;/quotesingle.ts1]
[/quotesingle.ts1apache@localhost)/quotesingle.ts1]
[/quotesingle.ts1source@collab.sakaiproject.org;/quotesingle.ts1]
Some of our email addresses have incorrect characters like “<” or “;” at the begin-
ning or end. Let’s declare that we are only interested in the portion of the string
that starts and ends with a letter or a number.
To do this, we use another feature of regular expressions. Square brackets are used
to indicate a set of multiple acceptable characters we are willing to consider matc h-
ing. In a sense, the \Sis asking to match the set of “non-whitespace characters”.
Now we will be a little more explicit in terms of the characters we will m atch.
Here is our new regular expression:
[a-zA-Z0-9]\S*@\S*[a-zA-Z]
This is getting a little complicated and you can begin to see why regular express ions
are their own little language unto themselves. Translating this regular expres sion,
we are looking for substrings that start with a single lowercase letter, uppercase
letter, or number “[a-zA-Z0-9]”, followed by zero or more non-blank characters
(\S*), followed by an at-sign, followed by zero or more non-blank characters ( \S*),
followed by an uppercase or lowercase letter. Note that we switched from +to*
to indicate zero or more non-blank characters since [a-zA-Z0-9] is already one
non-blank character. Remember that the *or+applies to the single character
immediately to the left of the plus or asterisk.
If we use this expression in our program, our data is much cleaner:
# Search for lines that have an at sign between characters
# The characters must be a letter or number
import re
hand =open( /quotesingle.ts1mbox-short.txt/quotesingle.ts1 )
for line inhand:
line =line.rstrip()
x=re.findall( /quotesingle.ts1[a-zA-Z0-9]\S+@\S+[a-zA-Z]/quotesingle.ts1 , line)
iflen(x) >0:
print(x)
# Code: http://www.py4e.com/code3/re07.py
132 CHAPTER 11. REGULAR EXPRESSIONS
...
[/quotesingle.ts1wagnermr@iupui.edu/quotesingle.ts1]
[/quotesingle.ts1cwen@iupui.edu/quotesingle.ts1]
[/quotesingle.ts1postmaster@collab.sakaiproject.org/quotesingle.ts1]
[/quotesingle.ts1200801032122.m03LMFo4005148@nakamura.uits.iupui.edu/quotesingle.ts1]
[/quotesingle.ts1source@collab.sakaiproject.org/quotesingle.ts1]
[/quotesingle.ts1source@collab.sakaiproject.org/quotesingle.ts1]
[/quotesingle.ts1source@collab.sakaiproject.org/quotesingle.ts1]
[/quotesingle.ts1apache@localhost/quotesingle.ts1]
Notice that on the source@collab.sakaiproject.org lines, our regular expres-
sion eliminated two letters at the end of the string (“>;”). This is because when
we append [a-zA-Z] to the end of our regular expression, we are demanding that
whatever string the regular expression parser ﬁnds must end with a letter. So
when it sees the “>” at the end of “sakaiproject.org>;” it simply stops at the las t
“matching” letter it found (i.e., the “g” was the last good match).
Also note that the output of the program is a Python list that has a string as t he
single element in the list.
11.3 Combining searching and extracting
If we want to ﬁnd numbers on lines that start with the string “X-” such as:
X-DSPAM-Confidence: 0.8475
X-DSPAM-Probability: 0.0000
we don’t just want any ﬂoating-point numbers from any lines. We only want t o
extract numbers from lines that have the above syntax.
We can construct the following regular expression to select the lines:
^X-.*: [0-9.]+
Translating this, we are saying, we want lines that start with X-, followed by zero
or more characters ( .*), followed by a colon ( :) and then a space. After the
space we are looking for one or more characters that are either a digit (0-9) o r
a period [0-9.]+ . Note that inside the square brackets, the period matches an
actual period (i.e., it is not a wildcard between the square brackets).
This is a very tight expression that will pretty much match only the lines we a re
interested in as follows:
# Search for lines that start with /quotesingle.ts1X/quotesingle.ts1 followed by any non
# whitespace characters and /quotesingle.ts1:/quotesingle.ts1
# followed by a space and any number.
# The number can include a decimal.
import re
hand =open( /quotesingle.ts1mbox-short.txt/quotesingle.ts1 )
for line inhand:
11.3. COMBINING SEARCHING AND EXTRACTING 133
line =line.rstrip()
ifre.search( /quotesingle.ts1^X\S*: [0-9.]+/quotesingle.ts1 , line):
print(line)
# Code: http://www.py4e.com/code3/re10.py
When we run the program, we see the data nicely ﬁltered to show only the lines
we are looking for.
X-DSPAM-Confidence: 0.8475
X-DSPAM-Probability: 0.0000
X-DSPAM-Confidence: 0.6178
X-DSPAM-Probability: 0.0000
But now we have to solve the problem of extracting the numbers. While it would
be simple enough to use split , we can use another feature of regular expressions
to both search and parse the line at the same time.
Parentheses are another special character in regular expressions. When you add
parentheses to a regular expression, they are ignored when matching the string.
But when you are using findall() , parentheses indicate that while you want the
whole expression to match, you only are interested in extracting a portion of the
substring that matches the regular expression.
So we make the following change to our program:
# Search for lines that start with /quotesingle.ts1X/quotesingle.ts1 followed by any
# non whitespace characters and /quotesingle.ts1:/quotesingle.ts1 followed by a space
# and any number. The number can include a decimal.
# Then print the number if it is greater than zero.
import re
hand =open( /quotesingle.ts1mbox-short.txt/quotesingle.ts1 )
for line inhand:
line =line.rstrip()
x=re.findall( /quotesingle.ts1^X\S*: ([0-9.]+)/quotesingle.ts1 , line)
iflen(x) >0:
print(x)
# Code: http://www.py4e.com/code3/re11.py
Instead of calling search() , we add parentheses around the part of the regular
expression that represents the ﬂoating-point number to indicate we only want
findall() to give us back the ﬂoating-point number portion of the matching
string.
The output from this program is as follows:
[/quotesingle.ts10.8475/quotesingle.ts1]
[/quotesingle.ts10.0000/quotesingle.ts1]
[/quotesingle.ts10.6178/quotesingle.ts1]
[/quotesingle.ts10.0000/quotesingle.ts1]
[/quotesingle.ts10.6961/quotesingle.ts1]
[/quotesingle.ts10.0000/quotesingle.ts1]
..
134 CHAPTER 11. REGULAR EXPRESSIONS
The numbers are still in a list and need to be converted from strings to ﬂoati ng
point, but we have used the power of regular expressions to both search and extra ct
the information we found interesting.
As another example of this technique, if you look at the ﬁle there are a number of
lines of the form:
Details: http://source.sakaiproject.org/viewsvn/?view=rev&rev=39772
If we wanted to extract all of the revision numbers (the integer number at the end
of these lines) using the same technique as above, we could write the following
program:
# Search for lines that start with /quotesingle.ts1Details: rev=/quotesingle.ts1
# followed by numbers and /quotesingle.ts1./quotesingle.ts1
# Then print the number if it is greater than zero
import re
hand =open( /quotesingle.ts1mbox-short.txt/quotesingle.ts1 )
for line inhand:
line =line.rstrip()
x=re.findall( /quotesingle.ts1^Details:.*rev=([0-9.]+)/quotesingle.ts1 , line)
iflen(x) >0:
print(x)
# Code: http://www.py4e.com/code3/re12.py
Translating our regular expression, we are looking for lines that start wit h
Details: , followed by any number of characters ( .*), followed by rev=, and then
by one or more digits. We want to ﬁnd lines that match the entire expression but
we only want to extract the integer number at the end of the line, so we surround
[0-9]+ with parentheses.
When we run the program, we get the following output:
[/quotesingle.ts139772/quotesingle.ts1]
[/quotesingle.ts139771/quotesingle.ts1]
[/quotesingle.ts139770/quotesingle.ts1]
[/quotesingle.ts139769/quotesingle.ts1]
...
Remember that the [0-9]+ is “greedy” and it tries to make as large a string of
digits as possible before extracting those digits. This “greedy” behavior i s why we
get all ﬁve digits for each number. The regular expression library expands in bot h
directions until it encounters a non-digit, or the beginning or the end of a line.
Now we can use regular expressions to redo an exercise from earlier in the book
where we were interested in the time of day of each mail message. We looked fo r
lines of the form:
From stephen.marquard@uct.ac.za Sat Jan 5 09:14:16 2008
11.3. COMBINING SEARCHING AND EXTRACTING 135
and wanted to extract the hour of the day for each line. Previously we did this
with two calls to split . First the line was split into words and then we pulled
out the ﬁfth word and split it again on the colon character to pull out the two
characters we were interested in.
While this worked, it actually results in pretty brittle code that is assuming t he
lines are nicely formatted. If you were to add enough error checking (or a big
try/except block) to insure that your program never failed when presented with
incorrectly formatted lines, the code would balloon to 10-15 lines of code that wa s
pretty hard to read.
We can do this in a far simpler way with the following regular expression:
^From .* [0-9][0-9]:
The translation of this regular expression is that we are looking for lines that start
with From (note the space), followed by any number of characters ( .*), followed by
a space, followed by two digits [0-9][0-9] , followed by a colon character. This is
the deﬁnition of the kinds of lines we are looking for.
In order to pull out only the hour using findall() , we add parentheses around
the two digits as follows:
^From .* ([0-9][0-9]):
This results in the following program:
# Search for lines that start with From and a character
# followed by a two digit number between 00 and 99 followed by /quotesingle.ts1 :/quotesingle.ts1
# Then print the number if it is greater than zero
import re
hand =open( /quotesingle.ts1mbox-short.txt/quotesingle.ts1 )
for line inhand:
line =line.rstrip()
x=re.findall( /quotesingle.ts1^From .* ([0-9][0-9]):/quotesingle.ts1 , line)
iflen(x) >0: print(x)
# Code: http://www.py4e.com/code3/re13.py
When the program runs, it produces the following output:
[/quotesingle.ts109/quotesingle.ts1]
[/quotesingle.ts118/quotesingle.ts1]
[/quotesingle.ts116/quotesingle.ts1]
[/quotesingle.ts115/quotesingle.ts1]
...
136 CHAPTER 11. REGULAR EXPRESSIONS
11.4 Escape character
Since we use special characters in regular expressions to match the beginning or
end of a line or specify wild cards, we need a way to indicate that these characters
are “normal” and we want to match the actual character such as a dollar sig n or
caret.
We can indicate that we want to simply match a character by preﬁxing that charac-
ter with a backslash. For example, we can ﬁnd money amounts with the following
regular expression.
import re
x=/quotesingle.ts1We just received $10.00 for cookies./quotesingle.ts1
y=re.findall( /quotesingle.ts1\$[0-9.]+/quotesingle.ts1 ,x)
Since we preﬁx the dollar sign with a backslash, it actually matches the dollar
sign in the input string instead of matching the “end of line”, and the rest of
the regular expression matches one or more digits or the period character. Note:
Inside square brackets, characters are not “special”. So when we say [0-9.] , it
really means digits or a period. Outside of square brackets, a period is the “w ild-
card” character and matches any character. Inside square brackets, the period is
a period.
11.5 Summary
While this only scratched the surface of regular expressions, we have learned a bit
about the language of regular expressions. They are search strings with specia l
characters in them that communicate your wishes to the regular expression system
as to what deﬁnes “matching” and what is extracted from the matched strings.
Here are some of those special characters and character sequences:
ˆMatches the beginning of the line.
$Matches the end of the line.
.Matches any character (a wildcard).
\sMatches a whitespace character.
\SMatches a non-whitespace character (opposite of \s).
*Applies to the immediately preceding character(s) and indicates to match zero
or more times.
*?Applies to the immediately preceding character(s) and indicates to match zero
or more times in “non-greedy mode”.
+Applies to the immediately preceding character(s) and indicates to match one or
more times.
+?Applies to the immediately preceding character(s) and indicates to match one
or more times in “non-greedy mode”.
11.6. BONUS SECTION FOR UNIX / LINUX USERS 137
?Applies to the immediately preceding character(s) and indicates to match zero
or one time.
??Applies to the immediately preceding character(s) and indicates to match zero
or one time in “non-greedy mode”.
[aeiou] Matches a single character as long as that character is in the speciﬁed set.
In this example, it would match “a”, “e”, “i”, “o”, or “u”, but no other charact ers.
[a-z0-9] You can specify ranges of characters using the minus sign. This example
is a single character that must be a lowercase letter or a digit.
[ˆA-Za-z] When the ﬁrst character in the set notation is a caret, it inverts the
logic. This example matches a single character that is anything other than an
uppercase or lowercase letter.
( )When parentheses are added to a regular expression, they are ignored for the
purpose of matching, but allow you to extract a particular subset of the matched
string rather than the whole string when using findall() .
\bMatches the empty string, but only at the start or end of a word.
\BMatches the empty string, but not at the start or end of a word.
\dMatches any decimal digit; equivalent to the set [0-9].
\DMatches any non-digit character; equivalent to the set [ˆ0-9].
11.6 Bonus section for Unix / Linux users
Support for searching ﬁles using regular expressions was built into the Unix operat-
ing system since the 1960s and it is available in nearly all programming la nguages
in one form or another.
As a matter of fact, there is a command-line program built into Unix called grep
(Generalized Regular Expression Parser) that does pretty much the same as the
search() examples in this chapter. So if you have a Macintosh or Linux system,
you can try the following commands in your command-line window.
$grep /quotesingle.ts1^From:/quotesingle.ts1 mbox-short.txt
From: stephen.marquard@uct.ac.za
From: louis@media.berkeley.edu
From: zqian@umich.edu
From: rjlowe@iupui.edu
This tells grep to show you lines that start with the string “From:” in the ﬁle
mbox-short.txt . If you experiment with the grep command a bit and read the
documentation for grep, you will ﬁnd some subtle diﬀerences between the regular
expression support in Python and the regular expression support in grep. As an
example, grep does not support the non-blank character \Sso you will need to
use the slightly more complex set notation [ˆ ] , which simply means match a
character that is anything other than a space.
138 CHAPTER 11. REGULAR EXPRESSIONS
11.7 Debugging
Python has some simple and rudimentary built-in documentation that can be quite
helpful if you need a quick refresher to trigger your memory about the exact name of
a particular method. This documentation can be viewed in the Python interpreter
in interactive mode.
You can bring up an interactive help system using help() .
>>> help()
help>modules
If you know what module you want to use, you can use the dir() command to
ﬁnd the methods in the module as follows:
>>> import re
>>> dir(re)
[.. /quotesingle.ts1compile/quotesingle.ts1 ,/quotesingle.ts1copy_reg/quotesingle.ts1 ,/quotesingle.ts1error/quotesingle.ts1 ,/quotesingle.ts1escape/quotesingle.ts1 ,/quotesingle.ts1findall/quotesingle.ts1 ,
/quotesingle.ts1finditer/quotesingle.ts1 ,/quotesingle.ts1match/quotesingle.ts1 ,/quotesingle.ts1purge/quotesingle.ts1 ,/quotesingle.ts1search/quotesingle.ts1 ,/quotesingle.ts1split/quotesingle.ts1 ,/quotesingle.ts1sre_compile/quotesingle.ts1 ,
/quotesingle.ts1sre_parse/quotesingle.ts1 ,/quotesingle.ts1sub/quotesingle.ts1 ,/quotesingle.ts1subn/quotesingle.ts1 ,/quotesingle.ts1sys/quotesingle.ts1 ,/quotesingle.ts1template/quotesingle.ts1 ]
You can also get a small amount of documentation on a particular method using
the dir command.
>>> help (re.search)
Help on function search inmodule re:
search(pattern, string, flags =0)
Scan through string looking fora match to the pattern, returning
a match object, orNone ifno match was found.
>>>
The built-in documentation is not very extensive, but it can be helpful when you
are in a hurry or don’t have access to a web browser or search engine.
11.8 Glossary
brittle code Code that works when the input data is in a particular format but
is prone to breakage if there is some deviation from the correct format. We
call this “brittle code” because it is easily broken.
greedy matching The notion that the +and*characters in a regular expression
expand outward to match the largest possible string.
grep A command available in most Unix systems that searches through text ﬁles
looking for lines that match regular expressions. The command name stands
for “Generalized Regular Expression Parser”.
11.9. EXERCISES 139
regular expression A language for expressing more complex search strings. A
regular expression may contain special characters that indicate that a search
only matches at the beginning or end of a line or many other similar capa-
bilities.
wild card A special character that matches any character. In regular expressions
the wild-card character is the period.
11.9 Exercises
Exercise 1: Write a simple program to simulate the operation of the
grep command on Unix. Ask the user to enter a regular expression and
count the number of lines that matched the regular expression:
$ python grep.py
Enter a regular expression: ^Author
mbox.txt had 1798 lines that matched ^Author
$ python grep.py
Enter a regular expression: ^X-
mbox.txt had 14368 lines that matched ^X-
$ python grep.py
Enter a regular expression: java$
mbox.txt had 4175 lines that matched java$
Exercise 2: Write a program to look for lines of the form:
New Revision: 39772
Extract the number from each of the lines using a regular expressi on
and the findall() method. Compute the average of the numbers and
print out the average.
Enter file:mbox.txt
38444.0323119
Enter file:mbox-short.txt
39756.9259259
140 CHAPTER 11. REGULAR EXPRESSIONS
Chapter 12
Networked programs
While many of the examples in this book have focused on reading ﬁles and looking
for data in those ﬁles, there are many diﬀerent sources of information when one
considers the Internet.
In this chapter we will pretend to be a web browser and retrieve web pages using
the HyperText Transfer Protocol (HTTP). Then we will read through the web
page data and parse it.
12.1 HyperText Transfer Protocol - HTTP
The network protocol that powers the web is actually quite simple and there is buil t-
in support in Python called sockets which makes it very easy to make network
connections and retrieve data over those sockets in a Python program.
Asocket is much like a ﬁle, except that a single socket provides a two-way connec-
tion between two programs. You can both read from and write to the same s ocket.
If you write something to a socket, it is sent to the application at the other end
of the socket. If you read from the socket, you are given the data which the other
application has sent.
But if you try to read a socket when the program on the other end of the socket
has not sent any data, you just sit and wait. If the programs on both ends of
the socket simply wait for some data without sending anything, they will wait for
a very long time, so an important part of programs that communicate over the
Internet is to have some sort of protocol.
A protocol is a set of precise rules that determine who is to go ﬁrst, what they are
to do, and then what the responses are to that message, and who sends next, and
so on. In a sense the two applications at either end of the socket are doing a dance
and making sure not to step on each other’s toes.
There are many documents that describe these network protocols. The HyperText
Transfer Protocol is described in the following document:
https://www.w3.org/Protocols/rfc2616/rfc2616.txt
141
142 CHAPTER 12. NETWORKED PROGRAMS
This is a long and complex 176-page document with a lot of detail. If you ﬁnd
it interesting, feel free to read it all. But if you take a look around page 3 6 of
RFC2616 you will ﬁnd the syntax for the GET request. To request a document
from a web server, we make a connection to the www.pr4e.org server on port 80,
and then send a line of the form
GET http://data.pr4e.org/romeo.txt HTTP/1.0
where the second parameter is the web page we are requesting, and then we also
send a blank line. The web server will respond with some header information about
the document and a blank line followed by the document content.
12.2 The world’s simplest web browser
Perhaps the easiest way to show how the HTTP protocol works is to write a very
simple Python program that makes a connection to a web server and follows the
rules of the HTTP protocol to request a document and display what the server
sends back.
import socket
mysock =socket.socket(socket.AF_INET, socket.SOCK_STREAM)
mysock.connect(( /quotesingle.ts1data.pr4e.org/quotesingle.ts1 ,80))
cmd =/quotesingle.ts1GET http://data.pr4e.org/romeo.txt HTTP/1.0\r\n\r\n/quotesingle.ts1 .encode()
mysock.send(cmd)
while True:
data =mysock.recv( 512)
iflen(data) <1:
break
print(data.decode(),end =/quotesingle.ts1/quotesingle.ts1)
mysock.close()
# Code: http://www.py4e.com/code3/socket1.py
First the program makes a connection to port 80 on the server www.py4e.com .
Since our program is playing the role of the “web browser”, the HTTP protocol
says we must send the GET command followed by a blank line. \r\n signiﬁes
an EOL (end of line), so \r\n\r\n signiﬁes nothing between two EOL sequences.
That is the equivalent of a blank line.
Once we send that blank line, we write a loop that receives data in 512-character
chunks from the socket and prints the data out until there is no more data to read
(i.e., the recv() returns an empty string).
The program produces the following output:
HTTP/1.1 200 OK
Date: Wed, 11 Apr 2018 18:52:55 GMT
Server: Apache/2.4.7 (Ubuntu)
12.2. THE WORLD’S SIMPLEST WEB BROWSER 143
Your 
Program )*
C,-
Tsocket 
connect 
send 
recv www.py4e.com 
Web Pages 
.
.
.Port 80 
Figure 12.1: A Socket Connection
Last-Modified: Sat, 13 May 2017 11:22:22 GMT
ETag: "a7-54f6609245537"
Accept-Ranges: bytes
Content-Length: 167
Cache-Control: max-age=0, no-cache, no-store, must-revalidate
Pragma: no-cache
Expires: Wed, 11 Jan 1984 05:00:00 GMT
Connection: close
Content-Type: text/plain
But soft what light through yonder window breaks
It is the east and Juliet is the sun
Arise fair sun and kill the envious moon
Who is already sick and pale with grief
The output starts with headers which the web server sends to describe the docu-
ment. For example, the Content-Type header indicates that the document is a
plain text document ( text/plain ).
After the server sends us the headers, it adds a blank line to indicate the end of
the headers, and then sends the actual data of the ﬁle romeo.txt .
This example shows how to make a low-level network connection with sockets.
Sockets can be used to communicate with a web server or with a mail server or
many other kinds of servers. All that is needed is to ﬁnd the document which
describes the protocol and write the code to send and receive the data according
to the protocol.
However, since the protocol that we use most commonly is the HTTP web protocol,
Python has a special library speciﬁcally designed to support the HTTP protocol
for the retrieval of documents and data over the web.
One of the requirements for using the HTTP protocol is the need to send and
receive data as bytes objects, instead of strings. In the preceding example, the
encode() anddecode() methods convert strings into bytes objects and back again.
The next example uses b/quotesingle.ts1/quotesingle.ts1notation to specify that a variable should be stored as
a bytes object. encode() andb/quotesingle.ts1/quotesingle.ts1are equivalent.
144 CHAPTER 12. NETWORKED PROGRAMS
>>> b/quotesingle.ts1Hello world/quotesingle.ts1
b/quotesingle.ts1Hello world/quotesingle.ts1
>>> /quotesingle.ts1Hello world/quotesingle.ts1.encode()
b/quotesingle.ts1Hello world/quotesingle.ts1
12.3 Retrieving an image over HTTP
In the above example, we retrieved a plain text ﬁle which had newlines in the ﬁle
and we simply copied the data to the screen as the program ran. We can use a
similar program to retrieve an image across using HTTP. Instead of copy ing the
data to the screen as the program runs, we accumulate the data in a string, trim
oﬀ the headers, and then save the image data to a ﬁle as follows:
import socket
import time
HOST =/quotesingle.ts1data.pr4e.org/quotesingle.ts1
PORT =80
mysock =socket.socket(socket.AF_INET, socket.SOCK_STREAM)
mysock.connect((HOST, PORT))
mysock.sendall(b /quotesingle.ts1GET http://data.pr4e.org/cover3.jpg HTTP/1.0\r\n\r\n /quotesingle.ts1)
count =0
picture =b""
while True:
data =mysock.recv( 5120)
iflen(data) <1:break
#time.sleep(0.25)
count =count +len(data)
print(len(data), count)
picture =picture +data
mysock.close()
# Look for the end of the header (2 CRLF)
pos =picture.find(b "\r\n\r\n" )
print( /quotesingle.ts1Header length/quotesingle.ts1 , pos)
print(picture[:pos].decode())
# Skip past the header and save the picture data
picture =picture[pos +4:]
fhand =open( "stuff.jpg" ,"wb")
fhand.write(picture)
fhand.close()
# Code: http://www.py4e.com/code3/urljpeg.py
When the program runs, it produces the following output:
12.3. RETRIEVING AN IMAGE OVER HTTP 145
$ python urljpeg.py
5120 5120
5120 10240
4240 14480
5120 19600
...
5120 214000
3200 217200
5120 222320
5120 227440
3167 230607
Header length 393
HTTP/1.1 200 OK
Date: Wed, 11 Apr 2018 18:54:09 GMT
Server: Apache/2.4.7 (Ubuntu)
Last-Modified: Mon, 15 May 2017 12:27:40 GMT
ETag: "38342-54f8f2e5b6277"
Accept-Ranges: bytes
Content-Length: 230210
Vary: Accept-Encoding
Cache-Control: max-age=0, no-cache, no-store, must-revalidate
Pragma: no-cache
Expires: Wed, 11 Jan 1984 05:00:00 GMT
Connection: close
Content-Type: image/jpeg
You can see that for this url, the Content-Type header indicates that body of the
document is an image ( image/jpeg ). Once the program completes, you can view
the image data by opening the ﬁle stuff.jpg in an image viewer.
As the program runs, you can see that we don’t get 5120 characters each time
we call the recv() method. We get as many characters as have been transferred
across the network to us by the web server at the moment we call recv() . In this
example, we either get as few as 3200 characters each time we request up to 5120
characters of data.
Your results may be diﬀerent depending on your network speed. Also note that on
the last call to recv() we get 3167 bytes, which is the end of the stream, and in
the next call to recv() we get a zero-length string that tells us that the server has
called close() on its end of the socket and there is no more data forthcoming.
We can slow down our successive recv() calls by uncommenting the call to
time.sleep() . This way, we wait a quarter of a second after each call so that
the server can “get ahead” of us and send more data to us before we call recv()
again. With the delay, in place the program executes as follows:
$ python urljpeg.py
5120 5120
5120 10240
5120 15360
...
5120 225280
5120 230400
207 230607
Header length 393
146 CHAPTER 12. NETWORKED PROGRAMS
HTTP/1.1 200 OK
Date: Wed, 11 Apr 2018 21:42:08 GMT
Server: Apache/2.4.7 (Ubuntu)
Last-Modified: Mon, 15 May 2017 12:27:40 GMT
ETag: "38342-54f8f2e5b6277"
Accept-Ranges: bytes
Content-Length: 230210
Vary: Accept-Encoding
Cache-Control: max-age=0, no-cache, no-store, must-revalidate
Pragma: no-cache
Expires: Wed, 11 Jan 1984 05:00:00 GMT
Connection: close
Content-Type: image/jpeg
Now other than the ﬁrst and last calls to recv() , we now get 5120 characters each
time we ask for new data.
There is a buﬀer between the server making send() requests and our application
making recv() requests. When we run the program with the delay in place, at
some point the server might ﬁll up the buﬀer in the socket and be forced to pause
until our program starts to empty the buﬀer. The pausing of either the sending
application or the receiving application is called “ﬂow control.”
12.4 Retrieving web pages with urllib
While we can manually send and receive data over HTTP using the socket library,
there is a much simpler way to perform this common task in Python by using the
urllib library.
Using urllib , you can treat a web page much like a ﬁle. You simply indicate
which web page you would like to retrieve and urllib handles all of the HTTP
protocol and header details.
The equivalent code to read the romeo.txt ﬁle from the web using urllib is as
follows:
import urllib.request
fhand =urllib.request.urlopen( /quotesingle.ts1http://data.pr4e.org/romeo.txt/quotesingle.ts1 )
for line infhand:
print(line.decode().strip())
# Code: http://www.py4e.com/code3/urllib1.py
Once the web page has been opened with urllib.urlopen , we can treat it like a
ﬁle and read through it using a forloop.
When the program runs, we only see the output of the contents of the ﬁle. The
headers are still sent, but the urllib code consumes the headers and only returns
the data to us.
12.5. READING BINARY FILES USING URLLIB 147
But soft what light through yonder window breaks
It is the east and Juliet is the sun
Arise fair sun and kill the envious moon
Who is already sick and pale with grief
As an example, we can write a program to retrieve the data for romeo.txt and
compute the frequency of each word in the ﬁle as follows:
import urllib.request, urllib.parse, urllib.error
fhand =urllib.request.urlopen( /quotesingle.ts1http://data.pr4e.org/romeo.txt/quotesingle.ts1 )
counts =dict()
for line infhand:
words =line.decode().split()
forword inwords:
counts[word] =counts.get(word, 0)+1
print(counts)
# Code: http://www.py4e.com/code3/urlwords.py
Again, once we have opened the web page, we can read it like a local ﬁle.
12.5 Reading binary ﬁles using urllib
Sometimes you want to retrieve a non-text (or binary) ﬁle such as an image or
video ﬁle. The data in these ﬁles is generally not useful to print out, but you can
easily make a copy of a URL to a local ﬁle on your hard disk using urllib .
The pattern is to open the URL and use read to download the entire contents of
the document into a string variable ( img) then write that information to a local
ﬁle as follows:
import urllib.request, urllib.parse, urllib.error
img =urllib.request.urlopen( /quotesingle.ts1http://data.pr4e.org/cover3.jpg/quotesingle.ts1 ).read()
fhand =open( /quotesingle.ts1cover3.jpg/quotesingle.ts1 ,/quotesingle.ts1wb/quotesingle.ts1)
fhand.write(img)
fhand.close()
# Code: http://www.py4e.com/code3/curl1.py
This program reads all of the data in at once across the network and stores it in the
variable imgin the main memory of your computer, then opens the ﬁle cover.jpg
and writes the data out to your disk. The wbargument for open() opens a binary
ﬁle for writing only. This program will work if the size of the ﬁle is less t han the
size of the memory of your computer.
However if this is a large audio or video ﬁle, this program may crash or at leas t
run extremely slowly when your computer runs out of memory. In order to avoid
148 CHAPTER 12. NETWORKED PROGRAMS
running out of memory, we retrieve the data in blocks (or buﬀers) and then write
each block to your disk before retrieving the next block. This way the program ca n
read any size ﬁle without using up all of the memory you have in your computer.
import urllib.request, urllib.parse, urllib.error
img =urllib.request.urlopen( /quotesingle.ts1http://data.pr4e.org/cover3.jpg/quotesingle.ts1 )
fhand =open( /quotesingle.ts1cover3.jpg/quotesingle.ts1 ,/quotesingle.ts1wb/quotesingle.ts1)
size =0
while True:
info =img.read( 100000 )
iflen(info) <1:break
size =size +len(info)
fhand.write(info)
print(size, /quotesingle.ts1characters copied./quotesingle.ts1 )
fhand.close()
# Code: http://www.py4e.com/code3/curl2.py
In this example, we read only 100,000 characters at a time and then write thos e
characters to the cover.jpg ﬁle before retrieving the next 100,000 characters of
data from the web.
This program runs as follows:
python curl2.py
230210 characters copied.
12.6 Parsing HTML and scraping the web
One of the common uses of the urllib capability in Python is to scrape the web.
Web scraping is when we write a program that pretends to be a web browser and
retrieves pages, then examines the data in those pages looking for patterns.
As an example, a search engine such as Google will look at the source of one web
page and extract the links to other pages and retrieve those pages, extracting links ,
and so on. Using this technique, Google spiders its way through nearly all of the
pages on the web.
Google also uses the frequency of links from pages it ﬁnds to a particular page as
one measure of how “important” a page is and how high the page should appear
in its search results.
12.7 Parsing HTML using regular expressions
One simple way to parse HTML is to use regular expressions to repeatedly search
for and extract substrings that match a particular pattern.
Here is a simple web page:
12.7. PARSING HTML USING REGULAR EXPRESSIONS 149
<h1>The First Page </h1>
<p>
If you like, you can switch to the
<ahref= "http://www.dr-chuck.com/page2.htm" >
Second Page </a>.
</p>
We can construct a well-formed regular expression to match and extract the link
values from the above text as follows:
href="http[s]?://.+?"
Our regular expression looks for strings that start with “href="http://” o r
“href="https://”, followed by one or more characters ( .+?), followed by another
double quote. The question mark behind the [s]? indicates to search for the
string “http” followed by zero or one “s”.
The question mark added to the .+? indicates that the match is to be done in
a “non-greedy” fashion instead of a “greedy” fashion. A non-greedy match tries
to ﬁnd the smallest possible matching string and a greedy match tries to ﬁnd the
largest possible matching string.
We add parentheses to our regular expression to indicate which part of our matched
string we would like to extract, and produce the following program:
# Search for lines that start with From and have an at sign
import urllib.request, urllib.parse, urllib.error
import re
import ssl
# Ignore SSL certificate errors
ctx =ssl.create_default_context()
ctx.check_hostname =False
ctx.verify_mode =ssl.CERT_NONE
url =input( /quotesingle.ts1Enter - /quotesingle.ts1 )
html =urllib.request.urlopen(url).read()
links =re.findall(b /quotesingle.ts1href="(http[s]?://.*?)"/quotesingle.ts1 , html)
for link inlinks:
print(link.decode())
# Code: http://www.py4e.com/code3/urlregex.py
Thessllibrary allows this program to access web sites that strictly enforce HTTPS.
Theread method returns HTML source code as a bytes object instead of returning
an HTTPResponse object. The findall regular expression method will give us a
list of all of the strings that match our regular expression, returning only the link
text between the double quotes.
When we run the program and input a URL, we get the following output:
150 CHAPTER 12. NETWORKED PROGRAMS
Enter - https://docs.python.org
https://docs.python.org/3/index.html
https://www.python.org/
https://docs.python.org/3.8/
https://docs.python.org/3.7/
https://docs.python.org/3.5/
https://docs.python.org/2.7/
https://www.python.org/doc/versions/
https://www.python.org/dev/peps/
https://wiki.python.org/moin/BeginnersGuide
https://wiki.python.org/moin/PythonBooks
https://www.python.org/doc/av/
https://www.python.org/
https://www.python.org/psf/donations/
http://sphinx.pocoo.org/
Regular expressions work very nicely when your HTML is well formatted and
predictable. But since there are a lot of “broken” HTML pages out there, a solution
only using regular expressions might either miss some valid links or end up with
bad data.
This can be solved by using a robust HTML parsing library.
12.8 Parsing HTML using BeautifulSoup
Even though HTML looks like XML1and some pages are carefully constructed to
be XML, most HTML is generally broken in ways that cause an XML parser to
reject the entire page of HTML as improperly formed.
There are a number of Python libraries which can help you parse HTML and
extract data from the pages. Each of the libraries has its strengths and weakness es
and you can pick one based on your needs.
As an example, we will simply parse some HTML input and extract links using
theBeautifulSoup library. BeautifulSoup tolerates highly ﬂawed HTML and still
lets you easily extract the data you need. You can download and install the
BeautifulSoup code from:
https://pypi.python.org/pypi/beautifulsoup4
Information on installing BeautifulSoup with the Python Package Index too lpip
is available at:
https://packaging.python.org/tutorials/installing-packages/
We will use urllib to read the page and then use BeautifulSoup to extract the
href attributes from the anchor ( a) tags.
# To run this, you can install BeautifulSoup
# https://pypi.python.org/pypi/beautifulsoup4
# Or download the file
1The XML format is described in the next chapter.
12.8. PARSING HTML USING BEAUTIFULSOUP 151
# http://www.py4e.com/code3/bs4.zip
# and unzip it in the same directory as this file
import urllib.request, urllib.parse, urllib.error
from bs4 import BeautifulSoup
import ssl
# Ignore SSL certificate errors
ctx =ssl.create_default_context()
ctx.check_hostname =False
ctx.verify_mode =ssl.CERT_NONE
url =input( /quotesingle.ts1Enter - /quotesingle.ts1 )
html =urllib.request.urlopen(url, context =ctx).read()
soup =BeautifulSoup(html, /quotesingle.ts1html.parser/quotesingle.ts1 )
# Retrieve all of the anchor tags
tags =soup( /quotesingle.ts1a/quotesingle.ts1)
for tagintags:
print(tag.get( /quotesingle.ts1href/quotesingle.ts1 ,None))
# Code: http://www.py4e.com/code3/urllinks.py
The program prompts for a web address, then opens the web page, reads the data
and passes the data to the BeautifulSoup parser, and then retrieves all of the
anchor tags and prints out the href attribute for each tag.
When the program runs, it produces the following output:
Enter - https://docs.python.org
genindex.html
py-modindex.html
https://www.python.org/
#
whatsnew/3.6.html
whatsnew/index.html
tutorial/index.html
library/index.html
reference/index.html
using/index.html
howto/index.html
installing/index.html
distributing/index.html
extending/index.html
c-api/index.html
faq/index.html
py-modindex.html
genindex.html
glossary.html
search.html
contents.html
bugs.html
about.html
152 CHAPTER 12. NETWORKED PROGRAMS
license.html
copyright.html
download.html
https://docs.python.org/3.8/
https://docs.python.org/3.7/
https://docs.python.org/3.5/
https://docs.python.org/2.7/
https://www.python.org/doc/versions/
https://www.python.org/dev/peps/
https://wiki.python.org/moin/BeginnersGuide
https://wiki.python.org/moin/PythonBooks
https://www.python.org/doc/av/
genindex.html
py-modindex.html
https://www.python.org/
#
copyright.html
https://www.python.org/psf/donations/
bugs.html
http://sphinx.pocoo.org/
This list is much longer because some HTML anchor tags are relative paths (e. g.,
tutorial/index.html) or in-page references (e.g., ‘#’) that do not include “http:// ”
or “https://”, which was a requirement in our regular expression.
You can use also BeautifulSoup to pull out various parts of each tag:
# To run this, you can install BeautifulSoup
# https://pypi.python.org/pypi/beautifulsoup4
# Or download the file
# http://www.py4e.com/code3/bs4.zip
# and unzip it in the same directory as this file
from urllib.request import urlopen
from bs4 import BeautifulSoup
import ssl
# Ignore SSL certificate errors
ctx =ssl.create_default_context()
ctx.check_hostname =False
ctx.verify_mode =ssl.CERT_NONE
url =input( /quotesingle.ts1Enter - /quotesingle.ts1 )
html =urlopen(url, context =ctx).read()
soup =BeautifulSoup(html, "html.parser" )
# Retrieve all of the anchor tags
tags =soup( /quotesingle.ts1a/quotesingle.ts1)
for tagintags:
# Look at the parts of a tag
print( /quotesingle.ts1TAG:/quotesingle.ts1 , tag)
12.9. BONUS SECTION FOR UNIX / LINUX USERS 153
print( /quotesingle.ts1URL:/quotesingle.ts1 , tag.get( /quotesingle.ts1href/quotesingle.ts1 ,None))
print( /quotesingle.ts1Contents:/quotesingle.ts1 , tag.contents[ 0])
print( /quotesingle.ts1Attrs:/quotesingle.ts1 , tag.attrs)
# Code: http://www.py4e.com/code3/urllink2.py
python urllink2.py
Enter - http://www.dr-chuck.com/page1.htm
TAG: <a href="http://www.dr-chuck.com/page2.htm">
Second Page</a>
URL: http://www.dr-chuck.com/page2.htm
Content: [/quotesingle.ts1\nSecond Page/quotesingle.ts1]
Attrs: [(/quotesingle.ts1href/quotesingle.ts1, /quotesingle.ts1http://www.dr-chuck.com/page2.htm/quotesingle.ts1)]
html.parser is the HTML parser included in the standard Python 3 library. In-
formation on other HTML parsers is available at:
http://www.crummy.com/software/BeautifulSoup/bs4/doc/#installing-a- parser
These examples only begin to show the power of BeautifulSoup when it comes to
parsing HTML.
12.9 Bonus section for Unix / Linux users
If you have a Linux, Unix, or Macintosh computer, you probably have commands
built in to your operating system that retrieves both plain text and binary ﬁles
using the HTTP or File Transfer (FTP) protocols. One of these commands is
curl:
$curl -O http://www.py4e.com/cover.jpg
The command curl is short for “copy URL” and so the two examples listed earlier
to retrieve binary ﬁles with urllib are cleverly named curl1.py andcurl2.py
onwww.py4e.com/code3 as they implement similar functionality to the curl com-
mand. There is also a curl3.py sample program that does this task a little more
eﬀectively, in case you actually want to use this pattern in a program you ar e
writing.
A second command that functions very similarly is wget:
$wget http://www.py4e.com/cover.jpg
Both of these commands make retrieving webpages and remote ﬁles a simple task.
12.10 Glossary
BeautifulSoup A Python library for parsing HTML documents and extracting
data from HTML documents that compensates for most of the imperfections
in the HTML that browsers generally ignore. You can download the Beauti-
fulSoup code from www.crummy.com .
154 CHAPTER 12. NETWORKED PROGRAMS
port A number that generally indicates which application you are contacting when
you make a socket connection to a server. As an example, web traﬃc usually
uses port 80 while email traﬃc uses port 25.
scrape When a program pretends to be a web browser and retrieves a web page,
then looks at the web page content. Often programs are following the links
in one page to ﬁnd the next page so they can traverse a network of pages or
a social network.
socket A network connection between two applications where the applications can
send and receive data in either direction.
spider The act of a web search engine retrieving a page and then all the pages
linked from a page and so on until they have nearly all of the pages on the
Internet which they use to build their search index.
12.11 Exercises
Exercise 1: Change the socket program socket1.py to prompt the user
for the URL so it can read any web page. You can use split(/quotesingle.ts1//quotesingle.ts1) to
break the URL into its component parts so you can extract the host
name for the socket connect call. Add error checking using try and
except to handle the condition where the user enters an improperly
formatted or non-existent URL.
Exercise 2: Change your socket program so that it counts the numb er
of characters it has received and stops displaying any text after i t has
shown 3000 characters. The program should retrieve the entire do cu-
ment and count the total number of characters and display the count
of the number of characters at the end of the document.
Exercise 3: Use urllib to replicate the previous exercise of (1) retrieving
the document from a URL, (2) displaying up to 3000 characters, and
(3) counting the overall number of characters in the document. Don’ t
worry about the headers for this exercise, simply show the ﬁrst 30 00
characters of the document contents.
Exercise 4: Change the urllinks.py program to extract and count para-
graph (p) tags from the retrieved HTML document and display the
count of the paragraphs as the output of your program. Do not disp lay
the paragraph text, only count them. Test your program on several
small web pages as well as some larger web pages.
Exercise 5: (Advanced) Change the socket program so that it only shows
data after the headers and a blank line have been received. Rememb er
that recv receives characters (newlines and all), not lines.
Chapter 13
Using Web Services
Once it became easy to retrieve documents and parse documents over HTTP using
programs, it did not take long to develop an approach where we started producing
documents that were speciﬁcally designed to be consumed by other programs (i.e.,
not HTML to be displayed in a browser).
There are two common formats that we use when exchanging data across the web.
eXtensible Markup Language (XML) has been in use for a very long time and
is best suited for exchanging document-style data. When programs just want to
exchange dictionaries, lists, or other internal information with each other , they
use JavaScript Object Notation (JSON) (see www.json.org ). We will look at both
formats.
13.1 eXtensible Markup Language - XML
XML looks very similar to HTML, but XML is more structured than HTML. Her e
is a sample of an XML document:
<person>
<name> Chuck </name>
<phone type= "intl" >
+1 734 303 4456
</phone>
<email hide= "yes" />
</person>
Each pair of opening (e.g., <person> ) and closing tags (e.g., <\person> ) represents
aelement ornode with the same name as the tag (e.g., person ). Each element
can have some text, some attributes (e.g., hide), and other nested elements. If
an XML element is empty (i.e., has no content), then it may be depicted by a
self-closing tag (e.g., <email /> ).
Often it is helpful to think of an XML document as a tree structure where there is
a top element (here: person ), and other tags (e.g., phone ) are drawn as children
of their parent elements.
155
156 CHAPTER 13. USING WEB SERVICES
name person 
Chuck phone 
+1 734 
303 4456 type=intl phone 
hide=yes 
Figure 13.1: A Tree Representation of XML
13.2 Parsing XML
Here is a simple application that parses some XML and extracts some data elemen ts
from the XML:
import xml.etree.ElementTree as ET
data =/quotesingle.ts1/quotesingle.ts1/quotesingle.ts1
<person>
<name>Chuck</name>
<phone type="intl">
+1 734 303 4456
</phone>
<email hide="yes" />
</person>/quotesingle.ts1/quotesingle.ts1/quotesingle.ts1
tree =ET.fromstring(data)
print( /quotesingle.ts1Name:/quotesingle.ts1 , tree.find( /quotesingle.ts1name/quotesingle.ts1 ).text)
print( /quotesingle.ts1Attr:/quotesingle.ts1 , tree.find( /quotesingle.ts1email/quotesingle.ts1 ).get( /quotesingle.ts1hide/quotesingle.ts1 ))
# Code: http://www.py4e.com/code3/xml1.py
The triple single quote ( /quotesingle.ts1/quotesingle.ts1/quotesingle.ts1), as well as the triple double quote ( """), allow for
the creation of strings that span multiple lines.
Calling fromstring converts the string representation of the XML into a “tree” of
XML elements. When the XML is in a tree, we have a series of methods we can
call to extract portions of data from the XML string. The find function searches
through the XML tree and retrieves the element that matches the speciﬁed tag.
Name: Chuck
Attr: yes
Using an XML parser such as ElementTree has the advantage that while the
XML in this example is quite simple, it turns out there are many rules regarding
13.3. LOOPING THROUGH NODES 157
valid XML, and using ElementTree allows us to extract data from XML without
worrying about the rules of XML syntax.
13.3 Looping through nodes
Often the XML has multiple nodes and we need to write a loop to process all of
the nodes. In the following program, we loop through all of the user nodes:
import xml.etree.ElementTree as ET
input =/quotesingle.ts1/quotesingle.ts1/quotesingle.ts1
<stuff>
<users>
<user x="2">
<id>001</id>
<name>Chuck</name>
</user>
<user x="7">
<id>009</id>
<name>Brent</name>
</user>
</users>
</stuff>/quotesingle.ts1/quotesingle.ts1/quotesingle.ts1
stuff =ET.fromstring(input)
lst =stuff.findall( /quotesingle.ts1users/user/quotesingle.ts1 )
print( /quotesingle.ts1User count:/quotesingle.ts1 , len(lst))
for item inlst:
print( /quotesingle.ts1Name/quotesingle.ts1 , item.find( /quotesingle.ts1name/quotesingle.ts1 ).text)
print( /quotesingle.ts1Id/quotesingle.ts1, item.find( /quotesingle.ts1id/quotesingle.ts1).text)
print( /quotesingle.ts1Attribute/quotesingle.ts1 , item.get( /quotesingle.ts1x/quotesingle.ts1))
# Code: http://www.py4e.com/code3/xml2.py
The findall method retrieves a Python list of subtrees that represent the user
structures in the XML tree. Then we can write a forloop that looks at each of
the user nodes, and prints the name andidtext elements as well as the xattribute
from the user node.
User count: 2
Name Chuck
Id 001
Attribute 2
Name Brent
Id 009
Attribute 7
158 CHAPTER 13. USING WEB SERVICES
It is important to include all parent level elements in the findall statement expect
for the top level element (e.g., users/user ). Otherwise, Python will not ﬁnd any
desired nodes.
import xml.etree.ElementTree as ET
input =/quotesingle.ts1/quotesingle.ts1/quotesingle.ts1
<stuff>
<users>
<user x="2">
<id>001</id>
<name>Chuck</name>
</user>
<user x="7">
<id>009</id>
<name>Brent</name>
</user>
</users>
</stuff>/quotesingle.ts1/quotesingle.ts1/quotesingle.ts1
stuff =ET.fromstring(input)
lst =stuff.findall( /quotesingle.ts1users/user/quotesingle.ts1 )
print( /quotesingle.ts1User count:/quotesingle.ts1 , len(lst))
lst2 =stuff.findall( /quotesingle.ts1user/quotesingle.ts1 )
print( /quotesingle.ts1User count:/quotesingle.ts1 , len(lst2))
lststores all user elements that are nested within their users parent. lst2 looks
foruser elements that are not nested within the top level stuff element where
there are none.
User count: 2
User count: 0
13.4 JavaScript Object Notation - JSON
The JSON format was inspired by the object and array format used in the
JavaScript language. But since Python was invented before JavaScript, Python’s
syntax for dictionaries and lists inﬂuenced the syntax of JSON. So the format of
JSON is nearly identical to a combination of Python lists and dictionaries.
Here is a JSON encoding that is roughly equivalent to the simple XML from above:
{
"name" :"Chuck" ,
"phone" : {
"type" :"intl" ,
"number" :"+1 734 303 4456"
13.5. PARSING JSON 159
},
"email" : {
"hide" :"yes"
}
}
You will notice some diﬀerences. First, in XML, we can add attributes like “i ntl”
to the “phone” tag. In JSON, we simply have key-value pairs. Also the XML
“person” tag is gone, replaced by a set of outer curly braces.
In general, JSON structures are simpler than XML because JSON has fewer ca-
pabilities than XML. But JSON has the advantage that it maps directly to some
combination of dictionaries and lists. And since nearly all programming langua ges
have something equivalent to Python’s dictionaries and lists, JSON is a very nat-
ural format to have two cooperating programs exchange data.
JSON is quickly becoming the format of choice for nearly all data exchange between
applications because of its relative simplicity compared to XML.
13.5 Parsing JSON
We construct our JSON by nesting dictionaries and lists as needed. In this example,
we represent a list of users where each user is a set of key-value pairs (i.e., a
dictionary). So we have a list of dictionaries.
In the following program, we use the built-in json library to parse the JSON and
read through the data. Compare this closely to the equivalent XML data and code
above. The JSON has less detail, so we must know in advance that we are getting a
list and that the list is of users and each user is a set of key-value pairs. The JSON
is more succinct (an advantage) but also is less self-describing (a disadvantage).
import json
data =/quotesingle.ts1/quotesingle.ts1/quotesingle.ts1
[
{ "id" : "001",
"x" : "2",
"name" : "Chuck"
} ,
{ "id" : "009",
"x" : "7",
"name" : "Brent"
}
]/quotesingle.ts1/quotesingle.ts1/quotesingle.ts1
info =json.loads(data)
print( /quotesingle.ts1User count:/quotesingle.ts1 , len(info))
for item ininfo:
print( /quotesingle.ts1Name/quotesingle.ts1 , item[ /quotesingle.ts1name/quotesingle.ts1 ])
160 CHAPTER 13. USING WEB SERVICES
print( /quotesingle.ts1Id/quotesingle.ts1, item[ /quotesingle.ts1id/quotesingle.ts1])
print( /quotesingle.ts1Attribute/quotesingle.ts1 , item[ /quotesingle.ts1x/quotesingle.ts1])
# Code: http://www.py4e.com/code3/json2.py
If you compare the code to extract data from the parsed JSON and XML you will
see that what we get from json.loads() is a Python list which we traverse with
aforloop, and each item within that list is a Python dictionary. Once the JSON
has been parsed, we can use the Python index operator to extract the various bits
of data for each user. We don’t have to use the JSON library to dig through the
parsed JSON, since the returned data is simply native Python structures.
The output of this program is exactly the same as the XML version above.
User count: 2
Name Chuck
Id 001
Attribute 2
Name Brent
Id 009
Attribute 7
In general, there is an industry trend away from XML and towards JSON for web
services. Because the JSON is simpler and more directly maps to native data struc-
tures we already have in programming languages, the parsing and data extraction
code is usually simpler and more direct when using JSON. But XML is more self-
descriptive than JSON and so there are some applications where XML retains an
advantage. For example, most word processors store documents internally usi ng
XML rather than JSON.
13.6 Application Programming Interfaces
We now have the ability to exchange data between applications using HyperText
Transport Protocol (HTTP) and a way to represent complex data that we are send-
ing back and forth between these applications using eXtensible Markup Language
(XML) or JavaScript Object Notation (JSON).
The next step is to begin to deﬁne and document “contracts” between applications
using these techniques. The general name for these application-to-application con-
tracts is Application Program Interfaces (APIs). When we use an API, generally
one program makes a set of services available for use by other applications and
publishes the APIs (i.e., the “rules”) that must be followed to access the services
provided by the program.
When we begin to build our programs where the functionality of our program
includes access to services provided by other programs, we call the approach a
Service-oriented architecture (SOA). A SOA approach is one where our overall
application makes use of the services of other applications. A non-SOA approach
is where the application is a single standalone application which contains all of the
code necessary to implement the application.
13.7. SECURITY AND API USAGE 161
We see many examples of SOA when we use the web. We can go to a single web
site and book air travel, hotels, and automobiles all from a single site. The data
for hotels is not stored on the airline computers. Instead, the airline computers
contact the services on the hotel computers and retrieve the hotel data and present
it to the user. When the user agrees to make a hotel reservation using the airline
site, the airline site uses another web service on the hotel systems to actually m ake
the reservation. And when it comes time to charge your credit card for the whole
transaction, still other computers become involved in the process.
Auto 
Rental 
Service Hotel 
Reservation 
Service Airline 
Reservation 
Service 
Travel 
Application API 
API API 
Figure 13.2: Service-oriented architecture
A Service-oriented architecture has many advantages, including: (1) we always
maintain only one copy of data (this is particularly important for thing s like hotel
reservations where we do not want to over-commit) and (2) the owners of the data
can set the rules about the use of their data. With these advantages, an SOA
system must be carefully designed to have good performance and meet the user’s
needs.
When an application makes a set of services in its API available over the web, we
call these web services .
13.7 Security and API usage
It is quite common that you need an API key to make use of a vendor’s API. The
general idea is that they want to know who is using their services and how much
each user is using. Perhaps they have free and pay tiers of their services or have a
policy that limits the number of requests that a single individual can make during
a particular time period.
Sometimes once you get your API key, you simply include the key as part of POST
data or perhaps as a parameter on the URL when calling the API.
162 CHAPTER 13. USING WEB SERVICES
Other times, the vendor wants increased assurance of the source of the requests
and so they expect you to send cryptographically signed messages using shared
keys and secrets. A very common technology that is used to sign requests over
the Internet is called OAuth . You can read more about the OAuth protocol at
www.oauth.net .
Thankfully there are a number of convenient and free OAuth libraries so you can
avoid writing an OAuth implementation from scratch by reading the speciﬁcat ion.
These libraries are of varying complexity and have varying degrees of richness. T he
OAuth web site has information about various OAuth libraries.
13.8 Glossary
API Application Program Interface - A contract between applications that deﬁnes
the patterns of interaction between two application components.
ElementTree A built-in Python library used to parse XML data.
JSON JavaScript Object Notation. A format that allows for the markup of struc-
tured data based on the syntax of JavaScript Objects.
SOA Service-Oriented Architecture. When an application is made of components
connected across a network.
XML eXtensible Markup Language. A format that allows for the markup of
structured data.
13.9 Application 1: Google geocoding web service
Google has an excellent web service that allows us to make use of their large
database of geographic information. We can submit a geographical search stri ng
like “Ann Arbor, MI” to their geocoding API and have Google return its best
guess as to where on a map we might ﬁnd our search string and tell us about the
landmarks nearby.
The geocoding service is free but rate limited so you cannot make unlimited use of
the API in a commercial application. But if you have some survey data where an
end user has entered a location in a free-format input box, you can use this API
to clean up your data quite nicely.
When you are using a free API like Google’s geocoding API, you need to be respectful
in your use of these resources. If too many people abuse the se rvice, Google might
drop or signiﬁcantly curtail its free service.
You can read the online documentation for this service, but it is quite simple and
you can even test it using a browser by typing the following URL into your brows er:
http://maps.googleapis.com/maps/api/geocode/json?address=Ann+Arbor%2C+M I
Make sure to unwrap the URL and remove any spaces from the URL before pasting
it into your browser.
The following is a simple application to prompt the user for a search string, call
the Google geocoding API, and extract information from the returned JSON.
13.9. APPLICATION 1: GOOGLE GEOCODING WEB SERVICE 163
import urllib.request, urllib.parse, urllib.error
import json
import ssl
api_key =False
# If you have a Google Places API key, enter it here
# api_key = /quotesingle.ts1AIzaSy___IDByT70/quotesingle.ts1
ifapi_key isFalse :
api_key =42
serviceurl =/quotesingle.ts1http://py4e-data.dr-chuck.net/json?/quotesingle.ts1
else :
serviceurl =/quotesingle.ts1https://maps.googleapis.com/maps/api/geocode/json? /quotesingle.ts1
# Ignore SSL certificate errors
ctx =ssl.create_default_context()
ctx.check_hostname =False
ctx.verify_mode =ssl.CERT_NONE
while True:
address =input( /quotesingle.ts1Enter location: /quotesingle.ts1 )
iflen(address) <1:break
parms =dict()
parms[ /quotesingle.ts1address/quotesingle.ts1 ]=address
ifapi_key is not False : parms[ /quotesingle.ts1key/quotesingle.ts1 ]=api_key
url=serviceurl +urllib.parse.urlencode(parms)
print( /quotesingle.ts1Retrieving/quotesingle.ts1 , url)
uh=urllib.request.urlopen(url, context =ctx)
data =uh.read().decode()
print( /quotesingle.ts1Retrieved/quotesingle.ts1 , len(data), /quotesingle.ts1characters/quotesingle.ts1 )
try:
js=json.loads(data)
except :
js=None
ifnot jsor/quotesingle.ts1status/quotesingle.ts1 not in jsorjs[/quotesingle.ts1status/quotesingle.ts1 ]!=/quotesingle.ts1OK/quotesingle.ts1:
print( /quotesingle.ts1==== Failure To Retrieve ====/quotesingle.ts1 )
print(data)
continue
print(json.dumps(js, indent =4))
lat=js[/quotesingle.ts1results/quotesingle.ts1 ][0][/quotesingle.ts1geometry/quotesingle.ts1 ][/quotesingle.ts1location/quotesingle.ts1 ][/quotesingle.ts1lat/quotesingle.ts1 ]
lng=js[/quotesingle.ts1results/quotesingle.ts1 ][0][/quotesingle.ts1geometry/quotesingle.ts1 ][/quotesingle.ts1location/quotesingle.ts1 ][/quotesingle.ts1lng/quotesingle.ts1 ]
print( /quotesingle.ts1lat/quotesingle.ts1 , lat, /quotesingle.ts1lng/quotesingle.ts1 , lng)
location =js[/quotesingle.ts1results/quotesingle.ts1 ][0][/quotesingle.ts1formatted_address/quotesingle.ts1 ]
print(location)
164 CHAPTER 13. USING WEB SERVICES
# Code: http://www.py4e.com/code3/geojson.py
The program takes the search string and constructs a URL with the search stri ng
as a properly encoded parameter and then uses urllib to retrieve the text from
the Google geocoding API. Unlike a ﬁxed web page, the data we get depends on
the parameters we send and the geographical data stored in Google’s servers.
Once we retrieve the JSON data, we parse it with the json library and do a few
checks to make sure that we received good data, then extract the information tha t
we are looking for.
The output of the program is as follows (some of the returned JSON has been
removed):
$ python3 geojson.py
Enter location: Ann Arbor, MI
Retrieving http://maps.googleapis.com/maps/api/
geocode/json?address=Ann+Arbor%2C+MI
Retrieved 1669 characters
{
"status" :"OK",
"results" :[
{
"geometry" : {
"location_type" :"APPROXIMATE" ,
"location" : {
"lat" :42.2808256 ,
"lng" :-83.7430378
}
},
"address_components" :[
{
"long_name" :"Ann Arbor" ,
"types" :[
"locality" ,
"political"
],
"short_name" :"Ann Arbor"
}
],
"formatted_address" :"Ann Arbor, MI, USA" ,
"types" :[
"locality" ,
"political"
]
}
]
}
lat 42.2808256 lng -83.7430378
Ann Arbor, MI, USA
13.10. APPLICATION 2: TWITTER 165
Enter location:
You can download www.py4e.com/code3/geoxml.py to explore the XML variant
of the Google geocoding API.
Exercise 1: Change either geojson.py orgeoxml.py to print out the two-
character country code from the retrieved data. Add error checking so
your program does not traceback if the country code is not there. O nce
you have it working, search for “Atlantic Ocean” and make sure it can
handle locations that are not in any country.
13.10 Application 2: Twitter
As the Twitter API became increasingly valuable, Twitter went from an open and
public API to an API that required the use of OAuth signatures on each API
request.
For this next sample program, download the ﬁles twurl.py ,hidden.py ,oauth.py ,
andtwitter1.py from www.py4e.com/code and put them all in a folder on your
computer.
To make use of these programs you will need to have a Twitter account, and
authorize your Python code as an application, set up a key, secret, token and
token secret. You will edit the ﬁle hidden.py and put these four strings into the
appropriate variables in the ﬁle:
# Keep this file separate
# https://apps.twitter.com/
# Create new App and get the four strings
def oauth():
return {"consumer_key" :"h7Lu...Ng" ,
"consumer_secret" :"dNKenAC3New...mmn7Q" ,
"token_key" :"10185562-eibxCp9n2...P4GEQQOSGI" ,
"token_secret" :"H0ycCFemmC4wyf1...qoIpBo" }
# Code: http://www.py4e.com/code3/hidden.py
The Twitter web service are accessed using a URL like this:
https://api.twitter.com/1.1/statuses/user_timeline.json
But once all of the security information has been added, the URL will look more
like:
https://api.twitter.com/1.1/statuses/user_timeline.json?count=2
&oauth_version=1.0&oauth_token=101...SGI&screen_name=drchuck
&oauth_nonce=09239679&oauth_timestamp=1380395644
&oauth_signature=rLK...BoD&oauth_consumer_key=h7Lu...GNg
&oauth_signature_method=HMAC-SHA1
166 CHAPTER 13. USING WEB SERVICES
You can read the OAuth speciﬁcation if you want to know more about the meaning
of the various parameters that are added to meet the security requirements of
OAuth.
For the programs we run with Twitter, we hide all the complexity in the ﬁles
oauth.py andtwurl.py . We simply set the secrets in hidden.py and then send the
desired URL to the twurl.augment() function and the library code adds all the
necessary parameters to the URL for us.
This program retrieves the timeline for a particular Twitter user and returns it t o
us in JSON format in a string. We simply print the ﬁrst 250 characters of the
string:
import urllib.request, urllib.parse, urllib.error
import twurl
import ssl
# https://apps.twitter.com/
# Create App and get the four strings, put them in hidden.py
TWITTER_URL =/quotesingle.ts1https://api.twitter.com/1.1/statuses/user_timeline .json/quotesingle.ts1
# Ignore SSL certificate errors
ctx =ssl.create_default_context()
ctx.check_hostname =False
ctx.verify_mode =ssl.CERT_NONE
while True:
print( /quotesingle.ts1/quotesingle.ts1)
acct =input( /quotesingle.ts1Enter Twitter Account:/quotesingle.ts1 )
if(len(acct) <1):break
url=twurl.augment(TWITTER_URL,
{/quotesingle.ts1screen_name/quotesingle.ts1 : acct, /quotesingle.ts1count/quotesingle.ts1 :/quotesingle.ts12/quotesingle.ts1})
print( /quotesingle.ts1Retrieving/quotesingle.ts1 , url)
connection =urllib.request.urlopen(url, context =ctx)
data =connection.read().decode()
print(data[: 250])
headers =dict(connection.getheaders())
# print headers
print( /quotesingle.ts1Remaining/quotesingle.ts1 , headers[ /quotesingle.ts1x-rate-limit-remaining/quotesingle.ts1 ])
# Code: http://www.py4e.com/code3/twitter1.py
When the program runs it produces the following output:
Enter Twitter Account:drchuck
Retrieving https://api.twitter.com/1.1/ ...
[{"created_at":"Sat Sep 28 17:30:25 +0000 2013","
id":384007200990982144,"id_str":"384007200990982144",
"text":"RT @fixpert: See how the Dutch handle traffic
intersections: http:\/\/t.co\/tIiVWtEhj4\n#brilliant",
"source":"web","truncated":false,"in_rep
13.10. APPLICATION 2: TWITTER 167
Remaining 178
Enter Twitter Account:fixpert
Retrieving https://api.twitter.com/1.1/ ...
[{"created_at":"Sat Sep 28 18:03:56 +0000 2013",
"id":384015634108919808,"id_str":"384015634108919808",
"text":"3 months after my freak bocce ball accident,
my wedding ring fits again! :)\n\nhttps:\/\/t.co\/2XmHPx7kgX",
"source":"web","truncated":false,
Remaining 177
Enter Twitter Account:
Along with the returned timeline data, Twitter also returns metadata about
the request in the HTTP response headers. One header in particular,
x-rate-limit-remaining , informs us how many more requests we can make
before we will be shut oﬀ for a short time period. You can see that our remai ning
retrievals drop by one each time we make a request to the API.
In the following example, we retrieve a user’s Twitter friends, parse the returned
JSON, and extract some of the information about the friends. We also dump the
JSON after parsing and “pretty-print” it with an indent of four characters to all ow
us to pore through the data when we want to extract more ﬁelds.
import urllib.request, urllib.parse, urllib.error
import twurl
import json
import ssl
# https://apps.twitter.com/
# Create App and get the four strings, put them in hidden.py
TWITTER_URL =/quotesingle.ts1https://api.twitter.com/1.1/friends/list.json/quotesingle.ts1
# Ignore SSL certificate errors
ctx =ssl.create_default_context()
ctx.check_hostname =False
ctx.verify_mode =ssl.CERT_NONE
while True:
print( /quotesingle.ts1/quotesingle.ts1)
acct =input( /quotesingle.ts1Enter Twitter Account:/quotesingle.ts1 )
if(len(acct) <1):break
url=twurl.augment(TWITTER_URL,
{/quotesingle.ts1screen_name/quotesingle.ts1 : acct, /quotesingle.ts1count/quotesingle.ts1 :/quotesingle.ts15/quotesingle.ts1})
print( /quotesingle.ts1Retrieving/quotesingle.ts1 , url)
connection =urllib.request.urlopen(url, context =ctx)
data =connection.read().decode()
js=json.loads(data)
print(json.dumps(js, indent =2))
168 CHAPTER 13. USING WEB SERVICES
headers =dict(connection.getheaders())
print( /quotesingle.ts1Remaining/quotesingle.ts1 , headers[ /quotesingle.ts1x-rate-limit-remaining/quotesingle.ts1 ])
foruinjs[/quotesingle.ts1users/quotesingle.ts1 ]:
print(u[ /quotesingle.ts1screen_name/quotesingle.ts1 ])
if/quotesingle.ts1status/quotesingle.ts1 not in u:
print( /quotesingle.ts1 * No status found/quotesingle.ts1 )
continue
s=u[/quotesingle.ts1status/quotesingle.ts1 ][/quotesingle.ts1text/quotesingle.ts1 ]
print( /quotesingle.ts1 /quotesingle.ts1 , s[: 50])
# Code: http://www.py4e.com/code3/twitter2.py
Since the JSON becomes a set of nested Python lists and dictionaries, we can use a
combination of the index operation and forloops to wander through the returned
data structures with very little Python code.
The output of the program looks as follows (some of the data items are shor tened
to ﬁt on the page):
Enter Twitter Account:drchuck
Retrieving https://api.twitter.com/1.1/friends ...
Remaining 14
{
"next_cursor" :1444171224491980205 ,
"users" :[
{
"id":662433 ,
"followers_count" :28725 ,
"status" : {
"text" :"@jazzychad I just bought one .__." ,
"created_at" :"Fri Sep 20 08:36:34 +0000 2013" ,
"retweeted" :false ,
},
"location" :"San Francisco, California" ,
"screen_name" :"leahculver" ,
"name" :"Leah Culver" ,
},
{
"id":40426722 ,
"followers_count" :2635,
"status" : {
"text" :"RT @WSJ: Big employers like Google ..." ,
"created_at" :"Sat Sep 28 19:36:37 +0000 2013" ,
},
"location" :"Victoria Canada" ,
"screen_name" :"_valeriei" ,
"name" :"Valerie Irvine" ,
}
],
13.10. APPLICATION 2: TWITTER 169
"next_cursor_str" :"1444171224491980205"
}
leahculver
@jazzychad I just bought one .__.
_valeriei
RT @WSJ: Big employers like Google, AT&amp;T are h
ericbollens
RT @lukew: sneak peek: my LONG take on the good &a
halherzog
Learning Objects is 10. We had a cake with the LO,
scweeker
@DeviceLabDC love it! Now where so I get that "etc
Enter Twitter Account:
The last bit of the output is where we see the for loop reading the ﬁve most recent
“friends” of the @drchuck Twitter account and printing the most recent status for
each friend. There is a great deal more data available in the returned JSON. If
you look in the output of the program, you can also see that the “ﬁnd the friends”
of a particular account has a diﬀerent rate limitation than the number of timel ine
queries we are allowed to run per time period.
These secure API keys allow Twitter to have solid conﬁdence that they know who
is using their API and data and at what level. The rate-limiting approach allows
us to do simple, personal data retrievals but does not allow us to build a product
that pulls data from their API millions of times per day.
170 CHAPTER 13. USING WEB SERVICES
Chapter 14
Object-oriented
programming
14.1 Managing larger programs
At the beginning of this book, we came up with four basic programming patterns
which we use to construct programs:
• Sequential code
• Conditional code (if statements)
• Repetitive code (loops)
• Store and reuse (functions)
In later chapters, we explored simple variables as well as collection data str uctures
like lists, tuples, and dictionaries.
As we build programs, we design data structures and write code to manipulate
those data structures. There are many ways to write programs and by now, yo u
probably have written some programs that are “not so elegant” and other progr ams
that are “more elegant”. Even though your programs may be small, you ar e starting
to see how there is a bit of art and aesthetic to writing code.
As programs get to be millions of lines long, it becomes increasingly import ant to
write code that is easy to understand. If you are working on a million-line prog ram,
you can never keep the entire program in your mind at the same time. We need
ways to break large programs into multiple smaller pieces so that we have les s to
look at when solving a problem, ﬁx a bug, or add a new feature.
In a way, object oriented programming is a way to arrange your code so that y ou
can zoom into 50 lines of the code and understand it while ignoring the other
999,950 lines of code for the moment.
171
172 CHAPTER 14. OBJECT-ORIENTED PROGRAMMING
14.2 Getting started
Like many aspects of programming, it is necessary to learn the concepts of object
oriented programming before you can use them eﬀectively. You should approach
this chapter as a way to learn some terms and concepts and work through a few
simple examples to lay a foundation for future learning.
The key outcome of this chapter is to have a basic understanding of how objects
are constructed and how they function and most importantly how we make use of
the capabilities of objects that are provided to us by Python and Python librari es.
14.3 Using objects
As it turns out, we have been using objects all along in this book. Python provi des
us with many built-in objects. Here is some simple code where the ﬁrst few lines
should feel very simple and natural to you.
stuff =list()
stuff.append( /quotesingle.ts1python/quotesingle.ts1 )
stuff.append( /quotesingle.ts1chuck/quotesingle.ts1 )
stuff.sort()
print (stuff[ 0])
print (stuff. __getitem__ (0))
print (list. __getitem__ (stuff, 0))
# Code: http://www.py4e.com/code3/party1.py
Instead of focusing on what these lines accomplish, let’s look at what is really
happening from the point of view of object-oriented programming. Don’t worry
if the following paragraphs don’t make any sense the ﬁrst time you read them
because we have not yet deﬁned all of these terms.
The ﬁrst line constructs an object of type list, the second and third lines call
theappend() method , the fourth line calls the sort() method, and the ﬁfth line
retrieves the item at position 0.
The sixth line calls the __getitem__() method in the stuff list with a parameter
of zero.
print (stuff. __getitem__ (0))
The seventh line is an even more verbose way of retrieving the 0th item in the l ist.
print (list. __getitem__ (stuff, 0))
In this code, we call the __getitem__ method in the list class and pass the list
and the item we want retrieved from the list as parameters.
14.4. STARTING WITH PROGRAMS 173
The last three lines of the program are equivalent, but it is more convenient to
simply use the square bracket syntax to look up an item at a particular posi tion
in a list.
We can take a look at the capabilities of an object by looking at the output of t he
dir() function:
>>> stuff = list()
>>> dir(stuff)
[/quotesingle.ts1__add__/quotesingle.ts1, /quotesingle.ts1__class__/quotesingle.ts1, /quotesingle.ts1__contains__/quotesingle.ts1, /quotesingle.ts1__delattr__/quotesingle.ts1,
/quotesingle.ts1__delitem__/quotesingle.ts1, /quotesingle.ts1__dir__/quotesingle.ts1, /quotesingle.ts1__doc__/quotesingle.ts1, /quotesingle.ts1__eq__/quotesingle.ts1,
/quotesingle.ts1__format__/quotesingle.ts1, /quotesingle.ts1__ge__/quotesingle.ts1, /quotesingle.ts1__getattribute__/quotesingle.ts1, /quotesingle.ts1__getitem__/quotesingle.ts1,
/quotesingle.ts1__gt__/quotesingle.ts1, /quotesingle.ts1__hash__/quotesingle.ts1, /quotesingle.ts1__iadd__/quotesingle.ts1, /quotesingle.ts1__imul__/quotesingle.ts1, /quotesingle.ts1__init__/quotesingle.ts1,
/quotesingle.ts1__iter__/quotesingle.ts1, /quotesingle.ts1__le__/quotesingle.ts1, /quotesingle.ts1__len__/quotesingle.ts1, /quotesingle.ts1__lt__/quotesingle.ts1, /quotesingle.ts1__mul__/quotesingle.ts1,
/quotesingle.ts1__ne__/quotesingle.ts1, /quotesingle.ts1__new__/quotesingle.ts1, /quotesingle.ts1__reduce__/quotesingle.ts1, /quotesingle.ts1__reduce_ex__/quotesingle.ts1,
/quotesingle.ts1__repr__/quotesingle.ts1, /quotesingle.ts1__reversed__/quotesingle.ts1, /quotesingle.ts1__rmul__/quotesingle.ts1, /quotesingle.ts1__setattr__/quotesingle.ts1,
/quotesingle.ts1__setitem__/quotesingle.ts1, /quotesingle.ts1__sizeof__/quotesingle.ts1, /quotesingle.ts1__str__/quotesingle.ts1, /quotesingle.ts1__subclasshook__/quotesingle.ts1,
/quotesingle.ts1append/quotesingle.ts1, /quotesingle.ts1clear/quotesingle.ts1, /quotesingle.ts1copy/quotesingle.ts1, /quotesingle.ts1count/quotesingle.ts1, /quotesingle.ts1extend/quotesingle.ts1, /quotesingle.ts1index/quotesingle.ts1,
/quotesingle.ts1insert/quotesingle.ts1, /quotesingle.ts1pop/quotesingle.ts1, /quotesingle.ts1remove/quotesingle.ts1, /quotesingle.ts1reverse/quotesingle.ts1, /quotesingle.ts1sort/quotesingle.ts1]
>>>
The rest of this chapter will deﬁne all of the above terms so make sure to come
back after you ﬁnish the chapter and re-read the above paragraphs to check your
understanding.
14.4 Starting with programs
A program in its most basic form takes some input, does some processing, and
produces some output. Our elevator conversion program demonstrates a very short
but complete program showing all three of these steps.
usf =input( /quotesingle.ts1Enter the US Floor Number: /quotesingle.ts1 )
wf=int(usf) -1
print( /quotesingle.ts1Non-US Floor Number is/quotesingle.ts1 ,wf)
# Code: http://www.py4e.com/code3/elev.py
If we think a bit more about this program, there is the “outside world” and the
program. The input and output aspects are where the program interacts with the
outside world. Within the program we have code and data to accomplish the task
the program is designed to solve.
One way to think about object-oriented programming is that it separates our pro-
gram into multiple “zones.” Each zone contains some code and data (like a pro-
gram) and has well deﬁned interactions with the outside world and the other zones
within the program.
If we look back at the link extraction application where we used the BeautifulSoup
library, we can see a program that is constructed by connecting diﬀerent objects
together to accomplish a task:
174 CHAPTER 14. OBJECT-ORIENTED PROGRAMMING
Program 
Output Input 
Figure 14.1: A Program
# To run this, you can install BeautifulSoup
# https://pypi.python.org/pypi/beautifulsoup4
# Or download the file
# http://www.py4e.com/code3/bs4.zip
# and unzip it in the same directory as this file
import urllib.request, urllib.parse, urllib.error
from bs4 import BeautifulSoup
import ssl
# Ignore SSL certificate errors
ctx =ssl.create_default_context()
ctx.check_hostname =False
ctx.verify_mode =ssl.CERT_NONE
url =input( /quotesingle.ts1Enter - /quotesingle.ts1 )
html =urllib.request.urlopen(url, context =ctx).read()
soup =BeautifulSoup(html, /quotesingle.ts1html.parser/quotesingle.ts1 )
# Retrieve all of the anchor tags
tags =soup( /quotesingle.ts1a/quotesingle.ts1)
for tagintags:
print(tag.get( /quotesingle.ts1href/quotesingle.ts1 ,None))
# Code: http://www.py4e.com/code3/urllinks.py
We read the URL into a string and then pass that into urllib to retrieve the data
from the web. The urllib library uses the socket library to make the actual
network connection to retrieve the data. We take the string that urllib returns
and hand it to BeautifulSoup for parsing. BeautifulSoup makes use of the object
html.parser1and returns an object. We call the tags() method on the returned
object that returns a dictionary of tag objects. We loop through the tags and cal l
theget() method for each tag to print out the href attribute.
We can draw a picture of this program and how the objects work together.
The key here is not to understand perfectly how this program works but to see
how we build a network of interacting objects and orchestrate the movement of
1https://docs.python.org/3/library/html.parser.html
14.5. SUBDIVIDING A PROBLEM 175
String 
Object Output Input Dictionary 
Object 
BeautifulSoup 
Object String 
Object 
Socket 
Object Urllib Object 
html.parser 
Object 
Figure 14.2: A Program as Network of Objects
information between the objects to create a program. It is also importan t to
note that when you looked at that program several chapters back, you could fully
understand what was going on in the program without even realizing that the
program was “orchestrating the movement of data between objects.” It was jus t
lines of code that got the job done.
14.5 Subdividing a problem
One of the advantages of the object-oriented approach is that it can hide complexity .
For example, while we need to know how to use the urllib and BeautifulSoup
code, we do not need to know how those libraries work internally. This allows us
to focus on the part of the problem we need to solve and ignore the other parts of
the program.
BeautifulSoup 
Object String 
Object Output Input Dictionary 
Object String 
Object 
Socket 
Object Urllib Object 
html.parser 
Object 
Figure 14.3: Ignoring Detail When Using an Object
This ability to focus exclusively on the part of a program that we care about and
ignore the rest is also helpful to the developers of the objects that we use. For
example, the programmers developing BeautifulSoup do not need to know or care
about how we retrieve our HTML page, what parts we want to read, or what we
plan to do with the data we extract from the web page.
176 CHAPTER 14. OBJECT-ORIENTED PROGRAMMING
String 
Object Output Input Dictionary 
Object String 
Object 
Socket 
Object Urllib Object 
html.parser 
Object 
BeautifulSoup 
Object 
Figure 14.4: Ignoring Detail When Building an Object
14.6 Our ﬁrst Python object
At a basic level, an object is simply some code plus data structures that are smal ler
than a whole program. Deﬁning a function allows us to store a bit of code and
give it a name and then later invoke that code using the name of the function.
An object can contain a number of functions (which we call methods ) as well as
data that is used by those functions. We call data items that are part of the object
attributes .
We use the class keyword to deﬁne the data and code that will make up each
of the objects. The class keyword includes the name of the class and begins an
indented block of code where we include the attributes (data) and methods (code).
class PartyAnimal:
x=0
def party( self) :
self.x=self.x+1
print( "So far" ,self.x)
an=PartyAnimal()
an.party()
an.party()
an.party()
PartyAnimal.party(an)
# Code: http://www.py4e.com/code3/party2.py
Each method looks like a function, starting with the defkeyword and consisting
of an indented block of code. This object has one attribute ( x) and one method
(party ). The methods have a special ﬁrst parameter that we name by convention
self.
Just as the defkeyword does not cause function code to be executed, the class
keyword does not create an object. Instead, the class keyword deﬁnes a template
indicating what data and code will be contained in each object of type PartyAnimal .
The class is like a cookie cutter and the objects created using the class are the
14.6. OUR FIRST PYTHON OBJECT 177
cookies2. You don’t put frosting on the cookie cutter; you put frosting on the
cookies, and you can put diﬀerent frosting on each cookie.
Figure 14.5: A Class and Two Objects
If we continue through this sample program, we see the ﬁrst executable line of
code:
an=PartyAnimal()
This is where we instruct Python to construct (i.e., create) an object orinstance
of the class PartyAnimal . It looks like a function call to the class itself. Python
constructs the object with the right data and methods and returns the object which
is then assigned to the variable an. In a way this is quite similar to the following
line which we have been using all along:
counts =dict()
Here we instruct Python to construct an object using the dict template (already
present in Python), return the instance of dictionary, and assign it to the vari able
counts .
When the PartyAnimal class is used to construct an object, the variable anis used
to point to that object. We use anto access the code and data for that particular
instance of the PartyAnimal class.
Each Partyanimal object/instance contains within it a variable xand a
method/function named party . We call the party method in this line:
an.party()
When the party method is called, the ﬁrst parameter (which we call by convention
self) points to the particular instance of the PartyAnimal object that party is
called from. Within the party method, we see the line:
self.x=self.x+1
2Cookie image copyright CC-BY https://www.ﬂickr.com/photo s/dinnerseries/23570475099
178 CHAPTER 14. OBJECT-ORIENTED PROGRAMMING
This syntax using the dotoperator is saying ‘the x within self.’ Each time party()
is called, the internal xvalue is incremented by 1 and the value is printed out.
The following line is another way to call the party method within the anobject:
PartyAnimal.party(an)
In this variation, we access the code from within the class and explicitly pass t he
object pointer anas the ﬁrst parameter (i.e., self within the method). You can
think of an.party() as shorthand for the above line.
When the program executes, it produces the following output:
So far 1
So far 2
So far 3
So far 4
The object is constructed, and the party method is called four times, both incre-
menting and printing the value for xwithin the anobject.
14.7 Classes as types
As we have seen, in Python all variables have a type. We can use the built-in dir
function to examine the capabilities of a variable. We can also use type anddir
with the classes that we create.
class PartyAnimal:
x=0
def party( self) :
self.x=self.x+1
print( "So far" ,self.x)
an=PartyAnimal()
print ( "Type" , type(an))
print ( "Dir " , dir(an))
print ( "Type" , type(an.x))
print ( "Type" , type(an.party))
# Code: http://www.py4e.com/code3/party3.py
When this program executes, it produces the following output:
Type <class /quotesingle.ts1__main__.PartyAnimal/quotesingle.ts1>
Dir [/quotesingle.ts1__class__/quotesingle.ts1, /quotesingle.ts1__delattr__/quotesingle.ts1, ...
/quotesingle.ts1__sizeof__/quotesingle.ts1, /quotesingle.ts1__str__/quotesingle.ts1, /quotesingle.ts1__subclasshook__/quotesingle.ts1,
/quotesingle.ts1__weakref__/quotesingle.ts1, /quotesingle.ts1party/quotesingle.ts1, /quotesingle.ts1x/quotesingle.ts1]
Type <class /quotesingle.ts1int/quotesingle.ts1>
Type <class /quotesingle.ts1method/quotesingle.ts1>
14.8. OBJECT LIFECYCLE 179
You can see that using the class keyword, we have created a new type. From the
diroutput, you can see both the xinteger attribute and the party method are
available in the object.
14.8 Object lifecycle
In the previous examples, we deﬁne a class (template), use that class to create
an instance of that class (object), and then use the instance. When the program
ﬁnishes, all of the variables are discarded. Usually, we don’t think much about
the creation and destruction of variables, but often as our objects become more
complex, we need to take some action within the object to set things up as the
object is constructed and possibly clean things up as the object is discarded.
If we want our object to be aware of these moments of construction and destructi on,
we add specially named methods to our object:
class PartyAnimal:
x=0
def __init__ (self):
print( /quotesingle.ts1I am constructed/quotesingle.ts1 )
def party( self) :
self.x=self.x+1
print( /quotesingle.ts1So far/quotesingle.ts1 ,self.x)
def __del__ (self):
print( /quotesingle.ts1I am destructed/quotesingle.ts1 ,self.x)
an=PartyAnimal()
an.party()
an.party()
an=42
print( /quotesingle.ts1an contains/quotesingle.ts1 ,an)
# Code: http://www.py4e.com/code3/party4.py
When this program executes, it produces the following output:
I am constructed
So far 1
So far 2
I am destructed 2
an contains 42
As Python constructs our object, it calls our __init__ method to give us a chance
to set up some default or initial values for the object. When Python encounters
the line:
180 CHAPTER 14. OBJECT-ORIENTED PROGRAMMING
an = 42
It actually “thows our object away” so it can reuse the anvariable to store the value
42. Just at the moment when our anobject is being “destroyed” our destructor
code ( __del__ ) is called. We cannot stop our variable from being destroyed, but
we can do any necessary cleanup right before our object no longer exists.
When developing objects, it is quite common to add a constructor to an object to
set up initial values for the object. It is relatively rare to need a destructor fo r an
object.
14.9 Multiple instances
So far, we have deﬁned a class, constructed a single object, used that object,
and then thrown the object away. However, the real power in object-oriented
programming happens when we construct multiple instances of our class.
When we construct multiple objects from our class, we might want to set up dif-
ferent initial values for each of the objects. We can pass data to the constructor s
to give each object a diﬀerent initial value:
class PartyAnimal:
x=0
name =/quotesingle.ts1/quotesingle.ts1
def __init__ (self, nam):
self.name =nam
print( self.name, /quotesingle.ts1constructed/quotesingle.ts1 )
def party( self) :
self.x=self.x+1
print( self.name, /quotesingle.ts1party count/quotesingle.ts1 ,self.x)
s=PartyAnimal( /quotesingle.ts1Sally/quotesingle.ts1 )
j=PartyAnimal( /quotesingle.ts1Jim/quotesingle.ts1 )
s.party()
j.party()
s.party()
# Code: http://www.py4e.com/code3/party5.py
The constructor has both a self parameter that points to the object instance
and additional parameters that are passed into the constructor as the object is
constructed:
s = PartyAnimal(/quotesingle.ts1Sally/quotesingle.ts1)
Within the constructor, the second line copies the parameter ( nam) that is passed
into the name attribute within the object instance.
14.10. INHERITANCE 181
self.name = nam
The output of the program shows that each of the objects ( sandj) contain their
own independent copies of xandnam:
Sally constructed
Sally party count 1
Jim constructed
Jim party count 1
Sally party count 2
14.10 Inheritance
Another powerful feature of object-oriented programming is the ability to creat e
a new class by extending an existing class. When extending a class, we call the
original class the parent class and the new class the child class .
For this example, we move our PartyAnimal class into its own ﬁle. Then, we can
‘import’ the PartyAnimal class in a new ﬁle and extend it, as follows:
from party import PartyAnimal
class CricketFan(PartyAnimal):
points =0
def six(self):
self.points =self.points +6
self.party()
print( self.name, "points" ,self.points)
s=PartyAnimal( "Sally" )
s.party()
j=CricketFan( "Jim" )
j.party()
j.six()
print(dir(j))
# Code: http://www.py4e.com/code3/party6.py
When we deﬁne the CricketFan class, we indicate that we are extending the
PartyAnimal class. This means that all of the variables ( x) and methods ( party )
from the PartyAnimal class are inherited by the CricketFan class. For example,
within the sixmethod in the CricketFan class, we call the party method from
thePartyAnimal class.
As the program executes, we create sand jas independent instances of
PartyAnimal andCricketFan . The jobject has additional capabilities beyond
thesobject.
Sally constructed
182 CHAPTER 14. OBJECT-ORIENTED PROGRAMMING
Sally party count 1
Jim constructed
Jim party count 1
Jim party count 2
Jim points 6
[/quotesingle.ts1__class__/quotesingle.ts1, /quotesingle.ts1__delattr__/quotesingle.ts1, ... /quotesingle.ts1__weakref__/quotesingle.ts1,
/quotesingle.ts1name/quotesingle.ts1, /quotesingle.ts1party/quotesingle.ts1, /quotesingle.ts1points/quotesingle.ts1, /quotesingle.ts1six/quotesingle.ts1, /quotesingle.ts1x/quotesingle.ts1]
In the diroutput for the jobject (instance of the CricketFan class), we see that
it has the attributes and methods of the parent class, as well as the attributes and
methods that were added when the class was extended to create the CricketFan
class.
14.11 Summary
This is a very quick introduction to object-oriented programming that focuses
mainly on terminology and the syntax of deﬁning and using objects. Let’s quickly
review the code that we looked at in the beginning of the chapter. At this point
you should fully understand what is going on.
stuff =list()
stuff.append( /quotesingle.ts1python/quotesingle.ts1 )
stuff.append( /quotesingle.ts1chuck/quotesingle.ts1 )
stuff.sort()
print (stuff[ 0])
print (stuff. __getitem__ (0))
print (list. __getitem__ (stuff, 0))
# Code: http://www.py4e.com/code3/party1.py
The ﬁrst line constructs a list object . When Python creates the list object,
it calls the constructor method (named __init__ ) to set up the internal data at-
tributes that will be used to store the list data. We have not passed any param eters
to the constructor . When the constructor returns, we use the variable stuff to
point to the returned instance of the list class.
The second and third lines call the append method with one parameter to add a
new item at the end of the list by updating the attributes within stuff . Then
in the fourth line, we call the sort method with no parameters to sort the data
within the stuff object.
We then print out the ﬁrst item in the list using the square brackets which are a
shortcut to calling the __getitem__ method within the stuff . This is equivalent
to calling the __getitem__ method in the list class and passing the stuff object
as the ﬁrst parameter and the position we are looking for as the second paramet er.
At the end of the program, the stuff object is discarded but not before calling
thedestructor (named __del__ ) so that the object can clean up any loose ends as
necessary.
14.12. GLOSSARY 183
Those are the basics of object-oriented programming. There are many additiona l
details as to how to best use object-oriented approaches when developing large
applications and libraries that are beyond the scope of this chapter.3
14.12 Glossary
attribute A variable that is part of a class.
class A template that can be used to construct an object. Deﬁnes the attributes
and methods that will make up the object.
child class A new class created when a parent class is extended. The child class
inherits all of the attributes and methods of the parent class.
constructor An optional specially named method ( __init__ ) that is called at
the moment when a class is being used to construct an object. Usually this
is used to set up initial values for the object.
destructor An optional specially named method ( __del__ ) that is called at the
moment just before an object is destroyed. Destructors are rarely used.
inheritance When we create a new class (child) by extending an existing class
(parent). The child class has all the attributes and methods of the parent
class plus additional attributes and methods deﬁned by the child class.
method A function that is contained within a class and the objects that are con-
structed from the class. Some object-oriented patterns use ‘message’ instead
of ‘method’ to describe this concept.
object A constructed instance of a class. An object contains all of the attributes
and methods that were deﬁned by the class. Some object-oriented documen-
tation uses the term ‘instance’ interchangeably with ‘object’.
parent class The class which is being extended to create a new child class. The
parent class contributes all of its methods and attributes to the new child
class.
3If you are curious about where the list class is deﬁned, take a look at (hopefully the URL
won’t change) https://github.com/python/cpython/blob/ master/Objects/listobject.c - the list
class is written in a language called “C” . If you take a look at that source code and ﬁnd it curious
you might want to explore a few Computer Science courses.
184 CHAPTER 14. OBJECT-ORIENTED PROGRAMMING
Chapter 15
Using Databases and SQL
15.1 What is a database?
Adatabase is a ﬁle that is organized for storing data. Most databases are organized
like a dictionary in the sense that they map from keys to values. The biggest
diﬀerence is that the database is on disk (or other permanent storage), so it pers ists
after the program ends. Because a database is stored on permanent storage, it can
store far more data than a dictionary, which is limited to the size of the m emory
in the computer.
Like a dictionary, database software is designed to keep the inserting and accessi ng
of data very fast, even for large amounts of data. Database software m aintains its
performance by building indexes as data is added to the database to allow the
computer to jump quickly to a particular entry.
There are many diﬀerent database systems which are used for a wide variety of pur-
poses including: Oracle, MySQL, Microsoft SQL Server, PostgreSQL, and SQLite.
We focus on SQLite in this book because it is a very common database and is
already built into Python. SQLite is designed to be embedded into other applica-
tions to provide database support within the application. For example, the Firef ox
browser also uses the SQLite database internally as do many other products.
http://sqlite.org/
SQLite is well suited to some of the data manipulation problems that we see
in Informatics such as the Twitter spidering application that we describe in thi s
chapter.
15.2 Database concepts
When you ﬁrst look at a database it looks like a spreadsheet with multiple sheets .
The primary data structures in a database are: tables ,rows, and columns .
In technical descriptions of relational databases the concepts of table, row, and
column are more formally referred to as relation ,tuple, and attribute , respectively.
We will use the less formal terms in this chapter.
185
186 CHAPTER 15. USING DATABASES AND SQL
2.3 Table 
row column 
2.3 Relation 
tuple attribute 
Figure 15.1: Relational Databases
15.3 Database Browser for SQLite
While this chapter will focus on using Python to work with data in SQLite databa se
ﬁles, many operations can be done more conveniently using software called the
Database Browser for SQLite which is freely available from:
http://sqlitebrowser.org/
Using the browser you can easily create tables, insert data, edit data, or run sim ple
SQL queries on the data in the database.
In a sense, the database browser is similar to a text editor when working with t ext
ﬁles. When you want to do one or very few operations on a text ﬁle, you can just
open it in a text editor and make the changes you want. When you have many
changes that you need to do to a text ﬁle, often you will write a simple Python
program. You will ﬁnd the same pattern when working with databases. You wil l
do simple operations in the database manager and more complex operations will
be most conveniently done in Python.
15.4 Creating a database table
Databases require more deﬁned structure than Python lists or dictionaries1.
When we create a database table we must tell the database in advance the names
of each of the columns in the table and the type of data which we are planning to
store in each column . When the database software knows the type of data in each
column, it can choose the most eﬃcient way to store and look up the data based
on the type of data.
You can look at the various data types supported by SQLite at the following ur l:
http://www.sqlite.org/datatypes.html
Deﬁning structure for your data up front may seem inconvenient at the beginning,
but the payoﬀ is fast access to your data even when the database contains a large
amount of data.
1SQLite actually does allow some ﬂexibility in the type of dat a stored in a column, but we
will keep our data types strict in this chapter so the concept s apply equally to other database
systems such as MySQL.
15.4. CREATING A DATABASE TABLE 187
The code to create a database ﬁle and a table named Tracks with two columns in
the database is as follows:
import sqlite3
conn =sqlite3.connect( /quotesingle.ts1music.sqlite/quotesingle.ts1 )
cur =conn.cursor()
cur.execute( /quotesingle.ts1DROP TABLE IF EXISTS Tracks/quotesingle.ts1 )
cur.execute( /quotesingle.ts1CREATE TABLE Tracks (title TEXT, plays INTEGER)/quotesingle.ts1 )
conn.close()
# Code: http://www.py4e.com/code3/db1.py
The connect operation makes a “connection” to the database stored in the ﬁle
music.sqlite3 in the current directory. If the ﬁle does not exist, it will be created.
The reason this is called a “connection” is that sometimes the database is stored
on a separate “database server” from the server on which we are running our
application. In our simple examples the database will just be a local ﬁle in the
same directory as the Python code we are running.
Acursor is like a ﬁle handle that we can use to perform operations on the data
stored in the database. Calling cursor() is very similar conceptually to calling
open() when dealing with text ﬁles.
Your 
Program 

U+
S
O+execute 
fetchone 
fetchall
close Users 
Members Courses 
Figure 15.2: A Database Cursor
Once we have the cursor, we can begin to execute commands on the contents of
the database using the execute() method.
Database commands are expressed in a special language that has been standardized
across many diﬀerent database vendors to allow us to learn a single database
language. The database language is called Structured Query Language orSQL for
short.
http://en.wikipedia.org/wiki/SQL
In our example, we are executing two SQL commands in our database. As a
convention, we will show the SQL keywords in uppercase and the parts of the
188 CHAPTER 15. USING DATABASES AND SQL
command that we are adding (such as the table and column names) will be shown
in lowercase.
The ﬁrst SQL command removes the Tracks table from the database if it exists.
This pattern is simply to allow us to run the same program to create the Tracks
table over and over again without causing an error. Note that the DROP TABLE
command deletes the table and all of its contents from the database (i.e., there i s
no “undo”).
cur.execute( /quotesingle.ts1DROP TABLE IF EXISTS Tracks /quotesingle.ts1 )
The second command creates a table named Tracks with a text column named
title and an integer column named plays .
cur.execute( /quotesingle.ts1CREATE TABLE Tracks (title TEXT, plays INTEGER)/quotesingle.ts1 )
Now that we have created a table named Tracks , we can put some data into that
table using the SQL INSERT operation. Again, we begin by making a connection
to the database and obtaining the cursor . We can then execute SQL commands
using the cursor.
The SQL INSERT command indicates which table we are using and then deﬁnes a
new row by listing the ﬁelds we want to include (title, plays) followed by the
VALUES we want placed in the new row. We specify the values as question marks
(?, ?) to indicate that the actual values are passed in as a tuple ( /quotesingle.ts1My Way/quotesingle.ts1,
15 ) as the second parameter to the execute() call.
import sqlite3
conn =sqlite3.connect( /quotesingle.ts1music.sqlite/quotesingle.ts1 )
cur =conn.cursor()
cur.execute( /quotesingle.ts1INSERT INTO Tracks (title, plays) VALUES (?, ?)/quotesingle.ts1 ,
(/quotesingle.ts1Thunderstruck/quotesingle.ts1 ,20))
cur.execute( /quotesingle.ts1INSERT INTO Tracks (title, plays) VALUES (?, ?)/quotesingle.ts1 ,
(/quotesingle.ts1My Way/quotesingle.ts1 ,15))
conn.commit()
print( /quotesingle.ts1Tracks:/quotesingle.ts1 )
cur.execute( /quotesingle.ts1SELECT title, plays FROM Tracks/quotesingle.ts1 )
for rowincur:
print(row)
cur.execute( /quotesingle.ts1DELETE FROM Tracks WHERE plays < 100/quotesingle.ts1 )
conn.commit()
cur.close()
# Code: http://www.py4e.com/code3/db2.py
15.5. STRUCTURED QUERY LANGUAGE SUMMARY 189
title 
 plays 
My Way Thunderstruck 
15 20 Tracks 
Figure 15.3: Rows in a Table
First we INSERT two rows into our table and use commit() to force the data to be
written to the database ﬁle.
Then we use the SELECT command to retrieve the rows we just inserted from the
table. On the SELECT command, we indicate which columns we would like (title,
plays) and indicate which table we want to retrieve the data from. After we
execute the SELECT statement, the cursor is something we can loop through in a
forstatement. For eﬃciency, the cursor does not read all of the data from the
database when we execute the SELECT statement. Instead, the data is read on
demand as we loop through the rows in the forstatement.
The output of the program is as follows:
Tracks:
(/quotesingle.ts1Thunderstruck/quotesingle.ts1, 20)
(/quotesingle.ts1My Way/quotesingle.ts1, 15)
Ourforloop ﬁnds two rows, and each row is a Python tuple with the ﬁrst value
as the title and the second value as the number of plays .
Note: You may see strings starting with u/quotesingle.ts1in other books or on the Internet. This
was an indication in Python 2 that the strings are Unicode* strings that are capable
of storing non-Latin character sets. In Python 3, all strings are unicode str ings by
default.*
At the very end of the program, we execute an SQL command to DELETE the
rows we have just created so we can run the program over and over. The DELETE
command shows the use of a WHERE clause that allows us to express a selection
criterion so that we can ask the database to apply the command to only the rows
that match the criterion. In this example the criterion happens to apply to all the
rows so we empty the table out so we can run the program repeatedly. After the
DELETE is performed, we also call commit() to force the data to be removed from
the database.
15.5 Structured Query Language summary
So far, we have been using the Structured Query Language in our Python examples
and have covered many of the basics of the SQL commands. In this section, we
look at the SQL language in particular and give an overview of SQL syntax.
190 CHAPTER 15. USING DATABASES AND SQL
Since there are so many diﬀerent database vendors, the Structured Query Language
(SQL) was standardized so we could communicate in a portable manner to database
systems from multiple vendors.
A relational database is made up of tables, rows, and columns. The columns
generally have a type such as text, numeric, or date data. When we create a table,
we indicate the names and types of the columns:
CREATE TABLE Tracks (title TEXT, plays INTEGER )
To insert a row into a table, we use the SQL INSERT command:
INSERT INTO Tracks (title, plays) VALUES (/quotesingle.ts1My Way/quotesingle.ts1 ,15)
The INSERT statement speciﬁes the table name, then a list of the ﬁelds/columns
that you would like to set in the new row, and then the keyword VALUES and a list
of corresponding values for each of the ﬁelds.
The SQL SELECT command is used to retrieve rows and columns from a database.
The SELECT statement lets you specify which columns you would like to retrieve
as well as a WHERE clause to select which rows you would like to see. It also allows
an optional ORDER BY clause to control the sorting of the returned rows.
SELECT *FROM Tracks WHERE title = /quotesingle.ts1My Way/quotesingle.ts1
Using *indicates that you want the database to return all of the columns for each
row that matches the WHERE clause.
Note, unlike in Python, in a SQL WHERE clause we use a single equal sign to indicate
a test for equality rather than a double equal sign. Other logical operations allo wed
in aWHERE clause include <,>,<=,>=,!=, as well as ANDandORand parentheses
to build your logical expressions.
You can request that the returned rows be sorted by one of the ﬁelds as follows:
SELECT title,plays FROM Tracks ORDER BY title
To remove a row, you need a WHERE clause on an SQL DELETE statement. The
WHERE clause determines which rows are to be deleted:
DELETE FROM Tracks WHERE title = /quotesingle.ts1My Way/quotesingle.ts1
It is possible to UPDATE a column or columns within one or more rows in a table
using the SQL UPDATE statement as follows:
UPDATE Tracks SET plays = 16WHERE title = /quotesingle.ts1My Way/quotesingle.ts1
TheUPDATE statement speciﬁes a table and then a list of ﬁelds and values to change
after the SETkeyword and then an optional WHERE clause to select the rows that
are to be updated. A single UPDATE statement will change all of the rows that
match the WHERE clause. If a WHERE clause is not speciﬁed, it performs the UPDATE
on all of the rows in the table.
These four basic SQL commands (INSERT, SELECT, UPDATE, and DELETE)
allow the four basic operations needed to create and maintain data.
15.6. SPIDERING TWITTER USING A DATABASE 191
15.6 Spidering Twitter using a database
In this section, we will create a simple spidering program that will go through
Twitter accounts and build a database of them. Note: Be very careful when running
this program. You do not want to pull too much data or run the pr ogram for too
long and end up having your Twitter access shut oﬀ.
One of the problems of any kind of spidering program is that it needs to be able
to be stopped and restarted many times and you do not want to lose the data tha t
you have retrieved so far. You don’t want to always restart your data retr ieval at
the very beginning so we want to store data as we retrieve it so our program ca n
start back up and pick up where it left oﬀ.
We will start by retrieving one person’s Twitter friends and their statuses, l ooping
through the list of friends, and adding each of the friends to a database to be
retrieved in the future. After we process one person’s Twitter friends, we check
in our database and retrieve one of the friends of the friend. We do this over and
over, picking an “unvisited” person, retrieving their friend list, and adding fri ends
we have not seen to our list for a future visit.
We also track how many times we have seen a particular friend in the database t o
get some sense of their “popularity”.
By storing our list of known accounts and whether we have retrieved the account
or not, and how popular the account is in a database on the disk of the computer,
we can stop and restart our program as many times as we like.
This program is a bit complex. It is based on the code from the exercise earlier in
the book that uses the Twitter API.
Here is the source code for our Twitter spidering application:
from urllib.request import urlopen
import urllib.error
import twurl
import json
import sqlite3
import ssl
TWITTER_URL =/quotesingle.ts1https://api.twitter.com/1.1/friends/list.json/quotesingle.ts1
conn =sqlite3.connect( /quotesingle.ts1spider.sqlite/quotesingle.ts1 )
cur =conn.cursor()
cur.execute( /quotesingle.ts1/quotesingle.ts1/quotesingle.ts1
CREATE TABLE IF NOT EXISTS Twitter
(name TEXT, retrieved INTEGER, friends INTEGER)/quotesingle.ts1/quotesingle.ts1/quotesingle.ts1 )
# Ignore SSL certificate errors
ctx =ssl.create_default_context()
ctx.check_hostname =False
ctx.verify_mode =ssl.CERT_NONE
192 CHAPTER 15. USING DATABASES AND SQL
while True:
acct =input( /quotesingle.ts1Enter a Twitter account, or quit: /quotesingle.ts1 )
if(acct ==/quotesingle.ts1quit/quotesingle.ts1 ):break
if(len(acct) <1):
cur.execute( /quotesingle.ts1SELECT name FROM Twitter WHERE retrieved = 0 LIMIT 1/quotesingle.ts1 )
try:
acct =cur.fetchone()[ 0]
except :
print( /quotesingle.ts1No unretrieved Twitter accounts found/quotesingle.ts1 )
continue
url=twurl.augment(TWITTER_URL, { /quotesingle.ts1screen_name/quotesingle.ts1 : acct, /quotesingle.ts1count/quotesingle.ts1 :/quotesingle.ts15/quotesingle.ts1})
print( /quotesingle.ts1Retrieving/quotesingle.ts1 , url)
connection =urlopen(url, context =ctx)
data =connection.read().decode()
headers =dict(connection.getheaders())
print( /quotesingle.ts1Remaining/quotesingle.ts1 , headers[ /quotesingle.ts1x-rate-limit-remaining/quotesingle.ts1 ])
js=json.loads(data)
# Debugging
# print json.dumps(js, indent=4)
cur.execute( /quotesingle.ts1UPDATE Twitter SET retrieved=1 WHERE name = ?/quotesingle.ts1 , (acct, ))
countnew =0
countold =0
foruinjs[/quotesingle.ts1users/quotesingle.ts1 ]:
friend =u[/quotesingle.ts1screen_name/quotesingle.ts1 ]
print(friend)
cur.execute( /quotesingle.ts1SELECT friends FROM Twitter WHERE name = ? LIMIT 1/quotesingle.ts1 ,
(friend, ))
try:
count =cur.fetchone()[ 0]
cur.execute( /quotesingle.ts1UPDATE Twitter SET friends = ? WHERE name = ?/quotesingle.ts1 ,
(count +1, friend))
countold =countold +1
except :
cur.execute( /quotesingle.ts1/quotesingle.ts1/quotesingle.ts1INSERT INTO Twitter (name, retrieved, friends)
VALUES (?, 0, 1)/quotesingle.ts1/quotesingle.ts1/quotesingle.ts1 , (friend, ))
countnew =countnew +1
print( /quotesingle.ts1New accounts=/quotesingle.ts1 , countnew, /quotesingle.ts1 revisited=/quotesingle.ts1 , countold)
conn.commit()
cur.close()
# Code: http://www.py4e.com/code3/twspider.py
Our database is stored in the ﬁle spider.sqlite3 and it has one table named
Twitter . Each row in the Twitter table has a column for the account name,
whether we have retrieved the friends of this account, and how many times this
account has been “friended”.
15.6. SPIDERING TWITTER USING A DATABASE 193
In the main loop of the program, we prompt the user for a Twitter account name
or “quit” to exit the program. If the user enters a Twitter account, we retrieve
the list of friends and statuses for that user and add each friend to the database
if not already in the database. If the friend is already in the list, we add 1 to t he
friends ﬁeld in the row in the database.
If the user presses enter, we look in the database for the next Twitter account that
we have not yet retrieved, retrieve the friends and statuses for that account, add
them to the database or update them, and increase their friends count.
Once we retrieve the list of friends and statuses, we loop through all of the user
items in the returned JSON and retrieve the screen_name for each user. Then
we use the SELECT statement to see if we already have stored this particular
screen_name in the database and retrieve the friend count ( friends ) if the record
exists.
countnew =0
countold =0
for uinjs[/quotesingle.ts1users/quotesingle.ts1 ] :
friend =u[/quotesingle.ts1screen_name/quotesingle.ts1 ]
print(friend)
cur.execute( /quotesingle.ts1SELECT friends FROM Twitter WHERE name = ? LIMIT 1/quotesingle.ts1 ,
(friend, ) )
try:
count =cur.fetchone()[ 0]
cur.execute( /quotesingle.ts1UPDATE Twitter SET friends = ? WHERE name = ?/quotesingle.ts1 ,
(count +1, friend) )
countold =countold +1
except :
cur.execute( /quotesingle.ts1/quotesingle.ts1/quotesingle.ts1INSERT INTO Twitter (name, retrieved, friends)
VALUES ( ?, 0, 1 )/quotesingle.ts1/quotesingle.ts1/quotesingle.ts1 , ( friend, ) )
countnew =countnew +1
print( /quotesingle.ts1New accounts=/quotesingle.ts1 ,countnew, /quotesingle.ts1 revisited=/quotesingle.ts1 ,countold)
conn.commit()
Once the cursor executes the SELECT statement, we must retrieve the rows. We
could do this with a forstatement, but since we are only retrieving one row ( LIMIT
1), we can use the fetchone() method to fetch the ﬁrst (and only) row that is the
result of the SELECT operation. Since fetchone() returns the row as a tuple (even
though there is only one ﬁeld), we take the ﬁrst value from the tuple using to get
the current friend count into the variable count .
If this retrieval is successful, we use the SQL UPDATE statement with a WHERE clause
to add 1 to the friends column for the row that matches the friend’s account.
Notice that there are two placeholders (i.e., question marks) in the SQL, and the
second parameter to the execute() is a two-element tuple that holds the values
to be substituted into the SQL in place of the question marks.
If the code in the tryblock fails, it is probably because no record matched the
WHERE name = ? clause on the SELECT statement. So in the except block, we
use the SQL INSERT statement to add the friend’s screen_name to the table with
an indication that we have not yet retrieved the screen_name and set the friend
count to zero.
194 CHAPTER 15. USING DATABASES AND SQL
So the ﬁrst time the program runs and we enter a Twitter account, the program
runs as follows:
Enter a Twitter account, or quit: drchuck
Retrieving http://api.twitter.com/1.1/friends ...
New accounts= 20 revisited= 0
Enter a Twitter account, or quit: quit
Since this is the ﬁrst time we have run the program, the database is empty and we
create the database in the ﬁle spider.sqlite3 and add a table named Twitter
to the database. Then we retrieve some friends and add them all to the database
since the database is empty.
At this point, we might want to write a simple database dumper to take a look at
what is in our spider.sqlite3 ﬁle:
import sqlite3
conn =sqlite3.connect( /quotesingle.ts1spider.sqlite/quotesingle.ts1 )
cur =conn.cursor()
cur.execute( /quotesingle.ts1SELECT * FROM Twitter/quotesingle.ts1 )
count =0
for rowincur:
print(row)
count =count +1
print(count, /quotesingle.ts1rows./quotesingle.ts1 )
cur.close()
# Code: http://www.py4e.com/code3/twdump.py
This program simply opens the database and selects all of the columns of all of the
rows in the table Twitter , then loops through the rows and prints out each row.
If we run this program after the ﬁrst execution of our Twitter spider above, its
output will be as follows:
(/quotesingle.ts1opencontent/quotesingle.ts1, 0, 1)
(/quotesingle.ts1lhawthorn/quotesingle.ts1, 0, 1)
(/quotesingle.ts1steve_coppin/quotesingle.ts1, 0, 1)
(/quotesingle.ts1davidkocher/quotesingle.ts1, 0, 1)
(/quotesingle.ts1hrheingold/quotesingle.ts1, 0, 1)
...
20 rows.
We see one row for each screen_name , that we have not retrieved the data for that
screen_name , and everyone in the database has one friend.
Now our database reﬂects the retrieval of the friends of our ﬁrst Twitter account
(drchuck ). We can run the program again and tell it to retrieve the friends of the
next “unprocessed” account by simply pressing enter instead of a Twitter account
as follows:
15.6. SPIDERING TWITTER USING A DATABASE 195
Enter a Twitter account, or quit:
Retrieving http://api.twitter.com/1.1/friends ...
New accounts= 18 revisited= 2
Enter a Twitter account, or quit:
Retrieving http://api.twitter.com/1.1/friends ...
New accounts= 17 revisited= 3
Enter a Twitter account, or quit: quit
Since we pressed enter (i.e., we did not specify a Twitter account), the following
code is executed:
if( len(acct) <1) :
cur.execute( /quotesingle.ts1SELECT name FROM Twitter WHERE retrieved = 0 LIMIT 1/quotesingle.ts1 )
try:
acct =cur.fetchone()[ 0]
except :
print( /quotesingle.ts1No unretrieved twitter accounts found/quotesingle.ts1 )
continue
We use the SQL SELECT statement to retrieve the name of the ﬁrst ( LIMIT 1 ) user
who still has their “have we retrieved this user” value set to zero. We also use the
fetchone()[0] pattern within a try/except block to either extract a screen_name
from the retrieved data or put out an error message and loop back up.
If we successfully retrieved an unprocessed screen_name , we retrieve their data as
follows:
url=twurl.augment(TWITTER_URL,{ /quotesingle.ts1screen_name/quotesingle.ts1 : acct, /quotesingle.ts1count/quotesingle.ts1 :/quotesingle.ts120/quotesingle.ts1})
print( /quotesingle.ts1Retrieving/quotesingle.ts1 , url)
connection =urllib.urlopen(url)
data =connection.read()
js=json.loads(data)
cur.execute( /quotesingle.ts1UPDATE Twitter SET retrieved=1 WHERE name = ?/quotesingle.ts1 ,(acct, ))
Once we retrieve the data successfully, we use the UPDATE statement to set the
retrieved column to 1 to indicate that we have completed the retrieval of the
friends of this account. This keeps us from retrieving the same data over and over
and keeps us progressing forward through the network of Twitter friends.
If we run the friend program and press enter twice to retrieve the next unvisited
friend’s friends, then run the dumping program, it will give us the following output:
(/quotesingle.ts1opencontent/quotesingle.ts1, 1, 1)
(/quotesingle.ts1lhawthorn/quotesingle.ts1, 1, 1)
(/quotesingle.ts1steve_coppin/quotesingle.ts1, 0, 1)
(/quotesingle.ts1davidkocher/quotesingle.ts1, 0, 1)
(/quotesingle.ts1hrheingold/quotesingle.ts1, 0, 1)
...
(/quotesingle.ts1cnxorg/quotesingle.ts1, 0, 2)
(/quotesingle.ts1knoop/quotesingle.ts1, 0, 1)
196 CHAPTER 15. USING DATABASES AND SQL
(/quotesingle.ts1kthanos/quotesingle.ts1, 0, 2)
(/quotesingle.ts1LectureTools/quotesingle.ts1, 0, 1)
...
55 rows.
We can see that we have properly recorded that we have visited lhawthorn and
opencontent . Also the accounts cnxorg andkthanos already have two followers.
Since we now have retrieved the friends of three people ( drchuck ,opencontent ,
andlhawthorn ) our table has 55 rows of friends to retrieve.
Each time we run the program and press enter it will pick the next unvisited
account (e.g., the next account will be steve_coppin ), retrieve their friends, mark
them as retrieved, and for each of the friends of steve_coppin either add them
to the end of the database or update their friend count if they are already in the
database.
Since the program’s data is all stored on disk in a database, the spidering activi ty
can be suspended and resumed as many times as you like with no loss of data.
15.7 Basic data modeling
The real power of a relational database is when we create multiple tables and mak e
links between those tables. The act of deciding how to break up your application
data into multiple tables and establishing the relationships between the tables
is called data modeling . The design document that shows the tables and their
relationships is called a data model .
Data modeling is a relatively sophisticated skill and we will only introduce the
most basic concepts of relational data modeling in this section. For more detail o n
data modeling you can start with:
http://en.wikipedia.org/wiki/Relational_model
Let’s say for our Twitter spider application, instead of just counting a person’s
friends, we wanted to keep a list of all of the incoming relationships so we could
ﬁnd a list of everyone who is following a particular account.
Since everyone will potentially have many accounts that follow them, we cannot
simply add a single column to our Twitter table. So we create a new table that
keeps track of pairs of friends. The following is a simple way of making such a
table:
CREATE TABLE Pals (from_friend TEXT, to_friend TEXT)
Each time we encounter a person who drchuck is following, we would insert a row
of the form:
INSERT INTO Pals (from_friend,to_friend) VALUES (/quotesingle.ts1drchuck/quotesingle.ts1 ,/quotesingle.ts1lhawthorn/quotesingle.ts1 )
As we are processing the 20 friends from the drchuck Twitter feed, we will insert
20 records with “drchuck” as the ﬁrst parameter so we will end up duplicating the
string many times in the database.
15.8. PROGRAMMING WITH MULTIPLE TABLES 197
This duplication of string data violates one of the best practices for database nor-
malization which basically states that we should never put the same string data
in the database more than once. If we need the data more than once, we create a
numeric keyfor the data and reference the actual data using this key.
In practical terms, a string takes up a lot more space than an integer on the dis k
and in the memory of our computer, and takes more processor time to compare
and sort. If we only have a few hundred entries, the storage and processor time
hardly matters. But if we have a million people in our database and a possibi lity
of 100 million friend links, it is important to be able to scan data as quickly as
possible.
We will store our Twitter accounts in a table named People instead of the Twitter
table used in the previous example. The People table has an additional column
to store the numeric key associated with the row for this Twitter user. SQLit e has
a feature that automatically adds the key value for any row we insert into a t able
using a special type of data column ( INTEGER PRIMARY KEY ).
We can create the People table with this additional idcolumn as follows:
CREATE TABLE People
(idINTEGER PRIMARY KEY , name TEXT UNIQUE , retrieved INTEGER )
Notice that we are no longer maintaining a friend count in each row of the People
table. When we select INTEGER PRIMARY KEY as the type of our idcolumn, we are
indicating that we would like SQLite to manage this column and assign a unique
numeric key to each row we insert automatically. We also add the keyword UNIQUE
to indicate that we will not allow SQLite to insert two rows with the same v alue
forname.
Now instead of creating the table Pals above, we create a table called Follows
with two integer columns from_id andto_id and a constraint on the table that the
combination offrom_id andto_id must be unique in this table (i.e., we cannot
insert duplicate rows) in our database.
CREATE TABLE Follows
(from_id INTEGER , to_id INTEGER ,UNIQUE (from_id, to_id) )
When we add UNIQUE clauses to our tables, we are communicating a set of rules
that we are asking the database to enforce when we attempt to insert records.
We are creating these rules as a convenience in our programs, as we will see in a
moment. The rules both keep us from making mistakes and make it simpler to
write some of our code.
In essence, in creating this Follows table, we are modelling a “relationship” where
one person “follows” someone else and representing it with a pair of numbers i ndi-
cating that (a) the people are connected and (b) the direction of the relationship.
15.8 Programming with multiple tables
We will now redo the Twitter spider program using two tables, the primary keys,
and the key references as described above. Here is the code for the new version of
the program:
198 CHAPTER 15. USING DATABASES AND SQL
People
name
drchuck
opencontent 1
1retrievedFollows
from_id
1
1 3to_idid
1
2
3
4lhawthorn
steve_coppin1
02
1 4
......
Figure 15.4: Relationships Between Tables
import urllib.request, urllib.parse, urllib.error
import twurl
import json
import sqlite3
import ssl
TWITTER_URL =/quotesingle.ts1https://api.twitter.com/1.1/friends/list.json/quotesingle.ts1
conn =sqlite3.connect( /quotesingle.ts1friends.sqlite/quotesingle.ts1 )
cur =conn.cursor()
cur.execute( /quotesingle.ts1/quotesingle.ts1/quotesingle.ts1CREATE TABLE IF NOT EXISTS People
(id INTEGER PRIMARY KEY, name TEXT UNIQUE, retrieved INTEGE R)/quotesingle.ts1/quotesingle.ts1/quotesingle.ts1 )
cur.execute( /quotesingle.ts1/quotesingle.ts1/quotesingle.ts1CREATE TABLE IF NOT EXISTS Follows
(from_id INTEGER, to_id INTEGER, UNIQUE(from_id, to_id)) /quotesingle.ts1/quotesingle.ts1/quotesingle.ts1)
# Ignore SSL certificate errors
ctx =ssl.create_default_context()
ctx.check_hostname =False
ctx.verify_mode =ssl.CERT_NONE
while True:
acct =input( /quotesingle.ts1Enter a Twitter account, or quit: /quotesingle.ts1 )
if(acct ==/quotesingle.ts1quit/quotesingle.ts1 ):break
if(len(acct) <1):
cur.execute( /quotesingle.ts1SELECT id, name FROM People WHERE retrieved = 0 LIMIT 1/quotesingle.ts1 )
try:
(id, acct) =cur.fetchone()
15.8. PROGRAMMING WITH MULTIPLE TABLES 199
except :
print( /quotesingle.ts1No unretrieved Twitter accounts found/quotesingle.ts1 )
continue
else:
cur.execute( /quotesingle.ts1SELECT id FROM People WHERE name = ? LIMIT 1/quotesingle.ts1 ,
(acct, ))
try:
id=cur.fetchone()[ 0]
except :
cur.execute( /quotesingle.ts1/quotesingle.ts1/quotesingle.ts1INSERT OR IGNORE INTO People
(name, retrieved) VALUES (?, 0)/quotesingle.ts1/quotesingle.ts1/quotesingle.ts1 , (acct, ))
conn.commit()
ifcur.rowcount !=1:
print( /quotesingle.ts1Error inserting account:/quotesingle.ts1 , acct)
continue
id=cur.lastrowid
url=twurl.augment(TWITTER_URL, { /quotesingle.ts1screen_name/quotesingle.ts1 : acct, /quotesingle.ts1count/quotesingle.ts1 :/quotesingle.ts1100/quotesingle.ts1 })
print( /quotesingle.ts1Retrieving account/quotesingle.ts1 , acct)
try:
connection =urllib.request.urlopen(url, context =ctx)
except Exception as err:
print( /quotesingle.ts1Failed to Retrieve/quotesingle.ts1 , err)
break
data =connection.read().decode()
headers =dict(connection.getheaders())
print( /quotesingle.ts1Remaining/quotesingle.ts1 , headers[ /quotesingle.ts1x-rate-limit-remaining/quotesingle.ts1 ])
try:
js=json.loads(data)
except :
print( /quotesingle.ts1Unable to parse json/quotesingle.ts1 )
print(data)
break
# Debugging
# print(json.dumps(js, indent=4))
if/quotesingle.ts1users/quotesingle.ts1 not in js:
print( /quotesingle.ts1Incorrect JSON received/quotesingle.ts1 )
print(json.dumps(js, indent =4))
continue
cur.execute( /quotesingle.ts1UPDATE People SET retrieved=1 WHERE name = ?/quotesingle.ts1 , (acct, ))
countnew =0
countold =0
foruinjs[/quotesingle.ts1users/quotesingle.ts1 ]:
friend =u[/quotesingle.ts1screen_name/quotesingle.ts1 ]
200 CHAPTER 15. USING DATABASES AND SQL
print(friend)
cur.execute( /quotesingle.ts1SELECT id FROM People WHERE name = ? LIMIT 1/quotesingle.ts1 ,
(friend, ))
try:
friend_id =cur.fetchone()[ 0]
countold =countold +1
except :
cur.execute( /quotesingle.ts1/quotesingle.ts1/quotesingle.ts1INSERT OR IGNORE INTO People (name, retrieved)
VALUES (?, 0)/quotesingle.ts1/quotesingle.ts1/quotesingle.ts1 , (friend, ))
conn.commit()
ifcur.rowcount !=1:
print( /quotesingle.ts1Error inserting account:/quotesingle.ts1 , friend)
continue
friend_id =cur.lastrowid
countnew =countnew +1
cur.execute( /quotesingle.ts1/quotesingle.ts1/quotesingle.ts1INSERT OR IGNORE INTO Follows (from_id, to_id)
VALUES (?, ?)/quotesingle.ts1/quotesingle.ts1/quotesingle.ts1 , (id, friend_id))
print( /quotesingle.ts1New accounts=/quotesingle.ts1 , countnew, /quotesingle.ts1 revisited=/quotesingle.ts1 , countold)
print( /quotesingle.ts1Remaining/quotesingle.ts1 , headers[ /quotesingle.ts1x-rate-limit-remaining/quotesingle.ts1 ])
conn.commit()
cur.close()
# Code: http://www.py4e.com/code3/twfriends.py
This program is starting to get a bit complicated, but it illustrates the patterns
that we need to use when we are using integer keys to link tables. The basic
patterns are:
1. Create tables with primary keys and constraints.
2. When we have a logical key for a person (i.e., account name) and we need the
idvalue for the person, depending on whether or not the person is already
in the People table we either need to: (1) look up the person in the People
table and retrieve the idvalue for the person or (2) add the person to the
People table and get the idvalue for the newly added row.
3. Insert the row that captures the “follows” relationship.
We will cover each of these in turn.
15.8.1 Constraints in database tables
As we design our table structures, we can tell the database system that we would
like it to enforce a few rules on us. These rules help us from making mistakes and
introducing incorrect data into out tables. When we create our tables:
cur.execute( /quotesingle.ts1/quotesingle.ts1/quotesingle.ts1CREATE TABLE IF NOT EXISTS People
(id INTEGER PRIMARY KEY, name TEXT UNIQUE, retrieved INTEGE R)/quotesingle.ts1/quotesingle.ts1/quotesingle.ts1 )
cur.execute( /quotesingle.ts1/quotesingle.ts1/quotesingle.ts1CREATE TABLE IF NOT EXISTS Follows
(from_id INTEGER, to_id INTEGER, UNIQUE(from_id, to_id)) /quotesingle.ts1/quotesingle.ts1/quotesingle.ts1)
15.8. PROGRAMMING WITH MULTIPLE TABLES 201
We indicate that the name column in the People table must be UNIQUE . We also
indicate that the combination of the two numbers in each row of the Follows table
must be unique. These constraints keep us from making mistakes such as adding
the same relationship more than once.
We can take advantage of these constraints in the following code:
cur.execute( /quotesingle.ts1/quotesingle.ts1/quotesingle.ts1INSERT OR IGNORE INTO People (name, retrieved)
VALUES ( ?, 0)/quotesingle.ts1/quotesingle.ts1/quotesingle.ts1 , ( friend, ) )
We add the OR IGNORE clause to our INSERT statement to indicate that if this
particular INSERT would cause a violation of the “ name must be unique” rule, the
database system is allowed to ignore the INSERT . We are using the database con-
straint as a safety net to make sure we don’t inadvertently do something incorrect .
Similarly, the following code ensures that we don’t add the exact same Follows
relationship twice.
cur.execute( /quotesingle.ts1/quotesingle.ts1/quotesingle.ts1INSERT OR IGNORE INTO Follows
(from_id, to_id) VALUES (?, ?)/quotesingle.ts1/quotesingle.ts1/quotesingle.ts1 , (id, friend_id) )
Again, we simply tell the database to ignore our attempted INSERT if it would
violate the uniqueness constraint that we speciﬁed for the Follows rows.
15.8.2 Retrieve and/or insert a record
When we prompt the user for a Twitter account, if the account exists, we must
look up its idvalue. If the account does not yet exist in the People table, we must
insert the record and get the idvalue from the inserted row.
This is a very common pattern and is done twice in the program above. This code
shows how we look up the idfor a friend’s account when we have extracted a
screen_name from a user node in the retrieved Twitter JSON.
Since over time it will be increasingly likely that the account will already be i n
the database, we ﬁrst check to see if the People record exists using a SELECT
statement.
If all goes well2inside the trysection, we retrieve the record using fetchone()
and then retrieve the ﬁrst (and only) element of the returned tuple and store it in
friend_id .
If the SELECT fails, the fetchone()[0] code will fail and control will transfer into
theexcept section.
friend =u[/quotesingle.ts1screen_name/quotesingle.ts1 ]
cur.execute( /quotesingle.ts1SELECT id FROM People WHERE name = ? LIMIT 1/quotesingle.ts1 ,
(friend, ) )
try:
2In general, when a sentence starts with “if all goes well” you will ﬁnd that the code needs to
use try/except.
202 CHAPTER 15. USING DATABASES AND SQL
friend_id =cur.fetchone()[ 0]
countold =countold +1
except :
cur.execute( /quotesingle.ts1/quotesingle.ts1/quotesingle.ts1INSERT OR IGNORE INTO People (name, retrieved)
VALUES ( ?, 0)/quotesingle.ts1/quotesingle.ts1/quotesingle.ts1 , ( friend, ) )
conn.commit()
ifcur.rowcount !=1:
print( /quotesingle.ts1Error inserting account:/quotesingle.ts1 ,friend)
continue
friend_id =cur.lastrowid
countnew =countnew +1
If we end up in the except code, it simply means that the row was not found, so
we must insert the row. We use INSERT OR IGNORE just to avoid errors and then
callcommit() to force the database to really be updated. After the write is done,
we can check the cur.rowcount to see how many rows were aﬀected. Since we are
attempting to insert a single row, if the number of aﬀected rows is something ot her
than 1, it is an error.
If the INSERT is successful, we can look at cur.lastrowid to ﬁnd out what value
the database assigned to the idcolumn in our newly created row.
15.8.3 Storing the friend relationship
Once we know the key value for both the Twitter user and the friend in the JSON,
it is a simple matter to insert the two numbers into the Follows table with the
following code:
cur.execute( /quotesingle.ts1INSERT OR IGNORE INTO Follows (from_id, to_id) VALUES (?, ? )/quotesingle.ts1,
(id, friend_id) )
Notice that we let the database take care of keeping us from “double-inserting” a
relationship by creating the table with a uniqueness constraint and then adding
OR IGNORE to our INSERT statement.
Here is a sample execution of this program:
Enter a Twitter account, or quit:
No unretrieved Twitter accounts found
Enter a Twitter account, or quit: drchuck
Retrieving http://api.twitter.com/1.1/friends ...
New accounts= 20 revisited= 0
Enter a Twitter account, or quit:
Retrieving http://api.twitter.com/1.1/friends ...
New accounts= 17 revisited= 3
Enter a Twitter account, or quit:
Retrieving http://api.twitter.com/1.1/friends ...
New accounts= 17 revisited= 3
Enter a Twitter account, or quit: quit
15.9. THREE KINDS OF KEYS 203
We started with the drchuck account and then let the program automatically pick
the next two accounts to retrieve and add to our database.
The following is the ﬁrst few rows in the People andFollows tables after this run
is completed:
People:
(1, /quotesingle.ts1drchuck/quotesingle.ts1, 1)
(2, /quotesingle.ts1opencontent/quotesingle.ts1, 1)
(3, /quotesingle.ts1lhawthorn/quotesingle.ts1, 1)
(4, /quotesingle.ts1steve_coppin/quotesingle.ts1, 0)
(5, /quotesingle.ts1davidkocher/quotesingle.ts1, 0)
55 rows.
Follows:
(1, 2)
(1, 3)
(1, 4)
(1, 5)
(1, 6)
60 rows.
You can see the id,name, and visited ﬁelds in the People table and you see
the numbers of both ends of the relationship in the Follows table. In the People
table, we can see that the ﬁrst three people have been visited and their data has
been retrieved. The data in the Follows table indicates that drchuck (user 1) is
a friend to all of the people shown in the ﬁrst ﬁve rows. This makes sense because
the ﬁrst data we retrieved and stored was the Twitter friends of drchuck . If you
were to print more rows from the Follows table, you would see the friends of users
2 and 3 as well.
15.9 Three kinds of keys
Now that we have started building a data model putting our data into multiple
linked tables and linking the rows in those tables using keys, we need to look at
some terminology around keys. There are generally three kinds of keys used in a
database model.
• A logical key is a key that the “real world” might use to look up a row. In
our example data model, the name ﬁeld is a logical key. It is the screen name
for the user and we indeed look up a user’s row several times in the program
using the name ﬁeld. You will often ﬁnd that it makes sense to add a UNIQUE
constraint to a logical key. Since the logical key is how we look up a row
from the outside world, it makes little sense to allow multiple rows wit h the
same value in the table.
• A primary key is usually a number that is assigned automatically by the
database. It generally has no meaning outside the program and is only used
to link rows from diﬀerent tables together. When we want to look up a row
in a table, usually searching for the row using the primary key is the fastest
way to ﬁnd the row. Since primary keys are integer numbers, they take up
very little storage and can be compared or sorted very quickly. In our data
model, the idﬁeld is an example of a primary key.
204 CHAPTER 15. USING DATABASES AND SQL
• A foreign key is usually a number that points to the primary key of an
associated row in a diﬀerent table. An example of a foreign key in our data
model is the from_id .
We are using a naming convention of always calling the primary key ﬁeld name id
and appending the suﬃx _idto any ﬁeld name that is a foreign key.
15.10 Using JOIN to retrieve data
Now that we have followed the rules of database normalization and have data
separated into two tables, linked together using primary and foreign keys, we need
to be able to build a SELECT that reassembles the data across the tables.
SQL uses the JOIN clause to reconnect these tables. In the JOIN clause you specify
the ﬁelds that are used to reconnect the rows between the tables.
The following is an example of a SELECT with a JOIN clause:
SELECT *FROM Follows JOIN People
ONFollows.from_id = People.id WHERE People.id = 1
TheJOIN clause indicates that the ﬁelds we are selecting cross both the Follows
andPeople tables. The ONclause indicates how the two tables are to be joined:
Take the rows from Follows and append the row from People where the ﬁeld
from_id inFollows is the same the idvalue in the People table.
People
name
drchuck
opencontent 1
1retrievedFollows
from_id
1
1 3to_idid
1
2
3
4lhawthorn
steve_coppin1
02
1 4
......
name
drchuck opencontentid
1 2
3
4lhawthorn
steve_coppindrchuck 1
drchuck 1to_id name from_id
1
1
1
Figure 15.5: Connecting Tables Using JOIN
15.10. USING JOIN TO RETRIEVE DATA 205
The result of the JOIN is to create extra-long “metarows” which have both the
ﬁelds from People and the matching ﬁelds from Follows . Where there is more
than one match between the idﬁeld from People and the from_id from People ,
then JOIN creates a metarow for each of the matching pairs of rows, duplicating
data as needed.
The following code demonstrates the data that we will have in the database after
the multi-table Twitter spider program (above) has been run several times.
import sqlite3
conn =sqlite3.connect( /quotesingle.ts1friends.sqlite/quotesingle.ts1 )
cur =conn.cursor()
cur.execute( /quotesingle.ts1SELECT * FROM People/quotesingle.ts1 )
count =0
print( /quotesingle.ts1People:/quotesingle.ts1 )
for rowincur:
ifcount <5: print(row)
count =count +1
print(count, /quotesingle.ts1rows./quotesingle.ts1 )
cur.execute( /quotesingle.ts1SELECT * FROM Follows/quotesingle.ts1 )
count =0
print( /quotesingle.ts1Follows:/quotesingle.ts1 )
for rowincur:
ifcount <5: print(row)
count =count +1
print(count, /quotesingle.ts1rows./quotesingle.ts1 )
cur.execute( /quotesingle.ts1/quotesingle.ts1/quotesingle.ts1SELECT * FROM Follows JOIN People
ON Follows.to_id = People.id
WHERE Follows.from_id = 2/quotesingle.ts1/quotesingle.ts1/quotesingle.ts1 )
count =0
print( /quotesingle.ts1Connections for id=2:/quotesingle.ts1 )
for rowincur:
ifcount <5: print(row)
count =count +1
print(count, /quotesingle.ts1rows./quotesingle.ts1 )
cur.close()
# Code: http://www.py4e.com/code3/twjoin.py
In this program, we ﬁrst dump out the People andFollows and then dump out
a subset of the data in the tables joined together.
Here is the output of the program:
python twjoin.py
People:
206 CHAPTER 15. USING DATABASES AND SQL
(1, /quotesingle.ts1drchuck/quotesingle.ts1, 1)
(2, /quotesingle.ts1opencontent/quotesingle.ts1, 1)
(3, /quotesingle.ts1lhawthorn/quotesingle.ts1, 1)
(4, /quotesingle.ts1steve_coppin/quotesingle.ts1, 0)
(5, /quotesingle.ts1davidkocher/quotesingle.ts1, 0)
55 rows.
Follows:
(1, 2)
(1, 3)
(1, 4)
(1, 5)
(1, 6)
60 rows.
Connections for id=2:
(2, 1, 1, /quotesingle.ts1drchuck/quotesingle.ts1, 1)
(2, 28, 28, /quotesingle.ts1cnxorg/quotesingle.ts1, 0)
(2, 30, 30, /quotesingle.ts1kthanos/quotesingle.ts1, 0)
(2, 102, 102, /quotesingle.ts1SomethingGirl/quotesingle.ts1, 0)
(2, 103, 103, /quotesingle.ts1ja_Pac/quotesingle.ts1, 0)
20 rows.
You see the columns from the People andFollows tables and the last set of rows
is the result of the SELECT with the JOIN clause.
In the last select, we are looking for accounts that are friends of “opencontent ”
(i.e., People.id=2 ).
In each of the “metarows” in the last select, the ﬁrst two columns are from the
Follows table followed by columns three through ﬁve from the People table. You
can also see that the second column ( Follows.to_id ) matches the third column
(People.id ) in each of the joined-up “metarows”.
15.11 Summary
This chapter has covered a lot of ground to give you an overview of the basics of
using a database in Python. It is more complicated to write the code to use a
database to store data than Python dictionaries or ﬂat ﬁles so there is little reason
to use a database unless your application truly needs the capabilities of a database.
The situations where a database can be quite useful are: (1) when your application
needs to make small many random updates within a large data set, (2) when your
data is so large it cannot ﬁt in a dictionary and you need to look up information
repeatedly, or (3) when you have a long-running process that you want to be able
to stop and restart and retain the data from one run to the next.
You can build a simple database with a single table to suit many application needs,
but most problems will require several tables and links/relationships between row s
in diﬀerent tables. When you start making links between tables, it is importa nt to
do some thoughtful design and follow the rules of database normalization to m ake
the best use of the database’s capabilities. Since the primary motivation for us ing
a database is that you have a large amount of data to deal with, it is impor tant to
model your data eﬃciently so your programs run as fast as possible.
15.12. DEBUGGING 207
15.12 Debugging
One common pattern when you are developing a Python program to connect to
an SQLite database will be to run a Python program and check the results using
the Database Browser for SQLite. The browser allows you to quickly check to see
if your program is working properly.
You must be careful because SQLite takes care to keep two programs from changing
the same data at the same time. For example, if you open a database in the brow ser
and make a change to the database and have not yet pressed the “save” button
in the browser, the browser “locks” the database ﬁle and keeps any other program
from accessing the ﬁle. In particular, your Python program will not be able to
access the ﬁle if it is locked.
So a solution is to make sure to either close the database browser or use the
Filemenu to close the database in the browser before you attempt to access the
database from Python to avoid the problem of your Python code failing because
the database is locked.
15.13 Glossary
attribute One of the values within a tuple. More commonly called a “column” or
“ﬁeld”.
constraint When we tell the database to enforce a rule on a ﬁeld or a row in a
table. A common constraint is to insist that there can be no duplicate values
in a particular ﬁeld (i.e., all the values must be unique).
cursor A cursor allows you to execute SQL commands in a database and retrieve
data from the database. A cursor is similar to a socket or ﬁle handle for
network connections and ﬁles, respectively.
database browser A piece of software that allows you to directly connect to a
database and manipulate the database directly without writing a program.
foreign key A numeric key that points to the primary key of a row in another
table. Foreign keys establish relationships between rows stored in diﬀerent
tables.
index Additional data that the database software maintains as rows and inserts
into a table to make lookups very fast.
logical key A key that the “outside world” uses to look up a particular row. For
example in a table of user accounts, a person’s email address might be a good
candidate as the logical key for the user’s data.
normalization Designing a data model so that no data is replicated. We store
each item of data at one place in the database and reference it elsewhere
using a foreign key.
primary key A numeric key assigned to each row that is used to refer to one row
in a table from another table. Often the database is conﬁgured to automati-
cally assign primary keys as rows are inserted.
relation An area within a database that contains tuples and attributes. More
typically called a “table”.
tuple A single entry in a database table that is a set of attributes. More typicall y
called “row”.
208 CHAPTER 15. USING DATABASES AND SQL
Chapter 16
Visualizing data
So far we have been learning the Python language and then learning how to use
Python, the network, and databases to manipulate data.
In this chapter, we take a look at three complete applications that bring all of t hese
things together to manage and visualize data. You might use these applications a s
sample code to help get you started in solving a real-world problem.
Each of the applications is a ZIP ﬁle that you can download and extract onto yo ur
computer and execute.
16.1 Building a Google map from geocoded data
In this project, we are using the Google geocoding API to clean up some user-
entered geographic locations of university names and then placing the data on a
Google map.
To get started, download the application from:
www.py4e.com/code3/geodata.zip
The ﬁrst problem to solve is that the free Google geocoding API is rate-limited to
a certain number of requests per day. If you have a lot of data, you might need to
stop and restart the lookup process several times. So we break the problem into
two phases.
In the ﬁrst phase we take our input “survey” data in the ﬁle where.data and read it
one line at a time, and retrieve the geocoded information from Google and sto re it
in a database geodata.sqlite . Before we use the geocoding API for each user-entered
location, we simply check to see if we already have the data for that particular line
of input. The database is functioning as a local “cache” of our geocoding data to
make sure we never ask Google for the same data twice.
You can restart the process at any time by removing the ﬁle geodata.sqlite .
Run the geoload.py program. This program will read the input lines in where.data
and for each line check to see if it is already in the database. If we don’t have the
209
210 CHAPTER 16. VISUALIZING DATA
Figure 16.1: A Google Map
data for the location, it will call the geocoding API to retrieve the data and st ore
it in the database.
Here is a sample run after there is already some data in the database:
Found in database Northeastern University
Found in database University of Hong Kong, ...
Found in database Technion
Found in database Viswakarma Institute, Pune, India
Found in database UMD
Found in database Tufts University
Resolving Monash University
Retrieving http://maps.googleapis.com/maps/api/
geocode/json?address=Monash+University
Retrieved 2063 characters { "results" : [
{/quotesingle.ts1status/quotesingle.ts1: /quotesingle.ts1OK/quotesingle.ts1, /quotesingle.ts1results/quotesingle.ts1: ... }
Resolving Kokshetau Institute of Economics and Management
Retrieving http://maps.googleapis.com/maps/api/
geocode/json?address=Kokshetau+Inst ...
Retrieved 1749 characters { "results" : [
{/quotesingle.ts1status/quotesingle.ts1: /quotesingle.ts1OK/quotesingle.ts1, /quotesingle.ts1results/quotesingle.ts1: ... }
...
The ﬁrst ﬁve locations are already in the database and so they are skipped. The
program scans to the point where it ﬁnds new locations and starts retrieving them.
16.2. VISUALIZING NETWORKS AND INTERCONNECTIONS 211
Thegeoload.py program can be stopped at any time, and there is a counter that
you can use to limit the number of calls to the geocoding API for each run. Given
that the where.data only has a few hundred data items, you should not run into the
daily rate limit, but if you had more data it might take several runs over s everal
days to get your database to have all of the geocoded data for your input.
Once you have some data loaded into geodata.sqlite , you can visualize the data
using the geodump.py program. This program reads the database and writes the
ﬁlewhere.js with the location, latitude, and longitude in the form of executable
JavaScript code.
A run of the geodump.py program is as follows:
Northeastern University, ... Boston, MA 02115, USA 42.3396998 -71.08975
Bradley University, 1501 ... Peoria, IL 61625, USA 40.6963857 -89.6160811
...
Technion, Viazman 87, Kesalsaba, 32000, Israel 32.7775 35.0216667
Monash University Clayton ... VIC 3800, Australia -37.9152113 145.134682
Kokshetau, Kazakhstan 53.2833333 69.3833333
...
12 records written to where.js
Open where.html to view the data in a browser
The ﬁle where.html consists of HTML and JavaScript to visualize a Google map.
It reads the most recent data in where.js to get the data to be visualized. Here is
the format of the where.js ﬁle:
myData = [
[42.3396998,-71.08975, /quotesingle.ts1Northeastern Uni ... Boston, MA 02115/quotesingle.ts1],
[40.6963857,-89.6160811, /quotesingle.ts1Bradley University, ... Peoria, IL 61625, USA/quotesingle.ts1],
[32.7775,35.0216667, /quotesingle.ts1Technion, Viazman 87, Kesalsaba, 32000, Israel/quotesingle.ts1],
...
];
This is a JavaScript variable that contains a list of lists. The syntax f or JavaScript
list constants is very similar to Python, so the syntax should be famil iar to you.
Simply open where.html in a browser to see the locations. You can hover over each
map pin to ﬁnd the location that the geocoding API returned for the user-entered
input. If you cannot see any data when you open the where.html ﬁle, you might
want to check the JavaScript or developer console for your browser.
16.2 Visualizing networks and interconnections
In this application, we will perform some of the functions of a search engine. We
will ﬁrst spider a small subset of the web and run a simpliﬁed version of the
Google page rank algorithm to determine which pages are most highly connected,
and then visualize the page rank and connectivity of our small corner of the web.
We will use the D3 JavaScript visualization library http://d3js.org/ to produce the
visualization output.
You can download and extract this application from:
212 CHAPTER 16. VISUALIZING DATA
Figure 16.2: A Page Ranking
www.py4e.com/code3/pagerank.zip
The ﬁrst program ( spider.py ) program crawls a web site and pulls a series of pages
into the database ( spider.sqlite ), recording the links between pages. You can restart
the process at any time by removing the spider.sqlite ﬁle and rerunning spider.py .
Enter web url or enter: http://www.dr-chuck.com/
[/quotesingle.ts1http://www.dr-chuck.com/quotesingle.ts1]
How many pages:2
1 http://www.dr-chuck.com/ 12
2 http://www.dr-chuck.com/csev-blog/ 57
How many pages:
In this sample run, we told it to crawl a website and retrieve two pages. If yo u
restart the program and tell it to crawl more pages, it will not re-crawl any pages
already in the database. Upon restart it goes to a random non-crawled page and
starts there. So each successive run of spider.py is additive.
Enter web url or enter: http://www.dr-chuck.com/
[/quotesingle.ts1http://www.dr-chuck.com/quotesingle.ts1]
How many pages:3
3 http://www.dr-chuck.com/csev-blog 57
4 http://www.dr-chuck.com/dr-chuck/resume/speaking.htm 1
5 http://www.dr-chuck.com/dr-chuck/resume/index.htm 13
How many pages:
You can have multiple starting points in the same database—within the progr am,
16.2. VISUALIZING NETWORKS AND INTERCONNECTIONS 213
these are called “webs”. The spider chooses randomly amongst all non-visited links
across all the webs as the next page to spider.
If you want to dump the contents of the spider.sqlite ﬁle, you can run spdump.py
as follows:
(5, None, 1.0, 3, /quotesingle.ts1http://www.dr-chuck.com/csev-blog/quotesingle.ts1)
(3, None, 1.0, 4, /quotesingle.ts1http://www.dr-chuck.com/dr-chuck/resume/speaking.htm/quotesingle.ts1)
(1, None, 1.0, 2, /quotesingle.ts1http://www.dr-chuck.com/csev-blog//quotesingle.ts1)
(1, None, 1.0, 5, /quotesingle.ts1http://www.dr-chuck.com/dr-chuck/resume/index.htm/quotesingle.ts1)
4 rows.
This shows the number of incoming links, the old page rank, the new page rank,
the id of the page, and the url of the page. The spdump.py program only shows
pages that have at least one incoming link to them.
Once you have a few pages in the database, you can run page rank on the pages
using the sprank.py program. You simply tell it how many page rank iterations to
run.
How many iterations:2
1 0.546848992536
2 0.226714939664
[(1, 0.559), (2, 0.659), (3, 0.985), (4, 2.135), (5, 0.659)]
You can dump the database again to see that page rank has been updated:
(5, 1.0, 0.985, 3, /quotesingle.ts1http://www.dr-chuck.com/csev-blog/quotesingle.ts1)
(3, 1.0, 2.135, 4, /quotesingle.ts1http://www.dr-chuck.com/dr-chuck/resume/speaking.htm/quotesingle.ts1)
(1, 1.0, 0.659, 2, /quotesingle.ts1http://www.dr-chuck.com/csev-blog//quotesingle.ts1)
(1, 1.0, 0.659, 5, /quotesingle.ts1http://www.dr-chuck.com/dr-chuck/resume/index.htm/quotesingle.ts1)
4 rows.
You can run sprank.py as many times as you like and it will simply reﬁne the page
rank each time you run it. You can even run sprank.py a few times and then go
spider a few more pages sith spider.py and then run sprank.py to reconverge the
page rank values. A search engine usually runs both the crawling and ranking
programs all the time.
If you want to restart the page rank calculations without respidering the web pages ,
you can use spreset.py and then restart sprank.py .
How many iterations:50
1 0.546848992536
2 0.226714939664
3 0.0659516187242
4 0.0244199333
5 0.0102096489546
6 0.00610244329379
...
42 0.000109076928206
43 9.91987599002e-05
214 CHAPTER 16. VISUALIZING DATA
44 9.02151706798e-05
45 8.20451504471e-05
46 7.46150183837e-05
47 6.7857770908e-05
48 6.17124694224e-05
49 5.61236959327e-05
50 5.10410499467e-05
[(512, 0.0296), (1, 12.79), (2, 28.93), (3, 6.808), (4, 13.46)]
For each iteration of the page rank algorithm it prints the average change in page
rank per page. The network initially is quite unbalanced and so the individual
page rank values change wildly between iterations. But in a few short iterations ,
the page rank converges. You should run sprank.py long enough that the page
rank values converge.
If you want to visualize the current top pages in terms of page rank, run spjson.py
to read the database and write the data for the most highly linked pages in JSON
format to be viewed in a web browser.
Creating JSON output on spider.json...
How many nodes? 30
Open force.html in a browser to view the visualization
You can view this data by opening the ﬁle force.html in your web browser. This
shows an automatic layout of the nodes and links. You can click and drag any
node and you can also double-click on a node to ﬁnd the URL that is represented
by the node.
If you rerun the other utilities, rerun spjson.py and press refresh in the browser to
get the new data from spider.json .
16.3 Visualizing mail data
Up to this point in the book, you have become quite familiar with our mbox-
short.txt andmbox.txt data ﬁles. Now it is time to take our analysis of email data
to the next level.
In the real world, sometimes you have to pull down mail data from servers. Tha t
might take quite some time and the data might be inconsistent, error-ﬁlled, and
need a lot of cleanup or adjustment. In this section, we work with an application
that is the most complex so far and pull down nearly a gigabyte of data and
visualize it.
You can download this application from:
www.py4e.com/code3/gmane.zip
We will be using data from a free email list archiving service called www.gmane.org .
This service is very popular with open source projects because it provides a nice
searchable archive of their email activity. They also have a very liberal po licy
regarding accessing their data through their API. They have no rate limits, but
ask that you don’t overload their service and take only the data you need. You
can read gmane’s terms and conditions at this page:
16.3. VISUALIZING MAIL DATA 215
Figure 16.3: A Word Cloud from the Sakai Developer List
http://gmane.org/export.php
It is very important that you make use of the gmane.org data re sponsibly by adding
delays to your access of their services and spreading long-ru nning jobs over a longer
period of time. Do not abuse this free service and ruin it for t he rest of us.
When the Sakai email data was spidered using this software, it produced nearly a
Gigabyte of data and took a number of runs on several days. The ﬁle README.txt
in the above ZIP may have instructions as to how you can download a pre-spidered
copy of the content.sqlite ﬁle for a majority of the Sakai email corpus so you don’t
have to spider for ﬁve days just to run the programs. If you download the pre-
spidered content, you should still run the spidering process to catch up with more
recent messages.
The ﬁrst step is to spider the gmane repository. The base URL is hard-coded in the
gmane.py and is hard-coded to the Sakai developer list. You can spider another
repository by changing that base url. Make sure to delete the content.sqlite ﬁle if
you switch the base url.
Thegmane.py ﬁle operates as a responsible caching spider in that it runs slowly and
retrieves one mail message per second so as to avoid getting throttled by gma ne.
It stores all of its data in a database and can be interrupted and restarted as often
as needed. It may take many hours to pull all the data down. So you may need to
restart several times.
Here is a run of gmane.py retrieving the last ﬁve messages of the Sakai developer
list:
How many messages:10
216 CHAPTER 16. VISUALIZING DATA
http://download.gmane.org/gmane.comp.cms.sakai.devel/51410/51411 9460
nealcaidin@sakaifoundation.org 2013-04-05 re: [building ...
http://download.gmane.org/gmane.comp.cms.sakai.devel/51411/51412 3379
samuelgutierrezjimenez@gmail.com 2013-04-06 re: [building ...
http://download.gmane.org/gmane.comp.cms.sakai.devel/51412/51413 9903
da1@vt.edu 2013-04-05 [building sakai] melete 2.9 oracle ...
http://download.gmane.org/gmane.comp.cms.sakai.devel/51413/51414 349265
m.shedid@elraed-it.com 2013-04-07 [building sakai] ...
http://download.gmane.org/gmane.comp.cms.sakai.devel/51414/51415 3481
samuelgutierrezjimenez@gmail.com 2013-04-07 re: ...
http://download.gmane.org/gmane.comp.cms.sakai.devel/51415/51416 0
Does not start with From
The program scans content.sqlite from one up to the ﬁrst message number not
already spidered and starts spidering at that message. It continues spidering until
it has spidered the desired number of messages or it reaches a page that does not
appear to be a properly formatted message.
Sometimes gmane.org is missing a message. Perhaps administrators can delete
messages or perhaps they get lost. If your spider stops, and it seems it has hit
a missing message, go into the SQLite Manager and add a row with the missing
id leaving all the other ﬁelds blank and restart gmane.py . This will unstick the
spidering process and allow it to continue. These empty messages will be ignored
in the next phase of the process.
One nice thing is that once you have spidered all of the messages and have them
incontent.sqlite , you can run gmane.py again to get new messages as they are sent
to the list.
The content.sqlite data is pretty raw, with an ineﬃcient data model, and not
compressed. This is intentional as it allows you to look at content.sqlite in the
SQLite Manager to debug problems with the spidering process. It would be a bad
idea to run any queries against this database, as they would be quite slow.
The second process is to run the program gmodel.py . This program reads the raw
data from content.sqlite and produces a cleaned-up and well-modeled version of
the data in the ﬁle index.sqlite . This ﬁle will be much smaller (often 10X smaller)
than content.sqlite because it also compresses the header and body text.
Each time gmodel.py runs it deletes and rebuilds index.sqlite , allowing you to adjust
its parameters and edit the mapping tables in content.sqlite to tweak the data
cleaning process. This is a sample run of gmodel.py . It prints a line out each time
250 mail messages are processed so you can see some progress happening, as this
program may run for a while processing nearly a Gigabyte of mail data.
Loaded allsenders 1588 and mapping 28 dns mapping 1
1 2005-12-08T23:34:30-06:00 ggolden22@mac.com
251 2005-12-22T10:03:20-08:00 tpamsler@ucdavis.edu
501 2006-01-12T11:17:34-05:00 lance@indiana.edu
751 2006-01-24T11:13:28-08:00 vrajgopalan@ucmerced.edu
...
Thegmodel.py program handles a number of data cleaning tasks.
16.3. VISUALIZING MAIL DATA 217
Domain names are truncated to two levels for .com, .org, .edu, and .net. Other
domain names are truncated to three levels. So si.umich.edu becomes umich.edu
and caret.cam.ac.uk becomes cam.ac.uk. Email addresses are also forced to lower
case, and some of the @gmane.org address like the following
arwhyte-63aXycvo3TyHXe+LvDLADg@public.gmane.org
are converted to the real address whenever there is a matching real email address
elsewhere in the message corpus.
In the mapping.sqlite database there are two tables that allow you to map both
domain names and individual email addresses that change over the lifetime of the
email list. For example, Steve Githens used the following email addresses as he
changed jobs over the life of the Sakai developer list:
s-githens@northwestern.edu
sgithens@cam.ac.uk
swgithen@mtu.edu
We can add two entries to the Mapping table in mapping.sqlite sogmodel.py will
map all three to one address:
s-githens@northwestern.edu -> swgithen@mtu.edu
sgithens@cam.ac.uk -> swgithen@mtu.edu
You can also make similar entries in the DNSMapping table if there are multi ple
DNS names you want mapped to a single DNS. The following mapping was added
to the Sakai data:
iupui.edu -> indiana.edu
so all the accounts from the various Indiana University campuses are tracked to -
gether.
You can rerun the gmodel.py over and over as you look at the data, and add
mappings to make the data cleaner and cleaner. When you are done, you will have
a nicely indexed version of the email in index.sqlite . This is the ﬁle to use to do
data analysis. With this ﬁle, data analysis will be really quick.
The ﬁrst, simplest data analysis is to determine “who sent the most mail?” and
“which organization sent the most mail”? This is done using gbasic.py :
How many to dump? 5
Loaded messages= 51330 subjects= 25033 senders= 1584
Top 5 Email list participants
steve.swinsburg@gmail.com 2657
azeckoski@unicon.net 1742
ieb@tfd.co.uk 1591
csev@umich.edu 1304
david.horwitz@uct.ac.za 1184
218 CHAPTER 16. VISUALIZING DATA
Top 5 Email list organizations
gmail.com 7339
umich.edu 6243
uct.ac.za 2451
indiana.edu 2258
unicon.net 2055
Note how much more quickly gbasic.py runs compared to gmane.py or even
gmodel.py . They are all working on the same data, but gbasic.py is using the
compressed and normalized data in index.sqlite . If you have a lot of data to
manage, a multistep process like the one in this application may take a littl e
longer to develop, but will save you a lot of time when you really start to expl ore
and visualize your data.
You can produce a simple visualization of the word frequency in the subject lines
in the ﬁle gword.py :
Range of counts: 33229 129
Output written to gword.js
This produces the ﬁle gword.js which you can visualize using gword.htm to produce
a word cloud similar to the one at the beginning of this section.
A second visualization is produced by gline.py . It computes email participation by
organizations over time.
Loaded messages= 51330 subjects= 25033 senders= 1584
Top 10 Oranizations
[/quotesingle.ts1gmail.com/quotesingle.ts1, /quotesingle.ts1umich.edu/quotesingle.ts1, /quotesingle.ts1uct.ac.za/quotesingle.ts1, /quotesingle.ts1indiana.edu/quotesingle.ts1,
/quotesingle.ts1unicon.net/quotesingle.ts1, /quotesingle.ts1tfd.co.uk/quotesingle.ts1, /quotesingle.ts1berkeley.edu/quotesingle.ts1, /quotesingle.ts1longsight.com/quotesingle.ts1,
/quotesingle.ts1stanford.edu/quotesingle.ts1, /quotesingle.ts1ox.ac.uk/quotesingle.ts1]
Output written to gline.js
Its output is written to gline.js which is visualized using gline.htm .
This is a relatively complex and sophisticated application and has features to do
some real data retrieval, cleaning, and visualization.
16.3. VISUALIZING MAIL DATA 219
Figure 16.4: Sakai Mail Activity by Organization
220 CHAPTER 16. VISUALIZING DATA
Appendix A
Contributions
A.1 Contributor List for Python for Everybody
Elliott Hauser, Stephen Catto, Sue Blumenberg, Tamara Brunnock, Mihaela Mack,
Chris Kolosiwsky, Dustin Farley, Jens Leerssen, Naveen KT, Mirza Ibrahimovi c,
Naveen (@togarnk), Zhou Fangyi, Alistair Walsh, Erica Brody, Jih-Sheng Huang,
Louis Luangkesorn, and Michael Fudge
You can see contribution details at:
https://github.com/csev/py4e/graphs/contributors
A.2 Contributor List for Python for Informatics
Bruce Shields for copy editing early drafts, Sarah Hegge, Steven Cherry, Sarah
Kathleen Barbarow, Andrea Parker, Radaphat Chongthammakun, Megan Hixon,
Kirby Urner, Sarah Kathleen Barbrow, Katie Kujala, Noah Botimer, Emily
Alinder, Mark Thompson-Kular, James Perry, Eric Hofer, Eytan Adar, Peter
Robinson, Deborah J. Nelson, Jonathan C. Anthony, Eden Rassette, Jeannette
Schroeder, Justin Feezell, Chuanqi Li, Gerald Gordinier, Gavin Thomas Strassel,
Ryan Clement, Alissa Talley, Caitlin Holman, Yong-Mi Kim, Karen Stover, Cherie
Edmonds, Maria Seiferle, Romer Kristi D. Aranas (RK), Grant Boyer, Hedemarri e
Dussan,
A.3 Preface for “Think Python”
A.3.1 The strange history of “Think Python”
(Allen B. Downey)
In January 1999 I was preparing to teach an introductory programming class in
Java. I had taught it three times and I was getting frustrated. The failure ra te in
221
222 APPENDIX A. CONTRIBUTIONS
the class was too high and, even for students who succeeded, the overall level of
achievement was too low.
One of the problems I saw was the books. They were too big, with too much
unnecessary detail about Java, and not enough high-level guidance about how to
program. And they all suﬀered from the trap door eﬀect: they would start out
easy, proceed gradually, and then somewhere around Chapter 5 the bottom would
fall out. The students would get too much new material, too fast, and I would
spend the rest of the semester picking up the pieces.
Two weeks before the ﬁrst day of classes, I decided to write my own book. My
goals were:
• Keep it short. It is better for students to read 10 pages than not read 50
pages.
• Be careful with vocabulary. I tried to minimize the jargon and deﬁne each
term at ﬁrst use.
• Build gradually. To avoid trap doors, I took the most diﬃcult topics and
split them into a series of small steps.
• Focus on programming, not the programming language. I included the min-
imum useful subset of Java and left out the rest.
I needed a title, so on a whim I chose How to Think Like a Computer Scientist .
My ﬁrst version was rough, but it worked. Students did the reading, and they
understood enough that I could spend class time on the hard topics, the interesting
topics and (most important) letting the students practice.
I released the book under the GNU Free Documentation License, which allows
users to copy, modify, and distribute the book.
What happened next is the cool part. Jeﬀ Elkner, a high school teacher in Vir-
ginia, adopted my book and translated it into Python. He sent me a copy of his
translation, and I had the unusual experience of learning Python by reading my
own book.
Jeﬀ and I revised the book, incorporated a case study by Chris Meyers, and in 200 1
we released How to Think Like a Computer Scientist: Learning with Python , also
under the GNU Free Documentation License. As Green Tea Press, I published the
book and started selling hard copies through Amazon.com and college book stores .
Other books from Green Tea Press are available at greenteapress.com .
In 2003 I started teaching at Olin College and I got to teach Python for the ﬁrst
time. The contrast with Java was striking. Students struggled less, learned more,
worked on more interesting projects, and generally had a lot more fun.
Over the last ﬁve years I have continued to develop the book, correcting errors,
improving some of the examples and adding material, especially exercises. In 200 8
I started work on a major revision—at the same time, I was contacted by an editor
at Cambridge University Press who was interested in publishing the next edition.
Good timing!
I hope you enjoy working with this book, and that it helps you learn to progra m
and think, at least a little bit, like a computer scientist.
A.4. CONTRIBUTOR LIST FOR “THINK PYTHON” 223
A.3.2 Acknowledgements for “Think Python”
(Allen B. Downey)
First and most importantly, I thank Jeﬀ Elkner, who translated my Java b ook into
Python, which got this project started and introduced me to what has turned out
to be my favorite language.
I also thank Chris Meyers, who contributed several sections to How to Think Like
a Computer Scientist .
And I thank the Free Software Foundation for developing the GNU Free Documen-
tation License, which helped make my collaboration with Jeﬀ and Chris poss ible.
I also thank the editors at Lulu who worked on How to Think Like a Computer
Scientist .
I thank all the students who worked with earlier versions of this book and all t he
contributors (listed in an Appendix) who sent in corrections and suggestions.
And I thank my wife, Lisa, for her work on this book, and Green Tea Press, and
everything else, too.
Allen B. Downey
Needham MA
Allen Downey is an Associate Professor of Computer Science at the Franklin W.
Olin College of Engineering.
A.4 Contributor List for “Think Python”
(Allen B. Downey)
More than 100 sharp-eyed and thoughtful readers have sent in suggestions and
corrections over the past few years. Their contributions, and enthusiasm for this
project, have been a huge help.
For the detail on the nature of each of the contributions from these individuals,
see the “Think Python” text.
Lloyd Hugh Allen, Yvon Boulianne, Fred Bremmer, Jonah Cohen, Michael Con-
lon, Benoit Girard, Courtney Gleason and Katherine Smith, Lee Harr, James
Kaylin, David Kershaw, Eddie Lam, Man-Yong Lee, David Mayo, Chris McAloon,
Matthew J. Moelter, Simon Dicon Montford, John Ouzts, Kevin Parks, David
Pool, Michael Schmitt, Robin Shaw, Paul Sleigh, Craig T. Snydal, Ian Thomas,
Keith Verheyden, Peter Winstanley, Chris Wrobel, Moshe Zadka, Christoph Zw-
erschke, James Mayer, Hayden McAfee, Angel Arnal, Tauhidul Hoque and Lex
Berezhny, Dr. Michele Alzetta, Andy Mitchell, Kalin Harvey, Christopher P. Smith,
David Hutchins, Gregor Lingl, Julie Peters, Florin Oprina, D. J. Webre, Ken,
Ivo Wever, Curtis Yanko, Ben Logan, Jason Armstrong, Louis Cordier, Bri an
Cain, Rob Black, Jean-Philippe Rey at Ecole Centrale Paris, Jason Mader a t
George Washington University made a number Jan Gundtofte-Bruun, Abel David
and Alexis Dinno, Charles Thayer, Roger Sperberg, Sam Bull, Andrew Cheung,
C. Corey Capel, Alessandra, Wim Champagne, Douglas Wright, Jared Spindor,
224 APPENDIX A. CONTRIBUTIONS
Lin Peiheng, Ray Hagtvedt, Torsten Hübsch, Inga Petuhhov, Arne Babenhauser-
heide, Mark E. Casida, Scott Tyler, Gordon Shephard, Andrew Turner, Adam
Hobart, Daryl Hammond and Sarah Zimmerman, George Sass, Brian Bingham,
Leah Engelbert-Fenton, Joe Funke, Chao-chao Chen, Jeﬀ Paine, Lubos Pintes,
Gregg Lind and Abigail Heithoﬀ, Max Hailperin, Chotipat Pornavalai, Stani slaw
Antol, Eric Pashman, Miguel Azevedo, Jianhua Liu, Nick King, Martin Zuther,
Adam Zimmerman, Ratnakar Tiwari, Anurag Goel, Kelli Kratzer, Mark Griﬃt hs,
Roydan Ongie, Patryk Wolowiec, Mark Chonofsky, Russell Coleman, Wei Huang,
Karen Barber, Nam Nguyen, Stéphane Morin, Fernando Tardio, and Paul Stoop.
Appendix B
Copyright Detail
This work is licensed under a Creative Common Attribution-NonCommercial-
ShareAlike 3.0 Unported License. This license is available at
creativecommons.org/licenses/by-nc-sa/3.0/ .
I would have preferred to license the book under the less restrictive CC-BY-SA
license. But unfortunately there are a few unscrupulous organizations who search
for and ﬁnd freely licensed books, and then publish and sell virtually unchanged
copies of the books on a print on demand service such as LuLu or CreateSpace.
CreateSpace has (thankfully) added a policy that gives the wishes of the actual
copyright holder preference over a non-copyright holder attempting to publish a
freely licensed work. Unfortunately there are many print-on-demand services and
very few have as well-considered a policy as CreateSpace.
Regretfully, I added the NC element to the license this book to give me recourse
in case someone tries to clone this book and sell it commercially. Unfortunatel y,
adding NC limits uses of this material that I would like to permit. So I have a dded
this section of the document to describe speciﬁc situations where I am giving my
permission in advance to use the material in this book in situations that s ome
might consider commercial.
• If you are printing a limited number of copies of all or part of this book f or
use in a course (e.g., like a coursepack), then you are granted CC-BY license
to these materials for that purpose.
• If you are a teacher at a university and you translate this book into a la nguage
other than English and teach using the translated book, then you can contact
me and I will granted you a CC-BY-SA license to these materials with respect
to the publication of your translation. In particular, you will be permitt ed
to sell the resulting translated book commercially.
If you are intending to translate the book, you may want to contact me so we can
make sure that you have all of the related course materials so you can trans late
them as well.
Of course, you are welcome to contact me and ask for permission if these clauses
are not suﬃcient. In all cases, permission to reuse and remix this material w ill be
225
226 APPENDIX B. COPYRIGHT DETAIL
granted as long as there is clear added value or beneﬁt to students or teachers that
will accrue as a result of the new work.
Charles Severance
www.dr-chuck.com
Ann Arbor, MI, USA
September 9, 2013
Index
access, 92
accumulator, 64
sum, 62
algorithm, 53
aliasing, 99,100,105
copying to avoid, 102
alternative execution, 33
and operator, 32
API, 162
key,161
append method, 94,101
argument, 43,47,49,50,53,100
keyword, 119
list,100
optional, 73,97
arithmetic operator, 22
assignment, 29,91
item, 70,92,118
tuple, 120,125
assignment statement, 20
attribute, 183,207
BeautifulSoup, 150,153,173
binary ﬁle, 147
bisection, debugging by, 64
body, 39,47,53,58
bool type, 31
boolean expression, 31,39
boolean operator, 71
bracket
squiggly, 107
bracket operator, 67,92,118
branch, 34,39
break statement, 58
bug, 15
BY-SA, iv
cache, 209
case-sensitivity, variable names, 29
catch, 89
CC-BY-SA, iv
celsius, 36central processing unit, 15
chained conditional, 34,40
character, 67
child class, 183
choice function, 47
class, 177,183
ﬂoat, 19
int,19
str,19
class keyword, 176
close method, 88
colon, 47
comment, 26,29
comparable, 117,125
comparison
string, 71
tuple, 118
comparison operator, 31
compile, 15
composition, 50,53
compound statement, 33,40
concatenation, 24,29,70,98
list,93,101
condition, 33,40,58
conditional
chained, 34,40
nested, 35,40
conditional executions, 32
conditional statement, 32,40
connect function, 187
consistency check, 115
constraint, 207
construct, 177
constructor, 179,183
continue statement, 59
contributors, 223
conversion
type, 44
copy
slice, 69,94
to avoid aliasing, 102
count method, 73
227
228 INDEX
counter, 64,70,76,82,109
counting and looping, 70
CPU, 15
Creative Commons License, iv
curl, 153
cursor, 207
cursor function, 187
data structure, 125
database, 185
indexes, 185
database browser, 207
database normalization, 207
debugging, 14,28,39,52,75,88,102,
114,125
by bisection, 64
decorate-sort-undecorate pattern, 119
decrement, 57,64
def keyword, 47
deﬁnition
function, 47
del operator, 95
deletion, element of list, 95
delimiter, 97,105
destructor, 179,183
deterministic, 46,53
development plan
random walk programming, 14
dict function, 107
dictionary, 107,115,121
looping with, 111
traversal, 122
dir,178
divisibility, 24
division
ﬂoating-point, 23
dot notation, 45,53,72
DSU pattern, 119,125
element, 91,105
element deletion, 95
ElementTree, 156,162
ﬁnd, 156
ﬁndall, 157
fromstring, 156
get,157
elif keyword, 34
ellipses, 47
else keyword, 33
email address, 121
empty list, 91empty string, 76,98
encapsulation, 70
end of line character, 89
equivalence, 99
equivalent, 105
error
runtime, 29
semantic, 20,29
shape, 125
syntax, 28
error message, 20,29
evaluate, 23
exception, 29
IndexError, 68,92
IOError, 86
KeyError, 108
TypeError, 67,70,75,118
ValueError, 26,121
experimental debugging, 14
expression, 22,23,29
boolean, 31,39
extend method, 94
eXtensible Markup Language, 162
fahrenheit, 36
False special value, 31
ﬁle,79
open, 80
reading, 82
writing, 87
ﬁle handle, 80
ﬁlter pattern, 83
ﬁndall, 130
ﬂag, 77
ﬂoat function, 44
ﬂoat type, 19
ﬂoating-point, 29
ﬂoating-point division, 23
ﬂow control, 146
ﬂow of execution, 49,53,58
for loop, 68,92
for statement, 60
foreign key, 207
format operator, 74,76
format sequence, 74,76
format string, 74,77
Free Documentation License, GNU, 222,
223
frequency, 109
letter, 126
fruitful function, 51,53
INDEX 229
function, 47,53
choice, 47
connect, 187
cursor, 187
dict, 107
ﬂoat, 44
int,44
len,68,108
list,97
log,45
open, 80,86
print, 16
randint, 46
random, 46
repr, 88
reversed, 125
sorted, 125
sqrt, 45
str,44
tuple, 117
function argument, 49
function call, 43,53
function deﬁnition, 47,48,53
function object, 48
function parameter, 49
function, fruitful, 51
function, math, 45
function, reasons for, 52
function, trigonometric, 45
function, void, 51
gather, 125
geocoding, 162
get method, 109
GNU Free Documentation License, 222,
223
Google, 162
map, 209
page rank, 211
greedy, 129,138,149
greedy matching, 138
grep, 137,138
guardian pattern, 38,40,76
hardware, 3
architecture, 3
hash function, 115
hash table, 108
hashable, 117,124,125
hashtable, 115
header, 47,53high-level language, 16
histogram, 109,115
HTML, 150,173
identical, 105
identity, 99
idiom, 102,110,112
if statement, 32
image
jpg,144
immutability, 70,77,100,117,124
implementation, 109,115
import statement, 53
in operator, 71,92,108
increment, 57,64
indentation, 47
index, 67,77,92,105,107,207
looping with, 93
negative, 68
slice, 69,94
starting at zero, 67,92
IndexError, 68,92
inﬁnite loop, 58,64
inheritance, 183
initialization (before update), 57
instance, 177
int function, 44
int type, 19
integer, 29
interactive mode, 6,16,21,51
interpret, 16
invocation, 72,77
IOError, 86
is operator, 99
item, 77,91
dictionary, 115
item assignment, 70,92,118
item update, 93
items method, 121
iteration, 57,64
JavaScript Object Notation, 158,162
join method, 98
jpg,144
JSON, 158,162
key,107,115
key-value pair, 107,115,121
keyboard input, 25
KeyError, 108
keys method, 112
230 INDEX
keyword, 21,29
def,47
elif,34
else, 33
keyword argument, 119
language
programming, 5
len function, 68,108
letter frequency, 126
list,91,97,105,124
as argument, 100
concatenation, 93,101
copy, 94
element, 92
empty, 91
function, 97
index, 92
membership, 92
method, 94
nested, 91,93
operation, 93
repetition, 93
slice, 94
traversal, 92,105
list object, 172
log function, 45
logical key, 207
logical operator, 31,32
lookup, 115
loop, 58
for,68,92
inﬁnite, 58
maximum, 62
minimum, 62
nested, 110,115
traversal, 68
while, 57
looping
with dictionaries, 111
with indices, 93
with strings, 70
looping and counting, 70
low-level language, 16
machine code, 16
main memory, 16
math function, 45
membership
dictionary, 108
list,92set,108
message, 183
method, 72,77,183
append, 94,101
close, 88
count, 73
extend, 94
get,109
items, 121
join, 98
keys, 112
pop, 95
remove, 95
sort, 94,102,118
split, 97,121
string, 77
values, 108
void, 95
method, list, 94
mnemonic, 27,29
module, 45,53
random, 46
sqlite3, 187
module object, 45
modulus operator, 24,29
mutability, 70,92,94,100,117,124
negative index, 68
nested conditional, 35,40
nested list, 91,93,105
nested loops, 110,115
newline, 25,81,88,89
non-greedy, 149
None special value, 51,62,95
normalization, 207
not operator, 32
number, random, 46
OAuth, 161
object, 70,77,99,105,177
function, 48
object lifecycle, 179
object-oriented, 171
open function, 80,86
operand, 22,29
operator, 29
and, 32
boolean, 71
bracket, 67,92,118
comparison, 31
del,95
INDEX 231
format, 74,76
in,71,92,108
is,99
logical, 31,32
modulus, 24,29
not,32
or,32
slice, 69,94,101,118
string, 24
operator, arithmetic, 22
optional argument, 73,97
or operator, 32
order of operations, 23,29
parameter, 49,53,100
parent class, 183
parentheses
argument in, 43
empty, 47,72
overriding precedence, 23
parameters in, 50
regular expression, 133,149
tuples in, 117
parse, 16
parsing
HTML, 150,173
parsing HTML, 148
pass statement, 33
pattern
decorate-sort-undecorate, 119
DSU, 119
ﬁlter, 83
guardian, 38,40,76
search, 77
swap, 120
PEMDAS, 23
persistence, 79
pi,45
pop method, 95
port, 154
portability, 16
precedence, 29
primary key, 207
print function, 16
problem solving, 4,16
program, 11,16
programming language, 5
prompt, 16,25
pseudorandom, 46,53
Python 2.0, 23,25
Python 3.0, 23Pythonic, 87,89
QA, 86,89
Quality Assurance, 86,89
quotation mark, 19,69
radian, 45
randint function, 46
random function, 46
random module, 46
random number, 46
random walk programming, 14
rate limiting, 162
re module, 127
reference, 100,105
aliasing, 100
regex, 127
character sets(brackets), 131
ﬁndall, 130
parentheses, 133,149
search, 127
wild card, 128
regular expressions, 127
relation, 207
remove method, 95
repetition
list,93
repr function, 88
return value, 43,53
reversed function, 125
Romeo and Juliet, 105,110,113,119,
123
rules of precedence, 23,29
runtime error, 29
sanity check, 115
scaﬀolding, 115
scatter, 125
script, 10
script mode, 21,51
search pattern, 77
secondary memory, 16,79
semantic error, 16,20,29
semantics, 16
sequence, 67,77,91,97,117,124
Service Oriented Architecture, 162
set membership, 108
shape, 125
shape error, 125
short circuit, 38,40
sine function, 45
232 INDEX
singleton, 117,125
slice, 77
copy, 69,94
list,94
string, 69
tuple, 118
update, 94
slice operator, 69,94,101,118
SOA, 162
socket, 154
sort method, 94,102,118
sorted function, 125
source code, 16
special value
False, 31
None, 51,62,95
True, 31
spider, 154
split method, 97,121
sqlite3 module, 187
sqrt function, 45
squiggly bracket, 107
statement, 21,29
assignment, 20
break, 58
compound, 33
conditional, 32,40
continue, 59
for,60,68,92
if,32
import, 53
pass, 33
try,86
while, 57
str function, 44
string, 19,30,97,124
comparison, 71
empty, 98
ﬁnd, 128
immutable, 70
method, 72
operation, 24
slice, 69
split, 133
startswith, 128
string method, 77
string representation, 88
string type, 19
swap pattern, 120
syntax error, 28temperature conversion, 36
text ﬁle, 89
time, 145
time.sleep, 145
traceback, 36,39,40
traversal, 68,77,109,111,119
list,92
traverse
dictionary, 122
trigonometric function, 45
True special value, 31
try statement, 86
tuple, 117,124,125,207
as key in dictionary, 124
assignment, 120
comparison, 118
in brackets, 124
singleton, 117
slice, 118
tuple assignment, 125
tuple function, 117
type, 19,30,178
bool, 31
dict, 107
ﬁle,79
list,91
tuple, 117
type conversion, 44
TypeError, 67,70,75,118
typographical error, 14
underscore character, 21
Unicode, 189
update, 57
item, 93
slice, 94
urllib
image, 144
use before def, 29,49
value, 19,30,99,115
ValueError, 26,121
values method, 108
variable, 20,30
updating, 57
Visualization
map, 209
networks, 211
page rank, 211
void function, 51,53
void method, 95
INDEX 233
web
scraping, 148
web service, 162
wget, 153
while loop, 57
whitespace, 39,52,88
wild card, 128,139
XML, 162
zero, index starting at, 67,92
